// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9171 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3642 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9507 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 32269 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 37093 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 37093 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 37093 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PUSH
1815: LD_OWVAR 67
1819: ARRAY
1820: PPUSH
1821: LD_INT 100
1823: PPUSH
1824: CALL 37093 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1828: LD_ADDR_EXP 17
1832: PUSH
1833: LD_EXP 17
1837: PPUSH
1838: LD_INT 3
1840: PPUSH
1841: CALL_OW 45
1845: PPUSH
1846: CALL_OW 2
1850: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1851: LD_EXP 17
1855: PUSH
1856: LD_INT 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 200
1862: PPUSH
1863: LD_INT 88
1865: PPUSH
1866: LD_INT 0
1868: PPUSH
1869: CALL_OW 48
// for i = mobile_patrol downto 1 do
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: DOUBLE
1879: LD_EXP 17
1883: INC
1884: ST_TO_ADDR
1885: LD_INT 1
1887: PUSH
1888: FOR_DOWNTO
1889: IFFALSE 1900
// RaiseSailEvent ( 1 ) ;
1891: LD_INT 1
1893: PPUSH
1894: CALL_OW 427
1898: GO 1888
1900: POP
1901: POP
// end ;
1902: LD_VAR 0 1
1906: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1907: LD_INT 0
1909: PPUSH
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1917: LD_ADDR_VAR 0 5
1921: PUSH
1922: LD_INT 20
1924: PUSH
1925: LD_INT 4
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 21
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1957: LD_ADDR_VAR 0 6
1961: PUSH
1962: LD_INT 176
1964: PUSH
1965: LD_INT 81
1967: PUSH
1968: LD_INT 135
1970: PUSH
1971: LD_INT 62
1973: PUSH
1974: LD_INT 114
1976: PUSH
1977: LD_INT 67
1979: PUSH
1980: LD_INT 93
1982: PUSH
1983: LD_INT 71
1985: PUSH
1986: LD_INT 76
1988: PUSH
1989: LD_INT 67
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 107
2006: PUSH
2007: LD_INT 92
2009: PUSH
2010: LD_INT 92
2012: PUSH
2013: LD_INT 72
2015: PUSH
2016: LD_INT 77
2018: PUSH
2019: LD_INT 68
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 45
2032: PUSH
2033: LD_INT 49
2035: PUSH
2036: LD_INT 67
2038: PUSH
2039: LD_INT 59
2041: PUSH
2042: LD_INT 77
2044: PUSH
2045: LD_INT 68
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2061: LD_ADDR_VAR 0 4
2065: PUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_VAR 0 5
2073: PPUSH
2074: CALL_OW 12
2078: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: LD_INT 1
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL_OW 12
2094: ST_TO_ADDR
// uc_side := 1 ;
2095: LD_ADDR_OWVAR 20
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// uc_nation := 1 ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2111: LD_INT 2
2113: PPUSH
2114: LD_INT 3
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 12
2122: PPUSH
2123: LD_INT 100
2125: PPUSH
2126: CALL 37093 0 5
// veh := CreateVehicle ;
2130: LD_ADDR_VAR 0 8
2134: PUSH
2135: CALL_OW 45
2139: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2140: LD_VAR 0 8
2144: PPUSH
2145: LD_VAR 0 5
2149: PUSH
2150: LD_VAR 0 4
2154: ARRAY
2155: PUSH
2156: LD_INT 2
2158: ARRAY
2159: PPUSH
2160: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2164: LD_VAR 0 8
2168: PPUSH
2169: LD_VAR 0 5
2173: PUSH
2174: LD_VAR 0 4
2178: ARRAY
2179: PUSH
2180: LD_INT 1
2182: ARRAY
2183: PPUSH
2184: LD_INT 0
2186: PPUSH
2187: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2191: LD_VAR 0 8
2195: PPUSH
2196: LD_INT 1
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_VAR 0 3
2210: ARRAY
2211: PPUSH
2212: LD_INT 100
2214: PPUSH
2215: CALL_OW 290
// tmp := road [ k ] ;
2219: LD_ADDR_VAR 0 7
2223: PUSH
2224: LD_VAR 0 6
2228: PUSH
2229: LD_VAR 0 4
2233: ARRAY
2234: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: DOUBLE
2241: LD_INT 1
2243: DEC
2244: ST_TO_ADDR
2245: LD_VAR 0 7
2249: PUSH
2250: LD_INT 2
2252: DIV
2253: PUSH
2254: FOR_TO
2255: IFFALSE 2302
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2257: LD_VAR 0 8
2261: PPUSH
2262: LD_VAR 0 7
2266: PUSH
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 2
2274: MUL
2275: PUSH
2276: LD_INT 1
2278: MINUS
2279: ARRAY
2280: PPUSH
2281: LD_VAR 0 7
2285: PUSH
2286: LD_VAR 0 2
2290: PUSH
2291: LD_INT 2
2293: MUL
2294: ARRAY
2295: PPUSH
2296: CALL_OW 171
2300: GO 2254
2302: POP
2303: POP
// AddComGive ( veh , alfa ) ;
2304: LD_VAR 0 8
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2316: LD_VAR 0 8
2320: PPUSH
2321: LD_INT 70
2323: PPUSH
2324: CALL_OW 202
// for i = tmp div 2 downto 1 do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_VAR 0 7
2338: PUSH
2339: LD_INT 2
2341: DIV
2342: INC
2343: ST_TO_ADDR
2344: LD_INT 1
2346: PUSH
2347: FOR_DOWNTO
2348: IFFALSE 2395
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2350: LD_VAR 0 8
2354: PPUSH
2355: LD_VAR 0 7
2359: PUSH
2360: LD_VAR 0 2
2364: PUSH
2365: LD_INT 2
2367: MUL
2368: PUSH
2369: LD_INT 1
2371: MINUS
2372: ARRAY
2373: PPUSH
2374: LD_VAR 0 7
2378: PUSH
2379: LD_VAR 0 2
2383: PUSH
2384: LD_INT 2
2386: MUL
2387: ARRAY
2388: PPUSH
2389: CALL_OW 171
2393: GO 2347
2395: POP
2396: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2397: LD_VAR 0 8
2401: PPUSH
2402: LD_VAR 0 5
2406: PUSH
2407: LD_VAR 0 4
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2421: LD_INT 35
2423: PPUSH
2424: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_VAR 0 4
2442: ARRAY
2443: PUSH
2444: LD_INT 1
2446: ARRAY
2447: PPUSH
2448: CALL_OW 308
2452: PUSH
2453: LD_VAR 0 8
2457: PPUSH
2458: LD_VAR 0 3
2462: PPUSH
2463: CALL_OW 289
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: AND
2472: IFFALSE 2421
// RemoveUnit ( veh ) ;
2474: LD_VAR 0 8
2478: PPUSH
2479: CALL_OW 64
// end ;
2483: LD_VAR 0 1
2487: RET
// every 3 3$00 do
2488: GO 2490
2490: DISABLE
// begin enable ;
2491: ENABLE
// SpawnCargo ;
2492: CALL 1907 0 0
// end ;
2496: END
// export function PrepareDefenders ; var i , tmp ; begin
2497: LD_INT 0
2499: PPUSH
2500: PPUSH
2501: PPUSH
// if defenders then
2502: LD_EXP 20
2506: IFFALSE 2510
// exit ;
2508: GO 2774
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2510: LD_ADDR_VAR 0 2
2514: PUSH
2515: DOUBLE
2516: LD_INT 1
2518: DEC
2519: ST_TO_ADDR
2520: LD_INT 4
2522: PUSH
2523: LD_INT 5
2525: PUSH
2526: LD_INT 6
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_OWVAR 67
2538: ARRAY
2539: PUSH
2540: FOR_TO
2541: IFFALSE 2680
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: LD_INT 6
2550: PPUSH
2551: LD_INT 2
2553: PUSH
2554: LD_INT 3
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 1
2563: PPUSH
2564: LD_INT 2
2566: PPUSH
2567: CALL_OW 12
2571: ARRAY
2572: PPUSH
2573: LD_INT 1
2575: PUSH
2576: LD_INT 3
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 1
2585: PPUSH
2586: LD_INT 2
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 5
2603: PUSH
2604: LD_INT 9
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 1
2614: PPUSH
2615: LD_INT 3
2617: PPUSH
2618: CALL_OW 12
2622: ARRAY
2623: PPUSH
2624: CALL 34747 0 5
2628: ST_TO_ADDR
// if tmp then
2629: LD_VAR 0 3
2633: IFFALSE 2678
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2635: LD_INT 6
2637: PPUSH
2638: LD_VAR 0 3
2642: PUSH
2643: LD_INT 1
2645: ARRAY
2646: PPUSH
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 2
2654: ARRAY
2655: PPUSH
2656: LD_VAR 0 3
2660: PUSH
2661: LD_INT 3
2663: ARRAY
2664: PPUSH
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 4
2672: ARRAY
2673: PPUSH
2674: CALL_OW 185
// end ;
2678: GO 2540
2680: POP
2681: POP
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 ] [ Difficulty ] ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 1
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 33
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PPUSH
2713: CALL_OW 69
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: LD_INT 5
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: PUSH
2732: LD_OWVAR 67
2736: ARRAY
2737: GREATEREQUAL
2738: IFFALSE 2682
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2740: LD_ADDR_EXP 20
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 1
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 33
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: ST_TO_ADDR
// end ;
2774: LD_VAR 0 1
2778: RET
// export function Defend ; var i , un , veh , tmp ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
// defcon_wave := defcon_wave + 1 ;
2786: LD_ADDR_EXP 22
2790: PUSH
2791: LD_EXP 22
2795: PUSH
2796: LD_INT 1
2798: PLUS
2799: ST_TO_ADDR
// if not defenders then
2800: LD_EXP 20
2804: NOT
2805: IFFALSE 2811
// PrepareDefenders ;
2807: CALL 2497 0 0
// if defcon_wave > 1 then
2811: LD_EXP 22
2815: PUSH
2816: LD_INT 1
2818: GREATER
2819: IFFALSE 3077
// begin for i = 1 to defcon_wave + 2 do
2821: LD_ADDR_VAR 0 2
2825: PUSH
2826: DOUBLE
2827: LD_INT 1
2829: DEC
2830: ST_TO_ADDR
2831: LD_EXP 22
2835: PUSH
2836: LD_INT 2
2838: PLUS
2839: PUSH
2840: FOR_TO
2841: IFFALSE 2983
// begin uc_side := 1 ;
2843: LD_ADDR_OWVAR 20
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// uc_nation := 1 ;
2851: LD_ADDR_OWVAR 21
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2859: LD_INT 4
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_INT 4
2870: PUSH
2871: LD_INT 6
2873: PUSH
2874: LD_INT 7
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 1
2884: PPUSH
2885: LD_INT 3
2887: PPUSH
2888: CALL_OW 12
2892: ARRAY
2893: PPUSH
2894: LD_INT 100
2896: PPUSH
2897: CALL 37093 0 5
// veh := CreateVehicle ;
2901: LD_ADDR_VAR 0 4
2905: PUSH
2906: CALL_OW 45
2910: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2911: LD_VAR 0 4
2915: PPUSH
2916: LD_INT 1
2918: PPUSH
2919: CALL_OW 233
// defenders := defenders ^ veh ;
2923: LD_ADDR_EXP 20
2927: PUSH
2928: LD_EXP 20
2932: PUSH
2933: LD_VAR 0 4
2937: ADD
2938: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2939: LD_INT 0
2941: PPUSH
2942: LD_INT 3
2944: PPUSH
2945: LD_INT 9
2947: PPUSH
2948: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2952: CALL_OW 44
2956: PPUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_INT 25
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: CALL_OW 49
// end ;
2981: GO 2840
2983: POP
2984: POP
// for i = 1 to defcon_wave do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: DOUBLE
2991: LD_INT 1
2993: DEC
2994: ST_TO_ADDR
2995: LD_EXP 22
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3075
// begin uc_side := 1 ;
3003: LD_ADDR_OWVAR 20
3007: PUSH
3008: LD_INT 1
3010: ST_TO_ADDR
// uc_nation := 1 ;
3011: LD_ADDR_OWVAR 21
3015: PUSH
3016: LD_INT 1
3018: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3019: LD_INT 0
3021: PPUSH
3022: LD_INT 5
3024: PPUSH
3025: LD_INT 9
3027: PPUSH
3028: CALL_OW 380
// un := CreateHuman ;
3032: LD_ADDR_VAR 0 3
3036: PUSH
3037: CALL_OW 44
3041: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3042: LD_VAR 0 3
3046: PPUSH
3047: LD_INT 25
3049: PPUSH
3050: LD_INT 0
3052: PPUSH
3053: CALL_OW 49
// defenders := defenders ^ un ;
3057: LD_ADDR_EXP 20
3061: PUSH
3062: LD_EXP 20
3066: PUSH
3067: LD_VAR 0 3
3071: ADD
3072: ST_TO_ADDR
// end ;
3073: GO 3000
3075: POP
3076: POP
// end ; repeat wait ( 0 0$1 ) ;
3077: LD_INT 35
3079: PPUSH
3080: CALL_OW 67
// for i in defenders do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: LD_EXP 20
3093: PUSH
3094: FOR_IN
3095: IFFALSE 3177
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3097: LD_EXP 21
3101: PUSH
3102: LD_VAR 0 2
3106: PPUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: LD_EXP 21
3120: PUSH
3121: LD_INT 2
3123: ARRAY
3124: PPUSH
3125: CALL_OW 297
3129: PUSH
3130: LD_INT 10
3132: GREATER
3133: AND
3134: PUSH
3135: LD_VAR 0 2
3139: PPUSH
3140: CALL_OW 314
3144: NOT
3145: AND
3146: IFFALSE 3175
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3148: LD_VAR 0 2
3152: PPUSH
3153: LD_EXP 21
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PPUSH
3162: LD_EXP 21
3166: PUSH
3167: LD_INT 2
3169: ARRAY
3170: PPUSH
3171: CALL_OW 114
// end ;
3175: GO 3094
3177: POP
3178: POP
// until not defenders ;
3179: LD_EXP 20
3183: NOT
3184: IFFALSE 3077
// end ;
3186: LD_VAR 0 1
3190: RET
// every 0 0$1 do var radar , i ;
3191: GO 3193
3193: DISABLE
3194: LD_INT 0
3196: PPUSH
3197: PPUSH
// begin uc_side := 1 ;
3198: LD_ADDR_OWVAR 20
3202: PUSH
3203: LD_INT 1
3205: ST_TO_ADDR
// uc_nation := 1 ;
3206: LD_ADDR_OWVAR 21
3210: PUSH
3211: LD_INT 1
3213: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3214: LD_INT 1
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_INT 3
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 100
3228: PPUSH
3229: CALL 37093 0 5
// radar := CreateVehicle ;
3233: LD_ADDR_VAR 0 1
3237: PUSH
3238: CALL_OW 45
3242: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3243: LD_VAR 0 1
3247: PPUSH
3248: LD_INT 4
3250: PPUSH
3251: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 51
3262: PPUSH
3263: LD_INT 45
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: LD_INT 700
3280: PPUSH
3281: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 65
3292: PPUSH
3293: LD_INT 75
3295: PPUSH
3296: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3300: LD_VAR 0 1
3304: PPUSH
3305: LD_INT 350
3307: PPUSH
3308: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 83
3319: PPUSH
3320: LD_INT 87
3322: PPUSH
3323: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3327: LD_VAR 0 1
3331: PPUSH
3332: LD_INT 525
3334: PPUSH
3335: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 94
3346: PPUSH
3347: LD_INT 81
3349: PPUSH
3350: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3354: LD_VAR 0 1
3358: PPUSH
3359: LD_INT 350
3361: PPUSH
3362: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 55
3373: PPUSH
3374: LD_INT 48
3376: PPUSH
3377: CALL_OW 171
// wait ( 1 1$00 ) ;
3381: LD_INT 2100
3383: PPUSH
3384: CALL_OW 67
// until not IsOk ( radar ) ;
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 302
3397: NOT
3398: IFFALSE 3273
// end ;
3400: PPOPN 2
3402: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: PUSH
3412: LD_EXP 11
3416: AND
3417: IFFALSE 3639
3419: GO 3421
3421: DISABLE
3422: LD_INT 0
3424: PPUSH
// begin enable ;
3425: ENABLE
// uc_side := 1 ;
3426: LD_ADDR_OWVAR 20
3430: PUSH
3431: LD_INT 1
3433: ST_TO_ADDR
// uc_nation := 1 ;
3434: LD_ADDR_OWVAR 21
3438: PUSH
3439: LD_INT 1
3441: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3442: LD_INT 5
3444: PPUSH
3445: LD_INT 3
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 100
3456: PPUSH
3457: CALL 37093 0 5
// un := CreateVehicle ;
3461: LD_ADDR_VAR 0 1
3465: PUSH
3466: CALL_OW 45
3470: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 155
3490: PPUSH
3491: LD_INT 2
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_INT 169
3508: PPUSH
3509: LD_INT 77
3511: PPUSH
3512: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3516: LD_VAR 0 1
3520: PPUSH
3521: LD_INT 70
3523: PPUSH
3524: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 134
3535: PPUSH
3536: LD_INT 62
3538: PPUSH
3539: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3543: LD_VAR 0 1
3547: PPUSH
3548: LD_INT 103
3550: PPUSH
3551: LD_INT 42
3553: PPUSH
3554: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: LD_INT 70
3565: PPUSH
3566: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 84
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3585: LD_INT 35
3587: PPUSH
3588: CALL_OW 67
// if IsDead ( un ) then
3592: LD_VAR 0 1
3596: PPUSH
3597: CALL_OW 301
3601: IFFALSE 3613
// begin extra_patrol := false ;
3603: LD_ADDR_EXP 11
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// exit ;
3611: GO 3639
// end ; until IsAt ( un , 84 , 2 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 84
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: CALL_OW 307
3628: IFFALSE 3585
// RemoveUnit ( un ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: CALL_OW 64
// end ; end_of_file
3639: PPOPN 1
3641: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3642: LD_INT 0
3644: PPUSH
3645: PPUSH
3646: PPUSH
3647: PPUSH
3648: PPUSH
3649: PPUSH
3650: PPUSH
// uc_side := 4 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 4
3658: ST_TO_ADDR
// uc_nation := 1 ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3667: LD_ADDR_EXP 37
3671: PUSH
3672: LD_STRING DeltaDoctor
3674: PPUSH
3675: LD_EXP 1
3679: NOT
3680: PPUSH
3681: LD_STRING 10c_
3683: PPUSH
3684: CALL 32269 0 3
3688: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3689: LD_ADDR_EXP 36
3693: PUSH
3694: LD_STRING Joan
3696: PPUSH
3697: LD_EXP 1
3701: NOT
3702: PPUSH
3703: LD_STRING 10c_
3705: PPUSH
3706: CALL 32269 0 3
3710: ST_TO_ADDR
// if Joan then
3711: LD_EXP 36
3715: IFFALSE 3746
// friends := Insert ( friends , friends + 1 , Joan ) ;
3717: LD_ADDR_EXP 4
3721: PUSH
3722: LD_EXP 4
3726: PPUSH
3727: LD_EXP 4
3731: PUSH
3732: LD_INT 1
3734: PLUS
3735: PPUSH
3736: LD_EXP 36
3740: PPUSH
3741: CALL_OW 2
3745: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3746: LD_ADDR_EXP 35
3750: PUSH
3751: LD_STRING Simms
3753: PPUSH
3754: LD_EXP 1
3758: NOT
3759: PPUSH
3760: LD_STRING 10c_
3762: PPUSH
3763: CALL 32269 0 3
3767: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3768: LD_ADDR_EXP 34
3772: PUSH
3773: LD_STRING Kikuchi
3775: PPUSH
3776: LD_EXP 1
3780: NOT
3781: PPUSH
3782: LD_STRING 11_
3784: PPUSH
3785: CALL 32269 0 3
3789: ST_TO_ADDR
// if Kikuchi then
3790: LD_EXP 34
3794: IFFALSE 3825
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3796: LD_ADDR_EXP 4
3800: PUSH
3801: LD_EXP 4
3805: PPUSH
3806: LD_EXP 4
3810: PUSH
3811: LD_INT 1
3813: PLUS
3814: PPUSH
3815: LD_EXP 34
3819: PPUSH
3820: CALL_OW 2
3824: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3825: LD_ADDR_EXP 33
3829: PUSH
3830: LD_STRING Frank
3832: PPUSH
3833: LD_EXP 1
3837: NOT
3838: PPUSH
3839: LD_STRING 11_
3841: PPUSH
3842: CALL 32269 0 3
3846: ST_TO_ADDR
// if Frank then
3847: LD_EXP 33
3851: IFFALSE 3882
// friends := Insert ( friends , friends + 1 , Frank ) ;
3853: LD_ADDR_EXP 4
3857: PUSH
3858: LD_EXP 4
3862: PPUSH
3863: LD_EXP 4
3867: PUSH
3868: LD_INT 1
3870: PLUS
3871: PPUSH
3872: LD_EXP 33
3876: PPUSH
3877: CALL_OW 2
3881: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3882: LD_ADDR_EXP 32
3886: PUSH
3887: LD_STRING Gary
3889: PPUSH
3890: LD_EXP 1
3894: NOT
3895: PPUSH
3896: LD_STRING 11_
3898: PPUSH
3899: CALL 32269 0 3
3903: ST_TO_ADDR
// if Gary then
3904: LD_EXP 32
3908: IFFALSE 3939
// friends := Insert ( friends , friends + 1 , Gary ) ;
3910: LD_ADDR_EXP 4
3914: PUSH
3915: LD_EXP 4
3919: PPUSH
3920: LD_EXP 4
3924: PUSH
3925: LD_INT 1
3927: PLUS
3928: PPUSH
3929: LD_EXP 32
3933: PPUSH
3934: CALL_OW 2
3938: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3939: LD_ADDR_EXP 31
3943: PUSH
3944: LD_STRING Cornell
3946: PPUSH
3947: LD_EXP 1
3951: NOT
3952: PPUSH
3953: LD_STRING 11_
3955: PPUSH
3956: CALL 32269 0 3
3960: ST_TO_ADDR
// if Cornel then
3961: LD_EXP 31
3965: IFFALSE 3996
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: LD_EXP 4
3976: PPUSH
3977: LD_EXP 4
3981: PUSH
3982: LD_INT 1
3984: PLUS
3985: PPUSH
3986: LD_EXP 31
3990: PPUSH
3991: CALL_OW 2
3995: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
3996: LD_ADDR_EXP 30
4000: PUSH
4001: LD_STRING Houten
4003: PPUSH
4004: LD_EXP 1
4008: NOT
4009: PPUSH
4010: LD_STRING 11_
4012: PPUSH
4013: CALL 32269 0 3
4017: ST_TO_ADDR
// if Houten then
4018: LD_EXP 30
4022: IFFALSE 4053
// friends := Insert ( friends , friends + 1 , Houten ) ;
4024: LD_ADDR_EXP 4
4028: PUSH
4029: LD_EXP 4
4033: PPUSH
4034: LD_EXP 4
4038: PUSH
4039: LD_INT 1
4041: PLUS
4042: PPUSH
4043: LD_EXP 30
4047: PPUSH
4048: CALL_OW 2
4052: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4053: LD_ADDR_EXP 29
4057: PUSH
4058: LD_STRING Gladstone
4060: PPUSH
4061: LD_EXP 1
4065: NOT
4066: PPUSH
4067: LD_STRING 11_
4069: PPUSH
4070: CALL 32269 0 3
4074: ST_TO_ADDR
// if Gladstone then
4075: LD_EXP 29
4079: IFFALSE 4110
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4081: LD_ADDR_EXP 4
4085: PUSH
4086: LD_EXP 4
4090: PPUSH
4091: LD_EXP 4
4095: PUSH
4096: LD_INT 1
4098: PLUS
4099: PPUSH
4100: LD_EXP 29
4104: PPUSH
4105: CALL_OW 2
4109: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4110: LD_ADDR_EXP 23
4114: PUSH
4115: LD_STRING Lisa
4117: PPUSH
4118: LD_EXP 1
4122: NOT
4123: PPUSH
4124: LD_STRING 11_
4126: PPUSH
4127: CALL 32269 0 3
4131: ST_TO_ADDR
// if Lisa then
4132: LD_EXP 23
4136: IFFALSE 4161
// friends := Insert ( friends , 1 , Lisa ) ;
4138: LD_ADDR_EXP 4
4142: PUSH
4143: LD_EXP 4
4147: PPUSH
4148: LD_INT 1
4150: PPUSH
4151: LD_EXP 23
4155: PPUSH
4156: CALL_OW 2
4160: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4161: LD_ADDR_EXP 24
4165: PUSH
4166: LD_STRING Donaldson
4168: PPUSH
4169: LD_EXP 1
4173: NOT
4174: PPUSH
4175: LD_STRING 11_
4177: PPUSH
4178: CALL 32269 0 3
4182: ST_TO_ADDR
// if Donaldson then
4183: LD_EXP 24
4187: IFFALSE 4218
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4189: LD_ADDR_EXP 4
4193: PUSH
4194: LD_EXP 4
4198: PPUSH
4199: LD_EXP 4
4203: PUSH
4204: LD_INT 1
4206: PLUS
4207: PPUSH
4208: LD_EXP 24
4212: PPUSH
4213: CALL_OW 2
4217: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4218: LD_ADDR_EXP 25
4222: PUSH
4223: LD_STRING Bobby
4225: PPUSH
4226: LD_EXP 1
4230: NOT
4231: PPUSH
4232: LD_STRING 11_
4234: PPUSH
4235: CALL 32269 0 3
4239: ST_TO_ADDR
// if Bobby then
4240: LD_EXP 25
4244: IFFALSE 4275
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4246: LD_ADDR_EXP 4
4250: PUSH
4251: LD_EXP 4
4255: PPUSH
4256: LD_EXP 4
4260: PUSH
4261: LD_INT 1
4263: PLUS
4264: PPUSH
4265: LD_EXP 25
4269: PPUSH
4270: CALL_OW 2
4274: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4275: LD_ADDR_EXP 26
4279: PUSH
4280: LD_STRING Cyrus
4282: PPUSH
4283: LD_EXP 1
4287: NOT
4288: PPUSH
4289: LD_STRING 11_
4291: PPUSH
4292: CALL 32269 0 3
4296: ST_TO_ADDR
// if Cyrus then
4297: LD_EXP 26
4301: IFFALSE 4332
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4303: LD_ADDR_EXP 4
4307: PUSH
4308: LD_EXP 4
4312: PPUSH
4313: LD_EXP 4
4317: PUSH
4318: LD_INT 1
4320: PLUS
4321: PPUSH
4322: LD_EXP 26
4326: PPUSH
4327: CALL_OW 2
4331: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4332: LD_ADDR_EXP 27
4336: PUSH
4337: LD_STRING Denis
4339: PPUSH
4340: LD_EXP 1
4344: NOT
4345: PPUSH
4346: LD_STRING 11_
4348: PPUSH
4349: CALL 32269 0 3
4353: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4354: LD_ADDR_EXP 28
4358: PUSH
4359: LD_STRING Brown
4361: PPUSH
4362: LD_EXP 1
4366: NOT
4367: PPUSH
4368: LD_STRING 11_
4370: PPUSH
4371: CALL 32269 0 3
4375: ST_TO_ADDR
// if Brown then
4376: LD_EXP 28
4380: IFFALSE 4411
// friends := Insert ( friends , friends + 1 , Brown ) ;
4382: LD_ADDR_EXP 4
4386: PUSH
4387: LD_EXP 4
4391: PPUSH
4392: LD_EXP 4
4396: PUSH
4397: LD_INT 1
4399: PLUS
4400: PPUSH
4401: LD_EXP 28
4405: PPUSH
4406: CALL_OW 2
4410: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4411: LD_ADDR_EXP 4
4415: PUSH
4416: LD_EXP 4
4420: PUSH
4421: LD_STRING 11c_others
4423: PPUSH
4424: CALL_OW 31
4428: ADD
4429: PUSH
4430: LD_STRING 11_others
4432: PPUSH
4433: CALL_OW 31
4437: ADD
4438: ST_TO_ADDR
// if friends < 18 then
4439: LD_EXP 4
4443: PUSH
4444: LD_INT 18
4446: LESS
4447: IFFALSE 4519
// for i = 1 to 18 do
4449: LD_ADDR_VAR 0 2
4453: PUSH
4454: DOUBLE
4455: LD_INT 1
4457: DEC
4458: ST_TO_ADDR
4459: LD_INT 18
4461: PUSH
4462: FOR_TO
4463: IFFALSE 4517
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: LD_INT 4
4473: PPUSH
4474: CALL_OW 12
4478: PPUSH
4479: LD_INT 7
4481: PPUSH
4482: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4486: LD_ADDR_EXP 4
4490: PUSH
4491: LD_EXP 4
4495: PPUSH
4496: LD_EXP 4
4500: PUSH
4501: LD_INT 1
4503: PLUS
4504: PPUSH
4505: CALL_OW 44
4509: PPUSH
4510: CALL_OW 2
4514: ST_TO_ADDR
// end ;
4515: GO 4462
4517: POP
4518: POP
// for i in friends do
4519: LD_ADDR_VAR 0 2
4523: PUSH
4524: LD_EXP 4
4528: PUSH
4529: FOR_IN
4530: IFFALSE 4588
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4532: LD_VAR 0 2
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: CALL_OW 259
4544: PUSH
4545: LD_VAR 0 2
4549: PPUSH
4550: LD_INT 4
4552: PPUSH
4553: CALL_OW 259
4557: GREATEREQUAL
4558: IFFALSE 4574
// SetClass ( i , class_soldier ) else
4560: LD_VAR 0 2
4564: PPUSH
4565: LD_INT 1
4567: PPUSH
4568: CALL_OW 336
4572: GO 4586
// SetClass ( i , class_scientistic ) ;
4574: LD_VAR 0 2
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: CALL_OW 336
4586: GO 4529
4588: POP
4589: POP
// if Frank then
4590: LD_EXP 33
4594: IFFALSE 4608
// SetClass ( Frank , class_sniper ) ;
4596: LD_EXP 33
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4608: LD_EXP 36
4612: PUSH
4613: LD_EXP 27
4617: PUSH
4618: LD_EXP 37
4622: PUSH
4623: LD_EXP 35
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: LD_INT 4
4636: PPUSH
4637: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4641: LD_ADDR_EXP 3
4645: PUSH
4646: LD_STRING 
4648: PPUSH
4649: LD_INT 7
4651: PPUSH
4652: LD_INT 7
4654: PPUSH
4655: LD_INT -6
4657: PUSH
4658: LD_EXP 14
4662: PUSH
4663: LD_EXP 15
4667: PUSH
4668: LD_EXP 35
4672: PUSH
4673: LD_EXP 27
4677: PUSH
4678: LD_EXP 37
4682: PUSH
4683: LD_INT -2
4685: PUSH
4686: LD_INT -3
4688: PUSH
4689: LD_INT -5
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: PUSH
4703: LD_EXP 4
4707: ADD
4708: PPUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 4
4714: PUSH
4715: LD_INT 2
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 5
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: LD_INT 3
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 42
4745: ST_TO_ADDR
// if Simms then
4746: LD_EXP 35
4750: IFFALSE 4768
// selected := selected ^ Simms ;
4752: LD_ADDR_EXP 3
4756: PUSH
4757: LD_EXP 3
4761: PUSH
4762: LD_EXP 35
4766: ADD
4767: ST_TO_ADDR
// if Denis then
4768: LD_EXP 27
4772: IFFALSE 4790
// selected := selected ^ Denis ;
4774: LD_ADDR_EXP 3
4778: PUSH
4779: LD_EXP 3
4783: PUSH
4784: LD_EXP 27
4788: ADD
4789: ST_TO_ADDR
// if DeltaDoctor then
4790: LD_EXP 37
4794: IFFALSE 4812
// selected := selected ^ DeltaDoctor ;
4796: LD_ADDR_EXP 3
4800: PUSH
4801: LD_EXP 3
4805: PUSH
4806: LD_EXP 37
4810: ADD
4811: ST_TO_ADDR
// friends := friends diff selected ;
4812: LD_ADDR_EXP 4
4816: PUSH
4817: LD_EXP 4
4821: PUSH
4822: LD_EXP 3
4826: DIFF
4827: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4828: LD_ADDR_VAR 0 4
4832: PUSH
4833: LD_INT 111
4835: PUSH
4836: LD_INT 137
4838: PUSH
4839: LD_INT 51
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 147
4849: PUSH
4850: LD_INT 129
4852: PUSH
4853: LD_INT 25
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: LD_INT 7
4878: PUSH
4879: LD_INT 8
4881: PUSH
4882: LD_INT 17
4884: PUSH
4885: LD_INT 18
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: ST_TO_ADDR
// for i in buildings do
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_VAR 0 4
4905: PUSH
4906: FOR_IN
4907: IFFALSE 4923
// SetSide ( i , 4 ) ;
4909: LD_VAR 0 2
4913: PPUSH
4914: LD_INT 4
4916: PPUSH
4917: CALL_OW 235
4921: GO 4906
4923: POP
4924: POP
// for i in selected do
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: LD_EXP 3
4934: PUSH
4935: FOR_IN
4936: IFFALSE 5276
// begin if GetClass ( i ) in [ 1 , 5 ] then
4938: LD_VAR 0 2
4942: PPUSH
4943: CALL_OW 257
4947: PUSH
4948: LD_INT 1
4950: PUSH
4951: LD_INT 5
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: IN
4958: IFFALSE 5118
// begin if buildings [ 1 ] then
4960: LD_VAR 0 4
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: IFFALSE 5029
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4970: LD_VAR 0 2
4974: PPUSH
4975: LD_VAR 0 4
4979: PUSH
4980: LD_INT 1
4982: ARRAY
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
4992: LD_ADDR_VAR 0 4
4996: PUSH
4997: LD_VAR 0 4
5001: PPUSH
5002: LD_INT 1
5004: PPUSH
5005: LD_VAR 0 4
5009: PUSH
5010: LD_INT 1
5012: ARRAY
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 3
5021: PPUSH
5022: CALL_OW 1
5026: ST_TO_ADDR
// end else
5027: GO 5116
// begin if not areas then
5029: LD_VAR 0 5
5033: NOT
5034: IFFALSE 5068
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5036: LD_VAR 0 2
5040: PPUSH
5041: LD_INT 87
5043: PPUSH
5044: LD_INT 68
5046: PPUSH
5047: LD_INT 8
5049: PPUSH
5050: LD_INT 0
5052: PPUSH
5053: CALL_OW 50
// ComHold ( i ) ;
5057: LD_VAR 0 2
5061: PPUSH
5062: CALL_OW 140
// end else
5066: GO 5116
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5068: LD_VAR 0 2
5072: PPUSH
5073: LD_VAR 0 5
5077: PUSH
5078: LD_INT 1
5080: ARRAY
5081: PPUSH
5082: LD_INT 0
5084: PPUSH
5085: CALL_OW 49
// ComHold ( i ) ;
5089: LD_VAR 0 2
5093: PPUSH
5094: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5098: LD_ADDR_VAR 0 5
5102: PUSH
5103: LD_VAR 0 5
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL_OW 3
5115: ST_TO_ADDR
// end ; end ; end else
5116: GO 5274
// begin if buildings [ 2 ] then
5118: LD_VAR 0 4
5122: PUSH
5123: LD_INT 2
5125: ARRAY
5126: IFFALSE 5187
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5128: LD_VAR 0 2
5132: PPUSH
5133: LD_VAR 0 4
5137: PUSH
5138: LD_INT 2
5140: ARRAY
5141: PUSH
5142: LD_INT 1
5144: ARRAY
5145: PPUSH
5146: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5150: LD_ADDR_VAR 0 4
5154: PUSH
5155: LD_VAR 0 4
5159: PPUSH
5160: LD_INT 2
5162: PPUSH
5163: LD_VAR 0 4
5167: PUSH
5168: LD_INT 2
5170: ARRAY
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: CALL_OW 3
5179: PPUSH
5180: CALL_OW 1
5184: ST_TO_ADDR
// end else
5185: GO 5274
// begin if not areas then
5187: LD_VAR 0 5
5191: NOT
5192: IFFALSE 5226
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5194: LD_VAR 0 2
5198: PPUSH
5199: LD_INT 87
5201: PPUSH
5202: LD_INT 68
5204: PPUSH
5205: LD_INT 8
5207: PPUSH
5208: LD_INT 0
5210: PPUSH
5211: CALL_OW 50
// ComHold ( i ) ;
5215: LD_VAR 0 2
5219: PPUSH
5220: CALL_OW 140
// end else
5224: GO 5274
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5226: LD_VAR 0 2
5230: PPUSH
5231: LD_VAR 0 5
5235: PUSH
5236: LD_INT 1
5238: ARRAY
5239: PPUSH
5240: LD_INT 0
5242: PPUSH
5243: CALL_OW 49
// ComHold ( i ) ;
5247: LD_VAR 0 2
5251: PPUSH
5252: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5256: LD_ADDR_VAR 0 5
5260: PUSH
5261: LD_VAR 0 5
5265: PPUSH
5266: LD_INT 1
5268: PPUSH
5269: CALL_OW 3
5273: ST_TO_ADDR
// end ; end ; end ; end ;
5274: GO 4935
5276: POP
5277: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5278: LD_ADDR_VAR 0 6
5282: PUSH
5283: LD_INT 22
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 30
5295: PUSH
5296: LD_INT 32
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PPUSH
5307: CALL_OW 69
5311: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5312: LD_ADDR_VAR 0 2
5316: PUSH
5317: DOUBLE
5318: LD_VAR 0 6
5322: PUSH
5323: LD_EXP 4
5327: MINUS
5328: INC
5329: ST_TO_ADDR
5330: LD_INT 1
5332: PUSH
5333: FOR_DOWNTO
5334: IFFALSE 5397
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
5336: LD_INT 0
5338: PPUSH
5339: LD_INT 1
5341: PPUSH
5342: LD_INT 7
5344: PUSH
5345: LD_INT 8
5347: PUSH
5348: LD_INT 9
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PPUSH
5362: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5366: LD_ADDR_EXP 4
5370: PUSH
5371: LD_EXP 4
5375: PPUSH
5376: LD_EXP 4
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PPUSH
5385: CALL_OW 44
5389: PPUSH
5390: CALL_OW 2
5394: ST_TO_ADDR
// end ;
5395: GO 5333
5397: POP
5398: POP
// if friends then
5399: LD_EXP 4
5403: IFFALSE 5519
// begin tmp := friends ;
5405: LD_ADDR_VAR 0 3
5409: PUSH
5410: LD_EXP 4
5414: ST_TO_ADDR
// for i = 1 to bunkers do
5415: LD_ADDR_VAR 0 2
5419: PUSH
5420: DOUBLE
5421: LD_INT 1
5423: DEC
5424: ST_TO_ADDR
5425: LD_VAR 0 6
5429: PUSH
5430: FOR_TO
5431: IFFALSE 5517
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5433: LD_VAR 0 3
5437: PUSH
5438: LD_VAR 0 3
5442: ARRAY
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5451: LD_VAR 0 3
5455: PUSH
5456: LD_VAR 0 3
5460: ARRAY
5461: PPUSH
5462: LD_INT 1
5464: PPUSH
5465: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5469: LD_VAR 0 3
5473: PUSH
5474: LD_VAR 0 3
5478: ARRAY
5479: PPUSH
5480: LD_VAR 0 6
5484: PUSH
5485: LD_VAR 0 2
5489: ARRAY
5490: PPUSH
5491: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5495: LD_ADDR_VAR 0 3
5499: PUSH
5500: LD_VAR 0 3
5504: PPUSH
5505: LD_VAR 0 3
5509: PPUSH
5510: CALL_OW 3
5514: ST_TO_ADDR
// end ;
5515: GO 5430
5517: POP
5518: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5519: LD_ADDR_VAR 0 5
5523: PUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 9
5531: PUSH
5532: LD_INT 10
5534: PUSH
5535: LD_INT 11
5537: PUSH
5538: LD_INT 12
5540: PUSH
5541: LD_INT 13
5543: PUSH
5544: LD_INT 14
5546: PUSH
5547: LD_INT 15
5549: PUSH
5550: LD_INT 16
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 27
5558: PUSH
5559: LD_INT 28
5561: PUSH
5562: LD_INT 29
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 31
5570: PUSH
5571: LD_INT 32
5573: PUSH
5574: LD_INT 33
5576: PUSH
5577: LD_INT 34
5579: PUSH
5580: LD_INT 35
5582: PUSH
5583: LD_INT 36
5585: PUSH
5586: LD_INT 37
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: UNION
5611: ST_TO_ADDR
// for i in friends do
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_EXP 4
5621: PUSH
5622: FOR_IN
5623: IFFALSE 5910
// begin SetTag ( i , 2 ) ;
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5637: LD_VAR 0 2
5641: PPUSH
5642: CALL_OW 257
5646: PUSH
5647: LD_INT 1
5649: PUSH
5650: LD_INT 4
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: IN
5661: NOT
5662: IFFALSE 5676
// SetClass ( i , 1 ) ;
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5676: LD_VAR 0 2
5680: PPUSH
5681: CALL_OW 257
5685: PUSH
5686: LD_INT 1
5688: PUSH
5689: LD_INT 5
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: IN
5696: PUSH
5697: LD_VAR 0 4
5701: PUSH
5702: LD_INT 1
5704: ARRAY
5705: AND
5706: IFFALSE 5767
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5708: LD_VAR 0 2
5712: PPUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5730: LD_ADDR_VAR 0 4
5734: PUSH
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: LD_VAR 0 4
5747: PUSH
5748: LD_INT 1
5750: ARRAY
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 3
5759: PPUSH
5760: CALL_OW 1
5764: ST_TO_ADDR
// continue ;
5765: GO 5622
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5767: LD_VAR 0 2
5771: PPUSH
5772: CALL_OW 257
5776: PUSH
5777: LD_INT 4
5779: EQUAL
5780: PUSH
5781: LD_VAR 0 4
5785: PUSH
5786: LD_INT 2
5788: ARRAY
5789: AND
5790: IFFALSE 5851
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5792: LD_VAR 0 2
5796: PPUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: PUSH
5806: LD_INT 1
5808: ARRAY
5809: PPUSH
5810: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5814: LD_ADDR_VAR 0 4
5818: PUSH
5819: LD_VAR 0 4
5823: PPUSH
5824: LD_INT 2
5826: PPUSH
5827: LD_VAR 0 4
5831: PUSH
5832: LD_INT 2
5834: ARRAY
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: CALL_OW 3
5843: PPUSH
5844: CALL_OW 1
5848: ST_TO_ADDR
// continue ;
5849: GO 5622
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5851: LD_VAR 0 2
5855: PPUSH
5856: LD_VAR 0 5
5860: PUSH
5861: LD_INT 1
5863: ARRAY
5864: PPUSH
5865: LD_INT 0
5867: PPUSH
5868: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5872: LD_ADDR_VAR 0 5
5876: PUSH
5877: LD_VAR 0 5
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: CALL_OW 3
5889: ST_TO_ADDR
// ComHold ( i ) ;
5890: LD_VAR 0 2
5894: PPUSH
5895: CALL_OW 140
// if not areas then
5899: LD_VAR 0 5
5903: NOT
5904: IFFALSE 5908
// break ;
5906: GO 5910
// end ;
5908: GO 5622
5910: POP
5911: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5912: LD_EXP 4
5916: PPUSH
5917: LD_INT 3
5919: PUSH
5920: LD_INT 52
5922: PUSH
5923: EMPTY
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PPUSH
5930: CALL_OW 72
5934: IFFALSE 6001
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_EXP 4
5945: PPUSH
5946: LD_INT 3
5948: PUSH
5949: LD_INT 52
5951: PUSH
5952: EMPTY
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PPUSH
5959: CALL_OW 72
5963: PUSH
5964: FOR_IN
5965: IFFALSE 5999
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5967: LD_VAR 0 2
5971: PPUSH
5972: LD_INT 65
5974: PPUSH
5975: LD_INT 58
5977: PPUSH
5978: LD_INT 7
5980: PPUSH
5981: LD_INT 0
5983: PPUSH
5984: CALL_OW 50
// ComHold ( i ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: CALL_OW 140
// end ;
5997: GO 5964
5999: POP
6000: POP
// if Frank then
6001: LD_EXP 33
6005: IFFALSE 6019
// SetClass ( Frank , class_sniper ) ;
6007: LD_EXP 33
6011: PPUSH
6012: LD_INT 5
6014: PPUSH
6015: CALL_OW 336
// end ; end_of_file
6019: LD_VAR 0 1
6023: RET
// export function CanSayRand ( side ) ; begin
6024: LD_INT 0
6026: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_INT 52
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: LD_INT 22
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 2
6052: PUSH
6053: LD_INT 25
6055: PUSH
6056: LD_INT 1
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 25
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 25
6085: PUSH
6086: LD_INT 4
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 69
6109: PUSH
6110: LD_EXP 14
6114: PUSH
6115: LD_EXP 33
6119: PUSH
6120: LD_EXP 23
6124: PUSH
6125: LD_EXP 24
6129: PUSH
6130: LD_EXP 25
6134: PUSH
6135: LD_EXP 26
6139: PUSH
6140: LD_EXP 27
6144: PUSH
6145: LD_EXP 28
6149: PUSH
6150: LD_EXP 29
6154: PUSH
6155: LD_EXP 30
6159: PUSH
6160: LD_EXP 16
6164: PUSH
6165: LD_EXP 31
6169: PUSH
6170: LD_EXP 32
6174: PUSH
6175: LD_EXP 34
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: DIFF
6196: ST_TO_ADDR
// end ;
6197: LD_VAR 0 2
6201: RET
// export function SayRand ( sex , dial ) ; begin
6202: LD_INT 0
6204: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6205: LD_ADDR_VAR 0 3
6209: PUSH
6210: LD_INT 52
6212: PUSH
6213: EMPTY
6214: LIST
6215: PUSH
6216: LD_INT 22
6218: PUSH
6219: LD_INT 1
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: LD_INT 26
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 25
6243: PUSH
6244: LD_INT 1
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 25
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: PPUSH
6294: CALL_OW 69
6298: PUSH
6299: LD_EXP 14
6303: PUSH
6304: LD_EXP 33
6308: PUSH
6309: LD_EXP 23
6313: PUSH
6314: LD_EXP 24
6318: PUSH
6319: LD_EXP 25
6323: PUSH
6324: LD_EXP 26
6328: PUSH
6329: LD_EXP 27
6333: PUSH
6334: LD_EXP 28
6338: PUSH
6339: LD_EXP 29
6343: PUSH
6344: LD_EXP 30
6348: PUSH
6349: LD_EXP 16
6353: PUSH
6354: LD_EXP 31
6358: PUSH
6359: LD_EXP 32
6363: PUSH
6364: LD_EXP 34
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: DIFF
6385: ST_TO_ADDR
// if not result then
6386: LD_VAR 0 3
6390: NOT
6391: IFFALSE 6395
// exit ;
6393: GO 6423
// result := result [ 1 ] ;
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_VAR 0 3
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: ST_TO_ADDR
// Say ( result , dial ) ;
6409: LD_VAR 0 3
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 88
// end ;
6423: LD_VAR 0 3
6427: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6428: LD_INT 0
6430: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6431: LD_ADDR_VAR 0 4
6435: PUSH
6436: LD_INT 22
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 26
6448: PUSH
6449: LD_VAR 0 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 25
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 25
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 4
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PPUSH
6513: CALL_OW 69
6517: PUSH
6518: LD_EXP 14
6522: PUSH
6523: LD_EXP 33
6527: PUSH
6528: LD_EXP 23
6532: PUSH
6533: LD_EXP 24
6537: PUSH
6538: LD_EXP 25
6542: PUSH
6543: LD_EXP 26
6547: PUSH
6548: LD_EXP 27
6552: PUSH
6553: LD_EXP 28
6557: PUSH
6558: LD_EXP 29
6562: PUSH
6563: LD_EXP 30
6567: PUSH
6568: LD_EXP 16
6572: PUSH
6573: LD_EXP 31
6577: PUSH
6578: LD_EXP 32
6582: PUSH
6583: LD_EXP 34
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_VAR 0 3
6608: ADD
6609: DIFF
6610: ST_TO_ADDR
// if not result then
6611: LD_VAR 0 4
6615: NOT
6616: IFFALSE 6620
// exit ;
6618: GO 6648
// result := result [ 1 ] ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: LD_VAR 0 4
6629: PUSH
6630: LD_INT 1
6632: ARRAY
6633: ST_TO_ADDR
// Say ( result , dial ) ;
6634: LD_VAR 0 4
6638: PPUSH
6639: LD_VAR 0 2
6643: PPUSH
6644: CALL_OW 88
// end ;
6648: LD_VAR 0 4
6652: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6653: LD_INT 0
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6670: LD_VAR 0 1
6674: NOT
6675: PUSH
6676: LD_VAR 0 2
6680: NOT
6681: OR
6682: PUSH
6683: LD_VAR 0 1
6687: PPUSH
6688: CALL_OW 247
6692: PUSH
6693: LD_INT 3
6695: EQUAL
6696: OR
6697: IFFALSE 6701
// exit ;
6699: GO 8240
// for i = path downto 1 do
6701: LD_ADDR_VAR 0 5
6705: PUSH
6706: DOUBLE
6707: LD_VAR 0 2
6711: INC
6712: ST_TO_ADDR
6713: LD_INT 1
6715: PUSH
6716: FOR_DOWNTO
6717: IFFALSE 6778
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6719: LD_VAR 0 2
6723: PUSH
6724: LD_VAR 0 5
6728: ARRAY
6729: PUSH
6730: LD_INT 1
6732: ARRAY
6733: PPUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_VAR 0 5
6743: ARRAY
6744: PUSH
6745: LD_INT 2
6747: ARRAY
6748: PPUSH
6749: CALL_OW 488
6753: NOT
6754: IFFALSE 6776
// path = Delete ( path , i ) ;
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_VAR 0 2
6765: PPUSH
6766: LD_VAR 0 5
6770: PPUSH
6771: CALL_OW 3
6775: ST_TO_ADDR
// end ;
6776: GO 6716
6778: POP
6779: POP
// if not path then
6780: LD_VAR 0 2
6784: NOT
6785: IFFALSE 6789
// exit ;
6787: GO 8240
// tmp_path := [ ] ;
6789: LD_ADDR_VAR 0 11
6793: PUSH
6794: EMPTY
6795: ST_TO_ADDR
// if flags then
6796: LD_VAR 0 3
6800: IFFALSE 6874
// begin if flags [ 1 ] then
6802: LD_VAR 0 3
6806: PUSH
6807: LD_INT 1
6809: ARRAY
6810: IFFALSE 6826
// safe_place = flags [ 1 ] ;
6812: LD_ADDR_VAR 0 16
6816: PUSH
6817: LD_VAR 0 3
6821: PUSH
6822: LD_INT 1
6824: ARRAY
6825: ST_TO_ADDR
// if flags [ 2 ] then
6826: LD_VAR 0 3
6830: PUSH
6831: LD_INT 2
6833: ARRAY
6834: IFFALSE 6850
// spot_dist = flags [ 2 ] ;
6836: LD_ADDR_VAR 0 15
6840: PUSH
6841: LD_VAR 0 3
6845: PUSH
6846: LD_INT 2
6848: ARRAY
6849: ST_TO_ADDR
// if flags [ 3 ] then
6850: LD_VAR 0 3
6854: PUSH
6855: LD_INT 3
6857: ARRAY
6858: IFFALSE 6874
// chase_range = flags [ 3 ] ;
6860: LD_ADDR_VAR 0 17
6864: PUSH
6865: LD_VAR 0 3
6869: PUSH
6870: LD_INT 3
6872: ARRAY
6873: ST_TO_ADDR
// end ; if not chase_range then
6874: LD_VAR 0 17
6878: NOT
6879: IFFALSE 6889
// chase_range = 8 ;
6881: LD_ADDR_VAR 0 17
6885: PUSH
6886: LD_INT 8
6888: ST_TO_ADDR
// if not spot_dist then
6889: LD_VAR 0 15
6893: NOT
6894: IFFALSE 6904
// spot_dist := 8 ;
6896: LD_ADDR_VAR 0 15
6900: PUSH
6901: LD_INT 8
6903: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6904: LD_ADDR_VAR 0 18
6908: PUSH
6909: LD_VAR 0 1
6913: PPUSH
6914: CALL_OW 247
6918: PUSH
6919: LD_INT 2
6921: EQUAL
6922: PUSH
6923: LD_VAR 0 1
6927: PPUSH
6928: CALL_OW 262
6932: PUSH
6933: LD_INT 3
6935: NONEQUAL
6936: AND
6937: ST_TO_ADDR
// status = 1 ;
6938: LD_ADDR_VAR 0 12
6942: PUSH
6943: LD_INT 1
6945: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6946: LD_ADDR_VAR 0 11
6950: PUSH
6951: LD_INT 1
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: LD_INT 1
6961: ARRAY
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6967: LD_INT 35
6969: PPUSH
6970: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6974: LD_VAR 0 18
6978: PUSH
6979: LD_VAR 0 1
6983: PPUSH
6984: CALL_OW 261
6988: PUSH
6989: LD_INT 20
6991: LESS
6992: AND
6993: IFFALSE 7186
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
6995: LD_ADDR_VAR 0 10
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 255
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 2
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 0
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 30
7032: PUSH
7033: LD_INT 1
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 30
7042: PUSH
7043: LD_INT 29
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 30
7052: PUSH
7053: LD_INT 3
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 69
7075: ST_TO_ADDR
// if not station then
7076: LD_VAR 0 10
7080: NOT
7081: IFFALSE 7097
// begin SetFuel ( unit , 40 ) ;
7083: LD_VAR 0 1
7087: PPUSH
7088: LD_INT 40
7090: PPUSH
7091: CALL_OW 240
// continue ;
7095: GO 6967
// end ; status := 6 ;
7097: LD_ADDR_VAR 0 12
7101: PUSH
7102: LD_INT 6
7104: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7105: LD_ADDR_VAR 0 10
7109: PUSH
7110: LD_VAR 0 10
7114: PPUSH
7115: LD_VAR 0 1
7119: PPUSH
7120: CALL_OW 74
7124: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7125: LD_INT 35
7127: PPUSH
7128: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 10
7141: PPUSH
7142: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7146: LD_VAR 0 1
7150: PPUSH
7151: LD_VAR 0 10
7155: PPUSH
7156: CALL_OW 296
7160: PUSH
7161: LD_INT 6
7163: LESS
7164: IFFALSE 7125
// SetFuel ( unit , 100 ) ;
7166: LD_VAR 0 1
7170: PPUSH
7171: LD_INT 100
7173: PPUSH
7174: CALL_OW 240
// status := 5 ;
7178: LD_ADDR_VAR 0 12
7182: PUSH
7183: LD_INT 5
7185: ST_TO_ADDR
// end ; if status = 1 then
7186: LD_VAR 0 12
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7570
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7196: LD_ADDR_VAR 0 13
7200: PUSH
7201: LD_INT 81
7203: PUSH
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 255
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: LD_INT 21
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 91
7237: PUSH
7238: LD_VAR 0 1
7242: PUSH
7243: LD_VAR 0 15
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 101
7255: PUSH
7256: LD_INT 1
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: PPUSH
7269: CALL_OW 69
7273: ST_TO_ADDR
// for i in enemy do
7274: LD_ADDR_VAR 0 5
7278: PUSH
7279: LD_VAR 0 13
7283: PUSH
7284: FOR_IN
7285: IFFALSE 7316
// if IsInvisible ( i ) then
7287: LD_VAR 0 5
7291: PPUSH
7292: CALL_OW 571
7296: IFFALSE 7314
// enemy := enemy diff i ;
7298: LD_ADDR_VAR 0 13
7302: PUSH
7303: LD_VAR 0 13
7307: PUSH
7308: LD_VAR 0 5
7312: DIFF
7313: ST_TO_ADDR
7314: GO 7284
7316: POP
7317: POP
// if enemy then
7318: LD_VAR 0 13
7322: IFFALSE 7372
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7324: LD_VAR 0 1
7328: PPUSH
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL_OW 250
7338: PPUSH
7339: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7343: LD_VAR 0 1
7347: PPUSH
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 251
7357: PPUSH
7358: CALL_OW 232
// status = 2 ;
7362: LD_ADDR_VAR 0 12
7366: PUSH
7367: LD_INT 2
7369: ST_TO_ADDR
// end else
7370: GO 7570
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7372: LD_VAR 0 1
7376: PPUSH
7377: LD_VAR 0 11
7381: PUSH
7382: LD_INT 2
7384: ARRAY
7385: PUSH
7386: LD_INT 1
7388: ARRAY
7389: PPUSH
7390: LD_VAR 0 11
7394: PUSH
7395: LD_INT 2
7397: ARRAY
7398: PUSH
7399: LD_INT 2
7401: ARRAY
7402: PPUSH
7403: CALL_OW 307
7407: PUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 314
7417: NOT
7418: OR
7419: IFFALSE 7570
// begin wait ( 0 0$2 ) ;
7421: LD_INT 70
7423: PPUSH
7424: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7428: LD_VAR 0 11
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PUSH
7437: LD_INT 1
7439: PLUS
7440: PUSH
7441: LD_VAR 0 2
7445: GREATER
7446: IFFALSE 7471
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7448: LD_ADDR_VAR 0 11
7452: PUSH
7453: LD_VAR 0 11
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: CALL_OW 1
7468: ST_TO_ADDR
7469: GO 7502
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7471: LD_ADDR_VAR 0 11
7475: PUSH
7476: LD_VAR 0 11
7480: PPUSH
7481: LD_INT 1
7483: PPUSH
7484: LD_VAR 0 11
7488: PUSH
7489: LD_INT 1
7491: ARRAY
7492: PUSH
7493: LD_INT 1
7495: PLUS
7496: PPUSH
7497: CALL_OW 1
7501: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7502: LD_ADDR_VAR 0 11
7506: PUSH
7507: LD_VAR 0 11
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_VAR 0 2
7519: PUSH
7520: LD_VAR 0 11
7524: PUSH
7525: LD_INT 1
7527: ARRAY
7528: ARRAY
7529: PPUSH
7530: CALL_OW 1
7534: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7535: LD_VAR 0 1
7539: PPUSH
7540: LD_VAR 0 11
7544: PUSH
7545: LD_INT 2
7547: ARRAY
7548: PUSH
7549: LD_INT 1
7551: ARRAY
7552: PPUSH
7553: LD_VAR 0 11
7557: PUSH
7558: LD_INT 2
7560: ARRAY
7561: PUSH
7562: LD_INT 2
7564: ARRAY
7565: PPUSH
7566: CALL_OW 114
// end ; end ; end ; if status = 2 then
7570: LD_VAR 0 12
7574: PUSH
7575: LD_INT 2
7577: EQUAL
7578: IFFALSE 7799
// begin if GetLives ( unit ) < 650 and safe_place then
7580: LD_VAR 0 1
7584: PPUSH
7585: CALL_OW 256
7589: PUSH
7590: LD_INT 650
7592: LESS
7593: PUSH
7594: LD_VAR 0 16
7598: AND
7599: IFFALSE 7611
// begin status = 3 ;
7601: LD_ADDR_VAR 0 12
7605: PUSH
7606: LD_INT 3
7608: ST_TO_ADDR
// continue ;
7609: GO 6967
// end ; x := GetRememberedX ( unit ) ;
7611: LD_ADDR_VAR 0 6
7615: PUSH
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 252
7625: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7626: LD_ADDR_VAR 0 7
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: CALL_OW 253
7640: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7641: LD_ADDR_VAR 0 13
7645: PUSH
7646: LD_INT 81
7648: PUSH
7649: LD_VAR 0 1
7653: PPUSH
7654: CALL_OW 255
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 92
7665: PUSH
7666: LD_VAR 0 6
7670: PUSH
7671: LD_VAR 0 7
7675: PUSH
7676: LD_VAR 0 15
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 101
7689: PUSH
7690: LD_INT 1
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: ST_TO_ADDR
// if enemy then
7707: LD_VAR 0 13
7711: IFFALSE 7782
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7713: LD_ADDR_VAR 0 14
7717: PUSH
7718: LD_VAR 0 13
7722: PPUSH
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 74
7732: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7733: LD_VAR 0 14
7737: PPUSH
7738: LD_VAR 0 6
7742: PPUSH
7743: LD_VAR 0 7
7747: PPUSH
7748: CALL_OW 297
7752: PUSH
7753: LD_VAR 0 15
7757: PUSH
7758: LD_VAR 0 17
7762: PLUS
7763: LESS
7764: IFFALSE 7780
// ComAttackUnit ( unit , e ) ;
7766: LD_VAR 0 1
7770: PPUSH
7771: LD_VAR 0 14
7775: PPUSH
7776: CALL_OW 115
// end else
7780: GO 7799
// begin ComStop ( unit ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: CALL_OW 141
// status = 5 ;
7791: LD_ADDR_VAR 0 12
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7799: LD_VAR 0 12
7803: PUSH
7804: LD_INT 3
7806: EQUAL
7807: PUSH
7808: LD_VAR 0 16
7812: AND
7813: IFFALSE 7899
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7815: LD_VAR 0 1
7819: PPUSH
7820: LD_VAR 0 16
7824: PUSH
7825: LD_INT 1
7827: ARRAY
7828: PPUSH
7829: LD_VAR 0 16
7833: PUSH
7834: LD_INT 2
7836: ARRAY
7837: PPUSH
7838: CALL_OW 111
// wait ( 0 0$1 ) ;
7842: LD_INT 35
7844: PPUSH
7845: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7849: LD_VAR 0 1
7853: PPUSH
7854: LD_VAR 0 16
7858: PUSH
7859: LD_INT 1
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 16
7867: PUSH
7868: LD_INT 2
7870: ARRAY
7871: PPUSH
7872: CALL_OW 297
7876: PUSH
7877: LD_INT 4
7879: LESS
7880: IFFALSE 7815
// ComStop ( unit ) ;
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 141
// status = 4 ;
7891: LD_ADDR_VAR 0 12
7895: PUSH
7896: LD_INT 4
7898: ST_TO_ADDR
// end ; if status = 4 then
7899: LD_VAR 0 12
7903: PUSH
7904: LD_INT 4
7906: EQUAL
7907: IFFALSE 7939
// begin repeat wait ( 0 0$1 ) ;
7909: LD_INT 35
7911: PPUSH
7912: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 256
7925: PUSH
7926: LD_INT 1000
7928: EQUAL
7929: IFFALSE 7909
// status = 5 ;
7931: LD_ADDR_VAR 0 12
7935: PUSH
7936: LD_INT 5
7938: ST_TO_ADDR
// end ; if status = 5 then
7939: LD_VAR 0 12
7943: PUSH
7944: LD_INT 5
7946: EQUAL
7947: IFFALSE 8229
// begin p := 999 ;
7949: LD_ADDR_VAR 0 9
7953: PUSH
7954: LD_INT 999
7956: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7957: LD_ADDR_VAR 0 14
7961: PUSH
7962: LD_VAR 0 11
7966: PUSH
7967: LD_INT 2
7969: ARRAY
7970: PUSH
7971: LD_INT 1
7973: ARRAY
7974: PUSH
7975: LD_VAR 0 11
7979: PUSH
7980: LD_INT 2
7982: ARRAY
7983: PUSH
7984: LD_INT 2
7986: ARRAY
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: ST_TO_ADDR
// c := 1 ;
7992: LD_ADDR_VAR 0 8
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8000: LD_ADDR_VAR 0 5
8004: PUSH
8005: DOUBLE
8006: LD_INT 1
8008: DEC
8009: ST_TO_ADDR
8010: LD_VAR 0 11
8014: PUSH
8015: LD_INT 2
8017: ARRAY
8018: PUSH
8019: LD_INT 2
8021: DIV
8022: PUSH
8023: FOR_TO
8024: IFFALSE 8156
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8026: LD_ADDR_VAR 0 6
8030: PUSH
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_VAR 0 11
8040: PUSH
8041: LD_INT 2
8043: ARRAY
8044: PUSH
8045: LD_VAR 0 8
8049: ARRAY
8050: PPUSH
8051: LD_VAR 0 11
8055: PUSH
8056: LD_INT 2
8058: ARRAY
8059: PUSH
8060: LD_VAR 0 8
8064: PUSH
8065: LD_INT 1
8067: PLUS
8068: ARRAY
8069: PPUSH
8070: CALL_OW 297
8074: ST_TO_ADDR
// if x < p then
8075: LD_VAR 0 6
8079: PUSH
8080: LD_VAR 0 9
8084: LESS
8085: IFFALSE 8140
// begin p := x ;
8087: LD_ADDR_VAR 0 9
8091: PUSH
8092: LD_VAR 0 6
8096: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8097: LD_ADDR_VAR 0 14
8101: PUSH
8102: LD_VAR 0 11
8106: PUSH
8107: LD_INT 2
8109: ARRAY
8110: PUSH
8111: LD_VAR 0 8
8115: ARRAY
8116: PUSH
8117: LD_VAR 0 11
8121: PUSH
8122: LD_INT 2
8124: ARRAY
8125: PUSH
8126: LD_VAR 0 8
8130: PUSH
8131: LD_INT 1
8133: PLUS
8134: ARRAY
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: ST_TO_ADDR
// end ; c = c + 2 ;
8140: LD_ADDR_VAR 0 8
8144: PUSH
8145: LD_VAR 0 8
8149: PUSH
8150: LD_INT 2
8152: PLUS
8153: ST_TO_ADDR
// end ;
8154: GO 8023
8156: POP
8157: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8158: LD_VAR 0 1
8162: PPUSH
8163: LD_VAR 0 14
8167: PUSH
8168: LD_INT 1
8170: ARRAY
8171: PPUSH
8172: LD_VAR 0 14
8176: PUSH
8177: LD_INT 2
8179: ARRAY
8180: PPUSH
8181: CALL_OW 111
// wait ( 0 0$1 ) ;
8185: LD_INT 35
8187: PPUSH
8188: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8192: LD_VAR 0 1
8196: PPUSH
8197: LD_VAR 0 14
8201: PUSH
8202: LD_INT 1
8204: ARRAY
8205: PPUSH
8206: LD_VAR 0 14
8210: PUSH
8211: LD_INT 2
8213: ARRAY
8214: PPUSH
8215: CALL_OW 307
8219: IFFALSE 8158
// status = 1 ;
8221: LD_ADDR_VAR 0 12
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8229: LD_VAR 0 1
8233: PPUSH
8234: CALL_OW 301
8238: IFFALSE 6967
// end ;
8240: LD_VAR 0 4
8244: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8245: LD_INT 0
8247: PPUSH
8248: PPUSH
8249: PPUSH
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8255: LD_VAR 0 1
8259: NOT
8260: PUSH
8261: LD_VAR 0 3
8265: NOT
8266: OR
8267: PUSH
8268: LD_VAR 0 4
8272: PUSH
8273: LD_INT 1
8275: PUSH
8276: LD_INT 2
8278: PUSH
8279: LD_INT 0
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: IN
8287: NOT
8288: OR
8289: PUSH
8290: LD_VAR 0 6
8294: NOT
8295: OR
8296: PUSH
8297: LD_VAR 0 7
8301: NOT
8302: OR
8303: IFFALSE 8307
// exit ;
8305: GO 8698
// sex_id :=  ;
8307: LD_ADDR_VAR 0 14
8311: PUSH
8312: LD_STRING 
8314: ST_TO_ADDR
// case class of 1 :
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 1
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8328
8326: GO 8339
8328: POP
// class_id := Sol ; 2 :
8329: LD_ADDR_VAR 0 15
8333: PUSH
8334: LD_STRING Sol
8336: ST_TO_ADDR
8337: GO 8397
8339: LD_INT 2
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8358
8347: POP
// class_id := Eng ; 3 :
8348: LD_ADDR_VAR 0 15
8352: PUSH
8353: LD_STRING Eng
8355: ST_TO_ADDR
8356: GO 8397
8358: LD_INT 3
8360: DOUBLE
8361: EQUAL
8362: IFTRUE 8366
8364: GO 8377
8366: POP
// class_id := Mech ; 4 :
8367: LD_ADDR_VAR 0 15
8371: PUSH
8372: LD_STRING Mech
8374: ST_TO_ADDR
8375: GO 8397
8377: LD_INT 4
8379: DOUBLE
8380: EQUAL
8381: IFTRUE 8385
8383: GO 8396
8385: POP
// class_id := Sci ; end ;
8386: LD_ADDR_VAR 0 15
8390: PUSH
8391: LD_STRING Sci
8393: ST_TO_ADDR
8394: GO 8397
8396: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8397: LD_ADDR_VAR 0 11
8401: PUSH
8402: LD_VAR 0 1
8406: PPUSH
8407: LD_INT 25
8409: PUSH
8410: LD_VAR 0 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 72
8423: ST_TO_ADDR
// if tmp then
8424: LD_VAR 0 11
8428: IFFALSE 8440
// units := tmp ;
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_VAR 0 11
8439: ST_TO_ADDR
// if sex then
8440: LD_VAR 0 4
8444: IFFALSE 8500
// begin if sex = sex_female then
8446: LD_VAR 0 4
8450: PUSH
8451: LD_INT 2
8453: EQUAL
8454: IFFALSE 8464
// sex_id := F ;
8456: LD_ADDR_VAR 0 14
8460: PUSH
8461: LD_STRING F
8463: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8464: LD_ADDR_VAR 0 1
8468: PUSH
8469: LD_VAR 0 1
8473: PPUSH
8474: LD_INT 26
8476: PUSH
8477: LD_VAR 0 4
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 72
8490: ST_TO_ADDR
// if not units then
8491: LD_VAR 0 1
8495: NOT
8496: IFFALSE 8500
// exit ;
8498: GO 8698
// end ; unit_id := id ;
8500: LD_ADDR_VAR 0 12
8504: PUSH
8505: LD_VAR 0 6
8509: ST_TO_ADDR
// if unit_id > units then
8510: LD_VAR 0 12
8514: PUSH
8515: LD_VAR 0 1
8519: GREATER
8520: IFFALSE 8530
// unit_id := 1 ;
8522: LD_ADDR_VAR 0 12
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if not units [ unit_id ] then
8530: LD_VAR 0 1
8534: PUSH
8535: LD_VAR 0 12
8539: ARRAY
8540: NOT
8541: IFFALSE 8545
// exit ;
8543: GO 8698
// unit := units [ unit_id ] ;
8545: LD_ADDR_VAR 0 10
8549: PUSH
8550: LD_VAR 0 1
8554: PUSH
8555: LD_VAR 0 12
8559: ARRAY
8560: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8561: LD_ADDR_VAR 0 13
8565: PUSH
8566: LD_STRING D
8568: PUSH
8569: LD_VAR 0 3
8573: STR
8574: PUSH
8575: LD_STRING -
8577: STR
8578: PUSH
8579: LD_VAR 0 14
8583: STR
8584: PUSH
8585: LD_VAR 0 15
8589: STR
8590: PUSH
8591: LD_VAR 0 6
8595: STR
8596: PUSH
8597: LD_STRING -
8599: STR
8600: PUSH
8601: LD_VAR 0 7
8605: STR
8606: ST_TO_ADDR
// case type of 0 :
8607: LD_VAR 0 2
8611: PUSH
8612: LD_INT 0
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8637
8620: POP
// Say ( unit , dialog_id ) ; 1 :
8621: LD_VAR 0 10
8625: PPUSH
8626: LD_VAR 0 13
8630: PPUSH
8631: CALL_OW 88
8635: GO 8688
8637: LD_INT 1
8639: DOUBLE
8640: EQUAL
8641: IFTRUE 8645
8643: GO 8662
8645: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8646: LD_VAR 0 10
8650: PPUSH
8651: LD_VAR 0 13
8655: PPUSH
8656: CALL_OW 94
8660: GO 8688
8662: LD_INT 2
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8670
8668: GO 8687
8670: POP
// ForceSay ( unit , dialog_id ) ; end ;
8671: LD_VAR 0 10
8675: PPUSH
8676: LD_VAR 0 13
8680: PPUSH
8681: CALL_OW 91
8685: GO 8688
8687: POP
// result := unit ;
8688: LD_ADDR_VAR 0 8
8692: PUSH
8693: LD_VAR 0 10
8697: ST_TO_ADDR
// end ;
8698: LD_VAR 0 8
8702: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8703: LD_INT 0
8705: PPUSH
8706: PPUSH
8707: PPUSH
// result := false ;
8708: LD_ADDR_VAR 0 4
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8716: LD_VAR 0 1
8720: NOT
8721: PUSH
8722: LD_VAR 0 2
8726: NOT
8727: OR
8728: PUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 310
8738: OR
8739: IFFALSE 8743
// exit ;
8741: GO 8947
// if distance < 0 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 0
8750: LESS
8751: IFFALSE 8761
// distance := 0 ;
8753: LD_ADDR_VAR 0 3
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8761: LD_ADDR_VAR 0 6
8765: PUSH
8766: LD_VAR 0 2
8770: PPUSH
8771: CALL_OW 266
8775: PPUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 250
8785: PPUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 251
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 254
8805: PPUSH
8806: LD_VAR 0 2
8810: PPUSH
8811: CALL_OW 248
8815: PPUSH
8816: LD_INT 1
8818: PPUSH
8819: CALL 45462 0 6
8823: ST_TO_ADDR
// if not entrance then
8824: LD_VAR 0 6
8828: NOT
8829: IFFALSE 8833
// exit ;
8831: GO 8947
// for i in entrance do
8833: LD_ADDR_VAR 0 5
8837: PUSH
8838: LD_VAR 0 6
8842: PUSH
8843: FOR_IN
8844: IFFALSE 8945
// begin if not distance then
8846: LD_VAR 0 3
8850: NOT
8851: IFFALSE 8896
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8853: LD_VAR 0 1
8857: PPUSH
8858: LD_VAR 0 5
8862: PUSH
8863: LD_INT 1
8865: ARRAY
8866: PPUSH
8867: LD_VAR 0 5
8871: PUSH
8872: LD_INT 2
8874: ARRAY
8875: PPUSH
8876: CALL_OW 307
8880: IFFALSE 8894
// begin result := true ;
8882: LD_ADDR_VAR 0 4
8886: PUSH
8887: LD_INT 1
8889: ST_TO_ADDR
// exit ;
8890: POP
8891: POP
8892: GO 8947
// end ; end else
8894: GO 8943
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8896: LD_VAR 0 1
8900: PPUSH
8901: LD_VAR 0 5
8905: PUSH
8906: LD_INT 1
8908: ARRAY
8909: PPUSH
8910: LD_VAR 0 5
8914: PUSH
8915: LD_INT 2
8917: ARRAY
8918: PPUSH
8919: CALL_OW 297
8923: PUSH
8924: LD_VAR 0 3
8928: LESSEQUAL
8929: IFFALSE 8943
// begin result := true ;
8931: LD_ADDR_VAR 0 4
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// exit ;
8939: POP
8940: POP
8941: GO 8947
// end ; end ; end ;
8943: GO 8843
8945: POP
8946: POP
// end ;
8947: LD_VAR 0 4
8951: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8952: LD_INT 0
8954: PPUSH
8955: PPUSH
8956: PPUSH
// result := false ;
8957: LD_ADDR_VAR 0 3
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8965: LD_VAR 0 1
8969: NOT
8970: PUSH
8971: LD_VAR 0 2
8975: NOT
8976: OR
8977: PUSH
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 302
8987: NOT
8988: OR
8989: PUSH
8990: LD_VAR 0 2
8994: PPUSH
8995: CALL_OW 302
8999: NOT
9000: OR
9001: IFFALSE 9005
// exit ;
9003: GO 9166
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9005: LD_VAR 0 1
9009: PPUSH
9010: LD_INT 81
9012: PUSH
9013: LD_VAR 0 1
9017: PPUSH
9018: CALL_OW 255
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 3
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PPUSH
9048: CALL_OW 69
9052: PPUSH
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 74
9062: PPUSH
9063: CALL_OW 296
9067: PUSH
9068: LD_INT 8
9070: LESS
9071: IFFALSE 9075
// exit ;
9073: GO 9166
// building := IsInUnit ( unit2 ) ;
9075: LD_ADDR_VAR 0 5
9079: PUSH
9080: LD_VAR 0 2
9084: PPUSH
9085: CALL_OW 310
9089: ST_TO_ADDR
// if building then
9090: LD_VAR 0 5
9094: IFFALSE 9121
// result := IsNearbyEntrance ( unit , building , 2 ) else
9096: LD_ADDR_VAR 0 3
9100: PUSH
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 5
9110: PPUSH
9111: LD_INT 2
9113: PPUSH
9114: CALL 8703 0 3
9118: ST_TO_ADDR
9119: GO 9166
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_VAR 0 1
9130: PPUSH
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL_OW 296
9140: PUSH
9141: LD_INT 6
9143: LESS
9144: PUSH
9145: LD_VAR 0 2
9149: PPUSH
9150: CALL_OW 255
9154: PPUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 292
9164: AND
9165: ST_TO_ADDR
// end ;
9166: LD_VAR 0 3
9170: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9171: LD_INT 0
9173: PPUSH
9174: PPUSH
9175: PPUSH
9176: PPUSH
// uc_side = 0 ;
9177: LD_ADDR_OWVAR 20
9181: PUSH
9182: LD_INT 0
9184: ST_TO_ADDR
// uc_nation = 0 ;
9185: LD_ADDR_OWVAR 21
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// nat_area := nature_area ;
9193: LD_ADDR_VAR 0 4
9197: PUSH
9198: LD_INT 24
9200: ST_TO_ADDR
// InitHc ;
9201: CALL_OW 19
// for i = 1 to 4 do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: DOUBLE
9211: LD_INT 1
9213: DEC
9214: ST_TO_ADDR
9215: LD_INT 4
9217: PUSH
9218: FOR_TO
9219: IFFALSE 9266
// begin hc_class = 18 ;
9221: LD_ADDR_OWVAR 28
9225: PUSH
9226: LD_INT 18
9228: ST_TO_ADDR
// hc_gallery =  ;
9229: LD_ADDR_OWVAR 33
9233: PUSH
9234: LD_STRING 
9236: ST_TO_ADDR
// animal := CreateHuman ;
9237: LD_ADDR_VAR 0 3
9241: PUSH
9242: CALL_OW 44
9246: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9247: LD_VAR 0 3
9251: PPUSH
9252: LD_VAR 0 4
9256: PPUSH
9257: LD_INT 0
9259: PPUSH
9260: CALL_OW 49
// end ;
9264: GO 9218
9266: POP
9267: POP
// for i = 1 to 3 do
9268: LD_ADDR_VAR 0 2
9272: PUSH
9273: DOUBLE
9274: LD_INT 1
9276: DEC
9277: ST_TO_ADDR
9278: LD_INT 3
9280: PUSH
9281: FOR_TO
9282: IFFALSE 9376
// begin hc_class = class_apeman ;
9284: LD_ADDR_OWVAR 28
9288: PUSH
9289: LD_INT 12
9291: ST_TO_ADDR
// hc_gallery =  ;
9292: LD_ADDR_OWVAR 33
9296: PUSH
9297: LD_STRING 
9299: ST_TO_ADDR
// hc_agressivity = 0 ;
9300: LD_ADDR_OWVAR 35
9304: PUSH
9305: LD_INT 0
9307: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9308: LD_ADDR_OWVAR 31
9312: PUSH
9313: LD_INT 1
9315: PPUSH
9316: LD_INT 3
9318: PPUSH
9319: CALL_OW 12
9323: PUSH
9324: LD_INT 1
9326: PPUSH
9327: LD_INT 3
9329: PPUSH
9330: CALL_OW 12
9334: PUSH
9335: LD_INT 0
9337: PUSH
9338: LD_INT 0
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: ST_TO_ADDR
// animal := CreateHuman ;
9347: LD_ADDR_VAR 0 3
9351: PUSH
9352: CALL_OW 44
9356: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_VAR 0 4
9366: PPUSH
9367: LD_INT 0
9369: PPUSH
9370: CALL_OW 49
// end ;
9374: GO 9281
9376: POP
9377: POP
// for i = 1 to 3 do
9378: LD_ADDR_VAR 0 2
9382: PUSH
9383: DOUBLE
9384: LD_INT 1
9386: DEC
9387: ST_TO_ADDR
9388: LD_INT 3
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9439
// begin hc_class = 13 ;
9394: LD_ADDR_OWVAR 28
9398: PUSH
9399: LD_INT 13
9401: ST_TO_ADDR
// hc_gallery =  ;
9402: LD_ADDR_OWVAR 33
9406: PUSH
9407: LD_STRING 
9409: ST_TO_ADDR
// animal := CreateHuman ;
9410: LD_ADDR_VAR 0 3
9414: PUSH
9415: CALL_OW 44
9419: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9420: LD_VAR 0 3
9424: PPUSH
9425: LD_VAR 0 4
9429: PPUSH
9430: LD_INT 0
9432: PPUSH
9433: CALL_OW 49
// end ;
9437: GO 9391
9439: POP
9440: POP
// for i = 1 to 3 do
9441: LD_ADDR_VAR 0 2
9445: PUSH
9446: DOUBLE
9447: LD_INT 1
9449: DEC
9450: ST_TO_ADDR
9451: LD_INT 3
9453: PUSH
9454: FOR_TO
9455: IFFALSE 9500
// begin hc_class = 20 ;
9457: LD_ADDR_OWVAR 28
9461: PUSH
9462: LD_INT 20
9464: ST_TO_ADDR
// hc_gallery =  ;
9465: LD_ADDR_OWVAR 33
9469: PUSH
9470: LD_STRING 
9472: ST_TO_ADDR
// animal := CreateHuman ;
9473: LD_ADDR_VAR 0 3
9477: PUSH
9478: CALL_OW 44
9482: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9483: LD_VAR 0 3
9487: PPUSH
9488: LD_INT 4
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 49
// end ;
9498: GO 9454
9500: POP
9501: POP
// end ; end_of_file
9502: LD_VAR 0 1
9506: RET
// export function Action ; begin
9507: LD_INT 0
9509: PPUSH
// InGameOn ;
9510: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9514: LD_EXP 14
9518: PPUSH
9519: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9523: LD_EXP 14
9527: PPUSH
9528: LD_STRING D1-JMM-1
9530: PPUSH
9531: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9535: LD_EXP 15
9539: PPUSH
9540: LD_STRING D1-Roth-1
9542: PPUSH
9543: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9547: LD_EXP 14
9551: PPUSH
9552: LD_STRING D1-JMM-2
9554: PPUSH
9555: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9559: LD_EXP 15
9563: PPUSH
9564: LD_STRING D1-Roth-2
9566: PPUSH
9567: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9571: LD_EXP 14
9575: PPUSH
9576: LD_STRING D1-JMM-3
9578: PPUSH
9579: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9583: LD_EXP 15
9587: PPUSH
9588: LD_STRING D1-Roth-3
9590: PPUSH
9591: CALL_OW 88
// ComInvisible ( Roth ) ;
9595: LD_EXP 15
9599: PPUSH
9600: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9604: LD_INT 46
9606: PPUSH
9607: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9611: LD_EXP 14
9615: PPUSH
9616: LD_STRING D1-JMM-4
9618: PPUSH
9619: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9623: LD_INT 10
9625: PPUSH
9626: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9630: LD_EXP 15
9634: PPUSH
9635: LD_EXP 14
9639: PPUSH
9640: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9644: LD_EXP 14
9648: PPUSH
9649: LD_STRING D1-JMM-4a
9651: PPUSH
9652: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9656: LD_EXP 15
9660: PPUSH
9661: LD_STRING D1-Roth-4
9663: PPUSH
9664: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9668: LD_EXP 14
9672: PPUSH
9673: LD_STRING D1-JMM-5
9675: PPUSH
9676: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9680: LD_EXP 15
9684: PPUSH
9685: LD_STRING D1-Roth-5
9687: PPUSH
9688: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9692: LD_EXP 14
9696: PPUSH
9697: LD_STRING D1-JMM-6
9699: PPUSH
9700: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9704: LD_EXP 15
9708: PPUSH
9709: LD_STRING D1-Roth-6
9711: PPUSH
9712: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9716: LD_EXP 14
9720: PPUSH
9721: LD_STRING D1-JMM-7
9723: PPUSH
9724: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9728: LD_EXP 16
9732: PPUSH
9733: LD_EXP 14
9737: PPUSH
9738: CALL_OW 250
9742: PPUSH
9743: LD_EXP 14
9747: PPUSH
9748: CALL_OW 251
9752: PPUSH
9753: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9757: LD_EXP 15
9761: PPUSH
9762: LD_STRING D1-Roth-7
9764: PPUSH
9765: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9769: LD_INT 10
9771: PPUSH
9772: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9776: LD_EXP 16
9780: PPUSH
9781: LD_EXP 14
9785: PPUSH
9786: CALL_OW 296
9790: PUSH
9791: LD_INT 6
9793: LESS
9794: IFFALSE 9769
// ComTurnUnit ( Powell , JMM ) ;
9796: LD_EXP 16
9800: PPUSH
9801: LD_EXP 14
9805: PPUSH
9806: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9810: LD_EXP 16
9814: PPUSH
9815: LD_STRING D1-Pow-7
9817: PPUSH
9818: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9822: LD_EXP 14
9826: PPUSH
9827: LD_EXP 16
9831: PPUSH
9832: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9836: LD_EXP 15
9840: PPUSH
9841: LD_EXP 16
9845: PPUSH
9846: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9850: LD_EXP 14
9854: PPUSH
9855: LD_STRING D1-JMM-8
9857: PPUSH
9858: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9862: LD_EXP 16
9866: PPUSH
9867: LD_STRING D1-Pow-8
9869: PPUSH
9870: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9874: LD_EXP 14
9878: PPUSH
9879: LD_STRING D1-JMM-9
9881: PPUSH
9882: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9886: LD_EXP 16
9890: PPUSH
9891: LD_INT 124
9893: PPUSH
9894: LD_INT 61
9896: PPUSH
9897: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9901: LD_INT 35
9903: PPUSH
9904: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9908: LD_EXP 14
9912: PPUSH
9913: LD_EXP 16
9917: PPUSH
9918: CALL_OW 296
9922: PUSH
9923: LD_INT 6
9925: GREATER
9926: IFFALSE 9901
// SayRadio ( Powell , D1-Pow-9 ) ;
9928: LD_EXP 16
9932: PPUSH
9933: LD_STRING D1-Pow-9
9935: PPUSH
9936: CALL_OW 94
// RemoveUnit ( Powell ) ;
9940: LD_EXP 16
9944: PPUSH
9945: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9949: LD_EXP 16
9953: PPUSH
9954: LD_INT 18
9956: PPUSH
9957: CALL_OW 52
// if Joan and not Joan in selected then
9961: LD_EXP 36
9965: PUSH
9966: LD_EXP 36
9970: PUSH
9971: LD_EXP 3
9975: IN
9976: NOT
9977: AND
9978: IFFALSE 9992
// SayRadio ( Joan , D1-Joan-9 ) ;
9980: LD_EXP 36
9984: PPUSH
9985: LD_STRING D1-Joan-9
9987: PPUSH
9988: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
9992: LD_EXP 15
9996: PPUSH
9997: LD_EXP 14
10001: PPUSH
10002: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10006: LD_EXP 14
10010: PPUSH
10011: LD_EXP 15
10015: PPUSH
10016: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10020: LD_EXP 15
10024: PPUSH
10025: LD_STRING D1-Roth-9
10027: PPUSH
10028: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10032: LD_EXP 14
10036: PPUSH
10037: LD_STRING D1-JMM-10
10039: PPUSH
10040: CALL_OW 88
// InGameOff ;
10044: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10048: LD_STRING M1
10050: PPUSH
10051: CALL_OW 337
// if Difficulty < 3 then
10055: LD_OWVAR 67
10059: PUSH
10060: LD_INT 3
10062: LESS
10063: IFFALSE 10075
// ChangeSideFog ( 4 , 7 ) ;
10065: LD_INT 4
10067: PPUSH
10068: LD_INT 7
10070: PPUSH
10071: CALL_OW 343
// SaveForQuickRestart ;
10075: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10079: LD_INT 7
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: LD_INT 2
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 80
// wait ( 0 0$3 ) ;
10095: LD_INT 105
10097: PPUSH
10098: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10102: LD_EXP 15
10106: PPUSH
10107: LD_INT 124
10109: PPUSH
10110: LD_INT 18
10112: PPUSH
10113: CALL_OW 111
// AddComInvisible ( Roth ) ;
10117: LD_EXP 15
10121: PPUSH
10122: CALL_OW 212
// wait ( 0 0$30 ) ;
10126: LD_INT 1050
10128: PPUSH
10129: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10133: LD_EXP 15
10137: PPUSH
10138: LD_INT 2100
10140: PPUSH
10141: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10145: LD_EXP 15
10149: PPUSH
10150: LD_INT 156
10152: PPUSH
10153: LD_INT 20
10155: PPUSH
10156: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10160: LD_EXP 15
10164: PPUSH
10165: LD_INT 178
10167: PPUSH
10168: LD_INT 42
10170: PPUSH
10171: CALL_OW 171
// AddComInvisible ( Roth ) ;
10175: LD_EXP 15
10179: PPUSH
10180: CALL_OW 212
// end ;
10184: LD_VAR 0 1
10188: RET
// every 0 0$1 do var i , tmp ;
10189: GO 10191
10191: DISABLE
10192: LD_INT 0
10194: PPUSH
10195: PPUSH
// begin tmp := selected union friends ;
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: LD_EXP 3
10205: PUSH
10206: LD_EXP 4
10210: UNION
10211: ST_TO_ADDR
// if not tmp then
10212: LD_VAR 0 2
10216: NOT
10217: IFFALSE 10221
// exit ;
10219: GO 10293
// repeat wait ( 0 0$1 ) ;
10221: LD_INT 35
10223: PPUSH
10224: CALL_OW 67
// for i in tmp do
10228: LD_ADDR_VAR 0 1
10232: PUSH
10233: LD_VAR 0 2
10237: PUSH
10238: FOR_IN
10239: IFFALSE 10284
// if CanSpot ( JMM , i ) then
10241: LD_EXP 14
10245: PPUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: CALL 8952 0 2
10255: IFFALSE 10282
// begin tmp := tmp diff i ;
10257: LD_ADDR_VAR 0 2
10261: PUSH
10262: LD_VAR 0 2
10266: PUSH
10267: LD_VAR 0 1
10271: DIFF
10272: ST_TO_ADDR
// Spot ( i ) ;
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL 10296 0 1
// end ;
10282: GO 10238
10284: POP
10285: POP
// until not tmp ;
10286: LD_VAR 0 2
10290: NOT
10291: IFFALSE 10221
// end ;
10293: PPOPN 2
10295: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10296: LD_INT 0
10298: PPUSH
10299: PPUSH
10300: PPUSH
10301: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10302: LD_VAR 0 1
10306: NOT
10307: PUSH
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL_OW 255
10317: PUSH
10318: LD_INT 4
10320: NONEQUAL
10321: OR
10322: PUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: CALL_OW 555
10332: OR
10333: PUSH
10334: LD_VAR 0 1
10338: PPUSH
10339: CALL_OW 302
10343: NOT
10344: OR
10345: IFFALSE 10349
// exit ;
10347: GO 12238
// InGameOn ;
10349: CALL_OW 8
// side := GetSide ( JMM ) ;
10353: LD_ADDR_VAR 0 4
10357: PUSH
10358: LD_EXP 14
10362: PPUSH
10363: CALL_OW 255
10367: ST_TO_ADDR
// joined := false ;
10368: LD_ADDR_VAR 0 5
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10376: LD_ADDR_VAR 0 3
10380: PUSH
10381: LD_VAR 0 1
10385: PPUSH
10386: CALL_OW 310
10390: ST_TO_ADDR
// if building then
10391: LD_VAR 0 3
10395: IFFALSE 10454
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10397: LD_EXP 14
10401: PPUSH
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 255
10411: PPUSH
10412: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10416: LD_EXP 14
10420: PPUSH
10421: LD_VAR 0 3
10425: PPUSH
10426: CALL_OW 120
// repeat wait ( 3 ) ;
10430: LD_INT 3
10432: PPUSH
10433: CALL_OW 67
// until IsInUnit ( JMM ) ;
10437: LD_EXP 14
10441: PPUSH
10442: CALL_OW 310
10446: IFFALSE 10430
// DialogueOn ;
10448: CALL_OW 6
// end else
10452: GO 10486
// begin ComTurnUnit ( JMM , unit ) ;
10454: LD_EXP 14
10458: PPUSH
10459: LD_VAR 0 1
10463: PPUSH
10464: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10468: LD_VAR 0 1
10472: PPUSH
10473: LD_EXP 14
10477: PPUSH
10478: CALL_OW 119
// DialogueOn ;
10482: CALL_OW 6
// end ; if unit = Joan then
10486: LD_VAR 0 1
10490: PUSH
10491: LD_EXP 36
10495: EQUAL
10496: IFFALSE 10606
// begin joined := true ;
10498: LD_ADDR_VAR 0 5
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if Joan in selected then
10506: LD_EXP 36
10510: PUSH
10511: LD_EXP 3
10515: IN
10516: IFFALSE 10544
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10518: LD_EXP 36
10522: PPUSH
10523: LD_STRING D3-Joan-Joan-1
10525: PPUSH
10526: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10530: LD_EXP 14
10534: PPUSH
10535: LD_STRING D3-Joan-JMM-1
10537: PPUSH
10538: CALL_OW 88
// end else
10542: GO 10604
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10544: LD_EXP 36
10548: PPUSH
10549: LD_STRING D4-Joan-Joan-1
10551: PPUSH
10552: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10556: LD_EXP 14
10560: PPUSH
10561: LD_STRING D4-Joan-JMM-1
10563: PPUSH
10564: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10568: LD_EXP 36
10572: PPUSH
10573: LD_STRING D4-Joan-Joan-2
10575: PPUSH
10576: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10580: LD_EXP 14
10584: PPUSH
10585: LD_STRING D4-Joan-JMM-2
10587: PPUSH
10588: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10592: LD_EXP 36
10596: PPUSH
10597: LD_STRING D4-Joan-Joan-3
10599: PPUSH
10600: CALL_OW 88
// end ; end else
10604: GO 12046
// if unit = Lisa then
10606: LD_VAR 0 1
10610: PUSH
10611: LD_EXP 23
10615: EQUAL
10616: IFFALSE 10808
// begin if Lisa in selected then
10618: LD_EXP 23
10622: PUSH
10623: LD_EXP 3
10627: IN
10628: IFFALSE 10741
// begin if GetSide ( Joan ) = 7 then
10630: LD_EXP 36
10634: PPUSH
10635: CALL_OW 255
10639: PUSH
10640: LD_INT 7
10642: EQUAL
10643: IFFALSE 10707
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10645: LD_EXP 23
10649: PPUSH
10650: LD_STRING D3-LisaJ-Lisa-1
10652: PPUSH
10653: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10657: LD_EXP 14
10661: PPUSH
10662: LD_STRING D3-LisaJ-JMM-1
10664: PPUSH
10665: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10669: LD_EXP 23
10673: PPUSH
10674: LD_STRING D3-LisaJ-Lisa-2
10676: PPUSH
10677: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10681: LD_EXP 14
10685: PPUSH
10686: LD_STRING D3-LisaJ-JMM-2
10688: PPUSH
10689: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10693: LD_EXP 23
10697: PPUSH
10698: LD_STRING D3-LisaJ-Lisa-3
10700: PPUSH
10701: CALL_OW 88
// end else
10705: GO 10739
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10707: LD_EXP 23
10711: PPUSH
10712: LD_STRING D3-LisaL-Lisa-1
10714: PPUSH
10715: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10719: LD_EXP 14
10723: PPUSH
10724: LD_STRING D3-LisaL-JMM-1
10726: PPUSH
10727: CALL_OW 88
// joined := true ;
10731: LD_ADDR_VAR 0 5
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// end ; end else
10739: GO 10806
// begin if GetSide ( Joan ) = 7 then
10741: LD_EXP 36
10745: PPUSH
10746: CALL_OW 255
10750: PUSH
10751: LD_INT 7
10753: EQUAL
10754: IFFALSE 10794
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10756: LD_EXP 23
10760: PPUSH
10761: LD_STRING D4-LisaJ-Lisa-1
10763: PPUSH
10764: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10768: LD_EXP 14
10772: PPUSH
10773: LD_STRING D4-LisaJ-JMM-1
10775: PPUSH
10776: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10780: LD_EXP 23
10784: PPUSH
10785: LD_STRING D4-LisaJ-Lisa-2
10787: PPUSH
10788: CALL_OW 88
// end else
10792: GO 10806
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10794: LD_EXP 23
10798: PPUSH
10799: LD_STRING D4-LisaL-Lisa-1
10801: PPUSH
10802: CALL_OW 88
// end ; end ; end else
10806: GO 12046
// if unit = Frank then
10808: LD_VAR 0 1
10812: PUSH
10813: LD_EXP 33
10817: EQUAL
10818: IFFALSE 10958
// begin joined := true ;
10820: LD_ADDR_VAR 0 5
10824: PUSH
10825: LD_INT 1
10827: ST_TO_ADDR
// if Frank in selected then
10828: LD_EXP 33
10832: PUSH
10833: LD_EXP 3
10837: IN
10838: IFFALSE 10908
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10840: LD_EXP 33
10844: PPUSH
10845: LD_STRING D3-Frank-Frank-1
10847: PPUSH
10848: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10852: LD_EXP 14
10856: PPUSH
10857: LD_STRING D3-Frank-JMM-1
10859: PPUSH
10860: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10864: LD_EXP 33
10868: PPUSH
10869: LD_STRING D3-Frank-Frank-2
10871: PPUSH
10872: CALL_OW 88
// if reached_lab then
10876: LD_EXP 5
10880: IFFALSE 10906
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10882: LD_EXP 14
10886: PPUSH
10887: LD_STRING D3-Frank-JMM-2
10889: PPUSH
10890: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10894: LD_EXP 33
10898: PPUSH
10899: LD_STRING D3-Frank-Frank-3
10901: PPUSH
10902: CALL_OW 88
// end ; end else
10906: GO 10956
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10908: LD_EXP 33
10912: PPUSH
10913: LD_STRING D4-Frank-Frank-1
10915: PPUSH
10916: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10920: LD_EXP 14
10924: PPUSH
10925: LD_STRING D4-Frank-JMM-1
10927: PPUSH
10928: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10932: LD_EXP 33
10936: PPUSH
10937: LD_STRING D4-Frank-Frank-2
10939: PPUSH
10940: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10944: LD_EXP 14
10948: PPUSH
10949: LD_STRING D4-Frank-JMM-2
10951: PPUSH
10952: CALL_OW 88
// end ; end else
10956: GO 12046
// if unit = Brown then
10958: LD_VAR 0 1
10962: PUSH
10963: LD_EXP 28
10967: EQUAL
10968: IFFALSE 11064
// begin if Brown in selected or gamma_commander = 2 then
10970: LD_EXP 28
10974: PUSH
10975: LD_EXP 3
10979: IN
10980: PUSH
10981: LD_EXP 10
10985: PUSH
10986: LD_INT 2
10988: EQUAL
10989: OR
10990: IFFALSE 11026
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
10992: LD_EXP 28
10996: PPUSH
10997: LD_STRING D3-Soldier1-Sol1-1
10999: PPUSH
11000: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11004: LD_EXP 14
11008: PPUSH
11009: LD_STRING D3-Soldier1-JMM-1
11011: PPUSH
11012: CALL_OW 88
// joined := true ;
11016: LD_ADDR_VAR 0 5
11020: PUSH
11021: LD_INT 1
11023: ST_TO_ADDR
// end else
11024: GO 11062
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11026: LD_EXP 28
11030: PPUSH
11031: LD_STRING D4-Soldier2-Sol1-1
11033: PPUSH
11034: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11038: LD_EXP 14
11042: PPUSH
11043: LD_STRING D4-Soldier1-JMM-1
11045: PPUSH
11046: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11050: LD_EXP 28
11054: PPUSH
11055: LD_STRING D4-Soldier2-Sol1-2
11057: PPUSH
11058: CALL_OW 88
// end ; end else
11062: GO 12046
// if unit = Donaldson then
11064: LD_VAR 0 1
11068: PUSH
11069: LD_EXP 24
11073: EQUAL
11074: IFFALSE 11170
// begin if Donaldson in selected or gamma_commander = 1 then
11076: LD_EXP 24
11080: PUSH
11081: LD_EXP 3
11085: IN
11086: PUSH
11087: LD_EXP 10
11091: PUSH
11092: LD_INT 1
11094: EQUAL
11095: OR
11096: IFFALSE 11132
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11098: LD_EXP 24
11102: PPUSH
11103: LD_STRING D3-Soldier2-FSol2-1
11105: PPUSH
11106: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11110: LD_EXP 14
11114: PPUSH
11115: LD_STRING D3-Soldier2-JMM-1
11117: PPUSH
11118: CALL_OW 88
// joined := true ;
11122: LD_ADDR_VAR 0 5
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// end else
11130: GO 11168
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11132: LD_VAR 0 1
11136: PPUSH
11137: LD_STRING D4-Soldier1-FSol1-1
11139: PPUSH
11140: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11144: LD_EXP 14
11148: PPUSH
11149: LD_STRING D4-Soldier1-JMM-1
11151: PPUSH
11152: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_STRING D4-Soldier1-FSol1-2
11163: PPUSH
11164: CALL_OW 88
// end ; end else
11168: GO 12046
// if unit = Cyrus then
11170: LD_VAR 0 1
11174: PUSH
11175: LD_EXP 26
11179: EQUAL
11180: IFFALSE 11254
// begin if Cyrus in selected then
11182: LD_EXP 26
11186: PUSH
11187: LD_EXP 3
11191: IN
11192: IFFALSE 11228
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11194: LD_EXP 26
11198: PPUSH
11199: LD_STRING D3-Cyrus-Cyrus-1
11201: PPUSH
11202: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11206: LD_EXP 14
11210: PPUSH
11211: LD_STRING D3-Cyrus-JMM-1
11213: PPUSH
11214: CALL_OW 88
// joined := true ;
11218: LD_ADDR_VAR 0 5
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// end else
11226: GO 11252
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11228: LD_EXP 26
11232: PPUSH
11233: LD_STRING D4-Cyrus-Cyrus-1
11235: PPUSH
11236: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11240: LD_EXP 14
11244: PPUSH
11245: LD_STRING D4-Cyrus-JMM-1
11247: PPUSH
11248: CALL_OW 88
// end ; end else
11252: GO 12046
// if unit = Bobby then
11254: LD_VAR 0 1
11258: PUSH
11259: LD_EXP 25
11263: EQUAL
11264: IFFALSE 11350
// begin if Bobby in selected then
11266: LD_EXP 25
11270: PUSH
11271: LD_EXP 3
11275: IN
11276: IFFALSE 11312
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11278: LD_EXP 25
11282: PPUSH
11283: LD_STRING D3-Bobby-Bobby-1
11285: PPUSH
11286: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11290: LD_EXP 14
11294: PPUSH
11295: LD_STRING D3-Bobby-JMM-1
11297: PPUSH
11298: CALL_OW 88
// joined := true ;
11302: LD_ADDR_VAR 0 5
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
// end else
11310: GO 11348
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11312: LD_EXP 25
11316: PPUSH
11317: LD_STRING D4-Bobby-Bobby-1
11319: PPUSH
11320: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11324: LD_EXP 14
11328: PPUSH
11329: LD_STRING D4-Bobby-JMM-1
11331: PPUSH
11332: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11336: LD_EXP 25
11340: PPUSH
11341: LD_STRING D4-Bobby-Bobby-2
11343: PPUSH
11344: CALL_OW 88
// end ; end else
11348: GO 12046
// if unit = Cornel then
11350: LD_VAR 0 1
11354: PUSH
11355: LD_EXP 31
11359: EQUAL
11360: IFFALSE 11458
// begin if Cornel in selected then
11362: LD_EXP 31
11366: PUSH
11367: LD_EXP 3
11371: IN
11372: IFFALSE 11420
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11374: LD_EXP 31
11378: PPUSH
11379: LD_STRING D3-Mark-Corn-1
11381: PPUSH
11382: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11386: LD_EXP 14
11390: PPUSH
11391: LD_STRING D3-Mark-JMM-1
11393: PPUSH
11394: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11398: LD_EXP 31
11402: PPUSH
11403: LD_STRING D3-Mark-Corn-2
11405: PPUSH
11406: CALL_OW 88
// joined := true ;
11410: LD_ADDR_VAR 0 5
11414: PUSH
11415: LD_INT 1
11417: ST_TO_ADDR
// end else
11418: GO 11456
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11420: LD_EXP 31
11424: PPUSH
11425: LD_STRING D4-Mark-Corn-1
11427: PPUSH
11428: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11432: LD_EXP 14
11436: PPUSH
11437: LD_STRING D3-Joan-JMM-1
11439: PPUSH
11440: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11444: LD_EXP 31
11448: PPUSH
11449: LD_STRING D4-Mark-Corn-2
11451: PPUSH
11452: CALL_OW 88
// end ; end else
11456: GO 12046
// if unit = Gary then
11458: LD_VAR 0 1
11462: PUSH
11463: LD_EXP 32
11467: EQUAL
11468: IFFALSE 11552
// begin if Gary in selected then
11470: LD_EXP 32
11474: PUSH
11475: LD_EXP 3
11479: IN
11480: IFFALSE 11516
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11482: LD_EXP 32
11486: PPUSH
11487: LD_STRING D3-Gary-Gary-1
11489: PPUSH
11490: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11494: LD_EXP 14
11498: PPUSH
11499: LD_STRING D3-Gary-JMM-1
11501: PPUSH
11502: CALL_OW 88
// joined := true ;
11506: LD_ADDR_VAR 0 5
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// end else
11514: GO 11550
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11516: LD_EXP 32
11520: PPUSH
11521: LD_STRING D4-Gary-Gary-1
11523: PPUSH
11524: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11528: LD_EXP 32
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 235
// DialogueOff ;
11540: CALL_OW 7
// InGameOff ;
11544: CALL_OW 9
// exit ;
11548: GO 12238
// end ; end else
11550: GO 12046
// if unit = Kikuchi then
11552: LD_VAR 0 1
11556: PUSH
11557: LD_EXP 34
11561: EQUAL
11562: IFFALSE 11646
// begin if Kikuchi in selected then
11564: LD_EXP 34
11568: PUSH
11569: LD_EXP 3
11573: IN
11574: IFFALSE 11610
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11576: LD_EXP 34
11580: PPUSH
11581: LD_STRING D3-Yamako-Yam-1
11583: PPUSH
11584: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11588: LD_EXP 14
11592: PPUSH
11593: LD_STRING D3-Soldier2-JMM-1
11595: PPUSH
11596: CALL_OW 88
// joined := true ;
11600: LD_ADDR_VAR 0 5
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// end else
11608: GO 11644
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11610: LD_EXP 34
11614: PPUSH
11615: LD_STRING D4-Yamako-Yam-1
11617: PPUSH
11618: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11622: LD_EXP 34
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 235
// DialogueOff ;
11634: CALL_OW 7
// InGameOff ;
11638: CALL_OW 9
// exit ;
11642: GO 12238
// end ; end else
11644: GO 12046
// if unit = Gladstone then
11646: LD_VAR 0 1
11650: PUSH
11651: LD_EXP 29
11655: EQUAL
11656: IFFALSE 11730
// begin if Gladstone in selected then
11658: LD_EXP 29
11662: PUSH
11663: LD_EXP 3
11667: IN
11668: IFFALSE 11704
// begin joined := true ;
11670: LD_ADDR_VAR 0 5
11674: PUSH
11675: LD_INT 1
11677: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11678: LD_EXP 14
11682: PPUSH
11683: LD_STRING D3-Tim-JMM-1
11685: PPUSH
11686: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11690: LD_EXP 29
11694: PPUSH
11695: LD_STRING D3-Tim-Glad-1
11697: PPUSH
11698: CALL_OW 88
// end else
11702: GO 11728
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11704: LD_EXP 14
11708: PPUSH
11709: LD_STRING D4-Tim-JMM-1
11711: PPUSH
11712: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11716: LD_EXP 29
11720: PPUSH
11721: LD_STRING D4-Tim-Glad-1
11723: PPUSH
11724: CALL_OW 88
// end ; end else
11728: GO 12046
// if unit = Denis then
11730: LD_VAR 0 1
11734: PUSH
11735: LD_EXP 27
11739: EQUAL
11740: IFFALSE 11776
// begin joined := true ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_INT 1
11749: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11750: LD_EXP 27
11754: PPUSH
11755: LD_STRING D3-Denis-Den-1
11757: PPUSH
11758: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11762: LD_EXP 14
11766: PPUSH
11767: LD_STRING D3-Denis-JMM-1
11769: PPUSH
11770: CALL_OW 88
// end else
11774: GO 12046
// if unit = Simms then
11776: LD_VAR 0 1
11780: PUSH
11781: LD_EXP 35
11785: EQUAL
11786: IFFALSE 11822
// begin joined := true ;
11788: LD_ADDR_VAR 0 5
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11796: LD_EXP 35
11800: PPUSH
11801: LD_STRING D3-Simms-Sim-1
11803: PPUSH
11804: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11808: LD_EXP 14
11812: PPUSH
11813: LD_STRING D3-Simms-JMM-1
11815: PPUSH
11816: CALL_OW 88
// end else
11820: GO 12046
// if unit = DeltaDoctor then
11822: LD_VAR 0 1
11826: PUSH
11827: LD_EXP 37
11831: EQUAL
11832: IFFALSE 11868
// begin joined := true ;
11834: LD_ADDR_VAR 0 5
11838: PUSH
11839: LD_INT 1
11841: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11842: LD_EXP 37
11846: PPUSH
11847: LD_STRING D3-Soldier1-Sol1-1
11849: PPUSH
11850: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11854: LD_EXP 14
11858: PPUSH
11859: LD_STRING D3-Soldier1-JMM-1
11861: PPUSH
11862: CALL_OW 88
// end else
11866: GO 12046
// begin joined := unit in selected ;
11868: LD_ADDR_VAR 0 5
11872: PUSH
11873: LD_VAR 0 1
11877: PUSH
11878: LD_EXP 3
11882: IN
11883: ST_TO_ADDR
// if joined then
11884: LD_VAR 0 5
11888: IFFALSE 11957
// begin if GetSex ( unit ) = sex_male then
11890: LD_VAR 0 1
11894: PPUSH
11895: CALL_OW 258
11899: PUSH
11900: LD_INT 1
11902: EQUAL
11903: IFFALSE 11931
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11905: LD_VAR 0 1
11909: PPUSH
11910: LD_STRING D3-Soldier1-Sol1-1
11912: PPUSH
11913: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11917: LD_EXP 14
11921: PPUSH
11922: LD_STRING D3-Soldier1-JMM-1
11924: PPUSH
11925: CALL_OW 88
// end else
11929: GO 11955
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: LD_STRING D3-Soldier2-FSol2-1
11938: PPUSH
11939: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11943: LD_EXP 14
11947: PPUSH
11948: LD_STRING D3-Soldier2-JMM-1
11950: PPUSH
11951: CALL_OW 88
// end ; end else
11955: GO 12046
// begin if GetSex ( unit ) = sex_male then
11957: LD_VAR 0 1
11961: PPUSH
11962: CALL_OW 258
11966: PUSH
11967: LD_INT 1
11969: EQUAL
11970: IFFALSE 12010
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_STRING D4-Soldier2-Sol1-1
11979: PPUSH
11980: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
11984: LD_EXP 14
11988: PPUSH
11989: LD_STRING D4-Soldier2-JMM-1
11991: PPUSH
11992: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_STRING D4-Soldier2-Sol2-1
12003: PPUSH
12004: CALL_OW 88
// end else
12008: GO 12046
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12010: LD_VAR 0 1
12014: PPUSH
12015: LD_STRING D4-Soldier1-FSol1-1
12017: PPUSH
12018: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12022: LD_EXP 14
12026: PPUSH
12027: LD_STRING D4-Soldier1-JMM-1
12029: PPUSH
12030: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12034: LD_VAR 0 1
12038: PPUSH
12039: LD_STRING D4-Soldier1-FSol1-2
12041: PPUSH
12042: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12046: CALL_OW 7
// InGameOff ;
12050: CALL_OW 9
// if building then
12054: LD_VAR 0 3
12058: IFFALSE 12159
// begin SetSide ( JMM , side ) ;
12060: LD_EXP 14
12064: PPUSH
12065: LD_VAR 0 4
12069: PPUSH
12070: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12074: LD_EXP 14
12078: PPUSH
12079: CALL_OW 122
// if joined then
12083: LD_VAR 0 5
12087: IFFALSE 12126
// begin SetSide ( unit , side ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_VAR 0 4
12098: PPUSH
12099: CALL_OW 235
// SetSide ( building , 1 ) ;
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 235
// ComExitBuilding ( unit ) ;
12115: LD_VAR 0 1
12119: PPUSH
12120: CALL_OW 122
// end else
12124: GO 12157
// begin wait ( 0 0$10 ) ;
12126: LD_INT 350
12128: PPUSH
12129: CALL_OW 67
// SetSide ( unit , 1 ) ;
12133: LD_VAR 0 1
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 235
// SetSide ( building , 1 ) ;
12145: LD_VAR 0 3
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 235
// end ; end else
12157: GO 12238
// begin ComStop ( [ JMM , unit ] ) ;
12159: LD_EXP 14
12163: PUSH
12164: LD_VAR 0 1
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 141
// if joined then
12177: LD_VAR 0 5
12181: IFFALSE 12199
// SetSide ( unit , side ) else
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_VAR 0 4
12192: PPUSH
12193: CALL_OW 235
12197: GO 12238
// begin repeat wait ( 0 0$1 ) ;
12199: LD_INT 35
12201: PPUSH
12202: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12206: LD_EXP 14
12210: PPUSH
12211: LD_VAR 0 1
12215: PPUSH
12216: CALL_OW 296
12220: PUSH
12221: LD_INT 11
12223: GREATER
12224: IFFALSE 12199
// SetSide ( unit , 1 ) ;
12226: LD_VAR 0 1
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 235
// end ; end ; end ;
12238: LD_VAR 0 2
12242: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12243: LD_EXP 14
12247: PPUSH
12248: CALL_OW 310
12252: PUSH
12253: LD_INT 47
12255: EQUAL
12256: IFFALSE 12324
12258: GO 12260
12260: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12261: LD_STRING M1a
12263: PPUSH
12264: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12268: LD_INT 13
12270: PPUSH
12271: LD_INT 7
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12281: LD_INT 29
12283: PPUSH
12284: LD_INT 7
12286: PPUSH
12287: LD_INT 2
12289: PPUSH
12290: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12294: LD_EXP 14
12298: PPUSH
12299: LD_INT 9
12301: PPUSH
12302: CALL_OW 336
// can_escape := true ;
12306: LD_ADDR_EXP 6
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12314: LD_INT 19
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 424
// end ;
12324: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12325: LD_EXP 16
12329: PPUSH
12330: CALL_OW 256
12334: PUSH
12335: LD_INT 999
12337: LESS
12338: IFFALSE 12389
12340: GO 12342
12342: DISABLE
// begin enable ;
12343: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12344: LD_INT 25
12346: PPUSH
12347: LD_INT 48
12349: PPUSH
12350: CALL_OW 428
12354: PUSH
12355: LD_EXP 16
12359: EQUAL
12360: IFFALSE 12374
// begin RemoveUnit ( Powell ) ;
12362: LD_EXP 16
12366: PPUSH
12367: CALL_OW 64
// disable ;
12371: DISABLE
// end else
12372: GO 12389
// ComMoveXY ( Powell , 25 , 48 ) ;
12374: LD_EXP 16
12378: PPUSH
12379: LD_INT 25
12381: PPUSH
12382: LD_INT 48
12384: PPUSH
12385: CALL_OW 111
// end ;
12389: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12390: LD_INT 22
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 21
12402: PUSH
12403: LD_INT 1
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 3
12412: PUSH
12413: LD_INT 24
12415: PUSH
12416: LD_INT 990
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: PPUSH
12432: CALL_OW 69
12436: PUSH
12437: LD_EXP 15
12441: DIFF
12442: IFFALSE 12586
12444: GO 12446
12446: DISABLE
12447: LD_INT 0
12449: PPUSH
// begin enable ;
12450: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 4
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 3
12478: PUSH
12479: LD_INT 24
12481: PUSH
12482: LD_INT 990
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: PUSH
12503: LD_EXP 15
12507: DIFF
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12584
// begin ComFree ( i ) ;
12512: LD_VAR 0 1
12516: PPUSH
12517: CALL_OW 139
// SetSide ( i , 1 ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: LD_INT 1
12528: PPUSH
12529: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12533: LD_VAR 0 1
12537: PPUSH
12538: LD_EXP 14
12542: PPUSH
12543: CALL_OW 296
12547: PUSH
12548: LD_INT 14
12550: LESS
12551: IFFALSE 12582
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_EXP 14
12562: PPUSH
12563: CALL_OW 250
12567: PPUSH
12568: LD_EXP 14
12572: PPUSH
12573: CALL_OW 251
12577: PPUSH
12578: CALL_OW 114
// end ;
12582: GO 12509
12584: POP
12585: POP
// end ;
12586: PPOPN 1
12588: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 34
12601: PUSH
12602: LD_INT 12
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: IFFALSE 12699
12619: GO 12621
12621: DISABLE
12622: LD_INT 0
12624: PPUSH
// begin enable ;
12625: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_INT 22
12633: PUSH
12634: LD_INT 4
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 34
12643: PUSH
12644: LD_INT 12
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PPUSH
12655: CALL_OW 69
12659: PUSH
12660: FOR_IN
12661: IFFALSE 12697
// if GetDistUnits ( i , JMM ) < 6 then
12663: LD_VAR 0 1
12667: PPUSH
12668: LD_EXP 14
12672: PPUSH
12673: CALL_OW 296
12677: PUSH
12678: LD_INT 6
12680: LESS
12681: IFFALSE 12695
// SetSide ( i , 7 ) ;
12683: LD_VAR 0 1
12687: PPUSH
12688: LD_INT 7
12690: PPUSH
12691: CALL_OW 235
12695: GO 12660
12697: POP
12698: POP
// end ;
12699: PPOPN 1
12701: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12702: LD_EXP 6
12706: PUSH
12707: LD_INT 19
12709: PPUSH
12710: LD_INT 22
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 21
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 71
12738: NOT
12739: AND
12740: PUSH
12741: LD_INT 3
12743: PPUSH
12744: CALL_OW 469
12748: NOT
12749: AND
12750: PUSH
12751: LD_INT 5
12753: PPUSH
12754: CALL_OW 469
12758: NOT
12759: AND
12760: IFFALSE 14382
12762: GO 12764
12764: DISABLE
12765: LD_INT 0
12767: PPUSH
12768: PPUSH
12769: PPUSH
12770: PPUSH
12771: PPUSH
// begin m1 := false ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// m2 := false ;
12780: LD_ADDR_VAR 0 4
12784: PUSH
12785: LD_INT 0
12787: ST_TO_ADDR
// m3 := false ;
12788: LD_ADDR_VAR 0 5
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12796: LD_ADDR_VAR 0 1
12800: PUSH
12801: LD_EXP 3
12805: PPUSH
12806: LD_INT 22
12808: PUSH
12809: LD_INT 4
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 21
12818: PUSH
12819: LD_INT 1
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 72
12834: PUSH
12835: LD_INT 0
12837: EQUAL
12838: ST_TO_ADDR
// if not all_taken then
12839: LD_VAR 0 1
12843: NOT
12844: IFFALSE 12985
// case query ( Q1 ) of 1 :
12846: LD_STRING Q1
12848: PPUSH
12849: CALL_OW 97
12853: PUSH
12854: LD_INT 1
12856: DOUBLE
12857: EQUAL
12858: IFTRUE 12862
12860: GO 12973
12862: POP
// begin repeat wait ( 0 0$1 ) ;
12863: LD_INT 35
12865: PPUSH
12866: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12870: LD_EXP 3
12874: PPUSH
12875: LD_INT 22
12877: PUSH
12878: LD_INT 4
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: PUSH
12904: LD_INT 0
12906: EQUAL
12907: PUSH
12908: LD_INT 19
12910: PPUSH
12911: LD_INT 22
12913: PUSH
12914: LD_INT 7
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 21
12923: PUSH
12924: LD_INT 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 71
12939: NOT
12940: AND
12941: PUSH
12942: LD_INT 3
12944: PPUSH
12945: CALL_OW 469
12949: NOT
12950: AND
12951: PUSH
12952: LD_INT 5
12954: PPUSH
12955: CALL_OW 469
12959: NOT
12960: AND
12961: IFFALSE 12863
// all_taken := true ;
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// end ; 2 :
12971: GO 12985
12973: LD_INT 2
12975: DOUBLE
12976: EQUAL
12977: IFTRUE 12981
12979: GO 12984
12981: POP
// ; end ;
12982: GO 12985
12984: POP
// if team_kill_counter then
12985: LD_EXP 9
12989: IFFALSE 13005
// Say ( JMM , D5-JMM-1 ) else
12991: LD_EXP 14
12995: PPUSH
12996: LD_STRING D5-JMM-1
12998: PPUSH
12999: CALL_OW 88
13003: GO 13017
// Say ( JMM , D5-JMM-1a ) ;
13005: LD_EXP 14
13009: PPUSH
13010: LD_STRING D5-JMM-1a
13012: PPUSH
13013: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13017: LD_INT 22
13019: PUSH
13020: LD_INT 7
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 23
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 69
13056: PUSH
13057: LD_EXP 14
13061: PUSH
13062: LD_EXP 15
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: DIFF
13071: PUSH
13072: LD_INT 10
13074: GREATEREQUAL
13075: IFFALSE 13084
// SetAchievement ( ACH_TEAM ) ;
13077: LD_STRING ACH_TEAM
13079: PPUSH
13080: CALL_OW 543
// if not invis_used then
13084: LD_EXP 12
13088: NOT
13089: IFFALSE 13105
// begin wait ( 3 ) ;
13091: LD_INT 3
13093: PPUSH
13094: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13098: LD_STRING ACH_NOINVIS
13100: PPUSH
13101: CALL_OW 543
// end ; if not alert then
13105: LD_EXP 13
13109: NOT
13110: IFFALSE 13126
// begin wait ( 3 ) ;
13112: LD_INT 3
13114: PPUSH
13115: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13119: LD_STRING ACH_ALARM
13121: PPUSH
13122: CALL_OW 543
// end ; if tick < 15 15$00 then
13126: LD_OWVAR 1
13130: PUSH
13131: LD_INT 31500
13133: LESS
13134: IFFALSE 13150
// begin wait ( 3 ) ;
13136: LD_INT 3
13138: PPUSH
13139: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13143: LD_STRING ACH_ASPEED_16
13145: PPUSH
13146: CALL_OW 543
// end ; if all_taken then
13150: LD_VAR 0 1
13154: IFFALSE 13176
// begin AddMedal ( All , 1 ) ;
13156: LD_STRING All
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 101
// m1 := true ;
13166: LD_ADDR_VAR 0 3
13170: PUSH
13171: LD_INT 1
13173: ST_TO_ADDR
// end else
13174: GO 13187
// AddMedal ( All , - 1 ) ;
13176: LD_STRING All
13178: PPUSH
13179: LD_INT 1
13181: NEG
13182: PPUSH
13183: CALL_OW 101
// if team_kill_counter then
13187: LD_EXP 9
13191: IFFALSE 13206
// AddMedal ( Save , - 1 ) else
13193: LD_STRING Save
13195: PPUSH
13196: LD_INT 1
13198: NEG
13199: PPUSH
13200: CALL_OW 101
13204: GO 13224
// begin AddMedal ( Save , 1 ) ;
13206: LD_STRING Save
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 101
// m2 := true ;
13216: LD_ADDR_VAR 0 4
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 1 , 1 ] [ Difficulty ] then
13224: LD_EXP 8
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: LD_INT 1
13234: PUSH
13235: LD_INT 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_OWVAR 67
13247: ARRAY
13248: GREATEREQUAL
13249: IFFALSE 13264
// AddMedal ( Friendship , - 1 ) else
13251: LD_STRING Friendship
13253: PPUSH
13254: LD_INT 1
13256: NEG
13257: PPUSH
13258: CALL_OW 101
13262: GO 13282
// begin AddMedal ( Friendship , 1 ) ;
13264: LD_STRING Friendship
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 101
// m3 := true ;
13274: LD_ADDR_VAR 0 5
13278: PUSH
13279: LD_INT 1
13281: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty = 3 then
13282: LD_VAR 0 3
13286: PUSH
13287: LD_VAR 0 4
13291: AND
13292: PUSH
13293: LD_VAR 0 5
13297: AND
13298: PUSH
13299: LD_OWVAR 67
13303: PUSH
13304: LD_INT 3
13306: EQUAL
13307: AND
13308: IFFALSE 13320
// SetAchievementEX ( ACH_AMER , 16 ) ;
13310: LD_STRING ACH_AMER
13312: PPUSH
13313: LD_INT 16
13315: PPUSH
13316: CALL_OW 564
// GiveMedals ( MAIN ) ;
13320: LD_STRING MAIN
13322: PPUSH
13323: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13327: LD_ADDR_VAR 0 2
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 7
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: LD_INT 25
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 25
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 4
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 25
13387: PUSH
13388: LD_INT 5
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 9
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: PPUSH
13432: CALL_OW 69
13436: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13437: LD_VAR 0 2
13441: PUSH
13442: LD_EXP 15
13446: ADD
13447: PPUSH
13448: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13452: LD_EXP 14
13456: PPUSH
13457: LD_STRING 12a_JMM
13459: PPUSH
13460: CALL_OW 38
// if IsLive ( Roth ) then
13464: LD_EXP 15
13468: PPUSH
13469: CALL_OW 300
13473: IFFALSE 13487
// SaveCharacters ( Roth , 12a_Roth ) ;
13475: LD_EXP 15
13479: PPUSH
13480: LD_STRING 12a_Roth
13482: PPUSH
13483: CALL_OW 38
// if Lisa in tmp then
13487: LD_EXP 23
13491: PUSH
13492: LD_VAR 0 2
13496: IN
13497: IFFALSE 13513
// SaveCharacters ( Lisa , 12a_Lisa ) else
13499: LD_EXP 23
13503: PPUSH
13504: LD_STRING 12a_Lisa
13506: PPUSH
13507: CALL_OW 38
13511: GO 13531
// if Lisa then
13513: LD_EXP 23
13517: IFFALSE 13531
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13519: LD_EXP 23
13523: PPUSH
13524: LD_STRING 12p_Lisa
13526: PPUSH
13527: CALL_OW 38
// if Donaldson in tmp then
13531: LD_EXP 24
13535: PUSH
13536: LD_VAR 0 2
13540: IN
13541: IFFALSE 13557
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13543: LD_EXP 24
13547: PPUSH
13548: LD_STRING 12a_Donaldson
13550: PPUSH
13551: CALL_OW 38
13555: GO 13575
// if Donaldson then
13557: LD_EXP 24
13561: IFFALSE 13575
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13563: LD_EXP 24
13567: PPUSH
13568: LD_STRING 12p_Donaldson
13570: PPUSH
13571: CALL_OW 38
// if Bobby in tmp then
13575: LD_EXP 25
13579: PUSH
13580: LD_VAR 0 2
13584: IN
13585: IFFALSE 13601
// SaveCharacters ( Bobby , 12a_Bobby ) else
13587: LD_EXP 25
13591: PPUSH
13592: LD_STRING 12a_Bobby
13594: PPUSH
13595: CALL_OW 38
13599: GO 13619
// if Bobby then
13601: LD_EXP 25
13605: IFFALSE 13619
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13607: LD_EXP 25
13611: PPUSH
13612: LD_STRING 12p_Bobby
13614: PPUSH
13615: CALL_OW 38
// if Cyrus in tmp then
13619: LD_EXP 26
13623: PUSH
13624: LD_VAR 0 2
13628: IN
13629: IFFALSE 13645
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13631: LD_EXP 26
13635: PPUSH
13636: LD_STRING 12a_Cyrus
13638: PPUSH
13639: CALL_OW 38
13643: GO 13663
// if Cyrus then
13645: LD_EXP 26
13649: IFFALSE 13663
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING 12p_Cyrus
13658: PPUSH
13659: CALL_OW 38
// if Denis in tmp then
13663: LD_EXP 27
13667: PUSH
13668: LD_VAR 0 2
13672: IN
13673: IFFALSE 13687
// SaveCharacters ( Denis , 12a_Denis ) ;
13675: LD_EXP 27
13679: PPUSH
13680: LD_STRING 12a_Denis
13682: PPUSH
13683: CALL_OW 38
// if Brown in tmp then
13687: LD_EXP 28
13691: PUSH
13692: LD_VAR 0 2
13696: IN
13697: IFFALSE 13713
// SaveCharacters ( Brown , 12a_Brown ) else
13699: LD_EXP 28
13703: PPUSH
13704: LD_STRING 12a_Brown
13706: PPUSH
13707: CALL_OW 38
13711: GO 13737
// if Brown in tmp then
13713: LD_EXP 28
13717: PUSH
13718: LD_VAR 0 2
13722: IN
13723: IFFALSE 13737
// SaveCharacters ( Brown , 12p_Brown ) ;
13725: LD_EXP 28
13729: PPUSH
13730: LD_STRING 12p_Brown
13732: PPUSH
13733: CALL_OW 38
// if Gladstone in tmp then
13737: LD_EXP 29
13741: PUSH
13742: LD_VAR 0 2
13746: IN
13747: IFFALSE 13763
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13749: LD_EXP 29
13753: PPUSH
13754: LD_STRING 12a_Gladstone
13756: PPUSH
13757: CALL_OW 38
13761: GO 13781
// if Gladstone then
13763: LD_EXP 29
13767: IFFALSE 13781
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13769: LD_EXP 29
13773: PPUSH
13774: LD_STRING 12p_Gladstone
13776: PPUSH
13777: CALL_OW 38
// if Houten in tmp then
13781: LD_EXP 30
13785: PUSH
13786: LD_VAR 0 2
13790: IN
13791: IFFALSE 13807
// SaveCharacters ( Houten , 12a_Houten ) else
13793: LD_EXP 30
13797: PPUSH
13798: LD_STRING 12a_Houten
13800: PPUSH
13801: CALL_OW 38
13805: GO 13825
// if Houten then
13807: LD_EXP 30
13811: IFFALSE 13825
// SaveCharacters ( Houten , 12p_Houten ) ;
13813: LD_EXP 30
13817: PPUSH
13818: LD_STRING 12p_Houten
13820: PPUSH
13821: CALL_OW 38
// if Cornel in tmp then
13825: LD_EXP 31
13829: PUSH
13830: LD_VAR 0 2
13834: IN
13835: IFFALSE 13851
// SaveCharacters ( Cornel , 12a_Cornell ) else
13837: LD_EXP 31
13841: PPUSH
13842: LD_STRING 12a_Cornell
13844: PPUSH
13845: CALL_OW 38
13849: GO 13869
// if Cornel then
13851: LD_EXP 31
13855: IFFALSE 13869
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING 12p_Cornell
13864: PPUSH
13865: CALL_OW 38
// if Gary in tmp then
13869: LD_EXP 32
13873: PUSH
13874: LD_VAR 0 2
13878: IN
13879: IFFALSE 13895
// SaveCharacters ( Gary , 12a_Gary ) else
13881: LD_EXP 32
13885: PPUSH
13886: LD_STRING 12a_Gary
13888: PPUSH
13889: CALL_OW 38
13893: GO 13913
// if Gary then
13895: LD_EXP 32
13899: IFFALSE 13913
// SaveCharacters ( Gary , 12p_Gary ) ;
13901: LD_EXP 32
13905: PPUSH
13906: LD_STRING 12p_Gary
13908: PPUSH
13909: CALL_OW 38
// if Frank in tmp then
13913: LD_EXP 33
13917: PUSH
13918: LD_VAR 0 2
13922: IN
13923: IFFALSE 13937
// SaveCharacters ( Frank , 12a_Frank ) ;
13925: LD_EXP 33
13929: PPUSH
13930: LD_STRING 12a_Frank
13932: PPUSH
13933: CALL_OW 38
// if Kikuchi in tmp then
13937: LD_EXP 34
13941: PUSH
13942: LD_VAR 0 2
13946: IN
13947: IFFALSE 13963
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13949: LD_EXP 34
13953: PPUSH
13954: LD_STRING 12a_Kikuchi
13956: PPUSH
13957: CALL_OW 38
13961: GO 13981
// if Kikuchi then
13963: LD_EXP 34
13967: IFFALSE 13981
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING 12p_Kikuchi
13976: PPUSH
13977: CALL_OW 38
// if Simms in tmp then
13981: LD_EXP 35
13985: PUSH
13986: LD_VAR 0 2
13990: IN
13991: IFFALSE 14005
// SaveCharacters ( Simms , 12a_Simms ) ;
13993: LD_EXP 35
13997: PPUSH
13998: LD_STRING 12a_Simms
14000: PPUSH
14001: CALL_OW 38
// if Joan in tmp then
14005: LD_EXP 36
14009: PUSH
14010: LD_VAR 0 2
14014: IN
14015: IFFALSE 14029
// SaveCharacters ( Joan , 12a_Joan ) ;
14017: LD_EXP 36
14021: PPUSH
14022: LD_STRING 12a_Joan
14024: PPUSH
14025: CALL_OW 38
// if DeltaDoctor in tmp then
14029: LD_EXP 37
14033: PUSH
14034: LD_VAR 0 2
14038: IN
14039: IFFALSE 14053
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14041: LD_EXP 37
14045: PPUSH
14046: LD_STRING 12a_DeltaDoctor
14048: PPUSH
14049: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14053: LD_ADDR_VAR 0 2
14057: PUSH
14058: LD_VAR 0 2
14062: PUSH
14063: LD_EXP 14
14067: PUSH
14068: LD_EXP 15
14072: PUSH
14073: LD_EXP 23
14077: PUSH
14078: LD_EXP 24
14082: PUSH
14083: LD_EXP 25
14087: PUSH
14088: LD_EXP 26
14092: PUSH
14093: LD_EXP 27
14097: PUSH
14098: LD_EXP 28
14102: PUSH
14103: LD_EXP 29
14107: PUSH
14108: LD_EXP 30
14112: PUSH
14113: LD_EXP 31
14117: PUSH
14118: LD_EXP 32
14122: PUSH
14123: LD_EXP 33
14127: PUSH
14128: LD_EXP 34
14132: PUSH
14133: LD_EXP 35
14137: PUSH
14138: LD_EXP 36
14142: PUSH
14143: LD_EXP 37
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: DIFF
14167: ST_TO_ADDR
// if tmp then
14168: LD_VAR 0 2
14172: IFFALSE 14186
// SaveCharacters ( tmp , 12a_others ) ;
14174: LD_VAR 0 2
14178: PPUSH
14179: LD_STRING 12a_others
14181: PPUSH
14182: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14186: LD_ADDR_VAR 0 2
14190: PUSH
14191: LD_INT 21
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 23
14203: PUSH
14204: LD_INT 1
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 4
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: PUSH
14249: LD_EXP 14
14253: PUSH
14254: LD_EXP 15
14258: PUSH
14259: LD_EXP 23
14263: PUSH
14264: LD_EXP 24
14268: PUSH
14269: LD_EXP 25
14273: PUSH
14274: LD_EXP 26
14278: PUSH
14279: LD_EXP 27
14283: PUSH
14284: LD_EXP 28
14288: PUSH
14289: LD_EXP 29
14293: PUSH
14294: LD_EXP 30
14298: PUSH
14299: LD_EXP 31
14303: PUSH
14304: LD_EXP 32
14308: PUSH
14309: LD_EXP 33
14313: PUSH
14314: LD_EXP 34
14318: PUSH
14319: LD_EXP 35
14323: PUSH
14324: LD_EXP 36
14328: PUSH
14329: LD_EXP 37
14333: PUSH
14334: LD_EXP 16
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: DIFF
14359: ST_TO_ADDR
// if tmp then
14360: LD_VAR 0 2
14364: IFFALSE 14378
// SaveCharacters ( tmp , 12p_others ) ;
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_STRING 12p_others
14373: PPUSH
14374: CALL_OW 38
// YouWin ;
14378: CALL_OW 103
// end ; end_of_file
14382: PPOPN 5
14384: END
// on SailEvent ( event ) do var tmp ;
14385: LD_INT 0
14387: PPUSH
// begin if event = 1 then
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 1
14395: EQUAL
14396: IFFALSE 14469
// begin if not mobile_patrol then
14398: LD_EXP 17
14402: NOT
14403: IFFALSE 14407
// exit ;
14405: GO 14469
// tmp := mobile_patrol [ mobile_patrol ] ;
14407: LD_ADDR_VAR 0 2
14411: PUSH
14412: LD_EXP 17
14416: PUSH
14417: LD_EXP 17
14421: ARRAY
14422: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14423: LD_ADDR_EXP 17
14427: PUSH
14428: LD_EXP 17
14432: PPUSH
14433: LD_EXP 17
14437: PPUSH
14438: CALL_OW 3
14442: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_EXP 18
14452: PUSH
14453: LD_EXP 17
14457: PUSH
14458: LD_INT 1
14460: PLUS
14461: ARRAY
14462: PPUSH
14463: EMPTY
14464: PPUSH
14465: CALL 6653 0 3
// end ; end ;
14469: PPOPN 2
14471: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14472: LD_VAR 0 1
14476: PUSH
14477: LD_EXP 14
14481: EQUAL
14482: IFFALSE 14491
// YouLost ( JMM ) ;
14484: LD_STRING JMM
14486: PPUSH
14487: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 255
14500: PUSH
14501: LD_INT 7
14503: EQUAL
14504: PUSH
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 264
14514: PUSH
14515: LD_INT 12
14517: EQUAL
14518: AND
14519: IFFALSE 14528
// YouLost ( Artifact ) ;
14521: LD_STRING Artifact
14523: PPUSH
14524: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 255
14537: PUSH
14538: LD_INT 7
14540: EQUAL
14541: PUSH
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL_OW 247
14551: PUSH
14552: LD_INT 1
14554: EQUAL
14555: AND
14556: PUSH
14557: LD_VAR 0 1
14561: PUSH
14562: LD_EXP 15
14566: EQUAL
14567: OR
14568: IFFALSE 14584
// team_kill_counter := team_kill_counter + 1 ;
14570: LD_ADDR_EXP 9
14574: PUSH
14575: LD_EXP 9
14579: PUSH
14580: LD_INT 1
14582: PLUS
14583: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 255
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: PUSH
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 247
14607: PUSH
14608: LD_INT 1
14610: EQUAL
14611: AND
14612: IFFALSE 14628
// friends_kill_counter := friends_kill_counter + 1 ;
14614: LD_ADDR_EXP 8
14618: PUSH
14619: LD_EXP 8
14623: PUSH
14624: LD_INT 1
14626: PLUS
14627: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: PUSH
14638: LD_INT 1
14640: NONEQUAL
14641: IFFALSE 14645
// exit ;
14643: GO 14722
// if GetControl ( un ) = control_remote then
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 263
14654: PUSH
14655: LD_INT 2
14657: EQUAL
14658: IFFALSE 14676
// defenders := defenders diff un ;
14660: LD_ADDR_EXP 20
14664: PUSH
14665: LD_EXP 20
14669: PUSH
14670: LD_VAR 0 1
14674: DIFF
14675: ST_TO_ADDR
// if not un in defenders then
14676: LD_VAR 0 1
14680: PUSH
14681: LD_EXP 20
14685: IN
14686: NOT
14687: IFFALSE 14722
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14689: LD_ADDR_EXP 21
14693: PUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 250
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 251
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: ST_TO_ADDR
// Defend ;
14718: CALL 2779 0 0
// end ; end ;
14722: PPOPN 1
14724: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 255
14734: PUSH
14735: LD_INT 1
14737: NONEQUAL
14738: IFFALSE 14742
// exit ;
14740: GO 14766
// if GetControl ( veh ) = control_remote then
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 263
14751: PUSH
14752: LD_INT 2
14754: EQUAL
14755: IFFALSE 14766
// Connect ( veh ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL 40148 0 1
// end ;
14766: PPOPN 2
14768: END
// on UnitGoesToRed ( un ) do var i , veh ;
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 255
14782: PUSH
14783: LD_INT 1
14785: EQUAL
14786: PUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 263
14796: PUSH
14797: LD_INT 2
14799: EQUAL
14800: AND
14801: IFFALSE 14812
// ComUnlink ( un ) ;
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 136
// if un = ambar0 then
14812: LD_VAR 0 1
14816: PUSH
14817: LD_INT 18
14819: EQUAL
14820: IFFALSE 14930
// begin uc_side := 1 ;
14822: LD_ADDR_OWVAR 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// uc_nation := 1 ;
14830: LD_ADDR_OWVAR 21
14834: PUSH
14835: LD_INT 1
14837: ST_TO_ADDR
// for i = 1 to 6 do
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 6
14850: PUSH
14851: FOR_TO
14852: IFFALSE 14928
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14854: LD_INT 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: LD_INT 3
14862: PPUSH
14863: LD_INT 4
14865: PPUSH
14866: LD_INT 100
14868: PPUSH
14869: CALL 37093 0 5
// veh := CreateVehicle ;
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: CALL_OW 45
14882: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14895: LD_VAR 0 3
14899: PPUSH
14900: LD_INT 25
14902: PPUSH
14903: LD_INT 0
14905: PPUSH
14906: CALL_OW 49
// defenders := defenders ^ veh ;
14910: LD_ADDR_EXP 20
14914: PUSH
14915: LD_EXP 20
14919: PUSH
14920: LD_VAR 0 3
14924: ADD
14925: ST_TO_ADDR
// end ;
14926: GO 14851
14928: POP
14929: POP
// end ; end ;
14930: PPOPN 3
14932: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14933: LD_VAR 0 2
14937: PUSH
14938: LD_EXP 16
14942: EQUAL
14943: IFFALSE 14954
// RemoveUnit ( Powell ) ;
14945: LD_EXP 16
14949: PPUSH
14950: CALL_OW 64
// end ;
14954: PPOPN 2
14956: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL 28386 0 1
// end ; end_of_file
14966: PPOPN 1
14968: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
14969: LD_INT 0
14971: PPUSH
// ar_miner := 81 ;
14972: LD_ADDR_EXP 45
14976: PUSH
14977: LD_INT 81
14979: ST_TO_ADDR
// ar_crane := 88 ;
14980: LD_ADDR_EXP 44
14984: PUSH
14985: LD_INT 88
14987: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14988: LD_ADDR_EXP 39
14992: PUSH
14993: LD_INT 89
14995: ST_TO_ADDR
// us_hack := 99 ;
14996: LD_ADDR_EXP 40
15000: PUSH
15001: LD_INT 99
15003: ST_TO_ADDR
// us_artillery := 97 ;
15004: LD_ADDR_EXP 41
15008: PUSH
15009: LD_INT 97
15011: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15012: LD_ADDR_EXP 42
15016: PUSH
15017: LD_INT 91
15019: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15020: LD_ADDR_EXP 43
15024: PUSH
15025: LD_INT 92
15027: ST_TO_ADDR
// ru_radar := 98 ;
15028: LD_ADDR_EXP 38
15032: PUSH
15033: LD_INT 98
15035: ST_TO_ADDR
// tech_Artillery := 80 ;
15036: LD_ADDR_EXP 46
15040: PUSH
15041: LD_INT 80
15043: ST_TO_ADDR
// tech_RadMat := 81 ;
15044: LD_ADDR_EXP 47
15048: PUSH
15049: LD_INT 81
15051: ST_TO_ADDR
// tech_BasicTools := 82 ;
15052: LD_ADDR_EXP 48
15056: PUSH
15057: LD_INT 82
15059: ST_TO_ADDR
// tech_Cargo := 83 ;
15060: LD_ADDR_EXP 49
15064: PUSH
15065: LD_INT 83
15067: ST_TO_ADDR
// tech_Track := 84 ;
15068: LD_ADDR_EXP 50
15072: PUSH
15073: LD_INT 84
15075: ST_TO_ADDR
// tech_Crane := 85 ;
15076: LD_ADDR_EXP 51
15080: PUSH
15081: LD_INT 85
15083: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15084: LD_ADDR_EXP 52
15088: PUSH
15089: LD_INT 86
15091: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15092: LD_ADDR_EXP 53
15096: PUSH
15097: LD_INT 87
15099: ST_TO_ADDR
// end ;
15100: LD_VAR 0 1
15104: RET
// every 1 do
15105: GO 15107
15107: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15108: CALL 14969 0 0
15112: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15113: LD_VAR 0 2
15117: PUSH
15118: LD_INT 100
15120: EQUAL
15121: IFFALSE 16070
// begin if not StreamModeActive then
15123: LD_EXP 54
15127: NOT
15128: IFFALSE 15138
// StreamModeActive := true ;
15130: LD_ADDR_EXP 54
15134: PUSH
15135: LD_INT 1
15137: ST_TO_ADDR
// if p3 = 0 then
15138: LD_VAR 0 3
15142: PUSH
15143: LD_INT 0
15145: EQUAL
15146: IFFALSE 15152
// InitStreamMode ;
15148: CALL 16228 0 0
// if p3 = 1 then
15152: LD_VAR 0 3
15156: PUSH
15157: LD_INT 1
15159: EQUAL
15160: IFFALSE 15170
// sRocket := true ;
15162: LD_ADDR_EXP 59
15166: PUSH
15167: LD_INT 1
15169: ST_TO_ADDR
// if p3 = 2 then
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 2
15177: EQUAL
15178: IFFALSE 15188
// sSpeed := true ;
15180: LD_ADDR_EXP 58
15184: PUSH
15185: LD_INT 1
15187: ST_TO_ADDR
// if p3 = 3 then
15188: LD_VAR 0 3
15192: PUSH
15193: LD_INT 3
15195: EQUAL
15196: IFFALSE 15206
// sEngine := true ;
15198: LD_ADDR_EXP 60
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// if p3 = 4 then
15206: LD_VAR 0 3
15210: PUSH
15211: LD_INT 4
15213: EQUAL
15214: IFFALSE 15224
// sSpec := true ;
15216: LD_ADDR_EXP 57
15220: PUSH
15221: LD_INT 1
15223: ST_TO_ADDR
// if p3 = 5 then
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 5
15231: EQUAL
15232: IFFALSE 15242
// sLevel := true ;
15234: LD_ADDR_EXP 61
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// if p3 = 6 then
15242: LD_VAR 0 3
15246: PUSH
15247: LD_INT 6
15249: EQUAL
15250: IFFALSE 15260
// sArmoury := true ;
15252: LD_ADDR_EXP 62
15256: PUSH
15257: LD_INT 1
15259: ST_TO_ADDR
// if p3 = 7 then
15260: LD_VAR 0 3
15264: PUSH
15265: LD_INT 7
15267: EQUAL
15268: IFFALSE 15278
// sRadar := true ;
15270: LD_ADDR_EXP 63
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// if p3 = 8 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_INT 8
15285: EQUAL
15286: IFFALSE 15296
// sBunker := true ;
15288: LD_ADDR_EXP 64
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// if p3 = 9 then
15296: LD_VAR 0 3
15300: PUSH
15301: LD_INT 9
15303: EQUAL
15304: IFFALSE 15314
// sHack := true ;
15306: LD_ADDR_EXP 65
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if p3 = 10 then
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 10
15321: EQUAL
15322: IFFALSE 15332
// sFire := true ;
15324: LD_ADDR_EXP 66
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// if p3 = 11 then
15332: LD_VAR 0 3
15336: PUSH
15337: LD_INT 11
15339: EQUAL
15340: IFFALSE 15350
// sRefresh := true ;
15342: LD_ADDR_EXP 67
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// if p3 = 12 then
15350: LD_VAR 0 3
15354: PUSH
15355: LD_INT 12
15357: EQUAL
15358: IFFALSE 15368
// sExp := true ;
15360: LD_ADDR_EXP 68
15364: PUSH
15365: LD_INT 1
15367: ST_TO_ADDR
// if p3 = 13 then
15368: LD_VAR 0 3
15372: PUSH
15373: LD_INT 13
15375: EQUAL
15376: IFFALSE 15386
// sDepot := true ;
15378: LD_ADDR_EXP 69
15382: PUSH
15383: LD_INT 1
15385: ST_TO_ADDR
// if p3 = 14 then
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 14
15393: EQUAL
15394: IFFALSE 15404
// sFlag := true ;
15396: LD_ADDR_EXP 70
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// if p3 = 15 then
15404: LD_VAR 0 3
15408: PUSH
15409: LD_INT 15
15411: EQUAL
15412: IFFALSE 15422
// sKamikadze := true ;
15414: LD_ADDR_EXP 78
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// if p3 = 16 then
15422: LD_VAR 0 3
15426: PUSH
15427: LD_INT 16
15429: EQUAL
15430: IFFALSE 15440
// sTroll := true ;
15432: LD_ADDR_EXP 79
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// if p3 = 17 then
15440: LD_VAR 0 3
15444: PUSH
15445: LD_INT 17
15447: EQUAL
15448: IFFALSE 15458
// sSlow := true ;
15450: LD_ADDR_EXP 80
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// if p3 = 18 then
15458: LD_VAR 0 3
15462: PUSH
15463: LD_INT 18
15465: EQUAL
15466: IFFALSE 15476
// sLack := true ;
15468: LD_ADDR_EXP 81
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// if p3 = 19 then
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 19
15483: EQUAL
15484: IFFALSE 15494
// sTank := true ;
15486: LD_ADDR_EXP 83
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if p3 = 20 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 20
15501: EQUAL
15502: IFFALSE 15512
// sRemote := true ;
15504: LD_ADDR_EXP 84
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 21 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 21
15519: EQUAL
15520: IFFALSE 15530
// sPowell := true ;
15522: LD_ADDR_EXP 85
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 22 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 22
15537: EQUAL
15538: IFFALSE 15548
// sTeleport := true ;
15540: LD_ADDR_EXP 88
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 23 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 23
15555: EQUAL
15556: IFFALSE 15566
// sOilTower := true ;
15558: LD_ADDR_EXP 90
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 24 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 24
15573: EQUAL
15574: IFFALSE 15584
// sShovel := true ;
15576: LD_ADDR_EXP 91
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 25 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 25
15591: EQUAL
15592: IFFALSE 15602
// sSheik := true ;
15594: LD_ADDR_EXP 92
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 26 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 26
15609: EQUAL
15610: IFFALSE 15620
// sEarthquake := true ;
15612: LD_ADDR_EXP 94
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 27 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 27
15627: EQUAL
15628: IFFALSE 15638
// sAI := true ;
15630: LD_ADDR_EXP 95
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 28 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 28
15645: EQUAL
15646: IFFALSE 15656
// sCargo := true ;
15648: LD_ADDR_EXP 98
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 29 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 29
15663: EQUAL
15664: IFFALSE 15674
// sDLaser := true ;
15666: LD_ADDR_EXP 99
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 30 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 30
15681: EQUAL
15682: IFFALSE 15692
// sExchange := true ;
15684: LD_ADDR_EXP 100
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 31 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 31
15699: EQUAL
15700: IFFALSE 15710
// sFac := true ;
15702: LD_ADDR_EXP 101
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 32 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 32
15717: EQUAL
15718: IFFALSE 15728
// sPower := true ;
15720: LD_ADDR_EXP 102
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 33 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 33
15735: EQUAL
15736: IFFALSE 15746
// sRandom := true ;
15738: LD_ADDR_EXP 103
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 34 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 34
15753: EQUAL
15754: IFFALSE 15764
// sShield := true ;
15756: LD_ADDR_EXP 104
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 35 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 35
15771: EQUAL
15772: IFFALSE 15782
// sTime := true ;
15774: LD_ADDR_EXP 105
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 36 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 36
15789: EQUAL
15790: IFFALSE 15800
// sTools := true ;
15792: LD_ADDR_EXP 106
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 101 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 101
15807: EQUAL
15808: IFFALSE 15818
// sSold := true ;
15810: LD_ADDR_EXP 71
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 102 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 102
15825: EQUAL
15826: IFFALSE 15836
// sDiff := true ;
15828: LD_ADDR_EXP 72
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 103 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 103
15843: EQUAL
15844: IFFALSE 15854
// sFog := true ;
15846: LD_ADDR_EXP 75
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 104 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 104
15861: EQUAL
15862: IFFALSE 15872
// sReset := true ;
15864: LD_ADDR_EXP 76
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 105 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 105
15879: EQUAL
15880: IFFALSE 15890
// sSun := true ;
15882: LD_ADDR_EXP 77
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 106 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 106
15897: EQUAL
15898: IFFALSE 15908
// sTiger := true ;
15900: LD_ADDR_EXP 73
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 107 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 107
15915: EQUAL
15916: IFFALSE 15926
// sBomb := true ;
15918: LD_ADDR_EXP 74
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if p3 = 108 then
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 108
15933: EQUAL
15934: IFFALSE 15944
// sWound := true ;
15936: LD_ADDR_EXP 82
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if p3 = 109 then
15944: LD_VAR 0 3
15948: PUSH
15949: LD_INT 109
15951: EQUAL
15952: IFFALSE 15962
// sBetray := true ;
15954: LD_ADDR_EXP 86
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// if p3 = 110 then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 110
15969: EQUAL
15970: IFFALSE 15980
// sContamin := true ;
15972: LD_ADDR_EXP 87
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// if p3 = 111 then
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 111
15987: EQUAL
15988: IFFALSE 15998
// sOil := true ;
15990: LD_ADDR_EXP 89
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if p3 = 112 then
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 112
16005: EQUAL
16006: IFFALSE 16016
// sStu := true ;
16008: LD_ADDR_EXP 93
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if p3 = 113 then
16016: LD_VAR 0 3
16020: PUSH
16021: LD_INT 113
16023: EQUAL
16024: IFFALSE 16034
// sBazooka := true ;
16026: LD_ADDR_EXP 96
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// if p3 = 114 then
16034: LD_VAR 0 3
16038: PUSH
16039: LD_INT 114
16041: EQUAL
16042: IFFALSE 16052
// sMortar := true ;
16044: LD_ADDR_EXP 97
16048: PUSH
16049: LD_INT 1
16051: ST_TO_ADDR
// if p3 = 115 then
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 115
16059: EQUAL
16060: IFFALSE 16070
// sRanger := true ;
16062: LD_ADDR_EXP 107
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// end ; if p2 = 101 then
16070: LD_VAR 0 2
16074: PUSH
16075: LD_INT 101
16077: EQUAL
16078: IFFALSE 16206
// begin case p3 of 1 :
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 1
16087: DOUBLE
16088: EQUAL
16089: IFTRUE 16093
16091: GO 16100
16093: POP
// hHackUnlimitedResources ; 2 :
16094: CALL 27241 0 0
16098: GO 16206
16100: LD_INT 2
16102: DOUBLE
16103: EQUAL
16104: IFTRUE 16108
16106: GO 16115
16108: POP
// hHackSetLevel10 ; 3 :
16109: CALL 27374 0 0
16113: GO 16206
16115: LD_INT 3
16117: DOUBLE
16118: EQUAL
16119: IFTRUE 16123
16121: GO 16130
16123: POP
// hHackSetLevel10YourUnits ; 4 :
16124: CALL 27459 0 0
16128: GO 16206
16130: LD_INT 4
16132: DOUBLE
16133: EQUAL
16134: IFTRUE 16138
16136: GO 16145
16138: POP
// hHackInvincible ; 5 :
16139: CALL 27907 0 0
16143: GO 16206
16145: LD_INT 5
16147: DOUBLE
16148: EQUAL
16149: IFTRUE 16153
16151: GO 16160
16153: POP
// hHackInvisible ; 6 :
16154: CALL 28018 0 0
16158: GO 16206
16160: LD_INT 6
16162: DOUBLE
16163: EQUAL
16164: IFTRUE 16168
16166: GO 16175
16168: POP
// hHackChangeYourSide ; 7 :
16169: CALL 28075 0 0
16173: GO 16206
16175: LD_INT 7
16177: DOUBLE
16178: EQUAL
16179: IFTRUE 16183
16181: GO 16190
16183: POP
// hHackChangeUnitSide ; 8 :
16184: CALL 28117 0 0
16188: GO 16206
16190: LD_INT 8
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16205
16198: POP
// hHackFog ; end ;
16199: CALL 28218 0 0
16203: GO 16206
16205: POP
// end ; end ;
16206: PPOPN 6
16208: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16209: GO 16211
16211: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16212: LD_STRING initStreamRollete();
16214: PPUSH
16215: CALL_OW 559
// InitStreamMode ;
16219: CALL 16228 0 0
// DefineStreamItems ( ) ;
16223: CALL 16668 0 0
// end ;
16227: END
// function InitStreamMode ; begin
16228: LD_INT 0
16230: PPUSH
// streamModeActive := false ;
16231: LD_ADDR_EXP 54
16235: PUSH
16236: LD_INT 0
16238: ST_TO_ADDR
// normalCounter := 36 ;
16239: LD_ADDR_EXP 55
16243: PUSH
16244: LD_INT 36
16246: ST_TO_ADDR
// hardcoreCounter := 16 ;
16247: LD_ADDR_EXP 56
16251: PUSH
16252: LD_INT 16
16254: ST_TO_ADDR
// sRocket := false ;
16255: LD_ADDR_EXP 59
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// sSpeed := false ;
16263: LD_ADDR_EXP 58
16267: PUSH
16268: LD_INT 0
16270: ST_TO_ADDR
// sEngine := false ;
16271: LD_ADDR_EXP 60
16275: PUSH
16276: LD_INT 0
16278: ST_TO_ADDR
// sSpec := false ;
16279: LD_ADDR_EXP 57
16283: PUSH
16284: LD_INT 0
16286: ST_TO_ADDR
// sLevel := false ;
16287: LD_ADDR_EXP 61
16291: PUSH
16292: LD_INT 0
16294: ST_TO_ADDR
// sArmoury := false ;
16295: LD_ADDR_EXP 62
16299: PUSH
16300: LD_INT 0
16302: ST_TO_ADDR
// sRadar := false ;
16303: LD_ADDR_EXP 63
16307: PUSH
16308: LD_INT 0
16310: ST_TO_ADDR
// sBunker := false ;
16311: LD_ADDR_EXP 64
16315: PUSH
16316: LD_INT 0
16318: ST_TO_ADDR
// sHack := false ;
16319: LD_ADDR_EXP 65
16323: PUSH
16324: LD_INT 0
16326: ST_TO_ADDR
// sFire := false ;
16327: LD_ADDR_EXP 66
16331: PUSH
16332: LD_INT 0
16334: ST_TO_ADDR
// sRefresh := false ;
16335: LD_ADDR_EXP 67
16339: PUSH
16340: LD_INT 0
16342: ST_TO_ADDR
// sExp := false ;
16343: LD_ADDR_EXP 68
16347: PUSH
16348: LD_INT 0
16350: ST_TO_ADDR
// sDepot := false ;
16351: LD_ADDR_EXP 69
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// sFlag := false ;
16359: LD_ADDR_EXP 70
16363: PUSH
16364: LD_INT 0
16366: ST_TO_ADDR
// sKamikadze := false ;
16367: LD_ADDR_EXP 78
16371: PUSH
16372: LD_INT 0
16374: ST_TO_ADDR
// sTroll := false ;
16375: LD_ADDR_EXP 79
16379: PUSH
16380: LD_INT 0
16382: ST_TO_ADDR
// sSlow := false ;
16383: LD_ADDR_EXP 80
16387: PUSH
16388: LD_INT 0
16390: ST_TO_ADDR
// sLack := false ;
16391: LD_ADDR_EXP 81
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
// sTank := false ;
16399: LD_ADDR_EXP 83
16403: PUSH
16404: LD_INT 0
16406: ST_TO_ADDR
// sRemote := false ;
16407: LD_ADDR_EXP 84
16411: PUSH
16412: LD_INT 0
16414: ST_TO_ADDR
// sPowell := false ;
16415: LD_ADDR_EXP 85
16419: PUSH
16420: LD_INT 0
16422: ST_TO_ADDR
// sTeleport := false ;
16423: LD_ADDR_EXP 88
16427: PUSH
16428: LD_INT 0
16430: ST_TO_ADDR
// sOilTower := false ;
16431: LD_ADDR_EXP 90
16435: PUSH
16436: LD_INT 0
16438: ST_TO_ADDR
// sShovel := false ;
16439: LD_ADDR_EXP 91
16443: PUSH
16444: LD_INT 0
16446: ST_TO_ADDR
// sSheik := false ;
16447: LD_ADDR_EXP 92
16451: PUSH
16452: LD_INT 0
16454: ST_TO_ADDR
// sEarthquake := false ;
16455: LD_ADDR_EXP 94
16459: PUSH
16460: LD_INT 0
16462: ST_TO_ADDR
// sAI := false ;
16463: LD_ADDR_EXP 95
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// sCargo := false ;
16471: LD_ADDR_EXP 98
16475: PUSH
16476: LD_INT 0
16478: ST_TO_ADDR
// sDLaser := false ;
16479: LD_ADDR_EXP 99
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// sExchange := false ;
16487: LD_ADDR_EXP 100
16491: PUSH
16492: LD_INT 0
16494: ST_TO_ADDR
// sFac := false ;
16495: LD_ADDR_EXP 101
16499: PUSH
16500: LD_INT 0
16502: ST_TO_ADDR
// sPower := false ;
16503: LD_ADDR_EXP 102
16507: PUSH
16508: LD_INT 0
16510: ST_TO_ADDR
// sRandom := false ;
16511: LD_ADDR_EXP 103
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// sShield := false ;
16519: LD_ADDR_EXP 104
16523: PUSH
16524: LD_INT 0
16526: ST_TO_ADDR
// sTime := false ;
16527: LD_ADDR_EXP 105
16531: PUSH
16532: LD_INT 0
16534: ST_TO_ADDR
// sTools := false ;
16535: LD_ADDR_EXP 106
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// sSold := false ;
16543: LD_ADDR_EXP 71
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// sDiff := false ;
16551: LD_ADDR_EXP 72
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// sFog := false ;
16559: LD_ADDR_EXP 75
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// sReset := false ;
16567: LD_ADDR_EXP 76
16571: PUSH
16572: LD_INT 0
16574: ST_TO_ADDR
// sSun := false ;
16575: LD_ADDR_EXP 77
16579: PUSH
16580: LD_INT 0
16582: ST_TO_ADDR
// sTiger := false ;
16583: LD_ADDR_EXP 73
16587: PUSH
16588: LD_INT 0
16590: ST_TO_ADDR
// sBomb := false ;
16591: LD_ADDR_EXP 74
16595: PUSH
16596: LD_INT 0
16598: ST_TO_ADDR
// sWound := false ;
16599: LD_ADDR_EXP 82
16603: PUSH
16604: LD_INT 0
16606: ST_TO_ADDR
// sBetray := false ;
16607: LD_ADDR_EXP 86
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// sContamin := false ;
16615: LD_ADDR_EXP 87
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// sOil := false ;
16623: LD_ADDR_EXP 89
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// sStu := false ;
16631: LD_ADDR_EXP 93
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// sBazooka := false ;
16639: LD_ADDR_EXP 96
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
// sMortar := false ;
16647: LD_ADDR_EXP 97
16651: PUSH
16652: LD_INT 0
16654: ST_TO_ADDR
// sRanger := false ;
16655: LD_ADDR_EXP 107
16659: PUSH
16660: LD_INT 0
16662: ST_TO_ADDR
// end ;
16663: LD_VAR 0 1
16667: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16668: LD_INT 0
16670: PPUSH
16671: PPUSH
16672: PPUSH
16673: PPUSH
16674: PPUSH
// result := [ ] ;
16675: LD_ADDR_VAR 0 1
16679: PUSH
16680: EMPTY
16681: ST_TO_ADDR
// if campaign_id = 1 then
16682: LD_OWVAR 69
16686: PUSH
16687: LD_INT 1
16689: EQUAL
16690: IFFALSE 19628
// begin case mission_number of 1 :
16692: LD_OWVAR 70
16696: PUSH
16697: LD_INT 1
16699: DOUBLE
16700: EQUAL
16701: IFTRUE 16705
16703: GO 16769
16705: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16706: LD_ADDR_VAR 0 1
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 4
16716: PUSH
16717: LD_INT 11
16719: PUSH
16720: LD_INT 12
16722: PUSH
16723: LD_INT 15
16725: PUSH
16726: LD_INT 16
16728: PUSH
16729: LD_INT 22
16731: PUSH
16732: LD_INT 23
16734: PUSH
16735: LD_INT 26
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 101
16751: PUSH
16752: LD_INT 102
16754: PUSH
16755: LD_INT 106
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: ST_TO_ADDR
16767: GO 19626
16769: LD_INT 2
16771: DOUBLE
16772: EQUAL
16773: IFTRUE 16777
16775: GO 16849
16777: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16778: LD_ADDR_VAR 0 1
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: LD_INT 4
16788: PUSH
16789: LD_INT 11
16791: PUSH
16792: LD_INT 12
16794: PUSH
16795: LD_INT 15
16797: PUSH
16798: LD_INT 16
16800: PUSH
16801: LD_INT 22
16803: PUSH
16804: LD_INT 23
16806: PUSH
16807: LD_INT 26
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 101
16823: PUSH
16824: LD_INT 102
16826: PUSH
16827: LD_INT 105
16829: PUSH
16830: LD_INT 106
16832: PUSH
16833: LD_INT 108
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: ST_TO_ADDR
16847: GO 19626
16849: LD_INT 3
16851: DOUBLE
16852: EQUAL
16853: IFTRUE 16857
16855: GO 16933
16857: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16858: LD_ADDR_VAR 0 1
16862: PUSH
16863: LD_INT 2
16865: PUSH
16866: LD_INT 4
16868: PUSH
16869: LD_INT 5
16871: PUSH
16872: LD_INT 11
16874: PUSH
16875: LD_INT 12
16877: PUSH
16878: LD_INT 15
16880: PUSH
16881: LD_INT 16
16883: PUSH
16884: LD_INT 22
16886: PUSH
16887: LD_INT 26
16889: PUSH
16890: LD_INT 36
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 101
16907: PUSH
16908: LD_INT 102
16910: PUSH
16911: LD_INT 105
16913: PUSH
16914: LD_INT 106
16916: PUSH
16917: LD_INT 108
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: ST_TO_ADDR
16931: GO 19626
16933: LD_INT 4
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 17025
16941: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16942: LD_ADDR_VAR 0 1
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 4
16952: PUSH
16953: LD_INT 5
16955: PUSH
16956: LD_INT 8
16958: PUSH
16959: LD_INT 11
16961: PUSH
16962: LD_INT 12
16964: PUSH
16965: LD_INT 15
16967: PUSH
16968: LD_INT 16
16970: PUSH
16971: LD_INT 22
16973: PUSH
16974: LD_INT 23
16976: PUSH
16977: LD_INT 26
16979: PUSH
16980: LD_INT 36
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 101
16999: PUSH
17000: LD_INT 102
17002: PUSH
17003: LD_INT 105
17005: PUSH
17006: LD_INT 106
17008: PUSH
17009: LD_INT 108
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: ST_TO_ADDR
17023: GO 19626
17025: LD_INT 5
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17133
17033: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17034: LD_ADDR_VAR 0 1
17038: PUSH
17039: LD_INT 2
17041: PUSH
17042: LD_INT 4
17044: PUSH
17045: LD_INT 5
17047: PUSH
17048: LD_INT 6
17050: PUSH
17051: LD_INT 8
17053: PUSH
17054: LD_INT 11
17056: PUSH
17057: LD_INT 12
17059: PUSH
17060: LD_INT 15
17062: PUSH
17063: LD_INT 16
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_INT 23
17071: PUSH
17072: LD_INT 25
17074: PUSH
17075: LD_INT 26
17077: PUSH
17078: LD_INT 36
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 101
17099: PUSH
17100: LD_INT 102
17102: PUSH
17103: LD_INT 105
17105: PUSH
17106: LD_INT 106
17108: PUSH
17109: LD_INT 108
17111: PUSH
17112: LD_INT 109
17114: PUSH
17115: LD_INT 112
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: ST_TO_ADDR
17131: GO 19626
17133: LD_INT 6
17135: DOUBLE
17136: EQUAL
17137: IFTRUE 17141
17139: GO 17261
17141: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17142: LD_ADDR_VAR 0 1
17146: PUSH
17147: LD_INT 2
17149: PUSH
17150: LD_INT 4
17152: PUSH
17153: LD_INT 5
17155: PUSH
17156: LD_INT 6
17158: PUSH
17159: LD_INT 8
17161: PUSH
17162: LD_INT 11
17164: PUSH
17165: LD_INT 12
17167: PUSH
17168: LD_INT 15
17170: PUSH
17171: LD_INT 16
17173: PUSH
17174: LD_INT 20
17176: PUSH
17177: LD_INT 21
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_INT 23
17185: PUSH
17186: LD_INT 25
17188: PUSH
17189: LD_INT 26
17191: PUSH
17192: LD_INT 30
17194: PUSH
17195: LD_INT 31
17197: PUSH
17198: LD_INT 32
17200: PUSH
17201: LD_INT 36
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 101
17227: PUSH
17228: LD_INT 102
17230: PUSH
17231: LD_INT 105
17233: PUSH
17234: LD_INT 106
17236: PUSH
17237: LD_INT 108
17239: PUSH
17240: LD_INT 109
17242: PUSH
17243: LD_INT 112
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: ST_TO_ADDR
17259: GO 19626
17261: LD_INT 7
17263: DOUBLE
17264: EQUAL
17265: IFTRUE 17269
17267: GO 17369
17269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17270: LD_ADDR_VAR 0 1
17274: PUSH
17275: LD_INT 2
17277: PUSH
17278: LD_INT 4
17280: PUSH
17281: LD_INT 5
17283: PUSH
17284: LD_INT 7
17286: PUSH
17287: LD_INT 11
17289: PUSH
17290: LD_INT 12
17292: PUSH
17293: LD_INT 15
17295: PUSH
17296: LD_INT 16
17298: PUSH
17299: LD_INT 20
17301: PUSH
17302: LD_INT 21
17304: PUSH
17305: LD_INT 22
17307: PUSH
17308: LD_INT 23
17310: PUSH
17311: LD_INT 25
17313: PUSH
17314: LD_INT 26
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 101
17335: PUSH
17336: LD_INT 102
17338: PUSH
17339: LD_INT 103
17341: PUSH
17342: LD_INT 105
17344: PUSH
17345: LD_INT 106
17347: PUSH
17348: LD_INT 108
17350: PUSH
17351: LD_INT 112
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: ST_TO_ADDR
17367: GO 19626
17369: LD_INT 8
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17505
17377: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17378: LD_ADDR_VAR 0 1
17382: PUSH
17383: LD_INT 2
17385: PUSH
17386: LD_INT 4
17388: PUSH
17389: LD_INT 5
17391: PUSH
17392: LD_INT 6
17394: PUSH
17395: LD_INT 7
17397: PUSH
17398: LD_INT 8
17400: PUSH
17401: LD_INT 11
17403: PUSH
17404: LD_INT 12
17406: PUSH
17407: LD_INT 15
17409: PUSH
17410: LD_INT 16
17412: PUSH
17413: LD_INT 20
17415: PUSH
17416: LD_INT 21
17418: PUSH
17419: LD_INT 22
17421: PUSH
17422: LD_INT 23
17424: PUSH
17425: LD_INT 25
17427: PUSH
17428: LD_INT 26
17430: PUSH
17431: LD_INT 30
17433: PUSH
17434: LD_INT 31
17436: PUSH
17437: LD_INT 32
17439: PUSH
17440: LD_INT 36
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 101
17467: PUSH
17468: LD_INT 102
17470: PUSH
17471: LD_INT 103
17473: PUSH
17474: LD_INT 105
17476: PUSH
17477: LD_INT 106
17479: PUSH
17480: LD_INT 108
17482: PUSH
17483: LD_INT 109
17485: PUSH
17486: LD_INT 112
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: ST_TO_ADDR
17503: GO 19626
17505: LD_INT 9
17507: DOUBLE
17508: EQUAL
17509: IFTRUE 17513
17511: GO 17649
17513: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17514: LD_ADDR_VAR 0 1
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: LD_INT 4
17524: PUSH
17525: LD_INT 5
17527: PUSH
17528: LD_INT 6
17530: PUSH
17531: LD_INT 7
17533: PUSH
17534: LD_INT 8
17536: PUSH
17537: LD_INT 11
17539: PUSH
17540: LD_INT 12
17542: PUSH
17543: LD_INT 15
17545: PUSH
17546: LD_INT 16
17548: PUSH
17549: LD_INT 20
17551: PUSH
17552: LD_INT 21
17554: PUSH
17555: LD_INT 22
17557: PUSH
17558: LD_INT 23
17560: PUSH
17561: LD_INT 25
17563: PUSH
17564: LD_INT 26
17566: PUSH
17567: LD_INT 28
17569: PUSH
17570: LD_INT 30
17572: PUSH
17573: LD_INT 31
17575: PUSH
17576: LD_INT 32
17578: PUSH
17579: LD_INT 36
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 101
17607: PUSH
17608: LD_INT 102
17610: PUSH
17611: LD_INT 103
17613: PUSH
17614: LD_INT 105
17616: PUSH
17617: LD_INT 106
17619: PUSH
17620: LD_INT 108
17622: PUSH
17623: LD_INT 109
17625: PUSH
17626: LD_INT 112
17628: PUSH
17629: LD_INT 114
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: ST_TO_ADDR
17647: GO 19626
17649: LD_INT 10
17651: DOUBLE
17652: EQUAL
17653: IFTRUE 17657
17655: GO 17841
17657: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17658: LD_ADDR_VAR 0 1
17662: PUSH
17663: LD_INT 2
17665: PUSH
17666: LD_INT 4
17668: PUSH
17669: LD_INT 5
17671: PUSH
17672: LD_INT 6
17674: PUSH
17675: LD_INT 7
17677: PUSH
17678: LD_INT 8
17680: PUSH
17681: LD_INT 9
17683: PUSH
17684: LD_INT 10
17686: PUSH
17687: LD_INT 11
17689: PUSH
17690: LD_INT 12
17692: PUSH
17693: LD_INT 13
17695: PUSH
17696: LD_INT 14
17698: PUSH
17699: LD_INT 15
17701: PUSH
17702: LD_INT 16
17704: PUSH
17705: LD_INT 17
17707: PUSH
17708: LD_INT 18
17710: PUSH
17711: LD_INT 19
17713: PUSH
17714: LD_INT 20
17716: PUSH
17717: LD_INT 21
17719: PUSH
17720: LD_INT 22
17722: PUSH
17723: LD_INT 23
17725: PUSH
17726: LD_INT 24
17728: PUSH
17729: LD_INT 25
17731: PUSH
17732: LD_INT 26
17734: PUSH
17735: LD_INT 28
17737: PUSH
17738: LD_INT 30
17740: PUSH
17741: LD_INT 31
17743: PUSH
17744: LD_INT 32
17746: PUSH
17747: LD_INT 36
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 101
17783: PUSH
17784: LD_INT 102
17786: PUSH
17787: LD_INT 103
17789: PUSH
17790: LD_INT 104
17792: PUSH
17793: LD_INT 105
17795: PUSH
17796: LD_INT 106
17798: PUSH
17799: LD_INT 107
17801: PUSH
17802: LD_INT 108
17804: PUSH
17805: LD_INT 109
17807: PUSH
17808: LD_INT 110
17810: PUSH
17811: LD_INT 111
17813: PUSH
17814: LD_INT 112
17816: PUSH
17817: LD_INT 114
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: ST_TO_ADDR
17839: GO 19626
17841: LD_INT 11
17843: DOUBLE
17844: EQUAL
17845: IFTRUE 17849
17847: GO 18041
17849: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17850: LD_ADDR_VAR 0 1
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 3
17860: PUSH
17861: LD_INT 4
17863: PUSH
17864: LD_INT 5
17866: PUSH
17867: LD_INT 6
17869: PUSH
17870: LD_INT 7
17872: PUSH
17873: LD_INT 8
17875: PUSH
17876: LD_INT 9
17878: PUSH
17879: LD_INT 10
17881: PUSH
17882: LD_INT 11
17884: PUSH
17885: LD_INT 12
17887: PUSH
17888: LD_INT 13
17890: PUSH
17891: LD_INT 14
17893: PUSH
17894: LD_INT 15
17896: PUSH
17897: LD_INT 16
17899: PUSH
17900: LD_INT 17
17902: PUSH
17903: LD_INT 18
17905: PUSH
17906: LD_INT 19
17908: PUSH
17909: LD_INT 20
17911: PUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 22
17917: PUSH
17918: LD_INT 23
17920: PUSH
17921: LD_INT 24
17923: PUSH
17924: LD_INT 25
17926: PUSH
17927: LD_INT 26
17929: PUSH
17930: LD_INT 28
17932: PUSH
17933: LD_INT 30
17935: PUSH
17936: LD_INT 31
17938: PUSH
17939: LD_INT 32
17941: PUSH
17942: LD_INT 34
17944: PUSH
17945: LD_INT 36
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 101
17983: PUSH
17984: LD_INT 102
17986: PUSH
17987: LD_INT 103
17989: PUSH
17990: LD_INT 104
17992: PUSH
17993: LD_INT 105
17995: PUSH
17996: LD_INT 106
17998: PUSH
17999: LD_INT 107
18001: PUSH
18002: LD_INT 108
18004: PUSH
18005: LD_INT 109
18007: PUSH
18008: LD_INT 110
18010: PUSH
18011: LD_INT 111
18013: PUSH
18014: LD_INT 112
18016: PUSH
18017: LD_INT 114
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: ST_TO_ADDR
18039: GO 19626
18041: LD_INT 12
18043: DOUBLE
18044: EQUAL
18045: IFTRUE 18049
18047: GO 18257
18049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18050: LD_ADDR_VAR 0 1
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: LD_INT 2
18060: PUSH
18061: LD_INT 3
18063: PUSH
18064: LD_INT 4
18066: PUSH
18067: LD_INT 5
18069: PUSH
18070: LD_INT 6
18072: PUSH
18073: LD_INT 7
18075: PUSH
18076: LD_INT 8
18078: PUSH
18079: LD_INT 9
18081: PUSH
18082: LD_INT 10
18084: PUSH
18085: LD_INT 11
18087: PUSH
18088: LD_INT 12
18090: PUSH
18091: LD_INT 13
18093: PUSH
18094: LD_INT 14
18096: PUSH
18097: LD_INT 15
18099: PUSH
18100: LD_INT 16
18102: PUSH
18103: LD_INT 17
18105: PUSH
18106: LD_INT 18
18108: PUSH
18109: LD_INT 19
18111: PUSH
18112: LD_INT 20
18114: PUSH
18115: LD_INT 21
18117: PUSH
18118: LD_INT 22
18120: PUSH
18121: LD_INT 23
18123: PUSH
18124: LD_INT 24
18126: PUSH
18127: LD_INT 25
18129: PUSH
18130: LD_INT 26
18132: PUSH
18133: LD_INT 27
18135: PUSH
18136: LD_INT 28
18138: PUSH
18139: LD_INT 30
18141: PUSH
18142: LD_INT 31
18144: PUSH
18145: LD_INT 32
18147: PUSH
18148: LD_INT 33
18150: PUSH
18151: LD_INT 34
18153: PUSH
18154: LD_INT 36
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 101
18195: PUSH
18196: LD_INT 102
18198: PUSH
18199: LD_INT 103
18201: PUSH
18202: LD_INT 104
18204: PUSH
18205: LD_INT 105
18207: PUSH
18208: LD_INT 106
18210: PUSH
18211: LD_INT 107
18213: PUSH
18214: LD_INT 108
18216: PUSH
18217: LD_INT 109
18219: PUSH
18220: LD_INT 110
18222: PUSH
18223: LD_INT 111
18225: PUSH
18226: LD_INT 112
18228: PUSH
18229: LD_INT 113
18231: PUSH
18232: LD_INT 114
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: ST_TO_ADDR
18255: GO 19626
18257: LD_INT 13
18259: DOUBLE
18260: EQUAL
18261: IFTRUE 18265
18263: GO 18461
18265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 3
18279: PUSH
18280: LD_INT 4
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: LD_INT 8
18288: PUSH
18289: LD_INT 9
18291: PUSH
18292: LD_INT 10
18294: PUSH
18295: LD_INT 11
18297: PUSH
18298: LD_INT 12
18300: PUSH
18301: LD_INT 14
18303: PUSH
18304: LD_INT 15
18306: PUSH
18307: LD_INT 16
18309: PUSH
18310: LD_INT 17
18312: PUSH
18313: LD_INT 18
18315: PUSH
18316: LD_INT 19
18318: PUSH
18319: LD_INT 20
18321: PUSH
18322: LD_INT 21
18324: PUSH
18325: LD_INT 22
18327: PUSH
18328: LD_INT 23
18330: PUSH
18331: LD_INT 24
18333: PUSH
18334: LD_INT 25
18336: PUSH
18337: LD_INT 26
18339: PUSH
18340: LD_INT 27
18342: PUSH
18343: LD_INT 28
18345: PUSH
18346: LD_INT 30
18348: PUSH
18349: LD_INT 31
18351: PUSH
18352: LD_INT 32
18354: PUSH
18355: LD_INT 33
18357: PUSH
18358: LD_INT 34
18360: PUSH
18361: LD_INT 36
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 101
18399: PUSH
18400: LD_INT 102
18402: PUSH
18403: LD_INT 103
18405: PUSH
18406: LD_INT 104
18408: PUSH
18409: LD_INT 105
18411: PUSH
18412: LD_INT 106
18414: PUSH
18415: LD_INT 107
18417: PUSH
18418: LD_INT 108
18420: PUSH
18421: LD_INT 109
18423: PUSH
18424: LD_INT 110
18426: PUSH
18427: LD_INT 111
18429: PUSH
18430: LD_INT 112
18432: PUSH
18433: LD_INT 113
18435: PUSH
18436: LD_INT 114
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: ST_TO_ADDR
18459: GO 19626
18461: LD_INT 14
18463: DOUBLE
18464: EQUAL
18465: IFTRUE 18469
18467: GO 18681
18469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: LD_INT 2
18480: PUSH
18481: LD_INT 3
18483: PUSH
18484: LD_INT 4
18486: PUSH
18487: LD_INT 5
18489: PUSH
18490: LD_INT 6
18492: PUSH
18493: LD_INT 7
18495: PUSH
18496: LD_INT 8
18498: PUSH
18499: LD_INT 9
18501: PUSH
18502: LD_INT 10
18504: PUSH
18505: LD_INT 11
18507: PUSH
18508: LD_INT 12
18510: PUSH
18511: LD_INT 13
18513: PUSH
18514: LD_INT 14
18516: PUSH
18517: LD_INT 15
18519: PUSH
18520: LD_INT 16
18522: PUSH
18523: LD_INT 17
18525: PUSH
18526: LD_INT 18
18528: PUSH
18529: LD_INT 19
18531: PUSH
18532: LD_INT 20
18534: PUSH
18535: LD_INT 21
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_INT 23
18543: PUSH
18544: LD_INT 24
18546: PUSH
18547: LD_INT 25
18549: PUSH
18550: LD_INT 26
18552: PUSH
18553: LD_INT 27
18555: PUSH
18556: LD_INT 28
18558: PUSH
18559: LD_INT 29
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 31
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: LD_INT 33
18573: PUSH
18574: LD_INT 34
18576: PUSH
18577: LD_INT 36
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 101
18619: PUSH
18620: LD_INT 102
18622: PUSH
18623: LD_INT 103
18625: PUSH
18626: LD_INT 104
18628: PUSH
18629: LD_INT 105
18631: PUSH
18632: LD_INT 106
18634: PUSH
18635: LD_INT 107
18637: PUSH
18638: LD_INT 108
18640: PUSH
18641: LD_INT 109
18643: PUSH
18644: LD_INT 110
18646: PUSH
18647: LD_INT 111
18649: PUSH
18650: LD_INT 112
18652: PUSH
18653: LD_INT 113
18655: PUSH
18656: LD_INT 114
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: ST_TO_ADDR
18679: GO 19626
18681: LD_INT 15
18683: DOUBLE
18684: EQUAL
18685: IFTRUE 18689
18687: GO 18901
18689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18690: LD_ADDR_VAR 0 1
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: LD_INT 3
18703: PUSH
18704: LD_INT 4
18706: PUSH
18707: LD_INT 5
18709: PUSH
18710: LD_INT 6
18712: PUSH
18713: LD_INT 7
18715: PUSH
18716: LD_INT 8
18718: PUSH
18719: LD_INT 9
18721: PUSH
18722: LD_INT 10
18724: PUSH
18725: LD_INT 11
18727: PUSH
18728: LD_INT 12
18730: PUSH
18731: LD_INT 13
18733: PUSH
18734: LD_INT 14
18736: PUSH
18737: LD_INT 15
18739: PUSH
18740: LD_INT 16
18742: PUSH
18743: LD_INT 17
18745: PUSH
18746: LD_INT 18
18748: PUSH
18749: LD_INT 19
18751: PUSH
18752: LD_INT 20
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 22
18760: PUSH
18761: LD_INT 23
18763: PUSH
18764: LD_INT 24
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 26
18772: PUSH
18773: LD_INT 27
18775: PUSH
18776: LD_INT 28
18778: PUSH
18779: LD_INT 29
18781: PUSH
18782: LD_INT 30
18784: PUSH
18785: LD_INT 31
18787: PUSH
18788: LD_INT 32
18790: PUSH
18791: LD_INT 33
18793: PUSH
18794: LD_INT 34
18796: PUSH
18797: LD_INT 36
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 101
18839: PUSH
18840: LD_INT 102
18842: PUSH
18843: LD_INT 103
18845: PUSH
18846: LD_INT 104
18848: PUSH
18849: LD_INT 105
18851: PUSH
18852: LD_INT 106
18854: PUSH
18855: LD_INT 107
18857: PUSH
18858: LD_INT 108
18860: PUSH
18861: LD_INT 109
18863: PUSH
18864: LD_INT 110
18866: PUSH
18867: LD_INT 111
18869: PUSH
18870: LD_INT 112
18872: PUSH
18873: LD_INT 113
18875: PUSH
18876: LD_INT 114
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: ST_TO_ADDR
18899: GO 19626
18901: LD_INT 16
18903: DOUBLE
18904: EQUAL
18905: IFTRUE 18909
18907: GO 19033
18909: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18910: LD_ADDR_VAR 0 1
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: LD_INT 4
18920: PUSH
18921: LD_INT 5
18923: PUSH
18924: LD_INT 7
18926: PUSH
18927: LD_INT 11
18929: PUSH
18930: LD_INT 12
18932: PUSH
18933: LD_INT 15
18935: PUSH
18936: LD_INT 16
18938: PUSH
18939: LD_INT 20
18941: PUSH
18942: LD_INT 21
18944: PUSH
18945: LD_INT 22
18947: PUSH
18948: LD_INT 23
18950: PUSH
18951: LD_INT 25
18953: PUSH
18954: LD_INT 26
18956: PUSH
18957: LD_INT 30
18959: PUSH
18960: LD_INT 31
18962: PUSH
18963: LD_INT 32
18965: PUSH
18966: LD_INT 33
18968: PUSH
18969: LD_INT 34
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 101
18995: PUSH
18996: LD_INT 102
18998: PUSH
18999: LD_INT 103
19001: PUSH
19002: LD_INT 106
19004: PUSH
19005: LD_INT 108
19007: PUSH
19008: LD_INT 112
19010: PUSH
19011: LD_INT 113
19013: PUSH
19014: LD_INT 114
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: ST_TO_ADDR
19031: GO 19626
19033: LD_INT 17
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19253
19041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19042: LD_ADDR_VAR 0 1
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 3
19055: PUSH
19056: LD_INT 4
19058: PUSH
19059: LD_INT 5
19061: PUSH
19062: LD_INT 6
19064: PUSH
19065: LD_INT 7
19067: PUSH
19068: LD_INT 8
19070: PUSH
19071: LD_INT 9
19073: PUSH
19074: LD_INT 10
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 13
19085: PUSH
19086: LD_INT 14
19088: PUSH
19089: LD_INT 15
19091: PUSH
19092: LD_INT 16
19094: PUSH
19095: LD_INT 17
19097: PUSH
19098: LD_INT 18
19100: PUSH
19101: LD_INT 19
19103: PUSH
19104: LD_INT 20
19106: PUSH
19107: LD_INT 21
19109: PUSH
19110: LD_INT 22
19112: PUSH
19113: LD_INT 23
19115: PUSH
19116: LD_INT 24
19118: PUSH
19119: LD_INT 25
19121: PUSH
19122: LD_INT 26
19124: PUSH
19125: LD_INT 27
19127: PUSH
19128: LD_INT 28
19130: PUSH
19131: LD_INT 29
19133: PUSH
19134: LD_INT 30
19136: PUSH
19137: LD_INT 31
19139: PUSH
19140: LD_INT 32
19142: PUSH
19143: LD_INT 33
19145: PUSH
19146: LD_INT 34
19148: PUSH
19149: LD_INT 36
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 101
19191: PUSH
19192: LD_INT 102
19194: PUSH
19195: LD_INT 103
19197: PUSH
19198: LD_INT 104
19200: PUSH
19201: LD_INT 105
19203: PUSH
19204: LD_INT 106
19206: PUSH
19207: LD_INT 107
19209: PUSH
19210: LD_INT 108
19212: PUSH
19213: LD_INT 109
19215: PUSH
19216: LD_INT 110
19218: PUSH
19219: LD_INT 111
19221: PUSH
19222: LD_INT 112
19224: PUSH
19225: LD_INT 113
19227: PUSH
19228: LD_INT 114
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: ST_TO_ADDR
19251: GO 19626
19253: LD_INT 18
19255: DOUBLE
19256: EQUAL
19257: IFTRUE 19261
19259: GO 19397
19261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19262: LD_ADDR_VAR 0 1
19266: PUSH
19267: LD_INT 2
19269: PUSH
19270: LD_INT 4
19272: PUSH
19273: LD_INT 5
19275: PUSH
19276: LD_INT 7
19278: PUSH
19279: LD_INT 11
19281: PUSH
19282: LD_INT 12
19284: PUSH
19285: LD_INT 15
19287: PUSH
19288: LD_INT 16
19290: PUSH
19291: LD_INT 20
19293: PUSH
19294: LD_INT 21
19296: PUSH
19297: LD_INT 22
19299: PUSH
19300: LD_INT 23
19302: PUSH
19303: LD_INT 25
19305: PUSH
19306: LD_INT 26
19308: PUSH
19309: LD_INT 30
19311: PUSH
19312: LD_INT 31
19314: PUSH
19315: LD_INT 32
19317: PUSH
19318: LD_INT 33
19320: PUSH
19321: LD_INT 34
19323: PUSH
19324: LD_INT 35
19326: PUSH
19327: LD_INT 36
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 101
19355: PUSH
19356: LD_INT 102
19358: PUSH
19359: LD_INT 103
19361: PUSH
19362: LD_INT 106
19364: PUSH
19365: LD_INT 108
19367: PUSH
19368: LD_INT 112
19370: PUSH
19371: LD_INT 113
19373: PUSH
19374: LD_INT 114
19376: PUSH
19377: LD_INT 115
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: ST_TO_ADDR
19395: GO 19626
19397: LD_INT 19
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19625
19405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: LD_INT 3
19419: PUSH
19420: LD_INT 4
19422: PUSH
19423: LD_INT 5
19425: PUSH
19426: LD_INT 6
19428: PUSH
19429: LD_INT 7
19431: PUSH
19432: LD_INT 8
19434: PUSH
19435: LD_INT 9
19437: PUSH
19438: LD_INT 10
19440: PUSH
19441: LD_INT 11
19443: PUSH
19444: LD_INT 12
19446: PUSH
19447: LD_INT 13
19449: PUSH
19450: LD_INT 14
19452: PUSH
19453: LD_INT 15
19455: PUSH
19456: LD_INT 16
19458: PUSH
19459: LD_INT 17
19461: PUSH
19462: LD_INT 18
19464: PUSH
19465: LD_INT 19
19467: PUSH
19468: LD_INT 20
19470: PUSH
19471: LD_INT 21
19473: PUSH
19474: LD_INT 22
19476: PUSH
19477: LD_INT 23
19479: PUSH
19480: LD_INT 24
19482: PUSH
19483: LD_INT 25
19485: PUSH
19486: LD_INT 26
19488: PUSH
19489: LD_INT 27
19491: PUSH
19492: LD_INT 28
19494: PUSH
19495: LD_INT 29
19497: PUSH
19498: LD_INT 30
19500: PUSH
19501: LD_INT 31
19503: PUSH
19504: LD_INT 32
19506: PUSH
19507: LD_INT 33
19509: PUSH
19510: LD_INT 34
19512: PUSH
19513: LD_INT 35
19515: PUSH
19516: LD_INT 36
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 101
19559: PUSH
19560: LD_INT 102
19562: PUSH
19563: LD_INT 103
19565: PUSH
19566: LD_INT 104
19568: PUSH
19569: LD_INT 105
19571: PUSH
19572: LD_INT 106
19574: PUSH
19575: LD_INT 107
19577: PUSH
19578: LD_INT 108
19580: PUSH
19581: LD_INT 109
19583: PUSH
19584: LD_INT 110
19586: PUSH
19587: LD_INT 111
19589: PUSH
19590: LD_INT 112
19592: PUSH
19593: LD_INT 113
19595: PUSH
19596: LD_INT 114
19598: PUSH
19599: LD_INT 115
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: ST_TO_ADDR
19623: GO 19626
19625: POP
// end else
19626: GO 19845
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19628: LD_ADDR_VAR 0 1
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: LD_INT 3
19641: PUSH
19642: LD_INT 4
19644: PUSH
19645: LD_INT 5
19647: PUSH
19648: LD_INT 6
19650: PUSH
19651: LD_INT 7
19653: PUSH
19654: LD_INT 8
19656: PUSH
19657: LD_INT 9
19659: PUSH
19660: LD_INT 10
19662: PUSH
19663: LD_INT 11
19665: PUSH
19666: LD_INT 12
19668: PUSH
19669: LD_INT 13
19671: PUSH
19672: LD_INT 14
19674: PUSH
19675: LD_INT 15
19677: PUSH
19678: LD_INT 16
19680: PUSH
19681: LD_INT 17
19683: PUSH
19684: LD_INT 18
19686: PUSH
19687: LD_INT 19
19689: PUSH
19690: LD_INT 20
19692: PUSH
19693: LD_INT 21
19695: PUSH
19696: LD_INT 22
19698: PUSH
19699: LD_INT 23
19701: PUSH
19702: LD_INT 24
19704: PUSH
19705: LD_INT 25
19707: PUSH
19708: LD_INT 26
19710: PUSH
19711: LD_INT 27
19713: PUSH
19714: LD_INT 28
19716: PUSH
19717: LD_INT 29
19719: PUSH
19720: LD_INT 30
19722: PUSH
19723: LD_INT 31
19725: PUSH
19726: LD_INT 32
19728: PUSH
19729: LD_INT 33
19731: PUSH
19732: LD_INT 34
19734: PUSH
19735: LD_INT 35
19737: PUSH
19738: LD_INT 36
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 101
19781: PUSH
19782: LD_INT 102
19784: PUSH
19785: LD_INT 103
19787: PUSH
19788: LD_INT 104
19790: PUSH
19791: LD_INT 105
19793: PUSH
19794: LD_INT 106
19796: PUSH
19797: LD_INT 107
19799: PUSH
19800: LD_INT 108
19802: PUSH
19803: LD_INT 109
19805: PUSH
19806: LD_INT 110
19808: PUSH
19809: LD_INT 111
19811: PUSH
19812: LD_INT 112
19814: PUSH
19815: LD_INT 113
19817: PUSH
19818: LD_INT 114
19820: PUSH
19821: LD_INT 115
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: ST_TO_ADDR
// if result then
19845: LD_VAR 0 1
19849: IFFALSE 20138
// begin normal :=  ;
19851: LD_ADDR_VAR 0 3
19855: PUSH
19856: LD_STRING 
19858: ST_TO_ADDR
// hardcore :=  ;
19859: LD_ADDR_VAR 0 4
19863: PUSH
19864: LD_STRING 
19866: ST_TO_ADDR
// for i = 1 to normalCounter do
19867: LD_ADDR_VAR 0 5
19871: PUSH
19872: DOUBLE
19873: LD_INT 1
19875: DEC
19876: ST_TO_ADDR
19877: LD_EXP 55
19881: PUSH
19882: FOR_TO
19883: IFFALSE 19984
// begin tmp := 0 ;
19885: LD_ADDR_VAR 0 2
19889: PUSH
19890: LD_STRING 0
19892: ST_TO_ADDR
// if result [ 1 ] then
19893: LD_VAR 0 1
19897: PUSH
19898: LD_INT 1
19900: ARRAY
19901: IFFALSE 19966
// if result [ 1 ] [ 1 ] = i then
19903: LD_VAR 0 1
19907: PUSH
19908: LD_INT 1
19910: ARRAY
19911: PUSH
19912: LD_INT 1
19914: ARRAY
19915: PUSH
19916: LD_VAR 0 5
19920: EQUAL
19921: IFFALSE 19966
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19923: LD_ADDR_VAR 0 1
19927: PUSH
19928: LD_VAR 0 1
19932: PPUSH
19933: LD_INT 1
19935: PPUSH
19936: LD_VAR 0 1
19940: PUSH
19941: LD_INT 1
19943: ARRAY
19944: PPUSH
19945: LD_INT 1
19947: PPUSH
19948: CALL_OW 3
19952: PPUSH
19953: CALL_OW 1
19957: ST_TO_ADDR
// tmp := 1 ;
19958: LD_ADDR_VAR 0 2
19962: PUSH
19963: LD_STRING 1
19965: ST_TO_ADDR
// end ; normal := normal & tmp ;
19966: LD_ADDR_VAR 0 3
19970: PUSH
19971: LD_VAR 0 3
19975: PUSH
19976: LD_VAR 0 2
19980: STR
19981: ST_TO_ADDR
// end ;
19982: GO 19882
19984: POP
19985: POP
// for i = 1 to hardcoreCounter do
19986: LD_ADDR_VAR 0 5
19990: PUSH
19991: DOUBLE
19992: LD_INT 1
19994: DEC
19995: ST_TO_ADDR
19996: LD_EXP 56
20000: PUSH
20001: FOR_TO
20002: IFFALSE 20107
// begin tmp := 0 ;
20004: LD_ADDR_VAR 0 2
20008: PUSH
20009: LD_STRING 0
20011: ST_TO_ADDR
// if result [ 2 ] then
20012: LD_VAR 0 1
20016: PUSH
20017: LD_INT 2
20019: ARRAY
20020: IFFALSE 20089
// if result [ 2 ] [ 1 ] = 100 + i then
20022: LD_VAR 0 1
20026: PUSH
20027: LD_INT 2
20029: ARRAY
20030: PUSH
20031: LD_INT 1
20033: ARRAY
20034: PUSH
20035: LD_INT 100
20037: PUSH
20038: LD_VAR 0 5
20042: PLUS
20043: EQUAL
20044: IFFALSE 20089
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: LD_INT 2
20058: PPUSH
20059: LD_VAR 0 1
20063: PUSH
20064: LD_INT 2
20066: ARRAY
20067: PPUSH
20068: LD_INT 1
20070: PPUSH
20071: CALL_OW 3
20075: PPUSH
20076: CALL_OW 1
20080: ST_TO_ADDR
// tmp := 1 ;
20081: LD_ADDR_VAR 0 2
20085: PUSH
20086: LD_STRING 1
20088: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20089: LD_ADDR_VAR 0 4
20093: PUSH
20094: LD_VAR 0 4
20098: PUSH
20099: LD_VAR 0 2
20103: STR
20104: ST_TO_ADDR
// end ;
20105: GO 20001
20107: POP
20108: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20109: LD_STRING getStreamItemsFromMission("
20111: PUSH
20112: LD_VAR 0 3
20116: STR
20117: PUSH
20118: LD_STRING ","
20120: STR
20121: PUSH
20122: LD_VAR 0 4
20126: STR
20127: PUSH
20128: LD_STRING ")
20130: STR
20131: PPUSH
20132: CALL_OW 559
// end else
20136: GO 20145
// ToLua ( getStreamItemsFromMission("","") ) ;
20138: LD_STRING getStreamItemsFromMission("","")
20140: PPUSH
20141: CALL_OW 559
// end ;
20145: LD_VAR 0 1
20149: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20150: LD_EXP 54
20154: PUSH
20155: LD_EXP 59
20159: AND
20160: IFFALSE 20284
20162: GO 20164
20164: DISABLE
20165: LD_INT 0
20167: PPUSH
20168: PPUSH
// begin enable ;
20169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20170: LD_ADDR_VAR 0 2
20174: PUSH
20175: LD_INT 22
20177: PUSH
20178: LD_OWVAR 2
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 2
20189: PUSH
20190: LD_INT 34
20192: PUSH
20193: LD_INT 7
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 34
20202: PUSH
20203: LD_INT 45
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 34
20212: PUSH
20213: LD_INT 28
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 34
20222: PUSH
20223: LD_INT 47
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 69
20245: ST_TO_ADDR
// if not tmp then
20246: LD_VAR 0 2
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 20284
// for i in tmp do
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_VAR 0 2
20264: PUSH
20265: FOR_IN
20266: IFFALSE 20282
// begin SetLives ( i , 0 ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_INT 0
20275: PPUSH
20276: CALL_OW 234
// end ;
20280: GO 20265
20282: POP
20283: POP
// end ;
20284: PPOPN 2
20286: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20287: LD_EXP 54
20291: PUSH
20292: LD_EXP 60
20296: AND
20297: IFFALSE 20381
20299: GO 20301
20301: DISABLE
20302: LD_INT 0
20304: PPUSH
20305: PPUSH
// begin enable ;
20306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20307: LD_ADDR_VAR 0 2
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_OWVAR 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 32
20326: PUSH
20327: LD_INT 3
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 69
20342: ST_TO_ADDR
// if not tmp then
20343: LD_VAR 0 2
20347: NOT
20348: IFFALSE 20352
// exit ;
20350: GO 20381
// for i in tmp do
20352: LD_ADDR_VAR 0 1
20356: PUSH
20357: LD_VAR 0 2
20361: PUSH
20362: FOR_IN
20363: IFFALSE 20379
// begin SetLives ( i , 0 ) ;
20365: LD_VAR 0 1
20369: PPUSH
20370: LD_INT 0
20372: PPUSH
20373: CALL_OW 234
// end ;
20377: GO 20362
20379: POP
20380: POP
// end ;
20381: PPOPN 2
20383: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20384: LD_EXP 54
20388: PUSH
20389: LD_EXP 57
20393: AND
20394: IFFALSE 20487
20396: GO 20398
20398: DISABLE
20399: LD_INT 0
20401: PPUSH
// begin enable ;
20402: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: LD_INT 22
20410: PUSH
20411: LD_OWVAR 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: LD_INT 25
20425: PUSH
20426: LD_INT 5
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 25
20435: PUSH
20436: LD_INT 9
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 8
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: PUSH
20468: FOR_IN
20469: IFFALSE 20485
// begin SetClass ( i , 1 ) ;
20471: LD_VAR 0 1
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: CALL_OW 336
// end ;
20483: GO 20468
20485: POP
20486: POP
// end ;
20487: PPOPN 1
20489: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20490: LD_EXP 54
20494: PUSH
20495: LD_EXP 58
20499: AND
20500: PUSH
20501: LD_OWVAR 65
20505: PUSH
20506: LD_INT 7
20508: LESS
20509: AND
20510: IFFALSE 20524
20512: GO 20514
20514: DISABLE
// begin enable ;
20515: ENABLE
// game_speed := 7 ;
20516: LD_ADDR_OWVAR 65
20520: PUSH
20521: LD_INT 7
20523: ST_TO_ADDR
// end ;
20524: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20525: LD_EXP 54
20529: PUSH
20530: LD_EXP 61
20534: AND
20535: IFFALSE 20737
20537: GO 20539
20539: DISABLE
20540: LD_INT 0
20542: PPUSH
20543: PPUSH
20544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 81
20552: PUSH
20553: LD_OWVAR 2
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 21
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PPUSH
20576: CALL_OW 69
20580: ST_TO_ADDR
// if not tmp then
20581: LD_VAR 0 3
20585: NOT
20586: IFFALSE 20590
// exit ;
20588: GO 20737
// if tmp > 5 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 5
20597: GREATER
20598: IFFALSE 20610
// k := 5 else
20600: LD_ADDR_VAR 0 2
20604: PUSH
20605: LD_INT 5
20607: ST_TO_ADDR
20608: GO 20620
// k := tmp ;
20610: LD_ADDR_VAR 0 2
20614: PUSH
20615: LD_VAR 0 3
20619: ST_TO_ADDR
// for i := 1 to k do
20620: LD_ADDR_VAR 0 1
20624: PUSH
20625: DOUBLE
20626: LD_INT 1
20628: DEC
20629: ST_TO_ADDR
20630: LD_VAR 0 2
20634: PUSH
20635: FOR_TO
20636: IFFALSE 20735
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20638: LD_VAR 0 3
20642: PUSH
20643: LD_VAR 0 1
20647: ARRAY
20648: PPUSH
20649: LD_VAR 0 1
20653: PUSH
20654: LD_INT 4
20656: MOD
20657: PUSH
20658: LD_INT 1
20660: PLUS
20661: PPUSH
20662: CALL_OW 259
20666: PUSH
20667: LD_INT 10
20669: LESS
20670: IFFALSE 20733
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20672: LD_VAR 0 3
20676: PUSH
20677: LD_VAR 0 1
20681: ARRAY
20682: PPUSH
20683: LD_VAR 0 1
20687: PUSH
20688: LD_INT 4
20690: MOD
20691: PUSH
20692: LD_INT 1
20694: PLUS
20695: PPUSH
20696: LD_VAR 0 3
20700: PUSH
20701: LD_VAR 0 1
20705: ARRAY
20706: PPUSH
20707: LD_VAR 0 1
20711: PUSH
20712: LD_INT 4
20714: MOD
20715: PUSH
20716: LD_INT 1
20718: PLUS
20719: PPUSH
20720: CALL_OW 259
20724: PUSH
20725: LD_INT 1
20727: PLUS
20728: PPUSH
20729: CALL_OW 237
20733: GO 20635
20735: POP
20736: POP
// end ;
20737: PPOPN 3
20739: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20740: LD_EXP 54
20744: PUSH
20745: LD_EXP 62
20749: AND
20750: IFFALSE 20770
20752: GO 20754
20754: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20755: LD_INT 4
20757: PPUSH
20758: LD_OWVAR 2
20762: PPUSH
20763: LD_INT 0
20765: PPUSH
20766: CALL_OW 324
20770: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20771: LD_EXP 54
20775: PUSH
20776: LD_EXP 91
20780: AND
20781: IFFALSE 20801
20783: GO 20785
20785: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20786: LD_INT 19
20788: PPUSH
20789: LD_OWVAR 2
20793: PPUSH
20794: LD_INT 0
20796: PPUSH
20797: CALL_OW 324
20801: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20802: LD_EXP 54
20806: PUSH
20807: LD_EXP 63
20811: AND
20812: IFFALSE 20914
20814: GO 20816
20816: DISABLE
20817: LD_INT 0
20819: PPUSH
20820: PPUSH
// begin enable ;
20821: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20822: LD_ADDR_VAR 0 2
20826: PUSH
20827: LD_INT 22
20829: PUSH
20830: LD_OWVAR 2
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 34
20844: PUSH
20845: LD_INT 11
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 34
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PPUSH
20871: CALL_OW 69
20875: ST_TO_ADDR
// if not tmp then
20876: LD_VAR 0 2
20880: NOT
20881: IFFALSE 20885
// exit ;
20883: GO 20914
// for i in tmp do
20885: LD_ADDR_VAR 0 1
20889: PUSH
20890: LD_VAR 0 2
20894: PUSH
20895: FOR_IN
20896: IFFALSE 20912
// begin SetLives ( i , 0 ) ;
20898: LD_VAR 0 1
20902: PPUSH
20903: LD_INT 0
20905: PPUSH
20906: CALL_OW 234
// end ;
20910: GO 20895
20912: POP
20913: POP
// end ;
20914: PPOPN 2
20916: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20917: LD_EXP 54
20921: PUSH
20922: LD_EXP 64
20926: AND
20927: IFFALSE 20947
20929: GO 20931
20931: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20932: LD_INT 32
20934: PPUSH
20935: LD_OWVAR 2
20939: PPUSH
20940: LD_INT 0
20942: PPUSH
20943: CALL_OW 324
20947: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20948: LD_EXP 54
20952: PUSH
20953: LD_EXP 65
20957: AND
20958: IFFALSE 21139
20960: GO 20962
20962: DISABLE
20963: LD_INT 0
20965: PPUSH
20966: PPUSH
20967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20968: LD_ADDR_VAR 0 2
20972: PUSH
20973: LD_INT 22
20975: PUSH
20976: LD_OWVAR 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 33
20987: PUSH
20988: LD_INT 3
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PPUSH
20999: CALL_OW 69
21003: ST_TO_ADDR
// if not tmp then
21004: LD_VAR 0 2
21008: NOT
21009: IFFALSE 21013
// exit ;
21011: GO 21139
// side := 0 ;
21013: LD_ADDR_VAR 0 3
21017: PUSH
21018: LD_INT 0
21020: ST_TO_ADDR
// for i := 1 to 8 do
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: DOUBLE
21027: LD_INT 1
21029: DEC
21030: ST_TO_ADDR
21031: LD_INT 8
21033: PUSH
21034: FOR_TO
21035: IFFALSE 21083
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21037: LD_OWVAR 2
21041: PUSH
21042: LD_VAR 0 1
21046: NONEQUAL
21047: PUSH
21048: LD_OWVAR 2
21052: PPUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 81
21062: PUSH
21063: LD_INT 2
21065: EQUAL
21066: AND
21067: IFFALSE 21081
// begin side := i ;
21069: LD_ADDR_VAR 0 3
21073: PUSH
21074: LD_VAR 0 1
21078: ST_TO_ADDR
// break ;
21079: GO 21083
// end ;
21081: GO 21034
21083: POP
21084: POP
// if not side then
21085: LD_VAR 0 3
21089: NOT
21090: IFFALSE 21094
// exit ;
21092: GO 21139
// for i := 1 to tmp do
21094: LD_ADDR_VAR 0 1
21098: PUSH
21099: DOUBLE
21100: LD_INT 1
21102: DEC
21103: ST_TO_ADDR
21104: LD_VAR 0 2
21108: PUSH
21109: FOR_TO
21110: IFFALSE 21137
// if Prob ( 60 ) then
21112: LD_INT 60
21114: PPUSH
21115: CALL_OW 13
21119: IFFALSE 21135
// SetSide ( i , side ) ;
21121: LD_VAR 0 1
21125: PPUSH
21126: LD_VAR 0 3
21130: PPUSH
21131: CALL_OW 235
21135: GO 21109
21137: POP
21138: POP
// end ;
21139: PPOPN 3
21141: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21142: LD_EXP 54
21146: PUSH
21147: LD_EXP 67
21151: AND
21152: IFFALSE 21271
21154: GO 21156
21156: DISABLE
21157: LD_INT 0
21159: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21160: LD_ADDR_VAR 0 1
21164: PUSH
21165: LD_INT 22
21167: PUSH
21168: LD_OWVAR 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 3
21189: PUSH
21190: LD_INT 23
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 69
21213: PUSH
21214: FOR_IN
21215: IFFALSE 21269
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21217: LD_VAR 0 1
21221: PPUSH
21222: CALL_OW 257
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 3
21235: PUSH
21236: LD_INT 4
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: IN
21245: IFFALSE 21267
// SetClass ( un , rand ( 1 , 4 ) ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_INT 1
21254: PPUSH
21255: LD_INT 4
21257: PPUSH
21258: CALL_OW 12
21262: PPUSH
21263: CALL_OW 336
21267: GO 21214
21269: POP
21270: POP
// end ;
21271: PPOPN 1
21273: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21274: LD_EXP 54
21278: PUSH
21279: LD_EXP 66
21283: AND
21284: IFFALSE 21363
21286: GO 21288
21288: DISABLE
21289: LD_INT 0
21291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21292: LD_ADDR_VAR 0 1
21296: PUSH
21297: LD_INT 22
21299: PUSH
21300: LD_OWVAR 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 3
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PPUSH
21323: CALL_OW 69
21327: ST_TO_ADDR
// if not tmp then
21328: LD_VAR 0 1
21332: NOT
21333: IFFALSE 21337
// exit ;
21335: GO 21363
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21337: LD_VAR 0 1
21341: PUSH
21342: LD_INT 1
21344: PPUSH
21345: LD_VAR 0 1
21349: PPUSH
21350: CALL_OW 12
21354: ARRAY
21355: PPUSH
21356: LD_INT 100
21358: PPUSH
21359: CALL_OW 234
// end ;
21363: PPOPN 1
21365: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21366: LD_EXP 54
21370: PUSH
21371: LD_EXP 68
21375: AND
21376: IFFALSE 21474
21378: GO 21380
21380: DISABLE
21381: LD_INT 0
21383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21384: LD_ADDR_VAR 0 1
21388: PUSH
21389: LD_INT 22
21391: PUSH
21392: LD_OWVAR 2
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 21
21403: PUSH
21404: LD_INT 1
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PPUSH
21415: CALL_OW 69
21419: ST_TO_ADDR
// if not tmp then
21420: LD_VAR 0 1
21424: NOT
21425: IFFALSE 21429
// exit ;
21427: GO 21474
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21429: LD_VAR 0 1
21433: PUSH
21434: LD_INT 1
21436: PPUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 12
21446: ARRAY
21447: PPUSH
21448: LD_INT 1
21450: PPUSH
21451: LD_INT 4
21453: PPUSH
21454: CALL_OW 12
21458: PPUSH
21459: LD_INT 3000
21461: PPUSH
21462: LD_INT 9000
21464: PPUSH
21465: CALL_OW 12
21469: PPUSH
21470: CALL_OW 492
// end ;
21474: PPOPN 1
21476: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21477: LD_EXP 54
21481: PUSH
21482: LD_EXP 69
21486: AND
21487: IFFALSE 21507
21489: GO 21491
21491: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21492: LD_INT 1
21494: PPUSH
21495: LD_OWVAR 2
21499: PPUSH
21500: LD_INT 0
21502: PPUSH
21503: CALL_OW 324
21507: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21508: LD_EXP 54
21512: PUSH
21513: LD_EXP 70
21517: AND
21518: IFFALSE 21601
21520: GO 21522
21522: DISABLE
21523: LD_INT 0
21525: PPUSH
21526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21527: LD_ADDR_VAR 0 2
21531: PUSH
21532: LD_INT 22
21534: PUSH
21535: LD_OWVAR 2
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 21
21546: PUSH
21547: LD_INT 3
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 69
21562: ST_TO_ADDR
// if not tmp then
21563: LD_VAR 0 2
21567: NOT
21568: IFFALSE 21572
// exit ;
21570: GO 21601
// for i in tmp do
21572: LD_ADDR_VAR 0 1
21576: PUSH
21577: LD_VAR 0 2
21581: PUSH
21582: FOR_IN
21583: IFFALSE 21599
// SetBLevel ( i , 10 ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_INT 10
21592: PPUSH
21593: CALL_OW 241
21597: GO 21582
21599: POP
21600: POP
// end ;
21601: PPOPN 2
21603: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21604: LD_EXP 54
21608: PUSH
21609: LD_EXP 71
21613: AND
21614: IFFALSE 21725
21616: GO 21618
21618: DISABLE
21619: LD_INT 0
21621: PPUSH
21622: PPUSH
21623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21624: LD_ADDR_VAR 0 3
21628: PUSH
21629: LD_INT 22
21631: PUSH
21632: LD_OWVAR 2
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 25
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PPUSH
21655: CALL_OW 69
21659: ST_TO_ADDR
// if not tmp then
21660: LD_VAR 0 3
21664: NOT
21665: IFFALSE 21669
// exit ;
21667: GO 21725
// un := tmp [ rand ( 1 , tmp ) ] ;
21669: LD_ADDR_VAR 0 2
21673: PUSH
21674: LD_VAR 0 3
21678: PUSH
21679: LD_INT 1
21681: PPUSH
21682: LD_VAR 0 3
21686: PPUSH
21687: CALL_OW 12
21691: ARRAY
21692: ST_TO_ADDR
// if Crawls ( un ) then
21693: LD_VAR 0 2
21697: PPUSH
21698: CALL_OW 318
21702: IFFALSE 21713
// ComWalk ( un ) ;
21704: LD_VAR 0 2
21708: PPUSH
21709: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21713: LD_VAR 0 2
21717: PPUSH
21718: LD_INT 5
21720: PPUSH
21721: CALL_OW 336
// end ;
21725: PPOPN 3
21727: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21728: LD_EXP 54
21732: PUSH
21733: LD_EXP 72
21737: AND
21738: PUSH
21739: LD_OWVAR 67
21743: PUSH
21744: LD_INT 3
21746: LESS
21747: AND
21748: IFFALSE 21767
21750: GO 21752
21752: DISABLE
// Difficulty := Difficulty + 1 ;
21753: LD_ADDR_OWVAR 67
21757: PUSH
21758: LD_OWVAR 67
21762: PUSH
21763: LD_INT 1
21765: PLUS
21766: ST_TO_ADDR
21767: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21768: LD_EXP 54
21772: PUSH
21773: LD_EXP 73
21777: AND
21778: IFFALSE 21881
21780: GO 21782
21782: DISABLE
21783: LD_INT 0
21785: PPUSH
// begin for i := 1 to 5 do
21786: LD_ADDR_VAR 0 1
21790: PUSH
21791: DOUBLE
21792: LD_INT 1
21794: DEC
21795: ST_TO_ADDR
21796: LD_INT 5
21798: PUSH
21799: FOR_TO
21800: IFFALSE 21879
// begin uc_nation := nation_nature ;
21802: LD_ADDR_OWVAR 21
21806: PUSH
21807: LD_INT 0
21809: ST_TO_ADDR
// uc_side := 0 ;
21810: LD_ADDR_OWVAR 20
21814: PUSH
21815: LD_INT 0
21817: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21818: LD_ADDR_OWVAR 29
21822: PUSH
21823: LD_INT 12
21825: PUSH
21826: LD_INT 12
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: ST_TO_ADDR
// hc_agressivity := 20 ;
21833: LD_ADDR_OWVAR 35
21837: PUSH
21838: LD_INT 20
21840: ST_TO_ADDR
// hc_class := class_tiger ;
21841: LD_ADDR_OWVAR 28
21845: PUSH
21846: LD_INT 14
21848: ST_TO_ADDR
// hc_gallery :=  ;
21849: LD_ADDR_OWVAR 33
21853: PUSH
21854: LD_STRING 
21856: ST_TO_ADDR
// hc_name :=  ;
21857: LD_ADDR_OWVAR 26
21861: PUSH
21862: LD_STRING 
21864: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21865: CALL_OW 44
21869: PPUSH
21870: LD_INT 0
21872: PPUSH
21873: CALL_OW 51
// end ;
21877: GO 21799
21879: POP
21880: POP
// end ;
21881: PPOPN 1
21883: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21884: LD_EXP 54
21888: PUSH
21889: LD_EXP 74
21893: AND
21894: IFFALSE 21903
21896: GO 21898
21898: DISABLE
// StreamSibBomb ;
21899: CALL 21904 0 0
21903: END
// export function StreamSibBomb ; var i , x , y ; begin
21904: LD_INT 0
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
// result := false ;
21910: LD_ADDR_VAR 0 1
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// for i := 1 to 16 do
21918: LD_ADDR_VAR 0 2
21922: PUSH
21923: DOUBLE
21924: LD_INT 1
21926: DEC
21927: ST_TO_ADDR
21928: LD_INT 16
21930: PUSH
21931: FOR_TO
21932: IFFALSE 22131
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21934: LD_ADDR_VAR 0 3
21938: PUSH
21939: LD_INT 10
21941: PUSH
21942: LD_INT 20
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 40
21950: PUSH
21951: LD_INT 50
21953: PUSH
21954: LD_INT 60
21956: PUSH
21957: LD_INT 70
21959: PUSH
21960: LD_INT 80
21962: PUSH
21963: LD_INT 90
21965: PUSH
21966: LD_INT 100
21968: PUSH
21969: LD_INT 110
21971: PUSH
21972: LD_INT 120
21974: PUSH
21975: LD_INT 130
21977: PUSH
21978: LD_INT 140
21980: PUSH
21981: LD_INT 150
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PPUSH
22004: LD_INT 15
22006: PPUSH
22007: CALL_OW 12
22011: ARRAY
22012: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22013: LD_ADDR_VAR 0 4
22017: PUSH
22018: LD_INT 10
22020: PUSH
22021: LD_INT 20
22023: PUSH
22024: LD_INT 30
22026: PUSH
22027: LD_INT 40
22029: PUSH
22030: LD_INT 50
22032: PUSH
22033: LD_INT 60
22035: PUSH
22036: LD_INT 70
22038: PUSH
22039: LD_INT 80
22041: PUSH
22042: LD_INT 90
22044: PUSH
22045: LD_INT 100
22047: PUSH
22048: LD_INT 110
22050: PUSH
22051: LD_INT 120
22053: PUSH
22054: LD_INT 130
22056: PUSH
22057: LD_INT 140
22059: PUSH
22060: LD_INT 150
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: PPUSH
22083: LD_INT 15
22085: PPUSH
22086: CALL_OW 12
22090: ARRAY
22091: ST_TO_ADDR
// if ValidHex ( x , y ) then
22092: LD_VAR 0 3
22096: PPUSH
22097: LD_VAR 0 4
22101: PPUSH
22102: CALL_OW 488
22106: IFFALSE 22129
// begin result := [ x , y ] ;
22108: LD_ADDR_VAR 0 1
22112: PUSH
22113: LD_VAR 0 3
22117: PUSH
22118: LD_VAR 0 4
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: ST_TO_ADDR
// break ;
22127: GO 22131
// end ; end ;
22129: GO 21931
22131: POP
22132: POP
// if result then
22133: LD_VAR 0 1
22137: IFFALSE 22197
// begin ToLua ( playSibBomb() ) ;
22139: LD_STRING playSibBomb()
22141: PPUSH
22142: CALL_OW 559
// wait ( 0 0$14 ) ;
22146: LD_INT 490
22148: PPUSH
22149: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22153: LD_VAR 0 1
22157: PUSH
22158: LD_INT 1
22160: ARRAY
22161: PPUSH
22162: LD_VAR 0 1
22166: PUSH
22167: LD_INT 2
22169: ARRAY
22170: PPUSH
22171: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22175: LD_VAR 0 1
22179: PUSH
22180: LD_INT 1
22182: ARRAY
22183: PPUSH
22184: LD_VAR 0 1
22188: PUSH
22189: LD_INT 2
22191: ARRAY
22192: PPUSH
22193: CALL_OW 429
// end ; end ;
22197: LD_VAR 0 1
22201: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22202: LD_EXP 54
22206: PUSH
22207: LD_EXP 76
22211: AND
22212: IFFALSE 22224
22214: GO 22216
22216: DISABLE
// YouLost (  ) ;
22217: LD_STRING 
22219: PPUSH
22220: CALL_OW 104
22224: END
// every 0 0$1 trigger StreamModeActive and sFog do
22225: LD_EXP 54
22229: PUSH
22230: LD_EXP 75
22234: AND
22235: IFFALSE 22249
22237: GO 22239
22239: DISABLE
// FogOff ( your_side ) ;
22240: LD_OWVAR 2
22244: PPUSH
22245: CALL_OW 344
22249: END
// every 0 0$1 trigger StreamModeActive and sSun do
22250: LD_EXP 54
22254: PUSH
22255: LD_EXP 77
22259: AND
22260: IFFALSE 22288
22262: GO 22264
22264: DISABLE
// begin solar_recharge_percent := 0 ;
22265: LD_ADDR_OWVAR 79
22269: PUSH
22270: LD_INT 0
22272: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22273: LD_INT 10500
22275: PPUSH
22276: CALL_OW 67
// solar_recharge_percent := 100 ;
22280: LD_ADDR_OWVAR 79
22284: PUSH
22285: LD_INT 100
22287: ST_TO_ADDR
// end ;
22288: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22289: LD_EXP 54
22293: PUSH
22294: LD_EXP 78
22298: AND
22299: IFFALSE 22538
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
22308: PPUSH
// begin tmp := [ ] ;
22309: LD_ADDR_VAR 0 3
22313: PUSH
22314: EMPTY
22315: ST_TO_ADDR
// for i := 1 to 6 do
22316: LD_ADDR_VAR 0 1
22320: PUSH
22321: DOUBLE
22322: LD_INT 1
22324: DEC
22325: ST_TO_ADDR
22326: LD_INT 6
22328: PUSH
22329: FOR_TO
22330: IFFALSE 22435
// begin uc_nation := nation_nature ;
22332: LD_ADDR_OWVAR 21
22336: PUSH
22337: LD_INT 0
22339: ST_TO_ADDR
// uc_side := 0 ;
22340: LD_ADDR_OWVAR 20
22344: PUSH
22345: LD_INT 0
22347: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22348: LD_ADDR_OWVAR 29
22352: PUSH
22353: LD_INT 12
22355: PUSH
22356: LD_INT 12
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: ST_TO_ADDR
// hc_agressivity := 20 ;
22363: LD_ADDR_OWVAR 35
22367: PUSH
22368: LD_INT 20
22370: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22371: LD_ADDR_OWVAR 28
22375: PUSH
22376: LD_INT 17
22378: ST_TO_ADDR
// hc_gallery :=  ;
22379: LD_ADDR_OWVAR 33
22383: PUSH
22384: LD_STRING 
22386: ST_TO_ADDR
// hc_name :=  ;
22387: LD_ADDR_OWVAR 26
22391: PUSH
22392: LD_STRING 
22394: ST_TO_ADDR
// un := CreateHuman ;
22395: LD_ADDR_VAR 0 2
22399: PUSH
22400: CALL_OW 44
22404: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22405: LD_VAR 0 2
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL_OW 51
// tmp := tmp ^ un ;
22417: LD_ADDR_VAR 0 3
22421: PUSH
22422: LD_VAR 0 3
22426: PUSH
22427: LD_VAR 0 2
22431: ADD
22432: ST_TO_ADDR
// end ;
22433: GO 22329
22435: POP
22436: POP
// repeat wait ( 0 0$1 ) ;
22437: LD_INT 35
22439: PPUSH
22440: CALL_OW 67
// for un in tmp do
22444: LD_ADDR_VAR 0 2
22448: PUSH
22449: LD_VAR 0 3
22453: PUSH
22454: FOR_IN
22455: IFFALSE 22529
// begin if IsDead ( un ) then
22457: LD_VAR 0 2
22461: PPUSH
22462: CALL_OW 301
22466: IFFALSE 22486
// begin tmp := tmp diff un ;
22468: LD_ADDR_VAR 0 3
22472: PUSH
22473: LD_VAR 0 3
22477: PUSH
22478: LD_VAR 0 2
22482: DIFF
22483: ST_TO_ADDR
// continue ;
22484: GO 22454
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22486: LD_VAR 0 2
22490: PPUSH
22491: LD_INT 3
22493: PUSH
22494: LD_INT 22
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PPUSH
22508: CALL_OW 69
22512: PPUSH
22513: LD_VAR 0 2
22517: PPUSH
22518: CALL_OW 74
22522: PPUSH
22523: CALL_OW 115
// end ;
22527: GO 22454
22529: POP
22530: POP
// until not tmp ;
22531: LD_VAR 0 3
22535: NOT
22536: IFFALSE 22437
// end ;
22538: PPOPN 3
22540: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22541: LD_EXP 54
22545: PUSH
22546: LD_EXP 79
22550: AND
22551: IFFALSE 22605
22553: GO 22555
22555: DISABLE
// begin ToLua ( displayTroll(); ) ;
22556: LD_STRING displayTroll();
22558: PPUSH
22559: CALL_OW 559
// wait ( 3 3$00 ) ;
22563: LD_INT 6300
22565: PPUSH
22566: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22570: LD_STRING hideTroll();
22572: PPUSH
22573: CALL_OW 559
// wait ( 1 1$00 ) ;
22577: LD_INT 2100
22579: PPUSH
22580: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22584: LD_STRING displayTroll();
22586: PPUSH
22587: CALL_OW 559
// wait ( 1 1$00 ) ;
22591: LD_INT 2100
22593: PPUSH
22594: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22598: LD_STRING hideTroll();
22600: PPUSH
22601: CALL_OW 559
// end ;
22605: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22606: LD_EXP 54
22610: PUSH
22611: LD_EXP 80
22615: AND
22616: IFFALSE 22679
22618: GO 22620
22620: DISABLE
22621: LD_INT 0
22623: PPUSH
// begin p := 0 ;
22624: LD_ADDR_VAR 0 1
22628: PUSH
22629: LD_INT 0
22631: ST_TO_ADDR
// repeat game_speed := 1 ;
22632: LD_ADDR_OWVAR 65
22636: PUSH
22637: LD_INT 1
22639: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22640: LD_INT 35
22642: PPUSH
22643: CALL_OW 67
// p := p + 1 ;
22647: LD_ADDR_VAR 0 1
22651: PUSH
22652: LD_VAR 0 1
22656: PUSH
22657: LD_INT 1
22659: PLUS
22660: ST_TO_ADDR
// until p >= 60 ;
22661: LD_VAR 0 1
22665: PUSH
22666: LD_INT 60
22668: GREATEREQUAL
22669: IFFALSE 22632
// game_speed := 4 ;
22671: LD_ADDR_OWVAR 65
22675: PUSH
22676: LD_INT 4
22678: ST_TO_ADDR
// end ;
22679: PPOPN 1
22681: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22682: LD_EXP 54
22686: PUSH
22687: LD_EXP 81
22691: AND
22692: IFFALSE 22838
22694: GO 22696
22696: DISABLE
22697: LD_INT 0
22699: PPUSH
22700: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22701: LD_ADDR_VAR 0 1
22705: PUSH
22706: LD_INT 22
22708: PUSH
22709: LD_OWVAR 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: LD_INT 30
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 30
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PPUSH
22750: CALL_OW 69
22754: ST_TO_ADDR
// if not depot then
22755: LD_VAR 0 1
22759: NOT
22760: IFFALSE 22764
// exit ;
22762: GO 22838
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22764: LD_ADDR_VAR 0 2
22768: PUSH
22769: LD_VAR 0 1
22773: PUSH
22774: LD_INT 1
22776: PPUSH
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 12
22786: ARRAY
22787: PPUSH
22788: CALL_OW 274
22792: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22793: LD_VAR 0 2
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: LD_INT 0
22803: PPUSH
22804: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22808: LD_VAR 0 2
22812: PPUSH
22813: LD_INT 2
22815: PPUSH
22816: LD_INT 0
22818: PPUSH
22819: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22823: LD_VAR 0 2
22827: PPUSH
22828: LD_INT 3
22830: PPUSH
22831: LD_INT 0
22833: PPUSH
22834: CALL_OW 277
// end ;
22838: PPOPN 2
22840: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22841: LD_EXP 54
22845: PUSH
22846: LD_EXP 82
22850: AND
22851: IFFALSE 22948
22853: GO 22855
22855: DISABLE
22856: LD_INT 0
22858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22859: LD_ADDR_VAR 0 1
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_OWVAR 2
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 21
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: LD_INT 23
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 69
22912: ST_TO_ADDR
// if not tmp then
22913: LD_VAR 0 1
22917: NOT
22918: IFFALSE 22922
// exit ;
22920: GO 22948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22922: LD_VAR 0 1
22926: PUSH
22927: LD_INT 1
22929: PPUSH
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 12
22939: ARRAY
22940: PPUSH
22941: LD_INT 200
22943: PPUSH
22944: CALL_OW 234
// end ;
22948: PPOPN 1
22950: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22951: LD_EXP 54
22955: PUSH
22956: LD_EXP 83
22960: AND
22961: IFFALSE 23040
22963: GO 22965
22965: DISABLE
22966: LD_INT 0
22968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22969: LD_ADDR_VAR 0 1
22973: PUSH
22974: LD_INT 22
22976: PUSH
22977: LD_OWVAR 2
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 21
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PPUSH
23000: CALL_OW 69
23004: ST_TO_ADDR
// if not tmp then
23005: LD_VAR 0 1
23009: NOT
23010: IFFALSE 23014
// exit ;
23012: GO 23040
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23014: LD_VAR 0 1
23018: PUSH
23019: LD_INT 1
23021: PPUSH
23022: LD_VAR 0 1
23026: PPUSH
23027: CALL_OW 12
23031: ARRAY
23032: PPUSH
23033: LD_INT 60
23035: PPUSH
23036: CALL_OW 234
// end ;
23040: PPOPN 1
23042: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23043: LD_EXP 54
23047: PUSH
23048: LD_EXP 84
23052: AND
23053: IFFALSE 23152
23055: GO 23057
23057: DISABLE
23058: LD_INT 0
23060: PPUSH
23061: PPUSH
// begin enable ;
23062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_INT 22
23070: PUSH
23071: LD_OWVAR 2
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 61
23082: PUSH
23083: EMPTY
23084: LIST
23085: PUSH
23086: LD_INT 33
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 1
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23152
// for i in tmp do
23115: LD_ADDR_VAR 0 2
23119: PUSH
23120: LD_VAR 0 1
23124: PUSH
23125: FOR_IN
23126: IFFALSE 23150
// if IsControledBy ( i ) then
23128: LD_VAR 0 2
23132: PPUSH
23133: CALL_OW 312
23137: IFFALSE 23148
// ComUnlink ( i ) ;
23139: LD_VAR 0 2
23143: PPUSH
23144: CALL_OW 136
23148: GO 23125
23150: POP
23151: POP
// end ;
23152: PPOPN 2
23154: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23155: LD_EXP 54
23159: PUSH
23160: LD_EXP 85
23164: AND
23165: IFFALSE 23305
23167: GO 23169
23169: DISABLE
23170: LD_INT 0
23172: PPUSH
23173: PPUSH
// begin ToLua ( displayPowell(); ) ;
23174: LD_STRING displayPowell();
23176: PPUSH
23177: CALL_OW 559
// uc_side := 0 ;
23181: LD_ADDR_OWVAR 20
23185: PUSH
23186: LD_INT 0
23188: ST_TO_ADDR
// uc_nation := 2 ;
23189: LD_ADDR_OWVAR 21
23193: PUSH
23194: LD_INT 2
23196: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23197: LD_ADDR_OWVAR 37
23201: PUSH
23202: LD_INT 14
23204: ST_TO_ADDR
// vc_engine := engine_siberite ;
23205: LD_ADDR_OWVAR 39
23209: PUSH
23210: LD_INT 3
23212: ST_TO_ADDR
// vc_control := control_apeman ;
23213: LD_ADDR_OWVAR 38
23217: PUSH
23218: LD_INT 5
23220: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23221: LD_ADDR_OWVAR 40
23225: PUSH
23226: LD_INT 29
23228: ST_TO_ADDR
// un := CreateVehicle ;
23229: LD_ADDR_VAR 0 2
23233: PUSH
23234: CALL_OW 45
23238: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23239: LD_VAR 0 2
23243: PPUSH
23244: LD_INT 1
23246: PPUSH
23247: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23251: LD_INT 35
23253: PPUSH
23254: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23258: LD_VAR 0 2
23262: PPUSH
23263: LD_INT 22
23265: PUSH
23266: LD_OWVAR 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PPUSH
23275: CALL_OW 69
23279: PPUSH
23280: LD_VAR 0 2
23284: PPUSH
23285: CALL_OW 74
23289: PPUSH
23290: CALL_OW 115
// until IsDead ( un ) ;
23294: LD_VAR 0 2
23298: PPUSH
23299: CALL_OW 301
23303: IFFALSE 23251
// end ;
23305: PPOPN 2
23307: END
// every 0 0$1 trigger StreamModeActive and sStu do
23308: LD_EXP 54
23312: PUSH
23313: LD_EXP 93
23317: AND
23318: IFFALSE 23334
23320: GO 23322
23322: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23323: LD_STRING displayStucuk();
23325: PPUSH
23326: CALL_OW 559
// ResetFog ;
23330: CALL_OW 335
// end ;
23334: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23335: LD_EXP 54
23339: PUSH
23340: LD_EXP 86
23344: AND
23345: IFFALSE 23486
23347: GO 23349
23349: DISABLE
23350: LD_INT 0
23352: PPUSH
23353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_OWVAR 2
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 21
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 69
23389: ST_TO_ADDR
// if not tmp then
23390: LD_VAR 0 2
23394: NOT
23395: IFFALSE 23399
// exit ;
23397: GO 23486
// un := tmp [ rand ( 1 , tmp ) ] ;
23399: LD_ADDR_VAR 0 1
23403: PUSH
23404: LD_VAR 0 2
23408: PUSH
23409: LD_INT 1
23411: PPUSH
23412: LD_VAR 0 2
23416: PPUSH
23417: CALL_OW 12
23421: ARRAY
23422: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23423: LD_VAR 0 1
23427: PPUSH
23428: LD_INT 0
23430: PPUSH
23431: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23435: LD_VAR 0 1
23439: PPUSH
23440: LD_OWVAR 3
23444: PUSH
23445: LD_VAR 0 1
23449: DIFF
23450: PPUSH
23451: LD_VAR 0 1
23455: PPUSH
23456: CALL_OW 74
23460: PPUSH
23461: CALL_OW 115
// wait ( 0 0$20 ) ;
23465: LD_INT 700
23467: PPUSH
23468: CALL_OW 67
// SetSide ( un , your_side ) ;
23472: LD_VAR 0 1
23476: PPUSH
23477: LD_OWVAR 2
23481: PPUSH
23482: CALL_OW 235
// end ;
23486: PPOPN 2
23488: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23489: LD_EXP 54
23493: PUSH
23494: LD_EXP 87
23498: AND
23499: IFFALSE 23605
23501: GO 23503
23503: DISABLE
23504: LD_INT 0
23506: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23507: LD_ADDR_VAR 0 1
23511: PUSH
23512: LD_INT 22
23514: PUSH
23515: LD_OWVAR 2
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 30
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 30
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PPUSH
23556: CALL_OW 69
23560: ST_TO_ADDR
// if not depot then
23561: LD_VAR 0 1
23565: NOT
23566: IFFALSE 23570
// exit ;
23568: GO 23605
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23570: LD_VAR 0 1
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: PPUSH
23579: CALL_OW 250
23583: PPUSH
23584: LD_VAR 0 1
23588: PUSH
23589: LD_INT 1
23591: ARRAY
23592: PPUSH
23593: CALL_OW 251
23597: PPUSH
23598: LD_INT 70
23600: PPUSH
23601: CALL_OW 495
// end ;
23605: PPOPN 1
23607: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23608: LD_EXP 54
23612: PUSH
23613: LD_EXP 88
23617: AND
23618: IFFALSE 23829
23620: GO 23622
23622: DISABLE
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23630: LD_ADDR_VAR 0 5
23634: PUSH
23635: LD_INT 22
23637: PUSH
23638: LD_OWVAR 2
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 21
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PPUSH
23661: CALL_OW 69
23665: ST_TO_ADDR
// if not tmp then
23666: LD_VAR 0 5
23670: NOT
23671: IFFALSE 23675
// exit ;
23673: GO 23829
// for i in tmp do
23675: LD_ADDR_VAR 0 1
23679: PUSH
23680: LD_VAR 0 5
23684: PUSH
23685: FOR_IN
23686: IFFALSE 23827
// begin d := rand ( 0 , 5 ) ;
23688: LD_ADDR_VAR 0 4
23692: PUSH
23693: LD_INT 0
23695: PPUSH
23696: LD_INT 5
23698: PPUSH
23699: CALL_OW 12
23703: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 250
23718: PPUSH
23719: LD_VAR 0 4
23723: PPUSH
23724: LD_INT 3
23726: PPUSH
23727: LD_INT 12
23729: PPUSH
23730: CALL_OW 12
23734: PPUSH
23735: CALL_OW 272
23739: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23740: LD_ADDR_VAR 0 3
23744: PUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 251
23754: PPUSH
23755: LD_VAR 0 4
23759: PPUSH
23760: LD_INT 3
23762: PPUSH
23763: LD_INT 12
23765: PPUSH
23766: CALL_OW 12
23770: PPUSH
23771: CALL_OW 273
23775: ST_TO_ADDR
// if ValidHex ( x , y ) then
23776: LD_VAR 0 2
23780: PPUSH
23781: LD_VAR 0 3
23785: PPUSH
23786: CALL_OW 488
23790: IFFALSE 23825
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23792: LD_VAR 0 1
23796: PPUSH
23797: LD_VAR 0 2
23801: PPUSH
23802: LD_VAR 0 3
23806: PPUSH
23807: LD_INT 3
23809: PPUSH
23810: LD_INT 6
23812: PPUSH
23813: CALL_OW 12
23817: PPUSH
23818: LD_INT 1
23820: PPUSH
23821: CALL_OW 483
// end ;
23825: GO 23685
23827: POP
23828: POP
// end ;
23829: PPOPN 5
23831: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23832: LD_EXP 54
23836: PUSH
23837: LD_EXP 89
23841: AND
23842: IFFALSE 23936
23844: GO 23846
23846: DISABLE
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23851: LD_ADDR_VAR 0 2
23855: PUSH
23856: LD_INT 22
23858: PUSH
23859: LD_OWVAR 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 32
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 21
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 69
23897: ST_TO_ADDR
// if not tmp then
23898: LD_VAR 0 2
23902: NOT
23903: IFFALSE 23907
// exit ;
23905: GO 23936
// for i in tmp do
23907: LD_ADDR_VAR 0 1
23911: PUSH
23912: LD_VAR 0 2
23916: PUSH
23917: FOR_IN
23918: IFFALSE 23934
// SetFuel ( i , 0 ) ;
23920: LD_VAR 0 1
23924: PPUSH
23925: LD_INT 0
23927: PPUSH
23928: CALL_OW 240
23932: GO 23917
23934: POP
23935: POP
// end ;
23936: PPOPN 2
23938: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23939: LD_EXP 54
23943: PUSH
23944: LD_EXP 90
23948: AND
23949: IFFALSE 24015
23951: GO 23953
23953: DISABLE
23954: LD_INT 0
23956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23957: LD_ADDR_VAR 0 1
23961: PUSH
23962: LD_INT 22
23964: PUSH
23965: LD_OWVAR 2
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 30
23976: PUSH
23977: LD_INT 29
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PPUSH
23988: CALL_OW 69
23992: ST_TO_ADDR
// if not tmp then
23993: LD_VAR 0 1
23997: NOT
23998: IFFALSE 24002
// exit ;
24000: GO 24015
// DestroyUnit ( tmp [ 1 ] ) ;
24002: LD_VAR 0 1
24006: PUSH
24007: LD_INT 1
24009: ARRAY
24010: PPUSH
24011: CALL_OW 65
// end ;
24015: PPOPN 1
24017: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24018: LD_EXP 54
24022: PUSH
24023: LD_EXP 92
24027: AND
24028: IFFALSE 24157
24030: GO 24032
24032: DISABLE
24033: LD_INT 0
24035: PPUSH
// begin uc_side := 0 ;
24036: LD_ADDR_OWVAR 20
24040: PUSH
24041: LD_INT 0
24043: ST_TO_ADDR
// uc_nation := nation_arabian ;
24044: LD_ADDR_OWVAR 21
24048: PUSH
24049: LD_INT 2
24051: ST_TO_ADDR
// hc_gallery :=  ;
24052: LD_ADDR_OWVAR 33
24056: PUSH
24057: LD_STRING 
24059: ST_TO_ADDR
// hc_name :=  ;
24060: LD_ADDR_OWVAR 26
24064: PUSH
24065: LD_STRING 
24067: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24068: LD_INT 1
24070: PPUSH
24071: LD_INT 11
24073: PPUSH
24074: LD_INT 10
24076: PPUSH
24077: CALL_OW 380
// un := CreateHuman ;
24081: LD_ADDR_VAR 0 1
24085: PUSH
24086: CALL_OW 44
24090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24091: LD_VAR 0 1
24095: PPUSH
24096: LD_INT 1
24098: PPUSH
24099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24103: LD_INT 35
24105: PPUSH
24106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24110: LD_VAR 0 1
24114: PPUSH
24115: LD_INT 22
24117: PUSH
24118: LD_OWVAR 2
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PPUSH
24127: CALL_OW 69
24131: PPUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 74
24141: PPUSH
24142: CALL_OW 115
// until IsDead ( un ) ;
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL_OW 301
24155: IFFALSE 24103
// end ;
24157: PPOPN 1
24159: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24160: LD_EXP 54
24164: PUSH
24165: LD_EXP 94
24169: AND
24170: IFFALSE 24182
24172: GO 24174
24174: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24175: LD_STRING earthquake(getX(game), 0, 32)
24177: PPUSH
24178: CALL_OW 559
24182: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24183: LD_EXP 54
24187: PUSH
24188: LD_EXP 95
24192: AND
24193: IFFALSE 24284
24195: GO 24197
24197: DISABLE
24198: LD_INT 0
24200: PPUSH
// begin enable ;
24201: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24202: LD_ADDR_VAR 0 1
24206: PUSH
24207: LD_INT 22
24209: PUSH
24210: LD_OWVAR 2
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 21
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 33
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: PPUSH
24244: CALL_OW 69
24248: ST_TO_ADDR
// if not tmp then
24249: LD_VAR 0 1
24253: NOT
24254: IFFALSE 24258
// exit ;
24256: GO 24284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24258: LD_VAR 0 1
24262: PUSH
24263: LD_INT 1
24265: PPUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL_OW 12
24275: ARRAY
24276: PPUSH
24277: LD_INT 1
24279: PPUSH
24280: CALL_OW 234
// end ;
24284: PPOPN 1
24286: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24287: LD_EXP 54
24291: PUSH
24292: LD_EXP 96
24296: AND
24297: IFFALSE 24438
24299: GO 24301
24301: DISABLE
24302: LD_INT 0
24304: PPUSH
24305: PPUSH
24306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: LD_INT 22
24314: PUSH
24315: LD_OWVAR 2
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 25
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PPUSH
24338: CALL_OW 69
24342: ST_TO_ADDR
// if not tmp then
24343: LD_VAR 0 3
24347: NOT
24348: IFFALSE 24352
// exit ;
24350: GO 24438
// un := tmp [ rand ( 1 , tmp ) ] ;
24352: LD_ADDR_VAR 0 2
24356: PUSH
24357: LD_VAR 0 3
24361: PUSH
24362: LD_INT 1
24364: PPUSH
24365: LD_VAR 0 3
24369: PPUSH
24370: CALL_OW 12
24374: ARRAY
24375: ST_TO_ADDR
// if Crawls ( un ) then
24376: LD_VAR 0 2
24380: PPUSH
24381: CALL_OW 318
24385: IFFALSE 24396
// ComWalk ( un ) ;
24387: LD_VAR 0 2
24391: PPUSH
24392: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24396: LD_VAR 0 2
24400: PPUSH
24401: LD_INT 9
24403: PPUSH
24404: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24408: LD_INT 28
24410: PPUSH
24411: LD_OWVAR 2
24415: PPUSH
24416: LD_INT 2
24418: PPUSH
24419: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24423: LD_INT 29
24425: PPUSH
24426: LD_OWVAR 2
24430: PPUSH
24431: LD_INT 2
24433: PPUSH
24434: CALL_OW 322
// end ;
24438: PPOPN 3
24440: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24441: LD_EXP 54
24445: PUSH
24446: LD_EXP 97
24450: AND
24451: IFFALSE 24562
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
24459: PPUSH
24460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24461: LD_ADDR_VAR 0 3
24465: PUSH
24466: LD_INT 22
24468: PUSH
24469: LD_OWVAR 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 25
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PPUSH
24492: CALL_OW 69
24496: ST_TO_ADDR
// if not tmp then
24497: LD_VAR 0 3
24501: NOT
24502: IFFALSE 24506
// exit ;
24504: GO 24562
// un := tmp [ rand ( 1 , tmp ) ] ;
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_VAR 0 3
24515: PUSH
24516: LD_INT 1
24518: PPUSH
24519: LD_VAR 0 3
24523: PPUSH
24524: CALL_OW 12
24528: ARRAY
24529: ST_TO_ADDR
// if Crawls ( un ) then
24530: LD_VAR 0 2
24534: PPUSH
24535: CALL_OW 318
24539: IFFALSE 24550
// ComWalk ( un ) ;
24541: LD_VAR 0 2
24545: PPUSH
24546: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24550: LD_VAR 0 2
24554: PPUSH
24555: LD_INT 8
24557: PPUSH
24558: CALL_OW 336
// end ;
24562: PPOPN 3
24564: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24565: LD_EXP 54
24569: PUSH
24570: LD_EXP 98
24574: AND
24575: IFFALSE 24719
24577: GO 24579
24579: DISABLE
24580: LD_INT 0
24582: PPUSH
24583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24584: LD_ADDR_VAR 0 2
24588: PUSH
24589: LD_INT 22
24591: PUSH
24592: LD_OWVAR 2
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 21
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 34
24616: PUSH
24617: LD_INT 12
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 34
24626: PUSH
24627: LD_INT 51
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 34
24636: PUSH
24637: LD_INT 32
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: PPUSH
24655: CALL_OW 69
24659: ST_TO_ADDR
// if not tmp then
24660: LD_VAR 0 2
24664: NOT
24665: IFFALSE 24669
// exit ;
24667: GO 24719
// for i in tmp do
24669: LD_ADDR_VAR 0 1
24673: PUSH
24674: LD_VAR 0 2
24678: PUSH
24679: FOR_IN
24680: IFFALSE 24717
// if GetCargo ( i , mat_artifact ) = 0 then
24682: LD_VAR 0 1
24686: PPUSH
24687: LD_INT 4
24689: PPUSH
24690: CALL_OW 289
24694: PUSH
24695: LD_INT 0
24697: EQUAL
24698: IFFALSE 24715
// SetCargo ( i , mat_siberit , 100 ) ;
24700: LD_VAR 0 1
24704: PPUSH
24705: LD_INT 3
24707: PPUSH
24708: LD_INT 100
24710: PPUSH
24711: CALL_OW 290
24715: GO 24679
24717: POP
24718: POP
// end ;
24719: PPOPN 2
24721: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24722: LD_EXP 54
24726: PUSH
24727: LD_EXP 99
24731: AND
24732: IFFALSE 24915
24734: GO 24736
24736: DISABLE
24737: LD_INT 0
24739: PPUSH
24740: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24741: LD_ADDR_VAR 0 2
24745: PUSH
24746: LD_INT 22
24748: PUSH
24749: LD_OWVAR 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PPUSH
24758: CALL_OW 69
24762: ST_TO_ADDR
// if not tmp then
24763: LD_VAR 0 2
24767: NOT
24768: IFFALSE 24772
// exit ;
24770: GO 24915
// for i := 1 to 2 do
24772: LD_ADDR_VAR 0 1
24776: PUSH
24777: DOUBLE
24778: LD_INT 1
24780: DEC
24781: ST_TO_ADDR
24782: LD_INT 2
24784: PUSH
24785: FOR_TO
24786: IFFALSE 24913
// begin uc_side := your_side ;
24788: LD_ADDR_OWVAR 20
24792: PUSH
24793: LD_OWVAR 2
24797: ST_TO_ADDR
// uc_nation := nation_american ;
24798: LD_ADDR_OWVAR 21
24802: PUSH
24803: LD_INT 1
24805: ST_TO_ADDR
// vc_chassis := us_morphling ;
24806: LD_ADDR_OWVAR 37
24810: PUSH
24811: LD_INT 5
24813: ST_TO_ADDR
// vc_engine := engine_siberite ;
24814: LD_ADDR_OWVAR 39
24818: PUSH
24819: LD_INT 3
24821: ST_TO_ADDR
// vc_control := control_computer ;
24822: LD_ADDR_OWVAR 38
24826: PUSH
24827: LD_INT 3
24829: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24830: LD_ADDR_OWVAR 40
24834: PUSH
24835: LD_INT 10
24837: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24838: LD_VAR 0 2
24842: PUSH
24843: LD_INT 1
24845: ARRAY
24846: PPUSH
24847: CALL_OW 310
24851: NOT
24852: IFFALSE 24899
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24854: CALL_OW 45
24858: PPUSH
24859: LD_VAR 0 2
24863: PUSH
24864: LD_INT 1
24866: ARRAY
24867: PPUSH
24868: CALL_OW 250
24872: PPUSH
24873: LD_VAR 0 2
24877: PUSH
24878: LD_INT 1
24880: ARRAY
24881: PPUSH
24882: CALL_OW 251
24886: PPUSH
24887: LD_INT 12
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL_OW 50
24897: GO 24911
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24899: CALL_OW 45
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL_OW 51
// end ;
24911: GO 24785
24913: POP
24914: POP
// end ;
24915: PPOPN 2
24917: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24918: LD_EXP 54
24922: PUSH
24923: LD_EXP 100
24927: AND
24928: IFFALSE 25150
24930: GO 24932
24932: DISABLE
24933: LD_INT 0
24935: PPUSH
24936: PPUSH
24937: PPUSH
24938: PPUSH
24939: PPUSH
24940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24941: LD_ADDR_VAR 0 6
24945: PUSH
24946: LD_INT 22
24948: PUSH
24949: LD_OWVAR 2
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 21
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 3
24970: PUSH
24971: LD_INT 23
24973: PUSH
24974: LD_INT 0
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: PPUSH
24990: CALL_OW 69
24994: ST_TO_ADDR
// if not tmp then
24995: LD_VAR 0 6
24999: NOT
25000: IFFALSE 25004
// exit ;
25002: GO 25150
// s1 := rand ( 1 , 4 ) ;
25004: LD_ADDR_VAR 0 2
25008: PUSH
25009: LD_INT 1
25011: PPUSH
25012: LD_INT 4
25014: PPUSH
25015: CALL_OW 12
25019: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25020: LD_ADDR_VAR 0 4
25024: PUSH
25025: LD_VAR 0 6
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: PPUSH
25034: LD_VAR 0 2
25038: PPUSH
25039: CALL_OW 259
25043: ST_TO_ADDR
// if s1 = 1 then
25044: LD_VAR 0 2
25048: PUSH
25049: LD_INT 1
25051: EQUAL
25052: IFFALSE 25072
// s2 := rand ( 2 , 4 ) else
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_INT 2
25061: PPUSH
25062: LD_INT 4
25064: PPUSH
25065: CALL_OW 12
25069: ST_TO_ADDR
25070: GO 25080
// s2 := 1 ;
25072: LD_ADDR_VAR 0 3
25076: PUSH
25077: LD_INT 1
25079: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25080: LD_ADDR_VAR 0 5
25084: PUSH
25085: LD_VAR 0 6
25089: PUSH
25090: LD_INT 1
25092: ARRAY
25093: PPUSH
25094: LD_VAR 0 3
25098: PPUSH
25099: CALL_OW 259
25103: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25104: LD_VAR 0 6
25108: PUSH
25109: LD_INT 1
25111: ARRAY
25112: PPUSH
25113: LD_VAR 0 2
25117: PPUSH
25118: LD_VAR 0 5
25122: PPUSH
25123: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25127: LD_VAR 0 6
25131: PUSH
25132: LD_INT 1
25134: ARRAY
25135: PPUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: LD_VAR 0 4
25145: PPUSH
25146: CALL_OW 237
// end ;
25150: PPOPN 6
25152: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25153: LD_EXP 54
25157: PUSH
25158: LD_EXP 101
25162: AND
25163: IFFALSE 25242
25165: GO 25167
25167: DISABLE
25168: LD_INT 0
25170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25171: LD_ADDR_VAR 0 1
25175: PUSH
25176: LD_INT 22
25178: PUSH
25179: LD_OWVAR 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 30
25190: PUSH
25191: LD_INT 3
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: ST_TO_ADDR
// if not tmp then
25207: LD_VAR 0 1
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 25242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25216: LD_VAR 0 1
25220: PUSH
25221: LD_INT 1
25223: PPUSH
25224: LD_VAR 0 1
25228: PPUSH
25229: CALL_OW 12
25233: ARRAY
25234: PPUSH
25235: LD_INT 1
25237: PPUSH
25238: CALL_OW 234
// end ;
25242: PPOPN 1
25244: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25245: LD_EXP 54
25249: PUSH
25250: LD_EXP 102
25254: AND
25255: IFFALSE 25367
25257: GO 25259
25259: DISABLE
25260: LD_INT 0
25262: PPUSH
25263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25264: LD_ADDR_VAR 0 2
25268: PUSH
25269: LD_INT 22
25271: PUSH
25272: LD_OWVAR 2
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: LD_INT 30
25286: PUSH
25287: LD_INT 27
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 30
25296: PUSH
25297: LD_INT 26
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 30
25306: PUSH
25307: LD_INT 28
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PPUSH
25324: CALL_OW 69
25328: ST_TO_ADDR
// if not tmp then
25329: LD_VAR 0 2
25333: NOT
25334: IFFALSE 25338
// exit ;
25336: GO 25367
// for i in tmp do
25338: LD_ADDR_VAR 0 1
25342: PUSH
25343: LD_VAR 0 2
25347: PUSH
25348: FOR_IN
25349: IFFALSE 25365
// SetLives ( i , 1 ) ;
25351: LD_VAR 0 1
25355: PPUSH
25356: LD_INT 1
25358: PPUSH
25359: CALL_OW 234
25363: GO 25348
25365: POP
25366: POP
// end ;
25367: PPOPN 2
25369: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25370: LD_EXP 54
25374: PUSH
25375: LD_EXP 103
25379: AND
25380: IFFALSE 25654
25382: GO 25384
25384: DISABLE
25385: LD_INT 0
25387: PPUSH
25388: PPUSH
25389: PPUSH
// begin i := rand ( 1 , 7 ) ;
25390: LD_ADDR_VAR 0 1
25394: PUSH
25395: LD_INT 1
25397: PPUSH
25398: LD_INT 7
25400: PPUSH
25401: CALL_OW 12
25405: ST_TO_ADDR
// case i of 1 :
25406: LD_VAR 0 1
25410: PUSH
25411: LD_INT 1
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 25429
25419: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25420: LD_STRING earthquake(getX(game), 0, 32)
25422: PPUSH
25423: CALL_OW 559
25427: GO 25654
25429: LD_INT 2
25431: DOUBLE
25432: EQUAL
25433: IFTRUE 25437
25435: GO 25451
25437: POP
// begin ToLua ( displayStucuk(); ) ;
25438: LD_STRING displayStucuk();
25440: PPUSH
25441: CALL_OW 559
// ResetFog ;
25445: CALL_OW 335
// end ; 3 :
25449: GO 25654
25451: LD_INT 3
25453: DOUBLE
25454: EQUAL
25455: IFTRUE 25459
25457: GO 25563
25459: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25460: LD_ADDR_VAR 0 2
25464: PUSH
25465: LD_INT 22
25467: PUSH
25468: LD_OWVAR 2
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 25
25479: PUSH
25480: LD_INT 1
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PPUSH
25491: CALL_OW 69
25495: ST_TO_ADDR
// if not tmp then
25496: LD_VAR 0 2
25500: NOT
25501: IFFALSE 25505
// exit ;
25503: GO 25654
// un := tmp [ rand ( 1 , tmp ) ] ;
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_VAR 0 2
25514: PUSH
25515: LD_INT 1
25517: PPUSH
25518: LD_VAR 0 2
25522: PPUSH
25523: CALL_OW 12
25527: ARRAY
25528: ST_TO_ADDR
// if Crawls ( un ) then
25529: LD_VAR 0 3
25533: PPUSH
25534: CALL_OW 318
25538: IFFALSE 25549
// ComWalk ( un ) ;
25540: LD_VAR 0 3
25544: PPUSH
25545: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25549: LD_VAR 0 3
25553: PPUSH
25554: LD_INT 8
25556: PPUSH
25557: CALL_OW 336
// end ; 4 :
25561: GO 25654
25563: LD_INT 4
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 25632
25571: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25572: LD_ADDR_VAR 0 2
25576: PUSH
25577: LD_INT 22
25579: PUSH
25580: LD_OWVAR 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 30
25591: PUSH
25592: LD_INT 29
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PPUSH
25603: CALL_OW 69
25607: ST_TO_ADDR
// if not tmp then
25608: LD_VAR 0 2
25612: NOT
25613: IFFALSE 25617
// exit ;
25615: GO 25654
// DestroyUnit ( tmp [ 1 ] ) ;
25617: LD_VAR 0 2
25621: PUSH
25622: LD_INT 1
25624: ARRAY
25625: PPUSH
25626: CALL_OW 65
// end ; 5 .. 7 :
25630: GO 25654
25632: LD_INT 5
25634: DOUBLE
25635: GREATEREQUAL
25636: IFFALSE 25644
25638: LD_INT 7
25640: DOUBLE
25641: LESSEQUAL
25642: IFTRUE 25646
25644: GO 25653
25646: POP
// StreamSibBomb ; end ;
25647: CALL 21904 0 0
25651: GO 25654
25653: POP
// end ;
25654: PPOPN 3
25656: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25657: LD_EXP 54
25661: PUSH
25662: LD_EXP 104
25666: AND
25667: IFFALSE 25823
25669: GO 25671
25671: DISABLE
25672: LD_INT 0
25674: PPUSH
25675: PPUSH
25676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25677: LD_ADDR_VAR 0 2
25681: PUSH
25682: LD_INT 81
25684: PUSH
25685: LD_OWVAR 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 21
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 21
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: LIST
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PPUSH
25726: CALL_OW 69
25730: ST_TO_ADDR
// if not tmp then
25731: LD_VAR 0 2
25735: NOT
25736: IFFALSE 25740
// exit ;
25738: GO 25823
// p := 0 ;
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_INT 0
25747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25748: LD_INT 35
25750: PPUSH
25751: CALL_OW 67
// p := p + 1 ;
25755: LD_ADDR_VAR 0 3
25759: PUSH
25760: LD_VAR 0 3
25764: PUSH
25765: LD_INT 1
25767: PLUS
25768: ST_TO_ADDR
// for i in tmp do
25769: LD_ADDR_VAR 0 1
25773: PUSH
25774: LD_VAR 0 2
25778: PUSH
25779: FOR_IN
25780: IFFALSE 25811
// if GetLives ( i ) < 1000 then
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL_OW 256
25791: PUSH
25792: LD_INT 1000
25794: LESS
25795: IFFALSE 25809
// SetLives ( i , 1000 ) ;
25797: LD_VAR 0 1
25801: PPUSH
25802: LD_INT 1000
25804: PPUSH
25805: CALL_OW 234
25809: GO 25779
25811: POP
25812: POP
// until p > 20 ;
25813: LD_VAR 0 3
25817: PUSH
25818: LD_INT 20
25820: GREATER
25821: IFFALSE 25748
// end ;
25823: PPOPN 3
25825: END
// every 0 0$1 trigger StreamModeActive and sTime do
25826: LD_EXP 54
25830: PUSH
25831: LD_EXP 105
25835: AND
25836: IFFALSE 25871
25838: GO 25840
25840: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25841: LD_INT 28
25843: PPUSH
25844: LD_OWVAR 2
25848: PPUSH
25849: LD_INT 2
25851: PPUSH
25852: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25856: LD_INT 30
25858: PPUSH
25859: LD_OWVAR 2
25863: PPUSH
25864: LD_INT 2
25866: PPUSH
25867: CALL_OW 322
// end ;
25871: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25872: LD_EXP 54
25876: PUSH
25877: LD_EXP 106
25881: AND
25882: IFFALSE 26003
25884: GO 25886
25886: DISABLE
25887: LD_INT 0
25889: PPUSH
25890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25891: LD_ADDR_VAR 0 2
25895: PUSH
25896: LD_INT 22
25898: PUSH
25899: LD_OWVAR 2
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 21
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 3
25920: PUSH
25921: LD_INT 23
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 69
25944: ST_TO_ADDR
// if not tmp then
25945: LD_VAR 0 2
25949: NOT
25950: IFFALSE 25954
// exit ;
25952: GO 26003
// for i in tmp do
25954: LD_ADDR_VAR 0 1
25958: PUSH
25959: LD_VAR 0 2
25963: PUSH
25964: FOR_IN
25965: IFFALSE 26001
// begin if Crawls ( i ) then
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 318
25976: IFFALSE 25987
// ComWalk ( i ) ;
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL_OW 138
// SetClass ( i , 2 ) ;
25987: LD_VAR 0 1
25991: PPUSH
25992: LD_INT 2
25994: PPUSH
25995: CALL_OW 336
// end ;
25999: GO 25964
26001: POP
26002: POP
// end ;
26003: PPOPN 2
26005: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26006: LD_EXP 54
26010: PUSH
26011: LD_EXP 107
26015: AND
26016: IFFALSE 26297
26018: GO 26020
26020: DISABLE
26021: LD_INT 0
26023: PPUSH
26024: PPUSH
26025: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26026: LD_OWVAR 2
26030: PPUSH
26031: LD_INT 9
26033: PPUSH
26034: LD_INT 1
26036: PPUSH
26037: LD_INT 1
26039: PPUSH
26040: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26044: LD_INT 9
26046: PPUSH
26047: LD_OWVAR 2
26051: PPUSH
26052: CALL_OW 343
// uc_side := 9 ;
26056: LD_ADDR_OWVAR 20
26060: PUSH
26061: LD_INT 9
26063: ST_TO_ADDR
// uc_nation := 2 ;
26064: LD_ADDR_OWVAR 21
26068: PUSH
26069: LD_INT 2
26071: ST_TO_ADDR
// hc_name := Dark Warrior ;
26072: LD_ADDR_OWVAR 26
26076: PUSH
26077: LD_STRING Dark Warrior
26079: ST_TO_ADDR
// hc_gallery :=  ;
26080: LD_ADDR_OWVAR 33
26084: PUSH
26085: LD_STRING 
26087: ST_TO_ADDR
// hc_noskilllimit := true ;
26088: LD_ADDR_OWVAR 76
26092: PUSH
26093: LD_INT 1
26095: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26096: LD_ADDR_OWVAR 31
26100: PUSH
26101: LD_INT 30
26103: PUSH
26104: LD_INT 30
26106: PUSH
26107: LD_INT 30
26109: PUSH
26110: LD_INT 30
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: ST_TO_ADDR
// un := CreateHuman ;
26119: LD_ADDR_VAR 0 3
26123: PUSH
26124: CALL_OW 44
26128: ST_TO_ADDR
// hc_noskilllimit := false ;
26129: LD_ADDR_OWVAR 76
26133: PUSH
26134: LD_INT 0
26136: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26137: LD_VAR 0 3
26141: PPUSH
26142: LD_INT 1
26144: PPUSH
26145: CALL_OW 51
// p := 0 ;
26149: LD_ADDR_VAR 0 2
26153: PUSH
26154: LD_INT 0
26156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26157: LD_INT 35
26159: PPUSH
26160: CALL_OW 67
// p := p + 1 ;
26164: LD_ADDR_VAR 0 2
26168: PUSH
26169: LD_VAR 0 2
26173: PUSH
26174: LD_INT 1
26176: PLUS
26177: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26178: LD_VAR 0 3
26182: PPUSH
26183: CALL_OW 256
26187: PUSH
26188: LD_INT 1000
26190: LESS
26191: IFFALSE 26205
// SetLives ( un , 1000 ) ;
26193: LD_VAR 0 3
26197: PPUSH
26198: LD_INT 1000
26200: PPUSH
26201: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26205: LD_VAR 0 3
26209: PPUSH
26210: LD_INT 81
26212: PUSH
26213: LD_OWVAR 2
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 91
26224: PUSH
26225: LD_VAR 0 3
26229: PUSH
26230: LD_INT 30
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PPUSH
26242: CALL_OW 69
26246: PPUSH
26247: LD_VAR 0 3
26251: PPUSH
26252: CALL_OW 74
26256: PPUSH
26257: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26261: LD_VAR 0 2
26265: PUSH
26266: LD_INT 60
26268: GREATER
26269: PUSH
26270: LD_VAR 0 3
26274: PPUSH
26275: CALL_OW 301
26279: OR
26280: IFFALSE 26157
// if un then
26282: LD_VAR 0 3
26286: IFFALSE 26297
// RemoveUnit ( un ) ;
26288: LD_VAR 0 3
26292: PPUSH
26293: CALL_OW 64
// end ;
26297: PPOPN 3
26299: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26300: LD_INT 0
26302: PPUSH
// case cmd of 301 :
26303: LD_VAR 0 1
26307: PUSH
26308: LD_INT 301
26310: DOUBLE
26311: EQUAL
26312: IFTRUE 26316
26314: GO 26348
26316: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26317: LD_VAR 0 6
26321: PPUSH
26322: LD_VAR 0 7
26326: PPUSH
26327: LD_VAR 0 8
26331: PPUSH
26332: LD_VAR 0 4
26336: PPUSH
26337: LD_VAR 0 5
26341: PPUSH
26342: CALL 27549 0 5
26346: GO 26469
26348: LD_INT 302
26350: DOUBLE
26351: EQUAL
26352: IFTRUE 26356
26354: GO 26393
26356: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26357: LD_VAR 0 6
26361: PPUSH
26362: LD_VAR 0 7
26366: PPUSH
26367: LD_VAR 0 8
26371: PPUSH
26372: LD_VAR 0 9
26376: PPUSH
26377: LD_VAR 0 4
26381: PPUSH
26382: LD_VAR 0 5
26386: PPUSH
26387: CALL 27640 0 6
26391: GO 26469
26393: LD_INT 303
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26438
26401: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26402: LD_VAR 0 6
26406: PPUSH
26407: LD_VAR 0 7
26411: PPUSH
26412: LD_VAR 0 8
26416: PPUSH
26417: LD_VAR 0 9
26421: PPUSH
26422: LD_VAR 0 4
26426: PPUSH
26427: LD_VAR 0 5
26431: PPUSH
26432: CALL 26474 0 6
26436: GO 26469
26438: LD_INT 304
26440: DOUBLE
26441: EQUAL
26442: IFTRUE 26446
26444: GO 26468
26446: POP
// hHackTeleport ( unit , x , y ) ; end ;
26447: LD_VAR 0 2
26451: PPUSH
26452: LD_VAR 0 4
26456: PPUSH
26457: LD_VAR 0 5
26461: PPUSH
26462: CALL 28233 0 3
26466: GO 26469
26468: POP
// end ;
26469: LD_VAR 0 12
26473: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26474: LD_INT 0
26476: PPUSH
26477: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26478: LD_VAR 0 1
26482: PUSH
26483: LD_INT 1
26485: LESS
26486: PUSH
26487: LD_VAR 0 1
26491: PUSH
26492: LD_INT 3
26494: GREATER
26495: OR
26496: PUSH
26497: LD_VAR 0 5
26501: PPUSH
26502: LD_VAR 0 6
26506: PPUSH
26507: CALL_OW 428
26511: OR
26512: IFFALSE 26516
// exit ;
26514: GO 27236
// uc_side := your_side ;
26516: LD_ADDR_OWVAR 20
26520: PUSH
26521: LD_OWVAR 2
26525: ST_TO_ADDR
// uc_nation := nation ;
26526: LD_ADDR_OWVAR 21
26530: PUSH
26531: LD_VAR 0 1
26535: ST_TO_ADDR
// bc_level = 1 ;
26536: LD_ADDR_OWVAR 43
26540: PUSH
26541: LD_INT 1
26543: ST_TO_ADDR
// case btype of 1 :
26544: LD_VAR 0 2
26548: PUSH
26549: LD_INT 1
26551: DOUBLE
26552: EQUAL
26553: IFTRUE 26557
26555: GO 26568
26557: POP
// bc_type := b_depot ; 2 :
26558: LD_ADDR_OWVAR 42
26562: PUSH
26563: LD_INT 0
26565: ST_TO_ADDR
26566: GO 27180
26568: LD_INT 2
26570: DOUBLE
26571: EQUAL
26572: IFTRUE 26576
26574: GO 26587
26576: POP
// bc_type := b_warehouse ; 3 :
26577: LD_ADDR_OWVAR 42
26581: PUSH
26582: LD_INT 1
26584: ST_TO_ADDR
26585: GO 27180
26587: LD_INT 3
26589: DOUBLE
26590: EQUAL
26591: IFTRUE 26595
26593: GO 26606
26595: POP
// bc_type := b_lab ; 4 .. 9 :
26596: LD_ADDR_OWVAR 42
26600: PUSH
26601: LD_INT 6
26603: ST_TO_ADDR
26604: GO 27180
26606: LD_INT 4
26608: DOUBLE
26609: GREATEREQUAL
26610: IFFALSE 26618
26612: LD_INT 9
26614: DOUBLE
26615: LESSEQUAL
26616: IFTRUE 26620
26618: GO 26672
26620: POP
// begin bc_type := b_lab_half ;
26621: LD_ADDR_OWVAR 42
26625: PUSH
26626: LD_INT 7
26628: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26629: LD_ADDR_OWVAR 44
26633: PUSH
26634: LD_INT 10
26636: PUSH
26637: LD_INT 11
26639: PUSH
26640: LD_INT 12
26642: PUSH
26643: LD_INT 15
26645: PUSH
26646: LD_INT 14
26648: PUSH
26649: LD_INT 13
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: LD_VAR 0 2
26664: PUSH
26665: LD_INT 3
26667: MINUS
26668: ARRAY
26669: ST_TO_ADDR
// end ; 10 .. 13 :
26670: GO 27180
26672: LD_INT 10
26674: DOUBLE
26675: GREATEREQUAL
26676: IFFALSE 26684
26678: LD_INT 13
26680: DOUBLE
26681: LESSEQUAL
26682: IFTRUE 26686
26684: GO 26763
26686: POP
// begin bc_type := b_lab_full ;
26687: LD_ADDR_OWVAR 42
26691: PUSH
26692: LD_INT 8
26694: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26695: LD_ADDR_OWVAR 44
26699: PUSH
26700: LD_INT 10
26702: PUSH
26703: LD_INT 12
26705: PUSH
26706: LD_INT 14
26708: PUSH
26709: LD_INT 13
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: PUSH
26718: LD_VAR 0 2
26722: PUSH
26723: LD_INT 9
26725: MINUS
26726: ARRAY
26727: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26728: LD_ADDR_OWVAR 45
26732: PUSH
26733: LD_INT 11
26735: PUSH
26736: LD_INT 15
26738: PUSH
26739: LD_INT 12
26741: PUSH
26742: LD_INT 15
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: PUSH
26751: LD_VAR 0 2
26755: PUSH
26756: LD_INT 9
26758: MINUS
26759: ARRAY
26760: ST_TO_ADDR
// end ; 14 :
26761: GO 27180
26763: LD_INT 14
26765: DOUBLE
26766: EQUAL
26767: IFTRUE 26771
26769: GO 26782
26771: POP
// bc_type := b_workshop ; 15 :
26772: LD_ADDR_OWVAR 42
26776: PUSH
26777: LD_INT 2
26779: ST_TO_ADDR
26780: GO 27180
26782: LD_INT 15
26784: DOUBLE
26785: EQUAL
26786: IFTRUE 26790
26788: GO 26801
26790: POP
// bc_type := b_factory ; 16 :
26791: LD_ADDR_OWVAR 42
26795: PUSH
26796: LD_INT 3
26798: ST_TO_ADDR
26799: GO 27180
26801: LD_INT 16
26803: DOUBLE
26804: EQUAL
26805: IFTRUE 26809
26807: GO 26820
26809: POP
// bc_type := b_ext_gun ; 17 :
26810: LD_ADDR_OWVAR 42
26814: PUSH
26815: LD_INT 17
26817: ST_TO_ADDR
26818: GO 27180
26820: LD_INT 17
26822: DOUBLE
26823: EQUAL
26824: IFTRUE 26828
26826: GO 26856
26828: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26829: LD_ADDR_OWVAR 42
26833: PUSH
26834: LD_INT 19
26836: PUSH
26837: LD_INT 23
26839: PUSH
26840: LD_INT 19
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: LIST
26847: PUSH
26848: LD_VAR 0 1
26852: ARRAY
26853: ST_TO_ADDR
26854: GO 27180
26856: LD_INT 18
26858: DOUBLE
26859: EQUAL
26860: IFTRUE 26864
26862: GO 26875
26864: POP
// bc_type := b_ext_radar ; 19 :
26865: LD_ADDR_OWVAR 42
26869: PUSH
26870: LD_INT 20
26872: ST_TO_ADDR
26873: GO 27180
26875: LD_INT 19
26877: DOUBLE
26878: EQUAL
26879: IFTRUE 26883
26881: GO 26894
26883: POP
// bc_type := b_ext_radio ; 20 :
26884: LD_ADDR_OWVAR 42
26888: PUSH
26889: LD_INT 22
26891: ST_TO_ADDR
26892: GO 27180
26894: LD_INT 20
26896: DOUBLE
26897: EQUAL
26898: IFTRUE 26902
26900: GO 26913
26902: POP
// bc_type := b_ext_siberium ; 21 :
26903: LD_ADDR_OWVAR 42
26907: PUSH
26908: LD_INT 21
26910: ST_TO_ADDR
26911: GO 27180
26913: LD_INT 21
26915: DOUBLE
26916: EQUAL
26917: IFTRUE 26921
26919: GO 26932
26921: POP
// bc_type := b_ext_computer ; 22 :
26922: LD_ADDR_OWVAR 42
26926: PUSH
26927: LD_INT 24
26929: ST_TO_ADDR
26930: GO 27180
26932: LD_INT 22
26934: DOUBLE
26935: EQUAL
26936: IFTRUE 26940
26938: GO 26951
26940: POP
// bc_type := b_ext_track ; 23 :
26941: LD_ADDR_OWVAR 42
26945: PUSH
26946: LD_INT 16
26948: ST_TO_ADDR
26949: GO 27180
26951: LD_INT 23
26953: DOUBLE
26954: EQUAL
26955: IFTRUE 26959
26957: GO 26970
26959: POP
// bc_type := b_ext_laser ; 24 :
26960: LD_ADDR_OWVAR 42
26964: PUSH
26965: LD_INT 25
26967: ST_TO_ADDR
26968: GO 27180
26970: LD_INT 24
26972: DOUBLE
26973: EQUAL
26974: IFTRUE 26978
26976: GO 26989
26978: POP
// bc_type := b_control_tower ; 25 :
26979: LD_ADDR_OWVAR 42
26983: PUSH
26984: LD_INT 36
26986: ST_TO_ADDR
26987: GO 27180
26989: LD_INT 25
26991: DOUBLE
26992: EQUAL
26993: IFTRUE 26997
26995: GO 27008
26997: POP
// bc_type := b_breastwork ; 26 :
26998: LD_ADDR_OWVAR 42
27002: PUSH
27003: LD_INT 31
27005: ST_TO_ADDR
27006: GO 27180
27008: LD_INT 26
27010: DOUBLE
27011: EQUAL
27012: IFTRUE 27016
27014: GO 27027
27016: POP
// bc_type := b_bunker ; 27 :
27017: LD_ADDR_OWVAR 42
27021: PUSH
27022: LD_INT 32
27024: ST_TO_ADDR
27025: GO 27180
27027: LD_INT 27
27029: DOUBLE
27030: EQUAL
27031: IFTRUE 27035
27033: GO 27046
27035: POP
// bc_type := b_turret ; 28 :
27036: LD_ADDR_OWVAR 42
27040: PUSH
27041: LD_INT 33
27043: ST_TO_ADDR
27044: GO 27180
27046: LD_INT 28
27048: DOUBLE
27049: EQUAL
27050: IFTRUE 27054
27052: GO 27065
27054: POP
// bc_type := b_armoury ; 29 :
27055: LD_ADDR_OWVAR 42
27059: PUSH
27060: LD_INT 4
27062: ST_TO_ADDR
27063: GO 27180
27065: LD_INT 29
27067: DOUBLE
27068: EQUAL
27069: IFTRUE 27073
27071: GO 27084
27073: POP
// bc_type := b_barracks ; 30 :
27074: LD_ADDR_OWVAR 42
27078: PUSH
27079: LD_INT 5
27081: ST_TO_ADDR
27082: GO 27180
27084: LD_INT 30
27086: DOUBLE
27087: EQUAL
27088: IFTRUE 27092
27090: GO 27103
27092: POP
// bc_type := b_solar_power ; 31 :
27093: LD_ADDR_OWVAR 42
27097: PUSH
27098: LD_INT 27
27100: ST_TO_ADDR
27101: GO 27180
27103: LD_INT 31
27105: DOUBLE
27106: EQUAL
27107: IFTRUE 27111
27109: GO 27122
27111: POP
// bc_type := b_oil_power ; 32 :
27112: LD_ADDR_OWVAR 42
27116: PUSH
27117: LD_INT 26
27119: ST_TO_ADDR
27120: GO 27180
27122: LD_INT 32
27124: DOUBLE
27125: EQUAL
27126: IFTRUE 27130
27128: GO 27141
27130: POP
// bc_type := b_siberite_power ; 33 :
27131: LD_ADDR_OWVAR 42
27135: PUSH
27136: LD_INT 28
27138: ST_TO_ADDR
27139: GO 27180
27141: LD_INT 33
27143: DOUBLE
27144: EQUAL
27145: IFTRUE 27149
27147: GO 27160
27149: POP
// bc_type := b_oil_mine ; 34 :
27150: LD_ADDR_OWVAR 42
27154: PUSH
27155: LD_INT 29
27157: ST_TO_ADDR
27158: GO 27180
27160: LD_INT 34
27162: DOUBLE
27163: EQUAL
27164: IFTRUE 27168
27166: GO 27179
27168: POP
// bc_type := b_siberite_mine ; end ;
27169: LD_ADDR_OWVAR 42
27173: PUSH
27174: LD_INT 30
27176: ST_TO_ADDR
27177: GO 27180
27179: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27180: LD_ADDR_VAR 0 8
27184: PUSH
27185: LD_VAR 0 5
27189: PPUSH
27190: LD_VAR 0 6
27194: PPUSH
27195: LD_VAR 0 3
27199: PPUSH
27200: CALL_OW 47
27204: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27205: LD_OWVAR 42
27209: PUSH
27210: LD_INT 32
27212: PUSH
27213: LD_INT 33
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: IN
27220: IFFALSE 27236
// PlaceWeaponTurret ( b , weapon ) ;
27222: LD_VAR 0 8
27226: PPUSH
27227: LD_VAR 0 4
27231: PPUSH
27232: CALL_OW 431
// end ;
27236: LD_VAR 0 7
27240: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27241: LD_INT 0
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27247: LD_ADDR_VAR 0 4
27251: PUSH
27252: LD_INT 22
27254: PUSH
27255: LD_OWVAR 2
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: LD_INT 30
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 30
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PPUSH
27296: CALL_OW 69
27300: ST_TO_ADDR
// if not tmp then
27301: LD_VAR 0 4
27305: NOT
27306: IFFALSE 27310
// exit ;
27308: GO 27369
// for i in tmp do
27310: LD_ADDR_VAR 0 2
27314: PUSH
27315: LD_VAR 0 4
27319: PUSH
27320: FOR_IN
27321: IFFALSE 27367
// for j = 1 to 3 do
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: DOUBLE
27329: LD_INT 1
27331: DEC
27332: ST_TO_ADDR
27333: LD_INT 3
27335: PUSH
27336: FOR_TO
27337: IFFALSE 27363
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27339: LD_VAR 0 2
27343: PPUSH
27344: CALL_OW 274
27348: PPUSH
27349: LD_VAR 0 3
27353: PPUSH
27354: LD_INT 99999
27356: PPUSH
27357: CALL_OW 277
27361: GO 27336
27363: POP
27364: POP
27365: GO 27320
27367: POP
27368: POP
// end ;
27369: LD_VAR 0 1
27373: RET
// export function hHackSetLevel10 ; var i , j ; begin
27374: LD_INT 0
27376: PPUSH
27377: PPUSH
27378: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27379: LD_ADDR_VAR 0 2
27383: PUSH
27384: LD_INT 21
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PPUSH
27394: CALL_OW 69
27398: PUSH
27399: FOR_IN
27400: IFFALSE 27452
// if IsSelected ( i ) then
27402: LD_VAR 0 2
27406: PPUSH
27407: CALL_OW 306
27411: IFFALSE 27450
// begin for j := 1 to 4 do
27413: LD_ADDR_VAR 0 3
27417: PUSH
27418: DOUBLE
27419: LD_INT 1
27421: DEC
27422: ST_TO_ADDR
27423: LD_INT 4
27425: PUSH
27426: FOR_TO
27427: IFFALSE 27448
// SetSkill ( i , j , 10 ) ;
27429: LD_VAR 0 2
27433: PPUSH
27434: LD_VAR 0 3
27438: PPUSH
27439: LD_INT 10
27441: PPUSH
27442: CALL_OW 237
27446: GO 27426
27448: POP
27449: POP
// end ;
27450: GO 27399
27452: POP
27453: POP
// end ;
27454: LD_VAR 0 1
27458: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
27463: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27464: LD_ADDR_VAR 0 2
27468: PUSH
27469: LD_INT 22
27471: PUSH
27472: LD_OWVAR 2
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 21
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PPUSH
27495: CALL_OW 69
27499: PUSH
27500: FOR_IN
27501: IFFALSE 27542
// begin for j := 1 to 4 do
27503: LD_ADDR_VAR 0 3
27507: PUSH
27508: DOUBLE
27509: LD_INT 1
27511: DEC
27512: ST_TO_ADDR
27513: LD_INT 4
27515: PUSH
27516: FOR_TO
27517: IFFALSE 27538
// SetSkill ( i , j , 10 ) ;
27519: LD_VAR 0 2
27523: PPUSH
27524: LD_VAR 0 3
27528: PPUSH
27529: LD_INT 10
27531: PPUSH
27532: CALL_OW 237
27536: GO 27516
27538: POP
27539: POP
// end ;
27540: GO 27500
27542: POP
27543: POP
// end ;
27544: LD_VAR 0 1
27548: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27549: LD_INT 0
27551: PPUSH
// uc_side := your_side ;
27552: LD_ADDR_OWVAR 20
27556: PUSH
27557: LD_OWVAR 2
27561: ST_TO_ADDR
// uc_nation := nation ;
27562: LD_ADDR_OWVAR 21
27566: PUSH
27567: LD_VAR 0 1
27571: ST_TO_ADDR
// InitHc ;
27572: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27576: LD_INT 0
27578: PPUSH
27579: LD_VAR 0 2
27583: PPUSH
27584: LD_VAR 0 3
27588: PPUSH
27589: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27593: LD_VAR 0 4
27597: PPUSH
27598: LD_VAR 0 5
27602: PPUSH
27603: CALL_OW 428
27607: PUSH
27608: LD_INT 0
27610: EQUAL
27611: IFFALSE 27635
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27613: CALL_OW 44
27617: PPUSH
27618: LD_VAR 0 4
27622: PPUSH
27623: LD_VAR 0 5
27627: PPUSH
27628: LD_INT 1
27630: PPUSH
27631: CALL_OW 48
// end ;
27635: LD_VAR 0 6
27639: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27640: LD_INT 0
27642: PPUSH
27643: PPUSH
// uc_side := your_side ;
27644: LD_ADDR_OWVAR 20
27648: PUSH
27649: LD_OWVAR 2
27653: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27654: LD_VAR 0 1
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: LD_INT 4
27670: PUSH
27671: LD_INT 5
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: IN
27681: IFFALSE 27693
// uc_nation := nation_american else
27683: LD_ADDR_OWVAR 21
27687: PUSH
27688: LD_INT 1
27690: ST_TO_ADDR
27691: GO 27736
// if chassis in [ 11 , 12 , 13 , 14 ] then
27693: LD_VAR 0 1
27697: PUSH
27698: LD_INT 11
27700: PUSH
27701: LD_INT 12
27703: PUSH
27704: LD_INT 13
27706: PUSH
27707: LD_INT 14
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: IN
27716: IFFALSE 27728
// uc_nation := nation_arabian else
27718: LD_ADDR_OWVAR 21
27722: PUSH
27723: LD_INT 2
27725: ST_TO_ADDR
27726: GO 27736
// uc_nation := nation_russian ;
27728: LD_ADDR_OWVAR 21
27732: PUSH
27733: LD_INT 3
27735: ST_TO_ADDR
// vc_chassis := chassis ;
27736: LD_ADDR_OWVAR 37
27740: PUSH
27741: LD_VAR 0 1
27745: ST_TO_ADDR
// vc_engine := engine ;
27746: LD_ADDR_OWVAR 39
27750: PUSH
27751: LD_VAR 0 2
27755: ST_TO_ADDR
// vc_control := control ;
27756: LD_ADDR_OWVAR 38
27760: PUSH
27761: LD_VAR 0 3
27765: ST_TO_ADDR
// vc_weapon := weapon ;
27766: LD_ADDR_OWVAR 40
27770: PUSH
27771: LD_VAR 0 4
27775: ST_TO_ADDR
// un := CreateVehicle ;
27776: LD_ADDR_VAR 0 8
27780: PUSH
27781: CALL_OW 45
27785: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27786: LD_VAR 0 8
27790: PPUSH
27791: LD_INT 0
27793: PPUSH
27794: LD_INT 5
27796: PPUSH
27797: CALL_OW 12
27801: PPUSH
27802: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27806: LD_VAR 0 8
27810: PPUSH
27811: LD_VAR 0 5
27815: PPUSH
27816: LD_VAR 0 6
27820: PPUSH
27821: LD_INT 1
27823: PPUSH
27824: CALL_OW 48
// end ;
27828: LD_VAR 0 7
27832: RET
// export hInvincible ; every 1 do
27833: GO 27835
27835: DISABLE
// hInvincible := [ ] ;
27836: LD_ADDR_EXP 108
27840: PUSH
27841: EMPTY
27842: ST_TO_ADDR
27843: END
// every 10 do var i ;
27844: GO 27846
27846: DISABLE
27847: LD_INT 0
27849: PPUSH
// begin enable ;
27850: ENABLE
// if not hInvincible then
27851: LD_EXP 108
27855: NOT
27856: IFFALSE 27860
// exit ;
27858: GO 27904
// for i in hInvincible do
27860: LD_ADDR_VAR 0 1
27864: PUSH
27865: LD_EXP 108
27869: PUSH
27870: FOR_IN
27871: IFFALSE 27902
// if GetLives ( i ) < 1000 then
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 256
27882: PUSH
27883: LD_INT 1000
27885: LESS
27886: IFFALSE 27900
// SetLives ( i , 1000 ) ;
27888: LD_VAR 0 1
27892: PPUSH
27893: LD_INT 1000
27895: PPUSH
27896: CALL_OW 234
27900: GO 27870
27902: POP
27903: POP
// end ;
27904: PPOPN 1
27906: END
// export function hHackInvincible ; var i ; begin
27907: LD_INT 0
27909: PPUSH
27910: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27911: LD_ADDR_VAR 0 2
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: LD_INT 21
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 21
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: PPUSH
27944: CALL_OW 69
27948: PUSH
27949: FOR_IN
27950: IFFALSE 28011
// if IsSelected ( i ) then
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 306
27961: IFFALSE 28009
// begin if i in hInvincible then
27963: LD_VAR 0 2
27967: PUSH
27968: LD_EXP 108
27972: IN
27973: IFFALSE 27993
// hInvincible := hInvincible diff i else
27975: LD_ADDR_EXP 108
27979: PUSH
27980: LD_EXP 108
27984: PUSH
27985: LD_VAR 0 2
27989: DIFF
27990: ST_TO_ADDR
27991: GO 28009
// hInvincible := hInvincible union i ;
27993: LD_ADDR_EXP 108
27997: PUSH
27998: LD_EXP 108
28002: PUSH
28003: LD_VAR 0 2
28007: UNION
28008: ST_TO_ADDR
// end ;
28009: GO 27949
28011: POP
28012: POP
// end ;
28013: LD_VAR 0 1
28017: RET
// export function hHackInvisible ; var i , j ; begin
28018: LD_INT 0
28020: PPUSH
28021: PPUSH
28022: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28023: LD_ADDR_VAR 0 2
28027: PUSH
28028: LD_INT 21
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: PUSH
28043: FOR_IN
28044: IFFALSE 28068
// if IsSelected ( i ) then
28046: LD_VAR 0 2
28050: PPUSH
28051: CALL_OW 306
28055: IFFALSE 28066
// ComForceInvisible ( i ) ;
28057: LD_VAR 0 2
28061: PPUSH
28062: CALL_OW 496
28066: GO 28043
28068: POP
28069: POP
// end ;
28070: LD_VAR 0 1
28074: RET
// export function hHackChangeYourSide ; begin
28075: LD_INT 0
28077: PPUSH
// if your_side = 8 then
28078: LD_OWVAR 2
28082: PUSH
28083: LD_INT 8
28085: EQUAL
28086: IFFALSE 28098
// your_side := 0 else
28088: LD_ADDR_OWVAR 2
28092: PUSH
28093: LD_INT 0
28095: ST_TO_ADDR
28096: GO 28112
// your_side := your_side + 1 ;
28098: LD_ADDR_OWVAR 2
28102: PUSH
28103: LD_OWVAR 2
28107: PUSH
28108: LD_INT 1
28110: PLUS
28111: ST_TO_ADDR
// end ;
28112: LD_VAR 0 1
28116: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28117: LD_INT 0
28119: PPUSH
28120: PPUSH
28121: PPUSH
// for i in all_units do
28122: LD_ADDR_VAR 0 2
28126: PUSH
28127: LD_OWVAR 3
28131: PUSH
28132: FOR_IN
28133: IFFALSE 28211
// if IsSelected ( i ) then
28135: LD_VAR 0 2
28139: PPUSH
28140: CALL_OW 306
28144: IFFALSE 28209
// begin j := GetSide ( i ) ;
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_VAR 0 2
28155: PPUSH
28156: CALL_OW 255
28160: ST_TO_ADDR
// if j = 8 then
28161: LD_VAR 0 3
28165: PUSH
28166: LD_INT 8
28168: EQUAL
28169: IFFALSE 28181
// j := 0 else
28171: LD_ADDR_VAR 0 3
28175: PUSH
28176: LD_INT 0
28178: ST_TO_ADDR
28179: GO 28195
// j := j + 1 ;
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: LD_VAR 0 3
28190: PUSH
28191: LD_INT 1
28193: PLUS
28194: ST_TO_ADDR
// SetSide ( i , j ) ;
28195: LD_VAR 0 2
28199: PPUSH
28200: LD_VAR 0 3
28204: PPUSH
28205: CALL_OW 235
// end ;
28209: GO 28132
28211: POP
28212: POP
// end ;
28213: LD_VAR 0 1
28217: RET
// export function hHackFog ; begin
28218: LD_INT 0
28220: PPUSH
// FogOff ( true ) ;
28221: LD_INT 1
28223: PPUSH
28224: CALL_OW 344
// end ;
28228: LD_VAR 0 1
28232: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28233: LD_INT 0
28235: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28236: LD_VAR 0 1
28240: PPUSH
28241: LD_VAR 0 2
28245: PPUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: LD_INT 1
28253: PPUSH
28254: LD_INT 1
28256: PPUSH
28257: CALL_OW 483
// CenterOnXY ( x , y ) ;
28261: LD_VAR 0 2
28265: PPUSH
28266: LD_VAR 0 3
28270: PPUSH
28271: CALL_OW 84
// end ; end_of_file
28275: LD_VAR 0 4
28279: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28280: LD_INT 0
28282: PPUSH
28283: PPUSH
28284: PPUSH
28285: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL_OW 264
28295: PUSH
28296: LD_EXP 42
28300: EQUAL
28301: IFFALSE 28373
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28303: LD_INT 68
28305: PPUSH
28306: LD_VAR 0 1
28310: PPUSH
28311: CALL_OW 255
28315: PPUSH
28316: CALL_OW 321
28320: PUSH
28321: LD_INT 2
28323: EQUAL
28324: IFFALSE 28336
// eff := 70 else
28326: LD_ADDR_VAR 0 4
28330: PUSH
28331: LD_INT 70
28333: ST_TO_ADDR
28334: GO 28344
// eff := 30 ;
28336: LD_ADDR_VAR 0 4
28340: PUSH
28341: LD_INT 30
28343: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28344: LD_VAR 0 1
28348: PPUSH
28349: CALL_OW 250
28353: PPUSH
28354: LD_VAR 0 1
28358: PPUSH
28359: CALL_OW 251
28363: PPUSH
28364: LD_VAR 0 4
28368: PPUSH
28369: CALL_OW 495
// end ; end ;
28373: LD_VAR 0 2
28377: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28378: LD_INT 0
28380: PPUSH
// end ;
28381: LD_VAR 0 4
28385: RET
// export function SOS_Command ( cmd ) ; begin
28386: LD_INT 0
28388: PPUSH
// end ;
28389: LD_VAR 0 2
28393: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28394: LD_INT 0
28396: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 250
28404: EQUAL
28405: PUSH
28406: LD_VAR 0 2
28410: PPUSH
28411: CALL_OW 264
28415: PUSH
28416: LD_EXP 45
28420: EQUAL
28421: AND
28422: IFFALSE 28443
// MinerPlaceMine ( unit , x , y ) ;
28424: LD_VAR 0 2
28428: PPUSH
28429: LD_VAR 0 4
28433: PPUSH
28434: LD_VAR 0 5
28438: PPUSH
28439: CALL 30784 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28443: LD_VAR 0 1
28447: PUSH
28448: LD_INT 251
28450: EQUAL
28451: PUSH
28452: LD_VAR 0 2
28456: PPUSH
28457: CALL_OW 264
28461: PUSH
28462: LD_EXP 45
28466: EQUAL
28467: AND
28468: IFFALSE 28489
// MinerDetonateMine ( unit , x , y ) ;
28470: LD_VAR 0 2
28474: PPUSH
28475: LD_VAR 0 4
28479: PPUSH
28480: LD_VAR 0 5
28484: PPUSH
28485: CALL 31061 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28489: LD_VAR 0 1
28493: PUSH
28494: LD_INT 252
28496: EQUAL
28497: PUSH
28498: LD_VAR 0 2
28502: PPUSH
28503: CALL_OW 264
28507: PUSH
28508: LD_EXP 45
28512: EQUAL
28513: AND
28514: IFFALSE 28535
// MinerCreateMinefield ( unit , x , y ) ;
28516: LD_VAR 0 2
28520: PPUSH
28521: LD_VAR 0 4
28525: PPUSH
28526: LD_VAR 0 5
28530: PPUSH
28531: CALL 31478 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28535: LD_VAR 0 1
28539: PUSH
28540: LD_INT 253
28542: EQUAL
28543: PUSH
28544: LD_VAR 0 2
28548: PPUSH
28549: CALL_OW 257
28553: PUSH
28554: LD_INT 5
28556: EQUAL
28557: AND
28558: IFFALSE 28579
// ComBinocular ( unit , x , y ) ;
28560: LD_VAR 0 2
28564: PPUSH
28565: LD_VAR 0 4
28569: PPUSH
28570: LD_VAR 0 5
28574: PPUSH
28575: CALL 31849 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28579: LD_VAR 0 1
28583: PUSH
28584: LD_INT 254
28586: EQUAL
28587: PUSH
28588: LD_VAR 0 2
28592: PPUSH
28593: CALL_OW 264
28597: PUSH
28598: LD_EXP 40
28602: EQUAL
28603: AND
28604: PUSH
28605: LD_VAR 0 3
28609: PPUSH
28610: CALL_OW 263
28614: PUSH
28615: LD_INT 3
28617: EQUAL
28618: AND
28619: IFFALSE 28635
// HackDestroyVehicle ( unit , selectedUnit ) ;
28621: LD_VAR 0 2
28625: PPUSH
28626: LD_VAR 0 3
28630: PPUSH
28631: CALL 30144 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28635: LD_VAR 0 1
28639: PUSH
28640: LD_INT 255
28642: EQUAL
28643: PUSH
28644: LD_VAR 0 2
28648: PPUSH
28649: CALL_OW 264
28653: PUSH
28654: LD_INT 14
28656: PUSH
28657: LD_INT 53
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: IN
28664: AND
28665: PUSH
28666: LD_VAR 0 4
28670: PPUSH
28671: LD_VAR 0 5
28675: PPUSH
28676: CALL_OW 488
28680: AND
28681: IFFALSE 28705
// CutTreeXYR ( unit , x , y , 12 ) ;
28683: LD_VAR 0 2
28687: PPUSH
28688: LD_VAR 0 4
28692: PPUSH
28693: LD_VAR 0 5
28697: PPUSH
28698: LD_INT 12
28700: PPUSH
28701: CALL 28710 0 4
// end ;
28705: LD_VAR 0 6
28709: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28710: LD_INT 0
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
28716: PPUSH
28717: PPUSH
28718: PPUSH
28719: PPUSH
28720: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28721: LD_VAR 0 1
28725: NOT
28726: PUSH
28727: LD_VAR 0 2
28731: PPUSH
28732: LD_VAR 0 3
28736: PPUSH
28737: CALL_OW 488
28741: NOT
28742: OR
28743: PUSH
28744: LD_VAR 0 4
28748: NOT
28749: OR
28750: IFFALSE 28754
// exit ;
28752: GO 29094
// list := [ ] ;
28754: LD_ADDR_VAR 0 13
28758: PUSH
28759: EMPTY
28760: ST_TO_ADDR
// if x - r < 0 then
28761: LD_VAR 0 2
28765: PUSH
28766: LD_VAR 0 4
28770: MINUS
28771: PUSH
28772: LD_INT 0
28774: LESS
28775: IFFALSE 28787
// min_x := 0 else
28777: LD_ADDR_VAR 0 7
28781: PUSH
28782: LD_INT 0
28784: ST_TO_ADDR
28785: GO 28803
// min_x := x - r ;
28787: LD_ADDR_VAR 0 7
28791: PUSH
28792: LD_VAR 0 2
28796: PUSH
28797: LD_VAR 0 4
28801: MINUS
28802: ST_TO_ADDR
// if y - r < 0 then
28803: LD_VAR 0 3
28807: PUSH
28808: LD_VAR 0 4
28812: MINUS
28813: PUSH
28814: LD_INT 0
28816: LESS
28817: IFFALSE 28829
// min_y := 0 else
28819: LD_ADDR_VAR 0 8
28823: PUSH
28824: LD_INT 0
28826: ST_TO_ADDR
28827: GO 28845
// min_y := y - r ;
28829: LD_ADDR_VAR 0 8
28833: PUSH
28834: LD_VAR 0 3
28838: PUSH
28839: LD_VAR 0 4
28843: MINUS
28844: ST_TO_ADDR
// max_x := x + r ;
28845: LD_ADDR_VAR 0 9
28849: PUSH
28850: LD_VAR 0 2
28854: PUSH
28855: LD_VAR 0 4
28859: PLUS
28860: ST_TO_ADDR
// max_y := y + r ;
28861: LD_ADDR_VAR 0 10
28865: PUSH
28866: LD_VAR 0 3
28870: PUSH
28871: LD_VAR 0 4
28875: PLUS
28876: ST_TO_ADDR
// for _x = min_x to max_x do
28877: LD_ADDR_VAR 0 11
28881: PUSH
28882: DOUBLE
28883: LD_VAR 0 7
28887: DEC
28888: ST_TO_ADDR
28889: LD_VAR 0 9
28893: PUSH
28894: FOR_TO
28895: IFFALSE 29012
// for _y = min_y to max_y do
28897: LD_ADDR_VAR 0 12
28901: PUSH
28902: DOUBLE
28903: LD_VAR 0 8
28907: DEC
28908: ST_TO_ADDR
28909: LD_VAR 0 10
28913: PUSH
28914: FOR_TO
28915: IFFALSE 29008
// begin if not ValidHex ( _x , _y ) then
28917: LD_VAR 0 11
28921: PPUSH
28922: LD_VAR 0 12
28926: PPUSH
28927: CALL_OW 488
28931: NOT
28932: IFFALSE 28936
// continue ;
28934: GO 28914
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28936: LD_VAR 0 11
28940: PPUSH
28941: LD_VAR 0 12
28945: PPUSH
28946: CALL_OW 351
28950: PUSH
28951: LD_VAR 0 11
28955: PPUSH
28956: LD_VAR 0 12
28960: PPUSH
28961: CALL_OW 554
28965: AND
28966: IFFALSE 29006
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28968: LD_ADDR_VAR 0 13
28972: PUSH
28973: LD_VAR 0 13
28977: PPUSH
28978: LD_VAR 0 13
28982: PUSH
28983: LD_INT 1
28985: PLUS
28986: PPUSH
28987: LD_VAR 0 11
28991: PUSH
28992: LD_VAR 0 12
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PPUSH
29001: CALL_OW 2
29005: ST_TO_ADDR
// end ;
29006: GO 28914
29008: POP
29009: POP
29010: GO 28894
29012: POP
29013: POP
// if not list then
29014: LD_VAR 0 13
29018: NOT
29019: IFFALSE 29023
// exit ;
29021: GO 29094
// for i in list do
29023: LD_ADDR_VAR 0 6
29027: PUSH
29028: LD_VAR 0 13
29032: PUSH
29033: FOR_IN
29034: IFFALSE 29092
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29036: LD_VAR 0 1
29040: PPUSH
29041: LD_STRING M
29043: PUSH
29044: LD_VAR 0 6
29048: PUSH
29049: LD_INT 1
29051: ARRAY
29052: PUSH
29053: LD_VAR 0 6
29057: PUSH
29058: LD_INT 2
29060: ARRAY
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: PPUSH
29086: CALL_OW 447
29090: GO 29033
29092: POP
29093: POP
// end ;
29094: LD_VAR 0 5
29098: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29099: LD_EXP 109
29103: NOT
29104: IFFALSE 29154
29106: GO 29108
29108: DISABLE
// begin initHack := true ;
29109: LD_ADDR_EXP 109
29113: PUSH
29114: LD_INT 1
29116: ST_TO_ADDR
// hackTanks := [ ] ;
29117: LD_ADDR_EXP 110
29121: PUSH
29122: EMPTY
29123: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29124: LD_ADDR_EXP 111
29128: PUSH
29129: EMPTY
29130: ST_TO_ADDR
// hackLimit := 3 ;
29131: LD_ADDR_EXP 112
29135: PUSH
29136: LD_INT 3
29138: ST_TO_ADDR
// hackDist := 12 ;
29139: LD_ADDR_EXP 113
29143: PUSH
29144: LD_INT 12
29146: ST_TO_ADDR
// hackCounter := [ ] ;
29147: LD_ADDR_EXP 114
29151: PUSH
29152: EMPTY
29153: ST_TO_ADDR
// end ;
29154: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29155: LD_EXP 109
29159: PUSH
29160: LD_INT 34
29162: PUSH
29163: LD_EXP 40
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PPUSH
29172: CALL_OW 69
29176: AND
29177: IFFALSE 29432
29179: GO 29181
29181: DISABLE
29182: LD_INT 0
29184: PPUSH
29185: PPUSH
// begin enable ;
29186: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29187: LD_ADDR_VAR 0 1
29191: PUSH
29192: LD_INT 34
29194: PUSH
29195: LD_EXP 40
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PPUSH
29204: CALL_OW 69
29208: PUSH
29209: FOR_IN
29210: IFFALSE 29430
// begin if not i in hackTanks then
29212: LD_VAR 0 1
29216: PUSH
29217: LD_EXP 110
29221: IN
29222: NOT
29223: IFFALSE 29306
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29225: LD_ADDR_EXP 110
29229: PUSH
29230: LD_EXP 110
29234: PPUSH
29235: LD_EXP 110
29239: PUSH
29240: LD_INT 1
29242: PLUS
29243: PPUSH
29244: LD_VAR 0 1
29248: PPUSH
29249: CALL_OW 1
29253: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29254: LD_ADDR_EXP 111
29258: PUSH
29259: LD_EXP 111
29263: PPUSH
29264: LD_EXP 111
29268: PUSH
29269: LD_INT 1
29271: PLUS
29272: PPUSH
29273: EMPTY
29274: PPUSH
29275: CALL_OW 1
29279: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29280: LD_ADDR_EXP 114
29284: PUSH
29285: LD_EXP 114
29289: PPUSH
29290: LD_EXP 114
29294: PUSH
29295: LD_INT 1
29297: PLUS
29298: PPUSH
29299: EMPTY
29300: PPUSH
29301: CALL_OW 1
29305: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 302
29315: NOT
29316: IFFALSE 29329
// begin HackUnlinkAll ( i ) ;
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL 29435 0 1
// continue ;
29327: GO 29209
// end ; HackCheckCapturedStatus ( i ) ;
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL 29878 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29338: LD_ADDR_VAR 0 2
29342: PUSH
29343: LD_INT 81
29345: PUSH
29346: LD_VAR 0 1
29350: PPUSH
29351: CALL_OW 255
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 33
29362: PUSH
29363: LD_INT 3
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 91
29372: PUSH
29373: LD_VAR 0 1
29377: PUSH
29378: LD_EXP 113
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 50
29390: PUSH
29391: EMPTY
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: PPUSH
29400: CALL_OW 69
29404: ST_TO_ADDR
// if not tmp then
29405: LD_VAR 0 2
29409: NOT
29410: IFFALSE 29414
// continue ;
29412: GO 29209
// HackLink ( i , tmp ) ;
29414: LD_VAR 0 1
29418: PPUSH
29419: LD_VAR 0 2
29423: PPUSH
29424: CALL 29571 0 2
// end ;
29428: GO 29209
29430: POP
29431: POP
// end ;
29432: PPOPN 2
29434: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29435: LD_INT 0
29437: PPUSH
29438: PPUSH
29439: PPUSH
// if not hack in hackTanks then
29440: LD_VAR 0 1
29444: PUSH
29445: LD_EXP 110
29449: IN
29450: NOT
29451: IFFALSE 29455
// exit ;
29453: GO 29566
// index := GetElementIndex ( hackTanks , hack ) ;
29455: LD_ADDR_VAR 0 4
29459: PUSH
29460: LD_EXP 110
29464: PPUSH
29465: LD_VAR 0 1
29469: PPUSH
29470: CALL 37000 0 2
29474: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29475: LD_EXP 111
29479: PUSH
29480: LD_VAR 0 4
29484: ARRAY
29485: IFFALSE 29566
// begin for i in hackTanksCaptured [ index ] do
29487: LD_ADDR_VAR 0 3
29491: PUSH
29492: LD_EXP 111
29496: PUSH
29497: LD_VAR 0 4
29501: ARRAY
29502: PUSH
29503: FOR_IN
29504: IFFALSE 29530
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29506: LD_VAR 0 3
29510: PUSH
29511: LD_INT 1
29513: ARRAY
29514: PPUSH
29515: LD_VAR 0 3
29519: PUSH
29520: LD_INT 2
29522: ARRAY
29523: PPUSH
29524: CALL_OW 235
29528: GO 29503
29530: POP
29531: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29532: LD_ADDR_EXP 111
29536: PUSH
29537: LD_EXP 111
29541: PPUSH
29542: LD_VAR 0 4
29546: PPUSH
29547: EMPTY
29548: PPUSH
29549: CALL_OW 1
29553: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29554: LD_VAR 0 1
29558: PPUSH
29559: LD_INT 0
29561: PPUSH
29562: CALL_OW 505
// end ; end ;
29566: LD_VAR 0 2
29570: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29571: LD_INT 0
29573: PPUSH
29574: PPUSH
29575: PPUSH
// if not hack in hackTanks or not vehicles then
29576: LD_VAR 0 1
29580: PUSH
29581: LD_EXP 110
29585: IN
29586: NOT
29587: PUSH
29588: LD_VAR 0 2
29592: NOT
29593: OR
29594: IFFALSE 29598
// exit ;
29596: GO 29873
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29598: LD_ADDR_VAR 0 2
29602: PUSH
29603: LD_VAR 0 1
29607: PPUSH
29608: LD_VAR 0 2
29612: PPUSH
29613: LD_INT 1
29615: PPUSH
29616: LD_INT 1
29618: PPUSH
29619: CALL 37650 0 4
29623: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29624: LD_ADDR_VAR 0 5
29628: PUSH
29629: LD_EXP 110
29633: PPUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL 37000 0 2
29643: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29644: LD_EXP 111
29648: PUSH
29649: LD_VAR 0 5
29653: ARRAY
29654: PUSH
29655: LD_EXP 112
29659: LESS
29660: IFFALSE 29849
// begin for i := 1 to vehicles do
29662: LD_ADDR_VAR 0 4
29666: PUSH
29667: DOUBLE
29668: LD_INT 1
29670: DEC
29671: ST_TO_ADDR
29672: LD_VAR 0 2
29676: PUSH
29677: FOR_TO
29678: IFFALSE 29847
// begin if hackTanksCaptured [ index ] = hackLimit then
29680: LD_EXP 111
29684: PUSH
29685: LD_VAR 0 5
29689: ARRAY
29690: PUSH
29691: LD_EXP 112
29695: EQUAL
29696: IFFALSE 29700
// break ;
29698: GO 29847
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29700: LD_ADDR_EXP 114
29704: PUSH
29705: LD_EXP 114
29709: PPUSH
29710: LD_VAR 0 5
29714: PPUSH
29715: LD_EXP 114
29719: PUSH
29720: LD_VAR 0 5
29724: ARRAY
29725: PUSH
29726: LD_INT 1
29728: PLUS
29729: PPUSH
29730: CALL_OW 1
29734: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29735: LD_ADDR_EXP 111
29739: PUSH
29740: LD_EXP 111
29744: PPUSH
29745: LD_VAR 0 5
29749: PUSH
29750: LD_EXP 111
29754: PUSH
29755: LD_VAR 0 5
29759: ARRAY
29760: PUSH
29761: LD_INT 1
29763: PLUS
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PPUSH
29769: LD_VAR 0 2
29773: PUSH
29774: LD_VAR 0 4
29778: ARRAY
29779: PUSH
29780: LD_VAR 0 2
29784: PUSH
29785: LD_VAR 0 4
29789: ARRAY
29790: PPUSH
29791: CALL_OW 255
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PPUSH
29800: CALL 37215 0 3
29804: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29805: LD_VAR 0 2
29809: PUSH
29810: LD_VAR 0 4
29814: ARRAY
29815: PPUSH
29816: LD_VAR 0 1
29820: PPUSH
29821: CALL_OW 255
29825: PPUSH
29826: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29830: LD_VAR 0 2
29834: PUSH
29835: LD_VAR 0 4
29839: ARRAY
29840: PPUSH
29841: CALL_OW 141
// end ;
29845: GO 29677
29847: POP
29848: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29849: LD_VAR 0 1
29853: PPUSH
29854: LD_EXP 111
29858: PUSH
29859: LD_VAR 0 5
29863: ARRAY
29864: PUSH
29865: LD_INT 0
29867: PLUS
29868: PPUSH
29869: CALL_OW 505
// end ;
29873: LD_VAR 0 3
29877: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29878: LD_INT 0
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
// if not hack in hackTanks then
29884: LD_VAR 0 1
29888: PUSH
29889: LD_EXP 110
29893: IN
29894: NOT
29895: IFFALSE 29899
// exit ;
29897: GO 30139
// index := GetElementIndex ( hackTanks , hack ) ;
29899: LD_ADDR_VAR 0 4
29903: PUSH
29904: LD_EXP 110
29908: PPUSH
29909: LD_VAR 0 1
29913: PPUSH
29914: CALL 37000 0 2
29918: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29919: LD_ADDR_VAR 0 3
29923: PUSH
29924: DOUBLE
29925: LD_EXP 111
29929: PUSH
29930: LD_VAR 0 4
29934: ARRAY
29935: INC
29936: ST_TO_ADDR
29937: LD_INT 1
29939: PUSH
29940: FOR_DOWNTO
29941: IFFALSE 30113
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29943: LD_ADDR_VAR 0 5
29947: PUSH
29948: LD_EXP 111
29952: PUSH
29953: LD_VAR 0 4
29957: ARRAY
29958: PUSH
29959: LD_VAR 0 3
29963: ARRAY
29964: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29965: LD_VAR 0 5
29969: PUSH
29970: LD_INT 1
29972: ARRAY
29973: PPUSH
29974: CALL_OW 302
29978: NOT
29979: PUSH
29980: LD_VAR 0 5
29984: PUSH
29985: LD_INT 1
29987: ARRAY
29988: PPUSH
29989: CALL_OW 255
29993: PUSH
29994: LD_VAR 0 1
29998: PPUSH
29999: CALL_OW 255
30003: NONEQUAL
30004: OR
30005: IFFALSE 30111
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30007: LD_VAR 0 5
30011: PUSH
30012: LD_INT 1
30014: ARRAY
30015: PPUSH
30016: CALL_OW 305
30020: PUSH
30021: LD_VAR 0 5
30025: PUSH
30026: LD_INT 1
30028: ARRAY
30029: PPUSH
30030: CALL_OW 255
30034: PUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 255
30044: EQUAL
30045: AND
30046: IFFALSE 30070
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30048: LD_VAR 0 5
30052: PUSH
30053: LD_INT 1
30055: ARRAY
30056: PPUSH
30057: LD_VAR 0 5
30061: PUSH
30062: LD_INT 2
30064: ARRAY
30065: PPUSH
30066: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30070: LD_ADDR_EXP 111
30074: PUSH
30075: LD_EXP 111
30079: PPUSH
30080: LD_VAR 0 4
30084: PPUSH
30085: LD_EXP 111
30089: PUSH
30090: LD_VAR 0 4
30094: ARRAY
30095: PPUSH
30096: LD_VAR 0 3
30100: PPUSH
30101: CALL_OW 3
30105: PPUSH
30106: CALL_OW 1
30110: ST_TO_ADDR
// end ; end ;
30111: GO 29940
30113: POP
30114: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30115: LD_VAR 0 1
30119: PPUSH
30120: LD_EXP 111
30124: PUSH
30125: LD_VAR 0 4
30129: ARRAY
30130: PUSH
30131: LD_INT 0
30133: PLUS
30134: PPUSH
30135: CALL_OW 505
// end ;
30139: LD_VAR 0 2
30143: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30144: LD_INT 0
30146: PPUSH
30147: PPUSH
30148: PPUSH
30149: PPUSH
// if not hack in hackTanks then
30150: LD_VAR 0 1
30154: PUSH
30155: LD_EXP 110
30159: IN
30160: NOT
30161: IFFALSE 30165
// exit ;
30163: GO 30250
// index := GetElementIndex ( hackTanks , hack ) ;
30165: LD_ADDR_VAR 0 5
30169: PUSH
30170: LD_EXP 110
30174: PPUSH
30175: LD_VAR 0 1
30179: PPUSH
30180: CALL 37000 0 2
30184: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30185: LD_ADDR_VAR 0 4
30189: PUSH
30190: DOUBLE
30191: LD_INT 1
30193: DEC
30194: ST_TO_ADDR
30195: LD_EXP 111
30199: PUSH
30200: LD_VAR 0 5
30204: ARRAY
30205: PUSH
30206: FOR_TO
30207: IFFALSE 30248
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30209: LD_EXP 111
30213: PUSH
30214: LD_VAR 0 5
30218: ARRAY
30219: PUSH
30220: LD_VAR 0 4
30224: ARRAY
30225: PUSH
30226: LD_INT 1
30228: ARRAY
30229: PUSH
30230: LD_VAR 0 2
30234: EQUAL
30235: IFFALSE 30246
// KillUnit ( vehicle ) ;
30237: LD_VAR 0 2
30241: PPUSH
30242: CALL_OW 66
30246: GO 30206
30248: POP
30249: POP
// end ;
30250: LD_VAR 0 3
30254: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30255: LD_EXP 115
30259: NOT
30260: IFFALSE 30295
30262: GO 30264
30264: DISABLE
// begin initMiner := true ;
30265: LD_ADDR_EXP 115
30269: PUSH
30270: LD_INT 1
30272: ST_TO_ADDR
// minersList := [ ] ;
30273: LD_ADDR_EXP 116
30277: PUSH
30278: EMPTY
30279: ST_TO_ADDR
// minerMinesList := [ ] ;
30280: LD_ADDR_EXP 117
30284: PUSH
30285: EMPTY
30286: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30287: LD_ADDR_EXP 118
30291: PUSH
30292: LD_INT 5
30294: ST_TO_ADDR
// end ;
30295: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30296: LD_EXP 115
30300: PUSH
30301: LD_INT 34
30303: PUSH
30304: LD_EXP 45
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: AND
30318: IFFALSE 30781
30320: GO 30322
30322: DISABLE
30323: LD_INT 0
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
// begin enable ;
30329: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30330: LD_ADDR_VAR 0 1
30334: PUSH
30335: LD_INT 34
30337: PUSH
30338: LD_EXP 45
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PPUSH
30347: CALL_OW 69
30351: PUSH
30352: FOR_IN
30353: IFFALSE 30425
// begin if not i in minersList then
30355: LD_VAR 0 1
30359: PUSH
30360: LD_EXP 116
30364: IN
30365: NOT
30366: IFFALSE 30423
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30368: LD_ADDR_EXP 116
30372: PUSH
30373: LD_EXP 116
30377: PPUSH
30378: LD_EXP 116
30382: PUSH
30383: LD_INT 1
30385: PLUS
30386: PPUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 1
30396: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30397: LD_ADDR_EXP 117
30401: PUSH
30402: LD_EXP 117
30406: PPUSH
30407: LD_EXP 117
30411: PUSH
30412: LD_INT 1
30414: PLUS
30415: PPUSH
30416: EMPTY
30417: PPUSH
30418: CALL_OW 1
30422: ST_TO_ADDR
// end end ;
30423: GO 30352
30425: POP
30426: POP
// for i := minerMinesList downto 1 do
30427: LD_ADDR_VAR 0 1
30431: PUSH
30432: DOUBLE
30433: LD_EXP 117
30437: INC
30438: ST_TO_ADDR
30439: LD_INT 1
30441: PUSH
30442: FOR_DOWNTO
30443: IFFALSE 30779
// begin if IsLive ( minersList [ i ] ) then
30445: LD_EXP 116
30449: PUSH
30450: LD_VAR 0 1
30454: ARRAY
30455: PPUSH
30456: CALL_OW 300
30460: IFFALSE 30488
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30462: LD_EXP 116
30466: PUSH
30467: LD_VAR 0 1
30471: ARRAY
30472: PPUSH
30473: LD_EXP 117
30477: PUSH
30478: LD_VAR 0 1
30482: ARRAY
30483: PPUSH
30484: CALL_OW 505
// if not minerMinesList [ i ] then
30488: LD_EXP 117
30492: PUSH
30493: LD_VAR 0 1
30497: ARRAY
30498: NOT
30499: IFFALSE 30503
// continue ;
30501: GO 30442
// for j := minerMinesList [ i ] downto 1 do
30503: LD_ADDR_VAR 0 2
30507: PUSH
30508: DOUBLE
30509: LD_EXP 117
30513: PUSH
30514: LD_VAR 0 1
30518: ARRAY
30519: INC
30520: ST_TO_ADDR
30521: LD_INT 1
30523: PUSH
30524: FOR_DOWNTO
30525: IFFALSE 30775
// begin side := GetSide ( minersList [ i ] ) ;
30527: LD_ADDR_VAR 0 3
30531: PUSH
30532: LD_EXP 116
30536: PUSH
30537: LD_VAR 0 1
30541: ARRAY
30542: PPUSH
30543: CALL_OW 255
30547: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30548: LD_ADDR_VAR 0 4
30552: PUSH
30553: LD_EXP 117
30557: PUSH
30558: LD_VAR 0 1
30562: ARRAY
30563: PUSH
30564: LD_VAR 0 2
30568: ARRAY
30569: PUSH
30570: LD_INT 1
30572: ARRAY
30573: PPUSH
30574: LD_EXP 117
30578: PUSH
30579: LD_VAR 0 1
30583: ARRAY
30584: PUSH
30585: LD_VAR 0 2
30589: ARRAY
30590: PUSH
30591: LD_INT 2
30593: ARRAY
30594: PPUSH
30595: CALL_OW 428
30599: ST_TO_ADDR
// if not tmp then
30600: LD_VAR 0 4
30604: NOT
30605: IFFALSE 30609
// continue ;
30607: GO 30524
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30609: LD_VAR 0 4
30613: PUSH
30614: LD_INT 81
30616: PUSH
30617: LD_VAR 0 3
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PPUSH
30626: CALL_OW 69
30630: IN
30631: PUSH
30632: LD_EXP 117
30636: PUSH
30637: LD_VAR 0 1
30641: ARRAY
30642: PUSH
30643: LD_VAR 0 2
30647: ARRAY
30648: PUSH
30649: LD_INT 1
30651: ARRAY
30652: PPUSH
30653: LD_EXP 117
30657: PUSH
30658: LD_VAR 0 1
30662: ARRAY
30663: PUSH
30664: LD_VAR 0 2
30668: ARRAY
30669: PUSH
30670: LD_INT 2
30672: ARRAY
30673: PPUSH
30674: CALL_OW 458
30678: AND
30679: IFFALSE 30773
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30681: LD_EXP 117
30685: PUSH
30686: LD_VAR 0 1
30690: ARRAY
30691: PUSH
30692: LD_VAR 0 2
30696: ARRAY
30697: PUSH
30698: LD_INT 1
30700: ARRAY
30701: PPUSH
30702: LD_EXP 117
30706: PUSH
30707: LD_VAR 0 1
30711: ARRAY
30712: PUSH
30713: LD_VAR 0 2
30717: ARRAY
30718: PUSH
30719: LD_INT 2
30721: ARRAY
30722: PPUSH
30723: LD_VAR 0 3
30727: PPUSH
30728: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30732: LD_ADDR_EXP 117
30736: PUSH
30737: LD_EXP 117
30741: PPUSH
30742: LD_VAR 0 1
30746: PPUSH
30747: LD_EXP 117
30751: PUSH
30752: LD_VAR 0 1
30756: ARRAY
30757: PPUSH
30758: LD_VAR 0 2
30762: PPUSH
30763: CALL_OW 3
30767: PPUSH
30768: CALL_OW 1
30772: ST_TO_ADDR
// end ; end ;
30773: GO 30524
30775: POP
30776: POP
// end ;
30777: GO 30442
30779: POP
30780: POP
// end ;
30781: PPOPN 4
30783: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30784: LD_INT 0
30786: PPUSH
30787: PPUSH
// result := false ;
30788: LD_ADDR_VAR 0 4
30792: PUSH
30793: LD_INT 0
30795: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30796: LD_VAR 0 1
30800: PPUSH
30801: CALL_OW 264
30805: PUSH
30806: LD_EXP 45
30810: EQUAL
30811: NOT
30812: IFFALSE 30816
// exit ;
30814: GO 31056
// index := GetElementIndex ( minersList , unit ) ;
30816: LD_ADDR_VAR 0 5
30820: PUSH
30821: LD_EXP 116
30825: PPUSH
30826: LD_VAR 0 1
30830: PPUSH
30831: CALL 37000 0 2
30835: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30836: LD_EXP 117
30840: PUSH
30841: LD_VAR 0 5
30845: ARRAY
30846: PUSH
30847: LD_EXP 118
30851: GREATEREQUAL
30852: IFFALSE 30856
// exit ;
30854: GO 31056
// ComMoveXY ( unit , x , y ) ;
30856: LD_VAR 0 1
30860: PPUSH
30861: LD_VAR 0 2
30865: PPUSH
30866: LD_VAR 0 3
30870: PPUSH
30871: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30875: LD_INT 35
30877: PPUSH
30878: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30882: LD_VAR 0 1
30886: PPUSH
30887: LD_VAR 0 2
30891: PPUSH
30892: LD_VAR 0 3
30896: PPUSH
30897: CALL 67064 0 3
30901: NOT
30902: PUSH
30903: LD_VAR 0 1
30907: PPUSH
30908: CALL_OW 314
30912: AND
30913: IFFALSE 30917
// exit ;
30915: GO 31056
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30917: LD_VAR 0 2
30921: PPUSH
30922: LD_VAR 0 3
30926: PPUSH
30927: CALL_OW 428
30931: PUSH
30932: LD_VAR 0 1
30936: EQUAL
30937: PUSH
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL_OW 314
30947: NOT
30948: AND
30949: IFFALSE 30875
// PlaySoundXY ( x , y , PlantMine ) ;
30951: LD_VAR 0 2
30955: PPUSH
30956: LD_VAR 0 3
30960: PPUSH
30961: LD_STRING PlantMine
30963: PPUSH
30964: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30968: LD_VAR 0 2
30972: PPUSH
30973: LD_VAR 0 3
30977: PPUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 255
30987: PPUSH
30988: LD_INT 0
30990: PPUSH
30991: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30995: LD_ADDR_EXP 117
30999: PUSH
31000: LD_EXP 117
31004: PPUSH
31005: LD_VAR 0 5
31009: PUSH
31010: LD_EXP 117
31014: PUSH
31015: LD_VAR 0 5
31019: ARRAY
31020: PUSH
31021: LD_INT 1
31023: PLUS
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PPUSH
31029: LD_VAR 0 2
31033: PUSH
31034: LD_VAR 0 3
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PPUSH
31043: CALL 37215 0 3
31047: ST_TO_ADDR
// result := true ;
31048: LD_ADDR_VAR 0 4
31052: PUSH
31053: LD_INT 1
31055: ST_TO_ADDR
// end ;
31056: LD_VAR 0 4
31060: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31061: LD_INT 0
31063: PPUSH
31064: PPUSH
31065: PPUSH
// if not unit in minersList then
31066: LD_VAR 0 1
31070: PUSH
31071: LD_EXP 116
31075: IN
31076: NOT
31077: IFFALSE 31081
// exit ;
31079: GO 31473
// index := GetElementIndex ( minersList , unit ) ;
31081: LD_ADDR_VAR 0 6
31085: PUSH
31086: LD_EXP 116
31090: PPUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL 37000 0 2
31100: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31101: LD_ADDR_VAR 0 5
31105: PUSH
31106: DOUBLE
31107: LD_EXP 117
31111: PUSH
31112: LD_VAR 0 6
31116: ARRAY
31117: INC
31118: ST_TO_ADDR
31119: LD_INT 1
31121: PUSH
31122: FOR_DOWNTO
31123: IFFALSE 31284
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31125: LD_EXP 117
31129: PUSH
31130: LD_VAR 0 6
31134: ARRAY
31135: PUSH
31136: LD_VAR 0 5
31140: ARRAY
31141: PUSH
31142: LD_INT 1
31144: ARRAY
31145: PUSH
31146: LD_VAR 0 2
31150: EQUAL
31151: PUSH
31152: LD_EXP 117
31156: PUSH
31157: LD_VAR 0 6
31161: ARRAY
31162: PUSH
31163: LD_VAR 0 5
31167: ARRAY
31168: PUSH
31169: LD_INT 2
31171: ARRAY
31172: PUSH
31173: LD_VAR 0 3
31177: EQUAL
31178: AND
31179: IFFALSE 31282
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31181: LD_EXP 117
31185: PUSH
31186: LD_VAR 0 6
31190: ARRAY
31191: PUSH
31192: LD_VAR 0 5
31196: ARRAY
31197: PUSH
31198: LD_INT 1
31200: ARRAY
31201: PPUSH
31202: LD_EXP 117
31206: PUSH
31207: LD_VAR 0 6
31211: ARRAY
31212: PUSH
31213: LD_VAR 0 5
31217: ARRAY
31218: PUSH
31219: LD_INT 2
31221: ARRAY
31222: PPUSH
31223: LD_VAR 0 1
31227: PPUSH
31228: CALL_OW 255
31232: PPUSH
31233: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31237: LD_ADDR_EXP 117
31241: PUSH
31242: LD_EXP 117
31246: PPUSH
31247: LD_VAR 0 6
31251: PPUSH
31252: LD_EXP 117
31256: PUSH
31257: LD_VAR 0 6
31261: ARRAY
31262: PPUSH
31263: LD_VAR 0 5
31267: PPUSH
31268: CALL_OW 3
31272: PPUSH
31273: CALL_OW 1
31277: ST_TO_ADDR
// exit ;
31278: POP
31279: POP
31280: GO 31473
// end ; end ;
31282: GO 31122
31284: POP
31285: POP
// for i := minerMinesList [ index ] downto 1 do
31286: LD_ADDR_VAR 0 5
31290: PUSH
31291: DOUBLE
31292: LD_EXP 117
31296: PUSH
31297: LD_VAR 0 6
31301: ARRAY
31302: INC
31303: ST_TO_ADDR
31304: LD_INT 1
31306: PUSH
31307: FOR_DOWNTO
31308: IFFALSE 31471
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31310: LD_EXP 117
31314: PUSH
31315: LD_VAR 0 6
31319: ARRAY
31320: PUSH
31321: LD_VAR 0 5
31325: ARRAY
31326: PUSH
31327: LD_INT 1
31329: ARRAY
31330: PPUSH
31331: LD_EXP 117
31335: PUSH
31336: LD_VAR 0 6
31340: ARRAY
31341: PUSH
31342: LD_VAR 0 5
31346: ARRAY
31347: PUSH
31348: LD_INT 2
31350: ARRAY
31351: PPUSH
31352: LD_VAR 0 2
31356: PPUSH
31357: LD_VAR 0 3
31361: PPUSH
31362: CALL_OW 298
31366: PUSH
31367: LD_INT 6
31369: LESS
31370: IFFALSE 31469
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31372: LD_EXP 117
31376: PUSH
31377: LD_VAR 0 6
31381: ARRAY
31382: PUSH
31383: LD_VAR 0 5
31387: ARRAY
31388: PUSH
31389: LD_INT 1
31391: ARRAY
31392: PPUSH
31393: LD_EXP 117
31397: PUSH
31398: LD_VAR 0 6
31402: ARRAY
31403: PUSH
31404: LD_VAR 0 5
31408: ARRAY
31409: PUSH
31410: LD_INT 2
31412: ARRAY
31413: PPUSH
31414: LD_VAR 0 1
31418: PPUSH
31419: CALL_OW 255
31423: PPUSH
31424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31428: LD_ADDR_EXP 117
31432: PUSH
31433: LD_EXP 117
31437: PPUSH
31438: LD_VAR 0 6
31442: PPUSH
31443: LD_EXP 117
31447: PUSH
31448: LD_VAR 0 6
31452: ARRAY
31453: PPUSH
31454: LD_VAR 0 5
31458: PPUSH
31459: CALL_OW 3
31463: PPUSH
31464: CALL_OW 1
31468: ST_TO_ADDR
// end ; end ;
31469: GO 31307
31471: POP
31472: POP
// end ;
31473: LD_VAR 0 4
31477: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31478: LD_INT 0
31480: PPUSH
31481: PPUSH
31482: PPUSH
31483: PPUSH
31484: PPUSH
31485: PPUSH
31486: PPUSH
31487: PPUSH
31488: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL_OW 264
31498: PUSH
31499: LD_EXP 45
31503: EQUAL
31504: NOT
31505: PUSH
31506: LD_VAR 0 1
31510: PUSH
31511: LD_EXP 116
31515: IN
31516: NOT
31517: OR
31518: IFFALSE 31522
// exit ;
31520: GO 31844
// index := GetElementIndex ( minersList , unit ) ;
31522: LD_ADDR_VAR 0 6
31526: PUSH
31527: LD_EXP 116
31531: PPUSH
31532: LD_VAR 0 1
31536: PPUSH
31537: CALL 37000 0 2
31541: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31542: LD_ADDR_VAR 0 8
31546: PUSH
31547: LD_EXP 118
31551: PUSH
31552: LD_EXP 117
31556: PUSH
31557: LD_VAR 0 6
31561: ARRAY
31562: MINUS
31563: ST_TO_ADDR
// if not minesFreeAmount then
31564: LD_VAR 0 8
31568: NOT
31569: IFFALSE 31573
// exit ;
31571: GO 31844
// tmp := [ ] ;
31573: LD_ADDR_VAR 0 7
31577: PUSH
31578: EMPTY
31579: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31580: LD_ADDR_VAR 0 5
31584: PUSH
31585: DOUBLE
31586: LD_INT 1
31588: DEC
31589: ST_TO_ADDR
31590: LD_VAR 0 8
31594: PUSH
31595: FOR_TO
31596: IFFALSE 31791
// begin _d := rand ( 0 , 5 ) ;
31598: LD_ADDR_VAR 0 11
31602: PUSH
31603: LD_INT 0
31605: PPUSH
31606: LD_INT 5
31608: PPUSH
31609: CALL_OW 12
31613: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31614: LD_ADDR_VAR 0 12
31618: PUSH
31619: LD_INT 2
31621: PPUSH
31622: LD_INT 6
31624: PPUSH
31625: CALL_OW 12
31629: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31630: LD_ADDR_VAR 0 9
31634: PUSH
31635: LD_VAR 0 2
31639: PPUSH
31640: LD_VAR 0 11
31644: PPUSH
31645: LD_VAR 0 12
31649: PPUSH
31650: CALL_OW 272
31654: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31655: LD_ADDR_VAR 0 10
31659: PUSH
31660: LD_VAR 0 3
31664: PPUSH
31665: LD_VAR 0 11
31669: PPUSH
31670: LD_VAR 0 12
31674: PPUSH
31675: CALL_OW 273
31679: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31680: LD_VAR 0 9
31684: PPUSH
31685: LD_VAR 0 10
31689: PPUSH
31690: CALL_OW 488
31694: PUSH
31695: LD_VAR 0 9
31699: PUSH
31700: LD_VAR 0 10
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_VAR 0 7
31713: IN
31714: NOT
31715: AND
31716: PUSH
31717: LD_VAR 0 9
31721: PPUSH
31722: LD_VAR 0 10
31726: PPUSH
31727: CALL_OW 458
31731: NOT
31732: AND
31733: IFFALSE 31775
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31735: LD_ADDR_VAR 0 7
31739: PUSH
31740: LD_VAR 0 7
31744: PPUSH
31745: LD_VAR 0 7
31749: PUSH
31750: LD_INT 1
31752: PLUS
31753: PPUSH
31754: LD_VAR 0 9
31758: PUSH
31759: LD_VAR 0 10
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PPUSH
31768: CALL_OW 1
31772: ST_TO_ADDR
31773: GO 31789
// i := i - 1 ;
31775: LD_ADDR_VAR 0 5
31779: PUSH
31780: LD_VAR 0 5
31784: PUSH
31785: LD_INT 1
31787: MINUS
31788: ST_TO_ADDR
// end ;
31789: GO 31595
31791: POP
31792: POP
// for i in tmp do
31793: LD_ADDR_VAR 0 5
31797: PUSH
31798: LD_VAR 0 7
31802: PUSH
31803: FOR_IN
31804: IFFALSE 31842
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31806: LD_VAR 0 1
31810: PPUSH
31811: LD_VAR 0 5
31815: PUSH
31816: LD_INT 1
31818: ARRAY
31819: PPUSH
31820: LD_VAR 0 5
31824: PUSH
31825: LD_INT 2
31827: ARRAY
31828: PPUSH
31829: CALL 30784 0 3
31833: NOT
31834: IFFALSE 31840
// exit ;
31836: POP
31837: POP
31838: GO 31844
31840: GO 31803
31842: POP
31843: POP
// end ;
31844: LD_VAR 0 4
31848: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31849: LD_INT 0
31851: PPUSH
31852: PPUSH
31853: PPUSH
31854: PPUSH
31855: PPUSH
31856: PPUSH
31857: PPUSH
// if not GetClass ( unit ) = class_sniper then
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 257
31867: PUSH
31868: LD_INT 5
31870: EQUAL
31871: NOT
31872: IFFALSE 31876
// exit ;
31874: GO 32264
// dist := 8 ;
31876: LD_ADDR_VAR 0 5
31880: PUSH
31881: LD_INT 8
31883: ST_TO_ADDR
// viewRange := 12 ;
31884: LD_ADDR_VAR 0 7
31888: PUSH
31889: LD_INT 12
31891: ST_TO_ADDR
// side := GetSide ( unit ) ;
31892: LD_ADDR_VAR 0 6
31896: PUSH
31897: LD_VAR 0 1
31901: PPUSH
31902: CALL_OW 255
31906: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31907: LD_INT 61
31909: PPUSH
31910: LD_VAR 0 6
31914: PPUSH
31915: CALL_OW 321
31919: PUSH
31920: LD_INT 2
31922: EQUAL
31923: IFFALSE 31933
// viewRange := 16 ;
31925: LD_ADDR_VAR 0 7
31929: PUSH
31930: LD_INT 16
31932: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31933: LD_VAR 0 1
31937: PPUSH
31938: LD_VAR 0 2
31942: PPUSH
31943: LD_VAR 0 3
31947: PPUSH
31948: CALL_OW 297
31952: PUSH
31953: LD_VAR 0 5
31957: GREATER
31958: IFFALSE 32037
// begin ComMoveXY ( unit , x , y ) ;
31960: LD_VAR 0 1
31964: PPUSH
31965: LD_VAR 0 2
31969: PPUSH
31970: LD_VAR 0 3
31974: PPUSH
31975: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31979: LD_INT 35
31981: PPUSH
31982: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31986: LD_VAR 0 1
31990: PPUSH
31991: LD_VAR 0 2
31995: PPUSH
31996: LD_VAR 0 3
32000: PPUSH
32001: CALL 67064 0 3
32005: NOT
32006: IFFALSE 32010
// exit ;
32008: GO 32264
// until GetDistUnitXY ( unit , x , y ) < dist ;
32010: LD_VAR 0 1
32014: PPUSH
32015: LD_VAR 0 2
32019: PPUSH
32020: LD_VAR 0 3
32024: PPUSH
32025: CALL_OW 297
32029: PUSH
32030: LD_VAR 0 5
32034: LESS
32035: IFFALSE 31979
// end ; ComTurnXY ( unit , x , y ) ;
32037: LD_VAR 0 1
32041: PPUSH
32042: LD_VAR 0 2
32046: PPUSH
32047: LD_VAR 0 3
32051: PPUSH
32052: CALL_OW 118
// wait ( 5 ) ;
32056: LD_INT 5
32058: PPUSH
32059: CALL_OW 67
// _d := GetDir ( unit ) ;
32063: LD_ADDR_VAR 0 10
32067: PUSH
32068: LD_VAR 0 1
32072: PPUSH
32073: CALL_OW 254
32077: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32078: LD_ADDR_VAR 0 8
32082: PUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 250
32092: PPUSH
32093: LD_VAR 0 10
32097: PPUSH
32098: LD_VAR 0 5
32102: PPUSH
32103: CALL_OW 272
32107: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32108: LD_ADDR_VAR 0 9
32112: PUSH
32113: LD_VAR 0 1
32117: PPUSH
32118: CALL_OW 251
32122: PPUSH
32123: LD_VAR 0 10
32127: PPUSH
32128: LD_VAR 0 5
32132: PPUSH
32133: CALL_OW 273
32137: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32138: LD_VAR 0 8
32142: PPUSH
32143: LD_VAR 0 9
32147: PPUSH
32148: CALL_OW 488
32152: NOT
32153: IFFALSE 32157
// exit ;
32155: GO 32264
// ComAnimCustom ( unit , 1 ) ;
32157: LD_VAR 0 1
32161: PPUSH
32162: LD_INT 1
32164: PPUSH
32165: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32169: LD_VAR 0 8
32173: PPUSH
32174: LD_VAR 0 9
32178: PPUSH
32179: LD_VAR 0 6
32183: PPUSH
32184: LD_VAR 0 7
32188: PPUSH
32189: CALL_OW 330
// repeat wait ( 1 ) ;
32193: LD_INT 1
32195: PPUSH
32196: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 316
32209: PUSH
32210: LD_VAR 0 1
32214: PPUSH
32215: CALL_OW 314
32219: OR
32220: PUSH
32221: LD_VAR 0 1
32225: PPUSH
32226: CALL_OW 302
32230: NOT
32231: OR
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 301
32242: OR
32243: IFFALSE 32193
// RemoveSeeing ( _x , _y , side ) ;
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 9
32254: PPUSH
32255: LD_VAR 0 6
32259: PPUSH
32260: CALL_OW 331
// end ; end_of_file
32264: LD_VAR 0 4
32268: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32269: LD_INT 0
32271: PPUSH
32272: PPUSH
// if exist_mode then
32273: LD_VAR 0 2
32277: IFFALSE 32302
// unit := CreateCharacter ( prefix & ident ) else
32279: LD_ADDR_VAR 0 5
32283: PUSH
32284: LD_VAR 0 3
32288: PUSH
32289: LD_VAR 0 1
32293: STR
32294: PPUSH
32295: CALL_OW 34
32299: ST_TO_ADDR
32300: GO 32317
// unit := NewCharacter ( ident ) ;
32302: LD_ADDR_VAR 0 5
32306: PUSH
32307: LD_VAR 0 1
32311: PPUSH
32312: CALL_OW 25
32316: ST_TO_ADDR
// result := unit ;
32317: LD_ADDR_VAR 0 4
32321: PUSH
32322: LD_VAR 0 5
32326: ST_TO_ADDR
// end ;
32327: LD_VAR 0 4
32331: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32332: LD_INT 0
32334: PPUSH
32335: PPUSH
// if not side or not nation then
32336: LD_VAR 0 1
32340: NOT
32341: PUSH
32342: LD_VAR 0 2
32346: NOT
32347: OR
32348: IFFALSE 32352
// exit ;
32350: GO 33116
// case nation of nation_american :
32352: LD_VAR 0 2
32356: PUSH
32357: LD_INT 1
32359: DOUBLE
32360: EQUAL
32361: IFTRUE 32365
32363: GO 32579
32365: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32366: LD_ADDR_VAR 0 4
32370: PUSH
32371: LD_INT 35
32373: PUSH
32374: LD_INT 45
32376: PUSH
32377: LD_INT 46
32379: PUSH
32380: LD_INT 47
32382: PUSH
32383: LD_INT 82
32385: PUSH
32386: LD_INT 83
32388: PUSH
32389: LD_INT 84
32391: PUSH
32392: LD_INT 85
32394: PUSH
32395: LD_INT 86
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: LD_INT 6
32406: PUSH
32407: LD_INT 15
32409: PUSH
32410: LD_INT 16
32412: PUSH
32413: LD_INT 7
32415: PUSH
32416: LD_INT 12
32418: PUSH
32419: LD_INT 13
32421: PUSH
32422: LD_INT 10
32424: PUSH
32425: LD_INT 14
32427: PUSH
32428: LD_INT 20
32430: PUSH
32431: LD_INT 21
32433: PUSH
32434: LD_INT 22
32436: PUSH
32437: LD_INT 25
32439: PUSH
32440: LD_INT 32
32442: PUSH
32443: LD_INT 27
32445: PUSH
32446: LD_INT 36
32448: PUSH
32449: LD_INT 69
32451: PUSH
32452: LD_INT 39
32454: PUSH
32455: LD_INT 34
32457: PUSH
32458: LD_INT 40
32460: PUSH
32461: LD_INT 48
32463: PUSH
32464: LD_INT 49
32466: PUSH
32467: LD_INT 50
32469: PUSH
32470: LD_INT 51
32472: PUSH
32473: LD_INT 52
32475: PUSH
32476: LD_INT 53
32478: PUSH
32479: LD_INT 54
32481: PUSH
32482: LD_INT 55
32484: PUSH
32485: LD_INT 56
32487: PUSH
32488: LD_INT 57
32490: PUSH
32491: LD_INT 58
32493: PUSH
32494: LD_INT 59
32496: PUSH
32497: LD_INT 60
32499: PUSH
32500: LD_INT 61
32502: PUSH
32503: LD_INT 62
32505: PUSH
32506: LD_INT 80
32508: PUSH
32509: LD_INT 82
32511: PUSH
32512: LD_INT 83
32514: PUSH
32515: LD_INT 84
32517: PUSH
32518: LD_INT 85
32520: PUSH
32521: LD_INT 86
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: ST_TO_ADDR
32577: GO 33040
32579: LD_INT 2
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32809
32587: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32588: LD_ADDR_VAR 0 4
32592: PUSH
32593: LD_INT 35
32595: PUSH
32596: LD_INT 45
32598: PUSH
32599: LD_INT 46
32601: PUSH
32602: LD_INT 47
32604: PUSH
32605: LD_INT 82
32607: PUSH
32608: LD_INT 83
32610: PUSH
32611: LD_INT 84
32613: PUSH
32614: LD_INT 85
32616: PUSH
32617: LD_INT 87
32619: PUSH
32620: LD_INT 70
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 11
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: LD_INT 6
32640: PUSH
32641: LD_INT 15
32643: PUSH
32644: LD_INT 18
32646: PUSH
32647: LD_INT 7
32649: PUSH
32650: LD_INT 17
32652: PUSH
32653: LD_INT 8
32655: PUSH
32656: LD_INT 20
32658: PUSH
32659: LD_INT 21
32661: PUSH
32662: LD_INT 22
32664: PUSH
32665: LD_INT 72
32667: PUSH
32668: LD_INT 26
32670: PUSH
32671: LD_INT 69
32673: PUSH
32674: LD_INT 39
32676: PUSH
32677: LD_INT 40
32679: PUSH
32680: LD_INT 41
32682: PUSH
32683: LD_INT 42
32685: PUSH
32686: LD_INT 43
32688: PUSH
32689: LD_INT 48
32691: PUSH
32692: LD_INT 49
32694: PUSH
32695: LD_INT 50
32697: PUSH
32698: LD_INT 51
32700: PUSH
32701: LD_INT 52
32703: PUSH
32704: LD_INT 53
32706: PUSH
32707: LD_INT 54
32709: PUSH
32710: LD_INT 55
32712: PUSH
32713: LD_INT 56
32715: PUSH
32716: LD_INT 60
32718: PUSH
32719: LD_INT 61
32721: PUSH
32722: LD_INT 62
32724: PUSH
32725: LD_INT 66
32727: PUSH
32728: LD_INT 67
32730: PUSH
32731: LD_INT 68
32733: PUSH
32734: LD_INT 81
32736: PUSH
32737: LD_INT 82
32739: PUSH
32740: LD_INT 83
32742: PUSH
32743: LD_INT 84
32745: PUSH
32746: LD_INT 85
32748: PUSH
32749: LD_INT 87
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: ST_TO_ADDR
32807: GO 33040
32809: LD_INT 3
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 33039
32817: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32818: LD_ADDR_VAR 0 4
32822: PUSH
32823: LD_INT 46
32825: PUSH
32826: LD_INT 47
32828: PUSH
32829: LD_INT 1
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 82
32837: PUSH
32838: LD_INT 83
32840: PUSH
32841: LD_INT 84
32843: PUSH
32844: LD_INT 85
32846: PUSH
32847: LD_INT 86
32849: PUSH
32850: LD_INT 11
32852: PUSH
32853: LD_INT 9
32855: PUSH
32856: LD_INT 20
32858: PUSH
32859: LD_INT 19
32861: PUSH
32862: LD_INT 21
32864: PUSH
32865: LD_INT 24
32867: PUSH
32868: LD_INT 22
32870: PUSH
32871: LD_INT 25
32873: PUSH
32874: LD_INT 28
32876: PUSH
32877: LD_INT 29
32879: PUSH
32880: LD_INT 30
32882: PUSH
32883: LD_INT 31
32885: PUSH
32886: LD_INT 37
32888: PUSH
32889: LD_INT 38
32891: PUSH
32892: LD_INT 32
32894: PUSH
32895: LD_INT 27
32897: PUSH
32898: LD_INT 33
32900: PUSH
32901: LD_INT 69
32903: PUSH
32904: LD_INT 39
32906: PUSH
32907: LD_INT 34
32909: PUSH
32910: LD_INT 40
32912: PUSH
32913: LD_INT 71
32915: PUSH
32916: LD_INT 23
32918: PUSH
32919: LD_INT 44
32921: PUSH
32922: LD_INT 48
32924: PUSH
32925: LD_INT 49
32927: PUSH
32928: LD_INT 50
32930: PUSH
32931: LD_INT 51
32933: PUSH
32934: LD_INT 52
32936: PUSH
32937: LD_INT 53
32939: PUSH
32940: LD_INT 54
32942: PUSH
32943: LD_INT 55
32945: PUSH
32946: LD_INT 56
32948: PUSH
32949: LD_INT 57
32951: PUSH
32952: LD_INT 58
32954: PUSH
32955: LD_INT 59
32957: PUSH
32958: LD_INT 63
32960: PUSH
32961: LD_INT 64
32963: PUSH
32964: LD_INT 65
32966: PUSH
32967: LD_INT 82
32969: PUSH
32970: LD_INT 83
32972: PUSH
32973: LD_INT 84
32975: PUSH
32976: LD_INT 85
32978: PUSH
32979: LD_INT 86
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: ST_TO_ADDR
33037: GO 33040
33039: POP
// if state > - 1 and state < 3 then
33040: LD_VAR 0 3
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: GREATER
33049: PUSH
33050: LD_VAR 0 3
33054: PUSH
33055: LD_INT 3
33057: LESS
33058: AND
33059: IFFALSE 33116
// for i in result do
33061: LD_ADDR_VAR 0 5
33065: PUSH
33066: LD_VAR 0 4
33070: PUSH
33071: FOR_IN
33072: IFFALSE 33114
// if GetTech ( i , side ) <> state then
33074: LD_VAR 0 5
33078: PPUSH
33079: LD_VAR 0 1
33083: PPUSH
33084: CALL_OW 321
33088: PUSH
33089: LD_VAR 0 3
33093: NONEQUAL
33094: IFFALSE 33112
// result := result diff i ;
33096: LD_ADDR_VAR 0 4
33100: PUSH
33101: LD_VAR 0 4
33105: PUSH
33106: LD_VAR 0 5
33110: DIFF
33111: ST_TO_ADDR
33112: GO 33071
33114: POP
33115: POP
// end ;
33116: LD_VAR 0 4
33120: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33121: LD_INT 0
33123: PPUSH
33124: PPUSH
33125: PPUSH
// result := true ;
33126: LD_ADDR_VAR 0 3
33130: PUSH
33131: LD_INT 1
33133: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33134: LD_ADDR_VAR 0 5
33138: PUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: CALL_OW 480
33148: ST_TO_ADDR
// if not tmp then
33149: LD_VAR 0 5
33153: NOT
33154: IFFALSE 33158
// exit ;
33156: GO 33207
// for i in tmp do
33158: LD_ADDR_VAR 0 4
33162: PUSH
33163: LD_VAR 0 5
33167: PUSH
33168: FOR_IN
33169: IFFALSE 33205
// if GetTech ( i , side ) <> state_researched then
33171: LD_VAR 0 4
33175: PPUSH
33176: LD_VAR 0 1
33180: PPUSH
33181: CALL_OW 321
33185: PUSH
33186: LD_INT 2
33188: NONEQUAL
33189: IFFALSE 33203
// begin result := false ;
33191: LD_ADDR_VAR 0 3
33195: PUSH
33196: LD_INT 0
33198: ST_TO_ADDR
// exit ;
33199: POP
33200: POP
33201: GO 33207
// end ;
33203: GO 33168
33205: POP
33206: POP
// end ;
33207: LD_VAR 0 3
33211: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33212: LD_INT 0
33214: PPUSH
33215: PPUSH
33216: PPUSH
33217: PPUSH
33218: PPUSH
33219: PPUSH
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33227: LD_VAR 0 1
33231: NOT
33232: PUSH
33233: LD_VAR 0 1
33237: PPUSH
33238: CALL_OW 257
33242: PUSH
33243: LD_INT 9
33245: NONEQUAL
33246: OR
33247: IFFALSE 33251
// exit ;
33249: GO 33824
// side := GetSide ( unit ) ;
33251: LD_ADDR_VAR 0 9
33255: PUSH
33256: LD_VAR 0 1
33260: PPUSH
33261: CALL_OW 255
33265: ST_TO_ADDR
// tech_space := tech_spacanom ;
33266: LD_ADDR_VAR 0 12
33270: PUSH
33271: LD_INT 29
33273: ST_TO_ADDR
// tech_time := tech_taurad ;
33274: LD_ADDR_VAR 0 13
33278: PUSH
33279: LD_INT 28
33281: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33282: LD_ADDR_VAR 0 11
33286: PUSH
33287: LD_VAR 0 1
33291: PPUSH
33292: CALL_OW 310
33296: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33297: LD_VAR 0 11
33301: PPUSH
33302: CALL_OW 247
33306: PUSH
33307: LD_INT 2
33309: EQUAL
33310: IFFALSE 33314
// exit ;
33312: GO 33824
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33314: LD_ADDR_VAR 0 8
33318: PUSH
33319: LD_INT 81
33321: PUSH
33322: LD_VAR 0 9
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 3
33333: PUSH
33334: LD_INT 21
33336: PUSH
33337: LD_INT 3
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PPUSH
33352: CALL_OW 69
33356: ST_TO_ADDR
// if not tmp then
33357: LD_VAR 0 8
33361: NOT
33362: IFFALSE 33366
// exit ;
33364: GO 33824
// if in_unit then
33366: LD_VAR 0 11
33370: IFFALSE 33394
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33372: LD_ADDR_VAR 0 10
33376: PUSH
33377: LD_VAR 0 8
33381: PPUSH
33382: LD_VAR 0 11
33386: PPUSH
33387: CALL_OW 74
33391: ST_TO_ADDR
33392: GO 33414
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33394: LD_ADDR_VAR 0 10
33398: PUSH
33399: LD_VAR 0 8
33403: PPUSH
33404: LD_VAR 0 1
33408: PPUSH
33409: CALL_OW 74
33413: ST_TO_ADDR
// if not enemy then
33414: LD_VAR 0 10
33418: NOT
33419: IFFALSE 33423
// exit ;
33421: GO 33824
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33423: LD_VAR 0 11
33427: PUSH
33428: LD_VAR 0 11
33432: PPUSH
33433: LD_VAR 0 10
33437: PPUSH
33438: CALL_OW 296
33442: PUSH
33443: LD_INT 13
33445: GREATER
33446: AND
33447: PUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: LD_VAR 0 10
33457: PPUSH
33458: CALL_OW 296
33462: PUSH
33463: LD_INT 12
33465: GREATER
33466: OR
33467: IFFALSE 33471
// exit ;
33469: GO 33824
// missile := [ 1 ] ;
33471: LD_ADDR_VAR 0 14
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33482: LD_VAR 0 9
33486: PPUSH
33487: LD_VAR 0 12
33491: PPUSH
33492: CALL_OW 325
33496: IFFALSE 33525
// missile := Insert ( missile , missile + 1 , 2 ) ;
33498: LD_ADDR_VAR 0 14
33502: PUSH
33503: LD_VAR 0 14
33507: PPUSH
33508: LD_VAR 0 14
33512: PUSH
33513: LD_INT 1
33515: PLUS
33516: PPUSH
33517: LD_INT 2
33519: PPUSH
33520: CALL_OW 2
33524: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33525: LD_VAR 0 9
33529: PPUSH
33530: LD_VAR 0 13
33534: PPUSH
33535: CALL_OW 325
33539: PUSH
33540: LD_VAR 0 10
33544: PPUSH
33545: CALL_OW 255
33549: PPUSH
33550: LD_VAR 0 13
33554: PPUSH
33555: CALL_OW 325
33559: NOT
33560: AND
33561: IFFALSE 33590
// missile := Insert ( missile , missile + 1 , 3 ) ;
33563: LD_ADDR_VAR 0 14
33567: PUSH
33568: LD_VAR 0 14
33572: PPUSH
33573: LD_VAR 0 14
33577: PUSH
33578: LD_INT 1
33580: PLUS
33581: PPUSH
33582: LD_INT 3
33584: PPUSH
33585: CALL_OW 2
33589: ST_TO_ADDR
// if missile < 2 then
33590: LD_VAR 0 14
33594: PUSH
33595: LD_INT 2
33597: LESS
33598: IFFALSE 33602
// exit ;
33600: GO 33824
// x := GetX ( enemy ) ;
33602: LD_ADDR_VAR 0 4
33606: PUSH
33607: LD_VAR 0 10
33611: PPUSH
33612: CALL_OW 250
33616: ST_TO_ADDR
// y := GetY ( enemy ) ;
33617: LD_ADDR_VAR 0 5
33621: PUSH
33622: LD_VAR 0 10
33626: PPUSH
33627: CALL_OW 251
33631: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33632: LD_ADDR_VAR 0 6
33636: PUSH
33637: LD_VAR 0 4
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PPUSH
33646: LD_INT 1
33648: PPUSH
33649: CALL_OW 12
33653: PLUS
33654: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33655: LD_ADDR_VAR 0 7
33659: PUSH
33660: LD_VAR 0 5
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PPUSH
33669: LD_INT 1
33671: PPUSH
33672: CALL_OW 12
33676: PLUS
33677: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33678: LD_VAR 0 6
33682: PPUSH
33683: LD_VAR 0 7
33687: PPUSH
33688: CALL_OW 488
33692: NOT
33693: IFFALSE 33715
// begin _x := x ;
33695: LD_ADDR_VAR 0 6
33699: PUSH
33700: LD_VAR 0 4
33704: ST_TO_ADDR
// _y := y ;
33705: LD_ADDR_VAR 0 7
33709: PUSH
33710: LD_VAR 0 5
33714: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_INT 1
33722: PPUSH
33723: LD_VAR 0 14
33727: PPUSH
33728: CALL_OW 12
33732: ST_TO_ADDR
// case i of 1 :
33733: LD_VAR 0 3
33737: PUSH
33738: LD_INT 1
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33763
33746: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33747: LD_VAR 0 1
33751: PPUSH
33752: LD_VAR 0 10
33756: PPUSH
33757: CALL_OW 115
33761: GO 33824
33763: LD_INT 2
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33771
33769: GO 33793
33771: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33772: LD_VAR 0 1
33776: PPUSH
33777: LD_VAR 0 6
33781: PPUSH
33782: LD_VAR 0 7
33786: PPUSH
33787: CALL_OW 153
33791: GO 33824
33793: LD_INT 3
33795: DOUBLE
33796: EQUAL
33797: IFTRUE 33801
33799: GO 33823
33801: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33802: LD_VAR 0 1
33806: PPUSH
33807: LD_VAR 0 6
33811: PPUSH
33812: LD_VAR 0 7
33816: PPUSH
33817: CALL_OW 154
33821: GO 33824
33823: POP
// end ;
33824: LD_VAR 0 2
33828: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33829: LD_INT 0
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
// if not unit or not building then
33837: LD_VAR 0 1
33841: NOT
33842: PUSH
33843: LD_VAR 0 2
33847: NOT
33848: OR
33849: IFFALSE 33853
// exit ;
33851: GO 34011
// x := GetX ( building ) ;
33853: LD_ADDR_VAR 0 5
33857: PUSH
33858: LD_VAR 0 2
33862: PPUSH
33863: CALL_OW 250
33867: ST_TO_ADDR
// y := GetY ( building ) ;
33868: LD_ADDR_VAR 0 6
33872: PUSH
33873: LD_VAR 0 2
33877: PPUSH
33878: CALL_OW 251
33882: ST_TO_ADDR
// for i = 0 to 5 do
33883: LD_ADDR_VAR 0 4
33887: PUSH
33888: DOUBLE
33889: LD_INT 0
33891: DEC
33892: ST_TO_ADDR
33893: LD_INT 5
33895: PUSH
33896: FOR_TO
33897: IFFALSE 34009
// begin _x := ShiftX ( x , i , 3 ) ;
33899: LD_ADDR_VAR 0 7
33903: PUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: LD_VAR 0 4
33913: PPUSH
33914: LD_INT 3
33916: PPUSH
33917: CALL_OW 272
33921: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33922: LD_ADDR_VAR 0 8
33926: PUSH
33927: LD_VAR 0 6
33931: PPUSH
33932: LD_VAR 0 4
33936: PPUSH
33937: LD_INT 3
33939: PPUSH
33940: CALL_OW 273
33944: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33945: LD_VAR 0 7
33949: PPUSH
33950: LD_VAR 0 8
33954: PPUSH
33955: CALL_OW 488
33959: NOT
33960: IFFALSE 33964
// continue ;
33962: GO 33896
// if HexInfo ( _x , _y ) = 0 then
33964: LD_VAR 0 7
33968: PPUSH
33969: LD_VAR 0 8
33973: PPUSH
33974: CALL_OW 428
33978: PUSH
33979: LD_INT 0
33981: EQUAL
33982: IFFALSE 34007
// begin ComMoveXY ( unit , _x , _y ) ;
33984: LD_VAR 0 1
33988: PPUSH
33989: LD_VAR 0 7
33993: PPUSH
33994: LD_VAR 0 8
33998: PPUSH
33999: CALL_OW 111
// exit ;
34003: POP
34004: POP
34005: GO 34011
// end ; end ;
34007: GO 33896
34009: POP
34010: POP
// end ;
34011: LD_VAR 0 3
34015: RET
// export function ScanBase ( side , base_area ) ; begin
34016: LD_INT 0
34018: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34019: LD_ADDR_VAR 0 3
34023: PUSH
34024: LD_VAR 0 2
34028: PPUSH
34029: LD_INT 81
34031: PUSH
34032: LD_VAR 0 1
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PPUSH
34041: CALL_OW 70
34045: ST_TO_ADDR
// end ;
34046: LD_VAR 0 3
34050: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34051: LD_INT 0
34053: PPUSH
34054: PPUSH
34055: PPUSH
34056: PPUSH
// result := false ;
34057: LD_ADDR_VAR 0 2
34061: PUSH
34062: LD_INT 0
34064: ST_TO_ADDR
// side := GetSide ( unit ) ;
34065: LD_ADDR_VAR 0 3
34069: PUSH
34070: LD_VAR 0 1
34074: PPUSH
34075: CALL_OW 255
34079: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34080: LD_ADDR_VAR 0 4
34084: PUSH
34085: LD_VAR 0 1
34089: PPUSH
34090: CALL_OW 248
34094: ST_TO_ADDR
// case nat of 1 :
34095: LD_VAR 0 4
34099: PUSH
34100: LD_INT 1
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34119
34108: POP
// tech := tech_lassight ; 2 :
34109: LD_ADDR_VAR 0 5
34113: PUSH
34114: LD_INT 12
34116: ST_TO_ADDR
34117: GO 34158
34119: LD_INT 2
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34127
34125: GO 34138
34127: POP
// tech := tech_mortar ; 3 :
34128: LD_ADDR_VAR 0 5
34132: PUSH
34133: LD_INT 41
34135: ST_TO_ADDR
34136: GO 34158
34138: LD_INT 3
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34146
34144: GO 34157
34146: POP
// tech := tech_bazooka ; end ;
34147: LD_ADDR_VAR 0 5
34151: PUSH
34152: LD_INT 44
34154: ST_TO_ADDR
34155: GO 34158
34157: POP
// if Researched ( side , tech ) then
34158: LD_VAR 0 3
34162: PPUSH
34163: LD_VAR 0 5
34167: PPUSH
34168: CALL_OW 325
34172: IFFALSE 34199
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34174: LD_ADDR_VAR 0 2
34178: PUSH
34179: LD_INT 5
34181: PUSH
34182: LD_INT 8
34184: PUSH
34185: LD_INT 9
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PUSH
34193: LD_VAR 0 4
34197: ARRAY
34198: ST_TO_ADDR
// end ;
34199: LD_VAR 0 2
34203: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34204: LD_INT 0
34206: PPUSH
34207: PPUSH
34208: PPUSH
// if not mines then
34209: LD_VAR 0 2
34213: NOT
34214: IFFALSE 34218
// exit ;
34216: GO 34362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34218: LD_ADDR_VAR 0 5
34222: PUSH
34223: LD_INT 81
34225: PUSH
34226: LD_VAR 0 1
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: LD_INT 21
34240: PUSH
34241: LD_INT 3
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PPUSH
34256: CALL_OW 69
34260: ST_TO_ADDR
// for i in mines do
34261: LD_ADDR_VAR 0 4
34265: PUSH
34266: LD_VAR 0 2
34270: PUSH
34271: FOR_IN
34272: IFFALSE 34360
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34274: LD_VAR 0 4
34278: PUSH
34279: LD_INT 1
34281: ARRAY
34282: PPUSH
34283: LD_VAR 0 4
34287: PUSH
34288: LD_INT 2
34290: ARRAY
34291: PPUSH
34292: CALL_OW 458
34296: NOT
34297: IFFALSE 34301
// continue ;
34299: GO 34271
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34301: LD_VAR 0 4
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: PPUSH
34310: LD_VAR 0 4
34314: PUSH
34315: LD_INT 2
34317: ARRAY
34318: PPUSH
34319: CALL_OW 428
34323: PUSH
34324: LD_VAR 0 5
34328: IN
34329: IFFALSE 34358
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34331: LD_VAR 0 4
34335: PUSH
34336: LD_INT 1
34338: ARRAY
34339: PPUSH
34340: LD_VAR 0 4
34344: PUSH
34345: LD_INT 2
34347: ARRAY
34348: PPUSH
34349: LD_VAR 0 1
34353: PPUSH
34354: CALL_OW 456
// end ;
34358: GO 34271
34360: POP
34361: POP
// end ;
34362: LD_VAR 0 3
34366: RET
// export function Count ( array ) ; var i ; begin
34367: LD_INT 0
34369: PPUSH
34370: PPUSH
// result := 0 ;
34371: LD_ADDR_VAR 0 2
34375: PUSH
34376: LD_INT 0
34378: ST_TO_ADDR
// for i in array do
34379: LD_ADDR_VAR 0 3
34383: PUSH
34384: LD_VAR 0 1
34388: PUSH
34389: FOR_IN
34390: IFFALSE 34414
// if i then
34392: LD_VAR 0 3
34396: IFFALSE 34412
// result := result + 1 ;
34398: LD_ADDR_VAR 0 2
34402: PUSH
34403: LD_VAR 0 2
34407: PUSH
34408: LD_INT 1
34410: PLUS
34411: ST_TO_ADDR
34412: GO 34389
34414: POP
34415: POP
// end ;
34416: LD_VAR 0 2
34420: RET
// export function IsEmpty ( building ) ; begin
34421: LD_INT 0
34423: PPUSH
// if not building then
34424: LD_VAR 0 1
34428: NOT
34429: IFFALSE 34433
// exit ;
34431: GO 34476
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34433: LD_ADDR_VAR 0 2
34437: PUSH
34438: LD_VAR 0 1
34442: PUSH
34443: LD_INT 22
34445: PUSH
34446: LD_VAR 0 1
34450: PPUSH
34451: CALL_OW 255
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 58
34462: PUSH
34463: EMPTY
34464: LIST
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PPUSH
34470: CALL_OW 69
34474: IN
34475: ST_TO_ADDR
// end ;
34476: LD_VAR 0 2
34480: RET
// export function IsNotFull ( building ) ; begin
34481: LD_INT 0
34483: PPUSH
// if not building then
34484: LD_VAR 0 1
34488: NOT
34489: IFFALSE 34493
// exit ;
34491: GO 34512
// result := UnitsInside ( building ) < 6 ;
34493: LD_ADDR_VAR 0 2
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 313
34507: PUSH
34508: LD_INT 6
34510: LESS
34511: ST_TO_ADDR
// end ;
34512: LD_VAR 0 2
34516: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34517: LD_INT 0
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
// tmp := [ ] ;
34523: LD_ADDR_VAR 0 3
34527: PUSH
34528: EMPTY
34529: ST_TO_ADDR
// list := [ ] ;
34530: LD_ADDR_VAR 0 5
34534: PUSH
34535: EMPTY
34536: ST_TO_ADDR
// for i = 16 to 25 do
34537: LD_ADDR_VAR 0 4
34541: PUSH
34542: DOUBLE
34543: LD_INT 16
34545: DEC
34546: ST_TO_ADDR
34547: LD_INT 25
34549: PUSH
34550: FOR_TO
34551: IFFALSE 34624
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_VAR 0 3
34562: PUSH
34563: LD_INT 22
34565: PUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL_OW 255
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 91
34582: PUSH
34583: LD_VAR 0 1
34587: PUSH
34588: LD_INT 6
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 30
34598: PUSH
34599: LD_VAR 0 4
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: PPUSH
34616: CALL_OW 69
34620: ADD
34621: ST_TO_ADDR
34622: GO 34550
34624: POP
34625: POP
// for i = 1 to tmp do
34626: LD_ADDR_VAR 0 4
34630: PUSH
34631: DOUBLE
34632: LD_INT 1
34634: DEC
34635: ST_TO_ADDR
34636: LD_VAR 0 3
34640: PUSH
34641: FOR_TO
34642: IFFALSE 34730
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34644: LD_ADDR_VAR 0 5
34648: PUSH
34649: LD_VAR 0 5
34653: PUSH
34654: LD_VAR 0 3
34658: PUSH
34659: LD_VAR 0 4
34663: ARRAY
34664: PPUSH
34665: CALL_OW 266
34669: PUSH
34670: LD_VAR 0 3
34674: PUSH
34675: LD_VAR 0 4
34679: ARRAY
34680: PPUSH
34681: CALL_OW 250
34685: PUSH
34686: LD_VAR 0 3
34690: PUSH
34691: LD_VAR 0 4
34695: ARRAY
34696: PPUSH
34697: CALL_OW 251
34701: PUSH
34702: LD_VAR 0 3
34706: PUSH
34707: LD_VAR 0 4
34711: ARRAY
34712: PPUSH
34713: CALL_OW 254
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: PUSH
34724: EMPTY
34725: LIST
34726: ADD
34727: ST_TO_ADDR
34728: GO 34641
34730: POP
34731: POP
// result := list ;
34732: LD_ADDR_VAR 0 2
34736: PUSH
34737: LD_VAR 0 5
34741: ST_TO_ADDR
// end ;
34742: LD_VAR 0 2
34746: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34747: LD_INT 0
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
// if not factory then
34756: LD_VAR 0 1
34760: NOT
34761: IFFALSE 34765
// exit ;
34763: GO 35358
// if control = control_apeman then
34765: LD_VAR 0 4
34769: PUSH
34770: LD_INT 5
34772: EQUAL
34773: IFFALSE 34882
// begin tmp := UnitsInside ( factory ) ;
34775: LD_ADDR_VAR 0 8
34779: PUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 313
34789: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34790: LD_VAR 0 8
34794: PPUSH
34795: LD_INT 25
34797: PUSH
34798: LD_INT 12
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PPUSH
34805: CALL_OW 72
34809: NOT
34810: IFFALSE 34820
// control := control_manual ;
34812: LD_ADDR_VAR 0 4
34816: PUSH
34817: LD_INT 1
34819: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34820: LD_ADDR_VAR 0 8
34824: PUSH
34825: LD_VAR 0 1
34829: PPUSH
34830: CALL 34517 0 1
34834: ST_TO_ADDR
// if tmp then
34835: LD_VAR 0 8
34839: IFFALSE 34882
// begin for i in tmp do
34841: LD_ADDR_VAR 0 7
34845: PUSH
34846: LD_VAR 0 8
34850: PUSH
34851: FOR_IN
34852: IFFALSE 34880
// if i [ 1 ] = b_ext_radio then
34854: LD_VAR 0 7
34858: PUSH
34859: LD_INT 1
34861: ARRAY
34862: PUSH
34863: LD_INT 22
34865: EQUAL
34866: IFFALSE 34878
// begin control := control_remote ;
34868: LD_ADDR_VAR 0 4
34872: PUSH
34873: LD_INT 2
34875: ST_TO_ADDR
// break ;
34876: GO 34880
// end ;
34878: GO 34851
34880: POP
34881: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34882: LD_VAR 0 1
34886: PPUSH
34887: LD_VAR 0 2
34891: PPUSH
34892: LD_VAR 0 3
34896: PPUSH
34897: LD_VAR 0 4
34901: PPUSH
34902: LD_VAR 0 5
34906: PPUSH
34907: CALL_OW 448
34911: IFFALSE 34946
// begin result := [ chassis , engine , control , weapon ] ;
34913: LD_ADDR_VAR 0 6
34917: PUSH
34918: LD_VAR 0 2
34922: PUSH
34923: LD_VAR 0 3
34927: PUSH
34928: LD_VAR 0 4
34932: PUSH
34933: LD_VAR 0 5
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
// exit ;
34944: GO 35358
// end ; _chassis := AvailableChassisList ( factory ) ;
34946: LD_ADDR_VAR 0 9
34950: PUSH
34951: LD_VAR 0 1
34955: PPUSH
34956: CALL_OW 475
34960: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34961: LD_ADDR_VAR 0 11
34965: PUSH
34966: LD_VAR 0 1
34970: PPUSH
34971: CALL_OW 476
34975: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34976: LD_ADDR_VAR 0 12
34980: PUSH
34981: LD_VAR 0 1
34985: PPUSH
34986: CALL_OW 477
34990: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34991: LD_ADDR_VAR 0 10
34995: PUSH
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 478
35005: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35006: LD_VAR 0 9
35010: NOT
35011: PUSH
35012: LD_VAR 0 11
35016: NOT
35017: OR
35018: PUSH
35019: LD_VAR 0 12
35023: NOT
35024: OR
35025: PUSH
35026: LD_VAR 0 10
35030: NOT
35031: OR
35032: IFFALSE 35067
// begin result := [ chassis , engine , control , weapon ] ;
35034: LD_ADDR_VAR 0 6
35038: PUSH
35039: LD_VAR 0 2
35043: PUSH
35044: LD_VAR 0 3
35048: PUSH
35049: LD_VAR 0 4
35053: PUSH
35054: LD_VAR 0 5
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: ST_TO_ADDR
// exit ;
35065: GO 35358
// end ; if not chassis in _chassis then
35067: LD_VAR 0 2
35071: PUSH
35072: LD_VAR 0 9
35076: IN
35077: NOT
35078: IFFALSE 35104
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35080: LD_ADDR_VAR 0 2
35084: PUSH
35085: LD_VAR 0 9
35089: PUSH
35090: LD_INT 1
35092: PPUSH
35093: LD_VAR 0 9
35097: PPUSH
35098: CALL_OW 12
35102: ARRAY
35103: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35104: LD_VAR 0 2
35108: PPUSH
35109: LD_VAR 0 3
35113: PPUSH
35114: CALL 35363 0 2
35118: NOT
35119: IFFALSE 35178
// repeat engine := _engine [ 1 ] ;
35121: LD_ADDR_VAR 0 3
35125: PUSH
35126: LD_VAR 0 11
35130: PUSH
35131: LD_INT 1
35133: ARRAY
35134: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35135: LD_ADDR_VAR 0 11
35139: PUSH
35140: LD_VAR 0 11
35144: PPUSH
35145: LD_INT 1
35147: PPUSH
35148: CALL_OW 3
35152: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35153: LD_VAR 0 2
35157: PPUSH
35158: LD_VAR 0 3
35162: PPUSH
35163: CALL 35363 0 2
35167: PUSH
35168: LD_VAR 0 11
35172: PUSH
35173: EMPTY
35174: EQUAL
35175: OR
35176: IFFALSE 35121
// if not control in _control then
35178: LD_VAR 0 4
35182: PUSH
35183: LD_VAR 0 12
35187: IN
35188: NOT
35189: IFFALSE 35215
// control := _control [ rand ( 1 , _control ) ] ;
35191: LD_ADDR_VAR 0 4
35195: PUSH
35196: LD_VAR 0 12
35200: PUSH
35201: LD_INT 1
35203: PPUSH
35204: LD_VAR 0 12
35208: PPUSH
35209: CALL_OW 12
35213: ARRAY
35214: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35215: LD_VAR 0 2
35219: PPUSH
35220: LD_VAR 0 5
35224: PPUSH
35225: CALL 35583 0 2
35229: NOT
35230: IFFALSE 35289
// repeat weapon := _weapon [ 1 ] ;
35232: LD_ADDR_VAR 0 5
35236: PUSH
35237: LD_VAR 0 10
35241: PUSH
35242: LD_INT 1
35244: ARRAY
35245: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35246: LD_ADDR_VAR 0 10
35250: PUSH
35251: LD_VAR 0 10
35255: PPUSH
35256: LD_INT 1
35258: PPUSH
35259: CALL_OW 3
35263: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35264: LD_VAR 0 2
35268: PPUSH
35269: LD_VAR 0 5
35273: PPUSH
35274: CALL 35583 0 2
35278: PUSH
35279: LD_VAR 0 10
35283: PUSH
35284: EMPTY
35285: EQUAL
35286: OR
35287: IFFALSE 35232
// result := [ ] ;
35289: LD_ADDR_VAR 0 6
35293: PUSH
35294: EMPTY
35295: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35296: LD_VAR 0 1
35300: PPUSH
35301: LD_VAR 0 2
35305: PPUSH
35306: LD_VAR 0 3
35310: PPUSH
35311: LD_VAR 0 4
35315: PPUSH
35316: LD_VAR 0 5
35320: PPUSH
35321: CALL_OW 448
35325: IFFALSE 35358
// result := [ chassis , engine , control , weapon ] ;
35327: LD_ADDR_VAR 0 6
35331: PUSH
35332: LD_VAR 0 2
35336: PUSH
35337: LD_VAR 0 3
35341: PUSH
35342: LD_VAR 0 4
35346: PUSH
35347: LD_VAR 0 5
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: ST_TO_ADDR
// end ;
35358: LD_VAR 0 6
35362: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35363: LD_INT 0
35365: PPUSH
// if not chassis or not engine then
35366: LD_VAR 0 1
35370: NOT
35371: PUSH
35372: LD_VAR 0 2
35376: NOT
35377: OR
35378: IFFALSE 35382
// exit ;
35380: GO 35578
// case engine of engine_solar :
35382: LD_VAR 0 2
35386: PUSH
35387: LD_INT 2
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35395
35393: GO 35433
35395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35396: LD_ADDR_VAR 0 3
35400: PUSH
35401: LD_INT 11
35403: PUSH
35404: LD_INT 12
35406: PUSH
35407: LD_INT 13
35409: PUSH
35410: LD_INT 14
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
35431: GO 35562
35433: LD_INT 1
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35441
35439: GO 35503
35441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35442: LD_ADDR_VAR 0 3
35446: PUSH
35447: LD_INT 11
35449: PUSH
35450: LD_INT 12
35452: PUSH
35453: LD_INT 13
35455: PUSH
35456: LD_INT 14
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: LD_INT 2
35464: PUSH
35465: LD_INT 3
35467: PUSH
35468: LD_INT 4
35470: PUSH
35471: LD_INT 5
35473: PUSH
35474: LD_INT 21
35476: PUSH
35477: LD_INT 23
35479: PUSH
35480: LD_INT 22
35482: PUSH
35483: LD_INT 24
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: ST_TO_ADDR
35501: GO 35562
35503: LD_INT 3
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35511
35509: GO 35561
35511: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35512: LD_ADDR_VAR 0 3
35516: PUSH
35517: LD_INT 13
35519: PUSH
35520: LD_INT 14
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 3
35528: PUSH
35529: LD_INT 4
35531: PUSH
35532: LD_INT 5
35534: PUSH
35535: LD_INT 21
35537: PUSH
35538: LD_INT 22
35540: PUSH
35541: LD_INT 23
35543: PUSH
35544: LD_INT 24
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
35559: GO 35562
35561: POP
// result := ( chassis in result ) ;
35562: LD_ADDR_VAR 0 3
35566: PUSH
35567: LD_VAR 0 1
35571: PUSH
35572: LD_VAR 0 3
35576: IN
35577: ST_TO_ADDR
// end ;
35578: LD_VAR 0 3
35582: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35583: LD_INT 0
35585: PPUSH
// if not chassis or not weapon then
35586: LD_VAR 0 1
35590: NOT
35591: PUSH
35592: LD_VAR 0 2
35596: NOT
35597: OR
35598: IFFALSE 35602
// exit ;
35600: GO 36628
// case weapon of us_machine_gun :
35602: LD_VAR 0 2
35606: PUSH
35607: LD_INT 2
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35615
35613: GO 35645
35615: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: LD_INT 3
35629: PUSH
35630: LD_INT 4
35632: PUSH
35633: LD_INT 5
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: ST_TO_ADDR
35643: GO 36612
35645: LD_INT 3
35647: DOUBLE
35648: EQUAL
35649: IFTRUE 35653
35651: GO 35683
35653: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35654: LD_ADDR_VAR 0 3
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: LD_INT 3
35667: PUSH
35668: LD_INT 4
35670: PUSH
35671: LD_INT 5
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: ST_TO_ADDR
35681: GO 36612
35683: LD_INT 11
35685: DOUBLE
35686: EQUAL
35687: IFTRUE 35691
35689: GO 35721
35691: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35692: LD_ADDR_VAR 0 3
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: LD_INT 4
35708: PUSH
35709: LD_INT 5
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
35719: GO 36612
35721: LD_INT 4
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35755
35729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35730: LD_ADDR_VAR 0 3
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: LD_INT 4
35743: PUSH
35744: LD_INT 5
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
35753: GO 36612
35755: LD_INT 5
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35763
35761: GO 35789
35763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: LD_INT 3
35774: PUSH
35775: LD_INT 4
35777: PUSH
35778: LD_INT 5
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: ST_TO_ADDR
35787: GO 36612
35789: LD_INT 9
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35797
35795: GO 35823
35797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35798: LD_ADDR_VAR 0 3
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 3
35808: PUSH
35809: LD_INT 4
35811: PUSH
35812: LD_INT 5
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: ST_TO_ADDR
35821: GO 36612
35823: LD_INT 7
35825: DOUBLE
35826: EQUAL
35827: IFTRUE 35831
35829: GO 35857
35831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35832: LD_ADDR_VAR 0 3
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: LD_INT 3
35842: PUSH
35843: LD_INT 4
35845: PUSH
35846: LD_INT 5
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: ST_TO_ADDR
35855: GO 36612
35857: LD_INT 12
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 35891
35865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35866: LD_ADDR_VAR 0 3
35870: PUSH
35871: LD_INT 2
35873: PUSH
35874: LD_INT 3
35876: PUSH
35877: LD_INT 4
35879: PUSH
35880: LD_INT 5
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: ST_TO_ADDR
35889: GO 36612
35891: LD_INT 13
35893: DOUBLE
35894: EQUAL
35895: IFTRUE 35899
35897: GO 35925
35899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: LD_INT 4
35913: PUSH
35914: LD_INT 5
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: ST_TO_ADDR
35923: GO 36612
35925: LD_INT 14
35927: DOUBLE
35928: EQUAL
35929: IFTRUE 35933
35931: GO 35951
35933: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35934: LD_ADDR_VAR 0 3
35938: PUSH
35939: LD_INT 4
35941: PUSH
35942: LD_INT 5
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: ST_TO_ADDR
35949: GO 36612
35951: LD_INT 6
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35959
35957: GO 35977
35959: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35960: LD_ADDR_VAR 0 3
35964: PUSH
35965: LD_INT 4
35967: PUSH
35968: LD_INT 5
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: ST_TO_ADDR
35975: GO 36612
35977: LD_INT 10
35979: DOUBLE
35980: EQUAL
35981: IFTRUE 35985
35983: GO 36003
35985: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35986: LD_ADDR_VAR 0 3
35990: PUSH
35991: LD_INT 4
35993: PUSH
35994: LD_INT 5
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: ST_TO_ADDR
36001: GO 36612
36003: LD_INT 22
36005: DOUBLE
36006: EQUAL
36007: IFTRUE 36011
36009: GO 36037
36011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36012: LD_ADDR_VAR 0 3
36016: PUSH
36017: LD_INT 11
36019: PUSH
36020: LD_INT 12
36022: PUSH
36023: LD_INT 13
36025: PUSH
36026: LD_INT 14
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
36035: GO 36612
36037: LD_INT 23
36039: DOUBLE
36040: EQUAL
36041: IFTRUE 36045
36043: GO 36071
36045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_INT 11
36053: PUSH
36054: LD_INT 12
36056: PUSH
36057: LD_INT 13
36059: PUSH
36060: LD_INT 14
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
36069: GO 36612
36071: LD_INT 24
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36079
36077: GO 36105
36079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36080: LD_ADDR_VAR 0 3
36084: PUSH
36085: LD_INT 11
36087: PUSH
36088: LD_INT 12
36090: PUSH
36091: LD_INT 13
36093: PUSH
36094: LD_INT 14
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
36103: GO 36612
36105: LD_INT 30
36107: DOUBLE
36108: EQUAL
36109: IFTRUE 36113
36111: GO 36139
36113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_INT 11
36121: PUSH
36122: LD_INT 12
36124: PUSH
36125: LD_INT 13
36127: PUSH
36128: LD_INT 14
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
36137: GO 36612
36139: LD_INT 25
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36147
36145: GO 36165
36147: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36148: LD_ADDR_VAR 0 3
36152: PUSH
36153: LD_INT 13
36155: PUSH
36156: LD_INT 14
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: ST_TO_ADDR
36163: GO 36612
36165: LD_INT 27
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36191
36173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_INT 13
36181: PUSH
36182: LD_INT 14
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: ST_TO_ADDR
36189: GO 36612
36191: LD_INT 28
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36199
36197: GO 36217
36199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 13
36207: PUSH
36208: LD_INT 14
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: ST_TO_ADDR
36215: GO 36612
36217: LD_INT 29
36219: DOUBLE
36220: EQUAL
36221: IFTRUE 36225
36223: GO 36243
36225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_INT 13
36233: PUSH
36234: LD_INT 14
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: ST_TO_ADDR
36241: GO 36612
36243: LD_INT 31
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36269
36251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_INT 13
36259: PUSH
36260: LD_INT 14
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: ST_TO_ADDR
36267: GO 36612
36269: LD_INT 26
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36295
36277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 13
36285: PUSH
36286: LD_INT 14
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: ST_TO_ADDR
36293: GO 36612
36295: LD_INT 42
36297: DOUBLE
36298: EQUAL
36299: IFTRUE 36303
36301: GO 36329
36303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36304: LD_ADDR_VAR 0 3
36308: PUSH
36309: LD_INT 21
36311: PUSH
36312: LD_INT 22
36314: PUSH
36315: LD_INT 23
36317: PUSH
36318: LD_INT 24
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: ST_TO_ADDR
36327: GO 36612
36329: LD_INT 43
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36337
36335: GO 36363
36337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36338: LD_ADDR_VAR 0 3
36342: PUSH
36343: LD_INT 21
36345: PUSH
36346: LD_INT 22
36348: PUSH
36349: LD_INT 23
36351: PUSH
36352: LD_INT 24
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: ST_TO_ADDR
36361: GO 36612
36363: LD_INT 44
36365: DOUBLE
36366: EQUAL
36367: IFTRUE 36371
36369: GO 36397
36371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36372: LD_ADDR_VAR 0 3
36376: PUSH
36377: LD_INT 21
36379: PUSH
36380: LD_INT 22
36382: PUSH
36383: LD_INT 23
36385: PUSH
36386: LD_INT 24
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
36395: GO 36612
36397: LD_INT 45
36399: DOUBLE
36400: EQUAL
36401: IFTRUE 36405
36403: GO 36431
36405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36406: LD_ADDR_VAR 0 3
36410: PUSH
36411: LD_INT 21
36413: PUSH
36414: LD_INT 22
36416: PUSH
36417: LD_INT 23
36419: PUSH
36420: LD_INT 24
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: ST_TO_ADDR
36429: GO 36612
36431: LD_INT 49
36433: DOUBLE
36434: EQUAL
36435: IFTRUE 36439
36437: GO 36465
36439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36440: LD_ADDR_VAR 0 3
36444: PUSH
36445: LD_INT 21
36447: PUSH
36448: LD_INT 22
36450: PUSH
36451: LD_INT 23
36453: PUSH
36454: LD_INT 24
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: ST_TO_ADDR
36463: GO 36612
36465: LD_INT 51
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36473
36471: GO 36499
36473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36474: LD_ADDR_VAR 0 3
36478: PUSH
36479: LD_INT 21
36481: PUSH
36482: LD_INT 22
36484: PUSH
36485: LD_INT 23
36487: PUSH
36488: LD_INT 24
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
36497: GO 36612
36499: LD_INT 52
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36507
36505: GO 36533
36507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36508: LD_ADDR_VAR 0 3
36512: PUSH
36513: LD_INT 21
36515: PUSH
36516: LD_INT 22
36518: PUSH
36519: LD_INT 23
36521: PUSH
36522: LD_INT 24
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
36531: GO 36612
36533: LD_INT 53
36535: DOUBLE
36536: EQUAL
36537: IFTRUE 36541
36539: GO 36559
36541: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36542: LD_ADDR_VAR 0 3
36546: PUSH
36547: LD_INT 23
36549: PUSH
36550: LD_INT 24
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: ST_TO_ADDR
36557: GO 36612
36559: LD_INT 46
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36567
36565: GO 36585
36567: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: LD_INT 23
36575: PUSH
36576: LD_INT 24
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: ST_TO_ADDR
36583: GO 36612
36585: LD_INT 47
36587: DOUBLE
36588: EQUAL
36589: IFTRUE 36593
36591: GO 36611
36593: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36594: LD_ADDR_VAR 0 3
36598: PUSH
36599: LD_INT 23
36601: PUSH
36602: LD_INT 24
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: ST_TO_ADDR
36609: GO 36612
36611: POP
// result := ( chassis in result ) ;
36612: LD_ADDR_VAR 0 3
36616: PUSH
36617: LD_VAR 0 1
36621: PUSH
36622: LD_VAR 0 3
36626: IN
36627: ST_TO_ADDR
// end ;
36628: LD_VAR 0 3
36632: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36633: LD_INT 0
36635: PPUSH
36636: PPUSH
36637: PPUSH
36638: PPUSH
36639: PPUSH
36640: PPUSH
36641: PPUSH
// result := array ;
36642: LD_ADDR_VAR 0 5
36646: PUSH
36647: LD_VAR 0 1
36651: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36652: LD_VAR 0 1
36656: NOT
36657: PUSH
36658: LD_VAR 0 2
36662: NOT
36663: OR
36664: PUSH
36665: LD_VAR 0 3
36669: NOT
36670: OR
36671: PUSH
36672: LD_VAR 0 2
36676: PUSH
36677: LD_VAR 0 1
36681: GREATER
36682: OR
36683: PUSH
36684: LD_VAR 0 3
36688: PUSH
36689: LD_VAR 0 1
36693: GREATER
36694: OR
36695: IFFALSE 36699
// exit ;
36697: GO 36995
// if direction then
36699: LD_VAR 0 4
36703: IFFALSE 36767
// begin d := 1 ;
36705: LD_ADDR_VAR 0 9
36709: PUSH
36710: LD_INT 1
36712: ST_TO_ADDR
// if i_from > i_to then
36713: LD_VAR 0 2
36717: PUSH
36718: LD_VAR 0 3
36722: GREATER
36723: IFFALSE 36749
// length := ( array - i_from ) + i_to else
36725: LD_ADDR_VAR 0 11
36729: PUSH
36730: LD_VAR 0 1
36734: PUSH
36735: LD_VAR 0 2
36739: MINUS
36740: PUSH
36741: LD_VAR 0 3
36745: PLUS
36746: ST_TO_ADDR
36747: GO 36765
// length := i_to - i_from ;
36749: LD_ADDR_VAR 0 11
36753: PUSH
36754: LD_VAR 0 3
36758: PUSH
36759: LD_VAR 0 2
36763: MINUS
36764: ST_TO_ADDR
// end else
36765: GO 36828
// begin d := - 1 ;
36767: LD_ADDR_VAR 0 9
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: ST_TO_ADDR
// if i_from > i_to then
36776: LD_VAR 0 2
36780: PUSH
36781: LD_VAR 0 3
36785: GREATER
36786: IFFALSE 36806
// length := i_from - i_to else
36788: LD_ADDR_VAR 0 11
36792: PUSH
36793: LD_VAR 0 2
36797: PUSH
36798: LD_VAR 0 3
36802: MINUS
36803: ST_TO_ADDR
36804: GO 36828
// length := ( array - i_to ) + i_from ;
36806: LD_ADDR_VAR 0 11
36810: PUSH
36811: LD_VAR 0 1
36815: PUSH
36816: LD_VAR 0 3
36820: MINUS
36821: PUSH
36822: LD_VAR 0 2
36826: PLUS
36827: ST_TO_ADDR
// end ; if not length then
36828: LD_VAR 0 11
36832: NOT
36833: IFFALSE 36837
// exit ;
36835: GO 36995
// tmp := array ;
36837: LD_ADDR_VAR 0 10
36841: PUSH
36842: LD_VAR 0 1
36846: ST_TO_ADDR
// for i = 1 to length do
36847: LD_ADDR_VAR 0 6
36851: PUSH
36852: DOUBLE
36853: LD_INT 1
36855: DEC
36856: ST_TO_ADDR
36857: LD_VAR 0 11
36861: PUSH
36862: FOR_TO
36863: IFFALSE 36983
// begin for j = 1 to array do
36865: LD_ADDR_VAR 0 7
36869: PUSH
36870: DOUBLE
36871: LD_INT 1
36873: DEC
36874: ST_TO_ADDR
36875: LD_VAR 0 1
36879: PUSH
36880: FOR_TO
36881: IFFALSE 36969
// begin k := j + d ;
36883: LD_ADDR_VAR 0 8
36887: PUSH
36888: LD_VAR 0 7
36892: PUSH
36893: LD_VAR 0 9
36897: PLUS
36898: ST_TO_ADDR
// if k > array then
36899: LD_VAR 0 8
36903: PUSH
36904: LD_VAR 0 1
36908: GREATER
36909: IFFALSE 36919
// k := 1 ;
36911: LD_ADDR_VAR 0 8
36915: PUSH
36916: LD_INT 1
36918: ST_TO_ADDR
// if not k then
36919: LD_VAR 0 8
36923: NOT
36924: IFFALSE 36936
// k := array ;
36926: LD_ADDR_VAR 0 8
36930: PUSH
36931: LD_VAR 0 1
36935: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36936: LD_ADDR_VAR 0 10
36940: PUSH
36941: LD_VAR 0 10
36945: PPUSH
36946: LD_VAR 0 8
36950: PPUSH
36951: LD_VAR 0 1
36955: PUSH
36956: LD_VAR 0 7
36960: ARRAY
36961: PPUSH
36962: CALL_OW 1
36966: ST_TO_ADDR
// end ;
36967: GO 36880
36969: POP
36970: POP
// array := tmp ;
36971: LD_ADDR_VAR 0 1
36975: PUSH
36976: LD_VAR 0 10
36980: ST_TO_ADDR
// end ;
36981: GO 36862
36983: POP
36984: POP
// result := array ;
36985: LD_ADDR_VAR 0 5
36989: PUSH
36990: LD_VAR 0 1
36994: ST_TO_ADDR
// end ;
36995: LD_VAR 0 5
36999: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37000: LD_INT 0
37002: PPUSH
37003: PPUSH
// result := 0 ;
37004: LD_ADDR_VAR 0 3
37008: PUSH
37009: LD_INT 0
37011: ST_TO_ADDR
// if not array or not value in array then
37012: LD_VAR 0 1
37016: NOT
37017: PUSH
37018: LD_VAR 0 2
37022: PUSH
37023: LD_VAR 0 1
37027: IN
37028: NOT
37029: OR
37030: IFFALSE 37034
// exit ;
37032: GO 37088
// for i = 1 to array do
37034: LD_ADDR_VAR 0 4
37038: PUSH
37039: DOUBLE
37040: LD_INT 1
37042: DEC
37043: ST_TO_ADDR
37044: LD_VAR 0 1
37048: PUSH
37049: FOR_TO
37050: IFFALSE 37086
// if value = array [ i ] then
37052: LD_VAR 0 2
37056: PUSH
37057: LD_VAR 0 1
37061: PUSH
37062: LD_VAR 0 4
37066: ARRAY
37067: EQUAL
37068: IFFALSE 37084
// begin result := i ;
37070: LD_ADDR_VAR 0 3
37074: PUSH
37075: LD_VAR 0 4
37079: ST_TO_ADDR
// exit ;
37080: POP
37081: POP
37082: GO 37088
// end ;
37084: GO 37049
37086: POP
37087: POP
// end ;
37088: LD_VAR 0 3
37092: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37093: LD_INT 0
37095: PPUSH
// vc_chassis := chassis ;
37096: LD_ADDR_OWVAR 37
37100: PUSH
37101: LD_VAR 0 1
37105: ST_TO_ADDR
// vc_engine := engine ;
37106: LD_ADDR_OWVAR 39
37110: PUSH
37111: LD_VAR 0 2
37115: ST_TO_ADDR
// vc_control := control ;
37116: LD_ADDR_OWVAR 38
37120: PUSH
37121: LD_VAR 0 3
37125: ST_TO_ADDR
// vc_weapon := weapon ;
37126: LD_ADDR_OWVAR 40
37130: PUSH
37131: LD_VAR 0 4
37135: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37136: LD_ADDR_OWVAR 41
37140: PUSH
37141: LD_VAR 0 5
37145: ST_TO_ADDR
// end ;
37146: LD_VAR 0 6
37150: RET
// export function WantPlant ( unit ) ; var task ; begin
37151: LD_INT 0
37153: PPUSH
37154: PPUSH
// result := false ;
37155: LD_ADDR_VAR 0 2
37159: PUSH
37160: LD_INT 0
37162: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37163: LD_ADDR_VAR 0 3
37167: PUSH
37168: LD_VAR 0 1
37172: PPUSH
37173: CALL_OW 437
37177: ST_TO_ADDR
// if task then
37178: LD_VAR 0 3
37182: IFFALSE 37210
// if task [ 1 ] [ 1 ] = p then
37184: LD_VAR 0 3
37188: PUSH
37189: LD_INT 1
37191: ARRAY
37192: PUSH
37193: LD_INT 1
37195: ARRAY
37196: PUSH
37197: LD_STRING p
37199: EQUAL
37200: IFFALSE 37210
// result := true ;
37202: LD_ADDR_VAR 0 2
37206: PUSH
37207: LD_INT 1
37209: ST_TO_ADDR
// end ;
37210: LD_VAR 0 2
37214: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37215: LD_INT 0
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
// if pos < 1 then
37221: LD_VAR 0 2
37225: PUSH
37226: LD_INT 1
37228: LESS
37229: IFFALSE 37233
// exit ;
37231: GO 37536
// if pos = 1 then
37233: LD_VAR 0 2
37237: PUSH
37238: LD_INT 1
37240: EQUAL
37241: IFFALSE 37274
// result := Replace ( arr , pos [ 1 ] , value ) else
37243: LD_ADDR_VAR 0 4
37247: PUSH
37248: LD_VAR 0 1
37252: PPUSH
37253: LD_VAR 0 2
37257: PUSH
37258: LD_INT 1
37260: ARRAY
37261: PPUSH
37262: LD_VAR 0 3
37266: PPUSH
37267: CALL_OW 1
37271: ST_TO_ADDR
37272: GO 37536
// begin tmp := arr ;
37274: LD_ADDR_VAR 0 6
37278: PUSH
37279: LD_VAR 0 1
37283: ST_TO_ADDR
// s_arr := [ tmp ] ;
37284: LD_ADDR_VAR 0 7
37288: PUSH
37289: LD_VAR 0 6
37293: PUSH
37294: EMPTY
37295: LIST
37296: ST_TO_ADDR
// for i = 1 to pos - 1 do
37297: LD_ADDR_VAR 0 5
37301: PUSH
37302: DOUBLE
37303: LD_INT 1
37305: DEC
37306: ST_TO_ADDR
37307: LD_VAR 0 2
37311: PUSH
37312: LD_INT 1
37314: MINUS
37315: PUSH
37316: FOR_TO
37317: IFFALSE 37362
// begin tmp := tmp [ pos [ i ] ] ;
37319: LD_ADDR_VAR 0 6
37323: PUSH
37324: LD_VAR 0 6
37328: PUSH
37329: LD_VAR 0 2
37333: PUSH
37334: LD_VAR 0 5
37338: ARRAY
37339: ARRAY
37340: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37341: LD_ADDR_VAR 0 7
37345: PUSH
37346: LD_VAR 0 7
37350: PUSH
37351: LD_VAR 0 6
37355: PUSH
37356: EMPTY
37357: LIST
37358: ADD
37359: ST_TO_ADDR
// end ;
37360: GO 37316
37362: POP
37363: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37364: LD_ADDR_VAR 0 6
37368: PUSH
37369: LD_VAR 0 6
37373: PPUSH
37374: LD_VAR 0 2
37378: PUSH
37379: LD_VAR 0 2
37383: ARRAY
37384: PPUSH
37385: LD_VAR 0 3
37389: PPUSH
37390: CALL_OW 1
37394: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37395: LD_ADDR_VAR 0 7
37399: PUSH
37400: LD_VAR 0 7
37404: PPUSH
37405: LD_VAR 0 7
37409: PPUSH
37410: LD_VAR 0 6
37414: PPUSH
37415: CALL_OW 1
37419: ST_TO_ADDR
// for i = s_arr downto 2 do
37420: LD_ADDR_VAR 0 5
37424: PUSH
37425: DOUBLE
37426: LD_VAR 0 7
37430: INC
37431: ST_TO_ADDR
37432: LD_INT 2
37434: PUSH
37435: FOR_DOWNTO
37436: IFFALSE 37520
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37438: LD_ADDR_VAR 0 6
37442: PUSH
37443: LD_VAR 0 7
37447: PUSH
37448: LD_VAR 0 5
37452: PUSH
37453: LD_INT 1
37455: MINUS
37456: ARRAY
37457: PPUSH
37458: LD_VAR 0 2
37462: PUSH
37463: LD_VAR 0 5
37467: PUSH
37468: LD_INT 1
37470: MINUS
37471: ARRAY
37472: PPUSH
37473: LD_VAR 0 7
37477: PUSH
37478: LD_VAR 0 5
37482: ARRAY
37483: PPUSH
37484: CALL_OW 1
37488: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37489: LD_ADDR_VAR 0 7
37493: PUSH
37494: LD_VAR 0 7
37498: PPUSH
37499: LD_VAR 0 5
37503: PUSH
37504: LD_INT 1
37506: MINUS
37507: PPUSH
37508: LD_VAR 0 6
37512: PPUSH
37513: CALL_OW 1
37517: ST_TO_ADDR
// end ;
37518: GO 37435
37520: POP
37521: POP
// result := s_arr [ 1 ] ;
37522: LD_ADDR_VAR 0 4
37526: PUSH
37527: LD_VAR 0 7
37531: PUSH
37532: LD_INT 1
37534: ARRAY
37535: ST_TO_ADDR
// end ; end ;
37536: LD_VAR 0 4
37540: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37541: LD_INT 0
37543: PPUSH
37544: PPUSH
// if not list then
37545: LD_VAR 0 1
37549: NOT
37550: IFFALSE 37554
// exit ;
37552: GO 37645
// i := list [ pos1 ] ;
37554: LD_ADDR_VAR 0 5
37558: PUSH
37559: LD_VAR 0 1
37563: PUSH
37564: LD_VAR 0 2
37568: ARRAY
37569: ST_TO_ADDR
// if not i then
37570: LD_VAR 0 5
37574: NOT
37575: IFFALSE 37579
// exit ;
37577: GO 37645
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37579: LD_ADDR_VAR 0 1
37583: PUSH
37584: LD_VAR 0 1
37588: PPUSH
37589: LD_VAR 0 2
37593: PPUSH
37594: LD_VAR 0 1
37598: PUSH
37599: LD_VAR 0 3
37603: ARRAY
37604: PPUSH
37605: CALL_OW 1
37609: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37610: LD_ADDR_VAR 0 1
37614: PUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: LD_VAR 0 3
37624: PPUSH
37625: LD_VAR 0 5
37629: PPUSH
37630: CALL_OW 1
37634: ST_TO_ADDR
// result := list ;
37635: LD_ADDR_VAR 0 4
37639: PUSH
37640: LD_VAR 0 1
37644: ST_TO_ADDR
// end ;
37645: LD_VAR 0 4
37649: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37650: LD_INT 0
37652: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37653: LD_ADDR_VAR 0 5
37657: PUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: CALL_OW 250
37667: PPUSH
37668: LD_VAR 0 1
37672: PPUSH
37673: CALL_OW 251
37677: PPUSH
37678: LD_VAR 0 2
37682: PPUSH
37683: LD_VAR 0 3
37687: PPUSH
37688: LD_VAR 0 4
37692: PPUSH
37693: CALL 37703 0 5
37697: ST_TO_ADDR
// end ;
37698: LD_VAR 0 5
37702: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37703: LD_INT 0
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
// if not list then
37709: LD_VAR 0 3
37713: NOT
37714: IFFALSE 37718
// exit ;
37716: GO 38106
// result := [ ] ;
37718: LD_ADDR_VAR 0 6
37722: PUSH
37723: EMPTY
37724: ST_TO_ADDR
// for i in list do
37725: LD_ADDR_VAR 0 7
37729: PUSH
37730: LD_VAR 0 3
37734: PUSH
37735: FOR_IN
37736: IFFALSE 37938
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37738: LD_ADDR_VAR 0 9
37742: PUSH
37743: LD_VAR 0 7
37747: PPUSH
37748: LD_VAR 0 1
37752: PPUSH
37753: LD_VAR 0 2
37757: PPUSH
37758: CALL_OW 297
37762: ST_TO_ADDR
// if not result then
37763: LD_VAR 0 6
37767: NOT
37768: IFFALSE 37794
// result := [ [ i , tmp ] ] else
37770: LD_ADDR_VAR 0 6
37774: PUSH
37775: LD_VAR 0 7
37779: PUSH
37780: LD_VAR 0 9
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: EMPTY
37790: LIST
37791: ST_TO_ADDR
37792: GO 37936
// begin if result [ result ] [ 2 ] < tmp then
37794: LD_VAR 0 6
37798: PUSH
37799: LD_VAR 0 6
37803: ARRAY
37804: PUSH
37805: LD_INT 2
37807: ARRAY
37808: PUSH
37809: LD_VAR 0 9
37813: LESS
37814: IFFALSE 37856
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37816: LD_ADDR_VAR 0 6
37820: PUSH
37821: LD_VAR 0 6
37825: PPUSH
37826: LD_VAR 0 6
37830: PUSH
37831: LD_INT 1
37833: PLUS
37834: PPUSH
37835: LD_VAR 0 7
37839: PUSH
37840: LD_VAR 0 9
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PPUSH
37849: CALL_OW 2
37853: ST_TO_ADDR
37854: GO 37936
// for j = 1 to result do
37856: LD_ADDR_VAR 0 8
37860: PUSH
37861: DOUBLE
37862: LD_INT 1
37864: DEC
37865: ST_TO_ADDR
37866: LD_VAR 0 6
37870: PUSH
37871: FOR_TO
37872: IFFALSE 37934
// begin if tmp < result [ j ] [ 2 ] then
37874: LD_VAR 0 9
37878: PUSH
37879: LD_VAR 0 6
37883: PUSH
37884: LD_VAR 0 8
37888: ARRAY
37889: PUSH
37890: LD_INT 2
37892: ARRAY
37893: LESS
37894: IFFALSE 37932
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37896: LD_ADDR_VAR 0 6
37900: PUSH
37901: LD_VAR 0 6
37905: PPUSH
37906: LD_VAR 0 8
37910: PPUSH
37911: LD_VAR 0 7
37915: PUSH
37916: LD_VAR 0 9
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PPUSH
37925: CALL_OW 2
37929: ST_TO_ADDR
// break ;
37930: GO 37934
// end ; end ;
37932: GO 37871
37934: POP
37935: POP
// end ; end ;
37936: GO 37735
37938: POP
37939: POP
// if result and not asc then
37940: LD_VAR 0 6
37944: PUSH
37945: LD_VAR 0 4
37949: NOT
37950: AND
37951: IFFALSE 38026
// begin tmp := result ;
37953: LD_ADDR_VAR 0 9
37957: PUSH
37958: LD_VAR 0 6
37962: ST_TO_ADDR
// for i = tmp downto 1 do
37963: LD_ADDR_VAR 0 7
37967: PUSH
37968: DOUBLE
37969: LD_VAR 0 9
37973: INC
37974: ST_TO_ADDR
37975: LD_INT 1
37977: PUSH
37978: FOR_DOWNTO
37979: IFFALSE 38024
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37981: LD_ADDR_VAR 0 6
37985: PUSH
37986: LD_VAR 0 6
37990: PPUSH
37991: LD_VAR 0 9
37995: PUSH
37996: LD_VAR 0 7
38000: MINUS
38001: PUSH
38002: LD_INT 1
38004: PLUS
38005: PPUSH
38006: LD_VAR 0 9
38010: PUSH
38011: LD_VAR 0 7
38015: ARRAY
38016: PPUSH
38017: CALL_OW 1
38021: ST_TO_ADDR
38022: GO 37978
38024: POP
38025: POP
// end ; tmp := [ ] ;
38026: LD_ADDR_VAR 0 9
38030: PUSH
38031: EMPTY
38032: ST_TO_ADDR
// if mode then
38033: LD_VAR 0 5
38037: IFFALSE 38106
// begin for i = 1 to result do
38039: LD_ADDR_VAR 0 7
38043: PUSH
38044: DOUBLE
38045: LD_INT 1
38047: DEC
38048: ST_TO_ADDR
38049: LD_VAR 0 6
38053: PUSH
38054: FOR_TO
38055: IFFALSE 38094
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38057: LD_ADDR_VAR 0 9
38061: PUSH
38062: LD_VAR 0 9
38066: PPUSH
38067: LD_VAR 0 7
38071: PPUSH
38072: LD_VAR 0 6
38076: PUSH
38077: LD_VAR 0 7
38081: ARRAY
38082: PUSH
38083: LD_INT 1
38085: ARRAY
38086: PPUSH
38087: CALL_OW 1
38091: ST_TO_ADDR
38092: GO 38054
38094: POP
38095: POP
// result := tmp ;
38096: LD_ADDR_VAR 0 6
38100: PUSH
38101: LD_VAR 0 9
38105: ST_TO_ADDR
// end ; end ;
38106: LD_VAR 0 6
38110: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38111: LD_INT 0
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38119: LD_ADDR_VAR 0 5
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: ST_TO_ADDR
// if not x or not y then
38141: LD_VAR 0 2
38145: NOT
38146: PUSH
38147: LD_VAR 0 3
38151: NOT
38152: OR
38153: IFFALSE 38157
// exit ;
38155: GO 39803
// if not range then
38157: LD_VAR 0 4
38161: NOT
38162: IFFALSE 38172
// range := 10 ;
38164: LD_ADDR_VAR 0 4
38168: PUSH
38169: LD_INT 10
38171: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38172: LD_ADDR_VAR 0 8
38176: PUSH
38177: LD_INT 81
38179: PUSH
38180: LD_VAR 0 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 92
38191: PUSH
38192: LD_VAR 0 2
38196: PUSH
38197: LD_VAR 0 3
38201: PUSH
38202: LD_VAR 0 4
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 3
38215: PUSH
38216: LD_INT 21
38218: PUSH
38219: LD_INT 3
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: PPUSH
38235: CALL_OW 69
38239: ST_TO_ADDR
// if not tmp then
38240: LD_VAR 0 8
38244: NOT
38245: IFFALSE 38249
// exit ;
38247: GO 39803
// for i in tmp do
38249: LD_ADDR_VAR 0 6
38253: PUSH
38254: LD_VAR 0 8
38258: PUSH
38259: FOR_IN
38260: IFFALSE 39778
// begin points := [ 0 , 0 , 0 ] ;
38262: LD_ADDR_VAR 0 9
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: ST_TO_ADDR
// bpoints := 1 ;
38281: LD_ADDR_VAR 0 10
38285: PUSH
38286: LD_INT 1
38288: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38289: LD_VAR 0 6
38293: PPUSH
38294: CALL_OW 247
38298: PUSH
38299: LD_INT 1
38301: DOUBLE
38302: EQUAL
38303: IFTRUE 38307
38305: GO 38885
38307: POP
// begin if GetClass ( i ) = 1 then
38308: LD_VAR 0 6
38312: PPUSH
38313: CALL_OW 257
38317: PUSH
38318: LD_INT 1
38320: EQUAL
38321: IFFALSE 38342
// points := [ 10 , 5 , 3 ] ;
38323: LD_ADDR_VAR 0 9
38327: PUSH
38328: LD_INT 10
38330: PUSH
38331: LD_INT 5
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38342: LD_VAR 0 6
38346: PPUSH
38347: CALL_OW 257
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: LD_INT 3
38357: PUSH
38358: LD_INT 4
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: IN
38366: IFFALSE 38387
// points := [ 3 , 2 , 1 ] ;
38368: LD_ADDR_VAR 0 9
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38387: LD_VAR 0 6
38391: PPUSH
38392: CALL_OW 257
38396: PUSH
38397: LD_INT 5
38399: EQUAL
38400: IFFALSE 38421
// points := [ 130 , 5 , 2 ] ;
38402: LD_ADDR_VAR 0 9
38406: PUSH
38407: LD_INT 130
38409: PUSH
38410: LD_INT 5
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38421: LD_VAR 0 6
38425: PPUSH
38426: CALL_OW 257
38430: PUSH
38431: LD_INT 8
38433: EQUAL
38434: IFFALSE 38455
// points := [ 35 , 35 , 30 ] ;
38436: LD_ADDR_VAR 0 9
38440: PUSH
38441: LD_INT 35
38443: PUSH
38444: LD_INT 35
38446: PUSH
38447: LD_INT 30
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38455: LD_VAR 0 6
38459: PPUSH
38460: CALL_OW 257
38464: PUSH
38465: LD_INT 9
38467: EQUAL
38468: IFFALSE 38489
// points := [ 20 , 55 , 40 ] ;
38470: LD_ADDR_VAR 0 9
38474: PUSH
38475: LD_INT 20
38477: PUSH
38478: LD_INT 55
38480: PUSH
38481: LD_INT 40
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38489: LD_VAR 0 6
38493: PPUSH
38494: CALL_OW 257
38498: PUSH
38499: LD_INT 12
38501: PUSH
38502: LD_INT 16
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: IN
38509: IFFALSE 38530
// points := [ 5 , 3 , 2 ] ;
38511: LD_ADDR_VAR 0 9
38515: PUSH
38516: LD_INT 5
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38530: LD_VAR 0 6
38534: PPUSH
38535: CALL_OW 257
38539: PUSH
38540: LD_INT 17
38542: EQUAL
38543: IFFALSE 38564
// points := [ 100 , 50 , 75 ] ;
38545: LD_ADDR_VAR 0 9
38549: PUSH
38550: LD_INT 100
38552: PUSH
38553: LD_INT 50
38555: PUSH
38556: LD_INT 75
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38564: LD_VAR 0 6
38568: PPUSH
38569: CALL_OW 257
38573: PUSH
38574: LD_INT 15
38576: EQUAL
38577: IFFALSE 38598
// points := [ 10 , 5 , 3 ] ;
38579: LD_ADDR_VAR 0 9
38583: PUSH
38584: LD_INT 10
38586: PUSH
38587: LD_INT 5
38589: PUSH
38590: LD_INT 3
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38598: LD_VAR 0 6
38602: PPUSH
38603: CALL_OW 257
38607: PUSH
38608: LD_INT 14
38610: EQUAL
38611: IFFALSE 38632
// points := [ 10 , 0 , 0 ] ;
38613: LD_ADDR_VAR 0 9
38617: PUSH
38618: LD_INT 10
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38632: LD_VAR 0 6
38636: PPUSH
38637: CALL_OW 257
38641: PUSH
38642: LD_INT 11
38644: EQUAL
38645: IFFALSE 38666
// points := [ 30 , 10 , 5 ] ;
38647: LD_ADDR_VAR 0 9
38651: PUSH
38652: LD_INT 30
38654: PUSH
38655: LD_INT 10
38657: PUSH
38658: LD_INT 5
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38666: LD_VAR 0 1
38670: PPUSH
38671: LD_INT 5
38673: PPUSH
38674: CALL_OW 321
38678: PUSH
38679: LD_INT 2
38681: EQUAL
38682: IFFALSE 38699
// bpoints := bpoints * 1.8 ;
38684: LD_ADDR_VAR 0 10
38688: PUSH
38689: LD_VAR 0 10
38693: PUSH
38694: LD_REAL  1.80000000000000E+0000
38697: MUL
38698: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38699: LD_VAR 0 6
38703: PPUSH
38704: CALL_OW 257
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 3
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: IN
38727: PUSH
38728: LD_VAR 0 1
38732: PPUSH
38733: LD_INT 51
38735: PPUSH
38736: CALL_OW 321
38740: PUSH
38741: LD_INT 2
38743: EQUAL
38744: AND
38745: IFFALSE 38762
// bpoints := bpoints * 1.2 ;
38747: LD_ADDR_VAR 0 10
38751: PUSH
38752: LD_VAR 0 10
38756: PUSH
38757: LD_REAL  1.20000000000000E+0000
38760: MUL
38761: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38762: LD_VAR 0 6
38766: PPUSH
38767: CALL_OW 257
38771: PUSH
38772: LD_INT 5
38774: PUSH
38775: LD_INT 7
38777: PUSH
38778: LD_INT 9
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: IN
38786: PUSH
38787: LD_VAR 0 1
38791: PPUSH
38792: LD_INT 52
38794: PPUSH
38795: CALL_OW 321
38799: PUSH
38800: LD_INT 2
38802: EQUAL
38803: AND
38804: IFFALSE 38821
// bpoints := bpoints * 1.5 ;
38806: LD_ADDR_VAR 0 10
38810: PUSH
38811: LD_VAR 0 10
38815: PUSH
38816: LD_REAL  1.50000000000000E+0000
38819: MUL
38820: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38821: LD_VAR 0 1
38825: PPUSH
38826: LD_INT 66
38828: PPUSH
38829: CALL_OW 321
38833: PUSH
38834: LD_INT 2
38836: EQUAL
38837: IFFALSE 38854
// bpoints := bpoints * 1.1 ;
38839: LD_ADDR_VAR 0 10
38843: PUSH
38844: LD_VAR 0 10
38848: PUSH
38849: LD_REAL  1.10000000000000E+0000
38852: MUL
38853: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38854: LD_ADDR_VAR 0 10
38858: PUSH
38859: LD_VAR 0 10
38863: PUSH
38864: LD_VAR 0 6
38868: PPUSH
38869: LD_INT 1
38871: PPUSH
38872: CALL_OW 259
38876: PUSH
38877: LD_REAL  1.15000000000000E+0000
38880: MUL
38881: MUL
38882: ST_TO_ADDR
// end ; unit_vehicle :
38883: GO 39707
38885: LD_INT 2
38887: DOUBLE
38888: EQUAL
38889: IFTRUE 38893
38891: GO 39695
38893: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38894: LD_VAR 0 6
38898: PPUSH
38899: CALL_OW 264
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 42
38909: PUSH
38910: LD_INT 24
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: IN
38918: IFFALSE 38939
// points := [ 25 , 5 , 3 ] ;
38920: LD_ADDR_VAR 0 9
38924: PUSH
38925: LD_INT 25
38927: PUSH
38928: LD_INT 5
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38939: LD_VAR 0 6
38943: PPUSH
38944: CALL_OW 264
38948: PUSH
38949: LD_INT 4
38951: PUSH
38952: LD_INT 43
38954: PUSH
38955: LD_INT 25
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: IN
38963: IFFALSE 38984
// points := [ 40 , 15 , 5 ] ;
38965: LD_ADDR_VAR 0 9
38969: PUSH
38970: LD_INT 40
38972: PUSH
38973: LD_INT 15
38975: PUSH
38976: LD_INT 5
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38984: LD_VAR 0 6
38988: PPUSH
38989: CALL_OW 264
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: LD_INT 23
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: IN
39004: IFFALSE 39025
// points := [ 7 , 25 , 8 ] ;
39006: LD_ADDR_VAR 0 9
39010: PUSH
39011: LD_INT 7
39013: PUSH
39014: LD_INT 25
39016: PUSH
39017: LD_INT 8
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39025: LD_VAR 0 6
39029: PPUSH
39030: CALL_OW 264
39034: PUSH
39035: LD_INT 5
39037: PUSH
39038: LD_INT 27
39040: PUSH
39041: LD_INT 44
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: IN
39049: IFFALSE 39070
// points := [ 14 , 50 , 16 ] ;
39051: LD_ADDR_VAR 0 9
39055: PUSH
39056: LD_INT 14
39058: PUSH
39059: LD_INT 50
39061: PUSH
39062: LD_INT 16
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39070: LD_VAR 0 6
39074: PPUSH
39075: CALL_OW 264
39079: PUSH
39080: LD_INT 6
39082: PUSH
39083: LD_INT 46
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: IN
39090: IFFALSE 39111
// points := [ 32 , 120 , 70 ] ;
39092: LD_ADDR_VAR 0 9
39096: PUSH
39097: LD_INT 32
39099: PUSH
39100: LD_INT 120
39102: PUSH
39103: LD_INT 70
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39111: LD_VAR 0 6
39115: PPUSH
39116: CALL_OW 264
39120: PUSH
39121: LD_INT 7
39123: PUSH
39124: LD_INT 28
39126: PUSH
39127: LD_INT 45
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: IN
39135: IFFALSE 39156
// points := [ 35 , 20 , 45 ] ;
39137: LD_ADDR_VAR 0 9
39141: PUSH
39142: LD_INT 35
39144: PUSH
39145: LD_INT 20
39147: PUSH
39148: LD_INT 45
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39156: LD_VAR 0 6
39160: PPUSH
39161: CALL_OW 264
39165: PUSH
39166: LD_INT 47
39168: PUSH
39169: EMPTY
39170: LIST
39171: IN
39172: IFFALSE 39193
// points := [ 67 , 45 , 75 ] ;
39174: LD_ADDR_VAR 0 9
39178: PUSH
39179: LD_INT 67
39181: PUSH
39182: LD_INT 45
39184: PUSH
39185: LD_INT 75
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39193: LD_VAR 0 6
39197: PPUSH
39198: CALL_OW 264
39202: PUSH
39203: LD_INT 26
39205: PUSH
39206: EMPTY
39207: LIST
39208: IN
39209: IFFALSE 39230
// points := [ 120 , 30 , 80 ] ;
39211: LD_ADDR_VAR 0 9
39215: PUSH
39216: LD_INT 120
39218: PUSH
39219: LD_INT 30
39221: PUSH
39222: LD_INT 80
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39230: LD_VAR 0 6
39234: PPUSH
39235: CALL_OW 264
39239: PUSH
39240: LD_INT 22
39242: PUSH
39243: EMPTY
39244: LIST
39245: IN
39246: IFFALSE 39267
// points := [ 40 , 1 , 1 ] ;
39248: LD_ADDR_VAR 0 9
39252: PUSH
39253: LD_INT 40
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39267: LD_VAR 0 6
39271: PPUSH
39272: CALL_OW 264
39276: PUSH
39277: LD_INT 29
39279: PUSH
39280: EMPTY
39281: LIST
39282: IN
39283: IFFALSE 39304
// points := [ 70 , 200 , 400 ] ;
39285: LD_ADDR_VAR 0 9
39289: PUSH
39290: LD_INT 70
39292: PUSH
39293: LD_INT 200
39295: PUSH
39296: LD_INT 400
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39304: LD_VAR 0 6
39308: PPUSH
39309: CALL_OW 264
39313: PUSH
39314: LD_INT 14
39316: PUSH
39317: LD_INT 53
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: IN
39324: IFFALSE 39345
// points := [ 40 , 10 , 20 ] ;
39326: LD_ADDR_VAR 0 9
39330: PUSH
39331: LD_INT 40
39333: PUSH
39334: LD_INT 10
39336: PUSH
39337: LD_INT 20
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39345: LD_VAR 0 6
39349: PPUSH
39350: CALL_OW 264
39354: PUSH
39355: LD_INT 9
39357: PUSH
39358: EMPTY
39359: LIST
39360: IN
39361: IFFALSE 39382
// points := [ 5 , 70 , 20 ] ;
39363: LD_ADDR_VAR 0 9
39367: PUSH
39368: LD_INT 5
39370: PUSH
39371: LD_INT 70
39373: PUSH
39374: LD_INT 20
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39382: LD_VAR 0 6
39386: PPUSH
39387: CALL_OW 264
39391: PUSH
39392: LD_INT 10
39394: PUSH
39395: EMPTY
39396: LIST
39397: IN
39398: IFFALSE 39419
// points := [ 35 , 110 , 70 ] ;
39400: LD_ADDR_VAR 0 9
39404: PUSH
39405: LD_INT 35
39407: PUSH
39408: LD_INT 110
39410: PUSH
39411: LD_INT 70
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: LIST
39418: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39419: LD_VAR 0 6
39423: PPUSH
39424: CALL_OW 265
39428: PUSH
39429: LD_INT 25
39431: EQUAL
39432: IFFALSE 39453
// points := [ 80 , 65 , 100 ] ;
39434: LD_ADDR_VAR 0 9
39438: PUSH
39439: LD_INT 80
39441: PUSH
39442: LD_INT 65
39444: PUSH
39445: LD_INT 100
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39453: LD_VAR 0 6
39457: PPUSH
39458: CALL_OW 263
39462: PUSH
39463: LD_INT 1
39465: EQUAL
39466: IFFALSE 39501
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39468: LD_ADDR_VAR 0 10
39472: PUSH
39473: LD_VAR 0 10
39477: PUSH
39478: LD_VAR 0 6
39482: PPUSH
39483: CALL_OW 311
39487: PPUSH
39488: LD_INT 3
39490: PPUSH
39491: CALL_OW 259
39495: PUSH
39496: LD_INT 4
39498: MUL
39499: MUL
39500: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39501: LD_VAR 0 6
39505: PPUSH
39506: CALL_OW 263
39510: PUSH
39511: LD_INT 2
39513: EQUAL
39514: IFFALSE 39565
// begin j := IsControledBy ( i ) ;
39516: LD_ADDR_VAR 0 7
39520: PUSH
39521: LD_VAR 0 6
39525: PPUSH
39526: CALL_OW 312
39530: ST_TO_ADDR
// if j then
39531: LD_VAR 0 7
39535: IFFALSE 39565
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39537: LD_ADDR_VAR 0 10
39541: PUSH
39542: LD_VAR 0 10
39546: PUSH
39547: LD_VAR 0 7
39551: PPUSH
39552: LD_INT 3
39554: PPUSH
39555: CALL_OW 259
39559: PUSH
39560: LD_INT 3
39562: MUL
39563: MUL
39564: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39565: LD_VAR 0 6
39569: PPUSH
39570: CALL_OW 264
39574: PUSH
39575: LD_INT 5
39577: PUSH
39578: LD_INT 6
39580: PUSH
39581: LD_INT 46
39583: PUSH
39584: LD_INT 44
39586: PUSH
39587: LD_INT 47
39589: PUSH
39590: LD_INT 45
39592: PUSH
39593: LD_INT 28
39595: PUSH
39596: LD_INT 7
39598: PUSH
39599: LD_INT 27
39601: PUSH
39602: LD_INT 29
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: IN
39617: PUSH
39618: LD_VAR 0 1
39622: PPUSH
39623: LD_INT 52
39625: PPUSH
39626: CALL_OW 321
39630: PUSH
39631: LD_INT 2
39633: EQUAL
39634: AND
39635: IFFALSE 39652
// bpoints := bpoints * 1.2 ;
39637: LD_ADDR_VAR 0 10
39641: PUSH
39642: LD_VAR 0 10
39646: PUSH
39647: LD_REAL  1.20000000000000E+0000
39650: MUL
39651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39652: LD_VAR 0 6
39656: PPUSH
39657: CALL_OW 264
39661: PUSH
39662: LD_INT 6
39664: PUSH
39665: LD_INT 46
39667: PUSH
39668: LD_INT 47
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: IN
39676: IFFALSE 39693
// bpoints := bpoints * 1.2 ;
39678: LD_ADDR_VAR 0 10
39682: PUSH
39683: LD_VAR 0 10
39687: PUSH
39688: LD_REAL  1.20000000000000E+0000
39691: MUL
39692: ST_TO_ADDR
// end ; unit_building :
39693: GO 39707
39695: LD_INT 3
39697: DOUBLE
39698: EQUAL
39699: IFTRUE 39703
39701: GO 39706
39703: POP
// ; end ;
39704: GO 39707
39706: POP
// for j = 1 to 3 do
39707: LD_ADDR_VAR 0 7
39711: PUSH
39712: DOUBLE
39713: LD_INT 1
39715: DEC
39716: ST_TO_ADDR
39717: LD_INT 3
39719: PUSH
39720: FOR_TO
39721: IFFALSE 39774
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39723: LD_ADDR_VAR 0 5
39727: PUSH
39728: LD_VAR 0 5
39732: PPUSH
39733: LD_VAR 0 7
39737: PPUSH
39738: LD_VAR 0 5
39742: PUSH
39743: LD_VAR 0 7
39747: ARRAY
39748: PUSH
39749: LD_VAR 0 9
39753: PUSH
39754: LD_VAR 0 7
39758: ARRAY
39759: PUSH
39760: LD_VAR 0 10
39764: MUL
39765: PLUS
39766: PPUSH
39767: CALL_OW 1
39771: ST_TO_ADDR
39772: GO 39720
39774: POP
39775: POP
// end ;
39776: GO 38259
39778: POP
39779: POP
// result := Replace ( result , 4 , tmp ) ;
39780: LD_ADDR_VAR 0 5
39784: PUSH
39785: LD_VAR 0 5
39789: PPUSH
39790: LD_INT 4
39792: PPUSH
39793: LD_VAR 0 8
39797: PPUSH
39798: CALL_OW 1
39802: ST_TO_ADDR
// end ;
39803: LD_VAR 0 5
39807: RET
// export function DangerAtRange ( unit , range ) ; begin
39808: LD_INT 0
39810: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39811: LD_ADDR_VAR 0 3
39815: PUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL_OW 255
39825: PPUSH
39826: LD_VAR 0 1
39830: PPUSH
39831: CALL_OW 250
39835: PPUSH
39836: LD_VAR 0 1
39840: PPUSH
39841: CALL_OW 251
39845: PPUSH
39846: LD_VAR 0 2
39850: PPUSH
39851: CALL 38111 0 4
39855: ST_TO_ADDR
// end ;
39856: LD_VAR 0 3
39860: RET
// export function DangerInArea ( side , area ) ; begin
39861: LD_INT 0
39863: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39864: LD_ADDR_VAR 0 3
39868: PUSH
39869: LD_VAR 0 2
39873: PPUSH
39874: LD_INT 81
39876: PUSH
39877: LD_VAR 0 1
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PPUSH
39886: CALL_OW 70
39890: ST_TO_ADDR
// end ;
39891: LD_VAR 0 3
39895: RET
// export function IsExtension ( b ) ; begin
39896: LD_INT 0
39898: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39899: LD_ADDR_VAR 0 2
39903: PUSH
39904: LD_VAR 0 1
39908: PUSH
39909: LD_INT 23
39911: PUSH
39912: LD_INT 20
39914: PUSH
39915: LD_INT 22
39917: PUSH
39918: LD_INT 17
39920: PUSH
39921: LD_INT 24
39923: PUSH
39924: LD_INT 21
39926: PUSH
39927: LD_INT 19
39929: PUSH
39930: LD_INT 16
39932: PUSH
39933: LD_INT 25
39935: PUSH
39936: LD_INT 18
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: IN
39951: ST_TO_ADDR
// end ;
39952: LD_VAR 0 2
39956: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39957: LD_INT 0
39959: PPUSH
39960: PPUSH
39961: PPUSH
// result := [ ] ;
39962: LD_ADDR_VAR 0 3
39966: PUSH
39967: EMPTY
39968: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39969: LD_ADDR_VAR 0 4
39973: PUSH
39974: LD_VAR 0 2
39978: PPUSH
39979: LD_INT 21
39981: PUSH
39982: LD_INT 3
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PPUSH
39989: CALL_OW 70
39993: ST_TO_ADDR
// if not tmp then
39994: LD_VAR 0 4
39998: NOT
39999: IFFALSE 40003
// exit ;
40001: GO 40061
// for i in tmp do
40003: LD_ADDR_VAR 0 5
40007: PUSH
40008: LD_VAR 0 4
40012: PUSH
40013: FOR_IN
40014: IFFALSE 40049
// if GetBase ( i ) <> base then
40016: LD_VAR 0 5
40020: PPUSH
40021: CALL_OW 274
40025: PUSH
40026: LD_VAR 0 1
40030: NONEQUAL
40031: IFFALSE 40047
// ComLinkToBase ( base , i ) ;
40033: LD_VAR 0 1
40037: PPUSH
40038: LD_VAR 0 5
40042: PPUSH
40043: CALL_OW 169
40047: GO 40013
40049: POP
40050: POP
// result := tmp ;
40051: LD_ADDR_VAR 0 3
40055: PUSH
40056: LD_VAR 0 4
40060: ST_TO_ADDR
// end ;
40061: LD_VAR 0 3
40065: RET
// export function ComComplete ( unit , b ) ; var i ; begin
40066: LD_INT 0
40068: PPUSH
40069: PPUSH
// if BuildingStatus ( b ) = bs_build then
40070: LD_VAR 0 2
40074: PPUSH
40075: CALL_OW 461
40079: PUSH
40080: LD_INT 1
40082: EQUAL
40083: IFFALSE 40143
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40085: LD_VAR 0 1
40089: PPUSH
40090: LD_STRING h
40092: PUSH
40093: LD_VAR 0 2
40097: PPUSH
40098: CALL_OW 250
40102: PUSH
40103: LD_VAR 0 2
40107: PPUSH
40108: CALL_OW 251
40112: PUSH
40113: LD_VAR 0 2
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: PPUSH
40139: CALL_OW 446
// end ;
40143: LD_VAR 0 3
40147: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40148: LD_INT 0
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40156: LD_VAR 0 1
40160: NOT
40161: PUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 263
40171: PUSH
40172: LD_INT 2
40174: EQUAL
40175: NOT
40176: OR
40177: IFFALSE 40181
// exit ;
40179: GO 40497
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40181: LD_ADDR_VAR 0 6
40185: PUSH
40186: LD_INT 22
40188: PUSH
40189: LD_VAR 0 1
40193: PPUSH
40194: CALL_OW 255
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 30
40208: PUSH
40209: LD_INT 36
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 34
40218: PUSH
40219: LD_INT 31
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PPUSH
40235: CALL_OW 69
40239: ST_TO_ADDR
// if not tmp then
40240: LD_VAR 0 6
40244: NOT
40245: IFFALSE 40249
// exit ;
40247: GO 40497
// result := [ ] ;
40249: LD_ADDR_VAR 0 2
40253: PUSH
40254: EMPTY
40255: ST_TO_ADDR
// for i in tmp do
40256: LD_ADDR_VAR 0 3
40260: PUSH
40261: LD_VAR 0 6
40265: PUSH
40266: FOR_IN
40267: IFFALSE 40338
// begin t := UnitsInside ( i ) ;
40269: LD_ADDR_VAR 0 4
40273: PUSH
40274: LD_VAR 0 3
40278: PPUSH
40279: CALL_OW 313
40283: ST_TO_ADDR
// if t then
40284: LD_VAR 0 4
40288: IFFALSE 40336
// for j in t do
40290: LD_ADDR_VAR 0 7
40294: PUSH
40295: LD_VAR 0 4
40299: PUSH
40300: FOR_IN
40301: IFFALSE 40334
// result := Insert ( result , result + 1 , j ) ;
40303: LD_ADDR_VAR 0 2
40307: PUSH
40308: LD_VAR 0 2
40312: PPUSH
40313: LD_VAR 0 2
40317: PUSH
40318: LD_INT 1
40320: PLUS
40321: PPUSH
40322: LD_VAR 0 7
40326: PPUSH
40327: CALL_OW 2
40331: ST_TO_ADDR
40332: GO 40300
40334: POP
40335: POP
// end ;
40336: GO 40266
40338: POP
40339: POP
// if not result then
40340: LD_VAR 0 2
40344: NOT
40345: IFFALSE 40349
// exit ;
40347: GO 40497
// mech := result [ 1 ] ;
40349: LD_ADDR_VAR 0 5
40353: PUSH
40354: LD_VAR 0 2
40358: PUSH
40359: LD_INT 1
40361: ARRAY
40362: ST_TO_ADDR
// if result > 1 then
40363: LD_VAR 0 2
40367: PUSH
40368: LD_INT 1
40370: GREATER
40371: IFFALSE 40483
// for i = 2 to result do
40373: LD_ADDR_VAR 0 3
40377: PUSH
40378: DOUBLE
40379: LD_INT 2
40381: DEC
40382: ST_TO_ADDR
40383: LD_VAR 0 2
40387: PUSH
40388: FOR_TO
40389: IFFALSE 40481
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40391: LD_ADDR_VAR 0 4
40395: PUSH
40396: LD_VAR 0 2
40400: PUSH
40401: LD_VAR 0 3
40405: ARRAY
40406: PPUSH
40407: LD_INT 3
40409: PPUSH
40410: CALL_OW 259
40414: PUSH
40415: LD_VAR 0 2
40419: PUSH
40420: LD_VAR 0 3
40424: ARRAY
40425: PPUSH
40426: CALL_OW 432
40430: MINUS
40431: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40432: LD_VAR 0 4
40436: PUSH
40437: LD_VAR 0 5
40441: PPUSH
40442: LD_INT 3
40444: PPUSH
40445: CALL_OW 259
40449: PUSH
40450: LD_VAR 0 5
40454: PPUSH
40455: CALL_OW 432
40459: MINUS
40460: GREATEREQUAL
40461: IFFALSE 40479
// mech := result [ i ] ;
40463: LD_ADDR_VAR 0 5
40467: PUSH
40468: LD_VAR 0 2
40472: PUSH
40473: LD_VAR 0 3
40477: ARRAY
40478: ST_TO_ADDR
// end ;
40479: GO 40388
40481: POP
40482: POP
// ComLinkTo ( vehicle , mech ) ;
40483: LD_VAR 0 1
40487: PPUSH
40488: LD_VAR 0 5
40492: PPUSH
40493: CALL_OW 135
// end ;
40497: LD_VAR 0 2
40501: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40502: LD_INT 0
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
// result := [ ] ;
40517: LD_ADDR_VAR 0 7
40521: PUSH
40522: EMPTY
40523: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40524: LD_VAR 0 1
40528: PPUSH
40529: CALL_OW 266
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: IN
40544: NOT
40545: IFFALSE 40549
// exit ;
40547: GO 42180
// if name then
40549: LD_VAR 0 3
40553: IFFALSE 40569
// SetBName ( base_dep , name ) ;
40555: LD_VAR 0 1
40559: PPUSH
40560: LD_VAR 0 3
40564: PPUSH
40565: CALL_OW 500
// base := GetBase ( base_dep ) ;
40569: LD_ADDR_VAR 0 15
40573: PUSH
40574: LD_VAR 0 1
40578: PPUSH
40579: CALL_OW 274
40583: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40584: LD_ADDR_VAR 0 16
40588: PUSH
40589: LD_VAR 0 1
40593: PPUSH
40594: CALL_OW 255
40598: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40599: LD_ADDR_VAR 0 17
40603: PUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL_OW 248
40613: ST_TO_ADDR
// if sources then
40614: LD_VAR 0 5
40618: IFFALSE 40665
// for i = 1 to 3 do
40620: LD_ADDR_VAR 0 8
40624: PUSH
40625: DOUBLE
40626: LD_INT 1
40628: DEC
40629: ST_TO_ADDR
40630: LD_INT 3
40632: PUSH
40633: FOR_TO
40634: IFFALSE 40663
// AddResourceType ( base , i , sources [ i ] ) ;
40636: LD_VAR 0 15
40640: PPUSH
40641: LD_VAR 0 8
40645: PPUSH
40646: LD_VAR 0 5
40650: PUSH
40651: LD_VAR 0 8
40655: ARRAY
40656: PPUSH
40657: CALL_OW 276
40661: GO 40633
40663: POP
40664: POP
// buildings := GetBaseBuildings ( base , area ) ;
40665: LD_ADDR_VAR 0 18
40669: PUSH
40670: LD_VAR 0 15
40674: PPUSH
40675: LD_VAR 0 2
40679: PPUSH
40680: CALL 39957 0 2
40684: ST_TO_ADDR
// InitHc ;
40685: CALL_OW 19
// InitUc ;
40689: CALL_OW 18
// uc_side := side ;
40693: LD_ADDR_OWVAR 20
40697: PUSH
40698: LD_VAR 0 16
40702: ST_TO_ADDR
// uc_nation := nation ;
40703: LD_ADDR_OWVAR 21
40707: PUSH
40708: LD_VAR 0 17
40712: ST_TO_ADDR
// if buildings then
40713: LD_VAR 0 18
40717: IFFALSE 42039
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40719: LD_ADDR_VAR 0 19
40723: PUSH
40724: LD_VAR 0 18
40728: PPUSH
40729: LD_INT 2
40731: PUSH
40732: LD_INT 30
40734: PUSH
40735: LD_INT 29
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 30
40744: PUSH
40745: LD_INT 30
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: PPUSH
40757: CALL_OW 72
40761: ST_TO_ADDR
// if tmp then
40762: LD_VAR 0 19
40766: IFFALSE 40814
// for i in tmp do
40768: LD_ADDR_VAR 0 8
40772: PUSH
40773: LD_VAR 0 19
40777: PUSH
40778: FOR_IN
40779: IFFALSE 40812
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40781: LD_VAR 0 8
40785: PPUSH
40786: CALL_OW 250
40790: PPUSH
40791: LD_VAR 0 8
40795: PPUSH
40796: CALL_OW 251
40800: PPUSH
40801: LD_VAR 0 16
40805: PPUSH
40806: CALL_OW 441
40810: GO 40778
40812: POP
40813: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40814: LD_VAR 0 18
40818: PPUSH
40819: LD_INT 2
40821: PUSH
40822: LD_INT 30
40824: PUSH
40825: LD_INT 32
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 30
40834: PUSH
40835: LD_INT 33
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: LIST
40846: PPUSH
40847: CALL_OW 72
40851: IFFALSE 40939
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40853: LD_ADDR_VAR 0 8
40857: PUSH
40858: LD_VAR 0 18
40862: PPUSH
40863: LD_INT 2
40865: PUSH
40866: LD_INT 30
40868: PUSH
40869: LD_INT 32
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 30
40878: PUSH
40879: LD_INT 33
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: PPUSH
40891: CALL_OW 72
40895: PUSH
40896: FOR_IN
40897: IFFALSE 40937
// begin if not GetBWeapon ( i ) then
40899: LD_VAR 0 8
40903: PPUSH
40904: CALL_OW 269
40908: NOT
40909: IFFALSE 40935
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40911: LD_VAR 0 8
40915: PPUSH
40916: LD_VAR 0 8
40920: PPUSH
40921: LD_VAR 0 2
40925: PPUSH
40926: CALL 42185 0 2
40930: PPUSH
40931: CALL_OW 431
// end ;
40935: GO 40896
40937: POP
40938: POP
// end ; for i = 1 to personel do
40939: LD_ADDR_VAR 0 8
40943: PUSH
40944: DOUBLE
40945: LD_INT 1
40947: DEC
40948: ST_TO_ADDR
40949: LD_VAR 0 6
40953: PUSH
40954: FOR_TO
40955: IFFALSE 42019
// begin if i > 4 then
40957: LD_VAR 0 8
40961: PUSH
40962: LD_INT 4
40964: GREATER
40965: IFFALSE 40969
// break ;
40967: GO 42019
// case i of 1 :
40969: LD_VAR 0 8
40973: PUSH
40974: LD_INT 1
40976: DOUBLE
40977: EQUAL
40978: IFTRUE 40982
40980: GO 41062
40982: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40983: LD_ADDR_VAR 0 12
40987: PUSH
40988: LD_VAR 0 18
40992: PPUSH
40993: LD_INT 22
40995: PUSH
40996: LD_VAR 0 16
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 58
41007: PUSH
41008: EMPTY
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: LD_INT 30
41016: PUSH
41017: LD_INT 32
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 30
41026: PUSH
41027: LD_INT 4
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 30
41036: PUSH
41037: LD_INT 5
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: LIST
41054: PPUSH
41055: CALL_OW 72
41059: ST_TO_ADDR
41060: GO 41284
41062: LD_INT 2
41064: DOUBLE
41065: EQUAL
41066: IFTRUE 41070
41068: GO 41132
41070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41071: LD_ADDR_VAR 0 12
41075: PUSH
41076: LD_VAR 0 18
41080: PPUSH
41081: LD_INT 22
41083: PUSH
41084: LD_VAR 0 16
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 30
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 30
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: LIST
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PPUSH
41125: CALL_OW 72
41129: ST_TO_ADDR
41130: GO 41284
41132: LD_INT 3
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41140
41138: GO 41202
41140: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41141: LD_ADDR_VAR 0 12
41145: PUSH
41146: LD_VAR 0 18
41150: PPUSH
41151: LD_INT 22
41153: PUSH
41154: LD_VAR 0 16
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: LD_INT 30
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 30
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PPUSH
41195: CALL_OW 72
41199: ST_TO_ADDR
41200: GO 41284
41202: LD_INT 4
41204: DOUBLE
41205: EQUAL
41206: IFTRUE 41210
41208: GO 41283
41210: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41211: LD_ADDR_VAR 0 12
41215: PUSH
41216: LD_VAR 0 18
41220: PPUSH
41221: LD_INT 22
41223: PUSH
41224: LD_VAR 0 16
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: LD_INT 30
41238: PUSH
41239: LD_INT 6
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 30
41248: PUSH
41249: LD_INT 7
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 30
41258: PUSH
41259: LD_INT 8
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PPUSH
41276: CALL_OW 72
41280: ST_TO_ADDR
41281: GO 41284
41283: POP
// if i = 1 then
41284: LD_VAR 0 8
41288: PUSH
41289: LD_INT 1
41291: EQUAL
41292: IFFALSE 41403
// begin tmp := [ ] ;
41294: LD_ADDR_VAR 0 19
41298: PUSH
41299: EMPTY
41300: ST_TO_ADDR
// for j in f do
41301: LD_ADDR_VAR 0 9
41305: PUSH
41306: LD_VAR 0 12
41310: PUSH
41311: FOR_IN
41312: IFFALSE 41385
// if GetBType ( j ) = b_bunker then
41314: LD_VAR 0 9
41318: PPUSH
41319: CALL_OW 266
41323: PUSH
41324: LD_INT 32
41326: EQUAL
41327: IFFALSE 41354
// tmp := Insert ( tmp , 1 , j ) else
41329: LD_ADDR_VAR 0 19
41333: PUSH
41334: LD_VAR 0 19
41338: PPUSH
41339: LD_INT 1
41341: PPUSH
41342: LD_VAR 0 9
41346: PPUSH
41347: CALL_OW 2
41351: ST_TO_ADDR
41352: GO 41383
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41354: LD_ADDR_VAR 0 19
41358: PUSH
41359: LD_VAR 0 19
41363: PPUSH
41364: LD_VAR 0 19
41368: PUSH
41369: LD_INT 1
41371: PLUS
41372: PPUSH
41373: LD_VAR 0 9
41377: PPUSH
41378: CALL_OW 2
41382: ST_TO_ADDR
41383: GO 41311
41385: POP
41386: POP
// if tmp then
41387: LD_VAR 0 19
41391: IFFALSE 41403
// f := tmp ;
41393: LD_ADDR_VAR 0 12
41397: PUSH
41398: LD_VAR 0 19
41402: ST_TO_ADDR
// end ; x := personel [ i ] ;
41403: LD_ADDR_VAR 0 13
41407: PUSH
41408: LD_VAR 0 6
41412: PUSH
41413: LD_VAR 0 8
41417: ARRAY
41418: ST_TO_ADDR
// if x = - 1 then
41419: LD_VAR 0 13
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: EQUAL
41428: IFFALSE 41637
// begin for j in f do
41430: LD_ADDR_VAR 0 9
41434: PUSH
41435: LD_VAR 0 12
41439: PUSH
41440: FOR_IN
41441: IFFALSE 41633
// repeat InitHc ;
41443: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41447: LD_VAR 0 9
41451: PPUSH
41452: CALL_OW 266
41456: PUSH
41457: LD_INT 5
41459: EQUAL
41460: IFFALSE 41530
// begin if UnitsInside ( j ) < 3 then
41462: LD_VAR 0 9
41466: PPUSH
41467: CALL_OW 313
41471: PUSH
41472: LD_INT 3
41474: LESS
41475: IFFALSE 41511
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41477: LD_INT 0
41479: PPUSH
41480: LD_INT 5
41482: PUSH
41483: LD_INT 8
41485: PUSH
41486: LD_INT 9
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: LIST
41493: PUSH
41494: LD_VAR 0 17
41498: ARRAY
41499: PPUSH
41500: LD_VAR 0 4
41504: PPUSH
41505: CALL_OW 380
41509: GO 41528
// PrepareHuman ( false , i , skill ) ;
41511: LD_INT 0
41513: PPUSH
41514: LD_VAR 0 8
41518: PPUSH
41519: LD_VAR 0 4
41523: PPUSH
41524: CALL_OW 380
// end else
41528: GO 41547
// PrepareHuman ( false , i , skill ) ;
41530: LD_INT 0
41532: PPUSH
41533: LD_VAR 0 8
41537: PPUSH
41538: LD_VAR 0 4
41542: PPUSH
41543: CALL_OW 380
// un := CreateHuman ;
41547: LD_ADDR_VAR 0 14
41551: PUSH
41552: CALL_OW 44
41556: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41557: LD_ADDR_VAR 0 7
41561: PUSH
41562: LD_VAR 0 7
41566: PPUSH
41567: LD_INT 1
41569: PPUSH
41570: LD_VAR 0 14
41574: PPUSH
41575: CALL_OW 2
41579: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41580: LD_VAR 0 14
41584: PPUSH
41585: LD_VAR 0 9
41589: PPUSH
41590: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41594: LD_VAR 0 9
41598: PPUSH
41599: CALL_OW 313
41603: PUSH
41604: LD_INT 6
41606: EQUAL
41607: PUSH
41608: LD_VAR 0 9
41612: PPUSH
41613: CALL_OW 266
41617: PUSH
41618: LD_INT 32
41620: PUSH
41621: LD_INT 31
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: IN
41628: OR
41629: IFFALSE 41443
41631: GO 41440
41633: POP
41634: POP
// end else
41635: GO 42017
// for j = 1 to x do
41637: LD_ADDR_VAR 0 9
41641: PUSH
41642: DOUBLE
41643: LD_INT 1
41645: DEC
41646: ST_TO_ADDR
41647: LD_VAR 0 13
41651: PUSH
41652: FOR_TO
41653: IFFALSE 42015
// begin InitHc ;
41655: CALL_OW 19
// if not f then
41659: LD_VAR 0 12
41663: NOT
41664: IFFALSE 41753
// begin PrepareHuman ( false , i , skill ) ;
41666: LD_INT 0
41668: PPUSH
41669: LD_VAR 0 8
41673: PPUSH
41674: LD_VAR 0 4
41678: PPUSH
41679: CALL_OW 380
// un := CreateHuman ;
41683: LD_ADDR_VAR 0 14
41687: PUSH
41688: CALL_OW 44
41692: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41693: LD_ADDR_VAR 0 7
41697: PUSH
41698: LD_VAR 0 7
41702: PPUSH
41703: LD_INT 1
41705: PPUSH
41706: LD_VAR 0 14
41710: PPUSH
41711: CALL_OW 2
41715: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41716: LD_VAR 0 14
41720: PPUSH
41721: LD_VAR 0 1
41725: PPUSH
41726: CALL_OW 250
41730: PPUSH
41731: LD_VAR 0 1
41735: PPUSH
41736: CALL_OW 251
41740: PPUSH
41741: LD_INT 10
41743: PPUSH
41744: LD_INT 0
41746: PPUSH
41747: CALL_OW 50
// continue ;
41751: GO 41652
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41753: LD_VAR 0 12
41757: PUSH
41758: LD_INT 1
41760: ARRAY
41761: PPUSH
41762: CALL_OW 313
41766: PUSH
41767: LD_VAR 0 12
41771: PUSH
41772: LD_INT 1
41774: ARRAY
41775: PPUSH
41776: CALL_OW 266
41780: PUSH
41781: LD_INT 32
41783: PUSH
41784: LD_INT 31
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: IN
41791: AND
41792: PUSH
41793: LD_VAR 0 12
41797: PUSH
41798: LD_INT 1
41800: ARRAY
41801: PPUSH
41802: CALL_OW 313
41806: PUSH
41807: LD_INT 6
41809: EQUAL
41810: OR
41811: IFFALSE 41831
// f := Delete ( f , 1 ) ;
41813: LD_ADDR_VAR 0 12
41817: PUSH
41818: LD_VAR 0 12
41822: PPUSH
41823: LD_INT 1
41825: PPUSH
41826: CALL_OW 3
41830: ST_TO_ADDR
// if not f then
41831: LD_VAR 0 12
41835: NOT
41836: IFFALSE 41854
// begin x := x + 2 ;
41838: LD_ADDR_VAR 0 13
41842: PUSH
41843: LD_VAR 0 13
41847: PUSH
41848: LD_INT 2
41850: PLUS
41851: ST_TO_ADDR
// continue ;
41852: GO 41652
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41854: LD_VAR 0 12
41858: PUSH
41859: LD_INT 1
41861: ARRAY
41862: PPUSH
41863: CALL_OW 266
41867: PUSH
41868: LD_INT 5
41870: EQUAL
41871: IFFALSE 41945
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41873: LD_VAR 0 12
41877: PUSH
41878: LD_INT 1
41880: ARRAY
41881: PPUSH
41882: CALL_OW 313
41886: PUSH
41887: LD_INT 3
41889: LESS
41890: IFFALSE 41926
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41892: LD_INT 0
41894: PPUSH
41895: LD_INT 5
41897: PUSH
41898: LD_INT 8
41900: PUSH
41901: LD_INT 9
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: PUSH
41909: LD_VAR 0 17
41913: ARRAY
41914: PPUSH
41915: LD_VAR 0 4
41919: PPUSH
41920: CALL_OW 380
41924: GO 41943
// PrepareHuman ( false , i , skill ) ;
41926: LD_INT 0
41928: PPUSH
41929: LD_VAR 0 8
41933: PPUSH
41934: LD_VAR 0 4
41938: PPUSH
41939: CALL_OW 380
// end else
41943: GO 41962
// PrepareHuman ( false , i , skill ) ;
41945: LD_INT 0
41947: PPUSH
41948: LD_VAR 0 8
41952: PPUSH
41953: LD_VAR 0 4
41957: PPUSH
41958: CALL_OW 380
// un := CreateHuman ;
41962: LD_ADDR_VAR 0 14
41966: PUSH
41967: CALL_OW 44
41971: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41972: LD_ADDR_VAR 0 7
41976: PUSH
41977: LD_VAR 0 7
41981: PPUSH
41982: LD_INT 1
41984: PPUSH
41985: LD_VAR 0 14
41989: PPUSH
41990: CALL_OW 2
41994: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41995: LD_VAR 0 14
41999: PPUSH
42000: LD_VAR 0 12
42004: PUSH
42005: LD_INT 1
42007: ARRAY
42008: PPUSH
42009: CALL_OW 52
// end ;
42013: GO 41652
42015: POP
42016: POP
// end ;
42017: GO 40954
42019: POP
42020: POP
// result := result ^ buildings ;
42021: LD_ADDR_VAR 0 7
42025: PUSH
42026: LD_VAR 0 7
42030: PUSH
42031: LD_VAR 0 18
42035: ADD
42036: ST_TO_ADDR
// end else
42037: GO 42180
// begin for i = 1 to personel do
42039: LD_ADDR_VAR 0 8
42043: PUSH
42044: DOUBLE
42045: LD_INT 1
42047: DEC
42048: ST_TO_ADDR
42049: LD_VAR 0 6
42053: PUSH
42054: FOR_TO
42055: IFFALSE 42178
// begin if i > 4 then
42057: LD_VAR 0 8
42061: PUSH
42062: LD_INT 4
42064: GREATER
42065: IFFALSE 42069
// break ;
42067: GO 42178
// x := personel [ i ] ;
42069: LD_ADDR_VAR 0 13
42073: PUSH
42074: LD_VAR 0 6
42078: PUSH
42079: LD_VAR 0 8
42083: ARRAY
42084: ST_TO_ADDR
// if x = - 1 then
42085: LD_VAR 0 13
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: EQUAL
42094: IFFALSE 42098
// continue ;
42096: GO 42054
// PrepareHuman ( false , i , skill ) ;
42098: LD_INT 0
42100: PPUSH
42101: LD_VAR 0 8
42105: PPUSH
42106: LD_VAR 0 4
42110: PPUSH
42111: CALL_OW 380
// un := CreateHuman ;
42115: LD_ADDR_VAR 0 14
42119: PUSH
42120: CALL_OW 44
42124: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42125: LD_VAR 0 14
42129: PPUSH
42130: LD_VAR 0 1
42134: PPUSH
42135: CALL_OW 250
42139: PPUSH
42140: LD_VAR 0 1
42144: PPUSH
42145: CALL_OW 251
42149: PPUSH
42150: LD_INT 10
42152: PPUSH
42153: LD_INT 0
42155: PPUSH
42156: CALL_OW 50
// result := result ^ un ;
42160: LD_ADDR_VAR 0 7
42164: PUSH
42165: LD_VAR 0 7
42169: PUSH
42170: LD_VAR 0 14
42174: ADD
42175: ST_TO_ADDR
// end ;
42176: GO 42054
42178: POP
42179: POP
// end ; end ;
42180: LD_VAR 0 7
42184: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42185: LD_INT 0
42187: PPUSH
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
42199: PPUSH
42200: PPUSH
42201: PPUSH
42202: PPUSH
// result := false ;
42203: LD_ADDR_VAR 0 3
42207: PUSH
42208: LD_INT 0
42210: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42211: LD_VAR 0 1
42215: NOT
42216: PUSH
42217: LD_VAR 0 1
42221: PPUSH
42222: CALL_OW 266
42226: PUSH
42227: LD_INT 32
42229: PUSH
42230: LD_INT 33
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: IN
42237: NOT
42238: OR
42239: IFFALSE 42243
// exit ;
42241: GO 43379
// nat := GetNation ( tower ) ;
42243: LD_ADDR_VAR 0 12
42247: PUSH
42248: LD_VAR 0 1
42252: PPUSH
42253: CALL_OW 248
42257: ST_TO_ADDR
// side := GetSide ( tower ) ;
42258: LD_ADDR_VAR 0 16
42262: PUSH
42263: LD_VAR 0 1
42267: PPUSH
42268: CALL_OW 255
42272: ST_TO_ADDR
// x := GetX ( tower ) ;
42273: LD_ADDR_VAR 0 10
42277: PUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: CALL_OW 250
42287: ST_TO_ADDR
// y := GetY ( tower ) ;
42288: LD_ADDR_VAR 0 11
42292: PUSH
42293: LD_VAR 0 1
42297: PPUSH
42298: CALL_OW 251
42302: ST_TO_ADDR
// if not x or not y then
42303: LD_VAR 0 10
42307: NOT
42308: PUSH
42309: LD_VAR 0 11
42313: NOT
42314: OR
42315: IFFALSE 42319
// exit ;
42317: GO 43379
// weapon := 0 ;
42319: LD_ADDR_VAR 0 18
42323: PUSH
42324: LD_INT 0
42326: ST_TO_ADDR
// fac_list := [ ] ;
42327: LD_ADDR_VAR 0 17
42331: PUSH
42332: EMPTY
42333: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
42334: LD_ADDR_VAR 0 6
42338: PUSH
42339: LD_VAR 0 1
42343: PPUSH
42344: CALL_OW 274
42348: PPUSH
42349: LD_VAR 0 2
42353: PPUSH
42354: CALL 39957 0 2
42358: PPUSH
42359: LD_INT 30
42361: PUSH
42362: LD_INT 3
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PPUSH
42369: CALL_OW 72
42373: ST_TO_ADDR
// if not factories then
42374: LD_VAR 0 6
42378: NOT
42379: IFFALSE 42383
// exit ;
42381: GO 43379
// for i in factories do
42383: LD_ADDR_VAR 0 8
42387: PUSH
42388: LD_VAR 0 6
42392: PUSH
42393: FOR_IN
42394: IFFALSE 42419
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42396: LD_ADDR_VAR 0 17
42400: PUSH
42401: LD_VAR 0 17
42405: PUSH
42406: LD_VAR 0 8
42410: PPUSH
42411: CALL_OW 478
42415: UNION
42416: ST_TO_ADDR
42417: GO 42393
42419: POP
42420: POP
// if not fac_list then
42421: LD_VAR 0 17
42425: NOT
42426: IFFALSE 42430
// exit ;
42428: GO 43379
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42430: LD_ADDR_VAR 0 5
42434: PUSH
42435: LD_INT 4
42437: PUSH
42438: LD_INT 5
42440: PUSH
42441: LD_INT 9
42443: PUSH
42444: LD_INT 10
42446: PUSH
42447: LD_INT 6
42449: PUSH
42450: LD_INT 7
42452: PUSH
42453: LD_INT 11
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 27
42467: PUSH
42468: LD_INT 28
42470: PUSH
42471: LD_INT 26
42473: PUSH
42474: LD_INT 30
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 43
42485: PUSH
42486: LD_INT 44
42488: PUSH
42489: LD_INT 46
42491: PUSH
42492: LD_INT 45
42494: PUSH
42495: LD_INT 47
42497: PUSH
42498: LD_INT 49
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: PUSH
42514: LD_VAR 0 12
42518: ARRAY
42519: ST_TO_ADDR
// for i in list do
42520: LD_ADDR_VAR 0 8
42524: PUSH
42525: LD_VAR 0 5
42529: PUSH
42530: FOR_IN
42531: IFFALSE 42564
// if not i in fac_list then
42533: LD_VAR 0 8
42537: PUSH
42538: LD_VAR 0 17
42542: IN
42543: NOT
42544: IFFALSE 42562
// list := list diff i ;
42546: LD_ADDR_VAR 0 5
42550: PUSH
42551: LD_VAR 0 5
42555: PUSH
42556: LD_VAR 0 8
42560: DIFF
42561: ST_TO_ADDR
42562: GO 42530
42564: POP
42565: POP
// if not list then
42566: LD_VAR 0 5
42570: NOT
42571: IFFALSE 42575
// exit ;
42573: GO 43379
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42575: LD_VAR 0 12
42579: PUSH
42580: LD_INT 3
42582: EQUAL
42583: PUSH
42584: LD_INT 49
42586: PUSH
42587: LD_VAR 0 5
42591: IN
42592: AND
42593: PUSH
42594: LD_INT 31
42596: PPUSH
42597: LD_VAR 0 16
42601: PPUSH
42602: CALL_OW 321
42606: PUSH
42607: LD_INT 2
42609: EQUAL
42610: AND
42611: IFFALSE 42671
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42613: LD_INT 22
42615: PUSH
42616: LD_VAR 0 16
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 35
42627: PUSH
42628: LD_INT 49
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 91
42637: PUSH
42638: LD_VAR 0 1
42642: PUSH
42643: LD_INT 10
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: PPUSH
42656: CALL_OW 69
42660: NOT
42661: IFFALSE 42671
// weapon := ru_time_lapser ;
42663: LD_ADDR_VAR 0 18
42667: PUSH
42668: LD_INT 49
42670: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42671: LD_VAR 0 12
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: IN
42686: PUSH
42687: LD_INT 11
42689: PUSH
42690: LD_VAR 0 5
42694: IN
42695: PUSH
42696: LD_INT 30
42698: PUSH
42699: LD_VAR 0 5
42703: IN
42704: OR
42705: AND
42706: PUSH
42707: LD_INT 6
42709: PPUSH
42710: LD_VAR 0 16
42714: PPUSH
42715: CALL_OW 321
42719: PUSH
42720: LD_INT 2
42722: EQUAL
42723: AND
42724: IFFALSE 42889
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42726: LD_INT 22
42728: PUSH
42729: LD_VAR 0 16
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 35
42743: PUSH
42744: LD_INT 11
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 35
42753: PUSH
42754: LD_INT 30
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 91
42768: PUSH
42769: LD_VAR 0 1
42773: PUSH
42774: LD_INT 18
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: LIST
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: LIST
42786: PPUSH
42787: CALL_OW 69
42791: NOT
42792: PUSH
42793: LD_INT 22
42795: PUSH
42796: LD_VAR 0 16
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 30
42810: PUSH
42811: LD_INT 32
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 30
42820: PUSH
42821: LD_INT 33
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 91
42835: PUSH
42836: LD_VAR 0 1
42840: PUSH
42841: LD_INT 12
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: PPUSH
42857: CALL_OW 69
42861: PUSH
42862: LD_INT 2
42864: GREATER
42865: AND
42866: IFFALSE 42889
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42868: LD_ADDR_VAR 0 18
42872: PUSH
42873: LD_INT 11
42875: PUSH
42876: LD_INT 30
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_VAR 0 12
42887: ARRAY
42888: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42889: LD_VAR 0 18
42893: NOT
42894: PUSH
42895: LD_INT 40
42897: PPUSH
42898: LD_VAR 0 16
42902: PPUSH
42903: CALL_OW 321
42907: PUSH
42908: LD_INT 2
42910: EQUAL
42911: AND
42912: PUSH
42913: LD_INT 7
42915: PUSH
42916: LD_VAR 0 5
42920: IN
42921: PUSH
42922: LD_INT 28
42924: PUSH
42925: LD_VAR 0 5
42929: IN
42930: OR
42931: PUSH
42932: LD_INT 45
42934: PUSH
42935: LD_VAR 0 5
42939: IN
42940: OR
42941: AND
42942: IFFALSE 43196
// begin hex := GetHexInfo ( x , y ) ;
42944: LD_ADDR_VAR 0 4
42948: PUSH
42949: LD_VAR 0 10
42953: PPUSH
42954: LD_VAR 0 11
42958: PPUSH
42959: CALL_OW 546
42963: ST_TO_ADDR
// if hex [ 1 ] then
42964: LD_VAR 0 4
42968: PUSH
42969: LD_INT 1
42971: ARRAY
42972: IFFALSE 42976
// exit ;
42974: GO 43379
// height := hex [ 2 ] ;
42976: LD_ADDR_VAR 0 15
42980: PUSH
42981: LD_VAR 0 4
42985: PUSH
42986: LD_INT 2
42988: ARRAY
42989: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42990: LD_ADDR_VAR 0 14
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: LD_INT 5
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: ST_TO_ADDR
// for i in tmp do
43013: LD_ADDR_VAR 0 8
43017: PUSH
43018: LD_VAR 0 14
43022: PUSH
43023: FOR_IN
43024: IFFALSE 43194
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43026: LD_ADDR_VAR 0 9
43030: PUSH
43031: LD_VAR 0 10
43035: PPUSH
43036: LD_VAR 0 8
43040: PPUSH
43041: LD_INT 5
43043: PPUSH
43044: CALL_OW 272
43048: PUSH
43049: LD_VAR 0 11
43053: PPUSH
43054: LD_VAR 0 8
43058: PPUSH
43059: LD_INT 5
43061: PPUSH
43062: CALL_OW 273
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43071: LD_VAR 0 9
43075: PUSH
43076: LD_INT 1
43078: ARRAY
43079: PPUSH
43080: LD_VAR 0 9
43084: PUSH
43085: LD_INT 2
43087: ARRAY
43088: PPUSH
43089: CALL_OW 488
43093: IFFALSE 43192
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43095: LD_ADDR_VAR 0 4
43099: PUSH
43100: LD_VAR 0 9
43104: PUSH
43105: LD_INT 1
43107: ARRAY
43108: PPUSH
43109: LD_VAR 0 9
43113: PUSH
43114: LD_INT 2
43116: ARRAY
43117: PPUSH
43118: CALL_OW 546
43122: ST_TO_ADDR
// if hex [ 1 ] then
43123: LD_VAR 0 4
43127: PUSH
43128: LD_INT 1
43130: ARRAY
43131: IFFALSE 43135
// continue ;
43133: GO 43023
// h := hex [ 2 ] ;
43135: LD_ADDR_VAR 0 13
43139: PUSH
43140: LD_VAR 0 4
43144: PUSH
43145: LD_INT 2
43147: ARRAY
43148: ST_TO_ADDR
// if h + 7 < height then
43149: LD_VAR 0 13
43153: PUSH
43154: LD_INT 7
43156: PLUS
43157: PUSH
43158: LD_VAR 0 15
43162: LESS
43163: IFFALSE 43192
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43165: LD_ADDR_VAR 0 18
43169: PUSH
43170: LD_INT 7
43172: PUSH
43173: LD_INT 28
43175: PUSH
43176: LD_INT 45
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: PUSH
43184: LD_VAR 0 12
43188: ARRAY
43189: ST_TO_ADDR
// break ;
43190: GO 43194
// end ; end ; end ;
43192: GO 43023
43194: POP
43195: POP
// end ; if not weapon then
43196: LD_VAR 0 18
43200: NOT
43201: IFFALSE 43261
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43203: LD_ADDR_VAR 0 5
43207: PUSH
43208: LD_VAR 0 5
43212: PUSH
43213: LD_INT 11
43215: PUSH
43216: LD_INT 30
43218: PUSH
43219: LD_INT 49
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: DIFF
43227: ST_TO_ADDR
// if not list then
43228: LD_VAR 0 5
43232: NOT
43233: IFFALSE 43237
// exit ;
43235: GO 43379
// weapon := list [ rand ( 1 , list ) ] ;
43237: LD_ADDR_VAR 0 18
43241: PUSH
43242: LD_VAR 0 5
43246: PUSH
43247: LD_INT 1
43249: PPUSH
43250: LD_VAR 0 5
43254: PPUSH
43255: CALL_OW 12
43259: ARRAY
43260: ST_TO_ADDR
// end ; if weapon then
43261: LD_VAR 0 18
43265: IFFALSE 43379
// begin tmp := CostOfWeapon ( weapon ) ;
43267: LD_ADDR_VAR 0 14
43271: PUSH
43272: LD_VAR 0 18
43276: PPUSH
43277: CALL_OW 451
43281: ST_TO_ADDR
// j := GetBase ( tower ) ;
43282: LD_ADDR_VAR 0 9
43286: PUSH
43287: LD_VAR 0 1
43291: PPUSH
43292: CALL_OW 274
43296: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43297: LD_VAR 0 9
43301: PPUSH
43302: LD_INT 1
43304: PPUSH
43305: CALL_OW 275
43309: PUSH
43310: LD_VAR 0 14
43314: PUSH
43315: LD_INT 1
43317: ARRAY
43318: GREATEREQUAL
43319: PUSH
43320: LD_VAR 0 9
43324: PPUSH
43325: LD_INT 2
43327: PPUSH
43328: CALL_OW 275
43332: PUSH
43333: LD_VAR 0 14
43337: PUSH
43338: LD_INT 2
43340: ARRAY
43341: GREATEREQUAL
43342: AND
43343: PUSH
43344: LD_VAR 0 9
43348: PPUSH
43349: LD_INT 3
43351: PPUSH
43352: CALL_OW 275
43356: PUSH
43357: LD_VAR 0 14
43361: PUSH
43362: LD_INT 3
43364: ARRAY
43365: GREATEREQUAL
43366: AND
43367: IFFALSE 43379
// result := weapon ;
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_VAR 0 18
43378: ST_TO_ADDR
// end ; end ;
43379: LD_VAR 0 3
43383: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43384: LD_INT 0
43386: PPUSH
43387: PPUSH
// result := true ;
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: LD_INT 1
43395: ST_TO_ADDR
// if array1 = array2 then
43396: LD_VAR 0 1
43400: PUSH
43401: LD_VAR 0 2
43405: EQUAL
43406: IFFALSE 43466
// begin for i = 1 to array1 do
43408: LD_ADDR_VAR 0 4
43412: PUSH
43413: DOUBLE
43414: LD_INT 1
43416: DEC
43417: ST_TO_ADDR
43418: LD_VAR 0 1
43422: PUSH
43423: FOR_TO
43424: IFFALSE 43462
// if array1 [ i ] <> array2 [ i ] then
43426: LD_VAR 0 1
43430: PUSH
43431: LD_VAR 0 4
43435: ARRAY
43436: PUSH
43437: LD_VAR 0 2
43441: PUSH
43442: LD_VAR 0 4
43446: ARRAY
43447: NONEQUAL
43448: IFFALSE 43460
// begin result := false ;
43450: LD_ADDR_VAR 0 3
43454: PUSH
43455: LD_INT 0
43457: ST_TO_ADDR
// break ;
43458: GO 43462
// end ;
43460: GO 43423
43462: POP
43463: POP
// end else
43464: GO 43474
// result := false ;
43466: LD_ADDR_VAR 0 3
43470: PUSH
43471: LD_INT 0
43473: ST_TO_ADDR
// end ;
43474: LD_VAR 0 3
43478: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43479: LD_INT 0
43481: PPUSH
43482: PPUSH
43483: PPUSH
// pom := GetBase ( fac ) ;
43484: LD_ADDR_VAR 0 5
43488: PUSH
43489: LD_VAR 0 1
43493: PPUSH
43494: CALL_OW 274
43498: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43499: LD_ADDR_VAR 0 4
43503: PUSH
43504: LD_VAR 0 2
43508: PUSH
43509: LD_INT 1
43511: ARRAY
43512: PPUSH
43513: LD_VAR 0 2
43517: PUSH
43518: LD_INT 2
43520: ARRAY
43521: PPUSH
43522: LD_VAR 0 2
43526: PUSH
43527: LD_INT 3
43529: ARRAY
43530: PPUSH
43531: LD_VAR 0 2
43535: PUSH
43536: LD_INT 4
43538: ARRAY
43539: PPUSH
43540: CALL_OW 449
43544: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43545: LD_ADDR_VAR 0 3
43549: PUSH
43550: LD_VAR 0 5
43554: PPUSH
43555: LD_INT 1
43557: PPUSH
43558: CALL_OW 275
43562: PUSH
43563: LD_VAR 0 4
43567: PUSH
43568: LD_INT 1
43570: ARRAY
43571: GREATEREQUAL
43572: PUSH
43573: LD_VAR 0 5
43577: PPUSH
43578: LD_INT 2
43580: PPUSH
43581: CALL_OW 275
43585: PUSH
43586: LD_VAR 0 4
43590: PUSH
43591: LD_INT 2
43593: ARRAY
43594: GREATEREQUAL
43595: AND
43596: PUSH
43597: LD_VAR 0 5
43601: PPUSH
43602: LD_INT 3
43604: PPUSH
43605: CALL_OW 275
43609: PUSH
43610: LD_VAR 0 4
43614: PUSH
43615: LD_INT 3
43617: ARRAY
43618: GREATEREQUAL
43619: AND
43620: ST_TO_ADDR
// end ;
43621: LD_VAR 0 3
43625: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43626: LD_INT 0
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
// pom := GetBase ( building ) ;
43632: LD_ADDR_VAR 0 3
43636: PUSH
43637: LD_VAR 0 1
43641: PPUSH
43642: CALL_OW 274
43646: ST_TO_ADDR
// if not pom then
43647: LD_VAR 0 3
43651: NOT
43652: IFFALSE 43656
// exit ;
43654: GO 43826
// btype := GetBType ( building ) ;
43656: LD_ADDR_VAR 0 5
43660: PUSH
43661: LD_VAR 0 1
43665: PPUSH
43666: CALL_OW 266
43670: ST_TO_ADDR
// if btype = b_armoury then
43671: LD_VAR 0 5
43675: PUSH
43676: LD_INT 4
43678: EQUAL
43679: IFFALSE 43689
// btype := b_barracks ;
43681: LD_ADDR_VAR 0 5
43685: PUSH
43686: LD_INT 5
43688: ST_TO_ADDR
// if btype = b_depot then
43689: LD_VAR 0 5
43693: PUSH
43694: LD_INT 0
43696: EQUAL
43697: IFFALSE 43707
// btype := b_warehouse ;
43699: LD_ADDR_VAR 0 5
43703: PUSH
43704: LD_INT 1
43706: ST_TO_ADDR
// if btype = b_workshop then
43707: LD_VAR 0 5
43711: PUSH
43712: LD_INT 2
43714: EQUAL
43715: IFFALSE 43725
// btype := b_factory ;
43717: LD_ADDR_VAR 0 5
43721: PUSH
43722: LD_INT 3
43724: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43725: LD_ADDR_VAR 0 4
43729: PUSH
43730: LD_VAR 0 5
43734: PPUSH
43735: LD_VAR 0 1
43739: PPUSH
43740: CALL_OW 248
43744: PPUSH
43745: CALL_OW 450
43749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43750: LD_ADDR_VAR 0 2
43754: PUSH
43755: LD_VAR 0 3
43759: PPUSH
43760: LD_INT 1
43762: PPUSH
43763: CALL_OW 275
43767: PUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 1
43775: ARRAY
43776: GREATEREQUAL
43777: PUSH
43778: LD_VAR 0 3
43782: PPUSH
43783: LD_INT 2
43785: PPUSH
43786: CALL_OW 275
43790: PUSH
43791: LD_VAR 0 4
43795: PUSH
43796: LD_INT 2
43798: ARRAY
43799: GREATEREQUAL
43800: AND
43801: PUSH
43802: LD_VAR 0 3
43806: PPUSH
43807: LD_INT 3
43809: PPUSH
43810: CALL_OW 275
43814: PUSH
43815: LD_VAR 0 4
43819: PUSH
43820: LD_INT 3
43822: ARRAY
43823: GREATEREQUAL
43824: AND
43825: ST_TO_ADDR
// end ;
43826: LD_VAR 0 2
43830: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43831: LD_INT 0
43833: PPUSH
43834: PPUSH
43835: PPUSH
// pom := GetBase ( building ) ;
43836: LD_ADDR_VAR 0 4
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 274
43850: ST_TO_ADDR
// if not pom then
43851: LD_VAR 0 4
43855: NOT
43856: IFFALSE 43860
// exit ;
43858: GO 43961
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43860: LD_ADDR_VAR 0 5
43864: PUSH
43865: LD_VAR 0 2
43869: PPUSH
43870: LD_VAR 0 1
43874: PPUSH
43875: CALL_OW 248
43879: PPUSH
43880: CALL_OW 450
43884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43885: LD_ADDR_VAR 0 3
43889: PUSH
43890: LD_VAR 0 4
43894: PPUSH
43895: LD_INT 1
43897: PPUSH
43898: CALL_OW 275
43902: PUSH
43903: LD_VAR 0 5
43907: PUSH
43908: LD_INT 1
43910: ARRAY
43911: GREATEREQUAL
43912: PUSH
43913: LD_VAR 0 4
43917: PPUSH
43918: LD_INT 2
43920: PPUSH
43921: CALL_OW 275
43925: PUSH
43926: LD_VAR 0 5
43930: PUSH
43931: LD_INT 2
43933: ARRAY
43934: GREATEREQUAL
43935: AND
43936: PUSH
43937: LD_VAR 0 4
43941: PPUSH
43942: LD_INT 3
43944: PPUSH
43945: CALL_OW 275
43949: PUSH
43950: LD_VAR 0 5
43954: PUSH
43955: LD_INT 3
43957: ARRAY
43958: GREATEREQUAL
43959: AND
43960: ST_TO_ADDR
// end ;
43961: LD_VAR 0 3
43965: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43966: LD_INT 0
43968: PPUSH
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
// result := false ;
43978: LD_ADDR_VAR 0 6
43982: PUSH
43983: LD_INT 0
43985: ST_TO_ADDR
// if not base or not btype or not x or not y then
43986: LD_VAR 0 1
43990: NOT
43991: PUSH
43992: LD_VAR 0 2
43996: NOT
43997: OR
43998: PUSH
43999: LD_VAR 0 3
44003: NOT
44004: OR
44005: PUSH
44006: LD_VAR 0 4
44010: NOT
44011: OR
44012: IFFALSE 44016
// exit ;
44014: GO 44625
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44016: LD_ADDR_VAR 0 12
44020: PUSH
44021: LD_VAR 0 2
44025: PPUSH
44026: LD_VAR 0 3
44030: PPUSH
44031: LD_VAR 0 4
44035: PPUSH
44036: LD_VAR 0 5
44040: PPUSH
44041: LD_VAR 0 1
44045: PUSH
44046: LD_INT 1
44048: ARRAY
44049: PPUSH
44050: CALL_OW 248
44054: PPUSH
44055: LD_INT 0
44057: PPUSH
44058: CALL 45462 0 6
44062: ST_TO_ADDR
// if not hexes then
44063: LD_VAR 0 12
44067: NOT
44068: IFFALSE 44072
// exit ;
44070: GO 44625
// for i = 1 to hexes do
44072: LD_ADDR_VAR 0 7
44076: PUSH
44077: DOUBLE
44078: LD_INT 1
44080: DEC
44081: ST_TO_ADDR
44082: LD_VAR 0 12
44086: PUSH
44087: FOR_TO
44088: IFFALSE 44623
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44090: LD_ADDR_VAR 0 11
44094: PUSH
44095: LD_VAR 0 12
44099: PUSH
44100: LD_VAR 0 7
44104: ARRAY
44105: PUSH
44106: LD_INT 1
44108: ARRAY
44109: PPUSH
44110: LD_VAR 0 12
44114: PUSH
44115: LD_VAR 0 7
44119: ARRAY
44120: PUSH
44121: LD_INT 2
44123: ARRAY
44124: PPUSH
44125: CALL_OW 428
44129: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44130: LD_VAR 0 12
44134: PUSH
44135: LD_VAR 0 7
44139: ARRAY
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: PPUSH
44145: LD_VAR 0 12
44149: PUSH
44150: LD_VAR 0 7
44154: ARRAY
44155: PUSH
44156: LD_INT 2
44158: ARRAY
44159: PPUSH
44160: CALL_OW 351
44164: PUSH
44165: LD_VAR 0 12
44169: PUSH
44170: LD_VAR 0 7
44174: ARRAY
44175: PUSH
44176: LD_INT 1
44178: ARRAY
44179: PPUSH
44180: LD_VAR 0 12
44184: PUSH
44185: LD_VAR 0 7
44189: ARRAY
44190: PUSH
44191: LD_INT 2
44193: ARRAY
44194: PPUSH
44195: CALL_OW 488
44199: NOT
44200: OR
44201: PUSH
44202: LD_VAR 0 11
44206: PPUSH
44207: CALL_OW 247
44211: PUSH
44212: LD_INT 3
44214: EQUAL
44215: OR
44216: IFFALSE 44222
// exit ;
44218: POP
44219: POP
44220: GO 44625
// if not tmp or not tmp in base then
44222: LD_VAR 0 11
44226: NOT
44227: PUSH
44228: LD_VAR 0 11
44232: PUSH
44233: LD_VAR 0 1
44237: IN
44238: NOT
44239: OR
44240: IFFALSE 44244
// continue ;
44242: GO 44087
// result := true ;
44244: LD_ADDR_VAR 0 6
44248: PUSH
44249: LD_INT 1
44251: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44252: LD_ADDR_VAR 0 15
44256: PUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: LD_INT 22
44264: PUSH
44265: LD_VAR 0 11
44269: PPUSH
44270: CALL_OW 255
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: LD_INT 30
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 30
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: LIST
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PPUSH
44311: CALL_OW 72
44315: ST_TO_ADDR
// if dep then
44316: LD_VAR 0 15
44320: IFFALSE 44456
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44322: LD_ADDR_VAR 0 14
44326: PUSH
44327: LD_VAR 0 15
44331: PUSH
44332: LD_INT 1
44334: ARRAY
44335: PPUSH
44336: CALL_OW 250
44340: PPUSH
44341: LD_VAR 0 15
44345: PUSH
44346: LD_INT 1
44348: ARRAY
44349: PPUSH
44350: CALL_OW 254
44354: PPUSH
44355: LD_INT 5
44357: PPUSH
44358: CALL_OW 272
44362: PUSH
44363: LD_VAR 0 15
44367: PUSH
44368: LD_INT 1
44370: ARRAY
44371: PPUSH
44372: CALL_OW 251
44376: PPUSH
44377: LD_VAR 0 15
44381: PUSH
44382: LD_INT 1
44384: ARRAY
44385: PPUSH
44386: CALL_OW 254
44390: PPUSH
44391: LD_INT 5
44393: PPUSH
44394: CALL_OW 273
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44403: LD_VAR 0 14
44407: PUSH
44408: LD_INT 1
44410: ARRAY
44411: PPUSH
44412: LD_VAR 0 14
44416: PUSH
44417: LD_INT 2
44419: ARRAY
44420: PPUSH
44421: CALL_OW 488
44425: IFFALSE 44456
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44427: LD_VAR 0 11
44431: PPUSH
44432: LD_VAR 0 14
44436: PUSH
44437: LD_INT 1
44439: ARRAY
44440: PPUSH
44441: LD_VAR 0 14
44445: PUSH
44446: LD_INT 2
44448: ARRAY
44449: PPUSH
44450: CALL_OW 111
// continue ;
44454: GO 44087
// end ; end ; r := GetDir ( tmp ) ;
44456: LD_ADDR_VAR 0 13
44460: PUSH
44461: LD_VAR 0 11
44465: PPUSH
44466: CALL_OW 254
44470: ST_TO_ADDR
// if r = 5 then
44471: LD_VAR 0 13
44475: PUSH
44476: LD_INT 5
44478: EQUAL
44479: IFFALSE 44489
// r := 0 ;
44481: LD_ADDR_VAR 0 13
44485: PUSH
44486: LD_INT 0
44488: ST_TO_ADDR
// for j = r to 5 do
44489: LD_ADDR_VAR 0 8
44493: PUSH
44494: DOUBLE
44495: LD_VAR 0 13
44499: DEC
44500: ST_TO_ADDR
44501: LD_INT 5
44503: PUSH
44504: FOR_TO
44505: IFFALSE 44619
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44507: LD_ADDR_VAR 0 9
44511: PUSH
44512: LD_VAR 0 11
44516: PPUSH
44517: CALL_OW 250
44521: PPUSH
44522: LD_VAR 0 8
44526: PPUSH
44527: LD_INT 2
44529: PPUSH
44530: CALL_OW 272
44534: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44535: LD_ADDR_VAR 0 10
44539: PUSH
44540: LD_VAR 0 11
44544: PPUSH
44545: CALL_OW 251
44549: PPUSH
44550: LD_VAR 0 8
44554: PPUSH
44555: LD_INT 2
44557: PPUSH
44558: CALL_OW 273
44562: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44563: LD_VAR 0 9
44567: PPUSH
44568: LD_VAR 0 10
44572: PPUSH
44573: CALL_OW 488
44577: PUSH
44578: LD_VAR 0 9
44582: PPUSH
44583: LD_VAR 0 10
44587: PPUSH
44588: CALL_OW 428
44592: NOT
44593: AND
44594: IFFALSE 44617
// begin ComMoveXY ( tmp , _x , _y ) ;
44596: LD_VAR 0 11
44600: PPUSH
44601: LD_VAR 0 9
44605: PPUSH
44606: LD_VAR 0 10
44610: PPUSH
44611: CALL_OW 111
// break ;
44615: GO 44619
// end ; end ;
44617: GO 44504
44619: POP
44620: POP
// end ;
44621: GO 44087
44623: POP
44624: POP
// end ;
44625: LD_VAR 0 6
44629: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
44630: LD_INT 0
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
// result := false ;
44642: LD_ADDR_VAR 0 6
44646: PUSH
44647: LD_INT 0
44649: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44650: LD_VAR 0 1
44654: NOT
44655: PUSH
44656: LD_VAR 0 1
44660: PPUSH
44661: CALL_OW 266
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: IN
44676: NOT
44677: OR
44678: PUSH
44679: LD_VAR 0 2
44683: NOT
44684: OR
44685: PUSH
44686: LD_VAR 0 5
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 3
44702: PUSH
44703: LD_INT 4
44705: PUSH
44706: LD_INT 5
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: IN
44717: NOT
44718: OR
44719: PUSH
44720: LD_VAR 0 3
44724: PPUSH
44725: LD_VAR 0 4
44729: PPUSH
44730: CALL_OW 488
44734: NOT
44735: OR
44736: IFFALSE 44740
// exit ;
44738: GO 45457
// pom := GetBase ( depot ) ;
44740: LD_ADDR_VAR 0 10
44744: PUSH
44745: LD_VAR 0 1
44749: PPUSH
44750: CALL_OW 274
44754: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44755: LD_ADDR_VAR 0 11
44759: PUSH
44760: LD_VAR 0 2
44764: PPUSH
44765: LD_VAR 0 1
44769: PPUSH
44770: CALL_OW 248
44774: PPUSH
44775: CALL_OW 450
44779: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44780: LD_VAR 0 10
44784: PPUSH
44785: LD_INT 1
44787: PPUSH
44788: CALL_OW 275
44792: PUSH
44793: LD_VAR 0 11
44797: PUSH
44798: LD_INT 1
44800: ARRAY
44801: GREATEREQUAL
44802: PUSH
44803: LD_VAR 0 10
44807: PPUSH
44808: LD_INT 2
44810: PPUSH
44811: CALL_OW 275
44815: PUSH
44816: LD_VAR 0 11
44820: PUSH
44821: LD_INT 2
44823: ARRAY
44824: GREATEREQUAL
44825: AND
44826: PUSH
44827: LD_VAR 0 10
44831: PPUSH
44832: LD_INT 3
44834: PPUSH
44835: CALL_OW 275
44839: PUSH
44840: LD_VAR 0 11
44844: PUSH
44845: LD_INT 3
44847: ARRAY
44848: GREATEREQUAL
44849: AND
44850: NOT
44851: IFFALSE 44855
// exit ;
44853: GO 45457
// if GetBType ( depot ) = b_depot then
44855: LD_VAR 0 1
44859: PPUSH
44860: CALL_OW 266
44864: PUSH
44865: LD_INT 0
44867: EQUAL
44868: IFFALSE 44880
// dist := 28 else
44870: LD_ADDR_VAR 0 14
44874: PUSH
44875: LD_INT 28
44877: ST_TO_ADDR
44878: GO 44888
// dist := 36 ;
44880: LD_ADDR_VAR 0 14
44884: PUSH
44885: LD_INT 36
44887: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44888: LD_VAR 0 1
44892: PPUSH
44893: LD_VAR 0 3
44897: PPUSH
44898: LD_VAR 0 4
44902: PPUSH
44903: CALL_OW 297
44907: PUSH
44908: LD_VAR 0 14
44912: GREATER
44913: IFFALSE 44917
// exit ;
44915: GO 45457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44917: LD_ADDR_VAR 0 12
44921: PUSH
44922: LD_VAR 0 2
44926: PPUSH
44927: LD_VAR 0 3
44931: PPUSH
44932: LD_VAR 0 4
44936: PPUSH
44937: LD_VAR 0 5
44941: PPUSH
44942: LD_VAR 0 1
44946: PPUSH
44947: CALL_OW 248
44951: PPUSH
44952: LD_INT 0
44954: PPUSH
44955: CALL 45462 0 6
44959: ST_TO_ADDR
// if not hexes then
44960: LD_VAR 0 12
44964: NOT
44965: IFFALSE 44969
// exit ;
44967: GO 45457
// hex := GetHexInfo ( x , y ) ;
44969: LD_ADDR_VAR 0 15
44973: PUSH
44974: LD_VAR 0 3
44978: PPUSH
44979: LD_VAR 0 4
44983: PPUSH
44984: CALL_OW 546
44988: ST_TO_ADDR
// if hex [ 1 ] then
44989: LD_VAR 0 15
44993: PUSH
44994: LD_INT 1
44996: ARRAY
44997: IFFALSE 45001
// exit ;
44999: GO 45457
// height := hex [ 2 ] ;
45001: LD_ADDR_VAR 0 13
45005: PUSH
45006: LD_VAR 0 15
45010: PUSH
45011: LD_INT 2
45013: ARRAY
45014: ST_TO_ADDR
// for i = 1 to hexes do
45015: LD_ADDR_VAR 0 7
45019: PUSH
45020: DOUBLE
45021: LD_INT 1
45023: DEC
45024: ST_TO_ADDR
45025: LD_VAR 0 12
45029: PUSH
45030: FOR_TO
45031: IFFALSE 45361
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45033: LD_VAR 0 12
45037: PUSH
45038: LD_VAR 0 7
45042: ARRAY
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: PPUSH
45048: LD_VAR 0 12
45052: PUSH
45053: LD_VAR 0 7
45057: ARRAY
45058: PUSH
45059: LD_INT 2
45061: ARRAY
45062: PPUSH
45063: CALL_OW 488
45067: NOT
45068: PUSH
45069: LD_VAR 0 12
45073: PUSH
45074: LD_VAR 0 7
45078: ARRAY
45079: PUSH
45080: LD_INT 1
45082: ARRAY
45083: PPUSH
45084: LD_VAR 0 12
45088: PUSH
45089: LD_VAR 0 7
45093: ARRAY
45094: PUSH
45095: LD_INT 2
45097: ARRAY
45098: PPUSH
45099: CALL_OW 428
45103: PUSH
45104: LD_INT 0
45106: GREATER
45107: OR
45108: PUSH
45109: LD_VAR 0 12
45113: PUSH
45114: LD_VAR 0 7
45118: ARRAY
45119: PUSH
45120: LD_INT 1
45122: ARRAY
45123: PPUSH
45124: LD_VAR 0 12
45128: PUSH
45129: LD_VAR 0 7
45133: ARRAY
45134: PUSH
45135: LD_INT 2
45137: ARRAY
45138: PPUSH
45139: CALL_OW 351
45143: OR
45144: IFFALSE 45150
// exit ;
45146: POP
45147: POP
45148: GO 45457
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45150: LD_ADDR_VAR 0 8
45154: PUSH
45155: LD_VAR 0 12
45159: PUSH
45160: LD_VAR 0 7
45164: ARRAY
45165: PUSH
45166: LD_INT 1
45168: ARRAY
45169: PPUSH
45170: LD_VAR 0 12
45174: PUSH
45175: LD_VAR 0 7
45179: ARRAY
45180: PUSH
45181: LD_INT 2
45183: ARRAY
45184: PPUSH
45185: CALL_OW 546
45189: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45190: LD_VAR 0 8
45194: PUSH
45195: LD_INT 1
45197: ARRAY
45198: PUSH
45199: LD_VAR 0 8
45203: PUSH
45204: LD_INT 2
45206: ARRAY
45207: PUSH
45208: LD_VAR 0 13
45212: PUSH
45213: LD_INT 2
45215: PLUS
45216: GREATER
45217: OR
45218: PUSH
45219: LD_VAR 0 8
45223: PUSH
45224: LD_INT 2
45226: ARRAY
45227: PUSH
45228: LD_VAR 0 13
45232: PUSH
45233: LD_INT 2
45235: MINUS
45236: LESS
45237: OR
45238: PUSH
45239: LD_VAR 0 8
45243: PUSH
45244: LD_INT 3
45246: ARRAY
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 8
45253: PUSH
45254: LD_INT 9
45256: PUSH
45257: LD_INT 10
45259: PUSH
45260: LD_INT 11
45262: PUSH
45263: LD_INT 12
45265: PUSH
45266: LD_INT 13
45268: PUSH
45269: LD_INT 16
45271: PUSH
45272: LD_INT 17
45274: PUSH
45275: LD_INT 18
45277: PUSH
45278: LD_INT 19
45280: PUSH
45281: LD_INT 20
45283: PUSH
45284: LD_INT 21
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: IN
45302: NOT
45303: OR
45304: PUSH
45305: LD_VAR 0 8
45309: PUSH
45310: LD_INT 5
45312: ARRAY
45313: NOT
45314: OR
45315: PUSH
45316: LD_VAR 0 8
45320: PUSH
45321: LD_INT 6
45323: ARRAY
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: LD_INT 7
45333: PUSH
45334: LD_INT 9
45336: PUSH
45337: LD_INT 10
45339: PUSH
45340: LD_INT 11
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: IN
45351: NOT
45352: OR
45353: IFFALSE 45359
// exit ;
45355: POP
45356: POP
45357: GO 45457
// end ;
45359: GO 45030
45361: POP
45362: POP
// side := GetSide ( depot ) ;
45363: LD_ADDR_VAR 0 9
45367: PUSH
45368: LD_VAR 0 1
45372: PPUSH
45373: CALL_OW 255
45377: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45378: LD_VAR 0 9
45382: PPUSH
45383: LD_VAR 0 3
45387: PPUSH
45388: LD_VAR 0 4
45392: PPUSH
45393: LD_INT 20
45395: PPUSH
45396: CALL 38111 0 4
45400: PUSH
45401: LD_INT 4
45403: ARRAY
45404: IFFALSE 45408
// exit ;
45406: GO 45457
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45408: LD_VAR 0 2
45412: PUSH
45413: LD_INT 29
45415: PUSH
45416: LD_INT 30
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: IN
45423: PUSH
45424: LD_VAR 0 3
45428: PPUSH
45429: LD_VAR 0 4
45433: PPUSH
45434: LD_VAR 0 9
45438: PPUSH
45439: CALL_OW 440
45443: NOT
45444: AND
45445: IFFALSE 45449
// exit ;
45447: GO 45457
// result := true ;
45449: LD_ADDR_VAR 0 6
45453: PUSH
45454: LD_INT 1
45456: ST_TO_ADDR
// end ;
45457: LD_VAR 0 6
45461: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45462: LD_INT 0
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
45487: PPUSH
45488: PPUSH
45489: PPUSH
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
45498: PPUSH
45499: PPUSH
45500: PPUSH
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
45516: PPUSH
45517: PPUSH
45518: PPUSH
45519: PPUSH
45520: PPUSH
45521: PPUSH
// result = [ ] ;
45522: LD_ADDR_VAR 0 7
45526: PUSH
45527: EMPTY
45528: ST_TO_ADDR
// temp_list = [ ] ;
45529: LD_ADDR_VAR 0 9
45533: PUSH
45534: EMPTY
45535: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45536: LD_VAR 0 4
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: LD_INT 3
45552: PUSH
45553: LD_INT 4
45555: PUSH
45556: LD_INT 5
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: IN
45567: NOT
45568: PUSH
45569: LD_VAR 0 1
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: IN
45584: PUSH
45585: LD_VAR 0 5
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 3
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: LIST
45603: IN
45604: NOT
45605: AND
45606: OR
45607: IFFALSE 45611
// exit ;
45609: GO 64002
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45611: LD_VAR 0 1
45615: PUSH
45616: LD_INT 6
45618: PUSH
45619: LD_INT 7
45621: PUSH
45622: LD_INT 8
45624: PUSH
45625: LD_INT 13
45627: PUSH
45628: LD_INT 12
45630: PUSH
45631: LD_INT 15
45633: PUSH
45634: LD_INT 11
45636: PUSH
45637: LD_INT 14
45639: PUSH
45640: LD_INT 10
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: IN
45654: IFFALSE 45664
// btype = b_lab ;
45656: LD_ADDR_VAR 0 1
45660: PUSH
45661: LD_INT 6
45663: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45664: LD_VAR 0 6
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: IN
45683: NOT
45684: PUSH
45685: LD_VAR 0 1
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 3
45701: PUSH
45702: LD_INT 6
45704: PUSH
45705: LD_INT 36
45707: PUSH
45708: LD_INT 4
45710: PUSH
45711: LD_INT 5
45713: PUSH
45714: LD_INT 31
45716: PUSH
45717: LD_INT 32
45719: PUSH
45720: LD_INT 33
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: IN
45736: NOT
45737: PUSH
45738: LD_VAR 0 6
45742: PUSH
45743: LD_INT 1
45745: EQUAL
45746: AND
45747: OR
45748: PUSH
45749: LD_VAR 0 1
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 3
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: IN
45764: NOT
45765: PUSH
45766: LD_VAR 0 6
45770: PUSH
45771: LD_INT 2
45773: EQUAL
45774: AND
45775: OR
45776: IFFALSE 45786
// mode = 0 ;
45778: LD_ADDR_VAR 0 6
45782: PUSH
45783: LD_INT 0
45785: ST_TO_ADDR
// case mode of 0 :
45786: LD_VAR 0 6
45790: PUSH
45791: LD_INT 0
45793: DOUBLE
45794: EQUAL
45795: IFTRUE 45799
45797: GO 57252
45799: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45800: LD_ADDR_VAR 0 11
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 3
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45993: LD_ADDR_VAR 0 12
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 3
46150: NEG
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 3
46161: NEG
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46189: LD_ADDR_VAR 0 13
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: LD_INT 3
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: LD_INT 3
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46388: LD_ADDR_VAR 0 14
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 3
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 3
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46584: LD_ADDR_VAR 0 15
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46777: LD_ADDR_VAR 0 16
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46970: LD_ADDR_VAR 0 17
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47200: LD_ADDR_VAR 0 18
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47430: LD_ADDR_VAR 0 19
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47660: LD_ADDR_VAR 0 20
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47890: LD_ADDR_VAR 0 21
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48120: LD_ADDR_VAR 0 22
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48350: LD_ADDR_VAR 0 23
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 3
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 3
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48630: LD_ADDR_VAR 0 24
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 2
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48906: LD_ADDR_VAR 0 25
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 3
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 3
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49180: LD_ADDR_VAR 0 26
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: LD_INT 3
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49456: LD_ADDR_VAR 0 27
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49736: LD_ADDR_VAR 0 28
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 3
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 3
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50018: LD_ADDR_VAR 0 29
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 2
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: LD_INT 3
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50297: LD_ADDR_VAR 0 30
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 3
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 3
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50575: LD_ADDR_VAR 0 31
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 3
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: NEG
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50853: LD_ADDR_VAR 0 32
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51131: LD_ADDR_VAR 0 33
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51410: LD_ADDR_VAR 0 34
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 3
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51690: LD_ADDR_VAR 0 35
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51802: LD_ADDR_VAR 0 36
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51914: LD_ADDR_VAR 0 37
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52026: LD_ADDR_VAR 0 38
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52138: LD_ADDR_VAR 0 39
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52250: LD_ADDR_VAR 0 40
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52362: LD_ADDR_VAR 0 41
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 3
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 3
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52712: LD_ADDR_VAR 0 42
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 3
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: LD_INT 3
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 3
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 3
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53062: LD_ADDR_VAR 0 43
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 3
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 3
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53410: LD_ADDR_VAR 0 44
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 3
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 3
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: LD_INT 3
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53760: LD_ADDR_VAR 0 45
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 3
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: LD_INT 3
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54110: LD_ADDR_VAR 0 46
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 3
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54458: LD_ADDR_VAR 0 47
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54609: LD_ADDR_VAR 0 48
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54756: LD_ADDR_VAR 0 49
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54900: LD_ADDR_VAR 0 50
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55044: LD_ADDR_VAR 0 51
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55191: LD_ADDR_VAR 0 52
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55342: LD_ADDR_VAR 0 53
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55572: LD_ADDR_VAR 0 54
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55802: LD_ADDR_VAR 0 55
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56032: LD_ADDR_VAR 0 56
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56262: LD_ADDR_VAR 0 57
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56492: LD_ADDR_VAR 0 58
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56722: LD_ADDR_VAR 0 59
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56810: LD_ADDR_VAR 0 60
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56898: LD_ADDR_VAR 0 61
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56986: LD_ADDR_VAR 0 62
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57074: LD_ADDR_VAR 0 63
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57162: LD_ADDR_VAR 0 64
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: ST_TO_ADDR
// end ; 1 :
57250: GO 63147
57252: LD_INT 1
57254: DOUBLE
57255: EQUAL
57256: IFTRUE 57260
57258: GO 59883
57260: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57261: LD_ADDR_VAR 0 11
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 3
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57305: LD_ADDR_VAR 0 12
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57346: LD_ADDR_VAR 0 13
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: LIST
57385: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57386: LD_ADDR_VAR 0 14
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: LD_INT 3
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57427: LD_ADDR_VAR 0 15
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57471: LD_ADDR_VAR 0 16
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 3
57490: NEG
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57517: LD_ADDR_VAR 0 17
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57561: LD_ADDR_VAR 0 18
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57602: LD_ADDR_VAR 0 19
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: PUSH
57620: LD_INT 3
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: LIST
57641: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57642: LD_ADDR_VAR 0 20
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 3
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 3
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57683: LD_ADDR_VAR 0 21
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 3
57701: NEG
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57727: LD_ADDR_VAR 0 22
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57773: LD_ADDR_VAR 0 23
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 3
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 4
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57817: LD_ADDR_VAR 0 24
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 4
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: LIST
57857: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57858: LD_ADDR_VAR 0 25
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 4
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: LD_INT 4
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57898: LD_ADDR_VAR 0 26
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 4
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57939: LD_ADDR_VAR 0 27
57943: PUSH
57944: LD_INT 3
57946: NEG
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 4
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57983: LD_ADDR_VAR 0 28
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 4
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 4
58014: NEG
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58029: LD_ADDR_VAR 0 29
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 3
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: LD_INT 4
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: LD_INT 5
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 5
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 4
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 6
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 6
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 5
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58184: LD_ADDR_VAR 0 30
58188: PUSH
58189: LD_INT 2
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 3
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 3
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 4
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 4
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 5
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 5
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 5
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 6
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 6
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58327: LD_ADDR_VAR 0 31
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 3
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: PUSH
58365: LD_INT 3
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: LD_INT 4
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 5
58404: PUSH
58405: LD_INT 5
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: LD_INT 5
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 6
58424: PUSH
58425: LD_INT 5
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 6
58434: PUSH
58435: LD_INT 6
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 5
58444: PUSH
58445: LD_INT 6
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58466: LD_ADDR_VAR 0 32
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 4
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 4
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 5
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 5
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 4
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 6
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 6
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 5
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58609: LD_ADDR_VAR 0 33
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 4
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 4
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 5
58695: NEG
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 5
58706: NEG
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 5
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 6
58729: NEG
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 6
58740: NEG
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58764: LD_ADDR_VAR 0 34
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: LD_INT 4
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: LD_INT 3
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 4
58831: NEG
58832: PUSH
58833: LD_INT 4
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: LD_INT 5
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 5
58855: NEG
58856: PUSH
58857: LD_INT 4
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 5
58867: NEG
58868: PUSH
58869: LD_INT 5
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 5
58879: NEG
58880: PUSH
58881: LD_INT 6
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 6
58891: NEG
58892: PUSH
58893: LD_INT 5
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 6
58903: NEG
58904: PUSH
58905: LD_INT 6
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58927: LD_ADDR_VAR 0 41
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58971: LD_ADDR_VAR 0 42
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59012: LD_ADDR_VAR 0 43
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59052: LD_ADDR_VAR 0 44
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59093: LD_ADDR_VAR 0 45
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: LIST
59136: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59137: LD_ADDR_VAR 0 46
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59183: LD_ADDR_VAR 0 47
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59216: LD_ADDR_VAR 0 48
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59247: LD_ADDR_VAR 0 49
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59276: LD_ADDR_VAR 0 50
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59305: LD_ADDR_VAR 0 51
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59336: LD_ADDR_VAR 0 52
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59369: LD_ADDR_VAR 0 53
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59413: LD_ADDR_VAR 0 54
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 3
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59454: LD_ADDR_VAR 0 55
59458: PUSH
59459: LD_INT 3
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59494: LD_ADDR_VAR 0 56
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59535: LD_ADDR_VAR 0 57
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59579: LD_ADDR_VAR 0 58
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: LD_INT 3
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59625: LD_ADDR_VAR 0 59
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59669: LD_ADDR_VAR 0 60
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59710: LD_ADDR_VAR 0 61
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59750: LD_ADDR_VAR 0 62
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59791: LD_ADDR_VAR 0 63
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59835: LD_ADDR_VAR 0 64
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: LIST
59880: ST_TO_ADDR
// end ; 2 :
59881: GO 63147
59883: LD_INT 2
59885: DOUBLE
59886: EQUAL
59887: IFTRUE 59891
59889: GO 63146
59891: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59892: LD_ADDR_VAR 0 29
59896: PUSH
59897: LD_INT 4
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 4
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 5
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 5
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 4
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 5
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 3
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 4
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 4
60022: PUSH
60023: LD_INT 4
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: LD_INT 4
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 4
60062: PUSH
60063: LD_INT 2
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 4
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 4
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 5
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: LD_INT 5
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 4
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 5
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 4
60231: NEG
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 4
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 4
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 4
60277: NEG
60278: PUSH
60279: LD_INT 4
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 4
60289: NEG
60290: PUSH
60291: LD_INT 5
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: LD_INT 4
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 3
60313: NEG
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 5
60337: NEG
60338: PUSH
60339: LD_INT 4
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 5
60349: NEG
60350: PUSH
60351: LD_INT 5
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 5
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 5
60373: NEG
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60430: LD_ADDR_VAR 0 30
60434: PUSH
60435: LD_INT 4
60437: PUSH
60438: LD_INT 4
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 4
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 5
60457: PUSH
60458: LD_INT 4
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 5
60467: PUSH
60468: LD_INT 5
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: LD_INT 5
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: LD_INT 4
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: LD_INT 3
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 5
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 5
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 4
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 4
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: LD_INT 4
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 4
60620: NEG
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 4
60631: NEG
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 4
60665: NEG
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 5
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 5
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 5
60699: NEG
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 3
60711: NEG
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: LD_INT 4
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 3
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 4
60782: NEG
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 4
60794: NEG
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: LD_INT 4
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: NEG
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: LD_INT 4
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 5
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 4
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 3
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 4
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 5
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: LD_INT 3
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: LD_INT 5
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60977: LD_ADDR_VAR 0 31
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 4
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 3
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: LD_INT 5
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 5
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: LD_INT 4
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: LD_INT 5
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: LD_INT 3
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: NEG
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 3
61088: NEG
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 3
61122: NEG
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 4
61133: NEG
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 4
61144: NEG
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 4
61156: NEG
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 4
61179: NEG
61180: PUSH
61181: LD_INT 4
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 4
61191: NEG
61192: PUSH
61193: LD_INT 5
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: LD_INT 4
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 4
61227: NEG
61228: PUSH
61229: LD_INT 3
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 5
61239: NEG
61240: PUSH
61241: LD_INT 4
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 5
61251: NEG
61252: PUSH
61253: LD_INT 5
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 5
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 5
61275: NEG
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: LD_INT 3
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: LD_INT 4
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: LD_INT 3
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 4
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: LD_INT 4
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 4
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 4
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 5
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 5
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 4
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 5
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61527: LD_ADDR_VAR 0 32
61531: PUSH
61532: LD_INT 4
61534: NEG
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 4
61545: NEG
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 3
61557: NEG
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 3
61568: NEG
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 4
61579: NEG
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 5
61590: NEG
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 5
61601: NEG
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 5
61613: NEG
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 3
61648: NEG
61649: PUSH
61650: LD_INT 4
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 3
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 4
61696: NEG
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 4
61708: NEG
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: LD_INT 4
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 4
61732: NEG
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: LD_INT 4
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: LD_INT 5
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 4
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: LD_INT 5
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: LD_INT 5
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 3
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 4
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 4
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 4
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 4
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 4
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 5
61959: PUSH
61960: LD_INT 4
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 5
61969: PUSH
61970: LD_INT 5
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 4
61979: PUSH
61980: LD_INT 5
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 3
61989: PUSH
61990: LD_INT 4
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: PUSH
62000: LD_INT 3
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 5
62009: PUSH
62010: LD_INT 3
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 3
62019: PUSH
62020: LD_INT 5
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62074: LD_ADDR_VAR 0 33
62078: PUSH
62079: LD_INT 4
62081: NEG
62082: PUSH
62083: LD_INT 4
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 4
62093: NEG
62094: PUSH
62095: LD_INT 5
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: LD_INT 4
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: NEG
62118: PUSH
62119: LD_INT 3
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 4
62129: NEG
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 5
62141: NEG
62142: PUSH
62143: LD_INT 4
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 5
62153: NEG
62154: PUSH
62155: LD_INT 5
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: NEG
62166: PUSH
62167: LD_INT 5
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 5
62177: NEG
62178: PUSH
62179: LD_INT 3
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: LD_INT 3
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 4
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 3
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: LD_INT 3
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 4
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: LD_INT 2
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: LD_INT 4
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 4
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 4
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 5
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 5
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 4
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 3
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 3
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 3
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 5
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 4
62404: PUSH
62405: LD_INT 3
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 4
62414: PUSH
62415: LD_INT 4
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: LD_INT 4
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: LD_INT 3
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 4
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: LD_INT 4
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 3
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: LD_INT 4
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: LD_INT 5
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 5
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: LD_INT 4
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: LD_INT 5
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62612: LD_ADDR_VAR 0 34
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 4
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 5
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: LD_INT 4
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: LD_INT 3
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 3
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 4
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 5
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: LD_INT 3
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 2
62709: NEG
62710: PUSH
62711: LD_INT 5
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 3
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 4
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 2
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 4
62804: PUSH
62805: LD_INT 2
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 4
62814: PUSH
62815: LD_INT 4
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 4
62824: PUSH
62825: LD_INT 3
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 5
62834: PUSH
62835: LD_INT 4
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 5
62844: PUSH
62845: LD_INT 5
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 4
62854: PUSH
62855: LD_INT 5
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: LD_INT 4
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 3
62874: PUSH
62875: LD_INT 3
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: LD_INT 3
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: LD_INT 5
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 4
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: LD_INT 3
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: LD_INT 4
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 4
62997: NEG
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 4
63008: NEG
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 3
63020: NEG
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 3
63031: NEG
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 4
63042: NEG
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 5
63053: NEG
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 5
63064: NEG
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 5
63076: NEG
63077: PUSH
63078: LD_INT 2
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 3
63088: NEG
63089: PUSH
63090: LD_INT 2
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// end ; end ;
63144: GO 63147
63146: POP
// case btype of b_depot , b_warehouse :
63147: LD_VAR 0 1
63151: PUSH
63152: LD_INT 0
63154: DOUBLE
63155: EQUAL
63156: IFTRUE 63166
63158: LD_INT 1
63160: DOUBLE
63161: EQUAL
63162: IFTRUE 63166
63164: GO 63367
63166: POP
// case nation of nation_american :
63167: LD_VAR 0 5
63171: PUSH
63172: LD_INT 1
63174: DOUBLE
63175: EQUAL
63176: IFTRUE 63180
63178: GO 63236
63180: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63181: LD_ADDR_VAR 0 9
63185: PUSH
63186: LD_VAR 0 11
63190: PUSH
63191: LD_VAR 0 12
63195: PUSH
63196: LD_VAR 0 13
63200: PUSH
63201: LD_VAR 0 14
63205: PUSH
63206: LD_VAR 0 15
63210: PUSH
63211: LD_VAR 0 16
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: PUSH
63224: LD_VAR 0 4
63228: PUSH
63229: LD_INT 1
63231: PLUS
63232: ARRAY
63233: ST_TO_ADDR
63234: GO 63365
63236: LD_INT 2
63238: DOUBLE
63239: EQUAL
63240: IFTRUE 63244
63242: GO 63300
63244: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63245: LD_ADDR_VAR 0 9
63249: PUSH
63250: LD_VAR 0 17
63254: PUSH
63255: LD_VAR 0 18
63259: PUSH
63260: LD_VAR 0 19
63264: PUSH
63265: LD_VAR 0 20
63269: PUSH
63270: LD_VAR 0 21
63274: PUSH
63275: LD_VAR 0 22
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: PUSH
63288: LD_VAR 0 4
63292: PUSH
63293: LD_INT 1
63295: PLUS
63296: ARRAY
63297: ST_TO_ADDR
63298: GO 63365
63300: LD_INT 3
63302: DOUBLE
63303: EQUAL
63304: IFTRUE 63308
63306: GO 63364
63308: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63309: LD_ADDR_VAR 0 9
63313: PUSH
63314: LD_VAR 0 23
63318: PUSH
63319: LD_VAR 0 24
63323: PUSH
63324: LD_VAR 0 25
63328: PUSH
63329: LD_VAR 0 26
63333: PUSH
63334: LD_VAR 0 27
63338: PUSH
63339: LD_VAR 0 28
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: PUSH
63352: LD_VAR 0 4
63356: PUSH
63357: LD_INT 1
63359: PLUS
63360: ARRAY
63361: ST_TO_ADDR
63362: GO 63365
63364: POP
63365: GO 63920
63367: LD_INT 2
63369: DOUBLE
63370: EQUAL
63371: IFTRUE 63381
63373: LD_INT 3
63375: DOUBLE
63376: EQUAL
63377: IFTRUE 63381
63379: GO 63437
63381: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63382: LD_ADDR_VAR 0 9
63386: PUSH
63387: LD_VAR 0 29
63391: PUSH
63392: LD_VAR 0 30
63396: PUSH
63397: LD_VAR 0 31
63401: PUSH
63402: LD_VAR 0 32
63406: PUSH
63407: LD_VAR 0 33
63411: PUSH
63412: LD_VAR 0 34
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: PUSH
63425: LD_VAR 0 4
63429: PUSH
63430: LD_INT 1
63432: PLUS
63433: ARRAY
63434: ST_TO_ADDR
63435: GO 63920
63437: LD_INT 16
63439: DOUBLE
63440: EQUAL
63441: IFTRUE 63499
63443: LD_INT 17
63445: DOUBLE
63446: EQUAL
63447: IFTRUE 63499
63449: LD_INT 18
63451: DOUBLE
63452: EQUAL
63453: IFTRUE 63499
63455: LD_INT 19
63457: DOUBLE
63458: EQUAL
63459: IFTRUE 63499
63461: LD_INT 22
63463: DOUBLE
63464: EQUAL
63465: IFTRUE 63499
63467: LD_INT 20
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63499
63473: LD_INT 21
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63499
63479: LD_INT 23
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63499
63485: LD_INT 24
63487: DOUBLE
63488: EQUAL
63489: IFTRUE 63499
63491: LD_INT 25
63493: DOUBLE
63494: EQUAL
63495: IFTRUE 63499
63497: GO 63555
63499: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63500: LD_ADDR_VAR 0 9
63504: PUSH
63505: LD_VAR 0 35
63509: PUSH
63510: LD_VAR 0 36
63514: PUSH
63515: LD_VAR 0 37
63519: PUSH
63520: LD_VAR 0 38
63524: PUSH
63525: LD_VAR 0 39
63529: PUSH
63530: LD_VAR 0 40
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: PUSH
63543: LD_VAR 0 4
63547: PUSH
63548: LD_INT 1
63550: PLUS
63551: ARRAY
63552: ST_TO_ADDR
63553: GO 63920
63555: LD_INT 6
63557: DOUBLE
63558: EQUAL
63559: IFTRUE 63611
63561: LD_INT 7
63563: DOUBLE
63564: EQUAL
63565: IFTRUE 63611
63567: LD_INT 8
63569: DOUBLE
63570: EQUAL
63571: IFTRUE 63611
63573: LD_INT 13
63575: DOUBLE
63576: EQUAL
63577: IFTRUE 63611
63579: LD_INT 12
63581: DOUBLE
63582: EQUAL
63583: IFTRUE 63611
63585: LD_INT 15
63587: DOUBLE
63588: EQUAL
63589: IFTRUE 63611
63591: LD_INT 11
63593: DOUBLE
63594: EQUAL
63595: IFTRUE 63611
63597: LD_INT 14
63599: DOUBLE
63600: EQUAL
63601: IFTRUE 63611
63603: LD_INT 10
63605: DOUBLE
63606: EQUAL
63607: IFTRUE 63611
63609: GO 63667
63611: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63612: LD_ADDR_VAR 0 9
63616: PUSH
63617: LD_VAR 0 41
63621: PUSH
63622: LD_VAR 0 42
63626: PUSH
63627: LD_VAR 0 43
63631: PUSH
63632: LD_VAR 0 44
63636: PUSH
63637: LD_VAR 0 45
63641: PUSH
63642: LD_VAR 0 46
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: PUSH
63655: LD_VAR 0 4
63659: PUSH
63660: LD_INT 1
63662: PLUS
63663: ARRAY
63664: ST_TO_ADDR
63665: GO 63920
63667: LD_INT 36
63669: DOUBLE
63670: EQUAL
63671: IFTRUE 63675
63673: GO 63731
63675: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63676: LD_ADDR_VAR 0 9
63680: PUSH
63681: LD_VAR 0 47
63685: PUSH
63686: LD_VAR 0 48
63690: PUSH
63691: LD_VAR 0 49
63695: PUSH
63696: LD_VAR 0 50
63700: PUSH
63701: LD_VAR 0 51
63705: PUSH
63706: LD_VAR 0 52
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: PUSH
63719: LD_VAR 0 4
63723: PUSH
63724: LD_INT 1
63726: PLUS
63727: ARRAY
63728: ST_TO_ADDR
63729: GO 63920
63731: LD_INT 4
63733: DOUBLE
63734: EQUAL
63735: IFTRUE 63757
63737: LD_INT 5
63739: DOUBLE
63740: EQUAL
63741: IFTRUE 63757
63743: LD_INT 34
63745: DOUBLE
63746: EQUAL
63747: IFTRUE 63757
63749: LD_INT 37
63751: DOUBLE
63752: EQUAL
63753: IFTRUE 63757
63755: GO 63813
63757: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63758: LD_ADDR_VAR 0 9
63762: PUSH
63763: LD_VAR 0 53
63767: PUSH
63768: LD_VAR 0 54
63772: PUSH
63773: LD_VAR 0 55
63777: PUSH
63778: LD_VAR 0 56
63782: PUSH
63783: LD_VAR 0 57
63787: PUSH
63788: LD_VAR 0 58
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: PUSH
63801: LD_VAR 0 4
63805: PUSH
63806: LD_INT 1
63808: PLUS
63809: ARRAY
63810: ST_TO_ADDR
63811: GO 63920
63813: LD_INT 31
63815: DOUBLE
63816: EQUAL
63817: IFTRUE 63863
63819: LD_INT 32
63821: DOUBLE
63822: EQUAL
63823: IFTRUE 63863
63825: LD_INT 33
63827: DOUBLE
63828: EQUAL
63829: IFTRUE 63863
63831: LD_INT 27
63833: DOUBLE
63834: EQUAL
63835: IFTRUE 63863
63837: LD_INT 26
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63863
63843: LD_INT 28
63845: DOUBLE
63846: EQUAL
63847: IFTRUE 63863
63849: LD_INT 29
63851: DOUBLE
63852: EQUAL
63853: IFTRUE 63863
63855: LD_INT 30
63857: DOUBLE
63858: EQUAL
63859: IFTRUE 63863
63861: GO 63919
63863: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63864: LD_ADDR_VAR 0 9
63868: PUSH
63869: LD_VAR 0 59
63873: PUSH
63874: LD_VAR 0 60
63878: PUSH
63879: LD_VAR 0 61
63883: PUSH
63884: LD_VAR 0 62
63888: PUSH
63889: LD_VAR 0 63
63893: PUSH
63894: LD_VAR 0 64
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: PUSH
63907: LD_VAR 0 4
63911: PUSH
63912: LD_INT 1
63914: PLUS
63915: ARRAY
63916: ST_TO_ADDR
63917: GO 63920
63919: POP
// temp_list2 = [ ] ;
63920: LD_ADDR_VAR 0 10
63924: PUSH
63925: EMPTY
63926: ST_TO_ADDR
// for i in temp_list do
63927: LD_ADDR_VAR 0 8
63931: PUSH
63932: LD_VAR 0 9
63936: PUSH
63937: FOR_IN
63938: IFFALSE 63990
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63940: LD_ADDR_VAR 0 10
63944: PUSH
63945: LD_VAR 0 10
63949: PUSH
63950: LD_VAR 0 8
63954: PUSH
63955: LD_INT 1
63957: ARRAY
63958: PUSH
63959: LD_VAR 0 2
63963: PLUS
63964: PUSH
63965: LD_VAR 0 8
63969: PUSH
63970: LD_INT 2
63972: ARRAY
63973: PUSH
63974: LD_VAR 0 3
63978: PLUS
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: EMPTY
63985: LIST
63986: ADD
63987: ST_TO_ADDR
63988: GO 63937
63990: POP
63991: POP
// result = temp_list2 ;
63992: LD_ADDR_VAR 0 7
63996: PUSH
63997: LD_VAR 0 10
64001: ST_TO_ADDR
// end ;
64002: LD_VAR 0 7
64006: RET
// export function EnemyInRange ( unit , dist ) ; begin
64007: LD_INT 0
64009: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64010: LD_ADDR_VAR 0 3
64014: PUSH
64015: LD_VAR 0 1
64019: PPUSH
64020: CALL_OW 255
64024: PPUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 250
64034: PPUSH
64035: LD_VAR 0 1
64039: PPUSH
64040: CALL_OW 251
64044: PPUSH
64045: LD_VAR 0 2
64049: PPUSH
64050: CALL 38111 0 4
64054: PUSH
64055: LD_INT 4
64057: ARRAY
64058: ST_TO_ADDR
// end ;
64059: LD_VAR 0 3
64063: RET
// export function PlayerSeeMe ( unit ) ; begin
64064: LD_INT 0
64066: PPUSH
// result := See ( your_side , unit ) ;
64067: LD_ADDR_VAR 0 2
64071: PUSH
64072: LD_OWVAR 2
64076: PPUSH
64077: LD_VAR 0 1
64081: PPUSH
64082: CALL_OW 292
64086: ST_TO_ADDR
// end ;
64087: LD_VAR 0 2
64091: RET
// export function ReverseDir ( unit ) ; begin
64092: LD_INT 0
64094: PPUSH
// if not unit then
64095: LD_VAR 0 1
64099: NOT
64100: IFFALSE 64104
// exit ;
64102: GO 64127
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64104: LD_ADDR_VAR 0 2
64108: PUSH
64109: LD_VAR 0 1
64113: PPUSH
64114: CALL_OW 254
64118: PUSH
64119: LD_INT 3
64121: PLUS
64122: PUSH
64123: LD_INT 6
64125: MOD
64126: ST_TO_ADDR
// end ;
64127: LD_VAR 0 2
64131: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64132: LD_INT 0
64134: PPUSH
64135: PPUSH
64136: PPUSH
64137: PPUSH
64138: PPUSH
// if not hexes then
64139: LD_VAR 0 2
64143: NOT
64144: IFFALSE 64148
// exit ;
64146: GO 64296
// dist := 9999 ;
64148: LD_ADDR_VAR 0 5
64152: PUSH
64153: LD_INT 9999
64155: ST_TO_ADDR
// for i = 1 to hexes do
64156: LD_ADDR_VAR 0 4
64160: PUSH
64161: DOUBLE
64162: LD_INT 1
64164: DEC
64165: ST_TO_ADDR
64166: LD_VAR 0 2
64170: PUSH
64171: FOR_TO
64172: IFFALSE 64284
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64174: LD_VAR 0 1
64178: PPUSH
64179: LD_VAR 0 2
64183: PUSH
64184: LD_VAR 0 4
64188: ARRAY
64189: PUSH
64190: LD_INT 1
64192: ARRAY
64193: PPUSH
64194: LD_VAR 0 2
64198: PUSH
64199: LD_VAR 0 4
64203: ARRAY
64204: PUSH
64205: LD_INT 2
64207: ARRAY
64208: PPUSH
64209: CALL_OW 297
64213: PUSH
64214: LD_VAR 0 5
64218: LESS
64219: IFFALSE 64282
// begin hex := hexes [ i ] ;
64221: LD_ADDR_VAR 0 7
64225: PUSH
64226: LD_VAR 0 2
64230: PUSH
64231: LD_VAR 0 4
64235: ARRAY
64236: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64237: LD_ADDR_VAR 0 5
64241: PUSH
64242: LD_VAR 0 1
64246: PPUSH
64247: LD_VAR 0 2
64251: PUSH
64252: LD_VAR 0 4
64256: ARRAY
64257: PUSH
64258: LD_INT 1
64260: ARRAY
64261: PPUSH
64262: LD_VAR 0 2
64266: PUSH
64267: LD_VAR 0 4
64271: ARRAY
64272: PUSH
64273: LD_INT 2
64275: ARRAY
64276: PPUSH
64277: CALL_OW 297
64281: ST_TO_ADDR
// end ; end ;
64282: GO 64171
64284: POP
64285: POP
// result := hex ;
64286: LD_ADDR_VAR 0 3
64290: PUSH
64291: LD_VAR 0 7
64295: ST_TO_ADDR
// end ;
64296: LD_VAR 0 3
64300: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64301: LD_INT 0
64303: PPUSH
64304: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64305: LD_VAR 0 1
64309: NOT
64310: PUSH
64311: LD_VAR 0 1
64315: PUSH
64316: LD_INT 21
64318: PUSH
64319: LD_INT 2
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 23
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PPUSH
64340: CALL_OW 69
64344: IN
64345: NOT
64346: OR
64347: IFFALSE 64351
// exit ;
64349: GO 64398
// for i = 1 to 3 do
64351: LD_ADDR_VAR 0 3
64355: PUSH
64356: DOUBLE
64357: LD_INT 1
64359: DEC
64360: ST_TO_ADDR
64361: LD_INT 3
64363: PUSH
64364: FOR_TO
64365: IFFALSE 64396
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64367: LD_VAR 0 1
64371: PPUSH
64372: CALL_OW 250
64376: PPUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: CALL_OW 251
64386: PPUSH
64387: LD_INT 1
64389: PPUSH
64390: CALL_OW 453
64394: GO 64364
64396: POP
64397: POP
// end ;
64398: LD_VAR 0 2
64402: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64403: LD_INT 0
64405: PPUSH
64406: PPUSH
64407: PPUSH
64408: PPUSH
64409: PPUSH
64410: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64411: LD_VAR 0 1
64415: NOT
64416: PUSH
64417: LD_VAR 0 2
64421: NOT
64422: OR
64423: PUSH
64424: LD_VAR 0 1
64428: PPUSH
64429: CALL_OW 314
64433: OR
64434: IFFALSE 64438
// exit ;
64436: GO 64879
// x := GetX ( enemy_unit ) ;
64438: LD_ADDR_VAR 0 7
64442: PUSH
64443: LD_VAR 0 2
64447: PPUSH
64448: CALL_OW 250
64452: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64453: LD_ADDR_VAR 0 8
64457: PUSH
64458: LD_VAR 0 2
64462: PPUSH
64463: CALL_OW 251
64467: ST_TO_ADDR
// if not x or not y then
64468: LD_VAR 0 7
64472: NOT
64473: PUSH
64474: LD_VAR 0 8
64478: NOT
64479: OR
64480: IFFALSE 64484
// exit ;
64482: GO 64879
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64484: LD_ADDR_VAR 0 6
64488: PUSH
64489: LD_VAR 0 7
64493: PPUSH
64494: LD_INT 0
64496: PPUSH
64497: LD_INT 4
64499: PPUSH
64500: CALL_OW 272
64504: PUSH
64505: LD_VAR 0 8
64509: PPUSH
64510: LD_INT 0
64512: PPUSH
64513: LD_INT 4
64515: PPUSH
64516: CALL_OW 273
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_VAR 0 7
64529: PPUSH
64530: LD_INT 1
64532: PPUSH
64533: LD_INT 4
64535: PPUSH
64536: CALL_OW 272
64540: PUSH
64541: LD_VAR 0 8
64545: PPUSH
64546: LD_INT 1
64548: PPUSH
64549: LD_INT 4
64551: PPUSH
64552: CALL_OW 273
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_VAR 0 7
64565: PPUSH
64566: LD_INT 2
64568: PPUSH
64569: LD_INT 4
64571: PPUSH
64572: CALL_OW 272
64576: PUSH
64577: LD_VAR 0 8
64581: PPUSH
64582: LD_INT 2
64584: PPUSH
64585: LD_INT 4
64587: PPUSH
64588: CALL_OW 273
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_VAR 0 7
64601: PPUSH
64602: LD_INT 3
64604: PPUSH
64605: LD_INT 4
64607: PPUSH
64608: CALL_OW 272
64612: PUSH
64613: LD_VAR 0 8
64617: PPUSH
64618: LD_INT 3
64620: PPUSH
64621: LD_INT 4
64623: PPUSH
64624: CALL_OW 273
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_VAR 0 7
64637: PPUSH
64638: LD_INT 4
64640: PPUSH
64641: LD_INT 4
64643: PPUSH
64644: CALL_OW 272
64648: PUSH
64649: LD_VAR 0 8
64653: PPUSH
64654: LD_INT 4
64656: PPUSH
64657: LD_INT 4
64659: PPUSH
64660: CALL_OW 273
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_VAR 0 7
64673: PPUSH
64674: LD_INT 5
64676: PPUSH
64677: LD_INT 4
64679: PPUSH
64680: CALL_OW 272
64684: PUSH
64685: LD_VAR 0 8
64689: PPUSH
64690: LD_INT 5
64692: PPUSH
64693: LD_INT 4
64695: PPUSH
64696: CALL_OW 273
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: ST_TO_ADDR
// for i = tmp downto 1 do
64713: LD_ADDR_VAR 0 4
64717: PUSH
64718: DOUBLE
64719: LD_VAR 0 6
64723: INC
64724: ST_TO_ADDR
64725: LD_INT 1
64727: PUSH
64728: FOR_DOWNTO
64729: IFFALSE 64830
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64731: LD_VAR 0 6
64735: PUSH
64736: LD_VAR 0 4
64740: ARRAY
64741: PUSH
64742: LD_INT 1
64744: ARRAY
64745: PPUSH
64746: LD_VAR 0 6
64750: PUSH
64751: LD_VAR 0 4
64755: ARRAY
64756: PUSH
64757: LD_INT 2
64759: ARRAY
64760: PPUSH
64761: CALL_OW 488
64765: NOT
64766: PUSH
64767: LD_VAR 0 6
64771: PUSH
64772: LD_VAR 0 4
64776: ARRAY
64777: PUSH
64778: LD_INT 1
64780: ARRAY
64781: PPUSH
64782: LD_VAR 0 6
64786: PUSH
64787: LD_VAR 0 4
64791: ARRAY
64792: PUSH
64793: LD_INT 2
64795: ARRAY
64796: PPUSH
64797: CALL_OW 428
64801: PUSH
64802: LD_INT 0
64804: NONEQUAL
64805: OR
64806: IFFALSE 64828
// tmp := Delete ( tmp , i ) ;
64808: LD_ADDR_VAR 0 6
64812: PUSH
64813: LD_VAR 0 6
64817: PPUSH
64818: LD_VAR 0 4
64822: PPUSH
64823: CALL_OW 3
64827: ST_TO_ADDR
64828: GO 64728
64830: POP
64831: POP
// j := GetClosestHex ( unit , tmp ) ;
64832: LD_ADDR_VAR 0 5
64836: PUSH
64837: LD_VAR 0 1
64841: PPUSH
64842: LD_VAR 0 6
64846: PPUSH
64847: CALL 64132 0 2
64851: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64852: LD_VAR 0 1
64856: PPUSH
64857: LD_VAR 0 5
64861: PUSH
64862: LD_INT 1
64864: ARRAY
64865: PPUSH
64866: LD_VAR 0 5
64870: PUSH
64871: LD_INT 2
64873: ARRAY
64874: PPUSH
64875: CALL_OW 111
// end ;
64879: LD_VAR 0 3
64883: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64884: LD_INT 0
64886: PPUSH
64887: PPUSH
64888: PPUSH
// uc_side = 0 ;
64889: LD_ADDR_OWVAR 20
64893: PUSH
64894: LD_INT 0
64896: ST_TO_ADDR
// uc_nation = 0 ;
64897: LD_ADDR_OWVAR 21
64901: PUSH
64902: LD_INT 0
64904: ST_TO_ADDR
// InitHc_All ( ) ;
64905: CALL_OW 584
// InitVc ;
64909: CALL_OW 20
// if mastodonts then
64913: LD_VAR 0 6
64917: IFFALSE 64984
// for i = 1 to mastodonts do
64919: LD_ADDR_VAR 0 11
64923: PUSH
64924: DOUBLE
64925: LD_INT 1
64927: DEC
64928: ST_TO_ADDR
64929: LD_VAR 0 6
64933: PUSH
64934: FOR_TO
64935: IFFALSE 64982
// begin vc_chassis := 31 ;
64937: LD_ADDR_OWVAR 37
64941: PUSH
64942: LD_INT 31
64944: ST_TO_ADDR
// vc_control := control_rider ;
64945: LD_ADDR_OWVAR 38
64949: PUSH
64950: LD_INT 4
64952: ST_TO_ADDR
// animal := CreateVehicle ;
64953: LD_ADDR_VAR 0 12
64957: PUSH
64958: CALL_OW 45
64962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64963: LD_VAR 0 12
64967: PPUSH
64968: LD_VAR 0 8
64972: PPUSH
64973: LD_INT 0
64975: PPUSH
64976: CALL 67172 0 3
// end ;
64980: GO 64934
64982: POP
64983: POP
// if horses then
64984: LD_VAR 0 5
64988: IFFALSE 65055
// for i = 1 to horses do
64990: LD_ADDR_VAR 0 11
64994: PUSH
64995: DOUBLE
64996: LD_INT 1
64998: DEC
64999: ST_TO_ADDR
65000: LD_VAR 0 5
65004: PUSH
65005: FOR_TO
65006: IFFALSE 65053
// begin hc_class := 21 ;
65008: LD_ADDR_OWVAR 28
65012: PUSH
65013: LD_INT 21
65015: ST_TO_ADDR
// hc_gallery :=  ;
65016: LD_ADDR_OWVAR 33
65020: PUSH
65021: LD_STRING 
65023: ST_TO_ADDR
// animal := CreateHuman ;
65024: LD_ADDR_VAR 0 12
65028: PUSH
65029: CALL_OW 44
65033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65034: LD_VAR 0 12
65038: PPUSH
65039: LD_VAR 0 8
65043: PPUSH
65044: LD_INT 0
65046: PPUSH
65047: CALL 67172 0 3
// end ;
65051: GO 65005
65053: POP
65054: POP
// if birds then
65055: LD_VAR 0 1
65059: IFFALSE 65126
// for i = 1 to birds do
65061: LD_ADDR_VAR 0 11
65065: PUSH
65066: DOUBLE
65067: LD_INT 1
65069: DEC
65070: ST_TO_ADDR
65071: LD_VAR 0 1
65075: PUSH
65076: FOR_TO
65077: IFFALSE 65124
// begin hc_class = 18 ;
65079: LD_ADDR_OWVAR 28
65083: PUSH
65084: LD_INT 18
65086: ST_TO_ADDR
// hc_gallery =  ;
65087: LD_ADDR_OWVAR 33
65091: PUSH
65092: LD_STRING 
65094: ST_TO_ADDR
// animal := CreateHuman ;
65095: LD_ADDR_VAR 0 12
65099: PUSH
65100: CALL_OW 44
65104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65105: LD_VAR 0 12
65109: PPUSH
65110: LD_VAR 0 8
65114: PPUSH
65115: LD_INT 0
65117: PPUSH
65118: CALL 67172 0 3
// end ;
65122: GO 65076
65124: POP
65125: POP
// if tigers then
65126: LD_VAR 0 2
65130: IFFALSE 65214
// for i = 1 to tigers do
65132: LD_ADDR_VAR 0 11
65136: PUSH
65137: DOUBLE
65138: LD_INT 1
65140: DEC
65141: ST_TO_ADDR
65142: LD_VAR 0 2
65146: PUSH
65147: FOR_TO
65148: IFFALSE 65212
// begin hc_class = class_tiger ;
65150: LD_ADDR_OWVAR 28
65154: PUSH
65155: LD_INT 14
65157: ST_TO_ADDR
// hc_gallery =  ;
65158: LD_ADDR_OWVAR 33
65162: PUSH
65163: LD_STRING 
65165: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65166: LD_ADDR_OWVAR 35
65170: PUSH
65171: LD_INT 7
65173: NEG
65174: PPUSH
65175: LD_INT 7
65177: PPUSH
65178: CALL_OW 12
65182: ST_TO_ADDR
// animal := CreateHuman ;
65183: LD_ADDR_VAR 0 12
65187: PUSH
65188: CALL_OW 44
65192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65193: LD_VAR 0 12
65197: PPUSH
65198: LD_VAR 0 8
65202: PPUSH
65203: LD_INT 0
65205: PPUSH
65206: CALL 67172 0 3
// end ;
65210: GO 65147
65212: POP
65213: POP
// if apemans then
65214: LD_VAR 0 3
65218: IFFALSE 65341
// for i = 1 to apemans do
65220: LD_ADDR_VAR 0 11
65224: PUSH
65225: DOUBLE
65226: LD_INT 1
65228: DEC
65229: ST_TO_ADDR
65230: LD_VAR 0 3
65234: PUSH
65235: FOR_TO
65236: IFFALSE 65339
// begin hc_class = class_apeman ;
65238: LD_ADDR_OWVAR 28
65242: PUSH
65243: LD_INT 12
65245: ST_TO_ADDR
// hc_gallery =  ;
65246: LD_ADDR_OWVAR 33
65250: PUSH
65251: LD_STRING 
65253: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
65254: LD_ADDR_OWVAR 35
65258: PUSH
65259: LD_INT 5
65261: NEG
65262: PPUSH
65263: LD_INT 5
65265: PPUSH
65266: CALL_OW 12
65270: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65271: LD_ADDR_OWVAR 31
65275: PUSH
65276: LD_INT 1
65278: PPUSH
65279: LD_INT 3
65281: PPUSH
65282: CALL_OW 12
65286: PUSH
65287: LD_INT 1
65289: PPUSH
65290: LD_INT 3
65292: PPUSH
65293: CALL_OW 12
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: ST_TO_ADDR
// animal := CreateHuman ;
65310: LD_ADDR_VAR 0 12
65314: PUSH
65315: CALL_OW 44
65319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65320: LD_VAR 0 12
65324: PPUSH
65325: LD_VAR 0 8
65329: PPUSH
65330: LD_INT 0
65332: PPUSH
65333: CALL 67172 0 3
// end ;
65337: GO 65235
65339: POP
65340: POP
// if enchidnas then
65341: LD_VAR 0 4
65345: IFFALSE 65412
// for i = 1 to enchidnas do
65347: LD_ADDR_VAR 0 11
65351: PUSH
65352: DOUBLE
65353: LD_INT 1
65355: DEC
65356: ST_TO_ADDR
65357: LD_VAR 0 4
65361: PUSH
65362: FOR_TO
65363: IFFALSE 65410
// begin hc_class = 13 ;
65365: LD_ADDR_OWVAR 28
65369: PUSH
65370: LD_INT 13
65372: ST_TO_ADDR
// hc_gallery =  ;
65373: LD_ADDR_OWVAR 33
65377: PUSH
65378: LD_STRING 
65380: ST_TO_ADDR
// animal := CreateHuman ;
65381: LD_ADDR_VAR 0 12
65385: PUSH
65386: CALL_OW 44
65390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65391: LD_VAR 0 12
65395: PPUSH
65396: LD_VAR 0 8
65400: PPUSH
65401: LD_INT 0
65403: PPUSH
65404: CALL 67172 0 3
// end ;
65408: GO 65362
65410: POP
65411: POP
// if fishes then
65412: LD_VAR 0 7
65416: IFFALSE 65483
// for i = 1 to fishes do
65418: LD_ADDR_VAR 0 11
65422: PUSH
65423: DOUBLE
65424: LD_INT 1
65426: DEC
65427: ST_TO_ADDR
65428: LD_VAR 0 7
65432: PUSH
65433: FOR_TO
65434: IFFALSE 65481
// begin hc_class = 20 ;
65436: LD_ADDR_OWVAR 28
65440: PUSH
65441: LD_INT 20
65443: ST_TO_ADDR
// hc_gallery =  ;
65444: LD_ADDR_OWVAR 33
65448: PUSH
65449: LD_STRING 
65451: ST_TO_ADDR
// animal := CreateHuman ;
65452: LD_ADDR_VAR 0 12
65456: PUSH
65457: CALL_OW 44
65461: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65462: LD_VAR 0 12
65466: PPUSH
65467: LD_VAR 0 9
65471: PPUSH
65472: LD_INT 0
65474: PPUSH
65475: CALL 67172 0 3
// end ;
65479: GO 65433
65481: POP
65482: POP
// end ;
65483: LD_VAR 0 10
65487: RET
// export function WantHeal ( sci , unit ) ; begin
65488: LD_INT 0
65490: PPUSH
// if GetTaskList ( sci ) > 0 then
65491: LD_VAR 0 1
65495: PPUSH
65496: CALL_OW 437
65500: PUSH
65501: LD_INT 0
65503: GREATER
65504: IFFALSE 65574
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65506: LD_VAR 0 1
65510: PPUSH
65511: CALL_OW 437
65515: PUSH
65516: LD_INT 1
65518: ARRAY
65519: PUSH
65520: LD_INT 1
65522: ARRAY
65523: PUSH
65524: LD_STRING l
65526: EQUAL
65527: PUSH
65528: LD_VAR 0 1
65532: PPUSH
65533: CALL_OW 437
65537: PUSH
65538: LD_INT 1
65540: ARRAY
65541: PUSH
65542: LD_INT 4
65544: ARRAY
65545: PUSH
65546: LD_VAR 0 2
65550: EQUAL
65551: AND
65552: IFFALSE 65564
// result := true else
65554: LD_ADDR_VAR 0 3
65558: PUSH
65559: LD_INT 1
65561: ST_TO_ADDR
65562: GO 65572
// result := false ;
65564: LD_ADDR_VAR 0 3
65568: PUSH
65569: LD_INT 0
65571: ST_TO_ADDR
// end else
65572: GO 65582
// result := false ;
65574: LD_ADDR_VAR 0 3
65578: PUSH
65579: LD_INT 0
65581: ST_TO_ADDR
// end ;
65582: LD_VAR 0 3
65586: RET
// export function HealTarget ( sci ) ; begin
65587: LD_INT 0
65589: PPUSH
// if not sci then
65590: LD_VAR 0 1
65594: NOT
65595: IFFALSE 65599
// exit ;
65597: GO 65664
// result := 0 ;
65599: LD_ADDR_VAR 0 2
65603: PUSH
65604: LD_INT 0
65606: ST_TO_ADDR
// if GetTaskList ( sci ) then
65607: LD_VAR 0 1
65611: PPUSH
65612: CALL_OW 437
65616: IFFALSE 65664
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65618: LD_VAR 0 1
65622: PPUSH
65623: CALL_OW 437
65627: PUSH
65628: LD_INT 1
65630: ARRAY
65631: PUSH
65632: LD_INT 1
65634: ARRAY
65635: PUSH
65636: LD_STRING l
65638: EQUAL
65639: IFFALSE 65664
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65641: LD_ADDR_VAR 0 2
65645: PUSH
65646: LD_VAR 0 1
65650: PPUSH
65651: CALL_OW 437
65655: PUSH
65656: LD_INT 1
65658: ARRAY
65659: PUSH
65660: LD_INT 4
65662: ARRAY
65663: ST_TO_ADDR
// end ;
65664: LD_VAR 0 2
65668: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65669: LD_INT 0
65671: PPUSH
65672: PPUSH
65673: PPUSH
65674: PPUSH
// if not base_units then
65675: LD_VAR 0 1
65679: NOT
65680: IFFALSE 65684
// exit ;
65682: GO 65771
// result := false ;
65684: LD_ADDR_VAR 0 2
65688: PUSH
65689: LD_INT 0
65691: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65692: LD_ADDR_VAR 0 5
65696: PUSH
65697: LD_VAR 0 1
65701: PPUSH
65702: LD_INT 21
65704: PUSH
65705: LD_INT 3
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PPUSH
65712: CALL_OW 72
65716: ST_TO_ADDR
// if not tmp then
65717: LD_VAR 0 5
65721: NOT
65722: IFFALSE 65726
// exit ;
65724: GO 65771
// for i in tmp do
65726: LD_ADDR_VAR 0 3
65730: PUSH
65731: LD_VAR 0 5
65735: PUSH
65736: FOR_IN
65737: IFFALSE 65769
// begin result := EnemyInRange ( i , 22 ) ;
65739: LD_ADDR_VAR 0 2
65743: PUSH
65744: LD_VAR 0 3
65748: PPUSH
65749: LD_INT 22
65751: PPUSH
65752: CALL 64007 0 2
65756: ST_TO_ADDR
// if result then
65757: LD_VAR 0 2
65761: IFFALSE 65767
// exit ;
65763: POP
65764: POP
65765: GO 65771
// end ;
65767: GO 65736
65769: POP
65770: POP
// end ;
65771: LD_VAR 0 2
65775: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65776: LD_INT 0
65778: PPUSH
65779: PPUSH
// if not units then
65780: LD_VAR 0 1
65784: NOT
65785: IFFALSE 65789
// exit ;
65787: GO 65859
// result := [ ] ;
65789: LD_ADDR_VAR 0 3
65793: PUSH
65794: EMPTY
65795: ST_TO_ADDR
// for i in units do
65796: LD_ADDR_VAR 0 4
65800: PUSH
65801: LD_VAR 0 1
65805: PUSH
65806: FOR_IN
65807: IFFALSE 65857
// if GetTag ( i ) = tag then
65809: LD_VAR 0 4
65813: PPUSH
65814: CALL_OW 110
65818: PUSH
65819: LD_VAR 0 2
65823: EQUAL
65824: IFFALSE 65855
// result := Insert ( result , result + 1 , i ) ;
65826: LD_ADDR_VAR 0 3
65830: PUSH
65831: LD_VAR 0 3
65835: PPUSH
65836: LD_VAR 0 3
65840: PUSH
65841: LD_INT 1
65843: PLUS
65844: PPUSH
65845: LD_VAR 0 4
65849: PPUSH
65850: CALL_OW 2
65854: ST_TO_ADDR
65855: GO 65806
65857: POP
65858: POP
// end ;
65859: LD_VAR 0 3
65863: RET
// export function IsDriver ( un ) ; begin
65864: LD_INT 0
65866: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65867: LD_ADDR_VAR 0 2
65871: PUSH
65872: LD_VAR 0 1
65876: PUSH
65877: LD_INT 55
65879: PUSH
65880: EMPTY
65881: LIST
65882: PPUSH
65883: CALL_OW 69
65887: IN
65888: ST_TO_ADDR
// end ;
65889: LD_VAR 0 2
65893: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65894: LD_INT 0
65896: PPUSH
65897: PPUSH
// list := [ ] ;
65898: LD_ADDR_VAR 0 5
65902: PUSH
65903: EMPTY
65904: ST_TO_ADDR
// case d of 0 :
65905: LD_VAR 0 3
65909: PUSH
65910: LD_INT 0
65912: DOUBLE
65913: EQUAL
65914: IFTRUE 65918
65916: GO 66051
65918: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65919: LD_ADDR_VAR 0 5
65923: PUSH
65924: LD_VAR 0 1
65928: PUSH
65929: LD_INT 4
65931: MINUS
65932: PUSH
65933: LD_VAR 0 2
65937: PUSH
65938: LD_INT 4
65940: MINUS
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: PUSH
65950: LD_VAR 0 1
65954: PUSH
65955: LD_INT 3
65957: MINUS
65958: PUSH
65959: LD_VAR 0 2
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: PUSH
65972: LD_VAR 0 1
65976: PUSH
65977: LD_INT 4
65979: PLUS
65980: PUSH
65981: LD_VAR 0 2
65985: PUSH
65986: LD_INT 4
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: PUSH
65994: LD_VAR 0 1
65998: PUSH
65999: LD_INT 3
66001: PLUS
66002: PUSH
66003: LD_VAR 0 2
66007: PUSH
66008: LD_INT 3
66010: PLUS
66011: PUSH
66012: LD_INT 5
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: PUSH
66020: LD_VAR 0 1
66024: PUSH
66025: LD_VAR 0 2
66029: PUSH
66030: LD_INT 4
66032: PLUS
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: LIST
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: ST_TO_ADDR
// end ; 1 :
66049: GO 66749
66051: LD_INT 1
66053: DOUBLE
66054: EQUAL
66055: IFTRUE 66059
66057: GO 66192
66059: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66060: LD_ADDR_VAR 0 5
66064: PUSH
66065: LD_VAR 0 1
66069: PUSH
66070: LD_VAR 0 2
66074: PUSH
66075: LD_INT 4
66077: MINUS
66078: PUSH
66079: LD_INT 3
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: PUSH
66087: LD_VAR 0 1
66091: PUSH
66092: LD_INT 3
66094: MINUS
66095: PUSH
66096: LD_VAR 0 2
66100: PUSH
66101: LD_INT 3
66103: MINUS
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: LD_INT 4
66120: MINUS
66121: PUSH
66122: LD_VAR 0 2
66126: PUSH
66127: LD_INT 1
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: LD_VAR 0 1
66139: PUSH
66140: LD_VAR 0 2
66144: PUSH
66145: LD_INT 3
66147: PLUS
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: LIST
66156: PUSH
66157: LD_VAR 0 1
66161: PUSH
66162: LD_INT 4
66164: PLUS
66165: PUSH
66166: LD_VAR 0 2
66170: PUSH
66171: LD_INT 4
66173: PLUS
66174: PUSH
66175: LD_INT 5
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: ST_TO_ADDR
// end ; 2 :
66190: GO 66749
66192: LD_INT 2
66194: DOUBLE
66195: EQUAL
66196: IFTRUE 66200
66198: GO 66329
66200: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66201: LD_ADDR_VAR 0 5
66205: PUSH
66206: LD_VAR 0 1
66210: PUSH
66211: LD_VAR 0 2
66215: PUSH
66216: LD_INT 3
66218: MINUS
66219: PUSH
66220: LD_INT 3
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: PUSH
66228: LD_VAR 0 1
66232: PUSH
66233: LD_INT 4
66235: PLUS
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_INT 4
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: PUSH
66250: LD_VAR 0 1
66254: PUSH
66255: LD_VAR 0 2
66259: PUSH
66260: LD_INT 4
66262: PLUS
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: LIST
66271: PUSH
66272: LD_VAR 0 1
66276: PUSH
66277: LD_INT 3
66279: MINUS
66280: PUSH
66281: LD_VAR 0 2
66285: PUSH
66286: LD_INT 1
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: LIST
66293: PUSH
66294: LD_VAR 0 1
66298: PUSH
66299: LD_INT 4
66301: MINUS
66302: PUSH
66303: LD_VAR 0 2
66307: PUSH
66308: LD_INT 4
66310: MINUS
66311: PUSH
66312: LD_INT 2
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: LIST
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: ST_TO_ADDR
// end ; 3 :
66327: GO 66749
66329: LD_INT 3
66331: DOUBLE
66332: EQUAL
66333: IFTRUE 66337
66335: GO 66470
66337: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66338: LD_ADDR_VAR 0 5
66342: PUSH
66343: LD_VAR 0 1
66347: PUSH
66348: LD_INT 3
66350: PLUS
66351: PUSH
66352: LD_VAR 0 2
66356: PUSH
66357: LD_INT 4
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: PUSH
66365: LD_VAR 0 1
66369: PUSH
66370: LD_INT 4
66372: PLUS
66373: PUSH
66374: LD_VAR 0 2
66378: PUSH
66379: LD_INT 4
66381: PLUS
66382: PUSH
66383: LD_INT 5
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: LIST
66390: PUSH
66391: LD_VAR 0 1
66395: PUSH
66396: LD_INT 4
66398: MINUS
66399: PUSH
66400: LD_VAR 0 2
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: LD_VAR 0 1
66417: PUSH
66418: LD_VAR 0 2
66422: PUSH
66423: LD_INT 4
66425: MINUS
66426: PUSH
66427: LD_INT 3
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: PUSH
66435: LD_VAR 0 1
66439: PUSH
66440: LD_INT 3
66442: MINUS
66443: PUSH
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 3
66451: MINUS
66452: PUSH
66453: LD_INT 2
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: LIST
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: ST_TO_ADDR
// end ; 4 :
66468: GO 66749
66470: LD_INT 4
66472: DOUBLE
66473: EQUAL
66474: IFTRUE 66478
66476: GO 66611
66478: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66479: LD_ADDR_VAR 0 5
66483: PUSH
66484: LD_VAR 0 1
66488: PUSH
66489: LD_VAR 0 2
66493: PUSH
66494: LD_INT 4
66496: PLUS
66497: PUSH
66498: LD_INT 0
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: LIST
66505: PUSH
66506: LD_VAR 0 1
66510: PUSH
66511: LD_INT 3
66513: PLUS
66514: PUSH
66515: LD_VAR 0 2
66519: PUSH
66520: LD_INT 3
66522: PLUS
66523: PUSH
66524: LD_INT 5
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: LD_INT 4
66539: PLUS
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 4
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: LIST
66553: PUSH
66554: LD_VAR 0 1
66558: PUSH
66559: LD_VAR 0 2
66563: PUSH
66564: LD_INT 3
66566: MINUS
66567: PUSH
66568: LD_INT 3
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: PUSH
66576: LD_VAR 0 1
66580: PUSH
66581: LD_INT 4
66583: MINUS
66584: PUSH
66585: LD_VAR 0 2
66589: PUSH
66590: LD_INT 4
66592: MINUS
66593: PUSH
66594: LD_INT 2
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: LIST
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: ST_TO_ADDR
// end ; 5 :
66609: GO 66749
66611: LD_INT 5
66613: DOUBLE
66614: EQUAL
66615: IFTRUE 66619
66617: GO 66748
66619: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66620: LD_ADDR_VAR 0 5
66624: PUSH
66625: LD_VAR 0 1
66629: PUSH
66630: LD_INT 4
66632: MINUS
66633: PUSH
66634: LD_VAR 0 2
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: PUSH
66647: LD_VAR 0 1
66651: PUSH
66652: LD_VAR 0 2
66656: PUSH
66657: LD_INT 4
66659: MINUS
66660: PUSH
66661: LD_INT 3
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: PUSH
66669: LD_VAR 0 1
66673: PUSH
66674: LD_INT 4
66676: PLUS
66677: PUSH
66678: LD_VAR 0 2
66682: PUSH
66683: LD_INT 4
66685: PLUS
66686: PUSH
66687: LD_INT 5
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: PUSH
66695: LD_VAR 0 1
66699: PUSH
66700: LD_INT 3
66702: PLUS
66703: PUSH
66704: LD_VAR 0 2
66708: PUSH
66709: LD_INT 4
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: PUSH
66717: LD_VAR 0 1
66721: PUSH
66722: LD_VAR 0 2
66726: PUSH
66727: LD_INT 3
66729: PLUS
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: LIST
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: ST_TO_ADDR
// end ; end ;
66746: GO 66749
66748: POP
// result := list ;
66749: LD_ADDR_VAR 0 4
66753: PUSH
66754: LD_VAR 0 5
66758: ST_TO_ADDR
// end ;
66759: LD_VAR 0 4
66763: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66764: LD_INT 0
66766: PPUSH
66767: PPUSH
66768: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66769: LD_VAR 0 1
66773: NOT
66774: PUSH
66775: LD_VAR 0 2
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: LD_INT 2
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 4
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: IN
66798: NOT
66799: OR
66800: IFFALSE 66804
// exit ;
66802: GO 66896
// tmp := [ ] ;
66804: LD_ADDR_VAR 0 5
66808: PUSH
66809: EMPTY
66810: ST_TO_ADDR
// for i in units do
66811: LD_ADDR_VAR 0 4
66815: PUSH
66816: LD_VAR 0 1
66820: PUSH
66821: FOR_IN
66822: IFFALSE 66865
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66824: LD_ADDR_VAR 0 5
66828: PUSH
66829: LD_VAR 0 5
66833: PPUSH
66834: LD_VAR 0 5
66838: PUSH
66839: LD_INT 1
66841: PLUS
66842: PPUSH
66843: LD_VAR 0 4
66847: PPUSH
66848: LD_VAR 0 2
66852: PPUSH
66853: CALL_OW 259
66857: PPUSH
66858: CALL_OW 2
66862: ST_TO_ADDR
66863: GO 66821
66865: POP
66866: POP
// if not tmp then
66867: LD_VAR 0 5
66871: NOT
66872: IFFALSE 66876
// exit ;
66874: GO 66896
// result := SortListByListDesc ( units , tmp ) ;
66876: LD_ADDR_VAR 0 3
66880: PUSH
66881: LD_VAR 0 1
66885: PPUSH
66886: LD_VAR 0 5
66890: PPUSH
66891: CALL_OW 77
66895: ST_TO_ADDR
// end ;
66896: LD_VAR 0 3
66900: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66901: LD_INT 0
66903: PPUSH
66904: PPUSH
66905: PPUSH
// result := false ;
66906: LD_ADDR_VAR 0 3
66910: PUSH
66911: LD_INT 0
66913: ST_TO_ADDR
// x := GetX ( building ) ;
66914: LD_ADDR_VAR 0 4
66918: PUSH
66919: LD_VAR 0 2
66923: PPUSH
66924: CALL_OW 250
66928: ST_TO_ADDR
// y := GetY ( building ) ;
66929: LD_ADDR_VAR 0 5
66933: PUSH
66934: LD_VAR 0 2
66938: PPUSH
66939: CALL_OW 251
66943: ST_TO_ADDR
// if not building or not x or not y then
66944: LD_VAR 0 2
66948: NOT
66949: PUSH
66950: LD_VAR 0 4
66954: NOT
66955: OR
66956: PUSH
66957: LD_VAR 0 5
66961: NOT
66962: OR
66963: IFFALSE 66967
// exit ;
66965: GO 67059
// if GetTaskList ( unit ) then
66967: LD_VAR 0 1
66971: PPUSH
66972: CALL_OW 437
66976: IFFALSE 67059
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66978: LD_STRING e
66980: PUSH
66981: LD_VAR 0 1
66985: PPUSH
66986: CALL_OW 437
66990: PUSH
66991: LD_INT 1
66993: ARRAY
66994: PUSH
66995: LD_INT 1
66997: ARRAY
66998: EQUAL
66999: PUSH
67000: LD_VAR 0 4
67004: PUSH
67005: LD_VAR 0 1
67009: PPUSH
67010: CALL_OW 437
67014: PUSH
67015: LD_INT 1
67017: ARRAY
67018: PUSH
67019: LD_INT 2
67021: ARRAY
67022: EQUAL
67023: AND
67024: PUSH
67025: LD_VAR 0 5
67029: PUSH
67030: LD_VAR 0 1
67034: PPUSH
67035: CALL_OW 437
67039: PUSH
67040: LD_INT 1
67042: ARRAY
67043: PUSH
67044: LD_INT 3
67046: ARRAY
67047: EQUAL
67048: AND
67049: IFFALSE 67059
// result := true end ;
67051: LD_ADDR_VAR 0 3
67055: PUSH
67056: LD_INT 1
67058: ST_TO_ADDR
// end ;
67059: LD_VAR 0 3
67063: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67064: LD_INT 0
67066: PPUSH
// result := false ;
67067: LD_ADDR_VAR 0 4
67071: PUSH
67072: LD_INT 0
67074: ST_TO_ADDR
// if GetTaskList ( unit ) then
67075: LD_VAR 0 1
67079: PPUSH
67080: CALL_OW 437
67084: IFFALSE 67167
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67086: LD_STRING M
67088: PUSH
67089: LD_VAR 0 1
67093: PPUSH
67094: CALL_OW 437
67098: PUSH
67099: LD_INT 1
67101: ARRAY
67102: PUSH
67103: LD_INT 1
67105: ARRAY
67106: EQUAL
67107: PUSH
67108: LD_VAR 0 2
67112: PUSH
67113: LD_VAR 0 1
67117: PPUSH
67118: CALL_OW 437
67122: PUSH
67123: LD_INT 1
67125: ARRAY
67126: PUSH
67127: LD_INT 2
67129: ARRAY
67130: EQUAL
67131: AND
67132: PUSH
67133: LD_VAR 0 3
67137: PUSH
67138: LD_VAR 0 1
67142: PPUSH
67143: CALL_OW 437
67147: PUSH
67148: LD_INT 1
67150: ARRAY
67151: PUSH
67152: LD_INT 3
67154: ARRAY
67155: EQUAL
67156: AND
67157: IFFALSE 67167
// result := true ;
67159: LD_ADDR_VAR 0 4
67163: PUSH
67164: LD_INT 1
67166: ST_TO_ADDR
// end ; end ;
67167: LD_VAR 0 4
67171: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67172: LD_INT 0
67174: PPUSH
67175: PPUSH
67176: PPUSH
67177: PPUSH
// if not unit or not area then
67178: LD_VAR 0 1
67182: NOT
67183: PUSH
67184: LD_VAR 0 2
67188: NOT
67189: OR
67190: IFFALSE 67194
// exit ;
67192: GO 67358
// tmp := AreaToList ( area , i ) ;
67194: LD_ADDR_VAR 0 6
67198: PUSH
67199: LD_VAR 0 2
67203: PPUSH
67204: LD_VAR 0 5
67208: PPUSH
67209: CALL_OW 517
67213: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67214: LD_ADDR_VAR 0 5
67218: PUSH
67219: DOUBLE
67220: LD_INT 1
67222: DEC
67223: ST_TO_ADDR
67224: LD_VAR 0 6
67228: PUSH
67229: LD_INT 1
67231: ARRAY
67232: PUSH
67233: FOR_TO
67234: IFFALSE 67356
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67236: LD_ADDR_VAR 0 7
67240: PUSH
67241: LD_VAR 0 6
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PUSH
67250: LD_VAR 0 5
67254: ARRAY
67255: PUSH
67256: LD_VAR 0 6
67260: PUSH
67261: LD_INT 2
67263: ARRAY
67264: PUSH
67265: LD_VAR 0 5
67269: ARRAY
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67275: LD_VAR 0 7
67279: PUSH
67280: LD_INT 1
67282: ARRAY
67283: PPUSH
67284: LD_VAR 0 7
67288: PUSH
67289: LD_INT 2
67291: ARRAY
67292: PPUSH
67293: CALL_OW 428
67297: PUSH
67298: LD_INT 0
67300: EQUAL
67301: IFFALSE 67354
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67303: LD_VAR 0 1
67307: PPUSH
67308: LD_VAR 0 7
67312: PUSH
67313: LD_INT 1
67315: ARRAY
67316: PPUSH
67317: LD_VAR 0 7
67321: PUSH
67322: LD_INT 2
67324: ARRAY
67325: PPUSH
67326: LD_VAR 0 3
67330: PPUSH
67331: CALL_OW 48
// result := IsPlaced ( unit ) ;
67335: LD_ADDR_VAR 0 4
67339: PUSH
67340: LD_VAR 0 1
67344: PPUSH
67345: CALL_OW 305
67349: ST_TO_ADDR
// exit ;
67350: POP
67351: POP
67352: GO 67358
// end ; end ;
67354: GO 67233
67356: POP
67357: POP
// end ;
67358: LD_VAR 0 4
67362: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67363: LD_INT 0
67365: PPUSH
67366: PPUSH
67367: PPUSH
// if not side or side > 8 then
67368: LD_VAR 0 1
67372: NOT
67373: PUSH
67374: LD_VAR 0 1
67378: PUSH
67379: LD_INT 8
67381: GREATER
67382: OR
67383: IFFALSE 67387
// exit ;
67385: GO 67574
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67387: LD_ADDR_VAR 0 4
67391: PUSH
67392: LD_INT 22
67394: PUSH
67395: LD_VAR 0 1
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 21
67406: PUSH
67407: LD_INT 3
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PPUSH
67418: CALL_OW 69
67422: ST_TO_ADDR
// if not tmp then
67423: LD_VAR 0 4
67427: NOT
67428: IFFALSE 67432
// exit ;
67430: GO 67574
// enable_addtolog := true ;
67432: LD_ADDR_OWVAR 81
67436: PUSH
67437: LD_INT 1
67439: ST_TO_ADDR
// AddToLog ( [ ) ;
67440: LD_STRING [
67442: PPUSH
67443: CALL_OW 561
// for i in tmp do
67447: LD_ADDR_VAR 0 3
67451: PUSH
67452: LD_VAR 0 4
67456: PUSH
67457: FOR_IN
67458: IFFALSE 67565
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67460: LD_STRING [
67462: PUSH
67463: LD_VAR 0 3
67467: PPUSH
67468: CALL_OW 266
67472: STR
67473: PUSH
67474: LD_STRING , 
67476: STR
67477: PUSH
67478: LD_VAR 0 3
67482: PPUSH
67483: CALL_OW 250
67487: STR
67488: PUSH
67489: LD_STRING , 
67491: STR
67492: PUSH
67493: LD_VAR 0 3
67497: PPUSH
67498: CALL_OW 251
67502: STR
67503: PUSH
67504: LD_STRING , 
67506: STR
67507: PUSH
67508: LD_VAR 0 3
67512: PPUSH
67513: CALL_OW 254
67517: STR
67518: PUSH
67519: LD_STRING , 
67521: STR
67522: PUSH
67523: LD_VAR 0 3
67527: PPUSH
67528: LD_INT 1
67530: PPUSH
67531: CALL_OW 268
67535: STR
67536: PUSH
67537: LD_STRING , 
67539: STR
67540: PUSH
67541: LD_VAR 0 3
67545: PPUSH
67546: LD_INT 2
67548: PPUSH
67549: CALL_OW 268
67553: STR
67554: PUSH
67555: LD_STRING ],
67557: STR
67558: PPUSH
67559: CALL_OW 561
// end ;
67563: GO 67457
67565: POP
67566: POP
// AddToLog ( ]; ) ;
67567: LD_STRING ];
67569: PPUSH
67570: CALL_OW 561
// end ;
67574: LD_VAR 0 2
67578: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67579: LD_INT 0
67581: PPUSH
67582: PPUSH
67583: PPUSH
67584: PPUSH
67585: PPUSH
// if not area or not rate or not max then
67586: LD_VAR 0 1
67590: NOT
67591: PUSH
67592: LD_VAR 0 2
67596: NOT
67597: OR
67598: PUSH
67599: LD_VAR 0 4
67603: NOT
67604: OR
67605: IFFALSE 67609
// exit ;
67607: GO 67801
// while 1 do
67609: LD_INT 1
67611: IFFALSE 67801
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67613: LD_ADDR_VAR 0 9
67617: PUSH
67618: LD_VAR 0 1
67622: PPUSH
67623: LD_INT 1
67625: PPUSH
67626: CALL_OW 287
67630: PUSH
67631: LD_INT 10
67633: MUL
67634: ST_TO_ADDR
// r := rate / 10 ;
67635: LD_ADDR_VAR 0 7
67639: PUSH
67640: LD_VAR 0 2
67644: PUSH
67645: LD_INT 10
67647: DIVREAL
67648: ST_TO_ADDR
// time := 1 1$00 ;
67649: LD_ADDR_VAR 0 8
67653: PUSH
67654: LD_INT 2100
67656: ST_TO_ADDR
// if amount < min then
67657: LD_VAR 0 9
67661: PUSH
67662: LD_VAR 0 3
67666: LESS
67667: IFFALSE 67685
// r := r * 2 else
67669: LD_ADDR_VAR 0 7
67673: PUSH
67674: LD_VAR 0 7
67678: PUSH
67679: LD_INT 2
67681: MUL
67682: ST_TO_ADDR
67683: GO 67711
// if amount > max then
67685: LD_VAR 0 9
67689: PUSH
67690: LD_VAR 0 4
67694: GREATER
67695: IFFALSE 67711
// r := r / 2 ;
67697: LD_ADDR_VAR 0 7
67701: PUSH
67702: LD_VAR 0 7
67706: PUSH
67707: LD_INT 2
67709: DIVREAL
67710: ST_TO_ADDR
// time := time / r ;
67711: LD_ADDR_VAR 0 8
67715: PUSH
67716: LD_VAR 0 8
67720: PUSH
67721: LD_VAR 0 7
67725: DIVREAL
67726: ST_TO_ADDR
// if time < 0 then
67727: LD_VAR 0 8
67731: PUSH
67732: LD_INT 0
67734: LESS
67735: IFFALSE 67752
// time := time * - 1 ;
67737: LD_ADDR_VAR 0 8
67741: PUSH
67742: LD_VAR 0 8
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: MUL
67751: ST_TO_ADDR
// wait ( time ) ;
67752: LD_VAR 0 8
67756: PPUSH
67757: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67761: LD_INT 35
67763: PPUSH
67764: LD_INT 875
67766: PPUSH
67767: CALL_OW 12
67771: PPUSH
67772: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67776: LD_INT 1
67778: PPUSH
67779: LD_INT 5
67781: PPUSH
67782: CALL_OW 12
67786: PPUSH
67787: LD_VAR 0 1
67791: PPUSH
67792: LD_INT 1
67794: PPUSH
67795: CALL_OW 55
// end ;
67799: GO 67609
// end ;
67801: LD_VAR 0 5
67805: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67806: LD_INT 0
67808: PPUSH
67809: PPUSH
67810: PPUSH
67811: PPUSH
67812: PPUSH
67813: PPUSH
67814: PPUSH
67815: PPUSH
// if not turrets or not factories then
67816: LD_VAR 0 1
67820: NOT
67821: PUSH
67822: LD_VAR 0 2
67826: NOT
67827: OR
67828: IFFALSE 67832
// exit ;
67830: GO 68139
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67832: LD_ADDR_VAR 0 10
67836: PUSH
67837: LD_INT 5
67839: PUSH
67840: LD_INT 6
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 2
67849: PUSH
67850: LD_INT 4
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: LD_INT 5
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 24
67874: PUSH
67875: LD_INT 25
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 23
67884: PUSH
67885: LD_INT 27
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 42
67898: PUSH
67899: LD_INT 43
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 44
67908: PUSH
67909: LD_INT 46
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 45
67918: PUSH
67919: LD_INT 47
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: LIST
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: LIST
67935: ST_TO_ADDR
// result := [ ] ;
67936: LD_ADDR_VAR 0 3
67940: PUSH
67941: EMPTY
67942: ST_TO_ADDR
// for i in turrets do
67943: LD_ADDR_VAR 0 4
67947: PUSH
67948: LD_VAR 0 1
67952: PUSH
67953: FOR_IN
67954: IFFALSE 68137
// begin nat := GetNation ( i ) ;
67956: LD_ADDR_VAR 0 7
67960: PUSH
67961: LD_VAR 0 4
67965: PPUSH
67966: CALL_OW 248
67970: ST_TO_ADDR
// weapon := 0 ;
67971: LD_ADDR_VAR 0 8
67975: PUSH
67976: LD_INT 0
67978: ST_TO_ADDR
// if not nat then
67979: LD_VAR 0 7
67983: NOT
67984: IFFALSE 67988
// continue ;
67986: GO 67953
// for j in list [ nat ] do
67988: LD_ADDR_VAR 0 5
67992: PUSH
67993: LD_VAR 0 10
67997: PUSH
67998: LD_VAR 0 7
68002: ARRAY
68003: PUSH
68004: FOR_IN
68005: IFFALSE 68046
// if GetBWeapon ( i ) = j [ 1 ] then
68007: LD_VAR 0 4
68011: PPUSH
68012: CALL_OW 269
68016: PUSH
68017: LD_VAR 0 5
68021: PUSH
68022: LD_INT 1
68024: ARRAY
68025: EQUAL
68026: IFFALSE 68044
// begin weapon := j [ 2 ] ;
68028: LD_ADDR_VAR 0 8
68032: PUSH
68033: LD_VAR 0 5
68037: PUSH
68038: LD_INT 2
68040: ARRAY
68041: ST_TO_ADDR
// break ;
68042: GO 68046
// end ;
68044: GO 68004
68046: POP
68047: POP
// if not weapon then
68048: LD_VAR 0 8
68052: NOT
68053: IFFALSE 68057
// continue ;
68055: GO 67953
// for k in factories do
68057: LD_ADDR_VAR 0 6
68061: PUSH
68062: LD_VAR 0 2
68066: PUSH
68067: FOR_IN
68068: IFFALSE 68133
// begin weapons := AvailableWeaponList ( k ) ;
68070: LD_ADDR_VAR 0 9
68074: PUSH
68075: LD_VAR 0 6
68079: PPUSH
68080: CALL_OW 478
68084: ST_TO_ADDR
// if not weapons then
68085: LD_VAR 0 9
68089: NOT
68090: IFFALSE 68094
// continue ;
68092: GO 68067
// if weapon in weapons then
68094: LD_VAR 0 8
68098: PUSH
68099: LD_VAR 0 9
68103: IN
68104: IFFALSE 68131
// begin result := [ i , weapon ] ;
68106: LD_ADDR_VAR 0 3
68110: PUSH
68111: LD_VAR 0 4
68115: PUSH
68116: LD_VAR 0 8
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: ST_TO_ADDR
// exit ;
68125: POP
68126: POP
68127: POP
68128: POP
68129: GO 68139
// end ; end ;
68131: GO 68067
68133: POP
68134: POP
// end ;
68135: GO 67953
68137: POP
68138: POP
// end ;
68139: LD_VAR 0 3
68143: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68144: LD_INT 0
68146: PPUSH
// if not side or side > 8 then
68147: LD_VAR 0 3
68151: NOT
68152: PUSH
68153: LD_VAR 0 3
68157: PUSH
68158: LD_INT 8
68160: GREATER
68161: OR
68162: IFFALSE 68166
// exit ;
68164: GO 68225
// if not range then
68166: LD_VAR 0 4
68170: NOT
68171: IFFALSE 68182
// range := - 12 ;
68173: LD_ADDR_VAR 0 4
68177: PUSH
68178: LD_INT 12
68180: NEG
68181: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68182: LD_VAR 0 1
68186: PPUSH
68187: LD_VAR 0 2
68191: PPUSH
68192: LD_VAR 0 3
68196: PPUSH
68197: LD_VAR 0 4
68201: PPUSH
68202: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68206: LD_VAR 0 1
68210: PPUSH
68211: LD_VAR 0 2
68215: PPUSH
68216: LD_VAR 0 3
68220: PPUSH
68221: CALL_OW 331
// end ;
68225: LD_VAR 0 5
68229: RET
// export function Video ( mode ) ; begin
68230: LD_INT 0
68232: PPUSH
// ingame_video = mode ;
68233: LD_ADDR_OWVAR 52
68237: PUSH
68238: LD_VAR 0 1
68242: ST_TO_ADDR
// interface_hidden = mode ;
68243: LD_ADDR_OWVAR 54
68247: PUSH
68248: LD_VAR 0 1
68252: ST_TO_ADDR
// end ;
68253: LD_VAR 0 2
68257: RET
// export function Join ( array , element ) ; begin
68258: LD_INT 0
68260: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68261: LD_ADDR_VAR 0 3
68265: PUSH
68266: LD_VAR 0 1
68270: PPUSH
68271: LD_VAR 0 1
68275: PUSH
68276: LD_INT 1
68278: PLUS
68279: PPUSH
68280: LD_VAR 0 2
68284: PPUSH
68285: CALL_OW 1
68289: ST_TO_ADDR
// end ;
68290: LD_VAR 0 3
68294: RET
// export function JoinUnion ( array , element ) ; begin
68295: LD_INT 0
68297: PPUSH
// result := array union element ;
68298: LD_ADDR_VAR 0 3
68302: PUSH
68303: LD_VAR 0 1
68307: PUSH
68308: LD_VAR 0 2
68312: UNION
68313: ST_TO_ADDR
// end ;
68314: LD_VAR 0 3
68318: RET
// export function GetBehemoths ( side ) ; begin
68319: LD_INT 0
68321: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68322: LD_ADDR_VAR 0 2
68326: PUSH
68327: LD_INT 22
68329: PUSH
68330: LD_VAR 0 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 31
68341: PUSH
68342: LD_INT 25
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PPUSH
68353: CALL_OW 69
68357: ST_TO_ADDR
// end ;
68358: LD_VAR 0 2
68362: RET
// export function Shuffle ( array ) ; var i , index ; begin
68363: LD_INT 0
68365: PPUSH
68366: PPUSH
68367: PPUSH
// result := [ ] ;
68368: LD_ADDR_VAR 0 2
68372: PUSH
68373: EMPTY
68374: ST_TO_ADDR
// if not array then
68375: LD_VAR 0 1
68379: NOT
68380: IFFALSE 68384
// exit ;
68382: GO 68483
// Randomize ;
68384: CALL_OW 10
// for i = array downto 1 do
68388: LD_ADDR_VAR 0 3
68392: PUSH
68393: DOUBLE
68394: LD_VAR 0 1
68398: INC
68399: ST_TO_ADDR
68400: LD_INT 1
68402: PUSH
68403: FOR_DOWNTO
68404: IFFALSE 68481
// begin index := rand ( 1 , array ) ;
68406: LD_ADDR_VAR 0 4
68410: PUSH
68411: LD_INT 1
68413: PPUSH
68414: LD_VAR 0 1
68418: PPUSH
68419: CALL_OW 12
68423: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68424: LD_ADDR_VAR 0 2
68428: PUSH
68429: LD_VAR 0 2
68433: PPUSH
68434: LD_VAR 0 2
68438: PUSH
68439: LD_INT 1
68441: PLUS
68442: PPUSH
68443: LD_VAR 0 1
68447: PUSH
68448: LD_VAR 0 4
68452: ARRAY
68453: PPUSH
68454: CALL_OW 2
68458: ST_TO_ADDR
// array := Delete ( array , index ) ;
68459: LD_ADDR_VAR 0 1
68463: PUSH
68464: LD_VAR 0 1
68468: PPUSH
68469: LD_VAR 0 4
68473: PPUSH
68474: CALL_OW 3
68478: ST_TO_ADDR
// end ;
68479: GO 68403
68481: POP
68482: POP
// end ;
68483: LD_VAR 0 2
68487: RET
// export function GetBaseMaterials ( base ) ; begin
68488: LD_INT 0
68490: PPUSH
// result := [ 0 , 0 , 0 ] ;
68491: LD_ADDR_VAR 0 2
68495: PUSH
68496: LD_INT 0
68498: PUSH
68499: LD_INT 0
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: LIST
68509: ST_TO_ADDR
// if not base then
68510: LD_VAR 0 1
68514: NOT
68515: IFFALSE 68519
// exit ;
68517: GO 68568
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68519: LD_ADDR_VAR 0 2
68523: PUSH
68524: LD_VAR 0 1
68528: PPUSH
68529: LD_INT 1
68531: PPUSH
68532: CALL_OW 275
68536: PUSH
68537: LD_VAR 0 1
68541: PPUSH
68542: LD_INT 2
68544: PPUSH
68545: CALL_OW 275
68549: PUSH
68550: LD_VAR 0 1
68554: PPUSH
68555: LD_INT 3
68557: PPUSH
68558: CALL_OW 275
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: LIST
68567: ST_TO_ADDR
// end ;
68568: LD_VAR 0 2
68572: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68573: LD_INT 0
68575: PPUSH
68576: PPUSH
// result := array ;
68577: LD_ADDR_VAR 0 3
68581: PUSH
68582: LD_VAR 0 1
68586: ST_TO_ADDR
// if size > 0 then
68587: LD_VAR 0 2
68591: PUSH
68592: LD_INT 0
68594: GREATER
68595: IFFALSE 68641
// for i := array downto size do
68597: LD_ADDR_VAR 0 4
68601: PUSH
68602: DOUBLE
68603: LD_VAR 0 1
68607: INC
68608: ST_TO_ADDR
68609: LD_VAR 0 2
68613: PUSH
68614: FOR_DOWNTO
68615: IFFALSE 68639
// result := Delete ( result , result ) ;
68617: LD_ADDR_VAR 0 3
68621: PUSH
68622: LD_VAR 0 3
68626: PPUSH
68627: LD_VAR 0 3
68631: PPUSH
68632: CALL_OW 3
68636: ST_TO_ADDR
68637: GO 68614
68639: POP
68640: POP
// end ;
68641: LD_VAR 0 3
68645: RET
// export function ComExit ( unit ) ; var tmp ; begin
68646: LD_INT 0
68648: PPUSH
68649: PPUSH
// if not IsInUnit ( unit ) then
68650: LD_VAR 0 1
68654: PPUSH
68655: CALL_OW 310
68659: NOT
68660: IFFALSE 68664
// exit ;
68662: GO 68724
// tmp := IsInUnit ( unit ) ;
68664: LD_ADDR_VAR 0 3
68668: PUSH
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 310
68678: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68679: LD_VAR 0 3
68683: PPUSH
68684: CALL_OW 247
68688: PUSH
68689: LD_INT 2
68691: EQUAL
68692: IFFALSE 68705
// ComExitVehicle ( unit ) else
68694: LD_VAR 0 1
68698: PPUSH
68699: CALL_OW 121
68703: GO 68714
// ComExitBuilding ( unit ) ;
68705: LD_VAR 0 1
68709: PPUSH
68710: CALL_OW 122
// result := tmp ;
68714: LD_ADDR_VAR 0 2
68718: PUSH
68719: LD_VAR 0 3
68723: ST_TO_ADDR
// end ;
68724: LD_VAR 0 2
68728: RET
// export function ResetHc ; begin
68729: LD_INT 0
68731: PPUSH
// InitHc ;
68732: CALL_OW 19
// hc_importance := 0 ;
68736: LD_ADDR_OWVAR 32
68740: PUSH
68741: LD_INT 0
68743: ST_TO_ADDR
// end ;
68744: LD_VAR 0 1
68748: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68749: LD_INT 0
68751: PPUSH
68752: PPUSH
68753: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68754: LD_ADDR_VAR 0 6
68758: PUSH
68759: LD_VAR 0 1
68763: PUSH
68764: LD_VAR 0 3
68768: PLUS
68769: PUSH
68770: LD_INT 2
68772: DIV
68773: ST_TO_ADDR
// if _x < 0 then
68774: LD_VAR 0 6
68778: PUSH
68779: LD_INT 0
68781: LESS
68782: IFFALSE 68799
// _x := _x * - 1 ;
68784: LD_ADDR_VAR 0 6
68788: PUSH
68789: LD_VAR 0 6
68793: PUSH
68794: LD_INT 1
68796: NEG
68797: MUL
68798: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68799: LD_ADDR_VAR 0 7
68803: PUSH
68804: LD_VAR 0 2
68808: PUSH
68809: LD_VAR 0 4
68813: PLUS
68814: PUSH
68815: LD_INT 2
68817: DIV
68818: ST_TO_ADDR
// if _y < 0 then
68819: LD_VAR 0 7
68823: PUSH
68824: LD_INT 0
68826: LESS
68827: IFFALSE 68844
// _y := _y * - 1 ;
68829: LD_ADDR_VAR 0 7
68833: PUSH
68834: LD_VAR 0 7
68838: PUSH
68839: LD_INT 1
68841: NEG
68842: MUL
68843: ST_TO_ADDR
// result := [ _x , _y ] ;
68844: LD_ADDR_VAR 0 5
68848: PUSH
68849: LD_VAR 0 6
68853: PUSH
68854: LD_VAR 0 7
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: ST_TO_ADDR
// end ;
68863: LD_VAR 0 5
68867: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68868: LD_INT 0
68870: PPUSH
68871: PPUSH
68872: PPUSH
68873: PPUSH
// task := GetTaskList ( unit ) ;
68874: LD_ADDR_VAR 0 7
68878: PUSH
68879: LD_VAR 0 1
68883: PPUSH
68884: CALL_OW 437
68888: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68889: LD_VAR 0 7
68893: NOT
68894: PUSH
68895: LD_VAR 0 1
68899: PPUSH
68900: LD_VAR 0 2
68904: PPUSH
68905: CALL_OW 308
68909: NOT
68910: AND
68911: IFFALSE 68915
// exit ;
68913: GO 69033
// if IsInArea ( unit , area ) then
68915: LD_VAR 0 1
68919: PPUSH
68920: LD_VAR 0 2
68924: PPUSH
68925: CALL_OW 308
68929: IFFALSE 68947
// begin ComMoveToArea ( unit , goAway ) ;
68931: LD_VAR 0 1
68935: PPUSH
68936: LD_VAR 0 3
68940: PPUSH
68941: CALL_OW 113
// exit ;
68945: GO 69033
// end ; if task [ 1 ] [ 1 ] <> M then
68947: LD_VAR 0 7
68951: PUSH
68952: LD_INT 1
68954: ARRAY
68955: PUSH
68956: LD_INT 1
68958: ARRAY
68959: PUSH
68960: LD_STRING M
68962: NONEQUAL
68963: IFFALSE 68967
// exit ;
68965: GO 69033
// x := task [ 1 ] [ 2 ] ;
68967: LD_ADDR_VAR 0 5
68971: PUSH
68972: LD_VAR 0 7
68976: PUSH
68977: LD_INT 1
68979: ARRAY
68980: PUSH
68981: LD_INT 2
68983: ARRAY
68984: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68985: LD_ADDR_VAR 0 6
68989: PUSH
68990: LD_VAR 0 7
68994: PUSH
68995: LD_INT 1
68997: ARRAY
68998: PUSH
68999: LD_INT 3
69001: ARRAY
69002: ST_TO_ADDR
// if InArea ( x , y , area ) then
69003: LD_VAR 0 5
69007: PPUSH
69008: LD_VAR 0 6
69012: PPUSH
69013: LD_VAR 0 2
69017: PPUSH
69018: CALL_OW 309
69022: IFFALSE 69033
// ComStop ( unit ) ;
69024: LD_VAR 0 1
69028: PPUSH
69029: CALL_OW 141
// end ;
69033: LD_VAR 0 4
69037: RET
// export function Abs ( value ) ; begin
69038: LD_INT 0
69040: PPUSH
// result := value ;
69041: LD_ADDR_VAR 0 2
69045: PUSH
69046: LD_VAR 0 1
69050: ST_TO_ADDR
// if value < 0 then
69051: LD_VAR 0 1
69055: PUSH
69056: LD_INT 0
69058: LESS
69059: IFFALSE 69076
// result := value * - 1 ;
69061: LD_ADDR_VAR 0 2
69065: PUSH
69066: LD_VAR 0 1
69070: PUSH
69071: LD_INT 1
69073: NEG
69074: MUL
69075: ST_TO_ADDR
// end ;
69076: LD_VAR 0 2
69080: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69081: LD_INT 0
69083: PPUSH
69084: PPUSH
69085: PPUSH
69086: PPUSH
69087: PPUSH
69088: PPUSH
69089: PPUSH
69090: PPUSH
// if not unit or not building then
69091: LD_VAR 0 1
69095: NOT
69096: PUSH
69097: LD_VAR 0 2
69101: NOT
69102: OR
69103: IFFALSE 69107
// exit ;
69105: GO 69333
// x := GetX ( building ) ;
69107: LD_ADDR_VAR 0 4
69111: PUSH
69112: LD_VAR 0 2
69116: PPUSH
69117: CALL_OW 250
69121: ST_TO_ADDR
// y := GetY ( building ) ;
69122: LD_ADDR_VAR 0 6
69126: PUSH
69127: LD_VAR 0 2
69131: PPUSH
69132: CALL_OW 251
69136: ST_TO_ADDR
// d := GetDir ( building ) ;
69137: LD_ADDR_VAR 0 8
69141: PUSH
69142: LD_VAR 0 2
69146: PPUSH
69147: CALL_OW 254
69151: ST_TO_ADDR
// r := 4 ;
69152: LD_ADDR_VAR 0 9
69156: PUSH
69157: LD_INT 4
69159: ST_TO_ADDR
// for i := 1 to 5 do
69160: LD_ADDR_VAR 0 10
69164: PUSH
69165: DOUBLE
69166: LD_INT 1
69168: DEC
69169: ST_TO_ADDR
69170: LD_INT 5
69172: PUSH
69173: FOR_TO
69174: IFFALSE 69331
// begin _x := ShiftX ( x , d , r + i ) ;
69176: LD_ADDR_VAR 0 5
69180: PUSH
69181: LD_VAR 0 4
69185: PPUSH
69186: LD_VAR 0 8
69190: PPUSH
69191: LD_VAR 0 9
69195: PUSH
69196: LD_VAR 0 10
69200: PLUS
69201: PPUSH
69202: CALL_OW 272
69206: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69207: LD_ADDR_VAR 0 7
69211: PUSH
69212: LD_VAR 0 6
69216: PPUSH
69217: LD_VAR 0 8
69221: PPUSH
69222: LD_VAR 0 9
69226: PUSH
69227: LD_VAR 0 10
69231: PLUS
69232: PPUSH
69233: CALL_OW 273
69237: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69238: LD_VAR 0 5
69242: PPUSH
69243: LD_VAR 0 7
69247: PPUSH
69248: CALL_OW 488
69252: PUSH
69253: LD_VAR 0 5
69257: PPUSH
69258: LD_VAR 0 7
69262: PPUSH
69263: CALL_OW 428
69267: PPUSH
69268: CALL_OW 247
69272: PUSH
69273: LD_INT 3
69275: PUSH
69276: LD_INT 2
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: IN
69283: NOT
69284: AND
69285: IFFALSE 69329
// begin ComMoveXY ( unit , _x , _y ) ;
69287: LD_VAR 0 1
69291: PPUSH
69292: LD_VAR 0 5
69296: PPUSH
69297: LD_VAR 0 7
69301: PPUSH
69302: CALL_OW 111
// result := [ _x , _y ] ;
69306: LD_ADDR_VAR 0 3
69310: PUSH
69311: LD_VAR 0 5
69315: PUSH
69316: LD_VAR 0 7
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: ST_TO_ADDR
// exit ;
69325: POP
69326: POP
69327: GO 69333
// end ; end ;
69329: GO 69173
69331: POP
69332: POP
// end ; end_of_file
69333: LD_VAR 0 3
69337: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69338: LD_VAR 0 1
69342: PUSH
69343: LD_INT 200
69345: DOUBLE
69346: GREATEREQUAL
69347: IFFALSE 69355
69349: LD_INT 299
69351: DOUBLE
69352: LESSEQUAL
69353: IFTRUE 69357
69355: GO 69389
69357: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69358: LD_VAR 0 1
69362: PPUSH
69363: LD_VAR 0 2
69367: PPUSH
69368: LD_VAR 0 3
69372: PPUSH
69373: LD_VAR 0 4
69377: PPUSH
69378: LD_VAR 0 5
69382: PPUSH
69383: CALL 28394 0 5
69387: GO 69466
69389: LD_INT 300
69391: DOUBLE
69392: GREATEREQUAL
69393: IFFALSE 69401
69395: LD_INT 399
69397: DOUBLE
69398: LESSEQUAL
69399: IFTRUE 69403
69401: GO 69465
69403: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69404: LD_VAR 0 1
69408: PPUSH
69409: LD_VAR 0 2
69413: PPUSH
69414: LD_VAR 0 3
69418: PPUSH
69419: LD_VAR 0 4
69423: PPUSH
69424: LD_VAR 0 5
69428: PPUSH
69429: LD_VAR 0 6
69433: PPUSH
69434: LD_VAR 0 7
69438: PPUSH
69439: LD_VAR 0 8
69443: PPUSH
69444: LD_VAR 0 9
69448: PPUSH
69449: LD_VAR 0 10
69453: PPUSH
69454: LD_VAR 0 11
69458: PPUSH
69459: CALL 26300 0 11
69463: GO 69466
69465: POP
// end ;
69466: PPOPN 11
69468: END
