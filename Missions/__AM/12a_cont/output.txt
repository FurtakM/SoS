// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9187 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9523 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 32947 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 37811 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 37811 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 37811 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 37811 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 37811 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 35429 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 37811 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 37811 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 37811 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 32947 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 32947 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 32947 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 32947 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 32947 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 32947 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 32947 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 32947 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 32947 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 32947 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 32947 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 32947 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 32947 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 32947 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 32947 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4423: LD_ADDR_EXP 4
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_STRING 11c_others
4435: PPUSH
4436: CALL_OW 31
4440: ADD
4441: PUSH
4442: LD_STRING 11_others
4444: PPUSH
4445: CALL_OW 31
4449: ADD
4450: ST_TO_ADDR
// if friends < 18 then
4451: LD_EXP 4
4455: PUSH
4456: LD_INT 18
4458: LESS
4459: IFFALSE 4531
// for i = 1 to 18 do
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_INT 18
4473: PUSH
4474: FOR_TO
4475: IFFALSE 4529
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4498: LD_ADDR_EXP 4
4502: PUSH
4503: LD_EXP 4
4507: PPUSH
4508: LD_EXP 4
4512: PUSH
4513: LD_INT 1
4515: PLUS
4516: PPUSH
4517: CALL_OW 44
4521: PPUSH
4522: CALL_OW 2
4526: ST_TO_ADDR
// end ;
4527: GO 4474
4529: POP
4530: POP
// for i in friends do
4531: LD_ADDR_VAR 0 2
4535: PUSH
4536: LD_EXP 4
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4600
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: CALL_OW 259
4556: PUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_INT 4
4564: PPUSH
4565: CALL_OW 259
4569: GREATEREQUAL
4570: IFFALSE 4586
// SetClass ( i , class_soldier ) else
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 336
4584: GO 4598
// SetClass ( i , class_scientistic ) ;
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: CALL_OW 336
4598: GO 4541
4600: POP
4601: POP
// if Frank then
4602: LD_EXP 33
4606: IFFALSE 4620
// SetClass ( Frank , class_sniper ) ;
4608: LD_EXP 33
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4620: LD_EXP 36
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 37
4634: PUSH
4635: LD_EXP 35
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4653: LD_ADDR_EXP 3
4657: PUSH
4658: LD_STRING 
4660: PPUSH
4661: LD_INT 7
4663: PPUSH
4664: LD_INT 7
4666: PPUSH
4667: LD_INT -6
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: LD_EXP 15
4679: PUSH
4680: LD_EXP 35
4684: PUSH
4685: LD_EXP 27
4689: PUSH
4690: LD_EXP 37
4694: PUSH
4695: LD_INT -2
4697: PUSH
4698: LD_INT -3
4700: PUSH
4701: LD_INT -5
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_EXP 4
4719: ADD
4720: PPUSH
4721: LD_INT 1
4723: PUSH
4724: LD_INT 4
4726: PUSH
4727: LD_INT 2
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// if Simms then
4758: LD_EXP 35
4762: IFFALSE 4780
// selected := selected ^ Simms ;
4764: LD_ADDR_EXP 3
4768: PUSH
4769: LD_EXP 3
4773: PUSH
4774: LD_EXP 35
4778: ADD
4779: ST_TO_ADDR
// if Denis then
4780: LD_EXP 27
4784: IFFALSE 4802
// selected := selected ^ Denis ;
4786: LD_ADDR_EXP 3
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: LD_EXP 27
4800: ADD
4801: ST_TO_ADDR
// if DeltaDoctor then
4802: LD_EXP 37
4806: IFFALSE 4824
// selected := selected ^ DeltaDoctor ;
4808: LD_ADDR_EXP 3
4812: PUSH
4813: LD_EXP 3
4817: PUSH
4818: LD_EXP 37
4822: ADD
4823: ST_TO_ADDR
// friends := friends diff selected ;
4824: LD_ADDR_EXP 4
4828: PUSH
4829: LD_EXP 4
4833: PUSH
4834: LD_EXP 3
4838: DIFF
4839: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_INT 111
4847: PUSH
4848: LD_INT 137
4850: PUSH
4851: LD_INT 51
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 147
4861: PUSH
4862: LD_INT 129
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 7
4890: PUSH
4891: LD_INT 8
4893: PUSH
4894: LD_INT 17
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
// for i in buildings do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 4
4917: PUSH
4918: FOR_IN
4919: IFFALSE 4935
// SetSide ( i , 4 ) ;
4921: LD_VAR 0 2
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 235
4933: GO 4918
4935: POP
4936: POP
// for i in selected do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 3
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5288
// begin if GetClass ( i ) in [ 1 , 5 ] then
4950: LD_VAR 0 2
4954: PPUSH
4955: CALL_OW 257
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: IN
4970: IFFALSE 5130
// begin if buildings [ 1 ] then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: IFFALSE 5041
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PPUSH
5000: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 3
5033: PPUSH
5034: CALL_OW 1
5038: ST_TO_ADDR
// end else
5039: GO 5128
// begin if not areas then
5041: LD_VAR 0 5
5045: NOT
5046: IFFALSE 5080
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 87
5055: PPUSH
5056: LD_INT 68
5058: PPUSH
5059: LD_INT 8
5061: PPUSH
5062: LD_INT 0
5064: PPUSH
5065: CALL_OW 50
// ComHold ( i ) ;
5069: LD_VAR 0 2
5073: PPUSH
5074: CALL_OW 140
// end else
5078: GO 5128
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// ComHold ( i ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 3
5127: ST_TO_ADDR
// end ; end ; end else
5128: GO 5286
// begin if buildings [ 2 ] then
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: IFFALSE 5199
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 2
5152: ARRAY
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_VAR 0 4
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 3
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end else
5197: GO 5286
// begin if not areas then
5199: LD_VAR 0 5
5203: NOT
5204: IFFALSE 5238
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5206: LD_VAR 0 2
5210: PPUSH
5211: LD_INT 87
5213: PPUSH
5214: LD_INT 68
5216: PPUSH
5217: LD_INT 8
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 50
// ComHold ( i ) ;
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 140
// end else
5236: GO 5286
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 49
// ComHold ( i ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// end ; end ; end ; end ;
5286: GO 4947
5288: POP
5289: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5290: LD_ADDR_VAR 0 6
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 30
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: DOUBLE
5330: LD_VAR 0 6
5334: PUSH
5335: LD_EXP 4
5339: MINUS
5340: INC
5341: ST_TO_ADDR
5342: LD_INT 1
5344: PUSH
5345: FOR_DOWNTO
5346: IFFALSE 5413
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5382: LD_ADDR_EXP 4
5386: PUSH
5387: LD_EXP 4
5391: PPUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: PPUSH
5401: CALL_OW 44
5405: PPUSH
5406: CALL_OW 2
5410: ST_TO_ADDR
// end ;
5411: GO 5345
5413: POP
5414: POP
// if friends then
5415: LD_EXP 4
5419: IFFALSE 5535
// begin tmp := friends ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_EXP 4
5430: ST_TO_ADDR
// for i = 1 to bunkers do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5449: LD_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: ARRAY
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5467: LD_VAR 0 3
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 6
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 3
5530: ST_TO_ADDR
// end ;
5531: GO 5446
5533: POP
5534: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_VAR 0 5
5544: PUSH
5545: LD_INT 9
5547: PUSH
5548: LD_INT 10
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: LD_INT 15
5565: PUSH
5566: LD_INT 16
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 27
5574: PUSH
5575: LD_INT 28
5577: PUSH
5578: LD_INT 29
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 31
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 33
5592: PUSH
5593: LD_INT 34
5595: PUSH
5596: LD_INT 35
5598: PUSH
5599: LD_INT 36
5601: PUSH
5602: LD_INT 37
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: UNION
5627: ST_TO_ADDR
// for i in friends do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5926
// begin SetTag ( i , 2 ) ;
5641: LD_VAR 0 2
5645: PPUSH
5646: LD_INT 2
5648: PPUSH
5649: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 257
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: IN
5677: NOT
5678: IFFALSE 5692
// SetClass ( i , 1 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 257
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: LD_INT 5
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: IN
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: AND
5722: IFFALSE 5783
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 4
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 3
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// continue ;
5781: GO 5638
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5783: LD_VAR 0 2
5787: PPUSH
5788: CALL_OW 257
5792: PUSH
5793: LD_INT 4
5795: EQUAL
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: AND
5806: IFFALSE 5867
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: LD_VAR 0 4
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 3
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// continue ;
5865: GO 5638
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 5
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 5
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 3
5905: ST_TO_ADDR
// ComHold ( i ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 140
// if not areas then
5915: LD_VAR 0 5
5919: NOT
5920: IFFALSE 5924
// break ;
5922: GO 5926
// end ;
5924: GO 5638
5926: POP
5927: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5928: LD_EXP 4
5932: PPUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 52
5938: PUSH
5939: EMPTY
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 72
5950: IFFALSE 6017
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 52
5967: PUSH
5968: EMPTY
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 72
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6015
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 65
5990: PPUSH
5991: LD_INT 58
5993: PPUSH
5994: LD_INT 7
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 50
// ComHold ( i ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 140
// end ;
6013: GO 5980
6015: POP
6016: POP
// if Frank then
6017: LD_EXP 33
6021: IFFALSE 6035
// SetClass ( Frank , class_sniper ) ;
6023: LD_EXP 33
6027: PPUSH
6028: LD_INT 5
6030: PPUSH
6031: CALL_OW 336
// end ; end_of_file
6035: LD_VAR 0 1
6039: RET
// export function CanSayRand ( side ) ; begin
6040: LD_INT 0
6042: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 52
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: PUSH
6126: LD_EXP 14
6130: PUSH
6131: LD_EXP 33
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 25
6150: PUSH
6151: LD_EXP 26
6155: PUSH
6156: LD_EXP 27
6160: PUSH
6161: LD_EXP 28
6165: PUSH
6166: LD_EXP 29
6170: PUSH
6171: LD_EXP 30
6175: PUSH
6176: LD_EXP 16
6180: PUSH
6181: LD_EXP 31
6185: PUSH
6186: LD_EXP 32
6190: PUSH
6191: LD_EXP 34
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: DIFF
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 2
6217: RET
// export function SayRand ( sex , dial ) ; begin
6218: LD_INT 0
6220: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 52
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PUSH
6315: LD_EXP 14
6319: PUSH
6320: LD_EXP 33
6324: PUSH
6325: LD_EXP 23
6329: PUSH
6330: LD_EXP 24
6334: PUSH
6335: LD_EXP 25
6339: PUSH
6340: LD_EXP 26
6344: PUSH
6345: LD_EXP 27
6349: PUSH
6350: LD_EXP 28
6354: PUSH
6355: LD_EXP 29
6359: PUSH
6360: LD_EXP 30
6364: PUSH
6365: LD_EXP 16
6369: PUSH
6370: LD_EXP 31
6374: PUSH
6375: LD_EXP 32
6379: PUSH
6380: LD_EXP 34
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: DIFF
6401: ST_TO_ADDR
// if not result then
6402: LD_VAR 0 3
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6439
// result := result [ 1 ] ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ST_TO_ADDR
// Say ( result , dial ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: CALL_OW 88
// end ;
6439: LD_VAR 0 3
6443: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6444: LD_INT 0
6446: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_VAR 0 1
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: PUSH
6534: LD_EXP 14
6538: PUSH
6539: LD_EXP 33
6543: PUSH
6544: LD_EXP 23
6548: PUSH
6549: LD_EXP 24
6553: PUSH
6554: LD_EXP 25
6558: PUSH
6559: LD_EXP 26
6563: PUSH
6564: LD_EXP 27
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: LD_EXP 29
6578: PUSH
6579: LD_EXP 30
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 31
6593: PUSH
6594: LD_EXP 32
6598: PUSH
6599: LD_EXP 34
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ADD
6625: DIFF
6626: ST_TO_ADDR
// if not result then
6627: LD_VAR 0 4
6631: NOT
6632: IFFALSE 6636
// exit ;
6634: GO 6664
// result := result [ 1 ] ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: ST_TO_ADDR
// Say ( result , dial ) ;
6650: LD_VAR 0 4
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 88
// end ;
6664: LD_VAR 0 4
6668: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: PUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 247
6708: PUSH
6709: LD_INT 3
6711: EQUAL
6712: OR
6713: IFFALSE 6717
// exit ;
6715: GO 8256
// for i = path downto 1 do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_VAR 0 2
6727: INC
6728: ST_TO_ADDR
6729: LD_INT 1
6731: PUSH
6732: FOR_DOWNTO
6733: IFFALSE 6794
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6735: LD_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: CALL_OW 488
6769: NOT
6770: IFFALSE 6792
// path = Delete ( path , i ) ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_VAR 0 5
6786: PPUSH
6787: CALL_OW 3
6791: ST_TO_ADDR
// end ;
6792: GO 6732
6794: POP
6795: POP
// if not path then
6796: LD_VAR 0 2
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8256
// tmp_path := [ ] ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// if flags then
6812: LD_VAR 0 3
6816: IFFALSE 6890
// begin if flags [ 1 ] then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: ARRAY
6826: IFFALSE 6842
// safe_place = flags [ 1 ] ;
6828: LD_ADDR_VAR 0 16
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: ST_TO_ADDR
// if flags [ 2 ] then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 2
6849: ARRAY
6850: IFFALSE 6866
// spot_dist = flags [ 2 ] ;
6852: LD_ADDR_VAR 0 15
6856: PUSH
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 2
6864: ARRAY
6865: ST_TO_ADDR
// if flags [ 3 ] then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 3
6873: ARRAY
6874: IFFALSE 6890
// chase_range = flags [ 3 ] ;
6876: LD_ADDR_VAR 0 17
6880: PUSH
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 3
6888: ARRAY
6889: ST_TO_ADDR
// end ; if not chase_range then
6890: LD_VAR 0 17
6894: NOT
6895: IFFALSE 6905
// chase_range = 8 ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_INT 8
6904: ST_TO_ADDR
// if not spot_dist then
6905: LD_VAR 0 15
6909: NOT
6910: IFFALSE 6920
// spot_dist := 8 ;
6912: LD_ADDR_VAR 0 15
6916: PUSH
6917: LD_INT 8
6919: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6920: LD_ADDR_VAR 0 18
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 247
6934: PUSH
6935: LD_INT 2
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 262
6948: PUSH
6949: LD_INT 3
6951: NONEQUAL
6952: AND
6953: ST_TO_ADDR
// status = 1 ;
6954: LD_ADDR_VAR 0 12
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6990: LD_VAR 0 18
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 261
7004: PUSH
7005: LD_INT 20
7007: LESS
7008: AND
7009: IFFALSE 7202
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7011: LD_ADDR_VAR 0 10
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 30
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 29
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: ST_TO_ADDR
// if not station then
7092: LD_VAR 0 10
7096: NOT
7097: IFFALSE 7113
// begin SetFuel ( unit , 40 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 40
7106: PPUSH
7107: CALL_OW 240
// continue ;
7111: GO 6983
// end ; status := 6 ;
7113: LD_ADDR_VAR 0 12
7117: PUSH
7118: LD_INT 6
7120: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_VAR 0 10
7130: PPUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 74
7140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7141: LD_INT 35
7143: PPUSH
7144: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_VAR 0 10
7157: PPUSH
7158: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 10
7171: PPUSH
7172: CALL_OW 296
7176: PUSH
7177: LD_INT 6
7179: LESS
7180: IFFALSE 7141
// SetFuel ( unit , 100 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_INT 100
7189: PPUSH
7190: CALL_OW 240
// status := 5 ;
7194: LD_ADDR_VAR 0 12
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// end ; if status = 1 then
7202: LD_VAR 0 12
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7586
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7212: LD_ADDR_VAR 0 13
7216: PUSH
7217: LD_INT 81
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 255
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 91
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_VAR 0 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 101
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// for i in enemy do
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 13
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7332
// if IsInvisible ( i ) then
7303: LD_VAR 0 5
7307: PPUSH
7308: CALL_OW 571
7312: IFFALSE 7330
// enemy := enemy diff i ;
7314: LD_ADDR_VAR 0 13
7318: PUSH
7319: LD_VAR 0 13
7323: PUSH
7324: LD_VAR 0 5
7328: DIFF
7329: ST_TO_ADDR
7330: GO 7300
7332: POP
7333: POP
// if enemy then
7334: LD_VAR 0 13
7338: IFFALSE 7388
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 251
7373: PPUSH
7374: CALL_OW 232
// status = 2 ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// end else
7386: GO 7586
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_VAR 0 11
7397: PUSH
7398: LD_INT 2
7400: ARRAY
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: LD_VAR 0 11
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: PPUSH
7419: CALL_OW 307
7423: PUSH
7424: LD_VAR 0 1
7428: PPUSH
7429: CALL_OW 314
7433: NOT
7434: OR
7435: IFFALSE 7586
// begin wait ( 0 0$2 ) ;
7437: LD_INT 70
7439: PPUSH
7440: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7444: LD_VAR 0 11
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_INT 1
7455: PLUS
7456: PUSH
7457: LD_VAR 0 2
7461: GREATER
7462: IFFALSE 7487
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
7485: GO 7518
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 11
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 11
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 11
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ARRAY
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 11
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PPUSH
7569: LD_VAR 0 11
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 114
// end ; end ; end ; if status = 2 then
7586: LD_VAR 0 12
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: IFFALSE 7815
// begin if GetLives ( unit ) < 650 and safe_place then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 256
7605: PUSH
7606: LD_INT 650
7608: LESS
7609: PUSH
7610: LD_VAR 0 16
7614: AND
7615: IFFALSE 7627
// begin status = 3 ;
7617: LD_ADDR_VAR 0 12
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// continue ;
7625: GO 6983
// end ; x := GetRememberedX ( unit ) ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 252
7641: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 253
7656: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_INT 81
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 92
7681: PUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 7
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if enemy then
7723: LD_VAR 0 13
7727: IFFALSE 7798
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: LD_VAR 0 13
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 6
7758: PPUSH
7759: LD_VAR 0 7
7763: PPUSH
7764: CALL_OW 297
7768: PUSH
7769: LD_VAR 0 15
7773: PUSH
7774: LD_VAR 0 17
7778: PLUS
7779: LESS
7780: IFFALSE 7796
// ComAttackUnit ( unit , e ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 14
7791: PPUSH
7792: CALL_OW 115
// end else
7796: GO 7815
// begin ComStop ( unit ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 141
// status = 5 ;
7807: LD_ADDR_VAR 0 12
7811: PUSH
7812: LD_INT 5
7814: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7815: LD_VAR 0 12
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 16
7828: AND
7829: IFFALSE 7915
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 16
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: CALL_OW 111
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 16
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 16
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PPUSH
7888: CALL_OW 297
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: IFFALSE 7831
// ComStop ( unit ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 141
// status = 4 ;
7907: LD_ADDR_VAR 0 12
7911: PUSH
7912: LD_INT 4
7914: ST_TO_ADDR
// end ; if status = 4 then
7915: LD_VAR 0 12
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: IFFALSE 7955
// begin repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 256
7941: PUSH
7942: LD_INT 1000
7944: EQUAL
7945: IFFALSE 7925
// status = 5 ;
7947: LD_ADDR_VAR 0 12
7951: PUSH
7952: LD_INT 5
7954: ST_TO_ADDR
// end ; if status = 5 then
7955: LD_VAR 0 12
7959: PUSH
7960: LD_INT 5
7962: EQUAL
7963: IFFALSE 8245
// begin p := 999 ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 999
7972: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7973: LD_ADDR_VAR 0 14
7977: PUSH
7978: LD_VAR 0 11
7982: PUSH
7983: LD_INT 2
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_VAR 0 11
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// c := 1 ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: DOUBLE
8022: LD_INT 1
8024: DEC
8025: ST_TO_ADDR
8026: LD_VAR 0 11
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PUSH
8035: LD_INT 2
8037: DIV
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8172
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_VAR 0 11
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 8
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 11
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: LD_INT 1
8083: PLUS
8084: ARRAY
8085: PPUSH
8086: CALL_OW 297
8090: ST_TO_ADDR
// if x < p then
8091: LD_VAR 0 6
8095: PUSH
8096: LD_VAR 0 9
8100: LESS
8101: IFFALSE 8156
// begin p := x ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_VAR 0 6
8112: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8113: LD_ADDR_VAR 0 14
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 8
8131: ARRAY
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: ARRAY
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// end ; c = c + 2 ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 8
8165: PUSH
8166: LD_INT 2
8168: PLUS
8169: ST_TO_ADDR
// end ;
8170: GO 8039
8172: POP
8173: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 14
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_VAR 0 14
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 14
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 14
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 307
8235: IFFALSE 8174
// status = 1 ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 301
8254: IFFALSE 6983
// end ;
8256: LD_VAR 0 4
8260: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8271: LD_VAR 0 1
8275: NOT
8276: PUSH
8277: LD_VAR 0 3
8281: NOT
8282: OR
8283: PUSH
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: IN
8303: NOT
8304: OR
8305: PUSH
8306: LD_VAR 0 6
8310: NOT
8311: OR
8312: PUSH
8313: LD_VAR 0 7
8317: NOT
8318: OR
8319: IFFALSE 8323
// exit ;
8321: GO 8714
// sex_id :=  ;
8323: LD_ADDR_VAR 0 14
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// case class of 1 :
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8355
8344: POP
// class_id := Sol ; 2 :
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: LD_STRING Sol
8352: ST_TO_ADDR
8353: GO 8413
8355: LD_INT 2
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8374
8363: POP
// class_id := Eng ; 3 :
8364: LD_ADDR_VAR 0 15
8368: PUSH
8369: LD_STRING Eng
8371: ST_TO_ADDR
8372: GO 8413
8374: LD_INT 3
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8393
8382: POP
// class_id := Mech ; 4 :
8383: LD_ADDR_VAR 0 15
8387: PUSH
8388: LD_STRING Mech
8390: ST_TO_ADDR
8391: GO 8413
8393: LD_INT 4
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8412
8401: POP
// class_id := Sci ; end ;
8402: LD_ADDR_VAR 0 15
8406: PUSH
8407: LD_STRING Sci
8409: ST_TO_ADDR
8410: GO 8413
8412: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8413: LD_ADDR_VAR 0 11
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_INT 25
8425: PUSH
8426: LD_VAR 0 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 72
8439: ST_TO_ADDR
// if tmp then
8440: LD_VAR 0 11
8444: IFFALSE 8456
// units := tmp ;
8446: LD_ADDR_VAR 0 1
8450: PUSH
8451: LD_VAR 0 11
8455: ST_TO_ADDR
// if sex then
8456: LD_VAR 0 4
8460: IFFALSE 8516
// begin if sex = sex_female then
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 8480
// sex_id := F ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_STRING F
8479: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 26
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if not units then
8507: LD_VAR 0 1
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8714
// end ; unit_id := id ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_VAR 0 6
8525: ST_TO_ADDR
// if unit_id > units then
8526: LD_VAR 0 12
8530: PUSH
8531: LD_VAR 0 1
8535: GREATER
8536: IFFALSE 8546
// unit_id := 1 ;
8538: LD_ADDR_VAR 0 12
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not units [ unit_id ] then
8546: LD_VAR 0 1
8550: PUSH
8551: LD_VAR 0 12
8555: ARRAY
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8714
// unit := units [ unit_id ] ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 12
8575: ARRAY
8576: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8577: LD_ADDR_VAR 0 13
8581: PUSH
8582: LD_STRING D
8584: PUSH
8585: LD_VAR 0 3
8589: STR
8590: PUSH
8591: LD_STRING -
8593: STR
8594: PUSH
8595: LD_VAR 0 14
8599: STR
8600: PUSH
8601: LD_VAR 0 15
8605: STR
8606: PUSH
8607: LD_VAR 0 6
8611: STR
8612: PUSH
8613: LD_STRING -
8615: STR
8616: PUSH
8617: LD_VAR 0 7
8621: STR
8622: ST_TO_ADDR
// case type of 0 :
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 0
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8653
8636: POP
// Say ( unit , dialog_id ) ; 1 :
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_VAR 0 13
8646: PPUSH
8647: CALL_OW 88
8651: GO 8704
8653: LD_INT 1
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8678
8661: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8662: LD_VAR 0 10
8666: PPUSH
8667: LD_VAR 0 13
8671: PPUSH
8672: CALL_OW 94
8676: GO 8704
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8703
8686: POP
// ForceSay ( unit , dialog_id ) ; end ;
8687: LD_VAR 0 10
8691: PPUSH
8692: LD_VAR 0 13
8696: PPUSH
8697: CALL_OW 91
8701: GO 8704
8703: POP
// result := unit ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 10
8713: ST_TO_ADDR
// end ;
8714: LD_VAR 0 8
8718: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8719: LD_INT 0
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := false ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8732: LD_VAR 0 1
8736: NOT
8737: PUSH
8738: LD_VAR 0 2
8742: NOT
8743: OR
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 310
8754: OR
8755: IFFALSE 8759
// exit ;
8757: GO 8963
// if distance < 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: LESS
8767: IFFALSE 8777
// distance := 0 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 266
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 250
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 251
8811: PPUSH
8812: LD_VAR 0 2
8816: PPUSH
8817: CALL_OW 254
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 248
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL 46888 0 6
8839: ST_TO_ADDR
// if not entrance then
8840: LD_VAR 0 6
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8963
// for i in entrance do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8961
// begin if not distance then
8862: LD_VAR 0 3
8866: NOT
8867: IFFALSE 8912
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 307
8896: IFFALSE 8910
// begin result := true ;
8898: LD_ADDR_VAR 0 4
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// exit ;
8906: POP
8907: POP
8908: GO 8963
// end ; end else
8910: GO 8959
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: PPUSH
8935: CALL_OW 297
8939: PUSH
8940: LD_VAR 0 3
8944: LESSEQUAL
8945: IFFALSE 8959
// begin result := true ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// exit ;
8955: POP
8956: POP
8957: GO 8963
// end ; end ; end ;
8959: GO 8859
8961: POP
8962: POP
// end ;
8963: LD_VAR 0 4
8967: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
8972: PPUSH
// result := false ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8981: LD_VAR 0 1
8985: NOT
8986: PUSH
8987: LD_VAR 0 2
8991: NOT
8992: OR
8993: PUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 302
9003: NOT
9004: OR
9005: PUSH
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 302
9015: NOT
9016: OR
9017: IFFALSE 9021
// exit ;
9019: GO 9182
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9021: LD_VAR 0 1
9025: PPUSH
9026: LD_INT 81
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 255
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 74
9078: PPUSH
9079: CALL_OW 296
9083: PUSH
9084: LD_INT 8
9086: LESS
9087: IFFALSE 9091
// exit ;
9089: GO 9182
// building := IsInUnit ( unit2 ) ;
9091: LD_ADDR_VAR 0 5
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 310
9105: ST_TO_ADDR
// if building then
9106: LD_VAR 0 5
9110: IFFALSE 9137
// result := IsNearbyEntrance ( unit , building , 2 ) else
9112: LD_ADDR_VAR 0 3
9116: PUSH
9117: LD_VAR 0 1
9121: PPUSH
9122: LD_VAR 0 5
9126: PPUSH
9127: LD_INT 2
9129: PPUSH
9130: CALL 8719 0 3
9134: ST_TO_ADDR
9135: GO 9182
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9137: LD_ADDR_VAR 0 3
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 296
9156: PUSH
9157: LD_INT 6
9159: LESS
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 255
9170: PPUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 292
9180: AND
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 3
9186: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
// uc_side = 0 ;
9193: LD_ADDR_OWVAR 20
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_nation = 0 ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// nat_area := nature_area ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 24
9216: ST_TO_ADDR
// InitHc ;
9217: CALL_OW 19
// for i = 1 to 4 do
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 4
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9282
// begin hc_class = 18 ;
9237: LD_ADDR_OWVAR 28
9241: PUSH
9242: LD_INT 18
9244: ST_TO_ADDR
// hc_gallery =  ;
9245: LD_ADDR_OWVAR 33
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// animal := CreateHuman ;
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 0
9275: PPUSH
9276: CALL_OW 49
// end ;
9280: GO 9234
9282: POP
9283: POP
// for i = 1 to 3 do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: DOUBLE
9290: LD_INT 1
9292: DEC
9293: ST_TO_ADDR
9294: LD_INT 3
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9392
// begin hc_class = class_apeman ;
9300: LD_ADDR_OWVAR 28
9304: PUSH
9305: LD_INT 12
9307: ST_TO_ADDR
// hc_gallery =  ;
9308: LD_ADDR_OWVAR 33
9312: PUSH
9313: LD_STRING 
9315: ST_TO_ADDR
// hc_agressivity = 0 ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9324: LD_ADDR_OWVAR 31
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: LD_INT 3
9345: PPUSH
9346: CALL_OW 12
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// animal := CreateHuman ;
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: CALL_OW 44
9372: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: CALL_OW 49
// end ;
9390: GO 9297
9392: POP
9393: POP
// for i = 1 to 3 do
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: DOUBLE
9400: LD_INT 1
9402: DEC
9403: ST_TO_ADDR
9404: LD_INT 3
9406: PUSH
9407: FOR_TO
9408: IFFALSE 9455
// begin hc_class = 13 ;
9410: LD_ADDR_OWVAR 28
9414: PUSH
9415: LD_INT 13
9417: ST_TO_ADDR
// hc_gallery =  ;
9418: LD_ADDR_OWVAR 33
9422: PUSH
9423: LD_STRING 
9425: ST_TO_ADDR
// animal := CreateHuman ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: CALL_OW 44
9435: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 49
// end ;
9453: GO 9407
9455: POP
9456: POP
// for i = 1 to 3 do
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 3
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin hc_class = 20 ;
9473: LD_ADDR_OWVAR 28
9477: PUSH
9478: LD_INT 20
9480: ST_TO_ADDR
// hc_gallery =  ;
9481: LD_ADDR_OWVAR 33
9485: PUSH
9486: LD_STRING 
9488: ST_TO_ADDR
// animal := CreateHuman ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: CALL_OW 44
9498: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 4
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: CALL_OW 49
// end ;
9514: GO 9470
9516: POP
9517: POP
// end ; end_of_file
9518: LD_VAR 0 1
9522: RET
// export function Action ; begin
9523: LD_INT 0
9525: PPUSH
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9530: LD_EXP 14
9534: PPUSH
9535: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D1-JMM-1
9546: PPUSH
9547: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9551: LD_EXP 15
9555: PPUSH
9556: LD_STRING D1-Roth-1
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D1-JMM-2
9570: PPUSH
9571: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9575: LD_EXP 15
9579: PPUSH
9580: LD_STRING D1-Roth-2
9582: PPUSH
9583: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9587: LD_EXP 14
9591: PPUSH
9592: LD_STRING D1-JMM-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9599: LD_EXP 15
9603: PPUSH
9604: LD_STRING D1-Roth-3
9606: PPUSH
9607: CALL_OW 88
// ComInvisible ( Roth ) ;
9611: LD_EXP 15
9615: PPUSH
9616: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9620: LD_INT 46
9622: PPUSH
9623: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9627: LD_EXP 14
9631: PPUSH
9632: LD_STRING D1-JMM-4
9634: PPUSH
9635: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9639: LD_INT 10
9641: PPUSH
9642: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_EXP 14
9655: PPUSH
9656: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D1-JMM-4a
9667: PPUSH
9668: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D1-Roth-4
9679: PPUSH
9680: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9684: LD_EXP 14
9688: PPUSH
9689: LD_STRING D1-JMM-5
9691: PPUSH
9692: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING D1-Roth-5
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_STRING D1-JMM-6
9715: PPUSH
9716: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9720: LD_EXP 15
9724: PPUSH
9725: LD_STRING D1-Roth-6
9727: PPUSH
9728: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9732: LD_EXP 14
9736: PPUSH
9737: LD_STRING D1-JMM-7
9739: PPUSH
9740: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9744: LD_EXP 16
9748: PPUSH
9749: LD_EXP 14
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 14
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING D1-Roth-7
9780: PPUSH
9781: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9785: LD_INT 10
9787: PPUSH
9788: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9792: LD_EXP 16
9796: PPUSH
9797: LD_EXP 14
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 6
9809: LESS
9810: IFFALSE 9785
// ComTurnUnit ( Powell , JMM ) ;
9812: LD_EXP 16
9816: PPUSH
9817: LD_EXP 14
9821: PPUSH
9822: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_STRING D1-Pow-7
9833: PPUSH
9834: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_EXP 16
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_EXP 16
9861: PPUSH
9862: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9866: LD_EXP 14
9870: PPUSH
9871: LD_STRING D1-JMM-8
9873: PPUSH
9874: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9878: LD_EXP 16
9882: PPUSH
9883: LD_STRING D1-Pow-8
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9890: LD_EXP 14
9894: PPUSH
9895: LD_STRING D1-JMM-9
9897: PPUSH
9898: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 124
9909: PPUSH
9910: LD_INT 61
9912: PPUSH
9913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9917: LD_INT 35
9919: PPUSH
9920: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9924: LD_EXP 14
9928: PPUSH
9929: LD_EXP 16
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 6
9941: GREATER
9942: IFFALSE 9917
// SayRadio ( Powell , D1-Pow-9 ) ;
9944: LD_EXP 16
9948: PPUSH
9949: LD_STRING D1-Pow-9
9951: PPUSH
9952: CALL_OW 94
// RemoveUnit ( Powell ) ;
9956: LD_EXP 16
9960: PPUSH
9961: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9965: LD_EXP 16
9969: PPUSH
9970: LD_INT 18
9972: PPUSH
9973: CALL_OW 52
// if Joan and not Joan in selected then
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 36
9986: PUSH
9987: LD_EXP 3
9991: IN
9992: NOT
9993: AND
9994: IFFALSE 10008
// SayRadio ( Joan , D1-Joan-9 ) ;
9996: LD_EXP 36
10000: PPUSH
10001: LD_STRING D1-Joan-9
10003: PPUSH
10004: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10022: LD_EXP 14
10026: PPUSH
10027: LD_EXP 15
10031: PPUSH
10032: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-9
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-10
10055: PPUSH
10056: CALL_OW 88
// InGameOff ;
10060: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10064: LD_STRING M1
10066: PPUSH
10067: CALL_OW 337
// if Difficulty < 3 then
10071: LD_OWVAR 67
10075: PUSH
10076: LD_INT 3
10078: LESS
10079: IFFALSE 10091
// ChangeSideFog ( 4 , 7 ) ;
10081: LD_INT 4
10083: PPUSH
10084: LD_INT 7
10086: PPUSH
10087: CALL_OW 343
// SaveForQuickRestart ;
10091: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10095: LD_INT 7
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 80
// wait ( 0 0$3 ) ;
10111: LD_INT 105
10113: PPUSH
10114: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 124
10125: PPUSH
10126: LD_INT 18
10128: PPUSH
10129: CALL_OW 111
// AddComInvisible ( Roth ) ;
10133: LD_EXP 15
10137: PPUSH
10138: CALL_OW 212
// wait ( 0 0$30 ) ;
10142: LD_INT 1050
10144: PPUSH
10145: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10149: LD_EXP 15
10153: PPUSH
10154: LD_INT 2100
10156: PPUSH
10157: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_INT 156
10168: PPUSH
10169: LD_INT 20
10171: PPUSH
10172: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10176: LD_EXP 15
10180: PPUSH
10181: LD_INT 178
10183: PPUSH
10184: LD_INT 42
10186: PPUSH
10187: CALL_OW 171
// AddComInvisible ( Roth ) ;
10191: LD_EXP 15
10195: PPUSH
10196: CALL_OW 212
// end ;
10200: LD_VAR 0 1
10204: RET
// every 0 0$1 do var i , tmp ;
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin tmp := selected union friends ;
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_EXP 3
10221: PUSH
10222: LD_EXP 4
10226: UNION
10227: ST_TO_ADDR
// if not tmp then
10228: LD_VAR 0 2
10232: NOT
10233: IFFALSE 10237
// exit ;
10235: GO 10309
// repeat wait ( 0 0$1 ) ;
10237: LD_INT 35
10239: PPUSH
10240: CALL_OW 67
// for i in tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_VAR 0 2
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10300
// if CanSpot ( JMM , i ) then
10257: LD_EXP 14
10261: PPUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL 8968 0 2
10271: IFFALSE 10298
// begin tmp := tmp diff i ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// Spot ( i ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10312 0 1
// end ;
10298: GO 10254
10300: POP
10301: POP
// until not tmp ;
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10237
// end ;
10309: PPOPN 2
10311: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10318: LD_VAR 0 1
10322: NOT
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 4
10336: NONEQUAL
10337: OR
10338: PUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 555
10348: OR
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 302
10359: NOT
10360: OR
10361: IFFALSE 10365
// exit ;
10363: GO 12254
// InGameOn ;
10365: CALL_OW 8
// side := GetSide ( JMM ) ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_EXP 14
10378: PPUSH
10379: CALL_OW 255
10383: ST_TO_ADDR
// joined := false ;
10384: LD_ADDR_VAR 0 5
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10392: LD_ADDR_VAR 0 3
10396: PUSH
10397: LD_VAR 0 1
10401: PPUSH
10402: CALL_OW 310
10406: ST_TO_ADDR
// if building then
10407: LD_VAR 0 3
10411: IFFALSE 10470
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10413: LD_EXP 14
10417: PPUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 255
10427: PPUSH
10428: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10432: LD_EXP 14
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: CALL_OW 120
// repeat wait ( 3 ) ;
10446: LD_INT 3
10448: PPUSH
10449: CALL_OW 67
// until IsInUnit ( JMM ) ;
10453: LD_EXP 14
10457: PPUSH
10458: CALL_OW 310
10462: IFFALSE 10446
// DialogueOn ;
10464: CALL_OW 6
// end else
10468: GO 10502
// begin ComTurnUnit ( JMM , unit ) ;
10470: LD_EXP 14
10474: PPUSH
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_EXP 14
10493: PPUSH
10494: CALL_OW 119
// DialogueOn ;
10498: CALL_OW 6
// end ; if unit = Joan then
10502: LD_VAR 0 1
10506: PUSH
10507: LD_EXP 36
10511: EQUAL
10512: IFFALSE 10622
// begin joined := true ;
10514: LD_ADDR_VAR 0 5
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// if Joan in selected then
10522: LD_EXP 36
10526: PUSH
10527: LD_EXP 3
10531: IN
10532: IFFALSE 10560
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10534: LD_EXP 36
10538: PPUSH
10539: LD_STRING D3-Joan-Joan-1
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10546: LD_EXP 14
10550: PPUSH
10551: LD_STRING D3-Joan-JMM-1
10553: PPUSH
10554: CALL_OW 88
// end else
10558: GO 10620
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10560: LD_EXP 36
10564: PPUSH
10565: LD_STRING D4-Joan-Joan-1
10567: PPUSH
10568: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10572: LD_EXP 14
10576: PPUSH
10577: LD_STRING D4-Joan-JMM-1
10579: PPUSH
10580: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10584: LD_EXP 36
10588: PPUSH
10589: LD_STRING D4-Joan-Joan-2
10591: PPUSH
10592: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10596: LD_EXP 14
10600: PPUSH
10601: LD_STRING D4-Joan-JMM-2
10603: PPUSH
10604: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10608: LD_EXP 36
10612: PPUSH
10613: LD_STRING D4-Joan-Joan-3
10615: PPUSH
10616: CALL_OW 88
// end ; end else
10620: GO 12062
// if unit = Lisa then
10622: LD_VAR 0 1
10626: PUSH
10627: LD_EXP 23
10631: EQUAL
10632: IFFALSE 10824
// begin if Lisa in selected then
10634: LD_EXP 23
10638: PUSH
10639: LD_EXP 3
10643: IN
10644: IFFALSE 10757
// begin if GetSide ( Joan ) = 7 then
10646: LD_EXP 36
10650: PPUSH
10651: CALL_OW 255
10655: PUSH
10656: LD_INT 7
10658: EQUAL
10659: IFFALSE 10723
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10661: LD_EXP 23
10665: PPUSH
10666: LD_STRING D3-LisaJ-Lisa-1
10668: PPUSH
10669: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10673: LD_EXP 14
10677: PPUSH
10678: LD_STRING D3-LisaJ-JMM-1
10680: PPUSH
10681: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10685: LD_EXP 23
10689: PPUSH
10690: LD_STRING D3-LisaJ-Lisa-2
10692: PPUSH
10693: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10697: LD_EXP 14
10701: PPUSH
10702: LD_STRING D3-LisaJ-JMM-2
10704: PPUSH
10705: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10709: LD_EXP 23
10713: PPUSH
10714: LD_STRING D3-LisaJ-Lisa-3
10716: PPUSH
10717: CALL_OW 88
// end else
10721: GO 10755
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10723: LD_EXP 23
10727: PPUSH
10728: LD_STRING D3-LisaL-Lisa-1
10730: PPUSH
10731: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10735: LD_EXP 14
10739: PPUSH
10740: LD_STRING D3-LisaL-JMM-1
10742: PPUSH
10743: CALL_OW 88
// joined := true ;
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// end ; end else
10755: GO 10822
// begin if GetSide ( Joan ) = 7 then
10757: LD_EXP 36
10761: PPUSH
10762: CALL_OW 255
10766: PUSH
10767: LD_INT 7
10769: EQUAL
10770: IFFALSE 10810
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10772: LD_EXP 23
10776: PPUSH
10777: LD_STRING D4-LisaJ-Lisa-1
10779: PPUSH
10780: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10784: LD_EXP 14
10788: PPUSH
10789: LD_STRING D4-LisaJ-JMM-1
10791: PPUSH
10792: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10796: LD_EXP 23
10800: PPUSH
10801: LD_STRING D4-LisaJ-Lisa-2
10803: PPUSH
10804: CALL_OW 88
// end else
10808: GO 10822
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10810: LD_EXP 23
10814: PPUSH
10815: LD_STRING D4-LisaL-Lisa-1
10817: PPUSH
10818: CALL_OW 88
// end ; end ; end else
10822: GO 12062
// if unit = Frank then
10824: LD_VAR 0 1
10828: PUSH
10829: LD_EXP 33
10833: EQUAL
10834: IFFALSE 10974
// begin joined := true ;
10836: LD_ADDR_VAR 0 5
10840: PUSH
10841: LD_INT 1
10843: ST_TO_ADDR
// if Frank in selected then
10844: LD_EXP 33
10848: PUSH
10849: LD_EXP 3
10853: IN
10854: IFFALSE 10924
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10856: LD_EXP 33
10860: PPUSH
10861: LD_STRING D3-Frank-Frank-1
10863: PPUSH
10864: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10868: LD_EXP 14
10872: PPUSH
10873: LD_STRING D3-Frank-JMM-1
10875: PPUSH
10876: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10880: LD_EXP 33
10884: PPUSH
10885: LD_STRING D3-Frank-Frank-2
10887: PPUSH
10888: CALL_OW 88
// if reached_lab then
10892: LD_EXP 5
10896: IFFALSE 10922
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10898: LD_EXP 14
10902: PPUSH
10903: LD_STRING D3-Frank-JMM-2
10905: PPUSH
10906: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10910: LD_EXP 33
10914: PPUSH
10915: LD_STRING D3-Frank-Frank-3
10917: PPUSH
10918: CALL_OW 88
// end ; end else
10922: GO 10972
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10924: LD_EXP 33
10928: PPUSH
10929: LD_STRING D4-Frank-Frank-1
10931: PPUSH
10932: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10936: LD_EXP 14
10940: PPUSH
10941: LD_STRING D4-Frank-JMM-1
10943: PPUSH
10944: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10948: LD_EXP 33
10952: PPUSH
10953: LD_STRING D4-Frank-Frank-2
10955: PPUSH
10956: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10960: LD_EXP 14
10964: PPUSH
10965: LD_STRING D4-Frank-JMM-2
10967: PPUSH
10968: CALL_OW 88
// end ; end else
10972: GO 12062
// if unit = Brown then
10974: LD_VAR 0 1
10978: PUSH
10979: LD_EXP 28
10983: EQUAL
10984: IFFALSE 11080
// begin if Brown in selected or gamma_commander = 2 then
10986: LD_EXP 28
10990: PUSH
10991: LD_EXP 3
10995: IN
10996: PUSH
10997: LD_EXP 10
11001: PUSH
11002: LD_INT 2
11004: EQUAL
11005: OR
11006: IFFALSE 11042
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11008: LD_EXP 28
11012: PPUSH
11013: LD_STRING D3-Soldier1-Sol1-1
11015: PPUSH
11016: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11020: LD_EXP 14
11024: PPUSH
11025: LD_STRING D3-Soldier1-JMM-1
11027: PPUSH
11028: CALL_OW 88
// joined := true ;
11032: LD_ADDR_VAR 0 5
11036: PUSH
11037: LD_INT 1
11039: ST_TO_ADDR
// end else
11040: GO 11078
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11042: LD_EXP 28
11046: PPUSH
11047: LD_STRING D4-Soldier2-Sol1-1
11049: PPUSH
11050: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11054: LD_EXP 14
11058: PPUSH
11059: LD_STRING D4-Soldier1-JMM-1
11061: PPUSH
11062: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11066: LD_EXP 28
11070: PPUSH
11071: LD_STRING D4-Soldier2-Sol1-2
11073: PPUSH
11074: CALL_OW 88
// end ; end else
11078: GO 12062
// if unit = Donaldson then
11080: LD_VAR 0 1
11084: PUSH
11085: LD_EXP 24
11089: EQUAL
11090: IFFALSE 11186
// begin if Donaldson in selected or gamma_commander = 1 then
11092: LD_EXP 24
11096: PUSH
11097: LD_EXP 3
11101: IN
11102: PUSH
11103: LD_EXP 10
11107: PUSH
11108: LD_INT 1
11110: EQUAL
11111: OR
11112: IFFALSE 11148
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11114: LD_EXP 24
11118: PPUSH
11119: LD_STRING D3-Soldier2-FSol2-1
11121: PPUSH
11122: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11126: LD_EXP 14
11130: PPUSH
11131: LD_STRING D3-Soldier2-JMM-1
11133: PPUSH
11134: CALL_OW 88
// joined := true ;
11138: LD_ADDR_VAR 0 5
11142: PUSH
11143: LD_INT 1
11145: ST_TO_ADDR
// end else
11146: GO 11184
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_STRING D4-Soldier1-FSol1-1
11155: PPUSH
11156: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_STRING D4-Soldier1-JMM-1
11167: PPUSH
11168: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_STRING D4-Soldier1-FSol1-2
11179: PPUSH
11180: CALL_OW 88
// end ; end else
11184: GO 12062
// if unit = Cyrus then
11186: LD_VAR 0 1
11190: PUSH
11191: LD_EXP 26
11195: EQUAL
11196: IFFALSE 11270
// begin if Cyrus in selected then
11198: LD_EXP 26
11202: PUSH
11203: LD_EXP 3
11207: IN
11208: IFFALSE 11244
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11210: LD_EXP 26
11214: PPUSH
11215: LD_STRING D3-Cyrus-Cyrus-1
11217: PPUSH
11218: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11222: LD_EXP 14
11226: PPUSH
11227: LD_STRING D3-Cyrus-JMM-1
11229: PPUSH
11230: CALL_OW 88
// joined := true ;
11234: LD_ADDR_VAR 0 5
11238: PUSH
11239: LD_INT 1
11241: ST_TO_ADDR
// end else
11242: GO 11268
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11244: LD_EXP 26
11248: PPUSH
11249: LD_STRING D4-Cyrus-Cyrus-1
11251: PPUSH
11252: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11256: LD_EXP 14
11260: PPUSH
11261: LD_STRING D4-Cyrus-JMM-1
11263: PPUSH
11264: CALL_OW 88
// end ; end else
11268: GO 12062
// if unit = Bobby then
11270: LD_VAR 0 1
11274: PUSH
11275: LD_EXP 25
11279: EQUAL
11280: IFFALSE 11366
// begin if Bobby in selected then
11282: LD_EXP 25
11286: PUSH
11287: LD_EXP 3
11291: IN
11292: IFFALSE 11328
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11294: LD_EXP 25
11298: PPUSH
11299: LD_STRING D3-Bobby-Bobby-1
11301: PPUSH
11302: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11306: LD_EXP 14
11310: PPUSH
11311: LD_STRING D3-Bobby-JMM-1
11313: PPUSH
11314: CALL_OW 88
// joined := true ;
11318: LD_ADDR_VAR 0 5
11322: PUSH
11323: LD_INT 1
11325: ST_TO_ADDR
// end else
11326: GO 11364
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11328: LD_EXP 25
11332: PPUSH
11333: LD_STRING D4-Bobby-Bobby-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11340: LD_EXP 14
11344: PPUSH
11345: LD_STRING D4-Bobby-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11352: LD_EXP 25
11356: PPUSH
11357: LD_STRING D4-Bobby-Bobby-2
11359: PPUSH
11360: CALL_OW 88
// end ; end else
11364: GO 12062
// if unit = Cornel then
11366: LD_VAR 0 1
11370: PUSH
11371: LD_EXP 31
11375: EQUAL
11376: IFFALSE 11474
// begin if Cornel in selected then
11378: LD_EXP 31
11382: PUSH
11383: LD_EXP 3
11387: IN
11388: IFFALSE 11436
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11390: LD_EXP 31
11394: PPUSH
11395: LD_STRING D3-Mark-Corn-1
11397: PPUSH
11398: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11402: LD_EXP 14
11406: PPUSH
11407: LD_STRING D3-Mark-JMM-1
11409: PPUSH
11410: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11414: LD_EXP 31
11418: PPUSH
11419: LD_STRING D3-Mark-Corn-2
11421: PPUSH
11422: CALL_OW 88
// joined := true ;
11426: LD_ADDR_VAR 0 5
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// end else
11434: GO 11472
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11436: LD_EXP 31
11440: PPUSH
11441: LD_STRING D4-Mark-Corn-1
11443: PPUSH
11444: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11448: LD_EXP 14
11452: PPUSH
11453: LD_STRING D3-Joan-JMM-1
11455: PPUSH
11456: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11460: LD_EXP 31
11464: PPUSH
11465: LD_STRING D4-Mark-Corn-2
11467: PPUSH
11468: CALL_OW 88
// end ; end else
11472: GO 12062
// if unit = Gary then
11474: LD_VAR 0 1
11478: PUSH
11479: LD_EXP 32
11483: EQUAL
11484: IFFALSE 11568
// begin if Gary in selected then
11486: LD_EXP 32
11490: PUSH
11491: LD_EXP 3
11495: IN
11496: IFFALSE 11532
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11498: LD_EXP 32
11502: PPUSH
11503: LD_STRING D3-Gary-Gary-1
11505: PPUSH
11506: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11510: LD_EXP 14
11514: PPUSH
11515: LD_STRING D3-Gary-JMM-1
11517: PPUSH
11518: CALL_OW 88
// joined := true ;
11522: LD_ADDR_VAR 0 5
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// end else
11530: GO 11566
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11532: LD_EXP 32
11536: PPUSH
11537: LD_STRING D4-Gary-Gary-1
11539: PPUSH
11540: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11544: LD_EXP 32
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 235
// DialogueOff ;
11556: CALL_OW 7
// InGameOff ;
11560: CALL_OW 9
// exit ;
11564: GO 12254
// end ; end else
11566: GO 12062
// if unit = Kikuchi then
11568: LD_VAR 0 1
11572: PUSH
11573: LD_EXP 34
11577: EQUAL
11578: IFFALSE 11662
// begin if Kikuchi in selected then
11580: LD_EXP 34
11584: PUSH
11585: LD_EXP 3
11589: IN
11590: IFFALSE 11626
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11592: LD_EXP 34
11596: PPUSH
11597: LD_STRING D3-Yamako-Yam-1
11599: PPUSH
11600: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11604: LD_EXP 14
11608: PPUSH
11609: LD_STRING D3-Soldier2-JMM-1
11611: PPUSH
11612: CALL_OW 88
// joined := true ;
11616: LD_ADDR_VAR 0 5
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// end else
11624: GO 11660
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11626: LD_EXP 34
11630: PPUSH
11631: LD_STRING D4-Yamako-Yam-1
11633: PPUSH
11634: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11638: LD_EXP 34
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 235
// DialogueOff ;
11650: CALL_OW 7
// InGameOff ;
11654: CALL_OW 9
// exit ;
11658: GO 12254
// end ; end else
11660: GO 12062
// if unit = Gladstone then
11662: LD_VAR 0 1
11666: PUSH
11667: LD_EXP 29
11671: EQUAL
11672: IFFALSE 11746
// begin if Gladstone in selected then
11674: LD_EXP 29
11678: PUSH
11679: LD_EXP 3
11683: IN
11684: IFFALSE 11720
// begin joined := true ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11694: LD_EXP 14
11698: PPUSH
11699: LD_STRING D3-Tim-JMM-1
11701: PPUSH
11702: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11706: LD_EXP 29
11710: PPUSH
11711: LD_STRING D3-Tim-Glad-1
11713: PPUSH
11714: CALL_OW 88
// end else
11718: GO 11744
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11720: LD_EXP 14
11724: PPUSH
11725: LD_STRING D4-Tim-JMM-1
11727: PPUSH
11728: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11732: LD_EXP 29
11736: PPUSH
11737: LD_STRING D4-Tim-Glad-1
11739: PPUSH
11740: CALL_OW 88
// end ; end else
11744: GO 12062
// if unit = Denis then
11746: LD_VAR 0 1
11750: PUSH
11751: LD_EXP 27
11755: EQUAL
11756: IFFALSE 11792
// begin joined := true ;
11758: LD_ADDR_VAR 0 5
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11766: LD_EXP 27
11770: PPUSH
11771: LD_STRING D3-Denis-Den-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11778: LD_EXP 14
11782: PPUSH
11783: LD_STRING D3-Denis-JMM-1
11785: PPUSH
11786: CALL_OW 88
// end else
11790: GO 12062
// if unit = Simms then
11792: LD_VAR 0 1
11796: PUSH
11797: LD_EXP 35
11801: EQUAL
11802: IFFALSE 11838
// begin joined := true ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11812: LD_EXP 35
11816: PPUSH
11817: LD_STRING D3-Simms-Sim-1
11819: PPUSH
11820: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11824: LD_EXP 14
11828: PPUSH
11829: LD_STRING D3-Simms-JMM-1
11831: PPUSH
11832: CALL_OW 88
// end else
11836: GO 12062
// if unit = DeltaDoctor then
11838: LD_VAR 0 1
11842: PUSH
11843: LD_EXP 37
11847: EQUAL
11848: IFFALSE 11884
// begin joined := true ;
11850: LD_ADDR_VAR 0 5
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11858: LD_EXP 37
11862: PPUSH
11863: LD_STRING D3-Soldier1-Sol1-1
11865: PPUSH
11866: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11870: LD_EXP 14
11874: PPUSH
11875: LD_STRING D3-Soldier1-JMM-1
11877: PPUSH
11878: CALL_OW 88
// end else
11882: GO 12062
// begin joined := unit in selected ;
11884: LD_ADDR_VAR 0 5
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: LD_EXP 3
11898: IN
11899: ST_TO_ADDR
// if joined then
11900: LD_VAR 0 5
11904: IFFALSE 11973
// begin if GetSex ( unit ) = sex_male then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 258
11915: PUSH
11916: LD_INT 1
11918: EQUAL
11919: IFFALSE 11947
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11921: LD_VAR 0 1
11925: PPUSH
11926: LD_STRING D3-Soldier1-Sol1-1
11928: PPUSH
11929: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11933: LD_EXP 14
11937: PPUSH
11938: LD_STRING D3-Soldier1-JMM-1
11940: PPUSH
11941: CALL_OW 88
// end else
11945: GO 11971
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_STRING D3-Soldier2-FSol2-1
11954: PPUSH
11955: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11959: LD_EXP 14
11963: PPUSH
11964: LD_STRING D3-Soldier2-JMM-1
11966: PPUSH
11967: CALL_OW 88
// end ; end else
11971: GO 12062
// begin if GetSex ( unit ) = sex_male then
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 258
11982: PUSH
11983: LD_INT 1
11985: EQUAL
11986: IFFALSE 12026
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_STRING D4-Soldier2-Sol1-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12000: LD_EXP 14
12004: PPUSH
12005: LD_STRING D4-Soldier2-JMM-1
12007: PPUSH
12008: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12012: LD_VAR 0 1
12016: PPUSH
12017: LD_STRING D4-Soldier2-Sol2-1
12019: PPUSH
12020: CALL_OW 88
// end else
12024: GO 12062
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: LD_STRING D4-Soldier1-FSol1-1
12033: PPUSH
12034: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12038: LD_EXP 14
12042: PPUSH
12043: LD_STRING D4-Soldier1-JMM-1
12045: PPUSH
12046: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_STRING D4-Soldier1-FSol1-2
12057: PPUSH
12058: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12062: CALL_OW 7
// InGameOff ;
12066: CALL_OW 9
// if building then
12070: LD_VAR 0 3
12074: IFFALSE 12175
// begin SetSide ( JMM , side ) ;
12076: LD_EXP 14
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12090: LD_EXP 14
12094: PPUSH
12095: CALL_OW 122
// if joined then
12099: LD_VAR 0 5
12103: IFFALSE 12142
// begin SetSide ( unit , side ) ;
12105: LD_VAR 0 1
12109: PPUSH
12110: LD_VAR 0 4
12114: PPUSH
12115: CALL_OW 235
// SetSide ( building , 1 ) ;
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 235
// ComExitBuilding ( unit ) ;
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 122
// end else
12140: GO 12173
// begin wait ( 0 0$10 ) ;
12142: LD_INT 350
12144: PPUSH
12145: CALL_OW 67
// SetSide ( unit , 1 ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 235
// SetSide ( building , 1 ) ;
12161: LD_VAR 0 3
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 235
// end ; end else
12173: GO 12254
// begin ComStop ( [ JMM , unit ] ) ;
12175: LD_EXP 14
12179: PUSH
12180: LD_VAR 0 1
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 141
// if joined then
12193: LD_VAR 0 5
12197: IFFALSE 12215
// SetSide ( unit , side ) else
12199: LD_VAR 0 1
12203: PPUSH
12204: LD_VAR 0 4
12208: PPUSH
12209: CALL_OW 235
12213: GO 12254
// begin repeat wait ( 0 0$1 ) ;
12215: LD_INT 35
12217: PPUSH
12218: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12222: LD_EXP 14
12226: PPUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 296
12236: PUSH
12237: LD_INT 11
12239: GREATER
12240: IFFALSE 12215
// SetSide ( unit , 1 ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 235
// end ; end ; end ;
12254: LD_VAR 0 2
12258: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12259: LD_EXP 14
12263: PPUSH
12264: CALL_OW 310
12268: PUSH
12269: LD_INT 47
12271: EQUAL
12272: IFFALSE 12340
12274: GO 12276
12276: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12277: LD_STRING M1a
12279: PPUSH
12280: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12284: LD_INT 13
12286: PPUSH
12287: LD_INT 7
12289: PPUSH
12290: LD_INT 2
12292: PPUSH
12293: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12297: LD_INT 29
12299: PPUSH
12300: LD_INT 7
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12310: LD_EXP 14
12314: PPUSH
12315: LD_INT 9
12317: PPUSH
12318: CALL_OW 336
// can_escape := true ;
12322: LD_ADDR_EXP 6
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12330: LD_INT 19
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 424
// end ;
12340: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12341: LD_EXP 16
12345: PPUSH
12346: CALL_OW 256
12350: PUSH
12351: LD_INT 999
12353: LESS
12354: IFFALSE 12405
12356: GO 12358
12358: DISABLE
// begin enable ;
12359: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12360: LD_INT 25
12362: PPUSH
12363: LD_INT 48
12365: PPUSH
12366: CALL_OW 428
12370: PUSH
12371: LD_EXP 16
12375: EQUAL
12376: IFFALSE 12390
// begin RemoveUnit ( Powell ) ;
12378: LD_EXP 16
12382: PPUSH
12383: CALL_OW 64
// disable ;
12387: DISABLE
// end else
12388: GO 12405
// ComMoveXY ( Powell , 25 , 48 ) ;
12390: LD_EXP 16
12394: PPUSH
12395: LD_INT 25
12397: PPUSH
12398: LD_INT 48
12400: PPUSH
12401: CALL_OW 111
// end ;
12405: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12406: LD_INT 22
12408: PUSH
12409: LD_INT 4
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 21
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: LD_INT 24
12431: PUSH
12432: LD_INT 990
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 69
12452: PUSH
12453: LD_EXP 15
12457: DIFF
12458: IFFALSE 12602
12460: GO 12462
12462: DISABLE
12463: LD_INT 0
12465: PPUSH
// begin enable ;
12466: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12467: LD_ADDR_VAR 0 1
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: LD_INT 24
12497: PUSH
12498: LD_INT 990
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 15
12523: DIFF
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12600
// begin ComFree ( i ) ;
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL_OW 139
// SetSide ( i , 1 ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_EXP 14
12558: PPUSH
12559: CALL_OW 296
12563: PUSH
12564: LD_INT 14
12566: LESS
12567: IFFALSE 12598
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_EXP 14
12578: PPUSH
12579: CALL_OW 250
12583: PPUSH
12584: LD_EXP 14
12588: PPUSH
12589: CALL_OW 251
12593: PPUSH
12594: CALL_OW 114
// end ;
12598: GO 12525
12600: POP
12601: POP
// end ;
12602: PPOPN 1
12604: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12605: LD_INT 22
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 34
12617: PUSH
12618: LD_INT 12
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: IFFALSE 12715
12635: GO 12637
12637: DISABLE
12638: LD_INT 0
12640: PPUSH
// begin enable ;
12641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12642: LD_ADDR_VAR 0 1
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 4
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 34
12659: PUSH
12660: LD_INT 12
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: PUSH
12676: FOR_IN
12677: IFFALSE 12713
// if GetDistUnits ( i , JMM ) < 6 then
12679: LD_VAR 0 1
12683: PPUSH
12684: LD_EXP 14
12688: PPUSH
12689: CALL_OW 296
12693: PUSH
12694: LD_INT 6
12696: LESS
12697: IFFALSE 12711
// SetSide ( i , 7 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 7
12706: PPUSH
12707: CALL_OW 235
12711: GO 12676
12713: POP
12714: POP
// end ;
12715: PPOPN 1
12717: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12718: LD_EXP 6
12722: PUSH
12723: LD_INT 19
12725: PPUSH
12726: LD_INT 22
12728: PUSH
12729: LD_INT 7
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 21
12738: PUSH
12739: LD_INT 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 71
12754: NOT
12755: AND
12756: PUSH
12757: LD_INT 3
12759: PPUSH
12760: CALL_OW 469
12764: NOT
12765: AND
12766: PUSH
12767: LD_INT 5
12769: PPUSH
12770: CALL_OW 469
12774: NOT
12775: AND
12776: IFFALSE 14402
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
// begin m1 := false ;
12788: LD_ADDR_VAR 0 3
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// m2 := false ;
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// m3 := false ;
12804: LD_ADDR_VAR 0 5
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: LD_EXP 3
12821: PPUSH
12822: LD_INT 22
12824: PUSH
12825: LD_INT 4
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 21
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 72
12850: PUSH
12851: LD_INT 0
12853: EQUAL
12854: ST_TO_ADDR
// if not all_taken then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 13001
// case query ( Q1 ) of 1 :
12862: LD_STRING Q1
12864: PPUSH
12865: CALL_OW 97
12869: PUSH
12870: LD_INT 1
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 12989
12878: POP
// begin repeat wait ( 0 0$1 ) ;
12879: LD_INT 35
12881: PPUSH
12882: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12886: LD_EXP 3
12890: PPUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 72
12919: PUSH
12920: LD_INT 0
12922: EQUAL
12923: PUSH
12924: LD_INT 19
12926: PPUSH
12927: LD_INT 22
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 21
12939: PUSH
12940: LD_INT 1
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 71
12955: NOT
12956: AND
12957: PUSH
12958: LD_INT 3
12960: PPUSH
12961: CALL_OW 469
12965: NOT
12966: AND
12967: PUSH
12968: LD_INT 5
12970: PPUSH
12971: CALL_OW 469
12975: NOT
12976: AND
12977: IFFALSE 12879
// all_taken := true ;
12979: LD_ADDR_VAR 0 1
12983: PUSH
12984: LD_INT 1
12986: ST_TO_ADDR
// end ; 2 :
12987: GO 13001
12989: LD_INT 2
12991: DOUBLE
12992: EQUAL
12993: IFTRUE 12997
12995: GO 13000
12997: POP
// ; end ;
12998: GO 13001
13000: POP
// if team_kill_counter then
13001: LD_EXP 9
13005: IFFALSE 13021
// Say ( JMM , D5-JMM-1 ) else
13007: LD_EXP 14
13011: PPUSH
13012: LD_STRING D5-JMM-1
13014: PPUSH
13015: CALL_OW 88
13019: GO 13033
// Say ( JMM , D5-JMM-1a ) ;
13021: LD_EXP 14
13025: PPUSH
13026: LD_STRING D5-JMM-1a
13028: PPUSH
13029: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13033: LD_INT 22
13035: PUSH
13036: LD_INT 7
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 23
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: PUSH
13073: LD_EXP 14
13077: PUSH
13078: LD_EXP 15
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: DIFF
13087: PUSH
13088: LD_INT 10
13090: GREATEREQUAL
13091: IFFALSE 13100
// SetAchievement ( ACH_TEAM ) ;
13093: LD_STRING ACH_TEAM
13095: PPUSH
13096: CALL_OW 543
// if not invis_used then
13100: LD_EXP 12
13104: NOT
13105: IFFALSE 13121
// begin wait ( 3 ) ;
13107: LD_INT 3
13109: PPUSH
13110: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13114: LD_STRING ACH_NOINVIS
13116: PPUSH
13117: CALL_OW 543
// end ; if not alert then
13121: LD_EXP 13
13125: NOT
13126: IFFALSE 13142
// begin wait ( 3 ) ;
13128: LD_INT 3
13130: PPUSH
13131: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13135: LD_STRING ACH_ALARM
13137: PPUSH
13138: CALL_OW 543
// end ; if tick < 15 15$00 then
13142: LD_OWVAR 1
13146: PUSH
13147: LD_INT 31500
13149: LESS
13150: IFFALSE 13166
// begin wait ( 3 ) ;
13152: LD_INT 3
13154: PPUSH
13155: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13159: LD_STRING ACH_ASPEED_16
13161: PPUSH
13162: CALL_OW 543
// end ; if all_taken then
13166: LD_VAR 0 1
13170: IFFALSE 13192
// begin AddMedal ( All , 1 ) ;
13172: LD_STRING All
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 101
// m1 := true ;
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// end else
13190: GO 13203
// AddMedal ( All , - 1 ) ;
13192: LD_STRING All
13194: PPUSH
13195: LD_INT 1
13197: NEG
13198: PPUSH
13199: CALL_OW 101
// if team_kill_counter then
13203: LD_EXP 9
13207: IFFALSE 13222
// AddMedal ( Save , - 1 ) else
13209: LD_STRING Save
13211: PPUSH
13212: LD_INT 1
13214: NEG
13215: PPUSH
13216: CALL_OW 101
13220: GO 13240
// begin AddMedal ( Save , 1 ) ;
13222: LD_STRING Save
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 101
// m2 := true ;
13232: LD_ADDR_VAR 0 4
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13240: LD_EXP 8
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: PUSH
13263: LD_OWVAR 67
13267: ARRAY
13268: GREATEREQUAL
13269: IFFALSE 13284
// AddMedal ( Friendship , - 1 ) else
13271: LD_STRING Friendship
13273: PPUSH
13274: LD_INT 1
13276: NEG
13277: PPUSH
13278: CALL_OW 101
13282: GO 13302
// begin AddMedal ( Friendship , 1 ) ;
13284: LD_STRING Friendship
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 101
// m3 := true ;
13294: LD_ADDR_VAR 0 5
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13302: LD_VAR 0 3
13306: PUSH
13307: LD_VAR 0 4
13311: AND
13312: PUSH
13313: LD_VAR 0 5
13317: AND
13318: PUSH
13319: LD_OWVAR 67
13323: PUSH
13324: LD_INT 3
13326: GREATEREQUAL
13327: AND
13328: IFFALSE 13340
// SetAchievementEX ( ACH_AMER , 16 ) ;
13330: LD_STRING ACH_AMER
13332: PPUSH
13333: LD_INT 16
13335: PPUSH
13336: CALL_OW 564
// GiveMedals ( MAIN ) ;
13340: LD_STRING MAIN
13342: PPUSH
13343: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13347: LD_ADDR_VAR 0 2
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 7
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 1
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 25
13387: PUSH
13388: LD_INT 3
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 4
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 25
13417: PUSH
13418: LD_INT 8
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 25
13427: PUSH
13428: LD_INT 9
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13457: LD_VAR 0 2
13461: PUSH
13462: LD_EXP 15
13466: ADD
13467: PPUSH
13468: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13472: LD_EXP 14
13476: PPUSH
13477: LD_STRING 12a_JMM
13479: PPUSH
13480: CALL_OW 38
// if IsLive ( Roth ) then
13484: LD_EXP 15
13488: PPUSH
13489: CALL_OW 300
13493: IFFALSE 13507
// SaveCharacters ( Roth , 12a_Roth ) ;
13495: LD_EXP 15
13499: PPUSH
13500: LD_STRING 12a_Roth
13502: PPUSH
13503: CALL_OW 38
// if Lisa in tmp then
13507: LD_EXP 23
13511: PUSH
13512: LD_VAR 0 2
13516: IN
13517: IFFALSE 13533
// SaveCharacters ( Lisa , 12a_Lisa ) else
13519: LD_EXP 23
13523: PPUSH
13524: LD_STRING 12a_Lisa
13526: PPUSH
13527: CALL_OW 38
13531: GO 13551
// if Lisa then
13533: LD_EXP 23
13537: IFFALSE 13551
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13539: LD_EXP 23
13543: PPUSH
13544: LD_STRING 12p_Lisa
13546: PPUSH
13547: CALL_OW 38
// if Donaldson in tmp then
13551: LD_EXP 24
13555: PUSH
13556: LD_VAR 0 2
13560: IN
13561: IFFALSE 13577
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13563: LD_EXP 24
13567: PPUSH
13568: LD_STRING 12a_Donaldson
13570: PPUSH
13571: CALL_OW 38
13575: GO 13595
// if Donaldson then
13577: LD_EXP 24
13581: IFFALSE 13595
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13583: LD_EXP 24
13587: PPUSH
13588: LD_STRING 12p_Donaldson
13590: PPUSH
13591: CALL_OW 38
// if Bobby in tmp then
13595: LD_EXP 25
13599: PUSH
13600: LD_VAR 0 2
13604: IN
13605: IFFALSE 13621
// SaveCharacters ( Bobby , 12a_Bobby ) else
13607: LD_EXP 25
13611: PPUSH
13612: LD_STRING 12a_Bobby
13614: PPUSH
13615: CALL_OW 38
13619: GO 13639
// if Bobby then
13621: LD_EXP 25
13625: IFFALSE 13639
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13627: LD_EXP 25
13631: PPUSH
13632: LD_STRING 12p_Bobby
13634: PPUSH
13635: CALL_OW 38
// if Cyrus in tmp then
13639: LD_EXP 26
13643: PUSH
13644: LD_VAR 0 2
13648: IN
13649: IFFALSE 13665
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING 12a_Cyrus
13658: PPUSH
13659: CALL_OW 38
13663: GO 13683
// if Cyrus then
13665: LD_EXP 26
13669: IFFALSE 13683
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13671: LD_EXP 26
13675: PPUSH
13676: LD_STRING 12p_Cyrus
13678: PPUSH
13679: CALL_OW 38
// if Denis in tmp then
13683: LD_EXP 27
13687: PUSH
13688: LD_VAR 0 2
13692: IN
13693: IFFALSE 13707
// SaveCharacters ( Denis , 12a_Denis ) ;
13695: LD_EXP 27
13699: PPUSH
13700: LD_STRING 12a_Denis
13702: PPUSH
13703: CALL_OW 38
// if Brown in tmp then
13707: LD_EXP 28
13711: PUSH
13712: LD_VAR 0 2
13716: IN
13717: IFFALSE 13733
// SaveCharacters ( Brown , 12a_Brown ) else
13719: LD_EXP 28
13723: PPUSH
13724: LD_STRING 12a_Brown
13726: PPUSH
13727: CALL_OW 38
13731: GO 13757
// if Brown in tmp then
13733: LD_EXP 28
13737: PUSH
13738: LD_VAR 0 2
13742: IN
13743: IFFALSE 13757
// SaveCharacters ( Brown , 12p_Brown ) ;
13745: LD_EXP 28
13749: PPUSH
13750: LD_STRING 12p_Brown
13752: PPUSH
13753: CALL_OW 38
// if Gladstone in tmp then
13757: LD_EXP 29
13761: PUSH
13762: LD_VAR 0 2
13766: IN
13767: IFFALSE 13783
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13769: LD_EXP 29
13773: PPUSH
13774: LD_STRING 12a_Gladstone
13776: PPUSH
13777: CALL_OW 38
13781: GO 13801
// if Gladstone then
13783: LD_EXP 29
13787: IFFALSE 13801
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13789: LD_EXP 29
13793: PPUSH
13794: LD_STRING 12p_Gladstone
13796: PPUSH
13797: CALL_OW 38
// if Houten in tmp then
13801: LD_EXP 30
13805: PUSH
13806: LD_VAR 0 2
13810: IN
13811: IFFALSE 13827
// SaveCharacters ( Houten , 12a_Houten ) else
13813: LD_EXP 30
13817: PPUSH
13818: LD_STRING 12a_Houten
13820: PPUSH
13821: CALL_OW 38
13825: GO 13845
// if Houten then
13827: LD_EXP 30
13831: IFFALSE 13845
// SaveCharacters ( Houten , 12p_Houten ) ;
13833: LD_EXP 30
13837: PPUSH
13838: LD_STRING 12p_Houten
13840: PPUSH
13841: CALL_OW 38
// if Cornel in tmp then
13845: LD_EXP 31
13849: PUSH
13850: LD_VAR 0 2
13854: IN
13855: IFFALSE 13871
// SaveCharacters ( Cornel , 12a_Cornell ) else
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING 12a_Cornell
13864: PPUSH
13865: CALL_OW 38
13869: GO 13889
// if Cornel then
13871: LD_EXP 31
13875: IFFALSE 13889
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13877: LD_EXP 31
13881: PPUSH
13882: LD_STRING 12p_Cornell
13884: PPUSH
13885: CALL_OW 38
// if Gary in tmp then
13889: LD_EXP 32
13893: PUSH
13894: LD_VAR 0 2
13898: IN
13899: IFFALSE 13915
// SaveCharacters ( Gary , 12a_Gary ) else
13901: LD_EXP 32
13905: PPUSH
13906: LD_STRING 12a_Gary
13908: PPUSH
13909: CALL_OW 38
13913: GO 13933
// if Gary then
13915: LD_EXP 32
13919: IFFALSE 13933
// SaveCharacters ( Gary , 12p_Gary ) ;
13921: LD_EXP 32
13925: PPUSH
13926: LD_STRING 12p_Gary
13928: PPUSH
13929: CALL_OW 38
// if Frank in tmp then
13933: LD_EXP 33
13937: PUSH
13938: LD_VAR 0 2
13942: IN
13943: IFFALSE 13957
// SaveCharacters ( Frank , 12a_Frank ) ;
13945: LD_EXP 33
13949: PPUSH
13950: LD_STRING 12a_Frank
13952: PPUSH
13953: CALL_OW 38
// if Kikuchi in tmp then
13957: LD_EXP 34
13961: PUSH
13962: LD_VAR 0 2
13966: IN
13967: IFFALSE 13983
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING 12a_Kikuchi
13976: PPUSH
13977: CALL_OW 38
13981: GO 14001
// if Kikuchi then
13983: LD_EXP 34
13987: IFFALSE 14001
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13989: LD_EXP 34
13993: PPUSH
13994: LD_STRING 12p_Kikuchi
13996: PPUSH
13997: CALL_OW 38
// if Simms in tmp then
14001: LD_EXP 35
14005: PUSH
14006: LD_VAR 0 2
14010: IN
14011: IFFALSE 14025
// SaveCharacters ( Simms , 12a_Simms ) ;
14013: LD_EXP 35
14017: PPUSH
14018: LD_STRING 12a_Simms
14020: PPUSH
14021: CALL_OW 38
// if Joan in tmp then
14025: LD_EXP 36
14029: PUSH
14030: LD_VAR 0 2
14034: IN
14035: IFFALSE 14049
// SaveCharacters ( Joan , 12a_Joan ) ;
14037: LD_EXP 36
14041: PPUSH
14042: LD_STRING 12a_Joan
14044: PPUSH
14045: CALL_OW 38
// if DeltaDoctor in tmp then
14049: LD_EXP 37
14053: PUSH
14054: LD_VAR 0 2
14058: IN
14059: IFFALSE 14073
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14061: LD_EXP 37
14065: PPUSH
14066: LD_STRING 12a_DeltaDoctor
14068: PPUSH
14069: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_VAR 0 2
14082: PUSH
14083: LD_EXP 14
14087: PUSH
14088: LD_EXP 15
14092: PUSH
14093: LD_EXP 23
14097: PUSH
14098: LD_EXP 24
14102: PUSH
14103: LD_EXP 25
14107: PUSH
14108: LD_EXP 26
14112: PUSH
14113: LD_EXP 27
14117: PUSH
14118: LD_EXP 28
14122: PUSH
14123: LD_EXP 29
14127: PUSH
14128: LD_EXP 30
14132: PUSH
14133: LD_EXP 31
14137: PUSH
14138: LD_EXP 32
14142: PUSH
14143: LD_EXP 33
14147: PUSH
14148: LD_EXP 34
14152: PUSH
14153: LD_EXP 35
14157: PUSH
14158: LD_EXP 36
14162: PUSH
14163: LD_EXP 37
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: DIFF
14187: ST_TO_ADDR
// if tmp then
14188: LD_VAR 0 2
14192: IFFALSE 14206
// SaveCharacters ( tmp , 12a_others ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_STRING 12a_others
14201: PPUSH
14202: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_INT 21
14213: PUSH
14214: LD_INT 1
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 23
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 4
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: PUSH
14269: LD_EXP 14
14273: PUSH
14274: LD_EXP 15
14278: PUSH
14279: LD_EXP 23
14283: PUSH
14284: LD_EXP 24
14288: PUSH
14289: LD_EXP 25
14293: PUSH
14294: LD_EXP 26
14298: PUSH
14299: LD_EXP 27
14303: PUSH
14304: LD_EXP 28
14308: PUSH
14309: LD_EXP 29
14313: PUSH
14314: LD_EXP 30
14318: PUSH
14319: LD_EXP 31
14323: PUSH
14324: LD_EXP 32
14328: PUSH
14329: LD_EXP 33
14333: PUSH
14334: LD_EXP 34
14338: PUSH
14339: LD_EXP 35
14343: PUSH
14344: LD_EXP 36
14348: PUSH
14349: LD_EXP 37
14353: PUSH
14354: LD_EXP 16
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: DIFF
14379: ST_TO_ADDR
// if tmp then
14380: LD_VAR 0 2
14384: IFFALSE 14398
// SaveCharacters ( tmp , 12p_others ) ;
14386: LD_VAR 0 2
14390: PPUSH
14391: LD_STRING 12p_others
14393: PPUSH
14394: CALL_OW 38
// YouWin ;
14398: CALL_OW 103
// end ; end_of_file
14402: PPOPN 5
14404: END
// on SailEvent ( event ) do var tmp ;
14405: LD_INT 0
14407: PPUSH
// begin if event = 1 then
14408: LD_VAR 0 1
14412: PUSH
14413: LD_INT 1
14415: EQUAL
14416: IFFALSE 14489
// begin if not mobile_patrol then
14418: LD_EXP 17
14422: NOT
14423: IFFALSE 14427
// exit ;
14425: GO 14489
// tmp := mobile_patrol [ mobile_patrol ] ;
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: LD_EXP 17
14436: PUSH
14437: LD_EXP 17
14441: ARRAY
14442: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14443: LD_ADDR_EXP 17
14447: PUSH
14448: LD_EXP 17
14452: PPUSH
14453: LD_EXP 17
14457: PPUSH
14458: CALL_OW 3
14462: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14463: LD_VAR 0 2
14467: PPUSH
14468: LD_EXP 18
14472: PUSH
14473: LD_EXP 17
14477: PUSH
14478: LD_INT 1
14480: PLUS
14481: ARRAY
14482: PPUSH
14483: EMPTY
14484: PPUSH
14485: CALL 6669 0 3
// end ; end ;
14489: PPOPN 2
14491: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14492: LD_VAR 0 1
14496: PUSH
14497: LD_EXP 14
14501: EQUAL
14502: IFFALSE 14511
// YouLost ( JMM ) ;
14504: LD_STRING JMM
14506: PPUSH
14507: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 255
14520: PUSH
14521: LD_INT 7
14523: EQUAL
14524: PUSH
14525: LD_VAR 0 1
14529: PPUSH
14530: CALL_OW 264
14534: PUSH
14535: LD_INT 12
14537: EQUAL
14538: AND
14539: IFFALSE 14548
// YouLost ( Artifact ) ;
14541: LD_STRING Artifact
14543: PPUSH
14544: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14548: LD_VAR 0 1
14552: PPUSH
14553: CALL_OW 255
14557: PUSH
14558: LD_INT 7
14560: EQUAL
14561: PUSH
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 247
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: AND
14576: PUSH
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 15
14586: EQUAL
14587: OR
14588: IFFALSE 14604
// team_kill_counter := team_kill_counter + 1 ;
14590: LD_ADDR_EXP 9
14594: PUSH
14595: LD_EXP 9
14599: PUSH
14600: LD_INT 1
14602: PLUS
14603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// friends_kill_counter := friends_kill_counter + 1 ;
14634: LD_ADDR_EXP 8
14638: PUSH
14639: LD_EXP 8
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 255
14657: PUSH
14658: LD_INT 1
14660: NONEQUAL
14661: IFFALSE 14665
// exit ;
14663: GO 14742
// if GetControl ( un ) = control_remote then
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 263
14674: PUSH
14675: LD_INT 2
14677: EQUAL
14678: IFFALSE 14696
// defenders := defenders diff un ;
14680: LD_ADDR_EXP 20
14684: PUSH
14685: LD_EXP 20
14689: PUSH
14690: LD_VAR 0 1
14694: DIFF
14695: ST_TO_ADDR
// if not un in defenders then
14696: LD_VAR 0 1
14700: PUSH
14701: LD_EXP 20
14705: IN
14706: NOT
14707: IFFALSE 14742
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14709: LD_ADDR_EXP 21
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 250
14723: PUSH
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 251
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: ST_TO_ADDR
// Defend ;
14738: CALL 2791 0 0
// end ; end ;
14742: PPOPN 1
14744: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 255
14754: PUSH
14755: LD_INT 1
14757: NONEQUAL
14758: IFFALSE 14762
// exit ;
14760: GO 14786
// if GetControl ( veh ) = control_remote then
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 263
14771: PUSH
14772: LD_INT 2
14774: EQUAL
14775: IFFALSE 14786
// Connect ( veh ) ;
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL 40904 0 1
// end ;
14786: PPOPN 2
14788: END
// on UnitGoesToRed ( un ) do var i , veh ;
14789: LD_INT 0
14791: PPUSH
14792: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 1
14805: EQUAL
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 263
14816: PUSH
14817: LD_INT 2
14819: EQUAL
14820: AND
14821: IFFALSE 14832
// ComUnlink ( un ) ;
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 136
// if un = ambar0 then
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 18
14839: EQUAL
14840: IFFALSE 14950
// begin uc_side := 1 ;
14842: LD_ADDR_OWVAR 20
14846: PUSH
14847: LD_INT 1
14849: ST_TO_ADDR
// uc_nation := 1 ;
14850: LD_ADDR_OWVAR 21
14854: PUSH
14855: LD_INT 1
14857: ST_TO_ADDR
// for i = 1 to 6 do
14858: LD_ADDR_VAR 0 2
14862: PUSH
14863: DOUBLE
14864: LD_INT 1
14866: DEC
14867: ST_TO_ADDR
14868: LD_INT 6
14870: PUSH
14871: FOR_TO
14872: IFFALSE 14948
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14874: LD_INT 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: LD_INT 3
14882: PPUSH
14883: LD_INT 4
14885: PPUSH
14886: LD_INT 100
14888: PPUSH
14889: CALL 37811 0 5
// veh := CreateVehicle ;
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: CALL_OW 45
14902: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_INT 1
14910: PPUSH
14911: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14915: LD_VAR 0 3
14919: PPUSH
14920: LD_INT 25
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 49
// defenders := defenders ^ veh ;
14930: LD_ADDR_EXP 20
14934: PUSH
14935: LD_EXP 20
14939: PUSH
14940: LD_VAR 0 3
14944: ADD
14945: ST_TO_ADDR
// end ;
14946: GO 14871
14948: POP
14949: POP
// end ; end ;
14950: PPOPN 3
14952: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14953: LD_VAR 0 2
14957: PUSH
14958: LD_EXP 16
14962: EQUAL
14963: IFFALSE 14974
// RemoveUnit ( Powell ) ;
14965: LD_EXP 16
14969: PPUSH
14970: CALL_OW 64
// end ;
14974: PPOPN 2
14976: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: CALL 29048 0 1
// end ; end_of_file
14986: PPOPN 1
14988: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14989: LD_INT 0
14991: PPUSH
// ar_miner := 81 ;
14992: LD_ADDR_EXP 45
14996: PUSH
14997: LD_INT 81
14999: ST_TO_ADDR
// ar_crane := 88 ;
15000: LD_ADDR_EXP 44
15004: PUSH
15005: LD_INT 88
15007: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15008: LD_ADDR_EXP 39
15012: PUSH
15013: LD_INT 89
15015: ST_TO_ADDR
// us_hack := 99 ;
15016: LD_ADDR_EXP 40
15020: PUSH
15021: LD_INT 99
15023: ST_TO_ADDR
// us_artillery := 97 ;
15024: LD_ADDR_EXP 41
15028: PUSH
15029: LD_INT 97
15031: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15032: LD_ADDR_EXP 42
15036: PUSH
15037: LD_INT 91
15039: ST_TO_ADDR
// ar_mortar := 92 ;
15040: LD_ADDR_EXP 43
15044: PUSH
15045: LD_INT 92
15047: ST_TO_ADDR
// ru_radar := 98 ;
15048: LD_ADDR_EXP 38
15052: PUSH
15053: LD_INT 98
15055: ST_TO_ADDR
// tech_Artillery := 80 ;
15056: LD_ADDR_EXP 46
15060: PUSH
15061: LD_INT 80
15063: ST_TO_ADDR
// tech_RadMat := 81 ;
15064: LD_ADDR_EXP 47
15068: PUSH
15069: LD_INT 81
15071: ST_TO_ADDR
// tech_BasicTools := 82 ;
15072: LD_ADDR_EXP 48
15076: PUSH
15077: LD_INT 82
15079: ST_TO_ADDR
// tech_Cargo := 83 ;
15080: LD_ADDR_EXP 49
15084: PUSH
15085: LD_INT 83
15087: ST_TO_ADDR
// tech_Track := 84 ;
15088: LD_ADDR_EXP 50
15092: PUSH
15093: LD_INT 84
15095: ST_TO_ADDR
// tech_Crane := 85 ;
15096: LD_ADDR_EXP 51
15100: PUSH
15101: LD_INT 85
15103: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15104: LD_ADDR_EXP 52
15108: PUSH
15109: LD_INT 86
15111: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15112: LD_ADDR_EXP 53
15116: PUSH
15117: LD_INT 87
15119: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
15120: LD_ADDR_EXP 54
15124: PUSH
15125: LD_INT 88
15127: ST_TO_ADDR
// class_mastodont := 31 ;
15128: LD_ADDR_EXP 55
15132: PUSH
15133: LD_INT 31
15135: ST_TO_ADDR
// class_horse := 21 ;
15136: LD_ADDR_EXP 56
15140: PUSH
15141: LD_INT 21
15143: ST_TO_ADDR
// end ;
15144: LD_VAR 0 1
15148: RET
// every 1 do
15149: GO 15151
15151: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15152: CALL 14989 0 0
15156: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15157: LD_INT 0
15159: PPUSH
// if p2 = 100 then
15160: LD_VAR 0 2
15164: PUSH
15165: LD_INT 100
15167: EQUAL
15168: IFFALSE 16171
// begin if not StreamModeActive then
15170: LD_EXP 57
15174: NOT
15175: IFFALSE 15185
// StreamModeActive := true ;
15177: LD_ADDR_EXP 57
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if p3 = 0 then
15185: LD_VAR 0 3
15189: PUSH
15190: LD_INT 0
15192: EQUAL
15193: IFFALSE 15199
// InitStreamMode ;
15195: CALL 16331 0 0
// if p3 = 1 then
15199: LD_VAR 0 3
15203: PUSH
15204: LD_INT 1
15206: EQUAL
15207: IFFALSE 15217
// sRocket := true ;
15209: LD_ADDR_EXP 62
15213: PUSH
15214: LD_INT 1
15216: ST_TO_ADDR
// if p3 = 2 then
15217: LD_VAR 0 3
15221: PUSH
15222: LD_INT 2
15224: EQUAL
15225: IFFALSE 15235
// sSpeed := true ;
15227: LD_ADDR_EXP 61
15231: PUSH
15232: LD_INT 1
15234: ST_TO_ADDR
// if p3 = 3 then
15235: LD_VAR 0 3
15239: PUSH
15240: LD_INT 3
15242: EQUAL
15243: IFFALSE 15253
// sEngine := true ;
15245: LD_ADDR_EXP 63
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// if p3 = 4 then
15253: LD_VAR 0 3
15257: PUSH
15258: LD_INT 4
15260: EQUAL
15261: IFFALSE 15271
// sSpec := true ;
15263: LD_ADDR_EXP 60
15267: PUSH
15268: LD_INT 1
15270: ST_TO_ADDR
// if p3 = 5 then
15271: LD_VAR 0 3
15275: PUSH
15276: LD_INT 5
15278: EQUAL
15279: IFFALSE 15289
// sLevel := true ;
15281: LD_ADDR_EXP 64
15285: PUSH
15286: LD_INT 1
15288: ST_TO_ADDR
// if p3 = 6 then
15289: LD_VAR 0 3
15293: PUSH
15294: LD_INT 6
15296: EQUAL
15297: IFFALSE 15307
// sArmoury := true ;
15299: LD_ADDR_EXP 65
15303: PUSH
15304: LD_INT 1
15306: ST_TO_ADDR
// if p3 = 7 then
15307: LD_VAR 0 3
15311: PUSH
15312: LD_INT 7
15314: EQUAL
15315: IFFALSE 15325
// sRadar := true ;
15317: LD_ADDR_EXP 66
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// if p3 = 8 then
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 8
15332: EQUAL
15333: IFFALSE 15343
// sBunker := true ;
15335: LD_ADDR_EXP 67
15339: PUSH
15340: LD_INT 1
15342: ST_TO_ADDR
// if p3 = 9 then
15343: LD_VAR 0 3
15347: PUSH
15348: LD_INT 9
15350: EQUAL
15351: IFFALSE 15361
// sHack := true ;
15353: LD_ADDR_EXP 68
15357: PUSH
15358: LD_INT 1
15360: ST_TO_ADDR
// if p3 = 10 then
15361: LD_VAR 0 3
15365: PUSH
15366: LD_INT 10
15368: EQUAL
15369: IFFALSE 15379
// sFire := true ;
15371: LD_ADDR_EXP 69
15375: PUSH
15376: LD_INT 1
15378: ST_TO_ADDR
// if p3 = 11 then
15379: LD_VAR 0 3
15383: PUSH
15384: LD_INT 11
15386: EQUAL
15387: IFFALSE 15397
// sRefresh := true ;
15389: LD_ADDR_EXP 70
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// if p3 = 12 then
15397: LD_VAR 0 3
15401: PUSH
15402: LD_INT 12
15404: EQUAL
15405: IFFALSE 15415
// sExp := true ;
15407: LD_ADDR_EXP 71
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// if p3 = 13 then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 13
15422: EQUAL
15423: IFFALSE 15433
// sDepot := true ;
15425: LD_ADDR_EXP 72
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// if p3 = 14 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_INT 14
15440: EQUAL
15441: IFFALSE 15451
// sFlag := true ;
15443: LD_ADDR_EXP 73
15447: PUSH
15448: LD_INT 1
15450: ST_TO_ADDR
// if p3 = 15 then
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 15
15458: EQUAL
15459: IFFALSE 15469
// sKamikadze := true ;
15461: LD_ADDR_EXP 81
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// if p3 = 16 then
15469: LD_VAR 0 3
15473: PUSH
15474: LD_INT 16
15476: EQUAL
15477: IFFALSE 15487
// sTroll := true ;
15479: LD_ADDR_EXP 82
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// if p3 = 17 then
15487: LD_VAR 0 3
15491: PUSH
15492: LD_INT 17
15494: EQUAL
15495: IFFALSE 15505
// sSlow := true ;
15497: LD_ADDR_EXP 83
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// if p3 = 18 then
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 18
15512: EQUAL
15513: IFFALSE 15523
// sLack := true ;
15515: LD_ADDR_EXP 84
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// if p3 = 19 then
15523: LD_VAR 0 3
15527: PUSH
15528: LD_INT 19
15530: EQUAL
15531: IFFALSE 15541
// sTank := true ;
15533: LD_ADDR_EXP 86
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// if p3 = 20 then
15541: LD_VAR 0 3
15545: PUSH
15546: LD_INT 20
15548: EQUAL
15549: IFFALSE 15559
// sRemote := true ;
15551: LD_ADDR_EXP 87
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// if p3 = 21 then
15559: LD_VAR 0 3
15563: PUSH
15564: LD_INT 21
15566: EQUAL
15567: IFFALSE 15577
// sPowell := true ;
15569: LD_ADDR_EXP 88
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// if p3 = 22 then
15577: LD_VAR 0 3
15581: PUSH
15582: LD_INT 22
15584: EQUAL
15585: IFFALSE 15595
// sTeleport := true ;
15587: LD_ADDR_EXP 91
15591: PUSH
15592: LD_INT 1
15594: ST_TO_ADDR
// if p3 = 23 then
15595: LD_VAR 0 3
15599: PUSH
15600: LD_INT 23
15602: EQUAL
15603: IFFALSE 15613
// sOilTower := true ;
15605: LD_ADDR_EXP 93
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// if p3 = 24 then
15613: LD_VAR 0 3
15617: PUSH
15618: LD_INT 24
15620: EQUAL
15621: IFFALSE 15631
// sShovel := true ;
15623: LD_ADDR_EXP 94
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// if p3 = 25 then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 25
15638: EQUAL
15639: IFFALSE 15649
// sSheik := true ;
15641: LD_ADDR_EXP 95
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// if p3 = 26 then
15649: LD_VAR 0 3
15653: PUSH
15654: LD_INT 26
15656: EQUAL
15657: IFFALSE 15667
// sEarthquake := true ;
15659: LD_ADDR_EXP 97
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// if p3 = 27 then
15667: LD_VAR 0 3
15671: PUSH
15672: LD_INT 27
15674: EQUAL
15675: IFFALSE 15685
// sAI := true ;
15677: LD_ADDR_EXP 98
15681: PUSH
15682: LD_INT 1
15684: ST_TO_ADDR
// if p3 = 28 then
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 28
15692: EQUAL
15693: IFFALSE 15703
// sCargo := true ;
15695: LD_ADDR_EXP 101
15699: PUSH
15700: LD_INT 1
15702: ST_TO_ADDR
// if p3 = 29 then
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 29
15710: EQUAL
15711: IFFALSE 15721
// sDLaser := true ;
15713: LD_ADDR_EXP 102
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// if p3 = 30 then
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 30
15728: EQUAL
15729: IFFALSE 15739
// sExchange := true ;
15731: LD_ADDR_EXP 103
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// if p3 = 31 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 31
15746: EQUAL
15747: IFFALSE 15757
// sFac := true ;
15749: LD_ADDR_EXP 104
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
// if p3 = 32 then
15757: LD_VAR 0 3
15761: PUSH
15762: LD_INT 32
15764: EQUAL
15765: IFFALSE 15775
// sPower := true ;
15767: LD_ADDR_EXP 105
15771: PUSH
15772: LD_INT 1
15774: ST_TO_ADDR
// if p3 = 33 then
15775: LD_VAR 0 3
15779: PUSH
15780: LD_INT 33
15782: EQUAL
15783: IFFALSE 15793
// sRandom := true ;
15785: LD_ADDR_EXP 106
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// if p3 = 34 then
15793: LD_VAR 0 3
15797: PUSH
15798: LD_INT 34
15800: EQUAL
15801: IFFALSE 15811
// sShield := true ;
15803: LD_ADDR_EXP 107
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// if p3 = 35 then
15811: LD_VAR 0 3
15815: PUSH
15816: LD_INT 35
15818: EQUAL
15819: IFFALSE 15829
// sTime := true ;
15821: LD_ADDR_EXP 108
15825: PUSH
15826: LD_INT 1
15828: ST_TO_ADDR
// if p3 = 36 then
15829: LD_VAR 0 3
15833: PUSH
15834: LD_INT 36
15836: EQUAL
15837: IFFALSE 15847
// sTools := true ;
15839: LD_ADDR_EXP 109
15843: PUSH
15844: LD_INT 1
15846: ST_TO_ADDR
// if p3 = 101 then
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 101
15854: EQUAL
15855: IFFALSE 15865
// sSold := true ;
15857: LD_ADDR_EXP 74
15861: PUSH
15862: LD_INT 1
15864: ST_TO_ADDR
// if p3 = 102 then
15865: LD_VAR 0 3
15869: PUSH
15870: LD_INT 102
15872: EQUAL
15873: IFFALSE 15883
// sDiff := true ;
15875: LD_ADDR_EXP 75
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// if p3 = 103 then
15883: LD_VAR 0 3
15887: PUSH
15888: LD_INT 103
15890: EQUAL
15891: IFFALSE 15901
// sFog := true ;
15893: LD_ADDR_EXP 78
15897: PUSH
15898: LD_INT 1
15900: ST_TO_ADDR
// if p3 = 104 then
15901: LD_VAR 0 3
15905: PUSH
15906: LD_INT 104
15908: EQUAL
15909: IFFALSE 15919
// sReset := true ;
15911: LD_ADDR_EXP 79
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// if p3 = 105 then
15919: LD_VAR 0 3
15923: PUSH
15924: LD_INT 105
15926: EQUAL
15927: IFFALSE 15937
// sSun := true ;
15929: LD_ADDR_EXP 80
15933: PUSH
15934: LD_INT 1
15936: ST_TO_ADDR
// if p3 = 106 then
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 106
15944: EQUAL
15945: IFFALSE 15955
// sTiger := true ;
15947: LD_ADDR_EXP 76
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// if p3 = 107 then
15955: LD_VAR 0 3
15959: PUSH
15960: LD_INT 107
15962: EQUAL
15963: IFFALSE 15973
// sBomb := true ;
15965: LD_ADDR_EXP 77
15969: PUSH
15970: LD_INT 1
15972: ST_TO_ADDR
// if p3 = 108 then
15973: LD_VAR 0 3
15977: PUSH
15978: LD_INT 108
15980: EQUAL
15981: IFFALSE 15991
// sWound := true ;
15983: LD_ADDR_EXP 85
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// if p3 = 109 then
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 109
15998: EQUAL
15999: IFFALSE 16009
// sBetray := true ;
16001: LD_ADDR_EXP 89
16005: PUSH
16006: LD_INT 1
16008: ST_TO_ADDR
// if p3 = 110 then
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 110
16016: EQUAL
16017: IFFALSE 16027
// sContamin := true ;
16019: LD_ADDR_EXP 90
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// if p3 = 111 then
16027: LD_VAR 0 3
16031: PUSH
16032: LD_INT 111
16034: EQUAL
16035: IFFALSE 16045
// sOil := true ;
16037: LD_ADDR_EXP 92
16041: PUSH
16042: LD_INT 1
16044: ST_TO_ADDR
// if p3 = 112 then
16045: LD_VAR 0 3
16049: PUSH
16050: LD_INT 112
16052: EQUAL
16053: IFFALSE 16063
// sStu := true ;
16055: LD_ADDR_EXP 96
16059: PUSH
16060: LD_INT 1
16062: ST_TO_ADDR
// if p3 = 113 then
16063: LD_VAR 0 3
16067: PUSH
16068: LD_INT 113
16070: EQUAL
16071: IFFALSE 16081
// sBazooka := true ;
16073: LD_ADDR_EXP 99
16077: PUSH
16078: LD_INT 1
16080: ST_TO_ADDR
// if p3 = 114 then
16081: LD_VAR 0 3
16085: PUSH
16086: LD_INT 114
16088: EQUAL
16089: IFFALSE 16099
// sMortar := true ;
16091: LD_ADDR_EXP 100
16095: PUSH
16096: LD_INT 1
16098: ST_TO_ADDR
// if p3 = 115 then
16099: LD_VAR 0 3
16103: PUSH
16104: LD_INT 115
16106: EQUAL
16107: IFFALSE 16117
// sRanger := true ;
16109: LD_ADDR_EXP 110
16113: PUSH
16114: LD_INT 1
16116: ST_TO_ADDR
// if p3 = 116 then
16117: LD_VAR 0 3
16121: PUSH
16122: LD_INT 116
16124: EQUAL
16125: IFFALSE 16135
// sComputer := true ;
16127: LD_ADDR_EXP 111
16131: PUSH
16132: LD_INT 1
16134: ST_TO_ADDR
// if p3 = 117 then
16135: LD_VAR 0 3
16139: PUSH
16140: LD_INT 117
16142: EQUAL
16143: IFFALSE 16153
// s30 := true ;
16145: LD_ADDR_EXP 112
16149: PUSH
16150: LD_INT 1
16152: ST_TO_ADDR
// if p3 = 118 then
16153: LD_VAR 0 3
16157: PUSH
16158: LD_INT 118
16160: EQUAL
16161: IFFALSE 16171
// s60 := true ;
16163: LD_ADDR_EXP 113
16167: PUSH
16168: LD_INT 1
16170: ST_TO_ADDR
// end ; if p2 = 101 then
16171: LD_VAR 0 2
16175: PUSH
16176: LD_INT 101
16178: EQUAL
16179: IFFALSE 16307
// begin case p3 of 1 :
16181: LD_VAR 0 3
16185: PUSH
16186: LD_INT 1
16188: DOUBLE
16189: EQUAL
16190: IFTRUE 16194
16192: GO 16201
16194: POP
// hHackUnlimitedResources ; 2 :
16195: CALL 27903 0 0
16199: GO 16307
16201: LD_INT 2
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16216
16209: POP
// hHackSetLevel10 ; 3 :
16210: CALL 28036 0 0
16214: GO 16307
16216: LD_INT 3
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16231
16224: POP
// hHackSetLevel10YourUnits ; 4 :
16225: CALL 28121 0 0
16229: GO 16307
16231: LD_INT 4
16233: DOUBLE
16234: EQUAL
16235: IFTRUE 16239
16237: GO 16246
16239: POP
// hHackInvincible ; 5 :
16240: CALL 28569 0 0
16244: GO 16307
16246: LD_INT 5
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16254
16252: GO 16261
16254: POP
// hHackInvisible ; 6 :
16255: CALL 28680 0 0
16259: GO 16307
16261: LD_INT 6
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16276
16269: POP
// hHackChangeYourSide ; 7 :
16270: CALL 28737 0 0
16274: GO 16307
16276: LD_INT 7
16278: DOUBLE
16279: EQUAL
16280: IFTRUE 16284
16282: GO 16291
16284: POP
// hHackChangeUnitSide ; 8 :
16285: CALL 28779 0 0
16289: GO 16307
16291: LD_INT 8
16293: DOUBLE
16294: EQUAL
16295: IFTRUE 16299
16297: GO 16306
16299: POP
// hHackFog ; end ;
16300: CALL 28880 0 0
16304: GO 16307
16306: POP
// end ; end ;
16307: LD_VAR 0 7
16311: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16312: GO 16314
16314: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16315: LD_STRING initStreamRollete();
16317: PPUSH
16318: CALL_OW 559
// InitStreamMode ;
16322: CALL 16331 0 0
// DefineStreamItems ( ) ;
16326: CALL 16795 0 0
// end ;
16330: END
// function InitStreamMode ; begin
16331: LD_INT 0
16333: PPUSH
// streamModeActive := false ;
16334: LD_ADDR_EXP 57
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// normalCounter := 36 ;
16342: LD_ADDR_EXP 58
16346: PUSH
16347: LD_INT 36
16349: ST_TO_ADDR
// hardcoreCounter := 16 ;
16350: LD_ADDR_EXP 59
16354: PUSH
16355: LD_INT 16
16357: ST_TO_ADDR
// sRocket := false ;
16358: LD_ADDR_EXP 62
16362: PUSH
16363: LD_INT 0
16365: ST_TO_ADDR
// sSpeed := false ;
16366: LD_ADDR_EXP 61
16370: PUSH
16371: LD_INT 0
16373: ST_TO_ADDR
// sEngine := false ;
16374: LD_ADDR_EXP 63
16378: PUSH
16379: LD_INT 0
16381: ST_TO_ADDR
// sSpec := false ;
16382: LD_ADDR_EXP 60
16386: PUSH
16387: LD_INT 0
16389: ST_TO_ADDR
// sLevel := false ;
16390: LD_ADDR_EXP 64
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// sArmoury := false ;
16398: LD_ADDR_EXP 65
16402: PUSH
16403: LD_INT 0
16405: ST_TO_ADDR
// sRadar := false ;
16406: LD_ADDR_EXP 66
16410: PUSH
16411: LD_INT 0
16413: ST_TO_ADDR
// sBunker := false ;
16414: LD_ADDR_EXP 67
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// sHack := false ;
16422: LD_ADDR_EXP 68
16426: PUSH
16427: LD_INT 0
16429: ST_TO_ADDR
// sFire := false ;
16430: LD_ADDR_EXP 69
16434: PUSH
16435: LD_INT 0
16437: ST_TO_ADDR
// sRefresh := false ;
16438: LD_ADDR_EXP 70
16442: PUSH
16443: LD_INT 0
16445: ST_TO_ADDR
// sExp := false ;
16446: LD_ADDR_EXP 71
16450: PUSH
16451: LD_INT 0
16453: ST_TO_ADDR
// sDepot := false ;
16454: LD_ADDR_EXP 72
16458: PUSH
16459: LD_INT 0
16461: ST_TO_ADDR
// sFlag := false ;
16462: LD_ADDR_EXP 73
16466: PUSH
16467: LD_INT 0
16469: ST_TO_ADDR
// sKamikadze := false ;
16470: LD_ADDR_EXP 81
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// sTroll := false ;
16478: LD_ADDR_EXP 82
16482: PUSH
16483: LD_INT 0
16485: ST_TO_ADDR
// sSlow := false ;
16486: LD_ADDR_EXP 83
16490: PUSH
16491: LD_INT 0
16493: ST_TO_ADDR
// sLack := false ;
16494: LD_ADDR_EXP 84
16498: PUSH
16499: LD_INT 0
16501: ST_TO_ADDR
// sTank := false ;
16502: LD_ADDR_EXP 86
16506: PUSH
16507: LD_INT 0
16509: ST_TO_ADDR
// sRemote := false ;
16510: LD_ADDR_EXP 87
16514: PUSH
16515: LD_INT 0
16517: ST_TO_ADDR
// sPowell := false ;
16518: LD_ADDR_EXP 88
16522: PUSH
16523: LD_INT 0
16525: ST_TO_ADDR
// sTeleport := false ;
16526: LD_ADDR_EXP 91
16530: PUSH
16531: LD_INT 0
16533: ST_TO_ADDR
// sOilTower := false ;
16534: LD_ADDR_EXP 93
16538: PUSH
16539: LD_INT 0
16541: ST_TO_ADDR
// sShovel := false ;
16542: LD_ADDR_EXP 94
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// sSheik := false ;
16550: LD_ADDR_EXP 95
16554: PUSH
16555: LD_INT 0
16557: ST_TO_ADDR
// sEarthquake := false ;
16558: LD_ADDR_EXP 97
16562: PUSH
16563: LD_INT 0
16565: ST_TO_ADDR
// sAI := false ;
16566: LD_ADDR_EXP 98
16570: PUSH
16571: LD_INT 0
16573: ST_TO_ADDR
// sCargo := false ;
16574: LD_ADDR_EXP 101
16578: PUSH
16579: LD_INT 0
16581: ST_TO_ADDR
// sDLaser := false ;
16582: LD_ADDR_EXP 102
16586: PUSH
16587: LD_INT 0
16589: ST_TO_ADDR
// sExchange := false ;
16590: LD_ADDR_EXP 103
16594: PUSH
16595: LD_INT 0
16597: ST_TO_ADDR
// sFac := false ;
16598: LD_ADDR_EXP 104
16602: PUSH
16603: LD_INT 0
16605: ST_TO_ADDR
// sPower := false ;
16606: LD_ADDR_EXP 105
16610: PUSH
16611: LD_INT 0
16613: ST_TO_ADDR
// sRandom := false ;
16614: LD_ADDR_EXP 106
16618: PUSH
16619: LD_INT 0
16621: ST_TO_ADDR
// sShield := false ;
16622: LD_ADDR_EXP 107
16626: PUSH
16627: LD_INT 0
16629: ST_TO_ADDR
// sTime := false ;
16630: LD_ADDR_EXP 108
16634: PUSH
16635: LD_INT 0
16637: ST_TO_ADDR
// sTools := false ;
16638: LD_ADDR_EXP 109
16642: PUSH
16643: LD_INT 0
16645: ST_TO_ADDR
// sSold := false ;
16646: LD_ADDR_EXP 74
16650: PUSH
16651: LD_INT 0
16653: ST_TO_ADDR
// sDiff := false ;
16654: LD_ADDR_EXP 75
16658: PUSH
16659: LD_INT 0
16661: ST_TO_ADDR
// sFog := false ;
16662: LD_ADDR_EXP 78
16666: PUSH
16667: LD_INT 0
16669: ST_TO_ADDR
// sReset := false ;
16670: LD_ADDR_EXP 79
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// sSun := false ;
16678: LD_ADDR_EXP 80
16682: PUSH
16683: LD_INT 0
16685: ST_TO_ADDR
// sTiger := false ;
16686: LD_ADDR_EXP 76
16690: PUSH
16691: LD_INT 0
16693: ST_TO_ADDR
// sBomb := false ;
16694: LD_ADDR_EXP 77
16698: PUSH
16699: LD_INT 0
16701: ST_TO_ADDR
// sWound := false ;
16702: LD_ADDR_EXP 85
16706: PUSH
16707: LD_INT 0
16709: ST_TO_ADDR
// sBetray := false ;
16710: LD_ADDR_EXP 89
16714: PUSH
16715: LD_INT 0
16717: ST_TO_ADDR
// sContamin := false ;
16718: LD_ADDR_EXP 90
16722: PUSH
16723: LD_INT 0
16725: ST_TO_ADDR
// sOil := false ;
16726: LD_ADDR_EXP 92
16730: PUSH
16731: LD_INT 0
16733: ST_TO_ADDR
// sStu := false ;
16734: LD_ADDR_EXP 96
16738: PUSH
16739: LD_INT 0
16741: ST_TO_ADDR
// sBazooka := false ;
16742: LD_ADDR_EXP 99
16746: PUSH
16747: LD_INT 0
16749: ST_TO_ADDR
// sMortar := false ;
16750: LD_ADDR_EXP 100
16754: PUSH
16755: LD_INT 0
16757: ST_TO_ADDR
// sRanger := false ;
16758: LD_ADDR_EXP 110
16762: PUSH
16763: LD_INT 0
16765: ST_TO_ADDR
// sComputer := false ;
16766: LD_ADDR_EXP 111
16770: PUSH
16771: LD_INT 0
16773: ST_TO_ADDR
// s30 := false ;
16774: LD_ADDR_EXP 112
16778: PUSH
16779: LD_INT 0
16781: ST_TO_ADDR
// s60 := false ;
16782: LD_ADDR_EXP 113
16786: PUSH
16787: LD_INT 0
16789: ST_TO_ADDR
// end ;
16790: LD_VAR 0 1
16794: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16795: LD_INT 0
16797: PPUSH
16798: PPUSH
16799: PPUSH
16800: PPUSH
16801: PPUSH
// result := [ ] ;
16802: LD_ADDR_VAR 0 1
16806: PUSH
16807: EMPTY
16808: ST_TO_ADDR
// if campaign_id = 1 then
16809: LD_OWVAR 69
16813: PUSH
16814: LD_INT 1
16816: EQUAL
16817: IFFALSE 19983
// begin case mission_number of 1 :
16819: LD_OWVAR 70
16823: PUSH
16824: LD_INT 1
16826: DOUBLE
16827: EQUAL
16828: IFTRUE 16832
16830: GO 16908
16832: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16833: LD_ADDR_VAR 0 1
16837: PUSH
16838: LD_INT 2
16840: PUSH
16841: LD_INT 4
16843: PUSH
16844: LD_INT 11
16846: PUSH
16847: LD_INT 12
16849: PUSH
16850: LD_INT 15
16852: PUSH
16853: LD_INT 16
16855: PUSH
16856: LD_INT 22
16858: PUSH
16859: LD_INT 23
16861: PUSH
16862: LD_INT 26
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 101
16878: PUSH
16879: LD_INT 102
16881: PUSH
16882: LD_INT 106
16884: PUSH
16885: LD_INT 116
16887: PUSH
16888: LD_INT 117
16890: PUSH
16891: LD_INT 118
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: ST_TO_ADDR
16906: GO 19981
16908: LD_INT 2
16910: DOUBLE
16911: EQUAL
16912: IFTRUE 16916
16914: GO 17000
16916: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16917: LD_ADDR_VAR 0 1
16921: PUSH
16922: LD_INT 2
16924: PUSH
16925: LD_INT 4
16927: PUSH
16928: LD_INT 11
16930: PUSH
16931: LD_INT 12
16933: PUSH
16934: LD_INT 15
16936: PUSH
16937: LD_INT 16
16939: PUSH
16940: LD_INT 22
16942: PUSH
16943: LD_INT 23
16945: PUSH
16946: LD_INT 26
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 101
16962: PUSH
16963: LD_INT 102
16965: PUSH
16966: LD_INT 105
16968: PUSH
16969: LD_INT 106
16971: PUSH
16972: LD_INT 108
16974: PUSH
16975: LD_INT 116
16977: PUSH
16978: LD_INT 117
16980: PUSH
16981: LD_INT 118
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: ST_TO_ADDR
16998: GO 19981
17000: LD_INT 3
17002: DOUBLE
17003: EQUAL
17004: IFTRUE 17008
17006: GO 17096
17008: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17009: LD_ADDR_VAR 0 1
17013: PUSH
17014: LD_INT 2
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: LD_INT 5
17022: PUSH
17023: LD_INT 11
17025: PUSH
17026: LD_INT 12
17028: PUSH
17029: LD_INT 15
17031: PUSH
17032: LD_INT 16
17034: PUSH
17035: LD_INT 22
17037: PUSH
17038: LD_INT 26
17040: PUSH
17041: LD_INT 36
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 101
17058: PUSH
17059: LD_INT 102
17061: PUSH
17062: LD_INT 105
17064: PUSH
17065: LD_INT 106
17067: PUSH
17068: LD_INT 108
17070: PUSH
17071: LD_INT 116
17073: PUSH
17074: LD_INT 117
17076: PUSH
17077: LD_INT 118
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: ST_TO_ADDR
17094: GO 19981
17096: LD_INT 4
17098: DOUBLE
17099: EQUAL
17100: IFTRUE 17104
17102: GO 17200
17104: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17105: LD_ADDR_VAR 0 1
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: LD_INT 4
17115: PUSH
17116: LD_INT 5
17118: PUSH
17119: LD_INT 8
17121: PUSH
17122: LD_INT 11
17124: PUSH
17125: LD_INT 12
17127: PUSH
17128: LD_INT 15
17130: PUSH
17131: LD_INT 16
17133: PUSH
17134: LD_INT 22
17136: PUSH
17137: LD_INT 23
17139: PUSH
17140: LD_INT 26
17142: PUSH
17143: LD_INT 36
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 101
17162: PUSH
17163: LD_INT 102
17165: PUSH
17166: LD_INT 105
17168: PUSH
17169: LD_INT 106
17171: PUSH
17172: LD_INT 108
17174: PUSH
17175: LD_INT 116
17177: PUSH
17178: LD_INT 117
17180: PUSH
17181: LD_INT 118
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: ST_TO_ADDR
17198: GO 19981
17200: LD_INT 5
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17320
17208: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: LD_INT 2
17216: PUSH
17217: LD_INT 4
17219: PUSH
17220: LD_INT 5
17222: PUSH
17223: LD_INT 6
17225: PUSH
17226: LD_INT 8
17228: PUSH
17229: LD_INT 11
17231: PUSH
17232: LD_INT 12
17234: PUSH
17235: LD_INT 15
17237: PUSH
17238: LD_INT 16
17240: PUSH
17241: LD_INT 22
17243: PUSH
17244: LD_INT 23
17246: PUSH
17247: LD_INT 25
17249: PUSH
17250: LD_INT 26
17252: PUSH
17253: LD_INT 36
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 101
17274: PUSH
17275: LD_INT 102
17277: PUSH
17278: LD_INT 105
17280: PUSH
17281: LD_INT 106
17283: PUSH
17284: LD_INT 108
17286: PUSH
17287: LD_INT 109
17289: PUSH
17290: LD_INT 112
17292: PUSH
17293: LD_INT 116
17295: PUSH
17296: LD_INT 117
17298: PUSH
17299: LD_INT 118
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: ST_TO_ADDR
17318: GO 19981
17320: LD_INT 6
17322: DOUBLE
17323: EQUAL
17324: IFTRUE 17328
17326: GO 17460
17328: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17329: LD_ADDR_VAR 0 1
17333: PUSH
17334: LD_INT 2
17336: PUSH
17337: LD_INT 4
17339: PUSH
17340: LD_INT 5
17342: PUSH
17343: LD_INT 6
17345: PUSH
17346: LD_INT 8
17348: PUSH
17349: LD_INT 11
17351: PUSH
17352: LD_INT 12
17354: PUSH
17355: LD_INT 15
17357: PUSH
17358: LD_INT 16
17360: PUSH
17361: LD_INT 20
17363: PUSH
17364: LD_INT 21
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 23
17372: PUSH
17373: LD_INT 25
17375: PUSH
17376: LD_INT 26
17378: PUSH
17379: LD_INT 30
17381: PUSH
17382: LD_INT 31
17384: PUSH
17385: LD_INT 32
17387: PUSH
17388: LD_INT 36
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 101
17414: PUSH
17415: LD_INT 102
17417: PUSH
17418: LD_INT 105
17420: PUSH
17421: LD_INT 106
17423: PUSH
17424: LD_INT 108
17426: PUSH
17427: LD_INT 109
17429: PUSH
17430: LD_INT 112
17432: PUSH
17433: LD_INT 116
17435: PUSH
17436: LD_INT 117
17438: PUSH
17439: LD_INT 118
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: ST_TO_ADDR
17458: GO 19981
17460: LD_INT 7
17462: DOUBLE
17463: EQUAL
17464: IFTRUE 17468
17466: GO 17580
17468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17469: LD_ADDR_VAR 0 1
17473: PUSH
17474: LD_INT 2
17476: PUSH
17477: LD_INT 4
17479: PUSH
17480: LD_INT 5
17482: PUSH
17483: LD_INT 7
17485: PUSH
17486: LD_INT 11
17488: PUSH
17489: LD_INT 12
17491: PUSH
17492: LD_INT 15
17494: PUSH
17495: LD_INT 16
17497: PUSH
17498: LD_INT 20
17500: PUSH
17501: LD_INT 21
17503: PUSH
17504: LD_INT 22
17506: PUSH
17507: LD_INT 23
17509: PUSH
17510: LD_INT 25
17512: PUSH
17513: LD_INT 26
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 101
17534: PUSH
17535: LD_INT 102
17537: PUSH
17538: LD_INT 103
17540: PUSH
17541: LD_INT 105
17543: PUSH
17544: LD_INT 106
17546: PUSH
17547: LD_INT 108
17549: PUSH
17550: LD_INT 112
17552: PUSH
17553: LD_INT 116
17555: PUSH
17556: LD_INT 117
17558: PUSH
17559: LD_INT 118
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: ST_TO_ADDR
17578: GO 19981
17580: LD_INT 8
17582: DOUBLE
17583: EQUAL
17584: IFTRUE 17588
17586: GO 17728
17588: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_INT 2
17596: PUSH
17597: LD_INT 4
17599: PUSH
17600: LD_INT 5
17602: PUSH
17603: LD_INT 6
17605: PUSH
17606: LD_INT 7
17608: PUSH
17609: LD_INT 8
17611: PUSH
17612: LD_INT 11
17614: PUSH
17615: LD_INT 12
17617: PUSH
17618: LD_INT 15
17620: PUSH
17621: LD_INT 16
17623: PUSH
17624: LD_INT 20
17626: PUSH
17627: LD_INT 21
17629: PUSH
17630: LD_INT 22
17632: PUSH
17633: LD_INT 23
17635: PUSH
17636: LD_INT 25
17638: PUSH
17639: LD_INT 26
17641: PUSH
17642: LD_INT 30
17644: PUSH
17645: LD_INT 31
17647: PUSH
17648: LD_INT 32
17650: PUSH
17651: LD_INT 36
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 101
17678: PUSH
17679: LD_INT 102
17681: PUSH
17682: LD_INT 103
17684: PUSH
17685: LD_INT 105
17687: PUSH
17688: LD_INT 106
17690: PUSH
17691: LD_INT 108
17693: PUSH
17694: LD_INT 109
17696: PUSH
17697: LD_INT 112
17699: PUSH
17700: LD_INT 116
17702: PUSH
17703: LD_INT 117
17705: PUSH
17706: LD_INT 118
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: ST_TO_ADDR
17726: GO 19981
17728: LD_INT 9
17730: DOUBLE
17731: EQUAL
17732: IFTRUE 17736
17734: GO 17884
17736: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17737: LD_ADDR_VAR 0 1
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 4
17747: PUSH
17748: LD_INT 5
17750: PUSH
17751: LD_INT 6
17753: PUSH
17754: LD_INT 7
17756: PUSH
17757: LD_INT 8
17759: PUSH
17760: LD_INT 11
17762: PUSH
17763: LD_INT 12
17765: PUSH
17766: LD_INT 15
17768: PUSH
17769: LD_INT 16
17771: PUSH
17772: LD_INT 20
17774: PUSH
17775: LD_INT 21
17777: PUSH
17778: LD_INT 22
17780: PUSH
17781: LD_INT 23
17783: PUSH
17784: LD_INT 25
17786: PUSH
17787: LD_INT 26
17789: PUSH
17790: LD_INT 28
17792: PUSH
17793: LD_INT 30
17795: PUSH
17796: LD_INT 31
17798: PUSH
17799: LD_INT 32
17801: PUSH
17802: LD_INT 36
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 101
17830: PUSH
17831: LD_INT 102
17833: PUSH
17834: LD_INT 103
17836: PUSH
17837: LD_INT 105
17839: PUSH
17840: LD_INT 106
17842: PUSH
17843: LD_INT 108
17845: PUSH
17846: LD_INT 109
17848: PUSH
17849: LD_INT 112
17851: PUSH
17852: LD_INT 114
17854: PUSH
17855: LD_INT 116
17857: PUSH
17858: LD_INT 117
17860: PUSH
17861: LD_INT 118
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: ST_TO_ADDR
17882: GO 19981
17884: LD_INT 10
17886: DOUBLE
17887: EQUAL
17888: IFTRUE 17892
17890: GO 18088
17892: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17893: LD_ADDR_VAR 0 1
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: LD_INT 4
17903: PUSH
17904: LD_INT 5
17906: PUSH
17907: LD_INT 6
17909: PUSH
17910: LD_INT 7
17912: PUSH
17913: LD_INT 8
17915: PUSH
17916: LD_INT 9
17918: PUSH
17919: LD_INT 10
17921: PUSH
17922: LD_INT 11
17924: PUSH
17925: LD_INT 12
17927: PUSH
17928: LD_INT 13
17930: PUSH
17931: LD_INT 14
17933: PUSH
17934: LD_INT 15
17936: PUSH
17937: LD_INT 16
17939: PUSH
17940: LD_INT 17
17942: PUSH
17943: LD_INT 18
17945: PUSH
17946: LD_INT 19
17948: PUSH
17949: LD_INT 20
17951: PUSH
17952: LD_INT 21
17954: PUSH
17955: LD_INT 22
17957: PUSH
17958: LD_INT 23
17960: PUSH
17961: LD_INT 24
17963: PUSH
17964: LD_INT 25
17966: PUSH
17967: LD_INT 26
17969: PUSH
17970: LD_INT 28
17972: PUSH
17973: LD_INT 30
17975: PUSH
17976: LD_INT 31
17978: PUSH
17979: LD_INT 32
17981: PUSH
17982: LD_INT 36
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 101
18018: PUSH
18019: LD_INT 102
18021: PUSH
18022: LD_INT 103
18024: PUSH
18025: LD_INT 104
18027: PUSH
18028: LD_INT 105
18030: PUSH
18031: LD_INT 106
18033: PUSH
18034: LD_INT 107
18036: PUSH
18037: LD_INT 108
18039: PUSH
18040: LD_INT 109
18042: PUSH
18043: LD_INT 110
18045: PUSH
18046: LD_INT 111
18048: PUSH
18049: LD_INT 112
18051: PUSH
18052: LD_INT 114
18054: PUSH
18055: LD_INT 116
18057: PUSH
18058: LD_INT 117
18060: PUSH
18061: LD_INT 118
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: ST_TO_ADDR
18086: GO 19981
18088: LD_INT 11
18090: DOUBLE
18091: EQUAL
18092: IFTRUE 18096
18094: GO 18300
18096: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18097: LD_ADDR_VAR 0 1
18101: PUSH
18102: LD_INT 2
18104: PUSH
18105: LD_INT 3
18107: PUSH
18108: LD_INT 4
18110: PUSH
18111: LD_INT 5
18113: PUSH
18114: LD_INT 6
18116: PUSH
18117: LD_INT 7
18119: PUSH
18120: LD_INT 8
18122: PUSH
18123: LD_INT 9
18125: PUSH
18126: LD_INT 10
18128: PUSH
18129: LD_INT 11
18131: PUSH
18132: LD_INT 12
18134: PUSH
18135: LD_INT 13
18137: PUSH
18138: LD_INT 14
18140: PUSH
18141: LD_INT 15
18143: PUSH
18144: LD_INT 16
18146: PUSH
18147: LD_INT 17
18149: PUSH
18150: LD_INT 18
18152: PUSH
18153: LD_INT 19
18155: PUSH
18156: LD_INT 20
18158: PUSH
18159: LD_INT 21
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_INT 23
18167: PUSH
18168: LD_INT 24
18170: PUSH
18171: LD_INT 25
18173: PUSH
18174: LD_INT 26
18176: PUSH
18177: LD_INT 28
18179: PUSH
18180: LD_INT 30
18182: PUSH
18183: LD_INT 31
18185: PUSH
18186: LD_INT 32
18188: PUSH
18189: LD_INT 34
18191: PUSH
18192: LD_INT 36
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 101
18230: PUSH
18231: LD_INT 102
18233: PUSH
18234: LD_INT 103
18236: PUSH
18237: LD_INT 104
18239: PUSH
18240: LD_INT 105
18242: PUSH
18243: LD_INT 106
18245: PUSH
18246: LD_INT 107
18248: PUSH
18249: LD_INT 108
18251: PUSH
18252: LD_INT 109
18254: PUSH
18255: LD_INT 110
18257: PUSH
18258: LD_INT 111
18260: PUSH
18261: LD_INT 112
18263: PUSH
18264: LD_INT 114
18266: PUSH
18267: LD_INT 116
18269: PUSH
18270: LD_INT 117
18272: PUSH
18273: LD_INT 118
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: ST_TO_ADDR
18298: GO 19981
18300: LD_INT 12
18302: DOUBLE
18303: EQUAL
18304: IFTRUE 18308
18306: GO 18528
18308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18309: LD_ADDR_VAR 0 1
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 4
18325: PUSH
18326: LD_INT 5
18328: PUSH
18329: LD_INT 6
18331: PUSH
18332: LD_INT 7
18334: PUSH
18335: LD_INT 8
18337: PUSH
18338: LD_INT 9
18340: PUSH
18341: LD_INT 10
18343: PUSH
18344: LD_INT 11
18346: PUSH
18347: LD_INT 12
18349: PUSH
18350: LD_INT 13
18352: PUSH
18353: LD_INT 14
18355: PUSH
18356: LD_INT 15
18358: PUSH
18359: LD_INT 16
18361: PUSH
18362: LD_INT 17
18364: PUSH
18365: LD_INT 18
18367: PUSH
18368: LD_INT 19
18370: PUSH
18371: LD_INT 20
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 22
18379: PUSH
18380: LD_INT 23
18382: PUSH
18383: LD_INT 24
18385: PUSH
18386: LD_INT 25
18388: PUSH
18389: LD_INT 26
18391: PUSH
18392: LD_INT 27
18394: PUSH
18395: LD_INT 28
18397: PUSH
18398: LD_INT 30
18400: PUSH
18401: LD_INT 31
18403: PUSH
18404: LD_INT 32
18406: PUSH
18407: LD_INT 33
18409: PUSH
18410: LD_INT 34
18412: PUSH
18413: LD_INT 36
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 101
18454: PUSH
18455: LD_INT 102
18457: PUSH
18458: LD_INT 103
18460: PUSH
18461: LD_INT 104
18463: PUSH
18464: LD_INT 105
18466: PUSH
18467: LD_INT 106
18469: PUSH
18470: LD_INT 107
18472: PUSH
18473: LD_INT 108
18475: PUSH
18476: LD_INT 109
18478: PUSH
18479: LD_INT 110
18481: PUSH
18482: LD_INT 111
18484: PUSH
18485: LD_INT 112
18487: PUSH
18488: LD_INT 113
18490: PUSH
18491: LD_INT 114
18493: PUSH
18494: LD_INT 116
18496: PUSH
18497: LD_INT 117
18499: PUSH
18500: LD_INT 118
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: ST_TO_ADDR
18526: GO 19981
18528: LD_INT 13
18530: DOUBLE
18531: EQUAL
18532: IFTRUE 18536
18534: GO 18744
18536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18537: LD_ADDR_VAR 0 1
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: LD_INT 3
18550: PUSH
18551: LD_INT 4
18553: PUSH
18554: LD_INT 5
18556: PUSH
18557: LD_INT 8
18559: PUSH
18560: LD_INT 9
18562: PUSH
18563: LD_INT 10
18565: PUSH
18566: LD_INT 11
18568: PUSH
18569: LD_INT 12
18571: PUSH
18572: LD_INT 14
18574: PUSH
18575: LD_INT 15
18577: PUSH
18578: LD_INT 16
18580: PUSH
18581: LD_INT 17
18583: PUSH
18584: LD_INT 18
18586: PUSH
18587: LD_INT 19
18589: PUSH
18590: LD_INT 20
18592: PUSH
18593: LD_INT 21
18595: PUSH
18596: LD_INT 22
18598: PUSH
18599: LD_INT 23
18601: PUSH
18602: LD_INT 24
18604: PUSH
18605: LD_INT 25
18607: PUSH
18608: LD_INT 26
18610: PUSH
18611: LD_INT 27
18613: PUSH
18614: LD_INT 28
18616: PUSH
18617: LD_INT 30
18619: PUSH
18620: LD_INT 31
18622: PUSH
18623: LD_INT 32
18625: PUSH
18626: LD_INT 33
18628: PUSH
18629: LD_INT 34
18631: PUSH
18632: LD_INT 36
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 101
18670: PUSH
18671: LD_INT 102
18673: PUSH
18674: LD_INT 103
18676: PUSH
18677: LD_INT 104
18679: PUSH
18680: LD_INT 105
18682: PUSH
18683: LD_INT 106
18685: PUSH
18686: LD_INT 107
18688: PUSH
18689: LD_INT 108
18691: PUSH
18692: LD_INT 109
18694: PUSH
18695: LD_INT 110
18697: PUSH
18698: LD_INT 111
18700: PUSH
18701: LD_INT 112
18703: PUSH
18704: LD_INT 113
18706: PUSH
18707: LD_INT 114
18709: PUSH
18710: LD_INT 116
18712: PUSH
18713: LD_INT 117
18715: PUSH
18716: LD_INT 118
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: ST_TO_ADDR
18742: GO 19981
18744: LD_INT 14
18746: DOUBLE
18747: EQUAL
18748: IFTRUE 18752
18750: GO 18976
18752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18753: LD_ADDR_VAR 0 1
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: LD_INT 2
18763: PUSH
18764: LD_INT 3
18766: PUSH
18767: LD_INT 4
18769: PUSH
18770: LD_INT 5
18772: PUSH
18773: LD_INT 6
18775: PUSH
18776: LD_INT 7
18778: PUSH
18779: LD_INT 8
18781: PUSH
18782: LD_INT 9
18784: PUSH
18785: LD_INT 10
18787: PUSH
18788: LD_INT 11
18790: PUSH
18791: LD_INT 12
18793: PUSH
18794: LD_INT 13
18796: PUSH
18797: LD_INT 14
18799: PUSH
18800: LD_INT 15
18802: PUSH
18803: LD_INT 16
18805: PUSH
18806: LD_INT 17
18808: PUSH
18809: LD_INT 18
18811: PUSH
18812: LD_INT 19
18814: PUSH
18815: LD_INT 20
18817: PUSH
18818: LD_INT 21
18820: PUSH
18821: LD_INT 22
18823: PUSH
18824: LD_INT 23
18826: PUSH
18827: LD_INT 24
18829: PUSH
18830: LD_INT 25
18832: PUSH
18833: LD_INT 26
18835: PUSH
18836: LD_INT 27
18838: PUSH
18839: LD_INT 28
18841: PUSH
18842: LD_INT 29
18844: PUSH
18845: LD_INT 30
18847: PUSH
18848: LD_INT 31
18850: PUSH
18851: LD_INT 32
18853: PUSH
18854: LD_INT 33
18856: PUSH
18857: LD_INT 34
18859: PUSH
18860: LD_INT 36
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 101
18902: PUSH
18903: LD_INT 102
18905: PUSH
18906: LD_INT 103
18908: PUSH
18909: LD_INT 104
18911: PUSH
18912: LD_INT 105
18914: PUSH
18915: LD_INT 106
18917: PUSH
18918: LD_INT 107
18920: PUSH
18921: LD_INT 108
18923: PUSH
18924: LD_INT 109
18926: PUSH
18927: LD_INT 110
18929: PUSH
18930: LD_INT 111
18932: PUSH
18933: LD_INT 112
18935: PUSH
18936: LD_INT 113
18938: PUSH
18939: LD_INT 114
18941: PUSH
18942: LD_INT 116
18944: PUSH
18945: LD_INT 117
18947: PUSH
18948: LD_INT 118
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: ST_TO_ADDR
18974: GO 19981
18976: LD_INT 15
18978: DOUBLE
18979: EQUAL
18980: IFTRUE 18984
18982: GO 19208
18984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18985: LD_ADDR_VAR 0 1
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 3
18998: PUSH
18999: LD_INT 4
19001: PUSH
19002: LD_INT 5
19004: PUSH
19005: LD_INT 6
19007: PUSH
19008: LD_INT 7
19010: PUSH
19011: LD_INT 8
19013: PUSH
19014: LD_INT 9
19016: PUSH
19017: LD_INT 10
19019: PUSH
19020: LD_INT 11
19022: PUSH
19023: LD_INT 12
19025: PUSH
19026: LD_INT 13
19028: PUSH
19029: LD_INT 14
19031: PUSH
19032: LD_INT 15
19034: PUSH
19035: LD_INT 16
19037: PUSH
19038: LD_INT 17
19040: PUSH
19041: LD_INT 18
19043: PUSH
19044: LD_INT 19
19046: PUSH
19047: LD_INT 20
19049: PUSH
19050: LD_INT 21
19052: PUSH
19053: LD_INT 22
19055: PUSH
19056: LD_INT 23
19058: PUSH
19059: LD_INT 24
19061: PUSH
19062: LD_INT 25
19064: PUSH
19065: LD_INT 26
19067: PUSH
19068: LD_INT 27
19070: PUSH
19071: LD_INT 28
19073: PUSH
19074: LD_INT 29
19076: PUSH
19077: LD_INT 30
19079: PUSH
19080: LD_INT 31
19082: PUSH
19083: LD_INT 32
19085: PUSH
19086: LD_INT 33
19088: PUSH
19089: LD_INT 34
19091: PUSH
19092: LD_INT 36
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 101
19134: PUSH
19135: LD_INT 102
19137: PUSH
19138: LD_INT 103
19140: PUSH
19141: LD_INT 104
19143: PUSH
19144: LD_INT 105
19146: PUSH
19147: LD_INT 106
19149: PUSH
19150: LD_INT 107
19152: PUSH
19153: LD_INT 108
19155: PUSH
19156: LD_INT 109
19158: PUSH
19159: LD_INT 110
19161: PUSH
19162: LD_INT 111
19164: PUSH
19165: LD_INT 112
19167: PUSH
19168: LD_INT 113
19170: PUSH
19171: LD_INT 114
19173: PUSH
19174: LD_INT 116
19176: PUSH
19177: LD_INT 117
19179: PUSH
19180: LD_INT 118
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: ST_TO_ADDR
19206: GO 19981
19208: LD_INT 16
19210: DOUBLE
19211: EQUAL
19212: IFTRUE 19216
19214: GO 19352
19216: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19217: LD_ADDR_VAR 0 1
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: LD_INT 4
19227: PUSH
19228: LD_INT 5
19230: PUSH
19231: LD_INT 7
19233: PUSH
19234: LD_INT 11
19236: PUSH
19237: LD_INT 12
19239: PUSH
19240: LD_INT 15
19242: PUSH
19243: LD_INT 16
19245: PUSH
19246: LD_INT 20
19248: PUSH
19249: LD_INT 21
19251: PUSH
19252: LD_INT 22
19254: PUSH
19255: LD_INT 23
19257: PUSH
19258: LD_INT 25
19260: PUSH
19261: LD_INT 26
19263: PUSH
19264: LD_INT 30
19266: PUSH
19267: LD_INT 31
19269: PUSH
19270: LD_INT 32
19272: PUSH
19273: LD_INT 33
19275: PUSH
19276: LD_INT 34
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 101
19302: PUSH
19303: LD_INT 102
19305: PUSH
19306: LD_INT 103
19308: PUSH
19309: LD_INT 106
19311: PUSH
19312: LD_INT 108
19314: PUSH
19315: LD_INT 112
19317: PUSH
19318: LD_INT 113
19320: PUSH
19321: LD_INT 114
19323: PUSH
19324: LD_INT 116
19326: PUSH
19327: LD_INT 117
19329: PUSH
19330: LD_INT 118
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: ST_TO_ADDR
19350: GO 19981
19352: LD_INT 17
19354: DOUBLE
19355: EQUAL
19356: IFTRUE 19360
19358: GO 19584
19360: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19361: LD_ADDR_VAR 0 1
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: LD_INT 2
19371: PUSH
19372: LD_INT 3
19374: PUSH
19375: LD_INT 4
19377: PUSH
19378: LD_INT 5
19380: PUSH
19381: LD_INT 6
19383: PUSH
19384: LD_INT 7
19386: PUSH
19387: LD_INT 8
19389: PUSH
19390: LD_INT 9
19392: PUSH
19393: LD_INT 10
19395: PUSH
19396: LD_INT 11
19398: PUSH
19399: LD_INT 12
19401: PUSH
19402: LD_INT 13
19404: PUSH
19405: LD_INT 14
19407: PUSH
19408: LD_INT 15
19410: PUSH
19411: LD_INT 16
19413: PUSH
19414: LD_INT 17
19416: PUSH
19417: LD_INT 18
19419: PUSH
19420: LD_INT 19
19422: PUSH
19423: LD_INT 20
19425: PUSH
19426: LD_INT 21
19428: PUSH
19429: LD_INT 22
19431: PUSH
19432: LD_INT 23
19434: PUSH
19435: LD_INT 24
19437: PUSH
19438: LD_INT 25
19440: PUSH
19441: LD_INT 26
19443: PUSH
19444: LD_INT 27
19446: PUSH
19447: LD_INT 28
19449: PUSH
19450: LD_INT 29
19452: PUSH
19453: LD_INT 30
19455: PUSH
19456: LD_INT 31
19458: PUSH
19459: LD_INT 32
19461: PUSH
19462: LD_INT 33
19464: PUSH
19465: LD_INT 34
19467: PUSH
19468: LD_INT 36
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 101
19510: PUSH
19511: LD_INT 102
19513: PUSH
19514: LD_INT 103
19516: PUSH
19517: LD_INT 104
19519: PUSH
19520: LD_INT 105
19522: PUSH
19523: LD_INT 106
19525: PUSH
19526: LD_INT 107
19528: PUSH
19529: LD_INT 108
19531: PUSH
19532: LD_INT 109
19534: PUSH
19535: LD_INT 110
19537: PUSH
19538: LD_INT 111
19540: PUSH
19541: LD_INT 112
19543: PUSH
19544: LD_INT 113
19546: PUSH
19547: LD_INT 114
19549: PUSH
19550: LD_INT 116
19552: PUSH
19553: LD_INT 117
19555: PUSH
19556: LD_INT 118
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: ST_TO_ADDR
19582: GO 19981
19584: LD_INT 18
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19740
19592: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19593: LD_ADDR_VAR 0 1
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: LD_INT 5
19606: PUSH
19607: LD_INT 7
19609: PUSH
19610: LD_INT 11
19612: PUSH
19613: LD_INT 12
19615: PUSH
19616: LD_INT 15
19618: PUSH
19619: LD_INT 16
19621: PUSH
19622: LD_INT 20
19624: PUSH
19625: LD_INT 21
19627: PUSH
19628: LD_INT 22
19630: PUSH
19631: LD_INT 23
19633: PUSH
19634: LD_INT 25
19636: PUSH
19637: LD_INT 26
19639: PUSH
19640: LD_INT 30
19642: PUSH
19643: LD_INT 31
19645: PUSH
19646: LD_INT 32
19648: PUSH
19649: LD_INT 33
19651: PUSH
19652: LD_INT 34
19654: PUSH
19655: LD_INT 35
19657: PUSH
19658: LD_INT 36
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 101
19686: PUSH
19687: LD_INT 102
19689: PUSH
19690: LD_INT 103
19692: PUSH
19693: LD_INT 106
19695: PUSH
19696: LD_INT 108
19698: PUSH
19699: LD_INT 112
19701: PUSH
19702: LD_INT 113
19704: PUSH
19705: LD_INT 114
19707: PUSH
19708: LD_INT 115
19710: PUSH
19711: LD_INT 116
19713: PUSH
19714: LD_INT 117
19716: PUSH
19717: LD_INT 118
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: ST_TO_ADDR
19738: GO 19981
19740: LD_INT 19
19742: DOUBLE
19743: EQUAL
19744: IFTRUE 19748
19746: GO 19980
19748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19749: LD_ADDR_VAR 0 1
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: LD_INT 3
19762: PUSH
19763: LD_INT 4
19765: PUSH
19766: LD_INT 5
19768: PUSH
19769: LD_INT 6
19771: PUSH
19772: LD_INT 7
19774: PUSH
19775: LD_INT 8
19777: PUSH
19778: LD_INT 9
19780: PUSH
19781: LD_INT 10
19783: PUSH
19784: LD_INT 11
19786: PUSH
19787: LD_INT 12
19789: PUSH
19790: LD_INT 13
19792: PUSH
19793: LD_INT 14
19795: PUSH
19796: LD_INT 15
19798: PUSH
19799: LD_INT 16
19801: PUSH
19802: LD_INT 17
19804: PUSH
19805: LD_INT 18
19807: PUSH
19808: LD_INT 19
19810: PUSH
19811: LD_INT 20
19813: PUSH
19814: LD_INT 21
19816: PUSH
19817: LD_INT 22
19819: PUSH
19820: LD_INT 23
19822: PUSH
19823: LD_INT 24
19825: PUSH
19826: LD_INT 25
19828: PUSH
19829: LD_INT 26
19831: PUSH
19832: LD_INT 27
19834: PUSH
19835: LD_INT 28
19837: PUSH
19838: LD_INT 29
19840: PUSH
19841: LD_INT 30
19843: PUSH
19844: LD_INT 31
19846: PUSH
19847: LD_INT 32
19849: PUSH
19850: LD_INT 33
19852: PUSH
19853: LD_INT 34
19855: PUSH
19856: LD_INT 35
19858: PUSH
19859: LD_INT 36
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 101
19902: PUSH
19903: LD_INT 102
19905: PUSH
19906: LD_INT 103
19908: PUSH
19909: LD_INT 104
19911: PUSH
19912: LD_INT 105
19914: PUSH
19915: LD_INT 106
19917: PUSH
19918: LD_INT 107
19920: PUSH
19921: LD_INT 108
19923: PUSH
19924: LD_INT 109
19926: PUSH
19927: LD_INT 110
19929: PUSH
19930: LD_INT 111
19932: PUSH
19933: LD_INT 112
19935: PUSH
19936: LD_INT 113
19938: PUSH
19939: LD_INT 114
19941: PUSH
19942: LD_INT 115
19944: PUSH
19945: LD_INT 116
19947: PUSH
19948: LD_INT 117
19950: PUSH
19951: LD_INT 118
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: ST_TO_ADDR
19978: GO 19981
19980: POP
// end else
19981: GO 20212
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19983: LD_ADDR_VAR 0 1
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: LD_INT 3
19996: PUSH
19997: LD_INT 4
19999: PUSH
20000: LD_INT 5
20002: PUSH
20003: LD_INT 6
20005: PUSH
20006: LD_INT 7
20008: PUSH
20009: LD_INT 8
20011: PUSH
20012: LD_INT 9
20014: PUSH
20015: LD_INT 10
20017: PUSH
20018: LD_INT 11
20020: PUSH
20021: LD_INT 12
20023: PUSH
20024: LD_INT 13
20026: PUSH
20027: LD_INT 14
20029: PUSH
20030: LD_INT 15
20032: PUSH
20033: LD_INT 16
20035: PUSH
20036: LD_INT 17
20038: PUSH
20039: LD_INT 18
20041: PUSH
20042: LD_INT 19
20044: PUSH
20045: LD_INT 20
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 22
20053: PUSH
20054: LD_INT 23
20056: PUSH
20057: LD_INT 24
20059: PUSH
20060: LD_INT 25
20062: PUSH
20063: LD_INT 26
20065: PUSH
20066: LD_INT 27
20068: PUSH
20069: LD_INT 28
20071: PUSH
20072: LD_INT 29
20074: PUSH
20075: LD_INT 30
20077: PUSH
20078: LD_INT 31
20080: PUSH
20081: LD_INT 32
20083: PUSH
20084: LD_INT 33
20086: PUSH
20087: LD_INT 34
20089: PUSH
20090: LD_INT 35
20092: PUSH
20093: LD_INT 36
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 101
20136: PUSH
20137: LD_INT 102
20139: PUSH
20140: LD_INT 103
20142: PUSH
20143: LD_INT 104
20145: PUSH
20146: LD_INT 105
20148: PUSH
20149: LD_INT 106
20151: PUSH
20152: LD_INT 107
20154: PUSH
20155: LD_INT 108
20157: PUSH
20158: LD_INT 109
20160: PUSH
20161: LD_INT 110
20163: PUSH
20164: LD_INT 111
20166: PUSH
20167: LD_INT 112
20169: PUSH
20170: LD_INT 113
20172: PUSH
20173: LD_INT 114
20175: PUSH
20176: LD_INT 115
20178: PUSH
20179: LD_INT 116
20181: PUSH
20182: LD_INT 117
20184: PUSH
20185: LD_INT 118
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: ST_TO_ADDR
// if result then
20212: LD_VAR 0 1
20216: IFFALSE 20505
// begin normal :=  ;
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: LD_STRING 
20225: ST_TO_ADDR
// hardcore :=  ;
20226: LD_ADDR_VAR 0 4
20230: PUSH
20231: LD_STRING 
20233: ST_TO_ADDR
// for i = 1 to normalCounter do
20234: LD_ADDR_VAR 0 5
20238: PUSH
20239: DOUBLE
20240: LD_INT 1
20242: DEC
20243: ST_TO_ADDR
20244: LD_EXP 58
20248: PUSH
20249: FOR_TO
20250: IFFALSE 20351
// begin tmp := 0 ;
20252: LD_ADDR_VAR 0 2
20256: PUSH
20257: LD_STRING 0
20259: ST_TO_ADDR
// if result [ 1 ] then
20260: LD_VAR 0 1
20264: PUSH
20265: LD_INT 1
20267: ARRAY
20268: IFFALSE 20333
// if result [ 1 ] [ 1 ] = i then
20270: LD_VAR 0 1
20274: PUSH
20275: LD_INT 1
20277: ARRAY
20278: PUSH
20279: LD_INT 1
20281: ARRAY
20282: PUSH
20283: LD_VAR 0 5
20287: EQUAL
20288: IFFALSE 20333
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20290: LD_ADDR_VAR 0 1
20294: PUSH
20295: LD_VAR 0 1
20299: PPUSH
20300: LD_INT 1
20302: PPUSH
20303: LD_VAR 0 1
20307: PUSH
20308: LD_INT 1
20310: ARRAY
20311: PPUSH
20312: LD_INT 1
20314: PPUSH
20315: CALL_OW 3
20319: PPUSH
20320: CALL_OW 1
20324: ST_TO_ADDR
// tmp := 1 ;
20325: LD_ADDR_VAR 0 2
20329: PUSH
20330: LD_STRING 1
20332: ST_TO_ADDR
// end ; normal := normal & tmp ;
20333: LD_ADDR_VAR 0 3
20337: PUSH
20338: LD_VAR 0 3
20342: PUSH
20343: LD_VAR 0 2
20347: STR
20348: ST_TO_ADDR
// end ;
20349: GO 20249
20351: POP
20352: POP
// for i = 1 to hardcoreCounter do
20353: LD_ADDR_VAR 0 5
20357: PUSH
20358: DOUBLE
20359: LD_INT 1
20361: DEC
20362: ST_TO_ADDR
20363: LD_EXP 59
20367: PUSH
20368: FOR_TO
20369: IFFALSE 20474
// begin tmp := 0 ;
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_STRING 0
20378: ST_TO_ADDR
// if result [ 2 ] then
20379: LD_VAR 0 1
20383: PUSH
20384: LD_INT 2
20386: ARRAY
20387: IFFALSE 20456
// if result [ 2 ] [ 1 ] = 100 + i then
20389: LD_VAR 0 1
20393: PUSH
20394: LD_INT 2
20396: ARRAY
20397: PUSH
20398: LD_INT 1
20400: ARRAY
20401: PUSH
20402: LD_INT 100
20404: PUSH
20405: LD_VAR 0 5
20409: PLUS
20410: EQUAL
20411: IFFALSE 20456
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20413: LD_ADDR_VAR 0 1
20417: PUSH
20418: LD_VAR 0 1
20422: PPUSH
20423: LD_INT 2
20425: PPUSH
20426: LD_VAR 0 1
20430: PUSH
20431: LD_INT 2
20433: ARRAY
20434: PPUSH
20435: LD_INT 1
20437: PPUSH
20438: CALL_OW 3
20442: PPUSH
20443: CALL_OW 1
20447: ST_TO_ADDR
// tmp := 1 ;
20448: LD_ADDR_VAR 0 2
20452: PUSH
20453: LD_STRING 1
20455: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20456: LD_ADDR_VAR 0 4
20460: PUSH
20461: LD_VAR 0 4
20465: PUSH
20466: LD_VAR 0 2
20470: STR
20471: ST_TO_ADDR
// end ;
20472: GO 20368
20474: POP
20475: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20476: LD_STRING getStreamItemsFromMission("
20478: PUSH
20479: LD_VAR 0 3
20483: STR
20484: PUSH
20485: LD_STRING ","
20487: STR
20488: PUSH
20489: LD_VAR 0 4
20493: STR
20494: PUSH
20495: LD_STRING ")
20497: STR
20498: PPUSH
20499: CALL_OW 559
// end else
20503: GO 20512
// ToLua ( getStreamItemsFromMission("","") ) ;
20505: LD_STRING getStreamItemsFromMission("","")
20507: PPUSH
20508: CALL_OW 559
// end ;
20512: LD_VAR 0 1
20516: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20517: LD_EXP 57
20521: PUSH
20522: LD_EXP 62
20526: AND
20527: IFFALSE 20651
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
// begin enable ;
20536: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20537: LD_ADDR_VAR 0 2
20541: PUSH
20542: LD_INT 22
20544: PUSH
20545: LD_OWVAR 2
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 2
20556: PUSH
20557: LD_INT 34
20559: PUSH
20560: LD_INT 7
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 34
20569: PUSH
20570: LD_INT 45
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 34
20579: PUSH
20580: LD_INT 28
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 34
20589: PUSH
20590: LD_INT 47
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PPUSH
20608: CALL_OW 69
20612: ST_TO_ADDR
// if not tmp then
20613: LD_VAR 0 2
20617: NOT
20618: IFFALSE 20622
// exit ;
20620: GO 20651
// for i in tmp do
20622: LD_ADDR_VAR 0 1
20626: PUSH
20627: LD_VAR 0 2
20631: PUSH
20632: FOR_IN
20633: IFFALSE 20649
// begin SetLives ( i , 0 ) ;
20635: LD_VAR 0 1
20639: PPUSH
20640: LD_INT 0
20642: PPUSH
20643: CALL_OW 234
// end ;
20647: GO 20632
20649: POP
20650: POP
// end ;
20651: PPOPN 2
20653: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20654: LD_EXP 57
20658: PUSH
20659: LD_EXP 63
20663: AND
20664: IFFALSE 20748
20666: GO 20668
20668: DISABLE
20669: LD_INT 0
20671: PPUSH
20672: PPUSH
// begin enable ;
20673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20674: LD_ADDR_VAR 0 2
20678: PUSH
20679: LD_INT 22
20681: PUSH
20682: LD_OWVAR 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 32
20693: PUSH
20694: LD_INT 3
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PPUSH
20705: CALL_OW 69
20709: ST_TO_ADDR
// if not tmp then
20710: LD_VAR 0 2
20714: NOT
20715: IFFALSE 20719
// exit ;
20717: GO 20748
// for i in tmp do
20719: LD_ADDR_VAR 0 1
20723: PUSH
20724: LD_VAR 0 2
20728: PUSH
20729: FOR_IN
20730: IFFALSE 20746
// begin SetLives ( i , 0 ) ;
20732: LD_VAR 0 1
20736: PPUSH
20737: LD_INT 0
20739: PPUSH
20740: CALL_OW 234
// end ;
20744: GO 20729
20746: POP
20747: POP
// end ;
20748: PPOPN 2
20750: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20751: LD_EXP 57
20755: PUSH
20756: LD_EXP 60
20760: AND
20761: IFFALSE 20854
20763: GO 20765
20765: DISABLE
20766: LD_INT 0
20768: PPUSH
// begin enable ;
20769: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20770: LD_ADDR_VAR 0 1
20774: PUSH
20775: LD_INT 22
20777: PUSH
20778: LD_OWVAR 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: LD_INT 25
20792: PUSH
20793: LD_INT 5
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 25
20802: PUSH
20803: LD_INT 9
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 25
20812: PUSH
20813: LD_INT 8
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PPUSH
20830: CALL_OW 69
20834: PUSH
20835: FOR_IN
20836: IFFALSE 20852
// begin SetClass ( i , 1 ) ;
20838: LD_VAR 0 1
20842: PPUSH
20843: LD_INT 1
20845: PPUSH
20846: CALL_OW 336
// end ;
20850: GO 20835
20852: POP
20853: POP
// end ;
20854: PPOPN 1
20856: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20857: LD_EXP 57
20861: PUSH
20862: LD_EXP 61
20866: AND
20867: PUSH
20868: LD_OWVAR 65
20872: PUSH
20873: LD_INT 7
20875: LESS
20876: AND
20877: IFFALSE 20891
20879: GO 20881
20881: DISABLE
// begin enable ;
20882: ENABLE
// game_speed := 7 ;
20883: LD_ADDR_OWVAR 65
20887: PUSH
20888: LD_INT 7
20890: ST_TO_ADDR
// end ;
20891: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20892: LD_EXP 57
20896: PUSH
20897: LD_EXP 64
20901: AND
20902: IFFALSE 21104
20904: GO 20906
20906: DISABLE
20907: LD_INT 0
20909: PPUSH
20910: PPUSH
20911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: LD_INT 81
20919: PUSH
20920: LD_OWVAR 2
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 21
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 69
20947: ST_TO_ADDR
// if not tmp then
20948: LD_VAR 0 3
20952: NOT
20953: IFFALSE 20957
// exit ;
20955: GO 21104
// if tmp > 5 then
20957: LD_VAR 0 3
20961: PUSH
20962: LD_INT 5
20964: GREATER
20965: IFFALSE 20977
// k := 5 else
20967: LD_ADDR_VAR 0 2
20971: PUSH
20972: LD_INT 5
20974: ST_TO_ADDR
20975: GO 20987
// k := tmp ;
20977: LD_ADDR_VAR 0 2
20981: PUSH
20982: LD_VAR 0 3
20986: ST_TO_ADDR
// for i := 1 to k do
20987: LD_ADDR_VAR 0 1
20991: PUSH
20992: DOUBLE
20993: LD_INT 1
20995: DEC
20996: ST_TO_ADDR
20997: LD_VAR 0 2
21001: PUSH
21002: FOR_TO
21003: IFFALSE 21102
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21005: LD_VAR 0 3
21009: PUSH
21010: LD_VAR 0 1
21014: ARRAY
21015: PPUSH
21016: LD_VAR 0 1
21020: PUSH
21021: LD_INT 4
21023: MOD
21024: PUSH
21025: LD_INT 1
21027: PLUS
21028: PPUSH
21029: CALL_OW 259
21033: PUSH
21034: LD_INT 10
21036: LESS
21037: IFFALSE 21100
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21039: LD_VAR 0 3
21043: PUSH
21044: LD_VAR 0 1
21048: ARRAY
21049: PPUSH
21050: LD_VAR 0 1
21054: PUSH
21055: LD_INT 4
21057: MOD
21058: PUSH
21059: LD_INT 1
21061: PLUS
21062: PPUSH
21063: LD_VAR 0 3
21067: PUSH
21068: LD_VAR 0 1
21072: ARRAY
21073: PPUSH
21074: LD_VAR 0 1
21078: PUSH
21079: LD_INT 4
21081: MOD
21082: PUSH
21083: LD_INT 1
21085: PLUS
21086: PPUSH
21087: CALL_OW 259
21091: PUSH
21092: LD_INT 1
21094: PLUS
21095: PPUSH
21096: CALL_OW 237
21100: GO 21002
21102: POP
21103: POP
// end ;
21104: PPOPN 3
21106: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21107: LD_EXP 57
21111: PUSH
21112: LD_EXP 65
21116: AND
21117: IFFALSE 21137
21119: GO 21121
21121: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21122: LD_INT 4
21124: PPUSH
21125: LD_OWVAR 2
21129: PPUSH
21130: LD_INT 0
21132: PPUSH
21133: CALL_OW 324
21137: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21138: LD_EXP 57
21142: PUSH
21143: LD_EXP 94
21147: AND
21148: IFFALSE 21168
21150: GO 21152
21152: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21153: LD_INT 19
21155: PPUSH
21156: LD_OWVAR 2
21160: PPUSH
21161: LD_INT 0
21163: PPUSH
21164: CALL_OW 324
21168: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21169: LD_EXP 57
21173: PUSH
21174: LD_EXP 66
21178: AND
21179: IFFALSE 21281
21181: GO 21183
21183: DISABLE
21184: LD_INT 0
21186: PPUSH
21187: PPUSH
// begin enable ;
21188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21189: LD_ADDR_VAR 0 2
21193: PUSH
21194: LD_INT 22
21196: PUSH
21197: LD_OWVAR 2
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 34
21211: PUSH
21212: LD_INT 11
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 34
21221: PUSH
21222: LD_INT 30
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: LIST
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PPUSH
21238: CALL_OW 69
21242: ST_TO_ADDR
// if not tmp then
21243: LD_VAR 0 2
21247: NOT
21248: IFFALSE 21252
// exit ;
21250: GO 21281
// for i in tmp do
21252: LD_ADDR_VAR 0 1
21256: PUSH
21257: LD_VAR 0 2
21261: PUSH
21262: FOR_IN
21263: IFFALSE 21279
// begin SetLives ( i , 0 ) ;
21265: LD_VAR 0 1
21269: PPUSH
21270: LD_INT 0
21272: PPUSH
21273: CALL_OW 234
// end ;
21277: GO 21262
21279: POP
21280: POP
// end ;
21281: PPOPN 2
21283: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21284: LD_EXP 57
21288: PUSH
21289: LD_EXP 67
21293: AND
21294: IFFALSE 21314
21296: GO 21298
21298: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21299: LD_INT 32
21301: PPUSH
21302: LD_OWVAR 2
21306: PPUSH
21307: LD_INT 0
21309: PPUSH
21310: CALL_OW 324
21314: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21315: LD_EXP 57
21319: PUSH
21320: LD_EXP 68
21324: AND
21325: IFFALSE 21506
21327: GO 21329
21329: DISABLE
21330: LD_INT 0
21332: PPUSH
21333: PPUSH
21334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21335: LD_ADDR_VAR 0 2
21339: PUSH
21340: LD_INT 22
21342: PUSH
21343: LD_OWVAR 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 33
21354: PUSH
21355: LD_INT 3
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PPUSH
21366: CALL_OW 69
21370: ST_TO_ADDR
// if not tmp then
21371: LD_VAR 0 2
21375: NOT
21376: IFFALSE 21380
// exit ;
21378: GO 21506
// side := 0 ;
21380: LD_ADDR_VAR 0 3
21384: PUSH
21385: LD_INT 0
21387: ST_TO_ADDR
// for i := 1 to 8 do
21388: LD_ADDR_VAR 0 1
21392: PUSH
21393: DOUBLE
21394: LD_INT 1
21396: DEC
21397: ST_TO_ADDR
21398: LD_INT 8
21400: PUSH
21401: FOR_TO
21402: IFFALSE 21450
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21404: LD_OWVAR 2
21408: PUSH
21409: LD_VAR 0 1
21413: NONEQUAL
21414: PUSH
21415: LD_OWVAR 2
21419: PPUSH
21420: LD_VAR 0 1
21424: PPUSH
21425: CALL_OW 81
21429: PUSH
21430: LD_INT 2
21432: EQUAL
21433: AND
21434: IFFALSE 21448
// begin side := i ;
21436: LD_ADDR_VAR 0 3
21440: PUSH
21441: LD_VAR 0 1
21445: ST_TO_ADDR
// break ;
21446: GO 21450
// end ;
21448: GO 21401
21450: POP
21451: POP
// if not side then
21452: LD_VAR 0 3
21456: NOT
21457: IFFALSE 21461
// exit ;
21459: GO 21506
// for i := 1 to tmp do
21461: LD_ADDR_VAR 0 1
21465: PUSH
21466: DOUBLE
21467: LD_INT 1
21469: DEC
21470: ST_TO_ADDR
21471: LD_VAR 0 2
21475: PUSH
21476: FOR_TO
21477: IFFALSE 21504
// if Prob ( 60 ) then
21479: LD_INT 60
21481: PPUSH
21482: CALL_OW 13
21486: IFFALSE 21502
// SetSide ( i , side ) ;
21488: LD_VAR 0 1
21492: PPUSH
21493: LD_VAR 0 3
21497: PPUSH
21498: CALL_OW 235
21502: GO 21476
21504: POP
21505: POP
// end ;
21506: PPOPN 3
21508: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21509: LD_EXP 57
21513: PUSH
21514: LD_EXP 70
21518: AND
21519: IFFALSE 21638
21521: GO 21523
21523: DISABLE
21524: LD_INT 0
21526: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21527: LD_ADDR_VAR 0 1
21531: PUSH
21532: LD_INT 22
21534: PUSH
21535: LD_OWVAR 2
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 21
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 3
21556: PUSH
21557: LD_INT 23
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: PPUSH
21576: CALL_OW 69
21580: PUSH
21581: FOR_IN
21582: IFFALSE 21636
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 257
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 3
21602: PUSH
21603: LD_INT 4
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: IN
21612: IFFALSE 21634
// SetClass ( un , rand ( 1 , 4 ) ) ;
21614: LD_VAR 0 1
21618: PPUSH
21619: LD_INT 1
21621: PPUSH
21622: LD_INT 4
21624: PPUSH
21625: CALL_OW 12
21629: PPUSH
21630: CALL_OW 336
21634: GO 21581
21636: POP
21637: POP
// end ;
21638: PPOPN 1
21640: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21641: LD_EXP 57
21645: PUSH
21646: LD_EXP 69
21650: AND
21651: IFFALSE 21730
21653: GO 21655
21655: DISABLE
21656: LD_INT 0
21658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21659: LD_ADDR_VAR 0 1
21663: PUSH
21664: LD_INT 22
21666: PUSH
21667: LD_OWVAR 2
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 3
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PPUSH
21690: CALL_OW 69
21694: ST_TO_ADDR
// if not tmp then
21695: LD_VAR 0 1
21699: NOT
21700: IFFALSE 21704
// exit ;
21702: GO 21730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21704: LD_VAR 0 1
21708: PUSH
21709: LD_INT 1
21711: PPUSH
21712: LD_VAR 0 1
21716: PPUSH
21717: CALL_OW 12
21721: ARRAY
21722: PPUSH
21723: LD_INT 100
21725: PPUSH
21726: CALL_OW 234
// end ;
21730: PPOPN 1
21732: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21733: LD_EXP 57
21737: PUSH
21738: LD_EXP 71
21742: AND
21743: IFFALSE 21841
21745: GO 21747
21747: DISABLE
21748: LD_INT 0
21750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21751: LD_ADDR_VAR 0 1
21755: PUSH
21756: LD_INT 22
21758: PUSH
21759: LD_OWVAR 2
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 21
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 69
21786: ST_TO_ADDR
// if not tmp then
21787: LD_VAR 0 1
21791: NOT
21792: IFFALSE 21796
// exit ;
21794: GO 21841
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21796: LD_VAR 0 1
21800: PUSH
21801: LD_INT 1
21803: PPUSH
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 12
21813: ARRAY
21814: PPUSH
21815: LD_INT 1
21817: PPUSH
21818: LD_INT 4
21820: PPUSH
21821: CALL_OW 12
21825: PPUSH
21826: LD_INT 3000
21828: PPUSH
21829: LD_INT 9000
21831: PPUSH
21832: CALL_OW 12
21836: PPUSH
21837: CALL_OW 492
// end ;
21841: PPOPN 1
21843: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21844: LD_EXP 57
21848: PUSH
21849: LD_EXP 72
21853: AND
21854: IFFALSE 21874
21856: GO 21858
21858: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21859: LD_INT 1
21861: PPUSH
21862: LD_OWVAR 2
21866: PPUSH
21867: LD_INT 0
21869: PPUSH
21870: CALL_OW 324
21874: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21875: LD_EXP 57
21879: PUSH
21880: LD_EXP 73
21884: AND
21885: IFFALSE 21968
21887: GO 21889
21889: DISABLE
21890: LD_INT 0
21892: PPUSH
21893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21894: LD_ADDR_VAR 0 2
21898: PUSH
21899: LD_INT 22
21901: PUSH
21902: LD_OWVAR 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 21
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PPUSH
21925: CALL_OW 69
21929: ST_TO_ADDR
// if not tmp then
21930: LD_VAR 0 2
21934: NOT
21935: IFFALSE 21939
// exit ;
21937: GO 21968
// for i in tmp do
21939: LD_ADDR_VAR 0 1
21943: PUSH
21944: LD_VAR 0 2
21948: PUSH
21949: FOR_IN
21950: IFFALSE 21966
// SetBLevel ( i , 10 ) ;
21952: LD_VAR 0 1
21956: PPUSH
21957: LD_INT 10
21959: PPUSH
21960: CALL_OW 241
21964: GO 21949
21966: POP
21967: POP
// end ;
21968: PPOPN 2
21970: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21971: LD_EXP 57
21975: PUSH
21976: LD_EXP 74
21980: AND
21981: IFFALSE 22092
21983: GO 21985
21985: DISABLE
21986: LD_INT 0
21988: PPUSH
21989: PPUSH
21990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21991: LD_ADDR_VAR 0 3
21995: PUSH
21996: LD_INT 22
21998: PUSH
21999: LD_OWVAR 2
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 25
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PPUSH
22022: CALL_OW 69
22026: ST_TO_ADDR
// if not tmp then
22027: LD_VAR 0 3
22031: NOT
22032: IFFALSE 22036
// exit ;
22034: GO 22092
// un := tmp [ rand ( 1 , tmp ) ] ;
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: LD_VAR 0 3
22045: PUSH
22046: LD_INT 1
22048: PPUSH
22049: LD_VAR 0 3
22053: PPUSH
22054: CALL_OW 12
22058: ARRAY
22059: ST_TO_ADDR
// if Crawls ( un ) then
22060: LD_VAR 0 2
22064: PPUSH
22065: CALL_OW 318
22069: IFFALSE 22080
// ComWalk ( un ) ;
22071: LD_VAR 0 2
22075: PPUSH
22076: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22080: LD_VAR 0 2
22084: PPUSH
22085: LD_INT 5
22087: PPUSH
22088: CALL_OW 336
// end ;
22092: PPOPN 3
22094: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22095: LD_EXP 57
22099: PUSH
22100: LD_EXP 75
22104: AND
22105: PUSH
22106: LD_OWVAR 67
22110: PUSH
22111: LD_INT 4
22113: LESS
22114: AND
22115: IFFALSE 22134
22117: GO 22119
22119: DISABLE
// begin Difficulty := Difficulty + 1 ;
22120: LD_ADDR_OWVAR 67
22124: PUSH
22125: LD_OWVAR 67
22129: PUSH
22130: LD_INT 1
22132: PLUS
22133: ST_TO_ADDR
// end ;
22134: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22135: LD_EXP 57
22139: PUSH
22140: LD_EXP 76
22144: AND
22145: IFFALSE 22248
22147: GO 22149
22149: DISABLE
22150: LD_INT 0
22152: PPUSH
// begin for i := 1 to 5 do
22153: LD_ADDR_VAR 0 1
22157: PUSH
22158: DOUBLE
22159: LD_INT 1
22161: DEC
22162: ST_TO_ADDR
22163: LD_INT 5
22165: PUSH
22166: FOR_TO
22167: IFFALSE 22246
// begin uc_nation := nation_nature ;
22169: LD_ADDR_OWVAR 21
22173: PUSH
22174: LD_INT 0
22176: ST_TO_ADDR
// uc_side := 0 ;
22177: LD_ADDR_OWVAR 20
22181: PUSH
22182: LD_INT 0
22184: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22185: LD_ADDR_OWVAR 29
22189: PUSH
22190: LD_INT 12
22192: PUSH
22193: LD_INT 12
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: ST_TO_ADDR
// hc_agressivity := 20 ;
22200: LD_ADDR_OWVAR 35
22204: PUSH
22205: LD_INT 20
22207: ST_TO_ADDR
// hc_class := class_tiger ;
22208: LD_ADDR_OWVAR 28
22212: PUSH
22213: LD_INT 14
22215: ST_TO_ADDR
// hc_gallery :=  ;
22216: LD_ADDR_OWVAR 33
22220: PUSH
22221: LD_STRING 
22223: ST_TO_ADDR
// hc_name :=  ;
22224: LD_ADDR_OWVAR 26
22228: PUSH
22229: LD_STRING 
22231: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22232: CALL_OW 44
22236: PPUSH
22237: LD_INT 0
22239: PPUSH
22240: CALL_OW 51
// end ;
22244: GO 22166
22246: POP
22247: POP
// end ;
22248: PPOPN 1
22250: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22251: LD_EXP 57
22255: PUSH
22256: LD_EXP 77
22260: AND
22261: IFFALSE 22270
22263: GO 22265
22265: DISABLE
// StreamSibBomb ;
22266: CALL 22271 0 0
22270: END
// export function StreamSibBomb ; var i , x , y ; begin
22271: LD_INT 0
22273: PPUSH
22274: PPUSH
22275: PPUSH
22276: PPUSH
// result := false ;
22277: LD_ADDR_VAR 0 1
22281: PUSH
22282: LD_INT 0
22284: ST_TO_ADDR
// for i := 1 to 16 do
22285: LD_ADDR_VAR 0 2
22289: PUSH
22290: DOUBLE
22291: LD_INT 1
22293: DEC
22294: ST_TO_ADDR
22295: LD_INT 16
22297: PUSH
22298: FOR_TO
22299: IFFALSE 22498
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22301: LD_ADDR_VAR 0 3
22305: PUSH
22306: LD_INT 10
22308: PUSH
22309: LD_INT 20
22311: PUSH
22312: LD_INT 30
22314: PUSH
22315: LD_INT 40
22317: PUSH
22318: LD_INT 50
22320: PUSH
22321: LD_INT 60
22323: PUSH
22324: LD_INT 70
22326: PUSH
22327: LD_INT 80
22329: PUSH
22330: LD_INT 90
22332: PUSH
22333: LD_INT 100
22335: PUSH
22336: LD_INT 110
22338: PUSH
22339: LD_INT 120
22341: PUSH
22342: LD_INT 130
22344: PUSH
22345: LD_INT 140
22347: PUSH
22348: LD_INT 150
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 1
22370: PPUSH
22371: LD_INT 15
22373: PPUSH
22374: CALL_OW 12
22378: ARRAY
22379: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22380: LD_ADDR_VAR 0 4
22384: PUSH
22385: LD_INT 10
22387: PUSH
22388: LD_INT 20
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_INT 40
22396: PUSH
22397: LD_INT 50
22399: PUSH
22400: LD_INT 60
22402: PUSH
22403: LD_INT 70
22405: PUSH
22406: LD_INT 80
22408: PUSH
22409: LD_INT 90
22411: PUSH
22412: LD_INT 100
22414: PUSH
22415: LD_INT 110
22417: PUSH
22418: LD_INT 120
22420: PUSH
22421: LD_INT 130
22423: PUSH
22424: LD_INT 140
22426: PUSH
22427: LD_INT 150
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 1
22449: PPUSH
22450: LD_INT 15
22452: PPUSH
22453: CALL_OW 12
22457: ARRAY
22458: ST_TO_ADDR
// if ValidHex ( x , y ) then
22459: LD_VAR 0 3
22463: PPUSH
22464: LD_VAR 0 4
22468: PPUSH
22469: CALL_OW 488
22473: IFFALSE 22496
// begin result := [ x , y ] ;
22475: LD_ADDR_VAR 0 1
22479: PUSH
22480: LD_VAR 0 3
22484: PUSH
22485: LD_VAR 0 4
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: ST_TO_ADDR
// break ;
22494: GO 22498
// end ; end ;
22496: GO 22298
22498: POP
22499: POP
// if result then
22500: LD_VAR 0 1
22504: IFFALSE 22564
// begin ToLua ( playSibBomb() ) ;
22506: LD_STRING playSibBomb()
22508: PPUSH
22509: CALL_OW 559
// wait ( 0 0$14 ) ;
22513: LD_INT 490
22515: PPUSH
22516: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22520: LD_VAR 0 1
22524: PUSH
22525: LD_INT 1
22527: ARRAY
22528: PPUSH
22529: LD_VAR 0 1
22533: PUSH
22534: LD_INT 2
22536: ARRAY
22537: PPUSH
22538: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22542: LD_VAR 0 1
22546: PUSH
22547: LD_INT 1
22549: ARRAY
22550: PPUSH
22551: LD_VAR 0 1
22555: PUSH
22556: LD_INT 2
22558: ARRAY
22559: PPUSH
22560: CALL_OW 429
// end ; end ;
22564: LD_VAR 0 1
22568: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22569: LD_EXP 57
22573: PUSH
22574: LD_EXP 79
22578: AND
22579: IFFALSE 22591
22581: GO 22583
22583: DISABLE
// YouLost (  ) ;
22584: LD_STRING 
22586: PPUSH
22587: CALL_OW 104
22591: END
// every 0 0$1 trigger StreamModeActive and sFog do
22592: LD_EXP 57
22596: PUSH
22597: LD_EXP 78
22601: AND
22602: IFFALSE 22616
22604: GO 22606
22606: DISABLE
// FogOff ( your_side ) ;
22607: LD_OWVAR 2
22611: PPUSH
22612: CALL_OW 344
22616: END
// every 0 0$1 trigger StreamModeActive and sSun do
22617: LD_EXP 57
22621: PUSH
22622: LD_EXP 80
22626: AND
22627: IFFALSE 22655
22629: GO 22631
22631: DISABLE
// begin solar_recharge_percent := 0 ;
22632: LD_ADDR_OWVAR 79
22636: PUSH
22637: LD_INT 0
22639: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22640: LD_INT 10500
22642: PPUSH
22643: CALL_OW 67
// solar_recharge_percent := 100 ;
22647: LD_ADDR_OWVAR 79
22651: PUSH
22652: LD_INT 100
22654: ST_TO_ADDR
// end ;
22655: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22656: LD_EXP 57
22660: PUSH
22661: LD_EXP 81
22665: AND
22666: IFFALSE 22905
22668: GO 22670
22670: DISABLE
22671: LD_INT 0
22673: PPUSH
22674: PPUSH
22675: PPUSH
// begin tmp := [ ] ;
22676: LD_ADDR_VAR 0 3
22680: PUSH
22681: EMPTY
22682: ST_TO_ADDR
// for i := 1 to 6 do
22683: LD_ADDR_VAR 0 1
22687: PUSH
22688: DOUBLE
22689: LD_INT 1
22691: DEC
22692: ST_TO_ADDR
22693: LD_INT 6
22695: PUSH
22696: FOR_TO
22697: IFFALSE 22802
// begin uc_nation := nation_nature ;
22699: LD_ADDR_OWVAR 21
22703: PUSH
22704: LD_INT 0
22706: ST_TO_ADDR
// uc_side := 0 ;
22707: LD_ADDR_OWVAR 20
22711: PUSH
22712: LD_INT 0
22714: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22715: LD_ADDR_OWVAR 29
22719: PUSH
22720: LD_INT 12
22722: PUSH
22723: LD_INT 12
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: ST_TO_ADDR
// hc_agressivity := 20 ;
22730: LD_ADDR_OWVAR 35
22734: PUSH
22735: LD_INT 20
22737: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22738: LD_ADDR_OWVAR 28
22742: PUSH
22743: LD_INT 17
22745: ST_TO_ADDR
// hc_gallery :=  ;
22746: LD_ADDR_OWVAR 33
22750: PUSH
22751: LD_STRING 
22753: ST_TO_ADDR
// hc_name :=  ;
22754: LD_ADDR_OWVAR 26
22758: PUSH
22759: LD_STRING 
22761: ST_TO_ADDR
// un := CreateHuman ;
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: CALL_OW 44
22771: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22772: LD_VAR 0 2
22776: PPUSH
22777: LD_INT 1
22779: PPUSH
22780: CALL_OW 51
// tmp := tmp ^ un ;
22784: LD_ADDR_VAR 0 3
22788: PUSH
22789: LD_VAR 0 3
22793: PUSH
22794: LD_VAR 0 2
22798: ADD
22799: ST_TO_ADDR
// end ;
22800: GO 22696
22802: POP
22803: POP
// repeat wait ( 0 0$1 ) ;
22804: LD_INT 35
22806: PPUSH
22807: CALL_OW 67
// for un in tmp do
22811: LD_ADDR_VAR 0 2
22815: PUSH
22816: LD_VAR 0 3
22820: PUSH
22821: FOR_IN
22822: IFFALSE 22896
// begin if IsDead ( un ) then
22824: LD_VAR 0 2
22828: PPUSH
22829: CALL_OW 301
22833: IFFALSE 22853
// begin tmp := tmp diff un ;
22835: LD_ADDR_VAR 0 3
22839: PUSH
22840: LD_VAR 0 3
22844: PUSH
22845: LD_VAR 0 2
22849: DIFF
22850: ST_TO_ADDR
// continue ;
22851: GO 22821
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22853: LD_VAR 0 2
22857: PPUSH
22858: LD_INT 3
22860: PUSH
22861: LD_INT 22
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PPUSH
22875: CALL_OW 69
22879: PPUSH
22880: LD_VAR 0 2
22884: PPUSH
22885: CALL_OW 74
22889: PPUSH
22890: CALL_OW 115
// end ;
22894: GO 22821
22896: POP
22897: POP
// until not tmp ;
22898: LD_VAR 0 3
22902: NOT
22903: IFFALSE 22804
// end ;
22905: PPOPN 3
22907: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22908: LD_EXP 57
22912: PUSH
22913: LD_EXP 82
22917: AND
22918: IFFALSE 22972
22920: GO 22922
22922: DISABLE
// begin ToLua ( displayTroll(); ) ;
22923: LD_STRING displayTroll();
22925: PPUSH
22926: CALL_OW 559
// wait ( 3 3$00 ) ;
22930: LD_INT 6300
22932: PPUSH
22933: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22937: LD_STRING hideTroll();
22939: PPUSH
22940: CALL_OW 559
// wait ( 1 1$00 ) ;
22944: LD_INT 2100
22946: PPUSH
22947: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22951: LD_STRING displayTroll();
22953: PPUSH
22954: CALL_OW 559
// wait ( 1 1$00 ) ;
22958: LD_INT 2100
22960: PPUSH
22961: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22965: LD_STRING hideTroll();
22967: PPUSH
22968: CALL_OW 559
// end ;
22972: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22973: LD_EXP 57
22977: PUSH
22978: LD_EXP 83
22982: AND
22983: IFFALSE 23046
22985: GO 22987
22987: DISABLE
22988: LD_INT 0
22990: PPUSH
// begin p := 0 ;
22991: LD_ADDR_VAR 0 1
22995: PUSH
22996: LD_INT 0
22998: ST_TO_ADDR
// repeat game_speed := 1 ;
22999: LD_ADDR_OWVAR 65
23003: PUSH
23004: LD_INT 1
23006: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23007: LD_INT 35
23009: PPUSH
23010: CALL_OW 67
// p := p + 1 ;
23014: LD_ADDR_VAR 0 1
23018: PUSH
23019: LD_VAR 0 1
23023: PUSH
23024: LD_INT 1
23026: PLUS
23027: ST_TO_ADDR
// until p >= 60 ;
23028: LD_VAR 0 1
23032: PUSH
23033: LD_INT 60
23035: GREATEREQUAL
23036: IFFALSE 22999
// game_speed := 4 ;
23038: LD_ADDR_OWVAR 65
23042: PUSH
23043: LD_INT 4
23045: ST_TO_ADDR
// end ;
23046: PPOPN 1
23048: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23049: LD_EXP 57
23053: PUSH
23054: LD_EXP 84
23058: AND
23059: IFFALSE 23205
23061: GO 23063
23063: DISABLE
23064: LD_INT 0
23066: PPUSH
23067: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23068: LD_ADDR_VAR 0 1
23072: PUSH
23073: LD_INT 22
23075: PUSH
23076: LD_OWVAR 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: LD_INT 30
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 30
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PPUSH
23117: CALL_OW 69
23121: ST_TO_ADDR
// if not depot then
23122: LD_VAR 0 1
23126: NOT
23127: IFFALSE 23131
// exit ;
23129: GO 23205
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23131: LD_ADDR_VAR 0 2
23135: PUSH
23136: LD_VAR 0 1
23140: PUSH
23141: LD_INT 1
23143: PPUSH
23144: LD_VAR 0 1
23148: PPUSH
23149: CALL_OW 12
23153: ARRAY
23154: PPUSH
23155: CALL_OW 274
23159: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23160: LD_VAR 0 2
23164: PPUSH
23165: LD_INT 1
23167: PPUSH
23168: LD_INT 0
23170: PPUSH
23171: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23175: LD_VAR 0 2
23179: PPUSH
23180: LD_INT 2
23182: PPUSH
23183: LD_INT 0
23185: PPUSH
23186: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23190: LD_VAR 0 2
23194: PPUSH
23195: LD_INT 3
23197: PPUSH
23198: LD_INT 0
23200: PPUSH
23201: CALL_OW 277
// end ;
23205: PPOPN 2
23207: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23208: LD_EXP 57
23212: PUSH
23213: LD_EXP 85
23217: AND
23218: IFFALSE 23315
23220: GO 23222
23222: DISABLE
23223: LD_INT 0
23225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23226: LD_ADDR_VAR 0 1
23230: PUSH
23231: LD_INT 22
23233: PUSH
23234: LD_OWVAR 2
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 21
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 3
23255: PUSH
23256: LD_INT 23
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: LIST
23274: PPUSH
23275: CALL_OW 69
23279: ST_TO_ADDR
// if not tmp then
23280: LD_VAR 0 1
23284: NOT
23285: IFFALSE 23289
// exit ;
23287: GO 23315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23289: LD_VAR 0 1
23293: PUSH
23294: LD_INT 1
23296: PPUSH
23297: LD_VAR 0 1
23301: PPUSH
23302: CALL_OW 12
23306: ARRAY
23307: PPUSH
23308: LD_INT 200
23310: PPUSH
23311: CALL_OW 234
// end ;
23315: PPOPN 1
23317: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23318: LD_EXP 57
23322: PUSH
23323: LD_EXP 86
23327: AND
23328: IFFALSE 23407
23330: GO 23332
23332: DISABLE
23333: LD_INT 0
23335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23336: LD_ADDR_VAR 0 1
23340: PUSH
23341: LD_INT 22
23343: PUSH
23344: LD_OWVAR 2
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 2
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PPUSH
23367: CALL_OW 69
23371: ST_TO_ADDR
// if not tmp then
23372: LD_VAR 0 1
23376: NOT
23377: IFFALSE 23381
// exit ;
23379: GO 23407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23381: LD_VAR 0 1
23385: PUSH
23386: LD_INT 1
23388: PPUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 12
23398: ARRAY
23399: PPUSH
23400: LD_INT 60
23402: PPUSH
23403: CALL_OW 234
// end ;
23407: PPOPN 1
23409: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23410: LD_EXP 57
23414: PUSH
23415: LD_EXP 87
23419: AND
23420: IFFALSE 23519
23422: GO 23424
23424: DISABLE
23425: LD_INT 0
23427: PPUSH
23428: PPUSH
// begin enable ;
23429: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23430: LD_ADDR_VAR 0 1
23434: PUSH
23435: LD_INT 22
23437: PUSH
23438: LD_OWVAR 2
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 61
23449: PUSH
23450: EMPTY
23451: LIST
23452: PUSH
23453: LD_INT 33
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: LIST
23467: PPUSH
23468: CALL_OW 69
23472: ST_TO_ADDR
// if not tmp then
23473: LD_VAR 0 1
23477: NOT
23478: IFFALSE 23482
// exit ;
23480: GO 23519
// for i in tmp do
23482: LD_ADDR_VAR 0 2
23486: PUSH
23487: LD_VAR 0 1
23491: PUSH
23492: FOR_IN
23493: IFFALSE 23517
// if IsControledBy ( i ) then
23495: LD_VAR 0 2
23499: PPUSH
23500: CALL_OW 312
23504: IFFALSE 23515
// ComUnlink ( i ) ;
23506: LD_VAR 0 2
23510: PPUSH
23511: CALL_OW 136
23515: GO 23492
23517: POP
23518: POP
// end ;
23519: PPOPN 2
23521: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23522: LD_EXP 57
23526: PUSH
23527: LD_EXP 88
23531: AND
23532: IFFALSE 23672
23534: GO 23536
23536: DISABLE
23537: LD_INT 0
23539: PPUSH
23540: PPUSH
// begin ToLua ( displayPowell(); ) ;
23541: LD_STRING displayPowell();
23543: PPUSH
23544: CALL_OW 559
// uc_side := 0 ;
23548: LD_ADDR_OWVAR 20
23552: PUSH
23553: LD_INT 0
23555: ST_TO_ADDR
// uc_nation := 2 ;
23556: LD_ADDR_OWVAR 21
23560: PUSH
23561: LD_INT 2
23563: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23564: LD_ADDR_OWVAR 37
23568: PUSH
23569: LD_INT 14
23571: ST_TO_ADDR
// vc_engine := engine_siberite ;
23572: LD_ADDR_OWVAR 39
23576: PUSH
23577: LD_INT 3
23579: ST_TO_ADDR
// vc_control := control_apeman ;
23580: LD_ADDR_OWVAR 38
23584: PUSH
23585: LD_INT 5
23587: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23588: LD_ADDR_OWVAR 40
23592: PUSH
23593: LD_INT 29
23595: ST_TO_ADDR
// un := CreateVehicle ;
23596: LD_ADDR_VAR 0 2
23600: PUSH
23601: CALL_OW 45
23605: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23606: LD_VAR 0 2
23610: PPUSH
23611: LD_INT 1
23613: PPUSH
23614: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23618: LD_INT 35
23620: PPUSH
23621: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23625: LD_VAR 0 2
23629: PPUSH
23630: LD_INT 22
23632: PUSH
23633: LD_OWVAR 2
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PPUSH
23642: CALL_OW 69
23646: PPUSH
23647: LD_VAR 0 2
23651: PPUSH
23652: CALL_OW 74
23656: PPUSH
23657: CALL_OW 115
// until IsDead ( un ) ;
23661: LD_VAR 0 2
23665: PPUSH
23666: CALL_OW 301
23670: IFFALSE 23618
// end ;
23672: PPOPN 2
23674: END
// every 0 0$1 trigger StreamModeActive and sStu do
23675: LD_EXP 57
23679: PUSH
23680: LD_EXP 96
23684: AND
23685: IFFALSE 23701
23687: GO 23689
23689: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23690: LD_STRING displayStucuk();
23692: PPUSH
23693: CALL_OW 559
// ResetFog ;
23697: CALL_OW 335
// end ;
23701: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23702: LD_EXP 57
23706: PUSH
23707: LD_EXP 89
23711: AND
23712: IFFALSE 23853
23714: GO 23716
23716: DISABLE
23717: LD_INT 0
23719: PPUSH
23720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23721: LD_ADDR_VAR 0 2
23725: PUSH
23726: LD_INT 22
23728: PUSH
23729: LD_OWVAR 2
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 21
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PPUSH
23752: CALL_OW 69
23756: ST_TO_ADDR
// if not tmp then
23757: LD_VAR 0 2
23761: NOT
23762: IFFALSE 23766
// exit ;
23764: GO 23853
// un := tmp [ rand ( 1 , tmp ) ] ;
23766: LD_ADDR_VAR 0 1
23770: PUSH
23771: LD_VAR 0 2
23775: PUSH
23776: LD_INT 1
23778: PPUSH
23779: LD_VAR 0 2
23783: PPUSH
23784: CALL_OW 12
23788: ARRAY
23789: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23790: LD_VAR 0 1
23794: PPUSH
23795: LD_INT 0
23797: PPUSH
23798: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_OWVAR 3
23811: PUSH
23812: LD_VAR 0 1
23816: DIFF
23817: PPUSH
23818: LD_VAR 0 1
23822: PPUSH
23823: CALL_OW 74
23827: PPUSH
23828: CALL_OW 115
// wait ( 0 0$20 ) ;
23832: LD_INT 700
23834: PPUSH
23835: CALL_OW 67
// SetSide ( un , your_side ) ;
23839: LD_VAR 0 1
23843: PPUSH
23844: LD_OWVAR 2
23848: PPUSH
23849: CALL_OW 235
// end ;
23853: PPOPN 2
23855: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23856: LD_EXP 57
23860: PUSH
23861: LD_EXP 90
23865: AND
23866: IFFALSE 23972
23868: GO 23870
23870: DISABLE
23871: LD_INT 0
23873: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23874: LD_ADDR_VAR 0 1
23878: PUSH
23879: LD_INT 22
23881: PUSH
23882: LD_OWVAR 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 2
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 30
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PPUSH
23923: CALL_OW 69
23927: ST_TO_ADDR
// if not depot then
23928: LD_VAR 0 1
23932: NOT
23933: IFFALSE 23937
// exit ;
23935: GO 23972
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23937: LD_VAR 0 1
23941: PUSH
23942: LD_INT 1
23944: ARRAY
23945: PPUSH
23946: CALL_OW 250
23950: PPUSH
23951: LD_VAR 0 1
23955: PUSH
23956: LD_INT 1
23958: ARRAY
23959: PPUSH
23960: CALL_OW 251
23964: PPUSH
23965: LD_INT 70
23967: PPUSH
23968: CALL_OW 495
// end ;
23972: PPOPN 1
23974: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23975: LD_EXP 57
23979: PUSH
23980: LD_EXP 91
23984: AND
23985: IFFALSE 24196
23987: GO 23989
23989: DISABLE
23990: LD_INT 0
23992: PPUSH
23993: PPUSH
23994: PPUSH
23995: PPUSH
23996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23997: LD_ADDR_VAR 0 5
24001: PUSH
24002: LD_INT 22
24004: PUSH
24005: LD_OWVAR 2
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 21
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PPUSH
24028: CALL_OW 69
24032: ST_TO_ADDR
// if not tmp then
24033: LD_VAR 0 5
24037: NOT
24038: IFFALSE 24042
// exit ;
24040: GO 24196
// for i in tmp do
24042: LD_ADDR_VAR 0 1
24046: PUSH
24047: LD_VAR 0 5
24051: PUSH
24052: FOR_IN
24053: IFFALSE 24194
// begin d := rand ( 0 , 5 ) ;
24055: LD_ADDR_VAR 0 4
24059: PUSH
24060: LD_INT 0
24062: PPUSH
24063: LD_INT 5
24065: PPUSH
24066: CALL_OW 12
24070: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24071: LD_ADDR_VAR 0 2
24075: PUSH
24076: LD_VAR 0 1
24080: PPUSH
24081: CALL_OW 250
24085: PPUSH
24086: LD_VAR 0 4
24090: PPUSH
24091: LD_INT 3
24093: PPUSH
24094: LD_INT 12
24096: PPUSH
24097: CALL_OW 12
24101: PPUSH
24102: CALL_OW 272
24106: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24107: LD_ADDR_VAR 0 3
24111: PUSH
24112: LD_VAR 0 1
24116: PPUSH
24117: CALL_OW 251
24121: PPUSH
24122: LD_VAR 0 4
24126: PPUSH
24127: LD_INT 3
24129: PPUSH
24130: LD_INT 12
24132: PPUSH
24133: CALL_OW 12
24137: PPUSH
24138: CALL_OW 273
24142: ST_TO_ADDR
// if ValidHex ( x , y ) then
24143: LD_VAR 0 2
24147: PPUSH
24148: LD_VAR 0 3
24152: PPUSH
24153: CALL_OW 488
24157: IFFALSE 24192
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24159: LD_VAR 0 1
24163: PPUSH
24164: LD_VAR 0 2
24168: PPUSH
24169: LD_VAR 0 3
24173: PPUSH
24174: LD_INT 3
24176: PPUSH
24177: LD_INT 6
24179: PPUSH
24180: CALL_OW 12
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: CALL_OW 483
// end ;
24192: GO 24052
24194: POP
24195: POP
// end ;
24196: PPOPN 5
24198: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24199: LD_EXP 57
24203: PUSH
24204: LD_EXP 92
24208: AND
24209: IFFALSE 24303
24211: GO 24213
24213: DISABLE
24214: LD_INT 0
24216: PPUSH
24217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24218: LD_ADDR_VAR 0 2
24222: PUSH
24223: LD_INT 22
24225: PUSH
24226: LD_OWVAR 2
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 32
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 21
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 69
24264: ST_TO_ADDR
// if not tmp then
24265: LD_VAR 0 2
24269: NOT
24270: IFFALSE 24274
// exit ;
24272: GO 24303
// for i in tmp do
24274: LD_ADDR_VAR 0 1
24278: PUSH
24279: LD_VAR 0 2
24283: PUSH
24284: FOR_IN
24285: IFFALSE 24301
// SetFuel ( i , 0 ) ;
24287: LD_VAR 0 1
24291: PPUSH
24292: LD_INT 0
24294: PPUSH
24295: CALL_OW 240
24299: GO 24284
24301: POP
24302: POP
// end ;
24303: PPOPN 2
24305: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24306: LD_EXP 57
24310: PUSH
24311: LD_EXP 93
24315: AND
24316: IFFALSE 24382
24318: GO 24320
24320: DISABLE
24321: LD_INT 0
24323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24324: LD_ADDR_VAR 0 1
24328: PUSH
24329: LD_INT 22
24331: PUSH
24332: LD_OWVAR 2
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 30
24343: PUSH
24344: LD_INT 29
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PPUSH
24355: CALL_OW 69
24359: ST_TO_ADDR
// if not tmp then
24360: LD_VAR 0 1
24364: NOT
24365: IFFALSE 24369
// exit ;
24367: GO 24382
// DestroyUnit ( tmp [ 1 ] ) ;
24369: LD_VAR 0 1
24373: PUSH
24374: LD_INT 1
24376: ARRAY
24377: PPUSH
24378: CALL_OW 65
// end ;
24382: PPOPN 1
24384: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24385: LD_EXP 57
24389: PUSH
24390: LD_EXP 95
24394: AND
24395: IFFALSE 24524
24397: GO 24399
24399: DISABLE
24400: LD_INT 0
24402: PPUSH
// begin uc_side := 0 ;
24403: LD_ADDR_OWVAR 20
24407: PUSH
24408: LD_INT 0
24410: ST_TO_ADDR
// uc_nation := nation_arabian ;
24411: LD_ADDR_OWVAR 21
24415: PUSH
24416: LD_INT 2
24418: ST_TO_ADDR
// hc_gallery :=  ;
24419: LD_ADDR_OWVAR 33
24423: PUSH
24424: LD_STRING 
24426: ST_TO_ADDR
// hc_name :=  ;
24427: LD_ADDR_OWVAR 26
24431: PUSH
24432: LD_STRING 
24434: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24435: LD_INT 1
24437: PPUSH
24438: LD_INT 11
24440: PPUSH
24441: LD_INT 10
24443: PPUSH
24444: CALL_OW 380
// un := CreateHuman ;
24448: LD_ADDR_VAR 0 1
24452: PUSH
24453: CALL_OW 44
24457: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24458: LD_VAR 0 1
24462: PPUSH
24463: LD_INT 1
24465: PPUSH
24466: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24470: LD_INT 35
24472: PPUSH
24473: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24477: LD_VAR 0 1
24481: PPUSH
24482: LD_INT 22
24484: PUSH
24485: LD_OWVAR 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PPUSH
24494: CALL_OW 69
24498: PPUSH
24499: LD_VAR 0 1
24503: PPUSH
24504: CALL_OW 74
24508: PPUSH
24509: CALL_OW 115
// until IsDead ( un ) ;
24513: LD_VAR 0 1
24517: PPUSH
24518: CALL_OW 301
24522: IFFALSE 24470
// end ;
24524: PPOPN 1
24526: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24527: LD_EXP 57
24531: PUSH
24532: LD_EXP 97
24536: AND
24537: IFFALSE 24549
24539: GO 24541
24541: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24542: LD_STRING earthquake(getX(game), 0, 32)
24544: PPUSH
24545: CALL_OW 559
24549: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24550: LD_EXP 57
24554: PUSH
24555: LD_EXP 98
24559: AND
24560: IFFALSE 24651
24562: GO 24564
24564: DISABLE
24565: LD_INT 0
24567: PPUSH
// begin enable ;
24568: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24569: LD_ADDR_VAR 0 1
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_OWVAR 2
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 21
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 33
24598: PUSH
24599: LD_INT 3
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: LIST
24610: PPUSH
24611: CALL_OW 69
24615: ST_TO_ADDR
// if not tmp then
24616: LD_VAR 0 1
24620: NOT
24621: IFFALSE 24625
// exit ;
24623: GO 24651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24625: LD_VAR 0 1
24629: PUSH
24630: LD_INT 1
24632: PPUSH
24633: LD_VAR 0 1
24637: PPUSH
24638: CALL_OW 12
24642: ARRAY
24643: PPUSH
24644: LD_INT 1
24646: PPUSH
24647: CALL_OW 234
// end ;
24651: PPOPN 1
24653: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24654: LD_EXP 57
24658: PUSH
24659: LD_EXP 99
24663: AND
24664: IFFALSE 24805
24666: GO 24668
24668: DISABLE
24669: LD_INT 0
24671: PPUSH
24672: PPUSH
24673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24674: LD_ADDR_VAR 0 3
24678: PUSH
24679: LD_INT 22
24681: PUSH
24682: LD_OWVAR 2
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 25
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PPUSH
24705: CALL_OW 69
24709: ST_TO_ADDR
// if not tmp then
24710: LD_VAR 0 3
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24805
// un := tmp [ rand ( 1 , tmp ) ] ;
24719: LD_ADDR_VAR 0 2
24723: PUSH
24724: LD_VAR 0 3
24728: PUSH
24729: LD_INT 1
24731: PPUSH
24732: LD_VAR 0 3
24736: PPUSH
24737: CALL_OW 12
24741: ARRAY
24742: ST_TO_ADDR
// if Crawls ( un ) then
24743: LD_VAR 0 2
24747: PPUSH
24748: CALL_OW 318
24752: IFFALSE 24763
// ComWalk ( un ) ;
24754: LD_VAR 0 2
24758: PPUSH
24759: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24763: LD_VAR 0 2
24767: PPUSH
24768: LD_INT 9
24770: PPUSH
24771: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24775: LD_INT 28
24777: PPUSH
24778: LD_OWVAR 2
24782: PPUSH
24783: LD_INT 2
24785: PPUSH
24786: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24790: LD_INT 29
24792: PPUSH
24793: LD_OWVAR 2
24797: PPUSH
24798: LD_INT 2
24800: PPUSH
24801: CALL_OW 322
// end ;
24805: PPOPN 3
24807: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24808: LD_EXP 57
24812: PUSH
24813: LD_EXP 100
24817: AND
24818: IFFALSE 24929
24820: GO 24822
24822: DISABLE
24823: LD_INT 0
24825: PPUSH
24826: PPUSH
24827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24828: LD_ADDR_VAR 0 3
24832: PUSH
24833: LD_INT 22
24835: PUSH
24836: LD_OWVAR 2
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 25
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PPUSH
24859: CALL_OW 69
24863: ST_TO_ADDR
// if not tmp then
24864: LD_VAR 0 3
24868: NOT
24869: IFFALSE 24873
// exit ;
24871: GO 24929
// un := tmp [ rand ( 1 , tmp ) ] ;
24873: LD_ADDR_VAR 0 2
24877: PUSH
24878: LD_VAR 0 3
24882: PUSH
24883: LD_INT 1
24885: PPUSH
24886: LD_VAR 0 3
24890: PPUSH
24891: CALL_OW 12
24895: ARRAY
24896: ST_TO_ADDR
// if Crawls ( un ) then
24897: LD_VAR 0 2
24901: PPUSH
24902: CALL_OW 318
24906: IFFALSE 24917
// ComWalk ( un ) ;
24908: LD_VAR 0 2
24912: PPUSH
24913: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_INT 8
24924: PPUSH
24925: CALL_OW 336
// end ;
24929: PPOPN 3
24931: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24932: LD_EXP 57
24936: PUSH
24937: LD_EXP 101
24941: AND
24942: IFFALSE 25086
24944: GO 24946
24946: DISABLE
24947: LD_INT 0
24949: PPUSH
24950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24951: LD_ADDR_VAR 0 2
24955: PUSH
24956: LD_INT 22
24958: PUSH
24959: LD_OWVAR 2
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 34
24983: PUSH
24984: LD_INT 12
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_INT 51
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 34
25003: PUSH
25004: LD_INT 32
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: PPUSH
25022: CALL_OW 69
25026: ST_TO_ADDR
// if not tmp then
25027: LD_VAR 0 2
25031: NOT
25032: IFFALSE 25036
// exit ;
25034: GO 25086
// for i in tmp do
25036: LD_ADDR_VAR 0 1
25040: PUSH
25041: LD_VAR 0 2
25045: PUSH
25046: FOR_IN
25047: IFFALSE 25084
// if GetCargo ( i , mat_artifact ) = 0 then
25049: LD_VAR 0 1
25053: PPUSH
25054: LD_INT 4
25056: PPUSH
25057: CALL_OW 289
25061: PUSH
25062: LD_INT 0
25064: EQUAL
25065: IFFALSE 25082
// SetCargo ( i , mat_siberit , 100 ) ;
25067: LD_VAR 0 1
25071: PPUSH
25072: LD_INT 3
25074: PPUSH
25075: LD_INT 100
25077: PPUSH
25078: CALL_OW 290
25082: GO 25046
25084: POP
25085: POP
// end ;
25086: PPOPN 2
25088: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25089: LD_EXP 57
25093: PUSH
25094: LD_EXP 102
25098: AND
25099: IFFALSE 25282
25101: GO 25103
25103: DISABLE
25104: LD_INT 0
25106: PPUSH
25107: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25108: LD_ADDR_VAR 0 2
25112: PUSH
25113: LD_INT 22
25115: PUSH
25116: LD_OWVAR 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: ST_TO_ADDR
// if not tmp then
25130: LD_VAR 0 2
25134: NOT
25135: IFFALSE 25139
// exit ;
25137: GO 25282
// for i := 1 to 2 do
25139: LD_ADDR_VAR 0 1
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_INT 2
25151: PUSH
25152: FOR_TO
25153: IFFALSE 25280
// begin uc_side := your_side ;
25155: LD_ADDR_OWVAR 20
25159: PUSH
25160: LD_OWVAR 2
25164: ST_TO_ADDR
// uc_nation := nation_american ;
25165: LD_ADDR_OWVAR 21
25169: PUSH
25170: LD_INT 1
25172: ST_TO_ADDR
// vc_chassis := us_morphling ;
25173: LD_ADDR_OWVAR 37
25177: PUSH
25178: LD_INT 5
25180: ST_TO_ADDR
// vc_engine := engine_siberite ;
25181: LD_ADDR_OWVAR 39
25185: PUSH
25186: LD_INT 3
25188: ST_TO_ADDR
// vc_control := control_computer ;
25189: LD_ADDR_OWVAR 38
25193: PUSH
25194: LD_INT 3
25196: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25197: LD_ADDR_OWVAR 40
25201: PUSH
25202: LD_INT 10
25204: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25205: LD_VAR 0 2
25209: PUSH
25210: LD_INT 1
25212: ARRAY
25213: PPUSH
25214: CALL_OW 310
25218: NOT
25219: IFFALSE 25266
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25221: CALL_OW 45
25225: PPUSH
25226: LD_VAR 0 2
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: PPUSH
25235: CALL_OW 250
25239: PPUSH
25240: LD_VAR 0 2
25244: PUSH
25245: LD_INT 1
25247: ARRAY
25248: PPUSH
25249: CALL_OW 251
25253: PPUSH
25254: LD_INT 12
25256: PPUSH
25257: LD_INT 1
25259: PPUSH
25260: CALL_OW 50
25264: GO 25278
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25266: CALL_OW 45
25270: PPUSH
25271: LD_INT 1
25273: PPUSH
25274: CALL_OW 51
// end ;
25278: GO 25152
25280: POP
25281: POP
// end ;
25282: PPOPN 2
25284: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25285: LD_EXP 57
25289: PUSH
25290: LD_EXP 103
25294: AND
25295: IFFALSE 25517
25297: GO 25299
25299: DISABLE
25300: LD_INT 0
25302: PPUSH
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
25307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25308: LD_ADDR_VAR 0 6
25312: PUSH
25313: LD_INT 22
25315: PUSH
25316: LD_OWVAR 2
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 21
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: LD_INT 23
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: LIST
25356: PPUSH
25357: CALL_OW 69
25361: ST_TO_ADDR
// if not tmp then
25362: LD_VAR 0 6
25366: NOT
25367: IFFALSE 25371
// exit ;
25369: GO 25517
// s1 := rand ( 1 , 4 ) ;
25371: LD_ADDR_VAR 0 2
25375: PUSH
25376: LD_INT 1
25378: PPUSH
25379: LD_INT 4
25381: PPUSH
25382: CALL_OW 12
25386: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25387: LD_ADDR_VAR 0 4
25391: PUSH
25392: LD_VAR 0 6
25396: PUSH
25397: LD_INT 1
25399: ARRAY
25400: PPUSH
25401: LD_VAR 0 2
25405: PPUSH
25406: CALL_OW 259
25410: ST_TO_ADDR
// if s1 = 1 then
25411: LD_VAR 0 2
25415: PUSH
25416: LD_INT 1
25418: EQUAL
25419: IFFALSE 25439
// s2 := rand ( 2 , 4 ) else
25421: LD_ADDR_VAR 0 3
25425: PUSH
25426: LD_INT 2
25428: PPUSH
25429: LD_INT 4
25431: PPUSH
25432: CALL_OW 12
25436: ST_TO_ADDR
25437: GO 25447
// s2 := 1 ;
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_INT 1
25446: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25447: LD_ADDR_VAR 0 5
25451: PUSH
25452: LD_VAR 0 6
25456: PUSH
25457: LD_INT 1
25459: ARRAY
25460: PPUSH
25461: LD_VAR 0 3
25465: PPUSH
25466: CALL_OW 259
25470: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25471: LD_VAR 0 6
25475: PUSH
25476: LD_INT 1
25478: ARRAY
25479: PPUSH
25480: LD_VAR 0 2
25484: PPUSH
25485: LD_VAR 0 5
25489: PPUSH
25490: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25494: LD_VAR 0 6
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PPUSH
25503: LD_VAR 0 3
25507: PPUSH
25508: LD_VAR 0 4
25512: PPUSH
25513: CALL_OW 237
// end ;
25517: PPOPN 6
25519: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25520: LD_EXP 57
25524: PUSH
25525: LD_EXP 104
25529: AND
25530: IFFALSE 25609
25532: GO 25534
25534: DISABLE
25535: LD_INT 0
25537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25538: LD_ADDR_VAR 0 1
25542: PUSH
25543: LD_INT 22
25545: PUSH
25546: LD_OWVAR 2
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 30
25557: PUSH
25558: LD_INT 3
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PPUSH
25569: CALL_OW 69
25573: ST_TO_ADDR
// if not tmp then
25574: LD_VAR 0 1
25578: NOT
25579: IFFALSE 25583
// exit ;
25581: GO 25609
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25583: LD_VAR 0 1
25587: PUSH
25588: LD_INT 1
25590: PPUSH
25591: LD_VAR 0 1
25595: PPUSH
25596: CALL_OW 12
25600: ARRAY
25601: PPUSH
25602: LD_INT 1
25604: PPUSH
25605: CALL_OW 234
// end ;
25609: PPOPN 1
25611: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25612: LD_EXP 57
25616: PUSH
25617: LD_EXP 105
25621: AND
25622: IFFALSE 25734
25624: GO 25626
25626: DISABLE
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25631: LD_ADDR_VAR 0 2
25635: PUSH
25636: LD_INT 22
25638: PUSH
25639: LD_OWVAR 2
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: LD_INT 30
25653: PUSH
25654: LD_INT 27
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 30
25663: PUSH
25664: LD_INT 26
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 30
25673: PUSH
25674: LD_INT 28
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PPUSH
25691: CALL_OW 69
25695: ST_TO_ADDR
// if not tmp then
25696: LD_VAR 0 2
25700: NOT
25701: IFFALSE 25705
// exit ;
25703: GO 25734
// for i in tmp do
25705: LD_ADDR_VAR 0 1
25709: PUSH
25710: LD_VAR 0 2
25714: PUSH
25715: FOR_IN
25716: IFFALSE 25732
// SetLives ( i , 1 ) ;
25718: LD_VAR 0 1
25722: PPUSH
25723: LD_INT 1
25725: PPUSH
25726: CALL_OW 234
25730: GO 25715
25732: POP
25733: POP
// end ;
25734: PPOPN 2
25736: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25737: LD_EXP 57
25741: PUSH
25742: LD_EXP 106
25746: AND
25747: IFFALSE 26034
25749: GO 25751
25751: DISABLE
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
// begin i := rand ( 1 , 7 ) ;
25757: LD_ADDR_VAR 0 1
25761: PUSH
25762: LD_INT 1
25764: PPUSH
25765: LD_INT 7
25767: PPUSH
25768: CALL_OW 12
25772: ST_TO_ADDR
// case i of 1 :
25773: LD_VAR 0 1
25777: PUSH
25778: LD_INT 1
25780: DOUBLE
25781: EQUAL
25782: IFTRUE 25786
25784: GO 25796
25786: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25787: LD_STRING earthquake(getX(game), 0, 32)
25789: PPUSH
25790: CALL_OW 559
25794: GO 26034
25796: LD_INT 2
25798: DOUBLE
25799: EQUAL
25800: IFTRUE 25804
25802: GO 25818
25804: POP
// begin ToLua ( displayStucuk(); ) ;
25805: LD_STRING displayStucuk();
25807: PPUSH
25808: CALL_OW 559
// ResetFog ;
25812: CALL_OW 335
// end ; 3 :
25816: GO 26034
25818: LD_INT 3
25820: DOUBLE
25821: EQUAL
25822: IFTRUE 25826
25824: GO 25930
25826: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25827: LD_ADDR_VAR 0 2
25831: PUSH
25832: LD_INT 22
25834: PUSH
25835: LD_OWVAR 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 25
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PPUSH
25858: CALL_OW 69
25862: ST_TO_ADDR
// if not tmp then
25863: LD_VAR 0 2
25867: NOT
25868: IFFALSE 25872
// exit ;
25870: GO 26034
// un := tmp [ rand ( 1 , tmp ) ] ;
25872: LD_ADDR_VAR 0 3
25876: PUSH
25877: LD_VAR 0 2
25881: PUSH
25882: LD_INT 1
25884: PPUSH
25885: LD_VAR 0 2
25889: PPUSH
25890: CALL_OW 12
25894: ARRAY
25895: ST_TO_ADDR
// if Crawls ( un ) then
25896: LD_VAR 0 3
25900: PPUSH
25901: CALL_OW 318
25905: IFFALSE 25916
// ComWalk ( un ) ;
25907: LD_VAR 0 3
25911: PPUSH
25912: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25916: LD_VAR 0 3
25920: PPUSH
25921: LD_INT 8
25923: PPUSH
25924: CALL_OW 336
// end ; 4 :
25928: GO 26034
25930: LD_INT 4
25932: DOUBLE
25933: EQUAL
25934: IFTRUE 25938
25936: GO 26012
25938: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25939: LD_ADDR_VAR 0 2
25943: PUSH
25944: LD_INT 22
25946: PUSH
25947: LD_OWVAR 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 30
25958: PUSH
25959: LD_INT 29
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PPUSH
25970: CALL_OW 69
25974: ST_TO_ADDR
// if not tmp then
25975: LD_VAR 0 2
25979: NOT
25980: IFFALSE 25984
// exit ;
25982: GO 26034
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25984: LD_VAR 0 2
25988: PUSH
25989: LD_INT 1
25991: ARRAY
25992: PPUSH
25993: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25997: LD_VAR 0 2
26001: PUSH
26002: LD_INT 1
26004: ARRAY
26005: PPUSH
26006: CALL_OW 65
// end ; 5 .. 7 :
26010: GO 26034
26012: LD_INT 5
26014: DOUBLE
26015: GREATEREQUAL
26016: IFFALSE 26024
26018: LD_INT 7
26020: DOUBLE
26021: LESSEQUAL
26022: IFTRUE 26026
26024: GO 26033
26026: POP
// StreamSibBomb ; end ;
26027: CALL 22271 0 0
26031: GO 26034
26033: POP
// end ;
26034: PPOPN 3
26036: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26037: LD_EXP 57
26041: PUSH
26042: LD_EXP 107
26046: AND
26047: IFFALSE 26203
26049: GO 26051
26051: DISABLE
26052: LD_INT 0
26054: PPUSH
26055: PPUSH
26056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26057: LD_ADDR_VAR 0 2
26061: PUSH
26062: LD_INT 81
26064: PUSH
26065: LD_OWVAR 2
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: LD_INT 21
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 21
26089: PUSH
26090: LD_INT 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PPUSH
26106: CALL_OW 69
26110: ST_TO_ADDR
// if not tmp then
26111: LD_VAR 0 2
26115: NOT
26116: IFFALSE 26120
// exit ;
26118: GO 26203
// p := 0 ;
26120: LD_ADDR_VAR 0 3
26124: PUSH
26125: LD_INT 0
26127: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26128: LD_INT 35
26130: PPUSH
26131: CALL_OW 67
// p := p + 1 ;
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_VAR 0 3
26144: PUSH
26145: LD_INT 1
26147: PLUS
26148: ST_TO_ADDR
// for i in tmp do
26149: LD_ADDR_VAR 0 1
26153: PUSH
26154: LD_VAR 0 2
26158: PUSH
26159: FOR_IN
26160: IFFALSE 26191
// if GetLives ( i ) < 1000 then
26162: LD_VAR 0 1
26166: PPUSH
26167: CALL_OW 256
26171: PUSH
26172: LD_INT 1000
26174: LESS
26175: IFFALSE 26189
// SetLives ( i , 1000 ) ;
26177: LD_VAR 0 1
26181: PPUSH
26182: LD_INT 1000
26184: PPUSH
26185: CALL_OW 234
26189: GO 26159
26191: POP
26192: POP
// until p > 20 ;
26193: LD_VAR 0 3
26197: PUSH
26198: LD_INT 20
26200: GREATER
26201: IFFALSE 26128
// end ;
26203: PPOPN 3
26205: END
// every 0 0$1 trigger StreamModeActive and sTime do
26206: LD_EXP 57
26210: PUSH
26211: LD_EXP 108
26215: AND
26216: IFFALSE 26251
26218: GO 26220
26220: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26221: LD_INT 28
26223: PPUSH
26224: LD_OWVAR 2
26228: PPUSH
26229: LD_INT 2
26231: PPUSH
26232: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26236: LD_INT 30
26238: PPUSH
26239: LD_OWVAR 2
26243: PPUSH
26244: LD_INT 2
26246: PPUSH
26247: CALL_OW 322
// end ;
26251: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26252: LD_EXP 57
26256: PUSH
26257: LD_EXP 109
26261: AND
26262: IFFALSE 26383
26264: GO 26266
26266: DISABLE
26267: LD_INT 0
26269: PPUSH
26270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26271: LD_ADDR_VAR 0 2
26275: PUSH
26276: LD_INT 22
26278: PUSH
26279: LD_OWVAR 2
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 21
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: LD_INT 23
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: PPUSH
26320: CALL_OW 69
26324: ST_TO_ADDR
// if not tmp then
26325: LD_VAR 0 2
26329: NOT
26330: IFFALSE 26334
// exit ;
26332: GO 26383
// for i in tmp do
26334: LD_ADDR_VAR 0 1
26338: PUSH
26339: LD_VAR 0 2
26343: PUSH
26344: FOR_IN
26345: IFFALSE 26381
// begin if Crawls ( i ) then
26347: LD_VAR 0 1
26351: PPUSH
26352: CALL_OW 318
26356: IFFALSE 26367
// ComWalk ( i ) ;
26358: LD_VAR 0 1
26362: PPUSH
26363: CALL_OW 138
// SetClass ( i , 2 ) ;
26367: LD_VAR 0 1
26371: PPUSH
26372: LD_INT 2
26374: PPUSH
26375: CALL_OW 336
// end ;
26379: GO 26344
26381: POP
26382: POP
// end ;
26383: PPOPN 2
26385: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26386: LD_EXP 57
26390: PUSH
26391: LD_EXP 110
26395: AND
26396: IFFALSE 26684
26398: GO 26400
26400: DISABLE
26401: LD_INT 0
26403: PPUSH
26404: PPUSH
26405: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26406: LD_OWVAR 2
26410: PPUSH
26411: LD_INT 9
26413: PPUSH
26414: LD_INT 1
26416: PPUSH
26417: LD_INT 1
26419: PPUSH
26420: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26424: LD_INT 9
26426: PPUSH
26427: LD_OWVAR 2
26431: PPUSH
26432: CALL_OW 343
// uc_side := 9 ;
26436: LD_ADDR_OWVAR 20
26440: PUSH
26441: LD_INT 9
26443: ST_TO_ADDR
// uc_nation := 2 ;
26444: LD_ADDR_OWVAR 21
26448: PUSH
26449: LD_INT 2
26451: ST_TO_ADDR
// hc_name := Dark Warrior ;
26452: LD_ADDR_OWVAR 26
26456: PUSH
26457: LD_STRING Dark Warrior
26459: ST_TO_ADDR
// hc_gallery :=  ;
26460: LD_ADDR_OWVAR 33
26464: PUSH
26465: LD_STRING 
26467: ST_TO_ADDR
// hc_noskilllimit := true ;
26468: LD_ADDR_OWVAR 76
26472: PUSH
26473: LD_INT 1
26475: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26476: LD_ADDR_OWVAR 31
26480: PUSH
26481: LD_INT 30
26483: PUSH
26484: LD_INT 30
26486: PUSH
26487: LD_INT 30
26489: PUSH
26490: LD_INT 30
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
// un := CreateHuman ;
26499: LD_ADDR_VAR 0 3
26503: PUSH
26504: CALL_OW 44
26508: ST_TO_ADDR
// hc_noskilllimit := false ;
26509: LD_ADDR_OWVAR 76
26513: PUSH
26514: LD_INT 0
26516: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26517: LD_VAR 0 3
26521: PPUSH
26522: LD_INT 1
26524: PPUSH
26525: CALL_OW 51
// ToLua ( playRanger() ) ;
26529: LD_STRING playRanger()
26531: PPUSH
26532: CALL_OW 559
// p := 0 ;
26536: LD_ADDR_VAR 0 2
26540: PUSH
26541: LD_INT 0
26543: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26544: LD_INT 35
26546: PPUSH
26547: CALL_OW 67
// p := p + 1 ;
26551: LD_ADDR_VAR 0 2
26555: PUSH
26556: LD_VAR 0 2
26560: PUSH
26561: LD_INT 1
26563: PLUS
26564: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26565: LD_VAR 0 3
26569: PPUSH
26570: CALL_OW 256
26574: PUSH
26575: LD_INT 1000
26577: LESS
26578: IFFALSE 26592
// SetLives ( un , 1000 ) ;
26580: LD_VAR 0 3
26584: PPUSH
26585: LD_INT 1000
26587: PPUSH
26588: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26592: LD_VAR 0 3
26596: PPUSH
26597: LD_INT 81
26599: PUSH
26600: LD_OWVAR 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 91
26611: PUSH
26612: LD_VAR 0 3
26616: PUSH
26617: LD_INT 30
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: LIST
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PPUSH
26629: CALL_OW 69
26633: PPUSH
26634: LD_VAR 0 3
26638: PPUSH
26639: CALL_OW 74
26643: PPUSH
26644: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26648: LD_VAR 0 2
26652: PUSH
26653: LD_INT 80
26655: GREATER
26656: PUSH
26657: LD_VAR 0 3
26661: PPUSH
26662: CALL_OW 301
26666: OR
26667: IFFALSE 26544
// if un then
26669: LD_VAR 0 3
26673: IFFALSE 26684
// RemoveUnit ( un ) ;
26675: LD_VAR 0 3
26679: PPUSH
26680: CALL_OW 64
// end ;
26684: PPOPN 3
26686: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26687: LD_EXP 111
26691: IFFALSE 26807
26693: GO 26695
26695: DISABLE
26696: LD_INT 0
26698: PPUSH
26699: PPUSH
26700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26701: LD_ADDR_VAR 0 2
26705: PUSH
26706: LD_INT 81
26708: PUSH
26709: LD_OWVAR 2
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 21
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PPUSH
26732: CALL_OW 69
26736: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26737: LD_STRING playComputer()
26739: PPUSH
26740: CALL_OW 559
// if not tmp then
26744: LD_VAR 0 2
26748: NOT
26749: IFFALSE 26753
// exit ;
26751: GO 26807
// for i in tmp do
26753: LD_ADDR_VAR 0 1
26757: PUSH
26758: LD_VAR 0 2
26762: PUSH
26763: FOR_IN
26764: IFFALSE 26805
// for j := 1 to 4 do
26766: LD_ADDR_VAR 0 3
26770: PUSH
26771: DOUBLE
26772: LD_INT 1
26774: DEC
26775: ST_TO_ADDR
26776: LD_INT 4
26778: PUSH
26779: FOR_TO
26780: IFFALSE 26801
// SetSkill ( i , j , 10 ) ;
26782: LD_VAR 0 1
26786: PPUSH
26787: LD_VAR 0 3
26791: PPUSH
26792: LD_INT 10
26794: PPUSH
26795: CALL_OW 237
26799: GO 26779
26801: POP
26802: POP
26803: GO 26763
26805: POP
26806: POP
// end ;
26807: PPOPN 3
26809: END
// every 0 0$1 trigger s30 do var i , tmp ;
26810: LD_EXP 112
26814: IFFALSE 26883
26816: GO 26818
26818: DISABLE
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26823: LD_ADDR_VAR 0 2
26827: PUSH
26828: LD_INT 22
26830: PUSH
26831: LD_OWVAR 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PPUSH
26840: CALL_OW 69
26844: ST_TO_ADDR
// if not tmp then
26845: LD_VAR 0 2
26849: NOT
26850: IFFALSE 26854
// exit ;
26852: GO 26883
// for i in tmp do
26854: LD_ADDR_VAR 0 1
26858: PUSH
26859: LD_VAR 0 2
26863: PUSH
26864: FOR_IN
26865: IFFALSE 26881
// SetLives ( i , 300 ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_INT 300
26874: PPUSH
26875: CALL_OW 234
26879: GO 26864
26881: POP
26882: POP
// end ;
26883: PPOPN 2
26885: END
// every 0 0$1 trigger s60 do var i , tmp ;
26886: LD_EXP 113
26890: IFFALSE 26959
26892: GO 26894
26894: DISABLE
26895: LD_INT 0
26897: PPUSH
26898: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26899: LD_ADDR_VAR 0 2
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PPUSH
26916: CALL_OW 69
26920: ST_TO_ADDR
// if not tmp then
26921: LD_VAR 0 2
26925: NOT
26926: IFFALSE 26930
// exit ;
26928: GO 26959
// for i in tmp do
26930: LD_ADDR_VAR 0 1
26934: PUSH
26935: LD_VAR 0 2
26939: PUSH
26940: FOR_IN
26941: IFFALSE 26957
// SetLives ( i , 600 ) ;
26943: LD_VAR 0 1
26947: PPUSH
26948: LD_INT 600
26950: PPUSH
26951: CALL_OW 234
26955: GO 26940
26957: POP
26958: POP
// end ;
26959: PPOPN 2
26961: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26962: LD_INT 0
26964: PPUSH
// case cmd of 301 :
26965: LD_VAR 0 1
26969: PUSH
26970: LD_INT 301
26972: DOUBLE
26973: EQUAL
26974: IFTRUE 26978
26976: GO 27010
26978: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26979: LD_VAR 0 6
26983: PPUSH
26984: LD_VAR 0 7
26988: PPUSH
26989: LD_VAR 0 8
26993: PPUSH
26994: LD_VAR 0 4
26998: PPUSH
26999: LD_VAR 0 5
27003: PPUSH
27004: CALL 28211 0 5
27008: GO 27131
27010: LD_INT 302
27012: DOUBLE
27013: EQUAL
27014: IFTRUE 27018
27016: GO 27055
27018: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27019: LD_VAR 0 6
27023: PPUSH
27024: LD_VAR 0 7
27028: PPUSH
27029: LD_VAR 0 8
27033: PPUSH
27034: LD_VAR 0 9
27038: PPUSH
27039: LD_VAR 0 4
27043: PPUSH
27044: LD_VAR 0 5
27048: PPUSH
27049: CALL 28302 0 6
27053: GO 27131
27055: LD_INT 303
27057: DOUBLE
27058: EQUAL
27059: IFTRUE 27063
27061: GO 27100
27063: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27064: LD_VAR 0 6
27068: PPUSH
27069: LD_VAR 0 7
27073: PPUSH
27074: LD_VAR 0 8
27078: PPUSH
27079: LD_VAR 0 9
27083: PPUSH
27084: LD_VAR 0 4
27088: PPUSH
27089: LD_VAR 0 5
27093: PPUSH
27094: CALL 27136 0 6
27098: GO 27131
27100: LD_INT 304
27102: DOUBLE
27103: EQUAL
27104: IFTRUE 27108
27106: GO 27130
27108: POP
// hHackTeleport ( unit , x , y ) ; end ;
27109: LD_VAR 0 2
27113: PPUSH
27114: LD_VAR 0 4
27118: PPUSH
27119: LD_VAR 0 5
27123: PPUSH
27124: CALL 28895 0 3
27128: GO 27131
27130: POP
// end ;
27131: LD_VAR 0 12
27135: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27136: LD_INT 0
27138: PPUSH
27139: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27140: LD_VAR 0 1
27144: PUSH
27145: LD_INT 1
27147: LESS
27148: PUSH
27149: LD_VAR 0 1
27153: PUSH
27154: LD_INT 3
27156: GREATER
27157: OR
27158: PUSH
27159: LD_VAR 0 5
27163: PPUSH
27164: LD_VAR 0 6
27168: PPUSH
27169: CALL_OW 428
27173: OR
27174: IFFALSE 27178
// exit ;
27176: GO 27898
// uc_side := your_side ;
27178: LD_ADDR_OWVAR 20
27182: PUSH
27183: LD_OWVAR 2
27187: ST_TO_ADDR
// uc_nation := nation ;
27188: LD_ADDR_OWVAR 21
27192: PUSH
27193: LD_VAR 0 1
27197: ST_TO_ADDR
// bc_level = 1 ;
27198: LD_ADDR_OWVAR 43
27202: PUSH
27203: LD_INT 1
27205: ST_TO_ADDR
// case btype of 1 :
27206: LD_VAR 0 2
27210: PUSH
27211: LD_INT 1
27213: DOUBLE
27214: EQUAL
27215: IFTRUE 27219
27217: GO 27230
27219: POP
// bc_type := b_depot ; 2 :
27220: LD_ADDR_OWVAR 42
27224: PUSH
27225: LD_INT 0
27227: ST_TO_ADDR
27228: GO 27842
27230: LD_INT 2
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27249
27238: POP
// bc_type := b_warehouse ; 3 :
27239: LD_ADDR_OWVAR 42
27243: PUSH
27244: LD_INT 1
27246: ST_TO_ADDR
27247: GO 27842
27249: LD_INT 3
27251: DOUBLE
27252: EQUAL
27253: IFTRUE 27257
27255: GO 27268
27257: POP
// bc_type := b_lab ; 4 .. 9 :
27258: LD_ADDR_OWVAR 42
27262: PUSH
27263: LD_INT 6
27265: ST_TO_ADDR
27266: GO 27842
27268: LD_INT 4
27270: DOUBLE
27271: GREATEREQUAL
27272: IFFALSE 27280
27274: LD_INT 9
27276: DOUBLE
27277: LESSEQUAL
27278: IFTRUE 27282
27280: GO 27334
27282: POP
// begin bc_type := b_lab_half ;
27283: LD_ADDR_OWVAR 42
27287: PUSH
27288: LD_INT 7
27290: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27291: LD_ADDR_OWVAR 44
27295: PUSH
27296: LD_INT 10
27298: PUSH
27299: LD_INT 11
27301: PUSH
27302: LD_INT 12
27304: PUSH
27305: LD_INT 15
27307: PUSH
27308: LD_INT 14
27310: PUSH
27311: LD_INT 13
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: PUSH
27322: LD_VAR 0 2
27326: PUSH
27327: LD_INT 3
27329: MINUS
27330: ARRAY
27331: ST_TO_ADDR
// end ; 10 .. 13 :
27332: GO 27842
27334: LD_INT 10
27336: DOUBLE
27337: GREATEREQUAL
27338: IFFALSE 27346
27340: LD_INT 13
27342: DOUBLE
27343: LESSEQUAL
27344: IFTRUE 27348
27346: GO 27425
27348: POP
// begin bc_type := b_lab_full ;
27349: LD_ADDR_OWVAR 42
27353: PUSH
27354: LD_INT 8
27356: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27357: LD_ADDR_OWVAR 44
27361: PUSH
27362: LD_INT 10
27364: PUSH
27365: LD_INT 12
27367: PUSH
27368: LD_INT 14
27370: PUSH
27371: LD_INT 13
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: PUSH
27380: LD_VAR 0 2
27384: PUSH
27385: LD_INT 9
27387: MINUS
27388: ARRAY
27389: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27390: LD_ADDR_OWVAR 45
27394: PUSH
27395: LD_INT 11
27397: PUSH
27398: LD_INT 15
27400: PUSH
27401: LD_INT 12
27403: PUSH
27404: LD_INT 15
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: PUSH
27413: LD_VAR 0 2
27417: PUSH
27418: LD_INT 9
27420: MINUS
27421: ARRAY
27422: ST_TO_ADDR
// end ; 14 :
27423: GO 27842
27425: LD_INT 14
27427: DOUBLE
27428: EQUAL
27429: IFTRUE 27433
27431: GO 27444
27433: POP
// bc_type := b_workshop ; 15 :
27434: LD_ADDR_OWVAR 42
27438: PUSH
27439: LD_INT 2
27441: ST_TO_ADDR
27442: GO 27842
27444: LD_INT 15
27446: DOUBLE
27447: EQUAL
27448: IFTRUE 27452
27450: GO 27463
27452: POP
// bc_type := b_factory ; 16 :
27453: LD_ADDR_OWVAR 42
27457: PUSH
27458: LD_INT 3
27460: ST_TO_ADDR
27461: GO 27842
27463: LD_INT 16
27465: DOUBLE
27466: EQUAL
27467: IFTRUE 27471
27469: GO 27482
27471: POP
// bc_type := b_ext_gun ; 17 :
27472: LD_ADDR_OWVAR 42
27476: PUSH
27477: LD_INT 17
27479: ST_TO_ADDR
27480: GO 27842
27482: LD_INT 17
27484: DOUBLE
27485: EQUAL
27486: IFTRUE 27490
27488: GO 27518
27490: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27491: LD_ADDR_OWVAR 42
27495: PUSH
27496: LD_INT 19
27498: PUSH
27499: LD_INT 23
27501: PUSH
27502: LD_INT 19
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: PUSH
27510: LD_VAR 0 1
27514: ARRAY
27515: ST_TO_ADDR
27516: GO 27842
27518: LD_INT 18
27520: DOUBLE
27521: EQUAL
27522: IFTRUE 27526
27524: GO 27537
27526: POP
// bc_type := b_ext_radar ; 19 :
27527: LD_ADDR_OWVAR 42
27531: PUSH
27532: LD_INT 20
27534: ST_TO_ADDR
27535: GO 27842
27537: LD_INT 19
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27545
27543: GO 27556
27545: POP
// bc_type := b_ext_radio ; 20 :
27546: LD_ADDR_OWVAR 42
27550: PUSH
27551: LD_INT 22
27553: ST_TO_ADDR
27554: GO 27842
27556: LD_INT 20
27558: DOUBLE
27559: EQUAL
27560: IFTRUE 27564
27562: GO 27575
27564: POP
// bc_type := b_ext_siberium ; 21 :
27565: LD_ADDR_OWVAR 42
27569: PUSH
27570: LD_INT 21
27572: ST_TO_ADDR
27573: GO 27842
27575: LD_INT 21
27577: DOUBLE
27578: EQUAL
27579: IFTRUE 27583
27581: GO 27594
27583: POP
// bc_type := b_ext_computer ; 22 :
27584: LD_ADDR_OWVAR 42
27588: PUSH
27589: LD_INT 24
27591: ST_TO_ADDR
27592: GO 27842
27594: LD_INT 22
27596: DOUBLE
27597: EQUAL
27598: IFTRUE 27602
27600: GO 27613
27602: POP
// bc_type := b_ext_track ; 23 :
27603: LD_ADDR_OWVAR 42
27607: PUSH
27608: LD_INT 16
27610: ST_TO_ADDR
27611: GO 27842
27613: LD_INT 23
27615: DOUBLE
27616: EQUAL
27617: IFTRUE 27621
27619: GO 27632
27621: POP
// bc_type := b_ext_laser ; 24 :
27622: LD_ADDR_OWVAR 42
27626: PUSH
27627: LD_INT 25
27629: ST_TO_ADDR
27630: GO 27842
27632: LD_INT 24
27634: DOUBLE
27635: EQUAL
27636: IFTRUE 27640
27638: GO 27651
27640: POP
// bc_type := b_control_tower ; 25 :
27641: LD_ADDR_OWVAR 42
27645: PUSH
27646: LD_INT 36
27648: ST_TO_ADDR
27649: GO 27842
27651: LD_INT 25
27653: DOUBLE
27654: EQUAL
27655: IFTRUE 27659
27657: GO 27670
27659: POP
// bc_type := b_breastwork ; 26 :
27660: LD_ADDR_OWVAR 42
27664: PUSH
27665: LD_INT 31
27667: ST_TO_ADDR
27668: GO 27842
27670: LD_INT 26
27672: DOUBLE
27673: EQUAL
27674: IFTRUE 27678
27676: GO 27689
27678: POP
// bc_type := b_bunker ; 27 :
27679: LD_ADDR_OWVAR 42
27683: PUSH
27684: LD_INT 32
27686: ST_TO_ADDR
27687: GO 27842
27689: LD_INT 27
27691: DOUBLE
27692: EQUAL
27693: IFTRUE 27697
27695: GO 27708
27697: POP
// bc_type := b_turret ; 28 :
27698: LD_ADDR_OWVAR 42
27702: PUSH
27703: LD_INT 33
27705: ST_TO_ADDR
27706: GO 27842
27708: LD_INT 28
27710: DOUBLE
27711: EQUAL
27712: IFTRUE 27716
27714: GO 27727
27716: POP
// bc_type := b_armoury ; 29 :
27717: LD_ADDR_OWVAR 42
27721: PUSH
27722: LD_INT 4
27724: ST_TO_ADDR
27725: GO 27842
27727: LD_INT 29
27729: DOUBLE
27730: EQUAL
27731: IFTRUE 27735
27733: GO 27746
27735: POP
// bc_type := b_barracks ; 30 :
27736: LD_ADDR_OWVAR 42
27740: PUSH
27741: LD_INT 5
27743: ST_TO_ADDR
27744: GO 27842
27746: LD_INT 30
27748: DOUBLE
27749: EQUAL
27750: IFTRUE 27754
27752: GO 27765
27754: POP
// bc_type := b_solar_power ; 31 :
27755: LD_ADDR_OWVAR 42
27759: PUSH
27760: LD_INT 27
27762: ST_TO_ADDR
27763: GO 27842
27765: LD_INT 31
27767: DOUBLE
27768: EQUAL
27769: IFTRUE 27773
27771: GO 27784
27773: POP
// bc_type := b_oil_power ; 32 :
27774: LD_ADDR_OWVAR 42
27778: PUSH
27779: LD_INT 26
27781: ST_TO_ADDR
27782: GO 27842
27784: LD_INT 32
27786: DOUBLE
27787: EQUAL
27788: IFTRUE 27792
27790: GO 27803
27792: POP
// bc_type := b_siberite_power ; 33 :
27793: LD_ADDR_OWVAR 42
27797: PUSH
27798: LD_INT 28
27800: ST_TO_ADDR
27801: GO 27842
27803: LD_INT 33
27805: DOUBLE
27806: EQUAL
27807: IFTRUE 27811
27809: GO 27822
27811: POP
// bc_type := b_oil_mine ; 34 :
27812: LD_ADDR_OWVAR 42
27816: PUSH
27817: LD_INT 29
27819: ST_TO_ADDR
27820: GO 27842
27822: LD_INT 34
27824: DOUBLE
27825: EQUAL
27826: IFTRUE 27830
27828: GO 27841
27830: POP
// bc_type := b_siberite_mine ; end ;
27831: LD_ADDR_OWVAR 42
27835: PUSH
27836: LD_INT 30
27838: ST_TO_ADDR
27839: GO 27842
27841: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27842: LD_ADDR_VAR 0 8
27846: PUSH
27847: LD_VAR 0 5
27851: PPUSH
27852: LD_VAR 0 6
27856: PPUSH
27857: LD_VAR 0 3
27861: PPUSH
27862: CALL_OW 47
27866: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27867: LD_OWVAR 42
27871: PUSH
27872: LD_INT 32
27874: PUSH
27875: LD_INT 33
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: IN
27882: IFFALSE 27898
// PlaceWeaponTurret ( b , weapon ) ;
27884: LD_VAR 0 8
27888: PPUSH
27889: LD_VAR 0 4
27893: PPUSH
27894: CALL_OW 431
// end ;
27898: LD_VAR 0 7
27902: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27903: LD_INT 0
27905: PPUSH
27906: PPUSH
27907: PPUSH
27908: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27909: LD_ADDR_VAR 0 4
27913: PUSH
27914: LD_INT 22
27916: PUSH
27917: LD_OWVAR 2
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: LD_INT 30
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 30
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PPUSH
27958: CALL_OW 69
27962: ST_TO_ADDR
// if not tmp then
27963: LD_VAR 0 4
27967: NOT
27968: IFFALSE 27972
// exit ;
27970: GO 28031
// for i in tmp do
27972: LD_ADDR_VAR 0 2
27976: PUSH
27977: LD_VAR 0 4
27981: PUSH
27982: FOR_IN
27983: IFFALSE 28029
// for j = 1 to 3 do
27985: LD_ADDR_VAR 0 3
27989: PUSH
27990: DOUBLE
27991: LD_INT 1
27993: DEC
27994: ST_TO_ADDR
27995: LD_INT 3
27997: PUSH
27998: FOR_TO
27999: IFFALSE 28025
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28001: LD_VAR 0 2
28005: PPUSH
28006: CALL_OW 274
28010: PPUSH
28011: LD_VAR 0 3
28015: PPUSH
28016: LD_INT 99999
28018: PPUSH
28019: CALL_OW 277
28023: GO 27998
28025: POP
28026: POP
28027: GO 27982
28029: POP
28030: POP
// end ;
28031: LD_VAR 0 1
28035: RET
// export function hHackSetLevel10 ; var i , j ; begin
28036: LD_INT 0
28038: PPUSH
28039: PPUSH
28040: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28041: LD_ADDR_VAR 0 2
28045: PUSH
28046: LD_INT 21
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PPUSH
28056: CALL_OW 69
28060: PUSH
28061: FOR_IN
28062: IFFALSE 28114
// if IsSelected ( i ) then
28064: LD_VAR 0 2
28068: PPUSH
28069: CALL_OW 306
28073: IFFALSE 28112
// begin for j := 1 to 4 do
28075: LD_ADDR_VAR 0 3
28079: PUSH
28080: DOUBLE
28081: LD_INT 1
28083: DEC
28084: ST_TO_ADDR
28085: LD_INT 4
28087: PUSH
28088: FOR_TO
28089: IFFALSE 28110
// SetSkill ( i , j , 10 ) ;
28091: LD_VAR 0 2
28095: PPUSH
28096: LD_VAR 0 3
28100: PPUSH
28101: LD_INT 10
28103: PPUSH
28104: CALL_OW 237
28108: GO 28088
28110: POP
28111: POP
// end ;
28112: GO 28061
28114: POP
28115: POP
// end ;
28116: LD_VAR 0 1
28120: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28121: LD_INT 0
28123: PPUSH
28124: PPUSH
28125: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28126: LD_ADDR_VAR 0 2
28130: PUSH
28131: LD_INT 22
28133: PUSH
28134: LD_OWVAR 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 21
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PPUSH
28157: CALL_OW 69
28161: PUSH
28162: FOR_IN
28163: IFFALSE 28204
// begin for j := 1 to 4 do
28165: LD_ADDR_VAR 0 3
28169: PUSH
28170: DOUBLE
28171: LD_INT 1
28173: DEC
28174: ST_TO_ADDR
28175: LD_INT 4
28177: PUSH
28178: FOR_TO
28179: IFFALSE 28200
// SetSkill ( i , j , 10 ) ;
28181: LD_VAR 0 2
28185: PPUSH
28186: LD_VAR 0 3
28190: PPUSH
28191: LD_INT 10
28193: PPUSH
28194: CALL_OW 237
28198: GO 28178
28200: POP
28201: POP
// end ;
28202: GO 28162
28204: POP
28205: POP
// end ;
28206: LD_VAR 0 1
28210: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28211: LD_INT 0
28213: PPUSH
// uc_side := your_side ;
28214: LD_ADDR_OWVAR 20
28218: PUSH
28219: LD_OWVAR 2
28223: ST_TO_ADDR
// uc_nation := nation ;
28224: LD_ADDR_OWVAR 21
28228: PUSH
28229: LD_VAR 0 1
28233: ST_TO_ADDR
// InitHc ;
28234: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28238: LD_INT 0
28240: PPUSH
28241: LD_VAR 0 2
28245: PPUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28255: LD_VAR 0 4
28259: PPUSH
28260: LD_VAR 0 5
28264: PPUSH
28265: CALL_OW 428
28269: PUSH
28270: LD_INT 0
28272: EQUAL
28273: IFFALSE 28297
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28275: CALL_OW 44
28279: PPUSH
28280: LD_VAR 0 4
28284: PPUSH
28285: LD_VAR 0 5
28289: PPUSH
28290: LD_INT 1
28292: PPUSH
28293: CALL_OW 48
// end ;
28297: LD_VAR 0 6
28301: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28302: LD_INT 0
28304: PPUSH
28305: PPUSH
// uc_side := your_side ;
28306: LD_ADDR_OWVAR 20
28310: PUSH
28311: LD_OWVAR 2
28315: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28316: LD_VAR 0 1
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: LD_INT 3
28329: PUSH
28330: LD_INT 4
28332: PUSH
28333: LD_INT 5
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: IN
28343: IFFALSE 28355
// uc_nation := nation_american else
28345: LD_ADDR_OWVAR 21
28349: PUSH
28350: LD_INT 1
28352: ST_TO_ADDR
28353: GO 28398
// if chassis in [ 11 , 12 , 13 , 14 ] then
28355: LD_VAR 0 1
28359: PUSH
28360: LD_INT 11
28362: PUSH
28363: LD_INT 12
28365: PUSH
28366: LD_INT 13
28368: PUSH
28369: LD_INT 14
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: IN
28378: IFFALSE 28390
// uc_nation := nation_arabian else
28380: LD_ADDR_OWVAR 21
28384: PUSH
28385: LD_INT 2
28387: ST_TO_ADDR
28388: GO 28398
// uc_nation := nation_russian ;
28390: LD_ADDR_OWVAR 21
28394: PUSH
28395: LD_INT 3
28397: ST_TO_ADDR
// vc_chassis := chassis ;
28398: LD_ADDR_OWVAR 37
28402: PUSH
28403: LD_VAR 0 1
28407: ST_TO_ADDR
// vc_engine := engine ;
28408: LD_ADDR_OWVAR 39
28412: PUSH
28413: LD_VAR 0 2
28417: ST_TO_ADDR
// vc_control := control ;
28418: LD_ADDR_OWVAR 38
28422: PUSH
28423: LD_VAR 0 3
28427: ST_TO_ADDR
// vc_weapon := weapon ;
28428: LD_ADDR_OWVAR 40
28432: PUSH
28433: LD_VAR 0 4
28437: ST_TO_ADDR
// un := CreateVehicle ;
28438: LD_ADDR_VAR 0 8
28442: PUSH
28443: CALL_OW 45
28447: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28448: LD_VAR 0 8
28452: PPUSH
28453: LD_INT 0
28455: PPUSH
28456: LD_INT 5
28458: PPUSH
28459: CALL_OW 12
28463: PPUSH
28464: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28468: LD_VAR 0 8
28472: PPUSH
28473: LD_VAR 0 5
28477: PPUSH
28478: LD_VAR 0 6
28482: PPUSH
28483: LD_INT 1
28485: PPUSH
28486: CALL_OW 48
// end ;
28490: LD_VAR 0 7
28494: RET
// export hInvincible ; every 1 do
28495: GO 28497
28497: DISABLE
// hInvincible := [ ] ;
28498: LD_ADDR_EXP 114
28502: PUSH
28503: EMPTY
28504: ST_TO_ADDR
28505: END
// every 10 do var i ;
28506: GO 28508
28508: DISABLE
28509: LD_INT 0
28511: PPUSH
// begin enable ;
28512: ENABLE
// if not hInvincible then
28513: LD_EXP 114
28517: NOT
28518: IFFALSE 28522
// exit ;
28520: GO 28566
// for i in hInvincible do
28522: LD_ADDR_VAR 0 1
28526: PUSH
28527: LD_EXP 114
28531: PUSH
28532: FOR_IN
28533: IFFALSE 28564
// if GetLives ( i ) < 1000 then
28535: LD_VAR 0 1
28539: PPUSH
28540: CALL_OW 256
28544: PUSH
28545: LD_INT 1000
28547: LESS
28548: IFFALSE 28562
// SetLives ( i , 1000 ) ;
28550: LD_VAR 0 1
28554: PPUSH
28555: LD_INT 1000
28557: PPUSH
28558: CALL_OW 234
28562: GO 28532
28564: POP
28565: POP
// end ;
28566: PPOPN 1
28568: END
// export function hHackInvincible ; var i ; begin
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28573: LD_ADDR_VAR 0 2
28577: PUSH
28578: LD_INT 2
28580: PUSH
28581: LD_INT 21
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 21
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: PPUSH
28606: CALL_OW 69
28610: PUSH
28611: FOR_IN
28612: IFFALSE 28673
// if IsSelected ( i ) then
28614: LD_VAR 0 2
28618: PPUSH
28619: CALL_OW 306
28623: IFFALSE 28671
// begin if i in hInvincible then
28625: LD_VAR 0 2
28629: PUSH
28630: LD_EXP 114
28634: IN
28635: IFFALSE 28655
// hInvincible := hInvincible diff i else
28637: LD_ADDR_EXP 114
28641: PUSH
28642: LD_EXP 114
28646: PUSH
28647: LD_VAR 0 2
28651: DIFF
28652: ST_TO_ADDR
28653: GO 28671
// hInvincible := hInvincible union i ;
28655: LD_ADDR_EXP 114
28659: PUSH
28660: LD_EXP 114
28664: PUSH
28665: LD_VAR 0 2
28669: UNION
28670: ST_TO_ADDR
// end ;
28671: GO 28611
28673: POP
28674: POP
// end ;
28675: LD_VAR 0 1
28679: RET
// export function hHackInvisible ; var i , j ; begin
28680: LD_INT 0
28682: PPUSH
28683: PPUSH
28684: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28685: LD_ADDR_VAR 0 2
28689: PUSH
28690: LD_INT 21
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PPUSH
28700: CALL_OW 69
28704: PUSH
28705: FOR_IN
28706: IFFALSE 28730
// if IsSelected ( i ) then
28708: LD_VAR 0 2
28712: PPUSH
28713: CALL_OW 306
28717: IFFALSE 28728
// ComForceInvisible ( i ) ;
28719: LD_VAR 0 2
28723: PPUSH
28724: CALL_OW 496
28728: GO 28705
28730: POP
28731: POP
// end ;
28732: LD_VAR 0 1
28736: RET
// export function hHackChangeYourSide ; begin
28737: LD_INT 0
28739: PPUSH
// if your_side = 8 then
28740: LD_OWVAR 2
28744: PUSH
28745: LD_INT 8
28747: EQUAL
28748: IFFALSE 28760
// your_side := 0 else
28750: LD_ADDR_OWVAR 2
28754: PUSH
28755: LD_INT 0
28757: ST_TO_ADDR
28758: GO 28774
// your_side := your_side + 1 ;
28760: LD_ADDR_OWVAR 2
28764: PUSH
28765: LD_OWVAR 2
28769: PUSH
28770: LD_INT 1
28772: PLUS
28773: ST_TO_ADDR
// end ;
28774: LD_VAR 0 1
28778: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28779: LD_INT 0
28781: PPUSH
28782: PPUSH
28783: PPUSH
// for i in all_units do
28784: LD_ADDR_VAR 0 2
28788: PUSH
28789: LD_OWVAR 3
28793: PUSH
28794: FOR_IN
28795: IFFALSE 28873
// if IsSelected ( i ) then
28797: LD_VAR 0 2
28801: PPUSH
28802: CALL_OW 306
28806: IFFALSE 28871
// begin j := GetSide ( i ) ;
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_VAR 0 2
28817: PPUSH
28818: CALL_OW 255
28822: ST_TO_ADDR
// if j = 8 then
28823: LD_VAR 0 3
28827: PUSH
28828: LD_INT 8
28830: EQUAL
28831: IFFALSE 28843
// j := 0 else
28833: LD_ADDR_VAR 0 3
28837: PUSH
28838: LD_INT 0
28840: ST_TO_ADDR
28841: GO 28857
// j := j + 1 ;
28843: LD_ADDR_VAR 0 3
28847: PUSH
28848: LD_VAR 0 3
28852: PUSH
28853: LD_INT 1
28855: PLUS
28856: ST_TO_ADDR
// SetSide ( i , j ) ;
28857: LD_VAR 0 2
28861: PPUSH
28862: LD_VAR 0 3
28866: PPUSH
28867: CALL_OW 235
// end ;
28871: GO 28794
28873: POP
28874: POP
// end ;
28875: LD_VAR 0 1
28879: RET
// export function hHackFog ; begin
28880: LD_INT 0
28882: PPUSH
// FogOff ( true ) ;
28883: LD_INT 1
28885: PPUSH
28886: CALL_OW 344
// end ;
28890: LD_VAR 0 1
28894: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28895: LD_INT 0
28897: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28898: LD_VAR 0 1
28902: PPUSH
28903: LD_VAR 0 2
28907: PPUSH
28908: LD_VAR 0 3
28912: PPUSH
28913: LD_INT 1
28915: PPUSH
28916: LD_INT 1
28918: PPUSH
28919: CALL_OW 483
// CenterOnXY ( x , y ) ;
28923: LD_VAR 0 2
28927: PPUSH
28928: LD_VAR 0 3
28932: PPUSH
28933: CALL_OW 84
// end ; end_of_file
28937: LD_VAR 0 4
28941: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28942: LD_INT 0
28944: PPUSH
28945: PPUSH
28946: PPUSH
28947: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28948: LD_VAR 0 1
28952: PPUSH
28953: CALL_OW 264
28957: PUSH
28958: LD_EXP 42
28962: EQUAL
28963: IFFALSE 29035
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28965: LD_INT 68
28967: PPUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 255
28977: PPUSH
28978: CALL_OW 321
28982: PUSH
28983: LD_INT 2
28985: EQUAL
28986: IFFALSE 28998
// eff := 70 else
28988: LD_ADDR_VAR 0 4
28992: PUSH
28993: LD_INT 70
28995: ST_TO_ADDR
28996: GO 29006
// eff := 30 ;
28998: LD_ADDR_VAR 0 4
29002: PUSH
29003: LD_INT 30
29005: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29006: LD_VAR 0 1
29010: PPUSH
29011: CALL_OW 250
29015: PPUSH
29016: LD_VAR 0 1
29020: PPUSH
29021: CALL_OW 251
29025: PPUSH
29026: LD_VAR 0 4
29030: PPUSH
29031: CALL_OW 495
// end ; end ;
29035: LD_VAR 0 2
29039: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29040: LD_INT 0
29042: PPUSH
// end ;
29043: LD_VAR 0 4
29047: RET
// export function SOS_Command ( cmd ) ; begin
29048: LD_INT 0
29050: PPUSH
// end ;
29051: LD_VAR 0 2
29055: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29056: LD_INT 0
29058: PPUSH
// end ;
29059: LD_VAR 0 6
29063: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29064: LD_INT 0
29066: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29067: LD_VAR 0 1
29071: PUSH
29072: LD_INT 250
29074: EQUAL
29075: PUSH
29076: LD_VAR 0 2
29080: PPUSH
29081: CALL_OW 264
29085: PUSH
29086: LD_EXP 45
29090: EQUAL
29091: AND
29092: IFFALSE 29113
// MinerPlaceMine ( unit , x , y ) ;
29094: LD_VAR 0 2
29098: PPUSH
29099: LD_VAR 0 4
29103: PPUSH
29104: LD_VAR 0 5
29108: PPUSH
29109: CALL 31462 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29113: LD_VAR 0 1
29117: PUSH
29118: LD_INT 251
29120: EQUAL
29121: PUSH
29122: LD_VAR 0 2
29126: PPUSH
29127: CALL_OW 264
29131: PUSH
29132: LD_EXP 45
29136: EQUAL
29137: AND
29138: IFFALSE 29159
// MinerDetonateMine ( unit , x , y ) ;
29140: LD_VAR 0 2
29144: PPUSH
29145: LD_VAR 0 4
29149: PPUSH
29150: LD_VAR 0 5
29154: PPUSH
29155: CALL 31739 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29159: LD_VAR 0 1
29163: PUSH
29164: LD_INT 252
29166: EQUAL
29167: PUSH
29168: LD_VAR 0 2
29172: PPUSH
29173: CALL_OW 264
29177: PUSH
29178: LD_EXP 45
29182: EQUAL
29183: AND
29184: IFFALSE 29205
// MinerCreateMinefield ( unit , x , y ) ;
29186: LD_VAR 0 2
29190: PPUSH
29191: LD_VAR 0 4
29195: PPUSH
29196: LD_VAR 0 5
29200: PPUSH
29201: CALL 32156 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29205: LD_VAR 0 1
29209: PUSH
29210: LD_INT 253
29212: EQUAL
29213: PUSH
29214: LD_VAR 0 2
29218: PPUSH
29219: CALL_OW 257
29223: PUSH
29224: LD_INT 5
29226: EQUAL
29227: AND
29228: IFFALSE 29249
// ComBinocular ( unit , x , y ) ;
29230: LD_VAR 0 2
29234: PPUSH
29235: LD_VAR 0 4
29239: PPUSH
29240: LD_VAR 0 5
29244: PPUSH
29245: CALL 32527 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29249: LD_VAR 0 1
29253: PUSH
29254: LD_INT 254
29256: EQUAL
29257: PUSH
29258: LD_VAR 0 2
29262: PPUSH
29263: CALL_OW 264
29267: PUSH
29268: LD_EXP 40
29272: EQUAL
29273: AND
29274: PUSH
29275: LD_VAR 0 3
29279: PPUSH
29280: CALL_OW 263
29284: PUSH
29285: LD_INT 3
29287: EQUAL
29288: AND
29289: IFFALSE 29305
// HackDestroyVehicle ( unit , selectedUnit ) ;
29291: LD_VAR 0 2
29295: PPUSH
29296: LD_VAR 0 3
29300: PPUSH
29301: CALL 30822 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29305: LD_VAR 0 1
29309: PUSH
29310: LD_INT 255
29312: EQUAL
29313: PUSH
29314: LD_VAR 0 2
29318: PPUSH
29319: CALL_OW 264
29323: PUSH
29324: LD_INT 14
29326: PUSH
29327: LD_INT 53
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: IN
29334: AND
29335: PUSH
29336: LD_VAR 0 4
29340: PPUSH
29341: LD_VAR 0 5
29345: PPUSH
29346: CALL_OW 488
29350: AND
29351: IFFALSE 29375
// CutTreeXYR ( unit , x , y , 12 ) ;
29353: LD_VAR 0 2
29357: PPUSH
29358: LD_VAR 0 4
29362: PPUSH
29363: LD_VAR 0 5
29367: PPUSH
29368: LD_INT 12
29370: PPUSH
29371: CALL 29388 0 4
// end ;
29375: LD_VAR 0 6
29379: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
29380: LD_INT 0
29382: PPUSH
// end ;
29383: LD_VAR 0 4
29387: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29388: LD_INT 0
29390: PPUSH
29391: PPUSH
29392: PPUSH
29393: PPUSH
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29399: LD_VAR 0 1
29403: NOT
29404: PUSH
29405: LD_VAR 0 2
29409: PPUSH
29410: LD_VAR 0 3
29414: PPUSH
29415: CALL_OW 488
29419: NOT
29420: OR
29421: PUSH
29422: LD_VAR 0 4
29426: NOT
29427: OR
29428: IFFALSE 29432
// exit ;
29430: GO 29772
// list := [ ] ;
29432: LD_ADDR_VAR 0 13
29436: PUSH
29437: EMPTY
29438: ST_TO_ADDR
// if x - r < 0 then
29439: LD_VAR 0 2
29443: PUSH
29444: LD_VAR 0 4
29448: MINUS
29449: PUSH
29450: LD_INT 0
29452: LESS
29453: IFFALSE 29465
// min_x := 0 else
29455: LD_ADDR_VAR 0 7
29459: PUSH
29460: LD_INT 0
29462: ST_TO_ADDR
29463: GO 29481
// min_x := x - r ;
29465: LD_ADDR_VAR 0 7
29469: PUSH
29470: LD_VAR 0 2
29474: PUSH
29475: LD_VAR 0 4
29479: MINUS
29480: ST_TO_ADDR
// if y - r < 0 then
29481: LD_VAR 0 3
29485: PUSH
29486: LD_VAR 0 4
29490: MINUS
29491: PUSH
29492: LD_INT 0
29494: LESS
29495: IFFALSE 29507
// min_y := 0 else
29497: LD_ADDR_VAR 0 8
29501: PUSH
29502: LD_INT 0
29504: ST_TO_ADDR
29505: GO 29523
// min_y := y - r ;
29507: LD_ADDR_VAR 0 8
29511: PUSH
29512: LD_VAR 0 3
29516: PUSH
29517: LD_VAR 0 4
29521: MINUS
29522: ST_TO_ADDR
// max_x := x + r ;
29523: LD_ADDR_VAR 0 9
29527: PUSH
29528: LD_VAR 0 2
29532: PUSH
29533: LD_VAR 0 4
29537: PLUS
29538: ST_TO_ADDR
// max_y := y + r ;
29539: LD_ADDR_VAR 0 10
29543: PUSH
29544: LD_VAR 0 3
29548: PUSH
29549: LD_VAR 0 4
29553: PLUS
29554: ST_TO_ADDR
// for _x = min_x to max_x do
29555: LD_ADDR_VAR 0 11
29559: PUSH
29560: DOUBLE
29561: LD_VAR 0 7
29565: DEC
29566: ST_TO_ADDR
29567: LD_VAR 0 9
29571: PUSH
29572: FOR_TO
29573: IFFALSE 29690
// for _y = min_y to max_y do
29575: LD_ADDR_VAR 0 12
29579: PUSH
29580: DOUBLE
29581: LD_VAR 0 8
29585: DEC
29586: ST_TO_ADDR
29587: LD_VAR 0 10
29591: PUSH
29592: FOR_TO
29593: IFFALSE 29686
// begin if not ValidHex ( _x , _y ) then
29595: LD_VAR 0 11
29599: PPUSH
29600: LD_VAR 0 12
29604: PPUSH
29605: CALL_OW 488
29609: NOT
29610: IFFALSE 29614
// continue ;
29612: GO 29592
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29614: LD_VAR 0 11
29618: PPUSH
29619: LD_VAR 0 12
29623: PPUSH
29624: CALL_OW 351
29628: PUSH
29629: LD_VAR 0 11
29633: PPUSH
29634: LD_VAR 0 12
29638: PPUSH
29639: CALL_OW 554
29643: AND
29644: IFFALSE 29684
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29646: LD_ADDR_VAR 0 13
29650: PUSH
29651: LD_VAR 0 13
29655: PPUSH
29656: LD_VAR 0 13
29660: PUSH
29661: LD_INT 1
29663: PLUS
29664: PPUSH
29665: LD_VAR 0 11
29669: PUSH
29670: LD_VAR 0 12
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PPUSH
29679: CALL_OW 2
29683: ST_TO_ADDR
// end ;
29684: GO 29592
29686: POP
29687: POP
29688: GO 29572
29690: POP
29691: POP
// if not list then
29692: LD_VAR 0 13
29696: NOT
29697: IFFALSE 29701
// exit ;
29699: GO 29772
// for i in list do
29701: LD_ADDR_VAR 0 6
29705: PUSH
29706: LD_VAR 0 13
29710: PUSH
29711: FOR_IN
29712: IFFALSE 29770
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_STRING M
29721: PUSH
29722: LD_VAR 0 6
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: PUSH
29731: LD_VAR 0 6
29735: PUSH
29736: LD_INT 2
29738: ARRAY
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: PPUSH
29764: CALL_OW 447
29768: GO 29711
29770: POP
29771: POP
// end ;
29772: LD_VAR 0 5
29776: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29777: LD_EXP 117
29781: NOT
29782: IFFALSE 29832
29784: GO 29786
29786: DISABLE
// begin initHack := true ;
29787: LD_ADDR_EXP 117
29791: PUSH
29792: LD_INT 1
29794: ST_TO_ADDR
// hackTanks := [ ] ;
29795: LD_ADDR_EXP 118
29799: PUSH
29800: EMPTY
29801: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29802: LD_ADDR_EXP 119
29806: PUSH
29807: EMPTY
29808: ST_TO_ADDR
// hackLimit := 3 ;
29809: LD_ADDR_EXP 120
29813: PUSH
29814: LD_INT 3
29816: ST_TO_ADDR
// hackDist := 12 ;
29817: LD_ADDR_EXP 121
29821: PUSH
29822: LD_INT 12
29824: ST_TO_ADDR
// hackCounter := [ ] ;
29825: LD_ADDR_EXP 122
29829: PUSH
29830: EMPTY
29831: ST_TO_ADDR
// end ;
29832: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29833: LD_EXP 117
29837: PUSH
29838: LD_INT 34
29840: PUSH
29841: LD_EXP 40
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PPUSH
29850: CALL_OW 69
29854: AND
29855: IFFALSE 30110
29857: GO 29859
29859: DISABLE
29860: LD_INT 0
29862: PPUSH
29863: PPUSH
// begin enable ;
29864: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29865: LD_ADDR_VAR 0 1
29869: PUSH
29870: LD_INT 34
29872: PUSH
29873: LD_EXP 40
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PPUSH
29882: CALL_OW 69
29886: PUSH
29887: FOR_IN
29888: IFFALSE 30108
// begin if not i in hackTanks then
29890: LD_VAR 0 1
29894: PUSH
29895: LD_EXP 118
29899: IN
29900: NOT
29901: IFFALSE 29984
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29903: LD_ADDR_EXP 118
29907: PUSH
29908: LD_EXP 118
29912: PPUSH
29913: LD_EXP 118
29917: PUSH
29918: LD_INT 1
29920: PLUS
29921: PPUSH
29922: LD_VAR 0 1
29926: PPUSH
29927: CALL_OW 1
29931: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29932: LD_ADDR_EXP 119
29936: PUSH
29937: LD_EXP 119
29941: PPUSH
29942: LD_EXP 119
29946: PUSH
29947: LD_INT 1
29949: PLUS
29950: PPUSH
29951: EMPTY
29952: PPUSH
29953: CALL_OW 1
29957: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29958: LD_ADDR_EXP 122
29962: PUSH
29963: LD_EXP 122
29967: PPUSH
29968: LD_EXP 122
29972: PUSH
29973: LD_INT 1
29975: PLUS
29976: PPUSH
29977: EMPTY
29978: PPUSH
29979: CALL_OW 1
29983: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29984: LD_VAR 0 1
29988: PPUSH
29989: CALL_OW 302
29993: NOT
29994: IFFALSE 30007
// begin HackUnlinkAll ( i ) ;
29996: LD_VAR 0 1
30000: PPUSH
30001: CALL 30113 0 1
// continue ;
30005: GO 29887
// end ; HackCheckCapturedStatus ( i ) ;
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL 30556 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30016: LD_ADDR_VAR 0 2
30020: PUSH
30021: LD_INT 81
30023: PUSH
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 255
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 33
30040: PUSH
30041: LD_INT 3
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 91
30050: PUSH
30051: LD_VAR 0 1
30055: PUSH
30056: LD_EXP 121
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 50
30068: PUSH
30069: EMPTY
30070: LIST
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: PPUSH
30078: CALL_OW 69
30082: ST_TO_ADDR
// if not tmp then
30083: LD_VAR 0 2
30087: NOT
30088: IFFALSE 30092
// continue ;
30090: GO 29887
// HackLink ( i , tmp ) ;
30092: LD_VAR 0 1
30096: PPUSH
30097: LD_VAR 0 2
30101: PPUSH
30102: CALL 30249 0 2
// end ;
30106: GO 29887
30108: POP
30109: POP
// end ;
30110: PPOPN 2
30112: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30113: LD_INT 0
30115: PPUSH
30116: PPUSH
30117: PPUSH
// if not hack in hackTanks then
30118: LD_VAR 0 1
30122: PUSH
30123: LD_EXP 118
30127: IN
30128: NOT
30129: IFFALSE 30133
// exit ;
30131: GO 30244
// index := GetElementIndex ( hackTanks , hack ) ;
30133: LD_ADDR_VAR 0 4
30137: PUSH
30138: LD_EXP 118
30142: PPUSH
30143: LD_VAR 0 1
30147: PPUSH
30148: CALL 37718 0 2
30152: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30153: LD_EXP 119
30157: PUSH
30158: LD_VAR 0 4
30162: ARRAY
30163: IFFALSE 30244
// begin for i in hackTanksCaptured [ index ] do
30165: LD_ADDR_VAR 0 3
30169: PUSH
30170: LD_EXP 119
30174: PUSH
30175: LD_VAR 0 4
30179: ARRAY
30180: PUSH
30181: FOR_IN
30182: IFFALSE 30208
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30184: LD_VAR 0 3
30188: PUSH
30189: LD_INT 1
30191: ARRAY
30192: PPUSH
30193: LD_VAR 0 3
30197: PUSH
30198: LD_INT 2
30200: ARRAY
30201: PPUSH
30202: CALL_OW 235
30206: GO 30181
30208: POP
30209: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30210: LD_ADDR_EXP 119
30214: PUSH
30215: LD_EXP 119
30219: PPUSH
30220: LD_VAR 0 4
30224: PPUSH
30225: EMPTY
30226: PPUSH
30227: CALL_OW 1
30231: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30232: LD_VAR 0 1
30236: PPUSH
30237: LD_INT 0
30239: PPUSH
30240: CALL_OW 505
// end ; end ;
30244: LD_VAR 0 2
30248: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30249: LD_INT 0
30251: PPUSH
30252: PPUSH
30253: PPUSH
// if not hack in hackTanks or not vehicles then
30254: LD_VAR 0 1
30258: PUSH
30259: LD_EXP 118
30263: IN
30264: NOT
30265: PUSH
30266: LD_VAR 0 2
30270: NOT
30271: OR
30272: IFFALSE 30276
// exit ;
30274: GO 30551
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30276: LD_ADDR_VAR 0 2
30280: PUSH
30281: LD_VAR 0 1
30285: PPUSH
30286: LD_VAR 0 2
30290: PPUSH
30291: LD_INT 1
30293: PPUSH
30294: LD_INT 1
30296: PPUSH
30297: CALL 38368 0 4
30301: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30302: LD_ADDR_VAR 0 5
30306: PUSH
30307: LD_EXP 118
30311: PPUSH
30312: LD_VAR 0 1
30316: PPUSH
30317: CALL 37718 0 2
30321: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30322: LD_EXP 119
30326: PUSH
30327: LD_VAR 0 5
30331: ARRAY
30332: PUSH
30333: LD_EXP 120
30337: LESS
30338: IFFALSE 30527
// begin for i := 1 to vehicles do
30340: LD_ADDR_VAR 0 4
30344: PUSH
30345: DOUBLE
30346: LD_INT 1
30348: DEC
30349: ST_TO_ADDR
30350: LD_VAR 0 2
30354: PUSH
30355: FOR_TO
30356: IFFALSE 30525
// begin if hackTanksCaptured [ index ] = hackLimit then
30358: LD_EXP 119
30362: PUSH
30363: LD_VAR 0 5
30367: ARRAY
30368: PUSH
30369: LD_EXP 120
30373: EQUAL
30374: IFFALSE 30378
// break ;
30376: GO 30525
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30378: LD_ADDR_EXP 122
30382: PUSH
30383: LD_EXP 122
30387: PPUSH
30388: LD_VAR 0 5
30392: PPUSH
30393: LD_EXP 122
30397: PUSH
30398: LD_VAR 0 5
30402: ARRAY
30403: PUSH
30404: LD_INT 1
30406: PLUS
30407: PPUSH
30408: CALL_OW 1
30412: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30413: LD_ADDR_EXP 119
30417: PUSH
30418: LD_EXP 119
30422: PPUSH
30423: LD_VAR 0 5
30427: PUSH
30428: LD_EXP 119
30432: PUSH
30433: LD_VAR 0 5
30437: ARRAY
30438: PUSH
30439: LD_INT 1
30441: PLUS
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PPUSH
30447: LD_VAR 0 2
30451: PUSH
30452: LD_VAR 0 4
30456: ARRAY
30457: PUSH
30458: LD_VAR 0 2
30462: PUSH
30463: LD_VAR 0 4
30467: ARRAY
30468: PPUSH
30469: CALL_OW 255
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PPUSH
30478: CALL 37933 0 3
30482: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30483: LD_VAR 0 2
30487: PUSH
30488: LD_VAR 0 4
30492: ARRAY
30493: PPUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 255
30503: PPUSH
30504: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30508: LD_VAR 0 2
30512: PUSH
30513: LD_VAR 0 4
30517: ARRAY
30518: PPUSH
30519: CALL_OW 141
// end ;
30523: GO 30355
30525: POP
30526: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30527: LD_VAR 0 1
30531: PPUSH
30532: LD_EXP 119
30536: PUSH
30537: LD_VAR 0 5
30541: ARRAY
30542: PUSH
30543: LD_INT 0
30545: PLUS
30546: PPUSH
30547: CALL_OW 505
// end ;
30551: LD_VAR 0 3
30555: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30556: LD_INT 0
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
// if not hack in hackTanks then
30562: LD_VAR 0 1
30566: PUSH
30567: LD_EXP 118
30571: IN
30572: NOT
30573: IFFALSE 30577
// exit ;
30575: GO 30817
// index := GetElementIndex ( hackTanks , hack ) ;
30577: LD_ADDR_VAR 0 4
30581: PUSH
30582: LD_EXP 118
30586: PPUSH
30587: LD_VAR 0 1
30591: PPUSH
30592: CALL 37718 0 2
30596: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30597: LD_ADDR_VAR 0 3
30601: PUSH
30602: DOUBLE
30603: LD_EXP 119
30607: PUSH
30608: LD_VAR 0 4
30612: ARRAY
30613: INC
30614: ST_TO_ADDR
30615: LD_INT 1
30617: PUSH
30618: FOR_DOWNTO
30619: IFFALSE 30791
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30621: LD_ADDR_VAR 0 5
30625: PUSH
30626: LD_EXP 119
30630: PUSH
30631: LD_VAR 0 4
30635: ARRAY
30636: PUSH
30637: LD_VAR 0 3
30641: ARRAY
30642: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30643: LD_VAR 0 5
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: PPUSH
30652: CALL_OW 302
30656: NOT
30657: PUSH
30658: LD_VAR 0 5
30662: PUSH
30663: LD_INT 1
30665: ARRAY
30666: PPUSH
30667: CALL_OW 255
30671: PUSH
30672: LD_VAR 0 1
30676: PPUSH
30677: CALL_OW 255
30681: NONEQUAL
30682: OR
30683: IFFALSE 30789
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30685: LD_VAR 0 5
30689: PUSH
30690: LD_INT 1
30692: ARRAY
30693: PPUSH
30694: CALL_OW 305
30698: PUSH
30699: LD_VAR 0 5
30703: PUSH
30704: LD_INT 1
30706: ARRAY
30707: PPUSH
30708: CALL_OW 255
30712: PUSH
30713: LD_VAR 0 1
30717: PPUSH
30718: CALL_OW 255
30722: EQUAL
30723: AND
30724: IFFALSE 30748
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30726: LD_VAR 0 5
30730: PUSH
30731: LD_INT 1
30733: ARRAY
30734: PPUSH
30735: LD_VAR 0 5
30739: PUSH
30740: LD_INT 2
30742: ARRAY
30743: PPUSH
30744: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30748: LD_ADDR_EXP 119
30752: PUSH
30753: LD_EXP 119
30757: PPUSH
30758: LD_VAR 0 4
30762: PPUSH
30763: LD_EXP 119
30767: PUSH
30768: LD_VAR 0 4
30772: ARRAY
30773: PPUSH
30774: LD_VAR 0 3
30778: PPUSH
30779: CALL_OW 3
30783: PPUSH
30784: CALL_OW 1
30788: ST_TO_ADDR
// end ; end ;
30789: GO 30618
30791: POP
30792: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30793: LD_VAR 0 1
30797: PPUSH
30798: LD_EXP 119
30802: PUSH
30803: LD_VAR 0 4
30807: ARRAY
30808: PUSH
30809: LD_INT 0
30811: PLUS
30812: PPUSH
30813: CALL_OW 505
// end ;
30817: LD_VAR 0 2
30821: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30822: LD_INT 0
30824: PPUSH
30825: PPUSH
30826: PPUSH
30827: PPUSH
// if not hack in hackTanks then
30828: LD_VAR 0 1
30832: PUSH
30833: LD_EXP 118
30837: IN
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 30928
// index := GetElementIndex ( hackTanks , hack ) ;
30843: LD_ADDR_VAR 0 5
30847: PUSH
30848: LD_EXP 118
30852: PPUSH
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL 37718 0 2
30862: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30863: LD_ADDR_VAR 0 4
30867: PUSH
30868: DOUBLE
30869: LD_INT 1
30871: DEC
30872: ST_TO_ADDR
30873: LD_EXP 119
30877: PUSH
30878: LD_VAR 0 5
30882: ARRAY
30883: PUSH
30884: FOR_TO
30885: IFFALSE 30926
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30887: LD_EXP 119
30891: PUSH
30892: LD_VAR 0 5
30896: ARRAY
30897: PUSH
30898: LD_VAR 0 4
30902: ARRAY
30903: PUSH
30904: LD_INT 1
30906: ARRAY
30907: PUSH
30908: LD_VAR 0 2
30912: EQUAL
30913: IFFALSE 30924
// KillUnit ( vehicle ) ;
30915: LD_VAR 0 2
30919: PPUSH
30920: CALL_OW 66
30924: GO 30884
30926: POP
30927: POP
// end ;
30928: LD_VAR 0 3
30932: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30933: LD_EXP 123
30937: NOT
30938: IFFALSE 30973
30940: GO 30942
30942: DISABLE
// begin initMiner := true ;
30943: LD_ADDR_EXP 123
30947: PUSH
30948: LD_INT 1
30950: ST_TO_ADDR
// minersList := [ ] ;
30951: LD_ADDR_EXP 124
30955: PUSH
30956: EMPTY
30957: ST_TO_ADDR
// minerMinesList := [ ] ;
30958: LD_ADDR_EXP 125
30962: PUSH
30963: EMPTY
30964: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30965: LD_ADDR_EXP 126
30969: PUSH
30970: LD_INT 5
30972: ST_TO_ADDR
// end ;
30973: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30974: LD_EXP 123
30978: PUSH
30979: LD_INT 34
30981: PUSH
30982: LD_EXP 45
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PPUSH
30991: CALL_OW 69
30995: AND
30996: IFFALSE 31459
30998: GO 31000
31000: DISABLE
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
// begin enable ;
31007: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31008: LD_ADDR_VAR 0 1
31012: PUSH
31013: LD_INT 34
31015: PUSH
31016: LD_EXP 45
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PPUSH
31025: CALL_OW 69
31029: PUSH
31030: FOR_IN
31031: IFFALSE 31103
// begin if not i in minersList then
31033: LD_VAR 0 1
31037: PUSH
31038: LD_EXP 124
31042: IN
31043: NOT
31044: IFFALSE 31101
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31046: LD_ADDR_EXP 124
31050: PUSH
31051: LD_EXP 124
31055: PPUSH
31056: LD_EXP 124
31060: PUSH
31061: LD_INT 1
31063: PLUS
31064: PPUSH
31065: LD_VAR 0 1
31069: PPUSH
31070: CALL_OW 1
31074: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31075: LD_ADDR_EXP 125
31079: PUSH
31080: LD_EXP 125
31084: PPUSH
31085: LD_EXP 125
31089: PUSH
31090: LD_INT 1
31092: PLUS
31093: PPUSH
31094: EMPTY
31095: PPUSH
31096: CALL_OW 1
31100: ST_TO_ADDR
// end end ;
31101: GO 31030
31103: POP
31104: POP
// for i := minerMinesList downto 1 do
31105: LD_ADDR_VAR 0 1
31109: PUSH
31110: DOUBLE
31111: LD_EXP 125
31115: INC
31116: ST_TO_ADDR
31117: LD_INT 1
31119: PUSH
31120: FOR_DOWNTO
31121: IFFALSE 31457
// begin if IsLive ( minersList [ i ] ) then
31123: LD_EXP 124
31127: PUSH
31128: LD_VAR 0 1
31132: ARRAY
31133: PPUSH
31134: CALL_OW 300
31138: IFFALSE 31166
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31140: LD_EXP 124
31144: PUSH
31145: LD_VAR 0 1
31149: ARRAY
31150: PPUSH
31151: LD_EXP 125
31155: PUSH
31156: LD_VAR 0 1
31160: ARRAY
31161: PPUSH
31162: CALL_OW 505
// if not minerMinesList [ i ] then
31166: LD_EXP 125
31170: PUSH
31171: LD_VAR 0 1
31175: ARRAY
31176: NOT
31177: IFFALSE 31181
// continue ;
31179: GO 31120
// for j := minerMinesList [ i ] downto 1 do
31181: LD_ADDR_VAR 0 2
31185: PUSH
31186: DOUBLE
31187: LD_EXP 125
31191: PUSH
31192: LD_VAR 0 1
31196: ARRAY
31197: INC
31198: ST_TO_ADDR
31199: LD_INT 1
31201: PUSH
31202: FOR_DOWNTO
31203: IFFALSE 31453
// begin side := GetSide ( minersList [ i ] ) ;
31205: LD_ADDR_VAR 0 3
31209: PUSH
31210: LD_EXP 124
31214: PUSH
31215: LD_VAR 0 1
31219: ARRAY
31220: PPUSH
31221: CALL_OW 255
31225: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31226: LD_ADDR_VAR 0 4
31230: PUSH
31231: LD_EXP 125
31235: PUSH
31236: LD_VAR 0 1
31240: ARRAY
31241: PUSH
31242: LD_VAR 0 2
31246: ARRAY
31247: PUSH
31248: LD_INT 1
31250: ARRAY
31251: PPUSH
31252: LD_EXP 125
31256: PUSH
31257: LD_VAR 0 1
31261: ARRAY
31262: PUSH
31263: LD_VAR 0 2
31267: ARRAY
31268: PUSH
31269: LD_INT 2
31271: ARRAY
31272: PPUSH
31273: CALL_OW 428
31277: ST_TO_ADDR
// if not tmp then
31278: LD_VAR 0 4
31282: NOT
31283: IFFALSE 31287
// continue ;
31285: GO 31202
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31287: LD_VAR 0 4
31291: PUSH
31292: LD_INT 81
31294: PUSH
31295: LD_VAR 0 3
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PPUSH
31304: CALL_OW 69
31308: IN
31309: PUSH
31310: LD_EXP 125
31314: PUSH
31315: LD_VAR 0 1
31319: ARRAY
31320: PUSH
31321: LD_VAR 0 2
31325: ARRAY
31326: PUSH
31327: LD_INT 1
31329: ARRAY
31330: PPUSH
31331: LD_EXP 125
31335: PUSH
31336: LD_VAR 0 1
31340: ARRAY
31341: PUSH
31342: LD_VAR 0 2
31346: ARRAY
31347: PUSH
31348: LD_INT 2
31350: ARRAY
31351: PPUSH
31352: CALL_OW 458
31356: AND
31357: IFFALSE 31451
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31359: LD_EXP 125
31363: PUSH
31364: LD_VAR 0 1
31368: ARRAY
31369: PUSH
31370: LD_VAR 0 2
31374: ARRAY
31375: PUSH
31376: LD_INT 1
31378: ARRAY
31379: PPUSH
31380: LD_EXP 125
31384: PUSH
31385: LD_VAR 0 1
31389: ARRAY
31390: PUSH
31391: LD_VAR 0 2
31395: ARRAY
31396: PUSH
31397: LD_INT 2
31399: ARRAY
31400: PPUSH
31401: LD_VAR 0 3
31405: PPUSH
31406: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31410: LD_ADDR_EXP 125
31414: PUSH
31415: LD_EXP 125
31419: PPUSH
31420: LD_VAR 0 1
31424: PPUSH
31425: LD_EXP 125
31429: PUSH
31430: LD_VAR 0 1
31434: ARRAY
31435: PPUSH
31436: LD_VAR 0 2
31440: PPUSH
31441: CALL_OW 3
31445: PPUSH
31446: CALL_OW 1
31450: ST_TO_ADDR
// end ; end ;
31451: GO 31202
31453: POP
31454: POP
// end ;
31455: GO 31120
31457: POP
31458: POP
// end ;
31459: PPOPN 4
31461: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31462: LD_INT 0
31464: PPUSH
31465: PPUSH
// result := false ;
31466: LD_ADDR_VAR 0 4
31470: PUSH
31471: LD_INT 0
31473: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31474: LD_VAR 0 1
31478: PPUSH
31479: CALL_OW 264
31483: PUSH
31484: LD_EXP 45
31488: EQUAL
31489: NOT
31490: IFFALSE 31494
// exit ;
31492: GO 31734
// index := GetElementIndex ( minersList , unit ) ;
31494: LD_ADDR_VAR 0 5
31498: PUSH
31499: LD_EXP 124
31503: PPUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL 37718 0 2
31513: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31514: LD_EXP 125
31518: PUSH
31519: LD_VAR 0 5
31523: ARRAY
31524: PUSH
31525: LD_EXP 126
31529: GREATEREQUAL
31530: IFFALSE 31534
// exit ;
31532: GO 31734
// ComMoveXY ( unit , x , y ) ;
31534: LD_VAR 0 1
31538: PPUSH
31539: LD_VAR 0 2
31543: PPUSH
31544: LD_VAR 0 3
31548: PPUSH
31549: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31553: LD_INT 35
31555: PPUSH
31556: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31560: LD_VAR 0 1
31564: PPUSH
31565: LD_VAR 0 2
31569: PPUSH
31570: LD_VAR 0 3
31574: PPUSH
31575: CALL 68490 0 3
31579: NOT
31580: PUSH
31581: LD_VAR 0 1
31585: PPUSH
31586: CALL_OW 314
31590: AND
31591: IFFALSE 31595
// exit ;
31593: GO 31734
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31595: LD_VAR 0 2
31599: PPUSH
31600: LD_VAR 0 3
31604: PPUSH
31605: CALL_OW 428
31609: PUSH
31610: LD_VAR 0 1
31614: EQUAL
31615: PUSH
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL_OW 314
31625: NOT
31626: AND
31627: IFFALSE 31553
// PlaySoundXY ( x , y , PlantMine ) ;
31629: LD_VAR 0 2
31633: PPUSH
31634: LD_VAR 0 3
31638: PPUSH
31639: LD_STRING PlantMine
31641: PPUSH
31642: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31646: LD_VAR 0 2
31650: PPUSH
31651: LD_VAR 0 3
31655: PPUSH
31656: LD_VAR 0 1
31660: PPUSH
31661: CALL_OW 255
31665: PPUSH
31666: LD_INT 0
31668: PPUSH
31669: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31673: LD_ADDR_EXP 125
31677: PUSH
31678: LD_EXP 125
31682: PPUSH
31683: LD_VAR 0 5
31687: PUSH
31688: LD_EXP 125
31692: PUSH
31693: LD_VAR 0 5
31697: ARRAY
31698: PUSH
31699: LD_INT 1
31701: PLUS
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PPUSH
31707: LD_VAR 0 2
31711: PUSH
31712: LD_VAR 0 3
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PPUSH
31721: CALL 37933 0 3
31725: ST_TO_ADDR
// result := true ;
31726: LD_ADDR_VAR 0 4
31730: PUSH
31731: LD_INT 1
31733: ST_TO_ADDR
// end ;
31734: LD_VAR 0 4
31738: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31739: LD_INT 0
31741: PPUSH
31742: PPUSH
31743: PPUSH
// if not unit in minersList then
31744: LD_VAR 0 1
31748: PUSH
31749: LD_EXP 124
31753: IN
31754: NOT
31755: IFFALSE 31759
// exit ;
31757: GO 32151
// index := GetElementIndex ( minersList , unit ) ;
31759: LD_ADDR_VAR 0 6
31763: PUSH
31764: LD_EXP 124
31768: PPUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL 37718 0 2
31778: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31779: LD_ADDR_VAR 0 5
31783: PUSH
31784: DOUBLE
31785: LD_EXP 125
31789: PUSH
31790: LD_VAR 0 6
31794: ARRAY
31795: INC
31796: ST_TO_ADDR
31797: LD_INT 1
31799: PUSH
31800: FOR_DOWNTO
31801: IFFALSE 31962
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31803: LD_EXP 125
31807: PUSH
31808: LD_VAR 0 6
31812: ARRAY
31813: PUSH
31814: LD_VAR 0 5
31818: ARRAY
31819: PUSH
31820: LD_INT 1
31822: ARRAY
31823: PUSH
31824: LD_VAR 0 2
31828: EQUAL
31829: PUSH
31830: LD_EXP 125
31834: PUSH
31835: LD_VAR 0 6
31839: ARRAY
31840: PUSH
31841: LD_VAR 0 5
31845: ARRAY
31846: PUSH
31847: LD_INT 2
31849: ARRAY
31850: PUSH
31851: LD_VAR 0 3
31855: EQUAL
31856: AND
31857: IFFALSE 31960
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31859: LD_EXP 125
31863: PUSH
31864: LD_VAR 0 6
31868: ARRAY
31869: PUSH
31870: LD_VAR 0 5
31874: ARRAY
31875: PUSH
31876: LD_INT 1
31878: ARRAY
31879: PPUSH
31880: LD_EXP 125
31884: PUSH
31885: LD_VAR 0 6
31889: ARRAY
31890: PUSH
31891: LD_VAR 0 5
31895: ARRAY
31896: PUSH
31897: LD_INT 2
31899: ARRAY
31900: PPUSH
31901: LD_VAR 0 1
31905: PPUSH
31906: CALL_OW 255
31910: PPUSH
31911: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31915: LD_ADDR_EXP 125
31919: PUSH
31920: LD_EXP 125
31924: PPUSH
31925: LD_VAR 0 6
31929: PPUSH
31930: LD_EXP 125
31934: PUSH
31935: LD_VAR 0 6
31939: ARRAY
31940: PPUSH
31941: LD_VAR 0 5
31945: PPUSH
31946: CALL_OW 3
31950: PPUSH
31951: CALL_OW 1
31955: ST_TO_ADDR
// exit ;
31956: POP
31957: POP
31958: GO 32151
// end ; end ;
31960: GO 31800
31962: POP
31963: POP
// for i := minerMinesList [ index ] downto 1 do
31964: LD_ADDR_VAR 0 5
31968: PUSH
31969: DOUBLE
31970: LD_EXP 125
31974: PUSH
31975: LD_VAR 0 6
31979: ARRAY
31980: INC
31981: ST_TO_ADDR
31982: LD_INT 1
31984: PUSH
31985: FOR_DOWNTO
31986: IFFALSE 32149
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31988: LD_EXP 125
31992: PUSH
31993: LD_VAR 0 6
31997: ARRAY
31998: PUSH
31999: LD_VAR 0 5
32003: ARRAY
32004: PUSH
32005: LD_INT 1
32007: ARRAY
32008: PPUSH
32009: LD_EXP 125
32013: PUSH
32014: LD_VAR 0 6
32018: ARRAY
32019: PUSH
32020: LD_VAR 0 5
32024: ARRAY
32025: PUSH
32026: LD_INT 2
32028: ARRAY
32029: PPUSH
32030: LD_VAR 0 2
32034: PPUSH
32035: LD_VAR 0 3
32039: PPUSH
32040: CALL_OW 298
32044: PUSH
32045: LD_INT 6
32047: LESS
32048: IFFALSE 32147
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32050: LD_EXP 125
32054: PUSH
32055: LD_VAR 0 6
32059: ARRAY
32060: PUSH
32061: LD_VAR 0 5
32065: ARRAY
32066: PUSH
32067: LD_INT 1
32069: ARRAY
32070: PPUSH
32071: LD_EXP 125
32075: PUSH
32076: LD_VAR 0 6
32080: ARRAY
32081: PUSH
32082: LD_VAR 0 5
32086: ARRAY
32087: PUSH
32088: LD_INT 2
32090: ARRAY
32091: PPUSH
32092: LD_VAR 0 1
32096: PPUSH
32097: CALL_OW 255
32101: PPUSH
32102: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32106: LD_ADDR_EXP 125
32110: PUSH
32111: LD_EXP 125
32115: PPUSH
32116: LD_VAR 0 6
32120: PPUSH
32121: LD_EXP 125
32125: PUSH
32126: LD_VAR 0 6
32130: ARRAY
32131: PPUSH
32132: LD_VAR 0 5
32136: PPUSH
32137: CALL_OW 3
32141: PPUSH
32142: CALL_OW 1
32146: ST_TO_ADDR
// end ; end ;
32147: GO 31985
32149: POP
32150: POP
// end ;
32151: LD_VAR 0 4
32155: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32156: LD_INT 0
32158: PPUSH
32159: PPUSH
32160: PPUSH
32161: PPUSH
32162: PPUSH
32163: PPUSH
32164: PPUSH
32165: PPUSH
32166: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32167: LD_VAR 0 1
32171: PPUSH
32172: CALL_OW 264
32176: PUSH
32177: LD_EXP 45
32181: EQUAL
32182: NOT
32183: PUSH
32184: LD_VAR 0 1
32188: PUSH
32189: LD_EXP 124
32193: IN
32194: NOT
32195: OR
32196: IFFALSE 32200
// exit ;
32198: GO 32522
// index := GetElementIndex ( minersList , unit ) ;
32200: LD_ADDR_VAR 0 6
32204: PUSH
32205: LD_EXP 124
32209: PPUSH
32210: LD_VAR 0 1
32214: PPUSH
32215: CALL 37718 0 2
32219: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32220: LD_ADDR_VAR 0 8
32224: PUSH
32225: LD_EXP 126
32229: PUSH
32230: LD_EXP 125
32234: PUSH
32235: LD_VAR 0 6
32239: ARRAY
32240: MINUS
32241: ST_TO_ADDR
// if not minesFreeAmount then
32242: LD_VAR 0 8
32246: NOT
32247: IFFALSE 32251
// exit ;
32249: GO 32522
// tmp := [ ] ;
32251: LD_ADDR_VAR 0 7
32255: PUSH
32256: EMPTY
32257: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32258: LD_ADDR_VAR 0 5
32262: PUSH
32263: DOUBLE
32264: LD_INT 1
32266: DEC
32267: ST_TO_ADDR
32268: LD_VAR 0 8
32272: PUSH
32273: FOR_TO
32274: IFFALSE 32469
// begin _d := rand ( 0 , 5 ) ;
32276: LD_ADDR_VAR 0 11
32280: PUSH
32281: LD_INT 0
32283: PPUSH
32284: LD_INT 5
32286: PPUSH
32287: CALL_OW 12
32291: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32292: LD_ADDR_VAR 0 12
32296: PUSH
32297: LD_INT 2
32299: PPUSH
32300: LD_INT 6
32302: PPUSH
32303: CALL_OW 12
32307: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32308: LD_ADDR_VAR 0 9
32312: PUSH
32313: LD_VAR 0 2
32317: PPUSH
32318: LD_VAR 0 11
32322: PPUSH
32323: LD_VAR 0 12
32327: PPUSH
32328: CALL_OW 272
32332: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32333: LD_ADDR_VAR 0 10
32337: PUSH
32338: LD_VAR 0 3
32342: PPUSH
32343: LD_VAR 0 11
32347: PPUSH
32348: LD_VAR 0 12
32352: PPUSH
32353: CALL_OW 273
32357: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32358: LD_VAR 0 9
32362: PPUSH
32363: LD_VAR 0 10
32367: PPUSH
32368: CALL_OW 488
32372: PUSH
32373: LD_VAR 0 9
32377: PUSH
32378: LD_VAR 0 10
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_VAR 0 7
32391: IN
32392: NOT
32393: AND
32394: PUSH
32395: LD_VAR 0 9
32399: PPUSH
32400: LD_VAR 0 10
32404: PPUSH
32405: CALL_OW 458
32409: NOT
32410: AND
32411: IFFALSE 32453
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32413: LD_ADDR_VAR 0 7
32417: PUSH
32418: LD_VAR 0 7
32422: PPUSH
32423: LD_VAR 0 7
32427: PUSH
32428: LD_INT 1
32430: PLUS
32431: PPUSH
32432: LD_VAR 0 9
32436: PUSH
32437: LD_VAR 0 10
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PPUSH
32446: CALL_OW 1
32450: ST_TO_ADDR
32451: GO 32467
// i := i - 1 ;
32453: LD_ADDR_VAR 0 5
32457: PUSH
32458: LD_VAR 0 5
32462: PUSH
32463: LD_INT 1
32465: MINUS
32466: ST_TO_ADDR
// end ;
32467: GO 32273
32469: POP
32470: POP
// for i in tmp do
32471: LD_ADDR_VAR 0 5
32475: PUSH
32476: LD_VAR 0 7
32480: PUSH
32481: FOR_IN
32482: IFFALSE 32520
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32484: LD_VAR 0 1
32488: PPUSH
32489: LD_VAR 0 5
32493: PUSH
32494: LD_INT 1
32496: ARRAY
32497: PPUSH
32498: LD_VAR 0 5
32502: PUSH
32503: LD_INT 2
32505: ARRAY
32506: PPUSH
32507: CALL 31462 0 3
32511: NOT
32512: IFFALSE 32518
// exit ;
32514: POP
32515: POP
32516: GO 32522
32518: GO 32481
32520: POP
32521: POP
// end ;
32522: LD_VAR 0 4
32526: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32527: LD_INT 0
32529: PPUSH
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
// if not GetClass ( unit ) = class_sniper then
32536: LD_VAR 0 1
32540: PPUSH
32541: CALL_OW 257
32545: PUSH
32546: LD_INT 5
32548: EQUAL
32549: NOT
32550: IFFALSE 32554
// exit ;
32552: GO 32942
// dist := 8 ;
32554: LD_ADDR_VAR 0 5
32558: PUSH
32559: LD_INT 8
32561: ST_TO_ADDR
// viewRange := 12 ;
32562: LD_ADDR_VAR 0 7
32566: PUSH
32567: LD_INT 12
32569: ST_TO_ADDR
// side := GetSide ( unit ) ;
32570: LD_ADDR_VAR 0 6
32574: PUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: CALL_OW 255
32584: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32585: LD_INT 61
32587: PPUSH
32588: LD_VAR 0 6
32592: PPUSH
32593: CALL_OW 321
32597: PUSH
32598: LD_INT 2
32600: EQUAL
32601: IFFALSE 32611
// viewRange := 16 ;
32603: LD_ADDR_VAR 0 7
32607: PUSH
32608: LD_INT 16
32610: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32611: LD_VAR 0 1
32615: PPUSH
32616: LD_VAR 0 2
32620: PPUSH
32621: LD_VAR 0 3
32625: PPUSH
32626: CALL_OW 297
32630: PUSH
32631: LD_VAR 0 5
32635: GREATER
32636: IFFALSE 32715
// begin ComMoveXY ( unit , x , y ) ;
32638: LD_VAR 0 1
32642: PPUSH
32643: LD_VAR 0 2
32647: PPUSH
32648: LD_VAR 0 3
32652: PPUSH
32653: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32657: LD_INT 35
32659: PPUSH
32660: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32664: LD_VAR 0 1
32668: PPUSH
32669: LD_VAR 0 2
32673: PPUSH
32674: LD_VAR 0 3
32678: PPUSH
32679: CALL 68490 0 3
32683: NOT
32684: IFFALSE 32688
// exit ;
32686: GO 32942
// until GetDistUnitXY ( unit , x , y ) < dist ;
32688: LD_VAR 0 1
32692: PPUSH
32693: LD_VAR 0 2
32697: PPUSH
32698: LD_VAR 0 3
32702: PPUSH
32703: CALL_OW 297
32707: PUSH
32708: LD_VAR 0 5
32712: LESS
32713: IFFALSE 32657
// end ; ComTurnXY ( unit , x , y ) ;
32715: LD_VAR 0 1
32719: PPUSH
32720: LD_VAR 0 2
32724: PPUSH
32725: LD_VAR 0 3
32729: PPUSH
32730: CALL_OW 118
// wait ( 5 ) ;
32734: LD_INT 5
32736: PPUSH
32737: CALL_OW 67
// _d := GetDir ( unit ) ;
32741: LD_ADDR_VAR 0 10
32745: PUSH
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 254
32755: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32756: LD_ADDR_VAR 0 8
32760: PUSH
32761: LD_VAR 0 1
32765: PPUSH
32766: CALL_OW 250
32770: PPUSH
32771: LD_VAR 0 10
32775: PPUSH
32776: LD_VAR 0 5
32780: PPUSH
32781: CALL_OW 272
32785: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32786: LD_ADDR_VAR 0 9
32790: PUSH
32791: LD_VAR 0 1
32795: PPUSH
32796: CALL_OW 251
32800: PPUSH
32801: LD_VAR 0 10
32805: PPUSH
32806: LD_VAR 0 5
32810: PPUSH
32811: CALL_OW 273
32815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32816: LD_VAR 0 8
32820: PPUSH
32821: LD_VAR 0 9
32825: PPUSH
32826: CALL_OW 488
32830: NOT
32831: IFFALSE 32835
// exit ;
32833: GO 32942
// ComAnimCustom ( unit , 1 ) ;
32835: LD_VAR 0 1
32839: PPUSH
32840: LD_INT 1
32842: PPUSH
32843: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32847: LD_VAR 0 8
32851: PPUSH
32852: LD_VAR 0 9
32856: PPUSH
32857: LD_VAR 0 6
32861: PPUSH
32862: LD_VAR 0 7
32866: PPUSH
32867: CALL_OW 330
// repeat wait ( 1 ) ;
32871: LD_INT 1
32873: PPUSH
32874: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32878: LD_VAR 0 1
32882: PPUSH
32883: CALL_OW 316
32887: PUSH
32888: LD_VAR 0 1
32892: PPUSH
32893: CALL_OW 314
32897: OR
32898: PUSH
32899: LD_VAR 0 1
32903: PPUSH
32904: CALL_OW 302
32908: NOT
32909: OR
32910: PUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 301
32920: OR
32921: IFFALSE 32871
// RemoveSeeing ( _x , _y , side ) ;
32923: LD_VAR 0 8
32927: PPUSH
32928: LD_VAR 0 9
32932: PPUSH
32933: LD_VAR 0 6
32937: PPUSH
32938: CALL_OW 331
// end ; end_of_file
32942: LD_VAR 0 4
32946: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32947: LD_INT 0
32949: PPUSH
32950: PPUSH
// if exist_mode then
32951: LD_VAR 0 2
32955: IFFALSE 32980
// unit := CreateCharacter ( prefix & ident ) else
32957: LD_ADDR_VAR 0 5
32961: PUSH
32962: LD_VAR 0 3
32966: PUSH
32967: LD_VAR 0 1
32971: STR
32972: PPUSH
32973: CALL_OW 34
32977: ST_TO_ADDR
32978: GO 32995
// unit := NewCharacter ( ident ) ;
32980: LD_ADDR_VAR 0 5
32984: PUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 25
32994: ST_TO_ADDR
// result := unit ;
32995: LD_ADDR_VAR 0 4
32999: PUSH
33000: LD_VAR 0 5
33004: ST_TO_ADDR
// end ;
33005: LD_VAR 0 4
33009: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33010: LD_INT 0
33012: PPUSH
33013: PPUSH
// if not side or not nation then
33014: LD_VAR 0 1
33018: NOT
33019: PUSH
33020: LD_VAR 0 2
33024: NOT
33025: OR
33026: IFFALSE 33030
// exit ;
33028: GO 33798
// case nation of nation_american :
33030: LD_VAR 0 2
33034: PUSH
33035: LD_INT 1
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33257
33043: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33044: LD_ADDR_VAR 0 4
33048: PUSH
33049: LD_INT 35
33051: PUSH
33052: LD_INT 45
33054: PUSH
33055: LD_INT 46
33057: PUSH
33058: LD_INT 47
33060: PUSH
33061: LD_INT 82
33063: PUSH
33064: LD_INT 83
33066: PUSH
33067: LD_INT 84
33069: PUSH
33070: LD_INT 85
33072: PUSH
33073: LD_INT 86
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 6
33084: PUSH
33085: LD_INT 15
33087: PUSH
33088: LD_INT 16
33090: PUSH
33091: LD_INT 7
33093: PUSH
33094: LD_INT 12
33096: PUSH
33097: LD_INT 13
33099: PUSH
33100: LD_INT 10
33102: PUSH
33103: LD_INT 14
33105: PUSH
33106: LD_INT 20
33108: PUSH
33109: LD_INT 21
33111: PUSH
33112: LD_INT 22
33114: PUSH
33115: LD_INT 25
33117: PUSH
33118: LD_INT 32
33120: PUSH
33121: LD_INT 27
33123: PUSH
33124: LD_INT 36
33126: PUSH
33127: LD_INT 69
33129: PUSH
33130: LD_INT 39
33132: PUSH
33133: LD_INT 34
33135: PUSH
33136: LD_INT 40
33138: PUSH
33139: LD_INT 48
33141: PUSH
33142: LD_INT 49
33144: PUSH
33145: LD_INT 50
33147: PUSH
33148: LD_INT 51
33150: PUSH
33151: LD_INT 52
33153: PUSH
33154: LD_INT 53
33156: PUSH
33157: LD_INT 54
33159: PUSH
33160: LD_INT 55
33162: PUSH
33163: LD_INT 56
33165: PUSH
33166: LD_INT 57
33168: PUSH
33169: LD_INT 58
33171: PUSH
33172: LD_INT 59
33174: PUSH
33175: LD_INT 60
33177: PUSH
33178: LD_INT 61
33180: PUSH
33181: LD_INT 62
33183: PUSH
33184: LD_INT 80
33186: PUSH
33187: LD_INT 82
33189: PUSH
33190: LD_INT 83
33192: PUSH
33193: LD_INT 84
33195: PUSH
33196: LD_INT 85
33198: PUSH
33199: LD_INT 86
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
33255: GO 33722
33257: LD_INT 2
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33491
33265: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33266: LD_ADDR_VAR 0 4
33270: PUSH
33271: LD_INT 35
33273: PUSH
33274: LD_INT 45
33276: PUSH
33277: LD_INT 46
33279: PUSH
33280: LD_INT 47
33282: PUSH
33283: LD_INT 82
33285: PUSH
33286: LD_INT 83
33288: PUSH
33289: LD_INT 84
33291: PUSH
33292: LD_INT 85
33294: PUSH
33295: LD_INT 87
33297: PUSH
33298: LD_INT 70
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 11
33306: PUSH
33307: LD_INT 3
33309: PUSH
33310: LD_INT 4
33312: PUSH
33313: LD_INT 5
33315: PUSH
33316: LD_INT 6
33318: PUSH
33319: LD_INT 15
33321: PUSH
33322: LD_INT 18
33324: PUSH
33325: LD_INT 7
33327: PUSH
33328: LD_INT 17
33330: PUSH
33331: LD_INT 8
33333: PUSH
33334: LD_INT 20
33336: PUSH
33337: LD_INT 21
33339: PUSH
33340: LD_INT 22
33342: PUSH
33343: LD_INT 72
33345: PUSH
33346: LD_INT 26
33348: PUSH
33349: LD_INT 69
33351: PUSH
33352: LD_INT 39
33354: PUSH
33355: LD_INT 40
33357: PUSH
33358: LD_INT 41
33360: PUSH
33361: LD_INT 42
33363: PUSH
33364: LD_INT 43
33366: PUSH
33367: LD_INT 48
33369: PUSH
33370: LD_INT 49
33372: PUSH
33373: LD_INT 50
33375: PUSH
33376: LD_INT 51
33378: PUSH
33379: LD_INT 52
33381: PUSH
33382: LD_INT 53
33384: PUSH
33385: LD_INT 54
33387: PUSH
33388: LD_INT 55
33390: PUSH
33391: LD_INT 56
33393: PUSH
33394: LD_INT 60
33396: PUSH
33397: LD_INT 61
33399: PUSH
33400: LD_INT 62
33402: PUSH
33403: LD_INT 66
33405: PUSH
33406: LD_INT 67
33408: PUSH
33409: LD_INT 68
33411: PUSH
33412: LD_INT 81
33414: PUSH
33415: LD_INT 82
33417: PUSH
33418: LD_INT 83
33420: PUSH
33421: LD_INT 84
33423: PUSH
33424: LD_INT 85
33426: PUSH
33427: LD_INT 87
33429: PUSH
33430: LD_INT 88
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: ST_TO_ADDR
33489: GO 33722
33491: LD_INT 3
33493: DOUBLE
33494: EQUAL
33495: IFTRUE 33499
33497: GO 33721
33499: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33500: LD_ADDR_VAR 0 4
33504: PUSH
33505: LD_INT 46
33507: PUSH
33508: LD_INT 47
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: LD_INT 82
33519: PUSH
33520: LD_INT 83
33522: PUSH
33523: LD_INT 84
33525: PUSH
33526: LD_INT 85
33528: PUSH
33529: LD_INT 86
33531: PUSH
33532: LD_INT 11
33534: PUSH
33535: LD_INT 9
33537: PUSH
33538: LD_INT 20
33540: PUSH
33541: LD_INT 19
33543: PUSH
33544: LD_INT 21
33546: PUSH
33547: LD_INT 24
33549: PUSH
33550: LD_INT 22
33552: PUSH
33553: LD_INT 25
33555: PUSH
33556: LD_INT 28
33558: PUSH
33559: LD_INT 29
33561: PUSH
33562: LD_INT 30
33564: PUSH
33565: LD_INT 31
33567: PUSH
33568: LD_INT 37
33570: PUSH
33571: LD_INT 38
33573: PUSH
33574: LD_INT 32
33576: PUSH
33577: LD_INT 27
33579: PUSH
33580: LD_INT 33
33582: PUSH
33583: LD_INT 69
33585: PUSH
33586: LD_INT 39
33588: PUSH
33589: LD_INT 34
33591: PUSH
33592: LD_INT 40
33594: PUSH
33595: LD_INT 71
33597: PUSH
33598: LD_INT 23
33600: PUSH
33601: LD_INT 44
33603: PUSH
33604: LD_INT 48
33606: PUSH
33607: LD_INT 49
33609: PUSH
33610: LD_INT 50
33612: PUSH
33613: LD_INT 51
33615: PUSH
33616: LD_INT 52
33618: PUSH
33619: LD_INT 53
33621: PUSH
33622: LD_INT 54
33624: PUSH
33625: LD_INT 55
33627: PUSH
33628: LD_INT 56
33630: PUSH
33631: LD_INT 57
33633: PUSH
33634: LD_INT 58
33636: PUSH
33637: LD_INT 59
33639: PUSH
33640: LD_INT 63
33642: PUSH
33643: LD_INT 64
33645: PUSH
33646: LD_INT 65
33648: PUSH
33649: LD_INT 82
33651: PUSH
33652: LD_INT 83
33654: PUSH
33655: LD_INT 84
33657: PUSH
33658: LD_INT 85
33660: PUSH
33661: LD_INT 86
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: ST_TO_ADDR
33719: GO 33722
33721: POP
// if state > - 1 and state < 3 then
33722: LD_VAR 0 3
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: GREATER
33731: PUSH
33732: LD_VAR 0 3
33736: PUSH
33737: LD_INT 3
33739: LESS
33740: AND
33741: IFFALSE 33798
// for i in result do
33743: LD_ADDR_VAR 0 5
33747: PUSH
33748: LD_VAR 0 4
33752: PUSH
33753: FOR_IN
33754: IFFALSE 33796
// if GetTech ( i , side ) <> state then
33756: LD_VAR 0 5
33760: PPUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL_OW 321
33770: PUSH
33771: LD_VAR 0 3
33775: NONEQUAL
33776: IFFALSE 33794
// result := result diff i ;
33778: LD_ADDR_VAR 0 4
33782: PUSH
33783: LD_VAR 0 4
33787: PUSH
33788: LD_VAR 0 5
33792: DIFF
33793: ST_TO_ADDR
33794: GO 33753
33796: POP
33797: POP
// end ;
33798: LD_VAR 0 4
33802: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33803: LD_INT 0
33805: PPUSH
33806: PPUSH
33807: PPUSH
// result := true ;
33808: LD_ADDR_VAR 0 3
33812: PUSH
33813: LD_INT 1
33815: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33816: LD_ADDR_VAR 0 5
33820: PUSH
33821: LD_VAR 0 2
33825: PPUSH
33826: CALL_OW 480
33830: ST_TO_ADDR
// if not tmp then
33831: LD_VAR 0 5
33835: NOT
33836: IFFALSE 33840
// exit ;
33838: GO 33889
// for i in tmp do
33840: LD_ADDR_VAR 0 4
33844: PUSH
33845: LD_VAR 0 5
33849: PUSH
33850: FOR_IN
33851: IFFALSE 33887
// if GetTech ( i , side ) <> state_researched then
33853: LD_VAR 0 4
33857: PPUSH
33858: LD_VAR 0 1
33862: PPUSH
33863: CALL_OW 321
33867: PUSH
33868: LD_INT 2
33870: NONEQUAL
33871: IFFALSE 33885
// begin result := false ;
33873: LD_ADDR_VAR 0 3
33877: PUSH
33878: LD_INT 0
33880: ST_TO_ADDR
// exit ;
33881: POP
33882: POP
33883: GO 33889
// end ;
33885: GO 33850
33887: POP
33888: POP
// end ;
33889: LD_VAR 0 3
33893: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33909: LD_VAR 0 1
33913: NOT
33914: PUSH
33915: LD_VAR 0 1
33919: PPUSH
33920: CALL_OW 257
33924: PUSH
33925: LD_INT 9
33927: NONEQUAL
33928: OR
33929: IFFALSE 33933
// exit ;
33931: GO 34506
// side := GetSide ( unit ) ;
33933: LD_ADDR_VAR 0 9
33937: PUSH
33938: LD_VAR 0 1
33942: PPUSH
33943: CALL_OW 255
33947: ST_TO_ADDR
// tech_space := tech_spacanom ;
33948: LD_ADDR_VAR 0 12
33952: PUSH
33953: LD_INT 29
33955: ST_TO_ADDR
// tech_time := tech_taurad ;
33956: LD_ADDR_VAR 0 13
33960: PUSH
33961: LD_INT 28
33963: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33964: LD_ADDR_VAR 0 11
33968: PUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: CALL_OW 310
33978: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33979: LD_VAR 0 11
33983: PPUSH
33984: CALL_OW 247
33988: PUSH
33989: LD_INT 2
33991: EQUAL
33992: IFFALSE 33996
// exit ;
33994: GO 34506
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33996: LD_ADDR_VAR 0 8
34000: PUSH
34001: LD_INT 81
34003: PUSH
34004: LD_VAR 0 9
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 21
34018: PUSH
34019: LD_INT 3
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PPUSH
34034: CALL_OW 69
34038: ST_TO_ADDR
// if not tmp then
34039: LD_VAR 0 8
34043: NOT
34044: IFFALSE 34048
// exit ;
34046: GO 34506
// if in_unit then
34048: LD_VAR 0 11
34052: IFFALSE 34076
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34054: LD_ADDR_VAR 0 10
34058: PUSH
34059: LD_VAR 0 8
34063: PPUSH
34064: LD_VAR 0 11
34068: PPUSH
34069: CALL_OW 74
34073: ST_TO_ADDR
34074: GO 34096
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34076: LD_ADDR_VAR 0 10
34080: PUSH
34081: LD_VAR 0 8
34085: PPUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 74
34095: ST_TO_ADDR
// if not enemy then
34096: LD_VAR 0 10
34100: NOT
34101: IFFALSE 34105
// exit ;
34103: GO 34506
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34105: LD_VAR 0 11
34109: PUSH
34110: LD_VAR 0 11
34114: PPUSH
34115: LD_VAR 0 10
34119: PPUSH
34120: CALL_OW 296
34124: PUSH
34125: LD_INT 13
34127: GREATER
34128: AND
34129: PUSH
34130: LD_VAR 0 1
34134: PPUSH
34135: LD_VAR 0 10
34139: PPUSH
34140: CALL_OW 296
34144: PUSH
34145: LD_INT 12
34147: GREATER
34148: OR
34149: IFFALSE 34153
// exit ;
34151: GO 34506
// missile := [ 1 ] ;
34153: LD_ADDR_VAR 0 14
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34164: LD_VAR 0 9
34168: PPUSH
34169: LD_VAR 0 12
34173: PPUSH
34174: CALL_OW 325
34178: IFFALSE 34207
// missile := Insert ( missile , missile + 1 , 2 ) ;
34180: LD_ADDR_VAR 0 14
34184: PUSH
34185: LD_VAR 0 14
34189: PPUSH
34190: LD_VAR 0 14
34194: PUSH
34195: LD_INT 1
34197: PLUS
34198: PPUSH
34199: LD_INT 2
34201: PPUSH
34202: CALL_OW 2
34206: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34207: LD_VAR 0 9
34211: PPUSH
34212: LD_VAR 0 13
34216: PPUSH
34217: CALL_OW 325
34221: PUSH
34222: LD_VAR 0 10
34226: PPUSH
34227: CALL_OW 255
34231: PPUSH
34232: LD_VAR 0 13
34236: PPUSH
34237: CALL_OW 325
34241: NOT
34242: AND
34243: IFFALSE 34272
// missile := Insert ( missile , missile + 1 , 3 ) ;
34245: LD_ADDR_VAR 0 14
34249: PUSH
34250: LD_VAR 0 14
34254: PPUSH
34255: LD_VAR 0 14
34259: PUSH
34260: LD_INT 1
34262: PLUS
34263: PPUSH
34264: LD_INT 3
34266: PPUSH
34267: CALL_OW 2
34271: ST_TO_ADDR
// if missile < 2 then
34272: LD_VAR 0 14
34276: PUSH
34277: LD_INT 2
34279: LESS
34280: IFFALSE 34284
// exit ;
34282: GO 34506
// x := GetX ( enemy ) ;
34284: LD_ADDR_VAR 0 4
34288: PUSH
34289: LD_VAR 0 10
34293: PPUSH
34294: CALL_OW 250
34298: ST_TO_ADDR
// y := GetY ( enemy ) ;
34299: LD_ADDR_VAR 0 5
34303: PUSH
34304: LD_VAR 0 10
34308: PPUSH
34309: CALL_OW 251
34313: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34314: LD_ADDR_VAR 0 6
34318: PUSH
34319: LD_VAR 0 4
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PPUSH
34328: LD_INT 1
34330: PPUSH
34331: CALL_OW 12
34335: PLUS
34336: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34337: LD_ADDR_VAR 0 7
34341: PUSH
34342: LD_VAR 0 5
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PPUSH
34351: LD_INT 1
34353: PPUSH
34354: CALL_OW 12
34358: PLUS
34359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34360: LD_VAR 0 6
34364: PPUSH
34365: LD_VAR 0 7
34369: PPUSH
34370: CALL_OW 488
34374: NOT
34375: IFFALSE 34397
// begin _x := x ;
34377: LD_ADDR_VAR 0 6
34381: PUSH
34382: LD_VAR 0 4
34386: ST_TO_ADDR
// _y := y ;
34387: LD_ADDR_VAR 0 7
34391: PUSH
34392: LD_VAR 0 5
34396: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34397: LD_ADDR_VAR 0 3
34401: PUSH
34402: LD_INT 1
34404: PPUSH
34405: LD_VAR 0 14
34409: PPUSH
34410: CALL_OW 12
34414: ST_TO_ADDR
// case i of 1 :
34415: LD_VAR 0 3
34419: PUSH
34420: LD_INT 1
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 34445
34428: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34429: LD_VAR 0 1
34433: PPUSH
34434: LD_VAR 0 10
34438: PPUSH
34439: CALL_OW 115
34443: GO 34506
34445: LD_INT 2
34447: DOUBLE
34448: EQUAL
34449: IFTRUE 34453
34451: GO 34475
34453: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34454: LD_VAR 0 1
34458: PPUSH
34459: LD_VAR 0 6
34463: PPUSH
34464: LD_VAR 0 7
34468: PPUSH
34469: CALL_OW 153
34473: GO 34506
34475: LD_INT 3
34477: DOUBLE
34478: EQUAL
34479: IFTRUE 34483
34481: GO 34505
34483: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34484: LD_VAR 0 1
34488: PPUSH
34489: LD_VAR 0 6
34493: PPUSH
34494: LD_VAR 0 7
34498: PPUSH
34499: CALL_OW 154
34503: GO 34506
34505: POP
// end ;
34506: LD_VAR 0 2
34510: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34511: LD_INT 0
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
// if not unit or not building then
34519: LD_VAR 0 1
34523: NOT
34524: PUSH
34525: LD_VAR 0 2
34529: NOT
34530: OR
34531: IFFALSE 34535
// exit ;
34533: GO 34693
// x := GetX ( building ) ;
34535: LD_ADDR_VAR 0 5
34539: PUSH
34540: LD_VAR 0 2
34544: PPUSH
34545: CALL_OW 250
34549: ST_TO_ADDR
// y := GetY ( building ) ;
34550: LD_ADDR_VAR 0 6
34554: PUSH
34555: LD_VAR 0 2
34559: PPUSH
34560: CALL_OW 251
34564: ST_TO_ADDR
// for i = 0 to 5 do
34565: LD_ADDR_VAR 0 4
34569: PUSH
34570: DOUBLE
34571: LD_INT 0
34573: DEC
34574: ST_TO_ADDR
34575: LD_INT 5
34577: PUSH
34578: FOR_TO
34579: IFFALSE 34691
// begin _x := ShiftX ( x , i , 3 ) ;
34581: LD_ADDR_VAR 0 7
34585: PUSH
34586: LD_VAR 0 5
34590: PPUSH
34591: LD_VAR 0 4
34595: PPUSH
34596: LD_INT 3
34598: PPUSH
34599: CALL_OW 272
34603: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34604: LD_ADDR_VAR 0 8
34608: PUSH
34609: LD_VAR 0 6
34613: PPUSH
34614: LD_VAR 0 4
34618: PPUSH
34619: LD_INT 3
34621: PPUSH
34622: CALL_OW 273
34626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34627: LD_VAR 0 7
34631: PPUSH
34632: LD_VAR 0 8
34636: PPUSH
34637: CALL_OW 488
34641: NOT
34642: IFFALSE 34646
// continue ;
34644: GO 34578
// if HexInfo ( _x , _y ) = 0 then
34646: LD_VAR 0 7
34650: PPUSH
34651: LD_VAR 0 8
34655: PPUSH
34656: CALL_OW 428
34660: PUSH
34661: LD_INT 0
34663: EQUAL
34664: IFFALSE 34689
// begin ComMoveXY ( unit , _x , _y ) ;
34666: LD_VAR 0 1
34670: PPUSH
34671: LD_VAR 0 7
34675: PPUSH
34676: LD_VAR 0 8
34680: PPUSH
34681: CALL_OW 111
// exit ;
34685: POP
34686: POP
34687: GO 34693
// end ; end ;
34689: GO 34578
34691: POP
34692: POP
// end ;
34693: LD_VAR 0 3
34697: RET
// export function ScanBase ( side , base_area ) ; begin
34698: LD_INT 0
34700: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34701: LD_ADDR_VAR 0 3
34705: PUSH
34706: LD_VAR 0 2
34710: PPUSH
34711: LD_INT 81
34713: PUSH
34714: LD_VAR 0 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PPUSH
34723: CALL_OW 70
34727: ST_TO_ADDR
// end ;
34728: LD_VAR 0 3
34732: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34733: LD_INT 0
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
// result := false ;
34739: LD_ADDR_VAR 0 2
34743: PUSH
34744: LD_INT 0
34746: ST_TO_ADDR
// side := GetSide ( unit ) ;
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_VAR 0 1
34756: PPUSH
34757: CALL_OW 255
34761: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34762: LD_ADDR_VAR 0 4
34766: PUSH
34767: LD_VAR 0 1
34771: PPUSH
34772: CALL_OW 248
34776: ST_TO_ADDR
// case nat of 1 :
34777: LD_VAR 0 4
34781: PUSH
34782: LD_INT 1
34784: DOUBLE
34785: EQUAL
34786: IFTRUE 34790
34788: GO 34801
34790: POP
// tech := tech_lassight ; 2 :
34791: LD_ADDR_VAR 0 5
34795: PUSH
34796: LD_INT 12
34798: ST_TO_ADDR
34799: GO 34840
34801: LD_INT 2
34803: DOUBLE
34804: EQUAL
34805: IFTRUE 34809
34807: GO 34820
34809: POP
// tech := tech_mortar ; 3 :
34810: LD_ADDR_VAR 0 5
34814: PUSH
34815: LD_INT 41
34817: ST_TO_ADDR
34818: GO 34840
34820: LD_INT 3
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34828
34826: GO 34839
34828: POP
// tech := tech_bazooka ; end ;
34829: LD_ADDR_VAR 0 5
34833: PUSH
34834: LD_INT 44
34836: ST_TO_ADDR
34837: GO 34840
34839: POP
// if Researched ( side , tech ) then
34840: LD_VAR 0 3
34844: PPUSH
34845: LD_VAR 0 5
34849: PPUSH
34850: CALL_OW 325
34854: IFFALSE 34881
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34856: LD_ADDR_VAR 0 2
34860: PUSH
34861: LD_INT 5
34863: PUSH
34864: LD_INT 8
34866: PUSH
34867: LD_INT 9
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: PUSH
34875: LD_VAR 0 4
34879: ARRAY
34880: ST_TO_ADDR
// end ;
34881: LD_VAR 0 2
34885: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34886: LD_INT 0
34888: PPUSH
34889: PPUSH
34890: PPUSH
// if not mines then
34891: LD_VAR 0 2
34895: NOT
34896: IFFALSE 34900
// exit ;
34898: GO 35044
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34900: LD_ADDR_VAR 0 5
34904: PUSH
34905: LD_INT 81
34907: PUSH
34908: LD_VAR 0 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 21
34922: PUSH
34923: LD_INT 3
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PPUSH
34938: CALL_OW 69
34942: ST_TO_ADDR
// for i in mines do
34943: LD_ADDR_VAR 0 4
34947: PUSH
34948: LD_VAR 0 2
34952: PUSH
34953: FOR_IN
34954: IFFALSE 35042
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34956: LD_VAR 0 4
34960: PUSH
34961: LD_INT 1
34963: ARRAY
34964: PPUSH
34965: LD_VAR 0 4
34969: PUSH
34970: LD_INT 2
34972: ARRAY
34973: PPUSH
34974: CALL_OW 458
34978: NOT
34979: IFFALSE 34983
// continue ;
34981: GO 34953
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34983: LD_VAR 0 4
34987: PUSH
34988: LD_INT 1
34990: ARRAY
34991: PPUSH
34992: LD_VAR 0 4
34996: PUSH
34997: LD_INT 2
34999: ARRAY
35000: PPUSH
35001: CALL_OW 428
35005: PUSH
35006: LD_VAR 0 5
35010: IN
35011: IFFALSE 35040
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35013: LD_VAR 0 4
35017: PUSH
35018: LD_INT 1
35020: ARRAY
35021: PPUSH
35022: LD_VAR 0 4
35026: PUSH
35027: LD_INT 2
35029: ARRAY
35030: PPUSH
35031: LD_VAR 0 1
35035: PPUSH
35036: CALL_OW 456
// end ;
35040: GO 34953
35042: POP
35043: POP
// end ;
35044: LD_VAR 0 3
35048: RET
// export function Count ( array ) ; var i ; begin
35049: LD_INT 0
35051: PPUSH
35052: PPUSH
// result := 0 ;
35053: LD_ADDR_VAR 0 2
35057: PUSH
35058: LD_INT 0
35060: ST_TO_ADDR
// for i in array do
35061: LD_ADDR_VAR 0 3
35065: PUSH
35066: LD_VAR 0 1
35070: PUSH
35071: FOR_IN
35072: IFFALSE 35096
// if i then
35074: LD_VAR 0 3
35078: IFFALSE 35094
// result := result + 1 ;
35080: LD_ADDR_VAR 0 2
35084: PUSH
35085: LD_VAR 0 2
35089: PUSH
35090: LD_INT 1
35092: PLUS
35093: ST_TO_ADDR
35094: GO 35071
35096: POP
35097: POP
// end ;
35098: LD_VAR 0 2
35102: RET
// export function IsEmpty ( building ) ; begin
35103: LD_INT 0
35105: PPUSH
// if not building then
35106: LD_VAR 0 1
35110: NOT
35111: IFFALSE 35115
// exit ;
35113: GO 35158
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35115: LD_ADDR_VAR 0 2
35119: PUSH
35120: LD_VAR 0 1
35124: PUSH
35125: LD_INT 22
35127: PUSH
35128: LD_VAR 0 1
35132: PPUSH
35133: CALL_OW 255
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 58
35144: PUSH
35145: EMPTY
35146: LIST
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PPUSH
35152: CALL_OW 69
35156: IN
35157: ST_TO_ADDR
// end ;
35158: LD_VAR 0 2
35162: RET
// export function IsNotFull ( building ) ; begin
35163: LD_INT 0
35165: PPUSH
// if not building then
35166: LD_VAR 0 1
35170: NOT
35171: IFFALSE 35175
// exit ;
35173: GO 35194
// result := UnitsInside ( building ) < 6 ;
35175: LD_ADDR_VAR 0 2
35179: PUSH
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 313
35189: PUSH
35190: LD_INT 6
35192: LESS
35193: ST_TO_ADDR
// end ;
35194: LD_VAR 0 2
35198: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35199: LD_INT 0
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
// tmp := [ ] ;
35205: LD_ADDR_VAR 0 3
35209: PUSH
35210: EMPTY
35211: ST_TO_ADDR
// list := [ ] ;
35212: LD_ADDR_VAR 0 5
35216: PUSH
35217: EMPTY
35218: ST_TO_ADDR
// for i = 16 to 25 do
35219: LD_ADDR_VAR 0 4
35223: PUSH
35224: DOUBLE
35225: LD_INT 16
35227: DEC
35228: ST_TO_ADDR
35229: LD_INT 25
35231: PUSH
35232: FOR_TO
35233: IFFALSE 35306
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35235: LD_ADDR_VAR 0 3
35239: PUSH
35240: LD_VAR 0 3
35244: PUSH
35245: LD_INT 22
35247: PUSH
35248: LD_VAR 0 1
35252: PPUSH
35253: CALL_OW 255
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 91
35264: PUSH
35265: LD_VAR 0 1
35269: PUSH
35270: LD_INT 6
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 30
35280: PUSH
35281: LD_VAR 0 4
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: LIST
35294: PUSH
35295: EMPTY
35296: LIST
35297: PPUSH
35298: CALL_OW 69
35302: ADD
35303: ST_TO_ADDR
35304: GO 35232
35306: POP
35307: POP
// for i = 1 to tmp do
35308: LD_ADDR_VAR 0 4
35312: PUSH
35313: DOUBLE
35314: LD_INT 1
35316: DEC
35317: ST_TO_ADDR
35318: LD_VAR 0 3
35322: PUSH
35323: FOR_TO
35324: IFFALSE 35412
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35326: LD_ADDR_VAR 0 5
35330: PUSH
35331: LD_VAR 0 5
35335: PUSH
35336: LD_VAR 0 3
35340: PUSH
35341: LD_VAR 0 4
35345: ARRAY
35346: PPUSH
35347: CALL_OW 266
35351: PUSH
35352: LD_VAR 0 3
35356: PUSH
35357: LD_VAR 0 4
35361: ARRAY
35362: PPUSH
35363: CALL_OW 250
35367: PUSH
35368: LD_VAR 0 3
35372: PUSH
35373: LD_VAR 0 4
35377: ARRAY
35378: PPUSH
35379: CALL_OW 251
35383: PUSH
35384: LD_VAR 0 3
35388: PUSH
35389: LD_VAR 0 4
35393: ARRAY
35394: PPUSH
35395: CALL_OW 254
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: PUSH
35406: EMPTY
35407: LIST
35408: ADD
35409: ST_TO_ADDR
35410: GO 35323
35412: POP
35413: POP
// result := list ;
35414: LD_ADDR_VAR 0 2
35418: PUSH
35419: LD_VAR 0 5
35423: ST_TO_ADDR
// end ;
35424: LD_VAR 0 2
35428: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35429: LD_INT 0
35431: PPUSH
35432: PPUSH
35433: PPUSH
35434: PPUSH
35435: PPUSH
35436: PPUSH
35437: PPUSH
// if not factory then
35438: LD_VAR 0 1
35442: NOT
35443: IFFALSE 35447
// exit ;
35445: GO 36040
// if control = control_apeman then
35447: LD_VAR 0 4
35451: PUSH
35452: LD_INT 5
35454: EQUAL
35455: IFFALSE 35564
// begin tmp := UnitsInside ( factory ) ;
35457: LD_ADDR_VAR 0 8
35461: PUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 313
35471: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35472: LD_VAR 0 8
35476: PPUSH
35477: LD_INT 25
35479: PUSH
35480: LD_INT 12
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PPUSH
35487: CALL_OW 72
35491: NOT
35492: IFFALSE 35502
// control := control_manual ;
35494: LD_ADDR_VAR 0 4
35498: PUSH
35499: LD_INT 1
35501: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35502: LD_ADDR_VAR 0 8
35506: PUSH
35507: LD_VAR 0 1
35511: PPUSH
35512: CALL 35199 0 1
35516: ST_TO_ADDR
// if tmp then
35517: LD_VAR 0 8
35521: IFFALSE 35564
// begin for i in tmp do
35523: LD_ADDR_VAR 0 7
35527: PUSH
35528: LD_VAR 0 8
35532: PUSH
35533: FOR_IN
35534: IFFALSE 35562
// if i [ 1 ] = b_ext_radio then
35536: LD_VAR 0 7
35540: PUSH
35541: LD_INT 1
35543: ARRAY
35544: PUSH
35545: LD_INT 22
35547: EQUAL
35548: IFFALSE 35560
// begin control := control_remote ;
35550: LD_ADDR_VAR 0 4
35554: PUSH
35555: LD_INT 2
35557: ST_TO_ADDR
// break ;
35558: GO 35562
// end ;
35560: GO 35533
35562: POP
35563: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35564: LD_VAR 0 1
35568: PPUSH
35569: LD_VAR 0 2
35573: PPUSH
35574: LD_VAR 0 3
35578: PPUSH
35579: LD_VAR 0 4
35583: PPUSH
35584: LD_VAR 0 5
35588: PPUSH
35589: CALL_OW 448
35593: IFFALSE 35628
// begin result := [ chassis , engine , control , weapon ] ;
35595: LD_ADDR_VAR 0 6
35599: PUSH
35600: LD_VAR 0 2
35604: PUSH
35605: LD_VAR 0 3
35609: PUSH
35610: LD_VAR 0 4
35614: PUSH
35615: LD_VAR 0 5
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
// exit ;
35626: GO 36040
// end ; _chassis := AvailableChassisList ( factory ) ;
35628: LD_ADDR_VAR 0 9
35632: PUSH
35633: LD_VAR 0 1
35637: PPUSH
35638: CALL_OW 475
35642: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35643: LD_ADDR_VAR 0 11
35647: PUSH
35648: LD_VAR 0 1
35652: PPUSH
35653: CALL_OW 476
35657: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35658: LD_ADDR_VAR 0 12
35662: PUSH
35663: LD_VAR 0 1
35667: PPUSH
35668: CALL_OW 477
35672: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35673: LD_ADDR_VAR 0 10
35677: PUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: CALL_OW 478
35687: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35688: LD_VAR 0 9
35692: NOT
35693: PUSH
35694: LD_VAR 0 11
35698: NOT
35699: OR
35700: PUSH
35701: LD_VAR 0 12
35705: NOT
35706: OR
35707: PUSH
35708: LD_VAR 0 10
35712: NOT
35713: OR
35714: IFFALSE 35749
// begin result := [ chassis , engine , control , weapon ] ;
35716: LD_ADDR_VAR 0 6
35720: PUSH
35721: LD_VAR 0 2
35725: PUSH
35726: LD_VAR 0 3
35730: PUSH
35731: LD_VAR 0 4
35735: PUSH
35736: LD_VAR 0 5
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: ST_TO_ADDR
// exit ;
35747: GO 36040
// end ; if not chassis in _chassis then
35749: LD_VAR 0 2
35753: PUSH
35754: LD_VAR 0 9
35758: IN
35759: NOT
35760: IFFALSE 35786
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35762: LD_ADDR_VAR 0 2
35766: PUSH
35767: LD_VAR 0 9
35771: PUSH
35772: LD_INT 1
35774: PPUSH
35775: LD_VAR 0 9
35779: PPUSH
35780: CALL_OW 12
35784: ARRAY
35785: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35786: LD_VAR 0 2
35790: PPUSH
35791: LD_VAR 0 3
35795: PPUSH
35796: CALL 36045 0 2
35800: NOT
35801: IFFALSE 35860
// repeat engine := _engine [ 1 ] ;
35803: LD_ADDR_VAR 0 3
35807: PUSH
35808: LD_VAR 0 11
35812: PUSH
35813: LD_INT 1
35815: ARRAY
35816: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35817: LD_ADDR_VAR 0 11
35821: PUSH
35822: LD_VAR 0 11
35826: PPUSH
35827: LD_INT 1
35829: PPUSH
35830: CALL_OW 3
35834: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35835: LD_VAR 0 2
35839: PPUSH
35840: LD_VAR 0 3
35844: PPUSH
35845: CALL 36045 0 2
35849: PUSH
35850: LD_VAR 0 11
35854: PUSH
35855: EMPTY
35856: EQUAL
35857: OR
35858: IFFALSE 35803
// if not control in _control then
35860: LD_VAR 0 4
35864: PUSH
35865: LD_VAR 0 12
35869: IN
35870: NOT
35871: IFFALSE 35897
// control := _control [ rand ( 1 , _control ) ] ;
35873: LD_ADDR_VAR 0 4
35877: PUSH
35878: LD_VAR 0 12
35882: PUSH
35883: LD_INT 1
35885: PPUSH
35886: LD_VAR 0 12
35890: PPUSH
35891: CALL_OW 12
35895: ARRAY
35896: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35897: LD_VAR 0 2
35901: PPUSH
35902: LD_VAR 0 5
35906: PPUSH
35907: CALL 36265 0 2
35911: NOT
35912: IFFALSE 35971
// repeat weapon := _weapon [ 1 ] ;
35914: LD_ADDR_VAR 0 5
35918: PUSH
35919: LD_VAR 0 10
35923: PUSH
35924: LD_INT 1
35926: ARRAY
35927: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35928: LD_ADDR_VAR 0 10
35932: PUSH
35933: LD_VAR 0 10
35937: PPUSH
35938: LD_INT 1
35940: PPUSH
35941: CALL_OW 3
35945: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35946: LD_VAR 0 2
35950: PPUSH
35951: LD_VAR 0 5
35955: PPUSH
35956: CALL 36265 0 2
35960: PUSH
35961: LD_VAR 0 10
35965: PUSH
35966: EMPTY
35967: EQUAL
35968: OR
35969: IFFALSE 35914
// result := [ ] ;
35971: LD_ADDR_VAR 0 6
35975: PUSH
35976: EMPTY
35977: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35978: LD_VAR 0 1
35982: PPUSH
35983: LD_VAR 0 2
35987: PPUSH
35988: LD_VAR 0 3
35992: PPUSH
35993: LD_VAR 0 4
35997: PPUSH
35998: LD_VAR 0 5
36002: PPUSH
36003: CALL_OW 448
36007: IFFALSE 36040
// result := [ chassis , engine , control , weapon ] ;
36009: LD_ADDR_VAR 0 6
36013: PUSH
36014: LD_VAR 0 2
36018: PUSH
36019: LD_VAR 0 3
36023: PUSH
36024: LD_VAR 0 4
36028: PUSH
36029: LD_VAR 0 5
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: ST_TO_ADDR
// end ;
36040: LD_VAR 0 6
36044: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36045: LD_INT 0
36047: PPUSH
// if not chassis or not engine then
36048: LD_VAR 0 1
36052: NOT
36053: PUSH
36054: LD_VAR 0 2
36058: NOT
36059: OR
36060: IFFALSE 36064
// exit ;
36062: GO 36260
// case engine of engine_solar :
36064: LD_VAR 0 2
36068: PUSH
36069: LD_INT 2
36071: DOUBLE
36072: EQUAL
36073: IFTRUE 36077
36075: GO 36115
36077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36078: LD_ADDR_VAR 0 3
36082: PUSH
36083: LD_INT 11
36085: PUSH
36086: LD_INT 12
36088: PUSH
36089: LD_INT 13
36091: PUSH
36092: LD_INT 14
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: ST_TO_ADDR
36113: GO 36244
36115: LD_INT 1
36117: DOUBLE
36118: EQUAL
36119: IFTRUE 36123
36121: GO 36185
36123: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36124: LD_ADDR_VAR 0 3
36128: PUSH
36129: LD_INT 11
36131: PUSH
36132: LD_INT 12
36134: PUSH
36135: LD_INT 13
36137: PUSH
36138: LD_INT 14
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 3
36149: PUSH
36150: LD_INT 4
36152: PUSH
36153: LD_INT 5
36155: PUSH
36156: LD_INT 21
36158: PUSH
36159: LD_INT 23
36161: PUSH
36162: LD_INT 22
36164: PUSH
36165: LD_INT 24
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: ST_TO_ADDR
36183: GO 36244
36185: LD_INT 3
36187: DOUBLE
36188: EQUAL
36189: IFTRUE 36193
36191: GO 36243
36193: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36194: LD_ADDR_VAR 0 3
36198: PUSH
36199: LD_INT 13
36201: PUSH
36202: LD_INT 14
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: LD_INT 4
36213: PUSH
36214: LD_INT 5
36216: PUSH
36217: LD_INT 21
36219: PUSH
36220: LD_INT 22
36222: PUSH
36223: LD_INT 23
36225: PUSH
36226: LD_INT 24
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
36241: GO 36244
36243: POP
// result := ( chassis in result ) ;
36244: LD_ADDR_VAR 0 3
36248: PUSH
36249: LD_VAR 0 1
36253: PUSH
36254: LD_VAR 0 3
36258: IN
36259: ST_TO_ADDR
// end ;
36260: LD_VAR 0 3
36264: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36265: LD_INT 0
36267: PPUSH
// if not chassis or not weapon then
36268: LD_VAR 0 1
36272: NOT
36273: PUSH
36274: LD_VAR 0 2
36278: NOT
36279: OR
36280: IFFALSE 36284
// exit ;
36282: GO 37346
// case weapon of us_machine_gun :
36284: LD_VAR 0 2
36288: PUSH
36289: LD_INT 2
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36297
36295: GO 36327
36297: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36298: LD_ADDR_VAR 0 3
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: LD_INT 2
36308: PUSH
36309: LD_INT 3
36311: PUSH
36312: LD_INT 4
36314: PUSH
36315: LD_INT 5
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: ST_TO_ADDR
36325: GO 37330
36327: LD_INT 3
36329: DOUBLE
36330: EQUAL
36331: IFTRUE 36335
36333: GO 36365
36335: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36336: LD_ADDR_VAR 0 3
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: LD_INT 3
36349: PUSH
36350: LD_INT 4
36352: PUSH
36353: LD_INT 5
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: ST_TO_ADDR
36363: GO 37330
36365: LD_INT 11
36367: DOUBLE
36368: EQUAL
36369: IFTRUE 36373
36371: GO 36403
36373: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36374: LD_ADDR_VAR 0 3
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 3
36387: PUSH
36388: LD_INT 4
36390: PUSH
36391: LD_INT 5
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: ST_TO_ADDR
36401: GO 37330
36403: LD_INT 4
36405: DOUBLE
36406: EQUAL
36407: IFTRUE 36411
36409: GO 36437
36411: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36412: LD_ADDR_VAR 0 3
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: LD_INT 3
36422: PUSH
36423: LD_INT 4
36425: PUSH
36426: LD_INT 5
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: ST_TO_ADDR
36435: GO 37330
36437: LD_INT 5
36439: DOUBLE
36440: EQUAL
36441: IFTRUE 36445
36443: GO 36471
36445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36446: LD_ADDR_VAR 0 3
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 3
36456: PUSH
36457: LD_INT 4
36459: PUSH
36460: LD_INT 5
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: ST_TO_ADDR
36469: GO 37330
36471: LD_INT 9
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36479
36477: GO 36505
36479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: LD_INT 4
36493: PUSH
36494: LD_INT 5
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: ST_TO_ADDR
36503: GO 37330
36505: LD_INT 7
36507: DOUBLE
36508: EQUAL
36509: IFTRUE 36513
36511: GO 36539
36513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36514: LD_ADDR_VAR 0 3
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: LD_INT 4
36527: PUSH
36528: LD_INT 5
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: ST_TO_ADDR
36537: GO 37330
36539: LD_INT 12
36541: DOUBLE
36542: EQUAL
36543: IFTRUE 36547
36545: GO 36573
36547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36548: LD_ADDR_VAR 0 3
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: LD_INT 4
36561: PUSH
36562: LD_INT 5
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
36571: GO 37330
36573: LD_INT 13
36575: DOUBLE
36576: EQUAL
36577: IFTRUE 36581
36579: GO 36607
36581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36582: LD_ADDR_VAR 0 3
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: LD_INT 3
36592: PUSH
36593: LD_INT 4
36595: PUSH
36596: LD_INT 5
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
36605: GO 37330
36607: LD_INT 14
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36615
36613: GO 36633
36615: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36616: LD_ADDR_VAR 0 3
36620: PUSH
36621: LD_INT 4
36623: PUSH
36624: LD_INT 5
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: ST_TO_ADDR
36631: GO 37330
36633: LD_INT 6
36635: DOUBLE
36636: EQUAL
36637: IFTRUE 36641
36639: GO 36659
36641: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36642: LD_ADDR_VAR 0 3
36646: PUSH
36647: LD_INT 4
36649: PUSH
36650: LD_INT 5
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: ST_TO_ADDR
36657: GO 37330
36659: LD_INT 10
36661: DOUBLE
36662: EQUAL
36663: IFTRUE 36667
36665: GO 36685
36667: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_INT 4
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: ST_TO_ADDR
36683: GO 37330
36685: LD_INT 22
36687: DOUBLE
36688: EQUAL
36689: IFTRUE 36693
36691: GO 36719
36693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36694: LD_ADDR_VAR 0 3
36698: PUSH
36699: LD_INT 11
36701: PUSH
36702: LD_INT 12
36704: PUSH
36705: LD_INT 13
36707: PUSH
36708: LD_INT 14
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
36717: GO 37330
36719: LD_INT 23
36721: DOUBLE
36722: EQUAL
36723: IFTRUE 36727
36725: GO 36753
36727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36728: LD_ADDR_VAR 0 3
36732: PUSH
36733: LD_INT 11
36735: PUSH
36736: LD_INT 12
36738: PUSH
36739: LD_INT 13
36741: PUSH
36742: LD_INT 14
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: ST_TO_ADDR
36751: GO 37330
36753: LD_INT 24
36755: DOUBLE
36756: EQUAL
36757: IFTRUE 36761
36759: GO 36787
36761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36762: LD_ADDR_VAR 0 3
36766: PUSH
36767: LD_INT 11
36769: PUSH
36770: LD_INT 12
36772: PUSH
36773: LD_INT 13
36775: PUSH
36776: LD_INT 14
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: ST_TO_ADDR
36785: GO 37330
36787: LD_INT 30
36789: DOUBLE
36790: EQUAL
36791: IFTRUE 36795
36793: GO 36821
36795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36796: LD_ADDR_VAR 0 3
36800: PUSH
36801: LD_INT 11
36803: PUSH
36804: LD_INT 12
36806: PUSH
36807: LD_INT 13
36809: PUSH
36810: LD_INT 14
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: ST_TO_ADDR
36819: GO 37330
36821: LD_INT 25
36823: DOUBLE
36824: EQUAL
36825: IFTRUE 36829
36827: GO 36847
36829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36830: LD_ADDR_VAR 0 3
36834: PUSH
36835: LD_INT 13
36837: PUSH
36838: LD_INT 14
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: ST_TO_ADDR
36845: GO 37330
36847: LD_INT 27
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36855
36853: GO 36873
36855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36856: LD_ADDR_VAR 0 3
36860: PUSH
36861: LD_INT 13
36863: PUSH
36864: LD_INT 14
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: ST_TO_ADDR
36871: GO 37330
36873: LD_EXP 43
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36883
36881: GO 36909
36883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36884: LD_ADDR_VAR 0 3
36888: PUSH
36889: LD_INT 11
36891: PUSH
36892: LD_INT 12
36894: PUSH
36895: LD_INT 13
36897: PUSH
36898: LD_INT 14
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: ST_TO_ADDR
36907: GO 37330
36909: LD_INT 28
36911: DOUBLE
36912: EQUAL
36913: IFTRUE 36917
36915: GO 36935
36917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36918: LD_ADDR_VAR 0 3
36922: PUSH
36923: LD_INT 13
36925: PUSH
36926: LD_INT 14
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: ST_TO_ADDR
36933: GO 37330
36935: LD_INT 29
36937: DOUBLE
36938: EQUAL
36939: IFTRUE 36943
36941: GO 36961
36943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36944: LD_ADDR_VAR 0 3
36948: PUSH
36949: LD_INT 13
36951: PUSH
36952: LD_INT 14
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: ST_TO_ADDR
36959: GO 37330
36961: LD_INT 31
36963: DOUBLE
36964: EQUAL
36965: IFTRUE 36969
36967: GO 36987
36969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36970: LD_ADDR_VAR 0 3
36974: PUSH
36975: LD_INT 13
36977: PUSH
36978: LD_INT 14
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: ST_TO_ADDR
36985: GO 37330
36987: LD_INT 26
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 36995
36993: GO 37013
36995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36996: LD_ADDR_VAR 0 3
37000: PUSH
37001: LD_INT 13
37003: PUSH
37004: LD_INT 14
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: ST_TO_ADDR
37011: GO 37330
37013: LD_INT 42
37015: DOUBLE
37016: EQUAL
37017: IFTRUE 37021
37019: GO 37047
37021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37022: LD_ADDR_VAR 0 3
37026: PUSH
37027: LD_INT 21
37029: PUSH
37030: LD_INT 22
37032: PUSH
37033: LD_INT 23
37035: PUSH
37036: LD_INT 24
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: ST_TO_ADDR
37045: GO 37330
37047: LD_INT 43
37049: DOUBLE
37050: EQUAL
37051: IFTRUE 37055
37053: GO 37081
37055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37056: LD_ADDR_VAR 0 3
37060: PUSH
37061: LD_INT 21
37063: PUSH
37064: LD_INT 22
37066: PUSH
37067: LD_INT 23
37069: PUSH
37070: LD_INT 24
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
37079: GO 37330
37081: LD_INT 44
37083: DOUBLE
37084: EQUAL
37085: IFTRUE 37089
37087: GO 37115
37089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37090: LD_ADDR_VAR 0 3
37094: PUSH
37095: LD_INT 21
37097: PUSH
37098: LD_INT 22
37100: PUSH
37101: LD_INT 23
37103: PUSH
37104: LD_INT 24
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: ST_TO_ADDR
37113: GO 37330
37115: LD_INT 45
37117: DOUBLE
37118: EQUAL
37119: IFTRUE 37123
37121: GO 37149
37123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37124: LD_ADDR_VAR 0 3
37128: PUSH
37129: LD_INT 21
37131: PUSH
37132: LD_INT 22
37134: PUSH
37135: LD_INT 23
37137: PUSH
37138: LD_INT 24
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
37147: GO 37330
37149: LD_INT 49
37151: DOUBLE
37152: EQUAL
37153: IFTRUE 37157
37155: GO 37183
37157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: LD_INT 21
37165: PUSH
37166: LD_INT 22
37168: PUSH
37169: LD_INT 23
37171: PUSH
37172: LD_INT 24
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: ST_TO_ADDR
37181: GO 37330
37183: LD_INT 51
37185: DOUBLE
37186: EQUAL
37187: IFTRUE 37191
37189: GO 37217
37191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37192: LD_ADDR_VAR 0 3
37196: PUSH
37197: LD_INT 21
37199: PUSH
37200: LD_INT 22
37202: PUSH
37203: LD_INT 23
37205: PUSH
37206: LD_INT 24
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: ST_TO_ADDR
37215: GO 37330
37217: LD_INT 52
37219: DOUBLE
37220: EQUAL
37221: IFTRUE 37225
37223: GO 37251
37225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37226: LD_ADDR_VAR 0 3
37230: PUSH
37231: LD_INT 21
37233: PUSH
37234: LD_INT 22
37236: PUSH
37237: LD_INT 23
37239: PUSH
37240: LD_INT 24
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
37249: GO 37330
37251: LD_INT 53
37253: DOUBLE
37254: EQUAL
37255: IFTRUE 37259
37257: GO 37277
37259: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37260: LD_ADDR_VAR 0 3
37264: PUSH
37265: LD_INT 23
37267: PUSH
37268: LD_INT 24
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: ST_TO_ADDR
37275: GO 37330
37277: LD_INT 46
37279: DOUBLE
37280: EQUAL
37281: IFTRUE 37285
37283: GO 37303
37285: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37286: LD_ADDR_VAR 0 3
37290: PUSH
37291: LD_INT 23
37293: PUSH
37294: LD_INT 24
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: ST_TO_ADDR
37301: GO 37330
37303: LD_INT 47
37305: DOUBLE
37306: EQUAL
37307: IFTRUE 37311
37309: GO 37329
37311: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_INT 23
37319: PUSH
37320: LD_INT 24
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: ST_TO_ADDR
37327: GO 37330
37329: POP
// result := ( chassis in result ) ;
37330: LD_ADDR_VAR 0 3
37334: PUSH
37335: LD_VAR 0 1
37339: PUSH
37340: LD_VAR 0 3
37344: IN
37345: ST_TO_ADDR
// end ;
37346: LD_VAR 0 3
37350: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37351: LD_INT 0
37353: PPUSH
37354: PPUSH
37355: PPUSH
37356: PPUSH
37357: PPUSH
37358: PPUSH
37359: PPUSH
// result := array ;
37360: LD_ADDR_VAR 0 5
37364: PUSH
37365: LD_VAR 0 1
37369: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37370: LD_VAR 0 1
37374: NOT
37375: PUSH
37376: LD_VAR 0 2
37380: NOT
37381: OR
37382: PUSH
37383: LD_VAR 0 3
37387: NOT
37388: OR
37389: PUSH
37390: LD_VAR 0 2
37394: PUSH
37395: LD_VAR 0 1
37399: GREATER
37400: OR
37401: PUSH
37402: LD_VAR 0 3
37406: PUSH
37407: LD_VAR 0 1
37411: GREATER
37412: OR
37413: IFFALSE 37417
// exit ;
37415: GO 37713
// if direction then
37417: LD_VAR 0 4
37421: IFFALSE 37485
// begin d := 1 ;
37423: LD_ADDR_VAR 0 9
37427: PUSH
37428: LD_INT 1
37430: ST_TO_ADDR
// if i_from > i_to then
37431: LD_VAR 0 2
37435: PUSH
37436: LD_VAR 0 3
37440: GREATER
37441: IFFALSE 37467
// length := ( array - i_from ) + i_to else
37443: LD_ADDR_VAR 0 11
37447: PUSH
37448: LD_VAR 0 1
37452: PUSH
37453: LD_VAR 0 2
37457: MINUS
37458: PUSH
37459: LD_VAR 0 3
37463: PLUS
37464: ST_TO_ADDR
37465: GO 37483
// length := i_to - i_from ;
37467: LD_ADDR_VAR 0 11
37471: PUSH
37472: LD_VAR 0 3
37476: PUSH
37477: LD_VAR 0 2
37481: MINUS
37482: ST_TO_ADDR
// end else
37483: GO 37546
// begin d := - 1 ;
37485: LD_ADDR_VAR 0 9
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: ST_TO_ADDR
// if i_from > i_to then
37494: LD_VAR 0 2
37498: PUSH
37499: LD_VAR 0 3
37503: GREATER
37504: IFFALSE 37524
// length := i_from - i_to else
37506: LD_ADDR_VAR 0 11
37510: PUSH
37511: LD_VAR 0 2
37515: PUSH
37516: LD_VAR 0 3
37520: MINUS
37521: ST_TO_ADDR
37522: GO 37546
// length := ( array - i_to ) + i_from ;
37524: LD_ADDR_VAR 0 11
37528: PUSH
37529: LD_VAR 0 1
37533: PUSH
37534: LD_VAR 0 3
37538: MINUS
37539: PUSH
37540: LD_VAR 0 2
37544: PLUS
37545: ST_TO_ADDR
// end ; if not length then
37546: LD_VAR 0 11
37550: NOT
37551: IFFALSE 37555
// exit ;
37553: GO 37713
// tmp := array ;
37555: LD_ADDR_VAR 0 10
37559: PUSH
37560: LD_VAR 0 1
37564: ST_TO_ADDR
// for i = 1 to length do
37565: LD_ADDR_VAR 0 6
37569: PUSH
37570: DOUBLE
37571: LD_INT 1
37573: DEC
37574: ST_TO_ADDR
37575: LD_VAR 0 11
37579: PUSH
37580: FOR_TO
37581: IFFALSE 37701
// begin for j = 1 to array do
37583: LD_ADDR_VAR 0 7
37587: PUSH
37588: DOUBLE
37589: LD_INT 1
37591: DEC
37592: ST_TO_ADDR
37593: LD_VAR 0 1
37597: PUSH
37598: FOR_TO
37599: IFFALSE 37687
// begin k := j + d ;
37601: LD_ADDR_VAR 0 8
37605: PUSH
37606: LD_VAR 0 7
37610: PUSH
37611: LD_VAR 0 9
37615: PLUS
37616: ST_TO_ADDR
// if k > array then
37617: LD_VAR 0 8
37621: PUSH
37622: LD_VAR 0 1
37626: GREATER
37627: IFFALSE 37637
// k := 1 ;
37629: LD_ADDR_VAR 0 8
37633: PUSH
37634: LD_INT 1
37636: ST_TO_ADDR
// if not k then
37637: LD_VAR 0 8
37641: NOT
37642: IFFALSE 37654
// k := array ;
37644: LD_ADDR_VAR 0 8
37648: PUSH
37649: LD_VAR 0 1
37653: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37654: LD_ADDR_VAR 0 10
37658: PUSH
37659: LD_VAR 0 10
37663: PPUSH
37664: LD_VAR 0 8
37668: PPUSH
37669: LD_VAR 0 1
37673: PUSH
37674: LD_VAR 0 7
37678: ARRAY
37679: PPUSH
37680: CALL_OW 1
37684: ST_TO_ADDR
// end ;
37685: GO 37598
37687: POP
37688: POP
// array := tmp ;
37689: LD_ADDR_VAR 0 1
37693: PUSH
37694: LD_VAR 0 10
37698: ST_TO_ADDR
// end ;
37699: GO 37580
37701: POP
37702: POP
// result := array ;
37703: LD_ADDR_VAR 0 5
37707: PUSH
37708: LD_VAR 0 1
37712: ST_TO_ADDR
// end ;
37713: LD_VAR 0 5
37717: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37718: LD_INT 0
37720: PPUSH
37721: PPUSH
// result := 0 ;
37722: LD_ADDR_VAR 0 3
37726: PUSH
37727: LD_INT 0
37729: ST_TO_ADDR
// if not array or not value in array then
37730: LD_VAR 0 1
37734: NOT
37735: PUSH
37736: LD_VAR 0 2
37740: PUSH
37741: LD_VAR 0 1
37745: IN
37746: NOT
37747: OR
37748: IFFALSE 37752
// exit ;
37750: GO 37806
// for i = 1 to array do
37752: LD_ADDR_VAR 0 4
37756: PUSH
37757: DOUBLE
37758: LD_INT 1
37760: DEC
37761: ST_TO_ADDR
37762: LD_VAR 0 1
37766: PUSH
37767: FOR_TO
37768: IFFALSE 37804
// if value = array [ i ] then
37770: LD_VAR 0 2
37774: PUSH
37775: LD_VAR 0 1
37779: PUSH
37780: LD_VAR 0 4
37784: ARRAY
37785: EQUAL
37786: IFFALSE 37802
// begin result := i ;
37788: LD_ADDR_VAR 0 3
37792: PUSH
37793: LD_VAR 0 4
37797: ST_TO_ADDR
// exit ;
37798: POP
37799: POP
37800: GO 37806
// end ;
37802: GO 37767
37804: POP
37805: POP
// end ;
37806: LD_VAR 0 3
37810: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37811: LD_INT 0
37813: PPUSH
// vc_chassis := chassis ;
37814: LD_ADDR_OWVAR 37
37818: PUSH
37819: LD_VAR 0 1
37823: ST_TO_ADDR
// vc_engine := engine ;
37824: LD_ADDR_OWVAR 39
37828: PUSH
37829: LD_VAR 0 2
37833: ST_TO_ADDR
// vc_control := control ;
37834: LD_ADDR_OWVAR 38
37838: PUSH
37839: LD_VAR 0 3
37843: ST_TO_ADDR
// vc_weapon := weapon ;
37844: LD_ADDR_OWVAR 40
37848: PUSH
37849: LD_VAR 0 4
37853: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37854: LD_ADDR_OWVAR 41
37858: PUSH
37859: LD_VAR 0 5
37863: ST_TO_ADDR
// end ;
37864: LD_VAR 0 6
37868: RET
// export function WantPlant ( unit ) ; var task ; begin
37869: LD_INT 0
37871: PPUSH
37872: PPUSH
// result := false ;
37873: LD_ADDR_VAR 0 2
37877: PUSH
37878: LD_INT 0
37880: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37881: LD_ADDR_VAR 0 3
37885: PUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: CALL_OW 437
37895: ST_TO_ADDR
// if task then
37896: LD_VAR 0 3
37900: IFFALSE 37928
// if task [ 1 ] [ 1 ] = p then
37902: LD_VAR 0 3
37906: PUSH
37907: LD_INT 1
37909: ARRAY
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PUSH
37915: LD_STRING p
37917: EQUAL
37918: IFFALSE 37928
// result := true ;
37920: LD_ADDR_VAR 0 2
37924: PUSH
37925: LD_INT 1
37927: ST_TO_ADDR
// end ;
37928: LD_VAR 0 2
37932: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37933: LD_INT 0
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
// if pos < 1 then
37939: LD_VAR 0 2
37943: PUSH
37944: LD_INT 1
37946: LESS
37947: IFFALSE 37951
// exit ;
37949: GO 38254
// if pos = 1 then
37951: LD_VAR 0 2
37955: PUSH
37956: LD_INT 1
37958: EQUAL
37959: IFFALSE 37992
// result := Replace ( arr , pos [ 1 ] , value ) else
37961: LD_ADDR_VAR 0 4
37965: PUSH
37966: LD_VAR 0 1
37970: PPUSH
37971: LD_VAR 0 2
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PPUSH
37980: LD_VAR 0 3
37984: PPUSH
37985: CALL_OW 1
37989: ST_TO_ADDR
37990: GO 38254
// begin tmp := arr ;
37992: LD_ADDR_VAR 0 6
37996: PUSH
37997: LD_VAR 0 1
38001: ST_TO_ADDR
// s_arr := [ tmp ] ;
38002: LD_ADDR_VAR 0 7
38006: PUSH
38007: LD_VAR 0 6
38011: PUSH
38012: EMPTY
38013: LIST
38014: ST_TO_ADDR
// for i = 1 to pos - 1 do
38015: LD_ADDR_VAR 0 5
38019: PUSH
38020: DOUBLE
38021: LD_INT 1
38023: DEC
38024: ST_TO_ADDR
38025: LD_VAR 0 2
38029: PUSH
38030: LD_INT 1
38032: MINUS
38033: PUSH
38034: FOR_TO
38035: IFFALSE 38080
// begin tmp := tmp [ pos [ i ] ] ;
38037: LD_ADDR_VAR 0 6
38041: PUSH
38042: LD_VAR 0 6
38046: PUSH
38047: LD_VAR 0 2
38051: PUSH
38052: LD_VAR 0 5
38056: ARRAY
38057: ARRAY
38058: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38059: LD_ADDR_VAR 0 7
38063: PUSH
38064: LD_VAR 0 7
38068: PUSH
38069: LD_VAR 0 6
38073: PUSH
38074: EMPTY
38075: LIST
38076: ADD
38077: ST_TO_ADDR
// end ;
38078: GO 38034
38080: POP
38081: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38082: LD_ADDR_VAR 0 6
38086: PUSH
38087: LD_VAR 0 6
38091: PPUSH
38092: LD_VAR 0 2
38096: PUSH
38097: LD_VAR 0 2
38101: ARRAY
38102: PPUSH
38103: LD_VAR 0 3
38107: PPUSH
38108: CALL_OW 1
38112: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38113: LD_ADDR_VAR 0 7
38117: PUSH
38118: LD_VAR 0 7
38122: PPUSH
38123: LD_VAR 0 7
38127: PPUSH
38128: LD_VAR 0 6
38132: PPUSH
38133: CALL_OW 1
38137: ST_TO_ADDR
// for i = s_arr downto 2 do
38138: LD_ADDR_VAR 0 5
38142: PUSH
38143: DOUBLE
38144: LD_VAR 0 7
38148: INC
38149: ST_TO_ADDR
38150: LD_INT 2
38152: PUSH
38153: FOR_DOWNTO
38154: IFFALSE 38238
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38156: LD_ADDR_VAR 0 6
38160: PUSH
38161: LD_VAR 0 7
38165: PUSH
38166: LD_VAR 0 5
38170: PUSH
38171: LD_INT 1
38173: MINUS
38174: ARRAY
38175: PPUSH
38176: LD_VAR 0 2
38180: PUSH
38181: LD_VAR 0 5
38185: PUSH
38186: LD_INT 1
38188: MINUS
38189: ARRAY
38190: PPUSH
38191: LD_VAR 0 7
38195: PUSH
38196: LD_VAR 0 5
38200: ARRAY
38201: PPUSH
38202: CALL_OW 1
38206: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38207: LD_ADDR_VAR 0 7
38211: PUSH
38212: LD_VAR 0 7
38216: PPUSH
38217: LD_VAR 0 5
38221: PUSH
38222: LD_INT 1
38224: MINUS
38225: PPUSH
38226: LD_VAR 0 6
38230: PPUSH
38231: CALL_OW 1
38235: ST_TO_ADDR
// end ;
38236: GO 38153
38238: POP
38239: POP
// result := s_arr [ 1 ] ;
38240: LD_ADDR_VAR 0 4
38244: PUSH
38245: LD_VAR 0 7
38249: PUSH
38250: LD_INT 1
38252: ARRAY
38253: ST_TO_ADDR
// end ; end ;
38254: LD_VAR 0 4
38258: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38259: LD_INT 0
38261: PPUSH
38262: PPUSH
// if not list then
38263: LD_VAR 0 1
38267: NOT
38268: IFFALSE 38272
// exit ;
38270: GO 38363
// i := list [ pos1 ] ;
38272: LD_ADDR_VAR 0 5
38276: PUSH
38277: LD_VAR 0 1
38281: PUSH
38282: LD_VAR 0 2
38286: ARRAY
38287: ST_TO_ADDR
// if not i then
38288: LD_VAR 0 5
38292: NOT
38293: IFFALSE 38297
// exit ;
38295: GO 38363
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38297: LD_ADDR_VAR 0 1
38301: PUSH
38302: LD_VAR 0 1
38306: PPUSH
38307: LD_VAR 0 2
38311: PPUSH
38312: LD_VAR 0 1
38316: PUSH
38317: LD_VAR 0 3
38321: ARRAY
38322: PPUSH
38323: CALL_OW 1
38327: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38328: LD_ADDR_VAR 0 1
38332: PUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: LD_VAR 0 3
38342: PPUSH
38343: LD_VAR 0 5
38347: PPUSH
38348: CALL_OW 1
38352: ST_TO_ADDR
// result := list ;
38353: LD_ADDR_VAR 0 4
38357: PUSH
38358: LD_VAR 0 1
38362: ST_TO_ADDR
// end ;
38363: LD_VAR 0 4
38367: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38368: LD_INT 0
38370: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38371: LD_ADDR_VAR 0 5
38375: PUSH
38376: LD_VAR 0 1
38380: PPUSH
38381: CALL_OW 250
38385: PPUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 251
38395: PPUSH
38396: LD_VAR 0 2
38400: PPUSH
38401: LD_VAR 0 3
38405: PPUSH
38406: LD_VAR 0 4
38410: PPUSH
38411: CALL 38421 0 5
38415: ST_TO_ADDR
// end ;
38416: LD_VAR 0 5
38420: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38421: LD_INT 0
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
// if not list then
38427: LD_VAR 0 3
38431: NOT
38432: IFFALSE 38436
// exit ;
38434: GO 38824
// result := [ ] ;
38436: LD_ADDR_VAR 0 6
38440: PUSH
38441: EMPTY
38442: ST_TO_ADDR
// for i in list do
38443: LD_ADDR_VAR 0 7
38447: PUSH
38448: LD_VAR 0 3
38452: PUSH
38453: FOR_IN
38454: IFFALSE 38656
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38456: LD_ADDR_VAR 0 9
38460: PUSH
38461: LD_VAR 0 7
38465: PPUSH
38466: LD_VAR 0 1
38470: PPUSH
38471: LD_VAR 0 2
38475: PPUSH
38476: CALL_OW 297
38480: ST_TO_ADDR
// if not result then
38481: LD_VAR 0 6
38485: NOT
38486: IFFALSE 38512
// result := [ [ i , tmp ] ] else
38488: LD_ADDR_VAR 0 6
38492: PUSH
38493: LD_VAR 0 7
38497: PUSH
38498: LD_VAR 0 9
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: EMPTY
38508: LIST
38509: ST_TO_ADDR
38510: GO 38654
// begin if result [ result ] [ 2 ] < tmp then
38512: LD_VAR 0 6
38516: PUSH
38517: LD_VAR 0 6
38521: ARRAY
38522: PUSH
38523: LD_INT 2
38525: ARRAY
38526: PUSH
38527: LD_VAR 0 9
38531: LESS
38532: IFFALSE 38574
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38534: LD_ADDR_VAR 0 6
38538: PUSH
38539: LD_VAR 0 6
38543: PPUSH
38544: LD_VAR 0 6
38548: PUSH
38549: LD_INT 1
38551: PLUS
38552: PPUSH
38553: LD_VAR 0 7
38557: PUSH
38558: LD_VAR 0 9
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PPUSH
38567: CALL_OW 2
38571: ST_TO_ADDR
38572: GO 38654
// for j = 1 to result do
38574: LD_ADDR_VAR 0 8
38578: PUSH
38579: DOUBLE
38580: LD_INT 1
38582: DEC
38583: ST_TO_ADDR
38584: LD_VAR 0 6
38588: PUSH
38589: FOR_TO
38590: IFFALSE 38652
// begin if tmp < result [ j ] [ 2 ] then
38592: LD_VAR 0 9
38596: PUSH
38597: LD_VAR 0 6
38601: PUSH
38602: LD_VAR 0 8
38606: ARRAY
38607: PUSH
38608: LD_INT 2
38610: ARRAY
38611: LESS
38612: IFFALSE 38650
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38614: LD_ADDR_VAR 0 6
38618: PUSH
38619: LD_VAR 0 6
38623: PPUSH
38624: LD_VAR 0 8
38628: PPUSH
38629: LD_VAR 0 7
38633: PUSH
38634: LD_VAR 0 9
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: CALL_OW 2
38647: ST_TO_ADDR
// break ;
38648: GO 38652
// end ; end ;
38650: GO 38589
38652: POP
38653: POP
// end ; end ;
38654: GO 38453
38656: POP
38657: POP
// if result and not asc then
38658: LD_VAR 0 6
38662: PUSH
38663: LD_VAR 0 4
38667: NOT
38668: AND
38669: IFFALSE 38744
// begin tmp := result ;
38671: LD_ADDR_VAR 0 9
38675: PUSH
38676: LD_VAR 0 6
38680: ST_TO_ADDR
// for i = tmp downto 1 do
38681: LD_ADDR_VAR 0 7
38685: PUSH
38686: DOUBLE
38687: LD_VAR 0 9
38691: INC
38692: ST_TO_ADDR
38693: LD_INT 1
38695: PUSH
38696: FOR_DOWNTO
38697: IFFALSE 38742
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38699: LD_ADDR_VAR 0 6
38703: PUSH
38704: LD_VAR 0 6
38708: PPUSH
38709: LD_VAR 0 9
38713: PUSH
38714: LD_VAR 0 7
38718: MINUS
38719: PUSH
38720: LD_INT 1
38722: PLUS
38723: PPUSH
38724: LD_VAR 0 9
38728: PUSH
38729: LD_VAR 0 7
38733: ARRAY
38734: PPUSH
38735: CALL_OW 1
38739: ST_TO_ADDR
38740: GO 38696
38742: POP
38743: POP
// end ; tmp := [ ] ;
38744: LD_ADDR_VAR 0 9
38748: PUSH
38749: EMPTY
38750: ST_TO_ADDR
// if mode then
38751: LD_VAR 0 5
38755: IFFALSE 38824
// begin for i = 1 to result do
38757: LD_ADDR_VAR 0 7
38761: PUSH
38762: DOUBLE
38763: LD_INT 1
38765: DEC
38766: ST_TO_ADDR
38767: LD_VAR 0 6
38771: PUSH
38772: FOR_TO
38773: IFFALSE 38812
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38775: LD_ADDR_VAR 0 9
38779: PUSH
38780: LD_VAR 0 9
38784: PPUSH
38785: LD_VAR 0 7
38789: PPUSH
38790: LD_VAR 0 6
38794: PUSH
38795: LD_VAR 0 7
38799: ARRAY
38800: PUSH
38801: LD_INT 1
38803: ARRAY
38804: PPUSH
38805: CALL_OW 1
38809: ST_TO_ADDR
38810: GO 38772
38812: POP
38813: POP
// result := tmp ;
38814: LD_ADDR_VAR 0 6
38818: PUSH
38819: LD_VAR 0 9
38823: ST_TO_ADDR
// end ; end ;
38824: LD_VAR 0 6
38828: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38829: LD_INT 0
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38837: LD_ADDR_VAR 0 5
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: EMPTY
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: ST_TO_ADDR
// if not x or not y then
38859: LD_VAR 0 2
38863: NOT
38864: PUSH
38865: LD_VAR 0 3
38869: NOT
38870: OR
38871: IFFALSE 38875
// exit ;
38873: GO 40527
// if not range then
38875: LD_VAR 0 4
38879: NOT
38880: IFFALSE 38890
// range := 10 ;
38882: LD_ADDR_VAR 0 4
38886: PUSH
38887: LD_INT 10
38889: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38890: LD_ADDR_VAR 0 8
38894: PUSH
38895: LD_INT 81
38897: PUSH
38898: LD_VAR 0 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 92
38909: PUSH
38910: LD_VAR 0 2
38914: PUSH
38915: LD_VAR 0 3
38919: PUSH
38920: LD_VAR 0 4
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: LD_INT 21
38936: PUSH
38937: LD_INT 3
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: PPUSH
38953: CALL_OW 69
38957: ST_TO_ADDR
// if not tmp then
38958: LD_VAR 0 8
38962: NOT
38963: IFFALSE 38967
// exit ;
38965: GO 40527
// for i in tmp do
38967: LD_ADDR_VAR 0 6
38971: PUSH
38972: LD_VAR 0 8
38976: PUSH
38977: FOR_IN
38978: IFFALSE 40502
// begin points := [ 0 , 0 , 0 ] ;
38980: LD_ADDR_VAR 0 9
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: ST_TO_ADDR
// bpoints := 1 ;
38999: LD_ADDR_VAR 0 10
39003: PUSH
39004: LD_INT 1
39006: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39007: LD_VAR 0 6
39011: PPUSH
39012: CALL_OW 247
39016: PUSH
39017: LD_INT 1
39019: DOUBLE
39020: EQUAL
39021: IFTRUE 39025
39023: GO 39603
39025: POP
// begin if GetClass ( i ) = 1 then
39026: LD_VAR 0 6
39030: PPUSH
39031: CALL_OW 257
39035: PUSH
39036: LD_INT 1
39038: EQUAL
39039: IFFALSE 39060
// points := [ 10 , 5 , 3 ] ;
39041: LD_ADDR_VAR 0 9
39045: PUSH
39046: LD_INT 10
39048: PUSH
39049: LD_INT 5
39051: PUSH
39052: LD_INT 3
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39060: LD_VAR 0 6
39064: PPUSH
39065: CALL_OW 257
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 4
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: IN
39084: IFFALSE 39105
// points := [ 3 , 2 , 1 ] ;
39086: LD_ADDR_VAR 0 9
39090: PUSH
39091: LD_INT 3
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39105: LD_VAR 0 6
39109: PPUSH
39110: CALL_OW 257
39114: PUSH
39115: LD_INT 5
39117: EQUAL
39118: IFFALSE 39139
// points := [ 130 , 5 , 2 ] ;
39120: LD_ADDR_VAR 0 9
39124: PUSH
39125: LD_INT 130
39127: PUSH
39128: LD_INT 5
39130: PUSH
39131: LD_INT 2
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39139: LD_VAR 0 6
39143: PPUSH
39144: CALL_OW 257
39148: PUSH
39149: LD_INT 8
39151: EQUAL
39152: IFFALSE 39173
// points := [ 35 , 35 , 30 ] ;
39154: LD_ADDR_VAR 0 9
39158: PUSH
39159: LD_INT 35
39161: PUSH
39162: LD_INT 35
39164: PUSH
39165: LD_INT 30
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39173: LD_VAR 0 6
39177: PPUSH
39178: CALL_OW 257
39182: PUSH
39183: LD_INT 9
39185: EQUAL
39186: IFFALSE 39207
// points := [ 20 , 55 , 40 ] ;
39188: LD_ADDR_VAR 0 9
39192: PUSH
39193: LD_INT 20
39195: PUSH
39196: LD_INT 55
39198: PUSH
39199: LD_INT 40
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39207: LD_VAR 0 6
39211: PPUSH
39212: CALL_OW 257
39216: PUSH
39217: LD_INT 12
39219: PUSH
39220: LD_INT 16
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: IN
39227: IFFALSE 39248
// points := [ 5 , 3 , 2 ] ;
39229: LD_ADDR_VAR 0 9
39233: PUSH
39234: LD_INT 5
39236: PUSH
39237: LD_INT 3
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39248: LD_VAR 0 6
39252: PPUSH
39253: CALL_OW 257
39257: PUSH
39258: LD_INT 17
39260: EQUAL
39261: IFFALSE 39282
// points := [ 100 , 50 , 75 ] ;
39263: LD_ADDR_VAR 0 9
39267: PUSH
39268: LD_INT 100
39270: PUSH
39271: LD_INT 50
39273: PUSH
39274: LD_INT 75
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39282: LD_VAR 0 6
39286: PPUSH
39287: CALL_OW 257
39291: PUSH
39292: LD_INT 15
39294: EQUAL
39295: IFFALSE 39316
// points := [ 10 , 5 , 3 ] ;
39297: LD_ADDR_VAR 0 9
39301: PUSH
39302: LD_INT 10
39304: PUSH
39305: LD_INT 5
39307: PUSH
39308: LD_INT 3
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39316: LD_VAR 0 6
39320: PPUSH
39321: CALL_OW 257
39325: PUSH
39326: LD_INT 14
39328: EQUAL
39329: IFFALSE 39350
// points := [ 10 , 0 , 0 ] ;
39331: LD_ADDR_VAR 0 9
39335: PUSH
39336: LD_INT 10
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39350: LD_VAR 0 6
39354: PPUSH
39355: CALL_OW 257
39359: PUSH
39360: LD_INT 11
39362: EQUAL
39363: IFFALSE 39384
// points := [ 30 , 10 , 5 ] ;
39365: LD_ADDR_VAR 0 9
39369: PUSH
39370: LD_INT 30
39372: PUSH
39373: LD_INT 10
39375: PUSH
39376: LD_INT 5
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39384: LD_VAR 0 1
39388: PPUSH
39389: LD_INT 5
39391: PPUSH
39392: CALL_OW 321
39396: PUSH
39397: LD_INT 2
39399: EQUAL
39400: IFFALSE 39417
// bpoints := bpoints * 1.8 ;
39402: LD_ADDR_VAR 0 10
39406: PUSH
39407: LD_VAR 0 10
39411: PUSH
39412: LD_REAL  1.80000000000000E+0000
39415: MUL
39416: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39417: LD_VAR 0 6
39421: PPUSH
39422: CALL_OW 257
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 3
39435: PUSH
39436: LD_INT 4
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: IN
39445: PUSH
39446: LD_VAR 0 1
39450: PPUSH
39451: LD_INT 51
39453: PPUSH
39454: CALL_OW 321
39458: PUSH
39459: LD_INT 2
39461: EQUAL
39462: AND
39463: IFFALSE 39480
// bpoints := bpoints * 1.2 ;
39465: LD_ADDR_VAR 0 10
39469: PUSH
39470: LD_VAR 0 10
39474: PUSH
39475: LD_REAL  1.20000000000000E+0000
39478: MUL
39479: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39480: LD_VAR 0 6
39484: PPUSH
39485: CALL_OW 257
39489: PUSH
39490: LD_INT 5
39492: PUSH
39493: LD_INT 7
39495: PUSH
39496: LD_INT 9
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: LIST
39503: IN
39504: PUSH
39505: LD_VAR 0 1
39509: PPUSH
39510: LD_INT 52
39512: PPUSH
39513: CALL_OW 321
39517: PUSH
39518: LD_INT 2
39520: EQUAL
39521: AND
39522: IFFALSE 39539
// bpoints := bpoints * 1.5 ;
39524: LD_ADDR_VAR 0 10
39528: PUSH
39529: LD_VAR 0 10
39533: PUSH
39534: LD_REAL  1.50000000000000E+0000
39537: MUL
39538: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39539: LD_VAR 0 1
39543: PPUSH
39544: LD_INT 66
39546: PPUSH
39547: CALL_OW 321
39551: PUSH
39552: LD_INT 2
39554: EQUAL
39555: IFFALSE 39572
// bpoints := bpoints * 1.1 ;
39557: LD_ADDR_VAR 0 10
39561: PUSH
39562: LD_VAR 0 10
39566: PUSH
39567: LD_REAL  1.10000000000000E+0000
39570: MUL
39571: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39572: LD_ADDR_VAR 0 10
39576: PUSH
39577: LD_VAR 0 10
39581: PUSH
39582: LD_VAR 0 6
39586: PPUSH
39587: LD_INT 1
39589: PPUSH
39590: CALL_OW 259
39594: PUSH
39595: LD_REAL  1.15000000000000E+0000
39598: MUL
39599: MUL
39600: ST_TO_ADDR
// end ; unit_vehicle :
39601: GO 40431
39603: LD_INT 2
39605: DOUBLE
39606: EQUAL
39607: IFTRUE 39611
39609: GO 40419
39611: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39612: LD_VAR 0 6
39616: PPUSH
39617: CALL_OW 264
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 42
39627: PUSH
39628: LD_INT 24
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: LIST
39635: IN
39636: IFFALSE 39657
// points := [ 25 , 5 , 3 ] ;
39638: LD_ADDR_VAR 0 9
39642: PUSH
39643: LD_INT 25
39645: PUSH
39646: LD_INT 5
39648: PUSH
39649: LD_INT 3
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39657: LD_VAR 0 6
39661: PPUSH
39662: CALL_OW 264
39666: PUSH
39667: LD_INT 4
39669: PUSH
39670: LD_INT 43
39672: PUSH
39673: LD_INT 25
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: IN
39681: IFFALSE 39702
// points := [ 40 , 15 , 5 ] ;
39683: LD_ADDR_VAR 0 9
39687: PUSH
39688: LD_INT 40
39690: PUSH
39691: LD_INT 15
39693: PUSH
39694: LD_INT 5
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39702: LD_VAR 0 6
39706: PPUSH
39707: CALL_OW 264
39711: PUSH
39712: LD_INT 3
39714: PUSH
39715: LD_INT 23
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: IN
39722: IFFALSE 39743
// points := [ 7 , 25 , 8 ] ;
39724: LD_ADDR_VAR 0 9
39728: PUSH
39729: LD_INT 7
39731: PUSH
39732: LD_INT 25
39734: PUSH
39735: LD_INT 8
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39743: LD_VAR 0 6
39747: PPUSH
39748: CALL_OW 264
39752: PUSH
39753: LD_INT 5
39755: PUSH
39756: LD_INT 27
39758: PUSH
39759: LD_INT 44
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: LIST
39766: IN
39767: IFFALSE 39788
// points := [ 14 , 50 , 16 ] ;
39769: LD_ADDR_VAR 0 9
39773: PUSH
39774: LD_INT 14
39776: PUSH
39777: LD_INT 50
39779: PUSH
39780: LD_INT 16
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: LIST
39787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39788: LD_VAR 0 6
39792: PPUSH
39793: CALL_OW 264
39797: PUSH
39798: LD_INT 6
39800: PUSH
39801: LD_INT 46
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: IN
39808: IFFALSE 39829
// points := [ 32 , 120 , 70 ] ;
39810: LD_ADDR_VAR 0 9
39814: PUSH
39815: LD_INT 32
39817: PUSH
39818: LD_INT 120
39820: PUSH
39821: LD_INT 70
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39829: LD_VAR 0 6
39833: PPUSH
39834: CALL_OW 264
39838: PUSH
39839: LD_INT 7
39841: PUSH
39842: LD_INT 28
39844: PUSH
39845: LD_INT 45
39847: PUSH
39848: LD_EXP 43
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: IN
39859: IFFALSE 39880
// points := [ 35 , 20 , 45 ] ;
39861: LD_ADDR_VAR 0 9
39865: PUSH
39866: LD_INT 35
39868: PUSH
39869: LD_INT 20
39871: PUSH
39872: LD_INT 45
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39880: LD_VAR 0 6
39884: PPUSH
39885: CALL_OW 264
39889: PUSH
39890: LD_INT 47
39892: PUSH
39893: EMPTY
39894: LIST
39895: IN
39896: IFFALSE 39917
// points := [ 67 , 45 , 75 ] ;
39898: LD_ADDR_VAR 0 9
39902: PUSH
39903: LD_INT 67
39905: PUSH
39906: LD_INT 45
39908: PUSH
39909: LD_INT 75
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: LIST
39916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39917: LD_VAR 0 6
39921: PPUSH
39922: CALL_OW 264
39926: PUSH
39927: LD_INT 26
39929: PUSH
39930: EMPTY
39931: LIST
39932: IN
39933: IFFALSE 39954
// points := [ 120 , 30 , 80 ] ;
39935: LD_ADDR_VAR 0 9
39939: PUSH
39940: LD_INT 120
39942: PUSH
39943: LD_INT 30
39945: PUSH
39946: LD_INT 80
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39954: LD_VAR 0 6
39958: PPUSH
39959: CALL_OW 264
39963: PUSH
39964: LD_INT 22
39966: PUSH
39967: EMPTY
39968: LIST
39969: IN
39970: IFFALSE 39991
// points := [ 40 , 1 , 1 ] ;
39972: LD_ADDR_VAR 0 9
39976: PUSH
39977: LD_INT 40
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39991: LD_VAR 0 6
39995: PPUSH
39996: CALL_OW 264
40000: PUSH
40001: LD_INT 29
40003: PUSH
40004: EMPTY
40005: LIST
40006: IN
40007: IFFALSE 40028
// points := [ 70 , 200 , 400 ] ;
40009: LD_ADDR_VAR 0 9
40013: PUSH
40014: LD_INT 70
40016: PUSH
40017: LD_INT 200
40019: PUSH
40020: LD_INT 400
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40028: LD_VAR 0 6
40032: PPUSH
40033: CALL_OW 264
40037: PUSH
40038: LD_INT 14
40040: PUSH
40041: LD_INT 53
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: IN
40048: IFFALSE 40069
// points := [ 40 , 10 , 20 ] ;
40050: LD_ADDR_VAR 0 9
40054: PUSH
40055: LD_INT 40
40057: PUSH
40058: LD_INT 10
40060: PUSH
40061: LD_INT 20
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40069: LD_VAR 0 6
40073: PPUSH
40074: CALL_OW 264
40078: PUSH
40079: LD_INT 9
40081: PUSH
40082: EMPTY
40083: LIST
40084: IN
40085: IFFALSE 40106
// points := [ 5 , 70 , 20 ] ;
40087: LD_ADDR_VAR 0 9
40091: PUSH
40092: LD_INT 5
40094: PUSH
40095: LD_INT 70
40097: PUSH
40098: LD_INT 20
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40106: LD_VAR 0 6
40110: PPUSH
40111: CALL_OW 264
40115: PUSH
40116: LD_INT 10
40118: PUSH
40119: EMPTY
40120: LIST
40121: IN
40122: IFFALSE 40143
// points := [ 35 , 110 , 70 ] ;
40124: LD_ADDR_VAR 0 9
40128: PUSH
40129: LD_INT 35
40131: PUSH
40132: LD_INT 110
40134: PUSH
40135: LD_INT 70
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40143: LD_VAR 0 6
40147: PPUSH
40148: CALL_OW 265
40152: PUSH
40153: LD_INT 25
40155: EQUAL
40156: IFFALSE 40177
// points := [ 80 , 65 , 100 ] ;
40158: LD_ADDR_VAR 0 9
40162: PUSH
40163: LD_INT 80
40165: PUSH
40166: LD_INT 65
40168: PUSH
40169: LD_INT 100
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: LIST
40176: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40177: LD_VAR 0 6
40181: PPUSH
40182: CALL_OW 263
40186: PUSH
40187: LD_INT 1
40189: EQUAL
40190: IFFALSE 40225
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40192: LD_ADDR_VAR 0 10
40196: PUSH
40197: LD_VAR 0 10
40201: PUSH
40202: LD_VAR 0 6
40206: PPUSH
40207: CALL_OW 311
40211: PPUSH
40212: LD_INT 3
40214: PPUSH
40215: CALL_OW 259
40219: PUSH
40220: LD_INT 4
40222: MUL
40223: MUL
40224: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40225: LD_VAR 0 6
40229: PPUSH
40230: CALL_OW 263
40234: PUSH
40235: LD_INT 2
40237: EQUAL
40238: IFFALSE 40289
// begin j := IsControledBy ( i ) ;
40240: LD_ADDR_VAR 0 7
40244: PUSH
40245: LD_VAR 0 6
40249: PPUSH
40250: CALL_OW 312
40254: ST_TO_ADDR
// if j then
40255: LD_VAR 0 7
40259: IFFALSE 40289
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40261: LD_ADDR_VAR 0 10
40265: PUSH
40266: LD_VAR 0 10
40270: PUSH
40271: LD_VAR 0 7
40275: PPUSH
40276: LD_INT 3
40278: PPUSH
40279: CALL_OW 259
40283: PUSH
40284: LD_INT 3
40286: MUL
40287: MUL
40288: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40289: LD_VAR 0 6
40293: PPUSH
40294: CALL_OW 264
40298: PUSH
40299: LD_INT 5
40301: PUSH
40302: LD_INT 6
40304: PUSH
40305: LD_INT 46
40307: PUSH
40308: LD_INT 44
40310: PUSH
40311: LD_INT 47
40313: PUSH
40314: LD_INT 45
40316: PUSH
40317: LD_INT 28
40319: PUSH
40320: LD_INT 7
40322: PUSH
40323: LD_INT 27
40325: PUSH
40326: LD_INT 29
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: IN
40341: PUSH
40342: LD_VAR 0 1
40346: PPUSH
40347: LD_INT 52
40349: PPUSH
40350: CALL_OW 321
40354: PUSH
40355: LD_INT 2
40357: EQUAL
40358: AND
40359: IFFALSE 40376
// bpoints := bpoints * 1.2 ;
40361: LD_ADDR_VAR 0 10
40365: PUSH
40366: LD_VAR 0 10
40370: PUSH
40371: LD_REAL  1.20000000000000E+0000
40374: MUL
40375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40376: LD_VAR 0 6
40380: PPUSH
40381: CALL_OW 264
40385: PUSH
40386: LD_INT 6
40388: PUSH
40389: LD_INT 46
40391: PUSH
40392: LD_INT 47
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: IN
40400: IFFALSE 40417
// bpoints := bpoints * 1.2 ;
40402: LD_ADDR_VAR 0 10
40406: PUSH
40407: LD_VAR 0 10
40411: PUSH
40412: LD_REAL  1.20000000000000E+0000
40415: MUL
40416: ST_TO_ADDR
// end ; unit_building :
40417: GO 40431
40419: LD_INT 3
40421: DOUBLE
40422: EQUAL
40423: IFTRUE 40427
40425: GO 40430
40427: POP
// ; end ;
40428: GO 40431
40430: POP
// for j = 1 to 3 do
40431: LD_ADDR_VAR 0 7
40435: PUSH
40436: DOUBLE
40437: LD_INT 1
40439: DEC
40440: ST_TO_ADDR
40441: LD_INT 3
40443: PUSH
40444: FOR_TO
40445: IFFALSE 40498
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40447: LD_ADDR_VAR 0 5
40451: PUSH
40452: LD_VAR 0 5
40456: PPUSH
40457: LD_VAR 0 7
40461: PPUSH
40462: LD_VAR 0 5
40466: PUSH
40467: LD_VAR 0 7
40471: ARRAY
40472: PUSH
40473: LD_VAR 0 9
40477: PUSH
40478: LD_VAR 0 7
40482: ARRAY
40483: PUSH
40484: LD_VAR 0 10
40488: MUL
40489: PLUS
40490: PPUSH
40491: CALL_OW 1
40495: ST_TO_ADDR
40496: GO 40444
40498: POP
40499: POP
// end ;
40500: GO 38977
40502: POP
40503: POP
// result := Replace ( result , 4 , tmp ) ;
40504: LD_ADDR_VAR 0 5
40508: PUSH
40509: LD_VAR 0 5
40513: PPUSH
40514: LD_INT 4
40516: PPUSH
40517: LD_VAR 0 8
40521: PPUSH
40522: CALL_OW 1
40526: ST_TO_ADDR
// end ;
40527: LD_VAR 0 5
40531: RET
// export function DangerAtRange ( unit , range ) ; begin
40532: LD_INT 0
40534: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40535: LD_ADDR_VAR 0 3
40539: PUSH
40540: LD_VAR 0 1
40544: PPUSH
40545: CALL_OW 255
40549: PPUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: CALL_OW 250
40559: PPUSH
40560: LD_VAR 0 1
40564: PPUSH
40565: CALL_OW 251
40569: PPUSH
40570: LD_VAR 0 2
40574: PPUSH
40575: CALL 38829 0 4
40579: ST_TO_ADDR
// end ;
40580: LD_VAR 0 3
40584: RET
// export function DangerInArea ( side , area ) ; begin
40585: LD_INT 0
40587: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40588: LD_ADDR_VAR 0 3
40592: PUSH
40593: LD_VAR 0 2
40597: PPUSH
40598: LD_INT 81
40600: PUSH
40601: LD_VAR 0 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PPUSH
40610: CALL_OW 70
40614: ST_TO_ADDR
// end ;
40615: LD_VAR 0 3
40619: RET
// export function IsExtension ( b ) ; begin
40620: LD_INT 0
40622: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40623: LD_ADDR_VAR 0 2
40627: PUSH
40628: LD_VAR 0 1
40632: PUSH
40633: LD_INT 23
40635: PUSH
40636: LD_INT 20
40638: PUSH
40639: LD_INT 22
40641: PUSH
40642: LD_INT 17
40644: PUSH
40645: LD_INT 24
40647: PUSH
40648: LD_INT 21
40650: PUSH
40651: LD_INT 19
40653: PUSH
40654: LD_INT 16
40656: PUSH
40657: LD_INT 25
40659: PUSH
40660: LD_INT 18
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: IN
40675: ST_TO_ADDR
// end ;
40676: LD_VAR 0 2
40680: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40681: LD_INT 0
40683: PPUSH
40684: PPUSH
40685: PPUSH
// result := [ ] ;
40686: LD_ADDR_VAR 0 4
40690: PUSH
40691: EMPTY
40692: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40693: LD_ADDR_VAR 0 5
40697: PUSH
40698: LD_VAR 0 2
40702: PPUSH
40703: LD_INT 21
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PPUSH
40713: CALL_OW 70
40717: ST_TO_ADDR
// if not tmp then
40718: LD_VAR 0 5
40722: NOT
40723: IFFALSE 40727
// exit ;
40725: GO 40791
// if checkLink then
40727: LD_VAR 0 3
40731: IFFALSE 40781
// begin for i in tmp do
40733: LD_ADDR_VAR 0 6
40737: PUSH
40738: LD_VAR 0 5
40742: PUSH
40743: FOR_IN
40744: IFFALSE 40779
// if GetBase ( i ) <> base then
40746: LD_VAR 0 6
40750: PPUSH
40751: CALL_OW 274
40755: PUSH
40756: LD_VAR 0 1
40760: NONEQUAL
40761: IFFALSE 40777
// ComLinkToBase ( base , i ) ;
40763: LD_VAR 0 1
40767: PPUSH
40768: LD_VAR 0 6
40772: PPUSH
40773: CALL_OW 169
40777: GO 40743
40779: POP
40780: POP
// end ; result := tmp ;
40781: LD_ADDR_VAR 0 4
40785: PUSH
40786: LD_VAR 0 5
40790: ST_TO_ADDR
// end ;
40791: LD_VAR 0 4
40795: RET
// export function ComComplete ( units , b ) ; var i ; begin
40796: LD_INT 0
40798: PPUSH
40799: PPUSH
// if not units then
40800: LD_VAR 0 1
40804: NOT
40805: IFFALSE 40809
// exit ;
40807: GO 40899
// for i in units do
40809: LD_ADDR_VAR 0 4
40813: PUSH
40814: LD_VAR 0 1
40818: PUSH
40819: FOR_IN
40820: IFFALSE 40897
// if BuildingStatus ( b ) = bs_build then
40822: LD_VAR 0 2
40826: PPUSH
40827: CALL_OW 461
40831: PUSH
40832: LD_INT 1
40834: EQUAL
40835: IFFALSE 40895
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40837: LD_VAR 0 4
40841: PPUSH
40842: LD_STRING h
40844: PUSH
40845: LD_VAR 0 2
40849: PPUSH
40850: CALL_OW 250
40854: PUSH
40855: LD_VAR 0 2
40859: PPUSH
40860: CALL_OW 251
40864: PUSH
40865: LD_VAR 0 2
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: PUSH
40888: EMPTY
40889: LIST
40890: PPUSH
40891: CALL_OW 446
40895: GO 40819
40897: POP
40898: POP
// end ;
40899: LD_VAR 0 3
40903: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40904: LD_INT 0
40906: PPUSH
40907: PPUSH
40908: PPUSH
40909: PPUSH
40910: PPUSH
40911: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40912: LD_VAR 0 1
40916: NOT
40917: PUSH
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 263
40927: PUSH
40928: LD_INT 2
40930: NONEQUAL
40931: OR
40932: IFFALSE 40936
// exit ;
40934: GO 41252
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40936: LD_ADDR_VAR 0 6
40940: PUSH
40941: LD_INT 22
40943: PUSH
40944: LD_VAR 0 1
40948: PPUSH
40949: CALL_OW 255
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 30
40963: PUSH
40964: LD_INT 36
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 34
40973: PUSH
40974: LD_INT 31
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PPUSH
40990: CALL_OW 69
40994: ST_TO_ADDR
// if not tmp then
40995: LD_VAR 0 6
40999: NOT
41000: IFFALSE 41004
// exit ;
41002: GO 41252
// result := [ ] ;
41004: LD_ADDR_VAR 0 2
41008: PUSH
41009: EMPTY
41010: ST_TO_ADDR
// for i in tmp do
41011: LD_ADDR_VAR 0 3
41015: PUSH
41016: LD_VAR 0 6
41020: PUSH
41021: FOR_IN
41022: IFFALSE 41093
// begin t := UnitsInside ( i ) ;
41024: LD_ADDR_VAR 0 4
41028: PUSH
41029: LD_VAR 0 3
41033: PPUSH
41034: CALL_OW 313
41038: ST_TO_ADDR
// if t then
41039: LD_VAR 0 4
41043: IFFALSE 41091
// for j in t do
41045: LD_ADDR_VAR 0 7
41049: PUSH
41050: LD_VAR 0 4
41054: PUSH
41055: FOR_IN
41056: IFFALSE 41089
// result := Replace ( result , result + 1 , j ) ;
41058: LD_ADDR_VAR 0 2
41062: PUSH
41063: LD_VAR 0 2
41067: PPUSH
41068: LD_VAR 0 2
41072: PUSH
41073: LD_INT 1
41075: PLUS
41076: PPUSH
41077: LD_VAR 0 7
41081: PPUSH
41082: CALL_OW 1
41086: ST_TO_ADDR
41087: GO 41055
41089: POP
41090: POP
// end ;
41091: GO 41021
41093: POP
41094: POP
// if not result then
41095: LD_VAR 0 2
41099: NOT
41100: IFFALSE 41104
// exit ;
41102: GO 41252
// mech := result [ 1 ] ;
41104: LD_ADDR_VAR 0 5
41108: PUSH
41109: LD_VAR 0 2
41113: PUSH
41114: LD_INT 1
41116: ARRAY
41117: ST_TO_ADDR
// if result > 1 then
41118: LD_VAR 0 2
41122: PUSH
41123: LD_INT 1
41125: GREATER
41126: IFFALSE 41238
// begin for i = 2 to result do
41128: LD_ADDR_VAR 0 3
41132: PUSH
41133: DOUBLE
41134: LD_INT 2
41136: DEC
41137: ST_TO_ADDR
41138: LD_VAR 0 2
41142: PUSH
41143: FOR_TO
41144: IFFALSE 41236
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41146: LD_ADDR_VAR 0 4
41150: PUSH
41151: LD_VAR 0 2
41155: PUSH
41156: LD_VAR 0 3
41160: ARRAY
41161: PPUSH
41162: LD_INT 3
41164: PPUSH
41165: CALL_OW 259
41169: PUSH
41170: LD_VAR 0 2
41174: PUSH
41175: LD_VAR 0 3
41179: ARRAY
41180: PPUSH
41181: CALL_OW 432
41185: MINUS
41186: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41187: LD_VAR 0 4
41191: PUSH
41192: LD_VAR 0 5
41196: PPUSH
41197: LD_INT 3
41199: PPUSH
41200: CALL_OW 259
41204: PUSH
41205: LD_VAR 0 5
41209: PPUSH
41210: CALL_OW 432
41214: MINUS
41215: GREATEREQUAL
41216: IFFALSE 41234
// mech := result [ i ] ;
41218: LD_ADDR_VAR 0 5
41222: PUSH
41223: LD_VAR 0 2
41227: PUSH
41228: LD_VAR 0 3
41232: ARRAY
41233: ST_TO_ADDR
// end ;
41234: GO 41143
41236: POP
41237: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41238: LD_VAR 0 1
41242: PPUSH
41243: LD_VAR 0 5
41247: PPUSH
41248: CALL_OW 135
// end ;
41252: LD_VAR 0 2
41256: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
// result := [ ] ;
41272: LD_ADDR_VAR 0 7
41276: PUSH
41277: EMPTY
41278: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 266
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: IN
41299: NOT
41300: IFFALSE 41304
// exit ;
41302: GO 42938
// if name then
41304: LD_VAR 0 3
41308: IFFALSE 41324
// SetBName ( base_dep , name ) ;
41310: LD_VAR 0 1
41314: PPUSH
41315: LD_VAR 0 3
41319: PPUSH
41320: CALL_OW 500
// base := GetBase ( base_dep ) ;
41324: LD_ADDR_VAR 0 15
41328: PUSH
41329: LD_VAR 0 1
41333: PPUSH
41334: CALL_OW 274
41338: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41339: LD_ADDR_VAR 0 16
41343: PUSH
41344: LD_VAR 0 1
41348: PPUSH
41349: CALL_OW 255
41353: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41354: LD_ADDR_VAR 0 17
41358: PUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: CALL_OW 248
41368: ST_TO_ADDR
// if sources then
41369: LD_VAR 0 5
41373: IFFALSE 41420
// for i = 1 to 3 do
41375: LD_ADDR_VAR 0 8
41379: PUSH
41380: DOUBLE
41381: LD_INT 1
41383: DEC
41384: ST_TO_ADDR
41385: LD_INT 3
41387: PUSH
41388: FOR_TO
41389: IFFALSE 41418
// AddResourceType ( base , i , sources [ i ] ) ;
41391: LD_VAR 0 15
41395: PPUSH
41396: LD_VAR 0 8
41400: PPUSH
41401: LD_VAR 0 5
41405: PUSH
41406: LD_VAR 0 8
41410: ARRAY
41411: PPUSH
41412: CALL_OW 276
41416: GO 41388
41418: POP
41419: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41420: LD_ADDR_VAR 0 18
41424: PUSH
41425: LD_VAR 0 15
41429: PPUSH
41430: LD_VAR 0 2
41434: PPUSH
41435: LD_INT 1
41437: PPUSH
41438: CALL 40681 0 3
41442: ST_TO_ADDR
// InitHc ;
41443: CALL_OW 19
// InitUc ;
41447: CALL_OW 18
// uc_side := side ;
41451: LD_ADDR_OWVAR 20
41455: PUSH
41456: LD_VAR 0 16
41460: ST_TO_ADDR
// uc_nation := nation ;
41461: LD_ADDR_OWVAR 21
41465: PUSH
41466: LD_VAR 0 17
41470: ST_TO_ADDR
// if buildings then
41471: LD_VAR 0 18
41475: IFFALSE 42797
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41477: LD_ADDR_VAR 0 19
41481: PUSH
41482: LD_VAR 0 18
41486: PPUSH
41487: LD_INT 2
41489: PUSH
41490: LD_INT 30
41492: PUSH
41493: LD_INT 29
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 30
41502: PUSH
41503: LD_INT 30
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: PPUSH
41515: CALL_OW 72
41519: ST_TO_ADDR
// if tmp then
41520: LD_VAR 0 19
41524: IFFALSE 41572
// for i in tmp do
41526: LD_ADDR_VAR 0 8
41530: PUSH
41531: LD_VAR 0 19
41535: PUSH
41536: FOR_IN
41537: IFFALSE 41570
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41539: LD_VAR 0 8
41543: PPUSH
41544: CALL_OW 250
41548: PPUSH
41549: LD_VAR 0 8
41553: PPUSH
41554: CALL_OW 251
41558: PPUSH
41559: LD_VAR 0 16
41563: PPUSH
41564: CALL_OW 441
41568: GO 41536
41570: POP
41571: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41572: LD_VAR 0 18
41576: PPUSH
41577: LD_INT 2
41579: PUSH
41580: LD_INT 30
41582: PUSH
41583: LD_INT 32
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 30
41592: PUSH
41593: LD_INT 33
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: PPUSH
41605: CALL_OW 72
41609: IFFALSE 41697
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41611: LD_ADDR_VAR 0 8
41615: PUSH
41616: LD_VAR 0 18
41620: PPUSH
41621: LD_INT 2
41623: PUSH
41624: LD_INT 30
41626: PUSH
41627: LD_INT 32
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 30
41636: PUSH
41637: LD_INT 33
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: PPUSH
41649: CALL_OW 72
41653: PUSH
41654: FOR_IN
41655: IFFALSE 41695
// begin if not GetBWeapon ( i ) then
41657: LD_VAR 0 8
41661: PPUSH
41662: CALL_OW 269
41666: NOT
41667: IFFALSE 41693
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41669: LD_VAR 0 8
41673: PPUSH
41674: LD_VAR 0 8
41678: PPUSH
41679: LD_VAR 0 2
41683: PPUSH
41684: CALL 42943 0 2
41688: PPUSH
41689: CALL_OW 431
// end ;
41693: GO 41654
41695: POP
41696: POP
// end ; for i = 1 to personel do
41697: LD_ADDR_VAR 0 8
41701: PUSH
41702: DOUBLE
41703: LD_INT 1
41705: DEC
41706: ST_TO_ADDR
41707: LD_VAR 0 6
41711: PUSH
41712: FOR_TO
41713: IFFALSE 42777
// begin if i > 4 then
41715: LD_VAR 0 8
41719: PUSH
41720: LD_INT 4
41722: GREATER
41723: IFFALSE 41727
// break ;
41725: GO 42777
// case i of 1 :
41727: LD_VAR 0 8
41731: PUSH
41732: LD_INT 1
41734: DOUBLE
41735: EQUAL
41736: IFTRUE 41740
41738: GO 41820
41740: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41741: LD_ADDR_VAR 0 12
41745: PUSH
41746: LD_VAR 0 18
41750: PPUSH
41751: LD_INT 22
41753: PUSH
41754: LD_VAR 0 16
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 58
41765: PUSH
41766: EMPTY
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 30
41774: PUSH
41775: LD_INT 32
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 30
41784: PUSH
41785: LD_INT 4
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 30
41794: PUSH
41795: LD_INT 5
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: LIST
41812: PPUSH
41813: CALL_OW 72
41817: ST_TO_ADDR
41818: GO 42042
41820: LD_INT 2
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 41890
41828: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41829: LD_ADDR_VAR 0 12
41833: PUSH
41834: LD_VAR 0 18
41838: PPUSH
41839: LD_INT 22
41841: PUSH
41842: LD_VAR 0 16
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 30
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 30
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PPUSH
41883: CALL_OW 72
41887: ST_TO_ADDR
41888: GO 42042
41890: LD_INT 3
41892: DOUBLE
41893: EQUAL
41894: IFTRUE 41898
41896: GO 41960
41898: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41899: LD_ADDR_VAR 0 12
41903: PUSH
41904: LD_VAR 0 18
41908: PPUSH
41909: LD_INT 22
41911: PUSH
41912: LD_VAR 0 16
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 30
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 30
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PPUSH
41953: CALL_OW 72
41957: ST_TO_ADDR
41958: GO 42042
41960: LD_INT 4
41962: DOUBLE
41963: EQUAL
41964: IFTRUE 41968
41966: GO 42041
41968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41969: LD_ADDR_VAR 0 12
41973: PUSH
41974: LD_VAR 0 18
41978: PPUSH
41979: LD_INT 22
41981: PUSH
41982: LD_VAR 0 16
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 30
41996: PUSH
41997: LD_INT 6
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 30
42006: PUSH
42007: LD_INT 7
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 30
42016: PUSH
42017: LD_INT 8
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PPUSH
42034: CALL_OW 72
42038: ST_TO_ADDR
42039: GO 42042
42041: POP
// if i = 1 then
42042: LD_VAR 0 8
42046: PUSH
42047: LD_INT 1
42049: EQUAL
42050: IFFALSE 42161
// begin tmp := [ ] ;
42052: LD_ADDR_VAR 0 19
42056: PUSH
42057: EMPTY
42058: ST_TO_ADDR
// for j in f do
42059: LD_ADDR_VAR 0 9
42063: PUSH
42064: LD_VAR 0 12
42068: PUSH
42069: FOR_IN
42070: IFFALSE 42143
// if GetBType ( j ) = b_bunker then
42072: LD_VAR 0 9
42076: PPUSH
42077: CALL_OW 266
42081: PUSH
42082: LD_INT 32
42084: EQUAL
42085: IFFALSE 42112
// tmp := Insert ( tmp , 1 , j ) else
42087: LD_ADDR_VAR 0 19
42091: PUSH
42092: LD_VAR 0 19
42096: PPUSH
42097: LD_INT 1
42099: PPUSH
42100: LD_VAR 0 9
42104: PPUSH
42105: CALL_OW 2
42109: ST_TO_ADDR
42110: GO 42141
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42112: LD_ADDR_VAR 0 19
42116: PUSH
42117: LD_VAR 0 19
42121: PPUSH
42122: LD_VAR 0 19
42126: PUSH
42127: LD_INT 1
42129: PLUS
42130: PPUSH
42131: LD_VAR 0 9
42135: PPUSH
42136: CALL_OW 2
42140: ST_TO_ADDR
42141: GO 42069
42143: POP
42144: POP
// if tmp then
42145: LD_VAR 0 19
42149: IFFALSE 42161
// f := tmp ;
42151: LD_ADDR_VAR 0 12
42155: PUSH
42156: LD_VAR 0 19
42160: ST_TO_ADDR
// end ; x := personel [ i ] ;
42161: LD_ADDR_VAR 0 13
42165: PUSH
42166: LD_VAR 0 6
42170: PUSH
42171: LD_VAR 0 8
42175: ARRAY
42176: ST_TO_ADDR
// if x = - 1 then
42177: LD_VAR 0 13
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: EQUAL
42186: IFFALSE 42395
// begin for j in f do
42188: LD_ADDR_VAR 0 9
42192: PUSH
42193: LD_VAR 0 12
42197: PUSH
42198: FOR_IN
42199: IFFALSE 42391
// repeat InitHc ;
42201: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42205: LD_VAR 0 9
42209: PPUSH
42210: CALL_OW 266
42214: PUSH
42215: LD_INT 5
42217: EQUAL
42218: IFFALSE 42288
// begin if UnitsInside ( j ) < 3 then
42220: LD_VAR 0 9
42224: PPUSH
42225: CALL_OW 313
42229: PUSH
42230: LD_INT 3
42232: LESS
42233: IFFALSE 42269
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42235: LD_INT 0
42237: PPUSH
42238: LD_INT 5
42240: PUSH
42241: LD_INT 8
42243: PUSH
42244: LD_INT 9
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: PUSH
42252: LD_VAR 0 17
42256: ARRAY
42257: PPUSH
42258: LD_VAR 0 4
42262: PPUSH
42263: CALL_OW 380
42267: GO 42286
// PrepareHuman ( false , i , skill ) ;
42269: LD_INT 0
42271: PPUSH
42272: LD_VAR 0 8
42276: PPUSH
42277: LD_VAR 0 4
42281: PPUSH
42282: CALL_OW 380
// end else
42286: GO 42305
// PrepareHuman ( false , i , skill ) ;
42288: LD_INT 0
42290: PPUSH
42291: LD_VAR 0 8
42295: PPUSH
42296: LD_VAR 0 4
42300: PPUSH
42301: CALL_OW 380
// un := CreateHuman ;
42305: LD_ADDR_VAR 0 14
42309: PUSH
42310: CALL_OW 44
42314: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42315: LD_ADDR_VAR 0 7
42319: PUSH
42320: LD_VAR 0 7
42324: PPUSH
42325: LD_INT 1
42327: PPUSH
42328: LD_VAR 0 14
42332: PPUSH
42333: CALL_OW 2
42337: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42338: LD_VAR 0 14
42342: PPUSH
42343: LD_VAR 0 9
42347: PPUSH
42348: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42352: LD_VAR 0 9
42356: PPUSH
42357: CALL_OW 313
42361: PUSH
42362: LD_INT 6
42364: EQUAL
42365: PUSH
42366: LD_VAR 0 9
42370: PPUSH
42371: CALL_OW 266
42375: PUSH
42376: LD_INT 32
42378: PUSH
42379: LD_INT 31
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: IN
42386: OR
42387: IFFALSE 42201
42389: GO 42198
42391: POP
42392: POP
// end else
42393: GO 42775
// for j = 1 to x do
42395: LD_ADDR_VAR 0 9
42399: PUSH
42400: DOUBLE
42401: LD_INT 1
42403: DEC
42404: ST_TO_ADDR
42405: LD_VAR 0 13
42409: PUSH
42410: FOR_TO
42411: IFFALSE 42773
// begin InitHc ;
42413: CALL_OW 19
// if not f then
42417: LD_VAR 0 12
42421: NOT
42422: IFFALSE 42511
// begin PrepareHuman ( false , i , skill ) ;
42424: LD_INT 0
42426: PPUSH
42427: LD_VAR 0 8
42431: PPUSH
42432: LD_VAR 0 4
42436: PPUSH
42437: CALL_OW 380
// un := CreateHuman ;
42441: LD_ADDR_VAR 0 14
42445: PUSH
42446: CALL_OW 44
42450: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42451: LD_ADDR_VAR 0 7
42455: PUSH
42456: LD_VAR 0 7
42460: PPUSH
42461: LD_INT 1
42463: PPUSH
42464: LD_VAR 0 14
42468: PPUSH
42469: CALL_OW 2
42473: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42474: LD_VAR 0 14
42478: PPUSH
42479: LD_VAR 0 1
42483: PPUSH
42484: CALL_OW 250
42488: PPUSH
42489: LD_VAR 0 1
42493: PPUSH
42494: CALL_OW 251
42498: PPUSH
42499: LD_INT 10
42501: PPUSH
42502: LD_INT 0
42504: PPUSH
42505: CALL_OW 50
// continue ;
42509: GO 42410
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42511: LD_VAR 0 12
42515: PUSH
42516: LD_INT 1
42518: ARRAY
42519: PPUSH
42520: CALL_OW 313
42524: PUSH
42525: LD_VAR 0 12
42529: PUSH
42530: LD_INT 1
42532: ARRAY
42533: PPUSH
42534: CALL_OW 266
42538: PUSH
42539: LD_INT 32
42541: PUSH
42542: LD_INT 31
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: IN
42549: AND
42550: PUSH
42551: LD_VAR 0 12
42555: PUSH
42556: LD_INT 1
42558: ARRAY
42559: PPUSH
42560: CALL_OW 313
42564: PUSH
42565: LD_INT 6
42567: EQUAL
42568: OR
42569: IFFALSE 42589
// f := Delete ( f , 1 ) ;
42571: LD_ADDR_VAR 0 12
42575: PUSH
42576: LD_VAR 0 12
42580: PPUSH
42581: LD_INT 1
42583: PPUSH
42584: CALL_OW 3
42588: ST_TO_ADDR
// if not f then
42589: LD_VAR 0 12
42593: NOT
42594: IFFALSE 42612
// begin x := x + 2 ;
42596: LD_ADDR_VAR 0 13
42600: PUSH
42601: LD_VAR 0 13
42605: PUSH
42606: LD_INT 2
42608: PLUS
42609: ST_TO_ADDR
// continue ;
42610: GO 42410
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42612: LD_VAR 0 12
42616: PUSH
42617: LD_INT 1
42619: ARRAY
42620: PPUSH
42621: CALL_OW 266
42625: PUSH
42626: LD_INT 5
42628: EQUAL
42629: IFFALSE 42703
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42631: LD_VAR 0 12
42635: PUSH
42636: LD_INT 1
42638: ARRAY
42639: PPUSH
42640: CALL_OW 313
42644: PUSH
42645: LD_INT 3
42647: LESS
42648: IFFALSE 42684
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42650: LD_INT 0
42652: PPUSH
42653: LD_INT 5
42655: PUSH
42656: LD_INT 8
42658: PUSH
42659: LD_INT 9
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: PUSH
42667: LD_VAR 0 17
42671: ARRAY
42672: PPUSH
42673: LD_VAR 0 4
42677: PPUSH
42678: CALL_OW 380
42682: GO 42701
// PrepareHuman ( false , i , skill ) ;
42684: LD_INT 0
42686: PPUSH
42687: LD_VAR 0 8
42691: PPUSH
42692: LD_VAR 0 4
42696: PPUSH
42697: CALL_OW 380
// end else
42701: GO 42720
// PrepareHuman ( false , i , skill ) ;
42703: LD_INT 0
42705: PPUSH
42706: LD_VAR 0 8
42710: PPUSH
42711: LD_VAR 0 4
42715: PPUSH
42716: CALL_OW 380
// un := CreateHuman ;
42720: LD_ADDR_VAR 0 14
42724: PUSH
42725: CALL_OW 44
42729: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42730: LD_ADDR_VAR 0 7
42734: PUSH
42735: LD_VAR 0 7
42739: PPUSH
42740: LD_INT 1
42742: PPUSH
42743: LD_VAR 0 14
42747: PPUSH
42748: CALL_OW 2
42752: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42753: LD_VAR 0 14
42757: PPUSH
42758: LD_VAR 0 12
42762: PUSH
42763: LD_INT 1
42765: ARRAY
42766: PPUSH
42767: CALL_OW 52
// end ;
42771: GO 42410
42773: POP
42774: POP
// end ;
42775: GO 41712
42777: POP
42778: POP
// result := result ^ buildings ;
42779: LD_ADDR_VAR 0 7
42783: PUSH
42784: LD_VAR 0 7
42788: PUSH
42789: LD_VAR 0 18
42793: ADD
42794: ST_TO_ADDR
// end else
42795: GO 42938
// begin for i = 1 to personel do
42797: LD_ADDR_VAR 0 8
42801: PUSH
42802: DOUBLE
42803: LD_INT 1
42805: DEC
42806: ST_TO_ADDR
42807: LD_VAR 0 6
42811: PUSH
42812: FOR_TO
42813: IFFALSE 42936
// begin if i > 4 then
42815: LD_VAR 0 8
42819: PUSH
42820: LD_INT 4
42822: GREATER
42823: IFFALSE 42827
// break ;
42825: GO 42936
// x := personel [ i ] ;
42827: LD_ADDR_VAR 0 13
42831: PUSH
42832: LD_VAR 0 6
42836: PUSH
42837: LD_VAR 0 8
42841: ARRAY
42842: ST_TO_ADDR
// if x = - 1 then
42843: LD_VAR 0 13
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: EQUAL
42852: IFFALSE 42856
// continue ;
42854: GO 42812
// PrepareHuman ( false , i , skill ) ;
42856: LD_INT 0
42858: PPUSH
42859: LD_VAR 0 8
42863: PPUSH
42864: LD_VAR 0 4
42868: PPUSH
42869: CALL_OW 380
// un := CreateHuman ;
42873: LD_ADDR_VAR 0 14
42877: PUSH
42878: CALL_OW 44
42882: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42883: LD_VAR 0 14
42887: PPUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: CALL_OW 250
42897: PPUSH
42898: LD_VAR 0 1
42902: PPUSH
42903: CALL_OW 251
42907: PPUSH
42908: LD_INT 10
42910: PPUSH
42911: LD_INT 0
42913: PPUSH
42914: CALL_OW 50
// result := result ^ un ;
42918: LD_ADDR_VAR 0 7
42922: PUSH
42923: LD_VAR 0 7
42927: PUSH
42928: LD_VAR 0 14
42932: ADD
42933: ST_TO_ADDR
// end ;
42934: GO 42812
42936: POP
42937: POP
// end ; end ;
42938: LD_VAR 0 7
42942: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42943: LD_INT 0
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
// result := false ;
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_INT 0
42968: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42969: LD_VAR 0 1
42973: NOT
42974: PUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 266
42984: PUSH
42985: LD_INT 32
42987: PUSH
42988: LD_INT 33
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: IN
42995: NOT
42996: OR
42997: IFFALSE 43001
// exit ;
42999: GO 44110
// nat := GetNation ( tower ) ;
43001: LD_ADDR_VAR 0 12
43005: PUSH
43006: LD_VAR 0 1
43010: PPUSH
43011: CALL_OW 248
43015: ST_TO_ADDR
// side := GetSide ( tower ) ;
43016: LD_ADDR_VAR 0 16
43020: PUSH
43021: LD_VAR 0 1
43025: PPUSH
43026: CALL_OW 255
43030: ST_TO_ADDR
// x := GetX ( tower ) ;
43031: LD_ADDR_VAR 0 10
43035: PUSH
43036: LD_VAR 0 1
43040: PPUSH
43041: CALL_OW 250
43045: ST_TO_ADDR
// y := GetY ( tower ) ;
43046: LD_ADDR_VAR 0 11
43050: PUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 251
43060: ST_TO_ADDR
// if not x or not y then
43061: LD_VAR 0 10
43065: NOT
43066: PUSH
43067: LD_VAR 0 11
43071: NOT
43072: OR
43073: IFFALSE 43077
// exit ;
43075: GO 44110
// weapon := 0 ;
43077: LD_ADDR_VAR 0 18
43081: PUSH
43082: LD_INT 0
43084: ST_TO_ADDR
// fac_list := [ ] ;
43085: LD_ADDR_VAR 0 17
43089: PUSH
43090: EMPTY
43091: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43092: LD_ADDR_VAR 0 6
43096: PUSH
43097: LD_VAR 0 1
43101: PPUSH
43102: CALL_OW 274
43106: PPUSH
43107: LD_VAR 0 2
43111: PPUSH
43112: LD_INT 0
43114: PPUSH
43115: CALL 40681 0 3
43119: PPUSH
43120: LD_INT 30
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PPUSH
43130: CALL_OW 72
43134: ST_TO_ADDR
// if not factories then
43135: LD_VAR 0 6
43139: NOT
43140: IFFALSE 43144
// exit ;
43142: GO 44110
// for i in factories do
43144: LD_ADDR_VAR 0 8
43148: PUSH
43149: LD_VAR 0 6
43153: PUSH
43154: FOR_IN
43155: IFFALSE 43180
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43157: LD_ADDR_VAR 0 17
43161: PUSH
43162: LD_VAR 0 17
43166: PUSH
43167: LD_VAR 0 8
43171: PPUSH
43172: CALL_OW 478
43176: UNION
43177: ST_TO_ADDR
43178: GO 43154
43180: POP
43181: POP
// if not fac_list then
43182: LD_VAR 0 17
43186: NOT
43187: IFFALSE 43191
// exit ;
43189: GO 44110
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43191: LD_ADDR_VAR 0 5
43195: PUSH
43196: LD_INT 4
43198: PUSH
43199: LD_INT 5
43201: PUSH
43202: LD_INT 9
43204: PUSH
43205: LD_INT 10
43207: PUSH
43208: LD_INT 6
43210: PUSH
43211: LD_INT 7
43213: PUSH
43214: LD_INT 11
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 27
43228: PUSH
43229: LD_INT 28
43231: PUSH
43232: LD_INT 26
43234: PUSH
43235: LD_INT 30
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 43
43246: PUSH
43247: LD_INT 44
43249: PUSH
43250: LD_INT 46
43252: PUSH
43253: LD_INT 45
43255: PUSH
43256: LD_INT 47
43258: PUSH
43259: LD_INT 49
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: PUSH
43275: LD_VAR 0 12
43279: ARRAY
43280: ST_TO_ADDR
// list := list isect fac_list ;
43281: LD_ADDR_VAR 0 5
43285: PUSH
43286: LD_VAR 0 5
43290: PUSH
43291: LD_VAR 0 17
43295: ISECT
43296: ST_TO_ADDR
// if not list then
43297: LD_VAR 0 5
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 44110
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43306: LD_VAR 0 12
43310: PUSH
43311: LD_INT 3
43313: EQUAL
43314: PUSH
43315: LD_INT 49
43317: PUSH
43318: LD_VAR 0 5
43322: IN
43323: AND
43324: PUSH
43325: LD_INT 31
43327: PPUSH
43328: LD_VAR 0 16
43332: PPUSH
43333: CALL_OW 321
43337: PUSH
43338: LD_INT 2
43340: EQUAL
43341: AND
43342: IFFALSE 43402
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43344: LD_INT 22
43346: PUSH
43347: LD_VAR 0 16
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 35
43358: PUSH
43359: LD_INT 49
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 91
43368: PUSH
43369: LD_VAR 0 1
43373: PUSH
43374: LD_INT 10
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: LIST
43386: PPUSH
43387: CALL_OW 69
43391: NOT
43392: IFFALSE 43402
// weapon := ru_time_lapser ;
43394: LD_ADDR_VAR 0 18
43398: PUSH
43399: LD_INT 49
43401: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43402: LD_VAR 0 12
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: IN
43417: PUSH
43418: LD_INT 11
43420: PUSH
43421: LD_VAR 0 5
43425: IN
43426: PUSH
43427: LD_INT 30
43429: PUSH
43430: LD_VAR 0 5
43434: IN
43435: OR
43436: AND
43437: PUSH
43438: LD_INT 6
43440: PPUSH
43441: LD_VAR 0 16
43445: PPUSH
43446: CALL_OW 321
43450: PUSH
43451: LD_INT 2
43453: EQUAL
43454: AND
43455: IFFALSE 43620
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43457: LD_INT 22
43459: PUSH
43460: LD_VAR 0 16
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 35
43474: PUSH
43475: LD_INT 11
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 35
43484: PUSH
43485: LD_INT 30
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 91
43499: PUSH
43500: LD_VAR 0 1
43504: PUSH
43505: LD_INT 18
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: PPUSH
43518: CALL_OW 69
43522: NOT
43523: PUSH
43524: LD_INT 22
43526: PUSH
43527: LD_VAR 0 16
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: LD_INT 30
43541: PUSH
43542: LD_INT 32
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 30
43551: PUSH
43552: LD_INT 33
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 91
43566: PUSH
43567: LD_VAR 0 1
43571: PUSH
43572: LD_INT 12
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: PPUSH
43588: CALL_OW 69
43592: PUSH
43593: LD_INT 2
43595: GREATER
43596: AND
43597: IFFALSE 43620
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43599: LD_ADDR_VAR 0 18
43603: PUSH
43604: LD_INT 11
43606: PUSH
43607: LD_INT 30
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_VAR 0 12
43618: ARRAY
43619: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43620: LD_VAR 0 18
43624: NOT
43625: PUSH
43626: LD_INT 40
43628: PPUSH
43629: LD_VAR 0 16
43633: PPUSH
43634: CALL_OW 321
43638: PUSH
43639: LD_INT 2
43641: EQUAL
43642: AND
43643: PUSH
43644: LD_INT 7
43646: PUSH
43647: LD_VAR 0 5
43651: IN
43652: PUSH
43653: LD_INT 28
43655: PUSH
43656: LD_VAR 0 5
43660: IN
43661: OR
43662: PUSH
43663: LD_INT 45
43665: PUSH
43666: LD_VAR 0 5
43670: IN
43671: OR
43672: AND
43673: IFFALSE 43927
// begin hex := GetHexInfo ( x , y ) ;
43675: LD_ADDR_VAR 0 4
43679: PUSH
43680: LD_VAR 0 10
43684: PPUSH
43685: LD_VAR 0 11
43689: PPUSH
43690: CALL_OW 546
43694: ST_TO_ADDR
// if hex [ 1 ] then
43695: LD_VAR 0 4
43699: PUSH
43700: LD_INT 1
43702: ARRAY
43703: IFFALSE 43707
// exit ;
43705: GO 44110
// height := hex [ 2 ] ;
43707: LD_ADDR_VAR 0 15
43711: PUSH
43712: LD_VAR 0 4
43716: PUSH
43717: LD_INT 2
43719: ARRAY
43720: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43721: LD_ADDR_VAR 0 14
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 3
43734: PUSH
43735: LD_INT 5
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
// for i in tmp do
43744: LD_ADDR_VAR 0 8
43748: PUSH
43749: LD_VAR 0 14
43753: PUSH
43754: FOR_IN
43755: IFFALSE 43925
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43757: LD_ADDR_VAR 0 9
43761: PUSH
43762: LD_VAR 0 10
43766: PPUSH
43767: LD_VAR 0 8
43771: PPUSH
43772: LD_INT 5
43774: PPUSH
43775: CALL_OW 272
43779: PUSH
43780: LD_VAR 0 11
43784: PPUSH
43785: LD_VAR 0 8
43789: PPUSH
43790: LD_INT 5
43792: PPUSH
43793: CALL_OW 273
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43802: LD_VAR 0 9
43806: PUSH
43807: LD_INT 1
43809: ARRAY
43810: PPUSH
43811: LD_VAR 0 9
43815: PUSH
43816: LD_INT 2
43818: ARRAY
43819: PPUSH
43820: CALL_OW 488
43824: IFFALSE 43923
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43826: LD_ADDR_VAR 0 4
43830: PUSH
43831: LD_VAR 0 9
43835: PUSH
43836: LD_INT 1
43838: ARRAY
43839: PPUSH
43840: LD_VAR 0 9
43844: PUSH
43845: LD_INT 2
43847: ARRAY
43848: PPUSH
43849: CALL_OW 546
43853: ST_TO_ADDR
// if hex [ 1 ] then
43854: LD_VAR 0 4
43858: PUSH
43859: LD_INT 1
43861: ARRAY
43862: IFFALSE 43866
// continue ;
43864: GO 43754
// h := hex [ 2 ] ;
43866: LD_ADDR_VAR 0 13
43870: PUSH
43871: LD_VAR 0 4
43875: PUSH
43876: LD_INT 2
43878: ARRAY
43879: ST_TO_ADDR
// if h + 7 < height then
43880: LD_VAR 0 13
43884: PUSH
43885: LD_INT 7
43887: PLUS
43888: PUSH
43889: LD_VAR 0 15
43893: LESS
43894: IFFALSE 43923
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43896: LD_ADDR_VAR 0 18
43900: PUSH
43901: LD_INT 7
43903: PUSH
43904: LD_INT 28
43906: PUSH
43907: LD_INT 45
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: PUSH
43915: LD_VAR 0 12
43919: ARRAY
43920: ST_TO_ADDR
// break ;
43921: GO 43925
// end ; end ; end ;
43923: GO 43754
43925: POP
43926: POP
// end ; if not weapon then
43927: LD_VAR 0 18
43931: NOT
43932: IFFALSE 43992
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43934: LD_ADDR_VAR 0 5
43938: PUSH
43939: LD_VAR 0 5
43943: PUSH
43944: LD_INT 11
43946: PUSH
43947: LD_INT 30
43949: PUSH
43950: LD_INT 49
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: DIFF
43958: ST_TO_ADDR
// if not list then
43959: LD_VAR 0 5
43963: NOT
43964: IFFALSE 43968
// exit ;
43966: GO 44110
// weapon := list [ rand ( 1 , list ) ] ;
43968: LD_ADDR_VAR 0 18
43972: PUSH
43973: LD_VAR 0 5
43977: PUSH
43978: LD_INT 1
43980: PPUSH
43981: LD_VAR 0 5
43985: PPUSH
43986: CALL_OW 12
43990: ARRAY
43991: ST_TO_ADDR
// end ; if weapon then
43992: LD_VAR 0 18
43996: IFFALSE 44110
// begin tmp := CostOfWeapon ( weapon ) ;
43998: LD_ADDR_VAR 0 14
44002: PUSH
44003: LD_VAR 0 18
44007: PPUSH
44008: CALL_OW 451
44012: ST_TO_ADDR
// j := GetBase ( tower ) ;
44013: LD_ADDR_VAR 0 9
44017: PUSH
44018: LD_VAR 0 1
44022: PPUSH
44023: CALL_OW 274
44027: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44028: LD_VAR 0 9
44032: PPUSH
44033: LD_INT 1
44035: PPUSH
44036: CALL_OW 275
44040: PUSH
44041: LD_VAR 0 14
44045: PUSH
44046: LD_INT 1
44048: ARRAY
44049: GREATEREQUAL
44050: PUSH
44051: LD_VAR 0 9
44055: PPUSH
44056: LD_INT 2
44058: PPUSH
44059: CALL_OW 275
44063: PUSH
44064: LD_VAR 0 14
44068: PUSH
44069: LD_INT 2
44071: ARRAY
44072: GREATEREQUAL
44073: AND
44074: PUSH
44075: LD_VAR 0 9
44079: PPUSH
44080: LD_INT 3
44082: PPUSH
44083: CALL_OW 275
44087: PUSH
44088: LD_VAR 0 14
44092: PUSH
44093: LD_INT 3
44095: ARRAY
44096: GREATEREQUAL
44097: AND
44098: IFFALSE 44110
// result := weapon ;
44100: LD_ADDR_VAR 0 3
44104: PUSH
44105: LD_VAR 0 18
44109: ST_TO_ADDR
// end ; end ;
44110: LD_VAR 0 3
44114: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44115: LD_INT 0
44117: PPUSH
44118: PPUSH
// result := true ;
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_INT 1
44126: ST_TO_ADDR
// if array1 = array2 then
44127: LD_VAR 0 1
44131: PUSH
44132: LD_VAR 0 2
44136: EQUAL
44137: IFFALSE 44197
// begin for i = 1 to array1 do
44139: LD_ADDR_VAR 0 4
44143: PUSH
44144: DOUBLE
44145: LD_INT 1
44147: DEC
44148: ST_TO_ADDR
44149: LD_VAR 0 1
44153: PUSH
44154: FOR_TO
44155: IFFALSE 44193
// if array1 [ i ] <> array2 [ i ] then
44157: LD_VAR 0 1
44161: PUSH
44162: LD_VAR 0 4
44166: ARRAY
44167: PUSH
44168: LD_VAR 0 2
44172: PUSH
44173: LD_VAR 0 4
44177: ARRAY
44178: NONEQUAL
44179: IFFALSE 44191
// begin result := false ;
44181: LD_ADDR_VAR 0 3
44185: PUSH
44186: LD_INT 0
44188: ST_TO_ADDR
// break ;
44189: GO 44193
// end ;
44191: GO 44154
44193: POP
44194: POP
// end else
44195: GO 44205
// result := false ;
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: LD_INT 0
44204: ST_TO_ADDR
// end ;
44205: LD_VAR 0 3
44209: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44210: LD_INT 0
44212: PPUSH
44213: PPUSH
// if not array1 or not array2 then
44214: LD_VAR 0 1
44218: NOT
44219: PUSH
44220: LD_VAR 0 2
44224: NOT
44225: OR
44226: IFFALSE 44230
// exit ;
44228: GO 44294
// result := true ;
44230: LD_ADDR_VAR 0 3
44234: PUSH
44235: LD_INT 1
44237: ST_TO_ADDR
// for i = 1 to array1 do
44238: LD_ADDR_VAR 0 4
44242: PUSH
44243: DOUBLE
44244: LD_INT 1
44246: DEC
44247: ST_TO_ADDR
44248: LD_VAR 0 1
44252: PUSH
44253: FOR_TO
44254: IFFALSE 44292
// if array1 [ i ] <> array2 [ i ] then
44256: LD_VAR 0 1
44260: PUSH
44261: LD_VAR 0 4
44265: ARRAY
44266: PUSH
44267: LD_VAR 0 2
44271: PUSH
44272: LD_VAR 0 4
44276: ARRAY
44277: NONEQUAL
44278: IFFALSE 44290
// begin result := false ;
44280: LD_ADDR_VAR 0 3
44284: PUSH
44285: LD_INT 0
44287: ST_TO_ADDR
// break ;
44288: GO 44292
// end ;
44290: GO 44253
44292: POP
44293: POP
// end ;
44294: LD_VAR 0 3
44298: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44299: LD_INT 0
44301: PPUSH
44302: PPUSH
44303: PPUSH
// pom := GetBase ( fac ) ;
44304: LD_ADDR_VAR 0 5
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: CALL_OW 274
44318: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44319: LD_ADDR_VAR 0 4
44323: PUSH
44324: LD_VAR 0 2
44328: PUSH
44329: LD_INT 1
44331: ARRAY
44332: PPUSH
44333: LD_VAR 0 2
44337: PUSH
44338: LD_INT 2
44340: ARRAY
44341: PPUSH
44342: LD_VAR 0 2
44346: PUSH
44347: LD_INT 3
44349: ARRAY
44350: PPUSH
44351: LD_VAR 0 2
44355: PUSH
44356: LD_INT 4
44358: ARRAY
44359: PPUSH
44360: CALL_OW 449
44364: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44365: LD_ADDR_VAR 0 3
44369: PUSH
44370: LD_VAR 0 5
44374: PPUSH
44375: LD_INT 1
44377: PPUSH
44378: CALL_OW 275
44382: PUSH
44383: LD_VAR 0 4
44387: PUSH
44388: LD_INT 1
44390: ARRAY
44391: GREATEREQUAL
44392: PUSH
44393: LD_VAR 0 5
44397: PPUSH
44398: LD_INT 2
44400: PPUSH
44401: CALL_OW 275
44405: PUSH
44406: LD_VAR 0 4
44410: PUSH
44411: LD_INT 2
44413: ARRAY
44414: GREATEREQUAL
44415: AND
44416: PUSH
44417: LD_VAR 0 5
44421: PPUSH
44422: LD_INT 3
44424: PPUSH
44425: CALL_OW 275
44429: PUSH
44430: LD_VAR 0 4
44434: PUSH
44435: LD_INT 3
44437: ARRAY
44438: GREATEREQUAL
44439: AND
44440: ST_TO_ADDR
// end ;
44441: LD_VAR 0 3
44445: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44446: LD_INT 0
44448: PPUSH
44449: PPUSH
44450: PPUSH
44451: PPUSH
// pom := GetBase ( building ) ;
44452: LD_ADDR_VAR 0 3
44456: PUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 274
44466: ST_TO_ADDR
// if not pom then
44467: LD_VAR 0 3
44471: NOT
44472: IFFALSE 44476
// exit ;
44474: GO 44646
// btype := GetBType ( building ) ;
44476: LD_ADDR_VAR 0 5
44480: PUSH
44481: LD_VAR 0 1
44485: PPUSH
44486: CALL_OW 266
44490: ST_TO_ADDR
// if btype = b_armoury then
44491: LD_VAR 0 5
44495: PUSH
44496: LD_INT 4
44498: EQUAL
44499: IFFALSE 44509
// btype := b_barracks ;
44501: LD_ADDR_VAR 0 5
44505: PUSH
44506: LD_INT 5
44508: ST_TO_ADDR
// if btype = b_depot then
44509: LD_VAR 0 5
44513: PUSH
44514: LD_INT 0
44516: EQUAL
44517: IFFALSE 44527
// btype := b_warehouse ;
44519: LD_ADDR_VAR 0 5
44523: PUSH
44524: LD_INT 1
44526: ST_TO_ADDR
// if btype = b_workshop then
44527: LD_VAR 0 5
44531: PUSH
44532: LD_INT 2
44534: EQUAL
44535: IFFALSE 44545
// btype := b_factory ;
44537: LD_ADDR_VAR 0 5
44541: PUSH
44542: LD_INT 3
44544: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44545: LD_ADDR_VAR 0 4
44549: PUSH
44550: LD_VAR 0 5
44554: PPUSH
44555: LD_VAR 0 1
44559: PPUSH
44560: CALL_OW 248
44564: PPUSH
44565: CALL_OW 450
44569: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44570: LD_ADDR_VAR 0 2
44574: PUSH
44575: LD_VAR 0 3
44579: PPUSH
44580: LD_INT 1
44582: PPUSH
44583: CALL_OW 275
44587: PUSH
44588: LD_VAR 0 4
44592: PUSH
44593: LD_INT 1
44595: ARRAY
44596: GREATEREQUAL
44597: PUSH
44598: LD_VAR 0 3
44602: PPUSH
44603: LD_INT 2
44605: PPUSH
44606: CALL_OW 275
44610: PUSH
44611: LD_VAR 0 4
44615: PUSH
44616: LD_INT 2
44618: ARRAY
44619: GREATEREQUAL
44620: AND
44621: PUSH
44622: LD_VAR 0 3
44626: PPUSH
44627: LD_INT 3
44629: PPUSH
44630: CALL_OW 275
44634: PUSH
44635: LD_VAR 0 4
44639: PUSH
44640: LD_INT 3
44642: ARRAY
44643: GREATEREQUAL
44644: AND
44645: ST_TO_ADDR
// end ;
44646: LD_VAR 0 2
44650: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44651: LD_INT 0
44653: PPUSH
44654: PPUSH
44655: PPUSH
// pom := GetBase ( building ) ;
44656: LD_ADDR_VAR 0 4
44660: PUSH
44661: LD_VAR 0 1
44665: PPUSH
44666: CALL_OW 274
44670: ST_TO_ADDR
// if not pom then
44671: LD_VAR 0 4
44675: NOT
44676: IFFALSE 44680
// exit ;
44678: GO 44781
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44680: LD_ADDR_VAR 0 5
44684: PUSH
44685: LD_VAR 0 2
44689: PPUSH
44690: LD_VAR 0 1
44694: PPUSH
44695: CALL_OW 248
44699: PPUSH
44700: CALL_OW 450
44704: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44705: LD_ADDR_VAR 0 3
44709: PUSH
44710: LD_VAR 0 4
44714: PPUSH
44715: LD_INT 1
44717: PPUSH
44718: CALL_OW 275
44722: PUSH
44723: LD_VAR 0 5
44727: PUSH
44728: LD_INT 1
44730: ARRAY
44731: GREATEREQUAL
44732: PUSH
44733: LD_VAR 0 4
44737: PPUSH
44738: LD_INT 2
44740: PPUSH
44741: CALL_OW 275
44745: PUSH
44746: LD_VAR 0 5
44750: PUSH
44751: LD_INT 2
44753: ARRAY
44754: GREATEREQUAL
44755: AND
44756: PUSH
44757: LD_VAR 0 4
44761: PPUSH
44762: LD_INT 3
44764: PPUSH
44765: CALL_OW 275
44769: PUSH
44770: LD_VAR 0 5
44774: PUSH
44775: LD_INT 3
44777: ARRAY
44778: GREATEREQUAL
44779: AND
44780: ST_TO_ADDR
// end ;
44781: LD_VAR 0 3
44785: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44786: LD_INT 0
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
44798: PPUSH
// result := false ;
44799: LD_ADDR_VAR 0 8
44803: PUSH
44804: LD_INT 0
44806: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44807: LD_VAR 0 5
44811: NOT
44812: PUSH
44813: LD_VAR 0 1
44817: NOT
44818: OR
44819: PUSH
44820: LD_VAR 0 2
44824: NOT
44825: OR
44826: PUSH
44827: LD_VAR 0 3
44831: NOT
44832: OR
44833: IFFALSE 44837
// exit ;
44835: GO 45651
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44837: LD_ADDR_VAR 0 14
44841: PUSH
44842: LD_VAR 0 1
44846: PPUSH
44847: LD_VAR 0 2
44851: PPUSH
44852: LD_VAR 0 3
44856: PPUSH
44857: LD_VAR 0 4
44861: PPUSH
44862: LD_VAR 0 5
44866: PUSH
44867: LD_INT 1
44869: ARRAY
44870: PPUSH
44871: CALL_OW 248
44875: PPUSH
44876: LD_INT 0
44878: PPUSH
44879: CALL 46888 0 6
44883: ST_TO_ADDR
// if not hexes then
44884: LD_VAR 0 14
44888: NOT
44889: IFFALSE 44893
// exit ;
44891: GO 45651
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44893: LD_ADDR_VAR 0 17
44897: PUSH
44898: LD_VAR 0 5
44902: PPUSH
44903: LD_INT 22
44905: PUSH
44906: LD_VAR 0 13
44910: PPUSH
44911: CALL_OW 255
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 30
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 30
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PPUSH
44952: CALL_OW 72
44956: ST_TO_ADDR
// for i = 1 to hexes do
44957: LD_ADDR_VAR 0 9
44961: PUSH
44962: DOUBLE
44963: LD_INT 1
44965: DEC
44966: ST_TO_ADDR
44967: LD_VAR 0 14
44971: PUSH
44972: FOR_TO
44973: IFFALSE 45649
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44975: LD_ADDR_VAR 0 13
44979: PUSH
44980: LD_VAR 0 14
44984: PUSH
44985: LD_VAR 0 9
44989: ARRAY
44990: PUSH
44991: LD_INT 1
44993: ARRAY
44994: PPUSH
44995: LD_VAR 0 14
44999: PUSH
45000: LD_VAR 0 9
45004: ARRAY
45005: PUSH
45006: LD_INT 2
45008: ARRAY
45009: PPUSH
45010: CALL_OW 428
45014: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45015: LD_VAR 0 14
45019: PUSH
45020: LD_VAR 0 9
45024: ARRAY
45025: PUSH
45026: LD_INT 1
45028: ARRAY
45029: PPUSH
45030: LD_VAR 0 14
45034: PUSH
45035: LD_VAR 0 9
45039: ARRAY
45040: PUSH
45041: LD_INT 2
45043: ARRAY
45044: PPUSH
45045: CALL_OW 351
45049: PUSH
45050: LD_VAR 0 14
45054: PUSH
45055: LD_VAR 0 9
45059: ARRAY
45060: PUSH
45061: LD_INT 1
45063: ARRAY
45064: PPUSH
45065: LD_VAR 0 14
45069: PUSH
45070: LD_VAR 0 9
45074: ARRAY
45075: PUSH
45076: LD_INT 2
45078: ARRAY
45079: PPUSH
45080: CALL_OW 488
45084: NOT
45085: OR
45086: PUSH
45087: LD_VAR 0 13
45091: PPUSH
45092: CALL_OW 247
45096: PUSH
45097: LD_INT 3
45099: EQUAL
45100: OR
45101: IFFALSE 45107
// exit ;
45103: POP
45104: POP
45105: GO 45651
// if not tmp then
45107: LD_VAR 0 13
45111: NOT
45112: IFFALSE 45116
// continue ;
45114: GO 44972
// result := true ;
45116: LD_ADDR_VAR 0 8
45120: PUSH
45121: LD_INT 1
45123: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45124: LD_VAR 0 6
45128: PUSH
45129: LD_VAR 0 13
45133: PPUSH
45134: CALL_OW 247
45138: PUSH
45139: LD_INT 2
45141: EQUAL
45142: AND
45143: PUSH
45144: LD_VAR 0 13
45148: PPUSH
45149: CALL_OW 263
45153: PUSH
45154: LD_INT 1
45156: EQUAL
45157: AND
45158: IFFALSE 45322
// begin if IsDrivenBy ( tmp ) then
45160: LD_VAR 0 13
45164: PPUSH
45165: CALL_OW 311
45169: IFFALSE 45173
// continue ;
45171: GO 44972
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45173: LD_VAR 0 6
45177: PPUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 60
45183: PUSH
45184: EMPTY
45185: LIST
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 3
45193: PUSH
45194: LD_INT 55
45196: PUSH
45197: EMPTY
45198: LIST
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PPUSH
45208: CALL_OW 72
45212: IFFALSE 45320
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45214: LD_ADDR_VAR 0 18
45218: PUSH
45219: LD_VAR 0 6
45223: PPUSH
45224: LD_INT 3
45226: PUSH
45227: LD_INT 60
45229: PUSH
45230: EMPTY
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 55
45242: PUSH
45243: EMPTY
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PPUSH
45254: CALL_OW 72
45258: PUSH
45259: LD_INT 1
45261: ARRAY
45262: ST_TO_ADDR
// if IsInUnit ( driver ) then
45263: LD_VAR 0 18
45267: PPUSH
45268: CALL_OW 310
45272: IFFALSE 45283
// ComExit ( driver ) ;
45274: LD_VAR 0 18
45278: PPUSH
45279: CALL 70072 0 1
// AddComEnterUnit ( driver , tmp ) ;
45283: LD_VAR 0 18
45287: PPUSH
45288: LD_VAR 0 13
45292: PPUSH
45293: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45297: LD_VAR 0 18
45301: PPUSH
45302: LD_VAR 0 7
45306: PPUSH
45307: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45311: LD_VAR 0 18
45315: PPUSH
45316: CALL_OW 181
// end ; continue ;
45320: GO 44972
// end ; if not cleaners or not tmp in cleaners then
45322: LD_VAR 0 6
45326: NOT
45327: PUSH
45328: LD_VAR 0 13
45332: PUSH
45333: LD_VAR 0 6
45337: IN
45338: NOT
45339: OR
45340: IFFALSE 45647
// begin if dep then
45342: LD_VAR 0 17
45346: IFFALSE 45482
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45348: LD_ADDR_VAR 0 16
45352: PUSH
45353: LD_VAR 0 17
45357: PUSH
45358: LD_INT 1
45360: ARRAY
45361: PPUSH
45362: CALL_OW 250
45366: PPUSH
45367: LD_VAR 0 17
45371: PUSH
45372: LD_INT 1
45374: ARRAY
45375: PPUSH
45376: CALL_OW 254
45380: PPUSH
45381: LD_INT 5
45383: PPUSH
45384: CALL_OW 272
45388: PUSH
45389: LD_VAR 0 17
45393: PUSH
45394: LD_INT 1
45396: ARRAY
45397: PPUSH
45398: CALL_OW 251
45402: PPUSH
45403: LD_VAR 0 17
45407: PUSH
45408: LD_INT 1
45410: ARRAY
45411: PPUSH
45412: CALL_OW 254
45416: PPUSH
45417: LD_INT 5
45419: PPUSH
45420: CALL_OW 273
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45429: LD_VAR 0 16
45433: PUSH
45434: LD_INT 1
45436: ARRAY
45437: PPUSH
45438: LD_VAR 0 16
45442: PUSH
45443: LD_INT 2
45445: ARRAY
45446: PPUSH
45447: CALL_OW 488
45451: IFFALSE 45482
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45453: LD_VAR 0 13
45457: PPUSH
45458: LD_VAR 0 16
45462: PUSH
45463: LD_INT 1
45465: ARRAY
45466: PPUSH
45467: LD_VAR 0 16
45471: PUSH
45472: LD_INT 2
45474: ARRAY
45475: PPUSH
45476: CALL_OW 111
// continue ;
45480: GO 44972
// end ; end ; r := GetDir ( tmp ) ;
45482: LD_ADDR_VAR 0 15
45486: PUSH
45487: LD_VAR 0 13
45491: PPUSH
45492: CALL_OW 254
45496: ST_TO_ADDR
// if r = 5 then
45497: LD_VAR 0 15
45501: PUSH
45502: LD_INT 5
45504: EQUAL
45505: IFFALSE 45515
// r := 0 ;
45507: LD_ADDR_VAR 0 15
45511: PUSH
45512: LD_INT 0
45514: ST_TO_ADDR
// for j = r to 5 do
45515: LD_ADDR_VAR 0 10
45519: PUSH
45520: DOUBLE
45521: LD_VAR 0 15
45525: DEC
45526: ST_TO_ADDR
45527: LD_INT 5
45529: PUSH
45530: FOR_TO
45531: IFFALSE 45645
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45533: LD_ADDR_VAR 0 11
45537: PUSH
45538: LD_VAR 0 13
45542: PPUSH
45543: CALL_OW 250
45547: PPUSH
45548: LD_VAR 0 10
45552: PPUSH
45553: LD_INT 2
45555: PPUSH
45556: CALL_OW 272
45560: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45561: LD_ADDR_VAR 0 12
45565: PUSH
45566: LD_VAR 0 13
45570: PPUSH
45571: CALL_OW 251
45575: PPUSH
45576: LD_VAR 0 10
45580: PPUSH
45581: LD_INT 2
45583: PPUSH
45584: CALL_OW 273
45588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45589: LD_VAR 0 11
45593: PPUSH
45594: LD_VAR 0 12
45598: PPUSH
45599: CALL_OW 488
45603: PUSH
45604: LD_VAR 0 11
45608: PPUSH
45609: LD_VAR 0 12
45613: PPUSH
45614: CALL_OW 428
45618: NOT
45619: AND
45620: IFFALSE 45643
// begin ComMoveXY ( tmp , _x , _y ) ;
45622: LD_VAR 0 13
45626: PPUSH
45627: LD_VAR 0 11
45631: PPUSH
45632: LD_VAR 0 12
45636: PPUSH
45637: CALL_OW 111
// break ;
45641: GO 45645
// end ; end ;
45643: GO 45530
45645: POP
45646: POP
// end ; end ;
45647: GO 44972
45649: POP
45650: POP
// end ;
45651: LD_VAR 0 8
45655: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45656: LD_INT 0
45658: PPUSH
// result := true ;
45659: LD_ADDR_VAR 0 3
45663: PUSH
45664: LD_INT 1
45666: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45667: LD_VAR 0 2
45671: PUSH
45672: LD_INT 24
45674: DOUBLE
45675: EQUAL
45676: IFTRUE 45686
45678: LD_INT 33
45680: DOUBLE
45681: EQUAL
45682: IFTRUE 45686
45684: GO 45711
45686: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45687: LD_ADDR_VAR 0 3
45691: PUSH
45692: LD_INT 32
45694: PPUSH
45695: LD_VAR 0 1
45699: PPUSH
45700: CALL_OW 321
45704: PUSH
45705: LD_INT 2
45707: EQUAL
45708: ST_TO_ADDR
45709: GO 46031
45711: LD_INT 20
45713: DOUBLE
45714: EQUAL
45715: IFTRUE 45719
45717: GO 45744
45719: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45720: LD_ADDR_VAR 0 3
45724: PUSH
45725: LD_INT 6
45727: PPUSH
45728: LD_VAR 0 1
45732: PPUSH
45733: CALL_OW 321
45737: PUSH
45738: LD_INT 2
45740: EQUAL
45741: ST_TO_ADDR
45742: GO 46031
45744: LD_INT 22
45746: DOUBLE
45747: EQUAL
45748: IFTRUE 45758
45750: LD_INT 36
45752: DOUBLE
45753: EQUAL
45754: IFTRUE 45758
45756: GO 45783
45758: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45759: LD_ADDR_VAR 0 3
45763: PUSH
45764: LD_INT 15
45766: PPUSH
45767: LD_VAR 0 1
45771: PPUSH
45772: CALL_OW 321
45776: PUSH
45777: LD_INT 2
45779: EQUAL
45780: ST_TO_ADDR
45781: GO 46031
45783: LD_INT 30
45785: DOUBLE
45786: EQUAL
45787: IFTRUE 45791
45789: GO 45816
45791: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45792: LD_ADDR_VAR 0 3
45796: PUSH
45797: LD_INT 20
45799: PPUSH
45800: LD_VAR 0 1
45804: PPUSH
45805: CALL_OW 321
45809: PUSH
45810: LD_INT 2
45812: EQUAL
45813: ST_TO_ADDR
45814: GO 46031
45816: LD_INT 28
45818: DOUBLE
45819: EQUAL
45820: IFTRUE 45830
45822: LD_INT 21
45824: DOUBLE
45825: EQUAL
45826: IFTRUE 45830
45828: GO 45855
45830: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45831: LD_ADDR_VAR 0 3
45835: PUSH
45836: LD_INT 21
45838: PPUSH
45839: LD_VAR 0 1
45843: PPUSH
45844: CALL_OW 321
45848: PUSH
45849: LD_INT 2
45851: EQUAL
45852: ST_TO_ADDR
45853: GO 46031
45855: LD_INT 16
45857: DOUBLE
45858: EQUAL
45859: IFTRUE 45863
45861: GO 45890
45863: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45864: LD_ADDR_VAR 0 3
45868: PUSH
45869: LD_EXP 50
45873: PPUSH
45874: LD_VAR 0 1
45878: PPUSH
45879: CALL_OW 321
45883: PUSH
45884: LD_INT 2
45886: EQUAL
45887: ST_TO_ADDR
45888: GO 46031
45890: LD_INT 19
45892: DOUBLE
45893: EQUAL
45894: IFTRUE 45904
45896: LD_INT 23
45898: DOUBLE
45899: EQUAL
45900: IFTRUE 45904
45902: GO 45931
45904: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45905: LD_ADDR_VAR 0 3
45909: PUSH
45910: LD_EXP 49
45914: PPUSH
45915: LD_VAR 0 1
45919: PPUSH
45920: CALL_OW 321
45924: PUSH
45925: LD_INT 2
45927: EQUAL
45928: ST_TO_ADDR
45929: GO 46031
45931: LD_INT 17
45933: DOUBLE
45934: EQUAL
45935: IFTRUE 45939
45937: GO 45964
45939: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45940: LD_ADDR_VAR 0 3
45944: PUSH
45945: LD_INT 39
45947: PPUSH
45948: LD_VAR 0 1
45952: PPUSH
45953: CALL_OW 321
45957: PUSH
45958: LD_INT 2
45960: EQUAL
45961: ST_TO_ADDR
45962: GO 46031
45964: LD_INT 18
45966: DOUBLE
45967: EQUAL
45968: IFTRUE 45972
45970: GO 45997
45972: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45973: LD_ADDR_VAR 0 3
45977: PUSH
45978: LD_INT 40
45980: PPUSH
45981: LD_VAR 0 1
45985: PPUSH
45986: CALL_OW 321
45990: PUSH
45991: LD_INT 2
45993: EQUAL
45994: ST_TO_ADDR
45995: GO 46031
45997: LD_INT 27
45999: DOUBLE
46000: EQUAL
46001: IFTRUE 46005
46003: GO 46030
46005: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46006: LD_ADDR_VAR 0 3
46010: PUSH
46011: LD_INT 35
46013: PPUSH
46014: LD_VAR 0 1
46018: PPUSH
46019: CALL_OW 321
46023: PUSH
46024: LD_INT 2
46026: EQUAL
46027: ST_TO_ADDR
46028: GO 46031
46030: POP
// end ;
46031: LD_VAR 0 3
46035: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46036: LD_INT 0
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
// result := false ;
46049: LD_ADDR_VAR 0 6
46053: PUSH
46054: LD_INT 0
46056: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46057: LD_VAR 0 1
46061: NOT
46062: PUSH
46063: LD_VAR 0 1
46067: PPUSH
46068: CALL_OW 266
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: IN
46083: NOT
46084: OR
46085: PUSH
46086: LD_VAR 0 2
46090: NOT
46091: OR
46092: PUSH
46093: LD_VAR 0 5
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: LD_INT 3
46109: PUSH
46110: LD_INT 4
46112: PUSH
46113: LD_INT 5
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: IN
46124: NOT
46125: OR
46126: PUSH
46127: LD_VAR 0 3
46131: PPUSH
46132: LD_VAR 0 4
46136: PPUSH
46137: CALL_OW 488
46141: NOT
46142: OR
46143: IFFALSE 46147
// exit ;
46145: GO 46883
// side := GetSide ( depot ) ;
46147: LD_ADDR_VAR 0 9
46151: PUSH
46152: LD_VAR 0 1
46156: PPUSH
46157: CALL_OW 255
46161: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46162: LD_VAR 0 9
46166: PPUSH
46167: LD_VAR 0 2
46171: PPUSH
46172: CALL 45656 0 2
46176: NOT
46177: IFFALSE 46181
// exit ;
46179: GO 46883
// pom := GetBase ( depot ) ;
46181: LD_ADDR_VAR 0 10
46185: PUSH
46186: LD_VAR 0 1
46190: PPUSH
46191: CALL_OW 274
46195: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46196: LD_ADDR_VAR 0 11
46200: PUSH
46201: LD_VAR 0 2
46205: PPUSH
46206: LD_VAR 0 1
46210: PPUSH
46211: CALL_OW 248
46215: PPUSH
46216: CALL_OW 450
46220: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46221: LD_VAR 0 10
46225: PPUSH
46226: LD_INT 1
46228: PPUSH
46229: CALL_OW 275
46233: PUSH
46234: LD_VAR 0 11
46238: PUSH
46239: LD_INT 1
46241: ARRAY
46242: GREATEREQUAL
46243: PUSH
46244: LD_VAR 0 10
46248: PPUSH
46249: LD_INT 2
46251: PPUSH
46252: CALL_OW 275
46256: PUSH
46257: LD_VAR 0 11
46261: PUSH
46262: LD_INT 2
46264: ARRAY
46265: GREATEREQUAL
46266: AND
46267: PUSH
46268: LD_VAR 0 10
46272: PPUSH
46273: LD_INT 3
46275: PPUSH
46276: CALL_OW 275
46280: PUSH
46281: LD_VAR 0 11
46285: PUSH
46286: LD_INT 3
46288: ARRAY
46289: GREATEREQUAL
46290: AND
46291: NOT
46292: IFFALSE 46296
// exit ;
46294: GO 46883
// if GetBType ( depot ) = b_depot then
46296: LD_VAR 0 1
46300: PPUSH
46301: CALL_OW 266
46305: PUSH
46306: LD_INT 0
46308: EQUAL
46309: IFFALSE 46321
// dist := 28 else
46311: LD_ADDR_VAR 0 14
46315: PUSH
46316: LD_INT 28
46318: ST_TO_ADDR
46319: GO 46329
// dist := 36 ;
46321: LD_ADDR_VAR 0 14
46325: PUSH
46326: LD_INT 36
46328: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46329: LD_VAR 0 1
46333: PPUSH
46334: LD_VAR 0 3
46338: PPUSH
46339: LD_VAR 0 4
46343: PPUSH
46344: CALL_OW 297
46348: PUSH
46349: LD_VAR 0 14
46353: GREATER
46354: IFFALSE 46358
// exit ;
46356: GO 46883
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46358: LD_ADDR_VAR 0 12
46362: PUSH
46363: LD_VAR 0 2
46367: PPUSH
46368: LD_VAR 0 3
46372: PPUSH
46373: LD_VAR 0 4
46377: PPUSH
46378: LD_VAR 0 5
46382: PPUSH
46383: LD_VAR 0 1
46387: PPUSH
46388: CALL_OW 248
46392: PPUSH
46393: LD_INT 0
46395: PPUSH
46396: CALL 46888 0 6
46400: ST_TO_ADDR
// if not hexes then
46401: LD_VAR 0 12
46405: NOT
46406: IFFALSE 46410
// exit ;
46408: GO 46883
// hex := GetHexInfo ( x , y ) ;
46410: LD_ADDR_VAR 0 15
46414: PUSH
46415: LD_VAR 0 3
46419: PPUSH
46420: LD_VAR 0 4
46424: PPUSH
46425: CALL_OW 546
46429: ST_TO_ADDR
// if hex [ 1 ] then
46430: LD_VAR 0 15
46434: PUSH
46435: LD_INT 1
46437: ARRAY
46438: IFFALSE 46442
// exit ;
46440: GO 46883
// height := hex [ 2 ] ;
46442: LD_ADDR_VAR 0 13
46446: PUSH
46447: LD_VAR 0 15
46451: PUSH
46452: LD_INT 2
46454: ARRAY
46455: ST_TO_ADDR
// for i = 1 to hexes do
46456: LD_ADDR_VAR 0 7
46460: PUSH
46461: DOUBLE
46462: LD_INT 1
46464: DEC
46465: ST_TO_ADDR
46466: LD_VAR 0 12
46470: PUSH
46471: FOR_TO
46472: IFFALSE 46802
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46474: LD_VAR 0 12
46478: PUSH
46479: LD_VAR 0 7
46483: ARRAY
46484: PUSH
46485: LD_INT 1
46487: ARRAY
46488: PPUSH
46489: LD_VAR 0 12
46493: PUSH
46494: LD_VAR 0 7
46498: ARRAY
46499: PUSH
46500: LD_INT 2
46502: ARRAY
46503: PPUSH
46504: CALL_OW 488
46508: NOT
46509: PUSH
46510: LD_VAR 0 12
46514: PUSH
46515: LD_VAR 0 7
46519: ARRAY
46520: PUSH
46521: LD_INT 1
46523: ARRAY
46524: PPUSH
46525: LD_VAR 0 12
46529: PUSH
46530: LD_VAR 0 7
46534: ARRAY
46535: PUSH
46536: LD_INT 2
46538: ARRAY
46539: PPUSH
46540: CALL_OW 428
46544: PUSH
46545: LD_INT 0
46547: GREATER
46548: OR
46549: PUSH
46550: LD_VAR 0 12
46554: PUSH
46555: LD_VAR 0 7
46559: ARRAY
46560: PUSH
46561: LD_INT 1
46563: ARRAY
46564: PPUSH
46565: LD_VAR 0 12
46569: PUSH
46570: LD_VAR 0 7
46574: ARRAY
46575: PUSH
46576: LD_INT 2
46578: ARRAY
46579: PPUSH
46580: CALL_OW 351
46584: OR
46585: IFFALSE 46591
// exit ;
46587: POP
46588: POP
46589: GO 46883
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46591: LD_ADDR_VAR 0 8
46595: PUSH
46596: LD_VAR 0 12
46600: PUSH
46601: LD_VAR 0 7
46605: ARRAY
46606: PUSH
46607: LD_INT 1
46609: ARRAY
46610: PPUSH
46611: LD_VAR 0 12
46615: PUSH
46616: LD_VAR 0 7
46620: ARRAY
46621: PUSH
46622: LD_INT 2
46624: ARRAY
46625: PPUSH
46626: CALL_OW 546
46630: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46631: LD_VAR 0 8
46635: PUSH
46636: LD_INT 1
46638: ARRAY
46639: PUSH
46640: LD_VAR 0 8
46644: PUSH
46645: LD_INT 2
46647: ARRAY
46648: PUSH
46649: LD_VAR 0 13
46653: PUSH
46654: LD_INT 2
46656: PLUS
46657: GREATER
46658: OR
46659: PUSH
46660: LD_VAR 0 8
46664: PUSH
46665: LD_INT 2
46667: ARRAY
46668: PUSH
46669: LD_VAR 0 13
46673: PUSH
46674: LD_INT 2
46676: MINUS
46677: LESS
46678: OR
46679: PUSH
46680: LD_VAR 0 8
46684: PUSH
46685: LD_INT 3
46687: ARRAY
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 8
46694: PUSH
46695: LD_INT 9
46697: PUSH
46698: LD_INT 10
46700: PUSH
46701: LD_INT 11
46703: PUSH
46704: LD_INT 12
46706: PUSH
46707: LD_INT 13
46709: PUSH
46710: LD_INT 16
46712: PUSH
46713: LD_INT 17
46715: PUSH
46716: LD_INT 18
46718: PUSH
46719: LD_INT 19
46721: PUSH
46722: LD_INT 20
46724: PUSH
46725: LD_INT 21
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: IN
46743: NOT
46744: OR
46745: PUSH
46746: LD_VAR 0 8
46750: PUSH
46751: LD_INT 5
46753: ARRAY
46754: NOT
46755: OR
46756: PUSH
46757: LD_VAR 0 8
46761: PUSH
46762: LD_INT 6
46764: ARRAY
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 7
46774: PUSH
46775: LD_INT 9
46777: PUSH
46778: LD_INT 10
46780: PUSH
46781: LD_INT 11
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: IN
46792: NOT
46793: OR
46794: IFFALSE 46800
// exit ;
46796: POP
46797: POP
46798: GO 46883
// end ;
46800: GO 46471
46802: POP
46803: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46804: LD_VAR 0 9
46808: PPUSH
46809: LD_VAR 0 3
46813: PPUSH
46814: LD_VAR 0 4
46818: PPUSH
46819: LD_INT 20
46821: PPUSH
46822: CALL 38829 0 4
46826: PUSH
46827: LD_INT 4
46829: ARRAY
46830: IFFALSE 46834
// exit ;
46832: GO 46883
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46834: LD_VAR 0 2
46838: PUSH
46839: LD_INT 29
46841: PUSH
46842: LD_INT 30
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: IN
46849: PUSH
46850: LD_VAR 0 3
46854: PPUSH
46855: LD_VAR 0 4
46859: PPUSH
46860: LD_VAR 0 9
46864: PPUSH
46865: CALL_OW 440
46869: NOT
46870: AND
46871: IFFALSE 46875
// exit ;
46873: GO 46883
// result := true ;
46875: LD_ADDR_VAR 0 6
46879: PUSH
46880: LD_INT 1
46882: ST_TO_ADDR
// end ;
46883: LD_VAR 0 6
46887: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46888: LD_INT 0
46890: PPUSH
46891: PPUSH
46892: PPUSH
46893: PPUSH
46894: PPUSH
46895: PPUSH
46896: PPUSH
46897: PPUSH
46898: PPUSH
46899: PPUSH
46900: PPUSH
46901: PPUSH
46902: PPUSH
46903: PPUSH
46904: PPUSH
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
46911: PPUSH
46912: PPUSH
46913: PPUSH
46914: PPUSH
46915: PPUSH
46916: PPUSH
46917: PPUSH
46918: PPUSH
46919: PPUSH
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
46935: PPUSH
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
// result = [ ] ;
46948: LD_ADDR_VAR 0 7
46952: PUSH
46953: EMPTY
46954: ST_TO_ADDR
// temp_list = [ ] ;
46955: LD_ADDR_VAR 0 9
46959: PUSH
46960: EMPTY
46961: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46962: LD_VAR 0 4
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: LD_INT 4
46981: PUSH
46982: LD_INT 5
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: IN
46993: NOT
46994: PUSH
46995: LD_VAR 0 1
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: IN
47010: PUSH
47011: LD_VAR 0 5
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: IN
47030: NOT
47031: AND
47032: OR
47033: IFFALSE 47037
// exit ;
47035: GO 65428
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47037: LD_VAR 0 1
47041: PUSH
47042: LD_INT 6
47044: PUSH
47045: LD_INT 7
47047: PUSH
47048: LD_INT 8
47050: PUSH
47051: LD_INT 13
47053: PUSH
47054: LD_INT 12
47056: PUSH
47057: LD_INT 15
47059: PUSH
47060: LD_INT 11
47062: PUSH
47063: LD_INT 14
47065: PUSH
47066: LD_INT 10
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: IN
47080: IFFALSE 47090
// btype = b_lab ;
47082: LD_ADDR_VAR 0 1
47086: PUSH
47087: LD_INT 6
47089: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47090: LD_VAR 0 6
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: IN
47109: NOT
47110: PUSH
47111: LD_VAR 0 1
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 3
47127: PUSH
47128: LD_INT 6
47130: PUSH
47131: LD_INT 36
47133: PUSH
47134: LD_INT 4
47136: PUSH
47137: LD_INT 5
47139: PUSH
47140: LD_INT 31
47142: PUSH
47143: LD_INT 32
47145: PUSH
47146: LD_INT 33
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: IN
47162: NOT
47163: PUSH
47164: LD_VAR 0 6
47168: PUSH
47169: LD_INT 1
47171: EQUAL
47172: AND
47173: OR
47174: PUSH
47175: LD_VAR 0 1
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: IN
47190: NOT
47191: PUSH
47192: LD_VAR 0 6
47196: PUSH
47197: LD_INT 2
47199: EQUAL
47200: AND
47201: OR
47202: IFFALSE 47212
// mode = 0 ;
47204: LD_ADDR_VAR 0 6
47208: PUSH
47209: LD_INT 0
47211: ST_TO_ADDR
// case mode of 0 :
47212: LD_VAR 0 6
47216: PUSH
47217: LD_INT 0
47219: DOUBLE
47220: EQUAL
47221: IFTRUE 47225
47223: GO 58678
47225: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47226: LD_ADDR_VAR 0 11
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47419: LD_ADDR_VAR 0 12
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: NEG
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47615: LD_ADDR_VAR 0 13
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 3
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 3
47774: NEG
47775: PUSH
47776: LD_INT 2
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47814: LD_ADDR_VAR 0 14
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: LD_INT 3
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48010: LD_ADDR_VAR 0 15
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48203: LD_ADDR_VAR 0 16
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: LD_INT 3
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48396: LD_ADDR_VAR 0 17
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48626: LD_ADDR_VAR 0 18
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48856: LD_ADDR_VAR 0 19
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49086: LD_ADDR_VAR 0 20
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 2
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49316: LD_ADDR_VAR 0 21
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49546: LD_ADDR_VAR 0 22
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49776: LD_ADDR_VAR 0 23
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50056: LD_ADDR_VAR 0 24
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 3
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 3
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50332: LD_ADDR_VAR 0 25
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50606: LD_ADDR_VAR 0 26
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 3
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50882: LD_ADDR_VAR 0 27
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51162: LD_ADDR_VAR 0 28
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51444: LD_ADDR_VAR 0 29
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 3
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51723: LD_ADDR_VAR 0 30
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52001: LD_ADDR_VAR 0 31
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 3
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52279: LD_ADDR_VAR 0 32
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: LD_INT 3
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 3
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52557: LD_ADDR_VAR 0 33
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 3
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 3
52801: NEG
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52836: LD_ADDR_VAR 0 34
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 3
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: LD_INT 3
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53116: LD_ADDR_VAR 0 35
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53228: LD_ADDR_VAR 0 36
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53340: LD_ADDR_VAR 0 37
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53452: LD_ADDR_VAR 0 38
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53564: LD_ADDR_VAR 0 39
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53676: LD_ADDR_VAR 0 40
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53788: LD_ADDR_VAR 0 41
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 3
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: NEG
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54138: LD_ADDR_VAR 0 42
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: LD_INT 3
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 3
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 3
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 3
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 3
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 3
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: NEG
54448: PUSH
54449: LD_INT 3
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54488: LD_ADDR_VAR 0 43
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 3
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 3
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 3
54784: NEG
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54836: LD_ADDR_VAR 0 44
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 3
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 3
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: LD_INT 3
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55186: LD_ADDR_VAR 0 45
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: LD_INT 3
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 3
55495: NEG
55496: PUSH
55497: LD_INT 3
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55536: LD_ADDR_VAR 0 46
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 3
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55884: LD_ADDR_VAR 0 47
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56035: LD_ADDR_VAR 0 48
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56182: LD_ADDR_VAR 0 49
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56326: LD_ADDR_VAR 0 50
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56470: LD_ADDR_VAR 0 51
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56617: LD_ADDR_VAR 0 52
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56768: LD_ADDR_VAR 0 53
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56998: LD_ADDR_VAR 0 54
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57228: LD_ADDR_VAR 0 55
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57458: LD_ADDR_VAR 0 56
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57688: LD_ADDR_VAR 0 57
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57918: LD_ADDR_VAR 0 58
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58148: LD_ADDR_VAR 0 59
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58236: LD_ADDR_VAR 0 60
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58324: LD_ADDR_VAR 0 61
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58412: LD_ADDR_VAR 0 62
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58500: LD_ADDR_VAR 0 63
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58588: LD_ADDR_VAR 0 64
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// end ; 1 :
58676: GO 64573
58678: LD_INT 1
58680: DOUBLE
58681: EQUAL
58682: IFTRUE 58686
58684: GO 61309
58686: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58687: LD_ADDR_VAR 0 11
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: LIST
58730: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58731: LD_ADDR_VAR 0 12
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58772: LD_ADDR_VAR 0 13
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 3
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: LD_INT 3
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58812: LD_ADDR_VAR 0 14
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 3
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58853: LD_ADDR_VAR 0 15
58857: PUSH
58858: LD_INT 2
58860: NEG
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58897: LD_ADDR_VAR 0 16
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 3
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: NEG
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58943: LD_ADDR_VAR 0 17
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58987: LD_ADDR_VAR 0 18
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59028: LD_ADDR_VAR 0 19
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59068: LD_ADDR_VAR 0 20
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 3
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59109: LD_ADDR_VAR 0 21
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: NEG
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 3
59138: NEG
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59153: LD_ADDR_VAR 0 22
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 3
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: NEG
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59199: LD_ADDR_VAR 0 23
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: LD_INT 4
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 3
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59243: LD_ADDR_VAR 0 24
59247: PUSH
59248: LD_INT 3
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 4
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59284: LD_ADDR_VAR 0 25
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: LIST
59323: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59324: LD_ADDR_VAR 0 26
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 3
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 4
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59365: LD_ADDR_VAR 0 27
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 4
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59409: LD_ADDR_VAR 0 28
59413: PUSH
59414: LD_INT 3
59416: NEG
59417: PUSH
59418: LD_INT 3
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: LD_INT 4
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 4
59440: NEG
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59455: LD_ADDR_VAR 0 29
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 3
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 4
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: LD_INT 5
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 5
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 6
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 6
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 5
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59610: LD_ADDR_VAR 0 30
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 4
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 4
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 4
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 5
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 5
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 5
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 6
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 6
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59753: LD_ADDR_VAR 0 31
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 4
59800: PUSH
59801: LD_INT 4
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: LD_INT 4
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 5
59820: PUSH
59821: LD_INT 4
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 5
59830: PUSH
59831: LD_INT 5
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 4
59840: PUSH
59841: LD_INT 5
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 6
59850: PUSH
59851: LD_INT 5
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 6
59860: PUSH
59861: LD_INT 6
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 5
59870: PUSH
59871: LD_INT 6
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59892: LD_ADDR_VAR 0 32
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: LD_INT 3
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 3
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 4
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 4
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 5
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 5
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: LD_INT 4
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 6
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: LD_INT 6
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 5
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60035: LD_ADDR_VAR 0 33
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 3
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 4
60087: NEG
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 5
60121: NEG
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 5
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 6
60155: NEG
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 6
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60190: LD_ADDR_VAR 0 34
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 4
60245: NEG
60246: PUSH
60247: LD_INT 3
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 4
60257: NEG
60258: PUSH
60259: LD_INT 4
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 4
60269: NEG
60270: PUSH
60271: LD_INT 5
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 5
60281: NEG
60282: PUSH
60283: LD_INT 4
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 5
60293: NEG
60294: PUSH
60295: LD_INT 5
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 5
60305: NEG
60306: PUSH
60307: LD_INT 6
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 6
60317: NEG
60318: PUSH
60319: LD_INT 5
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 6
60329: NEG
60330: PUSH
60331: LD_INT 6
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60353: LD_ADDR_VAR 0 41
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 3
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: LIST
60396: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60397: LD_ADDR_VAR 0 42
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: LIST
60437: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60438: LD_ADDR_VAR 0 43
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60478: LD_ADDR_VAR 0 44
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60519: LD_ADDR_VAR 0 45
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: LIST
60562: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60563: LD_ADDR_VAR 0 46
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60609: LD_ADDR_VAR 0 47
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: LD_INT 3
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 3
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60642: LD_ADDR_VAR 0 48
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60673: LD_ADDR_VAR 0 49
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60702: LD_ADDR_VAR 0 50
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60731: LD_ADDR_VAR 0 51
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60762: LD_ADDR_VAR 0 52
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: NEG
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60795: LD_ADDR_VAR 0 53
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 3
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 3
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: LIST
60838: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60839: LD_ADDR_VAR 0 54
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60880: LD_ADDR_VAR 0 55
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 3
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: LIST
60919: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60920: LD_ADDR_VAR 0 56
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: LIST
60960: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60961: LD_ADDR_VAR 0 57
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 3
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61005: LD_ADDR_VAR 0 58
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61051: LD_ADDR_VAR 0 59
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61095: LD_ADDR_VAR 0 60
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61136: LD_ADDR_VAR 0 61
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: LD_INT 2
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: LIST
61175: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61176: LD_ADDR_VAR 0 62
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61217: LD_ADDR_VAR 0 63
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61261: LD_ADDR_VAR 0 64
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: LIST
61306: ST_TO_ADDR
// end ; 2 :
61307: GO 64573
61309: LD_INT 2
61311: DOUBLE
61312: EQUAL
61313: IFTRUE 61317
61315: GO 64572
61317: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61318: LD_ADDR_VAR 0 29
61322: PUSH
61323: LD_INT 4
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 4
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 5
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 5
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 4
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 5
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 4
61438: PUSH
61439: LD_INT 3
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 4
61448: PUSH
61449: LD_INT 4
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: LD_INT 4
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 2
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 4
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: LD_INT 4
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 4
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 4
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 5
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 5
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 4
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 3
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: LD_INT 5
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: LD_INT 3
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: NEG
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 4
61657: NEG
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 4
61668: NEG
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 4
61680: NEG
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 4
61703: NEG
61704: PUSH
61705: LD_INT 4
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: LD_INT 5
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 3
61739: NEG
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 4
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 5
61763: NEG
61764: PUSH
61765: LD_INT 4
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 5
61775: NEG
61776: PUSH
61777: LD_INT 5
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: LD_INT 5
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 5
61799: NEG
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61856: LD_ADDR_VAR 0 30
61860: PUSH
61861: LD_INT 4
61863: PUSH
61864: LD_INT 4
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 4
61873: PUSH
61874: LD_INT 3
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 5
61883: PUSH
61884: LD_INT 4
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 5
61893: PUSH
61894: LD_INT 5
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 4
61903: PUSH
61904: LD_INT 5
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 4
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 3
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 5
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: LD_INT 5
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: LD_INT 4
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: LD_INT 4
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: LD_INT 4
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 4
62046: NEG
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 4
62057: NEG
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: NEG
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 4
62091: NEG
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 5
62102: NEG
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 5
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 5
62125: NEG
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: LD_INT 4
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: LD_INT 3
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 4
62208: NEG
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 4
62220: NEG
62221: PUSH
62222: LD_INT 4
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 4
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 4
62244: NEG
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 4
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 5
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 4
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 3
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: LD_INT 4
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: LD_INT 5
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: LD_INT 5
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62403: LD_ADDR_VAR 0 31
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 4
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 3
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 4
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 5
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 5
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 3
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: PUSH
62483: LD_INT 5
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 3
62503: NEG
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 4
62559: NEG
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 4
62570: NEG
62571: PUSH
62572: LD_INT 1
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 4
62582: NEG
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 4
62605: NEG
62606: PUSH
62607: LD_INT 4
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 4
62617: NEG
62618: PUSH
62619: LD_INT 5
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 3
62629: NEG
62630: PUSH
62631: LD_INT 4
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 3
62641: NEG
62642: PUSH
62643: LD_INT 3
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 4
62653: NEG
62654: PUSH
62655: LD_INT 3
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 5
62665: NEG
62666: PUSH
62667: LD_INT 4
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 5
62677: NEG
62678: PUSH
62679: LD_INT 5
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 3
62689: NEG
62690: PUSH
62691: LD_INT 5
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 5
62701: NEG
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 3
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_INT 4
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 4
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: LD_INT 4
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 4
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 4
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 5
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 5
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 4
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 3
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 3
62887: PUSH
62888: LD_INT 2
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 5
62898: PUSH
62899: LD_INT 2
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62953: LD_ADDR_VAR 0 32
62957: PUSH
62958: LD_INT 4
62960: NEG
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 4
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 3
62983: NEG
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 3
62994: NEG
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 4
63005: NEG
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 5
63016: NEG
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 5
63027: NEG
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 5
63039: NEG
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 3
63051: NEG
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 3
63062: NEG
63063: PUSH
63064: LD_INT 3
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 3
63074: NEG
63075: PUSH
63076: LD_INT 4
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 2
63098: NEG
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 3
63110: NEG
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 4
63122: NEG
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 4
63134: NEG
63135: PUSH
63136: LD_INT 4
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: LD_INT 4
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 4
63158: NEG
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 4
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 5
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 4
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 3
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: LD_INT 3
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: LD_INT 4
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 5
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: LD_INT 3
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 2
63260: NEG
63261: PUSH
63262: LD_INT 5
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 3
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 3
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 4
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 4
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 3
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 2
63344: PUSH
63345: LD_INT 2
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 4
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 4
63365: PUSH
63366: LD_INT 4
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 4
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 5
63385: PUSH
63386: LD_INT 4
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 5
63395: PUSH
63396: LD_INT 5
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 4
63405: PUSH
63406: LD_INT 5
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 3
63415: PUSH
63416: LD_INT 4
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 3
63425: PUSH
63426: LD_INT 3
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 5
63435: PUSH
63436: LD_INT 3
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 3
63445: PUSH
63446: LD_INT 5
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63500: LD_ADDR_VAR 0 33
63504: PUSH
63505: LD_INT 4
63507: NEG
63508: PUSH
63509: LD_INT 4
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 4
63519: NEG
63520: PUSH
63521: LD_INT 5
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: LD_INT 4
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: NEG
63544: PUSH
63545: LD_INT 3
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 4
63555: NEG
63556: PUSH
63557: LD_INT 3
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 5
63567: NEG
63568: PUSH
63569: LD_INT 4
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 5
63579: NEG
63580: PUSH
63581: LD_INT 5
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 3
63591: NEG
63592: PUSH
63593: LD_INT 5
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 5
63603: NEG
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 3
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 4
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 3
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 1
63648: PUSH
63649: LD_INT 2
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 3
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 4
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: LD_INT 4
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 4
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 4
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 5
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 5
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 4
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 3
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 3
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: LD_INT 2
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 5
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: LD_INT 3
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 3
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 4
63830: PUSH
63831: LD_INT 3
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 4
63840: PUSH
63841: LD_INT 4
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: LD_INT 4
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: LD_INT 3
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 4
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: LD_INT 4
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 4
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 3
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: LD_INT 4
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: LD_INT 5
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 5
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: LD_INT 4
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 3
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: LD_INT 5
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64038: LD_ADDR_VAR 0 34
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 4
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: LD_INT 5
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 4
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 3
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: LD_INT 4
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 5
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 2
64124: PUSH
64125: LD_INT 3
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 2
64135: NEG
64136: PUSH
64137: LD_INT 5
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 3
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 3
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 4
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 4
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 3
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 2
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 4
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 4
64240: PUSH
64241: LD_INT 4
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 4
64250: PUSH
64251: LD_INT 3
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 5
64260: PUSH
64261: LD_INT 4
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 5
64270: PUSH
64271: LD_INT 5
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 4
64280: PUSH
64281: LD_INT 5
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 3
64290: PUSH
64291: LD_INT 4
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 3
64300: PUSH
64301: LD_INT 3
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 5
64310: PUSH
64311: LD_INT 3
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 3
64320: PUSH
64321: LD_INT 5
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: LD_INT 3
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: LD_INT 4
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: LD_INT 4
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: LD_INT 3
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 4
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: LD_INT 2
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 4
64423: NEG
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 4
64434: NEG
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 3
64446: NEG
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 3
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 4
64468: NEG
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 5
64479: NEG
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 5
64490: NEG
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 5
64502: NEG
64503: PUSH
64504: LD_INT 2
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 3
64514: NEG
64515: PUSH
64516: LD_INT 2
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: ST_TO_ADDR
// end ; end ;
64570: GO 64573
64572: POP
// case btype of b_depot , b_warehouse :
64573: LD_VAR 0 1
64577: PUSH
64578: LD_INT 0
64580: DOUBLE
64581: EQUAL
64582: IFTRUE 64592
64584: LD_INT 1
64586: DOUBLE
64587: EQUAL
64588: IFTRUE 64592
64590: GO 64793
64592: POP
// case nation of nation_american :
64593: LD_VAR 0 5
64597: PUSH
64598: LD_INT 1
64600: DOUBLE
64601: EQUAL
64602: IFTRUE 64606
64604: GO 64662
64606: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64607: LD_ADDR_VAR 0 9
64611: PUSH
64612: LD_VAR 0 11
64616: PUSH
64617: LD_VAR 0 12
64621: PUSH
64622: LD_VAR 0 13
64626: PUSH
64627: LD_VAR 0 14
64631: PUSH
64632: LD_VAR 0 15
64636: PUSH
64637: LD_VAR 0 16
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: PUSH
64650: LD_VAR 0 4
64654: PUSH
64655: LD_INT 1
64657: PLUS
64658: ARRAY
64659: ST_TO_ADDR
64660: GO 64791
64662: LD_INT 2
64664: DOUBLE
64665: EQUAL
64666: IFTRUE 64670
64668: GO 64726
64670: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64671: LD_ADDR_VAR 0 9
64675: PUSH
64676: LD_VAR 0 17
64680: PUSH
64681: LD_VAR 0 18
64685: PUSH
64686: LD_VAR 0 19
64690: PUSH
64691: LD_VAR 0 20
64695: PUSH
64696: LD_VAR 0 21
64700: PUSH
64701: LD_VAR 0 22
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: PUSH
64714: LD_VAR 0 4
64718: PUSH
64719: LD_INT 1
64721: PLUS
64722: ARRAY
64723: ST_TO_ADDR
64724: GO 64791
64726: LD_INT 3
64728: DOUBLE
64729: EQUAL
64730: IFTRUE 64734
64732: GO 64790
64734: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64735: LD_ADDR_VAR 0 9
64739: PUSH
64740: LD_VAR 0 23
64744: PUSH
64745: LD_VAR 0 24
64749: PUSH
64750: LD_VAR 0 25
64754: PUSH
64755: LD_VAR 0 26
64759: PUSH
64760: LD_VAR 0 27
64764: PUSH
64765: LD_VAR 0 28
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: PUSH
64778: LD_VAR 0 4
64782: PUSH
64783: LD_INT 1
64785: PLUS
64786: ARRAY
64787: ST_TO_ADDR
64788: GO 64791
64790: POP
64791: GO 65346
64793: LD_INT 2
64795: DOUBLE
64796: EQUAL
64797: IFTRUE 64807
64799: LD_INT 3
64801: DOUBLE
64802: EQUAL
64803: IFTRUE 64807
64805: GO 64863
64807: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64808: LD_ADDR_VAR 0 9
64812: PUSH
64813: LD_VAR 0 29
64817: PUSH
64818: LD_VAR 0 30
64822: PUSH
64823: LD_VAR 0 31
64827: PUSH
64828: LD_VAR 0 32
64832: PUSH
64833: LD_VAR 0 33
64837: PUSH
64838: LD_VAR 0 34
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: PUSH
64851: LD_VAR 0 4
64855: PUSH
64856: LD_INT 1
64858: PLUS
64859: ARRAY
64860: ST_TO_ADDR
64861: GO 65346
64863: LD_INT 16
64865: DOUBLE
64866: EQUAL
64867: IFTRUE 64925
64869: LD_INT 17
64871: DOUBLE
64872: EQUAL
64873: IFTRUE 64925
64875: LD_INT 18
64877: DOUBLE
64878: EQUAL
64879: IFTRUE 64925
64881: LD_INT 19
64883: DOUBLE
64884: EQUAL
64885: IFTRUE 64925
64887: LD_INT 22
64889: DOUBLE
64890: EQUAL
64891: IFTRUE 64925
64893: LD_INT 20
64895: DOUBLE
64896: EQUAL
64897: IFTRUE 64925
64899: LD_INT 21
64901: DOUBLE
64902: EQUAL
64903: IFTRUE 64925
64905: LD_INT 23
64907: DOUBLE
64908: EQUAL
64909: IFTRUE 64925
64911: LD_INT 24
64913: DOUBLE
64914: EQUAL
64915: IFTRUE 64925
64917: LD_INT 25
64919: DOUBLE
64920: EQUAL
64921: IFTRUE 64925
64923: GO 64981
64925: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64926: LD_ADDR_VAR 0 9
64930: PUSH
64931: LD_VAR 0 35
64935: PUSH
64936: LD_VAR 0 36
64940: PUSH
64941: LD_VAR 0 37
64945: PUSH
64946: LD_VAR 0 38
64950: PUSH
64951: LD_VAR 0 39
64955: PUSH
64956: LD_VAR 0 40
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: PUSH
64969: LD_VAR 0 4
64973: PUSH
64974: LD_INT 1
64976: PLUS
64977: ARRAY
64978: ST_TO_ADDR
64979: GO 65346
64981: LD_INT 6
64983: DOUBLE
64984: EQUAL
64985: IFTRUE 65037
64987: LD_INT 7
64989: DOUBLE
64990: EQUAL
64991: IFTRUE 65037
64993: LD_INT 8
64995: DOUBLE
64996: EQUAL
64997: IFTRUE 65037
64999: LD_INT 13
65001: DOUBLE
65002: EQUAL
65003: IFTRUE 65037
65005: LD_INT 12
65007: DOUBLE
65008: EQUAL
65009: IFTRUE 65037
65011: LD_INT 15
65013: DOUBLE
65014: EQUAL
65015: IFTRUE 65037
65017: LD_INT 11
65019: DOUBLE
65020: EQUAL
65021: IFTRUE 65037
65023: LD_INT 14
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65037
65029: LD_INT 10
65031: DOUBLE
65032: EQUAL
65033: IFTRUE 65037
65035: GO 65093
65037: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65038: LD_ADDR_VAR 0 9
65042: PUSH
65043: LD_VAR 0 41
65047: PUSH
65048: LD_VAR 0 42
65052: PUSH
65053: LD_VAR 0 43
65057: PUSH
65058: LD_VAR 0 44
65062: PUSH
65063: LD_VAR 0 45
65067: PUSH
65068: LD_VAR 0 46
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: PUSH
65081: LD_VAR 0 4
65085: PUSH
65086: LD_INT 1
65088: PLUS
65089: ARRAY
65090: ST_TO_ADDR
65091: GO 65346
65093: LD_INT 36
65095: DOUBLE
65096: EQUAL
65097: IFTRUE 65101
65099: GO 65157
65101: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65102: LD_ADDR_VAR 0 9
65106: PUSH
65107: LD_VAR 0 47
65111: PUSH
65112: LD_VAR 0 48
65116: PUSH
65117: LD_VAR 0 49
65121: PUSH
65122: LD_VAR 0 50
65126: PUSH
65127: LD_VAR 0 51
65131: PUSH
65132: LD_VAR 0 52
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: PUSH
65145: LD_VAR 0 4
65149: PUSH
65150: LD_INT 1
65152: PLUS
65153: ARRAY
65154: ST_TO_ADDR
65155: GO 65346
65157: LD_INT 4
65159: DOUBLE
65160: EQUAL
65161: IFTRUE 65183
65163: LD_INT 5
65165: DOUBLE
65166: EQUAL
65167: IFTRUE 65183
65169: LD_INT 34
65171: DOUBLE
65172: EQUAL
65173: IFTRUE 65183
65175: LD_INT 37
65177: DOUBLE
65178: EQUAL
65179: IFTRUE 65183
65181: GO 65239
65183: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65184: LD_ADDR_VAR 0 9
65188: PUSH
65189: LD_VAR 0 53
65193: PUSH
65194: LD_VAR 0 54
65198: PUSH
65199: LD_VAR 0 55
65203: PUSH
65204: LD_VAR 0 56
65208: PUSH
65209: LD_VAR 0 57
65213: PUSH
65214: LD_VAR 0 58
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: PUSH
65227: LD_VAR 0 4
65231: PUSH
65232: LD_INT 1
65234: PLUS
65235: ARRAY
65236: ST_TO_ADDR
65237: GO 65346
65239: LD_INT 31
65241: DOUBLE
65242: EQUAL
65243: IFTRUE 65289
65245: LD_INT 32
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65289
65251: LD_INT 33
65253: DOUBLE
65254: EQUAL
65255: IFTRUE 65289
65257: LD_INT 27
65259: DOUBLE
65260: EQUAL
65261: IFTRUE 65289
65263: LD_INT 26
65265: DOUBLE
65266: EQUAL
65267: IFTRUE 65289
65269: LD_INT 28
65271: DOUBLE
65272: EQUAL
65273: IFTRUE 65289
65275: LD_INT 29
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65289
65281: LD_INT 30
65283: DOUBLE
65284: EQUAL
65285: IFTRUE 65289
65287: GO 65345
65289: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65290: LD_ADDR_VAR 0 9
65294: PUSH
65295: LD_VAR 0 59
65299: PUSH
65300: LD_VAR 0 60
65304: PUSH
65305: LD_VAR 0 61
65309: PUSH
65310: LD_VAR 0 62
65314: PUSH
65315: LD_VAR 0 63
65319: PUSH
65320: LD_VAR 0 64
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: PUSH
65333: LD_VAR 0 4
65337: PUSH
65338: LD_INT 1
65340: PLUS
65341: ARRAY
65342: ST_TO_ADDR
65343: GO 65346
65345: POP
// temp_list2 = [ ] ;
65346: LD_ADDR_VAR 0 10
65350: PUSH
65351: EMPTY
65352: ST_TO_ADDR
// for i in temp_list do
65353: LD_ADDR_VAR 0 8
65357: PUSH
65358: LD_VAR 0 9
65362: PUSH
65363: FOR_IN
65364: IFFALSE 65416
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65366: LD_ADDR_VAR 0 10
65370: PUSH
65371: LD_VAR 0 10
65375: PUSH
65376: LD_VAR 0 8
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: PUSH
65385: LD_VAR 0 2
65389: PLUS
65390: PUSH
65391: LD_VAR 0 8
65395: PUSH
65396: LD_INT 2
65398: ARRAY
65399: PUSH
65400: LD_VAR 0 3
65404: PLUS
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: EMPTY
65411: LIST
65412: ADD
65413: ST_TO_ADDR
65414: GO 65363
65416: POP
65417: POP
// result = temp_list2 ;
65418: LD_ADDR_VAR 0 7
65422: PUSH
65423: LD_VAR 0 10
65427: ST_TO_ADDR
// end ;
65428: LD_VAR 0 7
65432: RET
// export function EnemyInRange ( unit , dist ) ; begin
65433: LD_INT 0
65435: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65436: LD_ADDR_VAR 0 3
65440: PUSH
65441: LD_VAR 0 1
65445: PPUSH
65446: CALL_OW 255
65450: PPUSH
65451: LD_VAR 0 1
65455: PPUSH
65456: CALL_OW 250
65460: PPUSH
65461: LD_VAR 0 1
65465: PPUSH
65466: CALL_OW 251
65470: PPUSH
65471: LD_VAR 0 2
65475: PPUSH
65476: CALL 38829 0 4
65480: PUSH
65481: LD_INT 4
65483: ARRAY
65484: ST_TO_ADDR
// end ;
65485: LD_VAR 0 3
65489: RET
// export function PlayerSeeMe ( unit ) ; begin
65490: LD_INT 0
65492: PPUSH
// result := See ( your_side , unit ) ;
65493: LD_ADDR_VAR 0 2
65497: PUSH
65498: LD_OWVAR 2
65502: PPUSH
65503: LD_VAR 0 1
65507: PPUSH
65508: CALL_OW 292
65512: ST_TO_ADDR
// end ;
65513: LD_VAR 0 2
65517: RET
// export function ReverseDir ( unit ) ; begin
65518: LD_INT 0
65520: PPUSH
// if not unit then
65521: LD_VAR 0 1
65525: NOT
65526: IFFALSE 65530
// exit ;
65528: GO 65553
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65530: LD_ADDR_VAR 0 2
65534: PUSH
65535: LD_VAR 0 1
65539: PPUSH
65540: CALL_OW 254
65544: PUSH
65545: LD_INT 3
65547: PLUS
65548: PUSH
65549: LD_INT 6
65551: MOD
65552: ST_TO_ADDR
// end ;
65553: LD_VAR 0 2
65557: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65558: LD_INT 0
65560: PPUSH
65561: PPUSH
65562: PPUSH
65563: PPUSH
65564: PPUSH
// if not hexes then
65565: LD_VAR 0 2
65569: NOT
65570: IFFALSE 65574
// exit ;
65572: GO 65722
// dist := 9999 ;
65574: LD_ADDR_VAR 0 5
65578: PUSH
65579: LD_INT 9999
65581: ST_TO_ADDR
// for i = 1 to hexes do
65582: LD_ADDR_VAR 0 4
65586: PUSH
65587: DOUBLE
65588: LD_INT 1
65590: DEC
65591: ST_TO_ADDR
65592: LD_VAR 0 2
65596: PUSH
65597: FOR_TO
65598: IFFALSE 65710
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65600: LD_VAR 0 1
65604: PPUSH
65605: LD_VAR 0 2
65609: PUSH
65610: LD_VAR 0 4
65614: ARRAY
65615: PUSH
65616: LD_INT 1
65618: ARRAY
65619: PPUSH
65620: LD_VAR 0 2
65624: PUSH
65625: LD_VAR 0 4
65629: ARRAY
65630: PUSH
65631: LD_INT 2
65633: ARRAY
65634: PPUSH
65635: CALL_OW 297
65639: PUSH
65640: LD_VAR 0 5
65644: LESS
65645: IFFALSE 65708
// begin hex := hexes [ i ] ;
65647: LD_ADDR_VAR 0 7
65651: PUSH
65652: LD_VAR 0 2
65656: PUSH
65657: LD_VAR 0 4
65661: ARRAY
65662: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65663: LD_ADDR_VAR 0 5
65667: PUSH
65668: LD_VAR 0 1
65672: PPUSH
65673: LD_VAR 0 2
65677: PUSH
65678: LD_VAR 0 4
65682: ARRAY
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: PPUSH
65688: LD_VAR 0 2
65692: PUSH
65693: LD_VAR 0 4
65697: ARRAY
65698: PUSH
65699: LD_INT 2
65701: ARRAY
65702: PPUSH
65703: CALL_OW 297
65707: ST_TO_ADDR
// end ; end ;
65708: GO 65597
65710: POP
65711: POP
// result := hex ;
65712: LD_ADDR_VAR 0 3
65716: PUSH
65717: LD_VAR 0 7
65721: ST_TO_ADDR
// end ;
65722: LD_VAR 0 3
65726: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65727: LD_INT 0
65729: PPUSH
65730: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65731: LD_VAR 0 1
65735: NOT
65736: PUSH
65737: LD_VAR 0 1
65741: PUSH
65742: LD_INT 21
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 23
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PPUSH
65766: CALL_OW 69
65770: IN
65771: NOT
65772: OR
65773: IFFALSE 65777
// exit ;
65775: GO 65824
// for i = 1 to 3 do
65777: LD_ADDR_VAR 0 3
65781: PUSH
65782: DOUBLE
65783: LD_INT 1
65785: DEC
65786: ST_TO_ADDR
65787: LD_INT 3
65789: PUSH
65790: FOR_TO
65791: IFFALSE 65822
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65793: LD_VAR 0 1
65797: PPUSH
65798: CALL_OW 250
65802: PPUSH
65803: LD_VAR 0 1
65807: PPUSH
65808: CALL_OW 251
65812: PPUSH
65813: LD_INT 1
65815: PPUSH
65816: CALL_OW 453
65820: GO 65790
65822: POP
65823: POP
// end ;
65824: LD_VAR 0 2
65828: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65829: LD_INT 0
65831: PPUSH
65832: PPUSH
65833: PPUSH
65834: PPUSH
65835: PPUSH
65836: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65837: LD_VAR 0 1
65841: NOT
65842: PUSH
65843: LD_VAR 0 2
65847: NOT
65848: OR
65849: PUSH
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 314
65859: OR
65860: IFFALSE 65864
// exit ;
65862: GO 66305
// x := GetX ( enemy_unit ) ;
65864: LD_ADDR_VAR 0 7
65868: PUSH
65869: LD_VAR 0 2
65873: PPUSH
65874: CALL_OW 250
65878: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65879: LD_ADDR_VAR 0 8
65883: PUSH
65884: LD_VAR 0 2
65888: PPUSH
65889: CALL_OW 251
65893: ST_TO_ADDR
// if not x or not y then
65894: LD_VAR 0 7
65898: NOT
65899: PUSH
65900: LD_VAR 0 8
65904: NOT
65905: OR
65906: IFFALSE 65910
// exit ;
65908: GO 66305
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65910: LD_ADDR_VAR 0 6
65914: PUSH
65915: LD_VAR 0 7
65919: PPUSH
65920: LD_INT 0
65922: PPUSH
65923: LD_INT 4
65925: PPUSH
65926: CALL_OW 272
65930: PUSH
65931: LD_VAR 0 8
65935: PPUSH
65936: LD_INT 0
65938: PPUSH
65939: LD_INT 4
65941: PPUSH
65942: CALL_OW 273
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_VAR 0 7
65955: PPUSH
65956: LD_INT 1
65958: PPUSH
65959: LD_INT 4
65961: PPUSH
65962: CALL_OW 272
65966: PUSH
65967: LD_VAR 0 8
65971: PPUSH
65972: LD_INT 1
65974: PPUSH
65975: LD_INT 4
65977: PPUSH
65978: CALL_OW 273
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_VAR 0 7
65991: PPUSH
65992: LD_INT 2
65994: PPUSH
65995: LD_INT 4
65997: PPUSH
65998: CALL_OW 272
66002: PUSH
66003: LD_VAR 0 8
66007: PPUSH
66008: LD_INT 2
66010: PPUSH
66011: LD_INT 4
66013: PPUSH
66014: CALL_OW 273
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_VAR 0 7
66027: PPUSH
66028: LD_INT 3
66030: PPUSH
66031: LD_INT 4
66033: PPUSH
66034: CALL_OW 272
66038: PUSH
66039: LD_VAR 0 8
66043: PPUSH
66044: LD_INT 3
66046: PPUSH
66047: LD_INT 4
66049: PPUSH
66050: CALL_OW 273
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_VAR 0 7
66063: PPUSH
66064: LD_INT 4
66066: PPUSH
66067: LD_INT 4
66069: PPUSH
66070: CALL_OW 272
66074: PUSH
66075: LD_VAR 0 8
66079: PPUSH
66080: LD_INT 4
66082: PPUSH
66083: LD_INT 4
66085: PPUSH
66086: CALL_OW 273
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_VAR 0 7
66099: PPUSH
66100: LD_INT 5
66102: PPUSH
66103: LD_INT 4
66105: PPUSH
66106: CALL_OW 272
66110: PUSH
66111: LD_VAR 0 8
66115: PPUSH
66116: LD_INT 5
66118: PPUSH
66119: LD_INT 4
66121: PPUSH
66122: CALL_OW 273
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: ST_TO_ADDR
// for i = tmp downto 1 do
66139: LD_ADDR_VAR 0 4
66143: PUSH
66144: DOUBLE
66145: LD_VAR 0 6
66149: INC
66150: ST_TO_ADDR
66151: LD_INT 1
66153: PUSH
66154: FOR_DOWNTO
66155: IFFALSE 66256
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66157: LD_VAR 0 6
66161: PUSH
66162: LD_VAR 0 4
66166: ARRAY
66167: PUSH
66168: LD_INT 1
66170: ARRAY
66171: PPUSH
66172: LD_VAR 0 6
66176: PUSH
66177: LD_VAR 0 4
66181: ARRAY
66182: PUSH
66183: LD_INT 2
66185: ARRAY
66186: PPUSH
66187: CALL_OW 488
66191: NOT
66192: PUSH
66193: LD_VAR 0 6
66197: PUSH
66198: LD_VAR 0 4
66202: ARRAY
66203: PUSH
66204: LD_INT 1
66206: ARRAY
66207: PPUSH
66208: LD_VAR 0 6
66212: PUSH
66213: LD_VAR 0 4
66217: ARRAY
66218: PUSH
66219: LD_INT 2
66221: ARRAY
66222: PPUSH
66223: CALL_OW 428
66227: PUSH
66228: LD_INT 0
66230: NONEQUAL
66231: OR
66232: IFFALSE 66254
// tmp := Delete ( tmp , i ) ;
66234: LD_ADDR_VAR 0 6
66238: PUSH
66239: LD_VAR 0 6
66243: PPUSH
66244: LD_VAR 0 4
66248: PPUSH
66249: CALL_OW 3
66253: ST_TO_ADDR
66254: GO 66154
66256: POP
66257: POP
// j := GetClosestHex ( unit , tmp ) ;
66258: LD_ADDR_VAR 0 5
66262: PUSH
66263: LD_VAR 0 1
66267: PPUSH
66268: LD_VAR 0 6
66272: PPUSH
66273: CALL 65558 0 2
66277: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66278: LD_VAR 0 1
66282: PPUSH
66283: LD_VAR 0 5
66287: PUSH
66288: LD_INT 1
66290: ARRAY
66291: PPUSH
66292: LD_VAR 0 5
66296: PUSH
66297: LD_INT 2
66299: ARRAY
66300: PPUSH
66301: CALL_OW 111
// end ;
66305: LD_VAR 0 3
66309: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66310: LD_INT 0
66312: PPUSH
66313: PPUSH
66314: PPUSH
// uc_side = 0 ;
66315: LD_ADDR_OWVAR 20
66319: PUSH
66320: LD_INT 0
66322: ST_TO_ADDR
// uc_nation = 0 ;
66323: LD_ADDR_OWVAR 21
66327: PUSH
66328: LD_INT 0
66330: ST_TO_ADDR
// InitHc_All ( ) ;
66331: CALL_OW 584
// InitVc ;
66335: CALL_OW 20
// if mastodonts then
66339: LD_VAR 0 6
66343: IFFALSE 66410
// for i = 1 to mastodonts do
66345: LD_ADDR_VAR 0 11
66349: PUSH
66350: DOUBLE
66351: LD_INT 1
66353: DEC
66354: ST_TO_ADDR
66355: LD_VAR 0 6
66359: PUSH
66360: FOR_TO
66361: IFFALSE 66408
// begin vc_chassis := 31 ;
66363: LD_ADDR_OWVAR 37
66367: PUSH
66368: LD_INT 31
66370: ST_TO_ADDR
// vc_control := control_rider ;
66371: LD_ADDR_OWVAR 38
66375: PUSH
66376: LD_INT 4
66378: ST_TO_ADDR
// animal := CreateVehicle ;
66379: LD_ADDR_VAR 0 12
66383: PUSH
66384: CALL_OW 45
66388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66389: LD_VAR 0 12
66393: PPUSH
66394: LD_VAR 0 8
66398: PPUSH
66399: LD_INT 0
66401: PPUSH
66402: CALL 68598 0 3
// end ;
66406: GO 66360
66408: POP
66409: POP
// if horses then
66410: LD_VAR 0 5
66414: IFFALSE 66481
// for i = 1 to horses do
66416: LD_ADDR_VAR 0 11
66420: PUSH
66421: DOUBLE
66422: LD_INT 1
66424: DEC
66425: ST_TO_ADDR
66426: LD_VAR 0 5
66430: PUSH
66431: FOR_TO
66432: IFFALSE 66479
// begin hc_class := 21 ;
66434: LD_ADDR_OWVAR 28
66438: PUSH
66439: LD_INT 21
66441: ST_TO_ADDR
// hc_gallery :=  ;
66442: LD_ADDR_OWVAR 33
66446: PUSH
66447: LD_STRING 
66449: ST_TO_ADDR
// animal := CreateHuman ;
66450: LD_ADDR_VAR 0 12
66454: PUSH
66455: CALL_OW 44
66459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66460: LD_VAR 0 12
66464: PPUSH
66465: LD_VAR 0 8
66469: PPUSH
66470: LD_INT 0
66472: PPUSH
66473: CALL 68598 0 3
// end ;
66477: GO 66431
66479: POP
66480: POP
// if birds then
66481: LD_VAR 0 1
66485: IFFALSE 66552
// for i = 1 to birds do
66487: LD_ADDR_VAR 0 11
66491: PUSH
66492: DOUBLE
66493: LD_INT 1
66495: DEC
66496: ST_TO_ADDR
66497: LD_VAR 0 1
66501: PUSH
66502: FOR_TO
66503: IFFALSE 66550
// begin hc_class = 18 ;
66505: LD_ADDR_OWVAR 28
66509: PUSH
66510: LD_INT 18
66512: ST_TO_ADDR
// hc_gallery =  ;
66513: LD_ADDR_OWVAR 33
66517: PUSH
66518: LD_STRING 
66520: ST_TO_ADDR
// animal := CreateHuman ;
66521: LD_ADDR_VAR 0 12
66525: PUSH
66526: CALL_OW 44
66530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66531: LD_VAR 0 12
66535: PPUSH
66536: LD_VAR 0 8
66540: PPUSH
66541: LD_INT 0
66543: PPUSH
66544: CALL 68598 0 3
// end ;
66548: GO 66502
66550: POP
66551: POP
// if tigers then
66552: LD_VAR 0 2
66556: IFFALSE 66640
// for i = 1 to tigers do
66558: LD_ADDR_VAR 0 11
66562: PUSH
66563: DOUBLE
66564: LD_INT 1
66566: DEC
66567: ST_TO_ADDR
66568: LD_VAR 0 2
66572: PUSH
66573: FOR_TO
66574: IFFALSE 66638
// begin hc_class = class_tiger ;
66576: LD_ADDR_OWVAR 28
66580: PUSH
66581: LD_INT 14
66583: ST_TO_ADDR
// hc_gallery =  ;
66584: LD_ADDR_OWVAR 33
66588: PUSH
66589: LD_STRING 
66591: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66592: LD_ADDR_OWVAR 35
66596: PUSH
66597: LD_INT 7
66599: NEG
66600: PPUSH
66601: LD_INT 7
66603: PPUSH
66604: CALL_OW 12
66608: ST_TO_ADDR
// animal := CreateHuman ;
66609: LD_ADDR_VAR 0 12
66613: PUSH
66614: CALL_OW 44
66618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66619: LD_VAR 0 12
66623: PPUSH
66624: LD_VAR 0 8
66628: PPUSH
66629: LD_INT 0
66631: PPUSH
66632: CALL 68598 0 3
// end ;
66636: GO 66573
66638: POP
66639: POP
// if apemans then
66640: LD_VAR 0 3
66644: IFFALSE 66767
// for i = 1 to apemans do
66646: LD_ADDR_VAR 0 11
66650: PUSH
66651: DOUBLE
66652: LD_INT 1
66654: DEC
66655: ST_TO_ADDR
66656: LD_VAR 0 3
66660: PUSH
66661: FOR_TO
66662: IFFALSE 66765
// begin hc_class = class_apeman ;
66664: LD_ADDR_OWVAR 28
66668: PUSH
66669: LD_INT 12
66671: ST_TO_ADDR
// hc_gallery =  ;
66672: LD_ADDR_OWVAR 33
66676: PUSH
66677: LD_STRING 
66679: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66680: LD_ADDR_OWVAR 35
66684: PUSH
66685: LD_INT 2
66687: NEG
66688: PPUSH
66689: LD_INT 2
66691: PPUSH
66692: CALL_OW 12
66696: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66697: LD_ADDR_OWVAR 31
66701: PUSH
66702: LD_INT 1
66704: PPUSH
66705: LD_INT 3
66707: PPUSH
66708: CALL_OW 12
66712: PUSH
66713: LD_INT 1
66715: PPUSH
66716: LD_INT 3
66718: PPUSH
66719: CALL_OW 12
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: ST_TO_ADDR
// animal := CreateHuman ;
66736: LD_ADDR_VAR 0 12
66740: PUSH
66741: CALL_OW 44
66745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66746: LD_VAR 0 12
66750: PPUSH
66751: LD_VAR 0 8
66755: PPUSH
66756: LD_INT 0
66758: PPUSH
66759: CALL 68598 0 3
// end ;
66763: GO 66661
66765: POP
66766: POP
// if enchidnas then
66767: LD_VAR 0 4
66771: IFFALSE 66838
// for i = 1 to enchidnas do
66773: LD_ADDR_VAR 0 11
66777: PUSH
66778: DOUBLE
66779: LD_INT 1
66781: DEC
66782: ST_TO_ADDR
66783: LD_VAR 0 4
66787: PUSH
66788: FOR_TO
66789: IFFALSE 66836
// begin hc_class = 13 ;
66791: LD_ADDR_OWVAR 28
66795: PUSH
66796: LD_INT 13
66798: ST_TO_ADDR
// hc_gallery =  ;
66799: LD_ADDR_OWVAR 33
66803: PUSH
66804: LD_STRING 
66806: ST_TO_ADDR
// animal := CreateHuman ;
66807: LD_ADDR_VAR 0 12
66811: PUSH
66812: CALL_OW 44
66816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66817: LD_VAR 0 12
66821: PPUSH
66822: LD_VAR 0 8
66826: PPUSH
66827: LD_INT 0
66829: PPUSH
66830: CALL 68598 0 3
// end ;
66834: GO 66788
66836: POP
66837: POP
// if fishes then
66838: LD_VAR 0 7
66842: IFFALSE 66909
// for i = 1 to fishes do
66844: LD_ADDR_VAR 0 11
66848: PUSH
66849: DOUBLE
66850: LD_INT 1
66852: DEC
66853: ST_TO_ADDR
66854: LD_VAR 0 7
66858: PUSH
66859: FOR_TO
66860: IFFALSE 66907
// begin hc_class = 20 ;
66862: LD_ADDR_OWVAR 28
66866: PUSH
66867: LD_INT 20
66869: ST_TO_ADDR
// hc_gallery =  ;
66870: LD_ADDR_OWVAR 33
66874: PUSH
66875: LD_STRING 
66877: ST_TO_ADDR
// animal := CreateHuman ;
66878: LD_ADDR_VAR 0 12
66882: PUSH
66883: CALL_OW 44
66887: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66888: LD_VAR 0 12
66892: PPUSH
66893: LD_VAR 0 9
66897: PPUSH
66898: LD_INT 0
66900: PPUSH
66901: CALL 68598 0 3
// end ;
66905: GO 66859
66907: POP
66908: POP
// end ;
66909: LD_VAR 0 10
66913: RET
// export function WantHeal ( sci , unit ) ; begin
66914: LD_INT 0
66916: PPUSH
// if GetTaskList ( sci ) > 0 then
66917: LD_VAR 0 1
66921: PPUSH
66922: CALL_OW 437
66926: PUSH
66927: LD_INT 0
66929: GREATER
66930: IFFALSE 67000
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66932: LD_VAR 0 1
66936: PPUSH
66937: CALL_OW 437
66941: PUSH
66942: LD_INT 1
66944: ARRAY
66945: PUSH
66946: LD_INT 1
66948: ARRAY
66949: PUSH
66950: LD_STRING l
66952: EQUAL
66953: PUSH
66954: LD_VAR 0 1
66958: PPUSH
66959: CALL_OW 437
66963: PUSH
66964: LD_INT 1
66966: ARRAY
66967: PUSH
66968: LD_INT 4
66970: ARRAY
66971: PUSH
66972: LD_VAR 0 2
66976: EQUAL
66977: AND
66978: IFFALSE 66990
// result := true else
66980: LD_ADDR_VAR 0 3
66984: PUSH
66985: LD_INT 1
66987: ST_TO_ADDR
66988: GO 66998
// result := false ;
66990: LD_ADDR_VAR 0 3
66994: PUSH
66995: LD_INT 0
66997: ST_TO_ADDR
// end else
66998: GO 67008
// result := false ;
67000: LD_ADDR_VAR 0 3
67004: PUSH
67005: LD_INT 0
67007: ST_TO_ADDR
// end ;
67008: LD_VAR 0 3
67012: RET
// export function HealTarget ( sci ) ; begin
67013: LD_INT 0
67015: PPUSH
// if not sci then
67016: LD_VAR 0 1
67020: NOT
67021: IFFALSE 67025
// exit ;
67023: GO 67090
// result := 0 ;
67025: LD_ADDR_VAR 0 2
67029: PUSH
67030: LD_INT 0
67032: ST_TO_ADDR
// if GetTaskList ( sci ) then
67033: LD_VAR 0 1
67037: PPUSH
67038: CALL_OW 437
67042: IFFALSE 67090
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67044: LD_VAR 0 1
67048: PPUSH
67049: CALL_OW 437
67053: PUSH
67054: LD_INT 1
67056: ARRAY
67057: PUSH
67058: LD_INT 1
67060: ARRAY
67061: PUSH
67062: LD_STRING l
67064: EQUAL
67065: IFFALSE 67090
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67067: LD_ADDR_VAR 0 2
67071: PUSH
67072: LD_VAR 0 1
67076: PPUSH
67077: CALL_OW 437
67081: PUSH
67082: LD_INT 1
67084: ARRAY
67085: PUSH
67086: LD_INT 4
67088: ARRAY
67089: ST_TO_ADDR
// end ;
67090: LD_VAR 0 2
67094: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67095: LD_INT 0
67097: PPUSH
67098: PPUSH
67099: PPUSH
67100: PPUSH
// if not base_units then
67101: LD_VAR 0 1
67105: NOT
67106: IFFALSE 67110
// exit ;
67108: GO 67197
// result := false ;
67110: LD_ADDR_VAR 0 2
67114: PUSH
67115: LD_INT 0
67117: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67118: LD_ADDR_VAR 0 5
67122: PUSH
67123: LD_VAR 0 1
67127: PPUSH
67128: LD_INT 21
67130: PUSH
67131: LD_INT 3
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PPUSH
67138: CALL_OW 72
67142: ST_TO_ADDR
// if not tmp then
67143: LD_VAR 0 5
67147: NOT
67148: IFFALSE 67152
// exit ;
67150: GO 67197
// for i in tmp do
67152: LD_ADDR_VAR 0 3
67156: PUSH
67157: LD_VAR 0 5
67161: PUSH
67162: FOR_IN
67163: IFFALSE 67195
// begin result := EnemyInRange ( i , 22 ) ;
67165: LD_ADDR_VAR 0 2
67169: PUSH
67170: LD_VAR 0 3
67174: PPUSH
67175: LD_INT 22
67177: PPUSH
67178: CALL 65433 0 2
67182: ST_TO_ADDR
// if result then
67183: LD_VAR 0 2
67187: IFFALSE 67193
// exit ;
67189: POP
67190: POP
67191: GO 67197
// end ;
67193: GO 67162
67195: POP
67196: POP
// end ;
67197: LD_VAR 0 2
67201: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67202: LD_INT 0
67204: PPUSH
67205: PPUSH
// if not units then
67206: LD_VAR 0 1
67210: NOT
67211: IFFALSE 67215
// exit ;
67213: GO 67285
// result := [ ] ;
67215: LD_ADDR_VAR 0 3
67219: PUSH
67220: EMPTY
67221: ST_TO_ADDR
// for i in units do
67222: LD_ADDR_VAR 0 4
67226: PUSH
67227: LD_VAR 0 1
67231: PUSH
67232: FOR_IN
67233: IFFALSE 67283
// if GetTag ( i ) = tag then
67235: LD_VAR 0 4
67239: PPUSH
67240: CALL_OW 110
67244: PUSH
67245: LD_VAR 0 2
67249: EQUAL
67250: IFFALSE 67281
// result := Replace ( result , result + 1 , i ) ;
67252: LD_ADDR_VAR 0 3
67256: PUSH
67257: LD_VAR 0 3
67261: PPUSH
67262: LD_VAR 0 3
67266: PUSH
67267: LD_INT 1
67269: PLUS
67270: PPUSH
67271: LD_VAR 0 4
67275: PPUSH
67276: CALL_OW 1
67280: ST_TO_ADDR
67281: GO 67232
67283: POP
67284: POP
// end ;
67285: LD_VAR 0 3
67289: RET
// export function IsDriver ( un ) ; begin
67290: LD_INT 0
67292: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67293: LD_ADDR_VAR 0 2
67297: PUSH
67298: LD_VAR 0 1
67302: PUSH
67303: LD_INT 55
67305: PUSH
67306: EMPTY
67307: LIST
67308: PPUSH
67309: CALL_OW 69
67313: IN
67314: ST_TO_ADDR
// end ;
67315: LD_VAR 0 2
67319: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67320: LD_INT 0
67322: PPUSH
67323: PPUSH
// list := [ ] ;
67324: LD_ADDR_VAR 0 5
67328: PUSH
67329: EMPTY
67330: ST_TO_ADDR
// case d of 0 :
67331: LD_VAR 0 3
67335: PUSH
67336: LD_INT 0
67338: DOUBLE
67339: EQUAL
67340: IFTRUE 67344
67342: GO 67477
67344: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67345: LD_ADDR_VAR 0 5
67349: PUSH
67350: LD_VAR 0 1
67354: PUSH
67355: LD_INT 4
67357: MINUS
67358: PUSH
67359: LD_VAR 0 2
67363: PUSH
67364: LD_INT 4
67366: MINUS
67367: PUSH
67368: LD_INT 2
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: PUSH
67376: LD_VAR 0 1
67380: PUSH
67381: LD_INT 3
67383: MINUS
67384: PUSH
67385: LD_VAR 0 2
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: LIST
67397: PUSH
67398: LD_VAR 0 1
67402: PUSH
67403: LD_INT 4
67405: PLUS
67406: PUSH
67407: LD_VAR 0 2
67411: PUSH
67412: LD_INT 4
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: LIST
67419: PUSH
67420: LD_VAR 0 1
67424: PUSH
67425: LD_INT 3
67427: PLUS
67428: PUSH
67429: LD_VAR 0 2
67433: PUSH
67434: LD_INT 3
67436: PLUS
67437: PUSH
67438: LD_INT 5
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: LIST
67445: PUSH
67446: LD_VAR 0 1
67450: PUSH
67451: LD_VAR 0 2
67455: PUSH
67456: LD_INT 4
67458: PLUS
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: LIST
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: ST_TO_ADDR
// end ; 1 :
67475: GO 68175
67477: LD_INT 1
67479: DOUBLE
67480: EQUAL
67481: IFTRUE 67485
67483: GO 67618
67485: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67486: LD_ADDR_VAR 0 5
67490: PUSH
67491: LD_VAR 0 1
67495: PUSH
67496: LD_VAR 0 2
67500: PUSH
67501: LD_INT 4
67503: MINUS
67504: PUSH
67505: LD_INT 3
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: PUSH
67513: LD_VAR 0 1
67517: PUSH
67518: LD_INT 3
67520: MINUS
67521: PUSH
67522: LD_VAR 0 2
67526: PUSH
67527: LD_INT 3
67529: MINUS
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: PUSH
67539: LD_VAR 0 1
67543: PUSH
67544: LD_INT 4
67546: MINUS
67547: PUSH
67548: LD_VAR 0 2
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: PUSH
67561: LD_VAR 0 1
67565: PUSH
67566: LD_VAR 0 2
67570: PUSH
67571: LD_INT 3
67573: PLUS
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: PUSH
67583: LD_VAR 0 1
67587: PUSH
67588: LD_INT 4
67590: PLUS
67591: PUSH
67592: LD_VAR 0 2
67596: PUSH
67597: LD_INT 4
67599: PLUS
67600: PUSH
67601: LD_INT 5
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: ST_TO_ADDR
// end ; 2 :
67616: GO 68175
67618: LD_INT 2
67620: DOUBLE
67621: EQUAL
67622: IFTRUE 67626
67624: GO 67755
67626: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67627: LD_ADDR_VAR 0 5
67631: PUSH
67632: LD_VAR 0 1
67636: PUSH
67637: LD_VAR 0 2
67641: PUSH
67642: LD_INT 3
67644: MINUS
67645: PUSH
67646: LD_INT 3
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: LIST
67653: PUSH
67654: LD_VAR 0 1
67658: PUSH
67659: LD_INT 4
67661: PLUS
67662: PUSH
67663: LD_VAR 0 2
67667: PUSH
67668: LD_INT 4
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: LIST
67675: PUSH
67676: LD_VAR 0 1
67680: PUSH
67681: LD_VAR 0 2
67685: PUSH
67686: LD_INT 4
67688: PLUS
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: PUSH
67698: LD_VAR 0 1
67702: PUSH
67703: LD_INT 3
67705: MINUS
67706: PUSH
67707: LD_VAR 0 2
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: PUSH
67720: LD_VAR 0 1
67724: PUSH
67725: LD_INT 4
67727: MINUS
67728: PUSH
67729: LD_VAR 0 2
67733: PUSH
67734: LD_INT 4
67736: MINUS
67737: PUSH
67738: LD_INT 2
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: ST_TO_ADDR
// end ; 3 :
67753: GO 68175
67755: LD_INT 3
67757: DOUBLE
67758: EQUAL
67759: IFTRUE 67763
67761: GO 67896
67763: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67764: LD_ADDR_VAR 0 5
67768: PUSH
67769: LD_VAR 0 1
67773: PUSH
67774: LD_INT 3
67776: PLUS
67777: PUSH
67778: LD_VAR 0 2
67782: PUSH
67783: LD_INT 4
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: LIST
67790: PUSH
67791: LD_VAR 0 1
67795: PUSH
67796: LD_INT 4
67798: PLUS
67799: PUSH
67800: LD_VAR 0 2
67804: PUSH
67805: LD_INT 4
67807: PLUS
67808: PUSH
67809: LD_INT 5
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: PUSH
67817: LD_VAR 0 1
67821: PUSH
67822: LD_INT 4
67824: MINUS
67825: PUSH
67826: LD_VAR 0 2
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: PUSH
67839: LD_VAR 0 1
67843: PUSH
67844: LD_VAR 0 2
67848: PUSH
67849: LD_INT 4
67851: MINUS
67852: PUSH
67853: LD_INT 3
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: LIST
67860: PUSH
67861: LD_VAR 0 1
67865: PUSH
67866: LD_INT 3
67868: MINUS
67869: PUSH
67870: LD_VAR 0 2
67874: PUSH
67875: LD_INT 3
67877: MINUS
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: ST_TO_ADDR
// end ; 4 :
67894: GO 68175
67896: LD_INT 4
67898: DOUBLE
67899: EQUAL
67900: IFTRUE 67904
67902: GO 68037
67904: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67905: LD_ADDR_VAR 0 5
67909: PUSH
67910: LD_VAR 0 1
67914: PUSH
67915: LD_VAR 0 2
67919: PUSH
67920: LD_INT 4
67922: PLUS
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: LIST
67931: PUSH
67932: LD_VAR 0 1
67936: PUSH
67937: LD_INT 3
67939: PLUS
67940: PUSH
67941: LD_VAR 0 2
67945: PUSH
67946: LD_INT 3
67948: PLUS
67949: PUSH
67950: LD_INT 5
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: PUSH
67958: LD_VAR 0 1
67962: PUSH
67963: LD_INT 4
67965: PLUS
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: LD_INT 4
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: LIST
67979: PUSH
67980: LD_VAR 0 1
67984: PUSH
67985: LD_VAR 0 2
67989: PUSH
67990: LD_INT 3
67992: MINUS
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: LIST
68001: PUSH
68002: LD_VAR 0 1
68006: PUSH
68007: LD_INT 4
68009: MINUS
68010: PUSH
68011: LD_VAR 0 2
68015: PUSH
68016: LD_INT 4
68018: MINUS
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: LIST
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: ST_TO_ADDR
// end ; 5 :
68035: GO 68175
68037: LD_INT 5
68039: DOUBLE
68040: EQUAL
68041: IFTRUE 68045
68043: GO 68174
68045: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68046: LD_ADDR_VAR 0 5
68050: PUSH
68051: LD_VAR 0 1
68055: PUSH
68056: LD_INT 4
68058: MINUS
68059: PUSH
68060: LD_VAR 0 2
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: LIST
68072: PUSH
68073: LD_VAR 0 1
68077: PUSH
68078: LD_VAR 0 2
68082: PUSH
68083: LD_INT 4
68085: MINUS
68086: PUSH
68087: LD_INT 3
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: PUSH
68095: LD_VAR 0 1
68099: PUSH
68100: LD_INT 4
68102: PLUS
68103: PUSH
68104: LD_VAR 0 2
68108: PUSH
68109: LD_INT 4
68111: PLUS
68112: PUSH
68113: LD_INT 5
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: PUSH
68121: LD_VAR 0 1
68125: PUSH
68126: LD_INT 3
68128: PLUS
68129: PUSH
68130: LD_VAR 0 2
68134: PUSH
68135: LD_INT 4
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: PUSH
68143: LD_VAR 0 1
68147: PUSH
68148: LD_VAR 0 2
68152: PUSH
68153: LD_INT 3
68155: PLUS
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: ST_TO_ADDR
// end ; end ;
68172: GO 68175
68174: POP
// result := list ;
68175: LD_ADDR_VAR 0 4
68179: PUSH
68180: LD_VAR 0 5
68184: ST_TO_ADDR
// end ;
68185: LD_VAR 0 4
68189: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68190: LD_INT 0
68192: PPUSH
68193: PPUSH
68194: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68195: LD_VAR 0 1
68199: NOT
68200: PUSH
68201: LD_VAR 0 2
68205: PUSH
68206: LD_INT 1
68208: PUSH
68209: LD_INT 2
68211: PUSH
68212: LD_INT 3
68214: PUSH
68215: LD_INT 4
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: IN
68224: NOT
68225: OR
68226: IFFALSE 68230
// exit ;
68228: GO 68322
// tmp := [ ] ;
68230: LD_ADDR_VAR 0 5
68234: PUSH
68235: EMPTY
68236: ST_TO_ADDR
// for i in units do
68237: LD_ADDR_VAR 0 4
68241: PUSH
68242: LD_VAR 0 1
68246: PUSH
68247: FOR_IN
68248: IFFALSE 68291
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68250: LD_ADDR_VAR 0 5
68254: PUSH
68255: LD_VAR 0 5
68259: PPUSH
68260: LD_VAR 0 5
68264: PUSH
68265: LD_INT 1
68267: PLUS
68268: PPUSH
68269: LD_VAR 0 4
68273: PPUSH
68274: LD_VAR 0 2
68278: PPUSH
68279: CALL_OW 259
68283: PPUSH
68284: CALL_OW 2
68288: ST_TO_ADDR
68289: GO 68247
68291: POP
68292: POP
// if not tmp then
68293: LD_VAR 0 5
68297: NOT
68298: IFFALSE 68302
// exit ;
68300: GO 68322
// result := SortListByListDesc ( units , tmp ) ;
68302: LD_ADDR_VAR 0 3
68306: PUSH
68307: LD_VAR 0 1
68311: PPUSH
68312: LD_VAR 0 5
68316: PPUSH
68317: CALL_OW 77
68321: ST_TO_ADDR
// end ;
68322: LD_VAR 0 3
68326: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68327: LD_INT 0
68329: PPUSH
68330: PPUSH
68331: PPUSH
// result := false ;
68332: LD_ADDR_VAR 0 3
68336: PUSH
68337: LD_INT 0
68339: ST_TO_ADDR
// x := GetX ( building ) ;
68340: LD_ADDR_VAR 0 4
68344: PUSH
68345: LD_VAR 0 2
68349: PPUSH
68350: CALL_OW 250
68354: ST_TO_ADDR
// y := GetY ( building ) ;
68355: LD_ADDR_VAR 0 5
68359: PUSH
68360: LD_VAR 0 2
68364: PPUSH
68365: CALL_OW 251
68369: ST_TO_ADDR
// if not building or not x or not y then
68370: LD_VAR 0 2
68374: NOT
68375: PUSH
68376: LD_VAR 0 4
68380: NOT
68381: OR
68382: PUSH
68383: LD_VAR 0 5
68387: NOT
68388: OR
68389: IFFALSE 68393
// exit ;
68391: GO 68485
// if GetTaskList ( unit ) then
68393: LD_VAR 0 1
68397: PPUSH
68398: CALL_OW 437
68402: IFFALSE 68485
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68404: LD_STRING e
68406: PUSH
68407: LD_VAR 0 1
68411: PPUSH
68412: CALL_OW 437
68416: PUSH
68417: LD_INT 1
68419: ARRAY
68420: PUSH
68421: LD_INT 1
68423: ARRAY
68424: EQUAL
68425: PUSH
68426: LD_VAR 0 4
68430: PUSH
68431: LD_VAR 0 1
68435: PPUSH
68436: CALL_OW 437
68440: PUSH
68441: LD_INT 1
68443: ARRAY
68444: PUSH
68445: LD_INT 2
68447: ARRAY
68448: EQUAL
68449: AND
68450: PUSH
68451: LD_VAR 0 5
68455: PUSH
68456: LD_VAR 0 1
68460: PPUSH
68461: CALL_OW 437
68465: PUSH
68466: LD_INT 1
68468: ARRAY
68469: PUSH
68470: LD_INT 3
68472: ARRAY
68473: EQUAL
68474: AND
68475: IFFALSE 68485
// result := true end ;
68477: LD_ADDR_VAR 0 3
68481: PUSH
68482: LD_INT 1
68484: ST_TO_ADDR
// end ;
68485: LD_VAR 0 3
68489: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68490: LD_INT 0
68492: PPUSH
// result := false ;
68493: LD_ADDR_VAR 0 4
68497: PUSH
68498: LD_INT 0
68500: ST_TO_ADDR
// if GetTaskList ( unit ) then
68501: LD_VAR 0 1
68505: PPUSH
68506: CALL_OW 437
68510: IFFALSE 68593
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68512: LD_STRING M
68514: PUSH
68515: LD_VAR 0 1
68519: PPUSH
68520: CALL_OW 437
68524: PUSH
68525: LD_INT 1
68527: ARRAY
68528: PUSH
68529: LD_INT 1
68531: ARRAY
68532: EQUAL
68533: PUSH
68534: LD_VAR 0 2
68538: PUSH
68539: LD_VAR 0 1
68543: PPUSH
68544: CALL_OW 437
68548: PUSH
68549: LD_INT 1
68551: ARRAY
68552: PUSH
68553: LD_INT 2
68555: ARRAY
68556: EQUAL
68557: AND
68558: PUSH
68559: LD_VAR 0 3
68563: PUSH
68564: LD_VAR 0 1
68568: PPUSH
68569: CALL_OW 437
68573: PUSH
68574: LD_INT 1
68576: ARRAY
68577: PUSH
68578: LD_INT 3
68580: ARRAY
68581: EQUAL
68582: AND
68583: IFFALSE 68593
// result := true ;
68585: LD_ADDR_VAR 0 4
68589: PUSH
68590: LD_INT 1
68592: ST_TO_ADDR
// end ; end ;
68593: LD_VAR 0 4
68597: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68598: LD_INT 0
68600: PPUSH
68601: PPUSH
68602: PPUSH
68603: PPUSH
// if not unit or not area then
68604: LD_VAR 0 1
68608: NOT
68609: PUSH
68610: LD_VAR 0 2
68614: NOT
68615: OR
68616: IFFALSE 68620
// exit ;
68618: GO 68784
// tmp := AreaToList ( area , i ) ;
68620: LD_ADDR_VAR 0 6
68624: PUSH
68625: LD_VAR 0 2
68629: PPUSH
68630: LD_VAR 0 5
68634: PPUSH
68635: CALL_OW 517
68639: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68640: LD_ADDR_VAR 0 5
68644: PUSH
68645: DOUBLE
68646: LD_INT 1
68648: DEC
68649: ST_TO_ADDR
68650: LD_VAR 0 6
68654: PUSH
68655: LD_INT 1
68657: ARRAY
68658: PUSH
68659: FOR_TO
68660: IFFALSE 68782
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68662: LD_ADDR_VAR 0 7
68666: PUSH
68667: LD_VAR 0 6
68671: PUSH
68672: LD_INT 1
68674: ARRAY
68675: PUSH
68676: LD_VAR 0 5
68680: ARRAY
68681: PUSH
68682: LD_VAR 0 6
68686: PUSH
68687: LD_INT 2
68689: ARRAY
68690: PUSH
68691: LD_VAR 0 5
68695: ARRAY
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68701: LD_VAR 0 7
68705: PUSH
68706: LD_INT 1
68708: ARRAY
68709: PPUSH
68710: LD_VAR 0 7
68714: PUSH
68715: LD_INT 2
68717: ARRAY
68718: PPUSH
68719: CALL_OW 428
68723: PUSH
68724: LD_INT 0
68726: EQUAL
68727: IFFALSE 68780
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68729: LD_VAR 0 1
68733: PPUSH
68734: LD_VAR 0 7
68738: PUSH
68739: LD_INT 1
68741: ARRAY
68742: PPUSH
68743: LD_VAR 0 7
68747: PUSH
68748: LD_INT 2
68750: ARRAY
68751: PPUSH
68752: LD_VAR 0 3
68756: PPUSH
68757: CALL_OW 48
// result := IsPlaced ( unit ) ;
68761: LD_ADDR_VAR 0 4
68765: PUSH
68766: LD_VAR 0 1
68770: PPUSH
68771: CALL_OW 305
68775: ST_TO_ADDR
// exit ;
68776: POP
68777: POP
68778: GO 68784
// end ; end ;
68780: GO 68659
68782: POP
68783: POP
// end ;
68784: LD_VAR 0 4
68788: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68789: LD_INT 0
68791: PPUSH
68792: PPUSH
68793: PPUSH
// if not side or side > 8 then
68794: LD_VAR 0 1
68798: NOT
68799: PUSH
68800: LD_VAR 0 1
68804: PUSH
68805: LD_INT 8
68807: GREATER
68808: OR
68809: IFFALSE 68813
// exit ;
68811: GO 69000
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68813: LD_ADDR_VAR 0 4
68817: PUSH
68818: LD_INT 22
68820: PUSH
68821: LD_VAR 0 1
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 21
68832: PUSH
68833: LD_INT 3
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PPUSH
68844: CALL_OW 69
68848: ST_TO_ADDR
// if not tmp then
68849: LD_VAR 0 4
68853: NOT
68854: IFFALSE 68858
// exit ;
68856: GO 69000
// enable_addtolog := true ;
68858: LD_ADDR_OWVAR 81
68862: PUSH
68863: LD_INT 1
68865: ST_TO_ADDR
// AddToLog ( [ ) ;
68866: LD_STRING [
68868: PPUSH
68869: CALL_OW 561
// for i in tmp do
68873: LD_ADDR_VAR 0 3
68877: PUSH
68878: LD_VAR 0 4
68882: PUSH
68883: FOR_IN
68884: IFFALSE 68991
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68886: LD_STRING [
68888: PUSH
68889: LD_VAR 0 3
68893: PPUSH
68894: CALL_OW 266
68898: STR
68899: PUSH
68900: LD_STRING , 
68902: STR
68903: PUSH
68904: LD_VAR 0 3
68908: PPUSH
68909: CALL_OW 250
68913: STR
68914: PUSH
68915: LD_STRING , 
68917: STR
68918: PUSH
68919: LD_VAR 0 3
68923: PPUSH
68924: CALL_OW 251
68928: STR
68929: PUSH
68930: LD_STRING , 
68932: STR
68933: PUSH
68934: LD_VAR 0 3
68938: PPUSH
68939: CALL_OW 254
68943: STR
68944: PUSH
68945: LD_STRING , 
68947: STR
68948: PUSH
68949: LD_VAR 0 3
68953: PPUSH
68954: LD_INT 1
68956: PPUSH
68957: CALL_OW 268
68961: STR
68962: PUSH
68963: LD_STRING , 
68965: STR
68966: PUSH
68967: LD_VAR 0 3
68971: PPUSH
68972: LD_INT 2
68974: PPUSH
68975: CALL_OW 268
68979: STR
68980: PUSH
68981: LD_STRING ],
68983: STR
68984: PPUSH
68985: CALL_OW 561
// end ;
68989: GO 68883
68991: POP
68992: POP
// AddToLog ( ]; ) ;
68993: LD_STRING ];
68995: PPUSH
68996: CALL_OW 561
// end ;
69000: LD_VAR 0 2
69004: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69005: LD_INT 0
69007: PPUSH
69008: PPUSH
69009: PPUSH
69010: PPUSH
69011: PPUSH
// if not area or not rate or not max then
69012: LD_VAR 0 1
69016: NOT
69017: PUSH
69018: LD_VAR 0 2
69022: NOT
69023: OR
69024: PUSH
69025: LD_VAR 0 4
69029: NOT
69030: OR
69031: IFFALSE 69035
// exit ;
69033: GO 69227
// while 1 do
69035: LD_INT 1
69037: IFFALSE 69227
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69039: LD_ADDR_VAR 0 9
69043: PUSH
69044: LD_VAR 0 1
69048: PPUSH
69049: LD_INT 1
69051: PPUSH
69052: CALL_OW 287
69056: PUSH
69057: LD_INT 10
69059: MUL
69060: ST_TO_ADDR
// r := rate / 10 ;
69061: LD_ADDR_VAR 0 7
69065: PUSH
69066: LD_VAR 0 2
69070: PUSH
69071: LD_INT 10
69073: DIVREAL
69074: ST_TO_ADDR
// time := 1 1$00 ;
69075: LD_ADDR_VAR 0 8
69079: PUSH
69080: LD_INT 2100
69082: ST_TO_ADDR
// if amount < min then
69083: LD_VAR 0 9
69087: PUSH
69088: LD_VAR 0 3
69092: LESS
69093: IFFALSE 69111
// r := r * 2 else
69095: LD_ADDR_VAR 0 7
69099: PUSH
69100: LD_VAR 0 7
69104: PUSH
69105: LD_INT 2
69107: MUL
69108: ST_TO_ADDR
69109: GO 69137
// if amount > max then
69111: LD_VAR 0 9
69115: PUSH
69116: LD_VAR 0 4
69120: GREATER
69121: IFFALSE 69137
// r := r / 2 ;
69123: LD_ADDR_VAR 0 7
69127: PUSH
69128: LD_VAR 0 7
69132: PUSH
69133: LD_INT 2
69135: DIVREAL
69136: ST_TO_ADDR
// time := time / r ;
69137: LD_ADDR_VAR 0 8
69141: PUSH
69142: LD_VAR 0 8
69146: PUSH
69147: LD_VAR 0 7
69151: DIVREAL
69152: ST_TO_ADDR
// if time < 0 then
69153: LD_VAR 0 8
69157: PUSH
69158: LD_INT 0
69160: LESS
69161: IFFALSE 69178
// time := time * - 1 ;
69163: LD_ADDR_VAR 0 8
69167: PUSH
69168: LD_VAR 0 8
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: MUL
69177: ST_TO_ADDR
// wait ( time ) ;
69178: LD_VAR 0 8
69182: PPUSH
69183: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69187: LD_INT 35
69189: PPUSH
69190: LD_INT 875
69192: PPUSH
69193: CALL_OW 12
69197: PPUSH
69198: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69202: LD_INT 1
69204: PPUSH
69205: LD_INT 5
69207: PPUSH
69208: CALL_OW 12
69212: PPUSH
69213: LD_VAR 0 1
69217: PPUSH
69218: LD_INT 1
69220: PPUSH
69221: CALL_OW 55
// end ;
69225: GO 69035
// end ;
69227: LD_VAR 0 5
69231: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69232: LD_INT 0
69234: PPUSH
69235: PPUSH
69236: PPUSH
69237: PPUSH
69238: PPUSH
69239: PPUSH
69240: PPUSH
69241: PPUSH
// if not turrets or not factories then
69242: LD_VAR 0 1
69246: NOT
69247: PUSH
69248: LD_VAR 0 2
69252: NOT
69253: OR
69254: IFFALSE 69258
// exit ;
69256: GO 69565
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69258: LD_ADDR_VAR 0 10
69262: PUSH
69263: LD_INT 5
69265: PUSH
69266: LD_INT 6
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: LD_INT 4
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 3
69285: PUSH
69286: LD_INT 5
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 24
69300: PUSH
69301: LD_INT 25
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 23
69310: PUSH
69311: LD_INT 27
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 42
69324: PUSH
69325: LD_INT 43
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 44
69334: PUSH
69335: LD_INT 46
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 45
69344: PUSH
69345: LD_INT 47
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: LIST
69361: ST_TO_ADDR
// result := [ ] ;
69362: LD_ADDR_VAR 0 3
69366: PUSH
69367: EMPTY
69368: ST_TO_ADDR
// for i in turrets do
69369: LD_ADDR_VAR 0 4
69373: PUSH
69374: LD_VAR 0 1
69378: PUSH
69379: FOR_IN
69380: IFFALSE 69563
// begin nat := GetNation ( i ) ;
69382: LD_ADDR_VAR 0 7
69386: PUSH
69387: LD_VAR 0 4
69391: PPUSH
69392: CALL_OW 248
69396: ST_TO_ADDR
// weapon := 0 ;
69397: LD_ADDR_VAR 0 8
69401: PUSH
69402: LD_INT 0
69404: ST_TO_ADDR
// if not nat then
69405: LD_VAR 0 7
69409: NOT
69410: IFFALSE 69414
// continue ;
69412: GO 69379
// for j in list [ nat ] do
69414: LD_ADDR_VAR 0 5
69418: PUSH
69419: LD_VAR 0 10
69423: PUSH
69424: LD_VAR 0 7
69428: ARRAY
69429: PUSH
69430: FOR_IN
69431: IFFALSE 69472
// if GetBWeapon ( i ) = j [ 1 ] then
69433: LD_VAR 0 4
69437: PPUSH
69438: CALL_OW 269
69442: PUSH
69443: LD_VAR 0 5
69447: PUSH
69448: LD_INT 1
69450: ARRAY
69451: EQUAL
69452: IFFALSE 69470
// begin weapon := j [ 2 ] ;
69454: LD_ADDR_VAR 0 8
69458: PUSH
69459: LD_VAR 0 5
69463: PUSH
69464: LD_INT 2
69466: ARRAY
69467: ST_TO_ADDR
// break ;
69468: GO 69472
// end ;
69470: GO 69430
69472: POP
69473: POP
// if not weapon then
69474: LD_VAR 0 8
69478: NOT
69479: IFFALSE 69483
// continue ;
69481: GO 69379
// for k in factories do
69483: LD_ADDR_VAR 0 6
69487: PUSH
69488: LD_VAR 0 2
69492: PUSH
69493: FOR_IN
69494: IFFALSE 69559
// begin weapons := AvailableWeaponList ( k ) ;
69496: LD_ADDR_VAR 0 9
69500: PUSH
69501: LD_VAR 0 6
69505: PPUSH
69506: CALL_OW 478
69510: ST_TO_ADDR
// if not weapons then
69511: LD_VAR 0 9
69515: NOT
69516: IFFALSE 69520
// continue ;
69518: GO 69493
// if weapon in weapons then
69520: LD_VAR 0 8
69524: PUSH
69525: LD_VAR 0 9
69529: IN
69530: IFFALSE 69557
// begin result := [ i , weapon ] ;
69532: LD_ADDR_VAR 0 3
69536: PUSH
69537: LD_VAR 0 4
69541: PUSH
69542: LD_VAR 0 8
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: ST_TO_ADDR
// exit ;
69551: POP
69552: POP
69553: POP
69554: POP
69555: GO 69565
// end ; end ;
69557: GO 69493
69559: POP
69560: POP
// end ;
69561: GO 69379
69563: POP
69564: POP
// end ;
69565: LD_VAR 0 3
69569: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69570: LD_INT 0
69572: PPUSH
// if not side or side > 8 then
69573: LD_VAR 0 3
69577: NOT
69578: PUSH
69579: LD_VAR 0 3
69583: PUSH
69584: LD_INT 8
69586: GREATER
69587: OR
69588: IFFALSE 69592
// exit ;
69590: GO 69651
// if not range then
69592: LD_VAR 0 4
69596: NOT
69597: IFFALSE 69608
// range := - 12 ;
69599: LD_ADDR_VAR 0 4
69603: PUSH
69604: LD_INT 12
69606: NEG
69607: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69608: LD_VAR 0 1
69612: PPUSH
69613: LD_VAR 0 2
69617: PPUSH
69618: LD_VAR 0 3
69622: PPUSH
69623: LD_VAR 0 4
69627: PPUSH
69628: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69632: LD_VAR 0 1
69636: PPUSH
69637: LD_VAR 0 2
69641: PPUSH
69642: LD_VAR 0 3
69646: PPUSH
69647: CALL_OW 331
// end ;
69651: LD_VAR 0 5
69655: RET
// export function Video ( mode ) ; begin
69656: LD_INT 0
69658: PPUSH
// ingame_video = mode ;
69659: LD_ADDR_OWVAR 52
69663: PUSH
69664: LD_VAR 0 1
69668: ST_TO_ADDR
// interface_hidden = mode ;
69669: LD_ADDR_OWVAR 54
69673: PUSH
69674: LD_VAR 0 1
69678: ST_TO_ADDR
// end ;
69679: LD_VAR 0 2
69683: RET
// export function Join ( array , element ) ; begin
69684: LD_INT 0
69686: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69687: LD_ADDR_VAR 0 3
69691: PUSH
69692: LD_VAR 0 1
69696: PPUSH
69697: LD_VAR 0 1
69701: PUSH
69702: LD_INT 1
69704: PLUS
69705: PPUSH
69706: LD_VAR 0 2
69710: PPUSH
69711: CALL_OW 1
69715: ST_TO_ADDR
// end ;
69716: LD_VAR 0 3
69720: RET
// export function JoinUnion ( array , element ) ; begin
69721: LD_INT 0
69723: PPUSH
// result := array union element ;
69724: LD_ADDR_VAR 0 3
69728: PUSH
69729: LD_VAR 0 1
69733: PUSH
69734: LD_VAR 0 2
69738: UNION
69739: ST_TO_ADDR
// end ;
69740: LD_VAR 0 3
69744: RET
// export function GetBehemoths ( side ) ; begin
69745: LD_INT 0
69747: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69748: LD_ADDR_VAR 0 2
69752: PUSH
69753: LD_INT 22
69755: PUSH
69756: LD_VAR 0 1
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 31
69767: PUSH
69768: LD_INT 25
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PPUSH
69779: CALL_OW 69
69783: ST_TO_ADDR
// end ;
69784: LD_VAR 0 2
69788: RET
// export function Shuffle ( array ) ; var i , index ; begin
69789: LD_INT 0
69791: PPUSH
69792: PPUSH
69793: PPUSH
// result := [ ] ;
69794: LD_ADDR_VAR 0 2
69798: PUSH
69799: EMPTY
69800: ST_TO_ADDR
// if not array then
69801: LD_VAR 0 1
69805: NOT
69806: IFFALSE 69810
// exit ;
69808: GO 69909
// Randomize ;
69810: CALL_OW 10
// for i = array downto 1 do
69814: LD_ADDR_VAR 0 3
69818: PUSH
69819: DOUBLE
69820: LD_VAR 0 1
69824: INC
69825: ST_TO_ADDR
69826: LD_INT 1
69828: PUSH
69829: FOR_DOWNTO
69830: IFFALSE 69907
// begin index := rand ( 1 , array ) ;
69832: LD_ADDR_VAR 0 4
69836: PUSH
69837: LD_INT 1
69839: PPUSH
69840: LD_VAR 0 1
69844: PPUSH
69845: CALL_OW 12
69849: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69850: LD_ADDR_VAR 0 2
69854: PUSH
69855: LD_VAR 0 2
69859: PPUSH
69860: LD_VAR 0 2
69864: PUSH
69865: LD_INT 1
69867: PLUS
69868: PPUSH
69869: LD_VAR 0 1
69873: PUSH
69874: LD_VAR 0 4
69878: ARRAY
69879: PPUSH
69880: CALL_OW 2
69884: ST_TO_ADDR
// array := Delete ( array , index ) ;
69885: LD_ADDR_VAR 0 1
69889: PUSH
69890: LD_VAR 0 1
69894: PPUSH
69895: LD_VAR 0 4
69899: PPUSH
69900: CALL_OW 3
69904: ST_TO_ADDR
// end ;
69905: GO 69829
69907: POP
69908: POP
// end ;
69909: LD_VAR 0 2
69913: RET
// export function GetBaseMaterials ( base ) ; begin
69914: LD_INT 0
69916: PPUSH
// result := [ 0 , 0 , 0 ] ;
69917: LD_ADDR_VAR 0 2
69921: PUSH
69922: LD_INT 0
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: LIST
69935: ST_TO_ADDR
// if not base then
69936: LD_VAR 0 1
69940: NOT
69941: IFFALSE 69945
// exit ;
69943: GO 69994
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69945: LD_ADDR_VAR 0 2
69949: PUSH
69950: LD_VAR 0 1
69954: PPUSH
69955: LD_INT 1
69957: PPUSH
69958: CALL_OW 275
69962: PUSH
69963: LD_VAR 0 1
69967: PPUSH
69968: LD_INT 2
69970: PPUSH
69971: CALL_OW 275
69975: PUSH
69976: LD_VAR 0 1
69980: PPUSH
69981: LD_INT 3
69983: PPUSH
69984: CALL_OW 275
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: ST_TO_ADDR
// end ;
69994: LD_VAR 0 2
69998: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69999: LD_INT 0
70001: PPUSH
70002: PPUSH
// result := array ;
70003: LD_ADDR_VAR 0 3
70007: PUSH
70008: LD_VAR 0 1
70012: ST_TO_ADDR
// if size > 0 then
70013: LD_VAR 0 2
70017: PUSH
70018: LD_INT 0
70020: GREATER
70021: IFFALSE 70067
// for i := array downto size do
70023: LD_ADDR_VAR 0 4
70027: PUSH
70028: DOUBLE
70029: LD_VAR 0 1
70033: INC
70034: ST_TO_ADDR
70035: LD_VAR 0 2
70039: PUSH
70040: FOR_DOWNTO
70041: IFFALSE 70065
// result := Delete ( result , result ) ;
70043: LD_ADDR_VAR 0 3
70047: PUSH
70048: LD_VAR 0 3
70052: PPUSH
70053: LD_VAR 0 3
70057: PPUSH
70058: CALL_OW 3
70062: ST_TO_ADDR
70063: GO 70040
70065: POP
70066: POP
// end ;
70067: LD_VAR 0 3
70071: RET
// export function ComExit ( unit ) ; var tmp ; begin
70072: LD_INT 0
70074: PPUSH
70075: PPUSH
// if not IsInUnit ( unit ) then
70076: LD_VAR 0 1
70080: PPUSH
70081: CALL_OW 310
70085: NOT
70086: IFFALSE 70090
// exit ;
70088: GO 70150
// tmp := IsInUnit ( unit ) ;
70090: LD_ADDR_VAR 0 3
70094: PUSH
70095: LD_VAR 0 1
70099: PPUSH
70100: CALL_OW 310
70104: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70105: LD_VAR 0 3
70109: PPUSH
70110: CALL_OW 247
70114: PUSH
70115: LD_INT 2
70117: EQUAL
70118: IFFALSE 70131
// ComExitVehicle ( unit ) else
70120: LD_VAR 0 1
70124: PPUSH
70125: CALL_OW 121
70129: GO 70140
// ComExitBuilding ( unit ) ;
70131: LD_VAR 0 1
70135: PPUSH
70136: CALL_OW 122
// result := tmp ;
70140: LD_ADDR_VAR 0 2
70144: PUSH
70145: LD_VAR 0 3
70149: ST_TO_ADDR
// end ;
70150: LD_VAR 0 2
70154: RET
// export function ComExitAll ( units ) ; var i ; begin
70155: LD_INT 0
70157: PPUSH
70158: PPUSH
// if not units then
70159: LD_VAR 0 1
70163: NOT
70164: IFFALSE 70168
// exit ;
70166: GO 70194
// for i in units do
70168: LD_ADDR_VAR 0 3
70172: PUSH
70173: LD_VAR 0 1
70177: PUSH
70178: FOR_IN
70179: IFFALSE 70192
// ComExit ( i ) ;
70181: LD_VAR 0 3
70185: PPUSH
70186: CALL 70072 0 1
70190: GO 70178
70192: POP
70193: POP
// end ;
70194: LD_VAR 0 2
70198: RET
// export function ResetHc ; begin
70199: LD_INT 0
70201: PPUSH
// InitHc ;
70202: CALL_OW 19
// hc_importance := 0 ;
70206: LD_ADDR_OWVAR 32
70210: PUSH
70211: LD_INT 0
70213: ST_TO_ADDR
// end ;
70214: LD_VAR 0 1
70218: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70219: LD_INT 0
70221: PPUSH
70222: PPUSH
70223: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70224: LD_ADDR_VAR 0 6
70228: PUSH
70229: LD_VAR 0 1
70233: PUSH
70234: LD_VAR 0 3
70238: PLUS
70239: PUSH
70240: LD_INT 2
70242: DIV
70243: ST_TO_ADDR
// if _x < 0 then
70244: LD_VAR 0 6
70248: PUSH
70249: LD_INT 0
70251: LESS
70252: IFFALSE 70269
// _x := _x * - 1 ;
70254: LD_ADDR_VAR 0 6
70258: PUSH
70259: LD_VAR 0 6
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: MUL
70268: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70269: LD_ADDR_VAR 0 7
70273: PUSH
70274: LD_VAR 0 2
70278: PUSH
70279: LD_VAR 0 4
70283: PLUS
70284: PUSH
70285: LD_INT 2
70287: DIV
70288: ST_TO_ADDR
// if _y < 0 then
70289: LD_VAR 0 7
70293: PUSH
70294: LD_INT 0
70296: LESS
70297: IFFALSE 70314
// _y := _y * - 1 ;
70299: LD_ADDR_VAR 0 7
70303: PUSH
70304: LD_VAR 0 7
70308: PUSH
70309: LD_INT 1
70311: NEG
70312: MUL
70313: ST_TO_ADDR
// result := [ _x , _y ] ;
70314: LD_ADDR_VAR 0 5
70318: PUSH
70319: LD_VAR 0 6
70323: PUSH
70324: LD_VAR 0 7
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: ST_TO_ADDR
// end ;
70333: LD_VAR 0 5
70337: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70338: LD_INT 0
70340: PPUSH
70341: PPUSH
70342: PPUSH
70343: PPUSH
// task := GetTaskList ( unit ) ;
70344: LD_ADDR_VAR 0 7
70348: PUSH
70349: LD_VAR 0 1
70353: PPUSH
70354: CALL_OW 437
70358: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70359: LD_VAR 0 7
70363: NOT
70364: PUSH
70365: LD_VAR 0 1
70369: PPUSH
70370: LD_VAR 0 2
70374: PPUSH
70375: CALL_OW 308
70379: NOT
70380: AND
70381: IFFALSE 70385
// exit ;
70383: GO 70503
// if IsInArea ( unit , area ) then
70385: LD_VAR 0 1
70389: PPUSH
70390: LD_VAR 0 2
70394: PPUSH
70395: CALL_OW 308
70399: IFFALSE 70417
// begin ComMoveToArea ( unit , goAway ) ;
70401: LD_VAR 0 1
70405: PPUSH
70406: LD_VAR 0 3
70410: PPUSH
70411: CALL_OW 113
// exit ;
70415: GO 70503
// end ; if task [ 1 ] [ 1 ] <> M then
70417: LD_VAR 0 7
70421: PUSH
70422: LD_INT 1
70424: ARRAY
70425: PUSH
70426: LD_INT 1
70428: ARRAY
70429: PUSH
70430: LD_STRING M
70432: NONEQUAL
70433: IFFALSE 70437
// exit ;
70435: GO 70503
// x := task [ 1 ] [ 2 ] ;
70437: LD_ADDR_VAR 0 5
70441: PUSH
70442: LD_VAR 0 7
70446: PUSH
70447: LD_INT 1
70449: ARRAY
70450: PUSH
70451: LD_INT 2
70453: ARRAY
70454: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70455: LD_ADDR_VAR 0 6
70459: PUSH
70460: LD_VAR 0 7
70464: PUSH
70465: LD_INT 1
70467: ARRAY
70468: PUSH
70469: LD_INT 3
70471: ARRAY
70472: ST_TO_ADDR
// if InArea ( x , y , area ) then
70473: LD_VAR 0 5
70477: PPUSH
70478: LD_VAR 0 6
70482: PPUSH
70483: LD_VAR 0 2
70487: PPUSH
70488: CALL_OW 309
70492: IFFALSE 70503
// ComStop ( unit ) ;
70494: LD_VAR 0 1
70498: PPUSH
70499: CALL_OW 141
// end ;
70503: LD_VAR 0 4
70507: RET
// export function Abs ( value ) ; begin
70508: LD_INT 0
70510: PPUSH
// result := value ;
70511: LD_ADDR_VAR 0 2
70515: PUSH
70516: LD_VAR 0 1
70520: ST_TO_ADDR
// if value < 0 then
70521: LD_VAR 0 1
70525: PUSH
70526: LD_INT 0
70528: LESS
70529: IFFALSE 70546
// result := value * - 1 ;
70531: LD_ADDR_VAR 0 2
70535: PUSH
70536: LD_VAR 0 1
70540: PUSH
70541: LD_INT 1
70543: NEG
70544: MUL
70545: ST_TO_ADDR
// end ;
70546: LD_VAR 0 2
70550: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70551: LD_INT 0
70553: PPUSH
70554: PPUSH
70555: PPUSH
70556: PPUSH
70557: PPUSH
70558: PPUSH
70559: PPUSH
70560: PPUSH
// if not unit or not building then
70561: LD_VAR 0 1
70565: NOT
70566: PUSH
70567: LD_VAR 0 2
70571: NOT
70572: OR
70573: IFFALSE 70577
// exit ;
70575: GO 70803
// x := GetX ( building ) ;
70577: LD_ADDR_VAR 0 4
70581: PUSH
70582: LD_VAR 0 2
70586: PPUSH
70587: CALL_OW 250
70591: ST_TO_ADDR
// y := GetY ( building ) ;
70592: LD_ADDR_VAR 0 6
70596: PUSH
70597: LD_VAR 0 2
70601: PPUSH
70602: CALL_OW 251
70606: ST_TO_ADDR
// d := GetDir ( building ) ;
70607: LD_ADDR_VAR 0 8
70611: PUSH
70612: LD_VAR 0 2
70616: PPUSH
70617: CALL_OW 254
70621: ST_TO_ADDR
// r := 4 ;
70622: LD_ADDR_VAR 0 9
70626: PUSH
70627: LD_INT 4
70629: ST_TO_ADDR
// for i := 1 to 5 do
70630: LD_ADDR_VAR 0 10
70634: PUSH
70635: DOUBLE
70636: LD_INT 1
70638: DEC
70639: ST_TO_ADDR
70640: LD_INT 5
70642: PUSH
70643: FOR_TO
70644: IFFALSE 70801
// begin _x := ShiftX ( x , d , r + i ) ;
70646: LD_ADDR_VAR 0 5
70650: PUSH
70651: LD_VAR 0 4
70655: PPUSH
70656: LD_VAR 0 8
70660: PPUSH
70661: LD_VAR 0 9
70665: PUSH
70666: LD_VAR 0 10
70670: PLUS
70671: PPUSH
70672: CALL_OW 272
70676: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70677: LD_ADDR_VAR 0 7
70681: PUSH
70682: LD_VAR 0 6
70686: PPUSH
70687: LD_VAR 0 8
70691: PPUSH
70692: LD_VAR 0 9
70696: PUSH
70697: LD_VAR 0 10
70701: PLUS
70702: PPUSH
70703: CALL_OW 273
70707: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70708: LD_VAR 0 5
70712: PPUSH
70713: LD_VAR 0 7
70717: PPUSH
70718: CALL_OW 488
70722: PUSH
70723: LD_VAR 0 5
70727: PPUSH
70728: LD_VAR 0 7
70732: PPUSH
70733: CALL_OW 428
70737: PPUSH
70738: CALL_OW 247
70742: PUSH
70743: LD_INT 3
70745: PUSH
70746: LD_INT 2
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: IN
70753: NOT
70754: AND
70755: IFFALSE 70799
// begin ComMoveXY ( unit , _x , _y ) ;
70757: LD_VAR 0 1
70761: PPUSH
70762: LD_VAR 0 5
70766: PPUSH
70767: LD_VAR 0 7
70771: PPUSH
70772: CALL_OW 111
// result := [ _x , _y ] ;
70776: LD_ADDR_VAR 0 3
70780: PUSH
70781: LD_VAR 0 5
70785: PUSH
70786: LD_VAR 0 7
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: ST_TO_ADDR
// exit ;
70795: POP
70796: POP
70797: GO 70803
// end ; end ;
70799: GO 70643
70801: POP
70802: POP
// end ;
70803: LD_VAR 0 3
70807: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70808: LD_INT 0
70810: PPUSH
70811: PPUSH
70812: PPUSH
// result := 0 ;
70813: LD_ADDR_VAR 0 3
70817: PUSH
70818: LD_INT 0
70820: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70821: LD_VAR 0 1
70825: PUSH
70826: LD_INT 0
70828: LESS
70829: PUSH
70830: LD_VAR 0 1
70834: PUSH
70835: LD_INT 8
70837: GREATER
70838: OR
70839: PUSH
70840: LD_VAR 0 2
70844: PUSH
70845: LD_INT 0
70847: LESS
70848: OR
70849: PUSH
70850: LD_VAR 0 2
70854: PUSH
70855: LD_INT 8
70857: GREATER
70858: OR
70859: IFFALSE 70863
// exit ;
70861: GO 70938
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70863: LD_ADDR_VAR 0 4
70867: PUSH
70868: LD_INT 22
70870: PUSH
70871: LD_VAR 0 2
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PPUSH
70880: CALL_OW 69
70884: PUSH
70885: FOR_IN
70886: IFFALSE 70936
// begin un := UnitShoot ( i ) ;
70888: LD_ADDR_VAR 0 5
70892: PUSH
70893: LD_VAR 0 4
70897: PPUSH
70898: CALL_OW 504
70902: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70903: LD_VAR 0 5
70907: PPUSH
70908: CALL_OW 255
70912: PUSH
70913: LD_VAR 0 1
70917: EQUAL
70918: IFFALSE 70934
// begin result := un ;
70920: LD_ADDR_VAR 0 3
70924: PUSH
70925: LD_VAR 0 5
70929: ST_TO_ADDR
// exit ;
70930: POP
70931: POP
70932: GO 70938
// end ; end ;
70934: GO 70885
70936: POP
70937: POP
// end ;
70938: LD_VAR 0 3
70942: RET
// export function GetCargoBay ( units ) ; begin
70943: LD_INT 0
70945: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70946: LD_ADDR_VAR 0 2
70950: PUSH
70951: LD_VAR 0 1
70955: PPUSH
70956: LD_INT 2
70958: PUSH
70959: LD_INT 34
70961: PUSH
70962: LD_INT 12
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 34
70971: PUSH
70972: LD_INT 51
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 34
70981: PUSH
70982: LD_INT 32
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 34
70991: PUSH
70992: LD_EXP 39
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: PPUSH
71008: CALL_OW 72
71012: ST_TO_ADDR
// end ;
71013: LD_VAR 0 2
71017: RET
// export function Negate ( value ) ; begin
71018: LD_INT 0
71020: PPUSH
// result := not value ;
71021: LD_ADDR_VAR 0 2
71025: PUSH
71026: LD_VAR 0 1
71030: NOT
71031: ST_TO_ADDR
// end ;
71032: LD_VAR 0 2
71036: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
71037: LD_INT 0
71039: PPUSH
// if x1 = x2 then
71040: LD_VAR 0 1
71044: PUSH
71045: LD_VAR 0 3
71049: EQUAL
71050: IFFALSE 71084
// begin if y1 > y2 then
71052: LD_VAR 0 2
71056: PUSH
71057: LD_VAR 0 4
71061: GREATER
71062: IFFALSE 71074
// result := 0 else
71064: LD_ADDR_VAR 0 5
71068: PUSH
71069: LD_INT 0
71071: ST_TO_ADDR
71072: GO 71082
// result := 3 ;
71074: LD_ADDR_VAR 0 5
71078: PUSH
71079: LD_INT 3
71081: ST_TO_ADDR
// exit ;
71082: GO 71170
// end ; if y1 = y2 then
71084: LD_VAR 0 2
71088: PUSH
71089: LD_VAR 0 4
71093: EQUAL
71094: IFFALSE 71128
// begin if x1 > x2 then
71096: LD_VAR 0 1
71100: PUSH
71101: LD_VAR 0 3
71105: GREATER
71106: IFFALSE 71118
// result := 1 else
71108: LD_ADDR_VAR 0 5
71112: PUSH
71113: LD_INT 1
71115: ST_TO_ADDR
71116: GO 71126
// result := 4 ;
71118: LD_ADDR_VAR 0 5
71122: PUSH
71123: LD_INT 4
71125: ST_TO_ADDR
// exit ;
71126: GO 71170
// end ; if x1 > x2 and y1 > y2 then
71128: LD_VAR 0 1
71132: PUSH
71133: LD_VAR 0 3
71137: GREATER
71138: PUSH
71139: LD_VAR 0 2
71143: PUSH
71144: LD_VAR 0 4
71148: GREATER
71149: AND
71150: IFFALSE 71162
// result := 2 else
71152: LD_ADDR_VAR 0 5
71156: PUSH
71157: LD_INT 2
71159: ST_TO_ADDR
71160: GO 71170
// result := 5 ;
71162: LD_ADDR_VAR 0 5
71166: PUSH
71167: LD_INT 5
71169: ST_TO_ADDR
// end ;
71170: LD_VAR 0 5
71174: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71175: LD_INT 0
71177: PPUSH
71178: PPUSH
// if not driver or not IsInUnit ( driver ) then
71179: LD_VAR 0 1
71183: NOT
71184: PUSH
71185: LD_VAR 0 1
71189: PPUSH
71190: CALL_OW 310
71194: NOT
71195: OR
71196: IFFALSE 71200
// exit ;
71198: GO 71290
// vehicle := IsInUnit ( driver ) ;
71200: LD_ADDR_VAR 0 3
71204: PUSH
71205: LD_VAR 0 1
71209: PPUSH
71210: CALL_OW 310
71214: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71215: LD_VAR 0 1
71219: PPUSH
71220: LD_STRING \
71222: PUSH
71223: LD_INT 0
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: LD_INT 0
71234: PUSH
71235: LD_INT 0
71237: PUSH
71238: LD_INT 0
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: PUSH
71250: LD_STRING E
71252: PUSH
71253: LD_INT 0
71255: PUSH
71256: LD_INT 0
71258: PUSH
71259: LD_VAR 0 3
71263: PUSH
71264: LD_INT 0
71266: PUSH
71267: LD_INT 0
71269: PUSH
71270: LD_INT 0
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PPUSH
71286: CALL_OW 446
// end ;
71290: LD_VAR 0 2
71294: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71295: LD_INT 0
71297: PPUSH
71298: PPUSH
// if not driver or not IsInUnit ( driver ) then
71299: LD_VAR 0 1
71303: NOT
71304: PUSH
71305: LD_VAR 0 1
71309: PPUSH
71310: CALL_OW 310
71314: NOT
71315: OR
71316: IFFALSE 71320
// exit ;
71318: GO 71410
// vehicle := IsInUnit ( driver ) ;
71320: LD_ADDR_VAR 0 3
71324: PUSH
71325: LD_VAR 0 1
71329: PPUSH
71330: CALL_OW 310
71334: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71335: LD_VAR 0 1
71339: PPUSH
71340: LD_STRING \
71342: PUSH
71343: LD_INT 0
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: PUSH
71370: LD_STRING E
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: LD_INT 0
71378: PUSH
71379: LD_VAR 0 3
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: LD_INT 0
71389: PUSH
71390: LD_INT 0
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PPUSH
71406: CALL_OW 447
// end ;
71410: LD_VAR 0 2
71414: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71415: LD_INT 0
71417: PPUSH
71418: PPUSH
71419: PPUSH
// tmp := [ ] ;
71420: LD_ADDR_VAR 0 5
71424: PUSH
71425: EMPTY
71426: ST_TO_ADDR
// for i in units do
71427: LD_ADDR_VAR 0 4
71431: PUSH
71432: LD_VAR 0 1
71436: PUSH
71437: FOR_IN
71438: IFFALSE 71476
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71440: LD_ADDR_VAR 0 5
71444: PUSH
71445: LD_VAR 0 5
71449: PPUSH
71450: LD_VAR 0 5
71454: PUSH
71455: LD_INT 1
71457: PLUS
71458: PPUSH
71459: LD_VAR 0 4
71463: PPUSH
71464: CALL_OW 256
71468: PPUSH
71469: CALL_OW 2
71473: ST_TO_ADDR
71474: GO 71437
71476: POP
71477: POP
// if not tmp then
71478: LD_VAR 0 5
71482: NOT
71483: IFFALSE 71487
// exit ;
71485: GO 71535
// if asc then
71487: LD_VAR 0 2
71491: IFFALSE 71515
// result := SortListByListAsc ( units , tmp ) else
71493: LD_ADDR_VAR 0 3
71497: PUSH
71498: LD_VAR 0 1
71502: PPUSH
71503: LD_VAR 0 5
71507: PPUSH
71508: CALL_OW 76
71512: ST_TO_ADDR
71513: GO 71535
// result := SortListByListDesc ( units , tmp ) ;
71515: LD_ADDR_VAR 0 3
71519: PUSH
71520: LD_VAR 0 1
71524: PPUSH
71525: LD_VAR 0 5
71529: PPUSH
71530: CALL_OW 77
71534: ST_TO_ADDR
// end ;
71535: LD_VAR 0 3
71539: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
// task := GetTaskList ( mech ) ;
71544: LD_ADDR_VAR 0 4
71548: PUSH
71549: LD_VAR 0 1
71553: PPUSH
71554: CALL_OW 437
71558: ST_TO_ADDR
// if not task then
71559: LD_VAR 0 4
71563: NOT
71564: IFFALSE 71568
// exit ;
71566: GO 71610
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71568: LD_ADDR_VAR 0 3
71572: PUSH
71573: LD_VAR 0 4
71577: PUSH
71578: LD_INT 1
71580: ARRAY
71581: PUSH
71582: LD_INT 1
71584: ARRAY
71585: PUSH
71586: LD_STRING r
71588: EQUAL
71589: PUSH
71590: LD_VAR 0 4
71594: PUSH
71595: LD_INT 1
71597: ARRAY
71598: PUSH
71599: LD_INT 4
71601: ARRAY
71602: PUSH
71603: LD_VAR 0 2
71607: EQUAL
71608: AND
71609: ST_TO_ADDR
// end ;
71610: LD_VAR 0 3
71614: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71615: LD_INT 0
71617: PPUSH
// SetDir ( unit , d ) ;
71618: LD_VAR 0 1
71622: PPUSH
71623: LD_VAR 0 4
71627: PPUSH
71628: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71632: LD_VAR 0 1
71636: PPUSH
71637: LD_VAR 0 2
71641: PPUSH
71642: LD_VAR 0 3
71646: PPUSH
71647: LD_VAR 0 5
71651: PPUSH
71652: CALL_OW 48
// end ;
71656: LD_VAR 0 6
71660: RET
// export function ToNaturalNumber ( number ) ; begin
71661: LD_INT 0
71663: PPUSH
// result := number div 1 ;
71664: LD_ADDR_VAR 0 2
71668: PUSH
71669: LD_VAR 0 1
71673: PUSH
71674: LD_INT 1
71676: DIV
71677: ST_TO_ADDR
// if number < 0 then
71678: LD_VAR 0 1
71682: PUSH
71683: LD_INT 0
71685: LESS
71686: IFFALSE 71696
// result := 0 ;
71688: LD_ADDR_VAR 0 2
71692: PUSH
71693: LD_INT 0
71695: ST_TO_ADDR
// end ;
71696: LD_VAR 0 2
71700: RET
// export function SortByClass ( units , class ) ; var un ; begin
71701: LD_INT 0
71703: PPUSH
71704: PPUSH
// if not units or not class then
71705: LD_VAR 0 1
71709: NOT
71710: PUSH
71711: LD_VAR 0 2
71715: NOT
71716: OR
71717: IFFALSE 71721
// exit ;
71719: GO 71816
// result := [ ] ;
71721: LD_ADDR_VAR 0 3
71725: PUSH
71726: EMPTY
71727: ST_TO_ADDR
// for un in units do
71728: LD_ADDR_VAR 0 4
71732: PUSH
71733: LD_VAR 0 1
71737: PUSH
71738: FOR_IN
71739: IFFALSE 71814
// if GetClass ( un ) = class then
71741: LD_VAR 0 4
71745: PPUSH
71746: CALL_OW 257
71750: PUSH
71751: LD_VAR 0 2
71755: EQUAL
71756: IFFALSE 71783
// result := Insert ( result , 1 , un ) else
71758: LD_ADDR_VAR 0 3
71762: PUSH
71763: LD_VAR 0 3
71767: PPUSH
71768: LD_INT 1
71770: PPUSH
71771: LD_VAR 0 4
71775: PPUSH
71776: CALL_OW 2
71780: ST_TO_ADDR
71781: GO 71812
// result := Replace ( result , result + 1 , un ) ;
71783: LD_ADDR_VAR 0 3
71787: PUSH
71788: LD_VAR 0 3
71792: PPUSH
71793: LD_VAR 0 3
71797: PUSH
71798: LD_INT 1
71800: PLUS
71801: PPUSH
71802: LD_VAR 0 4
71806: PPUSH
71807: CALL_OW 1
71811: ST_TO_ADDR
71812: GO 71738
71814: POP
71815: POP
// end ;
71816: LD_VAR 0 3
71820: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71821: LD_INT 0
71823: PPUSH
71824: PPUSH
71825: PPUSH
71826: PPUSH
71827: PPUSH
71828: PPUSH
71829: PPUSH
// result := [ ] ;
71830: LD_ADDR_VAR 0 4
71834: PUSH
71835: EMPTY
71836: ST_TO_ADDR
// if x - r < 0 then
71837: LD_VAR 0 1
71841: PUSH
71842: LD_VAR 0 3
71846: MINUS
71847: PUSH
71848: LD_INT 0
71850: LESS
71851: IFFALSE 71863
// min_x := 0 else
71853: LD_ADDR_VAR 0 8
71857: PUSH
71858: LD_INT 0
71860: ST_TO_ADDR
71861: GO 71879
// min_x := x - r ;
71863: LD_ADDR_VAR 0 8
71867: PUSH
71868: LD_VAR 0 1
71872: PUSH
71873: LD_VAR 0 3
71877: MINUS
71878: ST_TO_ADDR
// if y - r < 0 then
71879: LD_VAR 0 2
71883: PUSH
71884: LD_VAR 0 3
71888: MINUS
71889: PUSH
71890: LD_INT 0
71892: LESS
71893: IFFALSE 71905
// min_y := 0 else
71895: LD_ADDR_VAR 0 7
71899: PUSH
71900: LD_INT 0
71902: ST_TO_ADDR
71903: GO 71921
// min_y := y - r ;
71905: LD_ADDR_VAR 0 7
71909: PUSH
71910: LD_VAR 0 2
71914: PUSH
71915: LD_VAR 0 3
71919: MINUS
71920: ST_TO_ADDR
// max_x := x + r ;
71921: LD_ADDR_VAR 0 9
71925: PUSH
71926: LD_VAR 0 1
71930: PUSH
71931: LD_VAR 0 3
71935: PLUS
71936: ST_TO_ADDR
// max_y := y + r ;
71937: LD_ADDR_VAR 0 10
71941: PUSH
71942: LD_VAR 0 2
71946: PUSH
71947: LD_VAR 0 3
71951: PLUS
71952: ST_TO_ADDR
// for _x = min_x to max_x do
71953: LD_ADDR_VAR 0 5
71957: PUSH
71958: DOUBLE
71959: LD_VAR 0 8
71963: DEC
71964: ST_TO_ADDR
71965: LD_VAR 0 9
71969: PUSH
71970: FOR_TO
71971: IFFALSE 72072
// for _y = min_y to max_y do
71973: LD_ADDR_VAR 0 6
71977: PUSH
71978: DOUBLE
71979: LD_VAR 0 7
71983: DEC
71984: ST_TO_ADDR
71985: LD_VAR 0 10
71989: PUSH
71990: FOR_TO
71991: IFFALSE 72068
// begin if not ValidHex ( _x , _y ) then
71993: LD_VAR 0 5
71997: PPUSH
71998: LD_VAR 0 6
72002: PPUSH
72003: CALL_OW 488
72007: NOT
72008: IFFALSE 72012
// continue ;
72010: GO 71990
// if GetResourceTypeXY ( _x , _y ) then
72012: LD_VAR 0 5
72016: PPUSH
72017: LD_VAR 0 6
72021: PPUSH
72022: CALL_OW 283
72026: IFFALSE 72066
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72028: LD_ADDR_VAR 0 4
72032: PUSH
72033: LD_VAR 0 4
72037: PPUSH
72038: LD_VAR 0 4
72042: PUSH
72043: LD_INT 1
72045: PLUS
72046: PPUSH
72047: LD_VAR 0 5
72051: PUSH
72052: LD_VAR 0 6
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PPUSH
72061: CALL_OW 1
72065: ST_TO_ADDR
// end ;
72066: GO 71990
72068: POP
72069: POP
72070: GO 71970
72072: POP
72073: POP
// end ;
72074: LD_VAR 0 4
72078: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
72079: LD_INT 0
72081: PPUSH
72082: PPUSH
72083: PPUSH
72084: PPUSH
72085: PPUSH
72086: PPUSH
// if not units then
72087: LD_VAR 0 1
72091: NOT
72092: IFFALSE 72096
// exit ;
72094: GO 72497
// result := UnitFilter ( units , [ f_ok ] ) ;
72096: LD_ADDR_VAR 0 3
72100: PUSH
72101: LD_VAR 0 1
72105: PPUSH
72106: LD_INT 50
72108: PUSH
72109: EMPTY
72110: LIST
72111: PPUSH
72112: CALL_OW 72
72116: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72117: LD_ADDR_VAR 0 7
72121: PUSH
72122: LD_VAR 0 1
72126: PUSH
72127: LD_INT 1
72129: ARRAY
72130: PPUSH
72131: CALL_OW 255
72135: ST_TO_ADDR
// if not result then
72136: LD_VAR 0 3
72140: NOT
72141: IFFALSE 72145
// exit ;
72143: GO 72497
// for i in result do
72145: LD_ADDR_VAR 0 4
72149: PUSH
72150: LD_VAR 0 3
72154: PUSH
72155: FOR_IN
72156: IFFALSE 72495
// begin tag := GetTag ( i ) + 1 ;
72158: LD_ADDR_VAR 0 8
72162: PUSH
72163: LD_VAR 0 4
72167: PPUSH
72168: CALL_OW 110
72172: PUSH
72173: LD_INT 1
72175: PLUS
72176: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72177: LD_ADDR_VAR 0 6
72181: PUSH
72182: LD_VAR 0 4
72186: PPUSH
72187: CALL_OW 250
72191: PPUSH
72192: LD_VAR 0 4
72196: PPUSH
72197: CALL_OW 251
72201: PPUSH
72202: LD_INT 6
72204: PPUSH
72205: CALL 71821 0 3
72209: ST_TO_ADDR
// if cr then
72210: LD_VAR 0 6
72214: IFFALSE 72253
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72216: LD_VAR 0 4
72220: PPUSH
72221: LD_VAR 0 6
72225: PUSH
72226: LD_INT 1
72228: ARRAY
72229: PUSH
72230: LD_INT 1
72232: ARRAY
72233: PPUSH
72234: LD_VAR 0 6
72238: PUSH
72239: LD_INT 1
72241: ARRAY
72242: PUSH
72243: LD_INT 2
72245: ARRAY
72246: PPUSH
72247: CALL_OW 116
72251: GO 72493
// if path > tag then
72253: LD_VAR 0 2
72257: PUSH
72258: LD_VAR 0 8
72262: GREATER
72263: IFFALSE 72441
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
72265: LD_ADDR_VAR 0 5
72269: PUSH
72270: LD_INT 81
72272: PUSH
72273: LD_VAR 0 7
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 91
72284: PUSH
72285: LD_VAR 0 4
72289: PUSH
72290: LD_INT 12
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: LIST
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PPUSH
72302: CALL_OW 69
72306: ST_TO_ADDR
// if enemy then
72307: LD_VAR 0 5
72311: IFFALSE 72339
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72313: LD_VAR 0 4
72317: PPUSH
72318: LD_VAR 0 5
72322: PPUSH
72323: LD_VAR 0 4
72327: PPUSH
72328: CALL_OW 74
72332: PPUSH
72333: CALL_OW 115
72337: GO 72439
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72339: LD_VAR 0 4
72343: PPUSH
72344: LD_VAR 0 2
72348: PUSH
72349: LD_VAR 0 8
72353: ARRAY
72354: PUSH
72355: LD_INT 1
72357: ARRAY
72358: PPUSH
72359: LD_VAR 0 2
72363: PUSH
72364: LD_VAR 0 8
72368: ARRAY
72369: PUSH
72370: LD_INT 2
72372: ARRAY
72373: PPUSH
72374: CALL_OW 297
72378: PUSH
72379: LD_INT 6
72381: GREATER
72382: IFFALSE 72425
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72384: LD_VAR 0 4
72388: PPUSH
72389: LD_VAR 0 2
72393: PUSH
72394: LD_VAR 0 8
72398: ARRAY
72399: PUSH
72400: LD_INT 1
72402: ARRAY
72403: PPUSH
72404: LD_VAR 0 2
72408: PUSH
72409: LD_VAR 0 8
72413: ARRAY
72414: PUSH
72415: LD_INT 2
72417: ARRAY
72418: PPUSH
72419: CALL_OW 114
72423: GO 72439
// SetTag ( i , tag ) ;
72425: LD_VAR 0 4
72429: PPUSH
72430: LD_VAR 0 8
72434: PPUSH
72435: CALL_OW 109
// end else
72439: GO 72493
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72441: LD_ADDR_VAR 0 5
72445: PUSH
72446: LD_INT 81
72448: PUSH
72449: LD_VAR 0 7
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PPUSH
72458: CALL_OW 69
72462: ST_TO_ADDR
// if enemy then
72463: LD_VAR 0 5
72467: IFFALSE 72493
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72469: LD_VAR 0 4
72473: PPUSH
72474: LD_VAR 0 5
72478: PPUSH
72479: LD_VAR 0 4
72483: PPUSH
72484: CALL_OW 74
72488: PPUSH
72489: CALL_OW 115
// end ; end ;
72493: GO 72155
72495: POP
72496: POP
// end ; end_of_file
72497: LD_VAR 0 3
72501: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72502: LD_VAR 0 1
72506: PUSH
72507: LD_INT 200
72509: DOUBLE
72510: GREATEREQUAL
72511: IFFALSE 72519
72513: LD_INT 299
72515: DOUBLE
72516: LESSEQUAL
72517: IFTRUE 72521
72519: GO 72553
72521: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72522: LD_VAR 0 1
72526: PPUSH
72527: LD_VAR 0 2
72531: PPUSH
72532: LD_VAR 0 3
72536: PPUSH
72537: LD_VAR 0 4
72541: PPUSH
72542: LD_VAR 0 5
72546: PPUSH
72547: CALL 29064 0 5
72551: GO 72630
72553: LD_INT 300
72555: DOUBLE
72556: GREATEREQUAL
72557: IFFALSE 72565
72559: LD_INT 399
72561: DOUBLE
72562: LESSEQUAL
72563: IFTRUE 72567
72565: GO 72629
72567: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72568: LD_VAR 0 1
72572: PPUSH
72573: LD_VAR 0 2
72577: PPUSH
72578: LD_VAR 0 3
72582: PPUSH
72583: LD_VAR 0 4
72587: PPUSH
72588: LD_VAR 0 5
72592: PPUSH
72593: LD_VAR 0 6
72597: PPUSH
72598: LD_VAR 0 7
72602: PPUSH
72603: LD_VAR 0 8
72607: PPUSH
72608: LD_VAR 0 9
72612: PPUSH
72613: LD_VAR 0 10
72617: PPUSH
72618: LD_VAR 0 11
72622: PPUSH
72623: CALL 26962 0 11
72627: GO 72630
72629: POP
// end ;
72630: PPOPN 11
72632: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72633: LD_VAR 0 1
72637: PPUSH
72638: LD_VAR 0 2
72642: PPUSH
72643: LD_VAR 0 3
72647: PPUSH
72648: LD_VAR 0 4
72652: PPUSH
72653: LD_VAR 0 5
72657: PPUSH
72658: CALL 29056 0 5
// end ; end_of_file
72662: PPOPN 5
72664: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72665: LD_VAR 0 1
72669: PPUSH
72670: LD_VAR 0 2
72674: PPUSH
72675: LD_VAR 0 3
72679: PPUSH
72680: LD_VAR 0 4
72684: PPUSH
72685: LD_VAR 0 5
72689: PPUSH
72690: LD_VAR 0 6
72694: PPUSH
72695: CALL 15157 0 6
// end ;
72699: PPOPN 6
72701: END
