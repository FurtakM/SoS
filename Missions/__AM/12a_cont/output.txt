// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9187 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9523 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 34154 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 39018 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 39018 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 39018 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 39018 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 39018 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 36636 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 39018 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 39018 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 39018 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 34154 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 34154 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 34154 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 34154 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 34154 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 34154 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 34154 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 34154 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 34154 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 34154 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 34154 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 34154 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 34154 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 34154 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 34154 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4423: LD_ADDR_EXP 4
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_STRING 11c_others
4435: PPUSH
4436: CALL_OW 31
4440: ADD
4441: PUSH
4442: LD_STRING 11_others
4444: PPUSH
4445: CALL_OW 31
4449: ADD
4450: ST_TO_ADDR
// if friends < 18 then
4451: LD_EXP 4
4455: PUSH
4456: LD_INT 18
4458: LESS
4459: IFFALSE 4531
// for i = 1 to 18 do
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_INT 18
4473: PUSH
4474: FOR_TO
4475: IFFALSE 4529
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4498: LD_ADDR_EXP 4
4502: PUSH
4503: LD_EXP 4
4507: PPUSH
4508: LD_EXP 4
4512: PUSH
4513: LD_INT 1
4515: PLUS
4516: PPUSH
4517: CALL_OW 44
4521: PPUSH
4522: CALL_OW 2
4526: ST_TO_ADDR
// end ;
4527: GO 4474
4529: POP
4530: POP
// for i in friends do
4531: LD_ADDR_VAR 0 2
4535: PUSH
4536: LD_EXP 4
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4600
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: CALL_OW 259
4556: PUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_INT 4
4564: PPUSH
4565: CALL_OW 259
4569: GREATEREQUAL
4570: IFFALSE 4586
// SetClass ( i , class_soldier ) else
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 336
4584: GO 4598
// SetClass ( i , class_scientistic ) ;
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: CALL_OW 336
4598: GO 4541
4600: POP
4601: POP
// if Frank then
4602: LD_EXP 33
4606: IFFALSE 4620
// SetClass ( Frank , class_sniper ) ;
4608: LD_EXP 33
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4620: LD_EXP 36
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 37
4634: PUSH
4635: LD_EXP 35
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4653: LD_ADDR_EXP 3
4657: PUSH
4658: LD_STRING 
4660: PPUSH
4661: LD_INT 7
4663: PPUSH
4664: LD_INT 7
4666: PPUSH
4667: LD_INT -6
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: LD_EXP 15
4679: PUSH
4680: LD_EXP 35
4684: PUSH
4685: LD_EXP 27
4689: PUSH
4690: LD_EXP 37
4694: PUSH
4695: LD_INT -2
4697: PUSH
4698: LD_INT -3
4700: PUSH
4701: LD_INT -5
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_EXP 4
4719: ADD
4720: PPUSH
4721: LD_INT 1
4723: PUSH
4724: LD_INT 4
4726: PUSH
4727: LD_INT 2
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// if Simms then
4758: LD_EXP 35
4762: IFFALSE 4780
// selected := selected ^ Simms ;
4764: LD_ADDR_EXP 3
4768: PUSH
4769: LD_EXP 3
4773: PUSH
4774: LD_EXP 35
4778: ADD
4779: ST_TO_ADDR
// if Denis then
4780: LD_EXP 27
4784: IFFALSE 4802
// selected := selected ^ Denis ;
4786: LD_ADDR_EXP 3
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: LD_EXP 27
4800: ADD
4801: ST_TO_ADDR
// if DeltaDoctor then
4802: LD_EXP 37
4806: IFFALSE 4824
// selected := selected ^ DeltaDoctor ;
4808: LD_ADDR_EXP 3
4812: PUSH
4813: LD_EXP 3
4817: PUSH
4818: LD_EXP 37
4822: ADD
4823: ST_TO_ADDR
// friends := friends diff selected ;
4824: LD_ADDR_EXP 4
4828: PUSH
4829: LD_EXP 4
4833: PUSH
4834: LD_EXP 3
4838: DIFF
4839: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_INT 111
4847: PUSH
4848: LD_INT 137
4850: PUSH
4851: LD_INT 51
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 147
4861: PUSH
4862: LD_INT 129
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 7
4890: PUSH
4891: LD_INT 8
4893: PUSH
4894: LD_INT 17
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
// for i in buildings do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 4
4917: PUSH
4918: FOR_IN
4919: IFFALSE 4935
// SetSide ( i , 4 ) ;
4921: LD_VAR 0 2
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 235
4933: GO 4918
4935: POP
4936: POP
// for i in selected do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 3
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5288
// begin if GetClass ( i ) in [ 1 , 5 ] then
4950: LD_VAR 0 2
4954: PPUSH
4955: CALL_OW 257
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: IN
4970: IFFALSE 5130
// begin if buildings [ 1 ] then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: IFFALSE 5041
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PPUSH
5000: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 3
5033: PPUSH
5034: CALL_OW 1
5038: ST_TO_ADDR
// end else
5039: GO 5128
// begin if not areas then
5041: LD_VAR 0 5
5045: NOT
5046: IFFALSE 5080
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 87
5055: PPUSH
5056: LD_INT 68
5058: PPUSH
5059: LD_INT 8
5061: PPUSH
5062: LD_INT 0
5064: PPUSH
5065: CALL_OW 50
// ComHold ( i ) ;
5069: LD_VAR 0 2
5073: PPUSH
5074: CALL_OW 140
// end else
5078: GO 5128
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// ComHold ( i ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 3
5127: ST_TO_ADDR
// end ; end ; end else
5128: GO 5286
// begin if buildings [ 2 ] then
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: IFFALSE 5199
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 2
5152: ARRAY
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_VAR 0 4
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 3
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end else
5197: GO 5286
// begin if not areas then
5199: LD_VAR 0 5
5203: NOT
5204: IFFALSE 5238
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5206: LD_VAR 0 2
5210: PPUSH
5211: LD_INT 87
5213: PPUSH
5214: LD_INT 68
5216: PPUSH
5217: LD_INT 8
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 50
// ComHold ( i ) ;
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 140
// end else
5236: GO 5286
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 49
// ComHold ( i ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// end ; end ; end ; end ;
5286: GO 4947
5288: POP
5289: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5290: LD_ADDR_VAR 0 6
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 30
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: DOUBLE
5330: LD_VAR 0 6
5334: PUSH
5335: LD_EXP 4
5339: MINUS
5340: INC
5341: ST_TO_ADDR
5342: LD_INT 1
5344: PUSH
5345: FOR_DOWNTO
5346: IFFALSE 5413
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5382: LD_ADDR_EXP 4
5386: PUSH
5387: LD_EXP 4
5391: PPUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: PPUSH
5401: CALL_OW 44
5405: PPUSH
5406: CALL_OW 2
5410: ST_TO_ADDR
// end ;
5411: GO 5345
5413: POP
5414: POP
// if friends then
5415: LD_EXP 4
5419: IFFALSE 5535
// begin tmp := friends ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_EXP 4
5430: ST_TO_ADDR
// for i = 1 to bunkers do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5449: LD_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: ARRAY
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5467: LD_VAR 0 3
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 6
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 3
5530: ST_TO_ADDR
// end ;
5531: GO 5446
5533: POP
5534: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_VAR 0 5
5544: PUSH
5545: LD_INT 9
5547: PUSH
5548: LD_INT 10
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: LD_INT 15
5565: PUSH
5566: LD_INT 16
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 27
5574: PUSH
5575: LD_INT 28
5577: PUSH
5578: LD_INT 29
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 31
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 33
5592: PUSH
5593: LD_INT 34
5595: PUSH
5596: LD_INT 35
5598: PUSH
5599: LD_INT 36
5601: PUSH
5602: LD_INT 37
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: UNION
5627: ST_TO_ADDR
// for i in friends do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5926
// begin SetTag ( i , 2 ) ;
5641: LD_VAR 0 2
5645: PPUSH
5646: LD_INT 2
5648: PPUSH
5649: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 257
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: IN
5677: NOT
5678: IFFALSE 5692
// SetClass ( i , 1 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 257
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: LD_INT 5
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: IN
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: AND
5722: IFFALSE 5783
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 4
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 3
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// continue ;
5781: GO 5638
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5783: LD_VAR 0 2
5787: PPUSH
5788: CALL_OW 257
5792: PUSH
5793: LD_INT 4
5795: EQUAL
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: AND
5806: IFFALSE 5867
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: LD_VAR 0 4
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 3
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// continue ;
5865: GO 5638
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 5
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 5
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 3
5905: ST_TO_ADDR
// ComHold ( i ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 140
// if not areas then
5915: LD_VAR 0 5
5919: NOT
5920: IFFALSE 5924
// break ;
5922: GO 5926
// end ;
5924: GO 5638
5926: POP
5927: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5928: LD_EXP 4
5932: PPUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 52
5938: PUSH
5939: EMPTY
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 72
5950: IFFALSE 6017
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 52
5967: PUSH
5968: EMPTY
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 72
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6015
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 65
5990: PPUSH
5991: LD_INT 58
5993: PPUSH
5994: LD_INT 7
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 50
// ComHold ( i ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 140
// end ;
6013: GO 5980
6015: POP
6016: POP
// if Frank then
6017: LD_EXP 33
6021: IFFALSE 6035
// SetClass ( Frank , class_sniper ) ;
6023: LD_EXP 33
6027: PPUSH
6028: LD_INT 5
6030: PPUSH
6031: CALL_OW 336
// end ; end_of_file
6035: LD_VAR 0 1
6039: RET
// export function CanSayRand ( side ) ; begin
6040: LD_INT 0
6042: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 52
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: PUSH
6126: LD_EXP 14
6130: PUSH
6131: LD_EXP 33
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 25
6150: PUSH
6151: LD_EXP 26
6155: PUSH
6156: LD_EXP 27
6160: PUSH
6161: LD_EXP 28
6165: PUSH
6166: LD_EXP 29
6170: PUSH
6171: LD_EXP 30
6175: PUSH
6176: LD_EXP 16
6180: PUSH
6181: LD_EXP 31
6185: PUSH
6186: LD_EXP 32
6190: PUSH
6191: LD_EXP 34
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: DIFF
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 2
6217: RET
// export function SayRand ( sex , dial ) ; begin
6218: LD_INT 0
6220: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 52
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PUSH
6315: LD_EXP 14
6319: PUSH
6320: LD_EXP 33
6324: PUSH
6325: LD_EXP 23
6329: PUSH
6330: LD_EXP 24
6334: PUSH
6335: LD_EXP 25
6339: PUSH
6340: LD_EXP 26
6344: PUSH
6345: LD_EXP 27
6349: PUSH
6350: LD_EXP 28
6354: PUSH
6355: LD_EXP 29
6359: PUSH
6360: LD_EXP 30
6364: PUSH
6365: LD_EXP 16
6369: PUSH
6370: LD_EXP 31
6374: PUSH
6375: LD_EXP 32
6379: PUSH
6380: LD_EXP 34
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: DIFF
6401: ST_TO_ADDR
// if not result then
6402: LD_VAR 0 3
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6439
// result := result [ 1 ] ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ST_TO_ADDR
// Say ( result , dial ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: CALL_OW 88
// end ;
6439: LD_VAR 0 3
6443: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6444: LD_INT 0
6446: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_VAR 0 1
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: PUSH
6534: LD_EXP 14
6538: PUSH
6539: LD_EXP 33
6543: PUSH
6544: LD_EXP 23
6548: PUSH
6549: LD_EXP 24
6553: PUSH
6554: LD_EXP 25
6558: PUSH
6559: LD_EXP 26
6563: PUSH
6564: LD_EXP 27
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: LD_EXP 29
6578: PUSH
6579: LD_EXP 30
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 31
6593: PUSH
6594: LD_EXP 32
6598: PUSH
6599: LD_EXP 34
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ADD
6625: DIFF
6626: ST_TO_ADDR
// if not result then
6627: LD_VAR 0 4
6631: NOT
6632: IFFALSE 6636
// exit ;
6634: GO 6664
// result := result [ 1 ] ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: ST_TO_ADDR
// Say ( result , dial ) ;
6650: LD_VAR 0 4
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 88
// end ;
6664: LD_VAR 0 4
6668: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: PUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 247
6708: PUSH
6709: LD_INT 3
6711: EQUAL
6712: OR
6713: IFFALSE 6717
// exit ;
6715: GO 8256
// for i = path downto 1 do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_VAR 0 2
6727: INC
6728: ST_TO_ADDR
6729: LD_INT 1
6731: PUSH
6732: FOR_DOWNTO
6733: IFFALSE 6794
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6735: LD_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: CALL_OW 488
6769: NOT
6770: IFFALSE 6792
// path = Delete ( path , i ) ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_VAR 0 5
6786: PPUSH
6787: CALL_OW 3
6791: ST_TO_ADDR
// end ;
6792: GO 6732
6794: POP
6795: POP
// if not path then
6796: LD_VAR 0 2
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8256
// tmp_path := [ ] ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// if flags then
6812: LD_VAR 0 3
6816: IFFALSE 6890
// begin if flags [ 1 ] then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: ARRAY
6826: IFFALSE 6842
// safe_place = flags [ 1 ] ;
6828: LD_ADDR_VAR 0 16
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: ST_TO_ADDR
// if flags [ 2 ] then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 2
6849: ARRAY
6850: IFFALSE 6866
// spot_dist = flags [ 2 ] ;
6852: LD_ADDR_VAR 0 15
6856: PUSH
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 2
6864: ARRAY
6865: ST_TO_ADDR
// if flags [ 3 ] then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 3
6873: ARRAY
6874: IFFALSE 6890
// chase_range = flags [ 3 ] ;
6876: LD_ADDR_VAR 0 17
6880: PUSH
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 3
6888: ARRAY
6889: ST_TO_ADDR
// end ; if not chase_range then
6890: LD_VAR 0 17
6894: NOT
6895: IFFALSE 6905
// chase_range = 8 ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_INT 8
6904: ST_TO_ADDR
// if not spot_dist then
6905: LD_VAR 0 15
6909: NOT
6910: IFFALSE 6920
// spot_dist := 8 ;
6912: LD_ADDR_VAR 0 15
6916: PUSH
6917: LD_INT 8
6919: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6920: LD_ADDR_VAR 0 18
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 247
6934: PUSH
6935: LD_INT 2
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 262
6948: PUSH
6949: LD_INT 3
6951: NONEQUAL
6952: AND
6953: ST_TO_ADDR
// status = 1 ;
6954: LD_ADDR_VAR 0 12
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6990: LD_VAR 0 18
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 261
7004: PUSH
7005: LD_INT 20
7007: LESS
7008: AND
7009: IFFALSE 7202
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7011: LD_ADDR_VAR 0 10
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 30
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 29
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: ST_TO_ADDR
// if not station then
7092: LD_VAR 0 10
7096: NOT
7097: IFFALSE 7113
// begin SetFuel ( unit , 40 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 40
7106: PPUSH
7107: CALL_OW 240
// continue ;
7111: GO 6983
// end ; status := 6 ;
7113: LD_ADDR_VAR 0 12
7117: PUSH
7118: LD_INT 6
7120: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_VAR 0 10
7130: PPUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 74
7140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7141: LD_INT 35
7143: PPUSH
7144: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_VAR 0 10
7157: PPUSH
7158: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 10
7171: PPUSH
7172: CALL_OW 296
7176: PUSH
7177: LD_INT 6
7179: LESS
7180: IFFALSE 7141
// SetFuel ( unit , 100 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_INT 100
7189: PPUSH
7190: CALL_OW 240
// status := 5 ;
7194: LD_ADDR_VAR 0 12
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// end ; if status = 1 then
7202: LD_VAR 0 12
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7586
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7212: LD_ADDR_VAR 0 13
7216: PUSH
7217: LD_INT 81
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 255
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 91
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_VAR 0 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 101
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// for i in enemy do
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 13
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7332
// if IsInvisible ( i ) then
7303: LD_VAR 0 5
7307: PPUSH
7308: CALL_OW 571
7312: IFFALSE 7330
// enemy := enemy diff i ;
7314: LD_ADDR_VAR 0 13
7318: PUSH
7319: LD_VAR 0 13
7323: PUSH
7324: LD_VAR 0 5
7328: DIFF
7329: ST_TO_ADDR
7330: GO 7300
7332: POP
7333: POP
// if enemy then
7334: LD_VAR 0 13
7338: IFFALSE 7388
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 251
7373: PPUSH
7374: CALL_OW 232
// status = 2 ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// end else
7386: GO 7586
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_VAR 0 11
7397: PUSH
7398: LD_INT 2
7400: ARRAY
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: LD_VAR 0 11
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: PPUSH
7419: CALL_OW 307
7423: PUSH
7424: LD_VAR 0 1
7428: PPUSH
7429: CALL_OW 314
7433: NOT
7434: OR
7435: IFFALSE 7586
// begin wait ( 0 0$2 ) ;
7437: LD_INT 70
7439: PPUSH
7440: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7444: LD_VAR 0 11
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_INT 1
7455: PLUS
7456: PUSH
7457: LD_VAR 0 2
7461: GREATER
7462: IFFALSE 7487
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
7485: GO 7518
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 11
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 11
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 11
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ARRAY
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 11
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PPUSH
7569: LD_VAR 0 11
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 114
// end ; end ; end ; if status = 2 then
7586: LD_VAR 0 12
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: IFFALSE 7815
// begin if GetLives ( unit ) < 650 and safe_place then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 256
7605: PUSH
7606: LD_INT 650
7608: LESS
7609: PUSH
7610: LD_VAR 0 16
7614: AND
7615: IFFALSE 7627
// begin status = 3 ;
7617: LD_ADDR_VAR 0 12
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// continue ;
7625: GO 6983
// end ; x := GetRememberedX ( unit ) ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 252
7641: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 253
7656: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_INT 81
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 92
7681: PUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 7
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if enemy then
7723: LD_VAR 0 13
7727: IFFALSE 7798
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: LD_VAR 0 13
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 6
7758: PPUSH
7759: LD_VAR 0 7
7763: PPUSH
7764: CALL_OW 297
7768: PUSH
7769: LD_VAR 0 15
7773: PUSH
7774: LD_VAR 0 17
7778: PLUS
7779: LESS
7780: IFFALSE 7796
// ComAttackUnit ( unit , e ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 14
7791: PPUSH
7792: CALL_OW 115
// end else
7796: GO 7815
// begin ComStop ( unit ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 141
// status = 5 ;
7807: LD_ADDR_VAR 0 12
7811: PUSH
7812: LD_INT 5
7814: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7815: LD_VAR 0 12
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 16
7828: AND
7829: IFFALSE 7915
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 16
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: CALL_OW 111
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 16
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 16
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PPUSH
7888: CALL_OW 297
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: IFFALSE 7831
// ComStop ( unit ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 141
// status = 4 ;
7907: LD_ADDR_VAR 0 12
7911: PUSH
7912: LD_INT 4
7914: ST_TO_ADDR
// end ; if status = 4 then
7915: LD_VAR 0 12
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: IFFALSE 7955
// begin repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 256
7941: PUSH
7942: LD_INT 1000
7944: EQUAL
7945: IFFALSE 7925
// status = 5 ;
7947: LD_ADDR_VAR 0 12
7951: PUSH
7952: LD_INT 5
7954: ST_TO_ADDR
// end ; if status = 5 then
7955: LD_VAR 0 12
7959: PUSH
7960: LD_INT 5
7962: EQUAL
7963: IFFALSE 8245
// begin p := 999 ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 999
7972: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7973: LD_ADDR_VAR 0 14
7977: PUSH
7978: LD_VAR 0 11
7982: PUSH
7983: LD_INT 2
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_VAR 0 11
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// c := 1 ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: DOUBLE
8022: LD_INT 1
8024: DEC
8025: ST_TO_ADDR
8026: LD_VAR 0 11
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PUSH
8035: LD_INT 2
8037: DIV
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8172
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_VAR 0 11
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 8
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 11
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: LD_INT 1
8083: PLUS
8084: ARRAY
8085: PPUSH
8086: CALL_OW 297
8090: ST_TO_ADDR
// if x < p then
8091: LD_VAR 0 6
8095: PUSH
8096: LD_VAR 0 9
8100: LESS
8101: IFFALSE 8156
// begin p := x ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_VAR 0 6
8112: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8113: LD_ADDR_VAR 0 14
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 8
8131: ARRAY
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: ARRAY
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// end ; c = c + 2 ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 8
8165: PUSH
8166: LD_INT 2
8168: PLUS
8169: ST_TO_ADDR
// end ;
8170: GO 8039
8172: POP
8173: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 14
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_VAR 0 14
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 14
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 14
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 307
8235: IFFALSE 8174
// status = 1 ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 301
8254: IFFALSE 6983
// end ;
8256: LD_VAR 0 4
8260: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8271: LD_VAR 0 1
8275: NOT
8276: PUSH
8277: LD_VAR 0 3
8281: NOT
8282: OR
8283: PUSH
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: IN
8303: NOT
8304: OR
8305: PUSH
8306: LD_VAR 0 6
8310: NOT
8311: OR
8312: PUSH
8313: LD_VAR 0 7
8317: NOT
8318: OR
8319: IFFALSE 8323
// exit ;
8321: GO 8714
// sex_id :=  ;
8323: LD_ADDR_VAR 0 14
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// case class of 1 :
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8355
8344: POP
// class_id := Sol ; 2 :
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: LD_STRING Sol
8352: ST_TO_ADDR
8353: GO 8413
8355: LD_INT 2
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8374
8363: POP
// class_id := Eng ; 3 :
8364: LD_ADDR_VAR 0 15
8368: PUSH
8369: LD_STRING Eng
8371: ST_TO_ADDR
8372: GO 8413
8374: LD_INT 3
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8393
8382: POP
// class_id := Mech ; 4 :
8383: LD_ADDR_VAR 0 15
8387: PUSH
8388: LD_STRING Mech
8390: ST_TO_ADDR
8391: GO 8413
8393: LD_INT 4
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8412
8401: POP
// class_id := Sci ; end ;
8402: LD_ADDR_VAR 0 15
8406: PUSH
8407: LD_STRING Sci
8409: ST_TO_ADDR
8410: GO 8413
8412: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8413: LD_ADDR_VAR 0 11
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_INT 25
8425: PUSH
8426: LD_VAR 0 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 72
8439: ST_TO_ADDR
// if tmp then
8440: LD_VAR 0 11
8444: IFFALSE 8456
// units := tmp ;
8446: LD_ADDR_VAR 0 1
8450: PUSH
8451: LD_VAR 0 11
8455: ST_TO_ADDR
// if sex then
8456: LD_VAR 0 4
8460: IFFALSE 8516
// begin if sex = sex_female then
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 8480
// sex_id := F ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_STRING F
8479: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 26
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if not units then
8507: LD_VAR 0 1
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8714
// end ; unit_id := id ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_VAR 0 6
8525: ST_TO_ADDR
// if unit_id > units then
8526: LD_VAR 0 12
8530: PUSH
8531: LD_VAR 0 1
8535: GREATER
8536: IFFALSE 8546
// unit_id := 1 ;
8538: LD_ADDR_VAR 0 12
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not units [ unit_id ] then
8546: LD_VAR 0 1
8550: PUSH
8551: LD_VAR 0 12
8555: ARRAY
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8714
// unit := units [ unit_id ] ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 12
8575: ARRAY
8576: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8577: LD_ADDR_VAR 0 13
8581: PUSH
8582: LD_STRING D
8584: PUSH
8585: LD_VAR 0 3
8589: STR
8590: PUSH
8591: LD_STRING -
8593: STR
8594: PUSH
8595: LD_VAR 0 14
8599: STR
8600: PUSH
8601: LD_VAR 0 15
8605: STR
8606: PUSH
8607: LD_VAR 0 6
8611: STR
8612: PUSH
8613: LD_STRING -
8615: STR
8616: PUSH
8617: LD_VAR 0 7
8621: STR
8622: ST_TO_ADDR
// case type of 0 :
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 0
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8653
8636: POP
// Say ( unit , dialog_id ) ; 1 :
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_VAR 0 13
8646: PPUSH
8647: CALL_OW 88
8651: GO 8704
8653: LD_INT 1
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8678
8661: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8662: LD_VAR 0 10
8666: PPUSH
8667: LD_VAR 0 13
8671: PPUSH
8672: CALL_OW 94
8676: GO 8704
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8703
8686: POP
// ForceSay ( unit , dialog_id ) ; end ;
8687: LD_VAR 0 10
8691: PPUSH
8692: LD_VAR 0 13
8696: PPUSH
8697: CALL_OW 91
8701: GO 8704
8703: POP
// result := unit ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 10
8713: ST_TO_ADDR
// end ;
8714: LD_VAR 0 8
8718: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8719: LD_INT 0
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := false ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8732: LD_VAR 0 1
8736: NOT
8737: PUSH
8738: LD_VAR 0 2
8742: NOT
8743: OR
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 310
8754: OR
8755: IFFALSE 8759
// exit ;
8757: GO 8963
// if distance < 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: LESS
8767: IFFALSE 8777
// distance := 0 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 266
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 250
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 251
8811: PPUSH
8812: LD_VAR 0 2
8816: PPUSH
8817: CALL_OW 254
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 248
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL 48095 0 6
8839: ST_TO_ADDR
// if not entrance then
8840: LD_VAR 0 6
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8963
// for i in entrance do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8961
// begin if not distance then
8862: LD_VAR 0 3
8866: NOT
8867: IFFALSE 8912
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 307
8896: IFFALSE 8910
// begin result := true ;
8898: LD_ADDR_VAR 0 4
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// exit ;
8906: POP
8907: POP
8908: GO 8963
// end ; end else
8910: GO 8959
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: PPUSH
8935: CALL_OW 297
8939: PUSH
8940: LD_VAR 0 3
8944: LESSEQUAL
8945: IFFALSE 8959
// begin result := true ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// exit ;
8955: POP
8956: POP
8957: GO 8963
// end ; end ; end ;
8959: GO 8859
8961: POP
8962: POP
// end ;
8963: LD_VAR 0 4
8967: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
8972: PPUSH
// result := false ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8981: LD_VAR 0 1
8985: NOT
8986: PUSH
8987: LD_VAR 0 2
8991: NOT
8992: OR
8993: PUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 302
9003: NOT
9004: OR
9005: PUSH
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 302
9015: NOT
9016: OR
9017: IFFALSE 9021
// exit ;
9019: GO 9182
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9021: LD_VAR 0 1
9025: PPUSH
9026: LD_INT 81
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 255
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 74
9078: PPUSH
9079: CALL_OW 296
9083: PUSH
9084: LD_INT 8
9086: LESS
9087: IFFALSE 9091
// exit ;
9089: GO 9182
// building := IsInUnit ( unit2 ) ;
9091: LD_ADDR_VAR 0 5
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 310
9105: ST_TO_ADDR
// if building then
9106: LD_VAR 0 5
9110: IFFALSE 9137
// result := IsNearbyEntrance ( unit , building , 2 ) else
9112: LD_ADDR_VAR 0 3
9116: PUSH
9117: LD_VAR 0 1
9121: PPUSH
9122: LD_VAR 0 5
9126: PPUSH
9127: LD_INT 2
9129: PPUSH
9130: CALL 8719 0 3
9134: ST_TO_ADDR
9135: GO 9182
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9137: LD_ADDR_VAR 0 3
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 296
9156: PUSH
9157: LD_INT 6
9159: LESS
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 255
9170: PPUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 292
9180: AND
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 3
9186: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
// uc_side = 0 ;
9193: LD_ADDR_OWVAR 20
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_nation = 0 ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// nat_area := nature_area ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 24
9216: ST_TO_ADDR
// InitHc ;
9217: CALL_OW 19
// for i = 1 to 4 do
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 4
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9282
// begin hc_class = 18 ;
9237: LD_ADDR_OWVAR 28
9241: PUSH
9242: LD_INT 18
9244: ST_TO_ADDR
// hc_gallery =  ;
9245: LD_ADDR_OWVAR 33
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// animal := CreateHuman ;
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 0
9275: PPUSH
9276: CALL_OW 49
// end ;
9280: GO 9234
9282: POP
9283: POP
// for i = 1 to 3 do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: DOUBLE
9290: LD_INT 1
9292: DEC
9293: ST_TO_ADDR
9294: LD_INT 3
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9392
// begin hc_class = class_apeman ;
9300: LD_ADDR_OWVAR 28
9304: PUSH
9305: LD_INT 12
9307: ST_TO_ADDR
// hc_gallery =  ;
9308: LD_ADDR_OWVAR 33
9312: PUSH
9313: LD_STRING 
9315: ST_TO_ADDR
// hc_agressivity = 0 ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9324: LD_ADDR_OWVAR 31
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: LD_INT 3
9345: PPUSH
9346: CALL_OW 12
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// animal := CreateHuman ;
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: CALL_OW 44
9372: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: CALL_OW 49
// end ;
9390: GO 9297
9392: POP
9393: POP
// for i = 1 to 3 do
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: DOUBLE
9400: LD_INT 1
9402: DEC
9403: ST_TO_ADDR
9404: LD_INT 3
9406: PUSH
9407: FOR_TO
9408: IFFALSE 9455
// begin hc_class = 13 ;
9410: LD_ADDR_OWVAR 28
9414: PUSH
9415: LD_INT 13
9417: ST_TO_ADDR
// hc_gallery =  ;
9418: LD_ADDR_OWVAR 33
9422: PUSH
9423: LD_STRING 
9425: ST_TO_ADDR
// animal := CreateHuman ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: CALL_OW 44
9435: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 49
// end ;
9453: GO 9407
9455: POP
9456: POP
// for i = 1 to 3 do
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 3
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin hc_class = 20 ;
9473: LD_ADDR_OWVAR 28
9477: PUSH
9478: LD_INT 20
9480: ST_TO_ADDR
// hc_gallery =  ;
9481: LD_ADDR_OWVAR 33
9485: PUSH
9486: LD_STRING 
9488: ST_TO_ADDR
// animal := CreateHuman ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: CALL_OW 44
9498: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 4
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: CALL_OW 49
// end ;
9514: GO 9470
9516: POP
9517: POP
// end ; end_of_file
9518: LD_VAR 0 1
9522: RET
// export function Action ; begin
9523: LD_INT 0
9525: PPUSH
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9530: LD_EXP 14
9534: PPUSH
9535: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D1-JMM-1
9546: PPUSH
9547: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9551: LD_EXP 15
9555: PPUSH
9556: LD_STRING D1-Roth-1
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D1-JMM-2
9570: PPUSH
9571: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9575: LD_EXP 15
9579: PPUSH
9580: LD_STRING D1-Roth-2
9582: PPUSH
9583: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9587: LD_EXP 14
9591: PPUSH
9592: LD_STRING D1-JMM-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9599: LD_EXP 15
9603: PPUSH
9604: LD_STRING D1-Roth-3
9606: PPUSH
9607: CALL_OW 88
// ComInvisible ( Roth ) ;
9611: LD_EXP 15
9615: PPUSH
9616: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9620: LD_INT 46
9622: PPUSH
9623: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9627: LD_EXP 14
9631: PPUSH
9632: LD_STRING D1-JMM-4
9634: PPUSH
9635: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9639: LD_INT 10
9641: PPUSH
9642: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_EXP 14
9655: PPUSH
9656: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D1-JMM-4a
9667: PPUSH
9668: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D1-Roth-4
9679: PPUSH
9680: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9684: LD_EXP 14
9688: PPUSH
9689: LD_STRING D1-JMM-5
9691: PPUSH
9692: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING D1-Roth-5
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_STRING D1-JMM-6
9715: PPUSH
9716: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9720: LD_EXP 15
9724: PPUSH
9725: LD_STRING D1-Roth-6
9727: PPUSH
9728: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9732: LD_EXP 14
9736: PPUSH
9737: LD_STRING D1-JMM-7
9739: PPUSH
9740: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9744: LD_EXP 16
9748: PPUSH
9749: LD_EXP 14
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 14
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING D1-Roth-7
9780: PPUSH
9781: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9785: LD_INT 10
9787: PPUSH
9788: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9792: LD_EXP 16
9796: PPUSH
9797: LD_EXP 14
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 6
9809: LESS
9810: IFFALSE 9785
// ComTurnUnit ( Powell , JMM ) ;
9812: LD_EXP 16
9816: PPUSH
9817: LD_EXP 14
9821: PPUSH
9822: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_STRING D1-Pow-7
9833: PPUSH
9834: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_EXP 16
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_EXP 16
9861: PPUSH
9862: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9866: LD_EXP 14
9870: PPUSH
9871: LD_STRING D1-JMM-8
9873: PPUSH
9874: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9878: LD_EXP 16
9882: PPUSH
9883: LD_STRING D1-Pow-8
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9890: LD_EXP 14
9894: PPUSH
9895: LD_STRING D1-JMM-9
9897: PPUSH
9898: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 124
9909: PPUSH
9910: LD_INT 61
9912: PPUSH
9913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9917: LD_INT 35
9919: PPUSH
9920: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9924: LD_EXP 14
9928: PPUSH
9929: LD_EXP 16
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 6
9941: GREATER
9942: IFFALSE 9917
// SayRadio ( Powell , D1-Pow-9 ) ;
9944: LD_EXP 16
9948: PPUSH
9949: LD_STRING D1-Pow-9
9951: PPUSH
9952: CALL_OW 94
// RemoveUnit ( Powell ) ;
9956: LD_EXP 16
9960: PPUSH
9961: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9965: LD_EXP 16
9969: PPUSH
9970: LD_INT 18
9972: PPUSH
9973: CALL_OW 52
// if Joan and not Joan in selected then
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 36
9986: PUSH
9987: LD_EXP 3
9991: IN
9992: NOT
9993: AND
9994: IFFALSE 10008
// SayRadio ( Joan , D1-Joan-9 ) ;
9996: LD_EXP 36
10000: PPUSH
10001: LD_STRING D1-Joan-9
10003: PPUSH
10004: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10022: LD_EXP 14
10026: PPUSH
10027: LD_EXP 15
10031: PPUSH
10032: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-9
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-10
10055: PPUSH
10056: CALL_OW 88
// InGameOff ;
10060: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10064: LD_STRING M1
10066: PPUSH
10067: CALL_OW 337
// if Difficulty < 3 then
10071: LD_OWVAR 67
10075: PUSH
10076: LD_INT 3
10078: LESS
10079: IFFALSE 10091
// ChangeSideFog ( 4 , 7 ) ;
10081: LD_INT 4
10083: PPUSH
10084: LD_INT 7
10086: PPUSH
10087: CALL_OW 343
// SaveForQuickRestart ;
10091: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10095: LD_INT 7
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 80
// wait ( 0 0$3 ) ;
10111: LD_INT 105
10113: PPUSH
10114: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 124
10125: PPUSH
10126: LD_INT 18
10128: PPUSH
10129: CALL_OW 111
// AddComInvisible ( Roth ) ;
10133: LD_EXP 15
10137: PPUSH
10138: CALL_OW 212
// wait ( 0 0$30 ) ;
10142: LD_INT 1050
10144: PPUSH
10145: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10149: LD_EXP 15
10153: PPUSH
10154: LD_INT 2100
10156: PPUSH
10157: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_INT 156
10168: PPUSH
10169: LD_INT 20
10171: PPUSH
10172: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10176: LD_EXP 15
10180: PPUSH
10181: LD_INT 178
10183: PPUSH
10184: LD_INT 42
10186: PPUSH
10187: CALL_OW 171
// AddComInvisible ( Roth ) ;
10191: LD_EXP 15
10195: PPUSH
10196: CALL_OW 212
// end ;
10200: LD_VAR 0 1
10204: RET
// every 0 0$1 do var i , tmp ;
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin tmp := selected union friends ;
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_EXP 3
10221: PUSH
10222: LD_EXP 4
10226: UNION
10227: ST_TO_ADDR
// if not tmp then
10228: LD_VAR 0 2
10232: NOT
10233: IFFALSE 10237
// exit ;
10235: GO 10309
// repeat wait ( 0 0$1 ) ;
10237: LD_INT 35
10239: PPUSH
10240: CALL_OW 67
// for i in tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_VAR 0 2
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10300
// if CanSpot ( JMM , i ) then
10257: LD_EXP 14
10261: PPUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL 8968 0 2
10271: IFFALSE 10298
// begin tmp := tmp diff i ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// Spot ( i ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10312 0 1
// end ;
10298: GO 10254
10300: POP
10301: POP
// until not tmp ;
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10237
// end ;
10309: PPOPN 2
10311: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10318: LD_VAR 0 1
10322: NOT
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 4
10336: NONEQUAL
10337: OR
10338: PUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 555
10348: OR
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 302
10359: NOT
10360: OR
10361: IFFALSE 10365
// exit ;
10363: GO 12254
// InGameOn ;
10365: CALL_OW 8
// side := GetSide ( JMM ) ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_EXP 14
10378: PPUSH
10379: CALL_OW 255
10383: ST_TO_ADDR
// joined := false ;
10384: LD_ADDR_VAR 0 5
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10392: LD_ADDR_VAR 0 3
10396: PUSH
10397: LD_VAR 0 1
10401: PPUSH
10402: CALL_OW 310
10406: ST_TO_ADDR
// if building then
10407: LD_VAR 0 3
10411: IFFALSE 10470
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10413: LD_EXP 14
10417: PPUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 255
10427: PPUSH
10428: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10432: LD_EXP 14
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: CALL_OW 120
// repeat wait ( 3 ) ;
10446: LD_INT 3
10448: PPUSH
10449: CALL_OW 67
// until IsInUnit ( JMM ) ;
10453: LD_EXP 14
10457: PPUSH
10458: CALL_OW 310
10462: IFFALSE 10446
// DialogueOn ;
10464: CALL_OW 6
// end else
10468: GO 10502
// begin ComTurnUnit ( JMM , unit ) ;
10470: LD_EXP 14
10474: PPUSH
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_EXP 14
10493: PPUSH
10494: CALL_OW 119
// DialogueOn ;
10498: CALL_OW 6
// end ; if unit = Joan then
10502: LD_VAR 0 1
10506: PUSH
10507: LD_EXP 36
10511: EQUAL
10512: IFFALSE 10622
// begin joined := true ;
10514: LD_ADDR_VAR 0 5
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// if Joan in selected then
10522: LD_EXP 36
10526: PUSH
10527: LD_EXP 3
10531: IN
10532: IFFALSE 10560
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10534: LD_EXP 36
10538: PPUSH
10539: LD_STRING D3-Joan-Joan-1
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10546: LD_EXP 14
10550: PPUSH
10551: LD_STRING D3-Joan-JMM-1
10553: PPUSH
10554: CALL_OW 88
// end else
10558: GO 10620
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10560: LD_EXP 36
10564: PPUSH
10565: LD_STRING D4-Joan-Joan-1
10567: PPUSH
10568: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10572: LD_EXP 14
10576: PPUSH
10577: LD_STRING D4-Joan-JMM-1
10579: PPUSH
10580: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10584: LD_EXP 36
10588: PPUSH
10589: LD_STRING D4-Joan-Joan-2
10591: PPUSH
10592: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10596: LD_EXP 14
10600: PPUSH
10601: LD_STRING D4-Joan-JMM-2
10603: PPUSH
10604: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10608: LD_EXP 36
10612: PPUSH
10613: LD_STRING D4-Joan-Joan-3
10615: PPUSH
10616: CALL_OW 88
// end ; end else
10620: GO 12062
// if unit = Lisa then
10622: LD_VAR 0 1
10626: PUSH
10627: LD_EXP 23
10631: EQUAL
10632: IFFALSE 10824
// begin if Lisa in selected then
10634: LD_EXP 23
10638: PUSH
10639: LD_EXP 3
10643: IN
10644: IFFALSE 10757
// begin if GetSide ( Joan ) = 7 then
10646: LD_EXP 36
10650: PPUSH
10651: CALL_OW 255
10655: PUSH
10656: LD_INT 7
10658: EQUAL
10659: IFFALSE 10723
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10661: LD_EXP 23
10665: PPUSH
10666: LD_STRING D3-LisaJ-Lisa-1
10668: PPUSH
10669: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10673: LD_EXP 14
10677: PPUSH
10678: LD_STRING D3-LisaJ-JMM-1
10680: PPUSH
10681: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10685: LD_EXP 23
10689: PPUSH
10690: LD_STRING D3-LisaJ-Lisa-2
10692: PPUSH
10693: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10697: LD_EXP 14
10701: PPUSH
10702: LD_STRING D3-LisaJ-JMM-2
10704: PPUSH
10705: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10709: LD_EXP 23
10713: PPUSH
10714: LD_STRING D3-LisaJ-Lisa-3
10716: PPUSH
10717: CALL_OW 88
// end else
10721: GO 10755
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10723: LD_EXP 23
10727: PPUSH
10728: LD_STRING D3-LisaL-Lisa-1
10730: PPUSH
10731: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10735: LD_EXP 14
10739: PPUSH
10740: LD_STRING D3-LisaL-JMM-1
10742: PPUSH
10743: CALL_OW 88
// joined := true ;
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// end ; end else
10755: GO 10822
// begin if GetSide ( Joan ) = 7 then
10757: LD_EXP 36
10761: PPUSH
10762: CALL_OW 255
10766: PUSH
10767: LD_INT 7
10769: EQUAL
10770: IFFALSE 10810
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10772: LD_EXP 23
10776: PPUSH
10777: LD_STRING D4-LisaJ-Lisa-1
10779: PPUSH
10780: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10784: LD_EXP 14
10788: PPUSH
10789: LD_STRING D4-LisaJ-JMM-1
10791: PPUSH
10792: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10796: LD_EXP 23
10800: PPUSH
10801: LD_STRING D4-LisaJ-Lisa-2
10803: PPUSH
10804: CALL_OW 88
// end else
10808: GO 10822
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10810: LD_EXP 23
10814: PPUSH
10815: LD_STRING D4-LisaL-Lisa-1
10817: PPUSH
10818: CALL_OW 88
// end ; end ; end else
10822: GO 12062
// if unit = Frank then
10824: LD_VAR 0 1
10828: PUSH
10829: LD_EXP 33
10833: EQUAL
10834: IFFALSE 10974
// begin joined := true ;
10836: LD_ADDR_VAR 0 5
10840: PUSH
10841: LD_INT 1
10843: ST_TO_ADDR
// if Frank in selected then
10844: LD_EXP 33
10848: PUSH
10849: LD_EXP 3
10853: IN
10854: IFFALSE 10924
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10856: LD_EXP 33
10860: PPUSH
10861: LD_STRING D3-Frank-Frank-1
10863: PPUSH
10864: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10868: LD_EXP 14
10872: PPUSH
10873: LD_STRING D3-Frank-JMM-1
10875: PPUSH
10876: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10880: LD_EXP 33
10884: PPUSH
10885: LD_STRING D3-Frank-Frank-2
10887: PPUSH
10888: CALL_OW 88
// if reached_lab then
10892: LD_EXP 5
10896: IFFALSE 10922
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10898: LD_EXP 14
10902: PPUSH
10903: LD_STRING D3-Frank-JMM-2
10905: PPUSH
10906: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10910: LD_EXP 33
10914: PPUSH
10915: LD_STRING D3-Frank-Frank-3
10917: PPUSH
10918: CALL_OW 88
// end ; end else
10922: GO 10972
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10924: LD_EXP 33
10928: PPUSH
10929: LD_STRING D4-Frank-Frank-1
10931: PPUSH
10932: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10936: LD_EXP 14
10940: PPUSH
10941: LD_STRING D4-Frank-JMM-1
10943: PPUSH
10944: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10948: LD_EXP 33
10952: PPUSH
10953: LD_STRING D4-Frank-Frank-2
10955: PPUSH
10956: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10960: LD_EXP 14
10964: PPUSH
10965: LD_STRING D4-Frank-JMM-2
10967: PPUSH
10968: CALL_OW 88
// end ; end else
10972: GO 12062
// if unit = Brown then
10974: LD_VAR 0 1
10978: PUSH
10979: LD_EXP 28
10983: EQUAL
10984: IFFALSE 11080
// begin if Brown in selected or gamma_commander = 2 then
10986: LD_EXP 28
10990: PUSH
10991: LD_EXP 3
10995: IN
10996: PUSH
10997: LD_EXP 10
11001: PUSH
11002: LD_INT 2
11004: EQUAL
11005: OR
11006: IFFALSE 11042
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11008: LD_EXP 28
11012: PPUSH
11013: LD_STRING D3-Soldier1-Sol1-1
11015: PPUSH
11016: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11020: LD_EXP 14
11024: PPUSH
11025: LD_STRING D3-Soldier1-JMM-1
11027: PPUSH
11028: CALL_OW 88
// joined := true ;
11032: LD_ADDR_VAR 0 5
11036: PUSH
11037: LD_INT 1
11039: ST_TO_ADDR
// end else
11040: GO 11078
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11042: LD_EXP 28
11046: PPUSH
11047: LD_STRING D4-Soldier2-Sol1-1
11049: PPUSH
11050: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11054: LD_EXP 14
11058: PPUSH
11059: LD_STRING D4-Soldier1-JMM-1
11061: PPUSH
11062: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11066: LD_EXP 28
11070: PPUSH
11071: LD_STRING D4-Soldier2-Sol1-2
11073: PPUSH
11074: CALL_OW 88
// end ; end else
11078: GO 12062
// if unit = Donaldson then
11080: LD_VAR 0 1
11084: PUSH
11085: LD_EXP 24
11089: EQUAL
11090: IFFALSE 11186
// begin if Donaldson in selected or gamma_commander = 1 then
11092: LD_EXP 24
11096: PUSH
11097: LD_EXP 3
11101: IN
11102: PUSH
11103: LD_EXP 10
11107: PUSH
11108: LD_INT 1
11110: EQUAL
11111: OR
11112: IFFALSE 11148
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11114: LD_EXP 24
11118: PPUSH
11119: LD_STRING D3-Soldier2-FSol2-1
11121: PPUSH
11122: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11126: LD_EXP 14
11130: PPUSH
11131: LD_STRING D3-Soldier2-JMM-1
11133: PPUSH
11134: CALL_OW 88
// joined := true ;
11138: LD_ADDR_VAR 0 5
11142: PUSH
11143: LD_INT 1
11145: ST_TO_ADDR
// end else
11146: GO 11184
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_STRING D4-Soldier1-FSol1-1
11155: PPUSH
11156: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_STRING D4-Soldier1-JMM-1
11167: PPUSH
11168: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_STRING D4-Soldier1-FSol1-2
11179: PPUSH
11180: CALL_OW 88
// end ; end else
11184: GO 12062
// if unit = Cyrus then
11186: LD_VAR 0 1
11190: PUSH
11191: LD_EXP 26
11195: EQUAL
11196: IFFALSE 11270
// begin if Cyrus in selected then
11198: LD_EXP 26
11202: PUSH
11203: LD_EXP 3
11207: IN
11208: IFFALSE 11244
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11210: LD_EXP 26
11214: PPUSH
11215: LD_STRING D3-Cyrus-Cyrus-1
11217: PPUSH
11218: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11222: LD_EXP 14
11226: PPUSH
11227: LD_STRING D3-Cyrus-JMM-1
11229: PPUSH
11230: CALL_OW 88
// joined := true ;
11234: LD_ADDR_VAR 0 5
11238: PUSH
11239: LD_INT 1
11241: ST_TO_ADDR
// end else
11242: GO 11268
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11244: LD_EXP 26
11248: PPUSH
11249: LD_STRING D4-Cyrus-Cyrus-1
11251: PPUSH
11252: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11256: LD_EXP 14
11260: PPUSH
11261: LD_STRING D4-Cyrus-JMM-1
11263: PPUSH
11264: CALL_OW 88
// end ; end else
11268: GO 12062
// if unit = Bobby then
11270: LD_VAR 0 1
11274: PUSH
11275: LD_EXP 25
11279: EQUAL
11280: IFFALSE 11366
// begin if Bobby in selected then
11282: LD_EXP 25
11286: PUSH
11287: LD_EXP 3
11291: IN
11292: IFFALSE 11328
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11294: LD_EXP 25
11298: PPUSH
11299: LD_STRING D3-Bobby-Bobby-1
11301: PPUSH
11302: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11306: LD_EXP 14
11310: PPUSH
11311: LD_STRING D3-Bobby-JMM-1
11313: PPUSH
11314: CALL_OW 88
// joined := true ;
11318: LD_ADDR_VAR 0 5
11322: PUSH
11323: LD_INT 1
11325: ST_TO_ADDR
// end else
11326: GO 11364
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11328: LD_EXP 25
11332: PPUSH
11333: LD_STRING D4-Bobby-Bobby-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11340: LD_EXP 14
11344: PPUSH
11345: LD_STRING D4-Bobby-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11352: LD_EXP 25
11356: PPUSH
11357: LD_STRING D4-Bobby-Bobby-2
11359: PPUSH
11360: CALL_OW 88
// end ; end else
11364: GO 12062
// if unit = Cornel then
11366: LD_VAR 0 1
11370: PUSH
11371: LD_EXP 31
11375: EQUAL
11376: IFFALSE 11474
// begin if Cornel in selected then
11378: LD_EXP 31
11382: PUSH
11383: LD_EXP 3
11387: IN
11388: IFFALSE 11436
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11390: LD_EXP 31
11394: PPUSH
11395: LD_STRING D3-Mark-Corn-1
11397: PPUSH
11398: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11402: LD_EXP 14
11406: PPUSH
11407: LD_STRING D3-Mark-JMM-1
11409: PPUSH
11410: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11414: LD_EXP 31
11418: PPUSH
11419: LD_STRING D3-Mark-Corn-2
11421: PPUSH
11422: CALL_OW 88
// joined := true ;
11426: LD_ADDR_VAR 0 5
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// end else
11434: GO 11472
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11436: LD_EXP 31
11440: PPUSH
11441: LD_STRING D4-Mark-Corn-1
11443: PPUSH
11444: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11448: LD_EXP 14
11452: PPUSH
11453: LD_STRING D3-Joan-JMM-1
11455: PPUSH
11456: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11460: LD_EXP 31
11464: PPUSH
11465: LD_STRING D4-Mark-Corn-2
11467: PPUSH
11468: CALL_OW 88
// end ; end else
11472: GO 12062
// if unit = Gary then
11474: LD_VAR 0 1
11478: PUSH
11479: LD_EXP 32
11483: EQUAL
11484: IFFALSE 11568
// begin if Gary in selected then
11486: LD_EXP 32
11490: PUSH
11491: LD_EXP 3
11495: IN
11496: IFFALSE 11532
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11498: LD_EXP 32
11502: PPUSH
11503: LD_STRING D3-Gary-Gary-1
11505: PPUSH
11506: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11510: LD_EXP 14
11514: PPUSH
11515: LD_STRING D3-Gary-JMM-1
11517: PPUSH
11518: CALL_OW 88
// joined := true ;
11522: LD_ADDR_VAR 0 5
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// end else
11530: GO 11566
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11532: LD_EXP 32
11536: PPUSH
11537: LD_STRING D4-Gary-Gary-1
11539: PPUSH
11540: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11544: LD_EXP 32
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 235
// DialogueOff ;
11556: CALL_OW 7
// InGameOff ;
11560: CALL_OW 9
// exit ;
11564: GO 12254
// end ; end else
11566: GO 12062
// if unit = Kikuchi then
11568: LD_VAR 0 1
11572: PUSH
11573: LD_EXP 34
11577: EQUAL
11578: IFFALSE 11662
// begin if Kikuchi in selected then
11580: LD_EXP 34
11584: PUSH
11585: LD_EXP 3
11589: IN
11590: IFFALSE 11626
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11592: LD_EXP 34
11596: PPUSH
11597: LD_STRING D3-Yamako-Yam-1
11599: PPUSH
11600: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11604: LD_EXP 14
11608: PPUSH
11609: LD_STRING D3-Soldier2-JMM-1
11611: PPUSH
11612: CALL_OW 88
// joined := true ;
11616: LD_ADDR_VAR 0 5
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// end else
11624: GO 11660
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11626: LD_EXP 34
11630: PPUSH
11631: LD_STRING D4-Yamako-Yam-1
11633: PPUSH
11634: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11638: LD_EXP 34
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 235
// DialogueOff ;
11650: CALL_OW 7
// InGameOff ;
11654: CALL_OW 9
// exit ;
11658: GO 12254
// end ; end else
11660: GO 12062
// if unit = Gladstone then
11662: LD_VAR 0 1
11666: PUSH
11667: LD_EXP 29
11671: EQUAL
11672: IFFALSE 11746
// begin if Gladstone in selected then
11674: LD_EXP 29
11678: PUSH
11679: LD_EXP 3
11683: IN
11684: IFFALSE 11720
// begin joined := true ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11694: LD_EXP 14
11698: PPUSH
11699: LD_STRING D3-Tim-JMM-1
11701: PPUSH
11702: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11706: LD_EXP 29
11710: PPUSH
11711: LD_STRING D3-Tim-Glad-1
11713: PPUSH
11714: CALL_OW 88
// end else
11718: GO 11744
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11720: LD_EXP 14
11724: PPUSH
11725: LD_STRING D4-Tim-JMM-1
11727: PPUSH
11728: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11732: LD_EXP 29
11736: PPUSH
11737: LD_STRING D4-Tim-Glad-1
11739: PPUSH
11740: CALL_OW 88
// end ; end else
11744: GO 12062
// if unit = Denis then
11746: LD_VAR 0 1
11750: PUSH
11751: LD_EXP 27
11755: EQUAL
11756: IFFALSE 11792
// begin joined := true ;
11758: LD_ADDR_VAR 0 5
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11766: LD_EXP 27
11770: PPUSH
11771: LD_STRING D3-Denis-Den-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11778: LD_EXP 14
11782: PPUSH
11783: LD_STRING D3-Denis-JMM-1
11785: PPUSH
11786: CALL_OW 88
// end else
11790: GO 12062
// if unit = Simms then
11792: LD_VAR 0 1
11796: PUSH
11797: LD_EXP 35
11801: EQUAL
11802: IFFALSE 11838
// begin joined := true ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11812: LD_EXP 35
11816: PPUSH
11817: LD_STRING D3-Simms-Sim-1
11819: PPUSH
11820: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11824: LD_EXP 14
11828: PPUSH
11829: LD_STRING D3-Simms-JMM-1
11831: PPUSH
11832: CALL_OW 88
// end else
11836: GO 12062
// if unit = DeltaDoctor then
11838: LD_VAR 0 1
11842: PUSH
11843: LD_EXP 37
11847: EQUAL
11848: IFFALSE 11884
// begin joined := true ;
11850: LD_ADDR_VAR 0 5
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11858: LD_EXP 37
11862: PPUSH
11863: LD_STRING D3-Soldier1-Sol1-1
11865: PPUSH
11866: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11870: LD_EXP 14
11874: PPUSH
11875: LD_STRING D3-Soldier1-JMM-1
11877: PPUSH
11878: CALL_OW 88
// end else
11882: GO 12062
// begin joined := unit in selected ;
11884: LD_ADDR_VAR 0 5
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: LD_EXP 3
11898: IN
11899: ST_TO_ADDR
// if joined then
11900: LD_VAR 0 5
11904: IFFALSE 11973
// begin if GetSex ( unit ) = sex_male then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 258
11915: PUSH
11916: LD_INT 1
11918: EQUAL
11919: IFFALSE 11947
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11921: LD_VAR 0 1
11925: PPUSH
11926: LD_STRING D3-Soldier1-Sol1-1
11928: PPUSH
11929: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11933: LD_EXP 14
11937: PPUSH
11938: LD_STRING D3-Soldier1-JMM-1
11940: PPUSH
11941: CALL_OW 88
// end else
11945: GO 11971
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_STRING D3-Soldier2-FSol2-1
11954: PPUSH
11955: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11959: LD_EXP 14
11963: PPUSH
11964: LD_STRING D3-Soldier2-JMM-1
11966: PPUSH
11967: CALL_OW 88
// end ; end else
11971: GO 12062
// begin if GetSex ( unit ) = sex_male then
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 258
11982: PUSH
11983: LD_INT 1
11985: EQUAL
11986: IFFALSE 12026
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_STRING D4-Soldier2-Sol1-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12000: LD_EXP 14
12004: PPUSH
12005: LD_STRING D4-Soldier2-JMM-1
12007: PPUSH
12008: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12012: LD_VAR 0 1
12016: PPUSH
12017: LD_STRING D4-Soldier2-Sol2-1
12019: PPUSH
12020: CALL_OW 88
// end else
12024: GO 12062
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: LD_STRING D4-Soldier1-FSol1-1
12033: PPUSH
12034: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12038: LD_EXP 14
12042: PPUSH
12043: LD_STRING D4-Soldier1-JMM-1
12045: PPUSH
12046: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_STRING D4-Soldier1-FSol1-2
12057: PPUSH
12058: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12062: CALL_OW 7
// InGameOff ;
12066: CALL_OW 9
// if building then
12070: LD_VAR 0 3
12074: IFFALSE 12175
// begin SetSide ( JMM , side ) ;
12076: LD_EXP 14
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12090: LD_EXP 14
12094: PPUSH
12095: CALL_OW 122
// if joined then
12099: LD_VAR 0 5
12103: IFFALSE 12142
// begin SetSide ( unit , side ) ;
12105: LD_VAR 0 1
12109: PPUSH
12110: LD_VAR 0 4
12114: PPUSH
12115: CALL_OW 235
// SetSide ( building , 1 ) ;
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 235
// ComExitBuilding ( unit ) ;
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 122
// end else
12140: GO 12173
// begin wait ( 0 0$10 ) ;
12142: LD_INT 350
12144: PPUSH
12145: CALL_OW 67
// SetSide ( unit , 1 ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 235
// SetSide ( building , 1 ) ;
12161: LD_VAR 0 3
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 235
// end ; end else
12173: GO 12254
// begin ComStop ( [ JMM , unit ] ) ;
12175: LD_EXP 14
12179: PUSH
12180: LD_VAR 0 1
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 141
// if joined then
12193: LD_VAR 0 5
12197: IFFALSE 12215
// SetSide ( unit , side ) else
12199: LD_VAR 0 1
12203: PPUSH
12204: LD_VAR 0 4
12208: PPUSH
12209: CALL_OW 235
12213: GO 12254
// begin repeat wait ( 0 0$1 ) ;
12215: LD_INT 35
12217: PPUSH
12218: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12222: LD_EXP 14
12226: PPUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 296
12236: PUSH
12237: LD_INT 11
12239: GREATER
12240: IFFALSE 12215
// SetSide ( unit , 1 ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 235
// end ; end ; end ;
12254: LD_VAR 0 2
12258: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12259: LD_EXP 14
12263: PPUSH
12264: CALL_OW 310
12268: PUSH
12269: LD_INT 47
12271: EQUAL
12272: IFFALSE 12340
12274: GO 12276
12276: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12277: LD_STRING M1a
12279: PPUSH
12280: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12284: LD_INT 13
12286: PPUSH
12287: LD_INT 7
12289: PPUSH
12290: LD_INT 2
12292: PPUSH
12293: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12297: LD_INT 29
12299: PPUSH
12300: LD_INT 7
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12310: LD_EXP 14
12314: PPUSH
12315: LD_INT 9
12317: PPUSH
12318: CALL_OW 336
// can_escape := true ;
12322: LD_ADDR_EXP 6
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12330: LD_INT 19
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 424
// end ;
12340: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12341: LD_EXP 16
12345: PPUSH
12346: CALL_OW 256
12350: PUSH
12351: LD_INT 999
12353: LESS
12354: IFFALSE 12405
12356: GO 12358
12358: DISABLE
// begin enable ;
12359: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12360: LD_INT 25
12362: PPUSH
12363: LD_INT 48
12365: PPUSH
12366: CALL_OW 428
12370: PUSH
12371: LD_EXP 16
12375: EQUAL
12376: IFFALSE 12390
// begin RemoveUnit ( Powell ) ;
12378: LD_EXP 16
12382: PPUSH
12383: CALL_OW 64
// disable ;
12387: DISABLE
// end else
12388: GO 12405
// ComMoveXY ( Powell , 25 , 48 ) ;
12390: LD_EXP 16
12394: PPUSH
12395: LD_INT 25
12397: PPUSH
12398: LD_INT 48
12400: PPUSH
12401: CALL_OW 111
// end ;
12405: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12406: LD_INT 22
12408: PUSH
12409: LD_INT 4
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 21
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: LD_INT 24
12431: PUSH
12432: LD_INT 990
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 69
12452: PUSH
12453: LD_EXP 15
12457: DIFF
12458: IFFALSE 12602
12460: GO 12462
12462: DISABLE
12463: LD_INT 0
12465: PPUSH
// begin enable ;
12466: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12467: LD_ADDR_VAR 0 1
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: LD_INT 24
12497: PUSH
12498: LD_INT 990
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 15
12523: DIFF
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12600
// begin ComFree ( i ) ;
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL_OW 139
// SetSide ( i , 1 ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_EXP 14
12558: PPUSH
12559: CALL_OW 296
12563: PUSH
12564: LD_INT 14
12566: LESS
12567: IFFALSE 12598
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_EXP 14
12578: PPUSH
12579: CALL_OW 250
12583: PPUSH
12584: LD_EXP 14
12588: PPUSH
12589: CALL_OW 251
12593: PPUSH
12594: CALL_OW 114
// end ;
12598: GO 12525
12600: POP
12601: POP
// end ;
12602: PPOPN 1
12604: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12605: LD_INT 22
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 34
12617: PUSH
12618: LD_INT 12
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: IFFALSE 12715
12635: GO 12637
12637: DISABLE
12638: LD_INT 0
12640: PPUSH
// begin enable ;
12641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12642: LD_ADDR_VAR 0 1
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 4
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 34
12659: PUSH
12660: LD_INT 12
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: PUSH
12676: FOR_IN
12677: IFFALSE 12713
// if GetDistUnits ( i , JMM ) < 6 then
12679: LD_VAR 0 1
12683: PPUSH
12684: LD_EXP 14
12688: PPUSH
12689: CALL_OW 296
12693: PUSH
12694: LD_INT 6
12696: LESS
12697: IFFALSE 12711
// SetSide ( i , 7 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 7
12706: PPUSH
12707: CALL_OW 235
12711: GO 12676
12713: POP
12714: POP
// end ;
12715: PPOPN 1
12717: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12718: LD_EXP 6
12722: PUSH
12723: LD_INT 19
12725: PPUSH
12726: LD_INT 22
12728: PUSH
12729: LD_INT 7
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 21
12738: PUSH
12739: LD_INT 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 71
12754: NOT
12755: AND
12756: PUSH
12757: LD_INT 3
12759: PPUSH
12760: CALL_OW 469
12764: NOT
12765: AND
12766: PUSH
12767: LD_INT 5
12769: PPUSH
12770: CALL_OW 469
12774: NOT
12775: AND
12776: IFFALSE 14402
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
// begin m1 := false ;
12788: LD_ADDR_VAR 0 3
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// m2 := false ;
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// m3 := false ;
12804: LD_ADDR_VAR 0 5
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: LD_EXP 3
12821: PPUSH
12822: LD_INT 22
12824: PUSH
12825: LD_INT 4
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 21
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 72
12850: PUSH
12851: LD_INT 0
12853: EQUAL
12854: ST_TO_ADDR
// if not all_taken then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 13001
// case query ( Q1 ) of 1 :
12862: LD_STRING Q1
12864: PPUSH
12865: CALL_OW 97
12869: PUSH
12870: LD_INT 1
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 12989
12878: POP
// begin repeat wait ( 0 0$1 ) ;
12879: LD_INT 35
12881: PPUSH
12882: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12886: LD_EXP 3
12890: PPUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 72
12919: PUSH
12920: LD_INT 0
12922: EQUAL
12923: PUSH
12924: LD_INT 19
12926: PPUSH
12927: LD_INT 22
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 21
12939: PUSH
12940: LD_INT 1
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 71
12955: NOT
12956: AND
12957: PUSH
12958: LD_INT 3
12960: PPUSH
12961: CALL_OW 469
12965: NOT
12966: AND
12967: PUSH
12968: LD_INT 5
12970: PPUSH
12971: CALL_OW 469
12975: NOT
12976: AND
12977: IFFALSE 12879
// all_taken := true ;
12979: LD_ADDR_VAR 0 1
12983: PUSH
12984: LD_INT 1
12986: ST_TO_ADDR
// end ; 2 :
12987: GO 13001
12989: LD_INT 2
12991: DOUBLE
12992: EQUAL
12993: IFTRUE 12997
12995: GO 13000
12997: POP
// ; end ;
12998: GO 13001
13000: POP
// if team_kill_counter then
13001: LD_EXP 9
13005: IFFALSE 13021
// Say ( JMM , D5-JMM-1 ) else
13007: LD_EXP 14
13011: PPUSH
13012: LD_STRING D5-JMM-1
13014: PPUSH
13015: CALL_OW 88
13019: GO 13033
// Say ( JMM , D5-JMM-1a ) ;
13021: LD_EXP 14
13025: PPUSH
13026: LD_STRING D5-JMM-1a
13028: PPUSH
13029: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13033: LD_INT 22
13035: PUSH
13036: LD_INT 7
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 23
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: PUSH
13073: LD_EXP 14
13077: PUSH
13078: LD_EXP 15
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: DIFF
13087: PUSH
13088: LD_INT 10
13090: GREATEREQUAL
13091: IFFALSE 13100
// SetAchievement ( ACH_TEAM ) ;
13093: LD_STRING ACH_TEAM
13095: PPUSH
13096: CALL_OW 543
// if not invis_used then
13100: LD_EXP 12
13104: NOT
13105: IFFALSE 13121
// begin wait ( 3 ) ;
13107: LD_INT 3
13109: PPUSH
13110: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13114: LD_STRING ACH_NOINVIS
13116: PPUSH
13117: CALL_OW 543
// end ; if not alert then
13121: LD_EXP 13
13125: NOT
13126: IFFALSE 13142
// begin wait ( 3 ) ;
13128: LD_INT 3
13130: PPUSH
13131: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13135: LD_STRING ACH_ALARM
13137: PPUSH
13138: CALL_OW 543
// end ; if tick < 15 15$00 then
13142: LD_OWVAR 1
13146: PUSH
13147: LD_INT 31500
13149: LESS
13150: IFFALSE 13166
// begin wait ( 3 ) ;
13152: LD_INT 3
13154: PPUSH
13155: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13159: LD_STRING ACH_ASPEED_16
13161: PPUSH
13162: CALL_OW 543
// end ; if all_taken then
13166: LD_VAR 0 1
13170: IFFALSE 13192
// begin AddMedal ( All , 1 ) ;
13172: LD_STRING All
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 101
// m1 := true ;
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// end else
13190: GO 13203
// AddMedal ( All , - 1 ) ;
13192: LD_STRING All
13194: PPUSH
13195: LD_INT 1
13197: NEG
13198: PPUSH
13199: CALL_OW 101
// if team_kill_counter then
13203: LD_EXP 9
13207: IFFALSE 13222
// AddMedal ( Save , - 1 ) else
13209: LD_STRING Save
13211: PPUSH
13212: LD_INT 1
13214: NEG
13215: PPUSH
13216: CALL_OW 101
13220: GO 13240
// begin AddMedal ( Save , 1 ) ;
13222: LD_STRING Save
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 101
// m2 := true ;
13232: LD_ADDR_VAR 0 4
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13240: LD_EXP 8
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: PUSH
13263: LD_OWVAR 67
13267: ARRAY
13268: GREATEREQUAL
13269: IFFALSE 13284
// AddMedal ( Friendship , - 1 ) else
13271: LD_STRING Friendship
13273: PPUSH
13274: LD_INT 1
13276: NEG
13277: PPUSH
13278: CALL_OW 101
13282: GO 13302
// begin AddMedal ( Friendship , 1 ) ;
13284: LD_STRING Friendship
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 101
// m3 := true ;
13294: LD_ADDR_VAR 0 5
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13302: LD_VAR 0 3
13306: PUSH
13307: LD_VAR 0 4
13311: AND
13312: PUSH
13313: LD_VAR 0 5
13317: AND
13318: PUSH
13319: LD_OWVAR 67
13323: PUSH
13324: LD_INT 3
13326: GREATEREQUAL
13327: AND
13328: IFFALSE 13340
// SetAchievementEX ( ACH_AMER , 16 ) ;
13330: LD_STRING ACH_AMER
13332: PPUSH
13333: LD_INT 16
13335: PPUSH
13336: CALL_OW 564
// GiveMedals ( MAIN ) ;
13340: LD_STRING MAIN
13342: PPUSH
13343: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13347: LD_ADDR_VAR 0 2
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 7
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 1
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 25
13387: PUSH
13388: LD_INT 3
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 4
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 25
13417: PUSH
13418: LD_INT 8
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 25
13427: PUSH
13428: LD_INT 9
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13457: LD_VAR 0 2
13461: PUSH
13462: LD_EXP 15
13466: ADD
13467: PPUSH
13468: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13472: LD_EXP 14
13476: PPUSH
13477: LD_STRING 12a_JMM
13479: PPUSH
13480: CALL_OW 38
// if IsLive ( Roth ) then
13484: LD_EXP 15
13488: PPUSH
13489: CALL_OW 300
13493: IFFALSE 13507
// SaveCharacters ( Roth , 12a_Roth ) ;
13495: LD_EXP 15
13499: PPUSH
13500: LD_STRING 12a_Roth
13502: PPUSH
13503: CALL_OW 38
// if Lisa in tmp then
13507: LD_EXP 23
13511: PUSH
13512: LD_VAR 0 2
13516: IN
13517: IFFALSE 13533
// SaveCharacters ( Lisa , 12a_Lisa ) else
13519: LD_EXP 23
13523: PPUSH
13524: LD_STRING 12a_Lisa
13526: PPUSH
13527: CALL_OW 38
13531: GO 13551
// if Lisa then
13533: LD_EXP 23
13537: IFFALSE 13551
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13539: LD_EXP 23
13543: PPUSH
13544: LD_STRING 12p_Lisa
13546: PPUSH
13547: CALL_OW 38
// if Donaldson in tmp then
13551: LD_EXP 24
13555: PUSH
13556: LD_VAR 0 2
13560: IN
13561: IFFALSE 13577
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13563: LD_EXP 24
13567: PPUSH
13568: LD_STRING 12a_Donaldson
13570: PPUSH
13571: CALL_OW 38
13575: GO 13595
// if Donaldson then
13577: LD_EXP 24
13581: IFFALSE 13595
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13583: LD_EXP 24
13587: PPUSH
13588: LD_STRING 12p_Donaldson
13590: PPUSH
13591: CALL_OW 38
// if Bobby in tmp then
13595: LD_EXP 25
13599: PUSH
13600: LD_VAR 0 2
13604: IN
13605: IFFALSE 13621
// SaveCharacters ( Bobby , 12a_Bobby ) else
13607: LD_EXP 25
13611: PPUSH
13612: LD_STRING 12a_Bobby
13614: PPUSH
13615: CALL_OW 38
13619: GO 13639
// if Bobby then
13621: LD_EXP 25
13625: IFFALSE 13639
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13627: LD_EXP 25
13631: PPUSH
13632: LD_STRING 12p_Bobby
13634: PPUSH
13635: CALL_OW 38
// if Cyrus in tmp then
13639: LD_EXP 26
13643: PUSH
13644: LD_VAR 0 2
13648: IN
13649: IFFALSE 13665
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING 12a_Cyrus
13658: PPUSH
13659: CALL_OW 38
13663: GO 13683
// if Cyrus then
13665: LD_EXP 26
13669: IFFALSE 13683
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13671: LD_EXP 26
13675: PPUSH
13676: LD_STRING 12p_Cyrus
13678: PPUSH
13679: CALL_OW 38
// if Denis in tmp then
13683: LD_EXP 27
13687: PUSH
13688: LD_VAR 0 2
13692: IN
13693: IFFALSE 13707
// SaveCharacters ( Denis , 12a_Denis ) ;
13695: LD_EXP 27
13699: PPUSH
13700: LD_STRING 12a_Denis
13702: PPUSH
13703: CALL_OW 38
// if Brown in tmp then
13707: LD_EXP 28
13711: PUSH
13712: LD_VAR 0 2
13716: IN
13717: IFFALSE 13733
// SaveCharacters ( Brown , 12a_Brown ) else
13719: LD_EXP 28
13723: PPUSH
13724: LD_STRING 12a_Brown
13726: PPUSH
13727: CALL_OW 38
13731: GO 13757
// if Brown in tmp then
13733: LD_EXP 28
13737: PUSH
13738: LD_VAR 0 2
13742: IN
13743: IFFALSE 13757
// SaveCharacters ( Brown , 12p_Brown ) ;
13745: LD_EXP 28
13749: PPUSH
13750: LD_STRING 12p_Brown
13752: PPUSH
13753: CALL_OW 38
// if Gladstone in tmp then
13757: LD_EXP 29
13761: PUSH
13762: LD_VAR 0 2
13766: IN
13767: IFFALSE 13783
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13769: LD_EXP 29
13773: PPUSH
13774: LD_STRING 12a_Gladstone
13776: PPUSH
13777: CALL_OW 38
13781: GO 13801
// if Gladstone then
13783: LD_EXP 29
13787: IFFALSE 13801
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13789: LD_EXP 29
13793: PPUSH
13794: LD_STRING 12p_Gladstone
13796: PPUSH
13797: CALL_OW 38
// if Houten in tmp then
13801: LD_EXP 30
13805: PUSH
13806: LD_VAR 0 2
13810: IN
13811: IFFALSE 13827
// SaveCharacters ( Houten , 12a_Houten ) else
13813: LD_EXP 30
13817: PPUSH
13818: LD_STRING 12a_Houten
13820: PPUSH
13821: CALL_OW 38
13825: GO 13845
// if Houten then
13827: LD_EXP 30
13831: IFFALSE 13845
// SaveCharacters ( Houten , 12p_Houten ) ;
13833: LD_EXP 30
13837: PPUSH
13838: LD_STRING 12p_Houten
13840: PPUSH
13841: CALL_OW 38
// if Cornel in tmp then
13845: LD_EXP 31
13849: PUSH
13850: LD_VAR 0 2
13854: IN
13855: IFFALSE 13871
// SaveCharacters ( Cornel , 12a_Cornell ) else
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING 12a_Cornell
13864: PPUSH
13865: CALL_OW 38
13869: GO 13889
// if Cornel then
13871: LD_EXP 31
13875: IFFALSE 13889
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13877: LD_EXP 31
13881: PPUSH
13882: LD_STRING 12p_Cornell
13884: PPUSH
13885: CALL_OW 38
// if Gary in tmp then
13889: LD_EXP 32
13893: PUSH
13894: LD_VAR 0 2
13898: IN
13899: IFFALSE 13915
// SaveCharacters ( Gary , 12a_Gary ) else
13901: LD_EXP 32
13905: PPUSH
13906: LD_STRING 12a_Gary
13908: PPUSH
13909: CALL_OW 38
13913: GO 13933
// if Gary then
13915: LD_EXP 32
13919: IFFALSE 13933
// SaveCharacters ( Gary , 12p_Gary ) ;
13921: LD_EXP 32
13925: PPUSH
13926: LD_STRING 12p_Gary
13928: PPUSH
13929: CALL_OW 38
// if Frank in tmp then
13933: LD_EXP 33
13937: PUSH
13938: LD_VAR 0 2
13942: IN
13943: IFFALSE 13957
// SaveCharacters ( Frank , 12a_Frank ) ;
13945: LD_EXP 33
13949: PPUSH
13950: LD_STRING 12a_Frank
13952: PPUSH
13953: CALL_OW 38
// if Kikuchi in tmp then
13957: LD_EXP 34
13961: PUSH
13962: LD_VAR 0 2
13966: IN
13967: IFFALSE 13983
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING 12a_Kikuchi
13976: PPUSH
13977: CALL_OW 38
13981: GO 14001
// if Kikuchi then
13983: LD_EXP 34
13987: IFFALSE 14001
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13989: LD_EXP 34
13993: PPUSH
13994: LD_STRING 12p_Kikuchi
13996: PPUSH
13997: CALL_OW 38
// if Simms in tmp then
14001: LD_EXP 35
14005: PUSH
14006: LD_VAR 0 2
14010: IN
14011: IFFALSE 14025
// SaveCharacters ( Simms , 12a_Simms ) ;
14013: LD_EXP 35
14017: PPUSH
14018: LD_STRING 12a_Simms
14020: PPUSH
14021: CALL_OW 38
// if Joan in tmp then
14025: LD_EXP 36
14029: PUSH
14030: LD_VAR 0 2
14034: IN
14035: IFFALSE 14049
// SaveCharacters ( Joan , 12a_Joan ) ;
14037: LD_EXP 36
14041: PPUSH
14042: LD_STRING 12a_Joan
14044: PPUSH
14045: CALL_OW 38
// if DeltaDoctor in tmp then
14049: LD_EXP 37
14053: PUSH
14054: LD_VAR 0 2
14058: IN
14059: IFFALSE 14073
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14061: LD_EXP 37
14065: PPUSH
14066: LD_STRING 12a_DeltaDoctor
14068: PPUSH
14069: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_VAR 0 2
14082: PUSH
14083: LD_EXP 14
14087: PUSH
14088: LD_EXP 15
14092: PUSH
14093: LD_EXP 23
14097: PUSH
14098: LD_EXP 24
14102: PUSH
14103: LD_EXP 25
14107: PUSH
14108: LD_EXP 26
14112: PUSH
14113: LD_EXP 27
14117: PUSH
14118: LD_EXP 28
14122: PUSH
14123: LD_EXP 29
14127: PUSH
14128: LD_EXP 30
14132: PUSH
14133: LD_EXP 31
14137: PUSH
14138: LD_EXP 32
14142: PUSH
14143: LD_EXP 33
14147: PUSH
14148: LD_EXP 34
14152: PUSH
14153: LD_EXP 35
14157: PUSH
14158: LD_EXP 36
14162: PUSH
14163: LD_EXP 37
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: DIFF
14187: ST_TO_ADDR
// if tmp then
14188: LD_VAR 0 2
14192: IFFALSE 14206
// SaveCharacters ( tmp , 12a_others ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_STRING 12a_others
14201: PPUSH
14202: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_INT 21
14213: PUSH
14214: LD_INT 1
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 23
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 4
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: PUSH
14269: LD_EXP 14
14273: PUSH
14274: LD_EXP 15
14278: PUSH
14279: LD_EXP 23
14283: PUSH
14284: LD_EXP 24
14288: PUSH
14289: LD_EXP 25
14293: PUSH
14294: LD_EXP 26
14298: PUSH
14299: LD_EXP 27
14303: PUSH
14304: LD_EXP 28
14308: PUSH
14309: LD_EXP 29
14313: PUSH
14314: LD_EXP 30
14318: PUSH
14319: LD_EXP 31
14323: PUSH
14324: LD_EXP 32
14328: PUSH
14329: LD_EXP 33
14333: PUSH
14334: LD_EXP 34
14338: PUSH
14339: LD_EXP 35
14343: PUSH
14344: LD_EXP 36
14348: PUSH
14349: LD_EXP 37
14353: PUSH
14354: LD_EXP 16
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: DIFF
14379: ST_TO_ADDR
// if tmp then
14380: LD_VAR 0 2
14384: IFFALSE 14398
// SaveCharacters ( tmp , 12p_others ) ;
14386: LD_VAR 0 2
14390: PPUSH
14391: LD_STRING 12p_others
14393: PPUSH
14394: CALL_OW 38
// YouWin ;
14398: CALL_OW 103
// end ; end_of_file
14402: PPOPN 5
14404: END
// on SailEvent ( event ) do var tmp ;
14405: LD_INT 0
14407: PPUSH
// begin if event = 1 then
14408: LD_VAR 0 1
14412: PUSH
14413: LD_INT 1
14415: EQUAL
14416: IFFALSE 14489
// begin if not mobile_patrol then
14418: LD_EXP 17
14422: NOT
14423: IFFALSE 14427
// exit ;
14425: GO 14489
// tmp := mobile_patrol [ mobile_patrol ] ;
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: LD_EXP 17
14436: PUSH
14437: LD_EXP 17
14441: ARRAY
14442: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14443: LD_ADDR_EXP 17
14447: PUSH
14448: LD_EXP 17
14452: PPUSH
14453: LD_EXP 17
14457: PPUSH
14458: CALL_OW 3
14462: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14463: LD_VAR 0 2
14467: PPUSH
14468: LD_EXP 18
14472: PUSH
14473: LD_EXP 17
14477: PUSH
14478: LD_INT 1
14480: PLUS
14481: ARRAY
14482: PPUSH
14483: EMPTY
14484: PPUSH
14485: CALL 6669 0 3
// end ; end ;
14489: PPOPN 2
14491: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
14492: LD_VAR 0 1
14496: PPUSH
14497: CALL 29514 0 1
// if un = JMM then
14501: LD_VAR 0 1
14505: PUSH
14506: LD_EXP 14
14510: EQUAL
14511: IFFALSE 14520
// YouLost ( JMM ) ;
14513: LD_STRING JMM
14515: PPUSH
14516: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14520: LD_VAR 0 1
14524: PPUSH
14525: CALL_OW 255
14529: PUSH
14530: LD_INT 7
14532: EQUAL
14533: PUSH
14534: LD_VAR 0 1
14538: PPUSH
14539: CALL_OW 264
14543: PUSH
14544: LD_INT 12
14546: EQUAL
14547: AND
14548: IFFALSE 14557
// YouLost ( Artifact ) ;
14550: LD_STRING Artifact
14552: PPUSH
14553: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14557: LD_VAR 0 1
14561: PPUSH
14562: CALL_OW 255
14566: PUSH
14567: LD_INT 7
14569: EQUAL
14570: PUSH
14571: LD_VAR 0 1
14575: PPUSH
14576: CALL_OW 247
14580: PUSH
14581: LD_INT 1
14583: EQUAL
14584: AND
14585: PUSH
14586: LD_VAR 0 1
14590: PUSH
14591: LD_EXP 15
14595: EQUAL
14596: OR
14597: IFFALSE 14613
// team_kill_counter := team_kill_counter + 1 ;
14599: LD_ADDR_EXP 9
14603: PUSH
14604: LD_EXP 9
14608: PUSH
14609: LD_INT 1
14611: PLUS
14612: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: PUSH
14627: LD_VAR 0 1
14631: PPUSH
14632: CALL_OW 247
14636: PUSH
14637: LD_INT 1
14639: EQUAL
14640: AND
14641: IFFALSE 14657
// friends_kill_counter := friends_kill_counter + 1 ;
14643: LD_ADDR_EXP 8
14647: PUSH
14648: LD_EXP 8
14652: PUSH
14653: LD_INT 1
14655: PLUS
14656: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14657: LD_VAR 0 1
14661: PPUSH
14662: CALL_OW 255
14666: PUSH
14667: LD_INT 1
14669: NONEQUAL
14670: IFFALSE 14674
// exit ;
14672: GO 14751
// if GetControl ( un ) = control_remote then
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 263
14683: PUSH
14684: LD_INT 2
14686: EQUAL
14687: IFFALSE 14705
// defenders := defenders diff un ;
14689: LD_ADDR_EXP 20
14693: PUSH
14694: LD_EXP 20
14698: PUSH
14699: LD_VAR 0 1
14703: DIFF
14704: ST_TO_ADDR
// if not un in defenders then
14705: LD_VAR 0 1
14709: PUSH
14710: LD_EXP 20
14714: IN
14715: NOT
14716: IFFALSE 14751
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14718: LD_ADDR_EXP 21
14722: PUSH
14723: LD_VAR 0 1
14727: PPUSH
14728: CALL_OW 250
14732: PUSH
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 251
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: ST_TO_ADDR
// Defend ;
14747: CALL 2791 0 0
// end ; end ;
14751: PPOPN 1
14753: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14754: LD_VAR 0 1
14758: PPUSH
14759: LD_VAR 0 2
14763: PPUSH
14764: CALL 29636 0 2
// if GetSide ( veh ) <> 1 then
14768: LD_VAR 0 1
14772: PPUSH
14773: CALL_OW 255
14777: PUSH
14778: LD_INT 1
14780: NONEQUAL
14781: IFFALSE 14785
// exit ;
14783: GO 14809
// if GetControl ( veh ) = control_remote then
14785: LD_VAR 0 1
14789: PPUSH
14790: CALL_OW 263
14794: PUSH
14795: LD_INT 2
14797: EQUAL
14798: IFFALSE 14809
// Connect ( veh ) ;
14800: LD_VAR 0 1
14804: PPUSH
14805: CALL 42111 0 1
// end ;
14809: PPOPN 2
14811: END
// on UnitGoesToRed ( un ) do var i , veh ;
14812: LD_INT 0
14814: PPUSH
14815: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 255
14825: PUSH
14826: LD_INT 1
14828: EQUAL
14829: PUSH
14830: LD_VAR 0 1
14834: PPUSH
14835: CALL_OW 263
14839: PUSH
14840: LD_INT 2
14842: EQUAL
14843: AND
14844: IFFALSE 14855
// ComUnlink ( un ) ;
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 136
// if un = ambar0 then
14855: LD_VAR 0 1
14859: PUSH
14860: LD_INT 18
14862: EQUAL
14863: IFFALSE 14973
// begin uc_side := 1 ;
14865: LD_ADDR_OWVAR 20
14869: PUSH
14870: LD_INT 1
14872: ST_TO_ADDR
// uc_nation := 1 ;
14873: LD_ADDR_OWVAR 21
14877: PUSH
14878: LD_INT 1
14880: ST_TO_ADDR
// for i = 1 to 6 do
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: DOUBLE
14887: LD_INT 1
14889: DEC
14890: ST_TO_ADDR
14891: LD_INT 6
14893: PUSH
14894: FOR_TO
14895: IFFALSE 14971
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14897: LD_INT 3
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: LD_INT 3
14905: PPUSH
14906: LD_INT 4
14908: PPUSH
14909: LD_INT 100
14911: PPUSH
14912: CALL 39018 0 5
// veh := CreateVehicle ;
14916: LD_ADDR_VAR 0 3
14920: PUSH
14921: CALL_OW 45
14925: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14938: LD_VAR 0 3
14942: PPUSH
14943: LD_INT 25
14945: PPUSH
14946: LD_INT 0
14948: PPUSH
14949: CALL_OW 49
// defenders := defenders ^ veh ;
14953: LD_ADDR_EXP 20
14957: PUSH
14958: LD_EXP 20
14962: PUSH
14963: LD_VAR 0 3
14967: ADD
14968: ST_TO_ADDR
// end ;
14969: GO 14894
14971: POP
14972: POP
// end ; end ;
14973: PPOPN 3
14975: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14976: LD_VAR 0 2
14980: PUSH
14981: LD_EXP 16
14985: EQUAL
14986: IFFALSE 14997
// RemoveUnit ( Powell ) ;
14988: LD_EXP 16
14992: PPUSH
14993: CALL_OW 64
// end ;
14997: PPOPN 2
14999: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15000: LD_VAR 0 1
15004: PPUSH
15005: CALL 29620 0 1
// end ; end_of_file
15009: PPOPN 1
15011: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
15012: LD_INT 0
15014: PPUSH
// ar_miner := 81 ;
15015: LD_ADDR_EXP 45
15019: PUSH
15020: LD_INT 81
15022: ST_TO_ADDR
// ar_crane := 88 ;
15023: LD_ADDR_EXP 44
15027: PUSH
15028: LD_INT 88
15030: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15031: LD_ADDR_EXP 39
15035: PUSH
15036: LD_INT 89
15038: ST_TO_ADDR
// us_hack := 99 ;
15039: LD_ADDR_EXP 40
15043: PUSH
15044: LD_INT 99
15046: ST_TO_ADDR
// us_artillery := 97 ;
15047: LD_ADDR_EXP 41
15051: PUSH
15052: LD_INT 97
15054: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15055: LD_ADDR_EXP 42
15059: PUSH
15060: LD_INT 91
15062: ST_TO_ADDR
// ar_mortar := 92 ;
15063: LD_ADDR_EXP 43
15067: PUSH
15068: LD_INT 92
15070: ST_TO_ADDR
// ru_radar := 98 ;
15071: LD_ADDR_EXP 38
15075: PUSH
15076: LD_INT 98
15078: ST_TO_ADDR
// tech_Artillery := 80 ;
15079: LD_ADDR_EXP 46
15083: PUSH
15084: LD_INT 80
15086: ST_TO_ADDR
// tech_RadMat := 81 ;
15087: LD_ADDR_EXP 47
15091: PUSH
15092: LD_INT 81
15094: ST_TO_ADDR
// tech_BasicTools := 82 ;
15095: LD_ADDR_EXP 48
15099: PUSH
15100: LD_INT 82
15102: ST_TO_ADDR
// tech_Cargo := 83 ;
15103: LD_ADDR_EXP 49
15107: PUSH
15108: LD_INT 83
15110: ST_TO_ADDR
// tech_Track := 84 ;
15111: LD_ADDR_EXP 50
15115: PUSH
15116: LD_INT 84
15118: ST_TO_ADDR
// tech_Crane := 85 ;
15119: LD_ADDR_EXP 51
15123: PUSH
15124: LD_INT 85
15126: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15127: LD_ADDR_EXP 52
15131: PUSH
15132: LD_INT 86
15134: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15135: LD_ADDR_EXP 53
15139: PUSH
15140: LD_INT 87
15142: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
15143: LD_ADDR_EXP 54
15147: PUSH
15148: LD_INT 88
15150: ST_TO_ADDR
// class_mastodont := 31 ;
15151: LD_ADDR_EXP 55
15155: PUSH
15156: LD_INT 31
15158: ST_TO_ADDR
// class_horse := 21 ;
15159: LD_ADDR_EXP 56
15163: PUSH
15164: LD_INT 21
15166: ST_TO_ADDR
// end ;
15167: LD_VAR 0 1
15171: RET
// every 1 do
15172: GO 15174
15174: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15175: CALL 15012 0 0
15179: END
// every 0 0$1 do
15180: GO 15182
15182: DISABLE
// begin enable ;
15183: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15184: LD_STRING updateTimer(
15186: PUSH
15187: LD_OWVAR 1
15191: STR
15192: PUSH
15193: LD_STRING );
15195: STR
15196: PPUSH
15197: CALL_OW 559
// end ;
15201: END
// export function SOS_MapStart ( ) ; begin
15202: LD_INT 0
15204: PPUSH
// if streamModeActive then
15205: LD_EXP 57
15209: IFFALSE 15218
// DefineStreamItems ( true ) ;
15211: LD_INT 1
15213: PPUSH
15214: CALL 16868 0 1
// UpdateFactoryWaypoints ( ) ;
15218: CALL 30452 0 0
// end ;
15222: LD_VAR 0 1
15226: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15227: LD_INT 0
15229: PPUSH
// if p2 = 100 then
15230: LD_VAR 0 2
15234: PUSH
15235: LD_INT 100
15237: EQUAL
15238: IFFALSE 16241
// begin if not StreamModeActive then
15240: LD_EXP 57
15244: NOT
15245: IFFALSE 15255
// StreamModeActive := true ;
15247: LD_ADDR_EXP 57
15251: PUSH
15252: LD_INT 1
15254: ST_TO_ADDR
// if p3 = 0 then
15255: LD_VAR 0 3
15259: PUSH
15260: LD_INT 0
15262: EQUAL
15263: IFFALSE 15269
// InitStreamMode ;
15265: CALL 16404 0 0
// if p3 = 1 then
15269: LD_VAR 0 3
15273: PUSH
15274: LD_INT 1
15276: EQUAL
15277: IFFALSE 15287
// sRocket := true ;
15279: LD_ADDR_EXP 62
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// if p3 = 2 then
15287: LD_VAR 0 3
15291: PUSH
15292: LD_INT 2
15294: EQUAL
15295: IFFALSE 15305
// sSpeed := true ;
15297: LD_ADDR_EXP 61
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if p3 = 3 then
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 3
15312: EQUAL
15313: IFFALSE 15323
// sEngine := true ;
15315: LD_ADDR_EXP 63
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// if p3 = 4 then
15323: LD_VAR 0 3
15327: PUSH
15328: LD_INT 4
15330: EQUAL
15331: IFFALSE 15341
// sSpec := true ;
15333: LD_ADDR_EXP 60
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// if p3 = 5 then
15341: LD_VAR 0 3
15345: PUSH
15346: LD_INT 5
15348: EQUAL
15349: IFFALSE 15359
// sLevel := true ;
15351: LD_ADDR_EXP 64
15355: PUSH
15356: LD_INT 1
15358: ST_TO_ADDR
// if p3 = 6 then
15359: LD_VAR 0 3
15363: PUSH
15364: LD_INT 6
15366: EQUAL
15367: IFFALSE 15377
// sArmoury := true ;
15369: LD_ADDR_EXP 65
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// if p3 = 7 then
15377: LD_VAR 0 3
15381: PUSH
15382: LD_INT 7
15384: EQUAL
15385: IFFALSE 15395
// sRadar := true ;
15387: LD_ADDR_EXP 66
15391: PUSH
15392: LD_INT 1
15394: ST_TO_ADDR
// if p3 = 8 then
15395: LD_VAR 0 3
15399: PUSH
15400: LD_INT 8
15402: EQUAL
15403: IFFALSE 15413
// sBunker := true ;
15405: LD_ADDR_EXP 67
15409: PUSH
15410: LD_INT 1
15412: ST_TO_ADDR
// if p3 = 9 then
15413: LD_VAR 0 3
15417: PUSH
15418: LD_INT 9
15420: EQUAL
15421: IFFALSE 15431
// sHack := true ;
15423: LD_ADDR_EXP 68
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// if p3 = 10 then
15431: LD_VAR 0 3
15435: PUSH
15436: LD_INT 10
15438: EQUAL
15439: IFFALSE 15449
// sFire := true ;
15441: LD_ADDR_EXP 69
15445: PUSH
15446: LD_INT 1
15448: ST_TO_ADDR
// if p3 = 11 then
15449: LD_VAR 0 3
15453: PUSH
15454: LD_INT 11
15456: EQUAL
15457: IFFALSE 15467
// sRefresh := true ;
15459: LD_ADDR_EXP 70
15463: PUSH
15464: LD_INT 1
15466: ST_TO_ADDR
// if p3 = 12 then
15467: LD_VAR 0 3
15471: PUSH
15472: LD_INT 12
15474: EQUAL
15475: IFFALSE 15485
// sExp := true ;
15477: LD_ADDR_EXP 71
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// if p3 = 13 then
15485: LD_VAR 0 3
15489: PUSH
15490: LD_INT 13
15492: EQUAL
15493: IFFALSE 15503
// sDepot := true ;
15495: LD_ADDR_EXP 72
15499: PUSH
15500: LD_INT 1
15502: ST_TO_ADDR
// if p3 = 14 then
15503: LD_VAR 0 3
15507: PUSH
15508: LD_INT 14
15510: EQUAL
15511: IFFALSE 15521
// sFlag := true ;
15513: LD_ADDR_EXP 73
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
// if p3 = 15 then
15521: LD_VAR 0 3
15525: PUSH
15526: LD_INT 15
15528: EQUAL
15529: IFFALSE 15539
// sKamikadze := true ;
15531: LD_ADDR_EXP 81
15535: PUSH
15536: LD_INT 1
15538: ST_TO_ADDR
// if p3 = 16 then
15539: LD_VAR 0 3
15543: PUSH
15544: LD_INT 16
15546: EQUAL
15547: IFFALSE 15557
// sTroll := true ;
15549: LD_ADDR_EXP 82
15553: PUSH
15554: LD_INT 1
15556: ST_TO_ADDR
// if p3 = 17 then
15557: LD_VAR 0 3
15561: PUSH
15562: LD_INT 17
15564: EQUAL
15565: IFFALSE 15575
// sSlow := true ;
15567: LD_ADDR_EXP 83
15571: PUSH
15572: LD_INT 1
15574: ST_TO_ADDR
// if p3 = 18 then
15575: LD_VAR 0 3
15579: PUSH
15580: LD_INT 18
15582: EQUAL
15583: IFFALSE 15593
// sLack := true ;
15585: LD_ADDR_EXP 84
15589: PUSH
15590: LD_INT 1
15592: ST_TO_ADDR
// if p3 = 19 then
15593: LD_VAR 0 3
15597: PUSH
15598: LD_INT 19
15600: EQUAL
15601: IFFALSE 15611
// sTank := true ;
15603: LD_ADDR_EXP 86
15607: PUSH
15608: LD_INT 1
15610: ST_TO_ADDR
// if p3 = 20 then
15611: LD_VAR 0 3
15615: PUSH
15616: LD_INT 20
15618: EQUAL
15619: IFFALSE 15629
// sRemote := true ;
15621: LD_ADDR_EXP 87
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// if p3 = 21 then
15629: LD_VAR 0 3
15633: PUSH
15634: LD_INT 21
15636: EQUAL
15637: IFFALSE 15647
// sPowell := true ;
15639: LD_ADDR_EXP 88
15643: PUSH
15644: LD_INT 1
15646: ST_TO_ADDR
// if p3 = 22 then
15647: LD_VAR 0 3
15651: PUSH
15652: LD_INT 22
15654: EQUAL
15655: IFFALSE 15665
// sTeleport := true ;
15657: LD_ADDR_EXP 91
15661: PUSH
15662: LD_INT 1
15664: ST_TO_ADDR
// if p3 = 23 then
15665: LD_VAR 0 3
15669: PUSH
15670: LD_INT 23
15672: EQUAL
15673: IFFALSE 15683
// sOilTower := true ;
15675: LD_ADDR_EXP 93
15679: PUSH
15680: LD_INT 1
15682: ST_TO_ADDR
// if p3 = 24 then
15683: LD_VAR 0 3
15687: PUSH
15688: LD_INT 24
15690: EQUAL
15691: IFFALSE 15701
// sShovel := true ;
15693: LD_ADDR_EXP 94
15697: PUSH
15698: LD_INT 1
15700: ST_TO_ADDR
// if p3 = 25 then
15701: LD_VAR 0 3
15705: PUSH
15706: LD_INT 25
15708: EQUAL
15709: IFFALSE 15719
// sSheik := true ;
15711: LD_ADDR_EXP 95
15715: PUSH
15716: LD_INT 1
15718: ST_TO_ADDR
// if p3 = 26 then
15719: LD_VAR 0 3
15723: PUSH
15724: LD_INT 26
15726: EQUAL
15727: IFFALSE 15737
// sEarthquake := true ;
15729: LD_ADDR_EXP 97
15733: PUSH
15734: LD_INT 1
15736: ST_TO_ADDR
// if p3 = 27 then
15737: LD_VAR 0 3
15741: PUSH
15742: LD_INT 27
15744: EQUAL
15745: IFFALSE 15755
// sAI := true ;
15747: LD_ADDR_EXP 98
15751: PUSH
15752: LD_INT 1
15754: ST_TO_ADDR
// if p3 = 28 then
15755: LD_VAR 0 3
15759: PUSH
15760: LD_INT 28
15762: EQUAL
15763: IFFALSE 15773
// sCargo := true ;
15765: LD_ADDR_EXP 101
15769: PUSH
15770: LD_INT 1
15772: ST_TO_ADDR
// if p3 = 29 then
15773: LD_VAR 0 3
15777: PUSH
15778: LD_INT 29
15780: EQUAL
15781: IFFALSE 15791
// sDLaser := true ;
15783: LD_ADDR_EXP 102
15787: PUSH
15788: LD_INT 1
15790: ST_TO_ADDR
// if p3 = 30 then
15791: LD_VAR 0 3
15795: PUSH
15796: LD_INT 30
15798: EQUAL
15799: IFFALSE 15809
// sExchange := true ;
15801: LD_ADDR_EXP 103
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// if p3 = 31 then
15809: LD_VAR 0 3
15813: PUSH
15814: LD_INT 31
15816: EQUAL
15817: IFFALSE 15827
// sFac := true ;
15819: LD_ADDR_EXP 104
15823: PUSH
15824: LD_INT 1
15826: ST_TO_ADDR
// if p3 = 32 then
15827: LD_VAR 0 3
15831: PUSH
15832: LD_INT 32
15834: EQUAL
15835: IFFALSE 15845
// sPower := true ;
15837: LD_ADDR_EXP 105
15841: PUSH
15842: LD_INT 1
15844: ST_TO_ADDR
// if p3 = 33 then
15845: LD_VAR 0 3
15849: PUSH
15850: LD_INT 33
15852: EQUAL
15853: IFFALSE 15863
// sRandom := true ;
15855: LD_ADDR_EXP 106
15859: PUSH
15860: LD_INT 1
15862: ST_TO_ADDR
// if p3 = 34 then
15863: LD_VAR 0 3
15867: PUSH
15868: LD_INT 34
15870: EQUAL
15871: IFFALSE 15881
// sShield := true ;
15873: LD_ADDR_EXP 107
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// if p3 = 35 then
15881: LD_VAR 0 3
15885: PUSH
15886: LD_INT 35
15888: EQUAL
15889: IFFALSE 15899
// sTime := true ;
15891: LD_ADDR_EXP 108
15895: PUSH
15896: LD_INT 1
15898: ST_TO_ADDR
// if p3 = 36 then
15899: LD_VAR 0 3
15903: PUSH
15904: LD_INT 36
15906: EQUAL
15907: IFFALSE 15917
// sTools := true ;
15909: LD_ADDR_EXP 109
15913: PUSH
15914: LD_INT 1
15916: ST_TO_ADDR
// if p3 = 101 then
15917: LD_VAR 0 3
15921: PUSH
15922: LD_INT 101
15924: EQUAL
15925: IFFALSE 15935
// sSold := true ;
15927: LD_ADDR_EXP 74
15931: PUSH
15932: LD_INT 1
15934: ST_TO_ADDR
// if p3 = 102 then
15935: LD_VAR 0 3
15939: PUSH
15940: LD_INT 102
15942: EQUAL
15943: IFFALSE 15953
// sDiff := true ;
15945: LD_ADDR_EXP 75
15949: PUSH
15950: LD_INT 1
15952: ST_TO_ADDR
// if p3 = 103 then
15953: LD_VAR 0 3
15957: PUSH
15958: LD_INT 103
15960: EQUAL
15961: IFFALSE 15971
// sFog := true ;
15963: LD_ADDR_EXP 78
15967: PUSH
15968: LD_INT 1
15970: ST_TO_ADDR
// if p3 = 104 then
15971: LD_VAR 0 3
15975: PUSH
15976: LD_INT 104
15978: EQUAL
15979: IFFALSE 15989
// sReset := true ;
15981: LD_ADDR_EXP 79
15985: PUSH
15986: LD_INT 1
15988: ST_TO_ADDR
// if p3 = 105 then
15989: LD_VAR 0 3
15993: PUSH
15994: LD_INT 105
15996: EQUAL
15997: IFFALSE 16007
// sSun := true ;
15999: LD_ADDR_EXP 80
16003: PUSH
16004: LD_INT 1
16006: ST_TO_ADDR
// if p3 = 106 then
16007: LD_VAR 0 3
16011: PUSH
16012: LD_INT 106
16014: EQUAL
16015: IFFALSE 16025
// sTiger := true ;
16017: LD_ADDR_EXP 76
16021: PUSH
16022: LD_INT 1
16024: ST_TO_ADDR
// if p3 = 107 then
16025: LD_VAR 0 3
16029: PUSH
16030: LD_INT 107
16032: EQUAL
16033: IFFALSE 16043
// sBomb := true ;
16035: LD_ADDR_EXP 77
16039: PUSH
16040: LD_INT 1
16042: ST_TO_ADDR
// if p3 = 108 then
16043: LD_VAR 0 3
16047: PUSH
16048: LD_INT 108
16050: EQUAL
16051: IFFALSE 16061
// sWound := true ;
16053: LD_ADDR_EXP 85
16057: PUSH
16058: LD_INT 1
16060: ST_TO_ADDR
// if p3 = 109 then
16061: LD_VAR 0 3
16065: PUSH
16066: LD_INT 109
16068: EQUAL
16069: IFFALSE 16079
// sBetray := true ;
16071: LD_ADDR_EXP 89
16075: PUSH
16076: LD_INT 1
16078: ST_TO_ADDR
// if p3 = 110 then
16079: LD_VAR 0 3
16083: PUSH
16084: LD_INT 110
16086: EQUAL
16087: IFFALSE 16097
// sContamin := true ;
16089: LD_ADDR_EXP 90
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// if p3 = 111 then
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 111
16104: EQUAL
16105: IFFALSE 16115
// sOil := true ;
16107: LD_ADDR_EXP 92
16111: PUSH
16112: LD_INT 1
16114: ST_TO_ADDR
// if p3 = 112 then
16115: LD_VAR 0 3
16119: PUSH
16120: LD_INT 112
16122: EQUAL
16123: IFFALSE 16133
// sStu := true ;
16125: LD_ADDR_EXP 96
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// if p3 = 113 then
16133: LD_VAR 0 3
16137: PUSH
16138: LD_INT 113
16140: EQUAL
16141: IFFALSE 16151
// sBazooka := true ;
16143: LD_ADDR_EXP 99
16147: PUSH
16148: LD_INT 1
16150: ST_TO_ADDR
// if p3 = 114 then
16151: LD_VAR 0 3
16155: PUSH
16156: LD_INT 114
16158: EQUAL
16159: IFFALSE 16169
// sMortar := true ;
16161: LD_ADDR_EXP 100
16165: PUSH
16166: LD_INT 1
16168: ST_TO_ADDR
// if p3 = 115 then
16169: LD_VAR 0 3
16173: PUSH
16174: LD_INT 115
16176: EQUAL
16177: IFFALSE 16187
// sRanger := true ;
16179: LD_ADDR_EXP 110
16183: PUSH
16184: LD_INT 1
16186: ST_TO_ADDR
// if p3 = 116 then
16187: LD_VAR 0 3
16191: PUSH
16192: LD_INT 116
16194: EQUAL
16195: IFFALSE 16205
// sComputer := true ;
16197: LD_ADDR_EXP 111
16201: PUSH
16202: LD_INT 1
16204: ST_TO_ADDR
// if p3 = 117 then
16205: LD_VAR 0 3
16209: PUSH
16210: LD_INT 117
16212: EQUAL
16213: IFFALSE 16223
// s30 := true ;
16215: LD_ADDR_EXP 112
16219: PUSH
16220: LD_INT 1
16222: ST_TO_ADDR
// if p3 = 118 then
16223: LD_VAR 0 3
16227: PUSH
16228: LD_INT 118
16230: EQUAL
16231: IFFALSE 16241
// s60 := true ;
16233: LD_ADDR_EXP 113
16237: PUSH
16238: LD_INT 1
16240: ST_TO_ADDR
// end ; if p2 = 101 then
16241: LD_VAR 0 2
16245: PUSH
16246: LD_INT 101
16248: EQUAL
16249: IFFALSE 16377
// begin case p3 of 1 :
16251: LD_VAR 0 3
16255: PUSH
16256: LD_INT 1
16258: DOUBLE
16259: EQUAL
16260: IFTRUE 16264
16262: GO 16271
16264: POP
// hHackUnlimitedResources ; 2 :
16265: CALL 28475 0 0
16269: GO 16377
16271: LD_INT 2
16273: DOUBLE
16274: EQUAL
16275: IFTRUE 16279
16277: GO 16286
16279: POP
// hHackSetLevel10 ; 3 :
16280: CALL 28608 0 0
16284: GO 16377
16286: LD_INT 3
16288: DOUBLE
16289: EQUAL
16290: IFTRUE 16294
16292: GO 16301
16294: POP
// hHackSetLevel10YourUnits ; 4 :
16295: CALL 28693 0 0
16299: GO 16377
16301: LD_INT 4
16303: DOUBLE
16304: EQUAL
16305: IFTRUE 16309
16307: GO 16316
16309: POP
// hHackInvincible ; 5 :
16310: CALL 29141 0 0
16314: GO 16377
16316: LD_INT 5
16318: DOUBLE
16319: EQUAL
16320: IFTRUE 16324
16322: GO 16331
16324: POP
// hHackInvisible ; 6 :
16325: CALL 29252 0 0
16329: GO 16377
16331: LD_INT 6
16333: DOUBLE
16334: EQUAL
16335: IFTRUE 16339
16337: GO 16346
16339: POP
// hHackChangeYourSide ; 7 :
16340: CALL 29309 0 0
16344: GO 16377
16346: LD_INT 7
16348: DOUBLE
16349: EQUAL
16350: IFTRUE 16354
16352: GO 16361
16354: POP
// hHackChangeUnitSide ; 8 :
16355: CALL 29351 0 0
16359: GO 16377
16361: LD_INT 8
16363: DOUBLE
16364: EQUAL
16365: IFTRUE 16369
16367: GO 16376
16369: POP
// hHackFog ; end ;
16370: CALL 29452 0 0
16374: GO 16377
16376: POP
// end ; end ;
16377: LD_VAR 0 7
16381: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16382: GO 16384
16384: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16385: LD_STRING initStreamRollete();
16387: PPUSH
16388: CALL_OW 559
// InitStreamMode ;
16392: CALL 16404 0 0
// DefineStreamItems ( false ) ;
16396: LD_INT 0
16398: PPUSH
16399: CALL 16868 0 1
// end ;
16403: END
// function InitStreamMode ; begin
16404: LD_INT 0
16406: PPUSH
// streamModeActive := false ;
16407: LD_ADDR_EXP 57
16411: PUSH
16412: LD_INT 0
16414: ST_TO_ADDR
// normalCounter := 36 ;
16415: LD_ADDR_EXP 58
16419: PUSH
16420: LD_INT 36
16422: ST_TO_ADDR
// hardcoreCounter := 18 ;
16423: LD_ADDR_EXP 59
16427: PUSH
16428: LD_INT 18
16430: ST_TO_ADDR
// sRocket := false ;
16431: LD_ADDR_EXP 62
16435: PUSH
16436: LD_INT 0
16438: ST_TO_ADDR
// sSpeed := false ;
16439: LD_ADDR_EXP 61
16443: PUSH
16444: LD_INT 0
16446: ST_TO_ADDR
// sEngine := false ;
16447: LD_ADDR_EXP 63
16451: PUSH
16452: LD_INT 0
16454: ST_TO_ADDR
// sSpec := false ;
16455: LD_ADDR_EXP 60
16459: PUSH
16460: LD_INT 0
16462: ST_TO_ADDR
// sLevel := false ;
16463: LD_ADDR_EXP 64
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// sArmoury := false ;
16471: LD_ADDR_EXP 65
16475: PUSH
16476: LD_INT 0
16478: ST_TO_ADDR
// sRadar := false ;
16479: LD_ADDR_EXP 66
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// sBunker := false ;
16487: LD_ADDR_EXP 67
16491: PUSH
16492: LD_INT 0
16494: ST_TO_ADDR
// sHack := false ;
16495: LD_ADDR_EXP 68
16499: PUSH
16500: LD_INT 0
16502: ST_TO_ADDR
// sFire := false ;
16503: LD_ADDR_EXP 69
16507: PUSH
16508: LD_INT 0
16510: ST_TO_ADDR
// sRefresh := false ;
16511: LD_ADDR_EXP 70
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// sExp := false ;
16519: LD_ADDR_EXP 71
16523: PUSH
16524: LD_INT 0
16526: ST_TO_ADDR
// sDepot := false ;
16527: LD_ADDR_EXP 72
16531: PUSH
16532: LD_INT 0
16534: ST_TO_ADDR
// sFlag := false ;
16535: LD_ADDR_EXP 73
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// sKamikadze := false ;
16543: LD_ADDR_EXP 81
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// sTroll := false ;
16551: LD_ADDR_EXP 82
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// sSlow := false ;
16559: LD_ADDR_EXP 83
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// sLack := false ;
16567: LD_ADDR_EXP 84
16571: PUSH
16572: LD_INT 0
16574: ST_TO_ADDR
// sTank := false ;
16575: LD_ADDR_EXP 86
16579: PUSH
16580: LD_INT 0
16582: ST_TO_ADDR
// sRemote := false ;
16583: LD_ADDR_EXP 87
16587: PUSH
16588: LD_INT 0
16590: ST_TO_ADDR
// sPowell := false ;
16591: LD_ADDR_EXP 88
16595: PUSH
16596: LD_INT 0
16598: ST_TO_ADDR
// sTeleport := false ;
16599: LD_ADDR_EXP 91
16603: PUSH
16604: LD_INT 0
16606: ST_TO_ADDR
// sOilTower := false ;
16607: LD_ADDR_EXP 93
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// sShovel := false ;
16615: LD_ADDR_EXP 94
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// sSheik := false ;
16623: LD_ADDR_EXP 95
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// sEarthquake := false ;
16631: LD_ADDR_EXP 97
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// sAI := false ;
16639: LD_ADDR_EXP 98
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
// sCargo := false ;
16647: LD_ADDR_EXP 101
16651: PUSH
16652: LD_INT 0
16654: ST_TO_ADDR
// sDLaser := false ;
16655: LD_ADDR_EXP 102
16659: PUSH
16660: LD_INT 0
16662: ST_TO_ADDR
// sExchange := false ;
16663: LD_ADDR_EXP 103
16667: PUSH
16668: LD_INT 0
16670: ST_TO_ADDR
// sFac := false ;
16671: LD_ADDR_EXP 104
16675: PUSH
16676: LD_INT 0
16678: ST_TO_ADDR
// sPower := false ;
16679: LD_ADDR_EXP 105
16683: PUSH
16684: LD_INT 0
16686: ST_TO_ADDR
// sRandom := false ;
16687: LD_ADDR_EXP 106
16691: PUSH
16692: LD_INT 0
16694: ST_TO_ADDR
// sShield := false ;
16695: LD_ADDR_EXP 107
16699: PUSH
16700: LD_INT 0
16702: ST_TO_ADDR
// sTime := false ;
16703: LD_ADDR_EXP 108
16707: PUSH
16708: LD_INT 0
16710: ST_TO_ADDR
// sTools := false ;
16711: LD_ADDR_EXP 109
16715: PUSH
16716: LD_INT 0
16718: ST_TO_ADDR
// sSold := false ;
16719: LD_ADDR_EXP 74
16723: PUSH
16724: LD_INT 0
16726: ST_TO_ADDR
// sDiff := false ;
16727: LD_ADDR_EXP 75
16731: PUSH
16732: LD_INT 0
16734: ST_TO_ADDR
// sFog := false ;
16735: LD_ADDR_EXP 78
16739: PUSH
16740: LD_INT 0
16742: ST_TO_ADDR
// sReset := false ;
16743: LD_ADDR_EXP 79
16747: PUSH
16748: LD_INT 0
16750: ST_TO_ADDR
// sSun := false ;
16751: LD_ADDR_EXP 80
16755: PUSH
16756: LD_INT 0
16758: ST_TO_ADDR
// sTiger := false ;
16759: LD_ADDR_EXP 76
16763: PUSH
16764: LD_INT 0
16766: ST_TO_ADDR
// sBomb := false ;
16767: LD_ADDR_EXP 77
16771: PUSH
16772: LD_INT 0
16774: ST_TO_ADDR
// sWound := false ;
16775: LD_ADDR_EXP 85
16779: PUSH
16780: LD_INT 0
16782: ST_TO_ADDR
// sBetray := false ;
16783: LD_ADDR_EXP 89
16787: PUSH
16788: LD_INT 0
16790: ST_TO_ADDR
// sContamin := false ;
16791: LD_ADDR_EXP 90
16795: PUSH
16796: LD_INT 0
16798: ST_TO_ADDR
// sOil := false ;
16799: LD_ADDR_EXP 92
16803: PUSH
16804: LD_INT 0
16806: ST_TO_ADDR
// sStu := false ;
16807: LD_ADDR_EXP 96
16811: PUSH
16812: LD_INT 0
16814: ST_TO_ADDR
// sBazooka := false ;
16815: LD_ADDR_EXP 99
16819: PUSH
16820: LD_INT 0
16822: ST_TO_ADDR
// sMortar := false ;
16823: LD_ADDR_EXP 100
16827: PUSH
16828: LD_INT 0
16830: ST_TO_ADDR
// sRanger := false ;
16831: LD_ADDR_EXP 110
16835: PUSH
16836: LD_INT 0
16838: ST_TO_ADDR
// sComputer := false ;
16839: LD_ADDR_EXP 111
16843: PUSH
16844: LD_INT 0
16846: ST_TO_ADDR
// s30 := false ;
16847: LD_ADDR_EXP 112
16851: PUSH
16852: LD_INT 0
16854: ST_TO_ADDR
// s60 := false ;
16855: LD_ADDR_EXP 113
16859: PUSH
16860: LD_INT 0
16862: ST_TO_ADDR
// end ;
16863: LD_VAR 0 1
16867: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16868: LD_INT 0
16870: PPUSH
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
16876: PPUSH
// result := [ ] ;
16877: LD_ADDR_VAR 0 2
16881: PUSH
16882: EMPTY
16883: ST_TO_ADDR
// if campaign_id = 1 then
16884: LD_OWVAR 69
16888: PUSH
16889: LD_INT 1
16891: EQUAL
16892: IFFALSE 20058
// begin case mission_number of 1 :
16894: LD_OWVAR 70
16898: PUSH
16899: LD_INT 1
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16983
16907: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16908: LD_ADDR_VAR 0 2
16912: PUSH
16913: LD_INT 2
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: LD_INT 11
16921: PUSH
16922: LD_INT 12
16924: PUSH
16925: LD_INT 15
16927: PUSH
16928: LD_INT 16
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_INT 23
16936: PUSH
16937: LD_INT 26
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 101
16953: PUSH
16954: LD_INT 102
16956: PUSH
16957: LD_INT 106
16959: PUSH
16960: LD_INT 116
16962: PUSH
16963: LD_INT 117
16965: PUSH
16966: LD_INT 118
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: ST_TO_ADDR
16981: GO 20056
16983: LD_INT 2
16985: DOUBLE
16986: EQUAL
16987: IFTRUE 16991
16989: GO 17075
16991: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16992: LD_ADDR_VAR 0 2
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 4
17002: PUSH
17003: LD_INT 11
17005: PUSH
17006: LD_INT 12
17008: PUSH
17009: LD_INT 15
17011: PUSH
17012: LD_INT 16
17014: PUSH
17015: LD_INT 22
17017: PUSH
17018: LD_INT 23
17020: PUSH
17021: LD_INT 26
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 101
17037: PUSH
17038: LD_INT 102
17040: PUSH
17041: LD_INT 105
17043: PUSH
17044: LD_INT 106
17046: PUSH
17047: LD_INT 108
17049: PUSH
17050: LD_INT 116
17052: PUSH
17053: LD_INT 117
17055: PUSH
17056: LD_INT 118
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: ST_TO_ADDR
17073: GO 20056
17075: LD_INT 3
17077: DOUBLE
17078: EQUAL
17079: IFTRUE 17083
17081: GO 17171
17083: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17084: LD_ADDR_VAR 0 2
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: LD_INT 4
17094: PUSH
17095: LD_INT 5
17097: PUSH
17098: LD_INT 11
17100: PUSH
17101: LD_INT 12
17103: PUSH
17104: LD_INT 15
17106: PUSH
17107: LD_INT 16
17109: PUSH
17110: LD_INT 22
17112: PUSH
17113: LD_INT 26
17115: PUSH
17116: LD_INT 36
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 101
17133: PUSH
17134: LD_INT 102
17136: PUSH
17137: LD_INT 105
17139: PUSH
17140: LD_INT 106
17142: PUSH
17143: LD_INT 108
17145: PUSH
17146: LD_INT 116
17148: PUSH
17149: LD_INT 117
17151: PUSH
17152: LD_INT 118
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: ST_TO_ADDR
17169: GO 20056
17171: LD_INT 4
17173: DOUBLE
17174: EQUAL
17175: IFTRUE 17179
17177: GO 17275
17179: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17180: LD_ADDR_VAR 0 2
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: LD_INT 4
17190: PUSH
17191: LD_INT 5
17193: PUSH
17194: LD_INT 8
17196: PUSH
17197: LD_INT 11
17199: PUSH
17200: LD_INT 12
17202: PUSH
17203: LD_INT 15
17205: PUSH
17206: LD_INT 16
17208: PUSH
17209: LD_INT 22
17211: PUSH
17212: LD_INT 23
17214: PUSH
17215: LD_INT 26
17217: PUSH
17218: LD_INT 36
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 101
17237: PUSH
17238: LD_INT 102
17240: PUSH
17241: LD_INT 105
17243: PUSH
17244: LD_INT 106
17246: PUSH
17247: LD_INT 108
17249: PUSH
17250: LD_INT 116
17252: PUSH
17253: LD_INT 117
17255: PUSH
17256: LD_INT 118
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: ST_TO_ADDR
17273: GO 20056
17275: LD_INT 5
17277: DOUBLE
17278: EQUAL
17279: IFTRUE 17283
17281: GO 17395
17283: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17284: LD_ADDR_VAR 0 2
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 4
17294: PUSH
17295: LD_INT 5
17297: PUSH
17298: LD_INT 6
17300: PUSH
17301: LD_INT 8
17303: PUSH
17304: LD_INT 11
17306: PUSH
17307: LD_INT 12
17309: PUSH
17310: LD_INT 15
17312: PUSH
17313: LD_INT 16
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_INT 23
17321: PUSH
17322: LD_INT 25
17324: PUSH
17325: LD_INT 26
17327: PUSH
17328: LD_INT 36
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 101
17349: PUSH
17350: LD_INT 102
17352: PUSH
17353: LD_INT 105
17355: PUSH
17356: LD_INT 106
17358: PUSH
17359: LD_INT 108
17361: PUSH
17362: LD_INT 109
17364: PUSH
17365: LD_INT 112
17367: PUSH
17368: LD_INT 116
17370: PUSH
17371: LD_INT 117
17373: PUSH
17374: LD_INT 118
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: ST_TO_ADDR
17393: GO 20056
17395: LD_INT 6
17397: DOUBLE
17398: EQUAL
17399: IFTRUE 17403
17401: GO 17535
17403: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17404: LD_ADDR_VAR 0 2
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: LD_INT 4
17414: PUSH
17415: LD_INT 5
17417: PUSH
17418: LD_INT 6
17420: PUSH
17421: LD_INT 8
17423: PUSH
17424: LD_INT 11
17426: PUSH
17427: LD_INT 12
17429: PUSH
17430: LD_INT 15
17432: PUSH
17433: LD_INT 16
17435: PUSH
17436: LD_INT 20
17438: PUSH
17439: LD_INT 21
17441: PUSH
17442: LD_INT 22
17444: PUSH
17445: LD_INT 23
17447: PUSH
17448: LD_INT 25
17450: PUSH
17451: LD_INT 26
17453: PUSH
17454: LD_INT 30
17456: PUSH
17457: LD_INT 31
17459: PUSH
17460: LD_INT 32
17462: PUSH
17463: LD_INT 36
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 101
17489: PUSH
17490: LD_INT 102
17492: PUSH
17493: LD_INT 105
17495: PUSH
17496: LD_INT 106
17498: PUSH
17499: LD_INT 108
17501: PUSH
17502: LD_INT 109
17504: PUSH
17505: LD_INT 112
17507: PUSH
17508: LD_INT 116
17510: PUSH
17511: LD_INT 117
17513: PUSH
17514: LD_INT 118
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: ST_TO_ADDR
17533: GO 20056
17535: LD_INT 7
17537: DOUBLE
17538: EQUAL
17539: IFTRUE 17543
17541: GO 17655
17543: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17544: LD_ADDR_VAR 0 2
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: LD_INT 4
17554: PUSH
17555: LD_INT 5
17557: PUSH
17558: LD_INT 7
17560: PUSH
17561: LD_INT 11
17563: PUSH
17564: LD_INT 12
17566: PUSH
17567: LD_INT 15
17569: PUSH
17570: LD_INT 16
17572: PUSH
17573: LD_INT 20
17575: PUSH
17576: LD_INT 21
17578: PUSH
17579: LD_INT 22
17581: PUSH
17582: LD_INT 23
17584: PUSH
17585: LD_INT 25
17587: PUSH
17588: LD_INT 26
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 101
17609: PUSH
17610: LD_INT 102
17612: PUSH
17613: LD_INT 103
17615: PUSH
17616: LD_INT 105
17618: PUSH
17619: LD_INT 106
17621: PUSH
17622: LD_INT 108
17624: PUSH
17625: LD_INT 112
17627: PUSH
17628: LD_INT 116
17630: PUSH
17631: LD_INT 117
17633: PUSH
17634: LD_INT 118
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: ST_TO_ADDR
17653: GO 20056
17655: LD_INT 8
17657: DOUBLE
17658: EQUAL
17659: IFTRUE 17663
17661: GO 17803
17663: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17664: LD_ADDR_VAR 0 2
17668: PUSH
17669: LD_INT 2
17671: PUSH
17672: LD_INT 4
17674: PUSH
17675: LD_INT 5
17677: PUSH
17678: LD_INT 6
17680: PUSH
17681: LD_INT 7
17683: PUSH
17684: LD_INT 8
17686: PUSH
17687: LD_INT 11
17689: PUSH
17690: LD_INT 12
17692: PUSH
17693: LD_INT 15
17695: PUSH
17696: LD_INT 16
17698: PUSH
17699: LD_INT 20
17701: PUSH
17702: LD_INT 21
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_INT 23
17710: PUSH
17711: LD_INT 25
17713: PUSH
17714: LD_INT 26
17716: PUSH
17717: LD_INT 30
17719: PUSH
17720: LD_INT 31
17722: PUSH
17723: LD_INT 32
17725: PUSH
17726: LD_INT 36
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 101
17753: PUSH
17754: LD_INT 102
17756: PUSH
17757: LD_INT 103
17759: PUSH
17760: LD_INT 105
17762: PUSH
17763: LD_INT 106
17765: PUSH
17766: LD_INT 108
17768: PUSH
17769: LD_INT 109
17771: PUSH
17772: LD_INT 112
17774: PUSH
17775: LD_INT 116
17777: PUSH
17778: LD_INT 117
17780: PUSH
17781: LD_INT 118
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: ST_TO_ADDR
17801: GO 20056
17803: LD_INT 9
17805: DOUBLE
17806: EQUAL
17807: IFTRUE 17811
17809: GO 17959
17811: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17812: LD_ADDR_VAR 0 2
17816: PUSH
17817: LD_INT 2
17819: PUSH
17820: LD_INT 4
17822: PUSH
17823: LD_INT 5
17825: PUSH
17826: LD_INT 6
17828: PUSH
17829: LD_INT 7
17831: PUSH
17832: LD_INT 8
17834: PUSH
17835: LD_INT 11
17837: PUSH
17838: LD_INT 12
17840: PUSH
17841: LD_INT 15
17843: PUSH
17844: LD_INT 16
17846: PUSH
17847: LD_INT 20
17849: PUSH
17850: LD_INT 21
17852: PUSH
17853: LD_INT 22
17855: PUSH
17856: LD_INT 23
17858: PUSH
17859: LD_INT 25
17861: PUSH
17862: LD_INT 26
17864: PUSH
17865: LD_INT 28
17867: PUSH
17868: LD_INT 30
17870: PUSH
17871: LD_INT 31
17873: PUSH
17874: LD_INT 32
17876: PUSH
17877: LD_INT 36
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 101
17905: PUSH
17906: LD_INT 102
17908: PUSH
17909: LD_INT 103
17911: PUSH
17912: LD_INT 105
17914: PUSH
17915: LD_INT 106
17917: PUSH
17918: LD_INT 108
17920: PUSH
17921: LD_INT 109
17923: PUSH
17924: LD_INT 112
17926: PUSH
17927: LD_INT 114
17929: PUSH
17930: LD_INT 116
17932: PUSH
17933: LD_INT 117
17935: PUSH
17936: LD_INT 118
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: ST_TO_ADDR
17957: GO 20056
17959: LD_INT 10
17961: DOUBLE
17962: EQUAL
17963: IFTRUE 17967
17965: GO 18163
17967: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17968: LD_ADDR_VAR 0 2
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: LD_INT 4
17978: PUSH
17979: LD_INT 5
17981: PUSH
17982: LD_INT 6
17984: PUSH
17985: LD_INT 7
17987: PUSH
17988: LD_INT 8
17990: PUSH
17991: LD_INT 9
17993: PUSH
17994: LD_INT 10
17996: PUSH
17997: LD_INT 11
17999: PUSH
18000: LD_INT 12
18002: PUSH
18003: LD_INT 13
18005: PUSH
18006: LD_INT 14
18008: PUSH
18009: LD_INT 15
18011: PUSH
18012: LD_INT 16
18014: PUSH
18015: LD_INT 17
18017: PUSH
18018: LD_INT 18
18020: PUSH
18021: LD_INT 19
18023: PUSH
18024: LD_INT 20
18026: PUSH
18027: LD_INT 21
18029: PUSH
18030: LD_INT 22
18032: PUSH
18033: LD_INT 23
18035: PUSH
18036: LD_INT 24
18038: PUSH
18039: LD_INT 25
18041: PUSH
18042: LD_INT 26
18044: PUSH
18045: LD_INT 28
18047: PUSH
18048: LD_INT 30
18050: PUSH
18051: LD_INT 31
18053: PUSH
18054: LD_INT 32
18056: PUSH
18057: LD_INT 36
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 101
18093: PUSH
18094: LD_INT 102
18096: PUSH
18097: LD_INT 103
18099: PUSH
18100: LD_INT 104
18102: PUSH
18103: LD_INT 105
18105: PUSH
18106: LD_INT 106
18108: PUSH
18109: LD_INT 107
18111: PUSH
18112: LD_INT 108
18114: PUSH
18115: LD_INT 109
18117: PUSH
18118: LD_INT 110
18120: PUSH
18121: LD_INT 111
18123: PUSH
18124: LD_INT 112
18126: PUSH
18127: LD_INT 114
18129: PUSH
18130: LD_INT 116
18132: PUSH
18133: LD_INT 117
18135: PUSH
18136: LD_INT 118
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: ST_TO_ADDR
18161: GO 20056
18163: LD_INT 11
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18375
18171: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: LD_INT 3
18182: PUSH
18183: LD_INT 4
18185: PUSH
18186: LD_INT 5
18188: PUSH
18189: LD_INT 6
18191: PUSH
18192: LD_INT 7
18194: PUSH
18195: LD_INT 8
18197: PUSH
18198: LD_INT 9
18200: PUSH
18201: LD_INT 10
18203: PUSH
18204: LD_INT 11
18206: PUSH
18207: LD_INT 12
18209: PUSH
18210: LD_INT 13
18212: PUSH
18213: LD_INT 14
18215: PUSH
18216: LD_INT 15
18218: PUSH
18219: LD_INT 16
18221: PUSH
18222: LD_INT 17
18224: PUSH
18225: LD_INT 18
18227: PUSH
18228: LD_INT 19
18230: PUSH
18231: LD_INT 20
18233: PUSH
18234: LD_INT 21
18236: PUSH
18237: LD_INT 22
18239: PUSH
18240: LD_INT 23
18242: PUSH
18243: LD_INT 24
18245: PUSH
18246: LD_INT 25
18248: PUSH
18249: LD_INT 26
18251: PUSH
18252: LD_INT 28
18254: PUSH
18255: LD_INT 30
18257: PUSH
18258: LD_INT 31
18260: PUSH
18261: LD_INT 32
18263: PUSH
18264: LD_INT 34
18266: PUSH
18267: LD_INT 36
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 101
18305: PUSH
18306: LD_INT 102
18308: PUSH
18309: LD_INT 103
18311: PUSH
18312: LD_INT 104
18314: PUSH
18315: LD_INT 105
18317: PUSH
18318: LD_INT 106
18320: PUSH
18321: LD_INT 107
18323: PUSH
18324: LD_INT 108
18326: PUSH
18327: LD_INT 109
18329: PUSH
18330: LD_INT 110
18332: PUSH
18333: LD_INT 111
18335: PUSH
18336: LD_INT 112
18338: PUSH
18339: LD_INT 114
18341: PUSH
18342: LD_INT 116
18344: PUSH
18345: LD_INT 117
18347: PUSH
18348: LD_INT 118
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: ST_TO_ADDR
18373: GO 20056
18375: LD_INT 12
18377: DOUBLE
18378: EQUAL
18379: IFTRUE 18383
18381: GO 18603
18383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18384: LD_ADDR_VAR 0 2
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: LD_INT 3
18397: PUSH
18398: LD_INT 4
18400: PUSH
18401: LD_INT 5
18403: PUSH
18404: LD_INT 6
18406: PUSH
18407: LD_INT 7
18409: PUSH
18410: LD_INT 8
18412: PUSH
18413: LD_INT 9
18415: PUSH
18416: LD_INT 10
18418: PUSH
18419: LD_INT 11
18421: PUSH
18422: LD_INT 12
18424: PUSH
18425: LD_INT 13
18427: PUSH
18428: LD_INT 14
18430: PUSH
18431: LD_INT 15
18433: PUSH
18434: LD_INT 16
18436: PUSH
18437: LD_INT 17
18439: PUSH
18440: LD_INT 18
18442: PUSH
18443: LD_INT 19
18445: PUSH
18446: LD_INT 20
18448: PUSH
18449: LD_INT 21
18451: PUSH
18452: LD_INT 22
18454: PUSH
18455: LD_INT 23
18457: PUSH
18458: LD_INT 24
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 26
18466: PUSH
18467: LD_INT 27
18469: PUSH
18470: LD_INT 28
18472: PUSH
18473: LD_INT 30
18475: PUSH
18476: LD_INT 31
18478: PUSH
18479: LD_INT 32
18481: PUSH
18482: LD_INT 33
18484: PUSH
18485: LD_INT 34
18487: PUSH
18488: LD_INT 36
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 101
18529: PUSH
18530: LD_INT 102
18532: PUSH
18533: LD_INT 103
18535: PUSH
18536: LD_INT 104
18538: PUSH
18539: LD_INT 105
18541: PUSH
18542: LD_INT 106
18544: PUSH
18545: LD_INT 107
18547: PUSH
18548: LD_INT 108
18550: PUSH
18551: LD_INT 109
18553: PUSH
18554: LD_INT 110
18556: PUSH
18557: LD_INT 111
18559: PUSH
18560: LD_INT 112
18562: PUSH
18563: LD_INT 113
18565: PUSH
18566: LD_INT 114
18568: PUSH
18569: LD_INT 116
18571: PUSH
18572: LD_INT 117
18574: PUSH
18575: LD_INT 118
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: ST_TO_ADDR
18601: GO 20056
18603: LD_INT 13
18605: DOUBLE
18606: EQUAL
18607: IFTRUE 18611
18609: GO 18819
18611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18612: LD_ADDR_VAR 0 2
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: LD_INT 2
18622: PUSH
18623: LD_INT 3
18625: PUSH
18626: LD_INT 4
18628: PUSH
18629: LD_INT 5
18631: PUSH
18632: LD_INT 8
18634: PUSH
18635: LD_INT 9
18637: PUSH
18638: LD_INT 10
18640: PUSH
18641: LD_INT 11
18643: PUSH
18644: LD_INT 12
18646: PUSH
18647: LD_INT 14
18649: PUSH
18650: LD_INT 15
18652: PUSH
18653: LD_INT 16
18655: PUSH
18656: LD_INT 17
18658: PUSH
18659: LD_INT 18
18661: PUSH
18662: LD_INT 19
18664: PUSH
18665: LD_INT 20
18667: PUSH
18668: LD_INT 21
18670: PUSH
18671: LD_INT 22
18673: PUSH
18674: LD_INT 23
18676: PUSH
18677: LD_INT 24
18679: PUSH
18680: LD_INT 25
18682: PUSH
18683: LD_INT 26
18685: PUSH
18686: LD_INT 27
18688: PUSH
18689: LD_INT 28
18691: PUSH
18692: LD_INT 30
18694: PUSH
18695: LD_INT 31
18697: PUSH
18698: LD_INT 32
18700: PUSH
18701: LD_INT 33
18703: PUSH
18704: LD_INT 34
18706: PUSH
18707: LD_INT 36
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 101
18745: PUSH
18746: LD_INT 102
18748: PUSH
18749: LD_INT 103
18751: PUSH
18752: LD_INT 104
18754: PUSH
18755: LD_INT 105
18757: PUSH
18758: LD_INT 106
18760: PUSH
18761: LD_INT 107
18763: PUSH
18764: LD_INT 108
18766: PUSH
18767: LD_INT 109
18769: PUSH
18770: LD_INT 110
18772: PUSH
18773: LD_INT 111
18775: PUSH
18776: LD_INT 112
18778: PUSH
18779: LD_INT 113
18781: PUSH
18782: LD_INT 114
18784: PUSH
18785: LD_INT 116
18787: PUSH
18788: LD_INT 117
18790: PUSH
18791: LD_INT 118
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: ST_TO_ADDR
18817: GO 20056
18819: LD_INT 14
18821: DOUBLE
18822: EQUAL
18823: IFTRUE 18827
18825: GO 19051
18827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18828: LD_ADDR_VAR 0 2
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 3
18841: PUSH
18842: LD_INT 4
18844: PUSH
18845: LD_INT 5
18847: PUSH
18848: LD_INT 6
18850: PUSH
18851: LD_INT 7
18853: PUSH
18854: LD_INT 8
18856: PUSH
18857: LD_INT 9
18859: PUSH
18860: LD_INT 10
18862: PUSH
18863: LD_INT 11
18865: PUSH
18866: LD_INT 12
18868: PUSH
18869: LD_INT 13
18871: PUSH
18872: LD_INT 14
18874: PUSH
18875: LD_INT 15
18877: PUSH
18878: LD_INT 16
18880: PUSH
18881: LD_INT 17
18883: PUSH
18884: LD_INT 18
18886: PUSH
18887: LD_INT 19
18889: PUSH
18890: LD_INT 20
18892: PUSH
18893: LD_INT 21
18895: PUSH
18896: LD_INT 22
18898: PUSH
18899: LD_INT 23
18901: PUSH
18902: LD_INT 24
18904: PUSH
18905: LD_INT 25
18907: PUSH
18908: LD_INT 26
18910: PUSH
18911: LD_INT 27
18913: PUSH
18914: LD_INT 28
18916: PUSH
18917: LD_INT 29
18919: PUSH
18920: LD_INT 30
18922: PUSH
18923: LD_INT 31
18925: PUSH
18926: LD_INT 32
18928: PUSH
18929: LD_INT 33
18931: PUSH
18932: LD_INT 34
18934: PUSH
18935: LD_INT 36
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 101
18977: PUSH
18978: LD_INT 102
18980: PUSH
18981: LD_INT 103
18983: PUSH
18984: LD_INT 104
18986: PUSH
18987: LD_INT 105
18989: PUSH
18990: LD_INT 106
18992: PUSH
18993: LD_INT 107
18995: PUSH
18996: LD_INT 108
18998: PUSH
18999: LD_INT 109
19001: PUSH
19002: LD_INT 110
19004: PUSH
19005: LD_INT 111
19007: PUSH
19008: LD_INT 112
19010: PUSH
19011: LD_INT 113
19013: PUSH
19014: LD_INT 114
19016: PUSH
19017: LD_INT 116
19019: PUSH
19020: LD_INT 117
19022: PUSH
19023: LD_INT 118
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: ST_TO_ADDR
19049: GO 20056
19051: LD_INT 15
19053: DOUBLE
19054: EQUAL
19055: IFTRUE 19059
19057: GO 19283
19059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19060: LD_ADDR_VAR 0 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: LD_INT 4
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: LD_INT 6
19082: PUSH
19083: LD_INT 7
19085: PUSH
19086: LD_INT 8
19088: PUSH
19089: LD_INT 9
19091: PUSH
19092: LD_INT 10
19094: PUSH
19095: LD_INT 11
19097: PUSH
19098: LD_INT 12
19100: PUSH
19101: LD_INT 13
19103: PUSH
19104: LD_INT 14
19106: PUSH
19107: LD_INT 15
19109: PUSH
19110: LD_INT 16
19112: PUSH
19113: LD_INT 17
19115: PUSH
19116: LD_INT 18
19118: PUSH
19119: LD_INT 19
19121: PUSH
19122: LD_INT 20
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 22
19130: PUSH
19131: LD_INT 23
19133: PUSH
19134: LD_INT 24
19136: PUSH
19137: LD_INT 25
19139: PUSH
19140: LD_INT 26
19142: PUSH
19143: LD_INT 27
19145: PUSH
19146: LD_INT 28
19148: PUSH
19149: LD_INT 29
19151: PUSH
19152: LD_INT 30
19154: PUSH
19155: LD_INT 31
19157: PUSH
19158: LD_INT 32
19160: PUSH
19161: LD_INT 33
19163: PUSH
19164: LD_INT 34
19166: PUSH
19167: LD_INT 36
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 101
19209: PUSH
19210: LD_INT 102
19212: PUSH
19213: LD_INT 103
19215: PUSH
19216: LD_INT 104
19218: PUSH
19219: LD_INT 105
19221: PUSH
19222: LD_INT 106
19224: PUSH
19225: LD_INT 107
19227: PUSH
19228: LD_INT 108
19230: PUSH
19231: LD_INT 109
19233: PUSH
19234: LD_INT 110
19236: PUSH
19237: LD_INT 111
19239: PUSH
19240: LD_INT 112
19242: PUSH
19243: LD_INT 113
19245: PUSH
19246: LD_INT 114
19248: PUSH
19249: LD_INT 116
19251: PUSH
19252: LD_INT 117
19254: PUSH
19255: LD_INT 118
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: ST_TO_ADDR
19281: GO 20056
19283: LD_INT 16
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19427
19291: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19292: LD_ADDR_VAR 0 2
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 4
19302: PUSH
19303: LD_INT 5
19305: PUSH
19306: LD_INT 7
19308: PUSH
19309: LD_INT 11
19311: PUSH
19312: LD_INT 12
19314: PUSH
19315: LD_INT 15
19317: PUSH
19318: LD_INT 16
19320: PUSH
19321: LD_INT 20
19323: PUSH
19324: LD_INT 21
19326: PUSH
19327: LD_INT 22
19329: PUSH
19330: LD_INT 23
19332: PUSH
19333: LD_INT 25
19335: PUSH
19336: LD_INT 26
19338: PUSH
19339: LD_INT 30
19341: PUSH
19342: LD_INT 31
19344: PUSH
19345: LD_INT 32
19347: PUSH
19348: LD_INT 33
19350: PUSH
19351: LD_INT 34
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 101
19377: PUSH
19378: LD_INT 102
19380: PUSH
19381: LD_INT 103
19383: PUSH
19384: LD_INT 106
19386: PUSH
19387: LD_INT 108
19389: PUSH
19390: LD_INT 112
19392: PUSH
19393: LD_INT 113
19395: PUSH
19396: LD_INT 114
19398: PUSH
19399: LD_INT 116
19401: PUSH
19402: LD_INT 117
19404: PUSH
19405: LD_INT 118
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: ST_TO_ADDR
19425: GO 20056
19427: LD_INT 17
19429: DOUBLE
19430: EQUAL
19431: IFTRUE 19435
19433: GO 19659
19435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 3
19449: PUSH
19450: LD_INT 4
19452: PUSH
19453: LD_INT 5
19455: PUSH
19456: LD_INT 6
19458: PUSH
19459: LD_INT 7
19461: PUSH
19462: LD_INT 8
19464: PUSH
19465: LD_INT 9
19467: PUSH
19468: LD_INT 10
19470: PUSH
19471: LD_INT 11
19473: PUSH
19474: LD_INT 12
19476: PUSH
19477: LD_INT 13
19479: PUSH
19480: LD_INT 14
19482: PUSH
19483: LD_INT 15
19485: PUSH
19486: LD_INT 16
19488: PUSH
19489: LD_INT 17
19491: PUSH
19492: LD_INT 18
19494: PUSH
19495: LD_INT 19
19497: PUSH
19498: LD_INT 20
19500: PUSH
19501: LD_INT 21
19503: PUSH
19504: LD_INT 22
19506: PUSH
19507: LD_INT 23
19509: PUSH
19510: LD_INT 24
19512: PUSH
19513: LD_INT 25
19515: PUSH
19516: LD_INT 26
19518: PUSH
19519: LD_INT 27
19521: PUSH
19522: LD_INT 28
19524: PUSH
19525: LD_INT 29
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 31
19533: PUSH
19534: LD_INT 32
19536: PUSH
19537: LD_INT 33
19539: PUSH
19540: LD_INT 34
19542: PUSH
19543: LD_INT 36
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 101
19585: PUSH
19586: LD_INT 102
19588: PUSH
19589: LD_INT 103
19591: PUSH
19592: LD_INT 104
19594: PUSH
19595: LD_INT 105
19597: PUSH
19598: LD_INT 106
19600: PUSH
19601: LD_INT 107
19603: PUSH
19604: LD_INT 108
19606: PUSH
19607: LD_INT 109
19609: PUSH
19610: LD_INT 110
19612: PUSH
19613: LD_INT 111
19615: PUSH
19616: LD_INT 112
19618: PUSH
19619: LD_INT 113
19621: PUSH
19622: LD_INT 114
19624: PUSH
19625: LD_INT 116
19627: PUSH
19628: LD_INT 117
19630: PUSH
19631: LD_INT 118
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: ST_TO_ADDR
19657: GO 20056
19659: LD_INT 18
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19815
19667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19668: LD_ADDR_VAR 0 2
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: LD_INT 4
19678: PUSH
19679: LD_INT 5
19681: PUSH
19682: LD_INT 7
19684: PUSH
19685: LD_INT 11
19687: PUSH
19688: LD_INT 12
19690: PUSH
19691: LD_INT 15
19693: PUSH
19694: LD_INT 16
19696: PUSH
19697: LD_INT 20
19699: PUSH
19700: LD_INT 21
19702: PUSH
19703: LD_INT 22
19705: PUSH
19706: LD_INT 23
19708: PUSH
19709: LD_INT 25
19711: PUSH
19712: LD_INT 26
19714: PUSH
19715: LD_INT 30
19717: PUSH
19718: LD_INT 31
19720: PUSH
19721: LD_INT 32
19723: PUSH
19724: LD_INT 33
19726: PUSH
19727: LD_INT 34
19729: PUSH
19730: LD_INT 35
19732: PUSH
19733: LD_INT 36
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 101
19761: PUSH
19762: LD_INT 102
19764: PUSH
19765: LD_INT 103
19767: PUSH
19768: LD_INT 106
19770: PUSH
19771: LD_INT 108
19773: PUSH
19774: LD_INT 112
19776: PUSH
19777: LD_INT 113
19779: PUSH
19780: LD_INT 114
19782: PUSH
19783: LD_INT 115
19785: PUSH
19786: LD_INT 116
19788: PUSH
19789: LD_INT 117
19791: PUSH
19792: LD_INT 118
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: ST_TO_ADDR
19813: GO 20056
19815: LD_INT 19
19817: DOUBLE
19818: EQUAL
19819: IFTRUE 19823
19821: GO 20055
19823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19824: LD_ADDR_VAR 0 2
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: LD_INT 3
19837: PUSH
19838: LD_INT 4
19840: PUSH
19841: LD_INT 5
19843: PUSH
19844: LD_INT 6
19846: PUSH
19847: LD_INT 7
19849: PUSH
19850: LD_INT 8
19852: PUSH
19853: LD_INT 9
19855: PUSH
19856: LD_INT 10
19858: PUSH
19859: LD_INT 11
19861: PUSH
19862: LD_INT 12
19864: PUSH
19865: LD_INT 13
19867: PUSH
19868: LD_INT 14
19870: PUSH
19871: LD_INT 15
19873: PUSH
19874: LD_INT 16
19876: PUSH
19877: LD_INT 17
19879: PUSH
19880: LD_INT 18
19882: PUSH
19883: LD_INT 19
19885: PUSH
19886: LD_INT 20
19888: PUSH
19889: LD_INT 21
19891: PUSH
19892: LD_INT 22
19894: PUSH
19895: LD_INT 23
19897: PUSH
19898: LD_INT 24
19900: PUSH
19901: LD_INT 25
19903: PUSH
19904: LD_INT 26
19906: PUSH
19907: LD_INT 27
19909: PUSH
19910: LD_INT 28
19912: PUSH
19913: LD_INT 29
19915: PUSH
19916: LD_INT 30
19918: PUSH
19919: LD_INT 31
19921: PUSH
19922: LD_INT 32
19924: PUSH
19925: LD_INT 33
19927: PUSH
19928: LD_INT 34
19930: PUSH
19931: LD_INT 35
19933: PUSH
19934: LD_INT 36
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 101
19977: PUSH
19978: LD_INT 102
19980: PUSH
19981: LD_INT 103
19983: PUSH
19984: LD_INT 104
19986: PUSH
19987: LD_INT 105
19989: PUSH
19990: LD_INT 106
19992: PUSH
19993: LD_INT 107
19995: PUSH
19996: LD_INT 108
19998: PUSH
19999: LD_INT 109
20001: PUSH
20002: LD_INT 110
20004: PUSH
20005: LD_INT 111
20007: PUSH
20008: LD_INT 112
20010: PUSH
20011: LD_INT 113
20013: PUSH
20014: LD_INT 114
20016: PUSH
20017: LD_INT 115
20019: PUSH
20020: LD_INT 116
20022: PUSH
20023: LD_INT 117
20025: PUSH
20026: LD_INT 118
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: ST_TO_ADDR
20053: GO 20056
20055: POP
// end else
20056: GO 20287
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20058: LD_ADDR_VAR 0 2
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: LD_INT 2
20068: PUSH
20069: LD_INT 3
20071: PUSH
20072: LD_INT 4
20074: PUSH
20075: LD_INT 5
20077: PUSH
20078: LD_INT 6
20080: PUSH
20081: LD_INT 7
20083: PUSH
20084: LD_INT 8
20086: PUSH
20087: LD_INT 9
20089: PUSH
20090: LD_INT 10
20092: PUSH
20093: LD_INT 11
20095: PUSH
20096: LD_INT 12
20098: PUSH
20099: LD_INT 13
20101: PUSH
20102: LD_INT 14
20104: PUSH
20105: LD_INT 15
20107: PUSH
20108: LD_INT 16
20110: PUSH
20111: LD_INT 17
20113: PUSH
20114: LD_INT 18
20116: PUSH
20117: LD_INT 19
20119: PUSH
20120: LD_INT 20
20122: PUSH
20123: LD_INT 21
20125: PUSH
20126: LD_INT 22
20128: PUSH
20129: LD_INT 23
20131: PUSH
20132: LD_INT 24
20134: PUSH
20135: LD_INT 25
20137: PUSH
20138: LD_INT 26
20140: PUSH
20141: LD_INT 27
20143: PUSH
20144: LD_INT 28
20146: PUSH
20147: LD_INT 29
20149: PUSH
20150: LD_INT 30
20152: PUSH
20153: LD_INT 31
20155: PUSH
20156: LD_INT 32
20158: PUSH
20159: LD_INT 33
20161: PUSH
20162: LD_INT 34
20164: PUSH
20165: LD_INT 35
20167: PUSH
20168: LD_INT 36
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 101
20211: PUSH
20212: LD_INT 102
20214: PUSH
20215: LD_INT 103
20217: PUSH
20218: LD_INT 104
20220: PUSH
20221: LD_INT 105
20223: PUSH
20224: LD_INT 106
20226: PUSH
20227: LD_INT 107
20229: PUSH
20230: LD_INT 108
20232: PUSH
20233: LD_INT 109
20235: PUSH
20236: LD_INT 110
20238: PUSH
20239: LD_INT 111
20241: PUSH
20242: LD_INT 112
20244: PUSH
20245: LD_INT 113
20247: PUSH
20248: LD_INT 114
20250: PUSH
20251: LD_INT 115
20253: PUSH
20254: LD_INT 116
20256: PUSH
20257: LD_INT 117
20259: PUSH
20260: LD_INT 118
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: ST_TO_ADDR
// if result then
20287: LD_VAR 0 2
20291: IFFALSE 21077
// begin normal :=  ;
20293: LD_ADDR_VAR 0 5
20297: PUSH
20298: LD_STRING 
20300: ST_TO_ADDR
// hardcore :=  ;
20301: LD_ADDR_VAR 0 6
20305: PUSH
20306: LD_STRING 
20308: ST_TO_ADDR
// active :=  ;
20309: LD_ADDR_VAR 0 7
20313: PUSH
20314: LD_STRING 
20316: ST_TO_ADDR
// for i = 1 to normalCounter do
20317: LD_ADDR_VAR 0 8
20321: PUSH
20322: DOUBLE
20323: LD_INT 1
20325: DEC
20326: ST_TO_ADDR
20327: LD_EXP 58
20331: PUSH
20332: FOR_TO
20333: IFFALSE 20434
// begin tmp := 0 ;
20335: LD_ADDR_VAR 0 3
20339: PUSH
20340: LD_STRING 0
20342: ST_TO_ADDR
// if result [ 1 ] then
20343: LD_VAR 0 2
20347: PUSH
20348: LD_INT 1
20350: ARRAY
20351: IFFALSE 20416
// if result [ 1 ] [ 1 ] = i then
20353: LD_VAR 0 2
20357: PUSH
20358: LD_INT 1
20360: ARRAY
20361: PUSH
20362: LD_INT 1
20364: ARRAY
20365: PUSH
20366: LD_VAR 0 8
20370: EQUAL
20371: IFFALSE 20416
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20373: LD_ADDR_VAR 0 2
20377: PUSH
20378: LD_VAR 0 2
20382: PPUSH
20383: LD_INT 1
20385: PPUSH
20386: LD_VAR 0 2
20390: PUSH
20391: LD_INT 1
20393: ARRAY
20394: PPUSH
20395: LD_INT 1
20397: PPUSH
20398: CALL_OW 3
20402: PPUSH
20403: CALL_OW 1
20407: ST_TO_ADDR
// tmp := 1 ;
20408: LD_ADDR_VAR 0 3
20412: PUSH
20413: LD_STRING 1
20415: ST_TO_ADDR
// end ; normal := normal & tmp ;
20416: LD_ADDR_VAR 0 5
20420: PUSH
20421: LD_VAR 0 5
20425: PUSH
20426: LD_VAR 0 3
20430: STR
20431: ST_TO_ADDR
// end ;
20432: GO 20332
20434: POP
20435: POP
// for i = 1 to hardcoreCounter do
20436: LD_ADDR_VAR 0 8
20440: PUSH
20441: DOUBLE
20442: LD_INT 1
20444: DEC
20445: ST_TO_ADDR
20446: LD_EXP 59
20450: PUSH
20451: FOR_TO
20452: IFFALSE 20557
// begin tmp := 0 ;
20454: LD_ADDR_VAR 0 3
20458: PUSH
20459: LD_STRING 0
20461: ST_TO_ADDR
// if result [ 2 ] then
20462: LD_VAR 0 2
20466: PUSH
20467: LD_INT 2
20469: ARRAY
20470: IFFALSE 20539
// if result [ 2 ] [ 1 ] = 100 + i then
20472: LD_VAR 0 2
20476: PUSH
20477: LD_INT 2
20479: ARRAY
20480: PUSH
20481: LD_INT 1
20483: ARRAY
20484: PUSH
20485: LD_INT 100
20487: PUSH
20488: LD_VAR 0 8
20492: PLUS
20493: EQUAL
20494: IFFALSE 20539
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20496: LD_ADDR_VAR 0 2
20500: PUSH
20501: LD_VAR 0 2
20505: PPUSH
20506: LD_INT 2
20508: PPUSH
20509: LD_VAR 0 2
20513: PUSH
20514: LD_INT 2
20516: ARRAY
20517: PPUSH
20518: LD_INT 1
20520: PPUSH
20521: CALL_OW 3
20525: PPUSH
20526: CALL_OW 1
20530: ST_TO_ADDR
// tmp := 1 ;
20531: LD_ADDR_VAR 0 3
20535: PUSH
20536: LD_STRING 1
20538: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20539: LD_ADDR_VAR 0 6
20543: PUSH
20544: LD_VAR 0 6
20548: PUSH
20549: LD_VAR 0 3
20553: STR
20554: ST_TO_ADDR
// end ;
20555: GO 20451
20557: POP
20558: POP
// if isGameLoad then
20559: LD_VAR 0 1
20563: IFFALSE 21038
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20565: LD_ADDR_VAR 0 4
20569: PUSH
20570: LD_EXP 62
20574: PUSH
20575: LD_EXP 61
20579: PUSH
20580: LD_EXP 63
20584: PUSH
20585: LD_EXP 60
20589: PUSH
20590: LD_EXP 64
20594: PUSH
20595: LD_EXP 65
20599: PUSH
20600: LD_EXP 66
20604: PUSH
20605: LD_EXP 67
20609: PUSH
20610: LD_EXP 68
20614: PUSH
20615: LD_EXP 69
20619: PUSH
20620: LD_EXP 70
20624: PUSH
20625: LD_EXP 71
20629: PUSH
20630: LD_EXP 72
20634: PUSH
20635: LD_EXP 73
20639: PUSH
20640: LD_EXP 81
20644: PUSH
20645: LD_EXP 82
20649: PUSH
20650: LD_EXP 83
20654: PUSH
20655: LD_EXP 84
20659: PUSH
20660: LD_EXP 86
20664: PUSH
20665: LD_EXP 87
20669: PUSH
20670: LD_EXP 88
20674: PUSH
20675: LD_EXP 91
20679: PUSH
20680: LD_EXP 93
20684: PUSH
20685: LD_EXP 94
20689: PUSH
20690: LD_EXP 95
20694: PUSH
20695: LD_EXP 97
20699: PUSH
20700: LD_EXP 98
20704: PUSH
20705: LD_EXP 101
20709: PUSH
20710: LD_EXP 102
20714: PUSH
20715: LD_EXP 103
20719: PUSH
20720: LD_EXP 104
20724: PUSH
20725: LD_EXP 105
20729: PUSH
20730: LD_EXP 106
20734: PUSH
20735: LD_EXP 107
20739: PUSH
20740: LD_EXP 108
20744: PUSH
20745: LD_EXP 109
20749: PUSH
20750: LD_EXP 74
20754: PUSH
20755: LD_EXP 75
20759: PUSH
20760: LD_EXP 78
20764: PUSH
20765: LD_EXP 79
20769: PUSH
20770: LD_EXP 80
20774: PUSH
20775: LD_EXP 76
20779: PUSH
20780: LD_EXP 77
20784: PUSH
20785: LD_EXP 85
20789: PUSH
20790: LD_EXP 89
20794: PUSH
20795: LD_EXP 90
20799: PUSH
20800: LD_EXP 92
20804: PUSH
20805: LD_EXP 96
20809: PUSH
20810: LD_EXP 99
20814: PUSH
20815: LD_EXP 100
20819: PUSH
20820: LD_EXP 110
20824: PUSH
20825: LD_EXP 111
20829: PUSH
20830: LD_EXP 112
20834: PUSH
20835: LD_EXP 113
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: ST_TO_ADDR
// tmp :=  ;
20896: LD_ADDR_VAR 0 3
20900: PUSH
20901: LD_STRING 
20903: ST_TO_ADDR
// for i = 1 to normalCounter do
20904: LD_ADDR_VAR 0 8
20908: PUSH
20909: DOUBLE
20910: LD_INT 1
20912: DEC
20913: ST_TO_ADDR
20914: LD_EXP 58
20918: PUSH
20919: FOR_TO
20920: IFFALSE 20956
// begin if flags [ i ] then
20922: LD_VAR 0 4
20926: PUSH
20927: LD_VAR 0 8
20931: ARRAY
20932: IFFALSE 20954
// tmp := tmp & i & ; ;
20934: LD_ADDR_VAR 0 3
20938: PUSH
20939: LD_VAR 0 3
20943: PUSH
20944: LD_VAR 0 8
20948: STR
20949: PUSH
20950: LD_STRING ;
20952: STR
20953: ST_TO_ADDR
// end ;
20954: GO 20919
20956: POP
20957: POP
// for i = 1 to hardcoreCounter do
20958: LD_ADDR_VAR 0 8
20962: PUSH
20963: DOUBLE
20964: LD_INT 1
20966: DEC
20967: ST_TO_ADDR
20968: LD_EXP 59
20972: PUSH
20973: FOR_TO
20974: IFFALSE 21020
// begin if flags [ normalCounter + i ] then
20976: LD_VAR 0 4
20980: PUSH
20981: LD_EXP 58
20985: PUSH
20986: LD_VAR 0 8
20990: PLUS
20991: ARRAY
20992: IFFALSE 21018
// tmp := tmp & ( 100 + i ) & ; ;
20994: LD_ADDR_VAR 0 3
20998: PUSH
20999: LD_VAR 0 3
21003: PUSH
21004: LD_INT 100
21006: PUSH
21007: LD_VAR 0 8
21011: PLUS
21012: STR
21013: PUSH
21014: LD_STRING ;
21016: STR
21017: ST_TO_ADDR
// end ;
21018: GO 20973
21020: POP
21021: POP
// if tmp then
21022: LD_VAR 0 3
21026: IFFALSE 21038
// active := tmp ;
21028: LD_ADDR_VAR 0 7
21032: PUSH
21033: LD_VAR 0 3
21037: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21038: LD_STRING getStreamItemsFromMission("
21040: PUSH
21041: LD_VAR 0 5
21045: STR
21046: PUSH
21047: LD_STRING ","
21049: STR
21050: PUSH
21051: LD_VAR 0 6
21055: STR
21056: PUSH
21057: LD_STRING ","
21059: STR
21060: PUSH
21061: LD_VAR 0 7
21065: STR
21066: PUSH
21067: LD_STRING ")
21069: STR
21070: PPUSH
21071: CALL_OW 559
// end else
21075: GO 21084
// ToLua ( getStreamItemsFromMission("","","") ) ;
21077: LD_STRING getStreamItemsFromMission("","","")
21079: PPUSH
21080: CALL_OW 559
// end ;
21084: LD_VAR 0 2
21088: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21089: LD_EXP 57
21093: PUSH
21094: LD_EXP 62
21098: AND
21099: IFFALSE 21223
21101: GO 21103
21103: DISABLE
21104: LD_INT 0
21106: PPUSH
21107: PPUSH
// begin enable ;
21108: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21109: LD_ADDR_VAR 0 2
21113: PUSH
21114: LD_INT 22
21116: PUSH
21117: LD_OWVAR 2
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: LD_INT 34
21131: PUSH
21132: LD_INT 7
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 34
21141: PUSH
21142: LD_INT 45
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 34
21151: PUSH
21152: LD_INT 28
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 34
21161: PUSH
21162: LD_INT 47
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PPUSH
21180: CALL_OW 69
21184: ST_TO_ADDR
// if not tmp then
21185: LD_VAR 0 2
21189: NOT
21190: IFFALSE 21194
// exit ;
21192: GO 21223
// for i in tmp do
21194: LD_ADDR_VAR 0 1
21198: PUSH
21199: LD_VAR 0 2
21203: PUSH
21204: FOR_IN
21205: IFFALSE 21221
// begin SetLives ( i , 0 ) ;
21207: LD_VAR 0 1
21211: PPUSH
21212: LD_INT 0
21214: PPUSH
21215: CALL_OW 234
// end ;
21219: GO 21204
21221: POP
21222: POP
// end ;
21223: PPOPN 2
21225: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21226: LD_EXP 57
21230: PUSH
21231: LD_EXP 63
21235: AND
21236: IFFALSE 21320
21238: GO 21240
21240: DISABLE
21241: LD_INT 0
21243: PPUSH
21244: PPUSH
// begin enable ;
21245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21246: LD_ADDR_VAR 0 2
21250: PUSH
21251: LD_INT 22
21253: PUSH
21254: LD_OWVAR 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 32
21265: PUSH
21266: LD_INT 3
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PPUSH
21277: CALL_OW 69
21281: ST_TO_ADDR
// if not tmp then
21282: LD_VAR 0 2
21286: NOT
21287: IFFALSE 21291
// exit ;
21289: GO 21320
// for i in tmp do
21291: LD_ADDR_VAR 0 1
21295: PUSH
21296: LD_VAR 0 2
21300: PUSH
21301: FOR_IN
21302: IFFALSE 21318
// begin SetLives ( i , 0 ) ;
21304: LD_VAR 0 1
21308: PPUSH
21309: LD_INT 0
21311: PPUSH
21312: CALL_OW 234
// end ;
21316: GO 21301
21318: POP
21319: POP
// end ;
21320: PPOPN 2
21322: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21323: LD_EXP 57
21327: PUSH
21328: LD_EXP 60
21332: AND
21333: IFFALSE 21426
21335: GO 21337
21337: DISABLE
21338: LD_INT 0
21340: PPUSH
// begin enable ;
21341: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21342: LD_ADDR_VAR 0 1
21346: PUSH
21347: LD_INT 22
21349: PUSH
21350: LD_OWVAR 2
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: LD_INT 25
21364: PUSH
21365: LD_INT 5
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 25
21374: PUSH
21375: LD_INT 9
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 25
21384: PUSH
21385: LD_INT 8
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PPUSH
21402: CALL_OW 69
21406: PUSH
21407: FOR_IN
21408: IFFALSE 21424
// begin SetClass ( i , 1 ) ;
21410: LD_VAR 0 1
21414: PPUSH
21415: LD_INT 1
21417: PPUSH
21418: CALL_OW 336
// end ;
21422: GO 21407
21424: POP
21425: POP
// end ;
21426: PPOPN 1
21428: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21429: LD_EXP 57
21433: PUSH
21434: LD_EXP 61
21438: AND
21439: PUSH
21440: LD_OWVAR 65
21444: PUSH
21445: LD_INT 7
21447: LESS
21448: AND
21449: IFFALSE 21463
21451: GO 21453
21453: DISABLE
// begin enable ;
21454: ENABLE
// game_speed := 7 ;
21455: LD_ADDR_OWVAR 65
21459: PUSH
21460: LD_INT 7
21462: ST_TO_ADDR
// end ;
21463: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21464: LD_EXP 57
21468: PUSH
21469: LD_EXP 64
21473: AND
21474: IFFALSE 21676
21476: GO 21478
21478: DISABLE
21479: LD_INT 0
21481: PPUSH
21482: PPUSH
21483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21484: LD_ADDR_VAR 0 3
21488: PUSH
21489: LD_INT 81
21491: PUSH
21492: LD_OWVAR 2
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 21
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PPUSH
21515: CALL_OW 69
21519: ST_TO_ADDR
// if not tmp then
21520: LD_VAR 0 3
21524: NOT
21525: IFFALSE 21529
// exit ;
21527: GO 21676
// if tmp > 5 then
21529: LD_VAR 0 3
21533: PUSH
21534: LD_INT 5
21536: GREATER
21537: IFFALSE 21549
// k := 5 else
21539: LD_ADDR_VAR 0 2
21543: PUSH
21544: LD_INT 5
21546: ST_TO_ADDR
21547: GO 21559
// k := tmp ;
21549: LD_ADDR_VAR 0 2
21553: PUSH
21554: LD_VAR 0 3
21558: ST_TO_ADDR
// for i := 1 to k do
21559: LD_ADDR_VAR 0 1
21563: PUSH
21564: DOUBLE
21565: LD_INT 1
21567: DEC
21568: ST_TO_ADDR
21569: LD_VAR 0 2
21573: PUSH
21574: FOR_TO
21575: IFFALSE 21674
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21577: LD_VAR 0 3
21581: PUSH
21582: LD_VAR 0 1
21586: ARRAY
21587: PPUSH
21588: LD_VAR 0 1
21592: PUSH
21593: LD_INT 4
21595: MOD
21596: PUSH
21597: LD_INT 1
21599: PLUS
21600: PPUSH
21601: CALL_OW 259
21605: PUSH
21606: LD_INT 10
21608: LESS
21609: IFFALSE 21672
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21611: LD_VAR 0 3
21615: PUSH
21616: LD_VAR 0 1
21620: ARRAY
21621: PPUSH
21622: LD_VAR 0 1
21626: PUSH
21627: LD_INT 4
21629: MOD
21630: PUSH
21631: LD_INT 1
21633: PLUS
21634: PPUSH
21635: LD_VAR 0 3
21639: PUSH
21640: LD_VAR 0 1
21644: ARRAY
21645: PPUSH
21646: LD_VAR 0 1
21650: PUSH
21651: LD_INT 4
21653: MOD
21654: PUSH
21655: LD_INT 1
21657: PLUS
21658: PPUSH
21659: CALL_OW 259
21663: PUSH
21664: LD_INT 1
21666: PLUS
21667: PPUSH
21668: CALL_OW 237
21672: GO 21574
21674: POP
21675: POP
// end ;
21676: PPOPN 3
21678: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21679: LD_EXP 57
21683: PUSH
21684: LD_EXP 65
21688: AND
21689: IFFALSE 21709
21691: GO 21693
21693: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21694: LD_INT 4
21696: PPUSH
21697: LD_OWVAR 2
21701: PPUSH
21702: LD_INT 0
21704: PPUSH
21705: CALL_OW 324
21709: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21710: LD_EXP 57
21714: PUSH
21715: LD_EXP 94
21719: AND
21720: IFFALSE 21740
21722: GO 21724
21724: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21725: LD_INT 19
21727: PPUSH
21728: LD_OWVAR 2
21732: PPUSH
21733: LD_INT 0
21735: PPUSH
21736: CALL_OW 324
21740: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21741: LD_EXP 57
21745: PUSH
21746: LD_EXP 66
21750: AND
21751: IFFALSE 21853
21753: GO 21755
21755: DISABLE
21756: LD_INT 0
21758: PPUSH
21759: PPUSH
// begin enable ;
21760: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21761: LD_ADDR_VAR 0 2
21765: PUSH
21766: LD_INT 22
21768: PUSH
21769: LD_OWVAR 2
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 2
21780: PUSH
21781: LD_INT 34
21783: PUSH
21784: LD_INT 11
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 34
21793: PUSH
21794: LD_INT 30
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 69
21814: ST_TO_ADDR
// if not tmp then
21815: LD_VAR 0 2
21819: NOT
21820: IFFALSE 21824
// exit ;
21822: GO 21853
// for i in tmp do
21824: LD_ADDR_VAR 0 1
21828: PUSH
21829: LD_VAR 0 2
21833: PUSH
21834: FOR_IN
21835: IFFALSE 21851
// begin SetLives ( i , 0 ) ;
21837: LD_VAR 0 1
21841: PPUSH
21842: LD_INT 0
21844: PPUSH
21845: CALL_OW 234
// end ;
21849: GO 21834
21851: POP
21852: POP
// end ;
21853: PPOPN 2
21855: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21856: LD_EXP 57
21860: PUSH
21861: LD_EXP 67
21865: AND
21866: IFFALSE 21886
21868: GO 21870
21870: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21871: LD_INT 32
21873: PPUSH
21874: LD_OWVAR 2
21878: PPUSH
21879: LD_INT 0
21881: PPUSH
21882: CALL_OW 324
21886: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21887: LD_EXP 57
21891: PUSH
21892: LD_EXP 68
21896: AND
21897: IFFALSE 22078
21899: GO 21901
21901: DISABLE
21902: LD_INT 0
21904: PPUSH
21905: PPUSH
21906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21907: LD_ADDR_VAR 0 2
21911: PUSH
21912: LD_INT 22
21914: PUSH
21915: LD_OWVAR 2
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 33
21926: PUSH
21927: LD_INT 3
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PPUSH
21938: CALL_OW 69
21942: ST_TO_ADDR
// if not tmp then
21943: LD_VAR 0 2
21947: NOT
21948: IFFALSE 21952
// exit ;
21950: GO 22078
// side := 0 ;
21952: LD_ADDR_VAR 0 3
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// for i := 1 to 8 do
21960: LD_ADDR_VAR 0 1
21964: PUSH
21965: DOUBLE
21966: LD_INT 1
21968: DEC
21969: ST_TO_ADDR
21970: LD_INT 8
21972: PUSH
21973: FOR_TO
21974: IFFALSE 22022
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21976: LD_OWVAR 2
21980: PUSH
21981: LD_VAR 0 1
21985: NONEQUAL
21986: PUSH
21987: LD_OWVAR 2
21991: PPUSH
21992: LD_VAR 0 1
21996: PPUSH
21997: CALL_OW 81
22001: PUSH
22002: LD_INT 2
22004: EQUAL
22005: AND
22006: IFFALSE 22020
// begin side := i ;
22008: LD_ADDR_VAR 0 3
22012: PUSH
22013: LD_VAR 0 1
22017: ST_TO_ADDR
// break ;
22018: GO 22022
// end ;
22020: GO 21973
22022: POP
22023: POP
// if not side then
22024: LD_VAR 0 3
22028: NOT
22029: IFFALSE 22033
// exit ;
22031: GO 22078
// for i := 1 to tmp do
22033: LD_ADDR_VAR 0 1
22037: PUSH
22038: DOUBLE
22039: LD_INT 1
22041: DEC
22042: ST_TO_ADDR
22043: LD_VAR 0 2
22047: PUSH
22048: FOR_TO
22049: IFFALSE 22076
// if Prob ( 60 ) then
22051: LD_INT 60
22053: PPUSH
22054: CALL_OW 13
22058: IFFALSE 22074
// SetSide ( i , side ) ;
22060: LD_VAR 0 1
22064: PPUSH
22065: LD_VAR 0 3
22069: PPUSH
22070: CALL_OW 235
22074: GO 22048
22076: POP
22077: POP
// end ;
22078: PPOPN 3
22080: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22081: LD_EXP 57
22085: PUSH
22086: LD_EXP 70
22090: AND
22091: IFFALSE 22210
22093: GO 22095
22095: DISABLE
22096: LD_INT 0
22098: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: LD_INT 22
22106: PUSH
22107: LD_OWVAR 2
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 21
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 3
22128: PUSH
22129: LD_INT 23
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: LIST
22147: PPUSH
22148: CALL_OW 69
22152: PUSH
22153: FOR_IN
22154: IFFALSE 22208
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22156: LD_VAR 0 1
22160: PPUSH
22161: CALL_OW 257
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 3
22174: PUSH
22175: LD_INT 4
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: IN
22184: IFFALSE 22206
// SetClass ( un , rand ( 1 , 4 ) ) ;
22186: LD_VAR 0 1
22190: PPUSH
22191: LD_INT 1
22193: PPUSH
22194: LD_INT 4
22196: PPUSH
22197: CALL_OW 12
22201: PPUSH
22202: CALL_OW 336
22206: GO 22153
22208: POP
22209: POP
// end ;
22210: PPOPN 1
22212: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22213: LD_EXP 57
22217: PUSH
22218: LD_EXP 69
22222: AND
22223: IFFALSE 22302
22225: GO 22227
22227: DISABLE
22228: LD_INT 0
22230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22231: LD_ADDR_VAR 0 1
22235: PUSH
22236: LD_INT 22
22238: PUSH
22239: LD_OWVAR 2
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 21
22250: PUSH
22251: LD_INT 3
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PPUSH
22262: CALL_OW 69
22266: ST_TO_ADDR
// if not tmp then
22267: LD_VAR 0 1
22271: NOT
22272: IFFALSE 22276
// exit ;
22274: GO 22302
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22276: LD_VAR 0 1
22280: PUSH
22281: LD_INT 1
22283: PPUSH
22284: LD_VAR 0 1
22288: PPUSH
22289: CALL_OW 12
22293: ARRAY
22294: PPUSH
22295: LD_INT 100
22297: PPUSH
22298: CALL_OW 234
// end ;
22302: PPOPN 1
22304: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22305: LD_EXP 57
22309: PUSH
22310: LD_EXP 71
22314: AND
22315: IFFALSE 22413
22317: GO 22319
22319: DISABLE
22320: LD_INT 0
22322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22323: LD_ADDR_VAR 0 1
22327: PUSH
22328: LD_INT 22
22330: PUSH
22331: LD_OWVAR 2
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 21
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PPUSH
22354: CALL_OW 69
22358: ST_TO_ADDR
// if not tmp then
22359: LD_VAR 0 1
22363: NOT
22364: IFFALSE 22368
// exit ;
22366: GO 22413
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22368: LD_VAR 0 1
22372: PUSH
22373: LD_INT 1
22375: PPUSH
22376: LD_VAR 0 1
22380: PPUSH
22381: CALL_OW 12
22385: ARRAY
22386: PPUSH
22387: LD_INT 1
22389: PPUSH
22390: LD_INT 4
22392: PPUSH
22393: CALL_OW 12
22397: PPUSH
22398: LD_INT 3000
22400: PPUSH
22401: LD_INT 9000
22403: PPUSH
22404: CALL_OW 12
22408: PPUSH
22409: CALL_OW 492
// end ;
22413: PPOPN 1
22415: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22416: LD_EXP 57
22420: PUSH
22421: LD_EXP 72
22425: AND
22426: IFFALSE 22446
22428: GO 22430
22430: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22431: LD_INT 1
22433: PPUSH
22434: LD_OWVAR 2
22438: PPUSH
22439: LD_INT 0
22441: PPUSH
22442: CALL_OW 324
22446: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22447: LD_EXP 57
22451: PUSH
22452: LD_EXP 73
22456: AND
22457: IFFALSE 22540
22459: GO 22461
22461: DISABLE
22462: LD_INT 0
22464: PPUSH
22465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22466: LD_ADDR_VAR 0 2
22470: PUSH
22471: LD_INT 22
22473: PUSH
22474: LD_OWVAR 2
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 21
22485: PUSH
22486: LD_INT 3
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PPUSH
22497: CALL_OW 69
22501: ST_TO_ADDR
// if not tmp then
22502: LD_VAR 0 2
22506: NOT
22507: IFFALSE 22511
// exit ;
22509: GO 22540
// for i in tmp do
22511: LD_ADDR_VAR 0 1
22515: PUSH
22516: LD_VAR 0 2
22520: PUSH
22521: FOR_IN
22522: IFFALSE 22538
// SetBLevel ( i , 10 ) ;
22524: LD_VAR 0 1
22528: PPUSH
22529: LD_INT 10
22531: PPUSH
22532: CALL_OW 241
22536: GO 22521
22538: POP
22539: POP
// end ;
22540: PPOPN 2
22542: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22543: LD_EXP 57
22547: PUSH
22548: LD_EXP 74
22552: AND
22553: IFFALSE 22664
22555: GO 22557
22557: DISABLE
22558: LD_INT 0
22560: PPUSH
22561: PPUSH
22562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22563: LD_ADDR_VAR 0 3
22567: PUSH
22568: LD_INT 22
22570: PUSH
22571: LD_OWVAR 2
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 25
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PPUSH
22594: CALL_OW 69
22598: ST_TO_ADDR
// if not tmp then
22599: LD_VAR 0 3
22603: NOT
22604: IFFALSE 22608
// exit ;
22606: GO 22664
// un := tmp [ rand ( 1 , tmp ) ] ;
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_VAR 0 3
22617: PUSH
22618: LD_INT 1
22620: PPUSH
22621: LD_VAR 0 3
22625: PPUSH
22626: CALL_OW 12
22630: ARRAY
22631: ST_TO_ADDR
// if Crawls ( un ) then
22632: LD_VAR 0 2
22636: PPUSH
22637: CALL_OW 318
22641: IFFALSE 22652
// ComWalk ( un ) ;
22643: LD_VAR 0 2
22647: PPUSH
22648: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22652: LD_VAR 0 2
22656: PPUSH
22657: LD_INT 5
22659: PPUSH
22660: CALL_OW 336
// end ;
22664: PPOPN 3
22666: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22667: LD_EXP 57
22671: PUSH
22672: LD_EXP 75
22676: AND
22677: PUSH
22678: LD_OWVAR 67
22682: PUSH
22683: LD_INT 4
22685: LESS
22686: AND
22687: IFFALSE 22706
22689: GO 22691
22691: DISABLE
// begin Difficulty := Difficulty + 1 ;
22692: LD_ADDR_OWVAR 67
22696: PUSH
22697: LD_OWVAR 67
22701: PUSH
22702: LD_INT 1
22704: PLUS
22705: ST_TO_ADDR
// end ;
22706: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22707: LD_EXP 57
22711: PUSH
22712: LD_EXP 76
22716: AND
22717: IFFALSE 22820
22719: GO 22721
22721: DISABLE
22722: LD_INT 0
22724: PPUSH
// begin for i := 1 to 5 do
22725: LD_ADDR_VAR 0 1
22729: PUSH
22730: DOUBLE
22731: LD_INT 1
22733: DEC
22734: ST_TO_ADDR
22735: LD_INT 5
22737: PUSH
22738: FOR_TO
22739: IFFALSE 22818
// begin uc_nation := nation_nature ;
22741: LD_ADDR_OWVAR 21
22745: PUSH
22746: LD_INT 0
22748: ST_TO_ADDR
// uc_side := 0 ;
22749: LD_ADDR_OWVAR 20
22753: PUSH
22754: LD_INT 0
22756: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22757: LD_ADDR_OWVAR 29
22761: PUSH
22762: LD_INT 12
22764: PUSH
22765: LD_INT 12
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: ST_TO_ADDR
// hc_agressivity := 20 ;
22772: LD_ADDR_OWVAR 35
22776: PUSH
22777: LD_INT 20
22779: ST_TO_ADDR
// hc_class := class_tiger ;
22780: LD_ADDR_OWVAR 28
22784: PUSH
22785: LD_INT 14
22787: ST_TO_ADDR
// hc_gallery :=  ;
22788: LD_ADDR_OWVAR 33
22792: PUSH
22793: LD_STRING 
22795: ST_TO_ADDR
// hc_name :=  ;
22796: LD_ADDR_OWVAR 26
22800: PUSH
22801: LD_STRING 
22803: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22804: CALL_OW 44
22808: PPUSH
22809: LD_INT 0
22811: PPUSH
22812: CALL_OW 51
// end ;
22816: GO 22738
22818: POP
22819: POP
// end ;
22820: PPOPN 1
22822: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22823: LD_EXP 57
22827: PUSH
22828: LD_EXP 77
22832: AND
22833: IFFALSE 22842
22835: GO 22837
22837: DISABLE
// StreamSibBomb ;
22838: CALL 22843 0 0
22842: END
// export function StreamSibBomb ; var i , x , y ; begin
22843: LD_INT 0
22845: PPUSH
22846: PPUSH
22847: PPUSH
22848: PPUSH
// result := false ;
22849: LD_ADDR_VAR 0 1
22853: PUSH
22854: LD_INT 0
22856: ST_TO_ADDR
// for i := 1 to 16 do
22857: LD_ADDR_VAR 0 2
22861: PUSH
22862: DOUBLE
22863: LD_INT 1
22865: DEC
22866: ST_TO_ADDR
22867: LD_INT 16
22869: PUSH
22870: FOR_TO
22871: IFFALSE 23070
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22873: LD_ADDR_VAR 0 3
22877: PUSH
22878: LD_INT 10
22880: PUSH
22881: LD_INT 20
22883: PUSH
22884: LD_INT 30
22886: PUSH
22887: LD_INT 40
22889: PUSH
22890: LD_INT 50
22892: PUSH
22893: LD_INT 60
22895: PUSH
22896: LD_INT 70
22898: PUSH
22899: LD_INT 80
22901: PUSH
22902: LD_INT 90
22904: PUSH
22905: LD_INT 100
22907: PUSH
22908: LD_INT 110
22910: PUSH
22911: LD_INT 120
22913: PUSH
22914: LD_INT 130
22916: PUSH
22917: LD_INT 140
22919: PUSH
22920: LD_INT 150
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 1
22942: PPUSH
22943: LD_INT 15
22945: PPUSH
22946: CALL_OW 12
22950: ARRAY
22951: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22952: LD_ADDR_VAR 0 4
22956: PUSH
22957: LD_INT 10
22959: PUSH
22960: LD_INT 20
22962: PUSH
22963: LD_INT 30
22965: PUSH
22966: LD_INT 40
22968: PUSH
22969: LD_INT 50
22971: PUSH
22972: LD_INT 60
22974: PUSH
22975: LD_INT 70
22977: PUSH
22978: LD_INT 80
22980: PUSH
22981: LD_INT 90
22983: PUSH
22984: LD_INT 100
22986: PUSH
22987: LD_INT 110
22989: PUSH
22990: LD_INT 120
22992: PUSH
22993: LD_INT 130
22995: PUSH
22996: LD_INT 140
22998: PUSH
22999: LD_INT 150
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: PPUSH
23022: LD_INT 15
23024: PPUSH
23025: CALL_OW 12
23029: ARRAY
23030: ST_TO_ADDR
// if ValidHex ( x , y ) then
23031: LD_VAR 0 3
23035: PPUSH
23036: LD_VAR 0 4
23040: PPUSH
23041: CALL_OW 488
23045: IFFALSE 23068
// begin result := [ x , y ] ;
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_VAR 0 3
23056: PUSH
23057: LD_VAR 0 4
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: ST_TO_ADDR
// break ;
23066: GO 23070
// end ; end ;
23068: GO 22870
23070: POP
23071: POP
// if result then
23072: LD_VAR 0 1
23076: IFFALSE 23136
// begin ToLua ( playSibBomb() ) ;
23078: LD_STRING playSibBomb()
23080: PPUSH
23081: CALL_OW 559
// wait ( 0 0$14 ) ;
23085: LD_INT 490
23087: PPUSH
23088: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23092: LD_VAR 0 1
23096: PUSH
23097: LD_INT 1
23099: ARRAY
23100: PPUSH
23101: LD_VAR 0 1
23105: PUSH
23106: LD_INT 2
23108: ARRAY
23109: PPUSH
23110: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23114: LD_VAR 0 1
23118: PUSH
23119: LD_INT 1
23121: ARRAY
23122: PPUSH
23123: LD_VAR 0 1
23127: PUSH
23128: LD_INT 2
23130: ARRAY
23131: PPUSH
23132: CALL_OW 429
// end ; end ;
23136: LD_VAR 0 1
23140: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23141: LD_EXP 57
23145: PUSH
23146: LD_EXP 79
23150: AND
23151: IFFALSE 23163
23153: GO 23155
23155: DISABLE
// YouLost (  ) ;
23156: LD_STRING 
23158: PPUSH
23159: CALL_OW 104
23163: END
// every 0 0$1 trigger StreamModeActive and sFog do
23164: LD_EXP 57
23168: PUSH
23169: LD_EXP 78
23173: AND
23174: IFFALSE 23188
23176: GO 23178
23178: DISABLE
// FogOff ( your_side ) ;
23179: LD_OWVAR 2
23183: PPUSH
23184: CALL_OW 344
23188: END
// every 0 0$1 trigger StreamModeActive and sSun do
23189: LD_EXP 57
23193: PUSH
23194: LD_EXP 80
23198: AND
23199: IFFALSE 23227
23201: GO 23203
23203: DISABLE
// begin solar_recharge_percent := 0 ;
23204: LD_ADDR_OWVAR 79
23208: PUSH
23209: LD_INT 0
23211: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23212: LD_INT 10500
23214: PPUSH
23215: CALL_OW 67
// solar_recharge_percent := 100 ;
23219: LD_ADDR_OWVAR 79
23223: PUSH
23224: LD_INT 100
23226: ST_TO_ADDR
// end ;
23227: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23228: LD_EXP 57
23232: PUSH
23233: LD_EXP 81
23237: AND
23238: IFFALSE 23477
23240: GO 23242
23242: DISABLE
23243: LD_INT 0
23245: PPUSH
23246: PPUSH
23247: PPUSH
// begin tmp := [ ] ;
23248: LD_ADDR_VAR 0 3
23252: PUSH
23253: EMPTY
23254: ST_TO_ADDR
// for i := 1 to 6 do
23255: LD_ADDR_VAR 0 1
23259: PUSH
23260: DOUBLE
23261: LD_INT 1
23263: DEC
23264: ST_TO_ADDR
23265: LD_INT 6
23267: PUSH
23268: FOR_TO
23269: IFFALSE 23374
// begin uc_nation := nation_nature ;
23271: LD_ADDR_OWVAR 21
23275: PUSH
23276: LD_INT 0
23278: ST_TO_ADDR
// uc_side := 0 ;
23279: LD_ADDR_OWVAR 20
23283: PUSH
23284: LD_INT 0
23286: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23287: LD_ADDR_OWVAR 29
23291: PUSH
23292: LD_INT 12
23294: PUSH
23295: LD_INT 12
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: ST_TO_ADDR
// hc_agressivity := 20 ;
23302: LD_ADDR_OWVAR 35
23306: PUSH
23307: LD_INT 20
23309: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23310: LD_ADDR_OWVAR 28
23314: PUSH
23315: LD_INT 17
23317: ST_TO_ADDR
// hc_gallery :=  ;
23318: LD_ADDR_OWVAR 33
23322: PUSH
23323: LD_STRING 
23325: ST_TO_ADDR
// hc_name :=  ;
23326: LD_ADDR_OWVAR 26
23330: PUSH
23331: LD_STRING 
23333: ST_TO_ADDR
// un := CreateHuman ;
23334: LD_ADDR_VAR 0 2
23338: PUSH
23339: CALL_OW 44
23343: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23344: LD_VAR 0 2
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: CALL_OW 51
// tmp := tmp ^ un ;
23356: LD_ADDR_VAR 0 3
23360: PUSH
23361: LD_VAR 0 3
23365: PUSH
23366: LD_VAR 0 2
23370: ADD
23371: ST_TO_ADDR
// end ;
23372: GO 23268
23374: POP
23375: POP
// repeat wait ( 0 0$1 ) ;
23376: LD_INT 35
23378: PPUSH
23379: CALL_OW 67
// for un in tmp do
23383: LD_ADDR_VAR 0 2
23387: PUSH
23388: LD_VAR 0 3
23392: PUSH
23393: FOR_IN
23394: IFFALSE 23468
// begin if IsDead ( un ) then
23396: LD_VAR 0 2
23400: PPUSH
23401: CALL_OW 301
23405: IFFALSE 23425
// begin tmp := tmp diff un ;
23407: LD_ADDR_VAR 0 3
23411: PUSH
23412: LD_VAR 0 3
23416: PUSH
23417: LD_VAR 0 2
23421: DIFF
23422: ST_TO_ADDR
// continue ;
23423: GO 23393
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23425: LD_VAR 0 2
23429: PPUSH
23430: LD_INT 3
23432: PUSH
23433: LD_INT 22
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PPUSH
23447: CALL_OW 69
23451: PPUSH
23452: LD_VAR 0 2
23456: PPUSH
23457: CALL_OW 74
23461: PPUSH
23462: CALL_OW 115
// end ;
23466: GO 23393
23468: POP
23469: POP
// until not tmp ;
23470: LD_VAR 0 3
23474: NOT
23475: IFFALSE 23376
// end ;
23477: PPOPN 3
23479: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23480: LD_EXP 57
23484: PUSH
23485: LD_EXP 82
23489: AND
23490: IFFALSE 23544
23492: GO 23494
23494: DISABLE
// begin ToLua ( displayTroll(); ) ;
23495: LD_STRING displayTroll();
23497: PPUSH
23498: CALL_OW 559
// wait ( 3 3$00 ) ;
23502: LD_INT 6300
23504: PPUSH
23505: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23509: LD_STRING hideTroll();
23511: PPUSH
23512: CALL_OW 559
// wait ( 1 1$00 ) ;
23516: LD_INT 2100
23518: PPUSH
23519: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23523: LD_STRING displayTroll();
23525: PPUSH
23526: CALL_OW 559
// wait ( 1 1$00 ) ;
23530: LD_INT 2100
23532: PPUSH
23533: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23537: LD_STRING hideTroll();
23539: PPUSH
23540: CALL_OW 559
// end ;
23544: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23545: LD_EXP 57
23549: PUSH
23550: LD_EXP 83
23554: AND
23555: IFFALSE 23618
23557: GO 23559
23559: DISABLE
23560: LD_INT 0
23562: PPUSH
// begin p := 0 ;
23563: LD_ADDR_VAR 0 1
23567: PUSH
23568: LD_INT 0
23570: ST_TO_ADDR
// repeat game_speed := 1 ;
23571: LD_ADDR_OWVAR 65
23575: PUSH
23576: LD_INT 1
23578: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23579: LD_INT 35
23581: PPUSH
23582: CALL_OW 67
// p := p + 1 ;
23586: LD_ADDR_VAR 0 1
23590: PUSH
23591: LD_VAR 0 1
23595: PUSH
23596: LD_INT 1
23598: PLUS
23599: ST_TO_ADDR
// until p >= 60 ;
23600: LD_VAR 0 1
23604: PUSH
23605: LD_INT 60
23607: GREATEREQUAL
23608: IFFALSE 23571
// game_speed := 4 ;
23610: LD_ADDR_OWVAR 65
23614: PUSH
23615: LD_INT 4
23617: ST_TO_ADDR
// end ;
23618: PPOPN 1
23620: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23621: LD_EXP 57
23625: PUSH
23626: LD_EXP 84
23630: AND
23631: IFFALSE 23777
23633: GO 23635
23635: DISABLE
23636: LD_INT 0
23638: PPUSH
23639: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23640: LD_ADDR_VAR 0 1
23644: PUSH
23645: LD_INT 22
23647: PUSH
23648: LD_OWVAR 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: LD_INT 30
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 30
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PPUSH
23689: CALL_OW 69
23693: ST_TO_ADDR
// if not depot then
23694: LD_VAR 0 1
23698: NOT
23699: IFFALSE 23703
// exit ;
23701: GO 23777
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23703: LD_ADDR_VAR 0 2
23707: PUSH
23708: LD_VAR 0 1
23712: PUSH
23713: LD_INT 1
23715: PPUSH
23716: LD_VAR 0 1
23720: PPUSH
23721: CALL_OW 12
23725: ARRAY
23726: PPUSH
23727: CALL_OW 274
23731: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23732: LD_VAR 0 2
23736: PPUSH
23737: LD_INT 1
23739: PPUSH
23740: LD_INT 0
23742: PPUSH
23743: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23747: LD_VAR 0 2
23751: PPUSH
23752: LD_INT 2
23754: PPUSH
23755: LD_INT 0
23757: PPUSH
23758: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23762: LD_VAR 0 2
23766: PPUSH
23767: LD_INT 3
23769: PPUSH
23770: LD_INT 0
23772: PPUSH
23773: CALL_OW 277
// end ;
23777: PPOPN 2
23779: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23780: LD_EXP 57
23784: PUSH
23785: LD_EXP 85
23789: AND
23790: IFFALSE 23887
23792: GO 23794
23794: DISABLE
23795: LD_INT 0
23797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23798: LD_ADDR_VAR 0 1
23802: PUSH
23803: LD_INT 22
23805: PUSH
23806: LD_OWVAR 2
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 21
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 23
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: PPUSH
23847: CALL_OW 69
23851: ST_TO_ADDR
// if not tmp then
23852: LD_VAR 0 1
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 23887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23861: LD_VAR 0 1
23865: PUSH
23866: LD_INT 1
23868: PPUSH
23869: LD_VAR 0 1
23873: PPUSH
23874: CALL_OW 12
23878: ARRAY
23879: PPUSH
23880: LD_INT 200
23882: PPUSH
23883: CALL_OW 234
// end ;
23887: PPOPN 1
23889: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23890: LD_EXP 57
23894: PUSH
23895: LD_EXP 86
23899: AND
23900: IFFALSE 23979
23902: GO 23904
23904: DISABLE
23905: LD_INT 0
23907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23908: LD_ADDR_VAR 0 1
23912: PUSH
23913: LD_INT 22
23915: PUSH
23916: LD_OWVAR 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 21
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PPUSH
23939: CALL_OW 69
23943: ST_TO_ADDR
// if not tmp then
23944: LD_VAR 0 1
23948: NOT
23949: IFFALSE 23953
// exit ;
23951: GO 23979
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23953: LD_VAR 0 1
23957: PUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_VAR 0 1
23965: PPUSH
23966: CALL_OW 12
23970: ARRAY
23971: PPUSH
23972: LD_INT 60
23974: PPUSH
23975: CALL_OW 234
// end ;
23979: PPOPN 1
23981: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23982: LD_EXP 57
23986: PUSH
23987: LD_EXP 87
23991: AND
23992: IFFALSE 24091
23994: GO 23996
23996: DISABLE
23997: LD_INT 0
23999: PPUSH
24000: PPUSH
// begin enable ;
24001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24002: LD_ADDR_VAR 0 1
24006: PUSH
24007: LD_INT 22
24009: PUSH
24010: LD_OWVAR 2
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 61
24021: PUSH
24022: EMPTY
24023: LIST
24024: PUSH
24025: LD_INT 33
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: PPUSH
24040: CALL_OW 69
24044: ST_TO_ADDR
// if not tmp then
24045: LD_VAR 0 1
24049: NOT
24050: IFFALSE 24054
// exit ;
24052: GO 24091
// for i in tmp do
24054: LD_ADDR_VAR 0 2
24058: PUSH
24059: LD_VAR 0 1
24063: PUSH
24064: FOR_IN
24065: IFFALSE 24089
// if IsControledBy ( i ) then
24067: LD_VAR 0 2
24071: PPUSH
24072: CALL_OW 312
24076: IFFALSE 24087
// ComUnlink ( i ) ;
24078: LD_VAR 0 2
24082: PPUSH
24083: CALL_OW 136
24087: GO 24064
24089: POP
24090: POP
// end ;
24091: PPOPN 2
24093: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24094: LD_EXP 57
24098: PUSH
24099: LD_EXP 88
24103: AND
24104: IFFALSE 24244
24106: GO 24108
24108: DISABLE
24109: LD_INT 0
24111: PPUSH
24112: PPUSH
// begin ToLua ( displayPowell(); ) ;
24113: LD_STRING displayPowell();
24115: PPUSH
24116: CALL_OW 559
// uc_side := 0 ;
24120: LD_ADDR_OWVAR 20
24124: PUSH
24125: LD_INT 0
24127: ST_TO_ADDR
// uc_nation := 2 ;
24128: LD_ADDR_OWVAR 21
24132: PUSH
24133: LD_INT 2
24135: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24136: LD_ADDR_OWVAR 37
24140: PUSH
24141: LD_INT 14
24143: ST_TO_ADDR
// vc_engine := engine_siberite ;
24144: LD_ADDR_OWVAR 39
24148: PUSH
24149: LD_INT 3
24151: ST_TO_ADDR
// vc_control := control_apeman ;
24152: LD_ADDR_OWVAR 38
24156: PUSH
24157: LD_INT 5
24159: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24160: LD_ADDR_OWVAR 40
24164: PUSH
24165: LD_INT 29
24167: ST_TO_ADDR
// un := CreateVehicle ;
24168: LD_ADDR_VAR 0 2
24172: PUSH
24173: CALL_OW 45
24177: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24178: LD_VAR 0 2
24182: PPUSH
24183: LD_INT 1
24185: PPUSH
24186: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24190: LD_INT 35
24192: PPUSH
24193: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24197: LD_VAR 0 2
24201: PPUSH
24202: LD_INT 22
24204: PUSH
24205: LD_OWVAR 2
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PPUSH
24214: CALL_OW 69
24218: PPUSH
24219: LD_VAR 0 2
24223: PPUSH
24224: CALL_OW 74
24228: PPUSH
24229: CALL_OW 115
// until IsDead ( un ) ;
24233: LD_VAR 0 2
24237: PPUSH
24238: CALL_OW 301
24242: IFFALSE 24190
// end ;
24244: PPOPN 2
24246: END
// every 0 0$1 trigger StreamModeActive and sStu do
24247: LD_EXP 57
24251: PUSH
24252: LD_EXP 96
24256: AND
24257: IFFALSE 24273
24259: GO 24261
24261: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24262: LD_STRING displayStucuk();
24264: PPUSH
24265: CALL_OW 559
// ResetFog ;
24269: CALL_OW 335
// end ;
24273: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24274: LD_EXP 57
24278: PUSH
24279: LD_EXP 89
24283: AND
24284: IFFALSE 24425
24286: GO 24288
24288: DISABLE
24289: LD_INT 0
24291: PPUSH
24292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24293: LD_ADDR_VAR 0 2
24297: PUSH
24298: LD_INT 22
24300: PUSH
24301: LD_OWVAR 2
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 21
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PPUSH
24324: CALL_OW 69
24328: ST_TO_ADDR
// if not tmp then
24329: LD_VAR 0 2
24333: NOT
24334: IFFALSE 24338
// exit ;
24336: GO 24425
// un := tmp [ rand ( 1 , tmp ) ] ;
24338: LD_ADDR_VAR 0 1
24342: PUSH
24343: LD_VAR 0 2
24347: PUSH
24348: LD_INT 1
24350: PPUSH
24351: LD_VAR 0 2
24355: PPUSH
24356: CALL_OW 12
24360: ARRAY
24361: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24362: LD_VAR 0 1
24366: PPUSH
24367: LD_INT 0
24369: PPUSH
24370: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_OWVAR 3
24383: PUSH
24384: LD_VAR 0 1
24388: DIFF
24389: PPUSH
24390: LD_VAR 0 1
24394: PPUSH
24395: CALL_OW 74
24399: PPUSH
24400: CALL_OW 115
// wait ( 0 0$20 ) ;
24404: LD_INT 700
24406: PPUSH
24407: CALL_OW 67
// SetSide ( un , your_side ) ;
24411: LD_VAR 0 1
24415: PPUSH
24416: LD_OWVAR 2
24420: PPUSH
24421: CALL_OW 235
// end ;
24425: PPOPN 2
24427: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24428: LD_EXP 57
24432: PUSH
24433: LD_EXP 90
24437: AND
24438: IFFALSE 24544
24440: GO 24442
24442: DISABLE
24443: LD_INT 0
24445: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24446: LD_ADDR_VAR 0 1
24450: PUSH
24451: LD_INT 22
24453: PUSH
24454: LD_OWVAR 2
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 30
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 30
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: ST_TO_ADDR
// if not depot then
24500: LD_VAR 0 1
24504: NOT
24505: IFFALSE 24509
// exit ;
24507: GO 24544
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24509: LD_VAR 0 1
24513: PUSH
24514: LD_INT 1
24516: ARRAY
24517: PPUSH
24518: CALL_OW 250
24522: PPUSH
24523: LD_VAR 0 1
24527: PUSH
24528: LD_INT 1
24530: ARRAY
24531: PPUSH
24532: CALL_OW 251
24536: PPUSH
24537: LD_INT 70
24539: PPUSH
24540: CALL_OW 495
// end ;
24544: PPOPN 1
24546: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24547: LD_EXP 57
24551: PUSH
24552: LD_EXP 91
24556: AND
24557: IFFALSE 24768
24559: GO 24561
24561: DISABLE
24562: LD_INT 0
24564: PPUSH
24565: PPUSH
24566: PPUSH
24567: PPUSH
24568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24569: LD_ADDR_VAR 0 5
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_OWVAR 2
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 21
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PPUSH
24600: CALL_OW 69
24604: ST_TO_ADDR
// if not tmp then
24605: LD_VAR 0 5
24609: NOT
24610: IFFALSE 24614
// exit ;
24612: GO 24768
// for i in tmp do
24614: LD_ADDR_VAR 0 1
24618: PUSH
24619: LD_VAR 0 5
24623: PUSH
24624: FOR_IN
24625: IFFALSE 24766
// begin d := rand ( 0 , 5 ) ;
24627: LD_ADDR_VAR 0 4
24631: PUSH
24632: LD_INT 0
24634: PPUSH
24635: LD_INT 5
24637: PPUSH
24638: CALL_OW 12
24642: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24643: LD_ADDR_VAR 0 2
24647: PUSH
24648: LD_VAR 0 1
24652: PPUSH
24653: CALL_OW 250
24657: PPUSH
24658: LD_VAR 0 4
24662: PPUSH
24663: LD_INT 3
24665: PPUSH
24666: LD_INT 12
24668: PPUSH
24669: CALL_OW 12
24673: PPUSH
24674: CALL_OW 272
24678: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24679: LD_ADDR_VAR 0 3
24683: PUSH
24684: LD_VAR 0 1
24688: PPUSH
24689: CALL_OW 251
24693: PPUSH
24694: LD_VAR 0 4
24698: PPUSH
24699: LD_INT 3
24701: PPUSH
24702: LD_INT 12
24704: PPUSH
24705: CALL_OW 12
24709: PPUSH
24710: CALL_OW 273
24714: ST_TO_ADDR
// if ValidHex ( x , y ) then
24715: LD_VAR 0 2
24719: PPUSH
24720: LD_VAR 0 3
24724: PPUSH
24725: CALL_OW 488
24729: IFFALSE 24764
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_VAR 0 2
24740: PPUSH
24741: LD_VAR 0 3
24745: PPUSH
24746: LD_INT 3
24748: PPUSH
24749: LD_INT 6
24751: PPUSH
24752: CALL_OW 12
24756: PPUSH
24757: LD_INT 1
24759: PPUSH
24760: CALL_OW 483
// end ;
24764: GO 24624
24766: POP
24767: POP
// end ;
24768: PPOPN 5
24770: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24771: LD_EXP 57
24775: PUSH
24776: LD_EXP 92
24780: AND
24781: IFFALSE 24875
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_OWVAR 2
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 32
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 21
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: LIST
24831: PPUSH
24832: CALL_OW 69
24836: ST_TO_ADDR
// if not tmp then
24837: LD_VAR 0 2
24841: NOT
24842: IFFALSE 24846
// exit ;
24844: GO 24875
// for i in tmp do
24846: LD_ADDR_VAR 0 1
24850: PUSH
24851: LD_VAR 0 2
24855: PUSH
24856: FOR_IN
24857: IFFALSE 24873
// SetFuel ( i , 0 ) ;
24859: LD_VAR 0 1
24863: PPUSH
24864: LD_INT 0
24866: PPUSH
24867: CALL_OW 240
24871: GO 24856
24873: POP
24874: POP
// end ;
24875: PPOPN 2
24877: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24878: LD_EXP 57
24882: PUSH
24883: LD_EXP 93
24887: AND
24888: IFFALSE 24954
24890: GO 24892
24892: DISABLE
24893: LD_INT 0
24895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24896: LD_ADDR_VAR 0 1
24900: PUSH
24901: LD_INT 22
24903: PUSH
24904: LD_OWVAR 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 30
24915: PUSH
24916: LD_INT 29
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PPUSH
24927: CALL_OW 69
24931: ST_TO_ADDR
// if not tmp then
24932: LD_VAR 0 1
24936: NOT
24937: IFFALSE 24941
// exit ;
24939: GO 24954
// DestroyUnit ( tmp [ 1 ] ) ;
24941: LD_VAR 0 1
24945: PUSH
24946: LD_INT 1
24948: ARRAY
24949: PPUSH
24950: CALL_OW 65
// end ;
24954: PPOPN 1
24956: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24957: LD_EXP 57
24961: PUSH
24962: LD_EXP 95
24966: AND
24967: IFFALSE 25096
24969: GO 24971
24971: DISABLE
24972: LD_INT 0
24974: PPUSH
// begin uc_side := 0 ;
24975: LD_ADDR_OWVAR 20
24979: PUSH
24980: LD_INT 0
24982: ST_TO_ADDR
// uc_nation := nation_arabian ;
24983: LD_ADDR_OWVAR 21
24987: PUSH
24988: LD_INT 2
24990: ST_TO_ADDR
// hc_gallery :=  ;
24991: LD_ADDR_OWVAR 33
24995: PUSH
24996: LD_STRING 
24998: ST_TO_ADDR
// hc_name :=  ;
24999: LD_ADDR_OWVAR 26
25003: PUSH
25004: LD_STRING 
25006: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25007: LD_INT 1
25009: PPUSH
25010: LD_INT 11
25012: PPUSH
25013: LD_INT 10
25015: PPUSH
25016: CALL_OW 380
// un := CreateHuman ;
25020: LD_ADDR_VAR 0 1
25024: PUSH
25025: CALL_OW 44
25029: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25030: LD_VAR 0 1
25034: PPUSH
25035: LD_INT 1
25037: PPUSH
25038: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25042: LD_INT 35
25044: PPUSH
25045: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25049: LD_VAR 0 1
25053: PPUSH
25054: LD_INT 22
25056: PUSH
25057: LD_OWVAR 2
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PPUSH
25066: CALL_OW 69
25070: PPUSH
25071: LD_VAR 0 1
25075: PPUSH
25076: CALL_OW 74
25080: PPUSH
25081: CALL_OW 115
// until IsDead ( un ) ;
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 301
25094: IFFALSE 25042
// end ;
25096: PPOPN 1
25098: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25099: LD_EXP 57
25103: PUSH
25104: LD_EXP 97
25108: AND
25109: IFFALSE 25121
25111: GO 25113
25113: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25114: LD_STRING earthquake(getX(game), 0, 32)
25116: PPUSH
25117: CALL_OW 559
25121: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25122: LD_EXP 57
25126: PUSH
25127: LD_EXP 98
25131: AND
25132: IFFALSE 25223
25134: GO 25136
25136: DISABLE
25137: LD_INT 0
25139: PPUSH
// begin enable ;
25140: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25141: LD_ADDR_VAR 0 1
25145: PUSH
25146: LD_INT 22
25148: PUSH
25149: LD_OWVAR 2
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 21
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 33
25170: PUSH
25171: LD_INT 3
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: PPUSH
25183: CALL_OW 69
25187: ST_TO_ADDR
// if not tmp then
25188: LD_VAR 0 1
25192: NOT
25193: IFFALSE 25197
// exit ;
25195: GO 25223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25197: LD_VAR 0 1
25201: PUSH
25202: LD_INT 1
25204: PPUSH
25205: LD_VAR 0 1
25209: PPUSH
25210: CALL_OW 12
25214: ARRAY
25215: PPUSH
25216: LD_INT 1
25218: PPUSH
25219: CALL_OW 234
// end ;
25223: PPOPN 1
25225: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25226: LD_EXP 57
25230: PUSH
25231: LD_EXP 99
25235: AND
25236: IFFALSE 25377
25238: GO 25240
25240: DISABLE
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
25245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25246: LD_ADDR_VAR 0 3
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_OWVAR 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 25
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PPUSH
25277: CALL_OW 69
25281: ST_TO_ADDR
// if not tmp then
25282: LD_VAR 0 3
25286: NOT
25287: IFFALSE 25291
// exit ;
25289: GO 25377
// un := tmp [ rand ( 1 , tmp ) ] ;
25291: LD_ADDR_VAR 0 2
25295: PUSH
25296: LD_VAR 0 3
25300: PUSH
25301: LD_INT 1
25303: PPUSH
25304: LD_VAR 0 3
25308: PPUSH
25309: CALL_OW 12
25313: ARRAY
25314: ST_TO_ADDR
// if Crawls ( un ) then
25315: LD_VAR 0 2
25319: PPUSH
25320: CALL_OW 318
25324: IFFALSE 25335
// ComWalk ( un ) ;
25326: LD_VAR 0 2
25330: PPUSH
25331: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25335: LD_VAR 0 2
25339: PPUSH
25340: LD_INT 9
25342: PPUSH
25343: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25347: LD_INT 28
25349: PPUSH
25350: LD_OWVAR 2
25354: PPUSH
25355: LD_INT 2
25357: PPUSH
25358: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25362: LD_INT 29
25364: PPUSH
25365: LD_OWVAR 2
25369: PPUSH
25370: LD_INT 2
25372: PPUSH
25373: CALL_OW 322
// end ;
25377: PPOPN 3
25379: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25380: LD_EXP 57
25384: PUSH
25385: LD_EXP 100
25389: AND
25390: IFFALSE 25501
25392: GO 25394
25394: DISABLE
25395: LD_INT 0
25397: PPUSH
25398: PPUSH
25399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_INT 22
25407: PUSH
25408: LD_OWVAR 2
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 25
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PPUSH
25431: CALL_OW 69
25435: ST_TO_ADDR
// if not tmp then
25436: LD_VAR 0 3
25440: NOT
25441: IFFALSE 25445
// exit ;
25443: GO 25501
// un := tmp [ rand ( 1 , tmp ) ] ;
25445: LD_ADDR_VAR 0 2
25449: PUSH
25450: LD_VAR 0 3
25454: PUSH
25455: LD_INT 1
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: CALL_OW 12
25467: ARRAY
25468: ST_TO_ADDR
// if Crawls ( un ) then
25469: LD_VAR 0 2
25473: PPUSH
25474: CALL_OW 318
25478: IFFALSE 25489
// ComWalk ( un ) ;
25480: LD_VAR 0 2
25484: PPUSH
25485: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25489: LD_VAR 0 2
25493: PPUSH
25494: LD_INT 8
25496: PPUSH
25497: CALL_OW 336
// end ;
25501: PPOPN 3
25503: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25504: LD_EXP 57
25508: PUSH
25509: LD_EXP 101
25513: AND
25514: IFFALSE 25658
25516: GO 25518
25518: DISABLE
25519: LD_INT 0
25521: PPUSH
25522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25523: LD_ADDR_VAR 0 2
25527: PUSH
25528: LD_INT 22
25530: PUSH
25531: LD_OWVAR 2
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 21
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: LD_INT 34
25555: PUSH
25556: LD_INT 12
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 34
25565: PUSH
25566: LD_INT 51
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 34
25575: PUSH
25576: LD_INT 32
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: PPUSH
25594: CALL_OW 69
25598: ST_TO_ADDR
// if not tmp then
25599: LD_VAR 0 2
25603: NOT
25604: IFFALSE 25608
// exit ;
25606: GO 25658
// for i in tmp do
25608: LD_ADDR_VAR 0 1
25612: PUSH
25613: LD_VAR 0 2
25617: PUSH
25618: FOR_IN
25619: IFFALSE 25656
// if GetCargo ( i , mat_artifact ) = 0 then
25621: LD_VAR 0 1
25625: PPUSH
25626: LD_INT 4
25628: PPUSH
25629: CALL_OW 289
25633: PUSH
25634: LD_INT 0
25636: EQUAL
25637: IFFALSE 25654
// SetCargo ( i , mat_siberit , 100 ) ;
25639: LD_VAR 0 1
25643: PPUSH
25644: LD_INT 3
25646: PPUSH
25647: LD_INT 100
25649: PPUSH
25650: CALL_OW 290
25654: GO 25618
25656: POP
25657: POP
// end ;
25658: PPOPN 2
25660: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25661: LD_EXP 57
25665: PUSH
25666: LD_EXP 102
25670: AND
25671: IFFALSE 25854
25673: GO 25675
25675: DISABLE
25676: LD_INT 0
25678: PPUSH
25679: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25680: LD_ADDR_VAR 0 2
25684: PUSH
25685: LD_INT 22
25687: PUSH
25688: LD_OWVAR 2
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL_OW 69
25701: ST_TO_ADDR
// if not tmp then
25702: LD_VAR 0 2
25706: NOT
25707: IFFALSE 25711
// exit ;
25709: GO 25854
// for i := 1 to 2 do
25711: LD_ADDR_VAR 0 1
25715: PUSH
25716: DOUBLE
25717: LD_INT 1
25719: DEC
25720: ST_TO_ADDR
25721: LD_INT 2
25723: PUSH
25724: FOR_TO
25725: IFFALSE 25852
// begin uc_side := your_side ;
25727: LD_ADDR_OWVAR 20
25731: PUSH
25732: LD_OWVAR 2
25736: ST_TO_ADDR
// uc_nation := nation_american ;
25737: LD_ADDR_OWVAR 21
25741: PUSH
25742: LD_INT 1
25744: ST_TO_ADDR
// vc_chassis := us_morphling ;
25745: LD_ADDR_OWVAR 37
25749: PUSH
25750: LD_INT 5
25752: ST_TO_ADDR
// vc_engine := engine_siberite ;
25753: LD_ADDR_OWVAR 39
25757: PUSH
25758: LD_INT 3
25760: ST_TO_ADDR
// vc_control := control_computer ;
25761: LD_ADDR_OWVAR 38
25765: PUSH
25766: LD_INT 3
25768: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25769: LD_ADDR_OWVAR 40
25773: PUSH
25774: LD_INT 10
25776: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25777: LD_VAR 0 2
25781: PUSH
25782: LD_INT 1
25784: ARRAY
25785: PPUSH
25786: CALL_OW 310
25790: NOT
25791: IFFALSE 25838
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25793: CALL_OW 45
25797: PPUSH
25798: LD_VAR 0 2
25802: PUSH
25803: LD_INT 1
25805: ARRAY
25806: PPUSH
25807: CALL_OW 250
25811: PPUSH
25812: LD_VAR 0 2
25816: PUSH
25817: LD_INT 1
25819: ARRAY
25820: PPUSH
25821: CALL_OW 251
25825: PPUSH
25826: LD_INT 12
25828: PPUSH
25829: LD_INT 1
25831: PPUSH
25832: CALL_OW 50
25836: GO 25850
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25838: CALL_OW 45
25842: PPUSH
25843: LD_INT 1
25845: PPUSH
25846: CALL_OW 51
// end ;
25850: GO 25724
25852: POP
25853: POP
// end ;
25854: PPOPN 2
25856: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25857: LD_EXP 57
25861: PUSH
25862: LD_EXP 103
25866: AND
25867: IFFALSE 26089
25869: GO 25871
25871: DISABLE
25872: LD_INT 0
25874: PPUSH
25875: PPUSH
25876: PPUSH
25877: PPUSH
25878: PPUSH
25879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25880: LD_ADDR_VAR 0 6
25884: PUSH
25885: LD_INT 22
25887: PUSH
25888: LD_OWVAR 2
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 21
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: LD_INT 23
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: PPUSH
25929: CALL_OW 69
25933: ST_TO_ADDR
// if not tmp then
25934: LD_VAR 0 6
25938: NOT
25939: IFFALSE 25943
// exit ;
25941: GO 26089
// s1 := rand ( 1 , 4 ) ;
25943: LD_ADDR_VAR 0 2
25947: PUSH
25948: LD_INT 1
25950: PPUSH
25951: LD_INT 4
25953: PPUSH
25954: CALL_OW 12
25958: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25959: LD_ADDR_VAR 0 4
25963: PUSH
25964: LD_VAR 0 6
25968: PUSH
25969: LD_INT 1
25971: ARRAY
25972: PPUSH
25973: LD_VAR 0 2
25977: PPUSH
25978: CALL_OW 259
25982: ST_TO_ADDR
// if s1 = 1 then
25983: LD_VAR 0 2
25987: PUSH
25988: LD_INT 1
25990: EQUAL
25991: IFFALSE 26011
// s2 := rand ( 2 , 4 ) else
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_INT 2
26000: PPUSH
26001: LD_INT 4
26003: PPUSH
26004: CALL_OW 12
26008: ST_TO_ADDR
26009: GO 26019
// s2 := 1 ;
26011: LD_ADDR_VAR 0 3
26015: PUSH
26016: LD_INT 1
26018: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26019: LD_ADDR_VAR 0 5
26023: PUSH
26024: LD_VAR 0 6
26028: PUSH
26029: LD_INT 1
26031: ARRAY
26032: PPUSH
26033: LD_VAR 0 3
26037: PPUSH
26038: CALL_OW 259
26042: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26043: LD_VAR 0 6
26047: PUSH
26048: LD_INT 1
26050: ARRAY
26051: PPUSH
26052: LD_VAR 0 2
26056: PPUSH
26057: LD_VAR 0 5
26061: PPUSH
26062: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26066: LD_VAR 0 6
26070: PUSH
26071: LD_INT 1
26073: ARRAY
26074: PPUSH
26075: LD_VAR 0 3
26079: PPUSH
26080: LD_VAR 0 4
26084: PPUSH
26085: CALL_OW 237
// end ;
26089: PPOPN 6
26091: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26092: LD_EXP 57
26096: PUSH
26097: LD_EXP 104
26101: AND
26102: IFFALSE 26181
26104: GO 26106
26106: DISABLE
26107: LD_INT 0
26109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26110: LD_ADDR_VAR 0 1
26114: PUSH
26115: LD_INT 22
26117: PUSH
26118: LD_OWVAR 2
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 30
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PPUSH
26141: CALL_OW 69
26145: ST_TO_ADDR
// if not tmp then
26146: LD_VAR 0 1
26150: NOT
26151: IFFALSE 26155
// exit ;
26153: GO 26181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26155: LD_VAR 0 1
26159: PUSH
26160: LD_INT 1
26162: PPUSH
26163: LD_VAR 0 1
26167: PPUSH
26168: CALL_OW 12
26172: ARRAY
26173: PPUSH
26174: LD_INT 1
26176: PPUSH
26177: CALL_OW 234
// end ;
26181: PPOPN 1
26183: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26184: LD_EXP 57
26188: PUSH
26189: LD_EXP 105
26193: AND
26194: IFFALSE 26306
26196: GO 26198
26198: DISABLE
26199: LD_INT 0
26201: PPUSH
26202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26203: LD_ADDR_VAR 0 2
26207: PUSH
26208: LD_INT 22
26210: PUSH
26211: LD_OWVAR 2
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: LD_INT 30
26225: PUSH
26226: LD_INT 27
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 30
26235: PUSH
26236: LD_INT 26
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 30
26245: PUSH
26246: LD_INT 28
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: ST_TO_ADDR
// if not tmp then
26268: LD_VAR 0 2
26272: NOT
26273: IFFALSE 26277
// exit ;
26275: GO 26306
// for i in tmp do
26277: LD_ADDR_VAR 0 1
26281: PUSH
26282: LD_VAR 0 2
26286: PUSH
26287: FOR_IN
26288: IFFALSE 26304
// SetLives ( i , 1 ) ;
26290: LD_VAR 0 1
26294: PPUSH
26295: LD_INT 1
26297: PPUSH
26298: CALL_OW 234
26302: GO 26287
26304: POP
26305: POP
// end ;
26306: PPOPN 2
26308: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26309: LD_EXP 57
26313: PUSH
26314: LD_EXP 106
26318: AND
26319: IFFALSE 26606
26321: GO 26323
26323: DISABLE
26324: LD_INT 0
26326: PPUSH
26327: PPUSH
26328: PPUSH
// begin i := rand ( 1 , 7 ) ;
26329: LD_ADDR_VAR 0 1
26333: PUSH
26334: LD_INT 1
26336: PPUSH
26337: LD_INT 7
26339: PPUSH
26340: CALL_OW 12
26344: ST_TO_ADDR
// case i of 1 :
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 1
26352: DOUBLE
26353: EQUAL
26354: IFTRUE 26358
26356: GO 26368
26358: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26359: LD_STRING earthquake(getX(game), 0, 32)
26361: PPUSH
26362: CALL_OW 559
26366: GO 26606
26368: LD_INT 2
26370: DOUBLE
26371: EQUAL
26372: IFTRUE 26376
26374: GO 26390
26376: POP
// begin ToLua ( displayStucuk(); ) ;
26377: LD_STRING displayStucuk();
26379: PPUSH
26380: CALL_OW 559
// ResetFog ;
26384: CALL_OW 335
// end ; 3 :
26388: GO 26606
26390: LD_INT 3
26392: DOUBLE
26393: EQUAL
26394: IFTRUE 26398
26396: GO 26502
26398: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26399: LD_ADDR_VAR 0 2
26403: PUSH
26404: LD_INT 22
26406: PUSH
26407: LD_OWVAR 2
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 25
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PPUSH
26430: CALL_OW 69
26434: ST_TO_ADDR
// if not tmp then
26435: LD_VAR 0 2
26439: NOT
26440: IFFALSE 26444
// exit ;
26442: GO 26606
// un := tmp [ rand ( 1 , tmp ) ] ;
26444: LD_ADDR_VAR 0 3
26448: PUSH
26449: LD_VAR 0 2
26453: PUSH
26454: LD_INT 1
26456: PPUSH
26457: LD_VAR 0 2
26461: PPUSH
26462: CALL_OW 12
26466: ARRAY
26467: ST_TO_ADDR
// if Crawls ( un ) then
26468: LD_VAR 0 3
26472: PPUSH
26473: CALL_OW 318
26477: IFFALSE 26488
// ComWalk ( un ) ;
26479: LD_VAR 0 3
26483: PPUSH
26484: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26488: LD_VAR 0 3
26492: PPUSH
26493: LD_INT 8
26495: PPUSH
26496: CALL_OW 336
// end ; 4 :
26500: GO 26606
26502: LD_INT 4
26504: DOUBLE
26505: EQUAL
26506: IFTRUE 26510
26508: GO 26584
26510: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26511: LD_ADDR_VAR 0 2
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_OWVAR 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 30
26530: PUSH
26531: LD_INT 29
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PPUSH
26542: CALL_OW 69
26546: ST_TO_ADDR
// if not tmp then
26547: LD_VAR 0 2
26551: NOT
26552: IFFALSE 26556
// exit ;
26554: GO 26606
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26556: LD_VAR 0 2
26560: PUSH
26561: LD_INT 1
26563: ARRAY
26564: PPUSH
26565: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26569: LD_VAR 0 2
26573: PUSH
26574: LD_INT 1
26576: ARRAY
26577: PPUSH
26578: CALL_OW 65
// end ; 5 .. 7 :
26582: GO 26606
26584: LD_INT 5
26586: DOUBLE
26587: GREATEREQUAL
26588: IFFALSE 26596
26590: LD_INT 7
26592: DOUBLE
26593: LESSEQUAL
26594: IFTRUE 26598
26596: GO 26605
26598: POP
// StreamSibBomb ; end ;
26599: CALL 22843 0 0
26603: GO 26606
26605: POP
// end ;
26606: PPOPN 3
26608: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26609: LD_EXP 57
26613: PUSH
26614: LD_EXP 107
26618: AND
26619: IFFALSE 26775
26621: GO 26623
26623: DISABLE
26624: LD_INT 0
26626: PPUSH
26627: PPUSH
26628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26629: LD_ADDR_VAR 0 2
26633: PUSH
26634: LD_INT 81
26636: PUSH
26637: LD_OWVAR 2
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: LD_INT 21
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 21
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PPUSH
26678: CALL_OW 69
26682: ST_TO_ADDR
// if not tmp then
26683: LD_VAR 0 2
26687: NOT
26688: IFFALSE 26692
// exit ;
26690: GO 26775
// p := 0 ;
26692: LD_ADDR_VAR 0 3
26696: PUSH
26697: LD_INT 0
26699: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26700: LD_INT 35
26702: PPUSH
26703: CALL_OW 67
// p := p + 1 ;
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: LD_VAR 0 3
26716: PUSH
26717: LD_INT 1
26719: PLUS
26720: ST_TO_ADDR
// for i in tmp do
26721: LD_ADDR_VAR 0 1
26725: PUSH
26726: LD_VAR 0 2
26730: PUSH
26731: FOR_IN
26732: IFFALSE 26763
// if GetLives ( i ) < 1000 then
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 256
26743: PUSH
26744: LD_INT 1000
26746: LESS
26747: IFFALSE 26761
// SetLives ( i , 1000 ) ;
26749: LD_VAR 0 1
26753: PPUSH
26754: LD_INT 1000
26756: PPUSH
26757: CALL_OW 234
26761: GO 26731
26763: POP
26764: POP
// until p > 20 ;
26765: LD_VAR 0 3
26769: PUSH
26770: LD_INT 20
26772: GREATER
26773: IFFALSE 26700
// end ;
26775: PPOPN 3
26777: END
// every 0 0$1 trigger StreamModeActive and sTime do
26778: LD_EXP 57
26782: PUSH
26783: LD_EXP 108
26787: AND
26788: IFFALSE 26823
26790: GO 26792
26792: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26793: LD_INT 28
26795: PPUSH
26796: LD_OWVAR 2
26800: PPUSH
26801: LD_INT 2
26803: PPUSH
26804: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26808: LD_INT 30
26810: PPUSH
26811: LD_OWVAR 2
26815: PPUSH
26816: LD_INT 2
26818: PPUSH
26819: CALL_OW 322
// end ;
26823: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26824: LD_EXP 57
26828: PUSH
26829: LD_EXP 109
26833: AND
26834: IFFALSE 26955
26836: GO 26838
26838: DISABLE
26839: LD_INT 0
26841: PPUSH
26842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26843: LD_ADDR_VAR 0 2
26847: PUSH
26848: LD_INT 22
26850: PUSH
26851: LD_OWVAR 2
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 21
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 3
26872: PUSH
26873: LD_INT 23
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: PPUSH
26892: CALL_OW 69
26896: ST_TO_ADDR
// if not tmp then
26897: LD_VAR 0 2
26901: NOT
26902: IFFALSE 26906
// exit ;
26904: GO 26955
// for i in tmp do
26906: LD_ADDR_VAR 0 1
26910: PUSH
26911: LD_VAR 0 2
26915: PUSH
26916: FOR_IN
26917: IFFALSE 26953
// begin if Crawls ( i ) then
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL_OW 318
26928: IFFALSE 26939
// ComWalk ( i ) ;
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 138
// SetClass ( i , 2 ) ;
26939: LD_VAR 0 1
26943: PPUSH
26944: LD_INT 2
26946: PPUSH
26947: CALL_OW 336
// end ;
26951: GO 26916
26953: POP
26954: POP
// end ;
26955: PPOPN 2
26957: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26958: LD_EXP 57
26962: PUSH
26963: LD_EXP 110
26967: AND
26968: IFFALSE 27256
26970: GO 26972
26972: DISABLE
26973: LD_INT 0
26975: PPUSH
26976: PPUSH
26977: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26978: LD_OWVAR 2
26982: PPUSH
26983: LD_INT 9
26985: PPUSH
26986: LD_INT 1
26988: PPUSH
26989: LD_INT 1
26991: PPUSH
26992: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26996: LD_INT 9
26998: PPUSH
26999: LD_OWVAR 2
27003: PPUSH
27004: CALL_OW 343
// uc_side := 9 ;
27008: LD_ADDR_OWVAR 20
27012: PUSH
27013: LD_INT 9
27015: ST_TO_ADDR
// uc_nation := 2 ;
27016: LD_ADDR_OWVAR 21
27020: PUSH
27021: LD_INT 2
27023: ST_TO_ADDR
// hc_name := Dark Warrior ;
27024: LD_ADDR_OWVAR 26
27028: PUSH
27029: LD_STRING Dark Warrior
27031: ST_TO_ADDR
// hc_gallery :=  ;
27032: LD_ADDR_OWVAR 33
27036: PUSH
27037: LD_STRING 
27039: ST_TO_ADDR
// hc_noskilllimit := true ;
27040: LD_ADDR_OWVAR 76
27044: PUSH
27045: LD_INT 1
27047: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27048: LD_ADDR_OWVAR 31
27052: PUSH
27053: LD_INT 30
27055: PUSH
27056: LD_INT 30
27058: PUSH
27059: LD_INT 30
27061: PUSH
27062: LD_INT 30
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: ST_TO_ADDR
// un := CreateHuman ;
27071: LD_ADDR_VAR 0 3
27075: PUSH
27076: CALL_OW 44
27080: ST_TO_ADDR
// hc_noskilllimit := false ;
27081: LD_ADDR_OWVAR 76
27085: PUSH
27086: LD_INT 0
27088: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27089: LD_VAR 0 3
27093: PPUSH
27094: LD_INT 1
27096: PPUSH
27097: CALL_OW 51
// ToLua ( playRanger() ) ;
27101: LD_STRING playRanger()
27103: PPUSH
27104: CALL_OW 559
// p := 0 ;
27108: LD_ADDR_VAR 0 2
27112: PUSH
27113: LD_INT 0
27115: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27116: LD_INT 35
27118: PPUSH
27119: CALL_OW 67
// p := p + 1 ;
27123: LD_ADDR_VAR 0 2
27127: PUSH
27128: LD_VAR 0 2
27132: PUSH
27133: LD_INT 1
27135: PLUS
27136: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27137: LD_VAR 0 3
27141: PPUSH
27142: CALL_OW 256
27146: PUSH
27147: LD_INT 1000
27149: LESS
27150: IFFALSE 27164
// SetLives ( un , 1000 ) ;
27152: LD_VAR 0 3
27156: PPUSH
27157: LD_INT 1000
27159: PPUSH
27160: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27164: LD_VAR 0 3
27168: PPUSH
27169: LD_INT 81
27171: PUSH
27172: LD_OWVAR 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 91
27183: PUSH
27184: LD_VAR 0 3
27188: PUSH
27189: LD_INT 30
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PPUSH
27201: CALL_OW 69
27205: PPUSH
27206: LD_VAR 0 3
27210: PPUSH
27211: CALL_OW 74
27215: PPUSH
27216: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27220: LD_VAR 0 2
27224: PUSH
27225: LD_INT 80
27227: GREATER
27228: PUSH
27229: LD_VAR 0 3
27233: PPUSH
27234: CALL_OW 301
27238: OR
27239: IFFALSE 27116
// if un then
27241: LD_VAR 0 3
27245: IFFALSE 27256
// RemoveUnit ( un ) ;
27247: LD_VAR 0 3
27251: PPUSH
27252: CALL_OW 64
// end ;
27256: PPOPN 3
27258: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27259: LD_EXP 111
27263: IFFALSE 27379
27265: GO 27267
27267: DISABLE
27268: LD_INT 0
27270: PPUSH
27271: PPUSH
27272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27273: LD_ADDR_VAR 0 2
27277: PUSH
27278: LD_INT 81
27280: PUSH
27281: LD_OWVAR 2
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 21
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PPUSH
27304: CALL_OW 69
27308: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27309: LD_STRING playComputer()
27311: PPUSH
27312: CALL_OW 559
// if not tmp then
27316: LD_VAR 0 2
27320: NOT
27321: IFFALSE 27325
// exit ;
27323: GO 27379
// for i in tmp do
27325: LD_ADDR_VAR 0 1
27329: PUSH
27330: LD_VAR 0 2
27334: PUSH
27335: FOR_IN
27336: IFFALSE 27377
// for j := 1 to 4 do
27338: LD_ADDR_VAR 0 3
27342: PUSH
27343: DOUBLE
27344: LD_INT 1
27346: DEC
27347: ST_TO_ADDR
27348: LD_INT 4
27350: PUSH
27351: FOR_TO
27352: IFFALSE 27373
// SetSkill ( i , j , 10 ) ;
27354: LD_VAR 0 1
27358: PPUSH
27359: LD_VAR 0 3
27363: PPUSH
27364: LD_INT 10
27366: PPUSH
27367: CALL_OW 237
27371: GO 27351
27373: POP
27374: POP
27375: GO 27335
27377: POP
27378: POP
// end ;
27379: PPOPN 3
27381: END
// every 0 0$1 trigger s30 do var i , tmp ;
27382: LD_EXP 112
27386: IFFALSE 27455
27388: GO 27390
27390: DISABLE
27391: LD_INT 0
27393: PPUSH
27394: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27395: LD_ADDR_VAR 0 2
27399: PUSH
27400: LD_INT 22
27402: PUSH
27403: LD_OWVAR 2
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PPUSH
27412: CALL_OW 69
27416: ST_TO_ADDR
// if not tmp then
27417: LD_VAR 0 2
27421: NOT
27422: IFFALSE 27426
// exit ;
27424: GO 27455
// for i in tmp do
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_VAR 0 2
27435: PUSH
27436: FOR_IN
27437: IFFALSE 27453
// SetLives ( i , 300 ) ;
27439: LD_VAR 0 1
27443: PPUSH
27444: LD_INT 300
27446: PPUSH
27447: CALL_OW 234
27451: GO 27436
27453: POP
27454: POP
// end ;
27455: PPOPN 2
27457: END
// every 0 0$1 trigger s60 do var i , tmp ;
27458: LD_EXP 113
27462: IFFALSE 27531
27464: GO 27466
27466: DISABLE
27467: LD_INT 0
27469: PPUSH
27470: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27471: LD_ADDR_VAR 0 2
27475: PUSH
27476: LD_INT 22
27478: PUSH
27479: LD_OWVAR 2
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PPUSH
27488: CALL_OW 69
27492: ST_TO_ADDR
// if not tmp then
27493: LD_VAR 0 2
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 27531
// for i in tmp do
27502: LD_ADDR_VAR 0 1
27506: PUSH
27507: LD_VAR 0 2
27511: PUSH
27512: FOR_IN
27513: IFFALSE 27529
// SetLives ( i , 600 ) ;
27515: LD_VAR 0 1
27519: PPUSH
27520: LD_INT 600
27522: PPUSH
27523: CALL_OW 234
27527: GO 27512
27529: POP
27530: POP
// end ;
27531: PPOPN 2
27533: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27534: LD_INT 0
27536: PPUSH
// case cmd of 301 :
27537: LD_VAR 0 1
27541: PUSH
27542: LD_INT 301
27544: DOUBLE
27545: EQUAL
27546: IFTRUE 27550
27548: GO 27582
27550: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27551: LD_VAR 0 6
27555: PPUSH
27556: LD_VAR 0 7
27560: PPUSH
27561: LD_VAR 0 8
27565: PPUSH
27566: LD_VAR 0 4
27570: PPUSH
27571: LD_VAR 0 5
27575: PPUSH
27576: CALL 28783 0 5
27580: GO 27703
27582: LD_INT 302
27584: DOUBLE
27585: EQUAL
27586: IFTRUE 27590
27588: GO 27627
27590: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27591: LD_VAR 0 6
27595: PPUSH
27596: LD_VAR 0 7
27600: PPUSH
27601: LD_VAR 0 8
27605: PPUSH
27606: LD_VAR 0 9
27610: PPUSH
27611: LD_VAR 0 4
27615: PPUSH
27616: LD_VAR 0 5
27620: PPUSH
27621: CALL 28874 0 6
27625: GO 27703
27627: LD_INT 303
27629: DOUBLE
27630: EQUAL
27631: IFTRUE 27635
27633: GO 27672
27635: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27636: LD_VAR 0 6
27640: PPUSH
27641: LD_VAR 0 7
27645: PPUSH
27646: LD_VAR 0 8
27650: PPUSH
27651: LD_VAR 0 9
27655: PPUSH
27656: LD_VAR 0 4
27660: PPUSH
27661: LD_VAR 0 5
27665: PPUSH
27666: CALL 27708 0 6
27670: GO 27703
27672: LD_INT 304
27674: DOUBLE
27675: EQUAL
27676: IFTRUE 27680
27678: GO 27702
27680: POP
// hHackTeleport ( unit , x , y ) ; end ;
27681: LD_VAR 0 2
27685: PPUSH
27686: LD_VAR 0 4
27690: PPUSH
27691: LD_VAR 0 5
27695: PPUSH
27696: CALL 29467 0 3
27700: GO 27703
27702: POP
// end ;
27703: LD_VAR 0 12
27707: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27708: LD_INT 0
27710: PPUSH
27711: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27712: LD_VAR 0 1
27716: PUSH
27717: LD_INT 1
27719: LESS
27720: PUSH
27721: LD_VAR 0 1
27725: PUSH
27726: LD_INT 3
27728: GREATER
27729: OR
27730: PUSH
27731: LD_VAR 0 5
27735: PPUSH
27736: LD_VAR 0 6
27740: PPUSH
27741: CALL_OW 428
27745: OR
27746: IFFALSE 27750
// exit ;
27748: GO 28470
// uc_side := your_side ;
27750: LD_ADDR_OWVAR 20
27754: PUSH
27755: LD_OWVAR 2
27759: ST_TO_ADDR
// uc_nation := nation ;
27760: LD_ADDR_OWVAR 21
27764: PUSH
27765: LD_VAR 0 1
27769: ST_TO_ADDR
// bc_level = 1 ;
27770: LD_ADDR_OWVAR 43
27774: PUSH
27775: LD_INT 1
27777: ST_TO_ADDR
// case btype of 1 :
27778: LD_VAR 0 2
27782: PUSH
27783: LD_INT 1
27785: DOUBLE
27786: EQUAL
27787: IFTRUE 27791
27789: GO 27802
27791: POP
// bc_type := b_depot ; 2 :
27792: LD_ADDR_OWVAR 42
27796: PUSH
27797: LD_INT 0
27799: ST_TO_ADDR
27800: GO 28414
27802: LD_INT 2
27804: DOUBLE
27805: EQUAL
27806: IFTRUE 27810
27808: GO 27821
27810: POP
// bc_type := b_warehouse ; 3 :
27811: LD_ADDR_OWVAR 42
27815: PUSH
27816: LD_INT 1
27818: ST_TO_ADDR
27819: GO 28414
27821: LD_INT 3
27823: DOUBLE
27824: EQUAL
27825: IFTRUE 27829
27827: GO 27840
27829: POP
// bc_type := b_lab ; 4 .. 9 :
27830: LD_ADDR_OWVAR 42
27834: PUSH
27835: LD_INT 6
27837: ST_TO_ADDR
27838: GO 28414
27840: LD_INT 4
27842: DOUBLE
27843: GREATEREQUAL
27844: IFFALSE 27852
27846: LD_INT 9
27848: DOUBLE
27849: LESSEQUAL
27850: IFTRUE 27854
27852: GO 27906
27854: POP
// begin bc_type := b_lab_half ;
27855: LD_ADDR_OWVAR 42
27859: PUSH
27860: LD_INT 7
27862: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27863: LD_ADDR_OWVAR 44
27867: PUSH
27868: LD_INT 10
27870: PUSH
27871: LD_INT 11
27873: PUSH
27874: LD_INT 12
27876: PUSH
27877: LD_INT 15
27879: PUSH
27880: LD_INT 14
27882: PUSH
27883: LD_INT 13
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: PUSH
27894: LD_VAR 0 2
27898: PUSH
27899: LD_INT 3
27901: MINUS
27902: ARRAY
27903: ST_TO_ADDR
// end ; 10 .. 13 :
27904: GO 28414
27906: LD_INT 10
27908: DOUBLE
27909: GREATEREQUAL
27910: IFFALSE 27918
27912: LD_INT 13
27914: DOUBLE
27915: LESSEQUAL
27916: IFTRUE 27920
27918: GO 27997
27920: POP
// begin bc_type := b_lab_full ;
27921: LD_ADDR_OWVAR 42
27925: PUSH
27926: LD_INT 8
27928: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27929: LD_ADDR_OWVAR 44
27933: PUSH
27934: LD_INT 10
27936: PUSH
27937: LD_INT 12
27939: PUSH
27940: LD_INT 14
27942: PUSH
27943: LD_INT 13
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: PUSH
27952: LD_VAR 0 2
27956: PUSH
27957: LD_INT 9
27959: MINUS
27960: ARRAY
27961: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27962: LD_ADDR_OWVAR 45
27966: PUSH
27967: LD_INT 11
27969: PUSH
27970: LD_INT 15
27972: PUSH
27973: LD_INT 12
27975: PUSH
27976: LD_INT 15
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: PUSH
27985: LD_VAR 0 2
27989: PUSH
27990: LD_INT 9
27992: MINUS
27993: ARRAY
27994: ST_TO_ADDR
// end ; 14 :
27995: GO 28414
27997: LD_INT 14
27999: DOUBLE
28000: EQUAL
28001: IFTRUE 28005
28003: GO 28016
28005: POP
// bc_type := b_workshop ; 15 :
28006: LD_ADDR_OWVAR 42
28010: PUSH
28011: LD_INT 2
28013: ST_TO_ADDR
28014: GO 28414
28016: LD_INT 15
28018: DOUBLE
28019: EQUAL
28020: IFTRUE 28024
28022: GO 28035
28024: POP
// bc_type := b_factory ; 16 :
28025: LD_ADDR_OWVAR 42
28029: PUSH
28030: LD_INT 3
28032: ST_TO_ADDR
28033: GO 28414
28035: LD_INT 16
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28043
28041: GO 28054
28043: POP
// bc_type := b_ext_gun ; 17 :
28044: LD_ADDR_OWVAR 42
28048: PUSH
28049: LD_INT 17
28051: ST_TO_ADDR
28052: GO 28414
28054: LD_INT 17
28056: DOUBLE
28057: EQUAL
28058: IFTRUE 28062
28060: GO 28090
28062: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28063: LD_ADDR_OWVAR 42
28067: PUSH
28068: LD_INT 19
28070: PUSH
28071: LD_INT 23
28073: PUSH
28074: LD_INT 19
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: PUSH
28082: LD_VAR 0 1
28086: ARRAY
28087: ST_TO_ADDR
28088: GO 28414
28090: LD_INT 18
28092: DOUBLE
28093: EQUAL
28094: IFTRUE 28098
28096: GO 28109
28098: POP
// bc_type := b_ext_radar ; 19 :
28099: LD_ADDR_OWVAR 42
28103: PUSH
28104: LD_INT 20
28106: ST_TO_ADDR
28107: GO 28414
28109: LD_INT 19
28111: DOUBLE
28112: EQUAL
28113: IFTRUE 28117
28115: GO 28128
28117: POP
// bc_type := b_ext_radio ; 20 :
28118: LD_ADDR_OWVAR 42
28122: PUSH
28123: LD_INT 22
28125: ST_TO_ADDR
28126: GO 28414
28128: LD_INT 20
28130: DOUBLE
28131: EQUAL
28132: IFTRUE 28136
28134: GO 28147
28136: POP
// bc_type := b_ext_siberium ; 21 :
28137: LD_ADDR_OWVAR 42
28141: PUSH
28142: LD_INT 21
28144: ST_TO_ADDR
28145: GO 28414
28147: LD_INT 21
28149: DOUBLE
28150: EQUAL
28151: IFTRUE 28155
28153: GO 28166
28155: POP
// bc_type := b_ext_computer ; 22 :
28156: LD_ADDR_OWVAR 42
28160: PUSH
28161: LD_INT 24
28163: ST_TO_ADDR
28164: GO 28414
28166: LD_INT 22
28168: DOUBLE
28169: EQUAL
28170: IFTRUE 28174
28172: GO 28185
28174: POP
// bc_type := b_ext_track ; 23 :
28175: LD_ADDR_OWVAR 42
28179: PUSH
28180: LD_INT 16
28182: ST_TO_ADDR
28183: GO 28414
28185: LD_INT 23
28187: DOUBLE
28188: EQUAL
28189: IFTRUE 28193
28191: GO 28204
28193: POP
// bc_type := b_ext_laser ; 24 :
28194: LD_ADDR_OWVAR 42
28198: PUSH
28199: LD_INT 25
28201: ST_TO_ADDR
28202: GO 28414
28204: LD_INT 24
28206: DOUBLE
28207: EQUAL
28208: IFTRUE 28212
28210: GO 28223
28212: POP
// bc_type := b_control_tower ; 25 :
28213: LD_ADDR_OWVAR 42
28217: PUSH
28218: LD_INT 36
28220: ST_TO_ADDR
28221: GO 28414
28223: LD_INT 25
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28242
28231: POP
// bc_type := b_breastwork ; 26 :
28232: LD_ADDR_OWVAR 42
28236: PUSH
28237: LD_INT 31
28239: ST_TO_ADDR
28240: GO 28414
28242: LD_INT 26
28244: DOUBLE
28245: EQUAL
28246: IFTRUE 28250
28248: GO 28261
28250: POP
// bc_type := b_bunker ; 27 :
28251: LD_ADDR_OWVAR 42
28255: PUSH
28256: LD_INT 32
28258: ST_TO_ADDR
28259: GO 28414
28261: LD_INT 27
28263: DOUBLE
28264: EQUAL
28265: IFTRUE 28269
28267: GO 28280
28269: POP
// bc_type := b_turret ; 28 :
28270: LD_ADDR_OWVAR 42
28274: PUSH
28275: LD_INT 33
28277: ST_TO_ADDR
28278: GO 28414
28280: LD_INT 28
28282: DOUBLE
28283: EQUAL
28284: IFTRUE 28288
28286: GO 28299
28288: POP
// bc_type := b_armoury ; 29 :
28289: LD_ADDR_OWVAR 42
28293: PUSH
28294: LD_INT 4
28296: ST_TO_ADDR
28297: GO 28414
28299: LD_INT 29
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28318
28307: POP
// bc_type := b_barracks ; 30 :
28308: LD_ADDR_OWVAR 42
28312: PUSH
28313: LD_INT 5
28315: ST_TO_ADDR
28316: GO 28414
28318: LD_INT 30
28320: DOUBLE
28321: EQUAL
28322: IFTRUE 28326
28324: GO 28337
28326: POP
// bc_type := b_solar_power ; 31 :
28327: LD_ADDR_OWVAR 42
28331: PUSH
28332: LD_INT 27
28334: ST_TO_ADDR
28335: GO 28414
28337: LD_INT 31
28339: DOUBLE
28340: EQUAL
28341: IFTRUE 28345
28343: GO 28356
28345: POP
// bc_type := b_oil_power ; 32 :
28346: LD_ADDR_OWVAR 42
28350: PUSH
28351: LD_INT 26
28353: ST_TO_ADDR
28354: GO 28414
28356: LD_INT 32
28358: DOUBLE
28359: EQUAL
28360: IFTRUE 28364
28362: GO 28375
28364: POP
// bc_type := b_siberite_power ; 33 :
28365: LD_ADDR_OWVAR 42
28369: PUSH
28370: LD_INT 28
28372: ST_TO_ADDR
28373: GO 28414
28375: LD_INT 33
28377: DOUBLE
28378: EQUAL
28379: IFTRUE 28383
28381: GO 28394
28383: POP
// bc_type := b_oil_mine ; 34 :
28384: LD_ADDR_OWVAR 42
28388: PUSH
28389: LD_INT 29
28391: ST_TO_ADDR
28392: GO 28414
28394: LD_INT 34
28396: DOUBLE
28397: EQUAL
28398: IFTRUE 28402
28400: GO 28413
28402: POP
// bc_type := b_siberite_mine ; end ;
28403: LD_ADDR_OWVAR 42
28407: PUSH
28408: LD_INT 30
28410: ST_TO_ADDR
28411: GO 28414
28413: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28414: LD_ADDR_VAR 0 8
28418: PUSH
28419: LD_VAR 0 5
28423: PPUSH
28424: LD_VAR 0 6
28428: PPUSH
28429: LD_VAR 0 3
28433: PPUSH
28434: CALL_OW 47
28438: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28439: LD_OWVAR 42
28443: PUSH
28444: LD_INT 32
28446: PUSH
28447: LD_INT 33
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: IN
28454: IFFALSE 28470
// PlaceWeaponTurret ( b , weapon ) ;
28456: LD_VAR 0 8
28460: PPUSH
28461: LD_VAR 0 4
28465: PPUSH
28466: CALL_OW 431
// end ;
28470: LD_VAR 0 7
28474: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28475: LD_INT 0
28477: PPUSH
28478: PPUSH
28479: PPUSH
28480: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28481: LD_ADDR_VAR 0 4
28485: PUSH
28486: LD_INT 22
28488: PUSH
28489: LD_OWVAR 2
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: LD_INT 30
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 30
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PPUSH
28530: CALL_OW 69
28534: ST_TO_ADDR
// if not tmp then
28535: LD_VAR 0 4
28539: NOT
28540: IFFALSE 28544
// exit ;
28542: GO 28603
// for i in tmp do
28544: LD_ADDR_VAR 0 2
28548: PUSH
28549: LD_VAR 0 4
28553: PUSH
28554: FOR_IN
28555: IFFALSE 28601
// for j = 1 to 3 do
28557: LD_ADDR_VAR 0 3
28561: PUSH
28562: DOUBLE
28563: LD_INT 1
28565: DEC
28566: ST_TO_ADDR
28567: LD_INT 3
28569: PUSH
28570: FOR_TO
28571: IFFALSE 28597
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28573: LD_VAR 0 2
28577: PPUSH
28578: CALL_OW 274
28582: PPUSH
28583: LD_VAR 0 3
28587: PPUSH
28588: LD_INT 99999
28590: PPUSH
28591: CALL_OW 277
28595: GO 28570
28597: POP
28598: POP
28599: GO 28554
28601: POP
28602: POP
// end ;
28603: LD_VAR 0 1
28607: RET
// export function hHackSetLevel10 ; var i , j ; begin
28608: LD_INT 0
28610: PPUSH
28611: PPUSH
28612: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28613: LD_ADDR_VAR 0 2
28617: PUSH
28618: LD_INT 21
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PPUSH
28628: CALL_OW 69
28632: PUSH
28633: FOR_IN
28634: IFFALSE 28686
// if IsSelected ( i ) then
28636: LD_VAR 0 2
28640: PPUSH
28641: CALL_OW 306
28645: IFFALSE 28684
// begin for j := 1 to 4 do
28647: LD_ADDR_VAR 0 3
28651: PUSH
28652: DOUBLE
28653: LD_INT 1
28655: DEC
28656: ST_TO_ADDR
28657: LD_INT 4
28659: PUSH
28660: FOR_TO
28661: IFFALSE 28682
// SetSkill ( i , j , 10 ) ;
28663: LD_VAR 0 2
28667: PPUSH
28668: LD_VAR 0 3
28672: PPUSH
28673: LD_INT 10
28675: PPUSH
28676: CALL_OW 237
28680: GO 28660
28682: POP
28683: POP
// end ;
28684: GO 28633
28686: POP
28687: POP
// end ;
28688: LD_VAR 0 1
28692: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28693: LD_INT 0
28695: PPUSH
28696: PPUSH
28697: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28698: LD_ADDR_VAR 0 2
28702: PUSH
28703: LD_INT 22
28705: PUSH
28706: LD_OWVAR 2
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 21
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PPUSH
28729: CALL_OW 69
28733: PUSH
28734: FOR_IN
28735: IFFALSE 28776
// begin for j := 1 to 4 do
28737: LD_ADDR_VAR 0 3
28741: PUSH
28742: DOUBLE
28743: LD_INT 1
28745: DEC
28746: ST_TO_ADDR
28747: LD_INT 4
28749: PUSH
28750: FOR_TO
28751: IFFALSE 28772
// SetSkill ( i , j , 10 ) ;
28753: LD_VAR 0 2
28757: PPUSH
28758: LD_VAR 0 3
28762: PPUSH
28763: LD_INT 10
28765: PPUSH
28766: CALL_OW 237
28770: GO 28750
28772: POP
28773: POP
// end ;
28774: GO 28734
28776: POP
28777: POP
// end ;
28778: LD_VAR 0 1
28782: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28783: LD_INT 0
28785: PPUSH
// uc_side := your_side ;
28786: LD_ADDR_OWVAR 20
28790: PUSH
28791: LD_OWVAR 2
28795: ST_TO_ADDR
// uc_nation := nation ;
28796: LD_ADDR_OWVAR 21
28800: PUSH
28801: LD_VAR 0 1
28805: ST_TO_ADDR
// InitHc ;
28806: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28810: LD_INT 0
28812: PPUSH
28813: LD_VAR 0 2
28817: PPUSH
28818: LD_VAR 0 3
28822: PPUSH
28823: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28827: LD_VAR 0 4
28831: PPUSH
28832: LD_VAR 0 5
28836: PPUSH
28837: CALL_OW 428
28841: PUSH
28842: LD_INT 0
28844: EQUAL
28845: IFFALSE 28869
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28847: CALL_OW 44
28851: PPUSH
28852: LD_VAR 0 4
28856: PPUSH
28857: LD_VAR 0 5
28861: PPUSH
28862: LD_INT 1
28864: PPUSH
28865: CALL_OW 48
// end ;
28869: LD_VAR 0 6
28873: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28874: LD_INT 0
28876: PPUSH
28877: PPUSH
// uc_side := your_side ;
28878: LD_ADDR_OWVAR 20
28882: PUSH
28883: LD_OWVAR 2
28887: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28888: LD_VAR 0 1
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: LD_INT 3
28901: PUSH
28902: LD_INT 4
28904: PUSH
28905: LD_INT 5
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: IN
28915: IFFALSE 28927
// uc_nation := nation_american else
28917: LD_ADDR_OWVAR 21
28921: PUSH
28922: LD_INT 1
28924: ST_TO_ADDR
28925: GO 28970
// if chassis in [ 11 , 12 , 13 , 14 ] then
28927: LD_VAR 0 1
28931: PUSH
28932: LD_INT 11
28934: PUSH
28935: LD_INT 12
28937: PUSH
28938: LD_INT 13
28940: PUSH
28941: LD_INT 14
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: IN
28950: IFFALSE 28962
// uc_nation := nation_arabian else
28952: LD_ADDR_OWVAR 21
28956: PUSH
28957: LD_INT 2
28959: ST_TO_ADDR
28960: GO 28970
// uc_nation := nation_russian ;
28962: LD_ADDR_OWVAR 21
28966: PUSH
28967: LD_INT 3
28969: ST_TO_ADDR
// vc_chassis := chassis ;
28970: LD_ADDR_OWVAR 37
28974: PUSH
28975: LD_VAR 0 1
28979: ST_TO_ADDR
// vc_engine := engine ;
28980: LD_ADDR_OWVAR 39
28984: PUSH
28985: LD_VAR 0 2
28989: ST_TO_ADDR
// vc_control := control ;
28990: LD_ADDR_OWVAR 38
28994: PUSH
28995: LD_VAR 0 3
28999: ST_TO_ADDR
// vc_weapon := weapon ;
29000: LD_ADDR_OWVAR 40
29004: PUSH
29005: LD_VAR 0 4
29009: ST_TO_ADDR
// un := CreateVehicle ;
29010: LD_ADDR_VAR 0 8
29014: PUSH
29015: CALL_OW 45
29019: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29020: LD_VAR 0 8
29024: PPUSH
29025: LD_INT 0
29027: PPUSH
29028: LD_INT 5
29030: PPUSH
29031: CALL_OW 12
29035: PPUSH
29036: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29040: LD_VAR 0 8
29044: PPUSH
29045: LD_VAR 0 5
29049: PPUSH
29050: LD_VAR 0 6
29054: PPUSH
29055: LD_INT 1
29057: PPUSH
29058: CALL_OW 48
// end ;
29062: LD_VAR 0 7
29066: RET
// export hInvincible ; every 1 do
29067: GO 29069
29069: DISABLE
// hInvincible := [ ] ;
29070: LD_ADDR_EXP 114
29074: PUSH
29075: EMPTY
29076: ST_TO_ADDR
29077: END
// every 10 do var i ;
29078: GO 29080
29080: DISABLE
29081: LD_INT 0
29083: PPUSH
// begin enable ;
29084: ENABLE
// if not hInvincible then
29085: LD_EXP 114
29089: NOT
29090: IFFALSE 29094
// exit ;
29092: GO 29138
// for i in hInvincible do
29094: LD_ADDR_VAR 0 1
29098: PUSH
29099: LD_EXP 114
29103: PUSH
29104: FOR_IN
29105: IFFALSE 29136
// if GetLives ( i ) < 1000 then
29107: LD_VAR 0 1
29111: PPUSH
29112: CALL_OW 256
29116: PUSH
29117: LD_INT 1000
29119: LESS
29120: IFFALSE 29134
// SetLives ( i , 1000 ) ;
29122: LD_VAR 0 1
29126: PPUSH
29127: LD_INT 1000
29129: PPUSH
29130: CALL_OW 234
29134: GO 29104
29136: POP
29137: POP
// end ;
29138: PPOPN 1
29140: END
// export function hHackInvincible ; var i ; begin
29141: LD_INT 0
29143: PPUSH
29144: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29145: LD_ADDR_VAR 0 2
29149: PUSH
29150: LD_INT 2
29152: PUSH
29153: LD_INT 21
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 21
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: PPUSH
29178: CALL_OW 69
29182: PUSH
29183: FOR_IN
29184: IFFALSE 29245
// if IsSelected ( i ) then
29186: LD_VAR 0 2
29190: PPUSH
29191: CALL_OW 306
29195: IFFALSE 29243
// begin if i in hInvincible then
29197: LD_VAR 0 2
29201: PUSH
29202: LD_EXP 114
29206: IN
29207: IFFALSE 29227
// hInvincible := hInvincible diff i else
29209: LD_ADDR_EXP 114
29213: PUSH
29214: LD_EXP 114
29218: PUSH
29219: LD_VAR 0 2
29223: DIFF
29224: ST_TO_ADDR
29225: GO 29243
// hInvincible := hInvincible union i ;
29227: LD_ADDR_EXP 114
29231: PUSH
29232: LD_EXP 114
29236: PUSH
29237: LD_VAR 0 2
29241: UNION
29242: ST_TO_ADDR
// end ;
29243: GO 29183
29245: POP
29246: POP
// end ;
29247: LD_VAR 0 1
29251: RET
// export function hHackInvisible ; var i , j ; begin
29252: LD_INT 0
29254: PPUSH
29255: PPUSH
29256: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29257: LD_ADDR_VAR 0 2
29261: PUSH
29262: LD_INT 21
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PPUSH
29272: CALL_OW 69
29276: PUSH
29277: FOR_IN
29278: IFFALSE 29302
// if IsSelected ( i ) then
29280: LD_VAR 0 2
29284: PPUSH
29285: CALL_OW 306
29289: IFFALSE 29300
// ComForceInvisible ( i ) ;
29291: LD_VAR 0 2
29295: PPUSH
29296: CALL_OW 496
29300: GO 29277
29302: POP
29303: POP
// end ;
29304: LD_VAR 0 1
29308: RET
// export function hHackChangeYourSide ; begin
29309: LD_INT 0
29311: PPUSH
// if your_side = 8 then
29312: LD_OWVAR 2
29316: PUSH
29317: LD_INT 8
29319: EQUAL
29320: IFFALSE 29332
// your_side := 0 else
29322: LD_ADDR_OWVAR 2
29326: PUSH
29327: LD_INT 0
29329: ST_TO_ADDR
29330: GO 29346
// your_side := your_side + 1 ;
29332: LD_ADDR_OWVAR 2
29336: PUSH
29337: LD_OWVAR 2
29341: PUSH
29342: LD_INT 1
29344: PLUS
29345: ST_TO_ADDR
// end ;
29346: LD_VAR 0 1
29350: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29351: LD_INT 0
29353: PPUSH
29354: PPUSH
29355: PPUSH
// for i in all_units do
29356: LD_ADDR_VAR 0 2
29360: PUSH
29361: LD_OWVAR 3
29365: PUSH
29366: FOR_IN
29367: IFFALSE 29445
// if IsSelected ( i ) then
29369: LD_VAR 0 2
29373: PPUSH
29374: CALL_OW 306
29378: IFFALSE 29443
// begin j := GetSide ( i ) ;
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_VAR 0 2
29389: PPUSH
29390: CALL_OW 255
29394: ST_TO_ADDR
// if j = 8 then
29395: LD_VAR 0 3
29399: PUSH
29400: LD_INT 8
29402: EQUAL
29403: IFFALSE 29415
// j := 0 else
29405: LD_ADDR_VAR 0 3
29409: PUSH
29410: LD_INT 0
29412: ST_TO_ADDR
29413: GO 29429
// j := j + 1 ;
29415: LD_ADDR_VAR 0 3
29419: PUSH
29420: LD_VAR 0 3
29424: PUSH
29425: LD_INT 1
29427: PLUS
29428: ST_TO_ADDR
// SetSide ( i , j ) ;
29429: LD_VAR 0 2
29433: PPUSH
29434: LD_VAR 0 3
29438: PPUSH
29439: CALL_OW 235
// end ;
29443: GO 29366
29445: POP
29446: POP
// end ;
29447: LD_VAR 0 1
29451: RET
// export function hHackFog ; begin
29452: LD_INT 0
29454: PPUSH
// FogOff ( true ) ;
29455: LD_INT 1
29457: PPUSH
29458: CALL_OW 344
// end ;
29462: LD_VAR 0 1
29466: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29467: LD_INT 0
29469: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29470: LD_VAR 0 1
29474: PPUSH
29475: LD_VAR 0 2
29479: PPUSH
29480: LD_VAR 0 3
29484: PPUSH
29485: LD_INT 1
29487: PPUSH
29488: LD_INT 1
29490: PPUSH
29491: CALL_OW 483
// CenterOnXY ( x , y ) ;
29495: LD_VAR 0 2
29499: PPUSH
29500: LD_VAR 0 3
29504: PPUSH
29505: CALL_OW 84
// end ; end_of_file
29509: LD_VAR 0 4
29513: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29514: LD_INT 0
29516: PPUSH
29517: PPUSH
29518: PPUSH
29519: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29520: LD_VAR 0 1
29524: PPUSH
29525: CALL_OW 264
29529: PUSH
29530: LD_EXP 42
29534: EQUAL
29535: IFFALSE 29607
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29537: LD_INT 68
29539: PPUSH
29540: LD_VAR 0 1
29544: PPUSH
29545: CALL_OW 255
29549: PPUSH
29550: CALL_OW 321
29554: PUSH
29555: LD_INT 2
29557: EQUAL
29558: IFFALSE 29570
// eff := 70 else
29560: LD_ADDR_VAR 0 4
29564: PUSH
29565: LD_INT 70
29567: ST_TO_ADDR
29568: GO 29578
// eff := 30 ;
29570: LD_ADDR_VAR 0 4
29574: PUSH
29575: LD_INT 30
29577: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29578: LD_VAR 0 1
29582: PPUSH
29583: CALL_OW 250
29587: PPUSH
29588: LD_VAR 0 1
29592: PPUSH
29593: CALL_OW 251
29597: PPUSH
29598: LD_VAR 0 4
29602: PPUSH
29603: CALL_OW 495
// end ; end ;
29607: LD_VAR 0 2
29611: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29612: LD_INT 0
29614: PPUSH
// end ;
29615: LD_VAR 0 4
29619: RET
// export function SOS_Command ( cmd ) ; begin
29620: LD_INT 0
29622: PPUSH
// end ;
29623: LD_VAR 0 2
29627: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29628: LD_INT 0
29630: PPUSH
// end ;
29631: LD_VAR 0 6
29635: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
29636: LD_INT 0
29638: PPUSH
29639: PPUSH
// if not vehicle or not factory then
29640: LD_VAR 0 1
29644: NOT
29645: PUSH
29646: LD_VAR 0 2
29650: NOT
29651: OR
29652: IFFALSE 29656
// exit ;
29654: GO 29887
// if factoryWaypoints >= factory then
29656: LD_EXP 115
29660: PUSH
29661: LD_VAR 0 2
29665: GREATEREQUAL
29666: IFFALSE 29887
// if factoryWaypoints [ factory ] then
29668: LD_EXP 115
29672: PUSH
29673: LD_VAR 0 2
29677: ARRAY
29678: IFFALSE 29887
// begin if GetControl ( vehicle ) = control_manual then
29680: LD_VAR 0 1
29684: PPUSH
29685: CALL_OW 263
29689: PUSH
29690: LD_INT 1
29692: EQUAL
29693: IFFALSE 29774
// begin driver := IsDrivenBy ( vehicle ) ;
29695: LD_ADDR_VAR 0 4
29699: PUSH
29700: LD_VAR 0 1
29704: PPUSH
29705: CALL_OW 311
29709: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29710: LD_VAR 0 4
29714: PPUSH
29715: LD_EXP 115
29719: PUSH
29720: LD_VAR 0 2
29724: ARRAY
29725: PUSH
29726: LD_INT 3
29728: ARRAY
29729: PPUSH
29730: LD_EXP 115
29734: PUSH
29735: LD_VAR 0 2
29739: ARRAY
29740: PUSH
29741: LD_INT 4
29743: ARRAY
29744: PPUSH
29745: CALL_OW 171
// AddComExitVehicle ( driver ) ;
29749: LD_VAR 0 4
29753: PPUSH
29754: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
29758: LD_VAR 0 4
29762: PPUSH
29763: LD_VAR 0 2
29767: PPUSH
29768: CALL_OW 180
// end else
29772: GO 29887
// if GetControl ( vehicle ) = control_remote then
29774: LD_VAR 0 1
29778: PPUSH
29779: CALL_OW 263
29783: PUSH
29784: LD_INT 2
29786: EQUAL
29787: IFFALSE 29848
// begin wait ( 0 0$2 ) ;
29789: LD_INT 70
29791: PPUSH
29792: CALL_OW 67
// if Connect ( vehicle ) then
29796: LD_VAR 0 1
29800: PPUSH
29801: CALL 42111 0 1
29805: IFFALSE 29846
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29807: LD_VAR 0 1
29811: PPUSH
29812: LD_EXP 115
29816: PUSH
29817: LD_VAR 0 2
29821: ARRAY
29822: PUSH
29823: LD_INT 3
29825: ARRAY
29826: PPUSH
29827: LD_EXP 115
29831: PUSH
29832: LD_VAR 0 2
29836: ARRAY
29837: PUSH
29838: LD_INT 4
29840: ARRAY
29841: PPUSH
29842: CALL_OW 171
// end else
29846: GO 29887
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29848: LD_VAR 0 1
29852: PPUSH
29853: LD_EXP 115
29857: PUSH
29858: LD_VAR 0 2
29862: ARRAY
29863: PUSH
29864: LD_INT 3
29866: ARRAY
29867: PPUSH
29868: LD_EXP 115
29872: PUSH
29873: LD_VAR 0 2
29877: ARRAY
29878: PUSH
29879: LD_INT 4
29881: ARRAY
29882: PPUSH
29883: CALL_OW 171
// end ; end ;
29887: LD_VAR 0 3
29891: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29892: LD_INT 0
29894: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29895: LD_VAR 0 1
29899: PUSH
29900: LD_INT 250
29902: EQUAL
29903: PUSH
29904: LD_VAR 0 2
29908: PPUSH
29909: CALL_OW 264
29913: PUSH
29914: LD_EXP 45
29918: EQUAL
29919: AND
29920: IFFALSE 29941
// MinerPlaceMine ( unit , x , y ) ;
29922: LD_VAR 0 2
29926: PPUSH
29927: LD_VAR 0 4
29931: PPUSH
29932: LD_VAR 0 5
29936: PPUSH
29937: CALL 32669 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29941: LD_VAR 0 1
29945: PUSH
29946: LD_INT 251
29948: EQUAL
29949: PUSH
29950: LD_VAR 0 2
29954: PPUSH
29955: CALL_OW 264
29959: PUSH
29960: LD_EXP 45
29964: EQUAL
29965: AND
29966: IFFALSE 29987
// MinerDetonateMine ( unit , x , y ) ;
29968: LD_VAR 0 2
29972: PPUSH
29973: LD_VAR 0 4
29977: PPUSH
29978: LD_VAR 0 5
29982: PPUSH
29983: CALL 32946 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29987: LD_VAR 0 1
29991: PUSH
29992: LD_INT 252
29994: EQUAL
29995: PUSH
29996: LD_VAR 0 2
30000: PPUSH
30001: CALL_OW 264
30005: PUSH
30006: LD_EXP 45
30010: EQUAL
30011: AND
30012: IFFALSE 30033
// MinerCreateMinefield ( unit , x , y ) ;
30014: LD_VAR 0 2
30018: PPUSH
30019: LD_VAR 0 4
30023: PPUSH
30024: LD_VAR 0 5
30028: PPUSH
30029: CALL 33363 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30033: LD_VAR 0 1
30037: PUSH
30038: LD_INT 253
30040: EQUAL
30041: PUSH
30042: LD_VAR 0 2
30046: PPUSH
30047: CALL_OW 257
30051: PUSH
30052: LD_INT 5
30054: EQUAL
30055: AND
30056: IFFALSE 30077
// ComBinocular ( unit , x , y ) ;
30058: LD_VAR 0 2
30062: PPUSH
30063: LD_VAR 0 4
30067: PPUSH
30068: LD_VAR 0 5
30072: PPUSH
30073: CALL 33734 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30077: LD_VAR 0 1
30081: PUSH
30082: LD_INT 254
30084: EQUAL
30085: PUSH
30086: LD_VAR 0 2
30090: PPUSH
30091: CALL_OW 264
30095: PUSH
30096: LD_EXP 40
30100: EQUAL
30101: AND
30102: PUSH
30103: LD_VAR 0 3
30107: PPUSH
30108: CALL_OW 263
30112: PUSH
30113: LD_INT 3
30115: EQUAL
30116: AND
30117: IFFALSE 30133
// HackDestroyVehicle ( unit , selectedUnit ) ;
30119: LD_VAR 0 2
30123: PPUSH
30124: LD_VAR 0 3
30128: PPUSH
30129: CALL 32029 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30133: LD_VAR 0 1
30137: PUSH
30138: LD_INT 255
30140: EQUAL
30141: PUSH
30142: LD_VAR 0 2
30146: PPUSH
30147: CALL_OW 264
30151: PUSH
30152: LD_INT 14
30154: PUSH
30155: LD_INT 53
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: IN
30162: AND
30163: PUSH
30164: LD_VAR 0 4
30168: PPUSH
30169: LD_VAR 0 5
30173: PPUSH
30174: CALL_OW 488
30178: AND
30179: IFFALSE 30203
// CutTreeXYR ( unit , x , y , 12 ) ;
30181: LD_VAR 0 2
30185: PPUSH
30186: LD_VAR 0 4
30190: PPUSH
30191: LD_VAR 0 5
30195: PPUSH
30196: LD_INT 12
30198: PPUSH
30199: CALL 30595 0 4
// if cmd = 256 then
30203: LD_VAR 0 1
30207: PUSH
30208: LD_INT 256
30210: EQUAL
30211: IFFALSE 30232
// SetFactoryWaypoint ( unit , x , y ) ;
30213: LD_VAR 0 2
30217: PPUSH
30218: LD_VAR 0 4
30222: PPUSH
30223: LD_VAR 0 5
30227: PPUSH
30228: CALL 30237 0 3
// end ;
30232: LD_VAR 0 6
30236: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30237: LD_INT 0
30239: PPUSH
30240: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30241: LD_VAR 0 1
30245: NOT
30246: PUSH
30247: LD_VAR 0 2
30251: PPUSH
30252: LD_VAR 0 3
30256: PPUSH
30257: CALL_OW 488
30261: NOT
30262: OR
30263: PUSH
30264: LD_VAR 0 1
30268: PPUSH
30269: CALL_OW 266
30273: PUSH
30274: LD_INT 3
30276: NONEQUAL
30277: PUSH
30278: LD_VAR 0 1
30282: PPUSH
30283: CALL_OW 247
30287: PUSH
30288: LD_INT 1
30290: EQUAL
30291: NOT
30292: AND
30293: OR
30294: IFFALSE 30298
// exit ;
30296: GO 30447
// if GetType ( factory ) = unit_human then
30298: LD_VAR 0 1
30302: PPUSH
30303: CALL_OW 247
30307: PUSH
30308: LD_INT 1
30310: EQUAL
30311: IFFALSE 30328
// factory := IsInUnit ( factory ) ;
30313: LD_ADDR_VAR 0 1
30317: PUSH
30318: LD_VAR 0 1
30322: PPUSH
30323: CALL_OW 310
30327: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30328: LD_VAR 0 1
30332: PPUSH
30333: CALL_OW 266
30337: PUSH
30338: LD_INT 3
30340: NONEQUAL
30341: IFFALSE 30345
// exit ;
30343: GO 30447
// if HexInfo ( x , y ) = factory then
30345: LD_VAR 0 2
30349: PPUSH
30350: LD_VAR 0 3
30354: PPUSH
30355: CALL_OW 428
30359: PUSH
30360: LD_VAR 0 1
30364: EQUAL
30365: IFFALSE 30392
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30367: LD_ADDR_EXP 115
30371: PUSH
30372: LD_EXP 115
30376: PPUSH
30377: LD_VAR 0 1
30381: PPUSH
30382: LD_INT 0
30384: PPUSH
30385: CALL_OW 1
30389: ST_TO_ADDR
30390: GO 30443
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30392: LD_ADDR_EXP 115
30396: PUSH
30397: LD_EXP 115
30401: PPUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: LD_VAR 0 1
30411: PPUSH
30412: CALL_OW 255
30416: PUSH
30417: LD_VAR 0 1
30421: PUSH
30422: LD_VAR 0 2
30426: PUSH
30427: LD_VAR 0 3
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 1
30442: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30443: CALL 30452 0 0
// end ;
30447: LD_VAR 0 4
30451: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
30452: LD_INT 0
30454: PPUSH
30455: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30456: LD_STRING resetFactoryWaypoint();
30458: PPUSH
30459: CALL_OW 559
// if factoryWaypoints then
30463: LD_EXP 115
30467: IFFALSE 30590
// begin for i := 1 to factoryWaypoints do
30469: LD_ADDR_VAR 0 2
30473: PUSH
30474: DOUBLE
30475: LD_INT 1
30477: DEC
30478: ST_TO_ADDR
30479: LD_EXP 115
30483: PUSH
30484: FOR_TO
30485: IFFALSE 30588
// if factoryWaypoints [ i ] then
30487: LD_EXP 115
30491: PUSH
30492: LD_VAR 0 2
30496: ARRAY
30497: IFFALSE 30586
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
30499: LD_STRING setFactoryWaypointXY(
30501: PUSH
30502: LD_EXP 115
30506: PUSH
30507: LD_VAR 0 2
30511: ARRAY
30512: PUSH
30513: LD_INT 1
30515: ARRAY
30516: STR
30517: PUSH
30518: LD_STRING ,
30520: STR
30521: PUSH
30522: LD_EXP 115
30526: PUSH
30527: LD_VAR 0 2
30531: ARRAY
30532: PUSH
30533: LD_INT 2
30535: ARRAY
30536: STR
30537: PUSH
30538: LD_STRING ,
30540: STR
30541: PUSH
30542: LD_EXP 115
30546: PUSH
30547: LD_VAR 0 2
30551: ARRAY
30552: PUSH
30553: LD_INT 3
30555: ARRAY
30556: STR
30557: PUSH
30558: LD_STRING ,
30560: STR
30561: PUSH
30562: LD_EXP 115
30566: PUSH
30567: LD_VAR 0 2
30571: ARRAY
30572: PUSH
30573: LD_INT 4
30575: ARRAY
30576: STR
30577: PUSH
30578: LD_STRING )
30580: STR
30581: PPUSH
30582: CALL_OW 559
30586: GO 30484
30588: POP
30589: POP
// end ; end ;
30590: LD_VAR 0 1
30594: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30595: LD_INT 0
30597: PPUSH
30598: PPUSH
30599: PPUSH
30600: PPUSH
30601: PPUSH
30602: PPUSH
30603: PPUSH
30604: PPUSH
30605: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30606: LD_VAR 0 1
30610: NOT
30611: PUSH
30612: LD_VAR 0 2
30616: PPUSH
30617: LD_VAR 0 3
30621: PPUSH
30622: CALL_OW 488
30626: NOT
30627: OR
30628: PUSH
30629: LD_VAR 0 4
30633: NOT
30634: OR
30635: IFFALSE 30639
// exit ;
30637: GO 30979
// list := [ ] ;
30639: LD_ADDR_VAR 0 13
30643: PUSH
30644: EMPTY
30645: ST_TO_ADDR
// if x - r < 0 then
30646: LD_VAR 0 2
30650: PUSH
30651: LD_VAR 0 4
30655: MINUS
30656: PUSH
30657: LD_INT 0
30659: LESS
30660: IFFALSE 30672
// min_x := 0 else
30662: LD_ADDR_VAR 0 7
30666: PUSH
30667: LD_INT 0
30669: ST_TO_ADDR
30670: GO 30688
// min_x := x - r ;
30672: LD_ADDR_VAR 0 7
30676: PUSH
30677: LD_VAR 0 2
30681: PUSH
30682: LD_VAR 0 4
30686: MINUS
30687: ST_TO_ADDR
// if y - r < 0 then
30688: LD_VAR 0 3
30692: PUSH
30693: LD_VAR 0 4
30697: MINUS
30698: PUSH
30699: LD_INT 0
30701: LESS
30702: IFFALSE 30714
// min_y := 0 else
30704: LD_ADDR_VAR 0 8
30708: PUSH
30709: LD_INT 0
30711: ST_TO_ADDR
30712: GO 30730
// min_y := y - r ;
30714: LD_ADDR_VAR 0 8
30718: PUSH
30719: LD_VAR 0 3
30723: PUSH
30724: LD_VAR 0 4
30728: MINUS
30729: ST_TO_ADDR
// max_x := x + r ;
30730: LD_ADDR_VAR 0 9
30734: PUSH
30735: LD_VAR 0 2
30739: PUSH
30740: LD_VAR 0 4
30744: PLUS
30745: ST_TO_ADDR
// max_y := y + r ;
30746: LD_ADDR_VAR 0 10
30750: PUSH
30751: LD_VAR 0 3
30755: PUSH
30756: LD_VAR 0 4
30760: PLUS
30761: ST_TO_ADDR
// for _x = min_x to max_x do
30762: LD_ADDR_VAR 0 11
30766: PUSH
30767: DOUBLE
30768: LD_VAR 0 7
30772: DEC
30773: ST_TO_ADDR
30774: LD_VAR 0 9
30778: PUSH
30779: FOR_TO
30780: IFFALSE 30897
// for _y = min_y to max_y do
30782: LD_ADDR_VAR 0 12
30786: PUSH
30787: DOUBLE
30788: LD_VAR 0 8
30792: DEC
30793: ST_TO_ADDR
30794: LD_VAR 0 10
30798: PUSH
30799: FOR_TO
30800: IFFALSE 30893
// begin if not ValidHex ( _x , _y ) then
30802: LD_VAR 0 11
30806: PPUSH
30807: LD_VAR 0 12
30811: PPUSH
30812: CALL_OW 488
30816: NOT
30817: IFFALSE 30821
// continue ;
30819: GO 30799
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30821: LD_VAR 0 11
30825: PPUSH
30826: LD_VAR 0 12
30830: PPUSH
30831: CALL_OW 351
30835: PUSH
30836: LD_VAR 0 11
30840: PPUSH
30841: LD_VAR 0 12
30845: PPUSH
30846: CALL_OW 554
30850: AND
30851: IFFALSE 30891
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30853: LD_ADDR_VAR 0 13
30857: PUSH
30858: LD_VAR 0 13
30862: PPUSH
30863: LD_VAR 0 13
30867: PUSH
30868: LD_INT 1
30870: PLUS
30871: PPUSH
30872: LD_VAR 0 11
30876: PUSH
30877: LD_VAR 0 12
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PPUSH
30886: CALL_OW 2
30890: ST_TO_ADDR
// end ;
30891: GO 30799
30893: POP
30894: POP
30895: GO 30779
30897: POP
30898: POP
// if not list then
30899: LD_VAR 0 13
30903: NOT
30904: IFFALSE 30908
// exit ;
30906: GO 30979
// for i in list do
30908: LD_ADDR_VAR 0 6
30912: PUSH
30913: LD_VAR 0 13
30917: PUSH
30918: FOR_IN
30919: IFFALSE 30977
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30921: LD_VAR 0 1
30925: PPUSH
30926: LD_STRING M
30928: PUSH
30929: LD_VAR 0 6
30933: PUSH
30934: LD_INT 1
30936: ARRAY
30937: PUSH
30938: LD_VAR 0 6
30942: PUSH
30943: LD_INT 2
30945: ARRAY
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: PPUSH
30971: CALL_OW 447
30975: GO 30918
30977: POP
30978: POP
// end ;
30979: LD_VAR 0 5
30983: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30984: LD_EXP 116
30988: NOT
30989: IFFALSE 31039
30991: GO 30993
30993: DISABLE
// begin initHack := true ;
30994: LD_ADDR_EXP 116
30998: PUSH
30999: LD_INT 1
31001: ST_TO_ADDR
// hackTanks := [ ] ;
31002: LD_ADDR_EXP 117
31006: PUSH
31007: EMPTY
31008: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31009: LD_ADDR_EXP 118
31013: PUSH
31014: EMPTY
31015: ST_TO_ADDR
// hackLimit := 3 ;
31016: LD_ADDR_EXP 119
31020: PUSH
31021: LD_INT 3
31023: ST_TO_ADDR
// hackDist := 12 ;
31024: LD_ADDR_EXP 120
31028: PUSH
31029: LD_INT 12
31031: ST_TO_ADDR
// hackCounter := [ ] ;
31032: LD_ADDR_EXP 121
31036: PUSH
31037: EMPTY
31038: ST_TO_ADDR
// end ;
31039: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31040: LD_EXP 116
31044: PUSH
31045: LD_INT 34
31047: PUSH
31048: LD_EXP 40
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 69
31061: AND
31062: IFFALSE 31317
31064: GO 31066
31066: DISABLE
31067: LD_INT 0
31069: PPUSH
31070: PPUSH
// begin enable ;
31071: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31072: LD_ADDR_VAR 0 1
31076: PUSH
31077: LD_INT 34
31079: PUSH
31080: LD_EXP 40
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PPUSH
31089: CALL_OW 69
31093: PUSH
31094: FOR_IN
31095: IFFALSE 31315
// begin if not i in hackTanks then
31097: LD_VAR 0 1
31101: PUSH
31102: LD_EXP 117
31106: IN
31107: NOT
31108: IFFALSE 31191
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31110: LD_ADDR_EXP 117
31114: PUSH
31115: LD_EXP 117
31119: PPUSH
31120: LD_EXP 117
31124: PUSH
31125: LD_INT 1
31127: PLUS
31128: PPUSH
31129: LD_VAR 0 1
31133: PPUSH
31134: CALL_OW 1
31138: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31139: LD_ADDR_EXP 118
31143: PUSH
31144: LD_EXP 118
31148: PPUSH
31149: LD_EXP 118
31153: PUSH
31154: LD_INT 1
31156: PLUS
31157: PPUSH
31158: EMPTY
31159: PPUSH
31160: CALL_OW 1
31164: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31165: LD_ADDR_EXP 121
31169: PUSH
31170: LD_EXP 121
31174: PPUSH
31175: LD_EXP 121
31179: PUSH
31180: LD_INT 1
31182: PLUS
31183: PPUSH
31184: EMPTY
31185: PPUSH
31186: CALL_OW 1
31190: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31191: LD_VAR 0 1
31195: PPUSH
31196: CALL_OW 302
31200: NOT
31201: IFFALSE 31214
// begin HackUnlinkAll ( i ) ;
31203: LD_VAR 0 1
31207: PPUSH
31208: CALL 31320 0 1
// continue ;
31212: GO 31094
// end ; HackCheckCapturedStatus ( i ) ;
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL 31763 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31223: LD_ADDR_VAR 0 2
31227: PUSH
31228: LD_INT 81
31230: PUSH
31231: LD_VAR 0 1
31235: PPUSH
31236: CALL_OW 255
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 33
31247: PUSH
31248: LD_INT 3
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 91
31257: PUSH
31258: LD_VAR 0 1
31262: PUSH
31263: LD_EXP 120
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 50
31275: PUSH
31276: EMPTY
31277: LIST
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: PPUSH
31285: CALL_OW 69
31289: ST_TO_ADDR
// if not tmp then
31290: LD_VAR 0 2
31294: NOT
31295: IFFALSE 31299
// continue ;
31297: GO 31094
// HackLink ( i , tmp ) ;
31299: LD_VAR 0 1
31303: PPUSH
31304: LD_VAR 0 2
31308: PPUSH
31309: CALL 31456 0 2
// end ;
31313: GO 31094
31315: POP
31316: POP
// end ;
31317: PPOPN 2
31319: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31320: LD_INT 0
31322: PPUSH
31323: PPUSH
31324: PPUSH
// if not hack in hackTanks then
31325: LD_VAR 0 1
31329: PUSH
31330: LD_EXP 117
31334: IN
31335: NOT
31336: IFFALSE 31340
// exit ;
31338: GO 31451
// index := GetElementIndex ( hackTanks , hack ) ;
31340: LD_ADDR_VAR 0 4
31344: PUSH
31345: LD_EXP 117
31349: PPUSH
31350: LD_VAR 0 1
31354: PPUSH
31355: CALL 38925 0 2
31359: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31360: LD_EXP 118
31364: PUSH
31365: LD_VAR 0 4
31369: ARRAY
31370: IFFALSE 31451
// begin for i in hackTanksCaptured [ index ] do
31372: LD_ADDR_VAR 0 3
31376: PUSH
31377: LD_EXP 118
31381: PUSH
31382: LD_VAR 0 4
31386: ARRAY
31387: PUSH
31388: FOR_IN
31389: IFFALSE 31415
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31391: LD_VAR 0 3
31395: PUSH
31396: LD_INT 1
31398: ARRAY
31399: PPUSH
31400: LD_VAR 0 3
31404: PUSH
31405: LD_INT 2
31407: ARRAY
31408: PPUSH
31409: CALL_OW 235
31413: GO 31388
31415: POP
31416: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31417: LD_ADDR_EXP 118
31421: PUSH
31422: LD_EXP 118
31426: PPUSH
31427: LD_VAR 0 4
31431: PPUSH
31432: EMPTY
31433: PPUSH
31434: CALL_OW 1
31438: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31439: LD_VAR 0 1
31443: PPUSH
31444: LD_INT 0
31446: PPUSH
31447: CALL_OW 505
// end ; end ;
31451: LD_VAR 0 2
31455: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31456: LD_INT 0
31458: PPUSH
31459: PPUSH
31460: PPUSH
// if not hack in hackTanks or not vehicles then
31461: LD_VAR 0 1
31465: PUSH
31466: LD_EXP 117
31470: IN
31471: NOT
31472: PUSH
31473: LD_VAR 0 2
31477: NOT
31478: OR
31479: IFFALSE 31483
// exit ;
31481: GO 31758
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31483: LD_ADDR_VAR 0 2
31487: PUSH
31488: LD_VAR 0 1
31492: PPUSH
31493: LD_VAR 0 2
31497: PPUSH
31498: LD_INT 1
31500: PPUSH
31501: LD_INT 1
31503: PPUSH
31504: CALL 39575 0 4
31508: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31509: LD_ADDR_VAR 0 5
31513: PUSH
31514: LD_EXP 117
31518: PPUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: CALL 38925 0 2
31528: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31529: LD_EXP 118
31533: PUSH
31534: LD_VAR 0 5
31538: ARRAY
31539: PUSH
31540: LD_EXP 119
31544: LESS
31545: IFFALSE 31734
// begin for i := 1 to vehicles do
31547: LD_ADDR_VAR 0 4
31551: PUSH
31552: DOUBLE
31553: LD_INT 1
31555: DEC
31556: ST_TO_ADDR
31557: LD_VAR 0 2
31561: PUSH
31562: FOR_TO
31563: IFFALSE 31732
// begin if hackTanksCaptured [ index ] = hackLimit then
31565: LD_EXP 118
31569: PUSH
31570: LD_VAR 0 5
31574: ARRAY
31575: PUSH
31576: LD_EXP 119
31580: EQUAL
31581: IFFALSE 31585
// break ;
31583: GO 31732
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31585: LD_ADDR_EXP 121
31589: PUSH
31590: LD_EXP 121
31594: PPUSH
31595: LD_VAR 0 5
31599: PPUSH
31600: LD_EXP 121
31604: PUSH
31605: LD_VAR 0 5
31609: ARRAY
31610: PUSH
31611: LD_INT 1
31613: PLUS
31614: PPUSH
31615: CALL_OW 1
31619: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31620: LD_ADDR_EXP 118
31624: PUSH
31625: LD_EXP 118
31629: PPUSH
31630: LD_VAR 0 5
31634: PUSH
31635: LD_EXP 118
31639: PUSH
31640: LD_VAR 0 5
31644: ARRAY
31645: PUSH
31646: LD_INT 1
31648: PLUS
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PPUSH
31654: LD_VAR 0 2
31658: PUSH
31659: LD_VAR 0 4
31663: ARRAY
31664: PUSH
31665: LD_VAR 0 2
31669: PUSH
31670: LD_VAR 0 4
31674: ARRAY
31675: PPUSH
31676: CALL_OW 255
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PPUSH
31685: CALL 39140 0 3
31689: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31690: LD_VAR 0 2
31694: PUSH
31695: LD_VAR 0 4
31699: ARRAY
31700: PPUSH
31701: LD_VAR 0 1
31705: PPUSH
31706: CALL_OW 255
31710: PPUSH
31711: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31715: LD_VAR 0 2
31719: PUSH
31720: LD_VAR 0 4
31724: ARRAY
31725: PPUSH
31726: CALL_OW 141
// end ;
31730: GO 31562
31732: POP
31733: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31734: LD_VAR 0 1
31738: PPUSH
31739: LD_EXP 118
31743: PUSH
31744: LD_VAR 0 5
31748: ARRAY
31749: PUSH
31750: LD_INT 0
31752: PLUS
31753: PPUSH
31754: CALL_OW 505
// end ;
31758: LD_VAR 0 3
31762: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31763: LD_INT 0
31765: PPUSH
31766: PPUSH
31767: PPUSH
31768: PPUSH
// if not hack in hackTanks then
31769: LD_VAR 0 1
31773: PUSH
31774: LD_EXP 117
31778: IN
31779: NOT
31780: IFFALSE 31784
// exit ;
31782: GO 32024
// index := GetElementIndex ( hackTanks , hack ) ;
31784: LD_ADDR_VAR 0 4
31788: PUSH
31789: LD_EXP 117
31793: PPUSH
31794: LD_VAR 0 1
31798: PPUSH
31799: CALL 38925 0 2
31803: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31804: LD_ADDR_VAR 0 3
31808: PUSH
31809: DOUBLE
31810: LD_EXP 118
31814: PUSH
31815: LD_VAR 0 4
31819: ARRAY
31820: INC
31821: ST_TO_ADDR
31822: LD_INT 1
31824: PUSH
31825: FOR_DOWNTO
31826: IFFALSE 31998
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31828: LD_ADDR_VAR 0 5
31832: PUSH
31833: LD_EXP 118
31837: PUSH
31838: LD_VAR 0 4
31842: ARRAY
31843: PUSH
31844: LD_VAR 0 3
31848: ARRAY
31849: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31850: LD_VAR 0 5
31854: PUSH
31855: LD_INT 1
31857: ARRAY
31858: PPUSH
31859: CALL_OW 302
31863: NOT
31864: PUSH
31865: LD_VAR 0 5
31869: PUSH
31870: LD_INT 1
31872: ARRAY
31873: PPUSH
31874: CALL_OW 255
31878: PUSH
31879: LD_VAR 0 1
31883: PPUSH
31884: CALL_OW 255
31888: NONEQUAL
31889: OR
31890: IFFALSE 31996
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31892: LD_VAR 0 5
31896: PUSH
31897: LD_INT 1
31899: ARRAY
31900: PPUSH
31901: CALL_OW 305
31905: PUSH
31906: LD_VAR 0 5
31910: PUSH
31911: LD_INT 1
31913: ARRAY
31914: PPUSH
31915: CALL_OW 255
31919: PUSH
31920: LD_VAR 0 1
31924: PPUSH
31925: CALL_OW 255
31929: EQUAL
31930: AND
31931: IFFALSE 31955
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31933: LD_VAR 0 5
31937: PUSH
31938: LD_INT 1
31940: ARRAY
31941: PPUSH
31942: LD_VAR 0 5
31946: PUSH
31947: LD_INT 2
31949: ARRAY
31950: PPUSH
31951: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31955: LD_ADDR_EXP 118
31959: PUSH
31960: LD_EXP 118
31964: PPUSH
31965: LD_VAR 0 4
31969: PPUSH
31970: LD_EXP 118
31974: PUSH
31975: LD_VAR 0 4
31979: ARRAY
31980: PPUSH
31981: LD_VAR 0 3
31985: PPUSH
31986: CALL_OW 3
31990: PPUSH
31991: CALL_OW 1
31995: ST_TO_ADDR
// end ; end ;
31996: GO 31825
31998: POP
31999: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32000: LD_VAR 0 1
32004: PPUSH
32005: LD_EXP 118
32009: PUSH
32010: LD_VAR 0 4
32014: ARRAY
32015: PUSH
32016: LD_INT 0
32018: PLUS
32019: PPUSH
32020: CALL_OW 505
// end ;
32024: LD_VAR 0 2
32028: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32029: LD_INT 0
32031: PPUSH
32032: PPUSH
32033: PPUSH
32034: PPUSH
// if not hack in hackTanks then
32035: LD_VAR 0 1
32039: PUSH
32040: LD_EXP 117
32044: IN
32045: NOT
32046: IFFALSE 32050
// exit ;
32048: GO 32135
// index := GetElementIndex ( hackTanks , hack ) ;
32050: LD_ADDR_VAR 0 5
32054: PUSH
32055: LD_EXP 117
32059: PPUSH
32060: LD_VAR 0 1
32064: PPUSH
32065: CALL 38925 0 2
32069: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32070: LD_ADDR_VAR 0 4
32074: PUSH
32075: DOUBLE
32076: LD_INT 1
32078: DEC
32079: ST_TO_ADDR
32080: LD_EXP 118
32084: PUSH
32085: LD_VAR 0 5
32089: ARRAY
32090: PUSH
32091: FOR_TO
32092: IFFALSE 32133
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32094: LD_EXP 118
32098: PUSH
32099: LD_VAR 0 5
32103: ARRAY
32104: PUSH
32105: LD_VAR 0 4
32109: ARRAY
32110: PUSH
32111: LD_INT 1
32113: ARRAY
32114: PUSH
32115: LD_VAR 0 2
32119: EQUAL
32120: IFFALSE 32131
// KillUnit ( vehicle ) ;
32122: LD_VAR 0 2
32126: PPUSH
32127: CALL_OW 66
32131: GO 32091
32133: POP
32134: POP
// end ;
32135: LD_VAR 0 3
32139: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32140: LD_EXP 122
32144: NOT
32145: IFFALSE 32180
32147: GO 32149
32149: DISABLE
// begin initMiner := true ;
32150: LD_ADDR_EXP 122
32154: PUSH
32155: LD_INT 1
32157: ST_TO_ADDR
// minersList := [ ] ;
32158: LD_ADDR_EXP 123
32162: PUSH
32163: EMPTY
32164: ST_TO_ADDR
// minerMinesList := [ ] ;
32165: LD_ADDR_EXP 124
32169: PUSH
32170: EMPTY
32171: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32172: LD_ADDR_EXP 125
32176: PUSH
32177: LD_INT 5
32179: ST_TO_ADDR
// end ;
32180: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32181: LD_EXP 122
32185: PUSH
32186: LD_INT 34
32188: PUSH
32189: LD_EXP 45
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PPUSH
32198: CALL_OW 69
32202: AND
32203: IFFALSE 32666
32205: GO 32207
32207: DISABLE
32208: LD_INT 0
32210: PPUSH
32211: PPUSH
32212: PPUSH
32213: PPUSH
// begin enable ;
32214: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32215: LD_ADDR_VAR 0 1
32219: PUSH
32220: LD_INT 34
32222: PUSH
32223: LD_EXP 45
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PPUSH
32232: CALL_OW 69
32236: PUSH
32237: FOR_IN
32238: IFFALSE 32310
// begin if not i in minersList then
32240: LD_VAR 0 1
32244: PUSH
32245: LD_EXP 123
32249: IN
32250: NOT
32251: IFFALSE 32308
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32253: LD_ADDR_EXP 123
32257: PUSH
32258: LD_EXP 123
32262: PPUSH
32263: LD_EXP 123
32267: PUSH
32268: LD_INT 1
32270: PLUS
32271: PPUSH
32272: LD_VAR 0 1
32276: PPUSH
32277: CALL_OW 1
32281: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32282: LD_ADDR_EXP 124
32286: PUSH
32287: LD_EXP 124
32291: PPUSH
32292: LD_EXP 124
32296: PUSH
32297: LD_INT 1
32299: PLUS
32300: PPUSH
32301: EMPTY
32302: PPUSH
32303: CALL_OW 1
32307: ST_TO_ADDR
// end end ;
32308: GO 32237
32310: POP
32311: POP
// for i := minerMinesList downto 1 do
32312: LD_ADDR_VAR 0 1
32316: PUSH
32317: DOUBLE
32318: LD_EXP 124
32322: INC
32323: ST_TO_ADDR
32324: LD_INT 1
32326: PUSH
32327: FOR_DOWNTO
32328: IFFALSE 32664
// begin if IsLive ( minersList [ i ] ) then
32330: LD_EXP 123
32334: PUSH
32335: LD_VAR 0 1
32339: ARRAY
32340: PPUSH
32341: CALL_OW 300
32345: IFFALSE 32373
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32347: LD_EXP 123
32351: PUSH
32352: LD_VAR 0 1
32356: ARRAY
32357: PPUSH
32358: LD_EXP 124
32362: PUSH
32363: LD_VAR 0 1
32367: ARRAY
32368: PPUSH
32369: CALL_OW 505
// if not minerMinesList [ i ] then
32373: LD_EXP 124
32377: PUSH
32378: LD_VAR 0 1
32382: ARRAY
32383: NOT
32384: IFFALSE 32388
// continue ;
32386: GO 32327
// for j := minerMinesList [ i ] downto 1 do
32388: LD_ADDR_VAR 0 2
32392: PUSH
32393: DOUBLE
32394: LD_EXP 124
32398: PUSH
32399: LD_VAR 0 1
32403: ARRAY
32404: INC
32405: ST_TO_ADDR
32406: LD_INT 1
32408: PUSH
32409: FOR_DOWNTO
32410: IFFALSE 32660
// begin side := GetSide ( minersList [ i ] ) ;
32412: LD_ADDR_VAR 0 3
32416: PUSH
32417: LD_EXP 123
32421: PUSH
32422: LD_VAR 0 1
32426: ARRAY
32427: PPUSH
32428: CALL_OW 255
32432: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32433: LD_ADDR_VAR 0 4
32437: PUSH
32438: LD_EXP 124
32442: PUSH
32443: LD_VAR 0 1
32447: ARRAY
32448: PUSH
32449: LD_VAR 0 2
32453: ARRAY
32454: PUSH
32455: LD_INT 1
32457: ARRAY
32458: PPUSH
32459: LD_EXP 124
32463: PUSH
32464: LD_VAR 0 1
32468: ARRAY
32469: PUSH
32470: LD_VAR 0 2
32474: ARRAY
32475: PUSH
32476: LD_INT 2
32478: ARRAY
32479: PPUSH
32480: CALL_OW 428
32484: ST_TO_ADDR
// if not tmp then
32485: LD_VAR 0 4
32489: NOT
32490: IFFALSE 32494
// continue ;
32492: GO 32409
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32494: LD_VAR 0 4
32498: PUSH
32499: LD_INT 81
32501: PUSH
32502: LD_VAR 0 3
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PPUSH
32511: CALL_OW 69
32515: IN
32516: PUSH
32517: LD_EXP 124
32521: PUSH
32522: LD_VAR 0 1
32526: ARRAY
32527: PUSH
32528: LD_VAR 0 2
32532: ARRAY
32533: PUSH
32534: LD_INT 1
32536: ARRAY
32537: PPUSH
32538: LD_EXP 124
32542: PUSH
32543: LD_VAR 0 1
32547: ARRAY
32548: PUSH
32549: LD_VAR 0 2
32553: ARRAY
32554: PUSH
32555: LD_INT 2
32557: ARRAY
32558: PPUSH
32559: CALL_OW 458
32563: AND
32564: IFFALSE 32658
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32566: LD_EXP 124
32570: PUSH
32571: LD_VAR 0 1
32575: ARRAY
32576: PUSH
32577: LD_VAR 0 2
32581: ARRAY
32582: PUSH
32583: LD_INT 1
32585: ARRAY
32586: PPUSH
32587: LD_EXP 124
32591: PUSH
32592: LD_VAR 0 1
32596: ARRAY
32597: PUSH
32598: LD_VAR 0 2
32602: ARRAY
32603: PUSH
32604: LD_INT 2
32606: ARRAY
32607: PPUSH
32608: LD_VAR 0 3
32612: PPUSH
32613: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32617: LD_ADDR_EXP 124
32621: PUSH
32622: LD_EXP 124
32626: PPUSH
32627: LD_VAR 0 1
32631: PPUSH
32632: LD_EXP 124
32636: PUSH
32637: LD_VAR 0 1
32641: ARRAY
32642: PPUSH
32643: LD_VAR 0 2
32647: PPUSH
32648: CALL_OW 3
32652: PPUSH
32653: CALL_OW 1
32657: ST_TO_ADDR
// end ; end ;
32658: GO 32409
32660: POP
32661: POP
// end ;
32662: GO 32327
32664: POP
32665: POP
// end ;
32666: PPOPN 4
32668: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32669: LD_INT 0
32671: PPUSH
32672: PPUSH
// result := false ;
32673: LD_ADDR_VAR 0 4
32677: PUSH
32678: LD_INT 0
32680: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 264
32690: PUSH
32691: LD_EXP 45
32695: EQUAL
32696: NOT
32697: IFFALSE 32701
// exit ;
32699: GO 32941
// index := GetElementIndex ( minersList , unit ) ;
32701: LD_ADDR_VAR 0 5
32705: PUSH
32706: LD_EXP 123
32710: PPUSH
32711: LD_VAR 0 1
32715: PPUSH
32716: CALL 38925 0 2
32720: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32721: LD_EXP 124
32725: PUSH
32726: LD_VAR 0 5
32730: ARRAY
32731: PUSH
32732: LD_EXP 125
32736: GREATEREQUAL
32737: IFFALSE 32741
// exit ;
32739: GO 32941
// ComMoveXY ( unit , x , y ) ;
32741: LD_VAR 0 1
32745: PPUSH
32746: LD_VAR 0 2
32750: PPUSH
32751: LD_VAR 0 3
32755: PPUSH
32756: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32760: LD_INT 35
32762: PPUSH
32763: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32767: LD_VAR 0 1
32771: PPUSH
32772: LD_VAR 0 2
32776: PPUSH
32777: LD_VAR 0 3
32781: PPUSH
32782: CALL 69644 0 3
32786: NOT
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 314
32797: AND
32798: IFFALSE 32802
// exit ;
32800: GO 32941
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32802: LD_VAR 0 2
32806: PPUSH
32807: LD_VAR 0 3
32811: PPUSH
32812: CALL_OW 428
32816: PUSH
32817: LD_VAR 0 1
32821: EQUAL
32822: PUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL_OW 314
32832: NOT
32833: AND
32834: IFFALSE 32760
// PlaySoundXY ( x , y , PlantMine ) ;
32836: LD_VAR 0 2
32840: PPUSH
32841: LD_VAR 0 3
32845: PPUSH
32846: LD_STRING PlantMine
32848: PPUSH
32849: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32853: LD_VAR 0 2
32857: PPUSH
32858: LD_VAR 0 3
32862: PPUSH
32863: LD_VAR 0 1
32867: PPUSH
32868: CALL_OW 255
32872: PPUSH
32873: LD_INT 0
32875: PPUSH
32876: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32880: LD_ADDR_EXP 124
32884: PUSH
32885: LD_EXP 124
32889: PPUSH
32890: LD_VAR 0 5
32894: PUSH
32895: LD_EXP 124
32899: PUSH
32900: LD_VAR 0 5
32904: ARRAY
32905: PUSH
32906: LD_INT 1
32908: PLUS
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PPUSH
32914: LD_VAR 0 2
32918: PUSH
32919: LD_VAR 0 3
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PPUSH
32928: CALL 39140 0 3
32932: ST_TO_ADDR
// result := true ;
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: LD_INT 1
32940: ST_TO_ADDR
// end ;
32941: LD_VAR 0 4
32945: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32946: LD_INT 0
32948: PPUSH
32949: PPUSH
32950: PPUSH
// if not unit in minersList then
32951: LD_VAR 0 1
32955: PUSH
32956: LD_EXP 123
32960: IN
32961: NOT
32962: IFFALSE 32966
// exit ;
32964: GO 33358
// index := GetElementIndex ( minersList , unit ) ;
32966: LD_ADDR_VAR 0 6
32970: PUSH
32971: LD_EXP 123
32975: PPUSH
32976: LD_VAR 0 1
32980: PPUSH
32981: CALL 38925 0 2
32985: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32986: LD_ADDR_VAR 0 5
32990: PUSH
32991: DOUBLE
32992: LD_EXP 124
32996: PUSH
32997: LD_VAR 0 6
33001: ARRAY
33002: INC
33003: ST_TO_ADDR
33004: LD_INT 1
33006: PUSH
33007: FOR_DOWNTO
33008: IFFALSE 33169
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33010: LD_EXP 124
33014: PUSH
33015: LD_VAR 0 6
33019: ARRAY
33020: PUSH
33021: LD_VAR 0 5
33025: ARRAY
33026: PUSH
33027: LD_INT 1
33029: ARRAY
33030: PUSH
33031: LD_VAR 0 2
33035: EQUAL
33036: PUSH
33037: LD_EXP 124
33041: PUSH
33042: LD_VAR 0 6
33046: ARRAY
33047: PUSH
33048: LD_VAR 0 5
33052: ARRAY
33053: PUSH
33054: LD_INT 2
33056: ARRAY
33057: PUSH
33058: LD_VAR 0 3
33062: EQUAL
33063: AND
33064: IFFALSE 33167
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33066: LD_EXP 124
33070: PUSH
33071: LD_VAR 0 6
33075: ARRAY
33076: PUSH
33077: LD_VAR 0 5
33081: ARRAY
33082: PUSH
33083: LD_INT 1
33085: ARRAY
33086: PPUSH
33087: LD_EXP 124
33091: PUSH
33092: LD_VAR 0 6
33096: ARRAY
33097: PUSH
33098: LD_VAR 0 5
33102: ARRAY
33103: PUSH
33104: LD_INT 2
33106: ARRAY
33107: PPUSH
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL_OW 255
33117: PPUSH
33118: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33122: LD_ADDR_EXP 124
33126: PUSH
33127: LD_EXP 124
33131: PPUSH
33132: LD_VAR 0 6
33136: PPUSH
33137: LD_EXP 124
33141: PUSH
33142: LD_VAR 0 6
33146: ARRAY
33147: PPUSH
33148: LD_VAR 0 5
33152: PPUSH
33153: CALL_OW 3
33157: PPUSH
33158: CALL_OW 1
33162: ST_TO_ADDR
// exit ;
33163: POP
33164: POP
33165: GO 33358
// end ; end ;
33167: GO 33007
33169: POP
33170: POP
// for i := minerMinesList [ index ] downto 1 do
33171: LD_ADDR_VAR 0 5
33175: PUSH
33176: DOUBLE
33177: LD_EXP 124
33181: PUSH
33182: LD_VAR 0 6
33186: ARRAY
33187: INC
33188: ST_TO_ADDR
33189: LD_INT 1
33191: PUSH
33192: FOR_DOWNTO
33193: IFFALSE 33356
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33195: LD_EXP 124
33199: PUSH
33200: LD_VAR 0 6
33204: ARRAY
33205: PUSH
33206: LD_VAR 0 5
33210: ARRAY
33211: PUSH
33212: LD_INT 1
33214: ARRAY
33215: PPUSH
33216: LD_EXP 124
33220: PUSH
33221: LD_VAR 0 6
33225: ARRAY
33226: PUSH
33227: LD_VAR 0 5
33231: ARRAY
33232: PUSH
33233: LD_INT 2
33235: ARRAY
33236: PPUSH
33237: LD_VAR 0 2
33241: PPUSH
33242: LD_VAR 0 3
33246: PPUSH
33247: CALL_OW 298
33251: PUSH
33252: LD_INT 6
33254: LESS
33255: IFFALSE 33354
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33257: LD_EXP 124
33261: PUSH
33262: LD_VAR 0 6
33266: ARRAY
33267: PUSH
33268: LD_VAR 0 5
33272: ARRAY
33273: PUSH
33274: LD_INT 1
33276: ARRAY
33277: PPUSH
33278: LD_EXP 124
33282: PUSH
33283: LD_VAR 0 6
33287: ARRAY
33288: PUSH
33289: LD_VAR 0 5
33293: ARRAY
33294: PUSH
33295: LD_INT 2
33297: ARRAY
33298: PPUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: CALL_OW 255
33308: PPUSH
33309: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33313: LD_ADDR_EXP 124
33317: PUSH
33318: LD_EXP 124
33322: PPUSH
33323: LD_VAR 0 6
33327: PPUSH
33328: LD_EXP 124
33332: PUSH
33333: LD_VAR 0 6
33337: ARRAY
33338: PPUSH
33339: LD_VAR 0 5
33343: PPUSH
33344: CALL_OW 3
33348: PPUSH
33349: CALL_OW 1
33353: ST_TO_ADDR
// end ; end ;
33354: GO 33192
33356: POP
33357: POP
// end ;
33358: LD_VAR 0 4
33362: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33363: LD_INT 0
33365: PPUSH
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33374: LD_VAR 0 1
33378: PPUSH
33379: CALL_OW 264
33383: PUSH
33384: LD_EXP 45
33388: EQUAL
33389: NOT
33390: PUSH
33391: LD_VAR 0 1
33395: PUSH
33396: LD_EXP 123
33400: IN
33401: NOT
33402: OR
33403: IFFALSE 33407
// exit ;
33405: GO 33729
// index := GetElementIndex ( minersList , unit ) ;
33407: LD_ADDR_VAR 0 6
33411: PUSH
33412: LD_EXP 123
33416: PPUSH
33417: LD_VAR 0 1
33421: PPUSH
33422: CALL 38925 0 2
33426: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33427: LD_ADDR_VAR 0 8
33431: PUSH
33432: LD_EXP 125
33436: PUSH
33437: LD_EXP 124
33441: PUSH
33442: LD_VAR 0 6
33446: ARRAY
33447: MINUS
33448: ST_TO_ADDR
// if not minesFreeAmount then
33449: LD_VAR 0 8
33453: NOT
33454: IFFALSE 33458
// exit ;
33456: GO 33729
// tmp := [ ] ;
33458: LD_ADDR_VAR 0 7
33462: PUSH
33463: EMPTY
33464: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33465: LD_ADDR_VAR 0 5
33469: PUSH
33470: DOUBLE
33471: LD_INT 1
33473: DEC
33474: ST_TO_ADDR
33475: LD_VAR 0 8
33479: PUSH
33480: FOR_TO
33481: IFFALSE 33676
// begin _d := rand ( 0 , 5 ) ;
33483: LD_ADDR_VAR 0 11
33487: PUSH
33488: LD_INT 0
33490: PPUSH
33491: LD_INT 5
33493: PPUSH
33494: CALL_OW 12
33498: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33499: LD_ADDR_VAR 0 12
33503: PUSH
33504: LD_INT 2
33506: PPUSH
33507: LD_INT 6
33509: PPUSH
33510: CALL_OW 12
33514: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33515: LD_ADDR_VAR 0 9
33519: PUSH
33520: LD_VAR 0 2
33524: PPUSH
33525: LD_VAR 0 11
33529: PPUSH
33530: LD_VAR 0 12
33534: PPUSH
33535: CALL_OW 272
33539: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33540: LD_ADDR_VAR 0 10
33544: PUSH
33545: LD_VAR 0 3
33549: PPUSH
33550: LD_VAR 0 11
33554: PPUSH
33555: LD_VAR 0 12
33559: PPUSH
33560: CALL_OW 273
33564: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33565: LD_VAR 0 9
33569: PPUSH
33570: LD_VAR 0 10
33574: PPUSH
33575: CALL_OW 488
33579: PUSH
33580: LD_VAR 0 9
33584: PUSH
33585: LD_VAR 0 10
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_VAR 0 7
33598: IN
33599: NOT
33600: AND
33601: PUSH
33602: LD_VAR 0 9
33606: PPUSH
33607: LD_VAR 0 10
33611: PPUSH
33612: CALL_OW 458
33616: NOT
33617: AND
33618: IFFALSE 33660
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33620: LD_ADDR_VAR 0 7
33624: PUSH
33625: LD_VAR 0 7
33629: PPUSH
33630: LD_VAR 0 7
33634: PUSH
33635: LD_INT 1
33637: PLUS
33638: PPUSH
33639: LD_VAR 0 9
33643: PUSH
33644: LD_VAR 0 10
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PPUSH
33653: CALL_OW 1
33657: ST_TO_ADDR
33658: GO 33674
// i := i - 1 ;
33660: LD_ADDR_VAR 0 5
33664: PUSH
33665: LD_VAR 0 5
33669: PUSH
33670: LD_INT 1
33672: MINUS
33673: ST_TO_ADDR
// end ;
33674: GO 33480
33676: POP
33677: POP
// for i in tmp do
33678: LD_ADDR_VAR 0 5
33682: PUSH
33683: LD_VAR 0 7
33687: PUSH
33688: FOR_IN
33689: IFFALSE 33727
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33691: LD_VAR 0 1
33695: PPUSH
33696: LD_VAR 0 5
33700: PUSH
33701: LD_INT 1
33703: ARRAY
33704: PPUSH
33705: LD_VAR 0 5
33709: PUSH
33710: LD_INT 2
33712: ARRAY
33713: PPUSH
33714: CALL 32669 0 3
33718: NOT
33719: IFFALSE 33725
// exit ;
33721: POP
33722: POP
33723: GO 33729
33725: GO 33688
33727: POP
33728: POP
// end ;
33729: LD_VAR 0 4
33733: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33734: LD_INT 0
33736: PPUSH
33737: PPUSH
33738: PPUSH
33739: PPUSH
33740: PPUSH
33741: PPUSH
33742: PPUSH
// if not GetClass ( unit ) = class_sniper then
33743: LD_VAR 0 1
33747: PPUSH
33748: CALL_OW 257
33752: PUSH
33753: LD_INT 5
33755: EQUAL
33756: NOT
33757: IFFALSE 33761
// exit ;
33759: GO 34149
// dist := 8 ;
33761: LD_ADDR_VAR 0 5
33765: PUSH
33766: LD_INT 8
33768: ST_TO_ADDR
// viewRange := 12 ;
33769: LD_ADDR_VAR 0 7
33773: PUSH
33774: LD_INT 12
33776: ST_TO_ADDR
// side := GetSide ( unit ) ;
33777: LD_ADDR_VAR 0 6
33781: PUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL_OW 255
33791: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33792: LD_INT 61
33794: PPUSH
33795: LD_VAR 0 6
33799: PPUSH
33800: CALL_OW 321
33804: PUSH
33805: LD_INT 2
33807: EQUAL
33808: IFFALSE 33818
// viewRange := 16 ;
33810: LD_ADDR_VAR 0 7
33814: PUSH
33815: LD_INT 16
33817: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33818: LD_VAR 0 1
33822: PPUSH
33823: LD_VAR 0 2
33827: PPUSH
33828: LD_VAR 0 3
33832: PPUSH
33833: CALL_OW 297
33837: PUSH
33838: LD_VAR 0 5
33842: GREATER
33843: IFFALSE 33922
// begin ComMoveXY ( unit , x , y ) ;
33845: LD_VAR 0 1
33849: PPUSH
33850: LD_VAR 0 2
33854: PPUSH
33855: LD_VAR 0 3
33859: PPUSH
33860: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33864: LD_INT 35
33866: PPUSH
33867: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33871: LD_VAR 0 1
33875: PPUSH
33876: LD_VAR 0 2
33880: PPUSH
33881: LD_VAR 0 3
33885: PPUSH
33886: CALL 69644 0 3
33890: NOT
33891: IFFALSE 33895
// exit ;
33893: GO 34149
// until GetDistUnitXY ( unit , x , y ) < dist ;
33895: LD_VAR 0 1
33899: PPUSH
33900: LD_VAR 0 2
33904: PPUSH
33905: LD_VAR 0 3
33909: PPUSH
33910: CALL_OW 297
33914: PUSH
33915: LD_VAR 0 5
33919: LESS
33920: IFFALSE 33864
// end ; ComTurnXY ( unit , x , y ) ;
33922: LD_VAR 0 1
33926: PPUSH
33927: LD_VAR 0 2
33931: PPUSH
33932: LD_VAR 0 3
33936: PPUSH
33937: CALL_OW 118
// wait ( 5 ) ;
33941: LD_INT 5
33943: PPUSH
33944: CALL_OW 67
// _d := GetDir ( unit ) ;
33948: LD_ADDR_VAR 0 10
33952: PUSH
33953: LD_VAR 0 1
33957: PPUSH
33958: CALL_OW 254
33962: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33963: LD_ADDR_VAR 0 8
33967: PUSH
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 250
33977: PPUSH
33978: LD_VAR 0 10
33982: PPUSH
33983: LD_VAR 0 5
33987: PPUSH
33988: CALL_OW 272
33992: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33993: LD_ADDR_VAR 0 9
33997: PUSH
33998: LD_VAR 0 1
34002: PPUSH
34003: CALL_OW 251
34007: PPUSH
34008: LD_VAR 0 10
34012: PPUSH
34013: LD_VAR 0 5
34017: PPUSH
34018: CALL_OW 273
34022: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34023: LD_VAR 0 8
34027: PPUSH
34028: LD_VAR 0 9
34032: PPUSH
34033: CALL_OW 488
34037: NOT
34038: IFFALSE 34042
// exit ;
34040: GO 34149
// ComAnimCustom ( unit , 1 ) ;
34042: LD_VAR 0 1
34046: PPUSH
34047: LD_INT 1
34049: PPUSH
34050: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34054: LD_VAR 0 8
34058: PPUSH
34059: LD_VAR 0 9
34063: PPUSH
34064: LD_VAR 0 6
34068: PPUSH
34069: LD_VAR 0 7
34073: PPUSH
34074: CALL_OW 330
// repeat wait ( 1 ) ;
34078: LD_INT 1
34080: PPUSH
34081: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34085: LD_VAR 0 1
34089: PPUSH
34090: CALL_OW 316
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 314
34104: OR
34105: PUSH
34106: LD_VAR 0 1
34110: PPUSH
34111: CALL_OW 302
34115: NOT
34116: OR
34117: PUSH
34118: LD_VAR 0 1
34122: PPUSH
34123: CALL_OW 301
34127: OR
34128: IFFALSE 34078
// RemoveSeeing ( _x , _y , side ) ;
34130: LD_VAR 0 8
34134: PPUSH
34135: LD_VAR 0 9
34139: PPUSH
34140: LD_VAR 0 6
34144: PPUSH
34145: CALL_OW 331
// end ; end_of_file
34149: LD_VAR 0 4
34153: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34154: LD_INT 0
34156: PPUSH
34157: PPUSH
// if exist_mode then
34158: LD_VAR 0 2
34162: IFFALSE 34187
// unit := CreateCharacter ( prefix & ident ) else
34164: LD_ADDR_VAR 0 5
34168: PUSH
34169: LD_VAR 0 3
34173: PUSH
34174: LD_VAR 0 1
34178: STR
34179: PPUSH
34180: CALL_OW 34
34184: ST_TO_ADDR
34185: GO 34202
// unit := NewCharacter ( ident ) ;
34187: LD_ADDR_VAR 0 5
34191: PUSH
34192: LD_VAR 0 1
34196: PPUSH
34197: CALL_OW 25
34201: ST_TO_ADDR
// result := unit ;
34202: LD_ADDR_VAR 0 4
34206: PUSH
34207: LD_VAR 0 5
34211: ST_TO_ADDR
// end ;
34212: LD_VAR 0 4
34216: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34217: LD_INT 0
34219: PPUSH
34220: PPUSH
// if not side or not nation then
34221: LD_VAR 0 1
34225: NOT
34226: PUSH
34227: LD_VAR 0 2
34231: NOT
34232: OR
34233: IFFALSE 34237
// exit ;
34235: GO 35005
// case nation of nation_american :
34237: LD_VAR 0 2
34241: PUSH
34242: LD_INT 1
34244: DOUBLE
34245: EQUAL
34246: IFTRUE 34250
34248: GO 34464
34250: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34251: LD_ADDR_VAR 0 4
34255: PUSH
34256: LD_INT 35
34258: PUSH
34259: LD_INT 45
34261: PUSH
34262: LD_INT 46
34264: PUSH
34265: LD_INT 47
34267: PUSH
34268: LD_INT 82
34270: PUSH
34271: LD_INT 83
34273: PUSH
34274: LD_INT 84
34276: PUSH
34277: LD_INT 85
34279: PUSH
34280: LD_INT 86
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: LD_INT 2
34288: PUSH
34289: LD_INT 6
34291: PUSH
34292: LD_INT 15
34294: PUSH
34295: LD_INT 16
34297: PUSH
34298: LD_INT 7
34300: PUSH
34301: LD_INT 12
34303: PUSH
34304: LD_INT 13
34306: PUSH
34307: LD_INT 10
34309: PUSH
34310: LD_INT 14
34312: PUSH
34313: LD_INT 20
34315: PUSH
34316: LD_INT 21
34318: PUSH
34319: LD_INT 22
34321: PUSH
34322: LD_INT 25
34324: PUSH
34325: LD_INT 32
34327: PUSH
34328: LD_INT 27
34330: PUSH
34331: LD_INT 36
34333: PUSH
34334: LD_INT 69
34336: PUSH
34337: LD_INT 39
34339: PUSH
34340: LD_INT 34
34342: PUSH
34343: LD_INT 40
34345: PUSH
34346: LD_INT 48
34348: PUSH
34349: LD_INT 49
34351: PUSH
34352: LD_INT 50
34354: PUSH
34355: LD_INT 51
34357: PUSH
34358: LD_INT 52
34360: PUSH
34361: LD_INT 53
34363: PUSH
34364: LD_INT 54
34366: PUSH
34367: LD_INT 55
34369: PUSH
34370: LD_INT 56
34372: PUSH
34373: LD_INT 57
34375: PUSH
34376: LD_INT 58
34378: PUSH
34379: LD_INT 59
34381: PUSH
34382: LD_INT 60
34384: PUSH
34385: LD_INT 61
34387: PUSH
34388: LD_INT 62
34390: PUSH
34391: LD_INT 80
34393: PUSH
34394: LD_INT 82
34396: PUSH
34397: LD_INT 83
34399: PUSH
34400: LD_INT 84
34402: PUSH
34403: LD_INT 85
34405: PUSH
34406: LD_INT 86
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: ST_TO_ADDR
34462: GO 34929
34464: LD_INT 2
34466: DOUBLE
34467: EQUAL
34468: IFTRUE 34472
34470: GO 34698
34472: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34473: LD_ADDR_VAR 0 4
34477: PUSH
34478: LD_INT 35
34480: PUSH
34481: LD_INT 45
34483: PUSH
34484: LD_INT 46
34486: PUSH
34487: LD_INT 47
34489: PUSH
34490: LD_INT 82
34492: PUSH
34493: LD_INT 83
34495: PUSH
34496: LD_INT 84
34498: PUSH
34499: LD_INT 85
34501: PUSH
34502: LD_INT 87
34504: PUSH
34505: LD_INT 70
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 11
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: LD_INT 4
34519: PUSH
34520: LD_INT 5
34522: PUSH
34523: LD_INT 6
34525: PUSH
34526: LD_INT 15
34528: PUSH
34529: LD_INT 18
34531: PUSH
34532: LD_INT 7
34534: PUSH
34535: LD_INT 17
34537: PUSH
34538: LD_INT 8
34540: PUSH
34541: LD_INT 20
34543: PUSH
34544: LD_INT 21
34546: PUSH
34547: LD_INT 22
34549: PUSH
34550: LD_INT 72
34552: PUSH
34553: LD_INT 26
34555: PUSH
34556: LD_INT 69
34558: PUSH
34559: LD_INT 39
34561: PUSH
34562: LD_INT 40
34564: PUSH
34565: LD_INT 41
34567: PUSH
34568: LD_INT 42
34570: PUSH
34571: LD_INT 43
34573: PUSH
34574: LD_INT 48
34576: PUSH
34577: LD_INT 49
34579: PUSH
34580: LD_INT 50
34582: PUSH
34583: LD_INT 51
34585: PUSH
34586: LD_INT 52
34588: PUSH
34589: LD_INT 53
34591: PUSH
34592: LD_INT 54
34594: PUSH
34595: LD_INT 55
34597: PUSH
34598: LD_INT 56
34600: PUSH
34601: LD_INT 60
34603: PUSH
34604: LD_INT 61
34606: PUSH
34607: LD_INT 62
34609: PUSH
34610: LD_INT 66
34612: PUSH
34613: LD_INT 67
34615: PUSH
34616: LD_INT 68
34618: PUSH
34619: LD_INT 81
34621: PUSH
34622: LD_INT 82
34624: PUSH
34625: LD_INT 83
34627: PUSH
34628: LD_INT 84
34630: PUSH
34631: LD_INT 85
34633: PUSH
34634: LD_INT 87
34636: PUSH
34637: LD_INT 88
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: ST_TO_ADDR
34696: GO 34929
34698: LD_INT 3
34700: DOUBLE
34701: EQUAL
34702: IFTRUE 34706
34704: GO 34928
34706: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34707: LD_ADDR_VAR 0 4
34711: PUSH
34712: LD_INT 46
34714: PUSH
34715: LD_INT 47
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 82
34726: PUSH
34727: LD_INT 83
34729: PUSH
34730: LD_INT 84
34732: PUSH
34733: LD_INT 85
34735: PUSH
34736: LD_INT 86
34738: PUSH
34739: LD_INT 11
34741: PUSH
34742: LD_INT 9
34744: PUSH
34745: LD_INT 20
34747: PUSH
34748: LD_INT 19
34750: PUSH
34751: LD_INT 21
34753: PUSH
34754: LD_INT 24
34756: PUSH
34757: LD_INT 22
34759: PUSH
34760: LD_INT 25
34762: PUSH
34763: LD_INT 28
34765: PUSH
34766: LD_INT 29
34768: PUSH
34769: LD_INT 30
34771: PUSH
34772: LD_INT 31
34774: PUSH
34775: LD_INT 37
34777: PUSH
34778: LD_INT 38
34780: PUSH
34781: LD_INT 32
34783: PUSH
34784: LD_INT 27
34786: PUSH
34787: LD_INT 33
34789: PUSH
34790: LD_INT 69
34792: PUSH
34793: LD_INT 39
34795: PUSH
34796: LD_INT 34
34798: PUSH
34799: LD_INT 40
34801: PUSH
34802: LD_INT 71
34804: PUSH
34805: LD_INT 23
34807: PUSH
34808: LD_INT 44
34810: PUSH
34811: LD_INT 48
34813: PUSH
34814: LD_INT 49
34816: PUSH
34817: LD_INT 50
34819: PUSH
34820: LD_INT 51
34822: PUSH
34823: LD_INT 52
34825: PUSH
34826: LD_INT 53
34828: PUSH
34829: LD_INT 54
34831: PUSH
34832: LD_INT 55
34834: PUSH
34835: LD_INT 56
34837: PUSH
34838: LD_INT 57
34840: PUSH
34841: LD_INT 58
34843: PUSH
34844: LD_INT 59
34846: PUSH
34847: LD_INT 63
34849: PUSH
34850: LD_INT 64
34852: PUSH
34853: LD_INT 65
34855: PUSH
34856: LD_INT 82
34858: PUSH
34859: LD_INT 83
34861: PUSH
34862: LD_INT 84
34864: PUSH
34865: LD_INT 85
34867: PUSH
34868: LD_INT 86
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
34926: GO 34929
34928: POP
// if state > - 1 and state < 3 then
34929: LD_VAR 0 3
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: GREATER
34938: PUSH
34939: LD_VAR 0 3
34943: PUSH
34944: LD_INT 3
34946: LESS
34947: AND
34948: IFFALSE 35005
// for i in result do
34950: LD_ADDR_VAR 0 5
34954: PUSH
34955: LD_VAR 0 4
34959: PUSH
34960: FOR_IN
34961: IFFALSE 35003
// if GetTech ( i , side ) <> state then
34963: LD_VAR 0 5
34967: PPUSH
34968: LD_VAR 0 1
34972: PPUSH
34973: CALL_OW 321
34977: PUSH
34978: LD_VAR 0 3
34982: NONEQUAL
34983: IFFALSE 35001
// result := result diff i ;
34985: LD_ADDR_VAR 0 4
34989: PUSH
34990: LD_VAR 0 4
34994: PUSH
34995: LD_VAR 0 5
34999: DIFF
35000: ST_TO_ADDR
35001: GO 34960
35003: POP
35004: POP
// end ;
35005: LD_VAR 0 4
35009: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35010: LD_INT 0
35012: PPUSH
35013: PPUSH
35014: PPUSH
// result := true ;
35015: LD_ADDR_VAR 0 3
35019: PUSH
35020: LD_INT 1
35022: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35023: LD_ADDR_VAR 0 5
35027: PUSH
35028: LD_VAR 0 2
35032: PPUSH
35033: CALL_OW 480
35037: ST_TO_ADDR
// if not tmp then
35038: LD_VAR 0 5
35042: NOT
35043: IFFALSE 35047
// exit ;
35045: GO 35096
// for i in tmp do
35047: LD_ADDR_VAR 0 4
35051: PUSH
35052: LD_VAR 0 5
35056: PUSH
35057: FOR_IN
35058: IFFALSE 35094
// if GetTech ( i , side ) <> state_researched then
35060: LD_VAR 0 4
35064: PPUSH
35065: LD_VAR 0 1
35069: PPUSH
35070: CALL_OW 321
35074: PUSH
35075: LD_INT 2
35077: NONEQUAL
35078: IFFALSE 35092
// begin result := false ;
35080: LD_ADDR_VAR 0 3
35084: PUSH
35085: LD_INT 0
35087: ST_TO_ADDR
// exit ;
35088: POP
35089: POP
35090: GO 35096
// end ;
35092: GO 35057
35094: POP
35095: POP
// end ;
35096: LD_VAR 0 3
35100: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35101: LD_INT 0
35103: PPUSH
35104: PPUSH
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35116: LD_VAR 0 1
35120: NOT
35121: PUSH
35122: LD_VAR 0 1
35126: PPUSH
35127: CALL_OW 257
35131: PUSH
35132: LD_INT 9
35134: NONEQUAL
35135: OR
35136: IFFALSE 35140
// exit ;
35138: GO 35713
// side := GetSide ( unit ) ;
35140: LD_ADDR_VAR 0 9
35144: PUSH
35145: LD_VAR 0 1
35149: PPUSH
35150: CALL_OW 255
35154: ST_TO_ADDR
// tech_space := tech_spacanom ;
35155: LD_ADDR_VAR 0 12
35159: PUSH
35160: LD_INT 29
35162: ST_TO_ADDR
// tech_time := tech_taurad ;
35163: LD_ADDR_VAR 0 13
35167: PUSH
35168: LD_INT 28
35170: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35171: LD_ADDR_VAR 0 11
35175: PUSH
35176: LD_VAR 0 1
35180: PPUSH
35181: CALL_OW 310
35185: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35186: LD_VAR 0 11
35190: PPUSH
35191: CALL_OW 247
35195: PUSH
35196: LD_INT 2
35198: EQUAL
35199: IFFALSE 35203
// exit ;
35201: GO 35713
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35203: LD_ADDR_VAR 0 8
35207: PUSH
35208: LD_INT 81
35210: PUSH
35211: LD_VAR 0 9
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 3
35222: PUSH
35223: LD_INT 21
35225: PUSH
35226: LD_INT 3
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PPUSH
35241: CALL_OW 69
35245: ST_TO_ADDR
// if not tmp then
35246: LD_VAR 0 8
35250: NOT
35251: IFFALSE 35255
// exit ;
35253: GO 35713
// if in_unit then
35255: LD_VAR 0 11
35259: IFFALSE 35283
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35261: LD_ADDR_VAR 0 10
35265: PUSH
35266: LD_VAR 0 8
35270: PPUSH
35271: LD_VAR 0 11
35275: PPUSH
35276: CALL_OW 74
35280: ST_TO_ADDR
35281: GO 35303
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35283: LD_ADDR_VAR 0 10
35287: PUSH
35288: LD_VAR 0 8
35292: PPUSH
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 74
35302: ST_TO_ADDR
// if not enemy then
35303: LD_VAR 0 10
35307: NOT
35308: IFFALSE 35312
// exit ;
35310: GO 35713
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35312: LD_VAR 0 11
35316: PUSH
35317: LD_VAR 0 11
35321: PPUSH
35322: LD_VAR 0 10
35326: PPUSH
35327: CALL_OW 296
35331: PUSH
35332: LD_INT 13
35334: GREATER
35335: AND
35336: PUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: LD_VAR 0 10
35346: PPUSH
35347: CALL_OW 296
35351: PUSH
35352: LD_INT 12
35354: GREATER
35355: OR
35356: IFFALSE 35360
// exit ;
35358: GO 35713
// missile := [ 1 ] ;
35360: LD_ADDR_VAR 0 14
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35371: LD_VAR 0 9
35375: PPUSH
35376: LD_VAR 0 12
35380: PPUSH
35381: CALL_OW 325
35385: IFFALSE 35414
// missile := Replace ( missile , missile + 1 , 2 ) ;
35387: LD_ADDR_VAR 0 14
35391: PUSH
35392: LD_VAR 0 14
35396: PPUSH
35397: LD_VAR 0 14
35401: PUSH
35402: LD_INT 1
35404: PLUS
35405: PPUSH
35406: LD_INT 2
35408: PPUSH
35409: CALL_OW 1
35413: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35414: LD_VAR 0 9
35418: PPUSH
35419: LD_VAR 0 13
35423: PPUSH
35424: CALL_OW 325
35428: PUSH
35429: LD_VAR 0 10
35433: PPUSH
35434: CALL_OW 255
35438: PPUSH
35439: LD_VAR 0 13
35443: PPUSH
35444: CALL_OW 325
35448: NOT
35449: AND
35450: IFFALSE 35479
// missile := Replace ( missile , missile + 1 , 3 ) ;
35452: LD_ADDR_VAR 0 14
35456: PUSH
35457: LD_VAR 0 14
35461: PPUSH
35462: LD_VAR 0 14
35466: PUSH
35467: LD_INT 1
35469: PLUS
35470: PPUSH
35471: LD_INT 3
35473: PPUSH
35474: CALL_OW 1
35478: ST_TO_ADDR
// if missile < 2 then
35479: LD_VAR 0 14
35483: PUSH
35484: LD_INT 2
35486: LESS
35487: IFFALSE 35491
// exit ;
35489: GO 35713
// x := GetX ( enemy ) ;
35491: LD_ADDR_VAR 0 4
35495: PUSH
35496: LD_VAR 0 10
35500: PPUSH
35501: CALL_OW 250
35505: ST_TO_ADDR
// y := GetY ( enemy ) ;
35506: LD_ADDR_VAR 0 5
35510: PUSH
35511: LD_VAR 0 10
35515: PPUSH
35516: CALL_OW 251
35520: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35521: LD_ADDR_VAR 0 6
35525: PUSH
35526: LD_VAR 0 4
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PPUSH
35535: LD_INT 1
35537: PPUSH
35538: CALL_OW 12
35542: PLUS
35543: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35544: LD_ADDR_VAR 0 7
35548: PUSH
35549: LD_VAR 0 5
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PPUSH
35558: LD_INT 1
35560: PPUSH
35561: CALL_OW 12
35565: PLUS
35566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35567: LD_VAR 0 6
35571: PPUSH
35572: LD_VAR 0 7
35576: PPUSH
35577: CALL_OW 488
35581: NOT
35582: IFFALSE 35604
// begin _x := x ;
35584: LD_ADDR_VAR 0 6
35588: PUSH
35589: LD_VAR 0 4
35593: ST_TO_ADDR
// _y := y ;
35594: LD_ADDR_VAR 0 7
35598: PUSH
35599: LD_VAR 0 5
35603: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35604: LD_ADDR_VAR 0 3
35608: PUSH
35609: LD_INT 1
35611: PPUSH
35612: LD_VAR 0 14
35616: PPUSH
35617: CALL_OW 12
35621: ST_TO_ADDR
// case i of 1 :
35622: LD_VAR 0 3
35626: PUSH
35627: LD_INT 1
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35635
35633: GO 35652
35635: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35636: LD_VAR 0 1
35640: PPUSH
35641: LD_VAR 0 10
35645: PPUSH
35646: CALL_OW 115
35650: GO 35713
35652: LD_INT 2
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35660
35658: GO 35682
35660: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35661: LD_VAR 0 1
35665: PPUSH
35666: LD_VAR 0 6
35670: PPUSH
35671: LD_VAR 0 7
35675: PPUSH
35676: CALL_OW 153
35680: GO 35713
35682: LD_INT 3
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35690
35688: GO 35712
35690: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35691: LD_VAR 0 1
35695: PPUSH
35696: LD_VAR 0 6
35700: PPUSH
35701: LD_VAR 0 7
35705: PPUSH
35706: CALL_OW 154
35710: GO 35713
35712: POP
// end ;
35713: LD_VAR 0 2
35717: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35718: LD_INT 0
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
// if not unit or not building then
35726: LD_VAR 0 1
35730: NOT
35731: PUSH
35732: LD_VAR 0 2
35736: NOT
35737: OR
35738: IFFALSE 35742
// exit ;
35740: GO 35900
// x := GetX ( building ) ;
35742: LD_ADDR_VAR 0 5
35746: PUSH
35747: LD_VAR 0 2
35751: PPUSH
35752: CALL_OW 250
35756: ST_TO_ADDR
// y := GetY ( building ) ;
35757: LD_ADDR_VAR 0 6
35761: PUSH
35762: LD_VAR 0 2
35766: PPUSH
35767: CALL_OW 251
35771: ST_TO_ADDR
// for i = 0 to 5 do
35772: LD_ADDR_VAR 0 4
35776: PUSH
35777: DOUBLE
35778: LD_INT 0
35780: DEC
35781: ST_TO_ADDR
35782: LD_INT 5
35784: PUSH
35785: FOR_TO
35786: IFFALSE 35898
// begin _x := ShiftX ( x , i , 3 ) ;
35788: LD_ADDR_VAR 0 7
35792: PUSH
35793: LD_VAR 0 5
35797: PPUSH
35798: LD_VAR 0 4
35802: PPUSH
35803: LD_INT 3
35805: PPUSH
35806: CALL_OW 272
35810: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35811: LD_ADDR_VAR 0 8
35815: PUSH
35816: LD_VAR 0 6
35820: PPUSH
35821: LD_VAR 0 4
35825: PPUSH
35826: LD_INT 3
35828: PPUSH
35829: CALL_OW 273
35833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35834: LD_VAR 0 7
35838: PPUSH
35839: LD_VAR 0 8
35843: PPUSH
35844: CALL_OW 488
35848: NOT
35849: IFFALSE 35853
// continue ;
35851: GO 35785
// if HexInfo ( _x , _y ) = 0 then
35853: LD_VAR 0 7
35857: PPUSH
35858: LD_VAR 0 8
35862: PPUSH
35863: CALL_OW 428
35867: PUSH
35868: LD_INT 0
35870: EQUAL
35871: IFFALSE 35896
// begin ComMoveXY ( unit , _x , _y ) ;
35873: LD_VAR 0 1
35877: PPUSH
35878: LD_VAR 0 7
35882: PPUSH
35883: LD_VAR 0 8
35887: PPUSH
35888: CALL_OW 111
// exit ;
35892: POP
35893: POP
35894: GO 35900
// end ; end ;
35896: GO 35785
35898: POP
35899: POP
// end ;
35900: LD_VAR 0 3
35904: RET
// export function ScanBase ( side , base_area ) ; begin
35905: LD_INT 0
35907: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35908: LD_ADDR_VAR 0 3
35912: PUSH
35913: LD_VAR 0 2
35917: PPUSH
35918: LD_INT 81
35920: PUSH
35921: LD_VAR 0 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PPUSH
35930: CALL_OW 70
35934: ST_TO_ADDR
// end ;
35935: LD_VAR 0 3
35939: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35940: LD_INT 0
35942: PPUSH
35943: PPUSH
35944: PPUSH
35945: PPUSH
// result := false ;
35946: LD_ADDR_VAR 0 2
35950: PUSH
35951: LD_INT 0
35953: ST_TO_ADDR
// side := GetSide ( unit ) ;
35954: LD_ADDR_VAR 0 3
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 255
35968: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35969: LD_ADDR_VAR 0 4
35973: PUSH
35974: LD_VAR 0 1
35978: PPUSH
35979: CALL_OW 248
35983: ST_TO_ADDR
// case nat of 1 :
35984: LD_VAR 0 4
35988: PUSH
35989: LD_INT 1
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 35997
35995: GO 36008
35997: POP
// tech := tech_lassight ; 2 :
35998: LD_ADDR_VAR 0 5
36002: PUSH
36003: LD_INT 12
36005: ST_TO_ADDR
36006: GO 36047
36008: LD_INT 2
36010: DOUBLE
36011: EQUAL
36012: IFTRUE 36016
36014: GO 36027
36016: POP
// tech := tech_mortar ; 3 :
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: LD_INT 41
36024: ST_TO_ADDR
36025: GO 36047
36027: LD_INT 3
36029: DOUBLE
36030: EQUAL
36031: IFTRUE 36035
36033: GO 36046
36035: POP
// tech := tech_bazooka ; end ;
36036: LD_ADDR_VAR 0 5
36040: PUSH
36041: LD_INT 44
36043: ST_TO_ADDR
36044: GO 36047
36046: POP
// if Researched ( side , tech ) then
36047: LD_VAR 0 3
36051: PPUSH
36052: LD_VAR 0 5
36056: PPUSH
36057: CALL_OW 325
36061: IFFALSE 36088
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36063: LD_ADDR_VAR 0 2
36067: PUSH
36068: LD_INT 5
36070: PUSH
36071: LD_INT 8
36073: PUSH
36074: LD_INT 9
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: LIST
36081: PUSH
36082: LD_VAR 0 4
36086: ARRAY
36087: ST_TO_ADDR
// end ;
36088: LD_VAR 0 2
36092: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36093: LD_INT 0
36095: PPUSH
36096: PPUSH
36097: PPUSH
// if not mines then
36098: LD_VAR 0 2
36102: NOT
36103: IFFALSE 36107
// exit ;
36105: GO 36251
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36107: LD_ADDR_VAR 0 5
36111: PUSH
36112: LD_INT 81
36114: PUSH
36115: LD_VAR 0 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: LD_INT 21
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PPUSH
36145: CALL_OW 69
36149: ST_TO_ADDR
// for i in mines do
36150: LD_ADDR_VAR 0 4
36154: PUSH
36155: LD_VAR 0 2
36159: PUSH
36160: FOR_IN
36161: IFFALSE 36249
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36163: LD_VAR 0 4
36167: PUSH
36168: LD_INT 1
36170: ARRAY
36171: PPUSH
36172: LD_VAR 0 4
36176: PUSH
36177: LD_INT 2
36179: ARRAY
36180: PPUSH
36181: CALL_OW 458
36185: NOT
36186: IFFALSE 36190
// continue ;
36188: GO 36160
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36190: LD_VAR 0 4
36194: PUSH
36195: LD_INT 1
36197: ARRAY
36198: PPUSH
36199: LD_VAR 0 4
36203: PUSH
36204: LD_INT 2
36206: ARRAY
36207: PPUSH
36208: CALL_OW 428
36212: PUSH
36213: LD_VAR 0 5
36217: IN
36218: IFFALSE 36247
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36220: LD_VAR 0 4
36224: PUSH
36225: LD_INT 1
36227: ARRAY
36228: PPUSH
36229: LD_VAR 0 4
36233: PUSH
36234: LD_INT 2
36236: ARRAY
36237: PPUSH
36238: LD_VAR 0 1
36242: PPUSH
36243: CALL_OW 456
// end ;
36247: GO 36160
36249: POP
36250: POP
// end ;
36251: LD_VAR 0 3
36255: RET
// export function Count ( array ) ; var i ; begin
36256: LD_INT 0
36258: PPUSH
36259: PPUSH
// result := 0 ;
36260: LD_ADDR_VAR 0 2
36264: PUSH
36265: LD_INT 0
36267: ST_TO_ADDR
// for i in array do
36268: LD_ADDR_VAR 0 3
36272: PUSH
36273: LD_VAR 0 1
36277: PUSH
36278: FOR_IN
36279: IFFALSE 36303
// if i then
36281: LD_VAR 0 3
36285: IFFALSE 36301
// result := result + 1 ;
36287: LD_ADDR_VAR 0 2
36291: PUSH
36292: LD_VAR 0 2
36296: PUSH
36297: LD_INT 1
36299: PLUS
36300: ST_TO_ADDR
36301: GO 36278
36303: POP
36304: POP
// end ;
36305: LD_VAR 0 2
36309: RET
// export function IsEmpty ( building ) ; begin
36310: LD_INT 0
36312: PPUSH
// if not building then
36313: LD_VAR 0 1
36317: NOT
36318: IFFALSE 36322
// exit ;
36320: GO 36365
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36322: LD_ADDR_VAR 0 2
36326: PUSH
36327: LD_VAR 0 1
36331: PUSH
36332: LD_INT 22
36334: PUSH
36335: LD_VAR 0 1
36339: PPUSH
36340: CALL_OW 255
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 58
36351: PUSH
36352: EMPTY
36353: LIST
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PPUSH
36359: CALL_OW 69
36363: IN
36364: ST_TO_ADDR
// end ;
36365: LD_VAR 0 2
36369: RET
// export function IsNotFull ( building ) ; begin
36370: LD_INT 0
36372: PPUSH
// if not building then
36373: LD_VAR 0 1
36377: NOT
36378: IFFALSE 36382
// exit ;
36380: GO 36401
// result := UnitsInside ( building ) < 6 ;
36382: LD_ADDR_VAR 0 2
36386: PUSH
36387: LD_VAR 0 1
36391: PPUSH
36392: CALL_OW 313
36396: PUSH
36397: LD_INT 6
36399: LESS
36400: ST_TO_ADDR
// end ;
36401: LD_VAR 0 2
36405: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36406: LD_INT 0
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
// tmp := [ ] ;
36412: LD_ADDR_VAR 0 3
36416: PUSH
36417: EMPTY
36418: ST_TO_ADDR
// list := [ ] ;
36419: LD_ADDR_VAR 0 5
36423: PUSH
36424: EMPTY
36425: ST_TO_ADDR
// for i = 16 to 25 do
36426: LD_ADDR_VAR 0 4
36430: PUSH
36431: DOUBLE
36432: LD_INT 16
36434: DEC
36435: ST_TO_ADDR
36436: LD_INT 25
36438: PUSH
36439: FOR_TO
36440: IFFALSE 36513
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36442: LD_ADDR_VAR 0 3
36446: PUSH
36447: LD_VAR 0 3
36451: PUSH
36452: LD_INT 22
36454: PUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: CALL_OW 255
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 91
36471: PUSH
36472: LD_VAR 0 1
36476: PUSH
36477: LD_INT 6
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 30
36487: PUSH
36488: LD_VAR 0 4
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: PPUSH
36505: CALL_OW 69
36509: ADD
36510: ST_TO_ADDR
36511: GO 36439
36513: POP
36514: POP
// for i = 1 to tmp do
36515: LD_ADDR_VAR 0 4
36519: PUSH
36520: DOUBLE
36521: LD_INT 1
36523: DEC
36524: ST_TO_ADDR
36525: LD_VAR 0 3
36529: PUSH
36530: FOR_TO
36531: IFFALSE 36619
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36533: LD_ADDR_VAR 0 5
36537: PUSH
36538: LD_VAR 0 5
36542: PUSH
36543: LD_VAR 0 3
36547: PUSH
36548: LD_VAR 0 4
36552: ARRAY
36553: PPUSH
36554: CALL_OW 266
36558: PUSH
36559: LD_VAR 0 3
36563: PUSH
36564: LD_VAR 0 4
36568: ARRAY
36569: PPUSH
36570: CALL_OW 250
36574: PUSH
36575: LD_VAR 0 3
36579: PUSH
36580: LD_VAR 0 4
36584: ARRAY
36585: PPUSH
36586: CALL_OW 251
36590: PUSH
36591: LD_VAR 0 3
36595: PUSH
36596: LD_VAR 0 4
36600: ARRAY
36601: PPUSH
36602: CALL_OW 254
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: PUSH
36613: EMPTY
36614: LIST
36615: ADD
36616: ST_TO_ADDR
36617: GO 36530
36619: POP
36620: POP
// result := list ;
36621: LD_ADDR_VAR 0 2
36625: PUSH
36626: LD_VAR 0 5
36630: ST_TO_ADDR
// end ;
36631: LD_VAR 0 2
36635: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36636: LD_INT 0
36638: PPUSH
36639: PPUSH
36640: PPUSH
36641: PPUSH
36642: PPUSH
36643: PPUSH
36644: PPUSH
// if not factory then
36645: LD_VAR 0 1
36649: NOT
36650: IFFALSE 36654
// exit ;
36652: GO 37247
// if control = control_apeman then
36654: LD_VAR 0 4
36658: PUSH
36659: LD_INT 5
36661: EQUAL
36662: IFFALSE 36771
// begin tmp := UnitsInside ( factory ) ;
36664: LD_ADDR_VAR 0 8
36668: PUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 313
36678: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36679: LD_VAR 0 8
36683: PPUSH
36684: LD_INT 25
36686: PUSH
36687: LD_INT 12
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PPUSH
36694: CALL_OW 72
36698: NOT
36699: IFFALSE 36709
// control := control_manual ;
36701: LD_ADDR_VAR 0 4
36705: PUSH
36706: LD_INT 1
36708: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36709: LD_ADDR_VAR 0 8
36713: PUSH
36714: LD_VAR 0 1
36718: PPUSH
36719: CALL 36406 0 1
36723: ST_TO_ADDR
// if tmp then
36724: LD_VAR 0 8
36728: IFFALSE 36771
// begin for i in tmp do
36730: LD_ADDR_VAR 0 7
36734: PUSH
36735: LD_VAR 0 8
36739: PUSH
36740: FOR_IN
36741: IFFALSE 36769
// if i [ 1 ] = b_ext_radio then
36743: LD_VAR 0 7
36747: PUSH
36748: LD_INT 1
36750: ARRAY
36751: PUSH
36752: LD_INT 22
36754: EQUAL
36755: IFFALSE 36767
// begin control := control_remote ;
36757: LD_ADDR_VAR 0 4
36761: PUSH
36762: LD_INT 2
36764: ST_TO_ADDR
// break ;
36765: GO 36769
// end ;
36767: GO 36740
36769: POP
36770: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36771: LD_VAR 0 1
36775: PPUSH
36776: LD_VAR 0 2
36780: PPUSH
36781: LD_VAR 0 3
36785: PPUSH
36786: LD_VAR 0 4
36790: PPUSH
36791: LD_VAR 0 5
36795: PPUSH
36796: CALL_OW 448
36800: IFFALSE 36835
// begin result := [ chassis , engine , control , weapon ] ;
36802: LD_ADDR_VAR 0 6
36806: PUSH
36807: LD_VAR 0 2
36811: PUSH
36812: LD_VAR 0 3
36816: PUSH
36817: LD_VAR 0 4
36821: PUSH
36822: LD_VAR 0 5
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
// exit ;
36833: GO 37247
// end ; _chassis := AvailableChassisList ( factory ) ;
36835: LD_ADDR_VAR 0 9
36839: PUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 475
36849: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36850: LD_ADDR_VAR 0 11
36854: PUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL_OW 476
36864: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36865: LD_ADDR_VAR 0 12
36869: PUSH
36870: LD_VAR 0 1
36874: PPUSH
36875: CALL_OW 477
36879: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36880: LD_ADDR_VAR 0 10
36884: PUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: CALL_OW 478
36894: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36895: LD_VAR 0 9
36899: NOT
36900: PUSH
36901: LD_VAR 0 11
36905: NOT
36906: OR
36907: PUSH
36908: LD_VAR 0 12
36912: NOT
36913: OR
36914: PUSH
36915: LD_VAR 0 10
36919: NOT
36920: OR
36921: IFFALSE 36956
// begin result := [ chassis , engine , control , weapon ] ;
36923: LD_ADDR_VAR 0 6
36927: PUSH
36928: LD_VAR 0 2
36932: PUSH
36933: LD_VAR 0 3
36937: PUSH
36938: LD_VAR 0 4
36942: PUSH
36943: LD_VAR 0 5
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
// exit ;
36954: GO 37247
// end ; if not chassis in _chassis then
36956: LD_VAR 0 2
36960: PUSH
36961: LD_VAR 0 9
36965: IN
36966: NOT
36967: IFFALSE 36993
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36969: LD_ADDR_VAR 0 2
36973: PUSH
36974: LD_VAR 0 9
36978: PUSH
36979: LD_INT 1
36981: PPUSH
36982: LD_VAR 0 9
36986: PPUSH
36987: CALL_OW 12
36991: ARRAY
36992: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36993: LD_VAR 0 2
36997: PPUSH
36998: LD_VAR 0 3
37002: PPUSH
37003: CALL 37252 0 2
37007: NOT
37008: IFFALSE 37067
// repeat engine := _engine [ 1 ] ;
37010: LD_ADDR_VAR 0 3
37014: PUSH
37015: LD_VAR 0 11
37019: PUSH
37020: LD_INT 1
37022: ARRAY
37023: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37024: LD_ADDR_VAR 0 11
37028: PUSH
37029: LD_VAR 0 11
37033: PPUSH
37034: LD_INT 1
37036: PPUSH
37037: CALL_OW 3
37041: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37042: LD_VAR 0 2
37046: PPUSH
37047: LD_VAR 0 3
37051: PPUSH
37052: CALL 37252 0 2
37056: PUSH
37057: LD_VAR 0 11
37061: PUSH
37062: EMPTY
37063: EQUAL
37064: OR
37065: IFFALSE 37010
// if not control in _control then
37067: LD_VAR 0 4
37071: PUSH
37072: LD_VAR 0 12
37076: IN
37077: NOT
37078: IFFALSE 37104
// control := _control [ rand ( 1 , _control ) ] ;
37080: LD_ADDR_VAR 0 4
37084: PUSH
37085: LD_VAR 0 12
37089: PUSH
37090: LD_INT 1
37092: PPUSH
37093: LD_VAR 0 12
37097: PPUSH
37098: CALL_OW 12
37102: ARRAY
37103: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37104: LD_VAR 0 2
37108: PPUSH
37109: LD_VAR 0 5
37113: PPUSH
37114: CALL 37472 0 2
37118: NOT
37119: IFFALSE 37178
// repeat weapon := _weapon [ 1 ] ;
37121: LD_ADDR_VAR 0 5
37125: PUSH
37126: LD_VAR 0 10
37130: PUSH
37131: LD_INT 1
37133: ARRAY
37134: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37135: LD_ADDR_VAR 0 10
37139: PUSH
37140: LD_VAR 0 10
37144: PPUSH
37145: LD_INT 1
37147: PPUSH
37148: CALL_OW 3
37152: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37153: LD_VAR 0 2
37157: PPUSH
37158: LD_VAR 0 5
37162: PPUSH
37163: CALL 37472 0 2
37167: PUSH
37168: LD_VAR 0 10
37172: PUSH
37173: EMPTY
37174: EQUAL
37175: OR
37176: IFFALSE 37121
// result := [ ] ;
37178: LD_ADDR_VAR 0 6
37182: PUSH
37183: EMPTY
37184: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37185: LD_VAR 0 1
37189: PPUSH
37190: LD_VAR 0 2
37194: PPUSH
37195: LD_VAR 0 3
37199: PPUSH
37200: LD_VAR 0 4
37204: PPUSH
37205: LD_VAR 0 5
37209: PPUSH
37210: CALL_OW 448
37214: IFFALSE 37247
// result := [ chassis , engine , control , weapon ] ;
37216: LD_ADDR_VAR 0 6
37220: PUSH
37221: LD_VAR 0 2
37225: PUSH
37226: LD_VAR 0 3
37230: PUSH
37231: LD_VAR 0 4
37235: PUSH
37236: LD_VAR 0 5
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// end ;
37247: LD_VAR 0 6
37251: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37252: LD_INT 0
37254: PPUSH
// if not chassis or not engine then
37255: LD_VAR 0 1
37259: NOT
37260: PUSH
37261: LD_VAR 0 2
37265: NOT
37266: OR
37267: IFFALSE 37271
// exit ;
37269: GO 37467
// case engine of engine_solar :
37271: LD_VAR 0 2
37275: PUSH
37276: LD_INT 2
37278: DOUBLE
37279: EQUAL
37280: IFTRUE 37284
37282: GO 37322
37284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37285: LD_ADDR_VAR 0 3
37289: PUSH
37290: LD_INT 11
37292: PUSH
37293: LD_INT 12
37295: PUSH
37296: LD_INT 13
37298: PUSH
37299: LD_INT 14
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 2
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
37320: GO 37451
37322: LD_INT 1
37324: DOUBLE
37325: EQUAL
37326: IFTRUE 37330
37328: GO 37392
37330: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37331: LD_ADDR_VAR 0 3
37335: PUSH
37336: LD_INT 11
37338: PUSH
37339: LD_INT 12
37341: PUSH
37342: LD_INT 13
37344: PUSH
37345: LD_INT 14
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: LD_INT 4
37359: PUSH
37360: LD_INT 5
37362: PUSH
37363: LD_INT 21
37365: PUSH
37366: LD_INT 23
37368: PUSH
37369: LD_INT 22
37371: PUSH
37372: LD_INT 24
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: ST_TO_ADDR
37390: GO 37451
37392: LD_INT 3
37394: DOUBLE
37395: EQUAL
37396: IFTRUE 37400
37398: GO 37450
37400: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37401: LD_ADDR_VAR 0 3
37405: PUSH
37406: LD_INT 13
37408: PUSH
37409: LD_INT 14
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 3
37417: PUSH
37418: LD_INT 4
37420: PUSH
37421: LD_INT 5
37423: PUSH
37424: LD_INT 21
37426: PUSH
37427: LD_INT 22
37429: PUSH
37430: LD_INT 23
37432: PUSH
37433: LD_INT 24
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
37448: GO 37451
37450: POP
// result := ( chassis in result ) ;
37451: LD_ADDR_VAR 0 3
37455: PUSH
37456: LD_VAR 0 1
37460: PUSH
37461: LD_VAR 0 3
37465: IN
37466: ST_TO_ADDR
// end ;
37467: LD_VAR 0 3
37471: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37472: LD_INT 0
37474: PPUSH
// if not chassis or not weapon then
37475: LD_VAR 0 1
37479: NOT
37480: PUSH
37481: LD_VAR 0 2
37485: NOT
37486: OR
37487: IFFALSE 37491
// exit ;
37489: GO 38553
// case weapon of us_machine_gun :
37491: LD_VAR 0 2
37495: PUSH
37496: LD_INT 2
37498: DOUBLE
37499: EQUAL
37500: IFTRUE 37504
37502: GO 37534
37504: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37505: LD_ADDR_VAR 0 3
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 3
37518: PUSH
37519: LD_INT 4
37521: PUSH
37522: LD_INT 5
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: ST_TO_ADDR
37532: GO 38537
37534: LD_INT 3
37536: DOUBLE
37537: EQUAL
37538: IFTRUE 37542
37540: GO 37572
37542: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37543: LD_ADDR_VAR 0 3
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 2
37553: PUSH
37554: LD_INT 3
37556: PUSH
37557: LD_INT 4
37559: PUSH
37560: LD_INT 5
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: ST_TO_ADDR
37570: GO 38537
37572: LD_INT 11
37574: DOUBLE
37575: EQUAL
37576: IFTRUE 37580
37578: GO 37610
37580: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: LD_INT 1
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: LD_INT 4
37597: PUSH
37598: LD_INT 5
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: ST_TO_ADDR
37608: GO 38537
37610: LD_INT 4
37612: DOUBLE
37613: EQUAL
37614: IFTRUE 37618
37616: GO 37644
37618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37619: LD_ADDR_VAR 0 3
37623: PUSH
37624: LD_INT 2
37626: PUSH
37627: LD_INT 3
37629: PUSH
37630: LD_INT 4
37632: PUSH
37633: LD_INT 5
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: ST_TO_ADDR
37642: GO 38537
37644: LD_INT 5
37646: DOUBLE
37647: EQUAL
37648: IFTRUE 37652
37650: GO 37678
37652: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37653: LD_ADDR_VAR 0 3
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: LD_INT 3
37663: PUSH
37664: LD_INT 4
37666: PUSH
37667: LD_INT 5
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
37676: GO 38537
37678: LD_INT 9
37680: DOUBLE
37681: EQUAL
37682: IFTRUE 37686
37684: GO 37712
37686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37687: LD_ADDR_VAR 0 3
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 3
37697: PUSH
37698: LD_INT 4
37700: PUSH
37701: LD_INT 5
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: ST_TO_ADDR
37710: GO 38537
37712: LD_INT 7
37714: DOUBLE
37715: EQUAL
37716: IFTRUE 37720
37718: GO 37746
37720: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37721: LD_ADDR_VAR 0 3
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: LD_INT 3
37731: PUSH
37732: LD_INT 4
37734: PUSH
37735: LD_INT 5
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
37744: GO 38537
37746: LD_INT 12
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37754
37752: GO 37780
37754: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: LD_INT 3
37765: PUSH
37766: LD_INT 4
37768: PUSH
37769: LD_INT 5
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: ST_TO_ADDR
37778: GO 38537
37780: LD_INT 13
37782: DOUBLE
37783: EQUAL
37784: IFTRUE 37788
37786: GO 37814
37788: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37789: LD_ADDR_VAR 0 3
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: LD_INT 3
37799: PUSH
37800: LD_INT 4
37802: PUSH
37803: LD_INT 5
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: ST_TO_ADDR
37812: GO 38537
37814: LD_INT 14
37816: DOUBLE
37817: EQUAL
37818: IFTRUE 37822
37820: GO 37840
37822: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37823: LD_ADDR_VAR 0 3
37827: PUSH
37828: LD_INT 4
37830: PUSH
37831: LD_INT 5
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: ST_TO_ADDR
37838: GO 38537
37840: LD_INT 6
37842: DOUBLE
37843: EQUAL
37844: IFTRUE 37848
37846: GO 37866
37848: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37849: LD_ADDR_VAR 0 3
37853: PUSH
37854: LD_INT 4
37856: PUSH
37857: LD_INT 5
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: ST_TO_ADDR
37864: GO 38537
37866: LD_INT 10
37868: DOUBLE
37869: EQUAL
37870: IFTRUE 37874
37872: GO 37892
37874: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37875: LD_ADDR_VAR 0 3
37879: PUSH
37880: LD_INT 4
37882: PUSH
37883: LD_INT 5
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: ST_TO_ADDR
37890: GO 38537
37892: LD_INT 22
37894: DOUBLE
37895: EQUAL
37896: IFTRUE 37900
37898: GO 37926
37900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37901: LD_ADDR_VAR 0 3
37905: PUSH
37906: LD_INT 11
37908: PUSH
37909: LD_INT 12
37911: PUSH
37912: LD_INT 13
37914: PUSH
37915: LD_INT 14
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: ST_TO_ADDR
37924: GO 38537
37926: LD_INT 23
37928: DOUBLE
37929: EQUAL
37930: IFTRUE 37934
37932: GO 37960
37934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37935: LD_ADDR_VAR 0 3
37939: PUSH
37940: LD_INT 11
37942: PUSH
37943: LD_INT 12
37945: PUSH
37946: LD_INT 13
37948: PUSH
37949: LD_INT 14
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: ST_TO_ADDR
37958: GO 38537
37960: LD_INT 24
37962: DOUBLE
37963: EQUAL
37964: IFTRUE 37968
37966: GO 37994
37968: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37969: LD_ADDR_VAR 0 3
37973: PUSH
37974: LD_INT 11
37976: PUSH
37977: LD_INT 12
37979: PUSH
37980: LD_INT 13
37982: PUSH
37983: LD_INT 14
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
37992: GO 38537
37994: LD_INT 30
37996: DOUBLE
37997: EQUAL
37998: IFTRUE 38002
38000: GO 38028
38002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38003: LD_ADDR_VAR 0 3
38007: PUSH
38008: LD_INT 11
38010: PUSH
38011: LD_INT 12
38013: PUSH
38014: LD_INT 13
38016: PUSH
38017: LD_INT 14
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: ST_TO_ADDR
38026: GO 38537
38028: LD_INT 25
38030: DOUBLE
38031: EQUAL
38032: IFTRUE 38036
38034: GO 38054
38036: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38037: LD_ADDR_VAR 0 3
38041: PUSH
38042: LD_INT 13
38044: PUSH
38045: LD_INT 14
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: ST_TO_ADDR
38052: GO 38537
38054: LD_INT 27
38056: DOUBLE
38057: EQUAL
38058: IFTRUE 38062
38060: GO 38080
38062: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38063: LD_ADDR_VAR 0 3
38067: PUSH
38068: LD_INT 13
38070: PUSH
38071: LD_INT 14
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: ST_TO_ADDR
38078: GO 38537
38080: LD_EXP 43
38084: DOUBLE
38085: EQUAL
38086: IFTRUE 38090
38088: GO 38116
38090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38091: LD_ADDR_VAR 0 3
38095: PUSH
38096: LD_INT 11
38098: PUSH
38099: LD_INT 12
38101: PUSH
38102: LD_INT 13
38104: PUSH
38105: LD_INT 14
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: ST_TO_ADDR
38114: GO 38537
38116: LD_INT 28
38118: DOUBLE
38119: EQUAL
38120: IFTRUE 38124
38122: GO 38142
38124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38125: LD_ADDR_VAR 0 3
38129: PUSH
38130: LD_INT 13
38132: PUSH
38133: LD_INT 14
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: ST_TO_ADDR
38140: GO 38537
38142: LD_INT 29
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38168
38150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38151: LD_ADDR_VAR 0 3
38155: PUSH
38156: LD_INT 13
38158: PUSH
38159: LD_INT 14
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: ST_TO_ADDR
38166: GO 38537
38168: LD_INT 31
38170: DOUBLE
38171: EQUAL
38172: IFTRUE 38176
38174: GO 38194
38176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38177: LD_ADDR_VAR 0 3
38181: PUSH
38182: LD_INT 13
38184: PUSH
38185: LD_INT 14
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: ST_TO_ADDR
38192: GO 38537
38194: LD_INT 26
38196: DOUBLE
38197: EQUAL
38198: IFTRUE 38202
38200: GO 38220
38202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38203: LD_ADDR_VAR 0 3
38207: PUSH
38208: LD_INT 13
38210: PUSH
38211: LD_INT 14
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: ST_TO_ADDR
38218: GO 38537
38220: LD_INT 42
38222: DOUBLE
38223: EQUAL
38224: IFTRUE 38228
38226: GO 38254
38228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38229: LD_ADDR_VAR 0 3
38233: PUSH
38234: LD_INT 21
38236: PUSH
38237: LD_INT 22
38239: PUSH
38240: LD_INT 23
38242: PUSH
38243: LD_INT 24
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: ST_TO_ADDR
38252: GO 38537
38254: LD_INT 43
38256: DOUBLE
38257: EQUAL
38258: IFTRUE 38262
38260: GO 38288
38262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_INT 21
38270: PUSH
38271: LD_INT 22
38273: PUSH
38274: LD_INT 23
38276: PUSH
38277: LD_INT 24
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
38286: GO 38537
38288: LD_INT 44
38290: DOUBLE
38291: EQUAL
38292: IFTRUE 38296
38294: GO 38322
38296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38297: LD_ADDR_VAR 0 3
38301: PUSH
38302: LD_INT 21
38304: PUSH
38305: LD_INT 22
38307: PUSH
38308: LD_INT 23
38310: PUSH
38311: LD_INT 24
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: ST_TO_ADDR
38320: GO 38537
38322: LD_INT 45
38324: DOUBLE
38325: EQUAL
38326: IFTRUE 38330
38328: GO 38356
38330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38331: LD_ADDR_VAR 0 3
38335: PUSH
38336: LD_INT 21
38338: PUSH
38339: LD_INT 22
38341: PUSH
38342: LD_INT 23
38344: PUSH
38345: LD_INT 24
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: ST_TO_ADDR
38354: GO 38537
38356: LD_INT 49
38358: DOUBLE
38359: EQUAL
38360: IFTRUE 38364
38362: GO 38390
38364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38365: LD_ADDR_VAR 0 3
38369: PUSH
38370: LD_INT 21
38372: PUSH
38373: LD_INT 22
38375: PUSH
38376: LD_INT 23
38378: PUSH
38379: LD_INT 24
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: ST_TO_ADDR
38388: GO 38537
38390: LD_INT 51
38392: DOUBLE
38393: EQUAL
38394: IFTRUE 38398
38396: GO 38424
38398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38399: LD_ADDR_VAR 0 3
38403: PUSH
38404: LD_INT 21
38406: PUSH
38407: LD_INT 22
38409: PUSH
38410: LD_INT 23
38412: PUSH
38413: LD_INT 24
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
38422: GO 38537
38424: LD_INT 52
38426: DOUBLE
38427: EQUAL
38428: IFTRUE 38432
38430: GO 38458
38432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38433: LD_ADDR_VAR 0 3
38437: PUSH
38438: LD_INT 21
38440: PUSH
38441: LD_INT 22
38443: PUSH
38444: LD_INT 23
38446: PUSH
38447: LD_INT 24
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: ST_TO_ADDR
38456: GO 38537
38458: LD_INT 53
38460: DOUBLE
38461: EQUAL
38462: IFTRUE 38466
38464: GO 38484
38466: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38467: LD_ADDR_VAR 0 3
38471: PUSH
38472: LD_INT 23
38474: PUSH
38475: LD_INT 24
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: ST_TO_ADDR
38482: GO 38537
38484: LD_INT 46
38486: DOUBLE
38487: EQUAL
38488: IFTRUE 38492
38490: GO 38510
38492: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38493: LD_ADDR_VAR 0 3
38497: PUSH
38498: LD_INT 23
38500: PUSH
38501: LD_INT 24
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: ST_TO_ADDR
38508: GO 38537
38510: LD_INT 47
38512: DOUBLE
38513: EQUAL
38514: IFTRUE 38518
38516: GO 38536
38518: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38519: LD_ADDR_VAR 0 3
38523: PUSH
38524: LD_INT 23
38526: PUSH
38527: LD_INT 24
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: ST_TO_ADDR
38534: GO 38537
38536: POP
// result := ( chassis in result ) ;
38537: LD_ADDR_VAR 0 3
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: LD_VAR 0 3
38551: IN
38552: ST_TO_ADDR
// end ;
38553: LD_VAR 0 3
38557: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38558: LD_INT 0
38560: PPUSH
38561: PPUSH
38562: PPUSH
38563: PPUSH
38564: PPUSH
38565: PPUSH
38566: PPUSH
// result := array ;
38567: LD_ADDR_VAR 0 5
38571: PUSH
38572: LD_VAR 0 1
38576: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38577: LD_VAR 0 1
38581: NOT
38582: PUSH
38583: LD_VAR 0 2
38587: NOT
38588: OR
38589: PUSH
38590: LD_VAR 0 3
38594: NOT
38595: OR
38596: PUSH
38597: LD_VAR 0 2
38601: PUSH
38602: LD_VAR 0 1
38606: GREATER
38607: OR
38608: PUSH
38609: LD_VAR 0 3
38613: PUSH
38614: LD_VAR 0 1
38618: GREATER
38619: OR
38620: IFFALSE 38624
// exit ;
38622: GO 38920
// if direction then
38624: LD_VAR 0 4
38628: IFFALSE 38692
// begin d := 1 ;
38630: LD_ADDR_VAR 0 9
38634: PUSH
38635: LD_INT 1
38637: ST_TO_ADDR
// if i_from > i_to then
38638: LD_VAR 0 2
38642: PUSH
38643: LD_VAR 0 3
38647: GREATER
38648: IFFALSE 38674
// length := ( array - i_from ) + i_to else
38650: LD_ADDR_VAR 0 11
38654: PUSH
38655: LD_VAR 0 1
38659: PUSH
38660: LD_VAR 0 2
38664: MINUS
38665: PUSH
38666: LD_VAR 0 3
38670: PLUS
38671: ST_TO_ADDR
38672: GO 38690
// length := i_to - i_from ;
38674: LD_ADDR_VAR 0 11
38678: PUSH
38679: LD_VAR 0 3
38683: PUSH
38684: LD_VAR 0 2
38688: MINUS
38689: ST_TO_ADDR
// end else
38690: GO 38753
// begin d := - 1 ;
38692: LD_ADDR_VAR 0 9
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: ST_TO_ADDR
// if i_from > i_to then
38701: LD_VAR 0 2
38705: PUSH
38706: LD_VAR 0 3
38710: GREATER
38711: IFFALSE 38731
// length := i_from - i_to else
38713: LD_ADDR_VAR 0 11
38717: PUSH
38718: LD_VAR 0 2
38722: PUSH
38723: LD_VAR 0 3
38727: MINUS
38728: ST_TO_ADDR
38729: GO 38753
// length := ( array - i_to ) + i_from ;
38731: LD_ADDR_VAR 0 11
38735: PUSH
38736: LD_VAR 0 1
38740: PUSH
38741: LD_VAR 0 3
38745: MINUS
38746: PUSH
38747: LD_VAR 0 2
38751: PLUS
38752: ST_TO_ADDR
// end ; if not length then
38753: LD_VAR 0 11
38757: NOT
38758: IFFALSE 38762
// exit ;
38760: GO 38920
// tmp := array ;
38762: LD_ADDR_VAR 0 10
38766: PUSH
38767: LD_VAR 0 1
38771: ST_TO_ADDR
// for i = 1 to length do
38772: LD_ADDR_VAR 0 6
38776: PUSH
38777: DOUBLE
38778: LD_INT 1
38780: DEC
38781: ST_TO_ADDR
38782: LD_VAR 0 11
38786: PUSH
38787: FOR_TO
38788: IFFALSE 38908
// begin for j = 1 to array do
38790: LD_ADDR_VAR 0 7
38794: PUSH
38795: DOUBLE
38796: LD_INT 1
38798: DEC
38799: ST_TO_ADDR
38800: LD_VAR 0 1
38804: PUSH
38805: FOR_TO
38806: IFFALSE 38894
// begin k := j + d ;
38808: LD_ADDR_VAR 0 8
38812: PUSH
38813: LD_VAR 0 7
38817: PUSH
38818: LD_VAR 0 9
38822: PLUS
38823: ST_TO_ADDR
// if k > array then
38824: LD_VAR 0 8
38828: PUSH
38829: LD_VAR 0 1
38833: GREATER
38834: IFFALSE 38844
// k := 1 ;
38836: LD_ADDR_VAR 0 8
38840: PUSH
38841: LD_INT 1
38843: ST_TO_ADDR
// if not k then
38844: LD_VAR 0 8
38848: NOT
38849: IFFALSE 38861
// k := array ;
38851: LD_ADDR_VAR 0 8
38855: PUSH
38856: LD_VAR 0 1
38860: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38861: LD_ADDR_VAR 0 10
38865: PUSH
38866: LD_VAR 0 10
38870: PPUSH
38871: LD_VAR 0 8
38875: PPUSH
38876: LD_VAR 0 1
38880: PUSH
38881: LD_VAR 0 7
38885: ARRAY
38886: PPUSH
38887: CALL_OW 1
38891: ST_TO_ADDR
// end ;
38892: GO 38805
38894: POP
38895: POP
// array := tmp ;
38896: LD_ADDR_VAR 0 1
38900: PUSH
38901: LD_VAR 0 10
38905: ST_TO_ADDR
// end ;
38906: GO 38787
38908: POP
38909: POP
// result := array ;
38910: LD_ADDR_VAR 0 5
38914: PUSH
38915: LD_VAR 0 1
38919: ST_TO_ADDR
// end ;
38920: LD_VAR 0 5
38924: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38925: LD_INT 0
38927: PPUSH
38928: PPUSH
// result := 0 ;
38929: LD_ADDR_VAR 0 3
38933: PUSH
38934: LD_INT 0
38936: ST_TO_ADDR
// if not array or not value in array then
38937: LD_VAR 0 1
38941: NOT
38942: PUSH
38943: LD_VAR 0 2
38947: PUSH
38948: LD_VAR 0 1
38952: IN
38953: NOT
38954: OR
38955: IFFALSE 38959
// exit ;
38957: GO 39013
// for i = 1 to array do
38959: LD_ADDR_VAR 0 4
38963: PUSH
38964: DOUBLE
38965: LD_INT 1
38967: DEC
38968: ST_TO_ADDR
38969: LD_VAR 0 1
38973: PUSH
38974: FOR_TO
38975: IFFALSE 39011
// if value = array [ i ] then
38977: LD_VAR 0 2
38981: PUSH
38982: LD_VAR 0 1
38986: PUSH
38987: LD_VAR 0 4
38991: ARRAY
38992: EQUAL
38993: IFFALSE 39009
// begin result := i ;
38995: LD_ADDR_VAR 0 3
38999: PUSH
39000: LD_VAR 0 4
39004: ST_TO_ADDR
// exit ;
39005: POP
39006: POP
39007: GO 39013
// end ;
39009: GO 38974
39011: POP
39012: POP
// end ;
39013: LD_VAR 0 3
39017: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39018: LD_INT 0
39020: PPUSH
// vc_chassis := chassis ;
39021: LD_ADDR_OWVAR 37
39025: PUSH
39026: LD_VAR 0 1
39030: ST_TO_ADDR
// vc_engine := engine ;
39031: LD_ADDR_OWVAR 39
39035: PUSH
39036: LD_VAR 0 2
39040: ST_TO_ADDR
// vc_control := control ;
39041: LD_ADDR_OWVAR 38
39045: PUSH
39046: LD_VAR 0 3
39050: ST_TO_ADDR
// vc_weapon := weapon ;
39051: LD_ADDR_OWVAR 40
39055: PUSH
39056: LD_VAR 0 4
39060: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39061: LD_ADDR_OWVAR 41
39065: PUSH
39066: LD_VAR 0 5
39070: ST_TO_ADDR
// end ;
39071: LD_VAR 0 6
39075: RET
// export function WantPlant ( unit ) ; var task ; begin
39076: LD_INT 0
39078: PPUSH
39079: PPUSH
// result := false ;
39080: LD_ADDR_VAR 0 2
39084: PUSH
39085: LD_INT 0
39087: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39088: LD_ADDR_VAR 0 3
39092: PUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 437
39102: ST_TO_ADDR
// if task then
39103: LD_VAR 0 3
39107: IFFALSE 39135
// if task [ 1 ] [ 1 ] = p then
39109: LD_VAR 0 3
39113: PUSH
39114: LD_INT 1
39116: ARRAY
39117: PUSH
39118: LD_INT 1
39120: ARRAY
39121: PUSH
39122: LD_STRING p
39124: EQUAL
39125: IFFALSE 39135
// result := true ;
39127: LD_ADDR_VAR 0 2
39131: PUSH
39132: LD_INT 1
39134: ST_TO_ADDR
// end ;
39135: LD_VAR 0 2
39139: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39140: LD_INT 0
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
// if pos < 1 then
39146: LD_VAR 0 2
39150: PUSH
39151: LD_INT 1
39153: LESS
39154: IFFALSE 39158
// exit ;
39156: GO 39461
// if pos = 1 then
39158: LD_VAR 0 2
39162: PUSH
39163: LD_INT 1
39165: EQUAL
39166: IFFALSE 39199
// result := Replace ( arr , pos [ 1 ] , value ) else
39168: LD_ADDR_VAR 0 4
39172: PUSH
39173: LD_VAR 0 1
39177: PPUSH
39178: LD_VAR 0 2
39182: PUSH
39183: LD_INT 1
39185: ARRAY
39186: PPUSH
39187: LD_VAR 0 3
39191: PPUSH
39192: CALL_OW 1
39196: ST_TO_ADDR
39197: GO 39461
// begin tmp := arr ;
39199: LD_ADDR_VAR 0 6
39203: PUSH
39204: LD_VAR 0 1
39208: ST_TO_ADDR
// s_arr := [ tmp ] ;
39209: LD_ADDR_VAR 0 7
39213: PUSH
39214: LD_VAR 0 6
39218: PUSH
39219: EMPTY
39220: LIST
39221: ST_TO_ADDR
// for i = 1 to pos - 1 do
39222: LD_ADDR_VAR 0 5
39226: PUSH
39227: DOUBLE
39228: LD_INT 1
39230: DEC
39231: ST_TO_ADDR
39232: LD_VAR 0 2
39236: PUSH
39237: LD_INT 1
39239: MINUS
39240: PUSH
39241: FOR_TO
39242: IFFALSE 39287
// begin tmp := tmp [ pos [ i ] ] ;
39244: LD_ADDR_VAR 0 6
39248: PUSH
39249: LD_VAR 0 6
39253: PUSH
39254: LD_VAR 0 2
39258: PUSH
39259: LD_VAR 0 5
39263: ARRAY
39264: ARRAY
39265: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39266: LD_ADDR_VAR 0 7
39270: PUSH
39271: LD_VAR 0 7
39275: PUSH
39276: LD_VAR 0 6
39280: PUSH
39281: EMPTY
39282: LIST
39283: ADD
39284: ST_TO_ADDR
// end ;
39285: GO 39241
39287: POP
39288: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39289: LD_ADDR_VAR 0 6
39293: PUSH
39294: LD_VAR 0 6
39298: PPUSH
39299: LD_VAR 0 2
39303: PUSH
39304: LD_VAR 0 2
39308: ARRAY
39309: PPUSH
39310: LD_VAR 0 3
39314: PPUSH
39315: CALL_OW 1
39319: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39320: LD_ADDR_VAR 0 7
39324: PUSH
39325: LD_VAR 0 7
39329: PPUSH
39330: LD_VAR 0 7
39334: PPUSH
39335: LD_VAR 0 6
39339: PPUSH
39340: CALL_OW 1
39344: ST_TO_ADDR
// for i = s_arr downto 2 do
39345: LD_ADDR_VAR 0 5
39349: PUSH
39350: DOUBLE
39351: LD_VAR 0 7
39355: INC
39356: ST_TO_ADDR
39357: LD_INT 2
39359: PUSH
39360: FOR_DOWNTO
39361: IFFALSE 39445
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39363: LD_ADDR_VAR 0 6
39367: PUSH
39368: LD_VAR 0 7
39372: PUSH
39373: LD_VAR 0 5
39377: PUSH
39378: LD_INT 1
39380: MINUS
39381: ARRAY
39382: PPUSH
39383: LD_VAR 0 2
39387: PUSH
39388: LD_VAR 0 5
39392: PUSH
39393: LD_INT 1
39395: MINUS
39396: ARRAY
39397: PPUSH
39398: LD_VAR 0 7
39402: PUSH
39403: LD_VAR 0 5
39407: ARRAY
39408: PPUSH
39409: CALL_OW 1
39413: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39414: LD_ADDR_VAR 0 7
39418: PUSH
39419: LD_VAR 0 7
39423: PPUSH
39424: LD_VAR 0 5
39428: PUSH
39429: LD_INT 1
39431: MINUS
39432: PPUSH
39433: LD_VAR 0 6
39437: PPUSH
39438: CALL_OW 1
39442: ST_TO_ADDR
// end ;
39443: GO 39360
39445: POP
39446: POP
// result := s_arr [ 1 ] ;
39447: LD_ADDR_VAR 0 4
39451: PUSH
39452: LD_VAR 0 7
39456: PUSH
39457: LD_INT 1
39459: ARRAY
39460: ST_TO_ADDR
// end ; end ;
39461: LD_VAR 0 4
39465: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39466: LD_INT 0
39468: PPUSH
39469: PPUSH
// if not list then
39470: LD_VAR 0 1
39474: NOT
39475: IFFALSE 39479
// exit ;
39477: GO 39570
// i := list [ pos1 ] ;
39479: LD_ADDR_VAR 0 5
39483: PUSH
39484: LD_VAR 0 1
39488: PUSH
39489: LD_VAR 0 2
39493: ARRAY
39494: ST_TO_ADDR
// if not i then
39495: LD_VAR 0 5
39499: NOT
39500: IFFALSE 39504
// exit ;
39502: GO 39570
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39504: LD_ADDR_VAR 0 1
39508: PUSH
39509: LD_VAR 0 1
39513: PPUSH
39514: LD_VAR 0 2
39518: PPUSH
39519: LD_VAR 0 1
39523: PUSH
39524: LD_VAR 0 3
39528: ARRAY
39529: PPUSH
39530: CALL_OW 1
39534: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39535: LD_ADDR_VAR 0 1
39539: PUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: LD_VAR 0 3
39549: PPUSH
39550: LD_VAR 0 5
39554: PPUSH
39555: CALL_OW 1
39559: ST_TO_ADDR
// result := list ;
39560: LD_ADDR_VAR 0 4
39564: PUSH
39565: LD_VAR 0 1
39569: ST_TO_ADDR
// end ;
39570: LD_VAR 0 4
39574: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39575: LD_INT 0
39577: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39578: LD_ADDR_VAR 0 5
39582: PUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 250
39592: PPUSH
39593: LD_VAR 0 1
39597: PPUSH
39598: CALL_OW 251
39602: PPUSH
39603: LD_VAR 0 2
39607: PPUSH
39608: LD_VAR 0 3
39612: PPUSH
39613: LD_VAR 0 4
39617: PPUSH
39618: CALL 39628 0 5
39622: ST_TO_ADDR
// end ;
39623: LD_VAR 0 5
39627: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39628: LD_INT 0
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
// if not list then
39634: LD_VAR 0 3
39638: NOT
39639: IFFALSE 39643
// exit ;
39641: GO 40031
// result := [ ] ;
39643: LD_ADDR_VAR 0 6
39647: PUSH
39648: EMPTY
39649: ST_TO_ADDR
// for i in list do
39650: LD_ADDR_VAR 0 7
39654: PUSH
39655: LD_VAR 0 3
39659: PUSH
39660: FOR_IN
39661: IFFALSE 39863
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39663: LD_ADDR_VAR 0 9
39667: PUSH
39668: LD_VAR 0 7
39672: PPUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: LD_VAR 0 2
39682: PPUSH
39683: CALL_OW 297
39687: ST_TO_ADDR
// if not result then
39688: LD_VAR 0 6
39692: NOT
39693: IFFALSE 39719
// result := [ [ i , tmp ] ] else
39695: LD_ADDR_VAR 0 6
39699: PUSH
39700: LD_VAR 0 7
39704: PUSH
39705: LD_VAR 0 9
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: EMPTY
39715: LIST
39716: ST_TO_ADDR
39717: GO 39861
// begin if result [ result ] [ 2 ] < tmp then
39719: LD_VAR 0 6
39723: PUSH
39724: LD_VAR 0 6
39728: ARRAY
39729: PUSH
39730: LD_INT 2
39732: ARRAY
39733: PUSH
39734: LD_VAR 0 9
39738: LESS
39739: IFFALSE 39781
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39741: LD_ADDR_VAR 0 6
39745: PUSH
39746: LD_VAR 0 6
39750: PPUSH
39751: LD_VAR 0 6
39755: PUSH
39756: LD_INT 1
39758: PLUS
39759: PPUSH
39760: LD_VAR 0 7
39764: PUSH
39765: LD_VAR 0 9
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PPUSH
39774: CALL_OW 2
39778: ST_TO_ADDR
39779: GO 39861
// for j = 1 to result do
39781: LD_ADDR_VAR 0 8
39785: PUSH
39786: DOUBLE
39787: LD_INT 1
39789: DEC
39790: ST_TO_ADDR
39791: LD_VAR 0 6
39795: PUSH
39796: FOR_TO
39797: IFFALSE 39859
// begin if tmp < result [ j ] [ 2 ] then
39799: LD_VAR 0 9
39803: PUSH
39804: LD_VAR 0 6
39808: PUSH
39809: LD_VAR 0 8
39813: ARRAY
39814: PUSH
39815: LD_INT 2
39817: ARRAY
39818: LESS
39819: IFFALSE 39857
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39821: LD_ADDR_VAR 0 6
39825: PUSH
39826: LD_VAR 0 6
39830: PPUSH
39831: LD_VAR 0 8
39835: PPUSH
39836: LD_VAR 0 7
39840: PUSH
39841: LD_VAR 0 9
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PPUSH
39850: CALL_OW 2
39854: ST_TO_ADDR
// break ;
39855: GO 39859
// end ; end ;
39857: GO 39796
39859: POP
39860: POP
// end ; end ;
39861: GO 39660
39863: POP
39864: POP
// if result and not asc then
39865: LD_VAR 0 6
39869: PUSH
39870: LD_VAR 0 4
39874: NOT
39875: AND
39876: IFFALSE 39951
// begin tmp := result ;
39878: LD_ADDR_VAR 0 9
39882: PUSH
39883: LD_VAR 0 6
39887: ST_TO_ADDR
// for i = tmp downto 1 do
39888: LD_ADDR_VAR 0 7
39892: PUSH
39893: DOUBLE
39894: LD_VAR 0 9
39898: INC
39899: ST_TO_ADDR
39900: LD_INT 1
39902: PUSH
39903: FOR_DOWNTO
39904: IFFALSE 39949
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39906: LD_ADDR_VAR 0 6
39910: PUSH
39911: LD_VAR 0 6
39915: PPUSH
39916: LD_VAR 0 9
39920: PUSH
39921: LD_VAR 0 7
39925: MINUS
39926: PUSH
39927: LD_INT 1
39929: PLUS
39930: PPUSH
39931: LD_VAR 0 9
39935: PUSH
39936: LD_VAR 0 7
39940: ARRAY
39941: PPUSH
39942: CALL_OW 1
39946: ST_TO_ADDR
39947: GO 39903
39949: POP
39950: POP
// end ; tmp := [ ] ;
39951: LD_ADDR_VAR 0 9
39955: PUSH
39956: EMPTY
39957: ST_TO_ADDR
// if mode then
39958: LD_VAR 0 5
39962: IFFALSE 40031
// begin for i = 1 to result do
39964: LD_ADDR_VAR 0 7
39968: PUSH
39969: DOUBLE
39970: LD_INT 1
39972: DEC
39973: ST_TO_ADDR
39974: LD_VAR 0 6
39978: PUSH
39979: FOR_TO
39980: IFFALSE 40019
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39982: LD_ADDR_VAR 0 9
39986: PUSH
39987: LD_VAR 0 9
39991: PPUSH
39992: LD_VAR 0 7
39996: PPUSH
39997: LD_VAR 0 6
40001: PUSH
40002: LD_VAR 0 7
40006: ARRAY
40007: PUSH
40008: LD_INT 1
40010: ARRAY
40011: PPUSH
40012: CALL_OW 1
40016: ST_TO_ADDR
40017: GO 39979
40019: POP
40020: POP
// result := tmp ;
40021: LD_ADDR_VAR 0 6
40025: PUSH
40026: LD_VAR 0 9
40030: ST_TO_ADDR
// end ; end ;
40031: LD_VAR 0 6
40035: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40036: LD_INT 0
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40044: LD_ADDR_VAR 0 5
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: ST_TO_ADDR
// if not x or not y then
40066: LD_VAR 0 2
40070: NOT
40071: PUSH
40072: LD_VAR 0 3
40076: NOT
40077: OR
40078: IFFALSE 40082
// exit ;
40080: GO 41734
// if not range then
40082: LD_VAR 0 4
40086: NOT
40087: IFFALSE 40097
// range := 10 ;
40089: LD_ADDR_VAR 0 4
40093: PUSH
40094: LD_INT 10
40096: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40097: LD_ADDR_VAR 0 8
40101: PUSH
40102: LD_INT 81
40104: PUSH
40105: LD_VAR 0 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 92
40116: PUSH
40117: LD_VAR 0 2
40121: PUSH
40122: LD_VAR 0 3
40126: PUSH
40127: LD_VAR 0 4
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 3
40140: PUSH
40141: LD_INT 21
40143: PUSH
40144: LD_INT 3
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: PPUSH
40160: CALL_OW 69
40164: ST_TO_ADDR
// if not tmp then
40165: LD_VAR 0 8
40169: NOT
40170: IFFALSE 40174
// exit ;
40172: GO 41734
// for i in tmp do
40174: LD_ADDR_VAR 0 6
40178: PUSH
40179: LD_VAR 0 8
40183: PUSH
40184: FOR_IN
40185: IFFALSE 41709
// begin points := [ 0 , 0 , 0 ] ;
40187: LD_ADDR_VAR 0 9
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: ST_TO_ADDR
// bpoints := 1 ;
40206: LD_ADDR_VAR 0 10
40210: PUSH
40211: LD_INT 1
40213: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40214: LD_VAR 0 6
40218: PPUSH
40219: CALL_OW 247
40223: PUSH
40224: LD_INT 1
40226: DOUBLE
40227: EQUAL
40228: IFTRUE 40232
40230: GO 40810
40232: POP
// begin if GetClass ( i ) = 1 then
40233: LD_VAR 0 6
40237: PPUSH
40238: CALL_OW 257
40242: PUSH
40243: LD_INT 1
40245: EQUAL
40246: IFFALSE 40267
// points := [ 10 , 5 , 3 ] ;
40248: LD_ADDR_VAR 0 9
40252: PUSH
40253: LD_INT 10
40255: PUSH
40256: LD_INT 5
40258: PUSH
40259: LD_INT 3
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40267: LD_VAR 0 6
40271: PPUSH
40272: CALL_OW 257
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 3
40282: PUSH
40283: LD_INT 4
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: IN
40291: IFFALSE 40312
// points := [ 3 , 2 , 1 ] ;
40293: LD_ADDR_VAR 0 9
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40312: LD_VAR 0 6
40316: PPUSH
40317: CALL_OW 257
40321: PUSH
40322: LD_INT 5
40324: EQUAL
40325: IFFALSE 40346
// points := [ 130 , 5 , 2 ] ;
40327: LD_ADDR_VAR 0 9
40331: PUSH
40332: LD_INT 130
40334: PUSH
40335: LD_INT 5
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40346: LD_VAR 0 6
40350: PPUSH
40351: CALL_OW 257
40355: PUSH
40356: LD_INT 8
40358: EQUAL
40359: IFFALSE 40380
// points := [ 35 , 35 , 30 ] ;
40361: LD_ADDR_VAR 0 9
40365: PUSH
40366: LD_INT 35
40368: PUSH
40369: LD_INT 35
40371: PUSH
40372: LD_INT 30
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40380: LD_VAR 0 6
40384: PPUSH
40385: CALL_OW 257
40389: PUSH
40390: LD_INT 9
40392: EQUAL
40393: IFFALSE 40414
// points := [ 20 , 55 , 40 ] ;
40395: LD_ADDR_VAR 0 9
40399: PUSH
40400: LD_INT 20
40402: PUSH
40403: LD_INT 55
40405: PUSH
40406: LD_INT 40
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: LIST
40413: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40414: LD_VAR 0 6
40418: PPUSH
40419: CALL_OW 257
40423: PUSH
40424: LD_INT 12
40426: PUSH
40427: LD_INT 16
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: IN
40434: IFFALSE 40455
// points := [ 5 , 3 , 2 ] ;
40436: LD_ADDR_VAR 0 9
40440: PUSH
40441: LD_INT 5
40443: PUSH
40444: LD_INT 3
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40455: LD_VAR 0 6
40459: PPUSH
40460: CALL_OW 257
40464: PUSH
40465: LD_INT 17
40467: EQUAL
40468: IFFALSE 40489
// points := [ 100 , 50 , 75 ] ;
40470: LD_ADDR_VAR 0 9
40474: PUSH
40475: LD_INT 100
40477: PUSH
40478: LD_INT 50
40480: PUSH
40481: LD_INT 75
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40489: LD_VAR 0 6
40493: PPUSH
40494: CALL_OW 257
40498: PUSH
40499: LD_INT 15
40501: EQUAL
40502: IFFALSE 40523
// points := [ 10 , 5 , 3 ] ;
40504: LD_ADDR_VAR 0 9
40508: PUSH
40509: LD_INT 10
40511: PUSH
40512: LD_INT 5
40514: PUSH
40515: LD_INT 3
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40523: LD_VAR 0 6
40527: PPUSH
40528: CALL_OW 257
40532: PUSH
40533: LD_INT 14
40535: EQUAL
40536: IFFALSE 40557
// points := [ 10 , 0 , 0 ] ;
40538: LD_ADDR_VAR 0 9
40542: PUSH
40543: LD_INT 10
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40557: LD_VAR 0 6
40561: PPUSH
40562: CALL_OW 257
40566: PUSH
40567: LD_INT 11
40569: EQUAL
40570: IFFALSE 40591
// points := [ 30 , 10 , 5 ] ;
40572: LD_ADDR_VAR 0 9
40576: PUSH
40577: LD_INT 30
40579: PUSH
40580: LD_INT 10
40582: PUSH
40583: LD_INT 5
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40591: LD_VAR 0 1
40595: PPUSH
40596: LD_INT 5
40598: PPUSH
40599: CALL_OW 321
40603: PUSH
40604: LD_INT 2
40606: EQUAL
40607: IFFALSE 40624
// bpoints := bpoints * 1.8 ;
40609: LD_ADDR_VAR 0 10
40613: PUSH
40614: LD_VAR 0 10
40618: PUSH
40619: LD_REAL  1.80000000000000E+0000
40622: MUL
40623: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40624: LD_VAR 0 6
40628: PPUSH
40629: CALL_OW 257
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 3
40642: PUSH
40643: LD_INT 4
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: IN
40652: PUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: LD_INT 51
40660: PPUSH
40661: CALL_OW 321
40665: PUSH
40666: LD_INT 2
40668: EQUAL
40669: AND
40670: IFFALSE 40687
// bpoints := bpoints * 1.2 ;
40672: LD_ADDR_VAR 0 10
40676: PUSH
40677: LD_VAR 0 10
40681: PUSH
40682: LD_REAL  1.20000000000000E+0000
40685: MUL
40686: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40687: LD_VAR 0 6
40691: PPUSH
40692: CALL_OW 257
40696: PUSH
40697: LD_INT 5
40699: PUSH
40700: LD_INT 7
40702: PUSH
40703: LD_INT 9
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: LIST
40710: IN
40711: PUSH
40712: LD_VAR 0 1
40716: PPUSH
40717: LD_INT 52
40719: PPUSH
40720: CALL_OW 321
40724: PUSH
40725: LD_INT 2
40727: EQUAL
40728: AND
40729: IFFALSE 40746
// bpoints := bpoints * 1.5 ;
40731: LD_ADDR_VAR 0 10
40735: PUSH
40736: LD_VAR 0 10
40740: PUSH
40741: LD_REAL  1.50000000000000E+0000
40744: MUL
40745: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40746: LD_VAR 0 1
40750: PPUSH
40751: LD_INT 66
40753: PPUSH
40754: CALL_OW 321
40758: PUSH
40759: LD_INT 2
40761: EQUAL
40762: IFFALSE 40779
// bpoints := bpoints * 1.1 ;
40764: LD_ADDR_VAR 0 10
40768: PUSH
40769: LD_VAR 0 10
40773: PUSH
40774: LD_REAL  1.10000000000000E+0000
40777: MUL
40778: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40779: LD_ADDR_VAR 0 10
40783: PUSH
40784: LD_VAR 0 10
40788: PUSH
40789: LD_VAR 0 6
40793: PPUSH
40794: LD_INT 1
40796: PPUSH
40797: CALL_OW 259
40801: PUSH
40802: LD_REAL  1.15000000000000E+0000
40805: MUL
40806: MUL
40807: ST_TO_ADDR
// end ; unit_vehicle :
40808: GO 41638
40810: LD_INT 2
40812: DOUBLE
40813: EQUAL
40814: IFTRUE 40818
40816: GO 41626
40818: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40819: LD_VAR 0 6
40823: PPUSH
40824: CALL_OW 264
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 42
40834: PUSH
40835: LD_INT 24
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: IN
40843: IFFALSE 40864
// points := [ 25 , 5 , 3 ] ;
40845: LD_ADDR_VAR 0 9
40849: PUSH
40850: LD_INT 25
40852: PUSH
40853: LD_INT 5
40855: PUSH
40856: LD_INT 3
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40864: LD_VAR 0 6
40868: PPUSH
40869: CALL_OW 264
40873: PUSH
40874: LD_INT 4
40876: PUSH
40877: LD_INT 43
40879: PUSH
40880: LD_INT 25
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: LIST
40887: IN
40888: IFFALSE 40909
// points := [ 40 , 15 , 5 ] ;
40890: LD_ADDR_VAR 0 9
40894: PUSH
40895: LD_INT 40
40897: PUSH
40898: LD_INT 15
40900: PUSH
40901: LD_INT 5
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40909: LD_VAR 0 6
40913: PPUSH
40914: CALL_OW 264
40918: PUSH
40919: LD_INT 3
40921: PUSH
40922: LD_INT 23
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: IN
40929: IFFALSE 40950
// points := [ 7 , 25 , 8 ] ;
40931: LD_ADDR_VAR 0 9
40935: PUSH
40936: LD_INT 7
40938: PUSH
40939: LD_INT 25
40941: PUSH
40942: LD_INT 8
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40950: LD_VAR 0 6
40954: PPUSH
40955: CALL_OW 264
40959: PUSH
40960: LD_INT 5
40962: PUSH
40963: LD_INT 27
40965: PUSH
40966: LD_INT 44
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: IN
40974: IFFALSE 40995
// points := [ 14 , 50 , 16 ] ;
40976: LD_ADDR_VAR 0 9
40980: PUSH
40981: LD_INT 14
40983: PUSH
40984: LD_INT 50
40986: PUSH
40987: LD_INT 16
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40995: LD_VAR 0 6
40999: PPUSH
41000: CALL_OW 264
41004: PUSH
41005: LD_INT 6
41007: PUSH
41008: LD_INT 46
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: IN
41015: IFFALSE 41036
// points := [ 32 , 120 , 70 ] ;
41017: LD_ADDR_VAR 0 9
41021: PUSH
41022: LD_INT 32
41024: PUSH
41025: LD_INT 120
41027: PUSH
41028: LD_INT 70
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41036: LD_VAR 0 6
41040: PPUSH
41041: CALL_OW 264
41045: PUSH
41046: LD_INT 7
41048: PUSH
41049: LD_INT 28
41051: PUSH
41052: LD_INT 45
41054: PUSH
41055: LD_EXP 43
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: IN
41066: IFFALSE 41087
// points := [ 35 , 20 , 45 ] ;
41068: LD_ADDR_VAR 0 9
41072: PUSH
41073: LD_INT 35
41075: PUSH
41076: LD_INT 20
41078: PUSH
41079: LD_INT 45
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41087: LD_VAR 0 6
41091: PPUSH
41092: CALL_OW 264
41096: PUSH
41097: LD_INT 47
41099: PUSH
41100: EMPTY
41101: LIST
41102: IN
41103: IFFALSE 41124
// points := [ 67 , 45 , 75 ] ;
41105: LD_ADDR_VAR 0 9
41109: PUSH
41110: LD_INT 67
41112: PUSH
41113: LD_INT 45
41115: PUSH
41116: LD_INT 75
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41124: LD_VAR 0 6
41128: PPUSH
41129: CALL_OW 264
41133: PUSH
41134: LD_INT 26
41136: PUSH
41137: EMPTY
41138: LIST
41139: IN
41140: IFFALSE 41161
// points := [ 120 , 30 , 80 ] ;
41142: LD_ADDR_VAR 0 9
41146: PUSH
41147: LD_INT 120
41149: PUSH
41150: LD_INT 30
41152: PUSH
41153: LD_INT 80
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41161: LD_VAR 0 6
41165: PPUSH
41166: CALL_OW 264
41170: PUSH
41171: LD_INT 22
41173: PUSH
41174: EMPTY
41175: LIST
41176: IN
41177: IFFALSE 41198
// points := [ 40 , 1 , 1 ] ;
41179: LD_ADDR_VAR 0 9
41183: PUSH
41184: LD_INT 40
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41198: LD_VAR 0 6
41202: PPUSH
41203: CALL_OW 264
41207: PUSH
41208: LD_INT 29
41210: PUSH
41211: EMPTY
41212: LIST
41213: IN
41214: IFFALSE 41235
// points := [ 70 , 200 , 400 ] ;
41216: LD_ADDR_VAR 0 9
41220: PUSH
41221: LD_INT 70
41223: PUSH
41224: LD_INT 200
41226: PUSH
41227: LD_INT 400
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41235: LD_VAR 0 6
41239: PPUSH
41240: CALL_OW 264
41244: PUSH
41245: LD_INT 14
41247: PUSH
41248: LD_INT 53
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: IN
41255: IFFALSE 41276
// points := [ 40 , 10 , 20 ] ;
41257: LD_ADDR_VAR 0 9
41261: PUSH
41262: LD_INT 40
41264: PUSH
41265: LD_INT 10
41267: PUSH
41268: LD_INT 20
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41276: LD_VAR 0 6
41280: PPUSH
41281: CALL_OW 264
41285: PUSH
41286: LD_INT 9
41288: PUSH
41289: EMPTY
41290: LIST
41291: IN
41292: IFFALSE 41313
// points := [ 5 , 70 , 20 ] ;
41294: LD_ADDR_VAR 0 9
41298: PUSH
41299: LD_INT 5
41301: PUSH
41302: LD_INT 70
41304: PUSH
41305: LD_INT 20
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41313: LD_VAR 0 6
41317: PPUSH
41318: CALL_OW 264
41322: PUSH
41323: LD_INT 10
41325: PUSH
41326: EMPTY
41327: LIST
41328: IN
41329: IFFALSE 41350
// points := [ 35 , 110 , 70 ] ;
41331: LD_ADDR_VAR 0 9
41335: PUSH
41336: LD_INT 35
41338: PUSH
41339: LD_INT 110
41341: PUSH
41342: LD_INT 70
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41350: LD_VAR 0 6
41354: PPUSH
41355: CALL_OW 265
41359: PUSH
41360: LD_INT 25
41362: EQUAL
41363: IFFALSE 41384
// points := [ 80 , 65 , 100 ] ;
41365: LD_ADDR_VAR 0 9
41369: PUSH
41370: LD_INT 80
41372: PUSH
41373: LD_INT 65
41375: PUSH
41376: LD_INT 100
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41384: LD_VAR 0 6
41388: PPUSH
41389: CALL_OW 263
41393: PUSH
41394: LD_INT 1
41396: EQUAL
41397: IFFALSE 41432
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41399: LD_ADDR_VAR 0 10
41403: PUSH
41404: LD_VAR 0 10
41408: PUSH
41409: LD_VAR 0 6
41413: PPUSH
41414: CALL_OW 311
41418: PPUSH
41419: LD_INT 3
41421: PPUSH
41422: CALL_OW 259
41426: PUSH
41427: LD_INT 4
41429: MUL
41430: MUL
41431: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41432: LD_VAR 0 6
41436: PPUSH
41437: CALL_OW 263
41441: PUSH
41442: LD_INT 2
41444: EQUAL
41445: IFFALSE 41496
// begin j := IsControledBy ( i ) ;
41447: LD_ADDR_VAR 0 7
41451: PUSH
41452: LD_VAR 0 6
41456: PPUSH
41457: CALL_OW 312
41461: ST_TO_ADDR
// if j then
41462: LD_VAR 0 7
41466: IFFALSE 41496
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41468: LD_ADDR_VAR 0 10
41472: PUSH
41473: LD_VAR 0 10
41477: PUSH
41478: LD_VAR 0 7
41482: PPUSH
41483: LD_INT 3
41485: PPUSH
41486: CALL_OW 259
41490: PUSH
41491: LD_INT 3
41493: MUL
41494: MUL
41495: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41496: LD_VAR 0 6
41500: PPUSH
41501: CALL_OW 264
41505: PUSH
41506: LD_INT 5
41508: PUSH
41509: LD_INT 6
41511: PUSH
41512: LD_INT 46
41514: PUSH
41515: LD_INT 44
41517: PUSH
41518: LD_INT 47
41520: PUSH
41521: LD_INT 45
41523: PUSH
41524: LD_INT 28
41526: PUSH
41527: LD_INT 7
41529: PUSH
41530: LD_INT 27
41532: PUSH
41533: LD_INT 29
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: IN
41548: PUSH
41549: LD_VAR 0 1
41553: PPUSH
41554: LD_INT 52
41556: PPUSH
41557: CALL_OW 321
41561: PUSH
41562: LD_INT 2
41564: EQUAL
41565: AND
41566: IFFALSE 41583
// bpoints := bpoints * 1.2 ;
41568: LD_ADDR_VAR 0 10
41572: PUSH
41573: LD_VAR 0 10
41577: PUSH
41578: LD_REAL  1.20000000000000E+0000
41581: MUL
41582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41583: LD_VAR 0 6
41587: PPUSH
41588: CALL_OW 264
41592: PUSH
41593: LD_INT 6
41595: PUSH
41596: LD_INT 46
41598: PUSH
41599: LD_INT 47
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: LIST
41606: IN
41607: IFFALSE 41624
// bpoints := bpoints * 1.2 ;
41609: LD_ADDR_VAR 0 10
41613: PUSH
41614: LD_VAR 0 10
41618: PUSH
41619: LD_REAL  1.20000000000000E+0000
41622: MUL
41623: ST_TO_ADDR
// end ; unit_building :
41624: GO 41638
41626: LD_INT 3
41628: DOUBLE
41629: EQUAL
41630: IFTRUE 41634
41632: GO 41637
41634: POP
// ; end ;
41635: GO 41638
41637: POP
// for j = 1 to 3 do
41638: LD_ADDR_VAR 0 7
41642: PUSH
41643: DOUBLE
41644: LD_INT 1
41646: DEC
41647: ST_TO_ADDR
41648: LD_INT 3
41650: PUSH
41651: FOR_TO
41652: IFFALSE 41705
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41654: LD_ADDR_VAR 0 5
41658: PUSH
41659: LD_VAR 0 5
41663: PPUSH
41664: LD_VAR 0 7
41668: PPUSH
41669: LD_VAR 0 5
41673: PUSH
41674: LD_VAR 0 7
41678: ARRAY
41679: PUSH
41680: LD_VAR 0 9
41684: PUSH
41685: LD_VAR 0 7
41689: ARRAY
41690: PUSH
41691: LD_VAR 0 10
41695: MUL
41696: PLUS
41697: PPUSH
41698: CALL_OW 1
41702: ST_TO_ADDR
41703: GO 41651
41705: POP
41706: POP
// end ;
41707: GO 40184
41709: POP
41710: POP
// result := Replace ( result , 4 , tmp ) ;
41711: LD_ADDR_VAR 0 5
41715: PUSH
41716: LD_VAR 0 5
41720: PPUSH
41721: LD_INT 4
41723: PPUSH
41724: LD_VAR 0 8
41728: PPUSH
41729: CALL_OW 1
41733: ST_TO_ADDR
// end ;
41734: LD_VAR 0 5
41738: RET
// export function DangerAtRange ( unit , range ) ; begin
41739: LD_INT 0
41741: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41742: LD_ADDR_VAR 0 3
41746: PUSH
41747: LD_VAR 0 1
41751: PPUSH
41752: CALL_OW 255
41756: PPUSH
41757: LD_VAR 0 1
41761: PPUSH
41762: CALL_OW 250
41766: PPUSH
41767: LD_VAR 0 1
41771: PPUSH
41772: CALL_OW 251
41776: PPUSH
41777: LD_VAR 0 2
41781: PPUSH
41782: CALL 40036 0 4
41786: ST_TO_ADDR
// end ;
41787: LD_VAR 0 3
41791: RET
// export function DangerInArea ( side , area ) ; begin
41792: LD_INT 0
41794: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41795: LD_ADDR_VAR 0 3
41799: PUSH
41800: LD_VAR 0 2
41804: PPUSH
41805: LD_INT 81
41807: PUSH
41808: LD_VAR 0 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PPUSH
41817: CALL_OW 70
41821: ST_TO_ADDR
// end ;
41822: LD_VAR 0 3
41826: RET
// export function IsExtension ( b ) ; begin
41827: LD_INT 0
41829: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41830: LD_ADDR_VAR 0 2
41834: PUSH
41835: LD_VAR 0 1
41839: PUSH
41840: LD_INT 23
41842: PUSH
41843: LD_INT 20
41845: PUSH
41846: LD_INT 22
41848: PUSH
41849: LD_INT 17
41851: PUSH
41852: LD_INT 24
41854: PUSH
41855: LD_INT 21
41857: PUSH
41858: LD_INT 19
41860: PUSH
41861: LD_INT 16
41863: PUSH
41864: LD_INT 25
41866: PUSH
41867: LD_INT 18
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: IN
41882: ST_TO_ADDR
// end ;
41883: LD_VAR 0 2
41887: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41888: LD_INT 0
41890: PPUSH
41891: PPUSH
41892: PPUSH
// result := [ ] ;
41893: LD_ADDR_VAR 0 4
41897: PUSH
41898: EMPTY
41899: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41900: LD_ADDR_VAR 0 5
41904: PUSH
41905: LD_VAR 0 2
41909: PPUSH
41910: LD_INT 21
41912: PUSH
41913: LD_INT 3
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PPUSH
41920: CALL_OW 70
41924: ST_TO_ADDR
// if not tmp then
41925: LD_VAR 0 5
41929: NOT
41930: IFFALSE 41934
// exit ;
41932: GO 41998
// if checkLink then
41934: LD_VAR 0 3
41938: IFFALSE 41988
// begin for i in tmp do
41940: LD_ADDR_VAR 0 6
41944: PUSH
41945: LD_VAR 0 5
41949: PUSH
41950: FOR_IN
41951: IFFALSE 41986
// if GetBase ( i ) <> base then
41953: LD_VAR 0 6
41957: PPUSH
41958: CALL_OW 274
41962: PUSH
41963: LD_VAR 0 1
41967: NONEQUAL
41968: IFFALSE 41984
// ComLinkToBase ( base , i ) ;
41970: LD_VAR 0 1
41974: PPUSH
41975: LD_VAR 0 6
41979: PPUSH
41980: CALL_OW 169
41984: GO 41950
41986: POP
41987: POP
// end ; result := tmp ;
41988: LD_ADDR_VAR 0 4
41992: PUSH
41993: LD_VAR 0 5
41997: ST_TO_ADDR
// end ;
41998: LD_VAR 0 4
42002: RET
// export function ComComplete ( units , b ) ; var i ; begin
42003: LD_INT 0
42005: PPUSH
42006: PPUSH
// if not units then
42007: LD_VAR 0 1
42011: NOT
42012: IFFALSE 42016
// exit ;
42014: GO 42106
// for i in units do
42016: LD_ADDR_VAR 0 4
42020: PUSH
42021: LD_VAR 0 1
42025: PUSH
42026: FOR_IN
42027: IFFALSE 42104
// if BuildingStatus ( b ) = bs_build then
42029: LD_VAR 0 2
42033: PPUSH
42034: CALL_OW 461
42038: PUSH
42039: LD_INT 1
42041: EQUAL
42042: IFFALSE 42102
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42044: LD_VAR 0 4
42048: PPUSH
42049: LD_STRING h
42051: PUSH
42052: LD_VAR 0 2
42056: PPUSH
42057: CALL_OW 250
42061: PUSH
42062: LD_VAR 0 2
42066: PPUSH
42067: CALL_OW 251
42071: PUSH
42072: LD_VAR 0 2
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: PUSH
42095: EMPTY
42096: LIST
42097: PPUSH
42098: CALL_OW 446
42102: GO 42026
42104: POP
42105: POP
// end ;
42106: LD_VAR 0 3
42110: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42111: LD_INT 0
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42119: LD_VAR 0 1
42123: NOT
42124: PUSH
42125: LD_VAR 0 1
42129: PPUSH
42130: CALL_OW 263
42134: PUSH
42135: LD_INT 2
42137: NONEQUAL
42138: OR
42139: IFFALSE 42143
// exit ;
42141: GO 42459
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42143: LD_ADDR_VAR 0 6
42147: PUSH
42148: LD_INT 22
42150: PUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: CALL_OW 255
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: LD_INT 30
42170: PUSH
42171: LD_INT 36
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 34
42180: PUSH
42181: LD_INT 31
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: LIST
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PPUSH
42197: CALL_OW 69
42201: ST_TO_ADDR
// if not tmp then
42202: LD_VAR 0 6
42206: NOT
42207: IFFALSE 42211
// exit ;
42209: GO 42459
// result := [ ] ;
42211: LD_ADDR_VAR 0 2
42215: PUSH
42216: EMPTY
42217: ST_TO_ADDR
// for i in tmp do
42218: LD_ADDR_VAR 0 3
42222: PUSH
42223: LD_VAR 0 6
42227: PUSH
42228: FOR_IN
42229: IFFALSE 42300
// begin t := UnitsInside ( i ) ;
42231: LD_ADDR_VAR 0 4
42235: PUSH
42236: LD_VAR 0 3
42240: PPUSH
42241: CALL_OW 313
42245: ST_TO_ADDR
// if t then
42246: LD_VAR 0 4
42250: IFFALSE 42298
// for j in t do
42252: LD_ADDR_VAR 0 7
42256: PUSH
42257: LD_VAR 0 4
42261: PUSH
42262: FOR_IN
42263: IFFALSE 42296
// result := Replace ( result , result + 1 , j ) ;
42265: LD_ADDR_VAR 0 2
42269: PUSH
42270: LD_VAR 0 2
42274: PPUSH
42275: LD_VAR 0 2
42279: PUSH
42280: LD_INT 1
42282: PLUS
42283: PPUSH
42284: LD_VAR 0 7
42288: PPUSH
42289: CALL_OW 1
42293: ST_TO_ADDR
42294: GO 42262
42296: POP
42297: POP
// end ;
42298: GO 42228
42300: POP
42301: POP
// if not result then
42302: LD_VAR 0 2
42306: NOT
42307: IFFALSE 42311
// exit ;
42309: GO 42459
// mech := result [ 1 ] ;
42311: LD_ADDR_VAR 0 5
42315: PUSH
42316: LD_VAR 0 2
42320: PUSH
42321: LD_INT 1
42323: ARRAY
42324: ST_TO_ADDR
// if result > 1 then
42325: LD_VAR 0 2
42329: PUSH
42330: LD_INT 1
42332: GREATER
42333: IFFALSE 42445
// begin for i = 2 to result do
42335: LD_ADDR_VAR 0 3
42339: PUSH
42340: DOUBLE
42341: LD_INT 2
42343: DEC
42344: ST_TO_ADDR
42345: LD_VAR 0 2
42349: PUSH
42350: FOR_TO
42351: IFFALSE 42443
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42353: LD_ADDR_VAR 0 4
42357: PUSH
42358: LD_VAR 0 2
42362: PUSH
42363: LD_VAR 0 3
42367: ARRAY
42368: PPUSH
42369: LD_INT 3
42371: PPUSH
42372: CALL_OW 259
42376: PUSH
42377: LD_VAR 0 2
42381: PUSH
42382: LD_VAR 0 3
42386: ARRAY
42387: PPUSH
42388: CALL_OW 432
42392: MINUS
42393: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42394: LD_VAR 0 4
42398: PUSH
42399: LD_VAR 0 5
42403: PPUSH
42404: LD_INT 3
42406: PPUSH
42407: CALL_OW 259
42411: PUSH
42412: LD_VAR 0 5
42416: PPUSH
42417: CALL_OW 432
42421: MINUS
42422: GREATEREQUAL
42423: IFFALSE 42441
// mech := result [ i ] ;
42425: LD_ADDR_VAR 0 5
42429: PUSH
42430: LD_VAR 0 2
42434: PUSH
42435: LD_VAR 0 3
42439: ARRAY
42440: ST_TO_ADDR
// end ;
42441: GO 42350
42443: POP
42444: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42445: LD_VAR 0 1
42449: PPUSH
42450: LD_VAR 0 5
42454: PPUSH
42455: CALL_OW 135
// end ;
42459: LD_VAR 0 2
42463: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42464: LD_INT 0
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
// result := [ ] ;
42479: LD_ADDR_VAR 0 7
42483: PUSH
42484: EMPTY
42485: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42486: LD_VAR 0 1
42490: PPUSH
42491: CALL_OW 266
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: IN
42506: NOT
42507: IFFALSE 42511
// exit ;
42509: GO 44145
// if name then
42511: LD_VAR 0 3
42515: IFFALSE 42531
// SetBName ( base_dep , name ) ;
42517: LD_VAR 0 1
42521: PPUSH
42522: LD_VAR 0 3
42526: PPUSH
42527: CALL_OW 500
// base := GetBase ( base_dep ) ;
42531: LD_ADDR_VAR 0 15
42535: PUSH
42536: LD_VAR 0 1
42540: PPUSH
42541: CALL_OW 274
42545: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42546: LD_ADDR_VAR 0 16
42550: PUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: CALL_OW 255
42560: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42561: LD_ADDR_VAR 0 17
42565: PUSH
42566: LD_VAR 0 1
42570: PPUSH
42571: CALL_OW 248
42575: ST_TO_ADDR
// if sources then
42576: LD_VAR 0 5
42580: IFFALSE 42627
// for i = 1 to 3 do
42582: LD_ADDR_VAR 0 8
42586: PUSH
42587: DOUBLE
42588: LD_INT 1
42590: DEC
42591: ST_TO_ADDR
42592: LD_INT 3
42594: PUSH
42595: FOR_TO
42596: IFFALSE 42625
// AddResourceType ( base , i , sources [ i ] ) ;
42598: LD_VAR 0 15
42602: PPUSH
42603: LD_VAR 0 8
42607: PPUSH
42608: LD_VAR 0 5
42612: PUSH
42613: LD_VAR 0 8
42617: ARRAY
42618: PPUSH
42619: CALL_OW 276
42623: GO 42595
42625: POP
42626: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42627: LD_ADDR_VAR 0 18
42631: PUSH
42632: LD_VAR 0 15
42636: PPUSH
42637: LD_VAR 0 2
42641: PPUSH
42642: LD_INT 1
42644: PPUSH
42645: CALL 41888 0 3
42649: ST_TO_ADDR
// InitHc ;
42650: CALL_OW 19
// InitUc ;
42654: CALL_OW 18
// uc_side := side ;
42658: LD_ADDR_OWVAR 20
42662: PUSH
42663: LD_VAR 0 16
42667: ST_TO_ADDR
// uc_nation := nation ;
42668: LD_ADDR_OWVAR 21
42672: PUSH
42673: LD_VAR 0 17
42677: ST_TO_ADDR
// if buildings then
42678: LD_VAR 0 18
42682: IFFALSE 44004
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42684: LD_ADDR_VAR 0 19
42688: PUSH
42689: LD_VAR 0 18
42693: PPUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 30
42699: PUSH
42700: LD_INT 29
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 30
42709: PUSH
42710: LD_INT 30
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: PPUSH
42722: CALL_OW 72
42726: ST_TO_ADDR
// if tmp then
42727: LD_VAR 0 19
42731: IFFALSE 42779
// for i in tmp do
42733: LD_ADDR_VAR 0 8
42737: PUSH
42738: LD_VAR 0 19
42742: PUSH
42743: FOR_IN
42744: IFFALSE 42777
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42746: LD_VAR 0 8
42750: PPUSH
42751: CALL_OW 250
42755: PPUSH
42756: LD_VAR 0 8
42760: PPUSH
42761: CALL_OW 251
42765: PPUSH
42766: LD_VAR 0 16
42770: PPUSH
42771: CALL_OW 441
42775: GO 42743
42777: POP
42778: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42779: LD_VAR 0 18
42783: PPUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 30
42789: PUSH
42790: LD_INT 32
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 30
42799: PUSH
42800: LD_INT 33
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: PPUSH
42812: CALL_OW 72
42816: IFFALSE 42904
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42818: LD_ADDR_VAR 0 8
42822: PUSH
42823: LD_VAR 0 18
42827: PPUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 30
42833: PUSH
42834: LD_INT 32
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 30
42843: PUSH
42844: LD_INT 33
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: PPUSH
42856: CALL_OW 72
42860: PUSH
42861: FOR_IN
42862: IFFALSE 42902
// begin if not GetBWeapon ( i ) then
42864: LD_VAR 0 8
42868: PPUSH
42869: CALL_OW 269
42873: NOT
42874: IFFALSE 42900
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42876: LD_VAR 0 8
42880: PPUSH
42881: LD_VAR 0 8
42885: PPUSH
42886: LD_VAR 0 2
42890: PPUSH
42891: CALL 44150 0 2
42895: PPUSH
42896: CALL_OW 431
// end ;
42900: GO 42861
42902: POP
42903: POP
// end ; for i = 1 to personel do
42904: LD_ADDR_VAR 0 8
42908: PUSH
42909: DOUBLE
42910: LD_INT 1
42912: DEC
42913: ST_TO_ADDR
42914: LD_VAR 0 6
42918: PUSH
42919: FOR_TO
42920: IFFALSE 43984
// begin if i > 4 then
42922: LD_VAR 0 8
42926: PUSH
42927: LD_INT 4
42929: GREATER
42930: IFFALSE 42934
// break ;
42932: GO 43984
// case i of 1 :
42934: LD_VAR 0 8
42938: PUSH
42939: LD_INT 1
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 43027
42947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42948: LD_ADDR_VAR 0 12
42952: PUSH
42953: LD_VAR 0 18
42957: PPUSH
42958: LD_INT 22
42960: PUSH
42961: LD_VAR 0 16
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 58
42972: PUSH
42973: EMPTY
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 30
42981: PUSH
42982: LD_INT 32
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 30
42991: PUSH
42992: LD_INT 4
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 30
43001: PUSH
43002: LD_INT 5
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: PPUSH
43020: CALL_OW 72
43024: ST_TO_ADDR
43025: GO 43249
43027: LD_INT 2
43029: DOUBLE
43030: EQUAL
43031: IFTRUE 43035
43033: GO 43097
43035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43036: LD_ADDR_VAR 0 12
43040: PUSH
43041: LD_VAR 0 18
43045: PPUSH
43046: LD_INT 22
43048: PUSH
43049: LD_VAR 0 16
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 30
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 30
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PPUSH
43090: CALL_OW 72
43094: ST_TO_ADDR
43095: GO 43249
43097: LD_INT 3
43099: DOUBLE
43100: EQUAL
43101: IFTRUE 43105
43103: GO 43167
43105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43106: LD_ADDR_VAR 0 12
43110: PUSH
43111: LD_VAR 0 18
43115: PPUSH
43116: LD_INT 22
43118: PUSH
43119: LD_VAR 0 16
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 30
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 30
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PPUSH
43160: CALL_OW 72
43164: ST_TO_ADDR
43165: GO 43249
43167: LD_INT 4
43169: DOUBLE
43170: EQUAL
43171: IFTRUE 43175
43173: GO 43248
43175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43176: LD_ADDR_VAR 0 12
43180: PUSH
43181: LD_VAR 0 18
43185: PPUSH
43186: LD_INT 22
43188: PUSH
43189: LD_VAR 0 16
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: LD_INT 30
43203: PUSH
43204: LD_INT 6
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 30
43213: PUSH
43214: LD_INT 7
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 30
43223: PUSH
43224: LD_INT 8
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PPUSH
43241: CALL_OW 72
43245: ST_TO_ADDR
43246: GO 43249
43248: POP
// if i = 1 then
43249: LD_VAR 0 8
43253: PUSH
43254: LD_INT 1
43256: EQUAL
43257: IFFALSE 43368
// begin tmp := [ ] ;
43259: LD_ADDR_VAR 0 19
43263: PUSH
43264: EMPTY
43265: ST_TO_ADDR
// for j in f do
43266: LD_ADDR_VAR 0 9
43270: PUSH
43271: LD_VAR 0 12
43275: PUSH
43276: FOR_IN
43277: IFFALSE 43350
// if GetBType ( j ) = b_bunker then
43279: LD_VAR 0 9
43283: PPUSH
43284: CALL_OW 266
43288: PUSH
43289: LD_INT 32
43291: EQUAL
43292: IFFALSE 43319
// tmp := Insert ( tmp , 1 , j ) else
43294: LD_ADDR_VAR 0 19
43298: PUSH
43299: LD_VAR 0 19
43303: PPUSH
43304: LD_INT 1
43306: PPUSH
43307: LD_VAR 0 9
43311: PPUSH
43312: CALL_OW 2
43316: ST_TO_ADDR
43317: GO 43348
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43319: LD_ADDR_VAR 0 19
43323: PUSH
43324: LD_VAR 0 19
43328: PPUSH
43329: LD_VAR 0 19
43333: PUSH
43334: LD_INT 1
43336: PLUS
43337: PPUSH
43338: LD_VAR 0 9
43342: PPUSH
43343: CALL_OW 2
43347: ST_TO_ADDR
43348: GO 43276
43350: POP
43351: POP
// if tmp then
43352: LD_VAR 0 19
43356: IFFALSE 43368
// f := tmp ;
43358: LD_ADDR_VAR 0 12
43362: PUSH
43363: LD_VAR 0 19
43367: ST_TO_ADDR
// end ; x := personel [ i ] ;
43368: LD_ADDR_VAR 0 13
43372: PUSH
43373: LD_VAR 0 6
43377: PUSH
43378: LD_VAR 0 8
43382: ARRAY
43383: ST_TO_ADDR
// if x = - 1 then
43384: LD_VAR 0 13
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: EQUAL
43393: IFFALSE 43602
// begin for j in f do
43395: LD_ADDR_VAR 0 9
43399: PUSH
43400: LD_VAR 0 12
43404: PUSH
43405: FOR_IN
43406: IFFALSE 43598
// repeat InitHc ;
43408: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43412: LD_VAR 0 9
43416: PPUSH
43417: CALL_OW 266
43421: PUSH
43422: LD_INT 5
43424: EQUAL
43425: IFFALSE 43495
// begin if UnitsInside ( j ) < 3 then
43427: LD_VAR 0 9
43431: PPUSH
43432: CALL_OW 313
43436: PUSH
43437: LD_INT 3
43439: LESS
43440: IFFALSE 43476
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43442: LD_INT 0
43444: PPUSH
43445: LD_INT 5
43447: PUSH
43448: LD_INT 8
43450: PUSH
43451: LD_INT 9
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: PUSH
43459: LD_VAR 0 17
43463: ARRAY
43464: PPUSH
43465: LD_VAR 0 4
43469: PPUSH
43470: CALL_OW 380
43474: GO 43493
// PrepareHuman ( false , i , skill ) ;
43476: LD_INT 0
43478: PPUSH
43479: LD_VAR 0 8
43483: PPUSH
43484: LD_VAR 0 4
43488: PPUSH
43489: CALL_OW 380
// end else
43493: GO 43512
// PrepareHuman ( false , i , skill ) ;
43495: LD_INT 0
43497: PPUSH
43498: LD_VAR 0 8
43502: PPUSH
43503: LD_VAR 0 4
43507: PPUSH
43508: CALL_OW 380
// un := CreateHuman ;
43512: LD_ADDR_VAR 0 14
43516: PUSH
43517: CALL_OW 44
43521: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43522: LD_ADDR_VAR 0 7
43526: PUSH
43527: LD_VAR 0 7
43531: PPUSH
43532: LD_INT 1
43534: PPUSH
43535: LD_VAR 0 14
43539: PPUSH
43540: CALL_OW 2
43544: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43545: LD_VAR 0 14
43549: PPUSH
43550: LD_VAR 0 9
43554: PPUSH
43555: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43559: LD_VAR 0 9
43563: PPUSH
43564: CALL_OW 313
43568: PUSH
43569: LD_INT 6
43571: EQUAL
43572: PUSH
43573: LD_VAR 0 9
43577: PPUSH
43578: CALL_OW 266
43582: PUSH
43583: LD_INT 32
43585: PUSH
43586: LD_INT 31
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: IN
43593: OR
43594: IFFALSE 43408
43596: GO 43405
43598: POP
43599: POP
// end else
43600: GO 43982
// for j = 1 to x do
43602: LD_ADDR_VAR 0 9
43606: PUSH
43607: DOUBLE
43608: LD_INT 1
43610: DEC
43611: ST_TO_ADDR
43612: LD_VAR 0 13
43616: PUSH
43617: FOR_TO
43618: IFFALSE 43980
// begin InitHc ;
43620: CALL_OW 19
// if not f then
43624: LD_VAR 0 12
43628: NOT
43629: IFFALSE 43718
// begin PrepareHuman ( false , i , skill ) ;
43631: LD_INT 0
43633: PPUSH
43634: LD_VAR 0 8
43638: PPUSH
43639: LD_VAR 0 4
43643: PPUSH
43644: CALL_OW 380
// un := CreateHuman ;
43648: LD_ADDR_VAR 0 14
43652: PUSH
43653: CALL_OW 44
43657: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43658: LD_ADDR_VAR 0 7
43662: PUSH
43663: LD_VAR 0 7
43667: PPUSH
43668: LD_INT 1
43670: PPUSH
43671: LD_VAR 0 14
43675: PPUSH
43676: CALL_OW 2
43680: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43681: LD_VAR 0 14
43685: PPUSH
43686: LD_VAR 0 1
43690: PPUSH
43691: CALL_OW 250
43695: PPUSH
43696: LD_VAR 0 1
43700: PPUSH
43701: CALL_OW 251
43705: PPUSH
43706: LD_INT 10
43708: PPUSH
43709: LD_INT 0
43711: PPUSH
43712: CALL_OW 50
// continue ;
43716: GO 43617
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43718: LD_VAR 0 12
43722: PUSH
43723: LD_INT 1
43725: ARRAY
43726: PPUSH
43727: CALL_OW 313
43731: PUSH
43732: LD_VAR 0 12
43736: PUSH
43737: LD_INT 1
43739: ARRAY
43740: PPUSH
43741: CALL_OW 266
43745: PUSH
43746: LD_INT 32
43748: PUSH
43749: LD_INT 31
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: IN
43756: AND
43757: PUSH
43758: LD_VAR 0 12
43762: PUSH
43763: LD_INT 1
43765: ARRAY
43766: PPUSH
43767: CALL_OW 313
43771: PUSH
43772: LD_INT 6
43774: EQUAL
43775: OR
43776: IFFALSE 43796
// f := Delete ( f , 1 ) ;
43778: LD_ADDR_VAR 0 12
43782: PUSH
43783: LD_VAR 0 12
43787: PPUSH
43788: LD_INT 1
43790: PPUSH
43791: CALL_OW 3
43795: ST_TO_ADDR
// if not f then
43796: LD_VAR 0 12
43800: NOT
43801: IFFALSE 43819
// begin x := x + 2 ;
43803: LD_ADDR_VAR 0 13
43807: PUSH
43808: LD_VAR 0 13
43812: PUSH
43813: LD_INT 2
43815: PLUS
43816: ST_TO_ADDR
// continue ;
43817: GO 43617
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43819: LD_VAR 0 12
43823: PUSH
43824: LD_INT 1
43826: ARRAY
43827: PPUSH
43828: CALL_OW 266
43832: PUSH
43833: LD_INT 5
43835: EQUAL
43836: IFFALSE 43910
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43838: LD_VAR 0 12
43842: PUSH
43843: LD_INT 1
43845: ARRAY
43846: PPUSH
43847: CALL_OW 313
43851: PUSH
43852: LD_INT 3
43854: LESS
43855: IFFALSE 43891
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43857: LD_INT 0
43859: PPUSH
43860: LD_INT 5
43862: PUSH
43863: LD_INT 8
43865: PUSH
43866: LD_INT 9
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: PUSH
43874: LD_VAR 0 17
43878: ARRAY
43879: PPUSH
43880: LD_VAR 0 4
43884: PPUSH
43885: CALL_OW 380
43889: GO 43908
// PrepareHuman ( false , i , skill ) ;
43891: LD_INT 0
43893: PPUSH
43894: LD_VAR 0 8
43898: PPUSH
43899: LD_VAR 0 4
43903: PPUSH
43904: CALL_OW 380
// end else
43908: GO 43927
// PrepareHuman ( false , i , skill ) ;
43910: LD_INT 0
43912: PPUSH
43913: LD_VAR 0 8
43917: PPUSH
43918: LD_VAR 0 4
43922: PPUSH
43923: CALL_OW 380
// un := CreateHuman ;
43927: LD_ADDR_VAR 0 14
43931: PUSH
43932: CALL_OW 44
43936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43937: LD_ADDR_VAR 0 7
43941: PUSH
43942: LD_VAR 0 7
43946: PPUSH
43947: LD_INT 1
43949: PPUSH
43950: LD_VAR 0 14
43954: PPUSH
43955: CALL_OW 2
43959: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43960: LD_VAR 0 14
43964: PPUSH
43965: LD_VAR 0 12
43969: PUSH
43970: LD_INT 1
43972: ARRAY
43973: PPUSH
43974: CALL_OW 52
// end ;
43978: GO 43617
43980: POP
43981: POP
// end ;
43982: GO 42919
43984: POP
43985: POP
// result := result ^ buildings ;
43986: LD_ADDR_VAR 0 7
43990: PUSH
43991: LD_VAR 0 7
43995: PUSH
43996: LD_VAR 0 18
44000: ADD
44001: ST_TO_ADDR
// end else
44002: GO 44145
// begin for i = 1 to personel do
44004: LD_ADDR_VAR 0 8
44008: PUSH
44009: DOUBLE
44010: LD_INT 1
44012: DEC
44013: ST_TO_ADDR
44014: LD_VAR 0 6
44018: PUSH
44019: FOR_TO
44020: IFFALSE 44143
// begin if i > 4 then
44022: LD_VAR 0 8
44026: PUSH
44027: LD_INT 4
44029: GREATER
44030: IFFALSE 44034
// break ;
44032: GO 44143
// x := personel [ i ] ;
44034: LD_ADDR_VAR 0 13
44038: PUSH
44039: LD_VAR 0 6
44043: PUSH
44044: LD_VAR 0 8
44048: ARRAY
44049: ST_TO_ADDR
// if x = - 1 then
44050: LD_VAR 0 13
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: EQUAL
44059: IFFALSE 44063
// continue ;
44061: GO 44019
// PrepareHuman ( false , i , skill ) ;
44063: LD_INT 0
44065: PPUSH
44066: LD_VAR 0 8
44070: PPUSH
44071: LD_VAR 0 4
44075: PPUSH
44076: CALL_OW 380
// un := CreateHuman ;
44080: LD_ADDR_VAR 0 14
44084: PUSH
44085: CALL_OW 44
44089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44090: LD_VAR 0 14
44094: PPUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 250
44104: PPUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 251
44114: PPUSH
44115: LD_INT 10
44117: PPUSH
44118: LD_INT 0
44120: PPUSH
44121: CALL_OW 50
// result := result ^ un ;
44125: LD_ADDR_VAR 0 7
44129: PUSH
44130: LD_VAR 0 7
44134: PUSH
44135: LD_VAR 0 14
44139: ADD
44140: ST_TO_ADDR
// end ;
44141: GO 44019
44143: POP
44144: POP
// end ; end ;
44145: LD_VAR 0 7
44149: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44150: LD_INT 0
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
// result := false ;
44168: LD_ADDR_VAR 0 3
44172: PUSH
44173: LD_INT 0
44175: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44176: LD_VAR 0 1
44180: NOT
44181: PUSH
44182: LD_VAR 0 1
44186: PPUSH
44187: CALL_OW 266
44191: PUSH
44192: LD_INT 32
44194: PUSH
44195: LD_INT 33
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: IN
44202: NOT
44203: OR
44204: IFFALSE 44208
// exit ;
44206: GO 45317
// nat := GetNation ( tower ) ;
44208: LD_ADDR_VAR 0 12
44212: PUSH
44213: LD_VAR 0 1
44217: PPUSH
44218: CALL_OW 248
44222: ST_TO_ADDR
// side := GetSide ( tower ) ;
44223: LD_ADDR_VAR 0 16
44227: PUSH
44228: LD_VAR 0 1
44232: PPUSH
44233: CALL_OW 255
44237: ST_TO_ADDR
// x := GetX ( tower ) ;
44238: LD_ADDR_VAR 0 10
44242: PUSH
44243: LD_VAR 0 1
44247: PPUSH
44248: CALL_OW 250
44252: ST_TO_ADDR
// y := GetY ( tower ) ;
44253: LD_ADDR_VAR 0 11
44257: PUSH
44258: LD_VAR 0 1
44262: PPUSH
44263: CALL_OW 251
44267: ST_TO_ADDR
// if not x or not y then
44268: LD_VAR 0 10
44272: NOT
44273: PUSH
44274: LD_VAR 0 11
44278: NOT
44279: OR
44280: IFFALSE 44284
// exit ;
44282: GO 45317
// weapon := 0 ;
44284: LD_ADDR_VAR 0 18
44288: PUSH
44289: LD_INT 0
44291: ST_TO_ADDR
// fac_list := [ ] ;
44292: LD_ADDR_VAR 0 17
44296: PUSH
44297: EMPTY
44298: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44299: LD_ADDR_VAR 0 6
44303: PUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 274
44313: PPUSH
44314: LD_VAR 0 2
44318: PPUSH
44319: LD_INT 0
44321: PPUSH
44322: CALL 41888 0 3
44326: PPUSH
44327: LD_INT 30
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PPUSH
44337: CALL_OW 72
44341: ST_TO_ADDR
// if not factories then
44342: LD_VAR 0 6
44346: NOT
44347: IFFALSE 44351
// exit ;
44349: GO 45317
// for i in factories do
44351: LD_ADDR_VAR 0 8
44355: PUSH
44356: LD_VAR 0 6
44360: PUSH
44361: FOR_IN
44362: IFFALSE 44387
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44364: LD_ADDR_VAR 0 17
44368: PUSH
44369: LD_VAR 0 17
44373: PUSH
44374: LD_VAR 0 8
44378: PPUSH
44379: CALL_OW 478
44383: UNION
44384: ST_TO_ADDR
44385: GO 44361
44387: POP
44388: POP
// if not fac_list then
44389: LD_VAR 0 17
44393: NOT
44394: IFFALSE 44398
// exit ;
44396: GO 45317
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44398: LD_ADDR_VAR 0 5
44402: PUSH
44403: LD_INT 4
44405: PUSH
44406: LD_INT 5
44408: PUSH
44409: LD_INT 9
44411: PUSH
44412: LD_INT 10
44414: PUSH
44415: LD_INT 6
44417: PUSH
44418: LD_INT 7
44420: PUSH
44421: LD_INT 11
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 27
44435: PUSH
44436: LD_INT 28
44438: PUSH
44439: LD_INT 26
44441: PUSH
44442: LD_INT 30
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 43
44453: PUSH
44454: LD_INT 44
44456: PUSH
44457: LD_INT 46
44459: PUSH
44460: LD_INT 45
44462: PUSH
44463: LD_INT 47
44465: PUSH
44466: LD_INT 49
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: PUSH
44482: LD_VAR 0 12
44486: ARRAY
44487: ST_TO_ADDR
// list := list isect fac_list ;
44488: LD_ADDR_VAR 0 5
44492: PUSH
44493: LD_VAR 0 5
44497: PUSH
44498: LD_VAR 0 17
44502: ISECT
44503: ST_TO_ADDR
// if not list then
44504: LD_VAR 0 5
44508: NOT
44509: IFFALSE 44513
// exit ;
44511: GO 45317
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44513: LD_VAR 0 12
44517: PUSH
44518: LD_INT 3
44520: EQUAL
44521: PUSH
44522: LD_INT 49
44524: PUSH
44525: LD_VAR 0 5
44529: IN
44530: AND
44531: PUSH
44532: LD_INT 31
44534: PPUSH
44535: LD_VAR 0 16
44539: PPUSH
44540: CALL_OW 321
44544: PUSH
44545: LD_INT 2
44547: EQUAL
44548: AND
44549: IFFALSE 44609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44551: LD_INT 22
44553: PUSH
44554: LD_VAR 0 16
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 35
44565: PUSH
44566: LD_INT 49
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 91
44575: PUSH
44576: LD_VAR 0 1
44580: PUSH
44581: LD_INT 10
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: LIST
44593: PPUSH
44594: CALL_OW 69
44598: NOT
44599: IFFALSE 44609
// weapon := ru_time_lapser ;
44601: LD_ADDR_VAR 0 18
44605: PUSH
44606: LD_INT 49
44608: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44609: LD_VAR 0 12
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: IN
44624: PUSH
44625: LD_INT 11
44627: PUSH
44628: LD_VAR 0 5
44632: IN
44633: PUSH
44634: LD_INT 30
44636: PUSH
44637: LD_VAR 0 5
44641: IN
44642: OR
44643: AND
44644: PUSH
44645: LD_INT 6
44647: PPUSH
44648: LD_VAR 0 16
44652: PPUSH
44653: CALL_OW 321
44657: PUSH
44658: LD_INT 2
44660: EQUAL
44661: AND
44662: IFFALSE 44827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44664: LD_INT 22
44666: PUSH
44667: LD_VAR 0 16
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: LD_INT 35
44681: PUSH
44682: LD_INT 11
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 35
44691: PUSH
44692: LD_INT 30
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 91
44706: PUSH
44707: LD_VAR 0 1
44711: PUSH
44712: LD_INT 18
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: LIST
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: PPUSH
44725: CALL_OW 69
44729: NOT
44730: PUSH
44731: LD_INT 22
44733: PUSH
44734: LD_VAR 0 16
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: LD_INT 30
44748: PUSH
44749: LD_INT 32
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 30
44758: PUSH
44759: LD_INT 33
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 91
44773: PUSH
44774: LD_VAR 0 1
44778: PUSH
44779: LD_INT 12
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: PPUSH
44795: CALL_OW 69
44799: PUSH
44800: LD_INT 2
44802: GREATER
44803: AND
44804: IFFALSE 44827
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44806: LD_ADDR_VAR 0 18
44810: PUSH
44811: LD_INT 11
44813: PUSH
44814: LD_INT 30
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_VAR 0 12
44825: ARRAY
44826: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44827: LD_VAR 0 18
44831: NOT
44832: PUSH
44833: LD_INT 40
44835: PPUSH
44836: LD_VAR 0 16
44840: PPUSH
44841: CALL_OW 321
44845: PUSH
44846: LD_INT 2
44848: EQUAL
44849: AND
44850: PUSH
44851: LD_INT 7
44853: PUSH
44854: LD_VAR 0 5
44858: IN
44859: PUSH
44860: LD_INT 28
44862: PUSH
44863: LD_VAR 0 5
44867: IN
44868: OR
44869: PUSH
44870: LD_INT 45
44872: PUSH
44873: LD_VAR 0 5
44877: IN
44878: OR
44879: AND
44880: IFFALSE 45134
// begin hex := GetHexInfo ( x , y ) ;
44882: LD_ADDR_VAR 0 4
44886: PUSH
44887: LD_VAR 0 10
44891: PPUSH
44892: LD_VAR 0 11
44896: PPUSH
44897: CALL_OW 546
44901: ST_TO_ADDR
// if hex [ 1 ] then
44902: LD_VAR 0 4
44906: PUSH
44907: LD_INT 1
44909: ARRAY
44910: IFFALSE 44914
// exit ;
44912: GO 45317
// height := hex [ 2 ] ;
44914: LD_ADDR_VAR 0 15
44918: PUSH
44919: LD_VAR 0 4
44923: PUSH
44924: LD_INT 2
44926: ARRAY
44927: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44928: LD_ADDR_VAR 0 14
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 3
44941: PUSH
44942: LD_INT 5
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: ST_TO_ADDR
// for i in tmp do
44951: LD_ADDR_VAR 0 8
44955: PUSH
44956: LD_VAR 0 14
44960: PUSH
44961: FOR_IN
44962: IFFALSE 45132
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44964: LD_ADDR_VAR 0 9
44968: PUSH
44969: LD_VAR 0 10
44973: PPUSH
44974: LD_VAR 0 8
44978: PPUSH
44979: LD_INT 5
44981: PPUSH
44982: CALL_OW 272
44986: PUSH
44987: LD_VAR 0 11
44991: PPUSH
44992: LD_VAR 0 8
44996: PPUSH
44997: LD_INT 5
44999: PPUSH
45000: CALL_OW 273
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45009: LD_VAR 0 9
45013: PUSH
45014: LD_INT 1
45016: ARRAY
45017: PPUSH
45018: LD_VAR 0 9
45022: PUSH
45023: LD_INT 2
45025: ARRAY
45026: PPUSH
45027: CALL_OW 488
45031: IFFALSE 45130
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45033: LD_ADDR_VAR 0 4
45037: PUSH
45038: LD_VAR 0 9
45042: PUSH
45043: LD_INT 1
45045: ARRAY
45046: PPUSH
45047: LD_VAR 0 9
45051: PUSH
45052: LD_INT 2
45054: ARRAY
45055: PPUSH
45056: CALL_OW 546
45060: ST_TO_ADDR
// if hex [ 1 ] then
45061: LD_VAR 0 4
45065: PUSH
45066: LD_INT 1
45068: ARRAY
45069: IFFALSE 45073
// continue ;
45071: GO 44961
// h := hex [ 2 ] ;
45073: LD_ADDR_VAR 0 13
45077: PUSH
45078: LD_VAR 0 4
45082: PUSH
45083: LD_INT 2
45085: ARRAY
45086: ST_TO_ADDR
// if h + 7 < height then
45087: LD_VAR 0 13
45091: PUSH
45092: LD_INT 7
45094: PLUS
45095: PUSH
45096: LD_VAR 0 15
45100: LESS
45101: IFFALSE 45130
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45103: LD_ADDR_VAR 0 18
45107: PUSH
45108: LD_INT 7
45110: PUSH
45111: LD_INT 28
45113: PUSH
45114: LD_INT 45
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: PUSH
45122: LD_VAR 0 12
45126: ARRAY
45127: ST_TO_ADDR
// break ;
45128: GO 45132
// end ; end ; end ;
45130: GO 44961
45132: POP
45133: POP
// end ; if not weapon then
45134: LD_VAR 0 18
45138: NOT
45139: IFFALSE 45199
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45141: LD_ADDR_VAR 0 5
45145: PUSH
45146: LD_VAR 0 5
45150: PUSH
45151: LD_INT 11
45153: PUSH
45154: LD_INT 30
45156: PUSH
45157: LD_INT 49
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: DIFF
45165: ST_TO_ADDR
// if not list then
45166: LD_VAR 0 5
45170: NOT
45171: IFFALSE 45175
// exit ;
45173: GO 45317
// weapon := list [ rand ( 1 , list ) ] ;
45175: LD_ADDR_VAR 0 18
45179: PUSH
45180: LD_VAR 0 5
45184: PUSH
45185: LD_INT 1
45187: PPUSH
45188: LD_VAR 0 5
45192: PPUSH
45193: CALL_OW 12
45197: ARRAY
45198: ST_TO_ADDR
// end ; if weapon then
45199: LD_VAR 0 18
45203: IFFALSE 45317
// begin tmp := CostOfWeapon ( weapon ) ;
45205: LD_ADDR_VAR 0 14
45209: PUSH
45210: LD_VAR 0 18
45214: PPUSH
45215: CALL_OW 451
45219: ST_TO_ADDR
// j := GetBase ( tower ) ;
45220: LD_ADDR_VAR 0 9
45224: PUSH
45225: LD_VAR 0 1
45229: PPUSH
45230: CALL_OW 274
45234: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45235: LD_VAR 0 9
45239: PPUSH
45240: LD_INT 1
45242: PPUSH
45243: CALL_OW 275
45247: PUSH
45248: LD_VAR 0 14
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: GREATEREQUAL
45257: PUSH
45258: LD_VAR 0 9
45262: PPUSH
45263: LD_INT 2
45265: PPUSH
45266: CALL_OW 275
45270: PUSH
45271: LD_VAR 0 14
45275: PUSH
45276: LD_INT 2
45278: ARRAY
45279: GREATEREQUAL
45280: AND
45281: PUSH
45282: LD_VAR 0 9
45286: PPUSH
45287: LD_INT 3
45289: PPUSH
45290: CALL_OW 275
45294: PUSH
45295: LD_VAR 0 14
45299: PUSH
45300: LD_INT 3
45302: ARRAY
45303: GREATEREQUAL
45304: AND
45305: IFFALSE 45317
// result := weapon ;
45307: LD_ADDR_VAR 0 3
45311: PUSH
45312: LD_VAR 0 18
45316: ST_TO_ADDR
// end ; end ;
45317: LD_VAR 0 3
45321: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45322: LD_INT 0
45324: PPUSH
45325: PPUSH
// result := true ;
45326: LD_ADDR_VAR 0 3
45330: PUSH
45331: LD_INT 1
45333: ST_TO_ADDR
// if array1 = array2 then
45334: LD_VAR 0 1
45338: PUSH
45339: LD_VAR 0 2
45343: EQUAL
45344: IFFALSE 45404
// begin for i = 1 to array1 do
45346: LD_ADDR_VAR 0 4
45350: PUSH
45351: DOUBLE
45352: LD_INT 1
45354: DEC
45355: ST_TO_ADDR
45356: LD_VAR 0 1
45360: PUSH
45361: FOR_TO
45362: IFFALSE 45400
// if array1 [ i ] <> array2 [ i ] then
45364: LD_VAR 0 1
45368: PUSH
45369: LD_VAR 0 4
45373: ARRAY
45374: PUSH
45375: LD_VAR 0 2
45379: PUSH
45380: LD_VAR 0 4
45384: ARRAY
45385: NONEQUAL
45386: IFFALSE 45398
// begin result := false ;
45388: LD_ADDR_VAR 0 3
45392: PUSH
45393: LD_INT 0
45395: ST_TO_ADDR
// break ;
45396: GO 45400
// end ;
45398: GO 45361
45400: POP
45401: POP
// end else
45402: GO 45412
// result := false ;
45404: LD_ADDR_VAR 0 3
45408: PUSH
45409: LD_INT 0
45411: ST_TO_ADDR
// end ;
45412: LD_VAR 0 3
45416: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45417: LD_INT 0
45419: PPUSH
45420: PPUSH
// if not array1 or not array2 then
45421: LD_VAR 0 1
45425: NOT
45426: PUSH
45427: LD_VAR 0 2
45431: NOT
45432: OR
45433: IFFALSE 45437
// exit ;
45435: GO 45501
// result := true ;
45437: LD_ADDR_VAR 0 3
45441: PUSH
45442: LD_INT 1
45444: ST_TO_ADDR
// for i = 1 to array1 do
45445: LD_ADDR_VAR 0 4
45449: PUSH
45450: DOUBLE
45451: LD_INT 1
45453: DEC
45454: ST_TO_ADDR
45455: LD_VAR 0 1
45459: PUSH
45460: FOR_TO
45461: IFFALSE 45499
// if array1 [ i ] <> array2 [ i ] then
45463: LD_VAR 0 1
45467: PUSH
45468: LD_VAR 0 4
45472: ARRAY
45473: PUSH
45474: LD_VAR 0 2
45478: PUSH
45479: LD_VAR 0 4
45483: ARRAY
45484: NONEQUAL
45485: IFFALSE 45497
// begin result := false ;
45487: LD_ADDR_VAR 0 3
45491: PUSH
45492: LD_INT 0
45494: ST_TO_ADDR
// break ;
45495: GO 45499
// end ;
45497: GO 45460
45499: POP
45500: POP
// end ;
45501: LD_VAR 0 3
45505: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45506: LD_INT 0
45508: PPUSH
45509: PPUSH
45510: PPUSH
// pom := GetBase ( fac ) ;
45511: LD_ADDR_VAR 0 5
45515: PUSH
45516: LD_VAR 0 1
45520: PPUSH
45521: CALL_OW 274
45525: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45526: LD_ADDR_VAR 0 4
45530: PUSH
45531: LD_VAR 0 2
45535: PUSH
45536: LD_INT 1
45538: ARRAY
45539: PPUSH
45540: LD_VAR 0 2
45544: PUSH
45545: LD_INT 2
45547: ARRAY
45548: PPUSH
45549: LD_VAR 0 2
45553: PUSH
45554: LD_INT 3
45556: ARRAY
45557: PPUSH
45558: LD_VAR 0 2
45562: PUSH
45563: LD_INT 4
45565: ARRAY
45566: PPUSH
45567: CALL_OW 449
45571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45572: LD_ADDR_VAR 0 3
45576: PUSH
45577: LD_VAR 0 5
45581: PPUSH
45582: LD_INT 1
45584: PPUSH
45585: CALL_OW 275
45589: PUSH
45590: LD_VAR 0 4
45594: PUSH
45595: LD_INT 1
45597: ARRAY
45598: GREATEREQUAL
45599: PUSH
45600: LD_VAR 0 5
45604: PPUSH
45605: LD_INT 2
45607: PPUSH
45608: CALL_OW 275
45612: PUSH
45613: LD_VAR 0 4
45617: PUSH
45618: LD_INT 2
45620: ARRAY
45621: GREATEREQUAL
45622: AND
45623: PUSH
45624: LD_VAR 0 5
45628: PPUSH
45629: LD_INT 3
45631: PPUSH
45632: CALL_OW 275
45636: PUSH
45637: LD_VAR 0 4
45641: PUSH
45642: LD_INT 3
45644: ARRAY
45645: GREATEREQUAL
45646: AND
45647: ST_TO_ADDR
// end ;
45648: LD_VAR 0 3
45652: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45653: LD_INT 0
45655: PPUSH
45656: PPUSH
45657: PPUSH
45658: PPUSH
// pom := GetBase ( building ) ;
45659: LD_ADDR_VAR 0 3
45663: PUSH
45664: LD_VAR 0 1
45668: PPUSH
45669: CALL_OW 274
45673: ST_TO_ADDR
// if not pom then
45674: LD_VAR 0 3
45678: NOT
45679: IFFALSE 45683
// exit ;
45681: GO 45853
// btype := GetBType ( building ) ;
45683: LD_ADDR_VAR 0 5
45687: PUSH
45688: LD_VAR 0 1
45692: PPUSH
45693: CALL_OW 266
45697: ST_TO_ADDR
// if btype = b_armoury then
45698: LD_VAR 0 5
45702: PUSH
45703: LD_INT 4
45705: EQUAL
45706: IFFALSE 45716
// btype := b_barracks ;
45708: LD_ADDR_VAR 0 5
45712: PUSH
45713: LD_INT 5
45715: ST_TO_ADDR
// if btype = b_depot then
45716: LD_VAR 0 5
45720: PUSH
45721: LD_INT 0
45723: EQUAL
45724: IFFALSE 45734
// btype := b_warehouse ;
45726: LD_ADDR_VAR 0 5
45730: PUSH
45731: LD_INT 1
45733: ST_TO_ADDR
// if btype = b_workshop then
45734: LD_VAR 0 5
45738: PUSH
45739: LD_INT 2
45741: EQUAL
45742: IFFALSE 45752
// btype := b_factory ;
45744: LD_ADDR_VAR 0 5
45748: PUSH
45749: LD_INT 3
45751: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45752: LD_ADDR_VAR 0 4
45756: PUSH
45757: LD_VAR 0 5
45761: PPUSH
45762: LD_VAR 0 1
45766: PPUSH
45767: CALL_OW 248
45771: PPUSH
45772: CALL_OW 450
45776: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45777: LD_ADDR_VAR 0 2
45781: PUSH
45782: LD_VAR 0 3
45786: PPUSH
45787: LD_INT 1
45789: PPUSH
45790: CALL_OW 275
45794: PUSH
45795: LD_VAR 0 4
45799: PUSH
45800: LD_INT 1
45802: ARRAY
45803: GREATEREQUAL
45804: PUSH
45805: LD_VAR 0 3
45809: PPUSH
45810: LD_INT 2
45812: PPUSH
45813: CALL_OW 275
45817: PUSH
45818: LD_VAR 0 4
45822: PUSH
45823: LD_INT 2
45825: ARRAY
45826: GREATEREQUAL
45827: AND
45828: PUSH
45829: LD_VAR 0 3
45833: PPUSH
45834: LD_INT 3
45836: PPUSH
45837: CALL_OW 275
45841: PUSH
45842: LD_VAR 0 4
45846: PUSH
45847: LD_INT 3
45849: ARRAY
45850: GREATEREQUAL
45851: AND
45852: ST_TO_ADDR
// end ;
45853: LD_VAR 0 2
45857: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45858: LD_INT 0
45860: PPUSH
45861: PPUSH
45862: PPUSH
// pom := GetBase ( building ) ;
45863: LD_ADDR_VAR 0 4
45867: PUSH
45868: LD_VAR 0 1
45872: PPUSH
45873: CALL_OW 274
45877: ST_TO_ADDR
// if not pom then
45878: LD_VAR 0 4
45882: NOT
45883: IFFALSE 45887
// exit ;
45885: GO 45988
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45887: LD_ADDR_VAR 0 5
45891: PUSH
45892: LD_VAR 0 2
45896: PPUSH
45897: LD_VAR 0 1
45901: PPUSH
45902: CALL_OW 248
45906: PPUSH
45907: CALL_OW 450
45911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45912: LD_ADDR_VAR 0 3
45916: PUSH
45917: LD_VAR 0 4
45921: PPUSH
45922: LD_INT 1
45924: PPUSH
45925: CALL_OW 275
45929: PUSH
45930: LD_VAR 0 5
45934: PUSH
45935: LD_INT 1
45937: ARRAY
45938: GREATEREQUAL
45939: PUSH
45940: LD_VAR 0 4
45944: PPUSH
45945: LD_INT 2
45947: PPUSH
45948: CALL_OW 275
45952: PUSH
45953: LD_VAR 0 5
45957: PUSH
45958: LD_INT 2
45960: ARRAY
45961: GREATEREQUAL
45962: AND
45963: PUSH
45964: LD_VAR 0 4
45968: PPUSH
45969: LD_INT 3
45971: PPUSH
45972: CALL_OW 275
45976: PUSH
45977: LD_VAR 0 5
45981: PUSH
45982: LD_INT 3
45984: ARRAY
45985: GREATEREQUAL
45986: AND
45987: ST_TO_ADDR
// end ;
45988: LD_VAR 0 3
45992: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45993: LD_INT 0
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
// result := false ;
46006: LD_ADDR_VAR 0 8
46010: PUSH
46011: LD_INT 0
46013: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46014: LD_VAR 0 5
46018: NOT
46019: PUSH
46020: LD_VAR 0 1
46024: NOT
46025: OR
46026: PUSH
46027: LD_VAR 0 2
46031: NOT
46032: OR
46033: PUSH
46034: LD_VAR 0 3
46038: NOT
46039: OR
46040: IFFALSE 46044
// exit ;
46042: GO 46858
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46044: LD_ADDR_VAR 0 14
46048: PUSH
46049: LD_VAR 0 1
46053: PPUSH
46054: LD_VAR 0 2
46058: PPUSH
46059: LD_VAR 0 3
46063: PPUSH
46064: LD_VAR 0 4
46068: PPUSH
46069: LD_VAR 0 5
46073: PUSH
46074: LD_INT 1
46076: ARRAY
46077: PPUSH
46078: CALL_OW 248
46082: PPUSH
46083: LD_INT 0
46085: PPUSH
46086: CALL 48095 0 6
46090: ST_TO_ADDR
// if not hexes then
46091: LD_VAR 0 14
46095: NOT
46096: IFFALSE 46100
// exit ;
46098: GO 46858
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46100: LD_ADDR_VAR 0 17
46104: PUSH
46105: LD_VAR 0 5
46109: PPUSH
46110: LD_INT 22
46112: PUSH
46113: LD_VAR 0 13
46117: PPUSH
46118: CALL_OW 255
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 30
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 30
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: LIST
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PPUSH
46159: CALL_OW 72
46163: ST_TO_ADDR
// for i = 1 to hexes do
46164: LD_ADDR_VAR 0 9
46168: PUSH
46169: DOUBLE
46170: LD_INT 1
46172: DEC
46173: ST_TO_ADDR
46174: LD_VAR 0 14
46178: PUSH
46179: FOR_TO
46180: IFFALSE 46856
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46182: LD_ADDR_VAR 0 13
46186: PUSH
46187: LD_VAR 0 14
46191: PUSH
46192: LD_VAR 0 9
46196: ARRAY
46197: PUSH
46198: LD_INT 1
46200: ARRAY
46201: PPUSH
46202: LD_VAR 0 14
46206: PUSH
46207: LD_VAR 0 9
46211: ARRAY
46212: PUSH
46213: LD_INT 2
46215: ARRAY
46216: PPUSH
46217: CALL_OW 428
46221: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46222: LD_VAR 0 14
46226: PUSH
46227: LD_VAR 0 9
46231: ARRAY
46232: PUSH
46233: LD_INT 1
46235: ARRAY
46236: PPUSH
46237: LD_VAR 0 14
46241: PUSH
46242: LD_VAR 0 9
46246: ARRAY
46247: PUSH
46248: LD_INT 2
46250: ARRAY
46251: PPUSH
46252: CALL_OW 351
46256: PUSH
46257: LD_VAR 0 14
46261: PUSH
46262: LD_VAR 0 9
46266: ARRAY
46267: PUSH
46268: LD_INT 1
46270: ARRAY
46271: PPUSH
46272: LD_VAR 0 14
46276: PUSH
46277: LD_VAR 0 9
46281: ARRAY
46282: PUSH
46283: LD_INT 2
46285: ARRAY
46286: PPUSH
46287: CALL_OW 488
46291: NOT
46292: OR
46293: PUSH
46294: LD_VAR 0 13
46298: PPUSH
46299: CALL_OW 247
46303: PUSH
46304: LD_INT 3
46306: EQUAL
46307: OR
46308: IFFALSE 46314
// exit ;
46310: POP
46311: POP
46312: GO 46858
// if not tmp then
46314: LD_VAR 0 13
46318: NOT
46319: IFFALSE 46323
// continue ;
46321: GO 46179
// result := true ;
46323: LD_ADDR_VAR 0 8
46327: PUSH
46328: LD_INT 1
46330: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46331: LD_VAR 0 6
46335: PUSH
46336: LD_VAR 0 13
46340: PPUSH
46341: CALL_OW 247
46345: PUSH
46346: LD_INT 2
46348: EQUAL
46349: AND
46350: PUSH
46351: LD_VAR 0 13
46355: PPUSH
46356: CALL_OW 263
46360: PUSH
46361: LD_INT 1
46363: EQUAL
46364: AND
46365: IFFALSE 46529
// begin if IsDrivenBy ( tmp ) then
46367: LD_VAR 0 13
46371: PPUSH
46372: CALL_OW 311
46376: IFFALSE 46380
// continue ;
46378: GO 46179
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46380: LD_VAR 0 6
46384: PPUSH
46385: LD_INT 3
46387: PUSH
46388: LD_INT 60
46390: PUSH
46391: EMPTY
46392: LIST
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 55
46403: PUSH
46404: EMPTY
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PPUSH
46415: CALL_OW 72
46419: IFFALSE 46527
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46421: LD_ADDR_VAR 0 18
46425: PUSH
46426: LD_VAR 0 6
46430: PPUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 60
46436: PUSH
46437: EMPTY
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 55
46449: PUSH
46450: EMPTY
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PPUSH
46461: CALL_OW 72
46465: PUSH
46466: LD_INT 1
46468: ARRAY
46469: ST_TO_ADDR
// if IsInUnit ( driver ) then
46470: LD_VAR 0 18
46474: PPUSH
46475: CALL_OW 310
46479: IFFALSE 46490
// ComExit ( driver ) ;
46481: LD_VAR 0 18
46485: PPUSH
46486: CALL 71223 0 1
// AddComEnterUnit ( driver , tmp ) ;
46490: LD_VAR 0 18
46494: PPUSH
46495: LD_VAR 0 13
46499: PPUSH
46500: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46504: LD_VAR 0 18
46508: PPUSH
46509: LD_VAR 0 7
46513: PPUSH
46514: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46518: LD_VAR 0 18
46522: PPUSH
46523: CALL_OW 181
// end ; continue ;
46527: GO 46179
// end ; if not cleaners or not tmp in cleaners then
46529: LD_VAR 0 6
46533: NOT
46534: PUSH
46535: LD_VAR 0 13
46539: PUSH
46540: LD_VAR 0 6
46544: IN
46545: NOT
46546: OR
46547: IFFALSE 46854
// begin if dep then
46549: LD_VAR 0 17
46553: IFFALSE 46689
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46555: LD_ADDR_VAR 0 16
46559: PUSH
46560: LD_VAR 0 17
46564: PUSH
46565: LD_INT 1
46567: ARRAY
46568: PPUSH
46569: CALL_OW 250
46573: PPUSH
46574: LD_VAR 0 17
46578: PUSH
46579: LD_INT 1
46581: ARRAY
46582: PPUSH
46583: CALL_OW 254
46587: PPUSH
46588: LD_INT 5
46590: PPUSH
46591: CALL_OW 272
46595: PUSH
46596: LD_VAR 0 17
46600: PUSH
46601: LD_INT 1
46603: ARRAY
46604: PPUSH
46605: CALL_OW 251
46609: PPUSH
46610: LD_VAR 0 17
46614: PUSH
46615: LD_INT 1
46617: ARRAY
46618: PPUSH
46619: CALL_OW 254
46623: PPUSH
46624: LD_INT 5
46626: PPUSH
46627: CALL_OW 273
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46636: LD_VAR 0 16
46640: PUSH
46641: LD_INT 1
46643: ARRAY
46644: PPUSH
46645: LD_VAR 0 16
46649: PUSH
46650: LD_INT 2
46652: ARRAY
46653: PPUSH
46654: CALL_OW 488
46658: IFFALSE 46689
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46660: LD_VAR 0 13
46664: PPUSH
46665: LD_VAR 0 16
46669: PUSH
46670: LD_INT 1
46672: ARRAY
46673: PPUSH
46674: LD_VAR 0 16
46678: PUSH
46679: LD_INT 2
46681: ARRAY
46682: PPUSH
46683: CALL_OW 111
// continue ;
46687: GO 46179
// end ; end ; r := GetDir ( tmp ) ;
46689: LD_ADDR_VAR 0 15
46693: PUSH
46694: LD_VAR 0 13
46698: PPUSH
46699: CALL_OW 254
46703: ST_TO_ADDR
// if r = 5 then
46704: LD_VAR 0 15
46708: PUSH
46709: LD_INT 5
46711: EQUAL
46712: IFFALSE 46722
// r := 0 ;
46714: LD_ADDR_VAR 0 15
46718: PUSH
46719: LD_INT 0
46721: ST_TO_ADDR
// for j = r to 5 do
46722: LD_ADDR_VAR 0 10
46726: PUSH
46727: DOUBLE
46728: LD_VAR 0 15
46732: DEC
46733: ST_TO_ADDR
46734: LD_INT 5
46736: PUSH
46737: FOR_TO
46738: IFFALSE 46852
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46740: LD_ADDR_VAR 0 11
46744: PUSH
46745: LD_VAR 0 13
46749: PPUSH
46750: CALL_OW 250
46754: PPUSH
46755: LD_VAR 0 10
46759: PPUSH
46760: LD_INT 2
46762: PPUSH
46763: CALL_OW 272
46767: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46768: LD_ADDR_VAR 0 12
46772: PUSH
46773: LD_VAR 0 13
46777: PPUSH
46778: CALL_OW 251
46782: PPUSH
46783: LD_VAR 0 10
46787: PPUSH
46788: LD_INT 2
46790: PPUSH
46791: CALL_OW 273
46795: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46796: LD_VAR 0 11
46800: PPUSH
46801: LD_VAR 0 12
46805: PPUSH
46806: CALL_OW 488
46810: PUSH
46811: LD_VAR 0 11
46815: PPUSH
46816: LD_VAR 0 12
46820: PPUSH
46821: CALL_OW 428
46825: NOT
46826: AND
46827: IFFALSE 46850
// begin ComMoveXY ( tmp , _x , _y ) ;
46829: LD_VAR 0 13
46833: PPUSH
46834: LD_VAR 0 11
46838: PPUSH
46839: LD_VAR 0 12
46843: PPUSH
46844: CALL_OW 111
// break ;
46848: GO 46852
// end ; end ;
46850: GO 46737
46852: POP
46853: POP
// end ; end ;
46854: GO 46179
46856: POP
46857: POP
// end ;
46858: LD_VAR 0 8
46862: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46863: LD_INT 0
46865: PPUSH
// result := true ;
46866: LD_ADDR_VAR 0 3
46870: PUSH
46871: LD_INT 1
46873: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46874: LD_VAR 0 2
46878: PUSH
46879: LD_INT 24
46881: DOUBLE
46882: EQUAL
46883: IFTRUE 46893
46885: LD_INT 33
46887: DOUBLE
46888: EQUAL
46889: IFTRUE 46893
46891: GO 46918
46893: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46894: LD_ADDR_VAR 0 3
46898: PUSH
46899: LD_INT 32
46901: PPUSH
46902: LD_VAR 0 1
46906: PPUSH
46907: CALL_OW 321
46911: PUSH
46912: LD_INT 2
46914: EQUAL
46915: ST_TO_ADDR
46916: GO 47238
46918: LD_INT 20
46920: DOUBLE
46921: EQUAL
46922: IFTRUE 46926
46924: GO 46951
46926: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46927: LD_ADDR_VAR 0 3
46931: PUSH
46932: LD_INT 6
46934: PPUSH
46935: LD_VAR 0 1
46939: PPUSH
46940: CALL_OW 321
46944: PUSH
46945: LD_INT 2
46947: EQUAL
46948: ST_TO_ADDR
46949: GO 47238
46951: LD_INT 22
46953: DOUBLE
46954: EQUAL
46955: IFTRUE 46965
46957: LD_INT 36
46959: DOUBLE
46960: EQUAL
46961: IFTRUE 46965
46963: GO 46990
46965: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46966: LD_ADDR_VAR 0 3
46970: PUSH
46971: LD_INT 15
46973: PPUSH
46974: LD_VAR 0 1
46978: PPUSH
46979: CALL_OW 321
46983: PUSH
46984: LD_INT 2
46986: EQUAL
46987: ST_TO_ADDR
46988: GO 47238
46990: LD_INT 30
46992: DOUBLE
46993: EQUAL
46994: IFTRUE 46998
46996: GO 47023
46998: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46999: LD_ADDR_VAR 0 3
47003: PUSH
47004: LD_INT 20
47006: PPUSH
47007: LD_VAR 0 1
47011: PPUSH
47012: CALL_OW 321
47016: PUSH
47017: LD_INT 2
47019: EQUAL
47020: ST_TO_ADDR
47021: GO 47238
47023: LD_INT 28
47025: DOUBLE
47026: EQUAL
47027: IFTRUE 47037
47029: LD_INT 21
47031: DOUBLE
47032: EQUAL
47033: IFTRUE 47037
47035: GO 47062
47037: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47038: LD_ADDR_VAR 0 3
47042: PUSH
47043: LD_INT 21
47045: PPUSH
47046: LD_VAR 0 1
47050: PPUSH
47051: CALL_OW 321
47055: PUSH
47056: LD_INT 2
47058: EQUAL
47059: ST_TO_ADDR
47060: GO 47238
47062: LD_INT 16
47064: DOUBLE
47065: EQUAL
47066: IFTRUE 47070
47068: GO 47097
47070: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47071: LD_ADDR_VAR 0 3
47075: PUSH
47076: LD_EXP 50
47080: PPUSH
47081: LD_VAR 0 1
47085: PPUSH
47086: CALL_OW 321
47090: PUSH
47091: LD_INT 2
47093: EQUAL
47094: ST_TO_ADDR
47095: GO 47238
47097: LD_INT 19
47099: DOUBLE
47100: EQUAL
47101: IFTRUE 47111
47103: LD_INT 23
47105: DOUBLE
47106: EQUAL
47107: IFTRUE 47111
47109: GO 47138
47111: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47112: LD_ADDR_VAR 0 3
47116: PUSH
47117: LD_EXP 49
47121: PPUSH
47122: LD_VAR 0 1
47126: PPUSH
47127: CALL_OW 321
47131: PUSH
47132: LD_INT 2
47134: EQUAL
47135: ST_TO_ADDR
47136: GO 47238
47138: LD_INT 17
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 47171
47146: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47147: LD_ADDR_VAR 0 3
47151: PUSH
47152: LD_INT 39
47154: PPUSH
47155: LD_VAR 0 1
47159: PPUSH
47160: CALL_OW 321
47164: PUSH
47165: LD_INT 2
47167: EQUAL
47168: ST_TO_ADDR
47169: GO 47238
47171: LD_INT 18
47173: DOUBLE
47174: EQUAL
47175: IFTRUE 47179
47177: GO 47204
47179: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47180: LD_ADDR_VAR 0 3
47184: PUSH
47185: LD_INT 40
47187: PPUSH
47188: LD_VAR 0 1
47192: PPUSH
47193: CALL_OW 321
47197: PUSH
47198: LD_INT 2
47200: EQUAL
47201: ST_TO_ADDR
47202: GO 47238
47204: LD_INT 27
47206: DOUBLE
47207: EQUAL
47208: IFTRUE 47212
47210: GO 47237
47212: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47213: LD_ADDR_VAR 0 3
47217: PUSH
47218: LD_INT 35
47220: PPUSH
47221: LD_VAR 0 1
47225: PPUSH
47226: CALL_OW 321
47230: PUSH
47231: LD_INT 2
47233: EQUAL
47234: ST_TO_ADDR
47235: GO 47238
47237: POP
// end ;
47238: LD_VAR 0 3
47242: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47243: LD_INT 0
47245: PPUSH
47246: PPUSH
47247: PPUSH
47248: PPUSH
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
47253: PPUSH
47254: PPUSH
47255: PPUSH
// result := false ;
47256: LD_ADDR_VAR 0 6
47260: PUSH
47261: LD_INT 0
47263: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47264: LD_VAR 0 1
47268: NOT
47269: PUSH
47270: LD_VAR 0 1
47274: PPUSH
47275: CALL_OW 266
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: IN
47290: NOT
47291: OR
47292: PUSH
47293: LD_VAR 0 2
47297: NOT
47298: OR
47299: PUSH
47300: LD_VAR 0 5
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 4
47319: PUSH
47320: LD_INT 5
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: IN
47331: NOT
47332: OR
47333: PUSH
47334: LD_VAR 0 3
47338: PPUSH
47339: LD_VAR 0 4
47343: PPUSH
47344: CALL_OW 488
47348: NOT
47349: OR
47350: IFFALSE 47354
// exit ;
47352: GO 48090
// side := GetSide ( depot ) ;
47354: LD_ADDR_VAR 0 9
47358: PUSH
47359: LD_VAR 0 1
47363: PPUSH
47364: CALL_OW 255
47368: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47369: LD_VAR 0 9
47373: PPUSH
47374: LD_VAR 0 2
47378: PPUSH
47379: CALL 46863 0 2
47383: NOT
47384: IFFALSE 47388
// exit ;
47386: GO 48090
// pom := GetBase ( depot ) ;
47388: LD_ADDR_VAR 0 10
47392: PUSH
47393: LD_VAR 0 1
47397: PPUSH
47398: CALL_OW 274
47402: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47403: LD_ADDR_VAR 0 11
47407: PUSH
47408: LD_VAR 0 2
47412: PPUSH
47413: LD_VAR 0 1
47417: PPUSH
47418: CALL_OW 248
47422: PPUSH
47423: CALL_OW 450
47427: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47428: LD_VAR 0 10
47432: PPUSH
47433: LD_INT 1
47435: PPUSH
47436: CALL_OW 275
47440: PUSH
47441: LD_VAR 0 11
47445: PUSH
47446: LD_INT 1
47448: ARRAY
47449: GREATEREQUAL
47450: PUSH
47451: LD_VAR 0 10
47455: PPUSH
47456: LD_INT 2
47458: PPUSH
47459: CALL_OW 275
47463: PUSH
47464: LD_VAR 0 11
47468: PUSH
47469: LD_INT 2
47471: ARRAY
47472: GREATEREQUAL
47473: AND
47474: PUSH
47475: LD_VAR 0 10
47479: PPUSH
47480: LD_INT 3
47482: PPUSH
47483: CALL_OW 275
47487: PUSH
47488: LD_VAR 0 11
47492: PUSH
47493: LD_INT 3
47495: ARRAY
47496: GREATEREQUAL
47497: AND
47498: NOT
47499: IFFALSE 47503
// exit ;
47501: GO 48090
// if GetBType ( depot ) = b_depot then
47503: LD_VAR 0 1
47507: PPUSH
47508: CALL_OW 266
47512: PUSH
47513: LD_INT 0
47515: EQUAL
47516: IFFALSE 47528
// dist := 28 else
47518: LD_ADDR_VAR 0 14
47522: PUSH
47523: LD_INT 28
47525: ST_TO_ADDR
47526: GO 47536
// dist := 36 ;
47528: LD_ADDR_VAR 0 14
47532: PUSH
47533: LD_INT 36
47535: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47536: LD_VAR 0 1
47540: PPUSH
47541: LD_VAR 0 3
47545: PPUSH
47546: LD_VAR 0 4
47550: PPUSH
47551: CALL_OW 297
47555: PUSH
47556: LD_VAR 0 14
47560: GREATER
47561: IFFALSE 47565
// exit ;
47563: GO 48090
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47565: LD_ADDR_VAR 0 12
47569: PUSH
47570: LD_VAR 0 2
47574: PPUSH
47575: LD_VAR 0 3
47579: PPUSH
47580: LD_VAR 0 4
47584: PPUSH
47585: LD_VAR 0 5
47589: PPUSH
47590: LD_VAR 0 1
47594: PPUSH
47595: CALL_OW 248
47599: PPUSH
47600: LD_INT 0
47602: PPUSH
47603: CALL 48095 0 6
47607: ST_TO_ADDR
// if not hexes then
47608: LD_VAR 0 12
47612: NOT
47613: IFFALSE 47617
// exit ;
47615: GO 48090
// hex := GetHexInfo ( x , y ) ;
47617: LD_ADDR_VAR 0 15
47621: PUSH
47622: LD_VAR 0 3
47626: PPUSH
47627: LD_VAR 0 4
47631: PPUSH
47632: CALL_OW 546
47636: ST_TO_ADDR
// if hex [ 1 ] then
47637: LD_VAR 0 15
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: IFFALSE 47649
// exit ;
47647: GO 48090
// height := hex [ 2 ] ;
47649: LD_ADDR_VAR 0 13
47653: PUSH
47654: LD_VAR 0 15
47658: PUSH
47659: LD_INT 2
47661: ARRAY
47662: ST_TO_ADDR
// for i = 1 to hexes do
47663: LD_ADDR_VAR 0 7
47667: PUSH
47668: DOUBLE
47669: LD_INT 1
47671: DEC
47672: ST_TO_ADDR
47673: LD_VAR 0 12
47677: PUSH
47678: FOR_TO
47679: IFFALSE 48009
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47681: LD_VAR 0 12
47685: PUSH
47686: LD_VAR 0 7
47690: ARRAY
47691: PUSH
47692: LD_INT 1
47694: ARRAY
47695: PPUSH
47696: LD_VAR 0 12
47700: PUSH
47701: LD_VAR 0 7
47705: ARRAY
47706: PUSH
47707: LD_INT 2
47709: ARRAY
47710: PPUSH
47711: CALL_OW 488
47715: NOT
47716: PUSH
47717: LD_VAR 0 12
47721: PUSH
47722: LD_VAR 0 7
47726: ARRAY
47727: PUSH
47728: LD_INT 1
47730: ARRAY
47731: PPUSH
47732: LD_VAR 0 12
47736: PUSH
47737: LD_VAR 0 7
47741: ARRAY
47742: PUSH
47743: LD_INT 2
47745: ARRAY
47746: PPUSH
47747: CALL_OW 428
47751: PUSH
47752: LD_INT 0
47754: GREATER
47755: OR
47756: PUSH
47757: LD_VAR 0 12
47761: PUSH
47762: LD_VAR 0 7
47766: ARRAY
47767: PUSH
47768: LD_INT 1
47770: ARRAY
47771: PPUSH
47772: LD_VAR 0 12
47776: PUSH
47777: LD_VAR 0 7
47781: ARRAY
47782: PUSH
47783: LD_INT 2
47785: ARRAY
47786: PPUSH
47787: CALL_OW 351
47791: OR
47792: IFFALSE 47798
// exit ;
47794: POP
47795: POP
47796: GO 48090
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47798: LD_ADDR_VAR 0 8
47802: PUSH
47803: LD_VAR 0 12
47807: PUSH
47808: LD_VAR 0 7
47812: ARRAY
47813: PUSH
47814: LD_INT 1
47816: ARRAY
47817: PPUSH
47818: LD_VAR 0 12
47822: PUSH
47823: LD_VAR 0 7
47827: ARRAY
47828: PUSH
47829: LD_INT 2
47831: ARRAY
47832: PPUSH
47833: CALL_OW 546
47837: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47838: LD_VAR 0 8
47842: PUSH
47843: LD_INT 1
47845: ARRAY
47846: PUSH
47847: LD_VAR 0 8
47851: PUSH
47852: LD_INT 2
47854: ARRAY
47855: PUSH
47856: LD_VAR 0 13
47860: PUSH
47861: LD_INT 2
47863: PLUS
47864: GREATER
47865: OR
47866: PUSH
47867: LD_VAR 0 8
47871: PUSH
47872: LD_INT 2
47874: ARRAY
47875: PUSH
47876: LD_VAR 0 13
47880: PUSH
47881: LD_INT 2
47883: MINUS
47884: LESS
47885: OR
47886: PUSH
47887: LD_VAR 0 8
47891: PUSH
47892: LD_INT 3
47894: ARRAY
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 8
47901: PUSH
47902: LD_INT 9
47904: PUSH
47905: LD_INT 10
47907: PUSH
47908: LD_INT 11
47910: PUSH
47911: LD_INT 12
47913: PUSH
47914: LD_INT 13
47916: PUSH
47917: LD_INT 16
47919: PUSH
47920: LD_INT 17
47922: PUSH
47923: LD_INT 18
47925: PUSH
47926: LD_INT 19
47928: PUSH
47929: LD_INT 20
47931: PUSH
47932: LD_INT 21
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: IN
47950: NOT
47951: OR
47952: PUSH
47953: LD_VAR 0 8
47957: PUSH
47958: LD_INT 5
47960: ARRAY
47961: NOT
47962: OR
47963: PUSH
47964: LD_VAR 0 8
47968: PUSH
47969: LD_INT 6
47971: ARRAY
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 7
47981: PUSH
47982: LD_INT 9
47984: PUSH
47985: LD_INT 10
47987: PUSH
47988: LD_INT 11
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: IN
47999: NOT
48000: OR
48001: IFFALSE 48007
// exit ;
48003: POP
48004: POP
48005: GO 48090
// end ;
48007: GO 47678
48009: POP
48010: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48011: LD_VAR 0 9
48015: PPUSH
48016: LD_VAR 0 3
48020: PPUSH
48021: LD_VAR 0 4
48025: PPUSH
48026: LD_INT 20
48028: PPUSH
48029: CALL 40036 0 4
48033: PUSH
48034: LD_INT 4
48036: ARRAY
48037: IFFALSE 48041
// exit ;
48039: GO 48090
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48041: LD_VAR 0 2
48045: PUSH
48046: LD_INT 29
48048: PUSH
48049: LD_INT 30
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: IN
48056: PUSH
48057: LD_VAR 0 3
48061: PPUSH
48062: LD_VAR 0 4
48066: PPUSH
48067: LD_VAR 0 9
48071: PPUSH
48072: CALL_OW 440
48076: NOT
48077: AND
48078: IFFALSE 48082
// exit ;
48080: GO 48090
// result := true ;
48082: LD_ADDR_VAR 0 6
48086: PUSH
48087: LD_INT 1
48089: ST_TO_ADDR
// end ;
48090: LD_VAR 0 6
48094: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48095: LD_INT 0
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
48106: PPUSH
48107: PPUSH
48108: PPUSH
48109: PPUSH
48110: PPUSH
48111: PPUSH
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
48117: PPUSH
48118: PPUSH
48119: PPUSH
48120: PPUSH
48121: PPUSH
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
48126: PPUSH
48127: PPUSH
48128: PPUSH
48129: PPUSH
48130: PPUSH
48131: PPUSH
48132: PPUSH
48133: PPUSH
48134: PPUSH
48135: PPUSH
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
48141: PPUSH
48142: PPUSH
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
48150: PPUSH
48151: PPUSH
48152: PPUSH
48153: PPUSH
48154: PPUSH
// result = [ ] ;
48155: LD_ADDR_VAR 0 7
48159: PUSH
48160: EMPTY
48161: ST_TO_ADDR
// temp_list = [ ] ;
48162: LD_ADDR_VAR 0 9
48166: PUSH
48167: EMPTY
48168: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48169: LD_VAR 0 4
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: LD_INT 4
48188: PUSH
48189: LD_INT 5
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: IN
48200: NOT
48201: PUSH
48202: LD_VAR 0 1
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: IN
48217: PUSH
48218: LD_VAR 0 5
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: IN
48237: NOT
48238: AND
48239: OR
48240: IFFALSE 48244
// exit ;
48242: GO 66635
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48244: LD_VAR 0 1
48248: PUSH
48249: LD_INT 6
48251: PUSH
48252: LD_INT 7
48254: PUSH
48255: LD_INT 8
48257: PUSH
48258: LD_INT 13
48260: PUSH
48261: LD_INT 12
48263: PUSH
48264: LD_INT 15
48266: PUSH
48267: LD_INT 11
48269: PUSH
48270: LD_INT 14
48272: PUSH
48273: LD_INT 10
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: IN
48287: IFFALSE 48297
// btype = b_lab ;
48289: LD_ADDR_VAR 0 1
48293: PUSH
48294: LD_INT 6
48296: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48297: LD_VAR 0 6
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: IN
48316: NOT
48317: PUSH
48318: LD_VAR 0 1
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: LD_INT 6
48337: PUSH
48338: LD_INT 36
48340: PUSH
48341: LD_INT 4
48343: PUSH
48344: LD_INT 5
48346: PUSH
48347: LD_INT 31
48349: PUSH
48350: LD_INT 32
48352: PUSH
48353: LD_INT 33
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: IN
48369: NOT
48370: PUSH
48371: LD_VAR 0 6
48375: PUSH
48376: LD_INT 1
48378: EQUAL
48379: AND
48380: OR
48381: PUSH
48382: LD_VAR 0 1
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: LD_INT 3
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: IN
48397: NOT
48398: PUSH
48399: LD_VAR 0 6
48403: PUSH
48404: LD_INT 2
48406: EQUAL
48407: AND
48408: OR
48409: IFFALSE 48419
// mode = 0 ;
48411: LD_ADDR_VAR 0 6
48415: PUSH
48416: LD_INT 0
48418: ST_TO_ADDR
// case mode of 0 :
48419: LD_VAR 0 6
48423: PUSH
48424: LD_INT 0
48426: DOUBLE
48427: EQUAL
48428: IFTRUE 48432
48430: GO 59885
48432: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48433: LD_ADDR_VAR 0 11
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 3
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 3
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48626: LD_ADDR_VAR 0 12
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48822: LD_ADDR_VAR 0 13
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 3
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49021: LD_ADDR_VAR 0 14
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49217: LD_ADDR_VAR 0 15
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 3
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49410: LD_ADDR_VAR 0 16
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49603: LD_ADDR_VAR 0 17
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49833: LD_ADDR_VAR 0 18
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50063: LD_ADDR_VAR 0 19
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50293: LD_ADDR_VAR 0 20
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50523: LD_ADDR_VAR 0 21
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50753: LD_ADDR_VAR 0 22
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50983: LD_ADDR_VAR 0 23
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51263: LD_ADDR_VAR 0 24
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51539: LD_ADDR_VAR 0 25
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51813: LD_ADDR_VAR 0 26
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52089: LD_ADDR_VAR 0 27
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52369: LD_ADDR_VAR 0 28
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 3
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 3
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52651: LD_ADDR_VAR 0 29
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52930: LD_ADDR_VAR 0 30
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 3
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53208: LD_ADDR_VAR 0 31
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: LD_INT 3
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53486: LD_ADDR_VAR 0 32
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 3
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53764: LD_ADDR_VAR 0 33
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54043: LD_ADDR_VAR 0 34
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 3
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54323: LD_ADDR_VAR 0 35
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54435: LD_ADDR_VAR 0 36
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54547: LD_ADDR_VAR 0 37
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54659: LD_ADDR_VAR 0 38
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54771: LD_ADDR_VAR 0 39
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54883: LD_ADDR_VAR 0 40
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54995: LD_ADDR_VAR 0 41
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 3
55304: NEG
55305: PUSH
55306: LD_INT 3
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55345: LD_ADDR_VAR 0 42
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 3
55642: NEG
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 3
55654: NEG
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55695: LD_ADDR_VAR 0 43
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56043: LD_ADDR_VAR 0 44
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 3
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56393: LD_ADDR_VAR 0 45
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56743: LD_ADDR_VAR 0 46
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 3
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57091: LD_ADDR_VAR 0 47
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57242: LD_ADDR_VAR 0 48
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 2
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57389: LD_ADDR_VAR 0 49
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57533: LD_ADDR_VAR 0 50
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57677: LD_ADDR_VAR 0 51
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57824: LD_ADDR_VAR 0 52
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57975: LD_ADDR_VAR 0 53
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58205: LD_ADDR_VAR 0 54
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58435: LD_ADDR_VAR 0 55
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58665: LD_ADDR_VAR 0 56
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58895: LD_ADDR_VAR 0 57
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59125: LD_ADDR_VAR 0 58
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59355: LD_ADDR_VAR 0 59
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59443: LD_ADDR_VAR 0 60
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59531: LD_ADDR_VAR 0 61
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59619: LD_ADDR_VAR 0 62
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59707: LD_ADDR_VAR 0 63
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59795: LD_ADDR_VAR 0 64
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: ST_TO_ADDR
// end ; 1 :
59883: GO 65780
59885: LD_INT 1
59887: DOUBLE
59888: EQUAL
59889: IFTRUE 59893
59891: GO 62516
59893: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59894: LD_ADDR_VAR 0 11
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: LIST
59937: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59938: LD_ADDR_VAR 0 12
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 3
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59979: LD_ADDR_VAR 0 13
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 3
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60019: LD_ADDR_VAR 0 14
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 3
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60060: LD_ADDR_VAR 0 15
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: LIST
60103: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60104: LD_ADDR_VAR 0 16
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: LD_INT 3
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60150: LD_ADDR_VAR 0 17
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 3
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60194: LD_ADDR_VAR 0 18
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60235: LD_ADDR_VAR 0 19
60239: PUSH
60240: LD_INT 3
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 3
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60275: LD_ADDR_VAR 0 20
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: LIST
60315: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60316: LD_ADDR_VAR 0 21
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60360: LD_ADDR_VAR 0 22
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: LD_INT 3
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 3
60379: NEG
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60406: LD_ADDR_VAR 0 23
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: LD_INT 4
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 3
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60450: LD_ADDR_VAR 0 24
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: LIST
60490: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60491: LD_ADDR_VAR 0 25
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 4
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60531: LD_ADDR_VAR 0 26
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 4
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 3
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60572: LD_ADDR_VAR 0 27
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: NEG
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 4
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60616: LD_ADDR_VAR 0 28
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: LD_INT 3
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 3
60635: NEG
60636: PUSH
60637: LD_INT 4
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 4
60647: NEG
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60662: LD_ADDR_VAR 0 29
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 3
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 3
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 4
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 4
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 3
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 5
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: LD_INT 5
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: LD_INT 4
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 6
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 6
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 5
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60817: LD_ADDR_VAR 0 30
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 3
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 4
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 4
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 4
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 5
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 5
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 5
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 6
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 6
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60960: LD_ADDR_VAR 0 31
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 4
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: LD_INT 4
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 5
61027: PUSH
61028: LD_INT 4
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 5
61037: PUSH
61038: LD_INT 5
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 4
61047: PUSH
61048: LD_INT 5
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 6
61057: PUSH
61058: LD_INT 5
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 6
61067: PUSH
61068: LD_INT 6
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 5
61077: PUSH
61078: LD_INT 6
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61099: LD_ADDR_VAR 0 32
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 3
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 4
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 5
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 5
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 4
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 6
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: LD_INT 6
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: LD_INT 5
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61242: LD_ADDR_VAR 0 33
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 3
61260: NEG
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 4
61294: NEG
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 4
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 5
61328: NEG
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 5
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 5
61351: NEG
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 6
61362: NEG
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 6
61373: NEG
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61397: LD_ADDR_VAR 0 34
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: LD_INT 3
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: LD_INT 2
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: LD_INT 4
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 4
61452: NEG
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 4
61464: NEG
61465: PUSH
61466: LD_INT 4
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 4
61476: NEG
61477: PUSH
61478: LD_INT 5
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 5
61488: NEG
61489: PUSH
61490: LD_INT 4
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 5
61500: NEG
61501: PUSH
61502: LD_INT 5
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 5
61512: NEG
61513: PUSH
61514: LD_INT 6
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 6
61524: NEG
61525: PUSH
61526: LD_INT 5
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 6
61536: NEG
61537: PUSH
61538: LD_INT 6
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61560: LD_ADDR_VAR 0 41
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 2
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61604: LD_ADDR_VAR 0 42
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61645: LD_ADDR_VAR 0 43
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61685: LD_ADDR_VAR 0 44
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: LIST
61725: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61726: LD_ADDR_VAR 0 45
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61770: LD_ADDR_VAR 0 46
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: LD_INT 2
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 2
61789: NEG
61790: PUSH
61791: LD_INT 3
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61816: LD_ADDR_VAR 0 47
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 3
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61849: LD_ADDR_VAR 0 48
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61880: LD_ADDR_VAR 0 49
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 3
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61909: LD_ADDR_VAR 0 50
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: LD_INT 3
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61938: LD_ADDR_VAR 0 51
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 2
61956: NEG
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61969: LD_ADDR_VAR 0 52
61973: PUSH
61974: LD_INT 3
61976: NEG
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 3
61988: NEG
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62002: LD_ADDR_VAR 0 53
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62046: LD_ADDR_VAR 0 54
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62087: LD_ADDR_VAR 0 55
62091: PUSH
62092: LD_INT 3
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: LD_INT 3
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62127: LD_ADDR_VAR 0 56
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 3
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: LD_INT 2
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62168: LD_ADDR_VAR 0 57
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 3
62186: NEG
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 3
62197: NEG
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62212: LD_ADDR_VAR 0 58
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 3
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 3
62231: NEG
62232: PUSH
62233: LD_INT 2
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: NEG
62244: PUSH
62245: LD_INT 3
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62258: LD_ADDR_VAR 0 59
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62302: LD_ADDR_VAR 0 60
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62343: LD_ADDR_VAR 0 61
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62383: LD_ADDR_VAR 0 62
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62424: LD_ADDR_VAR 0 63
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62468: LD_ADDR_VAR 0 64
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: ST_TO_ADDR
// end ; 2 :
62514: GO 65780
62516: LD_INT 2
62518: DOUBLE
62519: EQUAL
62520: IFTRUE 62524
62522: GO 65779
62524: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62525: LD_ADDR_VAR 0 29
62529: PUSH
62530: LD_INT 4
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 4
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 5
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 5
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: LD_INT 2
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 5
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 3
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 4
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 4
62655: PUSH
62656: LD_INT 4
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 3
62665: PUSH
62666: LD_INT 4
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 4
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 4
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 4
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 5
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 5
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 4
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 5
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: NEG
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 3
62819: NEG
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 3
62853: NEG
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 4
62864: NEG
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 4
62875: NEG
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 4
62887: NEG
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 4
62910: NEG
62911: PUSH
62912: LD_INT 4
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 4
62922: NEG
62923: PUSH
62924: LD_INT 5
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: NEG
62935: PUSH
62936: LD_INT 4
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: NEG
62947: PUSH
62948: LD_INT 3
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 4
62958: NEG
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 5
62970: NEG
62971: PUSH
62972: LD_INT 4
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 5
62982: NEG
62983: PUSH
62984: LD_INT 5
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 3
62994: NEG
62995: PUSH
62996: LD_INT 5
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 5
63006: NEG
63007: PUSH
63008: LD_INT 3
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63063: LD_ADDR_VAR 0 30
63067: PUSH
63068: LD_INT 4
63070: PUSH
63071: LD_INT 4
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 4
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 5
63090: PUSH
63091: LD_INT 4
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 5
63100: PUSH
63101: LD_INT 5
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 4
63110: PUSH
63111: LD_INT 5
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 3
63120: PUSH
63121: LD_INT 4
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: LD_INT 3
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 5
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: PUSH
63151: LD_INT 5
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 3
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 4
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 4
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 3
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 2
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: LD_INT 4
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 2
63242: NEG
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 4
63253: NEG
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 4
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 3
63276: NEG
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 3
63287: NEG
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 4
63298: NEG
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 5
63309: NEG
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 5
63320: NEG
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 5
63332: NEG
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 3
63344: NEG
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: LD_INT 3
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 3
63367: NEG
63368: PUSH
63369: LD_INT 4
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: LD_INT 3
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 3
63403: NEG
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: LD_INT 3
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 4
63427: NEG
63428: PUSH
63429: LD_INT 4
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: NEG
63440: PUSH
63441: LD_INT 4
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 4
63451: NEG
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 4
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 5
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 4
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 3
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 0
63507: PUSH
63508: LD_INT 3
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: LD_INT 4
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: LD_INT 5
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: LD_INT 3
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: LD_INT 5
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63610: LD_ADDR_VAR 0 31
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 4
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 3
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 5
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 4
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 3
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: PUSH
63690: LD_INT 5
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: LD_INT 3
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 3
63710: NEG
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 3
63721: NEG
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 2
63733: NEG
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 3
63755: NEG
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 4
63766: NEG
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 4
63777: NEG
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 4
63789: NEG
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 4
63812: NEG
63813: PUSH
63814: LD_INT 4
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 4
63824: NEG
63825: PUSH
63826: LD_INT 5
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 3
63836: NEG
63837: PUSH
63838: LD_INT 4
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 3
63848: NEG
63849: PUSH
63850: LD_INT 3
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 4
63860: NEG
63861: PUSH
63862: LD_INT 3
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 5
63872: NEG
63873: PUSH
63874: LD_INT 4
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 5
63884: NEG
63885: PUSH
63886: LD_INT 5
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 3
63896: NEG
63897: PUSH
63898: LD_INT 5
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 5
63908: NEG
63909: PUSH
63910: LD_INT 3
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 3
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: LD_INT 4
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: LD_INT 3
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: LD_INT 2
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 2
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: LD_INT 4
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: LD_INT 4
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 4
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 4
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 5
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 5
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 4
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 3
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 3
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 3
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 5
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64160: LD_ADDR_VAR 0 32
64164: PUSH
64165: LD_INT 4
64167: NEG
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 4
64178: NEG
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 3
64190: NEG
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 4
64212: NEG
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 5
64223: NEG
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 5
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 5
64246: NEG
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 3
64258: NEG
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 3
64269: NEG
64270: PUSH
64271: LD_INT 3
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: NEG
64282: PUSH
64283: LD_INT 4
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: LD_INT 2
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 3
64317: NEG
64318: PUSH
64319: LD_INT 2
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 4
64329: NEG
64330: PUSH
64331: LD_INT 3
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 4
64341: NEG
64342: PUSH
64343: LD_INT 4
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 2
64353: NEG
64354: PUSH
64355: LD_INT 4
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 4
64365: NEG
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 4
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 5
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: LD_INT 4
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: LD_INT 3
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: LD_INT 4
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: LD_INT 5
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: LD_INT 3
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 2
64467: NEG
64468: PUSH
64469: LD_INT 5
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 3
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 4
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 4
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 3
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: LD_INT 2
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 4
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 4
64572: PUSH
64573: LD_INT 4
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 4
64582: PUSH
64583: LD_INT 3
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 5
64592: PUSH
64593: LD_INT 4
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 5
64602: PUSH
64603: LD_INT 5
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 4
64612: PUSH
64613: LD_INT 5
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: LD_INT 4
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: LD_INT 3
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 5
64642: PUSH
64643: LD_INT 3
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: LD_INT 5
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64707: LD_ADDR_VAR 0 33
64711: PUSH
64712: LD_INT 4
64714: NEG
64715: PUSH
64716: LD_INT 4
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 4
64726: NEG
64727: PUSH
64728: LD_INT 5
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: LD_INT 4
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 3
64750: NEG
64751: PUSH
64752: LD_INT 3
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 4
64762: NEG
64763: PUSH
64764: LD_INT 3
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 5
64774: NEG
64775: PUSH
64776: LD_INT 4
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 5
64786: NEG
64787: PUSH
64788: LD_INT 5
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 3
64798: NEG
64799: PUSH
64800: LD_INT 5
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 5
64810: NEG
64811: PUSH
64812: LD_INT 3
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 3
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 4
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 3
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: LD_INT 3
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: LD_INT 4
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: LD_INT 2
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: LD_INT 4
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 4
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 4
64934: PUSH
64935: LD_INT 1
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 5
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 5
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 4
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 3
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 3
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 3
64996: PUSH
64997: LD_INT 2
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 5
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: LD_INT 3
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 3
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 4
65037: PUSH
65038: LD_INT 3
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 4
65047: PUSH
65048: LD_INT 4
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: LD_INT 4
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 2
65077: PUSH
65078: LD_INT 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 4
65087: PUSH
65088: LD_INT 2
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: LD_INT 4
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 4
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: LD_INT 3
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: LD_INT 4
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: LD_INT 5
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 5
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: LD_INT 4
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: PUSH
65180: LD_INT 5
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65245: LD_ADDR_VAR 0 34
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: LD_INT 4
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 0
65263: PUSH
65264: LD_INT 5
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: LD_INT 4
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: LD_INT 3
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: LD_INT 4
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: LD_INT 5
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: LD_INT 3
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: LD_INT 5
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 3
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 4
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 4
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 3
65395: PUSH
65396: LD_INT 1
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 4
65437: PUSH
65438: LD_INT 2
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 4
65447: PUSH
65448: LD_INT 4
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 4
65457: PUSH
65458: LD_INT 3
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 5
65467: PUSH
65468: LD_INT 4
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 5
65477: PUSH
65478: LD_INT 5
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 4
65487: PUSH
65488: LD_INT 5
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: LD_INT 4
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 3
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 5
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 2
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 1
65567: PUSH
65568: LD_INT 4
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 4
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: LD_INT 3
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 2
65609: PUSH
65610: LD_INT 4
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: NEG
65620: PUSH
65621: LD_INT 2
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 4
65630: NEG
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 4
65641: NEG
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 3
65653: NEG
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: NEG
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 4
65675: NEG
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 5
65686: NEG
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 5
65697: NEG
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 5
65709: NEG
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: LD_INT 2
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: ST_TO_ADDR
// end ; end ;
65777: GO 65780
65779: POP
// case btype of b_depot , b_warehouse :
65780: LD_VAR 0 1
65784: PUSH
65785: LD_INT 0
65787: DOUBLE
65788: EQUAL
65789: IFTRUE 65799
65791: LD_INT 1
65793: DOUBLE
65794: EQUAL
65795: IFTRUE 65799
65797: GO 66000
65799: POP
// case nation of nation_american :
65800: LD_VAR 0 5
65804: PUSH
65805: LD_INT 1
65807: DOUBLE
65808: EQUAL
65809: IFTRUE 65813
65811: GO 65869
65813: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65814: LD_ADDR_VAR 0 9
65818: PUSH
65819: LD_VAR 0 11
65823: PUSH
65824: LD_VAR 0 12
65828: PUSH
65829: LD_VAR 0 13
65833: PUSH
65834: LD_VAR 0 14
65838: PUSH
65839: LD_VAR 0 15
65843: PUSH
65844: LD_VAR 0 16
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: PUSH
65857: LD_VAR 0 4
65861: PUSH
65862: LD_INT 1
65864: PLUS
65865: ARRAY
65866: ST_TO_ADDR
65867: GO 65998
65869: LD_INT 2
65871: DOUBLE
65872: EQUAL
65873: IFTRUE 65877
65875: GO 65933
65877: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65878: LD_ADDR_VAR 0 9
65882: PUSH
65883: LD_VAR 0 17
65887: PUSH
65888: LD_VAR 0 18
65892: PUSH
65893: LD_VAR 0 19
65897: PUSH
65898: LD_VAR 0 20
65902: PUSH
65903: LD_VAR 0 21
65907: PUSH
65908: LD_VAR 0 22
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: PUSH
65921: LD_VAR 0 4
65925: PUSH
65926: LD_INT 1
65928: PLUS
65929: ARRAY
65930: ST_TO_ADDR
65931: GO 65998
65933: LD_INT 3
65935: DOUBLE
65936: EQUAL
65937: IFTRUE 65941
65939: GO 65997
65941: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65942: LD_ADDR_VAR 0 9
65946: PUSH
65947: LD_VAR 0 23
65951: PUSH
65952: LD_VAR 0 24
65956: PUSH
65957: LD_VAR 0 25
65961: PUSH
65962: LD_VAR 0 26
65966: PUSH
65967: LD_VAR 0 27
65971: PUSH
65972: LD_VAR 0 28
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: PUSH
65985: LD_VAR 0 4
65989: PUSH
65990: LD_INT 1
65992: PLUS
65993: ARRAY
65994: ST_TO_ADDR
65995: GO 65998
65997: POP
65998: GO 66553
66000: LD_INT 2
66002: DOUBLE
66003: EQUAL
66004: IFTRUE 66014
66006: LD_INT 3
66008: DOUBLE
66009: EQUAL
66010: IFTRUE 66014
66012: GO 66070
66014: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66015: LD_ADDR_VAR 0 9
66019: PUSH
66020: LD_VAR 0 29
66024: PUSH
66025: LD_VAR 0 30
66029: PUSH
66030: LD_VAR 0 31
66034: PUSH
66035: LD_VAR 0 32
66039: PUSH
66040: LD_VAR 0 33
66044: PUSH
66045: LD_VAR 0 34
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: PUSH
66058: LD_VAR 0 4
66062: PUSH
66063: LD_INT 1
66065: PLUS
66066: ARRAY
66067: ST_TO_ADDR
66068: GO 66553
66070: LD_INT 16
66072: DOUBLE
66073: EQUAL
66074: IFTRUE 66132
66076: LD_INT 17
66078: DOUBLE
66079: EQUAL
66080: IFTRUE 66132
66082: LD_INT 18
66084: DOUBLE
66085: EQUAL
66086: IFTRUE 66132
66088: LD_INT 19
66090: DOUBLE
66091: EQUAL
66092: IFTRUE 66132
66094: LD_INT 22
66096: DOUBLE
66097: EQUAL
66098: IFTRUE 66132
66100: LD_INT 20
66102: DOUBLE
66103: EQUAL
66104: IFTRUE 66132
66106: LD_INT 21
66108: DOUBLE
66109: EQUAL
66110: IFTRUE 66132
66112: LD_INT 23
66114: DOUBLE
66115: EQUAL
66116: IFTRUE 66132
66118: LD_INT 24
66120: DOUBLE
66121: EQUAL
66122: IFTRUE 66132
66124: LD_INT 25
66126: DOUBLE
66127: EQUAL
66128: IFTRUE 66132
66130: GO 66188
66132: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66133: LD_ADDR_VAR 0 9
66137: PUSH
66138: LD_VAR 0 35
66142: PUSH
66143: LD_VAR 0 36
66147: PUSH
66148: LD_VAR 0 37
66152: PUSH
66153: LD_VAR 0 38
66157: PUSH
66158: LD_VAR 0 39
66162: PUSH
66163: LD_VAR 0 40
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: PUSH
66176: LD_VAR 0 4
66180: PUSH
66181: LD_INT 1
66183: PLUS
66184: ARRAY
66185: ST_TO_ADDR
66186: GO 66553
66188: LD_INT 6
66190: DOUBLE
66191: EQUAL
66192: IFTRUE 66244
66194: LD_INT 7
66196: DOUBLE
66197: EQUAL
66198: IFTRUE 66244
66200: LD_INT 8
66202: DOUBLE
66203: EQUAL
66204: IFTRUE 66244
66206: LD_INT 13
66208: DOUBLE
66209: EQUAL
66210: IFTRUE 66244
66212: LD_INT 12
66214: DOUBLE
66215: EQUAL
66216: IFTRUE 66244
66218: LD_INT 15
66220: DOUBLE
66221: EQUAL
66222: IFTRUE 66244
66224: LD_INT 11
66226: DOUBLE
66227: EQUAL
66228: IFTRUE 66244
66230: LD_INT 14
66232: DOUBLE
66233: EQUAL
66234: IFTRUE 66244
66236: LD_INT 10
66238: DOUBLE
66239: EQUAL
66240: IFTRUE 66244
66242: GO 66300
66244: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66245: LD_ADDR_VAR 0 9
66249: PUSH
66250: LD_VAR 0 41
66254: PUSH
66255: LD_VAR 0 42
66259: PUSH
66260: LD_VAR 0 43
66264: PUSH
66265: LD_VAR 0 44
66269: PUSH
66270: LD_VAR 0 45
66274: PUSH
66275: LD_VAR 0 46
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: PUSH
66288: LD_VAR 0 4
66292: PUSH
66293: LD_INT 1
66295: PLUS
66296: ARRAY
66297: ST_TO_ADDR
66298: GO 66553
66300: LD_INT 36
66302: DOUBLE
66303: EQUAL
66304: IFTRUE 66308
66306: GO 66364
66308: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66309: LD_ADDR_VAR 0 9
66313: PUSH
66314: LD_VAR 0 47
66318: PUSH
66319: LD_VAR 0 48
66323: PUSH
66324: LD_VAR 0 49
66328: PUSH
66329: LD_VAR 0 50
66333: PUSH
66334: LD_VAR 0 51
66338: PUSH
66339: LD_VAR 0 52
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: PUSH
66352: LD_VAR 0 4
66356: PUSH
66357: LD_INT 1
66359: PLUS
66360: ARRAY
66361: ST_TO_ADDR
66362: GO 66553
66364: LD_INT 4
66366: DOUBLE
66367: EQUAL
66368: IFTRUE 66390
66370: LD_INT 5
66372: DOUBLE
66373: EQUAL
66374: IFTRUE 66390
66376: LD_INT 34
66378: DOUBLE
66379: EQUAL
66380: IFTRUE 66390
66382: LD_INT 37
66384: DOUBLE
66385: EQUAL
66386: IFTRUE 66390
66388: GO 66446
66390: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66391: LD_ADDR_VAR 0 9
66395: PUSH
66396: LD_VAR 0 53
66400: PUSH
66401: LD_VAR 0 54
66405: PUSH
66406: LD_VAR 0 55
66410: PUSH
66411: LD_VAR 0 56
66415: PUSH
66416: LD_VAR 0 57
66420: PUSH
66421: LD_VAR 0 58
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: PUSH
66434: LD_VAR 0 4
66438: PUSH
66439: LD_INT 1
66441: PLUS
66442: ARRAY
66443: ST_TO_ADDR
66444: GO 66553
66446: LD_INT 31
66448: DOUBLE
66449: EQUAL
66450: IFTRUE 66496
66452: LD_INT 32
66454: DOUBLE
66455: EQUAL
66456: IFTRUE 66496
66458: LD_INT 33
66460: DOUBLE
66461: EQUAL
66462: IFTRUE 66496
66464: LD_INT 27
66466: DOUBLE
66467: EQUAL
66468: IFTRUE 66496
66470: LD_INT 26
66472: DOUBLE
66473: EQUAL
66474: IFTRUE 66496
66476: LD_INT 28
66478: DOUBLE
66479: EQUAL
66480: IFTRUE 66496
66482: LD_INT 29
66484: DOUBLE
66485: EQUAL
66486: IFTRUE 66496
66488: LD_INT 30
66490: DOUBLE
66491: EQUAL
66492: IFTRUE 66496
66494: GO 66552
66496: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66497: LD_ADDR_VAR 0 9
66501: PUSH
66502: LD_VAR 0 59
66506: PUSH
66507: LD_VAR 0 60
66511: PUSH
66512: LD_VAR 0 61
66516: PUSH
66517: LD_VAR 0 62
66521: PUSH
66522: LD_VAR 0 63
66526: PUSH
66527: LD_VAR 0 64
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: PUSH
66540: LD_VAR 0 4
66544: PUSH
66545: LD_INT 1
66547: PLUS
66548: ARRAY
66549: ST_TO_ADDR
66550: GO 66553
66552: POP
// temp_list2 = [ ] ;
66553: LD_ADDR_VAR 0 10
66557: PUSH
66558: EMPTY
66559: ST_TO_ADDR
// for i in temp_list do
66560: LD_ADDR_VAR 0 8
66564: PUSH
66565: LD_VAR 0 9
66569: PUSH
66570: FOR_IN
66571: IFFALSE 66623
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66573: LD_ADDR_VAR 0 10
66577: PUSH
66578: LD_VAR 0 10
66582: PUSH
66583: LD_VAR 0 8
66587: PUSH
66588: LD_INT 1
66590: ARRAY
66591: PUSH
66592: LD_VAR 0 2
66596: PLUS
66597: PUSH
66598: LD_VAR 0 8
66602: PUSH
66603: LD_INT 2
66605: ARRAY
66606: PUSH
66607: LD_VAR 0 3
66611: PLUS
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: EMPTY
66618: LIST
66619: ADD
66620: ST_TO_ADDR
66621: GO 66570
66623: POP
66624: POP
// result = temp_list2 ;
66625: LD_ADDR_VAR 0 7
66629: PUSH
66630: LD_VAR 0 10
66634: ST_TO_ADDR
// end ;
66635: LD_VAR 0 7
66639: RET
// export function EnemyInRange ( unit , dist ) ; begin
66640: LD_INT 0
66642: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66643: LD_ADDR_VAR 0 3
66647: PUSH
66648: LD_VAR 0 1
66652: PPUSH
66653: CALL_OW 255
66657: PPUSH
66658: LD_VAR 0 1
66662: PPUSH
66663: CALL_OW 250
66667: PPUSH
66668: LD_VAR 0 1
66672: PPUSH
66673: CALL_OW 251
66677: PPUSH
66678: LD_VAR 0 2
66682: PPUSH
66683: CALL 40036 0 4
66687: PUSH
66688: LD_INT 4
66690: ARRAY
66691: ST_TO_ADDR
// end ;
66692: LD_VAR 0 3
66696: RET
// export function PlayerSeeMe ( unit ) ; begin
66697: LD_INT 0
66699: PPUSH
// result := See ( your_side , unit ) ;
66700: LD_ADDR_VAR 0 2
66704: PUSH
66705: LD_OWVAR 2
66709: PPUSH
66710: LD_VAR 0 1
66714: PPUSH
66715: CALL_OW 292
66719: ST_TO_ADDR
// end ;
66720: LD_VAR 0 2
66724: RET
// export function ReverseDir ( unit ) ; begin
66725: LD_INT 0
66727: PPUSH
// if not unit then
66728: LD_VAR 0 1
66732: NOT
66733: IFFALSE 66737
// exit ;
66735: GO 66760
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66737: LD_ADDR_VAR 0 2
66741: PUSH
66742: LD_VAR 0 1
66746: PPUSH
66747: CALL_OW 254
66751: PUSH
66752: LD_INT 3
66754: PLUS
66755: PUSH
66756: LD_INT 6
66758: MOD
66759: ST_TO_ADDR
// end ;
66760: LD_VAR 0 2
66764: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66765: LD_INT 0
66767: PPUSH
66768: PPUSH
66769: PPUSH
66770: PPUSH
66771: PPUSH
// if not hexes then
66772: LD_VAR 0 2
66776: NOT
66777: IFFALSE 66781
// exit ;
66779: GO 66929
// dist := 9999 ;
66781: LD_ADDR_VAR 0 5
66785: PUSH
66786: LD_INT 9999
66788: ST_TO_ADDR
// for i = 1 to hexes do
66789: LD_ADDR_VAR 0 4
66793: PUSH
66794: DOUBLE
66795: LD_INT 1
66797: DEC
66798: ST_TO_ADDR
66799: LD_VAR 0 2
66803: PUSH
66804: FOR_TO
66805: IFFALSE 66917
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66807: LD_VAR 0 1
66811: PPUSH
66812: LD_VAR 0 2
66816: PUSH
66817: LD_VAR 0 4
66821: ARRAY
66822: PUSH
66823: LD_INT 1
66825: ARRAY
66826: PPUSH
66827: LD_VAR 0 2
66831: PUSH
66832: LD_VAR 0 4
66836: ARRAY
66837: PUSH
66838: LD_INT 2
66840: ARRAY
66841: PPUSH
66842: CALL_OW 297
66846: PUSH
66847: LD_VAR 0 5
66851: LESS
66852: IFFALSE 66915
// begin hex := hexes [ i ] ;
66854: LD_ADDR_VAR 0 7
66858: PUSH
66859: LD_VAR 0 2
66863: PUSH
66864: LD_VAR 0 4
66868: ARRAY
66869: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66870: LD_ADDR_VAR 0 5
66874: PUSH
66875: LD_VAR 0 1
66879: PPUSH
66880: LD_VAR 0 2
66884: PUSH
66885: LD_VAR 0 4
66889: ARRAY
66890: PUSH
66891: LD_INT 1
66893: ARRAY
66894: PPUSH
66895: LD_VAR 0 2
66899: PUSH
66900: LD_VAR 0 4
66904: ARRAY
66905: PUSH
66906: LD_INT 2
66908: ARRAY
66909: PPUSH
66910: CALL_OW 297
66914: ST_TO_ADDR
// end ; end ;
66915: GO 66804
66917: POP
66918: POP
// result := hex ;
66919: LD_ADDR_VAR 0 3
66923: PUSH
66924: LD_VAR 0 7
66928: ST_TO_ADDR
// end ;
66929: LD_VAR 0 3
66933: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66934: LD_INT 0
66936: PPUSH
66937: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66938: LD_VAR 0 1
66942: NOT
66943: PUSH
66944: LD_VAR 0 1
66948: PUSH
66949: LD_INT 21
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 23
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PPUSH
66973: CALL_OW 69
66977: IN
66978: NOT
66979: OR
66980: IFFALSE 66984
// exit ;
66982: GO 67031
// for i = 1 to 3 do
66984: LD_ADDR_VAR 0 3
66988: PUSH
66989: DOUBLE
66990: LD_INT 1
66992: DEC
66993: ST_TO_ADDR
66994: LD_INT 3
66996: PUSH
66997: FOR_TO
66998: IFFALSE 67029
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67000: LD_VAR 0 1
67004: PPUSH
67005: CALL_OW 250
67009: PPUSH
67010: LD_VAR 0 1
67014: PPUSH
67015: CALL_OW 251
67019: PPUSH
67020: LD_INT 1
67022: PPUSH
67023: CALL_OW 453
67027: GO 66997
67029: POP
67030: POP
// end ;
67031: LD_VAR 0 2
67035: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67036: LD_INT 0
67038: PPUSH
67039: PPUSH
67040: PPUSH
67041: PPUSH
67042: PPUSH
67043: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67044: LD_VAR 0 1
67048: NOT
67049: PUSH
67050: LD_VAR 0 2
67054: NOT
67055: OR
67056: PUSH
67057: LD_VAR 0 1
67061: PPUSH
67062: CALL_OW 314
67066: OR
67067: IFFALSE 67071
// exit ;
67069: GO 67512
// x := GetX ( enemy_unit ) ;
67071: LD_ADDR_VAR 0 7
67075: PUSH
67076: LD_VAR 0 2
67080: PPUSH
67081: CALL_OW 250
67085: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67086: LD_ADDR_VAR 0 8
67090: PUSH
67091: LD_VAR 0 2
67095: PPUSH
67096: CALL_OW 251
67100: ST_TO_ADDR
// if not x or not y then
67101: LD_VAR 0 7
67105: NOT
67106: PUSH
67107: LD_VAR 0 8
67111: NOT
67112: OR
67113: IFFALSE 67117
// exit ;
67115: GO 67512
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67117: LD_ADDR_VAR 0 6
67121: PUSH
67122: LD_VAR 0 7
67126: PPUSH
67127: LD_INT 0
67129: PPUSH
67130: LD_INT 4
67132: PPUSH
67133: CALL_OW 272
67137: PUSH
67138: LD_VAR 0 8
67142: PPUSH
67143: LD_INT 0
67145: PPUSH
67146: LD_INT 4
67148: PPUSH
67149: CALL_OW 273
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_VAR 0 7
67162: PPUSH
67163: LD_INT 1
67165: PPUSH
67166: LD_INT 4
67168: PPUSH
67169: CALL_OW 272
67173: PUSH
67174: LD_VAR 0 8
67178: PPUSH
67179: LD_INT 1
67181: PPUSH
67182: LD_INT 4
67184: PPUSH
67185: CALL_OW 273
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_VAR 0 7
67198: PPUSH
67199: LD_INT 2
67201: PPUSH
67202: LD_INT 4
67204: PPUSH
67205: CALL_OW 272
67209: PUSH
67210: LD_VAR 0 8
67214: PPUSH
67215: LD_INT 2
67217: PPUSH
67218: LD_INT 4
67220: PPUSH
67221: CALL_OW 273
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_VAR 0 7
67234: PPUSH
67235: LD_INT 3
67237: PPUSH
67238: LD_INT 4
67240: PPUSH
67241: CALL_OW 272
67245: PUSH
67246: LD_VAR 0 8
67250: PPUSH
67251: LD_INT 3
67253: PPUSH
67254: LD_INT 4
67256: PPUSH
67257: CALL_OW 273
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_VAR 0 7
67270: PPUSH
67271: LD_INT 4
67273: PPUSH
67274: LD_INT 4
67276: PPUSH
67277: CALL_OW 272
67281: PUSH
67282: LD_VAR 0 8
67286: PPUSH
67287: LD_INT 4
67289: PPUSH
67290: LD_INT 4
67292: PPUSH
67293: CALL_OW 273
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_VAR 0 7
67306: PPUSH
67307: LD_INT 5
67309: PPUSH
67310: LD_INT 4
67312: PPUSH
67313: CALL_OW 272
67317: PUSH
67318: LD_VAR 0 8
67322: PPUSH
67323: LD_INT 5
67325: PPUSH
67326: LD_INT 4
67328: PPUSH
67329: CALL_OW 273
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// for i = tmp downto 1 do
67346: LD_ADDR_VAR 0 4
67350: PUSH
67351: DOUBLE
67352: LD_VAR 0 6
67356: INC
67357: ST_TO_ADDR
67358: LD_INT 1
67360: PUSH
67361: FOR_DOWNTO
67362: IFFALSE 67463
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67364: LD_VAR 0 6
67368: PUSH
67369: LD_VAR 0 4
67373: ARRAY
67374: PUSH
67375: LD_INT 1
67377: ARRAY
67378: PPUSH
67379: LD_VAR 0 6
67383: PUSH
67384: LD_VAR 0 4
67388: ARRAY
67389: PUSH
67390: LD_INT 2
67392: ARRAY
67393: PPUSH
67394: CALL_OW 488
67398: NOT
67399: PUSH
67400: LD_VAR 0 6
67404: PUSH
67405: LD_VAR 0 4
67409: ARRAY
67410: PUSH
67411: LD_INT 1
67413: ARRAY
67414: PPUSH
67415: LD_VAR 0 6
67419: PUSH
67420: LD_VAR 0 4
67424: ARRAY
67425: PUSH
67426: LD_INT 2
67428: ARRAY
67429: PPUSH
67430: CALL_OW 428
67434: PUSH
67435: LD_INT 0
67437: NONEQUAL
67438: OR
67439: IFFALSE 67461
// tmp := Delete ( tmp , i ) ;
67441: LD_ADDR_VAR 0 6
67445: PUSH
67446: LD_VAR 0 6
67450: PPUSH
67451: LD_VAR 0 4
67455: PPUSH
67456: CALL_OW 3
67460: ST_TO_ADDR
67461: GO 67361
67463: POP
67464: POP
// j := GetClosestHex ( unit , tmp ) ;
67465: LD_ADDR_VAR 0 5
67469: PUSH
67470: LD_VAR 0 1
67474: PPUSH
67475: LD_VAR 0 6
67479: PPUSH
67480: CALL 66765 0 2
67484: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67485: LD_VAR 0 1
67489: PPUSH
67490: LD_VAR 0 5
67494: PUSH
67495: LD_INT 1
67497: ARRAY
67498: PPUSH
67499: LD_VAR 0 5
67503: PUSH
67504: LD_INT 2
67506: ARRAY
67507: PPUSH
67508: CALL_OW 111
// end ;
67512: LD_VAR 0 3
67516: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67517: LD_INT 0
67519: PPUSH
67520: PPUSH
67521: PPUSH
// uc_side = 0 ;
67522: LD_ADDR_OWVAR 20
67526: PUSH
67527: LD_INT 0
67529: ST_TO_ADDR
// uc_nation = 0 ;
67530: LD_ADDR_OWVAR 21
67534: PUSH
67535: LD_INT 0
67537: ST_TO_ADDR
// InitHc_All ( ) ;
67538: CALL_OW 584
// InitVc ;
67542: CALL_OW 20
// if mastodonts then
67546: LD_VAR 0 6
67550: IFFALSE 67617
// for i = 1 to mastodonts do
67552: LD_ADDR_VAR 0 11
67556: PUSH
67557: DOUBLE
67558: LD_INT 1
67560: DEC
67561: ST_TO_ADDR
67562: LD_VAR 0 6
67566: PUSH
67567: FOR_TO
67568: IFFALSE 67615
// begin vc_chassis := 31 ;
67570: LD_ADDR_OWVAR 37
67574: PUSH
67575: LD_INT 31
67577: ST_TO_ADDR
// vc_control := control_rider ;
67578: LD_ADDR_OWVAR 38
67582: PUSH
67583: LD_INT 4
67585: ST_TO_ADDR
// animal := CreateVehicle ;
67586: LD_ADDR_VAR 0 12
67590: PUSH
67591: CALL_OW 45
67595: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67596: LD_VAR 0 12
67600: PPUSH
67601: LD_VAR 0 8
67605: PPUSH
67606: LD_INT 0
67608: PPUSH
67609: CALL 69752 0 3
// end ;
67613: GO 67567
67615: POP
67616: POP
// if horses then
67617: LD_VAR 0 5
67621: IFFALSE 67688
// for i = 1 to horses do
67623: LD_ADDR_VAR 0 11
67627: PUSH
67628: DOUBLE
67629: LD_INT 1
67631: DEC
67632: ST_TO_ADDR
67633: LD_VAR 0 5
67637: PUSH
67638: FOR_TO
67639: IFFALSE 67686
// begin hc_class := 21 ;
67641: LD_ADDR_OWVAR 28
67645: PUSH
67646: LD_INT 21
67648: ST_TO_ADDR
// hc_gallery :=  ;
67649: LD_ADDR_OWVAR 33
67653: PUSH
67654: LD_STRING 
67656: ST_TO_ADDR
// animal := CreateHuman ;
67657: LD_ADDR_VAR 0 12
67661: PUSH
67662: CALL_OW 44
67666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67667: LD_VAR 0 12
67671: PPUSH
67672: LD_VAR 0 8
67676: PPUSH
67677: LD_INT 0
67679: PPUSH
67680: CALL 69752 0 3
// end ;
67684: GO 67638
67686: POP
67687: POP
// if birds then
67688: LD_VAR 0 1
67692: IFFALSE 67759
// for i = 1 to birds do
67694: LD_ADDR_VAR 0 11
67698: PUSH
67699: DOUBLE
67700: LD_INT 1
67702: DEC
67703: ST_TO_ADDR
67704: LD_VAR 0 1
67708: PUSH
67709: FOR_TO
67710: IFFALSE 67757
// begin hc_class = 18 ;
67712: LD_ADDR_OWVAR 28
67716: PUSH
67717: LD_INT 18
67719: ST_TO_ADDR
// hc_gallery =  ;
67720: LD_ADDR_OWVAR 33
67724: PUSH
67725: LD_STRING 
67727: ST_TO_ADDR
// animal := CreateHuman ;
67728: LD_ADDR_VAR 0 12
67732: PUSH
67733: CALL_OW 44
67737: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67738: LD_VAR 0 12
67742: PPUSH
67743: LD_VAR 0 8
67747: PPUSH
67748: LD_INT 0
67750: PPUSH
67751: CALL 69752 0 3
// end ;
67755: GO 67709
67757: POP
67758: POP
// if tigers then
67759: LD_VAR 0 2
67763: IFFALSE 67847
// for i = 1 to tigers do
67765: LD_ADDR_VAR 0 11
67769: PUSH
67770: DOUBLE
67771: LD_INT 1
67773: DEC
67774: ST_TO_ADDR
67775: LD_VAR 0 2
67779: PUSH
67780: FOR_TO
67781: IFFALSE 67845
// begin hc_class = class_tiger ;
67783: LD_ADDR_OWVAR 28
67787: PUSH
67788: LD_INT 14
67790: ST_TO_ADDR
// hc_gallery =  ;
67791: LD_ADDR_OWVAR 33
67795: PUSH
67796: LD_STRING 
67798: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67799: LD_ADDR_OWVAR 35
67803: PUSH
67804: LD_INT 7
67806: NEG
67807: PPUSH
67808: LD_INT 7
67810: PPUSH
67811: CALL_OW 12
67815: ST_TO_ADDR
// animal := CreateHuman ;
67816: LD_ADDR_VAR 0 12
67820: PUSH
67821: CALL_OW 44
67825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67826: LD_VAR 0 12
67830: PPUSH
67831: LD_VAR 0 8
67835: PPUSH
67836: LD_INT 0
67838: PPUSH
67839: CALL 69752 0 3
// end ;
67843: GO 67780
67845: POP
67846: POP
// if apemans then
67847: LD_VAR 0 3
67851: IFFALSE 67974
// for i = 1 to apemans do
67853: LD_ADDR_VAR 0 11
67857: PUSH
67858: DOUBLE
67859: LD_INT 1
67861: DEC
67862: ST_TO_ADDR
67863: LD_VAR 0 3
67867: PUSH
67868: FOR_TO
67869: IFFALSE 67972
// begin hc_class = class_apeman ;
67871: LD_ADDR_OWVAR 28
67875: PUSH
67876: LD_INT 12
67878: ST_TO_ADDR
// hc_gallery =  ;
67879: LD_ADDR_OWVAR 33
67883: PUSH
67884: LD_STRING 
67886: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67887: LD_ADDR_OWVAR 35
67891: PUSH
67892: LD_INT 2
67894: NEG
67895: PPUSH
67896: LD_INT 2
67898: PPUSH
67899: CALL_OW 12
67903: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67904: LD_ADDR_OWVAR 31
67908: PUSH
67909: LD_INT 1
67911: PPUSH
67912: LD_INT 3
67914: PPUSH
67915: CALL_OW 12
67919: PUSH
67920: LD_INT 1
67922: PPUSH
67923: LD_INT 3
67925: PPUSH
67926: CALL_OW 12
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: ST_TO_ADDR
// animal := CreateHuman ;
67943: LD_ADDR_VAR 0 12
67947: PUSH
67948: CALL_OW 44
67952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67953: LD_VAR 0 12
67957: PPUSH
67958: LD_VAR 0 8
67962: PPUSH
67963: LD_INT 0
67965: PPUSH
67966: CALL 69752 0 3
// end ;
67970: GO 67868
67972: POP
67973: POP
// if enchidnas then
67974: LD_VAR 0 4
67978: IFFALSE 68045
// for i = 1 to enchidnas do
67980: LD_ADDR_VAR 0 11
67984: PUSH
67985: DOUBLE
67986: LD_INT 1
67988: DEC
67989: ST_TO_ADDR
67990: LD_VAR 0 4
67994: PUSH
67995: FOR_TO
67996: IFFALSE 68043
// begin hc_class = 13 ;
67998: LD_ADDR_OWVAR 28
68002: PUSH
68003: LD_INT 13
68005: ST_TO_ADDR
// hc_gallery =  ;
68006: LD_ADDR_OWVAR 33
68010: PUSH
68011: LD_STRING 
68013: ST_TO_ADDR
// animal := CreateHuman ;
68014: LD_ADDR_VAR 0 12
68018: PUSH
68019: CALL_OW 44
68023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68024: LD_VAR 0 12
68028: PPUSH
68029: LD_VAR 0 8
68033: PPUSH
68034: LD_INT 0
68036: PPUSH
68037: CALL 69752 0 3
// end ;
68041: GO 67995
68043: POP
68044: POP
// if fishes then
68045: LD_VAR 0 7
68049: IFFALSE 68116
// for i = 1 to fishes do
68051: LD_ADDR_VAR 0 11
68055: PUSH
68056: DOUBLE
68057: LD_INT 1
68059: DEC
68060: ST_TO_ADDR
68061: LD_VAR 0 7
68065: PUSH
68066: FOR_TO
68067: IFFALSE 68114
// begin hc_class = 20 ;
68069: LD_ADDR_OWVAR 28
68073: PUSH
68074: LD_INT 20
68076: ST_TO_ADDR
// hc_gallery =  ;
68077: LD_ADDR_OWVAR 33
68081: PUSH
68082: LD_STRING 
68084: ST_TO_ADDR
// animal := CreateHuman ;
68085: LD_ADDR_VAR 0 12
68089: PUSH
68090: CALL_OW 44
68094: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68095: LD_VAR 0 12
68099: PPUSH
68100: LD_VAR 0 9
68104: PPUSH
68105: LD_INT 0
68107: PPUSH
68108: CALL 69752 0 3
// end ;
68112: GO 68066
68114: POP
68115: POP
// end ;
68116: LD_VAR 0 10
68120: RET
// export function WantHeal ( sci , unit ) ; begin
68121: LD_INT 0
68123: PPUSH
// if GetTaskList ( sci ) > 0 then
68124: LD_VAR 0 1
68128: PPUSH
68129: CALL_OW 437
68133: PUSH
68134: LD_INT 0
68136: GREATER
68137: IFFALSE 68207
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68139: LD_VAR 0 1
68143: PPUSH
68144: CALL_OW 437
68148: PUSH
68149: LD_INT 1
68151: ARRAY
68152: PUSH
68153: LD_INT 1
68155: ARRAY
68156: PUSH
68157: LD_STRING l
68159: EQUAL
68160: PUSH
68161: LD_VAR 0 1
68165: PPUSH
68166: CALL_OW 437
68170: PUSH
68171: LD_INT 1
68173: ARRAY
68174: PUSH
68175: LD_INT 4
68177: ARRAY
68178: PUSH
68179: LD_VAR 0 2
68183: EQUAL
68184: AND
68185: IFFALSE 68197
// result := true else
68187: LD_ADDR_VAR 0 3
68191: PUSH
68192: LD_INT 1
68194: ST_TO_ADDR
68195: GO 68205
// result := false ;
68197: LD_ADDR_VAR 0 3
68201: PUSH
68202: LD_INT 0
68204: ST_TO_ADDR
// end else
68205: GO 68215
// result := false ;
68207: LD_ADDR_VAR 0 3
68211: PUSH
68212: LD_INT 0
68214: ST_TO_ADDR
// end ;
68215: LD_VAR 0 3
68219: RET
// export function HealTarget ( sci ) ; begin
68220: LD_INT 0
68222: PPUSH
// if not sci then
68223: LD_VAR 0 1
68227: NOT
68228: IFFALSE 68232
// exit ;
68230: GO 68297
// result := 0 ;
68232: LD_ADDR_VAR 0 2
68236: PUSH
68237: LD_INT 0
68239: ST_TO_ADDR
// if GetTaskList ( sci ) then
68240: LD_VAR 0 1
68244: PPUSH
68245: CALL_OW 437
68249: IFFALSE 68297
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68251: LD_VAR 0 1
68255: PPUSH
68256: CALL_OW 437
68260: PUSH
68261: LD_INT 1
68263: ARRAY
68264: PUSH
68265: LD_INT 1
68267: ARRAY
68268: PUSH
68269: LD_STRING l
68271: EQUAL
68272: IFFALSE 68297
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68274: LD_ADDR_VAR 0 2
68278: PUSH
68279: LD_VAR 0 1
68283: PPUSH
68284: CALL_OW 437
68288: PUSH
68289: LD_INT 1
68291: ARRAY
68292: PUSH
68293: LD_INT 4
68295: ARRAY
68296: ST_TO_ADDR
// end ;
68297: LD_VAR 0 2
68301: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68302: LD_INT 0
68304: PPUSH
68305: PPUSH
68306: PPUSH
68307: PPUSH
// if not base_units then
68308: LD_VAR 0 1
68312: NOT
68313: IFFALSE 68317
// exit ;
68315: GO 68404
// result := false ;
68317: LD_ADDR_VAR 0 2
68321: PUSH
68322: LD_INT 0
68324: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68325: LD_ADDR_VAR 0 5
68329: PUSH
68330: LD_VAR 0 1
68334: PPUSH
68335: LD_INT 21
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PPUSH
68345: CALL_OW 72
68349: ST_TO_ADDR
// if not tmp then
68350: LD_VAR 0 5
68354: NOT
68355: IFFALSE 68359
// exit ;
68357: GO 68404
// for i in tmp do
68359: LD_ADDR_VAR 0 3
68363: PUSH
68364: LD_VAR 0 5
68368: PUSH
68369: FOR_IN
68370: IFFALSE 68402
// begin result := EnemyInRange ( i , 22 ) ;
68372: LD_ADDR_VAR 0 2
68376: PUSH
68377: LD_VAR 0 3
68381: PPUSH
68382: LD_INT 22
68384: PPUSH
68385: CALL 66640 0 2
68389: ST_TO_ADDR
// if result then
68390: LD_VAR 0 2
68394: IFFALSE 68400
// exit ;
68396: POP
68397: POP
68398: GO 68404
// end ;
68400: GO 68369
68402: POP
68403: POP
// end ;
68404: LD_VAR 0 2
68408: RET
// export function FilterByTag ( units , tag ) ; begin
68409: LD_INT 0
68411: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68412: LD_ADDR_VAR 0 3
68416: PUSH
68417: LD_VAR 0 1
68421: PPUSH
68422: LD_INT 120
68424: PUSH
68425: LD_VAR 0 2
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PPUSH
68434: CALL_OW 72
68438: ST_TO_ADDR
// end ;
68439: LD_VAR 0 3
68443: RET
// export function IsDriver ( un ) ; begin
68444: LD_INT 0
68446: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68447: LD_ADDR_VAR 0 2
68451: PUSH
68452: LD_VAR 0 1
68456: PUSH
68457: LD_INT 55
68459: PUSH
68460: EMPTY
68461: LIST
68462: PPUSH
68463: CALL_OW 69
68467: IN
68468: ST_TO_ADDR
// end ;
68469: LD_VAR 0 2
68473: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68474: LD_INT 0
68476: PPUSH
68477: PPUSH
// list := [ ] ;
68478: LD_ADDR_VAR 0 5
68482: PUSH
68483: EMPTY
68484: ST_TO_ADDR
// case d of 0 :
68485: LD_VAR 0 3
68489: PUSH
68490: LD_INT 0
68492: DOUBLE
68493: EQUAL
68494: IFTRUE 68498
68496: GO 68631
68498: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68499: LD_ADDR_VAR 0 5
68503: PUSH
68504: LD_VAR 0 1
68508: PUSH
68509: LD_INT 4
68511: MINUS
68512: PUSH
68513: LD_VAR 0 2
68517: PUSH
68518: LD_INT 4
68520: MINUS
68521: PUSH
68522: LD_INT 2
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: LIST
68529: PUSH
68530: LD_VAR 0 1
68534: PUSH
68535: LD_INT 3
68537: MINUS
68538: PUSH
68539: LD_VAR 0 2
68543: PUSH
68544: LD_INT 1
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: LIST
68551: PUSH
68552: LD_VAR 0 1
68556: PUSH
68557: LD_INT 4
68559: PLUS
68560: PUSH
68561: LD_VAR 0 2
68565: PUSH
68566: LD_INT 4
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: LIST
68573: PUSH
68574: LD_VAR 0 1
68578: PUSH
68579: LD_INT 3
68581: PLUS
68582: PUSH
68583: LD_VAR 0 2
68587: PUSH
68588: LD_INT 3
68590: PLUS
68591: PUSH
68592: LD_INT 5
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: LIST
68599: PUSH
68600: LD_VAR 0 1
68604: PUSH
68605: LD_VAR 0 2
68609: PUSH
68610: LD_INT 4
68612: PLUS
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: ST_TO_ADDR
// end ; 1 :
68629: GO 69329
68631: LD_INT 1
68633: DOUBLE
68634: EQUAL
68635: IFTRUE 68639
68637: GO 68772
68639: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68640: LD_ADDR_VAR 0 5
68644: PUSH
68645: LD_VAR 0 1
68649: PUSH
68650: LD_VAR 0 2
68654: PUSH
68655: LD_INT 4
68657: MINUS
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: LIST
68666: PUSH
68667: LD_VAR 0 1
68671: PUSH
68672: LD_INT 3
68674: MINUS
68675: PUSH
68676: LD_VAR 0 2
68680: PUSH
68681: LD_INT 3
68683: MINUS
68684: PUSH
68685: LD_INT 2
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: LIST
68692: PUSH
68693: LD_VAR 0 1
68697: PUSH
68698: LD_INT 4
68700: MINUS
68701: PUSH
68702: LD_VAR 0 2
68706: PUSH
68707: LD_INT 1
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: PUSH
68715: LD_VAR 0 1
68719: PUSH
68720: LD_VAR 0 2
68724: PUSH
68725: LD_INT 3
68727: PLUS
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: LIST
68736: PUSH
68737: LD_VAR 0 1
68741: PUSH
68742: LD_INT 4
68744: PLUS
68745: PUSH
68746: LD_VAR 0 2
68750: PUSH
68751: LD_INT 4
68753: PLUS
68754: PUSH
68755: LD_INT 5
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: LIST
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: ST_TO_ADDR
// end ; 2 :
68770: GO 69329
68772: LD_INT 2
68774: DOUBLE
68775: EQUAL
68776: IFTRUE 68780
68778: GO 68909
68780: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68781: LD_ADDR_VAR 0 5
68785: PUSH
68786: LD_VAR 0 1
68790: PUSH
68791: LD_VAR 0 2
68795: PUSH
68796: LD_INT 3
68798: MINUS
68799: PUSH
68800: LD_INT 3
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: LIST
68807: PUSH
68808: LD_VAR 0 1
68812: PUSH
68813: LD_INT 4
68815: PLUS
68816: PUSH
68817: LD_VAR 0 2
68821: PUSH
68822: LD_INT 4
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: LIST
68829: PUSH
68830: LD_VAR 0 1
68834: PUSH
68835: LD_VAR 0 2
68839: PUSH
68840: LD_INT 4
68842: PLUS
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: LIST
68851: PUSH
68852: LD_VAR 0 1
68856: PUSH
68857: LD_INT 3
68859: MINUS
68860: PUSH
68861: LD_VAR 0 2
68865: PUSH
68866: LD_INT 1
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: LIST
68873: PUSH
68874: LD_VAR 0 1
68878: PUSH
68879: LD_INT 4
68881: MINUS
68882: PUSH
68883: LD_VAR 0 2
68887: PUSH
68888: LD_INT 4
68890: MINUS
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: LIST
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: ST_TO_ADDR
// end ; 3 :
68907: GO 69329
68909: LD_INT 3
68911: DOUBLE
68912: EQUAL
68913: IFTRUE 68917
68915: GO 69050
68917: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68918: LD_ADDR_VAR 0 5
68922: PUSH
68923: LD_VAR 0 1
68927: PUSH
68928: LD_INT 3
68930: PLUS
68931: PUSH
68932: LD_VAR 0 2
68936: PUSH
68937: LD_INT 4
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: PUSH
68945: LD_VAR 0 1
68949: PUSH
68950: LD_INT 4
68952: PLUS
68953: PUSH
68954: LD_VAR 0 2
68958: PUSH
68959: LD_INT 4
68961: PLUS
68962: PUSH
68963: LD_INT 5
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: LIST
68970: PUSH
68971: LD_VAR 0 1
68975: PUSH
68976: LD_INT 4
68978: MINUS
68979: PUSH
68980: LD_VAR 0 2
68984: PUSH
68985: LD_INT 1
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: LIST
68992: PUSH
68993: LD_VAR 0 1
68997: PUSH
68998: LD_VAR 0 2
69002: PUSH
69003: LD_INT 4
69005: MINUS
69006: PUSH
69007: LD_INT 3
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: LIST
69014: PUSH
69015: LD_VAR 0 1
69019: PUSH
69020: LD_INT 3
69022: MINUS
69023: PUSH
69024: LD_VAR 0 2
69028: PUSH
69029: LD_INT 3
69031: MINUS
69032: PUSH
69033: LD_INT 2
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: LIST
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: ST_TO_ADDR
// end ; 4 :
69048: GO 69329
69050: LD_INT 4
69052: DOUBLE
69053: EQUAL
69054: IFTRUE 69058
69056: GO 69191
69058: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69059: LD_ADDR_VAR 0 5
69063: PUSH
69064: LD_VAR 0 1
69068: PUSH
69069: LD_VAR 0 2
69073: PUSH
69074: LD_INT 4
69076: PLUS
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: LIST
69085: PUSH
69086: LD_VAR 0 1
69090: PUSH
69091: LD_INT 3
69093: PLUS
69094: PUSH
69095: LD_VAR 0 2
69099: PUSH
69100: LD_INT 3
69102: PLUS
69103: PUSH
69104: LD_INT 5
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: LIST
69111: PUSH
69112: LD_VAR 0 1
69116: PUSH
69117: LD_INT 4
69119: PLUS
69120: PUSH
69121: LD_VAR 0 2
69125: PUSH
69126: LD_INT 4
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: LIST
69133: PUSH
69134: LD_VAR 0 1
69138: PUSH
69139: LD_VAR 0 2
69143: PUSH
69144: LD_INT 3
69146: MINUS
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: PUSH
69156: LD_VAR 0 1
69160: PUSH
69161: LD_INT 4
69163: MINUS
69164: PUSH
69165: LD_VAR 0 2
69169: PUSH
69170: LD_INT 4
69172: MINUS
69173: PUSH
69174: LD_INT 2
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: LIST
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: ST_TO_ADDR
// end ; 5 :
69189: GO 69329
69191: LD_INT 5
69193: DOUBLE
69194: EQUAL
69195: IFTRUE 69199
69197: GO 69328
69199: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69200: LD_ADDR_VAR 0 5
69204: PUSH
69205: LD_VAR 0 1
69209: PUSH
69210: LD_INT 4
69212: MINUS
69213: PUSH
69214: LD_VAR 0 2
69218: PUSH
69219: LD_INT 1
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: PUSH
69227: LD_VAR 0 1
69231: PUSH
69232: LD_VAR 0 2
69236: PUSH
69237: LD_INT 4
69239: MINUS
69240: PUSH
69241: LD_INT 3
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: LIST
69248: PUSH
69249: LD_VAR 0 1
69253: PUSH
69254: LD_INT 4
69256: PLUS
69257: PUSH
69258: LD_VAR 0 2
69262: PUSH
69263: LD_INT 4
69265: PLUS
69266: PUSH
69267: LD_INT 5
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: PUSH
69275: LD_VAR 0 1
69279: PUSH
69280: LD_INT 3
69282: PLUS
69283: PUSH
69284: LD_VAR 0 2
69288: PUSH
69289: LD_INT 4
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: LIST
69296: PUSH
69297: LD_VAR 0 1
69301: PUSH
69302: LD_VAR 0 2
69306: PUSH
69307: LD_INT 3
69309: PLUS
69310: PUSH
69311: LD_INT 0
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: LIST
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: ST_TO_ADDR
// end ; end ;
69326: GO 69329
69328: POP
// result := list ;
69329: LD_ADDR_VAR 0 4
69333: PUSH
69334: LD_VAR 0 5
69338: ST_TO_ADDR
// end ;
69339: LD_VAR 0 4
69343: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69344: LD_INT 0
69346: PPUSH
69347: PPUSH
69348: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69349: LD_VAR 0 1
69353: NOT
69354: PUSH
69355: LD_VAR 0 2
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: LD_INT 3
69368: PUSH
69369: LD_INT 4
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: IN
69378: NOT
69379: OR
69380: IFFALSE 69384
// exit ;
69382: GO 69476
// tmp := [ ] ;
69384: LD_ADDR_VAR 0 5
69388: PUSH
69389: EMPTY
69390: ST_TO_ADDR
// for i in units do
69391: LD_ADDR_VAR 0 4
69395: PUSH
69396: LD_VAR 0 1
69400: PUSH
69401: FOR_IN
69402: IFFALSE 69445
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69404: LD_ADDR_VAR 0 5
69408: PUSH
69409: LD_VAR 0 5
69413: PPUSH
69414: LD_VAR 0 5
69418: PUSH
69419: LD_INT 1
69421: PLUS
69422: PPUSH
69423: LD_VAR 0 4
69427: PPUSH
69428: LD_VAR 0 2
69432: PPUSH
69433: CALL_OW 259
69437: PPUSH
69438: CALL_OW 2
69442: ST_TO_ADDR
69443: GO 69401
69445: POP
69446: POP
// if not tmp then
69447: LD_VAR 0 5
69451: NOT
69452: IFFALSE 69456
// exit ;
69454: GO 69476
// result := SortListByListDesc ( units , tmp ) ;
69456: LD_ADDR_VAR 0 3
69460: PUSH
69461: LD_VAR 0 1
69465: PPUSH
69466: LD_VAR 0 5
69470: PPUSH
69471: CALL_OW 77
69475: ST_TO_ADDR
// end ;
69476: LD_VAR 0 3
69480: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69481: LD_INT 0
69483: PPUSH
69484: PPUSH
69485: PPUSH
// result := false ;
69486: LD_ADDR_VAR 0 3
69490: PUSH
69491: LD_INT 0
69493: ST_TO_ADDR
// x := GetX ( building ) ;
69494: LD_ADDR_VAR 0 4
69498: PUSH
69499: LD_VAR 0 2
69503: PPUSH
69504: CALL_OW 250
69508: ST_TO_ADDR
// y := GetY ( building ) ;
69509: LD_ADDR_VAR 0 5
69513: PUSH
69514: LD_VAR 0 2
69518: PPUSH
69519: CALL_OW 251
69523: ST_TO_ADDR
// if not building or not x or not y then
69524: LD_VAR 0 2
69528: NOT
69529: PUSH
69530: LD_VAR 0 4
69534: NOT
69535: OR
69536: PUSH
69537: LD_VAR 0 5
69541: NOT
69542: OR
69543: IFFALSE 69547
// exit ;
69545: GO 69639
// if GetTaskList ( unit ) then
69547: LD_VAR 0 1
69551: PPUSH
69552: CALL_OW 437
69556: IFFALSE 69639
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69558: LD_STRING e
69560: PUSH
69561: LD_VAR 0 1
69565: PPUSH
69566: CALL_OW 437
69570: PUSH
69571: LD_INT 1
69573: ARRAY
69574: PUSH
69575: LD_INT 1
69577: ARRAY
69578: EQUAL
69579: PUSH
69580: LD_VAR 0 4
69584: PUSH
69585: LD_VAR 0 1
69589: PPUSH
69590: CALL_OW 437
69594: PUSH
69595: LD_INT 1
69597: ARRAY
69598: PUSH
69599: LD_INT 2
69601: ARRAY
69602: EQUAL
69603: AND
69604: PUSH
69605: LD_VAR 0 5
69609: PUSH
69610: LD_VAR 0 1
69614: PPUSH
69615: CALL_OW 437
69619: PUSH
69620: LD_INT 1
69622: ARRAY
69623: PUSH
69624: LD_INT 3
69626: ARRAY
69627: EQUAL
69628: AND
69629: IFFALSE 69639
// result := true end ;
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: LD_INT 1
69638: ST_TO_ADDR
// end ;
69639: LD_VAR 0 3
69643: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69644: LD_INT 0
69646: PPUSH
// result := false ;
69647: LD_ADDR_VAR 0 4
69651: PUSH
69652: LD_INT 0
69654: ST_TO_ADDR
// if GetTaskList ( unit ) then
69655: LD_VAR 0 1
69659: PPUSH
69660: CALL_OW 437
69664: IFFALSE 69747
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69666: LD_STRING M
69668: PUSH
69669: LD_VAR 0 1
69673: PPUSH
69674: CALL_OW 437
69678: PUSH
69679: LD_INT 1
69681: ARRAY
69682: PUSH
69683: LD_INT 1
69685: ARRAY
69686: EQUAL
69687: PUSH
69688: LD_VAR 0 2
69692: PUSH
69693: LD_VAR 0 1
69697: PPUSH
69698: CALL_OW 437
69702: PUSH
69703: LD_INT 1
69705: ARRAY
69706: PUSH
69707: LD_INT 2
69709: ARRAY
69710: EQUAL
69711: AND
69712: PUSH
69713: LD_VAR 0 3
69717: PUSH
69718: LD_VAR 0 1
69722: PPUSH
69723: CALL_OW 437
69727: PUSH
69728: LD_INT 1
69730: ARRAY
69731: PUSH
69732: LD_INT 3
69734: ARRAY
69735: EQUAL
69736: AND
69737: IFFALSE 69747
// result := true ;
69739: LD_ADDR_VAR 0 4
69743: PUSH
69744: LD_INT 1
69746: ST_TO_ADDR
// end ; end ;
69747: LD_VAR 0 4
69751: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69752: LD_INT 0
69754: PPUSH
69755: PPUSH
69756: PPUSH
69757: PPUSH
// if not unit or not area then
69758: LD_VAR 0 1
69762: NOT
69763: PUSH
69764: LD_VAR 0 2
69768: NOT
69769: OR
69770: IFFALSE 69774
// exit ;
69772: GO 69938
// tmp := AreaToList ( area , i ) ;
69774: LD_ADDR_VAR 0 6
69778: PUSH
69779: LD_VAR 0 2
69783: PPUSH
69784: LD_VAR 0 5
69788: PPUSH
69789: CALL_OW 517
69793: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69794: LD_ADDR_VAR 0 5
69798: PUSH
69799: DOUBLE
69800: LD_INT 1
69802: DEC
69803: ST_TO_ADDR
69804: LD_VAR 0 6
69808: PUSH
69809: LD_INT 1
69811: ARRAY
69812: PUSH
69813: FOR_TO
69814: IFFALSE 69936
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69816: LD_ADDR_VAR 0 7
69820: PUSH
69821: LD_VAR 0 6
69825: PUSH
69826: LD_INT 1
69828: ARRAY
69829: PUSH
69830: LD_VAR 0 5
69834: ARRAY
69835: PUSH
69836: LD_VAR 0 6
69840: PUSH
69841: LD_INT 2
69843: ARRAY
69844: PUSH
69845: LD_VAR 0 5
69849: ARRAY
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69855: LD_VAR 0 7
69859: PUSH
69860: LD_INT 1
69862: ARRAY
69863: PPUSH
69864: LD_VAR 0 7
69868: PUSH
69869: LD_INT 2
69871: ARRAY
69872: PPUSH
69873: CALL_OW 428
69877: PUSH
69878: LD_INT 0
69880: EQUAL
69881: IFFALSE 69934
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69883: LD_VAR 0 1
69887: PPUSH
69888: LD_VAR 0 7
69892: PUSH
69893: LD_INT 1
69895: ARRAY
69896: PPUSH
69897: LD_VAR 0 7
69901: PUSH
69902: LD_INT 2
69904: ARRAY
69905: PPUSH
69906: LD_VAR 0 3
69910: PPUSH
69911: CALL_OW 48
// result := IsPlaced ( unit ) ;
69915: LD_ADDR_VAR 0 4
69919: PUSH
69920: LD_VAR 0 1
69924: PPUSH
69925: CALL_OW 305
69929: ST_TO_ADDR
// exit ;
69930: POP
69931: POP
69932: GO 69938
// end ; end ;
69934: GO 69813
69936: POP
69937: POP
// end ;
69938: LD_VAR 0 4
69942: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69943: LD_INT 0
69945: PPUSH
69946: PPUSH
69947: PPUSH
// if not side or side > 8 then
69948: LD_VAR 0 1
69952: NOT
69953: PUSH
69954: LD_VAR 0 1
69958: PUSH
69959: LD_INT 8
69961: GREATER
69962: OR
69963: IFFALSE 69967
// exit ;
69965: GO 70154
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69967: LD_ADDR_VAR 0 4
69971: PUSH
69972: LD_INT 22
69974: PUSH
69975: LD_VAR 0 1
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 21
69986: PUSH
69987: LD_INT 3
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PPUSH
69998: CALL_OW 69
70002: ST_TO_ADDR
// if not tmp then
70003: LD_VAR 0 4
70007: NOT
70008: IFFALSE 70012
// exit ;
70010: GO 70154
// enable_addtolog := true ;
70012: LD_ADDR_OWVAR 81
70016: PUSH
70017: LD_INT 1
70019: ST_TO_ADDR
// AddToLog ( [ ) ;
70020: LD_STRING [
70022: PPUSH
70023: CALL_OW 561
// for i in tmp do
70027: LD_ADDR_VAR 0 3
70031: PUSH
70032: LD_VAR 0 4
70036: PUSH
70037: FOR_IN
70038: IFFALSE 70145
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70040: LD_STRING [
70042: PUSH
70043: LD_VAR 0 3
70047: PPUSH
70048: CALL_OW 266
70052: STR
70053: PUSH
70054: LD_STRING , 
70056: STR
70057: PUSH
70058: LD_VAR 0 3
70062: PPUSH
70063: CALL_OW 250
70067: STR
70068: PUSH
70069: LD_STRING , 
70071: STR
70072: PUSH
70073: LD_VAR 0 3
70077: PPUSH
70078: CALL_OW 251
70082: STR
70083: PUSH
70084: LD_STRING , 
70086: STR
70087: PUSH
70088: LD_VAR 0 3
70092: PPUSH
70093: CALL_OW 254
70097: STR
70098: PUSH
70099: LD_STRING , 
70101: STR
70102: PUSH
70103: LD_VAR 0 3
70107: PPUSH
70108: LD_INT 1
70110: PPUSH
70111: CALL_OW 268
70115: STR
70116: PUSH
70117: LD_STRING , 
70119: STR
70120: PUSH
70121: LD_VAR 0 3
70125: PPUSH
70126: LD_INT 2
70128: PPUSH
70129: CALL_OW 268
70133: STR
70134: PUSH
70135: LD_STRING ],
70137: STR
70138: PPUSH
70139: CALL_OW 561
// end ;
70143: GO 70037
70145: POP
70146: POP
// AddToLog ( ]; ) ;
70147: LD_STRING ];
70149: PPUSH
70150: CALL_OW 561
// end ;
70154: LD_VAR 0 2
70158: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70159: LD_INT 0
70161: PPUSH
70162: PPUSH
70163: PPUSH
70164: PPUSH
70165: PPUSH
// if not area or not rate or not max then
70166: LD_VAR 0 1
70170: NOT
70171: PUSH
70172: LD_VAR 0 2
70176: NOT
70177: OR
70178: PUSH
70179: LD_VAR 0 4
70183: NOT
70184: OR
70185: IFFALSE 70189
// exit ;
70187: GO 70378
// while 1 do
70189: LD_INT 1
70191: IFFALSE 70378
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70193: LD_ADDR_VAR 0 9
70197: PUSH
70198: LD_VAR 0 1
70202: PPUSH
70203: LD_INT 1
70205: PPUSH
70206: CALL_OW 287
70210: PUSH
70211: LD_INT 10
70213: MUL
70214: ST_TO_ADDR
// r := rate / 10 ;
70215: LD_ADDR_VAR 0 7
70219: PUSH
70220: LD_VAR 0 2
70224: PUSH
70225: LD_INT 10
70227: DIVREAL
70228: ST_TO_ADDR
// time := 1 1$00 ;
70229: LD_ADDR_VAR 0 8
70233: PUSH
70234: LD_INT 2100
70236: ST_TO_ADDR
// if amount < min then
70237: LD_VAR 0 9
70241: PUSH
70242: LD_VAR 0 3
70246: LESS
70247: IFFALSE 70265
// r := r * 2 else
70249: LD_ADDR_VAR 0 7
70253: PUSH
70254: LD_VAR 0 7
70258: PUSH
70259: LD_INT 2
70261: MUL
70262: ST_TO_ADDR
70263: GO 70291
// if amount > max then
70265: LD_VAR 0 9
70269: PUSH
70270: LD_VAR 0 4
70274: GREATER
70275: IFFALSE 70291
// r := r / 2 ;
70277: LD_ADDR_VAR 0 7
70281: PUSH
70282: LD_VAR 0 7
70286: PUSH
70287: LD_INT 2
70289: DIVREAL
70290: ST_TO_ADDR
// time := time / r ;
70291: LD_ADDR_VAR 0 8
70295: PUSH
70296: LD_VAR 0 8
70300: PUSH
70301: LD_VAR 0 7
70305: DIVREAL
70306: ST_TO_ADDR
// if time < 0 then
70307: LD_VAR 0 8
70311: PUSH
70312: LD_INT 0
70314: LESS
70315: IFFALSE 70332
// time := time * - 1 ;
70317: LD_ADDR_VAR 0 8
70321: PUSH
70322: LD_VAR 0 8
70326: PUSH
70327: LD_INT 1
70329: NEG
70330: MUL
70331: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70332: LD_VAR 0 8
70336: PUSH
70337: LD_INT 35
70339: PPUSH
70340: LD_INT 875
70342: PPUSH
70343: CALL_OW 12
70347: PLUS
70348: PPUSH
70349: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70353: LD_INT 1
70355: PPUSH
70356: LD_INT 5
70358: PPUSH
70359: CALL_OW 12
70363: PPUSH
70364: LD_VAR 0 1
70368: PPUSH
70369: LD_INT 1
70371: PPUSH
70372: CALL_OW 55
// end ;
70376: GO 70189
// end ;
70378: LD_VAR 0 5
70382: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70383: LD_INT 0
70385: PPUSH
70386: PPUSH
70387: PPUSH
70388: PPUSH
70389: PPUSH
70390: PPUSH
70391: PPUSH
70392: PPUSH
// if not turrets or not factories then
70393: LD_VAR 0 1
70397: NOT
70398: PUSH
70399: LD_VAR 0 2
70403: NOT
70404: OR
70405: IFFALSE 70409
// exit ;
70407: GO 70716
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70409: LD_ADDR_VAR 0 10
70413: PUSH
70414: LD_INT 5
70416: PUSH
70417: LD_INT 6
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 2
70426: PUSH
70427: LD_INT 4
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 3
70436: PUSH
70437: LD_INT 5
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 24
70451: PUSH
70452: LD_INT 25
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 23
70461: PUSH
70462: LD_INT 27
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 42
70475: PUSH
70476: LD_INT 43
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 44
70485: PUSH
70486: LD_INT 46
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 45
70495: PUSH
70496: LD_INT 47
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: ST_TO_ADDR
// result := [ ] ;
70513: LD_ADDR_VAR 0 3
70517: PUSH
70518: EMPTY
70519: ST_TO_ADDR
// for i in turrets do
70520: LD_ADDR_VAR 0 4
70524: PUSH
70525: LD_VAR 0 1
70529: PUSH
70530: FOR_IN
70531: IFFALSE 70714
// begin nat := GetNation ( i ) ;
70533: LD_ADDR_VAR 0 7
70537: PUSH
70538: LD_VAR 0 4
70542: PPUSH
70543: CALL_OW 248
70547: ST_TO_ADDR
// weapon := 0 ;
70548: LD_ADDR_VAR 0 8
70552: PUSH
70553: LD_INT 0
70555: ST_TO_ADDR
// if not nat then
70556: LD_VAR 0 7
70560: NOT
70561: IFFALSE 70565
// continue ;
70563: GO 70530
// for j in list [ nat ] do
70565: LD_ADDR_VAR 0 5
70569: PUSH
70570: LD_VAR 0 10
70574: PUSH
70575: LD_VAR 0 7
70579: ARRAY
70580: PUSH
70581: FOR_IN
70582: IFFALSE 70623
// if GetBWeapon ( i ) = j [ 1 ] then
70584: LD_VAR 0 4
70588: PPUSH
70589: CALL_OW 269
70593: PUSH
70594: LD_VAR 0 5
70598: PUSH
70599: LD_INT 1
70601: ARRAY
70602: EQUAL
70603: IFFALSE 70621
// begin weapon := j [ 2 ] ;
70605: LD_ADDR_VAR 0 8
70609: PUSH
70610: LD_VAR 0 5
70614: PUSH
70615: LD_INT 2
70617: ARRAY
70618: ST_TO_ADDR
// break ;
70619: GO 70623
// end ;
70621: GO 70581
70623: POP
70624: POP
// if not weapon then
70625: LD_VAR 0 8
70629: NOT
70630: IFFALSE 70634
// continue ;
70632: GO 70530
// for k in factories do
70634: LD_ADDR_VAR 0 6
70638: PUSH
70639: LD_VAR 0 2
70643: PUSH
70644: FOR_IN
70645: IFFALSE 70710
// begin weapons := AvailableWeaponList ( k ) ;
70647: LD_ADDR_VAR 0 9
70651: PUSH
70652: LD_VAR 0 6
70656: PPUSH
70657: CALL_OW 478
70661: ST_TO_ADDR
// if not weapons then
70662: LD_VAR 0 9
70666: NOT
70667: IFFALSE 70671
// continue ;
70669: GO 70644
// if weapon in weapons then
70671: LD_VAR 0 8
70675: PUSH
70676: LD_VAR 0 9
70680: IN
70681: IFFALSE 70708
// begin result := [ i , weapon ] ;
70683: LD_ADDR_VAR 0 3
70687: PUSH
70688: LD_VAR 0 4
70692: PUSH
70693: LD_VAR 0 8
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: ST_TO_ADDR
// exit ;
70702: POP
70703: POP
70704: POP
70705: POP
70706: GO 70716
// end ; end ;
70708: GO 70644
70710: POP
70711: POP
// end ;
70712: GO 70530
70714: POP
70715: POP
// end ;
70716: LD_VAR 0 3
70720: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70721: LD_INT 0
70723: PPUSH
// if not side or side > 8 then
70724: LD_VAR 0 3
70728: NOT
70729: PUSH
70730: LD_VAR 0 3
70734: PUSH
70735: LD_INT 8
70737: GREATER
70738: OR
70739: IFFALSE 70743
// exit ;
70741: GO 70802
// if not range then
70743: LD_VAR 0 4
70747: NOT
70748: IFFALSE 70759
// range := - 12 ;
70750: LD_ADDR_VAR 0 4
70754: PUSH
70755: LD_INT 12
70757: NEG
70758: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70759: LD_VAR 0 1
70763: PPUSH
70764: LD_VAR 0 2
70768: PPUSH
70769: LD_VAR 0 3
70773: PPUSH
70774: LD_VAR 0 4
70778: PPUSH
70779: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70783: LD_VAR 0 1
70787: PPUSH
70788: LD_VAR 0 2
70792: PPUSH
70793: LD_VAR 0 3
70797: PPUSH
70798: CALL_OW 331
// end ;
70802: LD_VAR 0 5
70806: RET
// export function Video ( mode ) ; begin
70807: LD_INT 0
70809: PPUSH
// ingame_video = mode ;
70810: LD_ADDR_OWVAR 52
70814: PUSH
70815: LD_VAR 0 1
70819: ST_TO_ADDR
// interface_hidden = mode ;
70820: LD_ADDR_OWVAR 54
70824: PUSH
70825: LD_VAR 0 1
70829: ST_TO_ADDR
// end ;
70830: LD_VAR 0 2
70834: RET
// export function Join ( array , element ) ; begin
70835: LD_INT 0
70837: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70838: LD_ADDR_VAR 0 3
70842: PUSH
70843: LD_VAR 0 1
70847: PPUSH
70848: LD_VAR 0 1
70852: PUSH
70853: LD_INT 1
70855: PLUS
70856: PPUSH
70857: LD_VAR 0 2
70861: PPUSH
70862: CALL_OW 1
70866: ST_TO_ADDR
// end ;
70867: LD_VAR 0 3
70871: RET
// export function JoinUnion ( array , element ) ; begin
70872: LD_INT 0
70874: PPUSH
// result := array union element ;
70875: LD_ADDR_VAR 0 3
70879: PUSH
70880: LD_VAR 0 1
70884: PUSH
70885: LD_VAR 0 2
70889: UNION
70890: ST_TO_ADDR
// end ;
70891: LD_VAR 0 3
70895: RET
// export function GetBehemoths ( side ) ; begin
70896: LD_INT 0
70898: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70899: LD_ADDR_VAR 0 2
70903: PUSH
70904: LD_INT 22
70906: PUSH
70907: LD_VAR 0 1
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 31
70918: PUSH
70919: LD_INT 25
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PPUSH
70930: CALL_OW 69
70934: ST_TO_ADDR
// end ;
70935: LD_VAR 0 2
70939: RET
// export function Shuffle ( array ) ; var i , index ; begin
70940: LD_INT 0
70942: PPUSH
70943: PPUSH
70944: PPUSH
// result := [ ] ;
70945: LD_ADDR_VAR 0 2
70949: PUSH
70950: EMPTY
70951: ST_TO_ADDR
// if not array then
70952: LD_VAR 0 1
70956: NOT
70957: IFFALSE 70961
// exit ;
70959: GO 71060
// Randomize ;
70961: CALL_OW 10
// for i = array downto 1 do
70965: LD_ADDR_VAR 0 3
70969: PUSH
70970: DOUBLE
70971: LD_VAR 0 1
70975: INC
70976: ST_TO_ADDR
70977: LD_INT 1
70979: PUSH
70980: FOR_DOWNTO
70981: IFFALSE 71058
// begin index := rand ( 1 , array ) ;
70983: LD_ADDR_VAR 0 4
70987: PUSH
70988: LD_INT 1
70990: PPUSH
70991: LD_VAR 0 1
70995: PPUSH
70996: CALL_OW 12
71000: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71001: LD_ADDR_VAR 0 2
71005: PUSH
71006: LD_VAR 0 2
71010: PPUSH
71011: LD_VAR 0 2
71015: PUSH
71016: LD_INT 1
71018: PLUS
71019: PPUSH
71020: LD_VAR 0 1
71024: PUSH
71025: LD_VAR 0 4
71029: ARRAY
71030: PPUSH
71031: CALL_OW 2
71035: ST_TO_ADDR
// array := Delete ( array , index ) ;
71036: LD_ADDR_VAR 0 1
71040: PUSH
71041: LD_VAR 0 1
71045: PPUSH
71046: LD_VAR 0 4
71050: PPUSH
71051: CALL_OW 3
71055: ST_TO_ADDR
// end ;
71056: GO 70980
71058: POP
71059: POP
// end ;
71060: LD_VAR 0 2
71064: RET
// export function GetBaseMaterials ( base ) ; begin
71065: LD_INT 0
71067: PPUSH
// result := [ 0 , 0 , 0 ] ;
71068: LD_ADDR_VAR 0 2
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: LD_INT 0
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: LIST
71086: ST_TO_ADDR
// if not base then
71087: LD_VAR 0 1
71091: NOT
71092: IFFALSE 71096
// exit ;
71094: GO 71145
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71096: LD_ADDR_VAR 0 2
71100: PUSH
71101: LD_VAR 0 1
71105: PPUSH
71106: LD_INT 1
71108: PPUSH
71109: CALL_OW 275
71113: PUSH
71114: LD_VAR 0 1
71118: PPUSH
71119: LD_INT 2
71121: PPUSH
71122: CALL_OW 275
71126: PUSH
71127: LD_VAR 0 1
71131: PPUSH
71132: LD_INT 3
71134: PPUSH
71135: CALL_OW 275
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: ST_TO_ADDR
// end ;
71145: LD_VAR 0 2
71149: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71150: LD_INT 0
71152: PPUSH
71153: PPUSH
// result := array ;
71154: LD_ADDR_VAR 0 3
71158: PUSH
71159: LD_VAR 0 1
71163: ST_TO_ADDR
// if size > 0 then
71164: LD_VAR 0 2
71168: PUSH
71169: LD_INT 0
71171: GREATER
71172: IFFALSE 71218
// for i := array downto size do
71174: LD_ADDR_VAR 0 4
71178: PUSH
71179: DOUBLE
71180: LD_VAR 0 1
71184: INC
71185: ST_TO_ADDR
71186: LD_VAR 0 2
71190: PUSH
71191: FOR_DOWNTO
71192: IFFALSE 71216
// result := Delete ( result , result ) ;
71194: LD_ADDR_VAR 0 3
71198: PUSH
71199: LD_VAR 0 3
71203: PPUSH
71204: LD_VAR 0 3
71208: PPUSH
71209: CALL_OW 3
71213: ST_TO_ADDR
71214: GO 71191
71216: POP
71217: POP
// end ;
71218: LD_VAR 0 3
71222: RET
// export function ComExit ( unit ) ; var tmp ; begin
71223: LD_INT 0
71225: PPUSH
71226: PPUSH
// if not IsInUnit ( unit ) then
71227: LD_VAR 0 1
71231: PPUSH
71232: CALL_OW 310
71236: NOT
71237: IFFALSE 71241
// exit ;
71239: GO 71301
// tmp := IsInUnit ( unit ) ;
71241: LD_ADDR_VAR 0 3
71245: PUSH
71246: LD_VAR 0 1
71250: PPUSH
71251: CALL_OW 310
71255: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71256: LD_VAR 0 3
71260: PPUSH
71261: CALL_OW 247
71265: PUSH
71266: LD_INT 2
71268: EQUAL
71269: IFFALSE 71282
// ComExitVehicle ( unit ) else
71271: LD_VAR 0 1
71275: PPUSH
71276: CALL_OW 121
71280: GO 71291
// ComExitBuilding ( unit ) ;
71282: LD_VAR 0 1
71286: PPUSH
71287: CALL_OW 122
// result := tmp ;
71291: LD_ADDR_VAR 0 2
71295: PUSH
71296: LD_VAR 0 3
71300: ST_TO_ADDR
// end ;
71301: LD_VAR 0 2
71305: RET
// export function ComExitAll ( units ) ; var i ; begin
71306: LD_INT 0
71308: PPUSH
71309: PPUSH
// if not units then
71310: LD_VAR 0 1
71314: NOT
71315: IFFALSE 71319
// exit ;
71317: GO 71345
// for i in units do
71319: LD_ADDR_VAR 0 3
71323: PUSH
71324: LD_VAR 0 1
71328: PUSH
71329: FOR_IN
71330: IFFALSE 71343
// ComExit ( i ) ;
71332: LD_VAR 0 3
71336: PPUSH
71337: CALL 71223 0 1
71341: GO 71329
71343: POP
71344: POP
// end ;
71345: LD_VAR 0 2
71349: RET
// export function ResetHc ; begin
71350: LD_INT 0
71352: PPUSH
// InitHc ;
71353: CALL_OW 19
// hc_importance := 0 ;
71357: LD_ADDR_OWVAR 32
71361: PUSH
71362: LD_INT 0
71364: ST_TO_ADDR
// end ;
71365: LD_VAR 0 1
71369: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71370: LD_INT 0
71372: PPUSH
71373: PPUSH
71374: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71375: LD_ADDR_VAR 0 6
71379: PUSH
71380: LD_VAR 0 1
71384: PUSH
71385: LD_VAR 0 3
71389: PLUS
71390: PUSH
71391: LD_INT 2
71393: DIV
71394: ST_TO_ADDR
// if _x < 0 then
71395: LD_VAR 0 6
71399: PUSH
71400: LD_INT 0
71402: LESS
71403: IFFALSE 71420
// _x := _x * - 1 ;
71405: LD_ADDR_VAR 0 6
71409: PUSH
71410: LD_VAR 0 6
71414: PUSH
71415: LD_INT 1
71417: NEG
71418: MUL
71419: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71420: LD_ADDR_VAR 0 7
71424: PUSH
71425: LD_VAR 0 2
71429: PUSH
71430: LD_VAR 0 4
71434: PLUS
71435: PUSH
71436: LD_INT 2
71438: DIV
71439: ST_TO_ADDR
// if _y < 0 then
71440: LD_VAR 0 7
71444: PUSH
71445: LD_INT 0
71447: LESS
71448: IFFALSE 71465
// _y := _y * - 1 ;
71450: LD_ADDR_VAR 0 7
71454: PUSH
71455: LD_VAR 0 7
71459: PUSH
71460: LD_INT 1
71462: NEG
71463: MUL
71464: ST_TO_ADDR
// result := [ _x , _y ] ;
71465: LD_ADDR_VAR 0 5
71469: PUSH
71470: LD_VAR 0 6
71474: PUSH
71475: LD_VAR 0 7
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: ST_TO_ADDR
// end ;
71484: LD_VAR 0 5
71488: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71489: LD_INT 0
71491: PPUSH
71492: PPUSH
71493: PPUSH
71494: PPUSH
// task := GetTaskList ( unit ) ;
71495: LD_ADDR_VAR 0 7
71499: PUSH
71500: LD_VAR 0 1
71504: PPUSH
71505: CALL_OW 437
71509: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71510: LD_VAR 0 7
71514: NOT
71515: PUSH
71516: LD_VAR 0 1
71520: PPUSH
71521: LD_VAR 0 2
71525: PPUSH
71526: CALL_OW 308
71530: NOT
71531: AND
71532: IFFALSE 71536
// exit ;
71534: GO 71654
// if IsInArea ( unit , area ) then
71536: LD_VAR 0 1
71540: PPUSH
71541: LD_VAR 0 2
71545: PPUSH
71546: CALL_OW 308
71550: IFFALSE 71568
// begin ComMoveToArea ( unit , goAway ) ;
71552: LD_VAR 0 1
71556: PPUSH
71557: LD_VAR 0 3
71561: PPUSH
71562: CALL_OW 113
// exit ;
71566: GO 71654
// end ; if task [ 1 ] [ 1 ] <> M then
71568: LD_VAR 0 7
71572: PUSH
71573: LD_INT 1
71575: ARRAY
71576: PUSH
71577: LD_INT 1
71579: ARRAY
71580: PUSH
71581: LD_STRING M
71583: NONEQUAL
71584: IFFALSE 71588
// exit ;
71586: GO 71654
// x := task [ 1 ] [ 2 ] ;
71588: LD_ADDR_VAR 0 5
71592: PUSH
71593: LD_VAR 0 7
71597: PUSH
71598: LD_INT 1
71600: ARRAY
71601: PUSH
71602: LD_INT 2
71604: ARRAY
71605: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71606: LD_ADDR_VAR 0 6
71610: PUSH
71611: LD_VAR 0 7
71615: PUSH
71616: LD_INT 1
71618: ARRAY
71619: PUSH
71620: LD_INT 3
71622: ARRAY
71623: ST_TO_ADDR
// if InArea ( x , y , area ) then
71624: LD_VAR 0 5
71628: PPUSH
71629: LD_VAR 0 6
71633: PPUSH
71634: LD_VAR 0 2
71638: PPUSH
71639: CALL_OW 309
71643: IFFALSE 71654
// ComStop ( unit ) ;
71645: LD_VAR 0 1
71649: PPUSH
71650: CALL_OW 141
// end ;
71654: LD_VAR 0 4
71658: RET
// export function Abs ( value ) ; begin
71659: LD_INT 0
71661: PPUSH
// result := value ;
71662: LD_ADDR_VAR 0 2
71666: PUSH
71667: LD_VAR 0 1
71671: ST_TO_ADDR
// if value < 0 then
71672: LD_VAR 0 1
71676: PUSH
71677: LD_INT 0
71679: LESS
71680: IFFALSE 71697
// result := value * - 1 ;
71682: LD_ADDR_VAR 0 2
71686: PUSH
71687: LD_VAR 0 1
71691: PUSH
71692: LD_INT 1
71694: NEG
71695: MUL
71696: ST_TO_ADDR
// end ;
71697: LD_VAR 0 2
71701: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71702: LD_INT 0
71704: PPUSH
71705: PPUSH
71706: PPUSH
71707: PPUSH
71708: PPUSH
71709: PPUSH
71710: PPUSH
71711: PPUSH
// if not unit or not building then
71712: LD_VAR 0 1
71716: NOT
71717: PUSH
71718: LD_VAR 0 2
71722: NOT
71723: OR
71724: IFFALSE 71728
// exit ;
71726: GO 71954
// x := GetX ( building ) ;
71728: LD_ADDR_VAR 0 4
71732: PUSH
71733: LD_VAR 0 2
71737: PPUSH
71738: CALL_OW 250
71742: ST_TO_ADDR
// y := GetY ( building ) ;
71743: LD_ADDR_VAR 0 6
71747: PUSH
71748: LD_VAR 0 2
71752: PPUSH
71753: CALL_OW 251
71757: ST_TO_ADDR
// d := GetDir ( building ) ;
71758: LD_ADDR_VAR 0 8
71762: PUSH
71763: LD_VAR 0 2
71767: PPUSH
71768: CALL_OW 254
71772: ST_TO_ADDR
// r := 4 ;
71773: LD_ADDR_VAR 0 9
71777: PUSH
71778: LD_INT 4
71780: ST_TO_ADDR
// for i := 1 to 5 do
71781: LD_ADDR_VAR 0 10
71785: PUSH
71786: DOUBLE
71787: LD_INT 1
71789: DEC
71790: ST_TO_ADDR
71791: LD_INT 5
71793: PUSH
71794: FOR_TO
71795: IFFALSE 71952
// begin _x := ShiftX ( x , d , r + i ) ;
71797: LD_ADDR_VAR 0 5
71801: PUSH
71802: LD_VAR 0 4
71806: PPUSH
71807: LD_VAR 0 8
71811: PPUSH
71812: LD_VAR 0 9
71816: PUSH
71817: LD_VAR 0 10
71821: PLUS
71822: PPUSH
71823: CALL_OW 272
71827: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71828: LD_ADDR_VAR 0 7
71832: PUSH
71833: LD_VAR 0 6
71837: PPUSH
71838: LD_VAR 0 8
71842: PPUSH
71843: LD_VAR 0 9
71847: PUSH
71848: LD_VAR 0 10
71852: PLUS
71853: PPUSH
71854: CALL_OW 273
71858: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71859: LD_VAR 0 5
71863: PPUSH
71864: LD_VAR 0 7
71868: PPUSH
71869: CALL_OW 488
71873: PUSH
71874: LD_VAR 0 5
71878: PPUSH
71879: LD_VAR 0 7
71883: PPUSH
71884: CALL_OW 428
71888: PPUSH
71889: CALL_OW 247
71893: PUSH
71894: LD_INT 3
71896: PUSH
71897: LD_INT 2
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: IN
71904: NOT
71905: AND
71906: IFFALSE 71950
// begin ComMoveXY ( unit , _x , _y ) ;
71908: LD_VAR 0 1
71912: PPUSH
71913: LD_VAR 0 5
71917: PPUSH
71918: LD_VAR 0 7
71922: PPUSH
71923: CALL_OW 111
// result := [ _x , _y ] ;
71927: LD_ADDR_VAR 0 3
71931: PUSH
71932: LD_VAR 0 5
71936: PUSH
71937: LD_VAR 0 7
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: ST_TO_ADDR
// exit ;
71946: POP
71947: POP
71948: GO 71954
// end ; end ;
71950: GO 71794
71952: POP
71953: POP
// end ;
71954: LD_VAR 0 3
71958: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71959: LD_INT 0
71961: PPUSH
71962: PPUSH
71963: PPUSH
// result := 0 ;
71964: LD_ADDR_VAR 0 3
71968: PUSH
71969: LD_INT 0
71971: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71972: LD_VAR 0 1
71976: PUSH
71977: LD_INT 0
71979: LESS
71980: PUSH
71981: LD_VAR 0 1
71985: PUSH
71986: LD_INT 8
71988: GREATER
71989: OR
71990: PUSH
71991: LD_VAR 0 2
71995: PUSH
71996: LD_INT 0
71998: LESS
71999: OR
72000: PUSH
72001: LD_VAR 0 2
72005: PUSH
72006: LD_INT 8
72008: GREATER
72009: OR
72010: IFFALSE 72014
// exit ;
72012: GO 72089
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72014: LD_ADDR_VAR 0 4
72018: PUSH
72019: LD_INT 22
72021: PUSH
72022: LD_VAR 0 2
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PPUSH
72031: CALL_OW 69
72035: PUSH
72036: FOR_IN
72037: IFFALSE 72087
// begin un := UnitShoot ( i ) ;
72039: LD_ADDR_VAR 0 5
72043: PUSH
72044: LD_VAR 0 4
72048: PPUSH
72049: CALL_OW 504
72053: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72054: LD_VAR 0 5
72058: PPUSH
72059: CALL_OW 255
72063: PUSH
72064: LD_VAR 0 1
72068: EQUAL
72069: IFFALSE 72085
// begin result := un ;
72071: LD_ADDR_VAR 0 3
72075: PUSH
72076: LD_VAR 0 5
72080: ST_TO_ADDR
// exit ;
72081: POP
72082: POP
72083: GO 72089
// end ; end ;
72085: GO 72036
72087: POP
72088: POP
// end ;
72089: LD_VAR 0 3
72093: RET
// export function GetCargoBay ( units ) ; begin
72094: LD_INT 0
72096: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72097: LD_ADDR_VAR 0 2
72101: PUSH
72102: LD_VAR 0 1
72106: PPUSH
72107: LD_INT 2
72109: PUSH
72110: LD_INT 34
72112: PUSH
72113: LD_INT 12
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 34
72122: PUSH
72123: LD_INT 51
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 34
72132: PUSH
72133: LD_INT 32
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 34
72142: PUSH
72143: LD_EXP 39
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: PPUSH
72159: CALL_OW 72
72163: ST_TO_ADDR
// end ;
72164: LD_VAR 0 2
72168: RET
// export function Negate ( value ) ; begin
72169: LD_INT 0
72171: PPUSH
// result := not value ;
72172: LD_ADDR_VAR 0 2
72176: PUSH
72177: LD_VAR 0 1
72181: NOT
72182: ST_TO_ADDR
// end ;
72183: LD_VAR 0 2
72187: RET
// export function Inc ( value ) ; begin
72188: LD_INT 0
72190: PPUSH
// result := value + 1 ;
72191: LD_ADDR_VAR 0 2
72195: PUSH
72196: LD_VAR 0 1
72200: PUSH
72201: LD_INT 1
72203: PLUS
72204: ST_TO_ADDR
// end ;
72205: LD_VAR 0 2
72209: RET
// export function Dec ( value ) ; begin
72210: LD_INT 0
72212: PPUSH
// result := value - 1 ;
72213: LD_ADDR_VAR 0 2
72217: PUSH
72218: LD_VAR 0 1
72222: PUSH
72223: LD_INT 1
72225: MINUS
72226: ST_TO_ADDR
// end ;
72227: LD_VAR 0 2
72231: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72232: LD_INT 0
72234: PPUSH
72235: PPUSH
72236: PPUSH
72237: PPUSH
72238: PPUSH
72239: PPUSH
72240: PPUSH
72241: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72242: LD_VAR 0 1
72246: PPUSH
72247: LD_VAR 0 2
72251: PPUSH
72252: CALL_OW 488
72256: NOT
72257: PUSH
72258: LD_VAR 0 3
72262: PPUSH
72263: LD_VAR 0 4
72267: PPUSH
72268: CALL_OW 488
72272: NOT
72273: OR
72274: IFFALSE 72287
// begin result := - 1 ;
72276: LD_ADDR_VAR 0 5
72280: PUSH
72281: LD_INT 1
72283: NEG
72284: ST_TO_ADDR
// exit ;
72285: GO 72522
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72287: LD_ADDR_VAR 0 12
72291: PUSH
72292: LD_VAR 0 1
72296: PPUSH
72297: LD_VAR 0 2
72301: PPUSH
72302: LD_VAR 0 3
72306: PPUSH
72307: LD_VAR 0 4
72311: PPUSH
72312: CALL 71370 0 4
72316: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72317: LD_ADDR_VAR 0 11
72321: PUSH
72322: LD_VAR 0 1
72326: PPUSH
72327: LD_VAR 0 2
72331: PPUSH
72332: LD_VAR 0 12
72336: PUSH
72337: LD_INT 1
72339: ARRAY
72340: PPUSH
72341: LD_VAR 0 12
72345: PUSH
72346: LD_INT 2
72348: ARRAY
72349: PPUSH
72350: CALL_OW 298
72354: ST_TO_ADDR
// distance := 9999 ;
72355: LD_ADDR_VAR 0 10
72359: PUSH
72360: LD_INT 9999
72362: ST_TO_ADDR
// for i := 0 to 5 do
72363: LD_ADDR_VAR 0 6
72367: PUSH
72368: DOUBLE
72369: LD_INT 0
72371: DEC
72372: ST_TO_ADDR
72373: LD_INT 5
72375: PUSH
72376: FOR_TO
72377: IFFALSE 72520
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72379: LD_ADDR_VAR 0 7
72383: PUSH
72384: LD_VAR 0 1
72388: PPUSH
72389: LD_VAR 0 6
72393: PPUSH
72394: LD_VAR 0 11
72398: PPUSH
72399: CALL_OW 272
72403: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72404: LD_ADDR_VAR 0 8
72408: PUSH
72409: LD_VAR 0 2
72413: PPUSH
72414: LD_VAR 0 6
72418: PPUSH
72419: LD_VAR 0 11
72423: PPUSH
72424: CALL_OW 273
72428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72429: LD_VAR 0 7
72433: PPUSH
72434: LD_VAR 0 8
72438: PPUSH
72439: CALL_OW 488
72443: NOT
72444: IFFALSE 72448
// continue ;
72446: GO 72376
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72448: LD_ADDR_VAR 0 9
72452: PUSH
72453: LD_VAR 0 12
72457: PUSH
72458: LD_INT 1
72460: ARRAY
72461: PPUSH
72462: LD_VAR 0 12
72466: PUSH
72467: LD_INT 2
72469: ARRAY
72470: PPUSH
72471: LD_VAR 0 7
72475: PPUSH
72476: LD_VAR 0 8
72480: PPUSH
72481: CALL_OW 298
72485: ST_TO_ADDR
// if tmp < distance then
72486: LD_VAR 0 9
72490: PUSH
72491: LD_VAR 0 10
72495: LESS
72496: IFFALSE 72518
// begin result := i ;
72498: LD_ADDR_VAR 0 5
72502: PUSH
72503: LD_VAR 0 6
72507: ST_TO_ADDR
// distance := tmp ;
72508: LD_ADDR_VAR 0 10
72512: PUSH
72513: LD_VAR 0 9
72517: ST_TO_ADDR
// end ; end ;
72518: GO 72376
72520: POP
72521: POP
// end ;
72522: LD_VAR 0 5
72526: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72527: LD_INT 0
72529: PPUSH
72530: PPUSH
// if not driver or not IsInUnit ( driver ) then
72531: LD_VAR 0 1
72535: NOT
72536: PUSH
72537: LD_VAR 0 1
72541: PPUSH
72542: CALL_OW 310
72546: NOT
72547: OR
72548: IFFALSE 72552
// exit ;
72550: GO 72642
// vehicle := IsInUnit ( driver ) ;
72552: LD_ADDR_VAR 0 3
72556: PUSH
72557: LD_VAR 0 1
72561: PPUSH
72562: CALL_OW 310
72566: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72567: LD_VAR 0 1
72571: PPUSH
72572: LD_STRING \
72574: PUSH
72575: LD_INT 0
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: LD_INT 0
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: LD_INT 0
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: PUSH
72602: LD_STRING E
72604: PUSH
72605: LD_INT 0
72607: PUSH
72608: LD_INT 0
72610: PUSH
72611: LD_VAR 0 3
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: LD_INT 0
72621: PUSH
72622: LD_INT 0
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PPUSH
72638: CALL_OW 446
// end ;
72642: LD_VAR 0 2
72646: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72647: LD_INT 0
72649: PPUSH
72650: PPUSH
// if not driver or not IsInUnit ( driver ) then
72651: LD_VAR 0 1
72655: NOT
72656: PUSH
72657: LD_VAR 0 1
72661: PPUSH
72662: CALL_OW 310
72666: NOT
72667: OR
72668: IFFALSE 72672
// exit ;
72670: GO 72762
// vehicle := IsInUnit ( driver ) ;
72672: LD_ADDR_VAR 0 3
72676: PUSH
72677: LD_VAR 0 1
72681: PPUSH
72682: CALL_OW 310
72686: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72687: LD_VAR 0 1
72691: PPUSH
72692: LD_STRING \
72694: PUSH
72695: LD_INT 0
72697: PUSH
72698: LD_INT 0
72700: PUSH
72701: LD_INT 0
72703: PUSH
72704: LD_INT 0
72706: PUSH
72707: LD_INT 0
72709: PUSH
72710: LD_INT 0
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: PUSH
72722: LD_STRING E
72724: PUSH
72725: LD_INT 0
72727: PUSH
72728: LD_INT 0
72730: PUSH
72731: LD_VAR 0 3
72735: PUSH
72736: LD_INT 0
72738: PUSH
72739: LD_INT 0
72741: PUSH
72742: LD_INT 0
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PPUSH
72758: CALL_OW 447
// end ;
72762: LD_VAR 0 2
72766: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72767: LD_INT 0
72769: PPUSH
72770: PPUSH
72771: PPUSH
// tmp := [ ] ;
72772: LD_ADDR_VAR 0 5
72776: PUSH
72777: EMPTY
72778: ST_TO_ADDR
// for i in units do
72779: LD_ADDR_VAR 0 4
72783: PUSH
72784: LD_VAR 0 1
72788: PUSH
72789: FOR_IN
72790: IFFALSE 72828
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72792: LD_ADDR_VAR 0 5
72796: PUSH
72797: LD_VAR 0 5
72801: PPUSH
72802: LD_VAR 0 5
72806: PUSH
72807: LD_INT 1
72809: PLUS
72810: PPUSH
72811: LD_VAR 0 4
72815: PPUSH
72816: CALL_OW 256
72820: PPUSH
72821: CALL_OW 2
72825: ST_TO_ADDR
72826: GO 72789
72828: POP
72829: POP
// if not tmp then
72830: LD_VAR 0 5
72834: NOT
72835: IFFALSE 72839
// exit ;
72837: GO 72887
// if asc then
72839: LD_VAR 0 2
72843: IFFALSE 72867
// result := SortListByListAsc ( units , tmp ) else
72845: LD_ADDR_VAR 0 3
72849: PUSH
72850: LD_VAR 0 1
72854: PPUSH
72855: LD_VAR 0 5
72859: PPUSH
72860: CALL_OW 76
72864: ST_TO_ADDR
72865: GO 72887
// result := SortListByListDesc ( units , tmp ) ;
72867: LD_ADDR_VAR 0 3
72871: PUSH
72872: LD_VAR 0 1
72876: PPUSH
72877: LD_VAR 0 5
72881: PPUSH
72882: CALL_OW 77
72886: ST_TO_ADDR
// end ;
72887: LD_VAR 0 3
72891: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72892: LD_INT 0
72894: PPUSH
72895: PPUSH
// task := GetTaskList ( mech ) ;
72896: LD_ADDR_VAR 0 4
72900: PUSH
72901: LD_VAR 0 1
72905: PPUSH
72906: CALL_OW 437
72910: ST_TO_ADDR
// if not task then
72911: LD_VAR 0 4
72915: NOT
72916: IFFALSE 72920
// exit ;
72918: GO 72962
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72920: LD_ADDR_VAR 0 3
72924: PUSH
72925: LD_VAR 0 4
72929: PUSH
72930: LD_INT 1
72932: ARRAY
72933: PUSH
72934: LD_INT 1
72936: ARRAY
72937: PUSH
72938: LD_STRING r
72940: EQUAL
72941: PUSH
72942: LD_VAR 0 4
72946: PUSH
72947: LD_INT 1
72949: ARRAY
72950: PUSH
72951: LD_INT 4
72953: ARRAY
72954: PUSH
72955: LD_VAR 0 2
72959: EQUAL
72960: AND
72961: ST_TO_ADDR
// end ;
72962: LD_VAR 0 3
72966: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72967: LD_INT 0
72969: PPUSH
// SetDir ( unit , d ) ;
72970: LD_VAR 0 1
72974: PPUSH
72975: LD_VAR 0 4
72979: PPUSH
72980: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72984: LD_VAR 0 1
72988: PPUSH
72989: LD_VAR 0 2
72993: PPUSH
72994: LD_VAR 0 3
72998: PPUSH
72999: LD_VAR 0 5
73003: PPUSH
73004: CALL_OW 48
// end ;
73008: LD_VAR 0 6
73012: RET
// export function ToNaturalNumber ( number ) ; begin
73013: LD_INT 0
73015: PPUSH
// result := number div 1 ;
73016: LD_ADDR_VAR 0 2
73020: PUSH
73021: LD_VAR 0 1
73025: PUSH
73026: LD_INT 1
73028: DIV
73029: ST_TO_ADDR
// if number < 0 then
73030: LD_VAR 0 1
73034: PUSH
73035: LD_INT 0
73037: LESS
73038: IFFALSE 73048
// result := 0 ;
73040: LD_ADDR_VAR 0 2
73044: PUSH
73045: LD_INT 0
73047: ST_TO_ADDR
// end ;
73048: LD_VAR 0 2
73052: RET
// export function SortByClass ( units , class ) ; var un ; begin
73053: LD_INT 0
73055: PPUSH
73056: PPUSH
// if not units or not class then
73057: LD_VAR 0 1
73061: NOT
73062: PUSH
73063: LD_VAR 0 2
73067: NOT
73068: OR
73069: IFFALSE 73073
// exit ;
73071: GO 73168
// result := [ ] ;
73073: LD_ADDR_VAR 0 3
73077: PUSH
73078: EMPTY
73079: ST_TO_ADDR
// for un in units do
73080: LD_ADDR_VAR 0 4
73084: PUSH
73085: LD_VAR 0 1
73089: PUSH
73090: FOR_IN
73091: IFFALSE 73166
// if GetClass ( un ) = class then
73093: LD_VAR 0 4
73097: PPUSH
73098: CALL_OW 257
73102: PUSH
73103: LD_VAR 0 2
73107: EQUAL
73108: IFFALSE 73135
// result := Insert ( result , 1 , un ) else
73110: LD_ADDR_VAR 0 3
73114: PUSH
73115: LD_VAR 0 3
73119: PPUSH
73120: LD_INT 1
73122: PPUSH
73123: LD_VAR 0 4
73127: PPUSH
73128: CALL_OW 2
73132: ST_TO_ADDR
73133: GO 73164
// result := Replace ( result , result + 1 , un ) ;
73135: LD_ADDR_VAR 0 3
73139: PUSH
73140: LD_VAR 0 3
73144: PPUSH
73145: LD_VAR 0 3
73149: PUSH
73150: LD_INT 1
73152: PLUS
73153: PPUSH
73154: LD_VAR 0 4
73158: PPUSH
73159: CALL_OW 1
73163: ST_TO_ADDR
73164: GO 73090
73166: POP
73167: POP
// end ;
73168: LD_VAR 0 3
73172: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73173: LD_INT 0
73175: PPUSH
73176: PPUSH
73177: PPUSH
73178: PPUSH
73179: PPUSH
73180: PPUSH
73181: PPUSH
// result := [ ] ;
73182: LD_ADDR_VAR 0 4
73186: PUSH
73187: EMPTY
73188: ST_TO_ADDR
// if x - r < 0 then
73189: LD_VAR 0 1
73193: PUSH
73194: LD_VAR 0 3
73198: MINUS
73199: PUSH
73200: LD_INT 0
73202: LESS
73203: IFFALSE 73215
// min_x := 0 else
73205: LD_ADDR_VAR 0 8
73209: PUSH
73210: LD_INT 0
73212: ST_TO_ADDR
73213: GO 73231
// min_x := x - r ;
73215: LD_ADDR_VAR 0 8
73219: PUSH
73220: LD_VAR 0 1
73224: PUSH
73225: LD_VAR 0 3
73229: MINUS
73230: ST_TO_ADDR
// if y - r < 0 then
73231: LD_VAR 0 2
73235: PUSH
73236: LD_VAR 0 3
73240: MINUS
73241: PUSH
73242: LD_INT 0
73244: LESS
73245: IFFALSE 73257
// min_y := 0 else
73247: LD_ADDR_VAR 0 7
73251: PUSH
73252: LD_INT 0
73254: ST_TO_ADDR
73255: GO 73273
// min_y := y - r ;
73257: LD_ADDR_VAR 0 7
73261: PUSH
73262: LD_VAR 0 2
73266: PUSH
73267: LD_VAR 0 3
73271: MINUS
73272: ST_TO_ADDR
// max_x := x + r ;
73273: LD_ADDR_VAR 0 9
73277: PUSH
73278: LD_VAR 0 1
73282: PUSH
73283: LD_VAR 0 3
73287: PLUS
73288: ST_TO_ADDR
// max_y := y + r ;
73289: LD_ADDR_VAR 0 10
73293: PUSH
73294: LD_VAR 0 2
73298: PUSH
73299: LD_VAR 0 3
73303: PLUS
73304: ST_TO_ADDR
// for _x = min_x to max_x do
73305: LD_ADDR_VAR 0 5
73309: PUSH
73310: DOUBLE
73311: LD_VAR 0 8
73315: DEC
73316: ST_TO_ADDR
73317: LD_VAR 0 9
73321: PUSH
73322: FOR_TO
73323: IFFALSE 73424
// for _y = min_y to max_y do
73325: LD_ADDR_VAR 0 6
73329: PUSH
73330: DOUBLE
73331: LD_VAR 0 7
73335: DEC
73336: ST_TO_ADDR
73337: LD_VAR 0 10
73341: PUSH
73342: FOR_TO
73343: IFFALSE 73420
// begin if not ValidHex ( _x , _y ) then
73345: LD_VAR 0 5
73349: PPUSH
73350: LD_VAR 0 6
73354: PPUSH
73355: CALL_OW 488
73359: NOT
73360: IFFALSE 73364
// continue ;
73362: GO 73342
// if GetResourceTypeXY ( _x , _y ) then
73364: LD_VAR 0 5
73368: PPUSH
73369: LD_VAR 0 6
73373: PPUSH
73374: CALL_OW 283
73378: IFFALSE 73418
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73380: LD_ADDR_VAR 0 4
73384: PUSH
73385: LD_VAR 0 4
73389: PPUSH
73390: LD_VAR 0 4
73394: PUSH
73395: LD_INT 1
73397: PLUS
73398: PPUSH
73399: LD_VAR 0 5
73403: PUSH
73404: LD_VAR 0 6
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PPUSH
73413: CALL_OW 1
73417: ST_TO_ADDR
// end ;
73418: GO 73342
73420: POP
73421: POP
73422: GO 73322
73424: POP
73425: POP
// end ;
73426: LD_VAR 0 4
73430: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73431: LD_INT 0
73433: PPUSH
73434: PPUSH
73435: PPUSH
73436: PPUSH
73437: PPUSH
73438: PPUSH
73439: PPUSH
73440: PPUSH
// if not units then
73441: LD_VAR 0 1
73445: NOT
73446: IFFALSE 73450
// exit ;
73448: GO 73875
// result := UnitFilter ( units , [ f_ok ] ) ;
73450: LD_ADDR_VAR 0 3
73454: PUSH
73455: LD_VAR 0 1
73459: PPUSH
73460: LD_INT 50
73462: PUSH
73463: EMPTY
73464: LIST
73465: PPUSH
73466: CALL_OW 72
73470: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73471: LD_ADDR_VAR 0 8
73475: PUSH
73476: LD_VAR 0 1
73480: PUSH
73481: LD_INT 1
73483: ARRAY
73484: PPUSH
73485: CALL_OW 255
73489: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
73490: LD_ADDR_VAR 0 10
73494: PUSH
73495: LD_INT 29
73497: PUSH
73498: LD_EXP 42
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: ST_TO_ADDR
// if not result then
73507: LD_VAR 0 3
73511: NOT
73512: IFFALSE 73516
// exit ;
73514: GO 73875
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73516: LD_ADDR_VAR 0 5
73520: PUSH
73521: LD_INT 81
73523: PUSH
73524: LD_VAR 0 8
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PPUSH
73533: CALL_OW 69
73537: ST_TO_ADDR
// for i in result do
73538: LD_ADDR_VAR 0 4
73542: PUSH
73543: LD_VAR 0 3
73547: PUSH
73548: FOR_IN
73549: IFFALSE 73873
// begin tag := GetTag ( i ) + 1 ;
73551: LD_ADDR_VAR 0 9
73555: PUSH
73556: LD_VAR 0 4
73560: PPUSH
73561: CALL_OW 110
73565: PUSH
73566: LD_INT 1
73568: PLUS
73569: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73570: LD_ADDR_VAR 0 7
73574: PUSH
73575: LD_VAR 0 4
73579: PPUSH
73580: CALL_OW 250
73584: PPUSH
73585: LD_VAR 0 4
73589: PPUSH
73590: CALL_OW 251
73594: PPUSH
73595: LD_INT 6
73597: PPUSH
73598: CALL 73173 0 3
73602: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73603: LD_VAR 0 7
73607: PUSH
73608: LD_VAR 0 4
73612: PPUSH
73613: CALL_OW 264
73617: PUSH
73618: LD_VAR 0 10
73622: IN
73623: NOT
73624: AND
73625: IFFALSE 73664
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73627: LD_VAR 0 4
73631: PPUSH
73632: LD_VAR 0 7
73636: PUSH
73637: LD_INT 1
73639: ARRAY
73640: PUSH
73641: LD_INT 1
73643: ARRAY
73644: PPUSH
73645: LD_VAR 0 7
73649: PUSH
73650: LD_INT 1
73652: ARRAY
73653: PUSH
73654: LD_INT 2
73656: ARRAY
73657: PPUSH
73658: CALL_OW 116
73662: GO 73871
// if path > tag then
73664: LD_VAR 0 2
73668: PUSH
73669: LD_VAR 0 9
73673: GREATER
73674: IFFALSE 73841
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
73676: LD_ADDR_VAR 0 6
73680: PUSH
73681: LD_VAR 0 5
73685: PPUSH
73686: LD_INT 91
73688: PUSH
73689: LD_VAR 0 4
73693: PUSH
73694: LD_INT 12
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: LIST
73701: PPUSH
73702: CALL_OW 72
73706: ST_TO_ADDR
// if nearEnemy then
73707: LD_VAR 0 6
73711: IFFALSE 73739
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73713: LD_VAR 0 4
73717: PPUSH
73718: LD_VAR 0 6
73722: PPUSH
73723: LD_VAR 0 4
73727: PPUSH
73728: CALL_OW 74
73732: PPUSH
73733: CALL_OW 115
73737: GO 73839
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73739: LD_VAR 0 4
73743: PPUSH
73744: LD_VAR 0 2
73748: PUSH
73749: LD_VAR 0 9
73753: ARRAY
73754: PUSH
73755: LD_INT 1
73757: ARRAY
73758: PPUSH
73759: LD_VAR 0 2
73763: PUSH
73764: LD_VAR 0 9
73768: ARRAY
73769: PUSH
73770: LD_INT 2
73772: ARRAY
73773: PPUSH
73774: CALL_OW 297
73778: PUSH
73779: LD_INT 6
73781: GREATER
73782: IFFALSE 73825
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73784: LD_VAR 0 4
73788: PPUSH
73789: LD_VAR 0 2
73793: PUSH
73794: LD_VAR 0 9
73798: ARRAY
73799: PUSH
73800: LD_INT 1
73802: ARRAY
73803: PPUSH
73804: LD_VAR 0 2
73808: PUSH
73809: LD_VAR 0 9
73813: ARRAY
73814: PUSH
73815: LD_INT 2
73817: ARRAY
73818: PPUSH
73819: CALL_OW 114
73823: GO 73839
// SetTag ( i , tag ) ;
73825: LD_VAR 0 4
73829: PPUSH
73830: LD_VAR 0 9
73834: PPUSH
73835: CALL_OW 109
// end else
73839: GO 73871
// if enemy then
73841: LD_VAR 0 5
73845: IFFALSE 73871
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73847: LD_VAR 0 4
73851: PPUSH
73852: LD_VAR 0 5
73856: PPUSH
73857: LD_VAR 0 4
73861: PPUSH
73862: CALL_OW 74
73866: PPUSH
73867: CALL_OW 115
// end ;
73871: GO 73548
73873: POP
73874: POP
// end ;
73875: LD_VAR 0 3
73879: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73880: LD_INT 0
73882: PPUSH
73883: PPUSH
73884: PPUSH
// if not unit or IsInUnit ( unit ) then
73885: LD_VAR 0 1
73889: NOT
73890: PUSH
73891: LD_VAR 0 1
73895: PPUSH
73896: CALL_OW 310
73900: OR
73901: IFFALSE 73905
// exit ;
73903: GO 73996
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73905: LD_ADDR_VAR 0 4
73909: PUSH
73910: LD_VAR 0 1
73914: PPUSH
73915: CALL_OW 250
73919: PPUSH
73920: LD_VAR 0 2
73924: PPUSH
73925: LD_INT 1
73927: PPUSH
73928: CALL_OW 272
73932: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73933: LD_ADDR_VAR 0 5
73937: PUSH
73938: LD_VAR 0 1
73942: PPUSH
73943: CALL_OW 251
73947: PPUSH
73948: LD_VAR 0 2
73952: PPUSH
73953: LD_INT 1
73955: PPUSH
73956: CALL_OW 273
73960: ST_TO_ADDR
// if ValidHex ( x , y ) then
73961: LD_VAR 0 4
73965: PPUSH
73966: LD_VAR 0 5
73970: PPUSH
73971: CALL_OW 488
73975: IFFALSE 73996
// ComTurnXY ( unit , x , y ) ;
73977: LD_VAR 0 1
73981: PPUSH
73982: LD_VAR 0 4
73986: PPUSH
73987: LD_VAR 0 5
73991: PPUSH
73992: CALL_OW 118
// end ;
73996: LD_VAR 0 3
74000: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74001: LD_INT 0
74003: PPUSH
74004: PPUSH
// result := false ;
74005: LD_ADDR_VAR 0 3
74009: PUSH
74010: LD_INT 0
74012: ST_TO_ADDR
// if not units then
74013: LD_VAR 0 2
74017: NOT
74018: IFFALSE 74022
// exit ;
74020: GO 74067
// for i in units do
74022: LD_ADDR_VAR 0 4
74026: PUSH
74027: LD_VAR 0 2
74031: PUSH
74032: FOR_IN
74033: IFFALSE 74065
// if See ( side , i ) then
74035: LD_VAR 0 1
74039: PPUSH
74040: LD_VAR 0 4
74044: PPUSH
74045: CALL_OW 292
74049: IFFALSE 74063
// begin result := true ;
74051: LD_ADDR_VAR 0 3
74055: PUSH
74056: LD_INT 1
74058: ST_TO_ADDR
// exit ;
74059: POP
74060: POP
74061: GO 74067
// end ;
74063: GO 74032
74065: POP
74066: POP
// end ;
74067: LD_VAR 0 3
74071: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74072: LD_INT 0
74074: PPUSH
74075: PPUSH
74076: PPUSH
74077: PPUSH
// if not unit or not points then
74078: LD_VAR 0 1
74082: NOT
74083: PUSH
74084: LD_VAR 0 2
74088: NOT
74089: OR
74090: IFFALSE 74094
// exit ;
74092: GO 74184
// dist := 99999 ;
74094: LD_ADDR_VAR 0 5
74098: PUSH
74099: LD_INT 99999
74101: ST_TO_ADDR
// for i in points do
74102: LD_ADDR_VAR 0 4
74106: PUSH
74107: LD_VAR 0 2
74111: PUSH
74112: FOR_IN
74113: IFFALSE 74182
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74115: LD_ADDR_VAR 0 6
74119: PUSH
74120: LD_VAR 0 1
74124: PPUSH
74125: LD_VAR 0 4
74129: PUSH
74130: LD_INT 1
74132: ARRAY
74133: PPUSH
74134: LD_VAR 0 4
74138: PUSH
74139: LD_INT 2
74141: ARRAY
74142: PPUSH
74143: CALL_OW 297
74147: ST_TO_ADDR
// if tmpDist < dist then
74148: LD_VAR 0 6
74152: PUSH
74153: LD_VAR 0 5
74157: LESS
74158: IFFALSE 74180
// begin result := i ;
74160: LD_ADDR_VAR 0 3
74164: PUSH
74165: LD_VAR 0 4
74169: ST_TO_ADDR
// dist := tmpDist ;
74170: LD_ADDR_VAR 0 5
74174: PUSH
74175: LD_VAR 0 6
74179: ST_TO_ADDR
// end ; end ;
74180: GO 74112
74182: POP
74183: POP
// end ; end_of_file
74184: LD_VAR 0 3
74188: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74189: LD_VAR 0 1
74193: PUSH
74194: LD_INT 200
74196: DOUBLE
74197: GREATEREQUAL
74198: IFFALSE 74206
74200: LD_INT 299
74202: DOUBLE
74203: LESSEQUAL
74204: IFTRUE 74208
74206: GO 74240
74208: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74209: LD_VAR 0 1
74213: PPUSH
74214: LD_VAR 0 2
74218: PPUSH
74219: LD_VAR 0 3
74223: PPUSH
74224: LD_VAR 0 4
74228: PPUSH
74229: LD_VAR 0 5
74233: PPUSH
74234: CALL 29892 0 5
74238: GO 74317
74240: LD_INT 300
74242: DOUBLE
74243: GREATEREQUAL
74244: IFFALSE 74252
74246: LD_INT 399
74248: DOUBLE
74249: LESSEQUAL
74250: IFTRUE 74254
74252: GO 74316
74254: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74255: LD_VAR 0 1
74259: PPUSH
74260: LD_VAR 0 2
74264: PPUSH
74265: LD_VAR 0 3
74269: PPUSH
74270: LD_VAR 0 4
74274: PPUSH
74275: LD_VAR 0 5
74279: PPUSH
74280: LD_VAR 0 6
74284: PPUSH
74285: LD_VAR 0 7
74289: PPUSH
74290: LD_VAR 0 8
74294: PPUSH
74295: LD_VAR 0 9
74299: PPUSH
74300: LD_VAR 0 10
74304: PPUSH
74305: LD_VAR 0 11
74309: PPUSH
74310: CALL 27534 0 11
74314: GO 74317
74316: POP
// end ;
74317: PPOPN 11
74319: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74320: LD_VAR 0 1
74324: PPUSH
74325: LD_VAR 0 2
74329: PPUSH
74330: LD_VAR 0 3
74334: PPUSH
74335: LD_VAR 0 4
74339: PPUSH
74340: LD_VAR 0 5
74344: PPUSH
74345: CALL 29628 0 5
// end ; end_of_file
74349: PPOPN 5
74351: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74352: LD_VAR 0 1
74356: PPUSH
74357: LD_VAR 0 2
74361: PPUSH
74362: LD_VAR 0 3
74366: PPUSH
74367: LD_VAR 0 4
74371: PPUSH
74372: LD_VAR 0 5
74376: PPUSH
74377: LD_VAR 0 6
74381: PPUSH
74382: CALL 15227 0 6
// end ;
74386: PPOPN 6
74388: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74389: CALL 15202 0 0
// end ;
74393: PPOPN 1
74395: END
