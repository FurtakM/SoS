// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 123 0 0
// CreateNature ;
  15: CALL 9164 0 0
// PrepareAlliance ;
  19: CALL 337 0 0
// PrepareFriends ;
  23: CALL 3635 0 0
// PrepareAmerican ;
  27: CALL 774 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 106
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// end else
 104: GO 110
// Action ;
 106: CALL 9500 0 0
// PreparePatrol ;
 110: CALL 1239 0 0
// game := true ;
 114: LD_ADDR_EXP 2
 118: PUSH
 119: LD_INT 1
 121: ST_TO_ADDR
// end ;
 122: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 123: LD_INT 0
 125: PPUSH
// debug := false ;
 126: LD_ADDR_EXP 1
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// friends := [ ] ;
 134: LD_ADDR_EXP 4
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// selected := [ ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// reached_lab := false ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// can_escape := false ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// game := false ;
 164: LD_ADDR_EXP 2
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_STRING GammaCommander
 179: PPUSH
 180: LD_INT 2
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// friends_kill_counter := 0 ;
 188: LD_ADDR_EXP 8
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// team_kill_counter := 0 ;
 196: LD_ADDR_EXP 9
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// extra_patrol := true ;
 204: LD_ADDR_EXP 11
 208: PUSH
 209: LD_INT 1
 211: ST_TO_ADDR
// on_hill := false ;
 212: LD_ADDR_EXP 7
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// invis_used := false ;
 220: LD_ADDR_EXP 12
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// alert := false ;
 228: LD_ADDR_EXP 13
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// every 0 0$1 trigger on_hill do
 241: LD_EXP 7
 245: IFFALSE 257
 247: GO 249
 249: DISABLE
// SetAchievement ( ACH_EYE ) ;
 250: LD_STRING ACH_EYE
 252: PPUSH
 253: CALL_OW 543
 257: END
// every 0 0$1 trigger not invis_used do var i ;
 258: LD_EXP 12
 262: NOT
 263: IFFALSE 334
 265: GO 267
 267: DISABLE
 268: LD_INT 0
 270: PPUSH
// begin enable ;
 271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 272: LD_ADDR_VAR 0 1
 276: PUSH
 277: LD_INT 22
 279: PUSH
 280: LD_INT 7
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 21
 289: PUSH
 290: LD_INT 1
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PPUSH
 301: CALL_OW 69
 305: PUSH
 306: FOR_IN
 307: IFFALSE 332
// if IsInvisible ( i ) then
 309: LD_VAR 0 1
 313: PPUSH
 314: CALL_OW 571
 318: IFFALSE 330
// begin invis_used := true ;
 320: LD_ADDR_EXP 12
 324: PUSH
 325: LD_INT 1
 327: ST_TO_ADDR
// break ;
 328: GO 332
// end ;
 330: GO 306
 332: POP
 333: POP
// end ; end_of_file
 334: PPOPN 1
 336: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 337: LD_INT 0
 339: PPUSH
 340: PPUSH
// uc_side := 7 ;
 341: LD_ADDR_OWVAR 20
 345: PUSH
 346: LD_INT 7
 348: ST_TO_ADDR
// uc_nation := 1 ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_INT 1
 356: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 357: LD_ADDR_EXP 14
 361: PUSH
 362: LD_STRING JMM
 364: PPUSH
 365: LD_EXP 1
 369: NOT
 370: PPUSH
 371: LD_STRING 11_
 373: PPUSH
 374: CALL 29544 0 3
 378: ST_TO_ADDR
// uc_side := 4 ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_INT 4
 386: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 387: LD_ADDR_EXP 15
 391: PUSH
 392: LD_STRING Roth
 394: PPUSH
 395: CALL_OW 25
 399: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 400: LD_EXP 14
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 412: LD_EXP 14
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 424: LD_EXP 14
 428: PPUSH
 429: LD_INT 105
 431: PPUSH
 432: LD_INT 10
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 442: LD_EXP 15
 446: PPUSH
 447: LD_INT 4
 449: PPUSH
 450: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 454: LD_EXP 15
 458: PPUSH
 459: LD_INT 109
 461: PPUSH
 462: LD_INT 10
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 472: LD_EXP 14
 476: PPUSH
 477: LD_EXP 15
 481: PPUSH
 482: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 486: LD_EXP 15
 490: PPUSH
 491: LD_EXP 14
 495: PPUSH
 496: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 500: LD_INT 3
 502: PPUSH
 503: LD_INT 3
 505: PPUSH
 506: LD_INT 3
 508: PPUSH
 509: LD_INT 12
 511: PPUSH
 512: LD_INT 100
 514: PPUSH
 515: CALL 34368 0 5
// cargo := CreateVehicle ;
 519: LD_ADDR_VAR 0 2
 523: PUSH
 524: CALL_OW 45
 528: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 529: LD_VAR 0 2
 533: PPUSH
 534: LD_INT 1
 536: PPUSH
 537: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_INT 179
 548: PPUSH
 549: LD_INT 45
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 559: LD_VAR 0 2
 563: PPUSH
 564: LD_INT 4
 566: PPUSH
 567: LD_INT 30
 569: PPUSH
 570: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 574: LD_STRING 11_artifact_captured
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 30
 584: IFFALSE 641
// begin cargo := CreateVehicle ;
 586: LD_ADDR_VAR 0 2
 590: PUSH
 591: CALL_OW 45
 595: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 596: LD_VAR 0 2
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 608: LD_VAR 0 2
 612: PPUSH
 613: LD_INT 171
 615: PPUSH
 616: LD_INT 85
 618: PPUSH
 619: LD_INT 0
 621: PPUSH
 622: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 626: LD_VAR 0 2
 630: PPUSH
 631: LD_INT 4
 633: PPUSH
 634: LD_INT 50
 636: PPUSH
 637: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 641: LD_INT 47
 643: PPUSH
 644: LD_INT 7
 646: PPUSH
 647: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 651: LD_INT 1
 653: PPUSH
 654: LD_INT 47
 656: PPUSH
 657: CALL_OW 471
// end ;
 661: LD_VAR 0 1
 665: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 666: LD_INT 38
 668: PPUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 7
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PPUSH
 679: CALL_OW 70
 683: PUSH
 684: LD_EXP 7
 688: NOT
 689: AND
 690: IFFALSE 721
 692: GO 694
 694: DISABLE
// begin enable ;
 695: ENABLE
// on_hill := true ;
 696: LD_ADDR_EXP 7
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 704: LD_INT 126
 706: PPUSH
 707: LD_INT 13
 709: PPUSH
 710: LD_INT 7
 712: PPUSH
 713: LD_INT 90
 715: NEG
 716: PPUSH
 717: CALL_OW 330
// end ;
 721: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 722: LD_INT 38
 724: PPUSH
 725: LD_INT 22
 727: PUSH
 728: LD_INT 7
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 70
 739: NOT
 740: PUSH
 741: LD_EXP 7
 745: AND
 746: IFFALSE 773
 748: GO 750
 750: DISABLE
// begin enable ;
 751: ENABLE
// on_hill := false ;
 752: LD_ADDR_EXP 7
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 760: LD_INT 126
 762: PPUSH
 763: LD_INT 13
 765: PPUSH
 766: LD_INT 7
 768: PPUSH
 769: CALL_OW 331
// end ; end_of_file
 773: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 774: LD_INT 0
 776: PPUSH
 777: PPUSH
 778: PPUSH
 779: PPUSH
 780: PPUSH
 781: PPUSH
// if Difficulty = 1 then
 782: LD_OWVAR 67
 786: PUSH
 787: LD_INT 1
 789: EQUAL
 790: IFFALSE 898
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 792: LD_ADDR_VAR 0 6
 796: PUSH
 797: LD_INT 155
 799: PUSH
 800: LD_INT 77
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 193
 809: PUSH
 810: LD_INT 93
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 188
 819: PUSH
 820: LD_INT 81
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 56
 829: PUSH
 830: LD_INT 85
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: LD_INT 98
 839: PUSH
 840: LD_INT 87
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: ST_TO_ADDR
// for i in tmp do
 854: LD_ADDR_VAR 0 2
 858: PUSH
 859: LD_VAR 0 6
 863: PUSH
 864: FOR_IN
 865: IFFALSE 896
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 1
 874: ARRAY
 875: PPUSH
 876: LD_VAR 0 2
 880: PUSH
 881: LD_INT 2
 883: ARRAY
 884: PPUSH
 885: CALL_OW 428
 889: PPUSH
 890: CALL_OW 64
 894: GO 864
 896: POP
 897: POP
// end ; defcon := 0 ;
 898: LD_ADDR_EXP 21
 902: PUSH
 903: LD_INT 0
 905: ST_TO_ADDR
// defcon_wave := 0 ;
 906: LD_ADDR_EXP 22
 910: PUSH
 911: LD_INT 0
 913: ST_TO_ADDR
// defenders := [ ] ;
 914: LD_ADDR_EXP 20
 918: PUSH
 919: EMPTY
 920: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 921: LD_INT 5
 923: PPUSH
 924: LD_STRING alpha
 926: PPUSH
 927: CALL_OW 500
// uc_side := 1 ;
 931: LD_ADDR_OWVAR 20
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
// uc_nation := 1 ;
 939: LD_ADDR_OWVAR 21
 943: PUSH
 944: LD_INT 1
 946: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 947: LD_ADDR_EXP 16
 951: PUSH
 952: LD_STRING Powell
 954: PPUSH
 955: CALL_OW 25
 959: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 960: LD_EXP 16
 964: PPUSH
 965: LD_INT 110
 967: PPUSH
 968: LD_INT 26
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 48
// ComHold ( Powell ) ;
 978: LD_EXP 16
 982: PPUSH
 983: CALL_OW 140
// for i = 1 to 5 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 5
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1057
// begin PrepareHuman ( false , 1 , 10 ) ;
1003: LD_INT 0
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1016: LD_ADDR_EXP 19
1020: PUSH
1021: LD_EXP 19
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL_OW 44
1033: PPUSH
1034: CALL_OW 2
1038: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1039: LD_EXP 19
1043: PUSH
1044: LD_INT 1
1046: ARRAY
1047: PPUSH
1048: LD_INT 18
1050: PPUSH
1051: CALL_OW 52
// end ;
1055: GO 1000
1057: POP
1058: POP
// if Difficulty > 2 then
1059: LD_OWVAR 67
1063: PUSH
1064: LD_INT 2
1066: GREATER
1067: IFFALSE 1116
// begin bc_type := b_turret ;
1069: LD_ADDR_OWVAR 42
1073: PUSH
1074: LD_INT 33
1076: ST_TO_ADDR
// bc_level := 7 ;
1077: LD_ADDR_OWVAR 43
1081: PUSH
1082: LD_INT 7
1084: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: LD_INT 107
1092: PPUSH
1093: LD_INT 55
1095: PPUSH
1096: LD_INT 5
1098: PPUSH
1099: CALL_OW 47
1103: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1104: LD_VAR 0 4
1108: PPUSH
1109: LD_INT 7
1111: PPUSH
1112: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1116: LD_ADDR_VAR 0 2
1120: PUSH
1121: LD_INT 22
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 30
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PPUSH
1145: CALL_OW 69
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ADD
1179: PUSH
1180: FOR_IN
1181: IFFALSE 1232
// for j = 1 to 3 do
1183: LD_ADDR_VAR 0 3
1187: PUSH
1188: DOUBLE
1189: LD_INT 1
1191: DEC
1192: ST_TO_ADDR
1193: LD_INT 3
1195: PUSH
1196: FOR_TO
1197: IFFALSE 1228
// begin PrepareHuman ( false , 3 , 6 ) ;
1199: LD_INT 0
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: LD_INT 6
1207: PPUSH
1208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1212: CALL_OW 44
1216: PPUSH
1217: LD_VAR 0 2
1221: PPUSH
1222: CALL_OW 52
// end ;
1226: GO 1196
1228: POP
1229: POP
1230: GO 1180
1232: POP
1233: POP
// end ;
1234: LD_VAR 0 1
1238: RET
// export function PreparePatrol ; var i , un ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
// uc_side := 1 ;
1244: LD_ADDR_OWVAR 20
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// uc_nation := 1 ;
1252: LD_ADDR_OWVAR 21
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1260: LD_ADDR_EXP 18
1264: PUSH
1265: LD_INT 99
1267: PUSH
1268: LD_INT 55
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 113
1277: PUSH
1278: LD_INT 67
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 129
1287: PUSH
1288: LD_INT 68
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 135
1297: PUSH
1298: LD_INT 62
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 103
1307: PUSH
1308: LD_INT 41
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 27
1324: PUSH
1325: LD_INT 49
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 46
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 87
1344: PUSH
1345: LD_INT 70
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 99
1354: PUSH
1355: LD_INT 79
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 118
1364: PUSH
1365: LD_INT 111
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: LD_INT 99
1374: PUSH
1375: LD_INT 79
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 87
1384: PUSH
1385: LD_INT 70
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 46
1394: PUSH
1395: LD_INT 49
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 200
1414: PUSH
1415: LD_INT 88
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 175
1424: PUSH
1425: LD_INT 80
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 135
1434: PUSH
1435: LD_INT 62
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 117
1444: PUSH
1445: LD_INT 53
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 103
1454: PUSH
1455: LD_INT 41
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 99
1464: PUSH
1465: LD_INT 24
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 85
1474: PUSH
1475: LD_INT 3
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 99
1484: PUSH
1485: LD_INT 24
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 103
1494: PUSH
1495: LD_INT 41
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 98
1504: PUSH
1505: LD_INT 47
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 99
1514: PUSH
1515: LD_INT 56
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 96
1524: PUSH
1525: LD_INT 66
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 99
1534: PUSH
1535: LD_INT 56
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 112
1544: PUSH
1545: LD_INT 66
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: PUSH
1552: LD_INT 129
1554: PUSH
1555: LD_INT 68
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 135
1564: PUSH
1565: LD_INT 62
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 156
1574: PUSH
1575: LD_INT 71
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 168
1584: PUSH
1585: LD_INT 76
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 168
1594: PUSH
1595: LD_INT 61
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 168
1604: PUSH
1605: LD_INT 75
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 185
1614: PUSH
1615: LD_INT 85
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: ST_TO_ADDR
// mobile_patrol := [ ] ;
1650: LD_ADDR_EXP 17
1654: PUSH
1655: EMPTY
1656: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1657: LD_INT 3
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 3
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 34368 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1676: LD_ADDR_EXP 17
1680: PUSH
1681: LD_EXP 17
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: CALL_OW 45
1693: PPUSH
1694: CALL_OW 2
1698: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1699: LD_EXP 17
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: LD_INT 99
1710: PPUSH
1711: LD_INT 55
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 3
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: LD_INT 100
1735: PPUSH
1736: CALL 34368 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1740: LD_ADDR_EXP 17
1744: PUSH
1745: LD_EXP 17
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 45
1757: PPUSH
1758: CALL_OW 2
1762: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1763: LD_EXP 17
1767: PUSH
1768: LD_INT 2
1770: ARRAY
1771: PPUSH
1772: LD_INT 27
1774: PPUSH
1775: LD_INT 49
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1785: LD_INT 3
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 9
1796: PUSH
1797: LD_INT 7
1799: PUSH
1800: LD_INT 7
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: PUSH
1808: LD_OWVAR 67
1812: ARRAY
1813: PPUSH
1814: LD_INT 100
1816: PPUSH
1817: CALL 34368 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1821: LD_ADDR_EXP 17
1825: PUSH
1826: LD_EXP 17
1830: PPUSH
1831: LD_INT 3
1833: PPUSH
1834: CALL_OW 45
1838: PPUSH
1839: CALL_OW 2
1843: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1844: LD_EXP 17
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PPUSH
1853: LD_INT 200
1855: PPUSH
1856: LD_INT 88
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 48
// for i = mobile_patrol downto 1 do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_EXP 17
1876: INC
1877: ST_TO_ADDR
1878: LD_INT 1
1880: PUSH
1881: FOR_DOWNTO
1882: IFFALSE 1893
// RaiseSailEvent ( 1 ) ;
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 427
1891: GO 1881
1893: POP
1894: POP
// end ;
1895: LD_VAR 0 1
1899: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1900: LD_INT 0
1902: PPUSH
1903: PPUSH
1904: PPUSH
1905: PPUSH
1906: PPUSH
1907: PPUSH
1908: PPUSH
1909: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_INT 20
1917: PUSH
1918: LD_INT 4
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 21
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1950: LD_ADDR_VAR 0 6
1954: PUSH
1955: LD_INT 176
1957: PUSH
1958: LD_INT 81
1960: PUSH
1961: LD_INT 135
1963: PUSH
1964: LD_INT 62
1966: PUSH
1967: LD_INT 114
1969: PUSH
1970: LD_INT 67
1972: PUSH
1973: LD_INT 93
1975: PUSH
1976: LD_INT 71
1978: PUSH
1979: LD_INT 76
1981: PUSH
1982: LD_INT 67
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 107
1999: PUSH
2000: LD_INT 92
2002: PUSH
2003: LD_INT 92
2005: PUSH
2006: LD_INT 72
2008: PUSH
2009: LD_INT 77
2011: PUSH
2012: LD_INT 68
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 45
2025: PUSH
2026: LD_INT 49
2028: PUSH
2029: LD_INT 67
2031: PUSH
2032: LD_INT 59
2034: PUSH
2035: LD_INT 77
2037: PUSH
2038: LD_INT 68
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_VAR 0 5
2066: PPUSH
2067: CALL_OW 12
2071: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2072: LD_ADDR_VAR 0 3
2076: PUSH
2077: LD_INT 1
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: CALL_OW 12
2087: ST_TO_ADDR
// uc_side := 1 ;
2088: LD_ADDR_OWVAR 20
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// uc_nation := 1 ;
2096: LD_ADDR_OWVAR 21
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2104: LD_INT 2
2106: PPUSH
2107: LD_INT 3
2109: PPUSH
2110: LD_INT 3
2112: PPUSH
2113: LD_INT 12
2115: PPUSH
2116: LD_INT 100
2118: PPUSH
2119: CALL 34368 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 8
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2133: LD_VAR 0 8
2137: PPUSH
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PPUSH
2153: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2157: LD_VAR 0 8
2161: PPUSH
2162: LD_VAR 0 5
2166: PUSH
2167: LD_VAR 0 4
2171: ARRAY
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2184: LD_VAR 0 8
2188: PPUSH
2189: LD_INT 1
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: LD_VAR 0 3
2203: ARRAY
2204: PPUSH
2205: LD_INT 100
2207: PPUSH
2208: CALL_OW 290
// tmp := road [ k ] ;
2212: LD_ADDR_VAR 0 7
2216: PUSH
2217: LD_VAR 0 6
2221: PUSH
2222: LD_VAR 0 4
2226: ARRAY
2227: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: DOUBLE
2234: LD_INT 1
2236: DEC
2237: ST_TO_ADDR
2238: LD_VAR 0 7
2242: PUSH
2243: LD_INT 2
2245: DIV
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2250: LD_VAR 0 8
2254: PPUSH
2255: LD_VAR 0 7
2259: PUSH
2260: LD_VAR 0 2
2264: PUSH
2265: LD_INT 2
2267: MUL
2268: PUSH
2269: LD_INT 1
2271: MINUS
2272: ARRAY
2273: PPUSH
2274: LD_VAR 0 7
2278: PUSH
2279: LD_VAR 0 2
2283: PUSH
2284: LD_INT 2
2286: MUL
2287: ARRAY
2288: PPUSH
2289: CALL_OW 171
2293: GO 2247
2295: POP
2296: POP
// AddComGive ( veh , alfa ) ;
2297: LD_VAR 0 8
2301: PPUSH
2302: LD_INT 5
2304: PPUSH
2305: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2309: LD_VAR 0 8
2313: PPUSH
2314: LD_INT 70
2316: PPUSH
2317: CALL_OW 202
// for i = tmp div 2 downto 1 do
2321: LD_ADDR_VAR 0 2
2325: PUSH
2326: DOUBLE
2327: LD_VAR 0 7
2331: PUSH
2332: LD_INT 2
2334: DIV
2335: INC
2336: ST_TO_ADDR
2337: LD_INT 1
2339: PUSH
2340: FOR_DOWNTO
2341: IFFALSE 2388
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2343: LD_VAR 0 8
2347: PPUSH
2348: LD_VAR 0 7
2352: PUSH
2353: LD_VAR 0 2
2357: PUSH
2358: LD_INT 2
2360: MUL
2361: PUSH
2362: LD_INT 1
2364: MINUS
2365: ARRAY
2366: PPUSH
2367: LD_VAR 0 7
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_INT 2
2379: MUL
2380: ARRAY
2381: PPUSH
2382: CALL_OW 171
2386: GO 2340
2388: POP
2389: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2390: LD_VAR 0 8
2394: PPUSH
2395: LD_VAR 0 5
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2414: LD_INT 35
2416: PPUSH
2417: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2421: LD_VAR 0 8
2425: PPUSH
2426: LD_VAR 0 5
2430: PUSH
2431: LD_VAR 0 4
2435: ARRAY
2436: PUSH
2437: LD_INT 1
2439: ARRAY
2440: PPUSH
2441: CALL_OW 308
2445: PUSH
2446: LD_VAR 0 8
2450: PPUSH
2451: LD_VAR 0 3
2455: PPUSH
2456: CALL_OW 289
2460: PUSH
2461: LD_INT 0
2463: EQUAL
2464: AND
2465: IFFALSE 2414
// RemoveUnit ( veh ) ;
2467: LD_VAR 0 8
2471: PPUSH
2472: CALL_OW 64
// end ;
2476: LD_VAR 0 1
2480: RET
// every 3 3$00 do
2481: GO 2483
2483: DISABLE
// begin enable ;
2484: ENABLE
// SpawnCargo ;
2485: CALL 1900 0 0
// end ;
2489: END
// export function PrepareDefenders ; var i , tmp ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
// if defenders then
2495: LD_EXP 20
2499: IFFALSE 2503
// exit ;
2501: GO 2767
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2503: LD_ADDR_VAR 0 2
2507: PUSH
2508: DOUBLE
2509: LD_INT 1
2511: DEC
2512: ST_TO_ADDR
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_OWVAR 67
2531: ARRAY
2532: PUSH
2533: FOR_TO
2534: IFFALSE 2673
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: LD_INT 6
2543: PPUSH
2544: LD_INT 2
2546: PUSH
2547: LD_INT 3
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 12
2564: ARRAY
2565: PPUSH
2566: LD_INT 1
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: ARRAY
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 5
2596: PUSH
2597: LD_INT 9
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 1
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: CALL_OW 12
2615: ARRAY
2616: PPUSH
2617: CALL 32022 0 5
2621: ST_TO_ADDR
// if tmp then
2622: LD_VAR 0 3
2626: IFFALSE 2671
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2628: LD_INT 6
2630: PPUSH
2631: LD_VAR 0 3
2635: PUSH
2636: LD_INT 1
2638: ARRAY
2639: PPUSH
2640: LD_VAR 0 3
2644: PUSH
2645: LD_INT 2
2647: ARRAY
2648: PPUSH
2649: LD_VAR 0 3
2653: PUSH
2654: LD_INT 3
2656: ARRAY
2657: PPUSH
2658: LD_VAR 0 3
2662: PUSH
2663: LD_INT 4
2665: ARRAY
2666: PPUSH
2667: CALL_OW 185
// end ;
2671: GO 2533
2673: POP
2674: POP
// repeat wait ( 0 0$1 ) ;
2675: LD_INT 35
2677: PPUSH
2678: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 ] [ Difficulty ] ;
2682: LD_INT 22
2684: PUSH
2685: LD_INT 1
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 33
2694: PUSH
2695: LD_INT 2
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PUSH
2725: LD_OWVAR 67
2729: ARRAY
2730: GREATEREQUAL
2731: IFFALSE 2675
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2733: LD_ADDR_EXP 20
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 33
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PPUSH
2762: CALL_OW 69
2766: ST_TO_ADDR
// end ;
2767: LD_VAR 0 1
2771: RET
// export function Defend ; var i , un , veh , tmp ; begin
2772: LD_INT 0
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
2778: PPUSH
// defcon_wave := defcon_wave + 1 ;
2779: LD_ADDR_EXP 22
2783: PUSH
2784: LD_EXP 22
2788: PUSH
2789: LD_INT 1
2791: PLUS
2792: ST_TO_ADDR
// if not defenders then
2793: LD_EXP 20
2797: NOT
2798: IFFALSE 2804
// PrepareDefenders ;
2800: CALL 2490 0 0
// if defcon_wave > 1 then
2804: LD_EXP 22
2808: PUSH
2809: LD_INT 1
2811: GREATER
2812: IFFALSE 3070
// begin for i = 1 to defcon_wave + 2 do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_EXP 22
2828: PUSH
2829: LD_INT 2
2831: PLUS
2832: PUSH
2833: FOR_TO
2834: IFFALSE 2976
// begin uc_side := 1 ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// uc_nation := 1 ;
2844: LD_ADDR_OWVAR 21
2848: PUSH
2849: LD_INT 1
2851: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2852: LD_INT 4
2854: PPUSH
2855: LD_INT 3
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: LD_INT 4
2863: PUSH
2864: LD_INT 6
2866: PUSH
2867: LD_INT 7
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 3
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: LD_INT 100
2889: PPUSH
2890: CALL 34368 0 5
// veh := CreateVehicle ;
2894: LD_ADDR_VAR 0 4
2898: PUSH
2899: CALL_OW 45
2903: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2904: LD_VAR 0 4
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: CALL_OW 233
// defenders := defenders ^ veh ;
2916: LD_ADDR_EXP 20
2920: PUSH
2921: LD_EXP 20
2925: PUSH
2926: LD_VAR 0 4
2930: ADD
2931: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2932: LD_INT 0
2934: PPUSH
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 9
2940: PPUSH
2941: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2945: CALL_OW 44
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_INT 25
2966: PPUSH
2967: LD_INT 0
2969: PPUSH
2970: CALL_OW 49
// end ;
2974: GO 2833
2976: POP
2977: POP
// for i = 1 to defcon_wave do
2978: LD_ADDR_VAR 0 2
2982: PUSH
2983: DOUBLE
2984: LD_INT 1
2986: DEC
2987: ST_TO_ADDR
2988: LD_EXP 22
2992: PUSH
2993: FOR_TO
2994: IFFALSE 3068
// begin uc_side := 1 ;
2996: LD_ADDR_OWVAR 20
3000: PUSH
3001: LD_INT 1
3003: ST_TO_ADDR
// uc_nation := 1 ;
3004: LD_ADDR_OWVAR 21
3008: PUSH
3009: LD_INT 1
3011: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3012: LD_INT 0
3014: PPUSH
3015: LD_INT 5
3017: PPUSH
3018: LD_INT 9
3020: PPUSH
3021: CALL_OW 380
// un := CreateHuman ;
3025: LD_ADDR_VAR 0 3
3029: PUSH
3030: CALL_OW 44
3034: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3035: LD_VAR 0 3
3039: PPUSH
3040: LD_INT 25
3042: PPUSH
3043: LD_INT 0
3045: PPUSH
3046: CALL_OW 49
// defenders := defenders ^ un ;
3050: LD_ADDR_EXP 20
3054: PUSH
3055: LD_EXP 20
3059: PUSH
3060: LD_VAR 0 3
3064: ADD
3065: ST_TO_ADDR
// end ;
3066: GO 2993
3068: POP
3069: POP
// end ; repeat wait ( 0 0$1 ) ;
3070: LD_INT 35
3072: PPUSH
3073: CALL_OW 67
// for i in defenders do
3077: LD_ADDR_VAR 0 2
3081: PUSH
3082: LD_EXP 20
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3170
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3090: LD_EXP 21
3094: PUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: LD_EXP 21
3104: PUSH
3105: LD_INT 1
3107: ARRAY
3108: PPUSH
3109: LD_EXP 21
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: PPUSH
3118: CALL_OW 297
3122: PUSH
3123: LD_INT 10
3125: GREATER
3126: AND
3127: PUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 314
3137: NOT
3138: AND
3139: IFFALSE 3168
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3141: LD_VAR 0 2
3145: PPUSH
3146: LD_EXP 21
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_EXP 21
3159: PUSH
3160: LD_INT 2
3162: ARRAY
3163: PPUSH
3164: CALL_OW 114
// end ;
3168: GO 3087
3170: POP
3171: POP
// until not defenders ;
3172: LD_EXP 20
3176: NOT
3177: IFFALSE 3070
// end ;
3179: LD_VAR 0 1
3183: RET
// every 0 0$1 do var radar , i ;
3184: GO 3186
3186: DISABLE
3187: LD_INT 0
3189: PPUSH
3190: PPUSH
// begin uc_side := 1 ;
3191: LD_ADDR_OWVAR 20
3195: PUSH
3196: LD_INT 1
3198: ST_TO_ADDR
// uc_nation := 1 ;
3199: LD_ADDR_OWVAR 21
3203: PUSH
3204: LD_INT 1
3206: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3207: LD_INT 1
3209: PPUSH
3210: LD_INT 2
3212: PPUSH
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 11
3218: PPUSH
3219: LD_INT 100
3221: PPUSH
3222: CALL 34368 0 5
// radar := CreateVehicle ;
3226: LD_ADDR_VAR 0 1
3230: PUSH
3231: CALL_OW 45
3235: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_INT 4
3243: PPUSH
3244: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3248: LD_VAR 0 1
3252: PPUSH
3253: LD_INT 51
3255: PPUSH
3256: LD_INT 45
3258: PPUSH
3259: LD_INT 0
3261: PPUSH
3262: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_INT 700
3273: PPUSH
3274: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3278: LD_VAR 0 1
3282: PPUSH
3283: LD_INT 65
3285: PPUSH
3286: LD_INT 75
3288: PPUSH
3289: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3293: LD_VAR 0 1
3297: PPUSH
3298: LD_INT 350
3300: PPUSH
3301: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_INT 83
3312: PPUSH
3313: LD_INT 87
3315: PPUSH
3316: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3320: LD_VAR 0 1
3324: PPUSH
3325: LD_INT 525
3327: PPUSH
3328: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_INT 94
3339: PPUSH
3340: LD_INT 81
3342: PPUSH
3343: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3347: LD_VAR 0 1
3351: PPUSH
3352: LD_INT 350
3354: PPUSH
3355: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3359: LD_VAR 0 1
3363: PPUSH
3364: LD_INT 55
3366: PPUSH
3367: LD_INT 48
3369: PPUSH
3370: CALL_OW 171
// wait ( 1 1$00 ) ;
3374: LD_INT 2100
3376: PPUSH
3377: CALL_OW 67
// until not IsOk ( radar ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 302
3390: NOT
3391: IFFALSE 3266
// end ;
3393: PPOPN 2
3395: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3396: LD_OWVAR 67
3400: PUSH
3401: LD_INT 1
3403: GREATER
3404: PUSH
3405: LD_EXP 11
3409: AND
3410: IFFALSE 3632
3412: GO 3414
3414: DISABLE
3415: LD_INT 0
3417: PPUSH
// begin enable ;
3418: ENABLE
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 3
3440: PPUSH
3441: LD_INT 3
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: LD_INT 100
3449: PPUSH
3450: CALL 34368 0 5
// un := CreateVehicle ;
3454: LD_ADDR_VAR 0 1
3458: PUSH
3459: CALL_OW 45
3463: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 3
3471: PPUSH
3472: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: LD_INT 155
3483: PPUSH
3484: LD_INT 2
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 169
3501: PPUSH
3502: LD_INT 77
3504: PPUSH
3505: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3509: LD_VAR 0 1
3513: PPUSH
3514: LD_INT 70
3516: PPUSH
3517: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3521: LD_VAR 0 1
3525: PPUSH
3526: LD_INT 134
3528: PPUSH
3529: LD_INT 62
3531: PPUSH
3532: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_INT 103
3543: PPUSH
3544: LD_INT 42
3546: PPUSH
3547: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3551: LD_VAR 0 1
3555: PPUSH
3556: LD_INT 70
3558: PPUSH
3559: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3563: LD_VAR 0 1
3567: PPUSH
3568: LD_INT 84
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// if IsDead ( un ) then
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 301
3594: IFFALSE 3606
// begin extra_patrol := false ;
3596: LD_ADDR_EXP 11
3600: PUSH
3601: LD_INT 0
3603: ST_TO_ADDR
// exit ;
3604: GO 3632
// end ; until IsAt ( un , 84 , 2 ) ;
3606: LD_VAR 0 1
3610: PPUSH
3611: LD_INT 84
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: CALL_OW 307
3621: IFFALSE 3578
// RemoveUnit ( un ) ;
3623: LD_VAR 0 1
3627: PPUSH
3628: CALL_OW 64
// end ; end_of_file
3632: PPOPN 1
3634: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3635: LD_INT 0
3637: PPUSH
3638: PPUSH
3639: PPUSH
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
// uc_side := 4 ;
3644: LD_ADDR_OWVAR 20
3648: PUSH
3649: LD_INT 4
3651: ST_TO_ADDR
// uc_nation := 1 ;
3652: LD_ADDR_OWVAR 21
3656: PUSH
3657: LD_INT 1
3659: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3660: LD_ADDR_EXP 37
3664: PUSH
3665: LD_STRING DeltaDoctor
3667: PPUSH
3668: LD_EXP 1
3672: NOT
3673: PPUSH
3674: LD_STRING 10c_
3676: PPUSH
3677: CALL 29544 0 3
3681: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3682: LD_ADDR_EXP 36
3686: PUSH
3687: LD_STRING Joan
3689: PPUSH
3690: LD_EXP 1
3694: NOT
3695: PPUSH
3696: LD_STRING 10c_
3698: PPUSH
3699: CALL 29544 0 3
3703: ST_TO_ADDR
// if Joan then
3704: LD_EXP 36
3708: IFFALSE 3739
// friends := Insert ( friends , friends + 1 , Joan ) ;
3710: LD_ADDR_EXP 4
3714: PUSH
3715: LD_EXP 4
3719: PPUSH
3720: LD_EXP 4
3724: PUSH
3725: LD_INT 1
3727: PLUS
3728: PPUSH
3729: LD_EXP 36
3733: PPUSH
3734: CALL_OW 2
3738: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3739: LD_ADDR_EXP 35
3743: PUSH
3744: LD_STRING Simms
3746: PPUSH
3747: LD_EXP 1
3751: NOT
3752: PPUSH
3753: LD_STRING 10c_
3755: PPUSH
3756: CALL 29544 0 3
3760: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3761: LD_ADDR_EXP 34
3765: PUSH
3766: LD_STRING Kikuchi
3768: PPUSH
3769: LD_EXP 1
3773: NOT
3774: PPUSH
3775: LD_STRING 11_
3777: PPUSH
3778: CALL 29544 0 3
3782: ST_TO_ADDR
// if Kikuchi then
3783: LD_EXP 34
3787: IFFALSE 3818
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3789: LD_ADDR_EXP 4
3793: PUSH
3794: LD_EXP 4
3798: PPUSH
3799: LD_EXP 4
3803: PUSH
3804: LD_INT 1
3806: PLUS
3807: PPUSH
3808: LD_EXP 34
3812: PPUSH
3813: CALL_OW 2
3817: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3818: LD_ADDR_EXP 33
3822: PUSH
3823: LD_STRING Frank
3825: PPUSH
3826: LD_EXP 1
3830: NOT
3831: PPUSH
3832: LD_STRING 11_
3834: PPUSH
3835: CALL 29544 0 3
3839: ST_TO_ADDR
// if Frank then
3840: LD_EXP 33
3844: IFFALSE 3875
// friends := Insert ( friends , friends + 1 , Frank ) ;
3846: LD_ADDR_EXP 4
3850: PUSH
3851: LD_EXP 4
3855: PPUSH
3856: LD_EXP 4
3860: PUSH
3861: LD_INT 1
3863: PLUS
3864: PPUSH
3865: LD_EXP 33
3869: PPUSH
3870: CALL_OW 2
3874: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3875: LD_ADDR_EXP 32
3879: PUSH
3880: LD_STRING Gary
3882: PPUSH
3883: LD_EXP 1
3887: NOT
3888: PPUSH
3889: LD_STRING 11_
3891: PPUSH
3892: CALL 29544 0 3
3896: ST_TO_ADDR
// if Gary then
3897: LD_EXP 32
3901: IFFALSE 3932
// friends := Insert ( friends , friends + 1 , Gary ) ;
3903: LD_ADDR_EXP 4
3907: PUSH
3908: LD_EXP 4
3912: PPUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 1
3920: PLUS
3921: PPUSH
3922: LD_EXP 32
3926: PPUSH
3927: CALL_OW 2
3931: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3932: LD_ADDR_EXP 31
3936: PUSH
3937: LD_STRING Cornell
3939: PPUSH
3940: LD_EXP 1
3944: NOT
3945: PPUSH
3946: LD_STRING 11_
3948: PPUSH
3949: CALL 29544 0 3
3953: ST_TO_ADDR
// if Cornel then
3954: LD_EXP 31
3958: IFFALSE 3989
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3960: LD_ADDR_EXP 4
3964: PUSH
3965: LD_EXP 4
3969: PPUSH
3970: LD_EXP 4
3974: PUSH
3975: LD_INT 1
3977: PLUS
3978: PPUSH
3979: LD_EXP 31
3983: PPUSH
3984: CALL_OW 2
3988: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
3989: LD_ADDR_EXP 30
3993: PUSH
3994: LD_STRING Houten
3996: PPUSH
3997: LD_EXP 1
4001: NOT
4002: PPUSH
4003: LD_STRING 11_
4005: PPUSH
4006: CALL 29544 0 3
4010: ST_TO_ADDR
// if Houten then
4011: LD_EXP 30
4015: IFFALSE 4046
// friends := Insert ( friends , friends + 1 , Houten ) ;
4017: LD_ADDR_EXP 4
4021: PUSH
4022: LD_EXP 4
4026: PPUSH
4027: LD_EXP 4
4031: PUSH
4032: LD_INT 1
4034: PLUS
4035: PPUSH
4036: LD_EXP 30
4040: PPUSH
4041: CALL_OW 2
4045: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4046: LD_ADDR_EXP 29
4050: PUSH
4051: LD_STRING Gladstone
4053: PPUSH
4054: LD_EXP 1
4058: NOT
4059: PPUSH
4060: LD_STRING 11_
4062: PPUSH
4063: CALL 29544 0 3
4067: ST_TO_ADDR
// if Gladstone then
4068: LD_EXP 29
4072: IFFALSE 4103
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4074: LD_ADDR_EXP 4
4078: PUSH
4079: LD_EXP 4
4083: PPUSH
4084: LD_EXP 4
4088: PUSH
4089: LD_INT 1
4091: PLUS
4092: PPUSH
4093: LD_EXP 29
4097: PPUSH
4098: CALL_OW 2
4102: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4103: LD_ADDR_EXP 23
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_EXP 1
4115: NOT
4116: PPUSH
4117: LD_STRING 11_
4119: PPUSH
4120: CALL 29544 0 3
4124: ST_TO_ADDR
// if Lisa then
4125: LD_EXP 23
4129: IFFALSE 4154
// friends := Insert ( friends , 1 , Lisa ) ;
4131: LD_ADDR_EXP 4
4135: PUSH
4136: LD_EXP 4
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_EXP 23
4148: PPUSH
4149: CALL_OW 2
4153: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4154: LD_ADDR_EXP 24
4158: PUSH
4159: LD_STRING Donaldson
4161: PPUSH
4162: LD_EXP 1
4166: NOT
4167: PPUSH
4168: LD_STRING 11_
4170: PPUSH
4171: CALL 29544 0 3
4175: ST_TO_ADDR
// if Donaldson then
4176: LD_EXP 24
4180: IFFALSE 4211
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4182: LD_ADDR_EXP 4
4186: PUSH
4187: LD_EXP 4
4191: PPUSH
4192: LD_EXP 4
4196: PUSH
4197: LD_INT 1
4199: PLUS
4200: PPUSH
4201: LD_EXP 24
4205: PPUSH
4206: CALL_OW 2
4210: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4211: LD_ADDR_EXP 25
4215: PUSH
4216: LD_STRING Bobby
4218: PPUSH
4219: LD_EXP 1
4223: NOT
4224: PPUSH
4225: LD_STRING 11_
4227: PPUSH
4228: CALL 29544 0 3
4232: ST_TO_ADDR
// if Bobby then
4233: LD_EXP 25
4237: IFFALSE 4268
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4239: LD_ADDR_EXP 4
4243: PUSH
4244: LD_EXP 4
4248: PPUSH
4249: LD_EXP 4
4253: PUSH
4254: LD_INT 1
4256: PLUS
4257: PPUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 2
4267: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4268: LD_ADDR_EXP 26
4272: PUSH
4273: LD_STRING Cyrus
4275: PPUSH
4276: LD_EXP 1
4280: NOT
4281: PPUSH
4282: LD_STRING 11_
4284: PPUSH
4285: CALL 29544 0 3
4289: ST_TO_ADDR
// if Cyrus then
4290: LD_EXP 26
4294: IFFALSE 4325
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4296: LD_ADDR_EXP 4
4300: PUSH
4301: LD_EXP 4
4305: PPUSH
4306: LD_EXP 4
4310: PUSH
4311: LD_INT 1
4313: PLUS
4314: PPUSH
4315: LD_EXP 26
4319: PPUSH
4320: CALL_OW 2
4324: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4325: LD_ADDR_EXP 27
4329: PUSH
4330: LD_STRING Denis
4332: PPUSH
4333: LD_EXP 1
4337: NOT
4338: PPUSH
4339: LD_STRING 11_
4341: PPUSH
4342: CALL 29544 0 3
4346: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4347: LD_ADDR_EXP 28
4351: PUSH
4352: LD_STRING Brown
4354: PPUSH
4355: LD_EXP 1
4359: NOT
4360: PPUSH
4361: LD_STRING 11_
4363: PPUSH
4364: CALL 29544 0 3
4368: ST_TO_ADDR
// if Brown then
4369: LD_EXP 28
4373: IFFALSE 4404
// friends := Insert ( friends , friends + 1 , Brown ) ;
4375: LD_ADDR_EXP 4
4379: PUSH
4380: LD_EXP 4
4384: PPUSH
4385: LD_EXP 4
4389: PUSH
4390: LD_INT 1
4392: PLUS
4393: PPUSH
4394: LD_EXP 28
4398: PPUSH
4399: CALL_OW 2
4403: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4404: LD_ADDR_EXP 4
4408: PUSH
4409: LD_EXP 4
4413: PUSH
4414: LD_STRING 11c_others
4416: PPUSH
4417: CALL_OW 31
4421: ADD
4422: PUSH
4423: LD_STRING 11_others
4425: PPUSH
4426: CALL_OW 31
4430: ADD
4431: ST_TO_ADDR
// if friends < 18 then
4432: LD_EXP 4
4436: PUSH
4437: LD_INT 18
4439: LESS
4440: IFFALSE 4512
// for i = 1 to 18 do
4442: LD_ADDR_VAR 0 2
4446: PUSH
4447: DOUBLE
4448: LD_INT 1
4450: DEC
4451: ST_TO_ADDR
4452: LD_INT 18
4454: PUSH
4455: FOR_TO
4456: IFFALSE 4510
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4458: LD_INT 0
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: LD_INT 4
4466: PPUSH
4467: CALL_OW 12
4471: PPUSH
4472: LD_INT 7
4474: PPUSH
4475: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4479: LD_ADDR_EXP 4
4483: PUSH
4484: LD_EXP 4
4488: PPUSH
4489: LD_EXP 4
4493: PUSH
4494: LD_INT 1
4496: PLUS
4497: PPUSH
4498: CALL_OW 44
4502: PPUSH
4503: CALL_OW 2
4507: ST_TO_ADDR
// end ;
4508: GO 4455
4510: POP
4511: POP
// for i in friends do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: LD_EXP 4
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4581
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4525: LD_VAR 0 2
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: CALL_OW 259
4537: PUSH
4538: LD_VAR 0 2
4542: PPUSH
4543: LD_INT 4
4545: PPUSH
4546: CALL_OW 259
4550: GREATEREQUAL
4551: IFFALSE 4567
// SetClass ( i , class_soldier ) else
4553: LD_VAR 0 2
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: CALL_OW 336
4565: GO 4579
// SetClass ( i , class_scientistic ) ;
4567: LD_VAR 0 2
4571: PPUSH
4572: LD_INT 4
4574: PPUSH
4575: CALL_OW 336
4579: GO 4522
4581: POP
4582: POP
// if Frank then
4583: LD_EXP 33
4587: IFFALSE 4601
// SetClass ( Frank , class_sniper ) ;
4589: LD_EXP 33
4593: PPUSH
4594: LD_INT 5
4596: PPUSH
4597: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4601: LD_EXP 36
4605: PUSH
4606: LD_EXP 27
4610: PUSH
4611: LD_EXP 37
4615: PUSH
4616: LD_EXP 35
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: LD_INT 4
4629: PPUSH
4630: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4634: LD_ADDR_EXP 3
4638: PUSH
4639: LD_STRING 
4641: PPUSH
4642: LD_INT 7
4644: PPUSH
4645: LD_INT 7
4647: PPUSH
4648: LD_INT -6
4650: PUSH
4651: LD_EXP 14
4655: PUSH
4656: LD_EXP 15
4660: PUSH
4661: LD_EXP 35
4665: PUSH
4666: LD_EXP 27
4670: PUSH
4671: LD_EXP 37
4675: PUSH
4676: LD_INT -2
4678: PUSH
4679: LD_INT -3
4681: PUSH
4682: LD_INT -5
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: LD_EXP 4
4700: ADD
4701: PPUSH
4702: LD_INT 1
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: LD_INT 2
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 5
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: PPUSH
4734: CALL_OW 42
4738: ST_TO_ADDR
// if Simms then
4739: LD_EXP 35
4743: IFFALSE 4761
// selected := selected ^ Simms ;
4745: LD_ADDR_EXP 3
4749: PUSH
4750: LD_EXP 3
4754: PUSH
4755: LD_EXP 35
4759: ADD
4760: ST_TO_ADDR
// if Denis then
4761: LD_EXP 27
4765: IFFALSE 4783
// selected := selected ^ Denis ;
4767: LD_ADDR_EXP 3
4771: PUSH
4772: LD_EXP 3
4776: PUSH
4777: LD_EXP 27
4781: ADD
4782: ST_TO_ADDR
// if DeltaDoctor then
4783: LD_EXP 37
4787: IFFALSE 4805
// selected := selected ^ DeltaDoctor ;
4789: LD_ADDR_EXP 3
4793: PUSH
4794: LD_EXP 3
4798: PUSH
4799: LD_EXP 37
4803: ADD
4804: ST_TO_ADDR
// friends := friends diff selected ;
4805: LD_ADDR_EXP 4
4809: PUSH
4810: LD_EXP 4
4814: PUSH
4815: LD_EXP 3
4819: DIFF
4820: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4821: LD_ADDR_VAR 0 4
4825: PUSH
4826: LD_INT 111
4828: PUSH
4829: LD_INT 137
4831: PUSH
4832: LD_INT 51
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 147
4842: PUSH
4843: LD_INT 129
4845: PUSH
4846: LD_INT 25
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: LD_INT 5
4865: PUSH
4866: LD_INT 6
4868: PUSH
4869: LD_INT 7
4871: PUSH
4872: LD_INT 8
4874: PUSH
4875: LD_INT 17
4877: PUSH
4878: LD_INT 18
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// for i in buildings do
4889: LD_ADDR_VAR 0 2
4893: PUSH
4894: LD_VAR 0 4
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4916
// SetSide ( i , 4 ) ;
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_INT 4
4909: PPUSH
4910: CALL_OW 235
4914: GO 4899
4916: POP
4917: POP
// for i in selected do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: LD_EXP 3
4927: PUSH
4928: FOR_IN
4929: IFFALSE 5269
// begin if GetClass ( i ) in [ 1 , 5 ] then
4931: LD_VAR 0 2
4935: PPUSH
4936: CALL_OW 257
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 5
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: IN
4951: IFFALSE 5111
// begin if buildings [ 1 ] then
4953: LD_VAR 0 4
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: IFFALSE 5022
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4963: LD_VAR 0 2
4967: PPUSH
4968: LD_VAR 0 4
4972: PUSH
4973: LD_INT 1
4975: ARRAY
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: PPUSH
4981: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
4985: LD_ADDR_VAR 0 4
4989: PUSH
4990: LD_VAR 0 4
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_VAR 0 4
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL_OW 3
5014: PPUSH
5015: CALL_OW 1
5019: ST_TO_ADDR
// end else
5020: GO 5109
// begin if not areas then
5022: LD_VAR 0 5
5026: NOT
5027: IFFALSE 5061
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_INT 87
5036: PPUSH
5037: LD_INT 68
5039: PPUSH
5040: LD_INT 8
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 50
// ComHold ( i ) ;
5050: LD_VAR 0 2
5054: PPUSH
5055: CALL_OW 140
// end else
5059: GO 5109
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 5
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PPUSH
5075: LD_INT 0
5077: PPUSH
5078: CALL_OW 49
// ComHold ( i ) ;
5082: LD_VAR 0 2
5086: PPUSH
5087: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5091: LD_ADDR_VAR 0 5
5095: PUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 3
5108: ST_TO_ADDR
// end ; end ; end else
5109: GO 5267
// begin if buildings [ 2 ] then
5111: LD_VAR 0 4
5115: PUSH
5116: LD_INT 2
5118: ARRAY
5119: IFFALSE 5180
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5121: LD_VAR 0 2
5125: PPUSH
5126: LD_VAR 0 4
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5143: LD_ADDR_VAR 0 4
5147: PUSH
5148: LD_VAR 0 4
5152: PPUSH
5153: LD_INT 2
5155: PPUSH
5156: LD_VAR 0 4
5160: PUSH
5161: LD_INT 2
5163: ARRAY
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: CALL_OW 3
5172: PPUSH
5173: CALL_OW 1
5177: ST_TO_ADDR
// end else
5178: GO 5267
// begin if not areas then
5180: LD_VAR 0 5
5184: NOT
5185: IFFALSE 5219
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_INT 87
5194: PPUSH
5195: LD_INT 68
5197: PPUSH
5198: LD_INT 8
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 50
// ComHold ( i ) ;
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 140
// end else
5217: GO 5267
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5219: LD_VAR 0 2
5223: PPUSH
5224: LD_VAR 0 5
5228: PUSH
5229: LD_INT 1
5231: ARRAY
5232: PPUSH
5233: LD_INT 0
5235: PPUSH
5236: CALL_OW 49
// ComHold ( i ) ;
5240: LD_VAR 0 2
5244: PPUSH
5245: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5249: LD_ADDR_VAR 0 5
5253: PUSH
5254: LD_VAR 0 5
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: CALL_OW 3
5266: ST_TO_ADDR
// end ; end ; end ; end ;
5267: GO 4928
5269: POP
5270: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5271: LD_ADDR_VAR 0 6
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 30
5288: PUSH
5289: LD_INT 32
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: DOUBLE
5311: LD_VAR 0 6
5315: PUSH
5316: LD_EXP 4
5320: MINUS
5321: INC
5322: ST_TO_ADDR
5323: LD_INT 1
5325: PUSH
5326: FOR_DOWNTO
5327: IFFALSE 5390
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
5329: LD_INT 0
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: LD_INT 7
5337: PUSH
5338: LD_INT 8
5340: PUSH
5341: LD_INT 9
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: LD_OWVAR 67
5353: ARRAY
5354: PPUSH
5355: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5359: LD_ADDR_EXP 4
5363: PUSH
5364: LD_EXP 4
5368: PPUSH
5369: LD_EXP 4
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: PPUSH
5378: CALL_OW 44
5382: PPUSH
5383: CALL_OW 2
5387: ST_TO_ADDR
// end ;
5388: GO 5326
5390: POP
5391: POP
// if friends then
5392: LD_EXP 4
5396: IFFALSE 5512
// begin tmp := friends ;
5398: LD_ADDR_VAR 0 3
5402: PUSH
5403: LD_EXP 4
5407: ST_TO_ADDR
// for i = 1 to bunkers do
5408: LD_ADDR_VAR 0 2
5412: PUSH
5413: DOUBLE
5414: LD_INT 1
5416: DEC
5417: ST_TO_ADDR
5418: LD_VAR 0 6
5422: PUSH
5423: FOR_TO
5424: IFFALSE 5510
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5426: LD_VAR 0 3
5430: PUSH
5431: LD_VAR 0 3
5435: ARRAY
5436: PPUSH
5437: LD_INT 1
5439: PPUSH
5440: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5444: LD_VAR 0 3
5448: PUSH
5449: LD_VAR 0 3
5453: ARRAY
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5462: LD_VAR 0 3
5466: PUSH
5467: LD_VAR 0 3
5471: ARRAY
5472: PPUSH
5473: LD_VAR 0 6
5477: PUSH
5478: LD_VAR 0 2
5482: ARRAY
5483: PPUSH
5484: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: LD_VAR 0 3
5497: PPUSH
5498: LD_VAR 0 3
5502: PPUSH
5503: CALL_OW 3
5507: ST_TO_ADDR
// end ;
5508: GO 5423
5510: POP
5511: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5512: LD_ADDR_VAR 0 5
5516: PUSH
5517: LD_VAR 0 5
5521: PUSH
5522: LD_INT 9
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: LD_INT 11
5530: PUSH
5531: LD_INT 12
5533: PUSH
5534: LD_INT 13
5536: PUSH
5537: LD_INT 14
5539: PUSH
5540: LD_INT 15
5542: PUSH
5543: LD_INT 16
5545: PUSH
5546: LD_INT 26
5548: PUSH
5549: LD_INT 27
5551: PUSH
5552: LD_INT 28
5554: PUSH
5555: LD_INT 29
5557: PUSH
5558: LD_INT 30
5560: PUSH
5561: LD_INT 31
5563: PUSH
5564: LD_INT 32
5566: PUSH
5567: LD_INT 33
5569: PUSH
5570: LD_INT 34
5572: PUSH
5573: LD_INT 35
5575: PUSH
5576: LD_INT 36
5578: PUSH
5579: LD_INT 37
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: UNION
5604: ST_TO_ADDR
// for i in friends do
5605: LD_ADDR_VAR 0 2
5609: PUSH
5610: LD_EXP 4
5614: PUSH
5615: FOR_IN
5616: IFFALSE 5903
// begin SetTag ( i , 2 ) ;
5618: LD_VAR 0 2
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5630: LD_VAR 0 2
5634: PPUSH
5635: CALL_OW 257
5639: PUSH
5640: LD_INT 1
5642: PUSH
5643: LD_INT 4
5645: PUSH
5646: LD_INT 5
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: IN
5654: NOT
5655: IFFALSE 5669
// SetClass ( i , 1 ) ;
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_INT 1
5664: PPUSH
5665: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5669: LD_VAR 0 2
5673: PPUSH
5674: CALL_OW 257
5678: PUSH
5679: LD_INT 1
5681: PUSH
5682: LD_INT 5
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: IN
5689: PUSH
5690: LD_VAR 0 4
5694: PUSH
5695: LD_INT 1
5697: ARRAY
5698: AND
5699: IFFALSE 5760
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 4
5710: PUSH
5711: LD_INT 1
5713: ARRAY
5714: PUSH
5715: LD_INT 1
5717: ARRAY
5718: PPUSH
5719: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5723: LD_ADDR_VAR 0 4
5727: PUSH
5728: LD_VAR 0 4
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_VAR 0 4
5740: PUSH
5741: LD_INT 1
5743: ARRAY
5744: PPUSH
5745: LD_INT 1
5747: PPUSH
5748: CALL_OW 3
5752: PPUSH
5753: CALL_OW 1
5757: ST_TO_ADDR
// continue ;
5758: GO 5615
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5760: LD_VAR 0 2
5764: PPUSH
5765: CALL_OW 257
5769: PUSH
5770: LD_INT 4
5772: EQUAL
5773: PUSH
5774: LD_VAR 0 4
5778: PUSH
5779: LD_INT 2
5781: ARRAY
5782: AND
5783: IFFALSE 5844
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 4
5794: PUSH
5795: LD_INT 2
5797: ARRAY
5798: PUSH
5799: LD_INT 1
5801: ARRAY
5802: PPUSH
5803: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5807: LD_ADDR_VAR 0 4
5811: PUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: LD_INT 2
5819: PPUSH
5820: LD_VAR 0 4
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: LD_INT 1
5831: PPUSH
5832: CALL_OW 3
5836: PPUSH
5837: CALL_OW 1
5841: ST_TO_ADDR
// continue ;
5842: GO 5615
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5844: LD_VAR 0 2
5848: PPUSH
5849: LD_VAR 0 5
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PPUSH
5858: LD_INT 0
5860: PPUSH
5861: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5865: LD_ADDR_VAR 0 5
5869: PUSH
5870: LD_VAR 0 5
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 3
5882: ST_TO_ADDR
// ComHold ( i ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: CALL_OW 140
// if not areas then
5892: LD_VAR 0 5
5896: NOT
5897: IFFALSE 5901
// break ;
5899: GO 5903
// end ;
5901: GO 5615
5903: POP
5904: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5905: LD_EXP 4
5909: PPUSH
5910: LD_INT 3
5912: PUSH
5913: LD_INT 52
5915: PUSH
5916: EMPTY
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 72
5927: IFFALSE 5994
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5929: LD_ADDR_VAR 0 2
5933: PUSH
5934: LD_EXP 4
5938: PPUSH
5939: LD_INT 3
5941: PUSH
5942: LD_INT 52
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 72
5956: PUSH
5957: FOR_IN
5958: IFFALSE 5992
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5960: LD_VAR 0 2
5964: PPUSH
5965: LD_INT 65
5967: PPUSH
5968: LD_INT 58
5970: PPUSH
5971: LD_INT 7
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: CALL_OW 50
// ComHold ( i ) ;
5981: LD_VAR 0 2
5985: PPUSH
5986: CALL_OW 140
// end ;
5990: GO 5957
5992: POP
5993: POP
// if Frank then
5994: LD_EXP 33
5998: IFFALSE 6012
// SetClass ( Frank , class_sniper ) ;
6000: LD_EXP 33
6004: PPUSH
6005: LD_INT 5
6007: PPUSH
6008: CALL_OW 336
// end ; end_of_file
6012: LD_VAR 0 1
6016: RET
// export function CanSayRand ( side ) ; begin
6017: LD_INT 0
6019: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6020: LD_ADDR_VAR 0 2
6024: PUSH
6025: LD_INT 52
6027: PUSH
6028: EMPTY
6029: LIST
6030: PUSH
6031: LD_INT 22
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 2
6045: PUSH
6046: LD_INT 25
6048: PUSH
6049: LD_INT 1
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 25
6058: PUSH
6059: LD_INT 2
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 25
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 25
6078: PUSH
6079: LD_INT 4
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: PPUSH
6098: CALL_OW 69
6102: PUSH
6103: LD_EXP 14
6107: PUSH
6108: LD_EXP 33
6112: PUSH
6113: LD_EXP 23
6117: PUSH
6118: LD_EXP 24
6122: PUSH
6123: LD_EXP 25
6127: PUSH
6128: LD_EXP 26
6132: PUSH
6133: LD_EXP 27
6137: PUSH
6138: LD_EXP 28
6142: PUSH
6143: LD_EXP 29
6147: PUSH
6148: LD_EXP 30
6152: PUSH
6153: LD_EXP 16
6157: PUSH
6158: LD_EXP 31
6162: PUSH
6163: LD_EXP 32
6167: PUSH
6168: LD_EXP 34
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: DIFF
6189: ST_TO_ADDR
// end ;
6190: LD_VAR 0 2
6194: RET
// export function SayRand ( sex , dial ) ; begin
6195: LD_INT 0
6197: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6198: LD_ADDR_VAR 0 3
6202: PUSH
6203: LD_INT 52
6205: PUSH
6206: EMPTY
6207: LIST
6208: PUSH
6209: LD_INT 22
6211: PUSH
6212: LD_INT 1
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 26
6221: PUSH
6222: LD_VAR 0 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 2
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 1
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 25
6246: PUSH
6247: LD_INT 2
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 3
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 25
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: PUSH
6292: LD_EXP 14
6296: PUSH
6297: LD_EXP 33
6301: PUSH
6302: LD_EXP 23
6306: PUSH
6307: LD_EXP 24
6311: PUSH
6312: LD_EXP 25
6316: PUSH
6317: LD_EXP 26
6321: PUSH
6322: LD_EXP 27
6326: PUSH
6327: LD_EXP 28
6331: PUSH
6332: LD_EXP 29
6336: PUSH
6337: LD_EXP 30
6341: PUSH
6342: LD_EXP 16
6346: PUSH
6347: LD_EXP 31
6351: PUSH
6352: LD_EXP 32
6356: PUSH
6357: LD_EXP 34
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: DIFF
6378: ST_TO_ADDR
// if not result then
6379: LD_VAR 0 3
6383: NOT
6384: IFFALSE 6388
// exit ;
6386: GO 6416
// result := result [ 1 ] ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: ARRAY
6401: ST_TO_ADDR
// Say ( result , dial ) ;
6402: LD_VAR 0 3
6406: PPUSH
6407: LD_VAR 0 2
6411: PPUSH
6412: CALL_OW 88
// end ;
6416: LD_VAR 0 3
6420: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6421: LD_INT 0
6423: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6424: LD_ADDR_VAR 0 4
6428: PUSH
6429: LD_INT 22
6431: PUSH
6432: LD_INT 1
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 26
6441: PUSH
6442: LD_VAR 0 1
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 2
6453: PUSH
6454: LD_INT 25
6456: PUSH
6457: LD_INT 1
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 25
6466: PUSH
6467: LD_INT 2
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 25
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 25
6486: PUSH
6487: LD_INT 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PPUSH
6506: CALL_OW 69
6510: PUSH
6511: LD_EXP 14
6515: PUSH
6516: LD_EXP 33
6520: PUSH
6521: LD_EXP 23
6525: PUSH
6526: LD_EXP 24
6530: PUSH
6531: LD_EXP 25
6535: PUSH
6536: LD_EXP 26
6540: PUSH
6541: LD_EXP 27
6545: PUSH
6546: LD_EXP 28
6550: PUSH
6551: LD_EXP 29
6555: PUSH
6556: LD_EXP 30
6560: PUSH
6561: LD_EXP 16
6565: PUSH
6566: LD_EXP 31
6570: PUSH
6571: LD_EXP 32
6575: PUSH
6576: LD_EXP 34
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: PUSH
6597: LD_VAR 0 3
6601: ADD
6602: DIFF
6603: ST_TO_ADDR
// if not result then
6604: LD_VAR 0 4
6608: NOT
6609: IFFALSE 6613
// exit ;
6611: GO 6641
// result := result [ 1 ] ;
6613: LD_ADDR_VAR 0 4
6617: PUSH
6618: LD_VAR 0 4
6622: PUSH
6623: LD_INT 1
6625: ARRAY
6626: ST_TO_ADDR
// Say ( result , dial ) ;
6627: LD_VAR 0 4
6631: PPUSH
6632: LD_VAR 0 2
6636: PPUSH
6637: CALL_OW 88
// end ;
6641: LD_VAR 0 4
6645: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6646: LD_INT 0
6648: PPUSH
6649: PPUSH
6650: PPUSH
6651: PPUSH
6652: PPUSH
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6663: LD_VAR 0 1
6667: NOT
6668: PUSH
6669: LD_VAR 0 2
6673: NOT
6674: OR
6675: PUSH
6676: LD_VAR 0 1
6680: PPUSH
6681: CALL_OW 247
6685: PUSH
6686: LD_INT 3
6688: EQUAL
6689: OR
6690: IFFALSE 6694
// exit ;
6692: GO 8233
// for i = path downto 1 do
6694: LD_ADDR_VAR 0 5
6698: PUSH
6699: DOUBLE
6700: LD_VAR 0 2
6704: INC
6705: ST_TO_ADDR
6706: LD_INT 1
6708: PUSH
6709: FOR_DOWNTO
6710: IFFALSE 6771
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6712: LD_VAR 0 2
6716: PUSH
6717: LD_VAR 0 5
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_VAR 0 2
6731: PUSH
6732: LD_VAR 0 5
6736: ARRAY
6737: PUSH
6738: LD_INT 2
6740: ARRAY
6741: PPUSH
6742: CALL_OW 488
6746: NOT
6747: IFFALSE 6769
// path = Delete ( path , i ) ;
6749: LD_ADDR_VAR 0 2
6753: PUSH
6754: LD_VAR 0 2
6758: PPUSH
6759: LD_VAR 0 5
6763: PPUSH
6764: CALL_OW 3
6768: ST_TO_ADDR
// end ;
6769: GO 6709
6771: POP
6772: POP
// if not path then
6773: LD_VAR 0 2
6777: NOT
6778: IFFALSE 6782
// exit ;
6780: GO 8233
// tmp_path := [ ] ;
6782: LD_ADDR_VAR 0 11
6786: PUSH
6787: EMPTY
6788: ST_TO_ADDR
// if flags then
6789: LD_VAR 0 3
6793: IFFALSE 6867
// begin if flags [ 1 ] then
6795: LD_VAR 0 3
6799: PUSH
6800: LD_INT 1
6802: ARRAY
6803: IFFALSE 6819
// safe_place = flags [ 1 ] ;
6805: LD_ADDR_VAR 0 16
6809: PUSH
6810: LD_VAR 0 3
6814: PUSH
6815: LD_INT 1
6817: ARRAY
6818: ST_TO_ADDR
// if flags [ 2 ] then
6819: LD_VAR 0 3
6823: PUSH
6824: LD_INT 2
6826: ARRAY
6827: IFFALSE 6843
// spot_dist = flags [ 2 ] ;
6829: LD_ADDR_VAR 0 15
6833: PUSH
6834: LD_VAR 0 3
6838: PUSH
6839: LD_INT 2
6841: ARRAY
6842: ST_TO_ADDR
// if flags [ 3 ] then
6843: LD_VAR 0 3
6847: PUSH
6848: LD_INT 3
6850: ARRAY
6851: IFFALSE 6867
// chase_range = flags [ 3 ] ;
6853: LD_ADDR_VAR 0 17
6857: PUSH
6858: LD_VAR 0 3
6862: PUSH
6863: LD_INT 3
6865: ARRAY
6866: ST_TO_ADDR
// end ; if not chase_range then
6867: LD_VAR 0 17
6871: NOT
6872: IFFALSE 6882
// chase_range = 8 ;
6874: LD_ADDR_VAR 0 17
6878: PUSH
6879: LD_INT 8
6881: ST_TO_ADDR
// if not spot_dist then
6882: LD_VAR 0 15
6886: NOT
6887: IFFALSE 6897
// spot_dist := 8 ;
6889: LD_ADDR_VAR 0 15
6893: PUSH
6894: LD_INT 8
6896: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6897: LD_ADDR_VAR 0 18
6901: PUSH
6902: LD_VAR 0 1
6906: PPUSH
6907: CALL_OW 247
6911: PUSH
6912: LD_INT 2
6914: EQUAL
6915: PUSH
6916: LD_VAR 0 1
6920: PPUSH
6921: CALL_OW 262
6925: PUSH
6926: LD_INT 3
6928: NONEQUAL
6929: AND
6930: ST_TO_ADDR
// status = 1 ;
6931: LD_ADDR_VAR 0 12
6935: PUSH
6936: LD_INT 1
6938: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6939: LD_ADDR_VAR 0 11
6943: PUSH
6944: LD_INT 1
6946: PUSH
6947: LD_VAR 0 2
6951: PUSH
6952: LD_INT 1
6954: ARRAY
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6960: LD_INT 35
6962: PPUSH
6963: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6967: LD_VAR 0 18
6971: PUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: CALL_OW 261
6981: PUSH
6982: LD_INT 20
6984: LESS
6985: AND
6986: IFFALSE 7179
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
6988: LD_ADDR_VAR 0 10
6992: PUSH
6993: LD_INT 22
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: LD_INT 30
7015: PUSH
7016: LD_INT 0
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 30
7025: PUSH
7026: LD_INT 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 29
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 30
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 69
7068: ST_TO_ADDR
// if not station then
7069: LD_VAR 0 10
7073: NOT
7074: IFFALSE 7090
// begin SetFuel ( unit , 40 ) ;
7076: LD_VAR 0 1
7080: PPUSH
7081: LD_INT 40
7083: PPUSH
7084: CALL_OW 240
// continue ;
7088: GO 6960
// end ; status := 6 ;
7090: LD_ADDR_VAR 0 12
7094: PUSH
7095: LD_INT 6
7097: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7098: LD_ADDR_VAR 0 10
7102: PUSH
7103: LD_VAR 0 10
7107: PPUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 74
7117: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7118: LD_INT 35
7120: PPUSH
7121: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7125: LD_VAR 0 1
7129: PPUSH
7130: LD_VAR 0 10
7134: PPUSH
7135: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7139: LD_VAR 0 1
7143: PPUSH
7144: LD_VAR 0 10
7148: PPUSH
7149: CALL_OW 296
7153: PUSH
7154: LD_INT 6
7156: LESS
7157: IFFALSE 7118
// SetFuel ( unit , 100 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 100
7166: PPUSH
7167: CALL_OW 240
// status := 5 ;
7171: LD_ADDR_VAR 0 12
7175: PUSH
7176: LD_INT 5
7178: ST_TO_ADDR
// end ; if status = 1 then
7179: LD_VAR 0 12
7183: PUSH
7184: LD_INT 1
7186: EQUAL
7187: IFFALSE 7563
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7189: LD_ADDR_VAR 0 13
7193: PUSH
7194: LD_INT 81
7196: PUSH
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 255
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 3
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_INT 91
7230: PUSH
7231: LD_VAR 0 1
7235: PUSH
7236: LD_VAR 0 15
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 101
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: PPUSH
7262: CALL_OW 69
7266: ST_TO_ADDR
// for i in enemy do
7267: LD_ADDR_VAR 0 5
7271: PUSH
7272: LD_VAR 0 13
7276: PUSH
7277: FOR_IN
7278: IFFALSE 7309
// if IsInvisible ( i ) then
7280: LD_VAR 0 5
7284: PPUSH
7285: CALL_OW 571
7289: IFFALSE 7307
// enemy := enemy diff i ;
7291: LD_ADDR_VAR 0 13
7295: PUSH
7296: LD_VAR 0 13
7300: PUSH
7301: LD_VAR 0 5
7305: DIFF
7306: ST_TO_ADDR
7307: GO 7277
7309: POP
7310: POP
// if enemy then
7311: LD_VAR 0 13
7315: IFFALSE 7365
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7317: LD_VAR 0 1
7321: PPUSH
7322: LD_VAR 0 1
7326: PPUSH
7327: CALL_OW 250
7331: PPUSH
7332: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 251
7350: PPUSH
7351: CALL_OW 232
// status = 2 ;
7355: LD_ADDR_VAR 0 12
7359: PUSH
7360: LD_INT 2
7362: ST_TO_ADDR
// end else
7363: GO 7563
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7365: LD_VAR 0 1
7369: PPUSH
7370: LD_VAR 0 11
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PUSH
7379: LD_INT 1
7381: ARRAY
7382: PPUSH
7383: LD_VAR 0 11
7387: PUSH
7388: LD_INT 2
7390: ARRAY
7391: PUSH
7392: LD_INT 2
7394: ARRAY
7395: PPUSH
7396: CALL_OW 307
7400: PUSH
7401: LD_VAR 0 1
7405: PPUSH
7406: CALL_OW 314
7410: NOT
7411: OR
7412: IFFALSE 7563
// begin wait ( 0 0$2 ) ;
7414: LD_INT 70
7416: PPUSH
7417: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7421: LD_VAR 0 11
7425: PUSH
7426: LD_INT 1
7428: ARRAY
7429: PUSH
7430: LD_INT 1
7432: PLUS
7433: PUSH
7434: LD_VAR 0 2
7438: GREATER
7439: IFFALSE 7464
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7441: LD_ADDR_VAR 0 11
7445: PUSH
7446: LD_VAR 0 11
7450: PPUSH
7451: LD_INT 1
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 1
7461: ST_TO_ADDR
7462: GO 7495
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_VAR 0 11
7481: PUSH
7482: LD_INT 1
7484: ARRAY
7485: PUSH
7486: LD_INT 1
7488: PLUS
7489: PPUSH
7490: CALL_OW 1
7494: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7495: LD_ADDR_VAR 0 11
7499: PUSH
7500: LD_VAR 0 11
7504: PPUSH
7505: LD_INT 2
7507: PPUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_VAR 0 11
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: ARRAY
7522: PPUSH
7523: CALL_OW 1
7527: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7528: LD_VAR 0 1
7532: PPUSH
7533: LD_VAR 0 11
7537: PUSH
7538: LD_INT 2
7540: ARRAY
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: PPUSH
7546: LD_VAR 0 11
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: PUSH
7555: LD_INT 2
7557: ARRAY
7558: PPUSH
7559: CALL_OW 114
// end ; end ; end ; if status = 2 then
7563: LD_VAR 0 12
7567: PUSH
7568: LD_INT 2
7570: EQUAL
7571: IFFALSE 7792
// begin if GetLives ( unit ) < 650 and safe_place then
7573: LD_VAR 0 1
7577: PPUSH
7578: CALL_OW 256
7582: PUSH
7583: LD_INT 650
7585: LESS
7586: PUSH
7587: LD_VAR 0 16
7591: AND
7592: IFFALSE 7604
// begin status = 3 ;
7594: LD_ADDR_VAR 0 12
7598: PUSH
7599: LD_INT 3
7601: ST_TO_ADDR
// continue ;
7602: GO 6960
// end ; x := GetRememberedX ( unit ) ;
7604: LD_ADDR_VAR 0 6
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 252
7618: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7619: LD_ADDR_VAR 0 7
7623: PUSH
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 253
7633: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7634: LD_ADDR_VAR 0 13
7638: PUSH
7639: LD_INT 81
7641: PUSH
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 255
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 92
7658: PUSH
7659: LD_VAR 0 6
7663: PUSH
7664: LD_VAR 0 7
7668: PUSH
7669: LD_VAR 0 15
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 101
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PPUSH
7695: CALL_OW 69
7699: ST_TO_ADDR
// if enemy then
7700: LD_VAR 0 13
7704: IFFALSE 7775
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: LD_VAR 0 13
7715: PPUSH
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 74
7725: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7726: LD_VAR 0 14
7730: PPUSH
7731: LD_VAR 0 6
7735: PPUSH
7736: LD_VAR 0 7
7740: PPUSH
7741: CALL_OW 297
7745: PUSH
7746: LD_VAR 0 15
7750: PUSH
7751: LD_VAR 0 17
7755: PLUS
7756: LESS
7757: IFFALSE 7773
// ComAttackUnit ( unit , e ) ;
7759: LD_VAR 0 1
7763: PPUSH
7764: LD_VAR 0 14
7768: PPUSH
7769: CALL_OW 115
// end else
7773: GO 7792
// begin ComStop ( unit ) ;
7775: LD_VAR 0 1
7779: PPUSH
7780: CALL_OW 141
// status = 5 ;
7784: LD_ADDR_VAR 0 12
7788: PUSH
7789: LD_INT 5
7791: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7792: LD_VAR 0 12
7796: PUSH
7797: LD_INT 3
7799: EQUAL
7800: PUSH
7801: LD_VAR 0 16
7805: AND
7806: IFFALSE 7892
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7808: LD_VAR 0 1
7812: PPUSH
7813: LD_VAR 0 16
7817: PUSH
7818: LD_INT 1
7820: ARRAY
7821: PPUSH
7822: LD_VAR 0 16
7826: PUSH
7827: LD_INT 2
7829: ARRAY
7830: PPUSH
7831: CALL_OW 111
// wait ( 0 0$1 ) ;
7835: LD_INT 35
7837: PPUSH
7838: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7842: LD_VAR 0 1
7846: PPUSH
7847: LD_VAR 0 16
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: LD_VAR 0 16
7860: PUSH
7861: LD_INT 2
7863: ARRAY
7864: PPUSH
7865: CALL_OW 297
7869: PUSH
7870: LD_INT 4
7872: LESS
7873: IFFALSE 7808
// ComStop ( unit ) ;
7875: LD_VAR 0 1
7879: PPUSH
7880: CALL_OW 141
// status = 4 ;
7884: LD_ADDR_VAR 0 12
7888: PUSH
7889: LD_INT 4
7891: ST_TO_ADDR
// end ; if status = 4 then
7892: LD_VAR 0 12
7896: PUSH
7897: LD_INT 4
7899: EQUAL
7900: IFFALSE 7932
// begin repeat wait ( 0 0$1 ) ;
7902: LD_INT 35
7904: PPUSH
7905: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 256
7918: PUSH
7919: LD_INT 1000
7921: EQUAL
7922: IFFALSE 7902
// status = 5 ;
7924: LD_ADDR_VAR 0 12
7928: PUSH
7929: LD_INT 5
7931: ST_TO_ADDR
// end ; if status = 5 then
7932: LD_VAR 0 12
7936: PUSH
7937: LD_INT 5
7939: EQUAL
7940: IFFALSE 8222
// begin p := 999 ;
7942: LD_ADDR_VAR 0 9
7946: PUSH
7947: LD_INT 999
7949: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7950: LD_ADDR_VAR 0 14
7954: PUSH
7955: LD_VAR 0 11
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PUSH
7964: LD_INT 1
7966: ARRAY
7967: PUSH
7968: LD_VAR 0 11
7972: PUSH
7973: LD_INT 2
7975: ARRAY
7976: PUSH
7977: LD_INT 2
7979: ARRAY
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: ST_TO_ADDR
// c := 1 ;
7985: LD_ADDR_VAR 0 8
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
7993: LD_ADDR_VAR 0 5
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 11
8007: PUSH
8008: LD_INT 2
8010: ARRAY
8011: PUSH
8012: LD_INT 2
8014: DIV
8015: PUSH
8016: FOR_TO
8017: IFFALSE 8149
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8019: LD_ADDR_VAR 0 6
8023: PUSH
8024: LD_VAR 0 1
8028: PPUSH
8029: LD_VAR 0 11
8033: PUSH
8034: LD_INT 2
8036: ARRAY
8037: PUSH
8038: LD_VAR 0 8
8042: ARRAY
8043: PPUSH
8044: LD_VAR 0 11
8048: PUSH
8049: LD_INT 2
8051: ARRAY
8052: PUSH
8053: LD_VAR 0 8
8057: PUSH
8058: LD_INT 1
8060: PLUS
8061: ARRAY
8062: PPUSH
8063: CALL_OW 297
8067: ST_TO_ADDR
// if x < p then
8068: LD_VAR 0 6
8072: PUSH
8073: LD_VAR 0 9
8077: LESS
8078: IFFALSE 8133
// begin p := x ;
8080: LD_ADDR_VAR 0 9
8084: PUSH
8085: LD_VAR 0 6
8089: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8090: LD_ADDR_VAR 0 14
8094: PUSH
8095: LD_VAR 0 11
8099: PUSH
8100: LD_INT 2
8102: ARRAY
8103: PUSH
8104: LD_VAR 0 8
8108: ARRAY
8109: PUSH
8110: LD_VAR 0 11
8114: PUSH
8115: LD_INT 2
8117: ARRAY
8118: PUSH
8119: LD_VAR 0 8
8123: PUSH
8124: LD_INT 1
8126: PLUS
8127: ARRAY
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: ST_TO_ADDR
// end ; c = c + 2 ;
8133: LD_ADDR_VAR 0 8
8137: PUSH
8138: LD_VAR 0 8
8142: PUSH
8143: LD_INT 2
8145: PLUS
8146: ST_TO_ADDR
// end ;
8147: GO 8016
8149: POP
8150: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8151: LD_VAR 0 1
8155: PPUSH
8156: LD_VAR 0 14
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: PPUSH
8165: LD_VAR 0 14
8169: PUSH
8170: LD_INT 2
8172: ARRAY
8173: PPUSH
8174: CALL_OW 111
// wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8185: LD_VAR 0 1
8189: PPUSH
8190: LD_VAR 0 14
8194: PUSH
8195: LD_INT 1
8197: ARRAY
8198: PPUSH
8199: LD_VAR 0 14
8203: PUSH
8204: LD_INT 2
8206: ARRAY
8207: PPUSH
8208: CALL_OW 307
8212: IFFALSE 8151
// status = 1 ;
8214: LD_ADDR_VAR 0 12
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8222: LD_VAR 0 1
8226: PPUSH
8227: CALL_OW 301
8231: IFFALSE 6960
// end ;
8233: LD_VAR 0 4
8237: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8248: LD_VAR 0 1
8252: NOT
8253: PUSH
8254: LD_VAR 0 3
8258: NOT
8259: OR
8260: PUSH
8261: LD_VAR 0 4
8265: PUSH
8266: LD_INT 1
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 0
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: IN
8280: NOT
8281: OR
8282: PUSH
8283: LD_VAR 0 6
8287: NOT
8288: OR
8289: PUSH
8290: LD_VAR 0 7
8294: NOT
8295: OR
8296: IFFALSE 8300
// exit ;
8298: GO 8691
// sex_id :=  ;
8300: LD_ADDR_VAR 0 14
8304: PUSH
8305: LD_STRING 
8307: ST_TO_ADDR
// case class of 1 :
8308: LD_VAR 0 5
8312: PUSH
8313: LD_INT 1
8315: DOUBLE
8316: EQUAL
8317: IFTRUE 8321
8319: GO 8332
8321: POP
// class_id := Sol ; 2 :
8322: LD_ADDR_VAR 0 15
8326: PUSH
8327: LD_STRING Sol
8329: ST_TO_ADDR
8330: GO 8390
8332: LD_INT 2
8334: DOUBLE
8335: EQUAL
8336: IFTRUE 8340
8338: GO 8351
8340: POP
// class_id := Eng ; 3 :
8341: LD_ADDR_VAR 0 15
8345: PUSH
8346: LD_STRING Eng
8348: ST_TO_ADDR
8349: GO 8390
8351: LD_INT 3
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8370
8359: POP
// class_id := Mech ; 4 :
8360: LD_ADDR_VAR 0 15
8364: PUSH
8365: LD_STRING Mech
8367: ST_TO_ADDR
8368: GO 8390
8370: LD_INT 4
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8389
8378: POP
// class_id := Sci ; end ;
8379: LD_ADDR_VAR 0 15
8383: PUSH
8384: LD_STRING Sci
8386: ST_TO_ADDR
8387: GO 8390
8389: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8390: LD_ADDR_VAR 0 11
8394: PUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_INT 25
8402: PUSH
8403: LD_VAR 0 5
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PPUSH
8412: CALL_OW 72
8416: ST_TO_ADDR
// if tmp then
8417: LD_VAR 0 11
8421: IFFALSE 8433
// units := tmp ;
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_VAR 0 11
8432: ST_TO_ADDR
// if sex then
8433: LD_VAR 0 4
8437: IFFALSE 8493
// begin if sex = sex_female then
8439: LD_VAR 0 4
8443: PUSH
8444: LD_INT 2
8446: EQUAL
8447: IFFALSE 8457
// sex_id := F ;
8449: LD_ADDR_VAR 0 14
8453: PUSH
8454: LD_STRING F
8456: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8457: LD_ADDR_VAR 0 1
8461: PUSH
8462: LD_VAR 0 1
8466: PPUSH
8467: LD_INT 26
8469: PUSH
8470: LD_VAR 0 4
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PPUSH
8479: CALL_OW 72
8483: ST_TO_ADDR
// if not units then
8484: LD_VAR 0 1
8488: NOT
8489: IFFALSE 8493
// exit ;
8491: GO 8691
// end ; unit_id := id ;
8493: LD_ADDR_VAR 0 12
8497: PUSH
8498: LD_VAR 0 6
8502: ST_TO_ADDR
// if unit_id > units then
8503: LD_VAR 0 12
8507: PUSH
8508: LD_VAR 0 1
8512: GREATER
8513: IFFALSE 8523
// unit_id := 1 ;
8515: LD_ADDR_VAR 0 12
8519: PUSH
8520: LD_INT 1
8522: ST_TO_ADDR
// if not units [ unit_id ] then
8523: LD_VAR 0 1
8527: PUSH
8528: LD_VAR 0 12
8532: ARRAY
8533: NOT
8534: IFFALSE 8538
// exit ;
8536: GO 8691
// unit := units [ unit_id ] ;
8538: LD_ADDR_VAR 0 10
8542: PUSH
8543: LD_VAR 0 1
8547: PUSH
8548: LD_VAR 0 12
8552: ARRAY
8553: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8554: LD_ADDR_VAR 0 13
8558: PUSH
8559: LD_STRING D
8561: PUSH
8562: LD_VAR 0 3
8566: STR
8567: PUSH
8568: LD_STRING -
8570: STR
8571: PUSH
8572: LD_VAR 0 14
8576: STR
8577: PUSH
8578: LD_VAR 0 15
8582: STR
8583: PUSH
8584: LD_VAR 0 6
8588: STR
8589: PUSH
8590: LD_STRING -
8592: STR
8593: PUSH
8594: LD_VAR 0 7
8598: STR
8599: ST_TO_ADDR
// case type of 0 :
8600: LD_VAR 0 2
8604: PUSH
8605: LD_INT 0
8607: DOUBLE
8608: EQUAL
8609: IFTRUE 8613
8611: GO 8630
8613: POP
// Say ( unit , dialog_id ) ; 1 :
8614: LD_VAR 0 10
8618: PPUSH
8619: LD_VAR 0 13
8623: PPUSH
8624: CALL_OW 88
8628: GO 8681
8630: LD_INT 1
8632: DOUBLE
8633: EQUAL
8634: IFTRUE 8638
8636: GO 8655
8638: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8639: LD_VAR 0 10
8643: PPUSH
8644: LD_VAR 0 13
8648: PPUSH
8649: CALL_OW 94
8653: GO 8681
8655: LD_INT 2
8657: DOUBLE
8658: EQUAL
8659: IFTRUE 8663
8661: GO 8680
8663: POP
// ForceSay ( unit , dialog_id ) ; end ;
8664: LD_VAR 0 10
8668: PPUSH
8669: LD_VAR 0 13
8673: PPUSH
8674: CALL_OW 91
8678: GO 8681
8680: POP
// result := unit ;
8681: LD_ADDR_VAR 0 8
8685: PUSH
8686: LD_VAR 0 10
8690: ST_TO_ADDR
// end ;
8691: LD_VAR 0 8
8695: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8696: LD_INT 0
8698: PPUSH
8699: PPUSH
8700: PPUSH
// result := false ;
8701: LD_ADDR_VAR 0 4
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8709: LD_VAR 0 1
8713: NOT
8714: PUSH
8715: LD_VAR 0 2
8719: NOT
8720: OR
8721: PUSH
8722: LD_VAR 0 1
8726: PPUSH
8727: CALL_OW 310
8731: OR
8732: IFFALSE 8736
// exit ;
8734: GO 8940
// if distance < 0 then
8736: LD_VAR 0 3
8740: PUSH
8741: LD_INT 0
8743: LESS
8744: IFFALSE 8754
// distance := 0 ;
8746: LD_ADDR_VAR 0 3
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8754: LD_ADDR_VAR 0 6
8758: PUSH
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 266
8768: PPUSH
8769: LD_VAR 0 2
8773: PPUSH
8774: CALL_OW 250
8778: PPUSH
8779: LD_VAR 0 2
8783: PPUSH
8784: CALL_OW 251
8788: PPUSH
8789: LD_VAR 0 2
8793: PPUSH
8794: CALL_OW 254
8798: PPUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 248
8808: PPUSH
8809: LD_INT 1
8811: PPUSH
8812: CALL 42737 0 6
8816: ST_TO_ADDR
// if not entrance then
8817: LD_VAR 0 6
8821: NOT
8822: IFFALSE 8826
// exit ;
8824: GO 8940
// for i in entrance do
8826: LD_ADDR_VAR 0 5
8830: PUSH
8831: LD_VAR 0 6
8835: PUSH
8836: FOR_IN
8837: IFFALSE 8938
// begin if not distance then
8839: LD_VAR 0 3
8843: NOT
8844: IFFALSE 8889
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_VAR 0 5
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 5
8864: PUSH
8865: LD_INT 2
8867: ARRAY
8868: PPUSH
8869: CALL_OW 307
8873: IFFALSE 8887
// begin result := true ;
8875: LD_ADDR_VAR 0 4
8879: PUSH
8880: LD_INT 1
8882: ST_TO_ADDR
// exit ;
8883: POP
8884: POP
8885: GO 8940
// end ; end else
8887: GO 8936
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8889: LD_VAR 0 1
8893: PPUSH
8894: LD_VAR 0 5
8898: PUSH
8899: LD_INT 1
8901: ARRAY
8902: PPUSH
8903: LD_VAR 0 5
8907: PUSH
8908: LD_INT 2
8910: ARRAY
8911: PPUSH
8912: CALL_OW 297
8916: PUSH
8917: LD_VAR 0 3
8921: LESSEQUAL
8922: IFFALSE 8936
// begin result := true ;
8924: LD_ADDR_VAR 0 4
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// exit ;
8932: POP
8933: POP
8934: GO 8940
// end ; end ; end ;
8936: GO 8836
8938: POP
8939: POP
// end ;
8940: LD_VAR 0 4
8944: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8945: LD_INT 0
8947: PPUSH
8948: PPUSH
8949: PPUSH
// result := false ;
8950: LD_ADDR_VAR 0 3
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8958: LD_VAR 0 1
8962: NOT
8963: PUSH
8964: LD_VAR 0 2
8968: NOT
8969: OR
8970: PUSH
8971: LD_VAR 0 1
8975: PPUSH
8976: CALL_OW 302
8980: NOT
8981: OR
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 302
8992: NOT
8993: OR
8994: IFFALSE 8998
// exit ;
8996: GO 9159
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
8998: LD_VAR 0 1
9002: PPUSH
9003: LD_INT 81
9005: PUSH
9006: LD_VAR 0 1
9010: PPUSH
9011: CALL_OW 255
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: LD_INT 21
9025: PUSH
9026: LD_INT 3
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PPUSH
9041: CALL_OW 69
9045: PPUSH
9046: LD_VAR 0 1
9050: PPUSH
9051: CALL_OW 74
9055: PPUSH
9056: CALL_OW 296
9060: PUSH
9061: LD_INT 8
9063: LESS
9064: IFFALSE 9068
// exit ;
9066: GO 9159
// building := IsInUnit ( unit2 ) ;
9068: LD_ADDR_VAR 0 5
9072: PUSH
9073: LD_VAR 0 2
9077: PPUSH
9078: CALL_OW 310
9082: ST_TO_ADDR
// if building then
9083: LD_VAR 0 5
9087: IFFALSE 9114
// result := IsNearbyEntrance ( unit , building , 2 ) else
9089: LD_ADDR_VAR 0 3
9093: PUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: LD_VAR 0 5
9103: PPUSH
9104: LD_INT 2
9106: PPUSH
9107: CALL 8696 0 3
9111: ST_TO_ADDR
9112: GO 9159
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9114: LD_ADDR_VAR 0 3
9118: PUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: CALL_OW 296
9133: PUSH
9134: LD_INT 6
9136: LESS
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 255
9147: PPUSH
9148: LD_VAR 0 1
9152: PPUSH
9153: CALL_OW 292
9157: AND
9158: ST_TO_ADDR
// end ;
9159: LD_VAR 0 3
9163: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9164: LD_INT 0
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
// uc_side = 0 ;
9170: LD_ADDR_OWVAR 20
9174: PUSH
9175: LD_INT 0
9177: ST_TO_ADDR
// uc_nation = 0 ;
9178: LD_ADDR_OWVAR 21
9182: PUSH
9183: LD_INT 0
9185: ST_TO_ADDR
// nat_area := nature_area ;
9186: LD_ADDR_VAR 0 4
9190: PUSH
9191: LD_INT 24
9193: ST_TO_ADDR
// InitHc ;
9194: CALL_OW 19
// for i = 1 to 4 do
9198: LD_ADDR_VAR 0 2
9202: PUSH
9203: DOUBLE
9204: LD_INT 1
9206: DEC
9207: ST_TO_ADDR
9208: LD_INT 4
9210: PUSH
9211: FOR_TO
9212: IFFALSE 9259
// begin hc_class = 18 ;
9214: LD_ADDR_OWVAR 28
9218: PUSH
9219: LD_INT 18
9221: ST_TO_ADDR
// hc_gallery =  ;
9222: LD_ADDR_OWVAR 33
9226: PUSH
9227: LD_STRING 
9229: ST_TO_ADDR
// animal := CreateHuman ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: CALL_OW 44
9239: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_VAR 0 4
9249: PPUSH
9250: LD_INT 0
9252: PPUSH
9253: CALL_OW 49
// end ;
9257: GO 9211
9259: POP
9260: POP
// for i = 1 to 3 do
9261: LD_ADDR_VAR 0 2
9265: PUSH
9266: DOUBLE
9267: LD_INT 1
9269: DEC
9270: ST_TO_ADDR
9271: LD_INT 3
9273: PUSH
9274: FOR_TO
9275: IFFALSE 9369
// begin hc_class = class_apeman ;
9277: LD_ADDR_OWVAR 28
9281: PUSH
9282: LD_INT 12
9284: ST_TO_ADDR
// hc_gallery =  ;
9285: LD_ADDR_OWVAR 33
9289: PUSH
9290: LD_STRING 
9292: ST_TO_ADDR
// hc_agressivity = 0 ;
9293: LD_ADDR_OWVAR 35
9297: PUSH
9298: LD_INT 0
9300: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9301: LD_ADDR_OWVAR 31
9305: PUSH
9306: LD_INT 1
9308: PPUSH
9309: LD_INT 3
9311: PPUSH
9312: CALL_OW 12
9316: PUSH
9317: LD_INT 1
9319: PPUSH
9320: LD_INT 3
9322: PPUSH
9323: CALL_OW 12
9327: PUSH
9328: LD_INT 0
9330: PUSH
9331: LD_INT 0
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: ST_TO_ADDR
// animal := CreateHuman ;
9340: LD_ADDR_VAR 0 3
9344: PUSH
9345: CALL_OW 44
9349: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9350: LD_VAR 0 3
9354: PPUSH
9355: LD_VAR 0 4
9359: PPUSH
9360: LD_INT 0
9362: PPUSH
9363: CALL_OW 49
// end ;
9367: GO 9274
9369: POP
9370: POP
// for i = 1 to 3 do
9371: LD_ADDR_VAR 0 2
9375: PUSH
9376: DOUBLE
9377: LD_INT 1
9379: DEC
9380: ST_TO_ADDR
9381: LD_INT 3
9383: PUSH
9384: FOR_TO
9385: IFFALSE 9432
// begin hc_class = 13 ;
9387: LD_ADDR_OWVAR 28
9391: PUSH
9392: LD_INT 13
9394: ST_TO_ADDR
// hc_gallery =  ;
9395: LD_ADDR_OWVAR 33
9399: PUSH
9400: LD_STRING 
9402: ST_TO_ADDR
// animal := CreateHuman ;
9403: LD_ADDR_VAR 0 3
9407: PUSH
9408: CALL_OW 44
9412: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9413: LD_VAR 0 3
9417: PPUSH
9418: LD_VAR 0 4
9422: PPUSH
9423: LD_INT 0
9425: PPUSH
9426: CALL_OW 49
// end ;
9430: GO 9384
9432: POP
9433: POP
// for i = 1 to 3 do
9434: LD_ADDR_VAR 0 2
9438: PUSH
9439: DOUBLE
9440: LD_INT 1
9442: DEC
9443: ST_TO_ADDR
9444: LD_INT 3
9446: PUSH
9447: FOR_TO
9448: IFFALSE 9493
// begin hc_class = 20 ;
9450: LD_ADDR_OWVAR 28
9454: PUSH
9455: LD_INT 20
9457: ST_TO_ADDR
// hc_gallery =  ;
9458: LD_ADDR_OWVAR 33
9462: PUSH
9463: LD_STRING 
9465: ST_TO_ADDR
// animal := CreateHuman ;
9466: LD_ADDR_VAR 0 3
9470: PUSH
9471: CALL_OW 44
9475: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9476: LD_VAR 0 3
9480: PPUSH
9481: LD_INT 4
9483: PPUSH
9484: LD_INT 0
9486: PPUSH
9487: CALL_OW 49
// end ;
9491: GO 9447
9493: POP
9494: POP
// end ; end_of_file
9495: LD_VAR 0 1
9499: RET
// export function Action ; begin
9500: LD_INT 0
9502: PPUSH
// InGameOn ;
9503: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9507: LD_EXP 14
9511: PPUSH
9512: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9516: LD_EXP 14
9520: PPUSH
9521: LD_STRING D1-JMM-1
9523: PPUSH
9524: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9528: LD_EXP 15
9532: PPUSH
9533: LD_STRING D1-Roth-1
9535: PPUSH
9536: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9540: LD_EXP 14
9544: PPUSH
9545: LD_STRING D1-JMM-2
9547: PPUSH
9548: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9552: LD_EXP 15
9556: PPUSH
9557: LD_STRING D1-Roth-2
9559: PPUSH
9560: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9564: LD_EXP 14
9568: PPUSH
9569: LD_STRING D1-JMM-3
9571: PPUSH
9572: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9576: LD_EXP 15
9580: PPUSH
9581: LD_STRING D1-Roth-3
9583: PPUSH
9584: CALL_OW 88
// ComInvisible ( Roth ) ;
9588: LD_EXP 15
9592: PPUSH
9593: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9597: LD_INT 46
9599: PPUSH
9600: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9604: LD_EXP 14
9608: PPUSH
9609: LD_STRING D1-JMM-4
9611: PPUSH
9612: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9616: LD_INT 10
9618: PPUSH
9619: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9623: LD_EXP 15
9627: PPUSH
9628: LD_EXP 14
9632: PPUSH
9633: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9637: LD_EXP 14
9641: PPUSH
9642: LD_STRING D1-JMM-4a
9644: PPUSH
9645: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9649: LD_EXP 15
9653: PPUSH
9654: LD_STRING D1-Roth-4
9656: PPUSH
9657: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9661: LD_EXP 14
9665: PPUSH
9666: LD_STRING D1-JMM-5
9668: PPUSH
9669: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9673: LD_EXP 15
9677: PPUSH
9678: LD_STRING D1-Roth-5
9680: PPUSH
9681: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9685: LD_EXP 14
9689: PPUSH
9690: LD_STRING D1-JMM-6
9692: PPUSH
9693: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9697: LD_EXP 15
9701: PPUSH
9702: LD_STRING D1-Roth-6
9704: PPUSH
9705: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9709: LD_EXP 14
9713: PPUSH
9714: LD_STRING D1-JMM-7
9716: PPUSH
9717: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9721: LD_EXP 16
9725: PPUSH
9726: LD_EXP 14
9730: PPUSH
9731: CALL_OW 250
9735: PPUSH
9736: LD_EXP 14
9740: PPUSH
9741: CALL_OW 251
9745: PPUSH
9746: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9750: LD_EXP 15
9754: PPUSH
9755: LD_STRING D1-Roth-7
9757: PPUSH
9758: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9762: LD_INT 10
9764: PPUSH
9765: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9769: LD_EXP 16
9773: PPUSH
9774: LD_EXP 14
9778: PPUSH
9779: CALL_OW 296
9783: PUSH
9784: LD_INT 6
9786: LESS
9787: IFFALSE 9762
// ComTurnUnit ( Powell , JMM ) ;
9789: LD_EXP 16
9793: PPUSH
9794: LD_EXP 14
9798: PPUSH
9799: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9803: LD_EXP 16
9807: PPUSH
9808: LD_STRING D1-Pow-7
9810: PPUSH
9811: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9815: LD_EXP 14
9819: PPUSH
9820: LD_EXP 16
9824: PPUSH
9825: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9829: LD_EXP 15
9833: PPUSH
9834: LD_EXP 16
9838: PPUSH
9839: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9843: LD_EXP 14
9847: PPUSH
9848: LD_STRING D1-JMM-8
9850: PPUSH
9851: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9855: LD_EXP 16
9859: PPUSH
9860: LD_STRING D1-Pow-8
9862: PPUSH
9863: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9867: LD_EXP 14
9871: PPUSH
9872: LD_STRING D1-JMM-9
9874: PPUSH
9875: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9879: LD_EXP 16
9883: PPUSH
9884: LD_INT 124
9886: PPUSH
9887: LD_INT 61
9889: PPUSH
9890: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9894: LD_INT 35
9896: PPUSH
9897: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9901: LD_EXP 14
9905: PPUSH
9906: LD_EXP 16
9910: PPUSH
9911: CALL_OW 296
9915: PUSH
9916: LD_INT 6
9918: GREATER
9919: IFFALSE 9894
// SayRadio ( Powell , D1-Pow-9 ) ;
9921: LD_EXP 16
9925: PPUSH
9926: LD_STRING D1-Pow-9
9928: PPUSH
9929: CALL_OW 94
// RemoveUnit ( Powell ) ;
9933: LD_EXP 16
9937: PPUSH
9938: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9942: LD_EXP 16
9946: PPUSH
9947: LD_INT 18
9949: PPUSH
9950: CALL_OW 52
// if Joan and not Joan in selected then
9954: LD_EXP 36
9958: PUSH
9959: LD_EXP 36
9963: PUSH
9964: LD_EXP 3
9968: IN
9969: NOT
9970: AND
9971: IFFALSE 9985
// SayRadio ( Joan , D1-Joan-9 ) ;
9973: LD_EXP 36
9977: PPUSH
9978: LD_STRING D1-Joan-9
9980: PPUSH
9981: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
9985: LD_EXP 15
9989: PPUSH
9990: LD_EXP 14
9994: PPUSH
9995: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
9999: LD_EXP 14
10003: PPUSH
10004: LD_EXP 15
10008: PPUSH
10009: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10013: LD_EXP 15
10017: PPUSH
10018: LD_STRING D1-Roth-9
10020: PPUSH
10021: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10025: LD_EXP 14
10029: PPUSH
10030: LD_STRING D1-JMM-10
10032: PPUSH
10033: CALL_OW 88
// InGameOff ;
10037: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10041: LD_STRING M1
10043: PPUSH
10044: CALL_OW 337
// if Difficulty < 3 then
10048: LD_OWVAR 67
10052: PUSH
10053: LD_INT 3
10055: LESS
10056: IFFALSE 10068
// ChangeSideFog ( 4 , 7 ) ;
10058: LD_INT 4
10060: PPUSH
10061: LD_INT 7
10063: PPUSH
10064: CALL_OW 343
// SaveForQuickRestart ;
10068: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10072: LD_INT 7
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: LD_INT 2
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 80
// wait ( 0 0$3 ) ;
10088: LD_INT 105
10090: PPUSH
10091: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10095: LD_EXP 15
10099: PPUSH
10100: LD_INT 124
10102: PPUSH
10103: LD_INT 18
10105: PPUSH
10106: CALL_OW 111
// AddComInvisible ( Roth ) ;
10110: LD_EXP 15
10114: PPUSH
10115: CALL_OW 212
// wait ( 0 0$30 ) ;
10119: LD_INT 1050
10121: PPUSH
10122: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10126: LD_EXP 15
10130: PPUSH
10131: LD_INT 2100
10133: PPUSH
10134: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10138: LD_EXP 15
10142: PPUSH
10143: LD_INT 156
10145: PPUSH
10146: LD_INT 20
10148: PPUSH
10149: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10153: LD_EXP 15
10157: PPUSH
10158: LD_INT 178
10160: PPUSH
10161: LD_INT 42
10163: PPUSH
10164: CALL_OW 171
// AddComInvisible ( Roth ) ;
10168: LD_EXP 15
10172: PPUSH
10173: CALL_OW 212
// end ;
10177: LD_VAR 0 1
10181: RET
// every 0 0$1 do var i , tmp ;
10182: GO 10184
10184: DISABLE
10185: LD_INT 0
10187: PPUSH
10188: PPUSH
// begin tmp := selected union friends ;
10189: LD_ADDR_VAR 0 2
10193: PUSH
10194: LD_EXP 3
10198: PUSH
10199: LD_EXP 4
10203: UNION
10204: ST_TO_ADDR
// if not tmp then
10205: LD_VAR 0 2
10209: NOT
10210: IFFALSE 10214
// exit ;
10212: GO 10286
// repeat wait ( 0 0$1 ) ;
10214: LD_INT 35
10216: PPUSH
10217: CALL_OW 67
// for i in tmp do
10221: LD_ADDR_VAR 0 1
10225: PUSH
10226: LD_VAR 0 2
10230: PUSH
10231: FOR_IN
10232: IFFALSE 10277
// if CanSpot ( JMM , i ) then
10234: LD_EXP 14
10238: PPUSH
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL 8945 0 2
10248: IFFALSE 10275
// begin tmp := tmp diff i ;
10250: LD_ADDR_VAR 0 2
10254: PUSH
10255: LD_VAR 0 2
10259: PUSH
10260: LD_VAR 0 1
10264: DIFF
10265: ST_TO_ADDR
// Spot ( i ) ;
10266: LD_VAR 0 1
10270: PPUSH
10271: CALL 10289 0 1
// end ;
10275: GO 10231
10277: POP
10278: POP
// until not tmp ;
10279: LD_VAR 0 2
10283: NOT
10284: IFFALSE 10214
// end ;
10286: PPOPN 2
10288: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10289: LD_INT 0
10291: PPUSH
10292: PPUSH
10293: PPUSH
10294: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10295: LD_VAR 0 1
10299: NOT
10300: PUSH
10301: LD_VAR 0 1
10305: PPUSH
10306: CALL_OW 255
10310: PUSH
10311: LD_INT 4
10313: NONEQUAL
10314: OR
10315: PUSH
10316: LD_VAR 0 1
10320: PPUSH
10321: CALL_OW 555
10325: OR
10326: PUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 302
10336: NOT
10337: OR
10338: IFFALSE 10342
// exit ;
10340: GO 12231
// InGameOn ;
10342: CALL_OW 8
// side := GetSide ( JMM ) ;
10346: LD_ADDR_VAR 0 4
10350: PUSH
10351: LD_EXP 14
10355: PPUSH
10356: CALL_OW 255
10360: ST_TO_ADDR
// joined := false ;
10361: LD_ADDR_VAR 0 5
10365: PUSH
10366: LD_INT 0
10368: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10369: LD_ADDR_VAR 0 3
10373: PUSH
10374: LD_VAR 0 1
10378: PPUSH
10379: CALL_OW 310
10383: ST_TO_ADDR
// if building then
10384: LD_VAR 0 3
10388: IFFALSE 10447
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10390: LD_EXP 14
10394: PPUSH
10395: LD_VAR 0 1
10399: PPUSH
10400: CALL_OW 255
10404: PPUSH
10405: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10409: LD_EXP 14
10413: PPUSH
10414: LD_VAR 0 3
10418: PPUSH
10419: CALL_OW 120
// repeat wait ( 3 ) ;
10423: LD_INT 3
10425: PPUSH
10426: CALL_OW 67
// until IsInUnit ( JMM ) ;
10430: LD_EXP 14
10434: PPUSH
10435: CALL_OW 310
10439: IFFALSE 10423
// DialogueOn ;
10441: CALL_OW 6
// end else
10445: GO 10479
// begin ComTurnUnit ( JMM , unit ) ;
10447: LD_EXP 14
10451: PPUSH
10452: LD_VAR 0 1
10456: PPUSH
10457: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10461: LD_VAR 0 1
10465: PPUSH
10466: LD_EXP 14
10470: PPUSH
10471: CALL_OW 119
// DialogueOn ;
10475: CALL_OW 6
// end ; if unit = Joan then
10479: LD_VAR 0 1
10483: PUSH
10484: LD_EXP 36
10488: EQUAL
10489: IFFALSE 10599
// begin joined := true ;
10491: LD_ADDR_VAR 0 5
10495: PUSH
10496: LD_INT 1
10498: ST_TO_ADDR
// if Joan in selected then
10499: LD_EXP 36
10503: PUSH
10504: LD_EXP 3
10508: IN
10509: IFFALSE 10537
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10511: LD_EXP 36
10515: PPUSH
10516: LD_STRING D3-Joan-Joan-1
10518: PPUSH
10519: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10523: LD_EXP 14
10527: PPUSH
10528: LD_STRING D3-Joan-JMM-1
10530: PPUSH
10531: CALL_OW 88
// end else
10535: GO 10597
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10537: LD_EXP 36
10541: PPUSH
10542: LD_STRING D4-Joan-Joan-1
10544: PPUSH
10545: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10549: LD_EXP 14
10553: PPUSH
10554: LD_STRING D4-Joan-JMM-1
10556: PPUSH
10557: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10561: LD_EXP 36
10565: PPUSH
10566: LD_STRING D4-Joan-Joan-2
10568: PPUSH
10569: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10573: LD_EXP 14
10577: PPUSH
10578: LD_STRING D4-Joan-JMM-2
10580: PPUSH
10581: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10585: LD_EXP 36
10589: PPUSH
10590: LD_STRING D4-Joan-Joan-3
10592: PPUSH
10593: CALL_OW 88
// end ; end else
10597: GO 12039
// if unit = Lisa then
10599: LD_VAR 0 1
10603: PUSH
10604: LD_EXP 23
10608: EQUAL
10609: IFFALSE 10801
// begin if Lisa in selected then
10611: LD_EXP 23
10615: PUSH
10616: LD_EXP 3
10620: IN
10621: IFFALSE 10734
// begin if GetSide ( Joan ) = 7 then
10623: LD_EXP 36
10627: PPUSH
10628: CALL_OW 255
10632: PUSH
10633: LD_INT 7
10635: EQUAL
10636: IFFALSE 10700
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10638: LD_EXP 23
10642: PPUSH
10643: LD_STRING D3-LisaJ-Lisa-1
10645: PPUSH
10646: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10650: LD_EXP 14
10654: PPUSH
10655: LD_STRING D3-LisaJ-JMM-1
10657: PPUSH
10658: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10662: LD_EXP 23
10666: PPUSH
10667: LD_STRING D3-LisaJ-Lisa-2
10669: PPUSH
10670: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10674: LD_EXP 14
10678: PPUSH
10679: LD_STRING D3-LisaJ-JMM-2
10681: PPUSH
10682: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10686: LD_EXP 23
10690: PPUSH
10691: LD_STRING D3-LisaJ-Lisa-3
10693: PPUSH
10694: CALL_OW 88
// end else
10698: GO 10732
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10700: LD_EXP 23
10704: PPUSH
10705: LD_STRING D3-LisaL-Lisa-1
10707: PPUSH
10708: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10712: LD_EXP 14
10716: PPUSH
10717: LD_STRING D3-LisaL-JMM-1
10719: PPUSH
10720: CALL_OW 88
// joined := true ;
10724: LD_ADDR_VAR 0 5
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// end ; end else
10732: GO 10799
// begin if GetSide ( Joan ) = 7 then
10734: LD_EXP 36
10738: PPUSH
10739: CALL_OW 255
10743: PUSH
10744: LD_INT 7
10746: EQUAL
10747: IFFALSE 10787
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10749: LD_EXP 23
10753: PPUSH
10754: LD_STRING D4-LisaJ-Lisa-1
10756: PPUSH
10757: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10761: LD_EXP 14
10765: PPUSH
10766: LD_STRING D4-LisaJ-JMM-1
10768: PPUSH
10769: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10773: LD_EXP 23
10777: PPUSH
10778: LD_STRING D4-LisaJ-Lisa-2
10780: PPUSH
10781: CALL_OW 88
// end else
10785: GO 10799
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10787: LD_EXP 23
10791: PPUSH
10792: LD_STRING D4-LisaL-Lisa-1
10794: PPUSH
10795: CALL_OW 88
// end ; end ; end else
10799: GO 12039
// if unit = Frank then
10801: LD_VAR 0 1
10805: PUSH
10806: LD_EXP 33
10810: EQUAL
10811: IFFALSE 10951
// begin joined := true ;
10813: LD_ADDR_VAR 0 5
10817: PUSH
10818: LD_INT 1
10820: ST_TO_ADDR
// if Frank in selected then
10821: LD_EXP 33
10825: PUSH
10826: LD_EXP 3
10830: IN
10831: IFFALSE 10901
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10833: LD_EXP 33
10837: PPUSH
10838: LD_STRING D3-Frank-Frank-1
10840: PPUSH
10841: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10845: LD_EXP 14
10849: PPUSH
10850: LD_STRING D3-Frank-JMM-1
10852: PPUSH
10853: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10857: LD_EXP 33
10861: PPUSH
10862: LD_STRING D3-Frank-Frank-2
10864: PPUSH
10865: CALL_OW 88
// if reached_lab then
10869: LD_EXP 5
10873: IFFALSE 10899
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10875: LD_EXP 14
10879: PPUSH
10880: LD_STRING D3-Frank-JMM-2
10882: PPUSH
10883: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10887: LD_EXP 33
10891: PPUSH
10892: LD_STRING D3-Frank-Frank-3
10894: PPUSH
10895: CALL_OW 88
// end ; end else
10899: GO 10949
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10901: LD_EXP 33
10905: PPUSH
10906: LD_STRING D4-Frank-Frank-1
10908: PPUSH
10909: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10913: LD_EXP 14
10917: PPUSH
10918: LD_STRING D4-Frank-JMM-1
10920: PPUSH
10921: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10925: LD_EXP 33
10929: PPUSH
10930: LD_STRING D4-Frank-Frank-2
10932: PPUSH
10933: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10937: LD_EXP 14
10941: PPUSH
10942: LD_STRING D4-Frank-JMM-2
10944: PPUSH
10945: CALL_OW 88
// end ; end else
10949: GO 12039
// if unit = Brown then
10951: LD_VAR 0 1
10955: PUSH
10956: LD_EXP 28
10960: EQUAL
10961: IFFALSE 11057
// begin if Brown in selected or gamma_commander = 2 then
10963: LD_EXP 28
10967: PUSH
10968: LD_EXP 3
10972: IN
10973: PUSH
10974: LD_EXP 10
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: OR
10983: IFFALSE 11019
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
10985: LD_EXP 28
10989: PPUSH
10990: LD_STRING D3-Soldier1-Sol1-1
10992: PPUSH
10993: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
10997: LD_EXP 14
11001: PPUSH
11002: LD_STRING D3-Soldier1-JMM-1
11004: PPUSH
11005: CALL_OW 88
// joined := true ;
11009: LD_ADDR_VAR 0 5
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// end else
11017: GO 11055
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11019: LD_EXP 28
11023: PPUSH
11024: LD_STRING D4-Soldier2-Sol1-1
11026: PPUSH
11027: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11031: LD_EXP 14
11035: PPUSH
11036: LD_STRING D4-Soldier1-JMM-1
11038: PPUSH
11039: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11043: LD_EXP 28
11047: PPUSH
11048: LD_STRING D4-Soldier2-Sol1-2
11050: PPUSH
11051: CALL_OW 88
// end ; end else
11055: GO 12039
// if unit = Donaldson then
11057: LD_VAR 0 1
11061: PUSH
11062: LD_EXP 24
11066: EQUAL
11067: IFFALSE 11163
// begin if Donaldson in selected or gamma_commander = 1 then
11069: LD_EXP 24
11073: PUSH
11074: LD_EXP 3
11078: IN
11079: PUSH
11080: LD_EXP 10
11084: PUSH
11085: LD_INT 1
11087: EQUAL
11088: OR
11089: IFFALSE 11125
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11091: LD_EXP 24
11095: PPUSH
11096: LD_STRING D3-Soldier2-FSol2-1
11098: PPUSH
11099: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11103: LD_EXP 14
11107: PPUSH
11108: LD_STRING D3-Soldier2-JMM-1
11110: PPUSH
11111: CALL_OW 88
// joined := true ;
11115: LD_ADDR_VAR 0 5
11119: PUSH
11120: LD_INT 1
11122: ST_TO_ADDR
// end else
11123: GO 11161
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11125: LD_VAR 0 1
11129: PPUSH
11130: LD_STRING D4-Soldier1-FSol1-1
11132: PPUSH
11133: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11137: LD_EXP 14
11141: PPUSH
11142: LD_STRING D4-Soldier1-JMM-1
11144: PPUSH
11145: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11149: LD_VAR 0 1
11153: PPUSH
11154: LD_STRING D4-Soldier1-FSol1-2
11156: PPUSH
11157: CALL_OW 88
// end ; end else
11161: GO 12039
// if unit = Cyrus then
11163: LD_VAR 0 1
11167: PUSH
11168: LD_EXP 26
11172: EQUAL
11173: IFFALSE 11247
// begin if Cyrus in selected then
11175: LD_EXP 26
11179: PUSH
11180: LD_EXP 3
11184: IN
11185: IFFALSE 11221
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11187: LD_EXP 26
11191: PPUSH
11192: LD_STRING D3-Cyrus-Cyrus-1
11194: PPUSH
11195: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11199: LD_EXP 14
11203: PPUSH
11204: LD_STRING D3-Cyrus-JMM-1
11206: PPUSH
11207: CALL_OW 88
// joined := true ;
11211: LD_ADDR_VAR 0 5
11215: PUSH
11216: LD_INT 1
11218: ST_TO_ADDR
// end else
11219: GO 11245
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11221: LD_EXP 26
11225: PPUSH
11226: LD_STRING D4-Cyrus-Cyrus-1
11228: PPUSH
11229: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11233: LD_EXP 14
11237: PPUSH
11238: LD_STRING D4-Cyrus-JMM-1
11240: PPUSH
11241: CALL_OW 88
// end ; end else
11245: GO 12039
// if unit = Bobby then
11247: LD_VAR 0 1
11251: PUSH
11252: LD_EXP 25
11256: EQUAL
11257: IFFALSE 11343
// begin if Bobby in selected then
11259: LD_EXP 25
11263: PUSH
11264: LD_EXP 3
11268: IN
11269: IFFALSE 11305
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11271: LD_EXP 25
11275: PPUSH
11276: LD_STRING D3-Bobby-Bobby-1
11278: PPUSH
11279: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11283: LD_EXP 14
11287: PPUSH
11288: LD_STRING D3-Bobby-JMM-1
11290: PPUSH
11291: CALL_OW 88
// joined := true ;
11295: LD_ADDR_VAR 0 5
11299: PUSH
11300: LD_INT 1
11302: ST_TO_ADDR
// end else
11303: GO 11341
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11305: LD_EXP 25
11309: PPUSH
11310: LD_STRING D4-Bobby-Bobby-1
11312: PPUSH
11313: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11317: LD_EXP 14
11321: PPUSH
11322: LD_STRING D4-Bobby-JMM-1
11324: PPUSH
11325: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11329: LD_EXP 25
11333: PPUSH
11334: LD_STRING D4-Bobby-Bobby-2
11336: PPUSH
11337: CALL_OW 88
// end ; end else
11341: GO 12039
// if unit = Cornel then
11343: LD_VAR 0 1
11347: PUSH
11348: LD_EXP 31
11352: EQUAL
11353: IFFALSE 11451
// begin if Cornel in selected then
11355: LD_EXP 31
11359: PUSH
11360: LD_EXP 3
11364: IN
11365: IFFALSE 11413
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11367: LD_EXP 31
11371: PPUSH
11372: LD_STRING D3-Mark-Corn-1
11374: PPUSH
11375: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11379: LD_EXP 14
11383: PPUSH
11384: LD_STRING D3-Mark-JMM-1
11386: PPUSH
11387: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11391: LD_EXP 31
11395: PPUSH
11396: LD_STRING D3-Mark-Corn-2
11398: PPUSH
11399: CALL_OW 88
// joined := true ;
11403: LD_ADDR_VAR 0 5
11407: PUSH
11408: LD_INT 1
11410: ST_TO_ADDR
// end else
11411: GO 11449
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11413: LD_EXP 31
11417: PPUSH
11418: LD_STRING D4-Mark-Corn-1
11420: PPUSH
11421: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11425: LD_EXP 14
11429: PPUSH
11430: LD_STRING D3-Joan-JMM-1
11432: PPUSH
11433: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11437: LD_EXP 31
11441: PPUSH
11442: LD_STRING D4-Mark-Corn-2
11444: PPUSH
11445: CALL_OW 88
// end ; end else
11449: GO 12039
// if unit = Gary then
11451: LD_VAR 0 1
11455: PUSH
11456: LD_EXP 32
11460: EQUAL
11461: IFFALSE 11545
// begin if Gary in selected then
11463: LD_EXP 32
11467: PUSH
11468: LD_EXP 3
11472: IN
11473: IFFALSE 11509
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11475: LD_EXP 32
11479: PPUSH
11480: LD_STRING D3-Gary-Gary-1
11482: PPUSH
11483: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11487: LD_EXP 14
11491: PPUSH
11492: LD_STRING D3-Gary-JMM-1
11494: PPUSH
11495: CALL_OW 88
// joined := true ;
11499: LD_ADDR_VAR 0 5
11503: PUSH
11504: LD_INT 1
11506: ST_TO_ADDR
// end else
11507: GO 11543
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11509: LD_EXP 32
11513: PPUSH
11514: LD_STRING D4-Gary-Gary-1
11516: PPUSH
11517: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11521: LD_EXP 32
11525: PPUSH
11526: LD_INT 1
11528: PPUSH
11529: CALL_OW 235
// DialogueOff ;
11533: CALL_OW 7
// InGameOff ;
11537: CALL_OW 9
// exit ;
11541: GO 12231
// end ; end else
11543: GO 12039
// if unit = Kikuchi then
11545: LD_VAR 0 1
11549: PUSH
11550: LD_EXP 34
11554: EQUAL
11555: IFFALSE 11639
// begin if Kikuchi in selected then
11557: LD_EXP 34
11561: PUSH
11562: LD_EXP 3
11566: IN
11567: IFFALSE 11603
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11569: LD_EXP 34
11573: PPUSH
11574: LD_STRING D3-Yamako-Yam-1
11576: PPUSH
11577: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11581: LD_EXP 14
11585: PPUSH
11586: LD_STRING D3-Soldier2-JMM-1
11588: PPUSH
11589: CALL_OW 88
// joined := true ;
11593: LD_ADDR_VAR 0 5
11597: PUSH
11598: LD_INT 1
11600: ST_TO_ADDR
// end else
11601: GO 11637
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11603: LD_EXP 34
11607: PPUSH
11608: LD_STRING D4-Yamako-Yam-1
11610: PPUSH
11611: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11615: LD_EXP 34
11619: PPUSH
11620: LD_INT 1
11622: PPUSH
11623: CALL_OW 235
// DialogueOff ;
11627: CALL_OW 7
// InGameOff ;
11631: CALL_OW 9
// exit ;
11635: GO 12231
// end ; end else
11637: GO 12039
// if unit = Gladstone then
11639: LD_VAR 0 1
11643: PUSH
11644: LD_EXP 29
11648: EQUAL
11649: IFFALSE 11723
// begin if Gladstone in selected then
11651: LD_EXP 29
11655: PUSH
11656: LD_EXP 3
11660: IN
11661: IFFALSE 11697
// begin joined := true ;
11663: LD_ADDR_VAR 0 5
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11671: LD_EXP 14
11675: PPUSH
11676: LD_STRING D3-Tim-JMM-1
11678: PPUSH
11679: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11683: LD_EXP 29
11687: PPUSH
11688: LD_STRING D3-Tim-Glad-1
11690: PPUSH
11691: CALL_OW 88
// end else
11695: GO 11721
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11697: LD_EXP 14
11701: PPUSH
11702: LD_STRING D4-Tim-JMM-1
11704: PPUSH
11705: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11709: LD_EXP 29
11713: PPUSH
11714: LD_STRING D4-Tim-Glad-1
11716: PPUSH
11717: CALL_OW 88
// end ; end else
11721: GO 12039
// if unit = Denis then
11723: LD_VAR 0 1
11727: PUSH
11728: LD_EXP 27
11732: EQUAL
11733: IFFALSE 11769
// begin joined := true ;
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11743: LD_EXP 27
11747: PPUSH
11748: LD_STRING D3-Denis-Den-1
11750: PPUSH
11751: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11755: LD_EXP 14
11759: PPUSH
11760: LD_STRING D3-Denis-JMM-1
11762: PPUSH
11763: CALL_OW 88
// end else
11767: GO 12039
// if unit = Simms then
11769: LD_VAR 0 1
11773: PUSH
11774: LD_EXP 35
11778: EQUAL
11779: IFFALSE 11815
// begin joined := true ;
11781: LD_ADDR_VAR 0 5
11785: PUSH
11786: LD_INT 1
11788: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11789: LD_EXP 35
11793: PPUSH
11794: LD_STRING D3-Simms-Sim-1
11796: PPUSH
11797: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11801: LD_EXP 14
11805: PPUSH
11806: LD_STRING D3-Simms-JMM-1
11808: PPUSH
11809: CALL_OW 88
// end else
11813: GO 12039
// if unit = DeltaDoctor then
11815: LD_VAR 0 1
11819: PUSH
11820: LD_EXP 37
11824: EQUAL
11825: IFFALSE 11861
// begin joined := true ;
11827: LD_ADDR_VAR 0 5
11831: PUSH
11832: LD_INT 1
11834: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11835: LD_EXP 37
11839: PPUSH
11840: LD_STRING D3-Soldier1-Sol1-1
11842: PPUSH
11843: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11847: LD_EXP 14
11851: PPUSH
11852: LD_STRING D3-Soldier1-JMM-1
11854: PPUSH
11855: CALL_OW 88
// end else
11859: GO 12039
// begin joined := unit in selected ;
11861: LD_ADDR_VAR 0 5
11865: PUSH
11866: LD_VAR 0 1
11870: PUSH
11871: LD_EXP 3
11875: IN
11876: ST_TO_ADDR
// if joined then
11877: LD_VAR 0 5
11881: IFFALSE 11950
// begin if GetSex ( unit ) = sex_male then
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 258
11892: PUSH
11893: LD_INT 1
11895: EQUAL
11896: IFFALSE 11924
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11898: LD_VAR 0 1
11902: PPUSH
11903: LD_STRING D3-Soldier1-Sol1-1
11905: PPUSH
11906: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11910: LD_EXP 14
11914: PPUSH
11915: LD_STRING D3-Soldier1-JMM-1
11917: PPUSH
11918: CALL_OW 88
// end else
11922: GO 11948
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_STRING D3-Soldier2-FSol2-1
11931: PPUSH
11932: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11936: LD_EXP 14
11940: PPUSH
11941: LD_STRING D3-Soldier2-JMM-1
11943: PPUSH
11944: CALL_OW 88
// end ; end else
11948: GO 12039
// begin if GetSex ( unit ) = sex_male then
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 258
11959: PUSH
11960: LD_INT 1
11962: EQUAL
11963: IFFALSE 12003
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11965: LD_VAR 0 1
11969: PPUSH
11970: LD_STRING D4-Soldier2-Sol1-1
11972: PPUSH
11973: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
11977: LD_EXP 14
11981: PPUSH
11982: LD_STRING D4-Soldier2-JMM-1
11984: PPUSH
11985: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
11989: LD_VAR 0 1
11993: PPUSH
11994: LD_STRING D4-Soldier2-Sol2-1
11996: PPUSH
11997: CALL_OW 88
// end else
12001: GO 12039
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12003: LD_VAR 0 1
12007: PPUSH
12008: LD_STRING D4-Soldier1-FSol1-1
12010: PPUSH
12011: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12015: LD_EXP 14
12019: PPUSH
12020: LD_STRING D4-Soldier1-JMM-1
12022: PPUSH
12023: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12027: LD_VAR 0 1
12031: PPUSH
12032: LD_STRING D4-Soldier1-FSol1-2
12034: PPUSH
12035: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12039: CALL_OW 7
// InGameOff ;
12043: CALL_OW 9
// if building then
12047: LD_VAR 0 3
12051: IFFALSE 12152
// begin SetSide ( JMM , side ) ;
12053: LD_EXP 14
12057: PPUSH
12058: LD_VAR 0 4
12062: PPUSH
12063: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12067: LD_EXP 14
12071: PPUSH
12072: CALL_OW 122
// if joined then
12076: LD_VAR 0 5
12080: IFFALSE 12119
// begin SetSide ( unit , side ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: LD_VAR 0 4
12091: PPUSH
12092: CALL_OW 235
// SetSide ( building , 1 ) ;
12096: LD_VAR 0 3
12100: PPUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 235
// ComExitBuilding ( unit ) ;
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 122
// end else
12117: GO 12150
// begin wait ( 0 0$10 ) ;
12119: LD_INT 350
12121: PPUSH
12122: CALL_OW 67
// SetSide ( unit , 1 ) ;
12126: LD_VAR 0 1
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 235
// SetSide ( building , 1 ) ;
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 235
// end ; end else
12150: GO 12231
// begin ComStop ( [ JMM , unit ] ) ;
12152: LD_EXP 14
12156: PUSH
12157: LD_VAR 0 1
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 141
// if joined then
12170: LD_VAR 0 5
12174: IFFALSE 12192
// SetSide ( unit , side ) else
12176: LD_VAR 0 1
12180: PPUSH
12181: LD_VAR 0 4
12185: PPUSH
12186: CALL_OW 235
12190: GO 12231
// begin repeat wait ( 0 0$1 ) ;
12192: LD_INT 35
12194: PPUSH
12195: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12199: LD_EXP 14
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 296
12213: PUSH
12214: LD_INT 11
12216: GREATER
12217: IFFALSE 12192
// SetSide ( unit , 1 ) ;
12219: LD_VAR 0 1
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 235
// end ; end ; end ;
12231: LD_VAR 0 2
12235: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12236: LD_EXP 14
12240: PPUSH
12241: CALL_OW 310
12245: PUSH
12246: LD_INT 47
12248: EQUAL
12249: IFFALSE 12317
12251: GO 12253
12253: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12254: LD_STRING M1a
12256: PPUSH
12257: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12261: LD_INT 13
12263: PPUSH
12264: LD_INT 7
12266: PPUSH
12267: LD_INT 2
12269: PPUSH
12270: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12274: LD_INT 29
12276: PPUSH
12277: LD_INT 7
12279: PPUSH
12280: LD_INT 2
12282: PPUSH
12283: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12287: LD_EXP 14
12291: PPUSH
12292: LD_INT 9
12294: PPUSH
12295: CALL_OW 336
// can_escape := true ;
12299: LD_ADDR_EXP 6
12303: PUSH
12304: LD_INT 1
12306: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12307: LD_INT 19
12309: PPUSH
12310: LD_INT 1
12312: PPUSH
12313: CALL_OW 424
// end ;
12317: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12318: LD_EXP 16
12322: PPUSH
12323: CALL_OW 256
12327: PUSH
12328: LD_INT 999
12330: LESS
12331: IFFALSE 12382
12333: GO 12335
12335: DISABLE
// begin enable ;
12336: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12337: LD_INT 25
12339: PPUSH
12340: LD_INT 48
12342: PPUSH
12343: CALL_OW 428
12347: PUSH
12348: LD_EXP 16
12352: EQUAL
12353: IFFALSE 12367
// begin RemoveUnit ( Powell ) ;
12355: LD_EXP 16
12359: PPUSH
12360: CALL_OW 64
// disable ;
12364: DISABLE
// end else
12365: GO 12382
// ComMoveXY ( Powell , 25 , 48 ) ;
12367: LD_EXP 16
12371: PPUSH
12372: LD_INT 25
12374: PPUSH
12375: LD_INT 48
12377: PPUSH
12378: CALL_OW 111
// end ;
12382: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12383: LD_INT 22
12385: PUSH
12386: LD_INT 4
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 1
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 3
12405: PUSH
12406: LD_INT 24
12408: PUSH
12409: LD_INT 990
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: PUSH
12430: LD_EXP 15
12434: DIFF
12435: IFFALSE 12579
12437: GO 12439
12439: DISABLE
12440: LD_INT 0
12442: PPUSH
// begin enable ;
12443: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12444: LD_ADDR_VAR 0 1
12448: PUSH
12449: LD_INT 22
12451: PUSH
12452: LD_INT 4
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 21
12461: PUSH
12462: LD_INT 1
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 3
12471: PUSH
12472: LD_INT 24
12474: PUSH
12475: LD_INT 990
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 69
12495: PUSH
12496: LD_EXP 15
12500: DIFF
12501: PUSH
12502: FOR_IN
12503: IFFALSE 12577
// begin ComFree ( i ) ;
12505: LD_VAR 0 1
12509: PPUSH
12510: CALL_OW 139
// SetSide ( i , 1 ) ;
12514: LD_VAR 0 1
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12526: LD_VAR 0 1
12530: PPUSH
12531: LD_EXP 14
12535: PPUSH
12536: CALL_OW 296
12540: PUSH
12541: LD_INT 14
12543: LESS
12544: IFFALSE 12575
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12546: LD_VAR 0 1
12550: PPUSH
12551: LD_EXP 14
12555: PPUSH
12556: CALL_OW 250
12560: PPUSH
12561: LD_EXP 14
12565: PPUSH
12566: CALL_OW 251
12570: PPUSH
12571: CALL_OW 114
// end ;
12575: GO 12502
12577: POP
12578: POP
// end ;
12579: PPOPN 1
12581: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12582: LD_INT 22
12584: PUSH
12585: LD_INT 4
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 34
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PPUSH
12606: CALL_OW 69
12610: IFFALSE 12692
12612: GO 12614
12614: DISABLE
12615: LD_INT 0
12617: PPUSH
// begin enable ;
12618: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12619: LD_ADDR_VAR 0 1
12623: PUSH
12624: LD_INT 22
12626: PUSH
12627: LD_INT 4
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 34
12636: PUSH
12637: LD_INT 12
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 69
12652: PUSH
12653: FOR_IN
12654: IFFALSE 12690
// if GetDistUnits ( i , JMM ) < 6 then
12656: LD_VAR 0 1
12660: PPUSH
12661: LD_EXP 14
12665: PPUSH
12666: CALL_OW 296
12670: PUSH
12671: LD_INT 6
12673: LESS
12674: IFFALSE 12688
// SetSide ( i , 7 ) ;
12676: LD_VAR 0 1
12680: PPUSH
12681: LD_INT 7
12683: PPUSH
12684: CALL_OW 235
12688: GO 12653
12690: POP
12691: POP
// end ;
12692: PPOPN 1
12694: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12695: LD_EXP 6
12699: PUSH
12700: LD_INT 19
12702: PPUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 7
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 21
12715: PUSH
12716: LD_INT 1
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 71
12731: NOT
12732: AND
12733: PUSH
12734: LD_INT 3
12736: PPUSH
12737: CALL_OW 469
12741: NOT
12742: AND
12743: PUSH
12744: LD_INT 5
12746: PPUSH
12747: CALL_OW 469
12751: NOT
12752: AND
12753: IFFALSE 14375
12755: GO 12757
12757: DISABLE
12758: LD_INT 0
12760: PPUSH
12761: PPUSH
12762: PPUSH
12763: PPUSH
12764: PPUSH
// begin m1 := false ;
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// m2 := false ;
12773: LD_ADDR_VAR 0 4
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// m3 := false ;
12781: LD_ADDR_VAR 0 5
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12789: LD_ADDR_VAR 0 1
12793: PUSH
12794: LD_EXP 3
12798: PPUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 4
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 21
12811: PUSH
12812: LD_INT 1
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 72
12827: PUSH
12828: LD_INT 0
12830: EQUAL
12831: ST_TO_ADDR
// if not all_taken then
12832: LD_VAR 0 1
12836: NOT
12837: IFFALSE 12978
// case query ( Q1 ) of 1 :
12839: LD_STRING Q1
12841: PPUSH
12842: CALL_OW 97
12846: PUSH
12847: LD_INT 1
12849: DOUBLE
12850: EQUAL
12851: IFTRUE 12855
12853: GO 12966
12855: POP
// begin repeat wait ( 0 0$1 ) ;
12856: LD_INT 35
12858: PPUSH
12859: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12863: LD_EXP 3
12867: PPUSH
12868: LD_INT 22
12870: PUSH
12871: LD_INT 4
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 21
12880: PUSH
12881: LD_INT 1
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PPUSH
12892: CALL_OW 72
12896: PUSH
12897: LD_INT 0
12899: EQUAL
12900: PUSH
12901: LD_INT 19
12903: PPUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 7
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 21
12916: PUSH
12917: LD_INT 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 71
12932: NOT
12933: AND
12934: PUSH
12935: LD_INT 3
12937: PPUSH
12938: CALL_OW 469
12942: NOT
12943: AND
12944: PUSH
12945: LD_INT 5
12947: PPUSH
12948: CALL_OW 469
12952: NOT
12953: AND
12954: IFFALSE 12856
// all_taken := true ;
12956: LD_ADDR_VAR 0 1
12960: PUSH
12961: LD_INT 1
12963: ST_TO_ADDR
// end ; 2 :
12964: GO 12978
12966: LD_INT 2
12968: DOUBLE
12969: EQUAL
12970: IFTRUE 12974
12972: GO 12977
12974: POP
// ; end ;
12975: GO 12978
12977: POP
// if team_kill_counter then
12978: LD_EXP 9
12982: IFFALSE 12998
// Say ( JMM , D5-JMM-1 ) else
12984: LD_EXP 14
12988: PPUSH
12989: LD_STRING D5-JMM-1
12991: PPUSH
12992: CALL_OW 88
12996: GO 13010
// Say ( JMM , D5-JMM-1a ) ;
12998: LD_EXP 14
13002: PPUSH
13003: LD_STRING D5-JMM-1a
13005: PPUSH
13006: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13010: LD_INT 22
13012: PUSH
13013: LD_INT 7
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 21
13022: PUSH
13023: LD_INT 1
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 23
13032: PUSH
13033: LD_INT 1
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: PPUSH
13045: CALL_OW 69
13049: PUSH
13050: LD_EXP 14
13054: PUSH
13055: LD_EXP 15
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: DIFF
13064: PUSH
13065: LD_INT 10
13067: GREATEREQUAL
13068: IFFALSE 13077
// SetAchievement ( ACH_TEAM ) ;
13070: LD_STRING ACH_TEAM
13072: PPUSH
13073: CALL_OW 543
// if not invis_used then
13077: LD_EXP 12
13081: NOT
13082: IFFALSE 13098
// begin wait ( 3 ) ;
13084: LD_INT 3
13086: PPUSH
13087: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13091: LD_STRING ACH_NOINVIS
13093: PPUSH
13094: CALL_OW 543
// end ; if not alert then
13098: LD_EXP 13
13102: NOT
13103: IFFALSE 13119
// begin wait ( 3 ) ;
13105: LD_INT 3
13107: PPUSH
13108: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13112: LD_STRING ACH_ALARM
13114: PPUSH
13115: CALL_OW 543
// end ; if tick < 15 15$00 then
13119: LD_OWVAR 1
13123: PUSH
13124: LD_INT 31500
13126: LESS
13127: IFFALSE 13143
// begin wait ( 3 ) ;
13129: LD_INT 3
13131: PPUSH
13132: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13136: LD_STRING ACH_ASPEED_16
13138: PPUSH
13139: CALL_OW 543
// end ; if all_taken then
13143: LD_VAR 0 1
13147: IFFALSE 13169
// begin AddMedal ( All , 1 ) ;
13149: LD_STRING All
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: CALL_OW 101
// m1 := true ;
13159: LD_ADDR_VAR 0 3
13163: PUSH
13164: LD_INT 1
13166: ST_TO_ADDR
// end else
13167: GO 13180
// AddMedal ( All , - 1 ) ;
13169: LD_STRING All
13171: PPUSH
13172: LD_INT 1
13174: NEG
13175: PPUSH
13176: CALL_OW 101
// if team_kill_counter then
13180: LD_EXP 9
13184: IFFALSE 13199
// AddMedal ( Save , - 1 ) else
13186: LD_STRING Save
13188: PPUSH
13189: LD_INT 1
13191: NEG
13192: PPUSH
13193: CALL_OW 101
13197: GO 13217
// begin AddMedal ( Save , 1 ) ;
13199: LD_STRING Save
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 101
// m2 := true ;
13209: LD_ADDR_VAR 0 4
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 1 , 1 ] [ Difficulty ] then
13217: LD_EXP 8
13221: PUSH
13222: LD_INT 2
13224: PUSH
13225: LD_INT 1
13227: PUSH
13228: LD_INT 1
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: PUSH
13236: LD_OWVAR 67
13240: ARRAY
13241: GREATEREQUAL
13242: IFFALSE 13257
// AddMedal ( Friendship , - 1 ) else
13244: LD_STRING Friendship
13246: PPUSH
13247: LD_INT 1
13249: NEG
13250: PPUSH
13251: CALL_OW 101
13255: GO 13275
// begin AddMedal ( Friendship , 1 ) ;
13257: LD_STRING Friendship
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 101
// m3 := true ;
13267: LD_ADDR_VAR 0 5
13271: PUSH
13272: LD_INT 1
13274: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty = 3 then
13275: LD_VAR 0 3
13279: PUSH
13280: LD_VAR 0 4
13284: AND
13285: PUSH
13286: LD_VAR 0 5
13290: AND
13291: PUSH
13292: LD_OWVAR 67
13296: PUSH
13297: LD_INT 3
13299: EQUAL
13300: AND
13301: IFFALSE 13313
// SetAchievementEX ( ACH_AMER , 16 ) ;
13303: LD_STRING ACH_AMER
13305: PPUSH
13306: LD_INT 16
13308: PPUSH
13309: CALL_OW 564
// GiveMedals ( MAIN ) ;
13313: LD_STRING MAIN
13315: PPUSH
13316: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13320: LD_ADDR_VAR 0 2
13324: PUSH
13325: LD_INT 22
13327: PUSH
13328: LD_INT 7
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 2
13337: PUSH
13338: LD_INT 25
13340: PUSH
13341: LD_INT 1
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 25
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 3
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 25
13370: PUSH
13371: LD_INT 4
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 5
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 25
13390: PUSH
13391: LD_INT 8
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 25
13400: PUSH
13401: LD_INT 9
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13430: LD_VAR 0 2
13434: PUSH
13435: LD_EXP 15
13439: ADD
13440: PPUSH
13441: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13445: LD_EXP 14
13449: PPUSH
13450: LD_STRING 12a_JMM
13452: PPUSH
13453: CALL_OW 38
// if IsLive ( Roth ) then
13457: LD_EXP 15
13461: PPUSH
13462: CALL_OW 300
13466: IFFALSE 13480
// SaveCharacters ( Roth , 12a_Roth ) ;
13468: LD_EXP 15
13472: PPUSH
13473: LD_STRING 12a_Roth
13475: PPUSH
13476: CALL_OW 38
// if Lisa in tmp then
13480: LD_EXP 23
13484: PUSH
13485: LD_VAR 0 2
13489: IN
13490: IFFALSE 13506
// SaveCharacters ( Lisa , 12a_Lisa ) else
13492: LD_EXP 23
13496: PPUSH
13497: LD_STRING 12a_Lisa
13499: PPUSH
13500: CALL_OW 38
13504: GO 13524
// if Lisa then
13506: LD_EXP 23
13510: IFFALSE 13524
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13512: LD_EXP 23
13516: PPUSH
13517: LD_STRING 12p_Lisa
13519: PPUSH
13520: CALL_OW 38
// if Donaldson in tmp then
13524: LD_EXP 24
13528: PUSH
13529: LD_VAR 0 2
13533: IN
13534: IFFALSE 13550
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13536: LD_EXP 24
13540: PPUSH
13541: LD_STRING 12a_Donaldson
13543: PPUSH
13544: CALL_OW 38
13548: GO 13568
// if Donaldson then
13550: LD_EXP 24
13554: IFFALSE 13568
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13556: LD_EXP 24
13560: PPUSH
13561: LD_STRING 12p_Donaldson
13563: PPUSH
13564: CALL_OW 38
// if Bobby in tmp then
13568: LD_EXP 25
13572: PUSH
13573: LD_VAR 0 2
13577: IN
13578: IFFALSE 13594
// SaveCharacters ( Bobby , 12a_Bobby ) else
13580: LD_EXP 25
13584: PPUSH
13585: LD_STRING 12a_Bobby
13587: PPUSH
13588: CALL_OW 38
13592: GO 13612
// if Bobby then
13594: LD_EXP 25
13598: IFFALSE 13612
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13600: LD_EXP 25
13604: PPUSH
13605: LD_STRING 12p_Bobby
13607: PPUSH
13608: CALL_OW 38
// if Cyrus in tmp then
13612: LD_EXP 26
13616: PUSH
13617: LD_VAR 0 2
13621: IN
13622: IFFALSE 13638
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13624: LD_EXP 26
13628: PPUSH
13629: LD_STRING 12a_Cyrus
13631: PPUSH
13632: CALL_OW 38
13636: GO 13656
// if Cyrus then
13638: LD_EXP 26
13642: IFFALSE 13656
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13644: LD_EXP 26
13648: PPUSH
13649: LD_STRING 12p_Cyrus
13651: PPUSH
13652: CALL_OW 38
// if Denis in tmp then
13656: LD_EXP 27
13660: PUSH
13661: LD_VAR 0 2
13665: IN
13666: IFFALSE 13680
// SaveCharacters ( Denis , 12a_Denis ) ;
13668: LD_EXP 27
13672: PPUSH
13673: LD_STRING 12a_Denis
13675: PPUSH
13676: CALL_OW 38
// if Brown in tmp then
13680: LD_EXP 28
13684: PUSH
13685: LD_VAR 0 2
13689: IN
13690: IFFALSE 13706
// SaveCharacters ( Brown , 12a_Brown ) else
13692: LD_EXP 28
13696: PPUSH
13697: LD_STRING 12a_Brown
13699: PPUSH
13700: CALL_OW 38
13704: GO 13730
// if Brown in tmp then
13706: LD_EXP 28
13710: PUSH
13711: LD_VAR 0 2
13715: IN
13716: IFFALSE 13730
// SaveCharacters ( Brown , 12p_Brown ) ;
13718: LD_EXP 28
13722: PPUSH
13723: LD_STRING 12p_Brown
13725: PPUSH
13726: CALL_OW 38
// if Gladstone in tmp then
13730: LD_EXP 29
13734: PUSH
13735: LD_VAR 0 2
13739: IN
13740: IFFALSE 13756
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13742: LD_EXP 29
13746: PPUSH
13747: LD_STRING 12a_Gladstone
13749: PPUSH
13750: CALL_OW 38
13754: GO 13774
// if Gladstone then
13756: LD_EXP 29
13760: IFFALSE 13774
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13762: LD_EXP 29
13766: PPUSH
13767: LD_STRING 12p_Gladstone
13769: PPUSH
13770: CALL_OW 38
// if Houten in tmp then
13774: LD_EXP 30
13778: PUSH
13779: LD_VAR 0 2
13783: IN
13784: IFFALSE 13800
// SaveCharacters ( Houten , 12a_Houten ) else
13786: LD_EXP 30
13790: PPUSH
13791: LD_STRING 12a_Houten
13793: PPUSH
13794: CALL_OW 38
13798: GO 13818
// if Houten then
13800: LD_EXP 30
13804: IFFALSE 13818
// SaveCharacters ( Houten , 12p_Houten ) ;
13806: LD_EXP 30
13810: PPUSH
13811: LD_STRING 12p_Houten
13813: PPUSH
13814: CALL_OW 38
// if Cornel in tmp then
13818: LD_EXP 31
13822: PUSH
13823: LD_VAR 0 2
13827: IN
13828: IFFALSE 13844
// SaveCharacters ( Cornel , 12a_Cornell ) else
13830: LD_EXP 31
13834: PPUSH
13835: LD_STRING 12a_Cornell
13837: PPUSH
13838: CALL_OW 38
13842: GO 13862
// if Cornel then
13844: LD_EXP 31
13848: IFFALSE 13862
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13850: LD_EXP 31
13854: PPUSH
13855: LD_STRING 12p_Cornell
13857: PPUSH
13858: CALL_OW 38
// if Gary in tmp then
13862: LD_EXP 32
13866: PUSH
13867: LD_VAR 0 2
13871: IN
13872: IFFALSE 13888
// SaveCharacters ( Gary , 12a_Gary ) else
13874: LD_EXP 32
13878: PPUSH
13879: LD_STRING 12a_Gary
13881: PPUSH
13882: CALL_OW 38
13886: GO 13906
// if Gary then
13888: LD_EXP 32
13892: IFFALSE 13906
// SaveCharacters ( Gary , 12p_Gary ) ;
13894: LD_EXP 32
13898: PPUSH
13899: LD_STRING 12p_Gary
13901: PPUSH
13902: CALL_OW 38
// if Frank in tmp then
13906: LD_EXP 33
13910: PUSH
13911: LD_VAR 0 2
13915: IN
13916: IFFALSE 13930
// SaveCharacters ( Frank , 12a_Frank ) ;
13918: LD_EXP 33
13922: PPUSH
13923: LD_STRING 12a_Frank
13925: PPUSH
13926: CALL_OW 38
// if Kikuchi in tmp then
13930: LD_EXP 34
13934: PUSH
13935: LD_VAR 0 2
13939: IN
13940: IFFALSE 13956
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13942: LD_EXP 34
13946: PPUSH
13947: LD_STRING 12a_Kikuchi
13949: PPUSH
13950: CALL_OW 38
13954: GO 13974
// if Kikuchi then
13956: LD_EXP 34
13960: IFFALSE 13974
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13962: LD_EXP 34
13966: PPUSH
13967: LD_STRING 12p_Kikuchi
13969: PPUSH
13970: CALL_OW 38
// if Simms in tmp then
13974: LD_EXP 35
13978: PUSH
13979: LD_VAR 0 2
13983: IN
13984: IFFALSE 13998
// SaveCharacters ( Simms , 12a_Simms ) ;
13986: LD_EXP 35
13990: PPUSH
13991: LD_STRING 12a_Simms
13993: PPUSH
13994: CALL_OW 38
// if Joan in tmp then
13998: LD_EXP 36
14002: PUSH
14003: LD_VAR 0 2
14007: IN
14008: IFFALSE 14022
// SaveCharacters ( Joan , 12a_Joan ) ;
14010: LD_EXP 36
14014: PPUSH
14015: LD_STRING 12a_Joan
14017: PPUSH
14018: CALL_OW 38
// if DeltaDoctor in tmp then
14022: LD_EXP 37
14026: PUSH
14027: LD_VAR 0 2
14031: IN
14032: IFFALSE 14046
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14034: LD_EXP 37
14038: PPUSH
14039: LD_STRING 12a_DeltaDoctor
14041: PPUSH
14042: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: LD_VAR 0 2
14055: PUSH
14056: LD_EXP 14
14060: PUSH
14061: LD_EXP 15
14065: PUSH
14066: LD_EXP 23
14070: PUSH
14071: LD_EXP 24
14075: PUSH
14076: LD_EXP 25
14080: PUSH
14081: LD_EXP 26
14085: PUSH
14086: LD_EXP 27
14090: PUSH
14091: LD_EXP 28
14095: PUSH
14096: LD_EXP 29
14100: PUSH
14101: LD_EXP 30
14105: PUSH
14106: LD_EXP 31
14110: PUSH
14111: LD_EXP 32
14115: PUSH
14116: LD_EXP 33
14120: PUSH
14121: LD_EXP 34
14125: PUSH
14126: LD_EXP 35
14130: PUSH
14131: LD_EXP 36
14135: PUSH
14136: LD_EXP 37
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: DIFF
14160: ST_TO_ADDR
// if tmp then
14161: LD_VAR 0 2
14165: IFFALSE 14179
// SaveCharacters ( tmp , 12a_others ) ;
14167: LD_VAR 0 2
14171: PPUSH
14172: LD_STRING 12a_others
14174: PPUSH
14175: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14179: LD_ADDR_VAR 0 2
14183: PUSH
14184: LD_INT 21
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 23
14196: PUSH
14197: LD_INT 1
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 2
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 69
14241: PUSH
14242: LD_EXP 14
14246: PUSH
14247: LD_EXP 15
14251: PUSH
14252: LD_EXP 23
14256: PUSH
14257: LD_EXP 24
14261: PUSH
14262: LD_EXP 25
14266: PUSH
14267: LD_EXP 26
14271: PUSH
14272: LD_EXP 27
14276: PUSH
14277: LD_EXP 28
14281: PUSH
14282: LD_EXP 29
14286: PUSH
14287: LD_EXP 30
14291: PUSH
14292: LD_EXP 31
14296: PUSH
14297: LD_EXP 32
14301: PUSH
14302: LD_EXP 33
14306: PUSH
14307: LD_EXP 34
14311: PUSH
14312: LD_EXP 35
14316: PUSH
14317: LD_EXP 36
14321: PUSH
14322: LD_EXP 37
14326: PUSH
14327: LD_EXP 16
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: DIFF
14352: ST_TO_ADDR
// if tmp then
14353: LD_VAR 0 2
14357: IFFALSE 14371
// SaveCharacters ( tmp , 12p_others ) ;
14359: LD_VAR 0 2
14363: PPUSH
14364: LD_STRING 12p_others
14366: PPUSH
14367: CALL_OW 38
// YouWin ;
14371: CALL_OW 103
// end ; end_of_file
14375: PPOPN 5
14377: END
// on SailEvent ( event ) do var tmp ;
14378: LD_INT 0
14380: PPUSH
// begin if event = 1 then
14381: LD_VAR 0 1
14385: PUSH
14386: LD_INT 1
14388: EQUAL
14389: IFFALSE 14462
// begin if not mobile_patrol then
14391: LD_EXP 17
14395: NOT
14396: IFFALSE 14400
// exit ;
14398: GO 14462
// tmp := mobile_patrol [ mobile_patrol ] ;
14400: LD_ADDR_VAR 0 2
14404: PUSH
14405: LD_EXP 17
14409: PUSH
14410: LD_EXP 17
14414: ARRAY
14415: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14416: LD_ADDR_EXP 17
14420: PUSH
14421: LD_EXP 17
14425: PPUSH
14426: LD_EXP 17
14430: PPUSH
14431: CALL_OW 3
14435: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14436: LD_VAR 0 2
14440: PPUSH
14441: LD_EXP 18
14445: PUSH
14446: LD_EXP 17
14450: PUSH
14451: LD_INT 1
14453: PLUS
14454: ARRAY
14455: PPUSH
14456: EMPTY
14457: PPUSH
14458: CALL 6646 0 3
// end ; end ;
14462: PPOPN 2
14464: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14465: LD_VAR 0 1
14469: PUSH
14470: LD_EXP 14
14474: EQUAL
14475: IFFALSE 14484
// YouLost ( JMM ) ;
14477: LD_STRING JMM
14479: PPUSH
14480: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 255
14493: PUSH
14494: LD_INT 7
14496: EQUAL
14497: PUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 264
14507: PUSH
14508: LD_INT 12
14510: EQUAL
14511: AND
14512: IFFALSE 14521
// YouLost ( Artifact ) ;
14514: LD_STRING Artifact
14516: PPUSH
14517: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 255
14530: PUSH
14531: LD_INT 7
14533: EQUAL
14534: PUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 247
14544: PUSH
14545: LD_INT 1
14547: EQUAL
14548: AND
14549: PUSH
14550: LD_VAR 0 1
14554: PUSH
14555: LD_EXP 15
14559: EQUAL
14560: OR
14561: IFFALSE 14577
// team_kill_counter := team_kill_counter + 1 ;
14563: LD_ADDR_EXP 9
14567: PUSH
14568: LD_EXP 9
14572: PUSH
14573: LD_INT 1
14575: PLUS
14576: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 255
14586: PUSH
14587: LD_INT 1
14589: EQUAL
14590: PUSH
14591: LD_VAR 0 1
14595: PPUSH
14596: CALL_OW 247
14600: PUSH
14601: LD_INT 1
14603: EQUAL
14604: AND
14605: IFFALSE 14621
// friends_kill_counter := friends_kill_counter + 1 ;
14607: LD_ADDR_EXP 8
14611: PUSH
14612: LD_EXP 8
14616: PUSH
14617: LD_INT 1
14619: PLUS
14620: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14621: LD_VAR 0 1
14625: PPUSH
14626: CALL_OW 255
14630: PUSH
14631: LD_INT 1
14633: NONEQUAL
14634: IFFALSE 14638
// exit ;
14636: GO 14715
// if GetControl ( un ) = control_remote then
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 263
14647: PUSH
14648: LD_INT 2
14650: EQUAL
14651: IFFALSE 14669
// defenders := defenders diff un ;
14653: LD_ADDR_EXP 20
14657: PUSH
14658: LD_EXP 20
14662: PUSH
14663: LD_VAR 0 1
14667: DIFF
14668: ST_TO_ADDR
// if not un in defenders then
14669: LD_VAR 0 1
14673: PUSH
14674: LD_EXP 20
14678: IN
14679: NOT
14680: IFFALSE 14715
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14682: LD_ADDR_EXP 21
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 250
14696: PUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: CALL_OW 251
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: ST_TO_ADDR
// Defend ;
14711: CALL 2772 0 0
// end ; end ;
14715: PPOPN 1
14717: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 255
14727: PUSH
14728: LD_INT 1
14730: NONEQUAL
14731: IFFALSE 14735
// exit ;
14733: GO 14759
// if GetControl ( veh ) = control_remote then
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 263
14744: PUSH
14745: LD_INT 2
14747: EQUAL
14748: IFFALSE 14759
// Connect ( veh ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL 37423 0 1
// end ;
14759: PPOPN 2
14761: END
// on UnitGoesToRed ( un ) do var i , veh ;
14762: LD_INT 0
14764: PPUSH
14765: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 255
14775: PUSH
14776: LD_INT 1
14778: EQUAL
14779: PUSH
14780: LD_VAR 0 1
14784: PPUSH
14785: CALL_OW 263
14789: PUSH
14790: LD_INT 2
14792: EQUAL
14793: AND
14794: IFFALSE 14805
// ComUnlink ( un ) ;
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 136
// if un = ambar0 then
14805: LD_VAR 0 1
14809: PUSH
14810: LD_INT 18
14812: EQUAL
14813: IFFALSE 14923
// begin uc_side := 1 ;
14815: LD_ADDR_OWVAR 20
14819: PUSH
14820: LD_INT 1
14822: ST_TO_ADDR
// uc_nation := 1 ;
14823: LD_ADDR_OWVAR 21
14827: PUSH
14828: LD_INT 1
14830: ST_TO_ADDR
// for i = 1 to 6 do
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: DOUBLE
14837: LD_INT 1
14839: DEC
14840: ST_TO_ADDR
14841: LD_INT 6
14843: PUSH
14844: FOR_TO
14845: IFFALSE 14921
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14847: LD_INT 3
14849: PPUSH
14850: LD_INT 1
14852: PPUSH
14853: LD_INT 3
14855: PPUSH
14856: LD_INT 4
14858: PPUSH
14859: LD_INT 100
14861: PPUSH
14862: CALL 34368 0 5
// veh := CreateVehicle ;
14866: LD_ADDR_VAR 0 3
14870: PUSH
14871: CALL_OW 45
14875: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14876: LD_VAR 0 3
14880: PPUSH
14881: LD_INT 1
14883: PPUSH
14884: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14888: LD_VAR 0 3
14892: PPUSH
14893: LD_INT 25
14895: PPUSH
14896: LD_INT 0
14898: PPUSH
14899: CALL_OW 49
// defenders := defenders ^ veh ;
14903: LD_ADDR_EXP 20
14907: PUSH
14908: LD_EXP 20
14912: PUSH
14913: LD_VAR 0 3
14917: ADD
14918: ST_TO_ADDR
// end ;
14919: GO 14844
14921: POP
14922: POP
// end ; end ;
14923: PPOPN 3
14925: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14926: LD_VAR 0 2
14930: PUSH
14931: LD_EXP 16
14935: EQUAL
14936: IFFALSE 14947
// RemoveUnit ( Powell ) ;
14938: LD_EXP 16
14942: PPUSH
14943: CALL_OW 64
// end ;
14947: PPOPN 2
14949: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL 27862 0 1
// end ; end_of_file
14959: PPOPN 1
14961: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
14962: LD_INT 0
14964: PPUSH
// ar_crane := 88 ;
14965: LD_ADDR_EXP 44
14969: PUSH
14970: LD_INT 88
14972: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14973: LD_ADDR_EXP 39
14977: PUSH
14978: LD_INT 89
14980: ST_TO_ADDR
// us_hack := 99 ;
14981: LD_ADDR_EXP 40
14985: PUSH
14986: LD_INT 99
14988: ST_TO_ADDR
// us_artillery := 97 ;
14989: LD_ADDR_EXP 41
14993: PUSH
14994: LD_INT 97
14996: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14997: LD_ADDR_EXP 42
15001: PUSH
15002: LD_INT 91
15004: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15005: LD_ADDR_EXP 43
15009: PUSH
15010: LD_INT 92
15012: ST_TO_ADDR
// ru_radar := 98 ;
15013: LD_ADDR_EXP 38
15017: PUSH
15018: LD_INT 98
15020: ST_TO_ADDR
// tech_Artillery := 80 ;
15021: LD_ADDR_EXP 45
15025: PUSH
15026: LD_INT 80
15028: ST_TO_ADDR
// tech_RadMat := 81 ;
15029: LD_ADDR_EXP 46
15033: PUSH
15034: LD_INT 81
15036: ST_TO_ADDR
// tech_BasicTools := 82 ;
15037: LD_ADDR_EXP 47
15041: PUSH
15042: LD_INT 82
15044: ST_TO_ADDR
// tech_Cargo := 83 ;
15045: LD_ADDR_EXP 48
15049: PUSH
15050: LD_INT 83
15052: ST_TO_ADDR
// tech_Track := 84 ;
15053: LD_ADDR_EXP 49
15057: PUSH
15058: LD_INT 84
15060: ST_TO_ADDR
// tech_Crane := 85 ;
15061: LD_ADDR_EXP 50
15065: PUSH
15066: LD_INT 85
15068: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15069: LD_ADDR_EXP 51
15073: PUSH
15074: LD_INT 86
15076: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15077: LD_ADDR_EXP 52
15081: PUSH
15082: LD_INT 87
15084: ST_TO_ADDR
// end ;
15085: LD_VAR 0 1
15089: RET
// every 1 do
15090: GO 15092
15092: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15093: CALL 14962 0 0
15097: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15098: LD_VAR 0 2
15102: PUSH
15103: LD_INT 100
15105: EQUAL
15106: IFFALSE 16055
// begin if not StreamModeActive then
15108: LD_EXP 53
15112: NOT
15113: IFFALSE 15123
// StreamModeActive := true ;
15115: LD_ADDR_EXP 53
15119: PUSH
15120: LD_INT 1
15122: ST_TO_ADDR
// if p3 = 0 then
15123: LD_VAR 0 3
15127: PUSH
15128: LD_INT 0
15130: EQUAL
15131: IFFALSE 15137
// InitStreamMode ;
15133: CALL 16288 0 0
// if p3 = 1 then
15137: LD_VAR 0 3
15141: PUSH
15142: LD_INT 1
15144: EQUAL
15145: IFFALSE 15155
// sRocket := true ;
15147: LD_ADDR_EXP 58
15151: PUSH
15152: LD_INT 1
15154: ST_TO_ADDR
// if p3 = 2 then
15155: LD_VAR 0 3
15159: PUSH
15160: LD_INT 2
15162: EQUAL
15163: IFFALSE 15173
// sSpeed := true ;
15165: LD_ADDR_EXP 57
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// if p3 = 3 then
15173: LD_VAR 0 3
15177: PUSH
15178: LD_INT 3
15180: EQUAL
15181: IFFALSE 15191
// sEngine := true ;
15183: LD_ADDR_EXP 59
15187: PUSH
15188: LD_INT 1
15190: ST_TO_ADDR
// if p3 = 4 then
15191: LD_VAR 0 3
15195: PUSH
15196: LD_INT 4
15198: EQUAL
15199: IFFALSE 15209
// sSpec := true ;
15201: LD_ADDR_EXP 56
15205: PUSH
15206: LD_INT 1
15208: ST_TO_ADDR
// if p3 = 5 then
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 5
15216: EQUAL
15217: IFFALSE 15227
// sLevel := true ;
15219: LD_ADDR_EXP 60
15223: PUSH
15224: LD_INT 1
15226: ST_TO_ADDR
// if p3 = 6 then
15227: LD_VAR 0 3
15231: PUSH
15232: LD_INT 6
15234: EQUAL
15235: IFFALSE 15245
// sArmoury := true ;
15237: LD_ADDR_EXP 61
15241: PUSH
15242: LD_INT 1
15244: ST_TO_ADDR
// if p3 = 7 then
15245: LD_VAR 0 3
15249: PUSH
15250: LD_INT 7
15252: EQUAL
15253: IFFALSE 15263
// sRadar := true ;
15255: LD_ADDR_EXP 62
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// if p3 = 8 then
15263: LD_VAR 0 3
15267: PUSH
15268: LD_INT 8
15270: EQUAL
15271: IFFALSE 15281
// sBunker := true ;
15273: LD_ADDR_EXP 63
15277: PUSH
15278: LD_INT 1
15280: ST_TO_ADDR
// if p3 = 9 then
15281: LD_VAR 0 3
15285: PUSH
15286: LD_INT 9
15288: EQUAL
15289: IFFALSE 15299
// sHack := true ;
15291: LD_ADDR_EXP 64
15295: PUSH
15296: LD_INT 1
15298: ST_TO_ADDR
// if p3 = 10 then
15299: LD_VAR 0 3
15303: PUSH
15304: LD_INT 10
15306: EQUAL
15307: IFFALSE 15317
// sFire := true ;
15309: LD_ADDR_EXP 65
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// if p3 = 11 then
15317: LD_VAR 0 3
15321: PUSH
15322: LD_INT 11
15324: EQUAL
15325: IFFALSE 15335
// sRefresh := true ;
15327: LD_ADDR_EXP 66
15331: PUSH
15332: LD_INT 1
15334: ST_TO_ADDR
// if p3 = 12 then
15335: LD_VAR 0 3
15339: PUSH
15340: LD_INT 12
15342: EQUAL
15343: IFFALSE 15353
// sExp := true ;
15345: LD_ADDR_EXP 67
15349: PUSH
15350: LD_INT 1
15352: ST_TO_ADDR
// if p3 = 13 then
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 13
15360: EQUAL
15361: IFFALSE 15371
// sDepot := true ;
15363: LD_ADDR_EXP 68
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// if p3 = 14 then
15371: LD_VAR 0 3
15375: PUSH
15376: LD_INT 14
15378: EQUAL
15379: IFFALSE 15389
// sFlag := true ;
15381: LD_ADDR_EXP 69
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// if p3 = 15 then
15389: LD_VAR 0 3
15393: PUSH
15394: LD_INT 15
15396: EQUAL
15397: IFFALSE 15407
// sKamikadze := true ;
15399: LD_ADDR_EXP 77
15403: PUSH
15404: LD_INT 1
15406: ST_TO_ADDR
// if p3 = 16 then
15407: LD_VAR 0 3
15411: PUSH
15412: LD_INT 16
15414: EQUAL
15415: IFFALSE 15425
// sTroll := true ;
15417: LD_ADDR_EXP 78
15421: PUSH
15422: LD_INT 1
15424: ST_TO_ADDR
// if p3 = 17 then
15425: LD_VAR 0 3
15429: PUSH
15430: LD_INT 17
15432: EQUAL
15433: IFFALSE 15443
// sSlow := true ;
15435: LD_ADDR_EXP 79
15439: PUSH
15440: LD_INT 1
15442: ST_TO_ADDR
// if p3 = 18 then
15443: LD_VAR 0 3
15447: PUSH
15448: LD_INT 18
15450: EQUAL
15451: IFFALSE 15461
// sLack := true ;
15453: LD_ADDR_EXP 80
15457: PUSH
15458: LD_INT 1
15460: ST_TO_ADDR
// if p3 = 19 then
15461: LD_VAR 0 3
15465: PUSH
15466: LD_INT 19
15468: EQUAL
15469: IFFALSE 15479
// sTank := true ;
15471: LD_ADDR_EXP 82
15475: PUSH
15476: LD_INT 1
15478: ST_TO_ADDR
// if p3 = 20 then
15479: LD_VAR 0 3
15483: PUSH
15484: LD_INT 20
15486: EQUAL
15487: IFFALSE 15497
// sRemote := true ;
15489: LD_ADDR_EXP 83
15493: PUSH
15494: LD_INT 1
15496: ST_TO_ADDR
// if p3 = 21 then
15497: LD_VAR 0 3
15501: PUSH
15502: LD_INT 21
15504: EQUAL
15505: IFFALSE 15515
// sPowell := true ;
15507: LD_ADDR_EXP 84
15511: PUSH
15512: LD_INT 1
15514: ST_TO_ADDR
// if p3 = 22 then
15515: LD_VAR 0 3
15519: PUSH
15520: LD_INT 22
15522: EQUAL
15523: IFFALSE 15533
// sTeleport := true ;
15525: LD_ADDR_EXP 87
15529: PUSH
15530: LD_INT 1
15532: ST_TO_ADDR
// if p3 = 23 then
15533: LD_VAR 0 3
15537: PUSH
15538: LD_INT 23
15540: EQUAL
15541: IFFALSE 15551
// sOilTower := true ;
15543: LD_ADDR_EXP 89
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// if p3 = 24 then
15551: LD_VAR 0 3
15555: PUSH
15556: LD_INT 24
15558: EQUAL
15559: IFFALSE 15569
// sShovel := true ;
15561: LD_ADDR_EXP 90
15565: PUSH
15566: LD_INT 1
15568: ST_TO_ADDR
// if p3 = 25 then
15569: LD_VAR 0 3
15573: PUSH
15574: LD_INT 25
15576: EQUAL
15577: IFFALSE 15587
// sSheik := true ;
15579: LD_ADDR_EXP 91
15583: PUSH
15584: LD_INT 1
15586: ST_TO_ADDR
// if p3 = 26 then
15587: LD_VAR 0 3
15591: PUSH
15592: LD_INT 26
15594: EQUAL
15595: IFFALSE 15605
// sEarthquake := true ;
15597: LD_ADDR_EXP 93
15601: PUSH
15602: LD_INT 1
15604: ST_TO_ADDR
// if p3 = 27 then
15605: LD_VAR 0 3
15609: PUSH
15610: LD_INT 27
15612: EQUAL
15613: IFFALSE 15623
// sAI := true ;
15615: LD_ADDR_EXP 94
15619: PUSH
15620: LD_INT 1
15622: ST_TO_ADDR
// if p3 = 28 then
15623: LD_VAR 0 3
15627: PUSH
15628: LD_INT 28
15630: EQUAL
15631: IFFALSE 15641
// sCargo := true ;
15633: LD_ADDR_EXP 97
15637: PUSH
15638: LD_INT 1
15640: ST_TO_ADDR
// if p3 = 29 then
15641: LD_VAR 0 3
15645: PUSH
15646: LD_INT 29
15648: EQUAL
15649: IFFALSE 15659
// sDLaser := true ;
15651: LD_ADDR_EXP 98
15655: PUSH
15656: LD_INT 1
15658: ST_TO_ADDR
// if p3 = 30 then
15659: LD_VAR 0 3
15663: PUSH
15664: LD_INT 30
15666: EQUAL
15667: IFFALSE 15677
// sExchange := true ;
15669: LD_ADDR_EXP 99
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// if p3 = 31 then
15677: LD_VAR 0 3
15681: PUSH
15682: LD_INT 31
15684: EQUAL
15685: IFFALSE 15695
// sFac := true ;
15687: LD_ADDR_EXP 100
15691: PUSH
15692: LD_INT 1
15694: ST_TO_ADDR
// if p3 = 32 then
15695: LD_VAR 0 3
15699: PUSH
15700: LD_INT 32
15702: EQUAL
15703: IFFALSE 15713
// sPower := true ;
15705: LD_ADDR_EXP 101
15709: PUSH
15710: LD_INT 1
15712: ST_TO_ADDR
// if p3 = 33 then
15713: LD_VAR 0 3
15717: PUSH
15718: LD_INT 33
15720: EQUAL
15721: IFFALSE 15731
// sRandom := true ;
15723: LD_ADDR_EXP 102
15727: PUSH
15728: LD_INT 1
15730: ST_TO_ADDR
// if p3 = 34 then
15731: LD_VAR 0 3
15735: PUSH
15736: LD_INT 34
15738: EQUAL
15739: IFFALSE 15749
// sShield := true ;
15741: LD_ADDR_EXP 103
15745: PUSH
15746: LD_INT 1
15748: ST_TO_ADDR
// if p3 = 35 then
15749: LD_VAR 0 3
15753: PUSH
15754: LD_INT 35
15756: EQUAL
15757: IFFALSE 15767
// sTime := true ;
15759: LD_ADDR_EXP 104
15763: PUSH
15764: LD_INT 1
15766: ST_TO_ADDR
// if p3 = 36 then
15767: LD_VAR 0 3
15771: PUSH
15772: LD_INT 36
15774: EQUAL
15775: IFFALSE 15785
// sTools := true ;
15777: LD_ADDR_EXP 105
15781: PUSH
15782: LD_INT 1
15784: ST_TO_ADDR
// if p3 = 101 then
15785: LD_VAR 0 3
15789: PUSH
15790: LD_INT 101
15792: EQUAL
15793: IFFALSE 15803
// sSold := true ;
15795: LD_ADDR_EXP 70
15799: PUSH
15800: LD_INT 1
15802: ST_TO_ADDR
// if p3 = 102 then
15803: LD_VAR 0 3
15807: PUSH
15808: LD_INT 102
15810: EQUAL
15811: IFFALSE 15821
// sDiff := true ;
15813: LD_ADDR_EXP 71
15817: PUSH
15818: LD_INT 1
15820: ST_TO_ADDR
// if p3 = 103 then
15821: LD_VAR 0 3
15825: PUSH
15826: LD_INT 103
15828: EQUAL
15829: IFFALSE 15839
// sFog := true ;
15831: LD_ADDR_EXP 74
15835: PUSH
15836: LD_INT 1
15838: ST_TO_ADDR
// if p3 = 104 then
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 104
15846: EQUAL
15847: IFFALSE 15857
// sReset := true ;
15849: LD_ADDR_EXP 75
15853: PUSH
15854: LD_INT 1
15856: ST_TO_ADDR
// if p3 = 105 then
15857: LD_VAR 0 3
15861: PUSH
15862: LD_INT 105
15864: EQUAL
15865: IFFALSE 15875
// sSun := true ;
15867: LD_ADDR_EXP 76
15871: PUSH
15872: LD_INT 1
15874: ST_TO_ADDR
// if p3 = 106 then
15875: LD_VAR 0 3
15879: PUSH
15880: LD_INT 106
15882: EQUAL
15883: IFFALSE 15893
// sTiger := true ;
15885: LD_ADDR_EXP 72
15889: PUSH
15890: LD_INT 1
15892: ST_TO_ADDR
// if p3 = 107 then
15893: LD_VAR 0 3
15897: PUSH
15898: LD_INT 107
15900: EQUAL
15901: IFFALSE 15911
// sBomb := true ;
15903: LD_ADDR_EXP 73
15907: PUSH
15908: LD_INT 1
15910: ST_TO_ADDR
// if p3 = 108 then
15911: LD_VAR 0 3
15915: PUSH
15916: LD_INT 108
15918: EQUAL
15919: IFFALSE 15929
// sWound := true ;
15921: LD_ADDR_EXP 81
15925: PUSH
15926: LD_INT 1
15928: ST_TO_ADDR
// if p3 = 109 then
15929: LD_VAR 0 3
15933: PUSH
15934: LD_INT 109
15936: EQUAL
15937: IFFALSE 15947
// sBetray := true ;
15939: LD_ADDR_EXP 85
15943: PUSH
15944: LD_INT 1
15946: ST_TO_ADDR
// if p3 = 110 then
15947: LD_VAR 0 3
15951: PUSH
15952: LD_INT 110
15954: EQUAL
15955: IFFALSE 15965
// sContamin := true ;
15957: LD_ADDR_EXP 86
15961: PUSH
15962: LD_INT 1
15964: ST_TO_ADDR
// if p3 = 111 then
15965: LD_VAR 0 3
15969: PUSH
15970: LD_INT 111
15972: EQUAL
15973: IFFALSE 15983
// sOil := true ;
15975: LD_ADDR_EXP 88
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// if p3 = 112 then
15983: LD_VAR 0 3
15987: PUSH
15988: LD_INT 112
15990: EQUAL
15991: IFFALSE 16001
// sStu := true ;
15993: LD_ADDR_EXP 92
15997: PUSH
15998: LD_INT 1
16000: ST_TO_ADDR
// if p3 = 113 then
16001: LD_VAR 0 3
16005: PUSH
16006: LD_INT 113
16008: EQUAL
16009: IFFALSE 16019
// sBazooka := true ;
16011: LD_ADDR_EXP 95
16015: PUSH
16016: LD_INT 1
16018: ST_TO_ADDR
// if p3 = 114 then
16019: LD_VAR 0 3
16023: PUSH
16024: LD_INT 114
16026: EQUAL
16027: IFFALSE 16037
// sMortar := true ;
16029: LD_ADDR_EXP 96
16033: PUSH
16034: LD_INT 1
16036: ST_TO_ADDR
// if p3 = 115 then
16037: LD_VAR 0 3
16041: PUSH
16042: LD_INT 115
16044: EQUAL
16045: IFFALSE 16055
// sRanger := true ;
16047: LD_ADDR_EXP 106
16051: PUSH
16052: LD_INT 1
16054: ST_TO_ADDR
// end ; if p2 = 101 then
16055: LD_VAR 0 2
16059: PUSH
16060: LD_INT 101
16062: EQUAL
16063: IFFALSE 16266
// begin case p3 of 1 :
16065: LD_VAR 0 3
16069: PUSH
16070: LD_INT 1
16072: DOUBLE
16073: EQUAL
16074: IFTRUE 16078
16076: GO 16085
16078: POP
// hHackUnlimitedResources ; 2 :
16079: CALL 26360 0 0
16083: GO 16266
16085: LD_INT 2
16087: DOUBLE
16088: EQUAL
16089: IFTRUE 16093
16091: GO 16100
16093: POP
// hHackSetLevel10 ; 3 :
16094: CALL 26493 0 0
16098: GO 16266
16100: LD_INT 3
16102: DOUBLE
16103: EQUAL
16104: IFTRUE 16108
16106: GO 16115
16108: POP
// hHackSetLevel10YourUnits ; 4 :
16109: CALL 26578 0 0
16113: GO 16266
16115: LD_INT 4
16117: DOUBLE
16118: EQUAL
16119: IFTRUE 16123
16121: GO 16145
16123: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
16124: LD_VAR 0 4
16128: PPUSH
16129: LD_VAR 0 5
16133: PPUSH
16134: LD_VAR 0 6
16138: PPUSH
16139: CALL 26668 0 3
16143: GO 16266
16145: LD_INT 5
16147: DOUBLE
16148: EQUAL
16149: IFTRUE 16153
16151: GO 16160
16153: POP
// hHackSpawnVehicle ; 6 :
16154: CALL 26729 0 0
16158: GO 16266
16160: LD_INT 6
16162: DOUBLE
16163: EQUAL
16164: IFTRUE 16168
16166: GO 16175
16168: POP
// hHackInvincible ; 7 :
16169: CALL 27275 0 0
16173: GO 16266
16175: LD_INT 7
16177: DOUBLE
16178: EQUAL
16179: IFTRUE 16183
16181: GO 16190
16183: POP
// hHackInvisible ; 8 :
16184: CALL 27386 0 0
16188: GO 16266
16190: LD_INT 8
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16205
16198: POP
// hHackChangeYourSide ; 9 :
16199: CALL 27443 0 0
16203: GO 16266
16205: LD_INT 9
16207: DOUBLE
16208: EQUAL
16209: IFTRUE 16213
16211: GO 16220
16213: POP
// hHackChangeUnitSide ; 10 :
16214: CALL 27485 0 0
16218: GO 16266
16220: LD_INT 10
16222: DOUBLE
16223: EQUAL
16224: IFTRUE 16228
16226: GO 16235
16228: POP
// hHackFog ; 11 :
16229: CALL 27586 0 0
16233: GO 16266
16235: LD_INT 11
16237: DOUBLE
16238: EQUAL
16239: IFTRUE 16243
16241: GO 16250
16243: POP
// hHackApeman ; 12 :
16244: CALL 27601 0 0
16248: GO 16266
16250: LD_INT 12
16252: DOUBLE
16253: EQUAL
16254: IFTRUE 16258
16256: GO 16265
16258: POP
// hHackBoom ; end ;
16259: CALL 27686 0 0
16263: GO 16266
16265: POP
// end ; end ;
16266: PPOPN 6
16268: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16269: GO 16271
16271: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16272: LD_STRING initStreamRollete();
16274: PPUSH
16275: CALL_OW 559
// InitStreamMode ;
16279: CALL 16288 0 0
// DefineStreamItems ( ) ;
16283: CALL 16728 0 0
// end ;
16287: END
// function InitStreamMode ; begin
16288: LD_INT 0
16290: PPUSH
// streamModeActive := false ;
16291: LD_ADDR_EXP 53
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
// normalCounter := 36 ;
16299: LD_ADDR_EXP 54
16303: PUSH
16304: LD_INT 36
16306: ST_TO_ADDR
// hardcoreCounter := 16 ;
16307: LD_ADDR_EXP 55
16311: PUSH
16312: LD_INT 16
16314: ST_TO_ADDR
// sRocket := false ;
16315: LD_ADDR_EXP 58
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// sSpeed := false ;
16323: LD_ADDR_EXP 57
16327: PUSH
16328: LD_INT 0
16330: ST_TO_ADDR
// sEngine := false ;
16331: LD_ADDR_EXP 59
16335: PUSH
16336: LD_INT 0
16338: ST_TO_ADDR
// sSpec := false ;
16339: LD_ADDR_EXP 56
16343: PUSH
16344: LD_INT 0
16346: ST_TO_ADDR
// sLevel := false ;
16347: LD_ADDR_EXP 60
16351: PUSH
16352: LD_INT 0
16354: ST_TO_ADDR
// sArmoury := false ;
16355: LD_ADDR_EXP 61
16359: PUSH
16360: LD_INT 0
16362: ST_TO_ADDR
// sRadar := false ;
16363: LD_ADDR_EXP 62
16367: PUSH
16368: LD_INT 0
16370: ST_TO_ADDR
// sBunker := false ;
16371: LD_ADDR_EXP 63
16375: PUSH
16376: LD_INT 0
16378: ST_TO_ADDR
// sHack := false ;
16379: LD_ADDR_EXP 64
16383: PUSH
16384: LD_INT 0
16386: ST_TO_ADDR
// sFire := false ;
16387: LD_ADDR_EXP 65
16391: PUSH
16392: LD_INT 0
16394: ST_TO_ADDR
// sRefresh := false ;
16395: LD_ADDR_EXP 66
16399: PUSH
16400: LD_INT 0
16402: ST_TO_ADDR
// sExp := false ;
16403: LD_ADDR_EXP 67
16407: PUSH
16408: LD_INT 0
16410: ST_TO_ADDR
// sDepot := false ;
16411: LD_ADDR_EXP 68
16415: PUSH
16416: LD_INT 0
16418: ST_TO_ADDR
// sFlag := false ;
16419: LD_ADDR_EXP 69
16423: PUSH
16424: LD_INT 0
16426: ST_TO_ADDR
// sKamikadze := false ;
16427: LD_ADDR_EXP 77
16431: PUSH
16432: LD_INT 0
16434: ST_TO_ADDR
// sTroll := false ;
16435: LD_ADDR_EXP 78
16439: PUSH
16440: LD_INT 0
16442: ST_TO_ADDR
// sSlow := false ;
16443: LD_ADDR_EXP 79
16447: PUSH
16448: LD_INT 0
16450: ST_TO_ADDR
// sLack := false ;
16451: LD_ADDR_EXP 80
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// sTank := false ;
16459: LD_ADDR_EXP 82
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// sRemote := false ;
16467: LD_ADDR_EXP 83
16471: PUSH
16472: LD_INT 0
16474: ST_TO_ADDR
// sPowell := false ;
16475: LD_ADDR_EXP 84
16479: PUSH
16480: LD_INT 0
16482: ST_TO_ADDR
// sTeleport := false ;
16483: LD_ADDR_EXP 87
16487: PUSH
16488: LD_INT 0
16490: ST_TO_ADDR
// sOilTower := false ;
16491: LD_ADDR_EXP 89
16495: PUSH
16496: LD_INT 0
16498: ST_TO_ADDR
// sShovel := false ;
16499: LD_ADDR_EXP 90
16503: PUSH
16504: LD_INT 0
16506: ST_TO_ADDR
// sSheik := false ;
16507: LD_ADDR_EXP 91
16511: PUSH
16512: LD_INT 0
16514: ST_TO_ADDR
// sEarthquake := false ;
16515: LD_ADDR_EXP 93
16519: PUSH
16520: LD_INT 0
16522: ST_TO_ADDR
// sAI := false ;
16523: LD_ADDR_EXP 94
16527: PUSH
16528: LD_INT 0
16530: ST_TO_ADDR
// sCargo := false ;
16531: LD_ADDR_EXP 97
16535: PUSH
16536: LD_INT 0
16538: ST_TO_ADDR
// sDLaser := false ;
16539: LD_ADDR_EXP 98
16543: PUSH
16544: LD_INT 0
16546: ST_TO_ADDR
// sExchange := false ;
16547: LD_ADDR_EXP 99
16551: PUSH
16552: LD_INT 0
16554: ST_TO_ADDR
// sFac := false ;
16555: LD_ADDR_EXP 100
16559: PUSH
16560: LD_INT 0
16562: ST_TO_ADDR
// sPower := false ;
16563: LD_ADDR_EXP 101
16567: PUSH
16568: LD_INT 0
16570: ST_TO_ADDR
// sRandom := false ;
16571: LD_ADDR_EXP 102
16575: PUSH
16576: LD_INT 0
16578: ST_TO_ADDR
// sShield := false ;
16579: LD_ADDR_EXP 103
16583: PUSH
16584: LD_INT 0
16586: ST_TO_ADDR
// sTime := false ;
16587: LD_ADDR_EXP 104
16591: PUSH
16592: LD_INT 0
16594: ST_TO_ADDR
// sTools := false ;
16595: LD_ADDR_EXP 105
16599: PUSH
16600: LD_INT 0
16602: ST_TO_ADDR
// sSold := false ;
16603: LD_ADDR_EXP 70
16607: PUSH
16608: LD_INT 0
16610: ST_TO_ADDR
// sDiff := false ;
16611: LD_ADDR_EXP 71
16615: PUSH
16616: LD_INT 0
16618: ST_TO_ADDR
// sFog := false ;
16619: LD_ADDR_EXP 74
16623: PUSH
16624: LD_INT 0
16626: ST_TO_ADDR
// sReset := false ;
16627: LD_ADDR_EXP 75
16631: PUSH
16632: LD_INT 0
16634: ST_TO_ADDR
// sSun := false ;
16635: LD_ADDR_EXP 76
16639: PUSH
16640: LD_INT 0
16642: ST_TO_ADDR
// sTiger := false ;
16643: LD_ADDR_EXP 72
16647: PUSH
16648: LD_INT 0
16650: ST_TO_ADDR
// sBomb := false ;
16651: LD_ADDR_EXP 73
16655: PUSH
16656: LD_INT 0
16658: ST_TO_ADDR
// sWound := false ;
16659: LD_ADDR_EXP 81
16663: PUSH
16664: LD_INT 0
16666: ST_TO_ADDR
// sBetray := false ;
16667: LD_ADDR_EXP 85
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
// sContamin := false ;
16675: LD_ADDR_EXP 86
16679: PUSH
16680: LD_INT 0
16682: ST_TO_ADDR
// sOil := false ;
16683: LD_ADDR_EXP 88
16687: PUSH
16688: LD_INT 0
16690: ST_TO_ADDR
// sStu := false ;
16691: LD_ADDR_EXP 92
16695: PUSH
16696: LD_INT 0
16698: ST_TO_ADDR
// sBazooka := false ;
16699: LD_ADDR_EXP 95
16703: PUSH
16704: LD_INT 0
16706: ST_TO_ADDR
// sMortar := false ;
16707: LD_ADDR_EXP 96
16711: PUSH
16712: LD_INT 0
16714: ST_TO_ADDR
// sRanger := false ;
16715: LD_ADDR_EXP 106
16719: PUSH
16720: LD_INT 0
16722: ST_TO_ADDR
// end ;
16723: LD_VAR 0 1
16727: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16728: LD_INT 0
16730: PPUSH
16731: PPUSH
16732: PPUSH
16733: PPUSH
16734: PPUSH
// result := [ ] ;
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: EMPTY
16741: ST_TO_ADDR
// if campaign_id = 1 then
16742: LD_OWVAR 69
16746: PUSH
16747: LD_INT 1
16749: EQUAL
16750: IFFALSE 19688
// begin case mission_number of 1 :
16752: LD_OWVAR 70
16756: PUSH
16757: LD_INT 1
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16829
16765: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16766: LD_ADDR_VAR 0 1
16770: PUSH
16771: LD_INT 2
16773: PUSH
16774: LD_INT 4
16776: PUSH
16777: LD_INT 11
16779: PUSH
16780: LD_INT 12
16782: PUSH
16783: LD_INT 15
16785: PUSH
16786: LD_INT 16
16788: PUSH
16789: LD_INT 22
16791: PUSH
16792: LD_INT 23
16794: PUSH
16795: LD_INT 26
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 101
16811: PUSH
16812: LD_INT 102
16814: PUSH
16815: LD_INT 106
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: ST_TO_ADDR
16827: GO 19686
16829: LD_INT 2
16831: DOUBLE
16832: EQUAL
16833: IFTRUE 16837
16835: GO 16909
16837: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16838: LD_ADDR_VAR 0 1
16842: PUSH
16843: LD_INT 2
16845: PUSH
16846: LD_INT 4
16848: PUSH
16849: LD_INT 11
16851: PUSH
16852: LD_INT 12
16854: PUSH
16855: LD_INT 15
16857: PUSH
16858: LD_INT 16
16860: PUSH
16861: LD_INT 22
16863: PUSH
16864: LD_INT 23
16866: PUSH
16867: LD_INT 26
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 101
16883: PUSH
16884: LD_INT 102
16886: PUSH
16887: LD_INT 105
16889: PUSH
16890: LD_INT 106
16892: PUSH
16893: LD_INT 108
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: ST_TO_ADDR
16907: GO 19686
16909: LD_INT 3
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 16993
16917: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16918: LD_ADDR_VAR 0 1
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: LD_INT 4
16928: PUSH
16929: LD_INT 5
16931: PUSH
16932: LD_INT 11
16934: PUSH
16935: LD_INT 12
16937: PUSH
16938: LD_INT 15
16940: PUSH
16941: LD_INT 16
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_INT 26
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 101
16967: PUSH
16968: LD_INT 102
16970: PUSH
16971: LD_INT 105
16973: PUSH
16974: LD_INT 106
16976: PUSH
16977: LD_INT 108
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: ST_TO_ADDR
16991: GO 19686
16993: LD_INT 4
16995: DOUBLE
16996: EQUAL
16997: IFTRUE 17001
16999: GO 17085
17001: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17002: LD_ADDR_VAR 0 1
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: LD_INT 4
17012: PUSH
17013: LD_INT 5
17015: PUSH
17016: LD_INT 8
17018: PUSH
17019: LD_INT 11
17021: PUSH
17022: LD_INT 12
17024: PUSH
17025: LD_INT 15
17027: PUSH
17028: LD_INT 16
17030: PUSH
17031: LD_INT 22
17033: PUSH
17034: LD_INT 23
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: LD_INT 36
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 101
17059: PUSH
17060: LD_INT 102
17062: PUSH
17063: LD_INT 105
17065: PUSH
17066: LD_INT 106
17068: PUSH
17069: LD_INT 108
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: ST_TO_ADDR
17083: GO 19686
17085: LD_INT 5
17087: DOUBLE
17088: EQUAL
17089: IFTRUE 17093
17091: GO 17193
17093: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17094: LD_ADDR_VAR 0 1
17098: PUSH
17099: LD_INT 2
17101: PUSH
17102: LD_INT 4
17104: PUSH
17105: LD_INT 5
17107: PUSH
17108: LD_INT 6
17110: PUSH
17111: LD_INT 8
17113: PUSH
17114: LD_INT 11
17116: PUSH
17117: LD_INT 12
17119: PUSH
17120: LD_INT 15
17122: PUSH
17123: LD_INT 16
17125: PUSH
17126: LD_INT 22
17128: PUSH
17129: LD_INT 23
17131: PUSH
17132: LD_INT 25
17134: PUSH
17135: LD_INT 26
17137: PUSH
17138: LD_INT 36
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 101
17159: PUSH
17160: LD_INT 102
17162: PUSH
17163: LD_INT 105
17165: PUSH
17166: LD_INT 106
17168: PUSH
17169: LD_INT 108
17171: PUSH
17172: LD_INT 109
17174: PUSH
17175: LD_INT 112
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: ST_TO_ADDR
17191: GO 19686
17193: LD_INT 6
17195: DOUBLE
17196: EQUAL
17197: IFTRUE 17201
17199: GO 17321
17201: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17202: LD_ADDR_VAR 0 1
17206: PUSH
17207: LD_INT 2
17209: PUSH
17210: LD_INT 4
17212: PUSH
17213: LD_INT 5
17215: PUSH
17216: LD_INT 6
17218: PUSH
17219: LD_INT 8
17221: PUSH
17222: LD_INT 11
17224: PUSH
17225: LD_INT 12
17227: PUSH
17228: LD_INT 15
17230: PUSH
17231: LD_INT 16
17233: PUSH
17234: LD_INT 20
17236: PUSH
17237: LD_INT 21
17239: PUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 23
17245: PUSH
17246: LD_INT 25
17248: PUSH
17249: LD_INT 26
17251: PUSH
17252: LD_INT 30
17254: PUSH
17255: LD_INT 31
17257: PUSH
17258: LD_INT 32
17260: PUSH
17261: LD_INT 36
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 101
17287: PUSH
17288: LD_INT 102
17290: PUSH
17291: LD_INT 105
17293: PUSH
17294: LD_INT 106
17296: PUSH
17297: LD_INT 108
17299: PUSH
17300: LD_INT 109
17302: PUSH
17303: LD_INT 112
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: ST_TO_ADDR
17319: GO 19686
17321: LD_INT 7
17323: DOUBLE
17324: EQUAL
17325: IFTRUE 17329
17327: GO 17429
17329: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17330: LD_ADDR_VAR 0 1
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: LD_INT 4
17340: PUSH
17341: LD_INT 5
17343: PUSH
17344: LD_INT 7
17346: PUSH
17347: LD_INT 11
17349: PUSH
17350: LD_INT 12
17352: PUSH
17353: LD_INT 15
17355: PUSH
17356: LD_INT 16
17358: PUSH
17359: LD_INT 20
17361: PUSH
17362: LD_INT 21
17364: PUSH
17365: LD_INT 22
17367: PUSH
17368: LD_INT 23
17370: PUSH
17371: LD_INT 25
17373: PUSH
17374: LD_INT 26
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 101
17395: PUSH
17396: LD_INT 102
17398: PUSH
17399: LD_INT 103
17401: PUSH
17402: LD_INT 105
17404: PUSH
17405: LD_INT 106
17407: PUSH
17408: LD_INT 108
17410: PUSH
17411: LD_INT 112
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: ST_TO_ADDR
17427: GO 19686
17429: LD_INT 8
17431: DOUBLE
17432: EQUAL
17433: IFTRUE 17437
17435: GO 17565
17437: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17438: LD_ADDR_VAR 0 1
17442: PUSH
17443: LD_INT 2
17445: PUSH
17446: LD_INT 4
17448: PUSH
17449: LD_INT 5
17451: PUSH
17452: LD_INT 6
17454: PUSH
17455: LD_INT 7
17457: PUSH
17458: LD_INT 8
17460: PUSH
17461: LD_INT 11
17463: PUSH
17464: LD_INT 12
17466: PUSH
17467: LD_INT 15
17469: PUSH
17470: LD_INT 16
17472: PUSH
17473: LD_INT 20
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 22
17481: PUSH
17482: LD_INT 23
17484: PUSH
17485: LD_INT 25
17487: PUSH
17488: LD_INT 26
17490: PUSH
17491: LD_INT 30
17493: PUSH
17494: LD_INT 31
17496: PUSH
17497: LD_INT 32
17499: PUSH
17500: LD_INT 36
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 101
17527: PUSH
17528: LD_INT 102
17530: PUSH
17531: LD_INT 103
17533: PUSH
17534: LD_INT 105
17536: PUSH
17537: LD_INT 106
17539: PUSH
17540: LD_INT 108
17542: PUSH
17543: LD_INT 109
17545: PUSH
17546: LD_INT 112
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: ST_TO_ADDR
17563: GO 19686
17565: LD_INT 9
17567: DOUBLE
17568: EQUAL
17569: IFTRUE 17573
17571: GO 17709
17573: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17574: LD_ADDR_VAR 0 1
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: LD_INT 4
17584: PUSH
17585: LD_INT 5
17587: PUSH
17588: LD_INT 6
17590: PUSH
17591: LD_INT 7
17593: PUSH
17594: LD_INT 8
17596: PUSH
17597: LD_INT 11
17599: PUSH
17600: LD_INT 12
17602: PUSH
17603: LD_INT 15
17605: PUSH
17606: LD_INT 16
17608: PUSH
17609: LD_INT 20
17611: PUSH
17612: LD_INT 21
17614: PUSH
17615: LD_INT 22
17617: PUSH
17618: LD_INT 23
17620: PUSH
17621: LD_INT 25
17623: PUSH
17624: LD_INT 26
17626: PUSH
17627: LD_INT 28
17629: PUSH
17630: LD_INT 30
17632: PUSH
17633: LD_INT 31
17635: PUSH
17636: LD_INT 32
17638: PUSH
17639: LD_INT 36
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 101
17667: PUSH
17668: LD_INT 102
17670: PUSH
17671: LD_INT 103
17673: PUSH
17674: LD_INT 105
17676: PUSH
17677: LD_INT 106
17679: PUSH
17680: LD_INT 108
17682: PUSH
17683: LD_INT 109
17685: PUSH
17686: LD_INT 112
17688: PUSH
17689: LD_INT 114
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: ST_TO_ADDR
17707: GO 19686
17709: LD_INT 10
17711: DOUBLE
17712: EQUAL
17713: IFTRUE 17717
17715: GO 17901
17717: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17718: LD_ADDR_VAR 0 1
17722: PUSH
17723: LD_INT 2
17725: PUSH
17726: LD_INT 4
17728: PUSH
17729: LD_INT 5
17731: PUSH
17732: LD_INT 6
17734: PUSH
17735: LD_INT 7
17737: PUSH
17738: LD_INT 8
17740: PUSH
17741: LD_INT 9
17743: PUSH
17744: LD_INT 10
17746: PUSH
17747: LD_INT 11
17749: PUSH
17750: LD_INT 12
17752: PUSH
17753: LD_INT 13
17755: PUSH
17756: LD_INT 14
17758: PUSH
17759: LD_INT 15
17761: PUSH
17762: LD_INT 16
17764: PUSH
17765: LD_INT 17
17767: PUSH
17768: LD_INT 18
17770: PUSH
17771: LD_INT 19
17773: PUSH
17774: LD_INT 20
17776: PUSH
17777: LD_INT 21
17779: PUSH
17780: LD_INT 22
17782: PUSH
17783: LD_INT 23
17785: PUSH
17786: LD_INT 24
17788: PUSH
17789: LD_INT 25
17791: PUSH
17792: LD_INT 26
17794: PUSH
17795: LD_INT 28
17797: PUSH
17798: LD_INT 30
17800: PUSH
17801: LD_INT 31
17803: PUSH
17804: LD_INT 32
17806: PUSH
17807: LD_INT 36
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 101
17843: PUSH
17844: LD_INT 102
17846: PUSH
17847: LD_INT 103
17849: PUSH
17850: LD_INT 104
17852: PUSH
17853: LD_INT 105
17855: PUSH
17856: LD_INT 106
17858: PUSH
17859: LD_INT 107
17861: PUSH
17862: LD_INT 108
17864: PUSH
17865: LD_INT 109
17867: PUSH
17868: LD_INT 110
17870: PUSH
17871: LD_INT 111
17873: PUSH
17874: LD_INT 112
17876: PUSH
17877: LD_INT 114
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: ST_TO_ADDR
17899: GO 19686
17901: LD_INT 11
17903: DOUBLE
17904: EQUAL
17905: IFTRUE 17909
17907: GO 18101
17909: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17910: LD_ADDR_VAR 0 1
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: LD_INT 3
17920: PUSH
17921: LD_INT 4
17923: PUSH
17924: LD_INT 5
17926: PUSH
17927: LD_INT 6
17929: PUSH
17930: LD_INT 7
17932: PUSH
17933: LD_INT 8
17935: PUSH
17936: LD_INT 9
17938: PUSH
17939: LD_INT 10
17941: PUSH
17942: LD_INT 11
17944: PUSH
17945: LD_INT 12
17947: PUSH
17948: LD_INT 13
17950: PUSH
17951: LD_INT 14
17953: PUSH
17954: LD_INT 15
17956: PUSH
17957: LD_INT 16
17959: PUSH
17960: LD_INT 17
17962: PUSH
17963: LD_INT 18
17965: PUSH
17966: LD_INT 19
17968: PUSH
17969: LD_INT 20
17971: PUSH
17972: LD_INT 21
17974: PUSH
17975: LD_INT 22
17977: PUSH
17978: LD_INT 23
17980: PUSH
17981: LD_INT 24
17983: PUSH
17984: LD_INT 25
17986: PUSH
17987: LD_INT 26
17989: PUSH
17990: LD_INT 28
17992: PUSH
17993: LD_INT 30
17995: PUSH
17996: LD_INT 31
17998: PUSH
17999: LD_INT 32
18001: PUSH
18002: LD_INT 34
18004: PUSH
18005: LD_INT 36
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 101
18043: PUSH
18044: LD_INT 102
18046: PUSH
18047: LD_INT 103
18049: PUSH
18050: LD_INT 104
18052: PUSH
18053: LD_INT 105
18055: PUSH
18056: LD_INT 106
18058: PUSH
18059: LD_INT 107
18061: PUSH
18062: LD_INT 108
18064: PUSH
18065: LD_INT 109
18067: PUSH
18068: LD_INT 110
18070: PUSH
18071: LD_INT 111
18073: PUSH
18074: LD_INT 112
18076: PUSH
18077: LD_INT 114
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: ST_TO_ADDR
18099: GO 19686
18101: LD_INT 12
18103: DOUBLE
18104: EQUAL
18105: IFTRUE 18109
18107: GO 18317
18109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18110: LD_ADDR_VAR 0 1
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: LD_INT 3
18123: PUSH
18124: LD_INT 4
18126: PUSH
18127: LD_INT 5
18129: PUSH
18130: LD_INT 6
18132: PUSH
18133: LD_INT 7
18135: PUSH
18136: LD_INT 8
18138: PUSH
18139: LD_INT 9
18141: PUSH
18142: LD_INT 10
18144: PUSH
18145: LD_INT 11
18147: PUSH
18148: LD_INT 12
18150: PUSH
18151: LD_INT 13
18153: PUSH
18154: LD_INT 14
18156: PUSH
18157: LD_INT 15
18159: PUSH
18160: LD_INT 16
18162: PUSH
18163: LD_INT 17
18165: PUSH
18166: LD_INT 18
18168: PUSH
18169: LD_INT 19
18171: PUSH
18172: LD_INT 20
18174: PUSH
18175: LD_INT 21
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 23
18183: PUSH
18184: LD_INT 24
18186: PUSH
18187: LD_INT 25
18189: PUSH
18190: LD_INT 26
18192: PUSH
18193: LD_INT 27
18195: PUSH
18196: LD_INT 28
18198: PUSH
18199: LD_INT 30
18201: PUSH
18202: LD_INT 31
18204: PUSH
18205: LD_INT 32
18207: PUSH
18208: LD_INT 33
18210: PUSH
18211: LD_INT 34
18213: PUSH
18214: LD_INT 36
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 101
18255: PUSH
18256: LD_INT 102
18258: PUSH
18259: LD_INT 103
18261: PUSH
18262: LD_INT 104
18264: PUSH
18265: LD_INT 105
18267: PUSH
18268: LD_INT 106
18270: PUSH
18271: LD_INT 107
18273: PUSH
18274: LD_INT 108
18276: PUSH
18277: LD_INT 109
18279: PUSH
18280: LD_INT 110
18282: PUSH
18283: LD_INT 111
18285: PUSH
18286: LD_INT 112
18288: PUSH
18289: LD_INT 113
18291: PUSH
18292: LD_INT 114
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: ST_TO_ADDR
18315: GO 19686
18317: LD_INT 13
18319: DOUBLE
18320: EQUAL
18321: IFTRUE 18325
18323: GO 18521
18325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 3
18339: PUSH
18340: LD_INT 4
18342: PUSH
18343: LD_INT 5
18345: PUSH
18346: LD_INT 8
18348: PUSH
18349: LD_INT 9
18351: PUSH
18352: LD_INT 10
18354: PUSH
18355: LD_INT 11
18357: PUSH
18358: LD_INT 12
18360: PUSH
18361: LD_INT 14
18363: PUSH
18364: LD_INT 15
18366: PUSH
18367: LD_INT 16
18369: PUSH
18370: LD_INT 17
18372: PUSH
18373: LD_INT 18
18375: PUSH
18376: LD_INT 19
18378: PUSH
18379: LD_INT 20
18381: PUSH
18382: LD_INT 21
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 23
18390: PUSH
18391: LD_INT 24
18393: PUSH
18394: LD_INT 25
18396: PUSH
18397: LD_INT 26
18399: PUSH
18400: LD_INT 27
18402: PUSH
18403: LD_INT 28
18405: PUSH
18406: LD_INT 30
18408: PUSH
18409: LD_INT 31
18411: PUSH
18412: LD_INT 32
18414: PUSH
18415: LD_INT 33
18417: PUSH
18418: LD_INT 34
18420: PUSH
18421: LD_INT 36
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 101
18459: PUSH
18460: LD_INT 102
18462: PUSH
18463: LD_INT 103
18465: PUSH
18466: LD_INT 104
18468: PUSH
18469: LD_INT 105
18471: PUSH
18472: LD_INT 106
18474: PUSH
18475: LD_INT 107
18477: PUSH
18478: LD_INT 108
18480: PUSH
18481: LD_INT 109
18483: PUSH
18484: LD_INT 110
18486: PUSH
18487: LD_INT 111
18489: PUSH
18490: LD_INT 112
18492: PUSH
18493: LD_INT 113
18495: PUSH
18496: LD_INT 114
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: ST_TO_ADDR
18519: GO 19686
18521: LD_INT 14
18523: DOUBLE
18524: EQUAL
18525: IFTRUE 18529
18527: GO 18741
18529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18530: LD_ADDR_VAR 0 1
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: LD_INT 3
18543: PUSH
18544: LD_INT 4
18546: PUSH
18547: LD_INT 5
18549: PUSH
18550: LD_INT 6
18552: PUSH
18553: LD_INT 7
18555: PUSH
18556: LD_INT 8
18558: PUSH
18559: LD_INT 9
18561: PUSH
18562: LD_INT 10
18564: PUSH
18565: LD_INT 11
18567: PUSH
18568: LD_INT 12
18570: PUSH
18571: LD_INT 13
18573: PUSH
18574: LD_INT 14
18576: PUSH
18577: LD_INT 15
18579: PUSH
18580: LD_INT 16
18582: PUSH
18583: LD_INT 17
18585: PUSH
18586: LD_INT 18
18588: PUSH
18589: LD_INT 19
18591: PUSH
18592: LD_INT 20
18594: PUSH
18595: LD_INT 21
18597: PUSH
18598: LD_INT 22
18600: PUSH
18601: LD_INT 23
18603: PUSH
18604: LD_INT 24
18606: PUSH
18607: LD_INT 25
18609: PUSH
18610: LD_INT 26
18612: PUSH
18613: LD_INT 27
18615: PUSH
18616: LD_INT 28
18618: PUSH
18619: LD_INT 29
18621: PUSH
18622: LD_INT 30
18624: PUSH
18625: LD_INT 31
18627: PUSH
18628: LD_INT 32
18630: PUSH
18631: LD_INT 33
18633: PUSH
18634: LD_INT 34
18636: PUSH
18637: LD_INT 36
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 101
18679: PUSH
18680: LD_INT 102
18682: PUSH
18683: LD_INT 103
18685: PUSH
18686: LD_INT 104
18688: PUSH
18689: LD_INT 105
18691: PUSH
18692: LD_INT 106
18694: PUSH
18695: LD_INT 107
18697: PUSH
18698: LD_INT 108
18700: PUSH
18701: LD_INT 109
18703: PUSH
18704: LD_INT 110
18706: PUSH
18707: LD_INT 111
18709: PUSH
18710: LD_INT 112
18712: PUSH
18713: LD_INT 113
18715: PUSH
18716: LD_INT 114
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: ST_TO_ADDR
18739: GO 19686
18741: LD_INT 15
18743: DOUBLE
18744: EQUAL
18745: IFTRUE 18749
18747: GO 18961
18749: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18750: LD_ADDR_VAR 0 1
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: LD_INT 4
18766: PUSH
18767: LD_INT 5
18769: PUSH
18770: LD_INT 6
18772: PUSH
18773: LD_INT 7
18775: PUSH
18776: LD_INT 8
18778: PUSH
18779: LD_INT 9
18781: PUSH
18782: LD_INT 10
18784: PUSH
18785: LD_INT 11
18787: PUSH
18788: LD_INT 12
18790: PUSH
18791: LD_INT 13
18793: PUSH
18794: LD_INT 14
18796: PUSH
18797: LD_INT 15
18799: PUSH
18800: LD_INT 16
18802: PUSH
18803: LD_INT 17
18805: PUSH
18806: LD_INT 18
18808: PUSH
18809: LD_INT 19
18811: PUSH
18812: LD_INT 20
18814: PUSH
18815: LD_INT 21
18817: PUSH
18818: LD_INT 22
18820: PUSH
18821: LD_INT 23
18823: PUSH
18824: LD_INT 24
18826: PUSH
18827: LD_INT 25
18829: PUSH
18830: LD_INT 26
18832: PUSH
18833: LD_INT 27
18835: PUSH
18836: LD_INT 28
18838: PUSH
18839: LD_INT 29
18841: PUSH
18842: LD_INT 30
18844: PUSH
18845: LD_INT 31
18847: PUSH
18848: LD_INT 32
18850: PUSH
18851: LD_INT 33
18853: PUSH
18854: LD_INT 34
18856: PUSH
18857: LD_INT 36
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 101
18899: PUSH
18900: LD_INT 102
18902: PUSH
18903: LD_INT 103
18905: PUSH
18906: LD_INT 104
18908: PUSH
18909: LD_INT 105
18911: PUSH
18912: LD_INT 106
18914: PUSH
18915: LD_INT 107
18917: PUSH
18918: LD_INT 108
18920: PUSH
18921: LD_INT 109
18923: PUSH
18924: LD_INT 110
18926: PUSH
18927: LD_INT 111
18929: PUSH
18930: LD_INT 112
18932: PUSH
18933: LD_INT 113
18935: PUSH
18936: LD_INT 114
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: ST_TO_ADDR
18959: GO 19686
18961: LD_INT 16
18963: DOUBLE
18964: EQUAL
18965: IFTRUE 18969
18967: GO 19093
18969: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18970: LD_ADDR_VAR 0 1
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: LD_INT 4
18980: PUSH
18981: LD_INT 5
18983: PUSH
18984: LD_INT 7
18986: PUSH
18987: LD_INT 11
18989: PUSH
18990: LD_INT 12
18992: PUSH
18993: LD_INT 15
18995: PUSH
18996: LD_INT 16
18998: PUSH
18999: LD_INT 20
19001: PUSH
19002: LD_INT 21
19004: PUSH
19005: LD_INT 22
19007: PUSH
19008: LD_INT 23
19010: PUSH
19011: LD_INT 25
19013: PUSH
19014: LD_INT 26
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: LD_INT 31
19022: PUSH
19023: LD_INT 32
19025: PUSH
19026: LD_INT 33
19028: PUSH
19029: LD_INT 34
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 101
19055: PUSH
19056: LD_INT 102
19058: PUSH
19059: LD_INT 103
19061: PUSH
19062: LD_INT 106
19064: PUSH
19065: LD_INT 108
19067: PUSH
19068: LD_INT 112
19070: PUSH
19071: LD_INT 113
19073: PUSH
19074: LD_INT 114
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: ST_TO_ADDR
19091: GO 19686
19093: LD_INT 17
19095: DOUBLE
19096: EQUAL
19097: IFTRUE 19101
19099: GO 19313
19101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19102: LD_ADDR_VAR 0 1
19106: PUSH
19107: LD_INT 1
19109: PUSH
19110: LD_INT 2
19112: PUSH
19113: LD_INT 3
19115: PUSH
19116: LD_INT 4
19118: PUSH
19119: LD_INT 5
19121: PUSH
19122: LD_INT 6
19124: PUSH
19125: LD_INT 7
19127: PUSH
19128: LD_INT 8
19130: PUSH
19131: LD_INT 9
19133: PUSH
19134: LD_INT 10
19136: PUSH
19137: LD_INT 11
19139: PUSH
19140: LD_INT 12
19142: PUSH
19143: LD_INT 13
19145: PUSH
19146: LD_INT 14
19148: PUSH
19149: LD_INT 15
19151: PUSH
19152: LD_INT 16
19154: PUSH
19155: LD_INT 17
19157: PUSH
19158: LD_INT 18
19160: PUSH
19161: LD_INT 19
19163: PUSH
19164: LD_INT 20
19166: PUSH
19167: LD_INT 21
19169: PUSH
19170: LD_INT 22
19172: PUSH
19173: LD_INT 23
19175: PUSH
19176: LD_INT 24
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 26
19184: PUSH
19185: LD_INT 27
19187: PUSH
19188: LD_INT 28
19190: PUSH
19191: LD_INT 29
19193: PUSH
19194: LD_INT 30
19196: PUSH
19197: LD_INT 31
19199: PUSH
19200: LD_INT 32
19202: PUSH
19203: LD_INT 33
19205: PUSH
19206: LD_INT 34
19208: PUSH
19209: LD_INT 36
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 101
19251: PUSH
19252: LD_INT 102
19254: PUSH
19255: LD_INT 103
19257: PUSH
19258: LD_INT 104
19260: PUSH
19261: LD_INT 105
19263: PUSH
19264: LD_INT 106
19266: PUSH
19267: LD_INT 107
19269: PUSH
19270: LD_INT 108
19272: PUSH
19273: LD_INT 109
19275: PUSH
19276: LD_INT 110
19278: PUSH
19279: LD_INT 111
19281: PUSH
19282: LD_INT 112
19284: PUSH
19285: LD_INT 113
19287: PUSH
19288: LD_INT 114
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: ST_TO_ADDR
19311: GO 19686
19313: LD_INT 18
19315: DOUBLE
19316: EQUAL
19317: IFTRUE 19321
19319: GO 19457
19321: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19322: LD_ADDR_VAR 0 1
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 4
19332: PUSH
19333: LD_INT 5
19335: PUSH
19336: LD_INT 7
19338: PUSH
19339: LD_INT 11
19341: PUSH
19342: LD_INT 12
19344: PUSH
19345: LD_INT 15
19347: PUSH
19348: LD_INT 16
19350: PUSH
19351: LD_INT 20
19353: PUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 22
19359: PUSH
19360: LD_INT 23
19362: PUSH
19363: LD_INT 25
19365: PUSH
19366: LD_INT 26
19368: PUSH
19369: LD_INT 30
19371: PUSH
19372: LD_INT 31
19374: PUSH
19375: LD_INT 32
19377: PUSH
19378: LD_INT 33
19380: PUSH
19381: LD_INT 34
19383: PUSH
19384: LD_INT 35
19386: PUSH
19387: LD_INT 36
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 101
19415: PUSH
19416: LD_INT 102
19418: PUSH
19419: LD_INT 103
19421: PUSH
19422: LD_INT 106
19424: PUSH
19425: LD_INT 108
19427: PUSH
19428: LD_INT 112
19430: PUSH
19431: LD_INT 113
19433: PUSH
19434: LD_INT 114
19436: PUSH
19437: LD_INT 115
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: ST_TO_ADDR
19455: GO 19686
19457: LD_INT 19
19459: DOUBLE
19460: EQUAL
19461: IFTRUE 19465
19463: GO 19685
19465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19466: LD_ADDR_VAR 0 1
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: LD_INT 3
19479: PUSH
19480: LD_INT 4
19482: PUSH
19483: LD_INT 5
19485: PUSH
19486: LD_INT 6
19488: PUSH
19489: LD_INT 7
19491: PUSH
19492: LD_INT 8
19494: PUSH
19495: LD_INT 9
19497: PUSH
19498: LD_INT 10
19500: PUSH
19501: LD_INT 11
19503: PUSH
19504: LD_INT 12
19506: PUSH
19507: LD_INT 13
19509: PUSH
19510: LD_INT 14
19512: PUSH
19513: LD_INT 15
19515: PUSH
19516: LD_INT 16
19518: PUSH
19519: LD_INT 17
19521: PUSH
19522: LD_INT 18
19524: PUSH
19525: LD_INT 19
19527: PUSH
19528: LD_INT 20
19530: PUSH
19531: LD_INT 21
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_INT 23
19539: PUSH
19540: LD_INT 24
19542: PUSH
19543: LD_INT 25
19545: PUSH
19546: LD_INT 26
19548: PUSH
19549: LD_INT 27
19551: PUSH
19552: LD_INT 28
19554: PUSH
19555: LD_INT 29
19557: PUSH
19558: LD_INT 30
19560: PUSH
19561: LD_INT 31
19563: PUSH
19564: LD_INT 32
19566: PUSH
19567: LD_INT 33
19569: PUSH
19570: LD_INT 34
19572: PUSH
19573: LD_INT 35
19575: PUSH
19576: LD_INT 36
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 101
19619: PUSH
19620: LD_INT 102
19622: PUSH
19623: LD_INT 103
19625: PUSH
19626: LD_INT 104
19628: PUSH
19629: LD_INT 105
19631: PUSH
19632: LD_INT 106
19634: PUSH
19635: LD_INT 107
19637: PUSH
19638: LD_INT 108
19640: PUSH
19641: LD_INT 109
19643: PUSH
19644: LD_INT 110
19646: PUSH
19647: LD_INT 111
19649: PUSH
19650: LD_INT 112
19652: PUSH
19653: LD_INT 113
19655: PUSH
19656: LD_INT 114
19658: PUSH
19659: LD_INT 115
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: ST_TO_ADDR
19683: GO 19686
19685: POP
// end else
19686: GO 19905
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19688: LD_ADDR_VAR 0 1
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: LD_INT 3
19701: PUSH
19702: LD_INT 4
19704: PUSH
19705: LD_INT 5
19707: PUSH
19708: LD_INT 6
19710: PUSH
19711: LD_INT 7
19713: PUSH
19714: LD_INT 8
19716: PUSH
19717: LD_INT 9
19719: PUSH
19720: LD_INT 10
19722: PUSH
19723: LD_INT 11
19725: PUSH
19726: LD_INT 12
19728: PUSH
19729: LD_INT 13
19731: PUSH
19732: LD_INT 14
19734: PUSH
19735: LD_INT 15
19737: PUSH
19738: LD_INT 16
19740: PUSH
19741: LD_INT 17
19743: PUSH
19744: LD_INT 18
19746: PUSH
19747: LD_INT 19
19749: PUSH
19750: LD_INT 20
19752: PUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 22
19758: PUSH
19759: LD_INT 23
19761: PUSH
19762: LD_INT 24
19764: PUSH
19765: LD_INT 25
19767: PUSH
19768: LD_INT 26
19770: PUSH
19771: LD_INT 27
19773: PUSH
19774: LD_INT 28
19776: PUSH
19777: LD_INT 29
19779: PUSH
19780: LD_INT 30
19782: PUSH
19783: LD_INT 31
19785: PUSH
19786: LD_INT 32
19788: PUSH
19789: LD_INT 33
19791: PUSH
19792: LD_INT 34
19794: PUSH
19795: LD_INT 35
19797: PUSH
19798: LD_INT 36
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 101
19841: PUSH
19842: LD_INT 102
19844: PUSH
19845: LD_INT 103
19847: PUSH
19848: LD_INT 104
19850: PUSH
19851: LD_INT 105
19853: PUSH
19854: LD_INT 106
19856: PUSH
19857: LD_INT 107
19859: PUSH
19860: LD_INT 108
19862: PUSH
19863: LD_INT 109
19865: PUSH
19866: LD_INT 110
19868: PUSH
19869: LD_INT 111
19871: PUSH
19872: LD_INT 112
19874: PUSH
19875: LD_INT 113
19877: PUSH
19878: LD_INT 114
19880: PUSH
19881: LD_INT 115
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: ST_TO_ADDR
// if result then
19905: LD_VAR 0 1
19909: IFFALSE 20198
// begin normal :=  ;
19911: LD_ADDR_VAR 0 3
19915: PUSH
19916: LD_STRING 
19918: ST_TO_ADDR
// hardcore :=  ;
19919: LD_ADDR_VAR 0 4
19923: PUSH
19924: LD_STRING 
19926: ST_TO_ADDR
// for i = 1 to normalCounter do
19927: LD_ADDR_VAR 0 5
19931: PUSH
19932: DOUBLE
19933: LD_INT 1
19935: DEC
19936: ST_TO_ADDR
19937: LD_EXP 54
19941: PUSH
19942: FOR_TO
19943: IFFALSE 20044
// begin tmp := 0 ;
19945: LD_ADDR_VAR 0 2
19949: PUSH
19950: LD_STRING 0
19952: ST_TO_ADDR
// if result [ 1 ] then
19953: LD_VAR 0 1
19957: PUSH
19958: LD_INT 1
19960: ARRAY
19961: IFFALSE 20026
// if result [ 1 ] [ 1 ] = i then
19963: LD_VAR 0 1
19967: PUSH
19968: LD_INT 1
19970: ARRAY
19971: PUSH
19972: LD_INT 1
19974: ARRAY
19975: PUSH
19976: LD_VAR 0 5
19980: EQUAL
19981: IFFALSE 20026
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19983: LD_ADDR_VAR 0 1
19987: PUSH
19988: LD_VAR 0 1
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: LD_VAR 0 1
20000: PUSH
20001: LD_INT 1
20003: ARRAY
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 3
20012: PPUSH
20013: CALL_OW 1
20017: ST_TO_ADDR
// tmp := 1 ;
20018: LD_ADDR_VAR 0 2
20022: PUSH
20023: LD_STRING 1
20025: ST_TO_ADDR
// end ; normal := normal & tmp ;
20026: LD_ADDR_VAR 0 3
20030: PUSH
20031: LD_VAR 0 3
20035: PUSH
20036: LD_VAR 0 2
20040: STR
20041: ST_TO_ADDR
// end ;
20042: GO 19942
20044: POP
20045: POP
// for i = 1 to hardcoreCounter do
20046: LD_ADDR_VAR 0 5
20050: PUSH
20051: DOUBLE
20052: LD_INT 1
20054: DEC
20055: ST_TO_ADDR
20056: LD_EXP 55
20060: PUSH
20061: FOR_TO
20062: IFFALSE 20167
// begin tmp := 0 ;
20064: LD_ADDR_VAR 0 2
20068: PUSH
20069: LD_STRING 0
20071: ST_TO_ADDR
// if result [ 2 ] then
20072: LD_VAR 0 1
20076: PUSH
20077: LD_INT 2
20079: ARRAY
20080: IFFALSE 20149
// if result [ 2 ] [ 1 ] = 100 + i then
20082: LD_VAR 0 1
20086: PUSH
20087: LD_INT 2
20089: ARRAY
20090: PUSH
20091: LD_INT 1
20093: ARRAY
20094: PUSH
20095: LD_INT 100
20097: PUSH
20098: LD_VAR 0 5
20102: PLUS
20103: EQUAL
20104: IFFALSE 20149
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20106: LD_ADDR_VAR 0 1
20110: PUSH
20111: LD_VAR 0 1
20115: PPUSH
20116: LD_INT 2
20118: PPUSH
20119: LD_VAR 0 1
20123: PUSH
20124: LD_INT 2
20126: ARRAY
20127: PPUSH
20128: LD_INT 1
20130: PPUSH
20131: CALL_OW 3
20135: PPUSH
20136: CALL_OW 1
20140: ST_TO_ADDR
// tmp := 1 ;
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: LD_STRING 1
20148: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20149: LD_ADDR_VAR 0 4
20153: PUSH
20154: LD_VAR 0 4
20158: PUSH
20159: LD_VAR 0 2
20163: STR
20164: ST_TO_ADDR
// end ;
20165: GO 20061
20167: POP
20168: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20169: LD_STRING getStreamItemsFromMission("
20171: PUSH
20172: LD_VAR 0 3
20176: STR
20177: PUSH
20178: LD_STRING ","
20180: STR
20181: PUSH
20182: LD_VAR 0 4
20186: STR
20187: PUSH
20188: LD_STRING ")
20190: STR
20191: PPUSH
20192: CALL_OW 559
// end else
20196: GO 20205
// ToLua ( getStreamItemsFromMission("","") ) ;
20198: LD_STRING getStreamItemsFromMission("","")
20200: PPUSH
20201: CALL_OW 559
// end ;
20205: LD_VAR 0 1
20209: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20210: LD_EXP 53
20214: PUSH
20215: LD_EXP 58
20219: AND
20220: IFFALSE 20344
20222: GO 20224
20224: DISABLE
20225: LD_INT 0
20227: PPUSH
20228: PPUSH
// begin enable ;
20229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20230: LD_ADDR_VAR 0 2
20234: PUSH
20235: LD_INT 22
20237: PUSH
20238: LD_OWVAR 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: LD_INT 34
20252: PUSH
20253: LD_INT 7
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 34
20262: PUSH
20263: LD_INT 45
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 34
20272: PUSH
20273: LD_INT 28
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 34
20282: PUSH
20283: LD_INT 47
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: ST_TO_ADDR
// if not tmp then
20306: LD_VAR 0 2
20310: NOT
20311: IFFALSE 20315
// exit ;
20313: GO 20344
// for i in tmp do
20315: LD_ADDR_VAR 0 1
20319: PUSH
20320: LD_VAR 0 2
20324: PUSH
20325: FOR_IN
20326: IFFALSE 20342
// begin SetLives ( i , 0 ) ;
20328: LD_VAR 0 1
20332: PPUSH
20333: LD_INT 0
20335: PPUSH
20336: CALL_OW 234
// end ;
20340: GO 20325
20342: POP
20343: POP
// end ;
20344: PPOPN 2
20346: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20347: LD_EXP 53
20351: PUSH
20352: LD_EXP 59
20356: AND
20357: IFFALSE 20441
20359: GO 20361
20361: DISABLE
20362: LD_INT 0
20364: PPUSH
20365: PPUSH
// begin enable ;
20366: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20367: LD_ADDR_VAR 0 2
20371: PUSH
20372: LD_INT 22
20374: PUSH
20375: LD_OWVAR 2
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 32
20386: PUSH
20387: LD_INT 3
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PPUSH
20398: CALL_OW 69
20402: ST_TO_ADDR
// if not tmp then
20403: LD_VAR 0 2
20407: NOT
20408: IFFALSE 20412
// exit ;
20410: GO 20441
// for i in tmp do
20412: LD_ADDR_VAR 0 1
20416: PUSH
20417: LD_VAR 0 2
20421: PUSH
20422: FOR_IN
20423: IFFALSE 20439
// begin SetLives ( i , 0 ) ;
20425: LD_VAR 0 1
20429: PPUSH
20430: LD_INT 0
20432: PPUSH
20433: CALL_OW 234
// end ;
20437: GO 20422
20439: POP
20440: POP
// end ;
20441: PPOPN 2
20443: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20444: LD_EXP 53
20448: PUSH
20449: LD_EXP 56
20453: AND
20454: IFFALSE 20547
20456: GO 20458
20458: DISABLE
20459: LD_INT 0
20461: PPUSH
// begin enable ;
20462: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20463: LD_ADDR_VAR 0 1
20467: PUSH
20468: LD_INT 22
20470: PUSH
20471: LD_OWVAR 2
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 2
20482: PUSH
20483: LD_INT 25
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 25
20495: PUSH
20496: LD_INT 9
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 25
20505: PUSH
20506: LD_INT 8
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PPUSH
20523: CALL_OW 69
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20545
// begin SetClass ( i , 1 ) ;
20531: LD_VAR 0 1
20535: PPUSH
20536: LD_INT 1
20538: PPUSH
20539: CALL_OW 336
// end ;
20543: GO 20528
20545: POP
20546: POP
// end ;
20547: PPOPN 1
20549: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20550: LD_EXP 53
20554: PUSH
20555: LD_EXP 57
20559: AND
20560: PUSH
20561: LD_OWVAR 65
20565: PUSH
20566: LD_INT 7
20568: LESS
20569: AND
20570: IFFALSE 20584
20572: GO 20574
20574: DISABLE
// begin enable ;
20575: ENABLE
// game_speed := 7 ;
20576: LD_ADDR_OWVAR 65
20580: PUSH
20581: LD_INT 7
20583: ST_TO_ADDR
// end ;
20584: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20585: LD_EXP 53
20589: PUSH
20590: LD_EXP 60
20594: AND
20595: IFFALSE 20797
20597: GO 20599
20599: DISABLE
20600: LD_INT 0
20602: PPUSH
20603: PPUSH
20604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: LD_INT 81
20612: PUSH
20613: LD_OWVAR 2
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 21
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PPUSH
20636: CALL_OW 69
20640: ST_TO_ADDR
// if not tmp then
20641: LD_VAR 0 3
20645: NOT
20646: IFFALSE 20650
// exit ;
20648: GO 20797
// if tmp > 5 then
20650: LD_VAR 0 3
20654: PUSH
20655: LD_INT 5
20657: GREATER
20658: IFFALSE 20670
// k := 5 else
20660: LD_ADDR_VAR 0 2
20664: PUSH
20665: LD_INT 5
20667: ST_TO_ADDR
20668: GO 20680
// k := tmp ;
20670: LD_ADDR_VAR 0 2
20674: PUSH
20675: LD_VAR 0 3
20679: ST_TO_ADDR
// for i := 1 to k do
20680: LD_ADDR_VAR 0 1
20684: PUSH
20685: DOUBLE
20686: LD_INT 1
20688: DEC
20689: ST_TO_ADDR
20690: LD_VAR 0 2
20694: PUSH
20695: FOR_TO
20696: IFFALSE 20795
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_VAR 0 1
20707: ARRAY
20708: PPUSH
20709: LD_VAR 0 1
20713: PUSH
20714: LD_INT 4
20716: MOD
20717: PUSH
20718: LD_INT 1
20720: PLUS
20721: PPUSH
20722: CALL_OW 259
20726: PUSH
20727: LD_INT 10
20729: LESS
20730: IFFALSE 20793
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20732: LD_VAR 0 3
20736: PUSH
20737: LD_VAR 0 1
20741: ARRAY
20742: PPUSH
20743: LD_VAR 0 1
20747: PUSH
20748: LD_INT 4
20750: MOD
20751: PUSH
20752: LD_INT 1
20754: PLUS
20755: PPUSH
20756: LD_VAR 0 3
20760: PUSH
20761: LD_VAR 0 1
20765: ARRAY
20766: PPUSH
20767: LD_VAR 0 1
20771: PUSH
20772: LD_INT 4
20774: MOD
20775: PUSH
20776: LD_INT 1
20778: PLUS
20779: PPUSH
20780: CALL_OW 259
20784: PUSH
20785: LD_INT 1
20787: PLUS
20788: PPUSH
20789: CALL_OW 237
20793: GO 20695
20795: POP
20796: POP
// end ;
20797: PPOPN 3
20799: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20800: LD_EXP 53
20804: PUSH
20805: LD_EXP 61
20809: AND
20810: IFFALSE 20830
20812: GO 20814
20814: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20815: LD_INT 4
20817: PPUSH
20818: LD_OWVAR 2
20822: PPUSH
20823: LD_INT 0
20825: PPUSH
20826: CALL_OW 324
20830: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20831: LD_EXP 53
20835: PUSH
20836: LD_EXP 90
20840: AND
20841: IFFALSE 20861
20843: GO 20845
20845: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20846: LD_INT 19
20848: PPUSH
20849: LD_OWVAR 2
20853: PPUSH
20854: LD_INT 0
20856: PPUSH
20857: CALL_OW 324
20861: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20862: LD_EXP 53
20866: PUSH
20867: LD_EXP 62
20871: AND
20872: IFFALSE 20974
20874: GO 20876
20876: DISABLE
20877: LD_INT 0
20879: PPUSH
20880: PPUSH
// begin enable ;
20881: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20882: LD_ADDR_VAR 0 2
20886: PUSH
20887: LD_INT 22
20889: PUSH
20890: LD_OWVAR 2
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 34
20904: PUSH
20905: LD_INT 11
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 34
20914: PUSH
20915: LD_INT 30
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PPUSH
20931: CALL_OW 69
20935: ST_TO_ADDR
// if not tmp then
20936: LD_VAR 0 2
20940: NOT
20941: IFFALSE 20945
// exit ;
20943: GO 20974
// for i in tmp do
20945: LD_ADDR_VAR 0 1
20949: PUSH
20950: LD_VAR 0 2
20954: PUSH
20955: FOR_IN
20956: IFFALSE 20972
// begin SetLives ( i , 0 ) ;
20958: LD_VAR 0 1
20962: PPUSH
20963: LD_INT 0
20965: PPUSH
20966: CALL_OW 234
// end ;
20970: GO 20955
20972: POP
20973: POP
// end ;
20974: PPOPN 2
20976: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20977: LD_EXP 53
20981: PUSH
20982: LD_EXP 63
20986: AND
20987: IFFALSE 21007
20989: GO 20991
20991: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20992: LD_INT 32
20994: PPUSH
20995: LD_OWVAR 2
20999: PPUSH
21000: LD_INT 0
21002: PPUSH
21003: CALL_OW 324
21007: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21008: LD_EXP 53
21012: PUSH
21013: LD_EXP 64
21017: AND
21018: IFFALSE 21199
21020: GO 21022
21022: DISABLE
21023: LD_INT 0
21025: PPUSH
21026: PPUSH
21027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21028: LD_ADDR_VAR 0 2
21032: PUSH
21033: LD_INT 22
21035: PUSH
21036: LD_OWVAR 2
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 33
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 69
21063: ST_TO_ADDR
// if not tmp then
21064: LD_VAR 0 2
21068: NOT
21069: IFFALSE 21073
// exit ;
21071: GO 21199
// side := 0 ;
21073: LD_ADDR_VAR 0 3
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
// for i := 1 to 8 do
21081: LD_ADDR_VAR 0 1
21085: PUSH
21086: DOUBLE
21087: LD_INT 1
21089: DEC
21090: ST_TO_ADDR
21091: LD_INT 8
21093: PUSH
21094: FOR_TO
21095: IFFALSE 21143
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21097: LD_OWVAR 2
21101: PUSH
21102: LD_VAR 0 1
21106: NONEQUAL
21107: PUSH
21108: LD_OWVAR 2
21112: PPUSH
21113: LD_VAR 0 1
21117: PPUSH
21118: CALL_OW 81
21122: PUSH
21123: LD_INT 2
21125: EQUAL
21126: AND
21127: IFFALSE 21141
// begin side := i ;
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_VAR 0 1
21138: ST_TO_ADDR
// break ;
21139: GO 21143
// end ;
21141: GO 21094
21143: POP
21144: POP
// if not side then
21145: LD_VAR 0 3
21149: NOT
21150: IFFALSE 21154
// exit ;
21152: GO 21199
// for i := 1 to tmp do
21154: LD_ADDR_VAR 0 1
21158: PUSH
21159: DOUBLE
21160: LD_INT 1
21162: DEC
21163: ST_TO_ADDR
21164: LD_VAR 0 2
21168: PUSH
21169: FOR_TO
21170: IFFALSE 21197
// if Prob ( 60 ) then
21172: LD_INT 60
21174: PPUSH
21175: CALL_OW 13
21179: IFFALSE 21195
// SetSide ( i , side ) ;
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_VAR 0 3
21190: PPUSH
21191: CALL_OW 235
21195: GO 21169
21197: POP
21198: POP
// end ;
21199: PPOPN 3
21201: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21202: LD_EXP 53
21206: PUSH
21207: LD_EXP 66
21211: AND
21212: IFFALSE 21331
21214: GO 21216
21216: DISABLE
21217: LD_INT 0
21219: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21220: LD_ADDR_VAR 0 1
21224: PUSH
21225: LD_INT 22
21227: PUSH
21228: LD_OWVAR 2
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 21
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 3
21249: PUSH
21250: LD_INT 23
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: PPUSH
21269: CALL_OW 69
21273: PUSH
21274: FOR_IN
21275: IFFALSE 21329
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL_OW 257
21286: PUSH
21287: LD_INT 1
21289: PUSH
21290: LD_INT 2
21292: PUSH
21293: LD_INT 3
21295: PUSH
21296: LD_INT 4
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: IN
21305: IFFALSE 21327
// SetClass ( un , rand ( 1 , 4 ) ) ;
21307: LD_VAR 0 1
21311: PPUSH
21312: LD_INT 1
21314: PPUSH
21315: LD_INT 4
21317: PPUSH
21318: CALL_OW 12
21322: PPUSH
21323: CALL_OW 336
21327: GO 21274
21329: POP
21330: POP
// end ;
21331: PPOPN 1
21333: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21334: LD_EXP 53
21338: PUSH
21339: LD_EXP 65
21343: AND
21344: IFFALSE 21423
21346: GO 21348
21348: DISABLE
21349: LD_INT 0
21351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21352: LD_ADDR_VAR 0 1
21356: PUSH
21357: LD_INT 22
21359: PUSH
21360: LD_OWVAR 2
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 21
21371: PUSH
21372: LD_INT 3
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PPUSH
21383: CALL_OW 69
21387: ST_TO_ADDR
// if not tmp then
21388: LD_VAR 0 1
21392: NOT
21393: IFFALSE 21397
// exit ;
21395: GO 21423
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21397: LD_VAR 0 1
21401: PUSH
21402: LD_INT 1
21404: PPUSH
21405: LD_VAR 0 1
21409: PPUSH
21410: CALL_OW 12
21414: ARRAY
21415: PPUSH
21416: LD_INT 100
21418: PPUSH
21419: CALL_OW 234
// end ;
21423: PPOPN 1
21425: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21426: LD_EXP 53
21430: PUSH
21431: LD_EXP 67
21435: AND
21436: IFFALSE 21534
21438: GO 21440
21440: DISABLE
21441: LD_INT 0
21443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21444: LD_ADDR_VAR 0 1
21448: PUSH
21449: LD_INT 22
21451: PUSH
21452: LD_OWVAR 2
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 21
21463: PUSH
21464: LD_INT 1
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PPUSH
21475: CALL_OW 69
21479: ST_TO_ADDR
// if not tmp then
21480: LD_VAR 0 1
21484: NOT
21485: IFFALSE 21489
// exit ;
21487: GO 21534
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21489: LD_VAR 0 1
21493: PUSH
21494: LD_INT 1
21496: PPUSH
21497: LD_VAR 0 1
21501: PPUSH
21502: CALL_OW 12
21506: ARRAY
21507: PPUSH
21508: LD_INT 1
21510: PPUSH
21511: LD_INT 4
21513: PPUSH
21514: CALL_OW 12
21518: PPUSH
21519: LD_INT 3000
21521: PPUSH
21522: LD_INT 9000
21524: PPUSH
21525: CALL_OW 12
21529: PPUSH
21530: CALL_OW 492
// end ;
21534: PPOPN 1
21536: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21537: LD_EXP 53
21541: PUSH
21542: LD_EXP 68
21546: AND
21547: IFFALSE 21567
21549: GO 21551
21551: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21552: LD_INT 1
21554: PPUSH
21555: LD_OWVAR 2
21559: PPUSH
21560: LD_INT 0
21562: PPUSH
21563: CALL_OW 324
21567: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21568: LD_EXP 53
21572: PUSH
21573: LD_EXP 69
21577: AND
21578: IFFALSE 21661
21580: GO 21582
21582: DISABLE
21583: LD_INT 0
21585: PPUSH
21586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21587: LD_ADDR_VAR 0 2
21591: PUSH
21592: LD_INT 22
21594: PUSH
21595: LD_OWVAR 2
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 21
21606: PUSH
21607: LD_INT 3
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PPUSH
21618: CALL_OW 69
21622: ST_TO_ADDR
// if not tmp then
21623: LD_VAR 0 2
21627: NOT
21628: IFFALSE 21632
// exit ;
21630: GO 21661
// for i in tmp do
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_VAR 0 2
21641: PUSH
21642: FOR_IN
21643: IFFALSE 21659
// SetBLevel ( i , 10 ) ;
21645: LD_VAR 0 1
21649: PPUSH
21650: LD_INT 10
21652: PPUSH
21653: CALL_OW 241
21657: GO 21642
21659: POP
21660: POP
// end ;
21661: PPOPN 2
21663: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21664: LD_EXP 53
21668: PUSH
21669: LD_EXP 70
21673: AND
21674: IFFALSE 21785
21676: GO 21678
21678: DISABLE
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
21683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21684: LD_ADDR_VAR 0 3
21688: PUSH
21689: LD_INT 22
21691: PUSH
21692: LD_OWVAR 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 25
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PPUSH
21715: CALL_OW 69
21719: ST_TO_ADDR
// if not tmp then
21720: LD_VAR 0 3
21724: NOT
21725: IFFALSE 21729
// exit ;
21727: GO 21785
// un := tmp [ rand ( 1 , tmp ) ] ;
21729: LD_ADDR_VAR 0 2
21733: PUSH
21734: LD_VAR 0 3
21738: PUSH
21739: LD_INT 1
21741: PPUSH
21742: LD_VAR 0 3
21746: PPUSH
21747: CALL_OW 12
21751: ARRAY
21752: ST_TO_ADDR
// if Crawls ( un ) then
21753: LD_VAR 0 2
21757: PPUSH
21758: CALL_OW 318
21762: IFFALSE 21773
// ComWalk ( un ) ;
21764: LD_VAR 0 2
21768: PPUSH
21769: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21773: LD_VAR 0 2
21777: PPUSH
21778: LD_INT 5
21780: PPUSH
21781: CALL_OW 336
// end ;
21785: PPOPN 3
21787: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21788: LD_EXP 53
21792: PUSH
21793: LD_EXP 71
21797: AND
21798: PUSH
21799: LD_OWVAR 67
21803: PUSH
21804: LD_INT 3
21806: LESS
21807: AND
21808: IFFALSE 21827
21810: GO 21812
21812: DISABLE
// Difficulty := Difficulty + 1 ;
21813: LD_ADDR_OWVAR 67
21817: PUSH
21818: LD_OWVAR 67
21822: PUSH
21823: LD_INT 1
21825: PLUS
21826: ST_TO_ADDR
21827: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21828: LD_EXP 53
21832: PUSH
21833: LD_EXP 72
21837: AND
21838: IFFALSE 21941
21840: GO 21842
21842: DISABLE
21843: LD_INT 0
21845: PPUSH
// begin for i := 1 to 5 do
21846: LD_ADDR_VAR 0 1
21850: PUSH
21851: DOUBLE
21852: LD_INT 1
21854: DEC
21855: ST_TO_ADDR
21856: LD_INT 5
21858: PUSH
21859: FOR_TO
21860: IFFALSE 21939
// begin uc_nation := nation_nature ;
21862: LD_ADDR_OWVAR 21
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// uc_side := 0 ;
21870: LD_ADDR_OWVAR 20
21874: PUSH
21875: LD_INT 0
21877: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21878: LD_ADDR_OWVAR 29
21882: PUSH
21883: LD_INT 12
21885: PUSH
21886: LD_INT 12
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: ST_TO_ADDR
// hc_agressivity := 20 ;
21893: LD_ADDR_OWVAR 35
21897: PUSH
21898: LD_INT 20
21900: ST_TO_ADDR
// hc_class := class_tiger ;
21901: LD_ADDR_OWVAR 28
21905: PUSH
21906: LD_INT 14
21908: ST_TO_ADDR
// hc_gallery :=  ;
21909: LD_ADDR_OWVAR 33
21913: PUSH
21914: LD_STRING 
21916: ST_TO_ADDR
// hc_name :=  ;
21917: LD_ADDR_OWVAR 26
21921: PUSH
21922: LD_STRING 
21924: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21925: CALL_OW 44
21929: PPUSH
21930: LD_INT 0
21932: PPUSH
21933: CALL_OW 51
// end ;
21937: GO 21859
21939: POP
21940: POP
// end ;
21941: PPOPN 1
21943: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21944: LD_EXP 53
21948: PUSH
21949: LD_EXP 73
21953: AND
21954: IFFALSE 21963
21956: GO 21958
21958: DISABLE
// StreamSibBomb ;
21959: CALL 21964 0 0
21963: END
// export function StreamSibBomb ; var i , x , y ; begin
21964: LD_INT 0
21966: PPUSH
21967: PPUSH
21968: PPUSH
21969: PPUSH
// result := false ;
21970: LD_ADDR_VAR 0 1
21974: PUSH
21975: LD_INT 0
21977: ST_TO_ADDR
// for i := 1 to 16 do
21978: LD_ADDR_VAR 0 2
21982: PUSH
21983: DOUBLE
21984: LD_INT 1
21986: DEC
21987: ST_TO_ADDR
21988: LD_INT 16
21990: PUSH
21991: FOR_TO
21992: IFFALSE 22191
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21994: LD_ADDR_VAR 0 3
21998: PUSH
21999: LD_INT 10
22001: PUSH
22002: LD_INT 20
22004: PUSH
22005: LD_INT 30
22007: PUSH
22008: LD_INT 40
22010: PUSH
22011: LD_INT 50
22013: PUSH
22014: LD_INT 60
22016: PUSH
22017: LD_INT 70
22019: PUSH
22020: LD_INT 80
22022: PUSH
22023: LD_INT 90
22025: PUSH
22026: LD_INT 100
22028: PUSH
22029: LD_INT 110
22031: PUSH
22032: LD_INT 120
22034: PUSH
22035: LD_INT 130
22037: PUSH
22038: LD_INT 140
22040: PUSH
22041: LD_INT 150
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: PPUSH
22064: LD_INT 15
22066: PPUSH
22067: CALL_OW 12
22071: ARRAY
22072: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22073: LD_ADDR_VAR 0 4
22077: PUSH
22078: LD_INT 10
22080: PUSH
22081: LD_INT 20
22083: PUSH
22084: LD_INT 30
22086: PUSH
22087: LD_INT 40
22089: PUSH
22090: LD_INT 50
22092: PUSH
22093: LD_INT 60
22095: PUSH
22096: LD_INT 70
22098: PUSH
22099: LD_INT 80
22101: PUSH
22102: LD_INT 90
22104: PUSH
22105: LD_INT 100
22107: PUSH
22108: LD_INT 110
22110: PUSH
22111: LD_INT 120
22113: PUSH
22114: LD_INT 130
22116: PUSH
22117: LD_INT 140
22119: PUSH
22120: LD_INT 150
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: PPUSH
22143: LD_INT 15
22145: PPUSH
22146: CALL_OW 12
22150: ARRAY
22151: ST_TO_ADDR
// if ValidHex ( x , y ) then
22152: LD_VAR 0 3
22156: PPUSH
22157: LD_VAR 0 4
22161: PPUSH
22162: CALL_OW 488
22166: IFFALSE 22189
// begin result := [ x , y ] ;
22168: LD_ADDR_VAR 0 1
22172: PUSH
22173: LD_VAR 0 3
22177: PUSH
22178: LD_VAR 0 4
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: ST_TO_ADDR
// break ;
22187: GO 22191
// end ; end ;
22189: GO 21991
22191: POP
22192: POP
// if result then
22193: LD_VAR 0 1
22197: IFFALSE 22257
// begin ToLua ( playSibBomb() ) ;
22199: LD_STRING playSibBomb()
22201: PPUSH
22202: CALL_OW 559
// wait ( 0 0$14 ) ;
22206: LD_INT 490
22208: PPUSH
22209: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22213: LD_VAR 0 1
22217: PUSH
22218: LD_INT 1
22220: ARRAY
22221: PPUSH
22222: LD_VAR 0 1
22226: PUSH
22227: LD_INT 2
22229: ARRAY
22230: PPUSH
22231: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22235: LD_VAR 0 1
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: LD_VAR 0 1
22248: PUSH
22249: LD_INT 2
22251: ARRAY
22252: PPUSH
22253: CALL_OW 429
// end ; end ;
22257: LD_VAR 0 1
22261: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22262: LD_EXP 53
22266: PUSH
22267: LD_EXP 75
22271: AND
22272: IFFALSE 22284
22274: GO 22276
22276: DISABLE
// YouLost (  ) ;
22277: LD_STRING 
22279: PPUSH
22280: CALL_OW 104
22284: END
// every 0 0$1 trigger StreamModeActive and sFog do
22285: LD_EXP 53
22289: PUSH
22290: LD_EXP 74
22294: AND
22295: IFFALSE 22309
22297: GO 22299
22299: DISABLE
// FogOff ( your_side ) ;
22300: LD_OWVAR 2
22304: PPUSH
22305: CALL_OW 344
22309: END
// every 0 0$1 trigger StreamModeActive and sSun do
22310: LD_EXP 53
22314: PUSH
22315: LD_EXP 76
22319: AND
22320: IFFALSE 22348
22322: GO 22324
22324: DISABLE
// begin solar_recharge_percent := 0 ;
22325: LD_ADDR_OWVAR 79
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22333: LD_INT 10500
22335: PPUSH
22336: CALL_OW 67
// solar_recharge_percent := 100 ;
22340: LD_ADDR_OWVAR 79
22344: PUSH
22345: LD_INT 100
22347: ST_TO_ADDR
// end ;
22348: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22349: LD_EXP 53
22353: PUSH
22354: LD_EXP 77
22358: AND
22359: IFFALSE 22598
22361: GO 22363
22363: DISABLE
22364: LD_INT 0
22366: PPUSH
22367: PPUSH
22368: PPUSH
// begin tmp := [ ] ;
22369: LD_ADDR_VAR 0 3
22373: PUSH
22374: EMPTY
22375: ST_TO_ADDR
// for i := 1 to 6 do
22376: LD_ADDR_VAR 0 1
22380: PUSH
22381: DOUBLE
22382: LD_INT 1
22384: DEC
22385: ST_TO_ADDR
22386: LD_INT 6
22388: PUSH
22389: FOR_TO
22390: IFFALSE 22495
// begin uc_nation := nation_nature ;
22392: LD_ADDR_OWVAR 21
22396: PUSH
22397: LD_INT 0
22399: ST_TO_ADDR
// uc_side := 0 ;
22400: LD_ADDR_OWVAR 20
22404: PUSH
22405: LD_INT 0
22407: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22408: LD_ADDR_OWVAR 29
22412: PUSH
22413: LD_INT 12
22415: PUSH
22416: LD_INT 12
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: ST_TO_ADDR
// hc_agressivity := 20 ;
22423: LD_ADDR_OWVAR 35
22427: PUSH
22428: LD_INT 20
22430: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22431: LD_ADDR_OWVAR 28
22435: PUSH
22436: LD_INT 17
22438: ST_TO_ADDR
// hc_gallery :=  ;
22439: LD_ADDR_OWVAR 33
22443: PUSH
22444: LD_STRING 
22446: ST_TO_ADDR
// hc_name :=  ;
22447: LD_ADDR_OWVAR 26
22451: PUSH
22452: LD_STRING 
22454: ST_TO_ADDR
// un := CreateHuman ;
22455: LD_ADDR_VAR 0 2
22459: PUSH
22460: CALL_OW 44
22464: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22465: LD_VAR 0 2
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 51
// tmp := tmp ^ un ;
22477: LD_ADDR_VAR 0 3
22481: PUSH
22482: LD_VAR 0 3
22486: PUSH
22487: LD_VAR 0 2
22491: ADD
22492: ST_TO_ADDR
// end ;
22493: GO 22389
22495: POP
22496: POP
// repeat wait ( 0 0$1 ) ;
22497: LD_INT 35
22499: PPUSH
22500: CALL_OW 67
// for un in tmp do
22504: LD_ADDR_VAR 0 2
22508: PUSH
22509: LD_VAR 0 3
22513: PUSH
22514: FOR_IN
22515: IFFALSE 22589
// begin if IsDead ( un ) then
22517: LD_VAR 0 2
22521: PPUSH
22522: CALL_OW 301
22526: IFFALSE 22546
// begin tmp := tmp diff un ;
22528: LD_ADDR_VAR 0 3
22532: PUSH
22533: LD_VAR 0 3
22537: PUSH
22538: LD_VAR 0 2
22542: DIFF
22543: ST_TO_ADDR
// continue ;
22544: GO 22514
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22546: LD_VAR 0 2
22550: PPUSH
22551: LD_INT 3
22553: PUSH
22554: LD_INT 22
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: PPUSH
22573: LD_VAR 0 2
22577: PPUSH
22578: CALL_OW 74
22582: PPUSH
22583: CALL_OW 115
// end ;
22587: GO 22514
22589: POP
22590: POP
// until not tmp ;
22591: LD_VAR 0 3
22595: NOT
22596: IFFALSE 22497
// end ;
22598: PPOPN 3
22600: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22601: LD_EXP 53
22605: PUSH
22606: LD_EXP 78
22610: AND
22611: IFFALSE 22665
22613: GO 22615
22615: DISABLE
// begin ToLua ( displayTroll(); ) ;
22616: LD_STRING displayTroll();
22618: PPUSH
22619: CALL_OW 559
// wait ( 3 3$00 ) ;
22623: LD_INT 6300
22625: PPUSH
22626: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22630: LD_STRING hideTroll();
22632: PPUSH
22633: CALL_OW 559
// wait ( 1 1$00 ) ;
22637: LD_INT 2100
22639: PPUSH
22640: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22644: LD_STRING displayTroll();
22646: PPUSH
22647: CALL_OW 559
// wait ( 1 1$00 ) ;
22651: LD_INT 2100
22653: PPUSH
22654: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22658: LD_STRING hideTroll();
22660: PPUSH
22661: CALL_OW 559
// end ;
22665: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22666: LD_EXP 53
22670: PUSH
22671: LD_EXP 79
22675: AND
22676: IFFALSE 22739
22678: GO 22680
22680: DISABLE
22681: LD_INT 0
22683: PPUSH
// begin p := 0 ;
22684: LD_ADDR_VAR 0 1
22688: PUSH
22689: LD_INT 0
22691: ST_TO_ADDR
// repeat game_speed := 1 ;
22692: LD_ADDR_OWVAR 65
22696: PUSH
22697: LD_INT 1
22699: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22700: LD_INT 35
22702: PPUSH
22703: CALL_OW 67
// p := p + 1 ;
22707: LD_ADDR_VAR 0 1
22711: PUSH
22712: LD_VAR 0 1
22716: PUSH
22717: LD_INT 1
22719: PLUS
22720: ST_TO_ADDR
// until p >= 60 ;
22721: LD_VAR 0 1
22725: PUSH
22726: LD_INT 60
22728: GREATEREQUAL
22729: IFFALSE 22692
// game_speed := 4 ;
22731: LD_ADDR_OWVAR 65
22735: PUSH
22736: LD_INT 4
22738: ST_TO_ADDR
// end ;
22739: PPOPN 1
22741: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22742: LD_EXP 53
22746: PUSH
22747: LD_EXP 80
22751: AND
22752: IFFALSE 22898
22754: GO 22756
22756: DISABLE
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22761: LD_ADDR_VAR 0 1
22765: PUSH
22766: LD_INT 22
22768: PUSH
22769: LD_OWVAR 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 2
22780: PUSH
22781: LD_INT 30
22783: PUSH
22784: LD_INT 0
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 30
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PPUSH
22810: CALL_OW 69
22814: ST_TO_ADDR
// if not depot then
22815: LD_VAR 0 1
22819: NOT
22820: IFFALSE 22824
// exit ;
22822: GO 22898
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22824: LD_ADDR_VAR 0 2
22828: PUSH
22829: LD_VAR 0 1
22833: PUSH
22834: LD_INT 1
22836: PPUSH
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 12
22846: ARRAY
22847: PPUSH
22848: CALL_OW 274
22852: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22853: LD_VAR 0 2
22857: PPUSH
22858: LD_INT 1
22860: PPUSH
22861: LD_INT 0
22863: PPUSH
22864: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_INT 2
22875: PPUSH
22876: LD_INT 0
22878: PPUSH
22879: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22883: LD_VAR 0 2
22887: PPUSH
22888: LD_INT 3
22890: PPUSH
22891: LD_INT 0
22893: PPUSH
22894: CALL_OW 277
// end ;
22898: PPOPN 2
22900: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22901: LD_EXP 53
22905: PUSH
22906: LD_EXP 81
22910: AND
22911: IFFALSE 23008
22913: GO 22915
22915: DISABLE
22916: LD_INT 0
22918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22919: LD_ADDR_VAR 0 1
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_OWVAR 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 3
22948: PUSH
22949: LD_INT 23
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: ST_TO_ADDR
// if not tmp then
22973: LD_VAR 0 1
22977: NOT
22978: IFFALSE 22982
// exit ;
22980: GO 23008
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22982: LD_VAR 0 1
22986: PUSH
22987: LD_INT 1
22989: PPUSH
22990: LD_VAR 0 1
22994: PPUSH
22995: CALL_OW 12
22999: ARRAY
23000: PPUSH
23001: LD_INT 200
23003: PPUSH
23004: CALL_OW 234
// end ;
23008: PPOPN 1
23010: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23011: LD_EXP 53
23015: PUSH
23016: LD_EXP 82
23020: AND
23021: IFFALSE 23100
23023: GO 23025
23025: DISABLE
23026: LD_INT 0
23028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23029: LD_ADDR_VAR 0 1
23033: PUSH
23034: LD_INT 22
23036: PUSH
23037: LD_OWVAR 2
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 21
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 69
23064: ST_TO_ADDR
// if not tmp then
23065: LD_VAR 0 1
23069: NOT
23070: IFFALSE 23074
// exit ;
23072: GO 23100
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23074: LD_VAR 0 1
23078: PUSH
23079: LD_INT 1
23081: PPUSH
23082: LD_VAR 0 1
23086: PPUSH
23087: CALL_OW 12
23091: ARRAY
23092: PPUSH
23093: LD_INT 60
23095: PPUSH
23096: CALL_OW 234
// end ;
23100: PPOPN 1
23102: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23103: LD_EXP 53
23107: PUSH
23108: LD_EXP 83
23112: AND
23113: IFFALSE 23212
23115: GO 23117
23117: DISABLE
23118: LD_INT 0
23120: PPUSH
23121: PPUSH
// begin enable ;
23122: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23123: LD_ADDR_VAR 0 1
23127: PUSH
23128: LD_INT 22
23130: PUSH
23131: LD_OWVAR 2
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 61
23142: PUSH
23143: EMPTY
23144: LIST
23145: PUSH
23146: LD_INT 33
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: PPUSH
23161: CALL_OW 69
23165: ST_TO_ADDR
// if not tmp then
23166: LD_VAR 0 1
23170: NOT
23171: IFFALSE 23175
// exit ;
23173: GO 23212
// for i in tmp do
23175: LD_ADDR_VAR 0 2
23179: PUSH
23180: LD_VAR 0 1
23184: PUSH
23185: FOR_IN
23186: IFFALSE 23210
// if IsControledBy ( i ) then
23188: LD_VAR 0 2
23192: PPUSH
23193: CALL_OW 312
23197: IFFALSE 23208
// ComUnlink ( i ) ;
23199: LD_VAR 0 2
23203: PPUSH
23204: CALL_OW 136
23208: GO 23185
23210: POP
23211: POP
// end ;
23212: PPOPN 2
23214: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23215: LD_EXP 53
23219: PUSH
23220: LD_EXP 84
23224: AND
23225: IFFALSE 23365
23227: GO 23229
23229: DISABLE
23230: LD_INT 0
23232: PPUSH
23233: PPUSH
// begin ToLua ( displayPowell(); ) ;
23234: LD_STRING displayPowell();
23236: PPUSH
23237: CALL_OW 559
// uc_side := 0 ;
23241: LD_ADDR_OWVAR 20
23245: PUSH
23246: LD_INT 0
23248: ST_TO_ADDR
// uc_nation := 2 ;
23249: LD_ADDR_OWVAR 21
23253: PUSH
23254: LD_INT 2
23256: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23257: LD_ADDR_OWVAR 37
23261: PUSH
23262: LD_INT 14
23264: ST_TO_ADDR
// vc_engine := engine_siberite ;
23265: LD_ADDR_OWVAR 39
23269: PUSH
23270: LD_INT 3
23272: ST_TO_ADDR
// vc_control := control_apeman ;
23273: LD_ADDR_OWVAR 38
23277: PUSH
23278: LD_INT 5
23280: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23281: LD_ADDR_OWVAR 40
23285: PUSH
23286: LD_INT 29
23288: ST_TO_ADDR
// un := CreateVehicle ;
23289: LD_ADDR_VAR 0 2
23293: PUSH
23294: CALL_OW 45
23298: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23299: LD_VAR 0 2
23303: PPUSH
23304: LD_INT 1
23306: PPUSH
23307: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23311: LD_INT 35
23313: PPUSH
23314: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23318: LD_VAR 0 2
23322: PPUSH
23323: LD_INT 22
23325: PUSH
23326: LD_OWVAR 2
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PPUSH
23335: CALL_OW 69
23339: PPUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 74
23349: PPUSH
23350: CALL_OW 115
// until IsDead ( un ) ;
23354: LD_VAR 0 2
23358: PPUSH
23359: CALL_OW 301
23363: IFFALSE 23311
// end ;
23365: PPOPN 2
23367: END
// every 0 0$1 trigger StreamModeActive and sStu do
23368: LD_EXP 53
23372: PUSH
23373: LD_EXP 92
23377: AND
23378: IFFALSE 23394
23380: GO 23382
23382: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23383: LD_STRING displayStucuk();
23385: PPUSH
23386: CALL_OW 559
// ResetFog ;
23390: CALL_OW 335
// end ;
23394: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23395: LD_EXP 53
23399: PUSH
23400: LD_EXP 85
23404: AND
23405: IFFALSE 23546
23407: GO 23409
23409: DISABLE
23410: LD_INT 0
23412: PPUSH
23413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 21
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PPUSH
23445: CALL_OW 69
23449: ST_TO_ADDR
// if not tmp then
23450: LD_VAR 0 2
23454: NOT
23455: IFFALSE 23459
// exit ;
23457: GO 23546
// un := tmp [ rand ( 1 , tmp ) ] ;
23459: LD_ADDR_VAR 0 1
23463: PUSH
23464: LD_VAR 0 2
23468: PUSH
23469: LD_INT 1
23471: PPUSH
23472: LD_VAR 0 2
23476: PPUSH
23477: CALL_OW 12
23481: ARRAY
23482: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: LD_INT 0
23490: PPUSH
23491: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23495: LD_VAR 0 1
23499: PPUSH
23500: LD_OWVAR 3
23504: PUSH
23505: LD_VAR 0 1
23509: DIFF
23510: PPUSH
23511: LD_VAR 0 1
23515: PPUSH
23516: CALL_OW 74
23520: PPUSH
23521: CALL_OW 115
// wait ( 0 0$20 ) ;
23525: LD_INT 700
23527: PPUSH
23528: CALL_OW 67
// SetSide ( un , your_side ) ;
23532: LD_VAR 0 1
23536: PPUSH
23537: LD_OWVAR 2
23541: PPUSH
23542: CALL_OW 235
// end ;
23546: PPOPN 2
23548: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23549: LD_EXP 53
23553: PUSH
23554: LD_EXP 86
23558: AND
23559: IFFALSE 23665
23561: GO 23563
23563: DISABLE
23564: LD_INT 0
23566: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23567: LD_ADDR_VAR 0 1
23571: PUSH
23572: LD_INT 22
23574: PUSH
23575: LD_OWVAR 2
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: LD_INT 30
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 30
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PPUSH
23616: CALL_OW 69
23620: ST_TO_ADDR
// if not depot then
23621: LD_VAR 0 1
23625: NOT
23626: IFFALSE 23630
// exit ;
23628: GO 23665
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23630: LD_VAR 0 1
23634: PUSH
23635: LD_INT 1
23637: ARRAY
23638: PPUSH
23639: CALL_OW 250
23643: PPUSH
23644: LD_VAR 0 1
23648: PUSH
23649: LD_INT 1
23651: ARRAY
23652: PPUSH
23653: CALL_OW 251
23657: PPUSH
23658: LD_INT 70
23660: PPUSH
23661: CALL_OW 495
// end ;
23665: PPOPN 1
23667: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23668: LD_EXP 53
23672: PUSH
23673: LD_EXP 87
23677: AND
23678: IFFALSE 23889
23680: GO 23682
23682: DISABLE
23683: LD_INT 0
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23690: LD_ADDR_VAR 0 5
23694: PUSH
23695: LD_INT 22
23697: PUSH
23698: LD_OWVAR 2
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 21
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PPUSH
23721: CALL_OW 69
23725: ST_TO_ADDR
// if not tmp then
23726: LD_VAR 0 5
23730: NOT
23731: IFFALSE 23735
// exit ;
23733: GO 23889
// for i in tmp do
23735: LD_ADDR_VAR 0 1
23739: PUSH
23740: LD_VAR 0 5
23744: PUSH
23745: FOR_IN
23746: IFFALSE 23887
// begin d := rand ( 0 , 5 ) ;
23748: LD_ADDR_VAR 0 4
23752: PUSH
23753: LD_INT 0
23755: PPUSH
23756: LD_INT 5
23758: PPUSH
23759: CALL_OW 12
23763: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23764: LD_ADDR_VAR 0 2
23768: PUSH
23769: LD_VAR 0 1
23773: PPUSH
23774: CALL_OW 250
23778: PPUSH
23779: LD_VAR 0 4
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: LD_INT 12
23789: PPUSH
23790: CALL_OW 12
23794: PPUSH
23795: CALL_OW 272
23799: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23800: LD_ADDR_VAR 0 3
23804: PUSH
23805: LD_VAR 0 1
23809: PPUSH
23810: CALL_OW 251
23814: PPUSH
23815: LD_VAR 0 4
23819: PPUSH
23820: LD_INT 3
23822: PPUSH
23823: LD_INT 12
23825: PPUSH
23826: CALL_OW 12
23830: PPUSH
23831: CALL_OW 273
23835: ST_TO_ADDR
// if ValidHex ( x , y ) then
23836: LD_VAR 0 2
23840: PPUSH
23841: LD_VAR 0 3
23845: PPUSH
23846: CALL_OW 488
23850: IFFALSE 23885
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23852: LD_VAR 0 1
23856: PPUSH
23857: LD_VAR 0 2
23861: PPUSH
23862: LD_VAR 0 3
23866: PPUSH
23867: LD_INT 3
23869: PPUSH
23870: LD_INT 6
23872: PPUSH
23873: CALL_OW 12
23877: PPUSH
23878: LD_INT 1
23880: PPUSH
23881: CALL_OW 483
// end ;
23885: GO 23745
23887: POP
23888: POP
// end ;
23889: PPOPN 5
23891: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23892: LD_EXP 53
23896: PUSH
23897: LD_EXP 88
23901: AND
23902: IFFALSE 23996
23904: GO 23906
23906: DISABLE
23907: LD_INT 0
23909: PPUSH
23910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23911: LD_ADDR_VAR 0 2
23915: PUSH
23916: LD_INT 22
23918: PUSH
23919: LD_OWVAR 2
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 32
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 21
23940: PUSH
23941: LD_INT 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: PPUSH
23953: CALL_OW 69
23957: ST_TO_ADDR
// if not tmp then
23958: LD_VAR 0 2
23962: NOT
23963: IFFALSE 23967
// exit ;
23965: GO 23996
// for i in tmp do
23967: LD_ADDR_VAR 0 1
23971: PUSH
23972: LD_VAR 0 2
23976: PUSH
23977: FOR_IN
23978: IFFALSE 23994
// SetFuel ( i , 0 ) ;
23980: LD_VAR 0 1
23984: PPUSH
23985: LD_INT 0
23987: PPUSH
23988: CALL_OW 240
23992: GO 23977
23994: POP
23995: POP
// end ;
23996: PPOPN 2
23998: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23999: LD_EXP 53
24003: PUSH
24004: LD_EXP 89
24008: AND
24009: IFFALSE 24075
24011: GO 24013
24013: DISABLE
24014: LD_INT 0
24016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24017: LD_ADDR_VAR 0 1
24021: PUSH
24022: LD_INT 22
24024: PUSH
24025: LD_OWVAR 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 30
24036: PUSH
24037: LD_INT 29
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: ST_TO_ADDR
// if not tmp then
24053: LD_VAR 0 1
24057: NOT
24058: IFFALSE 24062
// exit ;
24060: GO 24075
// DestroyUnit ( tmp [ 1 ] ) ;
24062: LD_VAR 0 1
24066: PUSH
24067: LD_INT 1
24069: ARRAY
24070: PPUSH
24071: CALL_OW 65
// end ;
24075: PPOPN 1
24077: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24078: LD_EXP 53
24082: PUSH
24083: LD_EXP 91
24087: AND
24088: IFFALSE 24217
24090: GO 24092
24092: DISABLE
24093: LD_INT 0
24095: PPUSH
// begin uc_side := 0 ;
24096: LD_ADDR_OWVAR 20
24100: PUSH
24101: LD_INT 0
24103: ST_TO_ADDR
// uc_nation := nation_arabian ;
24104: LD_ADDR_OWVAR 21
24108: PUSH
24109: LD_INT 2
24111: ST_TO_ADDR
// hc_gallery :=  ;
24112: LD_ADDR_OWVAR 33
24116: PUSH
24117: LD_STRING 
24119: ST_TO_ADDR
// hc_name :=  ;
24120: LD_ADDR_OWVAR 26
24124: PUSH
24125: LD_STRING 
24127: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24128: LD_INT 1
24130: PPUSH
24131: LD_INT 11
24133: PPUSH
24134: LD_INT 10
24136: PPUSH
24137: CALL_OW 380
// un := CreateHuman ;
24141: LD_ADDR_VAR 0 1
24145: PUSH
24146: CALL_OW 44
24150: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24151: LD_VAR 0 1
24155: PPUSH
24156: LD_INT 1
24158: PPUSH
24159: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24163: LD_INT 35
24165: PPUSH
24166: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24170: LD_VAR 0 1
24174: PPUSH
24175: LD_INT 22
24177: PUSH
24178: LD_OWVAR 2
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PPUSH
24187: CALL_OW 69
24191: PPUSH
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 74
24201: PPUSH
24202: CALL_OW 115
// until IsDead ( un ) ;
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 301
24215: IFFALSE 24163
// end ;
24217: PPOPN 1
24219: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24220: LD_EXP 53
24224: PUSH
24225: LD_EXP 93
24229: AND
24230: IFFALSE 24242
24232: GO 24234
24234: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24235: LD_STRING earthquake(getX(game), 0, 32)
24237: PPUSH
24238: CALL_OW 559
24242: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24243: LD_EXP 53
24247: PUSH
24248: LD_EXP 94
24252: AND
24253: IFFALSE 24344
24255: GO 24257
24257: DISABLE
24258: LD_INT 0
24260: PPUSH
// begin enable ;
24261: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24262: LD_ADDR_VAR 0 1
24266: PUSH
24267: LD_INT 22
24269: PUSH
24270: LD_OWVAR 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 21
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 33
24291: PUSH
24292: LD_INT 3
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: PPUSH
24304: CALL_OW 69
24308: ST_TO_ADDR
// if not tmp then
24309: LD_VAR 0 1
24313: NOT
24314: IFFALSE 24318
// exit ;
24316: GO 24344
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24318: LD_VAR 0 1
24322: PUSH
24323: LD_INT 1
24325: PPUSH
24326: LD_VAR 0 1
24330: PPUSH
24331: CALL_OW 12
24335: ARRAY
24336: PPUSH
24337: LD_INT 1
24339: PPUSH
24340: CALL_OW 234
// end ;
24344: PPOPN 1
24346: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24347: LD_EXP 53
24351: PUSH
24352: LD_EXP 95
24356: AND
24357: IFFALSE 24498
24359: GO 24361
24361: DISABLE
24362: LD_INT 0
24364: PPUSH
24365: PPUSH
24366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24367: LD_ADDR_VAR 0 3
24371: PUSH
24372: LD_INT 22
24374: PUSH
24375: LD_OWVAR 2
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 25
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PPUSH
24398: CALL_OW 69
24402: ST_TO_ADDR
// if not tmp then
24403: LD_VAR 0 3
24407: NOT
24408: IFFALSE 24412
// exit ;
24410: GO 24498
// un := tmp [ rand ( 1 , tmp ) ] ;
24412: LD_ADDR_VAR 0 2
24416: PUSH
24417: LD_VAR 0 3
24421: PUSH
24422: LD_INT 1
24424: PPUSH
24425: LD_VAR 0 3
24429: PPUSH
24430: CALL_OW 12
24434: ARRAY
24435: ST_TO_ADDR
// if Crawls ( un ) then
24436: LD_VAR 0 2
24440: PPUSH
24441: CALL_OW 318
24445: IFFALSE 24456
// ComWalk ( un ) ;
24447: LD_VAR 0 2
24451: PPUSH
24452: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24456: LD_VAR 0 2
24460: PPUSH
24461: LD_INT 9
24463: PPUSH
24464: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24468: LD_INT 28
24470: PPUSH
24471: LD_OWVAR 2
24475: PPUSH
24476: LD_INT 2
24478: PPUSH
24479: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24483: LD_INT 29
24485: PPUSH
24486: LD_OWVAR 2
24490: PPUSH
24491: LD_INT 2
24493: PPUSH
24494: CALL_OW 322
// end ;
24498: PPOPN 3
24500: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24501: LD_EXP 53
24505: PUSH
24506: LD_EXP 96
24510: AND
24511: IFFALSE 24622
24513: GO 24515
24515: DISABLE
24516: LD_INT 0
24518: PPUSH
24519: PPUSH
24520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24521: LD_ADDR_VAR 0 3
24525: PUSH
24526: LD_INT 22
24528: PUSH
24529: LD_OWVAR 2
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 25
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PPUSH
24552: CALL_OW 69
24556: ST_TO_ADDR
// if not tmp then
24557: LD_VAR 0 3
24561: NOT
24562: IFFALSE 24566
// exit ;
24564: GO 24622
// un := tmp [ rand ( 1 , tmp ) ] ;
24566: LD_ADDR_VAR 0 2
24570: PUSH
24571: LD_VAR 0 3
24575: PUSH
24576: LD_INT 1
24578: PPUSH
24579: LD_VAR 0 3
24583: PPUSH
24584: CALL_OW 12
24588: ARRAY
24589: ST_TO_ADDR
// if Crawls ( un ) then
24590: LD_VAR 0 2
24594: PPUSH
24595: CALL_OW 318
24599: IFFALSE 24610
// ComWalk ( un ) ;
24601: LD_VAR 0 2
24605: PPUSH
24606: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24610: LD_VAR 0 2
24614: PPUSH
24615: LD_INT 8
24617: PPUSH
24618: CALL_OW 336
// end ;
24622: PPOPN 3
24624: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24625: LD_EXP 53
24629: PUSH
24630: LD_EXP 97
24634: AND
24635: IFFALSE 24779
24637: GO 24639
24639: DISABLE
24640: LD_INT 0
24642: PPUSH
24643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24644: LD_ADDR_VAR 0 2
24648: PUSH
24649: LD_INT 22
24651: PUSH
24652: LD_OWVAR 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 34
24676: PUSH
24677: LD_INT 12
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 34
24686: PUSH
24687: LD_INT 51
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 34
24696: PUSH
24697: LD_INT 32
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: PPUSH
24715: CALL_OW 69
24719: ST_TO_ADDR
// if not tmp then
24720: LD_VAR 0 2
24724: NOT
24725: IFFALSE 24729
// exit ;
24727: GO 24779
// for i in tmp do
24729: LD_ADDR_VAR 0 1
24733: PUSH
24734: LD_VAR 0 2
24738: PUSH
24739: FOR_IN
24740: IFFALSE 24777
// if GetCargo ( i , mat_artifact ) = 0 then
24742: LD_VAR 0 1
24746: PPUSH
24747: LD_INT 4
24749: PPUSH
24750: CALL_OW 289
24754: PUSH
24755: LD_INT 0
24757: EQUAL
24758: IFFALSE 24775
// SetCargo ( i , mat_siberit , 100 ) ;
24760: LD_VAR 0 1
24764: PPUSH
24765: LD_INT 3
24767: PPUSH
24768: LD_INT 100
24770: PPUSH
24771: CALL_OW 290
24775: GO 24739
24777: POP
24778: POP
// end ;
24779: PPOPN 2
24781: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24782: LD_EXP 53
24786: PUSH
24787: LD_EXP 98
24791: AND
24792: IFFALSE 24975
24794: GO 24796
24796: DISABLE
24797: LD_INT 0
24799: PPUSH
24800: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24801: LD_ADDR_VAR 0 2
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_OWVAR 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PPUSH
24818: CALL_OW 69
24822: ST_TO_ADDR
// if not tmp then
24823: LD_VAR 0 2
24827: NOT
24828: IFFALSE 24832
// exit ;
24830: GO 24975
// for i := 1 to 2 do
24832: LD_ADDR_VAR 0 1
24836: PUSH
24837: DOUBLE
24838: LD_INT 1
24840: DEC
24841: ST_TO_ADDR
24842: LD_INT 2
24844: PUSH
24845: FOR_TO
24846: IFFALSE 24973
// begin uc_side := your_side ;
24848: LD_ADDR_OWVAR 20
24852: PUSH
24853: LD_OWVAR 2
24857: ST_TO_ADDR
// uc_nation := nation_american ;
24858: LD_ADDR_OWVAR 21
24862: PUSH
24863: LD_INT 1
24865: ST_TO_ADDR
// vc_chassis := us_morphling ;
24866: LD_ADDR_OWVAR 37
24870: PUSH
24871: LD_INT 5
24873: ST_TO_ADDR
// vc_engine := engine_siberite ;
24874: LD_ADDR_OWVAR 39
24878: PUSH
24879: LD_INT 3
24881: ST_TO_ADDR
// vc_control := control_computer ;
24882: LD_ADDR_OWVAR 38
24886: PUSH
24887: LD_INT 3
24889: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24890: LD_ADDR_OWVAR 40
24894: PUSH
24895: LD_INT 10
24897: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24898: LD_VAR 0 2
24902: PUSH
24903: LD_INT 1
24905: ARRAY
24906: PPUSH
24907: CALL_OW 310
24911: NOT
24912: IFFALSE 24959
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24914: CALL_OW 45
24918: PPUSH
24919: LD_VAR 0 2
24923: PUSH
24924: LD_INT 1
24926: ARRAY
24927: PPUSH
24928: CALL_OW 250
24932: PPUSH
24933: LD_VAR 0 2
24937: PUSH
24938: LD_INT 1
24940: ARRAY
24941: PPUSH
24942: CALL_OW 251
24946: PPUSH
24947: LD_INT 12
24949: PPUSH
24950: LD_INT 1
24952: PPUSH
24953: CALL_OW 50
24957: GO 24971
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24959: CALL_OW 45
24963: PPUSH
24964: LD_INT 1
24966: PPUSH
24967: CALL_OW 51
// end ;
24971: GO 24845
24973: POP
24974: POP
// end ;
24975: PPOPN 2
24977: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24978: LD_EXP 53
24982: PUSH
24983: LD_EXP 99
24987: AND
24988: IFFALSE 25210
24990: GO 24992
24992: DISABLE
24993: LD_INT 0
24995: PPUSH
24996: PPUSH
24997: PPUSH
24998: PPUSH
24999: PPUSH
25000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25001: LD_ADDR_VAR 0 6
25005: PUSH
25006: LD_INT 22
25008: PUSH
25009: LD_OWVAR 2
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 21
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 3
25030: PUSH
25031: LD_INT 23
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: PPUSH
25050: CALL_OW 69
25054: ST_TO_ADDR
// if not tmp then
25055: LD_VAR 0 6
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25210
// s1 := rand ( 1 , 4 ) ;
25064: LD_ADDR_VAR 0 2
25068: PUSH
25069: LD_INT 1
25071: PPUSH
25072: LD_INT 4
25074: PPUSH
25075: CALL_OW 12
25079: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25080: LD_ADDR_VAR 0 4
25084: PUSH
25085: LD_VAR 0 6
25089: PUSH
25090: LD_INT 1
25092: ARRAY
25093: PPUSH
25094: LD_VAR 0 2
25098: PPUSH
25099: CALL_OW 259
25103: ST_TO_ADDR
// if s1 = 1 then
25104: LD_VAR 0 2
25108: PUSH
25109: LD_INT 1
25111: EQUAL
25112: IFFALSE 25132
// s2 := rand ( 2 , 4 ) else
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_INT 2
25121: PPUSH
25122: LD_INT 4
25124: PPUSH
25125: CALL_OW 12
25129: ST_TO_ADDR
25130: GO 25140
// s2 := 1 ;
25132: LD_ADDR_VAR 0 3
25136: PUSH
25137: LD_INT 1
25139: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25140: LD_ADDR_VAR 0 5
25144: PUSH
25145: LD_VAR 0 6
25149: PUSH
25150: LD_INT 1
25152: ARRAY
25153: PPUSH
25154: LD_VAR 0 3
25158: PPUSH
25159: CALL_OW 259
25163: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25164: LD_VAR 0 6
25168: PUSH
25169: LD_INT 1
25171: ARRAY
25172: PPUSH
25173: LD_VAR 0 2
25177: PPUSH
25178: LD_VAR 0 5
25182: PPUSH
25183: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25187: LD_VAR 0 6
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: PPUSH
25196: LD_VAR 0 3
25200: PPUSH
25201: LD_VAR 0 4
25205: PPUSH
25206: CALL_OW 237
// end ;
25210: PPOPN 6
25212: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25213: LD_EXP 53
25217: PUSH
25218: LD_EXP 100
25222: AND
25223: IFFALSE 25302
25225: GO 25227
25227: DISABLE
25228: LD_INT 0
25230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25231: LD_ADDR_VAR 0 1
25235: PUSH
25236: LD_INT 22
25238: PUSH
25239: LD_OWVAR 2
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 30
25250: PUSH
25251: LD_INT 3
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PPUSH
25262: CALL_OW 69
25266: ST_TO_ADDR
// if not tmp then
25267: LD_VAR 0 1
25271: NOT
25272: IFFALSE 25276
// exit ;
25274: GO 25302
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25276: LD_VAR 0 1
25280: PUSH
25281: LD_INT 1
25283: PPUSH
25284: LD_VAR 0 1
25288: PPUSH
25289: CALL_OW 12
25293: ARRAY
25294: PPUSH
25295: LD_INT 1
25297: PPUSH
25298: CALL_OW 234
// end ;
25302: PPOPN 1
25304: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25305: LD_EXP 53
25309: PUSH
25310: LD_EXP 101
25314: AND
25315: IFFALSE 25427
25317: GO 25319
25319: DISABLE
25320: LD_INT 0
25322: PPUSH
25323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25324: LD_ADDR_VAR 0 2
25328: PUSH
25329: LD_INT 22
25331: PUSH
25332: LD_OWVAR 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: LD_INT 30
25346: PUSH
25347: LD_INT 27
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 30
25356: PUSH
25357: LD_INT 26
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 30
25366: PUSH
25367: LD_INT 28
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PPUSH
25384: CALL_OW 69
25388: ST_TO_ADDR
// if not tmp then
25389: LD_VAR 0 2
25393: NOT
25394: IFFALSE 25398
// exit ;
25396: GO 25427
// for i in tmp do
25398: LD_ADDR_VAR 0 1
25402: PUSH
25403: LD_VAR 0 2
25407: PUSH
25408: FOR_IN
25409: IFFALSE 25425
// SetLives ( i , 1 ) ;
25411: LD_VAR 0 1
25415: PPUSH
25416: LD_INT 1
25418: PPUSH
25419: CALL_OW 234
25423: GO 25408
25425: POP
25426: POP
// end ;
25427: PPOPN 2
25429: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25430: LD_EXP 53
25434: PUSH
25435: LD_EXP 102
25439: AND
25440: IFFALSE 25714
25442: GO 25444
25444: DISABLE
25445: LD_INT 0
25447: PPUSH
25448: PPUSH
25449: PPUSH
// begin i := rand ( 1 , 7 ) ;
25450: LD_ADDR_VAR 0 1
25454: PUSH
25455: LD_INT 1
25457: PPUSH
25458: LD_INT 7
25460: PPUSH
25461: CALL_OW 12
25465: ST_TO_ADDR
// case i of 1 :
25466: LD_VAR 0 1
25470: PUSH
25471: LD_INT 1
25473: DOUBLE
25474: EQUAL
25475: IFTRUE 25479
25477: GO 25489
25479: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25480: LD_STRING earthquake(getX(game), 0, 32)
25482: PPUSH
25483: CALL_OW 559
25487: GO 25714
25489: LD_INT 2
25491: DOUBLE
25492: EQUAL
25493: IFTRUE 25497
25495: GO 25511
25497: POP
// begin ToLua ( displayStucuk(); ) ;
25498: LD_STRING displayStucuk();
25500: PPUSH
25501: CALL_OW 559
// ResetFog ;
25505: CALL_OW 335
// end ; 3 :
25509: GO 25714
25511: LD_INT 3
25513: DOUBLE
25514: EQUAL
25515: IFTRUE 25519
25517: GO 25623
25519: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25520: LD_ADDR_VAR 0 2
25524: PUSH
25525: LD_INT 22
25527: PUSH
25528: LD_OWVAR 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 25
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PPUSH
25551: CALL_OW 69
25555: ST_TO_ADDR
// if not tmp then
25556: LD_VAR 0 2
25560: NOT
25561: IFFALSE 25565
// exit ;
25563: GO 25714
// un := tmp [ rand ( 1 , tmp ) ] ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_VAR 0 2
25574: PUSH
25575: LD_INT 1
25577: PPUSH
25578: LD_VAR 0 2
25582: PPUSH
25583: CALL_OW 12
25587: ARRAY
25588: ST_TO_ADDR
// if Crawls ( un ) then
25589: LD_VAR 0 3
25593: PPUSH
25594: CALL_OW 318
25598: IFFALSE 25609
// ComWalk ( un ) ;
25600: LD_VAR 0 3
25604: PPUSH
25605: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25609: LD_VAR 0 3
25613: PPUSH
25614: LD_INT 8
25616: PPUSH
25617: CALL_OW 336
// end ; 4 :
25621: GO 25714
25623: LD_INT 4
25625: DOUBLE
25626: EQUAL
25627: IFTRUE 25631
25629: GO 25692
25631: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25632: LD_ADDR_VAR 0 2
25636: PUSH
25637: LD_INT 22
25639: PUSH
25640: LD_OWVAR 2
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 30
25651: PUSH
25652: LD_INT 29
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PPUSH
25663: CALL_OW 69
25667: ST_TO_ADDR
// if not tmp then
25668: LD_VAR 0 2
25672: NOT
25673: IFFALSE 25677
// exit ;
25675: GO 25714
// DestroyUnit ( tmp [ 1 ] ) ;
25677: LD_VAR 0 2
25681: PUSH
25682: LD_INT 1
25684: ARRAY
25685: PPUSH
25686: CALL_OW 65
// end ; 5 .. 7 :
25690: GO 25714
25692: LD_INT 5
25694: DOUBLE
25695: GREATEREQUAL
25696: IFFALSE 25704
25698: LD_INT 7
25700: DOUBLE
25701: LESSEQUAL
25702: IFTRUE 25706
25704: GO 25713
25706: POP
// StreamSibBomb ; end ;
25707: CALL 21964 0 0
25711: GO 25714
25713: POP
// end ;
25714: PPOPN 3
25716: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25717: LD_EXP 53
25721: PUSH
25722: LD_EXP 103
25726: AND
25727: IFFALSE 25883
25729: GO 25731
25731: DISABLE
25732: LD_INT 0
25734: PPUSH
25735: PPUSH
25736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25737: LD_ADDR_VAR 0 2
25741: PUSH
25742: LD_INT 81
25744: PUSH
25745: LD_OWVAR 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: LD_INT 21
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 21
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PPUSH
25786: CALL_OW 69
25790: ST_TO_ADDR
// if not tmp then
25791: LD_VAR 0 2
25795: NOT
25796: IFFALSE 25800
// exit ;
25798: GO 25883
// p := 0 ;
25800: LD_ADDR_VAR 0 3
25804: PUSH
25805: LD_INT 0
25807: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25808: LD_INT 35
25810: PPUSH
25811: CALL_OW 67
// p := p + 1 ;
25815: LD_ADDR_VAR 0 3
25819: PUSH
25820: LD_VAR 0 3
25824: PUSH
25825: LD_INT 1
25827: PLUS
25828: ST_TO_ADDR
// for i in tmp do
25829: LD_ADDR_VAR 0 1
25833: PUSH
25834: LD_VAR 0 2
25838: PUSH
25839: FOR_IN
25840: IFFALSE 25871
// if GetLives ( i ) < 1000 then
25842: LD_VAR 0 1
25846: PPUSH
25847: CALL_OW 256
25851: PUSH
25852: LD_INT 1000
25854: LESS
25855: IFFALSE 25869
// SetLives ( i , 1000 ) ;
25857: LD_VAR 0 1
25861: PPUSH
25862: LD_INT 1000
25864: PPUSH
25865: CALL_OW 234
25869: GO 25839
25871: POP
25872: POP
// until p > 20 ;
25873: LD_VAR 0 3
25877: PUSH
25878: LD_INT 20
25880: GREATER
25881: IFFALSE 25808
// end ;
25883: PPOPN 3
25885: END
// every 0 0$1 trigger StreamModeActive and sTime do
25886: LD_EXP 53
25890: PUSH
25891: LD_EXP 104
25895: AND
25896: IFFALSE 25931
25898: GO 25900
25900: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25901: LD_INT 28
25903: PPUSH
25904: LD_OWVAR 2
25908: PPUSH
25909: LD_INT 2
25911: PPUSH
25912: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25916: LD_INT 30
25918: PPUSH
25919: LD_OWVAR 2
25923: PPUSH
25924: LD_INT 2
25926: PPUSH
25927: CALL_OW 322
// end ;
25931: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25932: LD_EXP 53
25936: PUSH
25937: LD_EXP 105
25941: AND
25942: IFFALSE 26063
25944: GO 25946
25946: DISABLE
25947: LD_INT 0
25949: PPUSH
25950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25951: LD_ADDR_VAR 0 2
25955: PUSH
25956: LD_INT 22
25958: PUSH
25959: LD_OWVAR 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 21
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 3
25980: PUSH
25981: LD_INT 23
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: PPUSH
26000: CALL_OW 69
26004: ST_TO_ADDR
// if not tmp then
26005: LD_VAR 0 2
26009: NOT
26010: IFFALSE 26014
// exit ;
26012: GO 26063
// for i in tmp do
26014: LD_ADDR_VAR 0 1
26018: PUSH
26019: LD_VAR 0 2
26023: PUSH
26024: FOR_IN
26025: IFFALSE 26061
// begin if Crawls ( i ) then
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 318
26036: IFFALSE 26047
// ComWalk ( i ) ;
26038: LD_VAR 0 1
26042: PPUSH
26043: CALL_OW 138
// SetClass ( i , 2 ) ;
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_INT 2
26054: PPUSH
26055: CALL_OW 336
// end ;
26059: GO 26024
26061: POP
26062: POP
// end ;
26063: PPOPN 2
26065: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26066: LD_EXP 53
26070: PUSH
26071: LD_EXP 106
26075: AND
26076: IFFALSE 26357
26078: GO 26080
26080: DISABLE
26081: LD_INT 0
26083: PPUSH
26084: PPUSH
26085: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26086: LD_OWVAR 2
26090: PPUSH
26091: LD_INT 9
26093: PPUSH
26094: LD_INT 1
26096: PPUSH
26097: LD_INT 1
26099: PPUSH
26100: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26104: LD_INT 9
26106: PPUSH
26107: LD_OWVAR 2
26111: PPUSH
26112: CALL_OW 343
// uc_side := 9 ;
26116: LD_ADDR_OWVAR 20
26120: PUSH
26121: LD_INT 9
26123: ST_TO_ADDR
// uc_nation := 2 ;
26124: LD_ADDR_OWVAR 21
26128: PUSH
26129: LD_INT 2
26131: ST_TO_ADDR
// hc_name := Dark Warrior ;
26132: LD_ADDR_OWVAR 26
26136: PUSH
26137: LD_STRING Dark Warrior
26139: ST_TO_ADDR
// hc_gallery :=  ;
26140: LD_ADDR_OWVAR 33
26144: PUSH
26145: LD_STRING 
26147: ST_TO_ADDR
// hc_noskilllimit := true ;
26148: LD_ADDR_OWVAR 76
26152: PUSH
26153: LD_INT 1
26155: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26156: LD_ADDR_OWVAR 31
26160: PUSH
26161: LD_INT 30
26163: PUSH
26164: LD_INT 30
26166: PUSH
26167: LD_INT 30
26169: PUSH
26170: LD_INT 30
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: ST_TO_ADDR
// un := CreateHuman ;
26179: LD_ADDR_VAR 0 3
26183: PUSH
26184: CALL_OW 44
26188: ST_TO_ADDR
// hc_noskilllimit := false ;
26189: LD_ADDR_OWVAR 76
26193: PUSH
26194: LD_INT 0
26196: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26197: LD_VAR 0 3
26201: PPUSH
26202: LD_INT 1
26204: PPUSH
26205: CALL_OW 51
// p := 0 ;
26209: LD_ADDR_VAR 0 2
26213: PUSH
26214: LD_INT 0
26216: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26217: LD_INT 35
26219: PPUSH
26220: CALL_OW 67
// p := p + 1 ;
26224: LD_ADDR_VAR 0 2
26228: PUSH
26229: LD_VAR 0 2
26233: PUSH
26234: LD_INT 1
26236: PLUS
26237: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26238: LD_VAR 0 3
26242: PPUSH
26243: CALL_OW 256
26247: PUSH
26248: LD_INT 1000
26250: LESS
26251: IFFALSE 26265
// SetLives ( un , 1000 ) ;
26253: LD_VAR 0 3
26257: PPUSH
26258: LD_INT 1000
26260: PPUSH
26261: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26265: LD_VAR 0 3
26269: PPUSH
26270: LD_INT 81
26272: PUSH
26273: LD_OWVAR 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 91
26284: PUSH
26285: LD_VAR 0 3
26289: PUSH
26290: LD_INT 30
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 69
26306: PPUSH
26307: LD_VAR 0 3
26311: PPUSH
26312: CALL_OW 74
26316: PPUSH
26317: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26321: LD_VAR 0 2
26325: PUSH
26326: LD_INT 60
26328: GREATER
26329: PUSH
26330: LD_VAR 0 3
26334: PPUSH
26335: CALL_OW 301
26339: OR
26340: IFFALSE 26217
// if un then
26342: LD_VAR 0 3
26346: IFFALSE 26357
// RemoveUnit ( un ) ;
26348: LD_VAR 0 3
26352: PPUSH
26353: CALL_OW 64
// end ;
26357: PPOPN 3
26359: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26360: LD_INT 0
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26366: LD_ADDR_VAR 0 4
26370: PUSH
26371: LD_INT 22
26373: PUSH
26374: LD_OWVAR 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: LD_INT 30
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 30
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: LIST
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PPUSH
26415: CALL_OW 69
26419: ST_TO_ADDR
// if not tmp then
26420: LD_VAR 0 4
26424: NOT
26425: IFFALSE 26429
// exit ;
26427: GO 26488
// for i in tmp do
26429: LD_ADDR_VAR 0 2
26433: PUSH
26434: LD_VAR 0 4
26438: PUSH
26439: FOR_IN
26440: IFFALSE 26486
// for j = 1 to 3 do
26442: LD_ADDR_VAR 0 3
26446: PUSH
26447: DOUBLE
26448: LD_INT 1
26450: DEC
26451: ST_TO_ADDR
26452: LD_INT 3
26454: PUSH
26455: FOR_TO
26456: IFFALSE 26482
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26458: LD_VAR 0 2
26462: PPUSH
26463: CALL_OW 274
26467: PPUSH
26468: LD_VAR 0 3
26472: PPUSH
26473: LD_INT 99999
26475: PPUSH
26476: CALL_OW 277
26480: GO 26455
26482: POP
26483: POP
26484: GO 26439
26486: POP
26487: POP
// end ;
26488: LD_VAR 0 1
26492: RET
// export function hHackSetLevel10 ; var i , j ; begin
26493: LD_INT 0
26495: PPUSH
26496: PPUSH
26497: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26498: LD_ADDR_VAR 0 2
26502: PUSH
26503: LD_INT 21
26505: PUSH
26506: LD_INT 1
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PPUSH
26513: CALL_OW 69
26517: PUSH
26518: FOR_IN
26519: IFFALSE 26571
// if IsSelected ( i ) then
26521: LD_VAR 0 2
26525: PPUSH
26526: CALL_OW 306
26530: IFFALSE 26569
// begin for j := 1 to 4 do
26532: LD_ADDR_VAR 0 3
26536: PUSH
26537: DOUBLE
26538: LD_INT 1
26540: DEC
26541: ST_TO_ADDR
26542: LD_INT 4
26544: PUSH
26545: FOR_TO
26546: IFFALSE 26567
// SetSkill ( i , j , 10 ) ;
26548: LD_VAR 0 2
26552: PPUSH
26553: LD_VAR 0 3
26557: PPUSH
26558: LD_INT 10
26560: PPUSH
26561: CALL_OW 237
26565: GO 26545
26567: POP
26568: POP
// end ;
26569: GO 26518
26571: POP
26572: POP
// end ;
26573: LD_VAR 0 1
26577: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26578: LD_INT 0
26580: PPUSH
26581: PPUSH
26582: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26583: LD_ADDR_VAR 0 2
26587: PUSH
26588: LD_INT 22
26590: PUSH
26591: LD_OWVAR 2
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 21
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PPUSH
26614: CALL_OW 69
26618: PUSH
26619: FOR_IN
26620: IFFALSE 26661
// begin for j := 1 to 4 do
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: DOUBLE
26628: LD_INT 1
26630: DEC
26631: ST_TO_ADDR
26632: LD_INT 4
26634: PUSH
26635: FOR_TO
26636: IFFALSE 26657
// SetSkill ( i , j , 10 ) ;
26638: LD_VAR 0 2
26642: PPUSH
26643: LD_VAR 0 3
26647: PPUSH
26648: LD_INT 10
26650: PPUSH
26651: CALL_OW 237
26655: GO 26635
26657: POP
26658: POP
// end ;
26659: GO 26619
26661: POP
26662: POP
// end ;
26663: LD_VAR 0 1
26667: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
26668: LD_INT 0
26670: PPUSH
// uc_side := your_side ;
26671: LD_ADDR_OWVAR 20
26675: PUSH
26676: LD_OWVAR 2
26680: ST_TO_ADDR
// uc_nation := nation ;
26681: LD_ADDR_OWVAR 21
26685: PUSH
26686: LD_VAR 0 1
26690: ST_TO_ADDR
// InitHc ;
26691: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26695: LD_INT 0
26697: PPUSH
26698: LD_VAR 0 2
26702: PPUSH
26703: LD_VAR 0 3
26707: PPUSH
26708: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
26712: CALL_OW 44
26716: PPUSH
26717: LD_INT 1
26719: PPUSH
26720: CALL_OW 51
// end ;
26724: LD_VAR 0 4
26728: RET
// export function hHackSpawnVehicle ; begin
26729: LD_INT 0
26731: PPUSH
// uc_side := your_side ;
26732: LD_ADDR_OWVAR 20
26736: PUSH
26737: LD_OWVAR 2
26741: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
26742: LD_ADDR_OWVAR 21
26746: PUSH
26747: LD_INT 1
26749: PPUSH
26750: LD_INT 3
26752: PPUSH
26753: CALL_OW 12
26757: ST_TO_ADDR
// InitVc ;
26758: CALL_OW 20
// case uc_nation of 1 :
26762: LD_OWVAR 21
26766: PUSH
26767: LD_INT 1
26769: DOUBLE
26770: EQUAL
26771: IFTRUE 26775
26773: GO 26919
26775: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
26776: LD_ADDR_OWVAR 37
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: LD_INT 4
26792: PUSH
26793: LD_INT 5
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: PPUSH
26806: LD_INT 5
26808: PPUSH
26809: CALL_OW 12
26813: ARRAY
26814: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
26815: LD_ADDR_OWVAR 39
26819: PUSH
26820: LD_INT 1
26822: PPUSH
26823: LD_INT 3
26825: PPUSH
26826: CALL_OW 12
26830: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
26831: LD_ADDR_OWVAR 38
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PPUSH
26853: LD_INT 3
26855: PPUSH
26856: CALL_OW 12
26860: ARRAY
26861: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
26862: LD_ADDR_OWVAR 40
26866: PUSH
26867: LD_INT 2
26869: PUSH
26870: LD_INT 4
26872: PUSH
26873: LD_INT 5
26875: PUSH
26876: LD_INT 3
26878: PUSH
26879: LD_INT 7
26881: PUSH
26882: LD_INT 8
26884: PUSH
26885: LD_INT 9
26887: PUSH
26888: LD_INT 10
26890: PUSH
26891: LD_INT 6
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PPUSH
26908: LD_INT 9
26910: PPUSH
26911: CALL_OW 12
26915: ARRAY
26916: ST_TO_ADDR
// end ; 2 :
26917: GO 27184
26919: LD_INT 2
26921: DOUBLE
26922: EQUAL
26923: IFTRUE 26927
26925: GO 27051
26927: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
26928: LD_ADDR_OWVAR 37
26932: PUSH
26933: LD_INT 11
26935: PUSH
26936: LD_INT 12
26938: PUSH
26939: LD_INT 13
26941: PUSH
26942: LD_INT 14
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_INT 4
26956: PPUSH
26957: CALL_OW 12
26961: ARRAY
26962: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
26963: LD_ADDR_OWVAR 39
26967: PUSH
26968: LD_INT 1
26970: PPUSH
26971: LD_INT 3
26973: PPUSH
26974: CALL_OW 12
26978: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
26979: LD_ADDR_OWVAR 38
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: LD_INT 5
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PPUSH
27001: LD_INT 3
27003: PPUSH
27004: CALL_OW 12
27008: ARRAY
27009: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
27010: LD_ADDR_OWVAR 40
27014: PUSH
27015: LD_INT 24
27017: PUSH
27018: LD_INT 26
27020: PUSH
27021: LD_INT 27
27023: PUSH
27024: LD_INT 28
27026: PUSH
27027: LD_INT 29
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: PPUSH
27040: LD_INT 5
27042: PPUSH
27043: CALL_OW 12
27047: ARRAY
27048: ST_TO_ADDR
// end ; 3 :
27049: GO 27184
27051: LD_INT 3
27053: DOUBLE
27054: EQUAL
27055: IFTRUE 27059
27057: GO 27183
27059: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
27060: LD_ADDR_OWVAR 37
27064: PUSH
27065: LD_INT 21
27067: PUSH
27068: LD_INT 23
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_INT 24
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: PPUSH
27086: LD_INT 4
27088: PPUSH
27089: CALL_OW 12
27093: ARRAY
27094: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27095: LD_ADDR_OWVAR 39
27099: PUSH
27100: LD_INT 1
27102: PPUSH
27103: LD_INT 3
27105: PPUSH
27106: CALL_OW 12
27110: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
27111: LD_ADDR_OWVAR 38
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 3
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PPUSH
27129: LD_INT 2
27131: PPUSH
27132: CALL_OW 12
27136: ARRAY
27137: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
27138: LD_ADDR_OWVAR 40
27142: PUSH
27143: LD_INT 42
27145: PUSH
27146: LD_INT 43
27148: PUSH
27149: LD_INT 44
27151: PUSH
27152: LD_INT 46
27154: PUSH
27155: LD_INT 48
27157: PUSH
27158: LD_INT 47
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: PPUSH
27172: LD_INT 6
27174: PPUSH
27175: CALL_OW 12
27179: ARRAY
27180: ST_TO_ADDR
// end ; end ;
27181: GO 27184
27183: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27184: CALL_OW 45
27188: PPUSH
27189: LD_INT 1
27191: PPUSH
27192: CALL_OW 51
// end ;
27196: LD_VAR 0 1
27200: RET
// export hInvincible ; every 1 do
27201: GO 27203
27203: DISABLE
// hInvincible := [ ] ;
27204: LD_ADDR_EXP 107
27208: PUSH
27209: EMPTY
27210: ST_TO_ADDR
27211: END
// every 10 do var i ;
27212: GO 27214
27214: DISABLE
27215: LD_INT 0
27217: PPUSH
// begin enable ;
27218: ENABLE
// if not hInvincible then
27219: LD_EXP 107
27223: NOT
27224: IFFALSE 27228
// exit ;
27226: GO 27272
// for i in hInvincible do
27228: LD_ADDR_VAR 0 1
27232: PUSH
27233: LD_EXP 107
27237: PUSH
27238: FOR_IN
27239: IFFALSE 27270
// if GetLives ( i ) < 1000 then
27241: LD_VAR 0 1
27245: PPUSH
27246: CALL_OW 256
27250: PUSH
27251: LD_INT 1000
27253: LESS
27254: IFFALSE 27268
// SetLives ( i , 1000 ) ;
27256: LD_VAR 0 1
27260: PPUSH
27261: LD_INT 1000
27263: PPUSH
27264: CALL_OW 234
27268: GO 27238
27270: POP
27271: POP
// end ;
27272: PPOPN 1
27274: END
// export function hHackInvincible ; var i ; begin
27275: LD_INT 0
27277: PPUSH
27278: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27279: LD_ADDR_VAR 0 2
27283: PUSH
27284: LD_INT 2
27286: PUSH
27287: LD_INT 21
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 21
27299: PUSH
27300: LD_INT 2
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: LIST
27311: PPUSH
27312: CALL_OW 69
27316: PUSH
27317: FOR_IN
27318: IFFALSE 27379
// if IsSelected ( i ) then
27320: LD_VAR 0 2
27324: PPUSH
27325: CALL_OW 306
27329: IFFALSE 27377
// begin if i in hInvincible then
27331: LD_VAR 0 2
27335: PUSH
27336: LD_EXP 107
27340: IN
27341: IFFALSE 27361
// hInvincible := hInvincible diff i else
27343: LD_ADDR_EXP 107
27347: PUSH
27348: LD_EXP 107
27352: PUSH
27353: LD_VAR 0 2
27357: DIFF
27358: ST_TO_ADDR
27359: GO 27377
// hInvincible := hInvincible union i ;
27361: LD_ADDR_EXP 107
27365: PUSH
27366: LD_EXP 107
27370: PUSH
27371: LD_VAR 0 2
27375: UNION
27376: ST_TO_ADDR
// end ;
27377: GO 27317
27379: POP
27380: POP
// end ;
27381: LD_VAR 0 1
27385: RET
// export function hHackInvisible ; var i , j ; begin
27386: LD_INT 0
27388: PPUSH
27389: PPUSH
27390: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27391: LD_ADDR_VAR 0 2
27395: PUSH
27396: LD_INT 21
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PPUSH
27406: CALL_OW 69
27410: PUSH
27411: FOR_IN
27412: IFFALSE 27436
// if IsSelected ( i ) then
27414: LD_VAR 0 2
27418: PPUSH
27419: CALL_OW 306
27423: IFFALSE 27434
// ComForceInvisible ( i ) ;
27425: LD_VAR 0 2
27429: PPUSH
27430: CALL_OW 496
27434: GO 27411
27436: POP
27437: POP
// end ;
27438: LD_VAR 0 1
27442: RET
// export function hHackChangeYourSide ; begin
27443: LD_INT 0
27445: PPUSH
// if your_side = 8 then
27446: LD_OWVAR 2
27450: PUSH
27451: LD_INT 8
27453: EQUAL
27454: IFFALSE 27466
// your_side := 0 else
27456: LD_ADDR_OWVAR 2
27460: PUSH
27461: LD_INT 0
27463: ST_TO_ADDR
27464: GO 27480
// your_side := your_side + 1 ;
27466: LD_ADDR_OWVAR 2
27470: PUSH
27471: LD_OWVAR 2
27475: PUSH
27476: LD_INT 1
27478: PLUS
27479: ST_TO_ADDR
// end ;
27480: LD_VAR 0 1
27484: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27485: LD_INT 0
27487: PPUSH
27488: PPUSH
27489: PPUSH
// for i in all_units do
27490: LD_ADDR_VAR 0 2
27494: PUSH
27495: LD_OWVAR 3
27499: PUSH
27500: FOR_IN
27501: IFFALSE 27579
// if IsSelected ( i ) then
27503: LD_VAR 0 2
27507: PPUSH
27508: CALL_OW 306
27512: IFFALSE 27577
// begin j := GetSide ( i ) ;
27514: LD_ADDR_VAR 0 3
27518: PUSH
27519: LD_VAR 0 2
27523: PPUSH
27524: CALL_OW 255
27528: ST_TO_ADDR
// if j = 8 then
27529: LD_VAR 0 3
27533: PUSH
27534: LD_INT 8
27536: EQUAL
27537: IFFALSE 27549
// j := 0 else
27539: LD_ADDR_VAR 0 3
27543: PUSH
27544: LD_INT 0
27546: ST_TO_ADDR
27547: GO 27563
// j := j + 1 ;
27549: LD_ADDR_VAR 0 3
27553: PUSH
27554: LD_VAR 0 3
27558: PUSH
27559: LD_INT 1
27561: PLUS
27562: ST_TO_ADDR
// SetSide ( i , j ) ;
27563: LD_VAR 0 2
27567: PPUSH
27568: LD_VAR 0 3
27572: PPUSH
27573: CALL_OW 235
// end ;
27577: GO 27500
27579: POP
27580: POP
// end ;
27581: LD_VAR 0 1
27585: RET
// export function hHackFog ; begin
27586: LD_INT 0
27588: PPUSH
// FogOff ( true ) ;
27589: LD_INT 1
27591: PPUSH
27592: CALL_OW 344
// end ;
27596: LD_VAR 0 1
27600: RET
// export function hHackApeman ; begin
27601: LD_INT 0
27603: PPUSH
// uc_side := your_side ;
27604: LD_ADDR_OWVAR 20
27608: PUSH
27609: LD_OWVAR 2
27613: ST_TO_ADDR
// uc_nation := 0 ;
27614: LD_ADDR_OWVAR 21
27618: PUSH
27619: LD_INT 0
27621: ST_TO_ADDR
// hc_name :=  ;
27622: LD_ADDR_OWVAR 26
27626: PUSH
27627: LD_STRING 
27629: ST_TO_ADDR
// hc_gallery :=  ;
27630: LD_ADDR_OWVAR 33
27634: PUSH
27635: LD_STRING 
27637: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
27638: LD_ADDR_OWVAR 31
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: ST_TO_ADDR
// hc_class := class_apeman ;
27661: LD_ADDR_OWVAR 28
27665: PUSH
27666: LD_INT 12
27668: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
27669: CALL_OW 44
27673: PPUSH
27674: LD_INT 1
27676: PPUSH
27677: CALL_OW 51
// end ;
27681: LD_VAR 0 1
27685: RET
// export function hHackBoom ; begin
27686: LD_INT 0
27688: PPUSH
// uc_side := your_side ;
27689: LD_ADDR_OWVAR 20
27693: PUSH
27694: LD_OWVAR 2
27698: ST_TO_ADDR
// uc_nation := 1 ;
27699: LD_ADDR_OWVAR 21
27703: PUSH
27704: LD_INT 1
27706: ST_TO_ADDR
// vc_chassis := us_morphling ;
27707: LD_ADDR_OWVAR 37
27711: PUSH
27712: LD_INT 5
27714: ST_TO_ADDR
// vc_engine := engine_siberite ;
27715: LD_ADDR_OWVAR 39
27719: PUSH
27720: LD_INT 3
27722: ST_TO_ADDR
// vc_control := control_computer ;
27723: LD_ADDR_OWVAR 38
27727: PUSH
27728: LD_INT 3
27730: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
27731: LD_ADDR_OWVAR 40
27735: PUSH
27736: LD_INT 8
27738: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27739: CALL_OW 45
27743: PPUSH
27744: LD_INT 1
27746: PPUSH
27747: CALL_OW 51
// end ; end_of_file
27751: LD_VAR 0 1
27755: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27756: LD_INT 0
27758: PPUSH
27759: PPUSH
27760: PPUSH
27761: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27762: LD_VAR 0 1
27766: PPUSH
27767: CALL_OW 264
27771: PUSH
27772: LD_EXP 42
27776: EQUAL
27777: IFFALSE 27849
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27779: LD_INT 68
27781: PPUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 255
27791: PPUSH
27792: CALL_OW 321
27796: PUSH
27797: LD_INT 2
27799: EQUAL
27800: IFFALSE 27812
// eff := 70 else
27802: LD_ADDR_VAR 0 4
27806: PUSH
27807: LD_INT 70
27809: ST_TO_ADDR
27810: GO 27820
// eff := 30 ;
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: LD_INT 30
27819: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27820: LD_VAR 0 1
27824: PPUSH
27825: CALL_OW 250
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 251
27839: PPUSH
27840: LD_VAR 0 4
27844: PPUSH
27845: CALL_OW 495
// end ; end ;
27849: LD_VAR 0 2
27853: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27854: LD_INT 0
27856: PPUSH
// end ;
27857: LD_VAR 0 4
27861: RET
// export function SOS_Command ( cmd ) ; begin
27862: LD_INT 0
27864: PPUSH
// end ;
27865: LD_VAR 0 2
27869: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27870: LD_VAR 0 1
27874: PUSH
27875: LD_INT 254
27877: EQUAL
27878: PUSH
27879: LD_VAR 0 2
27883: PPUSH
27884: CALL_OW 264
27888: PUSH
27889: LD_EXP 40
27893: EQUAL
27894: AND
27895: PUSH
27896: LD_VAR 0 3
27900: PPUSH
27901: CALL_OW 263
27905: PUSH
27906: LD_INT 3
27908: EQUAL
27909: AND
27910: IFFALSE 27926
// HackDestroyVehicle ( unit , selectedUnit ) ;
27912: LD_VAR 0 2
27916: PPUSH
27917: LD_VAR 0 3
27921: PPUSH
27922: CALL 29433 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27926: LD_VAR 0 1
27930: PUSH
27931: LD_INT 255
27933: EQUAL
27934: PUSH
27935: LD_VAR 0 2
27939: PPUSH
27940: CALL_OW 264
27944: PUSH
27945: LD_INT 14
27947: PUSH
27948: LD_INT 53
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: IN
27955: AND
27956: PUSH
27957: LD_VAR 0 4
27961: PPUSH
27962: LD_VAR 0 5
27966: PPUSH
27967: CALL_OW 488
27971: AND
27972: IFFALSE 27996
// CutTreeXYR ( unit , x , y , 12 ) ;
27974: LD_VAR 0 2
27978: PPUSH
27979: LD_VAR 0 4
27983: PPUSH
27984: LD_VAR 0 5
27988: PPUSH
27989: LD_INT 12
27991: PPUSH
27992: CALL 27999 0 4
// end ;
27996: PPOPN 5
27998: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27999: LD_INT 0
28001: PPUSH
28002: PPUSH
28003: PPUSH
28004: PPUSH
28005: PPUSH
28006: PPUSH
28007: PPUSH
28008: PPUSH
28009: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28010: LD_VAR 0 1
28014: NOT
28015: PUSH
28016: LD_VAR 0 2
28020: PPUSH
28021: LD_VAR 0 3
28025: PPUSH
28026: CALL_OW 488
28030: NOT
28031: OR
28032: PUSH
28033: LD_VAR 0 4
28037: NOT
28038: OR
28039: IFFALSE 28043
// exit ;
28041: GO 28383
// list := [ ] ;
28043: LD_ADDR_VAR 0 13
28047: PUSH
28048: EMPTY
28049: ST_TO_ADDR
// if x - r < 0 then
28050: LD_VAR 0 2
28054: PUSH
28055: LD_VAR 0 4
28059: MINUS
28060: PUSH
28061: LD_INT 0
28063: LESS
28064: IFFALSE 28076
// min_x := 0 else
28066: LD_ADDR_VAR 0 7
28070: PUSH
28071: LD_INT 0
28073: ST_TO_ADDR
28074: GO 28092
// min_x := x - r ;
28076: LD_ADDR_VAR 0 7
28080: PUSH
28081: LD_VAR 0 2
28085: PUSH
28086: LD_VAR 0 4
28090: MINUS
28091: ST_TO_ADDR
// if y - r < 0 then
28092: LD_VAR 0 3
28096: PUSH
28097: LD_VAR 0 4
28101: MINUS
28102: PUSH
28103: LD_INT 0
28105: LESS
28106: IFFALSE 28118
// min_y := 0 else
28108: LD_ADDR_VAR 0 8
28112: PUSH
28113: LD_INT 0
28115: ST_TO_ADDR
28116: GO 28134
// min_y := y - r ;
28118: LD_ADDR_VAR 0 8
28122: PUSH
28123: LD_VAR 0 3
28127: PUSH
28128: LD_VAR 0 4
28132: MINUS
28133: ST_TO_ADDR
// max_x := x + r ;
28134: LD_ADDR_VAR 0 9
28138: PUSH
28139: LD_VAR 0 2
28143: PUSH
28144: LD_VAR 0 4
28148: PLUS
28149: ST_TO_ADDR
// max_y := y + r ;
28150: LD_ADDR_VAR 0 10
28154: PUSH
28155: LD_VAR 0 3
28159: PUSH
28160: LD_VAR 0 4
28164: PLUS
28165: ST_TO_ADDR
// for _x = min_x to max_x do
28166: LD_ADDR_VAR 0 11
28170: PUSH
28171: DOUBLE
28172: LD_VAR 0 7
28176: DEC
28177: ST_TO_ADDR
28178: LD_VAR 0 9
28182: PUSH
28183: FOR_TO
28184: IFFALSE 28301
// for _y = min_y to max_y do
28186: LD_ADDR_VAR 0 12
28190: PUSH
28191: DOUBLE
28192: LD_VAR 0 8
28196: DEC
28197: ST_TO_ADDR
28198: LD_VAR 0 10
28202: PUSH
28203: FOR_TO
28204: IFFALSE 28297
// begin if not ValidHex ( _x , _y ) then
28206: LD_VAR 0 11
28210: PPUSH
28211: LD_VAR 0 12
28215: PPUSH
28216: CALL_OW 488
28220: NOT
28221: IFFALSE 28225
// continue ;
28223: GO 28203
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28225: LD_VAR 0 11
28229: PPUSH
28230: LD_VAR 0 12
28234: PPUSH
28235: CALL_OW 351
28239: PUSH
28240: LD_VAR 0 11
28244: PPUSH
28245: LD_VAR 0 12
28249: PPUSH
28250: CALL_OW 554
28254: AND
28255: IFFALSE 28295
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28257: LD_ADDR_VAR 0 13
28261: PUSH
28262: LD_VAR 0 13
28266: PPUSH
28267: LD_VAR 0 13
28271: PUSH
28272: LD_INT 1
28274: PLUS
28275: PPUSH
28276: LD_VAR 0 11
28280: PUSH
28281: LD_VAR 0 12
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL_OW 2
28294: ST_TO_ADDR
// end ;
28295: GO 28203
28297: POP
28298: POP
28299: GO 28183
28301: POP
28302: POP
// if not list then
28303: LD_VAR 0 13
28307: NOT
28308: IFFALSE 28312
// exit ;
28310: GO 28383
// for i in list do
28312: LD_ADDR_VAR 0 6
28316: PUSH
28317: LD_VAR 0 13
28321: PUSH
28322: FOR_IN
28323: IFFALSE 28381
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28325: LD_VAR 0 1
28329: PPUSH
28330: LD_STRING M
28332: PUSH
28333: LD_VAR 0 6
28337: PUSH
28338: LD_INT 1
28340: ARRAY
28341: PUSH
28342: LD_VAR 0 6
28346: PUSH
28347: LD_INT 2
28349: ARRAY
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: PPUSH
28375: CALL_OW 447
28379: GO 28322
28381: POP
28382: POP
// end ;
28383: LD_VAR 0 5
28387: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28388: LD_EXP 108
28392: NOT
28393: IFFALSE 28443
28395: GO 28397
28397: DISABLE
// begin initHack := true ;
28398: LD_ADDR_EXP 108
28402: PUSH
28403: LD_INT 1
28405: ST_TO_ADDR
// hackTanks := [ ] ;
28406: LD_ADDR_EXP 109
28410: PUSH
28411: EMPTY
28412: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28413: LD_ADDR_EXP 110
28417: PUSH
28418: EMPTY
28419: ST_TO_ADDR
// hackLimit := 3 ;
28420: LD_ADDR_EXP 111
28424: PUSH
28425: LD_INT 3
28427: ST_TO_ADDR
// hackDist := 12 ;
28428: LD_ADDR_EXP 112
28432: PUSH
28433: LD_INT 12
28435: ST_TO_ADDR
// hackCounter := [ ] ;
28436: LD_ADDR_EXP 113
28440: PUSH
28441: EMPTY
28442: ST_TO_ADDR
// end ;
28443: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28444: LD_EXP 108
28448: PUSH
28449: LD_INT 34
28451: PUSH
28452: LD_EXP 40
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: AND
28466: IFFALSE 28721
28468: GO 28470
28470: DISABLE
28471: LD_INT 0
28473: PPUSH
28474: PPUSH
// begin enable ;
28475: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28476: LD_ADDR_VAR 0 1
28480: PUSH
28481: LD_INT 34
28483: PUSH
28484: LD_EXP 40
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PPUSH
28493: CALL_OW 69
28497: PUSH
28498: FOR_IN
28499: IFFALSE 28719
// begin if not i in hackTanks then
28501: LD_VAR 0 1
28505: PUSH
28506: LD_EXP 109
28510: IN
28511: NOT
28512: IFFALSE 28595
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28514: LD_ADDR_EXP 109
28518: PUSH
28519: LD_EXP 109
28523: PPUSH
28524: LD_EXP 109
28528: PUSH
28529: LD_INT 1
28531: PLUS
28532: PPUSH
28533: LD_VAR 0 1
28537: PPUSH
28538: CALL_OW 1
28542: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28543: LD_ADDR_EXP 110
28547: PUSH
28548: LD_EXP 110
28552: PPUSH
28553: LD_EXP 110
28557: PUSH
28558: LD_INT 1
28560: PLUS
28561: PPUSH
28562: EMPTY
28563: PPUSH
28564: CALL_OW 1
28568: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28569: LD_ADDR_EXP 113
28573: PUSH
28574: LD_EXP 113
28578: PPUSH
28579: LD_EXP 113
28583: PUSH
28584: LD_INT 1
28586: PLUS
28587: PPUSH
28588: EMPTY
28589: PPUSH
28590: CALL_OW 1
28594: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL_OW 302
28604: NOT
28605: IFFALSE 28618
// begin HackUnlinkAll ( i ) ;
28607: LD_VAR 0 1
28611: PPUSH
28612: CALL 28724 0 1
// continue ;
28616: GO 28498
// end ; HackCheckCapturedStatus ( i ) ;
28618: LD_VAR 0 1
28622: PPUSH
28623: CALL 29167 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28627: LD_ADDR_VAR 0 2
28631: PUSH
28632: LD_INT 81
28634: PUSH
28635: LD_VAR 0 1
28639: PPUSH
28640: CALL_OW 255
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 33
28651: PUSH
28652: LD_INT 3
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 91
28661: PUSH
28662: LD_VAR 0 1
28666: PUSH
28667: LD_EXP 112
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 50
28679: PUSH
28680: EMPTY
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 69
28693: ST_TO_ADDR
// if not tmp then
28694: LD_VAR 0 2
28698: NOT
28699: IFFALSE 28703
// continue ;
28701: GO 28498
// HackLink ( i , tmp ) ;
28703: LD_VAR 0 1
28707: PPUSH
28708: LD_VAR 0 2
28712: PPUSH
28713: CALL 28860 0 2
// end ;
28717: GO 28498
28719: POP
28720: POP
// end ;
28721: PPOPN 2
28723: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28724: LD_INT 0
28726: PPUSH
28727: PPUSH
28728: PPUSH
// if not hack in hackTanks then
28729: LD_VAR 0 1
28733: PUSH
28734: LD_EXP 109
28738: IN
28739: NOT
28740: IFFALSE 28744
// exit ;
28742: GO 28855
// index := GetElementIndex ( hackTanks , hack ) ;
28744: LD_ADDR_VAR 0 4
28748: PUSH
28749: LD_EXP 109
28753: PPUSH
28754: LD_VAR 0 1
28758: PPUSH
28759: CALL 34275 0 2
28763: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28764: LD_EXP 110
28768: PUSH
28769: LD_VAR 0 4
28773: ARRAY
28774: IFFALSE 28855
// begin for i in hackTanksCaptured [ index ] do
28776: LD_ADDR_VAR 0 3
28780: PUSH
28781: LD_EXP 110
28785: PUSH
28786: LD_VAR 0 4
28790: ARRAY
28791: PUSH
28792: FOR_IN
28793: IFFALSE 28819
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28795: LD_VAR 0 3
28799: PUSH
28800: LD_INT 1
28802: ARRAY
28803: PPUSH
28804: LD_VAR 0 3
28808: PUSH
28809: LD_INT 2
28811: ARRAY
28812: PPUSH
28813: CALL_OW 235
28817: GO 28792
28819: POP
28820: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28821: LD_ADDR_EXP 110
28825: PUSH
28826: LD_EXP 110
28830: PPUSH
28831: LD_VAR 0 4
28835: PPUSH
28836: EMPTY
28837: PPUSH
28838: CALL_OW 1
28842: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28843: LD_VAR 0 1
28847: PPUSH
28848: LD_INT 0
28850: PPUSH
28851: CALL_OW 505
// end ; end ;
28855: LD_VAR 0 2
28859: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28860: LD_INT 0
28862: PPUSH
28863: PPUSH
28864: PPUSH
// if not hack in hackTanks or not vehicles then
28865: LD_VAR 0 1
28869: PUSH
28870: LD_EXP 109
28874: IN
28875: NOT
28876: PUSH
28877: LD_VAR 0 2
28881: NOT
28882: OR
28883: IFFALSE 28887
// exit ;
28885: GO 29162
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28887: LD_ADDR_VAR 0 2
28891: PUSH
28892: LD_VAR 0 1
28896: PPUSH
28897: LD_VAR 0 2
28901: PPUSH
28902: LD_INT 1
28904: PPUSH
28905: LD_INT 1
28907: PPUSH
28908: CALL 34925 0 4
28912: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28913: LD_ADDR_VAR 0 5
28917: PUSH
28918: LD_EXP 109
28922: PPUSH
28923: LD_VAR 0 1
28927: PPUSH
28928: CALL 34275 0 2
28932: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28933: LD_EXP 110
28937: PUSH
28938: LD_VAR 0 5
28942: ARRAY
28943: PUSH
28944: LD_EXP 111
28948: LESS
28949: IFFALSE 29138
// begin for i := 1 to vehicles do
28951: LD_ADDR_VAR 0 4
28955: PUSH
28956: DOUBLE
28957: LD_INT 1
28959: DEC
28960: ST_TO_ADDR
28961: LD_VAR 0 2
28965: PUSH
28966: FOR_TO
28967: IFFALSE 29136
// begin if hackTanksCaptured [ index ] = hackLimit then
28969: LD_EXP 110
28973: PUSH
28974: LD_VAR 0 5
28978: ARRAY
28979: PUSH
28980: LD_EXP 111
28984: EQUAL
28985: IFFALSE 28989
// break ;
28987: GO 29136
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28989: LD_ADDR_EXP 113
28993: PUSH
28994: LD_EXP 113
28998: PPUSH
28999: LD_VAR 0 5
29003: PPUSH
29004: LD_EXP 113
29008: PUSH
29009: LD_VAR 0 5
29013: ARRAY
29014: PUSH
29015: LD_INT 1
29017: PLUS
29018: PPUSH
29019: CALL_OW 1
29023: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29024: LD_ADDR_EXP 110
29028: PUSH
29029: LD_EXP 110
29033: PPUSH
29034: LD_VAR 0 5
29038: PUSH
29039: LD_EXP 110
29043: PUSH
29044: LD_VAR 0 5
29048: ARRAY
29049: PUSH
29050: LD_INT 1
29052: PLUS
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PPUSH
29058: LD_VAR 0 2
29062: PUSH
29063: LD_VAR 0 4
29067: ARRAY
29068: PUSH
29069: LD_VAR 0 2
29073: PUSH
29074: LD_VAR 0 4
29078: ARRAY
29079: PPUSH
29080: CALL_OW 255
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PPUSH
29089: CALL 34490 0 3
29093: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29094: LD_VAR 0 2
29098: PUSH
29099: LD_VAR 0 4
29103: ARRAY
29104: PPUSH
29105: LD_VAR 0 1
29109: PPUSH
29110: CALL_OW 255
29114: PPUSH
29115: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29119: LD_VAR 0 2
29123: PUSH
29124: LD_VAR 0 4
29128: ARRAY
29129: PPUSH
29130: CALL_OW 141
// end ;
29134: GO 28966
29136: POP
29137: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29138: LD_VAR 0 1
29142: PPUSH
29143: LD_EXP 110
29147: PUSH
29148: LD_VAR 0 5
29152: ARRAY
29153: PUSH
29154: LD_INT 0
29156: PLUS
29157: PPUSH
29158: CALL_OW 505
// end ;
29162: LD_VAR 0 3
29166: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29167: LD_INT 0
29169: PPUSH
29170: PPUSH
29171: PPUSH
29172: PPUSH
// if not hack in hackTanks then
29173: LD_VAR 0 1
29177: PUSH
29178: LD_EXP 109
29182: IN
29183: NOT
29184: IFFALSE 29188
// exit ;
29186: GO 29428
// index := GetElementIndex ( hackTanks , hack ) ;
29188: LD_ADDR_VAR 0 4
29192: PUSH
29193: LD_EXP 109
29197: PPUSH
29198: LD_VAR 0 1
29202: PPUSH
29203: CALL 34275 0 2
29207: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29208: LD_ADDR_VAR 0 3
29212: PUSH
29213: DOUBLE
29214: LD_EXP 110
29218: PUSH
29219: LD_VAR 0 4
29223: ARRAY
29224: INC
29225: ST_TO_ADDR
29226: LD_INT 1
29228: PUSH
29229: FOR_DOWNTO
29230: IFFALSE 29402
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29232: LD_ADDR_VAR 0 5
29236: PUSH
29237: LD_EXP 110
29241: PUSH
29242: LD_VAR 0 4
29246: ARRAY
29247: PUSH
29248: LD_VAR 0 3
29252: ARRAY
29253: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29254: LD_VAR 0 5
29258: PUSH
29259: LD_INT 1
29261: ARRAY
29262: PPUSH
29263: CALL_OW 302
29267: NOT
29268: PUSH
29269: LD_VAR 0 5
29273: PUSH
29274: LD_INT 1
29276: ARRAY
29277: PPUSH
29278: CALL_OW 255
29282: PUSH
29283: LD_VAR 0 1
29287: PPUSH
29288: CALL_OW 255
29292: NONEQUAL
29293: OR
29294: IFFALSE 29400
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29296: LD_VAR 0 5
29300: PUSH
29301: LD_INT 1
29303: ARRAY
29304: PPUSH
29305: CALL_OW 305
29309: PUSH
29310: LD_VAR 0 5
29314: PUSH
29315: LD_INT 1
29317: ARRAY
29318: PPUSH
29319: CALL_OW 255
29323: PUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 255
29333: EQUAL
29334: AND
29335: IFFALSE 29359
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29337: LD_VAR 0 5
29341: PUSH
29342: LD_INT 1
29344: ARRAY
29345: PPUSH
29346: LD_VAR 0 5
29350: PUSH
29351: LD_INT 2
29353: ARRAY
29354: PPUSH
29355: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29359: LD_ADDR_EXP 110
29363: PUSH
29364: LD_EXP 110
29368: PPUSH
29369: LD_VAR 0 4
29373: PPUSH
29374: LD_EXP 110
29378: PUSH
29379: LD_VAR 0 4
29383: ARRAY
29384: PPUSH
29385: LD_VAR 0 3
29389: PPUSH
29390: CALL_OW 3
29394: PPUSH
29395: CALL_OW 1
29399: ST_TO_ADDR
// end ; end ;
29400: GO 29229
29402: POP
29403: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29404: LD_VAR 0 1
29408: PPUSH
29409: LD_EXP 110
29413: PUSH
29414: LD_VAR 0 4
29418: ARRAY
29419: PUSH
29420: LD_INT 0
29422: PLUS
29423: PPUSH
29424: CALL_OW 505
// end ;
29428: LD_VAR 0 2
29432: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29433: LD_INT 0
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
// if not hack in hackTanks then
29439: LD_VAR 0 1
29443: PUSH
29444: LD_EXP 109
29448: IN
29449: NOT
29450: IFFALSE 29454
// exit ;
29452: GO 29539
// index := GetElementIndex ( hackTanks , hack ) ;
29454: LD_ADDR_VAR 0 5
29458: PUSH
29459: LD_EXP 109
29463: PPUSH
29464: LD_VAR 0 1
29468: PPUSH
29469: CALL 34275 0 2
29473: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29474: LD_ADDR_VAR 0 4
29478: PUSH
29479: DOUBLE
29480: LD_INT 1
29482: DEC
29483: ST_TO_ADDR
29484: LD_EXP 110
29488: PUSH
29489: LD_VAR 0 5
29493: ARRAY
29494: PUSH
29495: FOR_TO
29496: IFFALSE 29537
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29498: LD_EXP 110
29502: PUSH
29503: LD_VAR 0 5
29507: ARRAY
29508: PUSH
29509: LD_VAR 0 4
29513: ARRAY
29514: PUSH
29515: LD_INT 1
29517: ARRAY
29518: PUSH
29519: LD_VAR 0 2
29523: EQUAL
29524: IFFALSE 29535
// KillUnit ( vehicle ) ;
29526: LD_VAR 0 2
29530: PPUSH
29531: CALL_OW 66
29535: GO 29495
29537: POP
29538: POP
// end ; end_of_file
29539: LD_VAR 0 3
29543: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29544: LD_INT 0
29546: PPUSH
29547: PPUSH
// if exist_mode then
29548: LD_VAR 0 2
29552: IFFALSE 29577
// unit := CreateCharacter ( prefix & ident ) else
29554: LD_ADDR_VAR 0 5
29558: PUSH
29559: LD_VAR 0 3
29563: PUSH
29564: LD_VAR 0 1
29568: STR
29569: PPUSH
29570: CALL_OW 34
29574: ST_TO_ADDR
29575: GO 29592
// unit := NewCharacter ( ident ) ;
29577: LD_ADDR_VAR 0 5
29581: PUSH
29582: LD_VAR 0 1
29586: PPUSH
29587: CALL_OW 25
29591: ST_TO_ADDR
// result := unit ;
29592: LD_ADDR_VAR 0 4
29596: PUSH
29597: LD_VAR 0 5
29601: ST_TO_ADDR
// end ;
29602: LD_VAR 0 4
29606: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29607: LD_INT 0
29609: PPUSH
29610: PPUSH
// if not side or not nation then
29611: LD_VAR 0 1
29615: NOT
29616: PUSH
29617: LD_VAR 0 2
29621: NOT
29622: OR
29623: IFFALSE 29627
// exit ;
29625: GO 30391
// case nation of nation_american :
29627: LD_VAR 0 2
29631: PUSH
29632: LD_INT 1
29634: DOUBLE
29635: EQUAL
29636: IFTRUE 29640
29638: GO 29854
29640: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29641: LD_ADDR_VAR 0 4
29645: PUSH
29646: LD_INT 35
29648: PUSH
29649: LD_INT 45
29651: PUSH
29652: LD_INT 46
29654: PUSH
29655: LD_INT 47
29657: PUSH
29658: LD_INT 82
29660: PUSH
29661: LD_INT 83
29663: PUSH
29664: LD_INT 84
29666: PUSH
29667: LD_INT 85
29669: PUSH
29670: LD_INT 86
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: LD_INT 2
29678: PUSH
29679: LD_INT 6
29681: PUSH
29682: LD_INT 15
29684: PUSH
29685: LD_INT 16
29687: PUSH
29688: LD_INT 7
29690: PUSH
29691: LD_INT 12
29693: PUSH
29694: LD_INT 13
29696: PUSH
29697: LD_INT 10
29699: PUSH
29700: LD_INT 14
29702: PUSH
29703: LD_INT 20
29705: PUSH
29706: LD_INT 21
29708: PUSH
29709: LD_INT 22
29711: PUSH
29712: LD_INT 25
29714: PUSH
29715: LD_INT 32
29717: PUSH
29718: LD_INT 27
29720: PUSH
29721: LD_INT 36
29723: PUSH
29724: LD_INT 69
29726: PUSH
29727: LD_INT 39
29729: PUSH
29730: LD_INT 34
29732: PUSH
29733: LD_INT 40
29735: PUSH
29736: LD_INT 48
29738: PUSH
29739: LD_INT 49
29741: PUSH
29742: LD_INT 50
29744: PUSH
29745: LD_INT 51
29747: PUSH
29748: LD_INT 52
29750: PUSH
29751: LD_INT 53
29753: PUSH
29754: LD_INT 54
29756: PUSH
29757: LD_INT 55
29759: PUSH
29760: LD_INT 56
29762: PUSH
29763: LD_INT 57
29765: PUSH
29766: LD_INT 58
29768: PUSH
29769: LD_INT 59
29771: PUSH
29772: LD_INT 60
29774: PUSH
29775: LD_INT 61
29777: PUSH
29778: LD_INT 62
29780: PUSH
29781: LD_INT 80
29783: PUSH
29784: LD_INT 82
29786: PUSH
29787: LD_INT 83
29789: PUSH
29790: LD_INT 84
29792: PUSH
29793: LD_INT 85
29795: PUSH
29796: LD_INT 86
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: ST_TO_ADDR
29852: GO 30315
29854: LD_INT 2
29856: DOUBLE
29857: EQUAL
29858: IFTRUE 29862
29860: GO 30084
29862: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29863: LD_ADDR_VAR 0 4
29867: PUSH
29868: LD_INT 35
29870: PUSH
29871: LD_INT 45
29873: PUSH
29874: LD_INT 46
29876: PUSH
29877: LD_INT 47
29879: PUSH
29880: LD_INT 82
29882: PUSH
29883: LD_INT 83
29885: PUSH
29886: LD_INT 84
29888: PUSH
29889: LD_INT 85
29891: PUSH
29892: LD_INT 87
29894: PUSH
29895: LD_INT 70
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 11
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: LD_INT 4
29909: PUSH
29910: LD_INT 5
29912: PUSH
29913: LD_INT 6
29915: PUSH
29916: LD_INT 15
29918: PUSH
29919: LD_INT 18
29921: PUSH
29922: LD_INT 7
29924: PUSH
29925: LD_INT 17
29927: PUSH
29928: LD_INT 8
29930: PUSH
29931: LD_INT 20
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 22
29939: PUSH
29940: LD_INT 72
29942: PUSH
29943: LD_INT 26
29945: PUSH
29946: LD_INT 69
29948: PUSH
29949: LD_INT 39
29951: PUSH
29952: LD_INT 40
29954: PUSH
29955: LD_INT 41
29957: PUSH
29958: LD_INT 42
29960: PUSH
29961: LD_INT 43
29963: PUSH
29964: LD_INT 48
29966: PUSH
29967: LD_INT 49
29969: PUSH
29970: LD_INT 50
29972: PUSH
29973: LD_INT 51
29975: PUSH
29976: LD_INT 52
29978: PUSH
29979: LD_INT 53
29981: PUSH
29982: LD_INT 54
29984: PUSH
29985: LD_INT 55
29987: PUSH
29988: LD_INT 56
29990: PUSH
29991: LD_INT 60
29993: PUSH
29994: LD_INT 61
29996: PUSH
29997: LD_INT 62
29999: PUSH
30000: LD_INT 66
30002: PUSH
30003: LD_INT 67
30005: PUSH
30006: LD_INT 68
30008: PUSH
30009: LD_INT 81
30011: PUSH
30012: LD_INT 82
30014: PUSH
30015: LD_INT 83
30017: PUSH
30018: LD_INT 84
30020: PUSH
30021: LD_INT 85
30023: PUSH
30024: LD_INT 87
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
30082: GO 30315
30084: LD_INT 3
30086: DOUBLE
30087: EQUAL
30088: IFTRUE 30092
30090: GO 30314
30092: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30093: LD_ADDR_VAR 0 4
30097: PUSH
30098: LD_INT 46
30100: PUSH
30101: LD_INT 47
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: LD_INT 82
30112: PUSH
30113: LD_INT 83
30115: PUSH
30116: LD_INT 84
30118: PUSH
30119: LD_INT 85
30121: PUSH
30122: LD_INT 86
30124: PUSH
30125: LD_INT 11
30127: PUSH
30128: LD_INT 9
30130: PUSH
30131: LD_INT 20
30133: PUSH
30134: LD_INT 19
30136: PUSH
30137: LD_INT 21
30139: PUSH
30140: LD_INT 24
30142: PUSH
30143: LD_INT 22
30145: PUSH
30146: LD_INT 25
30148: PUSH
30149: LD_INT 28
30151: PUSH
30152: LD_INT 29
30154: PUSH
30155: LD_INT 30
30157: PUSH
30158: LD_INT 31
30160: PUSH
30161: LD_INT 37
30163: PUSH
30164: LD_INT 38
30166: PUSH
30167: LD_INT 32
30169: PUSH
30170: LD_INT 27
30172: PUSH
30173: LD_INT 33
30175: PUSH
30176: LD_INT 69
30178: PUSH
30179: LD_INT 39
30181: PUSH
30182: LD_INT 34
30184: PUSH
30185: LD_INT 40
30187: PUSH
30188: LD_INT 71
30190: PUSH
30191: LD_INT 23
30193: PUSH
30194: LD_INT 44
30196: PUSH
30197: LD_INT 48
30199: PUSH
30200: LD_INT 49
30202: PUSH
30203: LD_INT 50
30205: PUSH
30206: LD_INT 51
30208: PUSH
30209: LD_INT 52
30211: PUSH
30212: LD_INT 53
30214: PUSH
30215: LD_INT 54
30217: PUSH
30218: LD_INT 55
30220: PUSH
30221: LD_INT 56
30223: PUSH
30224: LD_INT 57
30226: PUSH
30227: LD_INT 58
30229: PUSH
30230: LD_INT 59
30232: PUSH
30233: LD_INT 63
30235: PUSH
30236: LD_INT 64
30238: PUSH
30239: LD_INT 65
30241: PUSH
30242: LD_INT 82
30244: PUSH
30245: LD_INT 83
30247: PUSH
30248: LD_INT 84
30250: PUSH
30251: LD_INT 85
30253: PUSH
30254: LD_INT 86
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 30315
30314: POP
// if state > - 1 and state < 3 then
30315: LD_VAR 0 3
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: GREATER
30324: PUSH
30325: LD_VAR 0 3
30329: PUSH
30330: LD_INT 3
30332: LESS
30333: AND
30334: IFFALSE 30391
// for i in result do
30336: LD_ADDR_VAR 0 5
30340: PUSH
30341: LD_VAR 0 4
30345: PUSH
30346: FOR_IN
30347: IFFALSE 30389
// if GetTech ( i , side ) <> state then
30349: LD_VAR 0 5
30353: PPUSH
30354: LD_VAR 0 1
30358: PPUSH
30359: CALL_OW 321
30363: PUSH
30364: LD_VAR 0 3
30368: NONEQUAL
30369: IFFALSE 30387
// result := result diff i ;
30371: LD_ADDR_VAR 0 4
30375: PUSH
30376: LD_VAR 0 4
30380: PUSH
30381: LD_VAR 0 5
30385: DIFF
30386: ST_TO_ADDR
30387: GO 30346
30389: POP
30390: POP
// end ;
30391: LD_VAR 0 4
30395: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30396: LD_INT 0
30398: PPUSH
30399: PPUSH
30400: PPUSH
// result := true ;
30401: LD_ADDR_VAR 0 3
30405: PUSH
30406: LD_INT 1
30408: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30409: LD_ADDR_VAR 0 5
30413: PUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: CALL_OW 480
30423: ST_TO_ADDR
// if not tmp then
30424: LD_VAR 0 5
30428: NOT
30429: IFFALSE 30433
// exit ;
30431: GO 30482
// for i in tmp do
30433: LD_ADDR_VAR 0 4
30437: PUSH
30438: LD_VAR 0 5
30442: PUSH
30443: FOR_IN
30444: IFFALSE 30480
// if GetTech ( i , side ) <> state_researched then
30446: LD_VAR 0 4
30450: PPUSH
30451: LD_VAR 0 1
30455: PPUSH
30456: CALL_OW 321
30460: PUSH
30461: LD_INT 2
30463: NONEQUAL
30464: IFFALSE 30478
// begin result := false ;
30466: LD_ADDR_VAR 0 3
30470: PUSH
30471: LD_INT 0
30473: ST_TO_ADDR
// exit ;
30474: POP
30475: POP
30476: GO 30482
// end ;
30478: GO 30443
30480: POP
30481: POP
// end ;
30482: LD_VAR 0 3
30486: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30487: LD_INT 0
30489: PPUSH
30490: PPUSH
30491: PPUSH
30492: PPUSH
30493: PPUSH
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
30500: PPUSH
30501: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30502: LD_VAR 0 1
30506: NOT
30507: PUSH
30508: LD_VAR 0 1
30512: PPUSH
30513: CALL_OW 257
30517: PUSH
30518: LD_INT 9
30520: NONEQUAL
30521: OR
30522: IFFALSE 30526
// exit ;
30524: GO 31099
// side := GetSide ( unit ) ;
30526: LD_ADDR_VAR 0 9
30530: PUSH
30531: LD_VAR 0 1
30535: PPUSH
30536: CALL_OW 255
30540: ST_TO_ADDR
// tech_space := tech_spacanom ;
30541: LD_ADDR_VAR 0 12
30545: PUSH
30546: LD_INT 29
30548: ST_TO_ADDR
// tech_time := tech_taurad ;
30549: LD_ADDR_VAR 0 13
30553: PUSH
30554: LD_INT 28
30556: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30557: LD_ADDR_VAR 0 11
30561: PUSH
30562: LD_VAR 0 1
30566: PPUSH
30567: CALL_OW 310
30571: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30572: LD_VAR 0 11
30576: PPUSH
30577: CALL_OW 247
30581: PUSH
30582: LD_INT 2
30584: EQUAL
30585: IFFALSE 30589
// exit ;
30587: GO 31099
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30589: LD_ADDR_VAR 0 8
30593: PUSH
30594: LD_INT 81
30596: PUSH
30597: LD_VAR 0 9
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 3
30608: PUSH
30609: LD_INT 21
30611: PUSH
30612: LD_INT 3
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PPUSH
30627: CALL_OW 69
30631: ST_TO_ADDR
// if not tmp then
30632: LD_VAR 0 8
30636: NOT
30637: IFFALSE 30641
// exit ;
30639: GO 31099
// if in_unit then
30641: LD_VAR 0 11
30645: IFFALSE 30669
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30647: LD_ADDR_VAR 0 10
30651: PUSH
30652: LD_VAR 0 8
30656: PPUSH
30657: LD_VAR 0 11
30661: PPUSH
30662: CALL_OW 74
30666: ST_TO_ADDR
30667: GO 30689
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30669: LD_ADDR_VAR 0 10
30673: PUSH
30674: LD_VAR 0 8
30678: PPUSH
30679: LD_VAR 0 1
30683: PPUSH
30684: CALL_OW 74
30688: ST_TO_ADDR
// if not enemy then
30689: LD_VAR 0 10
30693: NOT
30694: IFFALSE 30698
// exit ;
30696: GO 31099
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30698: LD_VAR 0 11
30702: PUSH
30703: LD_VAR 0 11
30707: PPUSH
30708: LD_VAR 0 10
30712: PPUSH
30713: CALL_OW 296
30717: PUSH
30718: LD_INT 13
30720: GREATER
30721: AND
30722: PUSH
30723: LD_VAR 0 1
30727: PPUSH
30728: LD_VAR 0 10
30732: PPUSH
30733: CALL_OW 296
30737: PUSH
30738: LD_INT 12
30740: GREATER
30741: OR
30742: IFFALSE 30746
// exit ;
30744: GO 31099
// missile := [ 1 ] ;
30746: LD_ADDR_VAR 0 14
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: EMPTY
30755: LIST
30756: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30757: LD_VAR 0 9
30761: PPUSH
30762: LD_VAR 0 12
30766: PPUSH
30767: CALL_OW 325
30771: IFFALSE 30800
// missile := Insert ( missile , missile + 1 , 2 ) ;
30773: LD_ADDR_VAR 0 14
30777: PUSH
30778: LD_VAR 0 14
30782: PPUSH
30783: LD_VAR 0 14
30787: PUSH
30788: LD_INT 1
30790: PLUS
30791: PPUSH
30792: LD_INT 2
30794: PPUSH
30795: CALL_OW 2
30799: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30800: LD_VAR 0 9
30804: PPUSH
30805: LD_VAR 0 13
30809: PPUSH
30810: CALL_OW 325
30814: PUSH
30815: LD_VAR 0 10
30819: PPUSH
30820: CALL_OW 255
30824: PPUSH
30825: LD_VAR 0 13
30829: PPUSH
30830: CALL_OW 325
30834: NOT
30835: AND
30836: IFFALSE 30865
// missile := Insert ( missile , missile + 1 , 3 ) ;
30838: LD_ADDR_VAR 0 14
30842: PUSH
30843: LD_VAR 0 14
30847: PPUSH
30848: LD_VAR 0 14
30852: PUSH
30853: LD_INT 1
30855: PLUS
30856: PPUSH
30857: LD_INT 3
30859: PPUSH
30860: CALL_OW 2
30864: ST_TO_ADDR
// if missile < 2 then
30865: LD_VAR 0 14
30869: PUSH
30870: LD_INT 2
30872: LESS
30873: IFFALSE 30877
// exit ;
30875: GO 31099
// x := GetX ( enemy ) ;
30877: LD_ADDR_VAR 0 4
30881: PUSH
30882: LD_VAR 0 10
30886: PPUSH
30887: CALL_OW 250
30891: ST_TO_ADDR
// y := GetY ( enemy ) ;
30892: LD_ADDR_VAR 0 5
30896: PUSH
30897: LD_VAR 0 10
30901: PPUSH
30902: CALL_OW 251
30906: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30907: LD_ADDR_VAR 0 6
30911: PUSH
30912: LD_VAR 0 4
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PPUSH
30921: LD_INT 1
30923: PPUSH
30924: CALL_OW 12
30928: PLUS
30929: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30930: LD_ADDR_VAR 0 7
30934: PUSH
30935: LD_VAR 0 5
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PPUSH
30944: LD_INT 1
30946: PPUSH
30947: CALL_OW 12
30951: PLUS
30952: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30953: LD_VAR 0 6
30957: PPUSH
30958: LD_VAR 0 7
30962: PPUSH
30963: CALL_OW 488
30967: NOT
30968: IFFALSE 30990
// begin _x := x ;
30970: LD_ADDR_VAR 0 6
30974: PUSH
30975: LD_VAR 0 4
30979: ST_TO_ADDR
// _y := y ;
30980: LD_ADDR_VAR 0 7
30984: PUSH
30985: LD_VAR 0 5
30989: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30990: LD_ADDR_VAR 0 3
30994: PUSH
30995: LD_INT 1
30997: PPUSH
30998: LD_VAR 0 14
31002: PPUSH
31003: CALL_OW 12
31007: ST_TO_ADDR
// case i of 1 :
31008: LD_VAR 0 3
31012: PUSH
31013: LD_INT 1
31015: DOUBLE
31016: EQUAL
31017: IFTRUE 31021
31019: GO 31038
31021: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31022: LD_VAR 0 1
31026: PPUSH
31027: LD_VAR 0 10
31031: PPUSH
31032: CALL_OW 115
31036: GO 31099
31038: LD_INT 2
31040: DOUBLE
31041: EQUAL
31042: IFTRUE 31046
31044: GO 31068
31046: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31047: LD_VAR 0 1
31051: PPUSH
31052: LD_VAR 0 6
31056: PPUSH
31057: LD_VAR 0 7
31061: PPUSH
31062: CALL_OW 153
31066: GO 31099
31068: LD_INT 3
31070: DOUBLE
31071: EQUAL
31072: IFTRUE 31076
31074: GO 31098
31076: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31077: LD_VAR 0 1
31081: PPUSH
31082: LD_VAR 0 6
31086: PPUSH
31087: LD_VAR 0 7
31091: PPUSH
31092: CALL_OW 154
31096: GO 31099
31098: POP
// end ;
31099: LD_VAR 0 2
31103: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31104: LD_INT 0
31106: PPUSH
31107: PPUSH
31108: PPUSH
31109: PPUSH
31110: PPUSH
31111: PPUSH
// if not unit or not building then
31112: LD_VAR 0 1
31116: NOT
31117: PUSH
31118: LD_VAR 0 2
31122: NOT
31123: OR
31124: IFFALSE 31128
// exit ;
31126: GO 31286
// x := GetX ( building ) ;
31128: LD_ADDR_VAR 0 5
31132: PUSH
31133: LD_VAR 0 2
31137: PPUSH
31138: CALL_OW 250
31142: ST_TO_ADDR
// y := GetY ( building ) ;
31143: LD_ADDR_VAR 0 6
31147: PUSH
31148: LD_VAR 0 2
31152: PPUSH
31153: CALL_OW 251
31157: ST_TO_ADDR
// for i = 0 to 5 do
31158: LD_ADDR_VAR 0 4
31162: PUSH
31163: DOUBLE
31164: LD_INT 0
31166: DEC
31167: ST_TO_ADDR
31168: LD_INT 5
31170: PUSH
31171: FOR_TO
31172: IFFALSE 31284
// begin _x := ShiftX ( x , i , 3 ) ;
31174: LD_ADDR_VAR 0 7
31178: PUSH
31179: LD_VAR 0 5
31183: PPUSH
31184: LD_VAR 0 4
31188: PPUSH
31189: LD_INT 3
31191: PPUSH
31192: CALL_OW 272
31196: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31197: LD_ADDR_VAR 0 8
31201: PUSH
31202: LD_VAR 0 6
31206: PPUSH
31207: LD_VAR 0 4
31211: PPUSH
31212: LD_INT 3
31214: PPUSH
31215: CALL_OW 273
31219: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31220: LD_VAR 0 7
31224: PPUSH
31225: LD_VAR 0 8
31229: PPUSH
31230: CALL_OW 488
31234: NOT
31235: IFFALSE 31239
// continue ;
31237: GO 31171
// if HexInfo ( _x , _y ) = 0 then
31239: LD_VAR 0 7
31243: PPUSH
31244: LD_VAR 0 8
31248: PPUSH
31249: CALL_OW 428
31253: PUSH
31254: LD_INT 0
31256: EQUAL
31257: IFFALSE 31282
// begin ComMoveXY ( unit , _x , _y ) ;
31259: LD_VAR 0 1
31263: PPUSH
31264: LD_VAR 0 7
31268: PPUSH
31269: LD_VAR 0 8
31273: PPUSH
31274: CALL_OW 111
// exit ;
31278: POP
31279: POP
31280: GO 31286
// end ; end ;
31282: GO 31171
31284: POP
31285: POP
// end ;
31286: LD_VAR 0 3
31290: RET
// export function ScanBase ( side , base_area ) ; begin
31291: LD_INT 0
31293: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31294: LD_ADDR_VAR 0 3
31298: PUSH
31299: LD_VAR 0 2
31303: PPUSH
31304: LD_INT 81
31306: PUSH
31307: LD_VAR 0 1
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PPUSH
31316: CALL_OW 70
31320: ST_TO_ADDR
// end ;
31321: LD_VAR 0 3
31325: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31326: LD_INT 0
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
// result := false ;
31332: LD_ADDR_VAR 0 2
31336: PUSH
31337: LD_INT 0
31339: ST_TO_ADDR
// side := GetSide ( unit ) ;
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: LD_VAR 0 1
31349: PPUSH
31350: CALL_OW 255
31354: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31355: LD_ADDR_VAR 0 4
31359: PUSH
31360: LD_VAR 0 1
31364: PPUSH
31365: CALL_OW 248
31369: ST_TO_ADDR
// case nat of 1 :
31370: LD_VAR 0 4
31374: PUSH
31375: LD_INT 1
31377: DOUBLE
31378: EQUAL
31379: IFTRUE 31383
31381: GO 31394
31383: POP
// tech := tech_lassight ; 2 :
31384: LD_ADDR_VAR 0 5
31388: PUSH
31389: LD_INT 12
31391: ST_TO_ADDR
31392: GO 31433
31394: LD_INT 2
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31413
31402: POP
// tech := tech_mortar ; 3 :
31403: LD_ADDR_VAR 0 5
31407: PUSH
31408: LD_INT 41
31410: ST_TO_ADDR
31411: GO 31433
31413: LD_INT 3
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31432
31421: POP
// tech := tech_bazooka ; end ;
31422: LD_ADDR_VAR 0 5
31426: PUSH
31427: LD_INT 44
31429: ST_TO_ADDR
31430: GO 31433
31432: POP
// if Researched ( side , tech ) then
31433: LD_VAR 0 3
31437: PPUSH
31438: LD_VAR 0 5
31442: PPUSH
31443: CALL_OW 325
31447: IFFALSE 31474
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31449: LD_ADDR_VAR 0 2
31453: PUSH
31454: LD_INT 5
31456: PUSH
31457: LD_INT 8
31459: PUSH
31460: LD_INT 9
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: PUSH
31468: LD_VAR 0 4
31472: ARRAY
31473: ST_TO_ADDR
// end ;
31474: LD_VAR 0 2
31478: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31479: LD_INT 0
31481: PPUSH
31482: PPUSH
31483: PPUSH
// if not mines then
31484: LD_VAR 0 2
31488: NOT
31489: IFFALSE 31493
// exit ;
31491: GO 31637
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31493: LD_ADDR_VAR 0 5
31497: PUSH
31498: LD_INT 81
31500: PUSH
31501: LD_VAR 0 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: LD_INT 21
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PPUSH
31531: CALL_OW 69
31535: ST_TO_ADDR
// for i in mines do
31536: LD_ADDR_VAR 0 4
31540: PUSH
31541: LD_VAR 0 2
31545: PUSH
31546: FOR_IN
31547: IFFALSE 31635
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31549: LD_VAR 0 4
31553: PUSH
31554: LD_INT 1
31556: ARRAY
31557: PPUSH
31558: LD_VAR 0 4
31562: PUSH
31563: LD_INT 2
31565: ARRAY
31566: PPUSH
31567: CALL_OW 458
31571: NOT
31572: IFFALSE 31576
// continue ;
31574: GO 31546
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31576: LD_VAR 0 4
31580: PUSH
31581: LD_INT 1
31583: ARRAY
31584: PPUSH
31585: LD_VAR 0 4
31589: PUSH
31590: LD_INT 2
31592: ARRAY
31593: PPUSH
31594: CALL_OW 428
31598: PUSH
31599: LD_VAR 0 5
31603: IN
31604: IFFALSE 31633
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31606: LD_VAR 0 4
31610: PUSH
31611: LD_INT 1
31613: ARRAY
31614: PPUSH
31615: LD_VAR 0 4
31619: PUSH
31620: LD_INT 2
31622: ARRAY
31623: PPUSH
31624: LD_VAR 0 1
31628: PPUSH
31629: CALL_OW 456
// end ;
31633: GO 31546
31635: POP
31636: POP
// end ;
31637: LD_VAR 0 3
31641: RET
// export function Count ( array ) ; var i ; begin
31642: LD_INT 0
31644: PPUSH
31645: PPUSH
// result := 0 ;
31646: LD_ADDR_VAR 0 2
31650: PUSH
31651: LD_INT 0
31653: ST_TO_ADDR
// for i in array do
31654: LD_ADDR_VAR 0 3
31658: PUSH
31659: LD_VAR 0 1
31663: PUSH
31664: FOR_IN
31665: IFFALSE 31689
// if i then
31667: LD_VAR 0 3
31671: IFFALSE 31687
// result := result + 1 ;
31673: LD_ADDR_VAR 0 2
31677: PUSH
31678: LD_VAR 0 2
31682: PUSH
31683: LD_INT 1
31685: PLUS
31686: ST_TO_ADDR
31687: GO 31664
31689: POP
31690: POP
// end ;
31691: LD_VAR 0 2
31695: RET
// export function IsEmpty ( building ) ; begin
31696: LD_INT 0
31698: PPUSH
// if not building then
31699: LD_VAR 0 1
31703: NOT
31704: IFFALSE 31708
// exit ;
31706: GO 31751
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31708: LD_ADDR_VAR 0 2
31712: PUSH
31713: LD_VAR 0 1
31717: PUSH
31718: LD_INT 22
31720: PUSH
31721: LD_VAR 0 1
31725: PPUSH
31726: CALL_OW 255
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 58
31737: PUSH
31738: EMPTY
31739: LIST
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PPUSH
31745: CALL_OW 69
31749: IN
31750: ST_TO_ADDR
// end ;
31751: LD_VAR 0 2
31755: RET
// export function IsNotFull ( building ) ; begin
31756: LD_INT 0
31758: PPUSH
// if not building then
31759: LD_VAR 0 1
31763: NOT
31764: IFFALSE 31768
// exit ;
31766: GO 31787
// result := UnitsInside ( building ) < 6 ;
31768: LD_ADDR_VAR 0 2
31772: PUSH
31773: LD_VAR 0 1
31777: PPUSH
31778: CALL_OW 313
31782: PUSH
31783: LD_INT 6
31785: LESS
31786: ST_TO_ADDR
// end ;
31787: LD_VAR 0 2
31791: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31792: LD_INT 0
31794: PPUSH
31795: PPUSH
31796: PPUSH
31797: PPUSH
// tmp := [ ] ;
31798: LD_ADDR_VAR 0 3
31802: PUSH
31803: EMPTY
31804: ST_TO_ADDR
// list := [ ] ;
31805: LD_ADDR_VAR 0 5
31809: PUSH
31810: EMPTY
31811: ST_TO_ADDR
// for i = 16 to 25 do
31812: LD_ADDR_VAR 0 4
31816: PUSH
31817: DOUBLE
31818: LD_INT 16
31820: DEC
31821: ST_TO_ADDR
31822: LD_INT 25
31824: PUSH
31825: FOR_TO
31826: IFFALSE 31899
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31828: LD_ADDR_VAR 0 3
31832: PUSH
31833: LD_VAR 0 3
31837: PUSH
31838: LD_INT 22
31840: PUSH
31841: LD_VAR 0 1
31845: PPUSH
31846: CALL_OW 255
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 91
31857: PUSH
31858: LD_VAR 0 1
31862: PUSH
31863: LD_INT 6
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: LD_VAR 0 4
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: PUSH
31888: EMPTY
31889: LIST
31890: PPUSH
31891: CALL_OW 69
31895: ADD
31896: ST_TO_ADDR
31897: GO 31825
31899: POP
31900: POP
// for i = 1 to tmp do
31901: LD_ADDR_VAR 0 4
31905: PUSH
31906: DOUBLE
31907: LD_INT 1
31909: DEC
31910: ST_TO_ADDR
31911: LD_VAR 0 3
31915: PUSH
31916: FOR_TO
31917: IFFALSE 32005
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_VAR 0 5
31928: PUSH
31929: LD_VAR 0 3
31933: PUSH
31934: LD_VAR 0 4
31938: ARRAY
31939: PPUSH
31940: CALL_OW 266
31944: PUSH
31945: LD_VAR 0 3
31949: PUSH
31950: LD_VAR 0 4
31954: ARRAY
31955: PPUSH
31956: CALL_OW 250
31960: PUSH
31961: LD_VAR 0 3
31965: PUSH
31966: LD_VAR 0 4
31970: ARRAY
31971: PPUSH
31972: CALL_OW 251
31976: PUSH
31977: LD_VAR 0 3
31981: PUSH
31982: LD_VAR 0 4
31986: ARRAY
31987: PPUSH
31988: CALL_OW 254
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: PUSH
31999: EMPTY
32000: LIST
32001: ADD
32002: ST_TO_ADDR
32003: GO 31916
32005: POP
32006: POP
// result := list ;
32007: LD_ADDR_VAR 0 2
32011: PUSH
32012: LD_VAR 0 5
32016: ST_TO_ADDR
// end ;
32017: LD_VAR 0 2
32021: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32022: LD_INT 0
32024: PPUSH
32025: PPUSH
32026: PPUSH
32027: PPUSH
32028: PPUSH
32029: PPUSH
32030: PPUSH
// if not factory then
32031: LD_VAR 0 1
32035: NOT
32036: IFFALSE 32040
// exit ;
32038: GO 32633
// if control = control_apeman then
32040: LD_VAR 0 4
32044: PUSH
32045: LD_INT 5
32047: EQUAL
32048: IFFALSE 32157
// begin tmp := UnitsInside ( factory ) ;
32050: LD_ADDR_VAR 0 8
32054: PUSH
32055: LD_VAR 0 1
32059: PPUSH
32060: CALL_OW 313
32064: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32065: LD_VAR 0 8
32069: PPUSH
32070: LD_INT 25
32072: PUSH
32073: LD_INT 12
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PPUSH
32080: CALL_OW 72
32084: NOT
32085: IFFALSE 32095
// control := control_manual ;
32087: LD_ADDR_VAR 0 4
32091: PUSH
32092: LD_INT 1
32094: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32095: LD_ADDR_VAR 0 8
32099: PUSH
32100: LD_VAR 0 1
32104: PPUSH
32105: CALL 31792 0 1
32109: ST_TO_ADDR
// if tmp then
32110: LD_VAR 0 8
32114: IFFALSE 32157
// begin for i in tmp do
32116: LD_ADDR_VAR 0 7
32120: PUSH
32121: LD_VAR 0 8
32125: PUSH
32126: FOR_IN
32127: IFFALSE 32155
// if i [ 1 ] = b_ext_radio then
32129: LD_VAR 0 7
32133: PUSH
32134: LD_INT 1
32136: ARRAY
32137: PUSH
32138: LD_INT 22
32140: EQUAL
32141: IFFALSE 32153
// begin control := control_remote ;
32143: LD_ADDR_VAR 0 4
32147: PUSH
32148: LD_INT 2
32150: ST_TO_ADDR
// break ;
32151: GO 32155
// end ;
32153: GO 32126
32155: POP
32156: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32157: LD_VAR 0 1
32161: PPUSH
32162: LD_VAR 0 2
32166: PPUSH
32167: LD_VAR 0 3
32171: PPUSH
32172: LD_VAR 0 4
32176: PPUSH
32177: LD_VAR 0 5
32181: PPUSH
32182: CALL_OW 448
32186: IFFALSE 32221
// begin result := [ chassis , engine , control , weapon ] ;
32188: LD_ADDR_VAR 0 6
32192: PUSH
32193: LD_VAR 0 2
32197: PUSH
32198: LD_VAR 0 3
32202: PUSH
32203: LD_VAR 0 4
32207: PUSH
32208: LD_VAR 0 5
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: ST_TO_ADDR
// exit ;
32219: GO 32633
// end ; _chassis := AvailableChassisList ( factory ) ;
32221: LD_ADDR_VAR 0 9
32225: PUSH
32226: LD_VAR 0 1
32230: PPUSH
32231: CALL_OW 475
32235: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32236: LD_ADDR_VAR 0 11
32240: PUSH
32241: LD_VAR 0 1
32245: PPUSH
32246: CALL_OW 476
32250: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32251: LD_ADDR_VAR 0 12
32255: PUSH
32256: LD_VAR 0 1
32260: PPUSH
32261: CALL_OW 477
32265: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32266: LD_ADDR_VAR 0 10
32270: PUSH
32271: LD_VAR 0 1
32275: PPUSH
32276: CALL_OW 478
32280: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32281: LD_VAR 0 9
32285: NOT
32286: PUSH
32287: LD_VAR 0 11
32291: NOT
32292: OR
32293: PUSH
32294: LD_VAR 0 12
32298: NOT
32299: OR
32300: PUSH
32301: LD_VAR 0 10
32305: NOT
32306: OR
32307: IFFALSE 32342
// begin result := [ chassis , engine , control , weapon ] ;
32309: LD_ADDR_VAR 0 6
32313: PUSH
32314: LD_VAR 0 2
32318: PUSH
32319: LD_VAR 0 3
32323: PUSH
32324: LD_VAR 0 4
32328: PUSH
32329: LD_VAR 0 5
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: ST_TO_ADDR
// exit ;
32340: GO 32633
// end ; if not chassis in _chassis then
32342: LD_VAR 0 2
32346: PUSH
32347: LD_VAR 0 9
32351: IN
32352: NOT
32353: IFFALSE 32379
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32355: LD_ADDR_VAR 0 2
32359: PUSH
32360: LD_VAR 0 9
32364: PUSH
32365: LD_INT 1
32367: PPUSH
32368: LD_VAR 0 9
32372: PPUSH
32373: CALL_OW 12
32377: ARRAY
32378: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32379: LD_VAR 0 2
32383: PPUSH
32384: LD_VAR 0 3
32388: PPUSH
32389: CALL 32638 0 2
32393: NOT
32394: IFFALSE 32453
// repeat engine := _engine [ 1 ] ;
32396: LD_ADDR_VAR 0 3
32400: PUSH
32401: LD_VAR 0 11
32405: PUSH
32406: LD_INT 1
32408: ARRAY
32409: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32410: LD_ADDR_VAR 0 11
32414: PUSH
32415: LD_VAR 0 11
32419: PPUSH
32420: LD_INT 1
32422: PPUSH
32423: CALL_OW 3
32427: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32428: LD_VAR 0 2
32432: PPUSH
32433: LD_VAR 0 3
32437: PPUSH
32438: CALL 32638 0 2
32442: PUSH
32443: LD_VAR 0 11
32447: PUSH
32448: EMPTY
32449: EQUAL
32450: OR
32451: IFFALSE 32396
// if not control in _control then
32453: LD_VAR 0 4
32457: PUSH
32458: LD_VAR 0 12
32462: IN
32463: NOT
32464: IFFALSE 32490
// control := _control [ rand ( 1 , _control ) ] ;
32466: LD_ADDR_VAR 0 4
32470: PUSH
32471: LD_VAR 0 12
32475: PUSH
32476: LD_INT 1
32478: PPUSH
32479: LD_VAR 0 12
32483: PPUSH
32484: CALL_OW 12
32488: ARRAY
32489: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32490: LD_VAR 0 2
32494: PPUSH
32495: LD_VAR 0 5
32499: PPUSH
32500: CALL 32858 0 2
32504: NOT
32505: IFFALSE 32564
// repeat weapon := _weapon [ 1 ] ;
32507: LD_ADDR_VAR 0 5
32511: PUSH
32512: LD_VAR 0 10
32516: PUSH
32517: LD_INT 1
32519: ARRAY
32520: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32521: LD_ADDR_VAR 0 10
32525: PUSH
32526: LD_VAR 0 10
32530: PPUSH
32531: LD_INT 1
32533: PPUSH
32534: CALL_OW 3
32538: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32539: LD_VAR 0 2
32543: PPUSH
32544: LD_VAR 0 5
32548: PPUSH
32549: CALL 32858 0 2
32553: PUSH
32554: LD_VAR 0 10
32558: PUSH
32559: EMPTY
32560: EQUAL
32561: OR
32562: IFFALSE 32507
// result := [ ] ;
32564: LD_ADDR_VAR 0 6
32568: PUSH
32569: EMPTY
32570: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32571: LD_VAR 0 1
32575: PPUSH
32576: LD_VAR 0 2
32580: PPUSH
32581: LD_VAR 0 3
32585: PPUSH
32586: LD_VAR 0 4
32590: PPUSH
32591: LD_VAR 0 5
32595: PPUSH
32596: CALL_OW 448
32600: IFFALSE 32633
// result := [ chassis , engine , control , weapon ] ;
32602: LD_ADDR_VAR 0 6
32606: PUSH
32607: LD_VAR 0 2
32611: PUSH
32612: LD_VAR 0 3
32616: PUSH
32617: LD_VAR 0 4
32621: PUSH
32622: LD_VAR 0 5
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: ST_TO_ADDR
// end ;
32633: LD_VAR 0 6
32637: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32638: LD_INT 0
32640: PPUSH
// if not chassis or not engine then
32641: LD_VAR 0 1
32645: NOT
32646: PUSH
32647: LD_VAR 0 2
32651: NOT
32652: OR
32653: IFFALSE 32657
// exit ;
32655: GO 32853
// case engine of engine_solar :
32657: LD_VAR 0 2
32661: PUSH
32662: LD_INT 2
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32708
32670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32671: LD_ADDR_VAR 0 3
32675: PUSH
32676: LD_INT 11
32678: PUSH
32679: LD_INT 12
32681: PUSH
32682: LD_INT 13
32684: PUSH
32685: LD_INT 14
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: LD_INT 3
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
32706: GO 32837
32708: LD_INT 1
32710: DOUBLE
32711: EQUAL
32712: IFTRUE 32716
32714: GO 32778
32716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32717: LD_ADDR_VAR 0 3
32721: PUSH
32722: LD_INT 11
32724: PUSH
32725: LD_INT 12
32727: PUSH
32728: LD_INT 13
32730: PUSH
32731: LD_INT 14
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: LD_INT 3
32742: PUSH
32743: LD_INT 4
32745: PUSH
32746: LD_INT 5
32748: PUSH
32749: LD_INT 21
32751: PUSH
32752: LD_INT 23
32754: PUSH
32755: LD_INT 22
32757: PUSH
32758: LD_INT 24
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: ST_TO_ADDR
32776: GO 32837
32778: LD_INT 3
32780: DOUBLE
32781: EQUAL
32782: IFTRUE 32786
32784: GO 32836
32786: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_INT 13
32794: PUSH
32795: LD_INT 14
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: LD_INT 4
32806: PUSH
32807: LD_INT 5
32809: PUSH
32810: LD_INT 21
32812: PUSH
32813: LD_INT 22
32815: PUSH
32816: LD_INT 23
32818: PUSH
32819: LD_INT 24
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: ST_TO_ADDR
32834: GO 32837
32836: POP
// result := ( chassis in result ) ;
32837: LD_ADDR_VAR 0 3
32841: PUSH
32842: LD_VAR 0 1
32846: PUSH
32847: LD_VAR 0 3
32851: IN
32852: ST_TO_ADDR
// end ;
32853: LD_VAR 0 3
32857: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32858: LD_INT 0
32860: PPUSH
// if not chassis or not weapon then
32861: LD_VAR 0 1
32865: NOT
32866: PUSH
32867: LD_VAR 0 2
32871: NOT
32872: OR
32873: IFFALSE 32877
// exit ;
32875: GO 33903
// case weapon of us_machine_gun :
32877: LD_VAR 0 2
32881: PUSH
32882: LD_INT 2
32884: DOUBLE
32885: EQUAL
32886: IFTRUE 32890
32888: GO 32920
32890: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: LD_INT 4
32907: PUSH
32908: LD_INT 5
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: ST_TO_ADDR
32918: GO 33887
32920: LD_INT 3
32922: DOUBLE
32923: EQUAL
32924: IFTRUE 32928
32926: GO 32958
32928: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32929: LD_ADDR_VAR 0 3
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: LD_INT 4
32945: PUSH
32946: LD_INT 5
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: ST_TO_ADDR
32956: GO 33887
32958: LD_INT 11
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 32996
32966: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32967: LD_ADDR_VAR 0 3
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 3
32980: PUSH
32981: LD_INT 4
32983: PUSH
32984: LD_INT 5
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: ST_TO_ADDR
32994: GO 33887
32996: LD_INT 4
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33004
33002: GO 33030
33004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33005: LD_ADDR_VAR 0 3
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: LD_INT 4
33018: PUSH
33019: LD_INT 5
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: ST_TO_ADDR
33028: GO 33887
33030: LD_INT 5
33032: DOUBLE
33033: EQUAL
33034: IFTRUE 33038
33036: GO 33064
33038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33039: LD_ADDR_VAR 0 3
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: LD_INT 4
33052: PUSH
33053: LD_INT 5
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: ST_TO_ADDR
33062: GO 33887
33064: LD_INT 9
33066: DOUBLE
33067: EQUAL
33068: IFTRUE 33072
33070: GO 33098
33072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33073: LD_ADDR_VAR 0 3
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 4
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: ST_TO_ADDR
33096: GO 33887
33098: LD_INT 7
33100: DOUBLE
33101: EQUAL
33102: IFTRUE 33106
33104: GO 33132
33106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33107: LD_ADDR_VAR 0 3
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: LD_INT 4
33120: PUSH
33121: LD_INT 5
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: ST_TO_ADDR
33130: GO 33887
33132: LD_INT 12
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33166
33140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33141: LD_ADDR_VAR 0 3
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: LD_INT 3
33151: PUSH
33152: LD_INT 4
33154: PUSH
33155: LD_INT 5
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: ST_TO_ADDR
33164: GO 33887
33166: LD_INT 13
33168: DOUBLE
33169: EQUAL
33170: IFTRUE 33174
33172: GO 33200
33174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33175: LD_ADDR_VAR 0 3
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: LD_INT 5
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: ST_TO_ADDR
33198: GO 33887
33200: LD_INT 14
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33226
33208: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33209: LD_ADDR_VAR 0 3
33213: PUSH
33214: LD_INT 4
33216: PUSH
33217: LD_INT 5
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: ST_TO_ADDR
33224: GO 33887
33226: LD_INT 6
33228: DOUBLE
33229: EQUAL
33230: IFTRUE 33234
33232: GO 33252
33234: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33235: LD_ADDR_VAR 0 3
33239: PUSH
33240: LD_INT 4
33242: PUSH
33243: LD_INT 5
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: ST_TO_ADDR
33250: GO 33887
33252: LD_INT 10
33254: DOUBLE
33255: EQUAL
33256: IFTRUE 33260
33258: GO 33278
33260: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33261: LD_ADDR_VAR 0 3
33265: PUSH
33266: LD_INT 4
33268: PUSH
33269: LD_INT 5
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: ST_TO_ADDR
33276: GO 33887
33278: LD_INT 22
33280: DOUBLE
33281: EQUAL
33282: IFTRUE 33286
33284: GO 33312
33286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33287: LD_ADDR_VAR 0 3
33291: PUSH
33292: LD_INT 11
33294: PUSH
33295: LD_INT 12
33297: PUSH
33298: LD_INT 13
33300: PUSH
33301: LD_INT 14
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: ST_TO_ADDR
33310: GO 33887
33312: LD_INT 23
33314: DOUBLE
33315: EQUAL
33316: IFTRUE 33320
33318: GO 33346
33320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33321: LD_ADDR_VAR 0 3
33325: PUSH
33326: LD_INT 11
33328: PUSH
33329: LD_INT 12
33331: PUSH
33332: LD_INT 13
33334: PUSH
33335: LD_INT 14
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: ST_TO_ADDR
33344: GO 33887
33346: LD_INT 24
33348: DOUBLE
33349: EQUAL
33350: IFTRUE 33354
33352: GO 33380
33354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33355: LD_ADDR_VAR 0 3
33359: PUSH
33360: LD_INT 11
33362: PUSH
33363: LD_INT 12
33365: PUSH
33366: LD_INT 13
33368: PUSH
33369: LD_INT 14
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: ST_TO_ADDR
33378: GO 33887
33380: LD_INT 30
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33388
33386: GO 33414
33388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33389: LD_ADDR_VAR 0 3
33393: PUSH
33394: LD_INT 11
33396: PUSH
33397: LD_INT 12
33399: PUSH
33400: LD_INT 13
33402: PUSH
33403: LD_INT 14
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: ST_TO_ADDR
33412: GO 33887
33414: LD_INT 25
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 33440
33422: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33423: LD_ADDR_VAR 0 3
33427: PUSH
33428: LD_INT 13
33430: PUSH
33431: LD_INT 14
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: ST_TO_ADDR
33438: GO 33887
33440: LD_INT 27
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33466
33448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33449: LD_ADDR_VAR 0 3
33453: PUSH
33454: LD_INT 13
33456: PUSH
33457: LD_INT 14
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: ST_TO_ADDR
33464: GO 33887
33466: LD_INT 28
33468: DOUBLE
33469: EQUAL
33470: IFTRUE 33474
33472: GO 33492
33474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33475: LD_ADDR_VAR 0 3
33479: PUSH
33480: LD_INT 13
33482: PUSH
33483: LD_INT 14
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: ST_TO_ADDR
33490: GO 33887
33492: LD_INT 29
33494: DOUBLE
33495: EQUAL
33496: IFTRUE 33500
33498: GO 33518
33500: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33501: LD_ADDR_VAR 0 3
33505: PUSH
33506: LD_INT 13
33508: PUSH
33509: LD_INT 14
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: ST_TO_ADDR
33516: GO 33887
33518: LD_INT 31
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33526
33524: GO 33544
33526: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33527: LD_ADDR_VAR 0 3
33531: PUSH
33532: LD_INT 13
33534: PUSH
33535: LD_INT 14
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: ST_TO_ADDR
33542: GO 33887
33544: LD_INT 26
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33552
33550: GO 33570
33552: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33553: LD_ADDR_VAR 0 3
33557: PUSH
33558: LD_INT 13
33560: PUSH
33561: LD_INT 14
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: ST_TO_ADDR
33568: GO 33887
33570: LD_INT 42
33572: DOUBLE
33573: EQUAL
33574: IFTRUE 33578
33576: GO 33604
33578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33579: LD_ADDR_VAR 0 3
33583: PUSH
33584: LD_INT 21
33586: PUSH
33587: LD_INT 22
33589: PUSH
33590: LD_INT 23
33592: PUSH
33593: LD_INT 24
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
33602: GO 33887
33604: LD_INT 43
33606: DOUBLE
33607: EQUAL
33608: IFTRUE 33612
33610: GO 33638
33612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: LD_INT 21
33620: PUSH
33621: LD_INT 22
33623: PUSH
33624: LD_INT 23
33626: PUSH
33627: LD_INT 24
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: ST_TO_ADDR
33636: GO 33887
33638: LD_INT 44
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33646
33644: GO 33672
33646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: LD_INT 21
33654: PUSH
33655: LD_INT 22
33657: PUSH
33658: LD_INT 23
33660: PUSH
33661: LD_INT 24
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
33670: GO 33887
33672: LD_INT 45
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 33706
33680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: LD_INT 21
33688: PUSH
33689: LD_INT 22
33691: PUSH
33692: LD_INT 23
33694: PUSH
33695: LD_INT 24
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
33704: GO 33887
33706: LD_INT 49
33708: DOUBLE
33709: EQUAL
33710: IFTRUE 33714
33712: GO 33740
33714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_INT 21
33722: PUSH
33723: LD_INT 22
33725: PUSH
33726: LD_INT 23
33728: PUSH
33729: LD_INT 24
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: ST_TO_ADDR
33738: GO 33887
33740: LD_INT 51
33742: DOUBLE
33743: EQUAL
33744: IFTRUE 33748
33746: GO 33774
33748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33749: LD_ADDR_VAR 0 3
33753: PUSH
33754: LD_INT 21
33756: PUSH
33757: LD_INT 22
33759: PUSH
33760: LD_INT 23
33762: PUSH
33763: LD_INT 24
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
33772: GO 33887
33774: LD_INT 52
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 33808
33782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33783: LD_ADDR_VAR 0 3
33787: PUSH
33788: LD_INT 21
33790: PUSH
33791: LD_INT 22
33793: PUSH
33794: LD_INT 23
33796: PUSH
33797: LD_INT 24
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: ST_TO_ADDR
33806: GO 33887
33808: LD_INT 53
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33816
33814: GO 33834
33816: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 23
33824: PUSH
33825: LD_INT 24
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: ST_TO_ADDR
33832: GO 33887
33834: LD_INT 46
33836: DOUBLE
33837: EQUAL
33838: IFTRUE 33842
33840: GO 33860
33842: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33843: LD_ADDR_VAR 0 3
33847: PUSH
33848: LD_INT 23
33850: PUSH
33851: LD_INT 24
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: ST_TO_ADDR
33858: GO 33887
33860: LD_INT 47
33862: DOUBLE
33863: EQUAL
33864: IFTRUE 33868
33866: GO 33886
33868: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33869: LD_ADDR_VAR 0 3
33873: PUSH
33874: LD_INT 23
33876: PUSH
33877: LD_INT 24
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: ST_TO_ADDR
33884: GO 33887
33886: POP
// result := ( chassis in result ) ;
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_VAR 0 1
33896: PUSH
33897: LD_VAR 0 3
33901: IN
33902: ST_TO_ADDR
// end ;
33903: LD_VAR 0 3
33907: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33908: LD_INT 0
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
// result := array ;
33917: LD_ADDR_VAR 0 5
33921: PUSH
33922: LD_VAR 0 1
33926: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33927: LD_VAR 0 1
33931: NOT
33932: PUSH
33933: LD_VAR 0 2
33937: NOT
33938: OR
33939: PUSH
33940: LD_VAR 0 3
33944: NOT
33945: OR
33946: PUSH
33947: LD_VAR 0 2
33951: PUSH
33952: LD_VAR 0 1
33956: GREATER
33957: OR
33958: PUSH
33959: LD_VAR 0 3
33963: PUSH
33964: LD_VAR 0 1
33968: GREATER
33969: OR
33970: IFFALSE 33974
// exit ;
33972: GO 34270
// if direction then
33974: LD_VAR 0 4
33978: IFFALSE 34042
// begin d := 1 ;
33980: LD_ADDR_VAR 0 9
33984: PUSH
33985: LD_INT 1
33987: ST_TO_ADDR
// if i_from > i_to then
33988: LD_VAR 0 2
33992: PUSH
33993: LD_VAR 0 3
33997: GREATER
33998: IFFALSE 34024
// length := ( array - i_from ) + i_to else
34000: LD_ADDR_VAR 0 11
34004: PUSH
34005: LD_VAR 0 1
34009: PUSH
34010: LD_VAR 0 2
34014: MINUS
34015: PUSH
34016: LD_VAR 0 3
34020: PLUS
34021: ST_TO_ADDR
34022: GO 34040
// length := i_to - i_from ;
34024: LD_ADDR_VAR 0 11
34028: PUSH
34029: LD_VAR 0 3
34033: PUSH
34034: LD_VAR 0 2
34038: MINUS
34039: ST_TO_ADDR
// end else
34040: GO 34103
// begin d := - 1 ;
34042: LD_ADDR_VAR 0 9
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: ST_TO_ADDR
// if i_from > i_to then
34051: LD_VAR 0 2
34055: PUSH
34056: LD_VAR 0 3
34060: GREATER
34061: IFFALSE 34081
// length := i_from - i_to else
34063: LD_ADDR_VAR 0 11
34067: PUSH
34068: LD_VAR 0 2
34072: PUSH
34073: LD_VAR 0 3
34077: MINUS
34078: ST_TO_ADDR
34079: GO 34103
// length := ( array - i_to ) + i_from ;
34081: LD_ADDR_VAR 0 11
34085: PUSH
34086: LD_VAR 0 1
34090: PUSH
34091: LD_VAR 0 3
34095: MINUS
34096: PUSH
34097: LD_VAR 0 2
34101: PLUS
34102: ST_TO_ADDR
// end ; if not length then
34103: LD_VAR 0 11
34107: NOT
34108: IFFALSE 34112
// exit ;
34110: GO 34270
// tmp := array ;
34112: LD_ADDR_VAR 0 10
34116: PUSH
34117: LD_VAR 0 1
34121: ST_TO_ADDR
// for i = 1 to length do
34122: LD_ADDR_VAR 0 6
34126: PUSH
34127: DOUBLE
34128: LD_INT 1
34130: DEC
34131: ST_TO_ADDR
34132: LD_VAR 0 11
34136: PUSH
34137: FOR_TO
34138: IFFALSE 34258
// begin for j = 1 to array do
34140: LD_ADDR_VAR 0 7
34144: PUSH
34145: DOUBLE
34146: LD_INT 1
34148: DEC
34149: ST_TO_ADDR
34150: LD_VAR 0 1
34154: PUSH
34155: FOR_TO
34156: IFFALSE 34244
// begin k := j + d ;
34158: LD_ADDR_VAR 0 8
34162: PUSH
34163: LD_VAR 0 7
34167: PUSH
34168: LD_VAR 0 9
34172: PLUS
34173: ST_TO_ADDR
// if k > array then
34174: LD_VAR 0 8
34178: PUSH
34179: LD_VAR 0 1
34183: GREATER
34184: IFFALSE 34194
// k := 1 ;
34186: LD_ADDR_VAR 0 8
34190: PUSH
34191: LD_INT 1
34193: ST_TO_ADDR
// if not k then
34194: LD_VAR 0 8
34198: NOT
34199: IFFALSE 34211
// k := array ;
34201: LD_ADDR_VAR 0 8
34205: PUSH
34206: LD_VAR 0 1
34210: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34211: LD_ADDR_VAR 0 10
34215: PUSH
34216: LD_VAR 0 10
34220: PPUSH
34221: LD_VAR 0 8
34225: PPUSH
34226: LD_VAR 0 1
34230: PUSH
34231: LD_VAR 0 7
34235: ARRAY
34236: PPUSH
34237: CALL_OW 1
34241: ST_TO_ADDR
// end ;
34242: GO 34155
34244: POP
34245: POP
// array := tmp ;
34246: LD_ADDR_VAR 0 1
34250: PUSH
34251: LD_VAR 0 10
34255: ST_TO_ADDR
// end ;
34256: GO 34137
34258: POP
34259: POP
// result := array ;
34260: LD_ADDR_VAR 0 5
34264: PUSH
34265: LD_VAR 0 1
34269: ST_TO_ADDR
// end ;
34270: LD_VAR 0 5
34274: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34275: LD_INT 0
34277: PPUSH
34278: PPUSH
// result := 0 ;
34279: LD_ADDR_VAR 0 3
34283: PUSH
34284: LD_INT 0
34286: ST_TO_ADDR
// if not array or not value in array then
34287: LD_VAR 0 1
34291: NOT
34292: PUSH
34293: LD_VAR 0 2
34297: PUSH
34298: LD_VAR 0 1
34302: IN
34303: NOT
34304: OR
34305: IFFALSE 34309
// exit ;
34307: GO 34363
// for i = 1 to array do
34309: LD_ADDR_VAR 0 4
34313: PUSH
34314: DOUBLE
34315: LD_INT 1
34317: DEC
34318: ST_TO_ADDR
34319: LD_VAR 0 1
34323: PUSH
34324: FOR_TO
34325: IFFALSE 34361
// if value = array [ i ] then
34327: LD_VAR 0 2
34331: PUSH
34332: LD_VAR 0 1
34336: PUSH
34337: LD_VAR 0 4
34341: ARRAY
34342: EQUAL
34343: IFFALSE 34359
// begin result := i ;
34345: LD_ADDR_VAR 0 3
34349: PUSH
34350: LD_VAR 0 4
34354: ST_TO_ADDR
// exit ;
34355: POP
34356: POP
34357: GO 34363
// end ;
34359: GO 34324
34361: POP
34362: POP
// end ;
34363: LD_VAR 0 3
34367: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34368: LD_INT 0
34370: PPUSH
// vc_chassis := chassis ;
34371: LD_ADDR_OWVAR 37
34375: PUSH
34376: LD_VAR 0 1
34380: ST_TO_ADDR
// vc_engine := engine ;
34381: LD_ADDR_OWVAR 39
34385: PUSH
34386: LD_VAR 0 2
34390: ST_TO_ADDR
// vc_control := control ;
34391: LD_ADDR_OWVAR 38
34395: PUSH
34396: LD_VAR 0 3
34400: ST_TO_ADDR
// vc_weapon := weapon ;
34401: LD_ADDR_OWVAR 40
34405: PUSH
34406: LD_VAR 0 4
34410: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34411: LD_ADDR_OWVAR 41
34415: PUSH
34416: LD_VAR 0 5
34420: ST_TO_ADDR
// end ;
34421: LD_VAR 0 6
34425: RET
// export function WantPlant ( unit ) ; var task ; begin
34426: LD_INT 0
34428: PPUSH
34429: PPUSH
// result := false ;
34430: LD_ADDR_VAR 0 2
34434: PUSH
34435: LD_INT 0
34437: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34438: LD_ADDR_VAR 0 3
34442: PUSH
34443: LD_VAR 0 1
34447: PPUSH
34448: CALL_OW 437
34452: ST_TO_ADDR
// if task then
34453: LD_VAR 0 3
34457: IFFALSE 34485
// if task [ 1 ] [ 1 ] = p then
34459: LD_VAR 0 3
34463: PUSH
34464: LD_INT 1
34466: ARRAY
34467: PUSH
34468: LD_INT 1
34470: ARRAY
34471: PUSH
34472: LD_STRING p
34474: EQUAL
34475: IFFALSE 34485
// result := true ;
34477: LD_ADDR_VAR 0 2
34481: PUSH
34482: LD_INT 1
34484: ST_TO_ADDR
// end ;
34485: LD_VAR 0 2
34489: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34490: LD_INT 0
34492: PPUSH
34493: PPUSH
34494: PPUSH
34495: PPUSH
// if pos < 1 then
34496: LD_VAR 0 2
34500: PUSH
34501: LD_INT 1
34503: LESS
34504: IFFALSE 34508
// exit ;
34506: GO 34811
// if pos = 1 then
34508: LD_VAR 0 2
34512: PUSH
34513: LD_INT 1
34515: EQUAL
34516: IFFALSE 34549
// result := Replace ( arr , pos [ 1 ] , value ) else
34518: LD_ADDR_VAR 0 4
34522: PUSH
34523: LD_VAR 0 1
34527: PPUSH
34528: LD_VAR 0 2
34532: PUSH
34533: LD_INT 1
34535: ARRAY
34536: PPUSH
34537: LD_VAR 0 3
34541: PPUSH
34542: CALL_OW 1
34546: ST_TO_ADDR
34547: GO 34811
// begin tmp := arr ;
34549: LD_ADDR_VAR 0 6
34553: PUSH
34554: LD_VAR 0 1
34558: ST_TO_ADDR
// s_arr := [ tmp ] ;
34559: LD_ADDR_VAR 0 7
34563: PUSH
34564: LD_VAR 0 6
34568: PUSH
34569: EMPTY
34570: LIST
34571: ST_TO_ADDR
// for i = 1 to pos - 1 do
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: DOUBLE
34578: LD_INT 1
34580: DEC
34581: ST_TO_ADDR
34582: LD_VAR 0 2
34586: PUSH
34587: LD_INT 1
34589: MINUS
34590: PUSH
34591: FOR_TO
34592: IFFALSE 34637
// begin tmp := tmp [ pos [ i ] ] ;
34594: LD_ADDR_VAR 0 6
34598: PUSH
34599: LD_VAR 0 6
34603: PUSH
34604: LD_VAR 0 2
34608: PUSH
34609: LD_VAR 0 5
34613: ARRAY
34614: ARRAY
34615: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34616: LD_ADDR_VAR 0 7
34620: PUSH
34621: LD_VAR 0 7
34625: PUSH
34626: LD_VAR 0 6
34630: PUSH
34631: EMPTY
34632: LIST
34633: ADD
34634: ST_TO_ADDR
// end ;
34635: GO 34591
34637: POP
34638: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34639: LD_ADDR_VAR 0 6
34643: PUSH
34644: LD_VAR 0 6
34648: PPUSH
34649: LD_VAR 0 2
34653: PUSH
34654: LD_VAR 0 2
34658: ARRAY
34659: PPUSH
34660: LD_VAR 0 3
34664: PPUSH
34665: CALL_OW 1
34669: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34670: LD_ADDR_VAR 0 7
34674: PUSH
34675: LD_VAR 0 7
34679: PPUSH
34680: LD_VAR 0 7
34684: PPUSH
34685: LD_VAR 0 6
34689: PPUSH
34690: CALL_OW 1
34694: ST_TO_ADDR
// for i = s_arr downto 2 do
34695: LD_ADDR_VAR 0 5
34699: PUSH
34700: DOUBLE
34701: LD_VAR 0 7
34705: INC
34706: ST_TO_ADDR
34707: LD_INT 2
34709: PUSH
34710: FOR_DOWNTO
34711: IFFALSE 34795
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34713: LD_ADDR_VAR 0 6
34717: PUSH
34718: LD_VAR 0 7
34722: PUSH
34723: LD_VAR 0 5
34727: PUSH
34728: LD_INT 1
34730: MINUS
34731: ARRAY
34732: PPUSH
34733: LD_VAR 0 2
34737: PUSH
34738: LD_VAR 0 5
34742: PUSH
34743: LD_INT 1
34745: MINUS
34746: ARRAY
34747: PPUSH
34748: LD_VAR 0 7
34752: PUSH
34753: LD_VAR 0 5
34757: ARRAY
34758: PPUSH
34759: CALL_OW 1
34763: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34764: LD_ADDR_VAR 0 7
34768: PUSH
34769: LD_VAR 0 7
34773: PPUSH
34774: LD_VAR 0 5
34778: PUSH
34779: LD_INT 1
34781: MINUS
34782: PPUSH
34783: LD_VAR 0 6
34787: PPUSH
34788: CALL_OW 1
34792: ST_TO_ADDR
// end ;
34793: GO 34710
34795: POP
34796: POP
// result := s_arr [ 1 ] ;
34797: LD_ADDR_VAR 0 4
34801: PUSH
34802: LD_VAR 0 7
34806: PUSH
34807: LD_INT 1
34809: ARRAY
34810: ST_TO_ADDR
// end ; end ;
34811: LD_VAR 0 4
34815: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34816: LD_INT 0
34818: PPUSH
34819: PPUSH
// if not list then
34820: LD_VAR 0 1
34824: NOT
34825: IFFALSE 34829
// exit ;
34827: GO 34920
// i := list [ pos1 ] ;
34829: LD_ADDR_VAR 0 5
34833: PUSH
34834: LD_VAR 0 1
34838: PUSH
34839: LD_VAR 0 2
34843: ARRAY
34844: ST_TO_ADDR
// if not i then
34845: LD_VAR 0 5
34849: NOT
34850: IFFALSE 34854
// exit ;
34852: GO 34920
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34854: LD_ADDR_VAR 0 1
34858: PUSH
34859: LD_VAR 0 1
34863: PPUSH
34864: LD_VAR 0 2
34868: PPUSH
34869: LD_VAR 0 1
34873: PUSH
34874: LD_VAR 0 3
34878: ARRAY
34879: PPUSH
34880: CALL_OW 1
34884: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34885: LD_ADDR_VAR 0 1
34889: PUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: LD_VAR 0 3
34899: PPUSH
34900: LD_VAR 0 5
34904: PPUSH
34905: CALL_OW 1
34909: ST_TO_ADDR
// result := list ;
34910: LD_ADDR_VAR 0 4
34914: PUSH
34915: LD_VAR 0 1
34919: ST_TO_ADDR
// end ;
34920: LD_VAR 0 4
34924: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34925: LD_INT 0
34927: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34928: LD_ADDR_VAR 0 5
34932: PUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 250
34942: PPUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 251
34952: PPUSH
34953: LD_VAR 0 2
34957: PPUSH
34958: LD_VAR 0 3
34962: PPUSH
34963: LD_VAR 0 4
34967: PPUSH
34968: CALL 34978 0 5
34972: ST_TO_ADDR
// end ;
34973: LD_VAR 0 5
34977: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34978: LD_INT 0
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
// if not list then
34984: LD_VAR 0 3
34988: NOT
34989: IFFALSE 34993
// exit ;
34991: GO 35381
// result := [ ] ;
34993: LD_ADDR_VAR 0 6
34997: PUSH
34998: EMPTY
34999: ST_TO_ADDR
// for i in list do
35000: LD_ADDR_VAR 0 7
35004: PUSH
35005: LD_VAR 0 3
35009: PUSH
35010: FOR_IN
35011: IFFALSE 35213
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35013: LD_ADDR_VAR 0 9
35017: PUSH
35018: LD_VAR 0 7
35022: PPUSH
35023: LD_VAR 0 1
35027: PPUSH
35028: LD_VAR 0 2
35032: PPUSH
35033: CALL_OW 297
35037: ST_TO_ADDR
// if not result then
35038: LD_VAR 0 6
35042: NOT
35043: IFFALSE 35069
// result := [ [ i , tmp ] ] else
35045: LD_ADDR_VAR 0 6
35049: PUSH
35050: LD_VAR 0 7
35054: PUSH
35055: LD_VAR 0 9
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: ST_TO_ADDR
35067: GO 35211
// begin if result [ result ] [ 2 ] < tmp then
35069: LD_VAR 0 6
35073: PUSH
35074: LD_VAR 0 6
35078: ARRAY
35079: PUSH
35080: LD_INT 2
35082: ARRAY
35083: PUSH
35084: LD_VAR 0 9
35088: LESS
35089: IFFALSE 35131
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35091: LD_ADDR_VAR 0 6
35095: PUSH
35096: LD_VAR 0 6
35100: PPUSH
35101: LD_VAR 0 6
35105: PUSH
35106: LD_INT 1
35108: PLUS
35109: PPUSH
35110: LD_VAR 0 7
35114: PUSH
35115: LD_VAR 0 9
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PPUSH
35124: CALL_OW 2
35128: ST_TO_ADDR
35129: GO 35211
// for j = 1 to result do
35131: LD_ADDR_VAR 0 8
35135: PUSH
35136: DOUBLE
35137: LD_INT 1
35139: DEC
35140: ST_TO_ADDR
35141: LD_VAR 0 6
35145: PUSH
35146: FOR_TO
35147: IFFALSE 35209
// begin if tmp < result [ j ] [ 2 ] then
35149: LD_VAR 0 9
35153: PUSH
35154: LD_VAR 0 6
35158: PUSH
35159: LD_VAR 0 8
35163: ARRAY
35164: PUSH
35165: LD_INT 2
35167: ARRAY
35168: LESS
35169: IFFALSE 35207
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35171: LD_ADDR_VAR 0 6
35175: PUSH
35176: LD_VAR 0 6
35180: PPUSH
35181: LD_VAR 0 8
35185: PPUSH
35186: LD_VAR 0 7
35190: PUSH
35191: LD_VAR 0 9
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PPUSH
35200: CALL_OW 2
35204: ST_TO_ADDR
// break ;
35205: GO 35209
// end ; end ;
35207: GO 35146
35209: POP
35210: POP
// end ; end ;
35211: GO 35010
35213: POP
35214: POP
// if result and not asc then
35215: LD_VAR 0 6
35219: PUSH
35220: LD_VAR 0 4
35224: NOT
35225: AND
35226: IFFALSE 35301
// begin tmp := result ;
35228: LD_ADDR_VAR 0 9
35232: PUSH
35233: LD_VAR 0 6
35237: ST_TO_ADDR
// for i = tmp downto 1 do
35238: LD_ADDR_VAR 0 7
35242: PUSH
35243: DOUBLE
35244: LD_VAR 0 9
35248: INC
35249: ST_TO_ADDR
35250: LD_INT 1
35252: PUSH
35253: FOR_DOWNTO
35254: IFFALSE 35299
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35256: LD_ADDR_VAR 0 6
35260: PUSH
35261: LD_VAR 0 6
35265: PPUSH
35266: LD_VAR 0 9
35270: PUSH
35271: LD_VAR 0 7
35275: MINUS
35276: PUSH
35277: LD_INT 1
35279: PLUS
35280: PPUSH
35281: LD_VAR 0 9
35285: PUSH
35286: LD_VAR 0 7
35290: ARRAY
35291: PPUSH
35292: CALL_OW 1
35296: ST_TO_ADDR
35297: GO 35253
35299: POP
35300: POP
// end ; tmp := [ ] ;
35301: LD_ADDR_VAR 0 9
35305: PUSH
35306: EMPTY
35307: ST_TO_ADDR
// if mode then
35308: LD_VAR 0 5
35312: IFFALSE 35381
// begin for i = 1 to result do
35314: LD_ADDR_VAR 0 7
35318: PUSH
35319: DOUBLE
35320: LD_INT 1
35322: DEC
35323: ST_TO_ADDR
35324: LD_VAR 0 6
35328: PUSH
35329: FOR_TO
35330: IFFALSE 35369
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35332: LD_ADDR_VAR 0 9
35336: PUSH
35337: LD_VAR 0 9
35341: PPUSH
35342: LD_VAR 0 7
35346: PPUSH
35347: LD_VAR 0 6
35351: PUSH
35352: LD_VAR 0 7
35356: ARRAY
35357: PUSH
35358: LD_INT 1
35360: ARRAY
35361: PPUSH
35362: CALL_OW 1
35366: ST_TO_ADDR
35367: GO 35329
35369: POP
35370: POP
// result := tmp ;
35371: LD_ADDR_VAR 0 6
35375: PUSH
35376: LD_VAR 0 9
35380: ST_TO_ADDR
// end ; end ;
35381: LD_VAR 0 6
35385: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35386: LD_INT 0
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
35393: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35394: LD_ADDR_VAR 0 5
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: EMPTY
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// if not x or not y then
35416: LD_VAR 0 2
35420: NOT
35421: PUSH
35422: LD_VAR 0 3
35426: NOT
35427: OR
35428: IFFALSE 35432
// exit ;
35430: GO 37078
// if not range then
35432: LD_VAR 0 4
35436: NOT
35437: IFFALSE 35447
// range := 10 ;
35439: LD_ADDR_VAR 0 4
35443: PUSH
35444: LD_INT 10
35446: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35447: LD_ADDR_VAR 0 8
35451: PUSH
35452: LD_INT 81
35454: PUSH
35455: LD_VAR 0 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 92
35466: PUSH
35467: LD_VAR 0 2
35471: PUSH
35472: LD_VAR 0 3
35476: PUSH
35477: LD_VAR 0 4
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 3
35490: PUSH
35491: LD_INT 21
35493: PUSH
35494: LD_INT 3
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: LIST
35509: PPUSH
35510: CALL_OW 69
35514: ST_TO_ADDR
// if not tmp then
35515: LD_VAR 0 8
35519: NOT
35520: IFFALSE 35524
// exit ;
35522: GO 37078
// for i in tmp do
35524: LD_ADDR_VAR 0 6
35528: PUSH
35529: LD_VAR 0 8
35533: PUSH
35534: FOR_IN
35535: IFFALSE 37053
// begin points := [ 0 , 0 , 0 ] ;
35537: LD_ADDR_VAR 0 9
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: ST_TO_ADDR
// bpoints := 1 ;
35556: LD_ADDR_VAR 0 10
35560: PUSH
35561: LD_INT 1
35563: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35564: LD_VAR 0 6
35568: PPUSH
35569: CALL_OW 247
35573: PUSH
35574: LD_INT 1
35576: DOUBLE
35577: EQUAL
35578: IFTRUE 35582
35580: GO 36160
35582: POP
// begin if GetClass ( i ) = 1 then
35583: LD_VAR 0 6
35587: PPUSH
35588: CALL_OW 257
35592: PUSH
35593: LD_INT 1
35595: EQUAL
35596: IFFALSE 35617
// points := [ 10 , 5 , 3 ] ;
35598: LD_ADDR_VAR 0 9
35602: PUSH
35603: LD_INT 10
35605: PUSH
35606: LD_INT 5
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35617: LD_VAR 0 6
35621: PPUSH
35622: CALL_OW 257
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 3
35632: PUSH
35633: LD_INT 4
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: IN
35641: IFFALSE 35662
// points := [ 3 , 2 , 1 ] ;
35643: LD_ADDR_VAR 0 9
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: LD_INT 2
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35662: LD_VAR 0 6
35666: PPUSH
35667: CALL_OW 257
35671: PUSH
35672: LD_INT 5
35674: EQUAL
35675: IFFALSE 35696
// points := [ 130 , 5 , 2 ] ;
35677: LD_ADDR_VAR 0 9
35681: PUSH
35682: LD_INT 130
35684: PUSH
35685: LD_INT 5
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35696: LD_VAR 0 6
35700: PPUSH
35701: CALL_OW 257
35705: PUSH
35706: LD_INT 8
35708: EQUAL
35709: IFFALSE 35730
// points := [ 35 , 35 , 30 ] ;
35711: LD_ADDR_VAR 0 9
35715: PUSH
35716: LD_INT 35
35718: PUSH
35719: LD_INT 35
35721: PUSH
35722: LD_INT 30
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35730: LD_VAR 0 6
35734: PPUSH
35735: CALL_OW 257
35739: PUSH
35740: LD_INT 9
35742: EQUAL
35743: IFFALSE 35764
// points := [ 20 , 55 , 40 ] ;
35745: LD_ADDR_VAR 0 9
35749: PUSH
35750: LD_INT 20
35752: PUSH
35753: LD_INT 55
35755: PUSH
35756: LD_INT 40
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35764: LD_VAR 0 6
35768: PPUSH
35769: CALL_OW 257
35773: PUSH
35774: LD_INT 12
35776: PUSH
35777: LD_INT 16
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: IN
35784: IFFALSE 35805
// points := [ 5 , 3 , 2 ] ;
35786: LD_ADDR_VAR 0 9
35790: PUSH
35791: LD_INT 5
35793: PUSH
35794: LD_INT 3
35796: PUSH
35797: LD_INT 2
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35805: LD_VAR 0 6
35809: PPUSH
35810: CALL_OW 257
35814: PUSH
35815: LD_INT 17
35817: EQUAL
35818: IFFALSE 35839
// points := [ 100 , 50 , 75 ] ;
35820: LD_ADDR_VAR 0 9
35824: PUSH
35825: LD_INT 100
35827: PUSH
35828: LD_INT 50
35830: PUSH
35831: LD_INT 75
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35839: LD_VAR 0 6
35843: PPUSH
35844: CALL_OW 257
35848: PUSH
35849: LD_INT 15
35851: EQUAL
35852: IFFALSE 35873
// points := [ 10 , 5 , 3 ] ;
35854: LD_ADDR_VAR 0 9
35858: PUSH
35859: LD_INT 10
35861: PUSH
35862: LD_INT 5
35864: PUSH
35865: LD_INT 3
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35873: LD_VAR 0 6
35877: PPUSH
35878: CALL_OW 257
35882: PUSH
35883: LD_INT 14
35885: EQUAL
35886: IFFALSE 35907
// points := [ 10 , 0 , 0 ] ;
35888: LD_ADDR_VAR 0 9
35892: PUSH
35893: LD_INT 10
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35907: LD_VAR 0 6
35911: PPUSH
35912: CALL_OW 257
35916: PUSH
35917: LD_INT 11
35919: EQUAL
35920: IFFALSE 35941
// points := [ 30 , 10 , 5 ] ;
35922: LD_ADDR_VAR 0 9
35926: PUSH
35927: LD_INT 30
35929: PUSH
35930: LD_INT 10
35932: PUSH
35933: LD_INT 5
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35941: LD_VAR 0 1
35945: PPUSH
35946: LD_INT 5
35948: PPUSH
35949: CALL_OW 321
35953: PUSH
35954: LD_INT 2
35956: EQUAL
35957: IFFALSE 35974
// bpoints := bpoints * 1.8 ;
35959: LD_ADDR_VAR 0 10
35963: PUSH
35964: LD_VAR 0 10
35968: PUSH
35969: LD_REAL  1.80000000000000E+0000
35972: MUL
35973: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35974: LD_VAR 0 6
35978: PPUSH
35979: CALL_OW 257
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: LD_INT 2
35989: PUSH
35990: LD_INT 3
35992: PUSH
35993: LD_INT 4
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: IN
36002: PUSH
36003: LD_VAR 0 1
36007: PPUSH
36008: LD_INT 51
36010: PPUSH
36011: CALL_OW 321
36015: PUSH
36016: LD_INT 2
36018: EQUAL
36019: AND
36020: IFFALSE 36037
// bpoints := bpoints * 1.2 ;
36022: LD_ADDR_VAR 0 10
36026: PUSH
36027: LD_VAR 0 10
36031: PUSH
36032: LD_REAL  1.20000000000000E+0000
36035: MUL
36036: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36037: LD_VAR 0 6
36041: PPUSH
36042: CALL_OW 257
36046: PUSH
36047: LD_INT 5
36049: PUSH
36050: LD_INT 7
36052: PUSH
36053: LD_INT 9
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: IN
36061: PUSH
36062: LD_VAR 0 1
36066: PPUSH
36067: LD_INT 52
36069: PPUSH
36070: CALL_OW 321
36074: PUSH
36075: LD_INT 2
36077: EQUAL
36078: AND
36079: IFFALSE 36096
// bpoints := bpoints * 1.5 ;
36081: LD_ADDR_VAR 0 10
36085: PUSH
36086: LD_VAR 0 10
36090: PUSH
36091: LD_REAL  1.50000000000000E+0000
36094: MUL
36095: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36096: LD_VAR 0 1
36100: PPUSH
36101: LD_INT 66
36103: PPUSH
36104: CALL_OW 321
36108: PUSH
36109: LD_INT 2
36111: EQUAL
36112: IFFALSE 36129
// bpoints := bpoints * 1.1 ;
36114: LD_ADDR_VAR 0 10
36118: PUSH
36119: LD_VAR 0 10
36123: PUSH
36124: LD_REAL  1.10000000000000E+0000
36127: MUL
36128: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36129: LD_ADDR_VAR 0 10
36133: PUSH
36134: LD_VAR 0 10
36138: PUSH
36139: LD_VAR 0 6
36143: PPUSH
36144: LD_INT 1
36146: PPUSH
36147: CALL_OW 259
36151: PUSH
36152: LD_REAL  1.15000000000000E+0000
36155: MUL
36156: MUL
36157: ST_TO_ADDR
// end ; unit_vehicle :
36158: GO 36982
36160: LD_INT 2
36162: DOUBLE
36163: EQUAL
36164: IFTRUE 36168
36166: GO 36970
36168: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36169: LD_VAR 0 6
36173: PPUSH
36174: CALL_OW 264
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: LD_INT 42
36184: PUSH
36185: LD_INT 24
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: IN
36193: IFFALSE 36214
// points := [ 25 , 5 , 3 ] ;
36195: LD_ADDR_VAR 0 9
36199: PUSH
36200: LD_INT 25
36202: PUSH
36203: LD_INT 5
36205: PUSH
36206: LD_INT 3
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36214: LD_VAR 0 6
36218: PPUSH
36219: CALL_OW 264
36223: PUSH
36224: LD_INT 4
36226: PUSH
36227: LD_INT 43
36229: PUSH
36230: LD_INT 25
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: IN
36238: IFFALSE 36259
// points := [ 40 , 15 , 5 ] ;
36240: LD_ADDR_VAR 0 9
36244: PUSH
36245: LD_INT 40
36247: PUSH
36248: LD_INT 15
36250: PUSH
36251: LD_INT 5
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36259: LD_VAR 0 6
36263: PPUSH
36264: CALL_OW 264
36268: PUSH
36269: LD_INT 3
36271: PUSH
36272: LD_INT 23
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: IN
36279: IFFALSE 36300
// points := [ 7 , 25 , 8 ] ;
36281: LD_ADDR_VAR 0 9
36285: PUSH
36286: LD_INT 7
36288: PUSH
36289: LD_INT 25
36291: PUSH
36292: LD_INT 8
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36300: LD_VAR 0 6
36304: PPUSH
36305: CALL_OW 264
36309: PUSH
36310: LD_INT 5
36312: PUSH
36313: LD_INT 27
36315: PUSH
36316: LD_INT 44
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: IN
36324: IFFALSE 36345
// points := [ 14 , 50 , 16 ] ;
36326: LD_ADDR_VAR 0 9
36330: PUSH
36331: LD_INT 14
36333: PUSH
36334: LD_INT 50
36336: PUSH
36337: LD_INT 16
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36345: LD_VAR 0 6
36349: PPUSH
36350: CALL_OW 264
36354: PUSH
36355: LD_INT 6
36357: PUSH
36358: LD_INT 46
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: IN
36365: IFFALSE 36386
// points := [ 32 , 120 , 70 ] ;
36367: LD_ADDR_VAR 0 9
36371: PUSH
36372: LD_INT 32
36374: PUSH
36375: LD_INT 120
36377: PUSH
36378: LD_INT 70
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36386: LD_VAR 0 6
36390: PPUSH
36391: CALL_OW 264
36395: PUSH
36396: LD_INT 7
36398: PUSH
36399: LD_INT 28
36401: PUSH
36402: LD_INT 45
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: IN
36410: IFFALSE 36431
// points := [ 35 , 20 , 45 ] ;
36412: LD_ADDR_VAR 0 9
36416: PUSH
36417: LD_INT 35
36419: PUSH
36420: LD_INT 20
36422: PUSH
36423: LD_INT 45
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36431: LD_VAR 0 6
36435: PPUSH
36436: CALL_OW 264
36440: PUSH
36441: LD_INT 47
36443: PUSH
36444: EMPTY
36445: LIST
36446: IN
36447: IFFALSE 36468
// points := [ 67 , 45 , 75 ] ;
36449: LD_ADDR_VAR 0 9
36453: PUSH
36454: LD_INT 67
36456: PUSH
36457: LD_INT 45
36459: PUSH
36460: LD_INT 75
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36468: LD_VAR 0 6
36472: PPUSH
36473: CALL_OW 264
36477: PUSH
36478: LD_INT 26
36480: PUSH
36481: EMPTY
36482: LIST
36483: IN
36484: IFFALSE 36505
// points := [ 120 , 30 , 80 ] ;
36486: LD_ADDR_VAR 0 9
36490: PUSH
36491: LD_INT 120
36493: PUSH
36494: LD_INT 30
36496: PUSH
36497: LD_INT 80
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: LIST
36504: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36505: LD_VAR 0 6
36509: PPUSH
36510: CALL_OW 264
36514: PUSH
36515: LD_INT 22
36517: PUSH
36518: EMPTY
36519: LIST
36520: IN
36521: IFFALSE 36542
// points := [ 40 , 1 , 1 ] ;
36523: LD_ADDR_VAR 0 9
36527: PUSH
36528: LD_INT 40
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36542: LD_VAR 0 6
36546: PPUSH
36547: CALL_OW 264
36551: PUSH
36552: LD_INT 29
36554: PUSH
36555: EMPTY
36556: LIST
36557: IN
36558: IFFALSE 36579
// points := [ 70 , 200 , 400 ] ;
36560: LD_ADDR_VAR 0 9
36564: PUSH
36565: LD_INT 70
36567: PUSH
36568: LD_INT 200
36570: PUSH
36571: LD_INT 400
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36579: LD_VAR 0 6
36583: PPUSH
36584: CALL_OW 264
36588: PUSH
36589: LD_INT 14
36591: PUSH
36592: LD_INT 53
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: IN
36599: IFFALSE 36620
// points := [ 40 , 10 , 20 ] ;
36601: LD_ADDR_VAR 0 9
36605: PUSH
36606: LD_INT 40
36608: PUSH
36609: LD_INT 10
36611: PUSH
36612: LD_INT 20
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36620: LD_VAR 0 6
36624: PPUSH
36625: CALL_OW 264
36629: PUSH
36630: LD_INT 9
36632: PUSH
36633: EMPTY
36634: LIST
36635: IN
36636: IFFALSE 36657
// points := [ 5 , 70 , 20 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 5
36645: PUSH
36646: LD_INT 70
36648: PUSH
36649: LD_INT 20
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36657: LD_VAR 0 6
36661: PPUSH
36662: CALL_OW 264
36666: PUSH
36667: LD_INT 10
36669: PUSH
36670: EMPTY
36671: LIST
36672: IN
36673: IFFALSE 36694
// points := [ 35 , 110 , 70 ] ;
36675: LD_ADDR_VAR 0 9
36679: PUSH
36680: LD_INT 35
36682: PUSH
36683: LD_INT 110
36685: PUSH
36686: LD_INT 70
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36694: LD_VAR 0 6
36698: PPUSH
36699: CALL_OW 265
36703: PUSH
36704: LD_INT 25
36706: EQUAL
36707: IFFALSE 36728
// points := [ 80 , 65 , 100 ] ;
36709: LD_ADDR_VAR 0 9
36713: PUSH
36714: LD_INT 80
36716: PUSH
36717: LD_INT 65
36719: PUSH
36720: LD_INT 100
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36728: LD_VAR 0 6
36732: PPUSH
36733: CALL_OW 263
36737: PUSH
36738: LD_INT 1
36740: EQUAL
36741: IFFALSE 36776
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36743: LD_ADDR_VAR 0 10
36747: PUSH
36748: LD_VAR 0 10
36752: PUSH
36753: LD_VAR 0 6
36757: PPUSH
36758: CALL_OW 311
36762: PPUSH
36763: LD_INT 3
36765: PPUSH
36766: CALL_OW 259
36770: PUSH
36771: LD_INT 4
36773: MUL
36774: MUL
36775: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36776: LD_VAR 0 6
36780: PPUSH
36781: CALL_OW 263
36785: PUSH
36786: LD_INT 2
36788: EQUAL
36789: IFFALSE 36840
// begin j := IsControledBy ( i ) ;
36791: LD_ADDR_VAR 0 7
36795: PUSH
36796: LD_VAR 0 6
36800: PPUSH
36801: CALL_OW 312
36805: ST_TO_ADDR
// if j then
36806: LD_VAR 0 7
36810: IFFALSE 36840
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36812: LD_ADDR_VAR 0 10
36816: PUSH
36817: LD_VAR 0 10
36821: PUSH
36822: LD_VAR 0 7
36826: PPUSH
36827: LD_INT 3
36829: PPUSH
36830: CALL_OW 259
36834: PUSH
36835: LD_INT 3
36837: MUL
36838: MUL
36839: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36840: LD_VAR 0 6
36844: PPUSH
36845: CALL_OW 264
36849: PUSH
36850: LD_INT 5
36852: PUSH
36853: LD_INT 6
36855: PUSH
36856: LD_INT 46
36858: PUSH
36859: LD_INT 44
36861: PUSH
36862: LD_INT 47
36864: PUSH
36865: LD_INT 45
36867: PUSH
36868: LD_INT 28
36870: PUSH
36871: LD_INT 7
36873: PUSH
36874: LD_INT 27
36876: PUSH
36877: LD_INT 29
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: IN
36892: PUSH
36893: LD_VAR 0 1
36897: PPUSH
36898: LD_INT 52
36900: PPUSH
36901: CALL_OW 321
36905: PUSH
36906: LD_INT 2
36908: EQUAL
36909: AND
36910: IFFALSE 36927
// bpoints := bpoints * 1.2 ;
36912: LD_ADDR_VAR 0 10
36916: PUSH
36917: LD_VAR 0 10
36921: PUSH
36922: LD_REAL  1.20000000000000E+0000
36925: MUL
36926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36927: LD_VAR 0 6
36931: PPUSH
36932: CALL_OW 264
36936: PUSH
36937: LD_INT 6
36939: PUSH
36940: LD_INT 46
36942: PUSH
36943: LD_INT 47
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: IN
36951: IFFALSE 36968
// bpoints := bpoints * 1.2 ;
36953: LD_ADDR_VAR 0 10
36957: PUSH
36958: LD_VAR 0 10
36962: PUSH
36963: LD_REAL  1.20000000000000E+0000
36966: MUL
36967: ST_TO_ADDR
// end ; unit_building :
36968: GO 36982
36970: LD_INT 3
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36978
36976: GO 36981
36978: POP
// ; end ;
36979: GO 36982
36981: POP
// for j = 1 to 3 do
36982: LD_ADDR_VAR 0 7
36986: PUSH
36987: DOUBLE
36988: LD_INT 1
36990: DEC
36991: ST_TO_ADDR
36992: LD_INT 3
36994: PUSH
36995: FOR_TO
36996: IFFALSE 37049
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36998: LD_ADDR_VAR 0 5
37002: PUSH
37003: LD_VAR 0 5
37007: PPUSH
37008: LD_VAR 0 7
37012: PPUSH
37013: LD_VAR 0 5
37017: PUSH
37018: LD_VAR 0 7
37022: ARRAY
37023: PUSH
37024: LD_VAR 0 9
37028: PUSH
37029: LD_VAR 0 7
37033: ARRAY
37034: PUSH
37035: LD_VAR 0 10
37039: MUL
37040: PLUS
37041: PPUSH
37042: CALL_OW 1
37046: ST_TO_ADDR
37047: GO 36995
37049: POP
37050: POP
// end ;
37051: GO 35534
37053: POP
37054: POP
// result := Replace ( result , 4 , tmp ) ;
37055: LD_ADDR_VAR 0 5
37059: PUSH
37060: LD_VAR 0 5
37064: PPUSH
37065: LD_INT 4
37067: PPUSH
37068: LD_VAR 0 8
37072: PPUSH
37073: CALL_OW 1
37077: ST_TO_ADDR
// end ;
37078: LD_VAR 0 5
37082: RET
// export function DangerAtRange ( unit , range ) ; begin
37083: LD_INT 0
37085: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37086: LD_ADDR_VAR 0 3
37090: PUSH
37091: LD_VAR 0 1
37095: PPUSH
37096: CALL_OW 255
37100: PPUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: CALL_OW 250
37110: PPUSH
37111: LD_VAR 0 1
37115: PPUSH
37116: CALL_OW 251
37120: PPUSH
37121: LD_VAR 0 2
37125: PPUSH
37126: CALL 35386 0 4
37130: ST_TO_ADDR
// end ;
37131: LD_VAR 0 3
37135: RET
// export function DangerInArea ( side , area ) ; begin
37136: LD_INT 0
37138: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37139: LD_ADDR_VAR 0 3
37143: PUSH
37144: LD_VAR 0 2
37148: PPUSH
37149: LD_INT 81
37151: PUSH
37152: LD_VAR 0 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PPUSH
37161: CALL_OW 70
37165: ST_TO_ADDR
// end ;
37166: LD_VAR 0 3
37170: RET
// export function IsExtension ( b ) ; begin
37171: LD_INT 0
37173: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37174: LD_ADDR_VAR 0 2
37178: PUSH
37179: LD_VAR 0 1
37183: PUSH
37184: LD_INT 23
37186: PUSH
37187: LD_INT 20
37189: PUSH
37190: LD_INT 22
37192: PUSH
37193: LD_INT 17
37195: PUSH
37196: LD_INT 24
37198: PUSH
37199: LD_INT 21
37201: PUSH
37202: LD_INT 19
37204: PUSH
37205: LD_INT 16
37207: PUSH
37208: LD_INT 25
37210: PUSH
37211: LD_INT 18
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: IN
37226: ST_TO_ADDR
// end ;
37227: LD_VAR 0 2
37231: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
37232: LD_INT 0
37234: PPUSH
37235: PPUSH
37236: PPUSH
// result := [ ] ;
37237: LD_ADDR_VAR 0 3
37241: PUSH
37242: EMPTY
37243: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37244: LD_ADDR_VAR 0 4
37248: PUSH
37249: LD_VAR 0 2
37253: PPUSH
37254: LD_INT 21
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PPUSH
37264: CALL_OW 70
37268: ST_TO_ADDR
// if not tmp then
37269: LD_VAR 0 4
37273: NOT
37274: IFFALSE 37278
// exit ;
37276: GO 37336
// for i in tmp do
37278: LD_ADDR_VAR 0 5
37282: PUSH
37283: LD_VAR 0 4
37287: PUSH
37288: FOR_IN
37289: IFFALSE 37324
// if GetBase ( i ) <> base then
37291: LD_VAR 0 5
37295: PPUSH
37296: CALL_OW 274
37300: PUSH
37301: LD_VAR 0 1
37305: NONEQUAL
37306: IFFALSE 37322
// ComLinkToBase ( base , i ) ;
37308: LD_VAR 0 1
37312: PPUSH
37313: LD_VAR 0 5
37317: PPUSH
37318: CALL_OW 169
37322: GO 37288
37324: POP
37325: POP
// result := tmp ;
37326: LD_ADDR_VAR 0 3
37330: PUSH
37331: LD_VAR 0 4
37335: ST_TO_ADDR
// end ;
37336: LD_VAR 0 3
37340: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37341: LD_INT 0
37343: PPUSH
37344: PPUSH
// if BuildingStatus ( b ) = bs_build then
37345: LD_VAR 0 2
37349: PPUSH
37350: CALL_OW 461
37354: PUSH
37355: LD_INT 1
37357: EQUAL
37358: IFFALSE 37418
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37360: LD_VAR 0 1
37364: PPUSH
37365: LD_STRING h
37367: PUSH
37368: LD_VAR 0 2
37372: PPUSH
37373: CALL_OW 250
37377: PUSH
37378: LD_VAR 0 2
37382: PPUSH
37383: CALL_OW 251
37387: PUSH
37388: LD_VAR 0 2
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: PUSH
37411: EMPTY
37412: LIST
37413: PPUSH
37414: CALL_OW 446
// end ;
37418: LD_VAR 0 3
37422: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37423: LD_INT 0
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
37429: PPUSH
37430: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37431: LD_VAR 0 1
37435: NOT
37436: PUSH
37437: LD_VAR 0 1
37441: PPUSH
37442: CALL_OW 263
37446: PUSH
37447: LD_INT 2
37449: EQUAL
37450: NOT
37451: OR
37452: IFFALSE 37456
// exit ;
37454: GO 37772
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37456: LD_ADDR_VAR 0 6
37460: PUSH
37461: LD_INT 22
37463: PUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 255
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 30
37483: PUSH
37484: LD_INT 36
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 34
37493: PUSH
37494: LD_INT 31
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PPUSH
37510: CALL_OW 69
37514: ST_TO_ADDR
// if not tmp then
37515: LD_VAR 0 6
37519: NOT
37520: IFFALSE 37524
// exit ;
37522: GO 37772
// result := [ ] ;
37524: LD_ADDR_VAR 0 2
37528: PUSH
37529: EMPTY
37530: ST_TO_ADDR
// for i in tmp do
37531: LD_ADDR_VAR 0 3
37535: PUSH
37536: LD_VAR 0 6
37540: PUSH
37541: FOR_IN
37542: IFFALSE 37613
// begin t := UnitsInside ( i ) ;
37544: LD_ADDR_VAR 0 4
37548: PUSH
37549: LD_VAR 0 3
37553: PPUSH
37554: CALL_OW 313
37558: ST_TO_ADDR
// if t then
37559: LD_VAR 0 4
37563: IFFALSE 37611
// for j in t do
37565: LD_ADDR_VAR 0 7
37569: PUSH
37570: LD_VAR 0 4
37574: PUSH
37575: FOR_IN
37576: IFFALSE 37609
// result := Insert ( result , result + 1 , j ) ;
37578: LD_ADDR_VAR 0 2
37582: PUSH
37583: LD_VAR 0 2
37587: PPUSH
37588: LD_VAR 0 2
37592: PUSH
37593: LD_INT 1
37595: PLUS
37596: PPUSH
37597: LD_VAR 0 7
37601: PPUSH
37602: CALL_OW 2
37606: ST_TO_ADDR
37607: GO 37575
37609: POP
37610: POP
// end ;
37611: GO 37541
37613: POP
37614: POP
// if not result then
37615: LD_VAR 0 2
37619: NOT
37620: IFFALSE 37624
// exit ;
37622: GO 37772
// mech := result [ 1 ] ;
37624: LD_ADDR_VAR 0 5
37628: PUSH
37629: LD_VAR 0 2
37633: PUSH
37634: LD_INT 1
37636: ARRAY
37637: ST_TO_ADDR
// if result > 1 then
37638: LD_VAR 0 2
37642: PUSH
37643: LD_INT 1
37645: GREATER
37646: IFFALSE 37758
// for i = 2 to result do
37648: LD_ADDR_VAR 0 3
37652: PUSH
37653: DOUBLE
37654: LD_INT 2
37656: DEC
37657: ST_TO_ADDR
37658: LD_VAR 0 2
37662: PUSH
37663: FOR_TO
37664: IFFALSE 37756
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37666: LD_ADDR_VAR 0 4
37670: PUSH
37671: LD_VAR 0 2
37675: PUSH
37676: LD_VAR 0 3
37680: ARRAY
37681: PPUSH
37682: LD_INT 3
37684: PPUSH
37685: CALL_OW 259
37689: PUSH
37690: LD_VAR 0 2
37694: PUSH
37695: LD_VAR 0 3
37699: ARRAY
37700: PPUSH
37701: CALL_OW 432
37705: MINUS
37706: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37707: LD_VAR 0 4
37711: PUSH
37712: LD_VAR 0 5
37716: PPUSH
37717: LD_INT 3
37719: PPUSH
37720: CALL_OW 259
37724: PUSH
37725: LD_VAR 0 5
37729: PPUSH
37730: CALL_OW 432
37734: MINUS
37735: GREATEREQUAL
37736: IFFALSE 37754
// mech := result [ i ] ;
37738: LD_ADDR_VAR 0 5
37742: PUSH
37743: LD_VAR 0 2
37747: PUSH
37748: LD_VAR 0 3
37752: ARRAY
37753: ST_TO_ADDR
// end ;
37754: GO 37663
37756: POP
37757: POP
// ComLinkTo ( vehicle , mech ) ;
37758: LD_VAR 0 1
37762: PPUSH
37763: LD_VAR 0 5
37767: PPUSH
37768: CALL_OW 135
// end ;
37772: LD_VAR 0 2
37776: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37777: LD_INT 0
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
// result := [ ] ;
37792: LD_ADDR_VAR 0 7
37796: PUSH
37797: EMPTY
37798: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 266
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: IN
37819: NOT
37820: IFFALSE 37824
// exit ;
37822: GO 39455
// if name then
37824: LD_VAR 0 3
37828: IFFALSE 37844
// SetBName ( base_dep , name ) ;
37830: LD_VAR 0 1
37834: PPUSH
37835: LD_VAR 0 3
37839: PPUSH
37840: CALL_OW 500
// base := GetBase ( base_dep ) ;
37844: LD_ADDR_VAR 0 15
37848: PUSH
37849: LD_VAR 0 1
37853: PPUSH
37854: CALL_OW 274
37858: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37859: LD_ADDR_VAR 0 16
37863: PUSH
37864: LD_VAR 0 1
37868: PPUSH
37869: CALL_OW 255
37873: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37874: LD_ADDR_VAR 0 17
37878: PUSH
37879: LD_VAR 0 1
37883: PPUSH
37884: CALL_OW 248
37888: ST_TO_ADDR
// if sources then
37889: LD_VAR 0 5
37893: IFFALSE 37940
// for i = 1 to 3 do
37895: LD_ADDR_VAR 0 8
37899: PUSH
37900: DOUBLE
37901: LD_INT 1
37903: DEC
37904: ST_TO_ADDR
37905: LD_INT 3
37907: PUSH
37908: FOR_TO
37909: IFFALSE 37938
// AddResourceType ( base , i , sources [ i ] ) ;
37911: LD_VAR 0 15
37915: PPUSH
37916: LD_VAR 0 8
37920: PPUSH
37921: LD_VAR 0 5
37925: PUSH
37926: LD_VAR 0 8
37930: ARRAY
37931: PPUSH
37932: CALL_OW 276
37936: GO 37908
37938: POP
37939: POP
// buildings := GetBaseBuildings ( base , area ) ;
37940: LD_ADDR_VAR 0 18
37944: PUSH
37945: LD_VAR 0 15
37949: PPUSH
37950: LD_VAR 0 2
37954: PPUSH
37955: CALL 37232 0 2
37959: ST_TO_ADDR
// InitHc ;
37960: CALL_OW 19
// InitUc ;
37964: CALL_OW 18
// uc_side := side ;
37968: LD_ADDR_OWVAR 20
37972: PUSH
37973: LD_VAR 0 16
37977: ST_TO_ADDR
// uc_nation := nation ;
37978: LD_ADDR_OWVAR 21
37982: PUSH
37983: LD_VAR 0 17
37987: ST_TO_ADDR
// if buildings then
37988: LD_VAR 0 18
37992: IFFALSE 39314
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37994: LD_ADDR_VAR 0 19
37998: PUSH
37999: LD_VAR 0 18
38003: PPUSH
38004: LD_INT 2
38006: PUSH
38007: LD_INT 30
38009: PUSH
38010: LD_INT 29
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 30
38019: PUSH
38020: LD_INT 30
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: PPUSH
38032: CALL_OW 72
38036: ST_TO_ADDR
// if tmp then
38037: LD_VAR 0 19
38041: IFFALSE 38089
// for i in tmp do
38043: LD_ADDR_VAR 0 8
38047: PUSH
38048: LD_VAR 0 19
38052: PUSH
38053: FOR_IN
38054: IFFALSE 38087
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38056: LD_VAR 0 8
38060: PPUSH
38061: CALL_OW 250
38065: PPUSH
38066: LD_VAR 0 8
38070: PPUSH
38071: CALL_OW 251
38075: PPUSH
38076: LD_VAR 0 16
38080: PPUSH
38081: CALL_OW 441
38085: GO 38053
38087: POP
38088: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38089: LD_VAR 0 18
38093: PPUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 30
38099: PUSH
38100: LD_INT 32
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 30
38109: PUSH
38110: LD_INT 33
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: PPUSH
38122: CALL_OW 72
38126: IFFALSE 38214
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38128: LD_ADDR_VAR 0 8
38132: PUSH
38133: LD_VAR 0 18
38137: PPUSH
38138: LD_INT 2
38140: PUSH
38141: LD_INT 30
38143: PUSH
38144: LD_INT 32
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 30
38153: PUSH
38154: LD_INT 33
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: PPUSH
38166: CALL_OW 72
38170: PUSH
38171: FOR_IN
38172: IFFALSE 38212
// begin if not GetBWeapon ( i ) then
38174: LD_VAR 0 8
38178: PPUSH
38179: CALL_OW 269
38183: NOT
38184: IFFALSE 38210
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38186: LD_VAR 0 8
38190: PPUSH
38191: LD_VAR 0 8
38195: PPUSH
38196: LD_VAR 0 2
38200: PPUSH
38201: CALL 39460 0 2
38205: PPUSH
38206: CALL_OW 431
// end ;
38210: GO 38171
38212: POP
38213: POP
// end ; for i = 1 to personel do
38214: LD_ADDR_VAR 0 8
38218: PUSH
38219: DOUBLE
38220: LD_INT 1
38222: DEC
38223: ST_TO_ADDR
38224: LD_VAR 0 6
38228: PUSH
38229: FOR_TO
38230: IFFALSE 39294
// begin if i > 4 then
38232: LD_VAR 0 8
38236: PUSH
38237: LD_INT 4
38239: GREATER
38240: IFFALSE 38244
// break ;
38242: GO 39294
// case i of 1 :
38244: LD_VAR 0 8
38248: PUSH
38249: LD_INT 1
38251: DOUBLE
38252: EQUAL
38253: IFTRUE 38257
38255: GO 38337
38257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38258: LD_ADDR_VAR 0 12
38262: PUSH
38263: LD_VAR 0 18
38267: PPUSH
38268: LD_INT 22
38270: PUSH
38271: LD_VAR 0 16
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 58
38282: PUSH
38283: EMPTY
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: LD_INT 30
38291: PUSH
38292: LD_INT 32
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 30
38301: PUSH
38302: LD_INT 4
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 30
38311: PUSH
38312: LD_INT 5
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: PPUSH
38330: CALL_OW 72
38334: ST_TO_ADDR
38335: GO 38559
38337: LD_INT 2
38339: DOUBLE
38340: EQUAL
38341: IFTRUE 38345
38343: GO 38407
38345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38346: LD_ADDR_VAR 0 12
38350: PUSH
38351: LD_VAR 0 18
38355: PPUSH
38356: LD_INT 22
38358: PUSH
38359: LD_VAR 0 16
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 30
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 30
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PPUSH
38400: CALL_OW 72
38404: ST_TO_ADDR
38405: GO 38559
38407: LD_INT 3
38409: DOUBLE
38410: EQUAL
38411: IFTRUE 38415
38413: GO 38477
38415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38416: LD_ADDR_VAR 0 12
38420: PUSH
38421: LD_VAR 0 18
38425: PPUSH
38426: LD_INT 22
38428: PUSH
38429: LD_VAR 0 16
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 30
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 30
38453: PUSH
38454: LD_INT 3
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PPUSH
38470: CALL_OW 72
38474: ST_TO_ADDR
38475: GO 38559
38477: LD_INT 4
38479: DOUBLE
38480: EQUAL
38481: IFTRUE 38485
38483: GO 38558
38485: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38486: LD_ADDR_VAR 0 12
38490: PUSH
38491: LD_VAR 0 18
38495: PPUSH
38496: LD_INT 22
38498: PUSH
38499: LD_VAR 0 16
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: LD_INT 30
38513: PUSH
38514: LD_INT 6
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 30
38523: PUSH
38524: LD_INT 7
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 30
38533: PUSH
38534: LD_INT 8
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 72
38555: ST_TO_ADDR
38556: GO 38559
38558: POP
// if i = 1 then
38559: LD_VAR 0 8
38563: PUSH
38564: LD_INT 1
38566: EQUAL
38567: IFFALSE 38678
// begin tmp := [ ] ;
38569: LD_ADDR_VAR 0 19
38573: PUSH
38574: EMPTY
38575: ST_TO_ADDR
// for j in f do
38576: LD_ADDR_VAR 0 9
38580: PUSH
38581: LD_VAR 0 12
38585: PUSH
38586: FOR_IN
38587: IFFALSE 38660
// if GetBType ( j ) = b_bunker then
38589: LD_VAR 0 9
38593: PPUSH
38594: CALL_OW 266
38598: PUSH
38599: LD_INT 32
38601: EQUAL
38602: IFFALSE 38629
// tmp := Insert ( tmp , 1 , j ) else
38604: LD_ADDR_VAR 0 19
38608: PUSH
38609: LD_VAR 0 19
38613: PPUSH
38614: LD_INT 1
38616: PPUSH
38617: LD_VAR 0 9
38621: PPUSH
38622: CALL_OW 2
38626: ST_TO_ADDR
38627: GO 38658
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38629: LD_ADDR_VAR 0 19
38633: PUSH
38634: LD_VAR 0 19
38638: PPUSH
38639: LD_VAR 0 19
38643: PUSH
38644: LD_INT 1
38646: PLUS
38647: PPUSH
38648: LD_VAR 0 9
38652: PPUSH
38653: CALL_OW 2
38657: ST_TO_ADDR
38658: GO 38586
38660: POP
38661: POP
// if tmp then
38662: LD_VAR 0 19
38666: IFFALSE 38678
// f := tmp ;
38668: LD_ADDR_VAR 0 12
38672: PUSH
38673: LD_VAR 0 19
38677: ST_TO_ADDR
// end ; x := personel [ i ] ;
38678: LD_ADDR_VAR 0 13
38682: PUSH
38683: LD_VAR 0 6
38687: PUSH
38688: LD_VAR 0 8
38692: ARRAY
38693: ST_TO_ADDR
// if x = - 1 then
38694: LD_VAR 0 13
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: EQUAL
38703: IFFALSE 38912
// begin for j in f do
38705: LD_ADDR_VAR 0 9
38709: PUSH
38710: LD_VAR 0 12
38714: PUSH
38715: FOR_IN
38716: IFFALSE 38908
// repeat InitHc ;
38718: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38722: LD_VAR 0 9
38726: PPUSH
38727: CALL_OW 266
38731: PUSH
38732: LD_INT 5
38734: EQUAL
38735: IFFALSE 38805
// begin if UnitsInside ( j ) < 3 then
38737: LD_VAR 0 9
38741: PPUSH
38742: CALL_OW 313
38746: PUSH
38747: LD_INT 3
38749: LESS
38750: IFFALSE 38786
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38752: LD_INT 0
38754: PPUSH
38755: LD_INT 5
38757: PUSH
38758: LD_INT 8
38760: PUSH
38761: LD_INT 9
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: PUSH
38769: LD_VAR 0 17
38773: ARRAY
38774: PPUSH
38775: LD_VAR 0 4
38779: PPUSH
38780: CALL_OW 380
38784: GO 38803
// PrepareHuman ( false , i , skill ) ;
38786: LD_INT 0
38788: PPUSH
38789: LD_VAR 0 8
38793: PPUSH
38794: LD_VAR 0 4
38798: PPUSH
38799: CALL_OW 380
// end else
38803: GO 38822
// PrepareHuman ( false , i , skill ) ;
38805: LD_INT 0
38807: PPUSH
38808: LD_VAR 0 8
38812: PPUSH
38813: LD_VAR 0 4
38817: PPUSH
38818: CALL_OW 380
// un := CreateHuman ;
38822: LD_ADDR_VAR 0 14
38826: PUSH
38827: CALL_OW 44
38831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38832: LD_ADDR_VAR 0 7
38836: PUSH
38837: LD_VAR 0 7
38841: PPUSH
38842: LD_INT 1
38844: PPUSH
38845: LD_VAR 0 14
38849: PPUSH
38850: CALL_OW 2
38854: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38855: LD_VAR 0 14
38859: PPUSH
38860: LD_VAR 0 9
38864: PPUSH
38865: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38869: LD_VAR 0 9
38873: PPUSH
38874: CALL_OW 313
38878: PUSH
38879: LD_INT 6
38881: EQUAL
38882: PUSH
38883: LD_VAR 0 9
38887: PPUSH
38888: CALL_OW 266
38892: PUSH
38893: LD_INT 32
38895: PUSH
38896: LD_INT 31
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: IN
38903: OR
38904: IFFALSE 38718
38906: GO 38715
38908: POP
38909: POP
// end else
38910: GO 39292
// for j = 1 to x do
38912: LD_ADDR_VAR 0 9
38916: PUSH
38917: DOUBLE
38918: LD_INT 1
38920: DEC
38921: ST_TO_ADDR
38922: LD_VAR 0 13
38926: PUSH
38927: FOR_TO
38928: IFFALSE 39290
// begin InitHc ;
38930: CALL_OW 19
// if not f then
38934: LD_VAR 0 12
38938: NOT
38939: IFFALSE 39028
// begin PrepareHuman ( false , i , skill ) ;
38941: LD_INT 0
38943: PPUSH
38944: LD_VAR 0 8
38948: PPUSH
38949: LD_VAR 0 4
38953: PPUSH
38954: CALL_OW 380
// un := CreateHuman ;
38958: LD_ADDR_VAR 0 14
38962: PUSH
38963: CALL_OW 44
38967: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38968: LD_ADDR_VAR 0 7
38972: PUSH
38973: LD_VAR 0 7
38977: PPUSH
38978: LD_INT 1
38980: PPUSH
38981: LD_VAR 0 14
38985: PPUSH
38986: CALL_OW 2
38990: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38991: LD_VAR 0 14
38995: PPUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: CALL_OW 250
39005: PPUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: CALL_OW 251
39015: PPUSH
39016: LD_INT 10
39018: PPUSH
39019: LD_INT 0
39021: PPUSH
39022: CALL_OW 50
// continue ;
39026: GO 38927
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39028: LD_VAR 0 12
39032: PUSH
39033: LD_INT 1
39035: ARRAY
39036: PPUSH
39037: CALL_OW 313
39041: PUSH
39042: LD_VAR 0 12
39046: PUSH
39047: LD_INT 1
39049: ARRAY
39050: PPUSH
39051: CALL_OW 266
39055: PUSH
39056: LD_INT 32
39058: PUSH
39059: LD_INT 31
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: IN
39066: AND
39067: PUSH
39068: LD_VAR 0 12
39072: PUSH
39073: LD_INT 1
39075: ARRAY
39076: PPUSH
39077: CALL_OW 313
39081: PUSH
39082: LD_INT 6
39084: EQUAL
39085: OR
39086: IFFALSE 39106
// f := Delete ( f , 1 ) ;
39088: LD_ADDR_VAR 0 12
39092: PUSH
39093: LD_VAR 0 12
39097: PPUSH
39098: LD_INT 1
39100: PPUSH
39101: CALL_OW 3
39105: ST_TO_ADDR
// if not f then
39106: LD_VAR 0 12
39110: NOT
39111: IFFALSE 39129
// begin x := x + 2 ;
39113: LD_ADDR_VAR 0 13
39117: PUSH
39118: LD_VAR 0 13
39122: PUSH
39123: LD_INT 2
39125: PLUS
39126: ST_TO_ADDR
// continue ;
39127: GO 38927
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39129: LD_VAR 0 12
39133: PUSH
39134: LD_INT 1
39136: ARRAY
39137: PPUSH
39138: CALL_OW 266
39142: PUSH
39143: LD_INT 5
39145: EQUAL
39146: IFFALSE 39220
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39148: LD_VAR 0 12
39152: PUSH
39153: LD_INT 1
39155: ARRAY
39156: PPUSH
39157: CALL_OW 313
39161: PUSH
39162: LD_INT 3
39164: LESS
39165: IFFALSE 39201
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39167: LD_INT 0
39169: PPUSH
39170: LD_INT 5
39172: PUSH
39173: LD_INT 8
39175: PUSH
39176: LD_INT 9
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: PUSH
39184: LD_VAR 0 17
39188: ARRAY
39189: PPUSH
39190: LD_VAR 0 4
39194: PPUSH
39195: CALL_OW 380
39199: GO 39218
// PrepareHuman ( false , i , skill ) ;
39201: LD_INT 0
39203: PPUSH
39204: LD_VAR 0 8
39208: PPUSH
39209: LD_VAR 0 4
39213: PPUSH
39214: CALL_OW 380
// end else
39218: GO 39237
// PrepareHuman ( false , i , skill ) ;
39220: LD_INT 0
39222: PPUSH
39223: LD_VAR 0 8
39227: PPUSH
39228: LD_VAR 0 4
39232: PPUSH
39233: CALL_OW 380
// un := CreateHuman ;
39237: LD_ADDR_VAR 0 14
39241: PUSH
39242: CALL_OW 44
39246: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39247: LD_ADDR_VAR 0 7
39251: PUSH
39252: LD_VAR 0 7
39256: PPUSH
39257: LD_INT 1
39259: PPUSH
39260: LD_VAR 0 14
39264: PPUSH
39265: CALL_OW 2
39269: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39270: LD_VAR 0 14
39274: PPUSH
39275: LD_VAR 0 12
39279: PUSH
39280: LD_INT 1
39282: ARRAY
39283: PPUSH
39284: CALL_OW 52
// end ;
39288: GO 38927
39290: POP
39291: POP
// end ;
39292: GO 38229
39294: POP
39295: POP
// result := result ^ buildings ;
39296: LD_ADDR_VAR 0 7
39300: PUSH
39301: LD_VAR 0 7
39305: PUSH
39306: LD_VAR 0 18
39310: ADD
39311: ST_TO_ADDR
// end else
39312: GO 39455
// begin for i = 1 to personel do
39314: LD_ADDR_VAR 0 8
39318: PUSH
39319: DOUBLE
39320: LD_INT 1
39322: DEC
39323: ST_TO_ADDR
39324: LD_VAR 0 6
39328: PUSH
39329: FOR_TO
39330: IFFALSE 39453
// begin if i > 4 then
39332: LD_VAR 0 8
39336: PUSH
39337: LD_INT 4
39339: GREATER
39340: IFFALSE 39344
// break ;
39342: GO 39453
// x := personel [ i ] ;
39344: LD_ADDR_VAR 0 13
39348: PUSH
39349: LD_VAR 0 6
39353: PUSH
39354: LD_VAR 0 8
39358: ARRAY
39359: ST_TO_ADDR
// if x = - 1 then
39360: LD_VAR 0 13
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: EQUAL
39369: IFFALSE 39373
// continue ;
39371: GO 39329
// PrepareHuman ( false , i , skill ) ;
39373: LD_INT 0
39375: PPUSH
39376: LD_VAR 0 8
39380: PPUSH
39381: LD_VAR 0 4
39385: PPUSH
39386: CALL_OW 380
// un := CreateHuman ;
39390: LD_ADDR_VAR 0 14
39394: PUSH
39395: CALL_OW 44
39399: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39400: LD_VAR 0 14
39404: PPUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 250
39414: PPUSH
39415: LD_VAR 0 1
39419: PPUSH
39420: CALL_OW 251
39424: PPUSH
39425: LD_INT 10
39427: PPUSH
39428: LD_INT 0
39430: PPUSH
39431: CALL_OW 50
// result := result ^ un ;
39435: LD_ADDR_VAR 0 7
39439: PUSH
39440: LD_VAR 0 7
39444: PUSH
39445: LD_VAR 0 14
39449: ADD
39450: ST_TO_ADDR
// end ;
39451: GO 39329
39453: POP
39454: POP
// end ; end ;
39455: LD_VAR 0 7
39459: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39460: LD_INT 0
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
// result := false ;
39478: LD_ADDR_VAR 0 3
39482: PUSH
39483: LD_INT 0
39485: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39486: LD_VAR 0 1
39490: NOT
39491: PUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: CALL_OW 266
39501: PUSH
39502: LD_INT 32
39504: PUSH
39505: LD_INT 33
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: IN
39512: NOT
39513: OR
39514: IFFALSE 39518
// exit ;
39516: GO 40654
// nat := GetNation ( tower ) ;
39518: LD_ADDR_VAR 0 12
39522: PUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL_OW 248
39532: ST_TO_ADDR
// side := GetSide ( tower ) ;
39533: LD_ADDR_VAR 0 16
39537: PUSH
39538: LD_VAR 0 1
39542: PPUSH
39543: CALL_OW 255
39547: ST_TO_ADDR
// x := GetX ( tower ) ;
39548: LD_ADDR_VAR 0 10
39552: PUSH
39553: LD_VAR 0 1
39557: PPUSH
39558: CALL_OW 250
39562: ST_TO_ADDR
// y := GetY ( tower ) ;
39563: LD_ADDR_VAR 0 11
39567: PUSH
39568: LD_VAR 0 1
39572: PPUSH
39573: CALL_OW 251
39577: ST_TO_ADDR
// if not x or not y then
39578: LD_VAR 0 10
39582: NOT
39583: PUSH
39584: LD_VAR 0 11
39588: NOT
39589: OR
39590: IFFALSE 39594
// exit ;
39592: GO 40654
// weapon := 0 ;
39594: LD_ADDR_VAR 0 18
39598: PUSH
39599: LD_INT 0
39601: ST_TO_ADDR
// fac_list := [ ] ;
39602: LD_ADDR_VAR 0 17
39606: PUSH
39607: EMPTY
39608: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
39609: LD_ADDR_VAR 0 6
39613: PUSH
39614: LD_VAR 0 1
39618: PPUSH
39619: CALL_OW 274
39623: PPUSH
39624: LD_VAR 0 2
39628: PPUSH
39629: CALL 37232 0 2
39633: PPUSH
39634: LD_INT 30
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PPUSH
39644: CALL_OW 72
39648: ST_TO_ADDR
// if not factories then
39649: LD_VAR 0 6
39653: NOT
39654: IFFALSE 39658
// exit ;
39656: GO 40654
// for i in factories do
39658: LD_ADDR_VAR 0 8
39662: PUSH
39663: LD_VAR 0 6
39667: PUSH
39668: FOR_IN
39669: IFFALSE 39694
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39671: LD_ADDR_VAR 0 17
39675: PUSH
39676: LD_VAR 0 17
39680: PUSH
39681: LD_VAR 0 8
39685: PPUSH
39686: CALL_OW 478
39690: UNION
39691: ST_TO_ADDR
39692: GO 39668
39694: POP
39695: POP
// if not fac_list then
39696: LD_VAR 0 17
39700: NOT
39701: IFFALSE 39705
// exit ;
39703: GO 40654
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39705: LD_ADDR_VAR 0 5
39709: PUSH
39710: LD_INT 4
39712: PUSH
39713: LD_INT 5
39715: PUSH
39716: LD_INT 9
39718: PUSH
39719: LD_INT 10
39721: PUSH
39722: LD_INT 6
39724: PUSH
39725: LD_INT 7
39727: PUSH
39728: LD_INT 11
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 27
39742: PUSH
39743: LD_INT 28
39745: PUSH
39746: LD_INT 26
39748: PUSH
39749: LD_INT 30
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 43
39760: PUSH
39761: LD_INT 44
39763: PUSH
39764: LD_INT 46
39766: PUSH
39767: LD_INT 45
39769: PUSH
39770: LD_INT 47
39772: PUSH
39773: LD_INT 49
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: PUSH
39789: LD_VAR 0 12
39793: ARRAY
39794: ST_TO_ADDR
// for i in list do
39795: LD_ADDR_VAR 0 8
39799: PUSH
39800: LD_VAR 0 5
39804: PUSH
39805: FOR_IN
39806: IFFALSE 39839
// if not i in fac_list then
39808: LD_VAR 0 8
39812: PUSH
39813: LD_VAR 0 17
39817: IN
39818: NOT
39819: IFFALSE 39837
// list := list diff i ;
39821: LD_ADDR_VAR 0 5
39825: PUSH
39826: LD_VAR 0 5
39830: PUSH
39831: LD_VAR 0 8
39835: DIFF
39836: ST_TO_ADDR
39837: GO 39805
39839: POP
39840: POP
// if not list then
39841: LD_VAR 0 5
39845: NOT
39846: IFFALSE 39850
// exit ;
39848: GO 40654
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39850: LD_VAR 0 12
39854: PUSH
39855: LD_INT 3
39857: EQUAL
39858: PUSH
39859: LD_INT 49
39861: PUSH
39862: LD_VAR 0 5
39866: IN
39867: AND
39868: PUSH
39869: LD_INT 31
39871: PPUSH
39872: LD_VAR 0 16
39876: PPUSH
39877: CALL_OW 321
39881: PUSH
39882: LD_INT 2
39884: EQUAL
39885: AND
39886: IFFALSE 39946
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39888: LD_INT 22
39890: PUSH
39891: LD_VAR 0 16
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 35
39902: PUSH
39903: LD_INT 49
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 91
39912: PUSH
39913: LD_VAR 0 1
39917: PUSH
39918: LD_INT 10
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: PPUSH
39931: CALL_OW 69
39935: NOT
39936: IFFALSE 39946
// weapon := ru_time_lapser ;
39938: LD_ADDR_VAR 0 18
39942: PUSH
39943: LD_INT 49
39945: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39946: LD_VAR 0 12
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: IN
39961: PUSH
39962: LD_INT 11
39964: PUSH
39965: LD_VAR 0 5
39969: IN
39970: PUSH
39971: LD_INT 30
39973: PUSH
39974: LD_VAR 0 5
39978: IN
39979: OR
39980: AND
39981: PUSH
39982: LD_INT 6
39984: PPUSH
39985: LD_VAR 0 16
39989: PPUSH
39990: CALL_OW 321
39994: PUSH
39995: LD_INT 2
39997: EQUAL
39998: AND
39999: IFFALSE 40164
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40001: LD_INT 22
40003: PUSH
40004: LD_VAR 0 16
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 35
40018: PUSH
40019: LD_INT 11
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 35
40028: PUSH
40029: LD_INT 30
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 91
40043: PUSH
40044: LD_VAR 0 1
40048: PUSH
40049: LD_INT 18
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: PPUSH
40062: CALL_OW 69
40066: NOT
40067: PUSH
40068: LD_INT 22
40070: PUSH
40071: LD_VAR 0 16
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: LD_INT 30
40085: PUSH
40086: LD_INT 32
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 30
40095: PUSH
40096: LD_INT 33
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 91
40110: PUSH
40111: LD_VAR 0 1
40115: PUSH
40116: LD_INT 12
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: PPUSH
40132: CALL_OW 69
40136: PUSH
40137: LD_INT 2
40139: GREATER
40140: AND
40141: IFFALSE 40164
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40143: LD_ADDR_VAR 0 18
40147: PUSH
40148: LD_INT 11
40150: PUSH
40151: LD_INT 30
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_VAR 0 12
40162: ARRAY
40163: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40164: LD_VAR 0 18
40168: NOT
40169: PUSH
40170: LD_INT 40
40172: PPUSH
40173: LD_VAR 0 16
40177: PPUSH
40178: CALL_OW 321
40182: PUSH
40183: LD_INT 2
40185: EQUAL
40186: AND
40187: PUSH
40188: LD_INT 7
40190: PUSH
40191: LD_VAR 0 5
40195: IN
40196: PUSH
40197: LD_INT 28
40199: PUSH
40200: LD_VAR 0 5
40204: IN
40205: OR
40206: PUSH
40207: LD_INT 45
40209: PUSH
40210: LD_VAR 0 5
40214: IN
40215: OR
40216: AND
40217: IFFALSE 40471
// begin hex := GetHexInfo ( x , y ) ;
40219: LD_ADDR_VAR 0 4
40223: PUSH
40224: LD_VAR 0 10
40228: PPUSH
40229: LD_VAR 0 11
40233: PPUSH
40234: CALL_OW 546
40238: ST_TO_ADDR
// if hex [ 1 ] then
40239: LD_VAR 0 4
40243: PUSH
40244: LD_INT 1
40246: ARRAY
40247: IFFALSE 40251
// exit ;
40249: GO 40654
// height := hex [ 2 ] ;
40251: LD_ADDR_VAR 0 15
40255: PUSH
40256: LD_VAR 0 4
40260: PUSH
40261: LD_INT 2
40263: ARRAY
40264: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40265: LD_ADDR_VAR 0 14
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 3
40278: PUSH
40279: LD_INT 5
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: ST_TO_ADDR
// for i in tmp do
40288: LD_ADDR_VAR 0 8
40292: PUSH
40293: LD_VAR 0 14
40297: PUSH
40298: FOR_IN
40299: IFFALSE 40469
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40301: LD_ADDR_VAR 0 9
40305: PUSH
40306: LD_VAR 0 10
40310: PPUSH
40311: LD_VAR 0 8
40315: PPUSH
40316: LD_INT 5
40318: PPUSH
40319: CALL_OW 272
40323: PUSH
40324: LD_VAR 0 11
40328: PPUSH
40329: LD_VAR 0 8
40333: PPUSH
40334: LD_INT 5
40336: PPUSH
40337: CALL_OW 273
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40346: LD_VAR 0 9
40350: PUSH
40351: LD_INT 1
40353: ARRAY
40354: PPUSH
40355: LD_VAR 0 9
40359: PUSH
40360: LD_INT 2
40362: ARRAY
40363: PPUSH
40364: CALL_OW 488
40368: IFFALSE 40467
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40370: LD_ADDR_VAR 0 4
40374: PUSH
40375: LD_VAR 0 9
40379: PUSH
40380: LD_INT 1
40382: ARRAY
40383: PPUSH
40384: LD_VAR 0 9
40388: PUSH
40389: LD_INT 2
40391: ARRAY
40392: PPUSH
40393: CALL_OW 546
40397: ST_TO_ADDR
// if hex [ 1 ] then
40398: LD_VAR 0 4
40402: PUSH
40403: LD_INT 1
40405: ARRAY
40406: IFFALSE 40410
// continue ;
40408: GO 40298
// h := hex [ 2 ] ;
40410: LD_ADDR_VAR 0 13
40414: PUSH
40415: LD_VAR 0 4
40419: PUSH
40420: LD_INT 2
40422: ARRAY
40423: ST_TO_ADDR
// if h + 7 < height then
40424: LD_VAR 0 13
40428: PUSH
40429: LD_INT 7
40431: PLUS
40432: PUSH
40433: LD_VAR 0 15
40437: LESS
40438: IFFALSE 40467
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40440: LD_ADDR_VAR 0 18
40444: PUSH
40445: LD_INT 7
40447: PUSH
40448: LD_INT 28
40450: PUSH
40451: LD_INT 45
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: LIST
40458: PUSH
40459: LD_VAR 0 12
40463: ARRAY
40464: ST_TO_ADDR
// break ;
40465: GO 40469
// end ; end ; end ;
40467: GO 40298
40469: POP
40470: POP
// end ; if not weapon then
40471: LD_VAR 0 18
40475: NOT
40476: IFFALSE 40536
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40478: LD_ADDR_VAR 0 5
40482: PUSH
40483: LD_VAR 0 5
40487: PUSH
40488: LD_INT 11
40490: PUSH
40491: LD_INT 30
40493: PUSH
40494: LD_INT 49
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: DIFF
40502: ST_TO_ADDR
// if not list then
40503: LD_VAR 0 5
40507: NOT
40508: IFFALSE 40512
// exit ;
40510: GO 40654
// weapon := list [ rand ( 1 , list ) ] ;
40512: LD_ADDR_VAR 0 18
40516: PUSH
40517: LD_VAR 0 5
40521: PUSH
40522: LD_INT 1
40524: PPUSH
40525: LD_VAR 0 5
40529: PPUSH
40530: CALL_OW 12
40534: ARRAY
40535: ST_TO_ADDR
// end ; if weapon then
40536: LD_VAR 0 18
40540: IFFALSE 40654
// begin tmp := CostOfWeapon ( weapon ) ;
40542: LD_ADDR_VAR 0 14
40546: PUSH
40547: LD_VAR 0 18
40551: PPUSH
40552: CALL_OW 451
40556: ST_TO_ADDR
// j := GetBase ( tower ) ;
40557: LD_ADDR_VAR 0 9
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 274
40571: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40572: LD_VAR 0 9
40576: PPUSH
40577: LD_INT 1
40579: PPUSH
40580: CALL_OW 275
40584: PUSH
40585: LD_VAR 0 14
40589: PUSH
40590: LD_INT 1
40592: ARRAY
40593: GREATEREQUAL
40594: PUSH
40595: LD_VAR 0 9
40599: PPUSH
40600: LD_INT 2
40602: PPUSH
40603: CALL_OW 275
40607: PUSH
40608: LD_VAR 0 14
40612: PUSH
40613: LD_INT 2
40615: ARRAY
40616: GREATEREQUAL
40617: AND
40618: PUSH
40619: LD_VAR 0 9
40623: PPUSH
40624: LD_INT 3
40626: PPUSH
40627: CALL_OW 275
40631: PUSH
40632: LD_VAR 0 14
40636: PUSH
40637: LD_INT 3
40639: ARRAY
40640: GREATEREQUAL
40641: AND
40642: IFFALSE 40654
// result := weapon ;
40644: LD_ADDR_VAR 0 3
40648: PUSH
40649: LD_VAR 0 18
40653: ST_TO_ADDR
// end ; end ;
40654: LD_VAR 0 3
40658: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40659: LD_INT 0
40661: PPUSH
40662: PPUSH
// result := true ;
40663: LD_ADDR_VAR 0 3
40667: PUSH
40668: LD_INT 1
40670: ST_TO_ADDR
// if array1 = array2 then
40671: LD_VAR 0 1
40675: PUSH
40676: LD_VAR 0 2
40680: EQUAL
40681: IFFALSE 40741
// begin for i = 1 to array1 do
40683: LD_ADDR_VAR 0 4
40687: PUSH
40688: DOUBLE
40689: LD_INT 1
40691: DEC
40692: ST_TO_ADDR
40693: LD_VAR 0 1
40697: PUSH
40698: FOR_TO
40699: IFFALSE 40737
// if array1 [ i ] <> array2 [ i ] then
40701: LD_VAR 0 1
40705: PUSH
40706: LD_VAR 0 4
40710: ARRAY
40711: PUSH
40712: LD_VAR 0 2
40716: PUSH
40717: LD_VAR 0 4
40721: ARRAY
40722: NONEQUAL
40723: IFFALSE 40735
// begin result := false ;
40725: LD_ADDR_VAR 0 3
40729: PUSH
40730: LD_INT 0
40732: ST_TO_ADDR
// break ;
40733: GO 40737
// end ;
40735: GO 40698
40737: POP
40738: POP
// end else
40739: GO 40749
// result := false ;
40741: LD_ADDR_VAR 0 3
40745: PUSH
40746: LD_INT 0
40748: ST_TO_ADDR
// end ;
40749: LD_VAR 0 3
40753: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40754: LD_INT 0
40756: PPUSH
40757: PPUSH
40758: PPUSH
// pom := GetBase ( fac ) ;
40759: LD_ADDR_VAR 0 5
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: CALL_OW 274
40773: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40774: LD_ADDR_VAR 0 4
40778: PUSH
40779: LD_VAR 0 2
40783: PUSH
40784: LD_INT 1
40786: ARRAY
40787: PPUSH
40788: LD_VAR 0 2
40792: PUSH
40793: LD_INT 2
40795: ARRAY
40796: PPUSH
40797: LD_VAR 0 2
40801: PUSH
40802: LD_INT 3
40804: ARRAY
40805: PPUSH
40806: LD_VAR 0 2
40810: PUSH
40811: LD_INT 4
40813: ARRAY
40814: PPUSH
40815: CALL_OW 449
40819: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_VAR 0 5
40829: PPUSH
40830: LD_INT 1
40832: PPUSH
40833: CALL_OW 275
40837: PUSH
40838: LD_VAR 0 4
40842: PUSH
40843: LD_INT 1
40845: ARRAY
40846: GREATEREQUAL
40847: PUSH
40848: LD_VAR 0 5
40852: PPUSH
40853: LD_INT 2
40855: PPUSH
40856: CALL_OW 275
40860: PUSH
40861: LD_VAR 0 4
40865: PUSH
40866: LD_INT 2
40868: ARRAY
40869: GREATEREQUAL
40870: AND
40871: PUSH
40872: LD_VAR 0 5
40876: PPUSH
40877: LD_INT 3
40879: PPUSH
40880: CALL_OW 275
40884: PUSH
40885: LD_VAR 0 4
40889: PUSH
40890: LD_INT 3
40892: ARRAY
40893: GREATEREQUAL
40894: AND
40895: ST_TO_ADDR
// end ;
40896: LD_VAR 0 3
40900: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40901: LD_INT 0
40903: PPUSH
40904: PPUSH
40905: PPUSH
40906: PPUSH
// pom := GetBase ( building ) ;
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 274
40921: ST_TO_ADDR
// if not pom then
40922: LD_VAR 0 3
40926: NOT
40927: IFFALSE 40931
// exit ;
40929: GO 41101
// btype := GetBType ( building ) ;
40931: LD_ADDR_VAR 0 5
40935: PUSH
40936: LD_VAR 0 1
40940: PPUSH
40941: CALL_OW 266
40945: ST_TO_ADDR
// if btype = b_armoury then
40946: LD_VAR 0 5
40950: PUSH
40951: LD_INT 4
40953: EQUAL
40954: IFFALSE 40964
// btype := b_barracks ;
40956: LD_ADDR_VAR 0 5
40960: PUSH
40961: LD_INT 5
40963: ST_TO_ADDR
// if btype = b_depot then
40964: LD_VAR 0 5
40968: PUSH
40969: LD_INT 0
40971: EQUAL
40972: IFFALSE 40982
// btype := b_warehouse ;
40974: LD_ADDR_VAR 0 5
40978: PUSH
40979: LD_INT 1
40981: ST_TO_ADDR
// if btype = b_workshop then
40982: LD_VAR 0 5
40986: PUSH
40987: LD_INT 2
40989: EQUAL
40990: IFFALSE 41000
// btype := b_factory ;
40992: LD_ADDR_VAR 0 5
40996: PUSH
40997: LD_INT 3
40999: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41000: LD_ADDR_VAR 0 4
41004: PUSH
41005: LD_VAR 0 5
41009: PPUSH
41010: LD_VAR 0 1
41014: PPUSH
41015: CALL_OW 248
41019: PPUSH
41020: CALL_OW 450
41024: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41025: LD_ADDR_VAR 0 2
41029: PUSH
41030: LD_VAR 0 3
41034: PPUSH
41035: LD_INT 1
41037: PPUSH
41038: CALL_OW 275
41042: PUSH
41043: LD_VAR 0 4
41047: PUSH
41048: LD_INT 1
41050: ARRAY
41051: GREATEREQUAL
41052: PUSH
41053: LD_VAR 0 3
41057: PPUSH
41058: LD_INT 2
41060: PPUSH
41061: CALL_OW 275
41065: PUSH
41066: LD_VAR 0 4
41070: PUSH
41071: LD_INT 2
41073: ARRAY
41074: GREATEREQUAL
41075: AND
41076: PUSH
41077: LD_VAR 0 3
41081: PPUSH
41082: LD_INT 3
41084: PPUSH
41085: CALL_OW 275
41089: PUSH
41090: LD_VAR 0 4
41094: PUSH
41095: LD_INT 3
41097: ARRAY
41098: GREATEREQUAL
41099: AND
41100: ST_TO_ADDR
// end ;
41101: LD_VAR 0 2
41105: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41106: LD_INT 0
41108: PPUSH
41109: PPUSH
41110: PPUSH
// pom := GetBase ( building ) ;
41111: LD_ADDR_VAR 0 4
41115: PUSH
41116: LD_VAR 0 1
41120: PPUSH
41121: CALL_OW 274
41125: ST_TO_ADDR
// if not pom then
41126: LD_VAR 0 4
41130: NOT
41131: IFFALSE 41135
// exit ;
41133: GO 41236
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41135: LD_ADDR_VAR 0 5
41139: PUSH
41140: LD_VAR 0 2
41144: PPUSH
41145: LD_VAR 0 1
41149: PPUSH
41150: CALL_OW 248
41154: PPUSH
41155: CALL_OW 450
41159: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41160: LD_ADDR_VAR 0 3
41164: PUSH
41165: LD_VAR 0 4
41169: PPUSH
41170: LD_INT 1
41172: PPUSH
41173: CALL_OW 275
41177: PUSH
41178: LD_VAR 0 5
41182: PUSH
41183: LD_INT 1
41185: ARRAY
41186: GREATEREQUAL
41187: PUSH
41188: LD_VAR 0 4
41192: PPUSH
41193: LD_INT 2
41195: PPUSH
41196: CALL_OW 275
41200: PUSH
41201: LD_VAR 0 5
41205: PUSH
41206: LD_INT 2
41208: ARRAY
41209: GREATEREQUAL
41210: AND
41211: PUSH
41212: LD_VAR 0 4
41216: PPUSH
41217: LD_INT 3
41219: PPUSH
41220: CALL_OW 275
41224: PUSH
41225: LD_VAR 0 5
41229: PUSH
41230: LD_INT 3
41232: ARRAY
41233: GREATEREQUAL
41234: AND
41235: ST_TO_ADDR
// end ;
41236: LD_VAR 0 3
41240: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
41241: LD_INT 0
41243: PPUSH
41244: PPUSH
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
41252: PPUSH
// result := false ;
41253: LD_ADDR_VAR 0 6
41257: PUSH
41258: LD_INT 0
41260: ST_TO_ADDR
// if not base or not btype or not x or not y then
41261: LD_VAR 0 1
41265: NOT
41266: PUSH
41267: LD_VAR 0 2
41271: NOT
41272: OR
41273: PUSH
41274: LD_VAR 0 3
41278: NOT
41279: OR
41280: PUSH
41281: LD_VAR 0 4
41285: NOT
41286: OR
41287: IFFALSE 41291
// exit ;
41289: GO 41900
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
41291: LD_ADDR_VAR 0 12
41295: PUSH
41296: LD_VAR 0 2
41300: PPUSH
41301: LD_VAR 0 3
41305: PPUSH
41306: LD_VAR 0 4
41310: PPUSH
41311: LD_VAR 0 5
41315: PPUSH
41316: LD_VAR 0 1
41320: PUSH
41321: LD_INT 1
41323: ARRAY
41324: PPUSH
41325: CALL_OW 248
41329: PPUSH
41330: LD_INT 0
41332: PPUSH
41333: CALL 42737 0 6
41337: ST_TO_ADDR
// if not hexes then
41338: LD_VAR 0 12
41342: NOT
41343: IFFALSE 41347
// exit ;
41345: GO 41900
// for i = 1 to hexes do
41347: LD_ADDR_VAR 0 7
41351: PUSH
41352: DOUBLE
41353: LD_INT 1
41355: DEC
41356: ST_TO_ADDR
41357: LD_VAR 0 12
41361: PUSH
41362: FOR_TO
41363: IFFALSE 41898
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41365: LD_ADDR_VAR 0 11
41369: PUSH
41370: LD_VAR 0 12
41374: PUSH
41375: LD_VAR 0 7
41379: ARRAY
41380: PUSH
41381: LD_INT 1
41383: ARRAY
41384: PPUSH
41385: LD_VAR 0 12
41389: PUSH
41390: LD_VAR 0 7
41394: ARRAY
41395: PUSH
41396: LD_INT 2
41398: ARRAY
41399: PPUSH
41400: CALL_OW 428
41404: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41405: LD_VAR 0 12
41409: PUSH
41410: LD_VAR 0 7
41414: ARRAY
41415: PUSH
41416: LD_INT 1
41418: ARRAY
41419: PPUSH
41420: LD_VAR 0 12
41424: PUSH
41425: LD_VAR 0 7
41429: ARRAY
41430: PUSH
41431: LD_INT 2
41433: ARRAY
41434: PPUSH
41435: CALL_OW 351
41439: PUSH
41440: LD_VAR 0 12
41444: PUSH
41445: LD_VAR 0 7
41449: ARRAY
41450: PUSH
41451: LD_INT 1
41453: ARRAY
41454: PPUSH
41455: LD_VAR 0 12
41459: PUSH
41460: LD_VAR 0 7
41464: ARRAY
41465: PUSH
41466: LD_INT 2
41468: ARRAY
41469: PPUSH
41470: CALL_OW 488
41474: NOT
41475: OR
41476: PUSH
41477: LD_VAR 0 11
41481: PPUSH
41482: CALL_OW 247
41486: PUSH
41487: LD_INT 3
41489: EQUAL
41490: OR
41491: IFFALSE 41497
// exit ;
41493: POP
41494: POP
41495: GO 41900
// if not tmp or not tmp in base then
41497: LD_VAR 0 11
41501: NOT
41502: PUSH
41503: LD_VAR 0 11
41507: PUSH
41508: LD_VAR 0 1
41512: IN
41513: NOT
41514: OR
41515: IFFALSE 41519
// continue ;
41517: GO 41362
// result := true ;
41519: LD_ADDR_VAR 0 6
41523: PUSH
41524: LD_INT 1
41526: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41527: LD_ADDR_VAR 0 15
41531: PUSH
41532: LD_VAR 0 1
41536: PPUSH
41537: LD_INT 22
41539: PUSH
41540: LD_VAR 0 11
41544: PPUSH
41545: CALL_OW 255
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: LD_INT 30
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 30
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PPUSH
41586: CALL_OW 72
41590: ST_TO_ADDR
// if dep then
41591: LD_VAR 0 15
41595: IFFALSE 41731
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41597: LD_ADDR_VAR 0 14
41601: PUSH
41602: LD_VAR 0 15
41606: PUSH
41607: LD_INT 1
41609: ARRAY
41610: PPUSH
41611: CALL_OW 250
41615: PPUSH
41616: LD_VAR 0 15
41620: PUSH
41621: LD_INT 1
41623: ARRAY
41624: PPUSH
41625: CALL_OW 254
41629: PPUSH
41630: LD_INT 5
41632: PPUSH
41633: CALL_OW 272
41637: PUSH
41638: LD_VAR 0 15
41642: PUSH
41643: LD_INT 1
41645: ARRAY
41646: PPUSH
41647: CALL_OW 251
41651: PPUSH
41652: LD_VAR 0 15
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: PPUSH
41661: CALL_OW 254
41665: PPUSH
41666: LD_INT 5
41668: PPUSH
41669: CALL_OW 273
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41678: LD_VAR 0 14
41682: PUSH
41683: LD_INT 1
41685: ARRAY
41686: PPUSH
41687: LD_VAR 0 14
41691: PUSH
41692: LD_INT 2
41694: ARRAY
41695: PPUSH
41696: CALL_OW 488
41700: IFFALSE 41731
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41702: LD_VAR 0 11
41706: PPUSH
41707: LD_VAR 0 14
41711: PUSH
41712: LD_INT 1
41714: ARRAY
41715: PPUSH
41716: LD_VAR 0 14
41720: PUSH
41721: LD_INT 2
41723: ARRAY
41724: PPUSH
41725: CALL_OW 111
// continue ;
41729: GO 41362
// end ; end ; r := GetDir ( tmp ) ;
41731: LD_ADDR_VAR 0 13
41735: PUSH
41736: LD_VAR 0 11
41740: PPUSH
41741: CALL_OW 254
41745: ST_TO_ADDR
// if r = 5 then
41746: LD_VAR 0 13
41750: PUSH
41751: LD_INT 5
41753: EQUAL
41754: IFFALSE 41764
// r := 0 ;
41756: LD_ADDR_VAR 0 13
41760: PUSH
41761: LD_INT 0
41763: ST_TO_ADDR
// for j = r to 5 do
41764: LD_ADDR_VAR 0 8
41768: PUSH
41769: DOUBLE
41770: LD_VAR 0 13
41774: DEC
41775: ST_TO_ADDR
41776: LD_INT 5
41778: PUSH
41779: FOR_TO
41780: IFFALSE 41894
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41782: LD_ADDR_VAR 0 9
41786: PUSH
41787: LD_VAR 0 11
41791: PPUSH
41792: CALL_OW 250
41796: PPUSH
41797: LD_VAR 0 8
41801: PPUSH
41802: LD_INT 2
41804: PPUSH
41805: CALL_OW 272
41809: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41810: LD_ADDR_VAR 0 10
41814: PUSH
41815: LD_VAR 0 11
41819: PPUSH
41820: CALL_OW 251
41824: PPUSH
41825: LD_VAR 0 8
41829: PPUSH
41830: LD_INT 2
41832: PPUSH
41833: CALL_OW 273
41837: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41838: LD_VAR 0 9
41842: PPUSH
41843: LD_VAR 0 10
41847: PPUSH
41848: CALL_OW 488
41852: PUSH
41853: LD_VAR 0 9
41857: PPUSH
41858: LD_VAR 0 10
41862: PPUSH
41863: CALL_OW 428
41867: NOT
41868: AND
41869: IFFALSE 41892
// begin ComMoveXY ( tmp , _x , _y ) ;
41871: LD_VAR 0 11
41875: PPUSH
41876: LD_VAR 0 9
41880: PPUSH
41881: LD_VAR 0 10
41885: PPUSH
41886: CALL_OW 111
// break ;
41890: GO 41894
// end ; end ;
41892: GO 41779
41894: POP
41895: POP
// end ;
41896: GO 41362
41898: POP
41899: POP
// end ;
41900: LD_VAR 0 6
41904: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41905: LD_INT 0
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
// result := false ;
41917: LD_ADDR_VAR 0 6
41921: PUSH
41922: LD_INT 0
41924: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41925: LD_VAR 0 1
41929: NOT
41930: PUSH
41931: LD_VAR 0 1
41935: PPUSH
41936: CALL_OW 266
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: IN
41951: NOT
41952: OR
41953: PUSH
41954: LD_VAR 0 2
41958: NOT
41959: OR
41960: PUSH
41961: LD_VAR 0 5
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: LD_INT 4
41980: PUSH
41981: LD_INT 5
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: IN
41992: NOT
41993: OR
41994: PUSH
41995: LD_VAR 0 3
41999: PPUSH
42000: LD_VAR 0 4
42004: PPUSH
42005: CALL_OW 488
42009: NOT
42010: OR
42011: IFFALSE 42015
// exit ;
42013: GO 42732
// pom := GetBase ( depot ) ;
42015: LD_ADDR_VAR 0 10
42019: PUSH
42020: LD_VAR 0 1
42024: PPUSH
42025: CALL_OW 274
42029: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42030: LD_ADDR_VAR 0 11
42034: PUSH
42035: LD_VAR 0 2
42039: PPUSH
42040: LD_VAR 0 1
42044: PPUSH
42045: CALL_OW 248
42049: PPUSH
42050: CALL_OW 450
42054: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42055: LD_VAR 0 10
42059: PPUSH
42060: LD_INT 1
42062: PPUSH
42063: CALL_OW 275
42067: PUSH
42068: LD_VAR 0 11
42072: PUSH
42073: LD_INT 1
42075: ARRAY
42076: GREATEREQUAL
42077: PUSH
42078: LD_VAR 0 10
42082: PPUSH
42083: LD_INT 2
42085: PPUSH
42086: CALL_OW 275
42090: PUSH
42091: LD_VAR 0 11
42095: PUSH
42096: LD_INT 2
42098: ARRAY
42099: GREATEREQUAL
42100: AND
42101: PUSH
42102: LD_VAR 0 10
42106: PPUSH
42107: LD_INT 3
42109: PPUSH
42110: CALL_OW 275
42114: PUSH
42115: LD_VAR 0 11
42119: PUSH
42120: LD_INT 3
42122: ARRAY
42123: GREATEREQUAL
42124: AND
42125: NOT
42126: IFFALSE 42130
// exit ;
42128: GO 42732
// if GetBType ( depot ) = b_depot then
42130: LD_VAR 0 1
42134: PPUSH
42135: CALL_OW 266
42139: PUSH
42140: LD_INT 0
42142: EQUAL
42143: IFFALSE 42155
// dist := 28 else
42145: LD_ADDR_VAR 0 14
42149: PUSH
42150: LD_INT 28
42152: ST_TO_ADDR
42153: GO 42163
// dist := 36 ;
42155: LD_ADDR_VAR 0 14
42159: PUSH
42160: LD_INT 36
42162: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42163: LD_VAR 0 1
42167: PPUSH
42168: LD_VAR 0 3
42172: PPUSH
42173: LD_VAR 0 4
42177: PPUSH
42178: CALL_OW 297
42182: PUSH
42183: LD_VAR 0 14
42187: GREATER
42188: IFFALSE 42192
// exit ;
42190: GO 42732
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42192: LD_ADDR_VAR 0 12
42196: PUSH
42197: LD_VAR 0 2
42201: PPUSH
42202: LD_VAR 0 3
42206: PPUSH
42207: LD_VAR 0 4
42211: PPUSH
42212: LD_VAR 0 5
42216: PPUSH
42217: LD_VAR 0 1
42221: PPUSH
42222: CALL_OW 248
42226: PPUSH
42227: LD_INT 0
42229: PPUSH
42230: CALL 42737 0 6
42234: ST_TO_ADDR
// if not hexes then
42235: LD_VAR 0 12
42239: NOT
42240: IFFALSE 42244
// exit ;
42242: GO 42732
// hex := GetHexInfo ( x , y ) ;
42244: LD_ADDR_VAR 0 15
42248: PUSH
42249: LD_VAR 0 3
42253: PPUSH
42254: LD_VAR 0 4
42258: PPUSH
42259: CALL_OW 546
42263: ST_TO_ADDR
// if hex [ 1 ] then
42264: LD_VAR 0 15
42268: PUSH
42269: LD_INT 1
42271: ARRAY
42272: IFFALSE 42276
// exit ;
42274: GO 42732
// height := hex [ 2 ] ;
42276: LD_ADDR_VAR 0 13
42280: PUSH
42281: LD_VAR 0 15
42285: PUSH
42286: LD_INT 2
42288: ARRAY
42289: ST_TO_ADDR
// for i = 1 to hexes do
42290: LD_ADDR_VAR 0 7
42294: PUSH
42295: DOUBLE
42296: LD_INT 1
42298: DEC
42299: ST_TO_ADDR
42300: LD_VAR 0 12
42304: PUSH
42305: FOR_TO
42306: IFFALSE 42636
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42308: LD_VAR 0 12
42312: PUSH
42313: LD_VAR 0 7
42317: ARRAY
42318: PUSH
42319: LD_INT 1
42321: ARRAY
42322: PPUSH
42323: LD_VAR 0 12
42327: PUSH
42328: LD_VAR 0 7
42332: ARRAY
42333: PUSH
42334: LD_INT 2
42336: ARRAY
42337: PPUSH
42338: CALL_OW 488
42342: NOT
42343: PUSH
42344: LD_VAR 0 12
42348: PUSH
42349: LD_VAR 0 7
42353: ARRAY
42354: PUSH
42355: LD_INT 1
42357: ARRAY
42358: PPUSH
42359: LD_VAR 0 12
42363: PUSH
42364: LD_VAR 0 7
42368: ARRAY
42369: PUSH
42370: LD_INT 2
42372: ARRAY
42373: PPUSH
42374: CALL_OW 428
42378: PUSH
42379: LD_INT 0
42381: GREATER
42382: OR
42383: PUSH
42384: LD_VAR 0 12
42388: PUSH
42389: LD_VAR 0 7
42393: ARRAY
42394: PUSH
42395: LD_INT 1
42397: ARRAY
42398: PPUSH
42399: LD_VAR 0 12
42403: PUSH
42404: LD_VAR 0 7
42408: ARRAY
42409: PUSH
42410: LD_INT 2
42412: ARRAY
42413: PPUSH
42414: CALL_OW 351
42418: OR
42419: IFFALSE 42425
// exit ;
42421: POP
42422: POP
42423: GO 42732
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42425: LD_ADDR_VAR 0 8
42429: PUSH
42430: LD_VAR 0 12
42434: PUSH
42435: LD_VAR 0 7
42439: ARRAY
42440: PUSH
42441: LD_INT 1
42443: ARRAY
42444: PPUSH
42445: LD_VAR 0 12
42449: PUSH
42450: LD_VAR 0 7
42454: ARRAY
42455: PUSH
42456: LD_INT 2
42458: ARRAY
42459: PPUSH
42460: CALL_OW 546
42464: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42465: LD_VAR 0 8
42469: PUSH
42470: LD_INT 1
42472: ARRAY
42473: PUSH
42474: LD_VAR 0 8
42478: PUSH
42479: LD_INT 2
42481: ARRAY
42482: PUSH
42483: LD_VAR 0 13
42487: PUSH
42488: LD_INT 2
42490: PLUS
42491: GREATER
42492: OR
42493: PUSH
42494: LD_VAR 0 8
42498: PUSH
42499: LD_INT 2
42501: ARRAY
42502: PUSH
42503: LD_VAR 0 13
42507: PUSH
42508: LD_INT 2
42510: MINUS
42511: LESS
42512: OR
42513: PUSH
42514: LD_VAR 0 8
42518: PUSH
42519: LD_INT 3
42521: ARRAY
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 8
42528: PUSH
42529: LD_INT 9
42531: PUSH
42532: LD_INT 10
42534: PUSH
42535: LD_INT 11
42537: PUSH
42538: LD_INT 12
42540: PUSH
42541: LD_INT 13
42543: PUSH
42544: LD_INT 16
42546: PUSH
42547: LD_INT 17
42549: PUSH
42550: LD_INT 18
42552: PUSH
42553: LD_INT 19
42555: PUSH
42556: LD_INT 20
42558: PUSH
42559: LD_INT 21
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: IN
42577: NOT
42578: OR
42579: PUSH
42580: LD_VAR 0 8
42584: PUSH
42585: LD_INT 5
42587: ARRAY
42588: NOT
42589: OR
42590: PUSH
42591: LD_VAR 0 8
42595: PUSH
42596: LD_INT 6
42598: ARRAY
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 7
42608: PUSH
42609: LD_INT 9
42611: PUSH
42612: LD_INT 10
42614: PUSH
42615: LD_INT 11
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: IN
42626: NOT
42627: OR
42628: IFFALSE 42634
// exit ;
42630: POP
42631: POP
42632: GO 42732
// end ;
42634: GO 42305
42636: POP
42637: POP
// side := GetSide ( depot ) ;
42638: LD_ADDR_VAR 0 9
42642: PUSH
42643: LD_VAR 0 1
42647: PPUSH
42648: CALL_OW 255
42652: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42653: LD_VAR 0 9
42657: PPUSH
42658: LD_VAR 0 3
42662: PPUSH
42663: LD_VAR 0 4
42667: PPUSH
42668: LD_INT 20
42670: PPUSH
42671: CALL 35386 0 4
42675: PUSH
42676: LD_INT 4
42678: ARRAY
42679: IFFALSE 42683
// exit ;
42681: GO 42732
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42683: LD_VAR 0 2
42687: PUSH
42688: LD_INT 29
42690: PUSH
42691: LD_INT 30
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: IN
42698: PUSH
42699: LD_VAR 0 3
42703: PPUSH
42704: LD_VAR 0 4
42708: PPUSH
42709: LD_VAR 0 9
42713: PPUSH
42714: CALL_OW 440
42718: NOT
42719: AND
42720: IFFALSE 42724
// exit ;
42722: GO 42732
// result := true ;
42724: LD_ADDR_VAR 0 6
42728: PUSH
42729: LD_INT 1
42731: ST_TO_ADDR
// end ;
42732: LD_VAR 0 6
42736: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
42737: LD_INT 0
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
// result = [ ] ;
42797: LD_ADDR_VAR 0 7
42801: PUSH
42802: EMPTY
42803: ST_TO_ADDR
// temp_list = [ ] ;
42804: LD_ADDR_VAR 0 9
42808: PUSH
42809: EMPTY
42810: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42811: LD_VAR 0 4
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 3
42827: PUSH
42828: LD_INT 4
42830: PUSH
42831: LD_INT 5
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: IN
42842: NOT
42843: PUSH
42844: LD_VAR 0 1
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: IN
42859: PUSH
42860: LD_VAR 0 5
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: IN
42879: NOT
42880: AND
42881: OR
42882: IFFALSE 42886
// exit ;
42884: GO 61277
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42886: LD_VAR 0 1
42890: PUSH
42891: LD_INT 6
42893: PUSH
42894: LD_INT 7
42896: PUSH
42897: LD_INT 8
42899: PUSH
42900: LD_INT 13
42902: PUSH
42903: LD_INT 12
42905: PUSH
42906: LD_INT 15
42908: PUSH
42909: LD_INT 11
42911: PUSH
42912: LD_INT 14
42914: PUSH
42915: LD_INT 10
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: IN
42929: IFFALSE 42939
// btype = b_lab ;
42931: LD_ADDR_VAR 0 1
42935: PUSH
42936: LD_INT 6
42938: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42939: LD_VAR 0 6
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: IN
42958: NOT
42959: PUSH
42960: LD_VAR 0 1
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 3
42976: PUSH
42977: LD_INT 6
42979: PUSH
42980: LD_INT 36
42982: PUSH
42983: LD_INT 4
42985: PUSH
42986: LD_INT 5
42988: PUSH
42989: LD_INT 31
42991: PUSH
42992: LD_INT 32
42994: PUSH
42995: LD_INT 33
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: IN
43011: NOT
43012: PUSH
43013: LD_VAR 0 6
43017: PUSH
43018: LD_INT 1
43020: EQUAL
43021: AND
43022: OR
43023: PUSH
43024: LD_VAR 0 1
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: IN
43039: NOT
43040: PUSH
43041: LD_VAR 0 6
43045: PUSH
43046: LD_INT 2
43048: EQUAL
43049: AND
43050: OR
43051: IFFALSE 43061
// mode = 0 ;
43053: LD_ADDR_VAR 0 6
43057: PUSH
43058: LD_INT 0
43060: ST_TO_ADDR
// case mode of 0 :
43061: LD_VAR 0 6
43065: PUSH
43066: LD_INT 0
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 54527
43074: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43075: LD_ADDR_VAR 0 11
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 3
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43268: LD_ADDR_VAR 0 12
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43464: LD_ADDR_VAR 0 13
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 3
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 3
43623: NEG
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 3
43635: NEG
43636: PUSH
43637: LD_INT 3
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43663: LD_ADDR_VAR 0 14
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 2
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43859: LD_ADDR_VAR 0 15
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 3
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44052: LD_ADDR_VAR 0 16
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 3
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 3
44209: PUSH
44210: LD_INT 3
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44245: LD_ADDR_VAR 0 17
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44475: LD_ADDR_VAR 0 18
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44705: LD_ADDR_VAR 0 19
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44935: LD_ADDR_VAR 0 20
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45165: LD_ADDR_VAR 0 21
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45395: LD_ADDR_VAR 0 22
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45625: LD_ADDR_VAR 0 23
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 3
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45905: LD_ADDR_VAR 0 24
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 3
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46181: LD_ADDR_VAR 0 25
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 3
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46455: LD_ADDR_VAR 0 26
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46731: LD_ADDR_VAR 0 27
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 2
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47011: LD_ADDR_VAR 0 28
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 3
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47293: LD_ADDR_VAR 0 29
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 3
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 3
47537: NEG
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47572: LD_ADDR_VAR 0 30
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 3
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47850: LD_ADDR_VAR 0 31
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 3
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48128: LD_ADDR_VAR 0 32
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 3
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 3
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48406: LD_ADDR_VAR 0 33
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: LD_INT 3
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 3
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48685: LD_ADDR_VAR 0 34
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 3
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 3
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 3
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 3
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48965: LD_ADDR_VAR 0 35
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49077: LD_ADDR_VAR 0 36
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49189: LD_ADDR_VAR 0 37
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49301: LD_ADDR_VAR 0 38
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49413: LD_ADDR_VAR 0 39
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49525: LD_ADDR_VAR 0 40
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49637: LD_ADDR_VAR 0 41
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 3
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 3
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: NEG
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 3
49946: NEG
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49987: LD_ADDR_VAR 0 42
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 3
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 3
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50337: LD_ADDR_VAR 0 43
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 3
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50685: LD_ADDR_VAR 0 44
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: LD_INT 3
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: NEG
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51035: LD_ADDR_VAR 0 45
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 3
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 3
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 3
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 3
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: NEG
51345: PUSH
51346: LD_INT 3
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51385: LD_ADDR_VAR 0 46
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 3
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51733: LD_ADDR_VAR 0 47
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51884: LD_ADDR_VAR 0 48
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52031: LD_ADDR_VAR 0 49
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52175: LD_ADDR_VAR 0 50
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52319: LD_ADDR_VAR 0 51
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52466: LD_ADDR_VAR 0 52
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52617: LD_ADDR_VAR 0 53
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52847: LD_ADDR_VAR 0 54
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53077: LD_ADDR_VAR 0 55
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53307: LD_ADDR_VAR 0 56
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53537: LD_ADDR_VAR 0 57
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53767: LD_ADDR_VAR 0 58
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53997: LD_ADDR_VAR 0 59
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54085: LD_ADDR_VAR 0 60
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54173: LD_ADDR_VAR 0 61
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54261: LD_ADDR_VAR 0 62
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54349: LD_ADDR_VAR 0 63
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54437: LD_ADDR_VAR 0 64
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: ST_TO_ADDR
// end ; 1 :
54525: GO 60422
54527: LD_INT 1
54529: DOUBLE
54530: EQUAL
54531: IFTRUE 54535
54533: GO 57158
54535: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54536: LD_ADDR_VAR 0 11
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54580: LD_ADDR_VAR 0 12
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 3
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54621: LD_ADDR_VAR 0 13
54625: PUSH
54626: LD_INT 3
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54661: LD_ADDR_VAR 0 14
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 3
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 3
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54702: LD_ADDR_VAR 0 15
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 3
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54746: LD_ADDR_VAR 0 16
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 3
54777: NEG
54778: PUSH
54779: LD_INT 3
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54792: LD_ADDR_VAR 0 17
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 3
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: LIST
54835: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54836: LD_ADDR_VAR 0 18
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 3
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54877: LD_ADDR_VAR 0 19
54881: PUSH
54882: LD_INT 3
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 3
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54917: LD_ADDR_VAR 0 20
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54958: LD_ADDR_VAR 0 21
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55002: LD_ADDR_VAR 0 22
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: LD_INT 3
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: LD_INT 3
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55048: LD_ADDR_VAR 0 23
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 3
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 4
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55092: LD_ADDR_VAR 0 24
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55133: LD_ADDR_VAR 0 25
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 4
55150: PUSH
55151: LD_INT 3
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: PUSH
55161: LD_INT 4
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55173: LD_ADDR_VAR 0 26
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 4
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 3
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55214: LD_ADDR_VAR 0 27
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 4
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: LIST
55257: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55258: LD_ADDR_VAR 0 28
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: LD_INT 4
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 4
55289: NEG
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55304: LD_ADDR_VAR 0 29
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: LD_INT 4
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 4
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 5
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 5
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 6
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 6
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 5
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55459: LD_ADDR_VAR 0 30
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 4
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 4
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 4
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 5
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 5
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 5
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 6
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 6
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55602: LD_ADDR_VAR 0 31
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 4
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 4
55649: PUSH
55650: LD_INT 4
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 5
55669: PUSH
55670: LD_INT 4
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 5
55679: PUSH
55680: LD_INT 5
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 4
55689: PUSH
55690: LD_INT 5
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 6
55699: PUSH
55700: LD_INT 5
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 6
55709: PUSH
55710: LD_INT 6
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 5
55719: PUSH
55720: LD_INT 6
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55741: LD_ADDR_VAR 0 32
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 4
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 5
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 4
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 6
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 6
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 5
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55884: LD_ADDR_VAR 0 33
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 4
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 4
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 5
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 5
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 5
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 6
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 6
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56039: LD_ADDR_VAR 0 34
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: NEG
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: LD_INT 4
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: LD_INT 3
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 4
56106: NEG
56107: PUSH
56108: LD_INT 4
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 4
56118: NEG
56119: PUSH
56120: LD_INT 5
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 5
56130: NEG
56131: PUSH
56132: LD_INT 4
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 5
56142: NEG
56143: PUSH
56144: LD_INT 5
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 5
56154: NEG
56155: PUSH
56156: LD_INT 6
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 6
56166: NEG
56167: PUSH
56168: LD_INT 5
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 6
56178: NEG
56179: PUSH
56180: LD_INT 6
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56202: LD_ADDR_VAR 0 41
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 3
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56246: LD_ADDR_VAR 0 42
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56287: LD_ADDR_VAR 0 43
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56327: LD_ADDR_VAR 0 44
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56368: LD_ADDR_VAR 0 45
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56412: LD_ADDR_VAR 0 46
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: LD_INT 3
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56458: LD_ADDR_VAR 0 47
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56491: LD_ADDR_VAR 0 48
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56522: LD_ADDR_VAR 0 49
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56551: LD_ADDR_VAR 0 50
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 3
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56580: LD_ADDR_VAR 0 51
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56611: LD_ADDR_VAR 0 52
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56644: LD_ADDR_VAR 0 53
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: LIST
56687: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56688: LD_ADDR_VAR 0 54
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56729: LD_ADDR_VAR 0 55
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 3
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56769: LD_ADDR_VAR 0 56
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56810: LD_ADDR_VAR 0 57
56814: PUSH
56815: LD_INT 2
56817: NEG
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56854: LD_ADDR_VAR 0 58
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: LD_INT 3
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56900: LD_ADDR_VAR 0 59
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56944: LD_ADDR_VAR 0 60
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56985: LD_ADDR_VAR 0 61
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57025: LD_ADDR_VAR 0 62
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57066: LD_ADDR_VAR 0 63
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57110: LD_ADDR_VAR 0 64
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: LIST
57155: ST_TO_ADDR
// end ; 2 :
57156: GO 60422
57158: LD_INT 2
57160: DOUBLE
57161: EQUAL
57162: IFTRUE 57166
57164: GO 60421
57166: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57167: LD_ADDR_VAR 0 29
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 4
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 5
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 5
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 4
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 5
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 4
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 4
57297: PUSH
57298: LD_INT 4
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: LD_INT 4
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 4
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: LD_INT 4
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 4
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 4
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 5
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 5
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 4
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 5
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 3
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: NEG
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 4
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 4
57529: NEG
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 4
57552: NEG
57553: PUSH
57554: LD_INT 4
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: LD_INT 5
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: NEG
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 4
57600: NEG
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 5
57612: NEG
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: NEG
57625: PUSH
57626: LD_INT 5
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 3
57636: NEG
57637: PUSH
57638: LD_INT 5
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57705: LD_ADDR_VAR 0 30
57709: PUSH
57710: LD_INT 4
57712: PUSH
57713: LD_INT 4
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 4
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 5
57732: PUSH
57733: LD_INT 4
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 5
57742: PUSH
57743: LD_INT 5
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: LD_INT 5
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 5
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 4
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: LD_INT 4
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 4
57895: NEG
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 4
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: NEG
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 5
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 5
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: LD_INT 4
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: LD_INT 3
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 4
58057: NEG
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 4
58069: NEG
58070: PUSH
58071: LD_INT 4
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: LD_INT 4
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 4
58093: NEG
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 4
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 5
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 4
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 4
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: LD_INT 5
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 5
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58252: LD_ADDR_VAR 0 31
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 4
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 3
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 4
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 5
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 5
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 4
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 3
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 5
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 4
58408: NEG
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 4
58419: NEG
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 4
58431: NEG
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 4
58454: NEG
58455: PUSH
58456: LD_INT 4
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 4
58466: NEG
58467: PUSH
58468: LD_INT 5
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: LD_INT 4
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 4
58502: NEG
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 5
58514: NEG
58515: PUSH
58516: LD_INT 4
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 5
58526: NEG
58527: PUSH
58528: LD_INT 5
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: LD_INT 5
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 5
58550: NEG
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 3
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 4
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 4
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: LD_INT 4
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 4
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 4
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 5
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 5
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 4
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 3
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 5
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58802: LD_ADDR_VAR 0 32
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 4
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: NEG
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 5
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 5
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 5
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 4
58971: NEG
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 4
58983: NEG
58984: PUSH
58985: LD_INT 4
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 4
59007: NEG
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 4
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: LD_INT 5
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 4
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 4
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 5
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: LD_INT 5
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 3
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 4
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 4
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 4
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 4
59214: PUSH
59215: LD_INT 4
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 4
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 5
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 5
59244: PUSH
59245: LD_INT 5
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 4
59254: PUSH
59255: LD_INT 5
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: LD_INT 4
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 5
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59349: LD_ADDR_VAR 0 33
59353: PUSH
59354: LD_INT 4
59356: NEG
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 4
59368: NEG
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 4
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 4
59404: NEG
59405: PUSH
59406: LD_INT 3
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 5
59416: NEG
59417: PUSH
59418: LD_INT 4
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 5
59428: NEG
59429: PUSH
59430: LD_INT 5
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: LD_INT 5
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 5
59452: NEG
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 3
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 4
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 3
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 4
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 4
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 4
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 5
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 5
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 4
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 5
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 3
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 4
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 4
59689: PUSH
59690: LD_INT 4
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 3
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 4
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: LD_INT 4
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 4
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 3
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 4
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 5
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 5
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: LD_INT 4
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 3
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 5
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: LD_INT 3
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59887: LD_ADDR_VAR 0 34
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 4
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 5
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 4
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 4
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 5
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: LD_INT 5
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 4
60089: PUSH
60090: LD_INT 4
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 4
60099: PUSH
60100: LD_INT 3
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 5
60109: PUSH
60110: LD_INT 4
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 5
60119: PUSH
60120: LD_INT 5
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 4
60129: PUSH
60130: LD_INT 5
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 5
60159: PUSH
60160: LD_INT 3
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: LD_INT 5
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: LD_INT 4
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 3
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: LD_INT 4
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 4
60272: NEG
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: NEG
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 5
60328: NEG
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 5
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 5
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// end ; end ;
60419: GO 60422
60421: POP
// case btype of b_depot , b_warehouse :
60422: LD_VAR 0 1
60426: PUSH
60427: LD_INT 0
60429: DOUBLE
60430: EQUAL
60431: IFTRUE 60441
60433: LD_INT 1
60435: DOUBLE
60436: EQUAL
60437: IFTRUE 60441
60439: GO 60642
60441: POP
// case nation of nation_american :
60442: LD_VAR 0 5
60446: PUSH
60447: LD_INT 1
60449: DOUBLE
60450: EQUAL
60451: IFTRUE 60455
60453: GO 60511
60455: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
60456: LD_ADDR_VAR 0 9
60460: PUSH
60461: LD_VAR 0 11
60465: PUSH
60466: LD_VAR 0 12
60470: PUSH
60471: LD_VAR 0 13
60475: PUSH
60476: LD_VAR 0 14
60480: PUSH
60481: LD_VAR 0 15
60485: PUSH
60486: LD_VAR 0 16
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: PUSH
60499: LD_VAR 0 4
60503: PUSH
60504: LD_INT 1
60506: PLUS
60507: ARRAY
60508: ST_TO_ADDR
60509: GO 60640
60511: LD_INT 2
60513: DOUBLE
60514: EQUAL
60515: IFTRUE 60519
60517: GO 60575
60519: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
60520: LD_ADDR_VAR 0 9
60524: PUSH
60525: LD_VAR 0 17
60529: PUSH
60530: LD_VAR 0 18
60534: PUSH
60535: LD_VAR 0 19
60539: PUSH
60540: LD_VAR 0 20
60544: PUSH
60545: LD_VAR 0 21
60549: PUSH
60550: LD_VAR 0 22
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: PUSH
60563: LD_VAR 0 4
60567: PUSH
60568: LD_INT 1
60570: PLUS
60571: ARRAY
60572: ST_TO_ADDR
60573: GO 60640
60575: LD_INT 3
60577: DOUBLE
60578: EQUAL
60579: IFTRUE 60583
60581: GO 60639
60583: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60584: LD_ADDR_VAR 0 9
60588: PUSH
60589: LD_VAR 0 23
60593: PUSH
60594: LD_VAR 0 24
60598: PUSH
60599: LD_VAR 0 25
60603: PUSH
60604: LD_VAR 0 26
60608: PUSH
60609: LD_VAR 0 27
60613: PUSH
60614: LD_VAR 0 28
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 4
60631: PUSH
60632: LD_INT 1
60634: PLUS
60635: ARRAY
60636: ST_TO_ADDR
60637: GO 60640
60639: POP
60640: GO 61195
60642: LD_INT 2
60644: DOUBLE
60645: EQUAL
60646: IFTRUE 60656
60648: LD_INT 3
60650: DOUBLE
60651: EQUAL
60652: IFTRUE 60656
60654: GO 60712
60656: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60657: LD_ADDR_VAR 0 9
60661: PUSH
60662: LD_VAR 0 29
60666: PUSH
60667: LD_VAR 0 30
60671: PUSH
60672: LD_VAR 0 31
60676: PUSH
60677: LD_VAR 0 32
60681: PUSH
60682: LD_VAR 0 33
60686: PUSH
60687: LD_VAR 0 34
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: PUSH
60700: LD_VAR 0 4
60704: PUSH
60705: LD_INT 1
60707: PLUS
60708: ARRAY
60709: ST_TO_ADDR
60710: GO 61195
60712: LD_INT 16
60714: DOUBLE
60715: EQUAL
60716: IFTRUE 60774
60718: LD_INT 17
60720: DOUBLE
60721: EQUAL
60722: IFTRUE 60774
60724: LD_INT 18
60726: DOUBLE
60727: EQUAL
60728: IFTRUE 60774
60730: LD_INT 19
60732: DOUBLE
60733: EQUAL
60734: IFTRUE 60774
60736: LD_INT 22
60738: DOUBLE
60739: EQUAL
60740: IFTRUE 60774
60742: LD_INT 20
60744: DOUBLE
60745: EQUAL
60746: IFTRUE 60774
60748: LD_INT 21
60750: DOUBLE
60751: EQUAL
60752: IFTRUE 60774
60754: LD_INT 23
60756: DOUBLE
60757: EQUAL
60758: IFTRUE 60774
60760: LD_INT 24
60762: DOUBLE
60763: EQUAL
60764: IFTRUE 60774
60766: LD_INT 25
60768: DOUBLE
60769: EQUAL
60770: IFTRUE 60774
60772: GO 60830
60774: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60775: LD_ADDR_VAR 0 9
60779: PUSH
60780: LD_VAR 0 35
60784: PUSH
60785: LD_VAR 0 36
60789: PUSH
60790: LD_VAR 0 37
60794: PUSH
60795: LD_VAR 0 38
60799: PUSH
60800: LD_VAR 0 39
60804: PUSH
60805: LD_VAR 0 40
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: PUSH
60818: LD_VAR 0 4
60822: PUSH
60823: LD_INT 1
60825: PLUS
60826: ARRAY
60827: ST_TO_ADDR
60828: GO 61195
60830: LD_INT 6
60832: DOUBLE
60833: EQUAL
60834: IFTRUE 60886
60836: LD_INT 7
60838: DOUBLE
60839: EQUAL
60840: IFTRUE 60886
60842: LD_INT 8
60844: DOUBLE
60845: EQUAL
60846: IFTRUE 60886
60848: LD_INT 13
60850: DOUBLE
60851: EQUAL
60852: IFTRUE 60886
60854: LD_INT 12
60856: DOUBLE
60857: EQUAL
60858: IFTRUE 60886
60860: LD_INT 15
60862: DOUBLE
60863: EQUAL
60864: IFTRUE 60886
60866: LD_INT 11
60868: DOUBLE
60869: EQUAL
60870: IFTRUE 60886
60872: LD_INT 14
60874: DOUBLE
60875: EQUAL
60876: IFTRUE 60886
60878: LD_INT 10
60880: DOUBLE
60881: EQUAL
60882: IFTRUE 60886
60884: GO 60942
60886: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
60887: LD_ADDR_VAR 0 9
60891: PUSH
60892: LD_VAR 0 41
60896: PUSH
60897: LD_VAR 0 42
60901: PUSH
60902: LD_VAR 0 43
60906: PUSH
60907: LD_VAR 0 44
60911: PUSH
60912: LD_VAR 0 45
60916: PUSH
60917: LD_VAR 0 46
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: PUSH
60930: LD_VAR 0 4
60934: PUSH
60935: LD_INT 1
60937: PLUS
60938: ARRAY
60939: ST_TO_ADDR
60940: GO 61195
60942: LD_INT 36
60944: DOUBLE
60945: EQUAL
60946: IFTRUE 60950
60948: GO 61006
60950: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60951: LD_ADDR_VAR 0 9
60955: PUSH
60956: LD_VAR 0 47
60960: PUSH
60961: LD_VAR 0 48
60965: PUSH
60966: LD_VAR 0 49
60970: PUSH
60971: LD_VAR 0 50
60975: PUSH
60976: LD_VAR 0 51
60980: PUSH
60981: LD_VAR 0 52
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: PUSH
60994: LD_VAR 0 4
60998: PUSH
60999: LD_INT 1
61001: PLUS
61002: ARRAY
61003: ST_TO_ADDR
61004: GO 61195
61006: LD_INT 4
61008: DOUBLE
61009: EQUAL
61010: IFTRUE 61032
61012: LD_INT 5
61014: DOUBLE
61015: EQUAL
61016: IFTRUE 61032
61018: LD_INT 34
61020: DOUBLE
61021: EQUAL
61022: IFTRUE 61032
61024: LD_INT 37
61026: DOUBLE
61027: EQUAL
61028: IFTRUE 61032
61030: GO 61088
61032: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61033: LD_ADDR_VAR 0 9
61037: PUSH
61038: LD_VAR 0 53
61042: PUSH
61043: LD_VAR 0 54
61047: PUSH
61048: LD_VAR 0 55
61052: PUSH
61053: LD_VAR 0 56
61057: PUSH
61058: LD_VAR 0 57
61062: PUSH
61063: LD_VAR 0 58
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: PUSH
61076: LD_VAR 0 4
61080: PUSH
61081: LD_INT 1
61083: PLUS
61084: ARRAY
61085: ST_TO_ADDR
61086: GO 61195
61088: LD_INT 31
61090: DOUBLE
61091: EQUAL
61092: IFTRUE 61138
61094: LD_INT 32
61096: DOUBLE
61097: EQUAL
61098: IFTRUE 61138
61100: LD_INT 33
61102: DOUBLE
61103: EQUAL
61104: IFTRUE 61138
61106: LD_INT 27
61108: DOUBLE
61109: EQUAL
61110: IFTRUE 61138
61112: LD_INT 26
61114: DOUBLE
61115: EQUAL
61116: IFTRUE 61138
61118: LD_INT 28
61120: DOUBLE
61121: EQUAL
61122: IFTRUE 61138
61124: LD_INT 29
61126: DOUBLE
61127: EQUAL
61128: IFTRUE 61138
61130: LD_INT 30
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61138
61136: GO 61194
61138: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
61139: LD_ADDR_VAR 0 9
61143: PUSH
61144: LD_VAR 0 59
61148: PUSH
61149: LD_VAR 0 60
61153: PUSH
61154: LD_VAR 0 61
61158: PUSH
61159: LD_VAR 0 62
61163: PUSH
61164: LD_VAR 0 63
61168: PUSH
61169: LD_VAR 0 64
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: PUSH
61182: LD_VAR 0 4
61186: PUSH
61187: LD_INT 1
61189: PLUS
61190: ARRAY
61191: ST_TO_ADDR
61192: GO 61195
61194: POP
// temp_list2 = [ ] ;
61195: LD_ADDR_VAR 0 10
61199: PUSH
61200: EMPTY
61201: ST_TO_ADDR
// for i in temp_list do
61202: LD_ADDR_VAR 0 8
61206: PUSH
61207: LD_VAR 0 9
61211: PUSH
61212: FOR_IN
61213: IFFALSE 61265
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61215: LD_ADDR_VAR 0 10
61219: PUSH
61220: LD_VAR 0 10
61224: PUSH
61225: LD_VAR 0 8
61229: PUSH
61230: LD_INT 1
61232: ARRAY
61233: PUSH
61234: LD_VAR 0 2
61238: PLUS
61239: PUSH
61240: LD_VAR 0 8
61244: PUSH
61245: LD_INT 2
61247: ARRAY
61248: PUSH
61249: LD_VAR 0 3
61253: PLUS
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: EMPTY
61260: LIST
61261: ADD
61262: ST_TO_ADDR
61263: GO 61212
61265: POP
61266: POP
// result = temp_list2 ;
61267: LD_ADDR_VAR 0 7
61271: PUSH
61272: LD_VAR 0 10
61276: ST_TO_ADDR
// end ;
61277: LD_VAR 0 7
61281: RET
// export function EnemyInRange ( unit , dist ) ; begin
61282: LD_INT 0
61284: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61285: LD_ADDR_VAR 0 3
61289: PUSH
61290: LD_VAR 0 1
61294: PPUSH
61295: CALL_OW 255
61299: PPUSH
61300: LD_VAR 0 1
61304: PPUSH
61305: CALL_OW 250
61309: PPUSH
61310: LD_VAR 0 1
61314: PPUSH
61315: CALL_OW 251
61319: PPUSH
61320: LD_VAR 0 2
61324: PPUSH
61325: CALL 35386 0 4
61329: PUSH
61330: LD_INT 4
61332: ARRAY
61333: ST_TO_ADDR
// end ;
61334: LD_VAR 0 3
61338: RET
// export function PlayerSeeMe ( unit ) ; begin
61339: LD_INT 0
61341: PPUSH
// result := See ( your_side , unit ) ;
61342: LD_ADDR_VAR 0 2
61346: PUSH
61347: LD_OWVAR 2
61351: PPUSH
61352: LD_VAR 0 1
61356: PPUSH
61357: CALL_OW 292
61361: ST_TO_ADDR
// end ;
61362: LD_VAR 0 2
61366: RET
// export function ReverseDir ( unit ) ; begin
61367: LD_INT 0
61369: PPUSH
// if not unit then
61370: LD_VAR 0 1
61374: NOT
61375: IFFALSE 61379
// exit ;
61377: GO 61402
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61379: LD_ADDR_VAR 0 2
61383: PUSH
61384: LD_VAR 0 1
61388: PPUSH
61389: CALL_OW 254
61393: PUSH
61394: LD_INT 3
61396: PLUS
61397: PUSH
61398: LD_INT 6
61400: MOD
61401: ST_TO_ADDR
// end ;
61402: LD_VAR 0 2
61406: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61407: LD_INT 0
61409: PPUSH
61410: PPUSH
61411: PPUSH
61412: PPUSH
61413: PPUSH
// if not hexes then
61414: LD_VAR 0 2
61418: NOT
61419: IFFALSE 61423
// exit ;
61421: GO 61571
// dist := 9999 ;
61423: LD_ADDR_VAR 0 5
61427: PUSH
61428: LD_INT 9999
61430: ST_TO_ADDR
// for i = 1 to hexes do
61431: LD_ADDR_VAR 0 4
61435: PUSH
61436: DOUBLE
61437: LD_INT 1
61439: DEC
61440: ST_TO_ADDR
61441: LD_VAR 0 2
61445: PUSH
61446: FOR_TO
61447: IFFALSE 61559
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61449: LD_VAR 0 1
61453: PPUSH
61454: LD_VAR 0 2
61458: PUSH
61459: LD_VAR 0 4
61463: ARRAY
61464: PUSH
61465: LD_INT 1
61467: ARRAY
61468: PPUSH
61469: LD_VAR 0 2
61473: PUSH
61474: LD_VAR 0 4
61478: ARRAY
61479: PUSH
61480: LD_INT 2
61482: ARRAY
61483: PPUSH
61484: CALL_OW 297
61488: PUSH
61489: LD_VAR 0 5
61493: LESS
61494: IFFALSE 61557
// begin hex := hexes [ i ] ;
61496: LD_ADDR_VAR 0 7
61500: PUSH
61501: LD_VAR 0 2
61505: PUSH
61506: LD_VAR 0 4
61510: ARRAY
61511: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61512: LD_ADDR_VAR 0 5
61516: PUSH
61517: LD_VAR 0 1
61521: PPUSH
61522: LD_VAR 0 2
61526: PUSH
61527: LD_VAR 0 4
61531: ARRAY
61532: PUSH
61533: LD_INT 1
61535: ARRAY
61536: PPUSH
61537: LD_VAR 0 2
61541: PUSH
61542: LD_VAR 0 4
61546: ARRAY
61547: PUSH
61548: LD_INT 2
61550: ARRAY
61551: PPUSH
61552: CALL_OW 297
61556: ST_TO_ADDR
// end ; end ;
61557: GO 61446
61559: POP
61560: POP
// result := hex ;
61561: LD_ADDR_VAR 0 3
61565: PUSH
61566: LD_VAR 0 7
61570: ST_TO_ADDR
// end ;
61571: LD_VAR 0 3
61575: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61576: LD_INT 0
61578: PPUSH
61579: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61580: LD_VAR 0 1
61584: NOT
61585: PUSH
61586: LD_VAR 0 1
61590: PUSH
61591: LD_INT 21
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 23
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PPUSH
61615: CALL_OW 69
61619: IN
61620: NOT
61621: OR
61622: IFFALSE 61626
// exit ;
61624: GO 61673
// for i = 1 to 3 do
61626: LD_ADDR_VAR 0 3
61630: PUSH
61631: DOUBLE
61632: LD_INT 1
61634: DEC
61635: ST_TO_ADDR
61636: LD_INT 3
61638: PUSH
61639: FOR_TO
61640: IFFALSE 61671
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61642: LD_VAR 0 1
61646: PPUSH
61647: CALL_OW 250
61651: PPUSH
61652: LD_VAR 0 1
61656: PPUSH
61657: CALL_OW 251
61661: PPUSH
61662: LD_INT 1
61664: PPUSH
61665: CALL_OW 453
61669: GO 61639
61671: POP
61672: POP
// end ;
61673: LD_VAR 0 2
61677: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61678: LD_INT 0
61680: PPUSH
61681: PPUSH
61682: PPUSH
61683: PPUSH
61684: PPUSH
61685: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61686: LD_VAR 0 1
61690: NOT
61691: PUSH
61692: LD_VAR 0 2
61696: NOT
61697: OR
61698: PUSH
61699: LD_VAR 0 1
61703: PPUSH
61704: CALL_OW 314
61708: OR
61709: IFFALSE 61713
// exit ;
61711: GO 62154
// x := GetX ( enemy_unit ) ;
61713: LD_ADDR_VAR 0 7
61717: PUSH
61718: LD_VAR 0 2
61722: PPUSH
61723: CALL_OW 250
61727: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61728: LD_ADDR_VAR 0 8
61732: PUSH
61733: LD_VAR 0 2
61737: PPUSH
61738: CALL_OW 251
61742: ST_TO_ADDR
// if not x or not y then
61743: LD_VAR 0 7
61747: NOT
61748: PUSH
61749: LD_VAR 0 8
61753: NOT
61754: OR
61755: IFFALSE 61759
// exit ;
61757: GO 62154
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61759: LD_ADDR_VAR 0 6
61763: PUSH
61764: LD_VAR 0 7
61768: PPUSH
61769: LD_INT 0
61771: PPUSH
61772: LD_INT 4
61774: PPUSH
61775: CALL_OW 272
61779: PUSH
61780: LD_VAR 0 8
61784: PPUSH
61785: LD_INT 0
61787: PPUSH
61788: LD_INT 4
61790: PPUSH
61791: CALL_OW 273
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_VAR 0 7
61804: PPUSH
61805: LD_INT 1
61807: PPUSH
61808: LD_INT 4
61810: PPUSH
61811: CALL_OW 272
61815: PUSH
61816: LD_VAR 0 8
61820: PPUSH
61821: LD_INT 1
61823: PPUSH
61824: LD_INT 4
61826: PPUSH
61827: CALL_OW 273
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 7
61840: PPUSH
61841: LD_INT 2
61843: PPUSH
61844: LD_INT 4
61846: PPUSH
61847: CALL_OW 272
61851: PUSH
61852: LD_VAR 0 8
61856: PPUSH
61857: LD_INT 2
61859: PPUSH
61860: LD_INT 4
61862: PPUSH
61863: CALL_OW 273
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_VAR 0 7
61876: PPUSH
61877: LD_INT 3
61879: PPUSH
61880: LD_INT 4
61882: PPUSH
61883: CALL_OW 272
61887: PUSH
61888: LD_VAR 0 8
61892: PPUSH
61893: LD_INT 3
61895: PPUSH
61896: LD_INT 4
61898: PPUSH
61899: CALL_OW 273
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_VAR 0 7
61912: PPUSH
61913: LD_INT 4
61915: PPUSH
61916: LD_INT 4
61918: PPUSH
61919: CALL_OW 272
61923: PUSH
61924: LD_VAR 0 8
61928: PPUSH
61929: LD_INT 4
61931: PPUSH
61932: LD_INT 4
61934: PPUSH
61935: CALL_OW 273
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_VAR 0 7
61948: PPUSH
61949: LD_INT 5
61951: PPUSH
61952: LD_INT 4
61954: PPUSH
61955: CALL_OW 272
61959: PUSH
61960: LD_VAR 0 8
61964: PPUSH
61965: LD_INT 5
61967: PPUSH
61968: LD_INT 4
61970: PPUSH
61971: CALL_OW 273
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: ST_TO_ADDR
// for i = tmp downto 1 do
61988: LD_ADDR_VAR 0 4
61992: PUSH
61993: DOUBLE
61994: LD_VAR 0 6
61998: INC
61999: ST_TO_ADDR
62000: LD_INT 1
62002: PUSH
62003: FOR_DOWNTO
62004: IFFALSE 62105
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62006: LD_VAR 0 6
62010: PUSH
62011: LD_VAR 0 4
62015: ARRAY
62016: PUSH
62017: LD_INT 1
62019: ARRAY
62020: PPUSH
62021: LD_VAR 0 6
62025: PUSH
62026: LD_VAR 0 4
62030: ARRAY
62031: PUSH
62032: LD_INT 2
62034: ARRAY
62035: PPUSH
62036: CALL_OW 488
62040: NOT
62041: PUSH
62042: LD_VAR 0 6
62046: PUSH
62047: LD_VAR 0 4
62051: ARRAY
62052: PUSH
62053: LD_INT 1
62055: ARRAY
62056: PPUSH
62057: LD_VAR 0 6
62061: PUSH
62062: LD_VAR 0 4
62066: ARRAY
62067: PUSH
62068: LD_INT 2
62070: ARRAY
62071: PPUSH
62072: CALL_OW 428
62076: PUSH
62077: LD_INT 0
62079: NONEQUAL
62080: OR
62081: IFFALSE 62103
// tmp := Delete ( tmp , i ) ;
62083: LD_ADDR_VAR 0 6
62087: PUSH
62088: LD_VAR 0 6
62092: PPUSH
62093: LD_VAR 0 4
62097: PPUSH
62098: CALL_OW 3
62102: ST_TO_ADDR
62103: GO 62003
62105: POP
62106: POP
// j := GetClosestHex ( unit , tmp ) ;
62107: LD_ADDR_VAR 0 5
62111: PUSH
62112: LD_VAR 0 1
62116: PPUSH
62117: LD_VAR 0 6
62121: PPUSH
62122: CALL 61407 0 2
62126: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62127: LD_VAR 0 1
62131: PPUSH
62132: LD_VAR 0 5
62136: PUSH
62137: LD_INT 1
62139: ARRAY
62140: PPUSH
62141: LD_VAR 0 5
62145: PUSH
62146: LD_INT 2
62148: ARRAY
62149: PPUSH
62150: CALL_OW 111
// end ;
62154: LD_VAR 0 3
62158: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62159: LD_INT 0
62161: PPUSH
62162: PPUSH
62163: PPUSH
// uc_side = 0 ;
62164: LD_ADDR_OWVAR 20
62168: PUSH
62169: LD_INT 0
62171: ST_TO_ADDR
// uc_nation = 0 ;
62172: LD_ADDR_OWVAR 21
62176: PUSH
62177: LD_INT 0
62179: ST_TO_ADDR
// InitHc ;
62180: CALL_OW 19
// InitVc ;
62184: CALL_OW 20
// if mastodonts then
62188: LD_VAR 0 6
62192: IFFALSE 62259
// for i = 1 to mastodonts do
62194: LD_ADDR_VAR 0 11
62198: PUSH
62199: DOUBLE
62200: LD_INT 1
62202: DEC
62203: ST_TO_ADDR
62204: LD_VAR 0 6
62208: PUSH
62209: FOR_TO
62210: IFFALSE 62257
// begin vc_chassis := 31 ;
62212: LD_ADDR_OWVAR 37
62216: PUSH
62217: LD_INT 31
62219: ST_TO_ADDR
// vc_control := control_rider ;
62220: LD_ADDR_OWVAR 38
62224: PUSH
62225: LD_INT 4
62227: ST_TO_ADDR
// animal := CreateVehicle ;
62228: LD_ADDR_VAR 0 12
62232: PUSH
62233: CALL_OW 45
62237: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62238: LD_VAR 0 12
62242: PPUSH
62243: LD_VAR 0 8
62247: PPUSH
62248: LD_INT 0
62250: PPUSH
62251: CALL 64328 0 3
// end ;
62255: GO 62209
62257: POP
62258: POP
// if horses then
62259: LD_VAR 0 5
62263: IFFALSE 62330
// for i = 1 to horses do
62265: LD_ADDR_VAR 0 11
62269: PUSH
62270: DOUBLE
62271: LD_INT 1
62273: DEC
62274: ST_TO_ADDR
62275: LD_VAR 0 5
62279: PUSH
62280: FOR_TO
62281: IFFALSE 62328
// begin hc_class := 21 ;
62283: LD_ADDR_OWVAR 28
62287: PUSH
62288: LD_INT 21
62290: ST_TO_ADDR
// hc_gallery :=  ;
62291: LD_ADDR_OWVAR 33
62295: PUSH
62296: LD_STRING 
62298: ST_TO_ADDR
// animal := CreateHuman ;
62299: LD_ADDR_VAR 0 12
62303: PUSH
62304: CALL_OW 44
62308: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62309: LD_VAR 0 12
62313: PPUSH
62314: LD_VAR 0 8
62318: PPUSH
62319: LD_INT 0
62321: PPUSH
62322: CALL 64328 0 3
// end ;
62326: GO 62280
62328: POP
62329: POP
// if birds then
62330: LD_VAR 0 1
62334: IFFALSE 62401
// for i = 1 to birds do
62336: LD_ADDR_VAR 0 11
62340: PUSH
62341: DOUBLE
62342: LD_INT 1
62344: DEC
62345: ST_TO_ADDR
62346: LD_VAR 0 1
62350: PUSH
62351: FOR_TO
62352: IFFALSE 62399
// begin hc_class = 18 ;
62354: LD_ADDR_OWVAR 28
62358: PUSH
62359: LD_INT 18
62361: ST_TO_ADDR
// hc_gallery =  ;
62362: LD_ADDR_OWVAR 33
62366: PUSH
62367: LD_STRING 
62369: ST_TO_ADDR
// animal := CreateHuman ;
62370: LD_ADDR_VAR 0 12
62374: PUSH
62375: CALL_OW 44
62379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62380: LD_VAR 0 12
62384: PPUSH
62385: LD_VAR 0 8
62389: PPUSH
62390: LD_INT 0
62392: PPUSH
62393: CALL 64328 0 3
// end ;
62397: GO 62351
62399: POP
62400: POP
// if tigers then
62401: LD_VAR 0 2
62405: IFFALSE 62489
// for i = 1 to tigers do
62407: LD_ADDR_VAR 0 11
62411: PUSH
62412: DOUBLE
62413: LD_INT 1
62415: DEC
62416: ST_TO_ADDR
62417: LD_VAR 0 2
62421: PUSH
62422: FOR_TO
62423: IFFALSE 62487
// begin hc_class = class_tiger ;
62425: LD_ADDR_OWVAR 28
62429: PUSH
62430: LD_INT 14
62432: ST_TO_ADDR
// hc_gallery =  ;
62433: LD_ADDR_OWVAR 33
62437: PUSH
62438: LD_STRING 
62440: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62441: LD_ADDR_OWVAR 35
62445: PUSH
62446: LD_INT 7
62448: NEG
62449: PPUSH
62450: LD_INT 7
62452: PPUSH
62453: CALL_OW 12
62457: ST_TO_ADDR
// animal := CreateHuman ;
62458: LD_ADDR_VAR 0 12
62462: PUSH
62463: CALL_OW 44
62467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62468: LD_VAR 0 12
62472: PPUSH
62473: LD_VAR 0 8
62477: PPUSH
62478: LD_INT 0
62480: PPUSH
62481: CALL 64328 0 3
// end ;
62485: GO 62422
62487: POP
62488: POP
// if apemans then
62489: LD_VAR 0 3
62493: IFFALSE 62616
// for i = 1 to apemans do
62495: LD_ADDR_VAR 0 11
62499: PUSH
62500: DOUBLE
62501: LD_INT 1
62503: DEC
62504: ST_TO_ADDR
62505: LD_VAR 0 3
62509: PUSH
62510: FOR_TO
62511: IFFALSE 62614
// begin hc_class = class_apeman ;
62513: LD_ADDR_OWVAR 28
62517: PUSH
62518: LD_INT 12
62520: ST_TO_ADDR
// hc_gallery =  ;
62521: LD_ADDR_OWVAR 33
62525: PUSH
62526: LD_STRING 
62528: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62529: LD_ADDR_OWVAR 35
62533: PUSH
62534: LD_INT 5
62536: NEG
62537: PPUSH
62538: LD_INT 5
62540: PPUSH
62541: CALL_OW 12
62545: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62546: LD_ADDR_OWVAR 31
62550: PUSH
62551: LD_INT 1
62553: PPUSH
62554: LD_INT 3
62556: PPUSH
62557: CALL_OW 12
62561: PUSH
62562: LD_INT 1
62564: PPUSH
62565: LD_INT 3
62567: PPUSH
62568: CALL_OW 12
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: ST_TO_ADDR
// animal := CreateHuman ;
62585: LD_ADDR_VAR 0 12
62589: PUSH
62590: CALL_OW 44
62594: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62595: LD_VAR 0 12
62599: PPUSH
62600: LD_VAR 0 8
62604: PPUSH
62605: LD_INT 0
62607: PPUSH
62608: CALL 64328 0 3
// end ;
62612: GO 62510
62614: POP
62615: POP
// if enchidnas then
62616: LD_VAR 0 4
62620: IFFALSE 62687
// for i = 1 to enchidnas do
62622: LD_ADDR_VAR 0 11
62626: PUSH
62627: DOUBLE
62628: LD_INT 1
62630: DEC
62631: ST_TO_ADDR
62632: LD_VAR 0 4
62636: PUSH
62637: FOR_TO
62638: IFFALSE 62685
// begin hc_class = 13 ;
62640: LD_ADDR_OWVAR 28
62644: PUSH
62645: LD_INT 13
62647: ST_TO_ADDR
// hc_gallery =  ;
62648: LD_ADDR_OWVAR 33
62652: PUSH
62653: LD_STRING 
62655: ST_TO_ADDR
// animal := CreateHuman ;
62656: LD_ADDR_VAR 0 12
62660: PUSH
62661: CALL_OW 44
62665: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62666: LD_VAR 0 12
62670: PPUSH
62671: LD_VAR 0 8
62675: PPUSH
62676: LD_INT 0
62678: PPUSH
62679: CALL 64328 0 3
// end ;
62683: GO 62637
62685: POP
62686: POP
// if fishes then
62687: LD_VAR 0 7
62691: IFFALSE 62758
// for i = 1 to fishes do
62693: LD_ADDR_VAR 0 11
62697: PUSH
62698: DOUBLE
62699: LD_INT 1
62701: DEC
62702: ST_TO_ADDR
62703: LD_VAR 0 7
62707: PUSH
62708: FOR_TO
62709: IFFALSE 62756
// begin hc_class = 20 ;
62711: LD_ADDR_OWVAR 28
62715: PUSH
62716: LD_INT 20
62718: ST_TO_ADDR
// hc_gallery =  ;
62719: LD_ADDR_OWVAR 33
62723: PUSH
62724: LD_STRING 
62726: ST_TO_ADDR
// animal := CreateHuman ;
62727: LD_ADDR_VAR 0 12
62731: PUSH
62732: CALL_OW 44
62736: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62737: LD_VAR 0 12
62741: PPUSH
62742: LD_VAR 0 9
62746: PPUSH
62747: LD_INT 0
62749: PPUSH
62750: CALL 64328 0 3
// end ;
62754: GO 62708
62756: POP
62757: POP
// end ;
62758: LD_VAR 0 10
62762: RET
// export function WantHeal ( sci , unit ) ; begin
62763: LD_INT 0
62765: PPUSH
// if GetTaskList ( sci ) > 0 then
62766: LD_VAR 0 1
62770: PPUSH
62771: CALL_OW 437
62775: PUSH
62776: LD_INT 0
62778: GREATER
62779: IFFALSE 62849
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62781: LD_VAR 0 1
62785: PPUSH
62786: CALL_OW 437
62790: PUSH
62791: LD_INT 1
62793: ARRAY
62794: PUSH
62795: LD_INT 1
62797: ARRAY
62798: PUSH
62799: LD_STRING l
62801: EQUAL
62802: PUSH
62803: LD_VAR 0 1
62807: PPUSH
62808: CALL_OW 437
62812: PUSH
62813: LD_INT 1
62815: ARRAY
62816: PUSH
62817: LD_INT 4
62819: ARRAY
62820: PUSH
62821: LD_VAR 0 2
62825: EQUAL
62826: AND
62827: IFFALSE 62839
// result := true else
62829: LD_ADDR_VAR 0 3
62833: PUSH
62834: LD_INT 1
62836: ST_TO_ADDR
62837: GO 62847
// result := false ;
62839: LD_ADDR_VAR 0 3
62843: PUSH
62844: LD_INT 0
62846: ST_TO_ADDR
// end else
62847: GO 62857
// result := false ;
62849: LD_ADDR_VAR 0 3
62853: PUSH
62854: LD_INT 0
62856: ST_TO_ADDR
// end ;
62857: LD_VAR 0 3
62861: RET
// export function HealTarget ( sci ) ; begin
62862: LD_INT 0
62864: PPUSH
// if not sci then
62865: LD_VAR 0 1
62869: NOT
62870: IFFALSE 62874
// exit ;
62872: GO 62939
// result := 0 ;
62874: LD_ADDR_VAR 0 2
62878: PUSH
62879: LD_INT 0
62881: ST_TO_ADDR
// if GetTaskList ( sci ) then
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL_OW 437
62891: IFFALSE 62939
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62893: LD_VAR 0 1
62897: PPUSH
62898: CALL_OW 437
62902: PUSH
62903: LD_INT 1
62905: ARRAY
62906: PUSH
62907: LD_INT 1
62909: ARRAY
62910: PUSH
62911: LD_STRING l
62913: EQUAL
62914: IFFALSE 62939
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62916: LD_ADDR_VAR 0 2
62920: PUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: CALL_OW 437
62930: PUSH
62931: LD_INT 1
62933: ARRAY
62934: PUSH
62935: LD_INT 4
62937: ARRAY
62938: ST_TO_ADDR
// end ;
62939: LD_VAR 0 2
62943: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62944: LD_INT 0
62946: PPUSH
62947: PPUSH
62948: PPUSH
62949: PPUSH
// if not base_units then
62950: LD_VAR 0 1
62954: NOT
62955: IFFALSE 62959
// exit ;
62957: GO 63046
// result := false ;
62959: LD_ADDR_VAR 0 2
62963: PUSH
62964: LD_INT 0
62966: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62967: LD_ADDR_VAR 0 5
62971: PUSH
62972: LD_VAR 0 1
62976: PPUSH
62977: LD_INT 21
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PPUSH
62987: CALL_OW 72
62991: ST_TO_ADDR
// if not tmp then
62992: LD_VAR 0 5
62996: NOT
62997: IFFALSE 63001
// exit ;
62999: GO 63046
// for i in tmp do
63001: LD_ADDR_VAR 0 3
63005: PUSH
63006: LD_VAR 0 5
63010: PUSH
63011: FOR_IN
63012: IFFALSE 63044
// begin result := EnemyInRange ( i , 22 ) ;
63014: LD_ADDR_VAR 0 2
63018: PUSH
63019: LD_VAR 0 3
63023: PPUSH
63024: LD_INT 22
63026: PPUSH
63027: CALL 61282 0 2
63031: ST_TO_ADDR
// if result then
63032: LD_VAR 0 2
63036: IFFALSE 63042
// exit ;
63038: POP
63039: POP
63040: GO 63046
// end ;
63042: GO 63011
63044: POP
63045: POP
// end ;
63046: LD_VAR 0 2
63050: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63051: LD_INT 0
63053: PPUSH
63054: PPUSH
// if not units then
63055: LD_VAR 0 1
63059: NOT
63060: IFFALSE 63064
// exit ;
63062: GO 63134
// result := [ ] ;
63064: LD_ADDR_VAR 0 3
63068: PUSH
63069: EMPTY
63070: ST_TO_ADDR
// for i in units do
63071: LD_ADDR_VAR 0 4
63075: PUSH
63076: LD_VAR 0 1
63080: PUSH
63081: FOR_IN
63082: IFFALSE 63132
// if GetTag ( i ) = tag then
63084: LD_VAR 0 4
63088: PPUSH
63089: CALL_OW 110
63093: PUSH
63094: LD_VAR 0 2
63098: EQUAL
63099: IFFALSE 63130
// result := Insert ( result , result + 1 , i ) ;
63101: LD_ADDR_VAR 0 3
63105: PUSH
63106: LD_VAR 0 3
63110: PPUSH
63111: LD_VAR 0 3
63115: PUSH
63116: LD_INT 1
63118: PLUS
63119: PPUSH
63120: LD_VAR 0 4
63124: PPUSH
63125: CALL_OW 2
63129: ST_TO_ADDR
63130: GO 63081
63132: POP
63133: POP
// end ;
63134: LD_VAR 0 3
63138: RET
// export function IsDriver ( un ) ; begin
63139: LD_INT 0
63141: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63142: LD_ADDR_VAR 0 2
63146: PUSH
63147: LD_VAR 0 1
63151: PUSH
63152: LD_INT 55
63154: PUSH
63155: EMPTY
63156: LIST
63157: PPUSH
63158: CALL_OW 69
63162: IN
63163: ST_TO_ADDR
// end ;
63164: LD_VAR 0 2
63168: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63169: LD_INT 0
63171: PPUSH
63172: PPUSH
// list := [ ] ;
63173: LD_ADDR_VAR 0 5
63177: PUSH
63178: EMPTY
63179: ST_TO_ADDR
// case d of 0 :
63180: LD_VAR 0 3
63184: PUSH
63185: LD_INT 0
63187: DOUBLE
63188: EQUAL
63189: IFTRUE 63193
63191: GO 63326
63193: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63194: LD_ADDR_VAR 0 5
63198: PUSH
63199: LD_VAR 0 1
63203: PUSH
63204: LD_INT 4
63206: MINUS
63207: PUSH
63208: LD_VAR 0 2
63212: PUSH
63213: LD_INT 4
63215: MINUS
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: LIST
63224: PUSH
63225: LD_VAR 0 1
63229: PUSH
63230: LD_INT 3
63232: MINUS
63233: PUSH
63234: LD_VAR 0 2
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: PUSH
63247: LD_VAR 0 1
63251: PUSH
63252: LD_INT 4
63254: PLUS
63255: PUSH
63256: LD_VAR 0 2
63260: PUSH
63261: LD_INT 4
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: PUSH
63269: LD_VAR 0 1
63273: PUSH
63274: LD_INT 3
63276: PLUS
63277: PUSH
63278: LD_VAR 0 2
63282: PUSH
63283: LD_INT 3
63285: PLUS
63286: PUSH
63287: LD_INT 5
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: LIST
63294: PUSH
63295: LD_VAR 0 1
63299: PUSH
63300: LD_VAR 0 2
63304: PUSH
63305: LD_INT 4
63307: PLUS
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: LIST
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: ST_TO_ADDR
// end ; 1 :
63324: GO 64024
63326: LD_INT 1
63328: DOUBLE
63329: EQUAL
63330: IFTRUE 63334
63332: GO 63467
63334: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63335: LD_ADDR_VAR 0 5
63339: PUSH
63340: LD_VAR 0 1
63344: PUSH
63345: LD_VAR 0 2
63349: PUSH
63350: LD_INT 4
63352: MINUS
63353: PUSH
63354: LD_INT 3
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: LIST
63361: PUSH
63362: LD_VAR 0 1
63366: PUSH
63367: LD_INT 3
63369: MINUS
63370: PUSH
63371: LD_VAR 0 2
63375: PUSH
63376: LD_INT 3
63378: MINUS
63379: PUSH
63380: LD_INT 2
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: PUSH
63388: LD_VAR 0 1
63392: PUSH
63393: LD_INT 4
63395: MINUS
63396: PUSH
63397: LD_VAR 0 2
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: PUSH
63410: LD_VAR 0 1
63414: PUSH
63415: LD_VAR 0 2
63419: PUSH
63420: LD_INT 3
63422: PLUS
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: PUSH
63432: LD_VAR 0 1
63436: PUSH
63437: LD_INT 4
63439: PLUS
63440: PUSH
63441: LD_VAR 0 2
63445: PUSH
63446: LD_INT 4
63448: PLUS
63449: PUSH
63450: LD_INT 5
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: ST_TO_ADDR
// end ; 2 :
63465: GO 64024
63467: LD_INT 2
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63475
63473: GO 63604
63475: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63476: LD_ADDR_VAR 0 5
63480: PUSH
63481: LD_VAR 0 1
63485: PUSH
63486: LD_VAR 0 2
63490: PUSH
63491: LD_INT 3
63493: MINUS
63494: PUSH
63495: LD_INT 3
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: PUSH
63503: LD_VAR 0 1
63507: PUSH
63508: LD_INT 4
63510: PLUS
63511: PUSH
63512: LD_VAR 0 2
63516: PUSH
63517: LD_INT 4
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: LIST
63524: PUSH
63525: LD_VAR 0 1
63529: PUSH
63530: LD_VAR 0 2
63534: PUSH
63535: LD_INT 4
63537: PLUS
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: PUSH
63547: LD_VAR 0 1
63551: PUSH
63552: LD_INT 3
63554: MINUS
63555: PUSH
63556: LD_VAR 0 2
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: LD_VAR 0 1
63573: PUSH
63574: LD_INT 4
63576: MINUS
63577: PUSH
63578: LD_VAR 0 2
63582: PUSH
63583: LD_INT 4
63585: MINUS
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: ST_TO_ADDR
// end ; 3 :
63602: GO 64024
63604: LD_INT 3
63606: DOUBLE
63607: EQUAL
63608: IFTRUE 63612
63610: GO 63745
63612: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63613: LD_ADDR_VAR 0 5
63617: PUSH
63618: LD_VAR 0 1
63622: PUSH
63623: LD_INT 3
63625: PLUS
63626: PUSH
63627: LD_VAR 0 2
63631: PUSH
63632: LD_INT 4
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: LIST
63639: PUSH
63640: LD_VAR 0 1
63644: PUSH
63645: LD_INT 4
63647: PLUS
63648: PUSH
63649: LD_VAR 0 2
63653: PUSH
63654: LD_INT 4
63656: PLUS
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: PUSH
63666: LD_VAR 0 1
63670: PUSH
63671: LD_INT 4
63673: MINUS
63674: PUSH
63675: LD_VAR 0 2
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: PUSH
63688: LD_VAR 0 1
63692: PUSH
63693: LD_VAR 0 2
63697: PUSH
63698: LD_INT 4
63700: MINUS
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: PUSH
63710: LD_VAR 0 1
63714: PUSH
63715: LD_INT 3
63717: MINUS
63718: PUSH
63719: LD_VAR 0 2
63723: PUSH
63724: LD_INT 3
63726: MINUS
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// end ; 4 :
63743: GO 64024
63745: LD_INT 4
63747: DOUBLE
63748: EQUAL
63749: IFTRUE 63753
63751: GO 63886
63753: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63754: LD_ADDR_VAR 0 5
63758: PUSH
63759: LD_VAR 0 1
63763: PUSH
63764: LD_VAR 0 2
63768: PUSH
63769: LD_INT 4
63771: PLUS
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: PUSH
63781: LD_VAR 0 1
63785: PUSH
63786: LD_INT 3
63788: PLUS
63789: PUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_INT 3
63797: PLUS
63798: PUSH
63799: LD_INT 5
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: LIST
63806: PUSH
63807: LD_VAR 0 1
63811: PUSH
63812: LD_INT 4
63814: PLUS
63815: PUSH
63816: LD_VAR 0 2
63820: PUSH
63821: LD_INT 4
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: PUSH
63829: LD_VAR 0 1
63833: PUSH
63834: LD_VAR 0 2
63838: PUSH
63839: LD_INT 3
63841: MINUS
63842: PUSH
63843: LD_INT 3
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: PUSH
63851: LD_VAR 0 1
63855: PUSH
63856: LD_INT 4
63858: MINUS
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: LD_INT 4
63867: MINUS
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: ST_TO_ADDR
// end ; 5 :
63884: GO 64024
63886: LD_INT 5
63888: DOUBLE
63889: EQUAL
63890: IFTRUE 63894
63892: GO 64023
63894: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63895: LD_ADDR_VAR 0 5
63899: PUSH
63900: LD_VAR 0 1
63904: PUSH
63905: LD_INT 4
63907: MINUS
63908: PUSH
63909: LD_VAR 0 2
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: LIST
63921: PUSH
63922: LD_VAR 0 1
63926: PUSH
63927: LD_VAR 0 2
63931: PUSH
63932: LD_INT 4
63934: MINUS
63935: PUSH
63936: LD_INT 3
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: LIST
63943: PUSH
63944: LD_VAR 0 1
63948: PUSH
63949: LD_INT 4
63951: PLUS
63952: PUSH
63953: LD_VAR 0 2
63957: PUSH
63958: LD_INT 4
63960: PLUS
63961: PUSH
63962: LD_INT 5
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: PUSH
63970: LD_VAR 0 1
63974: PUSH
63975: LD_INT 3
63977: PLUS
63978: PUSH
63979: LD_VAR 0 2
63983: PUSH
63984: LD_INT 4
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: LIST
63991: PUSH
63992: LD_VAR 0 1
63996: PUSH
63997: LD_VAR 0 2
64001: PUSH
64002: LD_INT 3
64004: PLUS
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: ST_TO_ADDR
// end ; end ;
64021: GO 64024
64023: POP
// result := list ;
64024: LD_ADDR_VAR 0 4
64028: PUSH
64029: LD_VAR 0 5
64033: ST_TO_ADDR
// end ;
64034: LD_VAR 0 4
64038: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64039: LD_INT 0
64041: PPUSH
64042: PPUSH
64043: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64044: LD_VAR 0 1
64048: NOT
64049: PUSH
64050: LD_VAR 0 2
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: LD_INT 4
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: IN
64073: NOT
64074: OR
64075: IFFALSE 64079
// exit ;
64077: GO 64171
// tmp := [ ] ;
64079: LD_ADDR_VAR 0 5
64083: PUSH
64084: EMPTY
64085: ST_TO_ADDR
// for i in units do
64086: LD_ADDR_VAR 0 4
64090: PUSH
64091: LD_VAR 0 1
64095: PUSH
64096: FOR_IN
64097: IFFALSE 64140
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64099: LD_ADDR_VAR 0 5
64103: PUSH
64104: LD_VAR 0 5
64108: PPUSH
64109: LD_VAR 0 5
64113: PUSH
64114: LD_INT 1
64116: PLUS
64117: PPUSH
64118: LD_VAR 0 4
64122: PPUSH
64123: LD_VAR 0 2
64127: PPUSH
64128: CALL_OW 259
64132: PPUSH
64133: CALL_OW 2
64137: ST_TO_ADDR
64138: GO 64096
64140: POP
64141: POP
// if not tmp then
64142: LD_VAR 0 5
64146: NOT
64147: IFFALSE 64151
// exit ;
64149: GO 64171
// result := SortListByListDesc ( units , tmp ) ;
64151: LD_ADDR_VAR 0 3
64155: PUSH
64156: LD_VAR 0 1
64160: PPUSH
64161: LD_VAR 0 5
64165: PPUSH
64166: CALL_OW 77
64170: ST_TO_ADDR
// end ;
64171: LD_VAR 0 3
64175: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64176: LD_INT 0
64178: PPUSH
64179: PPUSH
64180: PPUSH
// x := GetX ( building ) ;
64181: LD_ADDR_VAR 0 4
64185: PUSH
64186: LD_VAR 0 2
64190: PPUSH
64191: CALL_OW 250
64195: ST_TO_ADDR
// y := GetY ( building ) ;
64196: LD_ADDR_VAR 0 5
64200: PUSH
64201: LD_VAR 0 2
64205: PPUSH
64206: CALL_OW 251
64210: ST_TO_ADDR
// if GetTaskList ( unit ) then
64211: LD_VAR 0 1
64215: PPUSH
64216: CALL_OW 437
64220: IFFALSE 64315
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64222: LD_STRING e
64224: PUSH
64225: LD_VAR 0 1
64229: PPUSH
64230: CALL_OW 437
64234: PUSH
64235: LD_INT 1
64237: ARRAY
64238: PUSH
64239: LD_INT 1
64241: ARRAY
64242: EQUAL
64243: PUSH
64244: LD_VAR 0 4
64248: PUSH
64249: LD_VAR 0 1
64253: PPUSH
64254: CALL_OW 437
64258: PUSH
64259: LD_INT 1
64261: ARRAY
64262: PUSH
64263: LD_INT 2
64265: ARRAY
64266: EQUAL
64267: AND
64268: PUSH
64269: LD_VAR 0 5
64273: PUSH
64274: LD_VAR 0 1
64278: PPUSH
64279: CALL_OW 437
64283: PUSH
64284: LD_INT 1
64286: ARRAY
64287: PUSH
64288: LD_INT 3
64290: ARRAY
64291: EQUAL
64292: AND
64293: IFFALSE 64305
// result := true else
64295: LD_ADDR_VAR 0 3
64299: PUSH
64300: LD_INT 1
64302: ST_TO_ADDR
64303: GO 64313
// result := false ;
64305: LD_ADDR_VAR 0 3
64309: PUSH
64310: LD_INT 0
64312: ST_TO_ADDR
// end else
64313: GO 64323
// result := false ;
64315: LD_ADDR_VAR 0 3
64319: PUSH
64320: LD_INT 0
64322: ST_TO_ADDR
// end ;
64323: LD_VAR 0 3
64327: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64328: LD_INT 0
64330: PPUSH
64331: PPUSH
64332: PPUSH
64333: PPUSH
// if not unit or not area then
64334: LD_VAR 0 1
64338: NOT
64339: PUSH
64340: LD_VAR 0 2
64344: NOT
64345: OR
64346: IFFALSE 64350
// exit ;
64348: GO 64514
// tmp := AreaToList ( area , i ) ;
64350: LD_ADDR_VAR 0 6
64354: PUSH
64355: LD_VAR 0 2
64359: PPUSH
64360: LD_VAR 0 5
64364: PPUSH
64365: CALL_OW 517
64369: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64370: LD_ADDR_VAR 0 5
64374: PUSH
64375: DOUBLE
64376: LD_INT 1
64378: DEC
64379: ST_TO_ADDR
64380: LD_VAR 0 6
64384: PUSH
64385: LD_INT 1
64387: ARRAY
64388: PUSH
64389: FOR_TO
64390: IFFALSE 64512
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64392: LD_ADDR_VAR 0 7
64396: PUSH
64397: LD_VAR 0 6
64401: PUSH
64402: LD_INT 1
64404: ARRAY
64405: PUSH
64406: LD_VAR 0 5
64410: ARRAY
64411: PUSH
64412: LD_VAR 0 6
64416: PUSH
64417: LD_INT 2
64419: ARRAY
64420: PUSH
64421: LD_VAR 0 5
64425: ARRAY
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64431: LD_VAR 0 7
64435: PUSH
64436: LD_INT 1
64438: ARRAY
64439: PPUSH
64440: LD_VAR 0 7
64444: PUSH
64445: LD_INT 2
64447: ARRAY
64448: PPUSH
64449: CALL_OW 428
64453: PUSH
64454: LD_INT 0
64456: EQUAL
64457: IFFALSE 64510
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64459: LD_VAR 0 1
64463: PPUSH
64464: LD_VAR 0 7
64468: PUSH
64469: LD_INT 1
64471: ARRAY
64472: PPUSH
64473: LD_VAR 0 7
64477: PUSH
64478: LD_INT 2
64480: ARRAY
64481: PPUSH
64482: LD_VAR 0 3
64486: PPUSH
64487: CALL_OW 48
// result := IsPlaced ( unit ) ;
64491: LD_ADDR_VAR 0 4
64495: PUSH
64496: LD_VAR 0 1
64500: PPUSH
64501: CALL_OW 305
64505: ST_TO_ADDR
// exit ;
64506: POP
64507: POP
64508: GO 64514
// end ; end ;
64510: GO 64389
64512: POP
64513: POP
// end ;
64514: LD_VAR 0 4
64518: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64519: LD_INT 0
64521: PPUSH
64522: PPUSH
64523: PPUSH
// if not side or side > 8 then
64524: LD_VAR 0 1
64528: NOT
64529: PUSH
64530: LD_VAR 0 1
64534: PUSH
64535: LD_INT 8
64537: GREATER
64538: OR
64539: IFFALSE 64543
// exit ;
64541: GO 64730
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64543: LD_ADDR_VAR 0 4
64547: PUSH
64548: LD_INT 22
64550: PUSH
64551: LD_VAR 0 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 21
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PPUSH
64574: CALL_OW 69
64578: ST_TO_ADDR
// if not tmp then
64579: LD_VAR 0 4
64583: NOT
64584: IFFALSE 64588
// exit ;
64586: GO 64730
// enable_addtolog := true ;
64588: LD_ADDR_OWVAR 81
64592: PUSH
64593: LD_INT 1
64595: ST_TO_ADDR
// AddToLog ( [ ) ;
64596: LD_STRING [
64598: PPUSH
64599: CALL_OW 561
// for i in tmp do
64603: LD_ADDR_VAR 0 3
64607: PUSH
64608: LD_VAR 0 4
64612: PUSH
64613: FOR_IN
64614: IFFALSE 64721
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64616: LD_STRING [
64618: PUSH
64619: LD_VAR 0 3
64623: PPUSH
64624: CALL_OW 266
64628: STR
64629: PUSH
64630: LD_STRING , 
64632: STR
64633: PUSH
64634: LD_VAR 0 3
64638: PPUSH
64639: CALL_OW 250
64643: STR
64644: PUSH
64645: LD_STRING , 
64647: STR
64648: PUSH
64649: LD_VAR 0 3
64653: PPUSH
64654: CALL_OW 251
64658: STR
64659: PUSH
64660: LD_STRING , 
64662: STR
64663: PUSH
64664: LD_VAR 0 3
64668: PPUSH
64669: CALL_OW 254
64673: STR
64674: PUSH
64675: LD_STRING , 
64677: STR
64678: PUSH
64679: LD_VAR 0 3
64683: PPUSH
64684: LD_INT 1
64686: PPUSH
64687: CALL_OW 268
64691: STR
64692: PUSH
64693: LD_STRING , 
64695: STR
64696: PUSH
64697: LD_VAR 0 3
64701: PPUSH
64702: LD_INT 2
64704: PPUSH
64705: CALL_OW 268
64709: STR
64710: PUSH
64711: LD_STRING ],
64713: STR
64714: PPUSH
64715: CALL_OW 561
// end ;
64719: GO 64613
64721: POP
64722: POP
// AddToLog ( ]; ) ;
64723: LD_STRING ];
64725: PPUSH
64726: CALL_OW 561
// end ;
64730: LD_VAR 0 2
64734: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64735: LD_INT 0
64737: PPUSH
64738: PPUSH
64739: PPUSH
64740: PPUSH
64741: PPUSH
// if not area or not rate or not max then
64742: LD_VAR 0 1
64746: NOT
64747: PUSH
64748: LD_VAR 0 2
64752: NOT
64753: OR
64754: PUSH
64755: LD_VAR 0 4
64759: NOT
64760: OR
64761: IFFALSE 64765
// exit ;
64763: GO 64957
// while 1 do
64765: LD_INT 1
64767: IFFALSE 64957
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64769: LD_ADDR_VAR 0 9
64773: PUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: LD_INT 1
64781: PPUSH
64782: CALL_OW 287
64786: PUSH
64787: LD_INT 10
64789: MUL
64790: ST_TO_ADDR
// r := rate / 10 ;
64791: LD_ADDR_VAR 0 7
64795: PUSH
64796: LD_VAR 0 2
64800: PUSH
64801: LD_INT 10
64803: DIVREAL
64804: ST_TO_ADDR
// time := 1 1$00 ;
64805: LD_ADDR_VAR 0 8
64809: PUSH
64810: LD_INT 2100
64812: ST_TO_ADDR
// if amount < min then
64813: LD_VAR 0 9
64817: PUSH
64818: LD_VAR 0 3
64822: LESS
64823: IFFALSE 64841
// r := r * 2 else
64825: LD_ADDR_VAR 0 7
64829: PUSH
64830: LD_VAR 0 7
64834: PUSH
64835: LD_INT 2
64837: MUL
64838: ST_TO_ADDR
64839: GO 64867
// if amount > max then
64841: LD_VAR 0 9
64845: PUSH
64846: LD_VAR 0 4
64850: GREATER
64851: IFFALSE 64867
// r := r / 2 ;
64853: LD_ADDR_VAR 0 7
64857: PUSH
64858: LD_VAR 0 7
64862: PUSH
64863: LD_INT 2
64865: DIVREAL
64866: ST_TO_ADDR
// time := time / r ;
64867: LD_ADDR_VAR 0 8
64871: PUSH
64872: LD_VAR 0 8
64876: PUSH
64877: LD_VAR 0 7
64881: DIVREAL
64882: ST_TO_ADDR
// if time < 0 then
64883: LD_VAR 0 8
64887: PUSH
64888: LD_INT 0
64890: LESS
64891: IFFALSE 64908
// time := time * - 1 ;
64893: LD_ADDR_VAR 0 8
64897: PUSH
64898: LD_VAR 0 8
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: MUL
64907: ST_TO_ADDR
// wait ( time ) ;
64908: LD_VAR 0 8
64912: PPUSH
64913: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64917: LD_INT 35
64919: PPUSH
64920: LD_INT 875
64922: PPUSH
64923: CALL_OW 12
64927: PPUSH
64928: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64932: LD_INT 1
64934: PPUSH
64935: LD_INT 5
64937: PPUSH
64938: CALL_OW 12
64942: PPUSH
64943: LD_VAR 0 1
64947: PPUSH
64948: LD_INT 1
64950: PPUSH
64951: CALL_OW 55
// end ;
64955: GO 64765
// end ;
64957: LD_VAR 0 5
64961: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64962: LD_INT 0
64964: PPUSH
64965: PPUSH
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
64971: PPUSH
// if not turrets or not factories then
64972: LD_VAR 0 1
64976: NOT
64977: PUSH
64978: LD_VAR 0 2
64982: NOT
64983: OR
64984: IFFALSE 64988
// exit ;
64986: GO 65295
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64988: LD_ADDR_VAR 0 10
64992: PUSH
64993: LD_INT 5
64995: PUSH
64996: LD_INT 6
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 2
65005: PUSH
65006: LD_INT 4
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: PUSH
65016: LD_INT 5
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 24
65030: PUSH
65031: LD_INT 25
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 23
65040: PUSH
65041: LD_INT 27
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 42
65054: PUSH
65055: LD_INT 43
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 44
65064: PUSH
65065: LD_INT 46
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 45
65074: PUSH
65075: LD_INT 47
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: LIST
65091: ST_TO_ADDR
// result := [ ] ;
65092: LD_ADDR_VAR 0 3
65096: PUSH
65097: EMPTY
65098: ST_TO_ADDR
// for i in turrets do
65099: LD_ADDR_VAR 0 4
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: FOR_IN
65110: IFFALSE 65293
// begin nat := GetNation ( i ) ;
65112: LD_ADDR_VAR 0 7
65116: PUSH
65117: LD_VAR 0 4
65121: PPUSH
65122: CALL_OW 248
65126: ST_TO_ADDR
// weapon := 0 ;
65127: LD_ADDR_VAR 0 8
65131: PUSH
65132: LD_INT 0
65134: ST_TO_ADDR
// if not nat then
65135: LD_VAR 0 7
65139: NOT
65140: IFFALSE 65144
// continue ;
65142: GO 65109
// for j in list [ nat ] do
65144: LD_ADDR_VAR 0 5
65148: PUSH
65149: LD_VAR 0 10
65153: PUSH
65154: LD_VAR 0 7
65158: ARRAY
65159: PUSH
65160: FOR_IN
65161: IFFALSE 65202
// if GetBWeapon ( i ) = j [ 1 ] then
65163: LD_VAR 0 4
65167: PPUSH
65168: CALL_OW 269
65172: PUSH
65173: LD_VAR 0 5
65177: PUSH
65178: LD_INT 1
65180: ARRAY
65181: EQUAL
65182: IFFALSE 65200
// begin weapon := j [ 2 ] ;
65184: LD_ADDR_VAR 0 8
65188: PUSH
65189: LD_VAR 0 5
65193: PUSH
65194: LD_INT 2
65196: ARRAY
65197: ST_TO_ADDR
// break ;
65198: GO 65202
// end ;
65200: GO 65160
65202: POP
65203: POP
// if not weapon then
65204: LD_VAR 0 8
65208: NOT
65209: IFFALSE 65213
// continue ;
65211: GO 65109
// for k in factories do
65213: LD_ADDR_VAR 0 6
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: FOR_IN
65224: IFFALSE 65289
// begin weapons := AvailableWeaponList ( k ) ;
65226: LD_ADDR_VAR 0 9
65230: PUSH
65231: LD_VAR 0 6
65235: PPUSH
65236: CALL_OW 478
65240: ST_TO_ADDR
// if not weapons then
65241: LD_VAR 0 9
65245: NOT
65246: IFFALSE 65250
// continue ;
65248: GO 65223
// if weapon in weapons then
65250: LD_VAR 0 8
65254: PUSH
65255: LD_VAR 0 9
65259: IN
65260: IFFALSE 65287
// begin result := [ i , weapon ] ;
65262: LD_ADDR_VAR 0 3
65266: PUSH
65267: LD_VAR 0 4
65271: PUSH
65272: LD_VAR 0 8
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: ST_TO_ADDR
// exit ;
65281: POP
65282: POP
65283: POP
65284: POP
65285: GO 65295
// end ; end ;
65287: GO 65223
65289: POP
65290: POP
// end ;
65291: GO 65109
65293: POP
65294: POP
// end ;
65295: LD_VAR 0 3
65299: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65300: LD_INT 0
65302: PPUSH
// if not side or side > 8 then
65303: LD_VAR 0 3
65307: NOT
65308: PUSH
65309: LD_VAR 0 3
65313: PUSH
65314: LD_INT 8
65316: GREATER
65317: OR
65318: IFFALSE 65322
// exit ;
65320: GO 65381
// if not range then
65322: LD_VAR 0 4
65326: NOT
65327: IFFALSE 65338
// range := - 12 ;
65329: LD_ADDR_VAR 0 4
65333: PUSH
65334: LD_INT 12
65336: NEG
65337: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65338: LD_VAR 0 1
65342: PPUSH
65343: LD_VAR 0 2
65347: PPUSH
65348: LD_VAR 0 3
65352: PPUSH
65353: LD_VAR 0 4
65357: PPUSH
65358: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65362: LD_VAR 0 1
65366: PPUSH
65367: LD_VAR 0 2
65371: PPUSH
65372: LD_VAR 0 3
65376: PPUSH
65377: CALL_OW 331
// end ;
65381: LD_VAR 0 5
65385: RET
// export function Video ( mode ) ; begin
65386: LD_INT 0
65388: PPUSH
// ingame_video = mode ;
65389: LD_ADDR_OWVAR 52
65393: PUSH
65394: LD_VAR 0 1
65398: ST_TO_ADDR
// interface_hidden = mode ;
65399: LD_ADDR_OWVAR 54
65403: PUSH
65404: LD_VAR 0 1
65408: ST_TO_ADDR
// end ;
65409: LD_VAR 0 2
65413: RET
// export function Join ( array , element ) ; begin
65414: LD_INT 0
65416: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65417: LD_ADDR_VAR 0 3
65421: PUSH
65422: LD_VAR 0 1
65426: PPUSH
65427: LD_VAR 0 1
65431: PUSH
65432: LD_INT 1
65434: PLUS
65435: PPUSH
65436: LD_VAR 0 2
65440: PPUSH
65441: CALL_OW 1
65445: ST_TO_ADDR
// end ;
65446: LD_VAR 0 3
65450: RET
// export function JoinUnion ( array , element ) ; begin
65451: LD_INT 0
65453: PPUSH
// result := array union element ;
65454: LD_ADDR_VAR 0 3
65458: PUSH
65459: LD_VAR 0 1
65463: PUSH
65464: LD_VAR 0 2
65468: UNION
65469: ST_TO_ADDR
// end ;
65470: LD_VAR 0 3
65474: RET
// export function GetBehemoths ( side ) ; begin
65475: LD_INT 0
65477: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65478: LD_ADDR_VAR 0 2
65482: PUSH
65483: LD_INT 22
65485: PUSH
65486: LD_VAR 0 1
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 31
65497: PUSH
65498: LD_INT 25
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PPUSH
65509: CALL_OW 69
65513: ST_TO_ADDR
// end ;
65514: LD_VAR 0 2
65518: RET
// export function Shuffle ( array ) ; var i , index ; begin
65519: LD_INT 0
65521: PPUSH
65522: PPUSH
65523: PPUSH
// result := [ ] ;
65524: LD_ADDR_VAR 0 2
65528: PUSH
65529: EMPTY
65530: ST_TO_ADDR
// if not array then
65531: LD_VAR 0 1
65535: NOT
65536: IFFALSE 65540
// exit ;
65538: GO 65639
// Randomize ;
65540: CALL_OW 10
// for i = array downto 1 do
65544: LD_ADDR_VAR 0 3
65548: PUSH
65549: DOUBLE
65550: LD_VAR 0 1
65554: INC
65555: ST_TO_ADDR
65556: LD_INT 1
65558: PUSH
65559: FOR_DOWNTO
65560: IFFALSE 65637
// begin index := rand ( 1 , array ) ;
65562: LD_ADDR_VAR 0 4
65566: PUSH
65567: LD_INT 1
65569: PPUSH
65570: LD_VAR 0 1
65574: PPUSH
65575: CALL_OW 12
65579: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65580: LD_ADDR_VAR 0 2
65584: PUSH
65585: LD_VAR 0 2
65589: PPUSH
65590: LD_VAR 0 2
65594: PUSH
65595: LD_INT 1
65597: PLUS
65598: PPUSH
65599: LD_VAR 0 1
65603: PUSH
65604: LD_VAR 0 4
65608: ARRAY
65609: PPUSH
65610: CALL_OW 2
65614: ST_TO_ADDR
// array := Delete ( array , index ) ;
65615: LD_ADDR_VAR 0 1
65619: PUSH
65620: LD_VAR 0 1
65624: PPUSH
65625: LD_VAR 0 4
65629: PPUSH
65630: CALL_OW 3
65634: ST_TO_ADDR
// end ;
65635: GO 65559
65637: POP
65638: POP
// end ;
65639: LD_VAR 0 2
65643: RET
// export function GetBaseMaterials ( base ) ; begin
65644: LD_INT 0
65646: PPUSH
// result := [ 0 , 0 , 0 ] ;
65647: LD_ADDR_VAR 0 2
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: LIST
65665: ST_TO_ADDR
// if not base then
65666: LD_VAR 0 1
65670: NOT
65671: IFFALSE 65675
// exit ;
65673: GO 65724
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65675: LD_ADDR_VAR 0 2
65679: PUSH
65680: LD_VAR 0 1
65684: PPUSH
65685: LD_INT 1
65687: PPUSH
65688: CALL_OW 275
65692: PUSH
65693: LD_VAR 0 1
65697: PPUSH
65698: LD_INT 2
65700: PPUSH
65701: CALL_OW 275
65705: PUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: LD_INT 3
65713: PPUSH
65714: CALL_OW 275
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// end ;
65724: LD_VAR 0 2
65728: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65729: LD_INT 0
65731: PPUSH
65732: PPUSH
// result := array ;
65733: LD_ADDR_VAR 0 3
65737: PUSH
65738: LD_VAR 0 1
65742: ST_TO_ADDR
// if size > 0 then
65743: LD_VAR 0 2
65747: PUSH
65748: LD_INT 0
65750: GREATER
65751: IFFALSE 65797
// for i := array downto size do
65753: LD_ADDR_VAR 0 4
65757: PUSH
65758: DOUBLE
65759: LD_VAR 0 1
65763: INC
65764: ST_TO_ADDR
65765: LD_VAR 0 2
65769: PUSH
65770: FOR_DOWNTO
65771: IFFALSE 65795
// result := Delete ( result , result ) ;
65773: LD_ADDR_VAR 0 3
65777: PUSH
65778: LD_VAR 0 3
65782: PPUSH
65783: LD_VAR 0 3
65787: PPUSH
65788: CALL_OW 3
65792: ST_TO_ADDR
65793: GO 65770
65795: POP
65796: POP
// end ;
65797: LD_VAR 0 3
65801: RET
// export function ComExit ( unit ) ; var tmp ; begin
65802: LD_INT 0
65804: PPUSH
65805: PPUSH
// if not IsInUnit ( unit ) then
65806: LD_VAR 0 1
65810: PPUSH
65811: CALL_OW 310
65815: NOT
65816: IFFALSE 65820
// exit ;
65818: GO 65880
// tmp := IsInUnit ( unit ) ;
65820: LD_ADDR_VAR 0 3
65824: PUSH
65825: LD_VAR 0 1
65829: PPUSH
65830: CALL_OW 310
65834: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65835: LD_VAR 0 3
65839: PPUSH
65840: CALL_OW 247
65844: PUSH
65845: LD_INT 2
65847: EQUAL
65848: IFFALSE 65861
// ComExitVehicle ( unit ) else
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 121
65859: GO 65870
// ComExitBuilding ( unit ) ;
65861: LD_VAR 0 1
65865: PPUSH
65866: CALL_OW 122
// result := tmp ;
65870: LD_ADDR_VAR 0 2
65874: PUSH
65875: LD_VAR 0 3
65879: ST_TO_ADDR
// end ;
65880: LD_VAR 0 2
65884: RET
// export function ResetHc ; begin
65885: LD_INT 0
65887: PPUSH
// InitHc ;
65888: CALL_OW 19
// hc_importance := 0 ;
65892: LD_ADDR_OWVAR 32
65896: PUSH
65897: LD_INT 0
65899: ST_TO_ADDR
// end ;
65900: LD_VAR 0 1
65904: RET
