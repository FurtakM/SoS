// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9539 0 0
// PrepareAlliance ;
  19: CALL 352 0 0
// PrepareFriends ;
  23: CALL 3821 0 0
// PrepareAmerican ;
  27: CALL 789 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 17
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 15
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9875 0 0
// PreparePatrol ;
 117: CALL 1413 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert , def_counter ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// def_counter := 0 ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// end ;
 251: LD_VAR 0 1
 255: RET
// every 0 0$1 trigger on_hill do
 256: LD_EXP 7
 260: IFFALSE 272
 262: GO 264
 264: DISABLE
// SetAchievement ( ACH_EYE ) ;
 265: LD_STRING ACH_EYE
 267: PPUSH
 268: CALL_OW 543
 272: END
// every 0 0$1 trigger not invis_used do var i ;
 273: LD_EXP 12
 277: NOT
 278: IFFALSE 349
 280: GO 282
 282: DISABLE
 283: LD_INT 0
 285: PPUSH
// begin enable ;
 286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 287: LD_ADDR_VAR 0 1
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_INT 7
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 21
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 347
// if IsInvisible ( i ) then
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 571
 333: IFFALSE 345
// begin invis_used := true ;
 335: LD_ADDR_EXP 12
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// break ;
 343: GO 347
// end ;
 345: GO 321
 347: POP
 348: POP
// end ; end_of_file
 349: PPOPN 1
 351: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 352: LD_INT 0
 354: PPUSH
 355: PPUSH
// uc_side := 7 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 7
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 372: LD_ADDR_EXP 15
 376: PUSH
 377: LD_STRING JMM
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: LD_STRING 11_
 388: PPUSH
 389: CALL 36921 0 3
 393: ST_TO_ADDR
// uc_side := 4 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 4
 401: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Roth
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 415: LD_EXP 15
 419: PPUSH
 420: LD_INT 1
 422: PPUSH
 423: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 427: LD_EXP 15
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 439: LD_EXP 15
 443: PPUSH
 444: LD_INT 105
 446: PPUSH
 447: LD_INT 10
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 457: LD_EXP 16
 461: PPUSH
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 469: LD_EXP 16
 473: PPUSH
 474: LD_INT 109
 476: PPUSH
 477: LD_INT 10
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 16
 496: PPUSH
 497: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 501: LD_EXP 16
 505: PPUSH
 506: LD_EXP 15
 510: PPUSH
 511: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 515: LD_INT 3
 517: PPUSH
 518: LD_INT 3
 520: PPUSH
 521: LD_INT 3
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: LD_INT 100
 529: PPUSH
 530: CALL 41782 0 5
// cargo := CreateVehicle ;
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: CALL_OW 45
 543: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 556: LD_VAR 0 2
 560: PPUSH
 561: LD_INT 179
 563: PPUSH
 564: LD_INT 45
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 4
 581: PPUSH
 582: LD_INT 30
 584: PPUSH
 585: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 589: LD_STRING 11_artifact_captured
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: IFFALSE 656
// begin cargo := CreateVehicle ;
 601: LD_ADDR_VAR 0 2
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 171
 630: PPUSH
 631: LD_INT 85
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 641: LD_VAR 0 2
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 50
 651: PPUSH
 652: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 656: LD_INT 47
 658: PPUSH
 659: LD_INT 7
 661: PPUSH
 662: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 666: LD_INT 1
 668: PPUSH
 669: LD_INT 47
 671: PPUSH
 672: CALL_OW 471
// end ;
 676: LD_VAR 0 1
 680: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 681: LD_INT 38
 683: PPUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 7
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 70
 698: PUSH
 699: LD_EXP 7
 703: NOT
 704: AND
 705: IFFALSE 736
 707: GO 709
 709: DISABLE
// begin enable ;
 710: ENABLE
// on_hill := true ;
 711: LD_ADDR_EXP 7
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 719: LD_INT 126
 721: PPUSH
 722: LD_INT 13
 724: PPUSH
 725: LD_INT 7
 727: PPUSH
 728: LD_INT 90
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 22
 742: PUSH
 743: LD_INT 7
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 70
 754: NOT
 755: PUSH
 756: LD_EXP 7
 760: AND
 761: IFFALSE 788
 763: GO 765
 765: DISABLE
// begin enable ;
 766: ENABLE
// on_hill := false ;
 767: LD_ADDR_EXP 7
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 775: LD_INT 126
 777: PPUSH
 778: LD_INT 13
 780: PPUSH
 781: LD_INT 7
 783: PPUSH
 784: CALL_OW 331
// end ; end_of_file
 788: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 789: LD_INT 0
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
 795: PPUSH
 796: PPUSH
// if Difficulty = 1 then
 797: LD_OWVAR 67
 801: PUSH
 802: LD_INT 1
 804: EQUAL
 805: IFFALSE 913
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 807: LD_ADDR_VAR 0 6
 811: PUSH
 812: LD_INT 155
 814: PUSH
 815: LD_INT 77
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 193
 824: PUSH
 825: LD_INT 93
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 188
 834: PUSH
 835: LD_INT 81
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 56
 844: PUSH
 845: LD_INT 85
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 98
 854: PUSH
 855: LD_INT 87
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: ST_TO_ADDR
// for i in tmp do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 6
 878: PUSH
 879: FOR_IN
 880: IFFALSE 911
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 882: LD_VAR 0 2
 886: PUSH
 887: LD_INT 1
 889: ARRAY
 890: PPUSH
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 2
 898: ARRAY
 899: PPUSH
 900: CALL_OW 428
 904: PPUSH
 905: CALL_OW 64
 909: GO 879
 911: POP
 912: POP
// end ; defcon := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defcon_wave := 0 ;
 921: LD_ADDR_EXP 23
 925: PUSH
 926: LD_INT 0
 928: ST_TO_ADDR
// defenders := [ ] ;
 929: LD_ADDR_EXP 21
 933: PUSH
 934: EMPTY
 935: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 936: LD_INT 5
 938: PPUSH
 939: LD_STRING alfa
 941: PPUSH
 942: CALL_OW 500
// uc_side := 1 ;
 946: LD_ADDR_OWVAR 20
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// uc_nation := 1 ;
 954: LD_ADDR_OWVAR 21
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 962: LD_ADDR_EXP 17
 966: PUSH
 967: LD_STRING Powell
 969: PPUSH
 970: CALL_OW 25
 974: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 975: LD_EXP 17
 979: PPUSH
 980: LD_INT 110
 982: PPUSH
 983: LD_INT 26
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 48
// ComHold ( Powell ) ;
 993: LD_EXP 17
 997: PPUSH
 998: CALL_OW 140
// for i := 1 to 5 do
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: DOUBLE
1008: LD_INT 1
1010: DEC
1011: ST_TO_ADDR
1012: LD_INT 5
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1072
// begin PrepareHuman ( false , 1 , 10 ) ;
1018: LD_INT 0
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1031: LD_ADDR_EXP 20
1035: PUSH
1036: LD_EXP 20
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: CALL_OW 44
1048: PPUSH
1049: CALL_OW 2
1053: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1054: LD_EXP 20
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_INT 18
1065: PPUSH
1066: CALL_OW 52
// end ;
1070: GO 1015
1072: POP
1073: POP
// if Difficulty > 1 then
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: GREATER
1082: IFFALSE 1233
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1084: LD_ADDR_VAR 0 6
1088: PUSH
1089: LD_INT 81
1091: PUSH
1092: LD_INT 33
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 134
1101: PUSH
1102: LD_INT 114
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 193
1111: PUSH
1112: LD_INT 102
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: DOUBLE
1130: LD_INT 1
1132: DEC
1133: ST_TO_ADDR
1134: LD_OWVAR 67
1138: PUSH
1139: LD_INT 1
1141: MINUS
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1231
// begin PrepareSoldier ( false , 10 ) ;
1146: LD_INT 0
1148: PPUSH
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 381
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1166: LD_VAR 0 5
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1178: LD_VAR 0 5
1182: PPUSH
1183: LD_VAR 0 6
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 6
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PUSH
1209: LD_INT 2
1211: ARRAY
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// ComHold ( un ) ;
1220: LD_VAR 0 5
1224: PPUSH
1225: CALL_OW 140
// end ;
1229: GO 1143
1231: POP
1232: POP
// end ; if Difficulty > 2 then
1233: LD_OWVAR 67
1237: PUSH
1238: LD_INT 2
1240: GREATER
1241: IFFALSE 1290
// begin bc_type := b_turret ;
1243: LD_ADDR_OWVAR 42
1247: PUSH
1248: LD_INT 33
1250: ST_TO_ADDR
// bc_level := 7 ;
1251: LD_ADDR_OWVAR 43
1255: PUSH
1256: LD_INT 7
1258: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_INT 107
1266: PPUSH
1267: LD_INT 55
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 47
1277: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1278: LD_VAR 0 4
1282: PPUSH
1283: LD_INT 7
1285: PPUSH
1286: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1290: LD_ADDR_VAR 0 2
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 3
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: PUSH
1324: LD_INT 22
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: LD_INT 30
1336: PUSH
1337: LD_INT 36
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 69
1352: ADD
1353: PUSH
1354: FOR_IN
1355: IFFALSE 1406
// for j = 1 to 3 do
1357: LD_ADDR_VAR 0 3
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_INT 3
1369: PUSH
1370: FOR_TO
1371: IFFALSE 1402
// begin PrepareHuman ( false , 3 , 6 ) ;
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 6
1381: PPUSH
1382: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1386: CALL_OW 44
1390: PPUSH
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: GO 1370
1402: POP
1403: POP
1404: GO 1354
1406: POP
1407: POP
// end ;
1408: LD_VAR 0 1
1412: RET
// export function PreparePatrol ; var i , un ; begin
1413: LD_INT 0
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_side := 1 ;
1418: LD_ADDR_OWVAR 20
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_nation := 1 ;
1426: LD_ADDR_OWVAR 21
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1434: LD_ADDR_EXP 19
1438: PUSH
1439: LD_INT 99
1441: PUSH
1442: LD_INT 55
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 113
1451: PUSH
1452: LD_INT 67
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 129
1461: PUSH
1462: LD_INT 68
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 135
1471: PUSH
1472: LD_INT 62
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 103
1481: PUSH
1482: LD_INT 41
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 27
1498: PUSH
1499: LD_INT 49
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 46
1508: PUSH
1509: LD_INT 49
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: LD_INT 87
1518: PUSH
1519: LD_INT 70
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 99
1528: PUSH
1529: LD_INT 79
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 118
1538: PUSH
1539: LD_INT 111
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 99
1548: PUSH
1549: LD_INT 79
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 87
1558: PUSH
1559: LD_INT 70
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 46
1568: PUSH
1569: LD_INT 49
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 200
1588: PUSH
1589: LD_INT 88
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 175
1598: PUSH
1599: LD_INT 80
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 135
1608: PUSH
1609: LD_INT 62
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 117
1618: PUSH
1619: LD_INT 53
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 103
1628: PUSH
1629: LD_INT 41
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 99
1638: PUSH
1639: LD_INT 24
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 85
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 99
1658: PUSH
1659: LD_INT 24
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 103
1668: PUSH
1669: LD_INT 41
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 98
1678: PUSH
1679: LD_INT 47
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 99
1688: PUSH
1689: LD_INT 56
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 96
1698: PUSH
1699: LD_INT 66
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 99
1708: PUSH
1709: LD_INT 56
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 112
1718: PUSH
1719: LD_INT 66
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 129
1728: PUSH
1729: LD_INT 68
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 135
1738: PUSH
1739: LD_INT 62
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 156
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 168
1758: PUSH
1759: LD_INT 76
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 168
1768: PUSH
1769: LD_INT 61
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 168
1778: PUSH
1779: LD_INT 75
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 185
1788: PUSH
1789: LD_INT 85
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// mobile_patrol := [ ] ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: EMPTY
1830: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1831: LD_INT 3
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: LD_INT 3
1839: PPUSH
1840: LD_INT 4
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL 41782 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1850: LD_ADDR_EXP 18
1854: PUSH
1855: LD_EXP 18
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 45
1867: PPUSH
1868: CALL_OW 2
1872: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1873: LD_EXP 18
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: LD_INT 99
1884: PPUSH
1885: LD_INT 55
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1895: LD_INT 2
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 3
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 100
1909: PPUSH
1910: CALL 41782 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_EXP 18
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: CALL_OW 45
1931: PPUSH
1932: CALL_OW 2
1936: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1937: LD_EXP 18
1941: PUSH
1942: LD_INT 2
1944: ARRAY
1945: PPUSH
1946: LD_INT 27
1948: PPUSH
1949: LD_INT 49
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1959: LD_INT 3
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: LD_INT 9
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 7
1976: PUSH
1977: LD_INT 7
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: LD_OWVAR 67
1990: ARRAY
1991: PPUSH
1992: LD_INT 100
1994: PPUSH
1995: CALL 41782 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1999: LD_ADDR_EXP 18
2003: PUSH
2004: LD_EXP 18
2008: PPUSH
2009: LD_INT 3
2011: PPUSH
2012: CALL_OW 45
2016: PPUSH
2017: CALL_OW 2
2021: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2022: LD_EXP 18
2026: PUSH
2027: LD_INT 3
2029: ARRAY
2030: PPUSH
2031: LD_INT 200
2033: PPUSH
2034: LD_INT 88
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 48
// for i := mobile_patrol downto 1 do
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: DOUBLE
2050: LD_EXP 18
2054: INC
2055: ST_TO_ADDR
2056: LD_INT 1
2058: PUSH
2059: FOR_DOWNTO
2060: IFFALSE 2071
// RaiseSailEvent ( 1 ) ;
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 427
2069: GO 2059
2071: POP
2072: POP
// end ;
2073: LD_VAR 0 1
2077: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2088: LD_ADDR_VAR 0 5
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 21
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 22
2115: PUSH
2116: LD_INT 1
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2128: LD_ADDR_VAR 0 6
2132: PUSH
2133: LD_INT 176
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 135
2141: PUSH
2142: LD_INT 62
2144: PUSH
2145: LD_INT 114
2147: PUSH
2148: LD_INT 67
2150: PUSH
2151: LD_INT 93
2153: PUSH
2154: LD_INT 71
2156: PUSH
2157: LD_INT 76
2159: PUSH
2160: LD_INT 67
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 107
2177: PUSH
2178: LD_INT 92
2180: PUSH
2181: LD_INT 92
2183: PUSH
2184: LD_INT 72
2186: PUSH
2187: LD_INT 77
2189: PUSH
2190: LD_INT 68
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 45
2203: PUSH
2204: LD_INT 49
2206: PUSH
2207: LD_INT 67
2209: PUSH
2210: LD_INT 59
2212: PUSH
2213: LD_INT 77
2215: PUSH
2216: LD_INT 68
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2232: LD_ADDR_VAR 0 4
2236: PUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_VAR 0 5
2244: PPUSH
2245: CALL_OW 12
2249: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 2
2260: PPUSH
2261: CALL_OW 12
2265: ST_TO_ADDR
// uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2282: LD_INT 2
2284: PPUSH
2285: LD_INT 3
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: LD_INT 12
2293: PPUSH
2294: LD_INT 100
2296: PPUSH
2297: CALL 41782 0 5
// veh := CreateVehicle ;
2301: LD_ADDR_VAR 0 8
2305: PUSH
2306: CALL_OW 45
2310: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2311: LD_VAR 0 8
2315: PPUSH
2316: LD_VAR 0 5
2320: PUSH
2321: LD_VAR 0 4
2325: ARRAY
2326: PUSH
2327: LD_INT 2
2329: ARRAY
2330: PPUSH
2331: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2335: LD_VAR 0 8
2339: PPUSH
2340: LD_VAR 0 5
2344: PUSH
2345: LD_VAR 0 4
2349: ARRAY
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2362: LD_VAR 0 8
2366: PPUSH
2367: LD_INT 1
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_VAR 0 3
2381: ARRAY
2382: PPUSH
2383: LD_INT 100
2385: PPUSH
2386: CALL_OW 290
// tmp := road [ k ] ;
2390: LD_ADDR_VAR 0 7
2394: PUSH
2395: LD_VAR 0 6
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_VAR 0 7
2420: PUSH
2421: LD_INT 2
2423: DIV
2424: PUSH
2425: FOR_TO
2426: IFFALSE 2473
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 7
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_INT 2
2445: MUL
2446: PUSH
2447: LD_INT 1
2449: MINUS
2450: ARRAY
2451: PPUSH
2452: LD_VAR 0 7
2456: PUSH
2457: LD_VAR 0 2
2461: PUSH
2462: LD_INT 2
2464: MUL
2465: ARRAY
2466: PPUSH
2467: CALL_OW 171
2471: GO 2425
2473: POP
2474: POP
// AddComGive ( veh , alfa ) ;
2475: LD_VAR 0 8
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2487: LD_VAR 0 8
2491: PPUSH
2492: LD_INT 70
2494: PPUSH
2495: CALL_OW 202
// for i = tmp div 2 downto 1 do
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: DOUBLE
2505: LD_VAR 0 7
2509: PUSH
2510: LD_INT 2
2512: DIV
2513: INC
2514: ST_TO_ADDR
2515: LD_INT 1
2517: PUSH
2518: FOR_DOWNTO
2519: IFFALSE 2566
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2521: LD_VAR 0 8
2525: PPUSH
2526: LD_VAR 0 7
2530: PUSH
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 2
2538: MUL
2539: PUSH
2540: LD_INT 1
2542: MINUS
2543: ARRAY
2544: PPUSH
2545: LD_VAR 0 7
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_INT 2
2557: MUL
2558: ARRAY
2559: PPUSH
2560: CALL_OW 171
2564: GO 2518
2566: POP
2567: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2568: LD_VAR 0 8
2572: PPUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_VAR 0 4
2582: ARRAY
2583: PUSH
2584: LD_INT 1
2586: ARRAY
2587: PPUSH
2588: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2592: LD_INT 35
2594: PPUSH
2595: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2599: LD_VAR 0 8
2603: PPUSH
2604: LD_VAR 0 5
2608: PUSH
2609: LD_VAR 0 4
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_VAR 0 8
2628: PPUSH
2629: LD_VAR 0 3
2633: PPUSH
2634: CALL_OW 289
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: AND
2643: IFFALSE 2592
// RemoveUnit ( veh ) ;
2645: LD_VAR 0 8
2649: PPUSH
2650: CALL_OW 64
// end ;
2654: LD_VAR 0 1
2658: RET
// every 3 3$00 do
2659: GO 2661
2661: DISABLE
// begin enable ;
2662: ENABLE
// SpawnCargo ;
2663: CALL 2078 0 0
// end ;
2667: END
// export function PrepareDefenders ; var i , tmp ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
// if defenders then
2673: LD_EXP 21
2677: IFFALSE 2681
// exit ;
2679: GO 2953
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2681: LD_ADDR_VAR 0 2
2685: PUSH
2686: DOUBLE
2687: LD_INT 1
2689: DEC
2690: ST_TO_ADDR
2691: LD_INT 4
2693: PUSH
2694: LD_INT 5
2696: PUSH
2697: LD_INT 6
2699: PUSH
2700: LD_INT 7
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2855
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 6
2725: PPUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: CALL_OW 12
2746: ARRAY
2747: PPUSH
2748: LD_INT 1
2750: PUSH
2751: LD_INT 3
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 1
2760: PPUSH
2761: LD_INT 2
2763: PPUSH
2764: CALL_OW 12
2768: ARRAY
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: LD_INT 9
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 1
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: CALL_OW 12
2797: ARRAY
2798: PPUSH
2799: CALL 39402 0 5
2803: ST_TO_ADDR
// if tmp then
2804: LD_VAR 0 3
2808: IFFALSE 2853
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2810: LD_INT 6
2812: PPUSH
2813: LD_VAR 0 3
2817: PUSH
2818: LD_INT 1
2820: ARRAY
2821: PPUSH
2822: LD_VAR 0 3
2826: PUSH
2827: LD_INT 2
2829: ARRAY
2830: PPUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_INT 3
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 3
2844: PUSH
2845: LD_INT 4
2847: ARRAY
2848: PPUSH
2849: CALL_OW 185
// end ;
2853: GO 2715
2855: POP
2856: POP
// repeat wait ( 0 0$1 ) ;
2857: LD_INT 35
2859: PPUSH
2860: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 33
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_INT 4
2895: PUSH
2896: LD_INT 5
2898: PUSH
2899: LD_INT 6
2901: PUSH
2902: LD_INT 7
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_OWVAR 67
2915: ARRAY
2916: GREATEREQUAL
2917: IFFALSE 2857
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2919: LD_ADDR_EXP 21
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 1
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 33
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: ST_TO_ADDR
// end ;
2953: LD_VAR 0 1
2957: RET
// export function Defend ; var i , un , veh , tmp ; begin
2958: LD_INT 0
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
// defcon_wave := defcon_wave + 1 ;
2965: LD_ADDR_EXP 23
2969: PUSH
2970: LD_EXP 23
2974: PUSH
2975: LD_INT 1
2977: PLUS
2978: ST_TO_ADDR
// if not defenders then
2979: LD_EXP 21
2983: NOT
2984: IFFALSE 2990
// PrepareDefenders ;
2986: CALL 2668 0 0
// if defcon_wave > 1 then
2990: LD_EXP 23
2994: PUSH
2995: LD_INT 1
2997: GREATER
2998: IFFALSE 3256
// begin for i = 1 to defcon_wave + 2 do
3000: LD_ADDR_VAR 0 2
3004: PUSH
3005: DOUBLE
3006: LD_INT 1
3008: DEC
3009: ST_TO_ADDR
3010: LD_EXP 23
3014: PUSH
3015: LD_INT 2
3017: PLUS
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3162
// begin uc_side := 1 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// uc_nation := 1 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 1
3037: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 3
3043: PPUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: LD_INT 7
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: CALL_OW 12
3071: ARRAY
3072: PPUSH
3073: LD_INT 100
3075: PPUSH
3076: CALL 41782 0 5
// veh := CreateVehicle ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: CALL_OW 45
3089: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 233
// defenders := defenders ^ veh ;
3102: LD_ADDR_EXP 21
3106: PUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_VAR 0 4
3116: ADD
3117: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3118: LD_INT 0
3120: PPUSH
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 9
3126: PPUSH
3127: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3131: CALL_OW 44
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 25
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL_OW 49
// end ;
3160: GO 3019
3162: POP
3163: POP
// for i = 1 to defcon_wave do
3164: LD_ADDR_VAR 0 2
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_EXP 23
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3254
// begin uc_side := 1 ;
3182: LD_ADDR_OWVAR 20
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// uc_nation := 1 ;
3190: LD_ADDR_OWVAR 21
3194: PUSH
3195: LD_INT 1
3197: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 5
3203: PPUSH
3204: LD_INT 9
3206: PPUSH
3207: CALL_OW 380
// un := CreateHuman ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: CALL_OW 44
3220: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3221: LD_VAR 0 3
3225: PPUSH
3226: LD_INT 25
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
// defenders := defenders ^ un ;
3236: LD_ADDR_EXP 21
3240: PUSH
3241: LD_EXP 21
3245: PUSH
3246: LD_VAR 0 3
3250: ADD
3251: ST_TO_ADDR
// end ;
3252: GO 3179
3254: POP
3255: POP
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// for i in defenders do
3263: LD_ADDR_VAR 0 2
3267: PUSH
3268: LD_EXP 21
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3356
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3276: LD_EXP 22
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_EXP 22
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: LD_EXP 22
3299: PUSH
3300: LD_INT 2
3302: ARRAY
3303: PPUSH
3304: CALL_OW 297
3308: PUSH
3309: LD_INT 10
3311: GREATER
3312: AND
3313: PUSH
3314: LD_VAR 0 2
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: AND
3325: IFFALSE 3354
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_EXP 22
3336: PUSH
3337: LD_INT 1
3339: ARRAY
3340: PPUSH
3341: LD_EXP 22
3345: PUSH
3346: LD_INT 2
3348: ARRAY
3349: PPUSH
3350: CALL_OW 114
// end ;
3354: GO 3273
3356: POP
3357: POP
// until not defenders ;
3358: LD_EXP 21
3362: NOT
3363: IFFALSE 3256
// end ;
3365: LD_VAR 0 1
3369: RET
// every 0 0$1 do var radar , i ;
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
// begin uc_side := 1 ;
3377: LD_ADDR_OWVAR 20
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// uc_nation := 1 ;
3385: LD_ADDR_OWVAR 21
3389: PUSH
3390: LD_INT 1
3392: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3393: LD_INT 1
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: LD_INT 11
3404: PPUSH
3405: LD_INT 100
3407: PPUSH
3408: CALL 41782 0 5
// radar := CreateVehicle ;
3412: LD_ADDR_VAR 0 1
3416: PUSH
3417: CALL_OW 45
3421: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3434: LD_VAR 0 1
3438: PPUSH
3439: LD_INT 51
3441: PPUSH
3442: LD_INT 45
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: LD_INT 700
3459: PPUSH
3460: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 75
3474: PPUSH
3475: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 350
3486: PPUSH
3487: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 83
3498: PPUSH
3499: LD_INT 87
3501: PPUSH
3502: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 525
3513: PPUSH
3514: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 94
3525: PPUSH
3526: LD_INT 81
3528: PPUSH
3529: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3533: LD_VAR 0 1
3537: PPUSH
3538: LD_INT 350
3540: PPUSH
3541: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3545: LD_VAR 0 1
3549: PPUSH
3550: LD_INT 55
3552: PPUSH
3553: LD_INT 48
3555: PPUSH
3556: CALL_OW 171
// wait ( 1 1$00 ) ;
3560: LD_INT 2100
3562: PPUSH
3563: CALL_OW 67
// until not IsOk ( radar ) ;
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 302
3576: NOT
3577: IFFALSE 3452
// end ;
3579: PPOPN 2
3581: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3582: LD_OWVAR 67
3586: PUSH
3587: LD_INT 1
3589: GREATER
3590: PUSH
3591: LD_EXP 11
3595: AND
3596: IFFALSE 3818
3598: GO 3600
3600: DISABLE
3601: LD_INT 0
3603: PPUSH
// begin enable ;
3604: ENABLE
// uc_side := 1 ;
3605: LD_ADDR_OWVAR 20
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// uc_nation := 1 ;
3613: LD_ADDR_OWVAR 21
3617: PUSH
3618: LD_INT 1
3620: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3621: LD_INT 5
3623: PPUSH
3624: LD_INT 3
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 100
3635: PPUSH
3636: CALL 41782 0 5
// un := CreateVehicle ;
3640: LD_ADDR_VAR 0 1
3644: PUSH
3645: CALL_OW 45
3649: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 3
3657: PPUSH
3658: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3662: LD_VAR 0 1
3666: PPUSH
3667: LD_INT 155
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 0
3675: PPUSH
3676: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3680: LD_VAR 0 1
3684: PPUSH
3685: LD_INT 169
3687: PPUSH
3688: LD_INT 77
3690: PPUSH
3691: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: LD_INT 70
3702: PPUSH
3703: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3707: LD_VAR 0 1
3711: PPUSH
3712: LD_INT 134
3714: PPUSH
3715: LD_INT 62
3717: PPUSH
3718: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_INT 103
3729: PPUSH
3730: LD_INT 42
3732: PPUSH
3733: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3737: LD_VAR 0 1
3741: PPUSH
3742: LD_INT 70
3744: PPUSH
3745: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3749: LD_VAR 0 1
3753: PPUSH
3754: LD_INT 84
3756: PPUSH
3757: LD_INT 2
3759: PPUSH
3760: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3764: LD_INT 35
3766: PPUSH
3767: CALL_OW 67
// if IsDead ( un ) then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 301
3780: IFFALSE 3792
// begin extra_patrol := false ;
3782: LD_ADDR_EXP 11
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// exit ;
3790: GO 3818
// end ; until IsAt ( un , 84 , 2 ) ;
3792: LD_VAR 0 1
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 2
3802: PPUSH
3803: CALL_OW 307
3807: IFFALSE 3764
// RemoveUnit ( un ) ;
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 64
// end ; end_of_file
3818: PPOPN 1
3820: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3821: LD_INT 0
3823: PPUSH
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// uc_side := 4 ;
3831: LD_ADDR_OWVAR 20
3835: PUSH
3836: LD_INT 4
3838: ST_TO_ADDR
// uc_nation := 1 ;
3839: LD_ADDR_OWVAR 21
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3847: LD_ADDR_EXP 38
3851: PUSH
3852: LD_STRING DeltaDoctor
3854: PPUSH
3855: LD_EXP 1
3859: NOT
3860: PPUSH
3861: LD_STRING 10c_
3863: PPUSH
3864: CALL 36921 0 3
3868: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3869: LD_ADDR_EXP 37
3873: PUSH
3874: LD_STRING Joan
3876: PPUSH
3877: LD_EXP 1
3881: NOT
3882: PPUSH
3883: LD_STRING 10c_
3885: PPUSH
3886: CALL 36921 0 3
3890: ST_TO_ADDR
// if Joan then
3891: LD_EXP 37
3895: IFFALSE 3926
// friends := Insert ( friends , friends + 1 , Joan ) ;
3897: LD_ADDR_EXP 4
3901: PUSH
3902: LD_EXP 4
3906: PPUSH
3907: LD_EXP 4
3911: PUSH
3912: LD_INT 1
3914: PLUS
3915: PPUSH
3916: LD_EXP 37
3920: PPUSH
3921: CALL_OW 2
3925: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3926: LD_ADDR_EXP 36
3930: PUSH
3931: LD_STRING Simms
3933: PPUSH
3934: LD_EXP 1
3938: NOT
3939: PPUSH
3940: LD_STRING 10c_
3942: PPUSH
3943: CALL 36921 0 3
3947: ST_TO_ADDR
// if debug then
3948: LD_EXP 1
3952: IFFALSE 3969
// Kikuchi := NewCharacter ( Yamoko ) else
3954: LD_ADDR_EXP 35
3958: PUSH
3959: LD_STRING Yamoko
3961: PPUSH
3962: CALL_OW 25
3966: ST_TO_ADDR
3967: GO 3991
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3969: LD_ADDR_EXP 35
3973: PUSH
3974: LD_STRING Kikuchi
3976: PPUSH
3977: LD_EXP 1
3981: NOT
3982: PPUSH
3983: LD_STRING 11_
3985: PPUSH
3986: CALL 36921 0 3
3990: ST_TO_ADDR
// if Kikuchi then
3991: LD_EXP 35
3995: IFFALSE 4026
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3997: LD_ADDR_EXP 4
4001: PUSH
4002: LD_EXP 4
4006: PPUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 1
4014: PLUS
4015: PPUSH
4016: LD_EXP 35
4020: PPUSH
4021: CALL_OW 2
4025: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
4026: LD_ADDR_EXP 34
4030: PUSH
4031: LD_STRING Frank
4033: PPUSH
4034: LD_EXP 1
4038: NOT
4039: PPUSH
4040: LD_STRING 11_
4042: PPUSH
4043: CALL 36921 0 3
4047: ST_TO_ADDR
// if Frank then
4048: LD_EXP 34
4052: IFFALSE 4083
// friends := Insert ( friends , friends + 1 , Frank ) ;
4054: LD_ADDR_EXP 4
4058: PUSH
4059: LD_EXP 4
4063: PPUSH
4064: LD_EXP 4
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: PPUSH
4073: LD_EXP 34
4077: PPUSH
4078: CALL_OW 2
4082: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4083: LD_ADDR_EXP 33
4087: PUSH
4088: LD_STRING Gary
4090: PPUSH
4091: LD_EXP 1
4095: NOT
4096: PPUSH
4097: LD_STRING 11_
4099: PPUSH
4100: CALL 36921 0 3
4104: ST_TO_ADDR
// if Gary then
4105: LD_EXP 33
4109: IFFALSE 4140
// friends := Insert ( friends , friends + 1 , Gary ) ;
4111: LD_ADDR_EXP 4
4115: PUSH
4116: LD_EXP 4
4120: PPUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 1
4128: PLUS
4129: PPUSH
4130: LD_EXP 33
4134: PPUSH
4135: CALL_OW 2
4139: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4140: LD_ADDR_EXP 32
4144: PUSH
4145: LD_STRING Cornell
4147: PPUSH
4148: LD_EXP 1
4152: NOT
4153: PPUSH
4154: LD_STRING 11_
4156: PPUSH
4157: CALL 36921 0 3
4161: ST_TO_ADDR
// if Cornel then
4162: LD_EXP 32
4166: IFFALSE 4197
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4168: LD_ADDR_EXP 4
4172: PUSH
4173: LD_EXP 4
4177: PPUSH
4178: LD_EXP 4
4182: PUSH
4183: LD_INT 1
4185: PLUS
4186: PPUSH
4187: LD_EXP 32
4191: PPUSH
4192: CALL_OW 2
4196: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4197: LD_ADDR_EXP 31
4201: PUSH
4202: LD_STRING Houten
4204: PPUSH
4205: LD_EXP 1
4209: NOT
4210: PPUSH
4211: LD_STRING 11_
4213: PPUSH
4214: CALL 36921 0 3
4218: ST_TO_ADDR
// if Houten then
4219: LD_EXP 31
4223: IFFALSE 4254
// friends := Insert ( friends , friends + 1 , Houten ) ;
4225: LD_ADDR_EXP 4
4229: PUSH
4230: LD_EXP 4
4234: PPUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 1
4242: PLUS
4243: PPUSH
4244: LD_EXP 31
4248: PPUSH
4249: CALL_OW 2
4253: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4254: LD_ADDR_EXP 30
4258: PUSH
4259: LD_STRING Gladstone
4261: PPUSH
4262: LD_EXP 1
4266: NOT
4267: PPUSH
4268: LD_STRING 11_
4270: PPUSH
4271: CALL 36921 0 3
4275: ST_TO_ADDR
// if Gladstone then
4276: LD_EXP 30
4280: IFFALSE 4311
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4282: LD_ADDR_EXP 4
4286: PUSH
4287: LD_EXP 4
4291: PPUSH
4292: LD_EXP 4
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: PPUSH
4301: LD_EXP 30
4305: PPUSH
4306: CALL_OW 2
4310: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4311: LD_ADDR_EXP 24
4315: PUSH
4316: LD_STRING Lisa
4318: PPUSH
4319: LD_EXP 1
4323: NOT
4324: PPUSH
4325: LD_STRING 11_
4327: PPUSH
4328: CALL 36921 0 3
4332: ST_TO_ADDR
// if Lisa then
4333: LD_EXP 24
4337: IFFALSE 4362
// friends := Insert ( friends , 1 , Lisa ) ;
4339: LD_ADDR_EXP 4
4343: PUSH
4344: LD_EXP 4
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: LD_EXP 24
4356: PPUSH
4357: CALL_OW 2
4361: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4362: LD_ADDR_EXP 25
4366: PUSH
4367: LD_STRING Donaldson
4369: PPUSH
4370: LD_EXP 1
4374: NOT
4375: PPUSH
4376: LD_STRING 11_
4378: PPUSH
4379: CALL 36921 0 3
4383: ST_TO_ADDR
// if Donaldson then
4384: LD_EXP 25
4388: IFFALSE 4419
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4390: LD_ADDR_EXP 4
4394: PUSH
4395: LD_EXP 4
4399: PPUSH
4400: LD_EXP 4
4404: PUSH
4405: LD_INT 1
4407: PLUS
4408: PPUSH
4409: LD_EXP 25
4413: PPUSH
4414: CALL_OW 2
4418: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4419: LD_ADDR_EXP 26
4423: PUSH
4424: LD_STRING Bobby
4426: PPUSH
4427: LD_EXP 1
4431: NOT
4432: PPUSH
4433: LD_STRING 11_
4435: PPUSH
4436: CALL 36921 0 3
4440: ST_TO_ADDR
// if Bobby then
4441: LD_EXP 26
4445: IFFALSE 4476
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4447: LD_ADDR_EXP 4
4451: PUSH
4452: LD_EXP 4
4456: PPUSH
4457: LD_EXP 4
4461: PUSH
4462: LD_INT 1
4464: PLUS
4465: PPUSH
4466: LD_EXP 26
4470: PPUSH
4471: CALL_OW 2
4475: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4476: LD_ADDR_EXP 27
4480: PUSH
4481: LD_STRING Cyrus
4483: PPUSH
4484: LD_EXP 1
4488: NOT
4489: PPUSH
4490: LD_STRING 11_
4492: PPUSH
4493: CALL 36921 0 3
4497: ST_TO_ADDR
// if Cyrus then
4498: LD_EXP 27
4502: IFFALSE 4533
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4504: LD_ADDR_EXP 4
4508: PUSH
4509: LD_EXP 4
4513: PPUSH
4514: LD_EXP 4
4518: PUSH
4519: LD_INT 1
4521: PLUS
4522: PPUSH
4523: LD_EXP 27
4527: PPUSH
4528: CALL_OW 2
4532: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4533: LD_ADDR_EXP 28
4537: PUSH
4538: LD_STRING Denis
4540: PPUSH
4541: LD_EXP 1
4545: NOT
4546: PPUSH
4547: LD_STRING 11_
4549: PPUSH
4550: CALL 36921 0 3
4554: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4555: LD_ADDR_EXP 29
4559: PUSH
4560: LD_STRING Brown
4562: PPUSH
4563: LD_EXP 1
4567: NOT
4568: PPUSH
4569: LD_STRING 11_
4571: PPUSH
4572: CALL 36921 0 3
4576: ST_TO_ADDR
// if Brown then
4577: LD_EXP 29
4581: IFFALSE 4612
// friends := Insert ( friends , friends + 1 , Brown ) ;
4583: LD_ADDR_EXP 4
4587: PUSH
4588: LD_EXP 4
4592: PPUSH
4593: LD_EXP 4
4597: PUSH
4598: LD_INT 1
4600: PLUS
4601: PPUSH
4602: LD_EXP 29
4606: PPUSH
4607: CALL_OW 2
4611: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4612: LD_ADDR_EXP 39
4616: PUSH
4617: LD_STRING Mike
4619: PPUSH
4620: LD_EXP 1
4624: NOT
4625: PPUSH
4626: LD_STRING 10c_
4628: PPUSH
4629: CALL 36921 0 3
4633: ST_TO_ADDR
// if Mike then
4634: LD_EXP 39
4638: IFFALSE 4679
// begin SetClass ( Mike , class_apeman_engineer ) ;
4640: LD_EXP 39
4644: PPUSH
4645: LD_INT 16
4647: PPUSH
4648: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4652: LD_EXP 39
4656: PPUSH
4657: LD_INT 180
4659: PPUSH
4660: LD_INT 87
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL_OW 48
// ComHold ( Mike ) ;
4670: LD_EXP 39
4674: PPUSH
4675: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4679: LD_ADDR_EXP 4
4683: PUSH
4684: LD_EXP 4
4688: PUSH
4689: LD_STRING 11c_others
4691: PPUSH
4692: CALL_OW 31
4696: ADD
4697: PUSH
4698: LD_STRING 11_others
4700: PPUSH
4701: CALL_OW 31
4705: ADD
4706: ST_TO_ADDR
// if friends < 18 then
4707: LD_EXP 4
4711: PUSH
4712: LD_INT 18
4714: LESS
4715: IFFALSE 4787
// for i = 1 to 18 do
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: DOUBLE
4723: LD_INT 1
4725: DEC
4726: ST_TO_ADDR
4727: LD_INT 18
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4785
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4733: LD_INT 0
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: LD_INT 4
4741: PPUSH
4742: CALL_OW 12
4746: PPUSH
4747: LD_INT 7
4749: PPUSH
4750: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4754: LD_ADDR_EXP 4
4758: PUSH
4759: LD_EXP 4
4763: PPUSH
4764: LD_EXP 4
4768: PUSH
4769: LD_INT 1
4771: PLUS
4772: PPUSH
4773: CALL_OW 44
4777: PPUSH
4778: CALL_OW 2
4782: ST_TO_ADDR
// end ;
4783: GO 4730
4785: POP
4786: POP
// for i in friends do
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: LD_EXP 4
4796: PUSH
4797: FOR_IN
4798: IFFALSE 4871
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4800: LD_VAR 0 2
4804: PPUSH
4805: CALL_OW 248
4809: PUSH
4810: LD_INT 1
4812: EQUAL
4813: PUSH
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 259
4826: PUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 259
4839: GREATEREQUAL
4840: AND
4841: IFFALSE 4857
// SetClass ( i , class_soldier ) else
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 336
4855: GO 4869
// SetClass ( i , class_scientistic ) ;
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: CALL_OW 336
4869: GO 4797
4871: POP
4872: POP
// if Frank then
4873: LD_EXP 34
4877: IFFALSE 4891
// SetClass ( Frank , class_sniper ) ;
4879: LD_EXP 34
4883: PPUSH
4884: LD_INT 5
4886: PPUSH
4887: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4891: LD_EXP 37
4895: PUSH
4896: LD_EXP 28
4900: PUSH
4901: LD_EXP 38
4905: PUSH
4906: LD_EXP 36
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ [ class_soldier , 3 ] , [ class_scientistic , 2 , 5 ] , [ class_sniper , 0 , 2 ] ] ) ;
4924: LD_ADDR_EXP 3
4928: PUSH
4929: LD_STRING 
4931: PPUSH
4932: LD_INT 7
4934: PPUSH
4935: LD_INT 7
4937: PPUSH
4938: LD_INT -6
4940: PUSH
4941: LD_EXP 15
4945: PUSH
4946: LD_EXP 16
4950: PUSH
4951: LD_EXP 36
4955: PUSH
4956: LD_EXP 28
4960: PUSH
4961: LD_EXP 38
4965: PUSH
4966: LD_INT -2
4968: PUSH
4969: LD_INT -3
4971: PUSH
4972: LD_INT -5
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PUSH
4986: LD_EXP 4
4990: ADD
4991: PPUSH
4992: LD_INT 1
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 4
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 5
5018: PUSH
5019: LD_INT 0
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 42
5039: ST_TO_ADDR
// if Simms then
5040: LD_EXP 36
5044: IFFALSE 5062
// selected := selected ^ Simms ;
5046: LD_ADDR_EXP 3
5050: PUSH
5051: LD_EXP 3
5055: PUSH
5056: LD_EXP 36
5060: ADD
5061: ST_TO_ADDR
// if Denis then
5062: LD_EXP 28
5066: IFFALSE 5084
// selected := selected ^ Denis ;
5068: LD_ADDR_EXP 3
5072: PUSH
5073: LD_EXP 3
5077: PUSH
5078: LD_EXP 28
5082: ADD
5083: ST_TO_ADDR
// if DeltaDoctor then
5084: LD_EXP 38
5088: IFFALSE 5106
// selected := selected ^ DeltaDoctor ;
5090: LD_ADDR_EXP 3
5094: PUSH
5095: LD_EXP 3
5099: PUSH
5100: LD_EXP 38
5104: ADD
5105: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5106: LD_EXP 10
5110: PUSH
5111: LD_INT 1
5113: EQUAL
5114: PUSH
5115: LD_EXP 25
5119: AND
5120: IFFALSE 5132
// gammaCommander := Donaldson ;
5122: LD_ADDR_VAR 0 8
5126: PUSH
5127: LD_EXP 25
5131: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5132: LD_EXP 10
5136: PUSH
5137: LD_INT 2
5139: EQUAL
5140: PUSH
5141: LD_EXP 29
5145: AND
5146: IFFALSE 5158
// gammaCommander := Brown ;
5148: LD_ADDR_VAR 0 8
5152: PUSH
5153: LD_EXP 29
5157: ST_TO_ADDR
// friends := friends diff selected ;
5158: LD_ADDR_EXP 4
5162: PUSH
5163: LD_EXP 4
5167: PUSH
5168: LD_EXP 3
5172: DIFF
5173: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5174: LD_ADDR_EXP 4
5178: PUSH
5179: LD_EXP 4
5183: PUSH
5184: LD_VAR 0 8
5188: DIFF
5189: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5190: LD_ADDR_VAR 0 4
5194: PUSH
5195: LD_INT 111
5197: PUSH
5198: LD_INT 137
5200: PUSH
5201: LD_INT 51
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_INT 147
5211: PUSH
5212: LD_INT 129
5214: PUSH
5215: LD_INT 25
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5227: LD_ADDR_VAR 0 5
5231: PUSH
5232: LD_INT 5
5234: PUSH
5235: LD_INT 6
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: LD_INT 17
5246: PUSH
5247: LD_INT 18
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: ST_TO_ADDR
// for i in buildings do
5258: LD_ADDR_VAR 0 2
5262: PUSH
5263: LD_VAR 0 4
5267: PUSH
5268: FOR_IN
5269: IFFALSE 5285
// SetSide ( i , 4 ) ;
5271: LD_VAR 0 2
5275: PPUSH
5276: LD_INT 4
5278: PPUSH
5279: CALL_OW 235
5283: GO 5268
5285: POP
5286: POP
// for i in selected union gammaCommander do
5287: LD_ADDR_VAR 0 2
5291: PUSH
5292: LD_EXP 3
5296: PUSH
5297: LD_VAR 0 8
5301: UNION
5302: PUSH
5303: FOR_IN
5304: IFFALSE 5644
// begin if GetClass ( i ) in [ 1 , 5 ] then
5306: LD_VAR 0 2
5310: PPUSH
5311: CALL_OW 257
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: IN
5326: IFFALSE 5486
// begin if buildings [ 1 ] then
5328: LD_VAR 0 4
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: IFFALSE 5397
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_VAR 0 4
5347: PUSH
5348: LD_INT 1
5350: ARRAY
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PPUSH
5356: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5360: LD_ADDR_VAR 0 4
5364: PUSH
5365: LD_VAR 0 4
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: LD_VAR 0 4
5377: PUSH
5378: LD_INT 1
5380: ARRAY
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 3
5389: PPUSH
5390: CALL_OW 1
5394: ST_TO_ADDR
// end else
5395: GO 5484
// begin if not areas then
5397: LD_VAR 0 5
5401: NOT
5402: IFFALSE 5436
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_INT 87
5411: PPUSH
5412: LD_INT 68
5414: PPUSH
5415: LD_INT 8
5417: PPUSH
5418: LD_INT 0
5420: PPUSH
5421: CALL_OW 50
// ComHold ( i ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 140
// end else
5434: GO 5484
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// ComHold ( i ) ;
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5466: LD_ADDR_VAR 0 5
5470: PUSH
5471: LD_VAR 0 5
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: CALL_OW 3
5483: ST_TO_ADDR
// end ; end ; end else
5484: GO 5642
// begin if buildings [ 2 ] then
5486: LD_VAR 0 4
5490: PUSH
5491: LD_INT 2
5493: ARRAY
5494: IFFALSE 5555
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5496: LD_VAR 0 2
5500: PPUSH
5501: LD_VAR 0 4
5505: PUSH
5506: LD_INT 2
5508: ARRAY
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5518: LD_ADDR_VAR 0 4
5522: PUSH
5523: LD_VAR 0 4
5527: PPUSH
5528: LD_INT 2
5530: PPUSH
5531: LD_VAR 0 4
5535: PUSH
5536: LD_INT 2
5538: ARRAY
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: CALL_OW 3
5547: PPUSH
5548: CALL_OW 1
5552: ST_TO_ADDR
// end else
5553: GO 5642
// begin if not areas then
5555: LD_VAR 0 5
5559: NOT
5560: IFFALSE 5594
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 87
5569: PPUSH
5570: LD_INT 68
5572: PPUSH
5573: LD_INT 8
5575: PPUSH
5576: LD_INT 0
5578: PPUSH
5579: CALL_OW 50
// ComHold ( i ) ;
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 140
// end else
5592: GO 5642
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 5
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_INT 0
5610: PPUSH
5611: CALL_OW 49
// ComHold ( i ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: LD_INT 1
5636: PPUSH
5637: CALL_OW 3
5641: ST_TO_ADDR
// end ; end ; end ; end ;
5642: GO 5303
5644: POP
5645: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5646: LD_ADDR_VAR 0 6
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 30
5663: PUSH
5664: LD_INT 32
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: CALL_OW 69
5679: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5680: LD_ADDR_VAR 0 2
5684: PUSH
5685: DOUBLE
5686: LD_VAR 0 6
5690: PUSH
5691: LD_EXP 4
5695: MINUS
5696: INC
5697: ST_TO_ADDR
5698: LD_INT 1
5700: PUSH
5701: FOR_DOWNTO
5702: IFFALSE 5769
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5704: LD_INT 0
5706: PPUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_INT 7
5712: PUSH
5713: LD_INT 8
5715: PUSH
5716: LD_INT 9
5718: PUSH
5719: LD_INT 10
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_OWVAR 67
5732: ARRAY
5733: PPUSH
5734: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5738: LD_ADDR_EXP 4
5742: PUSH
5743: LD_EXP 4
5747: PPUSH
5748: LD_EXP 4
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: PPUSH
5757: CALL_OW 44
5761: PPUSH
5762: CALL_OW 2
5766: ST_TO_ADDR
// end ;
5767: GO 5701
5769: POP
5770: POP
// if friends then
5771: LD_EXP 4
5775: IFFALSE 5891
// begin tmp := friends ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: LD_EXP 4
5786: ST_TO_ADDR
// for i = 1 to bunkers do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: DOUBLE
5793: LD_INT 1
5795: DEC
5796: ST_TO_ADDR
5797: LD_VAR 0 6
5801: PUSH
5802: FOR_TO
5803: IFFALSE 5889
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5805: LD_VAR 0 3
5809: PUSH
5810: LD_VAR 0 3
5814: ARRAY
5815: PPUSH
5816: LD_INT 1
5818: PPUSH
5819: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 3
5832: ARRAY
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 3
5850: ARRAY
5851: PPUSH
5852: LD_VAR 0 6
5856: PUSH
5857: LD_VAR 0 2
5861: ARRAY
5862: PPUSH
5863: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_VAR 0 3
5876: PPUSH
5877: LD_VAR 0 3
5881: PPUSH
5882: CALL_OW 3
5886: ST_TO_ADDR
// end ;
5887: GO 5802
5889: POP
5890: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5891: LD_ADDR_VAR 0 5
5895: PUSH
5896: LD_VAR 0 5
5900: PUSH
5901: LD_INT 9
5903: PUSH
5904: LD_INT 10
5906: PUSH
5907: LD_INT 11
5909: PUSH
5910: LD_INT 12
5912: PUSH
5913: LD_INT 13
5915: PUSH
5916: LD_INT 14
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 26
5927: PUSH
5928: LD_INT 27
5930: PUSH
5931: LD_INT 28
5933: PUSH
5934: LD_INT 29
5936: PUSH
5937: LD_INT 30
5939: PUSH
5940: LD_INT 31
5942: PUSH
5943: LD_INT 32
5945: PUSH
5946: LD_INT 33
5948: PUSH
5949: LD_INT 34
5951: PUSH
5952: LD_INT 35
5954: PUSH
5955: LD_INT 36
5957: PUSH
5958: LD_INT 37
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: UNION
5983: ST_TO_ADDR
// for i in friends do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_EXP 4
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6278
// begin SetTag ( i , 2 ) ;
5997: LD_VAR 0 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_sniper ] then
6009: LD_VAR 0 2
6013: PPUSH
6014: CALL_OW 257
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: LD_INT 5
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: IN
6029: NOT
6030: IFFALSE 6044
// SetClass ( i , 1 ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6044: LD_VAR 0 2
6048: PPUSH
6049: CALL_OW 257
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 5
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: IN
6064: PUSH
6065: LD_VAR 0 4
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: AND
6074: IFFALSE 6135
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_VAR 0 4
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PUSH
6090: LD_INT 1
6092: ARRAY
6093: PPUSH
6094: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6098: LD_ADDR_VAR 0 4
6102: PUSH
6103: LD_VAR 0 4
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: LD_VAR 0 4
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 3
6127: PPUSH
6128: CALL_OW 1
6132: ST_TO_ADDR
// continue ;
6133: GO 5994
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6135: LD_VAR 0 2
6139: PPUSH
6140: CALL_OW 257
6144: PUSH
6145: LD_INT 4
6147: EQUAL
6148: PUSH
6149: LD_VAR 0 4
6153: PUSH
6154: LD_INT 2
6156: ARRAY
6157: AND
6158: IFFALSE 6219
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_VAR 0 4
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: PPUSH
6178: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6182: LD_ADDR_VAR 0 4
6186: PUSH
6187: LD_VAR 0 4
6191: PPUSH
6192: LD_INT 2
6194: PPUSH
6195: LD_VAR 0 4
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: LD_INT 1
6206: PPUSH
6207: CALL_OW 3
6211: PPUSH
6212: CALL_OW 1
6216: ST_TO_ADDR
// continue ;
6217: GO 5994
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6219: LD_VAR 0 2
6223: PPUSH
6224: LD_VAR 0 5
6228: PUSH
6229: LD_INT 1
6231: ARRAY
6232: PPUSH
6233: LD_INT 0
6235: PPUSH
6236: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6240: LD_ADDR_VAR 0 5
6244: PUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 3
6257: ST_TO_ADDR
// ComHold ( i ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: CALL_OW 140
// if not areas then
6267: LD_VAR 0 5
6271: NOT
6272: IFFALSE 6276
// break ;
6274: GO 6278
// end ;
6276: GO 5994
6278: POP
6279: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6280: LD_EXP 4
6284: PPUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 52
6290: PUSH
6291: EMPTY
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 72
6302: IFFALSE 6369
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_EXP 4
6313: PPUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 52
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PPUSH
6327: CALL_OW 72
6331: PUSH
6332: FOR_IN
6333: IFFALSE 6367
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 65
6342: PPUSH
6343: LD_INT 58
6345: PPUSH
6346: LD_INT 7
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ComHold ( i ) ;
6356: LD_VAR 0 2
6360: PPUSH
6361: CALL_OW 140
// end ;
6365: GO 6332
6367: POP
6368: POP
// if Frank then
6369: LD_EXP 34
6373: IFFALSE 6387
// SetClass ( Frank , class_sniper ) ;
6375: LD_EXP 34
6379: PPUSH
6380: LD_INT 5
6382: PPUSH
6383: CALL_OW 336
// end ; end_of_file
6387: LD_VAR 0 1
6391: RET
// export function CanSayRand ( side ) ; begin
6392: LD_INT 0
6394: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: LD_INT 52
6402: PUSH
6403: EMPTY
6404: LIST
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_VAR 0 1
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 2
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 25
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 69
6477: PUSH
6478: LD_EXP 15
6482: PUSH
6483: LD_EXP 34
6487: PUSH
6488: LD_EXP 24
6492: PUSH
6493: LD_EXP 25
6497: PUSH
6498: LD_EXP 26
6502: PUSH
6503: LD_EXP 27
6507: PUSH
6508: LD_EXP 28
6512: PUSH
6513: LD_EXP 29
6517: PUSH
6518: LD_EXP 30
6522: PUSH
6523: LD_EXP 31
6527: PUSH
6528: LD_EXP 17
6532: PUSH
6533: LD_EXP 32
6537: PUSH
6538: LD_EXP 33
6542: PUSH
6543: LD_EXP 35
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: DIFF
6564: ST_TO_ADDR
// end ;
6565: LD_VAR 0 2
6569: RET
// export function SayRand ( sex , dial ) ; begin
6570: LD_INT 0
6572: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 52
6580: PUSH
6581: EMPTY
6582: LIST
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 1
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 26
6596: PUSH
6597: LD_VAR 0 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 25
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 25
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: PUSH
6667: LD_EXP 15
6671: PUSH
6672: LD_EXP 34
6676: PUSH
6677: LD_EXP 24
6681: PUSH
6682: LD_EXP 25
6686: PUSH
6687: LD_EXP 26
6691: PUSH
6692: LD_EXP 27
6696: PUSH
6697: LD_EXP 28
6701: PUSH
6702: LD_EXP 29
6706: PUSH
6707: LD_EXP 30
6711: PUSH
6712: LD_EXP 31
6716: PUSH
6717: LD_EXP 17
6721: PUSH
6722: LD_EXP 32
6726: PUSH
6727: LD_EXP 33
6731: PUSH
6732: LD_EXP 35
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: DIFF
6753: ST_TO_ADDR
// if not result then
6754: LD_VAR 0 3
6758: NOT
6759: IFFALSE 6763
// exit ;
6761: GO 6791
// result := result [ 1 ] ;
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_VAR 0 3
6772: PUSH
6773: LD_INT 1
6775: ARRAY
6776: ST_TO_ADDR
// Say ( result , dial ) ;
6777: LD_VAR 0 3
6781: PPUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 88
// end ;
6791: LD_VAR 0 3
6795: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6796: LD_INT 0
6798: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6799: LD_ADDR_VAR 0 4
6803: PUSH
6804: LD_INT 22
6806: PUSH
6807: LD_INT 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 26
6816: PUSH
6817: LD_VAR 0 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 25
6831: PUSH
6832: LD_INT 1
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 25
6851: PUSH
6852: LD_INT 3
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PUSH
6886: LD_EXP 15
6890: PUSH
6891: LD_EXP 34
6895: PUSH
6896: LD_EXP 24
6900: PUSH
6901: LD_EXP 25
6905: PUSH
6906: LD_EXP 26
6910: PUSH
6911: LD_EXP 27
6915: PUSH
6916: LD_EXP 28
6920: PUSH
6921: LD_EXP 29
6925: PUSH
6926: LD_EXP 30
6930: PUSH
6931: LD_EXP 31
6935: PUSH
6936: LD_EXP 17
6940: PUSH
6941: LD_EXP 32
6945: PUSH
6946: LD_EXP 33
6950: PUSH
6951: LD_EXP 35
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_VAR 0 3
6976: ADD
6977: DIFF
6978: ST_TO_ADDR
// if not result then
6979: LD_VAR 0 4
6983: NOT
6984: IFFALSE 6988
// exit ;
6986: GO 7016
// result := result [ 1 ] ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 4
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: ST_TO_ADDR
// Say ( result , dial ) ;
7002: LD_VAR 0 4
7006: PPUSH
7007: LD_VAR 0 2
7011: PPUSH
7012: CALL_OW 88
// end ;
7016: LD_VAR 0 4
7020: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
7030: PPUSH
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7038: LD_VAR 0 1
7042: NOT
7043: PUSH
7044: LD_VAR 0 2
7048: NOT
7049: OR
7050: PUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 247
7060: PUSH
7061: LD_INT 3
7063: EQUAL
7064: OR
7065: IFFALSE 7069
// exit ;
7067: GO 8608
// for i = path downto 1 do
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: DOUBLE
7075: LD_VAR 0 2
7079: INC
7080: ST_TO_ADDR
7081: LD_INT 1
7083: PUSH
7084: FOR_DOWNTO
7085: IFFALSE 7146
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7087: LD_VAR 0 2
7091: PUSH
7092: LD_VAR 0 5
7096: ARRAY
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 2
7106: PUSH
7107: LD_VAR 0 5
7111: ARRAY
7112: PUSH
7113: LD_INT 2
7115: ARRAY
7116: PPUSH
7117: CALL_OW 488
7121: NOT
7122: IFFALSE 7144
// path = Delete ( path , i ) ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_VAR 0 2
7133: PPUSH
7134: LD_VAR 0 5
7138: PPUSH
7139: CALL_OW 3
7143: ST_TO_ADDR
// end ;
7144: GO 7084
7146: POP
7147: POP
// if not path then
7148: LD_VAR 0 2
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 8608
// tmp_path := [ ] ;
7157: LD_ADDR_VAR 0 11
7161: PUSH
7162: EMPTY
7163: ST_TO_ADDR
// if flags then
7164: LD_VAR 0 3
7168: IFFALSE 7242
// begin if flags [ 1 ] then
7170: LD_VAR 0 3
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: IFFALSE 7194
// safe_place = flags [ 1 ] ;
7180: LD_ADDR_VAR 0 16
7184: PUSH
7185: LD_VAR 0 3
7189: PUSH
7190: LD_INT 1
7192: ARRAY
7193: ST_TO_ADDR
// if flags [ 2 ] then
7194: LD_VAR 0 3
7198: PUSH
7199: LD_INT 2
7201: ARRAY
7202: IFFALSE 7218
// spot_dist = flags [ 2 ] ;
7204: LD_ADDR_VAR 0 15
7208: PUSH
7209: LD_VAR 0 3
7213: PUSH
7214: LD_INT 2
7216: ARRAY
7217: ST_TO_ADDR
// if flags [ 3 ] then
7218: LD_VAR 0 3
7222: PUSH
7223: LD_INT 3
7225: ARRAY
7226: IFFALSE 7242
// chase_range = flags [ 3 ] ;
7228: LD_ADDR_VAR 0 17
7232: PUSH
7233: LD_VAR 0 3
7237: PUSH
7238: LD_INT 3
7240: ARRAY
7241: ST_TO_ADDR
// end ; if not chase_range then
7242: LD_VAR 0 17
7246: NOT
7247: IFFALSE 7257
// chase_range = 8 ;
7249: LD_ADDR_VAR 0 17
7253: PUSH
7254: LD_INT 8
7256: ST_TO_ADDR
// if not spot_dist then
7257: LD_VAR 0 15
7261: NOT
7262: IFFALSE 7272
// spot_dist := 8 ;
7264: LD_ADDR_VAR 0 15
7268: PUSH
7269: LD_INT 8
7271: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7272: LD_ADDR_VAR 0 18
7276: PUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 247
7286: PUSH
7287: LD_INT 2
7289: EQUAL
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 262
7300: PUSH
7301: LD_INT 3
7303: NONEQUAL
7304: AND
7305: ST_TO_ADDR
// status = 1 ;
7306: LD_ADDR_VAR 0 12
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7314: LD_ADDR_VAR 0 11
7318: PUSH
7319: LD_INT 1
7321: PUSH
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7335: LD_INT 35
7337: PPUSH
7338: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7342: LD_VAR 0 18
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 261
7356: PUSH
7357: LD_INT 20
7359: LESS
7360: AND
7361: IFFALSE 7554
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7363: LD_ADDR_VAR 0 10
7367: PUSH
7368: LD_INT 22
7370: PUSH
7371: LD_VAR 0 1
7375: PPUSH
7376: CALL_OW 255
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 30
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 30
7400: PUSH
7401: LD_INT 1
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 30
7410: PUSH
7411: LD_INT 29
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 69
7443: ST_TO_ADDR
// if not station then
7444: LD_VAR 0 10
7448: NOT
7449: IFFALSE 7465
// begin SetFuel ( unit , 40 ) ;
7451: LD_VAR 0 1
7455: PPUSH
7456: LD_INT 40
7458: PPUSH
7459: CALL_OW 240
// continue ;
7463: GO 7335
// end ; status := 6 ;
7465: LD_ADDR_VAR 0 12
7469: PUSH
7470: LD_INT 6
7472: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 10
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 74
7492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7493: LD_INT 35
7495: PPUSH
7496: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7500: LD_VAR 0 1
7504: PPUSH
7505: LD_VAR 0 10
7509: PPUSH
7510: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 10
7523: PPUSH
7524: CALL_OW 296
7528: PUSH
7529: LD_INT 6
7531: LESS
7532: IFFALSE 7493
// SetFuel ( unit , 100 ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: LD_INT 100
7541: PPUSH
7542: CALL_OW 240
// status := 5 ;
7546: LD_ADDR_VAR 0 12
7550: PUSH
7551: LD_INT 5
7553: ST_TO_ADDR
// end ; if status = 1 then
7554: LD_VAR 0 12
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7938
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7564: LD_ADDR_VAR 0 13
7568: PUSH
7569: LD_INT 81
7571: PUSH
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 255
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 3
7588: PUSH
7589: LD_INT 21
7591: PUSH
7592: LD_INT 3
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 91
7605: PUSH
7606: LD_VAR 0 1
7610: PUSH
7611: LD_VAR 0 15
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 101
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 69
7641: ST_TO_ADDR
// for i in enemy do
7642: LD_ADDR_VAR 0 5
7646: PUSH
7647: LD_VAR 0 13
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7684
// if IsInvisible ( i ) then
7655: LD_VAR 0 5
7659: PPUSH
7660: CALL_OW 571
7664: IFFALSE 7682
// enemy := enemy diff i ;
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 13
7675: PUSH
7676: LD_VAR 0 5
7680: DIFF
7681: ST_TO_ADDR
7682: GO 7652
7684: POP
7685: POP
// if enemy then
7686: LD_VAR 0 13
7690: IFFALSE 7740
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 250
7706: PPUSH
7707: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7711: LD_VAR 0 1
7715: PPUSH
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 251
7725: PPUSH
7726: CALL_OW 232
// status = 2 ;
7730: LD_ADDR_VAR 0 12
7734: PUSH
7735: LD_INT 2
7737: ST_TO_ADDR
// end else
7738: GO 7938
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_VAR 0 11
7749: PUSH
7750: LD_INT 2
7752: ARRAY
7753: PUSH
7754: LD_INT 1
7756: ARRAY
7757: PPUSH
7758: LD_VAR 0 11
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PPUSH
7771: CALL_OW 307
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: CALL_OW 314
7785: NOT
7786: OR
7787: IFFALSE 7938
// begin wait ( 0 0$2 ) ;
7789: LD_INT 70
7791: PPUSH
7792: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7796: LD_VAR 0 11
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PUSH
7805: LD_INT 1
7807: PLUS
7808: PUSH
7809: LD_VAR 0 2
7813: GREATER
7814: IFFALSE 7839
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7816: LD_ADDR_VAR 0 11
7820: PUSH
7821: LD_VAR 0 11
7825: PPUSH
7826: LD_INT 1
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: CALL_OW 1
7836: ST_TO_ADDR
7837: GO 7870
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7839: LD_ADDR_VAR 0 11
7843: PUSH
7844: LD_VAR 0 11
7848: PPUSH
7849: LD_INT 1
7851: PPUSH
7852: LD_VAR 0 11
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: PUSH
7861: LD_INT 1
7863: PLUS
7864: PPUSH
7865: CALL_OW 1
7869: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7870: LD_ADDR_VAR 0 11
7874: PUSH
7875: LD_VAR 0 11
7879: PPUSH
7880: LD_INT 2
7882: PPUSH
7883: LD_VAR 0 2
7887: PUSH
7888: LD_VAR 0 11
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: ARRAY
7897: PPUSH
7898: CALL_OW 1
7902: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7903: LD_VAR 0 1
7907: PPUSH
7908: LD_VAR 0 11
7912: PUSH
7913: LD_INT 2
7915: ARRAY
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 11
7925: PUSH
7926: LD_INT 2
7928: ARRAY
7929: PUSH
7930: LD_INT 2
7932: ARRAY
7933: PPUSH
7934: CALL_OW 114
// end ; end ; end ; if status = 2 then
7938: LD_VAR 0 12
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 8167
// begin if GetLives ( unit ) < 650 and safe_place then
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 256
7957: PUSH
7958: LD_INT 650
7960: LESS
7961: PUSH
7962: LD_VAR 0 16
7966: AND
7967: IFFALSE 7979
// begin status = 3 ;
7969: LD_ADDR_VAR 0 12
7973: PUSH
7974: LD_INT 3
7976: ST_TO_ADDR
// continue ;
7977: GO 7335
// end ; x := GetRememberedX ( unit ) ;
7979: LD_ADDR_VAR 0 6
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 252
7993: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 253
8008: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8009: LD_ADDR_VAR 0 13
8013: PUSH
8014: LD_INT 81
8016: PUSH
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 255
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 92
8033: PUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_VAR 0 7
8043: PUSH
8044: LD_VAR 0 15
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 101
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: ST_TO_ADDR
// if enemy then
8075: LD_VAR 0 13
8079: IFFALSE 8150
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8081: LD_ADDR_VAR 0 14
8085: PUSH
8086: LD_VAR 0 13
8090: PPUSH
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 74
8100: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8101: LD_VAR 0 14
8105: PPUSH
8106: LD_VAR 0 6
8110: PPUSH
8111: LD_VAR 0 7
8115: PPUSH
8116: CALL_OW 297
8120: PUSH
8121: LD_VAR 0 15
8125: PUSH
8126: LD_VAR 0 17
8130: PLUS
8131: LESS
8132: IFFALSE 8148
// ComAttackUnit ( unit , e ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: LD_VAR 0 14
8143: PPUSH
8144: CALL_OW 115
// end else
8148: GO 8167
// begin ComStop ( unit ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: CALL_OW 141
// status = 5 ;
8159: LD_ADDR_VAR 0 12
8163: PUSH
8164: LD_INT 5
8166: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8167: LD_VAR 0 12
8171: PUSH
8172: LD_INT 3
8174: EQUAL
8175: PUSH
8176: LD_VAR 0 16
8180: AND
8181: IFFALSE 8267
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8183: LD_VAR 0 1
8187: PPUSH
8188: LD_VAR 0 16
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: LD_VAR 0 16
8201: PUSH
8202: LD_INT 2
8204: ARRAY
8205: PPUSH
8206: CALL_OW 111
// wait ( 0 0$1 ) ;
8210: LD_INT 35
8212: PPUSH
8213: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8217: LD_VAR 0 1
8221: PPUSH
8222: LD_VAR 0 16
8226: PUSH
8227: LD_INT 1
8229: ARRAY
8230: PPUSH
8231: LD_VAR 0 16
8235: PUSH
8236: LD_INT 2
8238: ARRAY
8239: PPUSH
8240: CALL_OW 297
8244: PUSH
8245: LD_INT 4
8247: LESS
8248: IFFALSE 8183
// ComStop ( unit ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 141
// status = 4 ;
8259: LD_ADDR_VAR 0 12
8263: PUSH
8264: LD_INT 4
8266: ST_TO_ADDR
// end ; if status = 4 then
8267: LD_VAR 0 12
8271: PUSH
8272: LD_INT 4
8274: EQUAL
8275: IFFALSE 8307
// begin repeat wait ( 0 0$1 ) ;
8277: LD_INT 35
8279: PPUSH
8280: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 256
8293: PUSH
8294: LD_INT 1000
8296: EQUAL
8297: IFFALSE 8277
// status = 5 ;
8299: LD_ADDR_VAR 0 12
8303: PUSH
8304: LD_INT 5
8306: ST_TO_ADDR
// end ; if status = 5 then
8307: LD_VAR 0 12
8311: PUSH
8312: LD_INT 5
8314: EQUAL
8315: IFFALSE 8597
// begin p := 999 ;
8317: LD_ADDR_VAR 0 9
8321: PUSH
8322: LD_INT 999
8324: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8325: LD_ADDR_VAR 0 14
8329: PUSH
8330: LD_VAR 0 11
8334: PUSH
8335: LD_INT 2
8337: ARRAY
8338: PUSH
8339: LD_INT 1
8341: ARRAY
8342: PUSH
8343: LD_VAR 0 11
8347: PUSH
8348: LD_INT 2
8350: ARRAY
8351: PUSH
8352: LD_INT 2
8354: ARRAY
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: ST_TO_ADDR
// c := 1 ;
8360: LD_ADDR_VAR 0 8
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8368: LD_ADDR_VAR 0 5
8372: PUSH
8373: DOUBLE
8374: LD_INT 1
8376: DEC
8377: ST_TO_ADDR
8378: LD_VAR 0 11
8382: PUSH
8383: LD_INT 2
8385: ARRAY
8386: PUSH
8387: LD_INT 2
8389: DIV
8390: PUSH
8391: FOR_TO
8392: IFFALSE 8524
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_VAR 0 1
8403: PPUSH
8404: LD_VAR 0 11
8408: PUSH
8409: LD_INT 2
8411: ARRAY
8412: PUSH
8413: LD_VAR 0 8
8417: ARRAY
8418: PPUSH
8419: LD_VAR 0 11
8423: PUSH
8424: LD_INT 2
8426: ARRAY
8427: PUSH
8428: LD_VAR 0 8
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: ARRAY
8437: PPUSH
8438: CALL_OW 297
8442: ST_TO_ADDR
// if x < p then
8443: LD_VAR 0 6
8447: PUSH
8448: LD_VAR 0 9
8452: LESS
8453: IFFALSE 8508
// begin p := x ;
8455: LD_ADDR_VAR 0 9
8459: PUSH
8460: LD_VAR 0 6
8464: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8465: LD_ADDR_VAR 0 14
8469: PUSH
8470: LD_VAR 0 11
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PUSH
8479: LD_VAR 0 8
8483: ARRAY
8484: PUSH
8485: LD_VAR 0 11
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PLUS
8502: ARRAY
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: ST_TO_ADDR
// end ; c = c + 2 ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: LD_VAR 0 8
8517: PUSH
8518: LD_INT 2
8520: PLUS
8521: ST_TO_ADDR
// end ;
8522: GO 8391
8524: POP
8525: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8526: LD_VAR 0 1
8530: PPUSH
8531: LD_VAR 0 14
8535: PUSH
8536: LD_INT 1
8538: ARRAY
8539: PPUSH
8540: LD_VAR 0 14
8544: PUSH
8545: LD_INT 2
8547: ARRAY
8548: PPUSH
8549: CALL_OW 111
// wait ( 0 0$1 ) ;
8553: LD_INT 35
8555: PPUSH
8556: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_VAR 0 14
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PPUSH
8574: LD_VAR 0 14
8578: PUSH
8579: LD_INT 2
8581: ARRAY
8582: PPUSH
8583: CALL_OW 307
8587: IFFALSE 8526
// status = 1 ;
8589: LD_ADDR_VAR 0 12
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 301
8606: IFFALSE 7335
// end ;
8608: LD_VAR 0 4
8612: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8613: LD_INT 0
8615: PPUSH
8616: PPUSH
8617: PPUSH
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
8622: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8623: LD_VAR 0 1
8627: NOT
8628: PUSH
8629: LD_VAR 0 3
8633: NOT
8634: OR
8635: PUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 0
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: IN
8655: NOT
8656: OR
8657: PUSH
8658: LD_VAR 0 6
8662: NOT
8663: OR
8664: PUSH
8665: LD_VAR 0 7
8669: NOT
8670: OR
8671: IFFALSE 8675
// exit ;
8673: GO 9066
// sex_id :=  ;
8675: LD_ADDR_VAR 0 14
8679: PUSH
8680: LD_STRING 
8682: ST_TO_ADDR
// case class of 1 :
8683: LD_VAR 0 5
8687: PUSH
8688: LD_INT 1
8690: DOUBLE
8691: EQUAL
8692: IFTRUE 8696
8694: GO 8707
8696: POP
// class_id := Sol ; 2 :
8697: LD_ADDR_VAR 0 15
8701: PUSH
8702: LD_STRING Sol
8704: ST_TO_ADDR
8705: GO 8765
8707: LD_INT 2
8709: DOUBLE
8710: EQUAL
8711: IFTRUE 8715
8713: GO 8726
8715: POP
// class_id := Eng ; 3 :
8716: LD_ADDR_VAR 0 15
8720: PUSH
8721: LD_STRING Eng
8723: ST_TO_ADDR
8724: GO 8765
8726: LD_INT 3
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8745
8734: POP
// class_id := Mech ; 4 :
8735: LD_ADDR_VAR 0 15
8739: PUSH
8740: LD_STRING Mech
8742: ST_TO_ADDR
8743: GO 8765
8745: LD_INT 4
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8764
8753: POP
// class_id := Sci ; end ;
8754: LD_ADDR_VAR 0 15
8758: PUSH
8759: LD_STRING Sci
8761: ST_TO_ADDR
8762: GO 8765
8764: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8765: LD_ADDR_VAR 0 11
8769: PUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 25
8777: PUSH
8778: LD_VAR 0 5
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PPUSH
8787: CALL_OW 72
8791: ST_TO_ADDR
// if tmp then
8792: LD_VAR 0 11
8796: IFFALSE 8808
// units := tmp ;
8798: LD_ADDR_VAR 0 1
8802: PUSH
8803: LD_VAR 0 11
8807: ST_TO_ADDR
// if sex then
8808: LD_VAR 0 4
8812: IFFALSE 8868
// begin if sex = sex_female then
8814: LD_VAR 0 4
8818: PUSH
8819: LD_INT 2
8821: EQUAL
8822: IFFALSE 8832
// sex_id := F ;
8824: LD_ADDR_VAR 0 14
8828: PUSH
8829: LD_STRING F
8831: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8832: LD_ADDR_VAR 0 1
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_INT 26
8844: PUSH
8845: LD_VAR 0 4
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 72
8858: ST_TO_ADDR
// if not units then
8859: LD_VAR 0 1
8863: NOT
8864: IFFALSE 8868
// exit ;
8866: GO 9066
// end ; unit_id := id ;
8868: LD_ADDR_VAR 0 12
8872: PUSH
8873: LD_VAR 0 6
8877: ST_TO_ADDR
// if unit_id > units then
8878: LD_VAR 0 12
8882: PUSH
8883: LD_VAR 0 1
8887: GREATER
8888: IFFALSE 8898
// unit_id := 1 ;
8890: LD_ADDR_VAR 0 12
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// if not units [ unit_id ] then
8898: LD_VAR 0 1
8902: PUSH
8903: LD_VAR 0 12
8907: ARRAY
8908: NOT
8909: IFFALSE 8913
// exit ;
8911: GO 9066
// unit := units [ unit_id ] ;
8913: LD_ADDR_VAR 0 10
8917: PUSH
8918: LD_VAR 0 1
8922: PUSH
8923: LD_VAR 0 12
8927: ARRAY
8928: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8929: LD_ADDR_VAR 0 13
8933: PUSH
8934: LD_STRING D
8936: PUSH
8937: LD_VAR 0 3
8941: STR
8942: PUSH
8943: LD_STRING -
8945: STR
8946: PUSH
8947: LD_VAR 0 14
8951: STR
8952: PUSH
8953: LD_VAR 0 15
8957: STR
8958: PUSH
8959: LD_VAR 0 6
8963: STR
8964: PUSH
8965: LD_STRING -
8967: STR
8968: PUSH
8969: LD_VAR 0 7
8973: STR
8974: ST_TO_ADDR
// case type of 0 :
8975: LD_VAR 0 2
8979: PUSH
8980: LD_INT 0
8982: DOUBLE
8983: EQUAL
8984: IFTRUE 8988
8986: GO 9005
8988: POP
// Say ( unit , dialog_id ) ; 1 :
8989: LD_VAR 0 10
8993: PPUSH
8994: LD_VAR 0 13
8998: PPUSH
8999: CALL_OW 88
9003: GO 9056
9005: LD_INT 1
9007: DOUBLE
9008: EQUAL
9009: IFTRUE 9013
9011: GO 9030
9013: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9014: LD_VAR 0 10
9018: PPUSH
9019: LD_VAR 0 13
9023: PPUSH
9024: CALL_OW 94
9028: GO 9056
9030: LD_INT 2
9032: DOUBLE
9033: EQUAL
9034: IFTRUE 9038
9036: GO 9055
9038: POP
// ForceSay ( unit , dialog_id ) ; end ;
9039: LD_VAR 0 10
9043: PPUSH
9044: LD_VAR 0 13
9048: PPUSH
9049: CALL_OW 91
9053: GO 9056
9055: POP
// result := unit ;
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: LD_VAR 0 10
9065: ST_TO_ADDR
// end ;
9066: LD_VAR 0 8
9070: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9071: LD_INT 0
9073: PPUSH
9074: PPUSH
9075: PPUSH
// result := false ;
9076: LD_ADDR_VAR 0 4
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9084: LD_VAR 0 1
9088: NOT
9089: PUSH
9090: LD_VAR 0 2
9094: NOT
9095: OR
9096: PUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 310
9106: OR
9107: IFFALSE 9111
// exit ;
9109: GO 9315
// if distance < 0 then
9111: LD_VAR 0 3
9115: PUSH
9116: LD_INT 0
9118: LESS
9119: IFFALSE 9129
// distance := 0 ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9129: LD_ADDR_VAR 0 6
9133: PUSH
9134: LD_VAR 0 2
9138: PPUSH
9139: CALL_OW 266
9143: PPUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 250
9153: PPUSH
9154: LD_VAR 0 2
9158: PPUSH
9159: CALL_OW 251
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 254
9173: PPUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 248
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: CALL 51250 0 6
9191: ST_TO_ADDR
// if not entrance then
9192: LD_VAR 0 6
9196: NOT
9197: IFFALSE 9201
// exit ;
9199: GO 9315
// for i in entrance do
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: LD_VAR 0 6
9210: PUSH
9211: FOR_IN
9212: IFFALSE 9313
// begin if not distance then
9214: LD_VAR 0 3
9218: NOT
9219: IFFALSE 9264
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_VAR 0 5
9230: PUSH
9231: LD_INT 1
9233: ARRAY
9234: PPUSH
9235: LD_VAR 0 5
9239: PUSH
9240: LD_INT 2
9242: ARRAY
9243: PPUSH
9244: CALL_OW 307
9248: IFFALSE 9262
// begin result := true ;
9250: LD_ADDR_VAR 0 4
9254: PUSH
9255: LD_INT 1
9257: ST_TO_ADDR
// exit ;
9258: POP
9259: POP
9260: GO 9315
// end ; end else
9262: GO 9311
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9264: LD_VAR 0 1
9268: PPUSH
9269: LD_VAR 0 5
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: LD_VAR 0 5
9282: PUSH
9283: LD_INT 2
9285: ARRAY
9286: PPUSH
9287: CALL_OW 297
9291: PUSH
9292: LD_VAR 0 3
9296: LESSEQUAL
9297: IFFALSE 9311
// begin result := true ;
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// exit ;
9307: POP
9308: POP
9309: GO 9315
// end ; end ; end ;
9311: GO 9211
9313: POP
9314: POP
// end ;
9315: LD_VAR 0 4
9319: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9320: LD_INT 0
9322: PPUSH
9323: PPUSH
9324: PPUSH
// result := false ;
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: LD_INT 0
9332: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9333: LD_VAR 0 1
9337: NOT
9338: PUSH
9339: LD_VAR 0 2
9343: NOT
9344: OR
9345: PUSH
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 302
9355: NOT
9356: OR
9357: PUSH
9358: LD_VAR 0 2
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: OR
9369: IFFALSE 9373
// exit ;
9371: GO 9534
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 81
9380: PUSH
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 255
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 3
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 69
9420: PPUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 74
9430: PPUSH
9431: CALL_OW 296
9435: PUSH
9436: LD_INT 8
9438: LESS
9439: IFFALSE 9443
// exit ;
9441: GO 9534
// building := IsInUnit ( unit2 ) ;
9443: LD_ADDR_VAR 0 5
9447: PUSH
9448: LD_VAR 0 2
9452: PPUSH
9453: CALL_OW 310
9457: ST_TO_ADDR
// if building then
9458: LD_VAR 0 5
9462: IFFALSE 9489
// result := IsNearbyEntrance ( unit , building , 2 ) else
9464: LD_ADDR_VAR 0 3
9468: PUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: LD_VAR 0 5
9478: PPUSH
9479: LD_INT 2
9481: PPUSH
9482: CALL 9071 0 3
9486: ST_TO_ADDR
9487: GO 9534
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: LD_VAR 0 1
9498: PPUSH
9499: LD_VAR 0 2
9503: PPUSH
9504: CALL_OW 296
9508: PUSH
9509: LD_INT 6
9511: LESS
9512: PUSH
9513: LD_VAR 0 2
9517: PPUSH
9518: CALL_OW 255
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 292
9532: AND
9533: ST_TO_ADDR
// end ;
9534: LD_VAR 0 3
9538: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9539: LD_INT 0
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
// uc_side = 0 ;
9545: LD_ADDR_OWVAR 20
9549: PUSH
9550: LD_INT 0
9552: ST_TO_ADDR
// uc_nation = 0 ;
9553: LD_ADDR_OWVAR 21
9557: PUSH
9558: LD_INT 0
9560: ST_TO_ADDR
// nat_area := nature_area ;
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: LD_INT 24
9568: ST_TO_ADDR
// InitHc ;
9569: CALL_OW 19
// for i = 1 to 4 do
9573: LD_ADDR_VAR 0 2
9577: PUSH
9578: DOUBLE
9579: LD_INT 1
9581: DEC
9582: ST_TO_ADDR
9583: LD_INT 4
9585: PUSH
9586: FOR_TO
9587: IFFALSE 9634
// begin hc_class = 18 ;
9589: LD_ADDR_OWVAR 28
9593: PUSH
9594: LD_INT 18
9596: ST_TO_ADDR
// hc_gallery =  ;
9597: LD_ADDR_OWVAR 33
9601: PUSH
9602: LD_STRING 
9604: ST_TO_ADDR
// animal := CreateHuman ;
9605: LD_ADDR_VAR 0 3
9609: PUSH
9610: CALL_OW 44
9614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9615: LD_VAR 0 3
9619: PPUSH
9620: LD_VAR 0 4
9624: PPUSH
9625: LD_INT 0
9627: PPUSH
9628: CALL_OW 49
// end ;
9632: GO 9586
9634: POP
9635: POP
// for i = 1 to 3 do
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: DOUBLE
9642: LD_INT 1
9644: DEC
9645: ST_TO_ADDR
9646: LD_INT 3
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9744
// begin hc_class = class_apeman ;
9652: LD_ADDR_OWVAR 28
9656: PUSH
9657: LD_INT 12
9659: ST_TO_ADDR
// hc_gallery =  ;
9660: LD_ADDR_OWVAR 33
9664: PUSH
9665: LD_STRING 
9667: ST_TO_ADDR
// hc_agressivity = 0 ;
9668: LD_ADDR_OWVAR 35
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9676: LD_ADDR_OWVAR 31
9680: PUSH
9681: LD_INT 1
9683: PPUSH
9684: LD_INT 3
9686: PPUSH
9687: CALL_OW 12
9691: PUSH
9692: LD_INT 1
9694: PPUSH
9695: LD_INT 3
9697: PPUSH
9698: CALL_OW 12
9702: PUSH
9703: LD_INT 0
9705: PUSH
9706: LD_INT 0
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: ST_TO_ADDR
// animal := CreateHuman ;
9715: LD_ADDR_VAR 0 3
9719: PUSH
9720: CALL_OW 44
9724: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: LD_INT 0
9737: PPUSH
9738: CALL_OW 49
// end ;
9742: GO 9649
9744: POP
9745: POP
// for i = 1 to 3 do
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: DOUBLE
9752: LD_INT 1
9754: DEC
9755: ST_TO_ADDR
9756: LD_INT 3
9758: PUSH
9759: FOR_TO
9760: IFFALSE 9807
// begin hc_class = 13 ;
9762: LD_ADDR_OWVAR 28
9766: PUSH
9767: LD_INT 13
9769: ST_TO_ADDR
// hc_gallery =  ;
9770: LD_ADDR_OWVAR 33
9774: PUSH
9775: LD_STRING 
9777: ST_TO_ADDR
// animal := CreateHuman ;
9778: LD_ADDR_VAR 0 3
9782: PUSH
9783: CALL_OW 44
9787: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_VAR 0 4
9797: PPUSH
9798: LD_INT 0
9800: PPUSH
9801: CALL_OW 49
// end ;
9805: GO 9759
9807: POP
9808: POP
// for i = 1 to 3 do
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: DOUBLE
9815: LD_INT 1
9817: DEC
9818: ST_TO_ADDR
9819: LD_INT 3
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9868
// begin hc_class = 20 ;
9825: LD_ADDR_OWVAR 28
9829: PUSH
9830: LD_INT 20
9832: ST_TO_ADDR
// hc_gallery =  ;
9833: LD_ADDR_OWVAR 33
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// animal := CreateHuman ;
9841: LD_ADDR_VAR 0 3
9845: PUSH
9846: CALL_OW 44
9850: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 4
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: CALL_OW 49
// end ;
9866: GO 9822
9868: POP
9869: POP
// end ; end_of_file
9870: LD_VAR 0 1
9874: RET
// export function Action ; begin
9875: LD_INT 0
9877: PPUSH
// InGameOn ;
9878: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9882: LD_EXP 15
9886: PPUSH
9887: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9891: LD_EXP 15
9895: PPUSH
9896: LD_STRING D1-JMM-1
9898: PPUSH
9899: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9903: LD_EXP 16
9907: PPUSH
9908: LD_STRING D1-Roth-1
9910: PPUSH
9911: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9915: LD_EXP 15
9919: PPUSH
9920: LD_STRING D1-JMM-2
9922: PPUSH
9923: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9927: LD_EXP 16
9931: PPUSH
9932: LD_STRING D1-Roth-2
9934: PPUSH
9935: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9939: LD_EXP 15
9943: PPUSH
9944: LD_STRING D1-JMM-3
9946: PPUSH
9947: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9951: LD_EXP 16
9955: PPUSH
9956: LD_STRING D1-Roth-3
9958: PPUSH
9959: CALL_OW 88
// ComInvisible ( Roth ) ;
9963: LD_EXP 16
9967: PPUSH
9968: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9972: LD_INT 46
9974: PPUSH
9975: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9979: LD_EXP 15
9983: PPUSH
9984: LD_STRING D1-JMM-4
9986: PPUSH
9987: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9991: LD_INT 10
9993: PPUSH
9994: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9998: LD_EXP 16
10002: PPUSH
10003: LD_EXP 15
10007: PPUSH
10008: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
10012: LD_EXP 15
10016: PPUSH
10017: LD_STRING D1-JMM-4a
10019: PPUSH
10020: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
10024: LD_EXP 16
10028: PPUSH
10029: LD_STRING D1-Roth-4
10031: PPUSH
10032: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-JMM-5
10043: PPUSH
10044: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10048: LD_EXP 16
10052: PPUSH
10053: LD_STRING D1-Roth-5
10055: PPUSH
10056: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10060: LD_EXP 15
10064: PPUSH
10065: LD_STRING D1-JMM-6
10067: PPUSH
10068: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10072: LD_EXP 16
10076: PPUSH
10077: LD_STRING D1-Roth-6
10079: PPUSH
10080: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10084: LD_EXP 15
10088: PPUSH
10089: LD_STRING D1-JMM-7
10091: PPUSH
10092: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10096: LD_EXP 17
10100: PPUSH
10101: LD_EXP 15
10105: PPUSH
10106: CALL_OW 250
10110: PPUSH
10111: LD_EXP 15
10115: PPUSH
10116: CALL_OW 251
10120: PPUSH
10121: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10125: LD_EXP 16
10129: PPUSH
10130: LD_STRING D1-Roth-7
10132: PPUSH
10133: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10144: LD_EXP 17
10148: PPUSH
10149: LD_EXP 15
10153: PPUSH
10154: CALL_OW 296
10158: PUSH
10159: LD_INT 6
10161: LESS
10162: IFFALSE 10137
// ComTurnUnit ( Powell , JMM ) ;
10164: LD_EXP 17
10168: PPUSH
10169: LD_EXP 15
10173: PPUSH
10174: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10178: LD_EXP 17
10182: PPUSH
10183: LD_STRING D1-Pow-7
10185: PPUSH
10186: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10190: LD_EXP 15
10194: PPUSH
10195: LD_EXP 17
10199: PPUSH
10200: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10204: LD_EXP 16
10208: PPUSH
10209: LD_EXP 17
10213: PPUSH
10214: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10218: LD_EXP 15
10222: PPUSH
10223: LD_STRING D1-JMM-8
10225: PPUSH
10226: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10230: LD_EXP 17
10234: PPUSH
10235: LD_STRING D1-Pow-8
10237: PPUSH
10238: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10242: LD_EXP 15
10246: PPUSH
10247: LD_STRING D1-JMM-9
10249: PPUSH
10250: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10254: LD_EXP 17
10258: PPUSH
10259: LD_INT 124
10261: PPUSH
10262: LD_INT 61
10264: PPUSH
10265: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10269: LD_INT 35
10271: PPUSH
10272: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10276: LD_EXP 15
10280: PPUSH
10281: LD_EXP 17
10285: PPUSH
10286: CALL_OW 296
10290: PUSH
10291: LD_INT 6
10293: GREATER
10294: IFFALSE 10269
// SayRadio ( Powell , D1-Pow-9 ) ;
10296: LD_EXP 17
10300: PPUSH
10301: LD_STRING D1-Pow-9
10303: PPUSH
10304: CALL_OW 94
// RemoveUnit ( Powell ) ;
10308: LD_EXP 17
10312: PPUSH
10313: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10317: LD_EXP 17
10321: PPUSH
10322: LD_INT 18
10324: PPUSH
10325: CALL_OW 52
// if Joan and not Joan in selected then
10329: LD_EXP 37
10333: PUSH
10334: LD_EXP 37
10338: PUSH
10339: LD_EXP 3
10343: IN
10344: NOT
10345: AND
10346: IFFALSE 10360
// SayRadio ( Joan , D1-Joan-9 ) ;
10348: LD_EXP 37
10352: PPUSH
10353: LD_STRING D1-Joan-9
10355: PPUSH
10356: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10360: LD_EXP 16
10364: PPUSH
10365: LD_EXP 15
10369: PPUSH
10370: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10374: LD_EXP 15
10378: PPUSH
10379: LD_EXP 16
10383: PPUSH
10384: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10388: LD_EXP 16
10392: PPUSH
10393: LD_STRING D1-Roth-9
10395: PPUSH
10396: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10400: LD_EXP 15
10404: PPUSH
10405: LD_STRING D1-JMM-10
10407: PPUSH
10408: CALL_OW 88
// InGameOff ;
10412: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10416: LD_STRING M1
10418: PPUSH
10419: CALL_OW 337
// if Difficulty < 3 then
10423: LD_OWVAR 67
10427: PUSH
10428: LD_INT 3
10430: LESS
10431: IFFALSE 10443
// ChangeSideFog ( 4 , 7 ) ;
10433: LD_INT 4
10435: PPUSH
10436: LD_INT 7
10438: PPUSH
10439: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10443: LD_STRING enableBioCharacter(BIO_ROTH)
10445: PPUSH
10446: CALL_OW 559
// SaveForQuickRestart ;
10450: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10454: LD_INT 7
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 80
// wait ( 0 0$3 ) ;
10470: LD_INT 105
10472: PPUSH
10473: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10477: LD_EXP 16
10481: PPUSH
10482: LD_INT 124
10484: PPUSH
10485: LD_INT 18
10487: PPUSH
10488: CALL_OW 111
// AddComInvisible ( Roth ) ;
10492: LD_EXP 16
10496: PPUSH
10497: CALL_OW 212
// wait ( 0 0$30 ) ;
10501: LD_INT 1050
10503: PPUSH
10504: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10508: LD_EXP 16
10512: PPUSH
10513: LD_INT 2100
10515: PPUSH
10516: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10520: LD_EXP 16
10524: PPUSH
10525: LD_INT 156
10527: PPUSH
10528: LD_INT 20
10530: PPUSH
10531: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10535: LD_EXP 16
10539: PPUSH
10540: LD_INT 178
10542: PPUSH
10543: LD_INT 42
10545: PPUSH
10546: CALL_OW 171
// AddComInvisible ( Roth ) ;
10550: LD_EXP 16
10554: PPUSH
10555: CALL_OW 212
// end ;
10559: LD_VAR 0 1
10563: RET
// every 0 0$1 do var i , tmp ;
10564: GO 10566
10566: DISABLE
10567: LD_INT 0
10569: PPUSH
10570: PPUSH
// begin tmp := selected union friends ;
10571: LD_ADDR_VAR 0 2
10575: PUSH
10576: LD_EXP 3
10580: PUSH
10581: LD_EXP 4
10585: UNION
10586: ST_TO_ADDR
// if gamma_commander = 1 then
10587: LD_EXP 10
10591: PUSH
10592: LD_INT 1
10594: EQUAL
10595: IFFALSE 10613
// tmp := tmp union Donaldson ;
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_VAR 0 2
10606: PUSH
10607: LD_EXP 25
10611: UNION
10612: ST_TO_ADDR
// if gamma_commander = 2 then
10613: LD_EXP 10
10617: PUSH
10618: LD_INT 2
10620: EQUAL
10621: IFFALSE 10639
// tmp := tmp union Brown ;
10623: LD_ADDR_VAR 0 2
10627: PUSH
10628: LD_VAR 0 2
10632: PUSH
10633: LD_EXP 29
10637: UNION
10638: ST_TO_ADDR
// if not tmp then
10639: LD_VAR 0 2
10643: NOT
10644: IFFALSE 10648
// exit ;
10646: GO 10720
// repeat wait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 67
// for i in tmp do
10655: LD_ADDR_VAR 0 1
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: FOR_IN
10666: IFFALSE 10711
// if CanSpot ( JMM , i ) then
10668: LD_EXP 15
10672: PPUSH
10673: LD_VAR 0 1
10677: PPUSH
10678: CALL 9320 0 2
10682: IFFALSE 10709
// begin tmp := tmp diff i ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: DIFF
10699: ST_TO_ADDR
// Spot ( i ) ;
10700: LD_VAR 0 1
10704: PPUSH
10705: CALL 10723 0 1
// end ;
10709: GO 10665
10711: POP
10712: POP
// until not tmp ;
10713: LD_VAR 0 2
10717: NOT
10718: IFFALSE 10648
// end ;
10720: PPOPN 2
10722: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10723: LD_INT 0
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10729: LD_VAR 0 1
10733: NOT
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PUSH
10745: LD_INT 4
10747: NONEQUAL
10748: OR
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 555
10759: OR
10760: PUSH
10761: LD_VAR 0 1
10765: PPUSH
10766: CALL_OW 302
10770: NOT
10771: OR
10772: IFFALSE 10776
// exit ;
10774: GO 12686
// InGameOn ;
10776: CALL_OW 8
// side := 7 ;
10780: LD_ADDR_VAR 0 4
10784: PUSH
10785: LD_INT 7
10787: ST_TO_ADDR
// joined := false ;
10788: LD_ADDR_VAR 0 5
10792: PUSH
10793: LD_INT 0
10795: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 310
10810: ST_TO_ADDR
// if building then
10811: LD_VAR 0 3
10815: IFFALSE 10874
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10817: LD_EXP 15
10821: PPUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: CALL_OW 255
10831: PPUSH
10832: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10836: LD_EXP 15
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: CALL_OW 120
// repeat wait ( 3 ) ;
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 67
// until IsInUnit ( JMM ) ;
10857: LD_EXP 15
10861: PPUSH
10862: CALL_OW 310
10866: IFFALSE 10850
// DialogueOn ;
10868: CALL_OW 6
// end else
10872: GO 10906
// begin ComTurnUnit ( JMM , unit ) ;
10874: LD_EXP 15
10878: PPUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10888: LD_VAR 0 1
10892: PPUSH
10893: LD_EXP 15
10897: PPUSH
10898: CALL_OW 119
// DialogueOn ;
10902: CALL_OW 6
// end ; if unit = Joan then
10906: LD_VAR 0 1
10910: PUSH
10911: LD_EXP 37
10915: EQUAL
10916: IFFALSE 11026
// begin joined := true ;
10918: LD_ADDR_VAR 0 5
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if Joan in selected then
10926: LD_EXP 37
10930: PUSH
10931: LD_EXP 3
10935: IN
10936: IFFALSE 10964
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10938: LD_EXP 37
10942: PPUSH
10943: LD_STRING D3-Joan-Joan-1
10945: PPUSH
10946: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10950: LD_EXP 15
10954: PPUSH
10955: LD_STRING D3-Joan-JMM-1
10957: PPUSH
10958: CALL_OW 88
// end else
10962: GO 11024
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10964: LD_EXP 37
10968: PPUSH
10969: LD_STRING D4-Joan-Joan-1
10971: PPUSH
10972: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10976: LD_EXP 15
10980: PPUSH
10981: LD_STRING D4-Joan-JMM-1
10983: PPUSH
10984: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10988: LD_EXP 37
10992: PPUSH
10993: LD_STRING D4-Joan-Joan-2
10995: PPUSH
10996: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
11000: LD_EXP 15
11004: PPUSH
11005: LD_STRING D4-Joan-JMM-2
11007: PPUSH
11008: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
11012: LD_EXP 37
11016: PPUSH
11017: LD_STRING D4-Joan-Joan-3
11019: PPUSH
11020: CALL_OW 88
// end ; end else
11024: GO 12494
// if unit = Lisa then
11026: LD_VAR 0 1
11030: PUSH
11031: LD_EXP 24
11035: EQUAL
11036: IFFALSE 11228
// begin if Lisa in selected then
11038: LD_EXP 24
11042: PUSH
11043: LD_EXP 3
11047: IN
11048: IFFALSE 11161
// begin if GetSide ( Joan ) = 7 then
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 255
11059: PUSH
11060: LD_INT 7
11062: EQUAL
11063: IFFALSE 11127
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11065: LD_EXP 24
11069: PPUSH
11070: LD_STRING D3-LisaJ-Lisa-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11077: LD_EXP 15
11081: PPUSH
11082: LD_STRING D3-LisaJ-JMM-1
11084: PPUSH
11085: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11089: LD_EXP 24
11093: PPUSH
11094: LD_STRING D3-LisaJ-Lisa-2
11096: PPUSH
11097: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11101: LD_EXP 15
11105: PPUSH
11106: LD_STRING D3-LisaJ-JMM-2
11108: PPUSH
11109: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11113: LD_EXP 24
11117: PPUSH
11118: LD_STRING D3-LisaJ-Lisa-3
11120: PPUSH
11121: CALL_OW 88
// end else
11125: GO 11159
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11127: LD_EXP 24
11131: PPUSH
11132: LD_STRING D3-LisaL-Lisa-1
11134: PPUSH
11135: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11139: LD_EXP 15
11143: PPUSH
11144: LD_STRING D3-LisaL-JMM-1
11146: PPUSH
11147: CALL_OW 88
// joined := true ;
11151: LD_ADDR_VAR 0 5
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// end ; end else
11159: GO 11226
// begin if GetSide ( Joan ) = 7 then
11161: LD_EXP 37
11165: PPUSH
11166: CALL_OW 255
11170: PUSH
11171: LD_INT 7
11173: EQUAL
11174: IFFALSE 11214
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11176: LD_EXP 24
11180: PPUSH
11181: LD_STRING D4-LisaJ-Lisa-1
11183: PPUSH
11184: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11188: LD_EXP 15
11192: PPUSH
11193: LD_STRING D4-LisaJ-JMM-1
11195: PPUSH
11196: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11200: LD_EXP 24
11204: PPUSH
11205: LD_STRING D4-LisaJ-Lisa-2
11207: PPUSH
11208: CALL_OW 88
// end else
11212: GO 11226
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11214: LD_EXP 24
11218: PPUSH
11219: LD_STRING D4-LisaL-Lisa-1
11221: PPUSH
11222: CALL_OW 88
// end ; end ; end else
11226: GO 12494
// if unit = Frank then
11228: LD_VAR 0 1
11232: PUSH
11233: LD_EXP 34
11237: EQUAL
11238: IFFALSE 11378
// begin joined := true ;
11240: LD_ADDR_VAR 0 5
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// if Frank in selected then
11248: LD_EXP 34
11252: PUSH
11253: LD_EXP 3
11257: IN
11258: IFFALSE 11328
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11260: LD_EXP 34
11264: PPUSH
11265: LD_STRING D3-Frank-Frank-1
11267: PPUSH
11268: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11272: LD_EXP 15
11276: PPUSH
11277: LD_STRING D3-Frank-JMM-1
11279: PPUSH
11280: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11284: LD_EXP 34
11288: PPUSH
11289: LD_STRING D3-Frank-Frank-2
11291: PPUSH
11292: CALL_OW 88
// if reached_lab then
11296: LD_EXP 5
11300: IFFALSE 11326
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11302: LD_EXP 15
11306: PPUSH
11307: LD_STRING D3-Frank-JMM-2
11309: PPUSH
11310: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11314: LD_EXP 34
11318: PPUSH
11319: LD_STRING D3-Frank-Frank-3
11321: PPUSH
11322: CALL_OW 88
// end ; end else
11326: GO 11376
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11328: LD_EXP 34
11332: PPUSH
11333: LD_STRING D4-Frank-Frank-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11340: LD_EXP 15
11344: PPUSH
11345: LD_STRING D4-Frank-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11352: LD_EXP 34
11356: PPUSH
11357: LD_STRING D4-Frank-Frank-2
11359: PPUSH
11360: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11364: LD_EXP 15
11368: PPUSH
11369: LD_STRING D4-Frank-JMM-2
11371: PPUSH
11372: CALL_OW 88
// end ; end else
11376: GO 12494
// if unit = Brown then
11378: LD_VAR 0 1
11382: PUSH
11383: LD_EXP 29
11387: EQUAL
11388: IFFALSE 11484
// begin if Brown in selected or gamma_commander = 2 then
11390: LD_EXP 29
11394: PUSH
11395: LD_EXP 3
11399: IN
11400: PUSH
11401: LD_EXP 10
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: OR
11410: IFFALSE 11446
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11412: LD_EXP 29
11416: PPUSH
11417: LD_STRING D3-Soldier1-Sol1-1
11419: PPUSH
11420: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11424: LD_EXP 15
11428: PPUSH
11429: LD_STRING D6-JMM-Brown-1
11431: PPUSH
11432: CALL_OW 88
// joined := true ;
11436: LD_ADDR_VAR 0 5
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// end else
11444: GO 11482
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11446: LD_EXP 29
11450: PPUSH
11451: LD_STRING D4-Soldier2-Sol1-1
11453: PPUSH
11454: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11458: LD_EXP 15
11462: PPUSH
11463: LD_STRING D4-Soldier1-JMM-1
11465: PPUSH
11466: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11470: LD_EXP 29
11474: PPUSH
11475: LD_STRING D4-Soldier2-Sol1-2
11477: PPUSH
11478: CALL_OW 88
// end ; end else
11482: GO 12494
// if unit = Donaldson then
11484: LD_VAR 0 1
11488: PUSH
11489: LD_EXP 25
11493: EQUAL
11494: IFFALSE 11590
// begin if Donaldson in selected or gamma_commander = 1 then
11496: LD_EXP 25
11500: PUSH
11501: LD_EXP 3
11505: IN
11506: PUSH
11507: LD_EXP 10
11511: PUSH
11512: LD_INT 1
11514: EQUAL
11515: OR
11516: IFFALSE 11552
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11518: LD_EXP 25
11522: PPUSH
11523: LD_STRING D3-Soldier2-FSol2-1
11525: PPUSH
11526: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11530: LD_EXP 15
11534: PPUSH
11535: LD_STRING D3-Soldier2-JMM-1
11537: PPUSH
11538: CALL_OW 88
// joined := true ;
11542: LD_ADDR_VAR 0 5
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// end else
11550: GO 11588
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11552: LD_EXP 25
11556: PPUSH
11557: LD_STRING D4-Soldier1-FSol1-1
11559: PPUSH
11560: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11564: LD_EXP 15
11568: PPUSH
11569: LD_STRING D4-Soldier1-JMM-1
11571: PPUSH
11572: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11576: LD_EXP 25
11580: PPUSH
11581: LD_STRING D4-Soldier1-FSol1-2
11583: PPUSH
11584: CALL_OW 88
// end ; end else
11588: GO 12494
// if unit = Cyrus then
11590: LD_VAR 0 1
11594: PUSH
11595: LD_EXP 27
11599: EQUAL
11600: IFFALSE 11674
// begin if Cyrus in selected then
11602: LD_EXP 27
11606: PUSH
11607: LD_EXP 3
11611: IN
11612: IFFALSE 11648
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11614: LD_EXP 27
11618: PPUSH
11619: LD_STRING D3-Cyrus-Cyrus-1
11621: PPUSH
11622: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11626: LD_EXP 15
11630: PPUSH
11631: LD_STRING D3-Cyrus-JMM-1
11633: PPUSH
11634: CALL_OW 88
// joined := true ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// end else
11646: GO 11672
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11648: LD_EXP 27
11652: PPUSH
11653: LD_STRING D4-Cyrus-Cyrus-1
11655: PPUSH
11656: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11660: LD_EXP 15
11664: PPUSH
11665: LD_STRING D4-Cyrus-JMM-1
11667: PPUSH
11668: CALL_OW 88
// end ; end else
11672: GO 12494
// if unit = Bobby then
11674: LD_VAR 0 1
11678: PUSH
11679: LD_EXP 26
11683: EQUAL
11684: IFFALSE 11770
// begin if Bobby in selected then
11686: LD_EXP 26
11690: PUSH
11691: LD_EXP 3
11695: IN
11696: IFFALSE 11732
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11698: LD_EXP 26
11702: PPUSH
11703: LD_STRING D3-Bobby-Bobby-1
11705: PPUSH
11706: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11710: LD_EXP 15
11714: PPUSH
11715: LD_STRING D3-Bobby-JMM-1
11717: PPUSH
11718: CALL_OW 88
// joined := true ;
11722: LD_ADDR_VAR 0 5
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// end else
11730: GO 11768
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11732: LD_EXP 26
11736: PPUSH
11737: LD_STRING D4-Bobby-Bobby-1
11739: PPUSH
11740: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11744: LD_EXP 15
11748: PPUSH
11749: LD_STRING D4-Bobby-JMM-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11756: LD_EXP 26
11760: PPUSH
11761: LD_STRING D4-Bobby-Bobby-2
11763: PPUSH
11764: CALL_OW 88
// end ; end else
11768: GO 12494
// if unit = Cornel then
11770: LD_VAR 0 1
11774: PUSH
11775: LD_EXP 32
11779: EQUAL
11780: IFFALSE 11878
// begin if Cornel in selected then
11782: LD_EXP 32
11786: PUSH
11787: LD_EXP 3
11791: IN
11792: IFFALSE 11840
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11794: LD_EXP 32
11798: PPUSH
11799: LD_STRING D3-Mark-Corn-1
11801: PPUSH
11802: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11806: LD_EXP 15
11810: PPUSH
11811: LD_STRING D3-Mark-JMM-1
11813: PPUSH
11814: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11818: LD_EXP 32
11822: PPUSH
11823: LD_STRING D3-Mark-Corn-2
11825: PPUSH
11826: CALL_OW 88
// joined := true ;
11830: LD_ADDR_VAR 0 5
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// end else
11838: GO 11876
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11840: LD_EXP 32
11844: PPUSH
11845: LD_STRING D4-Mark-Corn-1
11847: PPUSH
11848: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11852: LD_EXP 15
11856: PPUSH
11857: LD_STRING D4-Mark-JMM-1
11859: PPUSH
11860: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11864: LD_EXP 32
11868: PPUSH
11869: LD_STRING D4-Mark-Corn-2
11871: PPUSH
11872: CALL_OW 88
// end ; end else
11876: GO 12494
// if unit = Gary then
11878: LD_VAR 0 1
11882: PUSH
11883: LD_EXP 33
11887: EQUAL
11888: IFFALSE 11986
// begin if Gary in selected then
11890: LD_EXP 33
11894: PUSH
11895: LD_EXP 3
11899: IN
11900: IFFALSE 11936
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11902: LD_EXP 33
11906: PPUSH
11907: LD_STRING D3-Gary-Gary-1
11909: PPUSH
11910: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11914: LD_EXP 15
11918: PPUSH
11919: LD_STRING D3-Gary-JMM-1
11921: PPUSH
11922: CALL_OW 88
// joined := true ;
11926: LD_ADDR_VAR 0 5
11930: PUSH
11931: LD_INT 1
11933: ST_TO_ADDR
// end else
11934: GO 11984
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11936: LD_EXP 33
11940: PPUSH
11941: LD_STRING D4-Gary-Gary-1
11943: PPUSH
11944: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11948: LD_EXP 33
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 235
// DialogueOff ;
11960: CALL_OW 7
// InGameOff ;
11964: CALL_OW 9
// SetSide ( JMM , side ) ;
11968: LD_EXP 15
11972: PPUSH
11973: LD_VAR 0 4
11977: PPUSH
11978: CALL_OW 235
// exit ;
11982: GO 12686
// end ; end else
11984: GO 12494
// if unit = Kikuchi then
11986: LD_VAR 0 1
11990: PUSH
11991: LD_EXP 35
11995: EQUAL
11996: IFFALSE 12094
// begin if Kikuchi in selected then
11998: LD_EXP 35
12002: PUSH
12003: LD_EXP 3
12007: IN
12008: IFFALSE 12044
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
12010: LD_EXP 35
12014: PPUSH
12015: LD_STRING D3-Yamako-Yam-1
12017: PPUSH
12018: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12022: LD_EXP 15
12026: PPUSH
12027: LD_STRING D3-Soldier2-JMM-1
12029: PPUSH
12030: CALL_OW 88
// joined := true ;
12034: LD_ADDR_VAR 0 5
12038: PUSH
12039: LD_INT 1
12041: ST_TO_ADDR
// end else
12042: GO 12092
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
12044: LD_EXP 35
12048: PPUSH
12049: LD_STRING D4-Yamako-Yam-1
12051: PPUSH
12052: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12056: LD_EXP 35
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 235
// DialogueOff ;
12068: CALL_OW 7
// InGameOff ;
12072: CALL_OW 9
// SetSide ( JMM , side ) ;
12076: LD_EXP 15
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// exit ;
12090: GO 12686
// end ; end else
12092: GO 12494
// if unit = Gladstone then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_EXP 30
12103: EQUAL
12104: IFFALSE 12178
// begin if Gladstone in selected then
12106: LD_EXP 30
12110: PUSH
12111: LD_EXP 3
12115: IN
12116: IFFALSE 12152
// begin joined := true ;
12118: LD_ADDR_VAR 0 5
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12126: LD_EXP 15
12130: PPUSH
12131: LD_STRING D3-Tim-JMM-1
12133: PPUSH
12134: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12138: LD_EXP 30
12142: PPUSH
12143: LD_STRING D3-Tim-Glad-1
12145: PPUSH
12146: CALL_OW 88
// end else
12150: GO 12176
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12152: LD_EXP 15
12156: PPUSH
12157: LD_STRING D4-Tim-JMM-1
12159: PPUSH
12160: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12164: LD_EXP 30
12168: PPUSH
12169: LD_STRING D4-Tim-Glad-1
12171: PPUSH
12172: CALL_OW 88
// end ; end else
12176: GO 12494
// if unit = Denis then
12178: LD_VAR 0 1
12182: PUSH
12183: LD_EXP 28
12187: EQUAL
12188: IFFALSE 12224
// begin joined := true ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12198: LD_EXP 28
12202: PPUSH
12203: LD_STRING D3-Denis-Den-1
12205: PPUSH
12206: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12210: LD_EXP 15
12214: PPUSH
12215: LD_STRING D3-Denis-JMM-1
12217: PPUSH
12218: CALL_OW 88
// end else
12222: GO 12494
// if unit = Simms then
12224: LD_VAR 0 1
12228: PUSH
12229: LD_EXP 36
12233: EQUAL
12234: IFFALSE 12270
// begin joined := true ;
12236: LD_ADDR_VAR 0 5
12240: PUSH
12241: LD_INT 1
12243: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12244: LD_EXP 36
12248: PPUSH
12249: LD_STRING D3-Simms-Sim-1
12251: PPUSH
12252: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12256: LD_EXP 15
12260: PPUSH
12261: LD_STRING D3-Simms-JMM-1
12263: PPUSH
12264: CALL_OW 88
// end else
12268: GO 12494
// if unit = DeltaDoctor then
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 38
12279: EQUAL
12280: IFFALSE 12316
// begin joined := true ;
12282: LD_ADDR_VAR 0 5
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12290: LD_EXP 38
12294: PPUSH
12295: LD_STRING D3-Soldier1-Sol1-1
12297: PPUSH
12298: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12302: LD_EXP 15
12306: PPUSH
12307: LD_STRING D3-Soldier1-JMM-1
12309: PPUSH
12310: CALL_OW 88
// end else
12314: GO 12494
// begin joined := unit in selected ;
12316: LD_ADDR_VAR 0 5
12320: PUSH
12321: LD_VAR 0 1
12325: PUSH
12326: LD_EXP 3
12330: IN
12331: ST_TO_ADDR
// if joined then
12332: LD_VAR 0 5
12336: IFFALSE 12405
// begin if GetSex ( unit ) = sex_male then
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL_OW 258
12347: PUSH
12348: LD_INT 1
12350: EQUAL
12351: IFFALSE 12379
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: LD_STRING D3-Soldier1-Sol1-1
12360: PPUSH
12361: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12365: LD_EXP 15
12369: PPUSH
12370: LD_STRING D3-Soldier1-JMM-1
12372: PPUSH
12373: CALL_OW 88
// end else
12377: GO 12403
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_STRING D3-Soldier2-FSol2-1
12386: PPUSH
12387: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12391: LD_EXP 15
12395: PPUSH
12396: LD_STRING D3-Soldier2-JMM-1
12398: PPUSH
12399: CALL_OW 88
// end ; end else
12403: GO 12494
// begin if GetSex ( unit ) = sex_male then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 258
12414: PUSH
12415: LD_INT 1
12417: EQUAL
12418: IFFALSE 12458
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_STRING D4-Soldier2-Sol1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12432: LD_EXP 15
12436: PPUSH
12437: LD_STRING D4-Soldier2-JMM-1
12439: PPUSH
12440: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12444: LD_VAR 0 1
12448: PPUSH
12449: LD_STRING D4-Soldier2-Sol2-1
12451: PPUSH
12452: CALL_OW 88
// end else
12456: GO 12494
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12458: LD_VAR 0 1
12462: PPUSH
12463: LD_STRING D4-Soldier1-FSol1-1
12465: PPUSH
12466: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12470: LD_EXP 15
12474: PPUSH
12475: LD_STRING D4-Soldier1-JMM-1
12477: PPUSH
12478: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12482: LD_VAR 0 1
12486: PPUSH
12487: LD_STRING D4-Soldier1-FSol1-2
12489: PPUSH
12490: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12494: CALL_OW 7
// InGameOff ;
12498: CALL_OW 9
// if building then
12502: LD_VAR 0 3
12506: IFFALSE 12607
// begin SetSide ( JMM , side ) ;
12508: LD_EXP 15
12512: PPUSH
12513: LD_VAR 0 4
12517: PPUSH
12518: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12522: LD_EXP 15
12526: PPUSH
12527: CALL_OW 122
// if joined then
12531: LD_VAR 0 5
12535: IFFALSE 12574
// begin SetSide ( unit , side ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_VAR 0 4
12546: PPUSH
12547: CALL_OW 235
// SetSide ( building , 1 ) ;
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 235
// ComExitBuilding ( unit ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 122
// end else
12572: GO 12605
// begin wait ( 0 0$10 ) ;
12574: LD_INT 350
12576: PPUSH
12577: CALL_OW 67
// SetSide ( unit , 1 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 235
// SetSide ( building , 1 ) ;
12593: LD_VAR 0 3
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: CALL_OW 235
// end ; end else
12605: GO 12686
// begin ComStop ( [ JMM , unit ] ) ;
12607: LD_EXP 15
12611: PUSH
12612: LD_VAR 0 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 141
// if joined then
12625: LD_VAR 0 5
12629: IFFALSE 12647
// SetSide ( unit , side ) else
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_VAR 0 4
12640: PPUSH
12641: CALL_OW 235
12645: GO 12686
// begin repeat wait ( 0 0$1 ) ;
12647: LD_INT 35
12649: PPUSH
12650: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12654: LD_EXP 15
12658: PPUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 296
12668: PUSH
12669: LD_INT 11
12671: GREATER
12672: IFFALSE 12647
// SetSide ( unit , 1 ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 235
// end ; end ; end ;
12686: LD_VAR 0 2
12690: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12691: LD_EXP 15
12695: PPUSH
12696: LD_EXP 39
12700: PPUSH
12701: CALL_OW 296
12705: PUSH
12706: LD_INT 6
12708: LESS
12709: PUSH
12710: LD_INT 7
12712: PPUSH
12713: LD_EXP 39
12717: PPUSH
12718: CALL_OW 292
12722: AND
12723: IFFALSE 12781
12725: GO 12727
12727: DISABLE
// begin DialogueOn ;
12728: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12732: LD_EXP 39
12736: PPUSH
12737: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12741: LD_EXP 15
12745: PPUSH
12746: LD_STRING D6-JMM-Mike-1
12748: PPUSH
12749: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12753: LD_EXP 39
12757: PPUSH
12758: LD_STRING D6-Mike-1
12760: PPUSH
12761: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12765: LD_EXP 39
12769: PPUSH
12770: LD_INT 7
12772: PPUSH
12773: CALL_OW 235
// DialogueOff ;
12777: CALL_OW 7
// end ;
12781: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12782: LD_EXP 15
12786: PPUSH
12787: CALL_OW 310
12791: PUSH
12792: LD_INT 47
12794: EQUAL
12795: IFFALSE 12863
12797: GO 12799
12799: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12800: LD_STRING M1a
12802: PPUSH
12803: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12807: LD_INT 13
12809: PPUSH
12810: LD_INT 7
12812: PPUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12820: LD_INT 29
12822: PPUSH
12823: LD_INT 7
12825: PPUSH
12826: LD_INT 2
12828: PPUSH
12829: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12833: LD_EXP 15
12837: PPUSH
12838: LD_INT 9
12840: PPUSH
12841: CALL_OW 336
// can_escape := true ;
12845: LD_ADDR_EXP 6
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12853: LD_INT 19
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: CALL_OW 424
// end ;
12863: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12864: LD_EXP 17
12868: PPUSH
12869: CALL_OW 256
12873: PUSH
12874: LD_INT 999
12876: LESS
12877: IFFALSE 12928
12879: GO 12881
12881: DISABLE
// begin enable ;
12882: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12883: LD_INT 25
12885: PPUSH
12886: LD_INT 48
12888: PPUSH
12889: CALL_OW 428
12893: PUSH
12894: LD_EXP 17
12898: EQUAL
12899: IFFALSE 12913
// begin RemoveUnit ( Powell ) ;
12901: LD_EXP 17
12905: PPUSH
12906: CALL_OW 64
// disable ;
12910: DISABLE
// end else
12911: GO 12928
// ComMoveXY ( Powell , 25 , 48 ) ;
12913: LD_EXP 17
12917: PPUSH
12918: LD_INT 25
12920: PPUSH
12921: LD_INT 48
12923: PPUSH
12924: CALL_OW 111
// end ;
12928: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12929: LD_INT 22
12931: PUSH
12932: LD_INT 4
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 21
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 3
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: LD_INT 990
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PUSH
12976: LD_EXP 16
12980: DIFF
12981: IFFALSE 13125
12983: GO 12985
12985: DISABLE
12986: LD_INT 0
12988: PPUSH
// begin enable ;
12989: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 22
12997: PUSH
12998: LD_INT 4
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: LD_INT 24
13020: PUSH
13021: LD_INT 990
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: PUSH
13042: LD_EXP 16
13046: DIFF
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13123
// begin ComFree ( i ) ;
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 139
// SetSide ( i , 1 ) ;
13060: LD_VAR 0 1
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_EXP 15
13081: PPUSH
13082: CALL_OW 296
13086: PUSH
13087: LD_INT 14
13089: LESS
13090: IFFALSE 13121
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13092: LD_VAR 0 1
13096: PPUSH
13097: LD_EXP 15
13101: PPUSH
13102: CALL_OW 250
13106: PPUSH
13107: LD_EXP 15
13111: PPUSH
13112: CALL_OW 251
13116: PPUSH
13117: CALL_OW 114
// end ;
13121: GO 13048
13123: POP
13124: POP
// end ;
13125: PPOPN 1
13127: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13128: LD_INT 22
13130: PUSH
13131: LD_INT 4
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 34
13140: PUSH
13141: LD_INT 12
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: IFFALSE 13238
13158: GO 13160
13160: DISABLE
13161: LD_INT 0
13163: PPUSH
// begin enable ;
13164: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13165: LD_ADDR_VAR 0 1
13169: PUSH
13170: LD_INT 22
13172: PUSH
13173: LD_INT 4
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 34
13182: PUSH
13183: LD_INT 12
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: PUSH
13199: FOR_IN
13200: IFFALSE 13236
// if GetDistUnits ( i , JMM ) < 6 then
13202: LD_VAR 0 1
13206: PPUSH
13207: LD_EXP 15
13211: PPUSH
13212: CALL_OW 296
13216: PUSH
13217: LD_INT 6
13219: LESS
13220: IFFALSE 13234
// SetSide ( i , 7 ) ;
13222: LD_VAR 0 1
13226: PPUSH
13227: LD_INT 7
13229: PPUSH
13230: CALL_OW 235
13234: GO 13199
13236: POP
13237: POP
// end ;
13238: PPOPN 1
13240: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13241: LD_EXP 6
13245: PUSH
13246: LD_INT 19
13248: PPUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 7
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 50
13261: PUSH
13262: EMPTY
13263: LIST
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 71
13284: NOT
13285: AND
13286: PUSH
13287: LD_INT 3
13289: PPUSH
13290: CALL_OW 469
13294: NOT
13295: AND
13296: PUSH
13297: LD_INT 5
13299: PPUSH
13300: CALL_OW 469
13304: NOT
13305: AND
13306: IFFALSE 15033
13308: GO 13310
13310: DISABLE
13311: LD_INT 0
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// begin m1 := false ;
13318: LD_ADDR_VAR 0 3
13322: PUSH
13323: LD_INT 0
13325: ST_TO_ADDR
// m2 := false ;
13326: LD_ADDR_VAR 0 4
13330: PUSH
13331: LD_INT 0
13333: ST_TO_ADDR
// m3 := false ;
13334: LD_ADDR_VAR 0 5
13338: PUSH
13339: LD_INT 0
13341: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_EXP 3
13351: PPUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 4
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: ST_TO_ADDR
// if not all_taken then
13385: LD_VAR 0 1
13389: NOT
13390: IFFALSE 13520
// begin if Query ( Q1 ) = 1 then
13392: LD_STRING Q1
13394: PPUSH
13395: CALL_OW 97
13399: PUSH
13400: LD_INT 1
13402: EQUAL
13403: IFFALSE 13520
// begin repeat wait ( 0 0$1 ) ;
13405: LD_INT 35
13407: PPUSH
13408: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13412: LD_EXP 3
13416: PPUSH
13417: LD_INT 22
13419: PUSH
13420: LD_INT 4
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 21
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 72
13445: PUSH
13446: LD_INT 0
13448: EQUAL
13449: PUSH
13450: LD_INT 19
13452: PPUSH
13453: LD_INT 22
13455: PUSH
13456: LD_INT 7
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 71
13488: NOT
13489: AND
13490: PUSH
13491: LD_INT 3
13493: PPUSH
13494: CALL_OW 469
13498: NOT
13499: AND
13500: PUSH
13501: LD_INT 5
13503: PPUSH
13504: CALL_OW 469
13508: NOT
13509: AND
13510: IFFALSE 13405
// all_taken := true ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// end ; end ; if Count ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 6 then
13520: LD_INT 22
13522: PUSH
13523: LD_INT 7
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 50
13542: PUSH
13543: EMPTY
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: PPUSH
13556: CALL 39044 0 1
13560: PUSH
13561: LD_INT 6
13563: LESS
13564: IFFALSE 13575
// begin YouLost ( AlliesLost ) ;
13566: LD_STRING AlliesLost
13568: PPUSH
13569: CALL_OW 104
// exit ;
13573: GO 15033
// end ; if team_kill_counter < 3 then
13575: LD_EXP 9
13579: PUSH
13580: LD_INT 3
13582: LESS
13583: IFFALSE 13599
// Say ( JMM , D5-JMM-1 ) else
13585: LD_EXP 15
13589: PPUSH
13590: LD_STRING D5-JMM-1
13592: PPUSH
13593: CALL_OW 88
13597: GO 13611
// Say ( JMM , D5-JMM-1a ) ;
13599: LD_EXP 15
13603: PPUSH
13604: LD_STRING D5-JMM-1a
13606: PPUSH
13607: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13611: LD_INT 22
13613: PUSH
13614: LD_INT 7
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 1
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 23
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: PPUSH
13646: CALL_OW 69
13650: PUSH
13651: LD_EXP 15
13655: PUSH
13656: LD_EXP 16
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: DIFF
13665: PUSH
13666: LD_INT 10
13668: GREATEREQUAL
13669: IFFALSE 13678
// SetAchievement ( ACH_TEAM ) ;
13671: LD_STRING ACH_TEAM
13673: PPUSH
13674: CALL_OW 543
// if not invis_used then
13678: LD_EXP 12
13682: NOT
13683: IFFALSE 13699
// begin wait ( 3 ) ;
13685: LD_INT 3
13687: PPUSH
13688: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13692: LD_STRING ACH_NOINVIS
13694: PPUSH
13695: CALL_OW 543
// end ; if not alert then
13699: LD_EXP 13
13703: NOT
13704: IFFALSE 13720
// begin wait ( 3 ) ;
13706: LD_INT 3
13708: PPUSH
13709: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13713: LD_STRING ACH_ALARM
13715: PPUSH
13716: CALL_OW 543
// end ; if tick < 15 15$00 then
13720: LD_OWVAR 1
13724: PUSH
13725: LD_INT 31500
13727: LESS
13728: IFFALSE 13744
// begin wait ( 3 ) ;
13730: LD_INT 3
13732: PPUSH
13733: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13737: LD_STRING ACH_ASPEED_16
13739: PPUSH
13740: CALL_OW 543
// end ; if all_taken then
13744: LD_VAR 0 1
13748: IFFALSE 13770
// begin AddMedal ( All , 1 ) ;
13750: LD_STRING All
13752: PPUSH
13753: LD_INT 1
13755: PPUSH
13756: CALL_OW 101
// m1 := true ;
13760: LD_ADDR_VAR 0 3
13764: PUSH
13765: LD_INT 1
13767: ST_TO_ADDR
// end else
13768: GO 13781
// AddMedal ( All , - 1 ) ;
13770: LD_STRING All
13772: PPUSH
13773: LD_INT 1
13775: NEG
13776: PPUSH
13777: CALL_OW 101
// if team_kill_counter then
13781: LD_EXP 9
13785: IFFALSE 13800
// AddMedal ( Save , - 1 ) else
13787: LD_STRING Save
13789: PPUSH
13790: LD_INT 1
13792: NEG
13793: PPUSH
13794: CALL_OW 101
13798: GO 13818
// begin AddMedal ( Save , 1 ) ;
13800: LD_STRING Save
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 101
// m2 := true ;
13810: LD_ADDR_VAR 0 4
13814: PUSH
13815: LD_INT 1
13817: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13818: LD_EXP 8
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 2
13828: PUSH
13829: LD_INT 1
13831: PUSH
13832: LD_INT 1
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: GREATEREQUAL
13847: IFFALSE 13862
// AddMedal ( Friendship , - 1 ) else
13849: LD_STRING Friendship
13851: PPUSH
13852: LD_INT 1
13854: NEG
13855: PPUSH
13856: CALL_OW 101
13860: GO 13880
// begin AddMedal ( Friendship , 1 ) ;
13862: LD_STRING Friendship
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: CALL_OW 101
// m3 := true ;
13872: LD_ADDR_VAR 0 5
13876: PUSH
13877: LD_INT 1
13879: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13880: LD_VAR 0 3
13884: PUSH
13885: LD_VAR 0 4
13889: AND
13890: PUSH
13891: LD_VAR 0 5
13895: AND
13896: PUSH
13897: LD_OWVAR 67
13901: PUSH
13902: LD_INT 3
13904: GREATEREQUAL
13905: AND
13906: IFFALSE 13918
// SetAchievementEX ( ACH_AMER , 16 ) ;
13908: LD_STRING ACH_AMER
13910: PPUSH
13911: LD_INT 16
13913: PPUSH
13914: CALL_OW 564
// GiveMedals ( MAIN ) ;
13918: LD_STRING MAIN
13920: PPUSH
13921: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13925: LD_ADDR_VAR 0 2
13929: PUSH
13930: LD_INT 22
13932: PUSH
13933: LD_INT 7
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 2
13942: PUSH
13943: LD_INT 25
13945: PUSH
13946: LD_INT 1
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 25
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 25
13965: PUSH
13966: LD_INT 3
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 25
13975: PUSH
13976: LD_INT 4
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 25
13985: PUSH
13986: LD_INT 5
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 25
13995: PUSH
13996: LD_INT 8
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 25
14005: PUSH
14006: LD_INT 9
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 25
14015: PUSH
14016: LD_INT 16
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: EMPTY
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
14046: LD_VAR 0 2
14050: PUSH
14051: LD_EXP 16
14055: UNION
14056: PUSH
14057: LD_EXP 39
14061: DIFF
14062: PPUSH
14063: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
14067: LD_EXP 15
14071: PPUSH
14072: LD_STRING 12a_JMM
14074: PPUSH
14075: CALL_OW 38
// if IsLive ( Roth ) then
14079: LD_EXP 16
14083: PPUSH
14084: CALL_OW 300
14088: IFFALSE 14102
// SaveCharacters ( Roth , 12a_Roth ) ;
14090: LD_EXP 16
14094: PPUSH
14095: LD_STRING 12a_Roth
14097: PPUSH
14098: CALL_OW 38
// if Lisa in tmp then
14102: LD_EXP 24
14106: PUSH
14107: LD_VAR 0 2
14111: IN
14112: IFFALSE 14128
// SaveCharacters ( Lisa , 12a_Lisa ) else
14114: LD_EXP 24
14118: PPUSH
14119: LD_STRING 12a_Lisa
14121: PPUSH
14122: CALL_OW 38
14126: GO 14146
// if Lisa then
14128: LD_EXP 24
14132: IFFALSE 14146
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14134: LD_EXP 24
14138: PPUSH
14139: LD_STRING 12p_Lisa
14141: PPUSH
14142: CALL_OW 38
// if Mike in tmp then
14146: LD_EXP 39
14150: PUSH
14151: LD_VAR 0 2
14155: IN
14156: IFFALSE 14170
// SaveCharacters ( Mike , 12a_Mike ) ;
14158: LD_EXP 39
14162: PPUSH
14163: LD_STRING 12a_Mike
14165: PPUSH
14166: CALL_OW 38
// if Donaldson in tmp then
14170: LD_EXP 25
14174: PUSH
14175: LD_VAR 0 2
14179: IN
14180: IFFALSE 14196
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14182: LD_EXP 25
14186: PPUSH
14187: LD_STRING 12a_Donaldson
14189: PPUSH
14190: CALL_OW 38
14194: GO 14214
// if Donaldson then
14196: LD_EXP 25
14200: IFFALSE 14214
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14202: LD_EXP 25
14206: PPUSH
14207: LD_STRING 12p_Donaldson
14209: PPUSH
14210: CALL_OW 38
// if Bobby in tmp then
14214: LD_EXP 26
14218: PUSH
14219: LD_VAR 0 2
14223: IN
14224: IFFALSE 14240
// SaveCharacters ( Bobby , 12a_Bobby ) else
14226: LD_EXP 26
14230: PPUSH
14231: LD_STRING 12a_Bobby
14233: PPUSH
14234: CALL_OW 38
14238: GO 14258
// if Bobby then
14240: LD_EXP 26
14244: IFFALSE 14258
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14246: LD_EXP 26
14250: PPUSH
14251: LD_STRING 12p_Bobby
14253: PPUSH
14254: CALL_OW 38
// if Cyrus in tmp then
14258: LD_EXP 27
14262: PUSH
14263: LD_VAR 0 2
14267: IN
14268: IFFALSE 14284
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14270: LD_EXP 27
14274: PPUSH
14275: LD_STRING 12a_Cyrus
14277: PPUSH
14278: CALL_OW 38
14282: GO 14302
// if Cyrus then
14284: LD_EXP 27
14288: IFFALSE 14302
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14290: LD_EXP 27
14294: PPUSH
14295: LD_STRING 12p_Cyrus
14297: PPUSH
14298: CALL_OW 38
// if Denis in tmp then
14302: LD_EXP 28
14306: PUSH
14307: LD_VAR 0 2
14311: IN
14312: IFFALSE 14326
// SaveCharacters ( Denis , 12a_Denis ) ;
14314: LD_EXP 28
14318: PPUSH
14319: LD_STRING 12a_Denis
14321: PPUSH
14322: CALL_OW 38
// if Brown in tmp then
14326: LD_EXP 29
14330: PUSH
14331: LD_VAR 0 2
14335: IN
14336: IFFALSE 14352
// SaveCharacters ( Brown , 12a_Brown ) else
14338: LD_EXP 29
14342: PPUSH
14343: LD_STRING 12a_Brown
14345: PPUSH
14346: CALL_OW 38
14350: GO 14376
// if Brown in tmp then
14352: LD_EXP 29
14356: PUSH
14357: LD_VAR 0 2
14361: IN
14362: IFFALSE 14376
// SaveCharacters ( Brown , 12p_Brown ) ;
14364: LD_EXP 29
14368: PPUSH
14369: LD_STRING 12p_Brown
14371: PPUSH
14372: CALL_OW 38
// if Gladstone in tmp then
14376: LD_EXP 30
14380: PUSH
14381: LD_VAR 0 2
14385: IN
14386: IFFALSE 14402
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14388: LD_EXP 30
14392: PPUSH
14393: LD_STRING 12a_Gladstone
14395: PPUSH
14396: CALL_OW 38
14400: GO 14420
// if Gladstone then
14402: LD_EXP 30
14406: IFFALSE 14420
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14408: LD_EXP 30
14412: PPUSH
14413: LD_STRING 12p_Gladstone
14415: PPUSH
14416: CALL_OW 38
// if Houten in tmp then
14420: LD_EXP 31
14424: PUSH
14425: LD_VAR 0 2
14429: IN
14430: IFFALSE 14446
// SaveCharacters ( Houten , 12a_Houten ) else
14432: LD_EXP 31
14436: PPUSH
14437: LD_STRING 12a_Houten
14439: PPUSH
14440: CALL_OW 38
14444: GO 14464
// if Houten then
14446: LD_EXP 31
14450: IFFALSE 14464
// SaveCharacters ( Houten , 12p_Houten ) ;
14452: LD_EXP 31
14456: PPUSH
14457: LD_STRING 12p_Houten
14459: PPUSH
14460: CALL_OW 38
// if Cornel in tmp then
14464: LD_EXP 32
14468: PUSH
14469: LD_VAR 0 2
14473: IN
14474: IFFALSE 14490
// SaveCharacters ( Cornel , 12a_Cornell ) else
14476: LD_EXP 32
14480: PPUSH
14481: LD_STRING 12a_Cornell
14483: PPUSH
14484: CALL_OW 38
14488: GO 14508
// if Cornel then
14490: LD_EXP 32
14494: IFFALSE 14508
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14496: LD_EXP 32
14500: PPUSH
14501: LD_STRING 12p_Cornell
14503: PPUSH
14504: CALL_OW 38
// if Gary in tmp then
14508: LD_EXP 33
14512: PUSH
14513: LD_VAR 0 2
14517: IN
14518: IFFALSE 14534
// SaveCharacters ( Gary , 12a_Gary ) else
14520: LD_EXP 33
14524: PPUSH
14525: LD_STRING 12a_Gary
14527: PPUSH
14528: CALL_OW 38
14532: GO 14552
// if Gary then
14534: LD_EXP 33
14538: IFFALSE 14552
// SaveCharacters ( Gary , 12p_Gary ) ;
14540: LD_EXP 33
14544: PPUSH
14545: LD_STRING 12p_Gary
14547: PPUSH
14548: CALL_OW 38
// if Frank in tmp then
14552: LD_EXP 34
14556: PUSH
14557: LD_VAR 0 2
14561: IN
14562: IFFALSE 14576
// SaveCharacters ( Frank , 12a_Frank ) ;
14564: LD_EXP 34
14568: PPUSH
14569: LD_STRING 12a_Frank
14571: PPUSH
14572: CALL_OW 38
// if Kikuchi in tmp then
14576: LD_EXP 35
14580: PUSH
14581: LD_VAR 0 2
14585: IN
14586: IFFALSE 14602
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14588: LD_EXP 35
14592: PPUSH
14593: LD_STRING 12a_Kikuchi
14595: PPUSH
14596: CALL_OW 38
14600: GO 14620
// if Kikuchi then
14602: LD_EXP 35
14606: IFFALSE 14620
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14608: LD_EXP 35
14612: PPUSH
14613: LD_STRING 12p_Kikuchi
14615: PPUSH
14616: CALL_OW 38
// if Simms in tmp then
14620: LD_EXP 36
14624: PUSH
14625: LD_VAR 0 2
14629: IN
14630: IFFALSE 14644
// SaveCharacters ( Simms , 12a_Simms ) ;
14632: LD_EXP 36
14636: PPUSH
14637: LD_STRING 12a_Simms
14639: PPUSH
14640: CALL_OW 38
// if Joan in tmp then
14644: LD_EXP 37
14648: PUSH
14649: LD_VAR 0 2
14653: IN
14654: IFFALSE 14668
// SaveCharacters ( Joan , 12a_Joan ) ;
14656: LD_EXP 37
14660: PPUSH
14661: LD_STRING 12a_Joan
14663: PPUSH
14664: CALL_OW 38
// if DeltaDoctor in tmp then
14668: LD_EXP 38
14672: PUSH
14673: LD_VAR 0 2
14677: IN
14678: IFFALSE 14692
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14680: LD_EXP 38
14684: PPUSH
14685: LD_STRING 12a_DeltaDoctor
14687: PPUSH
14688: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14692: LD_ADDR_VAR 0 2
14696: PUSH
14697: LD_VAR 0 2
14701: PUSH
14702: LD_EXP 15
14706: PUSH
14707: LD_EXP 16
14711: PUSH
14712: LD_EXP 24
14716: PUSH
14717: LD_EXP 25
14721: PUSH
14722: LD_EXP 26
14726: PUSH
14727: LD_EXP 27
14731: PUSH
14732: LD_EXP 28
14736: PUSH
14737: LD_EXP 29
14741: PUSH
14742: LD_EXP 30
14746: PUSH
14747: LD_EXP 31
14751: PUSH
14752: LD_EXP 32
14756: PUSH
14757: LD_EXP 33
14761: PUSH
14762: LD_EXP 34
14766: PUSH
14767: LD_EXP 35
14771: PUSH
14772: LD_EXP 36
14776: PUSH
14777: LD_EXP 37
14781: PUSH
14782: LD_EXP 38
14786: PUSH
14787: LD_EXP 39
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: DIFF
14812: ST_TO_ADDR
// if tmp then
14813: LD_VAR 0 2
14817: IFFALSE 14831
// SaveCharacters ( tmp , 12a_others ) ;
14819: LD_VAR 0 2
14823: PPUSH
14824: LD_STRING 12a_others
14826: PPUSH
14827: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: LD_INT 21
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 23
14848: PUSH
14849: LD_INT 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 2
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 69
14893: PUSH
14894: LD_EXP 15
14898: PUSH
14899: LD_EXP 16
14903: PUSH
14904: LD_EXP 24
14908: PUSH
14909: LD_EXP 25
14913: PUSH
14914: LD_EXP 26
14918: PUSH
14919: LD_EXP 27
14923: PUSH
14924: LD_EXP 28
14928: PUSH
14929: LD_EXP 29
14933: PUSH
14934: LD_EXP 30
14938: PUSH
14939: LD_EXP 31
14943: PUSH
14944: LD_EXP 32
14948: PUSH
14949: LD_EXP 33
14953: PUSH
14954: LD_EXP 34
14958: PUSH
14959: LD_EXP 35
14963: PUSH
14964: LD_EXP 36
14968: PUSH
14969: LD_EXP 37
14973: PUSH
14974: LD_EXP 38
14978: PUSH
14979: LD_EXP 17
14983: PUSH
14984: LD_EXP 39
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: DIFF
15010: ST_TO_ADDR
// if tmp then
15011: LD_VAR 0 2
15015: IFFALSE 15029
// SaveCharacters ( tmp , 12p_others ) ;
15017: LD_VAR 0 2
15021: PPUSH
15022: LD_STRING 12p_others
15024: PPUSH
15025: CALL_OW 38
// YouWin ;
15029: CALL_OW 103
// end ; end_of_file
15033: PPOPN 5
15035: END
// on SailEvent ( event ) do var tmp ;
15036: LD_INT 0
15038: PPUSH
// begin if event = 1 then
15039: LD_VAR 0 1
15043: PUSH
15044: LD_INT 1
15046: EQUAL
15047: IFFALSE 15120
// begin if not mobile_patrol then
15049: LD_EXP 18
15053: NOT
15054: IFFALSE 15058
// exit ;
15056: GO 15120
// tmp := mobile_patrol [ mobile_patrol ] ;
15058: LD_ADDR_VAR 0 2
15062: PUSH
15063: LD_EXP 18
15067: PUSH
15068: LD_EXP 18
15072: ARRAY
15073: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
15074: LD_ADDR_EXP 18
15078: PUSH
15079: LD_EXP 18
15083: PPUSH
15084: LD_EXP 18
15088: PPUSH
15089: CALL_OW 3
15093: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
15094: LD_VAR 0 2
15098: PPUSH
15099: LD_EXP 19
15103: PUSH
15104: LD_EXP 18
15108: PUSH
15109: LD_INT 1
15111: PLUS
15112: ARRAY
15113: PPUSH
15114: EMPTY
15115: PPUSH
15116: CALL 7021 0 3
// end ; end ;
15120: PPOPN 2
15122: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL 31637 0 1
// if un = JMM then
15132: LD_VAR 0 1
15136: PUSH
15137: LD_EXP 15
15141: EQUAL
15142: IFFALSE 15151
// YouLost ( JMM ) ;
15144: LD_STRING JMM
15146: PPUSH
15147: CALL_OW 104
// if un = Powell then
15151: LD_VAR 0 1
15155: PUSH
15156: LD_EXP 17
15160: EQUAL
15161: IFFALSE 15173
// SaveVariable ( true , 12a_PowellKilled ) ;
15163: LD_INT 1
15165: PPUSH
15166: LD_STRING 12a_PowellKilled
15168: PPUSH
15169: CALL_OW 39
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 255
15182: PUSH
15183: LD_INT 7
15185: EQUAL
15186: PUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 264
15196: PUSH
15197: LD_INT 12
15199: EQUAL
15200: AND
15201: IFFALSE 15210
// YouLost ( Artifact ) ;
15203: LD_STRING Artifact
15205: PPUSH
15206: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 255
15219: PUSH
15220: LD_INT 7
15222: EQUAL
15223: PUSH
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 247
15233: PUSH
15234: LD_INT 1
15236: EQUAL
15237: AND
15238: PUSH
15239: LD_VAR 0 1
15243: PUSH
15244: LD_EXP 16
15248: EQUAL
15249: OR
15250: IFFALSE 15266
// team_kill_counter := team_kill_counter + 1 ;
15252: LD_ADDR_EXP 9
15256: PUSH
15257: LD_EXP 9
15261: PUSH
15262: LD_INT 1
15264: PLUS
15265: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 255
15275: PUSH
15276: LD_INT 1
15278: EQUAL
15279: PUSH
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 247
15289: PUSH
15290: LD_INT 1
15292: EQUAL
15293: AND
15294: IFFALSE 15310
// friends_kill_counter := friends_kill_counter + 1 ;
15296: LD_ADDR_EXP 8
15300: PUSH
15301: LD_EXP 8
15305: PUSH
15306: LD_INT 1
15308: PLUS
15309: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15310: LD_VAR 0 1
15314: PPUSH
15315: CALL_OW 255
15319: PUSH
15320: LD_INT 1
15322: NONEQUAL
15323: IFFALSE 15327
// exit ;
15325: GO 15429
// if GetControl ( un ) = control_remote then
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 263
15336: PUSH
15337: LD_INT 2
15339: EQUAL
15340: IFFALSE 15358
// defenders := defenders diff un ;
15342: LD_ADDR_EXP 21
15346: PUSH
15347: LD_EXP 21
15351: PUSH
15352: LD_VAR 0 1
15356: DIFF
15357: ST_TO_ADDR
// if not un in defenders then
15358: LD_VAR 0 1
15362: PUSH
15363: LD_EXP 21
15367: IN
15368: NOT
15369: IFFALSE 15429
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15371: LD_ADDR_EXP 22
15375: PUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 250
15385: PUSH
15386: LD_VAR 0 1
15390: PPUSH
15391: CALL_OW 251
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: ST_TO_ADDR
// def_counter := Inc ( def_counter ) ;
15400: LD_ADDR_EXP 14
15404: PUSH
15405: LD_EXP 14
15409: PPUSH
15410: CALL 76014 0 1
15414: ST_TO_ADDR
// if def_counter < 4 then
15415: LD_EXP 14
15419: PUSH
15420: LD_INT 4
15422: LESS
15423: IFFALSE 15429
// Defend ;
15425: CALL 2958 0 0
// end ; end ;
15429: PPOPN 1
15431: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL 31695 0 2
// if GetSide ( veh ) <> 1 then
15446: LD_VAR 0 1
15450: PPUSH
15451: CALL_OW 255
15455: PUSH
15456: LD_INT 1
15458: NONEQUAL
15459: IFFALSE 15463
// exit ;
15461: GO 15487
// if GetControl ( veh ) = control_remote then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 263
15472: PUSH
15473: LD_INT 2
15475: EQUAL
15476: IFFALSE 15487
// Connect ( veh ) ;
15478: LD_VAR 0 1
15482: PPUSH
15483: CALL 45250 0 1
// end ;
15487: PPOPN 2
15489: END
// on UnitGoesToRed ( un ) do var i , veh ;
15490: LD_INT 0
15492: PPUSH
15493: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15494: LD_VAR 0 1
15498: PPUSH
15499: CALL_OW 255
15503: PUSH
15504: LD_INT 1
15506: EQUAL
15507: PUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 263
15517: PUSH
15518: LD_INT 2
15520: EQUAL
15521: AND
15522: IFFALSE 15533
// ComUnlink ( un ) ;
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 136
// if un = ambar0 then
15533: LD_VAR 0 1
15537: PUSH
15538: LD_INT 18
15540: EQUAL
15541: IFFALSE 15651
// begin uc_side := 1 ;
15543: LD_ADDR_OWVAR 20
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// uc_nation := 1 ;
15551: LD_ADDR_OWVAR 21
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// for i = 1 to 6 do
15559: LD_ADDR_VAR 0 2
15563: PUSH
15564: DOUBLE
15565: LD_INT 1
15567: DEC
15568: ST_TO_ADDR
15569: LD_INT 6
15571: PUSH
15572: FOR_TO
15573: IFFALSE 15649
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15575: LD_INT 3
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_INT 3
15583: PPUSH
15584: LD_INT 4
15586: PPUSH
15587: LD_INT 100
15589: PPUSH
15590: CALL 41782 0 5
// veh := CreateVehicle ;
15594: LD_ADDR_VAR 0 3
15598: PUSH
15599: CALL_OW 45
15603: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15604: LD_VAR 0 3
15608: PPUSH
15609: LD_INT 1
15611: PPUSH
15612: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_INT 25
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: CALL_OW 49
// defenders := defenders ^ veh ;
15631: LD_ADDR_EXP 21
15635: PUSH
15636: LD_EXP 21
15640: PUSH
15641: LD_VAR 0 3
15645: ADD
15646: ST_TO_ADDR
// end ;
15647: GO 15572
15649: POP
15650: POP
// end ; end ;
15651: PPOPN 3
15653: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15654: LD_VAR 0 2
15658: PUSH
15659: LD_EXP 17
15663: EQUAL
15664: IFFALSE 15675
// RemoveUnit ( Powell ) ;
15666: LD_EXP 17
15670: PPUSH
15671: CALL_OW 64
// end ;
15675: PPOPN 2
15677: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15678: LD_VAR 0 1
15682: PPUSH
15683: CALL 31679 0 1
// end ; end_of_file end_of_file
15687: PPOPN 1
15689: END
// export globalGameSaveCounter ; every 0 0$1 do
15690: GO 15692
15692: DISABLE
// begin enable ;
15693: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15694: LD_STRING updateTimer(
15696: PUSH
15697: LD_OWVAR 1
15701: STR
15702: PUSH
15703: LD_STRING );
15705: STR
15706: PPUSH
15707: CALL_OW 559
// end ;
15711: END
// every 0 0$1 do
15712: GO 15714
15714: DISABLE
// begin globalGameSaveCounter := 0 ;
15715: LD_ADDR_EXP 40
15719: PUSH
15720: LD_INT 0
15722: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15723: LD_STRING setGameSaveCounter(0)
15725: PPUSH
15726: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15730: LD_STRING initStreamRollete();
15732: PPUSH
15733: CALL_OW 559
// InitStreamMode ;
15737: CALL 17080 0 0
// DefineStreamItems ( false ) ;
15741: LD_INT 0
15743: PPUSH
15744: CALL 17544 0 1
// end ;
15748: END
// export function SOS_MapStart ( ) ; begin
15749: LD_INT 0
15751: PPUSH
// if streamModeActive then
15752: LD_EXP 41
15756: IFFALSE 15765
// DefineStreamItems ( true ) ;
15758: LD_INT 1
15760: PPUSH
15761: CALL 17544 0 1
// UpdateLuaVariables ( ) ;
15765: CALL 15782 0 0
// UpdateFactoryWaypoints ( ) ;
15769: CALL 30546 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15773: CALL 30798 0 0
// end ;
15777: LD_VAR 0 1
15781: RET
// function UpdateLuaVariables ( ) ; begin
15782: LD_INT 0
15784: PPUSH
// if globalGameSaveCounter then
15785: LD_EXP 40
15789: IFFALSE 15823
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15791: LD_ADDR_EXP 40
15795: PUSH
15796: LD_EXP 40
15800: PPUSH
15801: CALL 76014 0 1
15805: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15806: LD_STRING setGameSaveCounter(
15808: PUSH
15809: LD_EXP 40
15813: STR
15814: PUSH
15815: LD_STRING )
15817: STR
15818: PPUSH
15819: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15823: LD_STRING setGameDifficulty(
15825: PUSH
15826: LD_OWVAR 67
15830: STR
15831: PUSH
15832: LD_STRING )
15834: STR
15835: PPUSH
15836: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15840: LD_STRING displayDifficulty(
15842: PUSH
15843: LD_OWVAR 67
15847: STR
15848: PUSH
15849: LD_STRING )
15851: STR
15852: PPUSH
15853: CALL_OW 559
// end ;
15857: LD_VAR 0 1
15861: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15862: LD_INT 0
15864: PPUSH
// if p2 = stream_mode then
15865: LD_VAR 0 2
15869: PUSH
15870: LD_INT 100
15872: EQUAL
15873: IFFALSE 16876
// begin if not StreamModeActive then
15875: LD_EXP 41
15879: NOT
15880: IFFALSE 15890
// StreamModeActive := true ;
15882: LD_ADDR_EXP 41
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 0 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 0
15897: EQUAL
15898: IFFALSE 15904
// InitStreamMode ;
15900: CALL 17080 0 0
// if p3 = 1 then
15904: LD_VAR 0 3
15908: PUSH
15909: LD_INT 1
15911: EQUAL
15912: IFFALSE 15922
// sRocket := true ;
15914: LD_ADDR_EXP 46
15918: PUSH
15919: LD_INT 1
15921: ST_TO_ADDR
// if p3 = 2 then
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 2
15929: EQUAL
15930: IFFALSE 15940
// sSpeed := true ;
15932: LD_ADDR_EXP 45
15936: PUSH
15937: LD_INT 1
15939: ST_TO_ADDR
// if p3 = 3 then
15940: LD_VAR 0 3
15944: PUSH
15945: LD_INT 3
15947: EQUAL
15948: IFFALSE 15958
// sEngine := true ;
15950: LD_ADDR_EXP 47
15954: PUSH
15955: LD_INT 1
15957: ST_TO_ADDR
// if p3 = 4 then
15958: LD_VAR 0 3
15962: PUSH
15963: LD_INT 4
15965: EQUAL
15966: IFFALSE 15976
// sSpec := true ;
15968: LD_ADDR_EXP 44
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// if p3 = 5 then
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 5
15983: EQUAL
15984: IFFALSE 15994
// sLevel := true ;
15986: LD_ADDR_EXP 48
15990: PUSH
15991: LD_INT 1
15993: ST_TO_ADDR
// if p3 = 6 then
15994: LD_VAR 0 3
15998: PUSH
15999: LD_INT 6
16001: EQUAL
16002: IFFALSE 16012
// sArmoury := true ;
16004: LD_ADDR_EXP 49
16008: PUSH
16009: LD_INT 1
16011: ST_TO_ADDR
// if p3 = 7 then
16012: LD_VAR 0 3
16016: PUSH
16017: LD_INT 7
16019: EQUAL
16020: IFFALSE 16030
// sRadar := true ;
16022: LD_ADDR_EXP 50
16026: PUSH
16027: LD_INT 1
16029: ST_TO_ADDR
// if p3 = 8 then
16030: LD_VAR 0 3
16034: PUSH
16035: LD_INT 8
16037: EQUAL
16038: IFFALSE 16048
// sBunker := true ;
16040: LD_ADDR_EXP 51
16044: PUSH
16045: LD_INT 1
16047: ST_TO_ADDR
// if p3 = 9 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 9
16055: EQUAL
16056: IFFALSE 16066
// sHack := true ;
16058: LD_ADDR_EXP 52
16062: PUSH
16063: LD_INT 1
16065: ST_TO_ADDR
// if p3 = 10 then
16066: LD_VAR 0 3
16070: PUSH
16071: LD_INT 10
16073: EQUAL
16074: IFFALSE 16084
// sFire := true ;
16076: LD_ADDR_EXP 53
16080: PUSH
16081: LD_INT 1
16083: ST_TO_ADDR
// if p3 = 11 then
16084: LD_VAR 0 3
16088: PUSH
16089: LD_INT 11
16091: EQUAL
16092: IFFALSE 16102
// sRefresh := true ;
16094: LD_ADDR_EXP 54
16098: PUSH
16099: LD_INT 1
16101: ST_TO_ADDR
// if p3 = 12 then
16102: LD_VAR 0 3
16106: PUSH
16107: LD_INT 12
16109: EQUAL
16110: IFFALSE 16120
// sExp := true ;
16112: LD_ADDR_EXP 55
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// if p3 = 13 then
16120: LD_VAR 0 3
16124: PUSH
16125: LD_INT 13
16127: EQUAL
16128: IFFALSE 16138
// sDepot := true ;
16130: LD_ADDR_EXP 56
16134: PUSH
16135: LD_INT 1
16137: ST_TO_ADDR
// if p3 = 14 then
16138: LD_VAR 0 3
16142: PUSH
16143: LD_INT 14
16145: EQUAL
16146: IFFALSE 16156
// sFlag := true ;
16148: LD_ADDR_EXP 57
16152: PUSH
16153: LD_INT 1
16155: ST_TO_ADDR
// if p3 = 15 then
16156: LD_VAR 0 3
16160: PUSH
16161: LD_INT 15
16163: EQUAL
16164: IFFALSE 16174
// sKamikadze := true ;
16166: LD_ADDR_EXP 65
16170: PUSH
16171: LD_INT 1
16173: ST_TO_ADDR
// if p3 = 16 then
16174: LD_VAR 0 3
16178: PUSH
16179: LD_INT 16
16181: EQUAL
16182: IFFALSE 16192
// sTroll := true ;
16184: LD_ADDR_EXP 66
16188: PUSH
16189: LD_INT 1
16191: ST_TO_ADDR
// if p3 = 17 then
16192: LD_VAR 0 3
16196: PUSH
16197: LD_INT 17
16199: EQUAL
16200: IFFALSE 16210
// sSlow := true ;
16202: LD_ADDR_EXP 67
16206: PUSH
16207: LD_INT 1
16209: ST_TO_ADDR
// if p3 = 18 then
16210: LD_VAR 0 3
16214: PUSH
16215: LD_INT 18
16217: EQUAL
16218: IFFALSE 16228
// sLack := true ;
16220: LD_ADDR_EXP 68
16224: PUSH
16225: LD_INT 1
16227: ST_TO_ADDR
// if p3 = 19 then
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 19
16235: EQUAL
16236: IFFALSE 16246
// sTank := true ;
16238: LD_ADDR_EXP 70
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// if p3 = 20 then
16246: LD_VAR 0 3
16250: PUSH
16251: LD_INT 20
16253: EQUAL
16254: IFFALSE 16264
// sRemote := true ;
16256: LD_ADDR_EXP 71
16260: PUSH
16261: LD_INT 1
16263: ST_TO_ADDR
// if p3 = 21 then
16264: LD_VAR 0 3
16268: PUSH
16269: LD_INT 21
16271: EQUAL
16272: IFFALSE 16282
// sPowell := true ;
16274: LD_ADDR_EXP 72
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// if p3 = 22 then
16282: LD_VAR 0 3
16286: PUSH
16287: LD_INT 22
16289: EQUAL
16290: IFFALSE 16300
// sTeleport := true ;
16292: LD_ADDR_EXP 75
16296: PUSH
16297: LD_INT 1
16299: ST_TO_ADDR
// if p3 = 23 then
16300: LD_VAR 0 3
16304: PUSH
16305: LD_INT 23
16307: EQUAL
16308: IFFALSE 16318
// sOilTower := true ;
16310: LD_ADDR_EXP 77
16314: PUSH
16315: LD_INT 1
16317: ST_TO_ADDR
// if p3 = 24 then
16318: LD_VAR 0 3
16322: PUSH
16323: LD_INT 24
16325: EQUAL
16326: IFFALSE 16336
// sShovel := true ;
16328: LD_ADDR_EXP 78
16332: PUSH
16333: LD_INT 1
16335: ST_TO_ADDR
// if p3 = 25 then
16336: LD_VAR 0 3
16340: PUSH
16341: LD_INT 25
16343: EQUAL
16344: IFFALSE 16354
// sSheik := true ;
16346: LD_ADDR_EXP 79
16350: PUSH
16351: LD_INT 1
16353: ST_TO_ADDR
// if p3 = 26 then
16354: LD_VAR 0 3
16358: PUSH
16359: LD_INT 26
16361: EQUAL
16362: IFFALSE 16372
// sEarthquake := true ;
16364: LD_ADDR_EXP 81
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// if p3 = 27 then
16372: LD_VAR 0 3
16376: PUSH
16377: LD_INT 27
16379: EQUAL
16380: IFFALSE 16390
// sAI := true ;
16382: LD_ADDR_EXP 82
16386: PUSH
16387: LD_INT 1
16389: ST_TO_ADDR
// if p3 = 28 then
16390: LD_VAR 0 3
16394: PUSH
16395: LD_INT 28
16397: EQUAL
16398: IFFALSE 16408
// sCargo := true ;
16400: LD_ADDR_EXP 85
16404: PUSH
16405: LD_INT 1
16407: ST_TO_ADDR
// if p3 = 29 then
16408: LD_VAR 0 3
16412: PUSH
16413: LD_INT 29
16415: EQUAL
16416: IFFALSE 16426
// sDLaser := true ;
16418: LD_ADDR_EXP 86
16422: PUSH
16423: LD_INT 1
16425: ST_TO_ADDR
// if p3 = 30 then
16426: LD_VAR 0 3
16430: PUSH
16431: LD_INT 30
16433: EQUAL
16434: IFFALSE 16444
// sExchange := true ;
16436: LD_ADDR_EXP 87
16440: PUSH
16441: LD_INT 1
16443: ST_TO_ADDR
// if p3 = 31 then
16444: LD_VAR 0 3
16448: PUSH
16449: LD_INT 31
16451: EQUAL
16452: IFFALSE 16462
// sFac := true ;
16454: LD_ADDR_EXP 88
16458: PUSH
16459: LD_INT 1
16461: ST_TO_ADDR
// if p3 = 32 then
16462: LD_VAR 0 3
16466: PUSH
16467: LD_INT 32
16469: EQUAL
16470: IFFALSE 16480
// sPower := true ;
16472: LD_ADDR_EXP 89
16476: PUSH
16477: LD_INT 1
16479: ST_TO_ADDR
// if p3 = 33 then
16480: LD_VAR 0 3
16484: PUSH
16485: LD_INT 33
16487: EQUAL
16488: IFFALSE 16498
// sRandom := true ;
16490: LD_ADDR_EXP 90
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
// if p3 = 34 then
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 34
16505: EQUAL
16506: IFFALSE 16516
// sShield := true ;
16508: LD_ADDR_EXP 91
16512: PUSH
16513: LD_INT 1
16515: ST_TO_ADDR
// if p3 = 35 then
16516: LD_VAR 0 3
16520: PUSH
16521: LD_INT 35
16523: EQUAL
16524: IFFALSE 16534
// sTime := true ;
16526: LD_ADDR_EXP 92
16530: PUSH
16531: LD_INT 1
16533: ST_TO_ADDR
// if p3 = 36 then
16534: LD_VAR 0 3
16538: PUSH
16539: LD_INT 36
16541: EQUAL
16542: IFFALSE 16552
// sTools := true ;
16544: LD_ADDR_EXP 93
16548: PUSH
16549: LD_INT 1
16551: ST_TO_ADDR
// if p3 = 101 then
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 101
16559: EQUAL
16560: IFFALSE 16570
// sSold := true ;
16562: LD_ADDR_EXP 58
16566: PUSH
16567: LD_INT 1
16569: ST_TO_ADDR
// if p3 = 102 then
16570: LD_VAR 0 3
16574: PUSH
16575: LD_INT 102
16577: EQUAL
16578: IFFALSE 16588
// sDiff := true ;
16580: LD_ADDR_EXP 59
16584: PUSH
16585: LD_INT 1
16587: ST_TO_ADDR
// if p3 = 103 then
16588: LD_VAR 0 3
16592: PUSH
16593: LD_INT 103
16595: EQUAL
16596: IFFALSE 16606
// sFog := true ;
16598: LD_ADDR_EXP 62
16602: PUSH
16603: LD_INT 1
16605: ST_TO_ADDR
// if p3 = 104 then
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 104
16613: EQUAL
16614: IFFALSE 16624
// sReset := true ;
16616: LD_ADDR_EXP 63
16620: PUSH
16621: LD_INT 1
16623: ST_TO_ADDR
// if p3 = 105 then
16624: LD_VAR 0 3
16628: PUSH
16629: LD_INT 105
16631: EQUAL
16632: IFFALSE 16642
// sSun := true ;
16634: LD_ADDR_EXP 64
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// if p3 = 106 then
16642: LD_VAR 0 3
16646: PUSH
16647: LD_INT 106
16649: EQUAL
16650: IFFALSE 16660
// sTiger := true ;
16652: LD_ADDR_EXP 60
16656: PUSH
16657: LD_INT 1
16659: ST_TO_ADDR
// if p3 = 107 then
16660: LD_VAR 0 3
16664: PUSH
16665: LD_INT 107
16667: EQUAL
16668: IFFALSE 16678
// sBomb := true ;
16670: LD_ADDR_EXP 61
16674: PUSH
16675: LD_INT 1
16677: ST_TO_ADDR
// if p3 = 108 then
16678: LD_VAR 0 3
16682: PUSH
16683: LD_INT 108
16685: EQUAL
16686: IFFALSE 16696
// sWound := true ;
16688: LD_ADDR_EXP 69
16692: PUSH
16693: LD_INT 1
16695: ST_TO_ADDR
// if p3 = 109 then
16696: LD_VAR 0 3
16700: PUSH
16701: LD_INT 109
16703: EQUAL
16704: IFFALSE 16714
// sBetray := true ;
16706: LD_ADDR_EXP 73
16710: PUSH
16711: LD_INT 1
16713: ST_TO_ADDR
// if p3 = 110 then
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 110
16721: EQUAL
16722: IFFALSE 16732
// sContamin := true ;
16724: LD_ADDR_EXP 74
16728: PUSH
16729: LD_INT 1
16731: ST_TO_ADDR
// if p3 = 111 then
16732: LD_VAR 0 3
16736: PUSH
16737: LD_INT 111
16739: EQUAL
16740: IFFALSE 16750
// sOil := true ;
16742: LD_ADDR_EXP 76
16746: PUSH
16747: LD_INT 1
16749: ST_TO_ADDR
// if p3 = 112 then
16750: LD_VAR 0 3
16754: PUSH
16755: LD_INT 112
16757: EQUAL
16758: IFFALSE 16768
// sStu := true ;
16760: LD_ADDR_EXP 80
16764: PUSH
16765: LD_INT 1
16767: ST_TO_ADDR
// if p3 = 113 then
16768: LD_VAR 0 3
16772: PUSH
16773: LD_INT 113
16775: EQUAL
16776: IFFALSE 16786
// sBazooka := true ;
16778: LD_ADDR_EXP 83
16782: PUSH
16783: LD_INT 1
16785: ST_TO_ADDR
// if p3 = 114 then
16786: LD_VAR 0 3
16790: PUSH
16791: LD_INT 114
16793: EQUAL
16794: IFFALSE 16804
// sMortar := true ;
16796: LD_ADDR_EXP 84
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// if p3 = 115 then
16804: LD_VAR 0 3
16808: PUSH
16809: LD_INT 115
16811: EQUAL
16812: IFFALSE 16822
// sRanger := true ;
16814: LD_ADDR_EXP 94
16818: PUSH
16819: LD_INT 1
16821: ST_TO_ADDR
// if p3 = 116 then
16822: LD_VAR 0 3
16826: PUSH
16827: LD_INT 116
16829: EQUAL
16830: IFFALSE 16840
// sComputer := true ;
16832: LD_ADDR_EXP 95
16836: PUSH
16837: LD_INT 1
16839: ST_TO_ADDR
// if p3 = 117 then
16840: LD_VAR 0 3
16844: PUSH
16845: LD_INT 117
16847: EQUAL
16848: IFFALSE 16858
// s30 := true ;
16850: LD_ADDR_EXP 96
16854: PUSH
16855: LD_INT 1
16857: ST_TO_ADDR
// if p3 = 118 then
16858: LD_VAR 0 3
16862: PUSH
16863: LD_INT 118
16865: EQUAL
16866: IFFALSE 16876
// s60 := true ;
16868: LD_ADDR_EXP 97
16872: PUSH
16873: LD_INT 1
16875: ST_TO_ADDR
// end ; if p2 = hack_mode then
16876: LD_VAR 0 2
16880: PUSH
16881: LD_INT 101
16883: EQUAL
16884: IFFALSE 17012
// begin case p3 of 1 :
16886: LD_VAR 0 3
16890: PUSH
16891: LD_INT 1
16893: DOUBLE
16894: EQUAL
16895: IFTRUE 16899
16897: GO 16906
16899: POP
// hHackUnlimitedResources ; 2 :
16900: CALL 29159 0 0
16904: GO 17012
16906: LD_INT 2
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16921
16914: POP
// hHackSetLevel10 ; 3 :
16915: CALL 29292 0 0
16919: GO 17012
16921: LD_INT 3
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 16936
16929: POP
// hHackSetLevel10YourUnits ; 4 :
16930: CALL 29377 0 0
16934: GO 17012
16936: LD_INT 4
16938: DOUBLE
16939: EQUAL
16940: IFTRUE 16944
16942: GO 16951
16944: POP
// hHackInvincible ; 5 :
16945: CALL 29825 0 0
16949: GO 17012
16951: LD_INT 5
16953: DOUBLE
16954: EQUAL
16955: IFTRUE 16959
16957: GO 16966
16959: POP
// hHackInvisible ; 6 :
16960: CALL 29936 0 0
16964: GO 17012
16966: LD_INT 6
16968: DOUBLE
16969: EQUAL
16970: IFTRUE 16974
16972: GO 16981
16974: POP
// hHackChangeYourSide ; 7 :
16975: CALL 29993 0 0
16979: GO 17012
16981: LD_INT 7
16983: DOUBLE
16984: EQUAL
16985: IFTRUE 16989
16987: GO 16996
16989: POP
// hHackChangeUnitSide ; 8 :
16990: CALL 30035 0 0
16994: GO 17012
16996: LD_INT 8
16998: DOUBLE
16999: EQUAL
17000: IFTRUE 17004
17002: GO 17011
17004: POP
// hHackFog ; end ;
17005: CALL 30136 0 0
17009: GO 17012
17011: POP
// end ; if p2 = game_save_mode then
17012: LD_VAR 0 2
17016: PUSH
17017: LD_INT 102
17019: EQUAL
17020: IFFALSE 17075
// begin if p3 = 1 then
17022: LD_VAR 0 3
17026: PUSH
17027: LD_INT 1
17029: EQUAL
17030: IFFALSE 17042
// globalGameSaveCounter := p4 ;
17032: LD_ADDR_EXP 40
17036: PUSH
17037: LD_VAR 0 4
17041: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17042: LD_VAR 0 3
17046: PUSH
17047: LD_INT 2
17049: EQUAL
17050: PUSH
17051: LD_EXP 40
17055: AND
17056: IFFALSE 17075
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17058: LD_STRING setGameSaveCounter(
17060: PUSH
17061: LD_EXP 40
17065: STR
17066: PUSH
17067: LD_STRING )
17069: STR
17070: PPUSH
17071: CALL_OW 559
// end ; end ;
17075: LD_VAR 0 7
17079: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17080: LD_INT 0
17082: PPUSH
// streamModeActive := false ;
17083: LD_ADDR_EXP 41
17087: PUSH
17088: LD_INT 0
17090: ST_TO_ADDR
// normalCounter := 36 ;
17091: LD_ADDR_EXP 42
17095: PUSH
17096: LD_INT 36
17098: ST_TO_ADDR
// hardcoreCounter := 18 ;
17099: LD_ADDR_EXP 43
17103: PUSH
17104: LD_INT 18
17106: ST_TO_ADDR
// sRocket := false ;
17107: LD_ADDR_EXP 46
17111: PUSH
17112: LD_INT 0
17114: ST_TO_ADDR
// sSpeed := false ;
17115: LD_ADDR_EXP 45
17119: PUSH
17120: LD_INT 0
17122: ST_TO_ADDR
// sEngine := false ;
17123: LD_ADDR_EXP 47
17127: PUSH
17128: LD_INT 0
17130: ST_TO_ADDR
// sSpec := false ;
17131: LD_ADDR_EXP 44
17135: PUSH
17136: LD_INT 0
17138: ST_TO_ADDR
// sLevel := false ;
17139: LD_ADDR_EXP 48
17143: PUSH
17144: LD_INT 0
17146: ST_TO_ADDR
// sArmoury := false ;
17147: LD_ADDR_EXP 49
17151: PUSH
17152: LD_INT 0
17154: ST_TO_ADDR
// sRadar := false ;
17155: LD_ADDR_EXP 50
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// sBunker := false ;
17163: LD_ADDR_EXP 51
17167: PUSH
17168: LD_INT 0
17170: ST_TO_ADDR
// sHack := false ;
17171: LD_ADDR_EXP 52
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// sFire := false ;
17179: LD_ADDR_EXP 53
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// sRefresh := false ;
17187: LD_ADDR_EXP 54
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// sExp := false ;
17195: LD_ADDR_EXP 55
17199: PUSH
17200: LD_INT 0
17202: ST_TO_ADDR
// sDepot := false ;
17203: LD_ADDR_EXP 56
17207: PUSH
17208: LD_INT 0
17210: ST_TO_ADDR
// sFlag := false ;
17211: LD_ADDR_EXP 57
17215: PUSH
17216: LD_INT 0
17218: ST_TO_ADDR
// sKamikadze := false ;
17219: LD_ADDR_EXP 65
17223: PUSH
17224: LD_INT 0
17226: ST_TO_ADDR
// sTroll := false ;
17227: LD_ADDR_EXP 66
17231: PUSH
17232: LD_INT 0
17234: ST_TO_ADDR
// sSlow := false ;
17235: LD_ADDR_EXP 67
17239: PUSH
17240: LD_INT 0
17242: ST_TO_ADDR
// sLack := false ;
17243: LD_ADDR_EXP 68
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
// sTank := false ;
17251: LD_ADDR_EXP 70
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
// sRemote := false ;
17259: LD_ADDR_EXP 71
17263: PUSH
17264: LD_INT 0
17266: ST_TO_ADDR
// sPowell := false ;
17267: LD_ADDR_EXP 72
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// sTeleport := false ;
17275: LD_ADDR_EXP 75
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
// sOilTower := false ;
17283: LD_ADDR_EXP 77
17287: PUSH
17288: LD_INT 0
17290: ST_TO_ADDR
// sShovel := false ;
17291: LD_ADDR_EXP 78
17295: PUSH
17296: LD_INT 0
17298: ST_TO_ADDR
// sSheik := false ;
17299: LD_ADDR_EXP 79
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// sEarthquake := false ;
17307: LD_ADDR_EXP 81
17311: PUSH
17312: LD_INT 0
17314: ST_TO_ADDR
// sAI := false ;
17315: LD_ADDR_EXP 82
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// sCargo := false ;
17323: LD_ADDR_EXP 85
17327: PUSH
17328: LD_INT 0
17330: ST_TO_ADDR
// sDLaser := false ;
17331: LD_ADDR_EXP 86
17335: PUSH
17336: LD_INT 0
17338: ST_TO_ADDR
// sExchange := false ;
17339: LD_ADDR_EXP 87
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// sFac := false ;
17347: LD_ADDR_EXP 88
17351: PUSH
17352: LD_INT 0
17354: ST_TO_ADDR
// sPower := false ;
17355: LD_ADDR_EXP 89
17359: PUSH
17360: LD_INT 0
17362: ST_TO_ADDR
// sRandom := false ;
17363: LD_ADDR_EXP 90
17367: PUSH
17368: LD_INT 0
17370: ST_TO_ADDR
// sShield := false ;
17371: LD_ADDR_EXP 91
17375: PUSH
17376: LD_INT 0
17378: ST_TO_ADDR
// sTime := false ;
17379: LD_ADDR_EXP 92
17383: PUSH
17384: LD_INT 0
17386: ST_TO_ADDR
// sTools := false ;
17387: LD_ADDR_EXP 93
17391: PUSH
17392: LD_INT 0
17394: ST_TO_ADDR
// sSold := false ;
17395: LD_ADDR_EXP 58
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// sDiff := false ;
17403: LD_ADDR_EXP 59
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// sFog := false ;
17411: LD_ADDR_EXP 62
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// sReset := false ;
17419: LD_ADDR_EXP 63
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// sSun := false ;
17427: LD_ADDR_EXP 64
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// sTiger := false ;
17435: LD_ADDR_EXP 60
17439: PUSH
17440: LD_INT 0
17442: ST_TO_ADDR
// sBomb := false ;
17443: LD_ADDR_EXP 61
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// sWound := false ;
17451: LD_ADDR_EXP 69
17455: PUSH
17456: LD_INT 0
17458: ST_TO_ADDR
// sBetray := false ;
17459: LD_ADDR_EXP 73
17463: PUSH
17464: LD_INT 0
17466: ST_TO_ADDR
// sContamin := false ;
17467: LD_ADDR_EXP 74
17471: PUSH
17472: LD_INT 0
17474: ST_TO_ADDR
// sOil := false ;
17475: LD_ADDR_EXP 76
17479: PUSH
17480: LD_INT 0
17482: ST_TO_ADDR
// sStu := false ;
17483: LD_ADDR_EXP 80
17487: PUSH
17488: LD_INT 0
17490: ST_TO_ADDR
// sBazooka := false ;
17491: LD_ADDR_EXP 83
17495: PUSH
17496: LD_INT 0
17498: ST_TO_ADDR
// sMortar := false ;
17499: LD_ADDR_EXP 84
17503: PUSH
17504: LD_INT 0
17506: ST_TO_ADDR
// sRanger := false ;
17507: LD_ADDR_EXP 94
17511: PUSH
17512: LD_INT 0
17514: ST_TO_ADDR
// sComputer := false ;
17515: LD_ADDR_EXP 95
17519: PUSH
17520: LD_INT 0
17522: ST_TO_ADDR
// s30 := false ;
17523: LD_ADDR_EXP 96
17527: PUSH
17528: LD_INT 0
17530: ST_TO_ADDR
// s60 := false ;
17531: LD_ADDR_EXP 97
17535: PUSH
17536: LD_INT 0
17538: ST_TO_ADDR
// end ;
17539: LD_VAR 0 1
17543: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17544: LD_INT 0
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
17552: PPUSH
// result := [ ] ;
17553: LD_ADDR_VAR 0 2
17557: PUSH
17558: EMPTY
17559: ST_TO_ADDR
// if campaign_id = 1 then
17560: LD_OWVAR 69
17564: PUSH
17565: LD_INT 1
17567: EQUAL
17568: IFFALSE 20734
// begin case mission_number of 1 :
17570: LD_OWVAR 70
17574: PUSH
17575: LD_INT 1
17577: DOUBLE
17578: EQUAL
17579: IFTRUE 17583
17581: GO 17659
17583: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17584: LD_ADDR_VAR 0 2
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 4
17594: PUSH
17595: LD_INT 11
17597: PUSH
17598: LD_INT 12
17600: PUSH
17601: LD_INT 15
17603: PUSH
17604: LD_INT 16
17606: PUSH
17607: LD_INT 22
17609: PUSH
17610: LD_INT 23
17612: PUSH
17613: LD_INT 26
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 101
17629: PUSH
17630: LD_INT 102
17632: PUSH
17633: LD_INT 106
17635: PUSH
17636: LD_INT 116
17638: PUSH
17639: LD_INT 117
17641: PUSH
17642: LD_INT 118
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: ST_TO_ADDR
17657: GO 20732
17659: LD_INT 2
17661: DOUBLE
17662: EQUAL
17663: IFTRUE 17667
17665: GO 17751
17667: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17668: LD_ADDR_VAR 0 2
17672: PUSH
17673: LD_INT 2
17675: PUSH
17676: LD_INT 4
17678: PUSH
17679: LD_INT 11
17681: PUSH
17682: LD_INT 12
17684: PUSH
17685: LD_INT 15
17687: PUSH
17688: LD_INT 16
17690: PUSH
17691: LD_INT 22
17693: PUSH
17694: LD_INT 23
17696: PUSH
17697: LD_INT 26
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 101
17713: PUSH
17714: LD_INT 102
17716: PUSH
17717: LD_INT 105
17719: PUSH
17720: LD_INT 106
17722: PUSH
17723: LD_INT 108
17725: PUSH
17726: LD_INT 116
17728: PUSH
17729: LD_INT 117
17731: PUSH
17732: LD_INT 118
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: ST_TO_ADDR
17749: GO 20732
17751: LD_INT 3
17753: DOUBLE
17754: EQUAL
17755: IFTRUE 17759
17757: GO 17847
17759: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17760: LD_ADDR_VAR 0 2
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: LD_INT 4
17770: PUSH
17771: LD_INT 5
17773: PUSH
17774: LD_INT 11
17776: PUSH
17777: LD_INT 12
17779: PUSH
17780: LD_INT 15
17782: PUSH
17783: LD_INT 16
17785: PUSH
17786: LD_INT 22
17788: PUSH
17789: LD_INT 26
17791: PUSH
17792: LD_INT 36
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 101
17809: PUSH
17810: LD_INT 102
17812: PUSH
17813: LD_INT 105
17815: PUSH
17816: LD_INT 106
17818: PUSH
17819: LD_INT 108
17821: PUSH
17822: LD_INT 116
17824: PUSH
17825: LD_INT 117
17827: PUSH
17828: LD_INT 118
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: ST_TO_ADDR
17845: GO 20732
17847: LD_INT 4
17849: DOUBLE
17850: EQUAL
17851: IFTRUE 17855
17853: GO 17951
17855: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17856: LD_ADDR_VAR 0 2
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: LD_INT 4
17866: PUSH
17867: LD_INT 5
17869: PUSH
17870: LD_INT 8
17872: PUSH
17873: LD_INT 11
17875: PUSH
17876: LD_INT 12
17878: PUSH
17879: LD_INT 15
17881: PUSH
17882: LD_INT 16
17884: PUSH
17885: LD_INT 22
17887: PUSH
17888: LD_INT 23
17890: PUSH
17891: LD_INT 26
17893: PUSH
17894: LD_INT 36
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 101
17913: PUSH
17914: LD_INT 102
17916: PUSH
17917: LD_INT 105
17919: PUSH
17920: LD_INT 106
17922: PUSH
17923: LD_INT 108
17925: PUSH
17926: LD_INT 116
17928: PUSH
17929: LD_INT 117
17931: PUSH
17932: LD_INT 118
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: ST_TO_ADDR
17949: GO 20732
17951: LD_INT 5
17953: DOUBLE
17954: EQUAL
17955: IFTRUE 17959
17957: GO 18071
17959: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17960: LD_ADDR_VAR 0 2
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: LD_INT 4
17970: PUSH
17971: LD_INT 5
17973: PUSH
17974: LD_INT 6
17976: PUSH
17977: LD_INT 8
17979: PUSH
17980: LD_INT 11
17982: PUSH
17983: LD_INT 12
17985: PUSH
17986: LD_INT 15
17988: PUSH
17989: LD_INT 16
17991: PUSH
17992: LD_INT 22
17994: PUSH
17995: LD_INT 23
17997: PUSH
17998: LD_INT 25
18000: PUSH
18001: LD_INT 26
18003: PUSH
18004: LD_INT 36
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 101
18025: PUSH
18026: LD_INT 102
18028: PUSH
18029: LD_INT 105
18031: PUSH
18032: LD_INT 106
18034: PUSH
18035: LD_INT 108
18037: PUSH
18038: LD_INT 109
18040: PUSH
18041: LD_INT 112
18043: PUSH
18044: LD_INT 116
18046: PUSH
18047: LD_INT 117
18049: PUSH
18050: LD_INT 118
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: ST_TO_ADDR
18069: GO 20732
18071: LD_INT 6
18073: DOUBLE
18074: EQUAL
18075: IFTRUE 18079
18077: GO 18211
18079: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18080: LD_ADDR_VAR 0 2
18084: PUSH
18085: LD_INT 2
18087: PUSH
18088: LD_INT 4
18090: PUSH
18091: LD_INT 5
18093: PUSH
18094: LD_INT 6
18096: PUSH
18097: LD_INT 8
18099: PUSH
18100: LD_INT 11
18102: PUSH
18103: LD_INT 12
18105: PUSH
18106: LD_INT 15
18108: PUSH
18109: LD_INT 16
18111: PUSH
18112: LD_INT 20
18114: PUSH
18115: LD_INT 21
18117: PUSH
18118: LD_INT 22
18120: PUSH
18121: LD_INT 23
18123: PUSH
18124: LD_INT 25
18126: PUSH
18127: LD_INT 26
18129: PUSH
18130: LD_INT 30
18132: PUSH
18133: LD_INT 31
18135: PUSH
18136: LD_INT 32
18138: PUSH
18139: LD_INT 36
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 101
18165: PUSH
18166: LD_INT 102
18168: PUSH
18169: LD_INT 105
18171: PUSH
18172: LD_INT 106
18174: PUSH
18175: LD_INT 108
18177: PUSH
18178: LD_INT 109
18180: PUSH
18181: LD_INT 112
18183: PUSH
18184: LD_INT 116
18186: PUSH
18187: LD_INT 117
18189: PUSH
18190: LD_INT 118
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: ST_TO_ADDR
18209: GO 20732
18211: LD_INT 7
18213: DOUBLE
18214: EQUAL
18215: IFTRUE 18219
18217: GO 18331
18219: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: LD_INT 5
18233: PUSH
18234: LD_INT 7
18236: PUSH
18237: LD_INT 11
18239: PUSH
18240: LD_INT 12
18242: PUSH
18243: LD_INT 15
18245: PUSH
18246: LD_INT 16
18248: PUSH
18249: LD_INT 20
18251: PUSH
18252: LD_INT 21
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 23
18260: PUSH
18261: LD_INT 25
18263: PUSH
18264: LD_INT 26
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 101
18285: PUSH
18286: LD_INT 102
18288: PUSH
18289: LD_INT 103
18291: PUSH
18292: LD_INT 105
18294: PUSH
18295: LD_INT 106
18297: PUSH
18298: LD_INT 108
18300: PUSH
18301: LD_INT 112
18303: PUSH
18304: LD_INT 116
18306: PUSH
18307: LD_INT 117
18309: PUSH
18310: LD_INT 118
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: ST_TO_ADDR
18329: GO 20732
18331: LD_INT 8
18333: DOUBLE
18334: EQUAL
18335: IFTRUE 18339
18337: GO 18479
18339: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18340: LD_ADDR_VAR 0 2
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 4
18350: PUSH
18351: LD_INT 5
18353: PUSH
18354: LD_INT 6
18356: PUSH
18357: LD_INT 7
18359: PUSH
18360: LD_INT 8
18362: PUSH
18363: LD_INT 11
18365: PUSH
18366: LD_INT 12
18368: PUSH
18369: LD_INT 15
18371: PUSH
18372: LD_INT 16
18374: PUSH
18375: LD_INT 20
18377: PUSH
18378: LD_INT 21
18380: PUSH
18381: LD_INT 22
18383: PUSH
18384: LD_INT 23
18386: PUSH
18387: LD_INT 25
18389: PUSH
18390: LD_INT 26
18392: PUSH
18393: LD_INT 30
18395: PUSH
18396: LD_INT 31
18398: PUSH
18399: LD_INT 32
18401: PUSH
18402: LD_INT 36
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 101
18429: PUSH
18430: LD_INT 102
18432: PUSH
18433: LD_INT 103
18435: PUSH
18436: LD_INT 105
18438: PUSH
18439: LD_INT 106
18441: PUSH
18442: LD_INT 108
18444: PUSH
18445: LD_INT 109
18447: PUSH
18448: LD_INT 112
18450: PUSH
18451: LD_INT 116
18453: PUSH
18454: LD_INT 117
18456: PUSH
18457: LD_INT 118
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: ST_TO_ADDR
18477: GO 20732
18479: LD_INT 9
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18635
18487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: LD_INT 4
18498: PUSH
18499: LD_INT 5
18501: PUSH
18502: LD_INT 6
18504: PUSH
18505: LD_INT 7
18507: PUSH
18508: LD_INT 8
18510: PUSH
18511: LD_INT 11
18513: PUSH
18514: LD_INT 12
18516: PUSH
18517: LD_INT 15
18519: PUSH
18520: LD_INT 16
18522: PUSH
18523: LD_INT 20
18525: PUSH
18526: LD_INT 21
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_INT 23
18534: PUSH
18535: LD_INT 25
18537: PUSH
18538: LD_INT 26
18540: PUSH
18541: LD_INT 28
18543: PUSH
18544: LD_INT 30
18546: PUSH
18547: LD_INT 31
18549: PUSH
18550: LD_INT 32
18552: PUSH
18553: LD_INT 36
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 101
18581: PUSH
18582: LD_INT 102
18584: PUSH
18585: LD_INT 103
18587: PUSH
18588: LD_INT 105
18590: PUSH
18591: LD_INT 106
18593: PUSH
18594: LD_INT 108
18596: PUSH
18597: LD_INT 109
18599: PUSH
18600: LD_INT 112
18602: PUSH
18603: LD_INT 114
18605: PUSH
18606: LD_INT 116
18608: PUSH
18609: LD_INT 117
18611: PUSH
18612: LD_INT 118
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: ST_TO_ADDR
18633: GO 20732
18635: LD_INT 10
18637: DOUBLE
18638: EQUAL
18639: IFTRUE 18643
18641: GO 18839
18643: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18644: LD_ADDR_VAR 0 2
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: LD_INT 4
18654: PUSH
18655: LD_INT 5
18657: PUSH
18658: LD_INT 6
18660: PUSH
18661: LD_INT 7
18663: PUSH
18664: LD_INT 8
18666: PUSH
18667: LD_INT 9
18669: PUSH
18670: LD_INT 10
18672: PUSH
18673: LD_INT 11
18675: PUSH
18676: LD_INT 12
18678: PUSH
18679: LD_INT 13
18681: PUSH
18682: LD_INT 14
18684: PUSH
18685: LD_INT 15
18687: PUSH
18688: LD_INT 16
18690: PUSH
18691: LD_INT 17
18693: PUSH
18694: LD_INT 18
18696: PUSH
18697: LD_INT 19
18699: PUSH
18700: LD_INT 20
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 23
18711: PUSH
18712: LD_INT 24
18714: PUSH
18715: LD_INT 25
18717: PUSH
18718: LD_INT 26
18720: PUSH
18721: LD_INT 28
18723: PUSH
18724: LD_INT 30
18726: PUSH
18727: LD_INT 31
18729: PUSH
18730: LD_INT 32
18732: PUSH
18733: LD_INT 36
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 101
18769: PUSH
18770: LD_INT 102
18772: PUSH
18773: LD_INT 103
18775: PUSH
18776: LD_INT 104
18778: PUSH
18779: LD_INT 105
18781: PUSH
18782: LD_INT 106
18784: PUSH
18785: LD_INT 107
18787: PUSH
18788: LD_INT 108
18790: PUSH
18791: LD_INT 109
18793: PUSH
18794: LD_INT 110
18796: PUSH
18797: LD_INT 111
18799: PUSH
18800: LD_INT 112
18802: PUSH
18803: LD_INT 114
18805: PUSH
18806: LD_INT 116
18808: PUSH
18809: LD_INT 117
18811: PUSH
18812: LD_INT 118
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: ST_TO_ADDR
18837: GO 20732
18839: LD_INT 11
18841: DOUBLE
18842: EQUAL
18843: IFTRUE 18847
18845: GO 19051
18847: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18848: LD_ADDR_VAR 0 2
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: LD_INT 4
18861: PUSH
18862: LD_INT 5
18864: PUSH
18865: LD_INT 6
18867: PUSH
18868: LD_INT 7
18870: PUSH
18871: LD_INT 8
18873: PUSH
18874: LD_INT 9
18876: PUSH
18877: LD_INT 10
18879: PUSH
18880: LD_INT 11
18882: PUSH
18883: LD_INT 12
18885: PUSH
18886: LD_INT 13
18888: PUSH
18889: LD_INT 14
18891: PUSH
18892: LD_INT 15
18894: PUSH
18895: LD_INT 16
18897: PUSH
18898: LD_INT 17
18900: PUSH
18901: LD_INT 18
18903: PUSH
18904: LD_INT 19
18906: PUSH
18907: LD_INT 20
18909: PUSH
18910: LD_INT 21
18912: PUSH
18913: LD_INT 22
18915: PUSH
18916: LD_INT 23
18918: PUSH
18919: LD_INT 24
18921: PUSH
18922: LD_INT 25
18924: PUSH
18925: LD_INT 26
18927: PUSH
18928: LD_INT 28
18930: PUSH
18931: LD_INT 30
18933: PUSH
18934: LD_INT 31
18936: PUSH
18937: LD_INT 32
18939: PUSH
18940: LD_INT 34
18942: PUSH
18943: LD_INT 36
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 101
18981: PUSH
18982: LD_INT 102
18984: PUSH
18985: LD_INT 103
18987: PUSH
18988: LD_INT 104
18990: PUSH
18991: LD_INT 105
18993: PUSH
18994: LD_INT 106
18996: PUSH
18997: LD_INT 107
18999: PUSH
19000: LD_INT 108
19002: PUSH
19003: LD_INT 109
19005: PUSH
19006: LD_INT 110
19008: PUSH
19009: LD_INT 111
19011: PUSH
19012: LD_INT 112
19014: PUSH
19015: LD_INT 114
19017: PUSH
19018: LD_INT 116
19020: PUSH
19021: LD_INT 117
19023: PUSH
19024: LD_INT 118
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: ST_TO_ADDR
19049: GO 20732
19051: LD_INT 12
19053: DOUBLE
19054: EQUAL
19055: IFTRUE 19059
19057: GO 19279
19059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19060: LD_ADDR_VAR 0 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: LD_INT 4
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: LD_INT 6
19082: PUSH
19083: LD_INT 7
19085: PUSH
19086: LD_INT 8
19088: PUSH
19089: LD_INT 9
19091: PUSH
19092: LD_INT 10
19094: PUSH
19095: LD_INT 11
19097: PUSH
19098: LD_INT 12
19100: PUSH
19101: LD_INT 13
19103: PUSH
19104: LD_INT 14
19106: PUSH
19107: LD_INT 15
19109: PUSH
19110: LD_INT 16
19112: PUSH
19113: LD_INT 17
19115: PUSH
19116: LD_INT 18
19118: PUSH
19119: LD_INT 19
19121: PUSH
19122: LD_INT 20
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 22
19130: PUSH
19131: LD_INT 23
19133: PUSH
19134: LD_INT 24
19136: PUSH
19137: LD_INT 25
19139: PUSH
19140: LD_INT 26
19142: PUSH
19143: LD_INT 27
19145: PUSH
19146: LD_INT 28
19148: PUSH
19149: LD_INT 30
19151: PUSH
19152: LD_INT 31
19154: PUSH
19155: LD_INT 32
19157: PUSH
19158: LD_INT 33
19160: PUSH
19161: LD_INT 34
19163: PUSH
19164: LD_INT 36
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 101
19205: PUSH
19206: LD_INT 102
19208: PUSH
19209: LD_INT 103
19211: PUSH
19212: LD_INT 104
19214: PUSH
19215: LD_INT 105
19217: PUSH
19218: LD_INT 106
19220: PUSH
19221: LD_INT 107
19223: PUSH
19224: LD_INT 108
19226: PUSH
19227: LD_INT 109
19229: PUSH
19230: LD_INT 110
19232: PUSH
19233: LD_INT 111
19235: PUSH
19236: LD_INT 112
19238: PUSH
19239: LD_INT 113
19241: PUSH
19242: LD_INT 114
19244: PUSH
19245: LD_INT 116
19247: PUSH
19248: LD_INT 117
19250: PUSH
19251: LD_INT 118
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: ST_TO_ADDR
19277: GO 20732
19279: LD_INT 13
19281: DOUBLE
19282: EQUAL
19283: IFTRUE 19287
19285: GO 19495
19287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19288: LD_ADDR_VAR 0 2
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: LD_INT 3
19301: PUSH
19302: LD_INT 4
19304: PUSH
19305: LD_INT 5
19307: PUSH
19308: LD_INT 8
19310: PUSH
19311: LD_INT 9
19313: PUSH
19314: LD_INT 10
19316: PUSH
19317: LD_INT 11
19319: PUSH
19320: LD_INT 12
19322: PUSH
19323: LD_INT 14
19325: PUSH
19326: LD_INT 15
19328: PUSH
19329: LD_INT 16
19331: PUSH
19332: LD_INT 17
19334: PUSH
19335: LD_INT 18
19337: PUSH
19338: LD_INT 19
19340: PUSH
19341: LD_INT 20
19343: PUSH
19344: LD_INT 21
19346: PUSH
19347: LD_INT 22
19349: PUSH
19350: LD_INT 23
19352: PUSH
19353: LD_INT 24
19355: PUSH
19356: LD_INT 25
19358: PUSH
19359: LD_INT 26
19361: PUSH
19362: LD_INT 27
19364: PUSH
19365: LD_INT 28
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 31
19373: PUSH
19374: LD_INT 32
19376: PUSH
19377: LD_INT 33
19379: PUSH
19380: LD_INT 34
19382: PUSH
19383: LD_INT 36
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 101
19421: PUSH
19422: LD_INT 102
19424: PUSH
19425: LD_INT 103
19427: PUSH
19428: LD_INT 104
19430: PUSH
19431: LD_INT 105
19433: PUSH
19434: LD_INT 106
19436: PUSH
19437: LD_INT 107
19439: PUSH
19440: LD_INT 108
19442: PUSH
19443: LD_INT 109
19445: PUSH
19446: LD_INT 110
19448: PUSH
19449: LD_INT 111
19451: PUSH
19452: LD_INT 112
19454: PUSH
19455: LD_INT 113
19457: PUSH
19458: LD_INT 114
19460: PUSH
19461: LD_INT 116
19463: PUSH
19464: LD_INT 117
19466: PUSH
19467: LD_INT 118
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: ST_TO_ADDR
19493: GO 20732
19495: LD_INT 14
19497: DOUBLE
19498: EQUAL
19499: IFTRUE 19503
19501: GO 19727
19503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19504: LD_ADDR_VAR 0 2
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 3
19517: PUSH
19518: LD_INT 4
19520: PUSH
19521: LD_INT 5
19523: PUSH
19524: LD_INT 6
19526: PUSH
19527: LD_INT 7
19529: PUSH
19530: LD_INT 8
19532: PUSH
19533: LD_INT 9
19535: PUSH
19536: LD_INT 10
19538: PUSH
19539: LD_INT 11
19541: PUSH
19542: LD_INT 12
19544: PUSH
19545: LD_INT 13
19547: PUSH
19548: LD_INT 14
19550: PUSH
19551: LD_INT 15
19553: PUSH
19554: LD_INT 16
19556: PUSH
19557: LD_INT 17
19559: PUSH
19560: LD_INT 18
19562: PUSH
19563: LD_INT 19
19565: PUSH
19566: LD_INT 20
19568: PUSH
19569: LD_INT 21
19571: PUSH
19572: LD_INT 22
19574: PUSH
19575: LD_INT 23
19577: PUSH
19578: LD_INT 24
19580: PUSH
19581: LD_INT 25
19583: PUSH
19584: LD_INT 26
19586: PUSH
19587: LD_INT 27
19589: PUSH
19590: LD_INT 28
19592: PUSH
19593: LD_INT 29
19595: PUSH
19596: LD_INT 30
19598: PUSH
19599: LD_INT 31
19601: PUSH
19602: LD_INT 32
19604: PUSH
19605: LD_INT 33
19607: PUSH
19608: LD_INT 34
19610: PUSH
19611: LD_INT 36
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 101
19653: PUSH
19654: LD_INT 102
19656: PUSH
19657: LD_INT 103
19659: PUSH
19660: LD_INT 104
19662: PUSH
19663: LD_INT 105
19665: PUSH
19666: LD_INT 106
19668: PUSH
19669: LD_INT 107
19671: PUSH
19672: LD_INT 108
19674: PUSH
19675: LD_INT 109
19677: PUSH
19678: LD_INT 110
19680: PUSH
19681: LD_INT 111
19683: PUSH
19684: LD_INT 112
19686: PUSH
19687: LD_INT 113
19689: PUSH
19690: LD_INT 114
19692: PUSH
19693: LD_INT 116
19695: PUSH
19696: LD_INT 117
19698: PUSH
19699: LD_INT 118
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: ST_TO_ADDR
19725: GO 20732
19727: LD_INT 15
19729: DOUBLE
19730: EQUAL
19731: IFTRUE 19735
19733: GO 19959
19735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 4
19752: PUSH
19753: LD_INT 5
19755: PUSH
19756: LD_INT 6
19758: PUSH
19759: LD_INT 7
19761: PUSH
19762: LD_INT 8
19764: PUSH
19765: LD_INT 9
19767: PUSH
19768: LD_INT 10
19770: PUSH
19771: LD_INT 11
19773: PUSH
19774: LD_INT 12
19776: PUSH
19777: LD_INT 13
19779: PUSH
19780: LD_INT 14
19782: PUSH
19783: LD_INT 15
19785: PUSH
19786: LD_INT 16
19788: PUSH
19789: LD_INT 17
19791: PUSH
19792: LD_INT 18
19794: PUSH
19795: LD_INT 19
19797: PUSH
19798: LD_INT 20
19800: PUSH
19801: LD_INT 21
19803: PUSH
19804: LD_INT 22
19806: PUSH
19807: LD_INT 23
19809: PUSH
19810: LD_INT 24
19812: PUSH
19813: LD_INT 25
19815: PUSH
19816: LD_INT 26
19818: PUSH
19819: LD_INT 27
19821: PUSH
19822: LD_INT 28
19824: PUSH
19825: LD_INT 29
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 31
19833: PUSH
19834: LD_INT 32
19836: PUSH
19837: LD_INT 33
19839: PUSH
19840: LD_INT 34
19842: PUSH
19843: LD_INT 36
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 101
19885: PUSH
19886: LD_INT 102
19888: PUSH
19889: LD_INT 103
19891: PUSH
19892: LD_INT 104
19894: PUSH
19895: LD_INT 105
19897: PUSH
19898: LD_INT 106
19900: PUSH
19901: LD_INT 107
19903: PUSH
19904: LD_INT 108
19906: PUSH
19907: LD_INT 109
19909: PUSH
19910: LD_INT 110
19912: PUSH
19913: LD_INT 111
19915: PUSH
19916: LD_INT 112
19918: PUSH
19919: LD_INT 113
19921: PUSH
19922: LD_INT 114
19924: PUSH
19925: LD_INT 116
19927: PUSH
19928: LD_INT 117
19930: PUSH
19931: LD_INT 118
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: ST_TO_ADDR
19957: GO 20732
19959: LD_INT 16
19961: DOUBLE
19962: EQUAL
19963: IFTRUE 19967
19965: GO 20103
19967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19968: LD_ADDR_VAR 0 2
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: LD_INT 4
19978: PUSH
19979: LD_INT 5
19981: PUSH
19982: LD_INT 7
19984: PUSH
19985: LD_INT 11
19987: PUSH
19988: LD_INT 12
19990: PUSH
19991: LD_INT 15
19993: PUSH
19994: LD_INT 16
19996: PUSH
19997: LD_INT 20
19999: PUSH
20000: LD_INT 21
20002: PUSH
20003: LD_INT 22
20005: PUSH
20006: LD_INT 23
20008: PUSH
20009: LD_INT 25
20011: PUSH
20012: LD_INT 26
20014: PUSH
20015: LD_INT 30
20017: PUSH
20018: LD_INT 31
20020: PUSH
20021: LD_INT 32
20023: PUSH
20024: LD_INT 33
20026: PUSH
20027: LD_INT 34
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 101
20053: PUSH
20054: LD_INT 102
20056: PUSH
20057: LD_INT 103
20059: PUSH
20060: LD_INT 106
20062: PUSH
20063: LD_INT 108
20065: PUSH
20066: LD_INT 112
20068: PUSH
20069: LD_INT 113
20071: PUSH
20072: LD_INT 114
20074: PUSH
20075: LD_INT 116
20077: PUSH
20078: LD_INT 117
20080: PUSH
20081: LD_INT 118
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: ST_TO_ADDR
20101: GO 20732
20103: LD_INT 17
20105: DOUBLE
20106: EQUAL
20107: IFTRUE 20111
20109: GO 20335
20111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20112: LD_ADDR_VAR 0 2
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: LD_INT 3
20125: PUSH
20126: LD_INT 4
20128: PUSH
20129: LD_INT 5
20131: PUSH
20132: LD_INT 6
20134: PUSH
20135: LD_INT 7
20137: PUSH
20138: LD_INT 8
20140: PUSH
20141: LD_INT 9
20143: PUSH
20144: LD_INT 10
20146: PUSH
20147: LD_INT 11
20149: PUSH
20150: LD_INT 12
20152: PUSH
20153: LD_INT 13
20155: PUSH
20156: LD_INT 14
20158: PUSH
20159: LD_INT 15
20161: PUSH
20162: LD_INT 16
20164: PUSH
20165: LD_INT 17
20167: PUSH
20168: LD_INT 18
20170: PUSH
20171: LD_INT 19
20173: PUSH
20174: LD_INT 20
20176: PUSH
20177: LD_INT 21
20179: PUSH
20180: LD_INT 22
20182: PUSH
20183: LD_INT 23
20185: PUSH
20186: LD_INT 24
20188: PUSH
20189: LD_INT 25
20191: PUSH
20192: LD_INT 26
20194: PUSH
20195: LD_INT 27
20197: PUSH
20198: LD_INT 28
20200: PUSH
20201: LD_INT 29
20203: PUSH
20204: LD_INT 30
20206: PUSH
20207: LD_INT 31
20209: PUSH
20210: LD_INT 32
20212: PUSH
20213: LD_INT 33
20215: PUSH
20216: LD_INT 34
20218: PUSH
20219: LD_INT 36
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 101
20261: PUSH
20262: LD_INT 102
20264: PUSH
20265: LD_INT 103
20267: PUSH
20268: LD_INT 104
20270: PUSH
20271: LD_INT 105
20273: PUSH
20274: LD_INT 106
20276: PUSH
20277: LD_INT 107
20279: PUSH
20280: LD_INT 108
20282: PUSH
20283: LD_INT 109
20285: PUSH
20286: LD_INT 110
20288: PUSH
20289: LD_INT 111
20291: PUSH
20292: LD_INT 112
20294: PUSH
20295: LD_INT 113
20297: PUSH
20298: LD_INT 114
20300: PUSH
20301: LD_INT 116
20303: PUSH
20304: LD_INT 117
20306: PUSH
20307: LD_INT 118
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: ST_TO_ADDR
20333: GO 20732
20335: LD_INT 18
20337: DOUBLE
20338: EQUAL
20339: IFTRUE 20343
20341: GO 20491
20343: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 4
20354: PUSH
20355: LD_INT 5
20357: PUSH
20358: LD_INT 7
20360: PUSH
20361: LD_INT 11
20363: PUSH
20364: LD_INT 12
20366: PUSH
20367: LD_INT 15
20369: PUSH
20370: LD_INT 16
20372: PUSH
20373: LD_INT 20
20375: PUSH
20376: LD_INT 21
20378: PUSH
20379: LD_INT 22
20381: PUSH
20382: LD_INT 23
20384: PUSH
20385: LD_INT 25
20387: PUSH
20388: LD_INT 26
20390: PUSH
20391: LD_INT 30
20393: PUSH
20394: LD_INT 31
20396: PUSH
20397: LD_INT 32
20399: PUSH
20400: LD_INT 33
20402: PUSH
20403: LD_INT 34
20405: PUSH
20406: LD_INT 35
20408: PUSH
20409: LD_INT 36
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 101
20437: PUSH
20438: LD_INT 102
20440: PUSH
20441: LD_INT 103
20443: PUSH
20444: LD_INT 106
20446: PUSH
20447: LD_INT 108
20449: PUSH
20450: LD_INT 112
20452: PUSH
20453: LD_INT 113
20455: PUSH
20456: LD_INT 114
20458: PUSH
20459: LD_INT 115
20461: PUSH
20462: LD_INT 116
20464: PUSH
20465: LD_INT 117
20467: PUSH
20468: LD_INT 118
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: ST_TO_ADDR
20489: GO 20732
20491: LD_INT 19
20493: DOUBLE
20494: EQUAL
20495: IFTRUE 20499
20497: GO 20731
20499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20500: LD_ADDR_VAR 0 2
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: LD_INT 3
20513: PUSH
20514: LD_INT 4
20516: PUSH
20517: LD_INT 5
20519: PUSH
20520: LD_INT 6
20522: PUSH
20523: LD_INT 7
20525: PUSH
20526: LD_INT 8
20528: PUSH
20529: LD_INT 9
20531: PUSH
20532: LD_INT 10
20534: PUSH
20535: LD_INT 11
20537: PUSH
20538: LD_INT 12
20540: PUSH
20541: LD_INT 13
20543: PUSH
20544: LD_INT 14
20546: PUSH
20547: LD_INT 15
20549: PUSH
20550: LD_INT 16
20552: PUSH
20553: LD_INT 17
20555: PUSH
20556: LD_INT 18
20558: PUSH
20559: LD_INT 19
20561: PUSH
20562: LD_INT 20
20564: PUSH
20565: LD_INT 21
20567: PUSH
20568: LD_INT 22
20570: PUSH
20571: LD_INT 23
20573: PUSH
20574: LD_INT 24
20576: PUSH
20577: LD_INT 25
20579: PUSH
20580: LD_INT 26
20582: PUSH
20583: LD_INT 27
20585: PUSH
20586: LD_INT 28
20588: PUSH
20589: LD_INT 29
20591: PUSH
20592: LD_INT 30
20594: PUSH
20595: LD_INT 31
20597: PUSH
20598: LD_INT 32
20600: PUSH
20601: LD_INT 33
20603: PUSH
20604: LD_INT 34
20606: PUSH
20607: LD_INT 35
20609: PUSH
20610: LD_INT 36
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 101
20653: PUSH
20654: LD_INT 102
20656: PUSH
20657: LD_INT 103
20659: PUSH
20660: LD_INT 104
20662: PUSH
20663: LD_INT 105
20665: PUSH
20666: LD_INT 106
20668: PUSH
20669: LD_INT 107
20671: PUSH
20672: LD_INT 108
20674: PUSH
20675: LD_INT 109
20677: PUSH
20678: LD_INT 110
20680: PUSH
20681: LD_INT 111
20683: PUSH
20684: LD_INT 112
20686: PUSH
20687: LD_INT 113
20689: PUSH
20690: LD_INT 114
20692: PUSH
20693: LD_INT 115
20695: PUSH
20696: LD_INT 116
20698: PUSH
20699: LD_INT 117
20701: PUSH
20702: LD_INT 118
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: ST_TO_ADDR
20729: GO 20732
20731: POP
// end else
20732: GO 20963
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20734: LD_ADDR_VAR 0 2
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 3
20747: PUSH
20748: LD_INT 4
20750: PUSH
20751: LD_INT 5
20753: PUSH
20754: LD_INT 6
20756: PUSH
20757: LD_INT 7
20759: PUSH
20760: LD_INT 8
20762: PUSH
20763: LD_INT 9
20765: PUSH
20766: LD_INT 10
20768: PUSH
20769: LD_INT 11
20771: PUSH
20772: LD_INT 12
20774: PUSH
20775: LD_INT 13
20777: PUSH
20778: LD_INT 14
20780: PUSH
20781: LD_INT 15
20783: PUSH
20784: LD_INT 16
20786: PUSH
20787: LD_INT 17
20789: PUSH
20790: LD_INT 18
20792: PUSH
20793: LD_INT 19
20795: PUSH
20796: LD_INT 20
20798: PUSH
20799: LD_INT 21
20801: PUSH
20802: LD_INT 22
20804: PUSH
20805: LD_INT 23
20807: PUSH
20808: LD_INT 24
20810: PUSH
20811: LD_INT 25
20813: PUSH
20814: LD_INT 26
20816: PUSH
20817: LD_INT 27
20819: PUSH
20820: LD_INT 28
20822: PUSH
20823: LD_INT 29
20825: PUSH
20826: LD_INT 30
20828: PUSH
20829: LD_INT 31
20831: PUSH
20832: LD_INT 32
20834: PUSH
20835: LD_INT 33
20837: PUSH
20838: LD_INT 34
20840: PUSH
20841: LD_INT 35
20843: PUSH
20844: LD_INT 36
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 101
20887: PUSH
20888: LD_INT 102
20890: PUSH
20891: LD_INT 103
20893: PUSH
20894: LD_INT 104
20896: PUSH
20897: LD_INT 105
20899: PUSH
20900: LD_INT 106
20902: PUSH
20903: LD_INT 107
20905: PUSH
20906: LD_INT 108
20908: PUSH
20909: LD_INT 109
20911: PUSH
20912: LD_INT 110
20914: PUSH
20915: LD_INT 111
20917: PUSH
20918: LD_INT 112
20920: PUSH
20921: LD_INT 113
20923: PUSH
20924: LD_INT 114
20926: PUSH
20927: LD_INT 115
20929: PUSH
20930: LD_INT 116
20932: PUSH
20933: LD_INT 117
20935: PUSH
20936: LD_INT 118
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: ST_TO_ADDR
// if result then
20963: LD_VAR 0 2
20967: IFFALSE 21753
// begin normal :=  ;
20969: LD_ADDR_VAR 0 5
20973: PUSH
20974: LD_STRING 
20976: ST_TO_ADDR
// hardcore :=  ;
20977: LD_ADDR_VAR 0 6
20981: PUSH
20982: LD_STRING 
20984: ST_TO_ADDR
// active :=  ;
20985: LD_ADDR_VAR 0 7
20989: PUSH
20990: LD_STRING 
20992: ST_TO_ADDR
// for i = 1 to normalCounter do
20993: LD_ADDR_VAR 0 8
20997: PUSH
20998: DOUBLE
20999: LD_INT 1
21001: DEC
21002: ST_TO_ADDR
21003: LD_EXP 42
21007: PUSH
21008: FOR_TO
21009: IFFALSE 21110
// begin tmp := 0 ;
21011: LD_ADDR_VAR 0 3
21015: PUSH
21016: LD_STRING 0
21018: ST_TO_ADDR
// if result [ 1 ] then
21019: LD_VAR 0 2
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: IFFALSE 21092
// if result [ 1 ] [ 1 ] = i then
21029: LD_VAR 0 2
21033: PUSH
21034: LD_INT 1
21036: ARRAY
21037: PUSH
21038: LD_INT 1
21040: ARRAY
21041: PUSH
21042: LD_VAR 0 8
21046: EQUAL
21047: IFFALSE 21092
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21049: LD_ADDR_VAR 0 2
21053: PUSH
21054: LD_VAR 0 2
21058: PPUSH
21059: LD_INT 1
21061: PPUSH
21062: LD_VAR 0 2
21066: PUSH
21067: LD_INT 1
21069: ARRAY
21070: PPUSH
21071: LD_INT 1
21073: PPUSH
21074: CALL_OW 3
21078: PPUSH
21079: CALL_OW 1
21083: ST_TO_ADDR
// tmp := 1 ;
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_STRING 1
21091: ST_TO_ADDR
// end ; normal := normal & tmp ;
21092: LD_ADDR_VAR 0 5
21096: PUSH
21097: LD_VAR 0 5
21101: PUSH
21102: LD_VAR 0 3
21106: STR
21107: ST_TO_ADDR
// end ;
21108: GO 21008
21110: POP
21111: POP
// for i = 1 to hardcoreCounter do
21112: LD_ADDR_VAR 0 8
21116: PUSH
21117: DOUBLE
21118: LD_INT 1
21120: DEC
21121: ST_TO_ADDR
21122: LD_EXP 43
21126: PUSH
21127: FOR_TO
21128: IFFALSE 21233
// begin tmp := 0 ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_STRING 0
21137: ST_TO_ADDR
// if result [ 2 ] then
21138: LD_VAR 0 2
21142: PUSH
21143: LD_INT 2
21145: ARRAY
21146: IFFALSE 21215
// if result [ 2 ] [ 1 ] = 100 + i then
21148: LD_VAR 0 2
21152: PUSH
21153: LD_INT 2
21155: ARRAY
21156: PUSH
21157: LD_INT 1
21159: ARRAY
21160: PUSH
21161: LD_INT 100
21163: PUSH
21164: LD_VAR 0 8
21168: PLUS
21169: EQUAL
21170: IFFALSE 21215
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21172: LD_ADDR_VAR 0 2
21176: PUSH
21177: LD_VAR 0 2
21181: PPUSH
21182: LD_INT 2
21184: PPUSH
21185: LD_VAR 0 2
21189: PUSH
21190: LD_INT 2
21192: ARRAY
21193: PPUSH
21194: LD_INT 1
21196: PPUSH
21197: CALL_OW 3
21201: PPUSH
21202: CALL_OW 1
21206: ST_TO_ADDR
// tmp := 1 ;
21207: LD_ADDR_VAR 0 3
21211: PUSH
21212: LD_STRING 1
21214: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21215: LD_ADDR_VAR 0 6
21219: PUSH
21220: LD_VAR 0 6
21224: PUSH
21225: LD_VAR 0 3
21229: STR
21230: ST_TO_ADDR
// end ;
21231: GO 21127
21233: POP
21234: POP
// if isGameLoad then
21235: LD_VAR 0 1
21239: IFFALSE 21714
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21241: LD_ADDR_VAR 0 4
21245: PUSH
21246: LD_EXP 46
21250: PUSH
21251: LD_EXP 45
21255: PUSH
21256: LD_EXP 47
21260: PUSH
21261: LD_EXP 44
21265: PUSH
21266: LD_EXP 48
21270: PUSH
21271: LD_EXP 49
21275: PUSH
21276: LD_EXP 50
21280: PUSH
21281: LD_EXP 51
21285: PUSH
21286: LD_EXP 52
21290: PUSH
21291: LD_EXP 53
21295: PUSH
21296: LD_EXP 54
21300: PUSH
21301: LD_EXP 55
21305: PUSH
21306: LD_EXP 56
21310: PUSH
21311: LD_EXP 57
21315: PUSH
21316: LD_EXP 65
21320: PUSH
21321: LD_EXP 66
21325: PUSH
21326: LD_EXP 67
21330: PUSH
21331: LD_EXP 68
21335: PUSH
21336: LD_EXP 70
21340: PUSH
21341: LD_EXP 71
21345: PUSH
21346: LD_EXP 72
21350: PUSH
21351: LD_EXP 75
21355: PUSH
21356: LD_EXP 77
21360: PUSH
21361: LD_EXP 78
21365: PUSH
21366: LD_EXP 79
21370: PUSH
21371: LD_EXP 81
21375: PUSH
21376: LD_EXP 82
21380: PUSH
21381: LD_EXP 85
21385: PUSH
21386: LD_EXP 86
21390: PUSH
21391: LD_EXP 87
21395: PUSH
21396: LD_EXP 88
21400: PUSH
21401: LD_EXP 89
21405: PUSH
21406: LD_EXP 90
21410: PUSH
21411: LD_EXP 91
21415: PUSH
21416: LD_EXP 92
21420: PUSH
21421: LD_EXP 93
21425: PUSH
21426: LD_EXP 58
21430: PUSH
21431: LD_EXP 59
21435: PUSH
21436: LD_EXP 62
21440: PUSH
21441: LD_EXP 63
21445: PUSH
21446: LD_EXP 64
21450: PUSH
21451: LD_EXP 60
21455: PUSH
21456: LD_EXP 61
21460: PUSH
21461: LD_EXP 69
21465: PUSH
21466: LD_EXP 73
21470: PUSH
21471: LD_EXP 74
21475: PUSH
21476: LD_EXP 76
21480: PUSH
21481: LD_EXP 80
21485: PUSH
21486: LD_EXP 83
21490: PUSH
21491: LD_EXP 84
21495: PUSH
21496: LD_EXP 94
21500: PUSH
21501: LD_EXP 95
21505: PUSH
21506: LD_EXP 96
21510: PUSH
21511: LD_EXP 97
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: ST_TO_ADDR
// tmp :=  ;
21572: LD_ADDR_VAR 0 3
21576: PUSH
21577: LD_STRING 
21579: ST_TO_ADDR
// for i = 1 to normalCounter do
21580: LD_ADDR_VAR 0 8
21584: PUSH
21585: DOUBLE
21586: LD_INT 1
21588: DEC
21589: ST_TO_ADDR
21590: LD_EXP 42
21594: PUSH
21595: FOR_TO
21596: IFFALSE 21632
// begin if flags [ i ] then
21598: LD_VAR 0 4
21602: PUSH
21603: LD_VAR 0 8
21607: ARRAY
21608: IFFALSE 21630
// tmp := tmp & i & ; ;
21610: LD_ADDR_VAR 0 3
21614: PUSH
21615: LD_VAR 0 3
21619: PUSH
21620: LD_VAR 0 8
21624: STR
21625: PUSH
21626: LD_STRING ;
21628: STR
21629: ST_TO_ADDR
// end ;
21630: GO 21595
21632: POP
21633: POP
// for i = 1 to hardcoreCounter do
21634: LD_ADDR_VAR 0 8
21638: PUSH
21639: DOUBLE
21640: LD_INT 1
21642: DEC
21643: ST_TO_ADDR
21644: LD_EXP 43
21648: PUSH
21649: FOR_TO
21650: IFFALSE 21696
// begin if flags [ normalCounter + i ] then
21652: LD_VAR 0 4
21656: PUSH
21657: LD_EXP 42
21661: PUSH
21662: LD_VAR 0 8
21666: PLUS
21667: ARRAY
21668: IFFALSE 21694
// tmp := tmp & ( 100 + i ) & ; ;
21670: LD_ADDR_VAR 0 3
21674: PUSH
21675: LD_VAR 0 3
21679: PUSH
21680: LD_INT 100
21682: PUSH
21683: LD_VAR 0 8
21687: PLUS
21688: STR
21689: PUSH
21690: LD_STRING ;
21692: STR
21693: ST_TO_ADDR
// end ;
21694: GO 21649
21696: POP
21697: POP
// if tmp then
21698: LD_VAR 0 3
21702: IFFALSE 21714
// active := tmp ;
21704: LD_ADDR_VAR 0 7
21708: PUSH
21709: LD_VAR 0 3
21713: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21714: LD_STRING getStreamItemsFromMission("
21716: PUSH
21717: LD_VAR 0 5
21721: STR
21722: PUSH
21723: LD_STRING ","
21725: STR
21726: PUSH
21727: LD_VAR 0 6
21731: STR
21732: PUSH
21733: LD_STRING ","
21735: STR
21736: PUSH
21737: LD_VAR 0 7
21741: STR
21742: PUSH
21743: LD_STRING ")
21745: STR
21746: PPUSH
21747: CALL_OW 559
// end else
21751: GO 21760
// ToLua ( getStreamItemsFromMission("","","") ) ;
21753: LD_STRING getStreamItemsFromMission("","","")
21755: PPUSH
21756: CALL_OW 559
// end ;
21760: LD_VAR 0 2
21764: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21765: LD_EXP 41
21769: PUSH
21770: LD_EXP 46
21774: AND
21775: IFFALSE 21899
21777: GO 21779
21779: DISABLE
21780: LD_INT 0
21782: PPUSH
21783: PPUSH
// begin enable ;
21784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21785: LD_ADDR_VAR 0 2
21789: PUSH
21790: LD_INT 22
21792: PUSH
21793: LD_OWVAR 2
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: LD_INT 34
21807: PUSH
21808: LD_INT 7
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 34
21817: PUSH
21818: LD_INT 45
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 34
21827: PUSH
21828: LD_INT 28
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 34
21837: PUSH
21838: LD_INT 47
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PPUSH
21856: CALL_OW 69
21860: ST_TO_ADDR
// if not tmp then
21861: LD_VAR 0 2
21865: NOT
21866: IFFALSE 21870
// exit ;
21868: GO 21899
// for i in tmp do
21870: LD_ADDR_VAR 0 1
21874: PUSH
21875: LD_VAR 0 2
21879: PUSH
21880: FOR_IN
21881: IFFALSE 21897
// begin SetLives ( i , 0 ) ;
21883: LD_VAR 0 1
21887: PPUSH
21888: LD_INT 0
21890: PPUSH
21891: CALL_OW 234
// end ;
21895: GO 21880
21897: POP
21898: POP
// end ;
21899: PPOPN 2
21901: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21902: LD_EXP 41
21906: PUSH
21907: LD_EXP 47
21911: AND
21912: IFFALSE 21996
21914: GO 21916
21916: DISABLE
21917: LD_INT 0
21919: PPUSH
21920: PPUSH
// begin enable ;
21921: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21922: LD_ADDR_VAR 0 2
21926: PUSH
21927: LD_INT 22
21929: PUSH
21930: LD_OWVAR 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 32
21941: PUSH
21942: LD_INT 3
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 69
21957: ST_TO_ADDR
// if not tmp then
21958: LD_VAR 0 2
21962: NOT
21963: IFFALSE 21967
// exit ;
21965: GO 21996
// for i in tmp do
21967: LD_ADDR_VAR 0 1
21971: PUSH
21972: LD_VAR 0 2
21976: PUSH
21977: FOR_IN
21978: IFFALSE 21994
// begin SetLives ( i , 0 ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: LD_INT 0
21987: PPUSH
21988: CALL_OW 234
// end ;
21992: GO 21977
21994: POP
21995: POP
// end ;
21996: PPOPN 2
21998: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21999: LD_EXP 41
22003: PUSH
22004: LD_EXP 44
22008: AND
22009: IFFALSE 22102
22011: GO 22013
22013: DISABLE
22014: LD_INT 0
22016: PPUSH
// begin enable ;
22017: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22018: LD_ADDR_VAR 0 1
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_OWVAR 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 25
22040: PUSH
22041: LD_INT 5
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 25
22050: PUSH
22051: LD_INT 9
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 25
22060: PUSH
22061: LD_INT 8
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PPUSH
22078: CALL_OW 69
22082: PUSH
22083: FOR_IN
22084: IFFALSE 22100
// begin SetClass ( i , 1 ) ;
22086: LD_VAR 0 1
22090: PPUSH
22091: LD_INT 1
22093: PPUSH
22094: CALL_OW 336
// end ;
22098: GO 22083
22100: POP
22101: POP
// end ;
22102: PPOPN 1
22104: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22105: LD_EXP 41
22109: PUSH
22110: LD_EXP 45
22114: AND
22115: PUSH
22116: LD_OWVAR 65
22120: PUSH
22121: LD_INT 7
22123: LESS
22124: AND
22125: IFFALSE 22139
22127: GO 22129
22129: DISABLE
// begin enable ;
22130: ENABLE
// game_speed := 7 ;
22131: LD_ADDR_OWVAR 65
22135: PUSH
22136: LD_INT 7
22138: ST_TO_ADDR
// end ;
22139: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22140: LD_EXP 41
22144: PUSH
22145: LD_EXP 48
22149: AND
22150: IFFALSE 22352
22152: GO 22154
22154: DISABLE
22155: LD_INT 0
22157: PPUSH
22158: PPUSH
22159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22160: LD_ADDR_VAR 0 3
22164: PUSH
22165: LD_INT 81
22167: PUSH
22168: LD_OWVAR 2
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 21
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 69
22195: ST_TO_ADDR
// if not tmp then
22196: LD_VAR 0 3
22200: NOT
22201: IFFALSE 22205
// exit ;
22203: GO 22352
// if tmp > 5 then
22205: LD_VAR 0 3
22209: PUSH
22210: LD_INT 5
22212: GREATER
22213: IFFALSE 22225
// k := 5 else
22215: LD_ADDR_VAR 0 2
22219: PUSH
22220: LD_INT 5
22222: ST_TO_ADDR
22223: GO 22235
// k := tmp ;
22225: LD_ADDR_VAR 0 2
22229: PUSH
22230: LD_VAR 0 3
22234: ST_TO_ADDR
// for i := 1 to k do
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: DOUBLE
22241: LD_INT 1
22243: DEC
22244: ST_TO_ADDR
22245: LD_VAR 0 2
22249: PUSH
22250: FOR_TO
22251: IFFALSE 22350
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22253: LD_VAR 0 3
22257: PUSH
22258: LD_VAR 0 1
22262: ARRAY
22263: PPUSH
22264: LD_VAR 0 1
22268: PUSH
22269: LD_INT 4
22271: MOD
22272: PUSH
22273: LD_INT 1
22275: PLUS
22276: PPUSH
22277: CALL_OW 259
22281: PUSH
22282: LD_INT 10
22284: LESS
22285: IFFALSE 22348
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22287: LD_VAR 0 3
22291: PUSH
22292: LD_VAR 0 1
22296: ARRAY
22297: PPUSH
22298: LD_VAR 0 1
22302: PUSH
22303: LD_INT 4
22305: MOD
22306: PUSH
22307: LD_INT 1
22309: PLUS
22310: PPUSH
22311: LD_VAR 0 3
22315: PUSH
22316: LD_VAR 0 1
22320: ARRAY
22321: PPUSH
22322: LD_VAR 0 1
22326: PUSH
22327: LD_INT 4
22329: MOD
22330: PUSH
22331: LD_INT 1
22333: PLUS
22334: PPUSH
22335: CALL_OW 259
22339: PUSH
22340: LD_INT 1
22342: PLUS
22343: PPUSH
22344: CALL_OW 237
22348: GO 22250
22350: POP
22351: POP
// end ;
22352: PPOPN 3
22354: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22355: LD_EXP 41
22359: PUSH
22360: LD_EXP 49
22364: AND
22365: IFFALSE 22385
22367: GO 22369
22369: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22370: LD_INT 4
22372: PPUSH
22373: LD_OWVAR 2
22377: PPUSH
22378: LD_INT 0
22380: PPUSH
22381: CALL_OW 324
22385: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22386: LD_EXP 41
22390: PUSH
22391: LD_EXP 78
22395: AND
22396: IFFALSE 22416
22398: GO 22400
22400: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22401: LD_INT 19
22403: PPUSH
22404: LD_OWVAR 2
22408: PPUSH
22409: LD_INT 0
22411: PPUSH
22412: CALL_OW 324
22416: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22417: LD_EXP 41
22421: PUSH
22422: LD_EXP 50
22426: AND
22427: IFFALSE 22529
22429: GO 22431
22431: DISABLE
22432: LD_INT 0
22434: PPUSH
22435: PPUSH
// begin enable ;
22436: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: LD_INT 22
22444: PUSH
22445: LD_OWVAR 2
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 34
22459: PUSH
22460: LD_INT 11
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 34
22469: PUSH
22470: LD_INT 30
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PPUSH
22486: CALL_OW 69
22490: ST_TO_ADDR
// if not tmp then
22491: LD_VAR 0 2
22495: NOT
22496: IFFALSE 22500
// exit ;
22498: GO 22529
// for i in tmp do
22500: LD_ADDR_VAR 0 1
22504: PUSH
22505: LD_VAR 0 2
22509: PUSH
22510: FOR_IN
22511: IFFALSE 22527
// begin SetLives ( i , 0 ) ;
22513: LD_VAR 0 1
22517: PPUSH
22518: LD_INT 0
22520: PPUSH
22521: CALL_OW 234
// end ;
22525: GO 22510
22527: POP
22528: POP
// end ;
22529: PPOPN 2
22531: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22532: LD_EXP 41
22536: PUSH
22537: LD_EXP 51
22541: AND
22542: IFFALSE 22562
22544: GO 22546
22546: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22547: LD_INT 32
22549: PPUSH
22550: LD_OWVAR 2
22554: PPUSH
22555: LD_INT 0
22557: PPUSH
22558: CALL_OW 324
22562: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22563: LD_EXP 41
22567: PUSH
22568: LD_EXP 52
22572: AND
22573: IFFALSE 22754
22575: GO 22577
22577: DISABLE
22578: LD_INT 0
22580: PPUSH
22581: PPUSH
22582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22583: LD_ADDR_VAR 0 2
22587: PUSH
22588: LD_INT 22
22590: PUSH
22591: LD_OWVAR 2
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 33
22602: PUSH
22603: LD_INT 3
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PPUSH
22614: CALL_OW 69
22618: ST_TO_ADDR
// if not tmp then
22619: LD_VAR 0 2
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 22754
// side := 0 ;
22628: LD_ADDR_VAR 0 3
22632: PUSH
22633: LD_INT 0
22635: ST_TO_ADDR
// for i := 1 to 8 do
22636: LD_ADDR_VAR 0 1
22640: PUSH
22641: DOUBLE
22642: LD_INT 1
22644: DEC
22645: ST_TO_ADDR
22646: LD_INT 8
22648: PUSH
22649: FOR_TO
22650: IFFALSE 22698
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22652: LD_OWVAR 2
22656: PUSH
22657: LD_VAR 0 1
22661: NONEQUAL
22662: PUSH
22663: LD_OWVAR 2
22667: PPUSH
22668: LD_VAR 0 1
22672: PPUSH
22673: CALL_OW 81
22677: PUSH
22678: LD_INT 2
22680: EQUAL
22681: AND
22682: IFFALSE 22696
// begin side := i ;
22684: LD_ADDR_VAR 0 3
22688: PUSH
22689: LD_VAR 0 1
22693: ST_TO_ADDR
// break ;
22694: GO 22698
// end ;
22696: GO 22649
22698: POP
22699: POP
// if not side then
22700: LD_VAR 0 3
22704: NOT
22705: IFFALSE 22709
// exit ;
22707: GO 22754
// for i := 1 to tmp do
22709: LD_ADDR_VAR 0 1
22713: PUSH
22714: DOUBLE
22715: LD_INT 1
22717: DEC
22718: ST_TO_ADDR
22719: LD_VAR 0 2
22723: PUSH
22724: FOR_TO
22725: IFFALSE 22752
// if Prob ( 60 ) then
22727: LD_INT 60
22729: PPUSH
22730: CALL_OW 13
22734: IFFALSE 22750
// SetSide ( i , side ) ;
22736: LD_VAR 0 1
22740: PPUSH
22741: LD_VAR 0 3
22745: PPUSH
22746: CALL_OW 235
22750: GO 22724
22752: POP
22753: POP
// end ;
22754: PPOPN 3
22756: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22757: LD_EXP 41
22761: PUSH
22762: LD_EXP 54
22766: AND
22767: IFFALSE 22886
22769: GO 22771
22771: DISABLE
22772: LD_INT 0
22774: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22775: LD_ADDR_VAR 0 1
22779: PUSH
22780: LD_INT 22
22782: PUSH
22783: LD_OWVAR 2
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 21
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: LD_INT 23
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 69
22828: PUSH
22829: FOR_IN
22830: IFFALSE 22884
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22832: LD_VAR 0 1
22836: PPUSH
22837: CALL_OW 257
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: LD_INT 4
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: IN
22860: IFFALSE 22882
// SetClass ( un , rand ( 1 , 4 ) ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_INT 1
22869: PPUSH
22870: LD_INT 4
22872: PPUSH
22873: CALL_OW 12
22877: PPUSH
22878: CALL_OW 336
22882: GO 22829
22884: POP
22885: POP
// end ;
22886: PPOPN 1
22888: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22889: LD_EXP 41
22893: PUSH
22894: LD_EXP 53
22898: AND
22899: IFFALSE 22978
22901: GO 22903
22903: DISABLE
22904: LD_INT 0
22906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22907: LD_ADDR_VAR 0 1
22911: PUSH
22912: LD_INT 22
22914: PUSH
22915: LD_OWVAR 2
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 21
22926: PUSH
22927: LD_INT 3
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PPUSH
22938: CALL_OW 69
22942: ST_TO_ADDR
// if not tmp then
22943: LD_VAR 0 1
22947: NOT
22948: IFFALSE 22952
// exit ;
22950: GO 22978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22952: LD_VAR 0 1
22956: PUSH
22957: LD_INT 1
22959: PPUSH
22960: LD_VAR 0 1
22964: PPUSH
22965: CALL_OW 12
22969: ARRAY
22970: PPUSH
22971: LD_INT 100
22973: PPUSH
22974: CALL_OW 234
// end ;
22978: PPOPN 1
22980: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22981: LD_EXP 41
22985: PUSH
22986: LD_EXP 55
22990: AND
22991: IFFALSE 23089
22993: GO 22995
22995: DISABLE
22996: LD_INT 0
22998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22999: LD_ADDR_VAR 0 1
23003: PUSH
23004: LD_INT 22
23006: PUSH
23007: LD_OWVAR 2
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 21
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PPUSH
23030: CALL_OW 69
23034: ST_TO_ADDR
// if not tmp then
23035: LD_VAR 0 1
23039: NOT
23040: IFFALSE 23044
// exit ;
23042: GO 23089
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23044: LD_VAR 0 1
23048: PUSH
23049: LD_INT 1
23051: PPUSH
23052: LD_VAR 0 1
23056: PPUSH
23057: CALL_OW 12
23061: ARRAY
23062: PPUSH
23063: LD_INT 1
23065: PPUSH
23066: LD_INT 4
23068: PPUSH
23069: CALL_OW 12
23073: PPUSH
23074: LD_INT 3000
23076: PPUSH
23077: LD_INT 9000
23079: PPUSH
23080: CALL_OW 12
23084: PPUSH
23085: CALL_OW 492
// end ;
23089: PPOPN 1
23091: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23092: LD_EXP 41
23096: PUSH
23097: LD_EXP 56
23101: AND
23102: IFFALSE 23122
23104: GO 23106
23106: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23107: LD_INT 1
23109: PPUSH
23110: LD_OWVAR 2
23114: PPUSH
23115: LD_INT 0
23117: PPUSH
23118: CALL_OW 324
23122: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23123: LD_EXP 41
23127: PUSH
23128: LD_EXP 57
23132: AND
23133: IFFALSE 23216
23135: GO 23137
23137: DISABLE
23138: LD_INT 0
23140: PPUSH
23141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23142: LD_ADDR_VAR 0 2
23146: PUSH
23147: LD_INT 22
23149: PUSH
23150: LD_OWVAR 2
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 3
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: ST_TO_ADDR
// if not tmp then
23178: LD_VAR 0 2
23182: NOT
23183: IFFALSE 23187
// exit ;
23185: GO 23216
// for i in tmp do
23187: LD_ADDR_VAR 0 1
23191: PUSH
23192: LD_VAR 0 2
23196: PUSH
23197: FOR_IN
23198: IFFALSE 23214
// SetBLevel ( i , 10 ) ;
23200: LD_VAR 0 1
23204: PPUSH
23205: LD_INT 10
23207: PPUSH
23208: CALL_OW 241
23212: GO 23197
23214: POP
23215: POP
// end ;
23216: PPOPN 2
23218: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23219: LD_EXP 41
23223: PUSH
23224: LD_EXP 58
23228: AND
23229: IFFALSE 23340
23231: GO 23233
23233: DISABLE
23234: LD_INT 0
23236: PPUSH
23237: PPUSH
23238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23239: LD_ADDR_VAR 0 3
23243: PUSH
23244: LD_INT 22
23246: PUSH
23247: LD_OWVAR 2
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 25
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 69
23274: ST_TO_ADDR
// if not tmp then
23275: LD_VAR 0 3
23279: NOT
23280: IFFALSE 23284
// exit ;
23282: GO 23340
// un := tmp [ rand ( 1 , tmp ) ] ;
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_VAR 0 3
23293: PUSH
23294: LD_INT 1
23296: PPUSH
23297: LD_VAR 0 3
23301: PPUSH
23302: CALL_OW 12
23306: ARRAY
23307: ST_TO_ADDR
// if Crawls ( un ) then
23308: LD_VAR 0 2
23312: PPUSH
23313: CALL_OW 318
23317: IFFALSE 23328
// ComWalk ( un ) ;
23319: LD_VAR 0 2
23323: PPUSH
23324: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23328: LD_VAR 0 2
23332: PPUSH
23333: LD_INT 5
23335: PPUSH
23336: CALL_OW 336
// end ;
23340: PPOPN 3
23342: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23343: LD_EXP 41
23347: PUSH
23348: LD_EXP 59
23352: AND
23353: PUSH
23354: LD_OWVAR 67
23358: PUSH
23359: LD_INT 4
23361: LESS
23362: AND
23363: IFFALSE 23382
23365: GO 23367
23367: DISABLE
// begin Difficulty := Difficulty + 1 ;
23368: LD_ADDR_OWVAR 67
23372: PUSH
23373: LD_OWVAR 67
23377: PUSH
23378: LD_INT 1
23380: PLUS
23381: ST_TO_ADDR
// end ;
23382: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23383: LD_EXP 41
23387: PUSH
23388: LD_EXP 60
23392: AND
23393: IFFALSE 23496
23395: GO 23397
23397: DISABLE
23398: LD_INT 0
23400: PPUSH
// begin for i := 1 to 5 do
23401: LD_ADDR_VAR 0 1
23405: PUSH
23406: DOUBLE
23407: LD_INT 1
23409: DEC
23410: ST_TO_ADDR
23411: LD_INT 5
23413: PUSH
23414: FOR_TO
23415: IFFALSE 23494
// begin uc_nation := nation_nature ;
23417: LD_ADDR_OWVAR 21
23421: PUSH
23422: LD_INT 0
23424: ST_TO_ADDR
// uc_side := 0 ;
23425: LD_ADDR_OWVAR 20
23429: PUSH
23430: LD_INT 0
23432: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23433: LD_ADDR_OWVAR 29
23437: PUSH
23438: LD_INT 12
23440: PUSH
23441: LD_INT 12
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: ST_TO_ADDR
// hc_agressivity := 20 ;
23448: LD_ADDR_OWVAR 35
23452: PUSH
23453: LD_INT 20
23455: ST_TO_ADDR
// hc_class := class_tiger ;
23456: LD_ADDR_OWVAR 28
23460: PUSH
23461: LD_INT 14
23463: ST_TO_ADDR
// hc_gallery :=  ;
23464: LD_ADDR_OWVAR 33
23468: PUSH
23469: LD_STRING 
23471: ST_TO_ADDR
// hc_name :=  ;
23472: LD_ADDR_OWVAR 26
23476: PUSH
23477: LD_STRING 
23479: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23480: CALL_OW 44
23484: PPUSH
23485: LD_INT 0
23487: PPUSH
23488: CALL_OW 51
// end ;
23492: GO 23414
23494: POP
23495: POP
// end ;
23496: PPOPN 1
23498: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23499: LD_EXP 41
23503: PUSH
23504: LD_EXP 61
23508: AND
23509: IFFALSE 23518
23511: GO 23513
23513: DISABLE
// StreamSibBomb ;
23514: CALL 23519 0 0
23518: END
// export function StreamSibBomb ; var i , x , y ; begin
23519: LD_INT 0
23521: PPUSH
23522: PPUSH
23523: PPUSH
23524: PPUSH
// result := false ;
23525: LD_ADDR_VAR 0 1
23529: PUSH
23530: LD_INT 0
23532: ST_TO_ADDR
// for i := 1 to 16 do
23533: LD_ADDR_VAR 0 2
23537: PUSH
23538: DOUBLE
23539: LD_INT 1
23541: DEC
23542: ST_TO_ADDR
23543: LD_INT 16
23545: PUSH
23546: FOR_TO
23547: IFFALSE 23746
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23549: LD_ADDR_VAR 0 3
23553: PUSH
23554: LD_INT 10
23556: PUSH
23557: LD_INT 20
23559: PUSH
23560: LD_INT 30
23562: PUSH
23563: LD_INT 40
23565: PUSH
23566: LD_INT 50
23568: PUSH
23569: LD_INT 60
23571: PUSH
23572: LD_INT 70
23574: PUSH
23575: LD_INT 80
23577: PUSH
23578: LD_INT 90
23580: PUSH
23581: LD_INT 100
23583: PUSH
23584: LD_INT 110
23586: PUSH
23587: LD_INT 120
23589: PUSH
23590: LD_INT 130
23592: PUSH
23593: LD_INT 140
23595: PUSH
23596: LD_INT 150
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PPUSH
23619: LD_INT 15
23621: PPUSH
23622: CALL_OW 12
23626: ARRAY
23627: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23628: LD_ADDR_VAR 0 4
23632: PUSH
23633: LD_INT 10
23635: PUSH
23636: LD_INT 20
23638: PUSH
23639: LD_INT 30
23641: PUSH
23642: LD_INT 40
23644: PUSH
23645: LD_INT 50
23647: PUSH
23648: LD_INT 60
23650: PUSH
23651: LD_INT 70
23653: PUSH
23654: LD_INT 80
23656: PUSH
23657: LD_INT 90
23659: PUSH
23660: LD_INT 100
23662: PUSH
23663: LD_INT 110
23665: PUSH
23666: LD_INT 120
23668: PUSH
23669: LD_INT 130
23671: PUSH
23672: LD_INT 140
23674: PUSH
23675: LD_INT 150
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: PPUSH
23698: LD_INT 15
23700: PPUSH
23701: CALL_OW 12
23705: ARRAY
23706: ST_TO_ADDR
// if ValidHex ( x , y ) then
23707: LD_VAR 0 3
23711: PPUSH
23712: LD_VAR 0 4
23716: PPUSH
23717: CALL_OW 488
23721: IFFALSE 23744
// begin result := [ x , y ] ;
23723: LD_ADDR_VAR 0 1
23727: PUSH
23728: LD_VAR 0 3
23732: PUSH
23733: LD_VAR 0 4
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: ST_TO_ADDR
// break ;
23742: GO 23746
// end ; end ;
23744: GO 23546
23746: POP
23747: POP
// if result then
23748: LD_VAR 0 1
23752: IFFALSE 23812
// begin ToLua ( playSibBomb() ) ;
23754: LD_STRING playSibBomb()
23756: PPUSH
23757: CALL_OW 559
// wait ( 0 0$14 ) ;
23761: LD_INT 490
23763: PPUSH
23764: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23768: LD_VAR 0 1
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PPUSH
23777: LD_VAR 0 1
23781: PUSH
23782: LD_INT 2
23784: ARRAY
23785: PPUSH
23786: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23790: LD_VAR 0 1
23794: PUSH
23795: LD_INT 1
23797: ARRAY
23798: PPUSH
23799: LD_VAR 0 1
23803: PUSH
23804: LD_INT 2
23806: ARRAY
23807: PPUSH
23808: CALL_OW 429
// end ; end ;
23812: LD_VAR 0 1
23816: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23817: LD_EXP 41
23821: PUSH
23822: LD_EXP 63
23826: AND
23827: IFFALSE 23839
23829: GO 23831
23831: DISABLE
// YouLost (  ) ;
23832: LD_STRING 
23834: PPUSH
23835: CALL_OW 104
23839: END
// every 0 0$1 trigger StreamModeActive and sFog do
23840: LD_EXP 41
23844: PUSH
23845: LD_EXP 62
23849: AND
23850: IFFALSE 23864
23852: GO 23854
23854: DISABLE
// FogOff ( your_side ) ;
23855: LD_OWVAR 2
23859: PPUSH
23860: CALL_OW 344
23864: END
// every 0 0$1 trigger StreamModeActive and sSun do
23865: LD_EXP 41
23869: PUSH
23870: LD_EXP 64
23874: AND
23875: IFFALSE 23903
23877: GO 23879
23879: DISABLE
// begin solar_recharge_percent := 0 ;
23880: LD_ADDR_OWVAR 79
23884: PUSH
23885: LD_INT 0
23887: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23888: LD_INT 10500
23890: PPUSH
23891: CALL_OW 67
// solar_recharge_percent := 100 ;
23895: LD_ADDR_OWVAR 79
23899: PUSH
23900: LD_INT 100
23902: ST_TO_ADDR
// end ;
23903: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23904: LD_EXP 41
23908: PUSH
23909: LD_EXP 65
23913: AND
23914: IFFALSE 24153
23916: GO 23918
23918: DISABLE
23919: LD_INT 0
23921: PPUSH
23922: PPUSH
23923: PPUSH
// begin tmp := [ ] ;
23924: LD_ADDR_VAR 0 3
23928: PUSH
23929: EMPTY
23930: ST_TO_ADDR
// for i := 1 to 6 do
23931: LD_ADDR_VAR 0 1
23935: PUSH
23936: DOUBLE
23937: LD_INT 1
23939: DEC
23940: ST_TO_ADDR
23941: LD_INT 6
23943: PUSH
23944: FOR_TO
23945: IFFALSE 24050
// begin uc_nation := nation_nature ;
23947: LD_ADDR_OWVAR 21
23951: PUSH
23952: LD_INT 0
23954: ST_TO_ADDR
// uc_side := 0 ;
23955: LD_ADDR_OWVAR 20
23959: PUSH
23960: LD_INT 0
23962: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23963: LD_ADDR_OWVAR 29
23967: PUSH
23968: LD_INT 12
23970: PUSH
23971: LD_INT 12
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: ST_TO_ADDR
// hc_agressivity := 20 ;
23978: LD_ADDR_OWVAR 35
23982: PUSH
23983: LD_INT 20
23985: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23986: LD_ADDR_OWVAR 28
23990: PUSH
23991: LD_INT 17
23993: ST_TO_ADDR
// hc_gallery :=  ;
23994: LD_ADDR_OWVAR 33
23998: PUSH
23999: LD_STRING 
24001: ST_TO_ADDR
// hc_name :=  ;
24002: LD_ADDR_OWVAR 26
24006: PUSH
24007: LD_STRING 
24009: ST_TO_ADDR
// un := CreateHuman ;
24010: LD_ADDR_VAR 0 2
24014: PUSH
24015: CALL_OW 44
24019: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24020: LD_VAR 0 2
24024: PPUSH
24025: LD_INT 1
24027: PPUSH
24028: CALL_OW 51
// tmp := tmp ^ un ;
24032: LD_ADDR_VAR 0 3
24036: PUSH
24037: LD_VAR 0 3
24041: PUSH
24042: LD_VAR 0 2
24046: ADD
24047: ST_TO_ADDR
// end ;
24048: GO 23944
24050: POP
24051: POP
// repeat wait ( 0 0$1 ) ;
24052: LD_INT 35
24054: PPUSH
24055: CALL_OW 67
// for un in tmp do
24059: LD_ADDR_VAR 0 2
24063: PUSH
24064: LD_VAR 0 3
24068: PUSH
24069: FOR_IN
24070: IFFALSE 24144
// begin if IsDead ( un ) then
24072: LD_VAR 0 2
24076: PPUSH
24077: CALL_OW 301
24081: IFFALSE 24101
// begin tmp := tmp diff un ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_VAR 0 3
24092: PUSH
24093: LD_VAR 0 2
24097: DIFF
24098: ST_TO_ADDR
// continue ;
24099: GO 24069
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24101: LD_VAR 0 2
24105: PPUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 22
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PPUSH
24123: CALL_OW 69
24127: PPUSH
24128: LD_VAR 0 2
24132: PPUSH
24133: CALL_OW 74
24137: PPUSH
24138: CALL_OW 115
// end ;
24142: GO 24069
24144: POP
24145: POP
// until not tmp ;
24146: LD_VAR 0 3
24150: NOT
24151: IFFALSE 24052
// end ;
24153: PPOPN 3
24155: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24156: LD_EXP 41
24160: PUSH
24161: LD_EXP 66
24165: AND
24166: IFFALSE 24220
24168: GO 24170
24170: DISABLE
// begin ToLua ( displayTroll(); ) ;
24171: LD_STRING displayTroll();
24173: PPUSH
24174: CALL_OW 559
// wait ( 3 3$00 ) ;
24178: LD_INT 6300
24180: PPUSH
24181: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24185: LD_STRING hideTroll();
24187: PPUSH
24188: CALL_OW 559
// wait ( 1 1$00 ) ;
24192: LD_INT 2100
24194: PPUSH
24195: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24199: LD_STRING displayTroll();
24201: PPUSH
24202: CALL_OW 559
// wait ( 1 1$00 ) ;
24206: LD_INT 2100
24208: PPUSH
24209: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24213: LD_STRING hideTroll();
24215: PPUSH
24216: CALL_OW 559
// end ;
24220: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24221: LD_EXP 41
24225: PUSH
24226: LD_EXP 67
24230: AND
24231: IFFALSE 24294
24233: GO 24235
24235: DISABLE
24236: LD_INT 0
24238: PPUSH
// begin p := 0 ;
24239: LD_ADDR_VAR 0 1
24243: PUSH
24244: LD_INT 0
24246: ST_TO_ADDR
// repeat game_speed := 1 ;
24247: LD_ADDR_OWVAR 65
24251: PUSH
24252: LD_INT 1
24254: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24255: LD_INT 35
24257: PPUSH
24258: CALL_OW 67
// p := p + 1 ;
24262: LD_ADDR_VAR 0 1
24266: PUSH
24267: LD_VAR 0 1
24271: PUSH
24272: LD_INT 1
24274: PLUS
24275: ST_TO_ADDR
// until p >= 60 ;
24276: LD_VAR 0 1
24280: PUSH
24281: LD_INT 60
24283: GREATEREQUAL
24284: IFFALSE 24247
// game_speed := 4 ;
24286: LD_ADDR_OWVAR 65
24290: PUSH
24291: LD_INT 4
24293: ST_TO_ADDR
// end ;
24294: PPOPN 1
24296: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24297: LD_EXP 41
24301: PUSH
24302: LD_EXP 68
24306: AND
24307: IFFALSE 24453
24309: GO 24311
24311: DISABLE
24312: LD_INT 0
24314: PPUSH
24315: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_OWVAR 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 30
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PPUSH
24365: CALL_OW 69
24369: ST_TO_ADDR
// if not depot then
24370: LD_VAR 0 1
24374: NOT
24375: IFFALSE 24379
// exit ;
24377: GO 24453
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24379: LD_ADDR_VAR 0 2
24383: PUSH
24384: LD_VAR 0 1
24388: PUSH
24389: LD_INT 1
24391: PPUSH
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 12
24401: ARRAY
24402: PPUSH
24403: CALL_OW 274
24407: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24408: LD_VAR 0 2
24412: PPUSH
24413: LD_INT 1
24415: PPUSH
24416: LD_INT 0
24418: PPUSH
24419: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24423: LD_VAR 0 2
24427: PPUSH
24428: LD_INT 2
24430: PPUSH
24431: LD_INT 0
24433: PPUSH
24434: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24438: LD_VAR 0 2
24442: PPUSH
24443: LD_INT 3
24445: PPUSH
24446: LD_INT 0
24448: PPUSH
24449: CALL_OW 277
// end ;
24453: PPOPN 2
24455: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24456: LD_EXP 41
24460: PUSH
24461: LD_EXP 69
24465: AND
24466: IFFALSE 24563
24468: GO 24470
24470: DISABLE
24471: LD_INT 0
24473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24474: LD_ADDR_VAR 0 1
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_OWVAR 2
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 21
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: LD_INT 23
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: PPUSH
24523: CALL_OW 69
24527: ST_TO_ADDR
// if not tmp then
24528: LD_VAR 0 1
24532: NOT
24533: IFFALSE 24537
// exit ;
24535: GO 24563
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24537: LD_VAR 0 1
24541: PUSH
24542: LD_INT 1
24544: PPUSH
24545: LD_VAR 0 1
24549: PPUSH
24550: CALL_OW 12
24554: ARRAY
24555: PPUSH
24556: LD_INT 200
24558: PPUSH
24559: CALL_OW 234
// end ;
24563: PPOPN 1
24565: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24566: LD_EXP 41
24570: PUSH
24571: LD_EXP 70
24575: AND
24576: IFFALSE 24655
24578: GO 24580
24580: DISABLE
24581: LD_INT 0
24583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24584: LD_ADDR_VAR 0 1
24588: PUSH
24589: LD_INT 22
24591: PUSH
24592: LD_OWVAR 2
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 21
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PPUSH
24615: CALL_OW 69
24619: ST_TO_ADDR
// if not tmp then
24620: LD_VAR 0 1
24624: NOT
24625: IFFALSE 24629
// exit ;
24627: GO 24655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24629: LD_VAR 0 1
24633: PUSH
24634: LD_INT 1
24636: PPUSH
24637: LD_VAR 0 1
24641: PPUSH
24642: CALL_OW 12
24646: ARRAY
24647: PPUSH
24648: LD_INT 60
24650: PPUSH
24651: CALL_OW 234
// end ;
24655: PPOPN 1
24657: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24658: LD_EXP 41
24662: PUSH
24663: LD_EXP 71
24667: AND
24668: IFFALSE 24767
24670: GO 24672
24672: DISABLE
24673: LD_INT 0
24675: PPUSH
24676: PPUSH
// begin enable ;
24677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24678: LD_ADDR_VAR 0 1
24682: PUSH
24683: LD_INT 22
24685: PUSH
24686: LD_OWVAR 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 61
24697: PUSH
24698: EMPTY
24699: LIST
24700: PUSH
24701: LD_INT 33
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: PPUSH
24716: CALL_OW 69
24720: ST_TO_ADDR
// if not tmp then
24721: LD_VAR 0 1
24725: NOT
24726: IFFALSE 24730
// exit ;
24728: GO 24767
// for i in tmp do
24730: LD_ADDR_VAR 0 2
24734: PUSH
24735: LD_VAR 0 1
24739: PUSH
24740: FOR_IN
24741: IFFALSE 24765
// if IsControledBy ( i ) then
24743: LD_VAR 0 2
24747: PPUSH
24748: CALL_OW 312
24752: IFFALSE 24763
// ComUnlink ( i ) ;
24754: LD_VAR 0 2
24758: PPUSH
24759: CALL_OW 136
24763: GO 24740
24765: POP
24766: POP
// end ;
24767: PPOPN 2
24769: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24770: LD_EXP 41
24774: PUSH
24775: LD_EXP 72
24779: AND
24780: IFFALSE 24920
24782: GO 24784
24784: DISABLE
24785: LD_INT 0
24787: PPUSH
24788: PPUSH
// begin ToLua ( displayPowell(); ) ;
24789: LD_STRING displayPowell();
24791: PPUSH
24792: CALL_OW 559
// uc_side := 0 ;
24796: LD_ADDR_OWVAR 20
24800: PUSH
24801: LD_INT 0
24803: ST_TO_ADDR
// uc_nation := 2 ;
24804: LD_ADDR_OWVAR 21
24808: PUSH
24809: LD_INT 2
24811: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24812: LD_ADDR_OWVAR 37
24816: PUSH
24817: LD_INT 14
24819: ST_TO_ADDR
// vc_engine := engine_siberite ;
24820: LD_ADDR_OWVAR 39
24824: PUSH
24825: LD_INT 3
24827: ST_TO_ADDR
// vc_control := control_apeman ;
24828: LD_ADDR_OWVAR 38
24832: PUSH
24833: LD_INT 5
24835: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24836: LD_ADDR_OWVAR 40
24840: PUSH
24841: LD_INT 29
24843: ST_TO_ADDR
// un := CreateVehicle ;
24844: LD_ADDR_VAR 0 2
24848: PUSH
24849: CALL_OW 45
24853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24854: LD_VAR 0 2
24858: PPUSH
24859: LD_INT 1
24861: PPUSH
24862: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24866: LD_INT 35
24868: PPUSH
24869: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24873: LD_VAR 0 2
24877: PPUSH
24878: LD_INT 22
24880: PUSH
24881: LD_OWVAR 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PPUSH
24890: CALL_OW 69
24894: PPUSH
24895: LD_VAR 0 2
24899: PPUSH
24900: CALL_OW 74
24904: PPUSH
24905: CALL_OW 115
// until IsDead ( un ) ;
24909: LD_VAR 0 2
24913: PPUSH
24914: CALL_OW 301
24918: IFFALSE 24866
// end ;
24920: PPOPN 2
24922: END
// every 0 0$1 trigger StreamModeActive and sStu do
24923: LD_EXP 41
24927: PUSH
24928: LD_EXP 80
24932: AND
24933: IFFALSE 24949
24935: GO 24937
24937: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24938: LD_STRING displayStucuk();
24940: PPUSH
24941: CALL_OW 559
// ResetFog ;
24945: CALL_OW 335
// end ;
24949: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24950: LD_EXP 41
24954: PUSH
24955: LD_EXP 73
24959: AND
24960: IFFALSE 25101
24962: GO 24964
24964: DISABLE
24965: LD_INT 0
24967: PPUSH
24968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24969: LD_ADDR_VAR 0 2
24973: PUSH
24974: LD_INT 22
24976: PUSH
24977: LD_OWVAR 2
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 21
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PPUSH
25000: CALL_OW 69
25004: ST_TO_ADDR
// if not tmp then
25005: LD_VAR 0 2
25009: NOT
25010: IFFALSE 25014
// exit ;
25012: GO 25101
// un := tmp [ rand ( 1 , tmp ) ] ;
25014: LD_ADDR_VAR 0 1
25018: PUSH
25019: LD_VAR 0 2
25023: PUSH
25024: LD_INT 1
25026: PPUSH
25027: LD_VAR 0 2
25031: PPUSH
25032: CALL_OW 12
25036: ARRAY
25037: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25038: LD_VAR 0 1
25042: PPUSH
25043: LD_INT 0
25045: PPUSH
25046: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25050: LD_VAR 0 1
25054: PPUSH
25055: LD_OWVAR 3
25059: PUSH
25060: LD_VAR 0 1
25064: DIFF
25065: PPUSH
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 74
25075: PPUSH
25076: CALL_OW 115
// wait ( 0 0$20 ) ;
25080: LD_INT 700
25082: PPUSH
25083: CALL_OW 67
// SetSide ( un , your_side ) ;
25087: LD_VAR 0 1
25091: PPUSH
25092: LD_OWVAR 2
25096: PPUSH
25097: CALL_OW 235
// end ;
25101: PPOPN 2
25103: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25104: LD_EXP 41
25108: PUSH
25109: LD_EXP 74
25113: AND
25114: IFFALSE 25220
25116: GO 25118
25118: DISABLE
25119: LD_INT 0
25121: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25122: LD_ADDR_VAR 0 1
25126: PUSH
25127: LD_INT 22
25129: PUSH
25130: LD_OWVAR 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 30
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 30
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PPUSH
25171: CALL_OW 69
25175: ST_TO_ADDR
// if not depot then
25176: LD_VAR 0 1
25180: NOT
25181: IFFALSE 25185
// exit ;
25183: GO 25220
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25185: LD_VAR 0 1
25189: PUSH
25190: LD_INT 1
25192: ARRAY
25193: PPUSH
25194: CALL_OW 250
25198: PPUSH
25199: LD_VAR 0 1
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: PPUSH
25208: CALL_OW 251
25212: PPUSH
25213: LD_INT 70
25215: PPUSH
25216: CALL_OW 495
// end ;
25220: PPOPN 1
25222: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25223: LD_EXP 41
25227: PUSH
25228: LD_EXP 75
25232: AND
25233: IFFALSE 25444
25235: GO 25237
25237: DISABLE
25238: LD_INT 0
25240: PPUSH
25241: PPUSH
25242: PPUSH
25243: PPUSH
25244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25245: LD_ADDR_VAR 0 5
25249: PUSH
25250: LD_INT 22
25252: PUSH
25253: LD_OWVAR 2
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 21
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PPUSH
25276: CALL_OW 69
25280: ST_TO_ADDR
// if not tmp then
25281: LD_VAR 0 5
25285: NOT
25286: IFFALSE 25290
// exit ;
25288: GO 25444
// for i in tmp do
25290: LD_ADDR_VAR 0 1
25294: PUSH
25295: LD_VAR 0 5
25299: PUSH
25300: FOR_IN
25301: IFFALSE 25442
// begin d := rand ( 0 , 5 ) ;
25303: LD_ADDR_VAR 0 4
25307: PUSH
25308: LD_INT 0
25310: PPUSH
25311: LD_INT 5
25313: PPUSH
25314: CALL_OW 12
25318: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25319: LD_ADDR_VAR 0 2
25323: PUSH
25324: LD_VAR 0 1
25328: PPUSH
25329: CALL_OW 250
25333: PPUSH
25334: LD_VAR 0 4
25338: PPUSH
25339: LD_INT 3
25341: PPUSH
25342: LD_INT 12
25344: PPUSH
25345: CALL_OW 12
25349: PPUSH
25350: CALL_OW 272
25354: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25355: LD_ADDR_VAR 0 3
25359: PUSH
25360: LD_VAR 0 1
25364: PPUSH
25365: CALL_OW 251
25369: PPUSH
25370: LD_VAR 0 4
25374: PPUSH
25375: LD_INT 3
25377: PPUSH
25378: LD_INT 12
25380: PPUSH
25381: CALL_OW 12
25385: PPUSH
25386: CALL_OW 273
25390: ST_TO_ADDR
// if ValidHex ( x , y ) then
25391: LD_VAR 0 2
25395: PPUSH
25396: LD_VAR 0 3
25400: PPUSH
25401: CALL_OW 488
25405: IFFALSE 25440
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25407: LD_VAR 0 1
25411: PPUSH
25412: LD_VAR 0 2
25416: PPUSH
25417: LD_VAR 0 3
25421: PPUSH
25422: LD_INT 3
25424: PPUSH
25425: LD_INT 6
25427: PPUSH
25428: CALL_OW 12
25432: PPUSH
25433: LD_INT 1
25435: PPUSH
25436: CALL_OW 483
// end ;
25440: GO 25300
25442: POP
25443: POP
// end ;
25444: PPOPN 5
25446: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25447: LD_EXP 41
25451: PUSH
25452: LD_EXP 76
25456: AND
25457: IFFALSE 25551
25459: GO 25461
25461: DISABLE
25462: LD_INT 0
25464: PPUSH
25465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25466: LD_ADDR_VAR 0 2
25470: PUSH
25471: LD_INT 22
25473: PUSH
25474: LD_OWVAR 2
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 32
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 21
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 69
25512: ST_TO_ADDR
// if not tmp then
25513: LD_VAR 0 2
25517: NOT
25518: IFFALSE 25522
// exit ;
25520: GO 25551
// for i in tmp do
25522: LD_ADDR_VAR 0 1
25526: PUSH
25527: LD_VAR 0 2
25531: PUSH
25532: FOR_IN
25533: IFFALSE 25549
// SetFuel ( i , 0 ) ;
25535: LD_VAR 0 1
25539: PPUSH
25540: LD_INT 0
25542: PPUSH
25543: CALL_OW 240
25547: GO 25532
25549: POP
25550: POP
// end ;
25551: PPOPN 2
25553: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25554: LD_EXP 41
25558: PUSH
25559: LD_EXP 77
25563: AND
25564: IFFALSE 25630
25566: GO 25568
25568: DISABLE
25569: LD_INT 0
25571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25572: LD_ADDR_VAR 0 1
25576: PUSH
25577: LD_INT 22
25579: PUSH
25580: LD_OWVAR 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 30
25591: PUSH
25592: LD_INT 29
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PPUSH
25603: CALL_OW 69
25607: ST_TO_ADDR
// if not tmp then
25608: LD_VAR 0 1
25612: NOT
25613: IFFALSE 25617
// exit ;
25615: GO 25630
// DestroyUnit ( tmp [ 1 ] ) ;
25617: LD_VAR 0 1
25621: PUSH
25622: LD_INT 1
25624: ARRAY
25625: PPUSH
25626: CALL_OW 65
// end ;
25630: PPOPN 1
25632: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25633: LD_EXP 41
25637: PUSH
25638: LD_EXP 79
25642: AND
25643: IFFALSE 25772
25645: GO 25647
25647: DISABLE
25648: LD_INT 0
25650: PPUSH
// begin uc_side := 0 ;
25651: LD_ADDR_OWVAR 20
25655: PUSH
25656: LD_INT 0
25658: ST_TO_ADDR
// uc_nation := nation_arabian ;
25659: LD_ADDR_OWVAR 21
25663: PUSH
25664: LD_INT 2
25666: ST_TO_ADDR
// hc_gallery :=  ;
25667: LD_ADDR_OWVAR 33
25671: PUSH
25672: LD_STRING 
25674: ST_TO_ADDR
// hc_name :=  ;
25675: LD_ADDR_OWVAR 26
25679: PUSH
25680: LD_STRING 
25682: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25683: LD_INT 1
25685: PPUSH
25686: LD_INT 11
25688: PPUSH
25689: LD_INT 10
25691: PPUSH
25692: CALL_OW 380
// un := CreateHuman ;
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: CALL_OW 44
25705: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25706: LD_VAR 0 1
25710: PPUSH
25711: LD_INT 1
25713: PPUSH
25714: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25718: LD_INT 35
25720: PPUSH
25721: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25725: LD_VAR 0 1
25729: PPUSH
25730: LD_INT 22
25732: PUSH
25733: LD_OWVAR 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 69
25746: PPUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: CALL_OW 74
25756: PPUSH
25757: CALL_OW 115
// until IsDead ( un ) ;
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 301
25770: IFFALSE 25718
// end ;
25772: PPOPN 1
25774: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25775: LD_EXP 41
25779: PUSH
25780: LD_EXP 81
25784: AND
25785: IFFALSE 25797
25787: GO 25789
25789: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25790: LD_STRING earthquake(getX(game), 0, 32)
25792: PPUSH
25793: CALL_OW 559
25797: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25798: LD_EXP 41
25802: PUSH
25803: LD_EXP 82
25807: AND
25808: IFFALSE 25899
25810: GO 25812
25812: DISABLE
25813: LD_INT 0
25815: PPUSH
// begin enable ;
25816: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: LD_INT 22
25824: PUSH
25825: LD_OWVAR 2
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 21
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 33
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: ST_TO_ADDR
// if not tmp then
25864: LD_VAR 0 1
25868: NOT
25869: IFFALSE 25873
// exit ;
25871: GO 25899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25873: LD_VAR 0 1
25877: PUSH
25878: LD_INT 1
25880: PPUSH
25881: LD_VAR 0 1
25885: PPUSH
25886: CALL_OW 12
25890: ARRAY
25891: PPUSH
25892: LD_INT 1
25894: PPUSH
25895: CALL_OW 234
// end ;
25899: PPOPN 1
25901: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25902: LD_EXP 41
25906: PUSH
25907: LD_EXP 83
25911: AND
25912: IFFALSE 26053
25914: GO 25916
25916: DISABLE
25917: LD_INT 0
25919: PPUSH
25920: PPUSH
25921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25922: LD_ADDR_VAR 0 3
25926: PUSH
25927: LD_INT 22
25929: PUSH
25930: LD_OWVAR 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 25
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PPUSH
25953: CALL_OW 69
25957: ST_TO_ADDR
// if not tmp then
25958: LD_VAR 0 3
25962: NOT
25963: IFFALSE 25967
// exit ;
25965: GO 26053
// un := tmp [ rand ( 1 , tmp ) ] ;
25967: LD_ADDR_VAR 0 2
25971: PUSH
25972: LD_VAR 0 3
25976: PUSH
25977: LD_INT 1
25979: PPUSH
25980: LD_VAR 0 3
25984: PPUSH
25985: CALL_OW 12
25989: ARRAY
25990: ST_TO_ADDR
// if Crawls ( un ) then
25991: LD_VAR 0 2
25995: PPUSH
25996: CALL_OW 318
26000: IFFALSE 26011
// ComWalk ( un ) ;
26002: LD_VAR 0 2
26006: PPUSH
26007: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26011: LD_VAR 0 2
26015: PPUSH
26016: LD_INT 9
26018: PPUSH
26019: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26023: LD_INT 28
26025: PPUSH
26026: LD_OWVAR 2
26030: PPUSH
26031: LD_INT 2
26033: PPUSH
26034: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26038: LD_INT 29
26040: PPUSH
26041: LD_OWVAR 2
26045: PPUSH
26046: LD_INT 2
26048: PPUSH
26049: CALL_OW 322
// end ;
26053: PPOPN 3
26055: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26056: LD_EXP 41
26060: PUSH
26061: LD_EXP 84
26065: AND
26066: IFFALSE 26177
26068: GO 26070
26070: DISABLE
26071: LD_INT 0
26073: PPUSH
26074: PPUSH
26075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26076: LD_ADDR_VAR 0 3
26080: PUSH
26081: LD_INT 22
26083: PUSH
26084: LD_OWVAR 2
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 25
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PPUSH
26107: CALL_OW 69
26111: ST_TO_ADDR
// if not tmp then
26112: LD_VAR 0 3
26116: NOT
26117: IFFALSE 26121
// exit ;
26119: GO 26177
// un := tmp [ rand ( 1 , tmp ) ] ;
26121: LD_ADDR_VAR 0 2
26125: PUSH
26126: LD_VAR 0 3
26130: PUSH
26131: LD_INT 1
26133: PPUSH
26134: LD_VAR 0 3
26138: PPUSH
26139: CALL_OW 12
26143: ARRAY
26144: ST_TO_ADDR
// if Crawls ( un ) then
26145: LD_VAR 0 2
26149: PPUSH
26150: CALL_OW 318
26154: IFFALSE 26165
// ComWalk ( un ) ;
26156: LD_VAR 0 2
26160: PPUSH
26161: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26165: LD_VAR 0 2
26169: PPUSH
26170: LD_INT 8
26172: PPUSH
26173: CALL_OW 336
// end ;
26177: PPOPN 3
26179: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26180: LD_EXP 41
26184: PUSH
26185: LD_EXP 85
26189: AND
26190: IFFALSE 26334
26192: GO 26194
26194: DISABLE
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26199: LD_ADDR_VAR 0 2
26203: PUSH
26204: LD_INT 22
26206: PUSH
26207: LD_OWVAR 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 21
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 34
26231: PUSH
26232: LD_INT 12
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 34
26241: PUSH
26242: LD_INT 51
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 34
26251: PUSH
26252: LD_INT 32
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: PPUSH
26270: CALL_OW 69
26274: ST_TO_ADDR
// if not tmp then
26275: LD_VAR 0 2
26279: NOT
26280: IFFALSE 26284
// exit ;
26282: GO 26334
// for i in tmp do
26284: LD_ADDR_VAR 0 1
26288: PUSH
26289: LD_VAR 0 2
26293: PUSH
26294: FOR_IN
26295: IFFALSE 26332
// if GetCargo ( i , mat_artifact ) = 0 then
26297: LD_VAR 0 1
26301: PPUSH
26302: LD_INT 4
26304: PPUSH
26305: CALL_OW 289
26309: PUSH
26310: LD_INT 0
26312: EQUAL
26313: IFFALSE 26330
// SetCargo ( i , mat_siberit , 100 ) ;
26315: LD_VAR 0 1
26319: PPUSH
26320: LD_INT 3
26322: PPUSH
26323: LD_INT 100
26325: PPUSH
26326: CALL_OW 290
26330: GO 26294
26332: POP
26333: POP
// end ;
26334: PPOPN 2
26336: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26337: LD_EXP 41
26341: PUSH
26342: LD_EXP 86
26346: AND
26347: IFFALSE 26530
26349: GO 26351
26351: DISABLE
26352: LD_INT 0
26354: PPUSH
26355: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26356: LD_ADDR_VAR 0 2
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_OWVAR 2
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PPUSH
26373: CALL_OW 69
26377: ST_TO_ADDR
// if not tmp then
26378: LD_VAR 0 2
26382: NOT
26383: IFFALSE 26387
// exit ;
26385: GO 26530
// for i := 1 to 2 do
26387: LD_ADDR_VAR 0 1
26391: PUSH
26392: DOUBLE
26393: LD_INT 1
26395: DEC
26396: ST_TO_ADDR
26397: LD_INT 2
26399: PUSH
26400: FOR_TO
26401: IFFALSE 26528
// begin uc_side := your_side ;
26403: LD_ADDR_OWVAR 20
26407: PUSH
26408: LD_OWVAR 2
26412: ST_TO_ADDR
// uc_nation := nation_american ;
26413: LD_ADDR_OWVAR 21
26417: PUSH
26418: LD_INT 1
26420: ST_TO_ADDR
// vc_chassis := us_morphling ;
26421: LD_ADDR_OWVAR 37
26425: PUSH
26426: LD_INT 5
26428: ST_TO_ADDR
// vc_engine := engine_siberite ;
26429: LD_ADDR_OWVAR 39
26433: PUSH
26434: LD_INT 3
26436: ST_TO_ADDR
// vc_control := control_computer ;
26437: LD_ADDR_OWVAR 38
26441: PUSH
26442: LD_INT 3
26444: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26445: LD_ADDR_OWVAR 40
26449: PUSH
26450: LD_INT 10
26452: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26453: LD_VAR 0 2
26457: PUSH
26458: LD_INT 1
26460: ARRAY
26461: PPUSH
26462: CALL_OW 310
26466: NOT
26467: IFFALSE 26514
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26469: CALL_OW 45
26473: PPUSH
26474: LD_VAR 0 2
26478: PUSH
26479: LD_INT 1
26481: ARRAY
26482: PPUSH
26483: CALL_OW 250
26487: PPUSH
26488: LD_VAR 0 2
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: PPUSH
26497: CALL_OW 251
26501: PPUSH
26502: LD_INT 12
26504: PPUSH
26505: LD_INT 1
26507: PPUSH
26508: CALL_OW 50
26512: GO 26526
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26514: CALL_OW 45
26518: PPUSH
26519: LD_INT 1
26521: PPUSH
26522: CALL_OW 51
// end ;
26526: GO 26400
26528: POP
26529: POP
// end ;
26530: PPOPN 2
26532: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26533: LD_EXP 41
26537: PUSH
26538: LD_EXP 87
26542: AND
26543: IFFALSE 26765
26545: GO 26547
26547: DISABLE
26548: LD_INT 0
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26556: LD_ADDR_VAR 0 6
26560: PUSH
26561: LD_INT 22
26563: PUSH
26564: LD_OWVAR 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 21
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 3
26585: PUSH
26586: LD_INT 23
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: PPUSH
26605: CALL_OW 69
26609: ST_TO_ADDR
// if not tmp then
26610: LD_VAR 0 6
26614: NOT
26615: IFFALSE 26619
// exit ;
26617: GO 26765
// s1 := rand ( 1 , 4 ) ;
26619: LD_ADDR_VAR 0 2
26623: PUSH
26624: LD_INT 1
26626: PPUSH
26627: LD_INT 4
26629: PPUSH
26630: CALL_OW 12
26634: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26635: LD_ADDR_VAR 0 4
26639: PUSH
26640: LD_VAR 0 6
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: LD_VAR 0 2
26653: PPUSH
26654: CALL_OW 259
26658: ST_TO_ADDR
// if s1 = 1 then
26659: LD_VAR 0 2
26663: PUSH
26664: LD_INT 1
26666: EQUAL
26667: IFFALSE 26687
// s2 := rand ( 2 , 4 ) else
26669: LD_ADDR_VAR 0 3
26673: PUSH
26674: LD_INT 2
26676: PPUSH
26677: LD_INT 4
26679: PPUSH
26680: CALL_OW 12
26684: ST_TO_ADDR
26685: GO 26695
// s2 := 1 ;
26687: LD_ADDR_VAR 0 3
26691: PUSH
26692: LD_INT 1
26694: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26695: LD_ADDR_VAR 0 5
26699: PUSH
26700: LD_VAR 0 6
26704: PUSH
26705: LD_INT 1
26707: ARRAY
26708: PPUSH
26709: LD_VAR 0 3
26713: PPUSH
26714: CALL_OW 259
26718: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26719: LD_VAR 0 6
26723: PUSH
26724: LD_INT 1
26726: ARRAY
26727: PPUSH
26728: LD_VAR 0 2
26732: PPUSH
26733: LD_VAR 0 5
26737: PPUSH
26738: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26742: LD_VAR 0 6
26746: PUSH
26747: LD_INT 1
26749: ARRAY
26750: PPUSH
26751: LD_VAR 0 3
26755: PPUSH
26756: LD_VAR 0 4
26760: PPUSH
26761: CALL_OW 237
// end ;
26765: PPOPN 6
26767: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26768: LD_EXP 41
26772: PUSH
26773: LD_EXP 88
26777: AND
26778: IFFALSE 26857
26780: GO 26782
26782: DISABLE
26783: LD_INT 0
26785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26786: LD_ADDR_VAR 0 1
26790: PUSH
26791: LD_INT 22
26793: PUSH
26794: LD_OWVAR 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 30
26805: PUSH
26806: LD_INT 3
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: ST_TO_ADDR
// if not tmp then
26822: LD_VAR 0 1
26826: NOT
26827: IFFALSE 26831
// exit ;
26829: GO 26857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26831: LD_VAR 0 1
26835: PUSH
26836: LD_INT 1
26838: PPUSH
26839: LD_VAR 0 1
26843: PPUSH
26844: CALL_OW 12
26848: ARRAY
26849: PPUSH
26850: LD_INT 1
26852: PPUSH
26853: CALL_OW 234
// end ;
26857: PPOPN 1
26859: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26860: LD_EXP 41
26864: PUSH
26865: LD_EXP 89
26869: AND
26870: IFFALSE 26982
26872: GO 26874
26874: DISABLE
26875: LD_INT 0
26877: PPUSH
26878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_INT 22
26886: PUSH
26887: LD_OWVAR 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 30
26901: PUSH
26902: LD_INT 27
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 30
26911: PUSH
26912: LD_INT 26
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 30
26921: PUSH
26922: LD_INT 28
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PPUSH
26939: CALL_OW 69
26943: ST_TO_ADDR
// if not tmp then
26944: LD_VAR 0 2
26948: NOT
26949: IFFALSE 26953
// exit ;
26951: GO 26982
// for i in tmp do
26953: LD_ADDR_VAR 0 1
26957: PUSH
26958: LD_VAR 0 2
26962: PUSH
26963: FOR_IN
26964: IFFALSE 26980
// SetLives ( i , 1 ) ;
26966: LD_VAR 0 1
26970: PPUSH
26971: LD_INT 1
26973: PPUSH
26974: CALL_OW 234
26978: GO 26963
26980: POP
26981: POP
// end ;
26982: PPOPN 2
26984: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26985: LD_EXP 41
26989: PUSH
26990: LD_EXP 90
26994: AND
26995: IFFALSE 27282
26997: GO 26999
26999: DISABLE
27000: LD_INT 0
27002: PPUSH
27003: PPUSH
27004: PPUSH
// begin i := rand ( 1 , 7 ) ;
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_INT 1
27012: PPUSH
27013: LD_INT 7
27015: PPUSH
27016: CALL_OW 12
27020: ST_TO_ADDR
// case i of 1 :
27021: LD_VAR 0 1
27025: PUSH
27026: LD_INT 1
27028: DOUBLE
27029: EQUAL
27030: IFTRUE 27034
27032: GO 27044
27034: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27035: LD_STRING earthquake(getX(game), 0, 32)
27037: PPUSH
27038: CALL_OW 559
27042: GO 27282
27044: LD_INT 2
27046: DOUBLE
27047: EQUAL
27048: IFTRUE 27052
27050: GO 27066
27052: POP
// begin ToLua ( displayStucuk(); ) ;
27053: LD_STRING displayStucuk();
27055: PPUSH
27056: CALL_OW 559
// ResetFog ;
27060: CALL_OW 335
// end ; 3 :
27064: GO 27282
27066: LD_INT 3
27068: DOUBLE
27069: EQUAL
27070: IFTRUE 27074
27072: GO 27178
27074: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27075: LD_ADDR_VAR 0 2
27079: PUSH
27080: LD_INT 22
27082: PUSH
27083: LD_OWVAR 2
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 25
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PPUSH
27106: CALL_OW 69
27110: ST_TO_ADDR
// if not tmp then
27111: LD_VAR 0 2
27115: NOT
27116: IFFALSE 27120
// exit ;
27118: GO 27282
// un := tmp [ rand ( 1 , tmp ) ] ;
27120: LD_ADDR_VAR 0 3
27124: PUSH
27125: LD_VAR 0 2
27129: PUSH
27130: LD_INT 1
27132: PPUSH
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 12
27142: ARRAY
27143: ST_TO_ADDR
// if Crawls ( un ) then
27144: LD_VAR 0 3
27148: PPUSH
27149: CALL_OW 318
27153: IFFALSE 27164
// ComWalk ( un ) ;
27155: LD_VAR 0 3
27159: PPUSH
27160: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27164: LD_VAR 0 3
27168: PPUSH
27169: LD_INT 8
27171: PPUSH
27172: CALL_OW 336
// end ; 4 :
27176: GO 27282
27178: LD_INT 4
27180: DOUBLE
27181: EQUAL
27182: IFTRUE 27186
27184: GO 27260
27186: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27187: LD_ADDR_VAR 0 2
27191: PUSH
27192: LD_INT 22
27194: PUSH
27195: LD_OWVAR 2
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 30
27206: PUSH
27207: LD_INT 29
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PPUSH
27218: CALL_OW 69
27222: ST_TO_ADDR
// if not tmp then
27223: LD_VAR 0 2
27227: NOT
27228: IFFALSE 27232
// exit ;
27230: GO 27282
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27232: LD_VAR 0 2
27236: PUSH
27237: LD_INT 1
27239: ARRAY
27240: PPUSH
27241: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27245: LD_VAR 0 2
27249: PUSH
27250: LD_INT 1
27252: ARRAY
27253: PPUSH
27254: CALL_OW 65
// end ; 5 .. 7 :
27258: GO 27282
27260: LD_INT 5
27262: DOUBLE
27263: GREATEREQUAL
27264: IFFALSE 27272
27266: LD_INT 7
27268: DOUBLE
27269: LESSEQUAL
27270: IFTRUE 27274
27272: GO 27281
27274: POP
// StreamSibBomb ; end ;
27275: CALL 23519 0 0
27279: GO 27282
27281: POP
// end ;
27282: PPOPN 3
27284: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27285: LD_EXP 41
27289: PUSH
27290: LD_EXP 91
27294: AND
27295: IFFALSE 27451
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
27304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: LD_INT 81
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: LD_INT 21
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 21
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PPUSH
27354: CALL_OW 69
27358: ST_TO_ADDR
// if not tmp then
27359: LD_VAR 0 2
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27451
// p := 0 ;
27368: LD_ADDR_VAR 0 3
27372: PUSH
27373: LD_INT 0
27375: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27376: LD_INT 35
27378: PPUSH
27379: CALL_OW 67
// p := p + 1 ;
27383: LD_ADDR_VAR 0 3
27387: PUSH
27388: LD_VAR 0 3
27392: PUSH
27393: LD_INT 1
27395: PLUS
27396: ST_TO_ADDR
// for i in tmp do
27397: LD_ADDR_VAR 0 1
27401: PUSH
27402: LD_VAR 0 2
27406: PUSH
27407: FOR_IN
27408: IFFALSE 27439
// if GetLives ( i ) < 1000 then
27410: LD_VAR 0 1
27414: PPUSH
27415: CALL_OW 256
27419: PUSH
27420: LD_INT 1000
27422: LESS
27423: IFFALSE 27437
// SetLives ( i , 1000 ) ;
27425: LD_VAR 0 1
27429: PPUSH
27430: LD_INT 1000
27432: PPUSH
27433: CALL_OW 234
27437: GO 27407
27439: POP
27440: POP
// until p > 20 ;
27441: LD_VAR 0 3
27445: PUSH
27446: LD_INT 20
27448: GREATER
27449: IFFALSE 27376
// end ;
27451: PPOPN 3
27453: END
// every 0 0$1 trigger StreamModeActive and sTime do
27454: LD_EXP 41
27458: PUSH
27459: LD_EXP 92
27463: AND
27464: IFFALSE 27499
27466: GO 27468
27468: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27469: LD_INT 28
27471: PPUSH
27472: LD_OWVAR 2
27476: PPUSH
27477: LD_INT 2
27479: PPUSH
27480: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27484: LD_INT 30
27486: PPUSH
27487: LD_OWVAR 2
27491: PPUSH
27492: LD_INT 2
27494: PPUSH
27495: CALL_OW 322
// end ;
27499: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27500: LD_EXP 41
27504: PUSH
27505: LD_EXP 93
27509: AND
27510: IFFALSE 27631
27512: GO 27514
27514: DISABLE
27515: LD_INT 0
27517: PPUSH
27518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27519: LD_ADDR_VAR 0 2
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_OWVAR 2
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 21
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 3
27548: PUSH
27549: LD_INT 23
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: PPUSH
27568: CALL_OW 69
27572: ST_TO_ADDR
// if not tmp then
27573: LD_VAR 0 2
27577: NOT
27578: IFFALSE 27582
// exit ;
27580: GO 27631
// for i in tmp do
27582: LD_ADDR_VAR 0 1
27586: PUSH
27587: LD_VAR 0 2
27591: PUSH
27592: FOR_IN
27593: IFFALSE 27629
// begin if Crawls ( i ) then
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 318
27604: IFFALSE 27615
// ComWalk ( i ) ;
27606: LD_VAR 0 1
27610: PPUSH
27611: CALL_OW 138
// SetClass ( i , 2 ) ;
27615: LD_VAR 0 1
27619: PPUSH
27620: LD_INT 2
27622: PPUSH
27623: CALL_OW 336
// end ;
27627: GO 27592
27629: POP
27630: POP
// end ;
27631: PPOPN 2
27633: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27634: LD_EXP 41
27638: PUSH
27639: LD_EXP 94
27643: AND
27644: IFFALSE 27932
27646: GO 27648
27648: DISABLE
27649: LD_INT 0
27651: PPUSH
27652: PPUSH
27653: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27654: LD_OWVAR 2
27658: PPUSH
27659: LD_INT 9
27661: PPUSH
27662: LD_INT 1
27664: PPUSH
27665: LD_INT 1
27667: PPUSH
27668: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27672: LD_INT 9
27674: PPUSH
27675: LD_OWVAR 2
27679: PPUSH
27680: CALL_OW 343
// uc_side := 9 ;
27684: LD_ADDR_OWVAR 20
27688: PUSH
27689: LD_INT 9
27691: ST_TO_ADDR
// uc_nation := 2 ;
27692: LD_ADDR_OWVAR 21
27696: PUSH
27697: LD_INT 2
27699: ST_TO_ADDR
// hc_name := Dark Warrior ;
27700: LD_ADDR_OWVAR 26
27704: PUSH
27705: LD_STRING Dark Warrior
27707: ST_TO_ADDR
// hc_gallery :=  ;
27708: LD_ADDR_OWVAR 33
27712: PUSH
27713: LD_STRING 
27715: ST_TO_ADDR
// hc_noskilllimit := true ;
27716: LD_ADDR_OWVAR 76
27720: PUSH
27721: LD_INT 1
27723: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27724: LD_ADDR_OWVAR 31
27728: PUSH
27729: LD_INT 30
27731: PUSH
27732: LD_INT 30
27734: PUSH
27735: LD_INT 30
27737: PUSH
27738: LD_INT 30
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// un := CreateHuman ;
27747: LD_ADDR_VAR 0 3
27751: PUSH
27752: CALL_OW 44
27756: ST_TO_ADDR
// hc_noskilllimit := false ;
27757: LD_ADDR_OWVAR 76
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27765: LD_VAR 0 3
27769: PPUSH
27770: LD_INT 1
27772: PPUSH
27773: CALL_OW 51
// ToLua ( playRanger() ) ;
27777: LD_STRING playRanger()
27779: PPUSH
27780: CALL_OW 559
// p := 0 ;
27784: LD_ADDR_VAR 0 2
27788: PUSH
27789: LD_INT 0
27791: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27792: LD_INT 35
27794: PPUSH
27795: CALL_OW 67
// p := p + 1 ;
27799: LD_ADDR_VAR 0 2
27803: PUSH
27804: LD_VAR 0 2
27808: PUSH
27809: LD_INT 1
27811: PLUS
27812: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27813: LD_VAR 0 3
27817: PPUSH
27818: CALL_OW 256
27822: PUSH
27823: LD_INT 1000
27825: LESS
27826: IFFALSE 27840
// SetLives ( un , 1000 ) ;
27828: LD_VAR 0 3
27832: PPUSH
27833: LD_INT 1000
27835: PPUSH
27836: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27840: LD_VAR 0 3
27844: PPUSH
27845: LD_INT 81
27847: PUSH
27848: LD_OWVAR 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 91
27859: PUSH
27860: LD_VAR 0 3
27864: PUSH
27865: LD_INT 30
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PPUSH
27877: CALL_OW 69
27881: PPUSH
27882: LD_VAR 0 3
27886: PPUSH
27887: CALL_OW 74
27891: PPUSH
27892: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27896: LD_VAR 0 2
27900: PUSH
27901: LD_INT 80
27903: GREATER
27904: PUSH
27905: LD_VAR 0 3
27909: PPUSH
27910: CALL_OW 301
27914: OR
27915: IFFALSE 27792
// if un then
27917: LD_VAR 0 3
27921: IFFALSE 27932
// RemoveUnit ( un ) ;
27923: LD_VAR 0 3
27927: PPUSH
27928: CALL_OW 64
// end ;
27932: PPOPN 3
27934: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27935: LD_EXP 95
27939: IFFALSE 28055
27941: GO 27943
27943: DISABLE
27944: LD_INT 0
27946: PPUSH
27947: PPUSH
27948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27949: LD_ADDR_VAR 0 2
27953: PUSH
27954: LD_INT 81
27956: PUSH
27957: LD_OWVAR 2
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 21
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PPUSH
27980: CALL_OW 69
27984: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27985: LD_STRING playComputer()
27987: PPUSH
27988: CALL_OW 559
// if not tmp then
27992: LD_VAR 0 2
27996: NOT
27997: IFFALSE 28001
// exit ;
27999: GO 28055
// for i in tmp do
28001: LD_ADDR_VAR 0 1
28005: PUSH
28006: LD_VAR 0 2
28010: PUSH
28011: FOR_IN
28012: IFFALSE 28053
// for j := 1 to 4 do
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: DOUBLE
28020: LD_INT 1
28022: DEC
28023: ST_TO_ADDR
28024: LD_INT 4
28026: PUSH
28027: FOR_TO
28028: IFFALSE 28049
// SetSkill ( i , j , 10 ) ;
28030: LD_VAR 0 1
28034: PPUSH
28035: LD_VAR 0 3
28039: PPUSH
28040: LD_INT 10
28042: PPUSH
28043: CALL_OW 237
28047: GO 28027
28049: POP
28050: POP
28051: GO 28011
28053: POP
28054: POP
// end ;
28055: PPOPN 3
28057: END
// every 0 0$1 trigger s30 do var i , tmp ;
28058: LD_EXP 96
28062: IFFALSE 28131
28064: GO 28066
28066: DISABLE
28067: LD_INT 0
28069: PPUSH
28070: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28071: LD_ADDR_VAR 0 2
28075: PUSH
28076: LD_INT 22
28078: PUSH
28079: LD_OWVAR 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PPUSH
28088: CALL_OW 69
28092: ST_TO_ADDR
// if not tmp then
28093: LD_VAR 0 2
28097: NOT
28098: IFFALSE 28102
// exit ;
28100: GO 28131
// for i in tmp do
28102: LD_ADDR_VAR 0 1
28106: PUSH
28107: LD_VAR 0 2
28111: PUSH
28112: FOR_IN
28113: IFFALSE 28129
// SetLives ( i , 300 ) ;
28115: LD_VAR 0 1
28119: PPUSH
28120: LD_INT 300
28122: PPUSH
28123: CALL_OW 234
28127: GO 28112
28129: POP
28130: POP
// end ;
28131: PPOPN 2
28133: END
// every 0 0$1 trigger s60 do var i , tmp ;
28134: LD_EXP 97
28138: IFFALSE 28207
28140: GO 28142
28142: DISABLE
28143: LD_INT 0
28145: PPUSH
28146: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28147: LD_ADDR_VAR 0 2
28151: PUSH
28152: LD_INT 22
28154: PUSH
28155: LD_OWVAR 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 69
28168: ST_TO_ADDR
// if not tmp then
28169: LD_VAR 0 2
28173: NOT
28174: IFFALSE 28178
// exit ;
28176: GO 28207
// for i in tmp do
28178: LD_ADDR_VAR 0 1
28182: PUSH
28183: LD_VAR 0 2
28187: PUSH
28188: FOR_IN
28189: IFFALSE 28205
// SetLives ( i , 600 ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_INT 600
28198: PPUSH
28199: CALL_OW 234
28203: GO 28188
28205: POP
28206: POP
// end ;
28207: PPOPN 2
28209: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28210: LD_INT 0
28212: PPUSH
// case cmd of 301 :
28213: LD_VAR 0 1
28217: PUSH
28218: LD_INT 301
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28258
28226: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28227: LD_VAR 0 6
28231: PPUSH
28232: LD_VAR 0 7
28236: PPUSH
28237: LD_VAR 0 8
28241: PPUSH
28242: LD_VAR 0 4
28246: PPUSH
28247: LD_VAR 0 5
28251: PPUSH
28252: CALL 29467 0 5
28256: GO 28379
28258: LD_INT 302
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28266
28264: GO 28303
28266: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28267: LD_VAR 0 6
28271: PPUSH
28272: LD_VAR 0 7
28276: PPUSH
28277: LD_VAR 0 8
28281: PPUSH
28282: LD_VAR 0 9
28286: PPUSH
28287: LD_VAR 0 4
28291: PPUSH
28292: LD_VAR 0 5
28296: PPUSH
28297: CALL 29558 0 6
28301: GO 28379
28303: LD_INT 303
28305: DOUBLE
28306: EQUAL
28307: IFTRUE 28311
28309: GO 28348
28311: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28312: LD_VAR 0 6
28316: PPUSH
28317: LD_VAR 0 7
28321: PPUSH
28322: LD_VAR 0 8
28326: PPUSH
28327: LD_VAR 0 9
28331: PPUSH
28332: LD_VAR 0 4
28336: PPUSH
28337: LD_VAR 0 5
28341: PPUSH
28342: CALL 28384 0 6
28346: GO 28379
28348: LD_INT 304
28350: DOUBLE
28351: EQUAL
28352: IFTRUE 28356
28354: GO 28378
28356: POP
// hHackTeleport ( unit , x , y ) ; end ;
28357: LD_VAR 0 2
28361: PPUSH
28362: LD_VAR 0 4
28366: PPUSH
28367: LD_VAR 0 5
28371: PPUSH
28372: CALL 30151 0 3
28376: GO 28379
28378: POP
// end ;
28379: LD_VAR 0 12
28383: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28384: LD_INT 0
28386: PPUSH
28387: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28388: LD_VAR 0 1
28392: PUSH
28393: LD_INT 1
28395: LESS
28396: PUSH
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 3
28404: GREATER
28405: OR
28406: PUSH
28407: LD_VAR 0 5
28411: PPUSH
28412: LD_VAR 0 6
28416: PPUSH
28417: CALL_OW 428
28421: OR
28422: IFFALSE 28426
// exit ;
28424: GO 29154
// uc_side := your_side ;
28426: LD_ADDR_OWVAR 20
28430: PUSH
28431: LD_OWVAR 2
28435: ST_TO_ADDR
// uc_nation := nation ;
28436: LD_ADDR_OWVAR 21
28440: PUSH
28441: LD_VAR 0 1
28445: ST_TO_ADDR
// bc_level = 1 ;
28446: LD_ADDR_OWVAR 43
28450: PUSH
28451: LD_INT 1
28453: ST_TO_ADDR
// case btype of 1 :
28454: LD_VAR 0 2
28458: PUSH
28459: LD_INT 1
28461: DOUBLE
28462: EQUAL
28463: IFTRUE 28467
28465: GO 28478
28467: POP
// bc_type := b_depot ; 2 :
28468: LD_ADDR_OWVAR 42
28472: PUSH
28473: LD_INT 0
28475: ST_TO_ADDR
28476: GO 29098
28478: LD_INT 2
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28497
28486: POP
// bc_type := b_warehouse ; 3 :
28487: LD_ADDR_OWVAR 42
28491: PUSH
28492: LD_INT 1
28494: ST_TO_ADDR
28495: GO 29098
28497: LD_INT 3
28499: DOUBLE
28500: EQUAL
28501: IFTRUE 28505
28503: GO 28516
28505: POP
// bc_type := b_lab ; 4 .. 9 :
28506: LD_ADDR_OWVAR 42
28510: PUSH
28511: LD_INT 6
28513: ST_TO_ADDR
28514: GO 29098
28516: LD_INT 4
28518: DOUBLE
28519: GREATEREQUAL
28520: IFFALSE 28528
28522: LD_INT 9
28524: DOUBLE
28525: LESSEQUAL
28526: IFTRUE 28530
28528: GO 28590
28530: POP
// begin bc_type := b_lab_half ;
28531: LD_ADDR_OWVAR 42
28535: PUSH
28536: LD_INT 7
28538: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28539: LD_ADDR_OWVAR 44
28543: PUSH
28544: LD_INT 10
28546: PUSH
28547: LD_INT 11
28549: PUSH
28550: LD_INT 12
28552: PUSH
28553: LD_INT 15
28555: PUSH
28556: LD_INT 14
28558: PUSH
28559: LD_INT 13
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: PUSH
28570: LD_VAR 0 2
28574: PUSH
28575: LD_INT 3
28577: MINUS
28578: ARRAY
28579: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28580: LD_ADDR_OWVAR 45
28584: PUSH
28585: LD_INT 9
28587: ST_TO_ADDR
// end ; 10 .. 13 :
28588: GO 29098
28590: LD_INT 10
28592: DOUBLE
28593: GREATEREQUAL
28594: IFFALSE 28602
28596: LD_INT 13
28598: DOUBLE
28599: LESSEQUAL
28600: IFTRUE 28604
28602: GO 28681
28604: POP
// begin bc_type := b_lab_full ;
28605: LD_ADDR_OWVAR 42
28609: PUSH
28610: LD_INT 8
28612: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28613: LD_ADDR_OWVAR 44
28617: PUSH
28618: LD_INT 10
28620: PUSH
28621: LD_INT 12
28623: PUSH
28624: LD_INT 14
28626: PUSH
28627: LD_INT 13
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: PUSH
28636: LD_VAR 0 2
28640: PUSH
28641: LD_INT 9
28643: MINUS
28644: ARRAY
28645: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28646: LD_ADDR_OWVAR 45
28650: PUSH
28651: LD_INT 11
28653: PUSH
28654: LD_INT 15
28656: PUSH
28657: LD_INT 12
28659: PUSH
28660: LD_INT 15
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: PUSH
28669: LD_VAR 0 2
28673: PUSH
28674: LD_INT 9
28676: MINUS
28677: ARRAY
28678: ST_TO_ADDR
// end ; 14 :
28679: GO 29098
28681: LD_INT 14
28683: DOUBLE
28684: EQUAL
28685: IFTRUE 28689
28687: GO 28700
28689: POP
// bc_type := b_workshop ; 15 :
28690: LD_ADDR_OWVAR 42
28694: PUSH
28695: LD_INT 2
28697: ST_TO_ADDR
28698: GO 29098
28700: LD_INT 15
28702: DOUBLE
28703: EQUAL
28704: IFTRUE 28708
28706: GO 28719
28708: POP
// bc_type := b_factory ; 16 :
28709: LD_ADDR_OWVAR 42
28713: PUSH
28714: LD_INT 3
28716: ST_TO_ADDR
28717: GO 29098
28719: LD_INT 16
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28738
28727: POP
// bc_type := b_ext_gun ; 17 :
28728: LD_ADDR_OWVAR 42
28732: PUSH
28733: LD_INT 17
28735: ST_TO_ADDR
28736: GO 29098
28738: LD_INT 17
28740: DOUBLE
28741: EQUAL
28742: IFTRUE 28746
28744: GO 28774
28746: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28747: LD_ADDR_OWVAR 42
28751: PUSH
28752: LD_INT 19
28754: PUSH
28755: LD_INT 23
28757: PUSH
28758: LD_INT 19
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: PUSH
28766: LD_VAR 0 1
28770: ARRAY
28771: ST_TO_ADDR
28772: GO 29098
28774: LD_INT 18
28776: DOUBLE
28777: EQUAL
28778: IFTRUE 28782
28780: GO 28793
28782: POP
// bc_type := b_ext_radar ; 19 :
28783: LD_ADDR_OWVAR 42
28787: PUSH
28788: LD_INT 20
28790: ST_TO_ADDR
28791: GO 29098
28793: LD_INT 19
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28812
28801: POP
// bc_type := b_ext_radio ; 20 :
28802: LD_ADDR_OWVAR 42
28806: PUSH
28807: LD_INT 22
28809: ST_TO_ADDR
28810: GO 29098
28812: LD_INT 20
28814: DOUBLE
28815: EQUAL
28816: IFTRUE 28820
28818: GO 28831
28820: POP
// bc_type := b_ext_siberium ; 21 :
28821: LD_ADDR_OWVAR 42
28825: PUSH
28826: LD_INT 21
28828: ST_TO_ADDR
28829: GO 29098
28831: LD_INT 21
28833: DOUBLE
28834: EQUAL
28835: IFTRUE 28839
28837: GO 28850
28839: POP
// bc_type := b_ext_computer ; 22 :
28840: LD_ADDR_OWVAR 42
28844: PUSH
28845: LD_INT 24
28847: ST_TO_ADDR
28848: GO 29098
28850: LD_INT 22
28852: DOUBLE
28853: EQUAL
28854: IFTRUE 28858
28856: GO 28869
28858: POP
// bc_type := b_ext_track ; 23 :
28859: LD_ADDR_OWVAR 42
28863: PUSH
28864: LD_INT 16
28866: ST_TO_ADDR
28867: GO 29098
28869: LD_INT 23
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 28888
28877: POP
// bc_type := b_ext_laser ; 24 :
28878: LD_ADDR_OWVAR 42
28882: PUSH
28883: LD_INT 25
28885: ST_TO_ADDR
28886: GO 29098
28888: LD_INT 24
28890: DOUBLE
28891: EQUAL
28892: IFTRUE 28896
28894: GO 28907
28896: POP
// bc_type := b_control_tower ; 25 :
28897: LD_ADDR_OWVAR 42
28901: PUSH
28902: LD_INT 36
28904: ST_TO_ADDR
28905: GO 29098
28907: LD_INT 25
28909: DOUBLE
28910: EQUAL
28911: IFTRUE 28915
28913: GO 28926
28915: POP
// bc_type := b_breastwork ; 26 :
28916: LD_ADDR_OWVAR 42
28920: PUSH
28921: LD_INT 31
28923: ST_TO_ADDR
28924: GO 29098
28926: LD_INT 26
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28945
28934: POP
// bc_type := b_bunker ; 27 :
28935: LD_ADDR_OWVAR 42
28939: PUSH
28940: LD_INT 32
28942: ST_TO_ADDR
28943: GO 29098
28945: LD_INT 27
28947: DOUBLE
28948: EQUAL
28949: IFTRUE 28953
28951: GO 28964
28953: POP
// bc_type := b_turret ; 28 :
28954: LD_ADDR_OWVAR 42
28958: PUSH
28959: LD_INT 33
28961: ST_TO_ADDR
28962: GO 29098
28964: LD_INT 28
28966: DOUBLE
28967: EQUAL
28968: IFTRUE 28972
28970: GO 28983
28972: POP
// bc_type := b_armoury ; 29 :
28973: LD_ADDR_OWVAR 42
28977: PUSH
28978: LD_INT 4
28980: ST_TO_ADDR
28981: GO 29098
28983: LD_INT 29
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 28991
28989: GO 29002
28991: POP
// bc_type := b_barracks ; 30 :
28992: LD_ADDR_OWVAR 42
28996: PUSH
28997: LD_INT 5
28999: ST_TO_ADDR
29000: GO 29098
29002: LD_INT 30
29004: DOUBLE
29005: EQUAL
29006: IFTRUE 29010
29008: GO 29021
29010: POP
// bc_type := b_solar_power ; 31 :
29011: LD_ADDR_OWVAR 42
29015: PUSH
29016: LD_INT 27
29018: ST_TO_ADDR
29019: GO 29098
29021: LD_INT 31
29023: DOUBLE
29024: EQUAL
29025: IFTRUE 29029
29027: GO 29040
29029: POP
// bc_type := b_oil_power ; 32 :
29030: LD_ADDR_OWVAR 42
29034: PUSH
29035: LD_INT 26
29037: ST_TO_ADDR
29038: GO 29098
29040: LD_INT 32
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29048
29046: GO 29059
29048: POP
// bc_type := b_siberite_power ; 33 :
29049: LD_ADDR_OWVAR 42
29053: PUSH
29054: LD_INT 28
29056: ST_TO_ADDR
29057: GO 29098
29059: LD_INT 33
29061: DOUBLE
29062: EQUAL
29063: IFTRUE 29067
29065: GO 29078
29067: POP
// bc_type := b_oil_mine ; 34 :
29068: LD_ADDR_OWVAR 42
29072: PUSH
29073: LD_INT 29
29075: ST_TO_ADDR
29076: GO 29098
29078: LD_INT 34
29080: DOUBLE
29081: EQUAL
29082: IFTRUE 29086
29084: GO 29097
29086: POP
// bc_type := b_siberite_mine ; end ;
29087: LD_ADDR_OWVAR 42
29091: PUSH
29092: LD_INT 30
29094: ST_TO_ADDR
29095: GO 29098
29097: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29098: LD_ADDR_VAR 0 8
29102: PUSH
29103: LD_VAR 0 5
29107: PPUSH
29108: LD_VAR 0 6
29112: PPUSH
29113: LD_VAR 0 3
29117: PPUSH
29118: CALL_OW 47
29122: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29123: LD_OWVAR 42
29127: PUSH
29128: LD_INT 32
29130: PUSH
29131: LD_INT 33
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: IN
29138: IFFALSE 29154
// PlaceWeaponTurret ( b , weapon ) ;
29140: LD_VAR 0 8
29144: PPUSH
29145: LD_VAR 0 4
29149: PPUSH
29150: CALL_OW 431
// end ;
29154: LD_VAR 0 7
29158: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29159: LD_INT 0
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29165: LD_ADDR_VAR 0 4
29169: PUSH
29170: LD_INT 22
29172: PUSH
29173: LD_OWVAR 2
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 30
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 30
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 69
29218: ST_TO_ADDR
// if not tmp then
29219: LD_VAR 0 4
29223: NOT
29224: IFFALSE 29228
// exit ;
29226: GO 29287
// for i in tmp do
29228: LD_ADDR_VAR 0 2
29232: PUSH
29233: LD_VAR 0 4
29237: PUSH
29238: FOR_IN
29239: IFFALSE 29285
// for j = 1 to 3 do
29241: LD_ADDR_VAR 0 3
29245: PUSH
29246: DOUBLE
29247: LD_INT 1
29249: DEC
29250: ST_TO_ADDR
29251: LD_INT 3
29253: PUSH
29254: FOR_TO
29255: IFFALSE 29281
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29257: LD_VAR 0 2
29261: PPUSH
29262: CALL_OW 274
29266: PPUSH
29267: LD_VAR 0 3
29271: PPUSH
29272: LD_INT 99999
29274: PPUSH
29275: CALL_OW 277
29279: GO 29254
29281: POP
29282: POP
29283: GO 29238
29285: POP
29286: POP
// end ;
29287: LD_VAR 0 1
29291: RET
// export function hHackSetLevel10 ; var i , j ; begin
29292: LD_INT 0
29294: PPUSH
29295: PPUSH
29296: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29297: LD_ADDR_VAR 0 2
29301: PUSH
29302: LD_INT 21
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PPUSH
29312: CALL_OW 69
29316: PUSH
29317: FOR_IN
29318: IFFALSE 29370
// if IsSelected ( i ) then
29320: LD_VAR 0 2
29324: PPUSH
29325: CALL_OW 306
29329: IFFALSE 29368
// begin for j := 1 to 4 do
29331: LD_ADDR_VAR 0 3
29335: PUSH
29336: DOUBLE
29337: LD_INT 1
29339: DEC
29340: ST_TO_ADDR
29341: LD_INT 4
29343: PUSH
29344: FOR_TO
29345: IFFALSE 29366
// SetSkill ( i , j , 10 ) ;
29347: LD_VAR 0 2
29351: PPUSH
29352: LD_VAR 0 3
29356: PPUSH
29357: LD_INT 10
29359: PPUSH
29360: CALL_OW 237
29364: GO 29344
29366: POP
29367: POP
// end ;
29368: GO 29317
29370: POP
29371: POP
// end ;
29372: LD_VAR 0 1
29376: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29377: LD_INT 0
29379: PPUSH
29380: PPUSH
29381: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29382: LD_ADDR_VAR 0 2
29386: PUSH
29387: LD_INT 22
29389: PUSH
29390: LD_OWVAR 2
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 21
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PPUSH
29413: CALL_OW 69
29417: PUSH
29418: FOR_IN
29419: IFFALSE 29460
// begin for j := 1 to 4 do
29421: LD_ADDR_VAR 0 3
29425: PUSH
29426: DOUBLE
29427: LD_INT 1
29429: DEC
29430: ST_TO_ADDR
29431: LD_INT 4
29433: PUSH
29434: FOR_TO
29435: IFFALSE 29456
// SetSkill ( i , j , 10 ) ;
29437: LD_VAR 0 2
29441: PPUSH
29442: LD_VAR 0 3
29446: PPUSH
29447: LD_INT 10
29449: PPUSH
29450: CALL_OW 237
29454: GO 29434
29456: POP
29457: POP
// end ;
29458: GO 29418
29460: POP
29461: POP
// end ;
29462: LD_VAR 0 1
29466: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29467: LD_INT 0
29469: PPUSH
// uc_side := your_side ;
29470: LD_ADDR_OWVAR 20
29474: PUSH
29475: LD_OWVAR 2
29479: ST_TO_ADDR
// uc_nation := nation ;
29480: LD_ADDR_OWVAR 21
29484: PUSH
29485: LD_VAR 0 1
29489: ST_TO_ADDR
// InitHc ;
29490: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29494: LD_INT 0
29496: PPUSH
29497: LD_VAR 0 2
29501: PPUSH
29502: LD_VAR 0 3
29506: PPUSH
29507: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29511: LD_VAR 0 4
29515: PPUSH
29516: LD_VAR 0 5
29520: PPUSH
29521: CALL_OW 428
29525: PUSH
29526: LD_INT 0
29528: EQUAL
29529: IFFALSE 29553
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29531: CALL_OW 44
29535: PPUSH
29536: LD_VAR 0 4
29540: PPUSH
29541: LD_VAR 0 5
29545: PPUSH
29546: LD_INT 1
29548: PPUSH
29549: CALL_OW 48
// end ;
29553: LD_VAR 0 6
29557: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29558: LD_INT 0
29560: PPUSH
29561: PPUSH
// uc_side := your_side ;
29562: LD_ADDR_OWVAR 20
29566: PUSH
29567: LD_OWVAR 2
29571: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29572: LD_VAR 0 1
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 4
29588: PUSH
29589: LD_INT 5
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: IN
29599: IFFALSE 29611
// uc_nation := nation_american else
29601: LD_ADDR_OWVAR 21
29605: PUSH
29606: LD_INT 1
29608: ST_TO_ADDR
29609: GO 29654
// if chassis in [ 11 , 12 , 13 , 14 ] then
29611: LD_VAR 0 1
29615: PUSH
29616: LD_INT 11
29618: PUSH
29619: LD_INT 12
29621: PUSH
29622: LD_INT 13
29624: PUSH
29625: LD_INT 14
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: IN
29634: IFFALSE 29646
// uc_nation := nation_arabian else
29636: LD_ADDR_OWVAR 21
29640: PUSH
29641: LD_INT 2
29643: ST_TO_ADDR
29644: GO 29654
// uc_nation := nation_russian ;
29646: LD_ADDR_OWVAR 21
29650: PUSH
29651: LD_INT 3
29653: ST_TO_ADDR
// vc_chassis := chassis ;
29654: LD_ADDR_OWVAR 37
29658: PUSH
29659: LD_VAR 0 1
29663: ST_TO_ADDR
// vc_engine := engine ;
29664: LD_ADDR_OWVAR 39
29668: PUSH
29669: LD_VAR 0 2
29673: ST_TO_ADDR
// vc_control := control ;
29674: LD_ADDR_OWVAR 38
29678: PUSH
29679: LD_VAR 0 3
29683: ST_TO_ADDR
// vc_weapon := weapon ;
29684: LD_ADDR_OWVAR 40
29688: PUSH
29689: LD_VAR 0 4
29693: ST_TO_ADDR
// un := CreateVehicle ;
29694: LD_ADDR_VAR 0 8
29698: PUSH
29699: CALL_OW 45
29703: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29704: LD_VAR 0 8
29708: PPUSH
29709: LD_INT 0
29711: PPUSH
29712: LD_INT 5
29714: PPUSH
29715: CALL_OW 12
29719: PPUSH
29720: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29724: LD_VAR 0 8
29728: PPUSH
29729: LD_VAR 0 5
29733: PPUSH
29734: LD_VAR 0 6
29738: PPUSH
29739: LD_INT 1
29741: PPUSH
29742: CALL_OW 48
// end ;
29746: LD_VAR 0 7
29750: RET
// export hInvincible ; every 1 do
29751: GO 29753
29753: DISABLE
// hInvincible := [ ] ;
29754: LD_ADDR_EXP 98
29758: PUSH
29759: EMPTY
29760: ST_TO_ADDR
29761: END
// every 10 do var i ;
29762: GO 29764
29764: DISABLE
29765: LD_INT 0
29767: PPUSH
// begin enable ;
29768: ENABLE
// if not hInvincible then
29769: LD_EXP 98
29773: NOT
29774: IFFALSE 29778
// exit ;
29776: GO 29822
// for i in hInvincible do
29778: LD_ADDR_VAR 0 1
29782: PUSH
29783: LD_EXP 98
29787: PUSH
29788: FOR_IN
29789: IFFALSE 29820
// if GetLives ( i ) < 1000 then
29791: LD_VAR 0 1
29795: PPUSH
29796: CALL_OW 256
29800: PUSH
29801: LD_INT 1000
29803: LESS
29804: IFFALSE 29818
// SetLives ( i , 1000 ) ;
29806: LD_VAR 0 1
29810: PPUSH
29811: LD_INT 1000
29813: PPUSH
29814: CALL_OW 234
29818: GO 29788
29820: POP
29821: POP
// end ;
29822: PPOPN 1
29824: END
// export function hHackInvincible ; var i ; begin
29825: LD_INT 0
29827: PPUSH
29828: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29829: LD_ADDR_VAR 0 2
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: LD_INT 21
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 21
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: LIST
29861: PPUSH
29862: CALL_OW 69
29866: PUSH
29867: FOR_IN
29868: IFFALSE 29929
// if IsSelected ( i ) then
29870: LD_VAR 0 2
29874: PPUSH
29875: CALL_OW 306
29879: IFFALSE 29927
// begin if i in hInvincible then
29881: LD_VAR 0 2
29885: PUSH
29886: LD_EXP 98
29890: IN
29891: IFFALSE 29911
// hInvincible := hInvincible diff i else
29893: LD_ADDR_EXP 98
29897: PUSH
29898: LD_EXP 98
29902: PUSH
29903: LD_VAR 0 2
29907: DIFF
29908: ST_TO_ADDR
29909: GO 29927
// hInvincible := hInvincible union i ;
29911: LD_ADDR_EXP 98
29915: PUSH
29916: LD_EXP 98
29920: PUSH
29921: LD_VAR 0 2
29925: UNION
29926: ST_TO_ADDR
// end ;
29927: GO 29867
29929: POP
29930: POP
// end ;
29931: LD_VAR 0 1
29935: RET
// export function hHackInvisible ; var i , j ; begin
29936: LD_INT 0
29938: PPUSH
29939: PPUSH
29940: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: LD_INT 21
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PPUSH
29956: CALL_OW 69
29960: PUSH
29961: FOR_IN
29962: IFFALSE 29986
// if IsSelected ( i ) then
29964: LD_VAR 0 2
29968: PPUSH
29969: CALL_OW 306
29973: IFFALSE 29984
// ComForceInvisible ( i ) ;
29975: LD_VAR 0 2
29979: PPUSH
29980: CALL_OW 496
29984: GO 29961
29986: POP
29987: POP
// end ;
29988: LD_VAR 0 1
29992: RET
// export function hHackChangeYourSide ; begin
29993: LD_INT 0
29995: PPUSH
// if your_side = 8 then
29996: LD_OWVAR 2
30000: PUSH
30001: LD_INT 8
30003: EQUAL
30004: IFFALSE 30016
// your_side := 0 else
30006: LD_ADDR_OWVAR 2
30010: PUSH
30011: LD_INT 0
30013: ST_TO_ADDR
30014: GO 30030
// your_side := your_side + 1 ;
30016: LD_ADDR_OWVAR 2
30020: PUSH
30021: LD_OWVAR 2
30025: PUSH
30026: LD_INT 1
30028: PLUS
30029: ST_TO_ADDR
// end ;
30030: LD_VAR 0 1
30034: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30035: LD_INT 0
30037: PPUSH
30038: PPUSH
30039: PPUSH
// for i in all_units do
30040: LD_ADDR_VAR 0 2
30044: PUSH
30045: LD_OWVAR 3
30049: PUSH
30050: FOR_IN
30051: IFFALSE 30129
// if IsSelected ( i ) then
30053: LD_VAR 0 2
30057: PPUSH
30058: CALL_OW 306
30062: IFFALSE 30127
// begin j := GetSide ( i ) ;
30064: LD_ADDR_VAR 0 3
30068: PUSH
30069: LD_VAR 0 2
30073: PPUSH
30074: CALL_OW 255
30078: ST_TO_ADDR
// if j = 8 then
30079: LD_VAR 0 3
30083: PUSH
30084: LD_INT 8
30086: EQUAL
30087: IFFALSE 30099
// j := 0 else
30089: LD_ADDR_VAR 0 3
30093: PUSH
30094: LD_INT 0
30096: ST_TO_ADDR
30097: GO 30113
// j := j + 1 ;
30099: LD_ADDR_VAR 0 3
30103: PUSH
30104: LD_VAR 0 3
30108: PUSH
30109: LD_INT 1
30111: PLUS
30112: ST_TO_ADDR
// SetSide ( i , j ) ;
30113: LD_VAR 0 2
30117: PPUSH
30118: LD_VAR 0 3
30122: PPUSH
30123: CALL_OW 235
// end ;
30127: GO 30050
30129: POP
30130: POP
// end ;
30131: LD_VAR 0 1
30135: RET
// export function hHackFog ; begin
30136: LD_INT 0
30138: PPUSH
// FogOff ( true ) ;
30139: LD_INT 1
30141: PPUSH
30142: CALL_OW 344
// end ;
30146: LD_VAR 0 1
30150: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30151: LD_INT 0
30153: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30154: LD_VAR 0 1
30158: PPUSH
30159: LD_VAR 0 2
30163: PPUSH
30164: LD_VAR 0 3
30168: PPUSH
30169: LD_INT 1
30171: PPUSH
30172: LD_INT 1
30174: PPUSH
30175: CALL_OW 483
// CenterOnXY ( x , y ) ;
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: CALL_OW 84
// end ;
30193: LD_VAR 0 4
30197: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30198: LD_INT 0
30200: PPUSH
30201: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30202: LD_VAR 0 1
30206: NOT
30207: PUSH
30208: LD_VAR 0 2
30212: PPUSH
30213: LD_VAR 0 3
30217: PPUSH
30218: CALL_OW 488
30222: NOT
30223: OR
30224: PUSH
30225: LD_VAR 0 1
30229: PPUSH
30230: CALL_OW 266
30234: PUSH
30235: LD_INT 3
30237: NONEQUAL
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 247
30248: PUSH
30249: LD_INT 1
30251: EQUAL
30252: NOT
30253: AND
30254: OR
30255: IFFALSE 30259
// exit ;
30257: GO 30541
// if GetType ( factory ) = unit_human then
30259: LD_VAR 0 1
30263: PPUSH
30264: CALL_OW 247
30268: PUSH
30269: LD_INT 1
30271: EQUAL
30272: IFFALSE 30289
// factory := IsInUnit ( factory ) ;
30274: LD_ADDR_VAR 0 1
30278: PUSH
30279: LD_VAR 0 1
30283: PPUSH
30284: CALL_OW 310
30288: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30289: LD_VAR 0 1
30293: PPUSH
30294: CALL_OW 266
30298: PUSH
30299: LD_INT 3
30301: NONEQUAL
30302: IFFALSE 30306
// exit ;
30304: GO 30541
// for i := 1 to Count ( factoryWaypoints ) do
30306: LD_ADDR_VAR 0 5
30310: PUSH
30311: DOUBLE
30312: LD_INT 1
30314: DEC
30315: ST_TO_ADDR
30316: LD_EXP 99
30320: PPUSH
30321: CALL 39044 0 1
30325: PUSH
30326: FOR_TO
30327: IFFALSE 30489
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
30329: LD_VAR 0 2
30333: PPUSH
30334: LD_VAR 0 3
30338: PPUSH
30339: CALL_OW 428
30343: PUSH
30344: LD_EXP 99
30348: PUSH
30349: LD_VAR 0 5
30353: ARRAY
30354: PUSH
30355: LD_INT 2
30357: ARRAY
30358: EQUAL
30359: IFFALSE 30391
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30361: LD_ADDR_EXP 99
30365: PUSH
30366: LD_EXP 99
30370: PPUSH
30371: LD_VAR 0 5
30375: PPUSH
30376: CALL_OW 3
30380: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30381: CALL 30546 0 0
// exit ;
30385: POP
30386: POP
30387: GO 30541
// end else
30389: GO 30487
// if factory = factoryWaypoints [ i ] [ 2 ] then
30391: LD_VAR 0 1
30395: PUSH
30396: LD_EXP 99
30400: PUSH
30401: LD_VAR 0 5
30405: ARRAY
30406: PUSH
30407: LD_INT 2
30409: ARRAY
30410: EQUAL
30411: IFFALSE 30487
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30413: LD_ADDR_EXP 99
30417: PUSH
30418: LD_EXP 99
30422: PPUSH
30423: LD_VAR 0 5
30427: PPUSH
30428: CALL_OW 3
30432: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30433: LD_ADDR_EXP 99
30437: PUSH
30438: LD_EXP 99
30442: PPUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 255
30452: PUSH
30453: LD_VAR 0 1
30457: PUSH
30458: LD_VAR 0 2
30462: PUSH
30463: LD_VAR 0 3
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: PPUSH
30474: CALL 74653 0 2
30478: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30479: CALL 30546 0 0
// exit ;
30483: POP
30484: POP
30485: GO 30541
// end ; end ;
30487: GO 30326
30489: POP
30490: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30491: LD_ADDR_EXP 99
30495: PUSH
30496: LD_EXP 99
30500: PPUSH
30501: LD_VAR 0 1
30505: PPUSH
30506: CALL_OW 255
30510: PUSH
30511: LD_VAR 0 1
30515: PUSH
30516: LD_VAR 0 2
30520: PUSH
30521: LD_VAR 0 3
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: PPUSH
30532: CALL 74653 0 2
30536: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30537: CALL 30546 0 0
// end ;
30541: LD_VAR 0 4
30545: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30546: LD_INT 0
30548: PPUSH
30549: PPUSH
30550: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30551: LD_STRING resetFactoryWaypoint();
30553: PPUSH
30554: CALL_OW 559
// if factoryWaypoints then
30558: LD_EXP 99
30562: IFFALSE 30683
// begin list := factoryWaypoints ;
30564: LD_ADDR_VAR 0 3
30568: PUSH
30569: LD_EXP 99
30573: ST_TO_ADDR
// for i := 1 to list do
30574: LD_ADDR_VAR 0 2
30578: PUSH
30579: DOUBLE
30580: LD_INT 1
30582: DEC
30583: ST_TO_ADDR
30584: LD_VAR 0 3
30588: PUSH
30589: FOR_TO
30590: IFFALSE 30681
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30592: LD_STRING setFactoryWaypointXY(
30594: PUSH
30595: LD_VAR 0 3
30599: PUSH
30600: LD_VAR 0 2
30604: ARRAY
30605: PUSH
30606: LD_INT 1
30608: ARRAY
30609: STR
30610: PUSH
30611: LD_STRING ,
30613: STR
30614: PUSH
30615: LD_VAR 0 3
30619: PUSH
30620: LD_VAR 0 2
30624: ARRAY
30625: PUSH
30626: LD_INT 2
30628: ARRAY
30629: STR
30630: PUSH
30631: LD_STRING ,
30633: STR
30634: PUSH
30635: LD_VAR 0 3
30639: PUSH
30640: LD_VAR 0 2
30644: ARRAY
30645: PUSH
30646: LD_INT 3
30648: ARRAY
30649: STR
30650: PUSH
30651: LD_STRING ,
30653: STR
30654: PUSH
30655: LD_VAR 0 3
30659: PUSH
30660: LD_VAR 0 2
30664: ARRAY
30665: PUSH
30666: LD_INT 4
30668: ARRAY
30669: STR
30670: PUSH
30671: LD_STRING )
30673: STR
30674: PPUSH
30675: CALL_OW 559
30679: GO 30589
30681: POP
30682: POP
// end ; end ;
30683: LD_VAR 0 1
30687: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30688: LD_INT 0
30690: PPUSH
// if HexInfo ( x , y ) = warehouse then
30691: LD_VAR 0 2
30695: PPUSH
30696: LD_VAR 0 3
30700: PPUSH
30701: CALL_OW 428
30705: PUSH
30706: LD_VAR 0 1
30710: EQUAL
30711: IFFALSE 30738
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30713: LD_ADDR_EXP 100
30717: PUSH
30718: LD_EXP 100
30722: PPUSH
30723: LD_VAR 0 1
30727: PPUSH
30728: LD_INT 0
30730: PPUSH
30731: CALL_OW 1
30735: ST_TO_ADDR
30736: GO 30789
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30738: LD_ADDR_EXP 100
30742: PUSH
30743: LD_EXP 100
30747: PPUSH
30748: LD_VAR 0 1
30752: PPUSH
30753: LD_VAR 0 1
30757: PPUSH
30758: CALL_OW 255
30762: PUSH
30763: LD_VAR 0 1
30767: PUSH
30768: LD_VAR 0 2
30772: PUSH
30773: LD_VAR 0 3
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: PPUSH
30784: CALL_OW 1
30788: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30789: CALL 30798 0 0
// end ;
30793: LD_VAR 0 4
30797: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30798: LD_INT 0
30800: PPUSH
30801: PPUSH
30802: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30803: LD_STRING resetWarehouseGatheringPoints();
30805: PPUSH
30806: CALL_OW 559
// if warehouseGatheringPoints then
30810: LD_EXP 100
30814: IFFALSE 30940
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_EXP 100
30825: PPUSH
30826: CALL 78415 0 1
30830: ST_TO_ADDR
// for i := 1 to list do
30831: LD_ADDR_VAR 0 2
30835: PUSH
30836: DOUBLE
30837: LD_INT 1
30839: DEC
30840: ST_TO_ADDR
30841: LD_VAR 0 3
30845: PUSH
30846: FOR_TO
30847: IFFALSE 30938
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30849: LD_STRING setWarehouseGatheringPointXY(
30851: PUSH
30852: LD_VAR 0 3
30856: PUSH
30857: LD_VAR 0 2
30861: ARRAY
30862: PUSH
30863: LD_INT 1
30865: ARRAY
30866: STR
30867: PUSH
30868: LD_STRING ,
30870: STR
30871: PUSH
30872: LD_VAR 0 3
30876: PUSH
30877: LD_VAR 0 2
30881: ARRAY
30882: PUSH
30883: LD_INT 2
30885: ARRAY
30886: STR
30887: PUSH
30888: LD_STRING ,
30890: STR
30891: PUSH
30892: LD_VAR 0 3
30896: PUSH
30897: LD_VAR 0 2
30901: ARRAY
30902: PUSH
30903: LD_INT 3
30905: ARRAY
30906: STR
30907: PUSH
30908: LD_STRING ,
30910: STR
30911: PUSH
30912: LD_VAR 0 3
30916: PUSH
30917: LD_VAR 0 2
30921: ARRAY
30922: PUSH
30923: LD_INT 4
30925: ARRAY
30926: STR
30927: PUSH
30928: LD_STRING )
30930: STR
30931: PPUSH
30932: CALL_OW 559
30936: GO 30846
30938: POP
30939: POP
// end ; end ;
30940: LD_VAR 0 1
30944: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30945: LD_EXP 100
30949: IFFALSE 31634
30951: GO 30953
30953: DISABLE
30954: LD_INT 0
30956: PPUSH
30957: PPUSH
30958: PPUSH
30959: PPUSH
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
// begin enable ;
30965: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30966: LD_ADDR_VAR 0 3
30970: PUSH
30971: LD_EXP 100
30975: PPUSH
30976: CALL 78415 0 1
30980: ST_TO_ADDR
// if not list then
30981: LD_VAR 0 3
30985: NOT
30986: IFFALSE 30990
// exit ;
30988: GO 31634
// for i := 1 to list do
30990: LD_ADDR_VAR 0 1
30994: PUSH
30995: DOUBLE
30996: LD_INT 1
30998: DEC
30999: ST_TO_ADDR
31000: LD_VAR 0 3
31004: PUSH
31005: FOR_TO
31006: IFFALSE 31632
// begin depot := list [ i ] [ 2 ] ;
31008: LD_ADDR_VAR 0 8
31012: PUSH
31013: LD_VAR 0 3
31017: PUSH
31018: LD_VAR 0 1
31022: ARRAY
31023: PUSH
31024: LD_INT 2
31026: ARRAY
31027: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31028: LD_ADDR_VAR 0 5
31032: PUSH
31033: LD_VAR 0 3
31037: PUSH
31038: LD_VAR 0 1
31042: ARRAY
31043: PUSH
31044: LD_INT 1
31046: ARRAY
31047: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31048: LD_VAR 0 8
31052: PPUSH
31053: CALL_OW 301
31057: PUSH
31058: LD_VAR 0 5
31062: PUSH
31063: LD_VAR 0 8
31067: PPUSH
31068: CALL_OW 255
31072: NONEQUAL
31073: OR
31074: IFFALSE 31103
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31076: LD_ADDR_EXP 100
31080: PUSH
31081: LD_EXP 100
31085: PPUSH
31086: LD_VAR 0 8
31090: PPUSH
31091: LD_INT 0
31093: PPUSH
31094: CALL_OW 1
31098: ST_TO_ADDR
// exit ;
31099: POP
31100: POP
31101: GO 31634
// end ; x := list [ i ] [ 3 ] ;
31103: LD_ADDR_VAR 0 6
31107: PUSH
31108: LD_VAR 0 3
31112: PUSH
31113: LD_VAR 0 1
31117: ARRAY
31118: PUSH
31119: LD_INT 3
31121: ARRAY
31122: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31123: LD_ADDR_VAR 0 7
31127: PUSH
31128: LD_VAR 0 3
31132: PUSH
31133: LD_VAR 0 1
31137: ARRAY
31138: PUSH
31139: LD_INT 4
31141: ARRAY
31142: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31143: LD_ADDR_VAR 0 9
31147: PUSH
31148: LD_VAR 0 6
31152: PPUSH
31153: LD_VAR 0 7
31157: PPUSH
31158: LD_INT 16
31160: PPUSH
31161: CALL 76999 0 3
31165: ST_TO_ADDR
// if not cratesNearbyPoint then
31166: LD_VAR 0 9
31170: NOT
31171: IFFALSE 31177
// exit ;
31173: POP
31174: POP
31175: GO 31634
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31177: LD_ADDR_VAR 0 4
31181: PUSH
31182: LD_INT 22
31184: PUSH
31185: LD_VAR 0 5
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: LD_INT 60
31199: PUSH
31200: EMPTY
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 91
31209: PUSH
31210: LD_VAR 0 8
31214: PUSH
31215: LD_INT 6
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: PUSH
31226: LD_INT 25
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 25
31238: PUSH
31239: LD_INT 16
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: PPUSH
31257: CALL_OW 69
31261: PUSH
31262: LD_VAR 0 8
31266: PPUSH
31267: CALL_OW 313
31271: PPUSH
31272: LD_INT 3
31274: PUSH
31275: LD_INT 60
31277: PUSH
31278: EMPTY
31279: LIST
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 25
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 25
31300: PUSH
31301: LD_INT 16
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: LIST
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PPUSH
31317: CALL_OW 72
31321: UNION
31322: ST_TO_ADDR
// if tmp then
31323: LD_VAR 0 4
31327: IFFALSE 31407
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31329: LD_ADDR_VAR 0 4
31333: PUSH
31334: LD_VAR 0 4
31338: PPUSH
31339: LD_INT 3
31341: PPUSH
31342: CALL 74968 0 2
31346: ST_TO_ADDR
// for j in tmp do
31347: LD_ADDR_VAR 0 2
31351: PUSH
31352: LD_VAR 0 4
31356: PUSH
31357: FOR_IN
31358: IFFALSE 31401
// begin if IsInUnit ( j ) then
31360: LD_VAR 0 2
31364: PPUSH
31365: CALL_OW 310
31369: IFFALSE 31380
// ComExit ( j ) ;
31371: LD_VAR 0 2
31375: PPUSH
31376: CALL 75051 0 1
// AddComCollect ( j , x , y ) ;
31380: LD_VAR 0 2
31384: PPUSH
31385: LD_VAR 0 6
31389: PPUSH
31390: LD_VAR 0 7
31394: PPUSH
31395: CALL_OW 177
// end ;
31399: GO 31357
31401: POP
31402: POP
// exit ;
31403: POP
31404: POP
31405: GO 31634
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31407: LD_ADDR_VAR 0 4
31411: PUSH
31412: LD_INT 22
31414: PUSH
31415: LD_VAR 0 5
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 91
31426: PUSH
31427: LD_VAR 0 8
31431: PUSH
31432: LD_INT 8
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 34
31445: PUSH
31446: LD_INT 12
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 34
31455: PUSH
31456: LD_INT 51
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 34
31465: PUSH
31466: LD_INT 32
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 34
31475: PUSH
31476: LD_INT 89
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: PPUSH
31495: CALL_OW 69
31499: ST_TO_ADDR
// if tmp then
31500: LD_VAR 0 4
31504: IFFALSE 31630
// begin for j in tmp do
31506: LD_ADDR_VAR 0 2
31510: PUSH
31511: LD_VAR 0 4
31515: PUSH
31516: FOR_IN
31517: IFFALSE 31628
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31519: LD_VAR 0 2
31523: PPUSH
31524: CALL_OW 262
31528: PUSH
31529: LD_INT 3
31531: EQUAL
31532: PUSH
31533: LD_VAR 0 2
31537: PPUSH
31538: CALL_OW 261
31542: PUSH
31543: LD_INT 20
31545: GREATER
31546: OR
31547: PUSH
31548: LD_VAR 0 2
31552: PPUSH
31553: CALL_OW 314
31557: NOT
31558: AND
31559: PUSH
31560: LD_VAR 0 2
31564: PPUSH
31565: CALL_OW 263
31569: PUSH
31570: LD_INT 1
31572: NONEQUAL
31573: PUSH
31574: LD_VAR 0 2
31578: PPUSH
31579: CALL_OW 311
31583: OR
31584: AND
31585: IFFALSE 31626
// begin ComCollect ( j , x , y ) ;
31587: LD_VAR 0 2
31591: PPUSH
31592: LD_VAR 0 6
31596: PPUSH
31597: LD_VAR 0 7
31601: PPUSH
31602: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31606: LD_VAR 0 2
31610: PPUSH
31611: LD_VAR 0 8
31615: PPUSH
31616: CALL_OW 172
// exit ;
31620: POP
31621: POP
31622: POP
31623: POP
31624: GO 31634
// end ;
31626: GO 31516
31628: POP
31629: POP
// end ; end ;
31630: GO 31005
31632: POP
31633: POP
// end ; end_of_file
31634: PPOPN 9
31636: END
// export function SOS_UnitDestroyed ( un ) ; begin
31637: LD_INT 0
31639: PPUSH
// ComRadiation ( un ) ;
31640: LD_VAR 0 1
31644: PPUSH
31645: CALL 32626 0 1
// end ;
31649: LD_VAR 0 2
31653: RET
// export function SOS_UnitKamikazed ( un ) ; begin
31654: LD_INT 0
31656: PPUSH
// ComRadiation ( un ) ;
31657: LD_VAR 0 1
31661: PPUSH
31662: CALL 32626 0 1
// end ;
31666: LD_VAR 0 2
31670: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31671: LD_INT 0
31673: PPUSH
// end ;
31674: LD_VAR 0 4
31678: RET
// export function SOS_Command ( cmd ) ; begin
31679: LD_INT 0
31681: PPUSH
// end ;
31682: LD_VAR 0 2
31686: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31687: LD_INT 0
31689: PPUSH
// end ;
31690: LD_VAR 0 6
31694: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
31695: LD_INT 0
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
31701: PPUSH
// if not vehicle or not factory then
31702: LD_VAR 0 1
31706: NOT
31707: PUSH
31708: LD_VAR 0 2
31712: NOT
31713: OR
31714: IFFALSE 31718
// exit ;
31716: GO 32217
// if not factoryWaypoints then
31718: LD_EXP 99
31722: NOT
31723: IFFALSE 31727
// exit ;
31725: GO 32217
// for i := 1 to Count ( factoryWaypoints ) do
31727: LD_ADDR_VAR 0 4
31731: PUSH
31732: DOUBLE
31733: LD_INT 1
31735: DEC
31736: ST_TO_ADDR
31737: LD_EXP 99
31741: PPUSH
31742: CALL 39044 0 1
31746: PUSH
31747: FOR_TO
31748: IFFALSE 32215
// if factoryWaypoints [ i ] [ 2 ] = factory then
31750: LD_EXP 99
31754: PUSH
31755: LD_VAR 0 4
31759: ARRAY
31760: PUSH
31761: LD_INT 2
31763: ARRAY
31764: PUSH
31765: LD_VAR 0 2
31769: EQUAL
31770: IFFALSE 32213
// begin if GetControl ( vehicle ) = control_manual then
31772: LD_VAR 0 1
31776: PPUSH
31777: CALL_OW 263
31781: PUSH
31782: LD_INT 1
31784: EQUAL
31785: IFFALSE 32096
// begin driver := IsDrivenBy ( vehicle ) ;
31787: LD_ADDR_VAR 0 6
31791: PUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: CALL_OW 311
31801: ST_TO_ADDR
// tag := GetTag ( driver ) ;
31802: LD_ADDR_VAR 0 5
31806: PUSH
31807: LD_VAR 0 6
31811: PPUSH
31812: CALL_OW 110
31816: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
31817: LD_VAR 0 5
31821: PUSH
31822: LD_INT 501
31824: EQUAL
31825: PUSH
31826: LD_VAR 0 1
31830: PPUSH
31831: CALL_OW 110
31835: PUSH
31836: LD_INT 501
31838: EQUAL
31839: OR
31840: IFFALSE 31846
// exit ;
31842: POP
31843: POP
31844: GO 32217
// if not HasTask ( driver ) then
31846: LD_VAR 0 6
31850: PPUSH
31851: CALL_OW 314
31855: NOT
31856: IFFALSE 32094
// begin SetTag ( driver , tDriver ) ;
31858: LD_VAR 0 6
31862: PPUSH
31863: LD_INT 501
31865: PPUSH
31866: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
31870: LD_VAR 0 1
31874: PPUSH
31875: LD_INT 501
31877: PPUSH
31878: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
31882: LD_ADDR_VAR 0 7
31886: PUSH
31887: LD_EXP 99
31891: PUSH
31892: LD_VAR 0 4
31896: ARRAY
31897: PUSH
31898: LD_INT 3
31900: ARRAY
31901: PPUSH
31902: LD_EXP 99
31906: PUSH
31907: LD_VAR 0 4
31911: ARRAY
31912: PUSH
31913: LD_INT 4
31915: ARRAY
31916: PPUSH
31917: CALL_OW 428
31921: ST_TO_ADDR
// if hex then
31922: LD_VAR 0 7
31926: IFFALSE 31944
// ComMoveUnit ( driver , hex ) else
31928: LD_VAR 0 6
31932: PPUSH
31933: LD_VAR 0 7
31937: PPUSH
31938: CALL_OW 112
31942: GO 31983
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
31944: LD_VAR 0 6
31948: PPUSH
31949: LD_EXP 99
31953: PUSH
31954: LD_VAR 0 4
31958: ARRAY
31959: PUSH
31960: LD_INT 3
31962: ARRAY
31963: PPUSH
31964: LD_EXP 99
31968: PUSH
31969: LD_VAR 0 4
31973: ARRAY
31974: PUSH
31975: LD_INT 4
31977: ARRAY
31978: PPUSH
31979: CALL_OW 111
// AddComExitVehicle ( driver ) ;
31983: LD_VAR 0 6
31987: PPUSH
31988: CALL_OW 181
// if Multiplayer then
31992: LD_OWVAR 4
31996: IFFALSE 32045
// begin repeat wait ( 10 ) ;
31998: LD_INT 10
32000: PPUSH
32001: CALL_OW 67
// until not IsInUnit ( driver ) ;
32005: LD_VAR 0 6
32009: PPUSH
32010: CALL_OW 310
32014: NOT
32015: IFFALSE 31998
// if not HasTask ( driver ) then
32017: LD_VAR 0 6
32021: PPUSH
32022: CALL_OW 314
32026: NOT
32027: IFFALSE 32043
// ComEnterUnit ( driver , factory ) ;
32029: LD_VAR 0 6
32033: PPUSH
32034: LD_VAR 0 2
32038: PPUSH
32039: CALL_OW 120
// end else
32043: GO 32059
// AddComEnterUnit ( driver , factory ) ;
32045: LD_VAR 0 6
32049: PPUSH
32050: LD_VAR 0 2
32054: PPUSH
32055: CALL_OW 180
// wait ( 0 0$1 ) ;
32059: LD_INT 35
32061: PPUSH
32062: CALL_OW 67
// SetTag ( driver , tag ) ;
32066: LD_VAR 0 6
32070: PPUSH
32071: LD_VAR 0 5
32075: PPUSH
32076: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
32080: LD_VAR 0 1
32084: PPUSH
32085: LD_INT 0
32087: PPUSH
32088: CALL_OW 109
// break ;
32092: GO 32215
// end ; end else
32094: GO 32213
// if GetControl ( vehicle ) = control_remote then
32096: LD_VAR 0 1
32100: PPUSH
32101: CALL_OW 263
32105: PUSH
32106: LD_INT 2
32108: EQUAL
32109: IFFALSE 32172
// begin wait ( 0 0$2 ) ;
32111: LD_INT 70
32113: PPUSH
32114: CALL_OW 67
// if Connect ( vehicle ) then
32118: LD_VAR 0 1
32122: PPUSH
32123: CALL 45250 0 1
32127: IFFALSE 32168
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32129: LD_VAR 0 1
32133: PPUSH
32134: LD_EXP 99
32138: PUSH
32139: LD_VAR 0 4
32143: ARRAY
32144: PUSH
32145: LD_INT 3
32147: ARRAY
32148: PPUSH
32149: LD_EXP 99
32153: PUSH
32154: LD_VAR 0 4
32158: ARRAY
32159: PUSH
32160: LD_INT 4
32162: ARRAY
32163: PPUSH
32164: CALL_OW 171
// break ;
32168: GO 32215
// end else
32170: GO 32213
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32172: LD_VAR 0 1
32176: PPUSH
32177: LD_EXP 99
32181: PUSH
32182: LD_VAR 0 4
32186: ARRAY
32187: PUSH
32188: LD_INT 3
32190: ARRAY
32191: PPUSH
32192: LD_EXP 99
32196: PUSH
32197: LD_VAR 0 4
32201: ARRAY
32202: PUSH
32203: LD_INT 4
32205: ARRAY
32206: PPUSH
32207: CALL_OW 171
// break ;
32211: GO 32215
// end ; end ;
32213: GO 31747
32215: POP
32216: POP
// end ;
32217: LD_VAR 0 3
32221: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32222: LD_INT 0
32224: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32225: LD_VAR 0 1
32229: PUSH
32230: LD_INT 250
32232: EQUAL
32233: PUSH
32234: LD_VAR 0 2
32238: PPUSH
32239: CALL_OW 264
32243: PUSH
32244: LD_INT 81
32246: EQUAL
32247: AND
32248: IFFALSE 32269
// MinerPlaceMine ( unit , x , y ) ;
32250: LD_VAR 0 2
32254: PPUSH
32255: LD_VAR 0 4
32259: PPUSH
32260: LD_VAR 0 5
32264: PPUSH
32265: CALL 35361 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32269: LD_VAR 0 1
32273: PUSH
32274: LD_INT 251
32276: EQUAL
32277: PUSH
32278: LD_VAR 0 2
32282: PPUSH
32283: CALL_OW 264
32287: PUSH
32288: LD_INT 81
32290: EQUAL
32291: AND
32292: IFFALSE 32313
// MinerDetonateMine ( unit , x , y ) ;
32294: LD_VAR 0 2
32298: PPUSH
32299: LD_VAR 0 4
32303: PPUSH
32304: LD_VAR 0 5
32308: PPUSH
32309: CALL 35636 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32313: LD_VAR 0 1
32317: PUSH
32318: LD_INT 252
32320: EQUAL
32321: PUSH
32322: LD_VAR 0 2
32326: PPUSH
32327: CALL_OW 264
32331: PUSH
32332: LD_INT 81
32334: EQUAL
32335: AND
32336: IFFALSE 32357
// MinerCreateMinefield ( unit , x , y ) ;
32338: LD_VAR 0 2
32342: PPUSH
32343: LD_VAR 0 4
32347: PPUSH
32348: LD_VAR 0 5
32352: PPUSH
32353: CALL 36053 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32357: LD_VAR 0 1
32361: PUSH
32362: LD_INT 253
32364: EQUAL
32365: PUSH
32366: LD_VAR 0 2
32370: PPUSH
32371: CALL_OW 257
32375: PUSH
32376: LD_INT 5
32378: EQUAL
32379: AND
32380: IFFALSE 32401
// ComBinocular ( unit , x , y ) ;
32382: LD_VAR 0 2
32386: PPUSH
32387: LD_VAR 0 4
32391: PPUSH
32392: LD_VAR 0 5
32396: PPUSH
32397: CALL 36422 0 3
// if selectedUnit then
32401: LD_VAR 0 3
32405: IFFALSE 32461
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32407: LD_VAR 0 1
32411: PUSH
32412: LD_INT 254
32414: EQUAL
32415: PUSH
32416: LD_VAR 0 2
32420: PPUSH
32421: CALL_OW 264
32425: PUSH
32426: LD_INT 99
32428: EQUAL
32429: AND
32430: PUSH
32431: LD_VAR 0 3
32435: PPUSH
32436: CALL_OW 263
32440: PUSH
32441: LD_INT 3
32443: EQUAL
32444: AND
32445: IFFALSE 32461
// HackDestroyVehicle ( unit , selectedUnit ) ;
32447: LD_VAR 0 2
32451: PPUSH
32452: LD_VAR 0 3
32456: PPUSH
32457: CALL 34725 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32461: LD_VAR 0 1
32465: PUSH
32466: LD_INT 255
32468: EQUAL
32469: PUSH
32470: LD_VAR 0 2
32474: PPUSH
32475: CALL_OW 264
32479: PUSH
32480: LD_INT 14
32482: PUSH
32483: LD_INT 53
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: IN
32490: AND
32491: PUSH
32492: LD_VAR 0 4
32496: PPUSH
32497: LD_VAR 0 5
32501: PPUSH
32502: CALL_OW 488
32506: AND
32507: IFFALSE 32531
// CutTreeXYR ( unit , x , y , 12 ) ;
32509: LD_VAR 0 2
32513: PPUSH
32514: LD_VAR 0 4
32518: PPUSH
32519: LD_VAR 0 5
32523: PPUSH
32524: LD_INT 12
32526: PPUSH
32527: CALL 32722 0 4
// if cmd = 256 then
32531: LD_VAR 0 1
32535: PUSH
32536: LD_INT 256
32538: EQUAL
32539: IFFALSE 32560
// SetFactoryWaypoint ( unit , x , y ) ;
32541: LD_VAR 0 2
32545: PPUSH
32546: LD_VAR 0 4
32550: PPUSH
32551: LD_VAR 0 5
32555: PPUSH
32556: CALL 30198 0 3
// if cmd = 257 then
32560: LD_VAR 0 1
32564: PUSH
32565: LD_INT 257
32567: EQUAL
32568: IFFALSE 32589
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32570: LD_VAR 0 2
32574: PPUSH
32575: LD_VAR 0 4
32579: PPUSH
32580: LD_VAR 0 5
32584: PPUSH
32585: CALL 30688 0 3
// if cmd = 258 then
32589: LD_VAR 0 1
32593: PUSH
32594: LD_INT 258
32596: EQUAL
32597: IFFALSE 32621
// BurnTreeXYR ( unit , x , y , 8 ) ;
32599: LD_VAR 0 2
32603: PPUSH
32604: LD_VAR 0 4
32608: PPUSH
32609: LD_VAR 0 5
32613: PPUSH
32614: LD_INT 8
32616: PPUSH
32617: CALL 33116 0 4
// end ;
32621: LD_VAR 0 6
32625: RET
// export function ComRadiation ( un ) ; var eff ; begin
32626: LD_INT 0
32628: PPUSH
32629: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
32630: LD_VAR 0 1
32634: PPUSH
32635: CALL_OW 264
32639: PUSH
32640: LD_INT 91
32642: NONEQUAL
32643: IFFALSE 32647
// exit ;
32645: GO 32717
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32647: LD_INT 68
32649: PPUSH
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 255
32659: PPUSH
32660: CALL_OW 321
32664: PUSH
32665: LD_INT 2
32667: EQUAL
32668: IFFALSE 32680
// eff := 70 else
32670: LD_ADDR_VAR 0 3
32674: PUSH
32675: LD_INT 70
32677: ST_TO_ADDR
32678: GO 32688
// eff := 30 ;
32680: LD_ADDR_VAR 0 3
32684: PUSH
32685: LD_INT 30
32687: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 250
32697: PPUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 251
32707: PPUSH
32708: LD_VAR 0 3
32712: PPUSH
32713: CALL_OW 495
// end ;
32717: LD_VAR 0 2
32721: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32722: LD_INT 0
32724: PPUSH
32725: PPUSH
32726: PPUSH
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
32732: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
32733: LD_VAR 0 1
32737: PPUSH
32738: CALL_OW 302
32742: NOT
32743: PUSH
32744: LD_VAR 0 2
32748: PPUSH
32749: LD_VAR 0 3
32753: PPUSH
32754: CALL_OW 488
32758: NOT
32759: OR
32760: PUSH
32761: LD_VAR 0 4
32765: NOT
32766: OR
32767: IFFALSE 32771
// exit ;
32769: GO 33111
// list := [ ] ;
32771: LD_ADDR_VAR 0 13
32775: PUSH
32776: EMPTY
32777: ST_TO_ADDR
// if x - r < 0 then
32778: LD_VAR 0 2
32782: PUSH
32783: LD_VAR 0 4
32787: MINUS
32788: PUSH
32789: LD_INT 0
32791: LESS
32792: IFFALSE 32804
// min_x := 0 else
32794: LD_ADDR_VAR 0 7
32798: PUSH
32799: LD_INT 0
32801: ST_TO_ADDR
32802: GO 32820
// min_x := x - r ;
32804: LD_ADDR_VAR 0 7
32808: PUSH
32809: LD_VAR 0 2
32813: PUSH
32814: LD_VAR 0 4
32818: MINUS
32819: ST_TO_ADDR
// if y - r < 0 then
32820: LD_VAR 0 3
32824: PUSH
32825: LD_VAR 0 4
32829: MINUS
32830: PUSH
32831: LD_INT 0
32833: LESS
32834: IFFALSE 32846
// min_y := 0 else
32836: LD_ADDR_VAR 0 8
32840: PUSH
32841: LD_INT 0
32843: ST_TO_ADDR
32844: GO 32862
// min_y := y - r ;
32846: LD_ADDR_VAR 0 8
32850: PUSH
32851: LD_VAR 0 3
32855: PUSH
32856: LD_VAR 0 4
32860: MINUS
32861: ST_TO_ADDR
// max_x := x + r ;
32862: LD_ADDR_VAR 0 9
32866: PUSH
32867: LD_VAR 0 2
32871: PUSH
32872: LD_VAR 0 4
32876: PLUS
32877: ST_TO_ADDR
// max_y := y + r ;
32878: LD_ADDR_VAR 0 10
32882: PUSH
32883: LD_VAR 0 3
32887: PUSH
32888: LD_VAR 0 4
32892: PLUS
32893: ST_TO_ADDR
// for _x = min_x to max_x do
32894: LD_ADDR_VAR 0 11
32898: PUSH
32899: DOUBLE
32900: LD_VAR 0 7
32904: DEC
32905: ST_TO_ADDR
32906: LD_VAR 0 9
32910: PUSH
32911: FOR_TO
32912: IFFALSE 33029
// for _y = min_y to max_y do
32914: LD_ADDR_VAR 0 12
32918: PUSH
32919: DOUBLE
32920: LD_VAR 0 8
32924: DEC
32925: ST_TO_ADDR
32926: LD_VAR 0 10
32930: PUSH
32931: FOR_TO
32932: IFFALSE 33025
// begin if not ValidHex ( _x , _y ) then
32934: LD_VAR 0 11
32938: PPUSH
32939: LD_VAR 0 12
32943: PPUSH
32944: CALL_OW 488
32948: NOT
32949: IFFALSE 32953
// continue ;
32951: GO 32931
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32953: LD_VAR 0 11
32957: PPUSH
32958: LD_VAR 0 12
32962: PPUSH
32963: CALL_OW 351
32967: PUSH
32968: LD_VAR 0 11
32972: PPUSH
32973: LD_VAR 0 12
32977: PPUSH
32978: CALL_OW 554
32982: AND
32983: IFFALSE 33023
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32985: LD_ADDR_VAR 0 13
32989: PUSH
32990: LD_VAR 0 13
32994: PPUSH
32995: LD_VAR 0 13
32999: PUSH
33000: LD_INT 1
33002: PLUS
33003: PPUSH
33004: LD_VAR 0 11
33008: PUSH
33009: LD_VAR 0 12
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PPUSH
33018: CALL_OW 2
33022: ST_TO_ADDR
// end ;
33023: GO 32931
33025: POP
33026: POP
33027: GO 32911
33029: POP
33030: POP
// if not list then
33031: LD_VAR 0 13
33035: NOT
33036: IFFALSE 33040
// exit ;
33038: GO 33111
// for i in list do
33040: LD_ADDR_VAR 0 6
33044: PUSH
33045: LD_VAR 0 13
33049: PUSH
33050: FOR_IN
33051: IFFALSE 33109
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33053: LD_VAR 0 1
33057: PPUSH
33058: LD_STRING M
33060: PUSH
33061: LD_VAR 0 6
33065: PUSH
33066: LD_INT 1
33068: ARRAY
33069: PUSH
33070: LD_VAR 0 6
33074: PUSH
33075: LD_INT 2
33077: ARRAY
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: PUSH
33100: EMPTY
33101: LIST
33102: PPUSH
33103: CALL_OW 447
33107: GO 33050
33109: POP
33110: POP
// end ;
33111: LD_VAR 0 5
33115: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33116: LD_INT 0
33118: PPUSH
33119: PPUSH
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
33124: PPUSH
33125: PPUSH
33126: PPUSH
33127: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33128: LD_VAR 0 1
33132: PPUSH
33133: CALL_OW 302
33137: NOT
33138: PUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: LD_VAR 0 3
33148: PPUSH
33149: CALL_OW 488
33153: NOT
33154: OR
33155: PUSH
33156: LD_VAR 0 4
33160: NOT
33161: OR
33162: IFFALSE 33166
// exit ;
33164: GO 33679
// list := [ ] ;
33166: LD_ADDR_VAR 0 13
33170: PUSH
33171: EMPTY
33172: ST_TO_ADDR
// if x - r < 0 then
33173: LD_VAR 0 2
33177: PUSH
33178: LD_VAR 0 4
33182: MINUS
33183: PUSH
33184: LD_INT 0
33186: LESS
33187: IFFALSE 33199
// min_x := 0 else
33189: LD_ADDR_VAR 0 7
33193: PUSH
33194: LD_INT 0
33196: ST_TO_ADDR
33197: GO 33215
// min_x := x - r ;
33199: LD_ADDR_VAR 0 7
33203: PUSH
33204: LD_VAR 0 2
33208: PUSH
33209: LD_VAR 0 4
33213: MINUS
33214: ST_TO_ADDR
// if y - r < 0 then
33215: LD_VAR 0 3
33219: PUSH
33220: LD_VAR 0 4
33224: MINUS
33225: PUSH
33226: LD_INT 0
33228: LESS
33229: IFFALSE 33241
// min_y := 0 else
33231: LD_ADDR_VAR 0 8
33235: PUSH
33236: LD_INT 0
33238: ST_TO_ADDR
33239: GO 33257
// min_y := y - r ;
33241: LD_ADDR_VAR 0 8
33245: PUSH
33246: LD_VAR 0 3
33250: PUSH
33251: LD_VAR 0 4
33255: MINUS
33256: ST_TO_ADDR
// max_x := x + r ;
33257: LD_ADDR_VAR 0 9
33261: PUSH
33262: LD_VAR 0 2
33266: PUSH
33267: LD_VAR 0 4
33271: PLUS
33272: ST_TO_ADDR
// max_y := y + r ;
33273: LD_ADDR_VAR 0 10
33277: PUSH
33278: LD_VAR 0 3
33282: PUSH
33283: LD_VAR 0 4
33287: PLUS
33288: ST_TO_ADDR
// for _x = min_x to max_x do
33289: LD_ADDR_VAR 0 11
33293: PUSH
33294: DOUBLE
33295: LD_VAR 0 7
33299: DEC
33300: ST_TO_ADDR
33301: LD_VAR 0 9
33305: PUSH
33306: FOR_TO
33307: IFFALSE 33424
// for _y = min_y to max_y do
33309: LD_ADDR_VAR 0 12
33313: PUSH
33314: DOUBLE
33315: LD_VAR 0 8
33319: DEC
33320: ST_TO_ADDR
33321: LD_VAR 0 10
33325: PUSH
33326: FOR_TO
33327: IFFALSE 33420
// begin if not ValidHex ( _x , _y ) then
33329: LD_VAR 0 11
33333: PPUSH
33334: LD_VAR 0 12
33338: PPUSH
33339: CALL_OW 488
33343: NOT
33344: IFFALSE 33348
// continue ;
33346: GO 33326
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33348: LD_VAR 0 11
33352: PPUSH
33353: LD_VAR 0 12
33357: PPUSH
33358: CALL_OW 351
33362: PUSH
33363: LD_VAR 0 11
33367: PPUSH
33368: LD_VAR 0 12
33372: PPUSH
33373: CALL_OW 554
33377: AND
33378: IFFALSE 33418
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33380: LD_ADDR_VAR 0 13
33384: PUSH
33385: LD_VAR 0 13
33389: PPUSH
33390: LD_VAR 0 13
33394: PUSH
33395: LD_INT 1
33397: PLUS
33398: PPUSH
33399: LD_VAR 0 11
33403: PUSH
33404: LD_VAR 0 12
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PPUSH
33413: CALL_OW 2
33417: ST_TO_ADDR
// end ;
33418: GO 33326
33420: POP
33421: POP
33422: GO 33306
33424: POP
33425: POP
// if not list then
33426: LD_VAR 0 13
33430: NOT
33431: IFFALSE 33435
// exit ;
33433: GO 33679
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
33435: LD_ADDR_VAR 0 13
33439: PUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: LD_VAR 0 13
33449: PPUSH
33450: LD_INT 1
33452: PPUSH
33453: LD_INT 1
33455: PPUSH
33456: CALL 42392 0 4
33460: ST_TO_ADDR
// ComStop ( flame ) ;
33461: LD_VAR 0 1
33465: PPUSH
33466: CALL_OW 141
// for i in list do
33470: LD_ADDR_VAR 0 6
33474: PUSH
33475: LD_VAR 0 13
33479: PUSH
33480: FOR_IN
33481: IFFALSE 33512
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
33483: LD_VAR 0 1
33487: PPUSH
33488: LD_VAR 0 6
33492: PUSH
33493: LD_INT 1
33495: ARRAY
33496: PPUSH
33497: LD_VAR 0 6
33501: PUSH
33502: LD_INT 2
33504: ARRAY
33505: PPUSH
33506: CALL_OW 176
33510: GO 33480
33512: POP
33513: POP
// repeat wait ( 0 0$1 ) ;
33514: LD_INT 35
33516: PPUSH
33517: CALL_OW 67
// task := GetTaskList ( flame ) ;
33521: LD_ADDR_VAR 0 14
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 437
33535: ST_TO_ADDR
// if not task then
33536: LD_VAR 0 14
33540: NOT
33541: IFFALSE 33545
// exit ;
33543: GO 33679
// if task [ 1 ] [ 1 ] <> | then
33545: LD_VAR 0 14
33549: PUSH
33550: LD_INT 1
33552: ARRAY
33553: PUSH
33554: LD_INT 1
33556: ARRAY
33557: PUSH
33558: LD_STRING |
33560: NONEQUAL
33561: IFFALSE 33565
// exit ;
33563: GO 33679
// _x := task [ 1 ] [ 2 ] ;
33565: LD_ADDR_VAR 0 11
33569: PUSH
33570: LD_VAR 0 14
33574: PUSH
33575: LD_INT 1
33577: ARRAY
33578: PUSH
33579: LD_INT 2
33581: ARRAY
33582: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
33583: LD_ADDR_VAR 0 12
33587: PUSH
33588: LD_VAR 0 14
33592: PUSH
33593: LD_INT 1
33595: ARRAY
33596: PUSH
33597: LD_INT 3
33599: ARRAY
33600: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
33601: LD_VAR 0 11
33605: PPUSH
33606: LD_VAR 0 12
33610: PPUSH
33611: CALL_OW 351
33615: NOT
33616: PUSH
33617: LD_VAR 0 11
33621: PPUSH
33622: LD_VAR 0 12
33626: PPUSH
33627: CALL_OW 554
33631: NOT
33632: OR
33633: IFFALSE 33667
// begin task := Delete ( task , 1 ) ;
33635: LD_ADDR_VAR 0 14
33639: PUSH
33640: LD_VAR 0 14
33644: PPUSH
33645: LD_INT 1
33647: PPUSH
33648: CALL_OW 3
33652: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
33653: LD_VAR 0 1
33657: PPUSH
33658: LD_VAR 0 14
33662: PPUSH
33663: CALL_OW 446
// end ; until not HasTask ( flame ) ;
33667: LD_VAR 0 1
33671: PPUSH
33672: CALL_OW 314
33676: NOT
33677: IFFALSE 33514
// end ;
33679: LD_VAR 0 5
33683: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33684: LD_EXP 102
33688: NOT
33689: IFFALSE 33739
33691: GO 33693
33693: DISABLE
// begin initHack := true ;
33694: LD_ADDR_EXP 102
33698: PUSH
33699: LD_INT 1
33701: ST_TO_ADDR
// hackTanks := [ ] ;
33702: LD_ADDR_EXP 103
33706: PUSH
33707: EMPTY
33708: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33709: LD_ADDR_EXP 104
33713: PUSH
33714: EMPTY
33715: ST_TO_ADDR
// hackLimit := 3 ;
33716: LD_ADDR_EXP 105
33720: PUSH
33721: LD_INT 3
33723: ST_TO_ADDR
// hackDist := 12 ;
33724: LD_ADDR_EXP 106
33728: PUSH
33729: LD_INT 12
33731: ST_TO_ADDR
// hackCounter := [ ] ;
33732: LD_ADDR_EXP 107
33736: PUSH
33737: EMPTY
33738: ST_TO_ADDR
// end ;
33739: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33740: LD_EXP 102
33744: PUSH
33745: LD_INT 34
33747: PUSH
33748: LD_INT 99
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PPUSH
33755: CALL_OW 69
33759: AND
33760: IFFALSE 34013
33762: GO 33764
33764: DISABLE
33765: LD_INT 0
33767: PPUSH
33768: PPUSH
// begin enable ;
33769: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33770: LD_ADDR_VAR 0 1
33774: PUSH
33775: LD_INT 34
33777: PUSH
33778: LD_INT 99
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PPUSH
33785: CALL_OW 69
33789: PUSH
33790: FOR_IN
33791: IFFALSE 34011
// begin if not i in hackTanks then
33793: LD_VAR 0 1
33797: PUSH
33798: LD_EXP 103
33802: IN
33803: NOT
33804: IFFALSE 33887
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33806: LD_ADDR_EXP 103
33810: PUSH
33811: LD_EXP 103
33815: PPUSH
33816: LD_EXP 103
33820: PUSH
33821: LD_INT 1
33823: PLUS
33824: PPUSH
33825: LD_VAR 0 1
33829: PPUSH
33830: CALL_OW 1
33834: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33835: LD_ADDR_EXP 104
33839: PUSH
33840: LD_EXP 104
33844: PPUSH
33845: LD_EXP 104
33849: PUSH
33850: LD_INT 1
33852: PLUS
33853: PPUSH
33854: EMPTY
33855: PPUSH
33856: CALL_OW 1
33860: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33861: LD_ADDR_EXP 107
33865: PUSH
33866: LD_EXP 107
33870: PPUSH
33871: LD_EXP 107
33875: PUSH
33876: LD_INT 1
33878: PLUS
33879: PPUSH
33880: EMPTY
33881: PPUSH
33882: CALL_OW 1
33886: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 302
33896: NOT
33897: IFFALSE 33910
// begin HackUnlinkAll ( i ) ;
33899: LD_VAR 0 1
33903: PPUSH
33904: CALL 34016 0 1
// continue ;
33908: GO 33790
// end ; HackCheckCapturedStatus ( i ) ;
33910: LD_VAR 0 1
33914: PPUSH
33915: CALL 34459 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33919: LD_ADDR_VAR 0 2
33923: PUSH
33924: LD_INT 81
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 255
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 33
33943: PUSH
33944: LD_INT 3
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 91
33953: PUSH
33954: LD_VAR 0 1
33958: PUSH
33959: LD_EXP 106
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 50
33971: PUSH
33972: EMPTY
33973: LIST
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: PPUSH
33981: CALL_OW 69
33985: ST_TO_ADDR
// if not tmp then
33986: LD_VAR 0 2
33990: NOT
33991: IFFALSE 33995
// continue ;
33993: GO 33790
// HackLink ( i , tmp ) ;
33995: LD_VAR 0 1
33999: PPUSH
34000: LD_VAR 0 2
34004: PPUSH
34005: CALL 34152 0 2
// end ;
34009: GO 33790
34011: POP
34012: POP
// end ;
34013: PPOPN 2
34015: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34016: LD_INT 0
34018: PPUSH
34019: PPUSH
34020: PPUSH
// if not hack in hackTanks then
34021: LD_VAR 0 1
34025: PUSH
34026: LD_EXP 103
34030: IN
34031: NOT
34032: IFFALSE 34036
// exit ;
34034: GO 34147
// index := GetElementIndex ( hackTanks , hack ) ;
34036: LD_ADDR_VAR 0 4
34040: PUSH
34041: LD_EXP 103
34045: PPUSH
34046: LD_VAR 0 1
34050: PPUSH
34051: CALL 41689 0 2
34055: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34056: LD_EXP 104
34060: PUSH
34061: LD_VAR 0 4
34065: ARRAY
34066: IFFALSE 34147
// begin for i in hackTanksCaptured [ index ] do
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: LD_EXP 104
34077: PUSH
34078: LD_VAR 0 4
34082: ARRAY
34083: PUSH
34084: FOR_IN
34085: IFFALSE 34111
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34087: LD_VAR 0 3
34091: PUSH
34092: LD_INT 1
34094: ARRAY
34095: PPUSH
34096: LD_VAR 0 3
34100: PUSH
34101: LD_INT 2
34103: ARRAY
34104: PPUSH
34105: CALL_OW 235
34109: GO 34084
34111: POP
34112: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34113: LD_ADDR_EXP 104
34117: PUSH
34118: LD_EXP 104
34122: PPUSH
34123: LD_VAR 0 4
34127: PPUSH
34128: EMPTY
34129: PPUSH
34130: CALL_OW 1
34134: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34135: LD_VAR 0 1
34139: PPUSH
34140: LD_INT 0
34142: PPUSH
34143: CALL_OW 505
// end ; end ;
34147: LD_VAR 0 2
34151: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34152: LD_INT 0
34154: PPUSH
34155: PPUSH
34156: PPUSH
// if not hack in hackTanks or not vehicles then
34157: LD_VAR 0 1
34161: PUSH
34162: LD_EXP 103
34166: IN
34167: NOT
34168: PUSH
34169: LD_VAR 0 2
34173: NOT
34174: OR
34175: IFFALSE 34179
// exit ;
34177: GO 34454
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34179: LD_ADDR_VAR 0 2
34183: PUSH
34184: LD_VAR 0 1
34188: PPUSH
34189: LD_VAR 0 2
34193: PPUSH
34194: LD_INT 1
34196: PPUSH
34197: LD_INT 1
34199: PPUSH
34200: CALL 42339 0 4
34204: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34205: LD_ADDR_VAR 0 5
34209: PUSH
34210: LD_EXP 103
34214: PPUSH
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL 41689 0 2
34224: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34225: LD_EXP 104
34229: PUSH
34230: LD_VAR 0 5
34234: ARRAY
34235: PUSH
34236: LD_EXP 105
34240: LESS
34241: IFFALSE 34430
// begin for i := 1 to vehicles do
34243: LD_ADDR_VAR 0 4
34247: PUSH
34248: DOUBLE
34249: LD_INT 1
34251: DEC
34252: ST_TO_ADDR
34253: LD_VAR 0 2
34257: PUSH
34258: FOR_TO
34259: IFFALSE 34428
// begin if hackTanksCaptured [ index ] = hackLimit then
34261: LD_EXP 104
34265: PUSH
34266: LD_VAR 0 5
34270: ARRAY
34271: PUSH
34272: LD_EXP 105
34276: EQUAL
34277: IFFALSE 34281
// break ;
34279: GO 34428
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34281: LD_ADDR_EXP 107
34285: PUSH
34286: LD_EXP 107
34290: PPUSH
34291: LD_VAR 0 5
34295: PPUSH
34296: LD_EXP 107
34300: PUSH
34301: LD_VAR 0 5
34305: ARRAY
34306: PUSH
34307: LD_INT 1
34309: PLUS
34310: PPUSH
34311: CALL_OW 1
34315: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34316: LD_ADDR_EXP 104
34320: PUSH
34321: LD_EXP 104
34325: PPUSH
34326: LD_VAR 0 5
34330: PUSH
34331: LD_EXP 104
34335: PUSH
34336: LD_VAR 0 5
34340: ARRAY
34341: PUSH
34342: LD_INT 1
34344: PLUS
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PPUSH
34350: LD_VAR 0 2
34354: PUSH
34355: LD_VAR 0 4
34359: ARRAY
34360: PUSH
34361: LD_VAR 0 2
34365: PUSH
34366: LD_VAR 0 4
34370: ARRAY
34371: PPUSH
34372: CALL_OW 255
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PPUSH
34381: CALL 41904 0 3
34385: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34386: LD_VAR 0 2
34390: PUSH
34391: LD_VAR 0 4
34395: ARRAY
34396: PPUSH
34397: LD_VAR 0 1
34401: PPUSH
34402: CALL_OW 255
34406: PPUSH
34407: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34411: LD_VAR 0 2
34415: PUSH
34416: LD_VAR 0 4
34420: ARRAY
34421: PPUSH
34422: CALL_OW 141
// end ;
34426: GO 34258
34428: POP
34429: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34430: LD_VAR 0 1
34434: PPUSH
34435: LD_EXP 104
34439: PUSH
34440: LD_VAR 0 5
34444: ARRAY
34445: PUSH
34446: LD_INT 0
34448: PLUS
34449: PPUSH
34450: CALL_OW 505
// end ;
34454: LD_VAR 0 3
34458: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34459: LD_INT 0
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
// if not hack in hackTanks then
34465: LD_VAR 0 1
34469: PUSH
34470: LD_EXP 103
34474: IN
34475: NOT
34476: IFFALSE 34480
// exit ;
34478: GO 34720
// index := GetElementIndex ( hackTanks , hack ) ;
34480: LD_ADDR_VAR 0 4
34484: PUSH
34485: LD_EXP 103
34489: PPUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL 41689 0 2
34499: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34500: LD_ADDR_VAR 0 3
34504: PUSH
34505: DOUBLE
34506: LD_EXP 104
34510: PUSH
34511: LD_VAR 0 4
34515: ARRAY
34516: INC
34517: ST_TO_ADDR
34518: LD_INT 1
34520: PUSH
34521: FOR_DOWNTO
34522: IFFALSE 34694
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34524: LD_ADDR_VAR 0 5
34528: PUSH
34529: LD_EXP 104
34533: PUSH
34534: LD_VAR 0 4
34538: ARRAY
34539: PUSH
34540: LD_VAR 0 3
34544: ARRAY
34545: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34546: LD_VAR 0 5
34550: PUSH
34551: LD_INT 1
34553: ARRAY
34554: PPUSH
34555: CALL_OW 302
34559: NOT
34560: PUSH
34561: LD_VAR 0 5
34565: PUSH
34566: LD_INT 1
34568: ARRAY
34569: PPUSH
34570: CALL_OW 255
34574: PUSH
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 255
34584: NONEQUAL
34585: OR
34586: IFFALSE 34692
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34588: LD_VAR 0 5
34592: PUSH
34593: LD_INT 1
34595: ARRAY
34596: PPUSH
34597: CALL_OW 305
34601: PUSH
34602: LD_VAR 0 5
34606: PUSH
34607: LD_INT 1
34609: ARRAY
34610: PPUSH
34611: CALL_OW 255
34615: PUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: CALL_OW 255
34625: EQUAL
34626: AND
34627: IFFALSE 34651
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34629: LD_VAR 0 5
34633: PUSH
34634: LD_INT 1
34636: ARRAY
34637: PPUSH
34638: LD_VAR 0 5
34642: PUSH
34643: LD_INT 2
34645: ARRAY
34646: PPUSH
34647: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34651: LD_ADDR_EXP 104
34655: PUSH
34656: LD_EXP 104
34660: PPUSH
34661: LD_VAR 0 4
34665: PPUSH
34666: LD_EXP 104
34670: PUSH
34671: LD_VAR 0 4
34675: ARRAY
34676: PPUSH
34677: LD_VAR 0 3
34681: PPUSH
34682: CALL_OW 3
34686: PPUSH
34687: CALL_OW 1
34691: ST_TO_ADDR
// end ; end ;
34692: GO 34521
34694: POP
34695: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34696: LD_VAR 0 1
34700: PPUSH
34701: LD_EXP 104
34705: PUSH
34706: LD_VAR 0 4
34710: ARRAY
34711: PUSH
34712: LD_INT 0
34714: PLUS
34715: PPUSH
34716: CALL_OW 505
// end ;
34720: LD_VAR 0 2
34724: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34725: LD_INT 0
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
// if not hack in hackTanks then
34731: LD_VAR 0 1
34735: PUSH
34736: LD_EXP 103
34740: IN
34741: NOT
34742: IFFALSE 34746
// exit ;
34744: GO 34831
// index := GetElementIndex ( hackTanks , hack ) ;
34746: LD_ADDR_VAR 0 5
34750: PUSH
34751: LD_EXP 103
34755: PPUSH
34756: LD_VAR 0 1
34760: PPUSH
34761: CALL 41689 0 2
34765: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34766: LD_ADDR_VAR 0 4
34770: PUSH
34771: DOUBLE
34772: LD_INT 1
34774: DEC
34775: ST_TO_ADDR
34776: LD_EXP 104
34780: PUSH
34781: LD_VAR 0 5
34785: ARRAY
34786: PUSH
34787: FOR_TO
34788: IFFALSE 34829
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34790: LD_EXP 104
34794: PUSH
34795: LD_VAR 0 5
34799: ARRAY
34800: PUSH
34801: LD_VAR 0 4
34805: ARRAY
34806: PUSH
34807: LD_INT 1
34809: ARRAY
34810: PUSH
34811: LD_VAR 0 2
34815: EQUAL
34816: IFFALSE 34827
// KillUnit ( vehicle ) ;
34818: LD_VAR 0 2
34822: PPUSH
34823: CALL_OW 66
34827: GO 34787
34829: POP
34830: POP
// end ;
34831: LD_VAR 0 3
34835: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34836: LD_EXP 108
34840: NOT
34841: IFFALSE 34876
34843: GO 34845
34845: DISABLE
// begin initMiner := true ;
34846: LD_ADDR_EXP 108
34850: PUSH
34851: LD_INT 1
34853: ST_TO_ADDR
// minersList := [ ] ;
34854: LD_ADDR_EXP 109
34858: PUSH
34859: EMPTY
34860: ST_TO_ADDR
// minerMinesList := [ ] ;
34861: LD_ADDR_EXP 110
34865: PUSH
34866: EMPTY
34867: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34868: LD_ADDR_EXP 111
34872: PUSH
34873: LD_INT 5
34875: ST_TO_ADDR
// end ;
34876: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34877: LD_EXP 108
34881: PUSH
34882: LD_INT 34
34884: PUSH
34885: LD_INT 81
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PPUSH
34892: CALL_OW 69
34896: AND
34897: IFFALSE 35358
34899: GO 34901
34901: DISABLE
34902: LD_INT 0
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
// begin enable ;
34908: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34909: LD_ADDR_VAR 0 1
34913: PUSH
34914: LD_INT 34
34916: PUSH
34917: LD_INT 81
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PPUSH
34924: CALL_OW 69
34928: PUSH
34929: FOR_IN
34930: IFFALSE 35002
// begin if not i in minersList then
34932: LD_VAR 0 1
34936: PUSH
34937: LD_EXP 109
34941: IN
34942: NOT
34943: IFFALSE 35000
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34945: LD_ADDR_EXP 109
34949: PUSH
34950: LD_EXP 109
34954: PPUSH
34955: LD_EXP 109
34959: PUSH
34960: LD_INT 1
34962: PLUS
34963: PPUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 1
34973: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34974: LD_ADDR_EXP 110
34978: PUSH
34979: LD_EXP 110
34983: PPUSH
34984: LD_EXP 110
34988: PUSH
34989: LD_INT 1
34991: PLUS
34992: PPUSH
34993: EMPTY
34994: PPUSH
34995: CALL_OW 1
34999: ST_TO_ADDR
// end end ;
35000: GO 34929
35002: POP
35003: POP
// for i := minerMinesList downto 1 do
35004: LD_ADDR_VAR 0 1
35008: PUSH
35009: DOUBLE
35010: LD_EXP 110
35014: INC
35015: ST_TO_ADDR
35016: LD_INT 1
35018: PUSH
35019: FOR_DOWNTO
35020: IFFALSE 35356
// begin if IsLive ( minersList [ i ] ) then
35022: LD_EXP 109
35026: PUSH
35027: LD_VAR 0 1
35031: ARRAY
35032: PPUSH
35033: CALL_OW 300
35037: IFFALSE 35065
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35039: LD_EXP 109
35043: PUSH
35044: LD_VAR 0 1
35048: ARRAY
35049: PPUSH
35050: LD_EXP 110
35054: PUSH
35055: LD_VAR 0 1
35059: ARRAY
35060: PPUSH
35061: CALL_OW 505
// if not minerMinesList [ i ] then
35065: LD_EXP 110
35069: PUSH
35070: LD_VAR 0 1
35074: ARRAY
35075: NOT
35076: IFFALSE 35080
// continue ;
35078: GO 35019
// for j := minerMinesList [ i ] downto 1 do
35080: LD_ADDR_VAR 0 2
35084: PUSH
35085: DOUBLE
35086: LD_EXP 110
35090: PUSH
35091: LD_VAR 0 1
35095: ARRAY
35096: INC
35097: ST_TO_ADDR
35098: LD_INT 1
35100: PUSH
35101: FOR_DOWNTO
35102: IFFALSE 35352
// begin side := GetSide ( minersList [ i ] ) ;
35104: LD_ADDR_VAR 0 3
35108: PUSH
35109: LD_EXP 109
35113: PUSH
35114: LD_VAR 0 1
35118: ARRAY
35119: PPUSH
35120: CALL_OW 255
35124: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35125: LD_ADDR_VAR 0 4
35129: PUSH
35130: LD_EXP 110
35134: PUSH
35135: LD_VAR 0 1
35139: ARRAY
35140: PUSH
35141: LD_VAR 0 2
35145: ARRAY
35146: PUSH
35147: LD_INT 1
35149: ARRAY
35150: PPUSH
35151: LD_EXP 110
35155: PUSH
35156: LD_VAR 0 1
35160: ARRAY
35161: PUSH
35162: LD_VAR 0 2
35166: ARRAY
35167: PUSH
35168: LD_INT 2
35170: ARRAY
35171: PPUSH
35172: CALL_OW 428
35176: ST_TO_ADDR
// if not tmp then
35177: LD_VAR 0 4
35181: NOT
35182: IFFALSE 35186
// continue ;
35184: GO 35101
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35186: LD_VAR 0 4
35190: PUSH
35191: LD_INT 81
35193: PUSH
35194: LD_VAR 0 3
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PPUSH
35203: CALL_OW 69
35207: IN
35208: PUSH
35209: LD_EXP 110
35213: PUSH
35214: LD_VAR 0 1
35218: ARRAY
35219: PUSH
35220: LD_VAR 0 2
35224: ARRAY
35225: PUSH
35226: LD_INT 1
35228: ARRAY
35229: PPUSH
35230: LD_EXP 110
35234: PUSH
35235: LD_VAR 0 1
35239: ARRAY
35240: PUSH
35241: LD_VAR 0 2
35245: ARRAY
35246: PUSH
35247: LD_INT 2
35249: ARRAY
35250: PPUSH
35251: CALL_OW 458
35255: AND
35256: IFFALSE 35350
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35258: LD_EXP 110
35262: PUSH
35263: LD_VAR 0 1
35267: ARRAY
35268: PUSH
35269: LD_VAR 0 2
35273: ARRAY
35274: PUSH
35275: LD_INT 1
35277: ARRAY
35278: PPUSH
35279: LD_EXP 110
35283: PUSH
35284: LD_VAR 0 1
35288: ARRAY
35289: PUSH
35290: LD_VAR 0 2
35294: ARRAY
35295: PUSH
35296: LD_INT 2
35298: ARRAY
35299: PPUSH
35300: LD_VAR 0 3
35304: PPUSH
35305: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35309: LD_ADDR_EXP 110
35313: PUSH
35314: LD_EXP 110
35318: PPUSH
35319: LD_VAR 0 1
35323: PPUSH
35324: LD_EXP 110
35328: PUSH
35329: LD_VAR 0 1
35333: ARRAY
35334: PPUSH
35335: LD_VAR 0 2
35339: PPUSH
35340: CALL_OW 3
35344: PPUSH
35345: CALL_OW 1
35349: ST_TO_ADDR
// end ; end ;
35350: GO 35101
35352: POP
35353: POP
// end ;
35354: GO 35019
35356: POP
35357: POP
// end ;
35358: PPOPN 4
35360: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35361: LD_INT 0
35363: PPUSH
35364: PPUSH
// result := false ;
35365: LD_ADDR_VAR 0 4
35369: PUSH
35370: LD_INT 0
35372: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 264
35382: PUSH
35383: LD_INT 81
35385: EQUAL
35386: NOT
35387: IFFALSE 35391
// exit ;
35389: GO 35631
// index := GetElementIndex ( minersList , unit ) ;
35391: LD_ADDR_VAR 0 5
35395: PUSH
35396: LD_EXP 109
35400: PPUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: CALL 41689 0 2
35410: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35411: LD_EXP 110
35415: PUSH
35416: LD_VAR 0 5
35420: ARRAY
35421: PUSH
35422: LD_EXP 111
35426: GREATEREQUAL
35427: IFFALSE 35431
// exit ;
35429: GO 35631
// ComMoveXY ( unit , x , y ) ;
35431: LD_VAR 0 1
35435: PPUSH
35436: LD_VAR 0 2
35440: PPUSH
35441: LD_VAR 0 3
35445: PPUSH
35446: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35450: LD_INT 35
35452: PPUSH
35453: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35457: LD_VAR 0 1
35461: PPUSH
35462: LD_VAR 0 2
35466: PPUSH
35467: LD_VAR 0 3
35471: PPUSH
35472: CALL 73450 0 3
35476: NOT
35477: PUSH
35478: LD_VAR 0 1
35482: PPUSH
35483: CALL_OW 314
35487: AND
35488: IFFALSE 35492
// exit ;
35490: GO 35631
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35492: LD_VAR 0 2
35496: PPUSH
35497: LD_VAR 0 3
35501: PPUSH
35502: CALL_OW 428
35506: PUSH
35507: LD_VAR 0 1
35511: EQUAL
35512: PUSH
35513: LD_VAR 0 1
35517: PPUSH
35518: CALL_OW 314
35522: NOT
35523: AND
35524: IFFALSE 35450
// PlaySoundXY ( x , y , PlantMine ) ;
35526: LD_VAR 0 2
35530: PPUSH
35531: LD_VAR 0 3
35535: PPUSH
35536: LD_STRING PlantMine
35538: PPUSH
35539: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35543: LD_VAR 0 2
35547: PPUSH
35548: LD_VAR 0 3
35552: PPUSH
35553: LD_VAR 0 1
35557: PPUSH
35558: CALL_OW 255
35562: PPUSH
35563: LD_INT 0
35565: PPUSH
35566: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35570: LD_ADDR_EXP 110
35574: PUSH
35575: LD_EXP 110
35579: PPUSH
35580: LD_VAR 0 5
35584: PUSH
35585: LD_EXP 110
35589: PUSH
35590: LD_VAR 0 5
35594: ARRAY
35595: PUSH
35596: LD_INT 1
35598: PLUS
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PPUSH
35604: LD_VAR 0 2
35608: PUSH
35609: LD_VAR 0 3
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PPUSH
35618: CALL 41904 0 3
35622: ST_TO_ADDR
// result := true ;
35623: LD_ADDR_VAR 0 4
35627: PUSH
35628: LD_INT 1
35630: ST_TO_ADDR
// end ;
35631: LD_VAR 0 4
35635: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35636: LD_INT 0
35638: PPUSH
35639: PPUSH
35640: PPUSH
// if not unit in minersList then
35641: LD_VAR 0 1
35645: PUSH
35646: LD_EXP 109
35650: IN
35651: NOT
35652: IFFALSE 35656
// exit ;
35654: GO 36048
// index := GetElementIndex ( minersList , unit ) ;
35656: LD_ADDR_VAR 0 6
35660: PUSH
35661: LD_EXP 109
35665: PPUSH
35666: LD_VAR 0 1
35670: PPUSH
35671: CALL 41689 0 2
35675: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35676: LD_ADDR_VAR 0 5
35680: PUSH
35681: DOUBLE
35682: LD_EXP 110
35686: PUSH
35687: LD_VAR 0 6
35691: ARRAY
35692: INC
35693: ST_TO_ADDR
35694: LD_INT 1
35696: PUSH
35697: FOR_DOWNTO
35698: IFFALSE 35859
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35700: LD_EXP 110
35704: PUSH
35705: LD_VAR 0 6
35709: ARRAY
35710: PUSH
35711: LD_VAR 0 5
35715: ARRAY
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: PUSH
35721: LD_VAR 0 2
35725: EQUAL
35726: PUSH
35727: LD_EXP 110
35731: PUSH
35732: LD_VAR 0 6
35736: ARRAY
35737: PUSH
35738: LD_VAR 0 5
35742: ARRAY
35743: PUSH
35744: LD_INT 2
35746: ARRAY
35747: PUSH
35748: LD_VAR 0 3
35752: EQUAL
35753: AND
35754: IFFALSE 35857
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35756: LD_EXP 110
35760: PUSH
35761: LD_VAR 0 6
35765: ARRAY
35766: PUSH
35767: LD_VAR 0 5
35771: ARRAY
35772: PUSH
35773: LD_INT 1
35775: ARRAY
35776: PPUSH
35777: LD_EXP 110
35781: PUSH
35782: LD_VAR 0 6
35786: ARRAY
35787: PUSH
35788: LD_VAR 0 5
35792: ARRAY
35793: PUSH
35794: LD_INT 2
35796: ARRAY
35797: PPUSH
35798: LD_VAR 0 1
35802: PPUSH
35803: CALL_OW 255
35807: PPUSH
35808: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35812: LD_ADDR_EXP 110
35816: PUSH
35817: LD_EXP 110
35821: PPUSH
35822: LD_VAR 0 6
35826: PPUSH
35827: LD_EXP 110
35831: PUSH
35832: LD_VAR 0 6
35836: ARRAY
35837: PPUSH
35838: LD_VAR 0 5
35842: PPUSH
35843: CALL_OW 3
35847: PPUSH
35848: CALL_OW 1
35852: ST_TO_ADDR
// exit ;
35853: POP
35854: POP
35855: GO 36048
// end ; end ;
35857: GO 35697
35859: POP
35860: POP
// for i := minerMinesList [ index ] downto 1 do
35861: LD_ADDR_VAR 0 5
35865: PUSH
35866: DOUBLE
35867: LD_EXP 110
35871: PUSH
35872: LD_VAR 0 6
35876: ARRAY
35877: INC
35878: ST_TO_ADDR
35879: LD_INT 1
35881: PUSH
35882: FOR_DOWNTO
35883: IFFALSE 36046
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35885: LD_EXP 110
35889: PUSH
35890: LD_VAR 0 6
35894: ARRAY
35895: PUSH
35896: LD_VAR 0 5
35900: ARRAY
35901: PUSH
35902: LD_INT 1
35904: ARRAY
35905: PPUSH
35906: LD_EXP 110
35910: PUSH
35911: LD_VAR 0 6
35915: ARRAY
35916: PUSH
35917: LD_VAR 0 5
35921: ARRAY
35922: PUSH
35923: LD_INT 2
35925: ARRAY
35926: PPUSH
35927: LD_VAR 0 2
35931: PPUSH
35932: LD_VAR 0 3
35936: PPUSH
35937: CALL_OW 298
35941: PUSH
35942: LD_INT 6
35944: LESS
35945: IFFALSE 36044
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35947: LD_EXP 110
35951: PUSH
35952: LD_VAR 0 6
35956: ARRAY
35957: PUSH
35958: LD_VAR 0 5
35962: ARRAY
35963: PUSH
35964: LD_INT 1
35966: ARRAY
35967: PPUSH
35968: LD_EXP 110
35972: PUSH
35973: LD_VAR 0 6
35977: ARRAY
35978: PUSH
35979: LD_VAR 0 5
35983: ARRAY
35984: PUSH
35985: LD_INT 2
35987: ARRAY
35988: PPUSH
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 255
35998: PPUSH
35999: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36003: LD_ADDR_EXP 110
36007: PUSH
36008: LD_EXP 110
36012: PPUSH
36013: LD_VAR 0 6
36017: PPUSH
36018: LD_EXP 110
36022: PUSH
36023: LD_VAR 0 6
36027: ARRAY
36028: PPUSH
36029: LD_VAR 0 5
36033: PPUSH
36034: CALL_OW 3
36038: PPUSH
36039: CALL_OW 1
36043: ST_TO_ADDR
// end ; end ;
36044: GO 35882
36046: POP
36047: POP
// end ;
36048: LD_VAR 0 4
36052: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36053: LD_INT 0
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL_OW 264
36073: PUSH
36074: LD_INT 81
36076: EQUAL
36077: NOT
36078: PUSH
36079: LD_VAR 0 1
36083: PUSH
36084: LD_EXP 109
36088: IN
36089: NOT
36090: OR
36091: IFFALSE 36095
// exit ;
36093: GO 36417
// index := GetElementIndex ( minersList , unit ) ;
36095: LD_ADDR_VAR 0 6
36099: PUSH
36100: LD_EXP 109
36104: PPUSH
36105: LD_VAR 0 1
36109: PPUSH
36110: CALL 41689 0 2
36114: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36115: LD_ADDR_VAR 0 8
36119: PUSH
36120: LD_EXP 111
36124: PUSH
36125: LD_EXP 110
36129: PUSH
36130: LD_VAR 0 6
36134: ARRAY
36135: MINUS
36136: ST_TO_ADDR
// if not minesFreeAmount then
36137: LD_VAR 0 8
36141: NOT
36142: IFFALSE 36146
// exit ;
36144: GO 36417
// tmp := [ ] ;
36146: LD_ADDR_VAR 0 7
36150: PUSH
36151: EMPTY
36152: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36153: LD_ADDR_VAR 0 5
36157: PUSH
36158: DOUBLE
36159: LD_INT 1
36161: DEC
36162: ST_TO_ADDR
36163: LD_VAR 0 8
36167: PUSH
36168: FOR_TO
36169: IFFALSE 36364
// begin _d := rand ( 0 , 5 ) ;
36171: LD_ADDR_VAR 0 11
36175: PUSH
36176: LD_INT 0
36178: PPUSH
36179: LD_INT 5
36181: PPUSH
36182: CALL_OW 12
36186: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36187: LD_ADDR_VAR 0 12
36191: PUSH
36192: LD_INT 2
36194: PPUSH
36195: LD_INT 6
36197: PPUSH
36198: CALL_OW 12
36202: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36203: LD_ADDR_VAR 0 9
36207: PUSH
36208: LD_VAR 0 2
36212: PPUSH
36213: LD_VAR 0 11
36217: PPUSH
36218: LD_VAR 0 12
36222: PPUSH
36223: CALL_OW 272
36227: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36228: LD_ADDR_VAR 0 10
36232: PUSH
36233: LD_VAR 0 3
36237: PPUSH
36238: LD_VAR 0 11
36242: PPUSH
36243: LD_VAR 0 12
36247: PPUSH
36248: CALL_OW 273
36252: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36253: LD_VAR 0 9
36257: PPUSH
36258: LD_VAR 0 10
36262: PPUSH
36263: CALL_OW 488
36267: PUSH
36268: LD_VAR 0 9
36272: PUSH
36273: LD_VAR 0 10
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_VAR 0 7
36286: IN
36287: NOT
36288: AND
36289: PUSH
36290: LD_VAR 0 9
36294: PPUSH
36295: LD_VAR 0 10
36299: PPUSH
36300: CALL_OW 458
36304: NOT
36305: AND
36306: IFFALSE 36348
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36308: LD_ADDR_VAR 0 7
36312: PUSH
36313: LD_VAR 0 7
36317: PPUSH
36318: LD_VAR 0 7
36322: PUSH
36323: LD_INT 1
36325: PLUS
36326: PPUSH
36327: LD_VAR 0 9
36331: PUSH
36332: LD_VAR 0 10
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PPUSH
36341: CALL_OW 1
36345: ST_TO_ADDR
36346: GO 36362
// i := i - 1 ;
36348: LD_ADDR_VAR 0 5
36352: PUSH
36353: LD_VAR 0 5
36357: PUSH
36358: LD_INT 1
36360: MINUS
36361: ST_TO_ADDR
// end ;
36362: GO 36168
36364: POP
36365: POP
// for i in tmp do
36366: LD_ADDR_VAR 0 5
36370: PUSH
36371: LD_VAR 0 7
36375: PUSH
36376: FOR_IN
36377: IFFALSE 36415
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36379: LD_VAR 0 1
36383: PPUSH
36384: LD_VAR 0 5
36388: PUSH
36389: LD_INT 1
36391: ARRAY
36392: PPUSH
36393: LD_VAR 0 5
36397: PUSH
36398: LD_INT 2
36400: ARRAY
36401: PPUSH
36402: CALL 35361 0 3
36406: NOT
36407: IFFALSE 36413
// exit ;
36409: POP
36410: POP
36411: GO 36417
36413: GO 36376
36415: POP
36416: POP
// end ;
36417: LD_VAR 0 4
36421: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
36422: LD_INT 0
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
// if GetClass ( unit ) <> class_sniper then
36433: LD_VAR 0 1
36437: PPUSH
36438: CALL_OW 257
36442: PUSH
36443: LD_INT 5
36445: NONEQUAL
36446: IFFALSE 36450
// exit ;
36448: GO 36916
// dist := 8 ;
36450: LD_ADDR_VAR 0 5
36454: PUSH
36455: LD_INT 8
36457: ST_TO_ADDR
// viewRange := 12 ;
36458: LD_ADDR_VAR 0 8
36462: PUSH
36463: LD_INT 12
36465: ST_TO_ADDR
// side := GetSide ( unit ) ;
36466: LD_ADDR_VAR 0 6
36470: PUSH
36471: LD_VAR 0 1
36475: PPUSH
36476: CALL_OW 255
36480: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36481: LD_INT 61
36483: PPUSH
36484: LD_VAR 0 6
36488: PPUSH
36489: CALL_OW 321
36493: PUSH
36494: LD_INT 2
36496: EQUAL
36497: IFFALSE 36507
// viewRange := 16 ;
36499: LD_ADDR_VAR 0 8
36503: PUSH
36504: LD_INT 16
36506: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36507: LD_VAR 0 1
36511: PPUSH
36512: LD_VAR 0 2
36516: PPUSH
36517: LD_VAR 0 3
36521: PPUSH
36522: CALL_OW 297
36526: PUSH
36527: LD_VAR 0 5
36531: GREATER
36532: IFFALSE 36611
// begin ComMoveXY ( unit , x , y ) ;
36534: LD_VAR 0 1
36538: PPUSH
36539: LD_VAR 0 2
36543: PPUSH
36544: LD_VAR 0 3
36548: PPUSH
36549: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36553: LD_INT 35
36555: PPUSH
36556: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36560: LD_VAR 0 1
36564: PPUSH
36565: LD_VAR 0 2
36569: PPUSH
36570: LD_VAR 0 3
36574: PPUSH
36575: CALL 73450 0 3
36579: NOT
36580: IFFALSE 36584
// exit ;
36582: GO 36916
// until GetDistUnitXY ( unit , x , y ) < dist ;
36584: LD_VAR 0 1
36588: PPUSH
36589: LD_VAR 0 2
36593: PPUSH
36594: LD_VAR 0 3
36598: PPUSH
36599: CALL_OW 297
36603: PUSH
36604: LD_VAR 0 5
36608: LESS
36609: IFFALSE 36553
// end ; ComTurnXY ( unit , x , y ) ;
36611: LD_VAR 0 1
36615: PPUSH
36616: LD_VAR 0 2
36620: PPUSH
36621: LD_VAR 0 3
36625: PPUSH
36626: CALL_OW 118
// repeat if Multiplayer then
36630: LD_OWVAR 4
36634: IFFALSE 36645
// wait ( 35 ) else
36636: LD_INT 35
36638: PPUSH
36639: CALL_OW 67
36643: GO 36652
// wait ( 5 ) ;
36645: LD_INT 5
36647: PPUSH
36648: CALL_OW 67
// _d := GetDir ( unit ) ;
36652: LD_ADDR_VAR 0 11
36656: PUSH
36657: LD_VAR 0 1
36661: PPUSH
36662: CALL_OW 254
36666: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
36667: LD_ADDR_VAR 0 7
36671: PUSH
36672: LD_VAR 0 1
36676: PPUSH
36677: CALL_OW 250
36681: PPUSH
36682: LD_VAR 0 1
36686: PPUSH
36687: CALL_OW 251
36691: PPUSH
36692: LD_VAR 0 2
36696: PPUSH
36697: LD_VAR 0 3
36701: PPUSH
36702: CALL 76058 0 4
36706: ST_TO_ADDR
// until dir = _d ;
36707: LD_VAR 0 7
36711: PUSH
36712: LD_VAR 0 11
36716: EQUAL
36717: IFFALSE 36630
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
36719: LD_ADDR_VAR 0 9
36723: PUSH
36724: LD_VAR 0 1
36728: PPUSH
36729: CALL_OW 250
36733: PPUSH
36734: LD_VAR 0 7
36738: PPUSH
36739: LD_VAR 0 5
36743: PPUSH
36744: CALL_OW 272
36748: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
36749: LD_ADDR_VAR 0 10
36753: PUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL_OW 251
36763: PPUSH
36764: LD_VAR 0 7
36768: PPUSH
36769: LD_VAR 0 5
36773: PPUSH
36774: CALL_OW 273
36778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36779: LD_VAR 0 9
36783: PPUSH
36784: LD_VAR 0 10
36788: PPUSH
36789: CALL_OW 488
36793: NOT
36794: IFFALSE 36798
// exit ;
36796: GO 36916
// ComAnimCustom ( unit , 1 ) ;
36798: LD_VAR 0 1
36802: PPUSH
36803: LD_INT 1
36805: PPUSH
36806: CALL_OW 592
// p := 0 ;
36810: LD_ADDR_VAR 0 12
36814: PUSH
36815: LD_INT 0
36817: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36818: LD_VAR 0 9
36822: PPUSH
36823: LD_VAR 0 10
36827: PPUSH
36828: LD_VAR 0 6
36832: PPUSH
36833: LD_VAR 0 8
36837: PPUSH
36838: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
36842: LD_INT 35
36844: PPUSH
36845: CALL_OW 67
// p := Inc ( p ) ;
36849: LD_ADDR_VAR 0 12
36853: PUSH
36854: LD_VAR 0 12
36858: PPUSH
36859: CALL 76014 0 1
36863: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
36864: LD_VAR 0 12
36868: PUSH
36869: LD_INT 3
36871: EQUAL
36872: PUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 302
36882: NOT
36883: OR
36884: PUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: CALL_OW 301
36894: OR
36895: IFFALSE 36842
// RemoveSeeing ( _x , _y , side ) ;
36897: LD_VAR 0 9
36901: PPUSH
36902: LD_VAR 0 10
36906: PPUSH
36907: LD_VAR 0 6
36911: PPUSH
36912: CALL_OW 331
// end ; end_of_file
36916: LD_VAR 0 4
36920: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36921: LD_INT 0
36923: PPUSH
36924: PPUSH
// if exist_mode then
36925: LD_VAR 0 2
36929: IFFALSE 36975
// begin unit := CreateCharacter ( prefix & ident ) ;
36931: LD_ADDR_VAR 0 5
36935: PUSH
36936: LD_VAR 0 3
36940: PUSH
36941: LD_VAR 0 1
36945: STR
36946: PPUSH
36947: CALL_OW 34
36951: ST_TO_ADDR
// if unit then
36952: LD_VAR 0 5
36956: IFFALSE 36973
// DeleteCharacters ( prefix & ident ) ;
36958: LD_VAR 0 3
36962: PUSH
36963: LD_VAR 0 1
36967: STR
36968: PPUSH
36969: CALL_OW 40
// end else
36973: GO 36990
// unit := NewCharacter ( ident ) ;
36975: LD_ADDR_VAR 0 5
36979: PUSH
36980: LD_VAR 0 1
36984: PPUSH
36985: CALL_OW 25
36989: ST_TO_ADDR
// result := unit ;
36990: LD_ADDR_VAR 0 4
36994: PUSH
36995: LD_VAR 0 5
36999: ST_TO_ADDR
// end ;
37000: LD_VAR 0 4
37004: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37005: LD_INT 0
37007: PPUSH
37008: PPUSH
// if not side or not nation then
37009: LD_VAR 0 1
37013: NOT
37014: PUSH
37015: LD_VAR 0 2
37019: NOT
37020: OR
37021: IFFALSE 37025
// exit ;
37023: GO 37793
// case nation of nation_american :
37025: LD_VAR 0 2
37029: PUSH
37030: LD_INT 1
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37038
37036: GO 37252
37038: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37039: LD_ADDR_VAR 0 4
37043: PUSH
37044: LD_INT 35
37046: PUSH
37047: LD_INT 45
37049: PUSH
37050: LD_INT 46
37052: PUSH
37053: LD_INT 47
37055: PUSH
37056: LD_INT 82
37058: PUSH
37059: LD_INT 83
37061: PUSH
37062: LD_INT 84
37064: PUSH
37065: LD_INT 85
37067: PUSH
37068: LD_INT 86
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 2
37076: PUSH
37077: LD_INT 6
37079: PUSH
37080: LD_INT 15
37082: PUSH
37083: LD_INT 16
37085: PUSH
37086: LD_INT 7
37088: PUSH
37089: LD_INT 12
37091: PUSH
37092: LD_INT 13
37094: PUSH
37095: LD_INT 10
37097: PUSH
37098: LD_INT 14
37100: PUSH
37101: LD_INT 20
37103: PUSH
37104: LD_INT 21
37106: PUSH
37107: LD_INT 22
37109: PUSH
37110: LD_INT 25
37112: PUSH
37113: LD_INT 32
37115: PUSH
37116: LD_INT 27
37118: PUSH
37119: LD_INT 36
37121: PUSH
37122: LD_INT 69
37124: PUSH
37125: LD_INT 39
37127: PUSH
37128: LD_INT 34
37130: PUSH
37131: LD_INT 40
37133: PUSH
37134: LD_INT 48
37136: PUSH
37137: LD_INT 49
37139: PUSH
37140: LD_INT 50
37142: PUSH
37143: LD_INT 51
37145: PUSH
37146: LD_INT 52
37148: PUSH
37149: LD_INT 53
37151: PUSH
37152: LD_INT 54
37154: PUSH
37155: LD_INT 55
37157: PUSH
37158: LD_INT 56
37160: PUSH
37161: LD_INT 57
37163: PUSH
37164: LD_INT 58
37166: PUSH
37167: LD_INT 59
37169: PUSH
37170: LD_INT 60
37172: PUSH
37173: LD_INT 61
37175: PUSH
37176: LD_INT 62
37178: PUSH
37179: LD_INT 80
37181: PUSH
37182: LD_INT 82
37184: PUSH
37185: LD_INT 83
37187: PUSH
37188: LD_INT 84
37190: PUSH
37191: LD_INT 85
37193: PUSH
37194: LD_INT 86
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: ST_TO_ADDR
37250: GO 37717
37252: LD_INT 2
37254: DOUBLE
37255: EQUAL
37256: IFTRUE 37260
37258: GO 37486
37260: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37261: LD_ADDR_VAR 0 4
37265: PUSH
37266: LD_INT 35
37268: PUSH
37269: LD_INT 45
37271: PUSH
37272: LD_INT 46
37274: PUSH
37275: LD_INT 47
37277: PUSH
37278: LD_INT 82
37280: PUSH
37281: LD_INT 83
37283: PUSH
37284: LD_INT 84
37286: PUSH
37287: LD_INT 85
37289: PUSH
37290: LD_INT 87
37292: PUSH
37293: LD_INT 70
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: LD_INT 11
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: LD_INT 4
37307: PUSH
37308: LD_INT 5
37310: PUSH
37311: LD_INT 6
37313: PUSH
37314: LD_INT 15
37316: PUSH
37317: LD_INT 18
37319: PUSH
37320: LD_INT 7
37322: PUSH
37323: LD_INT 17
37325: PUSH
37326: LD_INT 8
37328: PUSH
37329: LD_INT 20
37331: PUSH
37332: LD_INT 21
37334: PUSH
37335: LD_INT 22
37337: PUSH
37338: LD_INT 72
37340: PUSH
37341: LD_INT 26
37343: PUSH
37344: LD_INT 69
37346: PUSH
37347: LD_INT 39
37349: PUSH
37350: LD_INT 40
37352: PUSH
37353: LD_INT 41
37355: PUSH
37356: LD_INT 42
37358: PUSH
37359: LD_INT 43
37361: PUSH
37362: LD_INT 48
37364: PUSH
37365: LD_INT 49
37367: PUSH
37368: LD_INT 50
37370: PUSH
37371: LD_INT 51
37373: PUSH
37374: LD_INT 52
37376: PUSH
37377: LD_INT 53
37379: PUSH
37380: LD_INT 54
37382: PUSH
37383: LD_INT 55
37385: PUSH
37386: LD_INT 56
37388: PUSH
37389: LD_INT 60
37391: PUSH
37392: LD_INT 61
37394: PUSH
37395: LD_INT 62
37397: PUSH
37398: LD_INT 66
37400: PUSH
37401: LD_INT 67
37403: PUSH
37404: LD_INT 68
37406: PUSH
37407: LD_INT 81
37409: PUSH
37410: LD_INT 82
37412: PUSH
37413: LD_INT 83
37415: PUSH
37416: LD_INT 84
37418: PUSH
37419: LD_INT 85
37421: PUSH
37422: LD_INT 87
37424: PUSH
37425: LD_INT 88
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: ST_TO_ADDR
37484: GO 37717
37486: LD_INT 3
37488: DOUBLE
37489: EQUAL
37490: IFTRUE 37494
37492: GO 37716
37494: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37495: LD_ADDR_VAR 0 4
37499: PUSH
37500: LD_INT 46
37502: PUSH
37503: LD_INT 47
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 82
37514: PUSH
37515: LD_INT 83
37517: PUSH
37518: LD_INT 84
37520: PUSH
37521: LD_INT 85
37523: PUSH
37524: LD_INT 86
37526: PUSH
37527: LD_INT 11
37529: PUSH
37530: LD_INT 9
37532: PUSH
37533: LD_INT 20
37535: PUSH
37536: LD_INT 19
37538: PUSH
37539: LD_INT 21
37541: PUSH
37542: LD_INT 24
37544: PUSH
37545: LD_INT 22
37547: PUSH
37548: LD_INT 25
37550: PUSH
37551: LD_INT 28
37553: PUSH
37554: LD_INT 29
37556: PUSH
37557: LD_INT 30
37559: PUSH
37560: LD_INT 31
37562: PUSH
37563: LD_INT 37
37565: PUSH
37566: LD_INT 38
37568: PUSH
37569: LD_INT 32
37571: PUSH
37572: LD_INT 27
37574: PUSH
37575: LD_INT 33
37577: PUSH
37578: LD_INT 69
37580: PUSH
37581: LD_INT 39
37583: PUSH
37584: LD_INT 34
37586: PUSH
37587: LD_INT 40
37589: PUSH
37590: LD_INT 71
37592: PUSH
37593: LD_INT 23
37595: PUSH
37596: LD_INT 44
37598: PUSH
37599: LD_INT 48
37601: PUSH
37602: LD_INT 49
37604: PUSH
37605: LD_INT 50
37607: PUSH
37608: LD_INT 51
37610: PUSH
37611: LD_INT 52
37613: PUSH
37614: LD_INT 53
37616: PUSH
37617: LD_INT 54
37619: PUSH
37620: LD_INT 55
37622: PUSH
37623: LD_INT 56
37625: PUSH
37626: LD_INT 57
37628: PUSH
37629: LD_INT 58
37631: PUSH
37632: LD_INT 59
37634: PUSH
37635: LD_INT 63
37637: PUSH
37638: LD_INT 64
37640: PUSH
37641: LD_INT 65
37643: PUSH
37644: LD_INT 82
37646: PUSH
37647: LD_INT 83
37649: PUSH
37650: LD_INT 84
37652: PUSH
37653: LD_INT 85
37655: PUSH
37656: LD_INT 86
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: ST_TO_ADDR
37714: GO 37717
37716: POP
// if state > - 1 and state < 3 then
37717: LD_VAR 0 3
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: GREATER
37726: PUSH
37727: LD_VAR 0 3
37731: PUSH
37732: LD_INT 3
37734: LESS
37735: AND
37736: IFFALSE 37793
// for i in result do
37738: LD_ADDR_VAR 0 5
37742: PUSH
37743: LD_VAR 0 4
37747: PUSH
37748: FOR_IN
37749: IFFALSE 37791
// if GetTech ( i , side ) <> state then
37751: LD_VAR 0 5
37755: PPUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 321
37765: PUSH
37766: LD_VAR 0 3
37770: NONEQUAL
37771: IFFALSE 37789
// result := result diff i ;
37773: LD_ADDR_VAR 0 4
37777: PUSH
37778: LD_VAR 0 4
37782: PUSH
37783: LD_VAR 0 5
37787: DIFF
37788: ST_TO_ADDR
37789: GO 37748
37791: POP
37792: POP
// end ;
37793: LD_VAR 0 4
37797: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37798: LD_INT 0
37800: PPUSH
37801: PPUSH
37802: PPUSH
// result := true ;
37803: LD_ADDR_VAR 0 3
37807: PUSH
37808: LD_INT 1
37810: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37811: LD_ADDR_VAR 0 5
37815: PUSH
37816: LD_VAR 0 2
37820: PPUSH
37821: CALL_OW 480
37825: ST_TO_ADDR
// if not tmp then
37826: LD_VAR 0 5
37830: NOT
37831: IFFALSE 37835
// exit ;
37833: GO 37884
// for i in tmp do
37835: LD_ADDR_VAR 0 4
37839: PUSH
37840: LD_VAR 0 5
37844: PUSH
37845: FOR_IN
37846: IFFALSE 37882
// if GetTech ( i , side ) <> state_researched then
37848: LD_VAR 0 4
37852: PPUSH
37853: LD_VAR 0 1
37857: PPUSH
37858: CALL_OW 321
37862: PUSH
37863: LD_INT 2
37865: NONEQUAL
37866: IFFALSE 37880
// begin result := false ;
37868: LD_ADDR_VAR 0 3
37872: PUSH
37873: LD_INT 0
37875: ST_TO_ADDR
// exit ;
37876: POP
37877: POP
37878: GO 37884
// end ;
37880: GO 37845
37882: POP
37883: POP
// end ;
37884: LD_VAR 0 3
37888: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37889: LD_INT 0
37891: PPUSH
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
37903: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37904: LD_VAR 0 1
37908: NOT
37909: PUSH
37910: LD_VAR 0 1
37914: PPUSH
37915: CALL_OW 257
37919: PUSH
37920: LD_INT 9
37922: NONEQUAL
37923: OR
37924: IFFALSE 37928
// exit ;
37926: GO 38501
// side := GetSide ( unit ) ;
37928: LD_ADDR_VAR 0 9
37932: PUSH
37933: LD_VAR 0 1
37937: PPUSH
37938: CALL_OW 255
37942: ST_TO_ADDR
// tech_space := tech_spacanom ;
37943: LD_ADDR_VAR 0 12
37947: PUSH
37948: LD_INT 29
37950: ST_TO_ADDR
// tech_time := tech_taurad ;
37951: LD_ADDR_VAR 0 13
37955: PUSH
37956: LD_INT 28
37958: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37959: LD_ADDR_VAR 0 11
37963: PUSH
37964: LD_VAR 0 1
37968: PPUSH
37969: CALL_OW 310
37973: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37974: LD_VAR 0 11
37978: PPUSH
37979: CALL_OW 247
37983: PUSH
37984: LD_INT 2
37986: EQUAL
37987: IFFALSE 37991
// exit ;
37989: GO 38501
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37991: LD_ADDR_VAR 0 8
37995: PUSH
37996: LD_INT 81
37998: PUSH
37999: LD_VAR 0 9
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 3
38010: PUSH
38011: LD_INT 21
38013: PUSH
38014: LD_INT 3
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PPUSH
38029: CALL_OW 69
38033: ST_TO_ADDR
// if not tmp then
38034: LD_VAR 0 8
38038: NOT
38039: IFFALSE 38043
// exit ;
38041: GO 38501
// if in_unit then
38043: LD_VAR 0 11
38047: IFFALSE 38071
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38049: LD_ADDR_VAR 0 10
38053: PUSH
38054: LD_VAR 0 8
38058: PPUSH
38059: LD_VAR 0 11
38063: PPUSH
38064: CALL_OW 74
38068: ST_TO_ADDR
38069: GO 38091
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38071: LD_ADDR_VAR 0 10
38075: PUSH
38076: LD_VAR 0 8
38080: PPUSH
38081: LD_VAR 0 1
38085: PPUSH
38086: CALL_OW 74
38090: ST_TO_ADDR
// if not enemy then
38091: LD_VAR 0 10
38095: NOT
38096: IFFALSE 38100
// exit ;
38098: GO 38501
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38100: LD_VAR 0 11
38104: PUSH
38105: LD_VAR 0 11
38109: PPUSH
38110: LD_VAR 0 10
38114: PPUSH
38115: CALL_OW 296
38119: PUSH
38120: LD_INT 13
38122: GREATER
38123: AND
38124: PUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: LD_VAR 0 10
38134: PPUSH
38135: CALL_OW 296
38139: PUSH
38140: LD_INT 12
38142: GREATER
38143: OR
38144: IFFALSE 38148
// exit ;
38146: GO 38501
// missile := [ 1 ] ;
38148: LD_ADDR_VAR 0 14
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38159: LD_VAR 0 9
38163: PPUSH
38164: LD_VAR 0 12
38168: PPUSH
38169: CALL_OW 325
38173: IFFALSE 38202
// missile := Replace ( missile , missile + 1 , 2 ) ;
38175: LD_ADDR_VAR 0 14
38179: PUSH
38180: LD_VAR 0 14
38184: PPUSH
38185: LD_VAR 0 14
38189: PUSH
38190: LD_INT 1
38192: PLUS
38193: PPUSH
38194: LD_INT 2
38196: PPUSH
38197: CALL_OW 1
38201: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38202: LD_VAR 0 9
38206: PPUSH
38207: LD_VAR 0 13
38211: PPUSH
38212: CALL_OW 325
38216: PUSH
38217: LD_VAR 0 10
38221: PPUSH
38222: CALL_OW 255
38226: PPUSH
38227: LD_VAR 0 13
38231: PPUSH
38232: CALL_OW 325
38236: NOT
38237: AND
38238: IFFALSE 38267
// missile := Replace ( missile , missile + 1 , 3 ) ;
38240: LD_ADDR_VAR 0 14
38244: PUSH
38245: LD_VAR 0 14
38249: PPUSH
38250: LD_VAR 0 14
38254: PUSH
38255: LD_INT 1
38257: PLUS
38258: PPUSH
38259: LD_INT 3
38261: PPUSH
38262: CALL_OW 1
38266: ST_TO_ADDR
// if missile < 2 then
38267: LD_VAR 0 14
38271: PUSH
38272: LD_INT 2
38274: LESS
38275: IFFALSE 38279
// exit ;
38277: GO 38501
// x := GetX ( enemy ) ;
38279: LD_ADDR_VAR 0 4
38283: PUSH
38284: LD_VAR 0 10
38288: PPUSH
38289: CALL_OW 250
38293: ST_TO_ADDR
// y := GetY ( enemy ) ;
38294: LD_ADDR_VAR 0 5
38298: PUSH
38299: LD_VAR 0 10
38303: PPUSH
38304: CALL_OW 251
38308: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38309: LD_ADDR_VAR 0 6
38313: PUSH
38314: LD_VAR 0 4
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PPUSH
38323: LD_INT 1
38325: PPUSH
38326: CALL_OW 12
38330: PLUS
38331: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38332: LD_ADDR_VAR 0 7
38336: PUSH
38337: LD_VAR 0 5
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PPUSH
38346: LD_INT 1
38348: PPUSH
38349: CALL_OW 12
38353: PLUS
38354: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38355: LD_VAR 0 6
38359: PPUSH
38360: LD_VAR 0 7
38364: PPUSH
38365: CALL_OW 488
38369: NOT
38370: IFFALSE 38392
// begin _x := x ;
38372: LD_ADDR_VAR 0 6
38376: PUSH
38377: LD_VAR 0 4
38381: ST_TO_ADDR
// _y := y ;
38382: LD_ADDR_VAR 0 7
38386: PUSH
38387: LD_VAR 0 5
38391: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38392: LD_ADDR_VAR 0 3
38396: PUSH
38397: LD_INT 1
38399: PPUSH
38400: LD_VAR 0 14
38404: PPUSH
38405: CALL_OW 12
38409: ST_TO_ADDR
// case i of 1 :
38410: LD_VAR 0 3
38414: PUSH
38415: LD_INT 1
38417: DOUBLE
38418: EQUAL
38419: IFTRUE 38423
38421: GO 38440
38423: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38424: LD_VAR 0 1
38428: PPUSH
38429: LD_VAR 0 10
38433: PPUSH
38434: CALL_OW 115
38438: GO 38501
38440: LD_INT 2
38442: DOUBLE
38443: EQUAL
38444: IFTRUE 38448
38446: GO 38470
38448: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38449: LD_VAR 0 1
38453: PPUSH
38454: LD_VAR 0 6
38458: PPUSH
38459: LD_VAR 0 7
38463: PPUSH
38464: CALL_OW 153
38468: GO 38501
38470: LD_INT 3
38472: DOUBLE
38473: EQUAL
38474: IFTRUE 38478
38476: GO 38500
38478: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38479: LD_VAR 0 1
38483: PPUSH
38484: LD_VAR 0 6
38488: PPUSH
38489: LD_VAR 0 7
38493: PPUSH
38494: CALL_OW 154
38498: GO 38501
38500: POP
// end ;
38501: LD_VAR 0 2
38505: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38506: LD_INT 0
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
// if not unit or not building then
38514: LD_VAR 0 1
38518: NOT
38519: PUSH
38520: LD_VAR 0 2
38524: NOT
38525: OR
38526: IFFALSE 38530
// exit ;
38528: GO 38688
// x := GetX ( building ) ;
38530: LD_ADDR_VAR 0 5
38534: PUSH
38535: LD_VAR 0 2
38539: PPUSH
38540: CALL_OW 250
38544: ST_TO_ADDR
// y := GetY ( building ) ;
38545: LD_ADDR_VAR 0 6
38549: PUSH
38550: LD_VAR 0 2
38554: PPUSH
38555: CALL_OW 251
38559: ST_TO_ADDR
// for i = 0 to 5 do
38560: LD_ADDR_VAR 0 4
38564: PUSH
38565: DOUBLE
38566: LD_INT 0
38568: DEC
38569: ST_TO_ADDR
38570: LD_INT 5
38572: PUSH
38573: FOR_TO
38574: IFFALSE 38686
// begin _x := ShiftX ( x , i , 3 ) ;
38576: LD_ADDR_VAR 0 7
38580: PUSH
38581: LD_VAR 0 5
38585: PPUSH
38586: LD_VAR 0 4
38590: PPUSH
38591: LD_INT 3
38593: PPUSH
38594: CALL_OW 272
38598: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38599: LD_ADDR_VAR 0 8
38603: PUSH
38604: LD_VAR 0 6
38608: PPUSH
38609: LD_VAR 0 4
38613: PPUSH
38614: LD_INT 3
38616: PPUSH
38617: CALL_OW 273
38621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38622: LD_VAR 0 7
38626: PPUSH
38627: LD_VAR 0 8
38631: PPUSH
38632: CALL_OW 488
38636: NOT
38637: IFFALSE 38641
// continue ;
38639: GO 38573
// if HexInfo ( _x , _y ) = 0 then
38641: LD_VAR 0 7
38645: PPUSH
38646: LD_VAR 0 8
38650: PPUSH
38651: CALL_OW 428
38655: PUSH
38656: LD_INT 0
38658: EQUAL
38659: IFFALSE 38684
// begin ComMoveXY ( unit , _x , _y ) ;
38661: LD_VAR 0 1
38665: PPUSH
38666: LD_VAR 0 7
38670: PPUSH
38671: LD_VAR 0 8
38675: PPUSH
38676: CALL_OW 111
// exit ;
38680: POP
38681: POP
38682: GO 38688
// end ; end ;
38684: GO 38573
38686: POP
38687: POP
// end ;
38688: LD_VAR 0 3
38692: RET
// export function ScanBase ( side , base_area ) ; begin
38693: LD_INT 0
38695: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_VAR 0 2
38705: PPUSH
38706: LD_INT 81
38708: PUSH
38709: LD_VAR 0 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PPUSH
38718: CALL_OW 70
38722: ST_TO_ADDR
// end ;
38723: LD_VAR 0 3
38727: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38728: LD_INT 0
38730: PPUSH
38731: PPUSH
38732: PPUSH
38733: PPUSH
// result := false ;
38734: LD_ADDR_VAR 0 2
38738: PUSH
38739: LD_INT 0
38741: ST_TO_ADDR
// side := GetSide ( unit ) ;
38742: LD_ADDR_VAR 0 3
38746: PUSH
38747: LD_VAR 0 1
38751: PPUSH
38752: CALL_OW 255
38756: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38757: LD_ADDR_VAR 0 4
38761: PUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: CALL_OW 248
38771: ST_TO_ADDR
// case nat of 1 :
38772: LD_VAR 0 4
38776: PUSH
38777: LD_INT 1
38779: DOUBLE
38780: EQUAL
38781: IFTRUE 38785
38783: GO 38796
38785: POP
// tech := tech_lassight ; 2 :
38786: LD_ADDR_VAR 0 5
38790: PUSH
38791: LD_INT 12
38793: ST_TO_ADDR
38794: GO 38835
38796: LD_INT 2
38798: DOUBLE
38799: EQUAL
38800: IFTRUE 38804
38802: GO 38815
38804: POP
// tech := tech_mortar ; 3 :
38805: LD_ADDR_VAR 0 5
38809: PUSH
38810: LD_INT 41
38812: ST_TO_ADDR
38813: GO 38835
38815: LD_INT 3
38817: DOUBLE
38818: EQUAL
38819: IFTRUE 38823
38821: GO 38834
38823: POP
// tech := tech_bazooka ; end ;
38824: LD_ADDR_VAR 0 5
38828: PUSH
38829: LD_INT 44
38831: ST_TO_ADDR
38832: GO 38835
38834: POP
// if Researched ( side , tech ) then
38835: LD_VAR 0 3
38839: PPUSH
38840: LD_VAR 0 5
38844: PPUSH
38845: CALL_OW 325
38849: IFFALSE 38876
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38851: LD_ADDR_VAR 0 2
38855: PUSH
38856: LD_INT 5
38858: PUSH
38859: LD_INT 8
38861: PUSH
38862: LD_INT 9
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: PUSH
38870: LD_VAR 0 4
38874: ARRAY
38875: ST_TO_ADDR
// end ;
38876: LD_VAR 0 2
38880: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38881: LD_INT 0
38883: PPUSH
38884: PPUSH
38885: PPUSH
// if not mines then
38886: LD_VAR 0 2
38890: NOT
38891: IFFALSE 38895
// exit ;
38893: GO 39039
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38895: LD_ADDR_VAR 0 5
38899: PUSH
38900: LD_INT 81
38902: PUSH
38903: LD_VAR 0 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: LD_INT 21
38917: PUSH
38918: LD_INT 3
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PPUSH
38933: CALL_OW 69
38937: ST_TO_ADDR
// for i in mines do
38938: LD_ADDR_VAR 0 4
38942: PUSH
38943: LD_VAR 0 2
38947: PUSH
38948: FOR_IN
38949: IFFALSE 39037
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38951: LD_VAR 0 4
38955: PUSH
38956: LD_INT 1
38958: ARRAY
38959: PPUSH
38960: LD_VAR 0 4
38964: PUSH
38965: LD_INT 2
38967: ARRAY
38968: PPUSH
38969: CALL_OW 458
38973: NOT
38974: IFFALSE 38978
// continue ;
38976: GO 38948
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38978: LD_VAR 0 4
38982: PUSH
38983: LD_INT 1
38985: ARRAY
38986: PPUSH
38987: LD_VAR 0 4
38991: PUSH
38992: LD_INT 2
38994: ARRAY
38995: PPUSH
38996: CALL_OW 428
39000: PUSH
39001: LD_VAR 0 5
39005: IN
39006: IFFALSE 39035
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39008: LD_VAR 0 4
39012: PUSH
39013: LD_INT 1
39015: ARRAY
39016: PPUSH
39017: LD_VAR 0 4
39021: PUSH
39022: LD_INT 2
39024: ARRAY
39025: PPUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 456
// end ;
39035: GO 38948
39037: POP
39038: POP
// end ;
39039: LD_VAR 0 3
39043: RET
// export function Count ( array ) ; begin
39044: LD_INT 0
39046: PPUSH
// result := array + 0 ;
39047: LD_ADDR_VAR 0 2
39051: PUSH
39052: LD_VAR 0 1
39056: PUSH
39057: LD_INT 0
39059: PLUS
39060: ST_TO_ADDR
// end ;
39061: LD_VAR 0 2
39065: RET
// export function IsEmpty ( building ) ; begin
39066: LD_INT 0
39068: PPUSH
// if not building then
39069: LD_VAR 0 1
39073: NOT
39074: IFFALSE 39078
// exit ;
39076: GO 39121
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39078: LD_ADDR_VAR 0 2
39082: PUSH
39083: LD_VAR 0 1
39087: PUSH
39088: LD_INT 22
39090: PUSH
39091: LD_VAR 0 1
39095: PPUSH
39096: CALL_OW 255
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 58
39107: PUSH
39108: EMPTY
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PPUSH
39115: CALL_OW 69
39119: IN
39120: ST_TO_ADDR
// end ;
39121: LD_VAR 0 2
39125: RET
// export function IsNotFull ( building ) ; var places ; begin
39126: LD_INT 0
39128: PPUSH
39129: PPUSH
// if not building then
39130: LD_VAR 0 1
39134: NOT
39135: IFFALSE 39139
// exit ;
39137: GO 39167
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
39139: LD_ADDR_VAR 0 2
39143: PUSH
39144: LD_VAR 0 1
39148: PPUSH
39149: LD_INT 3
39151: PUSH
39152: LD_INT 62
39154: PUSH
39155: EMPTY
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PPUSH
39162: CALL_OW 72
39166: ST_TO_ADDR
// end ;
39167: LD_VAR 0 2
39171: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39172: LD_INT 0
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
// tmp := [ ] ;
39178: LD_ADDR_VAR 0 3
39182: PUSH
39183: EMPTY
39184: ST_TO_ADDR
// list := [ ] ;
39185: LD_ADDR_VAR 0 5
39189: PUSH
39190: EMPTY
39191: ST_TO_ADDR
// for i = 16 to 25 do
39192: LD_ADDR_VAR 0 4
39196: PUSH
39197: DOUBLE
39198: LD_INT 16
39200: DEC
39201: ST_TO_ADDR
39202: LD_INT 25
39204: PUSH
39205: FOR_TO
39206: IFFALSE 39279
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39208: LD_ADDR_VAR 0 3
39212: PUSH
39213: LD_VAR 0 3
39217: PUSH
39218: LD_INT 22
39220: PUSH
39221: LD_VAR 0 1
39225: PPUSH
39226: CALL_OW 255
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 91
39237: PUSH
39238: LD_VAR 0 1
39242: PUSH
39243: LD_INT 6
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 30
39253: PUSH
39254: LD_VAR 0 4
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: PUSH
39268: EMPTY
39269: LIST
39270: PPUSH
39271: CALL_OW 69
39275: ADD
39276: ST_TO_ADDR
39277: GO 39205
39279: POP
39280: POP
// for i = 1 to tmp do
39281: LD_ADDR_VAR 0 4
39285: PUSH
39286: DOUBLE
39287: LD_INT 1
39289: DEC
39290: ST_TO_ADDR
39291: LD_VAR 0 3
39295: PUSH
39296: FOR_TO
39297: IFFALSE 39385
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39299: LD_ADDR_VAR 0 5
39303: PUSH
39304: LD_VAR 0 5
39308: PUSH
39309: LD_VAR 0 3
39313: PUSH
39314: LD_VAR 0 4
39318: ARRAY
39319: PPUSH
39320: CALL_OW 266
39324: PUSH
39325: LD_VAR 0 3
39329: PUSH
39330: LD_VAR 0 4
39334: ARRAY
39335: PPUSH
39336: CALL_OW 250
39340: PUSH
39341: LD_VAR 0 3
39345: PUSH
39346: LD_VAR 0 4
39350: ARRAY
39351: PPUSH
39352: CALL_OW 251
39356: PUSH
39357: LD_VAR 0 3
39361: PUSH
39362: LD_VAR 0 4
39366: ARRAY
39367: PPUSH
39368: CALL_OW 254
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: PUSH
39379: EMPTY
39380: LIST
39381: ADD
39382: ST_TO_ADDR
39383: GO 39296
39385: POP
39386: POP
// result := list ;
39387: LD_ADDR_VAR 0 2
39391: PUSH
39392: LD_VAR 0 5
39396: ST_TO_ADDR
// end ;
39397: LD_VAR 0 2
39401: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39402: LD_INT 0
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
39410: PPUSH
// if not factory then
39411: LD_VAR 0 1
39415: NOT
39416: IFFALSE 39420
// exit ;
39418: GO 40013
// if control = control_apeman then
39420: LD_VAR 0 4
39424: PUSH
39425: LD_INT 5
39427: EQUAL
39428: IFFALSE 39537
// begin tmp := UnitsInside ( factory ) ;
39430: LD_ADDR_VAR 0 8
39434: PUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 313
39444: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39445: LD_VAR 0 8
39449: PPUSH
39450: LD_INT 25
39452: PUSH
39453: LD_INT 12
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PPUSH
39460: CALL_OW 72
39464: NOT
39465: IFFALSE 39475
// control := control_manual ;
39467: LD_ADDR_VAR 0 4
39471: PUSH
39472: LD_INT 1
39474: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39475: LD_ADDR_VAR 0 8
39479: PUSH
39480: LD_VAR 0 1
39484: PPUSH
39485: CALL 39172 0 1
39489: ST_TO_ADDR
// if tmp then
39490: LD_VAR 0 8
39494: IFFALSE 39537
// begin for i in tmp do
39496: LD_ADDR_VAR 0 7
39500: PUSH
39501: LD_VAR 0 8
39505: PUSH
39506: FOR_IN
39507: IFFALSE 39535
// if i [ 1 ] = b_ext_radio then
39509: LD_VAR 0 7
39513: PUSH
39514: LD_INT 1
39516: ARRAY
39517: PUSH
39518: LD_INT 22
39520: EQUAL
39521: IFFALSE 39533
// begin control := control_remote ;
39523: LD_ADDR_VAR 0 4
39527: PUSH
39528: LD_INT 2
39530: ST_TO_ADDR
// break ;
39531: GO 39535
// end ;
39533: GO 39506
39535: POP
39536: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39537: LD_VAR 0 1
39541: PPUSH
39542: LD_VAR 0 2
39546: PPUSH
39547: LD_VAR 0 3
39551: PPUSH
39552: LD_VAR 0 4
39556: PPUSH
39557: LD_VAR 0 5
39561: PPUSH
39562: CALL_OW 448
39566: IFFALSE 39601
// begin result := [ chassis , engine , control , weapon ] ;
39568: LD_ADDR_VAR 0 6
39572: PUSH
39573: LD_VAR 0 2
39577: PUSH
39578: LD_VAR 0 3
39582: PUSH
39583: LD_VAR 0 4
39587: PUSH
39588: LD_VAR 0 5
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
// exit ;
39599: GO 40013
// end ; _chassis := AvailableChassisList ( factory ) ;
39601: LD_ADDR_VAR 0 9
39605: PUSH
39606: LD_VAR 0 1
39610: PPUSH
39611: CALL_OW 475
39615: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39616: LD_ADDR_VAR 0 11
39620: PUSH
39621: LD_VAR 0 1
39625: PPUSH
39626: CALL_OW 476
39630: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39631: LD_ADDR_VAR 0 12
39635: PUSH
39636: LD_VAR 0 1
39640: PPUSH
39641: CALL_OW 477
39645: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39646: LD_ADDR_VAR 0 10
39650: PUSH
39651: LD_VAR 0 1
39655: PPUSH
39656: CALL_OW 478
39660: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39661: LD_VAR 0 9
39665: NOT
39666: PUSH
39667: LD_VAR 0 11
39671: NOT
39672: OR
39673: PUSH
39674: LD_VAR 0 12
39678: NOT
39679: OR
39680: PUSH
39681: LD_VAR 0 10
39685: NOT
39686: OR
39687: IFFALSE 39722
// begin result := [ chassis , engine , control , weapon ] ;
39689: LD_ADDR_VAR 0 6
39693: PUSH
39694: LD_VAR 0 2
39698: PUSH
39699: LD_VAR 0 3
39703: PUSH
39704: LD_VAR 0 4
39708: PUSH
39709: LD_VAR 0 5
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: ST_TO_ADDR
// exit ;
39720: GO 40013
// end ; if not chassis in _chassis then
39722: LD_VAR 0 2
39726: PUSH
39727: LD_VAR 0 9
39731: IN
39732: NOT
39733: IFFALSE 39759
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39735: LD_ADDR_VAR 0 2
39739: PUSH
39740: LD_VAR 0 9
39744: PUSH
39745: LD_INT 1
39747: PPUSH
39748: LD_VAR 0 9
39752: PPUSH
39753: CALL_OW 12
39757: ARRAY
39758: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39759: LD_VAR 0 2
39763: PPUSH
39764: LD_VAR 0 3
39768: PPUSH
39769: CALL 40018 0 2
39773: NOT
39774: IFFALSE 39833
// repeat engine := _engine [ 1 ] ;
39776: LD_ADDR_VAR 0 3
39780: PUSH
39781: LD_VAR 0 11
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39790: LD_ADDR_VAR 0 11
39794: PUSH
39795: LD_VAR 0 11
39799: PPUSH
39800: LD_INT 1
39802: PPUSH
39803: CALL_OW 3
39807: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39808: LD_VAR 0 2
39812: PPUSH
39813: LD_VAR 0 3
39817: PPUSH
39818: CALL 40018 0 2
39822: PUSH
39823: LD_VAR 0 11
39827: PUSH
39828: EMPTY
39829: EQUAL
39830: OR
39831: IFFALSE 39776
// if not control in _control then
39833: LD_VAR 0 4
39837: PUSH
39838: LD_VAR 0 12
39842: IN
39843: NOT
39844: IFFALSE 39870
// control := _control [ rand ( 1 , _control ) ] ;
39846: LD_ADDR_VAR 0 4
39850: PUSH
39851: LD_VAR 0 12
39855: PUSH
39856: LD_INT 1
39858: PPUSH
39859: LD_VAR 0 12
39863: PPUSH
39864: CALL_OW 12
39868: ARRAY
39869: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39870: LD_VAR 0 2
39874: PPUSH
39875: LD_VAR 0 5
39879: PPUSH
39880: CALL 40238 0 2
39884: NOT
39885: IFFALSE 39944
// repeat weapon := _weapon [ 1 ] ;
39887: LD_ADDR_VAR 0 5
39891: PUSH
39892: LD_VAR 0 10
39896: PUSH
39897: LD_INT 1
39899: ARRAY
39900: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39901: LD_ADDR_VAR 0 10
39905: PUSH
39906: LD_VAR 0 10
39910: PPUSH
39911: LD_INT 1
39913: PPUSH
39914: CALL_OW 3
39918: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39919: LD_VAR 0 2
39923: PPUSH
39924: LD_VAR 0 5
39928: PPUSH
39929: CALL 40238 0 2
39933: PUSH
39934: LD_VAR 0 10
39938: PUSH
39939: EMPTY
39940: EQUAL
39941: OR
39942: IFFALSE 39887
// result := [ ] ;
39944: LD_ADDR_VAR 0 6
39948: PUSH
39949: EMPTY
39950: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39951: LD_VAR 0 1
39955: PPUSH
39956: LD_VAR 0 2
39960: PPUSH
39961: LD_VAR 0 3
39965: PPUSH
39966: LD_VAR 0 4
39970: PPUSH
39971: LD_VAR 0 5
39975: PPUSH
39976: CALL_OW 448
39980: IFFALSE 40013
// result := [ chassis , engine , control , weapon ] ;
39982: LD_ADDR_VAR 0 6
39986: PUSH
39987: LD_VAR 0 2
39991: PUSH
39992: LD_VAR 0 3
39996: PUSH
39997: LD_VAR 0 4
40001: PUSH
40002: LD_VAR 0 5
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: ST_TO_ADDR
// end ;
40013: LD_VAR 0 6
40017: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40018: LD_INT 0
40020: PPUSH
// if not chassis or not engine then
40021: LD_VAR 0 1
40025: NOT
40026: PUSH
40027: LD_VAR 0 2
40031: NOT
40032: OR
40033: IFFALSE 40037
// exit ;
40035: GO 40233
// case engine of engine_solar :
40037: LD_VAR 0 2
40041: PUSH
40042: LD_INT 2
40044: DOUBLE
40045: EQUAL
40046: IFTRUE 40050
40048: GO 40088
40050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40051: LD_ADDR_VAR 0 3
40055: PUSH
40056: LD_INT 11
40058: PUSH
40059: LD_INT 12
40061: PUSH
40062: LD_INT 13
40064: PUSH
40065: LD_INT 14
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: LD_INT 2
40073: PUSH
40074: LD_INT 3
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: ST_TO_ADDR
40086: GO 40217
40088: LD_INT 1
40090: DOUBLE
40091: EQUAL
40092: IFTRUE 40096
40094: GO 40158
40096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40097: LD_ADDR_VAR 0 3
40101: PUSH
40102: LD_INT 11
40104: PUSH
40105: LD_INT 12
40107: PUSH
40108: LD_INT 13
40110: PUSH
40111: LD_INT 14
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 3
40122: PUSH
40123: LD_INT 4
40125: PUSH
40126: LD_INT 5
40128: PUSH
40129: LD_INT 21
40131: PUSH
40132: LD_INT 23
40134: PUSH
40135: LD_INT 22
40137: PUSH
40138: LD_INT 24
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
40156: GO 40217
40158: LD_INT 3
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40166
40164: GO 40216
40166: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40167: LD_ADDR_VAR 0 3
40171: PUSH
40172: LD_INT 13
40174: PUSH
40175: LD_INT 14
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: LD_INT 5
40189: PUSH
40190: LD_INT 21
40192: PUSH
40193: LD_INT 22
40195: PUSH
40196: LD_INT 23
40198: PUSH
40199: LD_INT 24
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: ST_TO_ADDR
40214: GO 40217
40216: POP
// result := ( chassis in result ) ;
40217: LD_ADDR_VAR 0 3
40221: PUSH
40222: LD_VAR 0 1
40226: PUSH
40227: LD_VAR 0 3
40231: IN
40232: ST_TO_ADDR
// end ;
40233: LD_VAR 0 3
40237: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40238: LD_INT 0
40240: PPUSH
// if not chassis or not weapon then
40241: LD_VAR 0 1
40245: NOT
40246: PUSH
40247: LD_VAR 0 2
40251: NOT
40252: OR
40253: IFFALSE 40257
// exit ;
40255: GO 41317
// case weapon of us_machine_gun :
40257: LD_VAR 0 2
40261: PUSH
40262: LD_INT 2
40264: DOUBLE
40265: EQUAL
40266: IFTRUE 40270
40268: GO 40300
40270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40271: LD_ADDR_VAR 0 3
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: LD_INT 4
40287: PUSH
40288: LD_INT 5
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
40298: GO 41301
40300: LD_INT 3
40302: DOUBLE
40303: EQUAL
40304: IFTRUE 40308
40306: GO 40338
40308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: LD_INT 4
40325: PUSH
40326: LD_INT 5
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
40336: GO 41301
40338: LD_INT 11
40340: DOUBLE
40341: EQUAL
40342: IFTRUE 40346
40344: GO 40376
40346: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: LD_INT 4
40363: PUSH
40364: LD_INT 5
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: ST_TO_ADDR
40374: GO 41301
40376: LD_INT 4
40378: DOUBLE
40379: EQUAL
40380: IFTRUE 40384
40382: GO 40410
40384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40385: LD_ADDR_VAR 0 3
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: LD_INT 4
40398: PUSH
40399: LD_INT 5
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: ST_TO_ADDR
40408: GO 41301
40410: LD_INT 5
40412: DOUBLE
40413: EQUAL
40414: IFTRUE 40418
40416: GO 40444
40418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40419: LD_ADDR_VAR 0 3
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: LD_INT 4
40432: PUSH
40433: LD_INT 5
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: ST_TO_ADDR
40442: GO 41301
40444: LD_INT 9
40446: DOUBLE
40447: EQUAL
40448: IFTRUE 40452
40450: GO 40478
40452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: LD_INT 3
40463: PUSH
40464: LD_INT 4
40466: PUSH
40467: LD_INT 5
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: ST_TO_ADDR
40476: GO 41301
40478: LD_INT 7
40480: DOUBLE
40481: EQUAL
40482: IFTRUE 40486
40484: GO 40512
40486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40487: LD_ADDR_VAR 0 3
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: LD_INT 4
40500: PUSH
40501: LD_INT 5
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: ST_TO_ADDR
40510: GO 41301
40512: LD_INT 12
40514: DOUBLE
40515: EQUAL
40516: IFTRUE 40520
40518: GO 40546
40520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40521: LD_ADDR_VAR 0 3
40525: PUSH
40526: LD_INT 2
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: LD_INT 4
40534: PUSH
40535: LD_INT 5
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: ST_TO_ADDR
40544: GO 41301
40546: LD_INT 13
40548: DOUBLE
40549: EQUAL
40550: IFTRUE 40554
40552: GO 40580
40554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40555: LD_ADDR_VAR 0 3
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: LD_INT 3
40565: PUSH
40566: LD_INT 4
40568: PUSH
40569: LD_INT 5
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: ST_TO_ADDR
40578: GO 41301
40580: LD_INT 14
40582: DOUBLE
40583: EQUAL
40584: IFTRUE 40588
40586: GO 40606
40588: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40589: LD_ADDR_VAR 0 3
40593: PUSH
40594: LD_INT 4
40596: PUSH
40597: LD_INT 5
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: ST_TO_ADDR
40604: GO 41301
40606: LD_INT 6
40608: DOUBLE
40609: EQUAL
40610: IFTRUE 40614
40612: GO 40632
40614: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40615: LD_ADDR_VAR 0 3
40619: PUSH
40620: LD_INT 4
40622: PUSH
40623: LD_INT 5
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: ST_TO_ADDR
40630: GO 41301
40632: LD_INT 10
40634: DOUBLE
40635: EQUAL
40636: IFTRUE 40640
40638: GO 40658
40640: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40641: LD_ADDR_VAR 0 3
40645: PUSH
40646: LD_INT 4
40648: PUSH
40649: LD_INT 5
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: ST_TO_ADDR
40656: GO 41301
40658: LD_INT 22
40660: DOUBLE
40661: EQUAL
40662: IFTRUE 40666
40664: GO 40692
40666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40667: LD_ADDR_VAR 0 3
40671: PUSH
40672: LD_INT 11
40674: PUSH
40675: LD_INT 12
40677: PUSH
40678: LD_INT 13
40680: PUSH
40681: LD_INT 14
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: ST_TO_ADDR
40690: GO 41301
40692: LD_INT 23
40694: DOUBLE
40695: EQUAL
40696: IFTRUE 40700
40698: GO 40726
40700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40701: LD_ADDR_VAR 0 3
40705: PUSH
40706: LD_INT 11
40708: PUSH
40709: LD_INT 12
40711: PUSH
40712: LD_INT 13
40714: PUSH
40715: LD_INT 14
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: ST_TO_ADDR
40724: GO 41301
40726: LD_INT 24
40728: DOUBLE
40729: EQUAL
40730: IFTRUE 40734
40732: GO 40760
40734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40735: LD_ADDR_VAR 0 3
40739: PUSH
40740: LD_INT 11
40742: PUSH
40743: LD_INT 12
40745: PUSH
40746: LD_INT 13
40748: PUSH
40749: LD_INT 14
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
40758: GO 41301
40760: LD_INT 30
40762: DOUBLE
40763: EQUAL
40764: IFTRUE 40768
40766: GO 40794
40768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40769: LD_ADDR_VAR 0 3
40773: PUSH
40774: LD_INT 11
40776: PUSH
40777: LD_INT 12
40779: PUSH
40780: LD_INT 13
40782: PUSH
40783: LD_INT 14
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
40792: GO 41301
40794: LD_INT 25
40796: DOUBLE
40797: EQUAL
40798: IFTRUE 40802
40800: GO 40820
40802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40803: LD_ADDR_VAR 0 3
40807: PUSH
40808: LD_INT 13
40810: PUSH
40811: LD_INT 14
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: ST_TO_ADDR
40818: GO 41301
40820: LD_INT 27
40822: DOUBLE
40823: EQUAL
40824: IFTRUE 40828
40826: GO 40846
40828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40829: LD_ADDR_VAR 0 3
40833: PUSH
40834: LD_INT 13
40836: PUSH
40837: LD_INT 14
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: ST_TO_ADDR
40844: GO 41301
40846: LD_INT 92
40848: DOUBLE
40849: EQUAL
40850: IFTRUE 40854
40852: GO 40880
40854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40855: LD_ADDR_VAR 0 3
40859: PUSH
40860: LD_INT 11
40862: PUSH
40863: LD_INT 12
40865: PUSH
40866: LD_INT 13
40868: PUSH
40869: LD_INT 14
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: ST_TO_ADDR
40878: GO 41301
40880: LD_INT 28
40882: DOUBLE
40883: EQUAL
40884: IFTRUE 40888
40886: GO 40906
40888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40889: LD_ADDR_VAR 0 3
40893: PUSH
40894: LD_INT 13
40896: PUSH
40897: LD_INT 14
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: ST_TO_ADDR
40904: GO 41301
40906: LD_INT 29
40908: DOUBLE
40909: EQUAL
40910: IFTRUE 40914
40912: GO 40932
40914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40915: LD_ADDR_VAR 0 3
40919: PUSH
40920: LD_INT 13
40922: PUSH
40923: LD_INT 14
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: ST_TO_ADDR
40930: GO 41301
40932: LD_INT 31
40934: DOUBLE
40935: EQUAL
40936: IFTRUE 40940
40938: GO 40958
40940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40941: LD_ADDR_VAR 0 3
40945: PUSH
40946: LD_INT 13
40948: PUSH
40949: LD_INT 14
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: ST_TO_ADDR
40956: GO 41301
40958: LD_INT 26
40960: DOUBLE
40961: EQUAL
40962: IFTRUE 40966
40964: GO 40984
40966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40967: LD_ADDR_VAR 0 3
40971: PUSH
40972: LD_INT 13
40974: PUSH
40975: LD_INT 14
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: ST_TO_ADDR
40982: GO 41301
40984: LD_INT 42
40986: DOUBLE
40987: EQUAL
40988: IFTRUE 40992
40990: GO 41018
40992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40993: LD_ADDR_VAR 0 3
40997: PUSH
40998: LD_INT 21
41000: PUSH
41001: LD_INT 22
41003: PUSH
41004: LD_INT 23
41006: PUSH
41007: LD_INT 24
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: ST_TO_ADDR
41016: GO 41301
41018: LD_INT 43
41020: DOUBLE
41021: EQUAL
41022: IFTRUE 41026
41024: GO 41052
41026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41027: LD_ADDR_VAR 0 3
41031: PUSH
41032: LD_INT 21
41034: PUSH
41035: LD_INT 22
41037: PUSH
41038: LD_INT 23
41040: PUSH
41041: LD_INT 24
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: ST_TO_ADDR
41050: GO 41301
41052: LD_INT 44
41054: DOUBLE
41055: EQUAL
41056: IFTRUE 41060
41058: GO 41086
41060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_INT 21
41068: PUSH
41069: LD_INT 22
41071: PUSH
41072: LD_INT 23
41074: PUSH
41075: LD_INT 24
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: ST_TO_ADDR
41084: GO 41301
41086: LD_INT 45
41088: DOUBLE
41089: EQUAL
41090: IFTRUE 41094
41092: GO 41120
41094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41095: LD_ADDR_VAR 0 3
41099: PUSH
41100: LD_INT 21
41102: PUSH
41103: LD_INT 22
41105: PUSH
41106: LD_INT 23
41108: PUSH
41109: LD_INT 24
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: ST_TO_ADDR
41118: GO 41301
41120: LD_INT 49
41122: DOUBLE
41123: EQUAL
41124: IFTRUE 41128
41126: GO 41154
41128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41129: LD_ADDR_VAR 0 3
41133: PUSH
41134: LD_INT 21
41136: PUSH
41137: LD_INT 22
41139: PUSH
41140: LD_INT 23
41142: PUSH
41143: LD_INT 24
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: ST_TO_ADDR
41152: GO 41301
41154: LD_INT 51
41156: DOUBLE
41157: EQUAL
41158: IFTRUE 41162
41160: GO 41188
41162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41163: LD_ADDR_VAR 0 3
41167: PUSH
41168: LD_INT 21
41170: PUSH
41171: LD_INT 22
41173: PUSH
41174: LD_INT 23
41176: PUSH
41177: LD_INT 24
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: ST_TO_ADDR
41186: GO 41301
41188: LD_INT 52
41190: DOUBLE
41191: EQUAL
41192: IFTRUE 41196
41194: GO 41222
41196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_INT 21
41204: PUSH
41205: LD_INT 22
41207: PUSH
41208: LD_INT 23
41210: PUSH
41211: LD_INT 24
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
41220: GO 41301
41222: LD_INT 53
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41230
41228: GO 41248
41230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41231: LD_ADDR_VAR 0 3
41235: PUSH
41236: LD_INT 23
41238: PUSH
41239: LD_INT 24
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: ST_TO_ADDR
41246: GO 41301
41248: LD_INT 46
41250: DOUBLE
41251: EQUAL
41252: IFTRUE 41256
41254: GO 41274
41256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41257: LD_ADDR_VAR 0 3
41261: PUSH
41262: LD_INT 23
41264: PUSH
41265: LD_INT 24
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: ST_TO_ADDR
41272: GO 41301
41274: LD_INT 47
41276: DOUBLE
41277: EQUAL
41278: IFTRUE 41282
41280: GO 41300
41282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41283: LD_ADDR_VAR 0 3
41287: PUSH
41288: LD_INT 23
41290: PUSH
41291: LD_INT 24
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: ST_TO_ADDR
41298: GO 41301
41300: POP
// result := ( chassis in result ) ;
41301: LD_ADDR_VAR 0 3
41305: PUSH
41306: LD_VAR 0 1
41310: PUSH
41311: LD_VAR 0 3
41315: IN
41316: ST_TO_ADDR
// end ;
41317: LD_VAR 0 3
41321: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41322: LD_INT 0
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
// result := array ;
41331: LD_ADDR_VAR 0 5
41335: PUSH
41336: LD_VAR 0 1
41340: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41341: LD_VAR 0 1
41345: NOT
41346: PUSH
41347: LD_VAR 0 2
41351: NOT
41352: OR
41353: PUSH
41354: LD_VAR 0 3
41358: NOT
41359: OR
41360: PUSH
41361: LD_VAR 0 2
41365: PUSH
41366: LD_VAR 0 1
41370: GREATER
41371: OR
41372: PUSH
41373: LD_VAR 0 3
41377: PUSH
41378: LD_VAR 0 1
41382: GREATER
41383: OR
41384: IFFALSE 41388
// exit ;
41386: GO 41684
// if direction then
41388: LD_VAR 0 4
41392: IFFALSE 41456
// begin d := 1 ;
41394: LD_ADDR_VAR 0 9
41398: PUSH
41399: LD_INT 1
41401: ST_TO_ADDR
// if i_from > i_to then
41402: LD_VAR 0 2
41406: PUSH
41407: LD_VAR 0 3
41411: GREATER
41412: IFFALSE 41438
// length := ( array - i_from ) + i_to else
41414: LD_ADDR_VAR 0 11
41418: PUSH
41419: LD_VAR 0 1
41423: PUSH
41424: LD_VAR 0 2
41428: MINUS
41429: PUSH
41430: LD_VAR 0 3
41434: PLUS
41435: ST_TO_ADDR
41436: GO 41454
// length := i_to - i_from ;
41438: LD_ADDR_VAR 0 11
41442: PUSH
41443: LD_VAR 0 3
41447: PUSH
41448: LD_VAR 0 2
41452: MINUS
41453: ST_TO_ADDR
// end else
41454: GO 41517
// begin d := - 1 ;
41456: LD_ADDR_VAR 0 9
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: ST_TO_ADDR
// if i_from > i_to then
41465: LD_VAR 0 2
41469: PUSH
41470: LD_VAR 0 3
41474: GREATER
41475: IFFALSE 41495
// length := i_from - i_to else
41477: LD_ADDR_VAR 0 11
41481: PUSH
41482: LD_VAR 0 2
41486: PUSH
41487: LD_VAR 0 3
41491: MINUS
41492: ST_TO_ADDR
41493: GO 41517
// length := ( array - i_to ) + i_from ;
41495: LD_ADDR_VAR 0 11
41499: PUSH
41500: LD_VAR 0 1
41504: PUSH
41505: LD_VAR 0 3
41509: MINUS
41510: PUSH
41511: LD_VAR 0 2
41515: PLUS
41516: ST_TO_ADDR
// end ; if not length then
41517: LD_VAR 0 11
41521: NOT
41522: IFFALSE 41526
// exit ;
41524: GO 41684
// tmp := array ;
41526: LD_ADDR_VAR 0 10
41530: PUSH
41531: LD_VAR 0 1
41535: ST_TO_ADDR
// for i = 1 to length do
41536: LD_ADDR_VAR 0 6
41540: PUSH
41541: DOUBLE
41542: LD_INT 1
41544: DEC
41545: ST_TO_ADDR
41546: LD_VAR 0 11
41550: PUSH
41551: FOR_TO
41552: IFFALSE 41672
// begin for j = 1 to array do
41554: LD_ADDR_VAR 0 7
41558: PUSH
41559: DOUBLE
41560: LD_INT 1
41562: DEC
41563: ST_TO_ADDR
41564: LD_VAR 0 1
41568: PUSH
41569: FOR_TO
41570: IFFALSE 41658
// begin k := j + d ;
41572: LD_ADDR_VAR 0 8
41576: PUSH
41577: LD_VAR 0 7
41581: PUSH
41582: LD_VAR 0 9
41586: PLUS
41587: ST_TO_ADDR
// if k > array then
41588: LD_VAR 0 8
41592: PUSH
41593: LD_VAR 0 1
41597: GREATER
41598: IFFALSE 41608
// k := 1 ;
41600: LD_ADDR_VAR 0 8
41604: PUSH
41605: LD_INT 1
41607: ST_TO_ADDR
// if not k then
41608: LD_VAR 0 8
41612: NOT
41613: IFFALSE 41625
// k := array ;
41615: LD_ADDR_VAR 0 8
41619: PUSH
41620: LD_VAR 0 1
41624: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41625: LD_ADDR_VAR 0 10
41629: PUSH
41630: LD_VAR 0 10
41634: PPUSH
41635: LD_VAR 0 8
41639: PPUSH
41640: LD_VAR 0 1
41644: PUSH
41645: LD_VAR 0 7
41649: ARRAY
41650: PPUSH
41651: CALL_OW 1
41655: ST_TO_ADDR
// end ;
41656: GO 41569
41658: POP
41659: POP
// array := tmp ;
41660: LD_ADDR_VAR 0 1
41664: PUSH
41665: LD_VAR 0 10
41669: ST_TO_ADDR
// end ;
41670: GO 41551
41672: POP
41673: POP
// result := array ;
41674: LD_ADDR_VAR 0 5
41678: PUSH
41679: LD_VAR 0 1
41683: ST_TO_ADDR
// end ;
41684: LD_VAR 0 5
41688: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41689: LD_INT 0
41691: PPUSH
41692: PPUSH
// result := 0 ;
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_INT 0
41700: ST_TO_ADDR
// if not array or not value in array then
41701: LD_VAR 0 1
41705: NOT
41706: PUSH
41707: LD_VAR 0 2
41711: PUSH
41712: LD_VAR 0 1
41716: IN
41717: NOT
41718: OR
41719: IFFALSE 41723
// exit ;
41721: GO 41777
// for i = 1 to array do
41723: LD_ADDR_VAR 0 4
41727: PUSH
41728: DOUBLE
41729: LD_INT 1
41731: DEC
41732: ST_TO_ADDR
41733: LD_VAR 0 1
41737: PUSH
41738: FOR_TO
41739: IFFALSE 41775
// if value = array [ i ] then
41741: LD_VAR 0 2
41745: PUSH
41746: LD_VAR 0 1
41750: PUSH
41751: LD_VAR 0 4
41755: ARRAY
41756: EQUAL
41757: IFFALSE 41773
// begin result := i ;
41759: LD_ADDR_VAR 0 3
41763: PUSH
41764: LD_VAR 0 4
41768: ST_TO_ADDR
// exit ;
41769: POP
41770: POP
41771: GO 41777
// end ;
41773: GO 41738
41775: POP
41776: POP
// end ;
41777: LD_VAR 0 3
41781: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41782: LD_INT 0
41784: PPUSH
// vc_chassis := chassis ;
41785: LD_ADDR_OWVAR 37
41789: PUSH
41790: LD_VAR 0 1
41794: ST_TO_ADDR
// vc_engine := engine ;
41795: LD_ADDR_OWVAR 39
41799: PUSH
41800: LD_VAR 0 2
41804: ST_TO_ADDR
// vc_control := control ;
41805: LD_ADDR_OWVAR 38
41809: PUSH
41810: LD_VAR 0 3
41814: ST_TO_ADDR
// vc_weapon := weapon ;
41815: LD_ADDR_OWVAR 40
41819: PUSH
41820: LD_VAR 0 4
41824: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41825: LD_ADDR_OWVAR 41
41829: PUSH
41830: LD_VAR 0 5
41834: ST_TO_ADDR
// end ;
41835: LD_VAR 0 6
41839: RET
// export function WantPlant ( unit ) ; var task ; begin
41840: LD_INT 0
41842: PPUSH
41843: PPUSH
// result := false ;
41844: LD_ADDR_VAR 0 2
41848: PUSH
41849: LD_INT 0
41851: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: CALL_OW 437
41866: ST_TO_ADDR
// if task then
41867: LD_VAR 0 3
41871: IFFALSE 41899
// if task [ 1 ] [ 1 ] = p then
41873: LD_VAR 0 3
41877: PUSH
41878: LD_INT 1
41880: ARRAY
41881: PUSH
41882: LD_INT 1
41884: ARRAY
41885: PUSH
41886: LD_STRING p
41888: EQUAL
41889: IFFALSE 41899
// result := true ;
41891: LD_ADDR_VAR 0 2
41895: PUSH
41896: LD_INT 1
41898: ST_TO_ADDR
// end ;
41899: LD_VAR 0 2
41903: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41904: LD_INT 0
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
// if pos < 1 then
41910: LD_VAR 0 2
41914: PUSH
41915: LD_INT 1
41917: LESS
41918: IFFALSE 41922
// exit ;
41920: GO 42225
// if pos = 1 then
41922: LD_VAR 0 2
41926: PUSH
41927: LD_INT 1
41929: EQUAL
41930: IFFALSE 41963
// result := Replace ( arr , pos [ 1 ] , value ) else
41932: LD_ADDR_VAR 0 4
41936: PUSH
41937: LD_VAR 0 1
41941: PPUSH
41942: LD_VAR 0 2
41946: PUSH
41947: LD_INT 1
41949: ARRAY
41950: PPUSH
41951: LD_VAR 0 3
41955: PPUSH
41956: CALL_OW 1
41960: ST_TO_ADDR
41961: GO 42225
// begin tmp := arr ;
41963: LD_ADDR_VAR 0 6
41967: PUSH
41968: LD_VAR 0 1
41972: ST_TO_ADDR
// s_arr := [ tmp ] ;
41973: LD_ADDR_VAR 0 7
41977: PUSH
41978: LD_VAR 0 6
41982: PUSH
41983: EMPTY
41984: LIST
41985: ST_TO_ADDR
// for i = 1 to pos - 1 do
41986: LD_ADDR_VAR 0 5
41990: PUSH
41991: DOUBLE
41992: LD_INT 1
41994: DEC
41995: ST_TO_ADDR
41996: LD_VAR 0 2
42000: PUSH
42001: LD_INT 1
42003: MINUS
42004: PUSH
42005: FOR_TO
42006: IFFALSE 42051
// begin tmp := tmp [ pos [ i ] ] ;
42008: LD_ADDR_VAR 0 6
42012: PUSH
42013: LD_VAR 0 6
42017: PUSH
42018: LD_VAR 0 2
42022: PUSH
42023: LD_VAR 0 5
42027: ARRAY
42028: ARRAY
42029: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42030: LD_ADDR_VAR 0 7
42034: PUSH
42035: LD_VAR 0 7
42039: PUSH
42040: LD_VAR 0 6
42044: PUSH
42045: EMPTY
42046: LIST
42047: ADD
42048: ST_TO_ADDR
// end ;
42049: GO 42005
42051: POP
42052: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42053: LD_ADDR_VAR 0 6
42057: PUSH
42058: LD_VAR 0 6
42062: PPUSH
42063: LD_VAR 0 2
42067: PUSH
42068: LD_VAR 0 2
42072: ARRAY
42073: PPUSH
42074: LD_VAR 0 3
42078: PPUSH
42079: CALL_OW 1
42083: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42084: LD_ADDR_VAR 0 7
42088: PUSH
42089: LD_VAR 0 7
42093: PPUSH
42094: LD_VAR 0 7
42098: PPUSH
42099: LD_VAR 0 6
42103: PPUSH
42104: CALL_OW 1
42108: ST_TO_ADDR
// for i = s_arr downto 2 do
42109: LD_ADDR_VAR 0 5
42113: PUSH
42114: DOUBLE
42115: LD_VAR 0 7
42119: INC
42120: ST_TO_ADDR
42121: LD_INT 2
42123: PUSH
42124: FOR_DOWNTO
42125: IFFALSE 42209
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42127: LD_ADDR_VAR 0 6
42131: PUSH
42132: LD_VAR 0 7
42136: PUSH
42137: LD_VAR 0 5
42141: PUSH
42142: LD_INT 1
42144: MINUS
42145: ARRAY
42146: PPUSH
42147: LD_VAR 0 2
42151: PUSH
42152: LD_VAR 0 5
42156: PUSH
42157: LD_INT 1
42159: MINUS
42160: ARRAY
42161: PPUSH
42162: LD_VAR 0 7
42166: PUSH
42167: LD_VAR 0 5
42171: ARRAY
42172: PPUSH
42173: CALL_OW 1
42177: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42178: LD_ADDR_VAR 0 7
42182: PUSH
42183: LD_VAR 0 7
42187: PPUSH
42188: LD_VAR 0 5
42192: PUSH
42193: LD_INT 1
42195: MINUS
42196: PPUSH
42197: LD_VAR 0 6
42201: PPUSH
42202: CALL_OW 1
42206: ST_TO_ADDR
// end ;
42207: GO 42124
42209: POP
42210: POP
// result := s_arr [ 1 ] ;
42211: LD_ADDR_VAR 0 4
42215: PUSH
42216: LD_VAR 0 7
42220: PUSH
42221: LD_INT 1
42223: ARRAY
42224: ST_TO_ADDR
// end ; end ;
42225: LD_VAR 0 4
42229: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42230: LD_INT 0
42232: PPUSH
42233: PPUSH
// if not list then
42234: LD_VAR 0 1
42238: NOT
42239: IFFALSE 42243
// exit ;
42241: GO 42334
// i := list [ pos1 ] ;
42243: LD_ADDR_VAR 0 5
42247: PUSH
42248: LD_VAR 0 1
42252: PUSH
42253: LD_VAR 0 2
42257: ARRAY
42258: ST_TO_ADDR
// if not i then
42259: LD_VAR 0 5
42263: NOT
42264: IFFALSE 42268
// exit ;
42266: GO 42334
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42268: LD_ADDR_VAR 0 1
42272: PUSH
42273: LD_VAR 0 1
42277: PPUSH
42278: LD_VAR 0 2
42282: PPUSH
42283: LD_VAR 0 1
42287: PUSH
42288: LD_VAR 0 3
42292: ARRAY
42293: PPUSH
42294: CALL_OW 1
42298: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42299: LD_ADDR_VAR 0 1
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: LD_VAR 0 3
42313: PPUSH
42314: LD_VAR 0 5
42318: PPUSH
42319: CALL_OW 1
42323: ST_TO_ADDR
// result := list ;
42324: LD_ADDR_VAR 0 4
42328: PUSH
42329: LD_VAR 0 1
42333: ST_TO_ADDR
// end ;
42334: LD_VAR 0 4
42338: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42339: LD_INT 0
42341: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42342: LD_ADDR_VAR 0 5
42346: PUSH
42347: LD_VAR 0 1
42351: PPUSH
42352: CALL_OW 250
42356: PPUSH
42357: LD_VAR 0 1
42361: PPUSH
42362: CALL_OW 251
42366: PPUSH
42367: LD_VAR 0 2
42371: PPUSH
42372: LD_VAR 0 3
42376: PPUSH
42377: LD_VAR 0 4
42381: PPUSH
42382: CALL 42760 0 5
42386: ST_TO_ADDR
// end ;
42387: LD_VAR 0 5
42391: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
42392: LD_INT 0
42394: PPUSH
42395: PPUSH
42396: PPUSH
42397: PPUSH
// if not list or not unit then
42398: LD_VAR 0 2
42402: NOT
42403: PUSH
42404: LD_VAR 0 1
42408: NOT
42409: OR
42410: IFFALSE 42414
// exit ;
42412: GO 42755
// result := [ ] ;
42414: LD_ADDR_VAR 0 5
42418: PUSH
42419: EMPTY
42420: ST_TO_ADDR
// for i in list do
42421: LD_ADDR_VAR 0 6
42425: PUSH
42426: LD_VAR 0 2
42430: PUSH
42431: FOR_IN
42432: IFFALSE 42650
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42434: LD_ADDR_VAR 0 8
42438: PUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: LD_VAR 0 6
42448: PUSH
42449: LD_INT 1
42451: ARRAY
42452: PPUSH
42453: LD_VAR 0 6
42457: PUSH
42458: LD_INT 2
42460: ARRAY
42461: PPUSH
42462: CALL_OW 297
42466: ST_TO_ADDR
// if not Count ( result ) then
42467: LD_VAR 0 5
42471: PPUSH
42472: CALL 39044 0 1
42476: NOT
42477: IFFALSE 42510
// begin result := Join ( result , [ i , tmp ] ) ;
42479: LD_ADDR_VAR 0 5
42483: PUSH
42484: LD_VAR 0 5
42488: PPUSH
42489: LD_VAR 0 6
42493: PUSH
42494: LD_VAR 0 8
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PPUSH
42503: CALL 74653 0 2
42507: ST_TO_ADDR
// continue ;
42508: GO 42431
// end ; if result [ result ] [ 2 ] <= tmp then
42510: LD_VAR 0 5
42514: PUSH
42515: LD_VAR 0 5
42519: ARRAY
42520: PUSH
42521: LD_INT 2
42523: ARRAY
42524: PUSH
42525: LD_VAR 0 8
42529: LESSEQUAL
42530: IFFALSE 42563
// result := Join ( result , [ i , tmp ] ) else
42532: LD_ADDR_VAR 0 5
42536: PUSH
42537: LD_VAR 0 5
42541: PPUSH
42542: LD_VAR 0 6
42546: PUSH
42547: LD_VAR 0 8
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PPUSH
42556: CALL 74653 0 2
42560: ST_TO_ADDR
42561: GO 42648
// begin for j := 1 to Count ( result ) do
42563: LD_ADDR_VAR 0 7
42567: PUSH
42568: DOUBLE
42569: LD_INT 1
42571: DEC
42572: ST_TO_ADDR
42573: LD_VAR 0 5
42577: PPUSH
42578: CALL 39044 0 1
42582: PUSH
42583: FOR_TO
42584: IFFALSE 42646
// begin if tmp < result [ j ] [ 2 ] then
42586: LD_VAR 0 8
42590: PUSH
42591: LD_VAR 0 5
42595: PUSH
42596: LD_VAR 0 7
42600: ARRAY
42601: PUSH
42602: LD_INT 2
42604: ARRAY
42605: LESS
42606: IFFALSE 42644
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42608: LD_ADDR_VAR 0 5
42612: PUSH
42613: LD_VAR 0 5
42617: PPUSH
42618: LD_VAR 0 7
42622: PPUSH
42623: LD_VAR 0 6
42627: PUSH
42628: LD_VAR 0 8
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PPUSH
42637: CALL_OW 2
42641: ST_TO_ADDR
// break ;
42642: GO 42646
// end ; end ;
42644: GO 42583
42646: POP
42647: POP
// end ; end ;
42648: GO 42431
42650: POP
42651: POP
// if result and not asc then
42652: LD_VAR 0 5
42656: PUSH
42657: LD_VAR 0 3
42661: NOT
42662: AND
42663: IFFALSE 42680
// result := ReverseArray ( result ) ;
42665: LD_ADDR_VAR 0 5
42669: PUSH
42670: LD_VAR 0 5
42674: PPUSH
42675: CALL 69920 0 1
42679: ST_TO_ADDR
// tmp := [ ] ;
42680: LD_ADDR_VAR 0 8
42684: PUSH
42685: EMPTY
42686: ST_TO_ADDR
// if mode then
42687: LD_VAR 0 4
42691: IFFALSE 42755
// begin for i := 1 to result do
42693: LD_ADDR_VAR 0 6
42697: PUSH
42698: DOUBLE
42699: LD_INT 1
42701: DEC
42702: ST_TO_ADDR
42703: LD_VAR 0 5
42707: PUSH
42708: FOR_TO
42709: IFFALSE 42743
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42711: LD_ADDR_VAR 0 8
42715: PUSH
42716: LD_VAR 0 8
42720: PPUSH
42721: LD_VAR 0 5
42725: PUSH
42726: LD_VAR 0 6
42730: ARRAY
42731: PUSH
42732: LD_INT 1
42734: ARRAY
42735: PPUSH
42736: CALL 74653 0 2
42740: ST_TO_ADDR
42741: GO 42708
42743: POP
42744: POP
// result := tmp ;
42745: LD_ADDR_VAR 0 5
42749: PUSH
42750: LD_VAR 0 8
42754: ST_TO_ADDR
// end ; end ;
42755: LD_VAR 0 5
42759: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42760: LD_INT 0
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
// if not list then
42766: LD_VAR 0 3
42770: NOT
42771: IFFALSE 42775
// exit ;
42773: GO 43163
// result := [ ] ;
42775: LD_ADDR_VAR 0 6
42779: PUSH
42780: EMPTY
42781: ST_TO_ADDR
// for i in list do
42782: LD_ADDR_VAR 0 7
42786: PUSH
42787: LD_VAR 0 3
42791: PUSH
42792: FOR_IN
42793: IFFALSE 42995
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42795: LD_ADDR_VAR 0 9
42799: PUSH
42800: LD_VAR 0 7
42804: PPUSH
42805: LD_VAR 0 1
42809: PPUSH
42810: LD_VAR 0 2
42814: PPUSH
42815: CALL_OW 297
42819: ST_TO_ADDR
// if not result then
42820: LD_VAR 0 6
42824: NOT
42825: IFFALSE 42851
// result := [ [ i , tmp ] ] else
42827: LD_ADDR_VAR 0 6
42831: PUSH
42832: LD_VAR 0 7
42836: PUSH
42837: LD_VAR 0 9
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: ST_TO_ADDR
42849: GO 42993
// begin if result [ result ] [ 2 ] <= tmp then
42851: LD_VAR 0 6
42855: PUSH
42856: LD_VAR 0 6
42860: ARRAY
42861: PUSH
42862: LD_INT 2
42864: ARRAY
42865: PUSH
42866: LD_VAR 0 9
42870: LESSEQUAL
42871: IFFALSE 42913
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42873: LD_ADDR_VAR 0 6
42877: PUSH
42878: LD_VAR 0 6
42882: PPUSH
42883: LD_VAR 0 6
42887: PUSH
42888: LD_INT 1
42890: PLUS
42891: PPUSH
42892: LD_VAR 0 7
42896: PUSH
42897: LD_VAR 0 9
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PPUSH
42906: CALL_OW 2
42910: ST_TO_ADDR
42911: GO 42993
// for j := 1 to result do
42913: LD_ADDR_VAR 0 8
42917: PUSH
42918: DOUBLE
42919: LD_INT 1
42921: DEC
42922: ST_TO_ADDR
42923: LD_VAR 0 6
42927: PUSH
42928: FOR_TO
42929: IFFALSE 42991
// begin if tmp < result [ j ] [ 2 ] then
42931: LD_VAR 0 9
42935: PUSH
42936: LD_VAR 0 6
42940: PUSH
42941: LD_VAR 0 8
42945: ARRAY
42946: PUSH
42947: LD_INT 2
42949: ARRAY
42950: LESS
42951: IFFALSE 42989
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42953: LD_ADDR_VAR 0 6
42957: PUSH
42958: LD_VAR 0 6
42962: PPUSH
42963: LD_VAR 0 8
42967: PPUSH
42968: LD_VAR 0 7
42972: PUSH
42973: LD_VAR 0 9
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PPUSH
42982: CALL_OW 2
42986: ST_TO_ADDR
// break ;
42987: GO 42991
// end ; end ;
42989: GO 42928
42991: POP
42992: POP
// end ; end ;
42993: GO 42792
42995: POP
42996: POP
// if result and not asc then
42997: LD_VAR 0 6
43001: PUSH
43002: LD_VAR 0 4
43006: NOT
43007: AND
43008: IFFALSE 43083
// begin tmp := result ;
43010: LD_ADDR_VAR 0 9
43014: PUSH
43015: LD_VAR 0 6
43019: ST_TO_ADDR
// for i = tmp downto 1 do
43020: LD_ADDR_VAR 0 7
43024: PUSH
43025: DOUBLE
43026: LD_VAR 0 9
43030: INC
43031: ST_TO_ADDR
43032: LD_INT 1
43034: PUSH
43035: FOR_DOWNTO
43036: IFFALSE 43081
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43038: LD_ADDR_VAR 0 6
43042: PUSH
43043: LD_VAR 0 6
43047: PPUSH
43048: LD_VAR 0 9
43052: PUSH
43053: LD_VAR 0 7
43057: MINUS
43058: PUSH
43059: LD_INT 1
43061: PLUS
43062: PPUSH
43063: LD_VAR 0 9
43067: PUSH
43068: LD_VAR 0 7
43072: ARRAY
43073: PPUSH
43074: CALL_OW 1
43078: ST_TO_ADDR
43079: GO 43035
43081: POP
43082: POP
// end ; tmp := [ ] ;
43083: LD_ADDR_VAR 0 9
43087: PUSH
43088: EMPTY
43089: ST_TO_ADDR
// if mode then
43090: LD_VAR 0 5
43094: IFFALSE 43163
// begin for i = 1 to result do
43096: LD_ADDR_VAR 0 7
43100: PUSH
43101: DOUBLE
43102: LD_INT 1
43104: DEC
43105: ST_TO_ADDR
43106: LD_VAR 0 6
43110: PUSH
43111: FOR_TO
43112: IFFALSE 43151
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43114: LD_ADDR_VAR 0 9
43118: PUSH
43119: LD_VAR 0 9
43123: PPUSH
43124: LD_VAR 0 7
43128: PPUSH
43129: LD_VAR 0 6
43133: PUSH
43134: LD_VAR 0 7
43138: ARRAY
43139: PUSH
43140: LD_INT 1
43142: ARRAY
43143: PPUSH
43144: CALL_OW 1
43148: ST_TO_ADDR
43149: GO 43111
43151: POP
43152: POP
// result := tmp ;
43153: LD_ADDR_VAR 0 6
43157: PUSH
43158: LD_VAR 0 9
43162: ST_TO_ADDR
// end ; end ;
43163: LD_VAR 0 6
43167: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43168: LD_INT 0
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
43175: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43176: LD_ADDR_VAR 0 5
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: EMPTY
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
// if not x or not y then
43198: LD_VAR 0 2
43202: NOT
43203: PUSH
43204: LD_VAR 0 3
43208: NOT
43209: OR
43210: IFFALSE 43214
// exit ;
43212: GO 44864
// if not range then
43214: LD_VAR 0 4
43218: NOT
43219: IFFALSE 43229
// range := 10 ;
43221: LD_ADDR_VAR 0 4
43225: PUSH
43226: LD_INT 10
43228: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43229: LD_ADDR_VAR 0 8
43233: PUSH
43234: LD_INT 81
43236: PUSH
43237: LD_VAR 0 1
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 92
43248: PUSH
43249: LD_VAR 0 2
43253: PUSH
43254: LD_VAR 0 3
43258: PUSH
43259: LD_VAR 0 4
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: LD_INT 21
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: PPUSH
43292: CALL_OW 69
43296: ST_TO_ADDR
// if not tmp then
43297: LD_VAR 0 8
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 44864
// for i in tmp do
43306: LD_ADDR_VAR 0 6
43310: PUSH
43311: LD_VAR 0 8
43315: PUSH
43316: FOR_IN
43317: IFFALSE 44839
// begin points := [ 0 , 0 , 0 ] ;
43319: LD_ADDR_VAR 0 9
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: ST_TO_ADDR
// bpoints := 1 ;
43338: LD_ADDR_VAR 0 10
43342: PUSH
43343: LD_INT 1
43345: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43346: LD_VAR 0 6
43350: PPUSH
43351: CALL_OW 247
43355: PUSH
43356: LD_INT 1
43358: DOUBLE
43359: EQUAL
43360: IFTRUE 43364
43362: GO 43942
43364: POP
// begin if GetClass ( i ) = 1 then
43365: LD_VAR 0 6
43369: PPUSH
43370: CALL_OW 257
43374: PUSH
43375: LD_INT 1
43377: EQUAL
43378: IFFALSE 43399
// points := [ 10 , 5 , 3 ] ;
43380: LD_ADDR_VAR 0 9
43384: PUSH
43385: LD_INT 10
43387: PUSH
43388: LD_INT 5
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43399: LD_VAR 0 6
43403: PPUSH
43404: CALL_OW 257
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 3
43414: PUSH
43415: LD_INT 4
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: IN
43423: IFFALSE 43444
// points := [ 3 , 2 , 1 ] ;
43425: LD_ADDR_VAR 0 9
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43444: LD_VAR 0 6
43448: PPUSH
43449: CALL_OW 257
43453: PUSH
43454: LD_INT 5
43456: EQUAL
43457: IFFALSE 43478
// points := [ 130 , 5 , 2 ] ;
43459: LD_ADDR_VAR 0 9
43463: PUSH
43464: LD_INT 130
43466: PUSH
43467: LD_INT 5
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43478: LD_VAR 0 6
43482: PPUSH
43483: CALL_OW 257
43487: PUSH
43488: LD_INT 8
43490: EQUAL
43491: IFFALSE 43512
// points := [ 35 , 35 , 30 ] ;
43493: LD_ADDR_VAR 0 9
43497: PUSH
43498: LD_INT 35
43500: PUSH
43501: LD_INT 35
43503: PUSH
43504: LD_INT 30
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43512: LD_VAR 0 6
43516: PPUSH
43517: CALL_OW 257
43521: PUSH
43522: LD_INT 9
43524: EQUAL
43525: IFFALSE 43546
// points := [ 20 , 55 , 40 ] ;
43527: LD_ADDR_VAR 0 9
43531: PUSH
43532: LD_INT 20
43534: PUSH
43535: LD_INT 55
43537: PUSH
43538: LD_INT 40
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: LIST
43545: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43546: LD_VAR 0 6
43550: PPUSH
43551: CALL_OW 257
43555: PUSH
43556: LD_INT 12
43558: PUSH
43559: LD_INT 16
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: IN
43566: IFFALSE 43587
// points := [ 5 , 3 , 2 ] ;
43568: LD_ADDR_VAR 0 9
43572: PUSH
43573: LD_INT 5
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43587: LD_VAR 0 6
43591: PPUSH
43592: CALL_OW 257
43596: PUSH
43597: LD_INT 17
43599: EQUAL
43600: IFFALSE 43621
// points := [ 100 , 50 , 75 ] ;
43602: LD_ADDR_VAR 0 9
43606: PUSH
43607: LD_INT 100
43609: PUSH
43610: LD_INT 50
43612: PUSH
43613: LD_INT 75
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: LIST
43620: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43621: LD_VAR 0 6
43625: PPUSH
43626: CALL_OW 257
43630: PUSH
43631: LD_INT 15
43633: EQUAL
43634: IFFALSE 43655
// points := [ 10 , 5 , 3 ] ;
43636: LD_ADDR_VAR 0 9
43640: PUSH
43641: LD_INT 10
43643: PUSH
43644: LD_INT 5
43646: PUSH
43647: LD_INT 3
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43655: LD_VAR 0 6
43659: PPUSH
43660: CALL_OW 257
43664: PUSH
43665: LD_INT 14
43667: EQUAL
43668: IFFALSE 43689
// points := [ 10 , 0 , 0 ] ;
43670: LD_ADDR_VAR 0 9
43674: PUSH
43675: LD_INT 10
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43689: LD_VAR 0 6
43693: PPUSH
43694: CALL_OW 257
43698: PUSH
43699: LD_INT 11
43701: EQUAL
43702: IFFALSE 43723
// points := [ 30 , 10 , 5 ] ;
43704: LD_ADDR_VAR 0 9
43708: PUSH
43709: LD_INT 30
43711: PUSH
43712: LD_INT 10
43714: PUSH
43715: LD_INT 5
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43723: LD_VAR 0 1
43727: PPUSH
43728: LD_INT 5
43730: PPUSH
43731: CALL_OW 321
43735: PUSH
43736: LD_INT 2
43738: EQUAL
43739: IFFALSE 43756
// bpoints := bpoints * 1.8 ;
43741: LD_ADDR_VAR 0 10
43745: PUSH
43746: LD_VAR 0 10
43750: PUSH
43751: LD_REAL  1.80000000000000E+0000
43754: MUL
43755: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43756: LD_VAR 0 6
43760: PPUSH
43761: CALL_OW 257
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: LD_INT 4
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: IN
43784: PUSH
43785: LD_VAR 0 1
43789: PPUSH
43790: LD_INT 51
43792: PPUSH
43793: CALL_OW 321
43797: PUSH
43798: LD_INT 2
43800: EQUAL
43801: AND
43802: IFFALSE 43819
// bpoints := bpoints * 1.2 ;
43804: LD_ADDR_VAR 0 10
43808: PUSH
43809: LD_VAR 0 10
43813: PUSH
43814: LD_REAL  1.20000000000000E+0000
43817: MUL
43818: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43819: LD_VAR 0 6
43823: PPUSH
43824: CALL_OW 257
43828: PUSH
43829: LD_INT 5
43831: PUSH
43832: LD_INT 7
43834: PUSH
43835: LD_INT 9
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: IN
43843: PUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: LD_INT 52
43851: PPUSH
43852: CALL_OW 321
43856: PUSH
43857: LD_INT 2
43859: EQUAL
43860: AND
43861: IFFALSE 43878
// bpoints := bpoints * 1.5 ;
43863: LD_ADDR_VAR 0 10
43867: PUSH
43868: LD_VAR 0 10
43872: PUSH
43873: LD_REAL  1.50000000000000E+0000
43876: MUL
43877: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43878: LD_VAR 0 1
43882: PPUSH
43883: LD_INT 66
43885: PPUSH
43886: CALL_OW 321
43890: PUSH
43891: LD_INT 2
43893: EQUAL
43894: IFFALSE 43911
// bpoints := bpoints * 1.1 ;
43896: LD_ADDR_VAR 0 10
43900: PUSH
43901: LD_VAR 0 10
43905: PUSH
43906: LD_REAL  1.10000000000000E+0000
43909: MUL
43910: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43911: LD_ADDR_VAR 0 10
43915: PUSH
43916: LD_VAR 0 10
43920: PUSH
43921: LD_VAR 0 6
43925: PPUSH
43926: LD_INT 1
43928: PPUSH
43929: CALL_OW 259
43933: PUSH
43934: LD_REAL  1.15000000000000E+0000
43937: MUL
43938: MUL
43939: ST_TO_ADDR
// end ; unit_vehicle :
43940: GO 44768
43942: LD_INT 2
43944: DOUBLE
43945: EQUAL
43946: IFTRUE 43950
43948: GO 44756
43950: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43951: LD_VAR 0 6
43955: PPUSH
43956: CALL_OW 264
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 42
43966: PUSH
43967: LD_INT 24
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: IN
43975: IFFALSE 43996
// points := [ 25 , 5 , 3 ] ;
43977: LD_ADDR_VAR 0 9
43981: PUSH
43982: LD_INT 25
43984: PUSH
43985: LD_INT 5
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43996: LD_VAR 0 6
44000: PPUSH
44001: CALL_OW 264
44005: PUSH
44006: LD_INT 4
44008: PUSH
44009: LD_INT 43
44011: PUSH
44012: LD_INT 25
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: IN
44020: IFFALSE 44041
// points := [ 40 , 15 , 5 ] ;
44022: LD_ADDR_VAR 0 9
44026: PUSH
44027: LD_INT 40
44029: PUSH
44030: LD_INT 15
44032: PUSH
44033: LD_INT 5
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44041: LD_VAR 0 6
44045: PPUSH
44046: CALL_OW 264
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: LD_INT 23
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: IN
44061: IFFALSE 44082
// points := [ 7 , 25 , 8 ] ;
44063: LD_ADDR_VAR 0 9
44067: PUSH
44068: LD_INT 7
44070: PUSH
44071: LD_INT 25
44073: PUSH
44074: LD_INT 8
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44082: LD_VAR 0 6
44086: PPUSH
44087: CALL_OW 264
44091: PUSH
44092: LD_INT 5
44094: PUSH
44095: LD_INT 27
44097: PUSH
44098: LD_INT 44
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: IN
44106: IFFALSE 44127
// points := [ 14 , 50 , 16 ] ;
44108: LD_ADDR_VAR 0 9
44112: PUSH
44113: LD_INT 14
44115: PUSH
44116: LD_INT 50
44118: PUSH
44119: LD_INT 16
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44127: LD_VAR 0 6
44131: PPUSH
44132: CALL_OW 264
44136: PUSH
44137: LD_INT 6
44139: PUSH
44140: LD_INT 46
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: IN
44147: IFFALSE 44168
// points := [ 32 , 120 , 70 ] ;
44149: LD_ADDR_VAR 0 9
44153: PUSH
44154: LD_INT 32
44156: PUSH
44157: LD_INT 120
44159: PUSH
44160: LD_INT 70
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: LIST
44167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44168: LD_VAR 0 6
44172: PPUSH
44173: CALL_OW 264
44177: PUSH
44178: LD_INT 7
44180: PUSH
44181: LD_INT 28
44183: PUSH
44184: LD_INT 45
44186: PUSH
44187: LD_INT 92
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: IN
44196: IFFALSE 44217
// points := [ 35 , 20 , 45 ] ;
44198: LD_ADDR_VAR 0 9
44202: PUSH
44203: LD_INT 35
44205: PUSH
44206: LD_INT 20
44208: PUSH
44209: LD_INT 45
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44217: LD_VAR 0 6
44221: PPUSH
44222: CALL_OW 264
44226: PUSH
44227: LD_INT 47
44229: PUSH
44230: EMPTY
44231: LIST
44232: IN
44233: IFFALSE 44254
// points := [ 67 , 45 , 75 ] ;
44235: LD_ADDR_VAR 0 9
44239: PUSH
44240: LD_INT 67
44242: PUSH
44243: LD_INT 45
44245: PUSH
44246: LD_INT 75
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44254: LD_VAR 0 6
44258: PPUSH
44259: CALL_OW 264
44263: PUSH
44264: LD_INT 26
44266: PUSH
44267: EMPTY
44268: LIST
44269: IN
44270: IFFALSE 44291
// points := [ 120 , 30 , 80 ] ;
44272: LD_ADDR_VAR 0 9
44276: PUSH
44277: LD_INT 120
44279: PUSH
44280: LD_INT 30
44282: PUSH
44283: LD_INT 80
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44291: LD_VAR 0 6
44295: PPUSH
44296: CALL_OW 264
44300: PUSH
44301: LD_INT 22
44303: PUSH
44304: EMPTY
44305: LIST
44306: IN
44307: IFFALSE 44328
// points := [ 40 , 1 , 1 ] ;
44309: LD_ADDR_VAR 0 9
44313: PUSH
44314: LD_INT 40
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44328: LD_VAR 0 6
44332: PPUSH
44333: CALL_OW 264
44337: PUSH
44338: LD_INT 29
44340: PUSH
44341: EMPTY
44342: LIST
44343: IN
44344: IFFALSE 44365
// points := [ 70 , 200 , 400 ] ;
44346: LD_ADDR_VAR 0 9
44350: PUSH
44351: LD_INT 70
44353: PUSH
44354: LD_INT 200
44356: PUSH
44357: LD_INT 400
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44365: LD_VAR 0 6
44369: PPUSH
44370: CALL_OW 264
44374: PUSH
44375: LD_INT 14
44377: PUSH
44378: LD_INT 53
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: IN
44385: IFFALSE 44406
// points := [ 40 , 10 , 20 ] ;
44387: LD_ADDR_VAR 0 9
44391: PUSH
44392: LD_INT 40
44394: PUSH
44395: LD_INT 10
44397: PUSH
44398: LD_INT 20
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44406: LD_VAR 0 6
44410: PPUSH
44411: CALL_OW 264
44415: PUSH
44416: LD_INT 9
44418: PUSH
44419: EMPTY
44420: LIST
44421: IN
44422: IFFALSE 44443
// points := [ 5 , 70 , 20 ] ;
44424: LD_ADDR_VAR 0 9
44428: PUSH
44429: LD_INT 5
44431: PUSH
44432: LD_INT 70
44434: PUSH
44435: LD_INT 20
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: LIST
44442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44443: LD_VAR 0 6
44447: PPUSH
44448: CALL_OW 264
44452: PUSH
44453: LD_INT 10
44455: PUSH
44456: EMPTY
44457: LIST
44458: IN
44459: IFFALSE 44480
// points := [ 35 , 110 , 70 ] ;
44461: LD_ADDR_VAR 0 9
44465: PUSH
44466: LD_INT 35
44468: PUSH
44469: LD_INT 110
44471: PUSH
44472: LD_INT 70
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44480: LD_VAR 0 6
44484: PPUSH
44485: CALL_OW 265
44489: PUSH
44490: LD_INT 25
44492: EQUAL
44493: IFFALSE 44514
// points := [ 80 , 65 , 100 ] ;
44495: LD_ADDR_VAR 0 9
44499: PUSH
44500: LD_INT 80
44502: PUSH
44503: LD_INT 65
44505: PUSH
44506: LD_INT 100
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44514: LD_VAR 0 6
44518: PPUSH
44519: CALL_OW 263
44523: PUSH
44524: LD_INT 1
44526: EQUAL
44527: IFFALSE 44562
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44529: LD_ADDR_VAR 0 10
44533: PUSH
44534: LD_VAR 0 10
44538: PUSH
44539: LD_VAR 0 6
44543: PPUSH
44544: CALL_OW 311
44548: PPUSH
44549: LD_INT 3
44551: PPUSH
44552: CALL_OW 259
44556: PUSH
44557: LD_INT 4
44559: MUL
44560: MUL
44561: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44562: LD_VAR 0 6
44566: PPUSH
44567: CALL_OW 263
44571: PUSH
44572: LD_INT 2
44574: EQUAL
44575: IFFALSE 44626
// begin j := IsControledBy ( i ) ;
44577: LD_ADDR_VAR 0 7
44581: PUSH
44582: LD_VAR 0 6
44586: PPUSH
44587: CALL_OW 312
44591: ST_TO_ADDR
// if j then
44592: LD_VAR 0 7
44596: IFFALSE 44626
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44598: LD_ADDR_VAR 0 10
44602: PUSH
44603: LD_VAR 0 10
44607: PUSH
44608: LD_VAR 0 7
44612: PPUSH
44613: LD_INT 3
44615: PPUSH
44616: CALL_OW 259
44620: PUSH
44621: LD_INT 3
44623: MUL
44624: MUL
44625: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44626: LD_VAR 0 6
44630: PPUSH
44631: CALL_OW 264
44635: PUSH
44636: LD_INT 5
44638: PUSH
44639: LD_INT 6
44641: PUSH
44642: LD_INT 46
44644: PUSH
44645: LD_INT 44
44647: PUSH
44648: LD_INT 47
44650: PUSH
44651: LD_INT 45
44653: PUSH
44654: LD_INT 28
44656: PUSH
44657: LD_INT 7
44659: PUSH
44660: LD_INT 27
44662: PUSH
44663: LD_INT 29
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: IN
44678: PUSH
44679: LD_VAR 0 1
44683: PPUSH
44684: LD_INT 52
44686: PPUSH
44687: CALL_OW 321
44691: PUSH
44692: LD_INT 2
44694: EQUAL
44695: AND
44696: IFFALSE 44713
// bpoints := bpoints * 1.2 ;
44698: LD_ADDR_VAR 0 10
44702: PUSH
44703: LD_VAR 0 10
44707: PUSH
44708: LD_REAL  1.20000000000000E+0000
44711: MUL
44712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44713: LD_VAR 0 6
44717: PPUSH
44718: CALL_OW 264
44722: PUSH
44723: LD_INT 6
44725: PUSH
44726: LD_INT 46
44728: PUSH
44729: LD_INT 47
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: IN
44737: IFFALSE 44754
// bpoints := bpoints * 1.2 ;
44739: LD_ADDR_VAR 0 10
44743: PUSH
44744: LD_VAR 0 10
44748: PUSH
44749: LD_REAL  1.20000000000000E+0000
44752: MUL
44753: ST_TO_ADDR
// end ; unit_building :
44754: GO 44768
44756: LD_INT 3
44758: DOUBLE
44759: EQUAL
44760: IFTRUE 44764
44762: GO 44767
44764: POP
// ; end ;
44765: GO 44768
44767: POP
// for j = 1 to 3 do
44768: LD_ADDR_VAR 0 7
44772: PUSH
44773: DOUBLE
44774: LD_INT 1
44776: DEC
44777: ST_TO_ADDR
44778: LD_INT 3
44780: PUSH
44781: FOR_TO
44782: IFFALSE 44835
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44784: LD_ADDR_VAR 0 5
44788: PUSH
44789: LD_VAR 0 5
44793: PPUSH
44794: LD_VAR 0 7
44798: PPUSH
44799: LD_VAR 0 5
44803: PUSH
44804: LD_VAR 0 7
44808: ARRAY
44809: PUSH
44810: LD_VAR 0 9
44814: PUSH
44815: LD_VAR 0 7
44819: ARRAY
44820: PUSH
44821: LD_VAR 0 10
44825: MUL
44826: PLUS
44827: PPUSH
44828: CALL_OW 1
44832: ST_TO_ADDR
44833: GO 44781
44835: POP
44836: POP
// end ;
44837: GO 43316
44839: POP
44840: POP
// result := Replace ( result , 4 , tmp ) ;
44841: LD_ADDR_VAR 0 5
44845: PUSH
44846: LD_VAR 0 5
44850: PPUSH
44851: LD_INT 4
44853: PPUSH
44854: LD_VAR 0 8
44858: PPUSH
44859: CALL_OW 1
44863: ST_TO_ADDR
// end ;
44864: LD_VAR 0 5
44868: RET
// export function DangerAtRange ( unit , range ) ; begin
44869: LD_INT 0
44871: PPUSH
// if not unit then
44872: LD_VAR 0 1
44876: NOT
44877: IFFALSE 44881
// exit ;
44879: GO 44926
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_VAR 0 1
44890: PPUSH
44891: CALL_OW 255
44895: PPUSH
44896: LD_VAR 0 1
44900: PPUSH
44901: CALL_OW 250
44905: PPUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: CALL_OW 251
44915: PPUSH
44916: LD_VAR 0 2
44920: PPUSH
44921: CALL 43168 0 4
44925: ST_TO_ADDR
// end ;
44926: LD_VAR 0 3
44930: RET
// export function DangerInArea ( side , area ) ; begin
44931: LD_INT 0
44933: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44934: LD_ADDR_VAR 0 3
44938: PUSH
44939: LD_VAR 0 2
44943: PPUSH
44944: LD_INT 81
44946: PUSH
44947: LD_VAR 0 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PPUSH
44956: CALL_OW 70
44960: ST_TO_ADDR
// end ;
44961: LD_VAR 0 3
44965: RET
// export function IsExtension ( b ) ; begin
44966: LD_INT 0
44968: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44969: LD_ADDR_VAR 0 2
44973: PUSH
44974: LD_VAR 0 1
44978: PUSH
44979: LD_INT 23
44981: PUSH
44982: LD_INT 20
44984: PUSH
44985: LD_INT 22
44987: PUSH
44988: LD_INT 17
44990: PUSH
44991: LD_INT 24
44993: PUSH
44994: LD_INT 21
44996: PUSH
44997: LD_INT 19
44999: PUSH
45000: LD_INT 16
45002: PUSH
45003: LD_INT 25
45005: PUSH
45006: LD_INT 18
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: IN
45021: ST_TO_ADDR
// end ;
45022: LD_VAR 0 2
45026: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45027: LD_INT 0
45029: PPUSH
45030: PPUSH
45031: PPUSH
// result := [ ] ;
45032: LD_ADDR_VAR 0 4
45036: PUSH
45037: EMPTY
45038: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45039: LD_ADDR_VAR 0 5
45043: PUSH
45044: LD_VAR 0 2
45048: PPUSH
45049: LD_INT 21
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PPUSH
45059: CALL_OW 70
45063: ST_TO_ADDR
// if not tmp then
45064: LD_VAR 0 5
45068: NOT
45069: IFFALSE 45073
// exit ;
45071: GO 45137
// if checkLink then
45073: LD_VAR 0 3
45077: IFFALSE 45127
// begin for i in tmp do
45079: LD_ADDR_VAR 0 6
45083: PUSH
45084: LD_VAR 0 5
45088: PUSH
45089: FOR_IN
45090: IFFALSE 45125
// if GetBase ( i ) <> base then
45092: LD_VAR 0 6
45096: PPUSH
45097: CALL_OW 274
45101: PUSH
45102: LD_VAR 0 1
45106: NONEQUAL
45107: IFFALSE 45123
// ComLinkToBase ( base , i ) ;
45109: LD_VAR 0 1
45113: PPUSH
45114: LD_VAR 0 6
45118: PPUSH
45119: CALL_OW 169
45123: GO 45089
45125: POP
45126: POP
// end ; result := tmp ;
45127: LD_ADDR_VAR 0 4
45131: PUSH
45132: LD_VAR 0 5
45136: ST_TO_ADDR
// end ;
45137: LD_VAR 0 4
45141: RET
// export function ComComplete ( units , b ) ; var i ; begin
45142: LD_INT 0
45144: PPUSH
45145: PPUSH
// if not units then
45146: LD_VAR 0 1
45150: NOT
45151: IFFALSE 45155
// exit ;
45153: GO 45245
// for i in units do
45155: LD_ADDR_VAR 0 4
45159: PUSH
45160: LD_VAR 0 1
45164: PUSH
45165: FOR_IN
45166: IFFALSE 45243
// if BuildingStatus ( b ) = bs_build then
45168: LD_VAR 0 2
45172: PPUSH
45173: CALL_OW 461
45177: PUSH
45178: LD_INT 1
45180: EQUAL
45181: IFFALSE 45241
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45183: LD_VAR 0 4
45187: PPUSH
45188: LD_STRING h
45190: PUSH
45191: LD_VAR 0 2
45195: PPUSH
45196: CALL_OW 250
45200: PUSH
45201: LD_VAR 0 2
45205: PPUSH
45206: CALL_OW 251
45210: PUSH
45211: LD_VAR 0 2
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: PUSH
45234: EMPTY
45235: LIST
45236: PPUSH
45237: CALL_OW 446
45241: GO 45165
45243: POP
45244: POP
// end ;
45245: LD_VAR 0 3
45249: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45250: LD_INT 0
45252: PPUSH
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45258: LD_VAR 0 1
45262: NOT
45263: PUSH
45264: LD_VAR 0 1
45268: PPUSH
45269: CALL_OW 263
45273: PUSH
45274: LD_INT 2
45276: NONEQUAL
45277: OR
45278: IFFALSE 45282
// exit ;
45280: GO 45598
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45282: LD_ADDR_VAR 0 6
45286: PUSH
45287: LD_INT 22
45289: PUSH
45290: LD_VAR 0 1
45294: PPUSH
45295: CALL_OW 255
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 30
45309: PUSH
45310: LD_INT 36
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 34
45319: PUSH
45320: LD_INT 31
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: LIST
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PPUSH
45336: CALL_OW 69
45340: ST_TO_ADDR
// if not tmp then
45341: LD_VAR 0 6
45345: NOT
45346: IFFALSE 45350
// exit ;
45348: GO 45598
// result := [ ] ;
45350: LD_ADDR_VAR 0 2
45354: PUSH
45355: EMPTY
45356: ST_TO_ADDR
// for i in tmp do
45357: LD_ADDR_VAR 0 3
45361: PUSH
45362: LD_VAR 0 6
45366: PUSH
45367: FOR_IN
45368: IFFALSE 45439
// begin t := UnitsInside ( i ) ;
45370: LD_ADDR_VAR 0 4
45374: PUSH
45375: LD_VAR 0 3
45379: PPUSH
45380: CALL_OW 313
45384: ST_TO_ADDR
// if t then
45385: LD_VAR 0 4
45389: IFFALSE 45437
// for j in t do
45391: LD_ADDR_VAR 0 7
45395: PUSH
45396: LD_VAR 0 4
45400: PUSH
45401: FOR_IN
45402: IFFALSE 45435
// result := Replace ( result , result + 1 , j ) ;
45404: LD_ADDR_VAR 0 2
45408: PUSH
45409: LD_VAR 0 2
45413: PPUSH
45414: LD_VAR 0 2
45418: PUSH
45419: LD_INT 1
45421: PLUS
45422: PPUSH
45423: LD_VAR 0 7
45427: PPUSH
45428: CALL_OW 1
45432: ST_TO_ADDR
45433: GO 45401
45435: POP
45436: POP
// end ;
45437: GO 45367
45439: POP
45440: POP
// if not result then
45441: LD_VAR 0 2
45445: NOT
45446: IFFALSE 45450
// exit ;
45448: GO 45598
// mech := result [ 1 ] ;
45450: LD_ADDR_VAR 0 5
45454: PUSH
45455: LD_VAR 0 2
45459: PUSH
45460: LD_INT 1
45462: ARRAY
45463: ST_TO_ADDR
// if result > 1 then
45464: LD_VAR 0 2
45468: PUSH
45469: LD_INT 1
45471: GREATER
45472: IFFALSE 45584
// begin for i = 2 to result do
45474: LD_ADDR_VAR 0 3
45478: PUSH
45479: DOUBLE
45480: LD_INT 2
45482: DEC
45483: ST_TO_ADDR
45484: LD_VAR 0 2
45488: PUSH
45489: FOR_TO
45490: IFFALSE 45582
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45492: LD_ADDR_VAR 0 4
45496: PUSH
45497: LD_VAR 0 2
45501: PUSH
45502: LD_VAR 0 3
45506: ARRAY
45507: PPUSH
45508: LD_INT 3
45510: PPUSH
45511: CALL_OW 259
45515: PUSH
45516: LD_VAR 0 2
45520: PUSH
45521: LD_VAR 0 3
45525: ARRAY
45526: PPUSH
45527: CALL_OW 432
45531: MINUS
45532: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45533: LD_VAR 0 4
45537: PUSH
45538: LD_VAR 0 5
45542: PPUSH
45543: LD_INT 3
45545: PPUSH
45546: CALL_OW 259
45550: PUSH
45551: LD_VAR 0 5
45555: PPUSH
45556: CALL_OW 432
45560: MINUS
45561: GREATEREQUAL
45562: IFFALSE 45580
// mech := result [ i ] ;
45564: LD_ADDR_VAR 0 5
45568: PUSH
45569: LD_VAR 0 2
45573: PUSH
45574: LD_VAR 0 3
45578: ARRAY
45579: ST_TO_ADDR
// end ;
45580: GO 45489
45582: POP
45583: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45584: LD_VAR 0 1
45588: PPUSH
45589: LD_VAR 0 5
45593: PPUSH
45594: CALL_OW 135
// end ;
45598: LD_VAR 0 2
45602: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45603: LD_INT 0
45605: PPUSH
45606: PPUSH
45607: PPUSH
45608: PPUSH
45609: PPUSH
45610: PPUSH
45611: PPUSH
45612: PPUSH
45613: PPUSH
45614: PPUSH
45615: PPUSH
45616: PPUSH
45617: PPUSH
// result := [ ] ;
45618: LD_ADDR_VAR 0 7
45622: PUSH
45623: EMPTY
45624: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45625: LD_VAR 0 1
45629: PPUSH
45630: CALL_OW 266
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: IN
45645: NOT
45646: IFFALSE 45650
// exit ;
45648: GO 47284
// if name then
45650: LD_VAR 0 3
45654: IFFALSE 45670
// SetBName ( base_dep , name ) ;
45656: LD_VAR 0 1
45660: PPUSH
45661: LD_VAR 0 3
45665: PPUSH
45666: CALL_OW 500
// base := GetBase ( base_dep ) ;
45670: LD_ADDR_VAR 0 15
45674: PUSH
45675: LD_VAR 0 1
45679: PPUSH
45680: CALL_OW 274
45684: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45685: LD_ADDR_VAR 0 16
45689: PUSH
45690: LD_VAR 0 1
45694: PPUSH
45695: CALL_OW 255
45699: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45700: LD_ADDR_VAR 0 17
45704: PUSH
45705: LD_VAR 0 1
45709: PPUSH
45710: CALL_OW 248
45714: ST_TO_ADDR
// if sources then
45715: LD_VAR 0 5
45719: IFFALSE 45766
// for i = 1 to 3 do
45721: LD_ADDR_VAR 0 8
45725: PUSH
45726: DOUBLE
45727: LD_INT 1
45729: DEC
45730: ST_TO_ADDR
45731: LD_INT 3
45733: PUSH
45734: FOR_TO
45735: IFFALSE 45764
// AddResourceType ( base , i , sources [ i ] ) ;
45737: LD_VAR 0 15
45741: PPUSH
45742: LD_VAR 0 8
45746: PPUSH
45747: LD_VAR 0 5
45751: PUSH
45752: LD_VAR 0 8
45756: ARRAY
45757: PPUSH
45758: CALL_OW 276
45762: GO 45734
45764: POP
45765: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45766: LD_ADDR_VAR 0 18
45770: PUSH
45771: LD_VAR 0 15
45775: PPUSH
45776: LD_VAR 0 2
45780: PPUSH
45781: LD_INT 1
45783: PPUSH
45784: CALL 45027 0 3
45788: ST_TO_ADDR
// InitHc ;
45789: CALL_OW 19
// InitUc ;
45793: CALL_OW 18
// uc_side := side ;
45797: LD_ADDR_OWVAR 20
45801: PUSH
45802: LD_VAR 0 16
45806: ST_TO_ADDR
// uc_nation := nation ;
45807: LD_ADDR_OWVAR 21
45811: PUSH
45812: LD_VAR 0 17
45816: ST_TO_ADDR
// if buildings then
45817: LD_VAR 0 18
45821: IFFALSE 47143
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45823: LD_ADDR_VAR 0 19
45827: PUSH
45828: LD_VAR 0 18
45832: PPUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 30
45838: PUSH
45839: LD_INT 29
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 30
45848: PUSH
45849: LD_INT 30
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: PPUSH
45861: CALL_OW 72
45865: ST_TO_ADDR
// if tmp then
45866: LD_VAR 0 19
45870: IFFALSE 45918
// for i in tmp do
45872: LD_ADDR_VAR 0 8
45876: PUSH
45877: LD_VAR 0 19
45881: PUSH
45882: FOR_IN
45883: IFFALSE 45916
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45885: LD_VAR 0 8
45889: PPUSH
45890: CALL_OW 250
45894: PPUSH
45895: LD_VAR 0 8
45899: PPUSH
45900: CALL_OW 251
45904: PPUSH
45905: LD_VAR 0 16
45909: PPUSH
45910: CALL_OW 441
45914: GO 45882
45916: POP
45917: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45918: LD_VAR 0 18
45922: PPUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 30
45928: PUSH
45929: LD_INT 32
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 30
45938: PUSH
45939: LD_INT 33
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: PPUSH
45951: CALL_OW 72
45955: IFFALSE 46043
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45957: LD_ADDR_VAR 0 8
45961: PUSH
45962: LD_VAR 0 18
45966: PPUSH
45967: LD_INT 2
45969: PUSH
45970: LD_INT 30
45972: PUSH
45973: LD_INT 32
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 30
45982: PUSH
45983: LD_INT 33
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: PPUSH
45995: CALL_OW 72
45999: PUSH
46000: FOR_IN
46001: IFFALSE 46041
// begin if not GetBWeapon ( i ) then
46003: LD_VAR 0 8
46007: PPUSH
46008: CALL_OW 269
46012: NOT
46013: IFFALSE 46039
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46015: LD_VAR 0 8
46019: PPUSH
46020: LD_VAR 0 8
46024: PPUSH
46025: LD_VAR 0 2
46029: PPUSH
46030: CALL 47289 0 2
46034: PPUSH
46035: CALL_OW 431
// end ;
46039: GO 46000
46041: POP
46042: POP
// end ; for i = 1 to personel do
46043: LD_ADDR_VAR 0 8
46047: PUSH
46048: DOUBLE
46049: LD_INT 1
46051: DEC
46052: ST_TO_ADDR
46053: LD_VAR 0 6
46057: PUSH
46058: FOR_TO
46059: IFFALSE 47123
// begin if i > 4 then
46061: LD_VAR 0 8
46065: PUSH
46066: LD_INT 4
46068: GREATER
46069: IFFALSE 46073
// break ;
46071: GO 47123
// case i of 1 :
46073: LD_VAR 0 8
46077: PUSH
46078: LD_INT 1
46080: DOUBLE
46081: EQUAL
46082: IFTRUE 46086
46084: GO 46166
46086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46087: LD_ADDR_VAR 0 12
46091: PUSH
46092: LD_VAR 0 18
46096: PPUSH
46097: LD_INT 22
46099: PUSH
46100: LD_VAR 0 16
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 58
46111: PUSH
46112: EMPTY
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 30
46120: PUSH
46121: LD_INT 32
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 30
46130: PUSH
46131: LD_INT 4
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 30
46140: PUSH
46141: LD_INT 5
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: PPUSH
46159: CALL_OW 72
46163: ST_TO_ADDR
46164: GO 46388
46166: LD_INT 2
46168: DOUBLE
46169: EQUAL
46170: IFTRUE 46174
46172: GO 46236
46174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46175: LD_ADDR_VAR 0 12
46179: PUSH
46180: LD_VAR 0 18
46184: PPUSH
46185: LD_INT 22
46187: PUSH
46188: LD_VAR 0 16
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 30
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 30
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PPUSH
46229: CALL_OW 72
46233: ST_TO_ADDR
46234: GO 46388
46236: LD_INT 3
46238: DOUBLE
46239: EQUAL
46240: IFTRUE 46244
46242: GO 46306
46244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46245: LD_ADDR_VAR 0 12
46249: PUSH
46250: LD_VAR 0 18
46254: PPUSH
46255: LD_INT 22
46257: PUSH
46258: LD_VAR 0 16
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 30
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 30
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PPUSH
46299: CALL_OW 72
46303: ST_TO_ADDR
46304: GO 46388
46306: LD_INT 4
46308: DOUBLE
46309: EQUAL
46310: IFTRUE 46314
46312: GO 46387
46314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46315: LD_ADDR_VAR 0 12
46319: PUSH
46320: LD_VAR 0 18
46324: PPUSH
46325: LD_INT 22
46327: PUSH
46328: LD_VAR 0 16
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 30
46342: PUSH
46343: LD_INT 6
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 30
46352: PUSH
46353: LD_INT 7
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 30
46362: PUSH
46363: LD_INT 8
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PPUSH
46380: CALL_OW 72
46384: ST_TO_ADDR
46385: GO 46388
46387: POP
// if i = 1 then
46388: LD_VAR 0 8
46392: PUSH
46393: LD_INT 1
46395: EQUAL
46396: IFFALSE 46507
// begin tmp := [ ] ;
46398: LD_ADDR_VAR 0 19
46402: PUSH
46403: EMPTY
46404: ST_TO_ADDR
// for j in f do
46405: LD_ADDR_VAR 0 9
46409: PUSH
46410: LD_VAR 0 12
46414: PUSH
46415: FOR_IN
46416: IFFALSE 46489
// if GetBType ( j ) = b_bunker then
46418: LD_VAR 0 9
46422: PPUSH
46423: CALL_OW 266
46427: PUSH
46428: LD_INT 32
46430: EQUAL
46431: IFFALSE 46458
// tmp := Insert ( tmp , 1 , j ) else
46433: LD_ADDR_VAR 0 19
46437: PUSH
46438: LD_VAR 0 19
46442: PPUSH
46443: LD_INT 1
46445: PPUSH
46446: LD_VAR 0 9
46450: PPUSH
46451: CALL_OW 2
46455: ST_TO_ADDR
46456: GO 46487
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46458: LD_ADDR_VAR 0 19
46462: PUSH
46463: LD_VAR 0 19
46467: PPUSH
46468: LD_VAR 0 19
46472: PUSH
46473: LD_INT 1
46475: PLUS
46476: PPUSH
46477: LD_VAR 0 9
46481: PPUSH
46482: CALL_OW 2
46486: ST_TO_ADDR
46487: GO 46415
46489: POP
46490: POP
// if tmp then
46491: LD_VAR 0 19
46495: IFFALSE 46507
// f := tmp ;
46497: LD_ADDR_VAR 0 12
46501: PUSH
46502: LD_VAR 0 19
46506: ST_TO_ADDR
// end ; x := personel [ i ] ;
46507: LD_ADDR_VAR 0 13
46511: PUSH
46512: LD_VAR 0 6
46516: PUSH
46517: LD_VAR 0 8
46521: ARRAY
46522: ST_TO_ADDR
// if x = - 1 then
46523: LD_VAR 0 13
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: EQUAL
46532: IFFALSE 46741
// begin for j in f do
46534: LD_ADDR_VAR 0 9
46538: PUSH
46539: LD_VAR 0 12
46543: PUSH
46544: FOR_IN
46545: IFFALSE 46737
// repeat InitHc ;
46547: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46551: LD_VAR 0 9
46555: PPUSH
46556: CALL_OW 266
46560: PUSH
46561: LD_INT 5
46563: EQUAL
46564: IFFALSE 46634
// begin if UnitsInside ( j ) < 3 then
46566: LD_VAR 0 9
46570: PPUSH
46571: CALL_OW 313
46575: PUSH
46576: LD_INT 3
46578: LESS
46579: IFFALSE 46615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46581: LD_INT 0
46583: PPUSH
46584: LD_INT 5
46586: PUSH
46587: LD_INT 8
46589: PUSH
46590: LD_INT 9
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: PUSH
46598: LD_VAR 0 17
46602: ARRAY
46603: PPUSH
46604: LD_VAR 0 4
46608: PPUSH
46609: CALL_OW 380
46613: GO 46632
// PrepareHuman ( false , i , skill ) ;
46615: LD_INT 0
46617: PPUSH
46618: LD_VAR 0 8
46622: PPUSH
46623: LD_VAR 0 4
46627: PPUSH
46628: CALL_OW 380
// end else
46632: GO 46651
// PrepareHuman ( false , i , skill ) ;
46634: LD_INT 0
46636: PPUSH
46637: LD_VAR 0 8
46641: PPUSH
46642: LD_VAR 0 4
46646: PPUSH
46647: CALL_OW 380
// un := CreateHuman ;
46651: LD_ADDR_VAR 0 14
46655: PUSH
46656: CALL_OW 44
46660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46661: LD_ADDR_VAR 0 7
46665: PUSH
46666: LD_VAR 0 7
46670: PPUSH
46671: LD_INT 1
46673: PPUSH
46674: LD_VAR 0 14
46678: PPUSH
46679: CALL_OW 2
46683: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46684: LD_VAR 0 14
46688: PPUSH
46689: LD_VAR 0 9
46693: PPUSH
46694: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46698: LD_VAR 0 9
46702: PPUSH
46703: CALL_OW 313
46707: PUSH
46708: LD_INT 6
46710: EQUAL
46711: PUSH
46712: LD_VAR 0 9
46716: PPUSH
46717: CALL_OW 266
46721: PUSH
46722: LD_INT 32
46724: PUSH
46725: LD_INT 31
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: IN
46732: OR
46733: IFFALSE 46547
46735: GO 46544
46737: POP
46738: POP
// end else
46739: GO 47121
// for j = 1 to x do
46741: LD_ADDR_VAR 0 9
46745: PUSH
46746: DOUBLE
46747: LD_INT 1
46749: DEC
46750: ST_TO_ADDR
46751: LD_VAR 0 13
46755: PUSH
46756: FOR_TO
46757: IFFALSE 47119
// begin InitHc ;
46759: CALL_OW 19
// if not f then
46763: LD_VAR 0 12
46767: NOT
46768: IFFALSE 46857
// begin PrepareHuman ( false , i , skill ) ;
46770: LD_INT 0
46772: PPUSH
46773: LD_VAR 0 8
46777: PPUSH
46778: LD_VAR 0 4
46782: PPUSH
46783: CALL_OW 380
// un := CreateHuman ;
46787: LD_ADDR_VAR 0 14
46791: PUSH
46792: CALL_OW 44
46796: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46797: LD_ADDR_VAR 0 7
46801: PUSH
46802: LD_VAR 0 7
46806: PPUSH
46807: LD_INT 1
46809: PPUSH
46810: LD_VAR 0 14
46814: PPUSH
46815: CALL_OW 2
46819: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46820: LD_VAR 0 14
46824: PPUSH
46825: LD_VAR 0 1
46829: PPUSH
46830: CALL_OW 250
46834: PPUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 251
46844: PPUSH
46845: LD_INT 10
46847: PPUSH
46848: LD_INT 0
46850: PPUSH
46851: CALL_OW 50
// continue ;
46855: GO 46756
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46857: LD_VAR 0 12
46861: PUSH
46862: LD_INT 1
46864: ARRAY
46865: PPUSH
46866: CALL_OW 313
46870: PUSH
46871: LD_VAR 0 12
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: PPUSH
46880: CALL_OW 266
46884: PUSH
46885: LD_INT 32
46887: PUSH
46888: LD_INT 31
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: IN
46895: AND
46896: PUSH
46897: LD_VAR 0 12
46901: PUSH
46902: LD_INT 1
46904: ARRAY
46905: PPUSH
46906: CALL_OW 313
46910: PUSH
46911: LD_INT 6
46913: EQUAL
46914: OR
46915: IFFALSE 46935
// f := Delete ( f , 1 ) ;
46917: LD_ADDR_VAR 0 12
46921: PUSH
46922: LD_VAR 0 12
46926: PPUSH
46927: LD_INT 1
46929: PPUSH
46930: CALL_OW 3
46934: ST_TO_ADDR
// if not f then
46935: LD_VAR 0 12
46939: NOT
46940: IFFALSE 46958
// begin x := x + 2 ;
46942: LD_ADDR_VAR 0 13
46946: PUSH
46947: LD_VAR 0 13
46951: PUSH
46952: LD_INT 2
46954: PLUS
46955: ST_TO_ADDR
// continue ;
46956: GO 46756
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46958: LD_VAR 0 12
46962: PUSH
46963: LD_INT 1
46965: ARRAY
46966: PPUSH
46967: CALL_OW 266
46971: PUSH
46972: LD_INT 5
46974: EQUAL
46975: IFFALSE 47049
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46977: LD_VAR 0 12
46981: PUSH
46982: LD_INT 1
46984: ARRAY
46985: PPUSH
46986: CALL_OW 313
46990: PUSH
46991: LD_INT 3
46993: LESS
46994: IFFALSE 47030
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46996: LD_INT 0
46998: PPUSH
46999: LD_INT 5
47001: PUSH
47002: LD_INT 8
47004: PUSH
47005: LD_INT 9
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: PUSH
47013: LD_VAR 0 17
47017: ARRAY
47018: PPUSH
47019: LD_VAR 0 4
47023: PPUSH
47024: CALL_OW 380
47028: GO 47047
// PrepareHuman ( false , i , skill ) ;
47030: LD_INT 0
47032: PPUSH
47033: LD_VAR 0 8
47037: PPUSH
47038: LD_VAR 0 4
47042: PPUSH
47043: CALL_OW 380
// end else
47047: GO 47066
// PrepareHuman ( false , i , skill ) ;
47049: LD_INT 0
47051: PPUSH
47052: LD_VAR 0 8
47056: PPUSH
47057: LD_VAR 0 4
47061: PPUSH
47062: CALL_OW 380
// un := CreateHuman ;
47066: LD_ADDR_VAR 0 14
47070: PUSH
47071: CALL_OW 44
47075: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47076: LD_ADDR_VAR 0 7
47080: PUSH
47081: LD_VAR 0 7
47085: PPUSH
47086: LD_INT 1
47088: PPUSH
47089: LD_VAR 0 14
47093: PPUSH
47094: CALL_OW 2
47098: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47099: LD_VAR 0 14
47103: PPUSH
47104: LD_VAR 0 12
47108: PUSH
47109: LD_INT 1
47111: ARRAY
47112: PPUSH
47113: CALL_OW 52
// end ;
47117: GO 46756
47119: POP
47120: POP
// end ;
47121: GO 46058
47123: POP
47124: POP
// result := result ^ buildings ;
47125: LD_ADDR_VAR 0 7
47129: PUSH
47130: LD_VAR 0 7
47134: PUSH
47135: LD_VAR 0 18
47139: ADD
47140: ST_TO_ADDR
// end else
47141: GO 47284
// begin for i = 1 to personel do
47143: LD_ADDR_VAR 0 8
47147: PUSH
47148: DOUBLE
47149: LD_INT 1
47151: DEC
47152: ST_TO_ADDR
47153: LD_VAR 0 6
47157: PUSH
47158: FOR_TO
47159: IFFALSE 47282
// begin if i > 4 then
47161: LD_VAR 0 8
47165: PUSH
47166: LD_INT 4
47168: GREATER
47169: IFFALSE 47173
// break ;
47171: GO 47282
// x := personel [ i ] ;
47173: LD_ADDR_VAR 0 13
47177: PUSH
47178: LD_VAR 0 6
47182: PUSH
47183: LD_VAR 0 8
47187: ARRAY
47188: ST_TO_ADDR
// if x = - 1 then
47189: LD_VAR 0 13
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: EQUAL
47198: IFFALSE 47202
// continue ;
47200: GO 47158
// PrepareHuman ( false , i , skill ) ;
47202: LD_INT 0
47204: PPUSH
47205: LD_VAR 0 8
47209: PPUSH
47210: LD_VAR 0 4
47214: PPUSH
47215: CALL_OW 380
// un := CreateHuman ;
47219: LD_ADDR_VAR 0 14
47223: PUSH
47224: CALL_OW 44
47228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47229: LD_VAR 0 14
47233: PPUSH
47234: LD_VAR 0 1
47238: PPUSH
47239: CALL_OW 250
47243: PPUSH
47244: LD_VAR 0 1
47248: PPUSH
47249: CALL_OW 251
47253: PPUSH
47254: LD_INT 10
47256: PPUSH
47257: LD_INT 0
47259: PPUSH
47260: CALL_OW 50
// result := result ^ un ;
47264: LD_ADDR_VAR 0 7
47268: PUSH
47269: LD_VAR 0 7
47273: PUSH
47274: LD_VAR 0 14
47278: ADD
47279: ST_TO_ADDR
// end ;
47280: GO 47158
47282: POP
47283: POP
// end ; end ;
47284: LD_VAR 0 7
47288: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47289: LD_INT 0
47291: PPUSH
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
47298: PPUSH
47299: PPUSH
47300: PPUSH
47301: PPUSH
47302: PPUSH
47303: PPUSH
47304: PPUSH
47305: PPUSH
47306: PPUSH
// result := false ;
47307: LD_ADDR_VAR 0 3
47311: PUSH
47312: LD_INT 0
47314: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47315: LD_VAR 0 1
47319: NOT
47320: PUSH
47321: LD_VAR 0 1
47325: PPUSH
47326: CALL_OW 266
47330: PUSH
47331: LD_INT 32
47333: PUSH
47334: LD_INT 33
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: IN
47341: NOT
47342: OR
47343: IFFALSE 47347
// exit ;
47345: GO 48456
// nat := GetNation ( tower ) ;
47347: LD_ADDR_VAR 0 12
47351: PUSH
47352: LD_VAR 0 1
47356: PPUSH
47357: CALL_OW 248
47361: ST_TO_ADDR
// side := GetSide ( tower ) ;
47362: LD_ADDR_VAR 0 16
47366: PUSH
47367: LD_VAR 0 1
47371: PPUSH
47372: CALL_OW 255
47376: ST_TO_ADDR
// x := GetX ( tower ) ;
47377: LD_ADDR_VAR 0 10
47381: PUSH
47382: LD_VAR 0 1
47386: PPUSH
47387: CALL_OW 250
47391: ST_TO_ADDR
// y := GetY ( tower ) ;
47392: LD_ADDR_VAR 0 11
47396: PUSH
47397: LD_VAR 0 1
47401: PPUSH
47402: CALL_OW 251
47406: ST_TO_ADDR
// if not x or not y then
47407: LD_VAR 0 10
47411: NOT
47412: PUSH
47413: LD_VAR 0 11
47417: NOT
47418: OR
47419: IFFALSE 47423
// exit ;
47421: GO 48456
// weapon := 0 ;
47423: LD_ADDR_VAR 0 18
47427: PUSH
47428: LD_INT 0
47430: ST_TO_ADDR
// fac_list := [ ] ;
47431: LD_ADDR_VAR 0 17
47435: PUSH
47436: EMPTY
47437: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47438: LD_ADDR_VAR 0 6
47442: PUSH
47443: LD_VAR 0 1
47447: PPUSH
47448: CALL_OW 274
47452: PPUSH
47453: LD_VAR 0 2
47457: PPUSH
47458: LD_INT 0
47460: PPUSH
47461: CALL 45027 0 3
47465: PPUSH
47466: LD_INT 30
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PPUSH
47476: CALL_OW 72
47480: ST_TO_ADDR
// if not factories then
47481: LD_VAR 0 6
47485: NOT
47486: IFFALSE 47490
// exit ;
47488: GO 48456
// for i in factories do
47490: LD_ADDR_VAR 0 8
47494: PUSH
47495: LD_VAR 0 6
47499: PUSH
47500: FOR_IN
47501: IFFALSE 47526
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47503: LD_ADDR_VAR 0 17
47507: PUSH
47508: LD_VAR 0 17
47512: PUSH
47513: LD_VAR 0 8
47517: PPUSH
47518: CALL_OW 478
47522: UNION
47523: ST_TO_ADDR
47524: GO 47500
47526: POP
47527: POP
// if not fac_list then
47528: LD_VAR 0 17
47532: NOT
47533: IFFALSE 47537
// exit ;
47535: GO 48456
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47537: LD_ADDR_VAR 0 5
47541: PUSH
47542: LD_INT 4
47544: PUSH
47545: LD_INT 5
47547: PUSH
47548: LD_INT 9
47550: PUSH
47551: LD_INT 10
47553: PUSH
47554: LD_INT 6
47556: PUSH
47557: LD_INT 7
47559: PUSH
47560: LD_INT 11
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 27
47574: PUSH
47575: LD_INT 28
47577: PUSH
47578: LD_INT 26
47580: PUSH
47581: LD_INT 30
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 43
47592: PUSH
47593: LD_INT 44
47595: PUSH
47596: LD_INT 46
47598: PUSH
47599: LD_INT 45
47601: PUSH
47602: LD_INT 47
47604: PUSH
47605: LD_INT 49
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: LIST
47620: PUSH
47621: LD_VAR 0 12
47625: ARRAY
47626: ST_TO_ADDR
// list := list isect fac_list ;
47627: LD_ADDR_VAR 0 5
47631: PUSH
47632: LD_VAR 0 5
47636: PUSH
47637: LD_VAR 0 17
47641: ISECT
47642: ST_TO_ADDR
// if not list then
47643: LD_VAR 0 5
47647: NOT
47648: IFFALSE 47652
// exit ;
47650: GO 48456
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47652: LD_VAR 0 12
47656: PUSH
47657: LD_INT 3
47659: EQUAL
47660: PUSH
47661: LD_INT 49
47663: PUSH
47664: LD_VAR 0 5
47668: IN
47669: AND
47670: PUSH
47671: LD_INT 31
47673: PPUSH
47674: LD_VAR 0 16
47678: PPUSH
47679: CALL_OW 321
47683: PUSH
47684: LD_INT 2
47686: EQUAL
47687: AND
47688: IFFALSE 47748
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47690: LD_INT 22
47692: PUSH
47693: LD_VAR 0 16
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 35
47704: PUSH
47705: LD_INT 49
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 91
47714: PUSH
47715: LD_VAR 0 1
47719: PUSH
47720: LD_INT 10
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: PPUSH
47733: CALL_OW 69
47737: NOT
47738: IFFALSE 47748
// weapon := ru_time_lapser ;
47740: LD_ADDR_VAR 0 18
47744: PUSH
47745: LD_INT 49
47747: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47748: LD_VAR 0 12
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: IN
47763: PUSH
47764: LD_INT 11
47766: PUSH
47767: LD_VAR 0 5
47771: IN
47772: PUSH
47773: LD_INT 30
47775: PUSH
47776: LD_VAR 0 5
47780: IN
47781: OR
47782: AND
47783: PUSH
47784: LD_INT 6
47786: PPUSH
47787: LD_VAR 0 16
47791: PPUSH
47792: CALL_OW 321
47796: PUSH
47797: LD_INT 2
47799: EQUAL
47800: AND
47801: IFFALSE 47966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47803: LD_INT 22
47805: PUSH
47806: LD_VAR 0 16
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: LD_INT 35
47820: PUSH
47821: LD_INT 11
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 35
47830: PUSH
47831: LD_INT 30
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 91
47845: PUSH
47846: LD_VAR 0 1
47850: PUSH
47851: LD_INT 18
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: PPUSH
47864: CALL_OW 69
47868: NOT
47869: PUSH
47870: LD_INT 22
47872: PUSH
47873: LD_VAR 0 16
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 30
47887: PUSH
47888: LD_INT 32
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 30
47897: PUSH
47898: LD_INT 33
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 91
47912: PUSH
47913: LD_VAR 0 1
47917: PUSH
47918: LD_INT 12
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: PUSH
47931: EMPTY
47932: LIST
47933: PPUSH
47934: CALL_OW 69
47938: PUSH
47939: LD_INT 2
47941: GREATER
47942: AND
47943: IFFALSE 47966
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47945: LD_ADDR_VAR 0 18
47949: PUSH
47950: LD_INT 11
47952: PUSH
47953: LD_INT 30
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_VAR 0 12
47964: ARRAY
47965: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47966: LD_VAR 0 18
47970: NOT
47971: PUSH
47972: LD_INT 40
47974: PPUSH
47975: LD_VAR 0 16
47979: PPUSH
47980: CALL_OW 321
47984: PUSH
47985: LD_INT 2
47987: EQUAL
47988: AND
47989: PUSH
47990: LD_INT 7
47992: PUSH
47993: LD_VAR 0 5
47997: IN
47998: PUSH
47999: LD_INT 28
48001: PUSH
48002: LD_VAR 0 5
48006: IN
48007: OR
48008: PUSH
48009: LD_INT 45
48011: PUSH
48012: LD_VAR 0 5
48016: IN
48017: OR
48018: AND
48019: IFFALSE 48273
// begin hex := GetHexInfo ( x , y ) ;
48021: LD_ADDR_VAR 0 4
48025: PUSH
48026: LD_VAR 0 10
48030: PPUSH
48031: LD_VAR 0 11
48035: PPUSH
48036: CALL_OW 546
48040: ST_TO_ADDR
// if hex [ 1 ] then
48041: LD_VAR 0 4
48045: PUSH
48046: LD_INT 1
48048: ARRAY
48049: IFFALSE 48053
// exit ;
48051: GO 48456
// height := hex [ 2 ] ;
48053: LD_ADDR_VAR 0 15
48057: PUSH
48058: LD_VAR 0 4
48062: PUSH
48063: LD_INT 2
48065: ARRAY
48066: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48067: LD_ADDR_VAR 0 14
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: LD_INT 5
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// for i in tmp do
48090: LD_ADDR_VAR 0 8
48094: PUSH
48095: LD_VAR 0 14
48099: PUSH
48100: FOR_IN
48101: IFFALSE 48271
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48103: LD_ADDR_VAR 0 9
48107: PUSH
48108: LD_VAR 0 10
48112: PPUSH
48113: LD_VAR 0 8
48117: PPUSH
48118: LD_INT 5
48120: PPUSH
48121: CALL_OW 272
48125: PUSH
48126: LD_VAR 0 11
48130: PPUSH
48131: LD_VAR 0 8
48135: PPUSH
48136: LD_INT 5
48138: PPUSH
48139: CALL_OW 273
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48148: LD_VAR 0 9
48152: PUSH
48153: LD_INT 1
48155: ARRAY
48156: PPUSH
48157: LD_VAR 0 9
48161: PUSH
48162: LD_INT 2
48164: ARRAY
48165: PPUSH
48166: CALL_OW 488
48170: IFFALSE 48269
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48172: LD_ADDR_VAR 0 4
48176: PUSH
48177: LD_VAR 0 9
48181: PUSH
48182: LD_INT 1
48184: ARRAY
48185: PPUSH
48186: LD_VAR 0 9
48190: PUSH
48191: LD_INT 2
48193: ARRAY
48194: PPUSH
48195: CALL_OW 546
48199: ST_TO_ADDR
// if hex [ 1 ] then
48200: LD_VAR 0 4
48204: PUSH
48205: LD_INT 1
48207: ARRAY
48208: IFFALSE 48212
// continue ;
48210: GO 48100
// h := hex [ 2 ] ;
48212: LD_ADDR_VAR 0 13
48216: PUSH
48217: LD_VAR 0 4
48221: PUSH
48222: LD_INT 2
48224: ARRAY
48225: ST_TO_ADDR
// if h + 7 < height then
48226: LD_VAR 0 13
48230: PUSH
48231: LD_INT 7
48233: PLUS
48234: PUSH
48235: LD_VAR 0 15
48239: LESS
48240: IFFALSE 48269
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48242: LD_ADDR_VAR 0 18
48246: PUSH
48247: LD_INT 7
48249: PUSH
48250: LD_INT 28
48252: PUSH
48253: LD_INT 45
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: LIST
48260: PUSH
48261: LD_VAR 0 12
48265: ARRAY
48266: ST_TO_ADDR
// break ;
48267: GO 48271
// end ; end ; end ;
48269: GO 48100
48271: POP
48272: POP
// end ; if not weapon then
48273: LD_VAR 0 18
48277: NOT
48278: IFFALSE 48338
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48280: LD_ADDR_VAR 0 5
48284: PUSH
48285: LD_VAR 0 5
48289: PUSH
48290: LD_INT 11
48292: PUSH
48293: LD_INT 30
48295: PUSH
48296: LD_INT 49
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: DIFF
48304: ST_TO_ADDR
// if not list then
48305: LD_VAR 0 5
48309: NOT
48310: IFFALSE 48314
// exit ;
48312: GO 48456
// weapon := list [ rand ( 1 , list ) ] ;
48314: LD_ADDR_VAR 0 18
48318: PUSH
48319: LD_VAR 0 5
48323: PUSH
48324: LD_INT 1
48326: PPUSH
48327: LD_VAR 0 5
48331: PPUSH
48332: CALL_OW 12
48336: ARRAY
48337: ST_TO_ADDR
// end ; if weapon then
48338: LD_VAR 0 18
48342: IFFALSE 48456
// begin tmp := CostOfWeapon ( weapon ) ;
48344: LD_ADDR_VAR 0 14
48348: PUSH
48349: LD_VAR 0 18
48353: PPUSH
48354: CALL_OW 451
48358: ST_TO_ADDR
// j := GetBase ( tower ) ;
48359: LD_ADDR_VAR 0 9
48363: PUSH
48364: LD_VAR 0 1
48368: PPUSH
48369: CALL_OW 274
48373: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48374: LD_VAR 0 9
48378: PPUSH
48379: LD_INT 1
48381: PPUSH
48382: CALL_OW 275
48386: PUSH
48387: LD_VAR 0 14
48391: PUSH
48392: LD_INT 1
48394: ARRAY
48395: GREATEREQUAL
48396: PUSH
48397: LD_VAR 0 9
48401: PPUSH
48402: LD_INT 2
48404: PPUSH
48405: CALL_OW 275
48409: PUSH
48410: LD_VAR 0 14
48414: PUSH
48415: LD_INT 2
48417: ARRAY
48418: GREATEREQUAL
48419: AND
48420: PUSH
48421: LD_VAR 0 9
48425: PPUSH
48426: LD_INT 3
48428: PPUSH
48429: CALL_OW 275
48433: PUSH
48434: LD_VAR 0 14
48438: PUSH
48439: LD_INT 3
48441: ARRAY
48442: GREATEREQUAL
48443: AND
48444: IFFALSE 48456
// result := weapon ;
48446: LD_ADDR_VAR 0 3
48450: PUSH
48451: LD_VAR 0 18
48455: ST_TO_ADDR
// end ; end ;
48456: LD_VAR 0 3
48460: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48461: LD_INT 0
48463: PPUSH
48464: PPUSH
// result := true ;
48465: LD_ADDR_VAR 0 3
48469: PUSH
48470: LD_INT 1
48472: ST_TO_ADDR
// if array1 = array2 then
48473: LD_VAR 0 1
48477: PUSH
48478: LD_VAR 0 2
48482: EQUAL
48483: IFFALSE 48543
// begin for i = 1 to array1 do
48485: LD_ADDR_VAR 0 4
48489: PUSH
48490: DOUBLE
48491: LD_INT 1
48493: DEC
48494: ST_TO_ADDR
48495: LD_VAR 0 1
48499: PUSH
48500: FOR_TO
48501: IFFALSE 48539
// if array1 [ i ] <> array2 [ i ] then
48503: LD_VAR 0 1
48507: PUSH
48508: LD_VAR 0 4
48512: ARRAY
48513: PUSH
48514: LD_VAR 0 2
48518: PUSH
48519: LD_VAR 0 4
48523: ARRAY
48524: NONEQUAL
48525: IFFALSE 48537
// begin result := false ;
48527: LD_ADDR_VAR 0 3
48531: PUSH
48532: LD_INT 0
48534: ST_TO_ADDR
// break ;
48535: GO 48539
// end ;
48537: GO 48500
48539: POP
48540: POP
// end else
48541: GO 48551
// result := false ;
48543: LD_ADDR_VAR 0 3
48547: PUSH
48548: LD_INT 0
48550: ST_TO_ADDR
// end ;
48551: LD_VAR 0 3
48555: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48556: LD_INT 0
48558: PPUSH
48559: PPUSH
// if not array1 or not array2 then
48560: LD_VAR 0 1
48564: NOT
48565: PUSH
48566: LD_VAR 0 2
48570: NOT
48571: OR
48572: IFFALSE 48576
// exit ;
48574: GO 48640
// result := true ;
48576: LD_ADDR_VAR 0 3
48580: PUSH
48581: LD_INT 1
48583: ST_TO_ADDR
// for i = 1 to array1 do
48584: LD_ADDR_VAR 0 4
48588: PUSH
48589: DOUBLE
48590: LD_INT 1
48592: DEC
48593: ST_TO_ADDR
48594: LD_VAR 0 1
48598: PUSH
48599: FOR_TO
48600: IFFALSE 48638
// if array1 [ i ] <> array2 [ i ] then
48602: LD_VAR 0 1
48606: PUSH
48607: LD_VAR 0 4
48611: ARRAY
48612: PUSH
48613: LD_VAR 0 2
48617: PUSH
48618: LD_VAR 0 4
48622: ARRAY
48623: NONEQUAL
48624: IFFALSE 48636
// begin result := false ;
48626: LD_ADDR_VAR 0 3
48630: PUSH
48631: LD_INT 0
48633: ST_TO_ADDR
// break ;
48634: GO 48638
// end ;
48636: GO 48599
48638: POP
48639: POP
// end ;
48640: LD_VAR 0 3
48644: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48645: LD_INT 0
48647: PPUSH
48648: PPUSH
48649: PPUSH
// pom := GetBase ( fac ) ;
48650: LD_ADDR_VAR 0 5
48654: PUSH
48655: LD_VAR 0 1
48659: PPUSH
48660: CALL_OW 274
48664: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48665: LD_ADDR_VAR 0 4
48669: PUSH
48670: LD_VAR 0 2
48674: PUSH
48675: LD_INT 1
48677: ARRAY
48678: PPUSH
48679: LD_VAR 0 2
48683: PUSH
48684: LD_INT 2
48686: ARRAY
48687: PPUSH
48688: LD_VAR 0 2
48692: PUSH
48693: LD_INT 3
48695: ARRAY
48696: PPUSH
48697: LD_VAR 0 2
48701: PUSH
48702: LD_INT 4
48704: ARRAY
48705: PPUSH
48706: CALL_OW 449
48710: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48711: LD_ADDR_VAR 0 3
48715: PUSH
48716: LD_VAR 0 5
48720: PPUSH
48721: LD_INT 1
48723: PPUSH
48724: CALL_OW 275
48728: PUSH
48729: LD_VAR 0 4
48733: PUSH
48734: LD_INT 1
48736: ARRAY
48737: GREATEREQUAL
48738: PUSH
48739: LD_VAR 0 5
48743: PPUSH
48744: LD_INT 2
48746: PPUSH
48747: CALL_OW 275
48751: PUSH
48752: LD_VAR 0 4
48756: PUSH
48757: LD_INT 2
48759: ARRAY
48760: GREATEREQUAL
48761: AND
48762: PUSH
48763: LD_VAR 0 5
48767: PPUSH
48768: LD_INT 3
48770: PPUSH
48771: CALL_OW 275
48775: PUSH
48776: LD_VAR 0 4
48780: PUSH
48781: LD_INT 3
48783: ARRAY
48784: GREATEREQUAL
48785: AND
48786: ST_TO_ADDR
// end ;
48787: LD_VAR 0 3
48791: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48792: LD_INT 0
48794: PPUSH
48795: PPUSH
48796: PPUSH
48797: PPUSH
// pom := GetBase ( building ) ;
48798: LD_ADDR_VAR 0 3
48802: PUSH
48803: LD_VAR 0 1
48807: PPUSH
48808: CALL_OW 274
48812: ST_TO_ADDR
// if not pom then
48813: LD_VAR 0 3
48817: NOT
48818: IFFALSE 48822
// exit ;
48820: GO 48992
// btype := GetBType ( building ) ;
48822: LD_ADDR_VAR 0 5
48826: PUSH
48827: LD_VAR 0 1
48831: PPUSH
48832: CALL_OW 266
48836: ST_TO_ADDR
// if btype = b_armoury then
48837: LD_VAR 0 5
48841: PUSH
48842: LD_INT 4
48844: EQUAL
48845: IFFALSE 48855
// btype := b_barracks ;
48847: LD_ADDR_VAR 0 5
48851: PUSH
48852: LD_INT 5
48854: ST_TO_ADDR
// if btype = b_depot then
48855: LD_VAR 0 5
48859: PUSH
48860: LD_INT 0
48862: EQUAL
48863: IFFALSE 48873
// btype := b_warehouse ;
48865: LD_ADDR_VAR 0 5
48869: PUSH
48870: LD_INT 1
48872: ST_TO_ADDR
// if btype = b_workshop then
48873: LD_VAR 0 5
48877: PUSH
48878: LD_INT 2
48880: EQUAL
48881: IFFALSE 48891
// btype := b_factory ;
48883: LD_ADDR_VAR 0 5
48887: PUSH
48888: LD_INT 3
48890: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48891: LD_ADDR_VAR 0 4
48895: PUSH
48896: LD_VAR 0 5
48900: PPUSH
48901: LD_VAR 0 1
48905: PPUSH
48906: CALL_OW 248
48910: PPUSH
48911: CALL_OW 450
48915: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48916: LD_ADDR_VAR 0 2
48920: PUSH
48921: LD_VAR 0 3
48925: PPUSH
48926: LD_INT 1
48928: PPUSH
48929: CALL_OW 275
48933: PUSH
48934: LD_VAR 0 4
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: GREATEREQUAL
48943: PUSH
48944: LD_VAR 0 3
48948: PPUSH
48949: LD_INT 2
48951: PPUSH
48952: CALL_OW 275
48956: PUSH
48957: LD_VAR 0 4
48961: PUSH
48962: LD_INT 2
48964: ARRAY
48965: GREATEREQUAL
48966: AND
48967: PUSH
48968: LD_VAR 0 3
48972: PPUSH
48973: LD_INT 3
48975: PPUSH
48976: CALL_OW 275
48980: PUSH
48981: LD_VAR 0 4
48985: PUSH
48986: LD_INT 3
48988: ARRAY
48989: GREATEREQUAL
48990: AND
48991: ST_TO_ADDR
// end ;
48992: LD_VAR 0 2
48996: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48997: LD_INT 0
48999: PPUSH
49000: PPUSH
49001: PPUSH
// pom := GetBase ( building ) ;
49002: LD_ADDR_VAR 0 4
49006: PUSH
49007: LD_VAR 0 1
49011: PPUSH
49012: CALL_OW 274
49016: ST_TO_ADDR
// if not pom then
49017: LD_VAR 0 4
49021: NOT
49022: IFFALSE 49026
// exit ;
49024: GO 49127
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49026: LD_ADDR_VAR 0 5
49030: PUSH
49031: LD_VAR 0 2
49035: PPUSH
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 248
49045: PPUSH
49046: CALL_OW 450
49050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49051: LD_ADDR_VAR 0 3
49055: PUSH
49056: LD_VAR 0 4
49060: PPUSH
49061: LD_INT 1
49063: PPUSH
49064: CALL_OW 275
49068: PUSH
49069: LD_VAR 0 5
49073: PUSH
49074: LD_INT 1
49076: ARRAY
49077: GREATEREQUAL
49078: PUSH
49079: LD_VAR 0 4
49083: PPUSH
49084: LD_INT 2
49086: PPUSH
49087: CALL_OW 275
49091: PUSH
49092: LD_VAR 0 5
49096: PUSH
49097: LD_INT 2
49099: ARRAY
49100: GREATEREQUAL
49101: AND
49102: PUSH
49103: LD_VAR 0 4
49107: PPUSH
49108: LD_INT 3
49110: PPUSH
49111: CALL_OW 275
49115: PUSH
49116: LD_VAR 0 5
49120: PUSH
49121: LD_INT 3
49123: ARRAY
49124: GREATEREQUAL
49125: AND
49126: ST_TO_ADDR
// end ;
49127: LD_VAR 0 3
49131: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49132: LD_INT 0
49134: PPUSH
49135: PPUSH
49136: PPUSH
49137: PPUSH
49138: PPUSH
49139: PPUSH
49140: PPUSH
49141: PPUSH
49142: PPUSH
49143: PPUSH
49144: PPUSH
// result := false ;
49145: LD_ADDR_VAR 0 8
49149: PUSH
49150: LD_INT 0
49152: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49153: LD_VAR 0 5
49157: NOT
49158: PUSH
49159: LD_VAR 0 1
49163: NOT
49164: OR
49165: PUSH
49166: LD_VAR 0 2
49170: NOT
49171: OR
49172: PUSH
49173: LD_VAR 0 3
49177: NOT
49178: OR
49179: IFFALSE 49183
// exit ;
49181: GO 49997
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49183: LD_ADDR_VAR 0 14
49187: PUSH
49188: LD_VAR 0 1
49192: PPUSH
49193: LD_VAR 0 2
49197: PPUSH
49198: LD_VAR 0 3
49202: PPUSH
49203: LD_VAR 0 4
49207: PPUSH
49208: LD_VAR 0 5
49212: PUSH
49213: LD_INT 1
49215: ARRAY
49216: PPUSH
49217: CALL_OW 248
49221: PPUSH
49222: LD_INT 0
49224: PPUSH
49225: CALL 51250 0 6
49229: ST_TO_ADDR
// if not hexes then
49230: LD_VAR 0 14
49234: NOT
49235: IFFALSE 49239
// exit ;
49237: GO 49997
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49239: LD_ADDR_VAR 0 17
49243: PUSH
49244: LD_VAR 0 5
49248: PPUSH
49249: LD_INT 22
49251: PUSH
49252: LD_VAR 0 13
49256: PPUSH
49257: CALL_OW 255
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 30
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 30
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PPUSH
49298: CALL_OW 72
49302: ST_TO_ADDR
// for i = 1 to hexes do
49303: LD_ADDR_VAR 0 9
49307: PUSH
49308: DOUBLE
49309: LD_INT 1
49311: DEC
49312: ST_TO_ADDR
49313: LD_VAR 0 14
49317: PUSH
49318: FOR_TO
49319: IFFALSE 49995
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49321: LD_ADDR_VAR 0 13
49325: PUSH
49326: LD_VAR 0 14
49330: PUSH
49331: LD_VAR 0 9
49335: ARRAY
49336: PUSH
49337: LD_INT 1
49339: ARRAY
49340: PPUSH
49341: LD_VAR 0 14
49345: PUSH
49346: LD_VAR 0 9
49350: ARRAY
49351: PUSH
49352: LD_INT 2
49354: ARRAY
49355: PPUSH
49356: CALL_OW 428
49360: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49361: LD_VAR 0 14
49365: PUSH
49366: LD_VAR 0 9
49370: ARRAY
49371: PUSH
49372: LD_INT 1
49374: ARRAY
49375: PPUSH
49376: LD_VAR 0 14
49380: PUSH
49381: LD_VAR 0 9
49385: ARRAY
49386: PUSH
49387: LD_INT 2
49389: ARRAY
49390: PPUSH
49391: CALL_OW 351
49395: PUSH
49396: LD_VAR 0 14
49400: PUSH
49401: LD_VAR 0 9
49405: ARRAY
49406: PUSH
49407: LD_INT 1
49409: ARRAY
49410: PPUSH
49411: LD_VAR 0 14
49415: PUSH
49416: LD_VAR 0 9
49420: ARRAY
49421: PUSH
49422: LD_INT 2
49424: ARRAY
49425: PPUSH
49426: CALL_OW 488
49430: NOT
49431: OR
49432: PUSH
49433: LD_VAR 0 13
49437: PPUSH
49438: CALL_OW 247
49442: PUSH
49443: LD_INT 3
49445: EQUAL
49446: OR
49447: IFFALSE 49453
// exit ;
49449: POP
49450: POP
49451: GO 49997
// if not tmp then
49453: LD_VAR 0 13
49457: NOT
49458: IFFALSE 49462
// continue ;
49460: GO 49318
// result := true ;
49462: LD_ADDR_VAR 0 8
49466: PUSH
49467: LD_INT 1
49469: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49470: LD_VAR 0 6
49474: PUSH
49475: LD_VAR 0 13
49479: PPUSH
49480: CALL_OW 247
49484: PUSH
49485: LD_INT 2
49487: EQUAL
49488: AND
49489: PUSH
49490: LD_VAR 0 13
49494: PPUSH
49495: CALL_OW 263
49499: PUSH
49500: LD_INT 1
49502: EQUAL
49503: AND
49504: IFFALSE 49668
// begin if IsDrivenBy ( tmp ) then
49506: LD_VAR 0 13
49510: PPUSH
49511: CALL_OW 311
49515: IFFALSE 49519
// continue ;
49517: GO 49318
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49519: LD_VAR 0 6
49523: PPUSH
49524: LD_INT 3
49526: PUSH
49527: LD_INT 60
49529: PUSH
49530: EMPTY
49531: LIST
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: LD_INT 55
49542: PUSH
49543: EMPTY
49544: LIST
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PPUSH
49554: CALL_OW 72
49558: IFFALSE 49666
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49560: LD_ADDR_VAR 0 18
49564: PUSH
49565: LD_VAR 0 6
49569: PPUSH
49570: LD_INT 3
49572: PUSH
49573: LD_INT 60
49575: PUSH
49576: EMPTY
49577: LIST
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: LD_INT 55
49588: PUSH
49589: EMPTY
49590: LIST
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PPUSH
49600: CALL_OW 72
49604: PUSH
49605: LD_INT 1
49607: ARRAY
49608: ST_TO_ADDR
// if IsInUnit ( driver ) then
49609: LD_VAR 0 18
49613: PPUSH
49614: CALL_OW 310
49618: IFFALSE 49629
// ComExit ( driver ) ;
49620: LD_VAR 0 18
49624: PPUSH
49625: CALL 75051 0 1
// AddComEnterUnit ( driver , tmp ) ;
49629: LD_VAR 0 18
49633: PPUSH
49634: LD_VAR 0 13
49638: PPUSH
49639: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49643: LD_VAR 0 18
49647: PPUSH
49648: LD_VAR 0 7
49652: PPUSH
49653: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49657: LD_VAR 0 18
49661: PPUSH
49662: CALL_OW 181
// end ; continue ;
49666: GO 49318
// end ; if not cleaners or not tmp in cleaners then
49668: LD_VAR 0 6
49672: NOT
49673: PUSH
49674: LD_VAR 0 13
49678: PUSH
49679: LD_VAR 0 6
49683: IN
49684: NOT
49685: OR
49686: IFFALSE 49993
// begin if dep then
49688: LD_VAR 0 17
49692: IFFALSE 49828
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49694: LD_ADDR_VAR 0 16
49698: PUSH
49699: LD_VAR 0 17
49703: PUSH
49704: LD_INT 1
49706: ARRAY
49707: PPUSH
49708: CALL_OW 250
49712: PPUSH
49713: LD_VAR 0 17
49717: PUSH
49718: LD_INT 1
49720: ARRAY
49721: PPUSH
49722: CALL_OW 254
49726: PPUSH
49727: LD_INT 5
49729: PPUSH
49730: CALL_OW 272
49734: PUSH
49735: LD_VAR 0 17
49739: PUSH
49740: LD_INT 1
49742: ARRAY
49743: PPUSH
49744: CALL_OW 251
49748: PPUSH
49749: LD_VAR 0 17
49753: PUSH
49754: LD_INT 1
49756: ARRAY
49757: PPUSH
49758: CALL_OW 254
49762: PPUSH
49763: LD_INT 5
49765: PPUSH
49766: CALL_OW 273
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49775: LD_VAR 0 16
49779: PUSH
49780: LD_INT 1
49782: ARRAY
49783: PPUSH
49784: LD_VAR 0 16
49788: PUSH
49789: LD_INT 2
49791: ARRAY
49792: PPUSH
49793: CALL_OW 488
49797: IFFALSE 49828
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49799: LD_VAR 0 13
49803: PPUSH
49804: LD_VAR 0 16
49808: PUSH
49809: LD_INT 1
49811: ARRAY
49812: PPUSH
49813: LD_VAR 0 16
49817: PUSH
49818: LD_INT 2
49820: ARRAY
49821: PPUSH
49822: CALL_OW 111
// continue ;
49826: GO 49318
// end ; end ; r := GetDir ( tmp ) ;
49828: LD_ADDR_VAR 0 15
49832: PUSH
49833: LD_VAR 0 13
49837: PPUSH
49838: CALL_OW 254
49842: ST_TO_ADDR
// if r = 5 then
49843: LD_VAR 0 15
49847: PUSH
49848: LD_INT 5
49850: EQUAL
49851: IFFALSE 49861
// r := 0 ;
49853: LD_ADDR_VAR 0 15
49857: PUSH
49858: LD_INT 0
49860: ST_TO_ADDR
// for j = r to 5 do
49861: LD_ADDR_VAR 0 10
49865: PUSH
49866: DOUBLE
49867: LD_VAR 0 15
49871: DEC
49872: ST_TO_ADDR
49873: LD_INT 5
49875: PUSH
49876: FOR_TO
49877: IFFALSE 49991
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49879: LD_ADDR_VAR 0 11
49883: PUSH
49884: LD_VAR 0 13
49888: PPUSH
49889: CALL_OW 250
49893: PPUSH
49894: LD_VAR 0 10
49898: PPUSH
49899: LD_INT 2
49901: PPUSH
49902: CALL_OW 272
49906: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49907: LD_ADDR_VAR 0 12
49911: PUSH
49912: LD_VAR 0 13
49916: PPUSH
49917: CALL_OW 251
49921: PPUSH
49922: LD_VAR 0 10
49926: PPUSH
49927: LD_INT 2
49929: PPUSH
49930: CALL_OW 273
49934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49935: LD_VAR 0 11
49939: PPUSH
49940: LD_VAR 0 12
49944: PPUSH
49945: CALL_OW 488
49949: PUSH
49950: LD_VAR 0 11
49954: PPUSH
49955: LD_VAR 0 12
49959: PPUSH
49960: CALL_OW 428
49964: NOT
49965: AND
49966: IFFALSE 49989
// begin ComMoveXY ( tmp , _x , _y ) ;
49968: LD_VAR 0 13
49972: PPUSH
49973: LD_VAR 0 11
49977: PPUSH
49978: LD_VAR 0 12
49982: PPUSH
49983: CALL_OW 111
// break ;
49987: GO 49991
// end ; end ;
49989: GO 49876
49991: POP
49992: POP
// end ; end ;
49993: GO 49318
49995: POP
49996: POP
// end ;
49997: LD_VAR 0 8
50001: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50002: LD_INT 0
50004: PPUSH
// result := true ;
50005: LD_ADDR_VAR 0 3
50009: PUSH
50010: LD_INT 1
50012: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50013: LD_VAR 0 2
50017: PUSH
50018: LD_INT 24
50020: DOUBLE
50021: EQUAL
50022: IFTRUE 50032
50024: LD_INT 33
50026: DOUBLE
50027: EQUAL
50028: IFTRUE 50032
50030: GO 50057
50032: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50033: LD_ADDR_VAR 0 3
50037: PUSH
50038: LD_INT 32
50040: PPUSH
50041: LD_VAR 0 1
50045: PPUSH
50046: CALL_OW 321
50050: PUSH
50051: LD_INT 2
50053: EQUAL
50054: ST_TO_ADDR
50055: GO 50373
50057: LD_INT 20
50059: DOUBLE
50060: EQUAL
50061: IFTRUE 50065
50063: GO 50090
50065: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50066: LD_ADDR_VAR 0 3
50070: PUSH
50071: LD_INT 6
50073: PPUSH
50074: LD_VAR 0 1
50078: PPUSH
50079: CALL_OW 321
50083: PUSH
50084: LD_INT 2
50086: EQUAL
50087: ST_TO_ADDR
50088: GO 50373
50090: LD_INT 22
50092: DOUBLE
50093: EQUAL
50094: IFTRUE 50104
50096: LD_INT 36
50098: DOUBLE
50099: EQUAL
50100: IFTRUE 50104
50102: GO 50129
50104: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50105: LD_ADDR_VAR 0 3
50109: PUSH
50110: LD_INT 15
50112: PPUSH
50113: LD_VAR 0 1
50117: PPUSH
50118: CALL_OW 321
50122: PUSH
50123: LD_INT 2
50125: EQUAL
50126: ST_TO_ADDR
50127: GO 50373
50129: LD_INT 30
50131: DOUBLE
50132: EQUAL
50133: IFTRUE 50137
50135: GO 50162
50137: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50138: LD_ADDR_VAR 0 3
50142: PUSH
50143: LD_INT 20
50145: PPUSH
50146: LD_VAR 0 1
50150: PPUSH
50151: CALL_OW 321
50155: PUSH
50156: LD_INT 2
50158: EQUAL
50159: ST_TO_ADDR
50160: GO 50373
50162: LD_INT 28
50164: DOUBLE
50165: EQUAL
50166: IFTRUE 50176
50168: LD_INT 21
50170: DOUBLE
50171: EQUAL
50172: IFTRUE 50176
50174: GO 50201
50176: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50177: LD_ADDR_VAR 0 3
50181: PUSH
50182: LD_INT 21
50184: PPUSH
50185: LD_VAR 0 1
50189: PPUSH
50190: CALL_OW 321
50194: PUSH
50195: LD_INT 2
50197: EQUAL
50198: ST_TO_ADDR
50199: GO 50373
50201: LD_INT 16
50203: DOUBLE
50204: EQUAL
50205: IFTRUE 50209
50207: GO 50234
50209: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50210: LD_ADDR_VAR 0 3
50214: PUSH
50215: LD_INT 84
50217: PPUSH
50218: LD_VAR 0 1
50222: PPUSH
50223: CALL_OW 321
50227: PUSH
50228: LD_INT 2
50230: EQUAL
50231: ST_TO_ADDR
50232: GO 50373
50234: LD_INT 19
50236: DOUBLE
50237: EQUAL
50238: IFTRUE 50248
50240: LD_INT 23
50242: DOUBLE
50243: EQUAL
50244: IFTRUE 50248
50246: GO 50273
50248: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50249: LD_ADDR_VAR 0 3
50253: PUSH
50254: LD_INT 83
50256: PPUSH
50257: LD_VAR 0 1
50261: PPUSH
50262: CALL_OW 321
50266: PUSH
50267: LD_INT 2
50269: EQUAL
50270: ST_TO_ADDR
50271: GO 50373
50273: LD_INT 17
50275: DOUBLE
50276: EQUAL
50277: IFTRUE 50281
50279: GO 50306
50281: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50282: LD_ADDR_VAR 0 3
50286: PUSH
50287: LD_INT 39
50289: PPUSH
50290: LD_VAR 0 1
50294: PPUSH
50295: CALL_OW 321
50299: PUSH
50300: LD_INT 2
50302: EQUAL
50303: ST_TO_ADDR
50304: GO 50373
50306: LD_INT 18
50308: DOUBLE
50309: EQUAL
50310: IFTRUE 50314
50312: GO 50339
50314: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50315: LD_ADDR_VAR 0 3
50319: PUSH
50320: LD_INT 40
50322: PPUSH
50323: LD_VAR 0 1
50327: PPUSH
50328: CALL_OW 321
50332: PUSH
50333: LD_INT 2
50335: EQUAL
50336: ST_TO_ADDR
50337: GO 50373
50339: LD_INT 27
50341: DOUBLE
50342: EQUAL
50343: IFTRUE 50347
50345: GO 50372
50347: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50348: LD_ADDR_VAR 0 3
50352: PUSH
50353: LD_INT 35
50355: PPUSH
50356: LD_VAR 0 1
50360: PPUSH
50361: CALL_OW 321
50365: PUSH
50366: LD_INT 2
50368: EQUAL
50369: ST_TO_ADDR
50370: GO 50373
50372: POP
// end ;
50373: LD_VAR 0 3
50377: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50378: LD_INT 0
50380: PPUSH
50381: PPUSH
50382: PPUSH
50383: PPUSH
50384: PPUSH
50385: PPUSH
50386: PPUSH
50387: PPUSH
50388: PPUSH
50389: PPUSH
50390: PPUSH
// result := false ;
50391: LD_ADDR_VAR 0 6
50395: PUSH
50396: LD_INT 0
50398: ST_TO_ADDR
// if btype = b_depot then
50399: LD_VAR 0 2
50403: PUSH
50404: LD_INT 0
50406: EQUAL
50407: IFFALSE 50419
// begin result := true ;
50409: LD_ADDR_VAR 0 6
50413: PUSH
50414: LD_INT 1
50416: ST_TO_ADDR
// exit ;
50417: GO 51245
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50419: LD_VAR 0 1
50423: NOT
50424: PUSH
50425: LD_VAR 0 1
50429: PPUSH
50430: CALL_OW 266
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: IN
50445: NOT
50446: OR
50447: PUSH
50448: LD_VAR 0 2
50452: NOT
50453: OR
50454: PUSH
50455: LD_VAR 0 5
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: LD_INT 4
50474: PUSH
50475: LD_INT 5
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: IN
50486: NOT
50487: OR
50488: PUSH
50489: LD_VAR 0 3
50493: PPUSH
50494: LD_VAR 0 4
50498: PPUSH
50499: CALL_OW 488
50503: NOT
50504: OR
50505: IFFALSE 50509
// exit ;
50507: GO 51245
// side := GetSide ( depot ) ;
50509: LD_ADDR_VAR 0 9
50513: PUSH
50514: LD_VAR 0 1
50518: PPUSH
50519: CALL_OW 255
50523: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50524: LD_VAR 0 9
50528: PPUSH
50529: LD_VAR 0 2
50533: PPUSH
50534: CALL 50002 0 2
50538: NOT
50539: IFFALSE 50543
// exit ;
50541: GO 51245
// pom := GetBase ( depot ) ;
50543: LD_ADDR_VAR 0 10
50547: PUSH
50548: LD_VAR 0 1
50552: PPUSH
50553: CALL_OW 274
50557: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50558: LD_ADDR_VAR 0 11
50562: PUSH
50563: LD_VAR 0 2
50567: PPUSH
50568: LD_VAR 0 1
50572: PPUSH
50573: CALL_OW 248
50577: PPUSH
50578: CALL_OW 450
50582: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50583: LD_VAR 0 10
50587: PPUSH
50588: LD_INT 1
50590: PPUSH
50591: CALL_OW 275
50595: PUSH
50596: LD_VAR 0 11
50600: PUSH
50601: LD_INT 1
50603: ARRAY
50604: GREATEREQUAL
50605: PUSH
50606: LD_VAR 0 10
50610: PPUSH
50611: LD_INT 2
50613: PPUSH
50614: CALL_OW 275
50618: PUSH
50619: LD_VAR 0 11
50623: PUSH
50624: LD_INT 2
50626: ARRAY
50627: GREATEREQUAL
50628: AND
50629: PUSH
50630: LD_VAR 0 10
50634: PPUSH
50635: LD_INT 3
50637: PPUSH
50638: CALL_OW 275
50642: PUSH
50643: LD_VAR 0 11
50647: PUSH
50648: LD_INT 3
50650: ARRAY
50651: GREATEREQUAL
50652: AND
50653: NOT
50654: IFFALSE 50658
// exit ;
50656: GO 51245
// if GetBType ( depot ) = b_depot then
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 266
50667: PUSH
50668: LD_INT 0
50670: EQUAL
50671: IFFALSE 50683
// dist := 28 else
50673: LD_ADDR_VAR 0 14
50677: PUSH
50678: LD_INT 28
50680: ST_TO_ADDR
50681: GO 50691
// dist := 36 ;
50683: LD_ADDR_VAR 0 14
50687: PUSH
50688: LD_INT 36
50690: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50691: LD_VAR 0 1
50695: PPUSH
50696: LD_VAR 0 3
50700: PPUSH
50701: LD_VAR 0 4
50705: PPUSH
50706: CALL_OW 297
50710: PUSH
50711: LD_VAR 0 14
50715: GREATER
50716: IFFALSE 50720
// exit ;
50718: GO 51245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50720: LD_ADDR_VAR 0 12
50724: PUSH
50725: LD_VAR 0 2
50729: PPUSH
50730: LD_VAR 0 3
50734: PPUSH
50735: LD_VAR 0 4
50739: PPUSH
50740: LD_VAR 0 5
50744: PPUSH
50745: LD_VAR 0 1
50749: PPUSH
50750: CALL_OW 248
50754: PPUSH
50755: LD_INT 0
50757: PPUSH
50758: CALL 51250 0 6
50762: ST_TO_ADDR
// if not hexes then
50763: LD_VAR 0 12
50767: NOT
50768: IFFALSE 50772
// exit ;
50770: GO 51245
// hex := GetHexInfo ( x , y ) ;
50772: LD_ADDR_VAR 0 15
50776: PUSH
50777: LD_VAR 0 3
50781: PPUSH
50782: LD_VAR 0 4
50786: PPUSH
50787: CALL_OW 546
50791: ST_TO_ADDR
// if hex [ 1 ] then
50792: LD_VAR 0 15
50796: PUSH
50797: LD_INT 1
50799: ARRAY
50800: IFFALSE 50804
// exit ;
50802: GO 51245
// height := hex [ 2 ] ;
50804: LD_ADDR_VAR 0 13
50808: PUSH
50809: LD_VAR 0 15
50813: PUSH
50814: LD_INT 2
50816: ARRAY
50817: ST_TO_ADDR
// for i = 1 to hexes do
50818: LD_ADDR_VAR 0 7
50822: PUSH
50823: DOUBLE
50824: LD_INT 1
50826: DEC
50827: ST_TO_ADDR
50828: LD_VAR 0 12
50832: PUSH
50833: FOR_TO
50834: IFFALSE 51164
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50836: LD_VAR 0 12
50840: PUSH
50841: LD_VAR 0 7
50845: ARRAY
50846: PUSH
50847: LD_INT 1
50849: ARRAY
50850: PPUSH
50851: LD_VAR 0 12
50855: PUSH
50856: LD_VAR 0 7
50860: ARRAY
50861: PUSH
50862: LD_INT 2
50864: ARRAY
50865: PPUSH
50866: CALL_OW 488
50870: NOT
50871: PUSH
50872: LD_VAR 0 12
50876: PUSH
50877: LD_VAR 0 7
50881: ARRAY
50882: PUSH
50883: LD_INT 1
50885: ARRAY
50886: PPUSH
50887: LD_VAR 0 12
50891: PUSH
50892: LD_VAR 0 7
50896: ARRAY
50897: PUSH
50898: LD_INT 2
50900: ARRAY
50901: PPUSH
50902: CALL_OW 428
50906: PUSH
50907: LD_INT 0
50909: GREATER
50910: OR
50911: PUSH
50912: LD_VAR 0 12
50916: PUSH
50917: LD_VAR 0 7
50921: ARRAY
50922: PUSH
50923: LD_INT 1
50925: ARRAY
50926: PPUSH
50927: LD_VAR 0 12
50931: PUSH
50932: LD_VAR 0 7
50936: ARRAY
50937: PUSH
50938: LD_INT 2
50940: ARRAY
50941: PPUSH
50942: CALL_OW 351
50946: OR
50947: IFFALSE 50953
// exit ;
50949: POP
50950: POP
50951: GO 51245
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50953: LD_ADDR_VAR 0 8
50957: PUSH
50958: LD_VAR 0 12
50962: PUSH
50963: LD_VAR 0 7
50967: ARRAY
50968: PUSH
50969: LD_INT 1
50971: ARRAY
50972: PPUSH
50973: LD_VAR 0 12
50977: PUSH
50978: LD_VAR 0 7
50982: ARRAY
50983: PUSH
50984: LD_INT 2
50986: ARRAY
50987: PPUSH
50988: CALL_OW 546
50992: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50993: LD_VAR 0 8
50997: PUSH
50998: LD_INT 1
51000: ARRAY
51001: PUSH
51002: LD_VAR 0 8
51006: PUSH
51007: LD_INT 2
51009: ARRAY
51010: PUSH
51011: LD_VAR 0 13
51015: PUSH
51016: LD_INT 2
51018: PLUS
51019: GREATER
51020: OR
51021: PUSH
51022: LD_VAR 0 8
51026: PUSH
51027: LD_INT 2
51029: ARRAY
51030: PUSH
51031: LD_VAR 0 13
51035: PUSH
51036: LD_INT 2
51038: MINUS
51039: LESS
51040: OR
51041: PUSH
51042: LD_VAR 0 8
51046: PUSH
51047: LD_INT 3
51049: ARRAY
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 8
51056: PUSH
51057: LD_INT 9
51059: PUSH
51060: LD_INT 10
51062: PUSH
51063: LD_INT 11
51065: PUSH
51066: LD_INT 12
51068: PUSH
51069: LD_INT 13
51071: PUSH
51072: LD_INT 16
51074: PUSH
51075: LD_INT 17
51077: PUSH
51078: LD_INT 18
51080: PUSH
51081: LD_INT 19
51083: PUSH
51084: LD_INT 20
51086: PUSH
51087: LD_INT 21
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: IN
51105: NOT
51106: OR
51107: PUSH
51108: LD_VAR 0 8
51112: PUSH
51113: LD_INT 5
51115: ARRAY
51116: NOT
51117: OR
51118: PUSH
51119: LD_VAR 0 8
51123: PUSH
51124: LD_INT 6
51126: ARRAY
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 7
51136: PUSH
51137: LD_INT 9
51139: PUSH
51140: LD_INT 10
51142: PUSH
51143: LD_INT 11
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: IN
51154: NOT
51155: OR
51156: IFFALSE 51162
// exit ;
51158: POP
51159: POP
51160: GO 51245
// end ;
51162: GO 50833
51164: POP
51165: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51166: LD_VAR 0 9
51170: PPUSH
51171: LD_VAR 0 3
51175: PPUSH
51176: LD_VAR 0 4
51180: PPUSH
51181: LD_INT 20
51183: PPUSH
51184: CALL 43168 0 4
51188: PUSH
51189: LD_INT 4
51191: ARRAY
51192: IFFALSE 51196
// exit ;
51194: GO 51245
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51196: LD_VAR 0 2
51200: PUSH
51201: LD_INT 29
51203: PUSH
51204: LD_INT 30
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: IN
51211: PUSH
51212: LD_VAR 0 3
51216: PPUSH
51217: LD_VAR 0 4
51221: PPUSH
51222: LD_VAR 0 9
51226: PPUSH
51227: CALL_OW 440
51231: NOT
51232: AND
51233: IFFALSE 51237
// exit ;
51235: GO 51245
// result := true ;
51237: LD_ADDR_VAR 0 6
51241: PUSH
51242: LD_INT 1
51244: ST_TO_ADDR
// end ;
51245: LD_VAR 0 6
51249: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51250: LD_INT 0
51252: PPUSH
51253: PPUSH
51254: PPUSH
51255: PPUSH
51256: PPUSH
51257: PPUSH
51258: PPUSH
51259: PPUSH
51260: PPUSH
51261: PPUSH
51262: PPUSH
51263: PPUSH
51264: PPUSH
51265: PPUSH
51266: PPUSH
51267: PPUSH
51268: PPUSH
51269: PPUSH
51270: PPUSH
51271: PPUSH
51272: PPUSH
51273: PPUSH
51274: PPUSH
51275: PPUSH
51276: PPUSH
51277: PPUSH
51278: PPUSH
51279: PPUSH
51280: PPUSH
51281: PPUSH
51282: PPUSH
51283: PPUSH
51284: PPUSH
51285: PPUSH
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
51291: PPUSH
51292: PPUSH
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
51297: PPUSH
51298: PPUSH
51299: PPUSH
51300: PPUSH
51301: PPUSH
51302: PPUSH
51303: PPUSH
51304: PPUSH
51305: PPUSH
51306: PPUSH
51307: PPUSH
51308: PPUSH
51309: PPUSH
// result = [ ] ;
51310: LD_ADDR_VAR 0 7
51314: PUSH
51315: EMPTY
51316: ST_TO_ADDR
// temp_list = [ ] ;
51317: LD_ADDR_VAR 0 9
51321: PUSH
51322: EMPTY
51323: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51324: LD_VAR 0 4
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: LD_INT 4
51343: PUSH
51344: LD_INT 5
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: IN
51355: NOT
51356: PUSH
51357: LD_VAR 0 1
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: IN
51372: PUSH
51373: LD_VAR 0 5
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: LIST
51391: IN
51392: NOT
51393: AND
51394: OR
51395: IFFALSE 51399
// exit ;
51397: GO 69790
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51399: LD_VAR 0 1
51403: PUSH
51404: LD_INT 6
51406: PUSH
51407: LD_INT 7
51409: PUSH
51410: LD_INT 8
51412: PUSH
51413: LD_INT 13
51415: PUSH
51416: LD_INT 12
51418: PUSH
51419: LD_INT 15
51421: PUSH
51422: LD_INT 11
51424: PUSH
51425: LD_INT 14
51427: PUSH
51428: LD_INT 10
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: IN
51442: IFFALSE 51452
// btype = b_lab ;
51444: LD_ADDR_VAR 0 1
51448: PUSH
51449: LD_INT 6
51451: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51452: LD_VAR 0 6
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: IN
51471: NOT
51472: PUSH
51473: LD_VAR 0 1
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: LD_INT 6
51492: PUSH
51493: LD_INT 36
51495: PUSH
51496: LD_INT 4
51498: PUSH
51499: LD_INT 5
51501: PUSH
51502: LD_INT 31
51504: PUSH
51505: LD_INT 32
51507: PUSH
51508: LD_INT 33
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: IN
51524: NOT
51525: PUSH
51526: LD_VAR 0 6
51530: PUSH
51531: LD_INT 1
51533: EQUAL
51534: AND
51535: OR
51536: PUSH
51537: LD_VAR 0 1
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: IN
51552: NOT
51553: PUSH
51554: LD_VAR 0 6
51558: PUSH
51559: LD_INT 2
51561: EQUAL
51562: AND
51563: OR
51564: IFFALSE 51574
// mode = 0 ;
51566: LD_ADDR_VAR 0 6
51570: PUSH
51571: LD_INT 0
51573: ST_TO_ADDR
// case mode of 0 :
51574: LD_VAR 0 6
51578: PUSH
51579: LD_INT 0
51581: DOUBLE
51582: EQUAL
51583: IFTRUE 51587
51585: GO 63040
51587: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51588: LD_ADDR_VAR 0 11
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51781: LD_ADDR_VAR 0 12
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51977: LD_ADDR_VAR 0 13
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52176: LD_ADDR_VAR 0 14
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52372: LD_ADDR_VAR 0 15
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52565: LD_ADDR_VAR 0 16
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52758: LD_ADDR_VAR 0 17
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52988: LD_ADDR_VAR 0 18
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53218: LD_ADDR_VAR 0 19
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53448: LD_ADDR_VAR 0 20
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53678: LD_ADDR_VAR 0 21
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53908: LD_ADDR_VAR 0 22
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54138: LD_ADDR_VAR 0 23
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 3
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54418: LD_ADDR_VAR 0 24
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54694: LD_ADDR_VAR 0 25
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 3
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 3
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54968: LD_ADDR_VAR 0 26
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 3
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55244: LD_ADDR_VAR 0 27
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55524: LD_ADDR_VAR 0 28
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55806: LD_ADDR_VAR 0 29
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 3
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56085: LD_ADDR_VAR 0 30
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56363: LD_ADDR_VAR 0 31
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 3
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56641: LD_ADDR_VAR 0 32
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 3
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56919: LD_ADDR_VAR 0 33
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57198: LD_ADDR_VAR 0 34
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57478: LD_ADDR_VAR 0 35
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57590: LD_ADDR_VAR 0 36
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57702: LD_ADDR_VAR 0 37
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57814: LD_ADDR_VAR 0 38
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57926: LD_ADDR_VAR 0 39
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58038: LD_ADDR_VAR 0 40
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58150: LD_ADDR_VAR 0 41
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: NEG
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: LD_INT 3
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 3
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 3
58424: NEG
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: LD_INT 3
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58500: LD_ADDR_VAR 0 42
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: LD_INT 3
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 3
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 3
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58850: LD_ADDR_VAR 0 43
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59198: LD_ADDR_VAR 0 44
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 2
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 3
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 3
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59548: LD_ADDR_VAR 0 45
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: NEG
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 2
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 3
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 3
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59898: LD_ADDR_VAR 0 46
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 3
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: NEG
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60246: LD_ADDR_VAR 0 47
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60397: LD_ADDR_VAR 0 48
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60544: LD_ADDR_VAR 0 49
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60688: LD_ADDR_VAR 0 50
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60832: LD_ADDR_VAR 0 51
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60979: LD_ADDR_VAR 0 52
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 2
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61130: LD_ADDR_VAR 0 53
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: LD_INT 2
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61360: LD_ADDR_VAR 0 54
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 2
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: NEG
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: NEG
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: NEG
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61590: LD_ADDR_VAR 0 55
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 2
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 2
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: LD_INT 2
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 2
61789: NEG
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61820: LD_ADDR_VAR 0 56
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: LD_INT 2
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62050: LD_ADDR_VAR 0 57
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62280: LD_ADDR_VAR 0 58
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: LD_INT 2
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62510: LD_ADDR_VAR 0 59
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62598: LD_ADDR_VAR 0 60
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62686: LD_ADDR_VAR 0 61
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62774: LD_ADDR_VAR 0 62
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 1
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62862: LD_ADDR_VAR 0 63
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62950: LD_ADDR_VAR 0 64
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: ST_TO_ADDR
// end ; 1 :
63038: GO 68935
63040: LD_INT 1
63042: DOUBLE
63043: EQUAL
63044: IFTRUE 63048
63046: GO 65671
63048: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63049: LD_ADDR_VAR 0 11
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 3
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63093: LD_ADDR_VAR 0 12
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63134: LD_ADDR_VAR 0 13
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63174: LD_ADDR_VAR 0 14
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 3
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63215: LD_ADDR_VAR 0 15
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 3
63233: NEG
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 3
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63259: LD_ADDR_VAR 0 16
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 3
63290: NEG
63291: PUSH
63292: LD_INT 3
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63305: LD_ADDR_VAR 0 17
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: LD_INT 2
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63349: LD_ADDR_VAR 0 18
63353: PUSH
63354: LD_INT 2
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 3
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 3
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: LIST
63389: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63390: LD_ADDR_VAR 0 19
63394: PUSH
63395: LD_INT 3
63397: PUSH
63398: LD_INT 2
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 3
63407: PUSH
63408: LD_INT 3
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 3
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63430: LD_ADDR_VAR 0 20
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 3
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63471: LD_ADDR_VAR 0 21
63475: PUSH
63476: LD_INT 2
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 3
63489: NEG
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: LIST
63514: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63515: LD_ADDR_VAR 0 22
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: LD_INT 3
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 3
63534: NEG
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 3
63546: NEG
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: LIST
63560: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63561: LD_ADDR_VAR 0 23
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 3
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 4
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63605: LD_ADDR_VAR 0 24
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 3
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 4
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: LIST
63645: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63646: LD_ADDR_VAR 0 25
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: LD_INT 3
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 4
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: LD_INT 4
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: LIST
63685: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63686: LD_ADDR_VAR 0 26
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 4
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63727: LD_ADDR_VAR 0 27
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 3
63745: NEG
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 4
63756: NEG
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: LIST
63770: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63771: LD_ADDR_VAR 0 28
63775: PUSH
63776: LD_INT 3
63778: NEG
63779: PUSH
63780: LD_INT 3
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 3
63790: NEG
63791: PUSH
63792: LD_INT 4
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 4
63802: NEG
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63817: LD_ADDR_VAR 0 29
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 3
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 3
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: LD_INT 4
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: LD_INT 4
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 3
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: LD_INT 5
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: LD_INT 5
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: LD_INT 4
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 6
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 6
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: LD_INT 5
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63972: LD_ADDR_VAR 0 30
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 3
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 3
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 4
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 4
64031: PUSH
64032: LD_INT 1
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 4
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 5
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 5
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 5
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 6
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 6
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64115: LD_ADDR_VAR 0 31
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 3
64132: PUSH
64133: LD_INT 3
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 2
64142: PUSH
64143: LD_INT 3
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 4
64152: PUSH
64153: LD_INT 3
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 4
64162: PUSH
64163: LD_INT 4
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 3
64172: PUSH
64173: LD_INT 4
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 5
64182: PUSH
64183: LD_INT 4
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 5
64192: PUSH
64193: LD_INT 5
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 4
64202: PUSH
64203: LD_INT 5
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 6
64212: PUSH
64213: LD_INT 5
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 6
64222: PUSH
64223: LD_INT 6
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 5
64232: PUSH
64233: LD_INT 6
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64254: LD_ADDR_VAR 0 32
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 3
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: LD_INT 4
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: LD_INT 4
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: LD_INT 5
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: LD_INT 5
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: LD_INT 4
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 6
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 6
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: LD_INT 5
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64397: LD_ADDR_VAR 0 33
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 3
64415: NEG
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 3
64426: NEG
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 3
64438: NEG
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 4
64449: NEG
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 4
64460: NEG
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 4
64472: NEG
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 5
64483: NEG
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 5
64494: NEG
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 5
64506: NEG
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 6
64517: NEG
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 6
64528: NEG
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64552: LD_ADDR_VAR 0 34
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: LD_INT 3
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: LD_INT 3
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 3
64595: NEG
64596: PUSH
64597: LD_INT 4
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 4
64607: NEG
64608: PUSH
64609: LD_INT 3
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 4
64619: NEG
64620: PUSH
64621: LD_INT 4
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 4
64631: NEG
64632: PUSH
64633: LD_INT 5
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 5
64643: NEG
64644: PUSH
64645: LD_INT 4
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 5
64655: NEG
64656: PUSH
64657: LD_INT 5
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 5
64667: NEG
64668: PUSH
64669: LD_INT 6
64671: NEG
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 6
64679: NEG
64680: PUSH
64681: LD_INT 5
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 6
64691: NEG
64692: PUSH
64693: LD_INT 6
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64715: LD_ADDR_VAR 0 41
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 2
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: LD_INT 3
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64759: LD_ADDR_VAR 0 42
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 3
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64800: LD_ADDR_VAR 0 43
64804: PUSH
64805: LD_INT 2
64807: PUSH
64808: LD_INT 2
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: LIST
64839: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64840: LD_ADDR_VAR 0 44
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: LD_INT 3
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64881: LD_ADDR_VAR 0 45
64885: PUSH
64886: LD_INT 2
64888: NEG
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: NEG
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 3
64910: NEG
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64925: LD_ADDR_VAR 0 46
64929: PUSH
64930: LD_INT 2
64932: NEG
64933: PUSH
64934: LD_INT 2
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 3
64956: NEG
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: LIST
64970: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64971: LD_ADDR_VAR 0 47
64975: PUSH
64976: LD_INT 2
64978: NEG
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65004: LD_ADDR_VAR 0 48
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65035: LD_ADDR_VAR 0 49
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 3
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65064: LD_ADDR_VAR 0 50
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65093: LD_ADDR_VAR 0 51
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65124: LD_ADDR_VAR 0 52
65128: PUSH
65129: LD_INT 3
65131: NEG
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 3
65143: NEG
65144: PUSH
65145: LD_INT 2
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65157: LD_ADDR_VAR 0 53
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: LD_INT 3
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65201: LD_ADDR_VAR 0 54
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 3
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65242: LD_ADDR_VAR 0 55
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65282: LD_ADDR_VAR 0 56
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: LD_INT 3
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: LD_INT 3
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: LD_INT 2
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65323: LD_ADDR_VAR 0 57
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 3
65341: NEG
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65367: LD_ADDR_VAR 0 58
65371: PUSH
65372: LD_INT 2
65374: NEG
65375: PUSH
65376: LD_INT 3
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 3
65386: NEG
65387: PUSH
65388: LD_INT 2
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 3
65398: NEG
65399: PUSH
65400: LD_INT 3
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65413: LD_ADDR_VAR 0 59
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: LD_INT 2
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: LD_INT 2
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65457: LD_ADDR_VAR 0 60
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 2
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65498: LD_ADDR_VAR 0 61
65502: PUSH
65503: LD_INT 2
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 2
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: LD_INT 2
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: LIST
65537: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65538: LD_ADDR_VAR 0 62
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: LD_INT 2
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65579: LD_ADDR_VAR 0 63
65583: PUSH
65584: LD_INT 1
65586: NEG
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 2
65597: NEG
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 2
65608: NEG
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: LIST
65622: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65623: LD_ADDR_VAR 0 64
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 2
65642: NEG
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 2
65654: NEG
65655: PUSH
65656: LD_INT 2
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: ST_TO_ADDR
// end ; 2 :
65669: GO 68935
65671: LD_INT 2
65673: DOUBLE
65674: EQUAL
65675: IFTRUE 65679
65677: GO 68934
65679: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65680: LD_ADDR_VAR 0 29
65684: PUSH
65685: LD_INT 4
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 4
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 5
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 5
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 4
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 3
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 3
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 3
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 5
65770: PUSH
65771: LD_INT 2
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 3
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 4
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 4
65810: PUSH
65811: LD_INT 4
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: LD_INT 4
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 2
65830: PUSH
65831: LD_INT 3
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 2
65840: PUSH
65841: LD_INT 2
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 4
65850: PUSH
65851: LD_INT 2
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 2
65860: PUSH
65861: LD_INT 4
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: LD_INT 4
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 3
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: PUSH
65891: LD_INT 4
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: PUSH
65901: LD_INT 5
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: LD_INT 5
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: LD_INT 4
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: LD_INT 3
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 2
65942: PUSH
65943: LD_INT 5
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 2
65952: NEG
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: NEG
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: NEG
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 2
65986: NEG
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 2
65997: NEG
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 3
66008: NEG
66009: PUSH
66010: LD_INT 1
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 4
66019: NEG
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 4
66030: NEG
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 4
66042: NEG
66043: PUSH
66044: LD_INT 2
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 2
66054: NEG
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 4
66065: NEG
66066: PUSH
66067: LD_INT 4
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 4
66077: NEG
66078: PUSH
66079: LD_INT 5
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 3
66089: NEG
66090: PUSH
66091: LD_INT 4
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 3
66101: NEG
66102: PUSH
66103: LD_INT 3
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 4
66113: NEG
66114: PUSH
66115: LD_INT 3
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 5
66125: NEG
66126: PUSH
66127: LD_INT 4
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 5
66137: NEG
66138: PUSH
66139: LD_INT 5
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 3
66149: NEG
66150: PUSH
66151: LD_INT 5
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 5
66161: NEG
66162: PUSH
66163: LD_INT 3
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66218: LD_ADDR_VAR 0 30
66222: PUSH
66223: LD_INT 4
66225: PUSH
66226: LD_INT 4
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: LD_INT 3
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 5
66245: PUSH
66246: LD_INT 4
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 5
66255: PUSH
66256: LD_INT 5
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 4
66265: PUSH
66266: LD_INT 5
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 3
66275: PUSH
66276: LD_INT 4
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 3
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 5
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 3
66305: PUSH
66306: LD_INT 5
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: PUSH
66336: LD_INT 3
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 1
66345: PUSH
66346: LD_INT 4
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 4
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: NEG
66366: PUSH
66367: LD_INT 3
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 2
66387: PUSH
66388: LD_INT 4
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 2
66397: NEG
66398: PUSH
66399: LD_INT 2
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 4
66408: NEG
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 4
66419: NEG
66420: PUSH
66421: LD_INT 1
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 3
66431: NEG
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 3
66442: NEG
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 4
66453: NEG
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 5
66464: NEG
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 5
66475: NEG
66476: PUSH
66477: LD_INT 1
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 5
66487: NEG
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 3
66499: NEG
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: LD_INT 3
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 3
66522: NEG
66523: PUSH
66524: LD_INT 4
66526: NEG
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 2
66534: NEG
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 2
66546: NEG
66547: PUSH
66548: LD_INT 2
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 3
66558: NEG
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 4
66570: NEG
66571: PUSH
66572: LD_INT 3
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 4
66582: NEG
66583: PUSH
66584: LD_INT 4
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 2
66594: NEG
66595: PUSH
66596: LD_INT 4
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 4
66606: NEG
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: LD_INT 4
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: LD_INT 5
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: PUSH
66641: LD_INT 4
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 1
66651: PUSH
66652: LD_INT 3
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: LD_INT 3
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 1
66673: NEG
66674: PUSH
66675: LD_INT 4
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: LD_INT 5
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: LD_INT 3
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 2
66708: NEG
66709: PUSH
66710: LD_INT 5
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66765: LD_ADDR_VAR 0 31
66769: PUSH
66770: LD_INT 0
66772: PUSH
66773: LD_INT 4
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: LD_INT 3
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: LD_INT 4
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: LD_INT 5
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: LD_INT 5
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: LD_INT 4
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: LD_INT 3
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: LD_INT 5
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 2
66854: NEG
66855: PUSH
66856: LD_INT 3
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 3
66865: NEG
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 3
66876: NEG
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: NEG
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 2
66899: NEG
66900: PUSH
66901: LD_INT 1
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 3
66910: NEG
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 4
66921: NEG
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 4
66932: NEG
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 4
66944: NEG
66945: PUSH
66946: LD_INT 2
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 2
66956: NEG
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 4
66967: NEG
66968: PUSH
66969: LD_INT 4
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 4
66979: NEG
66980: PUSH
66981: LD_INT 5
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: NEG
66992: PUSH
66993: LD_INT 4
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 3
67003: NEG
67004: PUSH
67005: LD_INT 3
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 4
67015: NEG
67016: PUSH
67017: LD_INT 3
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 5
67027: NEG
67028: PUSH
67029: LD_INT 4
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 5
67039: NEG
67040: PUSH
67041: LD_INT 5
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 3
67051: NEG
67052: PUSH
67053: LD_INT 5
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 5
67063: NEG
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: LD_INT 4
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: LD_INT 3
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: LD_INT 2
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: NEG
67143: PUSH
67144: LD_INT 4
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: LD_INT 2
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 2
67165: NEG
67166: PUSH
67167: LD_INT 4
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 4
67177: PUSH
67178: LD_INT 0
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 4
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 5
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 4
67218: PUSH
67219: LD_INT 1
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: LD_INT 0
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: LD_INT 1
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 3
67249: PUSH
67250: LD_INT 2
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 5
67260: PUSH
67261: LD_INT 2
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67315: LD_ADDR_VAR 0 32
67319: PUSH
67320: LD_INT 4
67322: NEG
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 4
67333: NEG
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 3
67345: NEG
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 3
67356: NEG
67357: PUSH
67358: LD_INT 1
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 4
67367: NEG
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 5
67378: NEG
67379: PUSH
67380: LD_INT 0
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 5
67389: NEG
67390: PUSH
67391: LD_INT 1
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 5
67401: NEG
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 3
67413: NEG
67414: PUSH
67415: LD_INT 2
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: LD_INT 3
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 3
67436: NEG
67437: PUSH
67438: LD_INT 4
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 2
67448: NEG
67449: PUSH
67450: LD_INT 3
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: LD_INT 2
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 4
67484: NEG
67485: PUSH
67486: LD_INT 3
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 4
67496: NEG
67497: PUSH
67498: LD_INT 4
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 2
67508: NEG
67509: PUSH
67510: LD_INT 4
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 4
67520: NEG
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: LD_INT 4
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: LD_INT 5
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 1
67554: PUSH
67555: LD_INT 4
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: LD_INT 3
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: NEG
67588: PUSH
67589: LD_INT 4
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: PUSH
67601: LD_INT 5
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: LD_INT 3
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 2
67622: NEG
67623: PUSH
67624: LD_INT 5
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 3
67634: PUSH
67635: LD_INT 0
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 3
67644: PUSH
67645: LD_INT 1
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 4
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 4
67665: PUSH
67666: LD_INT 1
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 3
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: LD_INT 1
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 2
67706: PUSH
67707: LD_INT 2
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: LD_INT 2
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 4
67727: PUSH
67728: LD_INT 4
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 4
67737: PUSH
67738: LD_INT 3
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 5
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 5
67757: PUSH
67758: LD_INT 5
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 4
67767: PUSH
67768: LD_INT 5
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: LD_INT 4
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 5
67797: PUSH
67798: LD_INT 3
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: LD_INT 5
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67862: LD_ADDR_VAR 0 33
67866: PUSH
67867: LD_INT 4
67869: NEG
67870: PUSH
67871: LD_INT 4
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 4
67881: NEG
67882: PUSH
67883: LD_INT 5
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 3
67893: NEG
67894: PUSH
67895: LD_INT 4
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 3
67905: NEG
67906: PUSH
67907: LD_INT 3
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 4
67917: NEG
67918: PUSH
67919: LD_INT 3
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 5
67929: NEG
67930: PUSH
67931: LD_INT 4
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 5
67941: NEG
67942: PUSH
67943: LD_INT 5
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: LD_INT 5
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 5
67965: NEG
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: LD_INT 3
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: LD_INT 4
67991: NEG
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: PUSH
68011: LD_INT 2
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 0
68021: PUSH
68022: LD_INT 2
68024: NEG
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 1
68032: NEG
68033: PUSH
68034: LD_INT 3
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 1
68044: NEG
68045: PUSH
68046: LD_INT 4
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 2
68056: PUSH
68057: LD_INT 2
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 2
68067: NEG
68068: PUSH
68069: LD_INT 4
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 4
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 4
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 5
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 5
68110: PUSH
68111: LD_INT 1
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 4
68120: PUSH
68121: LD_INT 1
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 3
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 5
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 3
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: LD_INT 2
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 4
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 4
68202: PUSH
68203: LD_INT 4
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 3
68212: PUSH
68213: LD_INT 4
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 2
68222: PUSH
68223: LD_INT 3
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 2
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 4
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 2
68252: PUSH
68253: LD_INT 4
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: LD_INT 4
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 1
68282: PUSH
68283: LD_INT 4
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 1
68292: PUSH
68293: LD_INT 5
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: LD_INT 5
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 1
68312: NEG
68313: PUSH
68314: LD_INT 4
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 1
68323: NEG
68324: PUSH
68325: LD_INT 3
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: LD_INT 5
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: LD_INT 3
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68400: LD_ADDR_VAR 0 34
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: LD_INT 4
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: LD_INT 5
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: LD_INT 4
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 1
68440: PUSH
68441: LD_INT 3
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 3
68454: NEG
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 1
68462: NEG
68463: PUSH
68464: LD_INT 4
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: PUSH
68476: LD_INT 5
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 2
68486: PUSH
68487: LD_INT 3
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 2
68497: NEG
68498: PUSH
68499: LD_INT 5
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 3
68509: PUSH
68510: LD_INT 0
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 3
68519: PUSH
68520: LD_INT 1
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 4
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 4
68540: PUSH
68541: LD_INT 1
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: LD_INT 1
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 2
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 2
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: LD_INT 2
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 4
68592: PUSH
68593: LD_INT 2
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 4
68602: PUSH
68603: LD_INT 4
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 4
68612: PUSH
68613: LD_INT 3
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 5
68622: PUSH
68623: LD_INT 4
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 5
68632: PUSH
68633: LD_INT 5
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 4
68642: PUSH
68643: LD_INT 5
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 3
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 3
68662: PUSH
68663: LD_INT 3
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 5
68672: PUSH
68673: LD_INT 3
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 3
68682: PUSH
68683: LD_INT 5
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: LD_INT 3
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: LD_INT 2
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: LD_INT 3
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 1
68722: PUSH
68723: LD_INT 4
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: LD_INT 4
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 1
68742: NEG
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 1
68753: NEG
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 2
68764: PUSH
68765: LD_INT 4
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 2
68774: NEG
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 4
68785: NEG
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 4
68796: NEG
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 3
68808: NEG
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 3
68819: NEG
68820: PUSH
68821: LD_INT 1
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 4
68830: NEG
68831: PUSH
68832: LD_INT 1
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 5
68841: NEG
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 5
68852: NEG
68853: PUSH
68854: LD_INT 1
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 5
68864: NEG
68865: PUSH
68866: LD_INT 2
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 3
68876: NEG
68877: PUSH
68878: LD_INT 2
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: ST_TO_ADDR
// end ; end ;
68932: GO 68935
68934: POP
// case btype of b_depot , b_warehouse :
68935: LD_VAR 0 1
68939: PUSH
68940: LD_INT 0
68942: DOUBLE
68943: EQUAL
68944: IFTRUE 68954
68946: LD_INT 1
68948: DOUBLE
68949: EQUAL
68950: IFTRUE 68954
68952: GO 69155
68954: POP
// case nation of nation_american :
68955: LD_VAR 0 5
68959: PUSH
68960: LD_INT 1
68962: DOUBLE
68963: EQUAL
68964: IFTRUE 68968
68966: GO 69024
68968: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68969: LD_ADDR_VAR 0 9
68973: PUSH
68974: LD_VAR 0 11
68978: PUSH
68979: LD_VAR 0 12
68983: PUSH
68984: LD_VAR 0 13
68988: PUSH
68989: LD_VAR 0 14
68993: PUSH
68994: LD_VAR 0 15
68998: PUSH
68999: LD_VAR 0 16
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: PUSH
69012: LD_VAR 0 4
69016: PUSH
69017: LD_INT 1
69019: PLUS
69020: ARRAY
69021: ST_TO_ADDR
69022: GO 69153
69024: LD_INT 2
69026: DOUBLE
69027: EQUAL
69028: IFTRUE 69032
69030: GO 69088
69032: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69033: LD_ADDR_VAR 0 9
69037: PUSH
69038: LD_VAR 0 17
69042: PUSH
69043: LD_VAR 0 18
69047: PUSH
69048: LD_VAR 0 19
69052: PUSH
69053: LD_VAR 0 20
69057: PUSH
69058: LD_VAR 0 21
69062: PUSH
69063: LD_VAR 0 22
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: PUSH
69076: LD_VAR 0 4
69080: PUSH
69081: LD_INT 1
69083: PLUS
69084: ARRAY
69085: ST_TO_ADDR
69086: GO 69153
69088: LD_INT 3
69090: DOUBLE
69091: EQUAL
69092: IFTRUE 69096
69094: GO 69152
69096: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69097: LD_ADDR_VAR 0 9
69101: PUSH
69102: LD_VAR 0 23
69106: PUSH
69107: LD_VAR 0 24
69111: PUSH
69112: LD_VAR 0 25
69116: PUSH
69117: LD_VAR 0 26
69121: PUSH
69122: LD_VAR 0 27
69126: PUSH
69127: LD_VAR 0 28
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: PUSH
69140: LD_VAR 0 4
69144: PUSH
69145: LD_INT 1
69147: PLUS
69148: ARRAY
69149: ST_TO_ADDR
69150: GO 69153
69152: POP
69153: GO 69708
69155: LD_INT 2
69157: DOUBLE
69158: EQUAL
69159: IFTRUE 69169
69161: LD_INT 3
69163: DOUBLE
69164: EQUAL
69165: IFTRUE 69169
69167: GO 69225
69169: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69170: LD_ADDR_VAR 0 9
69174: PUSH
69175: LD_VAR 0 29
69179: PUSH
69180: LD_VAR 0 30
69184: PUSH
69185: LD_VAR 0 31
69189: PUSH
69190: LD_VAR 0 32
69194: PUSH
69195: LD_VAR 0 33
69199: PUSH
69200: LD_VAR 0 34
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: PUSH
69213: LD_VAR 0 4
69217: PUSH
69218: LD_INT 1
69220: PLUS
69221: ARRAY
69222: ST_TO_ADDR
69223: GO 69708
69225: LD_INT 16
69227: DOUBLE
69228: EQUAL
69229: IFTRUE 69287
69231: LD_INT 17
69233: DOUBLE
69234: EQUAL
69235: IFTRUE 69287
69237: LD_INT 18
69239: DOUBLE
69240: EQUAL
69241: IFTRUE 69287
69243: LD_INT 19
69245: DOUBLE
69246: EQUAL
69247: IFTRUE 69287
69249: LD_INT 22
69251: DOUBLE
69252: EQUAL
69253: IFTRUE 69287
69255: LD_INT 20
69257: DOUBLE
69258: EQUAL
69259: IFTRUE 69287
69261: LD_INT 21
69263: DOUBLE
69264: EQUAL
69265: IFTRUE 69287
69267: LD_INT 23
69269: DOUBLE
69270: EQUAL
69271: IFTRUE 69287
69273: LD_INT 24
69275: DOUBLE
69276: EQUAL
69277: IFTRUE 69287
69279: LD_INT 25
69281: DOUBLE
69282: EQUAL
69283: IFTRUE 69287
69285: GO 69343
69287: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69288: LD_ADDR_VAR 0 9
69292: PUSH
69293: LD_VAR 0 35
69297: PUSH
69298: LD_VAR 0 36
69302: PUSH
69303: LD_VAR 0 37
69307: PUSH
69308: LD_VAR 0 38
69312: PUSH
69313: LD_VAR 0 39
69317: PUSH
69318: LD_VAR 0 40
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: PUSH
69331: LD_VAR 0 4
69335: PUSH
69336: LD_INT 1
69338: PLUS
69339: ARRAY
69340: ST_TO_ADDR
69341: GO 69708
69343: LD_INT 6
69345: DOUBLE
69346: EQUAL
69347: IFTRUE 69399
69349: LD_INT 7
69351: DOUBLE
69352: EQUAL
69353: IFTRUE 69399
69355: LD_INT 8
69357: DOUBLE
69358: EQUAL
69359: IFTRUE 69399
69361: LD_INT 13
69363: DOUBLE
69364: EQUAL
69365: IFTRUE 69399
69367: LD_INT 12
69369: DOUBLE
69370: EQUAL
69371: IFTRUE 69399
69373: LD_INT 15
69375: DOUBLE
69376: EQUAL
69377: IFTRUE 69399
69379: LD_INT 11
69381: DOUBLE
69382: EQUAL
69383: IFTRUE 69399
69385: LD_INT 14
69387: DOUBLE
69388: EQUAL
69389: IFTRUE 69399
69391: LD_INT 10
69393: DOUBLE
69394: EQUAL
69395: IFTRUE 69399
69397: GO 69455
69399: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69400: LD_ADDR_VAR 0 9
69404: PUSH
69405: LD_VAR 0 41
69409: PUSH
69410: LD_VAR 0 42
69414: PUSH
69415: LD_VAR 0 43
69419: PUSH
69420: LD_VAR 0 44
69424: PUSH
69425: LD_VAR 0 45
69429: PUSH
69430: LD_VAR 0 46
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: PUSH
69443: LD_VAR 0 4
69447: PUSH
69448: LD_INT 1
69450: PLUS
69451: ARRAY
69452: ST_TO_ADDR
69453: GO 69708
69455: LD_INT 36
69457: DOUBLE
69458: EQUAL
69459: IFTRUE 69463
69461: GO 69519
69463: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69464: LD_ADDR_VAR 0 9
69468: PUSH
69469: LD_VAR 0 47
69473: PUSH
69474: LD_VAR 0 48
69478: PUSH
69479: LD_VAR 0 49
69483: PUSH
69484: LD_VAR 0 50
69488: PUSH
69489: LD_VAR 0 51
69493: PUSH
69494: LD_VAR 0 52
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: PUSH
69507: LD_VAR 0 4
69511: PUSH
69512: LD_INT 1
69514: PLUS
69515: ARRAY
69516: ST_TO_ADDR
69517: GO 69708
69519: LD_INT 4
69521: DOUBLE
69522: EQUAL
69523: IFTRUE 69545
69525: LD_INT 5
69527: DOUBLE
69528: EQUAL
69529: IFTRUE 69545
69531: LD_INT 34
69533: DOUBLE
69534: EQUAL
69535: IFTRUE 69545
69537: LD_INT 37
69539: DOUBLE
69540: EQUAL
69541: IFTRUE 69545
69543: GO 69601
69545: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69546: LD_ADDR_VAR 0 9
69550: PUSH
69551: LD_VAR 0 53
69555: PUSH
69556: LD_VAR 0 54
69560: PUSH
69561: LD_VAR 0 55
69565: PUSH
69566: LD_VAR 0 56
69570: PUSH
69571: LD_VAR 0 57
69575: PUSH
69576: LD_VAR 0 58
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: PUSH
69589: LD_VAR 0 4
69593: PUSH
69594: LD_INT 1
69596: PLUS
69597: ARRAY
69598: ST_TO_ADDR
69599: GO 69708
69601: LD_INT 31
69603: DOUBLE
69604: EQUAL
69605: IFTRUE 69651
69607: LD_INT 32
69609: DOUBLE
69610: EQUAL
69611: IFTRUE 69651
69613: LD_INT 33
69615: DOUBLE
69616: EQUAL
69617: IFTRUE 69651
69619: LD_INT 27
69621: DOUBLE
69622: EQUAL
69623: IFTRUE 69651
69625: LD_INT 26
69627: DOUBLE
69628: EQUAL
69629: IFTRUE 69651
69631: LD_INT 28
69633: DOUBLE
69634: EQUAL
69635: IFTRUE 69651
69637: LD_INT 29
69639: DOUBLE
69640: EQUAL
69641: IFTRUE 69651
69643: LD_INT 30
69645: DOUBLE
69646: EQUAL
69647: IFTRUE 69651
69649: GO 69707
69651: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69652: LD_ADDR_VAR 0 9
69656: PUSH
69657: LD_VAR 0 59
69661: PUSH
69662: LD_VAR 0 60
69666: PUSH
69667: LD_VAR 0 61
69671: PUSH
69672: LD_VAR 0 62
69676: PUSH
69677: LD_VAR 0 63
69681: PUSH
69682: LD_VAR 0 64
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: PUSH
69695: LD_VAR 0 4
69699: PUSH
69700: LD_INT 1
69702: PLUS
69703: ARRAY
69704: ST_TO_ADDR
69705: GO 69708
69707: POP
// temp_list2 = [ ] ;
69708: LD_ADDR_VAR 0 10
69712: PUSH
69713: EMPTY
69714: ST_TO_ADDR
// for i in temp_list do
69715: LD_ADDR_VAR 0 8
69719: PUSH
69720: LD_VAR 0 9
69724: PUSH
69725: FOR_IN
69726: IFFALSE 69778
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69728: LD_ADDR_VAR 0 10
69732: PUSH
69733: LD_VAR 0 10
69737: PUSH
69738: LD_VAR 0 8
69742: PUSH
69743: LD_INT 1
69745: ARRAY
69746: PUSH
69747: LD_VAR 0 2
69751: PLUS
69752: PUSH
69753: LD_VAR 0 8
69757: PUSH
69758: LD_INT 2
69760: ARRAY
69761: PUSH
69762: LD_VAR 0 3
69766: PLUS
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: EMPTY
69773: LIST
69774: ADD
69775: ST_TO_ADDR
69776: GO 69725
69778: POP
69779: POP
// result = temp_list2 ;
69780: LD_ADDR_VAR 0 7
69784: PUSH
69785: LD_VAR 0 10
69789: ST_TO_ADDR
// end ;
69790: LD_VAR 0 7
69794: RET
// export function EnemyInRange ( unit , dist ) ; begin
69795: LD_INT 0
69797: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69798: LD_ADDR_VAR 0 3
69802: PUSH
69803: LD_VAR 0 1
69807: PPUSH
69808: CALL_OW 255
69812: PPUSH
69813: LD_VAR 0 1
69817: PPUSH
69818: CALL_OW 250
69822: PPUSH
69823: LD_VAR 0 1
69827: PPUSH
69828: CALL_OW 251
69832: PPUSH
69833: LD_VAR 0 2
69837: PPUSH
69838: CALL 43168 0 4
69842: PUSH
69843: LD_INT 4
69845: ARRAY
69846: ST_TO_ADDR
// end ;
69847: LD_VAR 0 3
69851: RET
// export function PlayerSeeMe ( unit ) ; begin
69852: LD_INT 0
69854: PPUSH
// result := See ( your_side , unit ) ;
69855: LD_ADDR_VAR 0 2
69859: PUSH
69860: LD_OWVAR 2
69864: PPUSH
69865: LD_VAR 0 1
69869: PPUSH
69870: CALL_OW 292
69874: ST_TO_ADDR
// end ;
69875: LD_VAR 0 2
69879: RET
// export function ReverseDir ( unit ) ; begin
69880: LD_INT 0
69882: PPUSH
// if not unit then
69883: LD_VAR 0 1
69887: NOT
69888: IFFALSE 69892
// exit ;
69890: GO 69915
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69892: LD_ADDR_VAR 0 2
69896: PUSH
69897: LD_VAR 0 1
69901: PPUSH
69902: CALL_OW 254
69906: PUSH
69907: LD_INT 3
69909: PLUS
69910: PUSH
69911: LD_INT 6
69913: MOD
69914: ST_TO_ADDR
// end ;
69915: LD_VAR 0 2
69919: RET
// export function ReverseArray ( array ) ; var i ; begin
69920: LD_INT 0
69922: PPUSH
69923: PPUSH
// if not array then
69924: LD_VAR 0 1
69928: NOT
69929: IFFALSE 69933
// exit ;
69931: GO 69988
// result := [ ] ;
69933: LD_ADDR_VAR 0 2
69937: PUSH
69938: EMPTY
69939: ST_TO_ADDR
// for i := array downto 1 do
69940: LD_ADDR_VAR 0 3
69944: PUSH
69945: DOUBLE
69946: LD_VAR 0 1
69950: INC
69951: ST_TO_ADDR
69952: LD_INT 1
69954: PUSH
69955: FOR_DOWNTO
69956: IFFALSE 69986
// result := Join ( result , array [ i ] ) ;
69958: LD_ADDR_VAR 0 2
69962: PUSH
69963: LD_VAR 0 2
69967: PPUSH
69968: LD_VAR 0 1
69972: PUSH
69973: LD_VAR 0 3
69977: ARRAY
69978: PPUSH
69979: CALL 74653 0 2
69983: ST_TO_ADDR
69984: GO 69955
69986: POP
69987: POP
// end ;
69988: LD_VAR 0 2
69992: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69993: LD_INT 0
69995: PPUSH
69996: PPUSH
69997: PPUSH
69998: PPUSH
69999: PPUSH
70000: PPUSH
// if not unit or not hexes then
70001: LD_VAR 0 1
70005: NOT
70006: PUSH
70007: LD_VAR 0 2
70011: NOT
70012: OR
70013: IFFALSE 70017
// exit ;
70015: GO 70140
// dist := 9999 ;
70017: LD_ADDR_VAR 0 5
70021: PUSH
70022: LD_INT 9999
70024: ST_TO_ADDR
// for i = 1 to hexes do
70025: LD_ADDR_VAR 0 4
70029: PUSH
70030: DOUBLE
70031: LD_INT 1
70033: DEC
70034: ST_TO_ADDR
70035: LD_VAR 0 2
70039: PUSH
70040: FOR_TO
70041: IFFALSE 70128
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70043: LD_ADDR_VAR 0 6
70047: PUSH
70048: LD_VAR 0 1
70052: PPUSH
70053: LD_VAR 0 2
70057: PUSH
70058: LD_VAR 0 4
70062: ARRAY
70063: PUSH
70064: LD_INT 1
70066: ARRAY
70067: PPUSH
70068: LD_VAR 0 2
70072: PUSH
70073: LD_VAR 0 4
70077: ARRAY
70078: PUSH
70079: LD_INT 2
70081: ARRAY
70082: PPUSH
70083: CALL_OW 297
70087: ST_TO_ADDR
// if tdist < dist then
70088: LD_VAR 0 6
70092: PUSH
70093: LD_VAR 0 5
70097: LESS
70098: IFFALSE 70126
// begin hex := hexes [ i ] ;
70100: LD_ADDR_VAR 0 8
70104: PUSH
70105: LD_VAR 0 2
70109: PUSH
70110: LD_VAR 0 4
70114: ARRAY
70115: ST_TO_ADDR
// dist := tdist ;
70116: LD_ADDR_VAR 0 5
70120: PUSH
70121: LD_VAR 0 6
70125: ST_TO_ADDR
// end ; end ;
70126: GO 70040
70128: POP
70129: POP
// result := hex ;
70130: LD_ADDR_VAR 0 3
70134: PUSH
70135: LD_VAR 0 8
70139: ST_TO_ADDR
// end ;
70140: LD_VAR 0 3
70144: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70145: LD_INT 0
70147: PPUSH
70148: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70149: LD_VAR 0 1
70153: NOT
70154: PUSH
70155: LD_VAR 0 1
70159: PUSH
70160: LD_INT 21
70162: PUSH
70163: LD_INT 2
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 23
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PPUSH
70184: CALL_OW 69
70188: IN
70189: NOT
70190: OR
70191: IFFALSE 70195
// exit ;
70193: GO 70242
// for i = 1 to 3 do
70195: LD_ADDR_VAR 0 3
70199: PUSH
70200: DOUBLE
70201: LD_INT 1
70203: DEC
70204: ST_TO_ADDR
70205: LD_INT 3
70207: PUSH
70208: FOR_TO
70209: IFFALSE 70240
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70211: LD_VAR 0 1
70215: PPUSH
70216: CALL_OW 250
70220: PPUSH
70221: LD_VAR 0 1
70225: PPUSH
70226: CALL_OW 251
70230: PPUSH
70231: LD_INT 1
70233: PPUSH
70234: CALL_OW 453
70238: GO 70208
70240: POP
70241: POP
// end ;
70242: LD_VAR 0 2
70246: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70247: LD_INT 0
70249: PPUSH
70250: PPUSH
70251: PPUSH
70252: PPUSH
70253: PPUSH
70254: PPUSH
// if not unit or not enemy_unit then
70255: LD_VAR 0 1
70259: NOT
70260: PUSH
70261: LD_VAR 0 2
70265: NOT
70266: OR
70267: IFFALSE 70271
// exit ;
70269: GO 70738
// if GetLives ( i ) < 250 then
70271: LD_VAR 0 4
70275: PPUSH
70276: CALL_OW 256
70280: PUSH
70281: LD_INT 250
70283: LESS
70284: IFFALSE 70297
// begin ComAutodestruct ( i ) ;
70286: LD_VAR 0 4
70290: PPUSH
70291: CALL 70145 0 1
// exit ;
70295: GO 70738
// end ; x := GetX ( enemy_unit ) ;
70297: LD_ADDR_VAR 0 7
70301: PUSH
70302: LD_VAR 0 2
70306: PPUSH
70307: CALL_OW 250
70311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70312: LD_ADDR_VAR 0 8
70316: PUSH
70317: LD_VAR 0 2
70321: PPUSH
70322: CALL_OW 251
70326: ST_TO_ADDR
// if not x or not y then
70327: LD_VAR 0 7
70331: NOT
70332: PUSH
70333: LD_VAR 0 8
70337: NOT
70338: OR
70339: IFFALSE 70343
// exit ;
70341: GO 70738
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70343: LD_ADDR_VAR 0 6
70347: PUSH
70348: LD_VAR 0 7
70352: PPUSH
70353: LD_INT 0
70355: PPUSH
70356: LD_INT 4
70358: PPUSH
70359: CALL_OW 272
70363: PUSH
70364: LD_VAR 0 8
70368: PPUSH
70369: LD_INT 0
70371: PPUSH
70372: LD_INT 4
70374: PPUSH
70375: CALL_OW 273
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_VAR 0 7
70388: PPUSH
70389: LD_INT 1
70391: PPUSH
70392: LD_INT 4
70394: PPUSH
70395: CALL_OW 272
70399: PUSH
70400: LD_VAR 0 8
70404: PPUSH
70405: LD_INT 1
70407: PPUSH
70408: LD_INT 4
70410: PPUSH
70411: CALL_OW 273
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_VAR 0 7
70424: PPUSH
70425: LD_INT 2
70427: PPUSH
70428: LD_INT 4
70430: PPUSH
70431: CALL_OW 272
70435: PUSH
70436: LD_VAR 0 8
70440: PPUSH
70441: LD_INT 2
70443: PPUSH
70444: LD_INT 4
70446: PPUSH
70447: CALL_OW 273
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_VAR 0 7
70460: PPUSH
70461: LD_INT 3
70463: PPUSH
70464: LD_INT 4
70466: PPUSH
70467: CALL_OW 272
70471: PUSH
70472: LD_VAR 0 8
70476: PPUSH
70477: LD_INT 3
70479: PPUSH
70480: LD_INT 4
70482: PPUSH
70483: CALL_OW 273
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_VAR 0 7
70496: PPUSH
70497: LD_INT 4
70499: PPUSH
70500: LD_INT 4
70502: PPUSH
70503: CALL_OW 272
70507: PUSH
70508: LD_VAR 0 8
70512: PPUSH
70513: LD_INT 4
70515: PPUSH
70516: LD_INT 4
70518: PPUSH
70519: CALL_OW 273
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_VAR 0 7
70532: PPUSH
70533: LD_INT 5
70535: PPUSH
70536: LD_INT 4
70538: PPUSH
70539: CALL_OW 272
70543: PUSH
70544: LD_VAR 0 8
70548: PPUSH
70549: LD_INT 5
70551: PPUSH
70552: LD_INT 4
70554: PPUSH
70555: CALL_OW 273
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: ST_TO_ADDR
// for i = tmp downto 1 do
70572: LD_ADDR_VAR 0 4
70576: PUSH
70577: DOUBLE
70578: LD_VAR 0 6
70582: INC
70583: ST_TO_ADDR
70584: LD_INT 1
70586: PUSH
70587: FOR_DOWNTO
70588: IFFALSE 70689
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70590: LD_VAR 0 6
70594: PUSH
70595: LD_VAR 0 4
70599: ARRAY
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: PPUSH
70605: LD_VAR 0 6
70609: PUSH
70610: LD_VAR 0 4
70614: ARRAY
70615: PUSH
70616: LD_INT 2
70618: ARRAY
70619: PPUSH
70620: CALL_OW 488
70624: NOT
70625: PUSH
70626: LD_VAR 0 6
70630: PUSH
70631: LD_VAR 0 4
70635: ARRAY
70636: PUSH
70637: LD_INT 1
70639: ARRAY
70640: PPUSH
70641: LD_VAR 0 6
70645: PUSH
70646: LD_VAR 0 4
70650: ARRAY
70651: PUSH
70652: LD_INT 2
70654: ARRAY
70655: PPUSH
70656: CALL_OW 428
70660: PUSH
70661: LD_INT 0
70663: NONEQUAL
70664: OR
70665: IFFALSE 70687
// tmp := Delete ( tmp , i ) ;
70667: LD_ADDR_VAR 0 6
70671: PUSH
70672: LD_VAR 0 6
70676: PPUSH
70677: LD_VAR 0 4
70681: PPUSH
70682: CALL_OW 3
70686: ST_TO_ADDR
70687: GO 70587
70689: POP
70690: POP
// j := GetClosestHex ( unit , tmp ) ;
70691: LD_ADDR_VAR 0 5
70695: PUSH
70696: LD_VAR 0 1
70700: PPUSH
70701: LD_VAR 0 6
70705: PPUSH
70706: CALL 69993 0 2
70710: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70711: LD_VAR 0 1
70715: PPUSH
70716: LD_VAR 0 5
70720: PUSH
70721: LD_INT 1
70723: ARRAY
70724: PPUSH
70725: LD_VAR 0 5
70729: PUSH
70730: LD_INT 2
70732: ARRAY
70733: PPUSH
70734: CALL_OW 111
// end ;
70738: LD_VAR 0 3
70742: RET
// export function PrepareApemanSoldier ( ) ; begin
70743: LD_INT 0
70745: PPUSH
// uc_nation := 0 ;
70746: LD_ADDR_OWVAR 21
70750: PUSH
70751: LD_INT 0
70753: ST_TO_ADDR
// hc_sex := sex_male ;
70754: LD_ADDR_OWVAR 27
70758: PUSH
70759: LD_INT 1
70761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70762: LD_ADDR_OWVAR 28
70766: PUSH
70767: LD_INT 15
70769: ST_TO_ADDR
// hc_gallery :=  ;
70770: LD_ADDR_OWVAR 33
70774: PUSH
70775: LD_STRING 
70777: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70778: LD_ADDR_OWVAR 31
70782: PUSH
70783: LD_INT 0
70785: PPUSH
70786: LD_INT 3
70788: PPUSH
70789: CALL_OW 12
70793: PUSH
70794: LD_INT 0
70796: PPUSH
70797: LD_INT 3
70799: PPUSH
70800: CALL_OW 12
70804: PUSH
70805: LD_INT 0
70807: PUSH
70808: LD_INT 0
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: ST_TO_ADDR
// end ;
70817: LD_VAR 0 1
70821: RET
// export function PrepareApemanEngineer ( ) ; begin
70822: LD_INT 0
70824: PPUSH
// uc_nation := 0 ;
70825: LD_ADDR_OWVAR 21
70829: PUSH
70830: LD_INT 0
70832: ST_TO_ADDR
// hc_sex := sex_male ;
70833: LD_ADDR_OWVAR 27
70837: PUSH
70838: LD_INT 1
70840: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70841: LD_ADDR_OWVAR 28
70845: PUSH
70846: LD_INT 16
70848: ST_TO_ADDR
// hc_gallery :=  ;
70849: LD_ADDR_OWVAR 33
70853: PUSH
70854: LD_STRING 
70856: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70857: LD_ADDR_OWVAR 31
70861: PUSH
70862: LD_INT 0
70864: PPUSH
70865: LD_INT 3
70867: PPUSH
70868: CALL_OW 12
70872: PUSH
70873: LD_INT 0
70875: PPUSH
70876: LD_INT 3
70878: PPUSH
70879: CALL_OW 12
70883: PUSH
70884: LD_INT 0
70886: PUSH
70887: LD_INT 0
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: ST_TO_ADDR
// end ;
70896: LD_VAR 0 1
70900: RET
// export function PrepareApeman ( agressivity ) ; begin
70901: LD_INT 0
70903: PPUSH
// uc_side := 0 ;
70904: LD_ADDR_OWVAR 20
70908: PUSH
70909: LD_INT 0
70911: ST_TO_ADDR
// uc_nation := 0 ;
70912: LD_ADDR_OWVAR 21
70916: PUSH
70917: LD_INT 0
70919: ST_TO_ADDR
// hc_sex := sex_male ;
70920: LD_ADDR_OWVAR 27
70924: PUSH
70925: LD_INT 1
70927: ST_TO_ADDR
// hc_class := class_apeman ;
70928: LD_ADDR_OWVAR 28
70932: PUSH
70933: LD_INT 12
70935: ST_TO_ADDR
// hc_gallery :=  ;
70936: LD_ADDR_OWVAR 33
70940: PUSH
70941: LD_STRING 
70943: ST_TO_ADDR
// if agressivity = 0 then
70944: LD_VAR 0 1
70948: PUSH
70949: LD_INT 0
70951: EQUAL
70952: IFFALSE 70964
// hc_agressivity := 0 else
70954: LD_ADDR_OWVAR 35
70958: PUSH
70959: LD_INT 0
70961: ST_TO_ADDR
70962: GO 70985
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70964: LD_ADDR_OWVAR 35
70968: PUSH
70969: LD_VAR 0 1
70973: NEG
70974: PPUSH
70975: LD_VAR 0 1
70979: PPUSH
70980: CALL_OW 12
70984: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70985: LD_ADDR_OWVAR 31
70989: PUSH
70990: LD_INT 0
70992: PPUSH
70993: LD_INT 3
70995: PPUSH
70996: CALL_OW 12
71000: PUSH
71001: LD_INT 0
71003: PPUSH
71004: LD_INT 3
71006: PPUSH
71007: CALL_OW 12
71011: PUSH
71012: LD_INT 0
71014: PUSH
71015: LD_INT 0
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: ST_TO_ADDR
// end ;
71024: LD_VAR 0 2
71028: RET
// export function PrepareTiger ( agressivity ) ; begin
71029: LD_INT 0
71031: PPUSH
// uc_side := 0 ;
71032: LD_ADDR_OWVAR 20
71036: PUSH
71037: LD_INT 0
71039: ST_TO_ADDR
// uc_nation := 0 ;
71040: LD_ADDR_OWVAR 21
71044: PUSH
71045: LD_INT 0
71047: ST_TO_ADDR
// hc_class := class_tiger ;
71048: LD_ADDR_OWVAR 28
71052: PUSH
71053: LD_INT 14
71055: ST_TO_ADDR
// hc_gallery :=  ;
71056: LD_ADDR_OWVAR 33
71060: PUSH
71061: LD_STRING 
71063: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71064: LD_ADDR_OWVAR 35
71068: PUSH
71069: LD_VAR 0 1
71073: NEG
71074: PPUSH
71075: LD_VAR 0 1
71079: PPUSH
71080: CALL_OW 12
71084: ST_TO_ADDR
// end ;
71085: LD_VAR 0 2
71089: RET
// export function PrepareEnchidna ( ) ; begin
71090: LD_INT 0
71092: PPUSH
// uc_side := 0 ;
71093: LD_ADDR_OWVAR 20
71097: PUSH
71098: LD_INT 0
71100: ST_TO_ADDR
// uc_nation := 0 ;
71101: LD_ADDR_OWVAR 21
71105: PUSH
71106: LD_INT 0
71108: ST_TO_ADDR
// hc_class := class_baggie ;
71109: LD_ADDR_OWVAR 28
71113: PUSH
71114: LD_INT 13
71116: ST_TO_ADDR
// hc_gallery :=  ;
71117: LD_ADDR_OWVAR 33
71121: PUSH
71122: LD_STRING 
71124: ST_TO_ADDR
// end ;
71125: LD_VAR 0 1
71129: RET
// export function PrepareFrog ( ) ; begin
71130: LD_INT 0
71132: PPUSH
// uc_side := 0 ;
71133: LD_ADDR_OWVAR 20
71137: PUSH
71138: LD_INT 0
71140: ST_TO_ADDR
// uc_nation := 0 ;
71141: LD_ADDR_OWVAR 21
71145: PUSH
71146: LD_INT 0
71148: ST_TO_ADDR
// hc_class := class_frog ;
71149: LD_ADDR_OWVAR 28
71153: PUSH
71154: LD_INT 19
71156: ST_TO_ADDR
// hc_gallery :=  ;
71157: LD_ADDR_OWVAR 33
71161: PUSH
71162: LD_STRING 
71164: ST_TO_ADDR
// end ;
71165: LD_VAR 0 1
71169: RET
// export function PrepareFish ( ) ; begin
71170: LD_INT 0
71172: PPUSH
// uc_side := 0 ;
71173: LD_ADDR_OWVAR 20
71177: PUSH
71178: LD_INT 0
71180: ST_TO_ADDR
// uc_nation := 0 ;
71181: LD_ADDR_OWVAR 21
71185: PUSH
71186: LD_INT 0
71188: ST_TO_ADDR
// hc_class := class_fish ;
71189: LD_ADDR_OWVAR 28
71193: PUSH
71194: LD_INT 20
71196: ST_TO_ADDR
// hc_gallery :=  ;
71197: LD_ADDR_OWVAR 33
71201: PUSH
71202: LD_STRING 
71204: ST_TO_ADDR
// end ;
71205: LD_VAR 0 1
71209: RET
// export function PrepareBird ( ) ; begin
71210: LD_INT 0
71212: PPUSH
// uc_side := 0 ;
71213: LD_ADDR_OWVAR 20
71217: PUSH
71218: LD_INT 0
71220: ST_TO_ADDR
// uc_nation := 0 ;
71221: LD_ADDR_OWVAR 21
71225: PUSH
71226: LD_INT 0
71228: ST_TO_ADDR
// hc_class := class_phororhacos ;
71229: LD_ADDR_OWVAR 28
71233: PUSH
71234: LD_INT 18
71236: ST_TO_ADDR
// hc_gallery :=  ;
71237: LD_ADDR_OWVAR 33
71241: PUSH
71242: LD_STRING 
71244: ST_TO_ADDR
// end ;
71245: LD_VAR 0 1
71249: RET
// export function PrepareHorse ( ) ; begin
71250: LD_INT 0
71252: PPUSH
// uc_side := 0 ;
71253: LD_ADDR_OWVAR 20
71257: PUSH
71258: LD_INT 0
71260: ST_TO_ADDR
// uc_nation := 0 ;
71261: LD_ADDR_OWVAR 21
71265: PUSH
71266: LD_INT 0
71268: ST_TO_ADDR
// hc_class := class_horse ;
71269: LD_ADDR_OWVAR 28
71273: PUSH
71274: LD_INT 21
71276: ST_TO_ADDR
// hc_gallery :=  ;
71277: LD_ADDR_OWVAR 33
71281: PUSH
71282: LD_STRING 
71284: ST_TO_ADDR
// end ;
71285: LD_VAR 0 1
71289: RET
// export function PrepareMastodont ( ) ; begin
71290: LD_INT 0
71292: PPUSH
// uc_side := 0 ;
71293: LD_ADDR_OWVAR 20
71297: PUSH
71298: LD_INT 0
71300: ST_TO_ADDR
// uc_nation := 0 ;
71301: LD_ADDR_OWVAR 21
71305: PUSH
71306: LD_INT 0
71308: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71309: LD_ADDR_OWVAR 37
71313: PUSH
71314: LD_INT 31
71316: ST_TO_ADDR
// vc_control := control_rider ;
71317: LD_ADDR_OWVAR 38
71321: PUSH
71322: LD_INT 4
71324: ST_TO_ADDR
// end ;
71325: LD_VAR 0 1
71329: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71330: LD_INT 0
71332: PPUSH
71333: PPUSH
71334: PPUSH
// uc_side = 0 ;
71335: LD_ADDR_OWVAR 20
71339: PUSH
71340: LD_INT 0
71342: ST_TO_ADDR
// uc_nation = 0 ;
71343: LD_ADDR_OWVAR 21
71347: PUSH
71348: LD_INT 0
71350: ST_TO_ADDR
// InitHc_All ( ) ;
71351: CALL_OW 584
// InitVc ;
71355: CALL_OW 20
// if mastodonts then
71359: LD_VAR 0 6
71363: IFFALSE 71430
// for i = 1 to mastodonts do
71365: LD_ADDR_VAR 0 11
71369: PUSH
71370: DOUBLE
71371: LD_INT 1
71373: DEC
71374: ST_TO_ADDR
71375: LD_VAR 0 6
71379: PUSH
71380: FOR_TO
71381: IFFALSE 71428
// begin vc_chassis := 31 ;
71383: LD_ADDR_OWVAR 37
71387: PUSH
71388: LD_INT 31
71390: ST_TO_ADDR
// vc_control := control_rider ;
71391: LD_ADDR_OWVAR 38
71395: PUSH
71396: LD_INT 4
71398: ST_TO_ADDR
// animal := CreateVehicle ;
71399: LD_ADDR_VAR 0 12
71403: PUSH
71404: CALL_OW 45
71408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71409: LD_VAR 0 12
71413: PPUSH
71414: LD_VAR 0 8
71418: PPUSH
71419: LD_INT 0
71421: PPUSH
71422: CALL 73558 0 3
// end ;
71426: GO 71380
71428: POP
71429: POP
// if horses then
71430: LD_VAR 0 5
71434: IFFALSE 71501
// for i = 1 to horses do
71436: LD_ADDR_VAR 0 11
71440: PUSH
71441: DOUBLE
71442: LD_INT 1
71444: DEC
71445: ST_TO_ADDR
71446: LD_VAR 0 5
71450: PUSH
71451: FOR_TO
71452: IFFALSE 71499
// begin hc_class := 21 ;
71454: LD_ADDR_OWVAR 28
71458: PUSH
71459: LD_INT 21
71461: ST_TO_ADDR
// hc_gallery :=  ;
71462: LD_ADDR_OWVAR 33
71466: PUSH
71467: LD_STRING 
71469: ST_TO_ADDR
// animal := CreateHuman ;
71470: LD_ADDR_VAR 0 12
71474: PUSH
71475: CALL_OW 44
71479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71480: LD_VAR 0 12
71484: PPUSH
71485: LD_VAR 0 8
71489: PPUSH
71490: LD_INT 0
71492: PPUSH
71493: CALL 73558 0 3
// end ;
71497: GO 71451
71499: POP
71500: POP
// if birds then
71501: LD_VAR 0 1
71505: IFFALSE 71572
// for i = 1 to birds do
71507: LD_ADDR_VAR 0 11
71511: PUSH
71512: DOUBLE
71513: LD_INT 1
71515: DEC
71516: ST_TO_ADDR
71517: LD_VAR 0 1
71521: PUSH
71522: FOR_TO
71523: IFFALSE 71570
// begin hc_class := 18 ;
71525: LD_ADDR_OWVAR 28
71529: PUSH
71530: LD_INT 18
71532: ST_TO_ADDR
// hc_gallery =  ;
71533: LD_ADDR_OWVAR 33
71537: PUSH
71538: LD_STRING 
71540: ST_TO_ADDR
// animal := CreateHuman ;
71541: LD_ADDR_VAR 0 12
71545: PUSH
71546: CALL_OW 44
71550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71551: LD_VAR 0 12
71555: PPUSH
71556: LD_VAR 0 8
71560: PPUSH
71561: LD_INT 0
71563: PPUSH
71564: CALL 73558 0 3
// end ;
71568: GO 71522
71570: POP
71571: POP
// if tigers then
71572: LD_VAR 0 2
71576: IFFALSE 71660
// for i = 1 to tigers do
71578: LD_ADDR_VAR 0 11
71582: PUSH
71583: DOUBLE
71584: LD_INT 1
71586: DEC
71587: ST_TO_ADDR
71588: LD_VAR 0 2
71592: PUSH
71593: FOR_TO
71594: IFFALSE 71658
// begin hc_class = class_tiger ;
71596: LD_ADDR_OWVAR 28
71600: PUSH
71601: LD_INT 14
71603: ST_TO_ADDR
// hc_gallery =  ;
71604: LD_ADDR_OWVAR 33
71608: PUSH
71609: LD_STRING 
71611: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71612: LD_ADDR_OWVAR 35
71616: PUSH
71617: LD_INT 7
71619: NEG
71620: PPUSH
71621: LD_INT 7
71623: PPUSH
71624: CALL_OW 12
71628: ST_TO_ADDR
// animal := CreateHuman ;
71629: LD_ADDR_VAR 0 12
71633: PUSH
71634: CALL_OW 44
71638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71639: LD_VAR 0 12
71643: PPUSH
71644: LD_VAR 0 8
71648: PPUSH
71649: LD_INT 0
71651: PPUSH
71652: CALL 73558 0 3
// end ;
71656: GO 71593
71658: POP
71659: POP
// if apemans then
71660: LD_VAR 0 3
71664: IFFALSE 71787
// for i = 1 to apemans do
71666: LD_ADDR_VAR 0 11
71670: PUSH
71671: DOUBLE
71672: LD_INT 1
71674: DEC
71675: ST_TO_ADDR
71676: LD_VAR 0 3
71680: PUSH
71681: FOR_TO
71682: IFFALSE 71785
// begin hc_class = class_apeman ;
71684: LD_ADDR_OWVAR 28
71688: PUSH
71689: LD_INT 12
71691: ST_TO_ADDR
// hc_gallery =  ;
71692: LD_ADDR_OWVAR 33
71696: PUSH
71697: LD_STRING 
71699: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71700: LD_ADDR_OWVAR 35
71704: PUSH
71705: LD_INT 2
71707: NEG
71708: PPUSH
71709: LD_INT 2
71711: PPUSH
71712: CALL_OW 12
71716: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71717: LD_ADDR_OWVAR 31
71721: PUSH
71722: LD_INT 1
71724: PPUSH
71725: LD_INT 3
71727: PPUSH
71728: CALL_OW 12
71732: PUSH
71733: LD_INT 1
71735: PPUSH
71736: LD_INT 3
71738: PPUSH
71739: CALL_OW 12
71743: PUSH
71744: LD_INT 0
71746: PUSH
71747: LD_INT 0
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: ST_TO_ADDR
// animal := CreateHuman ;
71756: LD_ADDR_VAR 0 12
71760: PUSH
71761: CALL_OW 44
71765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71766: LD_VAR 0 12
71770: PPUSH
71771: LD_VAR 0 8
71775: PPUSH
71776: LD_INT 0
71778: PPUSH
71779: CALL 73558 0 3
// end ;
71783: GO 71681
71785: POP
71786: POP
// if enchidnas then
71787: LD_VAR 0 4
71791: IFFALSE 71858
// for i = 1 to enchidnas do
71793: LD_ADDR_VAR 0 11
71797: PUSH
71798: DOUBLE
71799: LD_INT 1
71801: DEC
71802: ST_TO_ADDR
71803: LD_VAR 0 4
71807: PUSH
71808: FOR_TO
71809: IFFALSE 71856
// begin hc_class = 13 ;
71811: LD_ADDR_OWVAR 28
71815: PUSH
71816: LD_INT 13
71818: ST_TO_ADDR
// hc_gallery =  ;
71819: LD_ADDR_OWVAR 33
71823: PUSH
71824: LD_STRING 
71826: ST_TO_ADDR
// animal := CreateHuman ;
71827: LD_ADDR_VAR 0 12
71831: PUSH
71832: CALL_OW 44
71836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71837: LD_VAR 0 12
71841: PPUSH
71842: LD_VAR 0 8
71846: PPUSH
71847: LD_INT 0
71849: PPUSH
71850: CALL 73558 0 3
// end ;
71854: GO 71808
71856: POP
71857: POP
// if fishes then
71858: LD_VAR 0 7
71862: IFFALSE 71929
// for i = 1 to fishes do
71864: LD_ADDR_VAR 0 11
71868: PUSH
71869: DOUBLE
71870: LD_INT 1
71872: DEC
71873: ST_TO_ADDR
71874: LD_VAR 0 7
71878: PUSH
71879: FOR_TO
71880: IFFALSE 71927
// begin hc_class = 20 ;
71882: LD_ADDR_OWVAR 28
71886: PUSH
71887: LD_INT 20
71889: ST_TO_ADDR
// hc_gallery =  ;
71890: LD_ADDR_OWVAR 33
71894: PUSH
71895: LD_STRING 
71897: ST_TO_ADDR
// animal := CreateHuman ;
71898: LD_ADDR_VAR 0 12
71902: PUSH
71903: CALL_OW 44
71907: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71908: LD_VAR 0 12
71912: PPUSH
71913: LD_VAR 0 9
71917: PPUSH
71918: LD_INT 0
71920: PPUSH
71921: CALL 73558 0 3
// end ;
71925: GO 71879
71927: POP
71928: POP
// end ;
71929: LD_VAR 0 10
71933: RET
// export function WantHeal ( sci , unit ) ; begin
71934: LD_INT 0
71936: PPUSH
// if GetTaskList ( sci ) > 0 then
71937: LD_VAR 0 1
71941: PPUSH
71942: CALL_OW 437
71946: PUSH
71947: LD_INT 0
71949: GREATER
71950: IFFALSE 72020
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71952: LD_VAR 0 1
71956: PPUSH
71957: CALL_OW 437
71961: PUSH
71962: LD_INT 1
71964: ARRAY
71965: PUSH
71966: LD_INT 1
71968: ARRAY
71969: PUSH
71970: LD_STRING l
71972: EQUAL
71973: PUSH
71974: LD_VAR 0 1
71978: PPUSH
71979: CALL_OW 437
71983: PUSH
71984: LD_INT 1
71986: ARRAY
71987: PUSH
71988: LD_INT 4
71990: ARRAY
71991: PUSH
71992: LD_VAR 0 2
71996: EQUAL
71997: AND
71998: IFFALSE 72010
// result := true else
72000: LD_ADDR_VAR 0 3
72004: PUSH
72005: LD_INT 1
72007: ST_TO_ADDR
72008: GO 72018
// result := false ;
72010: LD_ADDR_VAR 0 3
72014: PUSH
72015: LD_INT 0
72017: ST_TO_ADDR
// end else
72018: GO 72028
// result := false ;
72020: LD_ADDR_VAR 0 3
72024: PUSH
72025: LD_INT 0
72027: ST_TO_ADDR
// end ;
72028: LD_VAR 0 3
72032: RET
// export function HealTarget ( sci ) ; begin
72033: LD_INT 0
72035: PPUSH
// if not sci then
72036: LD_VAR 0 1
72040: NOT
72041: IFFALSE 72045
// exit ;
72043: GO 72110
// result := 0 ;
72045: LD_ADDR_VAR 0 2
72049: PUSH
72050: LD_INT 0
72052: ST_TO_ADDR
// if GetTaskList ( sci ) then
72053: LD_VAR 0 1
72057: PPUSH
72058: CALL_OW 437
72062: IFFALSE 72110
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72064: LD_VAR 0 1
72068: PPUSH
72069: CALL_OW 437
72073: PUSH
72074: LD_INT 1
72076: ARRAY
72077: PUSH
72078: LD_INT 1
72080: ARRAY
72081: PUSH
72082: LD_STRING l
72084: EQUAL
72085: IFFALSE 72110
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72087: LD_ADDR_VAR 0 2
72091: PUSH
72092: LD_VAR 0 1
72096: PPUSH
72097: CALL_OW 437
72101: PUSH
72102: LD_INT 1
72104: ARRAY
72105: PUSH
72106: LD_INT 4
72108: ARRAY
72109: ST_TO_ADDR
// end ;
72110: LD_VAR 0 2
72114: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72115: LD_INT 0
72117: PPUSH
72118: PPUSH
72119: PPUSH
72120: PPUSH
// if not base_units then
72121: LD_VAR 0 1
72125: NOT
72126: IFFALSE 72130
// exit ;
72128: GO 72217
// result := false ;
72130: LD_ADDR_VAR 0 2
72134: PUSH
72135: LD_INT 0
72137: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72138: LD_ADDR_VAR 0 5
72142: PUSH
72143: LD_VAR 0 1
72147: PPUSH
72148: LD_INT 21
72150: PUSH
72151: LD_INT 3
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PPUSH
72158: CALL_OW 72
72162: ST_TO_ADDR
// if not tmp then
72163: LD_VAR 0 5
72167: NOT
72168: IFFALSE 72172
// exit ;
72170: GO 72217
// for i in tmp do
72172: LD_ADDR_VAR 0 3
72176: PUSH
72177: LD_VAR 0 5
72181: PUSH
72182: FOR_IN
72183: IFFALSE 72215
// begin result := EnemyInRange ( i , 22 ) ;
72185: LD_ADDR_VAR 0 2
72189: PUSH
72190: LD_VAR 0 3
72194: PPUSH
72195: LD_INT 22
72197: PPUSH
72198: CALL 69795 0 2
72202: ST_TO_ADDR
// if result then
72203: LD_VAR 0 2
72207: IFFALSE 72213
// exit ;
72209: POP
72210: POP
72211: GO 72217
// end ;
72213: GO 72182
72215: POP
72216: POP
// end ;
72217: LD_VAR 0 2
72221: RET
// export function FilterByTag ( units , tag ) ; begin
72222: LD_INT 0
72224: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72225: LD_ADDR_VAR 0 3
72229: PUSH
72230: LD_VAR 0 1
72234: PPUSH
72235: LD_INT 120
72237: PUSH
72238: LD_VAR 0 2
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PPUSH
72247: CALL_OW 72
72251: ST_TO_ADDR
// end ;
72252: LD_VAR 0 3
72256: RET
// export function IsDriver ( un ) ; begin
72257: LD_INT 0
72259: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72260: LD_ADDR_VAR 0 2
72264: PUSH
72265: LD_VAR 0 1
72269: PUSH
72270: LD_INT 55
72272: PUSH
72273: EMPTY
72274: LIST
72275: PPUSH
72276: CALL_OW 69
72280: IN
72281: ST_TO_ADDR
// end ;
72282: LD_VAR 0 2
72286: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72287: LD_INT 0
72289: PPUSH
72290: PPUSH
// list := [ ] ;
72291: LD_ADDR_VAR 0 5
72295: PUSH
72296: EMPTY
72297: ST_TO_ADDR
// case d of 0 :
72298: LD_VAR 0 3
72302: PUSH
72303: LD_INT 0
72305: DOUBLE
72306: EQUAL
72307: IFTRUE 72311
72309: GO 72444
72311: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72312: LD_ADDR_VAR 0 5
72316: PUSH
72317: LD_VAR 0 1
72321: PUSH
72322: LD_INT 4
72324: MINUS
72325: PUSH
72326: LD_VAR 0 2
72330: PUSH
72331: LD_INT 4
72333: MINUS
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: LIST
72342: PUSH
72343: LD_VAR 0 1
72347: PUSH
72348: LD_INT 3
72350: MINUS
72351: PUSH
72352: LD_VAR 0 2
72356: PUSH
72357: LD_INT 1
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: LIST
72364: PUSH
72365: LD_VAR 0 1
72369: PUSH
72370: LD_INT 4
72372: PLUS
72373: PUSH
72374: LD_VAR 0 2
72378: PUSH
72379: LD_INT 4
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: LIST
72386: PUSH
72387: LD_VAR 0 1
72391: PUSH
72392: LD_INT 3
72394: PLUS
72395: PUSH
72396: LD_VAR 0 2
72400: PUSH
72401: LD_INT 3
72403: PLUS
72404: PUSH
72405: LD_INT 5
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: LIST
72412: PUSH
72413: LD_VAR 0 1
72417: PUSH
72418: LD_VAR 0 2
72422: PUSH
72423: LD_INT 4
72425: PLUS
72426: PUSH
72427: LD_INT 0
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: ST_TO_ADDR
// end ; 1 :
72442: GO 73142
72444: LD_INT 1
72446: DOUBLE
72447: EQUAL
72448: IFTRUE 72452
72450: GO 72585
72452: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72453: LD_ADDR_VAR 0 5
72457: PUSH
72458: LD_VAR 0 1
72462: PUSH
72463: LD_VAR 0 2
72467: PUSH
72468: LD_INT 4
72470: MINUS
72471: PUSH
72472: LD_INT 3
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: LIST
72479: PUSH
72480: LD_VAR 0 1
72484: PUSH
72485: LD_INT 3
72487: MINUS
72488: PUSH
72489: LD_VAR 0 2
72493: PUSH
72494: LD_INT 3
72496: MINUS
72497: PUSH
72498: LD_INT 2
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: PUSH
72506: LD_VAR 0 1
72510: PUSH
72511: LD_INT 4
72513: MINUS
72514: PUSH
72515: LD_VAR 0 2
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: LIST
72527: PUSH
72528: LD_VAR 0 1
72532: PUSH
72533: LD_VAR 0 2
72537: PUSH
72538: LD_INT 3
72540: PLUS
72541: PUSH
72542: LD_INT 0
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: LIST
72549: PUSH
72550: LD_VAR 0 1
72554: PUSH
72555: LD_INT 4
72557: PLUS
72558: PUSH
72559: LD_VAR 0 2
72563: PUSH
72564: LD_INT 4
72566: PLUS
72567: PUSH
72568: LD_INT 5
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: LIST
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: ST_TO_ADDR
// end ; 2 :
72583: GO 73142
72585: LD_INT 2
72587: DOUBLE
72588: EQUAL
72589: IFTRUE 72593
72591: GO 72722
72593: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72594: LD_ADDR_VAR 0 5
72598: PUSH
72599: LD_VAR 0 1
72603: PUSH
72604: LD_VAR 0 2
72608: PUSH
72609: LD_INT 3
72611: MINUS
72612: PUSH
72613: LD_INT 3
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: LIST
72620: PUSH
72621: LD_VAR 0 1
72625: PUSH
72626: LD_INT 4
72628: PLUS
72629: PUSH
72630: LD_VAR 0 2
72634: PUSH
72635: LD_INT 4
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: LIST
72642: PUSH
72643: LD_VAR 0 1
72647: PUSH
72648: LD_VAR 0 2
72652: PUSH
72653: LD_INT 4
72655: PLUS
72656: PUSH
72657: LD_INT 0
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: LIST
72664: PUSH
72665: LD_VAR 0 1
72669: PUSH
72670: LD_INT 3
72672: MINUS
72673: PUSH
72674: LD_VAR 0 2
72678: PUSH
72679: LD_INT 1
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: LIST
72686: PUSH
72687: LD_VAR 0 1
72691: PUSH
72692: LD_INT 4
72694: MINUS
72695: PUSH
72696: LD_VAR 0 2
72700: PUSH
72701: LD_INT 4
72703: MINUS
72704: PUSH
72705: LD_INT 2
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: LIST
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: ST_TO_ADDR
// end ; 3 :
72720: GO 73142
72722: LD_INT 3
72724: DOUBLE
72725: EQUAL
72726: IFTRUE 72730
72728: GO 72863
72730: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72731: LD_ADDR_VAR 0 5
72735: PUSH
72736: LD_VAR 0 1
72740: PUSH
72741: LD_INT 3
72743: PLUS
72744: PUSH
72745: LD_VAR 0 2
72749: PUSH
72750: LD_INT 4
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: LIST
72757: PUSH
72758: LD_VAR 0 1
72762: PUSH
72763: LD_INT 4
72765: PLUS
72766: PUSH
72767: LD_VAR 0 2
72771: PUSH
72772: LD_INT 4
72774: PLUS
72775: PUSH
72776: LD_INT 5
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: PUSH
72784: LD_VAR 0 1
72788: PUSH
72789: LD_INT 4
72791: MINUS
72792: PUSH
72793: LD_VAR 0 2
72797: PUSH
72798: LD_INT 1
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: LIST
72805: PUSH
72806: LD_VAR 0 1
72810: PUSH
72811: LD_VAR 0 2
72815: PUSH
72816: LD_INT 4
72818: MINUS
72819: PUSH
72820: LD_INT 3
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: LIST
72827: PUSH
72828: LD_VAR 0 1
72832: PUSH
72833: LD_INT 3
72835: MINUS
72836: PUSH
72837: LD_VAR 0 2
72841: PUSH
72842: LD_INT 3
72844: MINUS
72845: PUSH
72846: LD_INT 2
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: LIST
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: ST_TO_ADDR
// end ; 4 :
72861: GO 73142
72863: LD_INT 4
72865: DOUBLE
72866: EQUAL
72867: IFTRUE 72871
72869: GO 73004
72871: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72872: LD_ADDR_VAR 0 5
72876: PUSH
72877: LD_VAR 0 1
72881: PUSH
72882: LD_VAR 0 2
72886: PUSH
72887: LD_INT 4
72889: PLUS
72890: PUSH
72891: LD_INT 0
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: LIST
72898: PUSH
72899: LD_VAR 0 1
72903: PUSH
72904: LD_INT 3
72906: PLUS
72907: PUSH
72908: LD_VAR 0 2
72912: PUSH
72913: LD_INT 3
72915: PLUS
72916: PUSH
72917: LD_INT 5
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: LIST
72924: PUSH
72925: LD_VAR 0 1
72929: PUSH
72930: LD_INT 4
72932: PLUS
72933: PUSH
72934: LD_VAR 0 2
72938: PUSH
72939: LD_INT 4
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: LIST
72946: PUSH
72947: LD_VAR 0 1
72951: PUSH
72952: LD_VAR 0 2
72956: PUSH
72957: LD_INT 3
72959: MINUS
72960: PUSH
72961: LD_INT 3
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: LIST
72968: PUSH
72969: LD_VAR 0 1
72973: PUSH
72974: LD_INT 4
72976: MINUS
72977: PUSH
72978: LD_VAR 0 2
72982: PUSH
72983: LD_INT 4
72985: MINUS
72986: PUSH
72987: LD_INT 2
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: LIST
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: ST_TO_ADDR
// end ; 5 :
73002: GO 73142
73004: LD_INT 5
73006: DOUBLE
73007: EQUAL
73008: IFTRUE 73012
73010: GO 73141
73012: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73013: LD_ADDR_VAR 0 5
73017: PUSH
73018: LD_VAR 0 1
73022: PUSH
73023: LD_INT 4
73025: MINUS
73026: PUSH
73027: LD_VAR 0 2
73031: PUSH
73032: LD_INT 1
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: LIST
73039: PUSH
73040: LD_VAR 0 1
73044: PUSH
73045: LD_VAR 0 2
73049: PUSH
73050: LD_INT 4
73052: MINUS
73053: PUSH
73054: LD_INT 3
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: LIST
73061: PUSH
73062: LD_VAR 0 1
73066: PUSH
73067: LD_INT 4
73069: PLUS
73070: PUSH
73071: LD_VAR 0 2
73075: PUSH
73076: LD_INT 4
73078: PLUS
73079: PUSH
73080: LD_INT 5
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: LIST
73087: PUSH
73088: LD_VAR 0 1
73092: PUSH
73093: LD_INT 3
73095: PLUS
73096: PUSH
73097: LD_VAR 0 2
73101: PUSH
73102: LD_INT 4
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: LIST
73109: PUSH
73110: LD_VAR 0 1
73114: PUSH
73115: LD_VAR 0 2
73119: PUSH
73120: LD_INT 3
73122: PLUS
73123: PUSH
73124: LD_INT 0
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: LIST
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: ST_TO_ADDR
// end ; end ;
73139: GO 73142
73141: POP
// result := list ;
73142: LD_ADDR_VAR 0 4
73146: PUSH
73147: LD_VAR 0 5
73151: ST_TO_ADDR
// end ;
73152: LD_VAR 0 4
73156: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73157: LD_INT 0
73159: PPUSH
73160: PPUSH
73161: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73162: LD_VAR 0 1
73166: NOT
73167: PUSH
73168: LD_VAR 0 2
73172: PUSH
73173: LD_INT 1
73175: PUSH
73176: LD_INT 2
73178: PUSH
73179: LD_INT 3
73181: PUSH
73182: LD_INT 4
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: IN
73191: NOT
73192: OR
73193: IFFALSE 73197
// exit ;
73195: GO 73280
// tmp := [ ] ;
73197: LD_ADDR_VAR 0 5
73201: PUSH
73202: EMPTY
73203: ST_TO_ADDR
// for i in units do
73204: LD_ADDR_VAR 0 4
73208: PUSH
73209: LD_VAR 0 1
73213: PUSH
73214: FOR_IN
73215: IFFALSE 73249
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73217: LD_ADDR_VAR 0 5
73221: PUSH
73222: LD_VAR 0 5
73226: PPUSH
73227: LD_VAR 0 4
73231: PPUSH
73232: LD_VAR 0 2
73236: PPUSH
73237: CALL_OW 259
73241: PPUSH
73242: CALL 74653 0 2
73246: ST_TO_ADDR
73247: GO 73214
73249: POP
73250: POP
// if not tmp then
73251: LD_VAR 0 5
73255: NOT
73256: IFFALSE 73260
// exit ;
73258: GO 73280
// result := SortListByListDesc ( units , tmp ) ;
73260: LD_ADDR_VAR 0 3
73264: PUSH
73265: LD_VAR 0 1
73269: PPUSH
73270: LD_VAR 0 5
73274: PPUSH
73275: CALL_OW 77
73279: ST_TO_ADDR
// end ;
73280: LD_VAR 0 3
73284: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73285: LD_INT 0
73287: PPUSH
73288: PPUSH
73289: PPUSH
// result := false ;
73290: LD_ADDR_VAR 0 3
73294: PUSH
73295: LD_INT 0
73297: ST_TO_ADDR
// if not building then
73298: LD_VAR 0 2
73302: NOT
73303: IFFALSE 73307
// exit ;
73305: GO 73445
// x := GetX ( building ) ;
73307: LD_ADDR_VAR 0 4
73311: PUSH
73312: LD_VAR 0 2
73316: PPUSH
73317: CALL_OW 250
73321: ST_TO_ADDR
// y := GetY ( building ) ;
73322: LD_ADDR_VAR 0 5
73326: PUSH
73327: LD_VAR 0 2
73331: PPUSH
73332: CALL_OW 251
73336: ST_TO_ADDR
// if not x or not y then
73337: LD_VAR 0 4
73341: NOT
73342: PUSH
73343: LD_VAR 0 5
73347: NOT
73348: OR
73349: IFFALSE 73353
// exit ;
73351: GO 73445
// if GetTaskList ( unit ) then
73353: LD_VAR 0 1
73357: PPUSH
73358: CALL_OW 437
73362: IFFALSE 73445
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73364: LD_STRING e
73366: PUSH
73367: LD_VAR 0 1
73371: PPUSH
73372: CALL_OW 437
73376: PUSH
73377: LD_INT 1
73379: ARRAY
73380: PUSH
73381: LD_INT 1
73383: ARRAY
73384: EQUAL
73385: PUSH
73386: LD_VAR 0 4
73390: PUSH
73391: LD_VAR 0 1
73395: PPUSH
73396: CALL_OW 437
73400: PUSH
73401: LD_INT 1
73403: ARRAY
73404: PUSH
73405: LD_INT 2
73407: ARRAY
73408: EQUAL
73409: AND
73410: PUSH
73411: LD_VAR 0 5
73415: PUSH
73416: LD_VAR 0 1
73420: PPUSH
73421: CALL_OW 437
73425: PUSH
73426: LD_INT 1
73428: ARRAY
73429: PUSH
73430: LD_INT 3
73432: ARRAY
73433: EQUAL
73434: AND
73435: IFFALSE 73445
// result := true end ;
73437: LD_ADDR_VAR 0 3
73441: PUSH
73442: LD_INT 1
73444: ST_TO_ADDR
// end ;
73445: LD_VAR 0 3
73449: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73450: LD_INT 0
73452: PPUSH
// result := false ;
73453: LD_ADDR_VAR 0 4
73457: PUSH
73458: LD_INT 0
73460: ST_TO_ADDR
// if GetTaskList ( unit ) then
73461: LD_VAR 0 1
73465: PPUSH
73466: CALL_OW 437
73470: IFFALSE 73553
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73472: LD_STRING M
73474: PUSH
73475: LD_VAR 0 1
73479: PPUSH
73480: CALL_OW 437
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: PUSH
73489: LD_INT 1
73491: ARRAY
73492: EQUAL
73493: PUSH
73494: LD_VAR 0 2
73498: PUSH
73499: LD_VAR 0 1
73503: PPUSH
73504: CALL_OW 437
73508: PUSH
73509: LD_INT 1
73511: ARRAY
73512: PUSH
73513: LD_INT 2
73515: ARRAY
73516: EQUAL
73517: AND
73518: PUSH
73519: LD_VAR 0 3
73523: PUSH
73524: LD_VAR 0 1
73528: PPUSH
73529: CALL_OW 437
73533: PUSH
73534: LD_INT 1
73536: ARRAY
73537: PUSH
73538: LD_INT 3
73540: ARRAY
73541: EQUAL
73542: AND
73543: IFFALSE 73553
// result := true ;
73545: LD_ADDR_VAR 0 4
73549: PUSH
73550: LD_INT 1
73552: ST_TO_ADDR
// end ; end ;
73553: LD_VAR 0 4
73557: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73558: LD_INT 0
73560: PPUSH
73561: PPUSH
73562: PPUSH
73563: PPUSH
// if not unit or not area then
73564: LD_VAR 0 1
73568: NOT
73569: PUSH
73570: LD_VAR 0 2
73574: NOT
73575: OR
73576: IFFALSE 73580
// exit ;
73578: GO 73756
// tmp := AreaToList ( area , i ) ;
73580: LD_ADDR_VAR 0 6
73584: PUSH
73585: LD_VAR 0 2
73589: PPUSH
73590: LD_VAR 0 5
73594: PPUSH
73595: CALL_OW 517
73599: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73600: LD_ADDR_VAR 0 5
73604: PUSH
73605: DOUBLE
73606: LD_INT 1
73608: DEC
73609: ST_TO_ADDR
73610: LD_VAR 0 6
73614: PUSH
73615: LD_INT 1
73617: ARRAY
73618: PUSH
73619: FOR_TO
73620: IFFALSE 73754
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73622: LD_ADDR_VAR 0 7
73626: PUSH
73627: LD_VAR 0 6
73631: PUSH
73632: LD_INT 1
73634: ARRAY
73635: PUSH
73636: LD_VAR 0 5
73640: ARRAY
73641: PUSH
73642: LD_VAR 0 6
73646: PUSH
73647: LD_INT 2
73649: ARRAY
73650: PUSH
73651: LD_VAR 0 5
73655: ARRAY
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73661: LD_INT 92
73663: PUSH
73664: LD_VAR 0 7
73668: PUSH
73669: LD_INT 1
73671: ARRAY
73672: PUSH
73673: LD_VAR 0 7
73677: PUSH
73678: LD_INT 2
73680: ARRAY
73681: PUSH
73682: LD_INT 2
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: PPUSH
73691: CALL_OW 69
73695: PUSH
73696: LD_INT 0
73698: EQUAL
73699: IFFALSE 73752
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73701: LD_VAR 0 1
73705: PPUSH
73706: LD_VAR 0 7
73710: PUSH
73711: LD_INT 1
73713: ARRAY
73714: PPUSH
73715: LD_VAR 0 7
73719: PUSH
73720: LD_INT 2
73722: ARRAY
73723: PPUSH
73724: LD_VAR 0 3
73728: PPUSH
73729: CALL_OW 48
// result := IsPlaced ( unit ) ;
73733: LD_ADDR_VAR 0 4
73737: PUSH
73738: LD_VAR 0 1
73742: PPUSH
73743: CALL_OW 305
73747: ST_TO_ADDR
// exit ;
73748: POP
73749: POP
73750: GO 73756
// end ; end ;
73752: GO 73619
73754: POP
73755: POP
// end ;
73756: LD_VAR 0 4
73760: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73761: LD_INT 0
73763: PPUSH
73764: PPUSH
73765: PPUSH
// if not side or side > 8 then
73766: LD_VAR 0 1
73770: NOT
73771: PUSH
73772: LD_VAR 0 1
73776: PUSH
73777: LD_INT 8
73779: GREATER
73780: OR
73781: IFFALSE 73785
// exit ;
73783: GO 73972
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73785: LD_ADDR_VAR 0 4
73789: PUSH
73790: LD_INT 22
73792: PUSH
73793: LD_VAR 0 1
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: LD_INT 21
73804: PUSH
73805: LD_INT 3
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PPUSH
73816: CALL_OW 69
73820: ST_TO_ADDR
// if not tmp then
73821: LD_VAR 0 4
73825: NOT
73826: IFFALSE 73830
// exit ;
73828: GO 73972
// enable_addtolog := true ;
73830: LD_ADDR_OWVAR 81
73834: PUSH
73835: LD_INT 1
73837: ST_TO_ADDR
// AddToLog ( [ ) ;
73838: LD_STRING [
73840: PPUSH
73841: CALL_OW 561
// for i in tmp do
73845: LD_ADDR_VAR 0 3
73849: PUSH
73850: LD_VAR 0 4
73854: PUSH
73855: FOR_IN
73856: IFFALSE 73963
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73858: LD_STRING [
73860: PUSH
73861: LD_VAR 0 3
73865: PPUSH
73866: CALL_OW 266
73870: STR
73871: PUSH
73872: LD_STRING , 
73874: STR
73875: PUSH
73876: LD_VAR 0 3
73880: PPUSH
73881: CALL_OW 250
73885: STR
73886: PUSH
73887: LD_STRING , 
73889: STR
73890: PUSH
73891: LD_VAR 0 3
73895: PPUSH
73896: CALL_OW 251
73900: STR
73901: PUSH
73902: LD_STRING , 
73904: STR
73905: PUSH
73906: LD_VAR 0 3
73910: PPUSH
73911: CALL_OW 254
73915: STR
73916: PUSH
73917: LD_STRING , 
73919: STR
73920: PUSH
73921: LD_VAR 0 3
73925: PPUSH
73926: LD_INT 1
73928: PPUSH
73929: CALL_OW 268
73933: STR
73934: PUSH
73935: LD_STRING , 
73937: STR
73938: PUSH
73939: LD_VAR 0 3
73943: PPUSH
73944: LD_INT 2
73946: PPUSH
73947: CALL_OW 268
73951: STR
73952: PUSH
73953: LD_STRING ],
73955: STR
73956: PPUSH
73957: CALL_OW 561
// end ;
73961: GO 73855
73963: POP
73964: POP
// AddToLog ( ]; ) ;
73965: LD_STRING ];
73967: PPUSH
73968: CALL_OW 561
// end ;
73972: LD_VAR 0 2
73976: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73977: LD_INT 0
73979: PPUSH
73980: PPUSH
73981: PPUSH
73982: PPUSH
73983: PPUSH
// if not area or not rate or not max then
73984: LD_VAR 0 1
73988: NOT
73989: PUSH
73990: LD_VAR 0 2
73994: NOT
73995: OR
73996: PUSH
73997: LD_VAR 0 4
74001: NOT
74002: OR
74003: IFFALSE 74007
// exit ;
74005: GO 74196
// while 1 do
74007: LD_INT 1
74009: IFFALSE 74196
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74011: LD_ADDR_VAR 0 9
74015: PUSH
74016: LD_VAR 0 1
74020: PPUSH
74021: LD_INT 1
74023: PPUSH
74024: CALL_OW 287
74028: PUSH
74029: LD_INT 10
74031: MUL
74032: ST_TO_ADDR
// r := rate / 10 ;
74033: LD_ADDR_VAR 0 7
74037: PUSH
74038: LD_VAR 0 2
74042: PUSH
74043: LD_INT 10
74045: DIVREAL
74046: ST_TO_ADDR
// time := 1 1$00 ;
74047: LD_ADDR_VAR 0 8
74051: PUSH
74052: LD_INT 2100
74054: ST_TO_ADDR
// if amount < min then
74055: LD_VAR 0 9
74059: PUSH
74060: LD_VAR 0 3
74064: LESS
74065: IFFALSE 74083
// r := r * 2 else
74067: LD_ADDR_VAR 0 7
74071: PUSH
74072: LD_VAR 0 7
74076: PUSH
74077: LD_INT 2
74079: MUL
74080: ST_TO_ADDR
74081: GO 74109
// if amount > max then
74083: LD_VAR 0 9
74087: PUSH
74088: LD_VAR 0 4
74092: GREATER
74093: IFFALSE 74109
// r := r / 2 ;
74095: LD_ADDR_VAR 0 7
74099: PUSH
74100: LD_VAR 0 7
74104: PUSH
74105: LD_INT 2
74107: DIVREAL
74108: ST_TO_ADDR
// time := time / r ;
74109: LD_ADDR_VAR 0 8
74113: PUSH
74114: LD_VAR 0 8
74118: PUSH
74119: LD_VAR 0 7
74123: DIVREAL
74124: ST_TO_ADDR
// if time < 0 then
74125: LD_VAR 0 8
74129: PUSH
74130: LD_INT 0
74132: LESS
74133: IFFALSE 74150
// time := time * - 1 ;
74135: LD_ADDR_VAR 0 8
74139: PUSH
74140: LD_VAR 0 8
74144: PUSH
74145: LD_INT 1
74147: NEG
74148: MUL
74149: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74150: LD_VAR 0 8
74154: PUSH
74155: LD_INT 35
74157: PPUSH
74158: LD_INT 875
74160: PPUSH
74161: CALL_OW 12
74165: PLUS
74166: PPUSH
74167: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74171: LD_INT 1
74173: PPUSH
74174: LD_INT 5
74176: PPUSH
74177: CALL_OW 12
74181: PPUSH
74182: LD_VAR 0 1
74186: PPUSH
74187: LD_INT 1
74189: PPUSH
74190: CALL_OW 55
// end ;
74194: GO 74007
// end ;
74196: LD_VAR 0 5
74200: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74201: LD_INT 0
74203: PPUSH
74204: PPUSH
74205: PPUSH
74206: PPUSH
74207: PPUSH
74208: PPUSH
74209: PPUSH
74210: PPUSH
// if not turrets or not factories then
74211: LD_VAR 0 1
74215: NOT
74216: PUSH
74217: LD_VAR 0 2
74221: NOT
74222: OR
74223: IFFALSE 74227
// exit ;
74225: GO 74534
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74227: LD_ADDR_VAR 0 10
74231: PUSH
74232: LD_INT 5
74234: PUSH
74235: LD_INT 6
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 2
74244: PUSH
74245: LD_INT 4
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 3
74254: PUSH
74255: LD_INT 5
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 24
74269: PUSH
74270: LD_INT 25
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 23
74279: PUSH
74280: LD_INT 27
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_INT 42
74293: PUSH
74294: LD_INT 43
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: LD_INT 44
74303: PUSH
74304: LD_INT 46
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 45
74313: PUSH
74314: LD_INT 47
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: LIST
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: ST_TO_ADDR
// result := [ ] ;
74331: LD_ADDR_VAR 0 3
74335: PUSH
74336: EMPTY
74337: ST_TO_ADDR
// for i in turrets do
74338: LD_ADDR_VAR 0 4
74342: PUSH
74343: LD_VAR 0 1
74347: PUSH
74348: FOR_IN
74349: IFFALSE 74532
// begin nat := GetNation ( i ) ;
74351: LD_ADDR_VAR 0 7
74355: PUSH
74356: LD_VAR 0 4
74360: PPUSH
74361: CALL_OW 248
74365: ST_TO_ADDR
// weapon := 0 ;
74366: LD_ADDR_VAR 0 8
74370: PUSH
74371: LD_INT 0
74373: ST_TO_ADDR
// if not nat then
74374: LD_VAR 0 7
74378: NOT
74379: IFFALSE 74383
// continue ;
74381: GO 74348
// for j in list [ nat ] do
74383: LD_ADDR_VAR 0 5
74387: PUSH
74388: LD_VAR 0 10
74392: PUSH
74393: LD_VAR 0 7
74397: ARRAY
74398: PUSH
74399: FOR_IN
74400: IFFALSE 74441
// if GetBWeapon ( i ) = j [ 1 ] then
74402: LD_VAR 0 4
74406: PPUSH
74407: CALL_OW 269
74411: PUSH
74412: LD_VAR 0 5
74416: PUSH
74417: LD_INT 1
74419: ARRAY
74420: EQUAL
74421: IFFALSE 74439
// begin weapon := j [ 2 ] ;
74423: LD_ADDR_VAR 0 8
74427: PUSH
74428: LD_VAR 0 5
74432: PUSH
74433: LD_INT 2
74435: ARRAY
74436: ST_TO_ADDR
// break ;
74437: GO 74441
// end ;
74439: GO 74399
74441: POP
74442: POP
// if not weapon then
74443: LD_VAR 0 8
74447: NOT
74448: IFFALSE 74452
// continue ;
74450: GO 74348
// for k in factories do
74452: LD_ADDR_VAR 0 6
74456: PUSH
74457: LD_VAR 0 2
74461: PUSH
74462: FOR_IN
74463: IFFALSE 74528
// begin weapons := AvailableWeaponList ( k ) ;
74465: LD_ADDR_VAR 0 9
74469: PUSH
74470: LD_VAR 0 6
74474: PPUSH
74475: CALL_OW 478
74479: ST_TO_ADDR
// if not weapons then
74480: LD_VAR 0 9
74484: NOT
74485: IFFALSE 74489
// continue ;
74487: GO 74462
// if weapon in weapons then
74489: LD_VAR 0 8
74493: PUSH
74494: LD_VAR 0 9
74498: IN
74499: IFFALSE 74526
// begin result := [ i , weapon ] ;
74501: LD_ADDR_VAR 0 3
74505: PUSH
74506: LD_VAR 0 4
74510: PUSH
74511: LD_VAR 0 8
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: ST_TO_ADDR
// exit ;
74520: POP
74521: POP
74522: POP
74523: POP
74524: GO 74534
// end ; end ;
74526: GO 74462
74528: POP
74529: POP
// end ;
74530: GO 74348
74532: POP
74533: POP
// end ;
74534: LD_VAR 0 3
74538: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74539: LD_INT 0
74541: PPUSH
// if not side or side > 8 then
74542: LD_VAR 0 3
74546: NOT
74547: PUSH
74548: LD_VAR 0 3
74552: PUSH
74553: LD_INT 8
74555: GREATER
74556: OR
74557: IFFALSE 74561
// exit ;
74559: GO 74620
// if not range then
74561: LD_VAR 0 4
74565: NOT
74566: IFFALSE 74577
// range := - 12 ;
74568: LD_ADDR_VAR 0 4
74572: PUSH
74573: LD_INT 12
74575: NEG
74576: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74577: LD_VAR 0 1
74581: PPUSH
74582: LD_VAR 0 2
74586: PPUSH
74587: LD_VAR 0 3
74591: PPUSH
74592: LD_VAR 0 4
74596: PPUSH
74597: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74601: LD_VAR 0 1
74605: PPUSH
74606: LD_VAR 0 2
74610: PPUSH
74611: LD_VAR 0 3
74615: PPUSH
74616: CALL_OW 331
// end ;
74620: LD_VAR 0 5
74624: RET
// export function Video ( mode ) ; begin
74625: LD_INT 0
74627: PPUSH
// ingame_video = mode ;
74628: LD_ADDR_OWVAR 52
74632: PUSH
74633: LD_VAR 0 1
74637: ST_TO_ADDR
// interface_hidden = mode ;
74638: LD_ADDR_OWVAR 54
74642: PUSH
74643: LD_VAR 0 1
74647: ST_TO_ADDR
// end ;
74648: LD_VAR 0 2
74652: RET
// export function Join ( array , element ) ; begin
74653: LD_INT 0
74655: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74656: LD_ADDR_VAR 0 3
74660: PUSH
74661: LD_VAR 0 1
74665: PPUSH
74666: LD_VAR 0 1
74670: PUSH
74671: LD_INT 1
74673: PLUS
74674: PPUSH
74675: LD_VAR 0 2
74679: PPUSH
74680: CALL_OW 1
74684: ST_TO_ADDR
// end ;
74685: LD_VAR 0 3
74689: RET
// export function JoinUnion ( array , element ) ; begin
74690: LD_INT 0
74692: PPUSH
// result := array union element ;
74693: LD_ADDR_VAR 0 3
74697: PUSH
74698: LD_VAR 0 1
74702: PUSH
74703: LD_VAR 0 2
74707: UNION
74708: ST_TO_ADDR
// end ;
74709: LD_VAR 0 3
74713: RET
// export function GetBehemoths ( side ) ; begin
74714: LD_INT 0
74716: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74717: LD_ADDR_VAR 0 2
74721: PUSH
74722: LD_INT 22
74724: PUSH
74725: LD_VAR 0 1
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 31
74736: PUSH
74737: LD_INT 25
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PPUSH
74748: CALL_OW 69
74752: ST_TO_ADDR
// end ;
74753: LD_VAR 0 2
74757: RET
// export function Shuffle ( array ) ; var i , index ; begin
74758: LD_INT 0
74760: PPUSH
74761: PPUSH
74762: PPUSH
// result := [ ] ;
74763: LD_ADDR_VAR 0 2
74767: PUSH
74768: EMPTY
74769: ST_TO_ADDR
// if not array then
74770: LD_VAR 0 1
74774: NOT
74775: IFFALSE 74779
// exit ;
74777: GO 74878
// Randomize ;
74779: CALL_OW 10
// for i = array downto 1 do
74783: LD_ADDR_VAR 0 3
74787: PUSH
74788: DOUBLE
74789: LD_VAR 0 1
74793: INC
74794: ST_TO_ADDR
74795: LD_INT 1
74797: PUSH
74798: FOR_DOWNTO
74799: IFFALSE 74876
// begin index := rand ( 1 , array ) ;
74801: LD_ADDR_VAR 0 4
74805: PUSH
74806: LD_INT 1
74808: PPUSH
74809: LD_VAR 0 1
74813: PPUSH
74814: CALL_OW 12
74818: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74819: LD_ADDR_VAR 0 2
74823: PUSH
74824: LD_VAR 0 2
74828: PPUSH
74829: LD_VAR 0 2
74833: PUSH
74834: LD_INT 1
74836: PLUS
74837: PPUSH
74838: LD_VAR 0 1
74842: PUSH
74843: LD_VAR 0 4
74847: ARRAY
74848: PPUSH
74849: CALL_OW 2
74853: ST_TO_ADDR
// array := Delete ( array , index ) ;
74854: LD_ADDR_VAR 0 1
74858: PUSH
74859: LD_VAR 0 1
74863: PPUSH
74864: LD_VAR 0 4
74868: PPUSH
74869: CALL_OW 3
74873: ST_TO_ADDR
// end ;
74874: GO 74798
74876: POP
74877: POP
// end ;
74878: LD_VAR 0 2
74882: RET
// export function GetBaseMaterials ( base ) ; begin
74883: LD_INT 0
74885: PPUSH
// result := [ 0 , 0 , 0 ] ;
74886: LD_ADDR_VAR 0 2
74890: PUSH
74891: LD_INT 0
74893: PUSH
74894: LD_INT 0
74896: PUSH
74897: LD_INT 0
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: ST_TO_ADDR
// if not base then
74905: LD_VAR 0 1
74909: NOT
74910: IFFALSE 74914
// exit ;
74912: GO 74963
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74914: LD_ADDR_VAR 0 2
74918: PUSH
74919: LD_VAR 0 1
74923: PPUSH
74924: LD_INT 1
74926: PPUSH
74927: CALL_OW 275
74931: PUSH
74932: LD_VAR 0 1
74936: PPUSH
74937: LD_INT 2
74939: PPUSH
74940: CALL_OW 275
74944: PUSH
74945: LD_VAR 0 1
74949: PPUSH
74950: LD_INT 3
74952: PPUSH
74953: CALL_OW 275
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: LIST
74962: ST_TO_ADDR
// end ;
74963: LD_VAR 0 2
74967: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74968: LD_INT 0
74970: PPUSH
74971: PPUSH
// result := array ;
74972: LD_ADDR_VAR 0 3
74976: PUSH
74977: LD_VAR 0 1
74981: ST_TO_ADDR
// if size >= result then
74982: LD_VAR 0 2
74986: PUSH
74987: LD_VAR 0 3
74991: GREATEREQUAL
74992: IFFALSE 74996
// exit ;
74994: GO 75046
// if size then
74996: LD_VAR 0 2
75000: IFFALSE 75046
// for i := array downto size do
75002: LD_ADDR_VAR 0 4
75006: PUSH
75007: DOUBLE
75008: LD_VAR 0 1
75012: INC
75013: ST_TO_ADDR
75014: LD_VAR 0 2
75018: PUSH
75019: FOR_DOWNTO
75020: IFFALSE 75044
// result := Delete ( result , result ) ;
75022: LD_ADDR_VAR 0 3
75026: PUSH
75027: LD_VAR 0 3
75031: PPUSH
75032: LD_VAR 0 3
75036: PPUSH
75037: CALL_OW 3
75041: ST_TO_ADDR
75042: GO 75019
75044: POP
75045: POP
// end ;
75046: LD_VAR 0 3
75050: RET
// export function ComExit ( unit ) ; var tmp ; begin
75051: LD_INT 0
75053: PPUSH
75054: PPUSH
// if not IsInUnit ( unit ) then
75055: LD_VAR 0 1
75059: PPUSH
75060: CALL_OW 310
75064: NOT
75065: IFFALSE 75069
// exit ;
75067: GO 75129
// tmp := IsInUnit ( unit ) ;
75069: LD_ADDR_VAR 0 3
75073: PUSH
75074: LD_VAR 0 1
75078: PPUSH
75079: CALL_OW 310
75083: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75084: LD_VAR 0 3
75088: PPUSH
75089: CALL_OW 247
75093: PUSH
75094: LD_INT 2
75096: EQUAL
75097: IFFALSE 75110
// ComExitVehicle ( unit ) else
75099: LD_VAR 0 1
75103: PPUSH
75104: CALL_OW 121
75108: GO 75119
// ComExitBuilding ( unit ) ;
75110: LD_VAR 0 1
75114: PPUSH
75115: CALL_OW 122
// result := tmp ;
75119: LD_ADDR_VAR 0 2
75123: PUSH
75124: LD_VAR 0 3
75128: ST_TO_ADDR
// end ;
75129: LD_VAR 0 2
75133: RET
// export function ComExitAll ( units ) ; var i ; begin
75134: LD_INT 0
75136: PPUSH
75137: PPUSH
// if not units then
75138: LD_VAR 0 1
75142: NOT
75143: IFFALSE 75147
// exit ;
75145: GO 75173
// for i in units do
75147: LD_ADDR_VAR 0 3
75151: PUSH
75152: LD_VAR 0 1
75156: PUSH
75157: FOR_IN
75158: IFFALSE 75171
// ComExit ( i ) ;
75160: LD_VAR 0 3
75164: PPUSH
75165: CALL 75051 0 1
75169: GO 75157
75171: POP
75172: POP
// end ;
75173: LD_VAR 0 2
75177: RET
// export function ResetHc ; begin
75178: LD_INT 0
75180: PPUSH
// InitHc ;
75181: CALL_OW 19
// hc_importance := 0 ;
75185: LD_ADDR_OWVAR 32
75189: PUSH
75190: LD_INT 0
75192: ST_TO_ADDR
// end ;
75193: LD_VAR 0 1
75197: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75198: LD_INT 0
75200: PPUSH
75201: PPUSH
75202: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75203: LD_ADDR_VAR 0 6
75207: PUSH
75208: LD_VAR 0 1
75212: PUSH
75213: LD_VAR 0 3
75217: PLUS
75218: PUSH
75219: LD_INT 2
75221: DIV
75222: ST_TO_ADDR
// if _x < 0 then
75223: LD_VAR 0 6
75227: PUSH
75228: LD_INT 0
75230: LESS
75231: IFFALSE 75248
// _x := _x * - 1 ;
75233: LD_ADDR_VAR 0 6
75237: PUSH
75238: LD_VAR 0 6
75242: PUSH
75243: LD_INT 1
75245: NEG
75246: MUL
75247: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75248: LD_ADDR_VAR 0 7
75252: PUSH
75253: LD_VAR 0 2
75257: PUSH
75258: LD_VAR 0 4
75262: PLUS
75263: PUSH
75264: LD_INT 2
75266: DIV
75267: ST_TO_ADDR
// if _y < 0 then
75268: LD_VAR 0 7
75272: PUSH
75273: LD_INT 0
75275: LESS
75276: IFFALSE 75293
// _y := _y * - 1 ;
75278: LD_ADDR_VAR 0 7
75282: PUSH
75283: LD_VAR 0 7
75287: PUSH
75288: LD_INT 1
75290: NEG
75291: MUL
75292: ST_TO_ADDR
// result := [ _x , _y ] ;
75293: LD_ADDR_VAR 0 5
75297: PUSH
75298: LD_VAR 0 6
75302: PUSH
75303: LD_VAR 0 7
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: ST_TO_ADDR
// end ;
75312: LD_VAR 0 5
75316: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75317: LD_INT 0
75319: PPUSH
75320: PPUSH
75321: PPUSH
75322: PPUSH
// task := GetTaskList ( unit ) ;
75323: LD_ADDR_VAR 0 7
75327: PUSH
75328: LD_VAR 0 1
75332: PPUSH
75333: CALL_OW 437
75337: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75338: LD_VAR 0 7
75342: NOT
75343: PUSH
75344: LD_VAR 0 1
75348: PPUSH
75349: LD_VAR 0 2
75353: PPUSH
75354: CALL_OW 308
75358: NOT
75359: AND
75360: IFFALSE 75364
// exit ;
75362: GO 75482
// if IsInArea ( unit , area ) then
75364: LD_VAR 0 1
75368: PPUSH
75369: LD_VAR 0 2
75373: PPUSH
75374: CALL_OW 308
75378: IFFALSE 75396
// begin ComMoveToArea ( unit , goAway ) ;
75380: LD_VAR 0 1
75384: PPUSH
75385: LD_VAR 0 3
75389: PPUSH
75390: CALL_OW 113
// exit ;
75394: GO 75482
// end ; if task [ 1 ] [ 1 ] <> M then
75396: LD_VAR 0 7
75400: PUSH
75401: LD_INT 1
75403: ARRAY
75404: PUSH
75405: LD_INT 1
75407: ARRAY
75408: PUSH
75409: LD_STRING M
75411: NONEQUAL
75412: IFFALSE 75416
// exit ;
75414: GO 75482
// x := task [ 1 ] [ 2 ] ;
75416: LD_ADDR_VAR 0 5
75420: PUSH
75421: LD_VAR 0 7
75425: PUSH
75426: LD_INT 1
75428: ARRAY
75429: PUSH
75430: LD_INT 2
75432: ARRAY
75433: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75434: LD_ADDR_VAR 0 6
75438: PUSH
75439: LD_VAR 0 7
75443: PUSH
75444: LD_INT 1
75446: ARRAY
75447: PUSH
75448: LD_INT 3
75450: ARRAY
75451: ST_TO_ADDR
// if InArea ( x , y , area ) then
75452: LD_VAR 0 5
75456: PPUSH
75457: LD_VAR 0 6
75461: PPUSH
75462: LD_VAR 0 2
75466: PPUSH
75467: CALL_OW 309
75471: IFFALSE 75482
// ComStop ( unit ) ;
75473: LD_VAR 0 1
75477: PPUSH
75478: CALL_OW 141
// end ;
75482: LD_VAR 0 4
75486: RET
// export function Abs ( value ) ; begin
75487: LD_INT 0
75489: PPUSH
// result := value ;
75490: LD_ADDR_VAR 0 2
75494: PUSH
75495: LD_VAR 0 1
75499: ST_TO_ADDR
// if value < 0 then
75500: LD_VAR 0 1
75504: PUSH
75505: LD_INT 0
75507: LESS
75508: IFFALSE 75525
// result := value * - 1 ;
75510: LD_ADDR_VAR 0 2
75514: PUSH
75515: LD_VAR 0 1
75519: PUSH
75520: LD_INT 1
75522: NEG
75523: MUL
75524: ST_TO_ADDR
// end ;
75525: LD_VAR 0 2
75529: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75530: LD_INT 0
75532: PPUSH
75533: PPUSH
75534: PPUSH
75535: PPUSH
75536: PPUSH
75537: PPUSH
75538: PPUSH
75539: PPUSH
// if not unit or not building then
75540: LD_VAR 0 1
75544: NOT
75545: PUSH
75546: LD_VAR 0 2
75550: NOT
75551: OR
75552: IFFALSE 75556
// exit ;
75554: GO 75782
// x := GetX ( building ) ;
75556: LD_ADDR_VAR 0 4
75560: PUSH
75561: LD_VAR 0 2
75565: PPUSH
75566: CALL_OW 250
75570: ST_TO_ADDR
// y := GetY ( building ) ;
75571: LD_ADDR_VAR 0 6
75575: PUSH
75576: LD_VAR 0 2
75580: PPUSH
75581: CALL_OW 251
75585: ST_TO_ADDR
// d := GetDir ( building ) ;
75586: LD_ADDR_VAR 0 8
75590: PUSH
75591: LD_VAR 0 2
75595: PPUSH
75596: CALL_OW 254
75600: ST_TO_ADDR
// r := 4 ;
75601: LD_ADDR_VAR 0 9
75605: PUSH
75606: LD_INT 4
75608: ST_TO_ADDR
// for i := 1 to 5 do
75609: LD_ADDR_VAR 0 10
75613: PUSH
75614: DOUBLE
75615: LD_INT 1
75617: DEC
75618: ST_TO_ADDR
75619: LD_INT 5
75621: PUSH
75622: FOR_TO
75623: IFFALSE 75780
// begin _x := ShiftX ( x , d , r + i ) ;
75625: LD_ADDR_VAR 0 5
75629: PUSH
75630: LD_VAR 0 4
75634: PPUSH
75635: LD_VAR 0 8
75639: PPUSH
75640: LD_VAR 0 9
75644: PUSH
75645: LD_VAR 0 10
75649: PLUS
75650: PPUSH
75651: CALL_OW 272
75655: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75656: LD_ADDR_VAR 0 7
75660: PUSH
75661: LD_VAR 0 6
75665: PPUSH
75666: LD_VAR 0 8
75670: PPUSH
75671: LD_VAR 0 9
75675: PUSH
75676: LD_VAR 0 10
75680: PLUS
75681: PPUSH
75682: CALL_OW 273
75686: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75687: LD_VAR 0 5
75691: PPUSH
75692: LD_VAR 0 7
75696: PPUSH
75697: CALL_OW 488
75701: PUSH
75702: LD_VAR 0 5
75706: PPUSH
75707: LD_VAR 0 7
75711: PPUSH
75712: CALL_OW 428
75716: PPUSH
75717: CALL_OW 247
75721: PUSH
75722: LD_INT 3
75724: PUSH
75725: LD_INT 2
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: IN
75732: NOT
75733: AND
75734: IFFALSE 75778
// begin ComMoveXY ( unit , _x , _y ) ;
75736: LD_VAR 0 1
75740: PPUSH
75741: LD_VAR 0 5
75745: PPUSH
75746: LD_VAR 0 7
75750: PPUSH
75751: CALL_OW 111
// result := [ _x , _y ] ;
75755: LD_ADDR_VAR 0 3
75759: PUSH
75760: LD_VAR 0 5
75764: PUSH
75765: LD_VAR 0 7
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: ST_TO_ADDR
// exit ;
75774: POP
75775: POP
75776: GO 75782
// end ; end ;
75778: GO 75622
75780: POP
75781: POP
// end ;
75782: LD_VAR 0 3
75786: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75787: LD_INT 0
75789: PPUSH
75790: PPUSH
75791: PPUSH
// result := 0 ;
75792: LD_ADDR_VAR 0 3
75796: PUSH
75797: LD_INT 0
75799: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75800: LD_VAR 0 1
75804: PUSH
75805: LD_INT 0
75807: LESS
75808: PUSH
75809: LD_VAR 0 1
75813: PUSH
75814: LD_INT 8
75816: GREATER
75817: OR
75818: PUSH
75819: LD_VAR 0 2
75823: PUSH
75824: LD_INT 0
75826: LESS
75827: OR
75828: PUSH
75829: LD_VAR 0 2
75833: PUSH
75834: LD_INT 8
75836: GREATER
75837: OR
75838: IFFALSE 75842
// exit ;
75840: GO 75917
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75842: LD_ADDR_VAR 0 4
75846: PUSH
75847: LD_INT 22
75849: PUSH
75850: LD_VAR 0 2
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PPUSH
75859: CALL_OW 69
75863: PUSH
75864: FOR_IN
75865: IFFALSE 75915
// begin un := UnitShoot ( i ) ;
75867: LD_ADDR_VAR 0 5
75871: PUSH
75872: LD_VAR 0 4
75876: PPUSH
75877: CALL_OW 504
75881: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75882: LD_VAR 0 5
75886: PPUSH
75887: CALL_OW 255
75891: PUSH
75892: LD_VAR 0 1
75896: EQUAL
75897: IFFALSE 75913
// begin result := un ;
75899: LD_ADDR_VAR 0 3
75903: PUSH
75904: LD_VAR 0 5
75908: ST_TO_ADDR
// exit ;
75909: POP
75910: POP
75911: GO 75917
// end ; end ;
75913: GO 75864
75915: POP
75916: POP
// end ;
75917: LD_VAR 0 3
75921: RET
// export function GetCargoBay ( units ) ; begin
75922: LD_INT 0
75924: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75925: LD_ADDR_VAR 0 2
75929: PUSH
75930: LD_VAR 0 1
75934: PPUSH
75935: LD_INT 2
75937: PUSH
75938: LD_INT 34
75940: PUSH
75941: LD_INT 12
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: PUSH
75948: LD_INT 34
75950: PUSH
75951: LD_INT 51
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: PUSH
75958: LD_INT 34
75960: PUSH
75961: LD_INT 32
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 34
75970: PUSH
75971: LD_INT 89
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: PPUSH
75985: CALL_OW 72
75989: ST_TO_ADDR
// end ;
75990: LD_VAR 0 2
75994: RET
// export function Negate ( value ) ; begin
75995: LD_INT 0
75997: PPUSH
// result := not value ;
75998: LD_ADDR_VAR 0 2
76002: PUSH
76003: LD_VAR 0 1
76007: NOT
76008: ST_TO_ADDR
// end ;
76009: LD_VAR 0 2
76013: RET
// export function Inc ( value ) ; begin
76014: LD_INT 0
76016: PPUSH
// result := value + 1 ;
76017: LD_ADDR_VAR 0 2
76021: PUSH
76022: LD_VAR 0 1
76026: PUSH
76027: LD_INT 1
76029: PLUS
76030: ST_TO_ADDR
// end ;
76031: LD_VAR 0 2
76035: RET
// export function Dec ( value ) ; begin
76036: LD_INT 0
76038: PPUSH
// result := value - 1 ;
76039: LD_ADDR_VAR 0 2
76043: PUSH
76044: LD_VAR 0 1
76048: PUSH
76049: LD_INT 1
76051: MINUS
76052: ST_TO_ADDR
// end ;
76053: LD_VAR 0 2
76057: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76058: LD_INT 0
76060: PPUSH
76061: PPUSH
76062: PPUSH
76063: PPUSH
76064: PPUSH
76065: PPUSH
76066: PPUSH
76067: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76068: LD_VAR 0 1
76072: PPUSH
76073: LD_VAR 0 2
76077: PPUSH
76078: CALL_OW 488
76082: NOT
76083: PUSH
76084: LD_VAR 0 3
76088: PPUSH
76089: LD_VAR 0 4
76093: PPUSH
76094: CALL_OW 488
76098: NOT
76099: OR
76100: IFFALSE 76113
// begin result := - 1 ;
76102: LD_ADDR_VAR 0 5
76106: PUSH
76107: LD_INT 1
76109: NEG
76110: ST_TO_ADDR
// exit ;
76111: GO 76348
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76113: LD_ADDR_VAR 0 12
76117: PUSH
76118: LD_VAR 0 1
76122: PPUSH
76123: LD_VAR 0 2
76127: PPUSH
76128: LD_VAR 0 3
76132: PPUSH
76133: LD_VAR 0 4
76137: PPUSH
76138: CALL 75198 0 4
76142: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76143: LD_ADDR_VAR 0 11
76147: PUSH
76148: LD_VAR 0 1
76152: PPUSH
76153: LD_VAR 0 2
76157: PPUSH
76158: LD_VAR 0 12
76162: PUSH
76163: LD_INT 1
76165: ARRAY
76166: PPUSH
76167: LD_VAR 0 12
76171: PUSH
76172: LD_INT 2
76174: ARRAY
76175: PPUSH
76176: CALL_OW 298
76180: ST_TO_ADDR
// distance := 9999 ;
76181: LD_ADDR_VAR 0 10
76185: PUSH
76186: LD_INT 9999
76188: ST_TO_ADDR
// for i := 0 to 5 do
76189: LD_ADDR_VAR 0 6
76193: PUSH
76194: DOUBLE
76195: LD_INT 0
76197: DEC
76198: ST_TO_ADDR
76199: LD_INT 5
76201: PUSH
76202: FOR_TO
76203: IFFALSE 76346
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76205: LD_ADDR_VAR 0 7
76209: PUSH
76210: LD_VAR 0 1
76214: PPUSH
76215: LD_VAR 0 6
76219: PPUSH
76220: LD_VAR 0 11
76224: PPUSH
76225: CALL_OW 272
76229: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76230: LD_ADDR_VAR 0 8
76234: PUSH
76235: LD_VAR 0 2
76239: PPUSH
76240: LD_VAR 0 6
76244: PPUSH
76245: LD_VAR 0 11
76249: PPUSH
76250: CALL_OW 273
76254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76255: LD_VAR 0 7
76259: PPUSH
76260: LD_VAR 0 8
76264: PPUSH
76265: CALL_OW 488
76269: NOT
76270: IFFALSE 76274
// continue ;
76272: GO 76202
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76274: LD_ADDR_VAR 0 9
76278: PUSH
76279: LD_VAR 0 12
76283: PUSH
76284: LD_INT 1
76286: ARRAY
76287: PPUSH
76288: LD_VAR 0 12
76292: PUSH
76293: LD_INT 2
76295: ARRAY
76296: PPUSH
76297: LD_VAR 0 7
76301: PPUSH
76302: LD_VAR 0 8
76306: PPUSH
76307: CALL_OW 298
76311: ST_TO_ADDR
// if tmp < distance then
76312: LD_VAR 0 9
76316: PUSH
76317: LD_VAR 0 10
76321: LESS
76322: IFFALSE 76344
// begin result := i ;
76324: LD_ADDR_VAR 0 5
76328: PUSH
76329: LD_VAR 0 6
76333: ST_TO_ADDR
// distance := tmp ;
76334: LD_ADDR_VAR 0 10
76338: PUSH
76339: LD_VAR 0 9
76343: ST_TO_ADDR
// end ; end ;
76344: GO 76202
76346: POP
76347: POP
// end ;
76348: LD_VAR 0 5
76352: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76353: LD_INT 0
76355: PPUSH
76356: PPUSH
// if not driver or not IsInUnit ( driver ) then
76357: LD_VAR 0 1
76361: NOT
76362: PUSH
76363: LD_VAR 0 1
76367: PPUSH
76368: CALL_OW 310
76372: NOT
76373: OR
76374: IFFALSE 76378
// exit ;
76376: GO 76468
// vehicle := IsInUnit ( driver ) ;
76378: LD_ADDR_VAR 0 3
76382: PUSH
76383: LD_VAR 0 1
76387: PPUSH
76388: CALL_OW 310
76392: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76393: LD_VAR 0 1
76397: PPUSH
76398: LD_STRING \
76400: PUSH
76401: LD_INT 0
76403: PUSH
76404: LD_INT 0
76406: PUSH
76407: LD_INT 0
76409: PUSH
76410: LD_INT 0
76412: PUSH
76413: LD_INT 0
76415: PUSH
76416: LD_INT 0
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: PUSH
76428: LD_STRING E
76430: PUSH
76431: LD_INT 0
76433: PUSH
76434: LD_INT 0
76436: PUSH
76437: LD_VAR 0 3
76441: PUSH
76442: LD_INT 0
76444: PUSH
76445: LD_INT 0
76447: PUSH
76448: LD_INT 0
76450: PUSH
76451: EMPTY
76452: LIST
76453: LIST
76454: LIST
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PPUSH
76464: CALL_OW 446
// end ;
76468: LD_VAR 0 2
76472: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76473: LD_INT 0
76475: PPUSH
76476: PPUSH
// if not driver or not IsInUnit ( driver ) then
76477: LD_VAR 0 1
76481: NOT
76482: PUSH
76483: LD_VAR 0 1
76487: PPUSH
76488: CALL_OW 310
76492: NOT
76493: OR
76494: IFFALSE 76498
// exit ;
76496: GO 76588
// vehicle := IsInUnit ( driver ) ;
76498: LD_ADDR_VAR 0 3
76502: PUSH
76503: LD_VAR 0 1
76507: PPUSH
76508: CALL_OW 310
76512: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76513: LD_VAR 0 1
76517: PPUSH
76518: LD_STRING \
76520: PUSH
76521: LD_INT 0
76523: PUSH
76524: LD_INT 0
76526: PUSH
76527: LD_INT 0
76529: PUSH
76530: LD_INT 0
76532: PUSH
76533: LD_INT 0
76535: PUSH
76536: LD_INT 0
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: PUSH
76548: LD_STRING E
76550: PUSH
76551: LD_INT 0
76553: PUSH
76554: LD_INT 0
76556: PUSH
76557: LD_VAR 0 3
76561: PUSH
76562: LD_INT 0
76564: PUSH
76565: LD_INT 0
76567: PUSH
76568: LD_INT 0
76570: PUSH
76571: EMPTY
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PPUSH
76584: CALL_OW 447
// end ;
76588: LD_VAR 0 2
76592: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76593: LD_INT 0
76595: PPUSH
76596: PPUSH
76597: PPUSH
// tmp := [ ] ;
76598: LD_ADDR_VAR 0 5
76602: PUSH
76603: EMPTY
76604: ST_TO_ADDR
// for i in units do
76605: LD_ADDR_VAR 0 4
76609: PUSH
76610: LD_VAR 0 1
76614: PUSH
76615: FOR_IN
76616: IFFALSE 76654
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76618: LD_ADDR_VAR 0 5
76622: PUSH
76623: LD_VAR 0 5
76627: PPUSH
76628: LD_VAR 0 5
76632: PUSH
76633: LD_INT 1
76635: PLUS
76636: PPUSH
76637: LD_VAR 0 4
76641: PPUSH
76642: CALL_OW 256
76646: PPUSH
76647: CALL_OW 2
76651: ST_TO_ADDR
76652: GO 76615
76654: POP
76655: POP
// if not tmp then
76656: LD_VAR 0 5
76660: NOT
76661: IFFALSE 76665
// exit ;
76663: GO 76713
// if asc then
76665: LD_VAR 0 2
76669: IFFALSE 76693
// result := SortListByListAsc ( units , tmp ) else
76671: LD_ADDR_VAR 0 3
76675: PUSH
76676: LD_VAR 0 1
76680: PPUSH
76681: LD_VAR 0 5
76685: PPUSH
76686: CALL_OW 76
76690: ST_TO_ADDR
76691: GO 76713
// result := SortListByListDesc ( units , tmp ) ;
76693: LD_ADDR_VAR 0 3
76697: PUSH
76698: LD_VAR 0 1
76702: PPUSH
76703: LD_VAR 0 5
76707: PPUSH
76708: CALL_OW 77
76712: ST_TO_ADDR
// end ;
76713: LD_VAR 0 3
76717: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76718: LD_INT 0
76720: PPUSH
76721: PPUSH
// task := GetTaskList ( mech ) ;
76722: LD_ADDR_VAR 0 4
76726: PUSH
76727: LD_VAR 0 1
76731: PPUSH
76732: CALL_OW 437
76736: ST_TO_ADDR
// if not task then
76737: LD_VAR 0 4
76741: NOT
76742: IFFALSE 76746
// exit ;
76744: GO 76788
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76746: LD_ADDR_VAR 0 3
76750: PUSH
76751: LD_VAR 0 4
76755: PUSH
76756: LD_INT 1
76758: ARRAY
76759: PUSH
76760: LD_INT 1
76762: ARRAY
76763: PUSH
76764: LD_STRING r
76766: EQUAL
76767: PUSH
76768: LD_VAR 0 4
76772: PUSH
76773: LD_INT 1
76775: ARRAY
76776: PUSH
76777: LD_INT 4
76779: ARRAY
76780: PUSH
76781: LD_VAR 0 2
76785: EQUAL
76786: AND
76787: ST_TO_ADDR
// end ;
76788: LD_VAR 0 3
76792: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76793: LD_INT 0
76795: PPUSH
// SetDir ( unit , d ) ;
76796: LD_VAR 0 1
76800: PPUSH
76801: LD_VAR 0 4
76805: PPUSH
76806: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76810: LD_VAR 0 1
76814: PPUSH
76815: LD_VAR 0 2
76819: PPUSH
76820: LD_VAR 0 3
76824: PPUSH
76825: LD_VAR 0 5
76829: PPUSH
76830: CALL_OW 48
// end ;
76834: LD_VAR 0 6
76838: RET
// export function ToNaturalNumber ( number ) ; begin
76839: LD_INT 0
76841: PPUSH
// result := number div 1 ;
76842: LD_ADDR_VAR 0 2
76846: PUSH
76847: LD_VAR 0 1
76851: PUSH
76852: LD_INT 1
76854: DIV
76855: ST_TO_ADDR
// if number < 0 then
76856: LD_VAR 0 1
76860: PUSH
76861: LD_INT 0
76863: LESS
76864: IFFALSE 76874
// result := 0 ;
76866: LD_ADDR_VAR 0 2
76870: PUSH
76871: LD_INT 0
76873: ST_TO_ADDR
// end ;
76874: LD_VAR 0 2
76878: RET
// export function SortByClass ( units , class ) ; var un ; begin
76879: LD_INT 0
76881: PPUSH
76882: PPUSH
// if not units or not class then
76883: LD_VAR 0 1
76887: NOT
76888: PUSH
76889: LD_VAR 0 2
76893: NOT
76894: OR
76895: IFFALSE 76899
// exit ;
76897: GO 76994
// result := [ ] ;
76899: LD_ADDR_VAR 0 3
76903: PUSH
76904: EMPTY
76905: ST_TO_ADDR
// for un in units do
76906: LD_ADDR_VAR 0 4
76910: PUSH
76911: LD_VAR 0 1
76915: PUSH
76916: FOR_IN
76917: IFFALSE 76992
// if GetClass ( un ) = class then
76919: LD_VAR 0 4
76923: PPUSH
76924: CALL_OW 257
76928: PUSH
76929: LD_VAR 0 2
76933: EQUAL
76934: IFFALSE 76961
// result := Insert ( result , 1 , un ) else
76936: LD_ADDR_VAR 0 3
76940: PUSH
76941: LD_VAR 0 3
76945: PPUSH
76946: LD_INT 1
76948: PPUSH
76949: LD_VAR 0 4
76953: PPUSH
76954: CALL_OW 2
76958: ST_TO_ADDR
76959: GO 76990
// result := Replace ( result , result + 1 , un ) ;
76961: LD_ADDR_VAR 0 3
76965: PUSH
76966: LD_VAR 0 3
76970: PPUSH
76971: LD_VAR 0 3
76975: PUSH
76976: LD_INT 1
76978: PLUS
76979: PPUSH
76980: LD_VAR 0 4
76984: PPUSH
76985: CALL_OW 1
76989: ST_TO_ADDR
76990: GO 76916
76992: POP
76993: POP
// end ;
76994: LD_VAR 0 3
76998: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76999: LD_INT 0
77001: PPUSH
77002: PPUSH
77003: PPUSH
77004: PPUSH
77005: PPUSH
77006: PPUSH
77007: PPUSH
// result := [ ] ;
77008: LD_ADDR_VAR 0 4
77012: PUSH
77013: EMPTY
77014: ST_TO_ADDR
// if x - r < 0 then
77015: LD_VAR 0 1
77019: PUSH
77020: LD_VAR 0 3
77024: MINUS
77025: PUSH
77026: LD_INT 0
77028: LESS
77029: IFFALSE 77041
// min_x := 0 else
77031: LD_ADDR_VAR 0 8
77035: PUSH
77036: LD_INT 0
77038: ST_TO_ADDR
77039: GO 77057
// min_x := x - r ;
77041: LD_ADDR_VAR 0 8
77045: PUSH
77046: LD_VAR 0 1
77050: PUSH
77051: LD_VAR 0 3
77055: MINUS
77056: ST_TO_ADDR
// if y - r < 0 then
77057: LD_VAR 0 2
77061: PUSH
77062: LD_VAR 0 3
77066: MINUS
77067: PUSH
77068: LD_INT 0
77070: LESS
77071: IFFALSE 77083
// min_y := 0 else
77073: LD_ADDR_VAR 0 7
77077: PUSH
77078: LD_INT 0
77080: ST_TO_ADDR
77081: GO 77099
// min_y := y - r ;
77083: LD_ADDR_VAR 0 7
77087: PUSH
77088: LD_VAR 0 2
77092: PUSH
77093: LD_VAR 0 3
77097: MINUS
77098: ST_TO_ADDR
// max_x := x + r ;
77099: LD_ADDR_VAR 0 9
77103: PUSH
77104: LD_VAR 0 1
77108: PUSH
77109: LD_VAR 0 3
77113: PLUS
77114: ST_TO_ADDR
// max_y := y + r ;
77115: LD_ADDR_VAR 0 10
77119: PUSH
77120: LD_VAR 0 2
77124: PUSH
77125: LD_VAR 0 3
77129: PLUS
77130: ST_TO_ADDR
// for _x = min_x to max_x do
77131: LD_ADDR_VAR 0 5
77135: PUSH
77136: DOUBLE
77137: LD_VAR 0 8
77141: DEC
77142: ST_TO_ADDR
77143: LD_VAR 0 9
77147: PUSH
77148: FOR_TO
77149: IFFALSE 77250
// for _y = min_y to max_y do
77151: LD_ADDR_VAR 0 6
77155: PUSH
77156: DOUBLE
77157: LD_VAR 0 7
77161: DEC
77162: ST_TO_ADDR
77163: LD_VAR 0 10
77167: PUSH
77168: FOR_TO
77169: IFFALSE 77246
// begin if not ValidHex ( _x , _y ) then
77171: LD_VAR 0 5
77175: PPUSH
77176: LD_VAR 0 6
77180: PPUSH
77181: CALL_OW 488
77185: NOT
77186: IFFALSE 77190
// continue ;
77188: GO 77168
// if GetResourceTypeXY ( _x , _y ) then
77190: LD_VAR 0 5
77194: PPUSH
77195: LD_VAR 0 6
77199: PPUSH
77200: CALL_OW 283
77204: IFFALSE 77244
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77206: LD_ADDR_VAR 0 4
77210: PUSH
77211: LD_VAR 0 4
77215: PPUSH
77216: LD_VAR 0 4
77220: PUSH
77221: LD_INT 1
77223: PLUS
77224: PPUSH
77225: LD_VAR 0 5
77229: PUSH
77230: LD_VAR 0 6
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: PPUSH
77239: CALL_OW 1
77243: ST_TO_ADDR
// end ;
77244: GO 77168
77246: POP
77247: POP
77248: GO 77148
77250: POP
77251: POP
// end ;
77252: LD_VAR 0 4
77256: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77257: LD_INT 0
77259: PPUSH
77260: PPUSH
77261: PPUSH
77262: PPUSH
77263: PPUSH
77264: PPUSH
77265: PPUSH
77266: PPUSH
// if not units then
77267: LD_VAR 0 1
77271: NOT
77272: IFFALSE 77276
// exit ;
77274: GO 77804
// result := UnitFilter ( units , [ f_ok ] ) ;
77276: LD_ADDR_VAR 0 3
77280: PUSH
77281: LD_VAR 0 1
77285: PPUSH
77286: LD_INT 50
77288: PUSH
77289: EMPTY
77290: LIST
77291: PPUSH
77292: CALL_OW 72
77296: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77297: LD_ADDR_VAR 0 8
77301: PUSH
77302: LD_VAR 0 1
77306: PUSH
77307: LD_INT 1
77309: ARRAY
77310: PPUSH
77311: CALL_OW 255
77315: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77316: LD_ADDR_VAR 0 10
77320: PUSH
77321: LD_INT 29
77323: PUSH
77324: LD_INT 91
77326: PUSH
77327: LD_INT 49
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: LIST
77334: ST_TO_ADDR
// if not result then
77335: LD_VAR 0 3
77339: NOT
77340: IFFALSE 77344
// exit ;
77342: GO 77804
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77344: LD_ADDR_VAR 0 5
77348: PUSH
77349: LD_INT 81
77351: PUSH
77352: LD_VAR 0 8
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PPUSH
77361: CALL_OW 69
77365: ST_TO_ADDR
// for i in result do
77366: LD_ADDR_VAR 0 4
77370: PUSH
77371: LD_VAR 0 3
77375: PUSH
77376: FOR_IN
77377: IFFALSE 77802
// begin tag := GetTag ( i ) + 1 ;
77379: LD_ADDR_VAR 0 9
77383: PUSH
77384: LD_VAR 0 4
77388: PPUSH
77389: CALL_OW 110
77393: PUSH
77394: LD_INT 1
77396: PLUS
77397: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
77398: LD_ADDR_VAR 0 7
77402: PUSH
77403: LD_VAR 0 4
77407: PPUSH
77408: CALL_OW 250
77412: PPUSH
77413: LD_VAR 0 4
77417: PPUSH
77418: CALL_OW 251
77422: PPUSH
77423: LD_INT 4
77425: PPUSH
77426: CALL 76999 0 3
77430: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
77431: LD_VAR 0 4
77435: PPUSH
77436: CALL_OW 247
77440: PUSH
77441: LD_INT 2
77443: EQUAL
77444: PUSH
77445: LD_VAR 0 7
77449: PUSH
77450: LD_INT 2
77452: GREATER
77453: AND
77454: PUSH
77455: LD_VAR 0 4
77459: PPUSH
77460: CALL_OW 264
77464: PUSH
77465: LD_VAR 0 10
77469: IN
77470: NOT
77471: AND
77472: IFFALSE 77511
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77474: LD_VAR 0 4
77478: PPUSH
77479: LD_VAR 0 7
77483: PUSH
77484: LD_INT 1
77486: ARRAY
77487: PUSH
77488: LD_INT 1
77490: ARRAY
77491: PPUSH
77492: LD_VAR 0 7
77496: PUSH
77497: LD_INT 1
77499: ARRAY
77500: PUSH
77501: LD_INT 2
77503: ARRAY
77504: PPUSH
77505: CALL_OW 116
77509: GO 77800
// if path > tag then
77511: LD_VAR 0 2
77515: PUSH
77516: LD_VAR 0 9
77520: GREATER
77521: IFFALSE 77729
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77523: LD_ADDR_VAR 0 6
77527: PUSH
77528: LD_VAR 0 5
77532: PPUSH
77533: LD_INT 91
77535: PUSH
77536: LD_VAR 0 4
77540: PUSH
77541: LD_INT 8
77543: PUSH
77544: EMPTY
77545: LIST
77546: LIST
77547: LIST
77548: PPUSH
77549: CALL_OW 72
77553: ST_TO_ADDR
// if nearEnemy then
77554: LD_VAR 0 6
77558: IFFALSE 77627
// begin if GetWeapon ( i ) = ru_time_lapser then
77560: LD_VAR 0 4
77564: PPUSH
77565: CALL_OW 264
77569: PUSH
77570: LD_INT 49
77572: EQUAL
77573: IFFALSE 77601
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77575: LD_VAR 0 4
77579: PPUSH
77580: LD_VAR 0 6
77584: PPUSH
77585: LD_VAR 0 4
77589: PPUSH
77590: CALL_OW 74
77594: PPUSH
77595: CALL_OW 112
77599: GO 77625
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77601: LD_VAR 0 4
77605: PPUSH
77606: LD_VAR 0 6
77610: PPUSH
77611: LD_VAR 0 4
77615: PPUSH
77616: CALL_OW 74
77620: PPUSH
77621: CALL 78875 0 2
// end else
77625: GO 77727
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77627: LD_VAR 0 4
77631: PPUSH
77632: LD_VAR 0 2
77636: PUSH
77637: LD_VAR 0 9
77641: ARRAY
77642: PUSH
77643: LD_INT 1
77645: ARRAY
77646: PPUSH
77647: LD_VAR 0 2
77651: PUSH
77652: LD_VAR 0 9
77656: ARRAY
77657: PUSH
77658: LD_INT 2
77660: ARRAY
77661: PPUSH
77662: CALL_OW 297
77666: PUSH
77667: LD_INT 6
77669: GREATER
77670: IFFALSE 77713
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77672: LD_VAR 0 4
77676: PPUSH
77677: LD_VAR 0 2
77681: PUSH
77682: LD_VAR 0 9
77686: ARRAY
77687: PUSH
77688: LD_INT 1
77690: ARRAY
77691: PPUSH
77692: LD_VAR 0 2
77696: PUSH
77697: LD_VAR 0 9
77701: ARRAY
77702: PUSH
77703: LD_INT 2
77705: ARRAY
77706: PPUSH
77707: CALL_OW 114
77711: GO 77727
// SetTag ( i , tag ) ;
77713: LD_VAR 0 4
77717: PPUSH
77718: LD_VAR 0 9
77722: PPUSH
77723: CALL_OW 109
// end else
77727: GO 77800
// if enemy then
77729: LD_VAR 0 5
77733: IFFALSE 77800
// begin if GetWeapon ( i ) = ru_time_lapser then
77735: LD_VAR 0 4
77739: PPUSH
77740: CALL_OW 264
77744: PUSH
77745: LD_INT 49
77747: EQUAL
77748: IFFALSE 77776
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77750: LD_VAR 0 4
77754: PPUSH
77755: LD_VAR 0 5
77759: PPUSH
77760: LD_VAR 0 4
77764: PPUSH
77765: CALL_OW 74
77769: PPUSH
77770: CALL_OW 112
77774: GO 77800
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77776: LD_VAR 0 4
77780: PPUSH
77781: LD_VAR 0 5
77785: PPUSH
77786: LD_VAR 0 4
77790: PPUSH
77791: CALL_OW 74
77795: PPUSH
77796: CALL 78875 0 2
// end ; end ;
77800: GO 77376
77802: POP
77803: POP
// end ;
77804: LD_VAR 0 3
77808: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77809: LD_INT 0
77811: PPUSH
77812: PPUSH
77813: PPUSH
// if not unit or IsInUnit ( unit ) then
77814: LD_VAR 0 1
77818: NOT
77819: PUSH
77820: LD_VAR 0 1
77824: PPUSH
77825: CALL_OW 310
77829: OR
77830: IFFALSE 77834
// exit ;
77832: GO 77925
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77834: LD_ADDR_VAR 0 4
77838: PUSH
77839: LD_VAR 0 1
77843: PPUSH
77844: CALL_OW 250
77848: PPUSH
77849: LD_VAR 0 2
77853: PPUSH
77854: LD_INT 1
77856: PPUSH
77857: CALL_OW 272
77861: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77862: LD_ADDR_VAR 0 5
77866: PUSH
77867: LD_VAR 0 1
77871: PPUSH
77872: CALL_OW 251
77876: PPUSH
77877: LD_VAR 0 2
77881: PPUSH
77882: LD_INT 1
77884: PPUSH
77885: CALL_OW 273
77889: ST_TO_ADDR
// if ValidHex ( x , y ) then
77890: LD_VAR 0 4
77894: PPUSH
77895: LD_VAR 0 5
77899: PPUSH
77900: CALL_OW 488
77904: IFFALSE 77925
// ComTurnXY ( unit , x , y ) ;
77906: LD_VAR 0 1
77910: PPUSH
77911: LD_VAR 0 4
77915: PPUSH
77916: LD_VAR 0 5
77920: PPUSH
77921: CALL_OW 118
// end ;
77925: LD_VAR 0 3
77929: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77930: LD_INT 0
77932: PPUSH
77933: PPUSH
// result := false ;
77934: LD_ADDR_VAR 0 3
77938: PUSH
77939: LD_INT 0
77941: ST_TO_ADDR
// if not units then
77942: LD_VAR 0 2
77946: NOT
77947: IFFALSE 77951
// exit ;
77949: GO 77996
// for i in units do
77951: LD_ADDR_VAR 0 4
77955: PUSH
77956: LD_VAR 0 2
77960: PUSH
77961: FOR_IN
77962: IFFALSE 77994
// if See ( side , i ) then
77964: LD_VAR 0 1
77968: PPUSH
77969: LD_VAR 0 4
77973: PPUSH
77974: CALL_OW 292
77978: IFFALSE 77992
// begin result := true ;
77980: LD_ADDR_VAR 0 3
77984: PUSH
77985: LD_INT 1
77987: ST_TO_ADDR
// exit ;
77988: POP
77989: POP
77990: GO 77996
// end ;
77992: GO 77961
77994: POP
77995: POP
// end ;
77996: LD_VAR 0 3
78000: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78001: LD_INT 0
78003: PPUSH
78004: PPUSH
78005: PPUSH
78006: PPUSH
// if not unit or not points then
78007: LD_VAR 0 1
78011: NOT
78012: PUSH
78013: LD_VAR 0 2
78017: NOT
78018: OR
78019: IFFALSE 78023
// exit ;
78021: GO 78113
// dist := 99999 ;
78023: LD_ADDR_VAR 0 5
78027: PUSH
78028: LD_INT 99999
78030: ST_TO_ADDR
// for i in points do
78031: LD_ADDR_VAR 0 4
78035: PUSH
78036: LD_VAR 0 2
78040: PUSH
78041: FOR_IN
78042: IFFALSE 78111
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78044: LD_ADDR_VAR 0 6
78048: PUSH
78049: LD_VAR 0 1
78053: PPUSH
78054: LD_VAR 0 4
78058: PUSH
78059: LD_INT 1
78061: ARRAY
78062: PPUSH
78063: LD_VAR 0 4
78067: PUSH
78068: LD_INT 2
78070: ARRAY
78071: PPUSH
78072: CALL_OW 297
78076: ST_TO_ADDR
// if tmpDist < dist then
78077: LD_VAR 0 6
78081: PUSH
78082: LD_VAR 0 5
78086: LESS
78087: IFFALSE 78109
// begin result := i ;
78089: LD_ADDR_VAR 0 3
78093: PUSH
78094: LD_VAR 0 4
78098: ST_TO_ADDR
// dist := tmpDist ;
78099: LD_ADDR_VAR 0 5
78103: PUSH
78104: LD_VAR 0 6
78108: ST_TO_ADDR
// end ; end ;
78109: GO 78041
78111: POP
78112: POP
// end ;
78113: LD_VAR 0 3
78117: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78118: LD_INT 0
78120: PPUSH
// uc_side := side ;
78121: LD_ADDR_OWVAR 20
78125: PUSH
78126: LD_VAR 0 1
78130: ST_TO_ADDR
// uc_nation := 3 ;
78131: LD_ADDR_OWVAR 21
78135: PUSH
78136: LD_INT 3
78138: ST_TO_ADDR
// vc_chassis := 25 ;
78139: LD_ADDR_OWVAR 37
78143: PUSH
78144: LD_INT 25
78146: ST_TO_ADDR
// vc_engine := engine_siberite ;
78147: LD_ADDR_OWVAR 39
78151: PUSH
78152: LD_INT 3
78154: ST_TO_ADDR
// vc_control := control_computer ;
78155: LD_ADDR_OWVAR 38
78159: PUSH
78160: LD_INT 3
78162: ST_TO_ADDR
// vc_weapon := 59 ;
78163: LD_ADDR_OWVAR 40
78167: PUSH
78168: LD_INT 59
78170: ST_TO_ADDR
// result := CreateVehicle ;
78171: LD_ADDR_VAR 0 5
78175: PUSH
78176: CALL_OW 45
78180: ST_TO_ADDR
// SetDir ( result , d ) ;
78181: LD_VAR 0 5
78185: PPUSH
78186: LD_VAR 0 4
78190: PPUSH
78191: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78195: LD_VAR 0 5
78199: PPUSH
78200: LD_VAR 0 2
78204: PPUSH
78205: LD_VAR 0 3
78209: PPUSH
78210: LD_INT 0
78212: PPUSH
78213: CALL_OW 48
// end ;
78217: LD_VAR 0 5
78221: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78222: LD_INT 0
78224: PPUSH
78225: PPUSH
78226: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78227: LD_ADDR_VAR 0 2
78231: PUSH
78232: LD_INT 0
78234: PUSH
78235: LD_INT 0
78237: PUSH
78238: LD_INT 0
78240: PUSH
78241: LD_INT 0
78243: PUSH
78244: EMPTY
78245: LIST
78246: LIST
78247: LIST
78248: LIST
78249: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78250: LD_VAR 0 1
78254: NOT
78255: PUSH
78256: LD_VAR 0 1
78260: PPUSH
78261: CALL_OW 264
78265: PUSH
78266: LD_INT 12
78268: PUSH
78269: LD_INT 51
78271: PUSH
78272: LD_INT 32
78274: PUSH
78275: LD_INT 89
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: LIST
78282: LIST
78283: IN
78284: NOT
78285: OR
78286: IFFALSE 78290
// exit ;
78288: GO 78388
// for i := 1 to 3 do
78290: LD_ADDR_VAR 0 3
78294: PUSH
78295: DOUBLE
78296: LD_INT 1
78298: DEC
78299: ST_TO_ADDR
78300: LD_INT 3
78302: PUSH
78303: FOR_TO
78304: IFFALSE 78386
// begin tmp := GetCargo ( cargo , i ) ;
78306: LD_ADDR_VAR 0 4
78310: PUSH
78311: LD_VAR 0 1
78315: PPUSH
78316: LD_VAR 0 3
78320: PPUSH
78321: CALL_OW 289
78325: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78326: LD_ADDR_VAR 0 2
78330: PUSH
78331: LD_VAR 0 2
78335: PPUSH
78336: LD_VAR 0 3
78340: PPUSH
78341: LD_VAR 0 4
78345: PPUSH
78346: CALL_OW 1
78350: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78351: LD_ADDR_VAR 0 2
78355: PUSH
78356: LD_VAR 0 2
78360: PPUSH
78361: LD_INT 4
78363: PPUSH
78364: LD_VAR 0 2
78368: PUSH
78369: LD_INT 4
78371: ARRAY
78372: PUSH
78373: LD_VAR 0 4
78377: PLUS
78378: PPUSH
78379: CALL_OW 1
78383: ST_TO_ADDR
// end ;
78384: GO 78303
78386: POP
78387: POP
// end ;
78388: LD_VAR 0 2
78392: RET
// export function Length ( array ) ; begin
78393: LD_INT 0
78395: PPUSH
// result := array + 0 ;
78396: LD_ADDR_VAR 0 2
78400: PUSH
78401: LD_VAR 0 1
78405: PUSH
78406: LD_INT 0
78408: PLUS
78409: ST_TO_ADDR
// end ;
78410: LD_VAR 0 2
78414: RET
// export function PrepareArray ( array ) ; begin
78415: LD_INT 0
78417: PPUSH
// result := array diff 0 ;
78418: LD_ADDR_VAR 0 2
78422: PUSH
78423: LD_VAR 0 1
78427: PUSH
78428: LD_INT 0
78430: DIFF
78431: ST_TO_ADDR
// if not result [ 1 ] then
78432: LD_VAR 0 2
78436: PUSH
78437: LD_INT 1
78439: ARRAY
78440: NOT
78441: IFFALSE 78461
// result := Delete ( result , 1 ) ;
78443: LD_ADDR_VAR 0 2
78447: PUSH
78448: LD_VAR 0 2
78452: PPUSH
78453: LD_INT 1
78455: PPUSH
78456: CALL_OW 3
78460: ST_TO_ADDR
// end ;
78461: LD_VAR 0 2
78465: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
78466: LD_INT 0
78468: PPUSH
78469: PPUSH
78470: PPUSH
78471: PPUSH
// sibRocketRange := 25 ;
78472: LD_ADDR_VAR 0 6
78476: PUSH
78477: LD_INT 25
78479: ST_TO_ADDR
// result := false ;
78480: LD_ADDR_VAR 0 4
78484: PUSH
78485: LD_INT 0
78487: ST_TO_ADDR
// for i := 0 to 5 do
78488: LD_ADDR_VAR 0 5
78492: PUSH
78493: DOUBLE
78494: LD_INT 0
78496: DEC
78497: ST_TO_ADDR
78498: LD_INT 5
78500: PUSH
78501: FOR_TO
78502: IFFALSE 78569
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
78504: LD_VAR 0 1
78508: PPUSH
78509: LD_VAR 0 5
78513: PPUSH
78514: LD_VAR 0 6
78518: PPUSH
78519: CALL_OW 272
78523: PPUSH
78524: LD_VAR 0 2
78528: PPUSH
78529: LD_VAR 0 5
78533: PPUSH
78534: LD_VAR 0 6
78538: PPUSH
78539: CALL_OW 273
78543: PPUSH
78544: LD_VAR 0 3
78548: PPUSH
78549: CALL_OW 309
78553: IFFALSE 78567
// begin result := true ;
78555: LD_ADDR_VAR 0 4
78559: PUSH
78560: LD_INT 1
78562: ST_TO_ADDR
// exit ;
78563: POP
78564: POP
78565: GO 78571
// end ;
78567: GO 78501
78569: POP
78570: POP
// end ;
78571: LD_VAR 0 4
78575: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
78576: LD_INT 0
78578: PPUSH
78579: PPUSH
78580: PPUSH
// if btype = b_depot then
78581: LD_VAR 0 2
78585: PUSH
78586: LD_INT 0
78588: EQUAL
78589: IFFALSE 78601
// begin result := true ;
78591: LD_ADDR_VAR 0 3
78595: PUSH
78596: LD_INT 1
78598: ST_TO_ADDR
// exit ;
78599: GO 78717
// end ; pom := GetBase ( depot ) ;
78601: LD_ADDR_VAR 0 4
78605: PUSH
78606: LD_VAR 0 1
78610: PPUSH
78611: CALL_OW 274
78615: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
78616: LD_ADDR_VAR 0 5
78620: PUSH
78621: LD_VAR 0 2
78625: PPUSH
78626: LD_VAR 0 1
78630: PPUSH
78631: CALL_OW 248
78635: PPUSH
78636: CALL_OW 450
78640: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
78641: LD_ADDR_VAR 0 3
78645: PUSH
78646: LD_VAR 0 4
78650: PPUSH
78651: LD_INT 1
78653: PPUSH
78654: CALL_OW 275
78658: PUSH
78659: LD_VAR 0 5
78663: PUSH
78664: LD_INT 1
78666: ARRAY
78667: GREATEREQUAL
78668: PUSH
78669: LD_VAR 0 4
78673: PPUSH
78674: LD_INT 2
78676: PPUSH
78677: CALL_OW 275
78681: PUSH
78682: LD_VAR 0 5
78686: PUSH
78687: LD_INT 2
78689: ARRAY
78690: GREATEREQUAL
78691: AND
78692: PUSH
78693: LD_VAR 0 4
78697: PPUSH
78698: LD_INT 3
78700: PPUSH
78701: CALL_OW 275
78705: PUSH
78706: LD_VAR 0 5
78710: PUSH
78711: LD_INT 3
78713: ARRAY
78714: GREATEREQUAL
78715: AND
78716: ST_TO_ADDR
// end ;
78717: LD_VAR 0 3
78721: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78722: LD_INT 0
78724: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78725: LD_VAR 0 1
78729: PPUSH
78730: LD_VAR 0 2
78734: PPUSH
78735: LD_INT 0
78737: PPUSH
78738: LD_INT 0
78740: PPUSH
78741: LD_INT 1
78743: PPUSH
78744: LD_INT 0
78746: PPUSH
78747: CALL_OW 587
// end ;
78751: LD_VAR 0 3
78755: RET
// export function CenterOnNow ( unit ) ; begin
78756: LD_INT 0
78758: PPUSH
// result := IsInUnit ( unit ) ;
78759: LD_ADDR_VAR 0 2
78763: PUSH
78764: LD_VAR 0 1
78768: PPUSH
78769: CALL_OW 310
78773: ST_TO_ADDR
// if not result then
78774: LD_VAR 0 2
78778: NOT
78779: IFFALSE 78791
// result := unit ;
78781: LD_ADDR_VAR 0 2
78785: PUSH
78786: LD_VAR 0 1
78790: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78791: LD_VAR 0 1
78795: PPUSH
78796: CALL_OW 87
// end ;
78800: LD_VAR 0 2
78804: RET
// export function ComMoveHex ( unit , hex ) ; begin
78805: LD_INT 0
78807: PPUSH
// if not hex then
78808: LD_VAR 0 2
78812: NOT
78813: IFFALSE 78817
// exit ;
78815: GO 78870
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78817: LD_VAR 0 2
78821: PUSH
78822: LD_INT 1
78824: ARRAY
78825: PPUSH
78826: LD_VAR 0 2
78830: PUSH
78831: LD_INT 2
78833: ARRAY
78834: PPUSH
78835: CALL_OW 428
78839: IFFALSE 78843
// exit ;
78841: GO 78870
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78843: LD_VAR 0 1
78847: PPUSH
78848: LD_VAR 0 2
78852: PUSH
78853: LD_INT 1
78855: ARRAY
78856: PPUSH
78857: LD_VAR 0 2
78861: PUSH
78862: LD_INT 2
78864: ARRAY
78865: PPUSH
78866: CALL_OW 111
// end ;
78870: LD_VAR 0 3
78874: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78875: LD_INT 0
78877: PPUSH
78878: PPUSH
78879: PPUSH
// if not unit or not enemy then
78880: LD_VAR 0 1
78884: NOT
78885: PUSH
78886: LD_VAR 0 2
78890: NOT
78891: OR
78892: IFFALSE 78896
// exit ;
78894: GO 79020
// x := GetX ( enemy ) ;
78896: LD_ADDR_VAR 0 4
78900: PUSH
78901: LD_VAR 0 2
78905: PPUSH
78906: CALL_OW 250
78910: ST_TO_ADDR
// y := GetY ( enemy ) ;
78911: LD_ADDR_VAR 0 5
78915: PUSH
78916: LD_VAR 0 2
78920: PPUSH
78921: CALL_OW 251
78925: ST_TO_ADDR
// if ValidHex ( x , y ) then
78926: LD_VAR 0 4
78930: PPUSH
78931: LD_VAR 0 5
78935: PPUSH
78936: CALL_OW 488
78940: IFFALSE 79020
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
78942: LD_VAR 0 2
78946: PPUSH
78947: CALL_OW 247
78951: PUSH
78952: LD_INT 3
78954: PUSH
78955: LD_INT 2
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: IN
78962: PUSH
78963: LD_VAR 0 1
78967: PPUSH
78968: CALL_OW 255
78972: PPUSH
78973: LD_VAR 0 2
78977: PPUSH
78978: CALL_OW 292
78982: OR
78983: IFFALSE 79001
// ComAttackUnit ( unit , enemy ) else
78985: LD_VAR 0 1
78989: PPUSH
78990: LD_VAR 0 2
78994: PPUSH
78995: CALL_OW 115
78999: GO 79020
// ComAgressiveMove ( unit , x , y ) ;
79001: LD_VAR 0 1
79005: PPUSH
79006: LD_VAR 0 4
79010: PPUSH
79011: LD_VAR 0 5
79015: PPUSH
79016: CALL_OW 114
// end ;
79020: LD_VAR 0 3
79024: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
79025: LD_INT 0
79027: PPUSH
79028: PPUSH
79029: PPUSH
// list := AreaToList ( area , 0 ) ;
79030: LD_ADDR_VAR 0 5
79034: PUSH
79035: LD_VAR 0 1
79039: PPUSH
79040: LD_INT 0
79042: PPUSH
79043: CALL_OW 517
79047: ST_TO_ADDR
// if not list then
79048: LD_VAR 0 5
79052: NOT
79053: IFFALSE 79057
// exit ;
79055: GO 79187
// if all then
79057: LD_VAR 0 2
79061: IFFALSE 79149
// begin for i := 1 to list [ 1 ] do
79063: LD_ADDR_VAR 0 4
79067: PUSH
79068: DOUBLE
79069: LD_INT 1
79071: DEC
79072: ST_TO_ADDR
79073: LD_VAR 0 5
79077: PUSH
79078: LD_INT 1
79080: ARRAY
79081: PUSH
79082: FOR_TO
79083: IFFALSE 79145
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
79085: LD_ADDR_VAR 0 3
79089: PUSH
79090: LD_VAR 0 3
79094: PPUSH
79095: LD_VAR 0 3
79099: PUSH
79100: LD_INT 1
79102: PLUS
79103: PPUSH
79104: LD_VAR 0 5
79108: PUSH
79109: LD_INT 1
79111: ARRAY
79112: PUSH
79113: LD_VAR 0 4
79117: ARRAY
79118: PUSH
79119: LD_VAR 0 5
79123: PUSH
79124: LD_INT 2
79126: ARRAY
79127: PUSH
79128: LD_VAR 0 4
79132: ARRAY
79133: PUSH
79134: EMPTY
79135: LIST
79136: LIST
79137: PPUSH
79138: CALL_OW 1
79142: ST_TO_ADDR
79143: GO 79082
79145: POP
79146: POP
// exit ;
79147: GO 79187
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
79149: LD_ADDR_VAR 0 3
79153: PUSH
79154: LD_VAR 0 5
79158: PUSH
79159: LD_INT 1
79161: ARRAY
79162: PUSH
79163: LD_INT 1
79165: ARRAY
79166: PUSH
79167: LD_VAR 0 5
79171: PUSH
79172: LD_INT 2
79174: ARRAY
79175: PUSH
79176: LD_INT 1
79178: ARRAY
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: PUSH
79184: EMPTY
79185: LIST
79186: ST_TO_ADDR
// end ;
79187: LD_VAR 0 3
79191: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
79192: LD_INT 0
79194: PPUSH
79195: PPUSH
// list := AreaToList ( area , 0 ) ;
79196: LD_ADDR_VAR 0 4
79200: PUSH
79201: LD_VAR 0 1
79205: PPUSH
79206: LD_INT 0
79208: PPUSH
79209: CALL_OW 517
79213: ST_TO_ADDR
// if not list then
79214: LD_VAR 0 4
79218: NOT
79219: IFFALSE 79223
// exit ;
79221: GO 79264
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
79223: LD_ADDR_VAR 0 3
79227: PUSH
79228: LD_VAR 0 4
79232: PUSH
79233: LD_INT 1
79235: ARRAY
79236: PUSH
79237: LD_INT 1
79239: ARRAY
79240: PUSH
79241: LD_VAR 0 4
79245: PUSH
79246: LD_INT 2
79248: ARRAY
79249: PUSH
79250: LD_INT 1
79252: ARRAY
79253: PUSH
79254: LD_VAR 0 2
79258: PUSH
79259: EMPTY
79260: LIST
79261: LIST
79262: LIST
79263: ST_TO_ADDR
// end ;
79264: LD_VAR 0 3
79268: RET
// export function First ( array ) ; begin
79269: LD_INT 0
79271: PPUSH
// if not array then
79272: LD_VAR 0 1
79276: NOT
79277: IFFALSE 79281
// exit ;
79279: GO 79295
// result := array [ 1 ] ;
79281: LD_ADDR_VAR 0 2
79285: PUSH
79286: LD_VAR 0 1
79290: PUSH
79291: LD_INT 1
79293: ARRAY
79294: ST_TO_ADDR
// end ;
79295: LD_VAR 0 2
79299: RET
// export function Last ( array ) ; begin
79300: LD_INT 0
79302: PPUSH
// if not array then
79303: LD_VAR 0 1
79307: NOT
79308: IFFALSE 79312
// exit ;
79310: GO 79328
// result := array [ array ] ;
79312: LD_ADDR_VAR 0 2
79316: PUSH
79317: LD_VAR 0 1
79321: PUSH
79322: LD_VAR 0 1
79326: ARRAY
79327: ST_TO_ADDR
// end ;
79328: LD_VAR 0 2
79332: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
79333: LD_INT 0
79335: PPUSH
79336: PPUSH
// result := [ ] ;
79337: LD_ADDR_VAR 0 5
79341: PUSH
79342: EMPTY
79343: ST_TO_ADDR
// if not array then
79344: LD_VAR 0 1
79348: NOT
79349: IFFALSE 79353
// exit ;
79351: GO 79465
// for i := 1 to array do
79353: LD_ADDR_VAR 0 6
79357: PUSH
79358: DOUBLE
79359: LD_INT 1
79361: DEC
79362: ST_TO_ADDR
79363: LD_VAR 0 1
79367: PUSH
79368: FOR_TO
79369: IFFALSE 79463
// if array [ i ] [ index ] = value then
79371: LD_VAR 0 1
79375: PUSH
79376: LD_VAR 0 6
79380: ARRAY
79381: PUSH
79382: LD_VAR 0 2
79386: ARRAY
79387: PUSH
79388: LD_VAR 0 3
79392: EQUAL
79393: IFFALSE 79461
// begin if indexColumn then
79395: LD_VAR 0 4
79399: IFFALSE 79435
// result := Join ( result , array [ i ] [ indexColumn ] ) else
79401: LD_ADDR_VAR 0 5
79405: PUSH
79406: LD_VAR 0 5
79410: PPUSH
79411: LD_VAR 0 1
79415: PUSH
79416: LD_VAR 0 6
79420: ARRAY
79421: PUSH
79422: LD_VAR 0 4
79426: ARRAY
79427: PPUSH
79428: CALL 74653 0 2
79432: ST_TO_ADDR
79433: GO 79461
// result := Join ( result , array [ i ] ) ;
79435: LD_ADDR_VAR 0 5
79439: PUSH
79440: LD_VAR 0 5
79444: PPUSH
79445: LD_VAR 0 1
79449: PUSH
79450: LD_VAR 0 6
79454: ARRAY
79455: PPUSH
79456: CALL 74653 0 2
79460: ST_TO_ADDR
// end ;
79461: GO 79368
79463: POP
79464: POP
// end ;
79465: LD_VAR 0 5
79469: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
79470: LD_INT 0
79472: PPUSH
// if not vehicles or not parkingPoint then
79473: LD_VAR 0 1
79477: NOT
79478: PUSH
79479: LD_VAR 0 2
79483: NOT
79484: OR
79485: IFFALSE 79489
// exit ;
79487: GO 79587
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
79489: LD_ADDR_VAR 0 1
79493: PUSH
79494: LD_VAR 0 1
79498: PPUSH
79499: LD_INT 50
79501: PUSH
79502: EMPTY
79503: LIST
79504: PUSH
79505: LD_INT 3
79507: PUSH
79508: LD_INT 92
79510: PUSH
79511: LD_VAR 0 2
79515: PUSH
79516: LD_INT 1
79518: ARRAY
79519: PUSH
79520: LD_VAR 0 2
79524: PUSH
79525: LD_INT 2
79527: ARRAY
79528: PUSH
79529: LD_INT 8
79531: PUSH
79532: EMPTY
79533: LIST
79534: LIST
79535: LIST
79536: LIST
79537: PUSH
79538: EMPTY
79539: LIST
79540: LIST
79541: PUSH
79542: EMPTY
79543: LIST
79544: LIST
79545: PPUSH
79546: CALL_OW 72
79550: ST_TO_ADDR
// if not vehicles then
79551: LD_VAR 0 1
79555: NOT
79556: IFFALSE 79560
// exit ;
79558: GO 79587
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
79560: LD_VAR 0 1
79564: PPUSH
79565: LD_VAR 0 2
79569: PUSH
79570: LD_INT 1
79572: ARRAY
79573: PPUSH
79574: LD_VAR 0 2
79578: PUSH
79579: LD_INT 2
79581: ARRAY
79582: PPUSH
79583: CALL_OW 111
// end ;
79587: LD_VAR 0 3
79591: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
79592: LD_INT 0
79594: PPUSH
79595: PPUSH
79596: PPUSH
// if not side or not area then
79597: LD_VAR 0 1
79601: NOT
79602: PUSH
79603: LD_VAR 0 2
79607: NOT
79608: OR
79609: IFFALSE 79613
// exit ;
79611: GO 79732
// tmp := AreaToList ( area , 0 ) ;
79613: LD_ADDR_VAR 0 5
79617: PUSH
79618: LD_VAR 0 2
79622: PPUSH
79623: LD_INT 0
79625: PPUSH
79626: CALL_OW 517
79630: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
79631: LD_ADDR_VAR 0 4
79635: PUSH
79636: DOUBLE
79637: LD_INT 1
79639: DEC
79640: ST_TO_ADDR
79641: LD_VAR 0 5
79645: PUSH
79646: LD_INT 1
79648: ARRAY
79649: PUSH
79650: FOR_TO
79651: IFFALSE 79730
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
79653: LD_VAR 0 5
79657: PUSH
79658: LD_INT 1
79660: ARRAY
79661: PUSH
79662: LD_VAR 0 4
79666: ARRAY
79667: PPUSH
79668: LD_VAR 0 5
79672: PUSH
79673: LD_INT 2
79675: ARRAY
79676: PUSH
79677: LD_VAR 0 4
79681: ARRAY
79682: PPUSH
79683: CALL_OW 351
79687: IFFALSE 79728
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
79689: LD_VAR 0 5
79693: PUSH
79694: LD_INT 1
79696: ARRAY
79697: PUSH
79698: LD_VAR 0 4
79702: ARRAY
79703: PPUSH
79704: LD_VAR 0 5
79708: PUSH
79709: LD_INT 2
79711: ARRAY
79712: PUSH
79713: LD_VAR 0 4
79717: ARRAY
79718: PPUSH
79719: LD_VAR 0 1
79723: PPUSH
79724: CALL_OW 244
// end ;
79728: GO 79650
79730: POP
79731: POP
// end ; end_of_file
79732: LD_VAR 0 3
79736: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79737: LD_VAR 0 1
79741: PUSH
79742: LD_INT 200
79744: DOUBLE
79745: GREATEREQUAL
79746: IFFALSE 79754
79748: LD_INT 299
79750: DOUBLE
79751: LESSEQUAL
79752: IFTRUE 79756
79754: GO 79788
79756: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79757: LD_VAR 0 1
79761: PPUSH
79762: LD_VAR 0 2
79766: PPUSH
79767: LD_VAR 0 3
79771: PPUSH
79772: LD_VAR 0 4
79776: PPUSH
79777: LD_VAR 0 5
79781: PPUSH
79782: CALL 32222 0 5
79786: GO 79865
79788: LD_INT 300
79790: DOUBLE
79791: GREATEREQUAL
79792: IFFALSE 79800
79794: LD_INT 399
79796: DOUBLE
79797: LESSEQUAL
79798: IFTRUE 79802
79800: GO 79864
79802: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79803: LD_VAR 0 1
79807: PPUSH
79808: LD_VAR 0 2
79812: PPUSH
79813: LD_VAR 0 3
79817: PPUSH
79818: LD_VAR 0 4
79822: PPUSH
79823: LD_VAR 0 5
79827: PPUSH
79828: LD_VAR 0 6
79832: PPUSH
79833: LD_VAR 0 7
79837: PPUSH
79838: LD_VAR 0 8
79842: PPUSH
79843: LD_VAR 0 9
79847: PPUSH
79848: LD_VAR 0 10
79852: PPUSH
79853: LD_VAR 0 11
79857: PPUSH
79858: CALL 28210 0 11
79862: GO 79865
79864: POP
// end ;
79865: PPOPN 11
79867: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79868: LD_VAR 0 1
79872: PPUSH
79873: LD_VAR 0 2
79877: PPUSH
79878: LD_VAR 0 3
79882: PPUSH
79883: LD_VAR 0 4
79887: PPUSH
79888: LD_VAR 0 5
79892: PPUSH
79893: CALL 31687 0 5
// end ; end_of_file
79897: PPOPN 5
79899: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79900: LD_VAR 0 1
79904: PPUSH
79905: LD_VAR 0 2
79909: PPUSH
79910: LD_VAR 0 3
79914: PPUSH
79915: LD_VAR 0 4
79919: PPUSH
79920: LD_VAR 0 5
79924: PPUSH
79925: LD_VAR 0 6
79929: PPUSH
79930: CALL 15862 0 6
// end ;
79934: PPOPN 6
79936: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79937: LD_INT 0
79939: PPUSH
// begin if not units then
79940: LD_VAR 0 1
79944: NOT
79945: IFFALSE 79949
// exit ;
79947: GO 79949
// end ;
79949: PPOPN 7
79951: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79952: CALL 15749 0 0
// end ;
79956: PPOPN 1
79958: END
