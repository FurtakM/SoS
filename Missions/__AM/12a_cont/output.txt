// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9503 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3813 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9839 0 0
// PreparePatrol ;
 117: CALL 1405 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 35619 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 40459 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i := 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 1 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 1
1073: GREATER
1074: IFFALSE 1225
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1076: LD_ADDR_VAR 0 6
1080: PUSH
1081: LD_INT 81
1083: PUSH
1084: LD_INT 33
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 134
1093: PUSH
1094: LD_INT 114
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 193
1103: PUSH
1104: LD_INT 102
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1116: LD_ADDR_VAR 0 2
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_OWVAR 67
1130: PUSH
1131: LD_INT 1
1133: MINUS
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1223
// begin PrepareSoldier ( false , 10 ) ;
1138: LD_INT 0
1140: PPUSH
1141: LD_INT 10
1143: PPUSH
1144: CALL_OW 381
// un := CreateHuman ;
1148: LD_ADDR_VAR 0 5
1152: PUSH
1153: CALL_OW 44
1157: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_INT 5
1165: PPUSH
1166: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1170: LD_VAR 0 5
1174: PPUSH
1175: LD_VAR 0 6
1179: PUSH
1180: LD_VAR 0 2
1184: ARRAY
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: LD_VAR 0 6
1194: PUSH
1195: LD_VAR 0 2
1199: ARRAY
1200: PUSH
1201: LD_INT 2
1203: ARRAY
1204: PPUSH
1205: LD_INT 0
1207: PPUSH
1208: CALL_OW 48
// ComHold ( un ) ;
1212: LD_VAR 0 5
1216: PPUSH
1217: CALL_OW 140
// end ;
1221: GO 1135
1223: POP
1224: POP
// end ; if Difficulty > 2 then
1225: LD_OWVAR 67
1229: PUSH
1230: LD_INT 2
1232: GREATER
1233: IFFALSE 1282
// begin bc_type := b_turret ;
1235: LD_ADDR_OWVAR 42
1239: PUSH
1240: LD_INT 33
1242: ST_TO_ADDR
// bc_level := 7 ;
1243: LD_ADDR_OWVAR 43
1247: PUSH
1248: LD_INT 7
1250: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1251: LD_ADDR_VAR 0 4
1255: PUSH
1256: LD_INT 107
1258: PPUSH
1259: LD_INT 55
1261: PPUSH
1262: LD_INT 5
1264: PPUSH
1265: CALL_OW 47
1269: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1270: LD_VAR 0 4
1274: PPUSH
1275: LD_INT 7
1277: PPUSH
1278: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1282: LD_ADDR_VAR 0 2
1286: PUSH
1287: LD_INT 22
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 30
1299: PUSH
1300: LD_INT 3
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PPUSH
1311: CALL_OW 69
1315: PUSH
1316: LD_INT 22
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 36
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: ADD
1345: PUSH
1346: FOR_IN
1347: IFFALSE 1398
// for j = 1 to 3 do
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: DOUBLE
1355: LD_INT 1
1357: DEC
1358: ST_TO_ADDR
1359: LD_INT 3
1361: PUSH
1362: FOR_TO
1363: IFFALSE 1394
// begin PrepareHuman ( false , 3 , 6 ) ;
1365: LD_INT 0
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 6
1373: PPUSH
1374: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1378: CALL_OW 44
1382: PPUSH
1383: LD_VAR 0 2
1387: PPUSH
1388: CALL_OW 52
// end ;
1392: GO 1362
1394: POP
1395: POP
1396: GO 1346
1398: POP
1399: POP
// end ;
1400: LD_VAR 0 1
1404: RET
// export function PreparePatrol ; var i , un ; begin
1405: LD_INT 0
1407: PPUSH
1408: PPUSH
1409: PPUSH
// uc_side := 1 ;
1410: LD_ADDR_OWVAR 20
1414: PUSH
1415: LD_INT 1
1417: ST_TO_ADDR
// uc_nation := 1 ;
1418: LD_ADDR_OWVAR 21
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1426: LD_ADDR_EXP 18
1430: PUSH
1431: LD_INT 99
1433: PUSH
1434: LD_INT 55
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: LD_INT 113
1443: PUSH
1444: LD_INT 67
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 129
1453: PUSH
1454: LD_INT 68
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: LD_INT 135
1463: PUSH
1464: LD_INT 62
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PUSH
1471: LD_INT 103
1473: PUSH
1474: LD_INT 41
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 27
1490: PUSH
1491: LD_INT 49
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 46
1500: PUSH
1501: LD_INT 49
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: LD_INT 87
1510: PUSH
1511: LD_INT 70
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: PUSH
1518: LD_INT 99
1520: PUSH
1521: LD_INT 79
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 118
1530: PUSH
1531: LD_INT 111
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: LD_INT 99
1540: PUSH
1541: LD_INT 79
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 87
1550: PUSH
1551: LD_INT 70
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 46
1560: PUSH
1561: LD_INT 49
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 200
1580: PUSH
1581: LD_INT 88
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 175
1590: PUSH
1591: LD_INT 80
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 135
1600: PUSH
1601: LD_INT 62
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: LD_INT 117
1610: PUSH
1611: LD_INT 53
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 103
1620: PUSH
1621: LD_INT 41
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 99
1630: PUSH
1631: LD_INT 24
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: LD_INT 85
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: LD_INT 99
1650: PUSH
1651: LD_INT 24
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: LD_INT 103
1660: PUSH
1661: LD_INT 41
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 98
1670: PUSH
1671: LD_INT 47
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 99
1680: PUSH
1681: LD_INT 56
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 96
1690: PUSH
1691: LD_INT 66
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 99
1700: PUSH
1701: LD_INT 56
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 112
1710: PUSH
1711: LD_INT 66
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 129
1720: PUSH
1721: LD_INT 68
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 135
1730: PUSH
1731: LD_INT 62
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 156
1740: PUSH
1741: LD_INT 71
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 168
1750: PUSH
1751: LD_INT 76
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 168
1760: PUSH
1761: LD_INT 61
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 168
1770: PUSH
1771: LD_INT 75
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 185
1780: PUSH
1781: LD_INT 85
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: ST_TO_ADDR
// mobile_patrol := [ ] ;
1816: LD_ADDR_EXP 17
1820: PUSH
1821: EMPTY
1822: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1823: LD_INT 3
1825: PPUSH
1826: LD_INT 1
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 100
1837: PPUSH
1838: CALL 40459 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1842: LD_ADDR_EXP 17
1846: PUSH
1847: LD_EXP 17
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: CALL_OW 45
1859: PPUSH
1860: CALL_OW 2
1864: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1865: LD_EXP 17
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_INT 99
1876: PPUSH
1877: LD_INT 55
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1887: LD_INT 2
1889: PPUSH
1890: LD_INT 1
1892: PPUSH
1893: LD_INT 3
1895: PPUSH
1896: LD_INT 4
1898: PPUSH
1899: LD_INT 100
1901: PPUSH
1902: CALL 40459 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1906: LD_ADDR_EXP 17
1910: PUSH
1911: LD_EXP 17
1915: PPUSH
1916: LD_INT 2
1918: PPUSH
1919: CALL_OW 45
1923: PPUSH
1924: CALL_OW 2
1928: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1929: LD_EXP 17
1933: PUSH
1934: LD_INT 2
1936: ARRAY
1937: PPUSH
1938: LD_INT 27
1940: PPUSH
1941: LD_INT 49
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1951: LD_INT 3
1953: PPUSH
1954: LD_INT 1
1956: PPUSH
1957: LD_INT 3
1959: PPUSH
1960: LD_INT 9
1962: PUSH
1963: LD_INT 7
1965: PUSH
1966: LD_INT 7
1968: PUSH
1969: LD_INT 7
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_OWVAR 67
1982: ARRAY
1983: PPUSH
1984: LD_INT 100
1986: PPUSH
1987: CALL 40459 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1991: LD_ADDR_EXP 17
1995: PUSH
1996: LD_EXP 17
2000: PPUSH
2001: LD_INT 3
2003: PPUSH
2004: CALL_OW 45
2008: PPUSH
2009: CALL_OW 2
2013: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2014: LD_EXP 17
2018: PUSH
2019: LD_INT 3
2021: ARRAY
2022: PPUSH
2023: LD_INT 200
2025: PPUSH
2026: LD_INT 88
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL_OW 48
// for i := mobile_patrol downto 1 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_EXP 17
2046: INC
2047: ST_TO_ADDR
2048: LD_INT 1
2050: PUSH
2051: FOR_DOWNTO
2052: IFFALSE 2063
// RaiseSailEvent ( 1 ) ;
2054: LD_INT 1
2056: PPUSH
2057: CALL_OW 427
2061: GO 2051
2063: POP
2064: POP
// end ;
2065: LD_VAR 0 1
2069: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2070: LD_INT 0
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
2079: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2080: LD_ADDR_VAR 0 5
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 4
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 21
2097: PUSH
2098: LD_INT 5
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 22
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2120: LD_ADDR_VAR 0 6
2124: PUSH
2125: LD_INT 176
2127: PUSH
2128: LD_INT 81
2130: PUSH
2131: LD_INT 135
2133: PUSH
2134: LD_INT 62
2136: PUSH
2137: LD_INT 114
2139: PUSH
2140: LD_INT 67
2142: PUSH
2143: LD_INT 93
2145: PUSH
2146: LD_INT 71
2148: PUSH
2149: LD_INT 76
2151: PUSH
2152: LD_INT 67
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 107
2169: PUSH
2170: LD_INT 92
2172: PUSH
2173: LD_INT 92
2175: PUSH
2176: LD_INT 72
2178: PUSH
2179: LD_INT 77
2181: PUSH
2182: LD_INT 68
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 45
2195: PUSH
2196: LD_INT 49
2198: PUSH
2199: LD_INT 67
2201: PUSH
2202: LD_INT 59
2204: PUSH
2205: LD_INT 77
2207: PUSH
2208: LD_INT 68
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2224: LD_ADDR_VAR 0 4
2228: PUSH
2229: LD_INT 1
2231: PPUSH
2232: LD_VAR 0 5
2236: PPUSH
2237: CALL_OW 12
2241: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: CALL_OW 12
2257: ST_TO_ADDR
// uc_side := 1 ;
2258: LD_ADDR_OWVAR 20
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// uc_nation := 1 ;
2266: LD_ADDR_OWVAR 21
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2274: LD_INT 2
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 3
2282: PPUSH
2283: LD_INT 12
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL 40459 0 5
// veh := CreateVehicle ;
2293: LD_ADDR_VAR 0 8
2297: PUSH
2298: CALL_OW 45
2302: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2303: LD_VAR 0 8
2307: PPUSH
2308: LD_VAR 0 5
2312: PUSH
2313: LD_VAR 0 4
2317: ARRAY
2318: PUSH
2319: LD_INT 2
2321: ARRAY
2322: PPUSH
2323: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2327: LD_VAR 0 8
2331: PPUSH
2332: LD_VAR 0 5
2336: PUSH
2337: LD_VAR 0 4
2341: ARRAY
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 0
2349: PPUSH
2350: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_INT 1
2361: PUSH
2362: LD_INT 3
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: LD_VAR 0 3
2373: ARRAY
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 290
// tmp := road [ k ] ;
2382: LD_ADDR_VAR 0 7
2386: PUSH
2387: LD_VAR 0 6
2391: PUSH
2392: LD_VAR 0 4
2396: ARRAY
2397: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2398: LD_ADDR_VAR 0 2
2402: PUSH
2403: DOUBLE
2404: LD_INT 1
2406: DEC
2407: ST_TO_ADDR
2408: LD_VAR 0 7
2412: PUSH
2413: LD_INT 2
2415: DIV
2416: PUSH
2417: FOR_TO
2418: IFFALSE 2465
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2420: LD_VAR 0 8
2424: PPUSH
2425: LD_VAR 0 7
2429: PUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_INT 2
2437: MUL
2438: PUSH
2439: LD_INT 1
2441: MINUS
2442: ARRAY
2443: PPUSH
2444: LD_VAR 0 7
2448: PUSH
2449: LD_VAR 0 2
2453: PUSH
2454: LD_INT 2
2456: MUL
2457: ARRAY
2458: PPUSH
2459: CALL_OW 171
2463: GO 2417
2465: POP
2466: POP
// AddComGive ( veh , alfa ) ;
2467: LD_VAR 0 8
2471: PPUSH
2472: LD_INT 5
2474: PPUSH
2475: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2479: LD_VAR 0 8
2483: PPUSH
2484: LD_INT 70
2486: PPUSH
2487: CALL_OW 202
// for i = tmp div 2 downto 1 do
2491: LD_ADDR_VAR 0 2
2495: PUSH
2496: DOUBLE
2497: LD_VAR 0 7
2501: PUSH
2502: LD_INT 2
2504: DIV
2505: INC
2506: ST_TO_ADDR
2507: LD_INT 1
2509: PUSH
2510: FOR_DOWNTO
2511: IFFALSE 2558
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2513: LD_VAR 0 8
2517: PPUSH
2518: LD_VAR 0 7
2522: PUSH
2523: LD_VAR 0 2
2527: PUSH
2528: LD_INT 2
2530: MUL
2531: PUSH
2532: LD_INT 1
2534: MINUS
2535: ARRAY
2536: PPUSH
2537: LD_VAR 0 7
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_INT 2
2549: MUL
2550: ARRAY
2551: PPUSH
2552: CALL_OW 171
2556: GO 2510
2558: POP
2559: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2560: LD_VAR 0 8
2564: PPUSH
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 4
2574: ARRAY
2575: PUSH
2576: LD_INT 1
2578: ARRAY
2579: PPUSH
2580: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2584: LD_INT 35
2586: PPUSH
2587: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2591: LD_VAR 0 8
2595: PPUSH
2596: LD_VAR 0 5
2600: PUSH
2601: LD_VAR 0 4
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 308
2615: PUSH
2616: LD_VAR 0 8
2620: PPUSH
2621: LD_VAR 0 3
2625: PPUSH
2626: CALL_OW 289
2630: PUSH
2631: LD_INT 0
2633: EQUAL
2634: AND
2635: IFFALSE 2584
// RemoveUnit ( veh ) ;
2637: LD_VAR 0 8
2641: PPUSH
2642: CALL_OW 64
// end ;
2646: LD_VAR 0 1
2650: RET
// every 3 3$00 do
2651: GO 2653
2653: DISABLE
// begin enable ;
2654: ENABLE
// SpawnCargo ;
2655: CALL 2070 0 0
// end ;
2659: END
// export function PrepareDefenders ; var i , tmp ; begin
2660: LD_INT 0
2662: PPUSH
2663: PPUSH
2664: PPUSH
// if defenders then
2665: LD_EXP 20
2669: IFFALSE 2673
// exit ;
2671: GO 2945
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2673: LD_ADDR_VAR 0 2
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_INT 4
2685: PUSH
2686: LD_INT 5
2688: PUSH
2689: LD_INT 6
2691: PUSH
2692: LD_INT 7
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: PUSH
2701: LD_OWVAR 67
2705: ARRAY
2706: PUSH
2707: FOR_TO
2708: IFFALSE 2847
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: LD_INT 6
2717: PPUSH
2718: LD_INT 2
2720: PUSH
2721: LD_INT 3
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: CALL_OW 12
2738: ARRAY
2739: PPUSH
2740: LD_INT 1
2742: PUSH
2743: LD_INT 3
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL_OW 12
2760: ARRAY
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: LD_INT 4
2767: PUSH
2768: LD_INT 5
2770: PUSH
2771: LD_INT 9
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 1
2781: PPUSH
2782: LD_INT 3
2784: PPUSH
2785: CALL_OW 12
2789: ARRAY
2790: PPUSH
2791: CALL 38079 0 5
2795: ST_TO_ADDR
// if tmp then
2796: LD_VAR 0 3
2800: IFFALSE 2845
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2802: LD_INT 6
2804: PPUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: PPUSH
2814: LD_VAR 0 3
2818: PUSH
2819: LD_INT 2
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 3
2827: PUSH
2828: LD_INT 3
2830: ARRAY
2831: PPUSH
2832: LD_VAR 0 3
2836: PUSH
2837: LD_INT 4
2839: ARRAY
2840: PPUSH
2841: CALL_OW 185
// end ;
2845: GO 2707
2847: POP
2848: POP
// repeat wait ( 0 0$1 ) ;
2849: LD_INT 35
2851: PPUSH
2852: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2856: LD_INT 22
2858: PUSH
2859: LD_INT 1
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 33
2868: PUSH
2869: LD_INT 2
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PUSH
2885: LD_INT 4
2887: PUSH
2888: LD_INT 5
2890: PUSH
2891: LD_INT 6
2893: PUSH
2894: LD_INT 7
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: PUSH
2903: LD_OWVAR 67
2907: ARRAY
2908: GREATEREQUAL
2909: IFFALSE 2849
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2911: LD_ADDR_EXP 20
2915: PUSH
2916: LD_INT 22
2918: PUSH
2919: LD_INT 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: LD_INT 33
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PPUSH
2940: CALL_OW 69
2944: ST_TO_ADDR
// end ;
2945: LD_VAR 0 1
2949: RET
// export function Defend ; var i , un , veh , tmp ; begin
2950: LD_INT 0
2952: PPUSH
2953: PPUSH
2954: PPUSH
2955: PPUSH
2956: PPUSH
// defcon_wave := defcon_wave + 1 ;
2957: LD_ADDR_EXP 22
2961: PUSH
2962: LD_EXP 22
2966: PUSH
2967: LD_INT 1
2969: PLUS
2970: ST_TO_ADDR
// if not defenders then
2971: LD_EXP 20
2975: NOT
2976: IFFALSE 2982
// PrepareDefenders ;
2978: CALL 2660 0 0
// if defcon_wave > 1 then
2982: LD_EXP 22
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3248
// begin for i = 1 to defcon_wave + 2 do
2992: LD_ADDR_VAR 0 2
2996: PUSH
2997: DOUBLE
2998: LD_INT 1
3000: DEC
3001: ST_TO_ADDR
3002: LD_EXP 22
3006: PUSH
3007: LD_INT 2
3009: PLUS
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3154
// begin uc_side := 1 ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_INT 1
3021: ST_TO_ADDR
// uc_nation := 1 ;
3022: LD_ADDR_OWVAR 21
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3030: LD_INT 4
3032: PPUSH
3033: LD_INT 3
3035: PPUSH
3036: LD_INT 1
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 6
3044: PUSH
3045: LD_INT 7
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 3
3058: PPUSH
3059: CALL_OW 12
3063: ARRAY
3064: PPUSH
3065: LD_INT 100
3067: PPUSH
3068: CALL 40459 0 5
// veh := CreateVehicle ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: CALL_OW 45
3081: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3082: LD_VAR 0 4
3086: PPUSH
3087: LD_INT 1
3089: PPUSH
3090: CALL_OW 233
// defenders := defenders ^ veh ;
3094: LD_ADDR_EXP 20
3098: PUSH
3099: LD_EXP 20
3103: PUSH
3104: LD_VAR 0 4
3108: ADD
3109: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3110: LD_INT 0
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 9
3118: PPUSH
3119: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3123: CALL_OW 44
3127: PPUSH
3128: LD_VAR 0 4
3132: PPUSH
3133: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_INT 25
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// end ;
3152: GO 3011
3154: POP
3155: POP
// for i = 1 to defcon_wave do
3156: LD_ADDR_VAR 0 2
3160: PUSH
3161: DOUBLE
3162: LD_INT 1
3164: DEC
3165: ST_TO_ADDR
3166: LD_EXP 22
3170: PUSH
3171: FOR_TO
3172: IFFALSE 3246
// begin uc_side := 1 ;
3174: LD_ADDR_OWVAR 20
3178: PUSH
3179: LD_INT 1
3181: ST_TO_ADDR
// uc_nation := 1 ;
3182: LD_ADDR_OWVAR 21
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3190: LD_INT 0
3192: PPUSH
3193: LD_INT 5
3195: PPUSH
3196: LD_INT 9
3198: PPUSH
3199: CALL_OW 380
// un := CreateHuman ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3213: LD_VAR 0 3
3217: PPUSH
3218: LD_INT 25
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 49
// defenders := defenders ^ un ;
3228: LD_ADDR_EXP 20
3232: PUSH
3233: LD_EXP 20
3237: PUSH
3238: LD_VAR 0 3
3242: ADD
3243: ST_TO_ADDR
// end ;
3244: GO 3171
3246: POP
3247: POP
// end ; repeat wait ( 0 0$1 ) ;
3248: LD_INT 35
3250: PPUSH
3251: CALL_OW 67
// for i in defenders do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 20
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3348
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3268: LD_EXP 21
3272: PUSH
3273: LD_VAR 0 2
3277: PPUSH
3278: LD_EXP 21
3282: PUSH
3283: LD_INT 1
3285: ARRAY
3286: PPUSH
3287: LD_EXP 21
3291: PUSH
3292: LD_INT 2
3294: ARRAY
3295: PPUSH
3296: CALL_OW 297
3300: PUSH
3301: LD_INT 10
3303: GREATER
3304: AND
3305: PUSH
3306: LD_VAR 0 2
3310: PPUSH
3311: CALL_OW 314
3315: NOT
3316: AND
3317: IFFALSE 3346
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3319: LD_VAR 0 2
3323: PPUSH
3324: LD_EXP 21
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: PPUSH
3333: LD_EXP 21
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: CALL_OW 114
// end ;
3346: GO 3265
3348: POP
3349: POP
// until not defenders ;
3350: LD_EXP 20
3354: NOT
3355: IFFALSE 3248
// end ;
3357: LD_VAR 0 1
3361: RET
// every 0 0$1 do var radar , i ;
3362: GO 3364
3364: DISABLE
3365: LD_INT 0
3367: PPUSH
3368: PPUSH
// begin uc_side := 1 ;
3369: LD_ADDR_OWVAR 20
3373: PUSH
3374: LD_INT 1
3376: ST_TO_ADDR
// uc_nation := 1 ;
3377: LD_ADDR_OWVAR 21
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3385: LD_INT 1
3387: PPUSH
3388: LD_INT 2
3390: PPUSH
3391: LD_INT 3
3393: PPUSH
3394: LD_INT 11
3396: PPUSH
3397: LD_INT 100
3399: PPUSH
3400: CALL 40459 0 5
// radar := CreateVehicle ;
3404: LD_ADDR_VAR 0 1
3408: PUSH
3409: CALL_OW 45
3413: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3414: LD_VAR 0 1
3418: PPUSH
3419: LD_INT 4
3421: PPUSH
3422: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3426: LD_VAR 0 1
3430: PPUSH
3431: LD_INT 51
3433: PPUSH
3434: LD_INT 45
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3444: LD_VAR 0 1
3448: PPUSH
3449: LD_INT 700
3451: PPUSH
3452: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: LD_INT 65
3463: PPUSH
3464: LD_INT 75
3466: PPUSH
3467: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 350
3478: PPUSH
3479: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 83
3490: PPUSH
3491: LD_INT 87
3493: PPUSH
3494: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3498: LD_VAR 0 1
3502: PPUSH
3503: LD_INT 525
3505: PPUSH
3506: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3510: LD_VAR 0 1
3514: PPUSH
3515: LD_INT 94
3517: PPUSH
3518: LD_INT 81
3520: PPUSH
3521: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 350
3532: PPUSH
3533: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 55
3544: PPUSH
3545: LD_INT 48
3547: PPUSH
3548: CALL_OW 171
// wait ( 1 1$00 ) ;
3552: LD_INT 2100
3554: PPUSH
3555: CALL_OW 67
// until not IsOk ( radar ) ;
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 302
3568: NOT
3569: IFFALSE 3444
// end ;
3571: PPOPN 2
3573: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3574: LD_OWVAR 67
3578: PUSH
3579: LD_INT 1
3581: GREATER
3582: PUSH
3583: LD_EXP 11
3587: AND
3588: IFFALSE 3810
3590: GO 3592
3592: DISABLE
3593: LD_INT 0
3595: PPUSH
// begin enable ;
3596: ENABLE
// uc_side := 1 ;
3597: LD_ADDR_OWVAR 20
3601: PUSH
3602: LD_INT 1
3604: ST_TO_ADDR
// uc_nation := 1 ;
3605: LD_ADDR_OWVAR 21
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3613: LD_INT 5
3615: PPUSH
3616: LD_INT 3
3618: PPUSH
3619: LD_INT 3
3621: PPUSH
3622: LD_INT 4
3624: PPUSH
3625: LD_INT 100
3627: PPUSH
3628: CALL 40459 0 5
// un := CreateVehicle ;
3632: LD_ADDR_VAR 0 1
3636: PUSH
3637: CALL_OW 45
3641: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: LD_INT 3
3649: PPUSH
3650: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3654: LD_VAR 0 1
3658: PPUSH
3659: LD_INT 155
3661: PPUSH
3662: LD_INT 2
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3672: LD_VAR 0 1
3676: PPUSH
3677: LD_INT 169
3679: PPUSH
3680: LD_INT 77
3682: PPUSH
3683: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3687: LD_VAR 0 1
3691: PPUSH
3692: LD_INT 70
3694: PPUSH
3695: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3699: LD_VAR 0 1
3703: PPUSH
3704: LD_INT 134
3706: PPUSH
3707: LD_INT 62
3709: PPUSH
3710: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3714: LD_VAR 0 1
3718: PPUSH
3719: LD_INT 103
3721: PPUSH
3722: LD_INT 42
3724: PPUSH
3725: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3729: LD_VAR 0 1
3733: PPUSH
3734: LD_INT 70
3736: PPUSH
3737: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3741: LD_VAR 0 1
3745: PPUSH
3746: LD_INT 84
3748: PPUSH
3749: LD_INT 2
3751: PPUSH
3752: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// if IsDead ( un ) then
3763: LD_VAR 0 1
3767: PPUSH
3768: CALL_OW 301
3772: IFFALSE 3784
// begin extra_patrol := false ;
3774: LD_ADDR_EXP 11
3778: PUSH
3779: LD_INT 0
3781: ST_TO_ADDR
// exit ;
3782: GO 3810
// end ; until IsAt ( un , 84 , 2 ) ;
3784: LD_VAR 0 1
3788: PPUSH
3789: LD_INT 84
3791: PPUSH
3792: LD_INT 2
3794: PPUSH
3795: CALL_OW 307
3799: IFFALSE 3756
// RemoveUnit ( un ) ;
3801: LD_VAR 0 1
3805: PPUSH
3806: CALL_OW 64
// end ; end_of_file
3810: PPOPN 1
3812: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3813: LD_INT 0
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
3821: PPUSH
3822: PPUSH
// uc_side := 4 ;
3823: LD_ADDR_OWVAR 20
3827: PUSH
3828: LD_INT 4
3830: ST_TO_ADDR
// uc_nation := 1 ;
3831: LD_ADDR_OWVAR 21
3835: PUSH
3836: LD_INT 1
3838: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3839: LD_ADDR_EXP 37
3843: PUSH
3844: LD_STRING DeltaDoctor
3846: PPUSH
3847: LD_EXP 1
3851: NOT
3852: PPUSH
3853: LD_STRING 10c_
3855: PPUSH
3856: CALL 35619 0 3
3860: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3861: LD_ADDR_EXP 36
3865: PUSH
3866: LD_STRING Joan
3868: PPUSH
3869: LD_EXP 1
3873: NOT
3874: PPUSH
3875: LD_STRING 10c_
3877: PPUSH
3878: CALL 35619 0 3
3882: ST_TO_ADDR
// if Joan then
3883: LD_EXP 36
3887: IFFALSE 3918
// friends := Insert ( friends , friends + 1 , Joan ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PPUSH
3899: LD_EXP 4
3903: PUSH
3904: LD_INT 1
3906: PLUS
3907: PPUSH
3908: LD_EXP 36
3912: PPUSH
3913: CALL_OW 2
3917: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3918: LD_ADDR_EXP 35
3922: PUSH
3923: LD_STRING Simms
3925: PPUSH
3926: LD_EXP 1
3930: NOT
3931: PPUSH
3932: LD_STRING 10c_
3934: PPUSH
3935: CALL 35619 0 3
3939: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3940: LD_ADDR_EXP 34
3944: PUSH
3945: LD_STRING Kikuchi
3947: PPUSH
3948: LD_EXP 1
3952: NOT
3953: PPUSH
3954: LD_STRING 11_
3956: PPUSH
3957: CALL 35619 0 3
3961: ST_TO_ADDR
// if Kikuchi then
3962: LD_EXP 34
3966: IFFALSE 3997
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3968: LD_ADDR_EXP 4
3972: PUSH
3973: LD_EXP 4
3977: PPUSH
3978: LD_EXP 4
3982: PUSH
3983: LD_INT 1
3985: PLUS
3986: PPUSH
3987: LD_EXP 34
3991: PPUSH
3992: CALL_OW 2
3996: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3997: LD_ADDR_EXP 33
4001: PUSH
4002: LD_STRING Frank
4004: PPUSH
4005: LD_EXP 1
4009: NOT
4010: PPUSH
4011: LD_STRING 11_
4013: PPUSH
4014: CALL 35619 0 3
4018: ST_TO_ADDR
// if Frank then
4019: LD_EXP 33
4023: IFFALSE 4054
// friends := Insert ( friends , friends + 1 , Frank ) ;
4025: LD_ADDR_EXP 4
4029: PUSH
4030: LD_EXP 4
4034: PPUSH
4035: LD_EXP 4
4039: PUSH
4040: LD_INT 1
4042: PLUS
4043: PPUSH
4044: LD_EXP 33
4048: PPUSH
4049: CALL_OW 2
4053: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4054: LD_ADDR_EXP 32
4058: PUSH
4059: LD_STRING Gary
4061: PPUSH
4062: LD_EXP 1
4066: NOT
4067: PPUSH
4068: LD_STRING 11_
4070: PPUSH
4071: CALL 35619 0 3
4075: ST_TO_ADDR
// if Gary then
4076: LD_EXP 32
4080: IFFALSE 4111
// friends := Insert ( friends , friends + 1 , Gary ) ;
4082: LD_ADDR_EXP 4
4086: PUSH
4087: LD_EXP 4
4091: PPUSH
4092: LD_EXP 4
4096: PUSH
4097: LD_INT 1
4099: PLUS
4100: PPUSH
4101: LD_EXP 32
4105: PPUSH
4106: CALL_OW 2
4110: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4111: LD_ADDR_EXP 31
4115: PUSH
4116: LD_STRING Cornell
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 11_
4127: PPUSH
4128: CALL 35619 0 3
4132: ST_TO_ADDR
// if Cornel then
4133: LD_EXP 31
4137: IFFALSE 4168
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4139: LD_ADDR_EXP 4
4143: PUSH
4144: LD_EXP 4
4148: PPUSH
4149: LD_EXP 4
4153: PUSH
4154: LD_INT 1
4156: PLUS
4157: PPUSH
4158: LD_EXP 31
4162: PPUSH
4163: CALL_OW 2
4167: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4168: LD_ADDR_EXP 30
4172: PUSH
4173: LD_STRING Houten
4175: PPUSH
4176: LD_EXP 1
4180: NOT
4181: PPUSH
4182: LD_STRING 11_
4184: PPUSH
4185: CALL 35619 0 3
4189: ST_TO_ADDR
// if Houten then
4190: LD_EXP 30
4194: IFFALSE 4225
// friends := Insert ( friends , friends + 1 , Houten ) ;
4196: LD_ADDR_EXP 4
4200: PUSH
4201: LD_EXP 4
4205: PPUSH
4206: LD_EXP 4
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_EXP 30
4219: PPUSH
4220: CALL_OW 2
4224: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4225: LD_ADDR_EXP 29
4229: PUSH
4230: LD_STRING Gladstone
4232: PPUSH
4233: LD_EXP 1
4237: NOT
4238: PPUSH
4239: LD_STRING 11_
4241: PPUSH
4242: CALL 35619 0 3
4246: ST_TO_ADDR
// if Gladstone then
4247: LD_EXP 29
4251: IFFALSE 4282
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4253: LD_ADDR_EXP 4
4257: PUSH
4258: LD_EXP 4
4262: PPUSH
4263: LD_EXP 4
4267: PUSH
4268: LD_INT 1
4270: PLUS
4271: PPUSH
4272: LD_EXP 29
4276: PPUSH
4277: CALL_OW 2
4281: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4282: LD_ADDR_EXP 23
4286: PUSH
4287: LD_STRING Lisa
4289: PPUSH
4290: LD_EXP 1
4294: NOT
4295: PPUSH
4296: LD_STRING 11_
4298: PPUSH
4299: CALL 35619 0 3
4303: ST_TO_ADDR
// if Lisa then
4304: LD_EXP 23
4308: IFFALSE 4333
// friends := Insert ( friends , 1 , Lisa ) ;
4310: LD_ADDR_EXP 4
4314: PUSH
4315: LD_EXP 4
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: LD_EXP 23
4327: PPUSH
4328: CALL_OW 2
4332: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4333: LD_ADDR_EXP 24
4337: PUSH
4338: LD_STRING Donaldson
4340: PPUSH
4341: LD_EXP 1
4345: NOT
4346: PPUSH
4347: LD_STRING 11_
4349: PPUSH
4350: CALL 35619 0 3
4354: ST_TO_ADDR
// if Donaldson then
4355: LD_EXP 24
4359: IFFALSE 4390
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4361: LD_ADDR_EXP 4
4365: PUSH
4366: LD_EXP 4
4370: PPUSH
4371: LD_EXP 4
4375: PUSH
4376: LD_INT 1
4378: PLUS
4379: PPUSH
4380: LD_EXP 24
4384: PPUSH
4385: CALL_OW 2
4389: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4390: LD_ADDR_EXP 25
4394: PUSH
4395: LD_STRING Bobby
4397: PPUSH
4398: LD_EXP 1
4402: NOT
4403: PPUSH
4404: LD_STRING 11_
4406: PPUSH
4407: CALL 35619 0 3
4411: ST_TO_ADDR
// if Bobby then
4412: LD_EXP 25
4416: IFFALSE 4447
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4418: LD_ADDR_EXP 4
4422: PUSH
4423: LD_EXP 4
4427: PPUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_INT 1
4435: PLUS
4436: PPUSH
4437: LD_EXP 25
4441: PPUSH
4442: CALL_OW 2
4446: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4447: LD_ADDR_EXP 26
4451: PUSH
4452: LD_STRING Cyrus
4454: PPUSH
4455: LD_EXP 1
4459: NOT
4460: PPUSH
4461: LD_STRING 11_
4463: PPUSH
4464: CALL 35619 0 3
4468: ST_TO_ADDR
// if Cyrus then
4469: LD_EXP 26
4473: IFFALSE 4504
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4475: LD_ADDR_EXP 4
4479: PUSH
4480: LD_EXP 4
4484: PPUSH
4485: LD_EXP 4
4489: PUSH
4490: LD_INT 1
4492: PLUS
4493: PPUSH
4494: LD_EXP 26
4498: PPUSH
4499: CALL_OW 2
4503: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4504: LD_ADDR_EXP 27
4508: PUSH
4509: LD_STRING Denis
4511: PPUSH
4512: LD_EXP 1
4516: NOT
4517: PPUSH
4518: LD_STRING 11_
4520: PPUSH
4521: CALL 35619 0 3
4525: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4526: LD_ADDR_EXP 28
4530: PUSH
4531: LD_STRING Brown
4533: PPUSH
4534: LD_EXP 1
4538: NOT
4539: PPUSH
4540: LD_STRING 11_
4542: PPUSH
4543: CALL 35619 0 3
4547: ST_TO_ADDR
// if Brown then
4548: LD_EXP 28
4552: IFFALSE 4583
// friends := Insert ( friends , friends + 1 , Brown ) ;
4554: LD_ADDR_EXP 4
4558: PUSH
4559: LD_EXP 4
4563: PPUSH
4564: LD_EXP 4
4568: PUSH
4569: LD_INT 1
4571: PLUS
4572: PPUSH
4573: LD_EXP 28
4577: PPUSH
4578: CALL_OW 2
4582: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4583: LD_ADDR_EXP 38
4587: PUSH
4588: LD_STRING Mike
4590: PPUSH
4591: LD_EXP 1
4595: NOT
4596: PPUSH
4597: LD_STRING 10c_
4599: PPUSH
4600: CALL 35619 0 3
4604: ST_TO_ADDR
// if Mike then
4605: LD_EXP 38
4609: IFFALSE 4650
// begin SetClass ( Mike , class_apeman_engineer ) ;
4611: LD_EXP 38
4615: PPUSH
4616: LD_INT 16
4618: PPUSH
4619: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4623: LD_EXP 38
4627: PPUSH
4628: LD_INT 180
4630: PPUSH
4631: LD_INT 87
4633: PPUSH
4634: LD_INT 0
4636: PPUSH
4637: CALL_OW 48
// ComHold ( Mike ) ;
4641: LD_EXP 38
4645: PPUSH
4646: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4650: LD_ADDR_EXP 4
4654: PUSH
4655: LD_EXP 4
4659: PUSH
4660: LD_STRING 11c_others
4662: PPUSH
4663: CALL_OW 31
4667: ADD
4668: PUSH
4669: LD_STRING 11_others
4671: PPUSH
4672: CALL_OW 31
4676: ADD
4677: ST_TO_ADDR
// if friends < 18 then
4678: LD_EXP 4
4682: PUSH
4683: LD_INT 18
4685: LESS
4686: IFFALSE 4758
// for i = 1 to 18 do
4688: LD_ADDR_VAR 0 2
4692: PUSH
4693: DOUBLE
4694: LD_INT 1
4696: DEC
4697: ST_TO_ADDR
4698: LD_INT 18
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4756
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4704: LD_INT 0
4706: PPUSH
4707: LD_INT 1
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: CALL_OW 12
4717: PPUSH
4718: LD_INT 7
4720: PPUSH
4721: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4725: LD_ADDR_EXP 4
4729: PUSH
4730: LD_EXP 4
4734: PPUSH
4735: LD_EXP 4
4739: PUSH
4740: LD_INT 1
4742: PLUS
4743: PPUSH
4744: CALL_OW 44
4748: PPUSH
4749: CALL_OW 2
4753: ST_TO_ADDR
// end ;
4754: GO 4701
4756: POP
4757: POP
// for i in friends do
4758: LD_ADDR_VAR 0 2
4762: PUSH
4763: LD_EXP 4
4767: PUSH
4768: FOR_IN
4769: IFFALSE 4842
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4771: LD_VAR 0 2
4775: PPUSH
4776: CALL_OW 248
4780: PUSH
4781: LD_INT 1
4783: EQUAL
4784: PUSH
4785: LD_VAR 0 2
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 259
4797: PUSH
4798: LD_VAR 0 2
4802: PPUSH
4803: LD_INT 4
4805: PPUSH
4806: CALL_OW 259
4810: GREATEREQUAL
4811: AND
4812: IFFALSE 4828
// SetClass ( i , class_soldier ) else
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 336
4826: GO 4840
// SetClass ( i , class_scientistic ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 336
4840: GO 4768
4842: POP
4843: POP
// if Frank then
4844: LD_EXP 33
4848: IFFALSE 4862
// SetClass ( Frank , class_sniper ) ;
4850: LD_EXP 33
4854: PPUSH
4855: LD_INT 5
4857: PPUSH
4858: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4862: LD_EXP 36
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_EXP 37
4876: PUSH
4877: LD_EXP 35
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4895: LD_ADDR_EXP 3
4899: PUSH
4900: LD_STRING 
4902: PPUSH
4903: LD_INT 7
4905: PPUSH
4906: LD_INT 7
4908: PPUSH
4909: LD_INT -6
4911: PUSH
4912: LD_EXP 14
4916: PUSH
4917: LD_EXP 15
4921: PUSH
4922: LD_EXP 35
4926: PUSH
4927: LD_EXP 27
4931: PUSH
4932: LD_EXP 37
4936: PUSH
4937: LD_INT -2
4939: PUSH
4940: LD_INT -3
4942: PUSH
4943: LD_INT -5
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PUSH
4957: LD_EXP 4
4961: ADD
4962: PPUSH
4963: LD_INT 1
4965: PUSH
4966: LD_INT 4
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 5
4978: PUSH
4979: LD_INT 0
4981: PUSH
4982: LD_INT 3
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PPUSH
4995: CALL_OW 42
4999: ST_TO_ADDR
// if Simms then
5000: LD_EXP 35
5004: IFFALSE 5022
// selected := selected ^ Simms ;
5006: LD_ADDR_EXP 3
5010: PUSH
5011: LD_EXP 3
5015: PUSH
5016: LD_EXP 35
5020: ADD
5021: ST_TO_ADDR
// if Denis then
5022: LD_EXP 27
5026: IFFALSE 5044
// selected := selected ^ Denis ;
5028: LD_ADDR_EXP 3
5032: PUSH
5033: LD_EXP 3
5037: PUSH
5038: LD_EXP 27
5042: ADD
5043: ST_TO_ADDR
// if DeltaDoctor then
5044: LD_EXP 37
5048: IFFALSE 5066
// selected := selected ^ DeltaDoctor ;
5050: LD_ADDR_EXP 3
5054: PUSH
5055: LD_EXP 3
5059: PUSH
5060: LD_EXP 37
5064: ADD
5065: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5066: LD_EXP 10
5070: PUSH
5071: LD_INT 1
5073: EQUAL
5074: PUSH
5075: LD_EXP 24
5079: AND
5080: IFFALSE 5092
// gammaCommander := Donaldson ;
5082: LD_ADDR_VAR 0 8
5086: PUSH
5087: LD_EXP 24
5091: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5092: LD_EXP 10
5096: PUSH
5097: LD_INT 2
5099: EQUAL
5100: PUSH
5101: LD_EXP 28
5105: AND
5106: IFFALSE 5118
// gammaCommander := Brown ;
5108: LD_ADDR_VAR 0 8
5112: PUSH
5113: LD_EXP 28
5117: ST_TO_ADDR
// friends := friends diff selected ;
5118: LD_ADDR_EXP 4
5122: PUSH
5123: LD_EXP 4
5127: PUSH
5128: LD_EXP 3
5132: DIFF
5133: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5134: LD_ADDR_EXP 4
5138: PUSH
5139: LD_EXP 4
5143: PUSH
5144: LD_VAR 0 8
5148: DIFF
5149: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5150: LD_ADDR_VAR 0 4
5154: PUSH
5155: LD_INT 111
5157: PUSH
5158: LD_INT 137
5160: PUSH
5161: LD_INT 51
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 147
5171: PUSH
5172: LD_INT 129
5174: PUSH
5175: LD_INT 25
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5187: LD_ADDR_VAR 0 5
5191: PUSH
5192: LD_INT 5
5194: PUSH
5195: LD_INT 6
5197: PUSH
5198: LD_INT 7
5200: PUSH
5201: LD_INT 8
5203: PUSH
5204: LD_INT 17
5206: PUSH
5207: LD_INT 18
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: ST_TO_ADDR
// for i in buildings do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 4
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5245
// SetSide ( i , 4 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: LD_INT 4
5238: PPUSH
5239: CALL_OW 235
5243: GO 5228
5245: POP
5246: POP
// for i in selected union gammaCommander do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_EXP 3
5256: PUSH
5257: LD_VAR 0 8
5261: UNION
5262: PUSH
5263: FOR_IN
5264: IFFALSE 5604
// begin if GetClass ( i ) in [ 1 , 5 ] then
5266: LD_VAR 0 2
5270: PPUSH
5271: CALL_OW 257
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: LD_INT 5
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: IN
5286: IFFALSE 5446
// begin if buildings [ 1 ] then
5288: LD_VAR 0 4
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: IFFALSE 5357
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5298: LD_VAR 0 2
5302: PPUSH
5303: LD_VAR 0 4
5307: PUSH
5308: LD_INT 1
5310: ARRAY
5311: PUSH
5312: LD_INT 1
5314: ARRAY
5315: PPUSH
5316: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5320: LD_ADDR_VAR 0 4
5324: PUSH
5325: LD_VAR 0 4
5329: PPUSH
5330: LD_INT 1
5332: PPUSH
5333: LD_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: LD_INT 1
5344: PPUSH
5345: CALL_OW 3
5349: PPUSH
5350: CALL_OW 1
5354: ST_TO_ADDR
// end else
5355: GO 5444
// begin if not areas then
5357: LD_VAR 0 5
5361: NOT
5362: IFFALSE 5396
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5364: LD_VAR 0 2
5368: PPUSH
5369: LD_INT 87
5371: PPUSH
5372: LD_INT 68
5374: PPUSH
5375: LD_INT 8
5377: PPUSH
5378: LD_INT 0
5380: PPUSH
5381: CALL_OW 50
// ComHold ( i ) ;
5385: LD_VAR 0 2
5389: PPUSH
5390: CALL_OW 140
// end else
5394: GO 5444
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 5
5405: PUSH
5406: LD_INT 1
5408: ARRAY
5409: PPUSH
5410: LD_INT 0
5412: PPUSH
5413: CALL_OW 49
// ComHold ( i ) ;
5417: LD_VAR 0 2
5421: PPUSH
5422: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5426: LD_ADDR_VAR 0 5
5430: PUSH
5431: LD_VAR 0 5
5435: PPUSH
5436: LD_INT 1
5438: PPUSH
5439: CALL_OW 3
5443: ST_TO_ADDR
// end ; end ; end else
5444: GO 5602
// begin if buildings [ 2 ] then
5446: LD_VAR 0 4
5450: PUSH
5451: LD_INT 2
5453: ARRAY
5454: IFFALSE 5515
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_VAR 0 4
5465: PUSH
5466: LD_INT 2
5468: ARRAY
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PPUSH
5474: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5478: LD_ADDR_VAR 0 4
5482: PUSH
5483: LD_VAR 0 4
5487: PPUSH
5488: LD_INT 2
5490: PPUSH
5491: LD_VAR 0 4
5495: PUSH
5496: LD_INT 2
5498: ARRAY
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// end else
5513: GO 5602
// begin if not areas then
5515: LD_VAR 0 5
5519: NOT
5520: IFFALSE 5554
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5522: LD_VAR 0 2
5526: PPUSH
5527: LD_INT 87
5529: PPUSH
5530: LD_INT 68
5532: PPUSH
5533: LD_INT 8
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: CALL_OW 50
// ComHold ( i ) ;
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 140
// end else
5552: GO 5602
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5554: LD_VAR 0 2
5558: PPUSH
5559: LD_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: CALL_OW 49
// ComHold ( i ) ;
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5584: LD_ADDR_VAR 0 5
5588: PUSH
5589: LD_VAR 0 5
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: CALL_OW 3
5601: ST_TO_ADDR
// end ; end ; end ; end ;
5602: GO 5263
5604: POP
5605: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 30
5623: PUSH
5624: LD_INT 32
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 69
5639: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5640: LD_ADDR_VAR 0 2
5644: PUSH
5645: DOUBLE
5646: LD_VAR 0 6
5650: PUSH
5651: LD_EXP 4
5655: MINUS
5656: INC
5657: ST_TO_ADDR
5658: LD_INT 1
5660: PUSH
5661: FOR_DOWNTO
5662: IFFALSE 5729
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5664: LD_INT 0
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 7
5672: PUSH
5673: LD_INT 8
5675: PUSH
5676: LD_INT 9
5678: PUSH
5679: LD_INT 10
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: PUSH
5688: LD_OWVAR 67
5692: ARRAY
5693: PPUSH
5694: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5698: LD_ADDR_EXP 4
5702: PUSH
5703: LD_EXP 4
5707: PPUSH
5708: LD_EXP 4
5712: PUSH
5713: LD_INT 1
5715: PLUS
5716: PPUSH
5717: CALL_OW 44
5721: PPUSH
5722: CALL_OW 2
5726: ST_TO_ADDR
// end ;
5727: GO 5661
5729: POP
5730: POP
// if friends then
5731: LD_EXP 4
5735: IFFALSE 5851
// begin tmp := friends ;
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: LD_EXP 4
5746: ST_TO_ADDR
// for i = 1 to bunkers do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 6
5761: PUSH
5762: FOR_TO
5763: IFFALSE 5849
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5765: LD_VAR 0 3
5769: PUSH
5770: LD_VAR 0 3
5774: ARRAY
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5783: LD_VAR 0 3
5787: PUSH
5788: LD_VAR 0 3
5792: ARRAY
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5801: LD_VAR 0 3
5805: PUSH
5806: LD_VAR 0 3
5810: ARRAY
5811: PPUSH
5812: LD_VAR 0 6
5816: PUSH
5817: LD_VAR 0 2
5821: ARRAY
5822: PPUSH
5823: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 3
5841: PPUSH
5842: CALL_OW 3
5846: ST_TO_ADDR
// end ;
5847: GO 5762
5849: POP
5850: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5851: LD_ADDR_VAR 0 5
5855: PUSH
5856: LD_VAR 0 5
5860: PUSH
5861: LD_INT 9
5863: PUSH
5864: LD_INT 10
5866: PUSH
5867: LD_INT 11
5869: PUSH
5870: LD_INT 12
5872: PUSH
5873: LD_INT 13
5875: PUSH
5876: LD_INT 14
5878: PUSH
5879: LD_INT 15
5881: PUSH
5882: LD_INT 16
5884: PUSH
5885: LD_INT 26
5887: PUSH
5888: LD_INT 27
5890: PUSH
5891: LD_INT 28
5893: PUSH
5894: LD_INT 29
5896: PUSH
5897: LD_INT 30
5899: PUSH
5900: LD_INT 31
5902: PUSH
5903: LD_INT 32
5905: PUSH
5906: LD_INT 33
5908: PUSH
5909: LD_INT 34
5911: PUSH
5912: LD_INT 35
5914: PUSH
5915: LD_INT 36
5917: PUSH
5918: LD_INT 37
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: UNION
5943: ST_TO_ADDR
// for i in friends do
5944: LD_ADDR_VAR 0 2
5948: PUSH
5949: LD_EXP 4
5953: PUSH
5954: FOR_IN
5955: IFFALSE 6242
// begin SetTag ( i , 2 ) ;
5957: LD_VAR 0 2
5961: PPUSH
5962: LD_INT 2
5964: PPUSH
5965: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5969: LD_VAR 0 2
5973: PPUSH
5974: CALL_OW 257
5978: PUSH
5979: LD_INT 1
5981: PUSH
5982: LD_INT 4
5984: PUSH
5985: LD_INT 5
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: LIST
5992: IN
5993: NOT
5994: IFFALSE 6008
// SetClass ( i , 1 ) ;
5996: LD_VAR 0 2
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6008: LD_VAR 0 2
6012: PPUSH
6013: CALL_OW 257
6017: PUSH
6018: LD_INT 1
6020: PUSH
6021: LD_INT 5
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: IN
6028: PUSH
6029: LD_VAR 0 4
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: AND
6038: IFFALSE 6099
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_VAR 0 4
6049: PUSH
6050: LD_INT 1
6052: ARRAY
6053: PUSH
6054: LD_INT 1
6056: ARRAY
6057: PPUSH
6058: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6062: LD_ADDR_VAR 0 4
6066: PUSH
6067: LD_VAR 0 4
6071: PPUSH
6072: LD_INT 1
6074: PPUSH
6075: LD_VAR 0 4
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_INT 1
6086: PPUSH
6087: CALL_OW 3
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
// continue ;
6097: GO 5954
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6099: LD_VAR 0 2
6103: PPUSH
6104: CALL_OW 257
6108: PUSH
6109: LD_INT 4
6111: EQUAL
6112: PUSH
6113: LD_VAR 0 4
6117: PUSH
6118: LD_INT 2
6120: ARRAY
6121: AND
6122: IFFALSE 6183
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6124: LD_VAR 0 2
6128: PPUSH
6129: LD_VAR 0 4
6133: PUSH
6134: LD_INT 2
6136: ARRAY
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6146: LD_ADDR_VAR 0 4
6150: PUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: LD_INT 2
6158: PPUSH
6159: LD_VAR 0 4
6163: PUSH
6164: LD_INT 2
6166: ARRAY
6167: PPUSH
6168: LD_INT 1
6170: PPUSH
6171: CALL_OW 3
6175: PPUSH
6176: CALL_OW 1
6180: ST_TO_ADDR
// continue ;
6181: GO 5954
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6183: LD_VAR 0 2
6187: PPUSH
6188: LD_VAR 0 5
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: LD_INT 0
6199: PPUSH
6200: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6204: LD_ADDR_VAR 0 5
6208: PUSH
6209: LD_VAR 0 5
6213: PPUSH
6214: LD_INT 1
6216: PPUSH
6217: CALL_OW 3
6221: ST_TO_ADDR
// ComHold ( i ) ;
6222: LD_VAR 0 2
6226: PPUSH
6227: CALL_OW 140
// if not areas then
6231: LD_VAR 0 5
6235: NOT
6236: IFFALSE 6240
// break ;
6238: GO 6242
// end ;
6240: GO 5954
6242: POP
6243: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6244: LD_EXP 4
6248: PPUSH
6249: LD_INT 3
6251: PUSH
6252: LD_INT 52
6254: PUSH
6255: EMPTY
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 72
6266: IFFALSE 6333
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6268: LD_ADDR_VAR 0 2
6272: PUSH
6273: LD_EXP 4
6277: PPUSH
6278: LD_INT 3
6280: PUSH
6281: LD_INT 52
6283: PUSH
6284: EMPTY
6285: LIST
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PPUSH
6291: CALL_OW 72
6295: PUSH
6296: FOR_IN
6297: IFFALSE 6331
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6299: LD_VAR 0 2
6303: PPUSH
6304: LD_INT 65
6306: PPUSH
6307: LD_INT 58
6309: PPUSH
6310: LD_INT 7
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 50
// ComHold ( i ) ;
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 140
// end ;
6329: GO 6296
6331: POP
6332: POP
// if Frank then
6333: LD_EXP 33
6337: IFFALSE 6351
// SetClass ( Frank , class_sniper ) ;
6339: LD_EXP 33
6343: PPUSH
6344: LD_INT 5
6346: PPUSH
6347: CALL_OW 336
// end ; end_of_file
6351: LD_VAR 0 1
6355: RET
// export function CanSayRand ( side ) ; begin
6356: LD_INT 0
6358: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_INT 52
6366: PUSH
6367: EMPTY
6368: LIST
6369: PUSH
6370: LD_INT 22
6372: PUSH
6373: LD_VAR 0 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 2
6384: PUSH
6385: LD_INT 25
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 25
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 3
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 25
6417: PUSH
6418: LD_INT 4
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 69
6441: PUSH
6442: LD_EXP 14
6446: PUSH
6447: LD_EXP 33
6451: PUSH
6452: LD_EXP 23
6456: PUSH
6457: LD_EXP 24
6461: PUSH
6462: LD_EXP 25
6466: PUSH
6467: LD_EXP 26
6471: PUSH
6472: LD_EXP 27
6476: PUSH
6477: LD_EXP 28
6481: PUSH
6482: LD_EXP 29
6486: PUSH
6487: LD_EXP 30
6491: PUSH
6492: LD_EXP 16
6496: PUSH
6497: LD_EXP 31
6501: PUSH
6502: LD_EXP 32
6506: PUSH
6507: LD_EXP 34
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: DIFF
6528: ST_TO_ADDR
// end ;
6529: LD_VAR 0 2
6533: RET
// export function SayRand ( sex , dial ) ; begin
6534: LD_INT 0
6536: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 52
6544: PUSH
6545: EMPTY
6546: LIST
6547: PUSH
6548: LD_INT 22
6550: PUSH
6551: LD_INT 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 26
6560: PUSH
6561: LD_VAR 0 1
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 1
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 25
6585: PUSH
6586: LD_INT 2
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 25
6605: PUSH
6606: LD_INT 4
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PPUSH
6626: CALL_OW 69
6630: PUSH
6631: LD_EXP 14
6635: PUSH
6636: LD_EXP 33
6640: PUSH
6641: LD_EXP 23
6645: PUSH
6646: LD_EXP 24
6650: PUSH
6651: LD_EXP 25
6655: PUSH
6656: LD_EXP 26
6660: PUSH
6661: LD_EXP 27
6665: PUSH
6666: LD_EXP 28
6670: PUSH
6671: LD_EXP 29
6675: PUSH
6676: LD_EXP 30
6680: PUSH
6681: LD_EXP 16
6685: PUSH
6686: LD_EXP 31
6690: PUSH
6691: LD_EXP 32
6695: PUSH
6696: LD_EXP 34
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: DIFF
6717: ST_TO_ADDR
// if not result then
6718: LD_VAR 0 3
6722: NOT
6723: IFFALSE 6727
// exit ;
6725: GO 6755
// result := result [ 1 ] ;
6727: LD_ADDR_VAR 0 3
6731: PUSH
6732: LD_VAR 0 3
6736: PUSH
6737: LD_INT 1
6739: ARRAY
6740: ST_TO_ADDR
// Say ( result , dial ) ;
6741: LD_VAR 0 3
6745: PPUSH
6746: LD_VAR 0 2
6750: PPUSH
6751: CALL_OW 88
// end ;
6755: LD_VAR 0 3
6759: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6760: LD_INT 0
6762: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6763: LD_ADDR_VAR 0 4
6767: PUSH
6768: LD_INT 22
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 26
6780: PUSH
6781: LD_VAR 0 1
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 2
6792: PUSH
6793: LD_INT 25
6795: PUSH
6796: LD_INT 1
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 25
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 25
6825: PUSH
6826: LD_INT 4
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: LD_EXP 14
6854: PUSH
6855: LD_EXP 33
6859: PUSH
6860: LD_EXP 23
6864: PUSH
6865: LD_EXP 24
6869: PUSH
6870: LD_EXP 25
6874: PUSH
6875: LD_EXP 26
6879: PUSH
6880: LD_EXP 27
6884: PUSH
6885: LD_EXP 28
6889: PUSH
6890: LD_EXP 29
6894: PUSH
6895: LD_EXP 30
6899: PUSH
6900: LD_EXP 16
6904: PUSH
6905: LD_EXP 31
6909: PUSH
6910: LD_EXP 32
6914: PUSH
6915: LD_EXP 34
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: PUSH
6936: LD_VAR 0 3
6940: ADD
6941: DIFF
6942: ST_TO_ADDR
// if not result then
6943: LD_VAR 0 4
6947: NOT
6948: IFFALSE 6952
// exit ;
6950: GO 6980
// result := result [ 1 ] ;
6952: LD_ADDR_VAR 0 4
6956: PUSH
6957: LD_VAR 0 4
6961: PUSH
6962: LD_INT 1
6964: ARRAY
6965: ST_TO_ADDR
// Say ( result , dial ) ;
6966: LD_VAR 0 4
6970: PPUSH
6971: LD_VAR 0 2
6975: PPUSH
6976: CALL_OW 88
// end ;
6980: LD_VAR 0 4
6984: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7002: LD_VAR 0 1
7006: NOT
7007: PUSH
7008: LD_VAR 0 2
7012: NOT
7013: OR
7014: PUSH
7015: LD_VAR 0 1
7019: PPUSH
7020: CALL_OW 247
7024: PUSH
7025: LD_INT 3
7027: EQUAL
7028: OR
7029: IFFALSE 7033
// exit ;
7031: GO 8572
// for i = path downto 1 do
7033: LD_ADDR_VAR 0 5
7037: PUSH
7038: DOUBLE
7039: LD_VAR 0 2
7043: INC
7044: ST_TO_ADDR
7045: LD_INT 1
7047: PUSH
7048: FOR_DOWNTO
7049: IFFALSE 7110
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_VAR 0 5
7060: ARRAY
7061: PUSH
7062: LD_INT 1
7064: ARRAY
7065: PPUSH
7066: LD_VAR 0 2
7070: PUSH
7071: LD_VAR 0 5
7075: ARRAY
7076: PUSH
7077: LD_INT 2
7079: ARRAY
7080: PPUSH
7081: CALL_OW 488
7085: NOT
7086: IFFALSE 7108
// path = Delete ( path , i ) ;
7088: LD_ADDR_VAR 0 2
7092: PUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: LD_VAR 0 5
7102: PPUSH
7103: CALL_OW 3
7107: ST_TO_ADDR
// end ;
7108: GO 7048
7110: POP
7111: POP
// if not path then
7112: LD_VAR 0 2
7116: NOT
7117: IFFALSE 7121
// exit ;
7119: GO 8572
// tmp_path := [ ] ;
7121: LD_ADDR_VAR 0 11
7125: PUSH
7126: EMPTY
7127: ST_TO_ADDR
// if flags then
7128: LD_VAR 0 3
7132: IFFALSE 7206
// begin if flags [ 1 ] then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: IFFALSE 7158
// safe_place = flags [ 1 ] ;
7144: LD_ADDR_VAR 0 16
7148: PUSH
7149: LD_VAR 0 3
7153: PUSH
7154: LD_INT 1
7156: ARRAY
7157: ST_TO_ADDR
// if flags [ 2 ] then
7158: LD_VAR 0 3
7162: PUSH
7163: LD_INT 2
7165: ARRAY
7166: IFFALSE 7182
// spot_dist = flags [ 2 ] ;
7168: LD_ADDR_VAR 0 15
7172: PUSH
7173: LD_VAR 0 3
7177: PUSH
7178: LD_INT 2
7180: ARRAY
7181: ST_TO_ADDR
// if flags [ 3 ] then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 3
7189: ARRAY
7190: IFFALSE 7206
// chase_range = flags [ 3 ] ;
7192: LD_ADDR_VAR 0 17
7196: PUSH
7197: LD_VAR 0 3
7201: PUSH
7202: LD_INT 3
7204: ARRAY
7205: ST_TO_ADDR
// end ; if not chase_range then
7206: LD_VAR 0 17
7210: NOT
7211: IFFALSE 7221
// chase_range = 8 ;
7213: LD_ADDR_VAR 0 17
7217: PUSH
7218: LD_INT 8
7220: ST_TO_ADDR
// if not spot_dist then
7221: LD_VAR 0 15
7225: NOT
7226: IFFALSE 7236
// spot_dist := 8 ;
7228: LD_ADDR_VAR 0 15
7232: PUSH
7233: LD_INT 8
7235: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7236: LD_ADDR_VAR 0 18
7240: PUSH
7241: LD_VAR 0 1
7245: PPUSH
7246: CALL_OW 247
7250: PUSH
7251: LD_INT 2
7253: EQUAL
7254: PUSH
7255: LD_VAR 0 1
7259: PPUSH
7260: CALL_OW 262
7264: PUSH
7265: LD_INT 3
7267: NONEQUAL
7268: AND
7269: ST_TO_ADDR
// status = 1 ;
7270: LD_ADDR_VAR 0 12
7274: PUSH
7275: LD_INT 1
7277: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7278: LD_ADDR_VAR 0 11
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: LD_VAR 0 2
7290: PUSH
7291: LD_INT 1
7293: ARRAY
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7299: LD_INT 35
7301: PPUSH
7302: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7306: LD_VAR 0 18
7310: PUSH
7311: LD_VAR 0 1
7315: PPUSH
7316: CALL_OW 261
7320: PUSH
7321: LD_INT 20
7323: LESS
7324: AND
7325: IFFALSE 7518
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7327: LD_ADDR_VAR 0 10
7331: PUSH
7332: LD_INT 22
7334: PUSH
7335: LD_VAR 0 1
7339: PPUSH
7340: CALL_OW 255
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: LD_INT 30
7354: PUSH
7355: LD_INT 0
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 30
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 30
7374: PUSH
7375: LD_INT 29
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 30
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PPUSH
7403: CALL_OW 69
7407: ST_TO_ADDR
// if not station then
7408: LD_VAR 0 10
7412: NOT
7413: IFFALSE 7429
// begin SetFuel ( unit , 40 ) ;
7415: LD_VAR 0 1
7419: PPUSH
7420: LD_INT 40
7422: PPUSH
7423: CALL_OW 240
// continue ;
7427: GO 7299
// end ; status := 6 ;
7429: LD_ADDR_VAR 0 12
7433: PUSH
7434: LD_INT 6
7436: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7437: LD_ADDR_VAR 0 10
7441: PUSH
7442: LD_VAR 0 10
7446: PPUSH
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 74
7456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7457: LD_INT 35
7459: PPUSH
7460: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_VAR 0 10
7473: PPUSH
7474: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_VAR 0 10
7487: PPUSH
7488: CALL_OW 296
7492: PUSH
7493: LD_INT 6
7495: LESS
7496: IFFALSE 7457
// SetFuel ( unit , 100 ) ;
7498: LD_VAR 0 1
7502: PPUSH
7503: LD_INT 100
7505: PPUSH
7506: CALL_OW 240
// status := 5 ;
7510: LD_ADDR_VAR 0 12
7514: PUSH
7515: LD_INT 5
7517: ST_TO_ADDR
// end ; if status = 1 then
7518: LD_VAR 0 12
7522: PUSH
7523: LD_INT 1
7525: EQUAL
7526: IFFALSE 7902
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7528: LD_ADDR_VAR 0 13
7532: PUSH
7533: LD_INT 81
7535: PUSH
7536: LD_VAR 0 1
7540: PPUSH
7541: CALL_OW 255
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: LD_INT 3
7552: PUSH
7553: LD_INT 21
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 91
7569: PUSH
7570: LD_VAR 0 1
7574: PUSH
7575: LD_VAR 0 15
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 101
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 69
7605: ST_TO_ADDR
// for i in enemy do
7606: LD_ADDR_VAR 0 5
7610: PUSH
7611: LD_VAR 0 13
7615: PUSH
7616: FOR_IN
7617: IFFALSE 7648
// if IsInvisible ( i ) then
7619: LD_VAR 0 5
7623: PPUSH
7624: CALL_OW 571
7628: IFFALSE 7646
// enemy := enemy diff i ;
7630: LD_ADDR_VAR 0 13
7634: PUSH
7635: LD_VAR 0 13
7639: PUSH
7640: LD_VAR 0 5
7644: DIFF
7645: ST_TO_ADDR
7646: GO 7616
7648: POP
7649: POP
// if enemy then
7650: LD_VAR 0 13
7654: IFFALSE 7704
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7656: LD_VAR 0 1
7660: PPUSH
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 250
7670: PPUSH
7671: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7675: LD_VAR 0 1
7679: PPUSH
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 251
7689: PPUSH
7690: CALL_OW 232
// status = 2 ;
7694: LD_ADDR_VAR 0 12
7698: PUSH
7699: LD_INT 2
7701: ST_TO_ADDR
// end else
7702: GO 7902
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_VAR 0 11
7713: PUSH
7714: LD_INT 2
7716: ARRAY
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: PPUSH
7722: LD_VAR 0 11
7726: PUSH
7727: LD_INT 2
7729: ARRAY
7730: PUSH
7731: LD_INT 2
7733: ARRAY
7734: PPUSH
7735: CALL_OW 307
7739: PUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: CALL_OW 314
7749: NOT
7750: OR
7751: IFFALSE 7902
// begin wait ( 0 0$2 ) ;
7753: LD_INT 70
7755: PPUSH
7756: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7760: LD_VAR 0 11
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PUSH
7769: LD_INT 1
7771: PLUS
7772: PUSH
7773: LD_VAR 0 2
7777: GREATER
7778: IFFALSE 7803
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7780: LD_ADDR_VAR 0 11
7784: PUSH
7785: LD_VAR 0 11
7789: PPUSH
7790: LD_INT 1
7792: PPUSH
7793: LD_INT 1
7795: PPUSH
7796: CALL_OW 1
7800: ST_TO_ADDR
7801: GO 7834
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7803: LD_ADDR_VAR 0 11
7807: PUSH
7808: LD_VAR 0 11
7812: PPUSH
7813: LD_INT 1
7815: PPUSH
7816: LD_VAR 0 11
7820: PUSH
7821: LD_INT 1
7823: ARRAY
7824: PUSH
7825: LD_INT 1
7827: PLUS
7828: PPUSH
7829: CALL_OW 1
7833: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7834: LD_ADDR_VAR 0 11
7838: PUSH
7839: LD_VAR 0 11
7843: PPUSH
7844: LD_INT 2
7846: PPUSH
7847: LD_VAR 0 2
7851: PUSH
7852: LD_VAR 0 11
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: ARRAY
7861: PPUSH
7862: CALL_OW 1
7866: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: LD_VAR 0 11
7876: PUSH
7877: LD_INT 2
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 11
7889: PUSH
7890: LD_INT 2
7892: ARRAY
7893: PUSH
7894: LD_INT 2
7896: ARRAY
7897: PPUSH
7898: CALL_OW 114
// end ; end ; end ; if status = 2 then
7902: LD_VAR 0 12
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 8131
// begin if GetLives ( unit ) < 650 and safe_place then
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 256
7921: PUSH
7922: LD_INT 650
7924: LESS
7925: PUSH
7926: LD_VAR 0 16
7930: AND
7931: IFFALSE 7943
// begin status = 3 ;
7933: LD_ADDR_VAR 0 12
7937: PUSH
7938: LD_INT 3
7940: ST_TO_ADDR
// continue ;
7941: GO 7299
// end ; x := GetRememberedX ( unit ) ;
7943: LD_ADDR_VAR 0 6
7947: PUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 252
7957: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7958: LD_ADDR_VAR 0 7
7962: PUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 253
7972: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7973: LD_ADDR_VAR 0 13
7977: PUSH
7978: LD_INT 81
7980: PUSH
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 255
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 92
7997: PUSH
7998: LD_VAR 0 6
8002: PUSH
8003: LD_VAR 0 7
8007: PUSH
8008: LD_VAR 0 15
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 101
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: ST_TO_ADDR
// if enemy then
8039: LD_VAR 0 13
8043: IFFALSE 8114
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8045: LD_ADDR_VAR 0 14
8049: PUSH
8050: LD_VAR 0 13
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 74
8064: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8065: LD_VAR 0 14
8069: PPUSH
8070: LD_VAR 0 6
8074: PPUSH
8075: LD_VAR 0 7
8079: PPUSH
8080: CALL_OW 297
8084: PUSH
8085: LD_VAR 0 15
8089: PUSH
8090: LD_VAR 0 17
8094: PLUS
8095: LESS
8096: IFFALSE 8112
// ComAttackUnit ( unit , e ) ;
8098: LD_VAR 0 1
8102: PPUSH
8103: LD_VAR 0 14
8107: PPUSH
8108: CALL_OW 115
// end else
8112: GO 8131
// begin ComStop ( unit ) ;
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 141
// status = 5 ;
8123: LD_ADDR_VAR 0 12
8127: PUSH
8128: LD_INT 5
8130: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8131: LD_VAR 0 12
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: PUSH
8140: LD_VAR 0 16
8144: AND
8145: IFFALSE 8231
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_VAR 0 16
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: LD_VAR 0 16
8165: PUSH
8166: LD_INT 2
8168: ARRAY
8169: PPUSH
8170: CALL_OW 111
// wait ( 0 0$1 ) ;
8174: LD_INT 35
8176: PPUSH
8177: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8181: LD_VAR 0 1
8185: PPUSH
8186: LD_VAR 0 16
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: LD_VAR 0 16
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PPUSH
8204: CALL_OW 297
8208: PUSH
8209: LD_INT 4
8211: LESS
8212: IFFALSE 8147
// ComStop ( unit ) ;
8214: LD_VAR 0 1
8218: PPUSH
8219: CALL_OW 141
// status = 4 ;
8223: LD_ADDR_VAR 0 12
8227: PUSH
8228: LD_INT 4
8230: ST_TO_ADDR
// end ; if status = 4 then
8231: LD_VAR 0 12
8235: PUSH
8236: LD_INT 4
8238: EQUAL
8239: IFFALSE 8271
// begin repeat wait ( 0 0$1 ) ;
8241: LD_INT 35
8243: PPUSH
8244: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8248: LD_VAR 0 1
8252: PPUSH
8253: CALL_OW 256
8257: PUSH
8258: LD_INT 1000
8260: EQUAL
8261: IFFALSE 8241
// status = 5 ;
8263: LD_ADDR_VAR 0 12
8267: PUSH
8268: LD_INT 5
8270: ST_TO_ADDR
// end ; if status = 5 then
8271: LD_VAR 0 12
8275: PUSH
8276: LD_INT 5
8278: EQUAL
8279: IFFALSE 8561
// begin p := 999 ;
8281: LD_ADDR_VAR 0 9
8285: PUSH
8286: LD_INT 999
8288: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8289: LD_ADDR_VAR 0 14
8293: PUSH
8294: LD_VAR 0 11
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: PUSH
8303: LD_INT 1
8305: ARRAY
8306: PUSH
8307: LD_VAR 0 11
8311: PUSH
8312: LD_INT 2
8314: ARRAY
8315: PUSH
8316: LD_INT 2
8318: ARRAY
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: ST_TO_ADDR
// c := 1 ;
8324: LD_ADDR_VAR 0 8
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8332: LD_ADDR_VAR 0 5
8336: PUSH
8337: DOUBLE
8338: LD_INT 1
8340: DEC
8341: ST_TO_ADDR
8342: LD_VAR 0 11
8346: PUSH
8347: LD_INT 2
8349: ARRAY
8350: PUSH
8351: LD_INT 2
8353: DIV
8354: PUSH
8355: FOR_TO
8356: IFFALSE 8488
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8358: LD_ADDR_VAR 0 6
8362: PUSH
8363: LD_VAR 0 1
8367: PPUSH
8368: LD_VAR 0 11
8372: PUSH
8373: LD_INT 2
8375: ARRAY
8376: PUSH
8377: LD_VAR 0 8
8381: ARRAY
8382: PPUSH
8383: LD_VAR 0 11
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PUSH
8392: LD_VAR 0 8
8396: PUSH
8397: LD_INT 1
8399: PLUS
8400: ARRAY
8401: PPUSH
8402: CALL_OW 297
8406: ST_TO_ADDR
// if x < p then
8407: LD_VAR 0 6
8411: PUSH
8412: LD_VAR 0 9
8416: LESS
8417: IFFALSE 8472
// begin p := x ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_VAR 0 6
8428: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8429: LD_ADDR_VAR 0 14
8433: PUSH
8434: LD_VAR 0 11
8438: PUSH
8439: LD_INT 2
8441: ARRAY
8442: PUSH
8443: LD_VAR 0 8
8447: ARRAY
8448: PUSH
8449: LD_VAR 0 11
8453: PUSH
8454: LD_INT 2
8456: ARRAY
8457: PUSH
8458: LD_VAR 0 8
8462: PUSH
8463: LD_INT 1
8465: PLUS
8466: ARRAY
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: ST_TO_ADDR
// end ; c = c + 2 ;
8472: LD_ADDR_VAR 0 8
8476: PUSH
8477: LD_VAR 0 8
8481: PUSH
8482: LD_INT 2
8484: PLUS
8485: ST_TO_ADDR
// end ;
8486: GO 8355
8488: POP
8489: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_VAR 0 14
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: LD_VAR 0 14
8508: PUSH
8509: LD_INT 2
8511: ARRAY
8512: PPUSH
8513: CALL_OW 111
// wait ( 0 0$1 ) ;
8517: LD_INT 35
8519: PPUSH
8520: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8524: LD_VAR 0 1
8528: PPUSH
8529: LD_VAR 0 14
8533: PUSH
8534: LD_INT 1
8536: ARRAY
8537: PPUSH
8538: LD_VAR 0 14
8542: PUSH
8543: LD_INT 2
8545: ARRAY
8546: PPUSH
8547: CALL_OW 307
8551: IFFALSE 8490
// status = 1 ;
8553: LD_ADDR_VAR 0 12
8557: PUSH
8558: LD_INT 1
8560: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 301
8570: IFFALSE 7299
// end ;
8572: LD_VAR 0 4
8576: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8587: LD_VAR 0 1
8591: NOT
8592: PUSH
8593: LD_VAR 0 3
8597: NOT
8598: OR
8599: PUSH
8600: LD_VAR 0 4
8604: PUSH
8605: LD_INT 1
8607: PUSH
8608: LD_INT 2
8610: PUSH
8611: LD_INT 0
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: IN
8619: NOT
8620: OR
8621: PUSH
8622: LD_VAR 0 6
8626: NOT
8627: OR
8628: PUSH
8629: LD_VAR 0 7
8633: NOT
8634: OR
8635: IFFALSE 8639
// exit ;
8637: GO 9030
// sex_id :=  ;
8639: LD_ADDR_VAR 0 14
8643: PUSH
8644: LD_STRING 
8646: ST_TO_ADDR
// case class of 1 :
8647: LD_VAR 0 5
8651: PUSH
8652: LD_INT 1
8654: DOUBLE
8655: EQUAL
8656: IFTRUE 8660
8658: GO 8671
8660: POP
// class_id := Sol ; 2 :
8661: LD_ADDR_VAR 0 15
8665: PUSH
8666: LD_STRING Sol
8668: ST_TO_ADDR
8669: GO 8729
8671: LD_INT 2
8673: DOUBLE
8674: EQUAL
8675: IFTRUE 8679
8677: GO 8690
8679: POP
// class_id := Eng ; 3 :
8680: LD_ADDR_VAR 0 15
8684: PUSH
8685: LD_STRING Eng
8687: ST_TO_ADDR
8688: GO 8729
8690: LD_INT 3
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8709
8698: POP
// class_id := Mech ; 4 :
8699: LD_ADDR_VAR 0 15
8703: PUSH
8704: LD_STRING Mech
8706: ST_TO_ADDR
8707: GO 8729
8709: LD_INT 4
8711: DOUBLE
8712: EQUAL
8713: IFTRUE 8717
8715: GO 8728
8717: POP
// class_id := Sci ; end ;
8718: LD_ADDR_VAR 0 15
8722: PUSH
8723: LD_STRING Sci
8725: ST_TO_ADDR
8726: GO 8729
8728: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8729: LD_ADDR_VAR 0 11
8733: PUSH
8734: LD_VAR 0 1
8738: PPUSH
8739: LD_INT 25
8741: PUSH
8742: LD_VAR 0 5
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PPUSH
8751: CALL_OW 72
8755: ST_TO_ADDR
// if tmp then
8756: LD_VAR 0 11
8760: IFFALSE 8772
// units := tmp ;
8762: LD_ADDR_VAR 0 1
8766: PUSH
8767: LD_VAR 0 11
8771: ST_TO_ADDR
// if sex then
8772: LD_VAR 0 4
8776: IFFALSE 8832
// begin if sex = sex_female then
8778: LD_VAR 0 4
8782: PUSH
8783: LD_INT 2
8785: EQUAL
8786: IFFALSE 8796
// sex_id := F ;
8788: LD_ADDR_VAR 0 14
8792: PUSH
8793: LD_STRING F
8795: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8796: LD_ADDR_VAR 0 1
8800: PUSH
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_INT 26
8808: PUSH
8809: LD_VAR 0 4
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 72
8822: ST_TO_ADDR
// if not units then
8823: LD_VAR 0 1
8827: NOT
8828: IFFALSE 8832
// exit ;
8830: GO 9030
// end ; unit_id := id ;
8832: LD_ADDR_VAR 0 12
8836: PUSH
8837: LD_VAR 0 6
8841: ST_TO_ADDR
// if unit_id > units then
8842: LD_VAR 0 12
8846: PUSH
8847: LD_VAR 0 1
8851: GREATER
8852: IFFALSE 8862
// unit_id := 1 ;
8854: LD_ADDR_VAR 0 12
8858: PUSH
8859: LD_INT 1
8861: ST_TO_ADDR
// if not units [ unit_id ] then
8862: LD_VAR 0 1
8866: PUSH
8867: LD_VAR 0 12
8871: ARRAY
8872: NOT
8873: IFFALSE 8877
// exit ;
8875: GO 9030
// unit := units [ unit_id ] ;
8877: LD_ADDR_VAR 0 10
8881: PUSH
8882: LD_VAR 0 1
8886: PUSH
8887: LD_VAR 0 12
8891: ARRAY
8892: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8893: LD_ADDR_VAR 0 13
8897: PUSH
8898: LD_STRING D
8900: PUSH
8901: LD_VAR 0 3
8905: STR
8906: PUSH
8907: LD_STRING -
8909: STR
8910: PUSH
8911: LD_VAR 0 14
8915: STR
8916: PUSH
8917: LD_VAR 0 15
8921: STR
8922: PUSH
8923: LD_VAR 0 6
8927: STR
8928: PUSH
8929: LD_STRING -
8931: STR
8932: PUSH
8933: LD_VAR 0 7
8937: STR
8938: ST_TO_ADDR
// case type of 0 :
8939: LD_VAR 0 2
8943: PUSH
8944: LD_INT 0
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8969
8952: POP
// Say ( unit , dialog_id ) ; 1 :
8953: LD_VAR 0 10
8957: PPUSH
8958: LD_VAR 0 13
8962: PPUSH
8963: CALL_OW 88
8967: GO 9020
8969: LD_INT 1
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 8994
8977: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8978: LD_VAR 0 10
8982: PPUSH
8983: LD_VAR 0 13
8987: PPUSH
8988: CALL_OW 94
8992: GO 9020
8994: LD_INT 2
8996: DOUBLE
8997: EQUAL
8998: IFTRUE 9002
9000: GO 9019
9002: POP
// ForceSay ( unit , dialog_id ) ; end ;
9003: LD_VAR 0 10
9007: PPUSH
9008: LD_VAR 0 13
9012: PPUSH
9013: CALL_OW 91
9017: GO 9020
9019: POP
// result := unit ;
9020: LD_ADDR_VAR 0 8
9024: PUSH
9025: LD_VAR 0 10
9029: ST_TO_ADDR
// end ;
9030: LD_VAR 0 8
9034: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9035: LD_INT 0
9037: PPUSH
9038: PPUSH
9039: PPUSH
// result := false ;
9040: LD_ADDR_VAR 0 4
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9048: LD_VAR 0 1
9052: NOT
9053: PUSH
9054: LD_VAR 0 2
9058: NOT
9059: OR
9060: PUSH
9061: LD_VAR 0 1
9065: PPUSH
9066: CALL_OW 310
9070: OR
9071: IFFALSE 9075
// exit ;
9073: GO 9279
// if distance < 0 then
9075: LD_VAR 0 3
9079: PUSH
9080: LD_INT 0
9082: LESS
9083: IFFALSE 9093
// distance := 0 ;
9085: LD_ADDR_VAR 0 3
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9093: LD_ADDR_VAR 0 6
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 266
9107: PPUSH
9108: LD_VAR 0 2
9112: PPUSH
9113: CALL_OW 250
9117: PPUSH
9118: LD_VAR 0 2
9122: PPUSH
9123: CALL_OW 251
9127: PPUSH
9128: LD_VAR 0 2
9132: PPUSH
9133: CALL_OW 254
9137: PPUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 248
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL 49530 0 6
9155: ST_TO_ADDR
// if not entrance then
9156: LD_VAR 0 6
9160: NOT
9161: IFFALSE 9165
// exit ;
9163: GO 9279
// for i in entrance do
9165: LD_ADDR_VAR 0 5
9169: PUSH
9170: LD_VAR 0 6
9174: PUSH
9175: FOR_IN
9176: IFFALSE 9277
// begin if not distance then
9178: LD_VAR 0 3
9182: NOT
9183: IFFALSE 9228
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9185: LD_VAR 0 1
9189: PPUSH
9190: LD_VAR 0 5
9194: PUSH
9195: LD_INT 1
9197: ARRAY
9198: PPUSH
9199: LD_VAR 0 5
9203: PUSH
9204: LD_INT 2
9206: ARRAY
9207: PPUSH
9208: CALL_OW 307
9212: IFFALSE 9226
// begin result := true ;
9214: LD_ADDR_VAR 0 4
9218: PUSH
9219: LD_INT 1
9221: ST_TO_ADDR
// exit ;
9222: POP
9223: POP
9224: GO 9279
// end ; end else
9226: GO 9275
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9228: LD_VAR 0 1
9232: PPUSH
9233: LD_VAR 0 5
9237: PUSH
9238: LD_INT 1
9240: ARRAY
9241: PPUSH
9242: LD_VAR 0 5
9246: PUSH
9247: LD_INT 2
9249: ARRAY
9250: PPUSH
9251: CALL_OW 297
9255: PUSH
9256: LD_VAR 0 3
9260: LESSEQUAL
9261: IFFALSE 9275
// begin result := true ;
9263: LD_ADDR_VAR 0 4
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// exit ;
9271: POP
9272: POP
9273: GO 9279
// end ; end ; end ;
9275: GO 9175
9277: POP
9278: POP
// end ;
9279: LD_VAR 0 4
9283: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9284: LD_INT 0
9286: PPUSH
9287: PPUSH
9288: PPUSH
// result := false ;
9289: LD_ADDR_VAR 0 3
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9297: LD_VAR 0 1
9301: NOT
9302: PUSH
9303: LD_VAR 0 2
9307: NOT
9308: OR
9309: PUSH
9310: LD_VAR 0 1
9314: PPUSH
9315: CALL_OW 302
9319: NOT
9320: OR
9321: PUSH
9322: LD_VAR 0 2
9326: PPUSH
9327: CALL_OW 302
9331: NOT
9332: OR
9333: IFFALSE 9337
// exit ;
9335: GO 9498
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9337: LD_VAR 0 1
9341: PPUSH
9342: LD_INT 81
9344: PUSH
9345: LD_VAR 0 1
9349: PPUSH
9350: CALL_OW 255
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 21
9364: PUSH
9365: LD_INT 3
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PPUSH
9380: CALL_OW 69
9384: PPUSH
9385: LD_VAR 0 1
9389: PPUSH
9390: CALL_OW 74
9394: PPUSH
9395: CALL_OW 296
9399: PUSH
9400: LD_INT 8
9402: LESS
9403: IFFALSE 9407
// exit ;
9405: GO 9498
// building := IsInUnit ( unit2 ) ;
9407: LD_ADDR_VAR 0 5
9411: PUSH
9412: LD_VAR 0 2
9416: PPUSH
9417: CALL_OW 310
9421: ST_TO_ADDR
// if building then
9422: LD_VAR 0 5
9426: IFFALSE 9453
// result := IsNearbyEntrance ( unit , building , 2 ) else
9428: LD_ADDR_VAR 0 3
9432: PUSH
9433: LD_VAR 0 1
9437: PPUSH
9438: LD_VAR 0 5
9442: PPUSH
9443: LD_INT 2
9445: PPUSH
9446: CALL 9035 0 3
9450: ST_TO_ADDR
9451: GO 9498
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9453: LD_ADDR_VAR 0 3
9457: PUSH
9458: LD_VAR 0 1
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: CALL_OW 296
9472: PUSH
9473: LD_INT 6
9475: LESS
9476: PUSH
9477: LD_VAR 0 2
9481: PPUSH
9482: CALL_OW 255
9486: PPUSH
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 292
9496: AND
9497: ST_TO_ADDR
// end ;
9498: LD_VAR 0 3
9502: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9503: LD_INT 0
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
// uc_side = 0 ;
9509: LD_ADDR_OWVAR 20
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// uc_nation = 0 ;
9517: LD_ADDR_OWVAR 21
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// nat_area := nature_area ;
9525: LD_ADDR_VAR 0 4
9529: PUSH
9530: LD_INT 24
9532: ST_TO_ADDR
// InitHc ;
9533: CALL_OW 19
// for i = 1 to 4 do
9537: LD_ADDR_VAR 0 2
9541: PUSH
9542: DOUBLE
9543: LD_INT 1
9545: DEC
9546: ST_TO_ADDR
9547: LD_INT 4
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9598
// begin hc_class = 18 ;
9553: LD_ADDR_OWVAR 28
9557: PUSH
9558: LD_INT 18
9560: ST_TO_ADDR
// hc_gallery =  ;
9561: LD_ADDR_OWVAR 33
9565: PUSH
9566: LD_STRING 
9568: ST_TO_ADDR
// animal := CreateHuman ;
9569: LD_ADDR_VAR 0 3
9573: PUSH
9574: CALL_OW 44
9578: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9579: LD_VAR 0 3
9583: PPUSH
9584: LD_VAR 0 4
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// end ;
9596: GO 9550
9598: POP
9599: POP
// for i = 1 to 3 do
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: DOUBLE
9606: LD_INT 1
9608: DEC
9609: ST_TO_ADDR
9610: LD_INT 3
9612: PUSH
9613: FOR_TO
9614: IFFALSE 9708
// begin hc_class = class_apeman ;
9616: LD_ADDR_OWVAR 28
9620: PUSH
9621: LD_INT 12
9623: ST_TO_ADDR
// hc_gallery =  ;
9624: LD_ADDR_OWVAR 33
9628: PUSH
9629: LD_STRING 
9631: ST_TO_ADDR
// hc_agressivity = 0 ;
9632: LD_ADDR_OWVAR 35
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9640: LD_ADDR_OWVAR 31
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: CALL_OW 12
9655: PUSH
9656: LD_INT 1
9658: PPUSH
9659: LD_INT 3
9661: PPUSH
9662: CALL_OW 12
9666: PUSH
9667: LD_INT 0
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: ST_TO_ADDR
// animal := CreateHuman ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: CALL_OW 44
9688: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9689: LD_VAR 0 3
9693: PPUSH
9694: LD_VAR 0 4
9698: PPUSH
9699: LD_INT 0
9701: PPUSH
9702: CALL_OW 49
// end ;
9706: GO 9613
9708: POP
9709: POP
// for i = 1 to 3 do
9710: LD_ADDR_VAR 0 2
9714: PUSH
9715: DOUBLE
9716: LD_INT 1
9718: DEC
9719: ST_TO_ADDR
9720: LD_INT 3
9722: PUSH
9723: FOR_TO
9724: IFFALSE 9771
// begin hc_class = 13 ;
9726: LD_ADDR_OWVAR 28
9730: PUSH
9731: LD_INT 13
9733: ST_TO_ADDR
// hc_gallery =  ;
9734: LD_ADDR_OWVAR 33
9738: PUSH
9739: LD_STRING 
9741: ST_TO_ADDR
// animal := CreateHuman ;
9742: LD_ADDR_VAR 0 3
9746: PUSH
9747: CALL_OW 44
9751: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9752: LD_VAR 0 3
9756: PPUSH
9757: LD_VAR 0 4
9761: PPUSH
9762: LD_INT 0
9764: PPUSH
9765: CALL_OW 49
// end ;
9769: GO 9723
9771: POP
9772: POP
// for i = 1 to 3 do
9773: LD_ADDR_VAR 0 2
9777: PUSH
9778: DOUBLE
9779: LD_INT 1
9781: DEC
9782: ST_TO_ADDR
9783: LD_INT 3
9785: PUSH
9786: FOR_TO
9787: IFFALSE 9832
// begin hc_class = 20 ;
9789: LD_ADDR_OWVAR 28
9793: PUSH
9794: LD_INT 20
9796: ST_TO_ADDR
// hc_gallery =  ;
9797: LD_ADDR_OWVAR 33
9801: PUSH
9802: LD_STRING 
9804: ST_TO_ADDR
// animal := CreateHuman ;
9805: LD_ADDR_VAR 0 3
9809: PUSH
9810: CALL_OW 44
9814: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9815: LD_VAR 0 3
9819: PPUSH
9820: LD_INT 4
9822: PPUSH
9823: LD_INT 0
9825: PPUSH
9826: CALL_OW 49
// end ;
9830: GO 9786
9832: POP
9833: POP
// end ; end_of_file
9834: LD_VAR 0 1
9838: RET
// export function Action ; begin
9839: LD_INT 0
9841: PPUSH
// InGameOn ;
9842: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9846: LD_EXP 14
9850: PPUSH
9851: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9855: LD_EXP 14
9859: PPUSH
9860: LD_STRING D1-JMM-1
9862: PPUSH
9863: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9867: LD_EXP 15
9871: PPUSH
9872: LD_STRING D1-Roth-1
9874: PPUSH
9875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9879: LD_EXP 14
9883: PPUSH
9884: LD_STRING D1-JMM-2
9886: PPUSH
9887: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9891: LD_EXP 15
9895: PPUSH
9896: LD_STRING D1-Roth-2
9898: PPUSH
9899: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9903: LD_EXP 14
9907: PPUSH
9908: LD_STRING D1-JMM-3
9910: PPUSH
9911: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9915: LD_EXP 15
9919: PPUSH
9920: LD_STRING D1-Roth-3
9922: PPUSH
9923: CALL_OW 88
// ComInvisible ( Roth ) ;
9927: LD_EXP 15
9931: PPUSH
9932: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9936: LD_INT 46
9938: PPUSH
9939: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9943: LD_EXP 14
9947: PPUSH
9948: LD_STRING D1-JMM-4
9950: PPUSH
9951: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9955: LD_INT 10
9957: PPUSH
9958: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9962: LD_EXP 15
9966: PPUSH
9967: LD_EXP 14
9971: PPUSH
9972: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9976: LD_EXP 14
9980: PPUSH
9981: LD_STRING D1-JMM-4a
9983: PPUSH
9984: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9988: LD_EXP 15
9992: PPUSH
9993: LD_STRING D1-Roth-4
9995: PPUSH
9996: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10000: LD_EXP 14
10004: PPUSH
10005: LD_STRING D1-JMM-5
10007: PPUSH
10008: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10012: LD_EXP 15
10016: PPUSH
10017: LD_STRING D1-Roth-5
10019: PPUSH
10020: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10024: LD_EXP 14
10028: PPUSH
10029: LD_STRING D1-JMM-6
10031: PPUSH
10032: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-6
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-7
10055: PPUSH
10056: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10060: LD_EXP 16
10064: PPUSH
10065: LD_EXP 14
10069: PPUSH
10070: CALL_OW 250
10074: PPUSH
10075: LD_EXP 14
10079: PPUSH
10080: CALL_OW 251
10084: PPUSH
10085: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10089: LD_EXP 15
10093: PPUSH
10094: LD_STRING D1-Roth-7
10096: PPUSH
10097: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10101: LD_INT 10
10103: PPUSH
10104: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10108: LD_EXP 16
10112: PPUSH
10113: LD_EXP 14
10117: PPUSH
10118: CALL_OW 296
10122: PUSH
10123: LD_INT 6
10125: LESS
10126: IFFALSE 10101
// ComTurnUnit ( Powell , JMM ) ;
10128: LD_EXP 16
10132: PPUSH
10133: LD_EXP 14
10137: PPUSH
10138: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10142: LD_EXP 16
10146: PPUSH
10147: LD_STRING D1-Pow-7
10149: PPUSH
10150: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10154: LD_EXP 14
10158: PPUSH
10159: LD_EXP 16
10163: PPUSH
10164: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10168: LD_EXP 15
10172: PPUSH
10173: LD_EXP 16
10177: PPUSH
10178: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10182: LD_EXP 14
10186: PPUSH
10187: LD_STRING D1-JMM-8
10189: PPUSH
10190: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10194: LD_EXP 16
10198: PPUSH
10199: LD_STRING D1-Pow-8
10201: PPUSH
10202: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10206: LD_EXP 14
10210: PPUSH
10211: LD_STRING D1-JMM-9
10213: PPUSH
10214: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10218: LD_EXP 16
10222: PPUSH
10223: LD_INT 124
10225: PPUSH
10226: LD_INT 61
10228: PPUSH
10229: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10233: LD_INT 35
10235: PPUSH
10236: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10240: LD_EXP 14
10244: PPUSH
10245: LD_EXP 16
10249: PPUSH
10250: CALL_OW 296
10254: PUSH
10255: LD_INT 6
10257: GREATER
10258: IFFALSE 10233
// SayRadio ( Powell , D1-Pow-9 ) ;
10260: LD_EXP 16
10264: PPUSH
10265: LD_STRING D1-Pow-9
10267: PPUSH
10268: CALL_OW 94
// RemoveUnit ( Powell ) ;
10272: LD_EXP 16
10276: PPUSH
10277: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10281: LD_EXP 16
10285: PPUSH
10286: LD_INT 18
10288: PPUSH
10289: CALL_OW 52
// if Joan and not Joan in selected then
10293: LD_EXP 36
10297: PUSH
10298: LD_EXP 36
10302: PUSH
10303: LD_EXP 3
10307: IN
10308: NOT
10309: AND
10310: IFFALSE 10324
// SayRadio ( Joan , D1-Joan-9 ) ;
10312: LD_EXP 36
10316: PPUSH
10317: LD_STRING D1-Joan-9
10319: PPUSH
10320: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10324: LD_EXP 15
10328: PPUSH
10329: LD_EXP 14
10333: PPUSH
10334: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10338: LD_EXP 14
10342: PPUSH
10343: LD_EXP 15
10347: PPUSH
10348: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10352: LD_EXP 15
10356: PPUSH
10357: LD_STRING D1-Roth-9
10359: PPUSH
10360: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10364: LD_EXP 14
10368: PPUSH
10369: LD_STRING D1-JMM-10
10371: PPUSH
10372: CALL_OW 88
// InGameOff ;
10376: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10380: LD_STRING M1
10382: PPUSH
10383: CALL_OW 337
// if Difficulty < 3 then
10387: LD_OWVAR 67
10391: PUSH
10392: LD_INT 3
10394: LESS
10395: IFFALSE 10407
// ChangeSideFog ( 4 , 7 ) ;
10397: LD_INT 4
10399: PPUSH
10400: LD_INT 7
10402: PPUSH
10403: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10407: LD_STRING enableBioCharacter(BIO_ROTH)
10409: PPUSH
10410: CALL_OW 559
// SaveForQuickRestart ;
10414: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10418: LD_INT 7
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: LD_INT 2
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 80
// wait ( 0 0$3 ) ;
10434: LD_INT 105
10436: PPUSH
10437: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10441: LD_EXP 15
10445: PPUSH
10446: LD_INT 124
10448: PPUSH
10449: LD_INT 18
10451: PPUSH
10452: CALL_OW 111
// AddComInvisible ( Roth ) ;
10456: LD_EXP 15
10460: PPUSH
10461: CALL_OW 212
// wait ( 0 0$30 ) ;
10465: LD_INT 1050
10467: PPUSH
10468: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10472: LD_EXP 15
10476: PPUSH
10477: LD_INT 2100
10479: PPUSH
10480: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10484: LD_EXP 15
10488: PPUSH
10489: LD_INT 156
10491: PPUSH
10492: LD_INT 20
10494: PPUSH
10495: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_INT 178
10506: PPUSH
10507: LD_INT 42
10509: PPUSH
10510: CALL_OW 171
// AddComInvisible ( Roth ) ;
10514: LD_EXP 15
10518: PPUSH
10519: CALL_OW 212
// end ;
10523: LD_VAR 0 1
10527: RET
// every 0 0$1 do var i , tmp ;
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
10534: PPUSH
// begin tmp := selected union friends ;
10535: LD_ADDR_VAR 0 2
10539: PUSH
10540: LD_EXP 3
10544: PUSH
10545: LD_EXP 4
10549: UNION
10550: ST_TO_ADDR
// if gamma_commander = 1 then
10551: LD_EXP 10
10555: PUSH
10556: LD_INT 1
10558: EQUAL
10559: IFFALSE 10577
// tmp := tmp union Donaldson ;
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: LD_VAR 0 2
10570: PUSH
10571: LD_EXP 24
10575: UNION
10576: ST_TO_ADDR
// if gamma_commander = 2 then
10577: LD_EXP 10
10581: PUSH
10582: LD_INT 2
10584: EQUAL
10585: IFFALSE 10603
// tmp := tmp union Brown ;
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: LD_VAR 0 2
10596: PUSH
10597: LD_EXP 28
10601: UNION
10602: ST_TO_ADDR
// if not tmp then
10603: LD_VAR 0 2
10607: NOT
10608: IFFALSE 10612
// exit ;
10610: GO 10684
// repeat wait ( 0 0$1 ) ;
10612: LD_INT 35
10614: PPUSH
10615: CALL_OW 67
// for i in tmp do
10619: LD_ADDR_VAR 0 1
10623: PUSH
10624: LD_VAR 0 2
10628: PUSH
10629: FOR_IN
10630: IFFALSE 10675
// if CanSpot ( JMM , i ) then
10632: LD_EXP 14
10636: PPUSH
10637: LD_VAR 0 1
10641: PPUSH
10642: CALL 9284 0 2
10646: IFFALSE 10673
// begin tmp := tmp diff i ;
10648: LD_ADDR_VAR 0 2
10652: PUSH
10653: LD_VAR 0 2
10657: PUSH
10658: LD_VAR 0 1
10662: DIFF
10663: ST_TO_ADDR
// Spot ( i ) ;
10664: LD_VAR 0 1
10668: PPUSH
10669: CALL 10687 0 1
// end ;
10673: GO 10629
10675: POP
10676: POP
// until not tmp ;
10677: LD_VAR 0 2
10681: NOT
10682: IFFALSE 10612
// end ;
10684: PPOPN 2
10686: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10687: LD_INT 0
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10693: LD_VAR 0 1
10697: NOT
10698: PUSH
10699: LD_VAR 0 1
10703: PPUSH
10704: CALL_OW 255
10708: PUSH
10709: LD_INT 4
10711: NONEQUAL
10712: OR
10713: PUSH
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL_OW 555
10723: OR
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: CALL_OW 302
10734: NOT
10735: OR
10736: IFFALSE 10740
// exit ;
10738: GO 12622
// InGameOn ;
10740: CALL_OW 8
// side := 7 ;
10744: LD_ADDR_VAR 0 4
10748: PUSH
10749: LD_INT 7
10751: ST_TO_ADDR
// joined := false ;
10752: LD_ADDR_VAR 0 5
10756: PUSH
10757: LD_INT 0
10759: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10760: LD_ADDR_VAR 0 3
10764: PUSH
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 310
10774: ST_TO_ADDR
// if building then
10775: LD_VAR 0 3
10779: IFFALSE 10838
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10781: LD_EXP 14
10785: PPUSH
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 255
10795: PPUSH
10796: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10800: LD_EXP 14
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: CALL_OW 120
// repeat wait ( 3 ) ;
10814: LD_INT 3
10816: PPUSH
10817: CALL_OW 67
// until IsInUnit ( JMM ) ;
10821: LD_EXP 14
10825: PPUSH
10826: CALL_OW 310
10830: IFFALSE 10814
// DialogueOn ;
10832: CALL_OW 6
// end else
10836: GO 10870
// begin ComTurnUnit ( JMM , unit ) ;
10838: LD_EXP 14
10842: PPUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_EXP 14
10861: PPUSH
10862: CALL_OW 119
// DialogueOn ;
10866: CALL_OW 6
// end ; if unit = Joan then
10870: LD_VAR 0 1
10874: PUSH
10875: LD_EXP 36
10879: EQUAL
10880: IFFALSE 10990
// begin joined := true ;
10882: LD_ADDR_VAR 0 5
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if Joan in selected then
10890: LD_EXP 36
10894: PUSH
10895: LD_EXP 3
10899: IN
10900: IFFALSE 10928
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10902: LD_EXP 36
10906: PPUSH
10907: LD_STRING D3-Joan-Joan-1
10909: PPUSH
10910: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10914: LD_EXP 14
10918: PPUSH
10919: LD_STRING D3-Joan-JMM-1
10921: PPUSH
10922: CALL_OW 88
// end else
10926: GO 10988
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10928: LD_EXP 36
10932: PPUSH
10933: LD_STRING D4-Joan-Joan-1
10935: PPUSH
10936: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10940: LD_EXP 14
10944: PPUSH
10945: LD_STRING D4-Joan-JMM-1
10947: PPUSH
10948: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10952: LD_EXP 36
10956: PPUSH
10957: LD_STRING D4-Joan-Joan-2
10959: PPUSH
10960: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10964: LD_EXP 14
10968: PPUSH
10969: LD_STRING D4-Joan-JMM-2
10971: PPUSH
10972: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_STRING D4-Joan-Joan-3
10983: PPUSH
10984: CALL_OW 88
// end ; end else
10988: GO 12430
// if unit = Lisa then
10990: LD_VAR 0 1
10994: PUSH
10995: LD_EXP 23
10999: EQUAL
11000: IFFALSE 11192
// begin if Lisa in selected then
11002: LD_EXP 23
11006: PUSH
11007: LD_EXP 3
11011: IN
11012: IFFALSE 11125
// begin if GetSide ( Joan ) = 7 then
11014: LD_EXP 36
11018: PPUSH
11019: CALL_OW 255
11023: PUSH
11024: LD_INT 7
11026: EQUAL
11027: IFFALSE 11091
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11029: LD_EXP 23
11033: PPUSH
11034: LD_STRING D3-LisaJ-Lisa-1
11036: PPUSH
11037: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11041: LD_EXP 14
11045: PPUSH
11046: LD_STRING D3-LisaJ-JMM-1
11048: PPUSH
11049: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11053: LD_EXP 23
11057: PPUSH
11058: LD_STRING D3-LisaJ-Lisa-2
11060: PPUSH
11061: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11065: LD_EXP 14
11069: PPUSH
11070: LD_STRING D3-LisaJ-JMM-2
11072: PPUSH
11073: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11077: LD_EXP 23
11081: PPUSH
11082: LD_STRING D3-LisaJ-Lisa-3
11084: PPUSH
11085: CALL_OW 88
// end else
11089: GO 11123
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11091: LD_EXP 23
11095: PPUSH
11096: LD_STRING D3-LisaL-Lisa-1
11098: PPUSH
11099: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11103: LD_EXP 14
11107: PPUSH
11108: LD_STRING D3-LisaL-JMM-1
11110: PPUSH
11111: CALL_OW 88
// joined := true ;
11115: LD_ADDR_VAR 0 5
11119: PUSH
11120: LD_INT 1
11122: ST_TO_ADDR
// end ; end else
11123: GO 11190
// begin if GetSide ( Joan ) = 7 then
11125: LD_EXP 36
11129: PPUSH
11130: CALL_OW 255
11134: PUSH
11135: LD_INT 7
11137: EQUAL
11138: IFFALSE 11178
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11140: LD_EXP 23
11144: PPUSH
11145: LD_STRING D4-LisaJ-Lisa-1
11147: PPUSH
11148: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11152: LD_EXP 14
11156: PPUSH
11157: LD_STRING D4-LisaJ-JMM-1
11159: PPUSH
11160: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11164: LD_EXP 23
11168: PPUSH
11169: LD_STRING D4-LisaJ-Lisa-2
11171: PPUSH
11172: CALL_OW 88
// end else
11176: GO 11190
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11178: LD_EXP 23
11182: PPUSH
11183: LD_STRING D4-LisaL-Lisa-1
11185: PPUSH
11186: CALL_OW 88
// end ; end ; end else
11190: GO 12430
// if unit = Frank then
11192: LD_VAR 0 1
11196: PUSH
11197: LD_EXP 33
11201: EQUAL
11202: IFFALSE 11342
// begin joined := true ;
11204: LD_ADDR_VAR 0 5
11208: PUSH
11209: LD_INT 1
11211: ST_TO_ADDR
// if Frank in selected then
11212: LD_EXP 33
11216: PUSH
11217: LD_EXP 3
11221: IN
11222: IFFALSE 11292
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11224: LD_EXP 33
11228: PPUSH
11229: LD_STRING D3-Frank-Frank-1
11231: PPUSH
11232: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11236: LD_EXP 14
11240: PPUSH
11241: LD_STRING D3-Frank-JMM-1
11243: PPUSH
11244: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11248: LD_EXP 33
11252: PPUSH
11253: LD_STRING D3-Frank-Frank-2
11255: PPUSH
11256: CALL_OW 88
// if reached_lab then
11260: LD_EXP 5
11264: IFFALSE 11290
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11266: LD_EXP 14
11270: PPUSH
11271: LD_STRING D3-Frank-JMM-2
11273: PPUSH
11274: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11278: LD_EXP 33
11282: PPUSH
11283: LD_STRING D3-Frank-Frank-3
11285: PPUSH
11286: CALL_OW 88
// end ; end else
11290: GO 11340
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11292: LD_EXP 33
11296: PPUSH
11297: LD_STRING D4-Frank-Frank-1
11299: PPUSH
11300: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11304: LD_EXP 14
11308: PPUSH
11309: LD_STRING D4-Frank-JMM-1
11311: PPUSH
11312: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11316: LD_EXP 33
11320: PPUSH
11321: LD_STRING D4-Frank-Frank-2
11323: PPUSH
11324: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11328: LD_EXP 14
11332: PPUSH
11333: LD_STRING D4-Frank-JMM-2
11335: PPUSH
11336: CALL_OW 88
// end ; end else
11340: GO 12430
// if unit = Brown then
11342: LD_VAR 0 1
11346: PUSH
11347: LD_EXP 28
11351: EQUAL
11352: IFFALSE 11448
// begin if Brown in selected or gamma_commander = 2 then
11354: LD_EXP 28
11358: PUSH
11359: LD_EXP 3
11363: IN
11364: PUSH
11365: LD_EXP 10
11369: PUSH
11370: LD_INT 2
11372: EQUAL
11373: OR
11374: IFFALSE 11410
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11376: LD_EXP 28
11380: PPUSH
11381: LD_STRING D3-Soldier1-Sol1-1
11383: PPUSH
11384: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11388: LD_EXP 14
11392: PPUSH
11393: LD_STRING D6-JMM-Brown-1
11395: PPUSH
11396: CALL_OW 88
// joined := true ;
11400: LD_ADDR_VAR 0 5
11404: PUSH
11405: LD_INT 1
11407: ST_TO_ADDR
// end else
11408: GO 11446
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11410: LD_EXP 28
11414: PPUSH
11415: LD_STRING D4-Soldier2-Sol1-1
11417: PPUSH
11418: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11422: LD_EXP 14
11426: PPUSH
11427: LD_STRING D4-Soldier1-JMM-1
11429: PPUSH
11430: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11434: LD_EXP 28
11438: PPUSH
11439: LD_STRING D4-Soldier2-Sol1-2
11441: PPUSH
11442: CALL_OW 88
// end ; end else
11446: GO 12430
// if unit = Donaldson then
11448: LD_VAR 0 1
11452: PUSH
11453: LD_EXP 24
11457: EQUAL
11458: IFFALSE 11554
// begin if Donaldson in selected or gamma_commander = 1 then
11460: LD_EXP 24
11464: PUSH
11465: LD_EXP 3
11469: IN
11470: PUSH
11471: LD_EXP 10
11475: PUSH
11476: LD_INT 1
11478: EQUAL
11479: OR
11480: IFFALSE 11516
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11482: LD_EXP 24
11486: PPUSH
11487: LD_STRING D3-Soldier2-FSol2-1
11489: PPUSH
11490: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11494: LD_EXP 14
11498: PPUSH
11499: LD_STRING D3-Soldier2-JMM-1
11501: PPUSH
11502: CALL_OW 88
// joined := true ;
11506: LD_ADDR_VAR 0 5
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// end else
11514: GO 11552
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11516: LD_EXP 24
11520: PPUSH
11521: LD_STRING D4-Soldier1-FSol1-1
11523: PPUSH
11524: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11528: LD_EXP 14
11532: PPUSH
11533: LD_STRING D4-Soldier1-JMM-1
11535: PPUSH
11536: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11540: LD_EXP 24
11544: PPUSH
11545: LD_STRING D4-Soldier1-FSol1-2
11547: PPUSH
11548: CALL_OW 88
// end ; end else
11552: GO 12430
// if unit = Cyrus then
11554: LD_VAR 0 1
11558: PUSH
11559: LD_EXP 26
11563: EQUAL
11564: IFFALSE 11638
// begin if Cyrus in selected then
11566: LD_EXP 26
11570: PUSH
11571: LD_EXP 3
11575: IN
11576: IFFALSE 11612
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11578: LD_EXP 26
11582: PPUSH
11583: LD_STRING D3-Cyrus-Cyrus-1
11585: PPUSH
11586: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11590: LD_EXP 14
11594: PPUSH
11595: LD_STRING D3-Cyrus-JMM-1
11597: PPUSH
11598: CALL_OW 88
// joined := true ;
11602: LD_ADDR_VAR 0 5
11606: PUSH
11607: LD_INT 1
11609: ST_TO_ADDR
// end else
11610: GO 11636
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11612: LD_EXP 26
11616: PPUSH
11617: LD_STRING D4-Cyrus-Cyrus-1
11619: PPUSH
11620: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11624: LD_EXP 14
11628: PPUSH
11629: LD_STRING D4-Cyrus-JMM-1
11631: PPUSH
11632: CALL_OW 88
// end ; end else
11636: GO 12430
// if unit = Bobby then
11638: LD_VAR 0 1
11642: PUSH
11643: LD_EXP 25
11647: EQUAL
11648: IFFALSE 11734
// begin if Bobby in selected then
11650: LD_EXP 25
11654: PUSH
11655: LD_EXP 3
11659: IN
11660: IFFALSE 11696
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11662: LD_EXP 25
11666: PPUSH
11667: LD_STRING D3-Bobby-Bobby-1
11669: PPUSH
11670: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11674: LD_EXP 14
11678: PPUSH
11679: LD_STRING D3-Bobby-JMM-1
11681: PPUSH
11682: CALL_OW 88
// joined := true ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// end else
11694: GO 11732
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11696: LD_EXP 25
11700: PPUSH
11701: LD_STRING D4-Bobby-Bobby-1
11703: PPUSH
11704: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11708: LD_EXP 14
11712: PPUSH
11713: LD_STRING D4-Bobby-JMM-1
11715: PPUSH
11716: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11720: LD_EXP 25
11724: PPUSH
11725: LD_STRING D4-Bobby-Bobby-2
11727: PPUSH
11728: CALL_OW 88
// end ; end else
11732: GO 12430
// if unit = Cornel then
11734: LD_VAR 0 1
11738: PUSH
11739: LD_EXP 31
11743: EQUAL
11744: IFFALSE 11842
// begin if Cornel in selected then
11746: LD_EXP 31
11750: PUSH
11751: LD_EXP 3
11755: IN
11756: IFFALSE 11804
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11758: LD_EXP 31
11762: PPUSH
11763: LD_STRING D3-Mark-Corn-1
11765: PPUSH
11766: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11770: LD_EXP 14
11774: PPUSH
11775: LD_STRING D3-Mark-JMM-1
11777: PPUSH
11778: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11782: LD_EXP 31
11786: PPUSH
11787: LD_STRING D3-Mark-Corn-2
11789: PPUSH
11790: CALL_OW 88
// joined := true ;
11794: LD_ADDR_VAR 0 5
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// end else
11802: GO 11840
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11804: LD_EXP 31
11808: PPUSH
11809: LD_STRING D4-Mark-Corn-1
11811: PPUSH
11812: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11816: LD_EXP 14
11820: PPUSH
11821: LD_STRING D4-Mark-JMM-1
11823: PPUSH
11824: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11828: LD_EXP 31
11832: PPUSH
11833: LD_STRING D4-Mark-Corn-2
11835: PPUSH
11836: CALL_OW 88
// end ; end else
11840: GO 12430
// if unit = Gary then
11842: LD_VAR 0 1
11846: PUSH
11847: LD_EXP 32
11851: EQUAL
11852: IFFALSE 11936
// begin if Gary in selected then
11854: LD_EXP 32
11858: PUSH
11859: LD_EXP 3
11863: IN
11864: IFFALSE 11900
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11866: LD_EXP 32
11870: PPUSH
11871: LD_STRING D3-Gary-Gary-1
11873: PPUSH
11874: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11878: LD_EXP 14
11882: PPUSH
11883: LD_STRING D3-Gary-JMM-1
11885: PPUSH
11886: CALL_OW 88
// joined := true ;
11890: LD_ADDR_VAR 0 5
11894: PUSH
11895: LD_INT 1
11897: ST_TO_ADDR
// end else
11898: GO 11934
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11900: LD_EXP 32
11904: PPUSH
11905: LD_STRING D4-Gary-Gary-1
11907: PPUSH
11908: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11912: LD_EXP 32
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL_OW 235
// DialogueOff ;
11924: CALL_OW 7
// InGameOff ;
11928: CALL_OW 9
// exit ;
11932: GO 12622
// end ; end else
11934: GO 12430
// if unit = Kikuchi then
11936: LD_VAR 0 1
11940: PUSH
11941: LD_EXP 34
11945: EQUAL
11946: IFFALSE 12030
// begin if Kikuchi in selected then
11948: LD_EXP 34
11952: PUSH
11953: LD_EXP 3
11957: IN
11958: IFFALSE 11994
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11960: LD_EXP 34
11964: PPUSH
11965: LD_STRING D3-Yamako-Yam-1
11967: PPUSH
11968: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11972: LD_EXP 14
11976: PPUSH
11977: LD_STRING D3-Soldier2-JMM-1
11979: PPUSH
11980: CALL_OW 88
// joined := true ;
11984: LD_ADDR_VAR 0 5
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// end else
11992: GO 12028
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11994: LD_EXP 34
11998: PPUSH
11999: LD_STRING D4-Yamako-Yam-1
12001: PPUSH
12002: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12006: LD_EXP 34
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 235
// DialogueOff ;
12018: CALL_OW 7
// InGameOff ;
12022: CALL_OW 9
// exit ;
12026: GO 12622
// end ; end else
12028: GO 12430
// if unit = Gladstone then
12030: LD_VAR 0 1
12034: PUSH
12035: LD_EXP 29
12039: EQUAL
12040: IFFALSE 12114
// begin if Gladstone in selected then
12042: LD_EXP 29
12046: PUSH
12047: LD_EXP 3
12051: IN
12052: IFFALSE 12088
// begin joined := true ;
12054: LD_ADDR_VAR 0 5
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12062: LD_EXP 14
12066: PPUSH
12067: LD_STRING D3-Tim-JMM-1
12069: PPUSH
12070: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12074: LD_EXP 29
12078: PPUSH
12079: LD_STRING D3-Tim-Glad-1
12081: PPUSH
12082: CALL_OW 88
// end else
12086: GO 12112
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12088: LD_EXP 14
12092: PPUSH
12093: LD_STRING D4-Tim-JMM-1
12095: PPUSH
12096: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12100: LD_EXP 29
12104: PPUSH
12105: LD_STRING D4-Tim-Glad-1
12107: PPUSH
12108: CALL_OW 88
// end ; end else
12112: GO 12430
// if unit = Denis then
12114: LD_VAR 0 1
12118: PUSH
12119: LD_EXP 27
12123: EQUAL
12124: IFFALSE 12160
// begin joined := true ;
12126: LD_ADDR_VAR 0 5
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12134: LD_EXP 27
12138: PPUSH
12139: LD_STRING D3-Denis-Den-1
12141: PPUSH
12142: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12146: LD_EXP 14
12150: PPUSH
12151: LD_STRING D3-Denis-JMM-1
12153: PPUSH
12154: CALL_OW 88
// end else
12158: GO 12430
// if unit = Simms then
12160: LD_VAR 0 1
12164: PUSH
12165: LD_EXP 35
12169: EQUAL
12170: IFFALSE 12206
// begin joined := true ;
12172: LD_ADDR_VAR 0 5
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12180: LD_EXP 35
12184: PPUSH
12185: LD_STRING D3-Simms-Sim-1
12187: PPUSH
12188: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12192: LD_EXP 14
12196: PPUSH
12197: LD_STRING D3-Simms-JMM-1
12199: PPUSH
12200: CALL_OW 88
// end else
12204: GO 12430
// if unit = DeltaDoctor then
12206: LD_VAR 0 1
12210: PUSH
12211: LD_EXP 37
12215: EQUAL
12216: IFFALSE 12252
// begin joined := true ;
12218: LD_ADDR_VAR 0 5
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12226: LD_EXP 37
12230: PPUSH
12231: LD_STRING D3-Soldier1-Sol1-1
12233: PPUSH
12234: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12238: LD_EXP 14
12242: PPUSH
12243: LD_STRING D3-Soldier1-JMM-1
12245: PPUSH
12246: CALL_OW 88
// end else
12250: GO 12430
// begin joined := unit in selected ;
12252: LD_ADDR_VAR 0 5
12256: PUSH
12257: LD_VAR 0 1
12261: PUSH
12262: LD_EXP 3
12266: IN
12267: ST_TO_ADDR
// if joined then
12268: LD_VAR 0 5
12272: IFFALSE 12341
// begin if GetSex ( unit ) = sex_male then
12274: LD_VAR 0 1
12278: PPUSH
12279: CALL_OW 258
12283: PUSH
12284: LD_INT 1
12286: EQUAL
12287: IFFALSE 12315
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_STRING D3-Soldier1-Sol1-1
12296: PPUSH
12297: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12301: LD_EXP 14
12305: PPUSH
12306: LD_STRING D3-Soldier1-JMM-1
12308: PPUSH
12309: CALL_OW 88
// end else
12313: GO 12339
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12315: LD_VAR 0 1
12319: PPUSH
12320: LD_STRING D3-Soldier2-FSol2-1
12322: PPUSH
12323: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12327: LD_EXP 14
12331: PPUSH
12332: LD_STRING D3-Soldier2-JMM-1
12334: PPUSH
12335: CALL_OW 88
// end ; end else
12339: GO 12430
// begin if GetSex ( unit ) = sex_male then
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 258
12350: PUSH
12351: LD_INT 1
12353: EQUAL
12354: IFFALSE 12394
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12356: LD_VAR 0 1
12360: PPUSH
12361: LD_STRING D4-Soldier2-Sol1-1
12363: PPUSH
12364: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12368: LD_EXP 14
12372: PPUSH
12373: LD_STRING D4-Soldier2-JMM-1
12375: PPUSH
12376: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12380: LD_VAR 0 1
12384: PPUSH
12385: LD_STRING D4-Soldier2-Sol2-1
12387: PPUSH
12388: CALL_OW 88
// end else
12392: GO 12430
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12394: LD_VAR 0 1
12398: PPUSH
12399: LD_STRING D4-Soldier1-FSol1-1
12401: PPUSH
12402: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12406: LD_EXP 14
12410: PPUSH
12411: LD_STRING D4-Soldier1-JMM-1
12413: PPUSH
12414: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12418: LD_VAR 0 1
12422: PPUSH
12423: LD_STRING D4-Soldier1-FSol1-2
12425: PPUSH
12426: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12430: CALL_OW 7
// InGameOff ;
12434: CALL_OW 9
// if building then
12438: LD_VAR 0 3
12442: IFFALSE 12543
// begin SetSide ( JMM , side ) ;
12444: LD_EXP 14
12448: PPUSH
12449: LD_VAR 0 4
12453: PPUSH
12454: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12458: LD_EXP 14
12462: PPUSH
12463: CALL_OW 122
// if joined then
12467: LD_VAR 0 5
12471: IFFALSE 12510
// begin SetSide ( unit , side ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_VAR 0 4
12482: PPUSH
12483: CALL_OW 235
// SetSide ( building , 1 ) ;
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 235
// ComExitBuilding ( unit ) ;
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 122
// end else
12508: GO 12541
// begin wait ( 0 0$10 ) ;
12510: LD_INT 350
12512: PPUSH
12513: CALL_OW 67
// SetSide ( unit , 1 ) ;
12517: LD_VAR 0 1
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 235
// SetSide ( building , 1 ) ;
12529: LD_VAR 0 3
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 235
// end ; end else
12541: GO 12622
// begin ComStop ( [ JMM , unit ] ) ;
12543: LD_EXP 14
12547: PUSH
12548: LD_VAR 0 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 141
// if joined then
12561: LD_VAR 0 5
12565: IFFALSE 12583
// SetSide ( unit , side ) else
12567: LD_VAR 0 1
12571: PPUSH
12572: LD_VAR 0 4
12576: PPUSH
12577: CALL_OW 235
12581: GO 12622
// begin repeat wait ( 0 0$1 ) ;
12583: LD_INT 35
12585: PPUSH
12586: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12590: LD_EXP 14
12594: PPUSH
12595: LD_VAR 0 1
12599: PPUSH
12600: CALL_OW 296
12604: PUSH
12605: LD_INT 11
12607: GREATER
12608: IFFALSE 12583
// SetSide ( unit , 1 ) ;
12610: LD_VAR 0 1
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 235
// end ; end ; end ;
12622: LD_VAR 0 2
12626: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12627: LD_EXP 14
12631: PPUSH
12632: LD_EXP 38
12636: PPUSH
12637: CALL_OW 296
12641: PUSH
12642: LD_INT 6
12644: LESS
12645: PUSH
12646: LD_INT 7
12648: PPUSH
12649: LD_EXP 38
12653: PPUSH
12654: CALL_OW 292
12658: AND
12659: IFFALSE 12717
12661: GO 12663
12663: DISABLE
// begin DialogueOn ;
12664: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12668: LD_EXP 38
12672: PPUSH
12673: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12677: LD_EXP 14
12681: PPUSH
12682: LD_STRING D6-JMM-Mike-1
12684: PPUSH
12685: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12689: LD_EXP 38
12693: PPUSH
12694: LD_STRING D6-Mike-1
12696: PPUSH
12697: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12701: LD_EXP 38
12705: PPUSH
12706: LD_INT 7
12708: PPUSH
12709: CALL_OW 235
// DialogueOff ;
12713: CALL_OW 7
// end ;
12717: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12718: LD_EXP 14
12722: PPUSH
12723: CALL_OW 310
12727: PUSH
12728: LD_INT 47
12730: EQUAL
12731: IFFALSE 12799
12733: GO 12735
12735: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12736: LD_STRING M1a
12738: PPUSH
12739: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12743: LD_INT 13
12745: PPUSH
12746: LD_INT 7
12748: PPUSH
12749: LD_INT 2
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12756: LD_INT 29
12758: PPUSH
12759: LD_INT 7
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12769: LD_EXP 14
12773: PPUSH
12774: LD_INT 9
12776: PPUSH
12777: CALL_OW 336
// can_escape := true ;
12781: LD_ADDR_EXP 6
12785: PUSH
12786: LD_INT 1
12788: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12789: LD_INT 19
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 424
// end ;
12799: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12800: LD_EXP 16
12804: PPUSH
12805: CALL_OW 256
12809: PUSH
12810: LD_INT 999
12812: LESS
12813: IFFALSE 12864
12815: GO 12817
12817: DISABLE
// begin enable ;
12818: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12819: LD_INT 25
12821: PPUSH
12822: LD_INT 48
12824: PPUSH
12825: CALL_OW 428
12829: PUSH
12830: LD_EXP 16
12834: EQUAL
12835: IFFALSE 12849
// begin RemoveUnit ( Powell ) ;
12837: LD_EXP 16
12841: PPUSH
12842: CALL_OW 64
// disable ;
12846: DISABLE
// end else
12847: GO 12864
// ComMoveXY ( Powell , 25 , 48 ) ;
12849: LD_EXP 16
12853: PPUSH
12854: LD_INT 25
12856: PPUSH
12857: LD_INT 48
12859: PPUSH
12860: CALL_OW 111
// end ;
12864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12865: LD_INT 22
12867: PUSH
12868: LD_INT 4
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 21
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: LD_INT 24
12890: PUSH
12891: LD_INT 990
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 15
12916: DIFF
12917: IFFALSE 13061
12919: GO 12921
12921: DISABLE
12922: LD_INT 0
12924: PPUSH
// begin enable ;
12925: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_INT 22
12933: PUSH
12934: LD_INT 4
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 1
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 3
12953: PUSH
12954: LD_INT 24
12956: PUSH
12957: LD_INT 990
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: PUSH
12978: LD_EXP 15
12982: DIFF
12983: PUSH
12984: FOR_IN
12985: IFFALSE 13059
// begin ComFree ( i ) ;
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 139
// SetSide ( i , 1 ) ;
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13008: LD_VAR 0 1
13012: PPUSH
13013: LD_EXP 14
13017: PPUSH
13018: CALL_OW 296
13022: PUSH
13023: LD_INT 14
13025: LESS
13026: IFFALSE 13057
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13028: LD_VAR 0 1
13032: PPUSH
13033: LD_EXP 14
13037: PPUSH
13038: CALL_OW 250
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 251
13052: PPUSH
13053: CALL_OW 114
// end ;
13057: GO 12984
13059: POP
13060: POP
// end ;
13061: PPOPN 1
13063: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13064: LD_INT 22
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 34
13076: PUSH
13077: LD_INT 12
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 69
13092: IFFALSE 13174
13094: GO 13096
13096: DISABLE
13097: LD_INT 0
13099: PPUSH
// begin enable ;
13100: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_INT 4
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 34
13118: PUSH
13119: LD_INT 12
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PUSH
13135: FOR_IN
13136: IFFALSE 13172
// if GetDistUnits ( i , JMM ) < 6 then
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_EXP 14
13147: PPUSH
13148: CALL_OW 296
13152: PUSH
13153: LD_INT 6
13155: LESS
13156: IFFALSE 13170
// SetSide ( i , 7 ) ;
13158: LD_VAR 0 1
13162: PPUSH
13163: LD_INT 7
13165: PPUSH
13166: CALL_OW 235
13170: GO 13135
13172: POP
13173: POP
// end ;
13174: PPOPN 1
13176: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13177: LD_EXP 6
13181: PUSH
13182: LD_INT 19
13184: PPUSH
13185: LD_INT 22
13187: PUSH
13188: LD_INT 7
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 21
13197: PUSH
13198: LD_INT 1
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PPUSH
13209: CALL_OW 71
13213: NOT
13214: AND
13215: PUSH
13216: LD_INT 3
13218: PPUSH
13219: CALL_OW 469
13223: NOT
13224: AND
13225: PUSH
13226: LD_INT 5
13228: PPUSH
13229: CALL_OW 469
13233: NOT
13234: AND
13235: IFFALSE 14918
13237: GO 13239
13239: DISABLE
13240: LD_INT 0
13242: PPUSH
13243: PPUSH
13244: PPUSH
13245: PPUSH
13246: PPUSH
// begin m1 := false ;
13247: LD_ADDR_VAR 0 3
13251: PUSH
13252: LD_INT 0
13254: ST_TO_ADDR
// m2 := false ;
13255: LD_ADDR_VAR 0 4
13259: PUSH
13260: LD_INT 0
13262: ST_TO_ADDR
// m3 := false ;
13263: LD_ADDR_VAR 0 5
13267: PUSH
13268: LD_INT 0
13270: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_EXP 3
13280: PPUSH
13281: LD_INT 22
13283: PUSH
13284: LD_INT 4
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 21
13293: PUSH
13294: LD_INT 1
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 72
13309: PUSH
13310: LD_INT 0
13312: EQUAL
13313: ST_TO_ADDR
// if not all_taken then
13314: LD_VAR 0 1
13318: NOT
13319: IFFALSE 13460
// case Query ( Q1 ) of 1 :
13321: LD_STRING Q1
13323: PPUSH
13324: CALL_OW 97
13328: PUSH
13329: LD_INT 1
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13448
13337: POP
// begin repeat wait ( 0 0$1 ) ;
13338: LD_INT 35
13340: PPUSH
13341: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13345: LD_EXP 3
13349: PPUSH
13350: LD_INT 22
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 21
13362: PUSH
13363: LD_INT 1
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 72
13378: PUSH
13379: LD_INT 0
13381: EQUAL
13382: PUSH
13383: LD_INT 19
13385: PPUSH
13386: LD_INT 22
13388: PUSH
13389: LD_INT 7
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 1
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 71
13414: NOT
13415: AND
13416: PUSH
13417: LD_INT 3
13419: PPUSH
13420: CALL_OW 469
13424: NOT
13425: AND
13426: PUSH
13427: LD_INT 5
13429: PPUSH
13430: CALL_OW 469
13434: NOT
13435: AND
13436: IFFALSE 13338
// all_taken := true ;
13438: LD_ADDR_VAR 0 1
13442: PUSH
13443: LD_INT 1
13445: ST_TO_ADDR
// end ; 2 :
13446: GO 13460
13448: LD_INT 2
13450: DOUBLE
13451: EQUAL
13452: IFTRUE 13456
13454: GO 13459
13456: POP
// ; end ;
13457: GO 13460
13459: POP
// if team_kill_counter < 3 then
13460: LD_EXP 9
13464: PUSH
13465: LD_INT 3
13467: LESS
13468: IFFALSE 13484
// Say ( JMM , D5-JMM-1 ) else
13470: LD_EXP 14
13474: PPUSH
13475: LD_STRING D5-JMM-1
13477: PPUSH
13478: CALL_OW 88
13482: GO 13496
// Say ( JMM , D5-JMM-1a ) ;
13484: LD_EXP 14
13488: PPUSH
13489: LD_STRING D5-JMM-1a
13491: PPUSH
13492: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13496: LD_INT 22
13498: PUSH
13499: LD_INT 7
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 21
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 23
13518: PUSH
13519: LD_INT 1
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 69
13535: PUSH
13536: LD_EXP 14
13540: PUSH
13541: LD_EXP 15
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: DIFF
13550: PUSH
13551: LD_INT 10
13553: GREATEREQUAL
13554: IFFALSE 13563
// SetAchievement ( ACH_TEAM ) ;
13556: LD_STRING ACH_TEAM
13558: PPUSH
13559: CALL_OW 543
// if not invis_used then
13563: LD_EXP 12
13567: NOT
13568: IFFALSE 13584
// begin wait ( 3 ) ;
13570: LD_INT 3
13572: PPUSH
13573: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13577: LD_STRING ACH_NOINVIS
13579: PPUSH
13580: CALL_OW 543
// end ; if not alert then
13584: LD_EXP 13
13588: NOT
13589: IFFALSE 13605
// begin wait ( 3 ) ;
13591: LD_INT 3
13593: PPUSH
13594: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13598: LD_STRING ACH_ALARM
13600: PPUSH
13601: CALL_OW 543
// end ; if tick < 15 15$00 then
13605: LD_OWVAR 1
13609: PUSH
13610: LD_INT 31500
13612: LESS
13613: IFFALSE 13629
// begin wait ( 3 ) ;
13615: LD_INT 3
13617: PPUSH
13618: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13622: LD_STRING ACH_ASPEED_16
13624: PPUSH
13625: CALL_OW 543
// end ; if all_taken then
13629: LD_VAR 0 1
13633: IFFALSE 13655
// begin AddMedal ( All , 1 ) ;
13635: LD_STRING All
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 101
// m1 := true ;
13645: LD_ADDR_VAR 0 3
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// end else
13653: GO 13666
// AddMedal ( All , - 1 ) ;
13655: LD_STRING All
13657: PPUSH
13658: LD_INT 1
13660: NEG
13661: PPUSH
13662: CALL_OW 101
// if team_kill_counter then
13666: LD_EXP 9
13670: IFFALSE 13685
// AddMedal ( Save , - 1 ) else
13672: LD_STRING Save
13674: PPUSH
13675: LD_INT 1
13677: NEG
13678: PPUSH
13679: CALL_OW 101
13683: GO 13703
// begin AddMedal ( Save , 1 ) ;
13685: LD_STRING Save
13687: PPUSH
13688: LD_INT 1
13690: PPUSH
13691: CALL_OW 101
// m2 := true ;
13695: LD_ADDR_VAR 0 4
13699: PUSH
13700: LD_INT 1
13702: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13703: LD_EXP 8
13707: PUSH
13708: LD_INT 2
13710: PUSH
13711: LD_INT 2
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: PUSH
13726: LD_OWVAR 67
13730: ARRAY
13731: GREATEREQUAL
13732: IFFALSE 13747
// AddMedal ( Friendship , - 1 ) else
13734: LD_STRING Friendship
13736: PPUSH
13737: LD_INT 1
13739: NEG
13740: PPUSH
13741: CALL_OW 101
13745: GO 13765
// begin AddMedal ( Friendship , 1 ) ;
13747: LD_STRING Friendship
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 101
// m3 := true ;
13757: LD_ADDR_VAR 0 5
13761: PUSH
13762: LD_INT 1
13764: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13765: LD_VAR 0 3
13769: PUSH
13770: LD_VAR 0 4
13774: AND
13775: PUSH
13776: LD_VAR 0 5
13780: AND
13781: PUSH
13782: LD_OWVAR 67
13786: PUSH
13787: LD_INT 3
13789: GREATEREQUAL
13790: AND
13791: IFFALSE 13803
// SetAchievementEX ( ACH_AMER , 16 ) ;
13793: LD_STRING ACH_AMER
13795: PPUSH
13796: LD_INT 16
13798: PPUSH
13799: CALL_OW 564
// GiveMedals ( MAIN ) ;
13803: LD_STRING MAIN
13805: PPUSH
13806: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13810: LD_ADDR_VAR 0 2
13814: PUSH
13815: LD_INT 22
13817: PUSH
13818: LD_INT 7
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: LD_INT 25
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 25
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 25
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 25
13860: PUSH
13861: LD_INT 4
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 25
13870: PUSH
13871: LD_INT 5
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 25
13880: PUSH
13881: LD_INT 8
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 25
13890: PUSH
13891: LD_INT 9
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: LD_INT 16
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: PPUSH
13926: CALL_OW 69
13930: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13931: LD_VAR 0 2
13935: PUSH
13936: LD_EXP 15
13940: UNION
13941: PUSH
13942: LD_EXP 38
13946: DIFF
13947: PPUSH
13948: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13952: LD_EXP 14
13956: PPUSH
13957: LD_STRING 12a_JMM
13959: PPUSH
13960: CALL_OW 38
// if IsLive ( Roth ) then
13964: LD_EXP 15
13968: PPUSH
13969: CALL_OW 300
13973: IFFALSE 13987
// SaveCharacters ( Roth , 12a_Roth ) ;
13975: LD_EXP 15
13979: PPUSH
13980: LD_STRING 12a_Roth
13982: PPUSH
13983: CALL_OW 38
// if Lisa in tmp then
13987: LD_EXP 23
13991: PUSH
13992: LD_VAR 0 2
13996: IN
13997: IFFALSE 14013
// SaveCharacters ( Lisa , 12a_Lisa ) else
13999: LD_EXP 23
14003: PPUSH
14004: LD_STRING 12a_Lisa
14006: PPUSH
14007: CALL_OW 38
14011: GO 14031
// if Lisa then
14013: LD_EXP 23
14017: IFFALSE 14031
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14019: LD_EXP 23
14023: PPUSH
14024: LD_STRING 12p_Lisa
14026: PPUSH
14027: CALL_OW 38
// if Mike in tmp then
14031: LD_EXP 38
14035: PUSH
14036: LD_VAR 0 2
14040: IN
14041: IFFALSE 14055
// SaveCharacters ( Mike , 12a_Mike ) ;
14043: LD_EXP 38
14047: PPUSH
14048: LD_STRING 12a_Mike
14050: PPUSH
14051: CALL_OW 38
// if Donaldson in tmp then
14055: LD_EXP 24
14059: PUSH
14060: LD_VAR 0 2
14064: IN
14065: IFFALSE 14081
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14067: LD_EXP 24
14071: PPUSH
14072: LD_STRING 12a_Donaldson
14074: PPUSH
14075: CALL_OW 38
14079: GO 14099
// if Donaldson then
14081: LD_EXP 24
14085: IFFALSE 14099
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14087: LD_EXP 24
14091: PPUSH
14092: LD_STRING 12p_Donaldson
14094: PPUSH
14095: CALL_OW 38
// if Bobby in tmp then
14099: LD_EXP 25
14103: PUSH
14104: LD_VAR 0 2
14108: IN
14109: IFFALSE 14125
// SaveCharacters ( Bobby , 12a_Bobby ) else
14111: LD_EXP 25
14115: PPUSH
14116: LD_STRING 12a_Bobby
14118: PPUSH
14119: CALL_OW 38
14123: GO 14143
// if Bobby then
14125: LD_EXP 25
14129: IFFALSE 14143
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14131: LD_EXP 25
14135: PPUSH
14136: LD_STRING 12p_Bobby
14138: PPUSH
14139: CALL_OW 38
// if Cyrus in tmp then
14143: LD_EXP 26
14147: PUSH
14148: LD_VAR 0 2
14152: IN
14153: IFFALSE 14169
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14155: LD_EXP 26
14159: PPUSH
14160: LD_STRING 12a_Cyrus
14162: PPUSH
14163: CALL_OW 38
14167: GO 14187
// if Cyrus then
14169: LD_EXP 26
14173: IFFALSE 14187
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14175: LD_EXP 26
14179: PPUSH
14180: LD_STRING 12p_Cyrus
14182: PPUSH
14183: CALL_OW 38
// if Denis in tmp then
14187: LD_EXP 27
14191: PUSH
14192: LD_VAR 0 2
14196: IN
14197: IFFALSE 14211
// SaveCharacters ( Denis , 12a_Denis ) ;
14199: LD_EXP 27
14203: PPUSH
14204: LD_STRING 12a_Denis
14206: PPUSH
14207: CALL_OW 38
// if Brown in tmp then
14211: LD_EXP 28
14215: PUSH
14216: LD_VAR 0 2
14220: IN
14221: IFFALSE 14237
// SaveCharacters ( Brown , 12a_Brown ) else
14223: LD_EXP 28
14227: PPUSH
14228: LD_STRING 12a_Brown
14230: PPUSH
14231: CALL_OW 38
14235: GO 14261
// if Brown in tmp then
14237: LD_EXP 28
14241: PUSH
14242: LD_VAR 0 2
14246: IN
14247: IFFALSE 14261
// SaveCharacters ( Brown , 12p_Brown ) ;
14249: LD_EXP 28
14253: PPUSH
14254: LD_STRING 12p_Brown
14256: PPUSH
14257: CALL_OW 38
// if Gladstone in tmp then
14261: LD_EXP 29
14265: PUSH
14266: LD_VAR 0 2
14270: IN
14271: IFFALSE 14287
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14273: LD_EXP 29
14277: PPUSH
14278: LD_STRING 12a_Gladstone
14280: PPUSH
14281: CALL_OW 38
14285: GO 14305
// if Gladstone then
14287: LD_EXP 29
14291: IFFALSE 14305
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14293: LD_EXP 29
14297: PPUSH
14298: LD_STRING 12p_Gladstone
14300: PPUSH
14301: CALL_OW 38
// if Houten in tmp then
14305: LD_EXP 30
14309: PUSH
14310: LD_VAR 0 2
14314: IN
14315: IFFALSE 14331
// SaveCharacters ( Houten , 12a_Houten ) else
14317: LD_EXP 30
14321: PPUSH
14322: LD_STRING 12a_Houten
14324: PPUSH
14325: CALL_OW 38
14329: GO 14349
// if Houten then
14331: LD_EXP 30
14335: IFFALSE 14349
// SaveCharacters ( Houten , 12p_Houten ) ;
14337: LD_EXP 30
14341: PPUSH
14342: LD_STRING 12p_Houten
14344: PPUSH
14345: CALL_OW 38
// if Cornel in tmp then
14349: LD_EXP 31
14353: PUSH
14354: LD_VAR 0 2
14358: IN
14359: IFFALSE 14375
// SaveCharacters ( Cornel , 12a_Cornell ) else
14361: LD_EXP 31
14365: PPUSH
14366: LD_STRING 12a_Cornell
14368: PPUSH
14369: CALL_OW 38
14373: GO 14393
// if Cornel then
14375: LD_EXP 31
14379: IFFALSE 14393
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14381: LD_EXP 31
14385: PPUSH
14386: LD_STRING 12p_Cornell
14388: PPUSH
14389: CALL_OW 38
// if Gary in tmp then
14393: LD_EXP 32
14397: PUSH
14398: LD_VAR 0 2
14402: IN
14403: IFFALSE 14419
// SaveCharacters ( Gary , 12a_Gary ) else
14405: LD_EXP 32
14409: PPUSH
14410: LD_STRING 12a_Gary
14412: PPUSH
14413: CALL_OW 38
14417: GO 14437
// if Gary then
14419: LD_EXP 32
14423: IFFALSE 14437
// SaveCharacters ( Gary , 12p_Gary ) ;
14425: LD_EXP 32
14429: PPUSH
14430: LD_STRING 12p_Gary
14432: PPUSH
14433: CALL_OW 38
// if Frank in tmp then
14437: LD_EXP 33
14441: PUSH
14442: LD_VAR 0 2
14446: IN
14447: IFFALSE 14461
// SaveCharacters ( Frank , 12a_Frank ) ;
14449: LD_EXP 33
14453: PPUSH
14454: LD_STRING 12a_Frank
14456: PPUSH
14457: CALL_OW 38
// if Kikuchi in tmp then
14461: LD_EXP 34
14465: PUSH
14466: LD_VAR 0 2
14470: IN
14471: IFFALSE 14487
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14473: LD_EXP 34
14477: PPUSH
14478: LD_STRING 12a_Kikuchi
14480: PPUSH
14481: CALL_OW 38
14485: GO 14505
// if Kikuchi then
14487: LD_EXP 34
14491: IFFALSE 14505
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14493: LD_EXP 34
14497: PPUSH
14498: LD_STRING 12p_Kikuchi
14500: PPUSH
14501: CALL_OW 38
// if Simms in tmp then
14505: LD_EXP 35
14509: PUSH
14510: LD_VAR 0 2
14514: IN
14515: IFFALSE 14529
// SaveCharacters ( Simms , 12a_Simms ) ;
14517: LD_EXP 35
14521: PPUSH
14522: LD_STRING 12a_Simms
14524: PPUSH
14525: CALL_OW 38
// if Joan in tmp then
14529: LD_EXP 36
14533: PUSH
14534: LD_VAR 0 2
14538: IN
14539: IFFALSE 14553
// SaveCharacters ( Joan , 12a_Joan ) ;
14541: LD_EXP 36
14545: PPUSH
14546: LD_STRING 12a_Joan
14548: PPUSH
14549: CALL_OW 38
// if DeltaDoctor in tmp then
14553: LD_EXP 37
14557: PUSH
14558: LD_VAR 0 2
14562: IN
14563: IFFALSE 14577
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14565: LD_EXP 37
14569: PPUSH
14570: LD_STRING 12a_DeltaDoctor
14572: PPUSH
14573: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_VAR 0 2
14586: PUSH
14587: LD_EXP 14
14591: PUSH
14592: LD_EXP 15
14596: PUSH
14597: LD_EXP 23
14601: PUSH
14602: LD_EXP 24
14606: PUSH
14607: LD_EXP 25
14611: PUSH
14612: LD_EXP 26
14616: PUSH
14617: LD_EXP 27
14621: PUSH
14622: LD_EXP 28
14626: PUSH
14627: LD_EXP 29
14631: PUSH
14632: LD_EXP 30
14636: PUSH
14637: LD_EXP 31
14641: PUSH
14642: LD_EXP 32
14646: PUSH
14647: LD_EXP 33
14651: PUSH
14652: LD_EXP 34
14656: PUSH
14657: LD_EXP 35
14661: PUSH
14662: LD_EXP 36
14666: PUSH
14667: LD_EXP 37
14671: PUSH
14672: LD_EXP 38
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: DIFF
14697: ST_TO_ADDR
// if tmp then
14698: LD_VAR 0 2
14702: IFFALSE 14716
// SaveCharacters ( tmp , 12a_others ) ;
14704: LD_VAR 0 2
14708: PPUSH
14709: LD_STRING 12a_others
14711: PPUSH
14712: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14716: LD_ADDR_VAR 0 2
14720: PUSH
14721: LD_INT 21
14723: PUSH
14724: LD_INT 1
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 23
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_INT 1
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_INT 4
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: PUSH
14779: LD_EXP 14
14783: PUSH
14784: LD_EXP 15
14788: PUSH
14789: LD_EXP 23
14793: PUSH
14794: LD_EXP 24
14798: PUSH
14799: LD_EXP 25
14803: PUSH
14804: LD_EXP 26
14808: PUSH
14809: LD_EXP 27
14813: PUSH
14814: LD_EXP 28
14818: PUSH
14819: LD_EXP 29
14823: PUSH
14824: LD_EXP 30
14828: PUSH
14829: LD_EXP 31
14833: PUSH
14834: LD_EXP 32
14838: PUSH
14839: LD_EXP 33
14843: PUSH
14844: LD_EXP 34
14848: PUSH
14849: LD_EXP 35
14853: PUSH
14854: LD_EXP 36
14858: PUSH
14859: LD_EXP 37
14863: PUSH
14864: LD_EXP 16
14868: PUSH
14869: LD_EXP 38
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: DIFF
14895: ST_TO_ADDR
// if tmp then
14896: LD_VAR 0 2
14900: IFFALSE 14914
// SaveCharacters ( tmp , 12p_others ) ;
14902: LD_VAR 0 2
14906: PPUSH
14907: LD_STRING 12p_others
14909: PPUSH
14910: CALL_OW 38
// YouWin ;
14914: CALL_OW 103
// end ; end_of_file
14918: PPOPN 5
14920: END
// on SailEvent ( event ) do var tmp ;
14921: LD_INT 0
14923: PPUSH
// begin if event = 1 then
14924: LD_VAR 0 1
14928: PUSH
14929: LD_INT 1
14931: EQUAL
14932: IFFALSE 15005
// begin if not mobile_patrol then
14934: LD_EXP 17
14938: NOT
14939: IFFALSE 14943
// exit ;
14941: GO 15005
// tmp := mobile_patrol [ mobile_patrol ] ;
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_EXP 17
14952: PUSH
14953: LD_EXP 17
14957: ARRAY
14958: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14959: LD_ADDR_EXP 17
14963: PUSH
14964: LD_EXP 17
14968: PPUSH
14969: LD_EXP 17
14973: PPUSH
14974: CALL_OW 3
14978: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14979: LD_VAR 0 2
14983: PPUSH
14984: LD_EXP 18
14988: PUSH
14989: LD_EXP 17
14993: PUSH
14994: LD_INT 1
14996: PLUS
14997: ARRAY
14998: PPUSH
14999: EMPTY
15000: PPUSH
15001: CALL 6985 0 3
// end ; end ;
15005: PPOPN 2
15007: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL 31330 0 1
// if un = JMM then
15017: LD_VAR 0 1
15021: PUSH
15022: LD_EXP 14
15026: EQUAL
15027: IFFALSE 15036
// YouLost ( JMM ) ;
15029: LD_STRING JMM
15031: PPUSH
15032: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 255
15045: PUSH
15046: LD_INT 7
15048: EQUAL
15049: PUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 264
15059: PUSH
15060: LD_INT 12
15062: EQUAL
15063: AND
15064: IFFALSE 15073
// YouLost ( Artifact ) ;
15066: LD_STRING Artifact
15068: PPUSH
15069: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 255
15082: PUSH
15083: LD_INT 7
15085: EQUAL
15086: PUSH
15087: LD_VAR 0 1
15091: PPUSH
15092: CALL_OW 247
15096: PUSH
15097: LD_INT 1
15099: EQUAL
15100: AND
15101: PUSH
15102: LD_VAR 0 1
15106: PUSH
15107: LD_EXP 15
15111: EQUAL
15112: OR
15113: IFFALSE 15129
// team_kill_counter := team_kill_counter + 1 ;
15115: LD_ADDR_EXP 9
15119: PUSH
15120: LD_EXP 9
15124: PUSH
15125: LD_INT 1
15127: PLUS
15128: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 255
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_VAR 0 1
15147: PPUSH
15148: CALL_OW 247
15152: PUSH
15153: LD_INT 1
15155: EQUAL
15156: AND
15157: IFFALSE 15173
// friends_kill_counter := friends_kill_counter + 1 ;
15159: LD_ADDR_EXP 8
15163: PUSH
15164: LD_EXP 8
15168: PUSH
15169: LD_INT 1
15171: PLUS
15172: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 255
15182: PUSH
15183: LD_INT 1
15185: NONEQUAL
15186: IFFALSE 15190
// exit ;
15188: GO 15267
// if GetControl ( un ) = control_remote then
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL_OW 263
15199: PUSH
15200: LD_INT 2
15202: EQUAL
15203: IFFALSE 15221
// defenders := defenders diff un ;
15205: LD_ADDR_EXP 20
15209: PUSH
15210: LD_EXP 20
15214: PUSH
15215: LD_VAR 0 1
15219: DIFF
15220: ST_TO_ADDR
// if not un in defenders then
15221: LD_VAR 0 1
15225: PUSH
15226: LD_EXP 20
15230: IN
15231: NOT
15232: IFFALSE 15267
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15234: LD_ADDR_EXP 21
15238: PUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 250
15248: PUSH
15249: LD_VAR 0 1
15253: PPUSH
15254: CALL_OW 251
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: ST_TO_ADDR
// Defend ;
15263: CALL 2950 0 0
// end ; end ;
15267: PPOPN 1
15269: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15270: LD_VAR 0 1
15274: PPUSH
15275: LD_VAR 0 2
15279: PPUSH
15280: CALL 31450 0 2
// if GetSide ( veh ) <> 1 then
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 255
15293: PUSH
15294: LD_INT 1
15296: NONEQUAL
15297: IFFALSE 15301
// exit ;
15299: GO 15325
// if GetControl ( veh ) = control_remote then
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 263
15310: PUSH
15311: LD_INT 2
15313: EQUAL
15314: IFFALSE 15325
// Connect ( veh ) ;
15316: LD_VAR 0 1
15320: PPUSH
15321: CALL 43550 0 1
// end ;
15325: PPOPN 2
15327: END
// on UnitGoesToRed ( un ) do var i , veh ;
15328: LD_INT 0
15330: PPUSH
15331: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 255
15341: PUSH
15342: LD_INT 1
15344: EQUAL
15345: PUSH
15346: LD_VAR 0 1
15350: PPUSH
15351: CALL_OW 263
15355: PUSH
15356: LD_INT 2
15358: EQUAL
15359: AND
15360: IFFALSE 15371
// ComUnlink ( un ) ;
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 136
// if un = ambar0 then
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 18
15378: EQUAL
15379: IFFALSE 15489
// begin uc_side := 1 ;
15381: LD_ADDR_OWVAR 20
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// uc_nation := 1 ;
15389: LD_ADDR_OWVAR 21
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// for i = 1 to 6 do
15397: LD_ADDR_VAR 0 2
15401: PUSH
15402: DOUBLE
15403: LD_INT 1
15405: DEC
15406: ST_TO_ADDR
15407: LD_INT 6
15409: PUSH
15410: FOR_TO
15411: IFFALSE 15487
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15413: LD_INT 3
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: LD_INT 3
15421: PPUSH
15422: LD_INT 4
15424: PPUSH
15425: LD_INT 100
15427: PPUSH
15428: CALL 40459 0 5
// veh := CreateVehicle ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: CALL_OW 45
15441: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15442: LD_VAR 0 3
15446: PPUSH
15447: LD_INT 1
15449: PPUSH
15450: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15454: LD_VAR 0 3
15458: PPUSH
15459: LD_INT 25
15461: PPUSH
15462: LD_INT 0
15464: PPUSH
15465: CALL_OW 49
// defenders := defenders ^ veh ;
15469: LD_ADDR_EXP 20
15473: PUSH
15474: LD_EXP 20
15478: PUSH
15479: LD_VAR 0 3
15483: ADD
15484: ST_TO_ADDR
// end ;
15485: GO 15410
15487: POP
15488: POP
// end ; end ;
15489: PPOPN 3
15491: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15492: LD_VAR 0 2
15496: PUSH
15497: LD_EXP 16
15501: EQUAL
15502: IFFALSE 15513
// RemoveUnit ( Powell ) ;
15504: LD_EXP 16
15508: PPUSH
15509: CALL_OW 64
// end ;
15513: PPOPN 2
15515: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL 31434 0 1
// end ; end_of_file end_of_file
15525: PPOPN 1
15527: END
// export globalGameSaveCounter ; every 0 0$1 do
15528: GO 15530
15530: DISABLE
// begin enable ;
15531: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15532: LD_STRING updateTimer(
15534: PUSH
15535: LD_OWVAR 1
15539: STR
15540: PUSH
15541: LD_STRING );
15543: STR
15544: PPUSH
15545: CALL_OW 559
// end ;
15549: END
// every 0 0$1 do
15550: GO 15552
15552: DISABLE
// begin globalGameSaveCounter := 0 ;
15553: LD_ADDR_EXP 39
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15561: LD_STRING setGameSaveCounter(0)
15563: PPUSH
15564: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15568: LD_STRING initStreamRollete();
15570: PPUSH
15571: CALL_OW 559
// InitStreamMode ;
15575: CALL 16901 0 0
// DefineStreamItems ( false ) ;
15579: LD_INT 0
15581: PPUSH
15582: CALL 17365 0 1
// end ;
15586: END
// export function SOS_MapStart ( ) ; begin
15587: LD_INT 0
15589: PPUSH
// if streamModeActive then
15590: LD_EXP 40
15594: IFFALSE 15603
// DefineStreamItems ( true ) ;
15596: LD_INT 1
15598: PPUSH
15599: CALL 17365 0 1
// UpdateLuaVariables ( ) ;
15603: CALL 15620 0 0
// UpdateFactoryWaypoints ( ) ;
15607: CALL 30234 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15611: CALL 30491 0 0
// end ;
15615: LD_VAR 0 1
15619: RET
// function UpdateLuaVariables ( ) ; begin
15620: LD_INT 0
15622: PPUSH
// if globalGameSaveCounter then
15623: LD_EXP 39
15627: IFFALSE 15661
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15629: LD_ADDR_EXP 39
15633: PUSH
15634: LD_EXP 39
15638: PPUSH
15639: CALL 74272 0 1
15643: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15644: LD_STRING setGameSaveCounter(
15646: PUSH
15647: LD_EXP 39
15651: STR
15652: PUSH
15653: LD_STRING )
15655: STR
15656: PPUSH
15657: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15661: LD_STRING setGameDifficulty(
15663: PUSH
15664: LD_OWVAR 67
15668: STR
15669: PUSH
15670: LD_STRING )
15672: STR
15673: PPUSH
15674: CALL_OW 559
// end ;
15678: LD_VAR 0 1
15682: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15683: LD_INT 0
15685: PPUSH
// if p2 = stream_mode then
15686: LD_VAR 0 2
15690: PUSH
15691: LD_INT 100
15693: EQUAL
15694: IFFALSE 16697
// begin if not StreamModeActive then
15696: LD_EXP 40
15700: NOT
15701: IFFALSE 15711
// StreamModeActive := true ;
15703: LD_ADDR_EXP 40
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// if p3 = 0 then
15711: LD_VAR 0 3
15715: PUSH
15716: LD_INT 0
15718: EQUAL
15719: IFFALSE 15725
// InitStreamMode ;
15721: CALL 16901 0 0
// if p3 = 1 then
15725: LD_VAR 0 3
15729: PUSH
15730: LD_INT 1
15732: EQUAL
15733: IFFALSE 15743
// sRocket := true ;
15735: LD_ADDR_EXP 45
15739: PUSH
15740: LD_INT 1
15742: ST_TO_ADDR
// if p3 = 2 then
15743: LD_VAR 0 3
15747: PUSH
15748: LD_INT 2
15750: EQUAL
15751: IFFALSE 15761
// sSpeed := true ;
15753: LD_ADDR_EXP 44
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// if p3 = 3 then
15761: LD_VAR 0 3
15765: PUSH
15766: LD_INT 3
15768: EQUAL
15769: IFFALSE 15779
// sEngine := true ;
15771: LD_ADDR_EXP 46
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// if p3 = 4 then
15779: LD_VAR 0 3
15783: PUSH
15784: LD_INT 4
15786: EQUAL
15787: IFFALSE 15797
// sSpec := true ;
15789: LD_ADDR_EXP 43
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// if p3 = 5 then
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 5
15804: EQUAL
15805: IFFALSE 15815
// sLevel := true ;
15807: LD_ADDR_EXP 47
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// if p3 = 6 then
15815: LD_VAR 0 3
15819: PUSH
15820: LD_INT 6
15822: EQUAL
15823: IFFALSE 15833
// sArmoury := true ;
15825: LD_ADDR_EXP 48
15829: PUSH
15830: LD_INT 1
15832: ST_TO_ADDR
// if p3 = 7 then
15833: LD_VAR 0 3
15837: PUSH
15838: LD_INT 7
15840: EQUAL
15841: IFFALSE 15851
// sRadar := true ;
15843: LD_ADDR_EXP 49
15847: PUSH
15848: LD_INT 1
15850: ST_TO_ADDR
// if p3 = 8 then
15851: LD_VAR 0 3
15855: PUSH
15856: LD_INT 8
15858: EQUAL
15859: IFFALSE 15869
// sBunker := true ;
15861: LD_ADDR_EXP 50
15865: PUSH
15866: LD_INT 1
15868: ST_TO_ADDR
// if p3 = 9 then
15869: LD_VAR 0 3
15873: PUSH
15874: LD_INT 9
15876: EQUAL
15877: IFFALSE 15887
// sHack := true ;
15879: LD_ADDR_EXP 51
15883: PUSH
15884: LD_INT 1
15886: ST_TO_ADDR
// if p3 = 10 then
15887: LD_VAR 0 3
15891: PUSH
15892: LD_INT 10
15894: EQUAL
15895: IFFALSE 15905
// sFire := true ;
15897: LD_ADDR_EXP 52
15901: PUSH
15902: LD_INT 1
15904: ST_TO_ADDR
// if p3 = 11 then
15905: LD_VAR 0 3
15909: PUSH
15910: LD_INT 11
15912: EQUAL
15913: IFFALSE 15923
// sRefresh := true ;
15915: LD_ADDR_EXP 53
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// if p3 = 12 then
15923: LD_VAR 0 3
15927: PUSH
15928: LD_INT 12
15930: EQUAL
15931: IFFALSE 15941
// sExp := true ;
15933: LD_ADDR_EXP 54
15937: PUSH
15938: LD_INT 1
15940: ST_TO_ADDR
// if p3 = 13 then
15941: LD_VAR 0 3
15945: PUSH
15946: LD_INT 13
15948: EQUAL
15949: IFFALSE 15959
// sDepot := true ;
15951: LD_ADDR_EXP 55
15955: PUSH
15956: LD_INT 1
15958: ST_TO_ADDR
// if p3 = 14 then
15959: LD_VAR 0 3
15963: PUSH
15964: LD_INT 14
15966: EQUAL
15967: IFFALSE 15977
// sFlag := true ;
15969: LD_ADDR_EXP 56
15973: PUSH
15974: LD_INT 1
15976: ST_TO_ADDR
// if p3 = 15 then
15977: LD_VAR 0 3
15981: PUSH
15982: LD_INT 15
15984: EQUAL
15985: IFFALSE 15995
// sKamikadze := true ;
15987: LD_ADDR_EXP 64
15991: PUSH
15992: LD_INT 1
15994: ST_TO_ADDR
// if p3 = 16 then
15995: LD_VAR 0 3
15999: PUSH
16000: LD_INT 16
16002: EQUAL
16003: IFFALSE 16013
// sTroll := true ;
16005: LD_ADDR_EXP 65
16009: PUSH
16010: LD_INT 1
16012: ST_TO_ADDR
// if p3 = 17 then
16013: LD_VAR 0 3
16017: PUSH
16018: LD_INT 17
16020: EQUAL
16021: IFFALSE 16031
// sSlow := true ;
16023: LD_ADDR_EXP 66
16027: PUSH
16028: LD_INT 1
16030: ST_TO_ADDR
// if p3 = 18 then
16031: LD_VAR 0 3
16035: PUSH
16036: LD_INT 18
16038: EQUAL
16039: IFFALSE 16049
// sLack := true ;
16041: LD_ADDR_EXP 67
16045: PUSH
16046: LD_INT 1
16048: ST_TO_ADDR
// if p3 = 19 then
16049: LD_VAR 0 3
16053: PUSH
16054: LD_INT 19
16056: EQUAL
16057: IFFALSE 16067
// sTank := true ;
16059: LD_ADDR_EXP 69
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// if p3 = 20 then
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 20
16074: EQUAL
16075: IFFALSE 16085
// sRemote := true ;
16077: LD_ADDR_EXP 70
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// if p3 = 21 then
16085: LD_VAR 0 3
16089: PUSH
16090: LD_INT 21
16092: EQUAL
16093: IFFALSE 16103
// sPowell := true ;
16095: LD_ADDR_EXP 71
16099: PUSH
16100: LD_INT 1
16102: ST_TO_ADDR
// if p3 = 22 then
16103: LD_VAR 0 3
16107: PUSH
16108: LD_INT 22
16110: EQUAL
16111: IFFALSE 16121
// sTeleport := true ;
16113: LD_ADDR_EXP 74
16117: PUSH
16118: LD_INT 1
16120: ST_TO_ADDR
// if p3 = 23 then
16121: LD_VAR 0 3
16125: PUSH
16126: LD_INT 23
16128: EQUAL
16129: IFFALSE 16139
// sOilTower := true ;
16131: LD_ADDR_EXP 76
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// if p3 = 24 then
16139: LD_VAR 0 3
16143: PUSH
16144: LD_INT 24
16146: EQUAL
16147: IFFALSE 16157
// sShovel := true ;
16149: LD_ADDR_EXP 77
16153: PUSH
16154: LD_INT 1
16156: ST_TO_ADDR
// if p3 = 25 then
16157: LD_VAR 0 3
16161: PUSH
16162: LD_INT 25
16164: EQUAL
16165: IFFALSE 16175
// sSheik := true ;
16167: LD_ADDR_EXP 78
16171: PUSH
16172: LD_INT 1
16174: ST_TO_ADDR
// if p3 = 26 then
16175: LD_VAR 0 3
16179: PUSH
16180: LD_INT 26
16182: EQUAL
16183: IFFALSE 16193
// sEarthquake := true ;
16185: LD_ADDR_EXP 80
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// if p3 = 27 then
16193: LD_VAR 0 3
16197: PUSH
16198: LD_INT 27
16200: EQUAL
16201: IFFALSE 16211
// sAI := true ;
16203: LD_ADDR_EXP 81
16207: PUSH
16208: LD_INT 1
16210: ST_TO_ADDR
// if p3 = 28 then
16211: LD_VAR 0 3
16215: PUSH
16216: LD_INT 28
16218: EQUAL
16219: IFFALSE 16229
// sCargo := true ;
16221: LD_ADDR_EXP 84
16225: PUSH
16226: LD_INT 1
16228: ST_TO_ADDR
// if p3 = 29 then
16229: LD_VAR 0 3
16233: PUSH
16234: LD_INT 29
16236: EQUAL
16237: IFFALSE 16247
// sDLaser := true ;
16239: LD_ADDR_EXP 85
16243: PUSH
16244: LD_INT 1
16246: ST_TO_ADDR
// if p3 = 30 then
16247: LD_VAR 0 3
16251: PUSH
16252: LD_INT 30
16254: EQUAL
16255: IFFALSE 16265
// sExchange := true ;
16257: LD_ADDR_EXP 86
16261: PUSH
16262: LD_INT 1
16264: ST_TO_ADDR
// if p3 = 31 then
16265: LD_VAR 0 3
16269: PUSH
16270: LD_INT 31
16272: EQUAL
16273: IFFALSE 16283
// sFac := true ;
16275: LD_ADDR_EXP 87
16279: PUSH
16280: LD_INT 1
16282: ST_TO_ADDR
// if p3 = 32 then
16283: LD_VAR 0 3
16287: PUSH
16288: LD_INT 32
16290: EQUAL
16291: IFFALSE 16301
// sPower := true ;
16293: LD_ADDR_EXP 88
16297: PUSH
16298: LD_INT 1
16300: ST_TO_ADDR
// if p3 = 33 then
16301: LD_VAR 0 3
16305: PUSH
16306: LD_INT 33
16308: EQUAL
16309: IFFALSE 16319
// sRandom := true ;
16311: LD_ADDR_EXP 89
16315: PUSH
16316: LD_INT 1
16318: ST_TO_ADDR
// if p3 = 34 then
16319: LD_VAR 0 3
16323: PUSH
16324: LD_INT 34
16326: EQUAL
16327: IFFALSE 16337
// sShield := true ;
16329: LD_ADDR_EXP 90
16333: PUSH
16334: LD_INT 1
16336: ST_TO_ADDR
// if p3 = 35 then
16337: LD_VAR 0 3
16341: PUSH
16342: LD_INT 35
16344: EQUAL
16345: IFFALSE 16355
// sTime := true ;
16347: LD_ADDR_EXP 91
16351: PUSH
16352: LD_INT 1
16354: ST_TO_ADDR
// if p3 = 36 then
16355: LD_VAR 0 3
16359: PUSH
16360: LD_INT 36
16362: EQUAL
16363: IFFALSE 16373
// sTools := true ;
16365: LD_ADDR_EXP 92
16369: PUSH
16370: LD_INT 1
16372: ST_TO_ADDR
// if p3 = 101 then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_INT 101
16380: EQUAL
16381: IFFALSE 16391
// sSold := true ;
16383: LD_ADDR_EXP 57
16387: PUSH
16388: LD_INT 1
16390: ST_TO_ADDR
// if p3 = 102 then
16391: LD_VAR 0 3
16395: PUSH
16396: LD_INT 102
16398: EQUAL
16399: IFFALSE 16409
// sDiff := true ;
16401: LD_ADDR_EXP 58
16405: PUSH
16406: LD_INT 1
16408: ST_TO_ADDR
// if p3 = 103 then
16409: LD_VAR 0 3
16413: PUSH
16414: LD_INT 103
16416: EQUAL
16417: IFFALSE 16427
// sFog := true ;
16419: LD_ADDR_EXP 61
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// if p3 = 104 then
16427: LD_VAR 0 3
16431: PUSH
16432: LD_INT 104
16434: EQUAL
16435: IFFALSE 16445
// sReset := true ;
16437: LD_ADDR_EXP 62
16441: PUSH
16442: LD_INT 1
16444: ST_TO_ADDR
// if p3 = 105 then
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 105
16452: EQUAL
16453: IFFALSE 16463
// sSun := true ;
16455: LD_ADDR_EXP 63
16459: PUSH
16460: LD_INT 1
16462: ST_TO_ADDR
// if p3 = 106 then
16463: LD_VAR 0 3
16467: PUSH
16468: LD_INT 106
16470: EQUAL
16471: IFFALSE 16481
// sTiger := true ;
16473: LD_ADDR_EXP 59
16477: PUSH
16478: LD_INT 1
16480: ST_TO_ADDR
// if p3 = 107 then
16481: LD_VAR 0 3
16485: PUSH
16486: LD_INT 107
16488: EQUAL
16489: IFFALSE 16499
// sBomb := true ;
16491: LD_ADDR_EXP 60
16495: PUSH
16496: LD_INT 1
16498: ST_TO_ADDR
// if p3 = 108 then
16499: LD_VAR 0 3
16503: PUSH
16504: LD_INT 108
16506: EQUAL
16507: IFFALSE 16517
// sWound := true ;
16509: LD_ADDR_EXP 68
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// if p3 = 109 then
16517: LD_VAR 0 3
16521: PUSH
16522: LD_INT 109
16524: EQUAL
16525: IFFALSE 16535
// sBetray := true ;
16527: LD_ADDR_EXP 72
16531: PUSH
16532: LD_INT 1
16534: ST_TO_ADDR
// if p3 = 110 then
16535: LD_VAR 0 3
16539: PUSH
16540: LD_INT 110
16542: EQUAL
16543: IFFALSE 16553
// sContamin := true ;
16545: LD_ADDR_EXP 73
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// if p3 = 111 then
16553: LD_VAR 0 3
16557: PUSH
16558: LD_INT 111
16560: EQUAL
16561: IFFALSE 16571
// sOil := true ;
16563: LD_ADDR_EXP 75
16567: PUSH
16568: LD_INT 1
16570: ST_TO_ADDR
// if p3 = 112 then
16571: LD_VAR 0 3
16575: PUSH
16576: LD_INT 112
16578: EQUAL
16579: IFFALSE 16589
// sStu := true ;
16581: LD_ADDR_EXP 79
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// if p3 = 113 then
16589: LD_VAR 0 3
16593: PUSH
16594: LD_INT 113
16596: EQUAL
16597: IFFALSE 16607
// sBazooka := true ;
16599: LD_ADDR_EXP 82
16603: PUSH
16604: LD_INT 1
16606: ST_TO_ADDR
// if p3 = 114 then
16607: LD_VAR 0 3
16611: PUSH
16612: LD_INT 114
16614: EQUAL
16615: IFFALSE 16625
// sMortar := true ;
16617: LD_ADDR_EXP 83
16621: PUSH
16622: LD_INT 1
16624: ST_TO_ADDR
// if p3 = 115 then
16625: LD_VAR 0 3
16629: PUSH
16630: LD_INT 115
16632: EQUAL
16633: IFFALSE 16643
// sRanger := true ;
16635: LD_ADDR_EXP 93
16639: PUSH
16640: LD_INT 1
16642: ST_TO_ADDR
// if p3 = 116 then
16643: LD_VAR 0 3
16647: PUSH
16648: LD_INT 116
16650: EQUAL
16651: IFFALSE 16661
// sComputer := true ;
16653: LD_ADDR_EXP 94
16657: PUSH
16658: LD_INT 1
16660: ST_TO_ADDR
// if p3 = 117 then
16661: LD_VAR 0 3
16665: PUSH
16666: LD_INT 117
16668: EQUAL
16669: IFFALSE 16679
// s30 := true ;
16671: LD_ADDR_EXP 95
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// if p3 = 118 then
16679: LD_VAR 0 3
16683: PUSH
16684: LD_INT 118
16686: EQUAL
16687: IFFALSE 16697
// s60 := true ;
16689: LD_ADDR_EXP 96
16693: PUSH
16694: LD_INT 1
16696: ST_TO_ADDR
// end ; if p2 = hack_mode then
16697: LD_VAR 0 2
16701: PUSH
16702: LD_INT 101
16704: EQUAL
16705: IFFALSE 16833
// begin case p3 of 1 :
16707: LD_VAR 0 3
16711: PUSH
16712: LD_INT 1
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16727
16720: POP
// hHackUnlimitedResources ; 2 :
16721: CALL 28980 0 0
16725: GO 16833
16727: LD_INT 2
16729: DOUBLE
16730: EQUAL
16731: IFTRUE 16735
16733: GO 16742
16735: POP
// hHackSetLevel10 ; 3 :
16736: CALL 29113 0 0
16740: GO 16833
16742: LD_INT 3
16744: DOUBLE
16745: EQUAL
16746: IFTRUE 16750
16748: GO 16757
16750: POP
// hHackSetLevel10YourUnits ; 4 :
16751: CALL 29198 0 0
16755: GO 16833
16757: LD_INT 4
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16772
16765: POP
// hHackInvincible ; 5 :
16766: CALL 29646 0 0
16770: GO 16833
16772: LD_INT 5
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16787
16780: POP
// hHackInvisible ; 6 :
16781: CALL 29757 0 0
16785: GO 16833
16787: LD_INT 6
16789: DOUBLE
16790: EQUAL
16791: IFTRUE 16795
16793: GO 16802
16795: POP
// hHackChangeYourSide ; 7 :
16796: CALL 29814 0 0
16800: GO 16833
16802: LD_INT 7
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 16817
16810: POP
// hHackChangeUnitSide ; 8 :
16811: CALL 29856 0 0
16815: GO 16833
16817: LD_INT 8
16819: DOUBLE
16820: EQUAL
16821: IFTRUE 16825
16823: GO 16832
16825: POP
// hHackFog ; end ;
16826: CALL 29957 0 0
16830: GO 16833
16832: POP
// end ; if p2 = game_save_mode then
16833: LD_VAR 0 2
16837: PUSH
16838: LD_INT 102
16840: EQUAL
16841: IFFALSE 16896
// begin if p3 = 1 then
16843: LD_VAR 0 3
16847: PUSH
16848: LD_INT 1
16850: EQUAL
16851: IFFALSE 16863
// globalGameSaveCounter := p4 ;
16853: LD_ADDR_EXP 39
16857: PUSH
16858: LD_VAR 0 4
16862: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16863: LD_VAR 0 3
16867: PUSH
16868: LD_INT 2
16870: EQUAL
16871: PUSH
16872: LD_EXP 39
16876: AND
16877: IFFALSE 16896
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16879: LD_STRING setGameSaveCounter(
16881: PUSH
16882: LD_EXP 39
16886: STR
16887: PUSH
16888: LD_STRING )
16890: STR
16891: PPUSH
16892: CALL_OW 559
// end ; end ;
16896: LD_VAR 0 7
16900: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16901: LD_INT 0
16903: PPUSH
// streamModeActive := false ;
16904: LD_ADDR_EXP 40
16908: PUSH
16909: LD_INT 0
16911: ST_TO_ADDR
// normalCounter := 36 ;
16912: LD_ADDR_EXP 41
16916: PUSH
16917: LD_INT 36
16919: ST_TO_ADDR
// hardcoreCounter := 18 ;
16920: LD_ADDR_EXP 42
16924: PUSH
16925: LD_INT 18
16927: ST_TO_ADDR
// sRocket := false ;
16928: LD_ADDR_EXP 45
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// sSpeed := false ;
16936: LD_ADDR_EXP 44
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// sEngine := false ;
16944: LD_ADDR_EXP 46
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// sSpec := false ;
16952: LD_ADDR_EXP 43
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// sLevel := false ;
16960: LD_ADDR_EXP 47
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// sArmoury := false ;
16968: LD_ADDR_EXP 48
16972: PUSH
16973: LD_INT 0
16975: ST_TO_ADDR
// sRadar := false ;
16976: LD_ADDR_EXP 49
16980: PUSH
16981: LD_INT 0
16983: ST_TO_ADDR
// sBunker := false ;
16984: LD_ADDR_EXP 50
16988: PUSH
16989: LD_INT 0
16991: ST_TO_ADDR
// sHack := false ;
16992: LD_ADDR_EXP 51
16996: PUSH
16997: LD_INT 0
16999: ST_TO_ADDR
// sFire := false ;
17000: LD_ADDR_EXP 52
17004: PUSH
17005: LD_INT 0
17007: ST_TO_ADDR
// sRefresh := false ;
17008: LD_ADDR_EXP 53
17012: PUSH
17013: LD_INT 0
17015: ST_TO_ADDR
// sExp := false ;
17016: LD_ADDR_EXP 54
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// sDepot := false ;
17024: LD_ADDR_EXP 55
17028: PUSH
17029: LD_INT 0
17031: ST_TO_ADDR
// sFlag := false ;
17032: LD_ADDR_EXP 56
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// sKamikadze := false ;
17040: LD_ADDR_EXP 64
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// sTroll := false ;
17048: LD_ADDR_EXP 65
17052: PUSH
17053: LD_INT 0
17055: ST_TO_ADDR
// sSlow := false ;
17056: LD_ADDR_EXP 66
17060: PUSH
17061: LD_INT 0
17063: ST_TO_ADDR
// sLack := false ;
17064: LD_ADDR_EXP 67
17068: PUSH
17069: LD_INT 0
17071: ST_TO_ADDR
// sTank := false ;
17072: LD_ADDR_EXP 69
17076: PUSH
17077: LD_INT 0
17079: ST_TO_ADDR
// sRemote := false ;
17080: LD_ADDR_EXP 70
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// sPowell := false ;
17088: LD_ADDR_EXP 71
17092: PUSH
17093: LD_INT 0
17095: ST_TO_ADDR
// sTeleport := false ;
17096: LD_ADDR_EXP 74
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// sOilTower := false ;
17104: LD_ADDR_EXP 76
17108: PUSH
17109: LD_INT 0
17111: ST_TO_ADDR
// sShovel := false ;
17112: LD_ADDR_EXP 77
17116: PUSH
17117: LD_INT 0
17119: ST_TO_ADDR
// sSheik := false ;
17120: LD_ADDR_EXP 78
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// sEarthquake := false ;
17128: LD_ADDR_EXP 80
17132: PUSH
17133: LD_INT 0
17135: ST_TO_ADDR
// sAI := false ;
17136: LD_ADDR_EXP 81
17140: PUSH
17141: LD_INT 0
17143: ST_TO_ADDR
// sCargo := false ;
17144: LD_ADDR_EXP 84
17148: PUSH
17149: LD_INT 0
17151: ST_TO_ADDR
// sDLaser := false ;
17152: LD_ADDR_EXP 85
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// sExchange := false ;
17160: LD_ADDR_EXP 86
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// sFac := false ;
17168: LD_ADDR_EXP 87
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// sPower := false ;
17176: LD_ADDR_EXP 88
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// sRandom := false ;
17184: LD_ADDR_EXP 89
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// sShield := false ;
17192: LD_ADDR_EXP 90
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// sTime := false ;
17200: LD_ADDR_EXP 91
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// sTools := false ;
17208: LD_ADDR_EXP 92
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// sSold := false ;
17216: LD_ADDR_EXP 57
17220: PUSH
17221: LD_INT 0
17223: ST_TO_ADDR
// sDiff := false ;
17224: LD_ADDR_EXP 58
17228: PUSH
17229: LD_INT 0
17231: ST_TO_ADDR
// sFog := false ;
17232: LD_ADDR_EXP 61
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// sReset := false ;
17240: LD_ADDR_EXP 62
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// sSun := false ;
17248: LD_ADDR_EXP 63
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// sTiger := false ;
17256: LD_ADDR_EXP 59
17260: PUSH
17261: LD_INT 0
17263: ST_TO_ADDR
// sBomb := false ;
17264: LD_ADDR_EXP 60
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// sWound := false ;
17272: LD_ADDR_EXP 68
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// sBetray := false ;
17280: LD_ADDR_EXP 72
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// sContamin := false ;
17288: LD_ADDR_EXP 73
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// sOil := false ;
17296: LD_ADDR_EXP 75
17300: PUSH
17301: LD_INT 0
17303: ST_TO_ADDR
// sStu := false ;
17304: LD_ADDR_EXP 79
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// sBazooka := false ;
17312: LD_ADDR_EXP 82
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// sMortar := false ;
17320: LD_ADDR_EXP 83
17324: PUSH
17325: LD_INT 0
17327: ST_TO_ADDR
// sRanger := false ;
17328: LD_ADDR_EXP 93
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// sComputer := false ;
17336: LD_ADDR_EXP 94
17340: PUSH
17341: LD_INT 0
17343: ST_TO_ADDR
// s30 := false ;
17344: LD_ADDR_EXP 95
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// s60 := false ;
17352: LD_ADDR_EXP 96
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
// end ;
17360: LD_VAR 0 1
17364: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17365: LD_INT 0
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
// result := [ ] ;
17374: LD_ADDR_VAR 0 2
17378: PUSH
17379: EMPTY
17380: ST_TO_ADDR
// if campaign_id = 1 then
17381: LD_OWVAR 69
17385: PUSH
17386: LD_INT 1
17388: EQUAL
17389: IFFALSE 20555
// begin case mission_number of 1 :
17391: LD_OWVAR 70
17395: PUSH
17396: LD_INT 1
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17480
17404: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 2
17412: PUSH
17413: LD_INT 4
17415: PUSH
17416: LD_INT 11
17418: PUSH
17419: LD_INT 12
17421: PUSH
17422: LD_INT 15
17424: PUSH
17425: LD_INT 16
17427: PUSH
17428: LD_INT 22
17430: PUSH
17431: LD_INT 23
17433: PUSH
17434: LD_INT 26
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 101
17450: PUSH
17451: LD_INT 102
17453: PUSH
17454: LD_INT 106
17456: PUSH
17457: LD_INT 116
17459: PUSH
17460: LD_INT 117
17462: PUSH
17463: LD_INT 118
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: ST_TO_ADDR
17478: GO 20553
17480: LD_INT 2
17482: DOUBLE
17483: EQUAL
17484: IFTRUE 17488
17486: GO 17572
17488: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17489: LD_ADDR_VAR 0 2
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 4
17499: PUSH
17500: LD_INT 11
17502: PUSH
17503: LD_INT 12
17505: PUSH
17506: LD_INT 15
17508: PUSH
17509: LD_INT 16
17511: PUSH
17512: LD_INT 22
17514: PUSH
17515: LD_INT 23
17517: PUSH
17518: LD_INT 26
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 101
17534: PUSH
17535: LD_INT 102
17537: PUSH
17538: LD_INT 105
17540: PUSH
17541: LD_INT 106
17543: PUSH
17544: LD_INT 108
17546: PUSH
17547: LD_INT 116
17549: PUSH
17550: LD_INT 117
17552: PUSH
17553: LD_INT 118
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: ST_TO_ADDR
17570: GO 20553
17572: LD_INT 3
17574: DOUBLE
17575: EQUAL
17576: IFTRUE 17580
17578: GO 17668
17580: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17581: LD_ADDR_VAR 0 2
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: LD_INT 4
17591: PUSH
17592: LD_INT 5
17594: PUSH
17595: LD_INT 11
17597: PUSH
17598: LD_INT 12
17600: PUSH
17601: LD_INT 15
17603: PUSH
17604: LD_INT 16
17606: PUSH
17607: LD_INT 22
17609: PUSH
17610: LD_INT 26
17612: PUSH
17613: LD_INT 36
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 101
17630: PUSH
17631: LD_INT 102
17633: PUSH
17634: LD_INT 105
17636: PUSH
17637: LD_INT 106
17639: PUSH
17640: LD_INT 108
17642: PUSH
17643: LD_INT 116
17645: PUSH
17646: LD_INT 117
17648: PUSH
17649: LD_INT 118
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: ST_TO_ADDR
17666: GO 20553
17668: LD_INT 4
17670: DOUBLE
17671: EQUAL
17672: IFTRUE 17676
17674: GO 17772
17676: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17677: LD_ADDR_VAR 0 2
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: LD_INT 4
17687: PUSH
17688: LD_INT 5
17690: PUSH
17691: LD_INT 8
17693: PUSH
17694: LD_INT 11
17696: PUSH
17697: LD_INT 12
17699: PUSH
17700: LD_INT 15
17702: PUSH
17703: LD_INT 16
17705: PUSH
17706: LD_INT 22
17708: PUSH
17709: LD_INT 23
17711: PUSH
17712: LD_INT 26
17714: PUSH
17715: LD_INT 36
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 101
17734: PUSH
17735: LD_INT 102
17737: PUSH
17738: LD_INT 105
17740: PUSH
17741: LD_INT 106
17743: PUSH
17744: LD_INT 108
17746: PUSH
17747: LD_INT 116
17749: PUSH
17750: LD_INT 117
17752: PUSH
17753: LD_INT 118
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: ST_TO_ADDR
17770: GO 20553
17772: LD_INT 5
17774: DOUBLE
17775: EQUAL
17776: IFTRUE 17780
17778: GO 17892
17780: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17781: LD_ADDR_VAR 0 2
17785: PUSH
17786: LD_INT 2
17788: PUSH
17789: LD_INT 4
17791: PUSH
17792: LD_INT 5
17794: PUSH
17795: LD_INT 6
17797: PUSH
17798: LD_INT 8
17800: PUSH
17801: LD_INT 11
17803: PUSH
17804: LD_INT 12
17806: PUSH
17807: LD_INT 15
17809: PUSH
17810: LD_INT 16
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_INT 23
17818: PUSH
17819: LD_INT 25
17821: PUSH
17822: LD_INT 26
17824: PUSH
17825: LD_INT 36
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 101
17846: PUSH
17847: LD_INT 102
17849: PUSH
17850: LD_INT 105
17852: PUSH
17853: LD_INT 106
17855: PUSH
17856: LD_INT 108
17858: PUSH
17859: LD_INT 109
17861: PUSH
17862: LD_INT 112
17864: PUSH
17865: LD_INT 116
17867: PUSH
17868: LD_INT 117
17870: PUSH
17871: LD_INT 118
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: ST_TO_ADDR
17890: GO 20553
17892: LD_INT 6
17894: DOUBLE
17895: EQUAL
17896: IFTRUE 17900
17898: GO 18032
17900: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17901: LD_ADDR_VAR 0 2
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 4
17911: PUSH
17912: LD_INT 5
17914: PUSH
17915: LD_INT 6
17917: PUSH
17918: LD_INT 8
17920: PUSH
17921: LD_INT 11
17923: PUSH
17924: LD_INT 12
17926: PUSH
17927: LD_INT 15
17929: PUSH
17930: LD_INT 16
17932: PUSH
17933: LD_INT 20
17935: PUSH
17936: LD_INT 21
17938: PUSH
17939: LD_INT 22
17941: PUSH
17942: LD_INT 23
17944: PUSH
17945: LD_INT 25
17947: PUSH
17948: LD_INT 26
17950: PUSH
17951: LD_INT 30
17953: PUSH
17954: LD_INT 31
17956: PUSH
17957: LD_INT 32
17959: PUSH
17960: LD_INT 36
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 101
17986: PUSH
17987: LD_INT 102
17989: PUSH
17990: LD_INT 105
17992: PUSH
17993: LD_INT 106
17995: PUSH
17996: LD_INT 108
17998: PUSH
17999: LD_INT 109
18001: PUSH
18002: LD_INT 112
18004: PUSH
18005: LD_INT 116
18007: PUSH
18008: LD_INT 117
18010: PUSH
18011: LD_INT 118
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: ST_TO_ADDR
18030: GO 20553
18032: LD_INT 7
18034: DOUBLE
18035: EQUAL
18036: IFTRUE 18040
18038: GO 18152
18040: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18041: LD_ADDR_VAR 0 2
18045: PUSH
18046: LD_INT 2
18048: PUSH
18049: LD_INT 4
18051: PUSH
18052: LD_INT 5
18054: PUSH
18055: LD_INT 7
18057: PUSH
18058: LD_INT 11
18060: PUSH
18061: LD_INT 12
18063: PUSH
18064: LD_INT 15
18066: PUSH
18067: LD_INT 16
18069: PUSH
18070: LD_INT 20
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_INT 23
18081: PUSH
18082: LD_INT 25
18084: PUSH
18085: LD_INT 26
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 101
18106: PUSH
18107: LD_INT 102
18109: PUSH
18110: LD_INT 103
18112: PUSH
18113: LD_INT 105
18115: PUSH
18116: LD_INT 106
18118: PUSH
18119: LD_INT 108
18121: PUSH
18122: LD_INT 112
18124: PUSH
18125: LD_INT 116
18127: PUSH
18128: LD_INT 117
18130: PUSH
18131: LD_INT 118
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: ST_TO_ADDR
18150: GO 20553
18152: LD_INT 8
18154: DOUBLE
18155: EQUAL
18156: IFTRUE 18160
18158: GO 18300
18160: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18161: LD_ADDR_VAR 0 2
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 4
18171: PUSH
18172: LD_INT 5
18174: PUSH
18175: LD_INT 6
18177: PUSH
18178: LD_INT 7
18180: PUSH
18181: LD_INT 8
18183: PUSH
18184: LD_INT 11
18186: PUSH
18187: LD_INT 12
18189: PUSH
18190: LD_INT 15
18192: PUSH
18193: LD_INT 16
18195: PUSH
18196: LD_INT 20
18198: PUSH
18199: LD_INT 21
18201: PUSH
18202: LD_INT 22
18204: PUSH
18205: LD_INT 23
18207: PUSH
18208: LD_INT 25
18210: PUSH
18211: LD_INT 26
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: LD_INT 31
18219: PUSH
18220: LD_INT 32
18222: PUSH
18223: LD_INT 36
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 101
18250: PUSH
18251: LD_INT 102
18253: PUSH
18254: LD_INT 103
18256: PUSH
18257: LD_INT 105
18259: PUSH
18260: LD_INT 106
18262: PUSH
18263: LD_INT 108
18265: PUSH
18266: LD_INT 109
18268: PUSH
18269: LD_INT 112
18271: PUSH
18272: LD_INT 116
18274: PUSH
18275: LD_INT 117
18277: PUSH
18278: LD_INT 118
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: ST_TO_ADDR
18298: GO 20553
18300: LD_INT 9
18302: DOUBLE
18303: EQUAL
18304: IFTRUE 18308
18306: GO 18456
18308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18309: LD_ADDR_VAR 0 2
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: LD_INT 4
18319: PUSH
18320: LD_INT 5
18322: PUSH
18323: LD_INT 6
18325: PUSH
18326: LD_INT 7
18328: PUSH
18329: LD_INT 8
18331: PUSH
18332: LD_INT 11
18334: PUSH
18335: LD_INT 12
18337: PUSH
18338: LD_INT 15
18340: PUSH
18341: LD_INT 16
18343: PUSH
18344: LD_INT 20
18346: PUSH
18347: LD_INT 21
18349: PUSH
18350: LD_INT 22
18352: PUSH
18353: LD_INT 23
18355: PUSH
18356: LD_INT 25
18358: PUSH
18359: LD_INT 26
18361: PUSH
18362: LD_INT 28
18364: PUSH
18365: LD_INT 30
18367: PUSH
18368: LD_INT 31
18370: PUSH
18371: LD_INT 32
18373: PUSH
18374: LD_INT 36
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 101
18402: PUSH
18403: LD_INT 102
18405: PUSH
18406: LD_INT 103
18408: PUSH
18409: LD_INT 105
18411: PUSH
18412: LD_INT 106
18414: PUSH
18415: LD_INT 108
18417: PUSH
18418: LD_INT 109
18420: PUSH
18421: LD_INT 112
18423: PUSH
18424: LD_INT 114
18426: PUSH
18427: LD_INT 116
18429: PUSH
18430: LD_INT 117
18432: PUSH
18433: LD_INT 118
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: ST_TO_ADDR
18454: GO 20553
18456: LD_INT 10
18458: DOUBLE
18459: EQUAL
18460: IFTRUE 18464
18462: GO 18660
18464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18465: LD_ADDR_VAR 0 2
18469: PUSH
18470: LD_INT 2
18472: PUSH
18473: LD_INT 4
18475: PUSH
18476: LD_INT 5
18478: PUSH
18479: LD_INT 6
18481: PUSH
18482: LD_INT 7
18484: PUSH
18485: LD_INT 8
18487: PUSH
18488: LD_INT 9
18490: PUSH
18491: LD_INT 10
18493: PUSH
18494: LD_INT 11
18496: PUSH
18497: LD_INT 12
18499: PUSH
18500: LD_INT 13
18502: PUSH
18503: LD_INT 14
18505: PUSH
18506: LD_INT 15
18508: PUSH
18509: LD_INT 16
18511: PUSH
18512: LD_INT 17
18514: PUSH
18515: LD_INT 18
18517: PUSH
18518: LD_INT 19
18520: PUSH
18521: LD_INT 20
18523: PUSH
18524: LD_INT 21
18526: PUSH
18527: LD_INT 22
18529: PUSH
18530: LD_INT 23
18532: PUSH
18533: LD_INT 24
18535: PUSH
18536: LD_INT 25
18538: PUSH
18539: LD_INT 26
18541: PUSH
18542: LD_INT 28
18544: PUSH
18545: LD_INT 30
18547: PUSH
18548: LD_INT 31
18550: PUSH
18551: LD_INT 32
18553: PUSH
18554: LD_INT 36
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 101
18590: PUSH
18591: LD_INT 102
18593: PUSH
18594: LD_INT 103
18596: PUSH
18597: LD_INT 104
18599: PUSH
18600: LD_INT 105
18602: PUSH
18603: LD_INT 106
18605: PUSH
18606: LD_INT 107
18608: PUSH
18609: LD_INT 108
18611: PUSH
18612: LD_INT 109
18614: PUSH
18615: LD_INT 110
18617: PUSH
18618: LD_INT 111
18620: PUSH
18621: LD_INT 112
18623: PUSH
18624: LD_INT 114
18626: PUSH
18627: LD_INT 116
18629: PUSH
18630: LD_INT 117
18632: PUSH
18633: LD_INT 118
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: ST_TO_ADDR
18658: GO 20553
18660: LD_INT 11
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 18872
18668: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18669: LD_ADDR_VAR 0 2
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: LD_INT 4
18682: PUSH
18683: LD_INT 5
18685: PUSH
18686: LD_INT 6
18688: PUSH
18689: LD_INT 7
18691: PUSH
18692: LD_INT 8
18694: PUSH
18695: LD_INT 9
18697: PUSH
18698: LD_INT 10
18700: PUSH
18701: LD_INT 11
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: LD_INT 13
18709: PUSH
18710: LD_INT 14
18712: PUSH
18713: LD_INT 15
18715: PUSH
18716: LD_INT 16
18718: PUSH
18719: LD_INT 17
18721: PUSH
18722: LD_INT 18
18724: PUSH
18725: LD_INT 19
18727: PUSH
18728: LD_INT 20
18730: PUSH
18731: LD_INT 21
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 23
18739: PUSH
18740: LD_INT 24
18742: PUSH
18743: LD_INT 25
18745: PUSH
18746: LD_INT 26
18748: PUSH
18749: LD_INT 28
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 31
18757: PUSH
18758: LD_INT 32
18760: PUSH
18761: LD_INT 34
18763: PUSH
18764: LD_INT 36
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 101
18802: PUSH
18803: LD_INT 102
18805: PUSH
18806: LD_INT 103
18808: PUSH
18809: LD_INT 104
18811: PUSH
18812: LD_INT 105
18814: PUSH
18815: LD_INT 106
18817: PUSH
18818: LD_INT 107
18820: PUSH
18821: LD_INT 108
18823: PUSH
18824: LD_INT 109
18826: PUSH
18827: LD_INT 110
18829: PUSH
18830: LD_INT 111
18832: PUSH
18833: LD_INT 112
18835: PUSH
18836: LD_INT 114
18838: PUSH
18839: LD_INT 116
18841: PUSH
18842: LD_INT 117
18844: PUSH
18845: LD_INT 118
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: ST_TO_ADDR
18870: GO 20553
18872: LD_INT 12
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 19100
18880: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 2
18891: PUSH
18892: LD_INT 3
18894: PUSH
18895: LD_INT 4
18897: PUSH
18898: LD_INT 5
18900: PUSH
18901: LD_INT 6
18903: PUSH
18904: LD_INT 7
18906: PUSH
18907: LD_INT 8
18909: PUSH
18910: LD_INT 9
18912: PUSH
18913: LD_INT 10
18915: PUSH
18916: LD_INT 11
18918: PUSH
18919: LD_INT 12
18921: PUSH
18922: LD_INT 13
18924: PUSH
18925: LD_INT 14
18927: PUSH
18928: LD_INT 15
18930: PUSH
18931: LD_INT 16
18933: PUSH
18934: LD_INT 17
18936: PUSH
18937: LD_INT 18
18939: PUSH
18940: LD_INT 19
18942: PUSH
18943: LD_INT 20
18945: PUSH
18946: LD_INT 21
18948: PUSH
18949: LD_INT 22
18951: PUSH
18952: LD_INT 23
18954: PUSH
18955: LD_INT 24
18957: PUSH
18958: LD_INT 25
18960: PUSH
18961: LD_INT 26
18963: PUSH
18964: LD_INT 27
18966: PUSH
18967: LD_INT 28
18969: PUSH
18970: LD_INT 30
18972: PUSH
18973: LD_INT 31
18975: PUSH
18976: LD_INT 32
18978: PUSH
18979: LD_INT 33
18981: PUSH
18982: LD_INT 34
18984: PUSH
18985: LD_INT 36
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 101
19026: PUSH
19027: LD_INT 102
19029: PUSH
19030: LD_INT 103
19032: PUSH
19033: LD_INT 104
19035: PUSH
19036: LD_INT 105
19038: PUSH
19039: LD_INT 106
19041: PUSH
19042: LD_INT 107
19044: PUSH
19045: LD_INT 108
19047: PUSH
19048: LD_INT 109
19050: PUSH
19051: LD_INT 110
19053: PUSH
19054: LD_INT 111
19056: PUSH
19057: LD_INT 112
19059: PUSH
19060: LD_INT 113
19062: PUSH
19063: LD_INT 114
19065: PUSH
19066: LD_INT 116
19068: PUSH
19069: LD_INT 117
19071: PUSH
19072: LD_INT 118
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: ST_TO_ADDR
19098: GO 20553
19100: LD_INT 13
19102: DOUBLE
19103: EQUAL
19104: IFTRUE 19108
19106: GO 19316
19108: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19109: LD_ADDR_VAR 0 2
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_INT 3
19122: PUSH
19123: LD_INT 4
19125: PUSH
19126: LD_INT 5
19128: PUSH
19129: LD_INT 8
19131: PUSH
19132: LD_INT 9
19134: PUSH
19135: LD_INT 10
19137: PUSH
19138: LD_INT 11
19140: PUSH
19141: LD_INT 12
19143: PUSH
19144: LD_INT 14
19146: PUSH
19147: LD_INT 15
19149: PUSH
19150: LD_INT 16
19152: PUSH
19153: LD_INT 17
19155: PUSH
19156: LD_INT 18
19158: PUSH
19159: LD_INT 19
19161: PUSH
19162: LD_INT 20
19164: PUSH
19165: LD_INT 21
19167: PUSH
19168: LD_INT 22
19170: PUSH
19171: LD_INT 23
19173: PUSH
19174: LD_INT 24
19176: PUSH
19177: LD_INT 25
19179: PUSH
19180: LD_INT 26
19182: PUSH
19183: LD_INT 27
19185: PUSH
19186: LD_INT 28
19188: PUSH
19189: LD_INT 30
19191: PUSH
19192: LD_INT 31
19194: PUSH
19195: LD_INT 32
19197: PUSH
19198: LD_INT 33
19200: PUSH
19201: LD_INT 34
19203: PUSH
19204: LD_INT 36
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 101
19242: PUSH
19243: LD_INT 102
19245: PUSH
19246: LD_INT 103
19248: PUSH
19249: LD_INT 104
19251: PUSH
19252: LD_INT 105
19254: PUSH
19255: LD_INT 106
19257: PUSH
19258: LD_INT 107
19260: PUSH
19261: LD_INT 108
19263: PUSH
19264: LD_INT 109
19266: PUSH
19267: LD_INT 110
19269: PUSH
19270: LD_INT 111
19272: PUSH
19273: LD_INT 112
19275: PUSH
19276: LD_INT 113
19278: PUSH
19279: LD_INT 114
19281: PUSH
19282: LD_INT 116
19284: PUSH
19285: LD_INT 117
19287: PUSH
19288: LD_INT 118
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: ST_TO_ADDR
19314: GO 20553
19316: LD_INT 14
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19548
19324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 3
19338: PUSH
19339: LD_INT 4
19341: PUSH
19342: LD_INT 5
19344: PUSH
19345: LD_INT 6
19347: PUSH
19348: LD_INT 7
19350: PUSH
19351: LD_INT 8
19353: PUSH
19354: LD_INT 9
19356: PUSH
19357: LD_INT 10
19359: PUSH
19360: LD_INT 11
19362: PUSH
19363: LD_INT 12
19365: PUSH
19366: LD_INT 13
19368: PUSH
19369: LD_INT 14
19371: PUSH
19372: LD_INT 15
19374: PUSH
19375: LD_INT 16
19377: PUSH
19378: LD_INT 17
19380: PUSH
19381: LD_INT 18
19383: PUSH
19384: LD_INT 19
19386: PUSH
19387: LD_INT 20
19389: PUSH
19390: LD_INT 21
19392: PUSH
19393: LD_INT 22
19395: PUSH
19396: LD_INT 23
19398: PUSH
19399: LD_INT 24
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 26
19407: PUSH
19408: LD_INT 27
19410: PUSH
19411: LD_INT 28
19413: PUSH
19414: LD_INT 29
19416: PUSH
19417: LD_INT 30
19419: PUSH
19420: LD_INT 31
19422: PUSH
19423: LD_INT 32
19425: PUSH
19426: LD_INT 33
19428: PUSH
19429: LD_INT 34
19431: PUSH
19432: LD_INT 36
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 101
19474: PUSH
19475: LD_INT 102
19477: PUSH
19478: LD_INT 103
19480: PUSH
19481: LD_INT 104
19483: PUSH
19484: LD_INT 105
19486: PUSH
19487: LD_INT 106
19489: PUSH
19490: LD_INT 107
19492: PUSH
19493: LD_INT 108
19495: PUSH
19496: LD_INT 109
19498: PUSH
19499: LD_INT 110
19501: PUSH
19502: LD_INT 111
19504: PUSH
19505: LD_INT 112
19507: PUSH
19508: LD_INT 113
19510: PUSH
19511: LD_INT 114
19513: PUSH
19514: LD_INT 116
19516: PUSH
19517: LD_INT 117
19519: PUSH
19520: LD_INT 118
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: ST_TO_ADDR
19546: GO 20553
19548: LD_INT 15
19550: DOUBLE
19551: EQUAL
19552: IFTRUE 19556
19554: GO 19780
19556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19557: LD_ADDR_VAR 0 2
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 3
19570: PUSH
19571: LD_INT 4
19573: PUSH
19574: LD_INT 5
19576: PUSH
19577: LD_INT 6
19579: PUSH
19580: LD_INT 7
19582: PUSH
19583: LD_INT 8
19585: PUSH
19586: LD_INT 9
19588: PUSH
19589: LD_INT 10
19591: PUSH
19592: LD_INT 11
19594: PUSH
19595: LD_INT 12
19597: PUSH
19598: LD_INT 13
19600: PUSH
19601: LD_INT 14
19603: PUSH
19604: LD_INT 15
19606: PUSH
19607: LD_INT 16
19609: PUSH
19610: LD_INT 17
19612: PUSH
19613: LD_INT 18
19615: PUSH
19616: LD_INT 19
19618: PUSH
19619: LD_INT 20
19621: PUSH
19622: LD_INT 21
19624: PUSH
19625: LD_INT 22
19627: PUSH
19628: LD_INT 23
19630: PUSH
19631: LD_INT 24
19633: PUSH
19634: LD_INT 25
19636: PUSH
19637: LD_INT 26
19639: PUSH
19640: LD_INT 27
19642: PUSH
19643: LD_INT 28
19645: PUSH
19646: LD_INT 29
19648: PUSH
19649: LD_INT 30
19651: PUSH
19652: LD_INT 31
19654: PUSH
19655: LD_INT 32
19657: PUSH
19658: LD_INT 33
19660: PUSH
19661: LD_INT 34
19663: PUSH
19664: LD_INT 36
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 101
19706: PUSH
19707: LD_INT 102
19709: PUSH
19710: LD_INT 103
19712: PUSH
19713: LD_INT 104
19715: PUSH
19716: LD_INT 105
19718: PUSH
19719: LD_INT 106
19721: PUSH
19722: LD_INT 107
19724: PUSH
19725: LD_INT 108
19727: PUSH
19728: LD_INT 109
19730: PUSH
19731: LD_INT 110
19733: PUSH
19734: LD_INT 111
19736: PUSH
19737: LD_INT 112
19739: PUSH
19740: LD_INT 113
19742: PUSH
19743: LD_INT 114
19745: PUSH
19746: LD_INT 116
19748: PUSH
19749: LD_INT 117
19751: PUSH
19752: LD_INT 118
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: ST_TO_ADDR
19778: GO 20553
19780: LD_INT 16
19782: DOUBLE
19783: EQUAL
19784: IFTRUE 19788
19786: GO 19924
19788: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19789: LD_ADDR_VAR 0 2
19793: PUSH
19794: LD_INT 2
19796: PUSH
19797: LD_INT 4
19799: PUSH
19800: LD_INT 5
19802: PUSH
19803: LD_INT 7
19805: PUSH
19806: LD_INT 11
19808: PUSH
19809: LD_INT 12
19811: PUSH
19812: LD_INT 15
19814: PUSH
19815: LD_INT 16
19817: PUSH
19818: LD_INT 20
19820: PUSH
19821: LD_INT 21
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_INT 23
19829: PUSH
19830: LD_INT 25
19832: PUSH
19833: LD_INT 26
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 31
19841: PUSH
19842: LD_INT 32
19844: PUSH
19845: LD_INT 33
19847: PUSH
19848: LD_INT 34
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 101
19874: PUSH
19875: LD_INT 102
19877: PUSH
19878: LD_INT 103
19880: PUSH
19881: LD_INT 106
19883: PUSH
19884: LD_INT 108
19886: PUSH
19887: LD_INT 112
19889: PUSH
19890: LD_INT 113
19892: PUSH
19893: LD_INT 114
19895: PUSH
19896: LD_INT 116
19898: PUSH
19899: LD_INT 117
19901: PUSH
19902: LD_INT 118
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: ST_TO_ADDR
19922: GO 20553
19924: LD_INT 17
19926: DOUBLE
19927: EQUAL
19928: IFTRUE 19932
19930: GO 20156
19932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19933: LD_ADDR_VAR 0 2
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 3
19946: PUSH
19947: LD_INT 4
19949: PUSH
19950: LD_INT 5
19952: PUSH
19953: LD_INT 6
19955: PUSH
19956: LD_INT 7
19958: PUSH
19959: LD_INT 8
19961: PUSH
19962: LD_INT 9
19964: PUSH
19965: LD_INT 10
19967: PUSH
19968: LD_INT 11
19970: PUSH
19971: LD_INT 12
19973: PUSH
19974: LD_INT 13
19976: PUSH
19977: LD_INT 14
19979: PUSH
19980: LD_INT 15
19982: PUSH
19983: LD_INT 16
19985: PUSH
19986: LD_INT 17
19988: PUSH
19989: LD_INT 18
19991: PUSH
19992: LD_INT 19
19994: PUSH
19995: LD_INT 20
19997: PUSH
19998: LD_INT 21
20000: PUSH
20001: LD_INT 22
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 24
20009: PUSH
20010: LD_INT 25
20012: PUSH
20013: LD_INT 26
20015: PUSH
20016: LD_INT 27
20018: PUSH
20019: LD_INT 28
20021: PUSH
20022: LD_INT 29
20024: PUSH
20025: LD_INT 30
20027: PUSH
20028: LD_INT 31
20030: PUSH
20031: LD_INT 32
20033: PUSH
20034: LD_INT 33
20036: PUSH
20037: LD_INT 34
20039: PUSH
20040: LD_INT 36
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 101
20082: PUSH
20083: LD_INT 102
20085: PUSH
20086: LD_INT 103
20088: PUSH
20089: LD_INT 104
20091: PUSH
20092: LD_INT 105
20094: PUSH
20095: LD_INT 106
20097: PUSH
20098: LD_INT 107
20100: PUSH
20101: LD_INT 108
20103: PUSH
20104: LD_INT 109
20106: PUSH
20107: LD_INT 110
20109: PUSH
20110: LD_INT 111
20112: PUSH
20113: LD_INT 112
20115: PUSH
20116: LD_INT 113
20118: PUSH
20119: LD_INT 114
20121: PUSH
20122: LD_INT 116
20124: PUSH
20125: LD_INT 117
20127: PUSH
20128: LD_INT 118
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: ST_TO_ADDR
20154: GO 20553
20156: LD_INT 18
20158: DOUBLE
20159: EQUAL
20160: IFTRUE 20164
20162: GO 20312
20164: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20165: LD_ADDR_VAR 0 2
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 4
20175: PUSH
20176: LD_INT 5
20178: PUSH
20179: LD_INT 7
20181: PUSH
20182: LD_INT 11
20184: PUSH
20185: LD_INT 12
20187: PUSH
20188: LD_INT 15
20190: PUSH
20191: LD_INT 16
20193: PUSH
20194: LD_INT 20
20196: PUSH
20197: LD_INT 21
20199: PUSH
20200: LD_INT 22
20202: PUSH
20203: LD_INT 23
20205: PUSH
20206: LD_INT 25
20208: PUSH
20209: LD_INT 26
20211: PUSH
20212: LD_INT 30
20214: PUSH
20215: LD_INT 31
20217: PUSH
20218: LD_INT 32
20220: PUSH
20221: LD_INT 33
20223: PUSH
20224: LD_INT 34
20226: PUSH
20227: LD_INT 35
20229: PUSH
20230: LD_INT 36
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 101
20258: PUSH
20259: LD_INT 102
20261: PUSH
20262: LD_INT 103
20264: PUSH
20265: LD_INT 106
20267: PUSH
20268: LD_INT 108
20270: PUSH
20271: LD_INT 112
20273: PUSH
20274: LD_INT 113
20276: PUSH
20277: LD_INT 114
20279: PUSH
20280: LD_INT 115
20282: PUSH
20283: LD_INT 116
20285: PUSH
20286: LD_INT 117
20288: PUSH
20289: LD_INT 118
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: ST_TO_ADDR
20310: GO 20553
20312: LD_INT 19
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20552
20320: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20321: LD_ADDR_VAR 0 2
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 3
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: LD_INT 5
20340: PUSH
20341: LD_INT 6
20343: PUSH
20344: LD_INT 7
20346: PUSH
20347: LD_INT 8
20349: PUSH
20350: LD_INT 9
20352: PUSH
20353: LD_INT 10
20355: PUSH
20356: LD_INT 11
20358: PUSH
20359: LD_INT 12
20361: PUSH
20362: LD_INT 13
20364: PUSH
20365: LD_INT 14
20367: PUSH
20368: LD_INT 15
20370: PUSH
20371: LD_INT 16
20373: PUSH
20374: LD_INT 17
20376: PUSH
20377: LD_INT 18
20379: PUSH
20380: LD_INT 19
20382: PUSH
20383: LD_INT 20
20385: PUSH
20386: LD_INT 21
20388: PUSH
20389: LD_INT 22
20391: PUSH
20392: LD_INT 23
20394: PUSH
20395: LD_INT 24
20397: PUSH
20398: LD_INT 25
20400: PUSH
20401: LD_INT 26
20403: PUSH
20404: LD_INT 27
20406: PUSH
20407: LD_INT 28
20409: PUSH
20410: LD_INT 29
20412: PUSH
20413: LD_INT 30
20415: PUSH
20416: LD_INT 31
20418: PUSH
20419: LD_INT 32
20421: PUSH
20422: LD_INT 33
20424: PUSH
20425: LD_INT 34
20427: PUSH
20428: LD_INT 35
20430: PUSH
20431: LD_INT 36
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 101
20474: PUSH
20475: LD_INT 102
20477: PUSH
20478: LD_INT 103
20480: PUSH
20481: LD_INT 104
20483: PUSH
20484: LD_INT 105
20486: PUSH
20487: LD_INT 106
20489: PUSH
20490: LD_INT 107
20492: PUSH
20493: LD_INT 108
20495: PUSH
20496: LD_INT 109
20498: PUSH
20499: LD_INT 110
20501: PUSH
20502: LD_INT 111
20504: PUSH
20505: LD_INT 112
20507: PUSH
20508: LD_INT 113
20510: PUSH
20511: LD_INT 114
20513: PUSH
20514: LD_INT 115
20516: PUSH
20517: LD_INT 116
20519: PUSH
20520: LD_INT 117
20522: PUSH
20523: LD_INT 118
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: ST_TO_ADDR
20550: GO 20553
20552: POP
// end else
20553: GO 20784
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20555: LD_ADDR_VAR 0 2
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 3
20568: PUSH
20569: LD_INT 4
20571: PUSH
20572: LD_INT 5
20574: PUSH
20575: LD_INT 6
20577: PUSH
20578: LD_INT 7
20580: PUSH
20581: LD_INT 8
20583: PUSH
20584: LD_INT 9
20586: PUSH
20587: LD_INT 10
20589: PUSH
20590: LD_INT 11
20592: PUSH
20593: LD_INT 12
20595: PUSH
20596: LD_INT 13
20598: PUSH
20599: LD_INT 14
20601: PUSH
20602: LD_INT 15
20604: PUSH
20605: LD_INT 16
20607: PUSH
20608: LD_INT 17
20610: PUSH
20611: LD_INT 18
20613: PUSH
20614: LD_INT 19
20616: PUSH
20617: LD_INT 20
20619: PUSH
20620: LD_INT 21
20622: PUSH
20623: LD_INT 22
20625: PUSH
20626: LD_INT 23
20628: PUSH
20629: LD_INT 24
20631: PUSH
20632: LD_INT 25
20634: PUSH
20635: LD_INT 26
20637: PUSH
20638: LD_INT 27
20640: PUSH
20641: LD_INT 28
20643: PUSH
20644: LD_INT 29
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: LD_INT 31
20652: PUSH
20653: LD_INT 32
20655: PUSH
20656: LD_INT 33
20658: PUSH
20659: LD_INT 34
20661: PUSH
20662: LD_INT 35
20664: PUSH
20665: LD_INT 36
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 101
20708: PUSH
20709: LD_INT 102
20711: PUSH
20712: LD_INT 103
20714: PUSH
20715: LD_INT 104
20717: PUSH
20718: LD_INT 105
20720: PUSH
20721: LD_INT 106
20723: PUSH
20724: LD_INT 107
20726: PUSH
20727: LD_INT 108
20729: PUSH
20730: LD_INT 109
20732: PUSH
20733: LD_INT 110
20735: PUSH
20736: LD_INT 111
20738: PUSH
20739: LD_INT 112
20741: PUSH
20742: LD_INT 113
20744: PUSH
20745: LD_INT 114
20747: PUSH
20748: LD_INT 115
20750: PUSH
20751: LD_INT 116
20753: PUSH
20754: LD_INT 117
20756: PUSH
20757: LD_INT 118
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: ST_TO_ADDR
// if result then
20784: LD_VAR 0 2
20788: IFFALSE 21574
// begin normal :=  ;
20790: LD_ADDR_VAR 0 5
20794: PUSH
20795: LD_STRING 
20797: ST_TO_ADDR
// hardcore :=  ;
20798: LD_ADDR_VAR 0 6
20802: PUSH
20803: LD_STRING 
20805: ST_TO_ADDR
// active :=  ;
20806: LD_ADDR_VAR 0 7
20810: PUSH
20811: LD_STRING 
20813: ST_TO_ADDR
// for i = 1 to normalCounter do
20814: LD_ADDR_VAR 0 8
20818: PUSH
20819: DOUBLE
20820: LD_INT 1
20822: DEC
20823: ST_TO_ADDR
20824: LD_EXP 41
20828: PUSH
20829: FOR_TO
20830: IFFALSE 20931
// begin tmp := 0 ;
20832: LD_ADDR_VAR 0 3
20836: PUSH
20837: LD_STRING 0
20839: ST_TO_ADDR
// if result [ 1 ] then
20840: LD_VAR 0 2
20844: PUSH
20845: LD_INT 1
20847: ARRAY
20848: IFFALSE 20913
// if result [ 1 ] [ 1 ] = i then
20850: LD_VAR 0 2
20854: PUSH
20855: LD_INT 1
20857: ARRAY
20858: PUSH
20859: LD_INT 1
20861: ARRAY
20862: PUSH
20863: LD_VAR 0 8
20867: EQUAL
20868: IFFALSE 20913
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20870: LD_ADDR_VAR 0 2
20874: PUSH
20875: LD_VAR 0 2
20879: PPUSH
20880: LD_INT 1
20882: PPUSH
20883: LD_VAR 0 2
20887: PUSH
20888: LD_INT 1
20890: ARRAY
20891: PPUSH
20892: LD_INT 1
20894: PPUSH
20895: CALL_OW 3
20899: PPUSH
20900: CALL_OW 1
20904: ST_TO_ADDR
// tmp := 1 ;
20905: LD_ADDR_VAR 0 3
20909: PUSH
20910: LD_STRING 1
20912: ST_TO_ADDR
// end ; normal := normal & tmp ;
20913: LD_ADDR_VAR 0 5
20917: PUSH
20918: LD_VAR 0 5
20922: PUSH
20923: LD_VAR 0 3
20927: STR
20928: ST_TO_ADDR
// end ;
20929: GO 20829
20931: POP
20932: POP
// for i = 1 to hardcoreCounter do
20933: LD_ADDR_VAR 0 8
20937: PUSH
20938: DOUBLE
20939: LD_INT 1
20941: DEC
20942: ST_TO_ADDR
20943: LD_EXP 42
20947: PUSH
20948: FOR_TO
20949: IFFALSE 21054
// begin tmp := 0 ;
20951: LD_ADDR_VAR 0 3
20955: PUSH
20956: LD_STRING 0
20958: ST_TO_ADDR
// if result [ 2 ] then
20959: LD_VAR 0 2
20963: PUSH
20964: LD_INT 2
20966: ARRAY
20967: IFFALSE 21036
// if result [ 2 ] [ 1 ] = 100 + i then
20969: LD_VAR 0 2
20973: PUSH
20974: LD_INT 2
20976: ARRAY
20977: PUSH
20978: LD_INT 1
20980: ARRAY
20981: PUSH
20982: LD_INT 100
20984: PUSH
20985: LD_VAR 0 8
20989: PLUS
20990: EQUAL
20991: IFFALSE 21036
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20993: LD_ADDR_VAR 0 2
20997: PUSH
20998: LD_VAR 0 2
21002: PPUSH
21003: LD_INT 2
21005: PPUSH
21006: LD_VAR 0 2
21010: PUSH
21011: LD_INT 2
21013: ARRAY
21014: PPUSH
21015: LD_INT 1
21017: PPUSH
21018: CALL_OW 3
21022: PPUSH
21023: CALL_OW 1
21027: ST_TO_ADDR
// tmp := 1 ;
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: LD_STRING 1
21035: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21036: LD_ADDR_VAR 0 6
21040: PUSH
21041: LD_VAR 0 6
21045: PUSH
21046: LD_VAR 0 3
21050: STR
21051: ST_TO_ADDR
// end ;
21052: GO 20948
21054: POP
21055: POP
// if isGameLoad then
21056: LD_VAR 0 1
21060: IFFALSE 21535
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21062: LD_ADDR_VAR 0 4
21066: PUSH
21067: LD_EXP 45
21071: PUSH
21072: LD_EXP 44
21076: PUSH
21077: LD_EXP 46
21081: PUSH
21082: LD_EXP 43
21086: PUSH
21087: LD_EXP 47
21091: PUSH
21092: LD_EXP 48
21096: PUSH
21097: LD_EXP 49
21101: PUSH
21102: LD_EXP 50
21106: PUSH
21107: LD_EXP 51
21111: PUSH
21112: LD_EXP 52
21116: PUSH
21117: LD_EXP 53
21121: PUSH
21122: LD_EXP 54
21126: PUSH
21127: LD_EXP 55
21131: PUSH
21132: LD_EXP 56
21136: PUSH
21137: LD_EXP 64
21141: PUSH
21142: LD_EXP 65
21146: PUSH
21147: LD_EXP 66
21151: PUSH
21152: LD_EXP 67
21156: PUSH
21157: LD_EXP 69
21161: PUSH
21162: LD_EXP 70
21166: PUSH
21167: LD_EXP 71
21171: PUSH
21172: LD_EXP 74
21176: PUSH
21177: LD_EXP 76
21181: PUSH
21182: LD_EXP 77
21186: PUSH
21187: LD_EXP 78
21191: PUSH
21192: LD_EXP 80
21196: PUSH
21197: LD_EXP 81
21201: PUSH
21202: LD_EXP 84
21206: PUSH
21207: LD_EXP 85
21211: PUSH
21212: LD_EXP 86
21216: PUSH
21217: LD_EXP 87
21221: PUSH
21222: LD_EXP 88
21226: PUSH
21227: LD_EXP 89
21231: PUSH
21232: LD_EXP 90
21236: PUSH
21237: LD_EXP 91
21241: PUSH
21242: LD_EXP 92
21246: PUSH
21247: LD_EXP 57
21251: PUSH
21252: LD_EXP 58
21256: PUSH
21257: LD_EXP 61
21261: PUSH
21262: LD_EXP 62
21266: PUSH
21267: LD_EXP 63
21271: PUSH
21272: LD_EXP 59
21276: PUSH
21277: LD_EXP 60
21281: PUSH
21282: LD_EXP 68
21286: PUSH
21287: LD_EXP 72
21291: PUSH
21292: LD_EXP 73
21296: PUSH
21297: LD_EXP 75
21301: PUSH
21302: LD_EXP 79
21306: PUSH
21307: LD_EXP 82
21311: PUSH
21312: LD_EXP 83
21316: PUSH
21317: LD_EXP 93
21321: PUSH
21322: LD_EXP 94
21326: PUSH
21327: LD_EXP 95
21331: PUSH
21332: LD_EXP 96
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: ST_TO_ADDR
// tmp :=  ;
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: LD_STRING 
21400: ST_TO_ADDR
// for i = 1 to normalCounter do
21401: LD_ADDR_VAR 0 8
21405: PUSH
21406: DOUBLE
21407: LD_INT 1
21409: DEC
21410: ST_TO_ADDR
21411: LD_EXP 41
21415: PUSH
21416: FOR_TO
21417: IFFALSE 21453
// begin if flags [ i ] then
21419: LD_VAR 0 4
21423: PUSH
21424: LD_VAR 0 8
21428: ARRAY
21429: IFFALSE 21451
// tmp := tmp & i & ; ;
21431: LD_ADDR_VAR 0 3
21435: PUSH
21436: LD_VAR 0 3
21440: PUSH
21441: LD_VAR 0 8
21445: STR
21446: PUSH
21447: LD_STRING ;
21449: STR
21450: ST_TO_ADDR
// end ;
21451: GO 21416
21453: POP
21454: POP
// for i = 1 to hardcoreCounter do
21455: LD_ADDR_VAR 0 8
21459: PUSH
21460: DOUBLE
21461: LD_INT 1
21463: DEC
21464: ST_TO_ADDR
21465: LD_EXP 42
21469: PUSH
21470: FOR_TO
21471: IFFALSE 21517
// begin if flags [ normalCounter + i ] then
21473: LD_VAR 0 4
21477: PUSH
21478: LD_EXP 41
21482: PUSH
21483: LD_VAR 0 8
21487: PLUS
21488: ARRAY
21489: IFFALSE 21515
// tmp := tmp & ( 100 + i ) & ; ;
21491: LD_ADDR_VAR 0 3
21495: PUSH
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 100
21503: PUSH
21504: LD_VAR 0 8
21508: PLUS
21509: STR
21510: PUSH
21511: LD_STRING ;
21513: STR
21514: ST_TO_ADDR
// end ;
21515: GO 21470
21517: POP
21518: POP
// if tmp then
21519: LD_VAR 0 3
21523: IFFALSE 21535
// active := tmp ;
21525: LD_ADDR_VAR 0 7
21529: PUSH
21530: LD_VAR 0 3
21534: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21535: LD_STRING getStreamItemsFromMission("
21537: PUSH
21538: LD_VAR 0 5
21542: STR
21543: PUSH
21544: LD_STRING ","
21546: STR
21547: PUSH
21548: LD_VAR 0 6
21552: STR
21553: PUSH
21554: LD_STRING ","
21556: STR
21557: PUSH
21558: LD_VAR 0 7
21562: STR
21563: PUSH
21564: LD_STRING ")
21566: STR
21567: PPUSH
21568: CALL_OW 559
// end else
21572: GO 21581
// ToLua ( getStreamItemsFromMission("","","") ) ;
21574: LD_STRING getStreamItemsFromMission("","","")
21576: PPUSH
21577: CALL_OW 559
// end ;
21581: LD_VAR 0 2
21585: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21586: LD_EXP 40
21590: PUSH
21591: LD_EXP 45
21595: AND
21596: IFFALSE 21720
21598: GO 21600
21600: DISABLE
21601: LD_INT 0
21603: PPUSH
21604: PPUSH
// begin enable ;
21605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21606: LD_ADDR_VAR 0 2
21610: PUSH
21611: LD_INT 22
21613: PUSH
21614: LD_OWVAR 2
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 34
21628: PUSH
21629: LD_INT 7
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 34
21638: PUSH
21639: LD_INT 45
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 34
21648: PUSH
21649: LD_INT 28
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 34
21658: PUSH
21659: LD_INT 47
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 69
21681: ST_TO_ADDR
// if not tmp then
21682: LD_VAR 0 2
21686: NOT
21687: IFFALSE 21691
// exit ;
21689: GO 21720
// for i in tmp do
21691: LD_ADDR_VAR 0 1
21695: PUSH
21696: LD_VAR 0 2
21700: PUSH
21701: FOR_IN
21702: IFFALSE 21718
// begin SetLives ( i , 0 ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_INT 0
21711: PPUSH
21712: CALL_OW 234
// end ;
21716: GO 21701
21718: POP
21719: POP
// end ;
21720: PPOPN 2
21722: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21723: LD_EXP 40
21727: PUSH
21728: LD_EXP 46
21732: AND
21733: IFFALSE 21817
21735: GO 21737
21737: DISABLE
21738: LD_INT 0
21740: PPUSH
21741: PPUSH
// begin enable ;
21742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_OWVAR 2
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 32
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PPUSH
21774: CALL_OW 69
21778: ST_TO_ADDR
// if not tmp then
21779: LD_VAR 0 2
21783: NOT
21784: IFFALSE 21788
// exit ;
21786: GO 21817
// for i in tmp do
21788: LD_ADDR_VAR 0 1
21792: PUSH
21793: LD_VAR 0 2
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21815
// begin SetLives ( i , 0 ) ;
21801: LD_VAR 0 1
21805: PPUSH
21806: LD_INT 0
21808: PPUSH
21809: CALL_OW 234
// end ;
21813: GO 21798
21815: POP
21816: POP
// end ;
21817: PPOPN 2
21819: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21820: LD_EXP 40
21824: PUSH
21825: LD_EXP 43
21829: AND
21830: IFFALSE 21923
21832: GO 21834
21834: DISABLE
21835: LD_INT 0
21837: PPUSH
// begin enable ;
21838: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21839: LD_ADDR_VAR 0 1
21843: PUSH
21844: LD_INT 22
21846: PUSH
21847: LD_OWVAR 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: LD_INT 25
21861: PUSH
21862: LD_INT 5
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 25
21871: PUSH
21872: LD_INT 9
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 25
21881: PUSH
21882: LD_INT 8
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: PUSH
21904: FOR_IN
21905: IFFALSE 21921
// begin SetClass ( i , 1 ) ;
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 1
21914: PPUSH
21915: CALL_OW 336
// end ;
21919: GO 21904
21921: POP
21922: POP
// end ;
21923: PPOPN 1
21925: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21926: LD_EXP 40
21930: PUSH
21931: LD_EXP 44
21935: AND
21936: PUSH
21937: LD_OWVAR 65
21941: PUSH
21942: LD_INT 7
21944: LESS
21945: AND
21946: IFFALSE 21960
21948: GO 21950
21950: DISABLE
// begin enable ;
21951: ENABLE
// game_speed := 7 ;
21952: LD_ADDR_OWVAR 65
21956: PUSH
21957: LD_INT 7
21959: ST_TO_ADDR
// end ;
21960: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21961: LD_EXP 40
21965: PUSH
21966: LD_EXP 47
21970: AND
21971: IFFALSE 22173
21973: GO 21975
21975: DISABLE
21976: LD_INT 0
21978: PPUSH
21979: PPUSH
21980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_INT 81
21988: PUSH
21989: LD_OWVAR 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 21
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PPUSH
22012: CALL_OW 69
22016: ST_TO_ADDR
// if not tmp then
22017: LD_VAR 0 3
22021: NOT
22022: IFFALSE 22026
// exit ;
22024: GO 22173
// if tmp > 5 then
22026: LD_VAR 0 3
22030: PUSH
22031: LD_INT 5
22033: GREATER
22034: IFFALSE 22046
// k := 5 else
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: LD_INT 5
22043: ST_TO_ADDR
22044: GO 22056
// k := tmp ;
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_VAR 0 3
22055: ST_TO_ADDR
// for i := 1 to k do
22056: LD_ADDR_VAR 0 1
22060: PUSH
22061: DOUBLE
22062: LD_INT 1
22064: DEC
22065: ST_TO_ADDR
22066: LD_VAR 0 2
22070: PUSH
22071: FOR_TO
22072: IFFALSE 22171
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22074: LD_VAR 0 3
22078: PUSH
22079: LD_VAR 0 1
22083: ARRAY
22084: PPUSH
22085: LD_VAR 0 1
22089: PUSH
22090: LD_INT 4
22092: MOD
22093: PUSH
22094: LD_INT 1
22096: PLUS
22097: PPUSH
22098: CALL_OW 259
22102: PUSH
22103: LD_INT 10
22105: LESS
22106: IFFALSE 22169
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22108: LD_VAR 0 3
22112: PUSH
22113: LD_VAR 0 1
22117: ARRAY
22118: PPUSH
22119: LD_VAR 0 1
22123: PUSH
22124: LD_INT 4
22126: MOD
22127: PUSH
22128: LD_INT 1
22130: PLUS
22131: PPUSH
22132: LD_VAR 0 3
22136: PUSH
22137: LD_VAR 0 1
22141: ARRAY
22142: PPUSH
22143: LD_VAR 0 1
22147: PUSH
22148: LD_INT 4
22150: MOD
22151: PUSH
22152: LD_INT 1
22154: PLUS
22155: PPUSH
22156: CALL_OW 259
22160: PUSH
22161: LD_INT 1
22163: PLUS
22164: PPUSH
22165: CALL_OW 237
22169: GO 22071
22171: POP
22172: POP
// end ;
22173: PPOPN 3
22175: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22176: LD_EXP 40
22180: PUSH
22181: LD_EXP 48
22185: AND
22186: IFFALSE 22206
22188: GO 22190
22190: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22191: LD_INT 4
22193: PPUSH
22194: LD_OWVAR 2
22198: PPUSH
22199: LD_INT 0
22201: PPUSH
22202: CALL_OW 324
22206: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22207: LD_EXP 40
22211: PUSH
22212: LD_EXP 77
22216: AND
22217: IFFALSE 22237
22219: GO 22221
22221: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22222: LD_INT 19
22224: PPUSH
22225: LD_OWVAR 2
22229: PPUSH
22230: LD_INT 0
22232: PPUSH
22233: CALL_OW 324
22237: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22238: LD_EXP 40
22242: PUSH
22243: LD_EXP 49
22247: AND
22248: IFFALSE 22350
22250: GO 22252
22252: DISABLE
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
// begin enable ;
22257: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_OWVAR 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 34
22280: PUSH
22281: LD_INT 11
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 34
22290: PUSH
22291: LD_INT 30
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 69
22311: ST_TO_ADDR
// if not tmp then
22312: LD_VAR 0 2
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22350
// for i in tmp do
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_VAR 0 2
22330: PUSH
22331: FOR_IN
22332: IFFALSE 22348
// begin SetLives ( i , 0 ) ;
22334: LD_VAR 0 1
22338: PPUSH
22339: LD_INT 0
22341: PPUSH
22342: CALL_OW 234
// end ;
22346: GO 22331
22348: POP
22349: POP
// end ;
22350: PPOPN 2
22352: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22353: LD_EXP 40
22357: PUSH
22358: LD_EXP 50
22362: AND
22363: IFFALSE 22383
22365: GO 22367
22367: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22368: LD_INT 32
22370: PPUSH
22371: LD_OWVAR 2
22375: PPUSH
22376: LD_INT 0
22378: PPUSH
22379: CALL_OW 324
22383: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22384: LD_EXP 40
22388: PUSH
22389: LD_EXP 51
22393: AND
22394: IFFALSE 22575
22396: GO 22398
22398: DISABLE
22399: LD_INT 0
22401: PPUSH
22402: PPUSH
22403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 22
22411: PUSH
22412: LD_OWVAR 2
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 33
22423: PUSH
22424: LD_INT 3
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PPUSH
22435: CALL_OW 69
22439: ST_TO_ADDR
// if not tmp then
22440: LD_VAR 0 2
22444: NOT
22445: IFFALSE 22449
// exit ;
22447: GO 22575
// side := 0 ;
22449: LD_ADDR_VAR 0 3
22453: PUSH
22454: LD_INT 0
22456: ST_TO_ADDR
// for i := 1 to 8 do
22457: LD_ADDR_VAR 0 1
22461: PUSH
22462: DOUBLE
22463: LD_INT 1
22465: DEC
22466: ST_TO_ADDR
22467: LD_INT 8
22469: PUSH
22470: FOR_TO
22471: IFFALSE 22519
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22473: LD_OWVAR 2
22477: PUSH
22478: LD_VAR 0 1
22482: NONEQUAL
22483: PUSH
22484: LD_OWVAR 2
22488: PPUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 81
22498: PUSH
22499: LD_INT 2
22501: EQUAL
22502: AND
22503: IFFALSE 22517
// begin side := i ;
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_VAR 0 1
22514: ST_TO_ADDR
// break ;
22515: GO 22519
// end ;
22517: GO 22470
22519: POP
22520: POP
// if not side then
22521: LD_VAR 0 3
22525: NOT
22526: IFFALSE 22530
// exit ;
22528: GO 22575
// for i := 1 to tmp do
22530: LD_ADDR_VAR 0 1
22534: PUSH
22535: DOUBLE
22536: LD_INT 1
22538: DEC
22539: ST_TO_ADDR
22540: LD_VAR 0 2
22544: PUSH
22545: FOR_TO
22546: IFFALSE 22573
// if Prob ( 60 ) then
22548: LD_INT 60
22550: PPUSH
22551: CALL_OW 13
22555: IFFALSE 22571
// SetSide ( i , side ) ;
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_VAR 0 3
22566: PPUSH
22567: CALL_OW 235
22571: GO 22545
22573: POP
22574: POP
// end ;
22575: PPOPN 3
22577: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22578: LD_EXP 40
22582: PUSH
22583: LD_EXP 53
22587: AND
22588: IFFALSE 22707
22590: GO 22592
22592: DISABLE
22593: LD_INT 0
22595: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22596: LD_ADDR_VAR 0 1
22600: PUSH
22601: LD_INT 22
22603: PUSH
22604: LD_OWVAR 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 21
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: LD_INT 23
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: PPUSH
22645: CALL_OW 69
22649: PUSH
22650: FOR_IN
22651: IFFALSE 22705
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL_OW 257
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: LD_INT 4
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: IN
22681: IFFALSE 22703
// SetClass ( un , rand ( 1 , 4 ) ) ;
22683: LD_VAR 0 1
22687: PPUSH
22688: LD_INT 1
22690: PPUSH
22691: LD_INT 4
22693: PPUSH
22694: CALL_OW 12
22698: PPUSH
22699: CALL_OW 336
22703: GO 22650
22705: POP
22706: POP
// end ;
22707: PPOPN 1
22709: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22710: LD_EXP 40
22714: PUSH
22715: LD_EXP 52
22719: AND
22720: IFFALSE 22799
22722: GO 22724
22724: DISABLE
22725: LD_INT 0
22727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22728: LD_ADDR_VAR 0 1
22732: PUSH
22733: LD_INT 22
22735: PUSH
22736: LD_OWVAR 2
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PPUSH
22759: CALL_OW 69
22763: ST_TO_ADDR
// if not tmp then
22764: LD_VAR 0 1
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 22799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22773: LD_VAR 0 1
22777: PUSH
22778: LD_INT 1
22780: PPUSH
22781: LD_VAR 0 1
22785: PPUSH
22786: CALL_OW 12
22790: ARRAY
22791: PPUSH
22792: LD_INT 100
22794: PPUSH
22795: CALL_OW 234
// end ;
22799: PPOPN 1
22801: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22802: LD_EXP 40
22806: PUSH
22807: LD_EXP 54
22811: AND
22812: IFFALSE 22910
22814: GO 22816
22816: DISABLE
22817: LD_INT 0
22819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22820: LD_ADDR_VAR 0 1
22824: PUSH
22825: LD_INT 22
22827: PUSH
22828: LD_OWVAR 2
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 21
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PPUSH
22851: CALL_OW 69
22855: ST_TO_ADDR
// if not tmp then
22856: LD_VAR 0 1
22860: NOT
22861: IFFALSE 22865
// exit ;
22863: GO 22910
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22865: LD_VAR 0 1
22869: PUSH
22870: LD_INT 1
22872: PPUSH
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 12
22882: ARRAY
22883: PPUSH
22884: LD_INT 1
22886: PPUSH
22887: LD_INT 4
22889: PPUSH
22890: CALL_OW 12
22894: PPUSH
22895: LD_INT 3000
22897: PPUSH
22898: LD_INT 9000
22900: PPUSH
22901: CALL_OW 12
22905: PPUSH
22906: CALL_OW 492
// end ;
22910: PPOPN 1
22912: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22913: LD_EXP 40
22917: PUSH
22918: LD_EXP 55
22922: AND
22923: IFFALSE 22943
22925: GO 22927
22927: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22928: LD_INT 1
22930: PPUSH
22931: LD_OWVAR 2
22935: PPUSH
22936: LD_INT 0
22938: PPUSH
22939: CALL_OW 324
22943: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22944: LD_EXP 40
22948: PUSH
22949: LD_EXP 56
22953: AND
22954: IFFALSE 23037
22956: GO 22958
22958: DISABLE
22959: LD_INT 0
22961: PPUSH
22962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22963: LD_ADDR_VAR 0 2
22967: PUSH
22968: LD_INT 22
22970: PUSH
22971: LD_OWVAR 2
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 21
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PPUSH
22994: CALL_OW 69
22998: ST_TO_ADDR
// if not tmp then
22999: LD_VAR 0 2
23003: NOT
23004: IFFALSE 23008
// exit ;
23006: GO 23037
// for i in tmp do
23008: LD_ADDR_VAR 0 1
23012: PUSH
23013: LD_VAR 0 2
23017: PUSH
23018: FOR_IN
23019: IFFALSE 23035
// SetBLevel ( i , 10 ) ;
23021: LD_VAR 0 1
23025: PPUSH
23026: LD_INT 10
23028: PPUSH
23029: CALL_OW 241
23033: GO 23018
23035: POP
23036: POP
// end ;
23037: PPOPN 2
23039: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23040: LD_EXP 40
23044: PUSH
23045: LD_EXP 57
23049: AND
23050: IFFALSE 23161
23052: GO 23054
23054: DISABLE
23055: LD_INT 0
23057: PPUSH
23058: PPUSH
23059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23060: LD_ADDR_VAR 0 3
23064: PUSH
23065: LD_INT 22
23067: PUSH
23068: LD_OWVAR 2
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 25
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 69
23095: ST_TO_ADDR
// if not tmp then
23096: LD_VAR 0 3
23100: NOT
23101: IFFALSE 23105
// exit ;
23103: GO 23161
// un := tmp [ rand ( 1 , tmp ) ] ;
23105: LD_ADDR_VAR 0 2
23109: PUSH
23110: LD_VAR 0 3
23114: PUSH
23115: LD_INT 1
23117: PPUSH
23118: LD_VAR 0 3
23122: PPUSH
23123: CALL_OW 12
23127: ARRAY
23128: ST_TO_ADDR
// if Crawls ( un ) then
23129: LD_VAR 0 2
23133: PPUSH
23134: CALL_OW 318
23138: IFFALSE 23149
// ComWalk ( un ) ;
23140: LD_VAR 0 2
23144: PPUSH
23145: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23149: LD_VAR 0 2
23153: PPUSH
23154: LD_INT 5
23156: PPUSH
23157: CALL_OW 336
// end ;
23161: PPOPN 3
23163: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23164: LD_EXP 40
23168: PUSH
23169: LD_EXP 58
23173: AND
23174: PUSH
23175: LD_OWVAR 67
23179: PUSH
23180: LD_INT 4
23182: LESS
23183: AND
23184: IFFALSE 23203
23186: GO 23188
23188: DISABLE
// begin Difficulty := Difficulty + 1 ;
23189: LD_ADDR_OWVAR 67
23193: PUSH
23194: LD_OWVAR 67
23198: PUSH
23199: LD_INT 1
23201: PLUS
23202: ST_TO_ADDR
// end ;
23203: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23204: LD_EXP 40
23208: PUSH
23209: LD_EXP 59
23213: AND
23214: IFFALSE 23317
23216: GO 23218
23218: DISABLE
23219: LD_INT 0
23221: PPUSH
// begin for i := 1 to 5 do
23222: LD_ADDR_VAR 0 1
23226: PUSH
23227: DOUBLE
23228: LD_INT 1
23230: DEC
23231: ST_TO_ADDR
23232: LD_INT 5
23234: PUSH
23235: FOR_TO
23236: IFFALSE 23315
// begin uc_nation := nation_nature ;
23238: LD_ADDR_OWVAR 21
23242: PUSH
23243: LD_INT 0
23245: ST_TO_ADDR
// uc_side := 0 ;
23246: LD_ADDR_OWVAR 20
23250: PUSH
23251: LD_INT 0
23253: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23254: LD_ADDR_OWVAR 29
23258: PUSH
23259: LD_INT 12
23261: PUSH
23262: LD_INT 12
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: ST_TO_ADDR
// hc_agressivity := 20 ;
23269: LD_ADDR_OWVAR 35
23273: PUSH
23274: LD_INT 20
23276: ST_TO_ADDR
// hc_class := class_tiger ;
23277: LD_ADDR_OWVAR 28
23281: PUSH
23282: LD_INT 14
23284: ST_TO_ADDR
// hc_gallery :=  ;
23285: LD_ADDR_OWVAR 33
23289: PUSH
23290: LD_STRING 
23292: ST_TO_ADDR
// hc_name :=  ;
23293: LD_ADDR_OWVAR 26
23297: PUSH
23298: LD_STRING 
23300: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23301: CALL_OW 44
23305: PPUSH
23306: LD_INT 0
23308: PPUSH
23309: CALL_OW 51
// end ;
23313: GO 23235
23315: POP
23316: POP
// end ;
23317: PPOPN 1
23319: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23320: LD_EXP 40
23324: PUSH
23325: LD_EXP 60
23329: AND
23330: IFFALSE 23339
23332: GO 23334
23334: DISABLE
// StreamSibBomb ;
23335: CALL 23340 0 0
23339: END
// export function StreamSibBomb ; var i , x , y ; begin
23340: LD_INT 0
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
// result := false ;
23346: LD_ADDR_VAR 0 1
23350: PUSH
23351: LD_INT 0
23353: ST_TO_ADDR
// for i := 1 to 16 do
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: DOUBLE
23360: LD_INT 1
23362: DEC
23363: ST_TO_ADDR
23364: LD_INT 16
23366: PUSH
23367: FOR_TO
23368: IFFALSE 23567
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23370: LD_ADDR_VAR 0 3
23374: PUSH
23375: LD_INT 10
23377: PUSH
23378: LD_INT 20
23380: PUSH
23381: LD_INT 30
23383: PUSH
23384: LD_INT 40
23386: PUSH
23387: LD_INT 50
23389: PUSH
23390: LD_INT 60
23392: PUSH
23393: LD_INT 70
23395: PUSH
23396: LD_INT 80
23398: PUSH
23399: LD_INT 90
23401: PUSH
23402: LD_INT 100
23404: PUSH
23405: LD_INT 110
23407: PUSH
23408: LD_INT 120
23410: PUSH
23411: LD_INT 130
23413: PUSH
23414: LD_INT 140
23416: PUSH
23417: LD_INT 150
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: PPUSH
23440: LD_INT 15
23442: PPUSH
23443: CALL_OW 12
23447: ARRAY
23448: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23449: LD_ADDR_VAR 0 4
23453: PUSH
23454: LD_INT 10
23456: PUSH
23457: LD_INT 20
23459: PUSH
23460: LD_INT 30
23462: PUSH
23463: LD_INT 40
23465: PUSH
23466: LD_INT 50
23468: PUSH
23469: LD_INT 60
23471: PUSH
23472: LD_INT 70
23474: PUSH
23475: LD_INT 80
23477: PUSH
23478: LD_INT 90
23480: PUSH
23481: LD_INT 100
23483: PUSH
23484: LD_INT 110
23486: PUSH
23487: LD_INT 120
23489: PUSH
23490: LD_INT 130
23492: PUSH
23493: LD_INT 140
23495: PUSH
23496: LD_INT 150
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: PPUSH
23519: LD_INT 15
23521: PPUSH
23522: CALL_OW 12
23526: ARRAY
23527: ST_TO_ADDR
// if ValidHex ( x , y ) then
23528: LD_VAR 0 3
23532: PPUSH
23533: LD_VAR 0 4
23537: PPUSH
23538: CALL_OW 488
23542: IFFALSE 23565
// begin result := [ x , y ] ;
23544: LD_ADDR_VAR 0 1
23548: PUSH
23549: LD_VAR 0 3
23553: PUSH
23554: LD_VAR 0 4
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: ST_TO_ADDR
// break ;
23563: GO 23567
// end ; end ;
23565: GO 23367
23567: POP
23568: POP
// if result then
23569: LD_VAR 0 1
23573: IFFALSE 23633
// begin ToLua ( playSibBomb() ) ;
23575: LD_STRING playSibBomb()
23577: PPUSH
23578: CALL_OW 559
// wait ( 0 0$14 ) ;
23582: LD_INT 490
23584: PPUSH
23585: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23589: LD_VAR 0 1
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 1
23602: PUSH
23603: LD_INT 2
23605: ARRAY
23606: PPUSH
23607: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23611: LD_VAR 0 1
23615: PUSH
23616: LD_INT 1
23618: ARRAY
23619: PPUSH
23620: LD_VAR 0 1
23624: PUSH
23625: LD_INT 2
23627: ARRAY
23628: PPUSH
23629: CALL_OW 429
// end ; end ;
23633: LD_VAR 0 1
23637: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23638: LD_EXP 40
23642: PUSH
23643: LD_EXP 62
23647: AND
23648: IFFALSE 23660
23650: GO 23652
23652: DISABLE
// YouLost (  ) ;
23653: LD_STRING 
23655: PPUSH
23656: CALL_OW 104
23660: END
// every 0 0$1 trigger StreamModeActive and sFog do
23661: LD_EXP 40
23665: PUSH
23666: LD_EXP 61
23670: AND
23671: IFFALSE 23685
23673: GO 23675
23675: DISABLE
// FogOff ( your_side ) ;
23676: LD_OWVAR 2
23680: PPUSH
23681: CALL_OW 344
23685: END
// every 0 0$1 trigger StreamModeActive and sSun do
23686: LD_EXP 40
23690: PUSH
23691: LD_EXP 63
23695: AND
23696: IFFALSE 23724
23698: GO 23700
23700: DISABLE
// begin solar_recharge_percent := 0 ;
23701: LD_ADDR_OWVAR 79
23705: PUSH
23706: LD_INT 0
23708: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23709: LD_INT 10500
23711: PPUSH
23712: CALL_OW 67
// solar_recharge_percent := 100 ;
23716: LD_ADDR_OWVAR 79
23720: PUSH
23721: LD_INT 100
23723: ST_TO_ADDR
// end ;
23724: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23725: LD_EXP 40
23729: PUSH
23730: LD_EXP 64
23734: AND
23735: IFFALSE 23974
23737: GO 23739
23739: DISABLE
23740: LD_INT 0
23742: PPUSH
23743: PPUSH
23744: PPUSH
// begin tmp := [ ] ;
23745: LD_ADDR_VAR 0 3
23749: PUSH
23750: EMPTY
23751: ST_TO_ADDR
// for i := 1 to 6 do
23752: LD_ADDR_VAR 0 1
23756: PUSH
23757: DOUBLE
23758: LD_INT 1
23760: DEC
23761: ST_TO_ADDR
23762: LD_INT 6
23764: PUSH
23765: FOR_TO
23766: IFFALSE 23871
// begin uc_nation := nation_nature ;
23768: LD_ADDR_OWVAR 21
23772: PUSH
23773: LD_INT 0
23775: ST_TO_ADDR
// uc_side := 0 ;
23776: LD_ADDR_OWVAR 20
23780: PUSH
23781: LD_INT 0
23783: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23784: LD_ADDR_OWVAR 29
23788: PUSH
23789: LD_INT 12
23791: PUSH
23792: LD_INT 12
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: ST_TO_ADDR
// hc_agressivity := 20 ;
23799: LD_ADDR_OWVAR 35
23803: PUSH
23804: LD_INT 20
23806: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23807: LD_ADDR_OWVAR 28
23811: PUSH
23812: LD_INT 17
23814: ST_TO_ADDR
// hc_gallery :=  ;
23815: LD_ADDR_OWVAR 33
23819: PUSH
23820: LD_STRING 
23822: ST_TO_ADDR
// hc_name :=  ;
23823: LD_ADDR_OWVAR 26
23827: PUSH
23828: LD_STRING 
23830: ST_TO_ADDR
// un := CreateHuman ;
23831: LD_ADDR_VAR 0 2
23835: PUSH
23836: CALL_OW 44
23840: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_INT 1
23848: PPUSH
23849: CALL_OW 51
// tmp := tmp ^ un ;
23853: LD_ADDR_VAR 0 3
23857: PUSH
23858: LD_VAR 0 3
23862: PUSH
23863: LD_VAR 0 2
23867: ADD
23868: ST_TO_ADDR
// end ;
23869: GO 23765
23871: POP
23872: POP
// repeat wait ( 0 0$1 ) ;
23873: LD_INT 35
23875: PPUSH
23876: CALL_OW 67
// for un in tmp do
23880: LD_ADDR_VAR 0 2
23884: PUSH
23885: LD_VAR 0 3
23889: PUSH
23890: FOR_IN
23891: IFFALSE 23965
// begin if IsDead ( un ) then
23893: LD_VAR 0 2
23897: PPUSH
23898: CALL_OW 301
23902: IFFALSE 23922
// begin tmp := tmp diff un ;
23904: LD_ADDR_VAR 0 3
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_VAR 0 2
23918: DIFF
23919: ST_TO_ADDR
// continue ;
23920: GO 23890
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23922: LD_VAR 0 2
23926: PPUSH
23927: LD_INT 3
23929: PUSH
23930: LD_INT 22
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PPUSH
23944: CALL_OW 69
23948: PPUSH
23949: LD_VAR 0 2
23953: PPUSH
23954: CALL_OW 74
23958: PPUSH
23959: CALL_OW 115
// end ;
23963: GO 23890
23965: POP
23966: POP
// until not tmp ;
23967: LD_VAR 0 3
23971: NOT
23972: IFFALSE 23873
// end ;
23974: PPOPN 3
23976: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23977: LD_EXP 40
23981: PUSH
23982: LD_EXP 65
23986: AND
23987: IFFALSE 24041
23989: GO 23991
23991: DISABLE
// begin ToLua ( displayTroll(); ) ;
23992: LD_STRING displayTroll();
23994: PPUSH
23995: CALL_OW 559
// wait ( 3 3$00 ) ;
23999: LD_INT 6300
24001: PPUSH
24002: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24006: LD_STRING hideTroll();
24008: PPUSH
24009: CALL_OW 559
// wait ( 1 1$00 ) ;
24013: LD_INT 2100
24015: PPUSH
24016: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24020: LD_STRING displayTroll();
24022: PPUSH
24023: CALL_OW 559
// wait ( 1 1$00 ) ;
24027: LD_INT 2100
24029: PPUSH
24030: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24034: LD_STRING hideTroll();
24036: PPUSH
24037: CALL_OW 559
// end ;
24041: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24042: LD_EXP 40
24046: PUSH
24047: LD_EXP 66
24051: AND
24052: IFFALSE 24115
24054: GO 24056
24056: DISABLE
24057: LD_INT 0
24059: PPUSH
// begin p := 0 ;
24060: LD_ADDR_VAR 0 1
24064: PUSH
24065: LD_INT 0
24067: ST_TO_ADDR
// repeat game_speed := 1 ;
24068: LD_ADDR_OWVAR 65
24072: PUSH
24073: LD_INT 1
24075: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24076: LD_INT 35
24078: PPUSH
24079: CALL_OW 67
// p := p + 1 ;
24083: LD_ADDR_VAR 0 1
24087: PUSH
24088: LD_VAR 0 1
24092: PUSH
24093: LD_INT 1
24095: PLUS
24096: ST_TO_ADDR
// until p >= 60 ;
24097: LD_VAR 0 1
24101: PUSH
24102: LD_INT 60
24104: GREATEREQUAL
24105: IFFALSE 24068
// game_speed := 4 ;
24107: LD_ADDR_OWVAR 65
24111: PUSH
24112: LD_INT 4
24114: ST_TO_ADDR
// end ;
24115: PPOPN 1
24117: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24118: LD_EXP 40
24122: PUSH
24123: LD_EXP 67
24127: AND
24128: IFFALSE 24274
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24137: LD_ADDR_VAR 0 1
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_OWVAR 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 30
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: ST_TO_ADDR
// if not depot then
24191: LD_VAR 0 1
24195: NOT
24196: IFFALSE 24200
// exit ;
24198: GO 24274
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24200: LD_ADDR_VAR 0 2
24204: PUSH
24205: LD_VAR 0 1
24209: PUSH
24210: LD_INT 1
24212: PPUSH
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 12
24222: ARRAY
24223: PPUSH
24224: CALL_OW 274
24228: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24229: LD_VAR 0 2
24233: PPUSH
24234: LD_INT 1
24236: PPUSH
24237: LD_INT 0
24239: PPUSH
24240: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24244: LD_VAR 0 2
24248: PPUSH
24249: LD_INT 2
24251: PPUSH
24252: LD_INT 0
24254: PPUSH
24255: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24259: LD_VAR 0 2
24263: PPUSH
24264: LD_INT 3
24266: PPUSH
24267: LD_INT 0
24269: PPUSH
24270: CALL_OW 277
// end ;
24274: PPOPN 2
24276: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24277: LD_EXP 40
24281: PUSH
24282: LD_EXP 68
24286: AND
24287: IFFALSE 24384
24289: GO 24291
24291: DISABLE
24292: LD_INT 0
24294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24295: LD_ADDR_VAR 0 1
24299: PUSH
24300: LD_INT 22
24302: PUSH
24303: LD_OWVAR 2
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 21
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: LD_INT 23
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: PPUSH
24344: CALL_OW 69
24348: ST_TO_ADDR
// if not tmp then
24349: LD_VAR 0 1
24353: NOT
24354: IFFALSE 24358
// exit ;
24356: GO 24384
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24358: LD_VAR 0 1
24362: PUSH
24363: LD_INT 1
24365: PPUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 12
24375: ARRAY
24376: PPUSH
24377: LD_INT 200
24379: PPUSH
24380: CALL_OW 234
// end ;
24384: PPOPN 1
24386: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24387: LD_EXP 40
24391: PUSH
24392: LD_EXP 69
24396: AND
24397: IFFALSE 24476
24399: GO 24401
24401: DISABLE
24402: LD_INT 0
24404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24405: LD_ADDR_VAR 0 1
24409: PUSH
24410: LD_INT 22
24412: PUSH
24413: LD_OWVAR 2
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 21
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PPUSH
24436: CALL_OW 69
24440: ST_TO_ADDR
// if not tmp then
24441: LD_VAR 0 1
24445: NOT
24446: IFFALSE 24450
// exit ;
24448: GO 24476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24450: LD_VAR 0 1
24454: PUSH
24455: LD_INT 1
24457: PPUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL_OW 12
24467: ARRAY
24468: PPUSH
24469: LD_INT 60
24471: PPUSH
24472: CALL_OW 234
// end ;
24476: PPOPN 1
24478: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24479: LD_EXP 40
24483: PUSH
24484: LD_EXP 70
24488: AND
24489: IFFALSE 24588
24491: GO 24493
24493: DISABLE
24494: LD_INT 0
24496: PPUSH
24497: PPUSH
// begin enable ;
24498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24499: LD_ADDR_VAR 0 1
24503: PUSH
24504: LD_INT 22
24506: PUSH
24507: LD_OWVAR 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 61
24518: PUSH
24519: EMPTY
24520: LIST
24521: PUSH
24522: LD_INT 33
24524: PUSH
24525: LD_INT 2
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: PPUSH
24537: CALL_OW 69
24541: ST_TO_ADDR
// if not tmp then
24542: LD_VAR 0 1
24546: NOT
24547: IFFALSE 24551
// exit ;
24549: GO 24588
// for i in tmp do
24551: LD_ADDR_VAR 0 2
24555: PUSH
24556: LD_VAR 0 1
24560: PUSH
24561: FOR_IN
24562: IFFALSE 24586
// if IsControledBy ( i ) then
24564: LD_VAR 0 2
24568: PPUSH
24569: CALL_OW 312
24573: IFFALSE 24584
// ComUnlink ( i ) ;
24575: LD_VAR 0 2
24579: PPUSH
24580: CALL_OW 136
24584: GO 24561
24586: POP
24587: POP
// end ;
24588: PPOPN 2
24590: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24591: LD_EXP 40
24595: PUSH
24596: LD_EXP 71
24600: AND
24601: IFFALSE 24741
24603: GO 24605
24605: DISABLE
24606: LD_INT 0
24608: PPUSH
24609: PPUSH
// begin ToLua ( displayPowell(); ) ;
24610: LD_STRING displayPowell();
24612: PPUSH
24613: CALL_OW 559
// uc_side := 0 ;
24617: LD_ADDR_OWVAR 20
24621: PUSH
24622: LD_INT 0
24624: ST_TO_ADDR
// uc_nation := 2 ;
24625: LD_ADDR_OWVAR 21
24629: PUSH
24630: LD_INT 2
24632: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24633: LD_ADDR_OWVAR 37
24637: PUSH
24638: LD_INT 14
24640: ST_TO_ADDR
// vc_engine := engine_siberite ;
24641: LD_ADDR_OWVAR 39
24645: PUSH
24646: LD_INT 3
24648: ST_TO_ADDR
// vc_control := control_apeman ;
24649: LD_ADDR_OWVAR 38
24653: PUSH
24654: LD_INT 5
24656: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24657: LD_ADDR_OWVAR 40
24661: PUSH
24662: LD_INT 29
24664: ST_TO_ADDR
// un := CreateVehicle ;
24665: LD_ADDR_VAR 0 2
24669: PUSH
24670: CALL_OW 45
24674: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_INT 1
24682: PPUSH
24683: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24687: LD_INT 35
24689: PPUSH
24690: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24694: LD_VAR 0 2
24698: PPUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: PPUSH
24716: LD_VAR 0 2
24720: PPUSH
24721: CALL_OW 74
24725: PPUSH
24726: CALL_OW 115
// until IsDead ( un ) ;
24730: LD_VAR 0 2
24734: PPUSH
24735: CALL_OW 301
24739: IFFALSE 24687
// end ;
24741: PPOPN 2
24743: END
// every 0 0$1 trigger StreamModeActive and sStu do
24744: LD_EXP 40
24748: PUSH
24749: LD_EXP 79
24753: AND
24754: IFFALSE 24770
24756: GO 24758
24758: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24759: LD_STRING displayStucuk();
24761: PPUSH
24762: CALL_OW 559
// ResetFog ;
24766: CALL_OW 335
// end ;
24770: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24771: LD_EXP 40
24775: PUSH
24776: LD_EXP 72
24780: AND
24781: IFFALSE 24922
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_OWVAR 2
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 21
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: ST_TO_ADDR
// if not tmp then
24826: LD_VAR 0 2
24830: NOT
24831: IFFALSE 24835
// exit ;
24833: GO 24922
// un := tmp [ rand ( 1 , tmp ) ] ;
24835: LD_ADDR_VAR 0 1
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: LD_INT 1
24847: PPUSH
24848: LD_VAR 0 2
24852: PPUSH
24853: CALL_OW 12
24857: ARRAY
24858: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24859: LD_VAR 0 1
24863: PPUSH
24864: LD_INT 0
24866: PPUSH
24867: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24871: LD_VAR 0 1
24875: PPUSH
24876: LD_OWVAR 3
24880: PUSH
24881: LD_VAR 0 1
24885: DIFF
24886: PPUSH
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 74
24896: PPUSH
24897: CALL_OW 115
// wait ( 0 0$20 ) ;
24901: LD_INT 700
24903: PPUSH
24904: CALL_OW 67
// SetSide ( un , your_side ) ;
24908: LD_VAR 0 1
24912: PPUSH
24913: LD_OWVAR 2
24917: PPUSH
24918: CALL_OW 235
// end ;
24922: PPOPN 2
24924: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24925: LD_EXP 40
24929: PUSH
24930: LD_EXP 73
24934: AND
24935: IFFALSE 25041
24937: GO 24939
24939: DISABLE
24940: LD_INT 0
24942: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24943: LD_ADDR_VAR 0 1
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_OWVAR 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 30
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 30
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: LIST
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PPUSH
24992: CALL_OW 69
24996: ST_TO_ADDR
// if not depot then
24997: LD_VAR 0 1
25001: NOT
25002: IFFALSE 25006
// exit ;
25004: GO 25041
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25006: LD_VAR 0 1
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: PPUSH
25015: CALL_OW 250
25019: PPUSH
25020: LD_VAR 0 1
25024: PUSH
25025: LD_INT 1
25027: ARRAY
25028: PPUSH
25029: CALL_OW 251
25033: PPUSH
25034: LD_INT 70
25036: PPUSH
25037: CALL_OW 495
// end ;
25041: PPOPN 1
25043: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25044: LD_EXP 40
25048: PUSH
25049: LD_EXP 74
25053: AND
25054: IFFALSE 25265
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
25063: PPUSH
25064: PPUSH
25065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25066: LD_ADDR_VAR 0 5
25070: PUSH
25071: LD_INT 22
25073: PUSH
25074: LD_OWVAR 2
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 21
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PPUSH
25097: CALL_OW 69
25101: ST_TO_ADDR
// if not tmp then
25102: LD_VAR 0 5
25106: NOT
25107: IFFALSE 25111
// exit ;
25109: GO 25265
// for i in tmp do
25111: LD_ADDR_VAR 0 1
25115: PUSH
25116: LD_VAR 0 5
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25263
// begin d := rand ( 0 , 5 ) ;
25124: LD_ADDR_VAR 0 4
25128: PUSH
25129: LD_INT 0
25131: PPUSH
25132: LD_INT 5
25134: PPUSH
25135: CALL_OW 12
25139: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_VAR 0 1
25149: PPUSH
25150: CALL_OW 250
25154: PPUSH
25155: LD_VAR 0 4
25159: PPUSH
25160: LD_INT 3
25162: PPUSH
25163: LD_INT 12
25165: PPUSH
25166: CALL_OW 12
25170: PPUSH
25171: CALL_OW 272
25175: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25176: LD_ADDR_VAR 0 3
25180: PUSH
25181: LD_VAR 0 1
25185: PPUSH
25186: CALL_OW 251
25190: PPUSH
25191: LD_VAR 0 4
25195: PPUSH
25196: LD_INT 3
25198: PPUSH
25199: LD_INT 12
25201: PPUSH
25202: CALL_OW 12
25206: PPUSH
25207: CALL_OW 273
25211: ST_TO_ADDR
// if ValidHex ( x , y ) then
25212: LD_VAR 0 2
25216: PPUSH
25217: LD_VAR 0 3
25221: PPUSH
25222: CALL_OW 488
25226: IFFALSE 25261
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25228: LD_VAR 0 1
25232: PPUSH
25233: LD_VAR 0 2
25237: PPUSH
25238: LD_VAR 0 3
25242: PPUSH
25243: LD_INT 3
25245: PPUSH
25246: LD_INT 6
25248: PPUSH
25249: CALL_OW 12
25253: PPUSH
25254: LD_INT 1
25256: PPUSH
25257: CALL_OW 483
// end ;
25261: GO 25121
25263: POP
25264: POP
// end ;
25265: PPOPN 5
25267: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25268: LD_EXP 40
25272: PUSH
25273: LD_EXP 75
25277: AND
25278: IFFALSE 25372
25280: GO 25282
25282: DISABLE
25283: LD_INT 0
25285: PPUSH
25286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25287: LD_ADDR_VAR 0 2
25291: PUSH
25292: LD_INT 22
25294: PUSH
25295: LD_OWVAR 2
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 32
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 21
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: PPUSH
25329: CALL_OW 69
25333: ST_TO_ADDR
// if not tmp then
25334: LD_VAR 0 2
25338: NOT
25339: IFFALSE 25343
// exit ;
25341: GO 25372
// for i in tmp do
25343: LD_ADDR_VAR 0 1
25347: PUSH
25348: LD_VAR 0 2
25352: PUSH
25353: FOR_IN
25354: IFFALSE 25370
// SetFuel ( i , 0 ) ;
25356: LD_VAR 0 1
25360: PPUSH
25361: LD_INT 0
25363: PPUSH
25364: CALL_OW 240
25368: GO 25353
25370: POP
25371: POP
// end ;
25372: PPOPN 2
25374: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25375: LD_EXP 40
25379: PUSH
25380: LD_EXP 76
25384: AND
25385: IFFALSE 25451
25387: GO 25389
25389: DISABLE
25390: LD_INT 0
25392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25393: LD_ADDR_VAR 0 1
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: LD_OWVAR 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 30
25412: PUSH
25413: LD_INT 29
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PPUSH
25424: CALL_OW 69
25428: ST_TO_ADDR
// if not tmp then
25429: LD_VAR 0 1
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25451
// DestroyUnit ( tmp [ 1 ] ) ;
25438: LD_VAR 0 1
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: CALL_OW 65
// end ;
25451: PPOPN 1
25453: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25454: LD_EXP 40
25458: PUSH
25459: LD_EXP 78
25463: AND
25464: IFFALSE 25593
25466: GO 25468
25468: DISABLE
25469: LD_INT 0
25471: PPUSH
// begin uc_side := 0 ;
25472: LD_ADDR_OWVAR 20
25476: PUSH
25477: LD_INT 0
25479: ST_TO_ADDR
// uc_nation := nation_arabian ;
25480: LD_ADDR_OWVAR 21
25484: PUSH
25485: LD_INT 2
25487: ST_TO_ADDR
// hc_gallery :=  ;
25488: LD_ADDR_OWVAR 33
25492: PUSH
25493: LD_STRING 
25495: ST_TO_ADDR
// hc_name :=  ;
25496: LD_ADDR_OWVAR 26
25500: PUSH
25501: LD_STRING 
25503: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25504: LD_INT 1
25506: PPUSH
25507: LD_INT 11
25509: PPUSH
25510: LD_INT 10
25512: PPUSH
25513: CALL_OW 380
// un := CreateHuman ;
25517: LD_ADDR_VAR 0 1
25521: PUSH
25522: CALL_OW 44
25526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25527: LD_VAR 0 1
25531: PPUSH
25532: LD_INT 1
25534: PPUSH
25535: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25539: LD_INT 35
25541: PPUSH
25542: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25546: LD_VAR 0 1
25550: PPUSH
25551: LD_INT 22
25553: PUSH
25554: LD_OWVAR 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PPUSH
25563: CALL_OW 69
25567: PPUSH
25568: LD_VAR 0 1
25572: PPUSH
25573: CALL_OW 74
25577: PPUSH
25578: CALL_OW 115
// until IsDead ( un ) ;
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL_OW 301
25591: IFFALSE 25539
// end ;
25593: PPOPN 1
25595: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25596: LD_EXP 40
25600: PUSH
25601: LD_EXP 80
25605: AND
25606: IFFALSE 25618
25608: GO 25610
25610: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25611: LD_STRING earthquake(getX(game), 0, 32)
25613: PPUSH
25614: CALL_OW 559
25618: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25619: LD_EXP 40
25623: PUSH
25624: LD_EXP 81
25628: AND
25629: IFFALSE 25720
25631: GO 25633
25633: DISABLE
25634: LD_INT 0
25636: PPUSH
// begin enable ;
25637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25638: LD_ADDR_VAR 0 1
25642: PUSH
25643: LD_INT 22
25645: PUSH
25646: LD_OWVAR 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 21
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 33
25667: PUSH
25668: LD_INT 3
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: PPUSH
25680: CALL_OW 69
25684: ST_TO_ADDR
// if not tmp then
25685: LD_VAR 0 1
25689: NOT
25690: IFFALSE 25694
// exit ;
25692: GO 25720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25694: LD_VAR 0 1
25698: PUSH
25699: LD_INT 1
25701: PPUSH
25702: LD_VAR 0 1
25706: PPUSH
25707: CALL_OW 12
25711: ARRAY
25712: PPUSH
25713: LD_INT 1
25715: PPUSH
25716: CALL_OW 234
// end ;
25720: PPOPN 1
25722: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25723: LD_EXP 40
25727: PUSH
25728: LD_EXP 82
25732: AND
25733: IFFALSE 25874
25735: GO 25737
25737: DISABLE
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
25742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25743: LD_ADDR_VAR 0 3
25747: PUSH
25748: LD_INT 22
25750: PUSH
25751: LD_OWVAR 2
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 25
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 69
25778: ST_TO_ADDR
// if not tmp then
25779: LD_VAR 0 3
25783: NOT
25784: IFFALSE 25788
// exit ;
25786: GO 25874
// un := tmp [ rand ( 1 , tmp ) ] ;
25788: LD_ADDR_VAR 0 2
25792: PUSH
25793: LD_VAR 0 3
25797: PUSH
25798: LD_INT 1
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL_OW 12
25810: ARRAY
25811: ST_TO_ADDR
// if Crawls ( un ) then
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL_OW 318
25821: IFFALSE 25832
// ComWalk ( un ) ;
25823: LD_VAR 0 2
25827: PPUSH
25828: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25832: LD_VAR 0 2
25836: PPUSH
25837: LD_INT 9
25839: PPUSH
25840: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25844: LD_INT 28
25846: PPUSH
25847: LD_OWVAR 2
25851: PPUSH
25852: LD_INT 2
25854: PPUSH
25855: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25859: LD_INT 29
25861: PPUSH
25862: LD_OWVAR 2
25866: PPUSH
25867: LD_INT 2
25869: PPUSH
25870: CALL_OW 322
// end ;
25874: PPOPN 3
25876: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25877: LD_EXP 40
25881: PUSH
25882: LD_EXP 83
25886: AND
25887: IFFALSE 25998
25889: GO 25891
25891: DISABLE
25892: LD_INT 0
25894: PPUSH
25895: PPUSH
25896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_INT 22
25904: PUSH
25905: LD_OWVAR 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 25
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 69
25932: ST_TO_ADDR
// if not tmp then
25933: LD_VAR 0 3
25937: NOT
25938: IFFALSE 25942
// exit ;
25940: GO 25998
// un := tmp [ rand ( 1 , tmp ) ] ;
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_VAR 0 3
25951: PUSH
25952: LD_INT 1
25954: PPUSH
25955: LD_VAR 0 3
25959: PPUSH
25960: CALL_OW 12
25964: ARRAY
25965: ST_TO_ADDR
// if Crawls ( un ) then
25966: LD_VAR 0 2
25970: PPUSH
25971: CALL_OW 318
25975: IFFALSE 25986
// ComWalk ( un ) ;
25977: LD_VAR 0 2
25981: PPUSH
25982: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25986: LD_VAR 0 2
25990: PPUSH
25991: LD_INT 8
25993: PPUSH
25994: CALL_OW 336
// end ;
25998: PPOPN 3
26000: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26001: LD_EXP 40
26005: PUSH
26006: LD_EXP 84
26010: AND
26011: IFFALSE 26155
26013: GO 26015
26015: DISABLE
26016: LD_INT 0
26018: PPUSH
26019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: LD_INT 22
26027: PUSH
26028: LD_OWVAR 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 21
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 34
26052: PUSH
26053: LD_INT 12
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 34
26062: PUSH
26063: LD_INT 51
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 34
26072: PUSH
26073: LD_INT 32
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: PPUSH
26091: CALL_OW 69
26095: ST_TO_ADDR
// if not tmp then
26096: LD_VAR 0 2
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26155
// for i in tmp do
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: LD_VAR 0 2
26114: PUSH
26115: FOR_IN
26116: IFFALSE 26153
// if GetCargo ( i , mat_artifact ) = 0 then
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_INT 4
26125: PPUSH
26126: CALL_OW 289
26130: PUSH
26131: LD_INT 0
26133: EQUAL
26134: IFFALSE 26151
// SetCargo ( i , mat_siberit , 100 ) ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_INT 3
26143: PPUSH
26144: LD_INT 100
26146: PPUSH
26147: CALL_OW 290
26151: GO 26115
26153: POP
26154: POP
// end ;
26155: PPOPN 2
26157: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26158: LD_EXP 40
26162: PUSH
26163: LD_EXP 85
26167: AND
26168: IFFALSE 26351
26170: GO 26172
26172: DISABLE
26173: LD_INT 0
26175: PPUSH
26176: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: LD_INT 22
26184: PUSH
26185: LD_OWVAR 2
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PPUSH
26194: CALL_OW 69
26198: ST_TO_ADDR
// if not tmp then
26199: LD_VAR 0 2
26203: NOT
26204: IFFALSE 26208
// exit ;
26206: GO 26351
// for i := 1 to 2 do
26208: LD_ADDR_VAR 0 1
26212: PUSH
26213: DOUBLE
26214: LD_INT 1
26216: DEC
26217: ST_TO_ADDR
26218: LD_INT 2
26220: PUSH
26221: FOR_TO
26222: IFFALSE 26349
// begin uc_side := your_side ;
26224: LD_ADDR_OWVAR 20
26228: PUSH
26229: LD_OWVAR 2
26233: ST_TO_ADDR
// uc_nation := nation_american ;
26234: LD_ADDR_OWVAR 21
26238: PUSH
26239: LD_INT 1
26241: ST_TO_ADDR
// vc_chassis := us_morphling ;
26242: LD_ADDR_OWVAR 37
26246: PUSH
26247: LD_INT 5
26249: ST_TO_ADDR
// vc_engine := engine_siberite ;
26250: LD_ADDR_OWVAR 39
26254: PUSH
26255: LD_INT 3
26257: ST_TO_ADDR
// vc_control := control_computer ;
26258: LD_ADDR_OWVAR 38
26262: PUSH
26263: LD_INT 3
26265: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26266: LD_ADDR_OWVAR 40
26270: PUSH
26271: LD_INT 10
26273: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26274: LD_VAR 0 2
26278: PUSH
26279: LD_INT 1
26281: ARRAY
26282: PPUSH
26283: CALL_OW 310
26287: NOT
26288: IFFALSE 26335
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26290: CALL_OW 45
26294: PPUSH
26295: LD_VAR 0 2
26299: PUSH
26300: LD_INT 1
26302: ARRAY
26303: PPUSH
26304: CALL_OW 250
26308: PPUSH
26309: LD_VAR 0 2
26313: PUSH
26314: LD_INT 1
26316: ARRAY
26317: PPUSH
26318: CALL_OW 251
26322: PPUSH
26323: LD_INT 12
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 50
26333: GO 26347
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26335: CALL_OW 45
26339: PPUSH
26340: LD_INT 1
26342: PPUSH
26343: CALL_OW 51
// end ;
26347: GO 26221
26349: POP
26350: POP
// end ;
26351: PPOPN 2
26353: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26354: LD_EXP 40
26358: PUSH
26359: LD_EXP 86
26363: AND
26364: IFFALSE 26586
26366: GO 26368
26368: DISABLE
26369: LD_INT 0
26371: PPUSH
26372: PPUSH
26373: PPUSH
26374: PPUSH
26375: PPUSH
26376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26377: LD_ADDR_VAR 0 6
26381: PUSH
26382: LD_INT 22
26384: PUSH
26385: LD_OWVAR 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 21
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 3
26406: PUSH
26407: LD_INT 23
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: PPUSH
26426: CALL_OW 69
26430: ST_TO_ADDR
// if not tmp then
26431: LD_VAR 0 6
26435: NOT
26436: IFFALSE 26440
// exit ;
26438: GO 26586
// s1 := rand ( 1 , 4 ) ;
26440: LD_ADDR_VAR 0 2
26444: PUSH
26445: LD_INT 1
26447: PPUSH
26448: LD_INT 4
26450: PPUSH
26451: CALL_OW 12
26455: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26456: LD_ADDR_VAR 0 4
26460: PUSH
26461: LD_VAR 0 6
26465: PUSH
26466: LD_INT 1
26468: ARRAY
26469: PPUSH
26470: LD_VAR 0 2
26474: PPUSH
26475: CALL_OW 259
26479: ST_TO_ADDR
// if s1 = 1 then
26480: LD_VAR 0 2
26484: PUSH
26485: LD_INT 1
26487: EQUAL
26488: IFFALSE 26508
// s2 := rand ( 2 , 4 ) else
26490: LD_ADDR_VAR 0 3
26494: PUSH
26495: LD_INT 2
26497: PPUSH
26498: LD_INT 4
26500: PPUSH
26501: CALL_OW 12
26505: ST_TO_ADDR
26506: GO 26516
// s2 := 1 ;
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 1
26515: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26516: LD_ADDR_VAR 0 5
26520: PUSH
26521: LD_VAR 0 6
26525: PUSH
26526: LD_INT 1
26528: ARRAY
26529: PPUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 259
26539: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26540: LD_VAR 0 6
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: PPUSH
26549: LD_VAR 0 2
26553: PPUSH
26554: LD_VAR 0 5
26558: PPUSH
26559: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26563: LD_VAR 0 6
26567: PUSH
26568: LD_INT 1
26570: ARRAY
26571: PPUSH
26572: LD_VAR 0 3
26576: PPUSH
26577: LD_VAR 0 4
26581: PPUSH
26582: CALL_OW 237
// end ;
26586: PPOPN 6
26588: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26589: LD_EXP 40
26593: PUSH
26594: LD_EXP 87
26598: AND
26599: IFFALSE 26678
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: LD_INT 22
26614: PUSH
26615: LD_OWVAR 2
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 30
26626: PUSH
26627: LD_INT 3
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PPUSH
26638: CALL_OW 69
26642: ST_TO_ADDR
// if not tmp then
26643: LD_VAR 0 1
26647: NOT
26648: IFFALSE 26652
// exit ;
26650: GO 26678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26652: LD_VAR 0 1
26656: PUSH
26657: LD_INT 1
26659: PPUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 12
26669: ARRAY
26670: PPUSH
26671: LD_INT 1
26673: PPUSH
26674: CALL_OW 234
// end ;
26678: PPOPN 1
26680: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26681: LD_EXP 40
26685: PUSH
26686: LD_EXP 88
26690: AND
26691: IFFALSE 26803
26693: GO 26695
26695: DISABLE
26696: LD_INT 0
26698: PPUSH
26699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26700: LD_ADDR_VAR 0 2
26704: PUSH
26705: LD_INT 22
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 30
26722: PUSH
26723: LD_INT 27
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 30
26732: PUSH
26733: LD_INT 26
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 30
26742: PUSH
26743: LD_INT 28
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PPUSH
26760: CALL_OW 69
26764: ST_TO_ADDR
// if not tmp then
26765: LD_VAR 0 2
26769: NOT
26770: IFFALSE 26774
// exit ;
26772: GO 26803
// for i in tmp do
26774: LD_ADDR_VAR 0 1
26778: PUSH
26779: LD_VAR 0 2
26783: PUSH
26784: FOR_IN
26785: IFFALSE 26801
// SetLives ( i , 1 ) ;
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_INT 1
26794: PPUSH
26795: CALL_OW 234
26799: GO 26784
26801: POP
26802: POP
// end ;
26803: PPOPN 2
26805: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26806: LD_EXP 40
26810: PUSH
26811: LD_EXP 89
26815: AND
26816: IFFALSE 27103
26818: GO 26820
26820: DISABLE
26821: LD_INT 0
26823: PPUSH
26824: PPUSH
26825: PPUSH
// begin i := rand ( 1 , 7 ) ;
26826: LD_ADDR_VAR 0 1
26830: PUSH
26831: LD_INT 1
26833: PPUSH
26834: LD_INT 7
26836: PPUSH
26837: CALL_OW 12
26841: ST_TO_ADDR
// case i of 1 :
26842: LD_VAR 0 1
26846: PUSH
26847: LD_INT 1
26849: DOUBLE
26850: EQUAL
26851: IFTRUE 26855
26853: GO 26865
26855: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26856: LD_STRING earthquake(getX(game), 0, 32)
26858: PPUSH
26859: CALL_OW 559
26863: GO 27103
26865: LD_INT 2
26867: DOUBLE
26868: EQUAL
26869: IFTRUE 26873
26871: GO 26887
26873: POP
// begin ToLua ( displayStucuk(); ) ;
26874: LD_STRING displayStucuk();
26876: PPUSH
26877: CALL_OW 559
// ResetFog ;
26881: CALL_OW 335
// end ; 3 :
26885: GO 27103
26887: LD_INT 3
26889: DOUBLE
26890: EQUAL
26891: IFTRUE 26895
26893: GO 26999
26895: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26896: LD_ADDR_VAR 0 2
26900: PUSH
26901: LD_INT 22
26903: PUSH
26904: LD_OWVAR 2
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 25
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PPUSH
26927: CALL_OW 69
26931: ST_TO_ADDR
// if not tmp then
26932: LD_VAR 0 2
26936: NOT
26937: IFFALSE 26941
// exit ;
26939: GO 27103
// un := tmp [ rand ( 1 , tmp ) ] ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_VAR 0 2
26950: PUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_VAR 0 2
26958: PPUSH
26959: CALL_OW 12
26963: ARRAY
26964: ST_TO_ADDR
// if Crawls ( un ) then
26965: LD_VAR 0 3
26969: PPUSH
26970: CALL_OW 318
26974: IFFALSE 26985
// ComWalk ( un ) ;
26976: LD_VAR 0 3
26980: PPUSH
26981: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26985: LD_VAR 0 3
26989: PPUSH
26990: LD_INT 8
26992: PPUSH
26993: CALL_OW 336
// end ; 4 :
26997: GO 27103
26999: LD_INT 4
27001: DOUBLE
27002: EQUAL
27003: IFTRUE 27007
27005: GO 27081
27007: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27008: LD_ADDR_VAR 0 2
27012: PUSH
27013: LD_INT 22
27015: PUSH
27016: LD_OWVAR 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 29
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 69
27043: ST_TO_ADDR
// if not tmp then
27044: LD_VAR 0 2
27048: NOT
27049: IFFALSE 27053
// exit ;
27051: GO 27103
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27053: LD_VAR 0 2
27057: PUSH
27058: LD_INT 1
27060: ARRAY
27061: PPUSH
27062: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27066: LD_VAR 0 2
27070: PUSH
27071: LD_INT 1
27073: ARRAY
27074: PPUSH
27075: CALL_OW 65
// end ; 5 .. 7 :
27079: GO 27103
27081: LD_INT 5
27083: DOUBLE
27084: GREATEREQUAL
27085: IFFALSE 27093
27087: LD_INT 7
27089: DOUBLE
27090: LESSEQUAL
27091: IFTRUE 27095
27093: GO 27102
27095: POP
// StreamSibBomb ; end ;
27096: CALL 23340 0 0
27100: GO 27103
27102: POP
// end ;
27103: PPOPN 3
27105: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27106: LD_EXP 40
27110: PUSH
27111: LD_EXP 90
27115: AND
27116: IFFALSE 27272
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
27124: PPUSH
27125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27126: LD_ADDR_VAR 0 2
27130: PUSH
27131: LD_INT 81
27133: PUSH
27134: LD_OWVAR 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 21
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 21
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PPUSH
27175: CALL_OW 69
27179: ST_TO_ADDR
// if not tmp then
27180: LD_VAR 0 2
27184: NOT
27185: IFFALSE 27189
// exit ;
27187: GO 27272
// p := 0 ;
27189: LD_ADDR_VAR 0 3
27193: PUSH
27194: LD_INT 0
27196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27197: LD_INT 35
27199: PPUSH
27200: CALL_OW 67
// p := p + 1 ;
27204: LD_ADDR_VAR 0 3
27208: PUSH
27209: LD_VAR 0 3
27213: PUSH
27214: LD_INT 1
27216: PLUS
27217: ST_TO_ADDR
// for i in tmp do
27218: LD_ADDR_VAR 0 1
27222: PUSH
27223: LD_VAR 0 2
27227: PUSH
27228: FOR_IN
27229: IFFALSE 27260
// if GetLives ( i ) < 1000 then
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL_OW 256
27240: PUSH
27241: LD_INT 1000
27243: LESS
27244: IFFALSE 27258
// SetLives ( i , 1000 ) ;
27246: LD_VAR 0 1
27250: PPUSH
27251: LD_INT 1000
27253: PPUSH
27254: CALL_OW 234
27258: GO 27228
27260: POP
27261: POP
// until p > 20 ;
27262: LD_VAR 0 3
27266: PUSH
27267: LD_INT 20
27269: GREATER
27270: IFFALSE 27197
// end ;
27272: PPOPN 3
27274: END
// every 0 0$1 trigger StreamModeActive and sTime do
27275: LD_EXP 40
27279: PUSH
27280: LD_EXP 91
27284: AND
27285: IFFALSE 27320
27287: GO 27289
27289: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27290: LD_INT 28
27292: PPUSH
27293: LD_OWVAR 2
27297: PPUSH
27298: LD_INT 2
27300: PPUSH
27301: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27305: LD_INT 30
27307: PPUSH
27308: LD_OWVAR 2
27312: PPUSH
27313: LD_INT 2
27315: PPUSH
27316: CALL_OW 322
// end ;
27320: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27321: LD_EXP 40
27325: PUSH
27326: LD_EXP 92
27330: AND
27331: IFFALSE 27452
27333: GO 27335
27335: DISABLE
27336: LD_INT 0
27338: PPUSH
27339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 22
27347: PUSH
27348: LD_OWVAR 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 21
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 3
27369: PUSH
27370: LD_INT 23
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: PPUSH
27389: CALL_OW 69
27393: ST_TO_ADDR
// if not tmp then
27394: LD_VAR 0 2
27398: NOT
27399: IFFALSE 27403
// exit ;
27401: GO 27452
// for i in tmp do
27403: LD_ADDR_VAR 0 1
27407: PUSH
27408: LD_VAR 0 2
27412: PUSH
27413: FOR_IN
27414: IFFALSE 27450
// begin if Crawls ( i ) then
27416: LD_VAR 0 1
27420: PPUSH
27421: CALL_OW 318
27425: IFFALSE 27436
// ComWalk ( i ) ;
27427: LD_VAR 0 1
27431: PPUSH
27432: CALL_OW 138
// SetClass ( i , 2 ) ;
27436: LD_VAR 0 1
27440: PPUSH
27441: LD_INT 2
27443: PPUSH
27444: CALL_OW 336
// end ;
27448: GO 27413
27450: POP
27451: POP
// end ;
27452: PPOPN 2
27454: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27455: LD_EXP 40
27459: PUSH
27460: LD_EXP 93
27464: AND
27465: IFFALSE 27753
27467: GO 27469
27469: DISABLE
27470: LD_INT 0
27472: PPUSH
27473: PPUSH
27474: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27475: LD_OWVAR 2
27479: PPUSH
27480: LD_INT 9
27482: PPUSH
27483: LD_INT 1
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27493: LD_INT 9
27495: PPUSH
27496: LD_OWVAR 2
27500: PPUSH
27501: CALL_OW 343
// uc_side := 9 ;
27505: LD_ADDR_OWVAR 20
27509: PUSH
27510: LD_INT 9
27512: ST_TO_ADDR
// uc_nation := 2 ;
27513: LD_ADDR_OWVAR 21
27517: PUSH
27518: LD_INT 2
27520: ST_TO_ADDR
// hc_name := Dark Warrior ;
27521: LD_ADDR_OWVAR 26
27525: PUSH
27526: LD_STRING Dark Warrior
27528: ST_TO_ADDR
// hc_gallery :=  ;
27529: LD_ADDR_OWVAR 33
27533: PUSH
27534: LD_STRING 
27536: ST_TO_ADDR
// hc_noskilllimit := true ;
27537: LD_ADDR_OWVAR 76
27541: PUSH
27542: LD_INT 1
27544: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27545: LD_ADDR_OWVAR 31
27549: PUSH
27550: LD_INT 30
27552: PUSH
27553: LD_INT 30
27555: PUSH
27556: LD_INT 30
27558: PUSH
27559: LD_INT 30
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: ST_TO_ADDR
// un := CreateHuman ;
27568: LD_ADDR_VAR 0 3
27572: PUSH
27573: CALL_OW 44
27577: ST_TO_ADDR
// hc_noskilllimit := false ;
27578: LD_ADDR_OWVAR 76
27582: PUSH
27583: LD_INT 0
27585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27586: LD_VAR 0 3
27590: PPUSH
27591: LD_INT 1
27593: PPUSH
27594: CALL_OW 51
// ToLua ( playRanger() ) ;
27598: LD_STRING playRanger()
27600: PPUSH
27601: CALL_OW 559
// p := 0 ;
27605: LD_ADDR_VAR 0 2
27609: PUSH
27610: LD_INT 0
27612: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27613: LD_INT 35
27615: PPUSH
27616: CALL_OW 67
// p := p + 1 ;
27620: LD_ADDR_VAR 0 2
27624: PUSH
27625: LD_VAR 0 2
27629: PUSH
27630: LD_INT 1
27632: PLUS
27633: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27634: LD_VAR 0 3
27638: PPUSH
27639: CALL_OW 256
27643: PUSH
27644: LD_INT 1000
27646: LESS
27647: IFFALSE 27661
// SetLives ( un , 1000 ) ;
27649: LD_VAR 0 3
27653: PPUSH
27654: LD_INT 1000
27656: PPUSH
27657: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27661: LD_VAR 0 3
27665: PPUSH
27666: LD_INT 81
27668: PUSH
27669: LD_OWVAR 2
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 91
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 30
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PPUSH
27698: CALL_OW 69
27702: PPUSH
27703: LD_VAR 0 3
27707: PPUSH
27708: CALL_OW 74
27712: PPUSH
27713: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27717: LD_VAR 0 2
27721: PUSH
27722: LD_INT 80
27724: GREATER
27725: PUSH
27726: LD_VAR 0 3
27730: PPUSH
27731: CALL_OW 301
27735: OR
27736: IFFALSE 27613
// if un then
27738: LD_VAR 0 3
27742: IFFALSE 27753
// RemoveUnit ( un ) ;
27744: LD_VAR 0 3
27748: PPUSH
27749: CALL_OW 64
// end ;
27753: PPOPN 3
27755: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27756: LD_EXP 94
27760: IFFALSE 27876
27762: GO 27764
27764: DISABLE
27765: LD_INT 0
27767: PPUSH
27768: PPUSH
27769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27770: LD_ADDR_VAR 0 2
27774: PUSH
27775: LD_INT 81
27777: PUSH
27778: LD_OWVAR 2
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 21
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PPUSH
27801: CALL_OW 69
27805: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27806: LD_STRING playComputer()
27808: PPUSH
27809: CALL_OW 559
// if not tmp then
27813: LD_VAR 0 2
27817: NOT
27818: IFFALSE 27822
// exit ;
27820: GO 27876
// for i in tmp do
27822: LD_ADDR_VAR 0 1
27826: PUSH
27827: LD_VAR 0 2
27831: PUSH
27832: FOR_IN
27833: IFFALSE 27874
// for j := 1 to 4 do
27835: LD_ADDR_VAR 0 3
27839: PUSH
27840: DOUBLE
27841: LD_INT 1
27843: DEC
27844: ST_TO_ADDR
27845: LD_INT 4
27847: PUSH
27848: FOR_TO
27849: IFFALSE 27870
// SetSkill ( i , j , 10 ) ;
27851: LD_VAR 0 1
27855: PPUSH
27856: LD_VAR 0 3
27860: PPUSH
27861: LD_INT 10
27863: PPUSH
27864: CALL_OW 237
27868: GO 27848
27870: POP
27871: POP
27872: GO 27832
27874: POP
27875: POP
// end ;
27876: PPOPN 3
27878: END
// every 0 0$1 trigger s30 do var i , tmp ;
27879: LD_EXP 95
27883: IFFALSE 27952
27885: GO 27887
27887: DISABLE
27888: LD_INT 0
27890: PPUSH
27891: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27892: LD_ADDR_VAR 0 2
27896: PUSH
27897: LD_INT 22
27899: PUSH
27900: LD_OWVAR 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PPUSH
27909: CALL_OW 69
27913: ST_TO_ADDR
// if not tmp then
27914: LD_VAR 0 2
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 27952
// for i in tmp do
27923: LD_ADDR_VAR 0 1
27927: PUSH
27928: LD_VAR 0 2
27932: PUSH
27933: FOR_IN
27934: IFFALSE 27950
// SetLives ( i , 300 ) ;
27936: LD_VAR 0 1
27940: PPUSH
27941: LD_INT 300
27943: PPUSH
27944: CALL_OW 234
27948: GO 27933
27950: POP
27951: POP
// end ;
27952: PPOPN 2
27954: END
// every 0 0$1 trigger s60 do var i , tmp ;
27955: LD_EXP 96
27959: IFFALSE 28028
27961: GO 27963
27963: DISABLE
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27968: LD_ADDR_VAR 0 2
27972: PUSH
27973: LD_INT 22
27975: PUSH
27976: LD_OWVAR 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: ST_TO_ADDR
// if not tmp then
27990: LD_VAR 0 2
27994: NOT
27995: IFFALSE 27999
// exit ;
27997: GO 28028
// for i in tmp do
27999: LD_ADDR_VAR 0 1
28003: PUSH
28004: LD_VAR 0 2
28008: PUSH
28009: FOR_IN
28010: IFFALSE 28026
// SetLives ( i , 600 ) ;
28012: LD_VAR 0 1
28016: PPUSH
28017: LD_INT 600
28019: PPUSH
28020: CALL_OW 234
28024: GO 28009
28026: POP
28027: POP
// end ;
28028: PPOPN 2
28030: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28031: LD_INT 0
28033: PPUSH
// case cmd of 301 :
28034: LD_VAR 0 1
28038: PUSH
28039: LD_INT 301
28041: DOUBLE
28042: EQUAL
28043: IFTRUE 28047
28045: GO 28079
28047: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28048: LD_VAR 0 6
28052: PPUSH
28053: LD_VAR 0 7
28057: PPUSH
28058: LD_VAR 0 8
28062: PPUSH
28063: LD_VAR 0 4
28067: PPUSH
28068: LD_VAR 0 5
28072: PPUSH
28073: CALL 29288 0 5
28077: GO 28200
28079: LD_INT 302
28081: DOUBLE
28082: EQUAL
28083: IFTRUE 28087
28085: GO 28124
28087: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28088: LD_VAR 0 6
28092: PPUSH
28093: LD_VAR 0 7
28097: PPUSH
28098: LD_VAR 0 8
28102: PPUSH
28103: LD_VAR 0 9
28107: PPUSH
28108: LD_VAR 0 4
28112: PPUSH
28113: LD_VAR 0 5
28117: PPUSH
28118: CALL 29379 0 6
28122: GO 28200
28124: LD_INT 303
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28169
28132: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28133: LD_VAR 0 6
28137: PPUSH
28138: LD_VAR 0 7
28142: PPUSH
28143: LD_VAR 0 8
28147: PPUSH
28148: LD_VAR 0 9
28152: PPUSH
28153: LD_VAR 0 4
28157: PPUSH
28158: LD_VAR 0 5
28162: PPUSH
28163: CALL 28205 0 6
28167: GO 28200
28169: LD_INT 304
28171: DOUBLE
28172: EQUAL
28173: IFTRUE 28177
28175: GO 28199
28177: POP
// hHackTeleport ( unit , x , y ) ; end ;
28178: LD_VAR 0 2
28182: PPUSH
28183: LD_VAR 0 4
28187: PPUSH
28188: LD_VAR 0 5
28192: PPUSH
28193: CALL 29972 0 3
28197: GO 28200
28199: POP
// end ;
28200: LD_VAR 0 12
28204: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28205: LD_INT 0
28207: PPUSH
28208: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28209: LD_VAR 0 1
28213: PUSH
28214: LD_INT 1
28216: LESS
28217: PUSH
28218: LD_VAR 0 1
28222: PUSH
28223: LD_INT 3
28225: GREATER
28226: OR
28227: PUSH
28228: LD_VAR 0 5
28232: PPUSH
28233: LD_VAR 0 6
28237: PPUSH
28238: CALL_OW 428
28242: OR
28243: IFFALSE 28247
// exit ;
28245: GO 28975
// uc_side := your_side ;
28247: LD_ADDR_OWVAR 20
28251: PUSH
28252: LD_OWVAR 2
28256: ST_TO_ADDR
// uc_nation := nation ;
28257: LD_ADDR_OWVAR 21
28261: PUSH
28262: LD_VAR 0 1
28266: ST_TO_ADDR
// bc_level = 1 ;
28267: LD_ADDR_OWVAR 43
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// case btype of 1 :
28275: LD_VAR 0 2
28279: PUSH
28280: LD_INT 1
28282: DOUBLE
28283: EQUAL
28284: IFTRUE 28288
28286: GO 28299
28288: POP
// bc_type := b_depot ; 2 :
28289: LD_ADDR_OWVAR 42
28293: PUSH
28294: LD_INT 0
28296: ST_TO_ADDR
28297: GO 28919
28299: LD_INT 2
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28318
28307: POP
// bc_type := b_warehouse ; 3 :
28308: LD_ADDR_OWVAR 42
28312: PUSH
28313: LD_INT 1
28315: ST_TO_ADDR
28316: GO 28919
28318: LD_INT 3
28320: DOUBLE
28321: EQUAL
28322: IFTRUE 28326
28324: GO 28337
28326: POP
// bc_type := b_lab ; 4 .. 9 :
28327: LD_ADDR_OWVAR 42
28331: PUSH
28332: LD_INT 6
28334: ST_TO_ADDR
28335: GO 28919
28337: LD_INT 4
28339: DOUBLE
28340: GREATEREQUAL
28341: IFFALSE 28349
28343: LD_INT 9
28345: DOUBLE
28346: LESSEQUAL
28347: IFTRUE 28351
28349: GO 28411
28351: POP
// begin bc_type := b_lab_half ;
28352: LD_ADDR_OWVAR 42
28356: PUSH
28357: LD_INT 7
28359: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28360: LD_ADDR_OWVAR 44
28364: PUSH
28365: LD_INT 10
28367: PUSH
28368: LD_INT 11
28370: PUSH
28371: LD_INT 12
28373: PUSH
28374: LD_INT 15
28376: PUSH
28377: LD_INT 14
28379: PUSH
28380: LD_INT 13
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: PUSH
28391: LD_VAR 0 2
28395: PUSH
28396: LD_INT 3
28398: MINUS
28399: ARRAY
28400: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28401: LD_ADDR_OWVAR 45
28405: PUSH
28406: LD_INT 9
28408: ST_TO_ADDR
// end ; 10 .. 13 :
28409: GO 28919
28411: LD_INT 10
28413: DOUBLE
28414: GREATEREQUAL
28415: IFFALSE 28423
28417: LD_INT 13
28419: DOUBLE
28420: LESSEQUAL
28421: IFTRUE 28425
28423: GO 28502
28425: POP
// begin bc_type := b_lab_full ;
28426: LD_ADDR_OWVAR 42
28430: PUSH
28431: LD_INT 8
28433: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28434: LD_ADDR_OWVAR 44
28438: PUSH
28439: LD_INT 10
28441: PUSH
28442: LD_INT 12
28444: PUSH
28445: LD_INT 14
28447: PUSH
28448: LD_INT 13
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: PUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_INT 9
28464: MINUS
28465: ARRAY
28466: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28467: LD_ADDR_OWVAR 45
28471: PUSH
28472: LD_INT 11
28474: PUSH
28475: LD_INT 15
28477: PUSH
28478: LD_INT 12
28480: PUSH
28481: LD_INT 15
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: PUSH
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 9
28497: MINUS
28498: ARRAY
28499: ST_TO_ADDR
// end ; 14 :
28500: GO 28919
28502: LD_INT 14
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28521
28510: POP
// bc_type := b_workshop ; 15 :
28511: LD_ADDR_OWVAR 42
28515: PUSH
28516: LD_INT 2
28518: ST_TO_ADDR
28519: GO 28919
28521: LD_INT 15
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28540
28529: POP
// bc_type := b_factory ; 16 :
28530: LD_ADDR_OWVAR 42
28534: PUSH
28535: LD_INT 3
28537: ST_TO_ADDR
28538: GO 28919
28540: LD_INT 16
28542: DOUBLE
28543: EQUAL
28544: IFTRUE 28548
28546: GO 28559
28548: POP
// bc_type := b_ext_gun ; 17 :
28549: LD_ADDR_OWVAR 42
28553: PUSH
28554: LD_INT 17
28556: ST_TO_ADDR
28557: GO 28919
28559: LD_INT 17
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28595
28567: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28568: LD_ADDR_OWVAR 42
28572: PUSH
28573: LD_INT 19
28575: PUSH
28576: LD_INT 23
28578: PUSH
28579: LD_INT 19
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: PUSH
28587: LD_VAR 0 1
28591: ARRAY
28592: ST_TO_ADDR
28593: GO 28919
28595: LD_INT 18
28597: DOUBLE
28598: EQUAL
28599: IFTRUE 28603
28601: GO 28614
28603: POP
// bc_type := b_ext_radar ; 19 :
28604: LD_ADDR_OWVAR 42
28608: PUSH
28609: LD_INT 20
28611: ST_TO_ADDR
28612: GO 28919
28614: LD_INT 19
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28633
28622: POP
// bc_type := b_ext_radio ; 20 :
28623: LD_ADDR_OWVAR 42
28627: PUSH
28628: LD_INT 22
28630: ST_TO_ADDR
28631: GO 28919
28633: LD_INT 20
28635: DOUBLE
28636: EQUAL
28637: IFTRUE 28641
28639: GO 28652
28641: POP
// bc_type := b_ext_siberium ; 21 :
28642: LD_ADDR_OWVAR 42
28646: PUSH
28647: LD_INT 21
28649: ST_TO_ADDR
28650: GO 28919
28652: LD_INT 21
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 28671
28660: POP
// bc_type := b_ext_computer ; 22 :
28661: LD_ADDR_OWVAR 42
28665: PUSH
28666: LD_INT 24
28668: ST_TO_ADDR
28669: GO 28919
28671: LD_INT 22
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28690
28679: POP
// bc_type := b_ext_track ; 23 :
28680: LD_ADDR_OWVAR 42
28684: PUSH
28685: LD_INT 16
28687: ST_TO_ADDR
28688: GO 28919
28690: LD_INT 23
28692: DOUBLE
28693: EQUAL
28694: IFTRUE 28698
28696: GO 28709
28698: POP
// bc_type := b_ext_laser ; 24 :
28699: LD_ADDR_OWVAR 42
28703: PUSH
28704: LD_INT 25
28706: ST_TO_ADDR
28707: GO 28919
28709: LD_INT 24
28711: DOUBLE
28712: EQUAL
28713: IFTRUE 28717
28715: GO 28728
28717: POP
// bc_type := b_control_tower ; 25 :
28718: LD_ADDR_OWVAR 42
28722: PUSH
28723: LD_INT 36
28725: ST_TO_ADDR
28726: GO 28919
28728: LD_INT 25
28730: DOUBLE
28731: EQUAL
28732: IFTRUE 28736
28734: GO 28747
28736: POP
// bc_type := b_breastwork ; 26 :
28737: LD_ADDR_OWVAR 42
28741: PUSH
28742: LD_INT 31
28744: ST_TO_ADDR
28745: GO 28919
28747: LD_INT 26
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28766
28755: POP
// bc_type := b_bunker ; 27 :
28756: LD_ADDR_OWVAR 42
28760: PUSH
28761: LD_INT 32
28763: ST_TO_ADDR
28764: GO 28919
28766: LD_INT 27
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28785
28774: POP
// bc_type := b_turret ; 28 :
28775: LD_ADDR_OWVAR 42
28779: PUSH
28780: LD_INT 33
28782: ST_TO_ADDR
28783: GO 28919
28785: LD_INT 28
28787: DOUBLE
28788: EQUAL
28789: IFTRUE 28793
28791: GO 28804
28793: POP
// bc_type := b_armoury ; 29 :
28794: LD_ADDR_OWVAR 42
28798: PUSH
28799: LD_INT 4
28801: ST_TO_ADDR
28802: GO 28919
28804: LD_INT 29
28806: DOUBLE
28807: EQUAL
28808: IFTRUE 28812
28810: GO 28823
28812: POP
// bc_type := b_barracks ; 30 :
28813: LD_ADDR_OWVAR 42
28817: PUSH
28818: LD_INT 5
28820: ST_TO_ADDR
28821: GO 28919
28823: LD_INT 30
28825: DOUBLE
28826: EQUAL
28827: IFTRUE 28831
28829: GO 28842
28831: POP
// bc_type := b_solar_power ; 31 :
28832: LD_ADDR_OWVAR 42
28836: PUSH
28837: LD_INT 27
28839: ST_TO_ADDR
28840: GO 28919
28842: LD_INT 31
28844: DOUBLE
28845: EQUAL
28846: IFTRUE 28850
28848: GO 28861
28850: POP
// bc_type := b_oil_power ; 32 :
28851: LD_ADDR_OWVAR 42
28855: PUSH
28856: LD_INT 26
28858: ST_TO_ADDR
28859: GO 28919
28861: LD_INT 32
28863: DOUBLE
28864: EQUAL
28865: IFTRUE 28869
28867: GO 28880
28869: POP
// bc_type := b_siberite_power ; 33 :
28870: LD_ADDR_OWVAR 42
28874: PUSH
28875: LD_INT 28
28877: ST_TO_ADDR
28878: GO 28919
28880: LD_INT 33
28882: DOUBLE
28883: EQUAL
28884: IFTRUE 28888
28886: GO 28899
28888: POP
// bc_type := b_oil_mine ; 34 :
28889: LD_ADDR_OWVAR 42
28893: PUSH
28894: LD_INT 29
28896: ST_TO_ADDR
28897: GO 28919
28899: LD_INT 34
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28918
28907: POP
// bc_type := b_siberite_mine ; end ;
28908: LD_ADDR_OWVAR 42
28912: PUSH
28913: LD_INT 30
28915: ST_TO_ADDR
28916: GO 28919
28918: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28919: LD_ADDR_VAR 0 8
28923: PUSH
28924: LD_VAR 0 5
28928: PPUSH
28929: LD_VAR 0 6
28933: PPUSH
28934: LD_VAR 0 3
28938: PPUSH
28939: CALL_OW 47
28943: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28944: LD_OWVAR 42
28948: PUSH
28949: LD_INT 32
28951: PUSH
28952: LD_INT 33
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: IN
28959: IFFALSE 28975
// PlaceWeaponTurret ( b , weapon ) ;
28961: LD_VAR 0 8
28965: PPUSH
28966: LD_VAR 0 4
28970: PPUSH
28971: CALL_OW 431
// end ;
28975: LD_VAR 0 7
28979: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
28984: PPUSH
28985: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28986: LD_ADDR_VAR 0 4
28990: PUSH
28991: LD_INT 22
28993: PUSH
28994: LD_OWVAR 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 30
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 30
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PPUSH
29035: CALL_OW 69
29039: ST_TO_ADDR
// if not tmp then
29040: LD_VAR 0 4
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29108
// for i in tmp do
29049: LD_ADDR_VAR 0 2
29053: PUSH
29054: LD_VAR 0 4
29058: PUSH
29059: FOR_IN
29060: IFFALSE 29106
// for j = 1 to 3 do
29062: LD_ADDR_VAR 0 3
29066: PUSH
29067: DOUBLE
29068: LD_INT 1
29070: DEC
29071: ST_TO_ADDR
29072: LD_INT 3
29074: PUSH
29075: FOR_TO
29076: IFFALSE 29102
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29078: LD_VAR 0 2
29082: PPUSH
29083: CALL_OW 274
29087: PPUSH
29088: LD_VAR 0 3
29092: PPUSH
29093: LD_INT 99999
29095: PPUSH
29096: CALL_OW 277
29100: GO 29075
29102: POP
29103: POP
29104: GO 29059
29106: POP
29107: POP
// end ;
29108: LD_VAR 0 1
29112: RET
// export function hHackSetLevel10 ; var i , j ; begin
29113: LD_INT 0
29115: PPUSH
29116: PPUSH
29117: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29118: LD_ADDR_VAR 0 2
29122: PUSH
29123: LD_INT 21
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PPUSH
29133: CALL_OW 69
29137: PUSH
29138: FOR_IN
29139: IFFALSE 29191
// if IsSelected ( i ) then
29141: LD_VAR 0 2
29145: PPUSH
29146: CALL_OW 306
29150: IFFALSE 29189
// begin for j := 1 to 4 do
29152: LD_ADDR_VAR 0 3
29156: PUSH
29157: DOUBLE
29158: LD_INT 1
29160: DEC
29161: ST_TO_ADDR
29162: LD_INT 4
29164: PUSH
29165: FOR_TO
29166: IFFALSE 29187
// SetSkill ( i , j , 10 ) ;
29168: LD_VAR 0 2
29172: PPUSH
29173: LD_VAR 0 3
29177: PPUSH
29178: LD_INT 10
29180: PPUSH
29181: CALL_OW 237
29185: GO 29165
29187: POP
29188: POP
// end ;
29189: GO 29138
29191: POP
29192: POP
// end ;
29193: LD_VAR 0 1
29197: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
29202: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29203: LD_ADDR_VAR 0 2
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_OWVAR 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 21
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PPUSH
29234: CALL_OW 69
29238: PUSH
29239: FOR_IN
29240: IFFALSE 29281
// begin for j := 1 to 4 do
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: DOUBLE
29248: LD_INT 1
29250: DEC
29251: ST_TO_ADDR
29252: LD_INT 4
29254: PUSH
29255: FOR_TO
29256: IFFALSE 29277
// SetSkill ( i , j , 10 ) ;
29258: LD_VAR 0 2
29262: PPUSH
29263: LD_VAR 0 3
29267: PPUSH
29268: LD_INT 10
29270: PPUSH
29271: CALL_OW 237
29275: GO 29255
29277: POP
29278: POP
// end ;
29279: GO 29239
29281: POP
29282: POP
// end ;
29283: LD_VAR 0 1
29287: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29288: LD_INT 0
29290: PPUSH
// uc_side := your_side ;
29291: LD_ADDR_OWVAR 20
29295: PUSH
29296: LD_OWVAR 2
29300: ST_TO_ADDR
// uc_nation := nation ;
29301: LD_ADDR_OWVAR 21
29305: PUSH
29306: LD_VAR 0 1
29310: ST_TO_ADDR
// InitHc ;
29311: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29315: LD_INT 0
29317: PPUSH
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_VAR 0 3
29327: PPUSH
29328: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29332: LD_VAR 0 4
29336: PPUSH
29337: LD_VAR 0 5
29341: PPUSH
29342: CALL_OW 428
29346: PUSH
29347: LD_INT 0
29349: EQUAL
29350: IFFALSE 29374
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29352: CALL_OW 44
29356: PPUSH
29357: LD_VAR 0 4
29361: PPUSH
29362: LD_VAR 0 5
29366: PPUSH
29367: LD_INT 1
29369: PPUSH
29370: CALL_OW 48
// end ;
29374: LD_VAR 0 6
29378: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29379: LD_INT 0
29381: PPUSH
29382: PPUSH
// uc_side := your_side ;
29383: LD_ADDR_OWVAR 20
29387: PUSH
29388: LD_OWVAR 2
29392: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29393: LD_VAR 0 1
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: LD_INT 4
29409: PUSH
29410: LD_INT 5
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: IN
29420: IFFALSE 29432
// uc_nation := nation_american else
29422: LD_ADDR_OWVAR 21
29426: PUSH
29427: LD_INT 1
29429: ST_TO_ADDR
29430: GO 29475
// if chassis in [ 11 , 12 , 13 , 14 ] then
29432: LD_VAR 0 1
29436: PUSH
29437: LD_INT 11
29439: PUSH
29440: LD_INT 12
29442: PUSH
29443: LD_INT 13
29445: PUSH
29446: LD_INT 14
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: IN
29455: IFFALSE 29467
// uc_nation := nation_arabian else
29457: LD_ADDR_OWVAR 21
29461: PUSH
29462: LD_INT 2
29464: ST_TO_ADDR
29465: GO 29475
// uc_nation := nation_russian ;
29467: LD_ADDR_OWVAR 21
29471: PUSH
29472: LD_INT 3
29474: ST_TO_ADDR
// vc_chassis := chassis ;
29475: LD_ADDR_OWVAR 37
29479: PUSH
29480: LD_VAR 0 1
29484: ST_TO_ADDR
// vc_engine := engine ;
29485: LD_ADDR_OWVAR 39
29489: PUSH
29490: LD_VAR 0 2
29494: ST_TO_ADDR
// vc_control := control ;
29495: LD_ADDR_OWVAR 38
29499: PUSH
29500: LD_VAR 0 3
29504: ST_TO_ADDR
// vc_weapon := weapon ;
29505: LD_ADDR_OWVAR 40
29509: PUSH
29510: LD_VAR 0 4
29514: ST_TO_ADDR
// un := CreateVehicle ;
29515: LD_ADDR_VAR 0 8
29519: PUSH
29520: CALL_OW 45
29524: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29525: LD_VAR 0 8
29529: PPUSH
29530: LD_INT 0
29532: PPUSH
29533: LD_INT 5
29535: PPUSH
29536: CALL_OW 12
29540: PPUSH
29541: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29545: LD_VAR 0 8
29549: PPUSH
29550: LD_VAR 0 5
29554: PPUSH
29555: LD_VAR 0 6
29559: PPUSH
29560: LD_INT 1
29562: PPUSH
29563: CALL_OW 48
// end ;
29567: LD_VAR 0 7
29571: RET
// export hInvincible ; every 1 do
29572: GO 29574
29574: DISABLE
// hInvincible := [ ] ;
29575: LD_ADDR_EXP 97
29579: PUSH
29580: EMPTY
29581: ST_TO_ADDR
29582: END
// every 10 do var i ;
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
// begin enable ;
29589: ENABLE
// if not hInvincible then
29590: LD_EXP 97
29594: NOT
29595: IFFALSE 29599
// exit ;
29597: GO 29643
// for i in hInvincible do
29599: LD_ADDR_VAR 0 1
29603: PUSH
29604: LD_EXP 97
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29641
// if GetLives ( i ) < 1000 then
29612: LD_VAR 0 1
29616: PPUSH
29617: CALL_OW 256
29621: PUSH
29622: LD_INT 1000
29624: LESS
29625: IFFALSE 29639
// SetLives ( i , 1000 ) ;
29627: LD_VAR 0 1
29631: PPUSH
29632: LD_INT 1000
29634: PPUSH
29635: CALL_OW 234
29639: GO 29609
29641: POP
29642: POP
// end ;
29643: PPOPN 1
29645: END
// export function hHackInvincible ; var i ; begin
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 21
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 21
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 69
29687: PUSH
29688: FOR_IN
29689: IFFALSE 29750
// if IsSelected ( i ) then
29691: LD_VAR 0 2
29695: PPUSH
29696: CALL_OW 306
29700: IFFALSE 29748
// begin if i in hInvincible then
29702: LD_VAR 0 2
29706: PUSH
29707: LD_EXP 97
29711: IN
29712: IFFALSE 29732
// hInvincible := hInvincible diff i else
29714: LD_ADDR_EXP 97
29718: PUSH
29719: LD_EXP 97
29723: PUSH
29724: LD_VAR 0 2
29728: DIFF
29729: ST_TO_ADDR
29730: GO 29748
// hInvincible := hInvincible union i ;
29732: LD_ADDR_EXP 97
29736: PUSH
29737: LD_EXP 97
29741: PUSH
29742: LD_VAR 0 2
29746: UNION
29747: ST_TO_ADDR
// end ;
29748: GO 29688
29750: POP
29751: POP
// end ;
29752: LD_VAR 0 1
29756: RET
// export function hHackInvisible ; var i , j ; begin
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
29761: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29762: LD_ADDR_VAR 0 2
29766: PUSH
29767: LD_INT 21
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PPUSH
29777: CALL_OW 69
29781: PUSH
29782: FOR_IN
29783: IFFALSE 29807
// if IsSelected ( i ) then
29785: LD_VAR 0 2
29789: PPUSH
29790: CALL_OW 306
29794: IFFALSE 29805
// ComForceInvisible ( i ) ;
29796: LD_VAR 0 2
29800: PPUSH
29801: CALL_OW 496
29805: GO 29782
29807: POP
29808: POP
// end ;
29809: LD_VAR 0 1
29813: RET
// export function hHackChangeYourSide ; begin
29814: LD_INT 0
29816: PPUSH
// if your_side = 8 then
29817: LD_OWVAR 2
29821: PUSH
29822: LD_INT 8
29824: EQUAL
29825: IFFALSE 29837
// your_side := 0 else
29827: LD_ADDR_OWVAR 2
29831: PUSH
29832: LD_INT 0
29834: ST_TO_ADDR
29835: GO 29851
// your_side := your_side + 1 ;
29837: LD_ADDR_OWVAR 2
29841: PUSH
29842: LD_OWVAR 2
29846: PUSH
29847: LD_INT 1
29849: PLUS
29850: ST_TO_ADDR
// end ;
29851: LD_VAR 0 1
29855: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29856: LD_INT 0
29858: PPUSH
29859: PPUSH
29860: PPUSH
// for i in all_units do
29861: LD_ADDR_VAR 0 2
29865: PUSH
29866: LD_OWVAR 3
29870: PUSH
29871: FOR_IN
29872: IFFALSE 29950
// if IsSelected ( i ) then
29874: LD_VAR 0 2
29878: PPUSH
29879: CALL_OW 306
29883: IFFALSE 29948
// begin j := GetSide ( i ) ;
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_VAR 0 2
29894: PPUSH
29895: CALL_OW 255
29899: ST_TO_ADDR
// if j = 8 then
29900: LD_VAR 0 3
29904: PUSH
29905: LD_INT 8
29907: EQUAL
29908: IFFALSE 29920
// j := 0 else
29910: LD_ADDR_VAR 0 3
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
29918: GO 29934
// j := j + 1 ;
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: LD_VAR 0 3
29929: PUSH
29930: LD_INT 1
29932: PLUS
29933: ST_TO_ADDR
// SetSide ( i , j ) ;
29934: LD_VAR 0 2
29938: PPUSH
29939: LD_VAR 0 3
29943: PPUSH
29944: CALL_OW 235
// end ;
29948: GO 29871
29950: POP
29951: POP
// end ;
29952: LD_VAR 0 1
29956: RET
// export function hHackFog ; begin
29957: LD_INT 0
29959: PPUSH
// FogOff ( true ) ;
29960: LD_INT 1
29962: PPUSH
29963: CALL_OW 344
// end ;
29967: LD_VAR 0 1
29971: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29972: LD_INT 0
29974: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29975: LD_VAR 0 1
29979: PPUSH
29980: LD_VAR 0 2
29984: PPUSH
29985: LD_VAR 0 3
29989: PPUSH
29990: LD_INT 1
29992: PPUSH
29993: LD_INT 1
29995: PPUSH
29996: CALL_OW 483
// CenterOnXY ( x , y ) ;
30000: LD_VAR 0 2
30004: PPUSH
30005: LD_VAR 0 3
30009: PPUSH
30010: CALL_OW 84
// end ;
30014: LD_VAR 0 4
30018: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30019: LD_INT 0
30021: PPUSH
30022: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30023: LD_VAR 0 1
30027: NOT
30028: PUSH
30029: LD_VAR 0 2
30033: PPUSH
30034: LD_VAR 0 3
30038: PPUSH
30039: CALL_OW 488
30043: NOT
30044: OR
30045: PUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 266
30055: PUSH
30056: LD_INT 3
30058: NONEQUAL
30059: PUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 247
30069: PUSH
30070: LD_INT 1
30072: EQUAL
30073: NOT
30074: AND
30075: OR
30076: IFFALSE 30080
// exit ;
30078: GO 30229
// if GetType ( factory ) = unit_human then
30080: LD_VAR 0 1
30084: PPUSH
30085: CALL_OW 247
30089: PUSH
30090: LD_INT 1
30092: EQUAL
30093: IFFALSE 30110
// factory := IsInUnit ( factory ) ;
30095: LD_ADDR_VAR 0 1
30099: PUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 310
30109: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30110: LD_VAR 0 1
30114: PPUSH
30115: CALL_OW 266
30119: PUSH
30120: LD_INT 3
30122: NONEQUAL
30123: IFFALSE 30127
// exit ;
30125: GO 30229
// if HexInfo ( x , y ) = factory then
30127: LD_VAR 0 2
30131: PPUSH
30132: LD_VAR 0 3
30136: PPUSH
30137: CALL_OW 428
30141: PUSH
30142: LD_VAR 0 1
30146: EQUAL
30147: IFFALSE 30174
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30149: LD_ADDR_EXP 98
30153: PUSH
30154: LD_EXP 98
30158: PPUSH
30159: LD_VAR 0 1
30163: PPUSH
30164: LD_INT 0
30166: PPUSH
30167: CALL_OW 1
30171: ST_TO_ADDR
30172: GO 30225
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30174: LD_ADDR_EXP 98
30178: PUSH
30179: LD_EXP 98
30183: PPUSH
30184: LD_VAR 0 1
30188: PPUSH
30189: LD_VAR 0 1
30193: PPUSH
30194: CALL_OW 255
30198: PUSH
30199: LD_VAR 0 1
30203: PUSH
30204: LD_VAR 0 2
30208: PUSH
30209: LD_VAR 0 3
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: PPUSH
30220: CALL_OW 1
30224: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30225: CALL 30234 0 0
// end ;
30229: LD_VAR 0 4
30233: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30234: LD_INT 0
30236: PPUSH
30237: PPUSH
30238: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30239: LD_STRING resetFactoryWaypoint();
30241: PPUSH
30242: CALL_OW 559
// if factoryWaypoints then
30246: LD_EXP 98
30250: IFFALSE 30376
// begin list := PrepareArray ( factoryWaypoints ) ;
30252: LD_ADDR_VAR 0 3
30256: PUSH
30257: LD_EXP 98
30261: PPUSH
30262: CALL 76669 0 1
30266: ST_TO_ADDR
// for i := 1 to list do
30267: LD_ADDR_VAR 0 2
30271: PUSH
30272: DOUBLE
30273: LD_INT 1
30275: DEC
30276: ST_TO_ADDR
30277: LD_VAR 0 3
30281: PUSH
30282: FOR_TO
30283: IFFALSE 30374
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30285: LD_STRING setFactoryWaypointXY(
30287: PUSH
30288: LD_VAR 0 3
30292: PUSH
30293: LD_VAR 0 2
30297: ARRAY
30298: PUSH
30299: LD_INT 1
30301: ARRAY
30302: STR
30303: PUSH
30304: LD_STRING ,
30306: STR
30307: PUSH
30308: LD_VAR 0 3
30312: PUSH
30313: LD_VAR 0 2
30317: ARRAY
30318: PUSH
30319: LD_INT 2
30321: ARRAY
30322: STR
30323: PUSH
30324: LD_STRING ,
30326: STR
30327: PUSH
30328: LD_VAR 0 3
30332: PUSH
30333: LD_VAR 0 2
30337: ARRAY
30338: PUSH
30339: LD_INT 3
30341: ARRAY
30342: STR
30343: PUSH
30344: LD_STRING ,
30346: STR
30347: PUSH
30348: LD_VAR 0 3
30352: PUSH
30353: LD_VAR 0 2
30357: ARRAY
30358: PUSH
30359: LD_INT 4
30361: ARRAY
30362: STR
30363: PUSH
30364: LD_STRING )
30366: STR
30367: PPUSH
30368: CALL_OW 559
30372: GO 30282
30374: POP
30375: POP
// end ; end ;
30376: LD_VAR 0 1
30380: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30381: LD_INT 0
30383: PPUSH
// if HexInfo ( x , y ) = warehouse then
30384: LD_VAR 0 2
30388: PPUSH
30389: LD_VAR 0 3
30393: PPUSH
30394: CALL_OW 428
30398: PUSH
30399: LD_VAR 0 1
30403: EQUAL
30404: IFFALSE 30431
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30406: LD_ADDR_EXP 99
30410: PUSH
30411: LD_EXP 99
30415: PPUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: LD_INT 0
30423: PPUSH
30424: CALL_OW 1
30428: ST_TO_ADDR
30429: GO 30482
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30431: LD_ADDR_EXP 99
30435: PUSH
30436: LD_EXP 99
30440: PPUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 255
30455: PUSH
30456: LD_VAR 0 1
30460: PUSH
30461: LD_VAR 0 2
30465: PUSH
30466: LD_VAR 0 3
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: PPUSH
30477: CALL_OW 1
30481: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30482: CALL 30491 0 0
// end ;
30486: LD_VAR 0 4
30490: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30496: LD_STRING resetWarehouseGatheringPoints();
30498: PPUSH
30499: CALL_OW 559
// if warehouseGatheringPoints then
30503: LD_EXP 99
30507: IFFALSE 30633
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30509: LD_ADDR_VAR 0 3
30513: PUSH
30514: LD_EXP 99
30518: PPUSH
30519: CALL 76669 0 1
30523: ST_TO_ADDR
// for i := 1 to list do
30524: LD_ADDR_VAR 0 2
30528: PUSH
30529: DOUBLE
30530: LD_INT 1
30532: DEC
30533: ST_TO_ADDR
30534: LD_VAR 0 3
30538: PUSH
30539: FOR_TO
30540: IFFALSE 30631
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30542: LD_STRING setWarehouseGatheringPointXY(
30544: PUSH
30545: LD_VAR 0 3
30549: PUSH
30550: LD_VAR 0 2
30554: ARRAY
30555: PUSH
30556: LD_INT 1
30558: ARRAY
30559: STR
30560: PUSH
30561: LD_STRING ,
30563: STR
30564: PUSH
30565: LD_VAR 0 3
30569: PUSH
30570: LD_VAR 0 2
30574: ARRAY
30575: PUSH
30576: LD_INT 2
30578: ARRAY
30579: STR
30580: PUSH
30581: LD_STRING ,
30583: STR
30584: PUSH
30585: LD_VAR 0 3
30589: PUSH
30590: LD_VAR 0 2
30594: ARRAY
30595: PUSH
30596: LD_INT 3
30598: ARRAY
30599: STR
30600: PUSH
30601: LD_STRING ,
30603: STR
30604: PUSH
30605: LD_VAR 0 3
30609: PUSH
30610: LD_VAR 0 2
30614: ARRAY
30615: PUSH
30616: LD_INT 4
30618: ARRAY
30619: STR
30620: PUSH
30621: LD_STRING )
30623: STR
30624: PPUSH
30625: CALL_OW 559
30629: GO 30539
30631: POP
30632: POP
// end ; end ;
30633: LD_VAR 0 1
30637: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30638: LD_EXP 99
30642: IFFALSE 31327
30644: GO 30646
30646: DISABLE
30647: LD_INT 0
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
// begin enable ;
30658: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_EXP 99
30668: PPUSH
30669: CALL 76669 0 1
30673: ST_TO_ADDR
// if not list then
30674: LD_VAR 0 3
30678: NOT
30679: IFFALSE 30683
// exit ;
30681: GO 31327
// for i := 1 to list do
30683: LD_ADDR_VAR 0 1
30687: PUSH
30688: DOUBLE
30689: LD_INT 1
30691: DEC
30692: ST_TO_ADDR
30693: LD_VAR 0 3
30697: PUSH
30698: FOR_TO
30699: IFFALSE 31325
// begin depot := list [ i ] [ 2 ] ;
30701: LD_ADDR_VAR 0 8
30705: PUSH
30706: LD_VAR 0 3
30710: PUSH
30711: LD_VAR 0 1
30715: ARRAY
30716: PUSH
30717: LD_INT 2
30719: ARRAY
30720: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30721: LD_ADDR_VAR 0 5
30725: PUSH
30726: LD_VAR 0 3
30730: PUSH
30731: LD_VAR 0 1
30735: ARRAY
30736: PUSH
30737: LD_INT 1
30739: ARRAY
30740: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30741: LD_VAR 0 8
30745: PPUSH
30746: CALL_OW 301
30750: PUSH
30751: LD_VAR 0 5
30755: PUSH
30756: LD_VAR 0 8
30760: PPUSH
30761: CALL_OW 255
30765: NONEQUAL
30766: OR
30767: IFFALSE 30796
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30769: LD_ADDR_EXP 99
30773: PUSH
30774: LD_EXP 99
30778: PPUSH
30779: LD_VAR 0 8
30783: PPUSH
30784: LD_INT 0
30786: PPUSH
30787: CALL_OW 1
30791: ST_TO_ADDR
// exit ;
30792: POP
30793: POP
30794: GO 31327
// end ; x := list [ i ] [ 3 ] ;
30796: LD_ADDR_VAR 0 6
30800: PUSH
30801: LD_VAR 0 3
30805: PUSH
30806: LD_VAR 0 1
30810: ARRAY
30811: PUSH
30812: LD_INT 3
30814: ARRAY
30815: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30816: LD_ADDR_VAR 0 7
30820: PUSH
30821: LD_VAR 0 3
30825: PUSH
30826: LD_VAR 0 1
30830: ARRAY
30831: PUSH
30832: LD_INT 4
30834: ARRAY
30835: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30836: LD_ADDR_VAR 0 9
30840: PUSH
30841: LD_VAR 0 6
30845: PPUSH
30846: LD_VAR 0 7
30850: PPUSH
30851: LD_INT 16
30853: PPUSH
30854: CALL 75257 0 3
30858: ST_TO_ADDR
// if not cratesNearbyPoint then
30859: LD_VAR 0 9
30863: NOT
30864: IFFALSE 30870
// exit ;
30866: POP
30867: POP
30868: GO 31327
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30870: LD_ADDR_VAR 0 4
30874: PUSH
30875: LD_INT 22
30877: PUSH
30878: LD_VAR 0 5
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: LD_INT 60
30892: PUSH
30893: EMPTY
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 91
30902: PUSH
30903: LD_VAR 0 8
30907: PUSH
30908: LD_INT 6
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 25
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 25
30931: PUSH
30932: LD_INT 16
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: PPUSH
30950: CALL_OW 69
30954: PUSH
30955: LD_VAR 0 8
30959: PPUSH
30960: CALL_OW 313
30964: PPUSH
30965: LD_INT 3
30967: PUSH
30968: LD_INT 60
30970: PUSH
30971: EMPTY
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: LD_INT 25
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 25
30993: PUSH
30994: LD_INT 16
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PPUSH
31010: CALL_OW 72
31014: UNION
31015: ST_TO_ADDR
// if tmp then
31016: LD_VAR 0 4
31020: IFFALSE 31100
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31022: LD_ADDR_VAR 0 4
31026: PUSH
31027: LD_VAR 0 4
31031: PPUSH
31032: LD_INT 3
31034: PPUSH
31035: CALL 73226 0 2
31039: ST_TO_ADDR
// for j in tmp do
31040: LD_ADDR_VAR 0 2
31044: PUSH
31045: LD_VAR 0 4
31049: PUSH
31050: FOR_IN
31051: IFFALSE 31094
// begin if IsInUnit ( j ) then
31053: LD_VAR 0 2
31057: PPUSH
31058: CALL_OW 310
31062: IFFALSE 31073
// ComExit ( j ) ;
31064: LD_VAR 0 2
31068: PPUSH
31069: CALL 73309 0 1
// AddComCollect ( j , x , y ) ;
31073: LD_VAR 0 2
31077: PPUSH
31078: LD_VAR 0 6
31082: PPUSH
31083: LD_VAR 0 7
31087: PPUSH
31088: CALL_OW 177
// end ;
31092: GO 31050
31094: POP
31095: POP
// exit ;
31096: POP
31097: POP
31098: GO 31327
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31100: LD_ADDR_VAR 0 4
31104: PUSH
31105: LD_INT 22
31107: PUSH
31108: LD_VAR 0 5
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 91
31119: PUSH
31120: LD_VAR 0 8
31124: PUSH
31125: LD_INT 8
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 34
31138: PUSH
31139: LD_INT 12
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 34
31148: PUSH
31149: LD_INT 51
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 34
31158: PUSH
31159: LD_INT 32
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 34
31168: PUSH
31169: LD_INT 89
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: PPUSH
31188: CALL_OW 69
31192: ST_TO_ADDR
// if tmp then
31193: LD_VAR 0 4
31197: IFFALSE 31323
// begin for j in tmp do
31199: LD_ADDR_VAR 0 2
31203: PUSH
31204: LD_VAR 0 4
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31321
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31212: LD_VAR 0 2
31216: PPUSH
31217: CALL_OW 262
31221: PUSH
31222: LD_INT 3
31224: EQUAL
31225: PUSH
31226: LD_VAR 0 2
31230: PPUSH
31231: CALL_OW 261
31235: PUSH
31236: LD_INT 20
31238: GREATER
31239: OR
31240: PUSH
31241: LD_VAR 0 2
31245: PPUSH
31246: CALL_OW 314
31250: NOT
31251: AND
31252: PUSH
31253: LD_VAR 0 2
31257: PPUSH
31258: CALL_OW 263
31262: PUSH
31263: LD_INT 1
31265: NONEQUAL
31266: PUSH
31267: LD_VAR 0 2
31271: PPUSH
31272: CALL_OW 311
31276: OR
31277: AND
31278: IFFALSE 31319
// begin ComCollect ( j , x , y ) ;
31280: LD_VAR 0 2
31284: PPUSH
31285: LD_VAR 0 6
31289: PPUSH
31290: LD_VAR 0 7
31294: PPUSH
31295: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31299: LD_VAR 0 2
31303: PPUSH
31304: LD_VAR 0 8
31308: PPUSH
31309: CALL_OW 172
// exit ;
31313: POP
31314: POP
31315: POP
31316: POP
31317: GO 31327
// end ;
31319: GO 31209
31321: POP
31322: POP
// end ; end ;
31323: GO 30698
31325: POP
31326: POP
// end ; end_of_file
31327: PPOPN 9
31329: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31330: LD_INT 0
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 264
31345: PUSH
31346: LD_INT 91
31348: EQUAL
31349: IFFALSE 31421
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31351: LD_INT 68
31353: PPUSH
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 255
31363: PPUSH
31364: CALL_OW 321
31368: PUSH
31369: LD_INT 2
31371: EQUAL
31372: IFFALSE 31384
// eff := 70 else
31374: LD_ADDR_VAR 0 4
31378: PUSH
31379: LD_INT 70
31381: ST_TO_ADDR
31382: GO 31392
// eff := 30 ;
31384: LD_ADDR_VAR 0 4
31388: PUSH
31389: LD_INT 30
31391: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 250
31401: PPUSH
31402: LD_VAR 0 1
31406: PPUSH
31407: CALL_OW 251
31411: PPUSH
31412: LD_VAR 0 4
31416: PPUSH
31417: CALL_OW 495
// end ; end ;
31421: LD_VAR 0 2
31425: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31426: LD_INT 0
31428: PPUSH
// end ;
31429: LD_VAR 0 4
31433: RET
// export function SOS_Command ( cmd ) ; begin
31434: LD_INT 0
31436: PPUSH
// end ;
31437: LD_VAR 0 2
31441: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31442: LD_INT 0
31444: PPUSH
// end ;
31445: LD_VAR 0 6
31449: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31450: LD_INT 0
31452: PPUSH
31453: PPUSH
// if not vehicle or not factory then
31454: LD_VAR 0 1
31458: NOT
31459: PUSH
31460: LD_VAR 0 2
31464: NOT
31465: OR
31466: IFFALSE 31470
// exit ;
31468: GO 31701
// if factoryWaypoints >= factory then
31470: LD_EXP 98
31474: PUSH
31475: LD_VAR 0 2
31479: GREATEREQUAL
31480: IFFALSE 31701
// if factoryWaypoints [ factory ] then
31482: LD_EXP 98
31486: PUSH
31487: LD_VAR 0 2
31491: ARRAY
31492: IFFALSE 31701
// begin if GetControl ( vehicle ) = control_manual then
31494: LD_VAR 0 1
31498: PPUSH
31499: CALL_OW 263
31503: PUSH
31504: LD_INT 1
31506: EQUAL
31507: IFFALSE 31588
// begin driver := IsDrivenBy ( vehicle ) ;
31509: LD_ADDR_VAR 0 4
31513: PUSH
31514: LD_VAR 0 1
31518: PPUSH
31519: CALL_OW 311
31523: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31524: LD_VAR 0 4
31528: PPUSH
31529: LD_EXP 98
31533: PUSH
31534: LD_VAR 0 2
31538: ARRAY
31539: PUSH
31540: LD_INT 3
31542: ARRAY
31543: PPUSH
31544: LD_EXP 98
31548: PUSH
31549: LD_VAR 0 2
31553: ARRAY
31554: PUSH
31555: LD_INT 4
31557: ARRAY
31558: PPUSH
31559: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31563: LD_VAR 0 4
31567: PPUSH
31568: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31572: LD_VAR 0 4
31576: PPUSH
31577: LD_VAR 0 2
31581: PPUSH
31582: CALL_OW 180
// end else
31586: GO 31701
// if GetControl ( vehicle ) = control_remote then
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 263
31597: PUSH
31598: LD_INT 2
31600: EQUAL
31601: IFFALSE 31662
// begin wait ( 0 0$2 ) ;
31603: LD_INT 70
31605: PPUSH
31606: CALL_OW 67
// if Connect ( vehicle ) then
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL 43550 0 1
31619: IFFALSE 31660
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_EXP 98
31630: PUSH
31631: LD_VAR 0 2
31635: ARRAY
31636: PUSH
31637: LD_INT 3
31639: ARRAY
31640: PPUSH
31641: LD_EXP 98
31645: PUSH
31646: LD_VAR 0 2
31650: ARRAY
31651: PUSH
31652: LD_INT 4
31654: ARRAY
31655: PPUSH
31656: CALL_OW 171
// end else
31660: GO 31701
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31662: LD_VAR 0 1
31666: PPUSH
31667: LD_EXP 98
31671: PUSH
31672: LD_VAR 0 2
31676: ARRAY
31677: PUSH
31678: LD_INT 3
31680: ARRAY
31681: PPUSH
31682: LD_EXP 98
31686: PUSH
31687: LD_VAR 0 2
31691: ARRAY
31692: PUSH
31693: LD_INT 4
31695: ARRAY
31696: PPUSH
31697: CALL_OW 171
// end ; end ;
31701: LD_VAR 0 3
31705: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31706: LD_INT 0
31708: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31709: LD_VAR 0 1
31713: PUSH
31714: LD_INT 250
31716: EQUAL
31717: PUSH
31718: LD_VAR 0 2
31722: PPUSH
31723: CALL_OW 264
31727: PUSH
31728: LD_INT 81
31730: EQUAL
31731: AND
31732: IFFALSE 31753
// MinerPlaceMine ( unit , x , y ) ;
31734: LD_VAR 0 2
31738: PPUSH
31739: LD_VAR 0 4
31743: PPUSH
31744: LD_VAR 0 5
31748: PPUSH
31749: CALL 34138 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31753: LD_VAR 0 1
31757: PUSH
31758: LD_INT 251
31760: EQUAL
31761: PUSH
31762: LD_VAR 0 2
31766: PPUSH
31767: CALL_OW 264
31771: PUSH
31772: LD_INT 81
31774: EQUAL
31775: AND
31776: IFFALSE 31797
// MinerDetonateMine ( unit , x , y ) ;
31778: LD_VAR 0 2
31782: PPUSH
31783: LD_VAR 0 4
31787: PPUSH
31788: LD_VAR 0 5
31792: PPUSH
31793: CALL 34413 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31797: LD_VAR 0 1
31801: PUSH
31802: LD_INT 252
31804: EQUAL
31805: PUSH
31806: LD_VAR 0 2
31810: PPUSH
31811: CALL_OW 264
31815: PUSH
31816: LD_INT 81
31818: EQUAL
31819: AND
31820: IFFALSE 31841
// MinerCreateMinefield ( unit , x , y ) ;
31822: LD_VAR 0 2
31826: PPUSH
31827: LD_VAR 0 4
31831: PPUSH
31832: LD_VAR 0 5
31836: PPUSH
31837: CALL 34830 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31841: LD_VAR 0 1
31845: PUSH
31846: LD_INT 253
31848: EQUAL
31849: PUSH
31850: LD_VAR 0 2
31854: PPUSH
31855: CALL_OW 257
31859: PUSH
31860: LD_INT 5
31862: EQUAL
31863: AND
31864: IFFALSE 31885
// ComBinocular ( unit , x , y ) ;
31866: LD_VAR 0 2
31870: PPUSH
31871: LD_VAR 0 4
31875: PPUSH
31876: LD_VAR 0 5
31880: PPUSH
31881: CALL 35199 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31885: LD_VAR 0 1
31889: PUSH
31890: LD_INT 254
31892: EQUAL
31893: PUSH
31894: LD_VAR 0 2
31898: PPUSH
31899: CALL_OW 264
31903: PUSH
31904: LD_INT 99
31906: EQUAL
31907: AND
31908: PUSH
31909: LD_VAR 0 3
31913: PPUSH
31914: CALL_OW 263
31918: PUSH
31919: LD_INT 3
31921: EQUAL
31922: AND
31923: IFFALSE 31939
// HackDestroyVehicle ( unit , selectedUnit ) ;
31925: LD_VAR 0 2
31929: PPUSH
31930: LD_VAR 0 3
31934: PPUSH
31935: CALL 33502 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31939: LD_VAR 0 1
31943: PUSH
31944: LD_INT 255
31946: EQUAL
31947: PUSH
31948: LD_VAR 0 2
31952: PPUSH
31953: CALL_OW 264
31957: PUSH
31958: LD_INT 14
31960: PUSH
31961: LD_INT 53
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: IN
31968: AND
31969: PUSH
31970: LD_VAR 0 4
31974: PPUSH
31975: LD_VAR 0 5
31979: PPUSH
31980: CALL_OW 488
31984: AND
31985: IFFALSE 32009
// CutTreeXYR ( unit , x , y , 12 ) ;
31987: LD_VAR 0 2
31991: PPUSH
31992: LD_VAR 0 4
31996: PPUSH
31997: LD_VAR 0 5
32001: PPUSH
32002: LD_INT 12
32004: PPUSH
32005: CALL 32072 0 4
// if cmd = 256 then
32009: LD_VAR 0 1
32013: PUSH
32014: LD_INT 256
32016: EQUAL
32017: IFFALSE 32038
// SetFactoryWaypoint ( unit , x , y ) ;
32019: LD_VAR 0 2
32023: PPUSH
32024: LD_VAR 0 4
32028: PPUSH
32029: LD_VAR 0 5
32033: PPUSH
32034: CALL 30019 0 3
// if cmd = 257 then
32038: LD_VAR 0 1
32042: PUSH
32043: LD_INT 257
32045: EQUAL
32046: IFFALSE 32067
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32048: LD_VAR 0 2
32052: PPUSH
32053: LD_VAR 0 4
32057: PPUSH
32058: LD_VAR 0 5
32062: PPUSH
32063: CALL 30381 0 3
// end ;
32067: LD_VAR 0 6
32071: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32072: LD_INT 0
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
32080: PPUSH
32081: PPUSH
32082: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32083: LD_VAR 0 1
32087: NOT
32088: PUSH
32089: LD_VAR 0 2
32093: PPUSH
32094: LD_VAR 0 3
32098: PPUSH
32099: CALL_OW 488
32103: NOT
32104: OR
32105: PUSH
32106: LD_VAR 0 4
32110: NOT
32111: OR
32112: IFFALSE 32116
// exit ;
32114: GO 32456
// list := [ ] ;
32116: LD_ADDR_VAR 0 13
32120: PUSH
32121: EMPTY
32122: ST_TO_ADDR
// if x - r < 0 then
32123: LD_VAR 0 2
32127: PUSH
32128: LD_VAR 0 4
32132: MINUS
32133: PUSH
32134: LD_INT 0
32136: LESS
32137: IFFALSE 32149
// min_x := 0 else
32139: LD_ADDR_VAR 0 7
32143: PUSH
32144: LD_INT 0
32146: ST_TO_ADDR
32147: GO 32165
// min_x := x - r ;
32149: LD_ADDR_VAR 0 7
32153: PUSH
32154: LD_VAR 0 2
32158: PUSH
32159: LD_VAR 0 4
32163: MINUS
32164: ST_TO_ADDR
// if y - r < 0 then
32165: LD_VAR 0 3
32169: PUSH
32170: LD_VAR 0 4
32174: MINUS
32175: PUSH
32176: LD_INT 0
32178: LESS
32179: IFFALSE 32191
// min_y := 0 else
32181: LD_ADDR_VAR 0 8
32185: PUSH
32186: LD_INT 0
32188: ST_TO_ADDR
32189: GO 32207
// min_y := y - r ;
32191: LD_ADDR_VAR 0 8
32195: PUSH
32196: LD_VAR 0 3
32200: PUSH
32201: LD_VAR 0 4
32205: MINUS
32206: ST_TO_ADDR
// max_x := x + r ;
32207: LD_ADDR_VAR 0 9
32211: PUSH
32212: LD_VAR 0 2
32216: PUSH
32217: LD_VAR 0 4
32221: PLUS
32222: ST_TO_ADDR
// max_y := y + r ;
32223: LD_ADDR_VAR 0 10
32227: PUSH
32228: LD_VAR 0 3
32232: PUSH
32233: LD_VAR 0 4
32237: PLUS
32238: ST_TO_ADDR
// for _x = min_x to max_x do
32239: LD_ADDR_VAR 0 11
32243: PUSH
32244: DOUBLE
32245: LD_VAR 0 7
32249: DEC
32250: ST_TO_ADDR
32251: LD_VAR 0 9
32255: PUSH
32256: FOR_TO
32257: IFFALSE 32374
// for _y = min_y to max_y do
32259: LD_ADDR_VAR 0 12
32263: PUSH
32264: DOUBLE
32265: LD_VAR 0 8
32269: DEC
32270: ST_TO_ADDR
32271: LD_VAR 0 10
32275: PUSH
32276: FOR_TO
32277: IFFALSE 32370
// begin if not ValidHex ( _x , _y ) then
32279: LD_VAR 0 11
32283: PPUSH
32284: LD_VAR 0 12
32288: PPUSH
32289: CALL_OW 488
32293: NOT
32294: IFFALSE 32298
// continue ;
32296: GO 32276
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32298: LD_VAR 0 11
32302: PPUSH
32303: LD_VAR 0 12
32307: PPUSH
32308: CALL_OW 351
32312: PUSH
32313: LD_VAR 0 11
32317: PPUSH
32318: LD_VAR 0 12
32322: PPUSH
32323: CALL_OW 554
32327: AND
32328: IFFALSE 32368
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32330: LD_ADDR_VAR 0 13
32334: PUSH
32335: LD_VAR 0 13
32339: PPUSH
32340: LD_VAR 0 13
32344: PUSH
32345: LD_INT 1
32347: PLUS
32348: PPUSH
32349: LD_VAR 0 11
32353: PUSH
32354: LD_VAR 0 12
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PPUSH
32363: CALL_OW 2
32367: ST_TO_ADDR
// end ;
32368: GO 32276
32370: POP
32371: POP
32372: GO 32256
32374: POP
32375: POP
// if not list then
32376: LD_VAR 0 13
32380: NOT
32381: IFFALSE 32385
// exit ;
32383: GO 32456
// for i in list do
32385: LD_ADDR_VAR 0 6
32389: PUSH
32390: LD_VAR 0 13
32394: PUSH
32395: FOR_IN
32396: IFFALSE 32454
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32398: LD_VAR 0 1
32402: PPUSH
32403: LD_STRING M
32405: PUSH
32406: LD_VAR 0 6
32410: PUSH
32411: LD_INT 1
32413: ARRAY
32414: PUSH
32415: LD_VAR 0 6
32419: PUSH
32420: LD_INT 2
32422: ARRAY
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: PPUSH
32448: CALL_OW 447
32452: GO 32395
32454: POP
32455: POP
// end ;
32456: LD_VAR 0 5
32460: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32461: LD_EXP 101
32465: NOT
32466: IFFALSE 32516
32468: GO 32470
32470: DISABLE
// begin initHack := true ;
32471: LD_ADDR_EXP 101
32475: PUSH
32476: LD_INT 1
32478: ST_TO_ADDR
// hackTanks := [ ] ;
32479: LD_ADDR_EXP 102
32483: PUSH
32484: EMPTY
32485: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32486: LD_ADDR_EXP 103
32490: PUSH
32491: EMPTY
32492: ST_TO_ADDR
// hackLimit := 3 ;
32493: LD_ADDR_EXP 104
32497: PUSH
32498: LD_INT 3
32500: ST_TO_ADDR
// hackDist := 12 ;
32501: LD_ADDR_EXP 105
32505: PUSH
32506: LD_INT 12
32508: ST_TO_ADDR
// hackCounter := [ ] ;
32509: LD_ADDR_EXP 106
32513: PUSH
32514: EMPTY
32515: ST_TO_ADDR
// end ;
32516: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32517: LD_EXP 101
32521: PUSH
32522: LD_INT 34
32524: PUSH
32525: LD_INT 99
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PPUSH
32532: CALL_OW 69
32536: AND
32537: IFFALSE 32790
32539: GO 32541
32541: DISABLE
32542: LD_INT 0
32544: PPUSH
32545: PPUSH
// begin enable ;
32546: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32547: LD_ADDR_VAR 0 1
32551: PUSH
32552: LD_INT 34
32554: PUSH
32555: LD_INT 99
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PPUSH
32562: CALL_OW 69
32566: PUSH
32567: FOR_IN
32568: IFFALSE 32788
// begin if not i in hackTanks then
32570: LD_VAR 0 1
32574: PUSH
32575: LD_EXP 102
32579: IN
32580: NOT
32581: IFFALSE 32664
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32583: LD_ADDR_EXP 102
32587: PUSH
32588: LD_EXP 102
32592: PPUSH
32593: LD_EXP 102
32597: PUSH
32598: LD_INT 1
32600: PLUS
32601: PPUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 1
32611: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32612: LD_ADDR_EXP 103
32616: PUSH
32617: LD_EXP 103
32621: PPUSH
32622: LD_EXP 103
32626: PUSH
32627: LD_INT 1
32629: PLUS
32630: PPUSH
32631: EMPTY
32632: PPUSH
32633: CALL_OW 1
32637: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32638: LD_ADDR_EXP 106
32642: PUSH
32643: LD_EXP 106
32647: PPUSH
32648: LD_EXP 106
32652: PUSH
32653: LD_INT 1
32655: PLUS
32656: PPUSH
32657: EMPTY
32658: PPUSH
32659: CALL_OW 1
32663: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32664: LD_VAR 0 1
32668: PPUSH
32669: CALL_OW 302
32673: NOT
32674: IFFALSE 32687
// begin HackUnlinkAll ( i ) ;
32676: LD_VAR 0 1
32680: PPUSH
32681: CALL 32793 0 1
// continue ;
32685: GO 32567
// end ; HackCheckCapturedStatus ( i ) ;
32687: LD_VAR 0 1
32691: PPUSH
32692: CALL 33236 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32696: LD_ADDR_VAR 0 2
32700: PUSH
32701: LD_INT 81
32703: PUSH
32704: LD_VAR 0 1
32708: PPUSH
32709: CALL_OW 255
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 33
32720: PUSH
32721: LD_INT 3
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 91
32730: PUSH
32731: LD_VAR 0 1
32735: PUSH
32736: LD_EXP 105
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 50
32748: PUSH
32749: EMPTY
32750: LIST
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: PPUSH
32758: CALL_OW 69
32762: ST_TO_ADDR
// if not tmp then
32763: LD_VAR 0 2
32767: NOT
32768: IFFALSE 32772
// continue ;
32770: GO 32567
// HackLink ( i , tmp ) ;
32772: LD_VAR 0 1
32776: PPUSH
32777: LD_VAR 0 2
32781: PPUSH
32782: CALL 32929 0 2
// end ;
32786: GO 32567
32788: POP
32789: POP
// end ;
32790: PPOPN 2
32792: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32793: LD_INT 0
32795: PPUSH
32796: PPUSH
32797: PPUSH
// if not hack in hackTanks then
32798: LD_VAR 0 1
32802: PUSH
32803: LD_EXP 102
32807: IN
32808: NOT
32809: IFFALSE 32813
// exit ;
32811: GO 32924
// index := GetElementIndex ( hackTanks , hack ) ;
32813: LD_ADDR_VAR 0 4
32817: PUSH
32818: LD_EXP 102
32822: PPUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL 40366 0 2
32832: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32833: LD_EXP 103
32837: PUSH
32838: LD_VAR 0 4
32842: ARRAY
32843: IFFALSE 32924
// begin for i in hackTanksCaptured [ index ] do
32845: LD_ADDR_VAR 0 3
32849: PUSH
32850: LD_EXP 103
32854: PUSH
32855: LD_VAR 0 4
32859: ARRAY
32860: PUSH
32861: FOR_IN
32862: IFFALSE 32888
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32864: LD_VAR 0 3
32868: PUSH
32869: LD_INT 1
32871: ARRAY
32872: PPUSH
32873: LD_VAR 0 3
32877: PUSH
32878: LD_INT 2
32880: ARRAY
32881: PPUSH
32882: CALL_OW 235
32886: GO 32861
32888: POP
32889: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32890: LD_ADDR_EXP 103
32894: PUSH
32895: LD_EXP 103
32899: PPUSH
32900: LD_VAR 0 4
32904: PPUSH
32905: EMPTY
32906: PPUSH
32907: CALL_OW 1
32911: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32912: LD_VAR 0 1
32916: PPUSH
32917: LD_INT 0
32919: PPUSH
32920: CALL_OW 505
// end ; end ;
32924: LD_VAR 0 2
32928: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32929: LD_INT 0
32931: PPUSH
32932: PPUSH
32933: PPUSH
// if not hack in hackTanks or not vehicles then
32934: LD_VAR 0 1
32938: PUSH
32939: LD_EXP 102
32943: IN
32944: NOT
32945: PUSH
32946: LD_VAR 0 2
32950: NOT
32951: OR
32952: IFFALSE 32956
// exit ;
32954: GO 33231
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32956: LD_ADDR_VAR 0 2
32960: PUSH
32961: LD_VAR 0 1
32965: PPUSH
32966: LD_VAR 0 2
32970: PPUSH
32971: LD_INT 1
32973: PPUSH
32974: LD_INT 1
32976: PPUSH
32977: CALL 41016 0 4
32981: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32982: LD_ADDR_VAR 0 5
32986: PUSH
32987: LD_EXP 102
32991: PPUSH
32992: LD_VAR 0 1
32996: PPUSH
32997: CALL 40366 0 2
33001: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33002: LD_EXP 103
33006: PUSH
33007: LD_VAR 0 5
33011: ARRAY
33012: PUSH
33013: LD_EXP 104
33017: LESS
33018: IFFALSE 33207
// begin for i := 1 to vehicles do
33020: LD_ADDR_VAR 0 4
33024: PUSH
33025: DOUBLE
33026: LD_INT 1
33028: DEC
33029: ST_TO_ADDR
33030: LD_VAR 0 2
33034: PUSH
33035: FOR_TO
33036: IFFALSE 33205
// begin if hackTanksCaptured [ index ] = hackLimit then
33038: LD_EXP 103
33042: PUSH
33043: LD_VAR 0 5
33047: ARRAY
33048: PUSH
33049: LD_EXP 104
33053: EQUAL
33054: IFFALSE 33058
// break ;
33056: GO 33205
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33058: LD_ADDR_EXP 106
33062: PUSH
33063: LD_EXP 106
33067: PPUSH
33068: LD_VAR 0 5
33072: PPUSH
33073: LD_EXP 106
33077: PUSH
33078: LD_VAR 0 5
33082: ARRAY
33083: PUSH
33084: LD_INT 1
33086: PLUS
33087: PPUSH
33088: CALL_OW 1
33092: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33093: LD_ADDR_EXP 103
33097: PUSH
33098: LD_EXP 103
33102: PPUSH
33103: LD_VAR 0 5
33107: PUSH
33108: LD_EXP 103
33112: PUSH
33113: LD_VAR 0 5
33117: ARRAY
33118: PUSH
33119: LD_INT 1
33121: PLUS
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PPUSH
33127: LD_VAR 0 2
33131: PUSH
33132: LD_VAR 0 4
33136: ARRAY
33137: PUSH
33138: LD_VAR 0 2
33142: PUSH
33143: LD_VAR 0 4
33147: ARRAY
33148: PPUSH
33149: CALL_OW 255
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PPUSH
33158: CALL 40581 0 3
33162: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33163: LD_VAR 0 2
33167: PUSH
33168: LD_VAR 0 4
33172: ARRAY
33173: PPUSH
33174: LD_VAR 0 1
33178: PPUSH
33179: CALL_OW 255
33183: PPUSH
33184: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33188: LD_VAR 0 2
33192: PUSH
33193: LD_VAR 0 4
33197: ARRAY
33198: PPUSH
33199: CALL_OW 141
// end ;
33203: GO 33035
33205: POP
33206: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33207: LD_VAR 0 1
33211: PPUSH
33212: LD_EXP 103
33216: PUSH
33217: LD_VAR 0 5
33221: ARRAY
33222: PUSH
33223: LD_INT 0
33225: PLUS
33226: PPUSH
33227: CALL_OW 505
// end ;
33231: LD_VAR 0 3
33235: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33236: LD_INT 0
33238: PPUSH
33239: PPUSH
33240: PPUSH
33241: PPUSH
// if not hack in hackTanks then
33242: LD_VAR 0 1
33246: PUSH
33247: LD_EXP 102
33251: IN
33252: NOT
33253: IFFALSE 33257
// exit ;
33255: GO 33497
// index := GetElementIndex ( hackTanks , hack ) ;
33257: LD_ADDR_VAR 0 4
33261: PUSH
33262: LD_EXP 102
33266: PPUSH
33267: LD_VAR 0 1
33271: PPUSH
33272: CALL 40366 0 2
33276: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: DOUBLE
33283: LD_EXP 103
33287: PUSH
33288: LD_VAR 0 4
33292: ARRAY
33293: INC
33294: ST_TO_ADDR
33295: LD_INT 1
33297: PUSH
33298: FOR_DOWNTO
33299: IFFALSE 33471
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33301: LD_ADDR_VAR 0 5
33305: PUSH
33306: LD_EXP 103
33310: PUSH
33311: LD_VAR 0 4
33315: ARRAY
33316: PUSH
33317: LD_VAR 0 3
33321: ARRAY
33322: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33323: LD_VAR 0 5
33327: PUSH
33328: LD_INT 1
33330: ARRAY
33331: PPUSH
33332: CALL_OW 302
33336: NOT
33337: PUSH
33338: LD_VAR 0 5
33342: PUSH
33343: LD_INT 1
33345: ARRAY
33346: PPUSH
33347: CALL_OW 255
33351: PUSH
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL_OW 255
33361: NONEQUAL
33362: OR
33363: IFFALSE 33469
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33365: LD_VAR 0 5
33369: PUSH
33370: LD_INT 1
33372: ARRAY
33373: PPUSH
33374: CALL_OW 305
33378: PUSH
33379: LD_VAR 0 5
33383: PUSH
33384: LD_INT 1
33386: ARRAY
33387: PPUSH
33388: CALL_OW 255
33392: PUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 255
33402: EQUAL
33403: AND
33404: IFFALSE 33428
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33406: LD_VAR 0 5
33410: PUSH
33411: LD_INT 1
33413: ARRAY
33414: PPUSH
33415: LD_VAR 0 5
33419: PUSH
33420: LD_INT 2
33422: ARRAY
33423: PPUSH
33424: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33428: LD_ADDR_EXP 103
33432: PUSH
33433: LD_EXP 103
33437: PPUSH
33438: LD_VAR 0 4
33442: PPUSH
33443: LD_EXP 103
33447: PUSH
33448: LD_VAR 0 4
33452: ARRAY
33453: PPUSH
33454: LD_VAR 0 3
33458: PPUSH
33459: CALL_OW 3
33463: PPUSH
33464: CALL_OW 1
33468: ST_TO_ADDR
// end ; end ;
33469: GO 33298
33471: POP
33472: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33473: LD_VAR 0 1
33477: PPUSH
33478: LD_EXP 103
33482: PUSH
33483: LD_VAR 0 4
33487: ARRAY
33488: PUSH
33489: LD_INT 0
33491: PLUS
33492: PPUSH
33493: CALL_OW 505
// end ;
33497: LD_VAR 0 2
33501: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33502: LD_INT 0
33504: PPUSH
33505: PPUSH
33506: PPUSH
33507: PPUSH
// if not hack in hackTanks then
33508: LD_VAR 0 1
33512: PUSH
33513: LD_EXP 102
33517: IN
33518: NOT
33519: IFFALSE 33523
// exit ;
33521: GO 33608
// index := GetElementIndex ( hackTanks , hack ) ;
33523: LD_ADDR_VAR 0 5
33527: PUSH
33528: LD_EXP 102
33532: PPUSH
33533: LD_VAR 0 1
33537: PPUSH
33538: CALL 40366 0 2
33542: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33543: LD_ADDR_VAR 0 4
33547: PUSH
33548: DOUBLE
33549: LD_INT 1
33551: DEC
33552: ST_TO_ADDR
33553: LD_EXP 103
33557: PUSH
33558: LD_VAR 0 5
33562: ARRAY
33563: PUSH
33564: FOR_TO
33565: IFFALSE 33606
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33567: LD_EXP 103
33571: PUSH
33572: LD_VAR 0 5
33576: ARRAY
33577: PUSH
33578: LD_VAR 0 4
33582: ARRAY
33583: PUSH
33584: LD_INT 1
33586: ARRAY
33587: PUSH
33588: LD_VAR 0 2
33592: EQUAL
33593: IFFALSE 33604
// KillUnit ( vehicle ) ;
33595: LD_VAR 0 2
33599: PPUSH
33600: CALL_OW 66
33604: GO 33564
33606: POP
33607: POP
// end ;
33608: LD_VAR 0 3
33612: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33613: LD_EXP 107
33617: NOT
33618: IFFALSE 33653
33620: GO 33622
33622: DISABLE
// begin initMiner := true ;
33623: LD_ADDR_EXP 107
33627: PUSH
33628: LD_INT 1
33630: ST_TO_ADDR
// minersList := [ ] ;
33631: LD_ADDR_EXP 108
33635: PUSH
33636: EMPTY
33637: ST_TO_ADDR
// minerMinesList := [ ] ;
33638: LD_ADDR_EXP 109
33642: PUSH
33643: EMPTY
33644: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33645: LD_ADDR_EXP 110
33649: PUSH
33650: LD_INT 5
33652: ST_TO_ADDR
// end ;
33653: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33654: LD_EXP 107
33658: PUSH
33659: LD_INT 34
33661: PUSH
33662: LD_INT 81
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PPUSH
33669: CALL_OW 69
33673: AND
33674: IFFALSE 34135
33676: GO 33678
33678: DISABLE
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
// begin enable ;
33685: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33686: LD_ADDR_VAR 0 1
33690: PUSH
33691: LD_INT 34
33693: PUSH
33694: LD_INT 81
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL_OW 69
33705: PUSH
33706: FOR_IN
33707: IFFALSE 33779
// begin if not i in minersList then
33709: LD_VAR 0 1
33713: PUSH
33714: LD_EXP 108
33718: IN
33719: NOT
33720: IFFALSE 33777
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33722: LD_ADDR_EXP 108
33726: PUSH
33727: LD_EXP 108
33731: PPUSH
33732: LD_EXP 108
33736: PUSH
33737: LD_INT 1
33739: PLUS
33740: PPUSH
33741: LD_VAR 0 1
33745: PPUSH
33746: CALL_OW 1
33750: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33751: LD_ADDR_EXP 109
33755: PUSH
33756: LD_EXP 109
33760: PPUSH
33761: LD_EXP 109
33765: PUSH
33766: LD_INT 1
33768: PLUS
33769: PPUSH
33770: EMPTY
33771: PPUSH
33772: CALL_OW 1
33776: ST_TO_ADDR
// end end ;
33777: GO 33706
33779: POP
33780: POP
// for i := minerMinesList downto 1 do
33781: LD_ADDR_VAR 0 1
33785: PUSH
33786: DOUBLE
33787: LD_EXP 109
33791: INC
33792: ST_TO_ADDR
33793: LD_INT 1
33795: PUSH
33796: FOR_DOWNTO
33797: IFFALSE 34133
// begin if IsLive ( minersList [ i ] ) then
33799: LD_EXP 108
33803: PUSH
33804: LD_VAR 0 1
33808: ARRAY
33809: PPUSH
33810: CALL_OW 300
33814: IFFALSE 33842
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33816: LD_EXP 108
33820: PUSH
33821: LD_VAR 0 1
33825: ARRAY
33826: PPUSH
33827: LD_EXP 109
33831: PUSH
33832: LD_VAR 0 1
33836: ARRAY
33837: PPUSH
33838: CALL_OW 505
// if not minerMinesList [ i ] then
33842: LD_EXP 109
33846: PUSH
33847: LD_VAR 0 1
33851: ARRAY
33852: NOT
33853: IFFALSE 33857
// continue ;
33855: GO 33796
// for j := minerMinesList [ i ] downto 1 do
33857: LD_ADDR_VAR 0 2
33861: PUSH
33862: DOUBLE
33863: LD_EXP 109
33867: PUSH
33868: LD_VAR 0 1
33872: ARRAY
33873: INC
33874: ST_TO_ADDR
33875: LD_INT 1
33877: PUSH
33878: FOR_DOWNTO
33879: IFFALSE 34129
// begin side := GetSide ( minersList [ i ] ) ;
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_EXP 108
33890: PUSH
33891: LD_VAR 0 1
33895: ARRAY
33896: PPUSH
33897: CALL_OW 255
33901: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33902: LD_ADDR_VAR 0 4
33906: PUSH
33907: LD_EXP 109
33911: PUSH
33912: LD_VAR 0 1
33916: ARRAY
33917: PUSH
33918: LD_VAR 0 2
33922: ARRAY
33923: PUSH
33924: LD_INT 1
33926: ARRAY
33927: PPUSH
33928: LD_EXP 109
33932: PUSH
33933: LD_VAR 0 1
33937: ARRAY
33938: PUSH
33939: LD_VAR 0 2
33943: ARRAY
33944: PUSH
33945: LD_INT 2
33947: ARRAY
33948: PPUSH
33949: CALL_OW 428
33953: ST_TO_ADDR
// if not tmp then
33954: LD_VAR 0 4
33958: NOT
33959: IFFALSE 33963
// continue ;
33961: GO 33878
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33963: LD_VAR 0 4
33967: PUSH
33968: LD_INT 81
33970: PUSH
33971: LD_VAR 0 3
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PPUSH
33980: CALL_OW 69
33984: IN
33985: PUSH
33986: LD_EXP 109
33990: PUSH
33991: LD_VAR 0 1
33995: ARRAY
33996: PUSH
33997: LD_VAR 0 2
34001: ARRAY
34002: PUSH
34003: LD_INT 1
34005: ARRAY
34006: PPUSH
34007: LD_EXP 109
34011: PUSH
34012: LD_VAR 0 1
34016: ARRAY
34017: PUSH
34018: LD_VAR 0 2
34022: ARRAY
34023: PUSH
34024: LD_INT 2
34026: ARRAY
34027: PPUSH
34028: CALL_OW 458
34032: AND
34033: IFFALSE 34127
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34035: LD_EXP 109
34039: PUSH
34040: LD_VAR 0 1
34044: ARRAY
34045: PUSH
34046: LD_VAR 0 2
34050: ARRAY
34051: PUSH
34052: LD_INT 1
34054: ARRAY
34055: PPUSH
34056: LD_EXP 109
34060: PUSH
34061: LD_VAR 0 1
34065: ARRAY
34066: PUSH
34067: LD_VAR 0 2
34071: ARRAY
34072: PUSH
34073: LD_INT 2
34075: ARRAY
34076: PPUSH
34077: LD_VAR 0 3
34081: PPUSH
34082: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34086: LD_ADDR_EXP 109
34090: PUSH
34091: LD_EXP 109
34095: PPUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: LD_EXP 109
34105: PUSH
34106: LD_VAR 0 1
34110: ARRAY
34111: PPUSH
34112: LD_VAR 0 2
34116: PPUSH
34117: CALL_OW 3
34121: PPUSH
34122: CALL_OW 1
34126: ST_TO_ADDR
// end ; end ;
34127: GO 33878
34129: POP
34130: POP
// end ;
34131: GO 33796
34133: POP
34134: POP
// end ;
34135: PPOPN 4
34137: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34138: LD_INT 0
34140: PPUSH
34141: PPUSH
// result := false ;
34142: LD_ADDR_VAR 0 4
34146: PUSH
34147: LD_INT 0
34149: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 264
34159: PUSH
34160: LD_INT 81
34162: EQUAL
34163: NOT
34164: IFFALSE 34168
// exit ;
34166: GO 34408
// index := GetElementIndex ( minersList , unit ) ;
34168: LD_ADDR_VAR 0 5
34172: PUSH
34173: LD_EXP 108
34177: PPUSH
34178: LD_VAR 0 1
34182: PPUSH
34183: CALL 40366 0 2
34187: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34188: LD_EXP 109
34192: PUSH
34193: LD_VAR 0 5
34197: ARRAY
34198: PUSH
34199: LD_EXP 110
34203: GREATEREQUAL
34204: IFFALSE 34208
// exit ;
34206: GO 34408
// ComMoveXY ( unit , x , y ) ;
34208: LD_VAR 0 1
34212: PPUSH
34213: LD_VAR 0 2
34217: PPUSH
34218: LD_VAR 0 3
34222: PPUSH
34223: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34227: LD_INT 35
34229: PPUSH
34230: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34234: LD_VAR 0 1
34238: PPUSH
34239: LD_VAR 0 2
34243: PPUSH
34244: LD_VAR 0 3
34248: PPUSH
34249: CALL 71721 0 3
34253: NOT
34254: PUSH
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 314
34264: AND
34265: IFFALSE 34269
// exit ;
34267: GO 34408
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34269: LD_VAR 0 2
34273: PPUSH
34274: LD_VAR 0 3
34278: PPUSH
34279: CALL_OW 428
34283: PUSH
34284: LD_VAR 0 1
34288: EQUAL
34289: PUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: CALL_OW 314
34299: NOT
34300: AND
34301: IFFALSE 34227
// PlaySoundXY ( x , y , PlantMine ) ;
34303: LD_VAR 0 2
34307: PPUSH
34308: LD_VAR 0 3
34312: PPUSH
34313: LD_STRING PlantMine
34315: PPUSH
34316: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34320: LD_VAR 0 2
34324: PPUSH
34325: LD_VAR 0 3
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 255
34339: PPUSH
34340: LD_INT 0
34342: PPUSH
34343: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34347: LD_ADDR_EXP 109
34351: PUSH
34352: LD_EXP 109
34356: PPUSH
34357: LD_VAR 0 5
34361: PUSH
34362: LD_EXP 109
34366: PUSH
34367: LD_VAR 0 5
34371: ARRAY
34372: PUSH
34373: LD_INT 1
34375: PLUS
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PPUSH
34381: LD_VAR 0 2
34385: PUSH
34386: LD_VAR 0 3
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PPUSH
34395: CALL 40581 0 3
34399: ST_TO_ADDR
// result := true ;
34400: LD_ADDR_VAR 0 4
34404: PUSH
34405: LD_INT 1
34407: ST_TO_ADDR
// end ;
34408: LD_VAR 0 4
34412: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34413: LD_INT 0
34415: PPUSH
34416: PPUSH
34417: PPUSH
// if not unit in minersList then
34418: LD_VAR 0 1
34422: PUSH
34423: LD_EXP 108
34427: IN
34428: NOT
34429: IFFALSE 34433
// exit ;
34431: GO 34825
// index := GetElementIndex ( minersList , unit ) ;
34433: LD_ADDR_VAR 0 6
34437: PUSH
34438: LD_EXP 108
34442: PPUSH
34443: LD_VAR 0 1
34447: PPUSH
34448: CALL 40366 0 2
34452: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34453: LD_ADDR_VAR 0 5
34457: PUSH
34458: DOUBLE
34459: LD_EXP 109
34463: PUSH
34464: LD_VAR 0 6
34468: ARRAY
34469: INC
34470: ST_TO_ADDR
34471: LD_INT 1
34473: PUSH
34474: FOR_DOWNTO
34475: IFFALSE 34636
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34477: LD_EXP 109
34481: PUSH
34482: LD_VAR 0 6
34486: ARRAY
34487: PUSH
34488: LD_VAR 0 5
34492: ARRAY
34493: PUSH
34494: LD_INT 1
34496: ARRAY
34497: PUSH
34498: LD_VAR 0 2
34502: EQUAL
34503: PUSH
34504: LD_EXP 109
34508: PUSH
34509: LD_VAR 0 6
34513: ARRAY
34514: PUSH
34515: LD_VAR 0 5
34519: ARRAY
34520: PUSH
34521: LD_INT 2
34523: ARRAY
34524: PUSH
34525: LD_VAR 0 3
34529: EQUAL
34530: AND
34531: IFFALSE 34634
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34533: LD_EXP 109
34537: PUSH
34538: LD_VAR 0 6
34542: ARRAY
34543: PUSH
34544: LD_VAR 0 5
34548: ARRAY
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: PPUSH
34554: LD_EXP 109
34558: PUSH
34559: LD_VAR 0 6
34563: ARRAY
34564: PUSH
34565: LD_VAR 0 5
34569: ARRAY
34570: PUSH
34571: LD_INT 2
34573: ARRAY
34574: PPUSH
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 255
34584: PPUSH
34585: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34589: LD_ADDR_EXP 109
34593: PUSH
34594: LD_EXP 109
34598: PPUSH
34599: LD_VAR 0 6
34603: PPUSH
34604: LD_EXP 109
34608: PUSH
34609: LD_VAR 0 6
34613: ARRAY
34614: PPUSH
34615: LD_VAR 0 5
34619: PPUSH
34620: CALL_OW 3
34624: PPUSH
34625: CALL_OW 1
34629: ST_TO_ADDR
// exit ;
34630: POP
34631: POP
34632: GO 34825
// end ; end ;
34634: GO 34474
34636: POP
34637: POP
// for i := minerMinesList [ index ] downto 1 do
34638: LD_ADDR_VAR 0 5
34642: PUSH
34643: DOUBLE
34644: LD_EXP 109
34648: PUSH
34649: LD_VAR 0 6
34653: ARRAY
34654: INC
34655: ST_TO_ADDR
34656: LD_INT 1
34658: PUSH
34659: FOR_DOWNTO
34660: IFFALSE 34823
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34662: LD_EXP 109
34666: PUSH
34667: LD_VAR 0 6
34671: ARRAY
34672: PUSH
34673: LD_VAR 0 5
34677: ARRAY
34678: PUSH
34679: LD_INT 1
34681: ARRAY
34682: PPUSH
34683: LD_EXP 109
34687: PUSH
34688: LD_VAR 0 6
34692: ARRAY
34693: PUSH
34694: LD_VAR 0 5
34698: ARRAY
34699: PUSH
34700: LD_INT 2
34702: ARRAY
34703: PPUSH
34704: LD_VAR 0 2
34708: PPUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: CALL_OW 298
34718: PUSH
34719: LD_INT 6
34721: LESS
34722: IFFALSE 34821
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34724: LD_EXP 109
34728: PUSH
34729: LD_VAR 0 6
34733: ARRAY
34734: PUSH
34735: LD_VAR 0 5
34739: ARRAY
34740: PUSH
34741: LD_INT 1
34743: ARRAY
34744: PPUSH
34745: LD_EXP 109
34749: PUSH
34750: LD_VAR 0 6
34754: ARRAY
34755: PUSH
34756: LD_VAR 0 5
34760: ARRAY
34761: PUSH
34762: LD_INT 2
34764: ARRAY
34765: PPUSH
34766: LD_VAR 0 1
34770: PPUSH
34771: CALL_OW 255
34775: PPUSH
34776: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34780: LD_ADDR_EXP 109
34784: PUSH
34785: LD_EXP 109
34789: PPUSH
34790: LD_VAR 0 6
34794: PPUSH
34795: LD_EXP 109
34799: PUSH
34800: LD_VAR 0 6
34804: ARRAY
34805: PPUSH
34806: LD_VAR 0 5
34810: PPUSH
34811: CALL_OW 3
34815: PPUSH
34816: CALL_OW 1
34820: ST_TO_ADDR
// end ; end ;
34821: GO 34659
34823: POP
34824: POP
// end ;
34825: LD_VAR 0 4
34829: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34841: LD_VAR 0 1
34845: PPUSH
34846: CALL_OW 264
34850: PUSH
34851: LD_INT 81
34853: EQUAL
34854: NOT
34855: PUSH
34856: LD_VAR 0 1
34860: PUSH
34861: LD_EXP 108
34865: IN
34866: NOT
34867: OR
34868: IFFALSE 34872
// exit ;
34870: GO 35194
// index := GetElementIndex ( minersList , unit ) ;
34872: LD_ADDR_VAR 0 6
34876: PUSH
34877: LD_EXP 108
34881: PPUSH
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL 40366 0 2
34891: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34892: LD_ADDR_VAR 0 8
34896: PUSH
34897: LD_EXP 110
34901: PUSH
34902: LD_EXP 109
34906: PUSH
34907: LD_VAR 0 6
34911: ARRAY
34912: MINUS
34913: ST_TO_ADDR
// if not minesFreeAmount then
34914: LD_VAR 0 8
34918: NOT
34919: IFFALSE 34923
// exit ;
34921: GO 35194
// tmp := [ ] ;
34923: LD_ADDR_VAR 0 7
34927: PUSH
34928: EMPTY
34929: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34930: LD_ADDR_VAR 0 5
34934: PUSH
34935: DOUBLE
34936: LD_INT 1
34938: DEC
34939: ST_TO_ADDR
34940: LD_VAR 0 8
34944: PUSH
34945: FOR_TO
34946: IFFALSE 35141
// begin _d := rand ( 0 , 5 ) ;
34948: LD_ADDR_VAR 0 11
34952: PUSH
34953: LD_INT 0
34955: PPUSH
34956: LD_INT 5
34958: PPUSH
34959: CALL_OW 12
34963: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34964: LD_ADDR_VAR 0 12
34968: PUSH
34969: LD_INT 2
34971: PPUSH
34972: LD_INT 6
34974: PPUSH
34975: CALL_OW 12
34979: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: LD_VAR 0 2
34989: PPUSH
34990: LD_VAR 0 11
34994: PPUSH
34995: LD_VAR 0 12
34999: PPUSH
35000: CALL_OW 272
35004: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35005: LD_ADDR_VAR 0 10
35009: PUSH
35010: LD_VAR 0 3
35014: PPUSH
35015: LD_VAR 0 11
35019: PPUSH
35020: LD_VAR 0 12
35024: PPUSH
35025: CALL_OW 273
35029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35030: LD_VAR 0 9
35034: PPUSH
35035: LD_VAR 0 10
35039: PPUSH
35040: CALL_OW 488
35044: PUSH
35045: LD_VAR 0 9
35049: PUSH
35050: LD_VAR 0 10
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_VAR 0 7
35063: IN
35064: NOT
35065: AND
35066: PUSH
35067: LD_VAR 0 9
35071: PPUSH
35072: LD_VAR 0 10
35076: PPUSH
35077: CALL_OW 458
35081: NOT
35082: AND
35083: IFFALSE 35125
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35085: LD_ADDR_VAR 0 7
35089: PUSH
35090: LD_VAR 0 7
35094: PPUSH
35095: LD_VAR 0 7
35099: PUSH
35100: LD_INT 1
35102: PLUS
35103: PPUSH
35104: LD_VAR 0 9
35108: PUSH
35109: LD_VAR 0 10
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PPUSH
35118: CALL_OW 1
35122: ST_TO_ADDR
35123: GO 35139
// i := i - 1 ;
35125: LD_ADDR_VAR 0 5
35129: PUSH
35130: LD_VAR 0 5
35134: PUSH
35135: LD_INT 1
35137: MINUS
35138: ST_TO_ADDR
// end ;
35139: GO 34945
35141: POP
35142: POP
// for i in tmp do
35143: LD_ADDR_VAR 0 5
35147: PUSH
35148: LD_VAR 0 7
35152: PUSH
35153: FOR_IN
35154: IFFALSE 35192
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35156: LD_VAR 0 1
35160: PPUSH
35161: LD_VAR 0 5
35165: PUSH
35166: LD_INT 1
35168: ARRAY
35169: PPUSH
35170: LD_VAR 0 5
35174: PUSH
35175: LD_INT 2
35177: ARRAY
35178: PPUSH
35179: CALL 34138 0 3
35183: NOT
35184: IFFALSE 35190
// exit ;
35186: POP
35187: POP
35188: GO 35194
35190: GO 35153
35192: POP
35193: POP
// end ;
35194: LD_VAR 0 4
35198: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35199: LD_INT 0
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
// if not GetClass ( unit ) = class_sniper then
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL_OW 257
35217: PUSH
35218: LD_INT 5
35220: EQUAL
35221: NOT
35222: IFFALSE 35226
// exit ;
35224: GO 35614
// dist := 8 ;
35226: LD_ADDR_VAR 0 5
35230: PUSH
35231: LD_INT 8
35233: ST_TO_ADDR
// viewRange := 12 ;
35234: LD_ADDR_VAR 0 7
35238: PUSH
35239: LD_INT 12
35241: ST_TO_ADDR
// side := GetSide ( unit ) ;
35242: LD_ADDR_VAR 0 6
35246: PUSH
35247: LD_VAR 0 1
35251: PPUSH
35252: CALL_OW 255
35256: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35257: LD_INT 61
35259: PPUSH
35260: LD_VAR 0 6
35264: PPUSH
35265: CALL_OW 321
35269: PUSH
35270: LD_INT 2
35272: EQUAL
35273: IFFALSE 35283
// viewRange := 16 ;
35275: LD_ADDR_VAR 0 7
35279: PUSH
35280: LD_INT 16
35282: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35283: LD_VAR 0 1
35287: PPUSH
35288: LD_VAR 0 2
35292: PPUSH
35293: LD_VAR 0 3
35297: PPUSH
35298: CALL_OW 297
35302: PUSH
35303: LD_VAR 0 5
35307: GREATER
35308: IFFALSE 35387
// begin ComMoveXY ( unit , x , y ) ;
35310: LD_VAR 0 1
35314: PPUSH
35315: LD_VAR 0 2
35319: PPUSH
35320: LD_VAR 0 3
35324: PPUSH
35325: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35329: LD_INT 35
35331: PPUSH
35332: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35336: LD_VAR 0 1
35340: PPUSH
35341: LD_VAR 0 2
35345: PPUSH
35346: LD_VAR 0 3
35350: PPUSH
35351: CALL 71721 0 3
35355: NOT
35356: IFFALSE 35360
// exit ;
35358: GO 35614
// until GetDistUnitXY ( unit , x , y ) < dist ;
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_VAR 0 2
35369: PPUSH
35370: LD_VAR 0 3
35374: PPUSH
35375: CALL_OW 297
35379: PUSH
35380: LD_VAR 0 5
35384: LESS
35385: IFFALSE 35329
// end ; ComTurnXY ( unit , x , y ) ;
35387: LD_VAR 0 1
35391: PPUSH
35392: LD_VAR 0 2
35396: PPUSH
35397: LD_VAR 0 3
35401: PPUSH
35402: CALL_OW 118
// wait ( 5 ) ;
35406: LD_INT 5
35408: PPUSH
35409: CALL_OW 67
// _d := GetDir ( unit ) ;
35413: LD_ADDR_VAR 0 10
35417: PUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 254
35427: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35428: LD_ADDR_VAR 0 8
35432: PUSH
35433: LD_VAR 0 1
35437: PPUSH
35438: CALL_OW 250
35442: PPUSH
35443: LD_VAR 0 10
35447: PPUSH
35448: LD_VAR 0 5
35452: PPUSH
35453: CALL_OW 272
35457: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35458: LD_ADDR_VAR 0 9
35462: PUSH
35463: LD_VAR 0 1
35467: PPUSH
35468: CALL_OW 251
35472: PPUSH
35473: LD_VAR 0 10
35477: PPUSH
35478: LD_VAR 0 5
35482: PPUSH
35483: CALL_OW 273
35487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35488: LD_VAR 0 8
35492: PPUSH
35493: LD_VAR 0 9
35497: PPUSH
35498: CALL_OW 488
35502: NOT
35503: IFFALSE 35507
// exit ;
35505: GO 35614
// ComAnimCustom ( unit , 1 ) ;
35507: LD_VAR 0 1
35511: PPUSH
35512: LD_INT 1
35514: PPUSH
35515: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35519: LD_VAR 0 8
35523: PPUSH
35524: LD_VAR 0 9
35528: PPUSH
35529: LD_VAR 0 6
35533: PPUSH
35534: LD_VAR 0 7
35538: PPUSH
35539: CALL_OW 330
// repeat wait ( 1 ) ;
35543: LD_INT 1
35545: PPUSH
35546: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 316
35559: PUSH
35560: LD_VAR 0 1
35564: PPUSH
35565: CALL_OW 314
35569: OR
35570: PUSH
35571: LD_VAR 0 1
35575: PPUSH
35576: CALL_OW 302
35580: NOT
35581: OR
35582: PUSH
35583: LD_VAR 0 1
35587: PPUSH
35588: CALL_OW 301
35592: OR
35593: IFFALSE 35543
// RemoveSeeing ( _x , _y , side ) ;
35595: LD_VAR 0 8
35599: PPUSH
35600: LD_VAR 0 9
35604: PPUSH
35605: LD_VAR 0 6
35609: PPUSH
35610: CALL_OW 331
// end ; end_of_file
35614: LD_VAR 0 4
35618: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35619: LD_INT 0
35621: PPUSH
35622: PPUSH
// if exist_mode then
35623: LD_VAR 0 2
35627: IFFALSE 35652
// unit := CreateCharacter ( prefix & ident ) else
35629: LD_ADDR_VAR 0 5
35633: PUSH
35634: LD_VAR 0 3
35638: PUSH
35639: LD_VAR 0 1
35643: STR
35644: PPUSH
35645: CALL_OW 34
35649: ST_TO_ADDR
35650: GO 35667
// unit := NewCharacter ( ident ) ;
35652: LD_ADDR_VAR 0 5
35656: PUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 25
35666: ST_TO_ADDR
// result := unit ;
35667: LD_ADDR_VAR 0 4
35671: PUSH
35672: LD_VAR 0 5
35676: ST_TO_ADDR
// end ;
35677: LD_VAR 0 4
35681: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35682: LD_INT 0
35684: PPUSH
35685: PPUSH
// if not side or not nation then
35686: LD_VAR 0 1
35690: NOT
35691: PUSH
35692: LD_VAR 0 2
35696: NOT
35697: OR
35698: IFFALSE 35702
// exit ;
35700: GO 36470
// case nation of nation_american :
35702: LD_VAR 0 2
35706: PUSH
35707: LD_INT 1
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35715
35713: GO 35929
35715: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35716: LD_ADDR_VAR 0 4
35720: PUSH
35721: LD_INT 35
35723: PUSH
35724: LD_INT 45
35726: PUSH
35727: LD_INT 46
35729: PUSH
35730: LD_INT 47
35732: PUSH
35733: LD_INT 82
35735: PUSH
35736: LD_INT 83
35738: PUSH
35739: LD_INT 84
35741: PUSH
35742: LD_INT 85
35744: PUSH
35745: LD_INT 86
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 6
35756: PUSH
35757: LD_INT 15
35759: PUSH
35760: LD_INT 16
35762: PUSH
35763: LD_INT 7
35765: PUSH
35766: LD_INT 12
35768: PUSH
35769: LD_INT 13
35771: PUSH
35772: LD_INT 10
35774: PUSH
35775: LD_INT 14
35777: PUSH
35778: LD_INT 20
35780: PUSH
35781: LD_INT 21
35783: PUSH
35784: LD_INT 22
35786: PUSH
35787: LD_INT 25
35789: PUSH
35790: LD_INT 32
35792: PUSH
35793: LD_INT 27
35795: PUSH
35796: LD_INT 36
35798: PUSH
35799: LD_INT 69
35801: PUSH
35802: LD_INT 39
35804: PUSH
35805: LD_INT 34
35807: PUSH
35808: LD_INT 40
35810: PUSH
35811: LD_INT 48
35813: PUSH
35814: LD_INT 49
35816: PUSH
35817: LD_INT 50
35819: PUSH
35820: LD_INT 51
35822: PUSH
35823: LD_INT 52
35825: PUSH
35826: LD_INT 53
35828: PUSH
35829: LD_INT 54
35831: PUSH
35832: LD_INT 55
35834: PUSH
35835: LD_INT 56
35837: PUSH
35838: LD_INT 57
35840: PUSH
35841: LD_INT 58
35843: PUSH
35844: LD_INT 59
35846: PUSH
35847: LD_INT 60
35849: PUSH
35850: LD_INT 61
35852: PUSH
35853: LD_INT 62
35855: PUSH
35856: LD_INT 80
35858: PUSH
35859: LD_INT 82
35861: PUSH
35862: LD_INT 83
35864: PUSH
35865: LD_INT 84
35867: PUSH
35868: LD_INT 85
35870: PUSH
35871: LD_INT 86
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: ST_TO_ADDR
35927: GO 36394
35929: LD_INT 2
35931: DOUBLE
35932: EQUAL
35933: IFTRUE 35937
35935: GO 36163
35937: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35938: LD_ADDR_VAR 0 4
35942: PUSH
35943: LD_INT 35
35945: PUSH
35946: LD_INT 45
35948: PUSH
35949: LD_INT 46
35951: PUSH
35952: LD_INT 47
35954: PUSH
35955: LD_INT 82
35957: PUSH
35958: LD_INT 83
35960: PUSH
35961: LD_INT 84
35963: PUSH
35964: LD_INT 85
35966: PUSH
35967: LD_INT 87
35969: PUSH
35970: LD_INT 70
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 11
35978: PUSH
35979: LD_INT 3
35981: PUSH
35982: LD_INT 4
35984: PUSH
35985: LD_INT 5
35987: PUSH
35988: LD_INT 6
35990: PUSH
35991: LD_INT 15
35993: PUSH
35994: LD_INT 18
35996: PUSH
35997: LD_INT 7
35999: PUSH
36000: LD_INT 17
36002: PUSH
36003: LD_INT 8
36005: PUSH
36006: LD_INT 20
36008: PUSH
36009: LD_INT 21
36011: PUSH
36012: LD_INT 22
36014: PUSH
36015: LD_INT 72
36017: PUSH
36018: LD_INT 26
36020: PUSH
36021: LD_INT 69
36023: PUSH
36024: LD_INT 39
36026: PUSH
36027: LD_INT 40
36029: PUSH
36030: LD_INT 41
36032: PUSH
36033: LD_INT 42
36035: PUSH
36036: LD_INT 43
36038: PUSH
36039: LD_INT 48
36041: PUSH
36042: LD_INT 49
36044: PUSH
36045: LD_INT 50
36047: PUSH
36048: LD_INT 51
36050: PUSH
36051: LD_INT 52
36053: PUSH
36054: LD_INT 53
36056: PUSH
36057: LD_INT 54
36059: PUSH
36060: LD_INT 55
36062: PUSH
36063: LD_INT 56
36065: PUSH
36066: LD_INT 60
36068: PUSH
36069: LD_INT 61
36071: PUSH
36072: LD_INT 62
36074: PUSH
36075: LD_INT 66
36077: PUSH
36078: LD_INT 67
36080: PUSH
36081: LD_INT 68
36083: PUSH
36084: LD_INT 81
36086: PUSH
36087: LD_INT 82
36089: PUSH
36090: LD_INT 83
36092: PUSH
36093: LD_INT 84
36095: PUSH
36096: LD_INT 85
36098: PUSH
36099: LD_INT 87
36101: PUSH
36102: LD_INT 88
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 36394
36163: LD_INT 3
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36393
36171: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36172: LD_ADDR_VAR 0 4
36176: PUSH
36177: LD_INT 46
36179: PUSH
36180: LD_INT 47
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 82
36191: PUSH
36192: LD_INT 83
36194: PUSH
36195: LD_INT 84
36197: PUSH
36198: LD_INT 85
36200: PUSH
36201: LD_INT 86
36203: PUSH
36204: LD_INT 11
36206: PUSH
36207: LD_INT 9
36209: PUSH
36210: LD_INT 20
36212: PUSH
36213: LD_INT 19
36215: PUSH
36216: LD_INT 21
36218: PUSH
36219: LD_INT 24
36221: PUSH
36222: LD_INT 22
36224: PUSH
36225: LD_INT 25
36227: PUSH
36228: LD_INT 28
36230: PUSH
36231: LD_INT 29
36233: PUSH
36234: LD_INT 30
36236: PUSH
36237: LD_INT 31
36239: PUSH
36240: LD_INT 37
36242: PUSH
36243: LD_INT 38
36245: PUSH
36246: LD_INT 32
36248: PUSH
36249: LD_INT 27
36251: PUSH
36252: LD_INT 33
36254: PUSH
36255: LD_INT 69
36257: PUSH
36258: LD_INT 39
36260: PUSH
36261: LD_INT 34
36263: PUSH
36264: LD_INT 40
36266: PUSH
36267: LD_INT 71
36269: PUSH
36270: LD_INT 23
36272: PUSH
36273: LD_INT 44
36275: PUSH
36276: LD_INT 48
36278: PUSH
36279: LD_INT 49
36281: PUSH
36282: LD_INT 50
36284: PUSH
36285: LD_INT 51
36287: PUSH
36288: LD_INT 52
36290: PUSH
36291: LD_INT 53
36293: PUSH
36294: LD_INT 54
36296: PUSH
36297: LD_INT 55
36299: PUSH
36300: LD_INT 56
36302: PUSH
36303: LD_INT 57
36305: PUSH
36306: LD_INT 58
36308: PUSH
36309: LD_INT 59
36311: PUSH
36312: LD_INT 63
36314: PUSH
36315: LD_INT 64
36317: PUSH
36318: LD_INT 65
36320: PUSH
36321: LD_INT 82
36323: PUSH
36324: LD_INT 83
36326: PUSH
36327: LD_INT 84
36329: PUSH
36330: LD_INT 85
36332: PUSH
36333: LD_INT 86
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: ST_TO_ADDR
36391: GO 36394
36393: POP
// if state > - 1 and state < 3 then
36394: LD_VAR 0 3
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: GREATER
36403: PUSH
36404: LD_VAR 0 3
36408: PUSH
36409: LD_INT 3
36411: LESS
36412: AND
36413: IFFALSE 36470
// for i in result do
36415: LD_ADDR_VAR 0 5
36419: PUSH
36420: LD_VAR 0 4
36424: PUSH
36425: FOR_IN
36426: IFFALSE 36468
// if GetTech ( i , side ) <> state then
36428: LD_VAR 0 5
36432: PPUSH
36433: LD_VAR 0 1
36437: PPUSH
36438: CALL_OW 321
36442: PUSH
36443: LD_VAR 0 3
36447: NONEQUAL
36448: IFFALSE 36466
// result := result diff i ;
36450: LD_ADDR_VAR 0 4
36454: PUSH
36455: LD_VAR 0 4
36459: PUSH
36460: LD_VAR 0 5
36464: DIFF
36465: ST_TO_ADDR
36466: GO 36425
36468: POP
36469: POP
// end ;
36470: LD_VAR 0 4
36474: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36475: LD_INT 0
36477: PPUSH
36478: PPUSH
36479: PPUSH
// result := true ;
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_INT 1
36487: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36488: LD_ADDR_VAR 0 5
36492: PUSH
36493: LD_VAR 0 2
36497: PPUSH
36498: CALL_OW 480
36502: ST_TO_ADDR
// if not tmp then
36503: LD_VAR 0 5
36507: NOT
36508: IFFALSE 36512
// exit ;
36510: GO 36561
// for i in tmp do
36512: LD_ADDR_VAR 0 4
36516: PUSH
36517: LD_VAR 0 5
36521: PUSH
36522: FOR_IN
36523: IFFALSE 36559
// if GetTech ( i , side ) <> state_researched then
36525: LD_VAR 0 4
36529: PPUSH
36530: LD_VAR 0 1
36534: PPUSH
36535: CALL_OW 321
36539: PUSH
36540: LD_INT 2
36542: NONEQUAL
36543: IFFALSE 36557
// begin result := false ;
36545: LD_ADDR_VAR 0 3
36549: PUSH
36550: LD_INT 0
36552: ST_TO_ADDR
// exit ;
36553: POP
36554: POP
36555: GO 36561
// end ;
36557: GO 36522
36559: POP
36560: POP
// end ;
36561: LD_VAR 0 3
36565: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36566: LD_INT 0
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36581: LD_VAR 0 1
36585: NOT
36586: PUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 257
36596: PUSH
36597: LD_INT 9
36599: NONEQUAL
36600: OR
36601: IFFALSE 36605
// exit ;
36603: GO 37178
// side := GetSide ( unit ) ;
36605: LD_ADDR_VAR 0 9
36609: PUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 255
36619: ST_TO_ADDR
// tech_space := tech_spacanom ;
36620: LD_ADDR_VAR 0 12
36624: PUSH
36625: LD_INT 29
36627: ST_TO_ADDR
// tech_time := tech_taurad ;
36628: LD_ADDR_VAR 0 13
36632: PUSH
36633: LD_INT 28
36635: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36636: LD_ADDR_VAR 0 11
36640: PUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 310
36650: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36651: LD_VAR 0 11
36655: PPUSH
36656: CALL_OW 247
36660: PUSH
36661: LD_INT 2
36663: EQUAL
36664: IFFALSE 36668
// exit ;
36666: GO 37178
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36668: LD_ADDR_VAR 0 8
36672: PUSH
36673: LD_INT 81
36675: PUSH
36676: LD_VAR 0 9
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 3
36687: PUSH
36688: LD_INT 21
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PPUSH
36706: CALL_OW 69
36710: ST_TO_ADDR
// if not tmp then
36711: LD_VAR 0 8
36715: NOT
36716: IFFALSE 36720
// exit ;
36718: GO 37178
// if in_unit then
36720: LD_VAR 0 11
36724: IFFALSE 36748
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36726: LD_ADDR_VAR 0 10
36730: PUSH
36731: LD_VAR 0 8
36735: PPUSH
36736: LD_VAR 0 11
36740: PPUSH
36741: CALL_OW 74
36745: ST_TO_ADDR
36746: GO 36768
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36748: LD_ADDR_VAR 0 10
36752: PUSH
36753: LD_VAR 0 8
36757: PPUSH
36758: LD_VAR 0 1
36762: PPUSH
36763: CALL_OW 74
36767: ST_TO_ADDR
// if not enemy then
36768: LD_VAR 0 10
36772: NOT
36773: IFFALSE 36777
// exit ;
36775: GO 37178
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36777: LD_VAR 0 11
36781: PUSH
36782: LD_VAR 0 11
36786: PPUSH
36787: LD_VAR 0 10
36791: PPUSH
36792: CALL_OW 296
36796: PUSH
36797: LD_INT 13
36799: GREATER
36800: AND
36801: PUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: LD_VAR 0 10
36811: PPUSH
36812: CALL_OW 296
36816: PUSH
36817: LD_INT 12
36819: GREATER
36820: OR
36821: IFFALSE 36825
// exit ;
36823: GO 37178
// missile := [ 1 ] ;
36825: LD_ADDR_VAR 0 14
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36836: LD_VAR 0 9
36840: PPUSH
36841: LD_VAR 0 12
36845: PPUSH
36846: CALL_OW 325
36850: IFFALSE 36879
// missile := Replace ( missile , missile + 1 , 2 ) ;
36852: LD_ADDR_VAR 0 14
36856: PUSH
36857: LD_VAR 0 14
36861: PPUSH
36862: LD_VAR 0 14
36866: PUSH
36867: LD_INT 1
36869: PLUS
36870: PPUSH
36871: LD_INT 2
36873: PPUSH
36874: CALL_OW 1
36878: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36879: LD_VAR 0 9
36883: PPUSH
36884: LD_VAR 0 13
36888: PPUSH
36889: CALL_OW 325
36893: PUSH
36894: LD_VAR 0 10
36898: PPUSH
36899: CALL_OW 255
36903: PPUSH
36904: LD_VAR 0 13
36908: PPUSH
36909: CALL_OW 325
36913: NOT
36914: AND
36915: IFFALSE 36944
// missile := Replace ( missile , missile + 1 , 3 ) ;
36917: LD_ADDR_VAR 0 14
36921: PUSH
36922: LD_VAR 0 14
36926: PPUSH
36927: LD_VAR 0 14
36931: PUSH
36932: LD_INT 1
36934: PLUS
36935: PPUSH
36936: LD_INT 3
36938: PPUSH
36939: CALL_OW 1
36943: ST_TO_ADDR
// if missile < 2 then
36944: LD_VAR 0 14
36948: PUSH
36949: LD_INT 2
36951: LESS
36952: IFFALSE 36956
// exit ;
36954: GO 37178
// x := GetX ( enemy ) ;
36956: LD_ADDR_VAR 0 4
36960: PUSH
36961: LD_VAR 0 10
36965: PPUSH
36966: CALL_OW 250
36970: ST_TO_ADDR
// y := GetY ( enemy ) ;
36971: LD_ADDR_VAR 0 5
36975: PUSH
36976: LD_VAR 0 10
36980: PPUSH
36981: CALL_OW 251
36985: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36986: LD_ADDR_VAR 0 6
36990: PUSH
36991: LD_VAR 0 4
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PPUSH
37000: LD_INT 1
37002: PPUSH
37003: CALL_OW 12
37007: PLUS
37008: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37009: LD_ADDR_VAR 0 7
37013: PUSH
37014: LD_VAR 0 5
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PPUSH
37023: LD_INT 1
37025: PPUSH
37026: CALL_OW 12
37030: PLUS
37031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37032: LD_VAR 0 6
37036: PPUSH
37037: LD_VAR 0 7
37041: PPUSH
37042: CALL_OW 488
37046: NOT
37047: IFFALSE 37069
// begin _x := x ;
37049: LD_ADDR_VAR 0 6
37053: PUSH
37054: LD_VAR 0 4
37058: ST_TO_ADDR
// _y := y ;
37059: LD_ADDR_VAR 0 7
37063: PUSH
37064: LD_VAR 0 5
37068: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37069: LD_ADDR_VAR 0 3
37073: PUSH
37074: LD_INT 1
37076: PPUSH
37077: LD_VAR 0 14
37081: PPUSH
37082: CALL_OW 12
37086: ST_TO_ADDR
// case i of 1 :
37087: LD_VAR 0 3
37091: PUSH
37092: LD_INT 1
37094: DOUBLE
37095: EQUAL
37096: IFTRUE 37100
37098: GO 37117
37100: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37101: LD_VAR 0 1
37105: PPUSH
37106: LD_VAR 0 10
37110: PPUSH
37111: CALL_OW 115
37115: GO 37178
37117: LD_INT 2
37119: DOUBLE
37120: EQUAL
37121: IFTRUE 37125
37123: GO 37147
37125: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37126: LD_VAR 0 1
37130: PPUSH
37131: LD_VAR 0 6
37135: PPUSH
37136: LD_VAR 0 7
37140: PPUSH
37141: CALL_OW 153
37145: GO 37178
37147: LD_INT 3
37149: DOUBLE
37150: EQUAL
37151: IFTRUE 37155
37153: GO 37177
37155: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37156: LD_VAR 0 1
37160: PPUSH
37161: LD_VAR 0 6
37165: PPUSH
37166: LD_VAR 0 7
37170: PPUSH
37171: CALL_OW 154
37175: GO 37178
37177: POP
// end ;
37178: LD_VAR 0 2
37182: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37183: LD_INT 0
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
// if not unit or not building then
37191: LD_VAR 0 1
37195: NOT
37196: PUSH
37197: LD_VAR 0 2
37201: NOT
37202: OR
37203: IFFALSE 37207
// exit ;
37205: GO 37365
// x := GetX ( building ) ;
37207: LD_ADDR_VAR 0 5
37211: PUSH
37212: LD_VAR 0 2
37216: PPUSH
37217: CALL_OW 250
37221: ST_TO_ADDR
// y := GetY ( building ) ;
37222: LD_ADDR_VAR 0 6
37226: PUSH
37227: LD_VAR 0 2
37231: PPUSH
37232: CALL_OW 251
37236: ST_TO_ADDR
// for i = 0 to 5 do
37237: LD_ADDR_VAR 0 4
37241: PUSH
37242: DOUBLE
37243: LD_INT 0
37245: DEC
37246: ST_TO_ADDR
37247: LD_INT 5
37249: PUSH
37250: FOR_TO
37251: IFFALSE 37363
// begin _x := ShiftX ( x , i , 3 ) ;
37253: LD_ADDR_VAR 0 7
37257: PUSH
37258: LD_VAR 0 5
37262: PPUSH
37263: LD_VAR 0 4
37267: PPUSH
37268: LD_INT 3
37270: PPUSH
37271: CALL_OW 272
37275: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37276: LD_ADDR_VAR 0 8
37280: PUSH
37281: LD_VAR 0 6
37285: PPUSH
37286: LD_VAR 0 4
37290: PPUSH
37291: LD_INT 3
37293: PPUSH
37294: CALL_OW 273
37298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37299: LD_VAR 0 7
37303: PPUSH
37304: LD_VAR 0 8
37308: PPUSH
37309: CALL_OW 488
37313: NOT
37314: IFFALSE 37318
// continue ;
37316: GO 37250
// if HexInfo ( _x , _y ) = 0 then
37318: LD_VAR 0 7
37322: PPUSH
37323: LD_VAR 0 8
37327: PPUSH
37328: CALL_OW 428
37332: PUSH
37333: LD_INT 0
37335: EQUAL
37336: IFFALSE 37361
// begin ComMoveXY ( unit , _x , _y ) ;
37338: LD_VAR 0 1
37342: PPUSH
37343: LD_VAR 0 7
37347: PPUSH
37348: LD_VAR 0 8
37352: PPUSH
37353: CALL_OW 111
// exit ;
37357: POP
37358: POP
37359: GO 37365
// end ; end ;
37361: GO 37250
37363: POP
37364: POP
// end ;
37365: LD_VAR 0 3
37369: RET
// export function ScanBase ( side , base_area ) ; begin
37370: LD_INT 0
37372: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37373: LD_ADDR_VAR 0 3
37377: PUSH
37378: LD_VAR 0 2
37382: PPUSH
37383: LD_INT 81
37385: PUSH
37386: LD_VAR 0 1
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PPUSH
37395: CALL_OW 70
37399: ST_TO_ADDR
// end ;
37400: LD_VAR 0 3
37404: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
// result := false ;
37411: LD_ADDR_VAR 0 2
37415: PUSH
37416: LD_INT 0
37418: ST_TO_ADDR
// side := GetSide ( unit ) ;
37419: LD_ADDR_VAR 0 3
37423: PUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: CALL_OW 255
37433: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37434: LD_ADDR_VAR 0 4
37438: PUSH
37439: LD_VAR 0 1
37443: PPUSH
37444: CALL_OW 248
37448: ST_TO_ADDR
// case nat of 1 :
37449: LD_VAR 0 4
37453: PUSH
37454: LD_INT 1
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37473
37462: POP
// tech := tech_lassight ; 2 :
37463: LD_ADDR_VAR 0 5
37467: PUSH
37468: LD_INT 12
37470: ST_TO_ADDR
37471: GO 37512
37473: LD_INT 2
37475: DOUBLE
37476: EQUAL
37477: IFTRUE 37481
37479: GO 37492
37481: POP
// tech := tech_mortar ; 3 :
37482: LD_ADDR_VAR 0 5
37486: PUSH
37487: LD_INT 41
37489: ST_TO_ADDR
37490: GO 37512
37492: LD_INT 3
37494: DOUBLE
37495: EQUAL
37496: IFTRUE 37500
37498: GO 37511
37500: POP
// tech := tech_bazooka ; end ;
37501: LD_ADDR_VAR 0 5
37505: PUSH
37506: LD_INT 44
37508: ST_TO_ADDR
37509: GO 37512
37511: POP
// if Researched ( side , tech ) then
37512: LD_VAR 0 3
37516: PPUSH
37517: LD_VAR 0 5
37521: PPUSH
37522: CALL_OW 325
37526: IFFALSE 37553
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37528: LD_ADDR_VAR 0 2
37532: PUSH
37533: LD_INT 5
37535: PUSH
37536: LD_INT 8
37538: PUSH
37539: LD_INT 9
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: PUSH
37547: LD_VAR 0 4
37551: ARRAY
37552: ST_TO_ADDR
// end ;
37553: LD_VAR 0 2
37557: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37558: LD_INT 0
37560: PPUSH
37561: PPUSH
37562: PPUSH
// if not mines then
37563: LD_VAR 0 2
37567: NOT
37568: IFFALSE 37572
// exit ;
37570: GO 37716
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37572: LD_ADDR_VAR 0 5
37576: PUSH
37577: LD_INT 81
37579: PUSH
37580: LD_VAR 0 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 3
37591: PUSH
37592: LD_INT 21
37594: PUSH
37595: LD_INT 3
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PPUSH
37610: CALL_OW 69
37614: ST_TO_ADDR
// for i in mines do
37615: LD_ADDR_VAR 0 4
37619: PUSH
37620: LD_VAR 0 2
37624: PUSH
37625: FOR_IN
37626: IFFALSE 37714
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37628: LD_VAR 0 4
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: PPUSH
37637: LD_VAR 0 4
37641: PUSH
37642: LD_INT 2
37644: ARRAY
37645: PPUSH
37646: CALL_OW 458
37650: NOT
37651: IFFALSE 37655
// continue ;
37653: GO 37625
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37655: LD_VAR 0 4
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: LD_VAR 0 4
37668: PUSH
37669: LD_INT 2
37671: ARRAY
37672: PPUSH
37673: CALL_OW 428
37677: PUSH
37678: LD_VAR 0 5
37682: IN
37683: IFFALSE 37712
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37685: LD_VAR 0 4
37689: PUSH
37690: LD_INT 1
37692: ARRAY
37693: PPUSH
37694: LD_VAR 0 4
37698: PUSH
37699: LD_INT 2
37701: ARRAY
37702: PPUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 456
// end ;
37712: GO 37625
37714: POP
37715: POP
// end ;
37716: LD_VAR 0 3
37720: RET
// export function Count ( array ) ; begin
37721: LD_INT 0
37723: PPUSH
// result := array + 0 ;
37724: LD_ADDR_VAR 0 2
37728: PUSH
37729: LD_VAR 0 1
37733: PUSH
37734: LD_INT 0
37736: PLUS
37737: ST_TO_ADDR
// end ;
37738: LD_VAR 0 2
37742: RET
// export function IsEmpty ( building ) ; begin
37743: LD_INT 0
37745: PPUSH
// if not building then
37746: LD_VAR 0 1
37750: NOT
37751: IFFALSE 37755
// exit ;
37753: GO 37798
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37755: LD_ADDR_VAR 0 2
37759: PUSH
37760: LD_VAR 0 1
37764: PUSH
37765: LD_INT 22
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 255
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 58
37784: PUSH
37785: EMPTY
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PPUSH
37792: CALL_OW 69
37796: IN
37797: ST_TO_ADDR
// end ;
37798: LD_VAR 0 2
37802: RET
// export function IsNotFull ( building ) ; var places ; begin
37803: LD_INT 0
37805: PPUSH
37806: PPUSH
// if not building then
37807: LD_VAR 0 1
37811: NOT
37812: IFFALSE 37816
// exit ;
37814: GO 37844
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37816: LD_ADDR_VAR 0 2
37820: PUSH
37821: LD_VAR 0 1
37825: PPUSH
37826: LD_INT 3
37828: PUSH
37829: LD_INT 62
37831: PUSH
37832: EMPTY
37833: LIST
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PPUSH
37839: CALL_OW 72
37843: ST_TO_ADDR
// end ;
37844: LD_VAR 0 2
37848: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37849: LD_INT 0
37851: PPUSH
37852: PPUSH
37853: PPUSH
37854: PPUSH
// tmp := [ ] ;
37855: LD_ADDR_VAR 0 3
37859: PUSH
37860: EMPTY
37861: ST_TO_ADDR
// list := [ ] ;
37862: LD_ADDR_VAR 0 5
37866: PUSH
37867: EMPTY
37868: ST_TO_ADDR
// for i = 16 to 25 do
37869: LD_ADDR_VAR 0 4
37873: PUSH
37874: DOUBLE
37875: LD_INT 16
37877: DEC
37878: ST_TO_ADDR
37879: LD_INT 25
37881: PUSH
37882: FOR_TO
37883: IFFALSE 37956
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37885: LD_ADDR_VAR 0 3
37889: PUSH
37890: LD_VAR 0 3
37894: PUSH
37895: LD_INT 22
37897: PUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 255
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 91
37914: PUSH
37915: LD_VAR 0 1
37919: PUSH
37920: LD_INT 6
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 30
37930: PUSH
37931: LD_VAR 0 4
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: PUSH
37945: EMPTY
37946: LIST
37947: PPUSH
37948: CALL_OW 69
37952: ADD
37953: ST_TO_ADDR
37954: GO 37882
37956: POP
37957: POP
// for i = 1 to tmp do
37958: LD_ADDR_VAR 0 4
37962: PUSH
37963: DOUBLE
37964: LD_INT 1
37966: DEC
37967: ST_TO_ADDR
37968: LD_VAR 0 3
37972: PUSH
37973: FOR_TO
37974: IFFALSE 38062
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37976: LD_ADDR_VAR 0 5
37980: PUSH
37981: LD_VAR 0 5
37985: PUSH
37986: LD_VAR 0 3
37990: PUSH
37991: LD_VAR 0 4
37995: ARRAY
37996: PPUSH
37997: CALL_OW 266
38001: PUSH
38002: LD_VAR 0 3
38006: PUSH
38007: LD_VAR 0 4
38011: ARRAY
38012: PPUSH
38013: CALL_OW 250
38017: PUSH
38018: LD_VAR 0 3
38022: PUSH
38023: LD_VAR 0 4
38027: ARRAY
38028: PPUSH
38029: CALL_OW 251
38033: PUSH
38034: LD_VAR 0 3
38038: PUSH
38039: LD_VAR 0 4
38043: ARRAY
38044: PPUSH
38045: CALL_OW 254
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: PUSH
38056: EMPTY
38057: LIST
38058: ADD
38059: ST_TO_ADDR
38060: GO 37973
38062: POP
38063: POP
// result := list ;
38064: LD_ADDR_VAR 0 2
38068: PUSH
38069: LD_VAR 0 5
38073: ST_TO_ADDR
// end ;
38074: LD_VAR 0 2
38078: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38079: LD_INT 0
38081: PPUSH
38082: PPUSH
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
// if not factory then
38088: LD_VAR 0 1
38092: NOT
38093: IFFALSE 38097
// exit ;
38095: GO 38690
// if control = control_apeman then
38097: LD_VAR 0 4
38101: PUSH
38102: LD_INT 5
38104: EQUAL
38105: IFFALSE 38214
// begin tmp := UnitsInside ( factory ) ;
38107: LD_ADDR_VAR 0 8
38111: PUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 313
38121: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38122: LD_VAR 0 8
38126: PPUSH
38127: LD_INT 25
38129: PUSH
38130: LD_INT 12
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PPUSH
38137: CALL_OW 72
38141: NOT
38142: IFFALSE 38152
// control := control_manual ;
38144: LD_ADDR_VAR 0 4
38148: PUSH
38149: LD_INT 1
38151: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38152: LD_ADDR_VAR 0 8
38156: PUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL 37849 0 1
38166: ST_TO_ADDR
// if tmp then
38167: LD_VAR 0 8
38171: IFFALSE 38214
// begin for i in tmp do
38173: LD_ADDR_VAR 0 7
38177: PUSH
38178: LD_VAR 0 8
38182: PUSH
38183: FOR_IN
38184: IFFALSE 38212
// if i [ 1 ] = b_ext_radio then
38186: LD_VAR 0 7
38190: PUSH
38191: LD_INT 1
38193: ARRAY
38194: PUSH
38195: LD_INT 22
38197: EQUAL
38198: IFFALSE 38210
// begin control := control_remote ;
38200: LD_ADDR_VAR 0 4
38204: PUSH
38205: LD_INT 2
38207: ST_TO_ADDR
// break ;
38208: GO 38212
// end ;
38210: GO 38183
38212: POP
38213: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38214: LD_VAR 0 1
38218: PPUSH
38219: LD_VAR 0 2
38223: PPUSH
38224: LD_VAR 0 3
38228: PPUSH
38229: LD_VAR 0 4
38233: PPUSH
38234: LD_VAR 0 5
38238: PPUSH
38239: CALL_OW 448
38243: IFFALSE 38278
// begin result := [ chassis , engine , control , weapon ] ;
38245: LD_ADDR_VAR 0 6
38249: PUSH
38250: LD_VAR 0 2
38254: PUSH
38255: LD_VAR 0 3
38259: PUSH
38260: LD_VAR 0 4
38264: PUSH
38265: LD_VAR 0 5
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: ST_TO_ADDR
// exit ;
38276: GO 38690
// end ; _chassis := AvailableChassisList ( factory ) ;
38278: LD_ADDR_VAR 0 9
38282: PUSH
38283: LD_VAR 0 1
38287: PPUSH
38288: CALL_OW 475
38292: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38293: LD_ADDR_VAR 0 11
38297: PUSH
38298: LD_VAR 0 1
38302: PPUSH
38303: CALL_OW 476
38307: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38308: LD_ADDR_VAR 0 12
38312: PUSH
38313: LD_VAR 0 1
38317: PPUSH
38318: CALL_OW 477
38322: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38323: LD_ADDR_VAR 0 10
38327: PUSH
38328: LD_VAR 0 1
38332: PPUSH
38333: CALL_OW 478
38337: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38338: LD_VAR 0 9
38342: NOT
38343: PUSH
38344: LD_VAR 0 11
38348: NOT
38349: OR
38350: PUSH
38351: LD_VAR 0 12
38355: NOT
38356: OR
38357: PUSH
38358: LD_VAR 0 10
38362: NOT
38363: OR
38364: IFFALSE 38399
// begin result := [ chassis , engine , control , weapon ] ;
38366: LD_ADDR_VAR 0 6
38370: PUSH
38371: LD_VAR 0 2
38375: PUSH
38376: LD_VAR 0 3
38380: PUSH
38381: LD_VAR 0 4
38385: PUSH
38386: LD_VAR 0 5
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: ST_TO_ADDR
// exit ;
38397: GO 38690
// end ; if not chassis in _chassis then
38399: LD_VAR 0 2
38403: PUSH
38404: LD_VAR 0 9
38408: IN
38409: NOT
38410: IFFALSE 38436
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38412: LD_ADDR_VAR 0 2
38416: PUSH
38417: LD_VAR 0 9
38421: PUSH
38422: LD_INT 1
38424: PPUSH
38425: LD_VAR 0 9
38429: PPUSH
38430: CALL_OW 12
38434: ARRAY
38435: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38436: LD_VAR 0 2
38440: PPUSH
38441: LD_VAR 0 3
38445: PPUSH
38446: CALL 38695 0 2
38450: NOT
38451: IFFALSE 38510
// repeat engine := _engine [ 1 ] ;
38453: LD_ADDR_VAR 0 3
38457: PUSH
38458: LD_VAR 0 11
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38467: LD_ADDR_VAR 0 11
38471: PUSH
38472: LD_VAR 0 11
38476: PPUSH
38477: LD_INT 1
38479: PPUSH
38480: CALL_OW 3
38484: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38485: LD_VAR 0 2
38489: PPUSH
38490: LD_VAR 0 3
38494: PPUSH
38495: CALL 38695 0 2
38499: PUSH
38500: LD_VAR 0 11
38504: PUSH
38505: EMPTY
38506: EQUAL
38507: OR
38508: IFFALSE 38453
// if not control in _control then
38510: LD_VAR 0 4
38514: PUSH
38515: LD_VAR 0 12
38519: IN
38520: NOT
38521: IFFALSE 38547
// control := _control [ rand ( 1 , _control ) ] ;
38523: LD_ADDR_VAR 0 4
38527: PUSH
38528: LD_VAR 0 12
38532: PUSH
38533: LD_INT 1
38535: PPUSH
38536: LD_VAR 0 12
38540: PPUSH
38541: CALL_OW 12
38545: ARRAY
38546: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38547: LD_VAR 0 2
38551: PPUSH
38552: LD_VAR 0 5
38556: PPUSH
38557: CALL 38915 0 2
38561: NOT
38562: IFFALSE 38621
// repeat weapon := _weapon [ 1 ] ;
38564: LD_ADDR_VAR 0 5
38568: PUSH
38569: LD_VAR 0 10
38573: PUSH
38574: LD_INT 1
38576: ARRAY
38577: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38578: LD_ADDR_VAR 0 10
38582: PUSH
38583: LD_VAR 0 10
38587: PPUSH
38588: LD_INT 1
38590: PPUSH
38591: CALL_OW 3
38595: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38596: LD_VAR 0 2
38600: PPUSH
38601: LD_VAR 0 5
38605: PPUSH
38606: CALL 38915 0 2
38610: PUSH
38611: LD_VAR 0 10
38615: PUSH
38616: EMPTY
38617: EQUAL
38618: OR
38619: IFFALSE 38564
// result := [ ] ;
38621: LD_ADDR_VAR 0 6
38625: PUSH
38626: EMPTY
38627: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38628: LD_VAR 0 1
38632: PPUSH
38633: LD_VAR 0 2
38637: PPUSH
38638: LD_VAR 0 3
38642: PPUSH
38643: LD_VAR 0 4
38647: PPUSH
38648: LD_VAR 0 5
38652: PPUSH
38653: CALL_OW 448
38657: IFFALSE 38690
// result := [ chassis , engine , control , weapon ] ;
38659: LD_ADDR_VAR 0 6
38663: PUSH
38664: LD_VAR 0 2
38668: PUSH
38669: LD_VAR 0 3
38673: PUSH
38674: LD_VAR 0 4
38678: PUSH
38679: LD_VAR 0 5
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: ST_TO_ADDR
// end ;
38690: LD_VAR 0 6
38694: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38695: LD_INT 0
38697: PPUSH
// if not chassis or not engine then
38698: LD_VAR 0 1
38702: NOT
38703: PUSH
38704: LD_VAR 0 2
38708: NOT
38709: OR
38710: IFFALSE 38714
// exit ;
38712: GO 38910
// case engine of engine_solar :
38714: LD_VAR 0 2
38718: PUSH
38719: LD_INT 2
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38765
38727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38728: LD_ADDR_VAR 0 3
38732: PUSH
38733: LD_INT 11
38735: PUSH
38736: LD_INT 12
38738: PUSH
38739: LD_INT 13
38741: PUSH
38742: LD_INT 14
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
38763: GO 38894
38765: LD_INT 1
38767: DOUBLE
38768: EQUAL
38769: IFTRUE 38773
38771: GO 38835
38773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38774: LD_ADDR_VAR 0 3
38778: PUSH
38779: LD_INT 11
38781: PUSH
38782: LD_INT 12
38784: PUSH
38785: LD_INT 13
38787: PUSH
38788: LD_INT 14
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: LD_INT 4
38802: PUSH
38803: LD_INT 5
38805: PUSH
38806: LD_INT 21
38808: PUSH
38809: LD_INT 23
38811: PUSH
38812: LD_INT 22
38814: PUSH
38815: LD_INT 24
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: ST_TO_ADDR
38833: GO 38894
38835: LD_INT 3
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 38893
38843: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38844: LD_ADDR_VAR 0 3
38848: PUSH
38849: LD_INT 13
38851: PUSH
38852: LD_INT 14
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 4
38863: PUSH
38864: LD_INT 5
38866: PUSH
38867: LD_INT 21
38869: PUSH
38870: LD_INT 22
38872: PUSH
38873: LD_INT 23
38875: PUSH
38876: LD_INT 24
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: ST_TO_ADDR
38891: GO 38894
38893: POP
// result := ( chassis in result ) ;
38894: LD_ADDR_VAR 0 3
38898: PUSH
38899: LD_VAR 0 1
38903: PUSH
38904: LD_VAR 0 3
38908: IN
38909: ST_TO_ADDR
// end ;
38910: LD_VAR 0 3
38914: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38915: LD_INT 0
38917: PPUSH
// if not chassis or not weapon then
38918: LD_VAR 0 1
38922: NOT
38923: PUSH
38924: LD_VAR 0 2
38928: NOT
38929: OR
38930: IFFALSE 38934
// exit ;
38932: GO 39994
// case weapon of us_machine_gun :
38934: LD_VAR 0 2
38938: PUSH
38939: LD_INT 2
38941: DOUBLE
38942: EQUAL
38943: IFTRUE 38947
38945: GO 38977
38947: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: LD_INT 4
38964: PUSH
38965: LD_INT 5
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: ST_TO_ADDR
38975: GO 39978
38977: LD_INT 3
38979: DOUBLE
38980: EQUAL
38981: IFTRUE 38985
38983: GO 39015
38985: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38986: LD_ADDR_VAR 0 3
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: LD_INT 4
39002: PUSH
39003: LD_INT 5
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: ST_TO_ADDR
39013: GO 39978
39015: LD_INT 11
39017: DOUBLE
39018: EQUAL
39019: IFTRUE 39023
39021: GO 39053
39023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39024: LD_ADDR_VAR 0 3
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 3
39037: PUSH
39038: LD_INT 4
39040: PUSH
39041: LD_INT 5
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
39051: GO 39978
39053: LD_INT 4
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39061
39059: GO 39087
39061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39062: LD_ADDR_VAR 0 3
39066: PUSH
39067: LD_INT 2
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: LD_INT 4
39075: PUSH
39076: LD_INT 5
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: ST_TO_ADDR
39085: GO 39978
39087: LD_INT 5
39089: DOUBLE
39090: EQUAL
39091: IFTRUE 39095
39093: GO 39121
39095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39096: LD_ADDR_VAR 0 3
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 4
39109: PUSH
39110: LD_INT 5
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: ST_TO_ADDR
39119: GO 39978
39121: LD_INT 9
39123: DOUBLE
39124: EQUAL
39125: IFTRUE 39129
39127: GO 39155
39129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39130: LD_ADDR_VAR 0 3
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: LD_INT 4
39143: PUSH
39144: LD_INT 5
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: ST_TO_ADDR
39153: GO 39978
39155: LD_INT 7
39157: DOUBLE
39158: EQUAL
39159: IFTRUE 39163
39161: GO 39189
39163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39164: LD_ADDR_VAR 0 3
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: LD_INT 4
39177: PUSH
39178: LD_INT 5
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: ST_TO_ADDR
39187: GO 39978
39189: LD_INT 12
39191: DOUBLE
39192: EQUAL
39193: IFTRUE 39197
39195: GO 39223
39197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39198: LD_ADDR_VAR 0 3
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: LD_INT 4
39211: PUSH
39212: LD_INT 5
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: ST_TO_ADDR
39221: GO 39978
39223: LD_INT 13
39225: DOUBLE
39226: EQUAL
39227: IFTRUE 39231
39229: GO 39257
39231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39232: LD_ADDR_VAR 0 3
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 4
39245: PUSH
39246: LD_INT 5
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
39255: GO 39978
39257: LD_INT 14
39259: DOUBLE
39260: EQUAL
39261: IFTRUE 39265
39263: GO 39283
39265: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39266: LD_ADDR_VAR 0 3
39270: PUSH
39271: LD_INT 4
39273: PUSH
39274: LD_INT 5
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: ST_TO_ADDR
39281: GO 39978
39283: LD_INT 6
39285: DOUBLE
39286: EQUAL
39287: IFTRUE 39291
39289: GO 39309
39291: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39292: LD_ADDR_VAR 0 3
39296: PUSH
39297: LD_INT 4
39299: PUSH
39300: LD_INT 5
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: ST_TO_ADDR
39307: GO 39978
39309: LD_INT 10
39311: DOUBLE
39312: EQUAL
39313: IFTRUE 39317
39315: GO 39335
39317: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39318: LD_ADDR_VAR 0 3
39322: PUSH
39323: LD_INT 4
39325: PUSH
39326: LD_INT 5
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: ST_TO_ADDR
39333: GO 39978
39335: LD_INT 22
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 39369
39343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39344: LD_ADDR_VAR 0 3
39348: PUSH
39349: LD_INT 11
39351: PUSH
39352: LD_INT 12
39354: PUSH
39355: LD_INT 13
39357: PUSH
39358: LD_INT 14
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: ST_TO_ADDR
39367: GO 39978
39369: LD_INT 23
39371: DOUBLE
39372: EQUAL
39373: IFTRUE 39377
39375: GO 39403
39377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39378: LD_ADDR_VAR 0 3
39382: PUSH
39383: LD_INT 11
39385: PUSH
39386: LD_INT 12
39388: PUSH
39389: LD_INT 13
39391: PUSH
39392: LD_INT 14
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: ST_TO_ADDR
39401: GO 39978
39403: LD_INT 24
39405: DOUBLE
39406: EQUAL
39407: IFTRUE 39411
39409: GO 39437
39411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39412: LD_ADDR_VAR 0 3
39416: PUSH
39417: LD_INT 11
39419: PUSH
39420: LD_INT 12
39422: PUSH
39423: LD_INT 13
39425: PUSH
39426: LD_INT 14
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: ST_TO_ADDR
39435: GO 39978
39437: LD_INT 30
39439: DOUBLE
39440: EQUAL
39441: IFTRUE 39445
39443: GO 39471
39445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39446: LD_ADDR_VAR 0 3
39450: PUSH
39451: LD_INT 11
39453: PUSH
39454: LD_INT 12
39456: PUSH
39457: LD_INT 13
39459: PUSH
39460: LD_INT 14
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: ST_TO_ADDR
39469: GO 39978
39471: LD_INT 25
39473: DOUBLE
39474: EQUAL
39475: IFTRUE 39479
39477: GO 39497
39479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_INT 13
39487: PUSH
39488: LD_INT 14
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: ST_TO_ADDR
39495: GO 39978
39497: LD_INT 27
39499: DOUBLE
39500: EQUAL
39501: IFTRUE 39505
39503: GO 39523
39505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39506: LD_ADDR_VAR 0 3
39510: PUSH
39511: LD_INT 13
39513: PUSH
39514: LD_INT 14
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: ST_TO_ADDR
39521: GO 39978
39523: LD_INT 92
39525: DOUBLE
39526: EQUAL
39527: IFTRUE 39531
39529: GO 39557
39531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39532: LD_ADDR_VAR 0 3
39536: PUSH
39537: LD_INT 11
39539: PUSH
39540: LD_INT 12
39542: PUSH
39543: LD_INT 13
39545: PUSH
39546: LD_INT 14
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
39555: GO 39978
39557: LD_INT 28
39559: DOUBLE
39560: EQUAL
39561: IFTRUE 39565
39563: GO 39583
39565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39566: LD_ADDR_VAR 0 3
39570: PUSH
39571: LD_INT 13
39573: PUSH
39574: LD_INT 14
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: ST_TO_ADDR
39581: GO 39978
39583: LD_INT 29
39585: DOUBLE
39586: EQUAL
39587: IFTRUE 39591
39589: GO 39609
39591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39592: LD_ADDR_VAR 0 3
39596: PUSH
39597: LD_INT 13
39599: PUSH
39600: LD_INT 14
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: ST_TO_ADDR
39607: GO 39978
39609: LD_INT 31
39611: DOUBLE
39612: EQUAL
39613: IFTRUE 39617
39615: GO 39635
39617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39618: LD_ADDR_VAR 0 3
39622: PUSH
39623: LD_INT 13
39625: PUSH
39626: LD_INT 14
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: ST_TO_ADDR
39633: GO 39978
39635: LD_INT 26
39637: DOUBLE
39638: EQUAL
39639: IFTRUE 39643
39641: GO 39661
39643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39644: LD_ADDR_VAR 0 3
39648: PUSH
39649: LD_INT 13
39651: PUSH
39652: LD_INT 14
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: ST_TO_ADDR
39659: GO 39978
39661: LD_INT 42
39663: DOUBLE
39664: EQUAL
39665: IFTRUE 39669
39667: GO 39695
39669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39670: LD_ADDR_VAR 0 3
39674: PUSH
39675: LD_INT 21
39677: PUSH
39678: LD_INT 22
39680: PUSH
39681: LD_INT 23
39683: PUSH
39684: LD_INT 24
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
39693: GO 39978
39695: LD_INT 43
39697: DOUBLE
39698: EQUAL
39699: IFTRUE 39703
39701: GO 39729
39703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39704: LD_ADDR_VAR 0 3
39708: PUSH
39709: LD_INT 21
39711: PUSH
39712: LD_INT 22
39714: PUSH
39715: LD_INT 23
39717: PUSH
39718: LD_INT 24
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: ST_TO_ADDR
39727: GO 39978
39729: LD_INT 44
39731: DOUBLE
39732: EQUAL
39733: IFTRUE 39737
39735: GO 39763
39737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39738: LD_ADDR_VAR 0 3
39742: PUSH
39743: LD_INT 21
39745: PUSH
39746: LD_INT 22
39748: PUSH
39749: LD_INT 23
39751: PUSH
39752: LD_INT 24
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
39761: GO 39978
39763: LD_INT 45
39765: DOUBLE
39766: EQUAL
39767: IFTRUE 39771
39769: GO 39797
39771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39772: LD_ADDR_VAR 0 3
39776: PUSH
39777: LD_INT 21
39779: PUSH
39780: LD_INT 22
39782: PUSH
39783: LD_INT 23
39785: PUSH
39786: LD_INT 24
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
39795: GO 39978
39797: LD_INT 49
39799: DOUBLE
39800: EQUAL
39801: IFTRUE 39805
39803: GO 39831
39805: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39806: LD_ADDR_VAR 0 3
39810: PUSH
39811: LD_INT 21
39813: PUSH
39814: LD_INT 22
39816: PUSH
39817: LD_INT 23
39819: PUSH
39820: LD_INT 24
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
39829: GO 39978
39831: LD_INT 51
39833: DOUBLE
39834: EQUAL
39835: IFTRUE 39839
39837: GO 39865
39839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39840: LD_ADDR_VAR 0 3
39844: PUSH
39845: LD_INT 21
39847: PUSH
39848: LD_INT 22
39850: PUSH
39851: LD_INT 23
39853: PUSH
39854: LD_INT 24
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: ST_TO_ADDR
39863: GO 39978
39865: LD_INT 52
39867: DOUBLE
39868: EQUAL
39869: IFTRUE 39873
39871: GO 39899
39873: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39874: LD_ADDR_VAR 0 3
39878: PUSH
39879: LD_INT 21
39881: PUSH
39882: LD_INT 22
39884: PUSH
39885: LD_INT 23
39887: PUSH
39888: LD_INT 24
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: ST_TO_ADDR
39897: GO 39978
39899: LD_INT 53
39901: DOUBLE
39902: EQUAL
39903: IFTRUE 39907
39905: GO 39925
39907: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39908: LD_ADDR_VAR 0 3
39912: PUSH
39913: LD_INT 23
39915: PUSH
39916: LD_INT 24
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: ST_TO_ADDR
39923: GO 39978
39925: LD_INT 46
39927: DOUBLE
39928: EQUAL
39929: IFTRUE 39933
39931: GO 39951
39933: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_INT 23
39941: PUSH
39942: LD_INT 24
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: ST_TO_ADDR
39949: GO 39978
39951: LD_INT 47
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39959
39957: GO 39977
39959: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39960: LD_ADDR_VAR 0 3
39964: PUSH
39965: LD_INT 23
39967: PUSH
39968: LD_INT 24
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: ST_TO_ADDR
39975: GO 39978
39977: POP
// result := ( chassis in result ) ;
39978: LD_ADDR_VAR 0 3
39982: PUSH
39983: LD_VAR 0 1
39987: PUSH
39988: LD_VAR 0 3
39992: IN
39993: ST_TO_ADDR
// end ;
39994: LD_VAR 0 3
39998: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
// result := array ;
40008: LD_ADDR_VAR 0 5
40012: PUSH
40013: LD_VAR 0 1
40017: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40018: LD_VAR 0 1
40022: NOT
40023: PUSH
40024: LD_VAR 0 2
40028: NOT
40029: OR
40030: PUSH
40031: LD_VAR 0 3
40035: NOT
40036: OR
40037: PUSH
40038: LD_VAR 0 2
40042: PUSH
40043: LD_VAR 0 1
40047: GREATER
40048: OR
40049: PUSH
40050: LD_VAR 0 3
40054: PUSH
40055: LD_VAR 0 1
40059: GREATER
40060: OR
40061: IFFALSE 40065
// exit ;
40063: GO 40361
// if direction then
40065: LD_VAR 0 4
40069: IFFALSE 40133
// begin d := 1 ;
40071: LD_ADDR_VAR 0 9
40075: PUSH
40076: LD_INT 1
40078: ST_TO_ADDR
// if i_from > i_to then
40079: LD_VAR 0 2
40083: PUSH
40084: LD_VAR 0 3
40088: GREATER
40089: IFFALSE 40115
// length := ( array - i_from ) + i_to else
40091: LD_ADDR_VAR 0 11
40095: PUSH
40096: LD_VAR 0 1
40100: PUSH
40101: LD_VAR 0 2
40105: MINUS
40106: PUSH
40107: LD_VAR 0 3
40111: PLUS
40112: ST_TO_ADDR
40113: GO 40131
// length := i_to - i_from ;
40115: LD_ADDR_VAR 0 11
40119: PUSH
40120: LD_VAR 0 3
40124: PUSH
40125: LD_VAR 0 2
40129: MINUS
40130: ST_TO_ADDR
// end else
40131: GO 40194
// begin d := - 1 ;
40133: LD_ADDR_VAR 0 9
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: ST_TO_ADDR
// if i_from > i_to then
40142: LD_VAR 0 2
40146: PUSH
40147: LD_VAR 0 3
40151: GREATER
40152: IFFALSE 40172
// length := i_from - i_to else
40154: LD_ADDR_VAR 0 11
40158: PUSH
40159: LD_VAR 0 2
40163: PUSH
40164: LD_VAR 0 3
40168: MINUS
40169: ST_TO_ADDR
40170: GO 40194
// length := ( array - i_to ) + i_from ;
40172: LD_ADDR_VAR 0 11
40176: PUSH
40177: LD_VAR 0 1
40181: PUSH
40182: LD_VAR 0 3
40186: MINUS
40187: PUSH
40188: LD_VAR 0 2
40192: PLUS
40193: ST_TO_ADDR
// end ; if not length then
40194: LD_VAR 0 11
40198: NOT
40199: IFFALSE 40203
// exit ;
40201: GO 40361
// tmp := array ;
40203: LD_ADDR_VAR 0 10
40207: PUSH
40208: LD_VAR 0 1
40212: ST_TO_ADDR
// for i = 1 to length do
40213: LD_ADDR_VAR 0 6
40217: PUSH
40218: DOUBLE
40219: LD_INT 1
40221: DEC
40222: ST_TO_ADDR
40223: LD_VAR 0 11
40227: PUSH
40228: FOR_TO
40229: IFFALSE 40349
// begin for j = 1 to array do
40231: LD_ADDR_VAR 0 7
40235: PUSH
40236: DOUBLE
40237: LD_INT 1
40239: DEC
40240: ST_TO_ADDR
40241: LD_VAR 0 1
40245: PUSH
40246: FOR_TO
40247: IFFALSE 40335
// begin k := j + d ;
40249: LD_ADDR_VAR 0 8
40253: PUSH
40254: LD_VAR 0 7
40258: PUSH
40259: LD_VAR 0 9
40263: PLUS
40264: ST_TO_ADDR
// if k > array then
40265: LD_VAR 0 8
40269: PUSH
40270: LD_VAR 0 1
40274: GREATER
40275: IFFALSE 40285
// k := 1 ;
40277: LD_ADDR_VAR 0 8
40281: PUSH
40282: LD_INT 1
40284: ST_TO_ADDR
// if not k then
40285: LD_VAR 0 8
40289: NOT
40290: IFFALSE 40302
// k := array ;
40292: LD_ADDR_VAR 0 8
40296: PUSH
40297: LD_VAR 0 1
40301: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40302: LD_ADDR_VAR 0 10
40306: PUSH
40307: LD_VAR 0 10
40311: PPUSH
40312: LD_VAR 0 8
40316: PPUSH
40317: LD_VAR 0 1
40321: PUSH
40322: LD_VAR 0 7
40326: ARRAY
40327: PPUSH
40328: CALL_OW 1
40332: ST_TO_ADDR
// end ;
40333: GO 40246
40335: POP
40336: POP
// array := tmp ;
40337: LD_ADDR_VAR 0 1
40341: PUSH
40342: LD_VAR 0 10
40346: ST_TO_ADDR
// end ;
40347: GO 40228
40349: POP
40350: POP
// result := array ;
40351: LD_ADDR_VAR 0 5
40355: PUSH
40356: LD_VAR 0 1
40360: ST_TO_ADDR
// end ;
40361: LD_VAR 0 5
40365: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40366: LD_INT 0
40368: PPUSH
40369: PPUSH
// result := 0 ;
40370: LD_ADDR_VAR 0 3
40374: PUSH
40375: LD_INT 0
40377: ST_TO_ADDR
// if not array or not value in array then
40378: LD_VAR 0 1
40382: NOT
40383: PUSH
40384: LD_VAR 0 2
40388: PUSH
40389: LD_VAR 0 1
40393: IN
40394: NOT
40395: OR
40396: IFFALSE 40400
// exit ;
40398: GO 40454
// for i = 1 to array do
40400: LD_ADDR_VAR 0 4
40404: PUSH
40405: DOUBLE
40406: LD_INT 1
40408: DEC
40409: ST_TO_ADDR
40410: LD_VAR 0 1
40414: PUSH
40415: FOR_TO
40416: IFFALSE 40452
// if value = array [ i ] then
40418: LD_VAR 0 2
40422: PUSH
40423: LD_VAR 0 1
40427: PUSH
40428: LD_VAR 0 4
40432: ARRAY
40433: EQUAL
40434: IFFALSE 40450
// begin result := i ;
40436: LD_ADDR_VAR 0 3
40440: PUSH
40441: LD_VAR 0 4
40445: ST_TO_ADDR
// exit ;
40446: POP
40447: POP
40448: GO 40454
// end ;
40450: GO 40415
40452: POP
40453: POP
// end ;
40454: LD_VAR 0 3
40458: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40459: LD_INT 0
40461: PPUSH
// vc_chassis := chassis ;
40462: LD_ADDR_OWVAR 37
40466: PUSH
40467: LD_VAR 0 1
40471: ST_TO_ADDR
// vc_engine := engine ;
40472: LD_ADDR_OWVAR 39
40476: PUSH
40477: LD_VAR 0 2
40481: ST_TO_ADDR
// vc_control := control ;
40482: LD_ADDR_OWVAR 38
40486: PUSH
40487: LD_VAR 0 3
40491: ST_TO_ADDR
// vc_weapon := weapon ;
40492: LD_ADDR_OWVAR 40
40496: PUSH
40497: LD_VAR 0 4
40501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40502: LD_ADDR_OWVAR 41
40506: PUSH
40507: LD_VAR 0 5
40511: ST_TO_ADDR
// end ;
40512: LD_VAR 0 6
40516: RET
// export function WantPlant ( unit ) ; var task ; begin
40517: LD_INT 0
40519: PPUSH
40520: PPUSH
// result := false ;
40521: LD_ADDR_VAR 0 2
40525: PUSH
40526: LD_INT 0
40528: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40529: LD_ADDR_VAR 0 3
40533: PUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 437
40543: ST_TO_ADDR
// if task then
40544: LD_VAR 0 3
40548: IFFALSE 40576
// if task [ 1 ] [ 1 ] = p then
40550: LD_VAR 0 3
40554: PUSH
40555: LD_INT 1
40557: ARRAY
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: PUSH
40563: LD_STRING p
40565: EQUAL
40566: IFFALSE 40576
// result := true ;
40568: LD_ADDR_VAR 0 2
40572: PUSH
40573: LD_INT 1
40575: ST_TO_ADDR
// end ;
40576: LD_VAR 0 2
40580: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
// if pos < 1 then
40587: LD_VAR 0 2
40591: PUSH
40592: LD_INT 1
40594: LESS
40595: IFFALSE 40599
// exit ;
40597: GO 40902
// if pos = 1 then
40599: LD_VAR 0 2
40603: PUSH
40604: LD_INT 1
40606: EQUAL
40607: IFFALSE 40640
// result := Replace ( arr , pos [ 1 ] , value ) else
40609: LD_ADDR_VAR 0 4
40613: PUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: LD_VAR 0 2
40623: PUSH
40624: LD_INT 1
40626: ARRAY
40627: PPUSH
40628: LD_VAR 0 3
40632: PPUSH
40633: CALL_OW 1
40637: ST_TO_ADDR
40638: GO 40902
// begin tmp := arr ;
40640: LD_ADDR_VAR 0 6
40644: PUSH
40645: LD_VAR 0 1
40649: ST_TO_ADDR
// s_arr := [ tmp ] ;
40650: LD_ADDR_VAR 0 7
40654: PUSH
40655: LD_VAR 0 6
40659: PUSH
40660: EMPTY
40661: LIST
40662: ST_TO_ADDR
// for i = 1 to pos - 1 do
40663: LD_ADDR_VAR 0 5
40667: PUSH
40668: DOUBLE
40669: LD_INT 1
40671: DEC
40672: ST_TO_ADDR
40673: LD_VAR 0 2
40677: PUSH
40678: LD_INT 1
40680: MINUS
40681: PUSH
40682: FOR_TO
40683: IFFALSE 40728
// begin tmp := tmp [ pos [ i ] ] ;
40685: LD_ADDR_VAR 0 6
40689: PUSH
40690: LD_VAR 0 6
40694: PUSH
40695: LD_VAR 0 2
40699: PUSH
40700: LD_VAR 0 5
40704: ARRAY
40705: ARRAY
40706: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40707: LD_ADDR_VAR 0 7
40711: PUSH
40712: LD_VAR 0 7
40716: PUSH
40717: LD_VAR 0 6
40721: PUSH
40722: EMPTY
40723: LIST
40724: ADD
40725: ST_TO_ADDR
// end ;
40726: GO 40682
40728: POP
40729: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40730: LD_ADDR_VAR 0 6
40734: PUSH
40735: LD_VAR 0 6
40739: PPUSH
40740: LD_VAR 0 2
40744: PUSH
40745: LD_VAR 0 2
40749: ARRAY
40750: PPUSH
40751: LD_VAR 0 3
40755: PPUSH
40756: CALL_OW 1
40760: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40761: LD_ADDR_VAR 0 7
40765: PUSH
40766: LD_VAR 0 7
40770: PPUSH
40771: LD_VAR 0 7
40775: PPUSH
40776: LD_VAR 0 6
40780: PPUSH
40781: CALL_OW 1
40785: ST_TO_ADDR
// for i = s_arr downto 2 do
40786: LD_ADDR_VAR 0 5
40790: PUSH
40791: DOUBLE
40792: LD_VAR 0 7
40796: INC
40797: ST_TO_ADDR
40798: LD_INT 2
40800: PUSH
40801: FOR_DOWNTO
40802: IFFALSE 40886
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40804: LD_ADDR_VAR 0 6
40808: PUSH
40809: LD_VAR 0 7
40813: PUSH
40814: LD_VAR 0 5
40818: PUSH
40819: LD_INT 1
40821: MINUS
40822: ARRAY
40823: PPUSH
40824: LD_VAR 0 2
40828: PUSH
40829: LD_VAR 0 5
40833: PUSH
40834: LD_INT 1
40836: MINUS
40837: ARRAY
40838: PPUSH
40839: LD_VAR 0 7
40843: PUSH
40844: LD_VAR 0 5
40848: ARRAY
40849: PPUSH
40850: CALL_OW 1
40854: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40855: LD_ADDR_VAR 0 7
40859: PUSH
40860: LD_VAR 0 7
40864: PPUSH
40865: LD_VAR 0 5
40869: PUSH
40870: LD_INT 1
40872: MINUS
40873: PPUSH
40874: LD_VAR 0 6
40878: PPUSH
40879: CALL_OW 1
40883: ST_TO_ADDR
// end ;
40884: GO 40801
40886: POP
40887: POP
// result := s_arr [ 1 ] ;
40888: LD_ADDR_VAR 0 4
40892: PUSH
40893: LD_VAR 0 7
40897: PUSH
40898: LD_INT 1
40900: ARRAY
40901: ST_TO_ADDR
// end ; end ;
40902: LD_VAR 0 4
40906: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40907: LD_INT 0
40909: PPUSH
40910: PPUSH
// if not list then
40911: LD_VAR 0 1
40915: NOT
40916: IFFALSE 40920
// exit ;
40918: GO 41011
// i := list [ pos1 ] ;
40920: LD_ADDR_VAR 0 5
40924: PUSH
40925: LD_VAR 0 1
40929: PUSH
40930: LD_VAR 0 2
40934: ARRAY
40935: ST_TO_ADDR
// if not i then
40936: LD_VAR 0 5
40940: NOT
40941: IFFALSE 40945
// exit ;
40943: GO 41011
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40945: LD_ADDR_VAR 0 1
40949: PUSH
40950: LD_VAR 0 1
40954: PPUSH
40955: LD_VAR 0 2
40959: PPUSH
40960: LD_VAR 0 1
40964: PUSH
40965: LD_VAR 0 3
40969: ARRAY
40970: PPUSH
40971: CALL_OW 1
40975: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40976: LD_ADDR_VAR 0 1
40980: PUSH
40981: LD_VAR 0 1
40985: PPUSH
40986: LD_VAR 0 3
40990: PPUSH
40991: LD_VAR 0 5
40995: PPUSH
40996: CALL_OW 1
41000: ST_TO_ADDR
// result := list ;
41001: LD_ADDR_VAR 0 4
41005: PUSH
41006: LD_VAR 0 1
41010: ST_TO_ADDR
// end ;
41011: LD_VAR 0 4
41015: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41016: LD_INT 0
41018: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41019: LD_ADDR_VAR 0 5
41023: PUSH
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 250
41033: PPUSH
41034: LD_VAR 0 1
41038: PPUSH
41039: CALL_OW 251
41043: PPUSH
41044: LD_VAR 0 2
41048: PPUSH
41049: LD_VAR 0 3
41053: PPUSH
41054: LD_VAR 0 4
41058: PPUSH
41059: CALL 41069 0 5
41063: ST_TO_ADDR
// end ;
41064: LD_VAR 0 5
41068: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41069: LD_INT 0
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
// if not list then
41075: LD_VAR 0 3
41079: NOT
41080: IFFALSE 41084
// exit ;
41082: GO 41472
// result := [ ] ;
41084: LD_ADDR_VAR 0 6
41088: PUSH
41089: EMPTY
41090: ST_TO_ADDR
// for i in list do
41091: LD_ADDR_VAR 0 7
41095: PUSH
41096: LD_VAR 0 3
41100: PUSH
41101: FOR_IN
41102: IFFALSE 41304
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41104: LD_ADDR_VAR 0 9
41108: PUSH
41109: LD_VAR 0 7
41113: PPUSH
41114: LD_VAR 0 1
41118: PPUSH
41119: LD_VAR 0 2
41123: PPUSH
41124: CALL_OW 297
41128: ST_TO_ADDR
// if not result then
41129: LD_VAR 0 6
41133: NOT
41134: IFFALSE 41160
// result := [ [ i , tmp ] ] else
41136: LD_ADDR_VAR 0 6
41140: PUSH
41141: LD_VAR 0 7
41145: PUSH
41146: LD_VAR 0 9
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: ST_TO_ADDR
41158: GO 41302
// begin if result [ result ] [ 2 ] < tmp then
41160: LD_VAR 0 6
41164: PUSH
41165: LD_VAR 0 6
41169: ARRAY
41170: PUSH
41171: LD_INT 2
41173: ARRAY
41174: PUSH
41175: LD_VAR 0 9
41179: LESS
41180: IFFALSE 41222
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41182: LD_ADDR_VAR 0 6
41186: PUSH
41187: LD_VAR 0 6
41191: PPUSH
41192: LD_VAR 0 6
41196: PUSH
41197: LD_INT 1
41199: PLUS
41200: PPUSH
41201: LD_VAR 0 7
41205: PUSH
41206: LD_VAR 0 9
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PPUSH
41215: CALL_OW 2
41219: ST_TO_ADDR
41220: GO 41302
// for j = 1 to result do
41222: LD_ADDR_VAR 0 8
41226: PUSH
41227: DOUBLE
41228: LD_INT 1
41230: DEC
41231: ST_TO_ADDR
41232: LD_VAR 0 6
41236: PUSH
41237: FOR_TO
41238: IFFALSE 41300
// begin if tmp < result [ j ] [ 2 ] then
41240: LD_VAR 0 9
41244: PUSH
41245: LD_VAR 0 6
41249: PUSH
41250: LD_VAR 0 8
41254: ARRAY
41255: PUSH
41256: LD_INT 2
41258: ARRAY
41259: LESS
41260: IFFALSE 41298
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41262: LD_ADDR_VAR 0 6
41266: PUSH
41267: LD_VAR 0 6
41271: PPUSH
41272: LD_VAR 0 8
41276: PPUSH
41277: LD_VAR 0 7
41281: PUSH
41282: LD_VAR 0 9
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PPUSH
41291: CALL_OW 2
41295: ST_TO_ADDR
// break ;
41296: GO 41300
// end ; end ;
41298: GO 41237
41300: POP
41301: POP
// end ; end ;
41302: GO 41101
41304: POP
41305: POP
// if result and not asc then
41306: LD_VAR 0 6
41310: PUSH
41311: LD_VAR 0 4
41315: NOT
41316: AND
41317: IFFALSE 41392
// begin tmp := result ;
41319: LD_ADDR_VAR 0 9
41323: PUSH
41324: LD_VAR 0 6
41328: ST_TO_ADDR
// for i = tmp downto 1 do
41329: LD_ADDR_VAR 0 7
41333: PUSH
41334: DOUBLE
41335: LD_VAR 0 9
41339: INC
41340: ST_TO_ADDR
41341: LD_INT 1
41343: PUSH
41344: FOR_DOWNTO
41345: IFFALSE 41390
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41347: LD_ADDR_VAR 0 6
41351: PUSH
41352: LD_VAR 0 6
41356: PPUSH
41357: LD_VAR 0 9
41361: PUSH
41362: LD_VAR 0 7
41366: MINUS
41367: PUSH
41368: LD_INT 1
41370: PLUS
41371: PPUSH
41372: LD_VAR 0 9
41376: PUSH
41377: LD_VAR 0 7
41381: ARRAY
41382: PPUSH
41383: CALL_OW 1
41387: ST_TO_ADDR
41388: GO 41344
41390: POP
41391: POP
// end ; tmp := [ ] ;
41392: LD_ADDR_VAR 0 9
41396: PUSH
41397: EMPTY
41398: ST_TO_ADDR
// if mode then
41399: LD_VAR 0 5
41403: IFFALSE 41472
// begin for i = 1 to result do
41405: LD_ADDR_VAR 0 7
41409: PUSH
41410: DOUBLE
41411: LD_INT 1
41413: DEC
41414: ST_TO_ADDR
41415: LD_VAR 0 6
41419: PUSH
41420: FOR_TO
41421: IFFALSE 41460
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41423: LD_ADDR_VAR 0 9
41427: PUSH
41428: LD_VAR 0 9
41432: PPUSH
41433: LD_VAR 0 7
41437: PPUSH
41438: LD_VAR 0 6
41442: PUSH
41443: LD_VAR 0 7
41447: ARRAY
41448: PUSH
41449: LD_INT 1
41451: ARRAY
41452: PPUSH
41453: CALL_OW 1
41457: ST_TO_ADDR
41458: GO 41420
41460: POP
41461: POP
// result := tmp ;
41462: LD_ADDR_VAR 0 6
41466: PUSH
41467: LD_VAR 0 9
41471: ST_TO_ADDR
// end ; end ;
41472: LD_VAR 0 6
41476: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41477: LD_INT 0
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41485: LD_ADDR_VAR 0 5
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: ST_TO_ADDR
// if not x or not y then
41507: LD_VAR 0 2
41511: NOT
41512: PUSH
41513: LD_VAR 0 3
41517: NOT
41518: OR
41519: IFFALSE 41523
// exit ;
41521: GO 43173
// if not range then
41523: LD_VAR 0 4
41527: NOT
41528: IFFALSE 41538
// range := 10 ;
41530: LD_ADDR_VAR 0 4
41534: PUSH
41535: LD_INT 10
41537: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41538: LD_ADDR_VAR 0 8
41542: PUSH
41543: LD_INT 81
41545: PUSH
41546: LD_VAR 0 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 92
41557: PUSH
41558: LD_VAR 0 2
41562: PUSH
41563: LD_VAR 0 3
41567: PUSH
41568: LD_VAR 0 4
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 3
41581: PUSH
41582: LD_INT 21
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: PPUSH
41601: CALL_OW 69
41605: ST_TO_ADDR
// if not tmp then
41606: LD_VAR 0 8
41610: NOT
41611: IFFALSE 41615
// exit ;
41613: GO 43173
// for i in tmp do
41615: LD_ADDR_VAR 0 6
41619: PUSH
41620: LD_VAR 0 8
41624: PUSH
41625: FOR_IN
41626: IFFALSE 43148
// begin points := [ 0 , 0 , 0 ] ;
41628: LD_ADDR_VAR 0 9
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// bpoints := 1 ;
41647: LD_ADDR_VAR 0 10
41651: PUSH
41652: LD_INT 1
41654: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41655: LD_VAR 0 6
41659: PPUSH
41660: CALL_OW 247
41664: PUSH
41665: LD_INT 1
41667: DOUBLE
41668: EQUAL
41669: IFTRUE 41673
41671: GO 42251
41673: POP
// begin if GetClass ( i ) = 1 then
41674: LD_VAR 0 6
41678: PPUSH
41679: CALL_OW 257
41683: PUSH
41684: LD_INT 1
41686: EQUAL
41687: IFFALSE 41708
// points := [ 10 , 5 , 3 ] ;
41689: LD_ADDR_VAR 0 9
41693: PUSH
41694: LD_INT 10
41696: PUSH
41697: LD_INT 5
41699: PUSH
41700: LD_INT 3
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41708: LD_VAR 0 6
41712: PPUSH
41713: CALL_OW 257
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 3
41723: PUSH
41724: LD_INT 4
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: IN
41732: IFFALSE 41753
// points := [ 3 , 2 , 1 ] ;
41734: LD_ADDR_VAR 0 9
41738: PUSH
41739: LD_INT 3
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41753: LD_VAR 0 6
41757: PPUSH
41758: CALL_OW 257
41762: PUSH
41763: LD_INT 5
41765: EQUAL
41766: IFFALSE 41787
// points := [ 130 , 5 , 2 ] ;
41768: LD_ADDR_VAR 0 9
41772: PUSH
41773: LD_INT 130
41775: PUSH
41776: LD_INT 5
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41787: LD_VAR 0 6
41791: PPUSH
41792: CALL_OW 257
41796: PUSH
41797: LD_INT 8
41799: EQUAL
41800: IFFALSE 41821
// points := [ 35 , 35 , 30 ] ;
41802: LD_ADDR_VAR 0 9
41806: PUSH
41807: LD_INT 35
41809: PUSH
41810: LD_INT 35
41812: PUSH
41813: LD_INT 30
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41821: LD_VAR 0 6
41825: PPUSH
41826: CALL_OW 257
41830: PUSH
41831: LD_INT 9
41833: EQUAL
41834: IFFALSE 41855
// points := [ 20 , 55 , 40 ] ;
41836: LD_ADDR_VAR 0 9
41840: PUSH
41841: LD_INT 20
41843: PUSH
41844: LD_INT 55
41846: PUSH
41847: LD_INT 40
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: LIST
41854: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41855: LD_VAR 0 6
41859: PPUSH
41860: CALL_OW 257
41864: PUSH
41865: LD_INT 12
41867: PUSH
41868: LD_INT 16
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: IN
41875: IFFALSE 41896
// points := [ 5 , 3 , 2 ] ;
41877: LD_ADDR_VAR 0 9
41881: PUSH
41882: LD_INT 5
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: LIST
41895: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41896: LD_VAR 0 6
41900: PPUSH
41901: CALL_OW 257
41905: PUSH
41906: LD_INT 17
41908: EQUAL
41909: IFFALSE 41930
// points := [ 100 , 50 , 75 ] ;
41911: LD_ADDR_VAR 0 9
41915: PUSH
41916: LD_INT 100
41918: PUSH
41919: LD_INT 50
41921: PUSH
41922: LD_INT 75
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41930: LD_VAR 0 6
41934: PPUSH
41935: CALL_OW 257
41939: PUSH
41940: LD_INT 15
41942: EQUAL
41943: IFFALSE 41964
// points := [ 10 , 5 , 3 ] ;
41945: LD_ADDR_VAR 0 9
41949: PUSH
41950: LD_INT 10
41952: PUSH
41953: LD_INT 5
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41964: LD_VAR 0 6
41968: PPUSH
41969: CALL_OW 257
41973: PUSH
41974: LD_INT 14
41976: EQUAL
41977: IFFALSE 41998
// points := [ 10 , 0 , 0 ] ;
41979: LD_ADDR_VAR 0 9
41983: PUSH
41984: LD_INT 10
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41998: LD_VAR 0 6
42002: PPUSH
42003: CALL_OW 257
42007: PUSH
42008: LD_INT 11
42010: EQUAL
42011: IFFALSE 42032
// points := [ 30 , 10 , 5 ] ;
42013: LD_ADDR_VAR 0 9
42017: PUSH
42018: LD_INT 30
42020: PUSH
42021: LD_INT 10
42023: PUSH
42024: LD_INT 5
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42032: LD_VAR 0 1
42036: PPUSH
42037: LD_INT 5
42039: PPUSH
42040: CALL_OW 321
42044: PUSH
42045: LD_INT 2
42047: EQUAL
42048: IFFALSE 42065
// bpoints := bpoints * 1.8 ;
42050: LD_ADDR_VAR 0 10
42054: PUSH
42055: LD_VAR 0 10
42059: PUSH
42060: LD_REAL  1.80000000000000E+0000
42063: MUL
42064: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42065: LD_VAR 0 6
42069: PPUSH
42070: CALL_OW 257
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 3
42083: PUSH
42084: LD_INT 4
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: IN
42093: PUSH
42094: LD_VAR 0 1
42098: PPUSH
42099: LD_INT 51
42101: PPUSH
42102: CALL_OW 321
42106: PUSH
42107: LD_INT 2
42109: EQUAL
42110: AND
42111: IFFALSE 42128
// bpoints := bpoints * 1.2 ;
42113: LD_ADDR_VAR 0 10
42117: PUSH
42118: LD_VAR 0 10
42122: PUSH
42123: LD_REAL  1.20000000000000E+0000
42126: MUL
42127: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42128: LD_VAR 0 6
42132: PPUSH
42133: CALL_OW 257
42137: PUSH
42138: LD_INT 5
42140: PUSH
42141: LD_INT 7
42143: PUSH
42144: LD_INT 9
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: IN
42152: PUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: LD_INT 52
42160: PPUSH
42161: CALL_OW 321
42165: PUSH
42166: LD_INT 2
42168: EQUAL
42169: AND
42170: IFFALSE 42187
// bpoints := bpoints * 1.5 ;
42172: LD_ADDR_VAR 0 10
42176: PUSH
42177: LD_VAR 0 10
42181: PUSH
42182: LD_REAL  1.50000000000000E+0000
42185: MUL
42186: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42187: LD_VAR 0 1
42191: PPUSH
42192: LD_INT 66
42194: PPUSH
42195: CALL_OW 321
42199: PUSH
42200: LD_INT 2
42202: EQUAL
42203: IFFALSE 42220
// bpoints := bpoints * 1.1 ;
42205: LD_ADDR_VAR 0 10
42209: PUSH
42210: LD_VAR 0 10
42214: PUSH
42215: LD_REAL  1.10000000000000E+0000
42218: MUL
42219: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42220: LD_ADDR_VAR 0 10
42224: PUSH
42225: LD_VAR 0 10
42229: PUSH
42230: LD_VAR 0 6
42234: PPUSH
42235: LD_INT 1
42237: PPUSH
42238: CALL_OW 259
42242: PUSH
42243: LD_REAL  1.15000000000000E+0000
42246: MUL
42247: MUL
42248: ST_TO_ADDR
// end ; unit_vehicle :
42249: GO 43077
42251: LD_INT 2
42253: DOUBLE
42254: EQUAL
42255: IFTRUE 42259
42257: GO 43065
42259: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42260: LD_VAR 0 6
42264: PPUSH
42265: CALL_OW 264
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: LD_INT 42
42275: PUSH
42276: LD_INT 24
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: LIST
42283: IN
42284: IFFALSE 42305
// points := [ 25 , 5 , 3 ] ;
42286: LD_ADDR_VAR 0 9
42290: PUSH
42291: LD_INT 25
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: LD_INT 3
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42305: LD_VAR 0 6
42309: PPUSH
42310: CALL_OW 264
42314: PUSH
42315: LD_INT 4
42317: PUSH
42318: LD_INT 43
42320: PUSH
42321: LD_INT 25
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: IN
42329: IFFALSE 42350
// points := [ 40 , 15 , 5 ] ;
42331: LD_ADDR_VAR 0 9
42335: PUSH
42336: LD_INT 40
42338: PUSH
42339: LD_INT 15
42341: PUSH
42342: LD_INT 5
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42350: LD_VAR 0 6
42354: PPUSH
42355: CALL_OW 264
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 23
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: IN
42370: IFFALSE 42391
// points := [ 7 , 25 , 8 ] ;
42372: LD_ADDR_VAR 0 9
42376: PUSH
42377: LD_INT 7
42379: PUSH
42380: LD_INT 25
42382: PUSH
42383: LD_INT 8
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42391: LD_VAR 0 6
42395: PPUSH
42396: CALL_OW 264
42400: PUSH
42401: LD_INT 5
42403: PUSH
42404: LD_INT 27
42406: PUSH
42407: LD_INT 44
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: IN
42415: IFFALSE 42436
// points := [ 14 , 50 , 16 ] ;
42417: LD_ADDR_VAR 0 9
42421: PUSH
42422: LD_INT 14
42424: PUSH
42425: LD_INT 50
42427: PUSH
42428: LD_INT 16
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42436: LD_VAR 0 6
42440: PPUSH
42441: CALL_OW 264
42445: PUSH
42446: LD_INT 6
42448: PUSH
42449: LD_INT 46
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: IN
42456: IFFALSE 42477
// points := [ 32 , 120 , 70 ] ;
42458: LD_ADDR_VAR 0 9
42462: PUSH
42463: LD_INT 32
42465: PUSH
42466: LD_INT 120
42468: PUSH
42469: LD_INT 70
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42477: LD_VAR 0 6
42481: PPUSH
42482: CALL_OW 264
42486: PUSH
42487: LD_INT 7
42489: PUSH
42490: LD_INT 28
42492: PUSH
42493: LD_INT 45
42495: PUSH
42496: LD_INT 92
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: IN
42505: IFFALSE 42526
// points := [ 35 , 20 , 45 ] ;
42507: LD_ADDR_VAR 0 9
42511: PUSH
42512: LD_INT 35
42514: PUSH
42515: LD_INT 20
42517: PUSH
42518: LD_INT 45
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42526: LD_VAR 0 6
42530: PPUSH
42531: CALL_OW 264
42535: PUSH
42536: LD_INT 47
42538: PUSH
42539: EMPTY
42540: LIST
42541: IN
42542: IFFALSE 42563
// points := [ 67 , 45 , 75 ] ;
42544: LD_ADDR_VAR 0 9
42548: PUSH
42549: LD_INT 67
42551: PUSH
42552: LD_INT 45
42554: PUSH
42555: LD_INT 75
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: LIST
42562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42563: LD_VAR 0 6
42567: PPUSH
42568: CALL_OW 264
42572: PUSH
42573: LD_INT 26
42575: PUSH
42576: EMPTY
42577: LIST
42578: IN
42579: IFFALSE 42600
// points := [ 120 , 30 , 80 ] ;
42581: LD_ADDR_VAR 0 9
42585: PUSH
42586: LD_INT 120
42588: PUSH
42589: LD_INT 30
42591: PUSH
42592: LD_INT 80
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42600: LD_VAR 0 6
42604: PPUSH
42605: CALL_OW 264
42609: PUSH
42610: LD_INT 22
42612: PUSH
42613: EMPTY
42614: LIST
42615: IN
42616: IFFALSE 42637
// points := [ 40 , 1 , 1 ] ;
42618: LD_ADDR_VAR 0 9
42622: PUSH
42623: LD_INT 40
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42637: LD_VAR 0 6
42641: PPUSH
42642: CALL_OW 264
42646: PUSH
42647: LD_INT 29
42649: PUSH
42650: EMPTY
42651: LIST
42652: IN
42653: IFFALSE 42674
// points := [ 70 , 200 , 400 ] ;
42655: LD_ADDR_VAR 0 9
42659: PUSH
42660: LD_INT 70
42662: PUSH
42663: LD_INT 200
42665: PUSH
42666: LD_INT 400
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42674: LD_VAR 0 6
42678: PPUSH
42679: CALL_OW 264
42683: PUSH
42684: LD_INT 14
42686: PUSH
42687: LD_INT 53
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: IN
42694: IFFALSE 42715
// points := [ 40 , 10 , 20 ] ;
42696: LD_ADDR_VAR 0 9
42700: PUSH
42701: LD_INT 40
42703: PUSH
42704: LD_INT 10
42706: PUSH
42707: LD_INT 20
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: LIST
42714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42715: LD_VAR 0 6
42719: PPUSH
42720: CALL_OW 264
42724: PUSH
42725: LD_INT 9
42727: PUSH
42728: EMPTY
42729: LIST
42730: IN
42731: IFFALSE 42752
// points := [ 5 , 70 , 20 ] ;
42733: LD_ADDR_VAR 0 9
42737: PUSH
42738: LD_INT 5
42740: PUSH
42741: LD_INT 70
42743: PUSH
42744: LD_INT 20
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42752: LD_VAR 0 6
42756: PPUSH
42757: CALL_OW 264
42761: PUSH
42762: LD_INT 10
42764: PUSH
42765: EMPTY
42766: LIST
42767: IN
42768: IFFALSE 42789
// points := [ 35 , 110 , 70 ] ;
42770: LD_ADDR_VAR 0 9
42774: PUSH
42775: LD_INT 35
42777: PUSH
42778: LD_INT 110
42780: PUSH
42781: LD_INT 70
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42789: LD_VAR 0 6
42793: PPUSH
42794: CALL_OW 265
42798: PUSH
42799: LD_INT 25
42801: EQUAL
42802: IFFALSE 42823
// points := [ 80 , 65 , 100 ] ;
42804: LD_ADDR_VAR 0 9
42808: PUSH
42809: LD_INT 80
42811: PUSH
42812: LD_INT 65
42814: PUSH
42815: LD_INT 100
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42823: LD_VAR 0 6
42827: PPUSH
42828: CALL_OW 263
42832: PUSH
42833: LD_INT 1
42835: EQUAL
42836: IFFALSE 42871
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42838: LD_ADDR_VAR 0 10
42842: PUSH
42843: LD_VAR 0 10
42847: PUSH
42848: LD_VAR 0 6
42852: PPUSH
42853: CALL_OW 311
42857: PPUSH
42858: LD_INT 3
42860: PPUSH
42861: CALL_OW 259
42865: PUSH
42866: LD_INT 4
42868: MUL
42869: MUL
42870: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42871: LD_VAR 0 6
42875: PPUSH
42876: CALL_OW 263
42880: PUSH
42881: LD_INT 2
42883: EQUAL
42884: IFFALSE 42935
// begin j := IsControledBy ( i ) ;
42886: LD_ADDR_VAR 0 7
42890: PUSH
42891: LD_VAR 0 6
42895: PPUSH
42896: CALL_OW 312
42900: ST_TO_ADDR
// if j then
42901: LD_VAR 0 7
42905: IFFALSE 42935
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42907: LD_ADDR_VAR 0 10
42911: PUSH
42912: LD_VAR 0 10
42916: PUSH
42917: LD_VAR 0 7
42921: PPUSH
42922: LD_INT 3
42924: PPUSH
42925: CALL_OW 259
42929: PUSH
42930: LD_INT 3
42932: MUL
42933: MUL
42934: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42935: LD_VAR 0 6
42939: PPUSH
42940: CALL_OW 264
42944: PUSH
42945: LD_INT 5
42947: PUSH
42948: LD_INT 6
42950: PUSH
42951: LD_INT 46
42953: PUSH
42954: LD_INT 44
42956: PUSH
42957: LD_INT 47
42959: PUSH
42960: LD_INT 45
42962: PUSH
42963: LD_INT 28
42965: PUSH
42966: LD_INT 7
42968: PUSH
42969: LD_INT 27
42971: PUSH
42972: LD_INT 29
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: IN
42987: PUSH
42988: LD_VAR 0 1
42992: PPUSH
42993: LD_INT 52
42995: PPUSH
42996: CALL_OW 321
43000: PUSH
43001: LD_INT 2
43003: EQUAL
43004: AND
43005: IFFALSE 43022
// bpoints := bpoints * 1.2 ;
43007: LD_ADDR_VAR 0 10
43011: PUSH
43012: LD_VAR 0 10
43016: PUSH
43017: LD_REAL  1.20000000000000E+0000
43020: MUL
43021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43022: LD_VAR 0 6
43026: PPUSH
43027: CALL_OW 264
43031: PUSH
43032: LD_INT 6
43034: PUSH
43035: LD_INT 46
43037: PUSH
43038: LD_INT 47
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: LIST
43045: IN
43046: IFFALSE 43063
// bpoints := bpoints * 1.2 ;
43048: LD_ADDR_VAR 0 10
43052: PUSH
43053: LD_VAR 0 10
43057: PUSH
43058: LD_REAL  1.20000000000000E+0000
43061: MUL
43062: ST_TO_ADDR
// end ; unit_building :
43063: GO 43077
43065: LD_INT 3
43067: DOUBLE
43068: EQUAL
43069: IFTRUE 43073
43071: GO 43076
43073: POP
// ; end ;
43074: GO 43077
43076: POP
// for j = 1 to 3 do
43077: LD_ADDR_VAR 0 7
43081: PUSH
43082: DOUBLE
43083: LD_INT 1
43085: DEC
43086: ST_TO_ADDR
43087: LD_INT 3
43089: PUSH
43090: FOR_TO
43091: IFFALSE 43144
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43093: LD_ADDR_VAR 0 5
43097: PUSH
43098: LD_VAR 0 5
43102: PPUSH
43103: LD_VAR 0 7
43107: PPUSH
43108: LD_VAR 0 5
43112: PUSH
43113: LD_VAR 0 7
43117: ARRAY
43118: PUSH
43119: LD_VAR 0 9
43123: PUSH
43124: LD_VAR 0 7
43128: ARRAY
43129: PUSH
43130: LD_VAR 0 10
43134: MUL
43135: PLUS
43136: PPUSH
43137: CALL_OW 1
43141: ST_TO_ADDR
43142: GO 43090
43144: POP
43145: POP
// end ;
43146: GO 41625
43148: POP
43149: POP
// result := Replace ( result , 4 , tmp ) ;
43150: LD_ADDR_VAR 0 5
43154: PUSH
43155: LD_VAR 0 5
43159: PPUSH
43160: LD_INT 4
43162: PPUSH
43163: LD_VAR 0 8
43167: PPUSH
43168: CALL_OW 1
43172: ST_TO_ADDR
// end ;
43173: LD_VAR 0 5
43177: RET
// export function DangerAtRange ( unit , range ) ; begin
43178: LD_INT 0
43180: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43181: LD_ADDR_VAR 0 3
43185: PUSH
43186: LD_VAR 0 1
43190: PPUSH
43191: CALL_OW 255
43195: PPUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: CALL_OW 250
43205: PPUSH
43206: LD_VAR 0 1
43210: PPUSH
43211: CALL_OW 251
43215: PPUSH
43216: LD_VAR 0 2
43220: PPUSH
43221: CALL 41477 0 4
43225: ST_TO_ADDR
// end ;
43226: LD_VAR 0 3
43230: RET
// export function DangerInArea ( side , area ) ; begin
43231: LD_INT 0
43233: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_VAR 0 2
43243: PPUSH
43244: LD_INT 81
43246: PUSH
43247: LD_VAR 0 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PPUSH
43256: CALL_OW 70
43260: ST_TO_ADDR
// end ;
43261: LD_VAR 0 3
43265: RET
// export function IsExtension ( b ) ; begin
43266: LD_INT 0
43268: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43269: LD_ADDR_VAR 0 2
43273: PUSH
43274: LD_VAR 0 1
43278: PUSH
43279: LD_INT 23
43281: PUSH
43282: LD_INT 20
43284: PUSH
43285: LD_INT 22
43287: PUSH
43288: LD_INT 17
43290: PUSH
43291: LD_INT 24
43293: PUSH
43294: LD_INT 21
43296: PUSH
43297: LD_INT 19
43299: PUSH
43300: LD_INT 16
43302: PUSH
43303: LD_INT 25
43305: PUSH
43306: LD_INT 18
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: IN
43321: ST_TO_ADDR
// end ;
43322: LD_VAR 0 2
43326: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43327: LD_INT 0
43329: PPUSH
43330: PPUSH
43331: PPUSH
// result := [ ] ;
43332: LD_ADDR_VAR 0 4
43336: PUSH
43337: EMPTY
43338: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43339: LD_ADDR_VAR 0 5
43343: PUSH
43344: LD_VAR 0 2
43348: PPUSH
43349: LD_INT 21
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PPUSH
43359: CALL_OW 70
43363: ST_TO_ADDR
// if not tmp then
43364: LD_VAR 0 5
43368: NOT
43369: IFFALSE 43373
// exit ;
43371: GO 43437
// if checkLink then
43373: LD_VAR 0 3
43377: IFFALSE 43427
// begin for i in tmp do
43379: LD_ADDR_VAR 0 6
43383: PUSH
43384: LD_VAR 0 5
43388: PUSH
43389: FOR_IN
43390: IFFALSE 43425
// if GetBase ( i ) <> base then
43392: LD_VAR 0 6
43396: PPUSH
43397: CALL_OW 274
43401: PUSH
43402: LD_VAR 0 1
43406: NONEQUAL
43407: IFFALSE 43423
// ComLinkToBase ( base , i ) ;
43409: LD_VAR 0 1
43413: PPUSH
43414: LD_VAR 0 6
43418: PPUSH
43419: CALL_OW 169
43423: GO 43389
43425: POP
43426: POP
// end ; result := tmp ;
43427: LD_ADDR_VAR 0 4
43431: PUSH
43432: LD_VAR 0 5
43436: ST_TO_ADDR
// end ;
43437: LD_VAR 0 4
43441: RET
// export function ComComplete ( units , b ) ; var i ; begin
43442: LD_INT 0
43444: PPUSH
43445: PPUSH
// if not units then
43446: LD_VAR 0 1
43450: NOT
43451: IFFALSE 43455
// exit ;
43453: GO 43545
// for i in units do
43455: LD_ADDR_VAR 0 4
43459: PUSH
43460: LD_VAR 0 1
43464: PUSH
43465: FOR_IN
43466: IFFALSE 43543
// if BuildingStatus ( b ) = bs_build then
43468: LD_VAR 0 2
43472: PPUSH
43473: CALL_OW 461
43477: PUSH
43478: LD_INT 1
43480: EQUAL
43481: IFFALSE 43541
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43483: LD_VAR 0 4
43487: PPUSH
43488: LD_STRING h
43490: PUSH
43491: LD_VAR 0 2
43495: PPUSH
43496: CALL_OW 250
43500: PUSH
43501: LD_VAR 0 2
43505: PPUSH
43506: CALL_OW 251
43510: PUSH
43511: LD_VAR 0 2
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: PUSH
43534: EMPTY
43535: LIST
43536: PPUSH
43537: CALL_OW 446
43541: GO 43465
43543: POP
43544: POP
// end ;
43545: LD_VAR 0 3
43549: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43550: LD_INT 0
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43558: LD_VAR 0 1
43562: NOT
43563: PUSH
43564: LD_VAR 0 1
43568: PPUSH
43569: CALL_OW 263
43573: PUSH
43574: LD_INT 2
43576: NONEQUAL
43577: OR
43578: IFFALSE 43582
// exit ;
43580: GO 43898
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43582: LD_ADDR_VAR 0 6
43586: PUSH
43587: LD_INT 22
43589: PUSH
43590: LD_VAR 0 1
43594: PPUSH
43595: CALL_OW 255
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: LD_INT 30
43609: PUSH
43610: LD_INT 36
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 34
43619: PUSH
43620: LD_INT 31
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PPUSH
43636: CALL_OW 69
43640: ST_TO_ADDR
// if not tmp then
43641: LD_VAR 0 6
43645: NOT
43646: IFFALSE 43650
// exit ;
43648: GO 43898
// result := [ ] ;
43650: LD_ADDR_VAR 0 2
43654: PUSH
43655: EMPTY
43656: ST_TO_ADDR
// for i in tmp do
43657: LD_ADDR_VAR 0 3
43661: PUSH
43662: LD_VAR 0 6
43666: PUSH
43667: FOR_IN
43668: IFFALSE 43739
// begin t := UnitsInside ( i ) ;
43670: LD_ADDR_VAR 0 4
43674: PUSH
43675: LD_VAR 0 3
43679: PPUSH
43680: CALL_OW 313
43684: ST_TO_ADDR
// if t then
43685: LD_VAR 0 4
43689: IFFALSE 43737
// for j in t do
43691: LD_ADDR_VAR 0 7
43695: PUSH
43696: LD_VAR 0 4
43700: PUSH
43701: FOR_IN
43702: IFFALSE 43735
// result := Replace ( result , result + 1 , j ) ;
43704: LD_ADDR_VAR 0 2
43708: PUSH
43709: LD_VAR 0 2
43713: PPUSH
43714: LD_VAR 0 2
43718: PUSH
43719: LD_INT 1
43721: PLUS
43722: PPUSH
43723: LD_VAR 0 7
43727: PPUSH
43728: CALL_OW 1
43732: ST_TO_ADDR
43733: GO 43701
43735: POP
43736: POP
// end ;
43737: GO 43667
43739: POP
43740: POP
// if not result then
43741: LD_VAR 0 2
43745: NOT
43746: IFFALSE 43750
// exit ;
43748: GO 43898
// mech := result [ 1 ] ;
43750: LD_ADDR_VAR 0 5
43754: PUSH
43755: LD_VAR 0 2
43759: PUSH
43760: LD_INT 1
43762: ARRAY
43763: ST_TO_ADDR
// if result > 1 then
43764: LD_VAR 0 2
43768: PUSH
43769: LD_INT 1
43771: GREATER
43772: IFFALSE 43884
// begin for i = 2 to result do
43774: LD_ADDR_VAR 0 3
43778: PUSH
43779: DOUBLE
43780: LD_INT 2
43782: DEC
43783: ST_TO_ADDR
43784: LD_VAR 0 2
43788: PUSH
43789: FOR_TO
43790: IFFALSE 43882
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43792: LD_ADDR_VAR 0 4
43796: PUSH
43797: LD_VAR 0 2
43801: PUSH
43802: LD_VAR 0 3
43806: ARRAY
43807: PPUSH
43808: LD_INT 3
43810: PPUSH
43811: CALL_OW 259
43815: PUSH
43816: LD_VAR 0 2
43820: PUSH
43821: LD_VAR 0 3
43825: ARRAY
43826: PPUSH
43827: CALL_OW 432
43831: MINUS
43832: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43833: LD_VAR 0 4
43837: PUSH
43838: LD_VAR 0 5
43842: PPUSH
43843: LD_INT 3
43845: PPUSH
43846: CALL_OW 259
43850: PUSH
43851: LD_VAR 0 5
43855: PPUSH
43856: CALL_OW 432
43860: MINUS
43861: GREATEREQUAL
43862: IFFALSE 43880
// mech := result [ i ] ;
43864: LD_ADDR_VAR 0 5
43868: PUSH
43869: LD_VAR 0 2
43873: PUSH
43874: LD_VAR 0 3
43878: ARRAY
43879: ST_TO_ADDR
// end ;
43880: GO 43789
43882: POP
43883: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43884: LD_VAR 0 1
43888: PPUSH
43889: LD_VAR 0 5
43893: PPUSH
43894: CALL_OW 135
// end ;
43898: LD_VAR 0 2
43902: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43903: LD_INT 0
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
// result := [ ] ;
43918: LD_ADDR_VAR 0 7
43922: PUSH
43923: EMPTY
43924: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43925: LD_VAR 0 1
43929: PPUSH
43930: CALL_OW 266
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: IN
43945: NOT
43946: IFFALSE 43950
// exit ;
43948: GO 45584
// if name then
43950: LD_VAR 0 3
43954: IFFALSE 43970
// SetBName ( base_dep , name ) ;
43956: LD_VAR 0 1
43960: PPUSH
43961: LD_VAR 0 3
43965: PPUSH
43966: CALL_OW 500
// base := GetBase ( base_dep ) ;
43970: LD_ADDR_VAR 0 15
43974: PUSH
43975: LD_VAR 0 1
43979: PPUSH
43980: CALL_OW 274
43984: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43985: LD_ADDR_VAR 0 16
43989: PUSH
43990: LD_VAR 0 1
43994: PPUSH
43995: CALL_OW 255
43999: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44000: LD_ADDR_VAR 0 17
44004: PUSH
44005: LD_VAR 0 1
44009: PPUSH
44010: CALL_OW 248
44014: ST_TO_ADDR
// if sources then
44015: LD_VAR 0 5
44019: IFFALSE 44066
// for i = 1 to 3 do
44021: LD_ADDR_VAR 0 8
44025: PUSH
44026: DOUBLE
44027: LD_INT 1
44029: DEC
44030: ST_TO_ADDR
44031: LD_INT 3
44033: PUSH
44034: FOR_TO
44035: IFFALSE 44064
// AddResourceType ( base , i , sources [ i ] ) ;
44037: LD_VAR 0 15
44041: PPUSH
44042: LD_VAR 0 8
44046: PPUSH
44047: LD_VAR 0 5
44051: PUSH
44052: LD_VAR 0 8
44056: ARRAY
44057: PPUSH
44058: CALL_OW 276
44062: GO 44034
44064: POP
44065: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44066: LD_ADDR_VAR 0 18
44070: PUSH
44071: LD_VAR 0 15
44075: PPUSH
44076: LD_VAR 0 2
44080: PPUSH
44081: LD_INT 1
44083: PPUSH
44084: CALL 43327 0 3
44088: ST_TO_ADDR
// InitHc ;
44089: CALL_OW 19
// InitUc ;
44093: CALL_OW 18
// uc_side := side ;
44097: LD_ADDR_OWVAR 20
44101: PUSH
44102: LD_VAR 0 16
44106: ST_TO_ADDR
// uc_nation := nation ;
44107: LD_ADDR_OWVAR 21
44111: PUSH
44112: LD_VAR 0 17
44116: ST_TO_ADDR
// if buildings then
44117: LD_VAR 0 18
44121: IFFALSE 45443
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44123: LD_ADDR_VAR 0 19
44127: PUSH
44128: LD_VAR 0 18
44132: PPUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 30
44138: PUSH
44139: LD_INT 29
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 30
44148: PUSH
44149: LD_INT 30
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: PPUSH
44161: CALL_OW 72
44165: ST_TO_ADDR
// if tmp then
44166: LD_VAR 0 19
44170: IFFALSE 44218
// for i in tmp do
44172: LD_ADDR_VAR 0 8
44176: PUSH
44177: LD_VAR 0 19
44181: PUSH
44182: FOR_IN
44183: IFFALSE 44216
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44185: LD_VAR 0 8
44189: PPUSH
44190: CALL_OW 250
44194: PPUSH
44195: LD_VAR 0 8
44199: PPUSH
44200: CALL_OW 251
44204: PPUSH
44205: LD_VAR 0 16
44209: PPUSH
44210: CALL_OW 441
44214: GO 44182
44216: POP
44217: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44218: LD_VAR 0 18
44222: PPUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 30
44228: PUSH
44229: LD_INT 32
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 30
44238: PUSH
44239: LD_INT 33
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: PPUSH
44251: CALL_OW 72
44255: IFFALSE 44343
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44257: LD_ADDR_VAR 0 8
44261: PUSH
44262: LD_VAR 0 18
44266: PPUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 30
44272: PUSH
44273: LD_INT 32
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 30
44282: PUSH
44283: LD_INT 33
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: PPUSH
44295: CALL_OW 72
44299: PUSH
44300: FOR_IN
44301: IFFALSE 44341
// begin if not GetBWeapon ( i ) then
44303: LD_VAR 0 8
44307: PPUSH
44308: CALL_OW 269
44312: NOT
44313: IFFALSE 44339
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44315: LD_VAR 0 8
44319: PPUSH
44320: LD_VAR 0 8
44324: PPUSH
44325: LD_VAR 0 2
44329: PPUSH
44330: CALL 45589 0 2
44334: PPUSH
44335: CALL_OW 431
// end ;
44339: GO 44300
44341: POP
44342: POP
// end ; for i = 1 to personel do
44343: LD_ADDR_VAR 0 8
44347: PUSH
44348: DOUBLE
44349: LD_INT 1
44351: DEC
44352: ST_TO_ADDR
44353: LD_VAR 0 6
44357: PUSH
44358: FOR_TO
44359: IFFALSE 45423
// begin if i > 4 then
44361: LD_VAR 0 8
44365: PUSH
44366: LD_INT 4
44368: GREATER
44369: IFFALSE 44373
// break ;
44371: GO 45423
// case i of 1 :
44373: LD_VAR 0 8
44377: PUSH
44378: LD_INT 1
44380: DOUBLE
44381: EQUAL
44382: IFTRUE 44386
44384: GO 44466
44386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44387: LD_ADDR_VAR 0 12
44391: PUSH
44392: LD_VAR 0 18
44396: PPUSH
44397: LD_INT 22
44399: PUSH
44400: LD_VAR 0 16
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 58
44411: PUSH
44412: EMPTY
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: LD_INT 30
44420: PUSH
44421: LD_INT 32
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 30
44430: PUSH
44431: LD_INT 4
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 30
44440: PUSH
44441: LD_INT 5
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: PPUSH
44459: CALL_OW 72
44463: ST_TO_ADDR
44464: GO 44688
44466: LD_INT 2
44468: DOUBLE
44469: EQUAL
44470: IFTRUE 44474
44472: GO 44536
44474: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44475: LD_ADDR_VAR 0 12
44479: PUSH
44480: LD_VAR 0 18
44484: PPUSH
44485: LD_INT 22
44487: PUSH
44488: LD_VAR 0 16
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 30
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 30
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PPUSH
44529: CALL_OW 72
44533: ST_TO_ADDR
44534: GO 44688
44536: LD_INT 3
44538: DOUBLE
44539: EQUAL
44540: IFTRUE 44544
44542: GO 44606
44544: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44545: LD_ADDR_VAR 0 12
44549: PUSH
44550: LD_VAR 0 18
44554: PPUSH
44555: LD_INT 22
44557: PUSH
44558: LD_VAR 0 16
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: LD_INT 30
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 30
44582: PUSH
44583: LD_INT 3
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PPUSH
44599: CALL_OW 72
44603: ST_TO_ADDR
44604: GO 44688
44606: LD_INT 4
44608: DOUBLE
44609: EQUAL
44610: IFTRUE 44614
44612: GO 44687
44614: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44615: LD_ADDR_VAR 0 12
44619: PUSH
44620: LD_VAR 0 18
44624: PPUSH
44625: LD_INT 22
44627: PUSH
44628: LD_VAR 0 16
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 30
44642: PUSH
44643: LD_INT 6
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 30
44652: PUSH
44653: LD_INT 7
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 30
44662: PUSH
44663: LD_INT 8
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PPUSH
44680: CALL_OW 72
44684: ST_TO_ADDR
44685: GO 44688
44687: POP
// if i = 1 then
44688: LD_VAR 0 8
44692: PUSH
44693: LD_INT 1
44695: EQUAL
44696: IFFALSE 44807
// begin tmp := [ ] ;
44698: LD_ADDR_VAR 0 19
44702: PUSH
44703: EMPTY
44704: ST_TO_ADDR
// for j in f do
44705: LD_ADDR_VAR 0 9
44709: PUSH
44710: LD_VAR 0 12
44714: PUSH
44715: FOR_IN
44716: IFFALSE 44789
// if GetBType ( j ) = b_bunker then
44718: LD_VAR 0 9
44722: PPUSH
44723: CALL_OW 266
44727: PUSH
44728: LD_INT 32
44730: EQUAL
44731: IFFALSE 44758
// tmp := Insert ( tmp , 1 , j ) else
44733: LD_ADDR_VAR 0 19
44737: PUSH
44738: LD_VAR 0 19
44742: PPUSH
44743: LD_INT 1
44745: PPUSH
44746: LD_VAR 0 9
44750: PPUSH
44751: CALL_OW 2
44755: ST_TO_ADDR
44756: GO 44787
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44758: LD_ADDR_VAR 0 19
44762: PUSH
44763: LD_VAR 0 19
44767: PPUSH
44768: LD_VAR 0 19
44772: PUSH
44773: LD_INT 1
44775: PLUS
44776: PPUSH
44777: LD_VAR 0 9
44781: PPUSH
44782: CALL_OW 2
44786: ST_TO_ADDR
44787: GO 44715
44789: POP
44790: POP
// if tmp then
44791: LD_VAR 0 19
44795: IFFALSE 44807
// f := tmp ;
44797: LD_ADDR_VAR 0 12
44801: PUSH
44802: LD_VAR 0 19
44806: ST_TO_ADDR
// end ; x := personel [ i ] ;
44807: LD_ADDR_VAR 0 13
44811: PUSH
44812: LD_VAR 0 6
44816: PUSH
44817: LD_VAR 0 8
44821: ARRAY
44822: ST_TO_ADDR
// if x = - 1 then
44823: LD_VAR 0 13
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: EQUAL
44832: IFFALSE 45041
// begin for j in f do
44834: LD_ADDR_VAR 0 9
44838: PUSH
44839: LD_VAR 0 12
44843: PUSH
44844: FOR_IN
44845: IFFALSE 45037
// repeat InitHc ;
44847: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44851: LD_VAR 0 9
44855: PPUSH
44856: CALL_OW 266
44860: PUSH
44861: LD_INT 5
44863: EQUAL
44864: IFFALSE 44934
// begin if UnitsInside ( j ) < 3 then
44866: LD_VAR 0 9
44870: PPUSH
44871: CALL_OW 313
44875: PUSH
44876: LD_INT 3
44878: LESS
44879: IFFALSE 44915
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44881: LD_INT 0
44883: PPUSH
44884: LD_INT 5
44886: PUSH
44887: LD_INT 8
44889: PUSH
44890: LD_INT 9
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: PUSH
44898: LD_VAR 0 17
44902: ARRAY
44903: PPUSH
44904: LD_VAR 0 4
44908: PPUSH
44909: CALL_OW 380
44913: GO 44932
// PrepareHuman ( false , i , skill ) ;
44915: LD_INT 0
44917: PPUSH
44918: LD_VAR 0 8
44922: PPUSH
44923: LD_VAR 0 4
44927: PPUSH
44928: CALL_OW 380
// end else
44932: GO 44951
// PrepareHuman ( false , i , skill ) ;
44934: LD_INT 0
44936: PPUSH
44937: LD_VAR 0 8
44941: PPUSH
44942: LD_VAR 0 4
44946: PPUSH
44947: CALL_OW 380
// un := CreateHuman ;
44951: LD_ADDR_VAR 0 14
44955: PUSH
44956: CALL_OW 44
44960: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44961: LD_ADDR_VAR 0 7
44965: PUSH
44966: LD_VAR 0 7
44970: PPUSH
44971: LD_INT 1
44973: PPUSH
44974: LD_VAR 0 14
44978: PPUSH
44979: CALL_OW 2
44983: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44984: LD_VAR 0 14
44988: PPUSH
44989: LD_VAR 0 9
44993: PPUSH
44994: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44998: LD_VAR 0 9
45002: PPUSH
45003: CALL_OW 313
45007: PUSH
45008: LD_INT 6
45010: EQUAL
45011: PUSH
45012: LD_VAR 0 9
45016: PPUSH
45017: CALL_OW 266
45021: PUSH
45022: LD_INT 32
45024: PUSH
45025: LD_INT 31
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: IN
45032: OR
45033: IFFALSE 44847
45035: GO 44844
45037: POP
45038: POP
// end else
45039: GO 45421
// for j = 1 to x do
45041: LD_ADDR_VAR 0 9
45045: PUSH
45046: DOUBLE
45047: LD_INT 1
45049: DEC
45050: ST_TO_ADDR
45051: LD_VAR 0 13
45055: PUSH
45056: FOR_TO
45057: IFFALSE 45419
// begin InitHc ;
45059: CALL_OW 19
// if not f then
45063: LD_VAR 0 12
45067: NOT
45068: IFFALSE 45157
// begin PrepareHuman ( false , i , skill ) ;
45070: LD_INT 0
45072: PPUSH
45073: LD_VAR 0 8
45077: PPUSH
45078: LD_VAR 0 4
45082: PPUSH
45083: CALL_OW 380
// un := CreateHuman ;
45087: LD_ADDR_VAR 0 14
45091: PUSH
45092: CALL_OW 44
45096: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45097: LD_ADDR_VAR 0 7
45101: PUSH
45102: LD_VAR 0 7
45106: PPUSH
45107: LD_INT 1
45109: PPUSH
45110: LD_VAR 0 14
45114: PPUSH
45115: CALL_OW 2
45119: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45120: LD_VAR 0 14
45124: PPUSH
45125: LD_VAR 0 1
45129: PPUSH
45130: CALL_OW 250
45134: PPUSH
45135: LD_VAR 0 1
45139: PPUSH
45140: CALL_OW 251
45144: PPUSH
45145: LD_INT 10
45147: PPUSH
45148: LD_INT 0
45150: PPUSH
45151: CALL_OW 50
// continue ;
45155: GO 45056
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45157: LD_VAR 0 12
45161: PUSH
45162: LD_INT 1
45164: ARRAY
45165: PPUSH
45166: CALL_OW 313
45170: PUSH
45171: LD_VAR 0 12
45175: PUSH
45176: LD_INT 1
45178: ARRAY
45179: PPUSH
45180: CALL_OW 266
45184: PUSH
45185: LD_INT 32
45187: PUSH
45188: LD_INT 31
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: IN
45195: AND
45196: PUSH
45197: LD_VAR 0 12
45201: PUSH
45202: LD_INT 1
45204: ARRAY
45205: PPUSH
45206: CALL_OW 313
45210: PUSH
45211: LD_INT 6
45213: EQUAL
45214: OR
45215: IFFALSE 45235
// f := Delete ( f , 1 ) ;
45217: LD_ADDR_VAR 0 12
45221: PUSH
45222: LD_VAR 0 12
45226: PPUSH
45227: LD_INT 1
45229: PPUSH
45230: CALL_OW 3
45234: ST_TO_ADDR
// if not f then
45235: LD_VAR 0 12
45239: NOT
45240: IFFALSE 45258
// begin x := x + 2 ;
45242: LD_ADDR_VAR 0 13
45246: PUSH
45247: LD_VAR 0 13
45251: PUSH
45252: LD_INT 2
45254: PLUS
45255: ST_TO_ADDR
// continue ;
45256: GO 45056
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45258: LD_VAR 0 12
45262: PUSH
45263: LD_INT 1
45265: ARRAY
45266: PPUSH
45267: CALL_OW 266
45271: PUSH
45272: LD_INT 5
45274: EQUAL
45275: IFFALSE 45349
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45277: LD_VAR 0 12
45281: PUSH
45282: LD_INT 1
45284: ARRAY
45285: PPUSH
45286: CALL_OW 313
45290: PUSH
45291: LD_INT 3
45293: LESS
45294: IFFALSE 45330
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45296: LD_INT 0
45298: PPUSH
45299: LD_INT 5
45301: PUSH
45302: LD_INT 8
45304: PUSH
45305: LD_INT 9
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: PUSH
45313: LD_VAR 0 17
45317: ARRAY
45318: PPUSH
45319: LD_VAR 0 4
45323: PPUSH
45324: CALL_OW 380
45328: GO 45347
// PrepareHuman ( false , i , skill ) ;
45330: LD_INT 0
45332: PPUSH
45333: LD_VAR 0 8
45337: PPUSH
45338: LD_VAR 0 4
45342: PPUSH
45343: CALL_OW 380
// end else
45347: GO 45366
// PrepareHuman ( false , i , skill ) ;
45349: LD_INT 0
45351: PPUSH
45352: LD_VAR 0 8
45356: PPUSH
45357: LD_VAR 0 4
45361: PPUSH
45362: CALL_OW 380
// un := CreateHuman ;
45366: LD_ADDR_VAR 0 14
45370: PUSH
45371: CALL_OW 44
45375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45376: LD_ADDR_VAR 0 7
45380: PUSH
45381: LD_VAR 0 7
45385: PPUSH
45386: LD_INT 1
45388: PPUSH
45389: LD_VAR 0 14
45393: PPUSH
45394: CALL_OW 2
45398: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45399: LD_VAR 0 14
45403: PPUSH
45404: LD_VAR 0 12
45408: PUSH
45409: LD_INT 1
45411: ARRAY
45412: PPUSH
45413: CALL_OW 52
// end ;
45417: GO 45056
45419: POP
45420: POP
// end ;
45421: GO 44358
45423: POP
45424: POP
// result := result ^ buildings ;
45425: LD_ADDR_VAR 0 7
45429: PUSH
45430: LD_VAR 0 7
45434: PUSH
45435: LD_VAR 0 18
45439: ADD
45440: ST_TO_ADDR
// end else
45441: GO 45584
// begin for i = 1 to personel do
45443: LD_ADDR_VAR 0 8
45447: PUSH
45448: DOUBLE
45449: LD_INT 1
45451: DEC
45452: ST_TO_ADDR
45453: LD_VAR 0 6
45457: PUSH
45458: FOR_TO
45459: IFFALSE 45582
// begin if i > 4 then
45461: LD_VAR 0 8
45465: PUSH
45466: LD_INT 4
45468: GREATER
45469: IFFALSE 45473
// break ;
45471: GO 45582
// x := personel [ i ] ;
45473: LD_ADDR_VAR 0 13
45477: PUSH
45478: LD_VAR 0 6
45482: PUSH
45483: LD_VAR 0 8
45487: ARRAY
45488: ST_TO_ADDR
// if x = - 1 then
45489: LD_VAR 0 13
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: EQUAL
45498: IFFALSE 45502
// continue ;
45500: GO 45458
// PrepareHuman ( false , i , skill ) ;
45502: LD_INT 0
45504: PPUSH
45505: LD_VAR 0 8
45509: PPUSH
45510: LD_VAR 0 4
45514: PPUSH
45515: CALL_OW 380
// un := CreateHuman ;
45519: LD_ADDR_VAR 0 14
45523: PUSH
45524: CALL_OW 44
45528: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45529: LD_VAR 0 14
45533: PPUSH
45534: LD_VAR 0 1
45538: PPUSH
45539: CALL_OW 250
45543: PPUSH
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 251
45553: PPUSH
45554: LD_INT 10
45556: PPUSH
45557: LD_INT 0
45559: PPUSH
45560: CALL_OW 50
// result := result ^ un ;
45564: LD_ADDR_VAR 0 7
45568: PUSH
45569: LD_VAR 0 7
45573: PUSH
45574: LD_VAR 0 14
45578: ADD
45579: ST_TO_ADDR
// end ;
45580: GO 45458
45582: POP
45583: POP
// end ; end ;
45584: LD_VAR 0 7
45588: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45589: LD_INT 0
45591: PPUSH
45592: PPUSH
45593: PPUSH
45594: PPUSH
45595: PPUSH
45596: PPUSH
45597: PPUSH
45598: PPUSH
45599: PPUSH
45600: PPUSH
45601: PPUSH
45602: PPUSH
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
// result := false ;
45607: LD_ADDR_VAR 0 3
45611: PUSH
45612: LD_INT 0
45614: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45615: LD_VAR 0 1
45619: NOT
45620: PUSH
45621: LD_VAR 0 1
45625: PPUSH
45626: CALL_OW 266
45630: PUSH
45631: LD_INT 32
45633: PUSH
45634: LD_INT 33
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: IN
45641: NOT
45642: OR
45643: IFFALSE 45647
// exit ;
45645: GO 46756
// nat := GetNation ( tower ) ;
45647: LD_ADDR_VAR 0 12
45651: PUSH
45652: LD_VAR 0 1
45656: PPUSH
45657: CALL_OW 248
45661: ST_TO_ADDR
// side := GetSide ( tower ) ;
45662: LD_ADDR_VAR 0 16
45666: PUSH
45667: LD_VAR 0 1
45671: PPUSH
45672: CALL_OW 255
45676: ST_TO_ADDR
// x := GetX ( tower ) ;
45677: LD_ADDR_VAR 0 10
45681: PUSH
45682: LD_VAR 0 1
45686: PPUSH
45687: CALL_OW 250
45691: ST_TO_ADDR
// y := GetY ( tower ) ;
45692: LD_ADDR_VAR 0 11
45696: PUSH
45697: LD_VAR 0 1
45701: PPUSH
45702: CALL_OW 251
45706: ST_TO_ADDR
// if not x or not y then
45707: LD_VAR 0 10
45711: NOT
45712: PUSH
45713: LD_VAR 0 11
45717: NOT
45718: OR
45719: IFFALSE 45723
// exit ;
45721: GO 46756
// weapon := 0 ;
45723: LD_ADDR_VAR 0 18
45727: PUSH
45728: LD_INT 0
45730: ST_TO_ADDR
// fac_list := [ ] ;
45731: LD_ADDR_VAR 0 17
45735: PUSH
45736: EMPTY
45737: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45738: LD_ADDR_VAR 0 6
45742: PUSH
45743: LD_VAR 0 1
45747: PPUSH
45748: CALL_OW 274
45752: PPUSH
45753: LD_VAR 0 2
45757: PPUSH
45758: LD_INT 0
45760: PPUSH
45761: CALL 43327 0 3
45765: PPUSH
45766: LD_INT 30
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PPUSH
45776: CALL_OW 72
45780: ST_TO_ADDR
// if not factories then
45781: LD_VAR 0 6
45785: NOT
45786: IFFALSE 45790
// exit ;
45788: GO 46756
// for i in factories do
45790: LD_ADDR_VAR 0 8
45794: PUSH
45795: LD_VAR 0 6
45799: PUSH
45800: FOR_IN
45801: IFFALSE 45826
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45803: LD_ADDR_VAR 0 17
45807: PUSH
45808: LD_VAR 0 17
45812: PUSH
45813: LD_VAR 0 8
45817: PPUSH
45818: CALL_OW 478
45822: UNION
45823: ST_TO_ADDR
45824: GO 45800
45826: POP
45827: POP
// if not fac_list then
45828: LD_VAR 0 17
45832: NOT
45833: IFFALSE 45837
// exit ;
45835: GO 46756
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45837: LD_ADDR_VAR 0 5
45841: PUSH
45842: LD_INT 4
45844: PUSH
45845: LD_INT 5
45847: PUSH
45848: LD_INT 9
45850: PUSH
45851: LD_INT 10
45853: PUSH
45854: LD_INT 6
45856: PUSH
45857: LD_INT 7
45859: PUSH
45860: LD_INT 11
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 27
45874: PUSH
45875: LD_INT 28
45877: PUSH
45878: LD_INT 26
45880: PUSH
45881: LD_INT 30
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 43
45892: PUSH
45893: LD_INT 44
45895: PUSH
45896: LD_INT 46
45898: PUSH
45899: LD_INT 45
45901: PUSH
45902: LD_INT 47
45904: PUSH
45905: LD_INT 49
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: PUSH
45921: LD_VAR 0 12
45925: ARRAY
45926: ST_TO_ADDR
// list := list isect fac_list ;
45927: LD_ADDR_VAR 0 5
45931: PUSH
45932: LD_VAR 0 5
45936: PUSH
45937: LD_VAR 0 17
45941: ISECT
45942: ST_TO_ADDR
// if not list then
45943: LD_VAR 0 5
45947: NOT
45948: IFFALSE 45952
// exit ;
45950: GO 46756
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45952: LD_VAR 0 12
45956: PUSH
45957: LD_INT 3
45959: EQUAL
45960: PUSH
45961: LD_INT 49
45963: PUSH
45964: LD_VAR 0 5
45968: IN
45969: AND
45970: PUSH
45971: LD_INT 31
45973: PPUSH
45974: LD_VAR 0 16
45978: PPUSH
45979: CALL_OW 321
45983: PUSH
45984: LD_INT 2
45986: EQUAL
45987: AND
45988: IFFALSE 46048
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45990: LD_INT 22
45992: PUSH
45993: LD_VAR 0 16
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 35
46004: PUSH
46005: LD_INT 49
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 91
46014: PUSH
46015: LD_VAR 0 1
46019: PUSH
46020: LD_INT 10
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: PPUSH
46033: CALL_OW 69
46037: NOT
46038: IFFALSE 46048
// weapon := ru_time_lapser ;
46040: LD_ADDR_VAR 0 18
46044: PUSH
46045: LD_INT 49
46047: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46048: LD_VAR 0 12
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: IN
46063: PUSH
46064: LD_INT 11
46066: PUSH
46067: LD_VAR 0 5
46071: IN
46072: PUSH
46073: LD_INT 30
46075: PUSH
46076: LD_VAR 0 5
46080: IN
46081: OR
46082: AND
46083: PUSH
46084: LD_INT 6
46086: PPUSH
46087: LD_VAR 0 16
46091: PPUSH
46092: CALL_OW 321
46096: PUSH
46097: LD_INT 2
46099: EQUAL
46100: AND
46101: IFFALSE 46266
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46103: LD_INT 22
46105: PUSH
46106: LD_VAR 0 16
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 35
46120: PUSH
46121: LD_INT 11
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 35
46130: PUSH
46131: LD_INT 30
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 91
46145: PUSH
46146: LD_VAR 0 1
46150: PUSH
46151: LD_INT 18
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: PPUSH
46164: CALL_OW 69
46168: NOT
46169: PUSH
46170: LD_INT 22
46172: PUSH
46173: LD_VAR 0 16
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 30
46187: PUSH
46188: LD_INT 32
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 30
46197: PUSH
46198: LD_INT 33
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 91
46212: PUSH
46213: LD_VAR 0 1
46217: PUSH
46218: LD_INT 12
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: LIST
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: PPUSH
46234: CALL_OW 69
46238: PUSH
46239: LD_INT 2
46241: GREATER
46242: AND
46243: IFFALSE 46266
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46245: LD_ADDR_VAR 0 18
46249: PUSH
46250: LD_INT 11
46252: PUSH
46253: LD_INT 30
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_VAR 0 12
46264: ARRAY
46265: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46266: LD_VAR 0 18
46270: NOT
46271: PUSH
46272: LD_INT 40
46274: PPUSH
46275: LD_VAR 0 16
46279: PPUSH
46280: CALL_OW 321
46284: PUSH
46285: LD_INT 2
46287: EQUAL
46288: AND
46289: PUSH
46290: LD_INT 7
46292: PUSH
46293: LD_VAR 0 5
46297: IN
46298: PUSH
46299: LD_INT 28
46301: PUSH
46302: LD_VAR 0 5
46306: IN
46307: OR
46308: PUSH
46309: LD_INT 45
46311: PUSH
46312: LD_VAR 0 5
46316: IN
46317: OR
46318: AND
46319: IFFALSE 46573
// begin hex := GetHexInfo ( x , y ) ;
46321: LD_ADDR_VAR 0 4
46325: PUSH
46326: LD_VAR 0 10
46330: PPUSH
46331: LD_VAR 0 11
46335: PPUSH
46336: CALL_OW 546
46340: ST_TO_ADDR
// if hex [ 1 ] then
46341: LD_VAR 0 4
46345: PUSH
46346: LD_INT 1
46348: ARRAY
46349: IFFALSE 46353
// exit ;
46351: GO 46756
// height := hex [ 2 ] ;
46353: LD_ADDR_VAR 0 15
46357: PUSH
46358: LD_VAR 0 4
46362: PUSH
46363: LD_INT 2
46365: ARRAY
46366: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46367: LD_ADDR_VAR 0 14
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 5
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: ST_TO_ADDR
// for i in tmp do
46390: LD_ADDR_VAR 0 8
46394: PUSH
46395: LD_VAR 0 14
46399: PUSH
46400: FOR_IN
46401: IFFALSE 46571
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46403: LD_ADDR_VAR 0 9
46407: PUSH
46408: LD_VAR 0 10
46412: PPUSH
46413: LD_VAR 0 8
46417: PPUSH
46418: LD_INT 5
46420: PPUSH
46421: CALL_OW 272
46425: PUSH
46426: LD_VAR 0 11
46430: PPUSH
46431: LD_VAR 0 8
46435: PPUSH
46436: LD_INT 5
46438: PPUSH
46439: CALL_OW 273
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46448: LD_VAR 0 9
46452: PUSH
46453: LD_INT 1
46455: ARRAY
46456: PPUSH
46457: LD_VAR 0 9
46461: PUSH
46462: LD_INT 2
46464: ARRAY
46465: PPUSH
46466: CALL_OW 488
46470: IFFALSE 46569
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46472: LD_ADDR_VAR 0 4
46476: PUSH
46477: LD_VAR 0 9
46481: PUSH
46482: LD_INT 1
46484: ARRAY
46485: PPUSH
46486: LD_VAR 0 9
46490: PUSH
46491: LD_INT 2
46493: ARRAY
46494: PPUSH
46495: CALL_OW 546
46499: ST_TO_ADDR
// if hex [ 1 ] then
46500: LD_VAR 0 4
46504: PUSH
46505: LD_INT 1
46507: ARRAY
46508: IFFALSE 46512
// continue ;
46510: GO 46400
// h := hex [ 2 ] ;
46512: LD_ADDR_VAR 0 13
46516: PUSH
46517: LD_VAR 0 4
46521: PUSH
46522: LD_INT 2
46524: ARRAY
46525: ST_TO_ADDR
// if h + 7 < height then
46526: LD_VAR 0 13
46530: PUSH
46531: LD_INT 7
46533: PLUS
46534: PUSH
46535: LD_VAR 0 15
46539: LESS
46540: IFFALSE 46569
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46542: LD_ADDR_VAR 0 18
46546: PUSH
46547: LD_INT 7
46549: PUSH
46550: LD_INT 28
46552: PUSH
46553: LD_INT 45
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: PUSH
46561: LD_VAR 0 12
46565: ARRAY
46566: ST_TO_ADDR
// break ;
46567: GO 46571
// end ; end ; end ;
46569: GO 46400
46571: POP
46572: POP
// end ; if not weapon then
46573: LD_VAR 0 18
46577: NOT
46578: IFFALSE 46638
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46580: LD_ADDR_VAR 0 5
46584: PUSH
46585: LD_VAR 0 5
46589: PUSH
46590: LD_INT 11
46592: PUSH
46593: LD_INT 30
46595: PUSH
46596: LD_INT 49
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: DIFF
46604: ST_TO_ADDR
// if not list then
46605: LD_VAR 0 5
46609: NOT
46610: IFFALSE 46614
// exit ;
46612: GO 46756
// weapon := list [ rand ( 1 , list ) ] ;
46614: LD_ADDR_VAR 0 18
46618: PUSH
46619: LD_VAR 0 5
46623: PUSH
46624: LD_INT 1
46626: PPUSH
46627: LD_VAR 0 5
46631: PPUSH
46632: CALL_OW 12
46636: ARRAY
46637: ST_TO_ADDR
// end ; if weapon then
46638: LD_VAR 0 18
46642: IFFALSE 46756
// begin tmp := CostOfWeapon ( weapon ) ;
46644: LD_ADDR_VAR 0 14
46648: PUSH
46649: LD_VAR 0 18
46653: PPUSH
46654: CALL_OW 451
46658: ST_TO_ADDR
// j := GetBase ( tower ) ;
46659: LD_ADDR_VAR 0 9
46663: PUSH
46664: LD_VAR 0 1
46668: PPUSH
46669: CALL_OW 274
46673: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46674: LD_VAR 0 9
46678: PPUSH
46679: LD_INT 1
46681: PPUSH
46682: CALL_OW 275
46686: PUSH
46687: LD_VAR 0 14
46691: PUSH
46692: LD_INT 1
46694: ARRAY
46695: GREATEREQUAL
46696: PUSH
46697: LD_VAR 0 9
46701: PPUSH
46702: LD_INT 2
46704: PPUSH
46705: CALL_OW 275
46709: PUSH
46710: LD_VAR 0 14
46714: PUSH
46715: LD_INT 2
46717: ARRAY
46718: GREATEREQUAL
46719: AND
46720: PUSH
46721: LD_VAR 0 9
46725: PPUSH
46726: LD_INT 3
46728: PPUSH
46729: CALL_OW 275
46733: PUSH
46734: LD_VAR 0 14
46738: PUSH
46739: LD_INT 3
46741: ARRAY
46742: GREATEREQUAL
46743: AND
46744: IFFALSE 46756
// result := weapon ;
46746: LD_ADDR_VAR 0 3
46750: PUSH
46751: LD_VAR 0 18
46755: ST_TO_ADDR
// end ; end ;
46756: LD_VAR 0 3
46760: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46761: LD_INT 0
46763: PPUSH
46764: PPUSH
// result := true ;
46765: LD_ADDR_VAR 0 3
46769: PUSH
46770: LD_INT 1
46772: ST_TO_ADDR
// if array1 = array2 then
46773: LD_VAR 0 1
46777: PUSH
46778: LD_VAR 0 2
46782: EQUAL
46783: IFFALSE 46843
// begin for i = 1 to array1 do
46785: LD_ADDR_VAR 0 4
46789: PUSH
46790: DOUBLE
46791: LD_INT 1
46793: DEC
46794: ST_TO_ADDR
46795: LD_VAR 0 1
46799: PUSH
46800: FOR_TO
46801: IFFALSE 46839
// if array1 [ i ] <> array2 [ i ] then
46803: LD_VAR 0 1
46807: PUSH
46808: LD_VAR 0 4
46812: ARRAY
46813: PUSH
46814: LD_VAR 0 2
46818: PUSH
46819: LD_VAR 0 4
46823: ARRAY
46824: NONEQUAL
46825: IFFALSE 46837
// begin result := false ;
46827: LD_ADDR_VAR 0 3
46831: PUSH
46832: LD_INT 0
46834: ST_TO_ADDR
// break ;
46835: GO 46839
// end ;
46837: GO 46800
46839: POP
46840: POP
// end else
46841: GO 46851
// result := false ;
46843: LD_ADDR_VAR 0 3
46847: PUSH
46848: LD_INT 0
46850: ST_TO_ADDR
// end ;
46851: LD_VAR 0 3
46855: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46856: LD_INT 0
46858: PPUSH
46859: PPUSH
// if not array1 or not array2 then
46860: LD_VAR 0 1
46864: NOT
46865: PUSH
46866: LD_VAR 0 2
46870: NOT
46871: OR
46872: IFFALSE 46876
// exit ;
46874: GO 46940
// result := true ;
46876: LD_ADDR_VAR 0 3
46880: PUSH
46881: LD_INT 1
46883: ST_TO_ADDR
// for i = 1 to array1 do
46884: LD_ADDR_VAR 0 4
46888: PUSH
46889: DOUBLE
46890: LD_INT 1
46892: DEC
46893: ST_TO_ADDR
46894: LD_VAR 0 1
46898: PUSH
46899: FOR_TO
46900: IFFALSE 46938
// if array1 [ i ] <> array2 [ i ] then
46902: LD_VAR 0 1
46906: PUSH
46907: LD_VAR 0 4
46911: ARRAY
46912: PUSH
46913: LD_VAR 0 2
46917: PUSH
46918: LD_VAR 0 4
46922: ARRAY
46923: NONEQUAL
46924: IFFALSE 46936
// begin result := false ;
46926: LD_ADDR_VAR 0 3
46930: PUSH
46931: LD_INT 0
46933: ST_TO_ADDR
// break ;
46934: GO 46938
// end ;
46936: GO 46899
46938: POP
46939: POP
// end ;
46940: LD_VAR 0 3
46944: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46945: LD_INT 0
46947: PPUSH
46948: PPUSH
46949: PPUSH
// pom := GetBase ( fac ) ;
46950: LD_ADDR_VAR 0 5
46954: PUSH
46955: LD_VAR 0 1
46959: PPUSH
46960: CALL_OW 274
46964: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46965: LD_ADDR_VAR 0 4
46969: PUSH
46970: LD_VAR 0 2
46974: PUSH
46975: LD_INT 1
46977: ARRAY
46978: PPUSH
46979: LD_VAR 0 2
46983: PUSH
46984: LD_INT 2
46986: ARRAY
46987: PPUSH
46988: LD_VAR 0 2
46992: PUSH
46993: LD_INT 3
46995: ARRAY
46996: PPUSH
46997: LD_VAR 0 2
47001: PUSH
47002: LD_INT 4
47004: ARRAY
47005: PPUSH
47006: CALL_OW 449
47010: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47011: LD_ADDR_VAR 0 3
47015: PUSH
47016: LD_VAR 0 5
47020: PPUSH
47021: LD_INT 1
47023: PPUSH
47024: CALL_OW 275
47028: PUSH
47029: LD_VAR 0 4
47033: PUSH
47034: LD_INT 1
47036: ARRAY
47037: GREATEREQUAL
47038: PUSH
47039: LD_VAR 0 5
47043: PPUSH
47044: LD_INT 2
47046: PPUSH
47047: CALL_OW 275
47051: PUSH
47052: LD_VAR 0 4
47056: PUSH
47057: LD_INT 2
47059: ARRAY
47060: GREATEREQUAL
47061: AND
47062: PUSH
47063: LD_VAR 0 5
47067: PPUSH
47068: LD_INT 3
47070: PPUSH
47071: CALL_OW 275
47075: PUSH
47076: LD_VAR 0 4
47080: PUSH
47081: LD_INT 3
47083: ARRAY
47084: GREATEREQUAL
47085: AND
47086: ST_TO_ADDR
// end ;
47087: LD_VAR 0 3
47091: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47092: LD_INT 0
47094: PPUSH
47095: PPUSH
47096: PPUSH
47097: PPUSH
// pom := GetBase ( building ) ;
47098: LD_ADDR_VAR 0 3
47102: PUSH
47103: LD_VAR 0 1
47107: PPUSH
47108: CALL_OW 274
47112: ST_TO_ADDR
// if not pom then
47113: LD_VAR 0 3
47117: NOT
47118: IFFALSE 47122
// exit ;
47120: GO 47292
// btype := GetBType ( building ) ;
47122: LD_ADDR_VAR 0 5
47126: PUSH
47127: LD_VAR 0 1
47131: PPUSH
47132: CALL_OW 266
47136: ST_TO_ADDR
// if btype = b_armoury then
47137: LD_VAR 0 5
47141: PUSH
47142: LD_INT 4
47144: EQUAL
47145: IFFALSE 47155
// btype := b_barracks ;
47147: LD_ADDR_VAR 0 5
47151: PUSH
47152: LD_INT 5
47154: ST_TO_ADDR
// if btype = b_depot then
47155: LD_VAR 0 5
47159: PUSH
47160: LD_INT 0
47162: EQUAL
47163: IFFALSE 47173
// btype := b_warehouse ;
47165: LD_ADDR_VAR 0 5
47169: PUSH
47170: LD_INT 1
47172: ST_TO_ADDR
// if btype = b_workshop then
47173: LD_VAR 0 5
47177: PUSH
47178: LD_INT 2
47180: EQUAL
47181: IFFALSE 47191
// btype := b_factory ;
47183: LD_ADDR_VAR 0 5
47187: PUSH
47188: LD_INT 3
47190: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47191: LD_ADDR_VAR 0 4
47195: PUSH
47196: LD_VAR 0 5
47200: PPUSH
47201: LD_VAR 0 1
47205: PPUSH
47206: CALL_OW 248
47210: PPUSH
47211: CALL_OW 450
47215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47216: LD_ADDR_VAR 0 2
47220: PUSH
47221: LD_VAR 0 3
47225: PPUSH
47226: LD_INT 1
47228: PPUSH
47229: CALL_OW 275
47233: PUSH
47234: LD_VAR 0 4
47238: PUSH
47239: LD_INT 1
47241: ARRAY
47242: GREATEREQUAL
47243: PUSH
47244: LD_VAR 0 3
47248: PPUSH
47249: LD_INT 2
47251: PPUSH
47252: CALL_OW 275
47256: PUSH
47257: LD_VAR 0 4
47261: PUSH
47262: LD_INT 2
47264: ARRAY
47265: GREATEREQUAL
47266: AND
47267: PUSH
47268: LD_VAR 0 3
47272: PPUSH
47273: LD_INT 3
47275: PPUSH
47276: CALL_OW 275
47280: PUSH
47281: LD_VAR 0 4
47285: PUSH
47286: LD_INT 3
47288: ARRAY
47289: GREATEREQUAL
47290: AND
47291: ST_TO_ADDR
// end ;
47292: LD_VAR 0 2
47296: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47297: LD_INT 0
47299: PPUSH
47300: PPUSH
47301: PPUSH
// pom := GetBase ( building ) ;
47302: LD_ADDR_VAR 0 4
47306: PUSH
47307: LD_VAR 0 1
47311: PPUSH
47312: CALL_OW 274
47316: ST_TO_ADDR
// if not pom then
47317: LD_VAR 0 4
47321: NOT
47322: IFFALSE 47326
// exit ;
47324: GO 47427
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47326: LD_ADDR_VAR 0 5
47330: PUSH
47331: LD_VAR 0 2
47335: PPUSH
47336: LD_VAR 0 1
47340: PPUSH
47341: CALL_OW 248
47345: PPUSH
47346: CALL_OW 450
47350: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47351: LD_ADDR_VAR 0 3
47355: PUSH
47356: LD_VAR 0 4
47360: PPUSH
47361: LD_INT 1
47363: PPUSH
47364: CALL_OW 275
47368: PUSH
47369: LD_VAR 0 5
47373: PUSH
47374: LD_INT 1
47376: ARRAY
47377: GREATEREQUAL
47378: PUSH
47379: LD_VAR 0 4
47383: PPUSH
47384: LD_INT 2
47386: PPUSH
47387: CALL_OW 275
47391: PUSH
47392: LD_VAR 0 5
47396: PUSH
47397: LD_INT 2
47399: ARRAY
47400: GREATEREQUAL
47401: AND
47402: PUSH
47403: LD_VAR 0 4
47407: PPUSH
47408: LD_INT 3
47410: PPUSH
47411: CALL_OW 275
47415: PUSH
47416: LD_VAR 0 5
47420: PUSH
47421: LD_INT 3
47423: ARRAY
47424: GREATEREQUAL
47425: AND
47426: ST_TO_ADDR
// end ;
47427: LD_VAR 0 3
47431: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47432: LD_INT 0
47434: PPUSH
47435: PPUSH
47436: PPUSH
47437: PPUSH
47438: PPUSH
47439: PPUSH
47440: PPUSH
47441: PPUSH
47442: PPUSH
47443: PPUSH
47444: PPUSH
// result := false ;
47445: LD_ADDR_VAR 0 8
47449: PUSH
47450: LD_INT 0
47452: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47453: LD_VAR 0 5
47457: NOT
47458: PUSH
47459: LD_VAR 0 1
47463: NOT
47464: OR
47465: PUSH
47466: LD_VAR 0 2
47470: NOT
47471: OR
47472: PUSH
47473: LD_VAR 0 3
47477: NOT
47478: OR
47479: IFFALSE 47483
// exit ;
47481: GO 48297
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47483: LD_ADDR_VAR 0 14
47487: PUSH
47488: LD_VAR 0 1
47492: PPUSH
47493: LD_VAR 0 2
47497: PPUSH
47498: LD_VAR 0 3
47502: PPUSH
47503: LD_VAR 0 4
47507: PPUSH
47508: LD_VAR 0 5
47512: PUSH
47513: LD_INT 1
47515: ARRAY
47516: PPUSH
47517: CALL_OW 248
47521: PPUSH
47522: LD_INT 0
47524: PPUSH
47525: CALL 49530 0 6
47529: ST_TO_ADDR
// if not hexes then
47530: LD_VAR 0 14
47534: NOT
47535: IFFALSE 47539
// exit ;
47537: GO 48297
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47539: LD_ADDR_VAR 0 17
47543: PUSH
47544: LD_VAR 0 5
47548: PPUSH
47549: LD_INT 22
47551: PUSH
47552: LD_VAR 0 13
47556: PPUSH
47557: CALL_OW 255
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 30
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 30
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PPUSH
47598: CALL_OW 72
47602: ST_TO_ADDR
// for i = 1 to hexes do
47603: LD_ADDR_VAR 0 9
47607: PUSH
47608: DOUBLE
47609: LD_INT 1
47611: DEC
47612: ST_TO_ADDR
47613: LD_VAR 0 14
47617: PUSH
47618: FOR_TO
47619: IFFALSE 48295
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47621: LD_ADDR_VAR 0 13
47625: PUSH
47626: LD_VAR 0 14
47630: PUSH
47631: LD_VAR 0 9
47635: ARRAY
47636: PUSH
47637: LD_INT 1
47639: ARRAY
47640: PPUSH
47641: LD_VAR 0 14
47645: PUSH
47646: LD_VAR 0 9
47650: ARRAY
47651: PUSH
47652: LD_INT 2
47654: ARRAY
47655: PPUSH
47656: CALL_OW 428
47660: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47661: LD_VAR 0 14
47665: PUSH
47666: LD_VAR 0 9
47670: ARRAY
47671: PUSH
47672: LD_INT 1
47674: ARRAY
47675: PPUSH
47676: LD_VAR 0 14
47680: PUSH
47681: LD_VAR 0 9
47685: ARRAY
47686: PUSH
47687: LD_INT 2
47689: ARRAY
47690: PPUSH
47691: CALL_OW 351
47695: PUSH
47696: LD_VAR 0 14
47700: PUSH
47701: LD_VAR 0 9
47705: ARRAY
47706: PUSH
47707: LD_INT 1
47709: ARRAY
47710: PPUSH
47711: LD_VAR 0 14
47715: PUSH
47716: LD_VAR 0 9
47720: ARRAY
47721: PUSH
47722: LD_INT 2
47724: ARRAY
47725: PPUSH
47726: CALL_OW 488
47730: NOT
47731: OR
47732: PUSH
47733: LD_VAR 0 13
47737: PPUSH
47738: CALL_OW 247
47742: PUSH
47743: LD_INT 3
47745: EQUAL
47746: OR
47747: IFFALSE 47753
// exit ;
47749: POP
47750: POP
47751: GO 48297
// if not tmp then
47753: LD_VAR 0 13
47757: NOT
47758: IFFALSE 47762
// continue ;
47760: GO 47618
// result := true ;
47762: LD_ADDR_VAR 0 8
47766: PUSH
47767: LD_INT 1
47769: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47770: LD_VAR 0 6
47774: PUSH
47775: LD_VAR 0 13
47779: PPUSH
47780: CALL_OW 247
47784: PUSH
47785: LD_INT 2
47787: EQUAL
47788: AND
47789: PUSH
47790: LD_VAR 0 13
47794: PPUSH
47795: CALL_OW 263
47799: PUSH
47800: LD_INT 1
47802: EQUAL
47803: AND
47804: IFFALSE 47968
// begin if IsDrivenBy ( tmp ) then
47806: LD_VAR 0 13
47810: PPUSH
47811: CALL_OW 311
47815: IFFALSE 47819
// continue ;
47817: GO 47618
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47819: LD_VAR 0 6
47823: PPUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 60
47829: PUSH
47830: EMPTY
47831: LIST
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: LD_INT 55
47842: PUSH
47843: EMPTY
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PPUSH
47854: CALL_OW 72
47858: IFFALSE 47966
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47860: LD_ADDR_VAR 0 18
47864: PUSH
47865: LD_VAR 0 6
47869: PPUSH
47870: LD_INT 3
47872: PUSH
47873: LD_INT 60
47875: PUSH
47876: EMPTY
47877: LIST
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 55
47888: PUSH
47889: EMPTY
47890: LIST
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PPUSH
47900: CALL_OW 72
47904: PUSH
47905: LD_INT 1
47907: ARRAY
47908: ST_TO_ADDR
// if IsInUnit ( driver ) then
47909: LD_VAR 0 18
47913: PPUSH
47914: CALL_OW 310
47918: IFFALSE 47929
// ComExit ( driver ) ;
47920: LD_VAR 0 18
47924: PPUSH
47925: CALL 73309 0 1
// AddComEnterUnit ( driver , tmp ) ;
47929: LD_VAR 0 18
47933: PPUSH
47934: LD_VAR 0 13
47938: PPUSH
47939: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47943: LD_VAR 0 18
47947: PPUSH
47948: LD_VAR 0 7
47952: PPUSH
47953: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47957: LD_VAR 0 18
47961: PPUSH
47962: CALL_OW 181
// end ; continue ;
47966: GO 47618
// end ; if not cleaners or not tmp in cleaners then
47968: LD_VAR 0 6
47972: NOT
47973: PUSH
47974: LD_VAR 0 13
47978: PUSH
47979: LD_VAR 0 6
47983: IN
47984: NOT
47985: OR
47986: IFFALSE 48293
// begin if dep then
47988: LD_VAR 0 17
47992: IFFALSE 48128
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47994: LD_ADDR_VAR 0 16
47998: PUSH
47999: LD_VAR 0 17
48003: PUSH
48004: LD_INT 1
48006: ARRAY
48007: PPUSH
48008: CALL_OW 250
48012: PPUSH
48013: LD_VAR 0 17
48017: PUSH
48018: LD_INT 1
48020: ARRAY
48021: PPUSH
48022: CALL_OW 254
48026: PPUSH
48027: LD_INT 5
48029: PPUSH
48030: CALL_OW 272
48034: PUSH
48035: LD_VAR 0 17
48039: PUSH
48040: LD_INT 1
48042: ARRAY
48043: PPUSH
48044: CALL_OW 251
48048: PPUSH
48049: LD_VAR 0 17
48053: PUSH
48054: LD_INT 1
48056: ARRAY
48057: PPUSH
48058: CALL_OW 254
48062: PPUSH
48063: LD_INT 5
48065: PPUSH
48066: CALL_OW 273
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48075: LD_VAR 0 16
48079: PUSH
48080: LD_INT 1
48082: ARRAY
48083: PPUSH
48084: LD_VAR 0 16
48088: PUSH
48089: LD_INT 2
48091: ARRAY
48092: PPUSH
48093: CALL_OW 488
48097: IFFALSE 48128
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48099: LD_VAR 0 13
48103: PPUSH
48104: LD_VAR 0 16
48108: PUSH
48109: LD_INT 1
48111: ARRAY
48112: PPUSH
48113: LD_VAR 0 16
48117: PUSH
48118: LD_INT 2
48120: ARRAY
48121: PPUSH
48122: CALL_OW 111
// continue ;
48126: GO 47618
// end ; end ; r := GetDir ( tmp ) ;
48128: LD_ADDR_VAR 0 15
48132: PUSH
48133: LD_VAR 0 13
48137: PPUSH
48138: CALL_OW 254
48142: ST_TO_ADDR
// if r = 5 then
48143: LD_VAR 0 15
48147: PUSH
48148: LD_INT 5
48150: EQUAL
48151: IFFALSE 48161
// r := 0 ;
48153: LD_ADDR_VAR 0 15
48157: PUSH
48158: LD_INT 0
48160: ST_TO_ADDR
// for j = r to 5 do
48161: LD_ADDR_VAR 0 10
48165: PUSH
48166: DOUBLE
48167: LD_VAR 0 15
48171: DEC
48172: ST_TO_ADDR
48173: LD_INT 5
48175: PUSH
48176: FOR_TO
48177: IFFALSE 48291
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48179: LD_ADDR_VAR 0 11
48183: PUSH
48184: LD_VAR 0 13
48188: PPUSH
48189: CALL_OW 250
48193: PPUSH
48194: LD_VAR 0 10
48198: PPUSH
48199: LD_INT 2
48201: PPUSH
48202: CALL_OW 272
48206: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48207: LD_ADDR_VAR 0 12
48211: PUSH
48212: LD_VAR 0 13
48216: PPUSH
48217: CALL_OW 251
48221: PPUSH
48222: LD_VAR 0 10
48226: PPUSH
48227: LD_INT 2
48229: PPUSH
48230: CALL_OW 273
48234: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48235: LD_VAR 0 11
48239: PPUSH
48240: LD_VAR 0 12
48244: PPUSH
48245: CALL_OW 488
48249: PUSH
48250: LD_VAR 0 11
48254: PPUSH
48255: LD_VAR 0 12
48259: PPUSH
48260: CALL_OW 428
48264: NOT
48265: AND
48266: IFFALSE 48289
// begin ComMoveXY ( tmp , _x , _y ) ;
48268: LD_VAR 0 13
48272: PPUSH
48273: LD_VAR 0 11
48277: PPUSH
48278: LD_VAR 0 12
48282: PPUSH
48283: CALL_OW 111
// break ;
48287: GO 48291
// end ; end ;
48289: GO 48176
48291: POP
48292: POP
// end ; end ;
48293: GO 47618
48295: POP
48296: POP
// end ;
48297: LD_VAR 0 8
48301: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48302: LD_INT 0
48304: PPUSH
// result := true ;
48305: LD_ADDR_VAR 0 3
48309: PUSH
48310: LD_INT 1
48312: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48313: LD_VAR 0 2
48317: PUSH
48318: LD_INT 24
48320: DOUBLE
48321: EQUAL
48322: IFTRUE 48332
48324: LD_INT 33
48326: DOUBLE
48327: EQUAL
48328: IFTRUE 48332
48330: GO 48357
48332: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48333: LD_ADDR_VAR 0 3
48337: PUSH
48338: LD_INT 32
48340: PPUSH
48341: LD_VAR 0 1
48345: PPUSH
48346: CALL_OW 321
48350: PUSH
48351: LD_INT 2
48353: EQUAL
48354: ST_TO_ADDR
48355: GO 48673
48357: LD_INT 20
48359: DOUBLE
48360: EQUAL
48361: IFTRUE 48365
48363: GO 48390
48365: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48366: LD_ADDR_VAR 0 3
48370: PUSH
48371: LD_INT 6
48373: PPUSH
48374: LD_VAR 0 1
48378: PPUSH
48379: CALL_OW 321
48383: PUSH
48384: LD_INT 2
48386: EQUAL
48387: ST_TO_ADDR
48388: GO 48673
48390: LD_INT 22
48392: DOUBLE
48393: EQUAL
48394: IFTRUE 48404
48396: LD_INT 36
48398: DOUBLE
48399: EQUAL
48400: IFTRUE 48404
48402: GO 48429
48404: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48405: LD_ADDR_VAR 0 3
48409: PUSH
48410: LD_INT 15
48412: PPUSH
48413: LD_VAR 0 1
48417: PPUSH
48418: CALL_OW 321
48422: PUSH
48423: LD_INT 2
48425: EQUAL
48426: ST_TO_ADDR
48427: GO 48673
48429: LD_INT 30
48431: DOUBLE
48432: EQUAL
48433: IFTRUE 48437
48435: GO 48462
48437: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48438: LD_ADDR_VAR 0 3
48442: PUSH
48443: LD_INT 20
48445: PPUSH
48446: LD_VAR 0 1
48450: PPUSH
48451: CALL_OW 321
48455: PUSH
48456: LD_INT 2
48458: EQUAL
48459: ST_TO_ADDR
48460: GO 48673
48462: LD_INT 28
48464: DOUBLE
48465: EQUAL
48466: IFTRUE 48476
48468: LD_INT 21
48470: DOUBLE
48471: EQUAL
48472: IFTRUE 48476
48474: GO 48501
48476: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48477: LD_ADDR_VAR 0 3
48481: PUSH
48482: LD_INT 21
48484: PPUSH
48485: LD_VAR 0 1
48489: PPUSH
48490: CALL_OW 321
48494: PUSH
48495: LD_INT 2
48497: EQUAL
48498: ST_TO_ADDR
48499: GO 48673
48501: LD_INT 16
48503: DOUBLE
48504: EQUAL
48505: IFTRUE 48509
48507: GO 48534
48509: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48510: LD_ADDR_VAR 0 3
48514: PUSH
48515: LD_INT 84
48517: PPUSH
48518: LD_VAR 0 1
48522: PPUSH
48523: CALL_OW 321
48527: PUSH
48528: LD_INT 2
48530: EQUAL
48531: ST_TO_ADDR
48532: GO 48673
48534: LD_INT 19
48536: DOUBLE
48537: EQUAL
48538: IFTRUE 48548
48540: LD_INT 23
48542: DOUBLE
48543: EQUAL
48544: IFTRUE 48548
48546: GO 48573
48548: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48549: LD_ADDR_VAR 0 3
48553: PUSH
48554: LD_INT 83
48556: PPUSH
48557: LD_VAR 0 1
48561: PPUSH
48562: CALL_OW 321
48566: PUSH
48567: LD_INT 2
48569: EQUAL
48570: ST_TO_ADDR
48571: GO 48673
48573: LD_INT 17
48575: DOUBLE
48576: EQUAL
48577: IFTRUE 48581
48579: GO 48606
48581: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48582: LD_ADDR_VAR 0 3
48586: PUSH
48587: LD_INT 39
48589: PPUSH
48590: LD_VAR 0 1
48594: PPUSH
48595: CALL_OW 321
48599: PUSH
48600: LD_INT 2
48602: EQUAL
48603: ST_TO_ADDR
48604: GO 48673
48606: LD_INT 18
48608: DOUBLE
48609: EQUAL
48610: IFTRUE 48614
48612: GO 48639
48614: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48615: LD_ADDR_VAR 0 3
48619: PUSH
48620: LD_INT 40
48622: PPUSH
48623: LD_VAR 0 1
48627: PPUSH
48628: CALL_OW 321
48632: PUSH
48633: LD_INT 2
48635: EQUAL
48636: ST_TO_ADDR
48637: GO 48673
48639: LD_INT 27
48641: DOUBLE
48642: EQUAL
48643: IFTRUE 48647
48645: GO 48672
48647: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48648: LD_ADDR_VAR 0 3
48652: PUSH
48653: LD_INT 35
48655: PPUSH
48656: LD_VAR 0 1
48660: PPUSH
48661: CALL_OW 321
48665: PUSH
48666: LD_INT 2
48668: EQUAL
48669: ST_TO_ADDR
48670: GO 48673
48672: POP
// end ;
48673: LD_VAR 0 3
48677: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48678: LD_INT 0
48680: PPUSH
48681: PPUSH
48682: PPUSH
48683: PPUSH
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
48688: PPUSH
48689: PPUSH
48690: PPUSH
// result := false ;
48691: LD_ADDR_VAR 0 6
48695: PUSH
48696: LD_INT 0
48698: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48699: LD_VAR 0 1
48703: NOT
48704: PUSH
48705: LD_VAR 0 1
48709: PPUSH
48710: CALL_OW 266
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: IN
48725: NOT
48726: OR
48727: PUSH
48728: LD_VAR 0 2
48732: NOT
48733: OR
48734: PUSH
48735: LD_VAR 0 5
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 4
48754: PUSH
48755: LD_INT 5
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: IN
48766: NOT
48767: OR
48768: PUSH
48769: LD_VAR 0 3
48773: PPUSH
48774: LD_VAR 0 4
48778: PPUSH
48779: CALL_OW 488
48783: NOT
48784: OR
48785: IFFALSE 48789
// exit ;
48787: GO 49525
// side := GetSide ( depot ) ;
48789: LD_ADDR_VAR 0 9
48793: PUSH
48794: LD_VAR 0 1
48798: PPUSH
48799: CALL_OW 255
48803: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48804: LD_VAR 0 9
48808: PPUSH
48809: LD_VAR 0 2
48813: PPUSH
48814: CALL 48302 0 2
48818: NOT
48819: IFFALSE 48823
// exit ;
48821: GO 49525
// pom := GetBase ( depot ) ;
48823: LD_ADDR_VAR 0 10
48827: PUSH
48828: LD_VAR 0 1
48832: PPUSH
48833: CALL_OW 274
48837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48838: LD_ADDR_VAR 0 11
48842: PUSH
48843: LD_VAR 0 2
48847: PPUSH
48848: LD_VAR 0 1
48852: PPUSH
48853: CALL_OW 248
48857: PPUSH
48858: CALL_OW 450
48862: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48863: LD_VAR 0 10
48867: PPUSH
48868: LD_INT 1
48870: PPUSH
48871: CALL_OW 275
48875: PUSH
48876: LD_VAR 0 11
48880: PUSH
48881: LD_INT 1
48883: ARRAY
48884: GREATEREQUAL
48885: PUSH
48886: LD_VAR 0 10
48890: PPUSH
48891: LD_INT 2
48893: PPUSH
48894: CALL_OW 275
48898: PUSH
48899: LD_VAR 0 11
48903: PUSH
48904: LD_INT 2
48906: ARRAY
48907: GREATEREQUAL
48908: AND
48909: PUSH
48910: LD_VAR 0 10
48914: PPUSH
48915: LD_INT 3
48917: PPUSH
48918: CALL_OW 275
48922: PUSH
48923: LD_VAR 0 11
48927: PUSH
48928: LD_INT 3
48930: ARRAY
48931: GREATEREQUAL
48932: AND
48933: NOT
48934: IFFALSE 48938
// exit ;
48936: GO 49525
// if GetBType ( depot ) = b_depot then
48938: LD_VAR 0 1
48942: PPUSH
48943: CALL_OW 266
48947: PUSH
48948: LD_INT 0
48950: EQUAL
48951: IFFALSE 48963
// dist := 28 else
48953: LD_ADDR_VAR 0 14
48957: PUSH
48958: LD_INT 28
48960: ST_TO_ADDR
48961: GO 48971
// dist := 36 ;
48963: LD_ADDR_VAR 0 14
48967: PUSH
48968: LD_INT 36
48970: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48971: LD_VAR 0 1
48975: PPUSH
48976: LD_VAR 0 3
48980: PPUSH
48981: LD_VAR 0 4
48985: PPUSH
48986: CALL_OW 297
48990: PUSH
48991: LD_VAR 0 14
48995: GREATER
48996: IFFALSE 49000
// exit ;
48998: GO 49525
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49000: LD_ADDR_VAR 0 12
49004: PUSH
49005: LD_VAR 0 2
49009: PPUSH
49010: LD_VAR 0 3
49014: PPUSH
49015: LD_VAR 0 4
49019: PPUSH
49020: LD_VAR 0 5
49024: PPUSH
49025: LD_VAR 0 1
49029: PPUSH
49030: CALL_OW 248
49034: PPUSH
49035: LD_INT 0
49037: PPUSH
49038: CALL 49530 0 6
49042: ST_TO_ADDR
// if not hexes then
49043: LD_VAR 0 12
49047: NOT
49048: IFFALSE 49052
// exit ;
49050: GO 49525
// hex := GetHexInfo ( x , y ) ;
49052: LD_ADDR_VAR 0 15
49056: PUSH
49057: LD_VAR 0 3
49061: PPUSH
49062: LD_VAR 0 4
49066: PPUSH
49067: CALL_OW 546
49071: ST_TO_ADDR
// if hex [ 1 ] then
49072: LD_VAR 0 15
49076: PUSH
49077: LD_INT 1
49079: ARRAY
49080: IFFALSE 49084
// exit ;
49082: GO 49525
// height := hex [ 2 ] ;
49084: LD_ADDR_VAR 0 13
49088: PUSH
49089: LD_VAR 0 15
49093: PUSH
49094: LD_INT 2
49096: ARRAY
49097: ST_TO_ADDR
// for i = 1 to hexes do
49098: LD_ADDR_VAR 0 7
49102: PUSH
49103: DOUBLE
49104: LD_INT 1
49106: DEC
49107: ST_TO_ADDR
49108: LD_VAR 0 12
49112: PUSH
49113: FOR_TO
49114: IFFALSE 49444
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49116: LD_VAR 0 12
49120: PUSH
49121: LD_VAR 0 7
49125: ARRAY
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PPUSH
49131: LD_VAR 0 12
49135: PUSH
49136: LD_VAR 0 7
49140: ARRAY
49141: PUSH
49142: LD_INT 2
49144: ARRAY
49145: PPUSH
49146: CALL_OW 488
49150: NOT
49151: PUSH
49152: LD_VAR 0 12
49156: PUSH
49157: LD_VAR 0 7
49161: ARRAY
49162: PUSH
49163: LD_INT 1
49165: ARRAY
49166: PPUSH
49167: LD_VAR 0 12
49171: PUSH
49172: LD_VAR 0 7
49176: ARRAY
49177: PUSH
49178: LD_INT 2
49180: ARRAY
49181: PPUSH
49182: CALL_OW 428
49186: PUSH
49187: LD_INT 0
49189: GREATER
49190: OR
49191: PUSH
49192: LD_VAR 0 12
49196: PUSH
49197: LD_VAR 0 7
49201: ARRAY
49202: PUSH
49203: LD_INT 1
49205: ARRAY
49206: PPUSH
49207: LD_VAR 0 12
49211: PUSH
49212: LD_VAR 0 7
49216: ARRAY
49217: PUSH
49218: LD_INT 2
49220: ARRAY
49221: PPUSH
49222: CALL_OW 351
49226: OR
49227: IFFALSE 49233
// exit ;
49229: POP
49230: POP
49231: GO 49525
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49233: LD_ADDR_VAR 0 8
49237: PUSH
49238: LD_VAR 0 12
49242: PUSH
49243: LD_VAR 0 7
49247: ARRAY
49248: PUSH
49249: LD_INT 1
49251: ARRAY
49252: PPUSH
49253: LD_VAR 0 12
49257: PUSH
49258: LD_VAR 0 7
49262: ARRAY
49263: PUSH
49264: LD_INT 2
49266: ARRAY
49267: PPUSH
49268: CALL_OW 546
49272: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49273: LD_VAR 0 8
49277: PUSH
49278: LD_INT 1
49280: ARRAY
49281: PUSH
49282: LD_VAR 0 8
49286: PUSH
49287: LD_INT 2
49289: ARRAY
49290: PUSH
49291: LD_VAR 0 13
49295: PUSH
49296: LD_INT 2
49298: PLUS
49299: GREATER
49300: OR
49301: PUSH
49302: LD_VAR 0 8
49306: PUSH
49307: LD_INT 2
49309: ARRAY
49310: PUSH
49311: LD_VAR 0 13
49315: PUSH
49316: LD_INT 2
49318: MINUS
49319: LESS
49320: OR
49321: PUSH
49322: LD_VAR 0 8
49326: PUSH
49327: LD_INT 3
49329: ARRAY
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 8
49336: PUSH
49337: LD_INT 9
49339: PUSH
49340: LD_INT 10
49342: PUSH
49343: LD_INT 11
49345: PUSH
49346: LD_INT 12
49348: PUSH
49349: LD_INT 13
49351: PUSH
49352: LD_INT 16
49354: PUSH
49355: LD_INT 17
49357: PUSH
49358: LD_INT 18
49360: PUSH
49361: LD_INT 19
49363: PUSH
49364: LD_INT 20
49366: PUSH
49367: LD_INT 21
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: IN
49385: NOT
49386: OR
49387: PUSH
49388: LD_VAR 0 8
49392: PUSH
49393: LD_INT 5
49395: ARRAY
49396: NOT
49397: OR
49398: PUSH
49399: LD_VAR 0 8
49403: PUSH
49404: LD_INT 6
49406: ARRAY
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 7
49416: PUSH
49417: LD_INT 9
49419: PUSH
49420: LD_INT 10
49422: PUSH
49423: LD_INT 11
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: IN
49434: NOT
49435: OR
49436: IFFALSE 49442
// exit ;
49438: POP
49439: POP
49440: GO 49525
// end ;
49442: GO 49113
49444: POP
49445: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49446: LD_VAR 0 9
49450: PPUSH
49451: LD_VAR 0 3
49455: PPUSH
49456: LD_VAR 0 4
49460: PPUSH
49461: LD_INT 20
49463: PPUSH
49464: CALL 41477 0 4
49468: PUSH
49469: LD_INT 4
49471: ARRAY
49472: IFFALSE 49476
// exit ;
49474: GO 49525
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49476: LD_VAR 0 2
49480: PUSH
49481: LD_INT 29
49483: PUSH
49484: LD_INT 30
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: IN
49491: PUSH
49492: LD_VAR 0 3
49496: PPUSH
49497: LD_VAR 0 4
49501: PPUSH
49502: LD_VAR 0 9
49506: PPUSH
49507: CALL_OW 440
49511: NOT
49512: AND
49513: IFFALSE 49517
// exit ;
49515: GO 49525
// result := true ;
49517: LD_ADDR_VAR 0 6
49521: PUSH
49522: LD_INT 1
49524: ST_TO_ADDR
// end ;
49525: LD_VAR 0 6
49529: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49530: LD_INT 0
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
49539: PPUSH
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
49544: PPUSH
49545: PPUSH
49546: PPUSH
49547: PPUSH
49548: PPUSH
49549: PPUSH
49550: PPUSH
49551: PPUSH
49552: PPUSH
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
49558: PPUSH
49559: PPUSH
49560: PPUSH
49561: PPUSH
49562: PPUSH
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
49583: PPUSH
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
49588: PPUSH
49589: PPUSH
// result = [ ] ;
49590: LD_ADDR_VAR 0 7
49594: PUSH
49595: EMPTY
49596: ST_TO_ADDR
// temp_list = [ ] ;
49597: LD_ADDR_VAR 0 9
49601: PUSH
49602: EMPTY
49603: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49604: LD_VAR 0 4
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: LD_INT 4
49623: PUSH
49624: LD_INT 5
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: IN
49635: NOT
49636: PUSH
49637: LD_VAR 0 1
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: IN
49652: PUSH
49653: LD_VAR 0 5
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: IN
49672: NOT
49673: AND
49674: OR
49675: IFFALSE 49679
// exit ;
49677: GO 68070
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49679: LD_VAR 0 1
49683: PUSH
49684: LD_INT 6
49686: PUSH
49687: LD_INT 7
49689: PUSH
49690: LD_INT 8
49692: PUSH
49693: LD_INT 13
49695: PUSH
49696: LD_INT 12
49698: PUSH
49699: LD_INT 15
49701: PUSH
49702: LD_INT 11
49704: PUSH
49705: LD_INT 14
49707: PUSH
49708: LD_INT 10
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: IN
49722: IFFALSE 49732
// btype = b_lab ;
49724: LD_ADDR_VAR 0 1
49728: PUSH
49729: LD_INT 6
49731: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49732: LD_VAR 0 6
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: IN
49751: NOT
49752: PUSH
49753: LD_VAR 0 1
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: LD_INT 6
49772: PUSH
49773: LD_INT 36
49775: PUSH
49776: LD_INT 4
49778: PUSH
49779: LD_INT 5
49781: PUSH
49782: LD_INT 31
49784: PUSH
49785: LD_INT 32
49787: PUSH
49788: LD_INT 33
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: IN
49804: NOT
49805: PUSH
49806: LD_VAR 0 6
49810: PUSH
49811: LD_INT 1
49813: EQUAL
49814: AND
49815: OR
49816: PUSH
49817: LD_VAR 0 1
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: IN
49832: NOT
49833: PUSH
49834: LD_VAR 0 6
49838: PUSH
49839: LD_INT 2
49841: EQUAL
49842: AND
49843: OR
49844: IFFALSE 49854
// mode = 0 ;
49846: LD_ADDR_VAR 0 6
49850: PUSH
49851: LD_INT 0
49853: ST_TO_ADDR
// case mode of 0 :
49854: LD_VAR 0 6
49858: PUSH
49859: LD_INT 0
49861: DOUBLE
49862: EQUAL
49863: IFTRUE 49867
49865: GO 61320
49867: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49868: LD_ADDR_VAR 0 11
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 3
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50061: LD_ADDR_VAR 0 12
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 3
50218: NEG
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: NEG
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50257: LD_ADDR_VAR 0 13
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: LD_INT 3
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50456: LD_ADDR_VAR 0 14
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 3
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50652: LD_ADDR_VAR 0 15
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50845: LD_ADDR_VAR 0 16
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51038: LD_ADDR_VAR 0 17
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51268: LD_ADDR_VAR 0 18
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51498: LD_ADDR_VAR 0 19
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51728: LD_ADDR_VAR 0 20
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51958: LD_ADDR_VAR 0 21
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52188: LD_ADDR_VAR 0 22
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52418: LD_ADDR_VAR 0 23
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52698: LD_ADDR_VAR 0 24
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 3
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52974: LD_ADDR_VAR 0 25
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 2
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 3
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53248: LD_ADDR_VAR 0 26
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: NEG
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 3
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53524: LD_ADDR_VAR 0 27
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53804: LD_ADDR_VAR 0 28
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 3
54051: NEG
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54086: LD_ADDR_VAR 0 29
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 3
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54365: LD_ADDR_VAR 0 30
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54643: LD_ADDR_VAR 0 31
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 3
54886: NEG
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54921: LD_ADDR_VAR 0 32
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 3
55164: NEG
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55199: LD_ADDR_VAR 0 33
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 3
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55478: LD_ADDR_VAR 0 34
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 3
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55758: LD_ADDR_VAR 0 35
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55870: LD_ADDR_VAR 0 36
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55982: LD_ADDR_VAR 0 37
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56094: LD_ADDR_VAR 0 38
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56206: LD_ADDR_VAR 0 39
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56318: LD_ADDR_VAR 0 40
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56430: LD_ADDR_VAR 0 41
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: LD_INT 3
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56780: LD_ADDR_VAR 0 42
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 3
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57130: LD_ADDR_VAR 0 43
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 3
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 3
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57478: LD_ADDR_VAR 0 44
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 3
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 3
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 3
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 3
57752: NEG
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: NEG
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 3
57787: NEG
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57828: LD_ADDR_VAR 0 45
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 3
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 3
58137: NEG
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58178: LD_ADDR_VAR 0 46
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 3
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58526: LD_ADDR_VAR 0 47
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58677: LD_ADDR_VAR 0 48
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58824: LD_ADDR_VAR 0 49
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58968: LD_ADDR_VAR 0 50
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59112: LD_ADDR_VAR 0 51
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59259: LD_ADDR_VAR 0 52
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59410: LD_ADDR_VAR 0 53
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59640: LD_ADDR_VAR 0 54
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59870: LD_ADDR_VAR 0 55
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60100: LD_ADDR_VAR 0 56
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60330: LD_ADDR_VAR 0 57
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60560: LD_ADDR_VAR 0 58
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 2
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: NEG
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60790: LD_ADDR_VAR 0 59
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60878: LD_ADDR_VAR 0 60
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60966: LD_ADDR_VAR 0 61
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61054: LD_ADDR_VAR 0 62
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61142: LD_ADDR_VAR 0 63
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61230: LD_ADDR_VAR 0 64
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: ST_TO_ADDR
// end ; 1 :
61318: GO 67215
61320: LD_INT 1
61322: DOUBLE
61323: EQUAL
61324: IFTRUE 61328
61326: GO 63951
61328: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61329: LD_ADDR_VAR 0 11
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: LD_INT 3
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: LD_INT 3
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61373: LD_ADDR_VAR 0 12
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61414: LD_ADDR_VAR 0 13
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: LD_INT 3
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61454: LD_ADDR_VAR 0 14
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: NEG
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61495: LD_ADDR_VAR 0 15
61499: PUSH
61500: LD_INT 2
61502: NEG
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 3
61513: NEG
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: LIST
61538: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61539: LD_ADDR_VAR 0 16
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 3
61570: NEG
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61585: LD_ADDR_VAR 0 17
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 3
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61629: LD_ADDR_VAR 0 18
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: LIST
61669: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61670: LD_ADDR_VAR 0 19
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 3
61687: PUSH
61688: LD_INT 3
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: LD_INT 3
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: LIST
61709: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61710: LD_ADDR_VAR 0 20
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: LIST
61750: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61751: LD_ADDR_VAR 0 21
61755: PUSH
61756: LD_INT 2
61758: NEG
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: NEG
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61795: LD_ADDR_VAR 0 22
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: LD_INT 3
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 3
61814: NEG
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: LD_INT 3
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61841: LD_ADDR_VAR 0 23
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 3
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: LD_INT 4
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61885: LD_ADDR_VAR 0 24
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 4
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: LIST
61925: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61926: LD_ADDR_VAR 0 25
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 4
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 3
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: LIST
61965: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61966: LD_ADDR_VAR 0 26
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: LD_INT 4
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: LD_INT 3
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62007: LD_ADDR_VAR 0 27
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 4
62036: NEG
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62051: LD_ADDR_VAR 0 28
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: LD_INT 3
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 3
62070: NEG
62071: PUSH
62072: LD_INT 4
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 4
62082: NEG
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62097: LD_ADDR_VAR 0 29
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 3
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 3
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: LD_INT 4
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 4
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 5
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 5
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 4
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 6
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 6
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 5
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62252: LD_ADDR_VAR 0 30
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 3
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 3
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 3
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 4
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 4
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 4
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 5
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 5
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 5
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 6
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 6
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62395: LD_ADDR_VAR 0 31
62399: PUSH
62400: LD_INT 3
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 3
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 4
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 4
62442: PUSH
62443: LD_INT 4
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 3
62452: PUSH
62453: LD_INT 4
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 5
62462: PUSH
62463: LD_INT 4
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 5
62472: PUSH
62473: LD_INT 5
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 4
62482: PUSH
62483: LD_INT 5
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 6
62492: PUSH
62493: LD_INT 5
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 6
62502: PUSH
62503: LD_INT 6
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 5
62512: PUSH
62513: LD_INT 6
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62534: LD_ADDR_VAR 0 32
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: LD_INT 4
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 4
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: NEG
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: LD_INT 5
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 5
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: LD_INT 4
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 6
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 6
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: LD_INT 5
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62677: LD_ADDR_VAR 0 33
62681: PUSH
62682: LD_INT 2
62684: NEG
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 3
62695: NEG
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 3
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 4
62729: NEG
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 4
62740: NEG
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 4
62752: NEG
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 5
62763: NEG
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 5
62774: NEG
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 5
62786: NEG
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 6
62797: NEG
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 6
62808: NEG
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62832: LD_ADDR_VAR 0 34
62836: PUSH
62837: LD_INT 2
62839: NEG
62840: PUSH
62841: LD_INT 3
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: NEG
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 3
62863: NEG
62864: PUSH
62865: LD_INT 3
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 3
62875: NEG
62876: PUSH
62877: LD_INT 4
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 4
62887: NEG
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 4
62899: NEG
62900: PUSH
62901: LD_INT 4
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 4
62911: NEG
62912: PUSH
62913: LD_INT 5
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 5
62923: NEG
62924: PUSH
62925: LD_INT 4
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 5
62935: NEG
62936: PUSH
62937: LD_INT 5
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 5
62947: NEG
62948: PUSH
62949: LD_INT 6
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 6
62959: NEG
62960: PUSH
62961: LD_INT 5
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 6
62971: NEG
62972: PUSH
62973: LD_INT 6
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62995: LD_ADDR_VAR 0 41
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: LD_INT 2
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: LD_INT 3
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63039: LD_ADDR_VAR 0 42
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 3
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: LIST
63079: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63080: LD_ADDR_VAR 0 43
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: LD_INT 3
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63120: LD_ADDR_VAR 0 44
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 2
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: LD_INT 3
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63161: LD_ADDR_VAR 0 45
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: NEG
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63205: LD_ADDR_VAR 0 46
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 3
63236: NEG
63237: PUSH
63238: LD_INT 2
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: LIST
63250: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63251: LD_ADDR_VAR 0 47
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: LD_INT 3
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63284: LD_ADDR_VAR 0 48
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63315: LD_ADDR_VAR 0 49
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 3
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63344: LD_ADDR_VAR 0 50
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: LD_INT 3
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 3
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63373: LD_ADDR_VAR 0 51
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63404: LD_ADDR_VAR 0 52
63408: PUSH
63409: LD_INT 3
63411: NEG
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 3
63423: NEG
63424: PUSH
63425: LD_INT 2
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63437: LD_ADDR_VAR 0 53
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 3
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 3
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 2
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63481: LD_ADDR_VAR 0 54
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 3
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: LIST
63521: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63522: LD_ADDR_VAR 0 55
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 2
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 3
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63562: LD_ADDR_VAR 0 56
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: LIST
63602: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63603: LD_ADDR_VAR 0 57
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63647: LD_ADDR_VAR 0 58
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 3
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 3
63666: NEG
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: LD_INT 3
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63693: LD_ADDR_VAR 0 59
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63737: LD_ADDR_VAR 0 60
63741: PUSH
63742: LD_INT 1
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 2
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 2
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: LIST
63777: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63778: LD_ADDR_VAR 0 61
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63818: LD_ADDR_VAR 0 62
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63859: LD_ADDR_VAR 0 63
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 2
63877: NEG
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63903: LD_ADDR_VAR 0 64
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 2
63922: NEG
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: NEG
63935: PUSH
63936: LD_INT 2
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: ST_TO_ADDR
// end ; 2 :
63949: GO 67215
63951: LD_INT 2
63953: DOUBLE
63954: EQUAL
63955: IFTRUE 63959
63957: GO 67214
63959: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63960: LD_ADDR_VAR 0 29
63964: PUSH
63965: LD_INT 4
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 4
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 5
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 5
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 4
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 3
64039: PUSH
64040: LD_INT 2
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 5
64050: PUSH
64051: LD_INT 2
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 3
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 4
64080: PUSH
64081: LD_INT 3
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 4
64090: PUSH
64091: LD_INT 4
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 3
64100: PUSH
64101: LD_INT 4
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 4
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: LD_INT 4
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 4
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 3
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 4
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: LD_INT 5
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 5
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: NEG
64201: PUSH
64202: LD_INT 4
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: PUSH
64223: LD_INT 5
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 2
64232: NEG
64233: PUSH
64234: LD_INT 3
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: NEG
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: NEG
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 2
64266: NEG
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 2
64277: NEG
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 3
64288: NEG
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 4
64299: NEG
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 4
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 4
64322: NEG
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 4
64345: NEG
64346: PUSH
64347: LD_INT 4
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 4
64357: NEG
64358: PUSH
64359: LD_INT 5
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 3
64369: NEG
64370: PUSH
64371: LD_INT 4
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 3
64381: NEG
64382: PUSH
64383: LD_INT 3
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 4
64393: NEG
64394: PUSH
64395: LD_INT 3
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 5
64405: NEG
64406: PUSH
64407: LD_INT 4
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 5
64417: NEG
64418: PUSH
64419: LD_INT 5
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 3
64429: NEG
64430: PUSH
64431: LD_INT 5
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 5
64441: NEG
64442: PUSH
64443: LD_INT 3
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64498: LD_ADDR_VAR 0 30
64502: PUSH
64503: LD_INT 4
64505: PUSH
64506: LD_INT 4
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 4
64515: PUSH
64516: LD_INT 3
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 5
64525: PUSH
64526: LD_INT 4
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 5
64535: PUSH
64536: LD_INT 5
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 4
64545: PUSH
64546: LD_INT 5
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: LD_INT 4
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 5
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 3
64585: PUSH
64586: LD_INT 5
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 4
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: LD_INT 4
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: LD_INT 3
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 2
64667: PUSH
64668: LD_INT 4
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: LD_INT 2
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 4
64688: NEG
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 4
64699: NEG
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 4
64733: NEG
64734: PUSH
64735: LD_INT 1
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 5
64744: NEG
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 5
64755: NEG
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 5
64767: NEG
64768: PUSH
64769: LD_INT 2
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: LD_INT 3
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 3
64802: NEG
64803: PUSH
64804: LD_INT 4
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: LD_INT 3
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: NEG
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 4
64850: NEG
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 4
64862: NEG
64863: PUSH
64864: LD_INT 4
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: LD_INT 4
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 4
64886: NEG
64887: PUSH
64888: LD_INT 2
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 4
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 5
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 4
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 3
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: LD_INT 4
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: LD_INT 5
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: LD_INT 3
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: LD_INT 5
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65045: LD_ADDR_VAR 0 31
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: LD_INT 4
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 3
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: LD_INT 4
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: LD_INT 5
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 5
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 4
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: NEG
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: LD_INT 5
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 2
65134: NEG
65135: PUSH
65136: LD_INT 3
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 2
65168: NEG
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 3
65190: NEG
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 4
65201: NEG
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 4
65212: NEG
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 4
65224: NEG
65225: PUSH
65226: LD_INT 2
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 4
65247: NEG
65248: PUSH
65249: LD_INT 4
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 4
65259: NEG
65260: PUSH
65261: LD_INT 5
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: LD_INT 4
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 3
65283: NEG
65284: PUSH
65285: LD_INT 3
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 4
65295: NEG
65296: PUSH
65297: LD_INT 3
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 5
65307: NEG
65308: PUSH
65309: LD_INT 4
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 5
65319: NEG
65320: PUSH
65321: LD_INT 5
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 3
65331: NEG
65332: PUSH
65333: LD_INT 5
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 5
65343: NEG
65344: PUSH
65345: LD_INT 3
65347: NEG
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: LD_INT 3
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: LD_INT 4
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: LD_INT 3
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 2
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 4
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: PUSH
65435: LD_INT 2
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 4
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 4
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 4
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 5
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 5
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 4
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 3
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 3
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 3
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 5
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65595: LD_ADDR_VAR 0 32
65599: PUSH
65600: LD_INT 4
65602: NEG
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 4
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 3
65625: NEG
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 3
65636: NEG
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 4
65647: NEG
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 5
65658: NEG
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 5
65669: NEG
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 5
65681: NEG
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: NEG
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 3
65704: NEG
65705: PUSH
65706: LD_INT 3
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: NEG
65717: PUSH
65718: LD_INT 4
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: NEG
65729: PUSH
65730: LD_INT 3
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 2
65740: NEG
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 3
65752: NEG
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 4
65764: NEG
65765: PUSH
65766: LD_INT 3
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 4
65776: NEG
65777: PUSH
65778: LD_INT 4
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: LD_INT 4
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 4
65800: NEG
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 4
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 5
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 1
65834: PUSH
65835: LD_INT 4
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: LD_INT 4
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: LD_INT 5
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: LD_INT 3
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 2
65902: NEG
65903: PUSH
65904: LD_INT 5
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 4
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 4
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 3
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 2
65986: PUSH
65987: LD_INT 2
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 4
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 4
66007: PUSH
66008: LD_INT 4
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 4
66017: PUSH
66018: LD_INT 3
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 5
66027: PUSH
66028: LD_INT 4
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 5
66037: PUSH
66038: LD_INT 5
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 4
66047: PUSH
66048: LD_INT 5
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: LD_INT 4
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 3
66067: PUSH
66068: LD_INT 3
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 5
66077: PUSH
66078: LD_INT 3
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 3
66087: PUSH
66088: LD_INT 5
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66142: LD_ADDR_VAR 0 33
66146: PUSH
66147: LD_INT 4
66149: NEG
66150: PUSH
66151: LD_INT 4
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 4
66161: NEG
66162: PUSH
66163: LD_INT 5
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 3
66173: NEG
66174: PUSH
66175: LD_INT 4
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 3
66185: NEG
66186: PUSH
66187: LD_INT 3
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 4
66197: NEG
66198: PUSH
66199: LD_INT 3
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 5
66209: NEG
66210: PUSH
66211: LD_INT 4
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 5
66221: NEG
66222: PUSH
66223: LD_INT 5
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 3
66233: NEG
66234: PUSH
66235: LD_INT 5
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 5
66245: NEG
66246: PUSH
66247: LD_INT 3
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 3
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: LD_INT 4
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: LD_INT 2
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: NEG
66313: PUSH
66314: LD_INT 3
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 4
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: LD_INT 4
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 4
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 4
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 5
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 5
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 4
66400: PUSH
66401: LD_INT 1
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 3
66420: PUSH
66421: LD_INT 1
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 5
66442: PUSH
66443: LD_INT 2
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: LD_INT 3
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: LD_INT 2
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 4
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 4
66482: PUSH
66483: LD_INT 4
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: PUSH
66493: LD_INT 4
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: LD_INT 3
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 4
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 2
66532: PUSH
66533: LD_INT 4
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 4
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: LD_INT 4
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: LD_INT 5
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: LD_INT 5
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: LD_INT 4
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: LD_INT 5
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66680: LD_ADDR_VAR 0 34
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: LD_INT 4
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: LD_INT 5
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 4
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: LD_INT 3
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 3
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: NEG
66743: PUSH
66744: LD_INT 4
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 5
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 2
66766: PUSH
66767: LD_INT 3
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 2
66777: NEG
66778: PUSH
66779: LD_INT 5
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 3
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 3
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 4
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 4
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 3
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 2
66861: PUSH
66862: LD_INT 2
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 4
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 4
66882: PUSH
66883: LD_INT 4
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 4
66892: PUSH
66893: LD_INT 3
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 5
66902: PUSH
66903: LD_INT 4
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 5
66912: PUSH
66913: LD_INT 5
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 4
66922: PUSH
66923: LD_INT 5
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 3
66932: PUSH
66933: LD_INT 4
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 3
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 5
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 3
66962: PUSH
66963: LD_INT 5
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: LD_INT 4
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: LD_INT 4
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: LD_INT 3
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: NEG
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 2
67044: PUSH
67045: LD_INT 4
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 2
67054: NEG
67055: PUSH
67056: LD_INT 2
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 4
67065: NEG
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 4
67076: NEG
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 3
67088: NEG
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 3
67099: NEG
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 4
67110: NEG
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 5
67121: NEG
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 5
67132: NEG
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 5
67144: NEG
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: LD_INT 2
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: ST_TO_ADDR
// end ; end ;
67212: GO 67215
67214: POP
// case btype of b_depot , b_warehouse :
67215: LD_VAR 0 1
67219: PUSH
67220: LD_INT 0
67222: DOUBLE
67223: EQUAL
67224: IFTRUE 67234
67226: LD_INT 1
67228: DOUBLE
67229: EQUAL
67230: IFTRUE 67234
67232: GO 67435
67234: POP
// case nation of nation_american :
67235: LD_VAR 0 5
67239: PUSH
67240: LD_INT 1
67242: DOUBLE
67243: EQUAL
67244: IFTRUE 67248
67246: GO 67304
67248: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67249: LD_ADDR_VAR 0 9
67253: PUSH
67254: LD_VAR 0 11
67258: PUSH
67259: LD_VAR 0 12
67263: PUSH
67264: LD_VAR 0 13
67268: PUSH
67269: LD_VAR 0 14
67273: PUSH
67274: LD_VAR 0 15
67278: PUSH
67279: LD_VAR 0 16
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: PUSH
67292: LD_VAR 0 4
67296: PUSH
67297: LD_INT 1
67299: PLUS
67300: ARRAY
67301: ST_TO_ADDR
67302: GO 67433
67304: LD_INT 2
67306: DOUBLE
67307: EQUAL
67308: IFTRUE 67312
67310: GO 67368
67312: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67313: LD_ADDR_VAR 0 9
67317: PUSH
67318: LD_VAR 0 17
67322: PUSH
67323: LD_VAR 0 18
67327: PUSH
67328: LD_VAR 0 19
67332: PUSH
67333: LD_VAR 0 20
67337: PUSH
67338: LD_VAR 0 21
67342: PUSH
67343: LD_VAR 0 22
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: PUSH
67356: LD_VAR 0 4
67360: PUSH
67361: LD_INT 1
67363: PLUS
67364: ARRAY
67365: ST_TO_ADDR
67366: GO 67433
67368: LD_INT 3
67370: DOUBLE
67371: EQUAL
67372: IFTRUE 67376
67374: GO 67432
67376: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67377: LD_ADDR_VAR 0 9
67381: PUSH
67382: LD_VAR 0 23
67386: PUSH
67387: LD_VAR 0 24
67391: PUSH
67392: LD_VAR 0 25
67396: PUSH
67397: LD_VAR 0 26
67401: PUSH
67402: LD_VAR 0 27
67406: PUSH
67407: LD_VAR 0 28
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: PUSH
67420: LD_VAR 0 4
67424: PUSH
67425: LD_INT 1
67427: PLUS
67428: ARRAY
67429: ST_TO_ADDR
67430: GO 67433
67432: POP
67433: GO 67988
67435: LD_INT 2
67437: DOUBLE
67438: EQUAL
67439: IFTRUE 67449
67441: LD_INT 3
67443: DOUBLE
67444: EQUAL
67445: IFTRUE 67449
67447: GO 67505
67449: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67450: LD_ADDR_VAR 0 9
67454: PUSH
67455: LD_VAR 0 29
67459: PUSH
67460: LD_VAR 0 30
67464: PUSH
67465: LD_VAR 0 31
67469: PUSH
67470: LD_VAR 0 32
67474: PUSH
67475: LD_VAR 0 33
67479: PUSH
67480: LD_VAR 0 34
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: PUSH
67493: LD_VAR 0 4
67497: PUSH
67498: LD_INT 1
67500: PLUS
67501: ARRAY
67502: ST_TO_ADDR
67503: GO 67988
67505: LD_INT 16
67507: DOUBLE
67508: EQUAL
67509: IFTRUE 67567
67511: LD_INT 17
67513: DOUBLE
67514: EQUAL
67515: IFTRUE 67567
67517: LD_INT 18
67519: DOUBLE
67520: EQUAL
67521: IFTRUE 67567
67523: LD_INT 19
67525: DOUBLE
67526: EQUAL
67527: IFTRUE 67567
67529: LD_INT 22
67531: DOUBLE
67532: EQUAL
67533: IFTRUE 67567
67535: LD_INT 20
67537: DOUBLE
67538: EQUAL
67539: IFTRUE 67567
67541: LD_INT 21
67543: DOUBLE
67544: EQUAL
67545: IFTRUE 67567
67547: LD_INT 23
67549: DOUBLE
67550: EQUAL
67551: IFTRUE 67567
67553: LD_INT 24
67555: DOUBLE
67556: EQUAL
67557: IFTRUE 67567
67559: LD_INT 25
67561: DOUBLE
67562: EQUAL
67563: IFTRUE 67567
67565: GO 67623
67567: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67568: LD_ADDR_VAR 0 9
67572: PUSH
67573: LD_VAR 0 35
67577: PUSH
67578: LD_VAR 0 36
67582: PUSH
67583: LD_VAR 0 37
67587: PUSH
67588: LD_VAR 0 38
67592: PUSH
67593: LD_VAR 0 39
67597: PUSH
67598: LD_VAR 0 40
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: PUSH
67611: LD_VAR 0 4
67615: PUSH
67616: LD_INT 1
67618: PLUS
67619: ARRAY
67620: ST_TO_ADDR
67621: GO 67988
67623: LD_INT 6
67625: DOUBLE
67626: EQUAL
67627: IFTRUE 67679
67629: LD_INT 7
67631: DOUBLE
67632: EQUAL
67633: IFTRUE 67679
67635: LD_INT 8
67637: DOUBLE
67638: EQUAL
67639: IFTRUE 67679
67641: LD_INT 13
67643: DOUBLE
67644: EQUAL
67645: IFTRUE 67679
67647: LD_INT 12
67649: DOUBLE
67650: EQUAL
67651: IFTRUE 67679
67653: LD_INT 15
67655: DOUBLE
67656: EQUAL
67657: IFTRUE 67679
67659: LD_INT 11
67661: DOUBLE
67662: EQUAL
67663: IFTRUE 67679
67665: LD_INT 14
67667: DOUBLE
67668: EQUAL
67669: IFTRUE 67679
67671: LD_INT 10
67673: DOUBLE
67674: EQUAL
67675: IFTRUE 67679
67677: GO 67735
67679: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67680: LD_ADDR_VAR 0 9
67684: PUSH
67685: LD_VAR 0 41
67689: PUSH
67690: LD_VAR 0 42
67694: PUSH
67695: LD_VAR 0 43
67699: PUSH
67700: LD_VAR 0 44
67704: PUSH
67705: LD_VAR 0 45
67709: PUSH
67710: LD_VAR 0 46
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: PUSH
67723: LD_VAR 0 4
67727: PUSH
67728: LD_INT 1
67730: PLUS
67731: ARRAY
67732: ST_TO_ADDR
67733: GO 67988
67735: LD_INT 36
67737: DOUBLE
67738: EQUAL
67739: IFTRUE 67743
67741: GO 67799
67743: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67744: LD_ADDR_VAR 0 9
67748: PUSH
67749: LD_VAR 0 47
67753: PUSH
67754: LD_VAR 0 48
67758: PUSH
67759: LD_VAR 0 49
67763: PUSH
67764: LD_VAR 0 50
67768: PUSH
67769: LD_VAR 0 51
67773: PUSH
67774: LD_VAR 0 52
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: PUSH
67787: LD_VAR 0 4
67791: PUSH
67792: LD_INT 1
67794: PLUS
67795: ARRAY
67796: ST_TO_ADDR
67797: GO 67988
67799: LD_INT 4
67801: DOUBLE
67802: EQUAL
67803: IFTRUE 67825
67805: LD_INT 5
67807: DOUBLE
67808: EQUAL
67809: IFTRUE 67825
67811: LD_INT 34
67813: DOUBLE
67814: EQUAL
67815: IFTRUE 67825
67817: LD_INT 37
67819: DOUBLE
67820: EQUAL
67821: IFTRUE 67825
67823: GO 67881
67825: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67826: LD_ADDR_VAR 0 9
67830: PUSH
67831: LD_VAR 0 53
67835: PUSH
67836: LD_VAR 0 54
67840: PUSH
67841: LD_VAR 0 55
67845: PUSH
67846: LD_VAR 0 56
67850: PUSH
67851: LD_VAR 0 57
67855: PUSH
67856: LD_VAR 0 58
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: PUSH
67869: LD_VAR 0 4
67873: PUSH
67874: LD_INT 1
67876: PLUS
67877: ARRAY
67878: ST_TO_ADDR
67879: GO 67988
67881: LD_INT 31
67883: DOUBLE
67884: EQUAL
67885: IFTRUE 67931
67887: LD_INT 32
67889: DOUBLE
67890: EQUAL
67891: IFTRUE 67931
67893: LD_INT 33
67895: DOUBLE
67896: EQUAL
67897: IFTRUE 67931
67899: LD_INT 27
67901: DOUBLE
67902: EQUAL
67903: IFTRUE 67931
67905: LD_INT 26
67907: DOUBLE
67908: EQUAL
67909: IFTRUE 67931
67911: LD_INT 28
67913: DOUBLE
67914: EQUAL
67915: IFTRUE 67931
67917: LD_INT 29
67919: DOUBLE
67920: EQUAL
67921: IFTRUE 67931
67923: LD_INT 30
67925: DOUBLE
67926: EQUAL
67927: IFTRUE 67931
67929: GO 67987
67931: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67932: LD_ADDR_VAR 0 9
67936: PUSH
67937: LD_VAR 0 59
67941: PUSH
67942: LD_VAR 0 60
67946: PUSH
67947: LD_VAR 0 61
67951: PUSH
67952: LD_VAR 0 62
67956: PUSH
67957: LD_VAR 0 63
67961: PUSH
67962: LD_VAR 0 64
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: PUSH
67975: LD_VAR 0 4
67979: PUSH
67980: LD_INT 1
67982: PLUS
67983: ARRAY
67984: ST_TO_ADDR
67985: GO 67988
67987: POP
// temp_list2 = [ ] ;
67988: LD_ADDR_VAR 0 10
67992: PUSH
67993: EMPTY
67994: ST_TO_ADDR
// for i in temp_list do
67995: LD_ADDR_VAR 0 8
67999: PUSH
68000: LD_VAR 0 9
68004: PUSH
68005: FOR_IN
68006: IFFALSE 68058
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68008: LD_ADDR_VAR 0 10
68012: PUSH
68013: LD_VAR 0 10
68017: PUSH
68018: LD_VAR 0 8
68022: PUSH
68023: LD_INT 1
68025: ARRAY
68026: PUSH
68027: LD_VAR 0 2
68031: PLUS
68032: PUSH
68033: LD_VAR 0 8
68037: PUSH
68038: LD_INT 2
68040: ARRAY
68041: PUSH
68042: LD_VAR 0 3
68046: PLUS
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: EMPTY
68053: LIST
68054: ADD
68055: ST_TO_ADDR
68056: GO 68005
68058: POP
68059: POP
// result = temp_list2 ;
68060: LD_ADDR_VAR 0 7
68064: PUSH
68065: LD_VAR 0 10
68069: ST_TO_ADDR
// end ;
68070: LD_VAR 0 7
68074: RET
// export function EnemyInRange ( unit , dist ) ; begin
68075: LD_INT 0
68077: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68078: LD_ADDR_VAR 0 3
68082: PUSH
68083: LD_VAR 0 1
68087: PPUSH
68088: CALL_OW 255
68092: PPUSH
68093: LD_VAR 0 1
68097: PPUSH
68098: CALL_OW 250
68102: PPUSH
68103: LD_VAR 0 1
68107: PPUSH
68108: CALL_OW 251
68112: PPUSH
68113: LD_VAR 0 2
68117: PPUSH
68118: CALL 41477 0 4
68122: PUSH
68123: LD_INT 4
68125: ARRAY
68126: ST_TO_ADDR
// end ;
68127: LD_VAR 0 3
68131: RET
// export function PlayerSeeMe ( unit ) ; begin
68132: LD_INT 0
68134: PPUSH
// result := See ( your_side , unit ) ;
68135: LD_ADDR_VAR 0 2
68139: PUSH
68140: LD_OWVAR 2
68144: PPUSH
68145: LD_VAR 0 1
68149: PPUSH
68150: CALL_OW 292
68154: ST_TO_ADDR
// end ;
68155: LD_VAR 0 2
68159: RET
// export function ReverseDir ( unit ) ; begin
68160: LD_INT 0
68162: PPUSH
// if not unit then
68163: LD_VAR 0 1
68167: NOT
68168: IFFALSE 68172
// exit ;
68170: GO 68195
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68172: LD_ADDR_VAR 0 2
68176: PUSH
68177: LD_VAR 0 1
68181: PPUSH
68182: CALL_OW 254
68186: PUSH
68187: LD_INT 3
68189: PLUS
68190: PUSH
68191: LD_INT 6
68193: MOD
68194: ST_TO_ADDR
// end ;
68195: LD_VAR 0 2
68199: RET
// export function ReverseArray ( array ) ; var i ; begin
68200: LD_INT 0
68202: PPUSH
68203: PPUSH
// if not array then
68204: LD_VAR 0 1
68208: NOT
68209: IFFALSE 68213
// exit ;
68211: GO 68268
// result := [ ] ;
68213: LD_ADDR_VAR 0 2
68217: PUSH
68218: EMPTY
68219: ST_TO_ADDR
// for i := array downto 1 do
68220: LD_ADDR_VAR 0 3
68224: PUSH
68225: DOUBLE
68226: LD_VAR 0 1
68230: INC
68231: ST_TO_ADDR
68232: LD_INT 1
68234: PUSH
68235: FOR_DOWNTO
68236: IFFALSE 68266
// result := Join ( result , array [ i ] ) ;
68238: LD_ADDR_VAR 0 2
68242: PUSH
68243: LD_VAR 0 2
68247: PPUSH
68248: LD_VAR 0 1
68252: PUSH
68253: LD_VAR 0 3
68257: ARRAY
68258: PPUSH
68259: CALL 72911 0 2
68263: ST_TO_ADDR
68264: GO 68235
68266: POP
68267: POP
// end ;
68268: LD_VAR 0 2
68272: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68273: LD_INT 0
68275: PPUSH
68276: PPUSH
68277: PPUSH
68278: PPUSH
68279: PPUSH
68280: PPUSH
// if not unit or not hexes then
68281: LD_VAR 0 1
68285: NOT
68286: PUSH
68287: LD_VAR 0 2
68291: NOT
68292: OR
68293: IFFALSE 68297
// exit ;
68295: GO 68420
// dist := 9999 ;
68297: LD_ADDR_VAR 0 5
68301: PUSH
68302: LD_INT 9999
68304: ST_TO_ADDR
// for i = 1 to hexes do
68305: LD_ADDR_VAR 0 4
68309: PUSH
68310: DOUBLE
68311: LD_INT 1
68313: DEC
68314: ST_TO_ADDR
68315: LD_VAR 0 2
68319: PUSH
68320: FOR_TO
68321: IFFALSE 68408
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68323: LD_ADDR_VAR 0 6
68327: PUSH
68328: LD_VAR 0 1
68332: PPUSH
68333: LD_VAR 0 2
68337: PUSH
68338: LD_VAR 0 4
68342: ARRAY
68343: PUSH
68344: LD_INT 1
68346: ARRAY
68347: PPUSH
68348: LD_VAR 0 2
68352: PUSH
68353: LD_VAR 0 4
68357: ARRAY
68358: PUSH
68359: LD_INT 2
68361: ARRAY
68362: PPUSH
68363: CALL_OW 297
68367: ST_TO_ADDR
// if tdist < dist then
68368: LD_VAR 0 6
68372: PUSH
68373: LD_VAR 0 5
68377: LESS
68378: IFFALSE 68406
// begin hex := hexes [ i ] ;
68380: LD_ADDR_VAR 0 8
68384: PUSH
68385: LD_VAR 0 2
68389: PUSH
68390: LD_VAR 0 4
68394: ARRAY
68395: ST_TO_ADDR
// dist := tdist ;
68396: LD_ADDR_VAR 0 5
68400: PUSH
68401: LD_VAR 0 6
68405: ST_TO_ADDR
// end ; end ;
68406: GO 68320
68408: POP
68409: POP
// result := hex ;
68410: LD_ADDR_VAR 0 3
68414: PUSH
68415: LD_VAR 0 8
68419: ST_TO_ADDR
// end ;
68420: LD_VAR 0 3
68424: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68425: LD_INT 0
68427: PPUSH
68428: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68429: LD_VAR 0 1
68433: NOT
68434: PUSH
68435: LD_VAR 0 1
68439: PUSH
68440: LD_INT 21
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 23
68452: PUSH
68453: LD_INT 2
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PPUSH
68464: CALL_OW 69
68468: IN
68469: NOT
68470: OR
68471: IFFALSE 68475
// exit ;
68473: GO 68522
// for i = 1 to 3 do
68475: LD_ADDR_VAR 0 3
68479: PUSH
68480: DOUBLE
68481: LD_INT 1
68483: DEC
68484: ST_TO_ADDR
68485: LD_INT 3
68487: PUSH
68488: FOR_TO
68489: IFFALSE 68520
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68491: LD_VAR 0 1
68495: PPUSH
68496: CALL_OW 250
68500: PPUSH
68501: LD_VAR 0 1
68505: PPUSH
68506: CALL_OW 251
68510: PPUSH
68511: LD_INT 1
68513: PPUSH
68514: CALL_OW 453
68518: GO 68488
68520: POP
68521: POP
// end ;
68522: LD_VAR 0 2
68526: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68527: LD_INT 0
68529: PPUSH
68530: PPUSH
68531: PPUSH
68532: PPUSH
68533: PPUSH
68534: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68535: LD_VAR 0 1
68539: NOT
68540: PUSH
68541: LD_VAR 0 2
68545: NOT
68546: OR
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: CALL_OW 314
68557: OR
68558: IFFALSE 68562
// exit ;
68560: GO 69029
// if GetLives ( i ) < 250 then
68562: LD_VAR 0 4
68566: PPUSH
68567: CALL_OW 256
68571: PUSH
68572: LD_INT 250
68574: LESS
68575: IFFALSE 68588
// begin ComAutodestruct ( i ) ;
68577: LD_VAR 0 4
68581: PPUSH
68582: CALL 68425 0 1
// exit ;
68586: GO 69029
// end ; x := GetX ( enemy_unit ) ;
68588: LD_ADDR_VAR 0 7
68592: PUSH
68593: LD_VAR 0 2
68597: PPUSH
68598: CALL_OW 250
68602: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68603: LD_ADDR_VAR 0 8
68607: PUSH
68608: LD_VAR 0 2
68612: PPUSH
68613: CALL_OW 251
68617: ST_TO_ADDR
// if not x or not y then
68618: LD_VAR 0 7
68622: NOT
68623: PUSH
68624: LD_VAR 0 8
68628: NOT
68629: OR
68630: IFFALSE 68634
// exit ;
68632: GO 69029
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68634: LD_ADDR_VAR 0 6
68638: PUSH
68639: LD_VAR 0 7
68643: PPUSH
68644: LD_INT 0
68646: PPUSH
68647: LD_INT 4
68649: PPUSH
68650: CALL_OW 272
68654: PUSH
68655: LD_VAR 0 8
68659: PPUSH
68660: LD_INT 0
68662: PPUSH
68663: LD_INT 4
68665: PPUSH
68666: CALL_OW 273
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_VAR 0 7
68679: PPUSH
68680: LD_INT 1
68682: PPUSH
68683: LD_INT 4
68685: PPUSH
68686: CALL_OW 272
68690: PUSH
68691: LD_VAR 0 8
68695: PPUSH
68696: LD_INT 1
68698: PPUSH
68699: LD_INT 4
68701: PPUSH
68702: CALL_OW 273
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_VAR 0 7
68715: PPUSH
68716: LD_INT 2
68718: PPUSH
68719: LD_INT 4
68721: PPUSH
68722: CALL_OW 272
68726: PUSH
68727: LD_VAR 0 8
68731: PPUSH
68732: LD_INT 2
68734: PPUSH
68735: LD_INT 4
68737: PPUSH
68738: CALL_OW 273
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_VAR 0 7
68751: PPUSH
68752: LD_INT 3
68754: PPUSH
68755: LD_INT 4
68757: PPUSH
68758: CALL_OW 272
68762: PUSH
68763: LD_VAR 0 8
68767: PPUSH
68768: LD_INT 3
68770: PPUSH
68771: LD_INT 4
68773: PPUSH
68774: CALL_OW 273
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_VAR 0 7
68787: PPUSH
68788: LD_INT 4
68790: PPUSH
68791: LD_INT 4
68793: PPUSH
68794: CALL_OW 272
68798: PUSH
68799: LD_VAR 0 8
68803: PPUSH
68804: LD_INT 4
68806: PPUSH
68807: LD_INT 4
68809: PPUSH
68810: CALL_OW 273
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_VAR 0 7
68823: PPUSH
68824: LD_INT 5
68826: PPUSH
68827: LD_INT 4
68829: PPUSH
68830: CALL_OW 272
68834: PUSH
68835: LD_VAR 0 8
68839: PPUSH
68840: LD_INT 5
68842: PPUSH
68843: LD_INT 4
68845: PPUSH
68846: CALL_OW 273
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: ST_TO_ADDR
// for i = tmp downto 1 do
68863: LD_ADDR_VAR 0 4
68867: PUSH
68868: DOUBLE
68869: LD_VAR 0 6
68873: INC
68874: ST_TO_ADDR
68875: LD_INT 1
68877: PUSH
68878: FOR_DOWNTO
68879: IFFALSE 68980
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68881: LD_VAR 0 6
68885: PUSH
68886: LD_VAR 0 4
68890: ARRAY
68891: PUSH
68892: LD_INT 1
68894: ARRAY
68895: PPUSH
68896: LD_VAR 0 6
68900: PUSH
68901: LD_VAR 0 4
68905: ARRAY
68906: PUSH
68907: LD_INT 2
68909: ARRAY
68910: PPUSH
68911: CALL_OW 488
68915: NOT
68916: PUSH
68917: LD_VAR 0 6
68921: PUSH
68922: LD_VAR 0 4
68926: ARRAY
68927: PUSH
68928: LD_INT 1
68930: ARRAY
68931: PPUSH
68932: LD_VAR 0 6
68936: PUSH
68937: LD_VAR 0 4
68941: ARRAY
68942: PUSH
68943: LD_INT 2
68945: ARRAY
68946: PPUSH
68947: CALL_OW 428
68951: PUSH
68952: LD_INT 0
68954: NONEQUAL
68955: OR
68956: IFFALSE 68978
// tmp := Delete ( tmp , i ) ;
68958: LD_ADDR_VAR 0 6
68962: PUSH
68963: LD_VAR 0 6
68967: PPUSH
68968: LD_VAR 0 4
68972: PPUSH
68973: CALL_OW 3
68977: ST_TO_ADDR
68978: GO 68878
68980: POP
68981: POP
// j := GetClosestHex ( unit , tmp ) ;
68982: LD_ADDR_VAR 0 5
68986: PUSH
68987: LD_VAR 0 1
68991: PPUSH
68992: LD_VAR 0 6
68996: PPUSH
68997: CALL 68273 0 2
69001: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69002: LD_VAR 0 1
69006: PPUSH
69007: LD_VAR 0 5
69011: PUSH
69012: LD_INT 1
69014: ARRAY
69015: PPUSH
69016: LD_VAR 0 5
69020: PUSH
69021: LD_INT 2
69023: ARRAY
69024: PPUSH
69025: CALL_OW 111
// end ;
69029: LD_VAR 0 3
69033: RET
// export function PrepareApemanSoldier ( ) ; begin
69034: LD_INT 0
69036: PPUSH
// uc_nation := 0 ;
69037: LD_ADDR_OWVAR 21
69041: PUSH
69042: LD_INT 0
69044: ST_TO_ADDR
// hc_sex := sex_male ;
69045: LD_ADDR_OWVAR 27
69049: PUSH
69050: LD_INT 1
69052: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69053: LD_ADDR_OWVAR 28
69057: PUSH
69058: LD_INT 15
69060: ST_TO_ADDR
// hc_gallery :=  ;
69061: LD_ADDR_OWVAR 33
69065: PUSH
69066: LD_STRING 
69068: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69069: LD_ADDR_OWVAR 31
69073: PUSH
69074: LD_INT 0
69076: PPUSH
69077: LD_INT 3
69079: PPUSH
69080: CALL_OW 12
69084: PUSH
69085: LD_INT 0
69087: PPUSH
69088: LD_INT 3
69090: PPUSH
69091: CALL_OW 12
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: ST_TO_ADDR
// end ;
69108: LD_VAR 0 1
69112: RET
// export function PrepareApemanEngineer ( ) ; begin
69113: LD_INT 0
69115: PPUSH
// uc_nation := 0 ;
69116: LD_ADDR_OWVAR 21
69120: PUSH
69121: LD_INT 0
69123: ST_TO_ADDR
// hc_sex := sex_male ;
69124: LD_ADDR_OWVAR 27
69128: PUSH
69129: LD_INT 1
69131: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69132: LD_ADDR_OWVAR 28
69136: PUSH
69137: LD_INT 16
69139: ST_TO_ADDR
// hc_gallery :=  ;
69140: LD_ADDR_OWVAR 33
69144: PUSH
69145: LD_STRING 
69147: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69148: LD_ADDR_OWVAR 31
69152: PUSH
69153: LD_INT 0
69155: PPUSH
69156: LD_INT 3
69158: PPUSH
69159: CALL_OW 12
69163: PUSH
69164: LD_INT 0
69166: PPUSH
69167: LD_INT 3
69169: PPUSH
69170: CALL_OW 12
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: ST_TO_ADDR
// end ;
69187: LD_VAR 0 1
69191: RET
// export function PrepareApeman ( agressivity ) ; begin
69192: LD_INT 0
69194: PPUSH
// uc_side := 0 ;
69195: LD_ADDR_OWVAR 20
69199: PUSH
69200: LD_INT 0
69202: ST_TO_ADDR
// uc_nation := 0 ;
69203: LD_ADDR_OWVAR 21
69207: PUSH
69208: LD_INT 0
69210: ST_TO_ADDR
// hc_sex := sex_male ;
69211: LD_ADDR_OWVAR 27
69215: PUSH
69216: LD_INT 1
69218: ST_TO_ADDR
// hc_class := class_apeman ;
69219: LD_ADDR_OWVAR 28
69223: PUSH
69224: LD_INT 12
69226: ST_TO_ADDR
// hc_gallery :=  ;
69227: LD_ADDR_OWVAR 33
69231: PUSH
69232: LD_STRING 
69234: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69235: LD_ADDR_OWVAR 35
69239: PUSH
69240: LD_VAR 0 1
69244: NEG
69245: PPUSH
69246: LD_VAR 0 1
69250: PPUSH
69251: CALL_OW 12
69255: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69256: LD_ADDR_OWVAR 31
69260: PUSH
69261: LD_INT 0
69263: PPUSH
69264: LD_INT 3
69266: PPUSH
69267: CALL_OW 12
69271: PUSH
69272: LD_INT 0
69274: PPUSH
69275: LD_INT 3
69277: PPUSH
69278: CALL_OW 12
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: ST_TO_ADDR
// end ;
69295: LD_VAR 0 2
69299: RET
// export function PrepareTiger ( agressivity ) ; begin
69300: LD_INT 0
69302: PPUSH
// uc_side := 0 ;
69303: LD_ADDR_OWVAR 20
69307: PUSH
69308: LD_INT 0
69310: ST_TO_ADDR
// uc_nation := 0 ;
69311: LD_ADDR_OWVAR 21
69315: PUSH
69316: LD_INT 0
69318: ST_TO_ADDR
// hc_class := class_tiger ;
69319: LD_ADDR_OWVAR 28
69323: PUSH
69324: LD_INT 14
69326: ST_TO_ADDR
// hc_gallery :=  ;
69327: LD_ADDR_OWVAR 33
69331: PUSH
69332: LD_STRING 
69334: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69335: LD_ADDR_OWVAR 35
69339: PUSH
69340: LD_VAR 0 1
69344: NEG
69345: PPUSH
69346: LD_VAR 0 1
69350: PPUSH
69351: CALL_OW 12
69355: ST_TO_ADDR
// end ;
69356: LD_VAR 0 2
69360: RET
// export function PrepareEnchidna ( ) ; begin
69361: LD_INT 0
69363: PPUSH
// uc_side := 0 ;
69364: LD_ADDR_OWVAR 20
69368: PUSH
69369: LD_INT 0
69371: ST_TO_ADDR
// uc_nation := 0 ;
69372: LD_ADDR_OWVAR 21
69376: PUSH
69377: LD_INT 0
69379: ST_TO_ADDR
// hc_class := class_baggie ;
69380: LD_ADDR_OWVAR 28
69384: PUSH
69385: LD_INT 13
69387: ST_TO_ADDR
// hc_gallery :=  ;
69388: LD_ADDR_OWVAR 33
69392: PUSH
69393: LD_STRING 
69395: ST_TO_ADDR
// end ;
69396: LD_VAR 0 1
69400: RET
// export function PrepareFrog ( ) ; begin
69401: LD_INT 0
69403: PPUSH
// uc_side := 0 ;
69404: LD_ADDR_OWVAR 20
69408: PUSH
69409: LD_INT 0
69411: ST_TO_ADDR
// uc_nation := 0 ;
69412: LD_ADDR_OWVAR 21
69416: PUSH
69417: LD_INT 0
69419: ST_TO_ADDR
// hc_class := class_frog ;
69420: LD_ADDR_OWVAR 28
69424: PUSH
69425: LD_INT 19
69427: ST_TO_ADDR
// hc_gallery :=  ;
69428: LD_ADDR_OWVAR 33
69432: PUSH
69433: LD_STRING 
69435: ST_TO_ADDR
// end ;
69436: LD_VAR 0 1
69440: RET
// export function PrepareFish ( ) ; begin
69441: LD_INT 0
69443: PPUSH
// uc_side := 0 ;
69444: LD_ADDR_OWVAR 20
69448: PUSH
69449: LD_INT 0
69451: ST_TO_ADDR
// uc_nation := 0 ;
69452: LD_ADDR_OWVAR 21
69456: PUSH
69457: LD_INT 0
69459: ST_TO_ADDR
// hc_class := class_fish ;
69460: LD_ADDR_OWVAR 28
69464: PUSH
69465: LD_INT 20
69467: ST_TO_ADDR
// hc_gallery :=  ;
69468: LD_ADDR_OWVAR 33
69472: PUSH
69473: LD_STRING 
69475: ST_TO_ADDR
// end ;
69476: LD_VAR 0 1
69480: RET
// export function PrepareBird ( ) ; begin
69481: LD_INT 0
69483: PPUSH
// uc_side := 0 ;
69484: LD_ADDR_OWVAR 20
69488: PUSH
69489: LD_INT 0
69491: ST_TO_ADDR
// uc_nation := 0 ;
69492: LD_ADDR_OWVAR 21
69496: PUSH
69497: LD_INT 0
69499: ST_TO_ADDR
// hc_class := class_phororhacos ;
69500: LD_ADDR_OWVAR 28
69504: PUSH
69505: LD_INT 18
69507: ST_TO_ADDR
// hc_gallery :=  ;
69508: LD_ADDR_OWVAR 33
69512: PUSH
69513: LD_STRING 
69515: ST_TO_ADDR
// end ;
69516: LD_VAR 0 1
69520: RET
// export function PrepareHorse ( ) ; begin
69521: LD_INT 0
69523: PPUSH
// uc_side := 0 ;
69524: LD_ADDR_OWVAR 20
69528: PUSH
69529: LD_INT 0
69531: ST_TO_ADDR
// uc_nation := 0 ;
69532: LD_ADDR_OWVAR 21
69536: PUSH
69537: LD_INT 0
69539: ST_TO_ADDR
// hc_class := class_horse ;
69540: LD_ADDR_OWVAR 28
69544: PUSH
69545: LD_INT 21
69547: ST_TO_ADDR
// hc_gallery :=  ;
69548: LD_ADDR_OWVAR 33
69552: PUSH
69553: LD_STRING 
69555: ST_TO_ADDR
// end ;
69556: LD_VAR 0 1
69560: RET
// export function PrepareMastodont ( ) ; begin
69561: LD_INT 0
69563: PPUSH
// uc_side := 0 ;
69564: LD_ADDR_OWVAR 20
69568: PUSH
69569: LD_INT 0
69571: ST_TO_ADDR
// uc_nation := 0 ;
69572: LD_ADDR_OWVAR 21
69576: PUSH
69577: LD_INT 0
69579: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69580: LD_ADDR_OWVAR 37
69584: PUSH
69585: LD_INT 31
69587: ST_TO_ADDR
// vc_control := control_rider ;
69588: LD_ADDR_OWVAR 38
69592: PUSH
69593: LD_INT 4
69595: ST_TO_ADDR
// end ;
69596: LD_VAR 0 1
69600: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69601: LD_INT 0
69603: PPUSH
69604: PPUSH
69605: PPUSH
// uc_side = 0 ;
69606: LD_ADDR_OWVAR 20
69610: PUSH
69611: LD_INT 0
69613: ST_TO_ADDR
// uc_nation = 0 ;
69614: LD_ADDR_OWVAR 21
69618: PUSH
69619: LD_INT 0
69621: ST_TO_ADDR
// InitHc_All ( ) ;
69622: CALL_OW 584
// InitVc ;
69626: CALL_OW 20
// if mastodonts then
69630: LD_VAR 0 6
69634: IFFALSE 69701
// for i = 1 to mastodonts do
69636: LD_ADDR_VAR 0 11
69640: PUSH
69641: DOUBLE
69642: LD_INT 1
69644: DEC
69645: ST_TO_ADDR
69646: LD_VAR 0 6
69650: PUSH
69651: FOR_TO
69652: IFFALSE 69699
// begin vc_chassis := 31 ;
69654: LD_ADDR_OWVAR 37
69658: PUSH
69659: LD_INT 31
69661: ST_TO_ADDR
// vc_control := control_rider ;
69662: LD_ADDR_OWVAR 38
69666: PUSH
69667: LD_INT 4
69669: ST_TO_ADDR
// animal := CreateVehicle ;
69670: LD_ADDR_VAR 0 12
69674: PUSH
69675: CALL_OW 45
69679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69680: LD_VAR 0 12
69684: PPUSH
69685: LD_VAR 0 8
69689: PPUSH
69690: LD_INT 0
69692: PPUSH
69693: CALL 71829 0 3
// end ;
69697: GO 69651
69699: POP
69700: POP
// if horses then
69701: LD_VAR 0 5
69705: IFFALSE 69772
// for i = 1 to horses do
69707: LD_ADDR_VAR 0 11
69711: PUSH
69712: DOUBLE
69713: LD_INT 1
69715: DEC
69716: ST_TO_ADDR
69717: LD_VAR 0 5
69721: PUSH
69722: FOR_TO
69723: IFFALSE 69770
// begin hc_class := 21 ;
69725: LD_ADDR_OWVAR 28
69729: PUSH
69730: LD_INT 21
69732: ST_TO_ADDR
// hc_gallery :=  ;
69733: LD_ADDR_OWVAR 33
69737: PUSH
69738: LD_STRING 
69740: ST_TO_ADDR
// animal := CreateHuman ;
69741: LD_ADDR_VAR 0 12
69745: PUSH
69746: CALL_OW 44
69750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69751: LD_VAR 0 12
69755: PPUSH
69756: LD_VAR 0 8
69760: PPUSH
69761: LD_INT 0
69763: PPUSH
69764: CALL 71829 0 3
// end ;
69768: GO 69722
69770: POP
69771: POP
// if birds then
69772: LD_VAR 0 1
69776: IFFALSE 69843
// for i = 1 to birds do
69778: LD_ADDR_VAR 0 11
69782: PUSH
69783: DOUBLE
69784: LD_INT 1
69786: DEC
69787: ST_TO_ADDR
69788: LD_VAR 0 1
69792: PUSH
69793: FOR_TO
69794: IFFALSE 69841
// begin hc_class = 18 ;
69796: LD_ADDR_OWVAR 28
69800: PUSH
69801: LD_INT 18
69803: ST_TO_ADDR
// hc_gallery =  ;
69804: LD_ADDR_OWVAR 33
69808: PUSH
69809: LD_STRING 
69811: ST_TO_ADDR
// animal := CreateHuman ;
69812: LD_ADDR_VAR 0 12
69816: PUSH
69817: CALL_OW 44
69821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69822: LD_VAR 0 12
69826: PPUSH
69827: LD_VAR 0 8
69831: PPUSH
69832: LD_INT 0
69834: PPUSH
69835: CALL 71829 0 3
// end ;
69839: GO 69793
69841: POP
69842: POP
// if tigers then
69843: LD_VAR 0 2
69847: IFFALSE 69931
// for i = 1 to tigers do
69849: LD_ADDR_VAR 0 11
69853: PUSH
69854: DOUBLE
69855: LD_INT 1
69857: DEC
69858: ST_TO_ADDR
69859: LD_VAR 0 2
69863: PUSH
69864: FOR_TO
69865: IFFALSE 69929
// begin hc_class = class_tiger ;
69867: LD_ADDR_OWVAR 28
69871: PUSH
69872: LD_INT 14
69874: ST_TO_ADDR
// hc_gallery =  ;
69875: LD_ADDR_OWVAR 33
69879: PUSH
69880: LD_STRING 
69882: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69883: LD_ADDR_OWVAR 35
69887: PUSH
69888: LD_INT 7
69890: NEG
69891: PPUSH
69892: LD_INT 7
69894: PPUSH
69895: CALL_OW 12
69899: ST_TO_ADDR
// animal := CreateHuman ;
69900: LD_ADDR_VAR 0 12
69904: PUSH
69905: CALL_OW 44
69909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69910: LD_VAR 0 12
69914: PPUSH
69915: LD_VAR 0 8
69919: PPUSH
69920: LD_INT 0
69922: PPUSH
69923: CALL 71829 0 3
// end ;
69927: GO 69864
69929: POP
69930: POP
// if apemans then
69931: LD_VAR 0 3
69935: IFFALSE 70058
// for i = 1 to apemans do
69937: LD_ADDR_VAR 0 11
69941: PUSH
69942: DOUBLE
69943: LD_INT 1
69945: DEC
69946: ST_TO_ADDR
69947: LD_VAR 0 3
69951: PUSH
69952: FOR_TO
69953: IFFALSE 70056
// begin hc_class = class_apeman ;
69955: LD_ADDR_OWVAR 28
69959: PUSH
69960: LD_INT 12
69962: ST_TO_ADDR
// hc_gallery =  ;
69963: LD_ADDR_OWVAR 33
69967: PUSH
69968: LD_STRING 
69970: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69971: LD_ADDR_OWVAR 35
69975: PUSH
69976: LD_INT 2
69978: NEG
69979: PPUSH
69980: LD_INT 2
69982: PPUSH
69983: CALL_OW 12
69987: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69988: LD_ADDR_OWVAR 31
69992: PUSH
69993: LD_INT 1
69995: PPUSH
69996: LD_INT 3
69998: PPUSH
69999: CALL_OW 12
70003: PUSH
70004: LD_INT 1
70006: PPUSH
70007: LD_INT 3
70009: PPUSH
70010: CALL_OW 12
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: ST_TO_ADDR
// animal := CreateHuman ;
70027: LD_ADDR_VAR 0 12
70031: PUSH
70032: CALL_OW 44
70036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70037: LD_VAR 0 12
70041: PPUSH
70042: LD_VAR 0 8
70046: PPUSH
70047: LD_INT 0
70049: PPUSH
70050: CALL 71829 0 3
// end ;
70054: GO 69952
70056: POP
70057: POP
// if enchidnas then
70058: LD_VAR 0 4
70062: IFFALSE 70129
// for i = 1 to enchidnas do
70064: LD_ADDR_VAR 0 11
70068: PUSH
70069: DOUBLE
70070: LD_INT 1
70072: DEC
70073: ST_TO_ADDR
70074: LD_VAR 0 4
70078: PUSH
70079: FOR_TO
70080: IFFALSE 70127
// begin hc_class = 13 ;
70082: LD_ADDR_OWVAR 28
70086: PUSH
70087: LD_INT 13
70089: ST_TO_ADDR
// hc_gallery =  ;
70090: LD_ADDR_OWVAR 33
70094: PUSH
70095: LD_STRING 
70097: ST_TO_ADDR
// animal := CreateHuman ;
70098: LD_ADDR_VAR 0 12
70102: PUSH
70103: CALL_OW 44
70107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70108: LD_VAR 0 12
70112: PPUSH
70113: LD_VAR 0 8
70117: PPUSH
70118: LD_INT 0
70120: PPUSH
70121: CALL 71829 0 3
// end ;
70125: GO 70079
70127: POP
70128: POP
// if fishes then
70129: LD_VAR 0 7
70133: IFFALSE 70200
// for i = 1 to fishes do
70135: LD_ADDR_VAR 0 11
70139: PUSH
70140: DOUBLE
70141: LD_INT 1
70143: DEC
70144: ST_TO_ADDR
70145: LD_VAR 0 7
70149: PUSH
70150: FOR_TO
70151: IFFALSE 70198
// begin hc_class = 20 ;
70153: LD_ADDR_OWVAR 28
70157: PUSH
70158: LD_INT 20
70160: ST_TO_ADDR
// hc_gallery =  ;
70161: LD_ADDR_OWVAR 33
70165: PUSH
70166: LD_STRING 
70168: ST_TO_ADDR
// animal := CreateHuman ;
70169: LD_ADDR_VAR 0 12
70173: PUSH
70174: CALL_OW 44
70178: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70179: LD_VAR 0 12
70183: PPUSH
70184: LD_VAR 0 9
70188: PPUSH
70189: LD_INT 0
70191: PPUSH
70192: CALL 71829 0 3
// end ;
70196: GO 70150
70198: POP
70199: POP
// end ;
70200: LD_VAR 0 10
70204: RET
// export function WantHeal ( sci , unit ) ; begin
70205: LD_INT 0
70207: PPUSH
// if GetTaskList ( sci ) > 0 then
70208: LD_VAR 0 1
70212: PPUSH
70213: CALL_OW 437
70217: PUSH
70218: LD_INT 0
70220: GREATER
70221: IFFALSE 70291
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70223: LD_VAR 0 1
70227: PPUSH
70228: CALL_OW 437
70232: PUSH
70233: LD_INT 1
70235: ARRAY
70236: PUSH
70237: LD_INT 1
70239: ARRAY
70240: PUSH
70241: LD_STRING l
70243: EQUAL
70244: PUSH
70245: LD_VAR 0 1
70249: PPUSH
70250: CALL_OW 437
70254: PUSH
70255: LD_INT 1
70257: ARRAY
70258: PUSH
70259: LD_INT 4
70261: ARRAY
70262: PUSH
70263: LD_VAR 0 2
70267: EQUAL
70268: AND
70269: IFFALSE 70281
// result := true else
70271: LD_ADDR_VAR 0 3
70275: PUSH
70276: LD_INT 1
70278: ST_TO_ADDR
70279: GO 70289
// result := false ;
70281: LD_ADDR_VAR 0 3
70285: PUSH
70286: LD_INT 0
70288: ST_TO_ADDR
// end else
70289: GO 70299
// result := false ;
70291: LD_ADDR_VAR 0 3
70295: PUSH
70296: LD_INT 0
70298: ST_TO_ADDR
// end ;
70299: LD_VAR 0 3
70303: RET
// export function HealTarget ( sci ) ; begin
70304: LD_INT 0
70306: PPUSH
// if not sci then
70307: LD_VAR 0 1
70311: NOT
70312: IFFALSE 70316
// exit ;
70314: GO 70381
// result := 0 ;
70316: LD_ADDR_VAR 0 2
70320: PUSH
70321: LD_INT 0
70323: ST_TO_ADDR
// if GetTaskList ( sci ) then
70324: LD_VAR 0 1
70328: PPUSH
70329: CALL_OW 437
70333: IFFALSE 70381
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70335: LD_VAR 0 1
70339: PPUSH
70340: CALL_OW 437
70344: PUSH
70345: LD_INT 1
70347: ARRAY
70348: PUSH
70349: LD_INT 1
70351: ARRAY
70352: PUSH
70353: LD_STRING l
70355: EQUAL
70356: IFFALSE 70381
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70358: LD_ADDR_VAR 0 2
70362: PUSH
70363: LD_VAR 0 1
70367: PPUSH
70368: CALL_OW 437
70372: PUSH
70373: LD_INT 1
70375: ARRAY
70376: PUSH
70377: LD_INT 4
70379: ARRAY
70380: ST_TO_ADDR
// end ;
70381: LD_VAR 0 2
70385: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70386: LD_INT 0
70388: PPUSH
70389: PPUSH
70390: PPUSH
70391: PPUSH
// if not base_units then
70392: LD_VAR 0 1
70396: NOT
70397: IFFALSE 70401
// exit ;
70399: GO 70488
// result := false ;
70401: LD_ADDR_VAR 0 2
70405: PUSH
70406: LD_INT 0
70408: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70409: LD_ADDR_VAR 0 5
70413: PUSH
70414: LD_VAR 0 1
70418: PPUSH
70419: LD_INT 21
70421: PUSH
70422: LD_INT 3
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PPUSH
70429: CALL_OW 72
70433: ST_TO_ADDR
// if not tmp then
70434: LD_VAR 0 5
70438: NOT
70439: IFFALSE 70443
// exit ;
70441: GO 70488
// for i in tmp do
70443: LD_ADDR_VAR 0 3
70447: PUSH
70448: LD_VAR 0 5
70452: PUSH
70453: FOR_IN
70454: IFFALSE 70486
// begin result := EnemyInRange ( i , 22 ) ;
70456: LD_ADDR_VAR 0 2
70460: PUSH
70461: LD_VAR 0 3
70465: PPUSH
70466: LD_INT 22
70468: PPUSH
70469: CALL 68075 0 2
70473: ST_TO_ADDR
// if result then
70474: LD_VAR 0 2
70478: IFFALSE 70484
// exit ;
70480: POP
70481: POP
70482: GO 70488
// end ;
70484: GO 70453
70486: POP
70487: POP
// end ;
70488: LD_VAR 0 2
70492: RET
// export function FilterByTag ( units , tag ) ; begin
70493: LD_INT 0
70495: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70496: LD_ADDR_VAR 0 3
70500: PUSH
70501: LD_VAR 0 1
70505: PPUSH
70506: LD_INT 120
70508: PUSH
70509: LD_VAR 0 2
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PPUSH
70518: CALL_OW 72
70522: ST_TO_ADDR
// end ;
70523: LD_VAR 0 3
70527: RET
// export function IsDriver ( un ) ; begin
70528: LD_INT 0
70530: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70531: LD_ADDR_VAR 0 2
70535: PUSH
70536: LD_VAR 0 1
70540: PUSH
70541: LD_INT 55
70543: PUSH
70544: EMPTY
70545: LIST
70546: PPUSH
70547: CALL_OW 69
70551: IN
70552: ST_TO_ADDR
// end ;
70553: LD_VAR 0 2
70557: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70558: LD_INT 0
70560: PPUSH
70561: PPUSH
// list := [ ] ;
70562: LD_ADDR_VAR 0 5
70566: PUSH
70567: EMPTY
70568: ST_TO_ADDR
// case d of 0 :
70569: LD_VAR 0 3
70573: PUSH
70574: LD_INT 0
70576: DOUBLE
70577: EQUAL
70578: IFTRUE 70582
70580: GO 70715
70582: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70583: LD_ADDR_VAR 0 5
70587: PUSH
70588: LD_VAR 0 1
70592: PUSH
70593: LD_INT 4
70595: MINUS
70596: PUSH
70597: LD_VAR 0 2
70601: PUSH
70602: LD_INT 4
70604: MINUS
70605: PUSH
70606: LD_INT 2
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: LIST
70613: PUSH
70614: LD_VAR 0 1
70618: PUSH
70619: LD_INT 3
70621: MINUS
70622: PUSH
70623: LD_VAR 0 2
70627: PUSH
70628: LD_INT 1
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: LIST
70635: PUSH
70636: LD_VAR 0 1
70640: PUSH
70641: LD_INT 4
70643: PLUS
70644: PUSH
70645: LD_VAR 0 2
70649: PUSH
70650: LD_INT 4
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: LIST
70657: PUSH
70658: LD_VAR 0 1
70662: PUSH
70663: LD_INT 3
70665: PLUS
70666: PUSH
70667: LD_VAR 0 2
70671: PUSH
70672: LD_INT 3
70674: PLUS
70675: PUSH
70676: LD_INT 5
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: LIST
70683: PUSH
70684: LD_VAR 0 1
70688: PUSH
70689: LD_VAR 0 2
70693: PUSH
70694: LD_INT 4
70696: PLUS
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: LIST
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: ST_TO_ADDR
// end ; 1 :
70713: GO 71413
70715: LD_INT 1
70717: DOUBLE
70718: EQUAL
70719: IFTRUE 70723
70721: GO 70856
70723: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70724: LD_ADDR_VAR 0 5
70728: PUSH
70729: LD_VAR 0 1
70733: PUSH
70734: LD_VAR 0 2
70738: PUSH
70739: LD_INT 4
70741: MINUS
70742: PUSH
70743: LD_INT 3
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: LIST
70750: PUSH
70751: LD_VAR 0 1
70755: PUSH
70756: LD_INT 3
70758: MINUS
70759: PUSH
70760: LD_VAR 0 2
70764: PUSH
70765: LD_INT 3
70767: MINUS
70768: PUSH
70769: LD_INT 2
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: LIST
70776: PUSH
70777: LD_VAR 0 1
70781: PUSH
70782: LD_INT 4
70784: MINUS
70785: PUSH
70786: LD_VAR 0 2
70790: PUSH
70791: LD_INT 1
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: LIST
70798: PUSH
70799: LD_VAR 0 1
70803: PUSH
70804: LD_VAR 0 2
70808: PUSH
70809: LD_INT 3
70811: PLUS
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: LIST
70820: PUSH
70821: LD_VAR 0 1
70825: PUSH
70826: LD_INT 4
70828: PLUS
70829: PUSH
70830: LD_VAR 0 2
70834: PUSH
70835: LD_INT 4
70837: PLUS
70838: PUSH
70839: LD_INT 5
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: LIST
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: ST_TO_ADDR
// end ; 2 :
70854: GO 71413
70856: LD_INT 2
70858: DOUBLE
70859: EQUAL
70860: IFTRUE 70864
70862: GO 70993
70864: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70865: LD_ADDR_VAR 0 5
70869: PUSH
70870: LD_VAR 0 1
70874: PUSH
70875: LD_VAR 0 2
70879: PUSH
70880: LD_INT 3
70882: MINUS
70883: PUSH
70884: LD_INT 3
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: LIST
70891: PUSH
70892: LD_VAR 0 1
70896: PUSH
70897: LD_INT 4
70899: PLUS
70900: PUSH
70901: LD_VAR 0 2
70905: PUSH
70906: LD_INT 4
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: LIST
70913: PUSH
70914: LD_VAR 0 1
70918: PUSH
70919: LD_VAR 0 2
70923: PUSH
70924: LD_INT 4
70926: PLUS
70927: PUSH
70928: LD_INT 0
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: LIST
70935: PUSH
70936: LD_VAR 0 1
70940: PUSH
70941: LD_INT 3
70943: MINUS
70944: PUSH
70945: LD_VAR 0 2
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: LIST
70957: PUSH
70958: LD_VAR 0 1
70962: PUSH
70963: LD_INT 4
70965: MINUS
70966: PUSH
70967: LD_VAR 0 2
70971: PUSH
70972: LD_INT 4
70974: MINUS
70975: PUSH
70976: LD_INT 2
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: LIST
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: ST_TO_ADDR
// end ; 3 :
70991: GO 71413
70993: LD_INT 3
70995: DOUBLE
70996: EQUAL
70997: IFTRUE 71001
70999: GO 71134
71001: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71002: LD_ADDR_VAR 0 5
71006: PUSH
71007: LD_VAR 0 1
71011: PUSH
71012: LD_INT 3
71014: PLUS
71015: PUSH
71016: LD_VAR 0 2
71020: PUSH
71021: LD_INT 4
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: LIST
71028: PUSH
71029: LD_VAR 0 1
71033: PUSH
71034: LD_INT 4
71036: PLUS
71037: PUSH
71038: LD_VAR 0 2
71042: PUSH
71043: LD_INT 4
71045: PLUS
71046: PUSH
71047: LD_INT 5
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: LIST
71054: PUSH
71055: LD_VAR 0 1
71059: PUSH
71060: LD_INT 4
71062: MINUS
71063: PUSH
71064: LD_VAR 0 2
71068: PUSH
71069: LD_INT 1
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: LIST
71076: PUSH
71077: LD_VAR 0 1
71081: PUSH
71082: LD_VAR 0 2
71086: PUSH
71087: LD_INT 4
71089: MINUS
71090: PUSH
71091: LD_INT 3
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: LIST
71098: PUSH
71099: LD_VAR 0 1
71103: PUSH
71104: LD_INT 3
71106: MINUS
71107: PUSH
71108: LD_VAR 0 2
71112: PUSH
71113: LD_INT 3
71115: MINUS
71116: PUSH
71117: LD_INT 2
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: LIST
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: ST_TO_ADDR
// end ; 4 :
71132: GO 71413
71134: LD_INT 4
71136: DOUBLE
71137: EQUAL
71138: IFTRUE 71142
71140: GO 71275
71142: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71143: LD_ADDR_VAR 0 5
71147: PUSH
71148: LD_VAR 0 1
71152: PUSH
71153: LD_VAR 0 2
71157: PUSH
71158: LD_INT 4
71160: PLUS
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: LIST
71169: PUSH
71170: LD_VAR 0 1
71174: PUSH
71175: LD_INT 3
71177: PLUS
71178: PUSH
71179: LD_VAR 0 2
71183: PUSH
71184: LD_INT 3
71186: PLUS
71187: PUSH
71188: LD_INT 5
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: LIST
71195: PUSH
71196: LD_VAR 0 1
71200: PUSH
71201: LD_INT 4
71203: PLUS
71204: PUSH
71205: LD_VAR 0 2
71209: PUSH
71210: LD_INT 4
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: LIST
71217: PUSH
71218: LD_VAR 0 1
71222: PUSH
71223: LD_VAR 0 2
71227: PUSH
71228: LD_INT 3
71230: MINUS
71231: PUSH
71232: LD_INT 3
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: LIST
71239: PUSH
71240: LD_VAR 0 1
71244: PUSH
71245: LD_INT 4
71247: MINUS
71248: PUSH
71249: LD_VAR 0 2
71253: PUSH
71254: LD_INT 4
71256: MINUS
71257: PUSH
71258: LD_INT 2
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: ST_TO_ADDR
// end ; 5 :
71273: GO 71413
71275: LD_INT 5
71277: DOUBLE
71278: EQUAL
71279: IFTRUE 71283
71281: GO 71412
71283: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71284: LD_ADDR_VAR 0 5
71288: PUSH
71289: LD_VAR 0 1
71293: PUSH
71294: LD_INT 4
71296: MINUS
71297: PUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_INT 1
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: LIST
71310: PUSH
71311: LD_VAR 0 1
71315: PUSH
71316: LD_VAR 0 2
71320: PUSH
71321: LD_INT 4
71323: MINUS
71324: PUSH
71325: LD_INT 3
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: LIST
71332: PUSH
71333: LD_VAR 0 1
71337: PUSH
71338: LD_INT 4
71340: PLUS
71341: PUSH
71342: LD_VAR 0 2
71346: PUSH
71347: LD_INT 4
71349: PLUS
71350: PUSH
71351: LD_INT 5
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: LIST
71358: PUSH
71359: LD_VAR 0 1
71363: PUSH
71364: LD_INT 3
71366: PLUS
71367: PUSH
71368: LD_VAR 0 2
71372: PUSH
71373: LD_INT 4
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: LIST
71380: PUSH
71381: LD_VAR 0 1
71385: PUSH
71386: LD_VAR 0 2
71390: PUSH
71391: LD_INT 3
71393: PLUS
71394: PUSH
71395: LD_INT 0
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: LIST
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: ST_TO_ADDR
// end ; end ;
71410: GO 71413
71412: POP
// result := list ;
71413: LD_ADDR_VAR 0 4
71417: PUSH
71418: LD_VAR 0 5
71422: ST_TO_ADDR
// end ;
71423: LD_VAR 0 4
71427: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71428: LD_INT 0
71430: PPUSH
71431: PPUSH
71432: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71433: LD_VAR 0 1
71437: NOT
71438: PUSH
71439: LD_VAR 0 2
71443: PUSH
71444: LD_INT 1
71446: PUSH
71447: LD_INT 2
71449: PUSH
71450: LD_INT 3
71452: PUSH
71453: LD_INT 4
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: IN
71462: NOT
71463: OR
71464: IFFALSE 71468
// exit ;
71466: GO 71551
// tmp := [ ] ;
71468: LD_ADDR_VAR 0 5
71472: PUSH
71473: EMPTY
71474: ST_TO_ADDR
// for i in units do
71475: LD_ADDR_VAR 0 4
71479: PUSH
71480: LD_VAR 0 1
71484: PUSH
71485: FOR_IN
71486: IFFALSE 71520
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71488: LD_ADDR_VAR 0 5
71492: PUSH
71493: LD_VAR 0 5
71497: PPUSH
71498: LD_VAR 0 4
71502: PPUSH
71503: LD_VAR 0 2
71507: PPUSH
71508: CALL_OW 259
71512: PPUSH
71513: CALL 72911 0 2
71517: ST_TO_ADDR
71518: GO 71485
71520: POP
71521: POP
// if not tmp then
71522: LD_VAR 0 5
71526: NOT
71527: IFFALSE 71531
// exit ;
71529: GO 71551
// result := SortListByListDesc ( units , tmp ) ;
71531: LD_ADDR_VAR 0 3
71535: PUSH
71536: LD_VAR 0 1
71540: PPUSH
71541: LD_VAR 0 5
71545: PPUSH
71546: CALL_OW 77
71550: ST_TO_ADDR
// end ;
71551: LD_VAR 0 3
71555: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71556: LD_INT 0
71558: PPUSH
71559: PPUSH
71560: PPUSH
// result := false ;
71561: LD_ADDR_VAR 0 3
71565: PUSH
71566: LD_INT 0
71568: ST_TO_ADDR
// if not building then
71569: LD_VAR 0 2
71573: NOT
71574: IFFALSE 71578
// exit ;
71576: GO 71716
// x := GetX ( building ) ;
71578: LD_ADDR_VAR 0 4
71582: PUSH
71583: LD_VAR 0 2
71587: PPUSH
71588: CALL_OW 250
71592: ST_TO_ADDR
// y := GetY ( building ) ;
71593: LD_ADDR_VAR 0 5
71597: PUSH
71598: LD_VAR 0 2
71602: PPUSH
71603: CALL_OW 251
71607: ST_TO_ADDR
// if not x or not y then
71608: LD_VAR 0 4
71612: NOT
71613: PUSH
71614: LD_VAR 0 5
71618: NOT
71619: OR
71620: IFFALSE 71624
// exit ;
71622: GO 71716
// if GetTaskList ( unit ) then
71624: LD_VAR 0 1
71628: PPUSH
71629: CALL_OW 437
71633: IFFALSE 71716
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71635: LD_STRING e
71637: PUSH
71638: LD_VAR 0 1
71642: PPUSH
71643: CALL_OW 437
71647: PUSH
71648: LD_INT 1
71650: ARRAY
71651: PUSH
71652: LD_INT 1
71654: ARRAY
71655: EQUAL
71656: PUSH
71657: LD_VAR 0 4
71661: PUSH
71662: LD_VAR 0 1
71666: PPUSH
71667: CALL_OW 437
71671: PUSH
71672: LD_INT 1
71674: ARRAY
71675: PUSH
71676: LD_INT 2
71678: ARRAY
71679: EQUAL
71680: AND
71681: PUSH
71682: LD_VAR 0 5
71686: PUSH
71687: LD_VAR 0 1
71691: PPUSH
71692: CALL_OW 437
71696: PUSH
71697: LD_INT 1
71699: ARRAY
71700: PUSH
71701: LD_INT 3
71703: ARRAY
71704: EQUAL
71705: AND
71706: IFFALSE 71716
// result := true end ;
71708: LD_ADDR_VAR 0 3
71712: PUSH
71713: LD_INT 1
71715: ST_TO_ADDR
// end ;
71716: LD_VAR 0 3
71720: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71721: LD_INT 0
71723: PPUSH
// result := false ;
71724: LD_ADDR_VAR 0 4
71728: PUSH
71729: LD_INT 0
71731: ST_TO_ADDR
// if GetTaskList ( unit ) then
71732: LD_VAR 0 1
71736: PPUSH
71737: CALL_OW 437
71741: IFFALSE 71824
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71743: LD_STRING M
71745: PUSH
71746: LD_VAR 0 1
71750: PPUSH
71751: CALL_OW 437
71755: PUSH
71756: LD_INT 1
71758: ARRAY
71759: PUSH
71760: LD_INT 1
71762: ARRAY
71763: EQUAL
71764: PUSH
71765: LD_VAR 0 2
71769: PUSH
71770: LD_VAR 0 1
71774: PPUSH
71775: CALL_OW 437
71779: PUSH
71780: LD_INT 1
71782: ARRAY
71783: PUSH
71784: LD_INT 2
71786: ARRAY
71787: EQUAL
71788: AND
71789: PUSH
71790: LD_VAR 0 3
71794: PUSH
71795: LD_VAR 0 1
71799: PPUSH
71800: CALL_OW 437
71804: PUSH
71805: LD_INT 1
71807: ARRAY
71808: PUSH
71809: LD_INT 3
71811: ARRAY
71812: EQUAL
71813: AND
71814: IFFALSE 71824
// result := true ;
71816: LD_ADDR_VAR 0 4
71820: PUSH
71821: LD_INT 1
71823: ST_TO_ADDR
// end ; end ;
71824: LD_VAR 0 4
71828: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71829: LD_INT 0
71831: PPUSH
71832: PPUSH
71833: PPUSH
71834: PPUSH
// if not unit or not area then
71835: LD_VAR 0 1
71839: NOT
71840: PUSH
71841: LD_VAR 0 2
71845: NOT
71846: OR
71847: IFFALSE 71851
// exit ;
71849: GO 72014
// tmp := AreaToList ( area , i ) ;
71851: LD_ADDR_VAR 0 6
71855: PUSH
71856: LD_VAR 0 2
71860: PPUSH
71861: LD_VAR 0 5
71865: PPUSH
71866: CALL_OW 517
71870: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71871: LD_ADDR_VAR 0 5
71875: PUSH
71876: DOUBLE
71877: LD_INT 1
71879: DEC
71880: ST_TO_ADDR
71881: LD_VAR 0 6
71885: PUSH
71886: LD_INT 1
71888: ARRAY
71889: PUSH
71890: FOR_TO
71891: IFFALSE 72012
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71893: LD_ADDR_VAR 0 7
71897: PUSH
71898: LD_VAR 0 6
71902: PUSH
71903: LD_INT 1
71905: ARRAY
71906: PUSH
71907: LD_VAR 0 5
71911: ARRAY
71912: PUSH
71913: LD_VAR 0 6
71917: PUSH
71918: LD_INT 2
71920: ARRAY
71921: PUSH
71922: LD_VAR 0 5
71926: ARRAY
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
71932: LD_INT 92
71934: PUSH
71935: LD_VAR 0 7
71939: PUSH
71940: LD_INT 1
71942: ARRAY
71943: PUSH
71944: LD_VAR 0 7
71948: PUSH
71949: LD_INT 2
71951: ARRAY
71952: PUSH
71953: LD_INT 3
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: PPUSH
71962: CALL_OW 69
71966: PUSH
71967: LD_INT 0
71969: EQUAL
71970: IFFALSE 72010
// begin PlaceUnitArea ( unit , area , mode ) ;
71972: LD_VAR 0 1
71976: PPUSH
71977: LD_VAR 0 2
71981: PPUSH
71982: LD_VAR 0 3
71986: PPUSH
71987: CALL_OW 49
// result := IsPlaced ( unit ) ;
71991: LD_ADDR_VAR 0 4
71995: PUSH
71996: LD_VAR 0 1
72000: PPUSH
72001: CALL_OW 305
72005: ST_TO_ADDR
// exit ;
72006: POP
72007: POP
72008: GO 72014
// end ; end ;
72010: GO 71890
72012: POP
72013: POP
// end ;
72014: LD_VAR 0 4
72018: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72019: LD_INT 0
72021: PPUSH
72022: PPUSH
72023: PPUSH
// if not side or side > 8 then
72024: LD_VAR 0 1
72028: NOT
72029: PUSH
72030: LD_VAR 0 1
72034: PUSH
72035: LD_INT 8
72037: GREATER
72038: OR
72039: IFFALSE 72043
// exit ;
72041: GO 72230
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72043: LD_ADDR_VAR 0 4
72047: PUSH
72048: LD_INT 22
72050: PUSH
72051: LD_VAR 0 1
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 21
72062: PUSH
72063: LD_INT 3
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PPUSH
72074: CALL_OW 69
72078: ST_TO_ADDR
// if not tmp then
72079: LD_VAR 0 4
72083: NOT
72084: IFFALSE 72088
// exit ;
72086: GO 72230
// enable_addtolog := true ;
72088: LD_ADDR_OWVAR 81
72092: PUSH
72093: LD_INT 1
72095: ST_TO_ADDR
// AddToLog ( [ ) ;
72096: LD_STRING [
72098: PPUSH
72099: CALL_OW 561
// for i in tmp do
72103: LD_ADDR_VAR 0 3
72107: PUSH
72108: LD_VAR 0 4
72112: PUSH
72113: FOR_IN
72114: IFFALSE 72221
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72116: LD_STRING [
72118: PUSH
72119: LD_VAR 0 3
72123: PPUSH
72124: CALL_OW 266
72128: STR
72129: PUSH
72130: LD_STRING , 
72132: STR
72133: PUSH
72134: LD_VAR 0 3
72138: PPUSH
72139: CALL_OW 250
72143: STR
72144: PUSH
72145: LD_STRING , 
72147: STR
72148: PUSH
72149: LD_VAR 0 3
72153: PPUSH
72154: CALL_OW 251
72158: STR
72159: PUSH
72160: LD_STRING , 
72162: STR
72163: PUSH
72164: LD_VAR 0 3
72168: PPUSH
72169: CALL_OW 254
72173: STR
72174: PUSH
72175: LD_STRING , 
72177: STR
72178: PUSH
72179: LD_VAR 0 3
72183: PPUSH
72184: LD_INT 1
72186: PPUSH
72187: CALL_OW 268
72191: STR
72192: PUSH
72193: LD_STRING , 
72195: STR
72196: PUSH
72197: LD_VAR 0 3
72201: PPUSH
72202: LD_INT 2
72204: PPUSH
72205: CALL_OW 268
72209: STR
72210: PUSH
72211: LD_STRING ],
72213: STR
72214: PPUSH
72215: CALL_OW 561
// end ;
72219: GO 72113
72221: POP
72222: POP
// AddToLog ( ]; ) ;
72223: LD_STRING ];
72225: PPUSH
72226: CALL_OW 561
// end ;
72230: LD_VAR 0 2
72234: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72235: LD_INT 0
72237: PPUSH
72238: PPUSH
72239: PPUSH
72240: PPUSH
72241: PPUSH
// if not area or not rate or not max then
72242: LD_VAR 0 1
72246: NOT
72247: PUSH
72248: LD_VAR 0 2
72252: NOT
72253: OR
72254: PUSH
72255: LD_VAR 0 4
72259: NOT
72260: OR
72261: IFFALSE 72265
// exit ;
72263: GO 72454
// while 1 do
72265: LD_INT 1
72267: IFFALSE 72454
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72269: LD_ADDR_VAR 0 9
72273: PUSH
72274: LD_VAR 0 1
72278: PPUSH
72279: LD_INT 1
72281: PPUSH
72282: CALL_OW 287
72286: PUSH
72287: LD_INT 10
72289: MUL
72290: ST_TO_ADDR
// r := rate / 10 ;
72291: LD_ADDR_VAR 0 7
72295: PUSH
72296: LD_VAR 0 2
72300: PUSH
72301: LD_INT 10
72303: DIVREAL
72304: ST_TO_ADDR
// time := 1 1$00 ;
72305: LD_ADDR_VAR 0 8
72309: PUSH
72310: LD_INT 2100
72312: ST_TO_ADDR
// if amount < min then
72313: LD_VAR 0 9
72317: PUSH
72318: LD_VAR 0 3
72322: LESS
72323: IFFALSE 72341
// r := r * 2 else
72325: LD_ADDR_VAR 0 7
72329: PUSH
72330: LD_VAR 0 7
72334: PUSH
72335: LD_INT 2
72337: MUL
72338: ST_TO_ADDR
72339: GO 72367
// if amount > max then
72341: LD_VAR 0 9
72345: PUSH
72346: LD_VAR 0 4
72350: GREATER
72351: IFFALSE 72367
// r := r / 2 ;
72353: LD_ADDR_VAR 0 7
72357: PUSH
72358: LD_VAR 0 7
72362: PUSH
72363: LD_INT 2
72365: DIVREAL
72366: ST_TO_ADDR
// time := time / r ;
72367: LD_ADDR_VAR 0 8
72371: PUSH
72372: LD_VAR 0 8
72376: PUSH
72377: LD_VAR 0 7
72381: DIVREAL
72382: ST_TO_ADDR
// if time < 0 then
72383: LD_VAR 0 8
72387: PUSH
72388: LD_INT 0
72390: LESS
72391: IFFALSE 72408
// time := time * - 1 ;
72393: LD_ADDR_VAR 0 8
72397: PUSH
72398: LD_VAR 0 8
72402: PUSH
72403: LD_INT 1
72405: NEG
72406: MUL
72407: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72408: LD_VAR 0 8
72412: PUSH
72413: LD_INT 35
72415: PPUSH
72416: LD_INT 875
72418: PPUSH
72419: CALL_OW 12
72423: PLUS
72424: PPUSH
72425: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72429: LD_INT 1
72431: PPUSH
72432: LD_INT 5
72434: PPUSH
72435: CALL_OW 12
72439: PPUSH
72440: LD_VAR 0 1
72444: PPUSH
72445: LD_INT 1
72447: PPUSH
72448: CALL_OW 55
// end ;
72452: GO 72265
// end ;
72454: LD_VAR 0 5
72458: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72459: LD_INT 0
72461: PPUSH
72462: PPUSH
72463: PPUSH
72464: PPUSH
72465: PPUSH
72466: PPUSH
72467: PPUSH
72468: PPUSH
// if not turrets or not factories then
72469: LD_VAR 0 1
72473: NOT
72474: PUSH
72475: LD_VAR 0 2
72479: NOT
72480: OR
72481: IFFALSE 72485
// exit ;
72483: GO 72792
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72485: LD_ADDR_VAR 0 10
72489: PUSH
72490: LD_INT 5
72492: PUSH
72493: LD_INT 6
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 2
72502: PUSH
72503: LD_INT 4
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: LD_INT 5
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 24
72527: PUSH
72528: LD_INT 25
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 23
72537: PUSH
72538: LD_INT 27
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 42
72551: PUSH
72552: LD_INT 43
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 44
72561: PUSH
72562: LD_INT 46
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 45
72571: PUSH
72572: LD_INT 47
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: LIST
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: LIST
72588: ST_TO_ADDR
// result := [ ] ;
72589: LD_ADDR_VAR 0 3
72593: PUSH
72594: EMPTY
72595: ST_TO_ADDR
// for i in turrets do
72596: LD_ADDR_VAR 0 4
72600: PUSH
72601: LD_VAR 0 1
72605: PUSH
72606: FOR_IN
72607: IFFALSE 72790
// begin nat := GetNation ( i ) ;
72609: LD_ADDR_VAR 0 7
72613: PUSH
72614: LD_VAR 0 4
72618: PPUSH
72619: CALL_OW 248
72623: ST_TO_ADDR
// weapon := 0 ;
72624: LD_ADDR_VAR 0 8
72628: PUSH
72629: LD_INT 0
72631: ST_TO_ADDR
// if not nat then
72632: LD_VAR 0 7
72636: NOT
72637: IFFALSE 72641
// continue ;
72639: GO 72606
// for j in list [ nat ] do
72641: LD_ADDR_VAR 0 5
72645: PUSH
72646: LD_VAR 0 10
72650: PUSH
72651: LD_VAR 0 7
72655: ARRAY
72656: PUSH
72657: FOR_IN
72658: IFFALSE 72699
// if GetBWeapon ( i ) = j [ 1 ] then
72660: LD_VAR 0 4
72664: PPUSH
72665: CALL_OW 269
72669: PUSH
72670: LD_VAR 0 5
72674: PUSH
72675: LD_INT 1
72677: ARRAY
72678: EQUAL
72679: IFFALSE 72697
// begin weapon := j [ 2 ] ;
72681: LD_ADDR_VAR 0 8
72685: PUSH
72686: LD_VAR 0 5
72690: PUSH
72691: LD_INT 2
72693: ARRAY
72694: ST_TO_ADDR
// break ;
72695: GO 72699
// end ;
72697: GO 72657
72699: POP
72700: POP
// if not weapon then
72701: LD_VAR 0 8
72705: NOT
72706: IFFALSE 72710
// continue ;
72708: GO 72606
// for k in factories do
72710: LD_ADDR_VAR 0 6
72714: PUSH
72715: LD_VAR 0 2
72719: PUSH
72720: FOR_IN
72721: IFFALSE 72786
// begin weapons := AvailableWeaponList ( k ) ;
72723: LD_ADDR_VAR 0 9
72727: PUSH
72728: LD_VAR 0 6
72732: PPUSH
72733: CALL_OW 478
72737: ST_TO_ADDR
// if not weapons then
72738: LD_VAR 0 9
72742: NOT
72743: IFFALSE 72747
// continue ;
72745: GO 72720
// if weapon in weapons then
72747: LD_VAR 0 8
72751: PUSH
72752: LD_VAR 0 9
72756: IN
72757: IFFALSE 72784
// begin result := [ i , weapon ] ;
72759: LD_ADDR_VAR 0 3
72763: PUSH
72764: LD_VAR 0 4
72768: PUSH
72769: LD_VAR 0 8
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: ST_TO_ADDR
// exit ;
72778: POP
72779: POP
72780: POP
72781: POP
72782: GO 72792
// end ; end ;
72784: GO 72720
72786: POP
72787: POP
// end ;
72788: GO 72606
72790: POP
72791: POP
// end ;
72792: LD_VAR 0 3
72796: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72797: LD_INT 0
72799: PPUSH
// if not side or side > 8 then
72800: LD_VAR 0 3
72804: NOT
72805: PUSH
72806: LD_VAR 0 3
72810: PUSH
72811: LD_INT 8
72813: GREATER
72814: OR
72815: IFFALSE 72819
// exit ;
72817: GO 72878
// if not range then
72819: LD_VAR 0 4
72823: NOT
72824: IFFALSE 72835
// range := - 12 ;
72826: LD_ADDR_VAR 0 4
72830: PUSH
72831: LD_INT 12
72833: NEG
72834: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72835: LD_VAR 0 1
72839: PPUSH
72840: LD_VAR 0 2
72844: PPUSH
72845: LD_VAR 0 3
72849: PPUSH
72850: LD_VAR 0 4
72854: PPUSH
72855: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72859: LD_VAR 0 1
72863: PPUSH
72864: LD_VAR 0 2
72868: PPUSH
72869: LD_VAR 0 3
72873: PPUSH
72874: CALL_OW 331
// end ;
72878: LD_VAR 0 5
72882: RET
// export function Video ( mode ) ; begin
72883: LD_INT 0
72885: PPUSH
// ingame_video = mode ;
72886: LD_ADDR_OWVAR 52
72890: PUSH
72891: LD_VAR 0 1
72895: ST_TO_ADDR
// interface_hidden = mode ;
72896: LD_ADDR_OWVAR 54
72900: PUSH
72901: LD_VAR 0 1
72905: ST_TO_ADDR
// end ;
72906: LD_VAR 0 2
72910: RET
// export function Join ( array , element ) ; begin
72911: LD_INT 0
72913: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72914: LD_ADDR_VAR 0 3
72918: PUSH
72919: LD_VAR 0 1
72923: PPUSH
72924: LD_VAR 0 1
72928: PUSH
72929: LD_INT 1
72931: PLUS
72932: PPUSH
72933: LD_VAR 0 2
72937: PPUSH
72938: CALL_OW 1
72942: ST_TO_ADDR
// end ;
72943: LD_VAR 0 3
72947: RET
// export function JoinUnion ( array , element ) ; begin
72948: LD_INT 0
72950: PPUSH
// result := array union element ;
72951: LD_ADDR_VAR 0 3
72955: PUSH
72956: LD_VAR 0 1
72960: PUSH
72961: LD_VAR 0 2
72965: UNION
72966: ST_TO_ADDR
// end ;
72967: LD_VAR 0 3
72971: RET
// export function GetBehemoths ( side ) ; begin
72972: LD_INT 0
72974: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72975: LD_ADDR_VAR 0 2
72979: PUSH
72980: LD_INT 22
72982: PUSH
72983: LD_VAR 0 1
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 31
72994: PUSH
72995: LD_INT 25
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PPUSH
73006: CALL_OW 69
73010: ST_TO_ADDR
// end ;
73011: LD_VAR 0 2
73015: RET
// export function Shuffle ( array ) ; var i , index ; begin
73016: LD_INT 0
73018: PPUSH
73019: PPUSH
73020: PPUSH
// result := [ ] ;
73021: LD_ADDR_VAR 0 2
73025: PUSH
73026: EMPTY
73027: ST_TO_ADDR
// if not array then
73028: LD_VAR 0 1
73032: NOT
73033: IFFALSE 73037
// exit ;
73035: GO 73136
// Randomize ;
73037: CALL_OW 10
// for i = array downto 1 do
73041: LD_ADDR_VAR 0 3
73045: PUSH
73046: DOUBLE
73047: LD_VAR 0 1
73051: INC
73052: ST_TO_ADDR
73053: LD_INT 1
73055: PUSH
73056: FOR_DOWNTO
73057: IFFALSE 73134
// begin index := rand ( 1 , array ) ;
73059: LD_ADDR_VAR 0 4
73063: PUSH
73064: LD_INT 1
73066: PPUSH
73067: LD_VAR 0 1
73071: PPUSH
73072: CALL_OW 12
73076: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73077: LD_ADDR_VAR 0 2
73081: PUSH
73082: LD_VAR 0 2
73086: PPUSH
73087: LD_VAR 0 2
73091: PUSH
73092: LD_INT 1
73094: PLUS
73095: PPUSH
73096: LD_VAR 0 1
73100: PUSH
73101: LD_VAR 0 4
73105: ARRAY
73106: PPUSH
73107: CALL_OW 2
73111: ST_TO_ADDR
// array := Delete ( array , index ) ;
73112: LD_ADDR_VAR 0 1
73116: PUSH
73117: LD_VAR 0 1
73121: PPUSH
73122: LD_VAR 0 4
73126: PPUSH
73127: CALL_OW 3
73131: ST_TO_ADDR
// end ;
73132: GO 73056
73134: POP
73135: POP
// end ;
73136: LD_VAR 0 2
73140: RET
// export function GetBaseMaterials ( base ) ; begin
73141: LD_INT 0
73143: PPUSH
// result := [ 0 , 0 , 0 ] ;
73144: LD_ADDR_VAR 0 2
73148: PUSH
73149: LD_INT 0
73151: PUSH
73152: LD_INT 0
73154: PUSH
73155: LD_INT 0
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: LIST
73162: ST_TO_ADDR
// if not base then
73163: LD_VAR 0 1
73167: NOT
73168: IFFALSE 73172
// exit ;
73170: GO 73221
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73172: LD_ADDR_VAR 0 2
73176: PUSH
73177: LD_VAR 0 1
73181: PPUSH
73182: LD_INT 1
73184: PPUSH
73185: CALL_OW 275
73189: PUSH
73190: LD_VAR 0 1
73194: PPUSH
73195: LD_INT 2
73197: PPUSH
73198: CALL_OW 275
73202: PUSH
73203: LD_VAR 0 1
73207: PPUSH
73208: LD_INT 3
73210: PPUSH
73211: CALL_OW 275
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: ST_TO_ADDR
// end ;
73221: LD_VAR 0 2
73225: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73226: LD_INT 0
73228: PPUSH
73229: PPUSH
// result := array ;
73230: LD_ADDR_VAR 0 3
73234: PUSH
73235: LD_VAR 0 1
73239: ST_TO_ADDR
// if size >= result then
73240: LD_VAR 0 2
73244: PUSH
73245: LD_VAR 0 3
73249: GREATEREQUAL
73250: IFFALSE 73254
// exit ;
73252: GO 73304
// if size then
73254: LD_VAR 0 2
73258: IFFALSE 73304
// for i := array downto size do
73260: LD_ADDR_VAR 0 4
73264: PUSH
73265: DOUBLE
73266: LD_VAR 0 1
73270: INC
73271: ST_TO_ADDR
73272: LD_VAR 0 2
73276: PUSH
73277: FOR_DOWNTO
73278: IFFALSE 73302
// result := Delete ( result , result ) ;
73280: LD_ADDR_VAR 0 3
73284: PUSH
73285: LD_VAR 0 3
73289: PPUSH
73290: LD_VAR 0 3
73294: PPUSH
73295: CALL_OW 3
73299: ST_TO_ADDR
73300: GO 73277
73302: POP
73303: POP
// end ;
73304: LD_VAR 0 3
73308: RET
// export function ComExit ( unit ) ; var tmp ; begin
73309: LD_INT 0
73311: PPUSH
73312: PPUSH
// if not IsInUnit ( unit ) then
73313: LD_VAR 0 1
73317: PPUSH
73318: CALL_OW 310
73322: NOT
73323: IFFALSE 73327
// exit ;
73325: GO 73387
// tmp := IsInUnit ( unit ) ;
73327: LD_ADDR_VAR 0 3
73331: PUSH
73332: LD_VAR 0 1
73336: PPUSH
73337: CALL_OW 310
73341: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73342: LD_VAR 0 3
73346: PPUSH
73347: CALL_OW 247
73351: PUSH
73352: LD_INT 2
73354: EQUAL
73355: IFFALSE 73368
// ComExitVehicle ( unit ) else
73357: LD_VAR 0 1
73361: PPUSH
73362: CALL_OW 121
73366: GO 73377
// ComExitBuilding ( unit ) ;
73368: LD_VAR 0 1
73372: PPUSH
73373: CALL_OW 122
// result := tmp ;
73377: LD_ADDR_VAR 0 2
73381: PUSH
73382: LD_VAR 0 3
73386: ST_TO_ADDR
// end ;
73387: LD_VAR 0 2
73391: RET
// export function ComExitAll ( units ) ; var i ; begin
73392: LD_INT 0
73394: PPUSH
73395: PPUSH
// if not units then
73396: LD_VAR 0 1
73400: NOT
73401: IFFALSE 73405
// exit ;
73403: GO 73431
// for i in units do
73405: LD_ADDR_VAR 0 3
73409: PUSH
73410: LD_VAR 0 1
73414: PUSH
73415: FOR_IN
73416: IFFALSE 73429
// ComExit ( i ) ;
73418: LD_VAR 0 3
73422: PPUSH
73423: CALL 73309 0 1
73427: GO 73415
73429: POP
73430: POP
// end ;
73431: LD_VAR 0 2
73435: RET
// export function ResetHc ; begin
73436: LD_INT 0
73438: PPUSH
// InitHc ;
73439: CALL_OW 19
// hc_importance := 0 ;
73443: LD_ADDR_OWVAR 32
73447: PUSH
73448: LD_INT 0
73450: ST_TO_ADDR
// end ;
73451: LD_VAR 0 1
73455: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73456: LD_INT 0
73458: PPUSH
73459: PPUSH
73460: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73461: LD_ADDR_VAR 0 6
73465: PUSH
73466: LD_VAR 0 1
73470: PUSH
73471: LD_VAR 0 3
73475: PLUS
73476: PUSH
73477: LD_INT 2
73479: DIV
73480: ST_TO_ADDR
// if _x < 0 then
73481: LD_VAR 0 6
73485: PUSH
73486: LD_INT 0
73488: LESS
73489: IFFALSE 73506
// _x := _x * - 1 ;
73491: LD_ADDR_VAR 0 6
73495: PUSH
73496: LD_VAR 0 6
73500: PUSH
73501: LD_INT 1
73503: NEG
73504: MUL
73505: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73506: LD_ADDR_VAR 0 7
73510: PUSH
73511: LD_VAR 0 2
73515: PUSH
73516: LD_VAR 0 4
73520: PLUS
73521: PUSH
73522: LD_INT 2
73524: DIV
73525: ST_TO_ADDR
// if _y < 0 then
73526: LD_VAR 0 7
73530: PUSH
73531: LD_INT 0
73533: LESS
73534: IFFALSE 73551
// _y := _y * - 1 ;
73536: LD_ADDR_VAR 0 7
73540: PUSH
73541: LD_VAR 0 7
73545: PUSH
73546: LD_INT 1
73548: NEG
73549: MUL
73550: ST_TO_ADDR
// result := [ _x , _y ] ;
73551: LD_ADDR_VAR 0 5
73555: PUSH
73556: LD_VAR 0 6
73560: PUSH
73561: LD_VAR 0 7
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: ST_TO_ADDR
// end ;
73570: LD_VAR 0 5
73574: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73575: LD_INT 0
73577: PPUSH
73578: PPUSH
73579: PPUSH
73580: PPUSH
// task := GetTaskList ( unit ) ;
73581: LD_ADDR_VAR 0 7
73585: PUSH
73586: LD_VAR 0 1
73590: PPUSH
73591: CALL_OW 437
73595: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73596: LD_VAR 0 7
73600: NOT
73601: PUSH
73602: LD_VAR 0 1
73606: PPUSH
73607: LD_VAR 0 2
73611: PPUSH
73612: CALL_OW 308
73616: NOT
73617: AND
73618: IFFALSE 73622
// exit ;
73620: GO 73740
// if IsInArea ( unit , area ) then
73622: LD_VAR 0 1
73626: PPUSH
73627: LD_VAR 0 2
73631: PPUSH
73632: CALL_OW 308
73636: IFFALSE 73654
// begin ComMoveToArea ( unit , goAway ) ;
73638: LD_VAR 0 1
73642: PPUSH
73643: LD_VAR 0 3
73647: PPUSH
73648: CALL_OW 113
// exit ;
73652: GO 73740
// end ; if task [ 1 ] [ 1 ] <> M then
73654: LD_VAR 0 7
73658: PUSH
73659: LD_INT 1
73661: ARRAY
73662: PUSH
73663: LD_INT 1
73665: ARRAY
73666: PUSH
73667: LD_STRING M
73669: NONEQUAL
73670: IFFALSE 73674
// exit ;
73672: GO 73740
// x := task [ 1 ] [ 2 ] ;
73674: LD_ADDR_VAR 0 5
73678: PUSH
73679: LD_VAR 0 7
73683: PUSH
73684: LD_INT 1
73686: ARRAY
73687: PUSH
73688: LD_INT 2
73690: ARRAY
73691: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73692: LD_ADDR_VAR 0 6
73696: PUSH
73697: LD_VAR 0 7
73701: PUSH
73702: LD_INT 1
73704: ARRAY
73705: PUSH
73706: LD_INT 3
73708: ARRAY
73709: ST_TO_ADDR
// if InArea ( x , y , area ) then
73710: LD_VAR 0 5
73714: PPUSH
73715: LD_VAR 0 6
73719: PPUSH
73720: LD_VAR 0 2
73724: PPUSH
73725: CALL_OW 309
73729: IFFALSE 73740
// ComStop ( unit ) ;
73731: LD_VAR 0 1
73735: PPUSH
73736: CALL_OW 141
// end ;
73740: LD_VAR 0 4
73744: RET
// export function Abs ( value ) ; begin
73745: LD_INT 0
73747: PPUSH
// result := value ;
73748: LD_ADDR_VAR 0 2
73752: PUSH
73753: LD_VAR 0 1
73757: ST_TO_ADDR
// if value < 0 then
73758: LD_VAR 0 1
73762: PUSH
73763: LD_INT 0
73765: LESS
73766: IFFALSE 73783
// result := value * - 1 ;
73768: LD_ADDR_VAR 0 2
73772: PUSH
73773: LD_VAR 0 1
73777: PUSH
73778: LD_INT 1
73780: NEG
73781: MUL
73782: ST_TO_ADDR
// end ;
73783: LD_VAR 0 2
73787: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73788: LD_INT 0
73790: PPUSH
73791: PPUSH
73792: PPUSH
73793: PPUSH
73794: PPUSH
73795: PPUSH
73796: PPUSH
73797: PPUSH
// if not unit or not building then
73798: LD_VAR 0 1
73802: NOT
73803: PUSH
73804: LD_VAR 0 2
73808: NOT
73809: OR
73810: IFFALSE 73814
// exit ;
73812: GO 74040
// x := GetX ( building ) ;
73814: LD_ADDR_VAR 0 4
73818: PUSH
73819: LD_VAR 0 2
73823: PPUSH
73824: CALL_OW 250
73828: ST_TO_ADDR
// y := GetY ( building ) ;
73829: LD_ADDR_VAR 0 6
73833: PUSH
73834: LD_VAR 0 2
73838: PPUSH
73839: CALL_OW 251
73843: ST_TO_ADDR
// d := GetDir ( building ) ;
73844: LD_ADDR_VAR 0 8
73848: PUSH
73849: LD_VAR 0 2
73853: PPUSH
73854: CALL_OW 254
73858: ST_TO_ADDR
// r := 4 ;
73859: LD_ADDR_VAR 0 9
73863: PUSH
73864: LD_INT 4
73866: ST_TO_ADDR
// for i := 1 to 5 do
73867: LD_ADDR_VAR 0 10
73871: PUSH
73872: DOUBLE
73873: LD_INT 1
73875: DEC
73876: ST_TO_ADDR
73877: LD_INT 5
73879: PUSH
73880: FOR_TO
73881: IFFALSE 74038
// begin _x := ShiftX ( x , d , r + i ) ;
73883: LD_ADDR_VAR 0 5
73887: PUSH
73888: LD_VAR 0 4
73892: PPUSH
73893: LD_VAR 0 8
73897: PPUSH
73898: LD_VAR 0 9
73902: PUSH
73903: LD_VAR 0 10
73907: PLUS
73908: PPUSH
73909: CALL_OW 272
73913: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73914: LD_ADDR_VAR 0 7
73918: PUSH
73919: LD_VAR 0 6
73923: PPUSH
73924: LD_VAR 0 8
73928: PPUSH
73929: LD_VAR 0 9
73933: PUSH
73934: LD_VAR 0 10
73938: PLUS
73939: PPUSH
73940: CALL_OW 273
73944: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73945: LD_VAR 0 5
73949: PPUSH
73950: LD_VAR 0 7
73954: PPUSH
73955: CALL_OW 488
73959: PUSH
73960: LD_VAR 0 5
73964: PPUSH
73965: LD_VAR 0 7
73969: PPUSH
73970: CALL_OW 428
73974: PPUSH
73975: CALL_OW 247
73979: PUSH
73980: LD_INT 3
73982: PUSH
73983: LD_INT 2
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: IN
73990: NOT
73991: AND
73992: IFFALSE 74036
// begin ComMoveXY ( unit , _x , _y ) ;
73994: LD_VAR 0 1
73998: PPUSH
73999: LD_VAR 0 5
74003: PPUSH
74004: LD_VAR 0 7
74008: PPUSH
74009: CALL_OW 111
// result := [ _x , _y ] ;
74013: LD_ADDR_VAR 0 3
74017: PUSH
74018: LD_VAR 0 5
74022: PUSH
74023: LD_VAR 0 7
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: ST_TO_ADDR
// exit ;
74032: POP
74033: POP
74034: GO 74040
// end ; end ;
74036: GO 73880
74038: POP
74039: POP
// end ;
74040: LD_VAR 0 3
74044: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74045: LD_INT 0
74047: PPUSH
74048: PPUSH
74049: PPUSH
// result := 0 ;
74050: LD_ADDR_VAR 0 3
74054: PUSH
74055: LD_INT 0
74057: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74058: LD_VAR 0 1
74062: PUSH
74063: LD_INT 0
74065: LESS
74066: PUSH
74067: LD_VAR 0 1
74071: PUSH
74072: LD_INT 8
74074: GREATER
74075: OR
74076: PUSH
74077: LD_VAR 0 2
74081: PUSH
74082: LD_INT 0
74084: LESS
74085: OR
74086: PUSH
74087: LD_VAR 0 2
74091: PUSH
74092: LD_INT 8
74094: GREATER
74095: OR
74096: IFFALSE 74100
// exit ;
74098: GO 74175
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74100: LD_ADDR_VAR 0 4
74104: PUSH
74105: LD_INT 22
74107: PUSH
74108: LD_VAR 0 2
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PPUSH
74117: CALL_OW 69
74121: PUSH
74122: FOR_IN
74123: IFFALSE 74173
// begin un := UnitShoot ( i ) ;
74125: LD_ADDR_VAR 0 5
74129: PUSH
74130: LD_VAR 0 4
74134: PPUSH
74135: CALL_OW 504
74139: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74140: LD_VAR 0 5
74144: PPUSH
74145: CALL_OW 255
74149: PUSH
74150: LD_VAR 0 1
74154: EQUAL
74155: IFFALSE 74171
// begin result := un ;
74157: LD_ADDR_VAR 0 3
74161: PUSH
74162: LD_VAR 0 5
74166: ST_TO_ADDR
// exit ;
74167: POP
74168: POP
74169: GO 74175
// end ; end ;
74171: GO 74122
74173: POP
74174: POP
// end ;
74175: LD_VAR 0 3
74179: RET
// export function GetCargoBay ( units ) ; begin
74180: LD_INT 0
74182: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74183: LD_ADDR_VAR 0 2
74187: PUSH
74188: LD_VAR 0 1
74192: PPUSH
74193: LD_INT 2
74195: PUSH
74196: LD_INT 34
74198: PUSH
74199: LD_INT 12
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 34
74208: PUSH
74209: LD_INT 51
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 34
74218: PUSH
74219: LD_INT 32
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 34
74228: PUSH
74229: LD_INT 89
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: PPUSH
74243: CALL_OW 72
74247: ST_TO_ADDR
// end ;
74248: LD_VAR 0 2
74252: RET
// export function Negate ( value ) ; begin
74253: LD_INT 0
74255: PPUSH
// result := not value ;
74256: LD_ADDR_VAR 0 2
74260: PUSH
74261: LD_VAR 0 1
74265: NOT
74266: ST_TO_ADDR
// end ;
74267: LD_VAR 0 2
74271: RET
// export function Inc ( value ) ; begin
74272: LD_INT 0
74274: PPUSH
// result := value + 1 ;
74275: LD_ADDR_VAR 0 2
74279: PUSH
74280: LD_VAR 0 1
74284: PUSH
74285: LD_INT 1
74287: PLUS
74288: ST_TO_ADDR
// end ;
74289: LD_VAR 0 2
74293: RET
// export function Dec ( value ) ; begin
74294: LD_INT 0
74296: PPUSH
// result := value - 1 ;
74297: LD_ADDR_VAR 0 2
74301: PUSH
74302: LD_VAR 0 1
74306: PUSH
74307: LD_INT 1
74309: MINUS
74310: ST_TO_ADDR
// end ;
74311: LD_VAR 0 2
74315: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74316: LD_INT 0
74318: PPUSH
74319: PPUSH
74320: PPUSH
74321: PPUSH
74322: PPUSH
74323: PPUSH
74324: PPUSH
74325: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74326: LD_VAR 0 1
74330: PPUSH
74331: LD_VAR 0 2
74335: PPUSH
74336: CALL_OW 488
74340: NOT
74341: PUSH
74342: LD_VAR 0 3
74346: PPUSH
74347: LD_VAR 0 4
74351: PPUSH
74352: CALL_OW 488
74356: NOT
74357: OR
74358: IFFALSE 74371
// begin result := - 1 ;
74360: LD_ADDR_VAR 0 5
74364: PUSH
74365: LD_INT 1
74367: NEG
74368: ST_TO_ADDR
// exit ;
74369: GO 74606
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74371: LD_ADDR_VAR 0 12
74375: PUSH
74376: LD_VAR 0 1
74380: PPUSH
74381: LD_VAR 0 2
74385: PPUSH
74386: LD_VAR 0 3
74390: PPUSH
74391: LD_VAR 0 4
74395: PPUSH
74396: CALL 73456 0 4
74400: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74401: LD_ADDR_VAR 0 11
74405: PUSH
74406: LD_VAR 0 1
74410: PPUSH
74411: LD_VAR 0 2
74415: PPUSH
74416: LD_VAR 0 12
74420: PUSH
74421: LD_INT 1
74423: ARRAY
74424: PPUSH
74425: LD_VAR 0 12
74429: PUSH
74430: LD_INT 2
74432: ARRAY
74433: PPUSH
74434: CALL_OW 298
74438: ST_TO_ADDR
// distance := 9999 ;
74439: LD_ADDR_VAR 0 10
74443: PUSH
74444: LD_INT 9999
74446: ST_TO_ADDR
// for i := 0 to 5 do
74447: LD_ADDR_VAR 0 6
74451: PUSH
74452: DOUBLE
74453: LD_INT 0
74455: DEC
74456: ST_TO_ADDR
74457: LD_INT 5
74459: PUSH
74460: FOR_TO
74461: IFFALSE 74604
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74463: LD_ADDR_VAR 0 7
74467: PUSH
74468: LD_VAR 0 1
74472: PPUSH
74473: LD_VAR 0 6
74477: PPUSH
74478: LD_VAR 0 11
74482: PPUSH
74483: CALL_OW 272
74487: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74488: LD_ADDR_VAR 0 8
74492: PUSH
74493: LD_VAR 0 2
74497: PPUSH
74498: LD_VAR 0 6
74502: PPUSH
74503: LD_VAR 0 11
74507: PPUSH
74508: CALL_OW 273
74512: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74513: LD_VAR 0 7
74517: PPUSH
74518: LD_VAR 0 8
74522: PPUSH
74523: CALL_OW 488
74527: NOT
74528: IFFALSE 74532
// continue ;
74530: GO 74460
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74532: LD_ADDR_VAR 0 9
74536: PUSH
74537: LD_VAR 0 12
74541: PUSH
74542: LD_INT 1
74544: ARRAY
74545: PPUSH
74546: LD_VAR 0 12
74550: PUSH
74551: LD_INT 2
74553: ARRAY
74554: PPUSH
74555: LD_VAR 0 7
74559: PPUSH
74560: LD_VAR 0 8
74564: PPUSH
74565: CALL_OW 298
74569: ST_TO_ADDR
// if tmp < distance then
74570: LD_VAR 0 9
74574: PUSH
74575: LD_VAR 0 10
74579: LESS
74580: IFFALSE 74602
// begin result := i ;
74582: LD_ADDR_VAR 0 5
74586: PUSH
74587: LD_VAR 0 6
74591: ST_TO_ADDR
// distance := tmp ;
74592: LD_ADDR_VAR 0 10
74596: PUSH
74597: LD_VAR 0 9
74601: ST_TO_ADDR
// end ; end ;
74602: GO 74460
74604: POP
74605: POP
// end ;
74606: LD_VAR 0 5
74610: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74611: LD_INT 0
74613: PPUSH
74614: PPUSH
// if not driver or not IsInUnit ( driver ) then
74615: LD_VAR 0 1
74619: NOT
74620: PUSH
74621: LD_VAR 0 1
74625: PPUSH
74626: CALL_OW 310
74630: NOT
74631: OR
74632: IFFALSE 74636
// exit ;
74634: GO 74726
// vehicle := IsInUnit ( driver ) ;
74636: LD_ADDR_VAR 0 3
74640: PUSH
74641: LD_VAR 0 1
74645: PPUSH
74646: CALL_OW 310
74650: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74651: LD_VAR 0 1
74655: PPUSH
74656: LD_STRING \
74658: PUSH
74659: LD_INT 0
74661: PUSH
74662: LD_INT 0
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: LD_INT 0
74670: PUSH
74671: LD_INT 0
74673: PUSH
74674: LD_INT 0
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: PUSH
74686: LD_STRING E
74688: PUSH
74689: LD_INT 0
74691: PUSH
74692: LD_INT 0
74694: PUSH
74695: LD_VAR 0 3
74699: PUSH
74700: LD_INT 0
74702: PUSH
74703: LD_INT 0
74705: PUSH
74706: LD_INT 0
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PPUSH
74722: CALL_OW 446
// end ;
74726: LD_VAR 0 2
74730: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74731: LD_INT 0
74733: PPUSH
74734: PPUSH
// if not driver or not IsInUnit ( driver ) then
74735: LD_VAR 0 1
74739: NOT
74740: PUSH
74741: LD_VAR 0 1
74745: PPUSH
74746: CALL_OW 310
74750: NOT
74751: OR
74752: IFFALSE 74756
// exit ;
74754: GO 74846
// vehicle := IsInUnit ( driver ) ;
74756: LD_ADDR_VAR 0 3
74760: PUSH
74761: LD_VAR 0 1
74765: PPUSH
74766: CALL_OW 310
74770: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74771: LD_VAR 0 1
74775: PPUSH
74776: LD_STRING \
74778: PUSH
74779: LD_INT 0
74781: PUSH
74782: LD_INT 0
74784: PUSH
74785: LD_INT 0
74787: PUSH
74788: LD_INT 0
74790: PUSH
74791: LD_INT 0
74793: PUSH
74794: LD_INT 0
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: PUSH
74806: LD_STRING E
74808: PUSH
74809: LD_INT 0
74811: PUSH
74812: LD_INT 0
74814: PUSH
74815: LD_VAR 0 3
74819: PUSH
74820: LD_INT 0
74822: PUSH
74823: LD_INT 0
74825: PUSH
74826: LD_INT 0
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PPUSH
74842: CALL_OW 447
// end ;
74846: LD_VAR 0 2
74850: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74851: LD_INT 0
74853: PPUSH
74854: PPUSH
74855: PPUSH
// tmp := [ ] ;
74856: LD_ADDR_VAR 0 5
74860: PUSH
74861: EMPTY
74862: ST_TO_ADDR
// for i in units do
74863: LD_ADDR_VAR 0 4
74867: PUSH
74868: LD_VAR 0 1
74872: PUSH
74873: FOR_IN
74874: IFFALSE 74912
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74876: LD_ADDR_VAR 0 5
74880: PUSH
74881: LD_VAR 0 5
74885: PPUSH
74886: LD_VAR 0 5
74890: PUSH
74891: LD_INT 1
74893: PLUS
74894: PPUSH
74895: LD_VAR 0 4
74899: PPUSH
74900: CALL_OW 256
74904: PPUSH
74905: CALL_OW 2
74909: ST_TO_ADDR
74910: GO 74873
74912: POP
74913: POP
// if not tmp then
74914: LD_VAR 0 5
74918: NOT
74919: IFFALSE 74923
// exit ;
74921: GO 74971
// if asc then
74923: LD_VAR 0 2
74927: IFFALSE 74951
// result := SortListByListAsc ( units , tmp ) else
74929: LD_ADDR_VAR 0 3
74933: PUSH
74934: LD_VAR 0 1
74938: PPUSH
74939: LD_VAR 0 5
74943: PPUSH
74944: CALL_OW 76
74948: ST_TO_ADDR
74949: GO 74971
// result := SortListByListDesc ( units , tmp ) ;
74951: LD_ADDR_VAR 0 3
74955: PUSH
74956: LD_VAR 0 1
74960: PPUSH
74961: LD_VAR 0 5
74965: PPUSH
74966: CALL_OW 77
74970: ST_TO_ADDR
// end ;
74971: LD_VAR 0 3
74975: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74976: LD_INT 0
74978: PPUSH
74979: PPUSH
// task := GetTaskList ( mech ) ;
74980: LD_ADDR_VAR 0 4
74984: PUSH
74985: LD_VAR 0 1
74989: PPUSH
74990: CALL_OW 437
74994: ST_TO_ADDR
// if not task then
74995: LD_VAR 0 4
74999: NOT
75000: IFFALSE 75004
// exit ;
75002: GO 75046
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75004: LD_ADDR_VAR 0 3
75008: PUSH
75009: LD_VAR 0 4
75013: PUSH
75014: LD_INT 1
75016: ARRAY
75017: PUSH
75018: LD_INT 1
75020: ARRAY
75021: PUSH
75022: LD_STRING r
75024: EQUAL
75025: PUSH
75026: LD_VAR 0 4
75030: PUSH
75031: LD_INT 1
75033: ARRAY
75034: PUSH
75035: LD_INT 4
75037: ARRAY
75038: PUSH
75039: LD_VAR 0 2
75043: EQUAL
75044: AND
75045: ST_TO_ADDR
// end ;
75046: LD_VAR 0 3
75050: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75051: LD_INT 0
75053: PPUSH
// SetDir ( unit , d ) ;
75054: LD_VAR 0 1
75058: PPUSH
75059: LD_VAR 0 4
75063: PPUSH
75064: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75068: LD_VAR 0 1
75072: PPUSH
75073: LD_VAR 0 2
75077: PPUSH
75078: LD_VAR 0 3
75082: PPUSH
75083: LD_VAR 0 5
75087: PPUSH
75088: CALL_OW 48
// end ;
75092: LD_VAR 0 6
75096: RET
// export function ToNaturalNumber ( number ) ; begin
75097: LD_INT 0
75099: PPUSH
// result := number div 1 ;
75100: LD_ADDR_VAR 0 2
75104: PUSH
75105: LD_VAR 0 1
75109: PUSH
75110: LD_INT 1
75112: DIV
75113: ST_TO_ADDR
// if number < 0 then
75114: LD_VAR 0 1
75118: PUSH
75119: LD_INT 0
75121: LESS
75122: IFFALSE 75132
// result := 0 ;
75124: LD_ADDR_VAR 0 2
75128: PUSH
75129: LD_INT 0
75131: ST_TO_ADDR
// end ;
75132: LD_VAR 0 2
75136: RET
// export function SortByClass ( units , class ) ; var un ; begin
75137: LD_INT 0
75139: PPUSH
75140: PPUSH
// if not units or not class then
75141: LD_VAR 0 1
75145: NOT
75146: PUSH
75147: LD_VAR 0 2
75151: NOT
75152: OR
75153: IFFALSE 75157
// exit ;
75155: GO 75252
// result := [ ] ;
75157: LD_ADDR_VAR 0 3
75161: PUSH
75162: EMPTY
75163: ST_TO_ADDR
// for un in units do
75164: LD_ADDR_VAR 0 4
75168: PUSH
75169: LD_VAR 0 1
75173: PUSH
75174: FOR_IN
75175: IFFALSE 75250
// if GetClass ( un ) = class then
75177: LD_VAR 0 4
75181: PPUSH
75182: CALL_OW 257
75186: PUSH
75187: LD_VAR 0 2
75191: EQUAL
75192: IFFALSE 75219
// result := Insert ( result , 1 , un ) else
75194: LD_ADDR_VAR 0 3
75198: PUSH
75199: LD_VAR 0 3
75203: PPUSH
75204: LD_INT 1
75206: PPUSH
75207: LD_VAR 0 4
75211: PPUSH
75212: CALL_OW 2
75216: ST_TO_ADDR
75217: GO 75248
// result := Replace ( result , result + 1 , un ) ;
75219: LD_ADDR_VAR 0 3
75223: PUSH
75224: LD_VAR 0 3
75228: PPUSH
75229: LD_VAR 0 3
75233: PUSH
75234: LD_INT 1
75236: PLUS
75237: PPUSH
75238: LD_VAR 0 4
75242: PPUSH
75243: CALL_OW 1
75247: ST_TO_ADDR
75248: GO 75174
75250: POP
75251: POP
// end ;
75252: LD_VAR 0 3
75256: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75257: LD_INT 0
75259: PPUSH
75260: PPUSH
75261: PPUSH
75262: PPUSH
75263: PPUSH
75264: PPUSH
75265: PPUSH
// result := [ ] ;
75266: LD_ADDR_VAR 0 4
75270: PUSH
75271: EMPTY
75272: ST_TO_ADDR
// if x - r < 0 then
75273: LD_VAR 0 1
75277: PUSH
75278: LD_VAR 0 3
75282: MINUS
75283: PUSH
75284: LD_INT 0
75286: LESS
75287: IFFALSE 75299
// min_x := 0 else
75289: LD_ADDR_VAR 0 8
75293: PUSH
75294: LD_INT 0
75296: ST_TO_ADDR
75297: GO 75315
// min_x := x - r ;
75299: LD_ADDR_VAR 0 8
75303: PUSH
75304: LD_VAR 0 1
75308: PUSH
75309: LD_VAR 0 3
75313: MINUS
75314: ST_TO_ADDR
// if y - r < 0 then
75315: LD_VAR 0 2
75319: PUSH
75320: LD_VAR 0 3
75324: MINUS
75325: PUSH
75326: LD_INT 0
75328: LESS
75329: IFFALSE 75341
// min_y := 0 else
75331: LD_ADDR_VAR 0 7
75335: PUSH
75336: LD_INT 0
75338: ST_TO_ADDR
75339: GO 75357
// min_y := y - r ;
75341: LD_ADDR_VAR 0 7
75345: PUSH
75346: LD_VAR 0 2
75350: PUSH
75351: LD_VAR 0 3
75355: MINUS
75356: ST_TO_ADDR
// max_x := x + r ;
75357: LD_ADDR_VAR 0 9
75361: PUSH
75362: LD_VAR 0 1
75366: PUSH
75367: LD_VAR 0 3
75371: PLUS
75372: ST_TO_ADDR
// max_y := y + r ;
75373: LD_ADDR_VAR 0 10
75377: PUSH
75378: LD_VAR 0 2
75382: PUSH
75383: LD_VAR 0 3
75387: PLUS
75388: ST_TO_ADDR
// for _x = min_x to max_x do
75389: LD_ADDR_VAR 0 5
75393: PUSH
75394: DOUBLE
75395: LD_VAR 0 8
75399: DEC
75400: ST_TO_ADDR
75401: LD_VAR 0 9
75405: PUSH
75406: FOR_TO
75407: IFFALSE 75508
// for _y = min_y to max_y do
75409: LD_ADDR_VAR 0 6
75413: PUSH
75414: DOUBLE
75415: LD_VAR 0 7
75419: DEC
75420: ST_TO_ADDR
75421: LD_VAR 0 10
75425: PUSH
75426: FOR_TO
75427: IFFALSE 75504
// begin if not ValidHex ( _x , _y ) then
75429: LD_VAR 0 5
75433: PPUSH
75434: LD_VAR 0 6
75438: PPUSH
75439: CALL_OW 488
75443: NOT
75444: IFFALSE 75448
// continue ;
75446: GO 75426
// if GetResourceTypeXY ( _x , _y ) then
75448: LD_VAR 0 5
75452: PPUSH
75453: LD_VAR 0 6
75457: PPUSH
75458: CALL_OW 283
75462: IFFALSE 75502
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75464: LD_ADDR_VAR 0 4
75468: PUSH
75469: LD_VAR 0 4
75473: PPUSH
75474: LD_VAR 0 4
75478: PUSH
75479: LD_INT 1
75481: PLUS
75482: PPUSH
75483: LD_VAR 0 5
75487: PUSH
75488: LD_VAR 0 6
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PPUSH
75497: CALL_OW 1
75501: ST_TO_ADDR
// end ;
75502: GO 75426
75504: POP
75505: POP
75506: GO 75406
75508: POP
75509: POP
// end ;
75510: LD_VAR 0 4
75514: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75515: LD_INT 0
75517: PPUSH
75518: PPUSH
75519: PPUSH
75520: PPUSH
75521: PPUSH
75522: PPUSH
75523: PPUSH
75524: PPUSH
// if not units then
75525: LD_VAR 0 1
75529: NOT
75530: IFFALSE 75534
// exit ;
75532: GO 76058
// result := UnitFilter ( units , [ f_ok ] ) ;
75534: LD_ADDR_VAR 0 3
75538: PUSH
75539: LD_VAR 0 1
75543: PPUSH
75544: LD_INT 50
75546: PUSH
75547: EMPTY
75548: LIST
75549: PPUSH
75550: CALL_OW 72
75554: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75555: LD_ADDR_VAR 0 8
75559: PUSH
75560: LD_VAR 0 1
75564: PUSH
75565: LD_INT 1
75567: ARRAY
75568: PPUSH
75569: CALL_OW 255
75573: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75574: LD_ADDR_VAR 0 10
75578: PUSH
75579: LD_INT 29
75581: PUSH
75582: LD_INT 91
75584: PUSH
75585: LD_INT 49
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: LIST
75592: ST_TO_ADDR
// if not result then
75593: LD_VAR 0 3
75597: NOT
75598: IFFALSE 75602
// exit ;
75600: GO 76058
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75602: LD_ADDR_VAR 0 5
75606: PUSH
75607: LD_INT 81
75609: PUSH
75610: LD_VAR 0 8
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PPUSH
75619: CALL_OW 69
75623: ST_TO_ADDR
// for i in result do
75624: LD_ADDR_VAR 0 4
75628: PUSH
75629: LD_VAR 0 3
75633: PUSH
75634: FOR_IN
75635: IFFALSE 76056
// begin tag := GetTag ( i ) + 1 ;
75637: LD_ADDR_VAR 0 9
75641: PUSH
75642: LD_VAR 0 4
75646: PPUSH
75647: CALL_OW 110
75651: PUSH
75652: LD_INT 1
75654: PLUS
75655: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75656: LD_ADDR_VAR 0 7
75660: PUSH
75661: LD_VAR 0 4
75665: PPUSH
75666: CALL_OW 250
75670: PPUSH
75671: LD_VAR 0 4
75675: PPUSH
75676: CALL_OW 251
75680: PPUSH
75681: LD_INT 6
75683: PPUSH
75684: CALL 75257 0 3
75688: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75689: LD_VAR 0 4
75693: PPUSH
75694: CALL_OW 247
75698: PUSH
75699: LD_INT 2
75701: EQUAL
75702: PUSH
75703: LD_VAR 0 7
75707: AND
75708: PUSH
75709: LD_VAR 0 4
75713: PPUSH
75714: CALL_OW 264
75718: PUSH
75719: LD_VAR 0 10
75723: IN
75724: NOT
75725: AND
75726: IFFALSE 75765
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75728: LD_VAR 0 4
75732: PPUSH
75733: LD_VAR 0 7
75737: PUSH
75738: LD_INT 1
75740: ARRAY
75741: PUSH
75742: LD_INT 1
75744: ARRAY
75745: PPUSH
75746: LD_VAR 0 7
75750: PUSH
75751: LD_INT 1
75753: ARRAY
75754: PUSH
75755: LD_INT 2
75757: ARRAY
75758: PPUSH
75759: CALL_OW 116
75763: GO 76054
// if path > tag then
75765: LD_VAR 0 2
75769: PUSH
75770: LD_VAR 0 9
75774: GREATER
75775: IFFALSE 75983
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75777: LD_ADDR_VAR 0 6
75781: PUSH
75782: LD_VAR 0 5
75786: PPUSH
75787: LD_INT 91
75789: PUSH
75790: LD_VAR 0 4
75794: PUSH
75795: LD_INT 8
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: LIST
75802: PPUSH
75803: CALL_OW 72
75807: ST_TO_ADDR
// if nearEnemy then
75808: LD_VAR 0 6
75812: IFFALSE 75881
// begin if GetWeapon ( i ) = ru_time_lapser then
75814: LD_VAR 0 4
75818: PPUSH
75819: CALL_OW 264
75823: PUSH
75824: LD_INT 49
75826: EQUAL
75827: IFFALSE 75855
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75829: LD_VAR 0 4
75833: PPUSH
75834: LD_VAR 0 6
75838: PPUSH
75839: LD_VAR 0 4
75843: PPUSH
75844: CALL_OW 74
75848: PPUSH
75849: CALL_OW 112
75853: GO 75879
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75855: LD_VAR 0 4
75859: PPUSH
75860: LD_VAR 0 6
75864: PPUSH
75865: LD_VAR 0 4
75869: PPUSH
75870: CALL_OW 74
75874: PPUSH
75875: CALL_OW 115
// end else
75879: GO 75981
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75881: LD_VAR 0 4
75885: PPUSH
75886: LD_VAR 0 2
75890: PUSH
75891: LD_VAR 0 9
75895: ARRAY
75896: PUSH
75897: LD_INT 1
75899: ARRAY
75900: PPUSH
75901: LD_VAR 0 2
75905: PUSH
75906: LD_VAR 0 9
75910: ARRAY
75911: PUSH
75912: LD_INT 2
75914: ARRAY
75915: PPUSH
75916: CALL_OW 297
75920: PUSH
75921: LD_INT 6
75923: GREATER
75924: IFFALSE 75967
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75926: LD_VAR 0 4
75930: PPUSH
75931: LD_VAR 0 2
75935: PUSH
75936: LD_VAR 0 9
75940: ARRAY
75941: PUSH
75942: LD_INT 1
75944: ARRAY
75945: PPUSH
75946: LD_VAR 0 2
75950: PUSH
75951: LD_VAR 0 9
75955: ARRAY
75956: PUSH
75957: LD_INT 2
75959: ARRAY
75960: PPUSH
75961: CALL_OW 114
75965: GO 75981
// SetTag ( i , tag ) ;
75967: LD_VAR 0 4
75971: PPUSH
75972: LD_VAR 0 9
75976: PPUSH
75977: CALL_OW 109
// end else
75981: GO 76054
// if enemy then
75983: LD_VAR 0 5
75987: IFFALSE 76054
// begin if GetWeapon ( i ) = ru_time_lapser then
75989: LD_VAR 0 4
75993: PPUSH
75994: CALL_OW 264
75998: PUSH
75999: LD_INT 49
76001: EQUAL
76002: IFFALSE 76030
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76004: LD_VAR 0 4
76008: PPUSH
76009: LD_VAR 0 5
76013: PPUSH
76014: LD_VAR 0 4
76018: PPUSH
76019: CALL_OW 74
76023: PPUSH
76024: CALL_OW 112
76028: GO 76054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76030: LD_VAR 0 4
76034: PPUSH
76035: LD_VAR 0 5
76039: PPUSH
76040: LD_VAR 0 4
76044: PPUSH
76045: CALL_OW 74
76049: PPUSH
76050: CALL_OW 115
// end ; end ;
76054: GO 75634
76056: POP
76057: POP
// end ;
76058: LD_VAR 0 3
76062: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76063: LD_INT 0
76065: PPUSH
76066: PPUSH
76067: PPUSH
// if not unit or IsInUnit ( unit ) then
76068: LD_VAR 0 1
76072: NOT
76073: PUSH
76074: LD_VAR 0 1
76078: PPUSH
76079: CALL_OW 310
76083: OR
76084: IFFALSE 76088
// exit ;
76086: GO 76179
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76088: LD_ADDR_VAR 0 4
76092: PUSH
76093: LD_VAR 0 1
76097: PPUSH
76098: CALL_OW 250
76102: PPUSH
76103: LD_VAR 0 2
76107: PPUSH
76108: LD_INT 1
76110: PPUSH
76111: CALL_OW 272
76115: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76116: LD_ADDR_VAR 0 5
76120: PUSH
76121: LD_VAR 0 1
76125: PPUSH
76126: CALL_OW 251
76130: PPUSH
76131: LD_VAR 0 2
76135: PPUSH
76136: LD_INT 1
76138: PPUSH
76139: CALL_OW 273
76143: ST_TO_ADDR
// if ValidHex ( x , y ) then
76144: LD_VAR 0 4
76148: PPUSH
76149: LD_VAR 0 5
76153: PPUSH
76154: CALL_OW 488
76158: IFFALSE 76179
// ComTurnXY ( unit , x , y ) ;
76160: LD_VAR 0 1
76164: PPUSH
76165: LD_VAR 0 4
76169: PPUSH
76170: LD_VAR 0 5
76174: PPUSH
76175: CALL_OW 118
// end ;
76179: LD_VAR 0 3
76183: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76184: LD_INT 0
76186: PPUSH
76187: PPUSH
// result := false ;
76188: LD_ADDR_VAR 0 3
76192: PUSH
76193: LD_INT 0
76195: ST_TO_ADDR
// if not units then
76196: LD_VAR 0 2
76200: NOT
76201: IFFALSE 76205
// exit ;
76203: GO 76250
// for i in units do
76205: LD_ADDR_VAR 0 4
76209: PUSH
76210: LD_VAR 0 2
76214: PUSH
76215: FOR_IN
76216: IFFALSE 76248
// if See ( side , i ) then
76218: LD_VAR 0 1
76222: PPUSH
76223: LD_VAR 0 4
76227: PPUSH
76228: CALL_OW 292
76232: IFFALSE 76246
// begin result := true ;
76234: LD_ADDR_VAR 0 3
76238: PUSH
76239: LD_INT 1
76241: ST_TO_ADDR
// exit ;
76242: POP
76243: POP
76244: GO 76250
// end ;
76246: GO 76215
76248: POP
76249: POP
// end ;
76250: LD_VAR 0 3
76254: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76255: LD_INT 0
76257: PPUSH
76258: PPUSH
76259: PPUSH
76260: PPUSH
// if not unit or not points then
76261: LD_VAR 0 1
76265: NOT
76266: PUSH
76267: LD_VAR 0 2
76271: NOT
76272: OR
76273: IFFALSE 76277
// exit ;
76275: GO 76367
// dist := 99999 ;
76277: LD_ADDR_VAR 0 5
76281: PUSH
76282: LD_INT 99999
76284: ST_TO_ADDR
// for i in points do
76285: LD_ADDR_VAR 0 4
76289: PUSH
76290: LD_VAR 0 2
76294: PUSH
76295: FOR_IN
76296: IFFALSE 76365
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76298: LD_ADDR_VAR 0 6
76302: PUSH
76303: LD_VAR 0 1
76307: PPUSH
76308: LD_VAR 0 4
76312: PUSH
76313: LD_INT 1
76315: ARRAY
76316: PPUSH
76317: LD_VAR 0 4
76321: PUSH
76322: LD_INT 2
76324: ARRAY
76325: PPUSH
76326: CALL_OW 297
76330: ST_TO_ADDR
// if tmpDist < dist then
76331: LD_VAR 0 6
76335: PUSH
76336: LD_VAR 0 5
76340: LESS
76341: IFFALSE 76363
// begin result := i ;
76343: LD_ADDR_VAR 0 3
76347: PUSH
76348: LD_VAR 0 4
76352: ST_TO_ADDR
// dist := tmpDist ;
76353: LD_ADDR_VAR 0 5
76357: PUSH
76358: LD_VAR 0 6
76362: ST_TO_ADDR
// end ; end ;
76363: GO 76295
76365: POP
76366: POP
// end ;
76367: LD_VAR 0 3
76371: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76372: LD_INT 0
76374: PPUSH
// uc_side := side ;
76375: LD_ADDR_OWVAR 20
76379: PUSH
76380: LD_VAR 0 1
76384: ST_TO_ADDR
// uc_nation := 3 ;
76385: LD_ADDR_OWVAR 21
76389: PUSH
76390: LD_INT 3
76392: ST_TO_ADDR
// vc_chassis := 25 ;
76393: LD_ADDR_OWVAR 37
76397: PUSH
76398: LD_INT 25
76400: ST_TO_ADDR
// vc_engine := engine_siberite ;
76401: LD_ADDR_OWVAR 39
76405: PUSH
76406: LD_INT 3
76408: ST_TO_ADDR
// vc_control := control_computer ;
76409: LD_ADDR_OWVAR 38
76413: PUSH
76414: LD_INT 3
76416: ST_TO_ADDR
// vc_weapon := 59 ;
76417: LD_ADDR_OWVAR 40
76421: PUSH
76422: LD_INT 59
76424: ST_TO_ADDR
// result := CreateVehicle ;
76425: LD_ADDR_VAR 0 5
76429: PUSH
76430: CALL_OW 45
76434: ST_TO_ADDR
// SetDir ( result , d ) ;
76435: LD_VAR 0 5
76439: PPUSH
76440: LD_VAR 0 4
76444: PPUSH
76445: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76449: LD_VAR 0 5
76453: PPUSH
76454: LD_VAR 0 2
76458: PPUSH
76459: LD_VAR 0 3
76463: PPUSH
76464: LD_INT 0
76466: PPUSH
76467: CALL_OW 48
// end ;
76471: LD_VAR 0 5
76475: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76476: LD_INT 0
76478: PPUSH
76479: PPUSH
76480: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76481: LD_ADDR_VAR 0 2
76485: PUSH
76486: LD_INT 0
76488: PUSH
76489: LD_INT 0
76491: PUSH
76492: LD_INT 0
76494: PUSH
76495: LD_INT 0
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76504: LD_VAR 0 1
76508: NOT
76509: PUSH
76510: LD_VAR 0 1
76514: PPUSH
76515: CALL_OW 264
76519: PUSH
76520: LD_INT 12
76522: PUSH
76523: LD_INT 51
76525: PUSH
76526: LD_INT 32
76528: PUSH
76529: LD_INT 89
76531: PUSH
76532: EMPTY
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: IN
76538: NOT
76539: OR
76540: IFFALSE 76544
// exit ;
76542: GO 76642
// for i := 1 to 3 do
76544: LD_ADDR_VAR 0 3
76548: PUSH
76549: DOUBLE
76550: LD_INT 1
76552: DEC
76553: ST_TO_ADDR
76554: LD_INT 3
76556: PUSH
76557: FOR_TO
76558: IFFALSE 76640
// begin tmp := GetCargo ( cargo , i ) ;
76560: LD_ADDR_VAR 0 4
76564: PUSH
76565: LD_VAR 0 1
76569: PPUSH
76570: LD_VAR 0 3
76574: PPUSH
76575: CALL_OW 289
76579: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76580: LD_ADDR_VAR 0 2
76584: PUSH
76585: LD_VAR 0 2
76589: PPUSH
76590: LD_VAR 0 3
76594: PPUSH
76595: LD_VAR 0 4
76599: PPUSH
76600: CALL_OW 1
76604: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76605: LD_ADDR_VAR 0 2
76609: PUSH
76610: LD_VAR 0 2
76614: PPUSH
76615: LD_INT 4
76617: PPUSH
76618: LD_VAR 0 2
76622: PUSH
76623: LD_INT 4
76625: ARRAY
76626: PUSH
76627: LD_VAR 0 4
76631: PLUS
76632: PPUSH
76633: CALL_OW 1
76637: ST_TO_ADDR
// end ;
76638: GO 76557
76640: POP
76641: POP
// end ;
76642: LD_VAR 0 2
76646: RET
// export function Length ( array ) ; begin
76647: LD_INT 0
76649: PPUSH
// result := array + 0 ;
76650: LD_ADDR_VAR 0 2
76654: PUSH
76655: LD_VAR 0 1
76659: PUSH
76660: LD_INT 0
76662: PLUS
76663: ST_TO_ADDR
// end ;
76664: LD_VAR 0 2
76668: RET
// export function PrepareArray ( array ) ; begin
76669: LD_INT 0
76671: PPUSH
// result := array diff 0 ;
76672: LD_ADDR_VAR 0 2
76676: PUSH
76677: LD_VAR 0 1
76681: PUSH
76682: LD_INT 0
76684: DIFF
76685: ST_TO_ADDR
// if not result [ 1 ] then
76686: LD_VAR 0 2
76690: PUSH
76691: LD_INT 1
76693: ARRAY
76694: NOT
76695: IFFALSE 76715
// result := Delete ( result , 1 ) ;
76697: LD_ADDR_VAR 0 2
76701: PUSH
76702: LD_VAR 0 2
76706: PPUSH
76707: LD_INT 1
76709: PPUSH
76710: CALL_OW 3
76714: ST_TO_ADDR
// end ;
76715: LD_VAR 0 2
76719: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76720: LD_INT 0
76722: PPUSH
76723: PPUSH
76724: PPUSH
76725: PPUSH
// sibRocketRange := 25 ;
76726: LD_ADDR_VAR 0 6
76730: PUSH
76731: LD_INT 25
76733: ST_TO_ADDR
// result := false ;
76734: LD_ADDR_VAR 0 4
76738: PUSH
76739: LD_INT 0
76741: ST_TO_ADDR
// for i := 0 to 5 do
76742: LD_ADDR_VAR 0 5
76746: PUSH
76747: DOUBLE
76748: LD_INT 0
76750: DEC
76751: ST_TO_ADDR
76752: LD_INT 5
76754: PUSH
76755: FOR_TO
76756: IFFALSE 76823
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76758: LD_VAR 0 1
76762: PPUSH
76763: LD_VAR 0 5
76767: PPUSH
76768: LD_VAR 0 6
76772: PPUSH
76773: CALL_OW 272
76777: PPUSH
76778: LD_VAR 0 2
76782: PPUSH
76783: LD_VAR 0 5
76787: PPUSH
76788: LD_VAR 0 6
76792: PPUSH
76793: CALL_OW 273
76797: PPUSH
76798: LD_VAR 0 3
76802: PPUSH
76803: CALL_OW 309
76807: IFFALSE 76821
// begin result := true ;
76809: LD_ADDR_VAR 0 4
76813: PUSH
76814: LD_INT 1
76816: ST_TO_ADDR
// exit ;
76817: POP
76818: POP
76819: GO 76825
// end ;
76821: GO 76755
76823: POP
76824: POP
// end ;
76825: LD_VAR 0 4
76829: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76830: LD_INT 0
76832: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76833: LD_VAR 0 1
76837: PPUSH
76838: LD_VAR 0 2
76842: PPUSH
76843: LD_INT 0
76845: PPUSH
76846: LD_INT 0
76848: PPUSH
76849: LD_INT 1
76851: PPUSH
76852: LD_INT 0
76854: PPUSH
76855: CALL_OW 587
// end ;
76859: LD_VAR 0 3
76863: RET
// export function CenterOnNow ( unit ) ; begin
76864: LD_INT 0
76866: PPUSH
// result := IsInUnit ( unit ) ;
76867: LD_ADDR_VAR 0 2
76871: PUSH
76872: LD_VAR 0 1
76876: PPUSH
76877: CALL_OW 310
76881: ST_TO_ADDR
// if not result then
76882: LD_VAR 0 2
76886: NOT
76887: IFFALSE 76899
// result := unit ;
76889: LD_ADDR_VAR 0 2
76893: PUSH
76894: LD_VAR 0 1
76898: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76899: LD_VAR 0 1
76903: PPUSH
76904: CALL_OW 87
// end ;
76908: LD_VAR 0 2
76912: RET
// export function ComMoveHex ( unit , hex ) ; begin
76913: LD_INT 0
76915: PPUSH
// if not hex then
76916: LD_VAR 0 2
76920: NOT
76921: IFFALSE 76925
// exit ;
76923: GO 76978
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76925: LD_VAR 0 2
76929: PUSH
76930: LD_INT 1
76932: ARRAY
76933: PPUSH
76934: LD_VAR 0 2
76938: PUSH
76939: LD_INT 2
76941: ARRAY
76942: PPUSH
76943: CALL_OW 428
76947: IFFALSE 76951
// exit ;
76949: GO 76978
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76951: LD_VAR 0 1
76955: PPUSH
76956: LD_VAR 0 2
76960: PUSH
76961: LD_INT 1
76963: ARRAY
76964: PPUSH
76965: LD_VAR 0 2
76969: PUSH
76970: LD_INT 2
76972: ARRAY
76973: PPUSH
76974: CALL_OW 111
// end ; end_of_file
76978: LD_VAR 0 3
76982: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76983: LD_VAR 0 1
76987: PUSH
76988: LD_INT 200
76990: DOUBLE
76991: GREATEREQUAL
76992: IFFALSE 77000
76994: LD_INT 299
76996: DOUBLE
76997: LESSEQUAL
76998: IFTRUE 77002
77000: GO 77034
77002: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77003: LD_VAR 0 1
77007: PPUSH
77008: LD_VAR 0 2
77012: PPUSH
77013: LD_VAR 0 3
77017: PPUSH
77018: LD_VAR 0 4
77022: PPUSH
77023: LD_VAR 0 5
77027: PPUSH
77028: CALL 31706 0 5
77032: GO 77111
77034: LD_INT 300
77036: DOUBLE
77037: GREATEREQUAL
77038: IFFALSE 77046
77040: LD_INT 399
77042: DOUBLE
77043: LESSEQUAL
77044: IFTRUE 77048
77046: GO 77110
77048: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77049: LD_VAR 0 1
77053: PPUSH
77054: LD_VAR 0 2
77058: PPUSH
77059: LD_VAR 0 3
77063: PPUSH
77064: LD_VAR 0 4
77068: PPUSH
77069: LD_VAR 0 5
77073: PPUSH
77074: LD_VAR 0 6
77078: PPUSH
77079: LD_VAR 0 7
77083: PPUSH
77084: LD_VAR 0 8
77088: PPUSH
77089: LD_VAR 0 9
77093: PPUSH
77094: LD_VAR 0 10
77098: PPUSH
77099: LD_VAR 0 11
77103: PPUSH
77104: CALL 28031 0 11
77108: GO 77111
77110: POP
// end ;
77111: PPOPN 11
77113: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77114: LD_VAR 0 1
77118: PPUSH
77119: LD_VAR 0 2
77123: PPUSH
77124: LD_VAR 0 3
77128: PPUSH
77129: LD_VAR 0 4
77133: PPUSH
77134: LD_VAR 0 5
77138: PPUSH
77139: CALL 31442 0 5
// end ; end_of_file
77143: PPOPN 5
77145: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77146: LD_VAR 0 1
77150: PPUSH
77151: LD_VAR 0 2
77155: PPUSH
77156: LD_VAR 0 3
77160: PPUSH
77161: LD_VAR 0 4
77165: PPUSH
77166: LD_VAR 0 5
77170: PPUSH
77171: LD_VAR 0 6
77175: PPUSH
77176: CALL 15683 0 6
// end ;
77180: PPOPN 6
77182: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77183: LD_INT 0
77185: PPUSH
// begin if not units then
77186: LD_VAR 0 1
77190: NOT
77191: IFFALSE 77195
// exit ;
77193: GO 77195
// end ;
77195: PPOPN 7
77197: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77198: CALL 15587 0 0
// end ;
77202: PPOPN 1
77204: END
