// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9511 0 0
// PrepareAlliance ;
  19: CALL 352 0 0
// PrepareFriends ;
  23: CALL 3821 0 0
// PrepareAmerican ;
  27: CALL 789 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 17
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 15
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9847 0 0
// PreparePatrol ;
 117: CALL 1413 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert , def_counter ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// def_counter := 0 ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// end ;
 251: LD_VAR 0 1
 255: RET
// every 0 0$1 trigger on_hill do
 256: LD_EXP 7
 260: IFFALSE 272
 262: GO 264
 264: DISABLE
// SetAchievement ( ACH_EYE ) ;
 265: LD_STRING ACH_EYE
 267: PPUSH
 268: CALL_OW 543
 272: END
// every 0 0$1 trigger not invis_used do var i ;
 273: LD_EXP 12
 277: NOT
 278: IFFALSE 349
 280: GO 282
 282: DISABLE
 283: LD_INT 0
 285: PPUSH
// begin enable ;
 286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 287: LD_ADDR_VAR 0 1
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_INT 7
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 21
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 347
// if IsInvisible ( i ) then
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 571
 333: IFFALSE 345
// begin invis_used := true ;
 335: LD_ADDR_EXP 12
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// break ;
 343: GO 347
// end ;
 345: GO 321
 347: POP
 348: POP
// end ; end_of_file
 349: PPOPN 1
 351: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 352: LD_INT 0
 354: PPUSH
 355: PPUSH
// uc_side := 7 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 7
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 372: LD_ADDR_EXP 15
 376: PUSH
 377: LD_STRING JMM
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: LD_STRING 11_
 388: PPUSH
 389: CALL 36109 0 3
 393: ST_TO_ADDR
// uc_side := 4 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 4
 401: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Roth
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 415: LD_EXP 15
 419: PPUSH
 420: LD_INT 1
 422: PPUSH
 423: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 427: LD_EXP 15
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 439: LD_EXP 15
 443: PPUSH
 444: LD_INT 105
 446: PPUSH
 447: LD_INT 10
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 457: LD_EXP 16
 461: PPUSH
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 469: LD_EXP 16
 473: PPUSH
 474: LD_INT 109
 476: PPUSH
 477: LD_INT 10
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 16
 496: PPUSH
 497: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 501: LD_EXP 16
 505: PPUSH
 506: LD_EXP 15
 510: PPUSH
 511: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 515: LD_INT 3
 517: PPUSH
 518: LD_INT 3
 520: PPUSH
 521: LD_INT 3
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: LD_INT 100
 529: PPUSH
 530: CALL 40949 0 5
// cargo := CreateVehicle ;
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: CALL_OW 45
 543: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 556: LD_VAR 0 2
 560: PPUSH
 561: LD_INT 179
 563: PPUSH
 564: LD_INT 45
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 4
 581: PPUSH
 582: LD_INT 30
 584: PPUSH
 585: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 589: LD_STRING 11_artifact_captured
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: IFFALSE 656
// begin cargo := CreateVehicle ;
 601: LD_ADDR_VAR 0 2
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 171
 630: PPUSH
 631: LD_INT 85
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 641: LD_VAR 0 2
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 50
 651: PPUSH
 652: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 656: LD_INT 47
 658: PPUSH
 659: LD_INT 7
 661: PPUSH
 662: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 666: LD_INT 1
 668: PPUSH
 669: LD_INT 47
 671: PPUSH
 672: CALL_OW 471
// end ;
 676: LD_VAR 0 1
 680: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 681: LD_INT 38
 683: PPUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 7
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 70
 698: PUSH
 699: LD_EXP 7
 703: NOT
 704: AND
 705: IFFALSE 736
 707: GO 709
 709: DISABLE
// begin enable ;
 710: ENABLE
// on_hill := true ;
 711: LD_ADDR_EXP 7
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 719: LD_INT 126
 721: PPUSH
 722: LD_INT 13
 724: PPUSH
 725: LD_INT 7
 727: PPUSH
 728: LD_INT 90
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 22
 742: PUSH
 743: LD_INT 7
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 70
 754: NOT
 755: PUSH
 756: LD_EXP 7
 760: AND
 761: IFFALSE 788
 763: GO 765
 765: DISABLE
// begin enable ;
 766: ENABLE
// on_hill := false ;
 767: LD_ADDR_EXP 7
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 775: LD_INT 126
 777: PPUSH
 778: LD_INT 13
 780: PPUSH
 781: LD_INT 7
 783: PPUSH
 784: CALL_OW 331
// end ; end_of_file
 788: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 789: LD_INT 0
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
 795: PPUSH
 796: PPUSH
// if Difficulty = 1 then
 797: LD_OWVAR 67
 801: PUSH
 802: LD_INT 1
 804: EQUAL
 805: IFFALSE 913
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 807: LD_ADDR_VAR 0 6
 811: PUSH
 812: LD_INT 155
 814: PUSH
 815: LD_INT 77
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 193
 824: PUSH
 825: LD_INT 93
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 188
 834: PUSH
 835: LD_INT 81
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 56
 844: PUSH
 845: LD_INT 85
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 98
 854: PUSH
 855: LD_INT 87
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: ST_TO_ADDR
// for i in tmp do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 6
 878: PUSH
 879: FOR_IN
 880: IFFALSE 911
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 882: LD_VAR 0 2
 886: PUSH
 887: LD_INT 1
 889: ARRAY
 890: PPUSH
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 2
 898: ARRAY
 899: PPUSH
 900: CALL_OW 428
 904: PPUSH
 905: CALL_OW 64
 909: GO 879
 911: POP
 912: POP
// end ; defcon := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defcon_wave := 0 ;
 921: LD_ADDR_EXP 23
 925: PUSH
 926: LD_INT 0
 928: ST_TO_ADDR
// defenders := [ ] ;
 929: LD_ADDR_EXP 21
 933: PUSH
 934: EMPTY
 935: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 936: LD_INT 5
 938: PPUSH
 939: LD_STRING alfa
 941: PPUSH
 942: CALL_OW 500
// uc_side := 1 ;
 946: LD_ADDR_OWVAR 20
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// uc_nation := 1 ;
 954: LD_ADDR_OWVAR 21
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 962: LD_ADDR_EXP 17
 966: PUSH
 967: LD_STRING Powell
 969: PPUSH
 970: CALL_OW 25
 974: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 975: LD_EXP 17
 979: PPUSH
 980: LD_INT 110
 982: PPUSH
 983: LD_INT 26
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 48
// ComHold ( Powell ) ;
 993: LD_EXP 17
 997: PPUSH
 998: CALL_OW 140
// for i := 1 to 5 do
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: DOUBLE
1008: LD_INT 1
1010: DEC
1011: ST_TO_ADDR
1012: LD_INT 5
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1072
// begin PrepareHuman ( false , 1 , 10 ) ;
1018: LD_INT 0
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1031: LD_ADDR_EXP 20
1035: PUSH
1036: LD_EXP 20
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: CALL_OW 44
1048: PPUSH
1049: CALL_OW 2
1053: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1054: LD_EXP 20
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_INT 18
1065: PPUSH
1066: CALL_OW 52
// end ;
1070: GO 1015
1072: POP
1073: POP
// if Difficulty > 1 then
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: GREATER
1082: IFFALSE 1233
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1084: LD_ADDR_VAR 0 6
1088: PUSH
1089: LD_INT 81
1091: PUSH
1092: LD_INT 33
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 134
1101: PUSH
1102: LD_INT 114
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 193
1111: PUSH
1112: LD_INT 102
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: DOUBLE
1130: LD_INT 1
1132: DEC
1133: ST_TO_ADDR
1134: LD_OWVAR 67
1138: PUSH
1139: LD_INT 1
1141: MINUS
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1231
// begin PrepareSoldier ( false , 10 ) ;
1146: LD_INT 0
1148: PPUSH
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 381
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1166: LD_VAR 0 5
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1178: LD_VAR 0 5
1182: PPUSH
1183: LD_VAR 0 6
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 6
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PUSH
1209: LD_INT 2
1211: ARRAY
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// ComHold ( un ) ;
1220: LD_VAR 0 5
1224: PPUSH
1225: CALL_OW 140
// end ;
1229: GO 1143
1231: POP
1232: POP
// end ; if Difficulty > 2 then
1233: LD_OWVAR 67
1237: PUSH
1238: LD_INT 2
1240: GREATER
1241: IFFALSE 1290
// begin bc_type := b_turret ;
1243: LD_ADDR_OWVAR 42
1247: PUSH
1248: LD_INT 33
1250: ST_TO_ADDR
// bc_level := 7 ;
1251: LD_ADDR_OWVAR 43
1255: PUSH
1256: LD_INT 7
1258: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_INT 107
1266: PPUSH
1267: LD_INT 55
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 47
1277: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1278: LD_VAR 0 4
1282: PPUSH
1283: LD_INT 7
1285: PPUSH
1286: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1290: LD_ADDR_VAR 0 2
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 3
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: PUSH
1324: LD_INT 22
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: LD_INT 30
1336: PUSH
1337: LD_INT 36
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 69
1352: ADD
1353: PUSH
1354: FOR_IN
1355: IFFALSE 1406
// for j = 1 to 3 do
1357: LD_ADDR_VAR 0 3
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_INT 3
1369: PUSH
1370: FOR_TO
1371: IFFALSE 1402
// begin PrepareHuman ( false , 3 , 6 ) ;
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 6
1381: PPUSH
1382: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1386: CALL_OW 44
1390: PPUSH
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: GO 1370
1402: POP
1403: POP
1404: GO 1354
1406: POP
1407: POP
// end ;
1408: LD_VAR 0 1
1412: RET
// export function PreparePatrol ; var i , un ; begin
1413: LD_INT 0
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_side := 1 ;
1418: LD_ADDR_OWVAR 20
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_nation := 1 ;
1426: LD_ADDR_OWVAR 21
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1434: LD_ADDR_EXP 19
1438: PUSH
1439: LD_INT 99
1441: PUSH
1442: LD_INT 55
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 113
1451: PUSH
1452: LD_INT 67
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 129
1461: PUSH
1462: LD_INT 68
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 135
1471: PUSH
1472: LD_INT 62
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 103
1481: PUSH
1482: LD_INT 41
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 27
1498: PUSH
1499: LD_INT 49
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 46
1508: PUSH
1509: LD_INT 49
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: LD_INT 87
1518: PUSH
1519: LD_INT 70
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 99
1528: PUSH
1529: LD_INT 79
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 118
1538: PUSH
1539: LD_INT 111
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 99
1548: PUSH
1549: LD_INT 79
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 87
1558: PUSH
1559: LD_INT 70
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 46
1568: PUSH
1569: LD_INT 49
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 200
1588: PUSH
1589: LD_INT 88
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 175
1598: PUSH
1599: LD_INT 80
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 135
1608: PUSH
1609: LD_INT 62
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 117
1618: PUSH
1619: LD_INT 53
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 103
1628: PUSH
1629: LD_INT 41
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 99
1638: PUSH
1639: LD_INT 24
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 85
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 99
1658: PUSH
1659: LD_INT 24
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 103
1668: PUSH
1669: LD_INT 41
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 98
1678: PUSH
1679: LD_INT 47
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 99
1688: PUSH
1689: LD_INT 56
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 96
1698: PUSH
1699: LD_INT 66
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 99
1708: PUSH
1709: LD_INT 56
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 112
1718: PUSH
1719: LD_INT 66
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 129
1728: PUSH
1729: LD_INT 68
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 135
1738: PUSH
1739: LD_INT 62
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 156
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 168
1758: PUSH
1759: LD_INT 76
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 168
1768: PUSH
1769: LD_INT 61
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 168
1778: PUSH
1779: LD_INT 75
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 185
1788: PUSH
1789: LD_INT 85
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// mobile_patrol := [ ] ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: EMPTY
1830: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1831: LD_INT 3
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: LD_INT 3
1839: PPUSH
1840: LD_INT 4
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL 40949 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1850: LD_ADDR_EXP 18
1854: PUSH
1855: LD_EXP 18
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 45
1867: PPUSH
1868: CALL_OW 2
1872: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1873: LD_EXP 18
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: LD_INT 99
1884: PPUSH
1885: LD_INT 55
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1895: LD_INT 2
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 3
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 100
1909: PPUSH
1910: CALL 40949 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_EXP 18
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: CALL_OW 45
1931: PPUSH
1932: CALL_OW 2
1936: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1937: LD_EXP 18
1941: PUSH
1942: LD_INT 2
1944: ARRAY
1945: PPUSH
1946: LD_INT 27
1948: PPUSH
1949: LD_INT 49
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1959: LD_INT 3
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: LD_INT 9
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 7
1976: PUSH
1977: LD_INT 7
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: LD_OWVAR 67
1990: ARRAY
1991: PPUSH
1992: LD_INT 100
1994: PPUSH
1995: CALL 40949 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1999: LD_ADDR_EXP 18
2003: PUSH
2004: LD_EXP 18
2008: PPUSH
2009: LD_INT 3
2011: PPUSH
2012: CALL_OW 45
2016: PPUSH
2017: CALL_OW 2
2021: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2022: LD_EXP 18
2026: PUSH
2027: LD_INT 3
2029: ARRAY
2030: PPUSH
2031: LD_INT 200
2033: PPUSH
2034: LD_INT 88
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 48
// for i := mobile_patrol downto 1 do
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: DOUBLE
2050: LD_EXP 18
2054: INC
2055: ST_TO_ADDR
2056: LD_INT 1
2058: PUSH
2059: FOR_DOWNTO
2060: IFFALSE 2071
// RaiseSailEvent ( 1 ) ;
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 427
2069: GO 2059
2071: POP
2072: POP
// end ;
2073: LD_VAR 0 1
2077: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2088: LD_ADDR_VAR 0 5
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 21
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 22
2115: PUSH
2116: LD_INT 1
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2128: LD_ADDR_VAR 0 6
2132: PUSH
2133: LD_INT 176
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 135
2141: PUSH
2142: LD_INT 62
2144: PUSH
2145: LD_INT 114
2147: PUSH
2148: LD_INT 67
2150: PUSH
2151: LD_INT 93
2153: PUSH
2154: LD_INT 71
2156: PUSH
2157: LD_INT 76
2159: PUSH
2160: LD_INT 67
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 107
2177: PUSH
2178: LD_INT 92
2180: PUSH
2181: LD_INT 92
2183: PUSH
2184: LD_INT 72
2186: PUSH
2187: LD_INT 77
2189: PUSH
2190: LD_INT 68
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 45
2203: PUSH
2204: LD_INT 49
2206: PUSH
2207: LD_INT 67
2209: PUSH
2210: LD_INT 59
2212: PUSH
2213: LD_INT 77
2215: PUSH
2216: LD_INT 68
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2232: LD_ADDR_VAR 0 4
2236: PUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_VAR 0 5
2244: PPUSH
2245: CALL_OW 12
2249: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 2
2260: PPUSH
2261: CALL_OW 12
2265: ST_TO_ADDR
// uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2282: LD_INT 2
2284: PPUSH
2285: LD_INT 3
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: LD_INT 12
2293: PPUSH
2294: LD_INT 100
2296: PPUSH
2297: CALL 40949 0 5
// veh := CreateVehicle ;
2301: LD_ADDR_VAR 0 8
2305: PUSH
2306: CALL_OW 45
2310: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2311: LD_VAR 0 8
2315: PPUSH
2316: LD_VAR 0 5
2320: PUSH
2321: LD_VAR 0 4
2325: ARRAY
2326: PUSH
2327: LD_INT 2
2329: ARRAY
2330: PPUSH
2331: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2335: LD_VAR 0 8
2339: PPUSH
2340: LD_VAR 0 5
2344: PUSH
2345: LD_VAR 0 4
2349: ARRAY
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2362: LD_VAR 0 8
2366: PPUSH
2367: LD_INT 1
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_VAR 0 3
2381: ARRAY
2382: PPUSH
2383: LD_INT 100
2385: PPUSH
2386: CALL_OW 290
// tmp := road [ k ] ;
2390: LD_ADDR_VAR 0 7
2394: PUSH
2395: LD_VAR 0 6
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_VAR 0 7
2420: PUSH
2421: LD_INT 2
2423: DIV
2424: PUSH
2425: FOR_TO
2426: IFFALSE 2473
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 7
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_INT 2
2445: MUL
2446: PUSH
2447: LD_INT 1
2449: MINUS
2450: ARRAY
2451: PPUSH
2452: LD_VAR 0 7
2456: PUSH
2457: LD_VAR 0 2
2461: PUSH
2462: LD_INT 2
2464: MUL
2465: ARRAY
2466: PPUSH
2467: CALL_OW 171
2471: GO 2425
2473: POP
2474: POP
// AddComGive ( veh , alfa ) ;
2475: LD_VAR 0 8
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2487: LD_VAR 0 8
2491: PPUSH
2492: LD_INT 70
2494: PPUSH
2495: CALL_OW 202
// for i = tmp div 2 downto 1 do
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: DOUBLE
2505: LD_VAR 0 7
2509: PUSH
2510: LD_INT 2
2512: DIV
2513: INC
2514: ST_TO_ADDR
2515: LD_INT 1
2517: PUSH
2518: FOR_DOWNTO
2519: IFFALSE 2566
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2521: LD_VAR 0 8
2525: PPUSH
2526: LD_VAR 0 7
2530: PUSH
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 2
2538: MUL
2539: PUSH
2540: LD_INT 1
2542: MINUS
2543: ARRAY
2544: PPUSH
2545: LD_VAR 0 7
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_INT 2
2557: MUL
2558: ARRAY
2559: PPUSH
2560: CALL_OW 171
2564: GO 2518
2566: POP
2567: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2568: LD_VAR 0 8
2572: PPUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_VAR 0 4
2582: ARRAY
2583: PUSH
2584: LD_INT 1
2586: ARRAY
2587: PPUSH
2588: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2592: LD_INT 35
2594: PPUSH
2595: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2599: LD_VAR 0 8
2603: PPUSH
2604: LD_VAR 0 5
2608: PUSH
2609: LD_VAR 0 4
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_VAR 0 8
2628: PPUSH
2629: LD_VAR 0 3
2633: PPUSH
2634: CALL_OW 289
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: AND
2643: IFFALSE 2592
// RemoveUnit ( veh ) ;
2645: LD_VAR 0 8
2649: PPUSH
2650: CALL_OW 64
// end ;
2654: LD_VAR 0 1
2658: RET
// every 3 3$00 do
2659: GO 2661
2661: DISABLE
// begin enable ;
2662: ENABLE
// SpawnCargo ;
2663: CALL 2078 0 0
// end ;
2667: END
// export function PrepareDefenders ; var i , tmp ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
// if defenders then
2673: LD_EXP 21
2677: IFFALSE 2681
// exit ;
2679: GO 2953
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2681: LD_ADDR_VAR 0 2
2685: PUSH
2686: DOUBLE
2687: LD_INT 1
2689: DEC
2690: ST_TO_ADDR
2691: LD_INT 4
2693: PUSH
2694: LD_INT 5
2696: PUSH
2697: LD_INT 6
2699: PUSH
2700: LD_INT 7
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2855
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 6
2725: PPUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: CALL_OW 12
2746: ARRAY
2747: PPUSH
2748: LD_INT 1
2750: PUSH
2751: LD_INT 3
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 1
2760: PPUSH
2761: LD_INT 2
2763: PPUSH
2764: CALL_OW 12
2768: ARRAY
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: LD_INT 9
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 1
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: CALL_OW 12
2797: ARRAY
2798: PPUSH
2799: CALL 38569 0 5
2803: ST_TO_ADDR
// if tmp then
2804: LD_VAR 0 3
2808: IFFALSE 2853
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2810: LD_INT 6
2812: PPUSH
2813: LD_VAR 0 3
2817: PUSH
2818: LD_INT 1
2820: ARRAY
2821: PPUSH
2822: LD_VAR 0 3
2826: PUSH
2827: LD_INT 2
2829: ARRAY
2830: PPUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_INT 3
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 3
2844: PUSH
2845: LD_INT 4
2847: ARRAY
2848: PPUSH
2849: CALL_OW 185
// end ;
2853: GO 2715
2855: POP
2856: POP
// repeat wait ( 0 0$1 ) ;
2857: LD_INT 35
2859: PPUSH
2860: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 33
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_INT 4
2895: PUSH
2896: LD_INT 5
2898: PUSH
2899: LD_INT 6
2901: PUSH
2902: LD_INT 7
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_OWVAR 67
2915: ARRAY
2916: GREATEREQUAL
2917: IFFALSE 2857
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2919: LD_ADDR_EXP 21
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 1
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 33
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: ST_TO_ADDR
// end ;
2953: LD_VAR 0 1
2957: RET
// export function Defend ; var i , un , veh , tmp ; begin
2958: LD_INT 0
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
// defcon_wave := defcon_wave + 1 ;
2965: LD_ADDR_EXP 23
2969: PUSH
2970: LD_EXP 23
2974: PUSH
2975: LD_INT 1
2977: PLUS
2978: ST_TO_ADDR
// if not defenders then
2979: LD_EXP 21
2983: NOT
2984: IFFALSE 2990
// PrepareDefenders ;
2986: CALL 2668 0 0
// if defcon_wave > 1 then
2990: LD_EXP 23
2994: PUSH
2995: LD_INT 1
2997: GREATER
2998: IFFALSE 3256
// begin for i = 1 to defcon_wave + 2 do
3000: LD_ADDR_VAR 0 2
3004: PUSH
3005: DOUBLE
3006: LD_INT 1
3008: DEC
3009: ST_TO_ADDR
3010: LD_EXP 23
3014: PUSH
3015: LD_INT 2
3017: PLUS
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3162
// begin uc_side := 1 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// uc_nation := 1 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 1
3037: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 3
3043: PPUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: LD_INT 7
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: CALL_OW 12
3071: ARRAY
3072: PPUSH
3073: LD_INT 100
3075: PPUSH
3076: CALL 40949 0 5
// veh := CreateVehicle ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: CALL_OW 45
3089: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 233
// defenders := defenders ^ veh ;
3102: LD_ADDR_EXP 21
3106: PUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_VAR 0 4
3116: ADD
3117: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3118: LD_INT 0
3120: PPUSH
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 9
3126: PPUSH
3127: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3131: CALL_OW 44
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 25
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL_OW 49
// end ;
3160: GO 3019
3162: POP
3163: POP
// for i = 1 to defcon_wave do
3164: LD_ADDR_VAR 0 2
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_EXP 23
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3254
// begin uc_side := 1 ;
3182: LD_ADDR_OWVAR 20
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// uc_nation := 1 ;
3190: LD_ADDR_OWVAR 21
3194: PUSH
3195: LD_INT 1
3197: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 5
3203: PPUSH
3204: LD_INT 9
3206: PPUSH
3207: CALL_OW 380
// un := CreateHuman ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: CALL_OW 44
3220: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3221: LD_VAR 0 3
3225: PPUSH
3226: LD_INT 25
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
// defenders := defenders ^ un ;
3236: LD_ADDR_EXP 21
3240: PUSH
3241: LD_EXP 21
3245: PUSH
3246: LD_VAR 0 3
3250: ADD
3251: ST_TO_ADDR
// end ;
3252: GO 3179
3254: POP
3255: POP
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// for i in defenders do
3263: LD_ADDR_VAR 0 2
3267: PUSH
3268: LD_EXP 21
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3356
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3276: LD_EXP 22
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_EXP 22
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: LD_EXP 22
3299: PUSH
3300: LD_INT 2
3302: ARRAY
3303: PPUSH
3304: CALL_OW 297
3308: PUSH
3309: LD_INT 10
3311: GREATER
3312: AND
3313: PUSH
3314: LD_VAR 0 2
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: AND
3325: IFFALSE 3354
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_EXP 22
3336: PUSH
3337: LD_INT 1
3339: ARRAY
3340: PPUSH
3341: LD_EXP 22
3345: PUSH
3346: LD_INT 2
3348: ARRAY
3349: PPUSH
3350: CALL_OW 114
// end ;
3354: GO 3273
3356: POP
3357: POP
// until not defenders ;
3358: LD_EXP 21
3362: NOT
3363: IFFALSE 3256
// end ;
3365: LD_VAR 0 1
3369: RET
// every 0 0$1 do var radar , i ;
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
// begin uc_side := 1 ;
3377: LD_ADDR_OWVAR 20
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// uc_nation := 1 ;
3385: LD_ADDR_OWVAR 21
3389: PUSH
3390: LD_INT 1
3392: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3393: LD_INT 1
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: LD_INT 11
3404: PPUSH
3405: LD_INT 100
3407: PPUSH
3408: CALL 40949 0 5
// radar := CreateVehicle ;
3412: LD_ADDR_VAR 0 1
3416: PUSH
3417: CALL_OW 45
3421: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3434: LD_VAR 0 1
3438: PPUSH
3439: LD_INT 51
3441: PPUSH
3442: LD_INT 45
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: LD_INT 700
3459: PPUSH
3460: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 75
3474: PPUSH
3475: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 350
3486: PPUSH
3487: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 83
3498: PPUSH
3499: LD_INT 87
3501: PPUSH
3502: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 525
3513: PPUSH
3514: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 94
3525: PPUSH
3526: LD_INT 81
3528: PPUSH
3529: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3533: LD_VAR 0 1
3537: PPUSH
3538: LD_INT 350
3540: PPUSH
3541: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3545: LD_VAR 0 1
3549: PPUSH
3550: LD_INT 55
3552: PPUSH
3553: LD_INT 48
3555: PPUSH
3556: CALL_OW 171
// wait ( 1 1$00 ) ;
3560: LD_INT 2100
3562: PPUSH
3563: CALL_OW 67
// until not IsOk ( radar ) ;
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 302
3576: NOT
3577: IFFALSE 3452
// end ;
3579: PPOPN 2
3581: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3582: LD_OWVAR 67
3586: PUSH
3587: LD_INT 1
3589: GREATER
3590: PUSH
3591: LD_EXP 11
3595: AND
3596: IFFALSE 3818
3598: GO 3600
3600: DISABLE
3601: LD_INT 0
3603: PPUSH
// begin enable ;
3604: ENABLE
// uc_side := 1 ;
3605: LD_ADDR_OWVAR 20
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// uc_nation := 1 ;
3613: LD_ADDR_OWVAR 21
3617: PUSH
3618: LD_INT 1
3620: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3621: LD_INT 5
3623: PPUSH
3624: LD_INT 3
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 100
3635: PPUSH
3636: CALL 40949 0 5
// un := CreateVehicle ;
3640: LD_ADDR_VAR 0 1
3644: PUSH
3645: CALL_OW 45
3649: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 3
3657: PPUSH
3658: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3662: LD_VAR 0 1
3666: PPUSH
3667: LD_INT 155
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 0
3675: PPUSH
3676: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3680: LD_VAR 0 1
3684: PPUSH
3685: LD_INT 169
3687: PPUSH
3688: LD_INT 77
3690: PPUSH
3691: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: LD_INT 70
3702: PPUSH
3703: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3707: LD_VAR 0 1
3711: PPUSH
3712: LD_INT 134
3714: PPUSH
3715: LD_INT 62
3717: PPUSH
3718: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_INT 103
3729: PPUSH
3730: LD_INT 42
3732: PPUSH
3733: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3737: LD_VAR 0 1
3741: PPUSH
3742: LD_INT 70
3744: PPUSH
3745: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3749: LD_VAR 0 1
3753: PPUSH
3754: LD_INT 84
3756: PPUSH
3757: LD_INT 2
3759: PPUSH
3760: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3764: LD_INT 35
3766: PPUSH
3767: CALL_OW 67
// if IsDead ( un ) then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 301
3780: IFFALSE 3792
// begin extra_patrol := false ;
3782: LD_ADDR_EXP 11
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// exit ;
3790: GO 3818
// end ; until IsAt ( un , 84 , 2 ) ;
3792: LD_VAR 0 1
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 2
3802: PPUSH
3803: CALL_OW 307
3807: IFFALSE 3764
// RemoveUnit ( un ) ;
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 64
// end ; end_of_file
3818: PPOPN 1
3820: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3821: LD_INT 0
3823: PPUSH
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// uc_side := 4 ;
3831: LD_ADDR_OWVAR 20
3835: PUSH
3836: LD_INT 4
3838: ST_TO_ADDR
// uc_nation := 1 ;
3839: LD_ADDR_OWVAR 21
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3847: LD_ADDR_EXP 38
3851: PUSH
3852: LD_STRING DeltaDoctor
3854: PPUSH
3855: LD_EXP 1
3859: NOT
3860: PPUSH
3861: LD_STRING 10c_
3863: PPUSH
3864: CALL 36109 0 3
3868: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3869: LD_ADDR_EXP 37
3873: PUSH
3874: LD_STRING Joan
3876: PPUSH
3877: LD_EXP 1
3881: NOT
3882: PPUSH
3883: LD_STRING 10c_
3885: PPUSH
3886: CALL 36109 0 3
3890: ST_TO_ADDR
// if Joan then
3891: LD_EXP 37
3895: IFFALSE 3926
// friends := Insert ( friends , friends + 1 , Joan ) ;
3897: LD_ADDR_EXP 4
3901: PUSH
3902: LD_EXP 4
3906: PPUSH
3907: LD_EXP 4
3911: PUSH
3912: LD_INT 1
3914: PLUS
3915: PPUSH
3916: LD_EXP 37
3920: PPUSH
3921: CALL_OW 2
3925: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3926: LD_ADDR_EXP 36
3930: PUSH
3931: LD_STRING Simms
3933: PPUSH
3934: LD_EXP 1
3938: NOT
3939: PPUSH
3940: LD_STRING 10c_
3942: PPUSH
3943: CALL 36109 0 3
3947: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3948: LD_ADDR_EXP 35
3952: PUSH
3953: LD_STRING Kikuchi
3955: PPUSH
3956: LD_EXP 1
3960: NOT
3961: PPUSH
3962: LD_STRING 11_
3964: PPUSH
3965: CALL 36109 0 3
3969: ST_TO_ADDR
// if Kikuchi then
3970: LD_EXP 35
3974: IFFALSE 4005
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3976: LD_ADDR_EXP 4
3980: PUSH
3981: LD_EXP 4
3985: PPUSH
3986: LD_EXP 4
3990: PUSH
3991: LD_INT 1
3993: PLUS
3994: PPUSH
3995: LD_EXP 35
3999: PPUSH
4000: CALL_OW 2
4004: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
4005: LD_ADDR_EXP 34
4009: PUSH
4010: LD_STRING Frank
4012: PPUSH
4013: LD_EXP 1
4017: NOT
4018: PPUSH
4019: LD_STRING 11_
4021: PPUSH
4022: CALL 36109 0 3
4026: ST_TO_ADDR
// if Frank then
4027: LD_EXP 34
4031: IFFALSE 4062
// friends := Insert ( friends , friends + 1 , Frank ) ;
4033: LD_ADDR_EXP 4
4037: PUSH
4038: LD_EXP 4
4042: PPUSH
4043: LD_EXP 4
4047: PUSH
4048: LD_INT 1
4050: PLUS
4051: PPUSH
4052: LD_EXP 34
4056: PPUSH
4057: CALL_OW 2
4061: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4062: LD_ADDR_EXP 33
4066: PUSH
4067: LD_STRING Gary
4069: PPUSH
4070: LD_EXP 1
4074: NOT
4075: PPUSH
4076: LD_STRING 11_
4078: PPUSH
4079: CALL 36109 0 3
4083: ST_TO_ADDR
// if Gary then
4084: LD_EXP 33
4088: IFFALSE 4119
// friends := Insert ( friends , friends + 1 , Gary ) ;
4090: LD_ADDR_EXP 4
4094: PUSH
4095: LD_EXP 4
4099: PPUSH
4100: LD_EXP 4
4104: PUSH
4105: LD_INT 1
4107: PLUS
4108: PPUSH
4109: LD_EXP 33
4113: PPUSH
4114: CALL_OW 2
4118: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4119: LD_ADDR_EXP 32
4123: PUSH
4124: LD_STRING Cornell
4126: PPUSH
4127: LD_EXP 1
4131: NOT
4132: PPUSH
4133: LD_STRING 11_
4135: PPUSH
4136: CALL 36109 0 3
4140: ST_TO_ADDR
// if Cornel then
4141: LD_EXP 32
4145: IFFALSE 4176
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4147: LD_ADDR_EXP 4
4151: PUSH
4152: LD_EXP 4
4156: PPUSH
4157: LD_EXP 4
4161: PUSH
4162: LD_INT 1
4164: PLUS
4165: PPUSH
4166: LD_EXP 32
4170: PPUSH
4171: CALL_OW 2
4175: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4176: LD_ADDR_EXP 31
4180: PUSH
4181: LD_STRING Houten
4183: PPUSH
4184: LD_EXP 1
4188: NOT
4189: PPUSH
4190: LD_STRING 11_
4192: PPUSH
4193: CALL 36109 0 3
4197: ST_TO_ADDR
// if Houten then
4198: LD_EXP 31
4202: IFFALSE 4233
// friends := Insert ( friends , friends + 1 , Houten ) ;
4204: LD_ADDR_EXP 4
4208: PUSH
4209: LD_EXP 4
4213: PPUSH
4214: LD_EXP 4
4218: PUSH
4219: LD_INT 1
4221: PLUS
4222: PPUSH
4223: LD_EXP 31
4227: PPUSH
4228: CALL_OW 2
4232: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4233: LD_ADDR_EXP 30
4237: PUSH
4238: LD_STRING Gladstone
4240: PPUSH
4241: LD_EXP 1
4245: NOT
4246: PPUSH
4247: LD_STRING 11_
4249: PPUSH
4250: CALL 36109 0 3
4254: ST_TO_ADDR
// if Gladstone then
4255: LD_EXP 30
4259: IFFALSE 4290
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4261: LD_ADDR_EXP 4
4265: PUSH
4266: LD_EXP 4
4270: PPUSH
4271: LD_EXP 4
4275: PUSH
4276: LD_INT 1
4278: PLUS
4279: PPUSH
4280: LD_EXP 30
4284: PPUSH
4285: CALL_OW 2
4289: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4290: LD_ADDR_EXP 24
4294: PUSH
4295: LD_STRING Lisa
4297: PPUSH
4298: LD_EXP 1
4302: NOT
4303: PPUSH
4304: LD_STRING 11_
4306: PPUSH
4307: CALL 36109 0 3
4311: ST_TO_ADDR
// if Lisa then
4312: LD_EXP 24
4316: IFFALSE 4341
// friends := Insert ( friends , 1 , Lisa ) ;
4318: LD_ADDR_EXP 4
4322: PUSH
4323: LD_EXP 4
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: LD_EXP 24
4335: PPUSH
4336: CALL_OW 2
4340: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4341: LD_ADDR_EXP 25
4345: PUSH
4346: LD_STRING Donaldson
4348: PPUSH
4349: LD_EXP 1
4353: NOT
4354: PPUSH
4355: LD_STRING 11_
4357: PPUSH
4358: CALL 36109 0 3
4362: ST_TO_ADDR
// if Donaldson then
4363: LD_EXP 25
4367: IFFALSE 4398
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4369: LD_ADDR_EXP 4
4373: PUSH
4374: LD_EXP 4
4378: PPUSH
4379: LD_EXP 4
4383: PUSH
4384: LD_INT 1
4386: PLUS
4387: PPUSH
4388: LD_EXP 25
4392: PPUSH
4393: CALL_OW 2
4397: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4398: LD_ADDR_EXP 26
4402: PUSH
4403: LD_STRING Bobby
4405: PPUSH
4406: LD_EXP 1
4410: NOT
4411: PPUSH
4412: LD_STRING 11_
4414: PPUSH
4415: CALL 36109 0 3
4419: ST_TO_ADDR
// if Bobby then
4420: LD_EXP 26
4424: IFFALSE 4455
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4426: LD_ADDR_EXP 4
4430: PUSH
4431: LD_EXP 4
4435: PPUSH
4436: LD_EXP 4
4440: PUSH
4441: LD_INT 1
4443: PLUS
4444: PPUSH
4445: LD_EXP 26
4449: PPUSH
4450: CALL_OW 2
4454: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4455: LD_ADDR_EXP 27
4459: PUSH
4460: LD_STRING Cyrus
4462: PPUSH
4463: LD_EXP 1
4467: NOT
4468: PPUSH
4469: LD_STRING 11_
4471: PPUSH
4472: CALL 36109 0 3
4476: ST_TO_ADDR
// if Cyrus then
4477: LD_EXP 27
4481: IFFALSE 4512
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4483: LD_ADDR_EXP 4
4487: PUSH
4488: LD_EXP 4
4492: PPUSH
4493: LD_EXP 4
4497: PUSH
4498: LD_INT 1
4500: PLUS
4501: PPUSH
4502: LD_EXP 27
4506: PPUSH
4507: CALL_OW 2
4511: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4512: LD_ADDR_EXP 28
4516: PUSH
4517: LD_STRING Denis
4519: PPUSH
4520: LD_EXP 1
4524: NOT
4525: PPUSH
4526: LD_STRING 11_
4528: PPUSH
4529: CALL 36109 0 3
4533: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4534: LD_ADDR_EXP 29
4538: PUSH
4539: LD_STRING Brown
4541: PPUSH
4542: LD_EXP 1
4546: NOT
4547: PPUSH
4548: LD_STRING 11_
4550: PPUSH
4551: CALL 36109 0 3
4555: ST_TO_ADDR
// if Brown then
4556: LD_EXP 29
4560: IFFALSE 4591
// friends := Insert ( friends , friends + 1 , Brown ) ;
4562: LD_ADDR_EXP 4
4566: PUSH
4567: LD_EXP 4
4571: PPUSH
4572: LD_EXP 4
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_EXP 29
4585: PPUSH
4586: CALL_OW 2
4590: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4591: LD_ADDR_EXP 39
4595: PUSH
4596: LD_STRING Mike
4598: PPUSH
4599: LD_EXP 1
4603: NOT
4604: PPUSH
4605: LD_STRING 10c_
4607: PPUSH
4608: CALL 36109 0 3
4612: ST_TO_ADDR
// if Mike then
4613: LD_EXP 39
4617: IFFALSE 4658
// begin SetClass ( Mike , class_apeman_engineer ) ;
4619: LD_EXP 39
4623: PPUSH
4624: LD_INT 16
4626: PPUSH
4627: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4631: LD_EXP 39
4635: PPUSH
4636: LD_INT 180
4638: PPUSH
4639: LD_INT 87
4641: PPUSH
4642: LD_INT 0
4644: PPUSH
4645: CALL_OW 48
// ComHold ( Mike ) ;
4649: LD_EXP 39
4653: PPUSH
4654: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4658: LD_ADDR_EXP 4
4662: PUSH
4663: LD_EXP 4
4667: PUSH
4668: LD_STRING 11c_others
4670: PPUSH
4671: CALL_OW 31
4675: ADD
4676: PUSH
4677: LD_STRING 11_others
4679: PPUSH
4680: CALL_OW 31
4684: ADD
4685: ST_TO_ADDR
// if friends < 18 then
4686: LD_EXP 4
4690: PUSH
4691: LD_INT 18
4693: LESS
4694: IFFALSE 4766
// for i = 1 to 18 do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 18
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4764
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4712: LD_INT 0
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: LD_INT 4
4720: PPUSH
4721: CALL_OW 12
4725: PPUSH
4726: LD_INT 7
4728: PPUSH
4729: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4733: LD_ADDR_EXP 4
4737: PUSH
4738: LD_EXP 4
4742: PPUSH
4743: LD_EXP 4
4747: PUSH
4748: LD_INT 1
4750: PLUS
4751: PPUSH
4752: CALL_OW 44
4756: PPUSH
4757: CALL_OW 2
4761: ST_TO_ADDR
// end ;
4762: GO 4709
4764: POP
4765: POP
// for i in friends do
4766: LD_ADDR_VAR 0 2
4770: PUSH
4771: LD_EXP 4
4775: PUSH
4776: FOR_IN
4777: IFFALSE 4850
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4779: LD_VAR 0 2
4783: PPUSH
4784: CALL_OW 248
4788: PUSH
4789: LD_INT 1
4791: EQUAL
4792: PUSH
4793: LD_VAR 0 2
4797: PPUSH
4798: LD_INT 1
4800: PPUSH
4801: CALL_OW 259
4805: PUSH
4806: LD_VAR 0 2
4810: PPUSH
4811: LD_INT 4
4813: PPUSH
4814: CALL_OW 259
4818: GREATEREQUAL
4819: AND
4820: IFFALSE 4836
// SetClass ( i , class_soldier ) else
4822: LD_VAR 0 2
4826: PPUSH
4827: LD_INT 1
4829: PPUSH
4830: CALL_OW 336
4834: GO 4848
// SetClass ( i , class_scientistic ) ;
4836: LD_VAR 0 2
4840: PPUSH
4841: LD_INT 4
4843: PPUSH
4844: CALL_OW 336
4848: GO 4776
4850: POP
4851: POP
// if Frank then
4852: LD_EXP 34
4856: IFFALSE 4870
// SetClass ( Frank , class_sniper ) ;
4858: LD_EXP 34
4862: PPUSH
4863: LD_INT 5
4865: PPUSH
4866: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4870: LD_EXP 37
4874: PUSH
4875: LD_EXP 28
4879: PUSH
4880: LD_EXP 38
4884: PUSH
4885: LD_EXP 36
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: PPUSH
4896: LD_INT 4
4898: PPUSH
4899: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4903: LD_ADDR_EXP 3
4907: PUSH
4908: LD_STRING 
4910: PPUSH
4911: LD_INT 7
4913: PPUSH
4914: LD_INT 7
4916: PPUSH
4917: LD_INT -6
4919: PUSH
4920: LD_EXP 15
4924: PUSH
4925: LD_EXP 16
4929: PUSH
4930: LD_EXP 36
4934: PUSH
4935: LD_EXP 28
4939: PUSH
4940: LD_EXP 38
4944: PUSH
4945: LD_INT -2
4947: PUSH
4948: LD_INT -3
4950: PUSH
4951: LD_INT -5
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: PUSH
4965: LD_EXP 4
4969: ADD
4970: PPUSH
4971: LD_INT 1
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 2
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: LD_INT 5
4986: PUSH
4987: LD_INT 0
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 42
5007: ST_TO_ADDR
// if Simms then
5008: LD_EXP 36
5012: IFFALSE 5030
// selected := selected ^ Simms ;
5014: LD_ADDR_EXP 3
5018: PUSH
5019: LD_EXP 3
5023: PUSH
5024: LD_EXP 36
5028: ADD
5029: ST_TO_ADDR
// if Denis then
5030: LD_EXP 28
5034: IFFALSE 5052
// selected := selected ^ Denis ;
5036: LD_ADDR_EXP 3
5040: PUSH
5041: LD_EXP 3
5045: PUSH
5046: LD_EXP 28
5050: ADD
5051: ST_TO_ADDR
// if DeltaDoctor then
5052: LD_EXP 38
5056: IFFALSE 5074
// selected := selected ^ DeltaDoctor ;
5058: LD_ADDR_EXP 3
5062: PUSH
5063: LD_EXP 3
5067: PUSH
5068: LD_EXP 38
5072: ADD
5073: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5074: LD_EXP 10
5078: PUSH
5079: LD_INT 1
5081: EQUAL
5082: PUSH
5083: LD_EXP 25
5087: AND
5088: IFFALSE 5100
// gammaCommander := Donaldson ;
5090: LD_ADDR_VAR 0 8
5094: PUSH
5095: LD_EXP 25
5099: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5100: LD_EXP 10
5104: PUSH
5105: LD_INT 2
5107: EQUAL
5108: PUSH
5109: LD_EXP 29
5113: AND
5114: IFFALSE 5126
// gammaCommander := Brown ;
5116: LD_ADDR_VAR 0 8
5120: PUSH
5121: LD_EXP 29
5125: ST_TO_ADDR
// friends := friends diff selected ;
5126: LD_ADDR_EXP 4
5130: PUSH
5131: LD_EXP 4
5135: PUSH
5136: LD_EXP 3
5140: DIFF
5141: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5142: LD_ADDR_EXP 4
5146: PUSH
5147: LD_EXP 4
5151: PUSH
5152: LD_VAR 0 8
5156: DIFF
5157: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5158: LD_ADDR_VAR 0 4
5162: PUSH
5163: LD_INT 111
5165: PUSH
5166: LD_INT 137
5168: PUSH
5169: LD_INT 51
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 147
5179: PUSH
5180: LD_INT 129
5182: PUSH
5183: LD_INT 25
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5195: LD_ADDR_VAR 0 5
5199: PUSH
5200: LD_INT 5
5202: PUSH
5203: LD_INT 6
5205: PUSH
5206: LD_INT 7
5208: PUSH
5209: LD_INT 8
5211: PUSH
5212: LD_INT 17
5214: PUSH
5215: LD_INT 18
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: ST_TO_ADDR
// for i in buildings do
5226: LD_ADDR_VAR 0 2
5230: PUSH
5231: LD_VAR 0 4
5235: PUSH
5236: FOR_IN
5237: IFFALSE 5253
// SetSide ( i , 4 ) ;
5239: LD_VAR 0 2
5243: PPUSH
5244: LD_INT 4
5246: PPUSH
5247: CALL_OW 235
5251: GO 5236
5253: POP
5254: POP
// for i in selected union gammaCommander do
5255: LD_ADDR_VAR 0 2
5259: PUSH
5260: LD_EXP 3
5264: PUSH
5265: LD_VAR 0 8
5269: UNION
5270: PUSH
5271: FOR_IN
5272: IFFALSE 5612
// begin if GetClass ( i ) in [ 1 , 5 ] then
5274: LD_VAR 0 2
5278: PPUSH
5279: CALL_OW 257
5283: PUSH
5284: LD_INT 1
5286: PUSH
5287: LD_INT 5
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: IN
5294: IFFALSE 5454
// begin if buildings [ 1 ] then
5296: LD_VAR 0 4
5300: PUSH
5301: LD_INT 1
5303: ARRAY
5304: IFFALSE 5365
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5306: LD_VAR 0 2
5310: PPUSH
5311: LD_VAR 0 4
5315: PUSH
5316: LD_INT 1
5318: ARRAY
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5328: LD_ADDR_VAR 0 4
5332: PUSH
5333: LD_VAR 0 4
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_VAR 0 4
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PPUSH
5350: LD_INT 1
5352: PPUSH
5353: CALL_OW 3
5357: PPUSH
5358: CALL_OW 1
5362: ST_TO_ADDR
// end else
5363: GO 5452
// begin if not areas then
5365: LD_VAR 0 5
5369: NOT
5370: IFFALSE 5404
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5372: LD_VAR 0 2
5376: PPUSH
5377: LD_INT 87
5379: PPUSH
5380: LD_INT 68
5382: PPUSH
5383: LD_INT 8
5385: PPUSH
5386: LD_INT 0
5388: PPUSH
5389: CALL_OW 50
// ComHold ( i ) ;
5393: LD_VAR 0 2
5397: PPUSH
5398: CALL_OW 140
// end else
5402: GO 5452
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_VAR 0 5
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PPUSH
5418: LD_INT 0
5420: PPUSH
5421: CALL_OW 49
// ComHold ( i ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5434: LD_ADDR_VAR 0 5
5438: PUSH
5439: LD_VAR 0 5
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 3
5451: ST_TO_ADDR
// end ; end ; end else
5452: GO 5610
// begin if buildings [ 2 ] then
5454: LD_VAR 0 4
5458: PUSH
5459: LD_INT 2
5461: ARRAY
5462: IFFALSE 5523
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5464: LD_VAR 0 2
5468: PPUSH
5469: LD_VAR 0 4
5473: PUSH
5474: LD_INT 2
5476: ARRAY
5477: PUSH
5478: LD_INT 1
5480: ARRAY
5481: PPUSH
5482: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5486: LD_ADDR_VAR 0 4
5490: PUSH
5491: LD_VAR 0 4
5495: PPUSH
5496: LD_INT 2
5498: PPUSH
5499: LD_VAR 0 4
5503: PUSH
5504: LD_INT 2
5506: ARRAY
5507: PPUSH
5508: LD_INT 1
5510: PPUSH
5511: CALL_OW 3
5515: PPUSH
5516: CALL_OW 1
5520: ST_TO_ADDR
// end else
5521: GO 5610
// begin if not areas then
5523: LD_VAR 0 5
5527: NOT
5528: IFFALSE 5562
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5530: LD_VAR 0 2
5534: PPUSH
5535: LD_INT 87
5537: PPUSH
5538: LD_INT 68
5540: PPUSH
5541: LD_INT 8
5543: PPUSH
5544: LD_INT 0
5546: PPUSH
5547: CALL_OW 50
// ComHold ( i ) ;
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 140
// end else
5560: GO 5610
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_VAR 0 5
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: LD_INT 0
5578: PPUSH
5579: CALL_OW 49
// ComHold ( i ) ;
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: LD_VAR 0 5
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: CALL_OW 3
5609: ST_TO_ADDR
// end ; end ; end ; end ;
5610: GO 5271
5612: POP
5613: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5614: LD_ADDR_VAR 0 6
5618: PUSH
5619: LD_INT 22
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: LD_INT 32
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 69
5647: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5648: LD_ADDR_VAR 0 2
5652: PUSH
5653: DOUBLE
5654: LD_VAR 0 6
5658: PUSH
5659: LD_EXP 4
5663: MINUS
5664: INC
5665: ST_TO_ADDR
5666: LD_INT 1
5668: PUSH
5669: FOR_DOWNTO
5670: IFFALSE 5737
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5672: LD_INT 0
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_INT 7
5680: PUSH
5681: LD_INT 8
5683: PUSH
5684: LD_INT 9
5686: PUSH
5687: LD_INT 10
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: PUSH
5696: LD_OWVAR 67
5700: ARRAY
5701: PPUSH
5702: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5706: LD_ADDR_EXP 4
5710: PUSH
5711: LD_EXP 4
5715: PPUSH
5716: LD_EXP 4
5720: PUSH
5721: LD_INT 1
5723: PLUS
5724: PPUSH
5725: CALL_OW 44
5729: PPUSH
5730: CALL_OW 2
5734: ST_TO_ADDR
// end ;
5735: GO 5669
5737: POP
5738: POP
// if friends then
5739: LD_EXP 4
5743: IFFALSE 5859
// begin tmp := friends ;
5745: LD_ADDR_VAR 0 3
5749: PUSH
5750: LD_EXP 4
5754: ST_TO_ADDR
// for i = 1 to bunkers do
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: DOUBLE
5761: LD_INT 1
5763: DEC
5764: ST_TO_ADDR
5765: LD_VAR 0 6
5769: PUSH
5770: FOR_TO
5771: IFFALSE 5857
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5773: LD_VAR 0 3
5777: PUSH
5778: LD_VAR 0 3
5782: ARRAY
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5791: LD_VAR 0 3
5795: PUSH
5796: LD_VAR 0 3
5800: ARRAY
5801: PPUSH
5802: LD_INT 1
5804: PPUSH
5805: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5809: LD_VAR 0 3
5813: PUSH
5814: LD_VAR 0 3
5818: ARRAY
5819: PPUSH
5820: LD_VAR 0 6
5824: PUSH
5825: LD_VAR 0 2
5829: ARRAY
5830: PPUSH
5831: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5835: LD_ADDR_VAR 0 3
5839: PUSH
5840: LD_VAR 0 3
5844: PPUSH
5845: LD_VAR 0 3
5849: PPUSH
5850: CALL_OW 3
5854: ST_TO_ADDR
// end ;
5855: GO 5770
5857: POP
5858: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5859: LD_ADDR_VAR 0 5
5863: PUSH
5864: LD_VAR 0 5
5868: PUSH
5869: LD_INT 9
5871: PUSH
5872: LD_INT 10
5874: PUSH
5875: LD_INT 11
5877: PUSH
5878: LD_INT 12
5880: PUSH
5881: LD_INT 13
5883: PUSH
5884: LD_INT 14
5886: PUSH
5887: LD_INT 15
5889: PUSH
5890: LD_INT 16
5892: PUSH
5893: LD_INT 26
5895: PUSH
5896: LD_INT 27
5898: PUSH
5899: LD_INT 28
5901: PUSH
5902: LD_INT 29
5904: PUSH
5905: LD_INT 30
5907: PUSH
5908: LD_INT 31
5910: PUSH
5911: LD_INT 32
5913: PUSH
5914: LD_INT 33
5916: PUSH
5917: LD_INT 34
5919: PUSH
5920: LD_INT 35
5922: PUSH
5923: LD_INT 36
5925: PUSH
5926: LD_INT 37
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: UNION
5951: ST_TO_ADDR
// for i in friends do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PUSH
5962: FOR_IN
5963: IFFALSE 6250
// begin SetTag ( i , 2 ) ;
5965: LD_VAR 0 2
5969: PPUSH
5970: LD_INT 2
5972: PPUSH
5973: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5977: LD_VAR 0 2
5981: PPUSH
5982: CALL_OW 257
5986: PUSH
5987: LD_INT 1
5989: PUSH
5990: LD_INT 4
5992: PUSH
5993: LD_INT 5
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: LIST
6000: IN
6001: NOT
6002: IFFALSE 6016
// SetClass ( i , 1 ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: LD_INT 1
6011: PPUSH
6012: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6016: LD_VAR 0 2
6020: PPUSH
6021: CALL_OW 257
6025: PUSH
6026: LD_INT 1
6028: PUSH
6029: LD_INT 5
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: IN
6036: PUSH
6037: LD_VAR 0 4
6041: PUSH
6042: LD_INT 1
6044: ARRAY
6045: AND
6046: IFFALSE 6107
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6048: LD_VAR 0 2
6052: PPUSH
6053: LD_VAR 0 4
6057: PUSH
6058: LD_INT 1
6060: ARRAY
6061: PUSH
6062: LD_INT 1
6064: ARRAY
6065: PPUSH
6066: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6070: LD_ADDR_VAR 0 4
6074: PUSH
6075: LD_VAR 0 4
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: LD_VAR 0 4
6087: PUSH
6088: LD_INT 1
6090: ARRAY
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: CALL_OW 3
6099: PPUSH
6100: CALL_OW 1
6104: ST_TO_ADDR
// continue ;
6105: GO 5962
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6107: LD_VAR 0 2
6111: PPUSH
6112: CALL_OW 257
6116: PUSH
6117: LD_INT 4
6119: EQUAL
6120: PUSH
6121: LD_VAR 0 4
6125: PUSH
6126: LD_INT 2
6128: ARRAY
6129: AND
6130: IFFALSE 6191
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6132: LD_VAR 0 2
6136: PPUSH
6137: LD_VAR 0 4
6141: PUSH
6142: LD_INT 2
6144: ARRAY
6145: PUSH
6146: LD_INT 1
6148: ARRAY
6149: PPUSH
6150: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6154: LD_ADDR_VAR 0 4
6158: PUSH
6159: LD_VAR 0 4
6163: PPUSH
6164: LD_INT 2
6166: PPUSH
6167: LD_VAR 0 4
6171: PUSH
6172: LD_INT 2
6174: ARRAY
6175: PPUSH
6176: LD_INT 1
6178: PPUSH
6179: CALL_OW 3
6183: PPUSH
6184: CALL_OW 1
6188: ST_TO_ADDR
// continue ;
6189: GO 5962
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6191: LD_VAR 0 2
6195: PPUSH
6196: LD_VAR 0 5
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6212: LD_ADDR_VAR 0 5
6216: PUSH
6217: LD_VAR 0 5
6221: PPUSH
6222: LD_INT 1
6224: PPUSH
6225: CALL_OW 3
6229: ST_TO_ADDR
// ComHold ( i ) ;
6230: LD_VAR 0 2
6234: PPUSH
6235: CALL_OW 140
// if not areas then
6239: LD_VAR 0 5
6243: NOT
6244: IFFALSE 6248
// break ;
6246: GO 6250
// end ;
6248: GO 5962
6250: POP
6251: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6252: LD_EXP 4
6256: PPUSH
6257: LD_INT 3
6259: PUSH
6260: LD_INT 52
6262: PUSH
6263: EMPTY
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 72
6274: IFFALSE 6341
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6276: LD_ADDR_VAR 0 2
6280: PUSH
6281: LD_EXP 4
6285: PPUSH
6286: LD_INT 3
6288: PUSH
6289: LD_INT 52
6291: PUSH
6292: EMPTY
6293: LIST
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PPUSH
6299: CALL_OW 72
6303: PUSH
6304: FOR_IN
6305: IFFALSE 6339
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6307: LD_VAR 0 2
6311: PPUSH
6312: LD_INT 65
6314: PPUSH
6315: LD_INT 58
6317: PPUSH
6318: LD_INT 7
6320: PPUSH
6321: LD_INT 0
6323: PPUSH
6324: CALL_OW 50
// ComHold ( i ) ;
6328: LD_VAR 0 2
6332: PPUSH
6333: CALL_OW 140
// end ;
6337: GO 6304
6339: POP
6340: POP
// if Frank then
6341: LD_EXP 34
6345: IFFALSE 6359
// SetClass ( Frank , class_sniper ) ;
6347: LD_EXP 34
6351: PPUSH
6352: LD_INT 5
6354: PPUSH
6355: CALL_OW 336
// end ; end_of_file
6359: LD_VAR 0 1
6363: RET
// export function CanSayRand ( side ) ; begin
6364: LD_INT 0
6366: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6367: LD_ADDR_VAR 0 2
6371: PUSH
6372: LD_INT 52
6374: PUSH
6375: EMPTY
6376: LIST
6377: PUSH
6378: LD_INT 22
6380: PUSH
6381: LD_VAR 0 1
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 2
6392: PUSH
6393: LD_INT 25
6395: PUSH
6396: LD_INT 1
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: LD_INT 2
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 25
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 25
6425: PUSH
6426: LD_INT 4
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 34
6459: PUSH
6460: LD_EXP 24
6464: PUSH
6465: LD_EXP 25
6469: PUSH
6470: LD_EXP 26
6474: PUSH
6475: LD_EXP 27
6479: PUSH
6480: LD_EXP 28
6484: PUSH
6485: LD_EXP 29
6489: PUSH
6490: LD_EXP 30
6494: PUSH
6495: LD_EXP 31
6499: PUSH
6500: LD_EXP 17
6504: PUSH
6505: LD_EXP 32
6509: PUSH
6510: LD_EXP 33
6514: PUSH
6515: LD_EXP 35
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: DIFF
6536: ST_TO_ADDR
// end ;
6537: LD_VAR 0 2
6541: RET
// export function SayRand ( sex , dial ) ; begin
6542: LD_INT 0
6544: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6545: LD_ADDR_VAR 0 3
6549: PUSH
6550: LD_INT 52
6552: PUSH
6553: EMPTY
6554: LIST
6555: PUSH
6556: LD_INT 22
6558: PUSH
6559: LD_INT 1
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 26
6568: PUSH
6569: LD_VAR 0 1
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 2
6580: PUSH
6581: LD_INT 25
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 25
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 25
6603: PUSH
6604: LD_INT 3
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 25
6613: PUSH
6614: LD_INT 4
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 69
6638: PUSH
6639: LD_EXP 15
6643: PUSH
6644: LD_EXP 34
6648: PUSH
6649: LD_EXP 24
6653: PUSH
6654: LD_EXP 25
6658: PUSH
6659: LD_EXP 26
6663: PUSH
6664: LD_EXP 27
6668: PUSH
6669: LD_EXP 28
6673: PUSH
6674: LD_EXP 29
6678: PUSH
6679: LD_EXP 30
6683: PUSH
6684: LD_EXP 31
6688: PUSH
6689: LD_EXP 17
6693: PUSH
6694: LD_EXP 32
6698: PUSH
6699: LD_EXP 33
6703: PUSH
6704: LD_EXP 35
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: DIFF
6725: ST_TO_ADDR
// if not result then
6726: LD_VAR 0 3
6730: NOT
6731: IFFALSE 6735
// exit ;
6733: GO 6763
// result := result [ 1 ] ;
6735: LD_ADDR_VAR 0 3
6739: PUSH
6740: LD_VAR 0 3
6744: PUSH
6745: LD_INT 1
6747: ARRAY
6748: ST_TO_ADDR
// Say ( result , dial ) ;
6749: LD_VAR 0 3
6753: PPUSH
6754: LD_VAR 0 2
6758: PPUSH
6759: CALL_OW 88
// end ;
6763: LD_VAR 0 3
6767: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6768: LD_INT 0
6770: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6771: LD_ADDR_VAR 0 4
6775: PUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 1
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 26
6788: PUSH
6789: LD_VAR 0 1
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 2
6800: PUSH
6801: LD_INT 25
6803: PUSH
6804: LD_INT 1
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: LD_INT 25
6813: PUSH
6814: LD_INT 2
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PUSH
6821: LD_INT 25
6823: PUSH
6824: LD_INT 3
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PUSH
6831: LD_INT 25
6833: PUSH
6834: LD_INT 4
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: PPUSH
6853: CALL_OW 69
6857: PUSH
6858: LD_EXP 15
6862: PUSH
6863: LD_EXP 34
6867: PUSH
6868: LD_EXP 24
6872: PUSH
6873: LD_EXP 25
6877: PUSH
6878: LD_EXP 26
6882: PUSH
6883: LD_EXP 27
6887: PUSH
6888: LD_EXP 28
6892: PUSH
6893: LD_EXP 29
6897: PUSH
6898: LD_EXP 30
6902: PUSH
6903: LD_EXP 31
6907: PUSH
6908: LD_EXP 17
6912: PUSH
6913: LD_EXP 32
6917: PUSH
6918: LD_EXP 33
6922: PUSH
6923: LD_EXP 35
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: PUSH
6944: LD_VAR 0 3
6948: ADD
6949: DIFF
6950: ST_TO_ADDR
// if not result then
6951: LD_VAR 0 4
6955: NOT
6956: IFFALSE 6960
// exit ;
6958: GO 6988
// result := result [ 1 ] ;
6960: LD_ADDR_VAR 0 4
6964: PUSH
6965: LD_VAR 0 4
6969: PUSH
6970: LD_INT 1
6972: ARRAY
6973: ST_TO_ADDR
// Say ( result , dial ) ;
6974: LD_VAR 0 4
6978: PPUSH
6979: LD_VAR 0 2
6983: PPUSH
6984: CALL_OW 88
// end ;
6988: LD_VAR 0 4
6992: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6993: LD_INT 0
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
7002: PPUSH
7003: PPUSH
7004: PPUSH
7005: PPUSH
7006: PPUSH
7007: PPUSH
7008: PPUSH
7009: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7010: LD_VAR 0 1
7014: NOT
7015: PUSH
7016: LD_VAR 0 2
7020: NOT
7021: OR
7022: PUSH
7023: LD_VAR 0 1
7027: PPUSH
7028: CALL_OW 247
7032: PUSH
7033: LD_INT 3
7035: EQUAL
7036: OR
7037: IFFALSE 7041
// exit ;
7039: GO 8580
// for i = path downto 1 do
7041: LD_ADDR_VAR 0 5
7045: PUSH
7046: DOUBLE
7047: LD_VAR 0 2
7051: INC
7052: ST_TO_ADDR
7053: LD_INT 1
7055: PUSH
7056: FOR_DOWNTO
7057: IFFALSE 7118
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7059: LD_VAR 0 2
7063: PUSH
7064: LD_VAR 0 5
7068: ARRAY
7069: PUSH
7070: LD_INT 1
7072: ARRAY
7073: PPUSH
7074: LD_VAR 0 2
7078: PUSH
7079: LD_VAR 0 5
7083: ARRAY
7084: PUSH
7085: LD_INT 2
7087: ARRAY
7088: PPUSH
7089: CALL_OW 488
7093: NOT
7094: IFFALSE 7116
// path = Delete ( path , i ) ;
7096: LD_ADDR_VAR 0 2
7100: PUSH
7101: LD_VAR 0 2
7105: PPUSH
7106: LD_VAR 0 5
7110: PPUSH
7111: CALL_OW 3
7115: ST_TO_ADDR
// end ;
7116: GO 7056
7118: POP
7119: POP
// if not path then
7120: LD_VAR 0 2
7124: NOT
7125: IFFALSE 7129
// exit ;
7127: GO 8580
// tmp_path := [ ] ;
7129: LD_ADDR_VAR 0 11
7133: PUSH
7134: EMPTY
7135: ST_TO_ADDR
// if flags then
7136: LD_VAR 0 3
7140: IFFALSE 7214
// begin if flags [ 1 ] then
7142: LD_VAR 0 3
7146: PUSH
7147: LD_INT 1
7149: ARRAY
7150: IFFALSE 7166
// safe_place = flags [ 1 ] ;
7152: LD_ADDR_VAR 0 16
7156: PUSH
7157: LD_VAR 0 3
7161: PUSH
7162: LD_INT 1
7164: ARRAY
7165: ST_TO_ADDR
// if flags [ 2 ] then
7166: LD_VAR 0 3
7170: PUSH
7171: LD_INT 2
7173: ARRAY
7174: IFFALSE 7190
// spot_dist = flags [ 2 ] ;
7176: LD_ADDR_VAR 0 15
7180: PUSH
7181: LD_VAR 0 3
7185: PUSH
7186: LD_INT 2
7188: ARRAY
7189: ST_TO_ADDR
// if flags [ 3 ] then
7190: LD_VAR 0 3
7194: PUSH
7195: LD_INT 3
7197: ARRAY
7198: IFFALSE 7214
// chase_range = flags [ 3 ] ;
7200: LD_ADDR_VAR 0 17
7204: PUSH
7205: LD_VAR 0 3
7209: PUSH
7210: LD_INT 3
7212: ARRAY
7213: ST_TO_ADDR
// end ; if not chase_range then
7214: LD_VAR 0 17
7218: NOT
7219: IFFALSE 7229
// chase_range = 8 ;
7221: LD_ADDR_VAR 0 17
7225: PUSH
7226: LD_INT 8
7228: ST_TO_ADDR
// if not spot_dist then
7229: LD_VAR 0 15
7233: NOT
7234: IFFALSE 7244
// spot_dist := 8 ;
7236: LD_ADDR_VAR 0 15
7240: PUSH
7241: LD_INT 8
7243: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7244: LD_ADDR_VAR 0 18
7248: PUSH
7249: LD_VAR 0 1
7253: PPUSH
7254: CALL_OW 247
7258: PUSH
7259: LD_INT 2
7261: EQUAL
7262: PUSH
7263: LD_VAR 0 1
7267: PPUSH
7268: CALL_OW 262
7272: PUSH
7273: LD_INT 3
7275: NONEQUAL
7276: AND
7277: ST_TO_ADDR
// status = 1 ;
7278: LD_ADDR_VAR 0 12
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7286: LD_ADDR_VAR 0 11
7290: PUSH
7291: LD_INT 1
7293: PUSH
7294: LD_VAR 0 2
7298: PUSH
7299: LD_INT 1
7301: ARRAY
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7307: LD_INT 35
7309: PPUSH
7310: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7314: LD_VAR 0 18
7318: PUSH
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 261
7328: PUSH
7329: LD_INT 20
7331: LESS
7332: AND
7333: IFFALSE 7526
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7335: LD_ADDR_VAR 0 10
7339: PUSH
7340: LD_INT 22
7342: PUSH
7343: LD_VAR 0 1
7347: PPUSH
7348: CALL_OW 255
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 2
7359: PUSH
7360: LD_INT 30
7362: PUSH
7363: LD_INT 0
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 30
7372: PUSH
7373: LD_INT 1
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 30
7382: PUSH
7383: LD_INT 29
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PUSH
7390: LD_INT 30
7392: PUSH
7393: LD_INT 3
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 69
7415: ST_TO_ADDR
// if not station then
7416: LD_VAR 0 10
7420: NOT
7421: IFFALSE 7437
// begin SetFuel ( unit , 40 ) ;
7423: LD_VAR 0 1
7427: PPUSH
7428: LD_INT 40
7430: PPUSH
7431: CALL_OW 240
// continue ;
7435: GO 7307
// end ; status := 6 ;
7437: LD_ADDR_VAR 0 12
7441: PUSH
7442: LD_INT 6
7444: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7445: LD_ADDR_VAR 0 10
7449: PUSH
7450: LD_VAR 0 10
7454: PPUSH
7455: LD_VAR 0 1
7459: PPUSH
7460: CALL_OW 74
7464: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7465: LD_INT 35
7467: PPUSH
7468: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7472: LD_VAR 0 1
7476: PPUSH
7477: LD_VAR 0 10
7481: PPUSH
7482: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7486: LD_VAR 0 1
7490: PPUSH
7491: LD_VAR 0 10
7495: PPUSH
7496: CALL_OW 296
7500: PUSH
7501: LD_INT 6
7503: LESS
7504: IFFALSE 7465
// SetFuel ( unit , 100 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 100
7513: PPUSH
7514: CALL_OW 240
// status := 5 ;
7518: LD_ADDR_VAR 0 12
7522: PUSH
7523: LD_INT 5
7525: ST_TO_ADDR
// end ; if status = 1 then
7526: LD_VAR 0 12
7530: PUSH
7531: LD_INT 1
7533: EQUAL
7534: IFFALSE 7910
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7536: LD_ADDR_VAR 0 13
7540: PUSH
7541: LD_INT 81
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 255
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 3
7560: PUSH
7561: LD_INT 21
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: LD_INT 91
7577: PUSH
7578: LD_VAR 0 1
7582: PUSH
7583: LD_VAR 0 15
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 101
7595: PUSH
7596: LD_INT 1
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: PPUSH
7609: CALL_OW 69
7613: ST_TO_ADDR
// for i in enemy do
7614: LD_ADDR_VAR 0 5
7618: PUSH
7619: LD_VAR 0 13
7623: PUSH
7624: FOR_IN
7625: IFFALSE 7656
// if IsInvisible ( i ) then
7627: LD_VAR 0 5
7631: PPUSH
7632: CALL_OW 571
7636: IFFALSE 7654
// enemy := enemy diff i ;
7638: LD_ADDR_VAR 0 13
7642: PUSH
7643: LD_VAR 0 13
7647: PUSH
7648: LD_VAR 0 5
7652: DIFF
7653: ST_TO_ADDR
7654: GO 7624
7656: POP
7657: POP
// if enemy then
7658: LD_VAR 0 13
7662: IFFALSE 7712
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_VAR 0 1
7673: PPUSH
7674: CALL_OW 250
7678: PPUSH
7679: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7683: LD_VAR 0 1
7687: PPUSH
7688: LD_VAR 0 1
7692: PPUSH
7693: CALL_OW 251
7697: PPUSH
7698: CALL_OW 232
// status = 2 ;
7702: LD_ADDR_VAR 0 12
7706: PUSH
7707: LD_INT 2
7709: ST_TO_ADDR
// end else
7710: GO 7910
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7712: LD_VAR 0 1
7716: PPUSH
7717: LD_VAR 0 11
7721: PUSH
7722: LD_INT 2
7724: ARRAY
7725: PUSH
7726: LD_INT 1
7728: ARRAY
7729: PPUSH
7730: LD_VAR 0 11
7734: PUSH
7735: LD_INT 2
7737: ARRAY
7738: PUSH
7739: LD_INT 2
7741: ARRAY
7742: PPUSH
7743: CALL_OW 307
7747: PUSH
7748: LD_VAR 0 1
7752: PPUSH
7753: CALL_OW 314
7757: NOT
7758: OR
7759: IFFALSE 7910
// begin wait ( 0 0$2 ) ;
7761: LD_INT 70
7763: PPUSH
7764: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7768: LD_VAR 0 11
7772: PUSH
7773: LD_INT 1
7775: ARRAY
7776: PUSH
7777: LD_INT 1
7779: PLUS
7780: PUSH
7781: LD_VAR 0 2
7785: GREATER
7786: IFFALSE 7811
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7788: LD_ADDR_VAR 0 11
7792: PUSH
7793: LD_VAR 0 11
7797: PPUSH
7798: LD_INT 1
7800: PPUSH
7801: LD_INT 1
7803: PPUSH
7804: CALL_OW 1
7808: ST_TO_ADDR
7809: GO 7842
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7811: LD_ADDR_VAR 0 11
7815: PUSH
7816: LD_VAR 0 11
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: LD_VAR 0 11
7828: PUSH
7829: LD_INT 1
7831: ARRAY
7832: PUSH
7833: LD_INT 1
7835: PLUS
7836: PPUSH
7837: CALL_OW 1
7841: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7842: LD_ADDR_VAR 0 11
7846: PUSH
7847: LD_VAR 0 11
7851: PPUSH
7852: LD_INT 2
7854: PPUSH
7855: LD_VAR 0 2
7859: PUSH
7860: LD_VAR 0 11
7864: PUSH
7865: LD_INT 1
7867: ARRAY
7868: ARRAY
7869: PPUSH
7870: CALL_OW 1
7874: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7875: LD_VAR 0 1
7879: PPUSH
7880: LD_VAR 0 11
7884: PUSH
7885: LD_INT 2
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_VAR 0 11
7897: PUSH
7898: LD_INT 2
7900: ARRAY
7901: PUSH
7902: LD_INT 2
7904: ARRAY
7905: PPUSH
7906: CALL_OW 114
// end ; end ; end ; if status = 2 then
7910: LD_VAR 0 12
7914: PUSH
7915: LD_INT 2
7917: EQUAL
7918: IFFALSE 8139
// begin if GetLives ( unit ) < 650 and safe_place then
7920: LD_VAR 0 1
7924: PPUSH
7925: CALL_OW 256
7929: PUSH
7930: LD_INT 650
7932: LESS
7933: PUSH
7934: LD_VAR 0 16
7938: AND
7939: IFFALSE 7951
// begin status = 3 ;
7941: LD_ADDR_VAR 0 12
7945: PUSH
7946: LD_INT 3
7948: ST_TO_ADDR
// continue ;
7949: GO 7307
// end ; x := GetRememberedX ( unit ) ;
7951: LD_ADDR_VAR 0 6
7955: PUSH
7956: LD_VAR 0 1
7960: PPUSH
7961: CALL_OW 252
7965: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7966: LD_ADDR_VAR 0 7
7970: PUSH
7971: LD_VAR 0 1
7975: PPUSH
7976: CALL_OW 253
7980: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7981: LD_ADDR_VAR 0 13
7985: PUSH
7986: LD_INT 81
7988: PUSH
7989: LD_VAR 0 1
7993: PPUSH
7994: CALL_OW 255
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PUSH
8003: LD_INT 92
8005: PUSH
8006: LD_VAR 0 6
8010: PUSH
8011: LD_VAR 0 7
8015: PUSH
8016: LD_VAR 0 15
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 101
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: PPUSH
8042: CALL_OW 69
8046: ST_TO_ADDR
// if enemy then
8047: LD_VAR 0 13
8051: IFFALSE 8122
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8053: LD_ADDR_VAR 0 14
8057: PUSH
8058: LD_VAR 0 13
8062: PPUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8073: LD_VAR 0 14
8077: PPUSH
8078: LD_VAR 0 6
8082: PPUSH
8083: LD_VAR 0 7
8087: PPUSH
8088: CALL_OW 297
8092: PUSH
8093: LD_VAR 0 15
8097: PUSH
8098: LD_VAR 0 17
8102: PLUS
8103: LESS
8104: IFFALSE 8120
// ComAttackUnit ( unit , e ) ;
8106: LD_VAR 0 1
8110: PPUSH
8111: LD_VAR 0 14
8115: PPUSH
8116: CALL_OW 115
// end else
8120: GO 8139
// begin ComStop ( unit ) ;
8122: LD_VAR 0 1
8126: PPUSH
8127: CALL_OW 141
// status = 5 ;
8131: LD_ADDR_VAR 0 12
8135: PUSH
8136: LD_INT 5
8138: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8139: LD_VAR 0 12
8143: PUSH
8144: LD_INT 3
8146: EQUAL
8147: PUSH
8148: LD_VAR 0 16
8152: AND
8153: IFFALSE 8239
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_VAR 0 16
8164: PUSH
8165: LD_INT 1
8167: ARRAY
8168: PPUSH
8169: LD_VAR 0 16
8173: PUSH
8174: LD_INT 2
8176: ARRAY
8177: PPUSH
8178: CALL_OW 111
// wait ( 0 0$1 ) ;
8182: LD_INT 35
8184: PPUSH
8185: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8189: LD_VAR 0 1
8193: PPUSH
8194: LD_VAR 0 16
8198: PUSH
8199: LD_INT 1
8201: ARRAY
8202: PPUSH
8203: LD_VAR 0 16
8207: PUSH
8208: LD_INT 2
8210: ARRAY
8211: PPUSH
8212: CALL_OW 297
8216: PUSH
8217: LD_INT 4
8219: LESS
8220: IFFALSE 8155
// ComStop ( unit ) ;
8222: LD_VAR 0 1
8226: PPUSH
8227: CALL_OW 141
// status = 4 ;
8231: LD_ADDR_VAR 0 12
8235: PUSH
8236: LD_INT 4
8238: ST_TO_ADDR
// end ; if status = 4 then
8239: LD_VAR 0 12
8243: PUSH
8244: LD_INT 4
8246: EQUAL
8247: IFFALSE 8279
// begin repeat wait ( 0 0$1 ) ;
8249: LD_INT 35
8251: PPUSH
8252: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8256: LD_VAR 0 1
8260: PPUSH
8261: CALL_OW 256
8265: PUSH
8266: LD_INT 1000
8268: EQUAL
8269: IFFALSE 8249
// status = 5 ;
8271: LD_ADDR_VAR 0 12
8275: PUSH
8276: LD_INT 5
8278: ST_TO_ADDR
// end ; if status = 5 then
8279: LD_VAR 0 12
8283: PUSH
8284: LD_INT 5
8286: EQUAL
8287: IFFALSE 8569
// begin p := 999 ;
8289: LD_ADDR_VAR 0 9
8293: PUSH
8294: LD_INT 999
8296: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: LD_VAR 0 11
8306: PUSH
8307: LD_INT 2
8309: ARRAY
8310: PUSH
8311: LD_INT 1
8313: ARRAY
8314: PUSH
8315: LD_VAR 0 11
8319: PUSH
8320: LD_INT 2
8322: ARRAY
8323: PUSH
8324: LD_INT 2
8326: ARRAY
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// c := 1 ;
8332: LD_ADDR_VAR 0 8
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: DOUBLE
8346: LD_INT 1
8348: DEC
8349: ST_TO_ADDR
8350: LD_VAR 0 11
8354: PUSH
8355: LD_INT 2
8357: ARRAY
8358: PUSH
8359: LD_INT 2
8361: DIV
8362: PUSH
8363: FOR_TO
8364: IFFALSE 8496
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8366: LD_ADDR_VAR 0 6
8370: PUSH
8371: LD_VAR 0 1
8375: PPUSH
8376: LD_VAR 0 11
8380: PUSH
8381: LD_INT 2
8383: ARRAY
8384: PUSH
8385: LD_VAR 0 8
8389: ARRAY
8390: PPUSH
8391: LD_VAR 0 11
8395: PUSH
8396: LD_INT 2
8398: ARRAY
8399: PUSH
8400: LD_VAR 0 8
8404: PUSH
8405: LD_INT 1
8407: PLUS
8408: ARRAY
8409: PPUSH
8410: CALL_OW 297
8414: ST_TO_ADDR
// if x < p then
8415: LD_VAR 0 6
8419: PUSH
8420: LD_VAR 0 9
8424: LESS
8425: IFFALSE 8480
// begin p := x ;
8427: LD_ADDR_VAR 0 9
8431: PUSH
8432: LD_VAR 0 6
8436: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8437: LD_ADDR_VAR 0 14
8441: PUSH
8442: LD_VAR 0 11
8446: PUSH
8447: LD_INT 2
8449: ARRAY
8450: PUSH
8451: LD_VAR 0 8
8455: ARRAY
8456: PUSH
8457: LD_VAR 0 11
8461: PUSH
8462: LD_INT 2
8464: ARRAY
8465: PUSH
8466: LD_VAR 0 8
8470: PUSH
8471: LD_INT 1
8473: PLUS
8474: ARRAY
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: ST_TO_ADDR
// end ; c = c + 2 ;
8480: LD_ADDR_VAR 0 8
8484: PUSH
8485: LD_VAR 0 8
8489: PUSH
8490: LD_INT 2
8492: PLUS
8493: ST_TO_ADDR
// end ;
8494: GO 8363
8496: POP
8497: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8498: LD_VAR 0 1
8502: PPUSH
8503: LD_VAR 0 14
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 14
8516: PUSH
8517: LD_INT 2
8519: ARRAY
8520: PPUSH
8521: CALL_OW 111
// wait ( 0 0$1 ) ;
8525: LD_INT 35
8527: PPUSH
8528: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_VAR 0 14
8541: PUSH
8542: LD_INT 1
8544: ARRAY
8545: PPUSH
8546: LD_VAR 0 14
8550: PUSH
8551: LD_INT 2
8553: ARRAY
8554: PPUSH
8555: CALL_OW 307
8559: IFFALSE 8498
// status = 1 ;
8561: LD_ADDR_VAR 0 12
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 301
8578: IFFALSE 7307
// end ;
8580: LD_VAR 0 4
8584: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
8589: PPUSH
8590: PPUSH
8591: PPUSH
8592: PPUSH
8593: PPUSH
8594: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8595: LD_VAR 0 1
8599: NOT
8600: PUSH
8601: LD_VAR 0 3
8605: NOT
8606: OR
8607: PUSH
8608: LD_VAR 0 4
8612: PUSH
8613: LD_INT 1
8615: PUSH
8616: LD_INT 2
8618: PUSH
8619: LD_INT 0
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: LIST
8626: IN
8627: NOT
8628: OR
8629: PUSH
8630: LD_VAR 0 6
8634: NOT
8635: OR
8636: PUSH
8637: LD_VAR 0 7
8641: NOT
8642: OR
8643: IFFALSE 8647
// exit ;
8645: GO 9038
// sex_id :=  ;
8647: LD_ADDR_VAR 0 14
8651: PUSH
8652: LD_STRING 
8654: ST_TO_ADDR
// case class of 1 :
8655: LD_VAR 0 5
8659: PUSH
8660: LD_INT 1
8662: DOUBLE
8663: EQUAL
8664: IFTRUE 8668
8666: GO 8679
8668: POP
// class_id := Sol ; 2 :
8669: LD_ADDR_VAR 0 15
8673: PUSH
8674: LD_STRING Sol
8676: ST_TO_ADDR
8677: GO 8737
8679: LD_INT 2
8681: DOUBLE
8682: EQUAL
8683: IFTRUE 8687
8685: GO 8698
8687: POP
// class_id := Eng ; 3 :
8688: LD_ADDR_VAR 0 15
8692: PUSH
8693: LD_STRING Eng
8695: ST_TO_ADDR
8696: GO 8737
8698: LD_INT 3
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8717
8706: POP
// class_id := Mech ; 4 :
8707: LD_ADDR_VAR 0 15
8711: PUSH
8712: LD_STRING Mech
8714: ST_TO_ADDR
8715: GO 8737
8717: LD_INT 4
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8736
8725: POP
// class_id := Sci ; end ;
8726: LD_ADDR_VAR 0 15
8730: PUSH
8731: LD_STRING Sci
8733: ST_TO_ADDR
8734: GO 8737
8736: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8737: LD_ADDR_VAR 0 11
8741: PUSH
8742: LD_VAR 0 1
8746: PPUSH
8747: LD_INT 25
8749: PUSH
8750: LD_VAR 0 5
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 72
8763: ST_TO_ADDR
// if tmp then
8764: LD_VAR 0 11
8768: IFFALSE 8780
// units := tmp ;
8770: LD_ADDR_VAR 0 1
8774: PUSH
8775: LD_VAR 0 11
8779: ST_TO_ADDR
// if sex then
8780: LD_VAR 0 4
8784: IFFALSE 8840
// begin if sex = sex_female then
8786: LD_VAR 0 4
8790: PUSH
8791: LD_INT 2
8793: EQUAL
8794: IFFALSE 8804
// sex_id := F ;
8796: LD_ADDR_VAR 0 14
8800: PUSH
8801: LD_STRING F
8803: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8804: LD_ADDR_VAR 0 1
8808: PUSH
8809: LD_VAR 0 1
8813: PPUSH
8814: LD_INT 26
8816: PUSH
8817: LD_VAR 0 4
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PPUSH
8826: CALL_OW 72
8830: ST_TO_ADDR
// if not units then
8831: LD_VAR 0 1
8835: NOT
8836: IFFALSE 8840
// exit ;
8838: GO 9038
// end ; unit_id := id ;
8840: LD_ADDR_VAR 0 12
8844: PUSH
8845: LD_VAR 0 6
8849: ST_TO_ADDR
// if unit_id > units then
8850: LD_VAR 0 12
8854: PUSH
8855: LD_VAR 0 1
8859: GREATER
8860: IFFALSE 8870
// unit_id := 1 ;
8862: LD_ADDR_VAR 0 12
8866: PUSH
8867: LD_INT 1
8869: ST_TO_ADDR
// if not units [ unit_id ] then
8870: LD_VAR 0 1
8874: PUSH
8875: LD_VAR 0 12
8879: ARRAY
8880: NOT
8881: IFFALSE 8885
// exit ;
8883: GO 9038
// unit := units [ unit_id ] ;
8885: LD_ADDR_VAR 0 10
8889: PUSH
8890: LD_VAR 0 1
8894: PUSH
8895: LD_VAR 0 12
8899: ARRAY
8900: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8901: LD_ADDR_VAR 0 13
8905: PUSH
8906: LD_STRING D
8908: PUSH
8909: LD_VAR 0 3
8913: STR
8914: PUSH
8915: LD_STRING -
8917: STR
8918: PUSH
8919: LD_VAR 0 14
8923: STR
8924: PUSH
8925: LD_VAR 0 15
8929: STR
8930: PUSH
8931: LD_VAR 0 6
8935: STR
8936: PUSH
8937: LD_STRING -
8939: STR
8940: PUSH
8941: LD_VAR 0 7
8945: STR
8946: ST_TO_ADDR
// case type of 0 :
8947: LD_VAR 0 2
8951: PUSH
8952: LD_INT 0
8954: DOUBLE
8955: EQUAL
8956: IFTRUE 8960
8958: GO 8977
8960: POP
// Say ( unit , dialog_id ) ; 1 :
8961: LD_VAR 0 10
8965: PPUSH
8966: LD_VAR 0 13
8970: PPUSH
8971: CALL_OW 88
8975: GO 9028
8977: LD_INT 1
8979: DOUBLE
8980: EQUAL
8981: IFTRUE 8985
8983: GO 9002
8985: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8986: LD_VAR 0 10
8990: PPUSH
8991: LD_VAR 0 13
8995: PPUSH
8996: CALL_OW 94
9000: GO 9028
9002: LD_INT 2
9004: DOUBLE
9005: EQUAL
9006: IFTRUE 9010
9008: GO 9027
9010: POP
// ForceSay ( unit , dialog_id ) ; end ;
9011: LD_VAR 0 10
9015: PPUSH
9016: LD_VAR 0 13
9020: PPUSH
9021: CALL_OW 91
9025: GO 9028
9027: POP
// result := unit ;
9028: LD_ADDR_VAR 0 8
9032: PUSH
9033: LD_VAR 0 10
9037: ST_TO_ADDR
// end ;
9038: LD_VAR 0 8
9042: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9043: LD_INT 0
9045: PPUSH
9046: PPUSH
9047: PPUSH
// result := false ;
9048: LD_ADDR_VAR 0 4
9052: PUSH
9053: LD_INT 0
9055: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9056: LD_VAR 0 1
9060: NOT
9061: PUSH
9062: LD_VAR 0 2
9066: NOT
9067: OR
9068: PUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 310
9078: OR
9079: IFFALSE 9083
// exit ;
9081: GO 9287
// if distance < 0 then
9083: LD_VAR 0 3
9087: PUSH
9088: LD_INT 0
9090: LESS
9091: IFFALSE 9101
// distance := 0 ;
9093: LD_ADDR_VAR 0 3
9097: PUSH
9098: LD_INT 0
9100: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9101: LD_ADDR_VAR 0 6
9105: PUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: CALL_OW 266
9115: PPUSH
9116: LD_VAR 0 2
9120: PPUSH
9121: CALL_OW 250
9125: PPUSH
9126: LD_VAR 0 2
9130: PPUSH
9131: CALL_OW 251
9135: PPUSH
9136: LD_VAR 0 2
9140: PPUSH
9141: CALL_OW 254
9145: PPUSH
9146: LD_VAR 0 2
9150: PPUSH
9151: CALL_OW 248
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL 50417 0 6
9163: ST_TO_ADDR
// if not entrance then
9164: LD_VAR 0 6
9168: NOT
9169: IFFALSE 9173
// exit ;
9171: GO 9287
// for i in entrance do
9173: LD_ADDR_VAR 0 5
9177: PUSH
9178: LD_VAR 0 6
9182: PUSH
9183: FOR_IN
9184: IFFALSE 9285
// begin if not distance then
9186: LD_VAR 0 3
9190: NOT
9191: IFFALSE 9236
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9193: LD_VAR 0 1
9197: PPUSH
9198: LD_VAR 0 5
9202: PUSH
9203: LD_INT 1
9205: ARRAY
9206: PPUSH
9207: LD_VAR 0 5
9211: PUSH
9212: LD_INT 2
9214: ARRAY
9215: PPUSH
9216: CALL_OW 307
9220: IFFALSE 9234
// begin result := true ;
9222: LD_ADDR_VAR 0 4
9226: PUSH
9227: LD_INT 1
9229: ST_TO_ADDR
// exit ;
9230: POP
9231: POP
9232: GO 9287
// end ; end else
9234: GO 9283
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_VAR 0 5
9245: PUSH
9246: LD_INT 1
9248: ARRAY
9249: PPUSH
9250: LD_VAR 0 5
9254: PUSH
9255: LD_INT 2
9257: ARRAY
9258: PPUSH
9259: CALL_OW 297
9263: PUSH
9264: LD_VAR 0 3
9268: LESSEQUAL
9269: IFFALSE 9283
// begin result := true ;
9271: LD_ADDR_VAR 0 4
9275: PUSH
9276: LD_INT 1
9278: ST_TO_ADDR
// exit ;
9279: POP
9280: POP
9281: GO 9287
// end ; end ; end ;
9283: GO 9183
9285: POP
9286: POP
// end ;
9287: LD_VAR 0 4
9291: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9292: LD_INT 0
9294: PPUSH
9295: PPUSH
9296: PPUSH
// result := false ;
9297: LD_ADDR_VAR 0 3
9301: PUSH
9302: LD_INT 0
9304: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9305: LD_VAR 0 1
9309: NOT
9310: PUSH
9311: LD_VAR 0 2
9315: NOT
9316: OR
9317: PUSH
9318: LD_VAR 0 1
9322: PPUSH
9323: CALL_OW 302
9327: NOT
9328: OR
9329: PUSH
9330: LD_VAR 0 2
9334: PPUSH
9335: CALL_OW 302
9339: NOT
9340: OR
9341: IFFALSE 9345
// exit ;
9343: GO 9506
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_INT 81
9352: PUSH
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 255
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 3
9369: PUSH
9370: LD_INT 21
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 69
9392: PPUSH
9393: LD_VAR 0 1
9397: PPUSH
9398: CALL_OW 74
9402: PPUSH
9403: CALL_OW 296
9407: PUSH
9408: LD_INT 8
9410: LESS
9411: IFFALSE 9415
// exit ;
9413: GO 9506
// building := IsInUnit ( unit2 ) ;
9415: LD_ADDR_VAR 0 5
9419: PUSH
9420: LD_VAR 0 2
9424: PPUSH
9425: CALL_OW 310
9429: ST_TO_ADDR
// if building then
9430: LD_VAR 0 5
9434: IFFALSE 9461
// result := IsNearbyEntrance ( unit , building , 2 ) else
9436: LD_ADDR_VAR 0 3
9440: PUSH
9441: LD_VAR 0 1
9445: PPUSH
9446: LD_VAR 0 5
9450: PPUSH
9451: LD_INT 2
9453: PPUSH
9454: CALL 9043 0 3
9458: ST_TO_ADDR
9459: GO 9506
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9461: LD_ADDR_VAR 0 3
9465: PUSH
9466: LD_VAR 0 1
9470: PPUSH
9471: LD_VAR 0 2
9475: PPUSH
9476: CALL_OW 296
9480: PUSH
9481: LD_INT 6
9483: LESS
9484: PUSH
9485: LD_VAR 0 2
9489: PPUSH
9490: CALL_OW 255
9494: PPUSH
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 292
9504: AND
9505: ST_TO_ADDR
// end ;
9506: LD_VAR 0 3
9510: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9511: LD_INT 0
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
// uc_side = 0 ;
9517: LD_ADDR_OWVAR 20
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// uc_nation = 0 ;
9525: LD_ADDR_OWVAR 21
9529: PUSH
9530: LD_INT 0
9532: ST_TO_ADDR
// nat_area := nature_area ;
9533: LD_ADDR_VAR 0 4
9537: PUSH
9538: LD_INT 24
9540: ST_TO_ADDR
// InitHc ;
9541: CALL_OW 19
// for i = 1 to 4 do
9545: LD_ADDR_VAR 0 2
9549: PUSH
9550: DOUBLE
9551: LD_INT 1
9553: DEC
9554: ST_TO_ADDR
9555: LD_INT 4
9557: PUSH
9558: FOR_TO
9559: IFFALSE 9606
// begin hc_class = 18 ;
9561: LD_ADDR_OWVAR 28
9565: PUSH
9566: LD_INT 18
9568: ST_TO_ADDR
// hc_gallery =  ;
9569: LD_ADDR_OWVAR 33
9573: PUSH
9574: LD_STRING 
9576: ST_TO_ADDR
// animal := CreateHuman ;
9577: LD_ADDR_VAR 0 3
9581: PUSH
9582: CALL_OW 44
9586: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9587: LD_VAR 0 3
9591: PPUSH
9592: LD_VAR 0 4
9596: PPUSH
9597: LD_INT 0
9599: PPUSH
9600: CALL_OW 49
// end ;
9604: GO 9558
9606: POP
9607: POP
// for i = 1 to 3 do
9608: LD_ADDR_VAR 0 2
9612: PUSH
9613: DOUBLE
9614: LD_INT 1
9616: DEC
9617: ST_TO_ADDR
9618: LD_INT 3
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9716
// begin hc_class = class_apeman ;
9624: LD_ADDR_OWVAR 28
9628: PUSH
9629: LD_INT 12
9631: ST_TO_ADDR
// hc_gallery =  ;
9632: LD_ADDR_OWVAR 33
9636: PUSH
9637: LD_STRING 
9639: ST_TO_ADDR
// hc_agressivity = 0 ;
9640: LD_ADDR_OWVAR 35
9644: PUSH
9645: LD_INT 0
9647: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9648: LD_ADDR_OWVAR 31
9652: PUSH
9653: LD_INT 1
9655: PPUSH
9656: LD_INT 3
9658: PPUSH
9659: CALL_OW 12
9663: PUSH
9664: LD_INT 1
9666: PPUSH
9667: LD_INT 3
9669: PPUSH
9670: CALL_OW 12
9674: PUSH
9675: LD_INT 0
9677: PUSH
9678: LD_INT 0
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: ST_TO_ADDR
// animal := CreateHuman ;
9687: LD_ADDR_VAR 0 3
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9697: LD_VAR 0 3
9701: PPUSH
9702: LD_VAR 0 4
9706: PPUSH
9707: LD_INT 0
9709: PPUSH
9710: CALL_OW 49
// end ;
9714: GO 9621
9716: POP
9717: POP
// for i = 1 to 3 do
9718: LD_ADDR_VAR 0 2
9722: PUSH
9723: DOUBLE
9724: LD_INT 1
9726: DEC
9727: ST_TO_ADDR
9728: LD_INT 3
9730: PUSH
9731: FOR_TO
9732: IFFALSE 9779
// begin hc_class = 13 ;
9734: LD_ADDR_OWVAR 28
9738: PUSH
9739: LD_INT 13
9741: ST_TO_ADDR
// hc_gallery =  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// animal := CreateHuman ;
9750: LD_ADDR_VAR 0 3
9754: PUSH
9755: CALL_OW 44
9759: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9760: LD_VAR 0 3
9764: PPUSH
9765: LD_VAR 0 4
9769: PPUSH
9770: LD_INT 0
9772: PPUSH
9773: CALL_OW 49
// end ;
9777: GO 9731
9779: POP
9780: POP
// for i = 1 to 3 do
9781: LD_ADDR_VAR 0 2
9785: PUSH
9786: DOUBLE
9787: LD_INT 1
9789: DEC
9790: ST_TO_ADDR
9791: LD_INT 3
9793: PUSH
9794: FOR_TO
9795: IFFALSE 9840
// begin hc_class = 20 ;
9797: LD_ADDR_OWVAR 28
9801: PUSH
9802: LD_INT 20
9804: ST_TO_ADDR
// hc_gallery =  ;
9805: LD_ADDR_OWVAR 33
9809: PUSH
9810: LD_STRING 
9812: ST_TO_ADDR
// animal := CreateHuman ;
9813: LD_ADDR_VAR 0 3
9817: PUSH
9818: CALL_OW 44
9822: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_INT 4
9830: PPUSH
9831: LD_INT 0
9833: PPUSH
9834: CALL_OW 49
// end ;
9838: GO 9794
9840: POP
9841: POP
// end ; end_of_file
9842: LD_VAR 0 1
9846: RET
// export function Action ; begin
9847: LD_INT 0
9849: PPUSH
// InGameOn ;
9850: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9854: LD_EXP 15
9858: PPUSH
9859: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9863: LD_EXP 15
9867: PPUSH
9868: LD_STRING D1-JMM-1
9870: PPUSH
9871: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9875: LD_EXP 16
9879: PPUSH
9880: LD_STRING D1-Roth-1
9882: PPUSH
9883: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9887: LD_EXP 15
9891: PPUSH
9892: LD_STRING D1-JMM-2
9894: PPUSH
9895: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9899: LD_EXP 16
9903: PPUSH
9904: LD_STRING D1-Roth-2
9906: PPUSH
9907: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9911: LD_EXP 15
9915: PPUSH
9916: LD_STRING D1-JMM-3
9918: PPUSH
9919: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9923: LD_EXP 16
9927: PPUSH
9928: LD_STRING D1-Roth-3
9930: PPUSH
9931: CALL_OW 88
// ComInvisible ( Roth ) ;
9935: LD_EXP 16
9939: PPUSH
9940: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9944: LD_INT 46
9946: PPUSH
9947: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9951: LD_EXP 15
9955: PPUSH
9956: LD_STRING D1-JMM-4
9958: PPUSH
9959: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9963: LD_INT 10
9965: PPUSH
9966: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9970: LD_EXP 16
9974: PPUSH
9975: LD_EXP 15
9979: PPUSH
9980: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9984: LD_EXP 15
9988: PPUSH
9989: LD_STRING D1-JMM-4a
9991: PPUSH
9992: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9996: LD_EXP 16
10000: PPUSH
10001: LD_STRING D1-Roth-4
10003: PPUSH
10004: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_STRING D1-JMM-5
10015: PPUSH
10016: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10020: LD_EXP 16
10024: PPUSH
10025: LD_STRING D1-Roth-5
10027: PPUSH
10028: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10032: LD_EXP 15
10036: PPUSH
10037: LD_STRING D1-JMM-6
10039: PPUSH
10040: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10044: LD_EXP 16
10048: PPUSH
10049: LD_STRING D1-Roth-6
10051: PPUSH
10052: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10056: LD_EXP 15
10060: PPUSH
10061: LD_STRING D1-JMM-7
10063: PPUSH
10064: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10068: LD_EXP 17
10072: PPUSH
10073: LD_EXP 15
10077: PPUSH
10078: CALL_OW 250
10082: PPUSH
10083: LD_EXP 15
10087: PPUSH
10088: CALL_OW 251
10092: PPUSH
10093: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10097: LD_EXP 16
10101: PPUSH
10102: LD_STRING D1-Roth-7
10104: PPUSH
10105: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10109: LD_INT 10
10111: PPUSH
10112: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10116: LD_EXP 17
10120: PPUSH
10121: LD_EXP 15
10125: PPUSH
10126: CALL_OW 296
10130: PUSH
10131: LD_INT 6
10133: LESS
10134: IFFALSE 10109
// ComTurnUnit ( Powell , JMM ) ;
10136: LD_EXP 17
10140: PPUSH
10141: LD_EXP 15
10145: PPUSH
10146: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10150: LD_EXP 17
10154: PPUSH
10155: LD_STRING D1-Pow-7
10157: PPUSH
10158: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10162: LD_EXP 15
10166: PPUSH
10167: LD_EXP 17
10171: PPUSH
10172: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10176: LD_EXP 16
10180: PPUSH
10181: LD_EXP 17
10185: PPUSH
10186: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10190: LD_EXP 15
10194: PPUSH
10195: LD_STRING D1-JMM-8
10197: PPUSH
10198: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10202: LD_EXP 17
10206: PPUSH
10207: LD_STRING D1-Pow-8
10209: PPUSH
10210: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10214: LD_EXP 15
10218: PPUSH
10219: LD_STRING D1-JMM-9
10221: PPUSH
10222: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10226: LD_EXP 17
10230: PPUSH
10231: LD_INT 124
10233: PPUSH
10234: LD_INT 61
10236: PPUSH
10237: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10241: LD_INT 35
10243: PPUSH
10244: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10248: LD_EXP 15
10252: PPUSH
10253: LD_EXP 17
10257: PPUSH
10258: CALL_OW 296
10262: PUSH
10263: LD_INT 6
10265: GREATER
10266: IFFALSE 10241
// SayRadio ( Powell , D1-Pow-9 ) ;
10268: LD_EXP 17
10272: PPUSH
10273: LD_STRING D1-Pow-9
10275: PPUSH
10276: CALL_OW 94
// RemoveUnit ( Powell ) ;
10280: LD_EXP 17
10284: PPUSH
10285: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10289: LD_EXP 17
10293: PPUSH
10294: LD_INT 18
10296: PPUSH
10297: CALL_OW 52
// if Joan and not Joan in selected then
10301: LD_EXP 37
10305: PUSH
10306: LD_EXP 37
10310: PUSH
10311: LD_EXP 3
10315: IN
10316: NOT
10317: AND
10318: IFFALSE 10332
// SayRadio ( Joan , D1-Joan-9 ) ;
10320: LD_EXP 37
10324: PPUSH
10325: LD_STRING D1-Joan-9
10327: PPUSH
10328: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10332: LD_EXP 16
10336: PPUSH
10337: LD_EXP 15
10341: PPUSH
10342: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10346: LD_EXP 15
10350: PPUSH
10351: LD_EXP 16
10355: PPUSH
10356: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10360: LD_EXP 16
10364: PPUSH
10365: LD_STRING D1-Roth-9
10367: PPUSH
10368: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10372: LD_EXP 15
10376: PPUSH
10377: LD_STRING D1-JMM-10
10379: PPUSH
10380: CALL_OW 88
// InGameOff ;
10384: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10388: LD_STRING M1
10390: PPUSH
10391: CALL_OW 337
// if Difficulty < 3 then
10395: LD_OWVAR 67
10399: PUSH
10400: LD_INT 3
10402: LESS
10403: IFFALSE 10415
// ChangeSideFog ( 4 , 7 ) ;
10405: LD_INT 4
10407: PPUSH
10408: LD_INT 7
10410: PPUSH
10411: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10415: LD_STRING enableBioCharacter(BIO_ROTH)
10417: PPUSH
10418: CALL_OW 559
// SaveForQuickRestart ;
10422: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10426: LD_INT 7
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: LD_INT 2
10434: PPUSH
10435: LD_INT 1
10437: PPUSH
10438: CALL_OW 80
// wait ( 0 0$3 ) ;
10442: LD_INT 105
10444: PPUSH
10445: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10449: LD_EXP 16
10453: PPUSH
10454: LD_INT 124
10456: PPUSH
10457: LD_INT 18
10459: PPUSH
10460: CALL_OW 111
// AddComInvisible ( Roth ) ;
10464: LD_EXP 16
10468: PPUSH
10469: CALL_OW 212
// wait ( 0 0$30 ) ;
10473: LD_INT 1050
10475: PPUSH
10476: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10480: LD_EXP 16
10484: PPUSH
10485: LD_INT 2100
10487: PPUSH
10488: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10492: LD_EXP 16
10496: PPUSH
10497: LD_INT 156
10499: PPUSH
10500: LD_INT 20
10502: PPUSH
10503: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10507: LD_EXP 16
10511: PPUSH
10512: LD_INT 178
10514: PPUSH
10515: LD_INT 42
10517: PPUSH
10518: CALL_OW 171
// AddComInvisible ( Roth ) ;
10522: LD_EXP 16
10526: PPUSH
10527: CALL_OW 212
// end ;
10531: LD_VAR 0 1
10535: RET
// every 0 0$1 do var i , tmp ;
10536: GO 10538
10538: DISABLE
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
// begin tmp := selected union friends ;
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_EXP 3
10552: PUSH
10553: LD_EXP 4
10557: UNION
10558: ST_TO_ADDR
// if gamma_commander = 1 then
10559: LD_EXP 10
10563: PUSH
10564: LD_INT 1
10566: EQUAL
10567: IFFALSE 10585
// tmp := tmp union Donaldson ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_VAR 0 2
10578: PUSH
10579: LD_EXP 25
10583: UNION
10584: ST_TO_ADDR
// if gamma_commander = 2 then
10585: LD_EXP 10
10589: PUSH
10590: LD_INT 2
10592: EQUAL
10593: IFFALSE 10611
// tmp := tmp union Brown ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_VAR 0 2
10604: PUSH
10605: LD_EXP 29
10609: UNION
10610: ST_TO_ADDR
// if not tmp then
10611: LD_VAR 0 2
10615: NOT
10616: IFFALSE 10620
// exit ;
10618: GO 10692
// repeat wait ( 0 0$1 ) ;
10620: LD_INT 35
10622: PPUSH
10623: CALL_OW 67
// for i in tmp do
10627: LD_ADDR_VAR 0 1
10631: PUSH
10632: LD_VAR 0 2
10636: PUSH
10637: FOR_IN
10638: IFFALSE 10683
// if CanSpot ( JMM , i ) then
10640: LD_EXP 15
10644: PPUSH
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL 9292 0 2
10654: IFFALSE 10681
// begin tmp := tmp diff i ;
10656: LD_ADDR_VAR 0 2
10660: PUSH
10661: LD_VAR 0 2
10665: PUSH
10666: LD_VAR 0 1
10670: DIFF
10671: ST_TO_ADDR
// Spot ( i ) ;
10672: LD_VAR 0 1
10676: PPUSH
10677: CALL 10695 0 1
// end ;
10681: GO 10637
10683: POP
10684: POP
// until not tmp ;
10685: LD_VAR 0 2
10689: NOT
10690: IFFALSE 10620
// end ;
10692: PPOPN 2
10694: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10695: LD_INT 0
10697: PPUSH
10698: PPUSH
10699: PPUSH
10700: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10701: LD_VAR 0 1
10705: NOT
10706: PUSH
10707: LD_VAR 0 1
10711: PPUSH
10712: CALL_OW 255
10716: PUSH
10717: LD_INT 4
10719: NONEQUAL
10720: OR
10721: PUSH
10722: LD_VAR 0 1
10726: PPUSH
10727: CALL_OW 555
10731: OR
10732: PUSH
10733: LD_VAR 0 1
10737: PPUSH
10738: CALL_OW 302
10742: NOT
10743: OR
10744: IFFALSE 10748
// exit ;
10746: GO 12630
// InGameOn ;
10748: CALL_OW 8
// side := 7 ;
10752: LD_ADDR_VAR 0 4
10756: PUSH
10757: LD_INT 7
10759: ST_TO_ADDR
// joined := false ;
10760: LD_ADDR_VAR 0 5
10764: PUSH
10765: LD_INT 0
10767: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10768: LD_ADDR_VAR 0 3
10772: PUSH
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 310
10782: ST_TO_ADDR
// if building then
10783: LD_VAR 0 3
10787: IFFALSE 10846
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10789: LD_EXP 15
10793: PPUSH
10794: LD_VAR 0 1
10798: PPUSH
10799: CALL_OW 255
10803: PPUSH
10804: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10808: LD_EXP 15
10812: PPUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: CALL_OW 120
// repeat wait ( 3 ) ;
10822: LD_INT 3
10824: PPUSH
10825: CALL_OW 67
// until IsInUnit ( JMM ) ;
10829: LD_EXP 15
10833: PPUSH
10834: CALL_OW 310
10838: IFFALSE 10822
// DialogueOn ;
10840: CALL_OW 6
// end else
10844: GO 10878
// begin ComTurnUnit ( JMM , unit ) ;
10846: LD_EXP 15
10850: PPUSH
10851: LD_VAR 0 1
10855: PPUSH
10856: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10860: LD_VAR 0 1
10864: PPUSH
10865: LD_EXP 15
10869: PPUSH
10870: CALL_OW 119
// DialogueOn ;
10874: CALL_OW 6
// end ; if unit = Joan then
10878: LD_VAR 0 1
10882: PUSH
10883: LD_EXP 37
10887: EQUAL
10888: IFFALSE 10998
// begin joined := true ;
10890: LD_ADDR_VAR 0 5
10894: PUSH
10895: LD_INT 1
10897: ST_TO_ADDR
// if Joan in selected then
10898: LD_EXP 37
10902: PUSH
10903: LD_EXP 3
10907: IN
10908: IFFALSE 10936
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10910: LD_EXP 37
10914: PPUSH
10915: LD_STRING D3-Joan-Joan-1
10917: PPUSH
10918: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10922: LD_EXP 15
10926: PPUSH
10927: LD_STRING D3-Joan-JMM-1
10929: PPUSH
10930: CALL_OW 88
// end else
10934: GO 10996
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10936: LD_EXP 37
10940: PPUSH
10941: LD_STRING D4-Joan-Joan-1
10943: PPUSH
10944: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10948: LD_EXP 15
10952: PPUSH
10953: LD_STRING D4-Joan-JMM-1
10955: PPUSH
10956: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10960: LD_EXP 37
10964: PPUSH
10965: LD_STRING D4-Joan-Joan-2
10967: PPUSH
10968: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10972: LD_EXP 15
10976: PPUSH
10977: LD_STRING D4-Joan-JMM-2
10979: PPUSH
10980: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10984: LD_EXP 37
10988: PPUSH
10989: LD_STRING D4-Joan-Joan-3
10991: PPUSH
10992: CALL_OW 88
// end ; end else
10996: GO 12438
// if unit = Lisa then
10998: LD_VAR 0 1
11002: PUSH
11003: LD_EXP 24
11007: EQUAL
11008: IFFALSE 11200
// begin if Lisa in selected then
11010: LD_EXP 24
11014: PUSH
11015: LD_EXP 3
11019: IN
11020: IFFALSE 11133
// begin if GetSide ( Joan ) = 7 then
11022: LD_EXP 37
11026: PPUSH
11027: CALL_OW 255
11031: PUSH
11032: LD_INT 7
11034: EQUAL
11035: IFFALSE 11099
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11037: LD_EXP 24
11041: PPUSH
11042: LD_STRING D3-LisaJ-Lisa-1
11044: PPUSH
11045: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11049: LD_EXP 15
11053: PPUSH
11054: LD_STRING D3-LisaJ-JMM-1
11056: PPUSH
11057: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11061: LD_EXP 24
11065: PPUSH
11066: LD_STRING D3-LisaJ-Lisa-2
11068: PPUSH
11069: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11073: LD_EXP 15
11077: PPUSH
11078: LD_STRING D3-LisaJ-JMM-2
11080: PPUSH
11081: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11085: LD_EXP 24
11089: PPUSH
11090: LD_STRING D3-LisaJ-Lisa-3
11092: PPUSH
11093: CALL_OW 88
// end else
11097: GO 11131
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11099: LD_EXP 24
11103: PPUSH
11104: LD_STRING D3-LisaL-Lisa-1
11106: PPUSH
11107: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11111: LD_EXP 15
11115: PPUSH
11116: LD_STRING D3-LisaL-JMM-1
11118: PPUSH
11119: CALL_OW 88
// joined := true ;
11123: LD_ADDR_VAR 0 5
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// end ; end else
11131: GO 11198
// begin if GetSide ( Joan ) = 7 then
11133: LD_EXP 37
11137: PPUSH
11138: CALL_OW 255
11142: PUSH
11143: LD_INT 7
11145: EQUAL
11146: IFFALSE 11186
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11148: LD_EXP 24
11152: PPUSH
11153: LD_STRING D4-LisaJ-Lisa-1
11155: PPUSH
11156: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11160: LD_EXP 15
11164: PPUSH
11165: LD_STRING D4-LisaJ-JMM-1
11167: PPUSH
11168: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11172: LD_EXP 24
11176: PPUSH
11177: LD_STRING D4-LisaJ-Lisa-2
11179: PPUSH
11180: CALL_OW 88
// end else
11184: GO 11198
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11186: LD_EXP 24
11190: PPUSH
11191: LD_STRING D4-LisaL-Lisa-1
11193: PPUSH
11194: CALL_OW 88
// end ; end ; end else
11198: GO 12438
// if unit = Frank then
11200: LD_VAR 0 1
11204: PUSH
11205: LD_EXP 34
11209: EQUAL
11210: IFFALSE 11350
// begin joined := true ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_INT 1
11219: ST_TO_ADDR
// if Frank in selected then
11220: LD_EXP 34
11224: PUSH
11225: LD_EXP 3
11229: IN
11230: IFFALSE 11300
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11232: LD_EXP 34
11236: PPUSH
11237: LD_STRING D3-Frank-Frank-1
11239: PPUSH
11240: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11244: LD_EXP 15
11248: PPUSH
11249: LD_STRING D3-Frank-JMM-1
11251: PPUSH
11252: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11256: LD_EXP 34
11260: PPUSH
11261: LD_STRING D3-Frank-Frank-2
11263: PPUSH
11264: CALL_OW 88
// if reached_lab then
11268: LD_EXP 5
11272: IFFALSE 11298
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11274: LD_EXP 15
11278: PPUSH
11279: LD_STRING D3-Frank-JMM-2
11281: PPUSH
11282: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11286: LD_EXP 34
11290: PPUSH
11291: LD_STRING D3-Frank-Frank-3
11293: PPUSH
11294: CALL_OW 88
// end ; end else
11298: GO 11348
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11300: LD_EXP 34
11304: PPUSH
11305: LD_STRING D4-Frank-Frank-1
11307: PPUSH
11308: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11312: LD_EXP 15
11316: PPUSH
11317: LD_STRING D4-Frank-JMM-1
11319: PPUSH
11320: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11324: LD_EXP 34
11328: PPUSH
11329: LD_STRING D4-Frank-Frank-2
11331: PPUSH
11332: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11336: LD_EXP 15
11340: PPUSH
11341: LD_STRING D4-Frank-JMM-2
11343: PPUSH
11344: CALL_OW 88
// end ; end else
11348: GO 12438
// if unit = Brown then
11350: LD_VAR 0 1
11354: PUSH
11355: LD_EXP 29
11359: EQUAL
11360: IFFALSE 11456
// begin if Brown in selected or gamma_commander = 2 then
11362: LD_EXP 29
11366: PUSH
11367: LD_EXP 3
11371: IN
11372: PUSH
11373: LD_EXP 10
11377: PUSH
11378: LD_INT 2
11380: EQUAL
11381: OR
11382: IFFALSE 11418
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11384: LD_EXP 29
11388: PPUSH
11389: LD_STRING D3-Soldier1-Sol1-1
11391: PPUSH
11392: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11396: LD_EXP 15
11400: PPUSH
11401: LD_STRING D6-JMM-Brown-1
11403: PPUSH
11404: CALL_OW 88
// joined := true ;
11408: LD_ADDR_VAR 0 5
11412: PUSH
11413: LD_INT 1
11415: ST_TO_ADDR
// end else
11416: GO 11454
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11418: LD_EXP 29
11422: PPUSH
11423: LD_STRING D4-Soldier2-Sol1-1
11425: PPUSH
11426: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11430: LD_EXP 15
11434: PPUSH
11435: LD_STRING D4-Soldier1-JMM-1
11437: PPUSH
11438: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11442: LD_EXP 29
11446: PPUSH
11447: LD_STRING D4-Soldier2-Sol1-2
11449: PPUSH
11450: CALL_OW 88
// end ; end else
11454: GO 12438
// if unit = Donaldson then
11456: LD_VAR 0 1
11460: PUSH
11461: LD_EXP 25
11465: EQUAL
11466: IFFALSE 11562
// begin if Donaldson in selected or gamma_commander = 1 then
11468: LD_EXP 25
11472: PUSH
11473: LD_EXP 3
11477: IN
11478: PUSH
11479: LD_EXP 10
11483: PUSH
11484: LD_INT 1
11486: EQUAL
11487: OR
11488: IFFALSE 11524
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11490: LD_EXP 25
11494: PPUSH
11495: LD_STRING D3-Soldier2-FSol2-1
11497: PPUSH
11498: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11502: LD_EXP 15
11506: PPUSH
11507: LD_STRING D3-Soldier2-JMM-1
11509: PPUSH
11510: CALL_OW 88
// joined := true ;
11514: LD_ADDR_VAR 0 5
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// end else
11522: GO 11560
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11524: LD_EXP 25
11528: PPUSH
11529: LD_STRING D4-Soldier1-FSol1-1
11531: PPUSH
11532: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11536: LD_EXP 15
11540: PPUSH
11541: LD_STRING D4-Soldier1-JMM-1
11543: PPUSH
11544: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11548: LD_EXP 25
11552: PPUSH
11553: LD_STRING D4-Soldier1-FSol1-2
11555: PPUSH
11556: CALL_OW 88
// end ; end else
11560: GO 12438
// if unit = Cyrus then
11562: LD_VAR 0 1
11566: PUSH
11567: LD_EXP 27
11571: EQUAL
11572: IFFALSE 11646
// begin if Cyrus in selected then
11574: LD_EXP 27
11578: PUSH
11579: LD_EXP 3
11583: IN
11584: IFFALSE 11620
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11586: LD_EXP 27
11590: PPUSH
11591: LD_STRING D3-Cyrus-Cyrus-1
11593: PPUSH
11594: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11598: LD_EXP 15
11602: PPUSH
11603: LD_STRING D3-Cyrus-JMM-1
11605: PPUSH
11606: CALL_OW 88
// joined := true ;
11610: LD_ADDR_VAR 0 5
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// end else
11618: GO 11644
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11620: LD_EXP 27
11624: PPUSH
11625: LD_STRING D4-Cyrus-Cyrus-1
11627: PPUSH
11628: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11632: LD_EXP 15
11636: PPUSH
11637: LD_STRING D4-Cyrus-JMM-1
11639: PPUSH
11640: CALL_OW 88
// end ; end else
11644: GO 12438
// if unit = Bobby then
11646: LD_VAR 0 1
11650: PUSH
11651: LD_EXP 26
11655: EQUAL
11656: IFFALSE 11742
// begin if Bobby in selected then
11658: LD_EXP 26
11662: PUSH
11663: LD_EXP 3
11667: IN
11668: IFFALSE 11704
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11670: LD_EXP 26
11674: PPUSH
11675: LD_STRING D3-Bobby-Bobby-1
11677: PPUSH
11678: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11682: LD_EXP 15
11686: PPUSH
11687: LD_STRING D3-Bobby-JMM-1
11689: PPUSH
11690: CALL_OW 88
// joined := true ;
11694: LD_ADDR_VAR 0 5
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// end else
11702: GO 11740
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11704: LD_EXP 26
11708: PPUSH
11709: LD_STRING D4-Bobby-Bobby-1
11711: PPUSH
11712: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11716: LD_EXP 15
11720: PPUSH
11721: LD_STRING D4-Bobby-JMM-1
11723: PPUSH
11724: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11728: LD_EXP 26
11732: PPUSH
11733: LD_STRING D4-Bobby-Bobby-2
11735: PPUSH
11736: CALL_OW 88
// end ; end else
11740: GO 12438
// if unit = Cornel then
11742: LD_VAR 0 1
11746: PUSH
11747: LD_EXP 32
11751: EQUAL
11752: IFFALSE 11850
// begin if Cornel in selected then
11754: LD_EXP 32
11758: PUSH
11759: LD_EXP 3
11763: IN
11764: IFFALSE 11812
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11766: LD_EXP 32
11770: PPUSH
11771: LD_STRING D3-Mark-Corn-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11778: LD_EXP 15
11782: PPUSH
11783: LD_STRING D3-Mark-JMM-1
11785: PPUSH
11786: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11790: LD_EXP 32
11794: PPUSH
11795: LD_STRING D3-Mark-Corn-2
11797: PPUSH
11798: CALL_OW 88
// joined := true ;
11802: LD_ADDR_VAR 0 5
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// end else
11810: GO 11848
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11812: LD_EXP 32
11816: PPUSH
11817: LD_STRING D4-Mark-Corn-1
11819: PPUSH
11820: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11824: LD_EXP 15
11828: PPUSH
11829: LD_STRING D4-Mark-JMM-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11836: LD_EXP 32
11840: PPUSH
11841: LD_STRING D4-Mark-Corn-2
11843: PPUSH
11844: CALL_OW 88
// end ; end else
11848: GO 12438
// if unit = Gary then
11850: LD_VAR 0 1
11854: PUSH
11855: LD_EXP 33
11859: EQUAL
11860: IFFALSE 11944
// begin if Gary in selected then
11862: LD_EXP 33
11866: PUSH
11867: LD_EXP 3
11871: IN
11872: IFFALSE 11908
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11874: LD_EXP 33
11878: PPUSH
11879: LD_STRING D3-Gary-Gary-1
11881: PPUSH
11882: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11886: LD_EXP 15
11890: PPUSH
11891: LD_STRING D3-Gary-JMM-1
11893: PPUSH
11894: CALL_OW 88
// joined := true ;
11898: LD_ADDR_VAR 0 5
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// end else
11906: GO 11942
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11908: LD_EXP 33
11912: PPUSH
11913: LD_STRING D4-Gary-Gary-1
11915: PPUSH
11916: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11920: LD_EXP 33
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 235
// DialogueOff ;
11932: CALL_OW 7
// InGameOff ;
11936: CALL_OW 9
// exit ;
11940: GO 12630
// end ; end else
11942: GO 12438
// if unit = Kikuchi then
11944: LD_VAR 0 1
11948: PUSH
11949: LD_EXP 35
11953: EQUAL
11954: IFFALSE 12038
// begin if Kikuchi in selected then
11956: LD_EXP 35
11960: PUSH
11961: LD_EXP 3
11965: IN
11966: IFFALSE 12002
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11968: LD_EXP 35
11972: PPUSH
11973: LD_STRING D3-Yamako-Yam-1
11975: PPUSH
11976: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11980: LD_EXP 15
11984: PPUSH
11985: LD_STRING D3-Soldier2-JMM-1
11987: PPUSH
11988: CALL_OW 88
// joined := true ;
11992: LD_ADDR_VAR 0 5
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// end else
12000: GO 12036
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
12002: LD_EXP 35
12006: PPUSH
12007: LD_STRING D4-Yamako-Yam-1
12009: PPUSH
12010: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12014: LD_EXP 35
12018: PPUSH
12019: LD_INT 1
12021: PPUSH
12022: CALL_OW 235
// DialogueOff ;
12026: CALL_OW 7
// InGameOff ;
12030: CALL_OW 9
// exit ;
12034: GO 12630
// end ; end else
12036: GO 12438
// if unit = Gladstone then
12038: LD_VAR 0 1
12042: PUSH
12043: LD_EXP 30
12047: EQUAL
12048: IFFALSE 12122
// begin if Gladstone in selected then
12050: LD_EXP 30
12054: PUSH
12055: LD_EXP 3
12059: IN
12060: IFFALSE 12096
// begin joined := true ;
12062: LD_ADDR_VAR 0 5
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12070: LD_EXP 15
12074: PPUSH
12075: LD_STRING D3-Tim-JMM-1
12077: PPUSH
12078: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12082: LD_EXP 30
12086: PPUSH
12087: LD_STRING D3-Tim-Glad-1
12089: PPUSH
12090: CALL_OW 88
// end else
12094: GO 12120
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12096: LD_EXP 15
12100: PPUSH
12101: LD_STRING D4-Tim-JMM-1
12103: PPUSH
12104: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12108: LD_EXP 30
12112: PPUSH
12113: LD_STRING D4-Tim-Glad-1
12115: PPUSH
12116: CALL_OW 88
// end ; end else
12120: GO 12438
// if unit = Denis then
12122: LD_VAR 0 1
12126: PUSH
12127: LD_EXP 28
12131: EQUAL
12132: IFFALSE 12168
// begin joined := true ;
12134: LD_ADDR_VAR 0 5
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12142: LD_EXP 28
12146: PPUSH
12147: LD_STRING D3-Denis-Den-1
12149: PPUSH
12150: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12154: LD_EXP 15
12158: PPUSH
12159: LD_STRING D3-Denis-JMM-1
12161: PPUSH
12162: CALL_OW 88
// end else
12166: GO 12438
// if unit = Simms then
12168: LD_VAR 0 1
12172: PUSH
12173: LD_EXP 36
12177: EQUAL
12178: IFFALSE 12214
// begin joined := true ;
12180: LD_ADDR_VAR 0 5
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12188: LD_EXP 36
12192: PPUSH
12193: LD_STRING D3-Simms-Sim-1
12195: PPUSH
12196: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12200: LD_EXP 15
12204: PPUSH
12205: LD_STRING D3-Simms-JMM-1
12207: PPUSH
12208: CALL_OW 88
// end else
12212: GO 12438
// if unit = DeltaDoctor then
12214: LD_VAR 0 1
12218: PUSH
12219: LD_EXP 38
12223: EQUAL
12224: IFFALSE 12260
// begin joined := true ;
12226: LD_ADDR_VAR 0 5
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12234: LD_EXP 38
12238: PPUSH
12239: LD_STRING D3-Soldier1-Sol1-1
12241: PPUSH
12242: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12246: LD_EXP 15
12250: PPUSH
12251: LD_STRING D3-Soldier1-JMM-1
12253: PPUSH
12254: CALL_OW 88
// end else
12258: GO 12438
// begin joined := unit in selected ;
12260: LD_ADDR_VAR 0 5
12264: PUSH
12265: LD_VAR 0 1
12269: PUSH
12270: LD_EXP 3
12274: IN
12275: ST_TO_ADDR
// if joined then
12276: LD_VAR 0 5
12280: IFFALSE 12349
// begin if GetSex ( unit ) = sex_male then
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 258
12291: PUSH
12292: LD_INT 1
12294: EQUAL
12295: IFFALSE 12323
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12297: LD_VAR 0 1
12301: PPUSH
12302: LD_STRING D3-Soldier1-Sol1-1
12304: PPUSH
12305: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12309: LD_EXP 15
12313: PPUSH
12314: LD_STRING D3-Soldier1-JMM-1
12316: PPUSH
12317: CALL_OW 88
// end else
12321: GO 12347
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12323: LD_VAR 0 1
12327: PPUSH
12328: LD_STRING D3-Soldier2-FSol2-1
12330: PPUSH
12331: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12335: LD_EXP 15
12339: PPUSH
12340: LD_STRING D3-Soldier2-JMM-1
12342: PPUSH
12343: CALL_OW 88
// end ; end else
12347: GO 12438
// begin if GetSex ( unit ) = sex_male then
12349: LD_VAR 0 1
12353: PPUSH
12354: CALL_OW 258
12358: PUSH
12359: LD_INT 1
12361: EQUAL
12362: IFFALSE 12402
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12364: LD_VAR 0 1
12368: PPUSH
12369: LD_STRING D4-Soldier2-Sol1-1
12371: PPUSH
12372: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12376: LD_EXP 15
12380: PPUSH
12381: LD_STRING D4-Soldier2-JMM-1
12383: PPUSH
12384: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12388: LD_VAR 0 1
12392: PPUSH
12393: LD_STRING D4-Soldier2-Sol2-1
12395: PPUSH
12396: CALL_OW 88
// end else
12400: GO 12438
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12402: LD_VAR 0 1
12406: PPUSH
12407: LD_STRING D4-Soldier1-FSol1-1
12409: PPUSH
12410: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12414: LD_EXP 15
12418: PPUSH
12419: LD_STRING D4-Soldier1-JMM-1
12421: PPUSH
12422: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12426: LD_VAR 0 1
12430: PPUSH
12431: LD_STRING D4-Soldier1-FSol1-2
12433: PPUSH
12434: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12438: CALL_OW 7
// InGameOff ;
12442: CALL_OW 9
// if building then
12446: LD_VAR 0 3
12450: IFFALSE 12551
// begin SetSide ( JMM , side ) ;
12452: LD_EXP 15
12456: PPUSH
12457: LD_VAR 0 4
12461: PPUSH
12462: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12466: LD_EXP 15
12470: PPUSH
12471: CALL_OW 122
// if joined then
12475: LD_VAR 0 5
12479: IFFALSE 12518
// begin SetSide ( unit , side ) ;
12481: LD_VAR 0 1
12485: PPUSH
12486: LD_VAR 0 4
12490: PPUSH
12491: CALL_OW 235
// SetSide ( building , 1 ) ;
12495: LD_VAR 0 3
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: CALL_OW 235
// ComExitBuilding ( unit ) ;
12507: LD_VAR 0 1
12511: PPUSH
12512: CALL_OW 122
// end else
12516: GO 12549
// begin wait ( 0 0$10 ) ;
12518: LD_INT 350
12520: PPUSH
12521: CALL_OW 67
// SetSide ( unit , 1 ) ;
12525: LD_VAR 0 1
12529: PPUSH
12530: LD_INT 1
12532: PPUSH
12533: CALL_OW 235
// SetSide ( building , 1 ) ;
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 235
// end ; end else
12549: GO 12630
// begin ComStop ( [ JMM , unit ] ) ;
12551: LD_EXP 15
12555: PUSH
12556: LD_VAR 0 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 141
// if joined then
12569: LD_VAR 0 5
12573: IFFALSE 12591
// SetSide ( unit , side ) else
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_VAR 0 4
12584: PPUSH
12585: CALL_OW 235
12589: GO 12630
// begin repeat wait ( 0 0$1 ) ;
12591: LD_INT 35
12593: PPUSH
12594: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12598: LD_EXP 15
12602: PPUSH
12603: LD_VAR 0 1
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 11
12615: GREATER
12616: IFFALSE 12591
// SetSide ( unit , 1 ) ;
12618: LD_VAR 0 1
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL_OW 235
// end ; end ; end ;
12630: LD_VAR 0 2
12634: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12635: LD_EXP 15
12639: PPUSH
12640: LD_EXP 39
12644: PPUSH
12645: CALL_OW 296
12649: PUSH
12650: LD_INT 6
12652: LESS
12653: PUSH
12654: LD_INT 7
12656: PPUSH
12657: LD_EXP 39
12661: PPUSH
12662: CALL_OW 292
12666: AND
12667: IFFALSE 12725
12669: GO 12671
12671: DISABLE
// begin DialogueOn ;
12672: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12685: LD_EXP 15
12689: PPUSH
12690: LD_STRING D6-JMM-Mike-1
12692: PPUSH
12693: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12697: LD_EXP 39
12701: PPUSH
12702: LD_STRING D6-Mike-1
12704: PPUSH
12705: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12709: LD_EXP 39
12713: PPUSH
12714: LD_INT 7
12716: PPUSH
12717: CALL_OW 235
// DialogueOff ;
12721: CALL_OW 7
// end ;
12725: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12726: LD_EXP 15
12730: PPUSH
12731: CALL_OW 310
12735: PUSH
12736: LD_INT 47
12738: EQUAL
12739: IFFALSE 12807
12741: GO 12743
12743: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12744: LD_STRING M1a
12746: PPUSH
12747: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12751: LD_INT 13
12753: PPUSH
12754: LD_INT 7
12756: PPUSH
12757: LD_INT 2
12759: PPUSH
12760: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12764: LD_INT 29
12766: PPUSH
12767: LD_INT 7
12769: PPUSH
12770: LD_INT 2
12772: PPUSH
12773: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12777: LD_EXP 15
12781: PPUSH
12782: LD_INT 9
12784: PPUSH
12785: CALL_OW 336
// can_escape := true ;
12789: LD_ADDR_EXP 6
12793: PUSH
12794: LD_INT 1
12796: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12797: LD_INT 19
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: CALL_OW 424
// end ;
12807: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12808: LD_EXP 17
12812: PPUSH
12813: CALL_OW 256
12817: PUSH
12818: LD_INT 999
12820: LESS
12821: IFFALSE 12872
12823: GO 12825
12825: DISABLE
// begin enable ;
12826: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12827: LD_INT 25
12829: PPUSH
12830: LD_INT 48
12832: PPUSH
12833: CALL_OW 428
12837: PUSH
12838: LD_EXP 17
12842: EQUAL
12843: IFFALSE 12857
// begin RemoveUnit ( Powell ) ;
12845: LD_EXP 17
12849: PPUSH
12850: CALL_OW 64
// disable ;
12854: DISABLE
// end else
12855: GO 12872
// ComMoveXY ( Powell , 25 , 48 ) ;
12857: LD_EXP 17
12861: PPUSH
12862: LD_INT 25
12864: PPUSH
12865: LD_INT 48
12867: PPUSH
12868: CALL_OW 111
// end ;
12872: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12873: LD_INT 22
12875: PUSH
12876: LD_INT 4
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 21
12885: PUSH
12886: LD_INT 1
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 3
12895: PUSH
12896: LD_INT 24
12898: PUSH
12899: LD_INT 990
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 69
12919: PUSH
12920: LD_EXP 16
12924: DIFF
12925: IFFALSE 13069
12927: GO 12929
12929: DISABLE
12930: LD_INT 0
12932: PPUSH
// begin enable ;
12933: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_INT 22
12941: PUSH
12942: LD_INT 4
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 3
12961: PUSH
12962: LD_INT 24
12964: PUSH
12965: LD_INT 990
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: PPUSH
12981: CALL_OW 69
12985: PUSH
12986: LD_EXP 16
12990: DIFF
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13067
// begin ComFree ( i ) ;
12995: LD_VAR 0 1
12999: PPUSH
13000: CALL_OW 139
// SetSide ( i , 1 ) ;
13004: LD_VAR 0 1
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13016: LD_VAR 0 1
13020: PPUSH
13021: LD_EXP 15
13025: PPUSH
13026: CALL_OW 296
13030: PUSH
13031: LD_INT 14
13033: LESS
13034: IFFALSE 13065
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13036: LD_VAR 0 1
13040: PPUSH
13041: LD_EXP 15
13045: PPUSH
13046: CALL_OW 250
13050: PPUSH
13051: LD_EXP 15
13055: PPUSH
13056: CALL_OW 251
13060: PPUSH
13061: CALL_OW 114
// end ;
13065: GO 12992
13067: POP
13068: POP
// end ;
13069: PPOPN 1
13071: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13072: LD_INT 22
13074: PUSH
13075: LD_INT 4
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 34
13084: PUSH
13085: LD_INT 12
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 69
13100: IFFALSE 13182
13102: GO 13104
13104: DISABLE
13105: LD_INT 0
13107: PPUSH
// begin enable ;
13108: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_INT 22
13116: PUSH
13117: LD_INT 4
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 34
13126: PUSH
13127: LD_INT 12
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PPUSH
13138: CALL_OW 69
13142: PUSH
13143: FOR_IN
13144: IFFALSE 13180
// if GetDistUnits ( i , JMM ) < 6 then
13146: LD_VAR 0 1
13150: PPUSH
13151: LD_EXP 15
13155: PPUSH
13156: CALL_OW 296
13160: PUSH
13161: LD_INT 6
13163: LESS
13164: IFFALSE 13178
// SetSide ( i , 7 ) ;
13166: LD_VAR 0 1
13170: PPUSH
13171: LD_INT 7
13173: PPUSH
13174: CALL_OW 235
13178: GO 13143
13180: POP
13181: POP
// end ;
13182: PPOPN 1
13184: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13185: LD_EXP 6
13189: PUSH
13190: LD_INT 19
13192: PPUSH
13193: LD_INT 22
13195: PUSH
13196: LD_INT 7
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 50
13205: PUSH
13206: EMPTY
13207: LIST
13208: PUSH
13209: LD_INT 21
13211: PUSH
13212: LD_INT 1
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 71
13228: NOT
13229: AND
13230: PUSH
13231: LD_INT 3
13233: PPUSH
13234: CALL_OW 469
13238: NOT
13239: AND
13240: PUSH
13241: LD_INT 5
13243: PPUSH
13244: CALL_OW 469
13248: NOT
13249: AND
13250: IFFALSE 14922
13252: GO 13254
13254: DISABLE
13255: LD_INT 0
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
// begin m1 := false ;
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// m2 := false ;
13270: LD_ADDR_VAR 0 4
13274: PUSH
13275: LD_INT 0
13277: ST_TO_ADDR
// m3 := false ;
13278: LD_ADDR_VAR 0 5
13282: PUSH
13283: LD_INT 0
13285: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13286: LD_ADDR_VAR 0 1
13290: PUSH
13291: LD_EXP 3
13295: PPUSH
13296: LD_INT 22
13298: PUSH
13299: LD_INT 4
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 21
13308: PUSH
13309: LD_INT 1
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PPUSH
13320: CALL_OW 72
13324: PUSH
13325: LD_INT 0
13327: EQUAL
13328: ST_TO_ADDR
// if not all_taken then
13329: LD_VAR 0 1
13333: NOT
13334: IFFALSE 13464
// begin if Query ( Q1 ) = 1 then
13336: LD_STRING Q1
13338: PPUSH
13339: CALL_OW 97
13343: PUSH
13344: LD_INT 1
13346: EQUAL
13347: IFFALSE 13464
// begin repeat wait ( 0 0$1 ) ;
13349: LD_INT 35
13351: PPUSH
13352: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13356: LD_EXP 3
13360: PPUSH
13361: LD_INT 22
13363: PUSH
13364: LD_INT 4
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 21
13373: PUSH
13374: LD_INT 1
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PPUSH
13385: CALL_OW 72
13389: PUSH
13390: LD_INT 0
13392: EQUAL
13393: PUSH
13394: LD_INT 19
13396: PPUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 7
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 50
13409: PUSH
13410: EMPTY
13411: LIST
13412: PUSH
13413: LD_INT 21
13415: PUSH
13416: LD_INT 1
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 71
13432: NOT
13433: AND
13434: PUSH
13435: LD_INT 3
13437: PPUSH
13438: CALL_OW 469
13442: NOT
13443: AND
13444: PUSH
13445: LD_INT 5
13447: PPUSH
13448: CALL_OW 469
13452: NOT
13453: AND
13454: IFFALSE 13349
// all_taken := true ;
13456: LD_ADDR_VAR 0 1
13460: PUSH
13461: LD_INT 1
13463: ST_TO_ADDR
// end ; end ; if team_kill_counter < 3 then
13464: LD_EXP 9
13468: PUSH
13469: LD_INT 3
13471: LESS
13472: IFFALSE 13488
// Say ( JMM , D5-JMM-1 ) else
13474: LD_EXP 15
13478: PPUSH
13479: LD_STRING D5-JMM-1
13481: PPUSH
13482: CALL_OW 88
13486: GO 13500
// Say ( JMM , D5-JMM-1a ) ;
13488: LD_EXP 15
13492: PPUSH
13493: LD_STRING D5-JMM-1a
13495: PPUSH
13496: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13500: LD_INT 22
13502: PUSH
13503: LD_INT 7
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 21
13512: PUSH
13513: LD_INT 1
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 23
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: PPUSH
13535: CALL_OW 69
13539: PUSH
13540: LD_EXP 15
13544: PUSH
13545: LD_EXP 16
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: DIFF
13554: PUSH
13555: LD_INT 10
13557: GREATEREQUAL
13558: IFFALSE 13567
// SetAchievement ( ACH_TEAM ) ;
13560: LD_STRING ACH_TEAM
13562: PPUSH
13563: CALL_OW 543
// if not invis_used then
13567: LD_EXP 12
13571: NOT
13572: IFFALSE 13588
// begin wait ( 3 ) ;
13574: LD_INT 3
13576: PPUSH
13577: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13581: LD_STRING ACH_NOINVIS
13583: PPUSH
13584: CALL_OW 543
// end ; if not alert then
13588: LD_EXP 13
13592: NOT
13593: IFFALSE 13609
// begin wait ( 3 ) ;
13595: LD_INT 3
13597: PPUSH
13598: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13602: LD_STRING ACH_ALARM
13604: PPUSH
13605: CALL_OW 543
// end ; if tick < 15 15$00 then
13609: LD_OWVAR 1
13613: PUSH
13614: LD_INT 31500
13616: LESS
13617: IFFALSE 13633
// begin wait ( 3 ) ;
13619: LD_INT 3
13621: PPUSH
13622: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13626: LD_STRING ACH_ASPEED_16
13628: PPUSH
13629: CALL_OW 543
// end ; if all_taken then
13633: LD_VAR 0 1
13637: IFFALSE 13659
// begin AddMedal ( All , 1 ) ;
13639: LD_STRING All
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 101
// m1 := true ;
13649: LD_ADDR_VAR 0 3
13653: PUSH
13654: LD_INT 1
13656: ST_TO_ADDR
// end else
13657: GO 13670
// AddMedal ( All , - 1 ) ;
13659: LD_STRING All
13661: PPUSH
13662: LD_INT 1
13664: NEG
13665: PPUSH
13666: CALL_OW 101
// if team_kill_counter then
13670: LD_EXP 9
13674: IFFALSE 13689
// AddMedal ( Save , - 1 ) else
13676: LD_STRING Save
13678: PPUSH
13679: LD_INT 1
13681: NEG
13682: PPUSH
13683: CALL_OW 101
13687: GO 13707
// begin AddMedal ( Save , 1 ) ;
13689: LD_STRING Save
13691: PPUSH
13692: LD_INT 1
13694: PPUSH
13695: CALL_OW 101
// m2 := true ;
13699: LD_ADDR_VAR 0 4
13703: PUSH
13704: LD_INT 1
13706: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13707: LD_EXP 8
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 2
13717: PUSH
13718: LD_INT 1
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: LD_OWVAR 67
13734: ARRAY
13735: GREATEREQUAL
13736: IFFALSE 13751
// AddMedal ( Friendship , - 1 ) else
13738: LD_STRING Friendship
13740: PPUSH
13741: LD_INT 1
13743: NEG
13744: PPUSH
13745: CALL_OW 101
13749: GO 13769
// begin AddMedal ( Friendship , 1 ) ;
13751: LD_STRING Friendship
13753: PPUSH
13754: LD_INT 1
13756: PPUSH
13757: CALL_OW 101
// m3 := true ;
13761: LD_ADDR_VAR 0 5
13765: PUSH
13766: LD_INT 1
13768: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13769: LD_VAR 0 3
13773: PUSH
13774: LD_VAR 0 4
13778: AND
13779: PUSH
13780: LD_VAR 0 5
13784: AND
13785: PUSH
13786: LD_OWVAR 67
13790: PUSH
13791: LD_INT 3
13793: GREATEREQUAL
13794: AND
13795: IFFALSE 13807
// SetAchievementEX ( ACH_AMER , 16 ) ;
13797: LD_STRING ACH_AMER
13799: PPUSH
13800: LD_INT 16
13802: PPUSH
13803: CALL_OW 564
// GiveMedals ( MAIN ) ;
13807: LD_STRING MAIN
13809: PPUSH
13810: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13814: LD_ADDR_VAR 0 2
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_INT 7
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: LD_INT 25
13834: PUSH
13835: LD_INT 1
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 25
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 25
13854: PUSH
13855: LD_INT 3
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 25
13864: PUSH
13865: LD_INT 4
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 25
13874: PUSH
13875: LD_INT 5
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 25
13884: PUSH
13885: LD_INT 8
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 25
13894: PUSH
13895: LD_INT 9
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 25
13904: PUSH
13905: LD_INT 16
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: PPUSH
13930: CALL_OW 69
13934: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13935: LD_VAR 0 2
13939: PUSH
13940: LD_EXP 16
13944: UNION
13945: PUSH
13946: LD_EXP 39
13950: DIFF
13951: PPUSH
13952: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13956: LD_EXP 15
13960: PPUSH
13961: LD_STRING 12a_JMM
13963: PPUSH
13964: CALL_OW 38
// if IsLive ( Roth ) then
13968: LD_EXP 16
13972: PPUSH
13973: CALL_OW 300
13977: IFFALSE 13991
// SaveCharacters ( Roth , 12a_Roth ) ;
13979: LD_EXP 16
13983: PPUSH
13984: LD_STRING 12a_Roth
13986: PPUSH
13987: CALL_OW 38
// if Lisa in tmp then
13991: LD_EXP 24
13995: PUSH
13996: LD_VAR 0 2
14000: IN
14001: IFFALSE 14017
// SaveCharacters ( Lisa , 12a_Lisa ) else
14003: LD_EXP 24
14007: PPUSH
14008: LD_STRING 12a_Lisa
14010: PPUSH
14011: CALL_OW 38
14015: GO 14035
// if Lisa then
14017: LD_EXP 24
14021: IFFALSE 14035
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14023: LD_EXP 24
14027: PPUSH
14028: LD_STRING 12p_Lisa
14030: PPUSH
14031: CALL_OW 38
// if Mike in tmp then
14035: LD_EXP 39
14039: PUSH
14040: LD_VAR 0 2
14044: IN
14045: IFFALSE 14059
// SaveCharacters ( Mike , 12a_Mike ) ;
14047: LD_EXP 39
14051: PPUSH
14052: LD_STRING 12a_Mike
14054: PPUSH
14055: CALL_OW 38
// if Donaldson in tmp then
14059: LD_EXP 25
14063: PUSH
14064: LD_VAR 0 2
14068: IN
14069: IFFALSE 14085
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14071: LD_EXP 25
14075: PPUSH
14076: LD_STRING 12a_Donaldson
14078: PPUSH
14079: CALL_OW 38
14083: GO 14103
// if Donaldson then
14085: LD_EXP 25
14089: IFFALSE 14103
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14091: LD_EXP 25
14095: PPUSH
14096: LD_STRING 12p_Donaldson
14098: PPUSH
14099: CALL_OW 38
// if Bobby in tmp then
14103: LD_EXP 26
14107: PUSH
14108: LD_VAR 0 2
14112: IN
14113: IFFALSE 14129
// SaveCharacters ( Bobby , 12a_Bobby ) else
14115: LD_EXP 26
14119: PPUSH
14120: LD_STRING 12a_Bobby
14122: PPUSH
14123: CALL_OW 38
14127: GO 14147
// if Bobby then
14129: LD_EXP 26
14133: IFFALSE 14147
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14135: LD_EXP 26
14139: PPUSH
14140: LD_STRING 12p_Bobby
14142: PPUSH
14143: CALL_OW 38
// if Cyrus in tmp then
14147: LD_EXP 27
14151: PUSH
14152: LD_VAR 0 2
14156: IN
14157: IFFALSE 14173
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14159: LD_EXP 27
14163: PPUSH
14164: LD_STRING 12a_Cyrus
14166: PPUSH
14167: CALL_OW 38
14171: GO 14191
// if Cyrus then
14173: LD_EXP 27
14177: IFFALSE 14191
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14179: LD_EXP 27
14183: PPUSH
14184: LD_STRING 12p_Cyrus
14186: PPUSH
14187: CALL_OW 38
// if Denis in tmp then
14191: LD_EXP 28
14195: PUSH
14196: LD_VAR 0 2
14200: IN
14201: IFFALSE 14215
// SaveCharacters ( Denis , 12a_Denis ) ;
14203: LD_EXP 28
14207: PPUSH
14208: LD_STRING 12a_Denis
14210: PPUSH
14211: CALL_OW 38
// if Brown in tmp then
14215: LD_EXP 29
14219: PUSH
14220: LD_VAR 0 2
14224: IN
14225: IFFALSE 14241
// SaveCharacters ( Brown , 12a_Brown ) else
14227: LD_EXP 29
14231: PPUSH
14232: LD_STRING 12a_Brown
14234: PPUSH
14235: CALL_OW 38
14239: GO 14265
// if Brown in tmp then
14241: LD_EXP 29
14245: PUSH
14246: LD_VAR 0 2
14250: IN
14251: IFFALSE 14265
// SaveCharacters ( Brown , 12p_Brown ) ;
14253: LD_EXP 29
14257: PPUSH
14258: LD_STRING 12p_Brown
14260: PPUSH
14261: CALL_OW 38
// if Gladstone in tmp then
14265: LD_EXP 30
14269: PUSH
14270: LD_VAR 0 2
14274: IN
14275: IFFALSE 14291
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14277: LD_EXP 30
14281: PPUSH
14282: LD_STRING 12a_Gladstone
14284: PPUSH
14285: CALL_OW 38
14289: GO 14309
// if Gladstone then
14291: LD_EXP 30
14295: IFFALSE 14309
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14297: LD_EXP 30
14301: PPUSH
14302: LD_STRING 12p_Gladstone
14304: PPUSH
14305: CALL_OW 38
// if Houten in tmp then
14309: LD_EXP 31
14313: PUSH
14314: LD_VAR 0 2
14318: IN
14319: IFFALSE 14335
// SaveCharacters ( Houten , 12a_Houten ) else
14321: LD_EXP 31
14325: PPUSH
14326: LD_STRING 12a_Houten
14328: PPUSH
14329: CALL_OW 38
14333: GO 14353
// if Houten then
14335: LD_EXP 31
14339: IFFALSE 14353
// SaveCharacters ( Houten , 12p_Houten ) ;
14341: LD_EXP 31
14345: PPUSH
14346: LD_STRING 12p_Houten
14348: PPUSH
14349: CALL_OW 38
// if Cornel in tmp then
14353: LD_EXP 32
14357: PUSH
14358: LD_VAR 0 2
14362: IN
14363: IFFALSE 14379
// SaveCharacters ( Cornel , 12a_Cornell ) else
14365: LD_EXP 32
14369: PPUSH
14370: LD_STRING 12a_Cornell
14372: PPUSH
14373: CALL_OW 38
14377: GO 14397
// if Cornel then
14379: LD_EXP 32
14383: IFFALSE 14397
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14385: LD_EXP 32
14389: PPUSH
14390: LD_STRING 12p_Cornell
14392: PPUSH
14393: CALL_OW 38
// if Gary in tmp then
14397: LD_EXP 33
14401: PUSH
14402: LD_VAR 0 2
14406: IN
14407: IFFALSE 14423
// SaveCharacters ( Gary , 12a_Gary ) else
14409: LD_EXP 33
14413: PPUSH
14414: LD_STRING 12a_Gary
14416: PPUSH
14417: CALL_OW 38
14421: GO 14441
// if Gary then
14423: LD_EXP 33
14427: IFFALSE 14441
// SaveCharacters ( Gary , 12p_Gary ) ;
14429: LD_EXP 33
14433: PPUSH
14434: LD_STRING 12p_Gary
14436: PPUSH
14437: CALL_OW 38
// if Frank in tmp then
14441: LD_EXP 34
14445: PUSH
14446: LD_VAR 0 2
14450: IN
14451: IFFALSE 14465
// SaveCharacters ( Frank , 12a_Frank ) ;
14453: LD_EXP 34
14457: PPUSH
14458: LD_STRING 12a_Frank
14460: PPUSH
14461: CALL_OW 38
// if Kikuchi in tmp then
14465: LD_EXP 35
14469: PUSH
14470: LD_VAR 0 2
14474: IN
14475: IFFALSE 14491
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14477: LD_EXP 35
14481: PPUSH
14482: LD_STRING 12a_Kikuchi
14484: PPUSH
14485: CALL_OW 38
14489: GO 14509
// if Kikuchi then
14491: LD_EXP 35
14495: IFFALSE 14509
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14497: LD_EXP 35
14501: PPUSH
14502: LD_STRING 12p_Kikuchi
14504: PPUSH
14505: CALL_OW 38
// if Simms in tmp then
14509: LD_EXP 36
14513: PUSH
14514: LD_VAR 0 2
14518: IN
14519: IFFALSE 14533
// SaveCharacters ( Simms , 12a_Simms ) ;
14521: LD_EXP 36
14525: PPUSH
14526: LD_STRING 12a_Simms
14528: PPUSH
14529: CALL_OW 38
// if Joan in tmp then
14533: LD_EXP 37
14537: PUSH
14538: LD_VAR 0 2
14542: IN
14543: IFFALSE 14557
// SaveCharacters ( Joan , 12a_Joan ) ;
14545: LD_EXP 37
14549: PPUSH
14550: LD_STRING 12a_Joan
14552: PPUSH
14553: CALL_OW 38
// if DeltaDoctor in tmp then
14557: LD_EXP 38
14561: PUSH
14562: LD_VAR 0 2
14566: IN
14567: IFFALSE 14581
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14569: LD_EXP 38
14573: PPUSH
14574: LD_STRING 12a_DeltaDoctor
14576: PPUSH
14577: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: LD_VAR 0 2
14590: PUSH
14591: LD_EXP 15
14595: PUSH
14596: LD_EXP 16
14600: PUSH
14601: LD_EXP 24
14605: PUSH
14606: LD_EXP 25
14610: PUSH
14611: LD_EXP 26
14615: PUSH
14616: LD_EXP 27
14620: PUSH
14621: LD_EXP 28
14625: PUSH
14626: LD_EXP 29
14630: PUSH
14631: LD_EXP 30
14635: PUSH
14636: LD_EXP 31
14640: PUSH
14641: LD_EXP 32
14645: PUSH
14646: LD_EXP 33
14650: PUSH
14651: LD_EXP 34
14655: PUSH
14656: LD_EXP 35
14660: PUSH
14661: LD_EXP 36
14665: PUSH
14666: LD_EXP 37
14670: PUSH
14671: LD_EXP 38
14675: PUSH
14676: LD_EXP 39
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: DIFF
14701: ST_TO_ADDR
// if tmp then
14702: LD_VAR 0 2
14706: IFFALSE 14720
// SaveCharacters ( tmp , 12a_others ) ;
14708: LD_VAR 0 2
14712: PPUSH
14713: LD_STRING 12a_others
14715: PPUSH
14716: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14720: LD_ADDR_VAR 0 2
14724: PUSH
14725: LD_INT 21
14727: PUSH
14728: LD_INT 1
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 23
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: LD_INT 22
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 22
14760: PUSH
14761: LD_INT 4
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 69
14782: PUSH
14783: LD_EXP 15
14787: PUSH
14788: LD_EXP 16
14792: PUSH
14793: LD_EXP 24
14797: PUSH
14798: LD_EXP 25
14802: PUSH
14803: LD_EXP 26
14807: PUSH
14808: LD_EXP 27
14812: PUSH
14813: LD_EXP 28
14817: PUSH
14818: LD_EXP 29
14822: PUSH
14823: LD_EXP 30
14827: PUSH
14828: LD_EXP 31
14832: PUSH
14833: LD_EXP 32
14837: PUSH
14838: LD_EXP 33
14842: PUSH
14843: LD_EXP 34
14847: PUSH
14848: LD_EXP 35
14852: PUSH
14853: LD_EXP 36
14857: PUSH
14858: LD_EXP 37
14862: PUSH
14863: LD_EXP 38
14867: PUSH
14868: LD_EXP 17
14872: PUSH
14873: LD_EXP 39
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: DIFF
14899: ST_TO_ADDR
// if tmp then
14900: LD_VAR 0 2
14904: IFFALSE 14918
// SaveCharacters ( tmp , 12p_others ) ;
14906: LD_VAR 0 2
14910: PPUSH
14911: LD_STRING 12p_others
14913: PPUSH
14914: CALL_OW 38
// YouWin ;
14918: CALL_OW 103
// end ; end_of_file
14922: PPOPN 5
14924: END
// on SailEvent ( event ) do var tmp ;
14925: LD_INT 0
14927: PPUSH
// begin if event = 1 then
14928: LD_VAR 0 1
14932: PUSH
14933: LD_INT 1
14935: EQUAL
14936: IFFALSE 15009
// begin if not mobile_patrol then
14938: LD_EXP 18
14942: NOT
14943: IFFALSE 14947
// exit ;
14945: GO 15009
// tmp := mobile_patrol [ mobile_patrol ] ;
14947: LD_ADDR_VAR 0 2
14951: PUSH
14952: LD_EXP 18
14956: PUSH
14957: LD_EXP 18
14961: ARRAY
14962: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14963: LD_ADDR_EXP 18
14967: PUSH
14968: LD_EXP 18
14972: PPUSH
14973: LD_EXP 18
14977: PPUSH
14978: CALL_OW 3
14982: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14983: LD_VAR 0 2
14987: PPUSH
14988: LD_EXP 19
14992: PUSH
14993: LD_EXP 18
14997: PUSH
14998: LD_INT 1
15000: PLUS
15001: ARRAY
15002: PPUSH
15003: EMPTY
15004: PPUSH
15005: CALL 6993 0 3
// end ; end ;
15009: PPOPN 2
15011: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15012: LD_VAR 0 1
15016: PPUSH
15017: CALL 31381 0 1
// if un = JMM then
15021: LD_VAR 0 1
15025: PUSH
15026: LD_EXP 15
15030: EQUAL
15031: IFFALSE 15040
// YouLost ( JMM ) ;
15033: LD_STRING JMM
15035: PPUSH
15036: CALL_OW 104
// if un = Powell then
15040: LD_VAR 0 1
15044: PUSH
15045: LD_EXP 17
15049: EQUAL
15050: IFFALSE 15062
// SaveVariable ( true , 12a_PowellKilled ) ;
15052: LD_INT 1
15054: PPUSH
15055: LD_STRING 12a_PowellKilled
15057: PPUSH
15058: CALL_OW 39
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15062: LD_VAR 0 1
15066: PPUSH
15067: CALL_OW 255
15071: PUSH
15072: LD_INT 7
15074: EQUAL
15075: PUSH
15076: LD_VAR 0 1
15080: PPUSH
15081: CALL_OW 264
15085: PUSH
15086: LD_INT 12
15088: EQUAL
15089: AND
15090: IFFALSE 15099
// YouLost ( Artifact ) ;
15092: LD_STRING Artifact
15094: PPUSH
15095: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15099: LD_VAR 0 1
15103: PPUSH
15104: CALL_OW 255
15108: PUSH
15109: LD_INT 7
15111: EQUAL
15112: PUSH
15113: LD_VAR 0 1
15117: PPUSH
15118: CALL_OW 247
15122: PUSH
15123: LD_INT 1
15125: EQUAL
15126: AND
15127: PUSH
15128: LD_VAR 0 1
15132: PUSH
15133: LD_EXP 16
15137: EQUAL
15138: OR
15139: IFFALSE 15155
// team_kill_counter := team_kill_counter + 1 ;
15141: LD_ADDR_EXP 9
15145: PUSH
15146: LD_EXP 9
15150: PUSH
15151: LD_INT 1
15153: PLUS
15154: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 255
15164: PUSH
15165: LD_INT 1
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 247
15178: PUSH
15179: LD_INT 1
15181: EQUAL
15182: AND
15183: IFFALSE 15199
// friends_kill_counter := friends_kill_counter + 1 ;
15185: LD_ADDR_EXP 8
15189: PUSH
15190: LD_EXP 8
15194: PUSH
15195: LD_INT 1
15197: PLUS
15198: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15199: LD_VAR 0 1
15203: PPUSH
15204: CALL_OW 255
15208: PUSH
15209: LD_INT 1
15211: NONEQUAL
15212: IFFALSE 15216
// exit ;
15214: GO 15318
// if GetControl ( un ) = control_remote then
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 263
15225: PUSH
15226: LD_INT 2
15228: EQUAL
15229: IFFALSE 15247
// defenders := defenders diff un ;
15231: LD_ADDR_EXP 21
15235: PUSH
15236: LD_EXP 21
15240: PUSH
15241: LD_VAR 0 1
15245: DIFF
15246: ST_TO_ADDR
// if not un in defenders then
15247: LD_VAR 0 1
15251: PUSH
15252: LD_EXP 21
15256: IN
15257: NOT
15258: IFFALSE 15318
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15260: LD_ADDR_EXP 22
15264: PUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: CALL_OW 250
15274: PUSH
15275: LD_VAR 0 1
15279: PPUSH
15280: CALL_OW 251
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: ST_TO_ADDR
// def_counter := Inc ( def_counter ) ;
15289: LD_ADDR_EXP 14
15293: PUSH
15294: LD_EXP 14
15298: PPUSH
15299: CALL 75172 0 1
15303: ST_TO_ADDR
// if def_counter < 4 then
15304: LD_EXP 14
15308: PUSH
15309: LD_INT 4
15311: LESS
15312: IFFALSE 15318
// Defend ;
15314: CALL 2958 0 0
// end ; end ;
15318: PPOPN 1
15320: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15321: LD_VAR 0 1
15325: PPUSH
15326: LD_VAR 0 2
15330: PPUSH
15331: CALL 31501 0 2
// if GetSide ( veh ) <> 1 then
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 255
15344: PUSH
15345: LD_INT 1
15347: NONEQUAL
15348: IFFALSE 15352
// exit ;
15350: GO 15376
// if GetControl ( veh ) = control_remote then
15352: LD_VAR 0 1
15356: PPUSH
15357: CALL_OW 263
15361: PUSH
15362: LD_INT 2
15364: EQUAL
15365: IFFALSE 15376
// Connect ( veh ) ;
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL 44417 0 1
// end ;
15376: PPOPN 2
15378: END
// on UnitGoesToRed ( un ) do var i , veh ;
15379: LD_INT 0
15381: PPUSH
15382: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15383: LD_VAR 0 1
15387: PPUSH
15388: CALL_OW 255
15392: PUSH
15393: LD_INT 1
15395: EQUAL
15396: PUSH
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 263
15406: PUSH
15407: LD_INT 2
15409: EQUAL
15410: AND
15411: IFFALSE 15422
// ComUnlink ( un ) ;
15413: LD_VAR 0 1
15417: PPUSH
15418: CALL_OW 136
// if un = ambar0 then
15422: LD_VAR 0 1
15426: PUSH
15427: LD_INT 18
15429: EQUAL
15430: IFFALSE 15540
// begin uc_side := 1 ;
15432: LD_ADDR_OWVAR 20
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// uc_nation := 1 ;
15440: LD_ADDR_OWVAR 21
15444: PUSH
15445: LD_INT 1
15447: ST_TO_ADDR
// for i = 1 to 6 do
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: DOUBLE
15454: LD_INT 1
15456: DEC
15457: ST_TO_ADDR
15458: LD_INT 6
15460: PUSH
15461: FOR_TO
15462: IFFALSE 15538
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15464: LD_INT 3
15466: PPUSH
15467: LD_INT 1
15469: PPUSH
15470: LD_INT 3
15472: PPUSH
15473: LD_INT 4
15475: PPUSH
15476: LD_INT 100
15478: PPUSH
15479: CALL 40949 0 5
// veh := CreateVehicle ;
15483: LD_ADDR_VAR 0 3
15487: PUSH
15488: CALL_OW 45
15492: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15493: LD_VAR 0 3
15497: PPUSH
15498: LD_INT 1
15500: PPUSH
15501: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15505: LD_VAR 0 3
15509: PPUSH
15510: LD_INT 25
15512: PPUSH
15513: LD_INT 0
15515: PPUSH
15516: CALL_OW 49
// defenders := defenders ^ veh ;
15520: LD_ADDR_EXP 21
15524: PUSH
15525: LD_EXP 21
15529: PUSH
15530: LD_VAR 0 3
15534: ADD
15535: ST_TO_ADDR
// end ;
15536: GO 15461
15538: POP
15539: POP
// end ; end ;
15540: PPOPN 3
15542: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15543: LD_VAR 0 2
15547: PUSH
15548: LD_EXP 17
15552: EQUAL
15553: IFFALSE 15564
// RemoveUnit ( Powell ) ;
15555: LD_EXP 17
15559: PPUSH
15560: CALL_OW 64
// end ;
15564: PPOPN 2
15566: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL 31485 0 1
// end ; end_of_file end_of_file
15576: PPOPN 1
15578: END
// export globalGameSaveCounter ; every 0 0$1 do
15579: GO 15581
15581: DISABLE
// begin enable ;
15582: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15583: LD_STRING updateTimer(
15585: PUSH
15586: LD_OWVAR 1
15590: STR
15591: PUSH
15592: LD_STRING );
15594: STR
15595: PPUSH
15596: CALL_OW 559
// end ;
15600: END
// every 0 0$1 do
15601: GO 15603
15603: DISABLE
// begin globalGameSaveCounter := 0 ;
15604: LD_ADDR_EXP 40
15608: PUSH
15609: LD_INT 0
15611: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15612: LD_STRING setGameSaveCounter(0)
15614: PPUSH
15615: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15619: LD_STRING initStreamRollete();
15621: PPUSH
15622: CALL_OW 559
// InitStreamMode ;
15626: CALL 16952 0 0
// DefineStreamItems ( false ) ;
15630: LD_INT 0
15632: PPUSH
15633: CALL 17416 0 1
// end ;
15637: END
// export function SOS_MapStart ( ) ; begin
15638: LD_INT 0
15640: PPUSH
// if streamModeActive then
15641: LD_EXP 41
15645: IFFALSE 15654
// DefineStreamItems ( true ) ;
15647: LD_INT 1
15649: PPUSH
15650: CALL 17416 0 1
// UpdateLuaVariables ( ) ;
15654: CALL 15671 0 0
// UpdateFactoryWaypoints ( ) ;
15658: CALL 30285 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15662: CALL 30542 0 0
// end ;
15666: LD_VAR 0 1
15670: RET
// function UpdateLuaVariables ( ) ; begin
15671: LD_INT 0
15673: PPUSH
// if globalGameSaveCounter then
15674: LD_EXP 40
15678: IFFALSE 15712
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15680: LD_ADDR_EXP 40
15684: PUSH
15685: LD_EXP 40
15689: PPUSH
15690: CALL 75172 0 1
15694: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15695: LD_STRING setGameSaveCounter(
15697: PUSH
15698: LD_EXP 40
15702: STR
15703: PUSH
15704: LD_STRING )
15706: STR
15707: PPUSH
15708: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15712: LD_STRING setGameDifficulty(
15714: PUSH
15715: LD_OWVAR 67
15719: STR
15720: PUSH
15721: LD_STRING )
15723: STR
15724: PPUSH
15725: CALL_OW 559
// end ;
15729: LD_VAR 0 1
15733: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15734: LD_INT 0
15736: PPUSH
// if p2 = stream_mode then
15737: LD_VAR 0 2
15741: PUSH
15742: LD_INT 100
15744: EQUAL
15745: IFFALSE 16748
// begin if not StreamModeActive then
15747: LD_EXP 41
15751: NOT
15752: IFFALSE 15762
// StreamModeActive := true ;
15754: LD_ADDR_EXP 41
15758: PUSH
15759: LD_INT 1
15761: ST_TO_ADDR
// if p3 = 0 then
15762: LD_VAR 0 3
15766: PUSH
15767: LD_INT 0
15769: EQUAL
15770: IFFALSE 15776
// InitStreamMode ;
15772: CALL 16952 0 0
// if p3 = 1 then
15776: LD_VAR 0 3
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: IFFALSE 15794
// sRocket := true ;
15786: LD_ADDR_EXP 46
15790: PUSH
15791: LD_INT 1
15793: ST_TO_ADDR
// if p3 = 2 then
15794: LD_VAR 0 3
15798: PUSH
15799: LD_INT 2
15801: EQUAL
15802: IFFALSE 15812
// sSpeed := true ;
15804: LD_ADDR_EXP 45
15808: PUSH
15809: LD_INT 1
15811: ST_TO_ADDR
// if p3 = 3 then
15812: LD_VAR 0 3
15816: PUSH
15817: LD_INT 3
15819: EQUAL
15820: IFFALSE 15830
// sEngine := true ;
15822: LD_ADDR_EXP 47
15826: PUSH
15827: LD_INT 1
15829: ST_TO_ADDR
// if p3 = 4 then
15830: LD_VAR 0 3
15834: PUSH
15835: LD_INT 4
15837: EQUAL
15838: IFFALSE 15848
// sSpec := true ;
15840: LD_ADDR_EXP 44
15844: PUSH
15845: LD_INT 1
15847: ST_TO_ADDR
// if p3 = 5 then
15848: LD_VAR 0 3
15852: PUSH
15853: LD_INT 5
15855: EQUAL
15856: IFFALSE 15866
// sLevel := true ;
15858: LD_ADDR_EXP 48
15862: PUSH
15863: LD_INT 1
15865: ST_TO_ADDR
// if p3 = 6 then
15866: LD_VAR 0 3
15870: PUSH
15871: LD_INT 6
15873: EQUAL
15874: IFFALSE 15884
// sArmoury := true ;
15876: LD_ADDR_EXP 49
15880: PUSH
15881: LD_INT 1
15883: ST_TO_ADDR
// if p3 = 7 then
15884: LD_VAR 0 3
15888: PUSH
15889: LD_INT 7
15891: EQUAL
15892: IFFALSE 15902
// sRadar := true ;
15894: LD_ADDR_EXP 50
15898: PUSH
15899: LD_INT 1
15901: ST_TO_ADDR
// if p3 = 8 then
15902: LD_VAR 0 3
15906: PUSH
15907: LD_INT 8
15909: EQUAL
15910: IFFALSE 15920
// sBunker := true ;
15912: LD_ADDR_EXP 51
15916: PUSH
15917: LD_INT 1
15919: ST_TO_ADDR
// if p3 = 9 then
15920: LD_VAR 0 3
15924: PUSH
15925: LD_INT 9
15927: EQUAL
15928: IFFALSE 15938
// sHack := true ;
15930: LD_ADDR_EXP 52
15934: PUSH
15935: LD_INT 1
15937: ST_TO_ADDR
// if p3 = 10 then
15938: LD_VAR 0 3
15942: PUSH
15943: LD_INT 10
15945: EQUAL
15946: IFFALSE 15956
// sFire := true ;
15948: LD_ADDR_EXP 53
15952: PUSH
15953: LD_INT 1
15955: ST_TO_ADDR
// if p3 = 11 then
15956: LD_VAR 0 3
15960: PUSH
15961: LD_INT 11
15963: EQUAL
15964: IFFALSE 15974
// sRefresh := true ;
15966: LD_ADDR_EXP 54
15970: PUSH
15971: LD_INT 1
15973: ST_TO_ADDR
// if p3 = 12 then
15974: LD_VAR 0 3
15978: PUSH
15979: LD_INT 12
15981: EQUAL
15982: IFFALSE 15992
// sExp := true ;
15984: LD_ADDR_EXP 55
15988: PUSH
15989: LD_INT 1
15991: ST_TO_ADDR
// if p3 = 13 then
15992: LD_VAR 0 3
15996: PUSH
15997: LD_INT 13
15999: EQUAL
16000: IFFALSE 16010
// sDepot := true ;
16002: LD_ADDR_EXP 56
16006: PUSH
16007: LD_INT 1
16009: ST_TO_ADDR
// if p3 = 14 then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_INT 14
16017: EQUAL
16018: IFFALSE 16028
// sFlag := true ;
16020: LD_ADDR_EXP 57
16024: PUSH
16025: LD_INT 1
16027: ST_TO_ADDR
// if p3 = 15 then
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 15
16035: EQUAL
16036: IFFALSE 16046
// sKamikadze := true ;
16038: LD_ADDR_EXP 65
16042: PUSH
16043: LD_INT 1
16045: ST_TO_ADDR
// if p3 = 16 then
16046: LD_VAR 0 3
16050: PUSH
16051: LD_INT 16
16053: EQUAL
16054: IFFALSE 16064
// sTroll := true ;
16056: LD_ADDR_EXP 66
16060: PUSH
16061: LD_INT 1
16063: ST_TO_ADDR
// if p3 = 17 then
16064: LD_VAR 0 3
16068: PUSH
16069: LD_INT 17
16071: EQUAL
16072: IFFALSE 16082
// sSlow := true ;
16074: LD_ADDR_EXP 67
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// if p3 = 18 then
16082: LD_VAR 0 3
16086: PUSH
16087: LD_INT 18
16089: EQUAL
16090: IFFALSE 16100
// sLack := true ;
16092: LD_ADDR_EXP 68
16096: PUSH
16097: LD_INT 1
16099: ST_TO_ADDR
// if p3 = 19 then
16100: LD_VAR 0 3
16104: PUSH
16105: LD_INT 19
16107: EQUAL
16108: IFFALSE 16118
// sTank := true ;
16110: LD_ADDR_EXP 70
16114: PUSH
16115: LD_INT 1
16117: ST_TO_ADDR
// if p3 = 20 then
16118: LD_VAR 0 3
16122: PUSH
16123: LD_INT 20
16125: EQUAL
16126: IFFALSE 16136
// sRemote := true ;
16128: LD_ADDR_EXP 71
16132: PUSH
16133: LD_INT 1
16135: ST_TO_ADDR
// if p3 = 21 then
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 21
16143: EQUAL
16144: IFFALSE 16154
// sPowell := true ;
16146: LD_ADDR_EXP 72
16150: PUSH
16151: LD_INT 1
16153: ST_TO_ADDR
// if p3 = 22 then
16154: LD_VAR 0 3
16158: PUSH
16159: LD_INT 22
16161: EQUAL
16162: IFFALSE 16172
// sTeleport := true ;
16164: LD_ADDR_EXP 75
16168: PUSH
16169: LD_INT 1
16171: ST_TO_ADDR
// if p3 = 23 then
16172: LD_VAR 0 3
16176: PUSH
16177: LD_INT 23
16179: EQUAL
16180: IFFALSE 16190
// sOilTower := true ;
16182: LD_ADDR_EXP 77
16186: PUSH
16187: LD_INT 1
16189: ST_TO_ADDR
// if p3 = 24 then
16190: LD_VAR 0 3
16194: PUSH
16195: LD_INT 24
16197: EQUAL
16198: IFFALSE 16208
// sShovel := true ;
16200: LD_ADDR_EXP 78
16204: PUSH
16205: LD_INT 1
16207: ST_TO_ADDR
// if p3 = 25 then
16208: LD_VAR 0 3
16212: PUSH
16213: LD_INT 25
16215: EQUAL
16216: IFFALSE 16226
// sSheik := true ;
16218: LD_ADDR_EXP 79
16222: PUSH
16223: LD_INT 1
16225: ST_TO_ADDR
// if p3 = 26 then
16226: LD_VAR 0 3
16230: PUSH
16231: LD_INT 26
16233: EQUAL
16234: IFFALSE 16244
// sEarthquake := true ;
16236: LD_ADDR_EXP 81
16240: PUSH
16241: LD_INT 1
16243: ST_TO_ADDR
// if p3 = 27 then
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 27
16251: EQUAL
16252: IFFALSE 16262
// sAI := true ;
16254: LD_ADDR_EXP 82
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// if p3 = 28 then
16262: LD_VAR 0 3
16266: PUSH
16267: LD_INT 28
16269: EQUAL
16270: IFFALSE 16280
// sCargo := true ;
16272: LD_ADDR_EXP 85
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if p3 = 29 then
16280: LD_VAR 0 3
16284: PUSH
16285: LD_INT 29
16287: EQUAL
16288: IFFALSE 16298
// sDLaser := true ;
16290: LD_ADDR_EXP 86
16294: PUSH
16295: LD_INT 1
16297: ST_TO_ADDR
// if p3 = 30 then
16298: LD_VAR 0 3
16302: PUSH
16303: LD_INT 30
16305: EQUAL
16306: IFFALSE 16316
// sExchange := true ;
16308: LD_ADDR_EXP 87
16312: PUSH
16313: LD_INT 1
16315: ST_TO_ADDR
// if p3 = 31 then
16316: LD_VAR 0 3
16320: PUSH
16321: LD_INT 31
16323: EQUAL
16324: IFFALSE 16334
// sFac := true ;
16326: LD_ADDR_EXP 88
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// if p3 = 32 then
16334: LD_VAR 0 3
16338: PUSH
16339: LD_INT 32
16341: EQUAL
16342: IFFALSE 16352
// sPower := true ;
16344: LD_ADDR_EXP 89
16348: PUSH
16349: LD_INT 1
16351: ST_TO_ADDR
// if p3 = 33 then
16352: LD_VAR 0 3
16356: PUSH
16357: LD_INT 33
16359: EQUAL
16360: IFFALSE 16370
// sRandom := true ;
16362: LD_ADDR_EXP 90
16366: PUSH
16367: LD_INT 1
16369: ST_TO_ADDR
// if p3 = 34 then
16370: LD_VAR 0 3
16374: PUSH
16375: LD_INT 34
16377: EQUAL
16378: IFFALSE 16388
// sShield := true ;
16380: LD_ADDR_EXP 91
16384: PUSH
16385: LD_INT 1
16387: ST_TO_ADDR
// if p3 = 35 then
16388: LD_VAR 0 3
16392: PUSH
16393: LD_INT 35
16395: EQUAL
16396: IFFALSE 16406
// sTime := true ;
16398: LD_ADDR_EXP 92
16402: PUSH
16403: LD_INT 1
16405: ST_TO_ADDR
// if p3 = 36 then
16406: LD_VAR 0 3
16410: PUSH
16411: LD_INT 36
16413: EQUAL
16414: IFFALSE 16424
// sTools := true ;
16416: LD_ADDR_EXP 93
16420: PUSH
16421: LD_INT 1
16423: ST_TO_ADDR
// if p3 = 101 then
16424: LD_VAR 0 3
16428: PUSH
16429: LD_INT 101
16431: EQUAL
16432: IFFALSE 16442
// sSold := true ;
16434: LD_ADDR_EXP 58
16438: PUSH
16439: LD_INT 1
16441: ST_TO_ADDR
// if p3 = 102 then
16442: LD_VAR 0 3
16446: PUSH
16447: LD_INT 102
16449: EQUAL
16450: IFFALSE 16460
// sDiff := true ;
16452: LD_ADDR_EXP 59
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// if p3 = 103 then
16460: LD_VAR 0 3
16464: PUSH
16465: LD_INT 103
16467: EQUAL
16468: IFFALSE 16478
// sFog := true ;
16470: LD_ADDR_EXP 62
16474: PUSH
16475: LD_INT 1
16477: ST_TO_ADDR
// if p3 = 104 then
16478: LD_VAR 0 3
16482: PUSH
16483: LD_INT 104
16485: EQUAL
16486: IFFALSE 16496
// sReset := true ;
16488: LD_ADDR_EXP 63
16492: PUSH
16493: LD_INT 1
16495: ST_TO_ADDR
// if p3 = 105 then
16496: LD_VAR 0 3
16500: PUSH
16501: LD_INT 105
16503: EQUAL
16504: IFFALSE 16514
// sSun := true ;
16506: LD_ADDR_EXP 64
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// if p3 = 106 then
16514: LD_VAR 0 3
16518: PUSH
16519: LD_INT 106
16521: EQUAL
16522: IFFALSE 16532
// sTiger := true ;
16524: LD_ADDR_EXP 60
16528: PUSH
16529: LD_INT 1
16531: ST_TO_ADDR
// if p3 = 107 then
16532: LD_VAR 0 3
16536: PUSH
16537: LD_INT 107
16539: EQUAL
16540: IFFALSE 16550
// sBomb := true ;
16542: LD_ADDR_EXP 61
16546: PUSH
16547: LD_INT 1
16549: ST_TO_ADDR
// if p3 = 108 then
16550: LD_VAR 0 3
16554: PUSH
16555: LD_INT 108
16557: EQUAL
16558: IFFALSE 16568
// sWound := true ;
16560: LD_ADDR_EXP 69
16564: PUSH
16565: LD_INT 1
16567: ST_TO_ADDR
// if p3 = 109 then
16568: LD_VAR 0 3
16572: PUSH
16573: LD_INT 109
16575: EQUAL
16576: IFFALSE 16586
// sBetray := true ;
16578: LD_ADDR_EXP 73
16582: PUSH
16583: LD_INT 1
16585: ST_TO_ADDR
// if p3 = 110 then
16586: LD_VAR 0 3
16590: PUSH
16591: LD_INT 110
16593: EQUAL
16594: IFFALSE 16604
// sContamin := true ;
16596: LD_ADDR_EXP 74
16600: PUSH
16601: LD_INT 1
16603: ST_TO_ADDR
// if p3 = 111 then
16604: LD_VAR 0 3
16608: PUSH
16609: LD_INT 111
16611: EQUAL
16612: IFFALSE 16622
// sOil := true ;
16614: LD_ADDR_EXP 76
16618: PUSH
16619: LD_INT 1
16621: ST_TO_ADDR
// if p3 = 112 then
16622: LD_VAR 0 3
16626: PUSH
16627: LD_INT 112
16629: EQUAL
16630: IFFALSE 16640
// sStu := true ;
16632: LD_ADDR_EXP 80
16636: PUSH
16637: LD_INT 1
16639: ST_TO_ADDR
// if p3 = 113 then
16640: LD_VAR 0 3
16644: PUSH
16645: LD_INT 113
16647: EQUAL
16648: IFFALSE 16658
// sBazooka := true ;
16650: LD_ADDR_EXP 83
16654: PUSH
16655: LD_INT 1
16657: ST_TO_ADDR
// if p3 = 114 then
16658: LD_VAR 0 3
16662: PUSH
16663: LD_INT 114
16665: EQUAL
16666: IFFALSE 16676
// sMortar := true ;
16668: LD_ADDR_EXP 84
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// if p3 = 115 then
16676: LD_VAR 0 3
16680: PUSH
16681: LD_INT 115
16683: EQUAL
16684: IFFALSE 16694
// sRanger := true ;
16686: LD_ADDR_EXP 94
16690: PUSH
16691: LD_INT 1
16693: ST_TO_ADDR
// if p3 = 116 then
16694: LD_VAR 0 3
16698: PUSH
16699: LD_INT 116
16701: EQUAL
16702: IFFALSE 16712
// sComputer := true ;
16704: LD_ADDR_EXP 95
16708: PUSH
16709: LD_INT 1
16711: ST_TO_ADDR
// if p3 = 117 then
16712: LD_VAR 0 3
16716: PUSH
16717: LD_INT 117
16719: EQUAL
16720: IFFALSE 16730
// s30 := true ;
16722: LD_ADDR_EXP 96
16726: PUSH
16727: LD_INT 1
16729: ST_TO_ADDR
// if p3 = 118 then
16730: LD_VAR 0 3
16734: PUSH
16735: LD_INT 118
16737: EQUAL
16738: IFFALSE 16748
// s60 := true ;
16740: LD_ADDR_EXP 97
16744: PUSH
16745: LD_INT 1
16747: ST_TO_ADDR
// end ; if p2 = hack_mode then
16748: LD_VAR 0 2
16752: PUSH
16753: LD_INT 101
16755: EQUAL
16756: IFFALSE 16884
// begin case p3 of 1 :
16758: LD_VAR 0 3
16762: PUSH
16763: LD_INT 1
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16778
16771: POP
// hHackUnlimitedResources ; 2 :
16772: CALL 29031 0 0
16776: GO 16884
16778: LD_INT 2
16780: DOUBLE
16781: EQUAL
16782: IFTRUE 16786
16784: GO 16793
16786: POP
// hHackSetLevel10 ; 3 :
16787: CALL 29164 0 0
16791: GO 16884
16793: LD_INT 3
16795: DOUBLE
16796: EQUAL
16797: IFTRUE 16801
16799: GO 16808
16801: POP
// hHackSetLevel10YourUnits ; 4 :
16802: CALL 29249 0 0
16806: GO 16884
16808: LD_INT 4
16810: DOUBLE
16811: EQUAL
16812: IFTRUE 16816
16814: GO 16823
16816: POP
// hHackInvincible ; 5 :
16817: CALL 29697 0 0
16821: GO 16884
16823: LD_INT 5
16825: DOUBLE
16826: EQUAL
16827: IFTRUE 16831
16829: GO 16838
16831: POP
// hHackInvisible ; 6 :
16832: CALL 29808 0 0
16836: GO 16884
16838: LD_INT 6
16840: DOUBLE
16841: EQUAL
16842: IFTRUE 16846
16844: GO 16853
16846: POP
// hHackChangeYourSide ; 7 :
16847: CALL 29865 0 0
16851: GO 16884
16853: LD_INT 7
16855: DOUBLE
16856: EQUAL
16857: IFTRUE 16861
16859: GO 16868
16861: POP
// hHackChangeUnitSide ; 8 :
16862: CALL 29907 0 0
16866: GO 16884
16868: LD_INT 8
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16883
16876: POP
// hHackFog ; end ;
16877: CALL 30008 0 0
16881: GO 16884
16883: POP
// end ; if p2 = game_save_mode then
16884: LD_VAR 0 2
16888: PUSH
16889: LD_INT 102
16891: EQUAL
16892: IFFALSE 16947
// begin if p3 = 1 then
16894: LD_VAR 0 3
16898: PUSH
16899: LD_INT 1
16901: EQUAL
16902: IFFALSE 16914
// globalGameSaveCounter := p4 ;
16904: LD_ADDR_EXP 40
16908: PUSH
16909: LD_VAR 0 4
16913: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16914: LD_VAR 0 3
16918: PUSH
16919: LD_INT 2
16921: EQUAL
16922: PUSH
16923: LD_EXP 40
16927: AND
16928: IFFALSE 16947
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16930: LD_STRING setGameSaveCounter(
16932: PUSH
16933: LD_EXP 40
16937: STR
16938: PUSH
16939: LD_STRING )
16941: STR
16942: PPUSH
16943: CALL_OW 559
// end ; end ;
16947: LD_VAR 0 7
16951: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16952: LD_INT 0
16954: PPUSH
// streamModeActive := false ;
16955: LD_ADDR_EXP 41
16959: PUSH
16960: LD_INT 0
16962: ST_TO_ADDR
// normalCounter := 36 ;
16963: LD_ADDR_EXP 42
16967: PUSH
16968: LD_INT 36
16970: ST_TO_ADDR
// hardcoreCounter := 18 ;
16971: LD_ADDR_EXP 43
16975: PUSH
16976: LD_INT 18
16978: ST_TO_ADDR
// sRocket := false ;
16979: LD_ADDR_EXP 46
16983: PUSH
16984: LD_INT 0
16986: ST_TO_ADDR
// sSpeed := false ;
16987: LD_ADDR_EXP 45
16991: PUSH
16992: LD_INT 0
16994: ST_TO_ADDR
// sEngine := false ;
16995: LD_ADDR_EXP 47
16999: PUSH
17000: LD_INT 0
17002: ST_TO_ADDR
// sSpec := false ;
17003: LD_ADDR_EXP 44
17007: PUSH
17008: LD_INT 0
17010: ST_TO_ADDR
// sLevel := false ;
17011: LD_ADDR_EXP 48
17015: PUSH
17016: LD_INT 0
17018: ST_TO_ADDR
// sArmoury := false ;
17019: LD_ADDR_EXP 49
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// sRadar := false ;
17027: LD_ADDR_EXP 50
17031: PUSH
17032: LD_INT 0
17034: ST_TO_ADDR
// sBunker := false ;
17035: LD_ADDR_EXP 51
17039: PUSH
17040: LD_INT 0
17042: ST_TO_ADDR
// sHack := false ;
17043: LD_ADDR_EXP 52
17047: PUSH
17048: LD_INT 0
17050: ST_TO_ADDR
// sFire := false ;
17051: LD_ADDR_EXP 53
17055: PUSH
17056: LD_INT 0
17058: ST_TO_ADDR
// sRefresh := false ;
17059: LD_ADDR_EXP 54
17063: PUSH
17064: LD_INT 0
17066: ST_TO_ADDR
// sExp := false ;
17067: LD_ADDR_EXP 55
17071: PUSH
17072: LD_INT 0
17074: ST_TO_ADDR
// sDepot := false ;
17075: LD_ADDR_EXP 56
17079: PUSH
17080: LD_INT 0
17082: ST_TO_ADDR
// sFlag := false ;
17083: LD_ADDR_EXP 57
17087: PUSH
17088: LD_INT 0
17090: ST_TO_ADDR
// sKamikadze := false ;
17091: LD_ADDR_EXP 65
17095: PUSH
17096: LD_INT 0
17098: ST_TO_ADDR
// sTroll := false ;
17099: LD_ADDR_EXP 66
17103: PUSH
17104: LD_INT 0
17106: ST_TO_ADDR
// sSlow := false ;
17107: LD_ADDR_EXP 67
17111: PUSH
17112: LD_INT 0
17114: ST_TO_ADDR
// sLack := false ;
17115: LD_ADDR_EXP 68
17119: PUSH
17120: LD_INT 0
17122: ST_TO_ADDR
// sTank := false ;
17123: LD_ADDR_EXP 70
17127: PUSH
17128: LD_INT 0
17130: ST_TO_ADDR
// sRemote := false ;
17131: LD_ADDR_EXP 71
17135: PUSH
17136: LD_INT 0
17138: ST_TO_ADDR
// sPowell := false ;
17139: LD_ADDR_EXP 72
17143: PUSH
17144: LD_INT 0
17146: ST_TO_ADDR
// sTeleport := false ;
17147: LD_ADDR_EXP 75
17151: PUSH
17152: LD_INT 0
17154: ST_TO_ADDR
// sOilTower := false ;
17155: LD_ADDR_EXP 77
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// sShovel := false ;
17163: LD_ADDR_EXP 78
17167: PUSH
17168: LD_INT 0
17170: ST_TO_ADDR
// sSheik := false ;
17171: LD_ADDR_EXP 79
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// sEarthquake := false ;
17179: LD_ADDR_EXP 81
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// sAI := false ;
17187: LD_ADDR_EXP 82
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// sCargo := false ;
17195: LD_ADDR_EXP 85
17199: PUSH
17200: LD_INT 0
17202: ST_TO_ADDR
// sDLaser := false ;
17203: LD_ADDR_EXP 86
17207: PUSH
17208: LD_INT 0
17210: ST_TO_ADDR
// sExchange := false ;
17211: LD_ADDR_EXP 87
17215: PUSH
17216: LD_INT 0
17218: ST_TO_ADDR
// sFac := false ;
17219: LD_ADDR_EXP 88
17223: PUSH
17224: LD_INT 0
17226: ST_TO_ADDR
// sPower := false ;
17227: LD_ADDR_EXP 89
17231: PUSH
17232: LD_INT 0
17234: ST_TO_ADDR
// sRandom := false ;
17235: LD_ADDR_EXP 90
17239: PUSH
17240: LD_INT 0
17242: ST_TO_ADDR
// sShield := false ;
17243: LD_ADDR_EXP 91
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
// sTime := false ;
17251: LD_ADDR_EXP 92
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
// sTools := false ;
17259: LD_ADDR_EXP 93
17263: PUSH
17264: LD_INT 0
17266: ST_TO_ADDR
// sSold := false ;
17267: LD_ADDR_EXP 58
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// sDiff := false ;
17275: LD_ADDR_EXP 59
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
// sFog := false ;
17283: LD_ADDR_EXP 62
17287: PUSH
17288: LD_INT 0
17290: ST_TO_ADDR
// sReset := false ;
17291: LD_ADDR_EXP 63
17295: PUSH
17296: LD_INT 0
17298: ST_TO_ADDR
// sSun := false ;
17299: LD_ADDR_EXP 64
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// sTiger := false ;
17307: LD_ADDR_EXP 60
17311: PUSH
17312: LD_INT 0
17314: ST_TO_ADDR
// sBomb := false ;
17315: LD_ADDR_EXP 61
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// sWound := false ;
17323: LD_ADDR_EXP 69
17327: PUSH
17328: LD_INT 0
17330: ST_TO_ADDR
// sBetray := false ;
17331: LD_ADDR_EXP 73
17335: PUSH
17336: LD_INT 0
17338: ST_TO_ADDR
// sContamin := false ;
17339: LD_ADDR_EXP 74
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// sOil := false ;
17347: LD_ADDR_EXP 76
17351: PUSH
17352: LD_INT 0
17354: ST_TO_ADDR
// sStu := false ;
17355: LD_ADDR_EXP 80
17359: PUSH
17360: LD_INT 0
17362: ST_TO_ADDR
// sBazooka := false ;
17363: LD_ADDR_EXP 83
17367: PUSH
17368: LD_INT 0
17370: ST_TO_ADDR
// sMortar := false ;
17371: LD_ADDR_EXP 84
17375: PUSH
17376: LD_INT 0
17378: ST_TO_ADDR
// sRanger := false ;
17379: LD_ADDR_EXP 94
17383: PUSH
17384: LD_INT 0
17386: ST_TO_ADDR
// sComputer := false ;
17387: LD_ADDR_EXP 95
17391: PUSH
17392: LD_INT 0
17394: ST_TO_ADDR
// s30 := false ;
17395: LD_ADDR_EXP 96
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// s60 := false ;
17403: LD_ADDR_EXP 97
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// end ;
17411: LD_VAR 0 1
17415: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17416: LD_INT 0
17418: PPUSH
17419: PPUSH
17420: PPUSH
17421: PPUSH
17422: PPUSH
17423: PPUSH
17424: PPUSH
// result := [ ] ;
17425: LD_ADDR_VAR 0 2
17429: PUSH
17430: EMPTY
17431: ST_TO_ADDR
// if campaign_id = 1 then
17432: LD_OWVAR 69
17436: PUSH
17437: LD_INT 1
17439: EQUAL
17440: IFFALSE 20606
// begin case mission_number of 1 :
17442: LD_OWVAR 70
17446: PUSH
17447: LD_INT 1
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17531
17455: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17456: LD_ADDR_VAR 0 2
17460: PUSH
17461: LD_INT 2
17463: PUSH
17464: LD_INT 4
17466: PUSH
17467: LD_INT 11
17469: PUSH
17470: LD_INT 12
17472: PUSH
17473: LD_INT 15
17475: PUSH
17476: LD_INT 16
17478: PUSH
17479: LD_INT 22
17481: PUSH
17482: LD_INT 23
17484: PUSH
17485: LD_INT 26
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 101
17501: PUSH
17502: LD_INT 102
17504: PUSH
17505: LD_INT 106
17507: PUSH
17508: LD_INT 116
17510: PUSH
17511: LD_INT 117
17513: PUSH
17514: LD_INT 118
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: ST_TO_ADDR
17529: GO 20604
17531: LD_INT 2
17533: DOUBLE
17534: EQUAL
17535: IFTRUE 17539
17537: GO 17623
17539: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17540: LD_ADDR_VAR 0 2
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: LD_INT 4
17550: PUSH
17551: LD_INT 11
17553: PUSH
17554: LD_INT 12
17556: PUSH
17557: LD_INT 15
17559: PUSH
17560: LD_INT 16
17562: PUSH
17563: LD_INT 22
17565: PUSH
17566: LD_INT 23
17568: PUSH
17569: LD_INT 26
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 101
17585: PUSH
17586: LD_INT 102
17588: PUSH
17589: LD_INT 105
17591: PUSH
17592: LD_INT 106
17594: PUSH
17595: LD_INT 108
17597: PUSH
17598: LD_INT 116
17600: PUSH
17601: LD_INT 117
17603: PUSH
17604: LD_INT 118
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: ST_TO_ADDR
17621: GO 20604
17623: LD_INT 3
17625: DOUBLE
17626: EQUAL
17627: IFTRUE 17631
17629: GO 17719
17631: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17632: LD_ADDR_VAR 0 2
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: LD_INT 4
17642: PUSH
17643: LD_INT 5
17645: PUSH
17646: LD_INT 11
17648: PUSH
17649: LD_INT 12
17651: PUSH
17652: LD_INT 15
17654: PUSH
17655: LD_INT 16
17657: PUSH
17658: LD_INT 22
17660: PUSH
17661: LD_INT 26
17663: PUSH
17664: LD_INT 36
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 101
17681: PUSH
17682: LD_INT 102
17684: PUSH
17685: LD_INT 105
17687: PUSH
17688: LD_INT 106
17690: PUSH
17691: LD_INT 108
17693: PUSH
17694: LD_INT 116
17696: PUSH
17697: LD_INT 117
17699: PUSH
17700: LD_INT 118
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: ST_TO_ADDR
17717: GO 20604
17719: LD_INT 4
17721: DOUBLE
17722: EQUAL
17723: IFTRUE 17727
17725: GO 17823
17727: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_INT 2
17735: PUSH
17736: LD_INT 4
17738: PUSH
17739: LD_INT 5
17741: PUSH
17742: LD_INT 8
17744: PUSH
17745: LD_INT 11
17747: PUSH
17748: LD_INT 12
17750: PUSH
17751: LD_INT 15
17753: PUSH
17754: LD_INT 16
17756: PUSH
17757: LD_INT 22
17759: PUSH
17760: LD_INT 23
17762: PUSH
17763: LD_INT 26
17765: PUSH
17766: LD_INT 36
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 101
17785: PUSH
17786: LD_INT 102
17788: PUSH
17789: LD_INT 105
17791: PUSH
17792: LD_INT 106
17794: PUSH
17795: LD_INT 108
17797: PUSH
17798: LD_INT 116
17800: PUSH
17801: LD_INT 117
17803: PUSH
17804: LD_INT 118
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: ST_TO_ADDR
17821: GO 20604
17823: LD_INT 5
17825: DOUBLE
17826: EQUAL
17827: IFTRUE 17831
17829: GO 17943
17831: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17832: LD_ADDR_VAR 0 2
17836: PUSH
17837: LD_INT 2
17839: PUSH
17840: LD_INT 4
17842: PUSH
17843: LD_INT 5
17845: PUSH
17846: LD_INT 6
17848: PUSH
17849: LD_INT 8
17851: PUSH
17852: LD_INT 11
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 15
17860: PUSH
17861: LD_INT 16
17863: PUSH
17864: LD_INT 22
17866: PUSH
17867: LD_INT 23
17869: PUSH
17870: LD_INT 25
17872: PUSH
17873: LD_INT 26
17875: PUSH
17876: LD_INT 36
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 101
17897: PUSH
17898: LD_INT 102
17900: PUSH
17901: LD_INT 105
17903: PUSH
17904: LD_INT 106
17906: PUSH
17907: LD_INT 108
17909: PUSH
17910: LD_INT 109
17912: PUSH
17913: LD_INT 112
17915: PUSH
17916: LD_INT 116
17918: PUSH
17919: LD_INT 117
17921: PUSH
17922: LD_INT 118
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: ST_TO_ADDR
17941: GO 20604
17943: LD_INT 6
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 18083
17951: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17952: LD_ADDR_VAR 0 2
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 4
17962: PUSH
17963: LD_INT 5
17965: PUSH
17966: LD_INT 6
17968: PUSH
17969: LD_INT 8
17971: PUSH
17972: LD_INT 11
17974: PUSH
17975: LD_INT 12
17977: PUSH
17978: LD_INT 15
17980: PUSH
17981: LD_INT 16
17983: PUSH
17984: LD_INT 20
17986: PUSH
17987: LD_INT 21
17989: PUSH
17990: LD_INT 22
17992: PUSH
17993: LD_INT 23
17995: PUSH
17996: LD_INT 25
17998: PUSH
17999: LD_INT 26
18001: PUSH
18002: LD_INT 30
18004: PUSH
18005: LD_INT 31
18007: PUSH
18008: LD_INT 32
18010: PUSH
18011: LD_INT 36
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 101
18037: PUSH
18038: LD_INT 102
18040: PUSH
18041: LD_INT 105
18043: PUSH
18044: LD_INT 106
18046: PUSH
18047: LD_INT 108
18049: PUSH
18050: LD_INT 109
18052: PUSH
18053: LD_INT 112
18055: PUSH
18056: LD_INT 116
18058: PUSH
18059: LD_INT 117
18061: PUSH
18062: LD_INT 118
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: ST_TO_ADDR
18081: GO 20604
18083: LD_INT 7
18085: DOUBLE
18086: EQUAL
18087: IFTRUE 18091
18089: GO 18203
18091: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18092: LD_ADDR_VAR 0 2
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: LD_INT 5
18105: PUSH
18106: LD_INT 7
18108: PUSH
18109: LD_INT 11
18111: PUSH
18112: LD_INT 12
18114: PUSH
18115: LD_INT 15
18117: PUSH
18118: LD_INT 16
18120: PUSH
18121: LD_INT 20
18123: PUSH
18124: LD_INT 21
18126: PUSH
18127: LD_INT 22
18129: PUSH
18130: LD_INT 23
18132: PUSH
18133: LD_INT 25
18135: PUSH
18136: LD_INT 26
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 101
18157: PUSH
18158: LD_INT 102
18160: PUSH
18161: LD_INT 103
18163: PUSH
18164: LD_INT 105
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 108
18172: PUSH
18173: LD_INT 112
18175: PUSH
18176: LD_INT 116
18178: PUSH
18179: LD_INT 117
18181: PUSH
18182: LD_INT 118
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: ST_TO_ADDR
18201: GO 20604
18203: LD_INT 8
18205: DOUBLE
18206: EQUAL
18207: IFTRUE 18211
18209: GO 18351
18211: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18212: LD_ADDR_VAR 0 2
18216: PUSH
18217: LD_INT 2
18219: PUSH
18220: LD_INT 4
18222: PUSH
18223: LD_INT 5
18225: PUSH
18226: LD_INT 6
18228: PUSH
18229: LD_INT 7
18231: PUSH
18232: LD_INT 8
18234: PUSH
18235: LD_INT 11
18237: PUSH
18238: LD_INT 12
18240: PUSH
18241: LD_INT 15
18243: PUSH
18244: LD_INT 16
18246: PUSH
18247: LD_INT 20
18249: PUSH
18250: LD_INT 21
18252: PUSH
18253: LD_INT 22
18255: PUSH
18256: LD_INT 23
18258: PUSH
18259: LD_INT 25
18261: PUSH
18262: LD_INT 26
18264: PUSH
18265: LD_INT 30
18267: PUSH
18268: LD_INT 31
18270: PUSH
18271: LD_INT 32
18273: PUSH
18274: LD_INT 36
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 101
18301: PUSH
18302: LD_INT 102
18304: PUSH
18305: LD_INT 103
18307: PUSH
18308: LD_INT 105
18310: PUSH
18311: LD_INT 106
18313: PUSH
18314: LD_INT 108
18316: PUSH
18317: LD_INT 109
18319: PUSH
18320: LD_INT 112
18322: PUSH
18323: LD_INT 116
18325: PUSH
18326: LD_INT 117
18328: PUSH
18329: LD_INT 118
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: ST_TO_ADDR
18349: GO 20604
18351: LD_INT 9
18353: DOUBLE
18354: EQUAL
18355: IFTRUE 18359
18357: GO 18507
18359: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18360: LD_ADDR_VAR 0 2
18364: PUSH
18365: LD_INT 2
18367: PUSH
18368: LD_INT 4
18370: PUSH
18371: LD_INT 5
18373: PUSH
18374: LD_INT 6
18376: PUSH
18377: LD_INT 7
18379: PUSH
18380: LD_INT 8
18382: PUSH
18383: LD_INT 11
18385: PUSH
18386: LD_INT 12
18388: PUSH
18389: LD_INT 15
18391: PUSH
18392: LD_INT 16
18394: PUSH
18395: LD_INT 20
18397: PUSH
18398: LD_INT 21
18400: PUSH
18401: LD_INT 22
18403: PUSH
18404: LD_INT 23
18406: PUSH
18407: LD_INT 25
18409: PUSH
18410: LD_INT 26
18412: PUSH
18413: LD_INT 28
18415: PUSH
18416: LD_INT 30
18418: PUSH
18419: LD_INT 31
18421: PUSH
18422: LD_INT 32
18424: PUSH
18425: LD_INT 36
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 101
18453: PUSH
18454: LD_INT 102
18456: PUSH
18457: LD_INT 103
18459: PUSH
18460: LD_INT 105
18462: PUSH
18463: LD_INT 106
18465: PUSH
18466: LD_INT 108
18468: PUSH
18469: LD_INT 109
18471: PUSH
18472: LD_INT 112
18474: PUSH
18475: LD_INT 114
18477: PUSH
18478: LD_INT 116
18480: PUSH
18481: LD_INT 117
18483: PUSH
18484: LD_INT 118
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: ST_TO_ADDR
18505: GO 20604
18507: LD_INT 10
18509: DOUBLE
18510: EQUAL
18511: IFTRUE 18515
18513: GO 18711
18515: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18516: LD_ADDR_VAR 0 2
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 4
18526: PUSH
18527: LD_INT 5
18529: PUSH
18530: LD_INT 6
18532: PUSH
18533: LD_INT 7
18535: PUSH
18536: LD_INT 8
18538: PUSH
18539: LD_INT 9
18541: PUSH
18542: LD_INT 10
18544: PUSH
18545: LD_INT 11
18547: PUSH
18548: LD_INT 12
18550: PUSH
18551: LD_INT 13
18553: PUSH
18554: LD_INT 14
18556: PUSH
18557: LD_INT 15
18559: PUSH
18560: LD_INT 16
18562: PUSH
18563: LD_INT 17
18565: PUSH
18566: LD_INT 18
18568: PUSH
18569: LD_INT 19
18571: PUSH
18572: LD_INT 20
18574: PUSH
18575: LD_INT 21
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_INT 23
18583: PUSH
18584: LD_INT 24
18586: PUSH
18587: LD_INT 25
18589: PUSH
18590: LD_INT 26
18592: PUSH
18593: LD_INT 28
18595: PUSH
18596: LD_INT 30
18598: PUSH
18599: LD_INT 31
18601: PUSH
18602: LD_INT 32
18604: PUSH
18605: LD_INT 36
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 101
18641: PUSH
18642: LD_INT 102
18644: PUSH
18645: LD_INT 103
18647: PUSH
18648: LD_INT 104
18650: PUSH
18651: LD_INT 105
18653: PUSH
18654: LD_INT 106
18656: PUSH
18657: LD_INT 107
18659: PUSH
18660: LD_INT 108
18662: PUSH
18663: LD_INT 109
18665: PUSH
18666: LD_INT 110
18668: PUSH
18669: LD_INT 111
18671: PUSH
18672: LD_INT 112
18674: PUSH
18675: LD_INT 114
18677: PUSH
18678: LD_INT 116
18680: PUSH
18681: LD_INT 117
18683: PUSH
18684: LD_INT 118
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: ST_TO_ADDR
18709: GO 20604
18711: LD_INT 11
18713: DOUBLE
18714: EQUAL
18715: IFTRUE 18719
18717: GO 18923
18719: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18720: LD_ADDR_VAR 0 2
18724: PUSH
18725: LD_INT 2
18727: PUSH
18728: LD_INT 3
18730: PUSH
18731: LD_INT 4
18733: PUSH
18734: LD_INT 5
18736: PUSH
18737: LD_INT 6
18739: PUSH
18740: LD_INT 7
18742: PUSH
18743: LD_INT 8
18745: PUSH
18746: LD_INT 9
18748: PUSH
18749: LD_INT 10
18751: PUSH
18752: LD_INT 11
18754: PUSH
18755: LD_INT 12
18757: PUSH
18758: LD_INT 13
18760: PUSH
18761: LD_INT 14
18763: PUSH
18764: LD_INT 15
18766: PUSH
18767: LD_INT 16
18769: PUSH
18770: LD_INT 17
18772: PUSH
18773: LD_INT 18
18775: PUSH
18776: LD_INT 19
18778: PUSH
18779: LD_INT 20
18781: PUSH
18782: LD_INT 21
18784: PUSH
18785: LD_INT 22
18787: PUSH
18788: LD_INT 23
18790: PUSH
18791: LD_INT 24
18793: PUSH
18794: LD_INT 25
18796: PUSH
18797: LD_INT 26
18799: PUSH
18800: LD_INT 28
18802: PUSH
18803: LD_INT 30
18805: PUSH
18806: LD_INT 31
18808: PUSH
18809: LD_INT 32
18811: PUSH
18812: LD_INT 34
18814: PUSH
18815: LD_INT 36
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 101
18853: PUSH
18854: LD_INT 102
18856: PUSH
18857: LD_INT 103
18859: PUSH
18860: LD_INT 104
18862: PUSH
18863: LD_INT 105
18865: PUSH
18866: LD_INT 106
18868: PUSH
18869: LD_INT 107
18871: PUSH
18872: LD_INT 108
18874: PUSH
18875: LD_INT 109
18877: PUSH
18878: LD_INT 110
18880: PUSH
18881: LD_INT 111
18883: PUSH
18884: LD_INT 112
18886: PUSH
18887: LD_INT 114
18889: PUSH
18890: LD_INT 116
18892: PUSH
18893: LD_INT 117
18895: PUSH
18896: LD_INT 118
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: ST_TO_ADDR
18921: GO 20604
18923: LD_INT 12
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 19151
18931: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18932: LD_ADDR_VAR 0 2
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: LD_INT 3
18945: PUSH
18946: LD_INT 4
18948: PUSH
18949: LD_INT 5
18951: PUSH
18952: LD_INT 6
18954: PUSH
18955: LD_INT 7
18957: PUSH
18958: LD_INT 8
18960: PUSH
18961: LD_INT 9
18963: PUSH
18964: LD_INT 10
18966: PUSH
18967: LD_INT 11
18969: PUSH
18970: LD_INT 12
18972: PUSH
18973: LD_INT 13
18975: PUSH
18976: LD_INT 14
18978: PUSH
18979: LD_INT 15
18981: PUSH
18982: LD_INT 16
18984: PUSH
18985: LD_INT 17
18987: PUSH
18988: LD_INT 18
18990: PUSH
18991: LD_INT 19
18993: PUSH
18994: LD_INT 20
18996: PUSH
18997: LD_INT 21
18999: PUSH
19000: LD_INT 22
19002: PUSH
19003: LD_INT 23
19005: PUSH
19006: LD_INT 24
19008: PUSH
19009: LD_INT 25
19011: PUSH
19012: LD_INT 26
19014: PUSH
19015: LD_INT 27
19017: PUSH
19018: LD_INT 28
19020: PUSH
19021: LD_INT 30
19023: PUSH
19024: LD_INT 31
19026: PUSH
19027: LD_INT 32
19029: PUSH
19030: LD_INT 33
19032: PUSH
19033: LD_INT 34
19035: PUSH
19036: LD_INT 36
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 101
19077: PUSH
19078: LD_INT 102
19080: PUSH
19081: LD_INT 103
19083: PUSH
19084: LD_INT 104
19086: PUSH
19087: LD_INT 105
19089: PUSH
19090: LD_INT 106
19092: PUSH
19093: LD_INT 107
19095: PUSH
19096: LD_INT 108
19098: PUSH
19099: LD_INT 109
19101: PUSH
19102: LD_INT 110
19104: PUSH
19105: LD_INT 111
19107: PUSH
19108: LD_INT 112
19110: PUSH
19111: LD_INT 113
19113: PUSH
19114: LD_INT 114
19116: PUSH
19117: LD_INT 116
19119: PUSH
19120: LD_INT 117
19122: PUSH
19123: LD_INT 118
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: ST_TO_ADDR
19149: GO 20604
19151: LD_INT 13
19153: DOUBLE
19154: EQUAL
19155: IFTRUE 19159
19157: GO 19367
19159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19160: LD_ADDR_VAR 0 2
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: LD_INT 3
19173: PUSH
19174: LD_INT 4
19176: PUSH
19177: LD_INT 5
19179: PUSH
19180: LD_INT 8
19182: PUSH
19183: LD_INT 9
19185: PUSH
19186: LD_INT 10
19188: PUSH
19189: LD_INT 11
19191: PUSH
19192: LD_INT 12
19194: PUSH
19195: LD_INT 14
19197: PUSH
19198: LD_INT 15
19200: PUSH
19201: LD_INT 16
19203: PUSH
19204: LD_INT 17
19206: PUSH
19207: LD_INT 18
19209: PUSH
19210: LD_INT 19
19212: PUSH
19213: LD_INT 20
19215: PUSH
19216: LD_INT 21
19218: PUSH
19219: LD_INT 22
19221: PUSH
19222: LD_INT 23
19224: PUSH
19225: LD_INT 24
19227: PUSH
19228: LD_INT 25
19230: PUSH
19231: LD_INT 26
19233: PUSH
19234: LD_INT 27
19236: PUSH
19237: LD_INT 28
19239: PUSH
19240: LD_INT 30
19242: PUSH
19243: LD_INT 31
19245: PUSH
19246: LD_INT 32
19248: PUSH
19249: LD_INT 33
19251: PUSH
19252: LD_INT 34
19254: PUSH
19255: LD_INT 36
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 101
19293: PUSH
19294: LD_INT 102
19296: PUSH
19297: LD_INT 103
19299: PUSH
19300: LD_INT 104
19302: PUSH
19303: LD_INT 105
19305: PUSH
19306: LD_INT 106
19308: PUSH
19309: LD_INT 107
19311: PUSH
19312: LD_INT 108
19314: PUSH
19315: LD_INT 109
19317: PUSH
19318: LD_INT 110
19320: PUSH
19321: LD_INT 111
19323: PUSH
19324: LD_INT 112
19326: PUSH
19327: LD_INT 113
19329: PUSH
19330: LD_INT 114
19332: PUSH
19333: LD_INT 116
19335: PUSH
19336: LD_INT 117
19338: PUSH
19339: LD_INT 118
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: ST_TO_ADDR
19365: GO 20604
19367: LD_INT 14
19369: DOUBLE
19370: EQUAL
19371: IFTRUE 19375
19373: GO 19599
19375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19376: LD_ADDR_VAR 0 2
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: LD_INT 3
19389: PUSH
19390: LD_INT 4
19392: PUSH
19393: LD_INT 5
19395: PUSH
19396: LD_INT 6
19398: PUSH
19399: LD_INT 7
19401: PUSH
19402: LD_INT 8
19404: PUSH
19405: LD_INT 9
19407: PUSH
19408: LD_INT 10
19410: PUSH
19411: LD_INT 11
19413: PUSH
19414: LD_INT 12
19416: PUSH
19417: LD_INT 13
19419: PUSH
19420: LD_INT 14
19422: PUSH
19423: LD_INT 15
19425: PUSH
19426: LD_INT 16
19428: PUSH
19429: LD_INT 17
19431: PUSH
19432: LD_INT 18
19434: PUSH
19435: LD_INT 19
19437: PUSH
19438: LD_INT 20
19440: PUSH
19441: LD_INT 21
19443: PUSH
19444: LD_INT 22
19446: PUSH
19447: LD_INT 23
19449: PUSH
19450: LD_INT 24
19452: PUSH
19453: LD_INT 25
19455: PUSH
19456: LD_INT 26
19458: PUSH
19459: LD_INT 27
19461: PUSH
19462: LD_INT 28
19464: PUSH
19465: LD_INT 29
19467: PUSH
19468: LD_INT 30
19470: PUSH
19471: LD_INT 31
19473: PUSH
19474: LD_INT 32
19476: PUSH
19477: LD_INT 33
19479: PUSH
19480: LD_INT 34
19482: PUSH
19483: LD_INT 36
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 101
19525: PUSH
19526: LD_INT 102
19528: PUSH
19529: LD_INT 103
19531: PUSH
19532: LD_INT 104
19534: PUSH
19535: LD_INT 105
19537: PUSH
19538: LD_INT 106
19540: PUSH
19541: LD_INT 107
19543: PUSH
19544: LD_INT 108
19546: PUSH
19547: LD_INT 109
19549: PUSH
19550: LD_INT 110
19552: PUSH
19553: LD_INT 111
19555: PUSH
19556: LD_INT 112
19558: PUSH
19559: LD_INT 113
19561: PUSH
19562: LD_INT 114
19564: PUSH
19565: LD_INT 116
19567: PUSH
19568: LD_INT 117
19570: PUSH
19571: LD_INT 118
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: ST_TO_ADDR
19597: GO 20604
19599: LD_INT 15
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19831
19607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19608: LD_ADDR_VAR 0 2
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: LD_INT 2
19618: PUSH
19619: LD_INT 3
19621: PUSH
19622: LD_INT 4
19624: PUSH
19625: LD_INT 5
19627: PUSH
19628: LD_INT 6
19630: PUSH
19631: LD_INT 7
19633: PUSH
19634: LD_INT 8
19636: PUSH
19637: LD_INT 9
19639: PUSH
19640: LD_INT 10
19642: PUSH
19643: LD_INT 11
19645: PUSH
19646: LD_INT 12
19648: PUSH
19649: LD_INT 13
19651: PUSH
19652: LD_INT 14
19654: PUSH
19655: LD_INT 15
19657: PUSH
19658: LD_INT 16
19660: PUSH
19661: LD_INT 17
19663: PUSH
19664: LD_INT 18
19666: PUSH
19667: LD_INT 19
19669: PUSH
19670: LD_INT 20
19672: PUSH
19673: LD_INT 21
19675: PUSH
19676: LD_INT 22
19678: PUSH
19679: LD_INT 23
19681: PUSH
19682: LD_INT 24
19684: PUSH
19685: LD_INT 25
19687: PUSH
19688: LD_INT 26
19690: PUSH
19691: LD_INT 27
19693: PUSH
19694: LD_INT 28
19696: PUSH
19697: LD_INT 29
19699: PUSH
19700: LD_INT 30
19702: PUSH
19703: LD_INT 31
19705: PUSH
19706: LD_INT 32
19708: PUSH
19709: LD_INT 33
19711: PUSH
19712: LD_INT 34
19714: PUSH
19715: LD_INT 36
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 101
19757: PUSH
19758: LD_INT 102
19760: PUSH
19761: LD_INT 103
19763: PUSH
19764: LD_INT 104
19766: PUSH
19767: LD_INT 105
19769: PUSH
19770: LD_INT 106
19772: PUSH
19773: LD_INT 107
19775: PUSH
19776: LD_INT 108
19778: PUSH
19779: LD_INT 109
19781: PUSH
19782: LD_INT 110
19784: PUSH
19785: LD_INT 111
19787: PUSH
19788: LD_INT 112
19790: PUSH
19791: LD_INT 113
19793: PUSH
19794: LD_INT 114
19796: PUSH
19797: LD_INT 116
19799: PUSH
19800: LD_INT 117
19802: PUSH
19803: LD_INT 118
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: ST_TO_ADDR
19829: GO 20604
19831: LD_INT 16
19833: DOUBLE
19834: EQUAL
19835: IFTRUE 19839
19837: GO 19975
19839: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19840: LD_ADDR_VAR 0 2
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: LD_INT 4
19850: PUSH
19851: LD_INT 5
19853: PUSH
19854: LD_INT 7
19856: PUSH
19857: LD_INT 11
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: LD_INT 15
19865: PUSH
19866: LD_INT 16
19868: PUSH
19869: LD_INT 20
19871: PUSH
19872: LD_INT 21
19874: PUSH
19875: LD_INT 22
19877: PUSH
19878: LD_INT 23
19880: PUSH
19881: LD_INT 25
19883: PUSH
19884: LD_INT 26
19886: PUSH
19887: LD_INT 30
19889: PUSH
19890: LD_INT 31
19892: PUSH
19893: LD_INT 32
19895: PUSH
19896: LD_INT 33
19898: PUSH
19899: LD_INT 34
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 101
19925: PUSH
19926: LD_INT 102
19928: PUSH
19929: LD_INT 103
19931: PUSH
19932: LD_INT 106
19934: PUSH
19935: LD_INT 108
19937: PUSH
19938: LD_INT 112
19940: PUSH
19941: LD_INT 113
19943: PUSH
19944: LD_INT 114
19946: PUSH
19947: LD_INT 116
19949: PUSH
19950: LD_INT 117
19952: PUSH
19953: LD_INT 118
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: ST_TO_ADDR
19973: GO 20604
19975: LD_INT 17
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20207
19983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19984: LD_ADDR_VAR 0 2
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 3
19997: PUSH
19998: LD_INT 4
20000: PUSH
20001: LD_INT 5
20003: PUSH
20004: LD_INT 6
20006: PUSH
20007: LD_INT 7
20009: PUSH
20010: LD_INT 8
20012: PUSH
20013: LD_INT 9
20015: PUSH
20016: LD_INT 10
20018: PUSH
20019: LD_INT 11
20021: PUSH
20022: LD_INT 12
20024: PUSH
20025: LD_INT 13
20027: PUSH
20028: LD_INT 14
20030: PUSH
20031: LD_INT 15
20033: PUSH
20034: LD_INT 16
20036: PUSH
20037: LD_INT 17
20039: PUSH
20040: LD_INT 18
20042: PUSH
20043: LD_INT 19
20045: PUSH
20046: LD_INT 20
20048: PUSH
20049: LD_INT 21
20051: PUSH
20052: LD_INT 22
20054: PUSH
20055: LD_INT 23
20057: PUSH
20058: LD_INT 24
20060: PUSH
20061: LD_INT 25
20063: PUSH
20064: LD_INT 26
20066: PUSH
20067: LD_INT 27
20069: PUSH
20070: LD_INT 28
20072: PUSH
20073: LD_INT 29
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 31
20081: PUSH
20082: LD_INT 32
20084: PUSH
20085: LD_INT 33
20087: PUSH
20088: LD_INT 34
20090: PUSH
20091: LD_INT 36
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 101
20133: PUSH
20134: LD_INT 102
20136: PUSH
20137: LD_INT 103
20139: PUSH
20140: LD_INT 104
20142: PUSH
20143: LD_INT 105
20145: PUSH
20146: LD_INT 106
20148: PUSH
20149: LD_INT 107
20151: PUSH
20152: LD_INT 108
20154: PUSH
20155: LD_INT 109
20157: PUSH
20158: LD_INT 110
20160: PUSH
20161: LD_INT 111
20163: PUSH
20164: LD_INT 112
20166: PUSH
20167: LD_INT 113
20169: PUSH
20170: LD_INT 114
20172: PUSH
20173: LD_INT 116
20175: PUSH
20176: LD_INT 117
20178: PUSH
20179: LD_INT 118
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: ST_TO_ADDR
20205: GO 20604
20207: LD_INT 18
20209: DOUBLE
20210: EQUAL
20211: IFTRUE 20215
20213: GO 20363
20215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20216: LD_ADDR_VAR 0 2
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: LD_INT 4
20226: PUSH
20227: LD_INT 5
20229: PUSH
20230: LD_INT 7
20232: PUSH
20233: LD_INT 11
20235: PUSH
20236: LD_INT 12
20238: PUSH
20239: LD_INT 15
20241: PUSH
20242: LD_INT 16
20244: PUSH
20245: LD_INT 20
20247: PUSH
20248: LD_INT 21
20250: PUSH
20251: LD_INT 22
20253: PUSH
20254: LD_INT 23
20256: PUSH
20257: LD_INT 25
20259: PUSH
20260: LD_INT 26
20262: PUSH
20263: LD_INT 30
20265: PUSH
20266: LD_INT 31
20268: PUSH
20269: LD_INT 32
20271: PUSH
20272: LD_INT 33
20274: PUSH
20275: LD_INT 34
20277: PUSH
20278: LD_INT 35
20280: PUSH
20281: LD_INT 36
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 101
20309: PUSH
20310: LD_INT 102
20312: PUSH
20313: LD_INT 103
20315: PUSH
20316: LD_INT 106
20318: PUSH
20319: LD_INT 108
20321: PUSH
20322: LD_INT 112
20324: PUSH
20325: LD_INT 113
20327: PUSH
20328: LD_INT 114
20330: PUSH
20331: LD_INT 115
20333: PUSH
20334: LD_INT 116
20336: PUSH
20337: LD_INT 117
20339: PUSH
20340: LD_INT 118
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: ST_TO_ADDR
20361: GO 20604
20363: LD_INT 19
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20603
20371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20372: LD_ADDR_VAR 0 2
20376: PUSH
20377: LD_INT 1
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 3
20385: PUSH
20386: LD_INT 4
20388: PUSH
20389: LD_INT 5
20391: PUSH
20392: LD_INT 6
20394: PUSH
20395: LD_INT 7
20397: PUSH
20398: LD_INT 8
20400: PUSH
20401: LD_INT 9
20403: PUSH
20404: LD_INT 10
20406: PUSH
20407: LD_INT 11
20409: PUSH
20410: LD_INT 12
20412: PUSH
20413: LD_INT 13
20415: PUSH
20416: LD_INT 14
20418: PUSH
20419: LD_INT 15
20421: PUSH
20422: LD_INT 16
20424: PUSH
20425: LD_INT 17
20427: PUSH
20428: LD_INT 18
20430: PUSH
20431: LD_INT 19
20433: PUSH
20434: LD_INT 20
20436: PUSH
20437: LD_INT 21
20439: PUSH
20440: LD_INT 22
20442: PUSH
20443: LD_INT 23
20445: PUSH
20446: LD_INT 24
20448: PUSH
20449: LD_INT 25
20451: PUSH
20452: LD_INT 26
20454: PUSH
20455: LD_INT 27
20457: PUSH
20458: LD_INT 28
20460: PUSH
20461: LD_INT 29
20463: PUSH
20464: LD_INT 30
20466: PUSH
20467: LD_INT 31
20469: PUSH
20470: LD_INT 32
20472: PUSH
20473: LD_INT 33
20475: PUSH
20476: LD_INT 34
20478: PUSH
20479: LD_INT 35
20481: PUSH
20482: LD_INT 36
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 101
20525: PUSH
20526: LD_INT 102
20528: PUSH
20529: LD_INT 103
20531: PUSH
20532: LD_INT 104
20534: PUSH
20535: LD_INT 105
20537: PUSH
20538: LD_INT 106
20540: PUSH
20541: LD_INT 107
20543: PUSH
20544: LD_INT 108
20546: PUSH
20547: LD_INT 109
20549: PUSH
20550: LD_INT 110
20552: PUSH
20553: LD_INT 111
20555: PUSH
20556: LD_INT 112
20558: PUSH
20559: LD_INT 113
20561: PUSH
20562: LD_INT 114
20564: PUSH
20565: LD_INT 115
20567: PUSH
20568: LD_INT 116
20570: PUSH
20571: LD_INT 117
20573: PUSH
20574: LD_INT 118
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: ST_TO_ADDR
20601: GO 20604
20603: POP
// end else
20604: GO 20835
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: LD_INT 3
20619: PUSH
20620: LD_INT 4
20622: PUSH
20623: LD_INT 5
20625: PUSH
20626: LD_INT 6
20628: PUSH
20629: LD_INT 7
20631: PUSH
20632: LD_INT 8
20634: PUSH
20635: LD_INT 9
20637: PUSH
20638: LD_INT 10
20640: PUSH
20641: LD_INT 11
20643: PUSH
20644: LD_INT 12
20646: PUSH
20647: LD_INT 13
20649: PUSH
20650: LD_INT 14
20652: PUSH
20653: LD_INT 15
20655: PUSH
20656: LD_INT 16
20658: PUSH
20659: LD_INT 17
20661: PUSH
20662: LD_INT 18
20664: PUSH
20665: LD_INT 19
20667: PUSH
20668: LD_INT 20
20670: PUSH
20671: LD_INT 21
20673: PUSH
20674: LD_INT 22
20676: PUSH
20677: LD_INT 23
20679: PUSH
20680: LD_INT 24
20682: PUSH
20683: LD_INT 25
20685: PUSH
20686: LD_INT 26
20688: PUSH
20689: LD_INT 27
20691: PUSH
20692: LD_INT 28
20694: PUSH
20695: LD_INT 29
20697: PUSH
20698: LD_INT 30
20700: PUSH
20701: LD_INT 31
20703: PUSH
20704: LD_INT 32
20706: PUSH
20707: LD_INT 33
20709: PUSH
20710: LD_INT 34
20712: PUSH
20713: LD_INT 35
20715: PUSH
20716: LD_INT 36
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 101
20759: PUSH
20760: LD_INT 102
20762: PUSH
20763: LD_INT 103
20765: PUSH
20766: LD_INT 104
20768: PUSH
20769: LD_INT 105
20771: PUSH
20772: LD_INT 106
20774: PUSH
20775: LD_INT 107
20777: PUSH
20778: LD_INT 108
20780: PUSH
20781: LD_INT 109
20783: PUSH
20784: LD_INT 110
20786: PUSH
20787: LD_INT 111
20789: PUSH
20790: LD_INT 112
20792: PUSH
20793: LD_INT 113
20795: PUSH
20796: LD_INT 114
20798: PUSH
20799: LD_INT 115
20801: PUSH
20802: LD_INT 116
20804: PUSH
20805: LD_INT 117
20807: PUSH
20808: LD_INT 118
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: ST_TO_ADDR
// if result then
20835: LD_VAR 0 2
20839: IFFALSE 21625
// begin normal :=  ;
20841: LD_ADDR_VAR 0 5
20845: PUSH
20846: LD_STRING 
20848: ST_TO_ADDR
// hardcore :=  ;
20849: LD_ADDR_VAR 0 6
20853: PUSH
20854: LD_STRING 
20856: ST_TO_ADDR
// active :=  ;
20857: LD_ADDR_VAR 0 7
20861: PUSH
20862: LD_STRING 
20864: ST_TO_ADDR
// for i = 1 to normalCounter do
20865: LD_ADDR_VAR 0 8
20869: PUSH
20870: DOUBLE
20871: LD_INT 1
20873: DEC
20874: ST_TO_ADDR
20875: LD_EXP 42
20879: PUSH
20880: FOR_TO
20881: IFFALSE 20982
// begin tmp := 0 ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_STRING 0
20890: ST_TO_ADDR
// if result [ 1 ] then
20891: LD_VAR 0 2
20895: PUSH
20896: LD_INT 1
20898: ARRAY
20899: IFFALSE 20964
// if result [ 1 ] [ 1 ] = i then
20901: LD_VAR 0 2
20905: PUSH
20906: LD_INT 1
20908: ARRAY
20909: PUSH
20910: LD_INT 1
20912: ARRAY
20913: PUSH
20914: LD_VAR 0 8
20918: EQUAL
20919: IFFALSE 20964
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20921: LD_ADDR_VAR 0 2
20925: PUSH
20926: LD_VAR 0 2
20930: PPUSH
20931: LD_INT 1
20933: PPUSH
20934: LD_VAR 0 2
20938: PUSH
20939: LD_INT 1
20941: ARRAY
20942: PPUSH
20943: LD_INT 1
20945: PPUSH
20946: CALL_OW 3
20950: PPUSH
20951: CALL_OW 1
20955: ST_TO_ADDR
// tmp := 1 ;
20956: LD_ADDR_VAR 0 3
20960: PUSH
20961: LD_STRING 1
20963: ST_TO_ADDR
// end ; normal := normal & tmp ;
20964: LD_ADDR_VAR 0 5
20968: PUSH
20969: LD_VAR 0 5
20973: PUSH
20974: LD_VAR 0 3
20978: STR
20979: ST_TO_ADDR
// end ;
20980: GO 20880
20982: POP
20983: POP
// for i = 1 to hardcoreCounter do
20984: LD_ADDR_VAR 0 8
20988: PUSH
20989: DOUBLE
20990: LD_INT 1
20992: DEC
20993: ST_TO_ADDR
20994: LD_EXP 43
20998: PUSH
20999: FOR_TO
21000: IFFALSE 21105
// begin tmp := 0 ;
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_STRING 0
21009: ST_TO_ADDR
// if result [ 2 ] then
21010: LD_VAR 0 2
21014: PUSH
21015: LD_INT 2
21017: ARRAY
21018: IFFALSE 21087
// if result [ 2 ] [ 1 ] = 100 + i then
21020: LD_VAR 0 2
21024: PUSH
21025: LD_INT 2
21027: ARRAY
21028: PUSH
21029: LD_INT 1
21031: ARRAY
21032: PUSH
21033: LD_INT 100
21035: PUSH
21036: LD_VAR 0 8
21040: PLUS
21041: EQUAL
21042: IFFALSE 21087
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21044: LD_ADDR_VAR 0 2
21048: PUSH
21049: LD_VAR 0 2
21053: PPUSH
21054: LD_INT 2
21056: PPUSH
21057: LD_VAR 0 2
21061: PUSH
21062: LD_INT 2
21064: ARRAY
21065: PPUSH
21066: LD_INT 1
21068: PPUSH
21069: CALL_OW 3
21073: PPUSH
21074: CALL_OW 1
21078: ST_TO_ADDR
// tmp := 1 ;
21079: LD_ADDR_VAR 0 3
21083: PUSH
21084: LD_STRING 1
21086: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21087: LD_ADDR_VAR 0 6
21091: PUSH
21092: LD_VAR 0 6
21096: PUSH
21097: LD_VAR 0 3
21101: STR
21102: ST_TO_ADDR
// end ;
21103: GO 20999
21105: POP
21106: POP
// if isGameLoad then
21107: LD_VAR 0 1
21111: IFFALSE 21586
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21113: LD_ADDR_VAR 0 4
21117: PUSH
21118: LD_EXP 46
21122: PUSH
21123: LD_EXP 45
21127: PUSH
21128: LD_EXP 47
21132: PUSH
21133: LD_EXP 44
21137: PUSH
21138: LD_EXP 48
21142: PUSH
21143: LD_EXP 49
21147: PUSH
21148: LD_EXP 50
21152: PUSH
21153: LD_EXP 51
21157: PUSH
21158: LD_EXP 52
21162: PUSH
21163: LD_EXP 53
21167: PUSH
21168: LD_EXP 54
21172: PUSH
21173: LD_EXP 55
21177: PUSH
21178: LD_EXP 56
21182: PUSH
21183: LD_EXP 57
21187: PUSH
21188: LD_EXP 65
21192: PUSH
21193: LD_EXP 66
21197: PUSH
21198: LD_EXP 67
21202: PUSH
21203: LD_EXP 68
21207: PUSH
21208: LD_EXP 70
21212: PUSH
21213: LD_EXP 71
21217: PUSH
21218: LD_EXP 72
21222: PUSH
21223: LD_EXP 75
21227: PUSH
21228: LD_EXP 77
21232: PUSH
21233: LD_EXP 78
21237: PUSH
21238: LD_EXP 79
21242: PUSH
21243: LD_EXP 81
21247: PUSH
21248: LD_EXP 82
21252: PUSH
21253: LD_EXP 85
21257: PUSH
21258: LD_EXP 86
21262: PUSH
21263: LD_EXP 87
21267: PUSH
21268: LD_EXP 88
21272: PUSH
21273: LD_EXP 89
21277: PUSH
21278: LD_EXP 90
21282: PUSH
21283: LD_EXP 91
21287: PUSH
21288: LD_EXP 92
21292: PUSH
21293: LD_EXP 93
21297: PUSH
21298: LD_EXP 58
21302: PUSH
21303: LD_EXP 59
21307: PUSH
21308: LD_EXP 62
21312: PUSH
21313: LD_EXP 63
21317: PUSH
21318: LD_EXP 64
21322: PUSH
21323: LD_EXP 60
21327: PUSH
21328: LD_EXP 61
21332: PUSH
21333: LD_EXP 69
21337: PUSH
21338: LD_EXP 73
21342: PUSH
21343: LD_EXP 74
21347: PUSH
21348: LD_EXP 76
21352: PUSH
21353: LD_EXP 80
21357: PUSH
21358: LD_EXP 83
21362: PUSH
21363: LD_EXP 84
21367: PUSH
21368: LD_EXP 94
21372: PUSH
21373: LD_EXP 95
21377: PUSH
21378: LD_EXP 96
21382: PUSH
21383: LD_EXP 97
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: ST_TO_ADDR
// tmp :=  ;
21444: LD_ADDR_VAR 0 3
21448: PUSH
21449: LD_STRING 
21451: ST_TO_ADDR
// for i = 1 to normalCounter do
21452: LD_ADDR_VAR 0 8
21456: PUSH
21457: DOUBLE
21458: LD_INT 1
21460: DEC
21461: ST_TO_ADDR
21462: LD_EXP 42
21466: PUSH
21467: FOR_TO
21468: IFFALSE 21504
// begin if flags [ i ] then
21470: LD_VAR 0 4
21474: PUSH
21475: LD_VAR 0 8
21479: ARRAY
21480: IFFALSE 21502
// tmp := tmp & i & ; ;
21482: LD_ADDR_VAR 0 3
21486: PUSH
21487: LD_VAR 0 3
21491: PUSH
21492: LD_VAR 0 8
21496: STR
21497: PUSH
21498: LD_STRING ;
21500: STR
21501: ST_TO_ADDR
// end ;
21502: GO 21467
21504: POP
21505: POP
// for i = 1 to hardcoreCounter do
21506: LD_ADDR_VAR 0 8
21510: PUSH
21511: DOUBLE
21512: LD_INT 1
21514: DEC
21515: ST_TO_ADDR
21516: LD_EXP 43
21520: PUSH
21521: FOR_TO
21522: IFFALSE 21568
// begin if flags [ normalCounter + i ] then
21524: LD_VAR 0 4
21528: PUSH
21529: LD_EXP 42
21533: PUSH
21534: LD_VAR 0 8
21538: PLUS
21539: ARRAY
21540: IFFALSE 21566
// tmp := tmp & ( 100 + i ) & ; ;
21542: LD_ADDR_VAR 0 3
21546: PUSH
21547: LD_VAR 0 3
21551: PUSH
21552: LD_INT 100
21554: PUSH
21555: LD_VAR 0 8
21559: PLUS
21560: STR
21561: PUSH
21562: LD_STRING ;
21564: STR
21565: ST_TO_ADDR
// end ;
21566: GO 21521
21568: POP
21569: POP
// if tmp then
21570: LD_VAR 0 3
21574: IFFALSE 21586
// active := tmp ;
21576: LD_ADDR_VAR 0 7
21580: PUSH
21581: LD_VAR 0 3
21585: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21586: LD_STRING getStreamItemsFromMission("
21588: PUSH
21589: LD_VAR 0 5
21593: STR
21594: PUSH
21595: LD_STRING ","
21597: STR
21598: PUSH
21599: LD_VAR 0 6
21603: STR
21604: PUSH
21605: LD_STRING ","
21607: STR
21608: PUSH
21609: LD_VAR 0 7
21613: STR
21614: PUSH
21615: LD_STRING ")
21617: STR
21618: PPUSH
21619: CALL_OW 559
// end else
21623: GO 21632
// ToLua ( getStreamItemsFromMission("","","") ) ;
21625: LD_STRING getStreamItemsFromMission("","","")
21627: PPUSH
21628: CALL_OW 559
// end ;
21632: LD_VAR 0 2
21636: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21637: LD_EXP 41
21641: PUSH
21642: LD_EXP 46
21646: AND
21647: IFFALSE 21771
21649: GO 21651
21651: DISABLE
21652: LD_INT 0
21654: PPUSH
21655: PPUSH
// begin enable ;
21656: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: LD_INT 22
21664: PUSH
21665: LD_OWVAR 2
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 2
21676: PUSH
21677: LD_INT 34
21679: PUSH
21680: LD_INT 7
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 34
21689: PUSH
21690: LD_INT 45
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 34
21699: PUSH
21700: LD_INT 28
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 34
21709: PUSH
21710: LD_INT 47
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PPUSH
21728: CALL_OW 69
21732: ST_TO_ADDR
// if not tmp then
21733: LD_VAR 0 2
21737: NOT
21738: IFFALSE 21742
// exit ;
21740: GO 21771
// for i in tmp do
21742: LD_ADDR_VAR 0 1
21746: PUSH
21747: LD_VAR 0 2
21751: PUSH
21752: FOR_IN
21753: IFFALSE 21769
// begin SetLives ( i , 0 ) ;
21755: LD_VAR 0 1
21759: PPUSH
21760: LD_INT 0
21762: PPUSH
21763: CALL_OW 234
// end ;
21767: GO 21752
21769: POP
21770: POP
// end ;
21771: PPOPN 2
21773: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21774: LD_EXP 41
21778: PUSH
21779: LD_EXP 47
21783: AND
21784: IFFALSE 21868
21786: GO 21788
21788: DISABLE
21789: LD_INT 0
21791: PPUSH
21792: PPUSH
// begin enable ;
21793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: LD_INT 22
21801: PUSH
21802: LD_OWVAR 2
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 32
21813: PUSH
21814: LD_INT 3
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PPUSH
21825: CALL_OW 69
21829: ST_TO_ADDR
// if not tmp then
21830: LD_VAR 0 2
21834: NOT
21835: IFFALSE 21839
// exit ;
21837: GO 21868
// for i in tmp do
21839: LD_ADDR_VAR 0 1
21843: PUSH
21844: LD_VAR 0 2
21848: PUSH
21849: FOR_IN
21850: IFFALSE 21866
// begin SetLives ( i , 0 ) ;
21852: LD_VAR 0 1
21856: PPUSH
21857: LD_INT 0
21859: PPUSH
21860: CALL_OW 234
// end ;
21864: GO 21849
21866: POP
21867: POP
// end ;
21868: PPOPN 2
21870: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21871: LD_EXP 41
21875: PUSH
21876: LD_EXP 44
21880: AND
21881: IFFALSE 21974
21883: GO 21885
21885: DISABLE
21886: LD_INT 0
21888: PPUSH
// begin enable ;
21889: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21890: LD_ADDR_VAR 0 1
21894: PUSH
21895: LD_INT 22
21897: PUSH
21898: LD_OWVAR 2
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: LD_INT 25
21912: PUSH
21913: LD_INT 5
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 25
21922: PUSH
21923: LD_INT 9
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 25
21932: PUSH
21933: LD_INT 8
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PPUSH
21950: CALL_OW 69
21954: PUSH
21955: FOR_IN
21956: IFFALSE 21972
// begin SetClass ( i , 1 ) ;
21958: LD_VAR 0 1
21962: PPUSH
21963: LD_INT 1
21965: PPUSH
21966: CALL_OW 336
// end ;
21970: GO 21955
21972: POP
21973: POP
// end ;
21974: PPOPN 1
21976: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21977: LD_EXP 41
21981: PUSH
21982: LD_EXP 45
21986: AND
21987: PUSH
21988: LD_OWVAR 65
21992: PUSH
21993: LD_INT 7
21995: LESS
21996: AND
21997: IFFALSE 22011
21999: GO 22001
22001: DISABLE
// begin enable ;
22002: ENABLE
// game_speed := 7 ;
22003: LD_ADDR_OWVAR 65
22007: PUSH
22008: LD_INT 7
22010: ST_TO_ADDR
// end ;
22011: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22012: LD_EXP 41
22016: PUSH
22017: LD_EXP 48
22021: AND
22022: IFFALSE 22224
22024: GO 22026
22026: DISABLE
22027: LD_INT 0
22029: PPUSH
22030: PPUSH
22031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22032: LD_ADDR_VAR 0 3
22036: PUSH
22037: LD_INT 81
22039: PUSH
22040: LD_OWVAR 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 21
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PPUSH
22063: CALL_OW 69
22067: ST_TO_ADDR
// if not tmp then
22068: LD_VAR 0 3
22072: NOT
22073: IFFALSE 22077
// exit ;
22075: GO 22224
// if tmp > 5 then
22077: LD_VAR 0 3
22081: PUSH
22082: LD_INT 5
22084: GREATER
22085: IFFALSE 22097
// k := 5 else
22087: LD_ADDR_VAR 0 2
22091: PUSH
22092: LD_INT 5
22094: ST_TO_ADDR
22095: GO 22107
// k := tmp ;
22097: LD_ADDR_VAR 0 2
22101: PUSH
22102: LD_VAR 0 3
22106: ST_TO_ADDR
// for i := 1 to k do
22107: LD_ADDR_VAR 0 1
22111: PUSH
22112: DOUBLE
22113: LD_INT 1
22115: DEC
22116: ST_TO_ADDR
22117: LD_VAR 0 2
22121: PUSH
22122: FOR_TO
22123: IFFALSE 22222
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22125: LD_VAR 0 3
22129: PUSH
22130: LD_VAR 0 1
22134: ARRAY
22135: PPUSH
22136: LD_VAR 0 1
22140: PUSH
22141: LD_INT 4
22143: MOD
22144: PUSH
22145: LD_INT 1
22147: PLUS
22148: PPUSH
22149: CALL_OW 259
22153: PUSH
22154: LD_INT 10
22156: LESS
22157: IFFALSE 22220
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22159: LD_VAR 0 3
22163: PUSH
22164: LD_VAR 0 1
22168: ARRAY
22169: PPUSH
22170: LD_VAR 0 1
22174: PUSH
22175: LD_INT 4
22177: MOD
22178: PUSH
22179: LD_INT 1
22181: PLUS
22182: PPUSH
22183: LD_VAR 0 3
22187: PUSH
22188: LD_VAR 0 1
22192: ARRAY
22193: PPUSH
22194: LD_VAR 0 1
22198: PUSH
22199: LD_INT 4
22201: MOD
22202: PUSH
22203: LD_INT 1
22205: PLUS
22206: PPUSH
22207: CALL_OW 259
22211: PUSH
22212: LD_INT 1
22214: PLUS
22215: PPUSH
22216: CALL_OW 237
22220: GO 22122
22222: POP
22223: POP
// end ;
22224: PPOPN 3
22226: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22227: LD_EXP 41
22231: PUSH
22232: LD_EXP 49
22236: AND
22237: IFFALSE 22257
22239: GO 22241
22241: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22242: LD_INT 4
22244: PPUSH
22245: LD_OWVAR 2
22249: PPUSH
22250: LD_INT 0
22252: PPUSH
22253: CALL_OW 324
22257: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22258: LD_EXP 41
22262: PUSH
22263: LD_EXP 78
22267: AND
22268: IFFALSE 22288
22270: GO 22272
22272: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22273: LD_INT 19
22275: PPUSH
22276: LD_OWVAR 2
22280: PPUSH
22281: LD_INT 0
22283: PPUSH
22284: CALL_OW 324
22288: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22289: LD_EXP 41
22293: PUSH
22294: LD_EXP 50
22298: AND
22299: IFFALSE 22401
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
// begin enable ;
22308: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 22
22316: PUSH
22317: LD_OWVAR 2
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 34
22331: PUSH
22332: LD_INT 11
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 34
22341: PUSH
22342: LD_INT 30
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PPUSH
22358: CALL_OW 69
22362: ST_TO_ADDR
// if not tmp then
22363: LD_VAR 0 2
22367: NOT
22368: IFFALSE 22372
// exit ;
22370: GO 22401
// for i in tmp do
22372: LD_ADDR_VAR 0 1
22376: PUSH
22377: LD_VAR 0 2
22381: PUSH
22382: FOR_IN
22383: IFFALSE 22399
// begin SetLives ( i , 0 ) ;
22385: LD_VAR 0 1
22389: PPUSH
22390: LD_INT 0
22392: PPUSH
22393: CALL_OW 234
// end ;
22397: GO 22382
22399: POP
22400: POP
// end ;
22401: PPOPN 2
22403: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22404: LD_EXP 41
22408: PUSH
22409: LD_EXP 51
22413: AND
22414: IFFALSE 22434
22416: GO 22418
22418: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22419: LD_INT 32
22421: PPUSH
22422: LD_OWVAR 2
22426: PPUSH
22427: LD_INT 0
22429: PPUSH
22430: CALL_OW 324
22434: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22435: LD_EXP 41
22439: PUSH
22440: LD_EXP 52
22444: AND
22445: IFFALSE 22626
22447: GO 22449
22449: DISABLE
22450: LD_INT 0
22452: PPUSH
22453: PPUSH
22454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22455: LD_ADDR_VAR 0 2
22459: PUSH
22460: LD_INT 22
22462: PUSH
22463: LD_OWVAR 2
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 33
22474: PUSH
22475: LD_INT 3
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PPUSH
22486: CALL_OW 69
22490: ST_TO_ADDR
// if not tmp then
22491: LD_VAR 0 2
22495: NOT
22496: IFFALSE 22500
// exit ;
22498: GO 22626
// side := 0 ;
22500: LD_ADDR_VAR 0 3
22504: PUSH
22505: LD_INT 0
22507: ST_TO_ADDR
// for i := 1 to 8 do
22508: LD_ADDR_VAR 0 1
22512: PUSH
22513: DOUBLE
22514: LD_INT 1
22516: DEC
22517: ST_TO_ADDR
22518: LD_INT 8
22520: PUSH
22521: FOR_TO
22522: IFFALSE 22570
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22524: LD_OWVAR 2
22528: PUSH
22529: LD_VAR 0 1
22533: NONEQUAL
22534: PUSH
22535: LD_OWVAR 2
22539: PPUSH
22540: LD_VAR 0 1
22544: PPUSH
22545: CALL_OW 81
22549: PUSH
22550: LD_INT 2
22552: EQUAL
22553: AND
22554: IFFALSE 22568
// begin side := i ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: LD_VAR 0 1
22565: ST_TO_ADDR
// break ;
22566: GO 22570
// end ;
22568: GO 22521
22570: POP
22571: POP
// if not side then
22572: LD_VAR 0 3
22576: NOT
22577: IFFALSE 22581
// exit ;
22579: GO 22626
// for i := 1 to tmp do
22581: LD_ADDR_VAR 0 1
22585: PUSH
22586: DOUBLE
22587: LD_INT 1
22589: DEC
22590: ST_TO_ADDR
22591: LD_VAR 0 2
22595: PUSH
22596: FOR_TO
22597: IFFALSE 22624
// if Prob ( 60 ) then
22599: LD_INT 60
22601: PPUSH
22602: CALL_OW 13
22606: IFFALSE 22622
// SetSide ( i , side ) ;
22608: LD_VAR 0 1
22612: PPUSH
22613: LD_VAR 0 3
22617: PPUSH
22618: CALL_OW 235
22622: GO 22596
22624: POP
22625: POP
// end ;
22626: PPOPN 3
22628: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22629: LD_EXP 41
22633: PUSH
22634: LD_EXP 54
22638: AND
22639: IFFALSE 22758
22641: GO 22643
22643: DISABLE
22644: LD_INT 0
22646: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22647: LD_ADDR_VAR 0 1
22651: PUSH
22652: LD_INT 22
22654: PUSH
22655: LD_OWVAR 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 21
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 3
22676: PUSH
22677: LD_INT 23
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: PPUSH
22696: CALL_OW 69
22700: PUSH
22701: FOR_IN
22702: IFFALSE 22756
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 257
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: LD_INT 4
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: IN
22732: IFFALSE 22754
// SetClass ( un , rand ( 1 , 4 ) ) ;
22734: LD_VAR 0 1
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: LD_INT 4
22744: PPUSH
22745: CALL_OW 12
22749: PPUSH
22750: CALL_OW 336
22754: GO 22701
22756: POP
22757: POP
// end ;
22758: PPOPN 1
22760: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22761: LD_EXP 41
22765: PUSH
22766: LD_EXP 53
22770: AND
22771: IFFALSE 22850
22773: GO 22775
22775: DISABLE
22776: LD_INT 0
22778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22779: LD_ADDR_VAR 0 1
22783: PUSH
22784: LD_INT 22
22786: PUSH
22787: LD_OWVAR 2
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 21
22798: PUSH
22799: LD_INT 3
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PPUSH
22810: CALL_OW 69
22814: ST_TO_ADDR
// if not tmp then
22815: LD_VAR 0 1
22819: NOT
22820: IFFALSE 22824
// exit ;
22822: GO 22850
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22824: LD_VAR 0 1
22828: PUSH
22829: LD_INT 1
22831: PPUSH
22832: LD_VAR 0 1
22836: PPUSH
22837: CALL_OW 12
22841: ARRAY
22842: PPUSH
22843: LD_INT 100
22845: PPUSH
22846: CALL_OW 234
// end ;
22850: PPOPN 1
22852: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22853: LD_EXP 41
22857: PUSH
22858: LD_EXP 55
22862: AND
22863: IFFALSE 22961
22865: GO 22867
22867: DISABLE
22868: LD_INT 0
22870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22871: LD_ADDR_VAR 0 1
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_OWVAR 2
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 21
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PPUSH
22902: CALL_OW 69
22906: ST_TO_ADDR
// if not tmp then
22907: LD_VAR 0 1
22911: NOT
22912: IFFALSE 22916
// exit ;
22914: GO 22961
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22916: LD_VAR 0 1
22920: PUSH
22921: LD_INT 1
22923: PPUSH
22924: LD_VAR 0 1
22928: PPUSH
22929: CALL_OW 12
22933: ARRAY
22934: PPUSH
22935: LD_INT 1
22937: PPUSH
22938: LD_INT 4
22940: PPUSH
22941: CALL_OW 12
22945: PPUSH
22946: LD_INT 3000
22948: PPUSH
22949: LD_INT 9000
22951: PPUSH
22952: CALL_OW 12
22956: PPUSH
22957: CALL_OW 492
// end ;
22961: PPOPN 1
22963: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22964: LD_EXP 41
22968: PUSH
22969: LD_EXP 56
22973: AND
22974: IFFALSE 22994
22976: GO 22978
22978: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22979: LD_INT 1
22981: PPUSH
22982: LD_OWVAR 2
22986: PPUSH
22987: LD_INT 0
22989: PPUSH
22990: CALL_OW 324
22994: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22995: LD_EXP 41
22999: PUSH
23000: LD_EXP 57
23004: AND
23005: IFFALSE 23088
23007: GO 23009
23009: DISABLE
23010: LD_INT 0
23012: PPUSH
23013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23014: LD_ADDR_VAR 0 2
23018: PUSH
23019: LD_INT 22
23021: PUSH
23022: LD_OWVAR 2
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 21
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PPUSH
23045: CALL_OW 69
23049: ST_TO_ADDR
// if not tmp then
23050: LD_VAR 0 2
23054: NOT
23055: IFFALSE 23059
// exit ;
23057: GO 23088
// for i in tmp do
23059: LD_ADDR_VAR 0 1
23063: PUSH
23064: LD_VAR 0 2
23068: PUSH
23069: FOR_IN
23070: IFFALSE 23086
// SetBLevel ( i , 10 ) ;
23072: LD_VAR 0 1
23076: PPUSH
23077: LD_INT 10
23079: PPUSH
23080: CALL_OW 241
23084: GO 23069
23086: POP
23087: POP
// end ;
23088: PPOPN 2
23090: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23091: LD_EXP 41
23095: PUSH
23096: LD_EXP 58
23100: AND
23101: IFFALSE 23212
23103: GO 23105
23105: DISABLE
23106: LD_INT 0
23108: PPUSH
23109: PPUSH
23110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23111: LD_ADDR_VAR 0 3
23115: PUSH
23116: LD_INT 22
23118: PUSH
23119: LD_OWVAR 2
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 25
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PPUSH
23142: CALL_OW 69
23146: ST_TO_ADDR
// if not tmp then
23147: LD_VAR 0 3
23151: NOT
23152: IFFALSE 23156
// exit ;
23154: GO 23212
// un := tmp [ rand ( 1 , tmp ) ] ;
23156: LD_ADDR_VAR 0 2
23160: PUSH
23161: LD_VAR 0 3
23165: PUSH
23166: LD_INT 1
23168: PPUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: CALL_OW 12
23178: ARRAY
23179: ST_TO_ADDR
// if Crawls ( un ) then
23180: LD_VAR 0 2
23184: PPUSH
23185: CALL_OW 318
23189: IFFALSE 23200
// ComWalk ( un ) ;
23191: LD_VAR 0 2
23195: PPUSH
23196: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23200: LD_VAR 0 2
23204: PPUSH
23205: LD_INT 5
23207: PPUSH
23208: CALL_OW 336
// end ;
23212: PPOPN 3
23214: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23215: LD_EXP 41
23219: PUSH
23220: LD_EXP 59
23224: AND
23225: PUSH
23226: LD_OWVAR 67
23230: PUSH
23231: LD_INT 4
23233: LESS
23234: AND
23235: IFFALSE 23254
23237: GO 23239
23239: DISABLE
// begin Difficulty := Difficulty + 1 ;
23240: LD_ADDR_OWVAR 67
23244: PUSH
23245: LD_OWVAR 67
23249: PUSH
23250: LD_INT 1
23252: PLUS
23253: ST_TO_ADDR
// end ;
23254: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23255: LD_EXP 41
23259: PUSH
23260: LD_EXP 60
23264: AND
23265: IFFALSE 23368
23267: GO 23269
23269: DISABLE
23270: LD_INT 0
23272: PPUSH
// begin for i := 1 to 5 do
23273: LD_ADDR_VAR 0 1
23277: PUSH
23278: DOUBLE
23279: LD_INT 1
23281: DEC
23282: ST_TO_ADDR
23283: LD_INT 5
23285: PUSH
23286: FOR_TO
23287: IFFALSE 23366
// begin uc_nation := nation_nature ;
23289: LD_ADDR_OWVAR 21
23293: PUSH
23294: LD_INT 0
23296: ST_TO_ADDR
// uc_side := 0 ;
23297: LD_ADDR_OWVAR 20
23301: PUSH
23302: LD_INT 0
23304: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23305: LD_ADDR_OWVAR 29
23309: PUSH
23310: LD_INT 12
23312: PUSH
23313: LD_INT 12
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: ST_TO_ADDR
// hc_agressivity := 20 ;
23320: LD_ADDR_OWVAR 35
23324: PUSH
23325: LD_INT 20
23327: ST_TO_ADDR
// hc_class := class_tiger ;
23328: LD_ADDR_OWVAR 28
23332: PUSH
23333: LD_INT 14
23335: ST_TO_ADDR
// hc_gallery :=  ;
23336: LD_ADDR_OWVAR 33
23340: PUSH
23341: LD_STRING 
23343: ST_TO_ADDR
// hc_name :=  ;
23344: LD_ADDR_OWVAR 26
23348: PUSH
23349: LD_STRING 
23351: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23352: CALL_OW 44
23356: PPUSH
23357: LD_INT 0
23359: PPUSH
23360: CALL_OW 51
// end ;
23364: GO 23286
23366: POP
23367: POP
// end ;
23368: PPOPN 1
23370: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23371: LD_EXP 41
23375: PUSH
23376: LD_EXP 61
23380: AND
23381: IFFALSE 23390
23383: GO 23385
23385: DISABLE
// StreamSibBomb ;
23386: CALL 23391 0 0
23390: END
// export function StreamSibBomb ; var i , x , y ; begin
23391: LD_INT 0
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
// result := false ;
23397: LD_ADDR_VAR 0 1
23401: PUSH
23402: LD_INT 0
23404: ST_TO_ADDR
// for i := 1 to 16 do
23405: LD_ADDR_VAR 0 2
23409: PUSH
23410: DOUBLE
23411: LD_INT 1
23413: DEC
23414: ST_TO_ADDR
23415: LD_INT 16
23417: PUSH
23418: FOR_TO
23419: IFFALSE 23618
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23421: LD_ADDR_VAR 0 3
23425: PUSH
23426: LD_INT 10
23428: PUSH
23429: LD_INT 20
23431: PUSH
23432: LD_INT 30
23434: PUSH
23435: LD_INT 40
23437: PUSH
23438: LD_INT 50
23440: PUSH
23441: LD_INT 60
23443: PUSH
23444: LD_INT 70
23446: PUSH
23447: LD_INT 80
23449: PUSH
23450: LD_INT 90
23452: PUSH
23453: LD_INT 100
23455: PUSH
23456: LD_INT 110
23458: PUSH
23459: LD_INT 120
23461: PUSH
23462: LD_INT 130
23464: PUSH
23465: LD_INT 140
23467: PUSH
23468: LD_INT 150
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 1
23490: PPUSH
23491: LD_INT 15
23493: PPUSH
23494: CALL_OW 12
23498: ARRAY
23499: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23500: LD_ADDR_VAR 0 4
23504: PUSH
23505: LD_INT 10
23507: PUSH
23508: LD_INT 20
23510: PUSH
23511: LD_INT 30
23513: PUSH
23514: LD_INT 40
23516: PUSH
23517: LD_INT 50
23519: PUSH
23520: LD_INT 60
23522: PUSH
23523: LD_INT 70
23525: PUSH
23526: LD_INT 80
23528: PUSH
23529: LD_INT 90
23531: PUSH
23532: LD_INT 100
23534: PUSH
23535: LD_INT 110
23537: PUSH
23538: LD_INT 120
23540: PUSH
23541: LD_INT 130
23543: PUSH
23544: LD_INT 140
23546: PUSH
23547: LD_INT 150
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 1
23569: PPUSH
23570: LD_INT 15
23572: PPUSH
23573: CALL_OW 12
23577: ARRAY
23578: ST_TO_ADDR
// if ValidHex ( x , y ) then
23579: LD_VAR 0 3
23583: PPUSH
23584: LD_VAR 0 4
23588: PPUSH
23589: CALL_OW 488
23593: IFFALSE 23616
// begin result := [ x , y ] ;
23595: LD_ADDR_VAR 0 1
23599: PUSH
23600: LD_VAR 0 3
23604: PUSH
23605: LD_VAR 0 4
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: ST_TO_ADDR
// break ;
23614: GO 23618
// end ; end ;
23616: GO 23418
23618: POP
23619: POP
// if result then
23620: LD_VAR 0 1
23624: IFFALSE 23684
// begin ToLua ( playSibBomb() ) ;
23626: LD_STRING playSibBomb()
23628: PPUSH
23629: CALL_OW 559
// wait ( 0 0$14 ) ;
23633: LD_INT 490
23635: PPUSH
23636: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23640: LD_VAR 0 1
23644: PUSH
23645: LD_INT 1
23647: ARRAY
23648: PPUSH
23649: LD_VAR 0 1
23653: PUSH
23654: LD_INT 2
23656: ARRAY
23657: PPUSH
23658: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23662: LD_VAR 0 1
23666: PUSH
23667: LD_INT 1
23669: ARRAY
23670: PPUSH
23671: LD_VAR 0 1
23675: PUSH
23676: LD_INT 2
23678: ARRAY
23679: PPUSH
23680: CALL_OW 429
// end ; end ;
23684: LD_VAR 0 1
23688: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23689: LD_EXP 41
23693: PUSH
23694: LD_EXP 63
23698: AND
23699: IFFALSE 23711
23701: GO 23703
23703: DISABLE
// YouLost (  ) ;
23704: LD_STRING 
23706: PPUSH
23707: CALL_OW 104
23711: END
// every 0 0$1 trigger StreamModeActive and sFog do
23712: LD_EXP 41
23716: PUSH
23717: LD_EXP 62
23721: AND
23722: IFFALSE 23736
23724: GO 23726
23726: DISABLE
// FogOff ( your_side ) ;
23727: LD_OWVAR 2
23731: PPUSH
23732: CALL_OW 344
23736: END
// every 0 0$1 trigger StreamModeActive and sSun do
23737: LD_EXP 41
23741: PUSH
23742: LD_EXP 64
23746: AND
23747: IFFALSE 23775
23749: GO 23751
23751: DISABLE
// begin solar_recharge_percent := 0 ;
23752: LD_ADDR_OWVAR 79
23756: PUSH
23757: LD_INT 0
23759: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23760: LD_INT 10500
23762: PPUSH
23763: CALL_OW 67
// solar_recharge_percent := 100 ;
23767: LD_ADDR_OWVAR 79
23771: PUSH
23772: LD_INT 100
23774: ST_TO_ADDR
// end ;
23775: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23776: LD_EXP 41
23780: PUSH
23781: LD_EXP 65
23785: AND
23786: IFFALSE 24025
23788: GO 23790
23790: DISABLE
23791: LD_INT 0
23793: PPUSH
23794: PPUSH
23795: PPUSH
// begin tmp := [ ] ;
23796: LD_ADDR_VAR 0 3
23800: PUSH
23801: EMPTY
23802: ST_TO_ADDR
// for i := 1 to 6 do
23803: LD_ADDR_VAR 0 1
23807: PUSH
23808: DOUBLE
23809: LD_INT 1
23811: DEC
23812: ST_TO_ADDR
23813: LD_INT 6
23815: PUSH
23816: FOR_TO
23817: IFFALSE 23922
// begin uc_nation := nation_nature ;
23819: LD_ADDR_OWVAR 21
23823: PUSH
23824: LD_INT 0
23826: ST_TO_ADDR
// uc_side := 0 ;
23827: LD_ADDR_OWVAR 20
23831: PUSH
23832: LD_INT 0
23834: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23835: LD_ADDR_OWVAR 29
23839: PUSH
23840: LD_INT 12
23842: PUSH
23843: LD_INT 12
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: ST_TO_ADDR
// hc_agressivity := 20 ;
23850: LD_ADDR_OWVAR 35
23854: PUSH
23855: LD_INT 20
23857: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23858: LD_ADDR_OWVAR 28
23862: PUSH
23863: LD_INT 17
23865: ST_TO_ADDR
// hc_gallery :=  ;
23866: LD_ADDR_OWVAR 33
23870: PUSH
23871: LD_STRING 
23873: ST_TO_ADDR
// hc_name :=  ;
23874: LD_ADDR_OWVAR 26
23878: PUSH
23879: LD_STRING 
23881: ST_TO_ADDR
// un := CreateHuman ;
23882: LD_ADDR_VAR 0 2
23886: PUSH
23887: CALL_OW 44
23891: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23892: LD_VAR 0 2
23896: PPUSH
23897: LD_INT 1
23899: PPUSH
23900: CALL_OW 51
// tmp := tmp ^ un ;
23904: LD_ADDR_VAR 0 3
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_VAR 0 2
23918: ADD
23919: ST_TO_ADDR
// end ;
23920: GO 23816
23922: POP
23923: POP
// repeat wait ( 0 0$1 ) ;
23924: LD_INT 35
23926: PPUSH
23927: CALL_OW 67
// for un in tmp do
23931: LD_ADDR_VAR 0 2
23935: PUSH
23936: LD_VAR 0 3
23940: PUSH
23941: FOR_IN
23942: IFFALSE 24016
// begin if IsDead ( un ) then
23944: LD_VAR 0 2
23948: PPUSH
23949: CALL_OW 301
23953: IFFALSE 23973
// begin tmp := tmp diff un ;
23955: LD_ADDR_VAR 0 3
23959: PUSH
23960: LD_VAR 0 3
23964: PUSH
23965: LD_VAR 0 2
23969: DIFF
23970: ST_TO_ADDR
// continue ;
23971: GO 23941
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23973: LD_VAR 0 2
23977: PPUSH
23978: LD_INT 3
23980: PUSH
23981: LD_INT 22
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PPUSH
23995: CALL_OW 69
23999: PPUSH
24000: LD_VAR 0 2
24004: PPUSH
24005: CALL_OW 74
24009: PPUSH
24010: CALL_OW 115
// end ;
24014: GO 23941
24016: POP
24017: POP
// until not tmp ;
24018: LD_VAR 0 3
24022: NOT
24023: IFFALSE 23924
// end ;
24025: PPOPN 3
24027: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24028: LD_EXP 41
24032: PUSH
24033: LD_EXP 66
24037: AND
24038: IFFALSE 24092
24040: GO 24042
24042: DISABLE
// begin ToLua ( displayTroll(); ) ;
24043: LD_STRING displayTroll();
24045: PPUSH
24046: CALL_OW 559
// wait ( 3 3$00 ) ;
24050: LD_INT 6300
24052: PPUSH
24053: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24057: LD_STRING hideTroll();
24059: PPUSH
24060: CALL_OW 559
// wait ( 1 1$00 ) ;
24064: LD_INT 2100
24066: PPUSH
24067: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24071: LD_STRING displayTroll();
24073: PPUSH
24074: CALL_OW 559
// wait ( 1 1$00 ) ;
24078: LD_INT 2100
24080: PPUSH
24081: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24085: LD_STRING hideTroll();
24087: PPUSH
24088: CALL_OW 559
// end ;
24092: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24093: LD_EXP 41
24097: PUSH
24098: LD_EXP 67
24102: AND
24103: IFFALSE 24166
24105: GO 24107
24107: DISABLE
24108: LD_INT 0
24110: PPUSH
// begin p := 0 ;
24111: LD_ADDR_VAR 0 1
24115: PUSH
24116: LD_INT 0
24118: ST_TO_ADDR
// repeat game_speed := 1 ;
24119: LD_ADDR_OWVAR 65
24123: PUSH
24124: LD_INT 1
24126: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24127: LD_INT 35
24129: PPUSH
24130: CALL_OW 67
// p := p + 1 ;
24134: LD_ADDR_VAR 0 1
24138: PUSH
24139: LD_VAR 0 1
24143: PUSH
24144: LD_INT 1
24146: PLUS
24147: ST_TO_ADDR
// until p >= 60 ;
24148: LD_VAR 0 1
24152: PUSH
24153: LD_INT 60
24155: GREATEREQUAL
24156: IFFALSE 24119
// game_speed := 4 ;
24158: LD_ADDR_OWVAR 65
24162: PUSH
24163: LD_INT 4
24165: ST_TO_ADDR
// end ;
24166: PPOPN 1
24168: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24169: LD_EXP 41
24173: PUSH
24174: LD_EXP 68
24178: AND
24179: IFFALSE 24325
24181: GO 24183
24183: DISABLE
24184: LD_INT 0
24186: PPUSH
24187: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24188: LD_ADDR_VAR 0 1
24192: PUSH
24193: LD_INT 22
24195: PUSH
24196: LD_OWVAR 2
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 2
24207: PUSH
24208: LD_INT 30
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 30
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PPUSH
24237: CALL_OW 69
24241: ST_TO_ADDR
// if not depot then
24242: LD_VAR 0 1
24246: NOT
24247: IFFALSE 24251
// exit ;
24249: GO 24325
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24251: LD_ADDR_VAR 0 2
24255: PUSH
24256: LD_VAR 0 1
24260: PUSH
24261: LD_INT 1
24263: PPUSH
24264: LD_VAR 0 1
24268: PPUSH
24269: CALL_OW 12
24273: ARRAY
24274: PPUSH
24275: CALL_OW 274
24279: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24280: LD_VAR 0 2
24284: PPUSH
24285: LD_INT 1
24287: PPUSH
24288: LD_INT 0
24290: PPUSH
24291: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24295: LD_VAR 0 2
24299: PPUSH
24300: LD_INT 2
24302: PPUSH
24303: LD_INT 0
24305: PPUSH
24306: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24310: LD_VAR 0 2
24314: PPUSH
24315: LD_INT 3
24317: PPUSH
24318: LD_INT 0
24320: PPUSH
24321: CALL_OW 277
// end ;
24325: PPOPN 2
24327: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24328: LD_EXP 41
24332: PUSH
24333: LD_EXP 69
24337: AND
24338: IFFALSE 24435
24340: GO 24342
24342: DISABLE
24343: LD_INT 0
24345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24346: LD_ADDR_VAR 0 1
24350: PUSH
24351: LD_INT 22
24353: PUSH
24354: LD_OWVAR 2
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 21
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: LD_INT 23
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: LIST
24394: PPUSH
24395: CALL_OW 69
24399: ST_TO_ADDR
// if not tmp then
24400: LD_VAR 0 1
24404: NOT
24405: IFFALSE 24409
// exit ;
24407: GO 24435
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24409: LD_VAR 0 1
24413: PUSH
24414: LD_INT 1
24416: PPUSH
24417: LD_VAR 0 1
24421: PPUSH
24422: CALL_OW 12
24426: ARRAY
24427: PPUSH
24428: LD_INT 200
24430: PPUSH
24431: CALL_OW 234
// end ;
24435: PPOPN 1
24437: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24438: LD_EXP 41
24442: PUSH
24443: LD_EXP 70
24447: AND
24448: IFFALSE 24527
24450: GO 24452
24452: DISABLE
24453: LD_INT 0
24455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24456: LD_ADDR_VAR 0 1
24460: PUSH
24461: LD_INT 22
24463: PUSH
24464: LD_OWVAR 2
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 21
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PPUSH
24487: CALL_OW 69
24491: ST_TO_ADDR
// if not tmp then
24492: LD_VAR 0 1
24496: NOT
24497: IFFALSE 24501
// exit ;
24499: GO 24527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24501: LD_VAR 0 1
24505: PUSH
24506: LD_INT 1
24508: PPUSH
24509: LD_VAR 0 1
24513: PPUSH
24514: CALL_OW 12
24518: ARRAY
24519: PPUSH
24520: LD_INT 60
24522: PPUSH
24523: CALL_OW 234
// end ;
24527: PPOPN 1
24529: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24530: LD_EXP 41
24534: PUSH
24535: LD_EXP 71
24539: AND
24540: IFFALSE 24639
24542: GO 24544
24544: DISABLE
24545: LD_INT 0
24547: PPUSH
24548: PPUSH
// begin enable ;
24549: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24550: LD_ADDR_VAR 0 1
24554: PUSH
24555: LD_INT 22
24557: PUSH
24558: LD_OWVAR 2
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 61
24569: PUSH
24570: EMPTY
24571: LIST
24572: PUSH
24573: LD_INT 33
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: PPUSH
24588: CALL_OW 69
24592: ST_TO_ADDR
// if not tmp then
24593: LD_VAR 0 1
24597: NOT
24598: IFFALSE 24602
// exit ;
24600: GO 24639
// for i in tmp do
24602: LD_ADDR_VAR 0 2
24606: PUSH
24607: LD_VAR 0 1
24611: PUSH
24612: FOR_IN
24613: IFFALSE 24637
// if IsControledBy ( i ) then
24615: LD_VAR 0 2
24619: PPUSH
24620: CALL_OW 312
24624: IFFALSE 24635
// ComUnlink ( i ) ;
24626: LD_VAR 0 2
24630: PPUSH
24631: CALL_OW 136
24635: GO 24612
24637: POP
24638: POP
// end ;
24639: PPOPN 2
24641: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24642: LD_EXP 41
24646: PUSH
24647: LD_EXP 72
24651: AND
24652: IFFALSE 24792
24654: GO 24656
24656: DISABLE
24657: LD_INT 0
24659: PPUSH
24660: PPUSH
// begin ToLua ( displayPowell(); ) ;
24661: LD_STRING displayPowell();
24663: PPUSH
24664: CALL_OW 559
// uc_side := 0 ;
24668: LD_ADDR_OWVAR 20
24672: PUSH
24673: LD_INT 0
24675: ST_TO_ADDR
// uc_nation := 2 ;
24676: LD_ADDR_OWVAR 21
24680: PUSH
24681: LD_INT 2
24683: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24684: LD_ADDR_OWVAR 37
24688: PUSH
24689: LD_INT 14
24691: ST_TO_ADDR
// vc_engine := engine_siberite ;
24692: LD_ADDR_OWVAR 39
24696: PUSH
24697: LD_INT 3
24699: ST_TO_ADDR
// vc_control := control_apeman ;
24700: LD_ADDR_OWVAR 38
24704: PUSH
24705: LD_INT 5
24707: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24708: LD_ADDR_OWVAR 40
24712: PUSH
24713: LD_INT 29
24715: ST_TO_ADDR
// un := CreateVehicle ;
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: CALL_OW 45
24725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24726: LD_VAR 0 2
24730: PPUSH
24731: LD_INT 1
24733: PPUSH
24734: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24738: LD_INT 35
24740: PPUSH
24741: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24745: LD_VAR 0 2
24749: PPUSH
24750: LD_INT 22
24752: PUSH
24753: LD_OWVAR 2
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PPUSH
24762: CALL_OW 69
24766: PPUSH
24767: LD_VAR 0 2
24771: PPUSH
24772: CALL_OW 74
24776: PPUSH
24777: CALL_OW 115
// until IsDead ( un ) ;
24781: LD_VAR 0 2
24785: PPUSH
24786: CALL_OW 301
24790: IFFALSE 24738
// end ;
24792: PPOPN 2
24794: END
// every 0 0$1 trigger StreamModeActive and sStu do
24795: LD_EXP 41
24799: PUSH
24800: LD_EXP 80
24804: AND
24805: IFFALSE 24821
24807: GO 24809
24809: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24810: LD_STRING displayStucuk();
24812: PPUSH
24813: CALL_OW 559
// ResetFog ;
24817: CALL_OW 335
// end ;
24821: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24822: LD_EXP 41
24826: PUSH
24827: LD_EXP 73
24831: AND
24832: IFFALSE 24973
24834: GO 24836
24836: DISABLE
24837: LD_INT 0
24839: PPUSH
24840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24841: LD_ADDR_VAR 0 2
24845: PUSH
24846: LD_INT 22
24848: PUSH
24849: LD_OWVAR 2
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 21
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PPUSH
24872: CALL_OW 69
24876: ST_TO_ADDR
// if not tmp then
24877: LD_VAR 0 2
24881: NOT
24882: IFFALSE 24886
// exit ;
24884: GO 24973
// un := tmp [ rand ( 1 , tmp ) ] ;
24886: LD_ADDR_VAR 0 1
24890: PUSH
24891: LD_VAR 0 2
24895: PUSH
24896: LD_INT 1
24898: PPUSH
24899: LD_VAR 0 2
24903: PPUSH
24904: CALL_OW 12
24908: ARRAY
24909: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24910: LD_VAR 0 1
24914: PPUSH
24915: LD_INT 0
24917: PPUSH
24918: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24922: LD_VAR 0 1
24926: PPUSH
24927: LD_OWVAR 3
24931: PUSH
24932: LD_VAR 0 1
24936: DIFF
24937: PPUSH
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 74
24947: PPUSH
24948: CALL_OW 115
// wait ( 0 0$20 ) ;
24952: LD_INT 700
24954: PPUSH
24955: CALL_OW 67
// SetSide ( un , your_side ) ;
24959: LD_VAR 0 1
24963: PPUSH
24964: LD_OWVAR 2
24968: PPUSH
24969: CALL_OW 235
// end ;
24973: PPOPN 2
24975: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24976: LD_EXP 41
24980: PUSH
24981: LD_EXP 74
24985: AND
24986: IFFALSE 25092
24988: GO 24990
24990: DISABLE
24991: LD_INT 0
24993: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_INT 22
25001: PUSH
25002: LD_OWVAR 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: LD_INT 30
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 30
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PPUSH
25043: CALL_OW 69
25047: ST_TO_ADDR
// if not depot then
25048: LD_VAR 0 1
25052: NOT
25053: IFFALSE 25057
// exit ;
25055: GO 25092
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25057: LD_VAR 0 1
25061: PUSH
25062: LD_INT 1
25064: ARRAY
25065: PPUSH
25066: CALL_OW 250
25070: PPUSH
25071: LD_VAR 0 1
25075: PUSH
25076: LD_INT 1
25078: ARRAY
25079: PPUSH
25080: CALL_OW 251
25084: PPUSH
25085: LD_INT 70
25087: PPUSH
25088: CALL_OW 495
// end ;
25092: PPOPN 1
25094: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25095: LD_EXP 41
25099: PUSH
25100: LD_EXP 75
25104: AND
25105: IFFALSE 25316
25107: GO 25109
25109: DISABLE
25110: LD_INT 0
25112: PPUSH
25113: PPUSH
25114: PPUSH
25115: PPUSH
25116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25117: LD_ADDR_VAR 0 5
25121: PUSH
25122: LD_INT 22
25124: PUSH
25125: LD_OWVAR 2
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 21
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 69
25152: ST_TO_ADDR
// if not tmp then
25153: LD_VAR 0 5
25157: NOT
25158: IFFALSE 25162
// exit ;
25160: GO 25316
// for i in tmp do
25162: LD_ADDR_VAR 0 1
25166: PUSH
25167: LD_VAR 0 5
25171: PUSH
25172: FOR_IN
25173: IFFALSE 25314
// begin d := rand ( 0 , 5 ) ;
25175: LD_ADDR_VAR 0 4
25179: PUSH
25180: LD_INT 0
25182: PPUSH
25183: LD_INT 5
25185: PPUSH
25186: CALL_OW 12
25190: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25191: LD_ADDR_VAR 0 2
25195: PUSH
25196: LD_VAR 0 1
25200: PPUSH
25201: CALL_OW 250
25205: PPUSH
25206: LD_VAR 0 4
25210: PPUSH
25211: LD_INT 3
25213: PPUSH
25214: LD_INT 12
25216: PPUSH
25217: CALL_OW 12
25221: PPUSH
25222: CALL_OW 272
25226: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_VAR 0 1
25236: PPUSH
25237: CALL_OW 251
25241: PPUSH
25242: LD_VAR 0 4
25246: PPUSH
25247: LD_INT 3
25249: PPUSH
25250: LD_INT 12
25252: PPUSH
25253: CALL_OW 12
25257: PPUSH
25258: CALL_OW 273
25262: ST_TO_ADDR
// if ValidHex ( x , y ) then
25263: LD_VAR 0 2
25267: PPUSH
25268: LD_VAR 0 3
25272: PPUSH
25273: CALL_OW 488
25277: IFFALSE 25312
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25279: LD_VAR 0 1
25283: PPUSH
25284: LD_VAR 0 2
25288: PPUSH
25289: LD_VAR 0 3
25293: PPUSH
25294: LD_INT 3
25296: PPUSH
25297: LD_INT 6
25299: PPUSH
25300: CALL_OW 12
25304: PPUSH
25305: LD_INT 1
25307: PPUSH
25308: CALL_OW 483
// end ;
25312: GO 25172
25314: POP
25315: POP
// end ;
25316: PPOPN 5
25318: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25319: LD_EXP 41
25323: PUSH
25324: LD_EXP 76
25328: AND
25329: IFFALSE 25423
25331: GO 25333
25333: DISABLE
25334: LD_INT 0
25336: PPUSH
25337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25338: LD_ADDR_VAR 0 2
25342: PUSH
25343: LD_INT 22
25345: PUSH
25346: LD_OWVAR 2
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 32
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 21
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: PPUSH
25380: CALL_OW 69
25384: ST_TO_ADDR
// if not tmp then
25385: LD_VAR 0 2
25389: NOT
25390: IFFALSE 25394
// exit ;
25392: GO 25423
// for i in tmp do
25394: LD_ADDR_VAR 0 1
25398: PUSH
25399: LD_VAR 0 2
25403: PUSH
25404: FOR_IN
25405: IFFALSE 25421
// SetFuel ( i , 0 ) ;
25407: LD_VAR 0 1
25411: PPUSH
25412: LD_INT 0
25414: PPUSH
25415: CALL_OW 240
25419: GO 25404
25421: POP
25422: POP
// end ;
25423: PPOPN 2
25425: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25426: LD_EXP 41
25430: PUSH
25431: LD_EXP 77
25435: AND
25436: IFFALSE 25502
25438: GO 25440
25440: DISABLE
25441: LD_INT 0
25443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25444: LD_ADDR_VAR 0 1
25448: PUSH
25449: LD_INT 22
25451: PUSH
25452: LD_OWVAR 2
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 30
25463: PUSH
25464: LD_INT 29
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PPUSH
25475: CALL_OW 69
25479: ST_TO_ADDR
// if not tmp then
25480: LD_VAR 0 1
25484: NOT
25485: IFFALSE 25489
// exit ;
25487: GO 25502
// DestroyUnit ( tmp [ 1 ] ) ;
25489: LD_VAR 0 1
25493: PUSH
25494: LD_INT 1
25496: ARRAY
25497: PPUSH
25498: CALL_OW 65
// end ;
25502: PPOPN 1
25504: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25505: LD_EXP 41
25509: PUSH
25510: LD_EXP 79
25514: AND
25515: IFFALSE 25644
25517: GO 25519
25519: DISABLE
25520: LD_INT 0
25522: PPUSH
// begin uc_side := 0 ;
25523: LD_ADDR_OWVAR 20
25527: PUSH
25528: LD_INT 0
25530: ST_TO_ADDR
// uc_nation := nation_arabian ;
25531: LD_ADDR_OWVAR 21
25535: PUSH
25536: LD_INT 2
25538: ST_TO_ADDR
// hc_gallery :=  ;
25539: LD_ADDR_OWVAR 33
25543: PUSH
25544: LD_STRING 
25546: ST_TO_ADDR
// hc_name :=  ;
25547: LD_ADDR_OWVAR 26
25551: PUSH
25552: LD_STRING 
25554: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25555: LD_INT 1
25557: PPUSH
25558: LD_INT 11
25560: PPUSH
25561: LD_INT 10
25563: PPUSH
25564: CALL_OW 380
// un := CreateHuman ;
25568: LD_ADDR_VAR 0 1
25572: PUSH
25573: CALL_OW 44
25577: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25578: LD_VAR 0 1
25582: PPUSH
25583: LD_INT 1
25585: PPUSH
25586: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25590: LD_INT 35
25592: PPUSH
25593: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25597: LD_VAR 0 1
25601: PPUSH
25602: LD_INT 22
25604: PUSH
25605: LD_OWVAR 2
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PPUSH
25614: CALL_OW 69
25618: PPUSH
25619: LD_VAR 0 1
25623: PPUSH
25624: CALL_OW 74
25628: PPUSH
25629: CALL_OW 115
// until IsDead ( un ) ;
25633: LD_VAR 0 1
25637: PPUSH
25638: CALL_OW 301
25642: IFFALSE 25590
// end ;
25644: PPOPN 1
25646: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25647: LD_EXP 41
25651: PUSH
25652: LD_EXP 81
25656: AND
25657: IFFALSE 25669
25659: GO 25661
25661: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25662: LD_STRING earthquake(getX(game), 0, 32)
25664: PPUSH
25665: CALL_OW 559
25669: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25670: LD_EXP 41
25674: PUSH
25675: LD_EXP 82
25679: AND
25680: IFFALSE 25771
25682: GO 25684
25684: DISABLE
25685: LD_INT 0
25687: PPUSH
// begin enable ;
25688: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25689: LD_ADDR_VAR 0 1
25693: PUSH
25694: LD_INT 22
25696: PUSH
25697: LD_OWVAR 2
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 21
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 33
25718: PUSH
25719: LD_INT 3
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: PPUSH
25731: CALL_OW 69
25735: ST_TO_ADDR
// if not tmp then
25736: LD_VAR 0 1
25740: NOT
25741: IFFALSE 25745
// exit ;
25743: GO 25771
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25745: LD_VAR 0 1
25749: PUSH
25750: LD_INT 1
25752: PPUSH
25753: LD_VAR 0 1
25757: PPUSH
25758: CALL_OW 12
25762: ARRAY
25763: PPUSH
25764: LD_INT 1
25766: PPUSH
25767: CALL_OW 234
// end ;
25771: PPOPN 1
25773: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25774: LD_EXP 41
25778: PUSH
25779: LD_EXP 83
25783: AND
25784: IFFALSE 25925
25786: GO 25788
25788: DISABLE
25789: LD_INT 0
25791: PPUSH
25792: PPUSH
25793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25794: LD_ADDR_VAR 0 3
25798: PUSH
25799: LD_INT 22
25801: PUSH
25802: LD_OWVAR 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 25
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PPUSH
25825: CALL_OW 69
25829: ST_TO_ADDR
// if not tmp then
25830: LD_VAR 0 3
25834: NOT
25835: IFFALSE 25839
// exit ;
25837: GO 25925
// un := tmp [ rand ( 1 , tmp ) ] ;
25839: LD_ADDR_VAR 0 2
25843: PUSH
25844: LD_VAR 0 3
25848: PUSH
25849: LD_INT 1
25851: PPUSH
25852: LD_VAR 0 3
25856: PPUSH
25857: CALL_OW 12
25861: ARRAY
25862: ST_TO_ADDR
// if Crawls ( un ) then
25863: LD_VAR 0 2
25867: PPUSH
25868: CALL_OW 318
25872: IFFALSE 25883
// ComWalk ( un ) ;
25874: LD_VAR 0 2
25878: PPUSH
25879: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25883: LD_VAR 0 2
25887: PPUSH
25888: LD_INT 9
25890: PPUSH
25891: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25895: LD_INT 28
25897: PPUSH
25898: LD_OWVAR 2
25902: PPUSH
25903: LD_INT 2
25905: PPUSH
25906: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25910: LD_INT 29
25912: PPUSH
25913: LD_OWVAR 2
25917: PPUSH
25918: LD_INT 2
25920: PPUSH
25921: CALL_OW 322
// end ;
25925: PPOPN 3
25927: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25928: LD_EXP 41
25932: PUSH
25933: LD_EXP 84
25937: AND
25938: IFFALSE 26049
25940: GO 25942
25942: DISABLE
25943: LD_INT 0
25945: PPUSH
25946: PPUSH
25947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25948: LD_ADDR_VAR 0 3
25952: PUSH
25953: LD_INT 22
25955: PUSH
25956: LD_OWVAR 2
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 25
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PPUSH
25979: CALL_OW 69
25983: ST_TO_ADDR
// if not tmp then
25984: LD_VAR 0 3
25988: NOT
25989: IFFALSE 25993
// exit ;
25991: GO 26049
// un := tmp [ rand ( 1 , tmp ) ] ;
25993: LD_ADDR_VAR 0 2
25997: PUSH
25998: LD_VAR 0 3
26002: PUSH
26003: LD_INT 1
26005: PPUSH
26006: LD_VAR 0 3
26010: PPUSH
26011: CALL_OW 12
26015: ARRAY
26016: ST_TO_ADDR
// if Crawls ( un ) then
26017: LD_VAR 0 2
26021: PPUSH
26022: CALL_OW 318
26026: IFFALSE 26037
// ComWalk ( un ) ;
26028: LD_VAR 0 2
26032: PPUSH
26033: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26037: LD_VAR 0 2
26041: PPUSH
26042: LD_INT 8
26044: PPUSH
26045: CALL_OW 336
// end ;
26049: PPOPN 3
26051: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26052: LD_EXP 41
26056: PUSH
26057: LD_EXP 85
26061: AND
26062: IFFALSE 26206
26064: GO 26066
26066: DISABLE
26067: LD_INT 0
26069: PPUSH
26070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26071: LD_ADDR_VAR 0 2
26075: PUSH
26076: LD_INT 22
26078: PUSH
26079: LD_OWVAR 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 21
26090: PUSH
26091: LD_INT 2
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: LD_INT 34
26103: PUSH
26104: LD_INT 12
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 34
26113: PUSH
26114: LD_INT 51
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 34
26123: PUSH
26124: LD_INT 32
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: PPUSH
26142: CALL_OW 69
26146: ST_TO_ADDR
// if not tmp then
26147: LD_VAR 0 2
26151: NOT
26152: IFFALSE 26156
// exit ;
26154: GO 26206
// for i in tmp do
26156: LD_ADDR_VAR 0 1
26160: PUSH
26161: LD_VAR 0 2
26165: PUSH
26166: FOR_IN
26167: IFFALSE 26204
// if GetCargo ( i , mat_artifact ) = 0 then
26169: LD_VAR 0 1
26173: PPUSH
26174: LD_INT 4
26176: PPUSH
26177: CALL_OW 289
26181: PUSH
26182: LD_INT 0
26184: EQUAL
26185: IFFALSE 26202
// SetCargo ( i , mat_siberit , 100 ) ;
26187: LD_VAR 0 1
26191: PPUSH
26192: LD_INT 3
26194: PPUSH
26195: LD_INT 100
26197: PPUSH
26198: CALL_OW 290
26202: GO 26166
26204: POP
26205: POP
// end ;
26206: PPOPN 2
26208: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26209: LD_EXP 41
26213: PUSH
26214: LD_EXP 86
26218: AND
26219: IFFALSE 26402
26221: GO 26223
26223: DISABLE
26224: LD_INT 0
26226: PPUSH
26227: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26228: LD_ADDR_VAR 0 2
26232: PUSH
26233: LD_INT 22
26235: PUSH
26236: LD_OWVAR 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 69
26249: ST_TO_ADDR
// if not tmp then
26250: LD_VAR 0 2
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 26402
// for i := 1 to 2 do
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: DOUBLE
26265: LD_INT 1
26267: DEC
26268: ST_TO_ADDR
26269: LD_INT 2
26271: PUSH
26272: FOR_TO
26273: IFFALSE 26400
// begin uc_side := your_side ;
26275: LD_ADDR_OWVAR 20
26279: PUSH
26280: LD_OWVAR 2
26284: ST_TO_ADDR
// uc_nation := nation_american ;
26285: LD_ADDR_OWVAR 21
26289: PUSH
26290: LD_INT 1
26292: ST_TO_ADDR
// vc_chassis := us_morphling ;
26293: LD_ADDR_OWVAR 37
26297: PUSH
26298: LD_INT 5
26300: ST_TO_ADDR
// vc_engine := engine_siberite ;
26301: LD_ADDR_OWVAR 39
26305: PUSH
26306: LD_INT 3
26308: ST_TO_ADDR
// vc_control := control_computer ;
26309: LD_ADDR_OWVAR 38
26313: PUSH
26314: LD_INT 3
26316: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26317: LD_ADDR_OWVAR 40
26321: PUSH
26322: LD_INT 10
26324: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26325: LD_VAR 0 2
26329: PUSH
26330: LD_INT 1
26332: ARRAY
26333: PPUSH
26334: CALL_OW 310
26338: NOT
26339: IFFALSE 26386
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26341: CALL_OW 45
26345: PPUSH
26346: LD_VAR 0 2
26350: PUSH
26351: LD_INT 1
26353: ARRAY
26354: PPUSH
26355: CALL_OW 250
26359: PPUSH
26360: LD_VAR 0 2
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: PPUSH
26369: CALL_OW 251
26373: PPUSH
26374: LD_INT 12
26376: PPUSH
26377: LD_INT 1
26379: PPUSH
26380: CALL_OW 50
26384: GO 26398
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26386: CALL_OW 45
26390: PPUSH
26391: LD_INT 1
26393: PPUSH
26394: CALL_OW 51
// end ;
26398: GO 26272
26400: POP
26401: POP
// end ;
26402: PPOPN 2
26404: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26405: LD_EXP 41
26409: PUSH
26410: LD_EXP 87
26414: AND
26415: IFFALSE 26637
26417: GO 26419
26419: DISABLE
26420: LD_INT 0
26422: PPUSH
26423: PPUSH
26424: PPUSH
26425: PPUSH
26426: PPUSH
26427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26428: LD_ADDR_VAR 0 6
26432: PUSH
26433: LD_INT 22
26435: PUSH
26436: LD_OWVAR 2
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 21
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 3
26457: PUSH
26458: LD_INT 23
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: ST_TO_ADDR
// if not tmp then
26482: LD_VAR 0 6
26486: NOT
26487: IFFALSE 26491
// exit ;
26489: GO 26637
// s1 := rand ( 1 , 4 ) ;
26491: LD_ADDR_VAR 0 2
26495: PUSH
26496: LD_INT 1
26498: PPUSH
26499: LD_INT 4
26501: PPUSH
26502: CALL_OW 12
26506: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26507: LD_ADDR_VAR 0 4
26511: PUSH
26512: LD_VAR 0 6
26516: PUSH
26517: LD_INT 1
26519: ARRAY
26520: PPUSH
26521: LD_VAR 0 2
26525: PPUSH
26526: CALL_OW 259
26530: ST_TO_ADDR
// if s1 = 1 then
26531: LD_VAR 0 2
26535: PUSH
26536: LD_INT 1
26538: EQUAL
26539: IFFALSE 26559
// s2 := rand ( 2 , 4 ) else
26541: LD_ADDR_VAR 0 3
26545: PUSH
26546: LD_INT 2
26548: PPUSH
26549: LD_INT 4
26551: PPUSH
26552: CALL_OW 12
26556: ST_TO_ADDR
26557: GO 26567
// s2 := 1 ;
26559: LD_ADDR_VAR 0 3
26563: PUSH
26564: LD_INT 1
26566: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26567: LD_ADDR_VAR 0 5
26571: PUSH
26572: LD_VAR 0 6
26576: PUSH
26577: LD_INT 1
26579: ARRAY
26580: PPUSH
26581: LD_VAR 0 3
26585: PPUSH
26586: CALL_OW 259
26590: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26591: LD_VAR 0 6
26595: PUSH
26596: LD_INT 1
26598: ARRAY
26599: PPUSH
26600: LD_VAR 0 2
26604: PPUSH
26605: LD_VAR 0 5
26609: PPUSH
26610: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26614: LD_VAR 0 6
26618: PUSH
26619: LD_INT 1
26621: ARRAY
26622: PPUSH
26623: LD_VAR 0 3
26627: PPUSH
26628: LD_VAR 0 4
26632: PPUSH
26633: CALL_OW 237
// end ;
26637: PPOPN 6
26639: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26640: LD_EXP 41
26644: PUSH
26645: LD_EXP 88
26649: AND
26650: IFFALSE 26729
26652: GO 26654
26654: DISABLE
26655: LD_INT 0
26657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26658: LD_ADDR_VAR 0 1
26662: PUSH
26663: LD_INT 22
26665: PUSH
26666: LD_OWVAR 2
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 30
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PPUSH
26689: CALL_OW 69
26693: ST_TO_ADDR
// if not tmp then
26694: LD_VAR 0 1
26698: NOT
26699: IFFALSE 26703
// exit ;
26701: GO 26729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26703: LD_VAR 0 1
26707: PUSH
26708: LD_INT 1
26710: PPUSH
26711: LD_VAR 0 1
26715: PPUSH
26716: CALL_OW 12
26720: ARRAY
26721: PPUSH
26722: LD_INT 1
26724: PPUSH
26725: CALL_OW 234
// end ;
26729: PPOPN 1
26731: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26732: LD_EXP 41
26736: PUSH
26737: LD_EXP 89
26741: AND
26742: IFFALSE 26854
26744: GO 26746
26746: DISABLE
26747: LD_INT 0
26749: PPUSH
26750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26751: LD_ADDR_VAR 0 2
26755: PUSH
26756: LD_INT 22
26758: PUSH
26759: LD_OWVAR 2
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: LD_INT 30
26773: PUSH
26774: LD_INT 27
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 30
26783: PUSH
26784: LD_INT 26
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 30
26793: PUSH
26794: LD_INT 28
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PPUSH
26811: CALL_OW 69
26815: ST_TO_ADDR
// if not tmp then
26816: LD_VAR 0 2
26820: NOT
26821: IFFALSE 26825
// exit ;
26823: GO 26854
// for i in tmp do
26825: LD_ADDR_VAR 0 1
26829: PUSH
26830: LD_VAR 0 2
26834: PUSH
26835: FOR_IN
26836: IFFALSE 26852
// SetLives ( i , 1 ) ;
26838: LD_VAR 0 1
26842: PPUSH
26843: LD_INT 1
26845: PPUSH
26846: CALL_OW 234
26850: GO 26835
26852: POP
26853: POP
// end ;
26854: PPOPN 2
26856: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26857: LD_EXP 41
26861: PUSH
26862: LD_EXP 90
26866: AND
26867: IFFALSE 27154
26869: GO 26871
26871: DISABLE
26872: LD_INT 0
26874: PPUSH
26875: PPUSH
26876: PPUSH
// begin i := rand ( 1 , 7 ) ;
26877: LD_ADDR_VAR 0 1
26881: PUSH
26882: LD_INT 1
26884: PPUSH
26885: LD_INT 7
26887: PPUSH
26888: CALL_OW 12
26892: ST_TO_ADDR
// case i of 1 :
26893: LD_VAR 0 1
26897: PUSH
26898: LD_INT 1
26900: DOUBLE
26901: EQUAL
26902: IFTRUE 26906
26904: GO 26916
26906: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26907: LD_STRING earthquake(getX(game), 0, 32)
26909: PPUSH
26910: CALL_OW 559
26914: GO 27154
26916: LD_INT 2
26918: DOUBLE
26919: EQUAL
26920: IFTRUE 26924
26922: GO 26938
26924: POP
// begin ToLua ( displayStucuk(); ) ;
26925: LD_STRING displayStucuk();
26927: PPUSH
26928: CALL_OW 559
// ResetFog ;
26932: CALL_OW 335
// end ; 3 :
26936: GO 27154
26938: LD_INT 3
26940: DOUBLE
26941: EQUAL
26942: IFTRUE 26946
26944: GO 27050
26946: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26947: LD_ADDR_VAR 0 2
26951: PUSH
26952: LD_INT 22
26954: PUSH
26955: LD_OWVAR 2
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 25
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PPUSH
26978: CALL_OW 69
26982: ST_TO_ADDR
// if not tmp then
26983: LD_VAR 0 2
26987: NOT
26988: IFFALSE 26992
// exit ;
26990: GO 27154
// un := tmp [ rand ( 1 , tmp ) ] ;
26992: LD_ADDR_VAR 0 3
26996: PUSH
26997: LD_VAR 0 2
27001: PUSH
27002: LD_INT 1
27004: PPUSH
27005: LD_VAR 0 2
27009: PPUSH
27010: CALL_OW 12
27014: ARRAY
27015: ST_TO_ADDR
// if Crawls ( un ) then
27016: LD_VAR 0 3
27020: PPUSH
27021: CALL_OW 318
27025: IFFALSE 27036
// ComWalk ( un ) ;
27027: LD_VAR 0 3
27031: PPUSH
27032: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27036: LD_VAR 0 3
27040: PPUSH
27041: LD_INT 8
27043: PPUSH
27044: CALL_OW 336
// end ; 4 :
27048: GO 27154
27050: LD_INT 4
27052: DOUBLE
27053: EQUAL
27054: IFTRUE 27058
27056: GO 27132
27058: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27059: LD_ADDR_VAR 0 2
27063: PUSH
27064: LD_INT 22
27066: PUSH
27067: LD_OWVAR 2
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 30
27078: PUSH
27079: LD_INT 29
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 69
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 2
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 27154
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27104: LD_VAR 0 2
27108: PUSH
27109: LD_INT 1
27111: ARRAY
27112: PPUSH
27113: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27117: LD_VAR 0 2
27121: PUSH
27122: LD_INT 1
27124: ARRAY
27125: PPUSH
27126: CALL_OW 65
// end ; 5 .. 7 :
27130: GO 27154
27132: LD_INT 5
27134: DOUBLE
27135: GREATEREQUAL
27136: IFFALSE 27144
27138: LD_INT 7
27140: DOUBLE
27141: LESSEQUAL
27142: IFTRUE 27146
27144: GO 27153
27146: POP
// StreamSibBomb ; end ;
27147: CALL 23391 0 0
27151: GO 27154
27153: POP
// end ;
27154: PPOPN 3
27156: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27157: LD_EXP 41
27161: PUSH
27162: LD_EXP 91
27166: AND
27167: IFFALSE 27323
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
27176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27177: LD_ADDR_VAR 0 2
27181: PUSH
27182: LD_INT 81
27184: PUSH
27185: LD_OWVAR 2
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: LD_INT 21
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 21
27209: PUSH
27210: LD_INT 2
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: LIST
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PPUSH
27226: CALL_OW 69
27230: ST_TO_ADDR
// if not tmp then
27231: LD_VAR 0 2
27235: NOT
27236: IFFALSE 27240
// exit ;
27238: GO 27323
// p := 0 ;
27240: LD_ADDR_VAR 0 3
27244: PUSH
27245: LD_INT 0
27247: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27248: LD_INT 35
27250: PPUSH
27251: CALL_OW 67
// p := p + 1 ;
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: LD_VAR 0 3
27264: PUSH
27265: LD_INT 1
27267: PLUS
27268: ST_TO_ADDR
// for i in tmp do
27269: LD_ADDR_VAR 0 1
27273: PUSH
27274: LD_VAR 0 2
27278: PUSH
27279: FOR_IN
27280: IFFALSE 27311
// if GetLives ( i ) < 1000 then
27282: LD_VAR 0 1
27286: PPUSH
27287: CALL_OW 256
27291: PUSH
27292: LD_INT 1000
27294: LESS
27295: IFFALSE 27309
// SetLives ( i , 1000 ) ;
27297: LD_VAR 0 1
27301: PPUSH
27302: LD_INT 1000
27304: PPUSH
27305: CALL_OW 234
27309: GO 27279
27311: POP
27312: POP
// until p > 20 ;
27313: LD_VAR 0 3
27317: PUSH
27318: LD_INT 20
27320: GREATER
27321: IFFALSE 27248
// end ;
27323: PPOPN 3
27325: END
// every 0 0$1 trigger StreamModeActive and sTime do
27326: LD_EXP 41
27330: PUSH
27331: LD_EXP 92
27335: AND
27336: IFFALSE 27371
27338: GO 27340
27340: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27341: LD_INT 28
27343: PPUSH
27344: LD_OWVAR 2
27348: PPUSH
27349: LD_INT 2
27351: PPUSH
27352: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27356: LD_INT 30
27358: PPUSH
27359: LD_OWVAR 2
27363: PPUSH
27364: LD_INT 2
27366: PPUSH
27367: CALL_OW 322
// end ;
27371: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27372: LD_EXP 41
27376: PUSH
27377: LD_EXP 93
27381: AND
27382: IFFALSE 27503
27384: GO 27386
27386: DISABLE
27387: LD_INT 0
27389: PPUSH
27390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27391: LD_ADDR_VAR 0 2
27395: PUSH
27396: LD_INT 22
27398: PUSH
27399: LD_OWVAR 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 21
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 3
27420: PUSH
27421: LD_INT 23
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: PPUSH
27440: CALL_OW 69
27444: ST_TO_ADDR
// if not tmp then
27445: LD_VAR 0 2
27449: NOT
27450: IFFALSE 27454
// exit ;
27452: GO 27503
// for i in tmp do
27454: LD_ADDR_VAR 0 1
27458: PUSH
27459: LD_VAR 0 2
27463: PUSH
27464: FOR_IN
27465: IFFALSE 27501
// begin if Crawls ( i ) then
27467: LD_VAR 0 1
27471: PPUSH
27472: CALL_OW 318
27476: IFFALSE 27487
// ComWalk ( i ) ;
27478: LD_VAR 0 1
27482: PPUSH
27483: CALL_OW 138
// SetClass ( i , 2 ) ;
27487: LD_VAR 0 1
27491: PPUSH
27492: LD_INT 2
27494: PPUSH
27495: CALL_OW 336
// end ;
27499: GO 27464
27501: POP
27502: POP
// end ;
27503: PPOPN 2
27505: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27506: LD_EXP 41
27510: PUSH
27511: LD_EXP 94
27515: AND
27516: IFFALSE 27804
27518: GO 27520
27520: DISABLE
27521: LD_INT 0
27523: PPUSH
27524: PPUSH
27525: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27526: LD_OWVAR 2
27530: PPUSH
27531: LD_INT 9
27533: PPUSH
27534: LD_INT 1
27536: PPUSH
27537: LD_INT 1
27539: PPUSH
27540: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27544: LD_INT 9
27546: PPUSH
27547: LD_OWVAR 2
27551: PPUSH
27552: CALL_OW 343
// uc_side := 9 ;
27556: LD_ADDR_OWVAR 20
27560: PUSH
27561: LD_INT 9
27563: ST_TO_ADDR
// uc_nation := 2 ;
27564: LD_ADDR_OWVAR 21
27568: PUSH
27569: LD_INT 2
27571: ST_TO_ADDR
// hc_name := Dark Warrior ;
27572: LD_ADDR_OWVAR 26
27576: PUSH
27577: LD_STRING Dark Warrior
27579: ST_TO_ADDR
// hc_gallery :=  ;
27580: LD_ADDR_OWVAR 33
27584: PUSH
27585: LD_STRING 
27587: ST_TO_ADDR
// hc_noskilllimit := true ;
27588: LD_ADDR_OWVAR 76
27592: PUSH
27593: LD_INT 1
27595: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27596: LD_ADDR_OWVAR 31
27600: PUSH
27601: LD_INT 30
27603: PUSH
27604: LD_INT 30
27606: PUSH
27607: LD_INT 30
27609: PUSH
27610: LD_INT 30
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: ST_TO_ADDR
// un := CreateHuman ;
27619: LD_ADDR_VAR 0 3
27623: PUSH
27624: CALL_OW 44
27628: ST_TO_ADDR
// hc_noskilllimit := false ;
27629: LD_ADDR_OWVAR 76
27633: PUSH
27634: LD_INT 0
27636: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27637: LD_VAR 0 3
27641: PPUSH
27642: LD_INT 1
27644: PPUSH
27645: CALL_OW 51
// ToLua ( playRanger() ) ;
27649: LD_STRING playRanger()
27651: PPUSH
27652: CALL_OW 559
// p := 0 ;
27656: LD_ADDR_VAR 0 2
27660: PUSH
27661: LD_INT 0
27663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27664: LD_INT 35
27666: PPUSH
27667: CALL_OW 67
// p := p + 1 ;
27671: LD_ADDR_VAR 0 2
27675: PUSH
27676: LD_VAR 0 2
27680: PUSH
27681: LD_INT 1
27683: PLUS
27684: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27685: LD_VAR 0 3
27689: PPUSH
27690: CALL_OW 256
27694: PUSH
27695: LD_INT 1000
27697: LESS
27698: IFFALSE 27712
// SetLives ( un , 1000 ) ;
27700: LD_VAR 0 3
27704: PPUSH
27705: LD_INT 1000
27707: PPUSH
27708: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27712: LD_VAR 0 3
27716: PPUSH
27717: LD_INT 81
27719: PUSH
27720: LD_OWVAR 2
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 91
27731: PUSH
27732: LD_VAR 0 3
27736: PUSH
27737: LD_INT 30
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: LIST
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PPUSH
27749: CALL_OW 69
27753: PPUSH
27754: LD_VAR 0 3
27758: PPUSH
27759: CALL_OW 74
27763: PPUSH
27764: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27768: LD_VAR 0 2
27772: PUSH
27773: LD_INT 80
27775: GREATER
27776: PUSH
27777: LD_VAR 0 3
27781: PPUSH
27782: CALL_OW 301
27786: OR
27787: IFFALSE 27664
// if un then
27789: LD_VAR 0 3
27793: IFFALSE 27804
// RemoveUnit ( un ) ;
27795: LD_VAR 0 3
27799: PPUSH
27800: CALL_OW 64
// end ;
27804: PPOPN 3
27806: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27807: LD_EXP 95
27811: IFFALSE 27927
27813: GO 27815
27815: DISABLE
27816: LD_INT 0
27818: PPUSH
27819: PPUSH
27820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27821: LD_ADDR_VAR 0 2
27825: PUSH
27826: LD_INT 81
27828: PUSH
27829: LD_OWVAR 2
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 21
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL_OW 69
27856: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27857: LD_STRING playComputer()
27859: PPUSH
27860: CALL_OW 559
// if not tmp then
27864: LD_VAR 0 2
27868: NOT
27869: IFFALSE 27873
// exit ;
27871: GO 27927
// for i in tmp do
27873: LD_ADDR_VAR 0 1
27877: PUSH
27878: LD_VAR 0 2
27882: PUSH
27883: FOR_IN
27884: IFFALSE 27925
// for j := 1 to 4 do
27886: LD_ADDR_VAR 0 3
27890: PUSH
27891: DOUBLE
27892: LD_INT 1
27894: DEC
27895: ST_TO_ADDR
27896: LD_INT 4
27898: PUSH
27899: FOR_TO
27900: IFFALSE 27921
// SetSkill ( i , j , 10 ) ;
27902: LD_VAR 0 1
27906: PPUSH
27907: LD_VAR 0 3
27911: PPUSH
27912: LD_INT 10
27914: PPUSH
27915: CALL_OW 237
27919: GO 27899
27921: POP
27922: POP
27923: GO 27883
27925: POP
27926: POP
// end ;
27927: PPOPN 3
27929: END
// every 0 0$1 trigger s30 do var i , tmp ;
27930: LD_EXP 96
27934: IFFALSE 28003
27936: GO 27938
27938: DISABLE
27939: LD_INT 0
27941: PPUSH
27942: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27943: LD_ADDR_VAR 0 2
27947: PUSH
27948: LD_INT 22
27950: PUSH
27951: LD_OWVAR 2
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PPUSH
27960: CALL_OW 69
27964: ST_TO_ADDR
// if not tmp then
27965: LD_VAR 0 2
27969: NOT
27970: IFFALSE 27974
// exit ;
27972: GO 28003
// for i in tmp do
27974: LD_ADDR_VAR 0 1
27978: PUSH
27979: LD_VAR 0 2
27983: PUSH
27984: FOR_IN
27985: IFFALSE 28001
// SetLives ( i , 300 ) ;
27987: LD_VAR 0 1
27991: PPUSH
27992: LD_INT 300
27994: PPUSH
27995: CALL_OW 234
27999: GO 27984
28001: POP
28002: POP
// end ;
28003: PPOPN 2
28005: END
// every 0 0$1 trigger s60 do var i , tmp ;
28006: LD_EXP 97
28010: IFFALSE 28079
28012: GO 28014
28014: DISABLE
28015: LD_INT 0
28017: PPUSH
28018: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28019: LD_ADDR_VAR 0 2
28023: PUSH
28024: LD_INT 22
28026: PUSH
28027: LD_OWVAR 2
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PPUSH
28036: CALL_OW 69
28040: ST_TO_ADDR
// if not tmp then
28041: LD_VAR 0 2
28045: NOT
28046: IFFALSE 28050
// exit ;
28048: GO 28079
// for i in tmp do
28050: LD_ADDR_VAR 0 1
28054: PUSH
28055: LD_VAR 0 2
28059: PUSH
28060: FOR_IN
28061: IFFALSE 28077
// SetLives ( i , 600 ) ;
28063: LD_VAR 0 1
28067: PPUSH
28068: LD_INT 600
28070: PPUSH
28071: CALL_OW 234
28075: GO 28060
28077: POP
28078: POP
// end ;
28079: PPOPN 2
28081: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28082: LD_INT 0
28084: PPUSH
// case cmd of 301 :
28085: LD_VAR 0 1
28089: PUSH
28090: LD_INT 301
28092: DOUBLE
28093: EQUAL
28094: IFTRUE 28098
28096: GO 28130
28098: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28099: LD_VAR 0 6
28103: PPUSH
28104: LD_VAR 0 7
28108: PPUSH
28109: LD_VAR 0 8
28113: PPUSH
28114: LD_VAR 0 4
28118: PPUSH
28119: LD_VAR 0 5
28123: PPUSH
28124: CALL 29339 0 5
28128: GO 28251
28130: LD_INT 302
28132: DOUBLE
28133: EQUAL
28134: IFTRUE 28138
28136: GO 28175
28138: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28139: LD_VAR 0 6
28143: PPUSH
28144: LD_VAR 0 7
28148: PPUSH
28149: LD_VAR 0 8
28153: PPUSH
28154: LD_VAR 0 9
28158: PPUSH
28159: LD_VAR 0 4
28163: PPUSH
28164: LD_VAR 0 5
28168: PPUSH
28169: CALL 29430 0 6
28173: GO 28251
28175: LD_INT 303
28177: DOUBLE
28178: EQUAL
28179: IFTRUE 28183
28181: GO 28220
28183: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28184: LD_VAR 0 6
28188: PPUSH
28189: LD_VAR 0 7
28193: PPUSH
28194: LD_VAR 0 8
28198: PPUSH
28199: LD_VAR 0 9
28203: PPUSH
28204: LD_VAR 0 4
28208: PPUSH
28209: LD_VAR 0 5
28213: PPUSH
28214: CALL 28256 0 6
28218: GO 28251
28220: LD_INT 304
28222: DOUBLE
28223: EQUAL
28224: IFTRUE 28228
28226: GO 28250
28228: POP
// hHackTeleport ( unit , x , y ) ; end ;
28229: LD_VAR 0 2
28233: PPUSH
28234: LD_VAR 0 4
28238: PPUSH
28239: LD_VAR 0 5
28243: PPUSH
28244: CALL 30023 0 3
28248: GO 28251
28250: POP
// end ;
28251: LD_VAR 0 12
28255: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28256: LD_INT 0
28258: PPUSH
28259: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28260: LD_VAR 0 1
28264: PUSH
28265: LD_INT 1
28267: LESS
28268: PUSH
28269: LD_VAR 0 1
28273: PUSH
28274: LD_INT 3
28276: GREATER
28277: OR
28278: PUSH
28279: LD_VAR 0 5
28283: PPUSH
28284: LD_VAR 0 6
28288: PPUSH
28289: CALL_OW 428
28293: OR
28294: IFFALSE 28298
// exit ;
28296: GO 29026
// uc_side := your_side ;
28298: LD_ADDR_OWVAR 20
28302: PUSH
28303: LD_OWVAR 2
28307: ST_TO_ADDR
// uc_nation := nation ;
28308: LD_ADDR_OWVAR 21
28312: PUSH
28313: LD_VAR 0 1
28317: ST_TO_ADDR
// bc_level = 1 ;
28318: LD_ADDR_OWVAR 43
28322: PUSH
28323: LD_INT 1
28325: ST_TO_ADDR
// case btype of 1 :
28326: LD_VAR 0 2
28330: PUSH
28331: LD_INT 1
28333: DOUBLE
28334: EQUAL
28335: IFTRUE 28339
28337: GO 28350
28339: POP
// bc_type := b_depot ; 2 :
28340: LD_ADDR_OWVAR 42
28344: PUSH
28345: LD_INT 0
28347: ST_TO_ADDR
28348: GO 28970
28350: LD_INT 2
28352: DOUBLE
28353: EQUAL
28354: IFTRUE 28358
28356: GO 28369
28358: POP
// bc_type := b_warehouse ; 3 :
28359: LD_ADDR_OWVAR 42
28363: PUSH
28364: LD_INT 1
28366: ST_TO_ADDR
28367: GO 28970
28369: LD_INT 3
28371: DOUBLE
28372: EQUAL
28373: IFTRUE 28377
28375: GO 28388
28377: POP
// bc_type := b_lab ; 4 .. 9 :
28378: LD_ADDR_OWVAR 42
28382: PUSH
28383: LD_INT 6
28385: ST_TO_ADDR
28386: GO 28970
28388: LD_INT 4
28390: DOUBLE
28391: GREATEREQUAL
28392: IFFALSE 28400
28394: LD_INT 9
28396: DOUBLE
28397: LESSEQUAL
28398: IFTRUE 28402
28400: GO 28462
28402: POP
// begin bc_type := b_lab_half ;
28403: LD_ADDR_OWVAR 42
28407: PUSH
28408: LD_INT 7
28410: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28411: LD_ADDR_OWVAR 44
28415: PUSH
28416: LD_INT 10
28418: PUSH
28419: LD_INT 11
28421: PUSH
28422: LD_INT 12
28424: PUSH
28425: LD_INT 15
28427: PUSH
28428: LD_INT 14
28430: PUSH
28431: LD_INT 13
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: PUSH
28442: LD_VAR 0 2
28446: PUSH
28447: LD_INT 3
28449: MINUS
28450: ARRAY
28451: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28452: LD_ADDR_OWVAR 45
28456: PUSH
28457: LD_INT 9
28459: ST_TO_ADDR
// end ; 10 .. 13 :
28460: GO 28970
28462: LD_INT 10
28464: DOUBLE
28465: GREATEREQUAL
28466: IFFALSE 28474
28468: LD_INT 13
28470: DOUBLE
28471: LESSEQUAL
28472: IFTRUE 28476
28474: GO 28553
28476: POP
// begin bc_type := b_lab_full ;
28477: LD_ADDR_OWVAR 42
28481: PUSH
28482: LD_INT 8
28484: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28485: LD_ADDR_OWVAR 44
28489: PUSH
28490: LD_INT 10
28492: PUSH
28493: LD_INT 12
28495: PUSH
28496: LD_INT 14
28498: PUSH
28499: LD_INT 13
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: PUSH
28508: LD_VAR 0 2
28512: PUSH
28513: LD_INT 9
28515: MINUS
28516: ARRAY
28517: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28518: LD_ADDR_OWVAR 45
28522: PUSH
28523: LD_INT 11
28525: PUSH
28526: LD_INT 15
28528: PUSH
28529: LD_INT 12
28531: PUSH
28532: LD_INT 15
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: PUSH
28541: LD_VAR 0 2
28545: PUSH
28546: LD_INT 9
28548: MINUS
28549: ARRAY
28550: ST_TO_ADDR
// end ; 14 :
28551: GO 28970
28553: LD_INT 14
28555: DOUBLE
28556: EQUAL
28557: IFTRUE 28561
28559: GO 28572
28561: POP
// bc_type := b_workshop ; 15 :
28562: LD_ADDR_OWVAR 42
28566: PUSH
28567: LD_INT 2
28569: ST_TO_ADDR
28570: GO 28970
28572: LD_INT 15
28574: DOUBLE
28575: EQUAL
28576: IFTRUE 28580
28578: GO 28591
28580: POP
// bc_type := b_factory ; 16 :
28581: LD_ADDR_OWVAR 42
28585: PUSH
28586: LD_INT 3
28588: ST_TO_ADDR
28589: GO 28970
28591: LD_INT 16
28593: DOUBLE
28594: EQUAL
28595: IFTRUE 28599
28597: GO 28610
28599: POP
// bc_type := b_ext_gun ; 17 :
28600: LD_ADDR_OWVAR 42
28604: PUSH
28605: LD_INT 17
28607: ST_TO_ADDR
28608: GO 28970
28610: LD_INT 17
28612: DOUBLE
28613: EQUAL
28614: IFTRUE 28618
28616: GO 28646
28618: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28619: LD_ADDR_OWVAR 42
28623: PUSH
28624: LD_INT 19
28626: PUSH
28627: LD_INT 23
28629: PUSH
28630: LD_INT 19
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: PUSH
28638: LD_VAR 0 1
28642: ARRAY
28643: ST_TO_ADDR
28644: GO 28970
28646: LD_INT 18
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 28665
28654: POP
// bc_type := b_ext_radar ; 19 :
28655: LD_ADDR_OWVAR 42
28659: PUSH
28660: LD_INT 20
28662: ST_TO_ADDR
28663: GO 28970
28665: LD_INT 19
28667: DOUBLE
28668: EQUAL
28669: IFTRUE 28673
28671: GO 28684
28673: POP
// bc_type := b_ext_radio ; 20 :
28674: LD_ADDR_OWVAR 42
28678: PUSH
28679: LD_INT 22
28681: ST_TO_ADDR
28682: GO 28970
28684: LD_INT 20
28686: DOUBLE
28687: EQUAL
28688: IFTRUE 28692
28690: GO 28703
28692: POP
// bc_type := b_ext_siberium ; 21 :
28693: LD_ADDR_OWVAR 42
28697: PUSH
28698: LD_INT 21
28700: ST_TO_ADDR
28701: GO 28970
28703: LD_INT 21
28705: DOUBLE
28706: EQUAL
28707: IFTRUE 28711
28709: GO 28722
28711: POP
// bc_type := b_ext_computer ; 22 :
28712: LD_ADDR_OWVAR 42
28716: PUSH
28717: LD_INT 24
28719: ST_TO_ADDR
28720: GO 28970
28722: LD_INT 22
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28741
28730: POP
// bc_type := b_ext_track ; 23 :
28731: LD_ADDR_OWVAR 42
28735: PUSH
28736: LD_INT 16
28738: ST_TO_ADDR
28739: GO 28970
28741: LD_INT 23
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28760
28749: POP
// bc_type := b_ext_laser ; 24 :
28750: LD_ADDR_OWVAR 42
28754: PUSH
28755: LD_INT 25
28757: ST_TO_ADDR
28758: GO 28970
28760: LD_INT 24
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28768
28766: GO 28779
28768: POP
// bc_type := b_control_tower ; 25 :
28769: LD_ADDR_OWVAR 42
28773: PUSH
28774: LD_INT 36
28776: ST_TO_ADDR
28777: GO 28970
28779: LD_INT 25
28781: DOUBLE
28782: EQUAL
28783: IFTRUE 28787
28785: GO 28798
28787: POP
// bc_type := b_breastwork ; 26 :
28788: LD_ADDR_OWVAR 42
28792: PUSH
28793: LD_INT 31
28795: ST_TO_ADDR
28796: GO 28970
28798: LD_INT 26
28800: DOUBLE
28801: EQUAL
28802: IFTRUE 28806
28804: GO 28817
28806: POP
// bc_type := b_bunker ; 27 :
28807: LD_ADDR_OWVAR 42
28811: PUSH
28812: LD_INT 32
28814: ST_TO_ADDR
28815: GO 28970
28817: LD_INT 27
28819: DOUBLE
28820: EQUAL
28821: IFTRUE 28825
28823: GO 28836
28825: POP
// bc_type := b_turret ; 28 :
28826: LD_ADDR_OWVAR 42
28830: PUSH
28831: LD_INT 33
28833: ST_TO_ADDR
28834: GO 28970
28836: LD_INT 28
28838: DOUBLE
28839: EQUAL
28840: IFTRUE 28844
28842: GO 28855
28844: POP
// bc_type := b_armoury ; 29 :
28845: LD_ADDR_OWVAR 42
28849: PUSH
28850: LD_INT 4
28852: ST_TO_ADDR
28853: GO 28970
28855: LD_INT 29
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28874
28863: POP
// bc_type := b_barracks ; 30 :
28864: LD_ADDR_OWVAR 42
28868: PUSH
28869: LD_INT 5
28871: ST_TO_ADDR
28872: GO 28970
28874: LD_INT 30
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28893
28882: POP
// bc_type := b_solar_power ; 31 :
28883: LD_ADDR_OWVAR 42
28887: PUSH
28888: LD_INT 27
28890: ST_TO_ADDR
28891: GO 28970
28893: LD_INT 31
28895: DOUBLE
28896: EQUAL
28897: IFTRUE 28901
28899: GO 28912
28901: POP
// bc_type := b_oil_power ; 32 :
28902: LD_ADDR_OWVAR 42
28906: PUSH
28907: LD_INT 26
28909: ST_TO_ADDR
28910: GO 28970
28912: LD_INT 32
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 28931
28920: POP
// bc_type := b_siberite_power ; 33 :
28921: LD_ADDR_OWVAR 42
28925: PUSH
28926: LD_INT 28
28928: ST_TO_ADDR
28929: GO 28970
28931: LD_INT 33
28933: DOUBLE
28934: EQUAL
28935: IFTRUE 28939
28937: GO 28950
28939: POP
// bc_type := b_oil_mine ; 34 :
28940: LD_ADDR_OWVAR 42
28944: PUSH
28945: LD_INT 29
28947: ST_TO_ADDR
28948: GO 28970
28950: LD_INT 34
28952: DOUBLE
28953: EQUAL
28954: IFTRUE 28958
28956: GO 28969
28958: POP
// bc_type := b_siberite_mine ; end ;
28959: LD_ADDR_OWVAR 42
28963: PUSH
28964: LD_INT 30
28966: ST_TO_ADDR
28967: GO 28970
28969: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28970: LD_ADDR_VAR 0 8
28974: PUSH
28975: LD_VAR 0 5
28979: PPUSH
28980: LD_VAR 0 6
28984: PPUSH
28985: LD_VAR 0 3
28989: PPUSH
28990: CALL_OW 47
28994: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28995: LD_OWVAR 42
28999: PUSH
29000: LD_INT 32
29002: PUSH
29003: LD_INT 33
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: IN
29010: IFFALSE 29026
// PlaceWeaponTurret ( b , weapon ) ;
29012: LD_VAR 0 8
29016: PPUSH
29017: LD_VAR 0 4
29021: PPUSH
29022: CALL_OW 431
// end ;
29026: LD_VAR 0 7
29030: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29031: LD_INT 0
29033: PPUSH
29034: PPUSH
29035: PPUSH
29036: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29037: LD_ADDR_VAR 0 4
29041: PUSH
29042: LD_INT 22
29044: PUSH
29045: LD_OWVAR 2
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 30
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 30
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL_OW 69
29090: ST_TO_ADDR
// if not tmp then
29091: LD_VAR 0 4
29095: NOT
29096: IFFALSE 29100
// exit ;
29098: GO 29159
// for i in tmp do
29100: LD_ADDR_VAR 0 2
29104: PUSH
29105: LD_VAR 0 4
29109: PUSH
29110: FOR_IN
29111: IFFALSE 29157
// for j = 1 to 3 do
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: DOUBLE
29119: LD_INT 1
29121: DEC
29122: ST_TO_ADDR
29123: LD_INT 3
29125: PUSH
29126: FOR_TO
29127: IFFALSE 29153
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29129: LD_VAR 0 2
29133: PPUSH
29134: CALL_OW 274
29138: PPUSH
29139: LD_VAR 0 3
29143: PPUSH
29144: LD_INT 99999
29146: PPUSH
29147: CALL_OW 277
29151: GO 29126
29153: POP
29154: POP
29155: GO 29110
29157: POP
29158: POP
// end ;
29159: LD_VAR 0 1
29163: RET
// export function hHackSetLevel10 ; var i , j ; begin
29164: LD_INT 0
29166: PPUSH
29167: PPUSH
29168: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29169: LD_ADDR_VAR 0 2
29173: PUSH
29174: LD_INT 21
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PPUSH
29184: CALL_OW 69
29188: PUSH
29189: FOR_IN
29190: IFFALSE 29242
// if IsSelected ( i ) then
29192: LD_VAR 0 2
29196: PPUSH
29197: CALL_OW 306
29201: IFFALSE 29240
// begin for j := 1 to 4 do
29203: LD_ADDR_VAR 0 3
29207: PUSH
29208: DOUBLE
29209: LD_INT 1
29211: DEC
29212: ST_TO_ADDR
29213: LD_INT 4
29215: PUSH
29216: FOR_TO
29217: IFFALSE 29238
// SetSkill ( i , j , 10 ) ;
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_VAR 0 3
29228: PPUSH
29229: LD_INT 10
29231: PPUSH
29232: CALL_OW 237
29236: GO 29216
29238: POP
29239: POP
// end ;
29240: GO 29189
29242: POP
29243: POP
// end ;
29244: LD_VAR 0 1
29248: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29249: LD_INT 0
29251: PPUSH
29252: PPUSH
29253: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29254: LD_ADDR_VAR 0 2
29258: PUSH
29259: LD_INT 22
29261: PUSH
29262: LD_OWVAR 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 21
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PPUSH
29285: CALL_OW 69
29289: PUSH
29290: FOR_IN
29291: IFFALSE 29332
// begin for j := 1 to 4 do
29293: LD_ADDR_VAR 0 3
29297: PUSH
29298: DOUBLE
29299: LD_INT 1
29301: DEC
29302: ST_TO_ADDR
29303: LD_INT 4
29305: PUSH
29306: FOR_TO
29307: IFFALSE 29328
// SetSkill ( i , j , 10 ) ;
29309: LD_VAR 0 2
29313: PPUSH
29314: LD_VAR 0 3
29318: PPUSH
29319: LD_INT 10
29321: PPUSH
29322: CALL_OW 237
29326: GO 29306
29328: POP
29329: POP
// end ;
29330: GO 29290
29332: POP
29333: POP
// end ;
29334: LD_VAR 0 1
29338: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29339: LD_INT 0
29341: PPUSH
// uc_side := your_side ;
29342: LD_ADDR_OWVAR 20
29346: PUSH
29347: LD_OWVAR 2
29351: ST_TO_ADDR
// uc_nation := nation ;
29352: LD_ADDR_OWVAR 21
29356: PUSH
29357: LD_VAR 0 1
29361: ST_TO_ADDR
// InitHc ;
29362: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29366: LD_INT 0
29368: PPUSH
29369: LD_VAR 0 2
29373: PPUSH
29374: LD_VAR 0 3
29378: PPUSH
29379: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29383: LD_VAR 0 4
29387: PPUSH
29388: LD_VAR 0 5
29392: PPUSH
29393: CALL_OW 428
29397: PUSH
29398: LD_INT 0
29400: EQUAL
29401: IFFALSE 29425
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29403: CALL_OW 44
29407: PPUSH
29408: LD_VAR 0 4
29412: PPUSH
29413: LD_VAR 0 5
29417: PPUSH
29418: LD_INT 1
29420: PPUSH
29421: CALL_OW 48
// end ;
29425: LD_VAR 0 6
29429: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29430: LD_INT 0
29432: PPUSH
29433: PPUSH
// uc_side := your_side ;
29434: LD_ADDR_OWVAR 20
29438: PUSH
29439: LD_OWVAR 2
29443: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29444: LD_VAR 0 1
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 4
29460: PUSH
29461: LD_INT 5
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: IN
29471: IFFALSE 29483
// uc_nation := nation_american else
29473: LD_ADDR_OWVAR 21
29477: PUSH
29478: LD_INT 1
29480: ST_TO_ADDR
29481: GO 29526
// if chassis in [ 11 , 12 , 13 , 14 ] then
29483: LD_VAR 0 1
29487: PUSH
29488: LD_INT 11
29490: PUSH
29491: LD_INT 12
29493: PUSH
29494: LD_INT 13
29496: PUSH
29497: LD_INT 14
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: IN
29506: IFFALSE 29518
// uc_nation := nation_arabian else
29508: LD_ADDR_OWVAR 21
29512: PUSH
29513: LD_INT 2
29515: ST_TO_ADDR
29516: GO 29526
// uc_nation := nation_russian ;
29518: LD_ADDR_OWVAR 21
29522: PUSH
29523: LD_INT 3
29525: ST_TO_ADDR
// vc_chassis := chassis ;
29526: LD_ADDR_OWVAR 37
29530: PUSH
29531: LD_VAR 0 1
29535: ST_TO_ADDR
// vc_engine := engine ;
29536: LD_ADDR_OWVAR 39
29540: PUSH
29541: LD_VAR 0 2
29545: ST_TO_ADDR
// vc_control := control ;
29546: LD_ADDR_OWVAR 38
29550: PUSH
29551: LD_VAR 0 3
29555: ST_TO_ADDR
// vc_weapon := weapon ;
29556: LD_ADDR_OWVAR 40
29560: PUSH
29561: LD_VAR 0 4
29565: ST_TO_ADDR
// un := CreateVehicle ;
29566: LD_ADDR_VAR 0 8
29570: PUSH
29571: CALL_OW 45
29575: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29576: LD_VAR 0 8
29580: PPUSH
29581: LD_INT 0
29583: PPUSH
29584: LD_INT 5
29586: PPUSH
29587: CALL_OW 12
29591: PPUSH
29592: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29596: LD_VAR 0 8
29600: PPUSH
29601: LD_VAR 0 5
29605: PPUSH
29606: LD_VAR 0 6
29610: PPUSH
29611: LD_INT 1
29613: PPUSH
29614: CALL_OW 48
// end ;
29618: LD_VAR 0 7
29622: RET
// export hInvincible ; every 1 do
29623: GO 29625
29625: DISABLE
// hInvincible := [ ] ;
29626: LD_ADDR_EXP 98
29630: PUSH
29631: EMPTY
29632: ST_TO_ADDR
29633: END
// every 10 do var i ;
29634: GO 29636
29636: DISABLE
29637: LD_INT 0
29639: PPUSH
// begin enable ;
29640: ENABLE
// if not hInvincible then
29641: LD_EXP 98
29645: NOT
29646: IFFALSE 29650
// exit ;
29648: GO 29694
// for i in hInvincible do
29650: LD_ADDR_VAR 0 1
29654: PUSH
29655: LD_EXP 98
29659: PUSH
29660: FOR_IN
29661: IFFALSE 29692
// if GetLives ( i ) < 1000 then
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 256
29672: PUSH
29673: LD_INT 1000
29675: LESS
29676: IFFALSE 29690
// SetLives ( i , 1000 ) ;
29678: LD_VAR 0 1
29682: PPUSH
29683: LD_INT 1000
29685: PPUSH
29686: CALL_OW 234
29690: GO 29660
29692: POP
29693: POP
// end ;
29694: PPOPN 1
29696: END
// export function hHackInvincible ; var i ; begin
29697: LD_INT 0
29699: PPUSH
29700: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29701: LD_ADDR_VAR 0 2
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: LD_INT 21
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 21
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: PUSH
29739: FOR_IN
29740: IFFALSE 29801
// if IsSelected ( i ) then
29742: LD_VAR 0 2
29746: PPUSH
29747: CALL_OW 306
29751: IFFALSE 29799
// begin if i in hInvincible then
29753: LD_VAR 0 2
29757: PUSH
29758: LD_EXP 98
29762: IN
29763: IFFALSE 29783
// hInvincible := hInvincible diff i else
29765: LD_ADDR_EXP 98
29769: PUSH
29770: LD_EXP 98
29774: PUSH
29775: LD_VAR 0 2
29779: DIFF
29780: ST_TO_ADDR
29781: GO 29799
// hInvincible := hInvincible union i ;
29783: LD_ADDR_EXP 98
29787: PUSH
29788: LD_EXP 98
29792: PUSH
29793: LD_VAR 0 2
29797: UNION
29798: ST_TO_ADDR
// end ;
29799: GO 29739
29801: POP
29802: POP
// end ;
29803: LD_VAR 0 1
29807: RET
// export function hHackInvisible ; var i , j ; begin
29808: LD_INT 0
29810: PPUSH
29811: PPUSH
29812: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29813: LD_ADDR_VAR 0 2
29817: PUSH
29818: LD_INT 21
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PPUSH
29828: CALL_OW 69
29832: PUSH
29833: FOR_IN
29834: IFFALSE 29858
// if IsSelected ( i ) then
29836: LD_VAR 0 2
29840: PPUSH
29841: CALL_OW 306
29845: IFFALSE 29856
// ComForceInvisible ( i ) ;
29847: LD_VAR 0 2
29851: PPUSH
29852: CALL_OW 496
29856: GO 29833
29858: POP
29859: POP
// end ;
29860: LD_VAR 0 1
29864: RET
// export function hHackChangeYourSide ; begin
29865: LD_INT 0
29867: PPUSH
// if your_side = 8 then
29868: LD_OWVAR 2
29872: PUSH
29873: LD_INT 8
29875: EQUAL
29876: IFFALSE 29888
// your_side := 0 else
29878: LD_ADDR_OWVAR 2
29882: PUSH
29883: LD_INT 0
29885: ST_TO_ADDR
29886: GO 29902
// your_side := your_side + 1 ;
29888: LD_ADDR_OWVAR 2
29892: PUSH
29893: LD_OWVAR 2
29897: PUSH
29898: LD_INT 1
29900: PLUS
29901: ST_TO_ADDR
// end ;
29902: LD_VAR 0 1
29906: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29907: LD_INT 0
29909: PPUSH
29910: PPUSH
29911: PPUSH
// for i in all_units do
29912: LD_ADDR_VAR 0 2
29916: PUSH
29917: LD_OWVAR 3
29921: PUSH
29922: FOR_IN
29923: IFFALSE 30001
// if IsSelected ( i ) then
29925: LD_VAR 0 2
29929: PPUSH
29930: CALL_OW 306
29934: IFFALSE 29999
// begin j := GetSide ( i ) ;
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_VAR 0 2
29945: PPUSH
29946: CALL_OW 255
29950: ST_TO_ADDR
// if j = 8 then
29951: LD_VAR 0 3
29955: PUSH
29956: LD_INT 8
29958: EQUAL
29959: IFFALSE 29971
// j := 0 else
29961: LD_ADDR_VAR 0 3
29965: PUSH
29966: LD_INT 0
29968: ST_TO_ADDR
29969: GO 29985
// j := j + 1 ;
29971: LD_ADDR_VAR 0 3
29975: PUSH
29976: LD_VAR 0 3
29980: PUSH
29981: LD_INT 1
29983: PLUS
29984: ST_TO_ADDR
// SetSide ( i , j ) ;
29985: LD_VAR 0 2
29989: PPUSH
29990: LD_VAR 0 3
29994: PPUSH
29995: CALL_OW 235
// end ;
29999: GO 29922
30001: POP
30002: POP
// end ;
30003: LD_VAR 0 1
30007: RET
// export function hHackFog ; begin
30008: LD_INT 0
30010: PPUSH
// FogOff ( true ) ;
30011: LD_INT 1
30013: PPUSH
30014: CALL_OW 344
// end ;
30018: LD_VAR 0 1
30022: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30023: LD_INT 0
30025: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30026: LD_VAR 0 1
30030: PPUSH
30031: LD_VAR 0 2
30035: PPUSH
30036: LD_VAR 0 3
30040: PPUSH
30041: LD_INT 1
30043: PPUSH
30044: LD_INT 1
30046: PPUSH
30047: CALL_OW 483
// CenterOnXY ( x , y ) ;
30051: LD_VAR 0 2
30055: PPUSH
30056: LD_VAR 0 3
30060: PPUSH
30061: CALL_OW 84
// end ;
30065: LD_VAR 0 4
30069: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30070: LD_INT 0
30072: PPUSH
30073: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30074: LD_VAR 0 1
30078: NOT
30079: PUSH
30080: LD_VAR 0 2
30084: PPUSH
30085: LD_VAR 0 3
30089: PPUSH
30090: CALL_OW 488
30094: NOT
30095: OR
30096: PUSH
30097: LD_VAR 0 1
30101: PPUSH
30102: CALL_OW 266
30106: PUSH
30107: LD_INT 3
30109: NONEQUAL
30110: PUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 247
30120: PUSH
30121: LD_INT 1
30123: EQUAL
30124: NOT
30125: AND
30126: OR
30127: IFFALSE 30131
// exit ;
30129: GO 30280
// if GetType ( factory ) = unit_human then
30131: LD_VAR 0 1
30135: PPUSH
30136: CALL_OW 247
30140: PUSH
30141: LD_INT 1
30143: EQUAL
30144: IFFALSE 30161
// factory := IsInUnit ( factory ) ;
30146: LD_ADDR_VAR 0 1
30150: PUSH
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL_OW 310
30160: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30161: LD_VAR 0 1
30165: PPUSH
30166: CALL_OW 266
30170: PUSH
30171: LD_INT 3
30173: NONEQUAL
30174: IFFALSE 30178
// exit ;
30176: GO 30280
// if HexInfo ( x , y ) = factory then
30178: LD_VAR 0 2
30182: PPUSH
30183: LD_VAR 0 3
30187: PPUSH
30188: CALL_OW 428
30192: PUSH
30193: LD_VAR 0 1
30197: EQUAL
30198: IFFALSE 30225
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30200: LD_ADDR_EXP 99
30204: PUSH
30205: LD_EXP 99
30209: PPUSH
30210: LD_VAR 0 1
30214: PPUSH
30215: LD_INT 0
30217: PPUSH
30218: CALL_OW 1
30222: ST_TO_ADDR
30223: GO 30276
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30225: LD_ADDR_EXP 99
30229: PUSH
30230: LD_EXP 99
30234: PPUSH
30235: LD_VAR 0 1
30239: PPUSH
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL_OW 255
30249: PUSH
30250: LD_VAR 0 1
30254: PUSH
30255: LD_VAR 0 2
30259: PUSH
30260: LD_VAR 0 3
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: PPUSH
30271: CALL_OW 1
30275: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30276: CALL 30285 0 0
// end ;
30280: LD_VAR 0 4
30284: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30285: LD_INT 0
30287: PPUSH
30288: PPUSH
30289: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30290: LD_STRING resetFactoryWaypoint();
30292: PPUSH
30293: CALL_OW 559
// if factoryWaypoints then
30297: LD_EXP 99
30301: IFFALSE 30427
// begin list := PrepareArray ( factoryWaypoints ) ;
30303: LD_ADDR_VAR 0 3
30307: PUSH
30308: LD_EXP 99
30312: PPUSH
30313: CALL 77569 0 1
30317: ST_TO_ADDR
// for i := 1 to list do
30318: LD_ADDR_VAR 0 2
30322: PUSH
30323: DOUBLE
30324: LD_INT 1
30326: DEC
30327: ST_TO_ADDR
30328: LD_VAR 0 3
30332: PUSH
30333: FOR_TO
30334: IFFALSE 30425
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30336: LD_STRING setFactoryWaypointXY(
30338: PUSH
30339: LD_VAR 0 3
30343: PUSH
30344: LD_VAR 0 2
30348: ARRAY
30349: PUSH
30350: LD_INT 1
30352: ARRAY
30353: STR
30354: PUSH
30355: LD_STRING ,
30357: STR
30358: PUSH
30359: LD_VAR 0 3
30363: PUSH
30364: LD_VAR 0 2
30368: ARRAY
30369: PUSH
30370: LD_INT 2
30372: ARRAY
30373: STR
30374: PUSH
30375: LD_STRING ,
30377: STR
30378: PUSH
30379: LD_VAR 0 3
30383: PUSH
30384: LD_VAR 0 2
30388: ARRAY
30389: PUSH
30390: LD_INT 3
30392: ARRAY
30393: STR
30394: PUSH
30395: LD_STRING ,
30397: STR
30398: PUSH
30399: LD_VAR 0 3
30403: PUSH
30404: LD_VAR 0 2
30408: ARRAY
30409: PUSH
30410: LD_INT 4
30412: ARRAY
30413: STR
30414: PUSH
30415: LD_STRING )
30417: STR
30418: PPUSH
30419: CALL_OW 559
30423: GO 30333
30425: POP
30426: POP
// end ; end ;
30427: LD_VAR 0 1
30431: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30432: LD_INT 0
30434: PPUSH
// if HexInfo ( x , y ) = warehouse then
30435: LD_VAR 0 2
30439: PPUSH
30440: LD_VAR 0 3
30444: PPUSH
30445: CALL_OW 428
30449: PUSH
30450: LD_VAR 0 1
30454: EQUAL
30455: IFFALSE 30482
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30457: LD_ADDR_EXP 100
30461: PUSH
30462: LD_EXP 100
30466: PPUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: LD_INT 0
30474: PPUSH
30475: CALL_OW 1
30479: ST_TO_ADDR
30480: GO 30533
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30482: LD_ADDR_EXP 100
30486: PUSH
30487: LD_EXP 100
30491: PPUSH
30492: LD_VAR 0 1
30496: PPUSH
30497: LD_VAR 0 1
30501: PPUSH
30502: CALL_OW 255
30506: PUSH
30507: LD_VAR 0 1
30511: PUSH
30512: LD_VAR 0 2
30516: PUSH
30517: LD_VAR 0 3
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: PPUSH
30528: CALL_OW 1
30532: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30533: CALL 30542 0 0
// end ;
30537: LD_VAR 0 4
30541: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30542: LD_INT 0
30544: PPUSH
30545: PPUSH
30546: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30547: LD_STRING resetWarehouseGatheringPoints();
30549: PPUSH
30550: CALL_OW 559
// if warehouseGatheringPoints then
30554: LD_EXP 100
30558: IFFALSE 30684
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30560: LD_ADDR_VAR 0 3
30564: PUSH
30565: LD_EXP 100
30569: PPUSH
30570: CALL 77569 0 1
30574: ST_TO_ADDR
// for i := 1 to list do
30575: LD_ADDR_VAR 0 2
30579: PUSH
30580: DOUBLE
30581: LD_INT 1
30583: DEC
30584: ST_TO_ADDR
30585: LD_VAR 0 3
30589: PUSH
30590: FOR_TO
30591: IFFALSE 30682
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30593: LD_STRING setWarehouseGatheringPointXY(
30595: PUSH
30596: LD_VAR 0 3
30600: PUSH
30601: LD_VAR 0 2
30605: ARRAY
30606: PUSH
30607: LD_INT 1
30609: ARRAY
30610: STR
30611: PUSH
30612: LD_STRING ,
30614: STR
30615: PUSH
30616: LD_VAR 0 3
30620: PUSH
30621: LD_VAR 0 2
30625: ARRAY
30626: PUSH
30627: LD_INT 2
30629: ARRAY
30630: STR
30631: PUSH
30632: LD_STRING ,
30634: STR
30635: PUSH
30636: LD_VAR 0 3
30640: PUSH
30641: LD_VAR 0 2
30645: ARRAY
30646: PUSH
30647: LD_INT 3
30649: ARRAY
30650: STR
30651: PUSH
30652: LD_STRING ,
30654: STR
30655: PUSH
30656: LD_VAR 0 3
30660: PUSH
30661: LD_VAR 0 2
30665: ARRAY
30666: PUSH
30667: LD_INT 4
30669: ARRAY
30670: STR
30671: PUSH
30672: LD_STRING )
30674: STR
30675: PPUSH
30676: CALL_OW 559
30680: GO 30590
30682: POP
30683: POP
// end ; end ;
30684: LD_VAR 0 1
30688: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30689: LD_EXP 100
30693: IFFALSE 31378
30695: GO 30697
30697: DISABLE
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
30708: PPUSH
// begin enable ;
30709: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30710: LD_ADDR_VAR 0 3
30714: PUSH
30715: LD_EXP 100
30719: PPUSH
30720: CALL 77569 0 1
30724: ST_TO_ADDR
// if not list then
30725: LD_VAR 0 3
30729: NOT
30730: IFFALSE 30734
// exit ;
30732: GO 31378
// for i := 1 to list do
30734: LD_ADDR_VAR 0 1
30738: PUSH
30739: DOUBLE
30740: LD_INT 1
30742: DEC
30743: ST_TO_ADDR
30744: LD_VAR 0 3
30748: PUSH
30749: FOR_TO
30750: IFFALSE 31376
// begin depot := list [ i ] [ 2 ] ;
30752: LD_ADDR_VAR 0 8
30756: PUSH
30757: LD_VAR 0 3
30761: PUSH
30762: LD_VAR 0 1
30766: ARRAY
30767: PUSH
30768: LD_INT 2
30770: ARRAY
30771: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30772: LD_ADDR_VAR 0 5
30776: PUSH
30777: LD_VAR 0 3
30781: PUSH
30782: LD_VAR 0 1
30786: ARRAY
30787: PUSH
30788: LD_INT 1
30790: ARRAY
30791: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30792: LD_VAR 0 8
30796: PPUSH
30797: CALL_OW 301
30801: PUSH
30802: LD_VAR 0 5
30806: PUSH
30807: LD_VAR 0 8
30811: PPUSH
30812: CALL_OW 255
30816: NONEQUAL
30817: OR
30818: IFFALSE 30847
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30820: LD_ADDR_EXP 100
30824: PUSH
30825: LD_EXP 100
30829: PPUSH
30830: LD_VAR 0 8
30834: PPUSH
30835: LD_INT 0
30837: PPUSH
30838: CALL_OW 1
30842: ST_TO_ADDR
// exit ;
30843: POP
30844: POP
30845: GO 31378
// end ; x := list [ i ] [ 3 ] ;
30847: LD_ADDR_VAR 0 6
30851: PUSH
30852: LD_VAR 0 3
30856: PUSH
30857: LD_VAR 0 1
30861: ARRAY
30862: PUSH
30863: LD_INT 3
30865: ARRAY
30866: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30867: LD_ADDR_VAR 0 7
30871: PUSH
30872: LD_VAR 0 3
30876: PUSH
30877: LD_VAR 0 1
30881: ARRAY
30882: PUSH
30883: LD_INT 4
30885: ARRAY
30886: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30887: LD_ADDR_VAR 0 9
30891: PUSH
30892: LD_VAR 0 6
30896: PPUSH
30897: LD_VAR 0 7
30901: PPUSH
30902: LD_INT 16
30904: PPUSH
30905: CALL 76157 0 3
30909: ST_TO_ADDR
// if not cratesNearbyPoint then
30910: LD_VAR 0 9
30914: NOT
30915: IFFALSE 30921
// exit ;
30917: POP
30918: POP
30919: GO 31378
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30921: LD_ADDR_VAR 0 4
30925: PUSH
30926: LD_INT 22
30928: PUSH
30929: LD_VAR 0 5
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: LD_INT 60
30943: PUSH
30944: EMPTY
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 91
30953: PUSH
30954: LD_VAR 0 8
30958: PUSH
30959: LD_INT 6
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 25
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 25
30982: PUSH
30983: LD_INT 16
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: PPUSH
31001: CALL_OW 69
31005: PUSH
31006: LD_VAR 0 8
31010: PPUSH
31011: CALL_OW 313
31015: PPUSH
31016: LD_INT 3
31018: PUSH
31019: LD_INT 60
31021: PUSH
31022: EMPTY
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: LD_INT 25
31034: PUSH
31035: LD_INT 2
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 25
31044: PUSH
31045: LD_INT 16
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PPUSH
31061: CALL_OW 72
31065: UNION
31066: ST_TO_ADDR
// if tmp then
31067: LD_VAR 0 4
31071: IFFALSE 31151
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31073: LD_ADDR_VAR 0 4
31077: PUSH
31078: LD_VAR 0 4
31082: PPUSH
31083: LD_INT 3
31085: PPUSH
31086: CALL 74126 0 2
31090: ST_TO_ADDR
// for j in tmp do
31091: LD_ADDR_VAR 0 2
31095: PUSH
31096: LD_VAR 0 4
31100: PUSH
31101: FOR_IN
31102: IFFALSE 31145
// begin if IsInUnit ( j ) then
31104: LD_VAR 0 2
31108: PPUSH
31109: CALL_OW 310
31113: IFFALSE 31124
// ComExit ( j ) ;
31115: LD_VAR 0 2
31119: PPUSH
31120: CALL 74209 0 1
// AddComCollect ( j , x , y ) ;
31124: LD_VAR 0 2
31128: PPUSH
31129: LD_VAR 0 6
31133: PPUSH
31134: LD_VAR 0 7
31138: PPUSH
31139: CALL_OW 177
// end ;
31143: GO 31101
31145: POP
31146: POP
// exit ;
31147: POP
31148: POP
31149: GO 31378
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31151: LD_ADDR_VAR 0 4
31155: PUSH
31156: LD_INT 22
31158: PUSH
31159: LD_VAR 0 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 91
31170: PUSH
31171: LD_VAR 0 8
31175: PUSH
31176: LD_INT 8
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: LD_INT 34
31189: PUSH
31190: LD_INT 12
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 34
31199: PUSH
31200: LD_INT 51
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 34
31209: PUSH
31210: LD_INT 32
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 34
31219: PUSH
31220: LD_INT 89
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: PPUSH
31239: CALL_OW 69
31243: ST_TO_ADDR
// if tmp then
31244: LD_VAR 0 4
31248: IFFALSE 31374
// begin for j in tmp do
31250: LD_ADDR_VAR 0 2
31254: PUSH
31255: LD_VAR 0 4
31259: PUSH
31260: FOR_IN
31261: IFFALSE 31372
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31263: LD_VAR 0 2
31267: PPUSH
31268: CALL_OW 262
31272: PUSH
31273: LD_INT 3
31275: EQUAL
31276: PUSH
31277: LD_VAR 0 2
31281: PPUSH
31282: CALL_OW 261
31286: PUSH
31287: LD_INT 20
31289: GREATER
31290: OR
31291: PUSH
31292: LD_VAR 0 2
31296: PPUSH
31297: CALL_OW 314
31301: NOT
31302: AND
31303: PUSH
31304: LD_VAR 0 2
31308: PPUSH
31309: CALL_OW 263
31313: PUSH
31314: LD_INT 1
31316: NONEQUAL
31317: PUSH
31318: LD_VAR 0 2
31322: PPUSH
31323: CALL_OW 311
31327: OR
31328: AND
31329: IFFALSE 31370
// begin ComCollect ( j , x , y ) ;
31331: LD_VAR 0 2
31335: PPUSH
31336: LD_VAR 0 6
31340: PPUSH
31341: LD_VAR 0 7
31345: PPUSH
31346: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31350: LD_VAR 0 2
31354: PPUSH
31355: LD_VAR 0 8
31359: PPUSH
31360: CALL_OW 172
// exit ;
31364: POP
31365: POP
31366: POP
31367: POP
31368: GO 31378
// end ;
31370: GO 31260
31372: POP
31373: POP
// end ; end ;
31374: GO 30749
31376: POP
31377: POP
// end ; end_of_file
31378: PPOPN 9
31380: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31381: LD_INT 0
31383: PPUSH
31384: PPUSH
31385: PPUSH
31386: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 264
31396: PUSH
31397: LD_INT 91
31399: EQUAL
31400: IFFALSE 31472
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31402: LD_INT 68
31404: PPUSH
31405: LD_VAR 0 1
31409: PPUSH
31410: CALL_OW 255
31414: PPUSH
31415: CALL_OW 321
31419: PUSH
31420: LD_INT 2
31422: EQUAL
31423: IFFALSE 31435
// eff := 70 else
31425: LD_ADDR_VAR 0 4
31429: PUSH
31430: LD_INT 70
31432: ST_TO_ADDR
31433: GO 31443
// eff := 30 ;
31435: LD_ADDR_VAR 0 4
31439: PUSH
31440: LD_INT 30
31442: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31443: LD_VAR 0 1
31447: PPUSH
31448: CALL_OW 250
31452: PPUSH
31453: LD_VAR 0 1
31457: PPUSH
31458: CALL_OW 251
31462: PPUSH
31463: LD_VAR 0 4
31467: PPUSH
31468: CALL_OW 495
// end ; end ;
31472: LD_VAR 0 2
31476: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31477: LD_INT 0
31479: PPUSH
// end ;
31480: LD_VAR 0 4
31484: RET
// export function SOS_Command ( cmd ) ; begin
31485: LD_INT 0
31487: PPUSH
// end ;
31488: LD_VAR 0 2
31492: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31493: LD_INT 0
31495: PPUSH
// end ;
31496: LD_VAR 0 6
31500: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31501: LD_INT 0
31503: PPUSH
31504: PPUSH
// if not vehicle or not factory then
31505: LD_VAR 0 1
31509: NOT
31510: PUSH
31511: LD_VAR 0 2
31515: NOT
31516: OR
31517: IFFALSE 31521
// exit ;
31519: GO 31752
// if factoryWaypoints >= factory then
31521: LD_EXP 99
31525: PUSH
31526: LD_VAR 0 2
31530: GREATEREQUAL
31531: IFFALSE 31752
// if factoryWaypoints [ factory ] then
31533: LD_EXP 99
31537: PUSH
31538: LD_VAR 0 2
31542: ARRAY
31543: IFFALSE 31752
// begin if GetControl ( vehicle ) = control_manual then
31545: LD_VAR 0 1
31549: PPUSH
31550: CALL_OW 263
31554: PUSH
31555: LD_INT 1
31557: EQUAL
31558: IFFALSE 31639
// begin driver := IsDrivenBy ( vehicle ) ;
31560: LD_ADDR_VAR 0 4
31564: PUSH
31565: LD_VAR 0 1
31569: PPUSH
31570: CALL_OW 311
31574: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31575: LD_VAR 0 4
31579: PPUSH
31580: LD_EXP 99
31584: PUSH
31585: LD_VAR 0 2
31589: ARRAY
31590: PUSH
31591: LD_INT 3
31593: ARRAY
31594: PPUSH
31595: LD_EXP 99
31599: PUSH
31600: LD_VAR 0 2
31604: ARRAY
31605: PUSH
31606: LD_INT 4
31608: ARRAY
31609: PPUSH
31610: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31614: LD_VAR 0 4
31618: PPUSH
31619: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31623: LD_VAR 0 4
31627: PPUSH
31628: LD_VAR 0 2
31632: PPUSH
31633: CALL_OW 180
// end else
31637: GO 31752
// if GetControl ( vehicle ) = control_remote then
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 263
31648: PUSH
31649: LD_INT 2
31651: EQUAL
31652: IFFALSE 31713
// begin wait ( 0 0$2 ) ;
31654: LD_INT 70
31656: PPUSH
31657: CALL_OW 67
// if Connect ( vehicle ) then
31661: LD_VAR 0 1
31665: PPUSH
31666: CALL 44417 0 1
31670: IFFALSE 31711
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31672: LD_VAR 0 1
31676: PPUSH
31677: LD_EXP 99
31681: PUSH
31682: LD_VAR 0 2
31686: ARRAY
31687: PUSH
31688: LD_INT 3
31690: ARRAY
31691: PPUSH
31692: LD_EXP 99
31696: PUSH
31697: LD_VAR 0 2
31701: ARRAY
31702: PUSH
31703: LD_INT 4
31705: ARRAY
31706: PPUSH
31707: CALL_OW 171
// end else
31711: GO 31752
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31713: LD_VAR 0 1
31717: PPUSH
31718: LD_EXP 99
31722: PUSH
31723: LD_VAR 0 2
31727: ARRAY
31728: PUSH
31729: LD_INT 3
31731: ARRAY
31732: PPUSH
31733: LD_EXP 99
31737: PUSH
31738: LD_VAR 0 2
31742: ARRAY
31743: PUSH
31744: LD_INT 4
31746: ARRAY
31747: PPUSH
31748: CALL_OW 171
// end ; end ;
31752: LD_VAR 0 3
31756: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31757: LD_INT 0
31759: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31760: LD_VAR 0 1
31764: PUSH
31765: LD_INT 250
31767: EQUAL
31768: PUSH
31769: LD_VAR 0 2
31773: PPUSH
31774: CALL_OW 264
31778: PUSH
31779: LD_INT 81
31781: EQUAL
31782: AND
31783: IFFALSE 31804
// MinerPlaceMine ( unit , x , y ) ;
31785: LD_VAR 0 2
31789: PPUSH
31790: LD_VAR 0 4
31794: PPUSH
31795: LD_VAR 0 5
31799: PPUSH
31800: CALL 34628 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31804: LD_VAR 0 1
31808: PUSH
31809: LD_INT 251
31811: EQUAL
31812: PUSH
31813: LD_VAR 0 2
31817: PPUSH
31818: CALL_OW 264
31822: PUSH
31823: LD_INT 81
31825: EQUAL
31826: AND
31827: IFFALSE 31848
// MinerDetonateMine ( unit , x , y ) ;
31829: LD_VAR 0 2
31833: PPUSH
31834: LD_VAR 0 4
31838: PPUSH
31839: LD_VAR 0 5
31843: PPUSH
31844: CALL 34903 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31848: LD_VAR 0 1
31852: PUSH
31853: LD_INT 252
31855: EQUAL
31856: PUSH
31857: LD_VAR 0 2
31861: PPUSH
31862: CALL_OW 264
31866: PUSH
31867: LD_INT 81
31869: EQUAL
31870: AND
31871: IFFALSE 31892
// MinerCreateMinefield ( unit , x , y ) ;
31873: LD_VAR 0 2
31877: PPUSH
31878: LD_VAR 0 4
31882: PPUSH
31883: LD_VAR 0 5
31887: PPUSH
31888: CALL 35320 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31892: LD_VAR 0 1
31896: PUSH
31897: LD_INT 253
31899: EQUAL
31900: PUSH
31901: LD_VAR 0 2
31905: PPUSH
31906: CALL_OW 257
31910: PUSH
31911: LD_INT 5
31913: EQUAL
31914: AND
31915: IFFALSE 31936
// ComBinocular ( unit , x , y ) ;
31917: LD_VAR 0 2
31921: PPUSH
31922: LD_VAR 0 4
31926: PPUSH
31927: LD_VAR 0 5
31931: PPUSH
31932: CALL 35689 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31936: LD_VAR 0 1
31940: PUSH
31941: LD_INT 254
31943: EQUAL
31944: PUSH
31945: LD_VAR 0 2
31949: PPUSH
31950: CALL_OW 264
31954: PUSH
31955: LD_INT 99
31957: EQUAL
31958: AND
31959: PUSH
31960: LD_VAR 0 3
31964: PPUSH
31965: CALL_OW 263
31969: PUSH
31970: LD_INT 3
31972: EQUAL
31973: AND
31974: IFFALSE 31990
// HackDestroyVehicle ( unit , selectedUnit ) ;
31976: LD_VAR 0 2
31980: PPUSH
31981: LD_VAR 0 3
31985: PPUSH
31986: CALL 33992 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31990: LD_VAR 0 1
31994: PUSH
31995: LD_INT 255
31997: EQUAL
31998: PUSH
31999: LD_VAR 0 2
32003: PPUSH
32004: CALL_OW 264
32008: PUSH
32009: LD_INT 14
32011: PUSH
32012: LD_INT 53
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: IN
32019: AND
32020: PUSH
32021: LD_VAR 0 4
32025: PPUSH
32026: LD_VAR 0 5
32030: PPUSH
32031: CALL_OW 488
32035: AND
32036: IFFALSE 32060
// CutTreeXYR ( unit , x , y , 12 ) ;
32038: LD_VAR 0 2
32042: PPUSH
32043: LD_VAR 0 4
32047: PPUSH
32048: LD_VAR 0 5
32052: PPUSH
32053: LD_INT 12
32055: PPUSH
32056: CALL 32155 0 4
// if cmd = 256 then
32060: LD_VAR 0 1
32064: PUSH
32065: LD_INT 256
32067: EQUAL
32068: IFFALSE 32089
// SetFactoryWaypoint ( unit , x , y ) ;
32070: LD_VAR 0 2
32074: PPUSH
32075: LD_VAR 0 4
32079: PPUSH
32080: LD_VAR 0 5
32084: PPUSH
32085: CALL 30070 0 3
// if cmd = 257 then
32089: LD_VAR 0 1
32093: PUSH
32094: LD_INT 257
32096: EQUAL
32097: IFFALSE 32118
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32099: LD_VAR 0 2
32103: PPUSH
32104: LD_VAR 0 4
32108: PPUSH
32109: LD_VAR 0 5
32113: PPUSH
32114: CALL 30432 0 3
// if cmd = 258 then
32118: LD_VAR 0 1
32122: PUSH
32123: LD_INT 258
32125: EQUAL
32126: IFFALSE 32150
// BurnTreeXYR ( unit , x , y , 8 ) ;
32128: LD_VAR 0 2
32132: PPUSH
32133: LD_VAR 0 4
32137: PPUSH
32138: LD_VAR 0 5
32142: PPUSH
32143: LD_INT 8
32145: PPUSH
32146: CALL 32549 0 4
// end ;
32150: LD_VAR 0 6
32154: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32155: LD_INT 0
32157: PPUSH
32158: PPUSH
32159: PPUSH
32160: PPUSH
32161: PPUSH
32162: PPUSH
32163: PPUSH
32164: PPUSH
32165: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
32166: LD_VAR 0 1
32170: PPUSH
32171: CALL_OW 302
32175: NOT
32176: PUSH
32177: LD_VAR 0 2
32181: PPUSH
32182: LD_VAR 0 3
32186: PPUSH
32187: CALL_OW 488
32191: NOT
32192: OR
32193: PUSH
32194: LD_VAR 0 4
32198: NOT
32199: OR
32200: IFFALSE 32204
// exit ;
32202: GO 32544
// list := [ ] ;
32204: LD_ADDR_VAR 0 13
32208: PUSH
32209: EMPTY
32210: ST_TO_ADDR
// if x - r < 0 then
32211: LD_VAR 0 2
32215: PUSH
32216: LD_VAR 0 4
32220: MINUS
32221: PUSH
32222: LD_INT 0
32224: LESS
32225: IFFALSE 32237
// min_x := 0 else
32227: LD_ADDR_VAR 0 7
32231: PUSH
32232: LD_INT 0
32234: ST_TO_ADDR
32235: GO 32253
// min_x := x - r ;
32237: LD_ADDR_VAR 0 7
32241: PUSH
32242: LD_VAR 0 2
32246: PUSH
32247: LD_VAR 0 4
32251: MINUS
32252: ST_TO_ADDR
// if y - r < 0 then
32253: LD_VAR 0 3
32257: PUSH
32258: LD_VAR 0 4
32262: MINUS
32263: PUSH
32264: LD_INT 0
32266: LESS
32267: IFFALSE 32279
// min_y := 0 else
32269: LD_ADDR_VAR 0 8
32273: PUSH
32274: LD_INT 0
32276: ST_TO_ADDR
32277: GO 32295
// min_y := y - r ;
32279: LD_ADDR_VAR 0 8
32283: PUSH
32284: LD_VAR 0 3
32288: PUSH
32289: LD_VAR 0 4
32293: MINUS
32294: ST_TO_ADDR
// max_x := x + r ;
32295: LD_ADDR_VAR 0 9
32299: PUSH
32300: LD_VAR 0 2
32304: PUSH
32305: LD_VAR 0 4
32309: PLUS
32310: ST_TO_ADDR
// max_y := y + r ;
32311: LD_ADDR_VAR 0 10
32315: PUSH
32316: LD_VAR 0 3
32320: PUSH
32321: LD_VAR 0 4
32325: PLUS
32326: ST_TO_ADDR
// for _x = min_x to max_x do
32327: LD_ADDR_VAR 0 11
32331: PUSH
32332: DOUBLE
32333: LD_VAR 0 7
32337: DEC
32338: ST_TO_ADDR
32339: LD_VAR 0 9
32343: PUSH
32344: FOR_TO
32345: IFFALSE 32462
// for _y = min_y to max_y do
32347: LD_ADDR_VAR 0 12
32351: PUSH
32352: DOUBLE
32353: LD_VAR 0 8
32357: DEC
32358: ST_TO_ADDR
32359: LD_VAR 0 10
32363: PUSH
32364: FOR_TO
32365: IFFALSE 32458
// begin if not ValidHex ( _x , _y ) then
32367: LD_VAR 0 11
32371: PPUSH
32372: LD_VAR 0 12
32376: PPUSH
32377: CALL_OW 488
32381: NOT
32382: IFFALSE 32386
// continue ;
32384: GO 32364
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32386: LD_VAR 0 11
32390: PPUSH
32391: LD_VAR 0 12
32395: PPUSH
32396: CALL_OW 351
32400: PUSH
32401: LD_VAR 0 11
32405: PPUSH
32406: LD_VAR 0 12
32410: PPUSH
32411: CALL_OW 554
32415: AND
32416: IFFALSE 32456
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32418: LD_ADDR_VAR 0 13
32422: PUSH
32423: LD_VAR 0 13
32427: PPUSH
32428: LD_VAR 0 13
32432: PUSH
32433: LD_INT 1
32435: PLUS
32436: PPUSH
32437: LD_VAR 0 11
32441: PUSH
32442: LD_VAR 0 12
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PPUSH
32451: CALL_OW 2
32455: ST_TO_ADDR
// end ;
32456: GO 32364
32458: POP
32459: POP
32460: GO 32344
32462: POP
32463: POP
// if not list then
32464: LD_VAR 0 13
32468: NOT
32469: IFFALSE 32473
// exit ;
32471: GO 32544
// for i in list do
32473: LD_ADDR_VAR 0 6
32477: PUSH
32478: LD_VAR 0 13
32482: PUSH
32483: FOR_IN
32484: IFFALSE 32542
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32486: LD_VAR 0 1
32490: PPUSH
32491: LD_STRING M
32493: PUSH
32494: LD_VAR 0 6
32498: PUSH
32499: LD_INT 1
32501: ARRAY
32502: PUSH
32503: LD_VAR 0 6
32507: PUSH
32508: LD_INT 2
32510: ARRAY
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: PPUSH
32536: CALL_OW 447
32540: GO 32483
32542: POP
32543: POP
// end ;
32544: LD_VAR 0 5
32548: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32549: LD_INT 0
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL_OW 302
32569: NOT
32570: PUSH
32571: LD_VAR 0 2
32575: PPUSH
32576: LD_VAR 0 3
32580: PPUSH
32581: CALL_OW 488
32585: NOT
32586: OR
32587: PUSH
32588: LD_VAR 0 4
32592: NOT
32593: OR
32594: IFFALSE 32598
// exit ;
32596: GO 32946
// list := [ ] ;
32598: LD_ADDR_VAR 0 13
32602: PUSH
32603: EMPTY
32604: ST_TO_ADDR
// if x - r < 0 then
32605: LD_VAR 0 2
32609: PUSH
32610: LD_VAR 0 4
32614: MINUS
32615: PUSH
32616: LD_INT 0
32618: LESS
32619: IFFALSE 32631
// min_x := 0 else
32621: LD_ADDR_VAR 0 7
32625: PUSH
32626: LD_INT 0
32628: ST_TO_ADDR
32629: GO 32647
// min_x := x - r ;
32631: LD_ADDR_VAR 0 7
32635: PUSH
32636: LD_VAR 0 2
32640: PUSH
32641: LD_VAR 0 4
32645: MINUS
32646: ST_TO_ADDR
// if y - r < 0 then
32647: LD_VAR 0 3
32651: PUSH
32652: LD_VAR 0 4
32656: MINUS
32657: PUSH
32658: LD_INT 0
32660: LESS
32661: IFFALSE 32673
// min_y := 0 else
32663: LD_ADDR_VAR 0 8
32667: PUSH
32668: LD_INT 0
32670: ST_TO_ADDR
32671: GO 32689
// min_y := y - r ;
32673: LD_ADDR_VAR 0 8
32677: PUSH
32678: LD_VAR 0 3
32682: PUSH
32683: LD_VAR 0 4
32687: MINUS
32688: ST_TO_ADDR
// max_x := x + r ;
32689: LD_ADDR_VAR 0 9
32693: PUSH
32694: LD_VAR 0 2
32698: PUSH
32699: LD_VAR 0 4
32703: PLUS
32704: ST_TO_ADDR
// max_y := y + r ;
32705: LD_ADDR_VAR 0 10
32709: PUSH
32710: LD_VAR 0 3
32714: PUSH
32715: LD_VAR 0 4
32719: PLUS
32720: ST_TO_ADDR
// for _x = min_x to max_x do
32721: LD_ADDR_VAR 0 11
32725: PUSH
32726: DOUBLE
32727: LD_VAR 0 7
32731: DEC
32732: ST_TO_ADDR
32733: LD_VAR 0 9
32737: PUSH
32738: FOR_TO
32739: IFFALSE 32856
// for _y = min_y to max_y do
32741: LD_ADDR_VAR 0 12
32745: PUSH
32746: DOUBLE
32747: LD_VAR 0 8
32751: DEC
32752: ST_TO_ADDR
32753: LD_VAR 0 10
32757: PUSH
32758: FOR_TO
32759: IFFALSE 32852
// begin if not ValidHex ( _x , _y ) then
32761: LD_VAR 0 11
32765: PPUSH
32766: LD_VAR 0 12
32770: PPUSH
32771: CALL_OW 488
32775: NOT
32776: IFFALSE 32780
// continue ;
32778: GO 32758
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32780: LD_VAR 0 11
32784: PPUSH
32785: LD_VAR 0 12
32789: PPUSH
32790: CALL_OW 351
32794: PUSH
32795: LD_VAR 0 11
32799: PPUSH
32800: LD_VAR 0 12
32804: PPUSH
32805: CALL_OW 554
32809: AND
32810: IFFALSE 32850
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32812: LD_ADDR_VAR 0 13
32816: PUSH
32817: LD_VAR 0 13
32821: PPUSH
32822: LD_VAR 0 13
32826: PUSH
32827: LD_INT 1
32829: PLUS
32830: PPUSH
32831: LD_VAR 0 11
32835: PUSH
32836: LD_VAR 0 12
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PPUSH
32845: CALL_OW 2
32849: ST_TO_ADDR
// end ;
32850: GO 32758
32852: POP
32853: POP
32854: GO 32738
32856: POP
32857: POP
// if not list then
32858: LD_VAR 0 13
32862: NOT
32863: IFFALSE 32867
// exit ;
32865: GO 32946
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
32867: LD_ADDR_VAR 0 13
32871: PUSH
32872: LD_VAR 0 1
32876: PPUSH
32877: LD_VAR 0 13
32881: PPUSH
32882: LD_INT 1
32884: PPUSH
32885: LD_INT 1
32887: PPUSH
32888: CALL 41559 0 4
32892: ST_TO_ADDR
// ComStop ( flame ) ;
32893: LD_VAR 0 1
32897: PPUSH
32898: CALL_OW 141
// for i in list do
32902: LD_ADDR_VAR 0 6
32906: PUSH
32907: LD_VAR 0 13
32911: PUSH
32912: FOR_IN
32913: IFFALSE 32944
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
32915: LD_VAR 0 1
32919: PPUSH
32920: LD_VAR 0 6
32924: PUSH
32925: LD_INT 1
32927: ARRAY
32928: PPUSH
32929: LD_VAR 0 6
32933: PUSH
32934: LD_INT 2
32936: ARRAY
32937: PPUSH
32938: CALL_OW 176
32942: GO 32912
32944: POP
32945: POP
// end ;
32946: LD_VAR 0 5
32950: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32951: LD_EXP 102
32955: NOT
32956: IFFALSE 33006
32958: GO 32960
32960: DISABLE
// begin initHack := true ;
32961: LD_ADDR_EXP 102
32965: PUSH
32966: LD_INT 1
32968: ST_TO_ADDR
// hackTanks := [ ] ;
32969: LD_ADDR_EXP 103
32973: PUSH
32974: EMPTY
32975: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32976: LD_ADDR_EXP 104
32980: PUSH
32981: EMPTY
32982: ST_TO_ADDR
// hackLimit := 3 ;
32983: LD_ADDR_EXP 105
32987: PUSH
32988: LD_INT 3
32990: ST_TO_ADDR
// hackDist := 12 ;
32991: LD_ADDR_EXP 106
32995: PUSH
32996: LD_INT 12
32998: ST_TO_ADDR
// hackCounter := [ ] ;
32999: LD_ADDR_EXP 107
33003: PUSH
33004: EMPTY
33005: ST_TO_ADDR
// end ;
33006: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33007: LD_EXP 102
33011: PUSH
33012: LD_INT 34
33014: PUSH
33015: LD_INT 99
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PPUSH
33022: CALL_OW 69
33026: AND
33027: IFFALSE 33280
33029: GO 33031
33031: DISABLE
33032: LD_INT 0
33034: PPUSH
33035: PPUSH
// begin enable ;
33036: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33037: LD_ADDR_VAR 0 1
33041: PUSH
33042: LD_INT 34
33044: PUSH
33045: LD_INT 99
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PPUSH
33052: CALL_OW 69
33056: PUSH
33057: FOR_IN
33058: IFFALSE 33278
// begin if not i in hackTanks then
33060: LD_VAR 0 1
33064: PUSH
33065: LD_EXP 103
33069: IN
33070: NOT
33071: IFFALSE 33154
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33073: LD_ADDR_EXP 103
33077: PUSH
33078: LD_EXP 103
33082: PPUSH
33083: LD_EXP 103
33087: PUSH
33088: LD_INT 1
33090: PLUS
33091: PPUSH
33092: LD_VAR 0 1
33096: PPUSH
33097: CALL_OW 1
33101: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33102: LD_ADDR_EXP 104
33106: PUSH
33107: LD_EXP 104
33111: PPUSH
33112: LD_EXP 104
33116: PUSH
33117: LD_INT 1
33119: PLUS
33120: PPUSH
33121: EMPTY
33122: PPUSH
33123: CALL_OW 1
33127: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33128: LD_ADDR_EXP 107
33132: PUSH
33133: LD_EXP 107
33137: PPUSH
33138: LD_EXP 107
33142: PUSH
33143: LD_INT 1
33145: PLUS
33146: PPUSH
33147: EMPTY
33148: PPUSH
33149: CALL_OW 1
33153: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33154: LD_VAR 0 1
33158: PPUSH
33159: CALL_OW 302
33163: NOT
33164: IFFALSE 33177
// begin HackUnlinkAll ( i ) ;
33166: LD_VAR 0 1
33170: PPUSH
33171: CALL 33283 0 1
// continue ;
33175: GO 33057
// end ; HackCheckCapturedStatus ( i ) ;
33177: LD_VAR 0 1
33181: PPUSH
33182: CALL 33726 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33186: LD_ADDR_VAR 0 2
33190: PUSH
33191: LD_INT 81
33193: PUSH
33194: LD_VAR 0 1
33198: PPUSH
33199: CALL_OW 255
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 33
33210: PUSH
33211: LD_INT 3
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 91
33220: PUSH
33221: LD_VAR 0 1
33225: PUSH
33226: LD_EXP 106
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 50
33238: PUSH
33239: EMPTY
33240: LIST
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: PPUSH
33248: CALL_OW 69
33252: ST_TO_ADDR
// if not tmp then
33253: LD_VAR 0 2
33257: NOT
33258: IFFALSE 33262
// continue ;
33260: GO 33057
// HackLink ( i , tmp ) ;
33262: LD_VAR 0 1
33266: PPUSH
33267: LD_VAR 0 2
33271: PPUSH
33272: CALL 33419 0 2
// end ;
33276: GO 33057
33278: POP
33279: POP
// end ;
33280: PPOPN 2
33282: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33283: LD_INT 0
33285: PPUSH
33286: PPUSH
33287: PPUSH
// if not hack in hackTanks then
33288: LD_VAR 0 1
33292: PUSH
33293: LD_EXP 103
33297: IN
33298: NOT
33299: IFFALSE 33303
// exit ;
33301: GO 33414
// index := GetElementIndex ( hackTanks , hack ) ;
33303: LD_ADDR_VAR 0 4
33307: PUSH
33308: LD_EXP 103
33312: PPUSH
33313: LD_VAR 0 1
33317: PPUSH
33318: CALL 40856 0 2
33322: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33323: LD_EXP 104
33327: PUSH
33328: LD_VAR 0 4
33332: ARRAY
33333: IFFALSE 33414
// begin for i in hackTanksCaptured [ index ] do
33335: LD_ADDR_VAR 0 3
33339: PUSH
33340: LD_EXP 104
33344: PUSH
33345: LD_VAR 0 4
33349: ARRAY
33350: PUSH
33351: FOR_IN
33352: IFFALSE 33378
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33354: LD_VAR 0 3
33358: PUSH
33359: LD_INT 1
33361: ARRAY
33362: PPUSH
33363: LD_VAR 0 3
33367: PUSH
33368: LD_INT 2
33370: ARRAY
33371: PPUSH
33372: CALL_OW 235
33376: GO 33351
33378: POP
33379: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33380: LD_ADDR_EXP 104
33384: PUSH
33385: LD_EXP 104
33389: PPUSH
33390: LD_VAR 0 4
33394: PPUSH
33395: EMPTY
33396: PPUSH
33397: CALL_OW 1
33401: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33402: LD_VAR 0 1
33406: PPUSH
33407: LD_INT 0
33409: PPUSH
33410: CALL_OW 505
// end ; end ;
33414: LD_VAR 0 2
33418: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33419: LD_INT 0
33421: PPUSH
33422: PPUSH
33423: PPUSH
// if not hack in hackTanks or not vehicles then
33424: LD_VAR 0 1
33428: PUSH
33429: LD_EXP 103
33433: IN
33434: NOT
33435: PUSH
33436: LD_VAR 0 2
33440: NOT
33441: OR
33442: IFFALSE 33446
// exit ;
33444: GO 33721
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33446: LD_ADDR_VAR 0 2
33450: PUSH
33451: LD_VAR 0 1
33455: PPUSH
33456: LD_VAR 0 2
33460: PPUSH
33461: LD_INT 1
33463: PPUSH
33464: LD_INT 1
33466: PPUSH
33467: CALL 41506 0 4
33471: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33472: LD_ADDR_VAR 0 5
33476: PUSH
33477: LD_EXP 103
33481: PPUSH
33482: LD_VAR 0 1
33486: PPUSH
33487: CALL 40856 0 2
33491: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33492: LD_EXP 104
33496: PUSH
33497: LD_VAR 0 5
33501: ARRAY
33502: PUSH
33503: LD_EXP 105
33507: LESS
33508: IFFALSE 33697
// begin for i := 1 to vehicles do
33510: LD_ADDR_VAR 0 4
33514: PUSH
33515: DOUBLE
33516: LD_INT 1
33518: DEC
33519: ST_TO_ADDR
33520: LD_VAR 0 2
33524: PUSH
33525: FOR_TO
33526: IFFALSE 33695
// begin if hackTanksCaptured [ index ] = hackLimit then
33528: LD_EXP 104
33532: PUSH
33533: LD_VAR 0 5
33537: ARRAY
33538: PUSH
33539: LD_EXP 105
33543: EQUAL
33544: IFFALSE 33548
// break ;
33546: GO 33695
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33548: LD_ADDR_EXP 107
33552: PUSH
33553: LD_EXP 107
33557: PPUSH
33558: LD_VAR 0 5
33562: PPUSH
33563: LD_EXP 107
33567: PUSH
33568: LD_VAR 0 5
33572: ARRAY
33573: PUSH
33574: LD_INT 1
33576: PLUS
33577: PPUSH
33578: CALL_OW 1
33582: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33583: LD_ADDR_EXP 104
33587: PUSH
33588: LD_EXP 104
33592: PPUSH
33593: LD_VAR 0 5
33597: PUSH
33598: LD_EXP 104
33602: PUSH
33603: LD_VAR 0 5
33607: ARRAY
33608: PUSH
33609: LD_INT 1
33611: PLUS
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PPUSH
33617: LD_VAR 0 2
33621: PUSH
33622: LD_VAR 0 4
33626: ARRAY
33627: PUSH
33628: LD_VAR 0 2
33632: PUSH
33633: LD_VAR 0 4
33637: ARRAY
33638: PPUSH
33639: CALL_OW 255
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PPUSH
33648: CALL 41071 0 3
33652: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33653: LD_VAR 0 2
33657: PUSH
33658: LD_VAR 0 4
33662: ARRAY
33663: PPUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 255
33673: PPUSH
33674: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33678: LD_VAR 0 2
33682: PUSH
33683: LD_VAR 0 4
33687: ARRAY
33688: PPUSH
33689: CALL_OW 141
// end ;
33693: GO 33525
33695: POP
33696: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33697: LD_VAR 0 1
33701: PPUSH
33702: LD_EXP 104
33706: PUSH
33707: LD_VAR 0 5
33711: ARRAY
33712: PUSH
33713: LD_INT 0
33715: PLUS
33716: PPUSH
33717: CALL_OW 505
// end ;
33721: LD_VAR 0 3
33725: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33726: LD_INT 0
33728: PPUSH
33729: PPUSH
33730: PPUSH
33731: PPUSH
// if not hack in hackTanks then
33732: LD_VAR 0 1
33736: PUSH
33737: LD_EXP 103
33741: IN
33742: NOT
33743: IFFALSE 33747
// exit ;
33745: GO 33987
// index := GetElementIndex ( hackTanks , hack ) ;
33747: LD_ADDR_VAR 0 4
33751: PUSH
33752: LD_EXP 103
33756: PPUSH
33757: LD_VAR 0 1
33761: PPUSH
33762: CALL 40856 0 2
33766: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: DOUBLE
33773: LD_EXP 104
33777: PUSH
33778: LD_VAR 0 4
33782: ARRAY
33783: INC
33784: ST_TO_ADDR
33785: LD_INT 1
33787: PUSH
33788: FOR_DOWNTO
33789: IFFALSE 33961
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33791: LD_ADDR_VAR 0 5
33795: PUSH
33796: LD_EXP 104
33800: PUSH
33801: LD_VAR 0 4
33805: ARRAY
33806: PUSH
33807: LD_VAR 0 3
33811: ARRAY
33812: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33813: LD_VAR 0 5
33817: PUSH
33818: LD_INT 1
33820: ARRAY
33821: PPUSH
33822: CALL_OW 302
33826: NOT
33827: PUSH
33828: LD_VAR 0 5
33832: PUSH
33833: LD_INT 1
33835: ARRAY
33836: PPUSH
33837: CALL_OW 255
33841: PUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 255
33851: NONEQUAL
33852: OR
33853: IFFALSE 33959
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33855: LD_VAR 0 5
33859: PUSH
33860: LD_INT 1
33862: ARRAY
33863: PPUSH
33864: CALL_OW 305
33868: PUSH
33869: LD_VAR 0 5
33873: PUSH
33874: LD_INT 1
33876: ARRAY
33877: PPUSH
33878: CALL_OW 255
33882: PUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 255
33892: EQUAL
33893: AND
33894: IFFALSE 33918
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33896: LD_VAR 0 5
33900: PUSH
33901: LD_INT 1
33903: ARRAY
33904: PPUSH
33905: LD_VAR 0 5
33909: PUSH
33910: LD_INT 2
33912: ARRAY
33913: PPUSH
33914: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33918: LD_ADDR_EXP 104
33922: PUSH
33923: LD_EXP 104
33927: PPUSH
33928: LD_VAR 0 4
33932: PPUSH
33933: LD_EXP 104
33937: PUSH
33938: LD_VAR 0 4
33942: ARRAY
33943: PPUSH
33944: LD_VAR 0 3
33948: PPUSH
33949: CALL_OW 3
33953: PPUSH
33954: CALL_OW 1
33958: ST_TO_ADDR
// end ; end ;
33959: GO 33788
33961: POP
33962: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33963: LD_VAR 0 1
33967: PPUSH
33968: LD_EXP 104
33972: PUSH
33973: LD_VAR 0 4
33977: ARRAY
33978: PUSH
33979: LD_INT 0
33981: PLUS
33982: PPUSH
33983: CALL_OW 505
// end ;
33987: LD_VAR 0 2
33991: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33992: LD_INT 0
33994: PPUSH
33995: PPUSH
33996: PPUSH
33997: PPUSH
// if not hack in hackTanks then
33998: LD_VAR 0 1
34002: PUSH
34003: LD_EXP 103
34007: IN
34008: NOT
34009: IFFALSE 34013
// exit ;
34011: GO 34098
// index := GetElementIndex ( hackTanks , hack ) ;
34013: LD_ADDR_VAR 0 5
34017: PUSH
34018: LD_EXP 103
34022: PPUSH
34023: LD_VAR 0 1
34027: PPUSH
34028: CALL 40856 0 2
34032: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34033: LD_ADDR_VAR 0 4
34037: PUSH
34038: DOUBLE
34039: LD_INT 1
34041: DEC
34042: ST_TO_ADDR
34043: LD_EXP 104
34047: PUSH
34048: LD_VAR 0 5
34052: ARRAY
34053: PUSH
34054: FOR_TO
34055: IFFALSE 34096
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34057: LD_EXP 104
34061: PUSH
34062: LD_VAR 0 5
34066: ARRAY
34067: PUSH
34068: LD_VAR 0 4
34072: ARRAY
34073: PUSH
34074: LD_INT 1
34076: ARRAY
34077: PUSH
34078: LD_VAR 0 2
34082: EQUAL
34083: IFFALSE 34094
// KillUnit ( vehicle ) ;
34085: LD_VAR 0 2
34089: PPUSH
34090: CALL_OW 66
34094: GO 34054
34096: POP
34097: POP
// end ;
34098: LD_VAR 0 3
34102: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34103: LD_EXP 108
34107: NOT
34108: IFFALSE 34143
34110: GO 34112
34112: DISABLE
// begin initMiner := true ;
34113: LD_ADDR_EXP 108
34117: PUSH
34118: LD_INT 1
34120: ST_TO_ADDR
// minersList := [ ] ;
34121: LD_ADDR_EXP 109
34125: PUSH
34126: EMPTY
34127: ST_TO_ADDR
// minerMinesList := [ ] ;
34128: LD_ADDR_EXP 110
34132: PUSH
34133: EMPTY
34134: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34135: LD_ADDR_EXP 111
34139: PUSH
34140: LD_INT 5
34142: ST_TO_ADDR
// end ;
34143: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34144: LD_EXP 108
34148: PUSH
34149: LD_INT 34
34151: PUSH
34152: LD_INT 81
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PPUSH
34159: CALL_OW 69
34163: AND
34164: IFFALSE 34625
34166: GO 34168
34168: DISABLE
34169: LD_INT 0
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
// begin enable ;
34175: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34176: LD_ADDR_VAR 0 1
34180: PUSH
34181: LD_INT 34
34183: PUSH
34184: LD_INT 81
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PPUSH
34191: CALL_OW 69
34195: PUSH
34196: FOR_IN
34197: IFFALSE 34269
// begin if not i in minersList then
34199: LD_VAR 0 1
34203: PUSH
34204: LD_EXP 109
34208: IN
34209: NOT
34210: IFFALSE 34267
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34212: LD_ADDR_EXP 109
34216: PUSH
34217: LD_EXP 109
34221: PPUSH
34222: LD_EXP 109
34226: PUSH
34227: LD_INT 1
34229: PLUS
34230: PPUSH
34231: LD_VAR 0 1
34235: PPUSH
34236: CALL_OW 1
34240: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34241: LD_ADDR_EXP 110
34245: PUSH
34246: LD_EXP 110
34250: PPUSH
34251: LD_EXP 110
34255: PUSH
34256: LD_INT 1
34258: PLUS
34259: PPUSH
34260: EMPTY
34261: PPUSH
34262: CALL_OW 1
34266: ST_TO_ADDR
// end end ;
34267: GO 34196
34269: POP
34270: POP
// for i := minerMinesList downto 1 do
34271: LD_ADDR_VAR 0 1
34275: PUSH
34276: DOUBLE
34277: LD_EXP 110
34281: INC
34282: ST_TO_ADDR
34283: LD_INT 1
34285: PUSH
34286: FOR_DOWNTO
34287: IFFALSE 34623
// begin if IsLive ( minersList [ i ] ) then
34289: LD_EXP 109
34293: PUSH
34294: LD_VAR 0 1
34298: ARRAY
34299: PPUSH
34300: CALL_OW 300
34304: IFFALSE 34332
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34306: LD_EXP 109
34310: PUSH
34311: LD_VAR 0 1
34315: ARRAY
34316: PPUSH
34317: LD_EXP 110
34321: PUSH
34322: LD_VAR 0 1
34326: ARRAY
34327: PPUSH
34328: CALL_OW 505
// if not minerMinesList [ i ] then
34332: LD_EXP 110
34336: PUSH
34337: LD_VAR 0 1
34341: ARRAY
34342: NOT
34343: IFFALSE 34347
// continue ;
34345: GO 34286
// for j := minerMinesList [ i ] downto 1 do
34347: LD_ADDR_VAR 0 2
34351: PUSH
34352: DOUBLE
34353: LD_EXP 110
34357: PUSH
34358: LD_VAR 0 1
34362: ARRAY
34363: INC
34364: ST_TO_ADDR
34365: LD_INT 1
34367: PUSH
34368: FOR_DOWNTO
34369: IFFALSE 34619
// begin side := GetSide ( minersList [ i ] ) ;
34371: LD_ADDR_VAR 0 3
34375: PUSH
34376: LD_EXP 109
34380: PUSH
34381: LD_VAR 0 1
34385: ARRAY
34386: PPUSH
34387: CALL_OW 255
34391: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34392: LD_ADDR_VAR 0 4
34396: PUSH
34397: LD_EXP 110
34401: PUSH
34402: LD_VAR 0 1
34406: ARRAY
34407: PUSH
34408: LD_VAR 0 2
34412: ARRAY
34413: PUSH
34414: LD_INT 1
34416: ARRAY
34417: PPUSH
34418: LD_EXP 110
34422: PUSH
34423: LD_VAR 0 1
34427: ARRAY
34428: PUSH
34429: LD_VAR 0 2
34433: ARRAY
34434: PUSH
34435: LD_INT 2
34437: ARRAY
34438: PPUSH
34439: CALL_OW 428
34443: ST_TO_ADDR
// if not tmp then
34444: LD_VAR 0 4
34448: NOT
34449: IFFALSE 34453
// continue ;
34451: GO 34368
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34453: LD_VAR 0 4
34457: PUSH
34458: LD_INT 81
34460: PUSH
34461: LD_VAR 0 3
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PPUSH
34470: CALL_OW 69
34474: IN
34475: PUSH
34476: LD_EXP 110
34480: PUSH
34481: LD_VAR 0 1
34485: ARRAY
34486: PUSH
34487: LD_VAR 0 2
34491: ARRAY
34492: PUSH
34493: LD_INT 1
34495: ARRAY
34496: PPUSH
34497: LD_EXP 110
34501: PUSH
34502: LD_VAR 0 1
34506: ARRAY
34507: PUSH
34508: LD_VAR 0 2
34512: ARRAY
34513: PUSH
34514: LD_INT 2
34516: ARRAY
34517: PPUSH
34518: CALL_OW 458
34522: AND
34523: IFFALSE 34617
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34525: LD_EXP 110
34529: PUSH
34530: LD_VAR 0 1
34534: ARRAY
34535: PUSH
34536: LD_VAR 0 2
34540: ARRAY
34541: PUSH
34542: LD_INT 1
34544: ARRAY
34545: PPUSH
34546: LD_EXP 110
34550: PUSH
34551: LD_VAR 0 1
34555: ARRAY
34556: PUSH
34557: LD_VAR 0 2
34561: ARRAY
34562: PUSH
34563: LD_INT 2
34565: ARRAY
34566: PPUSH
34567: LD_VAR 0 3
34571: PPUSH
34572: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34576: LD_ADDR_EXP 110
34580: PUSH
34581: LD_EXP 110
34585: PPUSH
34586: LD_VAR 0 1
34590: PPUSH
34591: LD_EXP 110
34595: PUSH
34596: LD_VAR 0 1
34600: ARRAY
34601: PPUSH
34602: LD_VAR 0 2
34606: PPUSH
34607: CALL_OW 3
34611: PPUSH
34612: CALL_OW 1
34616: ST_TO_ADDR
// end ; end ;
34617: GO 34368
34619: POP
34620: POP
// end ;
34621: GO 34286
34623: POP
34624: POP
// end ;
34625: PPOPN 4
34627: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34628: LD_INT 0
34630: PPUSH
34631: PPUSH
// result := false ;
34632: LD_ADDR_VAR 0 4
34636: PUSH
34637: LD_INT 0
34639: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34640: LD_VAR 0 1
34644: PPUSH
34645: CALL_OW 264
34649: PUSH
34650: LD_INT 81
34652: EQUAL
34653: NOT
34654: IFFALSE 34658
// exit ;
34656: GO 34898
// index := GetElementIndex ( minersList , unit ) ;
34658: LD_ADDR_VAR 0 5
34662: PUSH
34663: LD_EXP 109
34667: PPUSH
34668: LD_VAR 0 1
34672: PPUSH
34673: CALL 40856 0 2
34677: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34678: LD_EXP 110
34682: PUSH
34683: LD_VAR 0 5
34687: ARRAY
34688: PUSH
34689: LD_EXP 111
34693: GREATEREQUAL
34694: IFFALSE 34698
// exit ;
34696: GO 34898
// ComMoveXY ( unit , x , y ) ;
34698: LD_VAR 0 1
34702: PPUSH
34703: LD_VAR 0 2
34707: PPUSH
34708: LD_VAR 0 3
34712: PPUSH
34713: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34717: LD_INT 35
34719: PPUSH
34720: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34724: LD_VAR 0 1
34728: PPUSH
34729: LD_VAR 0 2
34733: PPUSH
34734: LD_VAR 0 3
34738: PPUSH
34739: CALL 72608 0 3
34743: NOT
34744: PUSH
34745: LD_VAR 0 1
34749: PPUSH
34750: CALL_OW 314
34754: AND
34755: IFFALSE 34759
// exit ;
34757: GO 34898
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34759: LD_VAR 0 2
34763: PPUSH
34764: LD_VAR 0 3
34768: PPUSH
34769: CALL_OW 428
34773: PUSH
34774: LD_VAR 0 1
34778: EQUAL
34779: PUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 314
34789: NOT
34790: AND
34791: IFFALSE 34717
// PlaySoundXY ( x , y , PlantMine ) ;
34793: LD_VAR 0 2
34797: PPUSH
34798: LD_VAR 0 3
34802: PPUSH
34803: LD_STRING PlantMine
34805: PPUSH
34806: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34810: LD_VAR 0 2
34814: PPUSH
34815: LD_VAR 0 3
34819: PPUSH
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL_OW 255
34829: PPUSH
34830: LD_INT 0
34832: PPUSH
34833: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34837: LD_ADDR_EXP 110
34841: PUSH
34842: LD_EXP 110
34846: PPUSH
34847: LD_VAR 0 5
34851: PUSH
34852: LD_EXP 110
34856: PUSH
34857: LD_VAR 0 5
34861: ARRAY
34862: PUSH
34863: LD_INT 1
34865: PLUS
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PPUSH
34871: LD_VAR 0 2
34875: PUSH
34876: LD_VAR 0 3
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PPUSH
34885: CALL 41071 0 3
34889: ST_TO_ADDR
// result := true ;
34890: LD_ADDR_VAR 0 4
34894: PUSH
34895: LD_INT 1
34897: ST_TO_ADDR
// end ;
34898: LD_VAR 0 4
34902: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34903: LD_INT 0
34905: PPUSH
34906: PPUSH
34907: PPUSH
// if not unit in minersList then
34908: LD_VAR 0 1
34912: PUSH
34913: LD_EXP 109
34917: IN
34918: NOT
34919: IFFALSE 34923
// exit ;
34921: GO 35315
// index := GetElementIndex ( minersList , unit ) ;
34923: LD_ADDR_VAR 0 6
34927: PUSH
34928: LD_EXP 109
34932: PPUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL 40856 0 2
34942: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34943: LD_ADDR_VAR 0 5
34947: PUSH
34948: DOUBLE
34949: LD_EXP 110
34953: PUSH
34954: LD_VAR 0 6
34958: ARRAY
34959: INC
34960: ST_TO_ADDR
34961: LD_INT 1
34963: PUSH
34964: FOR_DOWNTO
34965: IFFALSE 35126
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34967: LD_EXP 110
34971: PUSH
34972: LD_VAR 0 6
34976: ARRAY
34977: PUSH
34978: LD_VAR 0 5
34982: ARRAY
34983: PUSH
34984: LD_INT 1
34986: ARRAY
34987: PUSH
34988: LD_VAR 0 2
34992: EQUAL
34993: PUSH
34994: LD_EXP 110
34998: PUSH
34999: LD_VAR 0 6
35003: ARRAY
35004: PUSH
35005: LD_VAR 0 5
35009: ARRAY
35010: PUSH
35011: LD_INT 2
35013: ARRAY
35014: PUSH
35015: LD_VAR 0 3
35019: EQUAL
35020: AND
35021: IFFALSE 35124
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35023: LD_EXP 110
35027: PUSH
35028: LD_VAR 0 6
35032: ARRAY
35033: PUSH
35034: LD_VAR 0 5
35038: ARRAY
35039: PUSH
35040: LD_INT 1
35042: ARRAY
35043: PPUSH
35044: LD_EXP 110
35048: PUSH
35049: LD_VAR 0 6
35053: ARRAY
35054: PUSH
35055: LD_VAR 0 5
35059: ARRAY
35060: PUSH
35061: LD_INT 2
35063: ARRAY
35064: PPUSH
35065: LD_VAR 0 1
35069: PPUSH
35070: CALL_OW 255
35074: PPUSH
35075: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35079: LD_ADDR_EXP 110
35083: PUSH
35084: LD_EXP 110
35088: PPUSH
35089: LD_VAR 0 6
35093: PPUSH
35094: LD_EXP 110
35098: PUSH
35099: LD_VAR 0 6
35103: ARRAY
35104: PPUSH
35105: LD_VAR 0 5
35109: PPUSH
35110: CALL_OW 3
35114: PPUSH
35115: CALL_OW 1
35119: ST_TO_ADDR
// exit ;
35120: POP
35121: POP
35122: GO 35315
// end ; end ;
35124: GO 34964
35126: POP
35127: POP
// for i := minerMinesList [ index ] downto 1 do
35128: LD_ADDR_VAR 0 5
35132: PUSH
35133: DOUBLE
35134: LD_EXP 110
35138: PUSH
35139: LD_VAR 0 6
35143: ARRAY
35144: INC
35145: ST_TO_ADDR
35146: LD_INT 1
35148: PUSH
35149: FOR_DOWNTO
35150: IFFALSE 35313
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35152: LD_EXP 110
35156: PUSH
35157: LD_VAR 0 6
35161: ARRAY
35162: PUSH
35163: LD_VAR 0 5
35167: ARRAY
35168: PUSH
35169: LD_INT 1
35171: ARRAY
35172: PPUSH
35173: LD_EXP 110
35177: PUSH
35178: LD_VAR 0 6
35182: ARRAY
35183: PUSH
35184: LD_VAR 0 5
35188: ARRAY
35189: PUSH
35190: LD_INT 2
35192: ARRAY
35193: PPUSH
35194: LD_VAR 0 2
35198: PPUSH
35199: LD_VAR 0 3
35203: PPUSH
35204: CALL_OW 298
35208: PUSH
35209: LD_INT 6
35211: LESS
35212: IFFALSE 35311
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35214: LD_EXP 110
35218: PUSH
35219: LD_VAR 0 6
35223: ARRAY
35224: PUSH
35225: LD_VAR 0 5
35229: ARRAY
35230: PUSH
35231: LD_INT 1
35233: ARRAY
35234: PPUSH
35235: LD_EXP 110
35239: PUSH
35240: LD_VAR 0 6
35244: ARRAY
35245: PUSH
35246: LD_VAR 0 5
35250: ARRAY
35251: PUSH
35252: LD_INT 2
35254: ARRAY
35255: PPUSH
35256: LD_VAR 0 1
35260: PPUSH
35261: CALL_OW 255
35265: PPUSH
35266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35270: LD_ADDR_EXP 110
35274: PUSH
35275: LD_EXP 110
35279: PPUSH
35280: LD_VAR 0 6
35284: PPUSH
35285: LD_EXP 110
35289: PUSH
35290: LD_VAR 0 6
35294: ARRAY
35295: PPUSH
35296: LD_VAR 0 5
35300: PPUSH
35301: CALL_OW 3
35305: PPUSH
35306: CALL_OW 1
35310: ST_TO_ADDR
// end ; end ;
35311: GO 35149
35313: POP
35314: POP
// end ;
35315: LD_VAR 0 4
35319: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35320: LD_INT 0
35322: PPUSH
35323: PPUSH
35324: PPUSH
35325: PPUSH
35326: PPUSH
35327: PPUSH
35328: PPUSH
35329: PPUSH
35330: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35331: LD_VAR 0 1
35335: PPUSH
35336: CALL_OW 264
35340: PUSH
35341: LD_INT 81
35343: EQUAL
35344: NOT
35345: PUSH
35346: LD_VAR 0 1
35350: PUSH
35351: LD_EXP 109
35355: IN
35356: NOT
35357: OR
35358: IFFALSE 35362
// exit ;
35360: GO 35684
// index := GetElementIndex ( minersList , unit ) ;
35362: LD_ADDR_VAR 0 6
35366: PUSH
35367: LD_EXP 109
35371: PPUSH
35372: LD_VAR 0 1
35376: PPUSH
35377: CALL 40856 0 2
35381: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35382: LD_ADDR_VAR 0 8
35386: PUSH
35387: LD_EXP 111
35391: PUSH
35392: LD_EXP 110
35396: PUSH
35397: LD_VAR 0 6
35401: ARRAY
35402: MINUS
35403: ST_TO_ADDR
// if not minesFreeAmount then
35404: LD_VAR 0 8
35408: NOT
35409: IFFALSE 35413
// exit ;
35411: GO 35684
// tmp := [ ] ;
35413: LD_ADDR_VAR 0 7
35417: PUSH
35418: EMPTY
35419: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35420: LD_ADDR_VAR 0 5
35424: PUSH
35425: DOUBLE
35426: LD_INT 1
35428: DEC
35429: ST_TO_ADDR
35430: LD_VAR 0 8
35434: PUSH
35435: FOR_TO
35436: IFFALSE 35631
// begin _d := rand ( 0 , 5 ) ;
35438: LD_ADDR_VAR 0 11
35442: PUSH
35443: LD_INT 0
35445: PPUSH
35446: LD_INT 5
35448: PPUSH
35449: CALL_OW 12
35453: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35454: LD_ADDR_VAR 0 12
35458: PUSH
35459: LD_INT 2
35461: PPUSH
35462: LD_INT 6
35464: PPUSH
35465: CALL_OW 12
35469: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35470: LD_ADDR_VAR 0 9
35474: PUSH
35475: LD_VAR 0 2
35479: PPUSH
35480: LD_VAR 0 11
35484: PPUSH
35485: LD_VAR 0 12
35489: PPUSH
35490: CALL_OW 272
35494: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35495: LD_ADDR_VAR 0 10
35499: PUSH
35500: LD_VAR 0 3
35504: PPUSH
35505: LD_VAR 0 11
35509: PPUSH
35510: LD_VAR 0 12
35514: PPUSH
35515: CALL_OW 273
35519: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35520: LD_VAR 0 9
35524: PPUSH
35525: LD_VAR 0 10
35529: PPUSH
35530: CALL_OW 488
35534: PUSH
35535: LD_VAR 0 9
35539: PUSH
35540: LD_VAR 0 10
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_VAR 0 7
35553: IN
35554: NOT
35555: AND
35556: PUSH
35557: LD_VAR 0 9
35561: PPUSH
35562: LD_VAR 0 10
35566: PPUSH
35567: CALL_OW 458
35571: NOT
35572: AND
35573: IFFALSE 35615
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35575: LD_ADDR_VAR 0 7
35579: PUSH
35580: LD_VAR 0 7
35584: PPUSH
35585: LD_VAR 0 7
35589: PUSH
35590: LD_INT 1
35592: PLUS
35593: PPUSH
35594: LD_VAR 0 9
35598: PUSH
35599: LD_VAR 0 10
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PPUSH
35608: CALL_OW 1
35612: ST_TO_ADDR
35613: GO 35629
// i := i - 1 ;
35615: LD_ADDR_VAR 0 5
35619: PUSH
35620: LD_VAR 0 5
35624: PUSH
35625: LD_INT 1
35627: MINUS
35628: ST_TO_ADDR
// end ;
35629: GO 35435
35631: POP
35632: POP
// for i in tmp do
35633: LD_ADDR_VAR 0 5
35637: PUSH
35638: LD_VAR 0 7
35642: PUSH
35643: FOR_IN
35644: IFFALSE 35682
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35646: LD_VAR 0 1
35650: PPUSH
35651: LD_VAR 0 5
35655: PUSH
35656: LD_INT 1
35658: ARRAY
35659: PPUSH
35660: LD_VAR 0 5
35664: PUSH
35665: LD_INT 2
35667: ARRAY
35668: PPUSH
35669: CALL 34628 0 3
35673: NOT
35674: IFFALSE 35680
// exit ;
35676: POP
35677: POP
35678: GO 35684
35680: GO 35643
35682: POP
35683: POP
// end ;
35684: LD_VAR 0 4
35688: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35689: LD_INT 0
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
// if not GetClass ( unit ) = class_sniper then
35698: LD_VAR 0 1
35702: PPUSH
35703: CALL_OW 257
35707: PUSH
35708: LD_INT 5
35710: EQUAL
35711: NOT
35712: IFFALSE 35716
// exit ;
35714: GO 36104
// dist := 8 ;
35716: LD_ADDR_VAR 0 5
35720: PUSH
35721: LD_INT 8
35723: ST_TO_ADDR
// viewRange := 12 ;
35724: LD_ADDR_VAR 0 7
35728: PUSH
35729: LD_INT 12
35731: ST_TO_ADDR
// side := GetSide ( unit ) ;
35732: LD_ADDR_VAR 0 6
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: CALL_OW 255
35746: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35747: LD_INT 61
35749: PPUSH
35750: LD_VAR 0 6
35754: PPUSH
35755: CALL_OW 321
35759: PUSH
35760: LD_INT 2
35762: EQUAL
35763: IFFALSE 35773
// viewRange := 16 ;
35765: LD_ADDR_VAR 0 7
35769: PUSH
35770: LD_INT 16
35772: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35773: LD_VAR 0 1
35777: PPUSH
35778: LD_VAR 0 2
35782: PPUSH
35783: LD_VAR 0 3
35787: PPUSH
35788: CALL_OW 297
35792: PUSH
35793: LD_VAR 0 5
35797: GREATER
35798: IFFALSE 35877
// begin ComMoveXY ( unit , x , y ) ;
35800: LD_VAR 0 1
35804: PPUSH
35805: LD_VAR 0 2
35809: PPUSH
35810: LD_VAR 0 3
35814: PPUSH
35815: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35819: LD_INT 35
35821: PPUSH
35822: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35826: LD_VAR 0 1
35830: PPUSH
35831: LD_VAR 0 2
35835: PPUSH
35836: LD_VAR 0 3
35840: PPUSH
35841: CALL 72608 0 3
35845: NOT
35846: IFFALSE 35850
// exit ;
35848: GO 36104
// until GetDistUnitXY ( unit , x , y ) < dist ;
35850: LD_VAR 0 1
35854: PPUSH
35855: LD_VAR 0 2
35859: PPUSH
35860: LD_VAR 0 3
35864: PPUSH
35865: CALL_OW 297
35869: PUSH
35870: LD_VAR 0 5
35874: LESS
35875: IFFALSE 35819
// end ; ComTurnXY ( unit , x , y ) ;
35877: LD_VAR 0 1
35881: PPUSH
35882: LD_VAR 0 2
35886: PPUSH
35887: LD_VAR 0 3
35891: PPUSH
35892: CALL_OW 118
// wait ( 5 ) ;
35896: LD_INT 5
35898: PPUSH
35899: CALL_OW 67
// _d := GetDir ( unit ) ;
35903: LD_ADDR_VAR 0 10
35907: PUSH
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 254
35917: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35918: LD_ADDR_VAR 0 8
35922: PUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 250
35932: PPUSH
35933: LD_VAR 0 10
35937: PPUSH
35938: LD_VAR 0 5
35942: PPUSH
35943: CALL_OW 272
35947: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35948: LD_ADDR_VAR 0 9
35952: PUSH
35953: LD_VAR 0 1
35957: PPUSH
35958: CALL_OW 251
35962: PPUSH
35963: LD_VAR 0 10
35967: PPUSH
35968: LD_VAR 0 5
35972: PPUSH
35973: CALL_OW 273
35977: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35978: LD_VAR 0 8
35982: PPUSH
35983: LD_VAR 0 9
35987: PPUSH
35988: CALL_OW 488
35992: NOT
35993: IFFALSE 35997
// exit ;
35995: GO 36104
// ComAnimCustom ( unit , 1 ) ;
35997: LD_VAR 0 1
36001: PPUSH
36002: LD_INT 1
36004: PPUSH
36005: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36009: LD_VAR 0 8
36013: PPUSH
36014: LD_VAR 0 9
36018: PPUSH
36019: LD_VAR 0 6
36023: PPUSH
36024: LD_VAR 0 7
36028: PPUSH
36029: CALL_OW 330
// repeat wait ( 1 ) ;
36033: LD_INT 1
36035: PPUSH
36036: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 316
36049: PUSH
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 314
36059: OR
36060: PUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 302
36070: NOT
36071: OR
36072: PUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 301
36082: OR
36083: IFFALSE 36033
// RemoveSeeing ( _x , _y , side ) ;
36085: LD_VAR 0 8
36089: PPUSH
36090: LD_VAR 0 9
36094: PPUSH
36095: LD_VAR 0 6
36099: PPUSH
36100: CALL_OW 331
// end ; end_of_file
36104: LD_VAR 0 4
36108: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36109: LD_INT 0
36111: PPUSH
36112: PPUSH
// if exist_mode then
36113: LD_VAR 0 2
36117: IFFALSE 36142
// unit := CreateCharacter ( prefix & ident ) else
36119: LD_ADDR_VAR 0 5
36123: PUSH
36124: LD_VAR 0 3
36128: PUSH
36129: LD_VAR 0 1
36133: STR
36134: PPUSH
36135: CALL_OW 34
36139: ST_TO_ADDR
36140: GO 36157
// unit := NewCharacter ( ident ) ;
36142: LD_ADDR_VAR 0 5
36146: PUSH
36147: LD_VAR 0 1
36151: PPUSH
36152: CALL_OW 25
36156: ST_TO_ADDR
// result := unit ;
36157: LD_ADDR_VAR 0 4
36161: PUSH
36162: LD_VAR 0 5
36166: ST_TO_ADDR
// end ;
36167: LD_VAR 0 4
36171: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36172: LD_INT 0
36174: PPUSH
36175: PPUSH
// if not side or not nation then
36176: LD_VAR 0 1
36180: NOT
36181: PUSH
36182: LD_VAR 0 2
36186: NOT
36187: OR
36188: IFFALSE 36192
// exit ;
36190: GO 36960
// case nation of nation_american :
36192: LD_VAR 0 2
36196: PUSH
36197: LD_INT 1
36199: DOUBLE
36200: EQUAL
36201: IFTRUE 36205
36203: GO 36419
36205: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36206: LD_ADDR_VAR 0 4
36210: PUSH
36211: LD_INT 35
36213: PUSH
36214: LD_INT 45
36216: PUSH
36217: LD_INT 46
36219: PUSH
36220: LD_INT 47
36222: PUSH
36223: LD_INT 82
36225: PUSH
36226: LD_INT 83
36228: PUSH
36229: LD_INT 84
36231: PUSH
36232: LD_INT 85
36234: PUSH
36235: LD_INT 86
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 6
36246: PUSH
36247: LD_INT 15
36249: PUSH
36250: LD_INT 16
36252: PUSH
36253: LD_INT 7
36255: PUSH
36256: LD_INT 12
36258: PUSH
36259: LD_INT 13
36261: PUSH
36262: LD_INT 10
36264: PUSH
36265: LD_INT 14
36267: PUSH
36268: LD_INT 20
36270: PUSH
36271: LD_INT 21
36273: PUSH
36274: LD_INT 22
36276: PUSH
36277: LD_INT 25
36279: PUSH
36280: LD_INT 32
36282: PUSH
36283: LD_INT 27
36285: PUSH
36286: LD_INT 36
36288: PUSH
36289: LD_INT 69
36291: PUSH
36292: LD_INT 39
36294: PUSH
36295: LD_INT 34
36297: PUSH
36298: LD_INT 40
36300: PUSH
36301: LD_INT 48
36303: PUSH
36304: LD_INT 49
36306: PUSH
36307: LD_INT 50
36309: PUSH
36310: LD_INT 51
36312: PUSH
36313: LD_INT 52
36315: PUSH
36316: LD_INT 53
36318: PUSH
36319: LD_INT 54
36321: PUSH
36322: LD_INT 55
36324: PUSH
36325: LD_INT 56
36327: PUSH
36328: LD_INT 57
36330: PUSH
36331: LD_INT 58
36333: PUSH
36334: LD_INT 59
36336: PUSH
36337: LD_INT 60
36339: PUSH
36340: LD_INT 61
36342: PUSH
36343: LD_INT 62
36345: PUSH
36346: LD_INT 80
36348: PUSH
36349: LD_INT 82
36351: PUSH
36352: LD_INT 83
36354: PUSH
36355: LD_INT 84
36357: PUSH
36358: LD_INT 85
36360: PUSH
36361: LD_INT 86
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
36417: GO 36884
36419: LD_INT 2
36421: DOUBLE
36422: EQUAL
36423: IFTRUE 36427
36425: GO 36653
36427: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36428: LD_ADDR_VAR 0 4
36432: PUSH
36433: LD_INT 35
36435: PUSH
36436: LD_INT 45
36438: PUSH
36439: LD_INT 46
36441: PUSH
36442: LD_INT 47
36444: PUSH
36445: LD_INT 82
36447: PUSH
36448: LD_INT 83
36450: PUSH
36451: LD_INT 84
36453: PUSH
36454: LD_INT 85
36456: PUSH
36457: LD_INT 87
36459: PUSH
36460: LD_INT 70
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 11
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 4
36474: PUSH
36475: LD_INT 5
36477: PUSH
36478: LD_INT 6
36480: PUSH
36481: LD_INT 15
36483: PUSH
36484: LD_INT 18
36486: PUSH
36487: LD_INT 7
36489: PUSH
36490: LD_INT 17
36492: PUSH
36493: LD_INT 8
36495: PUSH
36496: LD_INT 20
36498: PUSH
36499: LD_INT 21
36501: PUSH
36502: LD_INT 22
36504: PUSH
36505: LD_INT 72
36507: PUSH
36508: LD_INT 26
36510: PUSH
36511: LD_INT 69
36513: PUSH
36514: LD_INT 39
36516: PUSH
36517: LD_INT 40
36519: PUSH
36520: LD_INT 41
36522: PUSH
36523: LD_INT 42
36525: PUSH
36526: LD_INT 43
36528: PUSH
36529: LD_INT 48
36531: PUSH
36532: LD_INT 49
36534: PUSH
36535: LD_INT 50
36537: PUSH
36538: LD_INT 51
36540: PUSH
36541: LD_INT 52
36543: PUSH
36544: LD_INT 53
36546: PUSH
36547: LD_INT 54
36549: PUSH
36550: LD_INT 55
36552: PUSH
36553: LD_INT 56
36555: PUSH
36556: LD_INT 60
36558: PUSH
36559: LD_INT 61
36561: PUSH
36562: LD_INT 62
36564: PUSH
36565: LD_INT 66
36567: PUSH
36568: LD_INT 67
36570: PUSH
36571: LD_INT 68
36573: PUSH
36574: LD_INT 81
36576: PUSH
36577: LD_INT 82
36579: PUSH
36580: LD_INT 83
36582: PUSH
36583: LD_INT 84
36585: PUSH
36586: LD_INT 85
36588: PUSH
36589: LD_INT 87
36591: PUSH
36592: LD_INT 88
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
36651: GO 36884
36653: LD_INT 3
36655: DOUBLE
36656: EQUAL
36657: IFTRUE 36661
36659: GO 36883
36661: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36662: LD_ADDR_VAR 0 4
36666: PUSH
36667: LD_INT 46
36669: PUSH
36670: LD_INT 47
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: LD_INT 82
36681: PUSH
36682: LD_INT 83
36684: PUSH
36685: LD_INT 84
36687: PUSH
36688: LD_INT 85
36690: PUSH
36691: LD_INT 86
36693: PUSH
36694: LD_INT 11
36696: PUSH
36697: LD_INT 9
36699: PUSH
36700: LD_INT 20
36702: PUSH
36703: LD_INT 19
36705: PUSH
36706: LD_INT 21
36708: PUSH
36709: LD_INT 24
36711: PUSH
36712: LD_INT 22
36714: PUSH
36715: LD_INT 25
36717: PUSH
36718: LD_INT 28
36720: PUSH
36721: LD_INT 29
36723: PUSH
36724: LD_INT 30
36726: PUSH
36727: LD_INT 31
36729: PUSH
36730: LD_INT 37
36732: PUSH
36733: LD_INT 38
36735: PUSH
36736: LD_INT 32
36738: PUSH
36739: LD_INT 27
36741: PUSH
36742: LD_INT 33
36744: PUSH
36745: LD_INT 69
36747: PUSH
36748: LD_INT 39
36750: PUSH
36751: LD_INT 34
36753: PUSH
36754: LD_INT 40
36756: PUSH
36757: LD_INT 71
36759: PUSH
36760: LD_INT 23
36762: PUSH
36763: LD_INT 44
36765: PUSH
36766: LD_INT 48
36768: PUSH
36769: LD_INT 49
36771: PUSH
36772: LD_INT 50
36774: PUSH
36775: LD_INT 51
36777: PUSH
36778: LD_INT 52
36780: PUSH
36781: LD_INT 53
36783: PUSH
36784: LD_INT 54
36786: PUSH
36787: LD_INT 55
36789: PUSH
36790: LD_INT 56
36792: PUSH
36793: LD_INT 57
36795: PUSH
36796: LD_INT 58
36798: PUSH
36799: LD_INT 59
36801: PUSH
36802: LD_INT 63
36804: PUSH
36805: LD_INT 64
36807: PUSH
36808: LD_INT 65
36810: PUSH
36811: LD_INT 82
36813: PUSH
36814: LD_INT 83
36816: PUSH
36817: LD_INT 84
36819: PUSH
36820: LD_INT 85
36822: PUSH
36823: LD_INT 86
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: ST_TO_ADDR
36881: GO 36884
36883: POP
// if state > - 1 and state < 3 then
36884: LD_VAR 0 3
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: GREATER
36893: PUSH
36894: LD_VAR 0 3
36898: PUSH
36899: LD_INT 3
36901: LESS
36902: AND
36903: IFFALSE 36960
// for i in result do
36905: LD_ADDR_VAR 0 5
36909: PUSH
36910: LD_VAR 0 4
36914: PUSH
36915: FOR_IN
36916: IFFALSE 36958
// if GetTech ( i , side ) <> state then
36918: LD_VAR 0 5
36922: PPUSH
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL_OW 321
36932: PUSH
36933: LD_VAR 0 3
36937: NONEQUAL
36938: IFFALSE 36956
// result := result diff i ;
36940: LD_ADDR_VAR 0 4
36944: PUSH
36945: LD_VAR 0 4
36949: PUSH
36950: LD_VAR 0 5
36954: DIFF
36955: ST_TO_ADDR
36956: GO 36915
36958: POP
36959: POP
// end ;
36960: LD_VAR 0 4
36964: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36965: LD_INT 0
36967: PPUSH
36968: PPUSH
36969: PPUSH
// result := true ;
36970: LD_ADDR_VAR 0 3
36974: PUSH
36975: LD_INT 1
36977: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36978: LD_ADDR_VAR 0 5
36982: PUSH
36983: LD_VAR 0 2
36987: PPUSH
36988: CALL_OW 480
36992: ST_TO_ADDR
// if not tmp then
36993: LD_VAR 0 5
36997: NOT
36998: IFFALSE 37002
// exit ;
37000: GO 37051
// for i in tmp do
37002: LD_ADDR_VAR 0 4
37006: PUSH
37007: LD_VAR 0 5
37011: PUSH
37012: FOR_IN
37013: IFFALSE 37049
// if GetTech ( i , side ) <> state_researched then
37015: LD_VAR 0 4
37019: PPUSH
37020: LD_VAR 0 1
37024: PPUSH
37025: CALL_OW 321
37029: PUSH
37030: LD_INT 2
37032: NONEQUAL
37033: IFFALSE 37047
// begin result := false ;
37035: LD_ADDR_VAR 0 3
37039: PUSH
37040: LD_INT 0
37042: ST_TO_ADDR
// exit ;
37043: POP
37044: POP
37045: GO 37051
// end ;
37047: GO 37012
37049: POP
37050: POP
// end ;
37051: LD_VAR 0 3
37055: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37056: LD_INT 0
37058: PPUSH
37059: PPUSH
37060: PPUSH
37061: PPUSH
37062: PPUSH
37063: PPUSH
37064: PPUSH
37065: PPUSH
37066: PPUSH
37067: PPUSH
37068: PPUSH
37069: PPUSH
37070: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37071: LD_VAR 0 1
37075: NOT
37076: PUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 257
37086: PUSH
37087: LD_INT 9
37089: NONEQUAL
37090: OR
37091: IFFALSE 37095
// exit ;
37093: GO 37668
// side := GetSide ( unit ) ;
37095: LD_ADDR_VAR 0 9
37099: PUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 255
37109: ST_TO_ADDR
// tech_space := tech_spacanom ;
37110: LD_ADDR_VAR 0 12
37114: PUSH
37115: LD_INT 29
37117: ST_TO_ADDR
// tech_time := tech_taurad ;
37118: LD_ADDR_VAR 0 13
37122: PUSH
37123: LD_INT 28
37125: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37126: LD_ADDR_VAR 0 11
37130: PUSH
37131: LD_VAR 0 1
37135: PPUSH
37136: CALL_OW 310
37140: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37141: LD_VAR 0 11
37145: PPUSH
37146: CALL_OW 247
37150: PUSH
37151: LD_INT 2
37153: EQUAL
37154: IFFALSE 37158
// exit ;
37156: GO 37668
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37158: LD_ADDR_VAR 0 8
37162: PUSH
37163: LD_INT 81
37165: PUSH
37166: LD_VAR 0 9
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 3
37177: PUSH
37178: LD_INT 21
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PPUSH
37196: CALL_OW 69
37200: ST_TO_ADDR
// if not tmp then
37201: LD_VAR 0 8
37205: NOT
37206: IFFALSE 37210
// exit ;
37208: GO 37668
// if in_unit then
37210: LD_VAR 0 11
37214: IFFALSE 37238
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37216: LD_ADDR_VAR 0 10
37220: PUSH
37221: LD_VAR 0 8
37225: PPUSH
37226: LD_VAR 0 11
37230: PPUSH
37231: CALL_OW 74
37235: ST_TO_ADDR
37236: GO 37258
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37238: LD_ADDR_VAR 0 10
37242: PUSH
37243: LD_VAR 0 8
37247: PPUSH
37248: LD_VAR 0 1
37252: PPUSH
37253: CALL_OW 74
37257: ST_TO_ADDR
// if not enemy then
37258: LD_VAR 0 10
37262: NOT
37263: IFFALSE 37267
// exit ;
37265: GO 37668
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37267: LD_VAR 0 11
37271: PUSH
37272: LD_VAR 0 11
37276: PPUSH
37277: LD_VAR 0 10
37281: PPUSH
37282: CALL_OW 296
37286: PUSH
37287: LD_INT 13
37289: GREATER
37290: AND
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: LD_VAR 0 10
37301: PPUSH
37302: CALL_OW 296
37306: PUSH
37307: LD_INT 12
37309: GREATER
37310: OR
37311: IFFALSE 37315
// exit ;
37313: GO 37668
// missile := [ 1 ] ;
37315: LD_ADDR_VAR 0 14
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37326: LD_VAR 0 9
37330: PPUSH
37331: LD_VAR 0 12
37335: PPUSH
37336: CALL_OW 325
37340: IFFALSE 37369
// missile := Replace ( missile , missile + 1 , 2 ) ;
37342: LD_ADDR_VAR 0 14
37346: PUSH
37347: LD_VAR 0 14
37351: PPUSH
37352: LD_VAR 0 14
37356: PUSH
37357: LD_INT 1
37359: PLUS
37360: PPUSH
37361: LD_INT 2
37363: PPUSH
37364: CALL_OW 1
37368: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37369: LD_VAR 0 9
37373: PPUSH
37374: LD_VAR 0 13
37378: PPUSH
37379: CALL_OW 325
37383: PUSH
37384: LD_VAR 0 10
37388: PPUSH
37389: CALL_OW 255
37393: PPUSH
37394: LD_VAR 0 13
37398: PPUSH
37399: CALL_OW 325
37403: NOT
37404: AND
37405: IFFALSE 37434
// missile := Replace ( missile , missile + 1 , 3 ) ;
37407: LD_ADDR_VAR 0 14
37411: PUSH
37412: LD_VAR 0 14
37416: PPUSH
37417: LD_VAR 0 14
37421: PUSH
37422: LD_INT 1
37424: PLUS
37425: PPUSH
37426: LD_INT 3
37428: PPUSH
37429: CALL_OW 1
37433: ST_TO_ADDR
// if missile < 2 then
37434: LD_VAR 0 14
37438: PUSH
37439: LD_INT 2
37441: LESS
37442: IFFALSE 37446
// exit ;
37444: GO 37668
// x := GetX ( enemy ) ;
37446: LD_ADDR_VAR 0 4
37450: PUSH
37451: LD_VAR 0 10
37455: PPUSH
37456: CALL_OW 250
37460: ST_TO_ADDR
// y := GetY ( enemy ) ;
37461: LD_ADDR_VAR 0 5
37465: PUSH
37466: LD_VAR 0 10
37470: PPUSH
37471: CALL_OW 251
37475: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37476: LD_ADDR_VAR 0 6
37480: PUSH
37481: LD_VAR 0 4
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PPUSH
37490: LD_INT 1
37492: PPUSH
37493: CALL_OW 12
37497: PLUS
37498: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37499: LD_ADDR_VAR 0 7
37503: PUSH
37504: LD_VAR 0 5
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PPUSH
37513: LD_INT 1
37515: PPUSH
37516: CALL_OW 12
37520: PLUS
37521: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37522: LD_VAR 0 6
37526: PPUSH
37527: LD_VAR 0 7
37531: PPUSH
37532: CALL_OW 488
37536: NOT
37537: IFFALSE 37559
// begin _x := x ;
37539: LD_ADDR_VAR 0 6
37543: PUSH
37544: LD_VAR 0 4
37548: ST_TO_ADDR
// _y := y ;
37549: LD_ADDR_VAR 0 7
37553: PUSH
37554: LD_VAR 0 5
37558: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_INT 1
37566: PPUSH
37567: LD_VAR 0 14
37571: PPUSH
37572: CALL_OW 12
37576: ST_TO_ADDR
// case i of 1 :
37577: LD_VAR 0 3
37581: PUSH
37582: LD_INT 1
37584: DOUBLE
37585: EQUAL
37586: IFTRUE 37590
37588: GO 37607
37590: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37591: LD_VAR 0 1
37595: PPUSH
37596: LD_VAR 0 10
37600: PPUSH
37601: CALL_OW 115
37605: GO 37668
37607: LD_INT 2
37609: DOUBLE
37610: EQUAL
37611: IFTRUE 37615
37613: GO 37637
37615: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37616: LD_VAR 0 1
37620: PPUSH
37621: LD_VAR 0 6
37625: PPUSH
37626: LD_VAR 0 7
37630: PPUSH
37631: CALL_OW 153
37635: GO 37668
37637: LD_INT 3
37639: DOUBLE
37640: EQUAL
37641: IFTRUE 37645
37643: GO 37667
37645: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37646: LD_VAR 0 1
37650: PPUSH
37651: LD_VAR 0 6
37655: PPUSH
37656: LD_VAR 0 7
37660: PPUSH
37661: CALL_OW 154
37665: GO 37668
37667: POP
// end ;
37668: LD_VAR 0 2
37672: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37673: LD_INT 0
37675: PPUSH
37676: PPUSH
37677: PPUSH
37678: PPUSH
37679: PPUSH
37680: PPUSH
// if not unit or not building then
37681: LD_VAR 0 1
37685: NOT
37686: PUSH
37687: LD_VAR 0 2
37691: NOT
37692: OR
37693: IFFALSE 37697
// exit ;
37695: GO 37855
// x := GetX ( building ) ;
37697: LD_ADDR_VAR 0 5
37701: PUSH
37702: LD_VAR 0 2
37706: PPUSH
37707: CALL_OW 250
37711: ST_TO_ADDR
// y := GetY ( building ) ;
37712: LD_ADDR_VAR 0 6
37716: PUSH
37717: LD_VAR 0 2
37721: PPUSH
37722: CALL_OW 251
37726: ST_TO_ADDR
// for i = 0 to 5 do
37727: LD_ADDR_VAR 0 4
37731: PUSH
37732: DOUBLE
37733: LD_INT 0
37735: DEC
37736: ST_TO_ADDR
37737: LD_INT 5
37739: PUSH
37740: FOR_TO
37741: IFFALSE 37853
// begin _x := ShiftX ( x , i , 3 ) ;
37743: LD_ADDR_VAR 0 7
37747: PUSH
37748: LD_VAR 0 5
37752: PPUSH
37753: LD_VAR 0 4
37757: PPUSH
37758: LD_INT 3
37760: PPUSH
37761: CALL_OW 272
37765: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37766: LD_ADDR_VAR 0 8
37770: PUSH
37771: LD_VAR 0 6
37775: PPUSH
37776: LD_VAR 0 4
37780: PPUSH
37781: LD_INT 3
37783: PPUSH
37784: CALL_OW 273
37788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37789: LD_VAR 0 7
37793: PPUSH
37794: LD_VAR 0 8
37798: PPUSH
37799: CALL_OW 488
37803: NOT
37804: IFFALSE 37808
// continue ;
37806: GO 37740
// if HexInfo ( _x , _y ) = 0 then
37808: LD_VAR 0 7
37812: PPUSH
37813: LD_VAR 0 8
37817: PPUSH
37818: CALL_OW 428
37822: PUSH
37823: LD_INT 0
37825: EQUAL
37826: IFFALSE 37851
// begin ComMoveXY ( unit , _x , _y ) ;
37828: LD_VAR 0 1
37832: PPUSH
37833: LD_VAR 0 7
37837: PPUSH
37838: LD_VAR 0 8
37842: PPUSH
37843: CALL_OW 111
// exit ;
37847: POP
37848: POP
37849: GO 37855
// end ; end ;
37851: GO 37740
37853: POP
37854: POP
// end ;
37855: LD_VAR 0 3
37859: RET
// export function ScanBase ( side , base_area ) ; begin
37860: LD_INT 0
37862: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37863: LD_ADDR_VAR 0 3
37867: PUSH
37868: LD_VAR 0 2
37872: PPUSH
37873: LD_INT 81
37875: PUSH
37876: LD_VAR 0 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PPUSH
37885: CALL_OW 70
37889: ST_TO_ADDR
// end ;
37890: LD_VAR 0 3
37894: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37895: LD_INT 0
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
// result := false ;
37901: LD_ADDR_VAR 0 2
37905: PUSH
37906: LD_INT 0
37908: ST_TO_ADDR
// side := GetSide ( unit ) ;
37909: LD_ADDR_VAR 0 3
37913: PUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 255
37923: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37924: LD_ADDR_VAR 0 4
37928: PUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: CALL_OW 248
37938: ST_TO_ADDR
// case nat of 1 :
37939: LD_VAR 0 4
37943: PUSH
37944: LD_INT 1
37946: DOUBLE
37947: EQUAL
37948: IFTRUE 37952
37950: GO 37963
37952: POP
// tech := tech_lassight ; 2 :
37953: LD_ADDR_VAR 0 5
37957: PUSH
37958: LD_INT 12
37960: ST_TO_ADDR
37961: GO 38002
37963: LD_INT 2
37965: DOUBLE
37966: EQUAL
37967: IFTRUE 37971
37969: GO 37982
37971: POP
// tech := tech_mortar ; 3 :
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: LD_INT 41
37979: ST_TO_ADDR
37980: GO 38002
37982: LD_INT 3
37984: DOUBLE
37985: EQUAL
37986: IFTRUE 37990
37988: GO 38001
37990: POP
// tech := tech_bazooka ; end ;
37991: LD_ADDR_VAR 0 5
37995: PUSH
37996: LD_INT 44
37998: ST_TO_ADDR
37999: GO 38002
38001: POP
// if Researched ( side , tech ) then
38002: LD_VAR 0 3
38006: PPUSH
38007: LD_VAR 0 5
38011: PPUSH
38012: CALL_OW 325
38016: IFFALSE 38043
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38018: LD_ADDR_VAR 0 2
38022: PUSH
38023: LD_INT 5
38025: PUSH
38026: LD_INT 8
38028: PUSH
38029: LD_INT 9
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: PUSH
38037: LD_VAR 0 4
38041: ARRAY
38042: ST_TO_ADDR
// end ;
38043: LD_VAR 0 2
38047: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38048: LD_INT 0
38050: PPUSH
38051: PPUSH
38052: PPUSH
// if not mines then
38053: LD_VAR 0 2
38057: NOT
38058: IFFALSE 38062
// exit ;
38060: GO 38206
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38062: LD_ADDR_VAR 0 5
38066: PUSH
38067: LD_INT 81
38069: PUSH
38070: LD_VAR 0 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 3
38081: PUSH
38082: LD_INT 21
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PPUSH
38100: CALL_OW 69
38104: ST_TO_ADDR
// for i in mines do
38105: LD_ADDR_VAR 0 4
38109: PUSH
38110: LD_VAR 0 2
38114: PUSH
38115: FOR_IN
38116: IFFALSE 38204
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38118: LD_VAR 0 4
38122: PUSH
38123: LD_INT 1
38125: ARRAY
38126: PPUSH
38127: LD_VAR 0 4
38131: PUSH
38132: LD_INT 2
38134: ARRAY
38135: PPUSH
38136: CALL_OW 458
38140: NOT
38141: IFFALSE 38145
// continue ;
38143: GO 38115
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38145: LD_VAR 0 4
38149: PUSH
38150: LD_INT 1
38152: ARRAY
38153: PPUSH
38154: LD_VAR 0 4
38158: PUSH
38159: LD_INT 2
38161: ARRAY
38162: PPUSH
38163: CALL_OW 428
38167: PUSH
38168: LD_VAR 0 5
38172: IN
38173: IFFALSE 38202
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38175: LD_VAR 0 4
38179: PUSH
38180: LD_INT 1
38182: ARRAY
38183: PPUSH
38184: LD_VAR 0 4
38188: PUSH
38189: LD_INT 2
38191: ARRAY
38192: PPUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 456
// end ;
38202: GO 38115
38204: POP
38205: POP
// end ;
38206: LD_VAR 0 3
38210: RET
// export function Count ( array ) ; begin
38211: LD_INT 0
38213: PPUSH
// result := array + 0 ;
38214: LD_ADDR_VAR 0 2
38218: PUSH
38219: LD_VAR 0 1
38223: PUSH
38224: LD_INT 0
38226: PLUS
38227: ST_TO_ADDR
// end ;
38228: LD_VAR 0 2
38232: RET
// export function IsEmpty ( building ) ; begin
38233: LD_INT 0
38235: PPUSH
// if not building then
38236: LD_VAR 0 1
38240: NOT
38241: IFFALSE 38245
// exit ;
38243: GO 38288
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38245: LD_ADDR_VAR 0 2
38249: PUSH
38250: LD_VAR 0 1
38254: PUSH
38255: LD_INT 22
38257: PUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: CALL_OW 255
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 58
38274: PUSH
38275: EMPTY
38276: LIST
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PPUSH
38282: CALL_OW 69
38286: IN
38287: ST_TO_ADDR
// end ;
38288: LD_VAR 0 2
38292: RET
// export function IsNotFull ( building ) ; var places ; begin
38293: LD_INT 0
38295: PPUSH
38296: PPUSH
// if not building then
38297: LD_VAR 0 1
38301: NOT
38302: IFFALSE 38306
// exit ;
38304: GO 38334
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38306: LD_ADDR_VAR 0 2
38310: PUSH
38311: LD_VAR 0 1
38315: PPUSH
38316: LD_INT 3
38318: PUSH
38319: LD_INT 62
38321: PUSH
38322: EMPTY
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PPUSH
38329: CALL_OW 72
38333: ST_TO_ADDR
// end ;
38334: LD_VAR 0 2
38338: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38339: LD_INT 0
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
// tmp := [ ] ;
38345: LD_ADDR_VAR 0 3
38349: PUSH
38350: EMPTY
38351: ST_TO_ADDR
// list := [ ] ;
38352: LD_ADDR_VAR 0 5
38356: PUSH
38357: EMPTY
38358: ST_TO_ADDR
// for i = 16 to 25 do
38359: LD_ADDR_VAR 0 4
38363: PUSH
38364: DOUBLE
38365: LD_INT 16
38367: DEC
38368: ST_TO_ADDR
38369: LD_INT 25
38371: PUSH
38372: FOR_TO
38373: IFFALSE 38446
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38375: LD_ADDR_VAR 0 3
38379: PUSH
38380: LD_VAR 0 3
38384: PUSH
38385: LD_INT 22
38387: PUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: CALL_OW 255
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 91
38404: PUSH
38405: LD_VAR 0 1
38409: PUSH
38410: LD_INT 6
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 30
38420: PUSH
38421: LD_VAR 0 4
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: PPUSH
38438: CALL_OW 69
38442: ADD
38443: ST_TO_ADDR
38444: GO 38372
38446: POP
38447: POP
// for i = 1 to tmp do
38448: LD_ADDR_VAR 0 4
38452: PUSH
38453: DOUBLE
38454: LD_INT 1
38456: DEC
38457: ST_TO_ADDR
38458: LD_VAR 0 3
38462: PUSH
38463: FOR_TO
38464: IFFALSE 38552
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38466: LD_ADDR_VAR 0 5
38470: PUSH
38471: LD_VAR 0 5
38475: PUSH
38476: LD_VAR 0 3
38480: PUSH
38481: LD_VAR 0 4
38485: ARRAY
38486: PPUSH
38487: CALL_OW 266
38491: PUSH
38492: LD_VAR 0 3
38496: PUSH
38497: LD_VAR 0 4
38501: ARRAY
38502: PPUSH
38503: CALL_OW 250
38507: PUSH
38508: LD_VAR 0 3
38512: PUSH
38513: LD_VAR 0 4
38517: ARRAY
38518: PPUSH
38519: CALL_OW 251
38523: PUSH
38524: LD_VAR 0 3
38528: PUSH
38529: LD_VAR 0 4
38533: ARRAY
38534: PPUSH
38535: CALL_OW 254
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: PUSH
38546: EMPTY
38547: LIST
38548: ADD
38549: ST_TO_ADDR
38550: GO 38463
38552: POP
38553: POP
// result := list ;
38554: LD_ADDR_VAR 0 2
38558: PUSH
38559: LD_VAR 0 5
38563: ST_TO_ADDR
// end ;
38564: LD_VAR 0 2
38568: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38569: LD_INT 0
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
// if not factory then
38578: LD_VAR 0 1
38582: NOT
38583: IFFALSE 38587
// exit ;
38585: GO 39180
// if control = control_apeman then
38587: LD_VAR 0 4
38591: PUSH
38592: LD_INT 5
38594: EQUAL
38595: IFFALSE 38704
// begin tmp := UnitsInside ( factory ) ;
38597: LD_ADDR_VAR 0 8
38601: PUSH
38602: LD_VAR 0 1
38606: PPUSH
38607: CALL_OW 313
38611: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38612: LD_VAR 0 8
38616: PPUSH
38617: LD_INT 25
38619: PUSH
38620: LD_INT 12
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PPUSH
38627: CALL_OW 72
38631: NOT
38632: IFFALSE 38642
// control := control_manual ;
38634: LD_ADDR_VAR 0 4
38638: PUSH
38639: LD_INT 1
38641: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38642: LD_ADDR_VAR 0 8
38646: PUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: CALL 38339 0 1
38656: ST_TO_ADDR
// if tmp then
38657: LD_VAR 0 8
38661: IFFALSE 38704
// begin for i in tmp do
38663: LD_ADDR_VAR 0 7
38667: PUSH
38668: LD_VAR 0 8
38672: PUSH
38673: FOR_IN
38674: IFFALSE 38702
// if i [ 1 ] = b_ext_radio then
38676: LD_VAR 0 7
38680: PUSH
38681: LD_INT 1
38683: ARRAY
38684: PUSH
38685: LD_INT 22
38687: EQUAL
38688: IFFALSE 38700
// begin control := control_remote ;
38690: LD_ADDR_VAR 0 4
38694: PUSH
38695: LD_INT 2
38697: ST_TO_ADDR
// break ;
38698: GO 38702
// end ;
38700: GO 38673
38702: POP
38703: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38704: LD_VAR 0 1
38708: PPUSH
38709: LD_VAR 0 2
38713: PPUSH
38714: LD_VAR 0 3
38718: PPUSH
38719: LD_VAR 0 4
38723: PPUSH
38724: LD_VAR 0 5
38728: PPUSH
38729: CALL_OW 448
38733: IFFALSE 38768
// begin result := [ chassis , engine , control , weapon ] ;
38735: LD_ADDR_VAR 0 6
38739: PUSH
38740: LD_VAR 0 2
38744: PUSH
38745: LD_VAR 0 3
38749: PUSH
38750: LD_VAR 0 4
38754: PUSH
38755: LD_VAR 0 5
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: ST_TO_ADDR
// exit ;
38766: GO 39180
// end ; _chassis := AvailableChassisList ( factory ) ;
38768: LD_ADDR_VAR 0 9
38772: PUSH
38773: LD_VAR 0 1
38777: PPUSH
38778: CALL_OW 475
38782: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38783: LD_ADDR_VAR 0 11
38787: PUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 476
38797: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38798: LD_ADDR_VAR 0 12
38802: PUSH
38803: LD_VAR 0 1
38807: PPUSH
38808: CALL_OW 477
38812: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38813: LD_ADDR_VAR 0 10
38817: PUSH
38818: LD_VAR 0 1
38822: PPUSH
38823: CALL_OW 478
38827: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38828: LD_VAR 0 9
38832: NOT
38833: PUSH
38834: LD_VAR 0 11
38838: NOT
38839: OR
38840: PUSH
38841: LD_VAR 0 12
38845: NOT
38846: OR
38847: PUSH
38848: LD_VAR 0 10
38852: NOT
38853: OR
38854: IFFALSE 38889
// begin result := [ chassis , engine , control , weapon ] ;
38856: LD_ADDR_VAR 0 6
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_VAR 0 3
38870: PUSH
38871: LD_VAR 0 4
38875: PUSH
38876: LD_VAR 0 5
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
// exit ;
38887: GO 39180
// end ; if not chassis in _chassis then
38889: LD_VAR 0 2
38893: PUSH
38894: LD_VAR 0 9
38898: IN
38899: NOT
38900: IFFALSE 38926
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38902: LD_ADDR_VAR 0 2
38906: PUSH
38907: LD_VAR 0 9
38911: PUSH
38912: LD_INT 1
38914: PPUSH
38915: LD_VAR 0 9
38919: PPUSH
38920: CALL_OW 12
38924: ARRAY
38925: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38926: LD_VAR 0 2
38930: PPUSH
38931: LD_VAR 0 3
38935: PPUSH
38936: CALL 39185 0 2
38940: NOT
38941: IFFALSE 39000
// repeat engine := _engine [ 1 ] ;
38943: LD_ADDR_VAR 0 3
38947: PUSH
38948: LD_VAR 0 11
38952: PUSH
38953: LD_INT 1
38955: ARRAY
38956: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38957: LD_ADDR_VAR 0 11
38961: PUSH
38962: LD_VAR 0 11
38966: PPUSH
38967: LD_INT 1
38969: PPUSH
38970: CALL_OW 3
38974: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38975: LD_VAR 0 2
38979: PPUSH
38980: LD_VAR 0 3
38984: PPUSH
38985: CALL 39185 0 2
38989: PUSH
38990: LD_VAR 0 11
38994: PUSH
38995: EMPTY
38996: EQUAL
38997: OR
38998: IFFALSE 38943
// if not control in _control then
39000: LD_VAR 0 4
39004: PUSH
39005: LD_VAR 0 12
39009: IN
39010: NOT
39011: IFFALSE 39037
// control := _control [ rand ( 1 , _control ) ] ;
39013: LD_ADDR_VAR 0 4
39017: PUSH
39018: LD_VAR 0 12
39022: PUSH
39023: LD_INT 1
39025: PPUSH
39026: LD_VAR 0 12
39030: PPUSH
39031: CALL_OW 12
39035: ARRAY
39036: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39037: LD_VAR 0 2
39041: PPUSH
39042: LD_VAR 0 5
39046: PPUSH
39047: CALL 39405 0 2
39051: NOT
39052: IFFALSE 39111
// repeat weapon := _weapon [ 1 ] ;
39054: LD_ADDR_VAR 0 5
39058: PUSH
39059: LD_VAR 0 10
39063: PUSH
39064: LD_INT 1
39066: ARRAY
39067: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39068: LD_ADDR_VAR 0 10
39072: PUSH
39073: LD_VAR 0 10
39077: PPUSH
39078: LD_INT 1
39080: PPUSH
39081: CALL_OW 3
39085: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39086: LD_VAR 0 2
39090: PPUSH
39091: LD_VAR 0 5
39095: PPUSH
39096: CALL 39405 0 2
39100: PUSH
39101: LD_VAR 0 10
39105: PUSH
39106: EMPTY
39107: EQUAL
39108: OR
39109: IFFALSE 39054
// result := [ ] ;
39111: LD_ADDR_VAR 0 6
39115: PUSH
39116: EMPTY
39117: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39118: LD_VAR 0 1
39122: PPUSH
39123: LD_VAR 0 2
39127: PPUSH
39128: LD_VAR 0 3
39132: PPUSH
39133: LD_VAR 0 4
39137: PPUSH
39138: LD_VAR 0 5
39142: PPUSH
39143: CALL_OW 448
39147: IFFALSE 39180
// result := [ chassis , engine , control , weapon ] ;
39149: LD_ADDR_VAR 0 6
39153: PUSH
39154: LD_VAR 0 2
39158: PUSH
39159: LD_VAR 0 3
39163: PUSH
39164: LD_VAR 0 4
39168: PUSH
39169: LD_VAR 0 5
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// end ;
39180: LD_VAR 0 6
39184: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39185: LD_INT 0
39187: PPUSH
// if not chassis or not engine then
39188: LD_VAR 0 1
39192: NOT
39193: PUSH
39194: LD_VAR 0 2
39198: NOT
39199: OR
39200: IFFALSE 39204
// exit ;
39202: GO 39400
// case engine of engine_solar :
39204: LD_VAR 0 2
39208: PUSH
39209: LD_INT 2
39211: DOUBLE
39212: EQUAL
39213: IFTRUE 39217
39215: GO 39255
39217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39218: LD_ADDR_VAR 0 3
39222: PUSH
39223: LD_INT 11
39225: PUSH
39226: LD_INT 12
39228: PUSH
39229: LD_INT 13
39231: PUSH
39232: LD_INT 14
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: LD_INT 3
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: ST_TO_ADDR
39253: GO 39384
39255: LD_INT 1
39257: DOUBLE
39258: EQUAL
39259: IFTRUE 39263
39261: GO 39325
39263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39264: LD_ADDR_VAR 0 3
39268: PUSH
39269: LD_INT 11
39271: PUSH
39272: LD_INT 12
39274: PUSH
39275: LD_INT 13
39277: PUSH
39278: LD_INT 14
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: LD_INT 3
39289: PUSH
39290: LD_INT 4
39292: PUSH
39293: LD_INT 5
39295: PUSH
39296: LD_INT 21
39298: PUSH
39299: LD_INT 23
39301: PUSH
39302: LD_INT 22
39304: PUSH
39305: LD_INT 24
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: ST_TO_ADDR
39323: GO 39384
39325: LD_INT 3
39327: DOUBLE
39328: EQUAL
39329: IFTRUE 39333
39331: GO 39383
39333: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39334: LD_ADDR_VAR 0 3
39338: PUSH
39339: LD_INT 13
39341: PUSH
39342: LD_INT 14
39344: PUSH
39345: LD_INT 2
39347: PUSH
39348: LD_INT 3
39350: PUSH
39351: LD_INT 4
39353: PUSH
39354: LD_INT 5
39356: PUSH
39357: LD_INT 21
39359: PUSH
39360: LD_INT 22
39362: PUSH
39363: LD_INT 23
39365: PUSH
39366: LD_INT 24
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
39381: GO 39384
39383: POP
// result := ( chassis in result ) ;
39384: LD_ADDR_VAR 0 3
39388: PUSH
39389: LD_VAR 0 1
39393: PUSH
39394: LD_VAR 0 3
39398: IN
39399: ST_TO_ADDR
// end ;
39400: LD_VAR 0 3
39404: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39405: LD_INT 0
39407: PPUSH
// if not chassis or not weapon then
39408: LD_VAR 0 1
39412: NOT
39413: PUSH
39414: LD_VAR 0 2
39418: NOT
39419: OR
39420: IFFALSE 39424
// exit ;
39422: GO 40484
// case weapon of us_machine_gun :
39424: LD_VAR 0 2
39428: PUSH
39429: LD_INT 2
39431: DOUBLE
39432: EQUAL
39433: IFTRUE 39437
39435: GO 39467
39437: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39438: LD_ADDR_VAR 0 3
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: LD_INT 4
39454: PUSH
39455: LD_INT 5
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: ST_TO_ADDR
39465: GO 40468
39467: LD_INT 3
39469: DOUBLE
39470: EQUAL
39471: IFTRUE 39475
39473: GO 39505
39475: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39476: LD_ADDR_VAR 0 3
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 3
39489: PUSH
39490: LD_INT 4
39492: PUSH
39493: LD_INT 5
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: ST_TO_ADDR
39503: GO 40468
39505: LD_INT 11
39507: DOUBLE
39508: EQUAL
39509: IFTRUE 39513
39511: GO 39543
39513: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39514: LD_ADDR_VAR 0 3
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 3
39527: PUSH
39528: LD_INT 4
39530: PUSH
39531: LD_INT 5
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: ST_TO_ADDR
39541: GO 40468
39543: LD_INT 4
39545: DOUBLE
39546: EQUAL
39547: IFTRUE 39551
39549: GO 39577
39551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39552: LD_ADDR_VAR 0 3
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: LD_INT 4
39565: PUSH
39566: LD_INT 5
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: ST_TO_ADDR
39575: GO 40468
39577: LD_INT 5
39579: DOUBLE
39580: EQUAL
39581: IFTRUE 39585
39583: GO 39611
39585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39586: LD_ADDR_VAR 0 3
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: LD_INT 3
39596: PUSH
39597: LD_INT 4
39599: PUSH
39600: LD_INT 5
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: ST_TO_ADDR
39609: GO 40468
39611: LD_INT 9
39613: DOUBLE
39614: EQUAL
39615: IFTRUE 39619
39617: GO 39645
39619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39620: LD_ADDR_VAR 0 3
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: LD_INT 3
39630: PUSH
39631: LD_INT 4
39633: PUSH
39634: LD_INT 5
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: ST_TO_ADDR
39643: GO 40468
39645: LD_INT 7
39647: DOUBLE
39648: EQUAL
39649: IFTRUE 39653
39651: GO 39679
39653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39654: LD_ADDR_VAR 0 3
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 4
39667: PUSH
39668: LD_INT 5
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: ST_TO_ADDR
39677: GO 40468
39679: LD_INT 12
39681: DOUBLE
39682: EQUAL
39683: IFTRUE 39687
39685: GO 39713
39687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39688: LD_ADDR_VAR 0 3
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: LD_INT 3
39698: PUSH
39699: LD_INT 4
39701: PUSH
39702: LD_INT 5
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: ST_TO_ADDR
39711: GO 40468
39713: LD_INT 13
39715: DOUBLE
39716: EQUAL
39717: IFTRUE 39721
39719: GO 39747
39721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: LD_INT 4
39735: PUSH
39736: LD_INT 5
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
39745: GO 40468
39747: LD_INT 14
39749: DOUBLE
39750: EQUAL
39751: IFTRUE 39755
39753: GO 39773
39755: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39756: LD_ADDR_VAR 0 3
39760: PUSH
39761: LD_INT 4
39763: PUSH
39764: LD_INT 5
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: ST_TO_ADDR
39771: GO 40468
39773: LD_INT 6
39775: DOUBLE
39776: EQUAL
39777: IFTRUE 39781
39779: GO 39799
39781: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39782: LD_ADDR_VAR 0 3
39786: PUSH
39787: LD_INT 4
39789: PUSH
39790: LD_INT 5
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: ST_TO_ADDR
39797: GO 40468
39799: LD_INT 10
39801: DOUBLE
39802: EQUAL
39803: IFTRUE 39807
39805: GO 39825
39807: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_INT 4
39815: PUSH
39816: LD_INT 5
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: ST_TO_ADDR
39823: GO 40468
39825: LD_INT 22
39827: DOUBLE
39828: EQUAL
39829: IFTRUE 39833
39831: GO 39859
39833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39834: LD_ADDR_VAR 0 3
39838: PUSH
39839: LD_INT 11
39841: PUSH
39842: LD_INT 12
39844: PUSH
39845: LD_INT 13
39847: PUSH
39848: LD_INT 14
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: ST_TO_ADDR
39857: GO 40468
39859: LD_INT 23
39861: DOUBLE
39862: EQUAL
39863: IFTRUE 39867
39865: GO 39893
39867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39868: LD_ADDR_VAR 0 3
39872: PUSH
39873: LD_INT 11
39875: PUSH
39876: LD_INT 12
39878: PUSH
39879: LD_INT 13
39881: PUSH
39882: LD_INT 14
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: ST_TO_ADDR
39891: GO 40468
39893: LD_INT 24
39895: DOUBLE
39896: EQUAL
39897: IFTRUE 39901
39899: GO 39927
39901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39902: LD_ADDR_VAR 0 3
39906: PUSH
39907: LD_INT 11
39909: PUSH
39910: LD_INT 12
39912: PUSH
39913: LD_INT 13
39915: PUSH
39916: LD_INT 14
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: ST_TO_ADDR
39925: GO 40468
39927: LD_INT 30
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39935
39933: GO 39961
39935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39936: LD_ADDR_VAR 0 3
39940: PUSH
39941: LD_INT 11
39943: PUSH
39944: LD_INT 12
39946: PUSH
39947: LD_INT 13
39949: PUSH
39950: LD_INT 14
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: ST_TO_ADDR
39959: GO 40468
39961: LD_INT 25
39963: DOUBLE
39964: EQUAL
39965: IFTRUE 39969
39967: GO 39987
39969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39970: LD_ADDR_VAR 0 3
39974: PUSH
39975: LD_INT 13
39977: PUSH
39978: LD_INT 14
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: ST_TO_ADDR
39985: GO 40468
39987: LD_INT 27
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 39995
39993: GO 40013
39995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39996: LD_ADDR_VAR 0 3
40000: PUSH
40001: LD_INT 13
40003: PUSH
40004: LD_INT 14
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: ST_TO_ADDR
40011: GO 40468
40013: LD_INT 92
40015: DOUBLE
40016: EQUAL
40017: IFTRUE 40021
40019: GO 40047
40021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40022: LD_ADDR_VAR 0 3
40026: PUSH
40027: LD_INT 11
40029: PUSH
40030: LD_INT 12
40032: PUSH
40033: LD_INT 13
40035: PUSH
40036: LD_INT 14
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: ST_TO_ADDR
40045: GO 40468
40047: LD_INT 28
40049: DOUBLE
40050: EQUAL
40051: IFTRUE 40055
40053: GO 40073
40055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40056: LD_ADDR_VAR 0 3
40060: PUSH
40061: LD_INT 13
40063: PUSH
40064: LD_INT 14
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: ST_TO_ADDR
40071: GO 40468
40073: LD_INT 29
40075: DOUBLE
40076: EQUAL
40077: IFTRUE 40081
40079: GO 40099
40081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_INT 13
40089: PUSH
40090: LD_INT 14
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: ST_TO_ADDR
40097: GO 40468
40099: LD_INT 31
40101: DOUBLE
40102: EQUAL
40103: IFTRUE 40107
40105: GO 40125
40107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40108: LD_ADDR_VAR 0 3
40112: PUSH
40113: LD_INT 13
40115: PUSH
40116: LD_INT 14
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: ST_TO_ADDR
40123: GO 40468
40125: LD_INT 26
40127: DOUBLE
40128: EQUAL
40129: IFTRUE 40133
40131: GO 40151
40133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40134: LD_ADDR_VAR 0 3
40138: PUSH
40139: LD_INT 13
40141: PUSH
40142: LD_INT 14
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: ST_TO_ADDR
40149: GO 40468
40151: LD_INT 42
40153: DOUBLE
40154: EQUAL
40155: IFTRUE 40159
40157: GO 40185
40159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40160: LD_ADDR_VAR 0 3
40164: PUSH
40165: LD_INT 21
40167: PUSH
40168: LD_INT 22
40170: PUSH
40171: LD_INT 23
40173: PUSH
40174: LD_INT 24
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
40183: GO 40468
40185: LD_INT 43
40187: DOUBLE
40188: EQUAL
40189: IFTRUE 40193
40191: GO 40219
40193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40194: LD_ADDR_VAR 0 3
40198: PUSH
40199: LD_INT 21
40201: PUSH
40202: LD_INT 22
40204: PUSH
40205: LD_INT 23
40207: PUSH
40208: LD_INT 24
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: ST_TO_ADDR
40217: GO 40468
40219: LD_INT 44
40221: DOUBLE
40222: EQUAL
40223: IFTRUE 40227
40225: GO 40253
40227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40228: LD_ADDR_VAR 0 3
40232: PUSH
40233: LD_INT 21
40235: PUSH
40236: LD_INT 22
40238: PUSH
40239: LD_INT 23
40241: PUSH
40242: LD_INT 24
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
40251: GO 40468
40253: LD_INT 45
40255: DOUBLE
40256: EQUAL
40257: IFTRUE 40261
40259: GO 40287
40261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40262: LD_ADDR_VAR 0 3
40266: PUSH
40267: LD_INT 21
40269: PUSH
40270: LD_INT 22
40272: PUSH
40273: LD_INT 23
40275: PUSH
40276: LD_INT 24
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: ST_TO_ADDR
40285: GO 40468
40287: LD_INT 49
40289: DOUBLE
40290: EQUAL
40291: IFTRUE 40295
40293: GO 40321
40295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40296: LD_ADDR_VAR 0 3
40300: PUSH
40301: LD_INT 21
40303: PUSH
40304: LD_INT 22
40306: PUSH
40307: LD_INT 23
40309: PUSH
40310: LD_INT 24
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: ST_TO_ADDR
40319: GO 40468
40321: LD_INT 51
40323: DOUBLE
40324: EQUAL
40325: IFTRUE 40329
40327: GO 40355
40329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40330: LD_ADDR_VAR 0 3
40334: PUSH
40335: LD_INT 21
40337: PUSH
40338: LD_INT 22
40340: PUSH
40341: LD_INT 23
40343: PUSH
40344: LD_INT 24
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: ST_TO_ADDR
40353: GO 40468
40355: LD_INT 52
40357: DOUBLE
40358: EQUAL
40359: IFTRUE 40363
40361: GO 40389
40363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40364: LD_ADDR_VAR 0 3
40368: PUSH
40369: LD_INT 21
40371: PUSH
40372: LD_INT 22
40374: PUSH
40375: LD_INT 23
40377: PUSH
40378: LD_INT 24
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
40387: GO 40468
40389: LD_INT 53
40391: DOUBLE
40392: EQUAL
40393: IFTRUE 40397
40395: GO 40415
40397: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40398: LD_ADDR_VAR 0 3
40402: PUSH
40403: LD_INT 23
40405: PUSH
40406: LD_INT 24
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: ST_TO_ADDR
40413: GO 40468
40415: LD_INT 46
40417: DOUBLE
40418: EQUAL
40419: IFTRUE 40423
40421: GO 40441
40423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40424: LD_ADDR_VAR 0 3
40428: PUSH
40429: LD_INT 23
40431: PUSH
40432: LD_INT 24
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: ST_TO_ADDR
40439: GO 40468
40441: LD_INT 47
40443: DOUBLE
40444: EQUAL
40445: IFTRUE 40449
40447: GO 40467
40449: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40450: LD_ADDR_VAR 0 3
40454: PUSH
40455: LD_INT 23
40457: PUSH
40458: LD_INT 24
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: ST_TO_ADDR
40465: GO 40468
40467: POP
// result := ( chassis in result ) ;
40468: LD_ADDR_VAR 0 3
40472: PUSH
40473: LD_VAR 0 1
40477: PUSH
40478: LD_VAR 0 3
40482: IN
40483: ST_TO_ADDR
// end ;
40484: LD_VAR 0 3
40488: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40489: LD_INT 0
40491: PPUSH
40492: PPUSH
40493: PPUSH
40494: PPUSH
40495: PPUSH
40496: PPUSH
40497: PPUSH
// result := array ;
40498: LD_ADDR_VAR 0 5
40502: PUSH
40503: LD_VAR 0 1
40507: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40508: LD_VAR 0 1
40512: NOT
40513: PUSH
40514: LD_VAR 0 2
40518: NOT
40519: OR
40520: PUSH
40521: LD_VAR 0 3
40525: NOT
40526: OR
40527: PUSH
40528: LD_VAR 0 2
40532: PUSH
40533: LD_VAR 0 1
40537: GREATER
40538: OR
40539: PUSH
40540: LD_VAR 0 3
40544: PUSH
40545: LD_VAR 0 1
40549: GREATER
40550: OR
40551: IFFALSE 40555
// exit ;
40553: GO 40851
// if direction then
40555: LD_VAR 0 4
40559: IFFALSE 40623
// begin d := 1 ;
40561: LD_ADDR_VAR 0 9
40565: PUSH
40566: LD_INT 1
40568: ST_TO_ADDR
// if i_from > i_to then
40569: LD_VAR 0 2
40573: PUSH
40574: LD_VAR 0 3
40578: GREATER
40579: IFFALSE 40605
// length := ( array - i_from ) + i_to else
40581: LD_ADDR_VAR 0 11
40585: PUSH
40586: LD_VAR 0 1
40590: PUSH
40591: LD_VAR 0 2
40595: MINUS
40596: PUSH
40597: LD_VAR 0 3
40601: PLUS
40602: ST_TO_ADDR
40603: GO 40621
// length := i_to - i_from ;
40605: LD_ADDR_VAR 0 11
40609: PUSH
40610: LD_VAR 0 3
40614: PUSH
40615: LD_VAR 0 2
40619: MINUS
40620: ST_TO_ADDR
// end else
40621: GO 40684
// begin d := - 1 ;
40623: LD_ADDR_VAR 0 9
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: ST_TO_ADDR
// if i_from > i_to then
40632: LD_VAR 0 2
40636: PUSH
40637: LD_VAR 0 3
40641: GREATER
40642: IFFALSE 40662
// length := i_from - i_to else
40644: LD_ADDR_VAR 0 11
40648: PUSH
40649: LD_VAR 0 2
40653: PUSH
40654: LD_VAR 0 3
40658: MINUS
40659: ST_TO_ADDR
40660: GO 40684
// length := ( array - i_to ) + i_from ;
40662: LD_ADDR_VAR 0 11
40666: PUSH
40667: LD_VAR 0 1
40671: PUSH
40672: LD_VAR 0 3
40676: MINUS
40677: PUSH
40678: LD_VAR 0 2
40682: PLUS
40683: ST_TO_ADDR
// end ; if not length then
40684: LD_VAR 0 11
40688: NOT
40689: IFFALSE 40693
// exit ;
40691: GO 40851
// tmp := array ;
40693: LD_ADDR_VAR 0 10
40697: PUSH
40698: LD_VAR 0 1
40702: ST_TO_ADDR
// for i = 1 to length do
40703: LD_ADDR_VAR 0 6
40707: PUSH
40708: DOUBLE
40709: LD_INT 1
40711: DEC
40712: ST_TO_ADDR
40713: LD_VAR 0 11
40717: PUSH
40718: FOR_TO
40719: IFFALSE 40839
// begin for j = 1 to array do
40721: LD_ADDR_VAR 0 7
40725: PUSH
40726: DOUBLE
40727: LD_INT 1
40729: DEC
40730: ST_TO_ADDR
40731: LD_VAR 0 1
40735: PUSH
40736: FOR_TO
40737: IFFALSE 40825
// begin k := j + d ;
40739: LD_ADDR_VAR 0 8
40743: PUSH
40744: LD_VAR 0 7
40748: PUSH
40749: LD_VAR 0 9
40753: PLUS
40754: ST_TO_ADDR
// if k > array then
40755: LD_VAR 0 8
40759: PUSH
40760: LD_VAR 0 1
40764: GREATER
40765: IFFALSE 40775
// k := 1 ;
40767: LD_ADDR_VAR 0 8
40771: PUSH
40772: LD_INT 1
40774: ST_TO_ADDR
// if not k then
40775: LD_VAR 0 8
40779: NOT
40780: IFFALSE 40792
// k := array ;
40782: LD_ADDR_VAR 0 8
40786: PUSH
40787: LD_VAR 0 1
40791: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40792: LD_ADDR_VAR 0 10
40796: PUSH
40797: LD_VAR 0 10
40801: PPUSH
40802: LD_VAR 0 8
40806: PPUSH
40807: LD_VAR 0 1
40811: PUSH
40812: LD_VAR 0 7
40816: ARRAY
40817: PPUSH
40818: CALL_OW 1
40822: ST_TO_ADDR
// end ;
40823: GO 40736
40825: POP
40826: POP
// array := tmp ;
40827: LD_ADDR_VAR 0 1
40831: PUSH
40832: LD_VAR 0 10
40836: ST_TO_ADDR
// end ;
40837: GO 40718
40839: POP
40840: POP
// result := array ;
40841: LD_ADDR_VAR 0 5
40845: PUSH
40846: LD_VAR 0 1
40850: ST_TO_ADDR
// end ;
40851: LD_VAR 0 5
40855: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40856: LD_INT 0
40858: PPUSH
40859: PPUSH
// result := 0 ;
40860: LD_ADDR_VAR 0 3
40864: PUSH
40865: LD_INT 0
40867: ST_TO_ADDR
// if not array or not value in array then
40868: LD_VAR 0 1
40872: NOT
40873: PUSH
40874: LD_VAR 0 2
40878: PUSH
40879: LD_VAR 0 1
40883: IN
40884: NOT
40885: OR
40886: IFFALSE 40890
// exit ;
40888: GO 40944
// for i = 1 to array do
40890: LD_ADDR_VAR 0 4
40894: PUSH
40895: DOUBLE
40896: LD_INT 1
40898: DEC
40899: ST_TO_ADDR
40900: LD_VAR 0 1
40904: PUSH
40905: FOR_TO
40906: IFFALSE 40942
// if value = array [ i ] then
40908: LD_VAR 0 2
40912: PUSH
40913: LD_VAR 0 1
40917: PUSH
40918: LD_VAR 0 4
40922: ARRAY
40923: EQUAL
40924: IFFALSE 40940
// begin result := i ;
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_VAR 0 4
40935: ST_TO_ADDR
// exit ;
40936: POP
40937: POP
40938: GO 40944
// end ;
40940: GO 40905
40942: POP
40943: POP
// end ;
40944: LD_VAR 0 3
40948: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40949: LD_INT 0
40951: PPUSH
// vc_chassis := chassis ;
40952: LD_ADDR_OWVAR 37
40956: PUSH
40957: LD_VAR 0 1
40961: ST_TO_ADDR
// vc_engine := engine ;
40962: LD_ADDR_OWVAR 39
40966: PUSH
40967: LD_VAR 0 2
40971: ST_TO_ADDR
// vc_control := control ;
40972: LD_ADDR_OWVAR 38
40976: PUSH
40977: LD_VAR 0 3
40981: ST_TO_ADDR
// vc_weapon := weapon ;
40982: LD_ADDR_OWVAR 40
40986: PUSH
40987: LD_VAR 0 4
40991: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40992: LD_ADDR_OWVAR 41
40996: PUSH
40997: LD_VAR 0 5
41001: ST_TO_ADDR
// end ;
41002: LD_VAR 0 6
41006: RET
// export function WantPlant ( unit ) ; var task ; begin
41007: LD_INT 0
41009: PPUSH
41010: PPUSH
// result := false ;
41011: LD_ADDR_VAR 0 2
41015: PUSH
41016: LD_INT 0
41018: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41019: LD_ADDR_VAR 0 3
41023: PUSH
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 437
41033: ST_TO_ADDR
// if task then
41034: LD_VAR 0 3
41038: IFFALSE 41066
// if task [ 1 ] [ 1 ] = p then
41040: LD_VAR 0 3
41044: PUSH
41045: LD_INT 1
41047: ARRAY
41048: PUSH
41049: LD_INT 1
41051: ARRAY
41052: PUSH
41053: LD_STRING p
41055: EQUAL
41056: IFFALSE 41066
// result := true ;
41058: LD_ADDR_VAR 0 2
41062: PUSH
41063: LD_INT 1
41065: ST_TO_ADDR
// end ;
41066: LD_VAR 0 2
41070: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41071: LD_INT 0
41073: PPUSH
41074: PPUSH
41075: PPUSH
41076: PPUSH
// if pos < 1 then
41077: LD_VAR 0 2
41081: PUSH
41082: LD_INT 1
41084: LESS
41085: IFFALSE 41089
// exit ;
41087: GO 41392
// if pos = 1 then
41089: LD_VAR 0 2
41093: PUSH
41094: LD_INT 1
41096: EQUAL
41097: IFFALSE 41130
// result := Replace ( arr , pos [ 1 ] , value ) else
41099: LD_ADDR_VAR 0 4
41103: PUSH
41104: LD_VAR 0 1
41108: PPUSH
41109: LD_VAR 0 2
41113: PUSH
41114: LD_INT 1
41116: ARRAY
41117: PPUSH
41118: LD_VAR 0 3
41122: PPUSH
41123: CALL_OW 1
41127: ST_TO_ADDR
41128: GO 41392
// begin tmp := arr ;
41130: LD_ADDR_VAR 0 6
41134: PUSH
41135: LD_VAR 0 1
41139: ST_TO_ADDR
// s_arr := [ tmp ] ;
41140: LD_ADDR_VAR 0 7
41144: PUSH
41145: LD_VAR 0 6
41149: PUSH
41150: EMPTY
41151: LIST
41152: ST_TO_ADDR
// for i = 1 to pos - 1 do
41153: LD_ADDR_VAR 0 5
41157: PUSH
41158: DOUBLE
41159: LD_INT 1
41161: DEC
41162: ST_TO_ADDR
41163: LD_VAR 0 2
41167: PUSH
41168: LD_INT 1
41170: MINUS
41171: PUSH
41172: FOR_TO
41173: IFFALSE 41218
// begin tmp := tmp [ pos [ i ] ] ;
41175: LD_ADDR_VAR 0 6
41179: PUSH
41180: LD_VAR 0 6
41184: PUSH
41185: LD_VAR 0 2
41189: PUSH
41190: LD_VAR 0 5
41194: ARRAY
41195: ARRAY
41196: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41197: LD_ADDR_VAR 0 7
41201: PUSH
41202: LD_VAR 0 7
41206: PUSH
41207: LD_VAR 0 6
41211: PUSH
41212: EMPTY
41213: LIST
41214: ADD
41215: ST_TO_ADDR
// end ;
41216: GO 41172
41218: POP
41219: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41220: LD_ADDR_VAR 0 6
41224: PUSH
41225: LD_VAR 0 6
41229: PPUSH
41230: LD_VAR 0 2
41234: PUSH
41235: LD_VAR 0 2
41239: ARRAY
41240: PPUSH
41241: LD_VAR 0 3
41245: PPUSH
41246: CALL_OW 1
41250: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41251: LD_ADDR_VAR 0 7
41255: PUSH
41256: LD_VAR 0 7
41260: PPUSH
41261: LD_VAR 0 7
41265: PPUSH
41266: LD_VAR 0 6
41270: PPUSH
41271: CALL_OW 1
41275: ST_TO_ADDR
// for i = s_arr downto 2 do
41276: LD_ADDR_VAR 0 5
41280: PUSH
41281: DOUBLE
41282: LD_VAR 0 7
41286: INC
41287: ST_TO_ADDR
41288: LD_INT 2
41290: PUSH
41291: FOR_DOWNTO
41292: IFFALSE 41376
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41294: LD_ADDR_VAR 0 6
41298: PUSH
41299: LD_VAR 0 7
41303: PUSH
41304: LD_VAR 0 5
41308: PUSH
41309: LD_INT 1
41311: MINUS
41312: ARRAY
41313: PPUSH
41314: LD_VAR 0 2
41318: PUSH
41319: LD_VAR 0 5
41323: PUSH
41324: LD_INT 1
41326: MINUS
41327: ARRAY
41328: PPUSH
41329: LD_VAR 0 7
41333: PUSH
41334: LD_VAR 0 5
41338: ARRAY
41339: PPUSH
41340: CALL_OW 1
41344: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41345: LD_ADDR_VAR 0 7
41349: PUSH
41350: LD_VAR 0 7
41354: PPUSH
41355: LD_VAR 0 5
41359: PUSH
41360: LD_INT 1
41362: MINUS
41363: PPUSH
41364: LD_VAR 0 6
41368: PPUSH
41369: CALL_OW 1
41373: ST_TO_ADDR
// end ;
41374: GO 41291
41376: POP
41377: POP
// result := s_arr [ 1 ] ;
41378: LD_ADDR_VAR 0 4
41382: PUSH
41383: LD_VAR 0 7
41387: PUSH
41388: LD_INT 1
41390: ARRAY
41391: ST_TO_ADDR
// end ; end ;
41392: LD_VAR 0 4
41396: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41397: LD_INT 0
41399: PPUSH
41400: PPUSH
// if not list then
41401: LD_VAR 0 1
41405: NOT
41406: IFFALSE 41410
// exit ;
41408: GO 41501
// i := list [ pos1 ] ;
41410: LD_ADDR_VAR 0 5
41414: PUSH
41415: LD_VAR 0 1
41419: PUSH
41420: LD_VAR 0 2
41424: ARRAY
41425: ST_TO_ADDR
// if not i then
41426: LD_VAR 0 5
41430: NOT
41431: IFFALSE 41435
// exit ;
41433: GO 41501
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41435: LD_ADDR_VAR 0 1
41439: PUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: LD_VAR 0 2
41449: PPUSH
41450: LD_VAR 0 1
41454: PUSH
41455: LD_VAR 0 3
41459: ARRAY
41460: PPUSH
41461: CALL_OW 1
41465: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41466: LD_ADDR_VAR 0 1
41470: PUSH
41471: LD_VAR 0 1
41475: PPUSH
41476: LD_VAR 0 3
41480: PPUSH
41481: LD_VAR 0 5
41485: PPUSH
41486: CALL_OW 1
41490: ST_TO_ADDR
// result := list ;
41491: LD_ADDR_VAR 0 4
41495: PUSH
41496: LD_VAR 0 1
41500: ST_TO_ADDR
// end ;
41501: LD_VAR 0 4
41505: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41506: LD_INT 0
41508: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41509: LD_ADDR_VAR 0 5
41513: PUSH
41514: LD_VAR 0 1
41518: PPUSH
41519: CALL_OW 250
41523: PPUSH
41524: LD_VAR 0 1
41528: PPUSH
41529: CALL_OW 251
41533: PPUSH
41534: LD_VAR 0 2
41538: PPUSH
41539: LD_VAR 0 3
41543: PPUSH
41544: LD_VAR 0 4
41548: PPUSH
41549: CALL 41927 0 5
41553: ST_TO_ADDR
// end ;
41554: LD_VAR 0 5
41558: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41559: LD_INT 0
41561: PPUSH
41562: PPUSH
41563: PPUSH
41564: PPUSH
// if not list or not unit then
41565: LD_VAR 0 2
41569: NOT
41570: PUSH
41571: LD_VAR 0 1
41575: NOT
41576: OR
41577: IFFALSE 41581
// exit ;
41579: GO 41922
// result := [ ] ;
41581: LD_ADDR_VAR 0 5
41585: PUSH
41586: EMPTY
41587: ST_TO_ADDR
// for i in list do
41588: LD_ADDR_VAR 0 6
41592: PUSH
41593: LD_VAR 0 2
41597: PUSH
41598: FOR_IN
41599: IFFALSE 41817
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41601: LD_ADDR_VAR 0 8
41605: PUSH
41606: LD_VAR 0 1
41610: PPUSH
41611: LD_VAR 0 6
41615: PUSH
41616: LD_INT 1
41618: ARRAY
41619: PPUSH
41620: LD_VAR 0 6
41624: PUSH
41625: LD_INT 2
41627: ARRAY
41628: PPUSH
41629: CALL_OW 297
41633: ST_TO_ADDR
// if not Count ( result ) then
41634: LD_VAR 0 5
41638: PPUSH
41639: CALL 38211 0 1
41643: NOT
41644: IFFALSE 41677
// begin result := Join ( result , [ i , tmp ] ) ;
41646: LD_ADDR_VAR 0 5
41650: PUSH
41651: LD_VAR 0 5
41655: PPUSH
41656: LD_VAR 0 6
41660: PUSH
41661: LD_VAR 0 8
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PPUSH
41670: CALL 73811 0 2
41674: ST_TO_ADDR
// continue ;
41675: GO 41598
// end ; if result [ result ] [ 2 ] <= tmp then
41677: LD_VAR 0 5
41681: PUSH
41682: LD_VAR 0 5
41686: ARRAY
41687: PUSH
41688: LD_INT 2
41690: ARRAY
41691: PUSH
41692: LD_VAR 0 8
41696: LESSEQUAL
41697: IFFALSE 41730
// result := Join ( result , [ i , tmp ] ) else
41699: LD_ADDR_VAR 0 5
41703: PUSH
41704: LD_VAR 0 5
41708: PPUSH
41709: LD_VAR 0 6
41713: PUSH
41714: LD_VAR 0 8
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PPUSH
41723: CALL 73811 0 2
41727: ST_TO_ADDR
41728: GO 41815
// begin for j := 1 to Count ( result ) do
41730: LD_ADDR_VAR 0 7
41734: PUSH
41735: DOUBLE
41736: LD_INT 1
41738: DEC
41739: ST_TO_ADDR
41740: LD_VAR 0 5
41744: PPUSH
41745: CALL 38211 0 1
41749: PUSH
41750: FOR_TO
41751: IFFALSE 41813
// begin if tmp < result [ j ] [ 2 ] then
41753: LD_VAR 0 8
41757: PUSH
41758: LD_VAR 0 5
41762: PUSH
41763: LD_VAR 0 7
41767: ARRAY
41768: PUSH
41769: LD_INT 2
41771: ARRAY
41772: LESS
41773: IFFALSE 41811
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41775: LD_ADDR_VAR 0 5
41779: PUSH
41780: LD_VAR 0 5
41784: PPUSH
41785: LD_VAR 0 7
41789: PPUSH
41790: LD_VAR 0 6
41794: PUSH
41795: LD_VAR 0 8
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PPUSH
41804: CALL_OW 2
41808: ST_TO_ADDR
// break ;
41809: GO 41813
// end ; end ;
41811: GO 41750
41813: POP
41814: POP
// end ; end ;
41815: GO 41598
41817: POP
41818: POP
// if result and not asc then
41819: LD_VAR 0 5
41823: PUSH
41824: LD_VAR 0 3
41828: NOT
41829: AND
41830: IFFALSE 41847
// result := ReverseArray ( result ) ;
41832: LD_ADDR_VAR 0 5
41836: PUSH
41837: LD_VAR 0 5
41841: PPUSH
41842: CALL 69087 0 1
41846: ST_TO_ADDR
// tmp := [ ] ;
41847: LD_ADDR_VAR 0 8
41851: PUSH
41852: EMPTY
41853: ST_TO_ADDR
// if mode then
41854: LD_VAR 0 4
41858: IFFALSE 41922
// begin for i := 1 to result do
41860: LD_ADDR_VAR 0 6
41864: PUSH
41865: DOUBLE
41866: LD_INT 1
41868: DEC
41869: ST_TO_ADDR
41870: LD_VAR 0 5
41874: PUSH
41875: FOR_TO
41876: IFFALSE 41910
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
41878: LD_ADDR_VAR 0 8
41882: PUSH
41883: LD_VAR 0 8
41887: PPUSH
41888: LD_VAR 0 5
41892: PUSH
41893: LD_VAR 0 6
41897: ARRAY
41898: PUSH
41899: LD_INT 1
41901: ARRAY
41902: PPUSH
41903: CALL 73811 0 2
41907: ST_TO_ADDR
41908: GO 41875
41910: POP
41911: POP
// result := tmp ;
41912: LD_ADDR_VAR 0 5
41916: PUSH
41917: LD_VAR 0 8
41921: ST_TO_ADDR
// end ; end ;
41922: LD_VAR 0 5
41926: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41927: LD_INT 0
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
// if not list then
41933: LD_VAR 0 3
41937: NOT
41938: IFFALSE 41942
// exit ;
41940: GO 42330
// result := [ ] ;
41942: LD_ADDR_VAR 0 6
41946: PUSH
41947: EMPTY
41948: ST_TO_ADDR
// for i in list do
41949: LD_ADDR_VAR 0 7
41953: PUSH
41954: LD_VAR 0 3
41958: PUSH
41959: FOR_IN
41960: IFFALSE 42162
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41962: LD_ADDR_VAR 0 9
41966: PUSH
41967: LD_VAR 0 7
41971: PPUSH
41972: LD_VAR 0 1
41976: PPUSH
41977: LD_VAR 0 2
41981: PPUSH
41982: CALL_OW 297
41986: ST_TO_ADDR
// if not result then
41987: LD_VAR 0 6
41991: NOT
41992: IFFALSE 42018
// result := [ [ i , tmp ] ] else
41994: LD_ADDR_VAR 0 6
41998: PUSH
41999: LD_VAR 0 7
42003: PUSH
42004: LD_VAR 0 9
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: ST_TO_ADDR
42016: GO 42160
// begin if result [ result ] [ 2 ] < tmp then
42018: LD_VAR 0 6
42022: PUSH
42023: LD_VAR 0 6
42027: ARRAY
42028: PUSH
42029: LD_INT 2
42031: ARRAY
42032: PUSH
42033: LD_VAR 0 9
42037: LESS
42038: IFFALSE 42080
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42040: LD_ADDR_VAR 0 6
42044: PUSH
42045: LD_VAR 0 6
42049: PPUSH
42050: LD_VAR 0 6
42054: PUSH
42055: LD_INT 1
42057: PLUS
42058: PPUSH
42059: LD_VAR 0 7
42063: PUSH
42064: LD_VAR 0 9
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PPUSH
42073: CALL_OW 2
42077: ST_TO_ADDR
42078: GO 42160
// for j = 1 to result do
42080: LD_ADDR_VAR 0 8
42084: PUSH
42085: DOUBLE
42086: LD_INT 1
42088: DEC
42089: ST_TO_ADDR
42090: LD_VAR 0 6
42094: PUSH
42095: FOR_TO
42096: IFFALSE 42158
// begin if tmp < result [ j ] [ 2 ] then
42098: LD_VAR 0 9
42102: PUSH
42103: LD_VAR 0 6
42107: PUSH
42108: LD_VAR 0 8
42112: ARRAY
42113: PUSH
42114: LD_INT 2
42116: ARRAY
42117: LESS
42118: IFFALSE 42156
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42120: LD_ADDR_VAR 0 6
42124: PUSH
42125: LD_VAR 0 6
42129: PPUSH
42130: LD_VAR 0 8
42134: PPUSH
42135: LD_VAR 0 7
42139: PUSH
42140: LD_VAR 0 9
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PPUSH
42149: CALL_OW 2
42153: ST_TO_ADDR
// break ;
42154: GO 42158
// end ; end ;
42156: GO 42095
42158: POP
42159: POP
// end ; end ;
42160: GO 41959
42162: POP
42163: POP
// if result and not asc then
42164: LD_VAR 0 6
42168: PUSH
42169: LD_VAR 0 4
42173: NOT
42174: AND
42175: IFFALSE 42250
// begin tmp := result ;
42177: LD_ADDR_VAR 0 9
42181: PUSH
42182: LD_VAR 0 6
42186: ST_TO_ADDR
// for i = tmp downto 1 do
42187: LD_ADDR_VAR 0 7
42191: PUSH
42192: DOUBLE
42193: LD_VAR 0 9
42197: INC
42198: ST_TO_ADDR
42199: LD_INT 1
42201: PUSH
42202: FOR_DOWNTO
42203: IFFALSE 42248
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42205: LD_ADDR_VAR 0 6
42209: PUSH
42210: LD_VAR 0 6
42214: PPUSH
42215: LD_VAR 0 9
42219: PUSH
42220: LD_VAR 0 7
42224: MINUS
42225: PUSH
42226: LD_INT 1
42228: PLUS
42229: PPUSH
42230: LD_VAR 0 9
42234: PUSH
42235: LD_VAR 0 7
42239: ARRAY
42240: PPUSH
42241: CALL_OW 1
42245: ST_TO_ADDR
42246: GO 42202
42248: POP
42249: POP
// end ; tmp := [ ] ;
42250: LD_ADDR_VAR 0 9
42254: PUSH
42255: EMPTY
42256: ST_TO_ADDR
// if mode then
42257: LD_VAR 0 5
42261: IFFALSE 42330
// begin for i = 1 to result do
42263: LD_ADDR_VAR 0 7
42267: PUSH
42268: DOUBLE
42269: LD_INT 1
42271: DEC
42272: ST_TO_ADDR
42273: LD_VAR 0 6
42277: PUSH
42278: FOR_TO
42279: IFFALSE 42318
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42281: LD_ADDR_VAR 0 9
42285: PUSH
42286: LD_VAR 0 9
42290: PPUSH
42291: LD_VAR 0 7
42295: PPUSH
42296: LD_VAR 0 6
42300: PUSH
42301: LD_VAR 0 7
42305: ARRAY
42306: PUSH
42307: LD_INT 1
42309: ARRAY
42310: PPUSH
42311: CALL_OW 1
42315: ST_TO_ADDR
42316: GO 42278
42318: POP
42319: POP
// result := tmp ;
42320: LD_ADDR_VAR 0 6
42324: PUSH
42325: LD_VAR 0 9
42329: ST_TO_ADDR
// end ; end ;
42330: LD_VAR 0 6
42334: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42335: LD_INT 0
42337: PPUSH
42338: PPUSH
42339: PPUSH
42340: PPUSH
42341: PPUSH
42342: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42343: LD_ADDR_VAR 0 5
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: ST_TO_ADDR
// if not x or not y then
42365: LD_VAR 0 2
42369: NOT
42370: PUSH
42371: LD_VAR 0 3
42375: NOT
42376: OR
42377: IFFALSE 42381
// exit ;
42379: GO 44031
// if not range then
42381: LD_VAR 0 4
42385: NOT
42386: IFFALSE 42396
// range := 10 ;
42388: LD_ADDR_VAR 0 4
42392: PUSH
42393: LD_INT 10
42395: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42396: LD_ADDR_VAR 0 8
42400: PUSH
42401: LD_INT 81
42403: PUSH
42404: LD_VAR 0 1
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 92
42415: PUSH
42416: LD_VAR 0 2
42420: PUSH
42421: LD_VAR 0 3
42425: PUSH
42426: LD_VAR 0 4
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 21
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: PPUSH
42459: CALL_OW 69
42463: ST_TO_ADDR
// if not tmp then
42464: LD_VAR 0 8
42468: NOT
42469: IFFALSE 42473
// exit ;
42471: GO 44031
// for i in tmp do
42473: LD_ADDR_VAR 0 6
42477: PUSH
42478: LD_VAR 0 8
42482: PUSH
42483: FOR_IN
42484: IFFALSE 44006
// begin points := [ 0 , 0 , 0 ] ;
42486: LD_ADDR_VAR 0 9
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// bpoints := 1 ;
42505: LD_ADDR_VAR 0 10
42509: PUSH
42510: LD_INT 1
42512: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42513: LD_VAR 0 6
42517: PPUSH
42518: CALL_OW 247
42522: PUSH
42523: LD_INT 1
42525: DOUBLE
42526: EQUAL
42527: IFTRUE 42531
42529: GO 43109
42531: POP
// begin if GetClass ( i ) = 1 then
42532: LD_VAR 0 6
42536: PPUSH
42537: CALL_OW 257
42541: PUSH
42542: LD_INT 1
42544: EQUAL
42545: IFFALSE 42566
// points := [ 10 , 5 , 3 ] ;
42547: LD_ADDR_VAR 0 9
42551: PUSH
42552: LD_INT 10
42554: PUSH
42555: LD_INT 5
42557: PUSH
42558: LD_INT 3
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42566: LD_VAR 0 6
42570: PPUSH
42571: CALL_OW 257
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 4
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: IN
42590: IFFALSE 42611
// points := [ 3 , 2 , 1 ] ;
42592: LD_ADDR_VAR 0 9
42596: PUSH
42597: LD_INT 3
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: LIST
42610: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42611: LD_VAR 0 6
42615: PPUSH
42616: CALL_OW 257
42620: PUSH
42621: LD_INT 5
42623: EQUAL
42624: IFFALSE 42645
// points := [ 130 , 5 , 2 ] ;
42626: LD_ADDR_VAR 0 9
42630: PUSH
42631: LD_INT 130
42633: PUSH
42634: LD_INT 5
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42645: LD_VAR 0 6
42649: PPUSH
42650: CALL_OW 257
42654: PUSH
42655: LD_INT 8
42657: EQUAL
42658: IFFALSE 42679
// points := [ 35 , 35 , 30 ] ;
42660: LD_ADDR_VAR 0 9
42664: PUSH
42665: LD_INT 35
42667: PUSH
42668: LD_INT 35
42670: PUSH
42671: LD_INT 30
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42679: LD_VAR 0 6
42683: PPUSH
42684: CALL_OW 257
42688: PUSH
42689: LD_INT 9
42691: EQUAL
42692: IFFALSE 42713
// points := [ 20 , 55 , 40 ] ;
42694: LD_ADDR_VAR 0 9
42698: PUSH
42699: LD_INT 20
42701: PUSH
42702: LD_INT 55
42704: PUSH
42705: LD_INT 40
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42713: LD_VAR 0 6
42717: PPUSH
42718: CALL_OW 257
42722: PUSH
42723: LD_INT 12
42725: PUSH
42726: LD_INT 16
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: IN
42733: IFFALSE 42754
// points := [ 5 , 3 , 2 ] ;
42735: LD_ADDR_VAR 0 9
42739: PUSH
42740: LD_INT 5
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42754: LD_VAR 0 6
42758: PPUSH
42759: CALL_OW 257
42763: PUSH
42764: LD_INT 17
42766: EQUAL
42767: IFFALSE 42788
// points := [ 100 , 50 , 75 ] ;
42769: LD_ADDR_VAR 0 9
42773: PUSH
42774: LD_INT 100
42776: PUSH
42777: LD_INT 50
42779: PUSH
42780: LD_INT 75
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42788: LD_VAR 0 6
42792: PPUSH
42793: CALL_OW 257
42797: PUSH
42798: LD_INT 15
42800: EQUAL
42801: IFFALSE 42822
// points := [ 10 , 5 , 3 ] ;
42803: LD_ADDR_VAR 0 9
42807: PUSH
42808: LD_INT 10
42810: PUSH
42811: LD_INT 5
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42822: LD_VAR 0 6
42826: PPUSH
42827: CALL_OW 257
42831: PUSH
42832: LD_INT 14
42834: EQUAL
42835: IFFALSE 42856
// points := [ 10 , 0 , 0 ] ;
42837: LD_ADDR_VAR 0 9
42841: PUSH
42842: LD_INT 10
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42856: LD_VAR 0 6
42860: PPUSH
42861: CALL_OW 257
42865: PUSH
42866: LD_INT 11
42868: EQUAL
42869: IFFALSE 42890
// points := [ 30 , 10 , 5 ] ;
42871: LD_ADDR_VAR 0 9
42875: PUSH
42876: LD_INT 30
42878: PUSH
42879: LD_INT 10
42881: PUSH
42882: LD_INT 5
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42890: LD_VAR 0 1
42894: PPUSH
42895: LD_INT 5
42897: PPUSH
42898: CALL_OW 321
42902: PUSH
42903: LD_INT 2
42905: EQUAL
42906: IFFALSE 42923
// bpoints := bpoints * 1.8 ;
42908: LD_ADDR_VAR 0 10
42912: PUSH
42913: LD_VAR 0 10
42917: PUSH
42918: LD_REAL  1.80000000000000E+0000
42921: MUL
42922: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42923: LD_VAR 0 6
42927: PPUSH
42928: CALL_OW 257
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: LD_INT 4
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: IN
42951: PUSH
42952: LD_VAR 0 1
42956: PPUSH
42957: LD_INT 51
42959: PPUSH
42960: CALL_OW 321
42964: PUSH
42965: LD_INT 2
42967: EQUAL
42968: AND
42969: IFFALSE 42986
// bpoints := bpoints * 1.2 ;
42971: LD_ADDR_VAR 0 10
42975: PUSH
42976: LD_VAR 0 10
42980: PUSH
42981: LD_REAL  1.20000000000000E+0000
42984: MUL
42985: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42986: LD_VAR 0 6
42990: PPUSH
42991: CALL_OW 257
42995: PUSH
42996: LD_INT 5
42998: PUSH
42999: LD_INT 7
43001: PUSH
43002: LD_INT 9
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: LIST
43009: IN
43010: PUSH
43011: LD_VAR 0 1
43015: PPUSH
43016: LD_INT 52
43018: PPUSH
43019: CALL_OW 321
43023: PUSH
43024: LD_INT 2
43026: EQUAL
43027: AND
43028: IFFALSE 43045
// bpoints := bpoints * 1.5 ;
43030: LD_ADDR_VAR 0 10
43034: PUSH
43035: LD_VAR 0 10
43039: PUSH
43040: LD_REAL  1.50000000000000E+0000
43043: MUL
43044: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43045: LD_VAR 0 1
43049: PPUSH
43050: LD_INT 66
43052: PPUSH
43053: CALL_OW 321
43057: PUSH
43058: LD_INT 2
43060: EQUAL
43061: IFFALSE 43078
// bpoints := bpoints * 1.1 ;
43063: LD_ADDR_VAR 0 10
43067: PUSH
43068: LD_VAR 0 10
43072: PUSH
43073: LD_REAL  1.10000000000000E+0000
43076: MUL
43077: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43078: LD_ADDR_VAR 0 10
43082: PUSH
43083: LD_VAR 0 10
43087: PUSH
43088: LD_VAR 0 6
43092: PPUSH
43093: LD_INT 1
43095: PPUSH
43096: CALL_OW 259
43100: PUSH
43101: LD_REAL  1.15000000000000E+0000
43104: MUL
43105: MUL
43106: ST_TO_ADDR
// end ; unit_vehicle :
43107: GO 43935
43109: LD_INT 2
43111: DOUBLE
43112: EQUAL
43113: IFTRUE 43117
43115: GO 43923
43117: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43118: LD_VAR 0 6
43122: PPUSH
43123: CALL_OW 264
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 42
43133: PUSH
43134: LD_INT 24
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: IN
43142: IFFALSE 43163
// points := [ 25 , 5 , 3 ] ;
43144: LD_ADDR_VAR 0 9
43148: PUSH
43149: LD_INT 25
43151: PUSH
43152: LD_INT 5
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43163: LD_VAR 0 6
43167: PPUSH
43168: CALL_OW 264
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: LD_INT 43
43178: PUSH
43179: LD_INT 25
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: LIST
43186: IN
43187: IFFALSE 43208
// points := [ 40 , 15 , 5 ] ;
43189: LD_ADDR_VAR 0 9
43193: PUSH
43194: LD_INT 40
43196: PUSH
43197: LD_INT 15
43199: PUSH
43200: LD_INT 5
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43208: LD_VAR 0 6
43212: PPUSH
43213: CALL_OW 264
43217: PUSH
43218: LD_INT 3
43220: PUSH
43221: LD_INT 23
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: IN
43228: IFFALSE 43249
// points := [ 7 , 25 , 8 ] ;
43230: LD_ADDR_VAR 0 9
43234: PUSH
43235: LD_INT 7
43237: PUSH
43238: LD_INT 25
43240: PUSH
43241: LD_INT 8
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: LIST
43248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43249: LD_VAR 0 6
43253: PPUSH
43254: CALL_OW 264
43258: PUSH
43259: LD_INT 5
43261: PUSH
43262: LD_INT 27
43264: PUSH
43265: LD_INT 44
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: IN
43273: IFFALSE 43294
// points := [ 14 , 50 , 16 ] ;
43275: LD_ADDR_VAR 0 9
43279: PUSH
43280: LD_INT 14
43282: PUSH
43283: LD_INT 50
43285: PUSH
43286: LD_INT 16
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43294: LD_VAR 0 6
43298: PPUSH
43299: CALL_OW 264
43303: PUSH
43304: LD_INT 6
43306: PUSH
43307: LD_INT 46
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: IN
43314: IFFALSE 43335
// points := [ 32 , 120 , 70 ] ;
43316: LD_ADDR_VAR 0 9
43320: PUSH
43321: LD_INT 32
43323: PUSH
43324: LD_INT 120
43326: PUSH
43327: LD_INT 70
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43335: LD_VAR 0 6
43339: PPUSH
43340: CALL_OW 264
43344: PUSH
43345: LD_INT 7
43347: PUSH
43348: LD_INT 28
43350: PUSH
43351: LD_INT 45
43353: PUSH
43354: LD_INT 92
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: IN
43363: IFFALSE 43384
// points := [ 35 , 20 , 45 ] ;
43365: LD_ADDR_VAR 0 9
43369: PUSH
43370: LD_INT 35
43372: PUSH
43373: LD_INT 20
43375: PUSH
43376: LD_INT 45
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: LIST
43383: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43384: LD_VAR 0 6
43388: PPUSH
43389: CALL_OW 264
43393: PUSH
43394: LD_INT 47
43396: PUSH
43397: EMPTY
43398: LIST
43399: IN
43400: IFFALSE 43421
// points := [ 67 , 45 , 75 ] ;
43402: LD_ADDR_VAR 0 9
43406: PUSH
43407: LD_INT 67
43409: PUSH
43410: LD_INT 45
43412: PUSH
43413: LD_INT 75
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43421: LD_VAR 0 6
43425: PPUSH
43426: CALL_OW 264
43430: PUSH
43431: LD_INT 26
43433: PUSH
43434: EMPTY
43435: LIST
43436: IN
43437: IFFALSE 43458
// points := [ 120 , 30 , 80 ] ;
43439: LD_ADDR_VAR 0 9
43443: PUSH
43444: LD_INT 120
43446: PUSH
43447: LD_INT 30
43449: PUSH
43450: LD_INT 80
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: LIST
43457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43458: LD_VAR 0 6
43462: PPUSH
43463: CALL_OW 264
43467: PUSH
43468: LD_INT 22
43470: PUSH
43471: EMPTY
43472: LIST
43473: IN
43474: IFFALSE 43495
// points := [ 40 , 1 , 1 ] ;
43476: LD_ADDR_VAR 0 9
43480: PUSH
43481: LD_INT 40
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43495: LD_VAR 0 6
43499: PPUSH
43500: CALL_OW 264
43504: PUSH
43505: LD_INT 29
43507: PUSH
43508: EMPTY
43509: LIST
43510: IN
43511: IFFALSE 43532
// points := [ 70 , 200 , 400 ] ;
43513: LD_ADDR_VAR 0 9
43517: PUSH
43518: LD_INT 70
43520: PUSH
43521: LD_INT 200
43523: PUSH
43524: LD_INT 400
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43532: LD_VAR 0 6
43536: PPUSH
43537: CALL_OW 264
43541: PUSH
43542: LD_INT 14
43544: PUSH
43545: LD_INT 53
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: IN
43552: IFFALSE 43573
// points := [ 40 , 10 , 20 ] ;
43554: LD_ADDR_VAR 0 9
43558: PUSH
43559: LD_INT 40
43561: PUSH
43562: LD_INT 10
43564: PUSH
43565: LD_INT 20
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43573: LD_VAR 0 6
43577: PPUSH
43578: CALL_OW 264
43582: PUSH
43583: LD_INT 9
43585: PUSH
43586: EMPTY
43587: LIST
43588: IN
43589: IFFALSE 43610
// points := [ 5 , 70 , 20 ] ;
43591: LD_ADDR_VAR 0 9
43595: PUSH
43596: LD_INT 5
43598: PUSH
43599: LD_INT 70
43601: PUSH
43602: LD_INT 20
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43610: LD_VAR 0 6
43614: PPUSH
43615: CALL_OW 264
43619: PUSH
43620: LD_INT 10
43622: PUSH
43623: EMPTY
43624: LIST
43625: IN
43626: IFFALSE 43647
// points := [ 35 , 110 , 70 ] ;
43628: LD_ADDR_VAR 0 9
43632: PUSH
43633: LD_INT 35
43635: PUSH
43636: LD_INT 110
43638: PUSH
43639: LD_INT 70
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43647: LD_VAR 0 6
43651: PPUSH
43652: CALL_OW 265
43656: PUSH
43657: LD_INT 25
43659: EQUAL
43660: IFFALSE 43681
// points := [ 80 , 65 , 100 ] ;
43662: LD_ADDR_VAR 0 9
43666: PUSH
43667: LD_INT 80
43669: PUSH
43670: LD_INT 65
43672: PUSH
43673: LD_INT 100
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43681: LD_VAR 0 6
43685: PPUSH
43686: CALL_OW 263
43690: PUSH
43691: LD_INT 1
43693: EQUAL
43694: IFFALSE 43729
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43696: LD_ADDR_VAR 0 10
43700: PUSH
43701: LD_VAR 0 10
43705: PUSH
43706: LD_VAR 0 6
43710: PPUSH
43711: CALL_OW 311
43715: PPUSH
43716: LD_INT 3
43718: PPUSH
43719: CALL_OW 259
43723: PUSH
43724: LD_INT 4
43726: MUL
43727: MUL
43728: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43729: LD_VAR 0 6
43733: PPUSH
43734: CALL_OW 263
43738: PUSH
43739: LD_INT 2
43741: EQUAL
43742: IFFALSE 43793
// begin j := IsControledBy ( i ) ;
43744: LD_ADDR_VAR 0 7
43748: PUSH
43749: LD_VAR 0 6
43753: PPUSH
43754: CALL_OW 312
43758: ST_TO_ADDR
// if j then
43759: LD_VAR 0 7
43763: IFFALSE 43793
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43765: LD_ADDR_VAR 0 10
43769: PUSH
43770: LD_VAR 0 10
43774: PUSH
43775: LD_VAR 0 7
43779: PPUSH
43780: LD_INT 3
43782: PPUSH
43783: CALL_OW 259
43787: PUSH
43788: LD_INT 3
43790: MUL
43791: MUL
43792: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43793: LD_VAR 0 6
43797: PPUSH
43798: CALL_OW 264
43802: PUSH
43803: LD_INT 5
43805: PUSH
43806: LD_INT 6
43808: PUSH
43809: LD_INT 46
43811: PUSH
43812: LD_INT 44
43814: PUSH
43815: LD_INT 47
43817: PUSH
43818: LD_INT 45
43820: PUSH
43821: LD_INT 28
43823: PUSH
43824: LD_INT 7
43826: PUSH
43827: LD_INT 27
43829: PUSH
43830: LD_INT 29
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: IN
43845: PUSH
43846: LD_VAR 0 1
43850: PPUSH
43851: LD_INT 52
43853: PPUSH
43854: CALL_OW 321
43858: PUSH
43859: LD_INT 2
43861: EQUAL
43862: AND
43863: IFFALSE 43880
// bpoints := bpoints * 1.2 ;
43865: LD_ADDR_VAR 0 10
43869: PUSH
43870: LD_VAR 0 10
43874: PUSH
43875: LD_REAL  1.20000000000000E+0000
43878: MUL
43879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43880: LD_VAR 0 6
43884: PPUSH
43885: CALL_OW 264
43889: PUSH
43890: LD_INT 6
43892: PUSH
43893: LD_INT 46
43895: PUSH
43896: LD_INT 47
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: IN
43904: IFFALSE 43921
// bpoints := bpoints * 1.2 ;
43906: LD_ADDR_VAR 0 10
43910: PUSH
43911: LD_VAR 0 10
43915: PUSH
43916: LD_REAL  1.20000000000000E+0000
43919: MUL
43920: ST_TO_ADDR
// end ; unit_building :
43921: GO 43935
43923: LD_INT 3
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43931
43929: GO 43934
43931: POP
// ; end ;
43932: GO 43935
43934: POP
// for j = 1 to 3 do
43935: LD_ADDR_VAR 0 7
43939: PUSH
43940: DOUBLE
43941: LD_INT 1
43943: DEC
43944: ST_TO_ADDR
43945: LD_INT 3
43947: PUSH
43948: FOR_TO
43949: IFFALSE 44002
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43951: LD_ADDR_VAR 0 5
43955: PUSH
43956: LD_VAR 0 5
43960: PPUSH
43961: LD_VAR 0 7
43965: PPUSH
43966: LD_VAR 0 5
43970: PUSH
43971: LD_VAR 0 7
43975: ARRAY
43976: PUSH
43977: LD_VAR 0 9
43981: PUSH
43982: LD_VAR 0 7
43986: ARRAY
43987: PUSH
43988: LD_VAR 0 10
43992: MUL
43993: PLUS
43994: PPUSH
43995: CALL_OW 1
43999: ST_TO_ADDR
44000: GO 43948
44002: POP
44003: POP
// end ;
44004: GO 42483
44006: POP
44007: POP
// result := Replace ( result , 4 , tmp ) ;
44008: LD_ADDR_VAR 0 5
44012: PUSH
44013: LD_VAR 0 5
44017: PPUSH
44018: LD_INT 4
44020: PPUSH
44021: LD_VAR 0 8
44025: PPUSH
44026: CALL_OW 1
44030: ST_TO_ADDR
// end ;
44031: LD_VAR 0 5
44035: RET
// export function DangerAtRange ( unit , range ) ; begin
44036: LD_INT 0
44038: PPUSH
// if not unit then
44039: LD_VAR 0 1
44043: NOT
44044: IFFALSE 44048
// exit ;
44046: GO 44093
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44048: LD_ADDR_VAR 0 3
44052: PUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 255
44062: PPUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 250
44072: PPUSH
44073: LD_VAR 0 1
44077: PPUSH
44078: CALL_OW 251
44082: PPUSH
44083: LD_VAR 0 2
44087: PPUSH
44088: CALL 42335 0 4
44092: ST_TO_ADDR
// end ;
44093: LD_VAR 0 3
44097: RET
// export function DangerInArea ( side , area ) ; begin
44098: LD_INT 0
44100: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44101: LD_ADDR_VAR 0 3
44105: PUSH
44106: LD_VAR 0 2
44110: PPUSH
44111: LD_INT 81
44113: PUSH
44114: LD_VAR 0 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PPUSH
44123: CALL_OW 70
44127: ST_TO_ADDR
// end ;
44128: LD_VAR 0 3
44132: RET
// export function IsExtension ( b ) ; begin
44133: LD_INT 0
44135: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44136: LD_ADDR_VAR 0 2
44140: PUSH
44141: LD_VAR 0 1
44145: PUSH
44146: LD_INT 23
44148: PUSH
44149: LD_INT 20
44151: PUSH
44152: LD_INT 22
44154: PUSH
44155: LD_INT 17
44157: PUSH
44158: LD_INT 24
44160: PUSH
44161: LD_INT 21
44163: PUSH
44164: LD_INT 19
44166: PUSH
44167: LD_INT 16
44169: PUSH
44170: LD_INT 25
44172: PUSH
44173: LD_INT 18
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: IN
44188: ST_TO_ADDR
// end ;
44189: LD_VAR 0 2
44193: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44194: LD_INT 0
44196: PPUSH
44197: PPUSH
44198: PPUSH
// result := [ ] ;
44199: LD_ADDR_VAR 0 4
44203: PUSH
44204: EMPTY
44205: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44206: LD_ADDR_VAR 0 5
44210: PUSH
44211: LD_VAR 0 2
44215: PPUSH
44216: LD_INT 21
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PPUSH
44226: CALL_OW 70
44230: ST_TO_ADDR
// if not tmp then
44231: LD_VAR 0 5
44235: NOT
44236: IFFALSE 44240
// exit ;
44238: GO 44304
// if checkLink then
44240: LD_VAR 0 3
44244: IFFALSE 44294
// begin for i in tmp do
44246: LD_ADDR_VAR 0 6
44250: PUSH
44251: LD_VAR 0 5
44255: PUSH
44256: FOR_IN
44257: IFFALSE 44292
// if GetBase ( i ) <> base then
44259: LD_VAR 0 6
44263: PPUSH
44264: CALL_OW 274
44268: PUSH
44269: LD_VAR 0 1
44273: NONEQUAL
44274: IFFALSE 44290
// ComLinkToBase ( base , i ) ;
44276: LD_VAR 0 1
44280: PPUSH
44281: LD_VAR 0 6
44285: PPUSH
44286: CALL_OW 169
44290: GO 44256
44292: POP
44293: POP
// end ; result := tmp ;
44294: LD_ADDR_VAR 0 4
44298: PUSH
44299: LD_VAR 0 5
44303: ST_TO_ADDR
// end ;
44304: LD_VAR 0 4
44308: RET
// export function ComComplete ( units , b ) ; var i ; begin
44309: LD_INT 0
44311: PPUSH
44312: PPUSH
// if not units then
44313: LD_VAR 0 1
44317: NOT
44318: IFFALSE 44322
// exit ;
44320: GO 44412
// for i in units do
44322: LD_ADDR_VAR 0 4
44326: PUSH
44327: LD_VAR 0 1
44331: PUSH
44332: FOR_IN
44333: IFFALSE 44410
// if BuildingStatus ( b ) = bs_build then
44335: LD_VAR 0 2
44339: PPUSH
44340: CALL_OW 461
44344: PUSH
44345: LD_INT 1
44347: EQUAL
44348: IFFALSE 44408
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44350: LD_VAR 0 4
44354: PPUSH
44355: LD_STRING h
44357: PUSH
44358: LD_VAR 0 2
44362: PPUSH
44363: CALL_OW 250
44367: PUSH
44368: LD_VAR 0 2
44372: PPUSH
44373: CALL_OW 251
44377: PUSH
44378: LD_VAR 0 2
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: PPUSH
44404: CALL_OW 446
44408: GO 44332
44410: POP
44411: POP
// end ;
44412: LD_VAR 0 3
44416: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44417: LD_INT 0
44419: PPUSH
44420: PPUSH
44421: PPUSH
44422: PPUSH
44423: PPUSH
44424: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44425: LD_VAR 0 1
44429: NOT
44430: PUSH
44431: LD_VAR 0 1
44435: PPUSH
44436: CALL_OW 263
44440: PUSH
44441: LD_INT 2
44443: NONEQUAL
44444: OR
44445: IFFALSE 44449
// exit ;
44447: GO 44765
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44449: LD_ADDR_VAR 0 6
44453: PUSH
44454: LD_INT 22
44456: PUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 255
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 30
44476: PUSH
44477: LD_INT 36
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 34
44486: PUSH
44487: LD_INT 31
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PPUSH
44503: CALL_OW 69
44507: ST_TO_ADDR
// if not tmp then
44508: LD_VAR 0 6
44512: NOT
44513: IFFALSE 44517
// exit ;
44515: GO 44765
// result := [ ] ;
44517: LD_ADDR_VAR 0 2
44521: PUSH
44522: EMPTY
44523: ST_TO_ADDR
// for i in tmp do
44524: LD_ADDR_VAR 0 3
44528: PUSH
44529: LD_VAR 0 6
44533: PUSH
44534: FOR_IN
44535: IFFALSE 44606
// begin t := UnitsInside ( i ) ;
44537: LD_ADDR_VAR 0 4
44541: PUSH
44542: LD_VAR 0 3
44546: PPUSH
44547: CALL_OW 313
44551: ST_TO_ADDR
// if t then
44552: LD_VAR 0 4
44556: IFFALSE 44604
// for j in t do
44558: LD_ADDR_VAR 0 7
44562: PUSH
44563: LD_VAR 0 4
44567: PUSH
44568: FOR_IN
44569: IFFALSE 44602
// result := Replace ( result , result + 1 , j ) ;
44571: LD_ADDR_VAR 0 2
44575: PUSH
44576: LD_VAR 0 2
44580: PPUSH
44581: LD_VAR 0 2
44585: PUSH
44586: LD_INT 1
44588: PLUS
44589: PPUSH
44590: LD_VAR 0 7
44594: PPUSH
44595: CALL_OW 1
44599: ST_TO_ADDR
44600: GO 44568
44602: POP
44603: POP
// end ;
44604: GO 44534
44606: POP
44607: POP
// if not result then
44608: LD_VAR 0 2
44612: NOT
44613: IFFALSE 44617
// exit ;
44615: GO 44765
// mech := result [ 1 ] ;
44617: LD_ADDR_VAR 0 5
44621: PUSH
44622: LD_VAR 0 2
44626: PUSH
44627: LD_INT 1
44629: ARRAY
44630: ST_TO_ADDR
// if result > 1 then
44631: LD_VAR 0 2
44635: PUSH
44636: LD_INT 1
44638: GREATER
44639: IFFALSE 44751
// begin for i = 2 to result do
44641: LD_ADDR_VAR 0 3
44645: PUSH
44646: DOUBLE
44647: LD_INT 2
44649: DEC
44650: ST_TO_ADDR
44651: LD_VAR 0 2
44655: PUSH
44656: FOR_TO
44657: IFFALSE 44749
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44659: LD_ADDR_VAR 0 4
44663: PUSH
44664: LD_VAR 0 2
44668: PUSH
44669: LD_VAR 0 3
44673: ARRAY
44674: PPUSH
44675: LD_INT 3
44677: PPUSH
44678: CALL_OW 259
44682: PUSH
44683: LD_VAR 0 2
44687: PUSH
44688: LD_VAR 0 3
44692: ARRAY
44693: PPUSH
44694: CALL_OW 432
44698: MINUS
44699: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44700: LD_VAR 0 4
44704: PUSH
44705: LD_VAR 0 5
44709: PPUSH
44710: LD_INT 3
44712: PPUSH
44713: CALL_OW 259
44717: PUSH
44718: LD_VAR 0 5
44722: PPUSH
44723: CALL_OW 432
44727: MINUS
44728: GREATEREQUAL
44729: IFFALSE 44747
// mech := result [ i ] ;
44731: LD_ADDR_VAR 0 5
44735: PUSH
44736: LD_VAR 0 2
44740: PUSH
44741: LD_VAR 0 3
44745: ARRAY
44746: ST_TO_ADDR
// end ;
44747: GO 44656
44749: POP
44750: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44751: LD_VAR 0 1
44755: PPUSH
44756: LD_VAR 0 5
44760: PPUSH
44761: CALL_OW 135
// end ;
44765: LD_VAR 0 2
44769: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44770: LD_INT 0
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
// result := [ ] ;
44785: LD_ADDR_VAR 0 7
44789: PUSH
44790: EMPTY
44791: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44792: LD_VAR 0 1
44796: PPUSH
44797: CALL_OW 266
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: IN
44812: NOT
44813: IFFALSE 44817
// exit ;
44815: GO 46451
// if name then
44817: LD_VAR 0 3
44821: IFFALSE 44837
// SetBName ( base_dep , name ) ;
44823: LD_VAR 0 1
44827: PPUSH
44828: LD_VAR 0 3
44832: PPUSH
44833: CALL_OW 500
// base := GetBase ( base_dep ) ;
44837: LD_ADDR_VAR 0 15
44841: PUSH
44842: LD_VAR 0 1
44846: PPUSH
44847: CALL_OW 274
44851: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44852: LD_ADDR_VAR 0 16
44856: PUSH
44857: LD_VAR 0 1
44861: PPUSH
44862: CALL_OW 255
44866: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44867: LD_ADDR_VAR 0 17
44871: PUSH
44872: LD_VAR 0 1
44876: PPUSH
44877: CALL_OW 248
44881: ST_TO_ADDR
// if sources then
44882: LD_VAR 0 5
44886: IFFALSE 44933
// for i = 1 to 3 do
44888: LD_ADDR_VAR 0 8
44892: PUSH
44893: DOUBLE
44894: LD_INT 1
44896: DEC
44897: ST_TO_ADDR
44898: LD_INT 3
44900: PUSH
44901: FOR_TO
44902: IFFALSE 44931
// AddResourceType ( base , i , sources [ i ] ) ;
44904: LD_VAR 0 15
44908: PPUSH
44909: LD_VAR 0 8
44913: PPUSH
44914: LD_VAR 0 5
44918: PUSH
44919: LD_VAR 0 8
44923: ARRAY
44924: PPUSH
44925: CALL_OW 276
44929: GO 44901
44931: POP
44932: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44933: LD_ADDR_VAR 0 18
44937: PUSH
44938: LD_VAR 0 15
44942: PPUSH
44943: LD_VAR 0 2
44947: PPUSH
44948: LD_INT 1
44950: PPUSH
44951: CALL 44194 0 3
44955: ST_TO_ADDR
// InitHc ;
44956: CALL_OW 19
// InitUc ;
44960: CALL_OW 18
// uc_side := side ;
44964: LD_ADDR_OWVAR 20
44968: PUSH
44969: LD_VAR 0 16
44973: ST_TO_ADDR
// uc_nation := nation ;
44974: LD_ADDR_OWVAR 21
44978: PUSH
44979: LD_VAR 0 17
44983: ST_TO_ADDR
// if buildings then
44984: LD_VAR 0 18
44988: IFFALSE 46310
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44990: LD_ADDR_VAR 0 19
44994: PUSH
44995: LD_VAR 0 18
44999: PPUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 30
45005: PUSH
45006: LD_INT 29
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 30
45015: PUSH
45016: LD_INT 30
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: PPUSH
45028: CALL_OW 72
45032: ST_TO_ADDR
// if tmp then
45033: LD_VAR 0 19
45037: IFFALSE 45085
// for i in tmp do
45039: LD_ADDR_VAR 0 8
45043: PUSH
45044: LD_VAR 0 19
45048: PUSH
45049: FOR_IN
45050: IFFALSE 45083
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45052: LD_VAR 0 8
45056: PPUSH
45057: CALL_OW 250
45061: PPUSH
45062: LD_VAR 0 8
45066: PPUSH
45067: CALL_OW 251
45071: PPUSH
45072: LD_VAR 0 16
45076: PPUSH
45077: CALL_OW 441
45081: GO 45049
45083: POP
45084: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45085: LD_VAR 0 18
45089: PPUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 30
45095: PUSH
45096: LD_INT 32
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 30
45105: PUSH
45106: LD_INT 33
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: PPUSH
45118: CALL_OW 72
45122: IFFALSE 45210
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45124: LD_ADDR_VAR 0 8
45128: PUSH
45129: LD_VAR 0 18
45133: PPUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 30
45139: PUSH
45140: LD_INT 32
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 30
45149: PUSH
45150: LD_INT 33
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: LIST
45161: PPUSH
45162: CALL_OW 72
45166: PUSH
45167: FOR_IN
45168: IFFALSE 45208
// begin if not GetBWeapon ( i ) then
45170: LD_VAR 0 8
45174: PPUSH
45175: CALL_OW 269
45179: NOT
45180: IFFALSE 45206
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45182: LD_VAR 0 8
45186: PPUSH
45187: LD_VAR 0 8
45191: PPUSH
45192: LD_VAR 0 2
45196: PPUSH
45197: CALL 46456 0 2
45201: PPUSH
45202: CALL_OW 431
// end ;
45206: GO 45167
45208: POP
45209: POP
// end ; for i = 1 to personel do
45210: LD_ADDR_VAR 0 8
45214: PUSH
45215: DOUBLE
45216: LD_INT 1
45218: DEC
45219: ST_TO_ADDR
45220: LD_VAR 0 6
45224: PUSH
45225: FOR_TO
45226: IFFALSE 46290
// begin if i > 4 then
45228: LD_VAR 0 8
45232: PUSH
45233: LD_INT 4
45235: GREATER
45236: IFFALSE 45240
// break ;
45238: GO 46290
// case i of 1 :
45240: LD_VAR 0 8
45244: PUSH
45245: LD_INT 1
45247: DOUBLE
45248: EQUAL
45249: IFTRUE 45253
45251: GO 45333
45253: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45254: LD_ADDR_VAR 0 12
45258: PUSH
45259: LD_VAR 0 18
45263: PPUSH
45264: LD_INT 22
45266: PUSH
45267: LD_VAR 0 16
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 58
45278: PUSH
45279: EMPTY
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 30
45287: PUSH
45288: LD_INT 32
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 30
45297: PUSH
45298: LD_INT 4
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 30
45307: PUSH
45308: LD_INT 5
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PPUSH
45326: CALL_OW 72
45330: ST_TO_ADDR
45331: GO 45555
45333: LD_INT 2
45335: DOUBLE
45336: EQUAL
45337: IFTRUE 45341
45339: GO 45403
45341: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45342: LD_ADDR_VAR 0 12
45346: PUSH
45347: LD_VAR 0 18
45351: PPUSH
45352: LD_INT 22
45354: PUSH
45355: LD_VAR 0 16
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 30
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 30
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PPUSH
45396: CALL_OW 72
45400: ST_TO_ADDR
45401: GO 45555
45403: LD_INT 3
45405: DOUBLE
45406: EQUAL
45407: IFTRUE 45411
45409: GO 45473
45411: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45412: LD_ADDR_VAR 0 12
45416: PUSH
45417: LD_VAR 0 18
45421: PPUSH
45422: LD_INT 22
45424: PUSH
45425: LD_VAR 0 16
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 30
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 30
45449: PUSH
45450: LD_INT 3
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PPUSH
45466: CALL_OW 72
45470: ST_TO_ADDR
45471: GO 45555
45473: LD_INT 4
45475: DOUBLE
45476: EQUAL
45477: IFTRUE 45481
45479: GO 45554
45481: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45482: LD_ADDR_VAR 0 12
45486: PUSH
45487: LD_VAR 0 18
45491: PPUSH
45492: LD_INT 22
45494: PUSH
45495: LD_VAR 0 16
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 30
45509: PUSH
45510: LD_INT 6
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 30
45519: PUSH
45520: LD_INT 7
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 30
45529: PUSH
45530: LD_INT 8
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PPUSH
45547: CALL_OW 72
45551: ST_TO_ADDR
45552: GO 45555
45554: POP
// if i = 1 then
45555: LD_VAR 0 8
45559: PUSH
45560: LD_INT 1
45562: EQUAL
45563: IFFALSE 45674
// begin tmp := [ ] ;
45565: LD_ADDR_VAR 0 19
45569: PUSH
45570: EMPTY
45571: ST_TO_ADDR
// for j in f do
45572: LD_ADDR_VAR 0 9
45576: PUSH
45577: LD_VAR 0 12
45581: PUSH
45582: FOR_IN
45583: IFFALSE 45656
// if GetBType ( j ) = b_bunker then
45585: LD_VAR 0 9
45589: PPUSH
45590: CALL_OW 266
45594: PUSH
45595: LD_INT 32
45597: EQUAL
45598: IFFALSE 45625
// tmp := Insert ( tmp , 1 , j ) else
45600: LD_ADDR_VAR 0 19
45604: PUSH
45605: LD_VAR 0 19
45609: PPUSH
45610: LD_INT 1
45612: PPUSH
45613: LD_VAR 0 9
45617: PPUSH
45618: CALL_OW 2
45622: ST_TO_ADDR
45623: GO 45654
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45625: LD_ADDR_VAR 0 19
45629: PUSH
45630: LD_VAR 0 19
45634: PPUSH
45635: LD_VAR 0 19
45639: PUSH
45640: LD_INT 1
45642: PLUS
45643: PPUSH
45644: LD_VAR 0 9
45648: PPUSH
45649: CALL_OW 2
45653: ST_TO_ADDR
45654: GO 45582
45656: POP
45657: POP
// if tmp then
45658: LD_VAR 0 19
45662: IFFALSE 45674
// f := tmp ;
45664: LD_ADDR_VAR 0 12
45668: PUSH
45669: LD_VAR 0 19
45673: ST_TO_ADDR
// end ; x := personel [ i ] ;
45674: LD_ADDR_VAR 0 13
45678: PUSH
45679: LD_VAR 0 6
45683: PUSH
45684: LD_VAR 0 8
45688: ARRAY
45689: ST_TO_ADDR
// if x = - 1 then
45690: LD_VAR 0 13
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: EQUAL
45699: IFFALSE 45908
// begin for j in f do
45701: LD_ADDR_VAR 0 9
45705: PUSH
45706: LD_VAR 0 12
45710: PUSH
45711: FOR_IN
45712: IFFALSE 45904
// repeat InitHc ;
45714: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45718: LD_VAR 0 9
45722: PPUSH
45723: CALL_OW 266
45727: PUSH
45728: LD_INT 5
45730: EQUAL
45731: IFFALSE 45801
// begin if UnitsInside ( j ) < 3 then
45733: LD_VAR 0 9
45737: PPUSH
45738: CALL_OW 313
45742: PUSH
45743: LD_INT 3
45745: LESS
45746: IFFALSE 45782
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45748: LD_INT 0
45750: PPUSH
45751: LD_INT 5
45753: PUSH
45754: LD_INT 8
45756: PUSH
45757: LD_INT 9
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: PUSH
45765: LD_VAR 0 17
45769: ARRAY
45770: PPUSH
45771: LD_VAR 0 4
45775: PPUSH
45776: CALL_OW 380
45780: GO 45799
// PrepareHuman ( false , i , skill ) ;
45782: LD_INT 0
45784: PPUSH
45785: LD_VAR 0 8
45789: PPUSH
45790: LD_VAR 0 4
45794: PPUSH
45795: CALL_OW 380
// end else
45799: GO 45818
// PrepareHuman ( false , i , skill ) ;
45801: LD_INT 0
45803: PPUSH
45804: LD_VAR 0 8
45808: PPUSH
45809: LD_VAR 0 4
45813: PPUSH
45814: CALL_OW 380
// un := CreateHuman ;
45818: LD_ADDR_VAR 0 14
45822: PUSH
45823: CALL_OW 44
45827: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45828: LD_ADDR_VAR 0 7
45832: PUSH
45833: LD_VAR 0 7
45837: PPUSH
45838: LD_INT 1
45840: PPUSH
45841: LD_VAR 0 14
45845: PPUSH
45846: CALL_OW 2
45850: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45851: LD_VAR 0 14
45855: PPUSH
45856: LD_VAR 0 9
45860: PPUSH
45861: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45865: LD_VAR 0 9
45869: PPUSH
45870: CALL_OW 313
45874: PUSH
45875: LD_INT 6
45877: EQUAL
45878: PUSH
45879: LD_VAR 0 9
45883: PPUSH
45884: CALL_OW 266
45888: PUSH
45889: LD_INT 32
45891: PUSH
45892: LD_INT 31
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: IN
45899: OR
45900: IFFALSE 45714
45902: GO 45711
45904: POP
45905: POP
// end else
45906: GO 46288
// for j = 1 to x do
45908: LD_ADDR_VAR 0 9
45912: PUSH
45913: DOUBLE
45914: LD_INT 1
45916: DEC
45917: ST_TO_ADDR
45918: LD_VAR 0 13
45922: PUSH
45923: FOR_TO
45924: IFFALSE 46286
// begin InitHc ;
45926: CALL_OW 19
// if not f then
45930: LD_VAR 0 12
45934: NOT
45935: IFFALSE 46024
// begin PrepareHuman ( false , i , skill ) ;
45937: LD_INT 0
45939: PPUSH
45940: LD_VAR 0 8
45944: PPUSH
45945: LD_VAR 0 4
45949: PPUSH
45950: CALL_OW 380
// un := CreateHuman ;
45954: LD_ADDR_VAR 0 14
45958: PUSH
45959: CALL_OW 44
45963: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45964: LD_ADDR_VAR 0 7
45968: PUSH
45969: LD_VAR 0 7
45973: PPUSH
45974: LD_INT 1
45976: PPUSH
45977: LD_VAR 0 14
45981: PPUSH
45982: CALL_OW 2
45986: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45987: LD_VAR 0 14
45991: PPUSH
45992: LD_VAR 0 1
45996: PPUSH
45997: CALL_OW 250
46001: PPUSH
46002: LD_VAR 0 1
46006: PPUSH
46007: CALL_OW 251
46011: PPUSH
46012: LD_INT 10
46014: PPUSH
46015: LD_INT 0
46017: PPUSH
46018: CALL_OW 50
// continue ;
46022: GO 45923
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46024: LD_VAR 0 12
46028: PUSH
46029: LD_INT 1
46031: ARRAY
46032: PPUSH
46033: CALL_OW 313
46037: PUSH
46038: LD_VAR 0 12
46042: PUSH
46043: LD_INT 1
46045: ARRAY
46046: PPUSH
46047: CALL_OW 266
46051: PUSH
46052: LD_INT 32
46054: PUSH
46055: LD_INT 31
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: IN
46062: AND
46063: PUSH
46064: LD_VAR 0 12
46068: PUSH
46069: LD_INT 1
46071: ARRAY
46072: PPUSH
46073: CALL_OW 313
46077: PUSH
46078: LD_INT 6
46080: EQUAL
46081: OR
46082: IFFALSE 46102
// f := Delete ( f , 1 ) ;
46084: LD_ADDR_VAR 0 12
46088: PUSH
46089: LD_VAR 0 12
46093: PPUSH
46094: LD_INT 1
46096: PPUSH
46097: CALL_OW 3
46101: ST_TO_ADDR
// if not f then
46102: LD_VAR 0 12
46106: NOT
46107: IFFALSE 46125
// begin x := x + 2 ;
46109: LD_ADDR_VAR 0 13
46113: PUSH
46114: LD_VAR 0 13
46118: PUSH
46119: LD_INT 2
46121: PLUS
46122: ST_TO_ADDR
// continue ;
46123: GO 45923
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46125: LD_VAR 0 12
46129: PUSH
46130: LD_INT 1
46132: ARRAY
46133: PPUSH
46134: CALL_OW 266
46138: PUSH
46139: LD_INT 5
46141: EQUAL
46142: IFFALSE 46216
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46144: LD_VAR 0 12
46148: PUSH
46149: LD_INT 1
46151: ARRAY
46152: PPUSH
46153: CALL_OW 313
46157: PUSH
46158: LD_INT 3
46160: LESS
46161: IFFALSE 46197
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46163: LD_INT 0
46165: PPUSH
46166: LD_INT 5
46168: PUSH
46169: LD_INT 8
46171: PUSH
46172: LD_INT 9
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: LIST
46179: PUSH
46180: LD_VAR 0 17
46184: ARRAY
46185: PPUSH
46186: LD_VAR 0 4
46190: PPUSH
46191: CALL_OW 380
46195: GO 46214
// PrepareHuman ( false , i , skill ) ;
46197: LD_INT 0
46199: PPUSH
46200: LD_VAR 0 8
46204: PPUSH
46205: LD_VAR 0 4
46209: PPUSH
46210: CALL_OW 380
// end else
46214: GO 46233
// PrepareHuman ( false , i , skill ) ;
46216: LD_INT 0
46218: PPUSH
46219: LD_VAR 0 8
46223: PPUSH
46224: LD_VAR 0 4
46228: PPUSH
46229: CALL_OW 380
// un := CreateHuman ;
46233: LD_ADDR_VAR 0 14
46237: PUSH
46238: CALL_OW 44
46242: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46243: LD_ADDR_VAR 0 7
46247: PUSH
46248: LD_VAR 0 7
46252: PPUSH
46253: LD_INT 1
46255: PPUSH
46256: LD_VAR 0 14
46260: PPUSH
46261: CALL_OW 2
46265: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46266: LD_VAR 0 14
46270: PPUSH
46271: LD_VAR 0 12
46275: PUSH
46276: LD_INT 1
46278: ARRAY
46279: PPUSH
46280: CALL_OW 52
// end ;
46284: GO 45923
46286: POP
46287: POP
// end ;
46288: GO 45225
46290: POP
46291: POP
// result := result ^ buildings ;
46292: LD_ADDR_VAR 0 7
46296: PUSH
46297: LD_VAR 0 7
46301: PUSH
46302: LD_VAR 0 18
46306: ADD
46307: ST_TO_ADDR
// end else
46308: GO 46451
// begin for i = 1 to personel do
46310: LD_ADDR_VAR 0 8
46314: PUSH
46315: DOUBLE
46316: LD_INT 1
46318: DEC
46319: ST_TO_ADDR
46320: LD_VAR 0 6
46324: PUSH
46325: FOR_TO
46326: IFFALSE 46449
// begin if i > 4 then
46328: LD_VAR 0 8
46332: PUSH
46333: LD_INT 4
46335: GREATER
46336: IFFALSE 46340
// break ;
46338: GO 46449
// x := personel [ i ] ;
46340: LD_ADDR_VAR 0 13
46344: PUSH
46345: LD_VAR 0 6
46349: PUSH
46350: LD_VAR 0 8
46354: ARRAY
46355: ST_TO_ADDR
// if x = - 1 then
46356: LD_VAR 0 13
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: EQUAL
46365: IFFALSE 46369
// continue ;
46367: GO 46325
// PrepareHuman ( false , i , skill ) ;
46369: LD_INT 0
46371: PPUSH
46372: LD_VAR 0 8
46376: PPUSH
46377: LD_VAR 0 4
46381: PPUSH
46382: CALL_OW 380
// un := CreateHuman ;
46386: LD_ADDR_VAR 0 14
46390: PUSH
46391: CALL_OW 44
46395: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46396: LD_VAR 0 14
46400: PPUSH
46401: LD_VAR 0 1
46405: PPUSH
46406: CALL_OW 250
46410: PPUSH
46411: LD_VAR 0 1
46415: PPUSH
46416: CALL_OW 251
46420: PPUSH
46421: LD_INT 10
46423: PPUSH
46424: LD_INT 0
46426: PPUSH
46427: CALL_OW 50
// result := result ^ un ;
46431: LD_ADDR_VAR 0 7
46435: PUSH
46436: LD_VAR 0 7
46440: PUSH
46441: LD_VAR 0 14
46445: ADD
46446: ST_TO_ADDR
// end ;
46447: GO 46325
46449: POP
46450: POP
// end ; end ;
46451: LD_VAR 0 7
46455: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46456: LD_INT 0
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
46469: PPUSH
46470: PPUSH
46471: PPUSH
46472: PPUSH
46473: PPUSH
// result := false ;
46474: LD_ADDR_VAR 0 3
46478: PUSH
46479: LD_INT 0
46481: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46482: LD_VAR 0 1
46486: NOT
46487: PUSH
46488: LD_VAR 0 1
46492: PPUSH
46493: CALL_OW 266
46497: PUSH
46498: LD_INT 32
46500: PUSH
46501: LD_INT 33
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: IN
46508: NOT
46509: OR
46510: IFFALSE 46514
// exit ;
46512: GO 47623
// nat := GetNation ( tower ) ;
46514: LD_ADDR_VAR 0 12
46518: PUSH
46519: LD_VAR 0 1
46523: PPUSH
46524: CALL_OW 248
46528: ST_TO_ADDR
// side := GetSide ( tower ) ;
46529: LD_ADDR_VAR 0 16
46533: PUSH
46534: LD_VAR 0 1
46538: PPUSH
46539: CALL_OW 255
46543: ST_TO_ADDR
// x := GetX ( tower ) ;
46544: LD_ADDR_VAR 0 10
46548: PUSH
46549: LD_VAR 0 1
46553: PPUSH
46554: CALL_OW 250
46558: ST_TO_ADDR
// y := GetY ( tower ) ;
46559: LD_ADDR_VAR 0 11
46563: PUSH
46564: LD_VAR 0 1
46568: PPUSH
46569: CALL_OW 251
46573: ST_TO_ADDR
// if not x or not y then
46574: LD_VAR 0 10
46578: NOT
46579: PUSH
46580: LD_VAR 0 11
46584: NOT
46585: OR
46586: IFFALSE 46590
// exit ;
46588: GO 47623
// weapon := 0 ;
46590: LD_ADDR_VAR 0 18
46594: PUSH
46595: LD_INT 0
46597: ST_TO_ADDR
// fac_list := [ ] ;
46598: LD_ADDR_VAR 0 17
46602: PUSH
46603: EMPTY
46604: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46605: LD_ADDR_VAR 0 6
46609: PUSH
46610: LD_VAR 0 1
46614: PPUSH
46615: CALL_OW 274
46619: PPUSH
46620: LD_VAR 0 2
46624: PPUSH
46625: LD_INT 0
46627: PPUSH
46628: CALL 44194 0 3
46632: PPUSH
46633: LD_INT 30
46635: PUSH
46636: LD_INT 3
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PPUSH
46643: CALL_OW 72
46647: ST_TO_ADDR
// if not factories then
46648: LD_VAR 0 6
46652: NOT
46653: IFFALSE 46657
// exit ;
46655: GO 47623
// for i in factories do
46657: LD_ADDR_VAR 0 8
46661: PUSH
46662: LD_VAR 0 6
46666: PUSH
46667: FOR_IN
46668: IFFALSE 46693
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46670: LD_ADDR_VAR 0 17
46674: PUSH
46675: LD_VAR 0 17
46679: PUSH
46680: LD_VAR 0 8
46684: PPUSH
46685: CALL_OW 478
46689: UNION
46690: ST_TO_ADDR
46691: GO 46667
46693: POP
46694: POP
// if not fac_list then
46695: LD_VAR 0 17
46699: NOT
46700: IFFALSE 46704
// exit ;
46702: GO 47623
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46704: LD_ADDR_VAR 0 5
46708: PUSH
46709: LD_INT 4
46711: PUSH
46712: LD_INT 5
46714: PUSH
46715: LD_INT 9
46717: PUSH
46718: LD_INT 10
46720: PUSH
46721: LD_INT 6
46723: PUSH
46724: LD_INT 7
46726: PUSH
46727: LD_INT 11
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 27
46741: PUSH
46742: LD_INT 28
46744: PUSH
46745: LD_INT 26
46747: PUSH
46748: LD_INT 30
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 43
46759: PUSH
46760: LD_INT 44
46762: PUSH
46763: LD_INT 46
46765: PUSH
46766: LD_INT 45
46768: PUSH
46769: LD_INT 47
46771: PUSH
46772: LD_INT 49
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: PUSH
46788: LD_VAR 0 12
46792: ARRAY
46793: ST_TO_ADDR
// list := list isect fac_list ;
46794: LD_ADDR_VAR 0 5
46798: PUSH
46799: LD_VAR 0 5
46803: PUSH
46804: LD_VAR 0 17
46808: ISECT
46809: ST_TO_ADDR
// if not list then
46810: LD_VAR 0 5
46814: NOT
46815: IFFALSE 46819
// exit ;
46817: GO 47623
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46819: LD_VAR 0 12
46823: PUSH
46824: LD_INT 3
46826: EQUAL
46827: PUSH
46828: LD_INT 49
46830: PUSH
46831: LD_VAR 0 5
46835: IN
46836: AND
46837: PUSH
46838: LD_INT 31
46840: PPUSH
46841: LD_VAR 0 16
46845: PPUSH
46846: CALL_OW 321
46850: PUSH
46851: LD_INT 2
46853: EQUAL
46854: AND
46855: IFFALSE 46915
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46857: LD_INT 22
46859: PUSH
46860: LD_VAR 0 16
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 35
46871: PUSH
46872: LD_INT 49
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 91
46881: PUSH
46882: LD_VAR 0 1
46886: PUSH
46887: LD_INT 10
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: PPUSH
46900: CALL_OW 69
46904: NOT
46905: IFFALSE 46915
// weapon := ru_time_lapser ;
46907: LD_ADDR_VAR 0 18
46911: PUSH
46912: LD_INT 49
46914: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46915: LD_VAR 0 12
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: IN
46930: PUSH
46931: LD_INT 11
46933: PUSH
46934: LD_VAR 0 5
46938: IN
46939: PUSH
46940: LD_INT 30
46942: PUSH
46943: LD_VAR 0 5
46947: IN
46948: OR
46949: AND
46950: PUSH
46951: LD_INT 6
46953: PPUSH
46954: LD_VAR 0 16
46958: PPUSH
46959: CALL_OW 321
46963: PUSH
46964: LD_INT 2
46966: EQUAL
46967: AND
46968: IFFALSE 47133
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46970: LD_INT 22
46972: PUSH
46973: LD_VAR 0 16
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 35
46987: PUSH
46988: LD_INT 11
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 35
46997: PUSH
46998: LD_INT 30
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 91
47012: PUSH
47013: LD_VAR 0 1
47017: PUSH
47018: LD_INT 18
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: PPUSH
47031: CALL_OW 69
47035: NOT
47036: PUSH
47037: LD_INT 22
47039: PUSH
47040: LD_VAR 0 16
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 30
47054: PUSH
47055: LD_INT 32
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 30
47064: PUSH
47065: LD_INT 33
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 91
47079: PUSH
47080: LD_VAR 0 1
47084: PUSH
47085: LD_INT 12
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: PPUSH
47101: CALL_OW 69
47105: PUSH
47106: LD_INT 2
47108: GREATER
47109: AND
47110: IFFALSE 47133
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47112: LD_ADDR_VAR 0 18
47116: PUSH
47117: LD_INT 11
47119: PUSH
47120: LD_INT 30
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_VAR 0 12
47131: ARRAY
47132: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47133: LD_VAR 0 18
47137: NOT
47138: PUSH
47139: LD_INT 40
47141: PPUSH
47142: LD_VAR 0 16
47146: PPUSH
47147: CALL_OW 321
47151: PUSH
47152: LD_INT 2
47154: EQUAL
47155: AND
47156: PUSH
47157: LD_INT 7
47159: PUSH
47160: LD_VAR 0 5
47164: IN
47165: PUSH
47166: LD_INT 28
47168: PUSH
47169: LD_VAR 0 5
47173: IN
47174: OR
47175: PUSH
47176: LD_INT 45
47178: PUSH
47179: LD_VAR 0 5
47183: IN
47184: OR
47185: AND
47186: IFFALSE 47440
// begin hex := GetHexInfo ( x , y ) ;
47188: LD_ADDR_VAR 0 4
47192: PUSH
47193: LD_VAR 0 10
47197: PPUSH
47198: LD_VAR 0 11
47202: PPUSH
47203: CALL_OW 546
47207: ST_TO_ADDR
// if hex [ 1 ] then
47208: LD_VAR 0 4
47212: PUSH
47213: LD_INT 1
47215: ARRAY
47216: IFFALSE 47220
// exit ;
47218: GO 47623
// height := hex [ 2 ] ;
47220: LD_ADDR_VAR 0 15
47224: PUSH
47225: LD_VAR 0 4
47229: PUSH
47230: LD_INT 2
47232: ARRAY
47233: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47234: LD_ADDR_VAR 0 14
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: LD_INT 5
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: ST_TO_ADDR
// for i in tmp do
47257: LD_ADDR_VAR 0 8
47261: PUSH
47262: LD_VAR 0 14
47266: PUSH
47267: FOR_IN
47268: IFFALSE 47438
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47270: LD_ADDR_VAR 0 9
47274: PUSH
47275: LD_VAR 0 10
47279: PPUSH
47280: LD_VAR 0 8
47284: PPUSH
47285: LD_INT 5
47287: PPUSH
47288: CALL_OW 272
47292: PUSH
47293: LD_VAR 0 11
47297: PPUSH
47298: LD_VAR 0 8
47302: PPUSH
47303: LD_INT 5
47305: PPUSH
47306: CALL_OW 273
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47315: LD_VAR 0 9
47319: PUSH
47320: LD_INT 1
47322: ARRAY
47323: PPUSH
47324: LD_VAR 0 9
47328: PUSH
47329: LD_INT 2
47331: ARRAY
47332: PPUSH
47333: CALL_OW 488
47337: IFFALSE 47436
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47339: LD_ADDR_VAR 0 4
47343: PUSH
47344: LD_VAR 0 9
47348: PUSH
47349: LD_INT 1
47351: ARRAY
47352: PPUSH
47353: LD_VAR 0 9
47357: PUSH
47358: LD_INT 2
47360: ARRAY
47361: PPUSH
47362: CALL_OW 546
47366: ST_TO_ADDR
// if hex [ 1 ] then
47367: LD_VAR 0 4
47371: PUSH
47372: LD_INT 1
47374: ARRAY
47375: IFFALSE 47379
// continue ;
47377: GO 47267
// h := hex [ 2 ] ;
47379: LD_ADDR_VAR 0 13
47383: PUSH
47384: LD_VAR 0 4
47388: PUSH
47389: LD_INT 2
47391: ARRAY
47392: ST_TO_ADDR
// if h + 7 < height then
47393: LD_VAR 0 13
47397: PUSH
47398: LD_INT 7
47400: PLUS
47401: PUSH
47402: LD_VAR 0 15
47406: LESS
47407: IFFALSE 47436
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47409: LD_ADDR_VAR 0 18
47413: PUSH
47414: LD_INT 7
47416: PUSH
47417: LD_INT 28
47419: PUSH
47420: LD_INT 45
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: PUSH
47428: LD_VAR 0 12
47432: ARRAY
47433: ST_TO_ADDR
// break ;
47434: GO 47438
// end ; end ; end ;
47436: GO 47267
47438: POP
47439: POP
// end ; if not weapon then
47440: LD_VAR 0 18
47444: NOT
47445: IFFALSE 47505
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47447: LD_ADDR_VAR 0 5
47451: PUSH
47452: LD_VAR 0 5
47456: PUSH
47457: LD_INT 11
47459: PUSH
47460: LD_INT 30
47462: PUSH
47463: LD_INT 49
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: DIFF
47471: ST_TO_ADDR
// if not list then
47472: LD_VAR 0 5
47476: NOT
47477: IFFALSE 47481
// exit ;
47479: GO 47623
// weapon := list [ rand ( 1 , list ) ] ;
47481: LD_ADDR_VAR 0 18
47485: PUSH
47486: LD_VAR 0 5
47490: PUSH
47491: LD_INT 1
47493: PPUSH
47494: LD_VAR 0 5
47498: PPUSH
47499: CALL_OW 12
47503: ARRAY
47504: ST_TO_ADDR
// end ; if weapon then
47505: LD_VAR 0 18
47509: IFFALSE 47623
// begin tmp := CostOfWeapon ( weapon ) ;
47511: LD_ADDR_VAR 0 14
47515: PUSH
47516: LD_VAR 0 18
47520: PPUSH
47521: CALL_OW 451
47525: ST_TO_ADDR
// j := GetBase ( tower ) ;
47526: LD_ADDR_VAR 0 9
47530: PUSH
47531: LD_VAR 0 1
47535: PPUSH
47536: CALL_OW 274
47540: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47541: LD_VAR 0 9
47545: PPUSH
47546: LD_INT 1
47548: PPUSH
47549: CALL_OW 275
47553: PUSH
47554: LD_VAR 0 14
47558: PUSH
47559: LD_INT 1
47561: ARRAY
47562: GREATEREQUAL
47563: PUSH
47564: LD_VAR 0 9
47568: PPUSH
47569: LD_INT 2
47571: PPUSH
47572: CALL_OW 275
47576: PUSH
47577: LD_VAR 0 14
47581: PUSH
47582: LD_INT 2
47584: ARRAY
47585: GREATEREQUAL
47586: AND
47587: PUSH
47588: LD_VAR 0 9
47592: PPUSH
47593: LD_INT 3
47595: PPUSH
47596: CALL_OW 275
47600: PUSH
47601: LD_VAR 0 14
47605: PUSH
47606: LD_INT 3
47608: ARRAY
47609: GREATEREQUAL
47610: AND
47611: IFFALSE 47623
// result := weapon ;
47613: LD_ADDR_VAR 0 3
47617: PUSH
47618: LD_VAR 0 18
47622: ST_TO_ADDR
// end ; end ;
47623: LD_VAR 0 3
47627: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47628: LD_INT 0
47630: PPUSH
47631: PPUSH
// result := true ;
47632: LD_ADDR_VAR 0 3
47636: PUSH
47637: LD_INT 1
47639: ST_TO_ADDR
// if array1 = array2 then
47640: LD_VAR 0 1
47644: PUSH
47645: LD_VAR 0 2
47649: EQUAL
47650: IFFALSE 47710
// begin for i = 1 to array1 do
47652: LD_ADDR_VAR 0 4
47656: PUSH
47657: DOUBLE
47658: LD_INT 1
47660: DEC
47661: ST_TO_ADDR
47662: LD_VAR 0 1
47666: PUSH
47667: FOR_TO
47668: IFFALSE 47706
// if array1 [ i ] <> array2 [ i ] then
47670: LD_VAR 0 1
47674: PUSH
47675: LD_VAR 0 4
47679: ARRAY
47680: PUSH
47681: LD_VAR 0 2
47685: PUSH
47686: LD_VAR 0 4
47690: ARRAY
47691: NONEQUAL
47692: IFFALSE 47704
// begin result := false ;
47694: LD_ADDR_VAR 0 3
47698: PUSH
47699: LD_INT 0
47701: ST_TO_ADDR
// break ;
47702: GO 47706
// end ;
47704: GO 47667
47706: POP
47707: POP
// end else
47708: GO 47718
// result := false ;
47710: LD_ADDR_VAR 0 3
47714: PUSH
47715: LD_INT 0
47717: ST_TO_ADDR
// end ;
47718: LD_VAR 0 3
47722: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47723: LD_INT 0
47725: PPUSH
47726: PPUSH
// if not array1 or not array2 then
47727: LD_VAR 0 1
47731: NOT
47732: PUSH
47733: LD_VAR 0 2
47737: NOT
47738: OR
47739: IFFALSE 47743
// exit ;
47741: GO 47807
// result := true ;
47743: LD_ADDR_VAR 0 3
47747: PUSH
47748: LD_INT 1
47750: ST_TO_ADDR
// for i = 1 to array1 do
47751: LD_ADDR_VAR 0 4
47755: PUSH
47756: DOUBLE
47757: LD_INT 1
47759: DEC
47760: ST_TO_ADDR
47761: LD_VAR 0 1
47765: PUSH
47766: FOR_TO
47767: IFFALSE 47805
// if array1 [ i ] <> array2 [ i ] then
47769: LD_VAR 0 1
47773: PUSH
47774: LD_VAR 0 4
47778: ARRAY
47779: PUSH
47780: LD_VAR 0 2
47784: PUSH
47785: LD_VAR 0 4
47789: ARRAY
47790: NONEQUAL
47791: IFFALSE 47803
// begin result := false ;
47793: LD_ADDR_VAR 0 3
47797: PUSH
47798: LD_INT 0
47800: ST_TO_ADDR
// break ;
47801: GO 47805
// end ;
47803: GO 47766
47805: POP
47806: POP
// end ;
47807: LD_VAR 0 3
47811: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47812: LD_INT 0
47814: PPUSH
47815: PPUSH
47816: PPUSH
// pom := GetBase ( fac ) ;
47817: LD_ADDR_VAR 0 5
47821: PUSH
47822: LD_VAR 0 1
47826: PPUSH
47827: CALL_OW 274
47831: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47832: LD_ADDR_VAR 0 4
47836: PUSH
47837: LD_VAR 0 2
47841: PUSH
47842: LD_INT 1
47844: ARRAY
47845: PPUSH
47846: LD_VAR 0 2
47850: PUSH
47851: LD_INT 2
47853: ARRAY
47854: PPUSH
47855: LD_VAR 0 2
47859: PUSH
47860: LD_INT 3
47862: ARRAY
47863: PPUSH
47864: LD_VAR 0 2
47868: PUSH
47869: LD_INT 4
47871: ARRAY
47872: PPUSH
47873: CALL_OW 449
47877: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47878: LD_ADDR_VAR 0 3
47882: PUSH
47883: LD_VAR 0 5
47887: PPUSH
47888: LD_INT 1
47890: PPUSH
47891: CALL_OW 275
47895: PUSH
47896: LD_VAR 0 4
47900: PUSH
47901: LD_INT 1
47903: ARRAY
47904: GREATEREQUAL
47905: PUSH
47906: LD_VAR 0 5
47910: PPUSH
47911: LD_INT 2
47913: PPUSH
47914: CALL_OW 275
47918: PUSH
47919: LD_VAR 0 4
47923: PUSH
47924: LD_INT 2
47926: ARRAY
47927: GREATEREQUAL
47928: AND
47929: PUSH
47930: LD_VAR 0 5
47934: PPUSH
47935: LD_INT 3
47937: PPUSH
47938: CALL_OW 275
47942: PUSH
47943: LD_VAR 0 4
47947: PUSH
47948: LD_INT 3
47950: ARRAY
47951: GREATEREQUAL
47952: AND
47953: ST_TO_ADDR
// end ;
47954: LD_VAR 0 3
47958: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47959: LD_INT 0
47961: PPUSH
47962: PPUSH
47963: PPUSH
47964: PPUSH
// pom := GetBase ( building ) ;
47965: LD_ADDR_VAR 0 3
47969: PUSH
47970: LD_VAR 0 1
47974: PPUSH
47975: CALL_OW 274
47979: ST_TO_ADDR
// if not pom then
47980: LD_VAR 0 3
47984: NOT
47985: IFFALSE 47989
// exit ;
47987: GO 48159
// btype := GetBType ( building ) ;
47989: LD_ADDR_VAR 0 5
47993: PUSH
47994: LD_VAR 0 1
47998: PPUSH
47999: CALL_OW 266
48003: ST_TO_ADDR
// if btype = b_armoury then
48004: LD_VAR 0 5
48008: PUSH
48009: LD_INT 4
48011: EQUAL
48012: IFFALSE 48022
// btype := b_barracks ;
48014: LD_ADDR_VAR 0 5
48018: PUSH
48019: LD_INT 5
48021: ST_TO_ADDR
// if btype = b_depot then
48022: LD_VAR 0 5
48026: PUSH
48027: LD_INT 0
48029: EQUAL
48030: IFFALSE 48040
// btype := b_warehouse ;
48032: LD_ADDR_VAR 0 5
48036: PUSH
48037: LD_INT 1
48039: ST_TO_ADDR
// if btype = b_workshop then
48040: LD_VAR 0 5
48044: PUSH
48045: LD_INT 2
48047: EQUAL
48048: IFFALSE 48058
// btype := b_factory ;
48050: LD_ADDR_VAR 0 5
48054: PUSH
48055: LD_INT 3
48057: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48058: LD_ADDR_VAR 0 4
48062: PUSH
48063: LD_VAR 0 5
48067: PPUSH
48068: LD_VAR 0 1
48072: PPUSH
48073: CALL_OW 248
48077: PPUSH
48078: CALL_OW 450
48082: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48083: LD_ADDR_VAR 0 2
48087: PUSH
48088: LD_VAR 0 3
48092: PPUSH
48093: LD_INT 1
48095: PPUSH
48096: CALL_OW 275
48100: PUSH
48101: LD_VAR 0 4
48105: PUSH
48106: LD_INT 1
48108: ARRAY
48109: GREATEREQUAL
48110: PUSH
48111: LD_VAR 0 3
48115: PPUSH
48116: LD_INT 2
48118: PPUSH
48119: CALL_OW 275
48123: PUSH
48124: LD_VAR 0 4
48128: PUSH
48129: LD_INT 2
48131: ARRAY
48132: GREATEREQUAL
48133: AND
48134: PUSH
48135: LD_VAR 0 3
48139: PPUSH
48140: LD_INT 3
48142: PPUSH
48143: CALL_OW 275
48147: PUSH
48148: LD_VAR 0 4
48152: PUSH
48153: LD_INT 3
48155: ARRAY
48156: GREATEREQUAL
48157: AND
48158: ST_TO_ADDR
// end ;
48159: LD_VAR 0 2
48163: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48164: LD_INT 0
48166: PPUSH
48167: PPUSH
48168: PPUSH
// pom := GetBase ( building ) ;
48169: LD_ADDR_VAR 0 4
48173: PUSH
48174: LD_VAR 0 1
48178: PPUSH
48179: CALL_OW 274
48183: ST_TO_ADDR
// if not pom then
48184: LD_VAR 0 4
48188: NOT
48189: IFFALSE 48193
// exit ;
48191: GO 48294
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48193: LD_ADDR_VAR 0 5
48197: PUSH
48198: LD_VAR 0 2
48202: PPUSH
48203: LD_VAR 0 1
48207: PPUSH
48208: CALL_OW 248
48212: PPUSH
48213: CALL_OW 450
48217: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48218: LD_ADDR_VAR 0 3
48222: PUSH
48223: LD_VAR 0 4
48227: PPUSH
48228: LD_INT 1
48230: PPUSH
48231: CALL_OW 275
48235: PUSH
48236: LD_VAR 0 5
48240: PUSH
48241: LD_INT 1
48243: ARRAY
48244: GREATEREQUAL
48245: PUSH
48246: LD_VAR 0 4
48250: PPUSH
48251: LD_INT 2
48253: PPUSH
48254: CALL_OW 275
48258: PUSH
48259: LD_VAR 0 5
48263: PUSH
48264: LD_INT 2
48266: ARRAY
48267: GREATEREQUAL
48268: AND
48269: PUSH
48270: LD_VAR 0 4
48274: PPUSH
48275: LD_INT 3
48277: PPUSH
48278: CALL_OW 275
48282: PUSH
48283: LD_VAR 0 5
48287: PUSH
48288: LD_INT 3
48290: ARRAY
48291: GREATEREQUAL
48292: AND
48293: ST_TO_ADDR
// end ;
48294: LD_VAR 0 3
48298: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48299: LD_INT 0
48301: PPUSH
48302: PPUSH
48303: PPUSH
48304: PPUSH
48305: PPUSH
48306: PPUSH
48307: PPUSH
48308: PPUSH
48309: PPUSH
48310: PPUSH
48311: PPUSH
// result := false ;
48312: LD_ADDR_VAR 0 8
48316: PUSH
48317: LD_INT 0
48319: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48320: LD_VAR 0 5
48324: NOT
48325: PUSH
48326: LD_VAR 0 1
48330: NOT
48331: OR
48332: PUSH
48333: LD_VAR 0 2
48337: NOT
48338: OR
48339: PUSH
48340: LD_VAR 0 3
48344: NOT
48345: OR
48346: IFFALSE 48350
// exit ;
48348: GO 49164
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48350: LD_ADDR_VAR 0 14
48354: PUSH
48355: LD_VAR 0 1
48359: PPUSH
48360: LD_VAR 0 2
48364: PPUSH
48365: LD_VAR 0 3
48369: PPUSH
48370: LD_VAR 0 4
48374: PPUSH
48375: LD_VAR 0 5
48379: PUSH
48380: LD_INT 1
48382: ARRAY
48383: PPUSH
48384: CALL_OW 248
48388: PPUSH
48389: LD_INT 0
48391: PPUSH
48392: CALL 50417 0 6
48396: ST_TO_ADDR
// if not hexes then
48397: LD_VAR 0 14
48401: NOT
48402: IFFALSE 48406
// exit ;
48404: GO 49164
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48406: LD_ADDR_VAR 0 17
48410: PUSH
48411: LD_VAR 0 5
48415: PPUSH
48416: LD_INT 22
48418: PUSH
48419: LD_VAR 0 13
48423: PPUSH
48424: CALL_OW 255
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 30
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 30
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PPUSH
48465: CALL_OW 72
48469: ST_TO_ADDR
// for i = 1 to hexes do
48470: LD_ADDR_VAR 0 9
48474: PUSH
48475: DOUBLE
48476: LD_INT 1
48478: DEC
48479: ST_TO_ADDR
48480: LD_VAR 0 14
48484: PUSH
48485: FOR_TO
48486: IFFALSE 49162
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48488: LD_ADDR_VAR 0 13
48492: PUSH
48493: LD_VAR 0 14
48497: PUSH
48498: LD_VAR 0 9
48502: ARRAY
48503: PUSH
48504: LD_INT 1
48506: ARRAY
48507: PPUSH
48508: LD_VAR 0 14
48512: PUSH
48513: LD_VAR 0 9
48517: ARRAY
48518: PUSH
48519: LD_INT 2
48521: ARRAY
48522: PPUSH
48523: CALL_OW 428
48527: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48528: LD_VAR 0 14
48532: PUSH
48533: LD_VAR 0 9
48537: ARRAY
48538: PUSH
48539: LD_INT 1
48541: ARRAY
48542: PPUSH
48543: LD_VAR 0 14
48547: PUSH
48548: LD_VAR 0 9
48552: ARRAY
48553: PUSH
48554: LD_INT 2
48556: ARRAY
48557: PPUSH
48558: CALL_OW 351
48562: PUSH
48563: LD_VAR 0 14
48567: PUSH
48568: LD_VAR 0 9
48572: ARRAY
48573: PUSH
48574: LD_INT 1
48576: ARRAY
48577: PPUSH
48578: LD_VAR 0 14
48582: PUSH
48583: LD_VAR 0 9
48587: ARRAY
48588: PUSH
48589: LD_INT 2
48591: ARRAY
48592: PPUSH
48593: CALL_OW 488
48597: NOT
48598: OR
48599: PUSH
48600: LD_VAR 0 13
48604: PPUSH
48605: CALL_OW 247
48609: PUSH
48610: LD_INT 3
48612: EQUAL
48613: OR
48614: IFFALSE 48620
// exit ;
48616: POP
48617: POP
48618: GO 49164
// if not tmp then
48620: LD_VAR 0 13
48624: NOT
48625: IFFALSE 48629
// continue ;
48627: GO 48485
// result := true ;
48629: LD_ADDR_VAR 0 8
48633: PUSH
48634: LD_INT 1
48636: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48637: LD_VAR 0 6
48641: PUSH
48642: LD_VAR 0 13
48646: PPUSH
48647: CALL_OW 247
48651: PUSH
48652: LD_INT 2
48654: EQUAL
48655: AND
48656: PUSH
48657: LD_VAR 0 13
48661: PPUSH
48662: CALL_OW 263
48666: PUSH
48667: LD_INT 1
48669: EQUAL
48670: AND
48671: IFFALSE 48835
// begin if IsDrivenBy ( tmp ) then
48673: LD_VAR 0 13
48677: PPUSH
48678: CALL_OW 311
48682: IFFALSE 48686
// continue ;
48684: GO 48485
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48686: LD_VAR 0 6
48690: PPUSH
48691: LD_INT 3
48693: PUSH
48694: LD_INT 60
48696: PUSH
48697: EMPTY
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: PUSH
48707: LD_INT 55
48709: PUSH
48710: EMPTY
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PPUSH
48721: CALL_OW 72
48725: IFFALSE 48833
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48727: LD_ADDR_VAR 0 18
48731: PUSH
48732: LD_VAR 0 6
48736: PPUSH
48737: LD_INT 3
48739: PUSH
48740: LD_INT 60
48742: PUSH
48743: EMPTY
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: LD_INT 55
48755: PUSH
48756: EMPTY
48757: LIST
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PPUSH
48767: CALL_OW 72
48771: PUSH
48772: LD_INT 1
48774: ARRAY
48775: ST_TO_ADDR
// if IsInUnit ( driver ) then
48776: LD_VAR 0 18
48780: PPUSH
48781: CALL_OW 310
48785: IFFALSE 48796
// ComExit ( driver ) ;
48787: LD_VAR 0 18
48791: PPUSH
48792: CALL 74209 0 1
// AddComEnterUnit ( driver , tmp ) ;
48796: LD_VAR 0 18
48800: PPUSH
48801: LD_VAR 0 13
48805: PPUSH
48806: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48810: LD_VAR 0 18
48814: PPUSH
48815: LD_VAR 0 7
48819: PPUSH
48820: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48824: LD_VAR 0 18
48828: PPUSH
48829: CALL_OW 181
// end ; continue ;
48833: GO 48485
// end ; if not cleaners or not tmp in cleaners then
48835: LD_VAR 0 6
48839: NOT
48840: PUSH
48841: LD_VAR 0 13
48845: PUSH
48846: LD_VAR 0 6
48850: IN
48851: NOT
48852: OR
48853: IFFALSE 49160
// begin if dep then
48855: LD_VAR 0 17
48859: IFFALSE 48995
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48861: LD_ADDR_VAR 0 16
48865: PUSH
48866: LD_VAR 0 17
48870: PUSH
48871: LD_INT 1
48873: ARRAY
48874: PPUSH
48875: CALL_OW 250
48879: PPUSH
48880: LD_VAR 0 17
48884: PUSH
48885: LD_INT 1
48887: ARRAY
48888: PPUSH
48889: CALL_OW 254
48893: PPUSH
48894: LD_INT 5
48896: PPUSH
48897: CALL_OW 272
48901: PUSH
48902: LD_VAR 0 17
48906: PUSH
48907: LD_INT 1
48909: ARRAY
48910: PPUSH
48911: CALL_OW 251
48915: PPUSH
48916: LD_VAR 0 17
48920: PUSH
48921: LD_INT 1
48923: ARRAY
48924: PPUSH
48925: CALL_OW 254
48929: PPUSH
48930: LD_INT 5
48932: PPUSH
48933: CALL_OW 273
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48942: LD_VAR 0 16
48946: PUSH
48947: LD_INT 1
48949: ARRAY
48950: PPUSH
48951: LD_VAR 0 16
48955: PUSH
48956: LD_INT 2
48958: ARRAY
48959: PPUSH
48960: CALL_OW 488
48964: IFFALSE 48995
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48966: LD_VAR 0 13
48970: PPUSH
48971: LD_VAR 0 16
48975: PUSH
48976: LD_INT 1
48978: ARRAY
48979: PPUSH
48980: LD_VAR 0 16
48984: PUSH
48985: LD_INT 2
48987: ARRAY
48988: PPUSH
48989: CALL_OW 111
// continue ;
48993: GO 48485
// end ; end ; r := GetDir ( tmp ) ;
48995: LD_ADDR_VAR 0 15
48999: PUSH
49000: LD_VAR 0 13
49004: PPUSH
49005: CALL_OW 254
49009: ST_TO_ADDR
// if r = 5 then
49010: LD_VAR 0 15
49014: PUSH
49015: LD_INT 5
49017: EQUAL
49018: IFFALSE 49028
// r := 0 ;
49020: LD_ADDR_VAR 0 15
49024: PUSH
49025: LD_INT 0
49027: ST_TO_ADDR
// for j = r to 5 do
49028: LD_ADDR_VAR 0 10
49032: PUSH
49033: DOUBLE
49034: LD_VAR 0 15
49038: DEC
49039: ST_TO_ADDR
49040: LD_INT 5
49042: PUSH
49043: FOR_TO
49044: IFFALSE 49158
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49046: LD_ADDR_VAR 0 11
49050: PUSH
49051: LD_VAR 0 13
49055: PPUSH
49056: CALL_OW 250
49060: PPUSH
49061: LD_VAR 0 10
49065: PPUSH
49066: LD_INT 2
49068: PPUSH
49069: CALL_OW 272
49073: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49074: LD_ADDR_VAR 0 12
49078: PUSH
49079: LD_VAR 0 13
49083: PPUSH
49084: CALL_OW 251
49088: PPUSH
49089: LD_VAR 0 10
49093: PPUSH
49094: LD_INT 2
49096: PPUSH
49097: CALL_OW 273
49101: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49102: LD_VAR 0 11
49106: PPUSH
49107: LD_VAR 0 12
49111: PPUSH
49112: CALL_OW 488
49116: PUSH
49117: LD_VAR 0 11
49121: PPUSH
49122: LD_VAR 0 12
49126: PPUSH
49127: CALL_OW 428
49131: NOT
49132: AND
49133: IFFALSE 49156
// begin ComMoveXY ( tmp , _x , _y ) ;
49135: LD_VAR 0 13
49139: PPUSH
49140: LD_VAR 0 11
49144: PPUSH
49145: LD_VAR 0 12
49149: PPUSH
49150: CALL_OW 111
// break ;
49154: GO 49158
// end ; end ;
49156: GO 49043
49158: POP
49159: POP
// end ; end ;
49160: GO 48485
49162: POP
49163: POP
// end ;
49164: LD_VAR 0 8
49168: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49169: LD_INT 0
49171: PPUSH
// result := true ;
49172: LD_ADDR_VAR 0 3
49176: PUSH
49177: LD_INT 1
49179: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49180: LD_VAR 0 2
49184: PUSH
49185: LD_INT 24
49187: DOUBLE
49188: EQUAL
49189: IFTRUE 49199
49191: LD_INT 33
49193: DOUBLE
49194: EQUAL
49195: IFTRUE 49199
49197: GO 49224
49199: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49200: LD_ADDR_VAR 0 3
49204: PUSH
49205: LD_INT 32
49207: PPUSH
49208: LD_VAR 0 1
49212: PPUSH
49213: CALL_OW 321
49217: PUSH
49218: LD_INT 2
49220: EQUAL
49221: ST_TO_ADDR
49222: GO 49540
49224: LD_INT 20
49226: DOUBLE
49227: EQUAL
49228: IFTRUE 49232
49230: GO 49257
49232: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49233: LD_ADDR_VAR 0 3
49237: PUSH
49238: LD_INT 6
49240: PPUSH
49241: LD_VAR 0 1
49245: PPUSH
49246: CALL_OW 321
49250: PUSH
49251: LD_INT 2
49253: EQUAL
49254: ST_TO_ADDR
49255: GO 49540
49257: LD_INT 22
49259: DOUBLE
49260: EQUAL
49261: IFTRUE 49271
49263: LD_INT 36
49265: DOUBLE
49266: EQUAL
49267: IFTRUE 49271
49269: GO 49296
49271: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49272: LD_ADDR_VAR 0 3
49276: PUSH
49277: LD_INT 15
49279: PPUSH
49280: LD_VAR 0 1
49284: PPUSH
49285: CALL_OW 321
49289: PUSH
49290: LD_INT 2
49292: EQUAL
49293: ST_TO_ADDR
49294: GO 49540
49296: LD_INT 30
49298: DOUBLE
49299: EQUAL
49300: IFTRUE 49304
49302: GO 49329
49304: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49305: LD_ADDR_VAR 0 3
49309: PUSH
49310: LD_INT 20
49312: PPUSH
49313: LD_VAR 0 1
49317: PPUSH
49318: CALL_OW 321
49322: PUSH
49323: LD_INT 2
49325: EQUAL
49326: ST_TO_ADDR
49327: GO 49540
49329: LD_INT 28
49331: DOUBLE
49332: EQUAL
49333: IFTRUE 49343
49335: LD_INT 21
49337: DOUBLE
49338: EQUAL
49339: IFTRUE 49343
49341: GO 49368
49343: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49344: LD_ADDR_VAR 0 3
49348: PUSH
49349: LD_INT 21
49351: PPUSH
49352: LD_VAR 0 1
49356: PPUSH
49357: CALL_OW 321
49361: PUSH
49362: LD_INT 2
49364: EQUAL
49365: ST_TO_ADDR
49366: GO 49540
49368: LD_INT 16
49370: DOUBLE
49371: EQUAL
49372: IFTRUE 49376
49374: GO 49401
49376: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49377: LD_ADDR_VAR 0 3
49381: PUSH
49382: LD_INT 84
49384: PPUSH
49385: LD_VAR 0 1
49389: PPUSH
49390: CALL_OW 321
49394: PUSH
49395: LD_INT 2
49397: EQUAL
49398: ST_TO_ADDR
49399: GO 49540
49401: LD_INT 19
49403: DOUBLE
49404: EQUAL
49405: IFTRUE 49415
49407: LD_INT 23
49409: DOUBLE
49410: EQUAL
49411: IFTRUE 49415
49413: GO 49440
49415: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49416: LD_ADDR_VAR 0 3
49420: PUSH
49421: LD_INT 83
49423: PPUSH
49424: LD_VAR 0 1
49428: PPUSH
49429: CALL_OW 321
49433: PUSH
49434: LD_INT 2
49436: EQUAL
49437: ST_TO_ADDR
49438: GO 49540
49440: LD_INT 17
49442: DOUBLE
49443: EQUAL
49444: IFTRUE 49448
49446: GO 49473
49448: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49449: LD_ADDR_VAR 0 3
49453: PUSH
49454: LD_INT 39
49456: PPUSH
49457: LD_VAR 0 1
49461: PPUSH
49462: CALL_OW 321
49466: PUSH
49467: LD_INT 2
49469: EQUAL
49470: ST_TO_ADDR
49471: GO 49540
49473: LD_INT 18
49475: DOUBLE
49476: EQUAL
49477: IFTRUE 49481
49479: GO 49506
49481: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49482: LD_ADDR_VAR 0 3
49486: PUSH
49487: LD_INT 40
49489: PPUSH
49490: LD_VAR 0 1
49494: PPUSH
49495: CALL_OW 321
49499: PUSH
49500: LD_INT 2
49502: EQUAL
49503: ST_TO_ADDR
49504: GO 49540
49506: LD_INT 27
49508: DOUBLE
49509: EQUAL
49510: IFTRUE 49514
49512: GO 49539
49514: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49515: LD_ADDR_VAR 0 3
49519: PUSH
49520: LD_INT 35
49522: PPUSH
49523: LD_VAR 0 1
49527: PPUSH
49528: CALL_OW 321
49532: PUSH
49533: LD_INT 2
49535: EQUAL
49536: ST_TO_ADDR
49537: GO 49540
49539: POP
// end ;
49540: LD_VAR 0 3
49544: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49545: LD_INT 0
49547: PPUSH
49548: PPUSH
49549: PPUSH
49550: PPUSH
49551: PPUSH
49552: PPUSH
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
// result := false ;
49558: LD_ADDR_VAR 0 6
49562: PUSH
49563: LD_INT 0
49565: ST_TO_ADDR
// if btype = b_depot then
49566: LD_VAR 0 2
49570: PUSH
49571: LD_INT 0
49573: EQUAL
49574: IFFALSE 49586
// begin result := true ;
49576: LD_ADDR_VAR 0 6
49580: PUSH
49581: LD_INT 1
49583: ST_TO_ADDR
// exit ;
49584: GO 50412
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49586: LD_VAR 0 1
49590: NOT
49591: PUSH
49592: LD_VAR 0 1
49596: PPUSH
49597: CALL_OW 266
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: IN
49612: NOT
49613: OR
49614: PUSH
49615: LD_VAR 0 2
49619: NOT
49620: OR
49621: PUSH
49622: LD_VAR 0 5
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 4
49641: PUSH
49642: LD_INT 5
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: IN
49653: NOT
49654: OR
49655: PUSH
49656: LD_VAR 0 3
49660: PPUSH
49661: LD_VAR 0 4
49665: PPUSH
49666: CALL_OW 488
49670: NOT
49671: OR
49672: IFFALSE 49676
// exit ;
49674: GO 50412
// side := GetSide ( depot ) ;
49676: LD_ADDR_VAR 0 9
49680: PUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 255
49690: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49691: LD_VAR 0 9
49695: PPUSH
49696: LD_VAR 0 2
49700: PPUSH
49701: CALL 49169 0 2
49705: NOT
49706: IFFALSE 49710
// exit ;
49708: GO 50412
// pom := GetBase ( depot ) ;
49710: LD_ADDR_VAR 0 10
49714: PUSH
49715: LD_VAR 0 1
49719: PPUSH
49720: CALL_OW 274
49724: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49725: LD_ADDR_VAR 0 11
49729: PUSH
49730: LD_VAR 0 2
49734: PPUSH
49735: LD_VAR 0 1
49739: PPUSH
49740: CALL_OW 248
49744: PPUSH
49745: CALL_OW 450
49749: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49750: LD_VAR 0 10
49754: PPUSH
49755: LD_INT 1
49757: PPUSH
49758: CALL_OW 275
49762: PUSH
49763: LD_VAR 0 11
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: GREATEREQUAL
49772: PUSH
49773: LD_VAR 0 10
49777: PPUSH
49778: LD_INT 2
49780: PPUSH
49781: CALL_OW 275
49785: PUSH
49786: LD_VAR 0 11
49790: PUSH
49791: LD_INT 2
49793: ARRAY
49794: GREATEREQUAL
49795: AND
49796: PUSH
49797: LD_VAR 0 10
49801: PPUSH
49802: LD_INT 3
49804: PPUSH
49805: CALL_OW 275
49809: PUSH
49810: LD_VAR 0 11
49814: PUSH
49815: LD_INT 3
49817: ARRAY
49818: GREATEREQUAL
49819: AND
49820: NOT
49821: IFFALSE 49825
// exit ;
49823: GO 50412
// if GetBType ( depot ) = b_depot then
49825: LD_VAR 0 1
49829: PPUSH
49830: CALL_OW 266
49834: PUSH
49835: LD_INT 0
49837: EQUAL
49838: IFFALSE 49850
// dist := 28 else
49840: LD_ADDR_VAR 0 14
49844: PUSH
49845: LD_INT 28
49847: ST_TO_ADDR
49848: GO 49858
// dist := 36 ;
49850: LD_ADDR_VAR 0 14
49854: PUSH
49855: LD_INT 36
49857: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49858: LD_VAR 0 1
49862: PPUSH
49863: LD_VAR 0 3
49867: PPUSH
49868: LD_VAR 0 4
49872: PPUSH
49873: CALL_OW 297
49877: PUSH
49878: LD_VAR 0 14
49882: GREATER
49883: IFFALSE 49887
// exit ;
49885: GO 50412
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49887: LD_ADDR_VAR 0 12
49891: PUSH
49892: LD_VAR 0 2
49896: PPUSH
49897: LD_VAR 0 3
49901: PPUSH
49902: LD_VAR 0 4
49906: PPUSH
49907: LD_VAR 0 5
49911: PPUSH
49912: LD_VAR 0 1
49916: PPUSH
49917: CALL_OW 248
49921: PPUSH
49922: LD_INT 0
49924: PPUSH
49925: CALL 50417 0 6
49929: ST_TO_ADDR
// if not hexes then
49930: LD_VAR 0 12
49934: NOT
49935: IFFALSE 49939
// exit ;
49937: GO 50412
// hex := GetHexInfo ( x , y ) ;
49939: LD_ADDR_VAR 0 15
49943: PUSH
49944: LD_VAR 0 3
49948: PPUSH
49949: LD_VAR 0 4
49953: PPUSH
49954: CALL_OW 546
49958: ST_TO_ADDR
// if hex [ 1 ] then
49959: LD_VAR 0 15
49963: PUSH
49964: LD_INT 1
49966: ARRAY
49967: IFFALSE 49971
// exit ;
49969: GO 50412
// height := hex [ 2 ] ;
49971: LD_ADDR_VAR 0 13
49975: PUSH
49976: LD_VAR 0 15
49980: PUSH
49981: LD_INT 2
49983: ARRAY
49984: ST_TO_ADDR
// for i = 1 to hexes do
49985: LD_ADDR_VAR 0 7
49989: PUSH
49990: DOUBLE
49991: LD_INT 1
49993: DEC
49994: ST_TO_ADDR
49995: LD_VAR 0 12
49999: PUSH
50000: FOR_TO
50001: IFFALSE 50331
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50003: LD_VAR 0 12
50007: PUSH
50008: LD_VAR 0 7
50012: ARRAY
50013: PUSH
50014: LD_INT 1
50016: ARRAY
50017: PPUSH
50018: LD_VAR 0 12
50022: PUSH
50023: LD_VAR 0 7
50027: ARRAY
50028: PUSH
50029: LD_INT 2
50031: ARRAY
50032: PPUSH
50033: CALL_OW 488
50037: NOT
50038: PUSH
50039: LD_VAR 0 12
50043: PUSH
50044: LD_VAR 0 7
50048: ARRAY
50049: PUSH
50050: LD_INT 1
50052: ARRAY
50053: PPUSH
50054: LD_VAR 0 12
50058: PUSH
50059: LD_VAR 0 7
50063: ARRAY
50064: PUSH
50065: LD_INT 2
50067: ARRAY
50068: PPUSH
50069: CALL_OW 428
50073: PUSH
50074: LD_INT 0
50076: GREATER
50077: OR
50078: PUSH
50079: LD_VAR 0 12
50083: PUSH
50084: LD_VAR 0 7
50088: ARRAY
50089: PUSH
50090: LD_INT 1
50092: ARRAY
50093: PPUSH
50094: LD_VAR 0 12
50098: PUSH
50099: LD_VAR 0 7
50103: ARRAY
50104: PUSH
50105: LD_INT 2
50107: ARRAY
50108: PPUSH
50109: CALL_OW 351
50113: OR
50114: IFFALSE 50120
// exit ;
50116: POP
50117: POP
50118: GO 50412
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50120: LD_ADDR_VAR 0 8
50124: PUSH
50125: LD_VAR 0 12
50129: PUSH
50130: LD_VAR 0 7
50134: ARRAY
50135: PUSH
50136: LD_INT 1
50138: ARRAY
50139: PPUSH
50140: LD_VAR 0 12
50144: PUSH
50145: LD_VAR 0 7
50149: ARRAY
50150: PUSH
50151: LD_INT 2
50153: ARRAY
50154: PPUSH
50155: CALL_OW 546
50159: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50160: LD_VAR 0 8
50164: PUSH
50165: LD_INT 1
50167: ARRAY
50168: PUSH
50169: LD_VAR 0 8
50173: PUSH
50174: LD_INT 2
50176: ARRAY
50177: PUSH
50178: LD_VAR 0 13
50182: PUSH
50183: LD_INT 2
50185: PLUS
50186: GREATER
50187: OR
50188: PUSH
50189: LD_VAR 0 8
50193: PUSH
50194: LD_INT 2
50196: ARRAY
50197: PUSH
50198: LD_VAR 0 13
50202: PUSH
50203: LD_INT 2
50205: MINUS
50206: LESS
50207: OR
50208: PUSH
50209: LD_VAR 0 8
50213: PUSH
50214: LD_INT 3
50216: ARRAY
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 8
50223: PUSH
50224: LD_INT 9
50226: PUSH
50227: LD_INT 10
50229: PUSH
50230: LD_INT 11
50232: PUSH
50233: LD_INT 12
50235: PUSH
50236: LD_INT 13
50238: PUSH
50239: LD_INT 16
50241: PUSH
50242: LD_INT 17
50244: PUSH
50245: LD_INT 18
50247: PUSH
50248: LD_INT 19
50250: PUSH
50251: LD_INT 20
50253: PUSH
50254: LD_INT 21
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: IN
50272: NOT
50273: OR
50274: PUSH
50275: LD_VAR 0 8
50279: PUSH
50280: LD_INT 5
50282: ARRAY
50283: NOT
50284: OR
50285: PUSH
50286: LD_VAR 0 8
50290: PUSH
50291: LD_INT 6
50293: ARRAY
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 7
50303: PUSH
50304: LD_INT 9
50306: PUSH
50307: LD_INT 10
50309: PUSH
50310: LD_INT 11
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: IN
50321: NOT
50322: OR
50323: IFFALSE 50329
// exit ;
50325: POP
50326: POP
50327: GO 50412
// end ;
50329: GO 50000
50331: POP
50332: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50333: LD_VAR 0 9
50337: PPUSH
50338: LD_VAR 0 3
50342: PPUSH
50343: LD_VAR 0 4
50347: PPUSH
50348: LD_INT 20
50350: PPUSH
50351: CALL 42335 0 4
50355: PUSH
50356: LD_INT 4
50358: ARRAY
50359: IFFALSE 50363
// exit ;
50361: GO 50412
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50363: LD_VAR 0 2
50367: PUSH
50368: LD_INT 29
50370: PUSH
50371: LD_INT 30
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: IN
50378: PUSH
50379: LD_VAR 0 3
50383: PPUSH
50384: LD_VAR 0 4
50388: PPUSH
50389: LD_VAR 0 9
50393: PPUSH
50394: CALL_OW 440
50398: NOT
50399: AND
50400: IFFALSE 50404
// exit ;
50402: GO 50412
// result := true ;
50404: LD_ADDR_VAR 0 6
50408: PUSH
50409: LD_INT 1
50411: ST_TO_ADDR
// end ;
50412: LD_VAR 0 6
50416: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50417: LD_INT 0
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
50426: PPUSH
50427: PPUSH
50428: PPUSH
50429: PPUSH
50430: PPUSH
50431: PPUSH
50432: PPUSH
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
50448: PPUSH
50449: PPUSH
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
50456: PPUSH
50457: PPUSH
50458: PPUSH
50459: PPUSH
50460: PPUSH
50461: PPUSH
50462: PPUSH
50463: PPUSH
50464: PPUSH
50465: PPUSH
50466: PPUSH
50467: PPUSH
50468: PPUSH
50469: PPUSH
50470: PPUSH
50471: PPUSH
50472: PPUSH
50473: PPUSH
50474: PPUSH
50475: PPUSH
50476: PPUSH
// result = [ ] ;
50477: LD_ADDR_VAR 0 7
50481: PUSH
50482: EMPTY
50483: ST_TO_ADDR
// temp_list = [ ] ;
50484: LD_ADDR_VAR 0 9
50488: PUSH
50489: EMPTY
50490: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50491: LD_VAR 0 4
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: LD_INT 3
50507: PUSH
50508: LD_INT 4
50510: PUSH
50511: LD_INT 5
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: IN
50522: NOT
50523: PUSH
50524: LD_VAR 0 1
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: IN
50539: PUSH
50540: LD_VAR 0 5
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: LIST
50558: IN
50559: NOT
50560: AND
50561: OR
50562: IFFALSE 50566
// exit ;
50564: GO 68957
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50566: LD_VAR 0 1
50570: PUSH
50571: LD_INT 6
50573: PUSH
50574: LD_INT 7
50576: PUSH
50577: LD_INT 8
50579: PUSH
50580: LD_INT 13
50582: PUSH
50583: LD_INT 12
50585: PUSH
50586: LD_INT 15
50588: PUSH
50589: LD_INT 11
50591: PUSH
50592: LD_INT 14
50594: PUSH
50595: LD_INT 10
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: IN
50609: IFFALSE 50619
// btype = b_lab ;
50611: LD_ADDR_VAR 0 1
50615: PUSH
50616: LD_INT 6
50618: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50619: LD_VAR 0 6
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: LIST
50637: IN
50638: NOT
50639: PUSH
50640: LD_VAR 0 1
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 3
50656: PUSH
50657: LD_INT 6
50659: PUSH
50660: LD_INT 36
50662: PUSH
50663: LD_INT 4
50665: PUSH
50666: LD_INT 5
50668: PUSH
50669: LD_INT 31
50671: PUSH
50672: LD_INT 32
50674: PUSH
50675: LD_INT 33
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: IN
50691: NOT
50692: PUSH
50693: LD_VAR 0 6
50697: PUSH
50698: LD_INT 1
50700: EQUAL
50701: AND
50702: OR
50703: PUSH
50704: LD_VAR 0 1
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: IN
50719: NOT
50720: PUSH
50721: LD_VAR 0 6
50725: PUSH
50726: LD_INT 2
50728: EQUAL
50729: AND
50730: OR
50731: IFFALSE 50741
// mode = 0 ;
50733: LD_ADDR_VAR 0 6
50737: PUSH
50738: LD_INT 0
50740: ST_TO_ADDR
// case mode of 0 :
50741: LD_VAR 0 6
50745: PUSH
50746: LD_INT 0
50748: DOUBLE
50749: EQUAL
50750: IFTRUE 50754
50752: GO 62207
50754: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50755: LD_ADDR_VAR 0 11
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50948: LD_ADDR_VAR 0 12
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51144: LD_ADDR_VAR 0 13
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: LD_INT 3
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 3
51303: NEG
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: NEG
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51343: LD_ADDR_VAR 0 14
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 3
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51539: LD_ADDR_VAR 0 15
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51732: LD_ADDR_VAR 0 16
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51925: LD_ADDR_VAR 0 17
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52155: LD_ADDR_VAR 0 18
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52385: LD_ADDR_VAR 0 19
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52615: LD_ADDR_VAR 0 20
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52845: LD_ADDR_VAR 0 21
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53075: LD_ADDR_VAR 0 22
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53305: LD_ADDR_VAR 0 23
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 3
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53585: LD_ADDR_VAR 0 24
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53861: LD_ADDR_VAR 0 25
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54135: LD_ADDR_VAR 0 26
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 3
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54411: LD_ADDR_VAR 0 27
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 3
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54691: LD_ADDR_VAR 0 28
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 3
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54973: LD_ADDR_VAR 0 29
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 3
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55252: LD_ADDR_VAR 0 30
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 3
55495: NEG
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55530: LD_ADDR_VAR 0 31
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 3
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 3
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55808: LD_ADDR_VAR 0 32
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 3
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56086: LD_ADDR_VAR 0 33
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 3
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56365: LD_ADDR_VAR 0 34
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 3
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56645: LD_ADDR_VAR 0 35
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56757: LD_ADDR_VAR 0 36
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56869: LD_ADDR_VAR 0 37
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56981: LD_ADDR_VAR 0 38
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57093: LD_ADDR_VAR 0 39
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57205: LD_ADDR_VAR 0 40
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57317: LD_ADDR_VAR 0 41
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: LD_INT 3
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57667: LD_ADDR_VAR 0 42
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: NEG
57858: PUSH
57859: LD_INT 3
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 3
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 3
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: LD_INT 3
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58017: LD_ADDR_VAR 0 43
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 3
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 3
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58365: LD_ADDR_VAR 0 44
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: PUSH
58609: LD_INT 3
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 3
58662: NEG
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: LD_INT 3
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58715: LD_ADDR_VAR 0 45
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 3
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: NEG
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59065: LD_ADDR_VAR 0 46
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 2
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59413: LD_ADDR_VAR 0 47
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59564: LD_ADDR_VAR 0 48
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 2
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59711: LD_ADDR_VAR 0 49
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59855: LD_ADDR_VAR 0 50
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59999: LD_ADDR_VAR 0 51
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60146: LD_ADDR_VAR 0 52
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60297: LD_ADDR_VAR 0 53
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: NEG
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60527: LD_ADDR_VAR 0 54
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60757: LD_ADDR_VAR 0 55
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 2
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 2
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60987: LD_ADDR_VAR 0 56
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 2
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: LD_INT 2
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61217: LD_ADDR_VAR 0 57
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 2
61393: NEG
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: LD_INT 2
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61447: LD_ADDR_VAR 0 58
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 2
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61677: LD_ADDR_VAR 0 59
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61765: LD_ADDR_VAR 0 60
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61853: LD_ADDR_VAR 0 61
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61941: LD_ADDR_VAR 0 62
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62029: LD_ADDR_VAR 0 63
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62117: LD_ADDR_VAR 0 64
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// end ; 1 :
62205: GO 68102
62207: LD_INT 1
62209: DOUBLE
62210: EQUAL
62211: IFTRUE 62215
62213: GO 64838
62215: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62216: LD_ADDR_VAR 0 11
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: LD_INT 3
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 3
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62260: LD_ADDR_VAR 0 12
62264: PUSH
62265: LD_INT 2
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 3
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: LIST
62300: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62301: LD_ADDR_VAR 0 13
62305: PUSH
62306: LD_INT 3
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: LIST
62340: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62341: LD_ADDR_VAR 0 14
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 3
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62382: LD_ADDR_VAR 0 15
62386: PUSH
62387: LD_INT 2
62389: NEG
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62426: LD_ADDR_VAR 0 16
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 3
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 3
62445: NEG
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 3
62457: NEG
62458: PUSH
62459: LD_INT 3
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62472: LD_ADDR_VAR 0 17
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 3
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62516: LD_ADDR_VAR 0 18
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62557: LD_ADDR_VAR 0 19
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: LIST
62596: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62597: LD_ADDR_VAR 0 20
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 3
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62638: LD_ADDR_VAR 0 21
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 3
62656: NEG
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 3
62667: NEG
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: LIST
62681: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62682: LD_ADDR_VAR 0 22
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: NEG
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62728: LD_ADDR_VAR 0 23
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 4
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 3
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62772: LD_ADDR_VAR 0 24
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 3
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 4
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62813: LD_ADDR_VAR 0 25
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 4
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 3
62840: PUSH
62841: LD_INT 4
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: LIST
62852: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62853: LD_ADDR_VAR 0 26
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 3
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 4
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: LIST
62893: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62894: LD_ADDR_VAR 0 27
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 3
62912: NEG
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 4
62923: NEG
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: LIST
62937: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62938: LD_ADDR_VAR 0 28
62942: PUSH
62943: LD_INT 3
62945: NEG
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 3
62957: NEG
62958: PUSH
62959: LD_INT 4
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 4
62969: NEG
62970: PUSH
62971: LD_INT 3
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62984: LD_ADDR_VAR 0 29
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 3
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 3
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: LD_INT 4
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: LD_INT 4
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: LD_INT 3
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: LD_INT 5
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 5
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 4
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 6
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 6
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 5
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63139: LD_ADDR_VAR 0 30
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 3
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 3
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 4
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 4
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 4
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 5
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 5
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 5
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 6
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 6
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63282: LD_ADDR_VAR 0 31
63286: PUSH
63287: LD_INT 3
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: LD_INT 3
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 2
63309: PUSH
63310: LD_INT 3
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 4
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 4
63329: PUSH
63330: LD_INT 4
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: PUSH
63340: LD_INT 4
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 5
63349: PUSH
63350: LD_INT 4
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 5
63359: PUSH
63360: LD_INT 5
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 4
63369: PUSH
63370: LD_INT 5
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 6
63379: PUSH
63380: LD_INT 5
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 6
63389: PUSH
63390: LD_INT 6
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 5
63399: PUSH
63400: LD_INT 6
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63421: LD_ADDR_VAR 0 32
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 3
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 3
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: LD_INT 4
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 4
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 3
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: PUSH
63491: LD_INT 5
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 5
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: LD_INT 4
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 6
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 6
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 5
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63564: LD_ADDR_VAR 0 33
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 4
63616: NEG
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: NEG
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 4
63639: NEG
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 5
63650: NEG
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 5
63661: NEG
63662: PUSH
63663: LD_INT 1
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 5
63673: NEG
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 6
63684: NEG
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 6
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63719: LD_ADDR_VAR 0 34
63723: PUSH
63724: LD_INT 2
63726: NEG
63727: PUSH
63728: LD_INT 3
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 3
63738: NEG
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 3
63750: NEG
63751: PUSH
63752: LD_INT 3
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: LD_INT 4
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 4
63774: NEG
63775: PUSH
63776: LD_INT 3
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 4
63786: NEG
63787: PUSH
63788: LD_INT 4
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 4
63798: NEG
63799: PUSH
63800: LD_INT 5
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 5
63810: NEG
63811: PUSH
63812: LD_INT 4
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 5
63822: NEG
63823: PUSH
63824: LD_INT 5
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 5
63834: NEG
63835: PUSH
63836: LD_INT 6
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 6
63846: NEG
63847: PUSH
63848: LD_INT 5
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 6
63858: NEG
63859: PUSH
63860: LD_INT 6
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63882: LD_ADDR_VAR 0 41
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: LD_INT 3
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: LD_INT 2
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63926: LD_ADDR_VAR 0 42
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 3
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: LIST
63966: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63967: LD_ADDR_VAR 0 43
63971: PUSH
63972: LD_INT 2
63974: PUSH
63975: LD_INT 2
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 3
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: PUSH
63995: LD_INT 3
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: LIST
64006: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64007: LD_ADDR_VAR 0 44
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 1
64034: NEG
64035: PUSH
64036: LD_INT 2
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64048: LD_ADDR_VAR 0 45
64052: PUSH
64053: LD_INT 2
64055: NEG
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 3
64077: NEG
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: LIST
64091: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64092: LD_ADDR_VAR 0 46
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: LD_INT 2
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 2
64111: NEG
64112: PUSH
64113: LD_INT 3
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: NEG
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64138: LD_ADDR_VAR 0 47
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: LD_INT 3
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: LD_INT 3
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64171: LD_ADDR_VAR 0 48
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64202: LD_ADDR_VAR 0 49
64206: PUSH
64207: LD_INT 3
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 2
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64231: LD_ADDR_VAR 0 50
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: LD_INT 3
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 3
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64260: LD_ADDR_VAR 0 51
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 2
64278: NEG
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64291: LD_ADDR_VAR 0 52
64295: PUSH
64296: LD_INT 3
64298: NEG
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: LD_INT 2
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64324: LD_ADDR_VAR 0 53
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: LD_INT 3
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: LD_INT 3
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64368: LD_ADDR_VAR 0 54
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 3
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 3
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: LIST
64408: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64409: LD_ADDR_VAR 0 55
64413: PUSH
64414: LD_INT 3
64416: PUSH
64417: LD_INT 2
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 3
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 3
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64449: LD_ADDR_VAR 0 56
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: LD_INT 3
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 3
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 2
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64490: LD_ADDR_VAR 0 57
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 3
64508: NEG
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 3
64519: NEG
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64534: LD_ADDR_VAR 0 58
64538: PUSH
64539: LD_INT 2
64541: NEG
64542: PUSH
64543: LD_INT 3
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 3
64553: NEG
64554: PUSH
64555: LD_INT 2
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 3
64565: NEG
64566: PUSH
64567: LD_INT 3
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: LIST
64579: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64580: LD_ADDR_VAR 0 59
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: LD_INT 2
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 2
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: LIST
64623: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64624: LD_ADDR_VAR 0 60
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 2
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64665: LD_ADDR_VAR 0 61
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: LD_INT 2
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64705: LD_ADDR_VAR 0 62
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64746: LD_ADDR_VAR 0 63
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: LIST
64789: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64790: LD_ADDR_VAR 0 64
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 2
64809: NEG
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: NEG
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: LIST
64835: ST_TO_ADDR
// end ; 2 :
64836: GO 68102
64838: LD_INT 2
64840: DOUBLE
64841: EQUAL
64842: IFTRUE 64846
64844: GO 68101
64846: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64847: LD_ADDR_VAR 0 29
64851: PUSH
64852: LD_INT 4
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 4
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 5
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 5
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 4
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 3
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 3
64915: PUSH
64916: LD_INT 1
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 3
64926: PUSH
64927: LD_INT 2
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 5
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: LD_INT 3
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 4
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 4
64977: PUSH
64978: LD_INT 4
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 3
64987: PUSH
64988: LD_INT 4
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 4
65017: PUSH
65018: LD_INT 2
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: PUSH
65028: LD_INT 4
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: LD_INT 4
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: LD_INT 3
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: LD_INT 4
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: LD_INT 5
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 5
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: LD_INT 4
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: LD_INT 3
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: LD_INT 5
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 2
65119: NEG
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 3
65130: NEG
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 2
65164: NEG
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 3
65175: NEG
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 4
65186: NEG
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 4
65197: NEG
65198: PUSH
65199: LD_INT 1
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: NEG
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 4
65232: NEG
65233: PUSH
65234: LD_INT 4
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 4
65244: NEG
65245: PUSH
65246: LD_INT 5
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 3
65256: NEG
65257: PUSH
65258: LD_INT 4
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 3
65268: NEG
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 4
65280: NEG
65281: PUSH
65282: LD_INT 3
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 5
65292: NEG
65293: PUSH
65294: LD_INT 4
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 5
65304: NEG
65305: PUSH
65306: LD_INT 5
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 3
65316: NEG
65317: PUSH
65318: LD_INT 5
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 5
65328: NEG
65329: PUSH
65330: LD_INT 3
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65385: LD_ADDR_VAR 0 30
65389: PUSH
65390: LD_INT 4
65392: PUSH
65393: LD_INT 4
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 4
65402: PUSH
65403: LD_INT 3
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 5
65412: PUSH
65413: LD_INT 4
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 5
65422: PUSH
65423: LD_INT 5
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: LD_INT 5
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: LD_INT 4
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 3
65452: PUSH
65453: LD_INT 3
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 5
65462: PUSH
65463: LD_INT 3
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: LD_INT 5
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 3
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 0
65492: PUSH
65493: LD_INT 2
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 1
65502: PUSH
65503: LD_INT 3
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 4
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: LD_INT 4
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: LD_INT 2
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 4
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 4
65575: NEG
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 4
65586: NEG
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 3
65598: NEG
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 3
65609: NEG
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 4
65620: NEG
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 5
65631: NEG
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 5
65642: NEG
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 5
65654: NEG
65655: PUSH
65656: LD_INT 2
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 3
65677: NEG
65678: PUSH
65679: LD_INT 3
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 3
65689: NEG
65690: PUSH
65691: LD_INT 4
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: LD_INT 2
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 3
65725: NEG
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 4
65737: NEG
65738: PUSH
65739: LD_INT 3
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 4
65749: NEG
65750: PUSH
65751: LD_INT 4
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 2
65761: NEG
65762: PUSH
65763: LD_INT 4
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 4
65773: NEG
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: LD_INT 4
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: LD_INT 5
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: LD_INT 4
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 1
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: LD_INT 4
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 1
65852: NEG
65853: PUSH
65854: LD_INT 5
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 2
65864: PUSH
65865: LD_INT 3
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: NEG
65876: PUSH
65877: LD_INT 5
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65932: LD_ADDR_VAR 0 31
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: LD_INT 4
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: LD_INT 4
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: LD_INT 5
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 5
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: LD_INT 4
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: LD_INT 3
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 2
66011: PUSH
66012: LD_INT 5
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 2
66021: NEG
66022: PUSH
66023: LD_INT 3
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 3
66032: NEG
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 3
66043: NEG
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 2
66055: NEG
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 2
66066: NEG
66067: PUSH
66068: LD_INT 1
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 3
66077: NEG
66078: PUSH
66079: LD_INT 1
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 4
66088: NEG
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 4
66111: NEG
66112: PUSH
66113: LD_INT 2
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 2
66123: NEG
66124: PUSH
66125: LD_INT 2
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 4
66134: NEG
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 4
66146: NEG
66147: PUSH
66148: LD_INT 5
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 3
66158: NEG
66159: PUSH
66160: LD_INT 4
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 3
66170: NEG
66171: PUSH
66172: LD_INT 3
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 4
66182: NEG
66183: PUSH
66184: LD_INT 3
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 5
66194: NEG
66195: PUSH
66196: LD_INT 4
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 5
66206: NEG
66207: PUSH
66208: LD_INT 5
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 3
66218: NEG
66219: PUSH
66220: LD_INT 5
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 5
66230: NEG
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: LD_INT 4
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: LD_INT 3
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: LD_INT 2
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 2
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: PUSH
66299: LD_INT 3
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: LD_INT 4
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 4
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 4
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 4
66354: PUSH
66355: LD_INT 1
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 5
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 5
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 4
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 3
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: PUSH
66417: LD_INT 2
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 5
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66482: LD_ADDR_VAR 0 32
66486: PUSH
66487: LD_INT 4
66489: NEG
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 4
66500: NEG
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 3
66523: NEG
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 4
66534: NEG
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 5
66545: NEG
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 5
66556: NEG
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 5
66568: NEG
66569: PUSH
66570: LD_INT 2
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 3
66603: NEG
66604: PUSH
66605: LD_INT 4
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 2
66615: NEG
66616: PUSH
66617: LD_INT 3
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 2
66627: NEG
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: LD_INT 2
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 4
66651: NEG
66652: PUSH
66653: LD_INT 3
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 4
66663: NEG
66664: PUSH
66665: LD_INT 4
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: LD_INT 4
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 4
66687: NEG
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: LD_INT 4
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_INT 5
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 1
66721: PUSH
66722: LD_INT 4
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 1
66732: PUSH
66733: LD_INT 3
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 3
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 4
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: NEG
66767: PUSH
66768: LD_INT 5
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 2
66789: NEG
66790: PUSH
66791: LD_INT 5
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 3
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 4
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 4
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 2
66873: PUSH
66874: LD_INT 2
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 4
66884: PUSH
66885: LD_INT 2
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 4
66894: PUSH
66895: LD_INT 4
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 4
66904: PUSH
66905: LD_INT 3
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 5
66914: PUSH
66915: LD_INT 4
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 5
66924: PUSH
66925: LD_INT 5
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: LD_INT 5
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: LD_INT 4
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 5
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: LD_INT 5
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67029: LD_ADDR_VAR 0 33
67033: PUSH
67034: LD_INT 4
67036: NEG
67037: PUSH
67038: LD_INT 4
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 4
67048: NEG
67049: PUSH
67050: LD_INT 5
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: NEG
67061: PUSH
67062: LD_INT 4
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 3
67072: NEG
67073: PUSH
67074: LD_INT 3
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 4
67084: NEG
67085: PUSH
67086: LD_INT 3
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 5
67096: NEG
67097: PUSH
67098: LD_INT 4
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 5
67108: NEG
67109: PUSH
67110: LD_INT 5
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 3
67120: NEG
67121: PUSH
67122: LD_INT 5
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 5
67132: NEG
67133: PUSH
67134: LD_INT 3
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: LD_INT 3
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 4
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: LD_INT 3
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: LD_INT 2
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: LD_INT 2
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: LD_INT 3
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 1
67211: NEG
67212: PUSH
67213: LD_INT 4
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 2
67223: PUSH
67224: LD_INT 2
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: NEG
67235: PUSH
67236: LD_INT 4
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 4
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 4
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 5
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 5
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 4
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 3
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 3
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: LD_INT 2
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 5
67329: PUSH
67330: LD_INT 2
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: PUSH
67340: LD_INT 3
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 3
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 4
67359: PUSH
67360: LD_INT 3
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 4
67369: PUSH
67370: LD_INT 4
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 3
67379: PUSH
67380: LD_INT 4
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 2
67389: PUSH
67390: LD_INT 3
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 2
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 4
67409: PUSH
67410: LD_INT 2
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 2
67419: PUSH
67420: LD_INT 4
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: LD_INT 4
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: LD_INT 3
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 1
67449: PUSH
67450: LD_INT 4
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: LD_INT 5
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: LD_INT 5
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: LD_INT 4
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 2
67501: PUSH
67502: LD_INT 5
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 2
67511: NEG
67512: PUSH
67513: LD_INT 3
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67567: LD_ADDR_VAR 0 34
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: LD_INT 4
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: LD_INT 5
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 1
67596: PUSH
67597: LD_INT 4
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 1
67607: PUSH
67608: LD_INT 3
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 3
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: LD_INT 4
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 1
67641: NEG
67642: PUSH
67643: LD_INT 5
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 2
67664: NEG
67665: PUSH
67666: LD_INT 5
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 4
67697: PUSH
67698: LD_INT 0
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 4
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 2
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 2
67737: PUSH
67738: LD_INT 1
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 2
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 4
67759: PUSH
67760: LD_INT 2
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 4
67769: PUSH
67770: LD_INT 4
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 4
67779: PUSH
67780: LD_INT 3
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 5
67789: PUSH
67790: LD_INT 4
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 5
67799: PUSH
67800: LD_INT 5
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 4
67809: PUSH
67810: LD_INT 5
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 3
67819: PUSH
67820: LD_INT 4
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 3
67829: PUSH
67830: LD_INT 3
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 5
67839: PUSH
67840: LD_INT 3
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 3
67849: PUSH
67850: LD_INT 5
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 3
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: LD_INT 2
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: LD_INT 3
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 1
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: LD_INT 4
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: LD_INT 3
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: LD_INT 2
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 2
67931: PUSH
67932: LD_INT 4
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 4
67952: NEG
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 4
67963: NEG
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 3
67975: NEG
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 3
67986: NEG
67987: PUSH
67988: LD_INT 1
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 4
67997: NEG
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 5
68008: NEG
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 5
68019: NEG
68020: PUSH
68021: LD_INT 1
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 5
68031: NEG
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: NEG
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: ST_TO_ADDR
// end ; end ;
68099: GO 68102
68101: POP
// case btype of b_depot , b_warehouse :
68102: LD_VAR 0 1
68106: PUSH
68107: LD_INT 0
68109: DOUBLE
68110: EQUAL
68111: IFTRUE 68121
68113: LD_INT 1
68115: DOUBLE
68116: EQUAL
68117: IFTRUE 68121
68119: GO 68322
68121: POP
// case nation of nation_american :
68122: LD_VAR 0 5
68126: PUSH
68127: LD_INT 1
68129: DOUBLE
68130: EQUAL
68131: IFTRUE 68135
68133: GO 68191
68135: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68136: LD_ADDR_VAR 0 9
68140: PUSH
68141: LD_VAR 0 11
68145: PUSH
68146: LD_VAR 0 12
68150: PUSH
68151: LD_VAR 0 13
68155: PUSH
68156: LD_VAR 0 14
68160: PUSH
68161: LD_VAR 0 15
68165: PUSH
68166: LD_VAR 0 16
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: PUSH
68179: LD_VAR 0 4
68183: PUSH
68184: LD_INT 1
68186: PLUS
68187: ARRAY
68188: ST_TO_ADDR
68189: GO 68320
68191: LD_INT 2
68193: DOUBLE
68194: EQUAL
68195: IFTRUE 68199
68197: GO 68255
68199: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68200: LD_ADDR_VAR 0 9
68204: PUSH
68205: LD_VAR 0 17
68209: PUSH
68210: LD_VAR 0 18
68214: PUSH
68215: LD_VAR 0 19
68219: PUSH
68220: LD_VAR 0 20
68224: PUSH
68225: LD_VAR 0 21
68229: PUSH
68230: LD_VAR 0 22
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: PUSH
68243: LD_VAR 0 4
68247: PUSH
68248: LD_INT 1
68250: PLUS
68251: ARRAY
68252: ST_TO_ADDR
68253: GO 68320
68255: LD_INT 3
68257: DOUBLE
68258: EQUAL
68259: IFTRUE 68263
68261: GO 68319
68263: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68264: LD_ADDR_VAR 0 9
68268: PUSH
68269: LD_VAR 0 23
68273: PUSH
68274: LD_VAR 0 24
68278: PUSH
68279: LD_VAR 0 25
68283: PUSH
68284: LD_VAR 0 26
68288: PUSH
68289: LD_VAR 0 27
68293: PUSH
68294: LD_VAR 0 28
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: PUSH
68307: LD_VAR 0 4
68311: PUSH
68312: LD_INT 1
68314: PLUS
68315: ARRAY
68316: ST_TO_ADDR
68317: GO 68320
68319: POP
68320: GO 68875
68322: LD_INT 2
68324: DOUBLE
68325: EQUAL
68326: IFTRUE 68336
68328: LD_INT 3
68330: DOUBLE
68331: EQUAL
68332: IFTRUE 68336
68334: GO 68392
68336: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68337: LD_ADDR_VAR 0 9
68341: PUSH
68342: LD_VAR 0 29
68346: PUSH
68347: LD_VAR 0 30
68351: PUSH
68352: LD_VAR 0 31
68356: PUSH
68357: LD_VAR 0 32
68361: PUSH
68362: LD_VAR 0 33
68366: PUSH
68367: LD_VAR 0 34
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: PUSH
68380: LD_VAR 0 4
68384: PUSH
68385: LD_INT 1
68387: PLUS
68388: ARRAY
68389: ST_TO_ADDR
68390: GO 68875
68392: LD_INT 16
68394: DOUBLE
68395: EQUAL
68396: IFTRUE 68454
68398: LD_INT 17
68400: DOUBLE
68401: EQUAL
68402: IFTRUE 68454
68404: LD_INT 18
68406: DOUBLE
68407: EQUAL
68408: IFTRUE 68454
68410: LD_INT 19
68412: DOUBLE
68413: EQUAL
68414: IFTRUE 68454
68416: LD_INT 22
68418: DOUBLE
68419: EQUAL
68420: IFTRUE 68454
68422: LD_INT 20
68424: DOUBLE
68425: EQUAL
68426: IFTRUE 68454
68428: LD_INT 21
68430: DOUBLE
68431: EQUAL
68432: IFTRUE 68454
68434: LD_INT 23
68436: DOUBLE
68437: EQUAL
68438: IFTRUE 68454
68440: LD_INT 24
68442: DOUBLE
68443: EQUAL
68444: IFTRUE 68454
68446: LD_INT 25
68448: DOUBLE
68449: EQUAL
68450: IFTRUE 68454
68452: GO 68510
68454: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68455: LD_ADDR_VAR 0 9
68459: PUSH
68460: LD_VAR 0 35
68464: PUSH
68465: LD_VAR 0 36
68469: PUSH
68470: LD_VAR 0 37
68474: PUSH
68475: LD_VAR 0 38
68479: PUSH
68480: LD_VAR 0 39
68484: PUSH
68485: LD_VAR 0 40
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: PUSH
68498: LD_VAR 0 4
68502: PUSH
68503: LD_INT 1
68505: PLUS
68506: ARRAY
68507: ST_TO_ADDR
68508: GO 68875
68510: LD_INT 6
68512: DOUBLE
68513: EQUAL
68514: IFTRUE 68566
68516: LD_INT 7
68518: DOUBLE
68519: EQUAL
68520: IFTRUE 68566
68522: LD_INT 8
68524: DOUBLE
68525: EQUAL
68526: IFTRUE 68566
68528: LD_INT 13
68530: DOUBLE
68531: EQUAL
68532: IFTRUE 68566
68534: LD_INT 12
68536: DOUBLE
68537: EQUAL
68538: IFTRUE 68566
68540: LD_INT 15
68542: DOUBLE
68543: EQUAL
68544: IFTRUE 68566
68546: LD_INT 11
68548: DOUBLE
68549: EQUAL
68550: IFTRUE 68566
68552: LD_INT 14
68554: DOUBLE
68555: EQUAL
68556: IFTRUE 68566
68558: LD_INT 10
68560: DOUBLE
68561: EQUAL
68562: IFTRUE 68566
68564: GO 68622
68566: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68567: LD_ADDR_VAR 0 9
68571: PUSH
68572: LD_VAR 0 41
68576: PUSH
68577: LD_VAR 0 42
68581: PUSH
68582: LD_VAR 0 43
68586: PUSH
68587: LD_VAR 0 44
68591: PUSH
68592: LD_VAR 0 45
68596: PUSH
68597: LD_VAR 0 46
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: PUSH
68610: LD_VAR 0 4
68614: PUSH
68615: LD_INT 1
68617: PLUS
68618: ARRAY
68619: ST_TO_ADDR
68620: GO 68875
68622: LD_INT 36
68624: DOUBLE
68625: EQUAL
68626: IFTRUE 68630
68628: GO 68686
68630: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68631: LD_ADDR_VAR 0 9
68635: PUSH
68636: LD_VAR 0 47
68640: PUSH
68641: LD_VAR 0 48
68645: PUSH
68646: LD_VAR 0 49
68650: PUSH
68651: LD_VAR 0 50
68655: PUSH
68656: LD_VAR 0 51
68660: PUSH
68661: LD_VAR 0 52
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: PUSH
68674: LD_VAR 0 4
68678: PUSH
68679: LD_INT 1
68681: PLUS
68682: ARRAY
68683: ST_TO_ADDR
68684: GO 68875
68686: LD_INT 4
68688: DOUBLE
68689: EQUAL
68690: IFTRUE 68712
68692: LD_INT 5
68694: DOUBLE
68695: EQUAL
68696: IFTRUE 68712
68698: LD_INT 34
68700: DOUBLE
68701: EQUAL
68702: IFTRUE 68712
68704: LD_INT 37
68706: DOUBLE
68707: EQUAL
68708: IFTRUE 68712
68710: GO 68768
68712: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68713: LD_ADDR_VAR 0 9
68717: PUSH
68718: LD_VAR 0 53
68722: PUSH
68723: LD_VAR 0 54
68727: PUSH
68728: LD_VAR 0 55
68732: PUSH
68733: LD_VAR 0 56
68737: PUSH
68738: LD_VAR 0 57
68742: PUSH
68743: LD_VAR 0 58
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: PUSH
68756: LD_VAR 0 4
68760: PUSH
68761: LD_INT 1
68763: PLUS
68764: ARRAY
68765: ST_TO_ADDR
68766: GO 68875
68768: LD_INT 31
68770: DOUBLE
68771: EQUAL
68772: IFTRUE 68818
68774: LD_INT 32
68776: DOUBLE
68777: EQUAL
68778: IFTRUE 68818
68780: LD_INT 33
68782: DOUBLE
68783: EQUAL
68784: IFTRUE 68818
68786: LD_INT 27
68788: DOUBLE
68789: EQUAL
68790: IFTRUE 68818
68792: LD_INT 26
68794: DOUBLE
68795: EQUAL
68796: IFTRUE 68818
68798: LD_INT 28
68800: DOUBLE
68801: EQUAL
68802: IFTRUE 68818
68804: LD_INT 29
68806: DOUBLE
68807: EQUAL
68808: IFTRUE 68818
68810: LD_INT 30
68812: DOUBLE
68813: EQUAL
68814: IFTRUE 68818
68816: GO 68874
68818: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68819: LD_ADDR_VAR 0 9
68823: PUSH
68824: LD_VAR 0 59
68828: PUSH
68829: LD_VAR 0 60
68833: PUSH
68834: LD_VAR 0 61
68838: PUSH
68839: LD_VAR 0 62
68843: PUSH
68844: LD_VAR 0 63
68848: PUSH
68849: LD_VAR 0 64
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: PUSH
68862: LD_VAR 0 4
68866: PUSH
68867: LD_INT 1
68869: PLUS
68870: ARRAY
68871: ST_TO_ADDR
68872: GO 68875
68874: POP
// temp_list2 = [ ] ;
68875: LD_ADDR_VAR 0 10
68879: PUSH
68880: EMPTY
68881: ST_TO_ADDR
// for i in temp_list do
68882: LD_ADDR_VAR 0 8
68886: PUSH
68887: LD_VAR 0 9
68891: PUSH
68892: FOR_IN
68893: IFFALSE 68945
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68895: LD_ADDR_VAR 0 10
68899: PUSH
68900: LD_VAR 0 10
68904: PUSH
68905: LD_VAR 0 8
68909: PUSH
68910: LD_INT 1
68912: ARRAY
68913: PUSH
68914: LD_VAR 0 2
68918: PLUS
68919: PUSH
68920: LD_VAR 0 8
68924: PUSH
68925: LD_INT 2
68927: ARRAY
68928: PUSH
68929: LD_VAR 0 3
68933: PLUS
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: ADD
68942: ST_TO_ADDR
68943: GO 68892
68945: POP
68946: POP
// result = temp_list2 ;
68947: LD_ADDR_VAR 0 7
68951: PUSH
68952: LD_VAR 0 10
68956: ST_TO_ADDR
// end ;
68957: LD_VAR 0 7
68961: RET
// export function EnemyInRange ( unit , dist ) ; begin
68962: LD_INT 0
68964: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68965: LD_ADDR_VAR 0 3
68969: PUSH
68970: LD_VAR 0 1
68974: PPUSH
68975: CALL_OW 255
68979: PPUSH
68980: LD_VAR 0 1
68984: PPUSH
68985: CALL_OW 250
68989: PPUSH
68990: LD_VAR 0 1
68994: PPUSH
68995: CALL_OW 251
68999: PPUSH
69000: LD_VAR 0 2
69004: PPUSH
69005: CALL 42335 0 4
69009: PUSH
69010: LD_INT 4
69012: ARRAY
69013: ST_TO_ADDR
// end ;
69014: LD_VAR 0 3
69018: RET
// export function PlayerSeeMe ( unit ) ; begin
69019: LD_INT 0
69021: PPUSH
// result := See ( your_side , unit ) ;
69022: LD_ADDR_VAR 0 2
69026: PUSH
69027: LD_OWVAR 2
69031: PPUSH
69032: LD_VAR 0 1
69036: PPUSH
69037: CALL_OW 292
69041: ST_TO_ADDR
// end ;
69042: LD_VAR 0 2
69046: RET
// export function ReverseDir ( unit ) ; begin
69047: LD_INT 0
69049: PPUSH
// if not unit then
69050: LD_VAR 0 1
69054: NOT
69055: IFFALSE 69059
// exit ;
69057: GO 69082
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69059: LD_ADDR_VAR 0 2
69063: PUSH
69064: LD_VAR 0 1
69068: PPUSH
69069: CALL_OW 254
69073: PUSH
69074: LD_INT 3
69076: PLUS
69077: PUSH
69078: LD_INT 6
69080: MOD
69081: ST_TO_ADDR
// end ;
69082: LD_VAR 0 2
69086: RET
// export function ReverseArray ( array ) ; var i ; begin
69087: LD_INT 0
69089: PPUSH
69090: PPUSH
// if not array then
69091: LD_VAR 0 1
69095: NOT
69096: IFFALSE 69100
// exit ;
69098: GO 69155
// result := [ ] ;
69100: LD_ADDR_VAR 0 2
69104: PUSH
69105: EMPTY
69106: ST_TO_ADDR
// for i := array downto 1 do
69107: LD_ADDR_VAR 0 3
69111: PUSH
69112: DOUBLE
69113: LD_VAR 0 1
69117: INC
69118: ST_TO_ADDR
69119: LD_INT 1
69121: PUSH
69122: FOR_DOWNTO
69123: IFFALSE 69153
// result := Join ( result , array [ i ] ) ;
69125: LD_ADDR_VAR 0 2
69129: PUSH
69130: LD_VAR 0 2
69134: PPUSH
69135: LD_VAR 0 1
69139: PUSH
69140: LD_VAR 0 3
69144: ARRAY
69145: PPUSH
69146: CALL 73811 0 2
69150: ST_TO_ADDR
69151: GO 69122
69153: POP
69154: POP
// end ;
69155: LD_VAR 0 2
69159: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69160: LD_INT 0
69162: PPUSH
69163: PPUSH
69164: PPUSH
69165: PPUSH
69166: PPUSH
69167: PPUSH
// if not unit or not hexes then
69168: LD_VAR 0 1
69172: NOT
69173: PUSH
69174: LD_VAR 0 2
69178: NOT
69179: OR
69180: IFFALSE 69184
// exit ;
69182: GO 69307
// dist := 9999 ;
69184: LD_ADDR_VAR 0 5
69188: PUSH
69189: LD_INT 9999
69191: ST_TO_ADDR
// for i = 1 to hexes do
69192: LD_ADDR_VAR 0 4
69196: PUSH
69197: DOUBLE
69198: LD_INT 1
69200: DEC
69201: ST_TO_ADDR
69202: LD_VAR 0 2
69206: PUSH
69207: FOR_TO
69208: IFFALSE 69295
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69210: LD_ADDR_VAR 0 6
69214: PUSH
69215: LD_VAR 0 1
69219: PPUSH
69220: LD_VAR 0 2
69224: PUSH
69225: LD_VAR 0 4
69229: ARRAY
69230: PUSH
69231: LD_INT 1
69233: ARRAY
69234: PPUSH
69235: LD_VAR 0 2
69239: PUSH
69240: LD_VAR 0 4
69244: ARRAY
69245: PUSH
69246: LD_INT 2
69248: ARRAY
69249: PPUSH
69250: CALL_OW 297
69254: ST_TO_ADDR
// if tdist < dist then
69255: LD_VAR 0 6
69259: PUSH
69260: LD_VAR 0 5
69264: LESS
69265: IFFALSE 69293
// begin hex := hexes [ i ] ;
69267: LD_ADDR_VAR 0 8
69271: PUSH
69272: LD_VAR 0 2
69276: PUSH
69277: LD_VAR 0 4
69281: ARRAY
69282: ST_TO_ADDR
// dist := tdist ;
69283: LD_ADDR_VAR 0 5
69287: PUSH
69288: LD_VAR 0 6
69292: ST_TO_ADDR
// end ; end ;
69293: GO 69207
69295: POP
69296: POP
// result := hex ;
69297: LD_ADDR_VAR 0 3
69301: PUSH
69302: LD_VAR 0 8
69306: ST_TO_ADDR
// end ;
69307: LD_VAR 0 3
69311: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69312: LD_INT 0
69314: PPUSH
69315: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69316: LD_VAR 0 1
69320: NOT
69321: PUSH
69322: LD_VAR 0 1
69326: PUSH
69327: LD_INT 21
69329: PUSH
69330: LD_INT 2
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 23
69339: PUSH
69340: LD_INT 2
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PPUSH
69351: CALL_OW 69
69355: IN
69356: NOT
69357: OR
69358: IFFALSE 69362
// exit ;
69360: GO 69409
// for i = 1 to 3 do
69362: LD_ADDR_VAR 0 3
69366: PUSH
69367: DOUBLE
69368: LD_INT 1
69370: DEC
69371: ST_TO_ADDR
69372: LD_INT 3
69374: PUSH
69375: FOR_TO
69376: IFFALSE 69407
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69378: LD_VAR 0 1
69382: PPUSH
69383: CALL_OW 250
69387: PPUSH
69388: LD_VAR 0 1
69392: PPUSH
69393: CALL_OW 251
69397: PPUSH
69398: LD_INT 1
69400: PPUSH
69401: CALL_OW 453
69405: GO 69375
69407: POP
69408: POP
// end ;
69409: LD_VAR 0 2
69413: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69414: LD_INT 0
69416: PPUSH
69417: PPUSH
69418: PPUSH
69419: PPUSH
69420: PPUSH
69421: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69422: LD_VAR 0 1
69426: NOT
69427: PUSH
69428: LD_VAR 0 2
69432: NOT
69433: OR
69434: PUSH
69435: LD_VAR 0 1
69439: PPUSH
69440: CALL_OW 314
69444: OR
69445: IFFALSE 69449
// exit ;
69447: GO 69916
// if GetLives ( i ) < 250 then
69449: LD_VAR 0 4
69453: PPUSH
69454: CALL_OW 256
69458: PUSH
69459: LD_INT 250
69461: LESS
69462: IFFALSE 69475
// begin ComAutodestruct ( i ) ;
69464: LD_VAR 0 4
69468: PPUSH
69469: CALL 69312 0 1
// exit ;
69473: GO 69916
// end ; x := GetX ( enemy_unit ) ;
69475: LD_ADDR_VAR 0 7
69479: PUSH
69480: LD_VAR 0 2
69484: PPUSH
69485: CALL_OW 250
69489: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69490: LD_ADDR_VAR 0 8
69494: PUSH
69495: LD_VAR 0 2
69499: PPUSH
69500: CALL_OW 251
69504: ST_TO_ADDR
// if not x or not y then
69505: LD_VAR 0 7
69509: NOT
69510: PUSH
69511: LD_VAR 0 8
69515: NOT
69516: OR
69517: IFFALSE 69521
// exit ;
69519: GO 69916
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69521: LD_ADDR_VAR 0 6
69525: PUSH
69526: LD_VAR 0 7
69530: PPUSH
69531: LD_INT 0
69533: PPUSH
69534: LD_INT 4
69536: PPUSH
69537: CALL_OW 272
69541: PUSH
69542: LD_VAR 0 8
69546: PPUSH
69547: LD_INT 0
69549: PPUSH
69550: LD_INT 4
69552: PPUSH
69553: CALL_OW 273
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_VAR 0 7
69566: PPUSH
69567: LD_INT 1
69569: PPUSH
69570: LD_INT 4
69572: PPUSH
69573: CALL_OW 272
69577: PUSH
69578: LD_VAR 0 8
69582: PPUSH
69583: LD_INT 1
69585: PPUSH
69586: LD_INT 4
69588: PPUSH
69589: CALL_OW 273
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_VAR 0 7
69602: PPUSH
69603: LD_INT 2
69605: PPUSH
69606: LD_INT 4
69608: PPUSH
69609: CALL_OW 272
69613: PUSH
69614: LD_VAR 0 8
69618: PPUSH
69619: LD_INT 2
69621: PPUSH
69622: LD_INT 4
69624: PPUSH
69625: CALL_OW 273
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_VAR 0 7
69638: PPUSH
69639: LD_INT 3
69641: PPUSH
69642: LD_INT 4
69644: PPUSH
69645: CALL_OW 272
69649: PUSH
69650: LD_VAR 0 8
69654: PPUSH
69655: LD_INT 3
69657: PPUSH
69658: LD_INT 4
69660: PPUSH
69661: CALL_OW 273
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_VAR 0 7
69674: PPUSH
69675: LD_INT 4
69677: PPUSH
69678: LD_INT 4
69680: PPUSH
69681: CALL_OW 272
69685: PUSH
69686: LD_VAR 0 8
69690: PPUSH
69691: LD_INT 4
69693: PPUSH
69694: LD_INT 4
69696: PPUSH
69697: CALL_OW 273
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_VAR 0 7
69710: PPUSH
69711: LD_INT 5
69713: PPUSH
69714: LD_INT 4
69716: PPUSH
69717: CALL_OW 272
69721: PUSH
69722: LD_VAR 0 8
69726: PPUSH
69727: LD_INT 5
69729: PPUSH
69730: LD_INT 4
69732: PPUSH
69733: CALL_OW 273
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: ST_TO_ADDR
// for i = tmp downto 1 do
69750: LD_ADDR_VAR 0 4
69754: PUSH
69755: DOUBLE
69756: LD_VAR 0 6
69760: INC
69761: ST_TO_ADDR
69762: LD_INT 1
69764: PUSH
69765: FOR_DOWNTO
69766: IFFALSE 69867
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69768: LD_VAR 0 6
69772: PUSH
69773: LD_VAR 0 4
69777: ARRAY
69778: PUSH
69779: LD_INT 1
69781: ARRAY
69782: PPUSH
69783: LD_VAR 0 6
69787: PUSH
69788: LD_VAR 0 4
69792: ARRAY
69793: PUSH
69794: LD_INT 2
69796: ARRAY
69797: PPUSH
69798: CALL_OW 488
69802: NOT
69803: PUSH
69804: LD_VAR 0 6
69808: PUSH
69809: LD_VAR 0 4
69813: ARRAY
69814: PUSH
69815: LD_INT 1
69817: ARRAY
69818: PPUSH
69819: LD_VAR 0 6
69823: PUSH
69824: LD_VAR 0 4
69828: ARRAY
69829: PUSH
69830: LD_INT 2
69832: ARRAY
69833: PPUSH
69834: CALL_OW 428
69838: PUSH
69839: LD_INT 0
69841: NONEQUAL
69842: OR
69843: IFFALSE 69865
// tmp := Delete ( tmp , i ) ;
69845: LD_ADDR_VAR 0 6
69849: PUSH
69850: LD_VAR 0 6
69854: PPUSH
69855: LD_VAR 0 4
69859: PPUSH
69860: CALL_OW 3
69864: ST_TO_ADDR
69865: GO 69765
69867: POP
69868: POP
// j := GetClosestHex ( unit , tmp ) ;
69869: LD_ADDR_VAR 0 5
69873: PUSH
69874: LD_VAR 0 1
69878: PPUSH
69879: LD_VAR 0 6
69883: PPUSH
69884: CALL 69160 0 2
69888: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69889: LD_VAR 0 1
69893: PPUSH
69894: LD_VAR 0 5
69898: PUSH
69899: LD_INT 1
69901: ARRAY
69902: PPUSH
69903: LD_VAR 0 5
69907: PUSH
69908: LD_INT 2
69910: ARRAY
69911: PPUSH
69912: CALL_OW 111
// end ;
69916: LD_VAR 0 3
69920: RET
// export function PrepareApemanSoldier ( ) ; begin
69921: LD_INT 0
69923: PPUSH
// uc_nation := 0 ;
69924: LD_ADDR_OWVAR 21
69928: PUSH
69929: LD_INT 0
69931: ST_TO_ADDR
// hc_sex := sex_male ;
69932: LD_ADDR_OWVAR 27
69936: PUSH
69937: LD_INT 1
69939: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69940: LD_ADDR_OWVAR 28
69944: PUSH
69945: LD_INT 15
69947: ST_TO_ADDR
// hc_gallery :=  ;
69948: LD_ADDR_OWVAR 33
69952: PUSH
69953: LD_STRING 
69955: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69956: LD_ADDR_OWVAR 31
69960: PUSH
69961: LD_INT 0
69963: PPUSH
69964: LD_INT 3
69966: PPUSH
69967: CALL_OW 12
69971: PUSH
69972: LD_INT 0
69974: PPUSH
69975: LD_INT 3
69977: PPUSH
69978: CALL_OW 12
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: LD_INT 0
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: ST_TO_ADDR
// end ;
69995: LD_VAR 0 1
69999: RET
// export function PrepareApemanEngineer ( ) ; begin
70000: LD_INT 0
70002: PPUSH
// uc_nation := 0 ;
70003: LD_ADDR_OWVAR 21
70007: PUSH
70008: LD_INT 0
70010: ST_TO_ADDR
// hc_sex := sex_male ;
70011: LD_ADDR_OWVAR 27
70015: PUSH
70016: LD_INT 1
70018: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70019: LD_ADDR_OWVAR 28
70023: PUSH
70024: LD_INT 16
70026: ST_TO_ADDR
// hc_gallery :=  ;
70027: LD_ADDR_OWVAR 33
70031: PUSH
70032: LD_STRING 
70034: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70035: LD_ADDR_OWVAR 31
70039: PUSH
70040: LD_INT 0
70042: PPUSH
70043: LD_INT 3
70045: PPUSH
70046: CALL_OW 12
70050: PUSH
70051: LD_INT 0
70053: PPUSH
70054: LD_INT 3
70056: PPUSH
70057: CALL_OW 12
70061: PUSH
70062: LD_INT 0
70064: PUSH
70065: LD_INT 0
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: ST_TO_ADDR
// end ;
70074: LD_VAR 0 1
70078: RET
// export function PrepareApeman ( agressivity ) ; begin
70079: LD_INT 0
70081: PPUSH
// uc_side := 0 ;
70082: LD_ADDR_OWVAR 20
70086: PUSH
70087: LD_INT 0
70089: ST_TO_ADDR
// uc_nation := 0 ;
70090: LD_ADDR_OWVAR 21
70094: PUSH
70095: LD_INT 0
70097: ST_TO_ADDR
// hc_sex := sex_male ;
70098: LD_ADDR_OWVAR 27
70102: PUSH
70103: LD_INT 1
70105: ST_TO_ADDR
// hc_class := class_apeman ;
70106: LD_ADDR_OWVAR 28
70110: PUSH
70111: LD_INT 12
70113: ST_TO_ADDR
// hc_gallery :=  ;
70114: LD_ADDR_OWVAR 33
70118: PUSH
70119: LD_STRING 
70121: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70122: LD_ADDR_OWVAR 35
70126: PUSH
70127: LD_VAR 0 1
70131: NEG
70132: PPUSH
70133: LD_VAR 0 1
70137: PPUSH
70138: CALL_OW 12
70142: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70143: LD_ADDR_OWVAR 31
70147: PUSH
70148: LD_INT 0
70150: PPUSH
70151: LD_INT 3
70153: PPUSH
70154: CALL_OW 12
70158: PUSH
70159: LD_INT 0
70161: PPUSH
70162: LD_INT 3
70164: PPUSH
70165: CALL_OW 12
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: LD_INT 0
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: ST_TO_ADDR
// end ;
70182: LD_VAR 0 2
70186: RET
// export function PrepareTiger ( agressivity ) ; begin
70187: LD_INT 0
70189: PPUSH
// uc_side := 0 ;
70190: LD_ADDR_OWVAR 20
70194: PUSH
70195: LD_INT 0
70197: ST_TO_ADDR
// uc_nation := 0 ;
70198: LD_ADDR_OWVAR 21
70202: PUSH
70203: LD_INT 0
70205: ST_TO_ADDR
// hc_class := class_tiger ;
70206: LD_ADDR_OWVAR 28
70210: PUSH
70211: LD_INT 14
70213: ST_TO_ADDR
// hc_gallery :=  ;
70214: LD_ADDR_OWVAR 33
70218: PUSH
70219: LD_STRING 
70221: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70222: LD_ADDR_OWVAR 35
70226: PUSH
70227: LD_VAR 0 1
70231: NEG
70232: PPUSH
70233: LD_VAR 0 1
70237: PPUSH
70238: CALL_OW 12
70242: ST_TO_ADDR
// end ;
70243: LD_VAR 0 2
70247: RET
// export function PrepareEnchidna ( ) ; begin
70248: LD_INT 0
70250: PPUSH
// uc_side := 0 ;
70251: LD_ADDR_OWVAR 20
70255: PUSH
70256: LD_INT 0
70258: ST_TO_ADDR
// uc_nation := 0 ;
70259: LD_ADDR_OWVAR 21
70263: PUSH
70264: LD_INT 0
70266: ST_TO_ADDR
// hc_class := class_baggie ;
70267: LD_ADDR_OWVAR 28
70271: PUSH
70272: LD_INT 13
70274: ST_TO_ADDR
// hc_gallery :=  ;
70275: LD_ADDR_OWVAR 33
70279: PUSH
70280: LD_STRING 
70282: ST_TO_ADDR
// end ;
70283: LD_VAR 0 1
70287: RET
// export function PrepareFrog ( ) ; begin
70288: LD_INT 0
70290: PPUSH
// uc_side := 0 ;
70291: LD_ADDR_OWVAR 20
70295: PUSH
70296: LD_INT 0
70298: ST_TO_ADDR
// uc_nation := 0 ;
70299: LD_ADDR_OWVAR 21
70303: PUSH
70304: LD_INT 0
70306: ST_TO_ADDR
// hc_class := class_frog ;
70307: LD_ADDR_OWVAR 28
70311: PUSH
70312: LD_INT 19
70314: ST_TO_ADDR
// hc_gallery :=  ;
70315: LD_ADDR_OWVAR 33
70319: PUSH
70320: LD_STRING 
70322: ST_TO_ADDR
// end ;
70323: LD_VAR 0 1
70327: RET
// export function PrepareFish ( ) ; begin
70328: LD_INT 0
70330: PPUSH
// uc_side := 0 ;
70331: LD_ADDR_OWVAR 20
70335: PUSH
70336: LD_INT 0
70338: ST_TO_ADDR
// uc_nation := 0 ;
70339: LD_ADDR_OWVAR 21
70343: PUSH
70344: LD_INT 0
70346: ST_TO_ADDR
// hc_class := class_fish ;
70347: LD_ADDR_OWVAR 28
70351: PUSH
70352: LD_INT 20
70354: ST_TO_ADDR
// hc_gallery :=  ;
70355: LD_ADDR_OWVAR 33
70359: PUSH
70360: LD_STRING 
70362: ST_TO_ADDR
// end ;
70363: LD_VAR 0 1
70367: RET
// export function PrepareBird ( ) ; begin
70368: LD_INT 0
70370: PPUSH
// uc_side := 0 ;
70371: LD_ADDR_OWVAR 20
70375: PUSH
70376: LD_INT 0
70378: ST_TO_ADDR
// uc_nation := 0 ;
70379: LD_ADDR_OWVAR 21
70383: PUSH
70384: LD_INT 0
70386: ST_TO_ADDR
// hc_class := class_phororhacos ;
70387: LD_ADDR_OWVAR 28
70391: PUSH
70392: LD_INT 18
70394: ST_TO_ADDR
// hc_gallery :=  ;
70395: LD_ADDR_OWVAR 33
70399: PUSH
70400: LD_STRING 
70402: ST_TO_ADDR
// end ;
70403: LD_VAR 0 1
70407: RET
// export function PrepareHorse ( ) ; begin
70408: LD_INT 0
70410: PPUSH
// uc_side := 0 ;
70411: LD_ADDR_OWVAR 20
70415: PUSH
70416: LD_INT 0
70418: ST_TO_ADDR
// uc_nation := 0 ;
70419: LD_ADDR_OWVAR 21
70423: PUSH
70424: LD_INT 0
70426: ST_TO_ADDR
// hc_class := class_horse ;
70427: LD_ADDR_OWVAR 28
70431: PUSH
70432: LD_INT 21
70434: ST_TO_ADDR
// hc_gallery :=  ;
70435: LD_ADDR_OWVAR 33
70439: PUSH
70440: LD_STRING 
70442: ST_TO_ADDR
// end ;
70443: LD_VAR 0 1
70447: RET
// export function PrepareMastodont ( ) ; begin
70448: LD_INT 0
70450: PPUSH
// uc_side := 0 ;
70451: LD_ADDR_OWVAR 20
70455: PUSH
70456: LD_INT 0
70458: ST_TO_ADDR
// uc_nation := 0 ;
70459: LD_ADDR_OWVAR 21
70463: PUSH
70464: LD_INT 0
70466: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70467: LD_ADDR_OWVAR 37
70471: PUSH
70472: LD_INT 31
70474: ST_TO_ADDR
// vc_control := control_rider ;
70475: LD_ADDR_OWVAR 38
70479: PUSH
70480: LD_INT 4
70482: ST_TO_ADDR
// end ;
70483: LD_VAR 0 1
70487: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70488: LD_INT 0
70490: PPUSH
70491: PPUSH
70492: PPUSH
// uc_side = 0 ;
70493: LD_ADDR_OWVAR 20
70497: PUSH
70498: LD_INT 0
70500: ST_TO_ADDR
// uc_nation = 0 ;
70501: LD_ADDR_OWVAR 21
70505: PUSH
70506: LD_INT 0
70508: ST_TO_ADDR
// InitHc_All ( ) ;
70509: CALL_OW 584
// InitVc ;
70513: CALL_OW 20
// if mastodonts then
70517: LD_VAR 0 6
70521: IFFALSE 70588
// for i = 1 to mastodonts do
70523: LD_ADDR_VAR 0 11
70527: PUSH
70528: DOUBLE
70529: LD_INT 1
70531: DEC
70532: ST_TO_ADDR
70533: LD_VAR 0 6
70537: PUSH
70538: FOR_TO
70539: IFFALSE 70586
// begin vc_chassis := 31 ;
70541: LD_ADDR_OWVAR 37
70545: PUSH
70546: LD_INT 31
70548: ST_TO_ADDR
// vc_control := control_rider ;
70549: LD_ADDR_OWVAR 38
70553: PUSH
70554: LD_INT 4
70556: ST_TO_ADDR
// animal := CreateVehicle ;
70557: LD_ADDR_VAR 0 12
70561: PUSH
70562: CALL_OW 45
70566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70567: LD_VAR 0 12
70571: PPUSH
70572: LD_VAR 0 8
70576: PPUSH
70577: LD_INT 0
70579: PPUSH
70580: CALL 72716 0 3
// end ;
70584: GO 70538
70586: POP
70587: POP
// if horses then
70588: LD_VAR 0 5
70592: IFFALSE 70659
// for i = 1 to horses do
70594: LD_ADDR_VAR 0 11
70598: PUSH
70599: DOUBLE
70600: LD_INT 1
70602: DEC
70603: ST_TO_ADDR
70604: LD_VAR 0 5
70608: PUSH
70609: FOR_TO
70610: IFFALSE 70657
// begin hc_class := 21 ;
70612: LD_ADDR_OWVAR 28
70616: PUSH
70617: LD_INT 21
70619: ST_TO_ADDR
// hc_gallery :=  ;
70620: LD_ADDR_OWVAR 33
70624: PUSH
70625: LD_STRING 
70627: ST_TO_ADDR
// animal := CreateHuman ;
70628: LD_ADDR_VAR 0 12
70632: PUSH
70633: CALL_OW 44
70637: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70638: LD_VAR 0 12
70642: PPUSH
70643: LD_VAR 0 8
70647: PPUSH
70648: LD_INT 0
70650: PPUSH
70651: CALL 72716 0 3
// end ;
70655: GO 70609
70657: POP
70658: POP
// if birds then
70659: LD_VAR 0 1
70663: IFFALSE 70730
// for i = 1 to birds do
70665: LD_ADDR_VAR 0 11
70669: PUSH
70670: DOUBLE
70671: LD_INT 1
70673: DEC
70674: ST_TO_ADDR
70675: LD_VAR 0 1
70679: PUSH
70680: FOR_TO
70681: IFFALSE 70728
// begin hc_class := 18 ;
70683: LD_ADDR_OWVAR 28
70687: PUSH
70688: LD_INT 18
70690: ST_TO_ADDR
// hc_gallery =  ;
70691: LD_ADDR_OWVAR 33
70695: PUSH
70696: LD_STRING 
70698: ST_TO_ADDR
// animal := CreateHuman ;
70699: LD_ADDR_VAR 0 12
70703: PUSH
70704: CALL_OW 44
70708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70709: LD_VAR 0 12
70713: PPUSH
70714: LD_VAR 0 8
70718: PPUSH
70719: LD_INT 0
70721: PPUSH
70722: CALL 72716 0 3
// end ;
70726: GO 70680
70728: POP
70729: POP
// if tigers then
70730: LD_VAR 0 2
70734: IFFALSE 70818
// for i = 1 to tigers do
70736: LD_ADDR_VAR 0 11
70740: PUSH
70741: DOUBLE
70742: LD_INT 1
70744: DEC
70745: ST_TO_ADDR
70746: LD_VAR 0 2
70750: PUSH
70751: FOR_TO
70752: IFFALSE 70816
// begin hc_class = class_tiger ;
70754: LD_ADDR_OWVAR 28
70758: PUSH
70759: LD_INT 14
70761: ST_TO_ADDR
// hc_gallery =  ;
70762: LD_ADDR_OWVAR 33
70766: PUSH
70767: LD_STRING 
70769: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70770: LD_ADDR_OWVAR 35
70774: PUSH
70775: LD_INT 7
70777: NEG
70778: PPUSH
70779: LD_INT 7
70781: PPUSH
70782: CALL_OW 12
70786: ST_TO_ADDR
// animal := CreateHuman ;
70787: LD_ADDR_VAR 0 12
70791: PUSH
70792: CALL_OW 44
70796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70797: LD_VAR 0 12
70801: PPUSH
70802: LD_VAR 0 8
70806: PPUSH
70807: LD_INT 0
70809: PPUSH
70810: CALL 72716 0 3
// end ;
70814: GO 70751
70816: POP
70817: POP
// if apemans then
70818: LD_VAR 0 3
70822: IFFALSE 70945
// for i = 1 to apemans do
70824: LD_ADDR_VAR 0 11
70828: PUSH
70829: DOUBLE
70830: LD_INT 1
70832: DEC
70833: ST_TO_ADDR
70834: LD_VAR 0 3
70838: PUSH
70839: FOR_TO
70840: IFFALSE 70943
// begin hc_class = class_apeman ;
70842: LD_ADDR_OWVAR 28
70846: PUSH
70847: LD_INT 12
70849: ST_TO_ADDR
// hc_gallery =  ;
70850: LD_ADDR_OWVAR 33
70854: PUSH
70855: LD_STRING 
70857: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70858: LD_ADDR_OWVAR 35
70862: PUSH
70863: LD_INT 2
70865: NEG
70866: PPUSH
70867: LD_INT 2
70869: PPUSH
70870: CALL_OW 12
70874: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70875: LD_ADDR_OWVAR 31
70879: PUSH
70880: LD_INT 1
70882: PPUSH
70883: LD_INT 3
70885: PPUSH
70886: CALL_OW 12
70890: PUSH
70891: LD_INT 1
70893: PPUSH
70894: LD_INT 3
70896: PPUSH
70897: CALL_OW 12
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: LD_INT 0
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: ST_TO_ADDR
// animal := CreateHuman ;
70914: LD_ADDR_VAR 0 12
70918: PUSH
70919: CALL_OW 44
70923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70924: LD_VAR 0 12
70928: PPUSH
70929: LD_VAR 0 8
70933: PPUSH
70934: LD_INT 0
70936: PPUSH
70937: CALL 72716 0 3
// end ;
70941: GO 70839
70943: POP
70944: POP
// if enchidnas then
70945: LD_VAR 0 4
70949: IFFALSE 71016
// for i = 1 to enchidnas do
70951: LD_ADDR_VAR 0 11
70955: PUSH
70956: DOUBLE
70957: LD_INT 1
70959: DEC
70960: ST_TO_ADDR
70961: LD_VAR 0 4
70965: PUSH
70966: FOR_TO
70967: IFFALSE 71014
// begin hc_class = 13 ;
70969: LD_ADDR_OWVAR 28
70973: PUSH
70974: LD_INT 13
70976: ST_TO_ADDR
// hc_gallery =  ;
70977: LD_ADDR_OWVAR 33
70981: PUSH
70982: LD_STRING 
70984: ST_TO_ADDR
// animal := CreateHuman ;
70985: LD_ADDR_VAR 0 12
70989: PUSH
70990: CALL_OW 44
70994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70995: LD_VAR 0 12
70999: PPUSH
71000: LD_VAR 0 8
71004: PPUSH
71005: LD_INT 0
71007: PPUSH
71008: CALL 72716 0 3
// end ;
71012: GO 70966
71014: POP
71015: POP
// if fishes then
71016: LD_VAR 0 7
71020: IFFALSE 71087
// for i = 1 to fishes do
71022: LD_ADDR_VAR 0 11
71026: PUSH
71027: DOUBLE
71028: LD_INT 1
71030: DEC
71031: ST_TO_ADDR
71032: LD_VAR 0 7
71036: PUSH
71037: FOR_TO
71038: IFFALSE 71085
// begin hc_class = 20 ;
71040: LD_ADDR_OWVAR 28
71044: PUSH
71045: LD_INT 20
71047: ST_TO_ADDR
// hc_gallery =  ;
71048: LD_ADDR_OWVAR 33
71052: PUSH
71053: LD_STRING 
71055: ST_TO_ADDR
// animal := CreateHuman ;
71056: LD_ADDR_VAR 0 12
71060: PUSH
71061: CALL_OW 44
71065: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71066: LD_VAR 0 12
71070: PPUSH
71071: LD_VAR 0 9
71075: PPUSH
71076: LD_INT 0
71078: PPUSH
71079: CALL 72716 0 3
// end ;
71083: GO 71037
71085: POP
71086: POP
// end ;
71087: LD_VAR 0 10
71091: RET
// export function WantHeal ( sci , unit ) ; begin
71092: LD_INT 0
71094: PPUSH
// if GetTaskList ( sci ) > 0 then
71095: LD_VAR 0 1
71099: PPUSH
71100: CALL_OW 437
71104: PUSH
71105: LD_INT 0
71107: GREATER
71108: IFFALSE 71178
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71110: LD_VAR 0 1
71114: PPUSH
71115: CALL_OW 437
71119: PUSH
71120: LD_INT 1
71122: ARRAY
71123: PUSH
71124: LD_INT 1
71126: ARRAY
71127: PUSH
71128: LD_STRING l
71130: EQUAL
71131: PUSH
71132: LD_VAR 0 1
71136: PPUSH
71137: CALL_OW 437
71141: PUSH
71142: LD_INT 1
71144: ARRAY
71145: PUSH
71146: LD_INT 4
71148: ARRAY
71149: PUSH
71150: LD_VAR 0 2
71154: EQUAL
71155: AND
71156: IFFALSE 71168
// result := true else
71158: LD_ADDR_VAR 0 3
71162: PUSH
71163: LD_INT 1
71165: ST_TO_ADDR
71166: GO 71176
// result := false ;
71168: LD_ADDR_VAR 0 3
71172: PUSH
71173: LD_INT 0
71175: ST_TO_ADDR
// end else
71176: GO 71186
// result := false ;
71178: LD_ADDR_VAR 0 3
71182: PUSH
71183: LD_INT 0
71185: ST_TO_ADDR
// end ;
71186: LD_VAR 0 3
71190: RET
// export function HealTarget ( sci ) ; begin
71191: LD_INT 0
71193: PPUSH
// if not sci then
71194: LD_VAR 0 1
71198: NOT
71199: IFFALSE 71203
// exit ;
71201: GO 71268
// result := 0 ;
71203: LD_ADDR_VAR 0 2
71207: PUSH
71208: LD_INT 0
71210: ST_TO_ADDR
// if GetTaskList ( sci ) then
71211: LD_VAR 0 1
71215: PPUSH
71216: CALL_OW 437
71220: IFFALSE 71268
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71222: LD_VAR 0 1
71226: PPUSH
71227: CALL_OW 437
71231: PUSH
71232: LD_INT 1
71234: ARRAY
71235: PUSH
71236: LD_INT 1
71238: ARRAY
71239: PUSH
71240: LD_STRING l
71242: EQUAL
71243: IFFALSE 71268
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71245: LD_ADDR_VAR 0 2
71249: PUSH
71250: LD_VAR 0 1
71254: PPUSH
71255: CALL_OW 437
71259: PUSH
71260: LD_INT 1
71262: ARRAY
71263: PUSH
71264: LD_INT 4
71266: ARRAY
71267: ST_TO_ADDR
// end ;
71268: LD_VAR 0 2
71272: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71273: LD_INT 0
71275: PPUSH
71276: PPUSH
71277: PPUSH
71278: PPUSH
// if not base_units then
71279: LD_VAR 0 1
71283: NOT
71284: IFFALSE 71288
// exit ;
71286: GO 71375
// result := false ;
71288: LD_ADDR_VAR 0 2
71292: PUSH
71293: LD_INT 0
71295: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71296: LD_ADDR_VAR 0 5
71300: PUSH
71301: LD_VAR 0 1
71305: PPUSH
71306: LD_INT 21
71308: PUSH
71309: LD_INT 3
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PPUSH
71316: CALL_OW 72
71320: ST_TO_ADDR
// if not tmp then
71321: LD_VAR 0 5
71325: NOT
71326: IFFALSE 71330
// exit ;
71328: GO 71375
// for i in tmp do
71330: LD_ADDR_VAR 0 3
71334: PUSH
71335: LD_VAR 0 5
71339: PUSH
71340: FOR_IN
71341: IFFALSE 71373
// begin result := EnemyInRange ( i , 22 ) ;
71343: LD_ADDR_VAR 0 2
71347: PUSH
71348: LD_VAR 0 3
71352: PPUSH
71353: LD_INT 22
71355: PPUSH
71356: CALL 68962 0 2
71360: ST_TO_ADDR
// if result then
71361: LD_VAR 0 2
71365: IFFALSE 71371
// exit ;
71367: POP
71368: POP
71369: GO 71375
// end ;
71371: GO 71340
71373: POP
71374: POP
// end ;
71375: LD_VAR 0 2
71379: RET
// export function FilterByTag ( units , tag ) ; begin
71380: LD_INT 0
71382: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71383: LD_ADDR_VAR 0 3
71387: PUSH
71388: LD_VAR 0 1
71392: PPUSH
71393: LD_INT 120
71395: PUSH
71396: LD_VAR 0 2
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PPUSH
71405: CALL_OW 72
71409: ST_TO_ADDR
// end ;
71410: LD_VAR 0 3
71414: RET
// export function IsDriver ( un ) ; begin
71415: LD_INT 0
71417: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71418: LD_ADDR_VAR 0 2
71422: PUSH
71423: LD_VAR 0 1
71427: PUSH
71428: LD_INT 55
71430: PUSH
71431: EMPTY
71432: LIST
71433: PPUSH
71434: CALL_OW 69
71438: IN
71439: ST_TO_ADDR
// end ;
71440: LD_VAR 0 2
71444: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71445: LD_INT 0
71447: PPUSH
71448: PPUSH
// list := [ ] ;
71449: LD_ADDR_VAR 0 5
71453: PUSH
71454: EMPTY
71455: ST_TO_ADDR
// case d of 0 :
71456: LD_VAR 0 3
71460: PUSH
71461: LD_INT 0
71463: DOUBLE
71464: EQUAL
71465: IFTRUE 71469
71467: GO 71602
71469: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71470: LD_ADDR_VAR 0 5
71474: PUSH
71475: LD_VAR 0 1
71479: PUSH
71480: LD_INT 4
71482: MINUS
71483: PUSH
71484: LD_VAR 0 2
71488: PUSH
71489: LD_INT 4
71491: MINUS
71492: PUSH
71493: LD_INT 2
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: PUSH
71501: LD_VAR 0 1
71505: PUSH
71506: LD_INT 3
71508: MINUS
71509: PUSH
71510: LD_VAR 0 2
71514: PUSH
71515: LD_INT 1
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: PUSH
71523: LD_VAR 0 1
71527: PUSH
71528: LD_INT 4
71530: PLUS
71531: PUSH
71532: LD_VAR 0 2
71536: PUSH
71537: LD_INT 4
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: LIST
71544: PUSH
71545: LD_VAR 0 1
71549: PUSH
71550: LD_INT 3
71552: PLUS
71553: PUSH
71554: LD_VAR 0 2
71558: PUSH
71559: LD_INT 3
71561: PLUS
71562: PUSH
71563: LD_INT 5
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: LIST
71570: PUSH
71571: LD_VAR 0 1
71575: PUSH
71576: LD_VAR 0 2
71580: PUSH
71581: LD_INT 4
71583: PLUS
71584: PUSH
71585: LD_INT 0
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: LIST
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: ST_TO_ADDR
// end ; 1 :
71600: GO 72300
71602: LD_INT 1
71604: DOUBLE
71605: EQUAL
71606: IFTRUE 71610
71608: GO 71743
71610: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71611: LD_ADDR_VAR 0 5
71615: PUSH
71616: LD_VAR 0 1
71620: PUSH
71621: LD_VAR 0 2
71625: PUSH
71626: LD_INT 4
71628: MINUS
71629: PUSH
71630: LD_INT 3
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: LIST
71637: PUSH
71638: LD_VAR 0 1
71642: PUSH
71643: LD_INT 3
71645: MINUS
71646: PUSH
71647: LD_VAR 0 2
71651: PUSH
71652: LD_INT 3
71654: MINUS
71655: PUSH
71656: LD_INT 2
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: LIST
71663: PUSH
71664: LD_VAR 0 1
71668: PUSH
71669: LD_INT 4
71671: MINUS
71672: PUSH
71673: LD_VAR 0 2
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: LIST
71685: PUSH
71686: LD_VAR 0 1
71690: PUSH
71691: LD_VAR 0 2
71695: PUSH
71696: LD_INT 3
71698: PLUS
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: LIST
71707: PUSH
71708: LD_VAR 0 1
71712: PUSH
71713: LD_INT 4
71715: PLUS
71716: PUSH
71717: LD_VAR 0 2
71721: PUSH
71722: LD_INT 4
71724: PLUS
71725: PUSH
71726: LD_INT 5
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: LIST
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: ST_TO_ADDR
// end ; 2 :
71741: GO 72300
71743: LD_INT 2
71745: DOUBLE
71746: EQUAL
71747: IFTRUE 71751
71749: GO 71880
71751: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71752: LD_ADDR_VAR 0 5
71756: PUSH
71757: LD_VAR 0 1
71761: PUSH
71762: LD_VAR 0 2
71766: PUSH
71767: LD_INT 3
71769: MINUS
71770: PUSH
71771: LD_INT 3
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: LIST
71778: PUSH
71779: LD_VAR 0 1
71783: PUSH
71784: LD_INT 4
71786: PLUS
71787: PUSH
71788: LD_VAR 0 2
71792: PUSH
71793: LD_INT 4
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: LIST
71800: PUSH
71801: LD_VAR 0 1
71805: PUSH
71806: LD_VAR 0 2
71810: PUSH
71811: LD_INT 4
71813: PLUS
71814: PUSH
71815: LD_INT 0
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: LIST
71822: PUSH
71823: LD_VAR 0 1
71827: PUSH
71828: LD_INT 3
71830: MINUS
71831: PUSH
71832: LD_VAR 0 2
71836: PUSH
71837: LD_INT 1
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: LIST
71844: PUSH
71845: LD_VAR 0 1
71849: PUSH
71850: LD_INT 4
71852: MINUS
71853: PUSH
71854: LD_VAR 0 2
71858: PUSH
71859: LD_INT 4
71861: MINUS
71862: PUSH
71863: LD_INT 2
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: LIST
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: ST_TO_ADDR
// end ; 3 :
71878: GO 72300
71880: LD_INT 3
71882: DOUBLE
71883: EQUAL
71884: IFTRUE 71888
71886: GO 72021
71888: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71889: LD_ADDR_VAR 0 5
71893: PUSH
71894: LD_VAR 0 1
71898: PUSH
71899: LD_INT 3
71901: PLUS
71902: PUSH
71903: LD_VAR 0 2
71907: PUSH
71908: LD_INT 4
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: LIST
71915: PUSH
71916: LD_VAR 0 1
71920: PUSH
71921: LD_INT 4
71923: PLUS
71924: PUSH
71925: LD_VAR 0 2
71929: PUSH
71930: LD_INT 4
71932: PLUS
71933: PUSH
71934: LD_INT 5
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: LIST
71941: PUSH
71942: LD_VAR 0 1
71946: PUSH
71947: LD_INT 4
71949: MINUS
71950: PUSH
71951: LD_VAR 0 2
71955: PUSH
71956: LD_INT 1
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: LIST
71963: PUSH
71964: LD_VAR 0 1
71968: PUSH
71969: LD_VAR 0 2
71973: PUSH
71974: LD_INT 4
71976: MINUS
71977: PUSH
71978: LD_INT 3
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: LIST
71985: PUSH
71986: LD_VAR 0 1
71990: PUSH
71991: LD_INT 3
71993: MINUS
71994: PUSH
71995: LD_VAR 0 2
71999: PUSH
72000: LD_INT 3
72002: MINUS
72003: PUSH
72004: LD_INT 2
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: LIST
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: ST_TO_ADDR
// end ; 4 :
72019: GO 72300
72021: LD_INT 4
72023: DOUBLE
72024: EQUAL
72025: IFTRUE 72029
72027: GO 72162
72029: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72030: LD_ADDR_VAR 0 5
72034: PUSH
72035: LD_VAR 0 1
72039: PUSH
72040: LD_VAR 0 2
72044: PUSH
72045: LD_INT 4
72047: PLUS
72048: PUSH
72049: LD_INT 0
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: LIST
72056: PUSH
72057: LD_VAR 0 1
72061: PUSH
72062: LD_INT 3
72064: PLUS
72065: PUSH
72066: LD_VAR 0 2
72070: PUSH
72071: LD_INT 3
72073: PLUS
72074: PUSH
72075: LD_INT 5
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: LIST
72082: PUSH
72083: LD_VAR 0 1
72087: PUSH
72088: LD_INT 4
72090: PLUS
72091: PUSH
72092: LD_VAR 0 2
72096: PUSH
72097: LD_INT 4
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: LIST
72104: PUSH
72105: LD_VAR 0 1
72109: PUSH
72110: LD_VAR 0 2
72114: PUSH
72115: LD_INT 3
72117: MINUS
72118: PUSH
72119: LD_INT 3
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: LIST
72126: PUSH
72127: LD_VAR 0 1
72131: PUSH
72132: LD_INT 4
72134: MINUS
72135: PUSH
72136: LD_VAR 0 2
72140: PUSH
72141: LD_INT 4
72143: MINUS
72144: PUSH
72145: LD_INT 2
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: ST_TO_ADDR
// end ; 5 :
72160: GO 72300
72162: LD_INT 5
72164: DOUBLE
72165: EQUAL
72166: IFTRUE 72170
72168: GO 72299
72170: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72171: LD_ADDR_VAR 0 5
72175: PUSH
72176: LD_VAR 0 1
72180: PUSH
72181: LD_INT 4
72183: MINUS
72184: PUSH
72185: LD_VAR 0 2
72189: PUSH
72190: LD_INT 1
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: PUSH
72198: LD_VAR 0 1
72202: PUSH
72203: LD_VAR 0 2
72207: PUSH
72208: LD_INT 4
72210: MINUS
72211: PUSH
72212: LD_INT 3
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: LIST
72219: PUSH
72220: LD_VAR 0 1
72224: PUSH
72225: LD_INT 4
72227: PLUS
72228: PUSH
72229: LD_VAR 0 2
72233: PUSH
72234: LD_INT 4
72236: PLUS
72237: PUSH
72238: LD_INT 5
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: LIST
72245: PUSH
72246: LD_VAR 0 1
72250: PUSH
72251: LD_INT 3
72253: PLUS
72254: PUSH
72255: LD_VAR 0 2
72259: PUSH
72260: LD_INT 4
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: LIST
72267: PUSH
72268: LD_VAR 0 1
72272: PUSH
72273: LD_VAR 0 2
72277: PUSH
72278: LD_INT 3
72280: PLUS
72281: PUSH
72282: LD_INT 0
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: ST_TO_ADDR
// end ; end ;
72297: GO 72300
72299: POP
// result := list ;
72300: LD_ADDR_VAR 0 4
72304: PUSH
72305: LD_VAR 0 5
72309: ST_TO_ADDR
// end ;
72310: LD_VAR 0 4
72314: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72315: LD_INT 0
72317: PPUSH
72318: PPUSH
72319: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72320: LD_VAR 0 1
72324: NOT
72325: PUSH
72326: LD_VAR 0 2
72330: PUSH
72331: LD_INT 1
72333: PUSH
72334: LD_INT 2
72336: PUSH
72337: LD_INT 3
72339: PUSH
72340: LD_INT 4
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: IN
72349: NOT
72350: OR
72351: IFFALSE 72355
// exit ;
72353: GO 72438
// tmp := [ ] ;
72355: LD_ADDR_VAR 0 5
72359: PUSH
72360: EMPTY
72361: ST_TO_ADDR
// for i in units do
72362: LD_ADDR_VAR 0 4
72366: PUSH
72367: LD_VAR 0 1
72371: PUSH
72372: FOR_IN
72373: IFFALSE 72407
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72375: LD_ADDR_VAR 0 5
72379: PUSH
72380: LD_VAR 0 5
72384: PPUSH
72385: LD_VAR 0 4
72389: PPUSH
72390: LD_VAR 0 2
72394: PPUSH
72395: CALL_OW 259
72399: PPUSH
72400: CALL 73811 0 2
72404: ST_TO_ADDR
72405: GO 72372
72407: POP
72408: POP
// if not tmp then
72409: LD_VAR 0 5
72413: NOT
72414: IFFALSE 72418
// exit ;
72416: GO 72438
// result := SortListByListDesc ( units , tmp ) ;
72418: LD_ADDR_VAR 0 3
72422: PUSH
72423: LD_VAR 0 1
72427: PPUSH
72428: LD_VAR 0 5
72432: PPUSH
72433: CALL_OW 77
72437: ST_TO_ADDR
// end ;
72438: LD_VAR 0 3
72442: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72443: LD_INT 0
72445: PPUSH
72446: PPUSH
72447: PPUSH
// result := false ;
72448: LD_ADDR_VAR 0 3
72452: PUSH
72453: LD_INT 0
72455: ST_TO_ADDR
// if not building then
72456: LD_VAR 0 2
72460: NOT
72461: IFFALSE 72465
// exit ;
72463: GO 72603
// x := GetX ( building ) ;
72465: LD_ADDR_VAR 0 4
72469: PUSH
72470: LD_VAR 0 2
72474: PPUSH
72475: CALL_OW 250
72479: ST_TO_ADDR
// y := GetY ( building ) ;
72480: LD_ADDR_VAR 0 5
72484: PUSH
72485: LD_VAR 0 2
72489: PPUSH
72490: CALL_OW 251
72494: ST_TO_ADDR
// if not x or not y then
72495: LD_VAR 0 4
72499: NOT
72500: PUSH
72501: LD_VAR 0 5
72505: NOT
72506: OR
72507: IFFALSE 72511
// exit ;
72509: GO 72603
// if GetTaskList ( unit ) then
72511: LD_VAR 0 1
72515: PPUSH
72516: CALL_OW 437
72520: IFFALSE 72603
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72522: LD_STRING e
72524: PUSH
72525: LD_VAR 0 1
72529: PPUSH
72530: CALL_OW 437
72534: PUSH
72535: LD_INT 1
72537: ARRAY
72538: PUSH
72539: LD_INT 1
72541: ARRAY
72542: EQUAL
72543: PUSH
72544: LD_VAR 0 4
72548: PUSH
72549: LD_VAR 0 1
72553: PPUSH
72554: CALL_OW 437
72558: PUSH
72559: LD_INT 1
72561: ARRAY
72562: PUSH
72563: LD_INT 2
72565: ARRAY
72566: EQUAL
72567: AND
72568: PUSH
72569: LD_VAR 0 5
72573: PUSH
72574: LD_VAR 0 1
72578: PPUSH
72579: CALL_OW 437
72583: PUSH
72584: LD_INT 1
72586: ARRAY
72587: PUSH
72588: LD_INT 3
72590: ARRAY
72591: EQUAL
72592: AND
72593: IFFALSE 72603
// result := true end ;
72595: LD_ADDR_VAR 0 3
72599: PUSH
72600: LD_INT 1
72602: ST_TO_ADDR
// end ;
72603: LD_VAR 0 3
72607: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72608: LD_INT 0
72610: PPUSH
// result := false ;
72611: LD_ADDR_VAR 0 4
72615: PUSH
72616: LD_INT 0
72618: ST_TO_ADDR
// if GetTaskList ( unit ) then
72619: LD_VAR 0 1
72623: PPUSH
72624: CALL_OW 437
72628: IFFALSE 72711
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72630: LD_STRING M
72632: PUSH
72633: LD_VAR 0 1
72637: PPUSH
72638: CALL_OW 437
72642: PUSH
72643: LD_INT 1
72645: ARRAY
72646: PUSH
72647: LD_INT 1
72649: ARRAY
72650: EQUAL
72651: PUSH
72652: LD_VAR 0 2
72656: PUSH
72657: LD_VAR 0 1
72661: PPUSH
72662: CALL_OW 437
72666: PUSH
72667: LD_INT 1
72669: ARRAY
72670: PUSH
72671: LD_INT 2
72673: ARRAY
72674: EQUAL
72675: AND
72676: PUSH
72677: LD_VAR 0 3
72681: PUSH
72682: LD_VAR 0 1
72686: PPUSH
72687: CALL_OW 437
72691: PUSH
72692: LD_INT 1
72694: ARRAY
72695: PUSH
72696: LD_INT 3
72698: ARRAY
72699: EQUAL
72700: AND
72701: IFFALSE 72711
// result := true ;
72703: LD_ADDR_VAR 0 4
72707: PUSH
72708: LD_INT 1
72710: ST_TO_ADDR
// end ; end ;
72711: LD_VAR 0 4
72715: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72716: LD_INT 0
72718: PPUSH
72719: PPUSH
72720: PPUSH
72721: PPUSH
// if not unit or not area then
72722: LD_VAR 0 1
72726: NOT
72727: PUSH
72728: LD_VAR 0 2
72732: NOT
72733: OR
72734: IFFALSE 72738
// exit ;
72736: GO 72914
// tmp := AreaToList ( area , i ) ;
72738: LD_ADDR_VAR 0 6
72742: PUSH
72743: LD_VAR 0 2
72747: PPUSH
72748: LD_VAR 0 5
72752: PPUSH
72753: CALL_OW 517
72757: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72758: LD_ADDR_VAR 0 5
72762: PUSH
72763: DOUBLE
72764: LD_INT 1
72766: DEC
72767: ST_TO_ADDR
72768: LD_VAR 0 6
72772: PUSH
72773: LD_INT 1
72775: ARRAY
72776: PUSH
72777: FOR_TO
72778: IFFALSE 72912
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72780: LD_ADDR_VAR 0 7
72784: PUSH
72785: LD_VAR 0 6
72789: PUSH
72790: LD_INT 1
72792: ARRAY
72793: PUSH
72794: LD_VAR 0 5
72798: ARRAY
72799: PUSH
72800: LD_VAR 0 6
72804: PUSH
72805: LD_INT 2
72807: ARRAY
72808: PUSH
72809: LD_VAR 0 5
72813: ARRAY
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72819: LD_INT 92
72821: PUSH
72822: LD_VAR 0 7
72826: PUSH
72827: LD_INT 1
72829: ARRAY
72830: PUSH
72831: LD_VAR 0 7
72835: PUSH
72836: LD_INT 2
72838: ARRAY
72839: PUSH
72840: LD_INT 2
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: PPUSH
72849: CALL_OW 69
72853: PUSH
72854: LD_INT 0
72856: EQUAL
72857: IFFALSE 72910
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72859: LD_VAR 0 1
72863: PPUSH
72864: LD_VAR 0 7
72868: PUSH
72869: LD_INT 1
72871: ARRAY
72872: PPUSH
72873: LD_VAR 0 7
72877: PUSH
72878: LD_INT 2
72880: ARRAY
72881: PPUSH
72882: LD_VAR 0 3
72886: PPUSH
72887: CALL_OW 48
// result := IsPlaced ( unit ) ;
72891: LD_ADDR_VAR 0 4
72895: PUSH
72896: LD_VAR 0 1
72900: PPUSH
72901: CALL_OW 305
72905: ST_TO_ADDR
// exit ;
72906: POP
72907: POP
72908: GO 72914
// end ; end ;
72910: GO 72777
72912: POP
72913: POP
// end ;
72914: LD_VAR 0 4
72918: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72919: LD_INT 0
72921: PPUSH
72922: PPUSH
72923: PPUSH
// if not side or side > 8 then
72924: LD_VAR 0 1
72928: NOT
72929: PUSH
72930: LD_VAR 0 1
72934: PUSH
72935: LD_INT 8
72937: GREATER
72938: OR
72939: IFFALSE 72943
// exit ;
72941: GO 73130
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72943: LD_ADDR_VAR 0 4
72947: PUSH
72948: LD_INT 22
72950: PUSH
72951: LD_VAR 0 1
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 21
72962: PUSH
72963: LD_INT 3
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PPUSH
72974: CALL_OW 69
72978: ST_TO_ADDR
// if not tmp then
72979: LD_VAR 0 4
72983: NOT
72984: IFFALSE 72988
// exit ;
72986: GO 73130
// enable_addtolog := true ;
72988: LD_ADDR_OWVAR 81
72992: PUSH
72993: LD_INT 1
72995: ST_TO_ADDR
// AddToLog ( [ ) ;
72996: LD_STRING [
72998: PPUSH
72999: CALL_OW 561
// for i in tmp do
73003: LD_ADDR_VAR 0 3
73007: PUSH
73008: LD_VAR 0 4
73012: PUSH
73013: FOR_IN
73014: IFFALSE 73121
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73016: LD_STRING [
73018: PUSH
73019: LD_VAR 0 3
73023: PPUSH
73024: CALL_OW 266
73028: STR
73029: PUSH
73030: LD_STRING , 
73032: STR
73033: PUSH
73034: LD_VAR 0 3
73038: PPUSH
73039: CALL_OW 250
73043: STR
73044: PUSH
73045: LD_STRING , 
73047: STR
73048: PUSH
73049: LD_VAR 0 3
73053: PPUSH
73054: CALL_OW 251
73058: STR
73059: PUSH
73060: LD_STRING , 
73062: STR
73063: PUSH
73064: LD_VAR 0 3
73068: PPUSH
73069: CALL_OW 254
73073: STR
73074: PUSH
73075: LD_STRING , 
73077: STR
73078: PUSH
73079: LD_VAR 0 3
73083: PPUSH
73084: LD_INT 1
73086: PPUSH
73087: CALL_OW 268
73091: STR
73092: PUSH
73093: LD_STRING , 
73095: STR
73096: PUSH
73097: LD_VAR 0 3
73101: PPUSH
73102: LD_INT 2
73104: PPUSH
73105: CALL_OW 268
73109: STR
73110: PUSH
73111: LD_STRING ],
73113: STR
73114: PPUSH
73115: CALL_OW 561
// end ;
73119: GO 73013
73121: POP
73122: POP
// AddToLog ( ]; ) ;
73123: LD_STRING ];
73125: PPUSH
73126: CALL_OW 561
// end ;
73130: LD_VAR 0 2
73134: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73135: LD_INT 0
73137: PPUSH
73138: PPUSH
73139: PPUSH
73140: PPUSH
73141: PPUSH
// if not area or not rate or not max then
73142: LD_VAR 0 1
73146: NOT
73147: PUSH
73148: LD_VAR 0 2
73152: NOT
73153: OR
73154: PUSH
73155: LD_VAR 0 4
73159: NOT
73160: OR
73161: IFFALSE 73165
// exit ;
73163: GO 73354
// while 1 do
73165: LD_INT 1
73167: IFFALSE 73354
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73169: LD_ADDR_VAR 0 9
73173: PUSH
73174: LD_VAR 0 1
73178: PPUSH
73179: LD_INT 1
73181: PPUSH
73182: CALL_OW 287
73186: PUSH
73187: LD_INT 10
73189: MUL
73190: ST_TO_ADDR
// r := rate / 10 ;
73191: LD_ADDR_VAR 0 7
73195: PUSH
73196: LD_VAR 0 2
73200: PUSH
73201: LD_INT 10
73203: DIVREAL
73204: ST_TO_ADDR
// time := 1 1$00 ;
73205: LD_ADDR_VAR 0 8
73209: PUSH
73210: LD_INT 2100
73212: ST_TO_ADDR
// if amount < min then
73213: LD_VAR 0 9
73217: PUSH
73218: LD_VAR 0 3
73222: LESS
73223: IFFALSE 73241
// r := r * 2 else
73225: LD_ADDR_VAR 0 7
73229: PUSH
73230: LD_VAR 0 7
73234: PUSH
73235: LD_INT 2
73237: MUL
73238: ST_TO_ADDR
73239: GO 73267
// if amount > max then
73241: LD_VAR 0 9
73245: PUSH
73246: LD_VAR 0 4
73250: GREATER
73251: IFFALSE 73267
// r := r / 2 ;
73253: LD_ADDR_VAR 0 7
73257: PUSH
73258: LD_VAR 0 7
73262: PUSH
73263: LD_INT 2
73265: DIVREAL
73266: ST_TO_ADDR
// time := time / r ;
73267: LD_ADDR_VAR 0 8
73271: PUSH
73272: LD_VAR 0 8
73276: PUSH
73277: LD_VAR 0 7
73281: DIVREAL
73282: ST_TO_ADDR
// if time < 0 then
73283: LD_VAR 0 8
73287: PUSH
73288: LD_INT 0
73290: LESS
73291: IFFALSE 73308
// time := time * - 1 ;
73293: LD_ADDR_VAR 0 8
73297: PUSH
73298: LD_VAR 0 8
73302: PUSH
73303: LD_INT 1
73305: NEG
73306: MUL
73307: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73308: LD_VAR 0 8
73312: PUSH
73313: LD_INT 35
73315: PPUSH
73316: LD_INT 875
73318: PPUSH
73319: CALL_OW 12
73323: PLUS
73324: PPUSH
73325: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73329: LD_INT 1
73331: PPUSH
73332: LD_INT 5
73334: PPUSH
73335: CALL_OW 12
73339: PPUSH
73340: LD_VAR 0 1
73344: PPUSH
73345: LD_INT 1
73347: PPUSH
73348: CALL_OW 55
// end ;
73352: GO 73165
// end ;
73354: LD_VAR 0 5
73358: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73359: LD_INT 0
73361: PPUSH
73362: PPUSH
73363: PPUSH
73364: PPUSH
73365: PPUSH
73366: PPUSH
73367: PPUSH
73368: PPUSH
// if not turrets or not factories then
73369: LD_VAR 0 1
73373: NOT
73374: PUSH
73375: LD_VAR 0 2
73379: NOT
73380: OR
73381: IFFALSE 73385
// exit ;
73383: GO 73692
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73385: LD_ADDR_VAR 0 10
73389: PUSH
73390: LD_INT 5
73392: PUSH
73393: LD_INT 6
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 2
73402: PUSH
73403: LD_INT 4
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 3
73412: PUSH
73413: LD_INT 5
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: LIST
73424: PUSH
73425: LD_INT 24
73427: PUSH
73428: LD_INT 25
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 23
73437: PUSH
73438: LD_INT 27
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 42
73451: PUSH
73452: LD_INT 43
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 44
73461: PUSH
73462: LD_INT 46
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 45
73471: PUSH
73472: LD_INT 47
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: LIST
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: LIST
73488: ST_TO_ADDR
// result := [ ] ;
73489: LD_ADDR_VAR 0 3
73493: PUSH
73494: EMPTY
73495: ST_TO_ADDR
// for i in turrets do
73496: LD_ADDR_VAR 0 4
73500: PUSH
73501: LD_VAR 0 1
73505: PUSH
73506: FOR_IN
73507: IFFALSE 73690
// begin nat := GetNation ( i ) ;
73509: LD_ADDR_VAR 0 7
73513: PUSH
73514: LD_VAR 0 4
73518: PPUSH
73519: CALL_OW 248
73523: ST_TO_ADDR
// weapon := 0 ;
73524: LD_ADDR_VAR 0 8
73528: PUSH
73529: LD_INT 0
73531: ST_TO_ADDR
// if not nat then
73532: LD_VAR 0 7
73536: NOT
73537: IFFALSE 73541
// continue ;
73539: GO 73506
// for j in list [ nat ] do
73541: LD_ADDR_VAR 0 5
73545: PUSH
73546: LD_VAR 0 10
73550: PUSH
73551: LD_VAR 0 7
73555: ARRAY
73556: PUSH
73557: FOR_IN
73558: IFFALSE 73599
// if GetBWeapon ( i ) = j [ 1 ] then
73560: LD_VAR 0 4
73564: PPUSH
73565: CALL_OW 269
73569: PUSH
73570: LD_VAR 0 5
73574: PUSH
73575: LD_INT 1
73577: ARRAY
73578: EQUAL
73579: IFFALSE 73597
// begin weapon := j [ 2 ] ;
73581: LD_ADDR_VAR 0 8
73585: PUSH
73586: LD_VAR 0 5
73590: PUSH
73591: LD_INT 2
73593: ARRAY
73594: ST_TO_ADDR
// break ;
73595: GO 73599
// end ;
73597: GO 73557
73599: POP
73600: POP
// if not weapon then
73601: LD_VAR 0 8
73605: NOT
73606: IFFALSE 73610
// continue ;
73608: GO 73506
// for k in factories do
73610: LD_ADDR_VAR 0 6
73614: PUSH
73615: LD_VAR 0 2
73619: PUSH
73620: FOR_IN
73621: IFFALSE 73686
// begin weapons := AvailableWeaponList ( k ) ;
73623: LD_ADDR_VAR 0 9
73627: PUSH
73628: LD_VAR 0 6
73632: PPUSH
73633: CALL_OW 478
73637: ST_TO_ADDR
// if not weapons then
73638: LD_VAR 0 9
73642: NOT
73643: IFFALSE 73647
// continue ;
73645: GO 73620
// if weapon in weapons then
73647: LD_VAR 0 8
73651: PUSH
73652: LD_VAR 0 9
73656: IN
73657: IFFALSE 73684
// begin result := [ i , weapon ] ;
73659: LD_ADDR_VAR 0 3
73663: PUSH
73664: LD_VAR 0 4
73668: PUSH
73669: LD_VAR 0 8
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: ST_TO_ADDR
// exit ;
73678: POP
73679: POP
73680: POP
73681: POP
73682: GO 73692
// end ; end ;
73684: GO 73620
73686: POP
73687: POP
// end ;
73688: GO 73506
73690: POP
73691: POP
// end ;
73692: LD_VAR 0 3
73696: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73697: LD_INT 0
73699: PPUSH
// if not side or side > 8 then
73700: LD_VAR 0 3
73704: NOT
73705: PUSH
73706: LD_VAR 0 3
73710: PUSH
73711: LD_INT 8
73713: GREATER
73714: OR
73715: IFFALSE 73719
// exit ;
73717: GO 73778
// if not range then
73719: LD_VAR 0 4
73723: NOT
73724: IFFALSE 73735
// range := - 12 ;
73726: LD_ADDR_VAR 0 4
73730: PUSH
73731: LD_INT 12
73733: NEG
73734: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73735: LD_VAR 0 1
73739: PPUSH
73740: LD_VAR 0 2
73744: PPUSH
73745: LD_VAR 0 3
73749: PPUSH
73750: LD_VAR 0 4
73754: PPUSH
73755: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73759: LD_VAR 0 1
73763: PPUSH
73764: LD_VAR 0 2
73768: PPUSH
73769: LD_VAR 0 3
73773: PPUSH
73774: CALL_OW 331
// end ;
73778: LD_VAR 0 5
73782: RET
// export function Video ( mode ) ; begin
73783: LD_INT 0
73785: PPUSH
// ingame_video = mode ;
73786: LD_ADDR_OWVAR 52
73790: PUSH
73791: LD_VAR 0 1
73795: ST_TO_ADDR
// interface_hidden = mode ;
73796: LD_ADDR_OWVAR 54
73800: PUSH
73801: LD_VAR 0 1
73805: ST_TO_ADDR
// end ;
73806: LD_VAR 0 2
73810: RET
// export function Join ( array , element ) ; begin
73811: LD_INT 0
73813: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73814: LD_ADDR_VAR 0 3
73818: PUSH
73819: LD_VAR 0 1
73823: PPUSH
73824: LD_VAR 0 1
73828: PUSH
73829: LD_INT 1
73831: PLUS
73832: PPUSH
73833: LD_VAR 0 2
73837: PPUSH
73838: CALL_OW 1
73842: ST_TO_ADDR
// end ;
73843: LD_VAR 0 3
73847: RET
// export function JoinUnion ( array , element ) ; begin
73848: LD_INT 0
73850: PPUSH
// result := array union element ;
73851: LD_ADDR_VAR 0 3
73855: PUSH
73856: LD_VAR 0 1
73860: PUSH
73861: LD_VAR 0 2
73865: UNION
73866: ST_TO_ADDR
// end ;
73867: LD_VAR 0 3
73871: RET
// export function GetBehemoths ( side ) ; begin
73872: LD_INT 0
73874: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73875: LD_ADDR_VAR 0 2
73879: PUSH
73880: LD_INT 22
73882: PUSH
73883: LD_VAR 0 1
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 31
73894: PUSH
73895: LD_INT 25
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PPUSH
73906: CALL_OW 69
73910: ST_TO_ADDR
// end ;
73911: LD_VAR 0 2
73915: RET
// export function Shuffle ( array ) ; var i , index ; begin
73916: LD_INT 0
73918: PPUSH
73919: PPUSH
73920: PPUSH
// result := [ ] ;
73921: LD_ADDR_VAR 0 2
73925: PUSH
73926: EMPTY
73927: ST_TO_ADDR
// if not array then
73928: LD_VAR 0 1
73932: NOT
73933: IFFALSE 73937
// exit ;
73935: GO 74036
// Randomize ;
73937: CALL_OW 10
// for i = array downto 1 do
73941: LD_ADDR_VAR 0 3
73945: PUSH
73946: DOUBLE
73947: LD_VAR 0 1
73951: INC
73952: ST_TO_ADDR
73953: LD_INT 1
73955: PUSH
73956: FOR_DOWNTO
73957: IFFALSE 74034
// begin index := rand ( 1 , array ) ;
73959: LD_ADDR_VAR 0 4
73963: PUSH
73964: LD_INT 1
73966: PPUSH
73967: LD_VAR 0 1
73971: PPUSH
73972: CALL_OW 12
73976: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73977: LD_ADDR_VAR 0 2
73981: PUSH
73982: LD_VAR 0 2
73986: PPUSH
73987: LD_VAR 0 2
73991: PUSH
73992: LD_INT 1
73994: PLUS
73995: PPUSH
73996: LD_VAR 0 1
74000: PUSH
74001: LD_VAR 0 4
74005: ARRAY
74006: PPUSH
74007: CALL_OW 2
74011: ST_TO_ADDR
// array := Delete ( array , index ) ;
74012: LD_ADDR_VAR 0 1
74016: PUSH
74017: LD_VAR 0 1
74021: PPUSH
74022: LD_VAR 0 4
74026: PPUSH
74027: CALL_OW 3
74031: ST_TO_ADDR
// end ;
74032: GO 73956
74034: POP
74035: POP
// end ;
74036: LD_VAR 0 2
74040: RET
// export function GetBaseMaterials ( base ) ; begin
74041: LD_INT 0
74043: PPUSH
// result := [ 0 , 0 , 0 ] ;
74044: LD_ADDR_VAR 0 2
74048: PUSH
74049: LD_INT 0
74051: PUSH
74052: LD_INT 0
74054: PUSH
74055: LD_INT 0
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: LIST
74062: ST_TO_ADDR
// if not base then
74063: LD_VAR 0 1
74067: NOT
74068: IFFALSE 74072
// exit ;
74070: GO 74121
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74072: LD_ADDR_VAR 0 2
74076: PUSH
74077: LD_VAR 0 1
74081: PPUSH
74082: LD_INT 1
74084: PPUSH
74085: CALL_OW 275
74089: PUSH
74090: LD_VAR 0 1
74094: PPUSH
74095: LD_INT 2
74097: PPUSH
74098: CALL_OW 275
74102: PUSH
74103: LD_VAR 0 1
74107: PPUSH
74108: LD_INT 3
74110: PPUSH
74111: CALL_OW 275
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: LIST
74120: ST_TO_ADDR
// end ;
74121: LD_VAR 0 2
74125: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74126: LD_INT 0
74128: PPUSH
74129: PPUSH
// result := array ;
74130: LD_ADDR_VAR 0 3
74134: PUSH
74135: LD_VAR 0 1
74139: ST_TO_ADDR
// if size >= result then
74140: LD_VAR 0 2
74144: PUSH
74145: LD_VAR 0 3
74149: GREATEREQUAL
74150: IFFALSE 74154
// exit ;
74152: GO 74204
// if size then
74154: LD_VAR 0 2
74158: IFFALSE 74204
// for i := array downto size do
74160: LD_ADDR_VAR 0 4
74164: PUSH
74165: DOUBLE
74166: LD_VAR 0 1
74170: INC
74171: ST_TO_ADDR
74172: LD_VAR 0 2
74176: PUSH
74177: FOR_DOWNTO
74178: IFFALSE 74202
// result := Delete ( result , result ) ;
74180: LD_ADDR_VAR 0 3
74184: PUSH
74185: LD_VAR 0 3
74189: PPUSH
74190: LD_VAR 0 3
74194: PPUSH
74195: CALL_OW 3
74199: ST_TO_ADDR
74200: GO 74177
74202: POP
74203: POP
// end ;
74204: LD_VAR 0 3
74208: RET
// export function ComExit ( unit ) ; var tmp ; begin
74209: LD_INT 0
74211: PPUSH
74212: PPUSH
// if not IsInUnit ( unit ) then
74213: LD_VAR 0 1
74217: PPUSH
74218: CALL_OW 310
74222: NOT
74223: IFFALSE 74227
// exit ;
74225: GO 74287
// tmp := IsInUnit ( unit ) ;
74227: LD_ADDR_VAR 0 3
74231: PUSH
74232: LD_VAR 0 1
74236: PPUSH
74237: CALL_OW 310
74241: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74242: LD_VAR 0 3
74246: PPUSH
74247: CALL_OW 247
74251: PUSH
74252: LD_INT 2
74254: EQUAL
74255: IFFALSE 74268
// ComExitVehicle ( unit ) else
74257: LD_VAR 0 1
74261: PPUSH
74262: CALL_OW 121
74266: GO 74277
// ComExitBuilding ( unit ) ;
74268: LD_VAR 0 1
74272: PPUSH
74273: CALL_OW 122
// result := tmp ;
74277: LD_ADDR_VAR 0 2
74281: PUSH
74282: LD_VAR 0 3
74286: ST_TO_ADDR
// end ;
74287: LD_VAR 0 2
74291: RET
// export function ComExitAll ( units ) ; var i ; begin
74292: LD_INT 0
74294: PPUSH
74295: PPUSH
// if not units then
74296: LD_VAR 0 1
74300: NOT
74301: IFFALSE 74305
// exit ;
74303: GO 74331
// for i in units do
74305: LD_ADDR_VAR 0 3
74309: PUSH
74310: LD_VAR 0 1
74314: PUSH
74315: FOR_IN
74316: IFFALSE 74329
// ComExit ( i ) ;
74318: LD_VAR 0 3
74322: PPUSH
74323: CALL 74209 0 1
74327: GO 74315
74329: POP
74330: POP
// end ;
74331: LD_VAR 0 2
74335: RET
// export function ResetHc ; begin
74336: LD_INT 0
74338: PPUSH
// InitHc ;
74339: CALL_OW 19
// hc_importance := 0 ;
74343: LD_ADDR_OWVAR 32
74347: PUSH
74348: LD_INT 0
74350: ST_TO_ADDR
// end ;
74351: LD_VAR 0 1
74355: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74356: LD_INT 0
74358: PPUSH
74359: PPUSH
74360: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74361: LD_ADDR_VAR 0 6
74365: PUSH
74366: LD_VAR 0 1
74370: PUSH
74371: LD_VAR 0 3
74375: PLUS
74376: PUSH
74377: LD_INT 2
74379: DIV
74380: ST_TO_ADDR
// if _x < 0 then
74381: LD_VAR 0 6
74385: PUSH
74386: LD_INT 0
74388: LESS
74389: IFFALSE 74406
// _x := _x * - 1 ;
74391: LD_ADDR_VAR 0 6
74395: PUSH
74396: LD_VAR 0 6
74400: PUSH
74401: LD_INT 1
74403: NEG
74404: MUL
74405: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74406: LD_ADDR_VAR 0 7
74410: PUSH
74411: LD_VAR 0 2
74415: PUSH
74416: LD_VAR 0 4
74420: PLUS
74421: PUSH
74422: LD_INT 2
74424: DIV
74425: ST_TO_ADDR
// if _y < 0 then
74426: LD_VAR 0 7
74430: PUSH
74431: LD_INT 0
74433: LESS
74434: IFFALSE 74451
// _y := _y * - 1 ;
74436: LD_ADDR_VAR 0 7
74440: PUSH
74441: LD_VAR 0 7
74445: PUSH
74446: LD_INT 1
74448: NEG
74449: MUL
74450: ST_TO_ADDR
// result := [ _x , _y ] ;
74451: LD_ADDR_VAR 0 5
74455: PUSH
74456: LD_VAR 0 6
74460: PUSH
74461: LD_VAR 0 7
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: ST_TO_ADDR
// end ;
74470: LD_VAR 0 5
74474: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74475: LD_INT 0
74477: PPUSH
74478: PPUSH
74479: PPUSH
74480: PPUSH
// task := GetTaskList ( unit ) ;
74481: LD_ADDR_VAR 0 7
74485: PUSH
74486: LD_VAR 0 1
74490: PPUSH
74491: CALL_OW 437
74495: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74496: LD_VAR 0 7
74500: NOT
74501: PUSH
74502: LD_VAR 0 1
74506: PPUSH
74507: LD_VAR 0 2
74511: PPUSH
74512: CALL_OW 308
74516: NOT
74517: AND
74518: IFFALSE 74522
// exit ;
74520: GO 74640
// if IsInArea ( unit , area ) then
74522: LD_VAR 0 1
74526: PPUSH
74527: LD_VAR 0 2
74531: PPUSH
74532: CALL_OW 308
74536: IFFALSE 74554
// begin ComMoveToArea ( unit , goAway ) ;
74538: LD_VAR 0 1
74542: PPUSH
74543: LD_VAR 0 3
74547: PPUSH
74548: CALL_OW 113
// exit ;
74552: GO 74640
// end ; if task [ 1 ] [ 1 ] <> M then
74554: LD_VAR 0 7
74558: PUSH
74559: LD_INT 1
74561: ARRAY
74562: PUSH
74563: LD_INT 1
74565: ARRAY
74566: PUSH
74567: LD_STRING M
74569: NONEQUAL
74570: IFFALSE 74574
// exit ;
74572: GO 74640
// x := task [ 1 ] [ 2 ] ;
74574: LD_ADDR_VAR 0 5
74578: PUSH
74579: LD_VAR 0 7
74583: PUSH
74584: LD_INT 1
74586: ARRAY
74587: PUSH
74588: LD_INT 2
74590: ARRAY
74591: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74592: LD_ADDR_VAR 0 6
74596: PUSH
74597: LD_VAR 0 7
74601: PUSH
74602: LD_INT 1
74604: ARRAY
74605: PUSH
74606: LD_INT 3
74608: ARRAY
74609: ST_TO_ADDR
// if InArea ( x , y , area ) then
74610: LD_VAR 0 5
74614: PPUSH
74615: LD_VAR 0 6
74619: PPUSH
74620: LD_VAR 0 2
74624: PPUSH
74625: CALL_OW 309
74629: IFFALSE 74640
// ComStop ( unit ) ;
74631: LD_VAR 0 1
74635: PPUSH
74636: CALL_OW 141
// end ;
74640: LD_VAR 0 4
74644: RET
// export function Abs ( value ) ; begin
74645: LD_INT 0
74647: PPUSH
// result := value ;
74648: LD_ADDR_VAR 0 2
74652: PUSH
74653: LD_VAR 0 1
74657: ST_TO_ADDR
// if value < 0 then
74658: LD_VAR 0 1
74662: PUSH
74663: LD_INT 0
74665: LESS
74666: IFFALSE 74683
// result := value * - 1 ;
74668: LD_ADDR_VAR 0 2
74672: PUSH
74673: LD_VAR 0 1
74677: PUSH
74678: LD_INT 1
74680: NEG
74681: MUL
74682: ST_TO_ADDR
// end ;
74683: LD_VAR 0 2
74687: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74688: LD_INT 0
74690: PPUSH
74691: PPUSH
74692: PPUSH
74693: PPUSH
74694: PPUSH
74695: PPUSH
74696: PPUSH
74697: PPUSH
// if not unit or not building then
74698: LD_VAR 0 1
74702: NOT
74703: PUSH
74704: LD_VAR 0 2
74708: NOT
74709: OR
74710: IFFALSE 74714
// exit ;
74712: GO 74940
// x := GetX ( building ) ;
74714: LD_ADDR_VAR 0 4
74718: PUSH
74719: LD_VAR 0 2
74723: PPUSH
74724: CALL_OW 250
74728: ST_TO_ADDR
// y := GetY ( building ) ;
74729: LD_ADDR_VAR 0 6
74733: PUSH
74734: LD_VAR 0 2
74738: PPUSH
74739: CALL_OW 251
74743: ST_TO_ADDR
// d := GetDir ( building ) ;
74744: LD_ADDR_VAR 0 8
74748: PUSH
74749: LD_VAR 0 2
74753: PPUSH
74754: CALL_OW 254
74758: ST_TO_ADDR
// r := 4 ;
74759: LD_ADDR_VAR 0 9
74763: PUSH
74764: LD_INT 4
74766: ST_TO_ADDR
// for i := 1 to 5 do
74767: LD_ADDR_VAR 0 10
74771: PUSH
74772: DOUBLE
74773: LD_INT 1
74775: DEC
74776: ST_TO_ADDR
74777: LD_INT 5
74779: PUSH
74780: FOR_TO
74781: IFFALSE 74938
// begin _x := ShiftX ( x , d , r + i ) ;
74783: LD_ADDR_VAR 0 5
74787: PUSH
74788: LD_VAR 0 4
74792: PPUSH
74793: LD_VAR 0 8
74797: PPUSH
74798: LD_VAR 0 9
74802: PUSH
74803: LD_VAR 0 10
74807: PLUS
74808: PPUSH
74809: CALL_OW 272
74813: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74814: LD_ADDR_VAR 0 7
74818: PUSH
74819: LD_VAR 0 6
74823: PPUSH
74824: LD_VAR 0 8
74828: PPUSH
74829: LD_VAR 0 9
74833: PUSH
74834: LD_VAR 0 10
74838: PLUS
74839: PPUSH
74840: CALL_OW 273
74844: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74845: LD_VAR 0 5
74849: PPUSH
74850: LD_VAR 0 7
74854: PPUSH
74855: CALL_OW 488
74859: PUSH
74860: LD_VAR 0 5
74864: PPUSH
74865: LD_VAR 0 7
74869: PPUSH
74870: CALL_OW 428
74874: PPUSH
74875: CALL_OW 247
74879: PUSH
74880: LD_INT 3
74882: PUSH
74883: LD_INT 2
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: IN
74890: NOT
74891: AND
74892: IFFALSE 74936
// begin ComMoveXY ( unit , _x , _y ) ;
74894: LD_VAR 0 1
74898: PPUSH
74899: LD_VAR 0 5
74903: PPUSH
74904: LD_VAR 0 7
74908: PPUSH
74909: CALL_OW 111
// result := [ _x , _y ] ;
74913: LD_ADDR_VAR 0 3
74917: PUSH
74918: LD_VAR 0 5
74922: PUSH
74923: LD_VAR 0 7
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: ST_TO_ADDR
// exit ;
74932: POP
74933: POP
74934: GO 74940
// end ; end ;
74936: GO 74780
74938: POP
74939: POP
// end ;
74940: LD_VAR 0 3
74944: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74945: LD_INT 0
74947: PPUSH
74948: PPUSH
74949: PPUSH
// result := 0 ;
74950: LD_ADDR_VAR 0 3
74954: PUSH
74955: LD_INT 0
74957: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74958: LD_VAR 0 1
74962: PUSH
74963: LD_INT 0
74965: LESS
74966: PUSH
74967: LD_VAR 0 1
74971: PUSH
74972: LD_INT 8
74974: GREATER
74975: OR
74976: PUSH
74977: LD_VAR 0 2
74981: PUSH
74982: LD_INT 0
74984: LESS
74985: OR
74986: PUSH
74987: LD_VAR 0 2
74991: PUSH
74992: LD_INT 8
74994: GREATER
74995: OR
74996: IFFALSE 75000
// exit ;
74998: GO 75075
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75000: LD_ADDR_VAR 0 4
75004: PUSH
75005: LD_INT 22
75007: PUSH
75008: LD_VAR 0 2
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PPUSH
75017: CALL_OW 69
75021: PUSH
75022: FOR_IN
75023: IFFALSE 75073
// begin un := UnitShoot ( i ) ;
75025: LD_ADDR_VAR 0 5
75029: PUSH
75030: LD_VAR 0 4
75034: PPUSH
75035: CALL_OW 504
75039: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75040: LD_VAR 0 5
75044: PPUSH
75045: CALL_OW 255
75049: PUSH
75050: LD_VAR 0 1
75054: EQUAL
75055: IFFALSE 75071
// begin result := un ;
75057: LD_ADDR_VAR 0 3
75061: PUSH
75062: LD_VAR 0 5
75066: ST_TO_ADDR
// exit ;
75067: POP
75068: POP
75069: GO 75075
// end ; end ;
75071: GO 75022
75073: POP
75074: POP
// end ;
75075: LD_VAR 0 3
75079: RET
// export function GetCargoBay ( units ) ; begin
75080: LD_INT 0
75082: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75083: LD_ADDR_VAR 0 2
75087: PUSH
75088: LD_VAR 0 1
75092: PPUSH
75093: LD_INT 2
75095: PUSH
75096: LD_INT 34
75098: PUSH
75099: LD_INT 12
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PUSH
75106: LD_INT 34
75108: PUSH
75109: LD_INT 51
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: PUSH
75116: LD_INT 34
75118: PUSH
75119: LD_INT 32
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PUSH
75126: LD_INT 34
75128: PUSH
75129: LD_INT 89
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: PPUSH
75143: CALL_OW 72
75147: ST_TO_ADDR
// end ;
75148: LD_VAR 0 2
75152: RET
// export function Negate ( value ) ; begin
75153: LD_INT 0
75155: PPUSH
// result := not value ;
75156: LD_ADDR_VAR 0 2
75160: PUSH
75161: LD_VAR 0 1
75165: NOT
75166: ST_TO_ADDR
// end ;
75167: LD_VAR 0 2
75171: RET
// export function Inc ( value ) ; begin
75172: LD_INT 0
75174: PPUSH
// result := value + 1 ;
75175: LD_ADDR_VAR 0 2
75179: PUSH
75180: LD_VAR 0 1
75184: PUSH
75185: LD_INT 1
75187: PLUS
75188: ST_TO_ADDR
// end ;
75189: LD_VAR 0 2
75193: RET
// export function Dec ( value ) ; begin
75194: LD_INT 0
75196: PPUSH
// result := value - 1 ;
75197: LD_ADDR_VAR 0 2
75201: PUSH
75202: LD_VAR 0 1
75206: PUSH
75207: LD_INT 1
75209: MINUS
75210: ST_TO_ADDR
// end ;
75211: LD_VAR 0 2
75215: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75216: LD_INT 0
75218: PPUSH
75219: PPUSH
75220: PPUSH
75221: PPUSH
75222: PPUSH
75223: PPUSH
75224: PPUSH
75225: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75226: LD_VAR 0 1
75230: PPUSH
75231: LD_VAR 0 2
75235: PPUSH
75236: CALL_OW 488
75240: NOT
75241: PUSH
75242: LD_VAR 0 3
75246: PPUSH
75247: LD_VAR 0 4
75251: PPUSH
75252: CALL_OW 488
75256: NOT
75257: OR
75258: IFFALSE 75271
// begin result := - 1 ;
75260: LD_ADDR_VAR 0 5
75264: PUSH
75265: LD_INT 1
75267: NEG
75268: ST_TO_ADDR
// exit ;
75269: GO 75506
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75271: LD_ADDR_VAR 0 12
75275: PUSH
75276: LD_VAR 0 1
75280: PPUSH
75281: LD_VAR 0 2
75285: PPUSH
75286: LD_VAR 0 3
75290: PPUSH
75291: LD_VAR 0 4
75295: PPUSH
75296: CALL 74356 0 4
75300: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75301: LD_ADDR_VAR 0 11
75305: PUSH
75306: LD_VAR 0 1
75310: PPUSH
75311: LD_VAR 0 2
75315: PPUSH
75316: LD_VAR 0 12
75320: PUSH
75321: LD_INT 1
75323: ARRAY
75324: PPUSH
75325: LD_VAR 0 12
75329: PUSH
75330: LD_INT 2
75332: ARRAY
75333: PPUSH
75334: CALL_OW 298
75338: ST_TO_ADDR
// distance := 9999 ;
75339: LD_ADDR_VAR 0 10
75343: PUSH
75344: LD_INT 9999
75346: ST_TO_ADDR
// for i := 0 to 5 do
75347: LD_ADDR_VAR 0 6
75351: PUSH
75352: DOUBLE
75353: LD_INT 0
75355: DEC
75356: ST_TO_ADDR
75357: LD_INT 5
75359: PUSH
75360: FOR_TO
75361: IFFALSE 75504
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75363: LD_ADDR_VAR 0 7
75367: PUSH
75368: LD_VAR 0 1
75372: PPUSH
75373: LD_VAR 0 6
75377: PPUSH
75378: LD_VAR 0 11
75382: PPUSH
75383: CALL_OW 272
75387: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75388: LD_ADDR_VAR 0 8
75392: PUSH
75393: LD_VAR 0 2
75397: PPUSH
75398: LD_VAR 0 6
75402: PPUSH
75403: LD_VAR 0 11
75407: PPUSH
75408: CALL_OW 273
75412: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75413: LD_VAR 0 7
75417: PPUSH
75418: LD_VAR 0 8
75422: PPUSH
75423: CALL_OW 488
75427: NOT
75428: IFFALSE 75432
// continue ;
75430: GO 75360
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75432: LD_ADDR_VAR 0 9
75436: PUSH
75437: LD_VAR 0 12
75441: PUSH
75442: LD_INT 1
75444: ARRAY
75445: PPUSH
75446: LD_VAR 0 12
75450: PUSH
75451: LD_INT 2
75453: ARRAY
75454: PPUSH
75455: LD_VAR 0 7
75459: PPUSH
75460: LD_VAR 0 8
75464: PPUSH
75465: CALL_OW 298
75469: ST_TO_ADDR
// if tmp < distance then
75470: LD_VAR 0 9
75474: PUSH
75475: LD_VAR 0 10
75479: LESS
75480: IFFALSE 75502
// begin result := i ;
75482: LD_ADDR_VAR 0 5
75486: PUSH
75487: LD_VAR 0 6
75491: ST_TO_ADDR
// distance := tmp ;
75492: LD_ADDR_VAR 0 10
75496: PUSH
75497: LD_VAR 0 9
75501: ST_TO_ADDR
// end ; end ;
75502: GO 75360
75504: POP
75505: POP
// end ;
75506: LD_VAR 0 5
75510: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75511: LD_INT 0
75513: PPUSH
75514: PPUSH
// if not driver or not IsInUnit ( driver ) then
75515: LD_VAR 0 1
75519: NOT
75520: PUSH
75521: LD_VAR 0 1
75525: PPUSH
75526: CALL_OW 310
75530: NOT
75531: OR
75532: IFFALSE 75536
// exit ;
75534: GO 75626
// vehicle := IsInUnit ( driver ) ;
75536: LD_ADDR_VAR 0 3
75540: PUSH
75541: LD_VAR 0 1
75545: PPUSH
75546: CALL_OW 310
75550: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75551: LD_VAR 0 1
75555: PPUSH
75556: LD_STRING \
75558: PUSH
75559: LD_INT 0
75561: PUSH
75562: LD_INT 0
75564: PUSH
75565: LD_INT 0
75567: PUSH
75568: LD_INT 0
75570: PUSH
75571: LD_INT 0
75573: PUSH
75574: LD_INT 0
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: PUSH
75586: LD_STRING E
75588: PUSH
75589: LD_INT 0
75591: PUSH
75592: LD_INT 0
75594: PUSH
75595: LD_VAR 0 3
75599: PUSH
75600: LD_INT 0
75602: PUSH
75603: LD_INT 0
75605: PUSH
75606: LD_INT 0
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PPUSH
75622: CALL_OW 446
// end ;
75626: LD_VAR 0 2
75630: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75631: LD_INT 0
75633: PPUSH
75634: PPUSH
// if not driver or not IsInUnit ( driver ) then
75635: LD_VAR 0 1
75639: NOT
75640: PUSH
75641: LD_VAR 0 1
75645: PPUSH
75646: CALL_OW 310
75650: NOT
75651: OR
75652: IFFALSE 75656
// exit ;
75654: GO 75746
// vehicle := IsInUnit ( driver ) ;
75656: LD_ADDR_VAR 0 3
75660: PUSH
75661: LD_VAR 0 1
75665: PPUSH
75666: CALL_OW 310
75670: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75671: LD_VAR 0 1
75675: PPUSH
75676: LD_STRING \
75678: PUSH
75679: LD_INT 0
75681: PUSH
75682: LD_INT 0
75684: PUSH
75685: LD_INT 0
75687: PUSH
75688: LD_INT 0
75690: PUSH
75691: LD_INT 0
75693: PUSH
75694: LD_INT 0
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: PUSH
75706: LD_STRING E
75708: PUSH
75709: LD_INT 0
75711: PUSH
75712: LD_INT 0
75714: PUSH
75715: LD_VAR 0 3
75719: PUSH
75720: LD_INT 0
75722: PUSH
75723: LD_INT 0
75725: PUSH
75726: LD_INT 0
75728: PUSH
75729: EMPTY
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PPUSH
75742: CALL_OW 447
// end ;
75746: LD_VAR 0 2
75750: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75751: LD_INT 0
75753: PPUSH
75754: PPUSH
75755: PPUSH
// tmp := [ ] ;
75756: LD_ADDR_VAR 0 5
75760: PUSH
75761: EMPTY
75762: ST_TO_ADDR
// for i in units do
75763: LD_ADDR_VAR 0 4
75767: PUSH
75768: LD_VAR 0 1
75772: PUSH
75773: FOR_IN
75774: IFFALSE 75812
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75776: LD_ADDR_VAR 0 5
75780: PUSH
75781: LD_VAR 0 5
75785: PPUSH
75786: LD_VAR 0 5
75790: PUSH
75791: LD_INT 1
75793: PLUS
75794: PPUSH
75795: LD_VAR 0 4
75799: PPUSH
75800: CALL_OW 256
75804: PPUSH
75805: CALL_OW 2
75809: ST_TO_ADDR
75810: GO 75773
75812: POP
75813: POP
// if not tmp then
75814: LD_VAR 0 5
75818: NOT
75819: IFFALSE 75823
// exit ;
75821: GO 75871
// if asc then
75823: LD_VAR 0 2
75827: IFFALSE 75851
// result := SortListByListAsc ( units , tmp ) else
75829: LD_ADDR_VAR 0 3
75833: PUSH
75834: LD_VAR 0 1
75838: PPUSH
75839: LD_VAR 0 5
75843: PPUSH
75844: CALL_OW 76
75848: ST_TO_ADDR
75849: GO 75871
// result := SortListByListDesc ( units , tmp ) ;
75851: LD_ADDR_VAR 0 3
75855: PUSH
75856: LD_VAR 0 1
75860: PPUSH
75861: LD_VAR 0 5
75865: PPUSH
75866: CALL_OW 77
75870: ST_TO_ADDR
// end ;
75871: LD_VAR 0 3
75875: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75876: LD_INT 0
75878: PPUSH
75879: PPUSH
// task := GetTaskList ( mech ) ;
75880: LD_ADDR_VAR 0 4
75884: PUSH
75885: LD_VAR 0 1
75889: PPUSH
75890: CALL_OW 437
75894: ST_TO_ADDR
// if not task then
75895: LD_VAR 0 4
75899: NOT
75900: IFFALSE 75904
// exit ;
75902: GO 75946
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75904: LD_ADDR_VAR 0 3
75908: PUSH
75909: LD_VAR 0 4
75913: PUSH
75914: LD_INT 1
75916: ARRAY
75917: PUSH
75918: LD_INT 1
75920: ARRAY
75921: PUSH
75922: LD_STRING r
75924: EQUAL
75925: PUSH
75926: LD_VAR 0 4
75930: PUSH
75931: LD_INT 1
75933: ARRAY
75934: PUSH
75935: LD_INT 4
75937: ARRAY
75938: PUSH
75939: LD_VAR 0 2
75943: EQUAL
75944: AND
75945: ST_TO_ADDR
// end ;
75946: LD_VAR 0 3
75950: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75951: LD_INT 0
75953: PPUSH
// SetDir ( unit , d ) ;
75954: LD_VAR 0 1
75958: PPUSH
75959: LD_VAR 0 4
75963: PPUSH
75964: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75968: LD_VAR 0 1
75972: PPUSH
75973: LD_VAR 0 2
75977: PPUSH
75978: LD_VAR 0 3
75982: PPUSH
75983: LD_VAR 0 5
75987: PPUSH
75988: CALL_OW 48
// end ;
75992: LD_VAR 0 6
75996: RET
// export function ToNaturalNumber ( number ) ; begin
75997: LD_INT 0
75999: PPUSH
// result := number div 1 ;
76000: LD_ADDR_VAR 0 2
76004: PUSH
76005: LD_VAR 0 1
76009: PUSH
76010: LD_INT 1
76012: DIV
76013: ST_TO_ADDR
// if number < 0 then
76014: LD_VAR 0 1
76018: PUSH
76019: LD_INT 0
76021: LESS
76022: IFFALSE 76032
// result := 0 ;
76024: LD_ADDR_VAR 0 2
76028: PUSH
76029: LD_INT 0
76031: ST_TO_ADDR
// end ;
76032: LD_VAR 0 2
76036: RET
// export function SortByClass ( units , class ) ; var un ; begin
76037: LD_INT 0
76039: PPUSH
76040: PPUSH
// if not units or not class then
76041: LD_VAR 0 1
76045: NOT
76046: PUSH
76047: LD_VAR 0 2
76051: NOT
76052: OR
76053: IFFALSE 76057
// exit ;
76055: GO 76152
// result := [ ] ;
76057: LD_ADDR_VAR 0 3
76061: PUSH
76062: EMPTY
76063: ST_TO_ADDR
// for un in units do
76064: LD_ADDR_VAR 0 4
76068: PUSH
76069: LD_VAR 0 1
76073: PUSH
76074: FOR_IN
76075: IFFALSE 76150
// if GetClass ( un ) = class then
76077: LD_VAR 0 4
76081: PPUSH
76082: CALL_OW 257
76086: PUSH
76087: LD_VAR 0 2
76091: EQUAL
76092: IFFALSE 76119
// result := Insert ( result , 1 , un ) else
76094: LD_ADDR_VAR 0 3
76098: PUSH
76099: LD_VAR 0 3
76103: PPUSH
76104: LD_INT 1
76106: PPUSH
76107: LD_VAR 0 4
76111: PPUSH
76112: CALL_OW 2
76116: ST_TO_ADDR
76117: GO 76148
// result := Replace ( result , result + 1 , un ) ;
76119: LD_ADDR_VAR 0 3
76123: PUSH
76124: LD_VAR 0 3
76128: PPUSH
76129: LD_VAR 0 3
76133: PUSH
76134: LD_INT 1
76136: PLUS
76137: PPUSH
76138: LD_VAR 0 4
76142: PPUSH
76143: CALL_OW 1
76147: ST_TO_ADDR
76148: GO 76074
76150: POP
76151: POP
// end ;
76152: LD_VAR 0 3
76156: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76157: LD_INT 0
76159: PPUSH
76160: PPUSH
76161: PPUSH
76162: PPUSH
76163: PPUSH
76164: PPUSH
76165: PPUSH
// result := [ ] ;
76166: LD_ADDR_VAR 0 4
76170: PUSH
76171: EMPTY
76172: ST_TO_ADDR
// if x - r < 0 then
76173: LD_VAR 0 1
76177: PUSH
76178: LD_VAR 0 3
76182: MINUS
76183: PUSH
76184: LD_INT 0
76186: LESS
76187: IFFALSE 76199
// min_x := 0 else
76189: LD_ADDR_VAR 0 8
76193: PUSH
76194: LD_INT 0
76196: ST_TO_ADDR
76197: GO 76215
// min_x := x - r ;
76199: LD_ADDR_VAR 0 8
76203: PUSH
76204: LD_VAR 0 1
76208: PUSH
76209: LD_VAR 0 3
76213: MINUS
76214: ST_TO_ADDR
// if y - r < 0 then
76215: LD_VAR 0 2
76219: PUSH
76220: LD_VAR 0 3
76224: MINUS
76225: PUSH
76226: LD_INT 0
76228: LESS
76229: IFFALSE 76241
// min_y := 0 else
76231: LD_ADDR_VAR 0 7
76235: PUSH
76236: LD_INT 0
76238: ST_TO_ADDR
76239: GO 76257
// min_y := y - r ;
76241: LD_ADDR_VAR 0 7
76245: PUSH
76246: LD_VAR 0 2
76250: PUSH
76251: LD_VAR 0 3
76255: MINUS
76256: ST_TO_ADDR
// max_x := x + r ;
76257: LD_ADDR_VAR 0 9
76261: PUSH
76262: LD_VAR 0 1
76266: PUSH
76267: LD_VAR 0 3
76271: PLUS
76272: ST_TO_ADDR
// max_y := y + r ;
76273: LD_ADDR_VAR 0 10
76277: PUSH
76278: LD_VAR 0 2
76282: PUSH
76283: LD_VAR 0 3
76287: PLUS
76288: ST_TO_ADDR
// for _x = min_x to max_x do
76289: LD_ADDR_VAR 0 5
76293: PUSH
76294: DOUBLE
76295: LD_VAR 0 8
76299: DEC
76300: ST_TO_ADDR
76301: LD_VAR 0 9
76305: PUSH
76306: FOR_TO
76307: IFFALSE 76408
// for _y = min_y to max_y do
76309: LD_ADDR_VAR 0 6
76313: PUSH
76314: DOUBLE
76315: LD_VAR 0 7
76319: DEC
76320: ST_TO_ADDR
76321: LD_VAR 0 10
76325: PUSH
76326: FOR_TO
76327: IFFALSE 76404
// begin if not ValidHex ( _x , _y ) then
76329: LD_VAR 0 5
76333: PPUSH
76334: LD_VAR 0 6
76338: PPUSH
76339: CALL_OW 488
76343: NOT
76344: IFFALSE 76348
// continue ;
76346: GO 76326
// if GetResourceTypeXY ( _x , _y ) then
76348: LD_VAR 0 5
76352: PPUSH
76353: LD_VAR 0 6
76357: PPUSH
76358: CALL_OW 283
76362: IFFALSE 76402
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76364: LD_ADDR_VAR 0 4
76368: PUSH
76369: LD_VAR 0 4
76373: PPUSH
76374: LD_VAR 0 4
76378: PUSH
76379: LD_INT 1
76381: PLUS
76382: PPUSH
76383: LD_VAR 0 5
76387: PUSH
76388: LD_VAR 0 6
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: PPUSH
76397: CALL_OW 1
76401: ST_TO_ADDR
// end ;
76402: GO 76326
76404: POP
76405: POP
76406: GO 76306
76408: POP
76409: POP
// end ;
76410: LD_VAR 0 4
76414: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76415: LD_INT 0
76417: PPUSH
76418: PPUSH
76419: PPUSH
76420: PPUSH
76421: PPUSH
76422: PPUSH
76423: PPUSH
76424: PPUSH
// if not units then
76425: LD_VAR 0 1
76429: NOT
76430: IFFALSE 76434
// exit ;
76432: GO 76958
// result := UnitFilter ( units , [ f_ok ] ) ;
76434: LD_ADDR_VAR 0 3
76438: PUSH
76439: LD_VAR 0 1
76443: PPUSH
76444: LD_INT 50
76446: PUSH
76447: EMPTY
76448: LIST
76449: PPUSH
76450: CALL_OW 72
76454: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76455: LD_ADDR_VAR 0 8
76459: PUSH
76460: LD_VAR 0 1
76464: PUSH
76465: LD_INT 1
76467: ARRAY
76468: PPUSH
76469: CALL_OW 255
76473: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76474: LD_ADDR_VAR 0 10
76478: PUSH
76479: LD_INT 29
76481: PUSH
76482: LD_INT 91
76484: PUSH
76485: LD_INT 49
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: LIST
76492: ST_TO_ADDR
// if not result then
76493: LD_VAR 0 3
76497: NOT
76498: IFFALSE 76502
// exit ;
76500: GO 76958
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76502: LD_ADDR_VAR 0 5
76506: PUSH
76507: LD_INT 81
76509: PUSH
76510: LD_VAR 0 8
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PPUSH
76519: CALL_OW 69
76523: ST_TO_ADDR
// for i in result do
76524: LD_ADDR_VAR 0 4
76528: PUSH
76529: LD_VAR 0 3
76533: PUSH
76534: FOR_IN
76535: IFFALSE 76956
// begin tag := GetTag ( i ) + 1 ;
76537: LD_ADDR_VAR 0 9
76541: PUSH
76542: LD_VAR 0 4
76546: PPUSH
76547: CALL_OW 110
76551: PUSH
76552: LD_INT 1
76554: PLUS
76555: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76556: LD_ADDR_VAR 0 7
76560: PUSH
76561: LD_VAR 0 4
76565: PPUSH
76566: CALL_OW 250
76570: PPUSH
76571: LD_VAR 0 4
76575: PPUSH
76576: CALL_OW 251
76580: PPUSH
76581: LD_INT 6
76583: PPUSH
76584: CALL 76157 0 3
76588: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76589: LD_VAR 0 4
76593: PPUSH
76594: CALL_OW 247
76598: PUSH
76599: LD_INT 2
76601: EQUAL
76602: PUSH
76603: LD_VAR 0 7
76607: AND
76608: PUSH
76609: LD_VAR 0 4
76613: PPUSH
76614: CALL_OW 264
76618: PUSH
76619: LD_VAR 0 10
76623: IN
76624: NOT
76625: AND
76626: IFFALSE 76665
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76628: LD_VAR 0 4
76632: PPUSH
76633: LD_VAR 0 7
76637: PUSH
76638: LD_INT 1
76640: ARRAY
76641: PUSH
76642: LD_INT 1
76644: ARRAY
76645: PPUSH
76646: LD_VAR 0 7
76650: PUSH
76651: LD_INT 1
76653: ARRAY
76654: PUSH
76655: LD_INT 2
76657: ARRAY
76658: PPUSH
76659: CALL_OW 116
76663: GO 76954
// if path > tag then
76665: LD_VAR 0 2
76669: PUSH
76670: LD_VAR 0 9
76674: GREATER
76675: IFFALSE 76883
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76677: LD_ADDR_VAR 0 6
76681: PUSH
76682: LD_VAR 0 5
76686: PPUSH
76687: LD_INT 91
76689: PUSH
76690: LD_VAR 0 4
76694: PUSH
76695: LD_INT 8
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: LIST
76702: PPUSH
76703: CALL_OW 72
76707: ST_TO_ADDR
// if nearEnemy then
76708: LD_VAR 0 6
76712: IFFALSE 76781
// begin if GetWeapon ( i ) = ru_time_lapser then
76714: LD_VAR 0 4
76718: PPUSH
76719: CALL_OW 264
76723: PUSH
76724: LD_INT 49
76726: EQUAL
76727: IFFALSE 76755
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76729: LD_VAR 0 4
76733: PPUSH
76734: LD_VAR 0 6
76738: PPUSH
76739: LD_VAR 0 4
76743: PPUSH
76744: CALL_OW 74
76748: PPUSH
76749: CALL_OW 112
76753: GO 76779
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76755: LD_VAR 0 4
76759: PPUSH
76760: LD_VAR 0 6
76764: PPUSH
76765: LD_VAR 0 4
76769: PPUSH
76770: CALL_OW 74
76774: PPUSH
76775: CALL 77883 0 2
// end else
76779: GO 76881
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76781: LD_VAR 0 4
76785: PPUSH
76786: LD_VAR 0 2
76790: PUSH
76791: LD_VAR 0 9
76795: ARRAY
76796: PUSH
76797: LD_INT 1
76799: ARRAY
76800: PPUSH
76801: LD_VAR 0 2
76805: PUSH
76806: LD_VAR 0 9
76810: ARRAY
76811: PUSH
76812: LD_INT 2
76814: ARRAY
76815: PPUSH
76816: CALL_OW 297
76820: PUSH
76821: LD_INT 6
76823: GREATER
76824: IFFALSE 76867
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76826: LD_VAR 0 4
76830: PPUSH
76831: LD_VAR 0 2
76835: PUSH
76836: LD_VAR 0 9
76840: ARRAY
76841: PUSH
76842: LD_INT 1
76844: ARRAY
76845: PPUSH
76846: LD_VAR 0 2
76850: PUSH
76851: LD_VAR 0 9
76855: ARRAY
76856: PUSH
76857: LD_INT 2
76859: ARRAY
76860: PPUSH
76861: CALL_OW 114
76865: GO 76881
// SetTag ( i , tag ) ;
76867: LD_VAR 0 4
76871: PPUSH
76872: LD_VAR 0 9
76876: PPUSH
76877: CALL_OW 109
// end else
76881: GO 76954
// if enemy then
76883: LD_VAR 0 5
76887: IFFALSE 76954
// begin if GetWeapon ( i ) = ru_time_lapser then
76889: LD_VAR 0 4
76893: PPUSH
76894: CALL_OW 264
76898: PUSH
76899: LD_INT 49
76901: EQUAL
76902: IFFALSE 76930
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76904: LD_VAR 0 4
76908: PPUSH
76909: LD_VAR 0 5
76913: PPUSH
76914: LD_VAR 0 4
76918: PPUSH
76919: CALL_OW 74
76923: PPUSH
76924: CALL_OW 112
76928: GO 76954
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76930: LD_VAR 0 4
76934: PPUSH
76935: LD_VAR 0 5
76939: PPUSH
76940: LD_VAR 0 4
76944: PPUSH
76945: CALL_OW 74
76949: PPUSH
76950: CALL 77883 0 2
// end ; end ;
76954: GO 76534
76956: POP
76957: POP
// end ;
76958: LD_VAR 0 3
76962: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76963: LD_INT 0
76965: PPUSH
76966: PPUSH
76967: PPUSH
// if not unit or IsInUnit ( unit ) then
76968: LD_VAR 0 1
76972: NOT
76973: PUSH
76974: LD_VAR 0 1
76978: PPUSH
76979: CALL_OW 310
76983: OR
76984: IFFALSE 76988
// exit ;
76986: GO 77079
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76988: LD_ADDR_VAR 0 4
76992: PUSH
76993: LD_VAR 0 1
76997: PPUSH
76998: CALL_OW 250
77002: PPUSH
77003: LD_VAR 0 2
77007: PPUSH
77008: LD_INT 1
77010: PPUSH
77011: CALL_OW 272
77015: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77016: LD_ADDR_VAR 0 5
77020: PUSH
77021: LD_VAR 0 1
77025: PPUSH
77026: CALL_OW 251
77030: PPUSH
77031: LD_VAR 0 2
77035: PPUSH
77036: LD_INT 1
77038: PPUSH
77039: CALL_OW 273
77043: ST_TO_ADDR
// if ValidHex ( x , y ) then
77044: LD_VAR 0 4
77048: PPUSH
77049: LD_VAR 0 5
77053: PPUSH
77054: CALL_OW 488
77058: IFFALSE 77079
// ComTurnXY ( unit , x , y ) ;
77060: LD_VAR 0 1
77064: PPUSH
77065: LD_VAR 0 4
77069: PPUSH
77070: LD_VAR 0 5
77074: PPUSH
77075: CALL_OW 118
// end ;
77079: LD_VAR 0 3
77083: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77084: LD_INT 0
77086: PPUSH
77087: PPUSH
// result := false ;
77088: LD_ADDR_VAR 0 3
77092: PUSH
77093: LD_INT 0
77095: ST_TO_ADDR
// if not units then
77096: LD_VAR 0 2
77100: NOT
77101: IFFALSE 77105
// exit ;
77103: GO 77150
// for i in units do
77105: LD_ADDR_VAR 0 4
77109: PUSH
77110: LD_VAR 0 2
77114: PUSH
77115: FOR_IN
77116: IFFALSE 77148
// if See ( side , i ) then
77118: LD_VAR 0 1
77122: PPUSH
77123: LD_VAR 0 4
77127: PPUSH
77128: CALL_OW 292
77132: IFFALSE 77146
// begin result := true ;
77134: LD_ADDR_VAR 0 3
77138: PUSH
77139: LD_INT 1
77141: ST_TO_ADDR
// exit ;
77142: POP
77143: POP
77144: GO 77150
// end ;
77146: GO 77115
77148: POP
77149: POP
// end ;
77150: LD_VAR 0 3
77154: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77155: LD_INT 0
77157: PPUSH
77158: PPUSH
77159: PPUSH
77160: PPUSH
// if not unit or not points then
77161: LD_VAR 0 1
77165: NOT
77166: PUSH
77167: LD_VAR 0 2
77171: NOT
77172: OR
77173: IFFALSE 77177
// exit ;
77175: GO 77267
// dist := 99999 ;
77177: LD_ADDR_VAR 0 5
77181: PUSH
77182: LD_INT 99999
77184: ST_TO_ADDR
// for i in points do
77185: LD_ADDR_VAR 0 4
77189: PUSH
77190: LD_VAR 0 2
77194: PUSH
77195: FOR_IN
77196: IFFALSE 77265
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77198: LD_ADDR_VAR 0 6
77202: PUSH
77203: LD_VAR 0 1
77207: PPUSH
77208: LD_VAR 0 4
77212: PUSH
77213: LD_INT 1
77215: ARRAY
77216: PPUSH
77217: LD_VAR 0 4
77221: PUSH
77222: LD_INT 2
77224: ARRAY
77225: PPUSH
77226: CALL_OW 297
77230: ST_TO_ADDR
// if tmpDist < dist then
77231: LD_VAR 0 6
77235: PUSH
77236: LD_VAR 0 5
77240: LESS
77241: IFFALSE 77263
// begin result := i ;
77243: LD_ADDR_VAR 0 3
77247: PUSH
77248: LD_VAR 0 4
77252: ST_TO_ADDR
// dist := tmpDist ;
77253: LD_ADDR_VAR 0 5
77257: PUSH
77258: LD_VAR 0 6
77262: ST_TO_ADDR
// end ; end ;
77263: GO 77195
77265: POP
77266: POP
// end ;
77267: LD_VAR 0 3
77271: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77272: LD_INT 0
77274: PPUSH
// uc_side := side ;
77275: LD_ADDR_OWVAR 20
77279: PUSH
77280: LD_VAR 0 1
77284: ST_TO_ADDR
// uc_nation := 3 ;
77285: LD_ADDR_OWVAR 21
77289: PUSH
77290: LD_INT 3
77292: ST_TO_ADDR
// vc_chassis := 25 ;
77293: LD_ADDR_OWVAR 37
77297: PUSH
77298: LD_INT 25
77300: ST_TO_ADDR
// vc_engine := engine_siberite ;
77301: LD_ADDR_OWVAR 39
77305: PUSH
77306: LD_INT 3
77308: ST_TO_ADDR
// vc_control := control_computer ;
77309: LD_ADDR_OWVAR 38
77313: PUSH
77314: LD_INT 3
77316: ST_TO_ADDR
// vc_weapon := 59 ;
77317: LD_ADDR_OWVAR 40
77321: PUSH
77322: LD_INT 59
77324: ST_TO_ADDR
// result := CreateVehicle ;
77325: LD_ADDR_VAR 0 5
77329: PUSH
77330: CALL_OW 45
77334: ST_TO_ADDR
// SetDir ( result , d ) ;
77335: LD_VAR 0 5
77339: PPUSH
77340: LD_VAR 0 4
77344: PPUSH
77345: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77349: LD_VAR 0 5
77353: PPUSH
77354: LD_VAR 0 2
77358: PPUSH
77359: LD_VAR 0 3
77363: PPUSH
77364: LD_INT 0
77366: PPUSH
77367: CALL_OW 48
// end ;
77371: LD_VAR 0 5
77375: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77376: LD_INT 0
77378: PPUSH
77379: PPUSH
77380: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77381: LD_ADDR_VAR 0 2
77385: PUSH
77386: LD_INT 0
77388: PUSH
77389: LD_INT 0
77391: PUSH
77392: LD_INT 0
77394: PUSH
77395: LD_INT 0
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77404: LD_VAR 0 1
77408: NOT
77409: PUSH
77410: LD_VAR 0 1
77414: PPUSH
77415: CALL_OW 264
77419: PUSH
77420: LD_INT 12
77422: PUSH
77423: LD_INT 51
77425: PUSH
77426: LD_INT 32
77428: PUSH
77429: LD_INT 89
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: IN
77438: NOT
77439: OR
77440: IFFALSE 77444
// exit ;
77442: GO 77542
// for i := 1 to 3 do
77444: LD_ADDR_VAR 0 3
77448: PUSH
77449: DOUBLE
77450: LD_INT 1
77452: DEC
77453: ST_TO_ADDR
77454: LD_INT 3
77456: PUSH
77457: FOR_TO
77458: IFFALSE 77540
// begin tmp := GetCargo ( cargo , i ) ;
77460: LD_ADDR_VAR 0 4
77464: PUSH
77465: LD_VAR 0 1
77469: PPUSH
77470: LD_VAR 0 3
77474: PPUSH
77475: CALL_OW 289
77479: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77480: LD_ADDR_VAR 0 2
77484: PUSH
77485: LD_VAR 0 2
77489: PPUSH
77490: LD_VAR 0 3
77494: PPUSH
77495: LD_VAR 0 4
77499: PPUSH
77500: CALL_OW 1
77504: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77505: LD_ADDR_VAR 0 2
77509: PUSH
77510: LD_VAR 0 2
77514: PPUSH
77515: LD_INT 4
77517: PPUSH
77518: LD_VAR 0 2
77522: PUSH
77523: LD_INT 4
77525: ARRAY
77526: PUSH
77527: LD_VAR 0 4
77531: PLUS
77532: PPUSH
77533: CALL_OW 1
77537: ST_TO_ADDR
// end ;
77538: GO 77457
77540: POP
77541: POP
// end ;
77542: LD_VAR 0 2
77546: RET
// export function Length ( array ) ; begin
77547: LD_INT 0
77549: PPUSH
// result := array + 0 ;
77550: LD_ADDR_VAR 0 2
77554: PUSH
77555: LD_VAR 0 1
77559: PUSH
77560: LD_INT 0
77562: PLUS
77563: ST_TO_ADDR
// end ;
77564: LD_VAR 0 2
77568: RET
// export function PrepareArray ( array ) ; begin
77569: LD_INT 0
77571: PPUSH
// result := array diff 0 ;
77572: LD_ADDR_VAR 0 2
77576: PUSH
77577: LD_VAR 0 1
77581: PUSH
77582: LD_INT 0
77584: DIFF
77585: ST_TO_ADDR
// if not result [ 1 ] then
77586: LD_VAR 0 2
77590: PUSH
77591: LD_INT 1
77593: ARRAY
77594: NOT
77595: IFFALSE 77615
// result := Delete ( result , 1 ) ;
77597: LD_ADDR_VAR 0 2
77601: PUSH
77602: LD_VAR 0 2
77606: PPUSH
77607: LD_INT 1
77609: PPUSH
77610: CALL_OW 3
77614: ST_TO_ADDR
// end ;
77615: LD_VAR 0 2
77619: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77620: LD_INT 0
77622: PPUSH
77623: PPUSH
77624: PPUSH
77625: PPUSH
// sibRocketRange := 25 ;
77626: LD_ADDR_VAR 0 6
77630: PUSH
77631: LD_INT 25
77633: ST_TO_ADDR
// result := false ;
77634: LD_ADDR_VAR 0 4
77638: PUSH
77639: LD_INT 0
77641: ST_TO_ADDR
// for i := 0 to 5 do
77642: LD_ADDR_VAR 0 5
77646: PUSH
77647: DOUBLE
77648: LD_INT 0
77650: DEC
77651: ST_TO_ADDR
77652: LD_INT 5
77654: PUSH
77655: FOR_TO
77656: IFFALSE 77723
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77658: LD_VAR 0 1
77662: PPUSH
77663: LD_VAR 0 5
77667: PPUSH
77668: LD_VAR 0 6
77672: PPUSH
77673: CALL_OW 272
77677: PPUSH
77678: LD_VAR 0 2
77682: PPUSH
77683: LD_VAR 0 5
77687: PPUSH
77688: LD_VAR 0 6
77692: PPUSH
77693: CALL_OW 273
77697: PPUSH
77698: LD_VAR 0 3
77702: PPUSH
77703: CALL_OW 309
77707: IFFALSE 77721
// begin result := true ;
77709: LD_ADDR_VAR 0 4
77713: PUSH
77714: LD_INT 1
77716: ST_TO_ADDR
// exit ;
77717: POP
77718: POP
77719: GO 77725
// end ;
77721: GO 77655
77723: POP
77724: POP
// end ;
77725: LD_VAR 0 4
77729: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77730: LD_INT 0
77732: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77733: LD_VAR 0 1
77737: PPUSH
77738: LD_VAR 0 2
77742: PPUSH
77743: LD_INT 0
77745: PPUSH
77746: LD_INT 0
77748: PPUSH
77749: LD_INT 1
77751: PPUSH
77752: LD_INT 0
77754: PPUSH
77755: CALL_OW 587
// end ;
77759: LD_VAR 0 3
77763: RET
// export function CenterOnNow ( unit ) ; begin
77764: LD_INT 0
77766: PPUSH
// result := IsInUnit ( unit ) ;
77767: LD_ADDR_VAR 0 2
77771: PUSH
77772: LD_VAR 0 1
77776: PPUSH
77777: CALL_OW 310
77781: ST_TO_ADDR
// if not result then
77782: LD_VAR 0 2
77786: NOT
77787: IFFALSE 77799
// result := unit ;
77789: LD_ADDR_VAR 0 2
77793: PUSH
77794: LD_VAR 0 1
77798: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77799: LD_VAR 0 1
77803: PPUSH
77804: CALL_OW 87
// end ;
77808: LD_VAR 0 2
77812: RET
// export function ComMoveHex ( unit , hex ) ; begin
77813: LD_INT 0
77815: PPUSH
// if not hex then
77816: LD_VAR 0 2
77820: NOT
77821: IFFALSE 77825
// exit ;
77823: GO 77878
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77825: LD_VAR 0 2
77829: PUSH
77830: LD_INT 1
77832: ARRAY
77833: PPUSH
77834: LD_VAR 0 2
77838: PUSH
77839: LD_INT 2
77841: ARRAY
77842: PPUSH
77843: CALL_OW 428
77847: IFFALSE 77851
// exit ;
77849: GO 77878
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77851: LD_VAR 0 1
77855: PPUSH
77856: LD_VAR 0 2
77860: PUSH
77861: LD_INT 1
77863: ARRAY
77864: PPUSH
77865: LD_VAR 0 2
77869: PUSH
77870: LD_INT 2
77872: ARRAY
77873: PPUSH
77874: CALL_OW 111
// end ;
77878: LD_VAR 0 3
77882: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77883: LD_INT 0
77885: PPUSH
77886: PPUSH
77887: PPUSH
// if not unit or not enemy then
77888: LD_VAR 0 1
77892: NOT
77893: PUSH
77894: LD_VAR 0 2
77898: NOT
77899: OR
77900: IFFALSE 77904
// exit ;
77902: GO 78028
// x := GetX ( enemy ) ;
77904: LD_ADDR_VAR 0 4
77908: PUSH
77909: LD_VAR 0 2
77913: PPUSH
77914: CALL_OW 250
77918: ST_TO_ADDR
// y := GetY ( enemy ) ;
77919: LD_ADDR_VAR 0 5
77923: PUSH
77924: LD_VAR 0 2
77928: PPUSH
77929: CALL_OW 251
77933: ST_TO_ADDR
// if ValidHex ( x , y ) then
77934: LD_VAR 0 4
77938: PPUSH
77939: LD_VAR 0 5
77943: PPUSH
77944: CALL_OW 488
77948: IFFALSE 78028
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
77950: LD_VAR 0 2
77954: PPUSH
77955: CALL_OW 247
77959: PUSH
77960: LD_INT 3
77962: PUSH
77963: LD_INT 2
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: IN
77970: PUSH
77971: LD_VAR 0 1
77975: PPUSH
77976: CALL_OW 255
77980: PPUSH
77981: LD_VAR 0 2
77985: PPUSH
77986: CALL_OW 292
77990: AND
77991: IFFALSE 78009
// ComAttackUnit ( unit , enemy ) else
77993: LD_VAR 0 1
77997: PPUSH
77998: LD_VAR 0 2
78002: PPUSH
78003: CALL_OW 115
78007: GO 78028
// ComAgressiveMove ( unit , x , y ) ;
78009: LD_VAR 0 1
78013: PPUSH
78014: LD_VAR 0 4
78018: PPUSH
78019: LD_VAR 0 5
78023: PPUSH
78024: CALL_OW 114
// end ;
78028: LD_VAR 0 3
78032: RET
// function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78033: LD_INT 0
78035: PPUSH
78036: PPUSH
78037: PPUSH
// list := AreaToList ( area , 0 ) ;
78038: LD_ADDR_VAR 0 5
78042: PUSH
78043: LD_VAR 0 1
78047: PPUSH
78048: LD_INT 0
78050: PPUSH
78051: CALL_OW 517
78055: ST_TO_ADDR
// if not list then
78056: LD_VAR 0 5
78060: NOT
78061: IFFALSE 78065
// exit ;
78063: GO 78192
// if all then
78065: LD_VAR 0 2
78069: IFFALSE 78157
// begin for i := 1 to list [ 1 ] do
78071: LD_ADDR_VAR 0 4
78075: PUSH
78076: DOUBLE
78077: LD_INT 1
78079: DEC
78080: ST_TO_ADDR
78081: LD_VAR 0 5
78085: PUSH
78086: LD_INT 1
78088: ARRAY
78089: PUSH
78090: FOR_TO
78091: IFFALSE 78153
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78093: LD_ADDR_VAR 0 3
78097: PUSH
78098: LD_VAR 0 3
78102: PPUSH
78103: LD_VAR 0 3
78107: PUSH
78108: LD_INT 1
78110: PLUS
78111: PPUSH
78112: LD_VAR 0 5
78116: PUSH
78117: LD_INT 1
78119: ARRAY
78120: PUSH
78121: LD_VAR 0 4
78125: ARRAY
78126: PUSH
78127: LD_VAR 0 5
78131: PUSH
78132: LD_INT 2
78134: ARRAY
78135: PUSH
78136: LD_VAR 0 4
78140: ARRAY
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: PPUSH
78146: CALL_OW 1
78150: ST_TO_ADDR
78151: GO 78090
78153: POP
78154: POP
// exit ;
78155: GO 78192
// end ; result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ;
78157: LD_ADDR_VAR 0 3
78161: PUSH
78162: LD_VAR 0 5
78166: PUSH
78167: LD_INT 1
78169: ARRAY
78170: PUSH
78171: LD_INT 1
78173: ARRAY
78174: PUSH
78175: LD_VAR 0 5
78179: PUSH
78180: LD_INT 2
78182: ARRAY
78183: PUSH
78184: LD_INT 1
78186: ARRAY
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: ST_TO_ADDR
// end ;
78192: LD_VAR 0 3
78196: RET
// function GetBuildingFromArea ( area , direction ) ; var list ; begin
78197: LD_INT 0
78199: PPUSH
78200: PPUSH
// list := AreaToList ( area , 0 ) ;
78201: LD_ADDR_VAR 0 4
78205: PUSH
78206: LD_VAR 0 1
78210: PPUSH
78211: LD_INT 0
78213: PPUSH
78214: CALL_OW 517
78218: ST_TO_ADDR
// if not list then
78219: LD_VAR 0 4
78223: NOT
78224: IFFALSE 78228
// exit ;
78226: GO 78269
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78228: LD_ADDR_VAR 0 3
78232: PUSH
78233: LD_VAR 0 4
78237: PUSH
78238: LD_INT 1
78240: ARRAY
78241: PUSH
78242: LD_INT 1
78244: ARRAY
78245: PUSH
78246: LD_VAR 0 4
78250: PUSH
78251: LD_INT 2
78253: ARRAY
78254: PUSH
78255: LD_INT 1
78257: ARRAY
78258: PUSH
78259: LD_VAR 0 2
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: LIST
78268: ST_TO_ADDR
// end ; end_of_file
78269: LD_VAR 0 3
78273: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78274: LD_VAR 0 1
78278: PUSH
78279: LD_INT 200
78281: DOUBLE
78282: GREATEREQUAL
78283: IFFALSE 78291
78285: LD_INT 299
78287: DOUBLE
78288: LESSEQUAL
78289: IFTRUE 78293
78291: GO 78325
78293: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78294: LD_VAR 0 1
78298: PPUSH
78299: LD_VAR 0 2
78303: PPUSH
78304: LD_VAR 0 3
78308: PPUSH
78309: LD_VAR 0 4
78313: PPUSH
78314: LD_VAR 0 5
78318: PPUSH
78319: CALL 31757 0 5
78323: GO 78402
78325: LD_INT 300
78327: DOUBLE
78328: GREATEREQUAL
78329: IFFALSE 78337
78331: LD_INT 399
78333: DOUBLE
78334: LESSEQUAL
78335: IFTRUE 78339
78337: GO 78401
78339: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78340: LD_VAR 0 1
78344: PPUSH
78345: LD_VAR 0 2
78349: PPUSH
78350: LD_VAR 0 3
78354: PPUSH
78355: LD_VAR 0 4
78359: PPUSH
78360: LD_VAR 0 5
78364: PPUSH
78365: LD_VAR 0 6
78369: PPUSH
78370: LD_VAR 0 7
78374: PPUSH
78375: LD_VAR 0 8
78379: PPUSH
78380: LD_VAR 0 9
78384: PPUSH
78385: LD_VAR 0 10
78389: PPUSH
78390: LD_VAR 0 11
78394: PPUSH
78395: CALL 28082 0 11
78399: GO 78402
78401: POP
// end ;
78402: PPOPN 11
78404: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78405: LD_VAR 0 1
78409: PPUSH
78410: LD_VAR 0 2
78414: PPUSH
78415: LD_VAR 0 3
78419: PPUSH
78420: LD_VAR 0 4
78424: PPUSH
78425: LD_VAR 0 5
78429: PPUSH
78430: CALL 31493 0 5
// end ; end_of_file
78434: PPOPN 5
78436: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78437: LD_VAR 0 1
78441: PPUSH
78442: LD_VAR 0 2
78446: PPUSH
78447: LD_VAR 0 3
78451: PPUSH
78452: LD_VAR 0 4
78456: PPUSH
78457: LD_VAR 0 5
78461: PPUSH
78462: LD_VAR 0 6
78466: PPUSH
78467: CALL 15734 0 6
// end ;
78471: PPOPN 6
78473: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78474: LD_INT 0
78476: PPUSH
// begin if not units then
78477: LD_VAR 0 1
78481: NOT
78482: IFFALSE 78486
// exit ;
78484: GO 78486
// end ;
78486: PPOPN 7
78488: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78489: CALL 15638 0 0
// end ;
78493: PPOPN 1
78495: END
