// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9539 0 0
// PrepareAlliance ;
  19: CALL 352 0 0
// PrepareFriends ;
  23: CALL 3821 0 0
// PrepareAmerican ;
  27: CALL 789 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 17
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 15
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9875 0 0
// PreparePatrol ;
 117: CALL 1413 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert , def_counter ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// def_counter := 0 ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// end ;
 251: LD_VAR 0 1
 255: RET
// every 0 0$1 trigger on_hill do
 256: LD_EXP 7
 260: IFFALSE 272
 262: GO 264
 264: DISABLE
// SetAchievement ( ACH_EYE ) ;
 265: LD_STRING ACH_EYE
 267: PPUSH
 268: CALL_OW 543
 272: END
// every 0 0$1 trigger not invis_used do var i ;
 273: LD_EXP 12
 277: NOT
 278: IFFALSE 349
 280: GO 282
 282: DISABLE
 283: LD_INT 0
 285: PPUSH
// begin enable ;
 286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 287: LD_ADDR_VAR 0 1
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_INT 7
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 21
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 347
// if IsInvisible ( i ) then
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 571
 333: IFFALSE 345
// begin invis_used := true ;
 335: LD_ADDR_EXP 12
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// break ;
 343: GO 347
// end ;
 345: GO 321
 347: POP
 348: POP
// end ; end_of_file
 349: PPOPN 1
 351: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 352: LD_INT 0
 354: PPUSH
 355: PPUSH
// uc_side := 7 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 7
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 372: LD_ADDR_EXP 15
 376: PUSH
 377: LD_STRING JMM
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: LD_STRING 11_
 388: PPUSH
 389: CALL 36403 0 3
 393: ST_TO_ADDR
// uc_side := 4 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 4
 401: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Roth
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 415: LD_EXP 15
 419: PPUSH
 420: LD_INT 1
 422: PPUSH
 423: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 427: LD_EXP 15
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 439: LD_EXP 15
 443: PPUSH
 444: LD_INT 105
 446: PPUSH
 447: LD_INT 10
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 457: LD_EXP 16
 461: PPUSH
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 469: LD_EXP 16
 473: PPUSH
 474: LD_INT 109
 476: PPUSH
 477: LD_INT 10
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 16
 496: PPUSH
 497: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 501: LD_EXP 16
 505: PPUSH
 506: LD_EXP 15
 510: PPUSH
 511: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 515: LD_INT 3
 517: PPUSH
 518: LD_INT 3
 520: PPUSH
 521: LD_INT 3
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: LD_INT 100
 529: PPUSH
 530: CALL 41243 0 5
// cargo := CreateVehicle ;
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: CALL_OW 45
 543: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 556: LD_VAR 0 2
 560: PPUSH
 561: LD_INT 179
 563: PPUSH
 564: LD_INT 45
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 4
 581: PPUSH
 582: LD_INT 30
 584: PPUSH
 585: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 589: LD_STRING 11_artifact_captured
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: IFFALSE 656
// begin cargo := CreateVehicle ;
 601: LD_ADDR_VAR 0 2
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 171
 630: PPUSH
 631: LD_INT 85
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 641: LD_VAR 0 2
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 50
 651: PPUSH
 652: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 656: LD_INT 47
 658: PPUSH
 659: LD_INT 7
 661: PPUSH
 662: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 666: LD_INT 1
 668: PPUSH
 669: LD_INT 47
 671: PPUSH
 672: CALL_OW 471
// end ;
 676: LD_VAR 0 1
 680: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 681: LD_INT 38
 683: PPUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 7
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 70
 698: PUSH
 699: LD_EXP 7
 703: NOT
 704: AND
 705: IFFALSE 736
 707: GO 709
 709: DISABLE
// begin enable ;
 710: ENABLE
// on_hill := true ;
 711: LD_ADDR_EXP 7
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 719: LD_INT 126
 721: PPUSH
 722: LD_INT 13
 724: PPUSH
 725: LD_INT 7
 727: PPUSH
 728: LD_INT 90
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 22
 742: PUSH
 743: LD_INT 7
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 70
 754: NOT
 755: PUSH
 756: LD_EXP 7
 760: AND
 761: IFFALSE 788
 763: GO 765
 765: DISABLE
// begin enable ;
 766: ENABLE
// on_hill := false ;
 767: LD_ADDR_EXP 7
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 775: LD_INT 126
 777: PPUSH
 778: LD_INT 13
 780: PPUSH
 781: LD_INT 7
 783: PPUSH
 784: CALL_OW 331
// end ; end_of_file
 788: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 789: LD_INT 0
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
 795: PPUSH
 796: PPUSH
// if Difficulty = 1 then
 797: LD_OWVAR 67
 801: PUSH
 802: LD_INT 1
 804: EQUAL
 805: IFFALSE 913
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 807: LD_ADDR_VAR 0 6
 811: PUSH
 812: LD_INT 155
 814: PUSH
 815: LD_INT 77
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 193
 824: PUSH
 825: LD_INT 93
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 188
 834: PUSH
 835: LD_INT 81
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 56
 844: PUSH
 845: LD_INT 85
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 98
 854: PUSH
 855: LD_INT 87
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: ST_TO_ADDR
// for i in tmp do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 6
 878: PUSH
 879: FOR_IN
 880: IFFALSE 911
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 882: LD_VAR 0 2
 886: PUSH
 887: LD_INT 1
 889: ARRAY
 890: PPUSH
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 2
 898: ARRAY
 899: PPUSH
 900: CALL_OW 428
 904: PPUSH
 905: CALL_OW 64
 909: GO 879
 911: POP
 912: POP
// end ; defcon := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defcon_wave := 0 ;
 921: LD_ADDR_EXP 23
 925: PUSH
 926: LD_INT 0
 928: ST_TO_ADDR
// defenders := [ ] ;
 929: LD_ADDR_EXP 21
 933: PUSH
 934: EMPTY
 935: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 936: LD_INT 5
 938: PPUSH
 939: LD_STRING alfa
 941: PPUSH
 942: CALL_OW 500
// uc_side := 1 ;
 946: LD_ADDR_OWVAR 20
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// uc_nation := 1 ;
 954: LD_ADDR_OWVAR 21
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 962: LD_ADDR_EXP 17
 966: PUSH
 967: LD_STRING Powell
 969: PPUSH
 970: CALL_OW 25
 974: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 975: LD_EXP 17
 979: PPUSH
 980: LD_INT 110
 982: PPUSH
 983: LD_INT 26
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 48
// ComHold ( Powell ) ;
 993: LD_EXP 17
 997: PPUSH
 998: CALL_OW 140
// for i := 1 to 5 do
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: DOUBLE
1008: LD_INT 1
1010: DEC
1011: ST_TO_ADDR
1012: LD_INT 5
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1072
// begin PrepareHuman ( false , 1 , 10 ) ;
1018: LD_INT 0
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1031: LD_ADDR_EXP 20
1035: PUSH
1036: LD_EXP 20
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: CALL_OW 44
1048: PPUSH
1049: CALL_OW 2
1053: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1054: LD_EXP 20
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_INT 18
1065: PPUSH
1066: CALL_OW 52
// end ;
1070: GO 1015
1072: POP
1073: POP
// if Difficulty > 1 then
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: GREATER
1082: IFFALSE 1233
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1084: LD_ADDR_VAR 0 6
1088: PUSH
1089: LD_INT 81
1091: PUSH
1092: LD_INT 33
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 134
1101: PUSH
1102: LD_INT 114
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 193
1111: PUSH
1112: LD_INT 102
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: DOUBLE
1130: LD_INT 1
1132: DEC
1133: ST_TO_ADDR
1134: LD_OWVAR 67
1138: PUSH
1139: LD_INT 1
1141: MINUS
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1231
// begin PrepareSoldier ( false , 10 ) ;
1146: LD_INT 0
1148: PPUSH
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 381
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1166: LD_VAR 0 5
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1178: LD_VAR 0 5
1182: PPUSH
1183: LD_VAR 0 6
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 6
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PUSH
1209: LD_INT 2
1211: ARRAY
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// ComHold ( un ) ;
1220: LD_VAR 0 5
1224: PPUSH
1225: CALL_OW 140
// end ;
1229: GO 1143
1231: POP
1232: POP
// end ; if Difficulty > 2 then
1233: LD_OWVAR 67
1237: PUSH
1238: LD_INT 2
1240: GREATER
1241: IFFALSE 1290
// begin bc_type := b_turret ;
1243: LD_ADDR_OWVAR 42
1247: PUSH
1248: LD_INT 33
1250: ST_TO_ADDR
// bc_level := 7 ;
1251: LD_ADDR_OWVAR 43
1255: PUSH
1256: LD_INT 7
1258: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_INT 107
1266: PPUSH
1267: LD_INT 55
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 47
1277: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1278: LD_VAR 0 4
1282: PPUSH
1283: LD_INT 7
1285: PPUSH
1286: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1290: LD_ADDR_VAR 0 2
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 3
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: PUSH
1324: LD_INT 22
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: LD_INT 30
1336: PUSH
1337: LD_INT 36
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 69
1352: ADD
1353: PUSH
1354: FOR_IN
1355: IFFALSE 1406
// for j = 1 to 3 do
1357: LD_ADDR_VAR 0 3
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_INT 3
1369: PUSH
1370: FOR_TO
1371: IFFALSE 1402
// begin PrepareHuman ( false , 3 , 6 ) ;
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 6
1381: PPUSH
1382: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1386: CALL_OW 44
1390: PPUSH
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: GO 1370
1402: POP
1403: POP
1404: GO 1354
1406: POP
1407: POP
// end ;
1408: LD_VAR 0 1
1412: RET
// export function PreparePatrol ; var i , un ; begin
1413: LD_INT 0
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_side := 1 ;
1418: LD_ADDR_OWVAR 20
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_nation := 1 ;
1426: LD_ADDR_OWVAR 21
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1434: LD_ADDR_EXP 19
1438: PUSH
1439: LD_INT 99
1441: PUSH
1442: LD_INT 55
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 113
1451: PUSH
1452: LD_INT 67
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 129
1461: PUSH
1462: LD_INT 68
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 135
1471: PUSH
1472: LD_INT 62
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 103
1481: PUSH
1482: LD_INT 41
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 27
1498: PUSH
1499: LD_INT 49
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 46
1508: PUSH
1509: LD_INT 49
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: LD_INT 87
1518: PUSH
1519: LD_INT 70
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 99
1528: PUSH
1529: LD_INT 79
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 118
1538: PUSH
1539: LD_INT 111
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 99
1548: PUSH
1549: LD_INT 79
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 87
1558: PUSH
1559: LD_INT 70
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 46
1568: PUSH
1569: LD_INT 49
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 200
1588: PUSH
1589: LD_INT 88
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 175
1598: PUSH
1599: LD_INT 80
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 135
1608: PUSH
1609: LD_INT 62
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 117
1618: PUSH
1619: LD_INT 53
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 103
1628: PUSH
1629: LD_INT 41
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 99
1638: PUSH
1639: LD_INT 24
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 85
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 99
1658: PUSH
1659: LD_INT 24
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 103
1668: PUSH
1669: LD_INT 41
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 98
1678: PUSH
1679: LD_INT 47
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 99
1688: PUSH
1689: LD_INT 56
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 96
1698: PUSH
1699: LD_INT 66
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 99
1708: PUSH
1709: LD_INT 56
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 112
1718: PUSH
1719: LD_INT 66
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 129
1728: PUSH
1729: LD_INT 68
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 135
1738: PUSH
1739: LD_INT 62
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 156
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 168
1758: PUSH
1759: LD_INT 76
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 168
1768: PUSH
1769: LD_INT 61
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 168
1778: PUSH
1779: LD_INT 75
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 185
1788: PUSH
1789: LD_INT 85
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// mobile_patrol := [ ] ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: EMPTY
1830: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1831: LD_INT 3
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: LD_INT 3
1839: PPUSH
1840: LD_INT 4
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL 41243 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1850: LD_ADDR_EXP 18
1854: PUSH
1855: LD_EXP 18
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 45
1867: PPUSH
1868: CALL_OW 2
1872: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1873: LD_EXP 18
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: LD_INT 99
1884: PPUSH
1885: LD_INT 55
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1895: LD_INT 2
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 3
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 100
1909: PPUSH
1910: CALL 41243 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_EXP 18
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: CALL_OW 45
1931: PPUSH
1932: CALL_OW 2
1936: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1937: LD_EXP 18
1941: PUSH
1942: LD_INT 2
1944: ARRAY
1945: PPUSH
1946: LD_INT 27
1948: PPUSH
1949: LD_INT 49
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1959: LD_INT 3
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: LD_INT 9
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 7
1976: PUSH
1977: LD_INT 7
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: LD_OWVAR 67
1990: ARRAY
1991: PPUSH
1992: LD_INT 100
1994: PPUSH
1995: CALL 41243 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1999: LD_ADDR_EXP 18
2003: PUSH
2004: LD_EXP 18
2008: PPUSH
2009: LD_INT 3
2011: PPUSH
2012: CALL_OW 45
2016: PPUSH
2017: CALL_OW 2
2021: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2022: LD_EXP 18
2026: PUSH
2027: LD_INT 3
2029: ARRAY
2030: PPUSH
2031: LD_INT 200
2033: PPUSH
2034: LD_INT 88
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 48
// for i := mobile_patrol downto 1 do
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: DOUBLE
2050: LD_EXP 18
2054: INC
2055: ST_TO_ADDR
2056: LD_INT 1
2058: PUSH
2059: FOR_DOWNTO
2060: IFFALSE 2071
// RaiseSailEvent ( 1 ) ;
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 427
2069: GO 2059
2071: POP
2072: POP
// end ;
2073: LD_VAR 0 1
2077: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2088: LD_ADDR_VAR 0 5
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 21
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 22
2115: PUSH
2116: LD_INT 1
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2128: LD_ADDR_VAR 0 6
2132: PUSH
2133: LD_INT 176
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 135
2141: PUSH
2142: LD_INT 62
2144: PUSH
2145: LD_INT 114
2147: PUSH
2148: LD_INT 67
2150: PUSH
2151: LD_INT 93
2153: PUSH
2154: LD_INT 71
2156: PUSH
2157: LD_INT 76
2159: PUSH
2160: LD_INT 67
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 107
2177: PUSH
2178: LD_INT 92
2180: PUSH
2181: LD_INT 92
2183: PUSH
2184: LD_INT 72
2186: PUSH
2187: LD_INT 77
2189: PUSH
2190: LD_INT 68
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 45
2203: PUSH
2204: LD_INT 49
2206: PUSH
2207: LD_INT 67
2209: PUSH
2210: LD_INT 59
2212: PUSH
2213: LD_INT 77
2215: PUSH
2216: LD_INT 68
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2232: LD_ADDR_VAR 0 4
2236: PUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_VAR 0 5
2244: PPUSH
2245: CALL_OW 12
2249: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 2
2260: PPUSH
2261: CALL_OW 12
2265: ST_TO_ADDR
// uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2282: LD_INT 2
2284: PPUSH
2285: LD_INT 3
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: LD_INT 12
2293: PPUSH
2294: LD_INT 100
2296: PPUSH
2297: CALL 41243 0 5
// veh := CreateVehicle ;
2301: LD_ADDR_VAR 0 8
2305: PUSH
2306: CALL_OW 45
2310: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2311: LD_VAR 0 8
2315: PPUSH
2316: LD_VAR 0 5
2320: PUSH
2321: LD_VAR 0 4
2325: ARRAY
2326: PUSH
2327: LD_INT 2
2329: ARRAY
2330: PPUSH
2331: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2335: LD_VAR 0 8
2339: PPUSH
2340: LD_VAR 0 5
2344: PUSH
2345: LD_VAR 0 4
2349: ARRAY
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2362: LD_VAR 0 8
2366: PPUSH
2367: LD_INT 1
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_VAR 0 3
2381: ARRAY
2382: PPUSH
2383: LD_INT 100
2385: PPUSH
2386: CALL_OW 290
// tmp := road [ k ] ;
2390: LD_ADDR_VAR 0 7
2394: PUSH
2395: LD_VAR 0 6
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_VAR 0 7
2420: PUSH
2421: LD_INT 2
2423: DIV
2424: PUSH
2425: FOR_TO
2426: IFFALSE 2473
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 7
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_INT 2
2445: MUL
2446: PUSH
2447: LD_INT 1
2449: MINUS
2450: ARRAY
2451: PPUSH
2452: LD_VAR 0 7
2456: PUSH
2457: LD_VAR 0 2
2461: PUSH
2462: LD_INT 2
2464: MUL
2465: ARRAY
2466: PPUSH
2467: CALL_OW 171
2471: GO 2425
2473: POP
2474: POP
// AddComGive ( veh , alfa ) ;
2475: LD_VAR 0 8
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2487: LD_VAR 0 8
2491: PPUSH
2492: LD_INT 70
2494: PPUSH
2495: CALL_OW 202
// for i = tmp div 2 downto 1 do
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: DOUBLE
2505: LD_VAR 0 7
2509: PUSH
2510: LD_INT 2
2512: DIV
2513: INC
2514: ST_TO_ADDR
2515: LD_INT 1
2517: PUSH
2518: FOR_DOWNTO
2519: IFFALSE 2566
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2521: LD_VAR 0 8
2525: PPUSH
2526: LD_VAR 0 7
2530: PUSH
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 2
2538: MUL
2539: PUSH
2540: LD_INT 1
2542: MINUS
2543: ARRAY
2544: PPUSH
2545: LD_VAR 0 7
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_INT 2
2557: MUL
2558: ARRAY
2559: PPUSH
2560: CALL_OW 171
2564: GO 2518
2566: POP
2567: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2568: LD_VAR 0 8
2572: PPUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_VAR 0 4
2582: ARRAY
2583: PUSH
2584: LD_INT 1
2586: ARRAY
2587: PPUSH
2588: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2592: LD_INT 35
2594: PPUSH
2595: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2599: LD_VAR 0 8
2603: PPUSH
2604: LD_VAR 0 5
2608: PUSH
2609: LD_VAR 0 4
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_VAR 0 8
2628: PPUSH
2629: LD_VAR 0 3
2633: PPUSH
2634: CALL_OW 289
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: AND
2643: IFFALSE 2592
// RemoveUnit ( veh ) ;
2645: LD_VAR 0 8
2649: PPUSH
2650: CALL_OW 64
// end ;
2654: LD_VAR 0 1
2658: RET
// every 3 3$00 do
2659: GO 2661
2661: DISABLE
// begin enable ;
2662: ENABLE
// SpawnCargo ;
2663: CALL 2078 0 0
// end ;
2667: END
// export function PrepareDefenders ; var i , tmp ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
// if defenders then
2673: LD_EXP 21
2677: IFFALSE 2681
// exit ;
2679: GO 2953
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2681: LD_ADDR_VAR 0 2
2685: PUSH
2686: DOUBLE
2687: LD_INT 1
2689: DEC
2690: ST_TO_ADDR
2691: LD_INT 4
2693: PUSH
2694: LD_INT 5
2696: PUSH
2697: LD_INT 6
2699: PUSH
2700: LD_INT 7
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2855
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 6
2725: PPUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: CALL_OW 12
2746: ARRAY
2747: PPUSH
2748: LD_INT 1
2750: PUSH
2751: LD_INT 3
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 1
2760: PPUSH
2761: LD_INT 2
2763: PPUSH
2764: CALL_OW 12
2768: ARRAY
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: LD_INT 9
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 1
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: CALL_OW 12
2797: ARRAY
2798: PPUSH
2799: CALL 38863 0 5
2803: ST_TO_ADDR
// if tmp then
2804: LD_VAR 0 3
2808: IFFALSE 2853
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2810: LD_INT 6
2812: PPUSH
2813: LD_VAR 0 3
2817: PUSH
2818: LD_INT 1
2820: ARRAY
2821: PPUSH
2822: LD_VAR 0 3
2826: PUSH
2827: LD_INT 2
2829: ARRAY
2830: PPUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_INT 3
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 3
2844: PUSH
2845: LD_INT 4
2847: ARRAY
2848: PPUSH
2849: CALL_OW 185
// end ;
2853: GO 2715
2855: POP
2856: POP
// repeat wait ( 0 0$1 ) ;
2857: LD_INT 35
2859: PPUSH
2860: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 33
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_INT 4
2895: PUSH
2896: LD_INT 5
2898: PUSH
2899: LD_INT 6
2901: PUSH
2902: LD_INT 7
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_OWVAR 67
2915: ARRAY
2916: GREATEREQUAL
2917: IFFALSE 2857
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2919: LD_ADDR_EXP 21
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 1
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 33
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: ST_TO_ADDR
// end ;
2953: LD_VAR 0 1
2957: RET
// export function Defend ; var i , un , veh , tmp ; begin
2958: LD_INT 0
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
// defcon_wave := defcon_wave + 1 ;
2965: LD_ADDR_EXP 23
2969: PUSH
2970: LD_EXP 23
2974: PUSH
2975: LD_INT 1
2977: PLUS
2978: ST_TO_ADDR
// if not defenders then
2979: LD_EXP 21
2983: NOT
2984: IFFALSE 2990
// PrepareDefenders ;
2986: CALL 2668 0 0
// if defcon_wave > 1 then
2990: LD_EXP 23
2994: PUSH
2995: LD_INT 1
2997: GREATER
2998: IFFALSE 3256
// begin for i = 1 to defcon_wave + 2 do
3000: LD_ADDR_VAR 0 2
3004: PUSH
3005: DOUBLE
3006: LD_INT 1
3008: DEC
3009: ST_TO_ADDR
3010: LD_EXP 23
3014: PUSH
3015: LD_INT 2
3017: PLUS
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3162
// begin uc_side := 1 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// uc_nation := 1 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 1
3037: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 3
3043: PPUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: LD_INT 7
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: CALL_OW 12
3071: ARRAY
3072: PPUSH
3073: LD_INT 100
3075: PPUSH
3076: CALL 41243 0 5
// veh := CreateVehicle ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: CALL_OW 45
3089: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 233
// defenders := defenders ^ veh ;
3102: LD_ADDR_EXP 21
3106: PUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_VAR 0 4
3116: ADD
3117: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3118: LD_INT 0
3120: PPUSH
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 9
3126: PPUSH
3127: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3131: CALL_OW 44
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 25
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL_OW 49
// end ;
3160: GO 3019
3162: POP
3163: POP
// for i = 1 to defcon_wave do
3164: LD_ADDR_VAR 0 2
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_EXP 23
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3254
// begin uc_side := 1 ;
3182: LD_ADDR_OWVAR 20
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// uc_nation := 1 ;
3190: LD_ADDR_OWVAR 21
3194: PUSH
3195: LD_INT 1
3197: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 5
3203: PPUSH
3204: LD_INT 9
3206: PPUSH
3207: CALL_OW 380
// un := CreateHuman ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: CALL_OW 44
3220: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3221: LD_VAR 0 3
3225: PPUSH
3226: LD_INT 25
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
// defenders := defenders ^ un ;
3236: LD_ADDR_EXP 21
3240: PUSH
3241: LD_EXP 21
3245: PUSH
3246: LD_VAR 0 3
3250: ADD
3251: ST_TO_ADDR
// end ;
3252: GO 3179
3254: POP
3255: POP
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// for i in defenders do
3263: LD_ADDR_VAR 0 2
3267: PUSH
3268: LD_EXP 21
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3356
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3276: LD_EXP 22
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_EXP 22
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: LD_EXP 22
3299: PUSH
3300: LD_INT 2
3302: ARRAY
3303: PPUSH
3304: CALL_OW 297
3308: PUSH
3309: LD_INT 10
3311: GREATER
3312: AND
3313: PUSH
3314: LD_VAR 0 2
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: AND
3325: IFFALSE 3354
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_EXP 22
3336: PUSH
3337: LD_INT 1
3339: ARRAY
3340: PPUSH
3341: LD_EXP 22
3345: PUSH
3346: LD_INT 2
3348: ARRAY
3349: PPUSH
3350: CALL_OW 114
// end ;
3354: GO 3273
3356: POP
3357: POP
// until not defenders ;
3358: LD_EXP 21
3362: NOT
3363: IFFALSE 3256
// end ;
3365: LD_VAR 0 1
3369: RET
// every 0 0$1 do var radar , i ;
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
// begin uc_side := 1 ;
3377: LD_ADDR_OWVAR 20
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// uc_nation := 1 ;
3385: LD_ADDR_OWVAR 21
3389: PUSH
3390: LD_INT 1
3392: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3393: LD_INT 1
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: LD_INT 11
3404: PPUSH
3405: LD_INT 100
3407: PPUSH
3408: CALL 41243 0 5
// radar := CreateVehicle ;
3412: LD_ADDR_VAR 0 1
3416: PUSH
3417: CALL_OW 45
3421: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3434: LD_VAR 0 1
3438: PPUSH
3439: LD_INT 51
3441: PPUSH
3442: LD_INT 45
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: LD_INT 700
3459: PPUSH
3460: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 75
3474: PPUSH
3475: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 350
3486: PPUSH
3487: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 83
3498: PPUSH
3499: LD_INT 87
3501: PPUSH
3502: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 525
3513: PPUSH
3514: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 94
3525: PPUSH
3526: LD_INT 81
3528: PPUSH
3529: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3533: LD_VAR 0 1
3537: PPUSH
3538: LD_INT 350
3540: PPUSH
3541: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3545: LD_VAR 0 1
3549: PPUSH
3550: LD_INT 55
3552: PPUSH
3553: LD_INT 48
3555: PPUSH
3556: CALL_OW 171
// wait ( 1 1$00 ) ;
3560: LD_INT 2100
3562: PPUSH
3563: CALL_OW 67
// until not IsOk ( radar ) ;
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 302
3576: NOT
3577: IFFALSE 3452
// end ;
3579: PPOPN 2
3581: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3582: LD_OWVAR 67
3586: PUSH
3587: LD_INT 1
3589: GREATER
3590: PUSH
3591: LD_EXP 11
3595: AND
3596: IFFALSE 3818
3598: GO 3600
3600: DISABLE
3601: LD_INT 0
3603: PPUSH
// begin enable ;
3604: ENABLE
// uc_side := 1 ;
3605: LD_ADDR_OWVAR 20
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// uc_nation := 1 ;
3613: LD_ADDR_OWVAR 21
3617: PUSH
3618: LD_INT 1
3620: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3621: LD_INT 5
3623: PPUSH
3624: LD_INT 3
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 100
3635: PPUSH
3636: CALL 41243 0 5
// un := CreateVehicle ;
3640: LD_ADDR_VAR 0 1
3644: PUSH
3645: CALL_OW 45
3649: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 3
3657: PPUSH
3658: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3662: LD_VAR 0 1
3666: PPUSH
3667: LD_INT 155
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 0
3675: PPUSH
3676: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3680: LD_VAR 0 1
3684: PPUSH
3685: LD_INT 169
3687: PPUSH
3688: LD_INT 77
3690: PPUSH
3691: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: LD_INT 70
3702: PPUSH
3703: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3707: LD_VAR 0 1
3711: PPUSH
3712: LD_INT 134
3714: PPUSH
3715: LD_INT 62
3717: PPUSH
3718: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_INT 103
3729: PPUSH
3730: LD_INT 42
3732: PPUSH
3733: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3737: LD_VAR 0 1
3741: PPUSH
3742: LD_INT 70
3744: PPUSH
3745: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3749: LD_VAR 0 1
3753: PPUSH
3754: LD_INT 84
3756: PPUSH
3757: LD_INT 2
3759: PPUSH
3760: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3764: LD_INT 35
3766: PPUSH
3767: CALL_OW 67
// if IsDead ( un ) then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 301
3780: IFFALSE 3792
// begin extra_patrol := false ;
3782: LD_ADDR_EXP 11
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// exit ;
3790: GO 3818
// end ; until IsAt ( un , 84 , 2 ) ;
3792: LD_VAR 0 1
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 2
3802: PPUSH
3803: CALL_OW 307
3807: IFFALSE 3764
// RemoveUnit ( un ) ;
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 64
// end ; end_of_file
3818: PPOPN 1
3820: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3821: LD_INT 0
3823: PPUSH
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// uc_side := 4 ;
3831: LD_ADDR_OWVAR 20
3835: PUSH
3836: LD_INT 4
3838: ST_TO_ADDR
// uc_nation := 1 ;
3839: LD_ADDR_OWVAR 21
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3847: LD_ADDR_EXP 38
3851: PUSH
3852: LD_STRING DeltaDoctor
3854: PPUSH
3855: LD_EXP 1
3859: NOT
3860: PPUSH
3861: LD_STRING 10c_
3863: PPUSH
3864: CALL 36403 0 3
3868: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3869: LD_ADDR_EXP 37
3873: PUSH
3874: LD_STRING Joan
3876: PPUSH
3877: LD_EXP 1
3881: NOT
3882: PPUSH
3883: LD_STRING 10c_
3885: PPUSH
3886: CALL 36403 0 3
3890: ST_TO_ADDR
// if Joan then
3891: LD_EXP 37
3895: IFFALSE 3926
// friends := Insert ( friends , friends + 1 , Joan ) ;
3897: LD_ADDR_EXP 4
3901: PUSH
3902: LD_EXP 4
3906: PPUSH
3907: LD_EXP 4
3911: PUSH
3912: LD_INT 1
3914: PLUS
3915: PPUSH
3916: LD_EXP 37
3920: PPUSH
3921: CALL_OW 2
3925: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3926: LD_ADDR_EXP 36
3930: PUSH
3931: LD_STRING Simms
3933: PPUSH
3934: LD_EXP 1
3938: NOT
3939: PPUSH
3940: LD_STRING 10c_
3942: PPUSH
3943: CALL 36403 0 3
3947: ST_TO_ADDR
// if debug then
3948: LD_EXP 1
3952: IFFALSE 3969
// Kikuchi := NewCharacter ( Yamoko ) else
3954: LD_ADDR_EXP 35
3958: PUSH
3959: LD_STRING Yamoko
3961: PPUSH
3962: CALL_OW 25
3966: ST_TO_ADDR
3967: GO 3991
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3969: LD_ADDR_EXP 35
3973: PUSH
3974: LD_STRING Kikuchi
3976: PPUSH
3977: LD_EXP 1
3981: NOT
3982: PPUSH
3983: LD_STRING 11_
3985: PPUSH
3986: CALL 36403 0 3
3990: ST_TO_ADDR
// if Kikuchi then
3991: LD_EXP 35
3995: IFFALSE 4026
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3997: LD_ADDR_EXP 4
4001: PUSH
4002: LD_EXP 4
4006: PPUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 1
4014: PLUS
4015: PPUSH
4016: LD_EXP 35
4020: PPUSH
4021: CALL_OW 2
4025: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
4026: LD_ADDR_EXP 34
4030: PUSH
4031: LD_STRING Frank
4033: PPUSH
4034: LD_EXP 1
4038: NOT
4039: PPUSH
4040: LD_STRING 11_
4042: PPUSH
4043: CALL 36403 0 3
4047: ST_TO_ADDR
// if Frank then
4048: LD_EXP 34
4052: IFFALSE 4083
// friends := Insert ( friends , friends + 1 , Frank ) ;
4054: LD_ADDR_EXP 4
4058: PUSH
4059: LD_EXP 4
4063: PPUSH
4064: LD_EXP 4
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: PPUSH
4073: LD_EXP 34
4077: PPUSH
4078: CALL_OW 2
4082: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4083: LD_ADDR_EXP 33
4087: PUSH
4088: LD_STRING Gary
4090: PPUSH
4091: LD_EXP 1
4095: NOT
4096: PPUSH
4097: LD_STRING 11_
4099: PPUSH
4100: CALL 36403 0 3
4104: ST_TO_ADDR
// if Gary then
4105: LD_EXP 33
4109: IFFALSE 4140
// friends := Insert ( friends , friends + 1 , Gary ) ;
4111: LD_ADDR_EXP 4
4115: PUSH
4116: LD_EXP 4
4120: PPUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 1
4128: PLUS
4129: PPUSH
4130: LD_EXP 33
4134: PPUSH
4135: CALL_OW 2
4139: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4140: LD_ADDR_EXP 32
4144: PUSH
4145: LD_STRING Cornell
4147: PPUSH
4148: LD_EXP 1
4152: NOT
4153: PPUSH
4154: LD_STRING 11_
4156: PPUSH
4157: CALL 36403 0 3
4161: ST_TO_ADDR
// if Cornel then
4162: LD_EXP 32
4166: IFFALSE 4197
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4168: LD_ADDR_EXP 4
4172: PUSH
4173: LD_EXP 4
4177: PPUSH
4178: LD_EXP 4
4182: PUSH
4183: LD_INT 1
4185: PLUS
4186: PPUSH
4187: LD_EXP 32
4191: PPUSH
4192: CALL_OW 2
4196: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4197: LD_ADDR_EXP 31
4201: PUSH
4202: LD_STRING Houten
4204: PPUSH
4205: LD_EXP 1
4209: NOT
4210: PPUSH
4211: LD_STRING 11_
4213: PPUSH
4214: CALL 36403 0 3
4218: ST_TO_ADDR
// if Houten then
4219: LD_EXP 31
4223: IFFALSE 4254
// friends := Insert ( friends , friends + 1 , Houten ) ;
4225: LD_ADDR_EXP 4
4229: PUSH
4230: LD_EXP 4
4234: PPUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 1
4242: PLUS
4243: PPUSH
4244: LD_EXP 31
4248: PPUSH
4249: CALL_OW 2
4253: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4254: LD_ADDR_EXP 30
4258: PUSH
4259: LD_STRING Gladstone
4261: PPUSH
4262: LD_EXP 1
4266: NOT
4267: PPUSH
4268: LD_STRING 11_
4270: PPUSH
4271: CALL 36403 0 3
4275: ST_TO_ADDR
// if Gladstone then
4276: LD_EXP 30
4280: IFFALSE 4311
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4282: LD_ADDR_EXP 4
4286: PUSH
4287: LD_EXP 4
4291: PPUSH
4292: LD_EXP 4
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: PPUSH
4301: LD_EXP 30
4305: PPUSH
4306: CALL_OW 2
4310: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4311: LD_ADDR_EXP 24
4315: PUSH
4316: LD_STRING Lisa
4318: PPUSH
4319: LD_EXP 1
4323: NOT
4324: PPUSH
4325: LD_STRING 11_
4327: PPUSH
4328: CALL 36403 0 3
4332: ST_TO_ADDR
// if Lisa then
4333: LD_EXP 24
4337: IFFALSE 4362
// friends := Insert ( friends , 1 , Lisa ) ;
4339: LD_ADDR_EXP 4
4343: PUSH
4344: LD_EXP 4
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: LD_EXP 24
4356: PPUSH
4357: CALL_OW 2
4361: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4362: LD_ADDR_EXP 25
4366: PUSH
4367: LD_STRING Donaldson
4369: PPUSH
4370: LD_EXP 1
4374: NOT
4375: PPUSH
4376: LD_STRING 11_
4378: PPUSH
4379: CALL 36403 0 3
4383: ST_TO_ADDR
// if Donaldson then
4384: LD_EXP 25
4388: IFFALSE 4419
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4390: LD_ADDR_EXP 4
4394: PUSH
4395: LD_EXP 4
4399: PPUSH
4400: LD_EXP 4
4404: PUSH
4405: LD_INT 1
4407: PLUS
4408: PPUSH
4409: LD_EXP 25
4413: PPUSH
4414: CALL_OW 2
4418: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4419: LD_ADDR_EXP 26
4423: PUSH
4424: LD_STRING Bobby
4426: PPUSH
4427: LD_EXP 1
4431: NOT
4432: PPUSH
4433: LD_STRING 11_
4435: PPUSH
4436: CALL 36403 0 3
4440: ST_TO_ADDR
// if Bobby then
4441: LD_EXP 26
4445: IFFALSE 4476
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4447: LD_ADDR_EXP 4
4451: PUSH
4452: LD_EXP 4
4456: PPUSH
4457: LD_EXP 4
4461: PUSH
4462: LD_INT 1
4464: PLUS
4465: PPUSH
4466: LD_EXP 26
4470: PPUSH
4471: CALL_OW 2
4475: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4476: LD_ADDR_EXP 27
4480: PUSH
4481: LD_STRING Cyrus
4483: PPUSH
4484: LD_EXP 1
4488: NOT
4489: PPUSH
4490: LD_STRING 11_
4492: PPUSH
4493: CALL 36403 0 3
4497: ST_TO_ADDR
// if Cyrus then
4498: LD_EXP 27
4502: IFFALSE 4533
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4504: LD_ADDR_EXP 4
4508: PUSH
4509: LD_EXP 4
4513: PPUSH
4514: LD_EXP 4
4518: PUSH
4519: LD_INT 1
4521: PLUS
4522: PPUSH
4523: LD_EXP 27
4527: PPUSH
4528: CALL_OW 2
4532: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4533: LD_ADDR_EXP 28
4537: PUSH
4538: LD_STRING Denis
4540: PPUSH
4541: LD_EXP 1
4545: NOT
4546: PPUSH
4547: LD_STRING 11_
4549: PPUSH
4550: CALL 36403 0 3
4554: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4555: LD_ADDR_EXP 29
4559: PUSH
4560: LD_STRING Brown
4562: PPUSH
4563: LD_EXP 1
4567: NOT
4568: PPUSH
4569: LD_STRING 11_
4571: PPUSH
4572: CALL 36403 0 3
4576: ST_TO_ADDR
// if Brown then
4577: LD_EXP 29
4581: IFFALSE 4612
// friends := Insert ( friends , friends + 1 , Brown ) ;
4583: LD_ADDR_EXP 4
4587: PUSH
4588: LD_EXP 4
4592: PPUSH
4593: LD_EXP 4
4597: PUSH
4598: LD_INT 1
4600: PLUS
4601: PPUSH
4602: LD_EXP 29
4606: PPUSH
4607: CALL_OW 2
4611: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4612: LD_ADDR_EXP 39
4616: PUSH
4617: LD_STRING Mike
4619: PPUSH
4620: LD_EXP 1
4624: NOT
4625: PPUSH
4626: LD_STRING 10c_
4628: PPUSH
4629: CALL 36403 0 3
4633: ST_TO_ADDR
// if Mike then
4634: LD_EXP 39
4638: IFFALSE 4679
// begin SetClass ( Mike , class_apeman_engineer ) ;
4640: LD_EXP 39
4644: PPUSH
4645: LD_INT 16
4647: PPUSH
4648: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4652: LD_EXP 39
4656: PPUSH
4657: LD_INT 180
4659: PPUSH
4660: LD_INT 87
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL_OW 48
// ComHold ( Mike ) ;
4670: LD_EXP 39
4674: PPUSH
4675: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4679: LD_ADDR_EXP 4
4683: PUSH
4684: LD_EXP 4
4688: PUSH
4689: LD_STRING 11c_others
4691: PPUSH
4692: CALL_OW 31
4696: ADD
4697: PUSH
4698: LD_STRING 11_others
4700: PPUSH
4701: CALL_OW 31
4705: ADD
4706: ST_TO_ADDR
// if friends < 18 then
4707: LD_EXP 4
4711: PUSH
4712: LD_INT 18
4714: LESS
4715: IFFALSE 4787
// for i = 1 to 18 do
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: DOUBLE
4723: LD_INT 1
4725: DEC
4726: ST_TO_ADDR
4727: LD_INT 18
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4785
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4733: LD_INT 0
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: LD_INT 4
4741: PPUSH
4742: CALL_OW 12
4746: PPUSH
4747: LD_INT 7
4749: PPUSH
4750: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4754: LD_ADDR_EXP 4
4758: PUSH
4759: LD_EXP 4
4763: PPUSH
4764: LD_EXP 4
4768: PUSH
4769: LD_INT 1
4771: PLUS
4772: PPUSH
4773: CALL_OW 44
4777: PPUSH
4778: CALL_OW 2
4782: ST_TO_ADDR
// end ;
4783: GO 4730
4785: POP
4786: POP
// for i in friends do
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: LD_EXP 4
4796: PUSH
4797: FOR_IN
4798: IFFALSE 4871
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4800: LD_VAR 0 2
4804: PPUSH
4805: CALL_OW 248
4809: PUSH
4810: LD_INT 1
4812: EQUAL
4813: PUSH
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 259
4826: PUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 259
4839: GREATEREQUAL
4840: AND
4841: IFFALSE 4857
// SetClass ( i , class_soldier ) else
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 336
4855: GO 4869
// SetClass ( i , class_scientistic ) ;
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: CALL_OW 336
4869: GO 4797
4871: POP
4872: POP
// if Frank then
4873: LD_EXP 34
4877: IFFALSE 4891
// SetClass ( Frank , class_sniper ) ;
4879: LD_EXP 34
4883: PPUSH
4884: LD_INT 5
4886: PPUSH
4887: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4891: LD_EXP 37
4895: PUSH
4896: LD_EXP 28
4900: PUSH
4901: LD_EXP 38
4905: PUSH
4906: LD_EXP 36
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ [ class_soldier , 3 ] , [ class_scientistic , 2 , 5 ] , [ class_sniper , 0 , 2 ] ] ) ;
4924: LD_ADDR_EXP 3
4928: PUSH
4929: LD_STRING 
4931: PPUSH
4932: LD_INT 7
4934: PPUSH
4935: LD_INT 7
4937: PPUSH
4938: LD_INT -6
4940: PUSH
4941: LD_EXP 15
4945: PUSH
4946: LD_EXP 16
4950: PUSH
4951: LD_EXP 36
4955: PUSH
4956: LD_EXP 28
4960: PUSH
4961: LD_EXP 38
4965: PUSH
4966: LD_INT -2
4968: PUSH
4969: LD_INT -3
4971: PUSH
4972: LD_INT -5
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PUSH
4986: LD_EXP 4
4990: ADD
4991: PPUSH
4992: LD_INT 1
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 4
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 5
5018: PUSH
5019: LD_INT 0
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 42
5039: ST_TO_ADDR
// if Simms then
5040: LD_EXP 36
5044: IFFALSE 5062
// selected := selected ^ Simms ;
5046: LD_ADDR_EXP 3
5050: PUSH
5051: LD_EXP 3
5055: PUSH
5056: LD_EXP 36
5060: ADD
5061: ST_TO_ADDR
// if Denis then
5062: LD_EXP 28
5066: IFFALSE 5084
// selected := selected ^ Denis ;
5068: LD_ADDR_EXP 3
5072: PUSH
5073: LD_EXP 3
5077: PUSH
5078: LD_EXP 28
5082: ADD
5083: ST_TO_ADDR
// if DeltaDoctor then
5084: LD_EXP 38
5088: IFFALSE 5106
// selected := selected ^ DeltaDoctor ;
5090: LD_ADDR_EXP 3
5094: PUSH
5095: LD_EXP 3
5099: PUSH
5100: LD_EXP 38
5104: ADD
5105: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5106: LD_EXP 10
5110: PUSH
5111: LD_INT 1
5113: EQUAL
5114: PUSH
5115: LD_EXP 25
5119: AND
5120: IFFALSE 5132
// gammaCommander := Donaldson ;
5122: LD_ADDR_VAR 0 8
5126: PUSH
5127: LD_EXP 25
5131: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5132: LD_EXP 10
5136: PUSH
5137: LD_INT 2
5139: EQUAL
5140: PUSH
5141: LD_EXP 29
5145: AND
5146: IFFALSE 5158
// gammaCommander := Brown ;
5148: LD_ADDR_VAR 0 8
5152: PUSH
5153: LD_EXP 29
5157: ST_TO_ADDR
// friends := friends diff selected ;
5158: LD_ADDR_EXP 4
5162: PUSH
5163: LD_EXP 4
5167: PUSH
5168: LD_EXP 3
5172: DIFF
5173: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5174: LD_ADDR_EXP 4
5178: PUSH
5179: LD_EXP 4
5183: PUSH
5184: LD_VAR 0 8
5188: DIFF
5189: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5190: LD_ADDR_VAR 0 4
5194: PUSH
5195: LD_INT 111
5197: PUSH
5198: LD_INT 137
5200: PUSH
5201: LD_INT 51
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_INT 147
5211: PUSH
5212: LD_INT 129
5214: PUSH
5215: LD_INT 25
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5227: LD_ADDR_VAR 0 5
5231: PUSH
5232: LD_INT 5
5234: PUSH
5235: LD_INT 6
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: LD_INT 17
5246: PUSH
5247: LD_INT 18
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: ST_TO_ADDR
// for i in buildings do
5258: LD_ADDR_VAR 0 2
5262: PUSH
5263: LD_VAR 0 4
5267: PUSH
5268: FOR_IN
5269: IFFALSE 5285
// SetSide ( i , 4 ) ;
5271: LD_VAR 0 2
5275: PPUSH
5276: LD_INT 4
5278: PPUSH
5279: CALL_OW 235
5283: GO 5268
5285: POP
5286: POP
// for i in selected union gammaCommander do
5287: LD_ADDR_VAR 0 2
5291: PUSH
5292: LD_EXP 3
5296: PUSH
5297: LD_VAR 0 8
5301: UNION
5302: PUSH
5303: FOR_IN
5304: IFFALSE 5644
// begin if GetClass ( i ) in [ 1 , 5 ] then
5306: LD_VAR 0 2
5310: PPUSH
5311: CALL_OW 257
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: IN
5326: IFFALSE 5486
// begin if buildings [ 1 ] then
5328: LD_VAR 0 4
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: IFFALSE 5397
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_VAR 0 4
5347: PUSH
5348: LD_INT 1
5350: ARRAY
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PPUSH
5356: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5360: LD_ADDR_VAR 0 4
5364: PUSH
5365: LD_VAR 0 4
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: LD_VAR 0 4
5377: PUSH
5378: LD_INT 1
5380: ARRAY
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 3
5389: PPUSH
5390: CALL_OW 1
5394: ST_TO_ADDR
// end else
5395: GO 5484
// begin if not areas then
5397: LD_VAR 0 5
5401: NOT
5402: IFFALSE 5436
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_INT 87
5411: PPUSH
5412: LD_INT 68
5414: PPUSH
5415: LD_INT 8
5417: PPUSH
5418: LD_INT 0
5420: PPUSH
5421: CALL_OW 50
// ComHold ( i ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 140
// end else
5434: GO 5484
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// ComHold ( i ) ;
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5466: LD_ADDR_VAR 0 5
5470: PUSH
5471: LD_VAR 0 5
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: CALL_OW 3
5483: ST_TO_ADDR
// end ; end ; end else
5484: GO 5642
// begin if buildings [ 2 ] then
5486: LD_VAR 0 4
5490: PUSH
5491: LD_INT 2
5493: ARRAY
5494: IFFALSE 5555
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5496: LD_VAR 0 2
5500: PPUSH
5501: LD_VAR 0 4
5505: PUSH
5506: LD_INT 2
5508: ARRAY
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5518: LD_ADDR_VAR 0 4
5522: PUSH
5523: LD_VAR 0 4
5527: PPUSH
5528: LD_INT 2
5530: PPUSH
5531: LD_VAR 0 4
5535: PUSH
5536: LD_INT 2
5538: ARRAY
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: CALL_OW 3
5547: PPUSH
5548: CALL_OW 1
5552: ST_TO_ADDR
// end else
5553: GO 5642
// begin if not areas then
5555: LD_VAR 0 5
5559: NOT
5560: IFFALSE 5594
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 87
5569: PPUSH
5570: LD_INT 68
5572: PPUSH
5573: LD_INT 8
5575: PPUSH
5576: LD_INT 0
5578: PPUSH
5579: CALL_OW 50
// ComHold ( i ) ;
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 140
// end else
5592: GO 5642
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 5
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_INT 0
5610: PPUSH
5611: CALL_OW 49
// ComHold ( i ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: LD_INT 1
5636: PPUSH
5637: CALL_OW 3
5641: ST_TO_ADDR
// end ; end ; end ; end ;
5642: GO 5303
5644: POP
5645: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5646: LD_ADDR_VAR 0 6
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 30
5663: PUSH
5664: LD_INT 32
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: CALL_OW 69
5679: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5680: LD_ADDR_VAR 0 2
5684: PUSH
5685: DOUBLE
5686: LD_VAR 0 6
5690: PUSH
5691: LD_EXP 4
5695: MINUS
5696: INC
5697: ST_TO_ADDR
5698: LD_INT 1
5700: PUSH
5701: FOR_DOWNTO
5702: IFFALSE 5769
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5704: LD_INT 0
5706: PPUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_INT 7
5712: PUSH
5713: LD_INT 8
5715: PUSH
5716: LD_INT 9
5718: PUSH
5719: LD_INT 10
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_OWVAR 67
5732: ARRAY
5733: PPUSH
5734: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5738: LD_ADDR_EXP 4
5742: PUSH
5743: LD_EXP 4
5747: PPUSH
5748: LD_EXP 4
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: PPUSH
5757: CALL_OW 44
5761: PPUSH
5762: CALL_OW 2
5766: ST_TO_ADDR
// end ;
5767: GO 5701
5769: POP
5770: POP
// if friends then
5771: LD_EXP 4
5775: IFFALSE 5891
// begin tmp := friends ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: LD_EXP 4
5786: ST_TO_ADDR
// for i = 1 to bunkers do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: DOUBLE
5793: LD_INT 1
5795: DEC
5796: ST_TO_ADDR
5797: LD_VAR 0 6
5801: PUSH
5802: FOR_TO
5803: IFFALSE 5889
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5805: LD_VAR 0 3
5809: PUSH
5810: LD_VAR 0 3
5814: ARRAY
5815: PPUSH
5816: LD_INT 1
5818: PPUSH
5819: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 3
5832: ARRAY
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 3
5850: ARRAY
5851: PPUSH
5852: LD_VAR 0 6
5856: PUSH
5857: LD_VAR 0 2
5861: ARRAY
5862: PPUSH
5863: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_VAR 0 3
5876: PPUSH
5877: LD_VAR 0 3
5881: PPUSH
5882: CALL_OW 3
5886: ST_TO_ADDR
// end ;
5887: GO 5802
5889: POP
5890: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5891: LD_ADDR_VAR 0 5
5895: PUSH
5896: LD_VAR 0 5
5900: PUSH
5901: LD_INT 9
5903: PUSH
5904: LD_INT 10
5906: PUSH
5907: LD_INT 11
5909: PUSH
5910: LD_INT 12
5912: PUSH
5913: LD_INT 13
5915: PUSH
5916: LD_INT 14
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 26
5927: PUSH
5928: LD_INT 27
5930: PUSH
5931: LD_INT 28
5933: PUSH
5934: LD_INT 29
5936: PUSH
5937: LD_INT 30
5939: PUSH
5940: LD_INT 31
5942: PUSH
5943: LD_INT 32
5945: PUSH
5946: LD_INT 33
5948: PUSH
5949: LD_INT 34
5951: PUSH
5952: LD_INT 35
5954: PUSH
5955: LD_INT 36
5957: PUSH
5958: LD_INT 37
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: UNION
5983: ST_TO_ADDR
// for i in friends do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_EXP 4
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6278
// begin SetTag ( i , 2 ) ;
5997: LD_VAR 0 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_sniper ] then
6009: LD_VAR 0 2
6013: PPUSH
6014: CALL_OW 257
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: LD_INT 5
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: IN
6029: NOT
6030: IFFALSE 6044
// SetClass ( i , 1 ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6044: LD_VAR 0 2
6048: PPUSH
6049: CALL_OW 257
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 5
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: IN
6064: PUSH
6065: LD_VAR 0 4
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: AND
6074: IFFALSE 6135
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_VAR 0 4
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PUSH
6090: LD_INT 1
6092: ARRAY
6093: PPUSH
6094: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6098: LD_ADDR_VAR 0 4
6102: PUSH
6103: LD_VAR 0 4
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: LD_VAR 0 4
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 3
6127: PPUSH
6128: CALL_OW 1
6132: ST_TO_ADDR
// continue ;
6133: GO 5994
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6135: LD_VAR 0 2
6139: PPUSH
6140: CALL_OW 257
6144: PUSH
6145: LD_INT 4
6147: EQUAL
6148: PUSH
6149: LD_VAR 0 4
6153: PUSH
6154: LD_INT 2
6156: ARRAY
6157: AND
6158: IFFALSE 6219
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_VAR 0 4
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: PPUSH
6178: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6182: LD_ADDR_VAR 0 4
6186: PUSH
6187: LD_VAR 0 4
6191: PPUSH
6192: LD_INT 2
6194: PPUSH
6195: LD_VAR 0 4
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: LD_INT 1
6206: PPUSH
6207: CALL_OW 3
6211: PPUSH
6212: CALL_OW 1
6216: ST_TO_ADDR
// continue ;
6217: GO 5994
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6219: LD_VAR 0 2
6223: PPUSH
6224: LD_VAR 0 5
6228: PUSH
6229: LD_INT 1
6231: ARRAY
6232: PPUSH
6233: LD_INT 0
6235: PPUSH
6236: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6240: LD_ADDR_VAR 0 5
6244: PUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 3
6257: ST_TO_ADDR
// ComHold ( i ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: CALL_OW 140
// if not areas then
6267: LD_VAR 0 5
6271: NOT
6272: IFFALSE 6276
// break ;
6274: GO 6278
// end ;
6276: GO 5994
6278: POP
6279: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6280: LD_EXP 4
6284: PPUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 52
6290: PUSH
6291: EMPTY
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 72
6302: IFFALSE 6369
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_EXP 4
6313: PPUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 52
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PPUSH
6327: CALL_OW 72
6331: PUSH
6332: FOR_IN
6333: IFFALSE 6367
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 65
6342: PPUSH
6343: LD_INT 58
6345: PPUSH
6346: LD_INT 7
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ComHold ( i ) ;
6356: LD_VAR 0 2
6360: PPUSH
6361: CALL_OW 140
// end ;
6365: GO 6332
6367: POP
6368: POP
// if Frank then
6369: LD_EXP 34
6373: IFFALSE 6387
// SetClass ( Frank , class_sniper ) ;
6375: LD_EXP 34
6379: PPUSH
6380: LD_INT 5
6382: PPUSH
6383: CALL_OW 336
// end ; end_of_file
6387: LD_VAR 0 1
6391: RET
// export function CanSayRand ( side ) ; begin
6392: LD_INT 0
6394: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: LD_INT 52
6402: PUSH
6403: EMPTY
6404: LIST
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_VAR 0 1
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 2
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 25
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 69
6477: PUSH
6478: LD_EXP 15
6482: PUSH
6483: LD_EXP 34
6487: PUSH
6488: LD_EXP 24
6492: PUSH
6493: LD_EXP 25
6497: PUSH
6498: LD_EXP 26
6502: PUSH
6503: LD_EXP 27
6507: PUSH
6508: LD_EXP 28
6512: PUSH
6513: LD_EXP 29
6517: PUSH
6518: LD_EXP 30
6522: PUSH
6523: LD_EXP 31
6527: PUSH
6528: LD_EXP 17
6532: PUSH
6533: LD_EXP 32
6537: PUSH
6538: LD_EXP 33
6542: PUSH
6543: LD_EXP 35
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: DIFF
6564: ST_TO_ADDR
// end ;
6565: LD_VAR 0 2
6569: RET
// export function SayRand ( sex , dial ) ; begin
6570: LD_INT 0
6572: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 52
6580: PUSH
6581: EMPTY
6582: LIST
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 1
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 26
6596: PUSH
6597: LD_VAR 0 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 25
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 25
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: PUSH
6667: LD_EXP 15
6671: PUSH
6672: LD_EXP 34
6676: PUSH
6677: LD_EXP 24
6681: PUSH
6682: LD_EXP 25
6686: PUSH
6687: LD_EXP 26
6691: PUSH
6692: LD_EXP 27
6696: PUSH
6697: LD_EXP 28
6701: PUSH
6702: LD_EXP 29
6706: PUSH
6707: LD_EXP 30
6711: PUSH
6712: LD_EXP 31
6716: PUSH
6717: LD_EXP 17
6721: PUSH
6722: LD_EXP 32
6726: PUSH
6727: LD_EXP 33
6731: PUSH
6732: LD_EXP 35
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: DIFF
6753: ST_TO_ADDR
// if not result then
6754: LD_VAR 0 3
6758: NOT
6759: IFFALSE 6763
// exit ;
6761: GO 6791
// result := result [ 1 ] ;
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_VAR 0 3
6772: PUSH
6773: LD_INT 1
6775: ARRAY
6776: ST_TO_ADDR
// Say ( result , dial ) ;
6777: LD_VAR 0 3
6781: PPUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 88
// end ;
6791: LD_VAR 0 3
6795: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6796: LD_INT 0
6798: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6799: LD_ADDR_VAR 0 4
6803: PUSH
6804: LD_INT 22
6806: PUSH
6807: LD_INT 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 26
6816: PUSH
6817: LD_VAR 0 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 25
6831: PUSH
6832: LD_INT 1
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 25
6851: PUSH
6852: LD_INT 3
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PUSH
6886: LD_EXP 15
6890: PUSH
6891: LD_EXP 34
6895: PUSH
6896: LD_EXP 24
6900: PUSH
6901: LD_EXP 25
6905: PUSH
6906: LD_EXP 26
6910: PUSH
6911: LD_EXP 27
6915: PUSH
6916: LD_EXP 28
6920: PUSH
6921: LD_EXP 29
6925: PUSH
6926: LD_EXP 30
6930: PUSH
6931: LD_EXP 31
6935: PUSH
6936: LD_EXP 17
6940: PUSH
6941: LD_EXP 32
6945: PUSH
6946: LD_EXP 33
6950: PUSH
6951: LD_EXP 35
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_VAR 0 3
6976: ADD
6977: DIFF
6978: ST_TO_ADDR
// if not result then
6979: LD_VAR 0 4
6983: NOT
6984: IFFALSE 6988
// exit ;
6986: GO 7016
// result := result [ 1 ] ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 4
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: ST_TO_ADDR
// Say ( result , dial ) ;
7002: LD_VAR 0 4
7006: PPUSH
7007: LD_VAR 0 2
7011: PPUSH
7012: CALL_OW 88
// end ;
7016: LD_VAR 0 4
7020: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
7030: PPUSH
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7038: LD_VAR 0 1
7042: NOT
7043: PUSH
7044: LD_VAR 0 2
7048: NOT
7049: OR
7050: PUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 247
7060: PUSH
7061: LD_INT 3
7063: EQUAL
7064: OR
7065: IFFALSE 7069
// exit ;
7067: GO 8608
// for i = path downto 1 do
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: DOUBLE
7075: LD_VAR 0 2
7079: INC
7080: ST_TO_ADDR
7081: LD_INT 1
7083: PUSH
7084: FOR_DOWNTO
7085: IFFALSE 7146
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7087: LD_VAR 0 2
7091: PUSH
7092: LD_VAR 0 5
7096: ARRAY
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 2
7106: PUSH
7107: LD_VAR 0 5
7111: ARRAY
7112: PUSH
7113: LD_INT 2
7115: ARRAY
7116: PPUSH
7117: CALL_OW 488
7121: NOT
7122: IFFALSE 7144
// path = Delete ( path , i ) ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_VAR 0 2
7133: PPUSH
7134: LD_VAR 0 5
7138: PPUSH
7139: CALL_OW 3
7143: ST_TO_ADDR
// end ;
7144: GO 7084
7146: POP
7147: POP
// if not path then
7148: LD_VAR 0 2
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 8608
// tmp_path := [ ] ;
7157: LD_ADDR_VAR 0 11
7161: PUSH
7162: EMPTY
7163: ST_TO_ADDR
// if flags then
7164: LD_VAR 0 3
7168: IFFALSE 7242
// begin if flags [ 1 ] then
7170: LD_VAR 0 3
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: IFFALSE 7194
// safe_place = flags [ 1 ] ;
7180: LD_ADDR_VAR 0 16
7184: PUSH
7185: LD_VAR 0 3
7189: PUSH
7190: LD_INT 1
7192: ARRAY
7193: ST_TO_ADDR
// if flags [ 2 ] then
7194: LD_VAR 0 3
7198: PUSH
7199: LD_INT 2
7201: ARRAY
7202: IFFALSE 7218
// spot_dist = flags [ 2 ] ;
7204: LD_ADDR_VAR 0 15
7208: PUSH
7209: LD_VAR 0 3
7213: PUSH
7214: LD_INT 2
7216: ARRAY
7217: ST_TO_ADDR
// if flags [ 3 ] then
7218: LD_VAR 0 3
7222: PUSH
7223: LD_INT 3
7225: ARRAY
7226: IFFALSE 7242
// chase_range = flags [ 3 ] ;
7228: LD_ADDR_VAR 0 17
7232: PUSH
7233: LD_VAR 0 3
7237: PUSH
7238: LD_INT 3
7240: ARRAY
7241: ST_TO_ADDR
// end ; if not chase_range then
7242: LD_VAR 0 17
7246: NOT
7247: IFFALSE 7257
// chase_range = 8 ;
7249: LD_ADDR_VAR 0 17
7253: PUSH
7254: LD_INT 8
7256: ST_TO_ADDR
// if not spot_dist then
7257: LD_VAR 0 15
7261: NOT
7262: IFFALSE 7272
// spot_dist := 8 ;
7264: LD_ADDR_VAR 0 15
7268: PUSH
7269: LD_INT 8
7271: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7272: LD_ADDR_VAR 0 18
7276: PUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 247
7286: PUSH
7287: LD_INT 2
7289: EQUAL
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 262
7300: PUSH
7301: LD_INT 3
7303: NONEQUAL
7304: AND
7305: ST_TO_ADDR
// status = 1 ;
7306: LD_ADDR_VAR 0 12
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7314: LD_ADDR_VAR 0 11
7318: PUSH
7319: LD_INT 1
7321: PUSH
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7335: LD_INT 35
7337: PPUSH
7338: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7342: LD_VAR 0 18
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 261
7356: PUSH
7357: LD_INT 20
7359: LESS
7360: AND
7361: IFFALSE 7554
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7363: LD_ADDR_VAR 0 10
7367: PUSH
7368: LD_INT 22
7370: PUSH
7371: LD_VAR 0 1
7375: PPUSH
7376: CALL_OW 255
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 30
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 30
7400: PUSH
7401: LD_INT 1
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 30
7410: PUSH
7411: LD_INT 29
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 69
7443: ST_TO_ADDR
// if not station then
7444: LD_VAR 0 10
7448: NOT
7449: IFFALSE 7465
// begin SetFuel ( unit , 40 ) ;
7451: LD_VAR 0 1
7455: PPUSH
7456: LD_INT 40
7458: PPUSH
7459: CALL_OW 240
// continue ;
7463: GO 7335
// end ; status := 6 ;
7465: LD_ADDR_VAR 0 12
7469: PUSH
7470: LD_INT 6
7472: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 10
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 74
7492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7493: LD_INT 35
7495: PPUSH
7496: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7500: LD_VAR 0 1
7504: PPUSH
7505: LD_VAR 0 10
7509: PPUSH
7510: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 10
7523: PPUSH
7524: CALL_OW 296
7528: PUSH
7529: LD_INT 6
7531: LESS
7532: IFFALSE 7493
// SetFuel ( unit , 100 ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: LD_INT 100
7541: PPUSH
7542: CALL_OW 240
// status := 5 ;
7546: LD_ADDR_VAR 0 12
7550: PUSH
7551: LD_INT 5
7553: ST_TO_ADDR
// end ; if status = 1 then
7554: LD_VAR 0 12
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7938
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7564: LD_ADDR_VAR 0 13
7568: PUSH
7569: LD_INT 81
7571: PUSH
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 255
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 3
7588: PUSH
7589: LD_INT 21
7591: PUSH
7592: LD_INT 3
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 91
7605: PUSH
7606: LD_VAR 0 1
7610: PUSH
7611: LD_VAR 0 15
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 101
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 69
7641: ST_TO_ADDR
// for i in enemy do
7642: LD_ADDR_VAR 0 5
7646: PUSH
7647: LD_VAR 0 13
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7684
// if IsInvisible ( i ) then
7655: LD_VAR 0 5
7659: PPUSH
7660: CALL_OW 571
7664: IFFALSE 7682
// enemy := enemy diff i ;
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 13
7675: PUSH
7676: LD_VAR 0 5
7680: DIFF
7681: ST_TO_ADDR
7682: GO 7652
7684: POP
7685: POP
// if enemy then
7686: LD_VAR 0 13
7690: IFFALSE 7740
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 250
7706: PPUSH
7707: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7711: LD_VAR 0 1
7715: PPUSH
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 251
7725: PPUSH
7726: CALL_OW 232
// status = 2 ;
7730: LD_ADDR_VAR 0 12
7734: PUSH
7735: LD_INT 2
7737: ST_TO_ADDR
// end else
7738: GO 7938
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_VAR 0 11
7749: PUSH
7750: LD_INT 2
7752: ARRAY
7753: PUSH
7754: LD_INT 1
7756: ARRAY
7757: PPUSH
7758: LD_VAR 0 11
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PPUSH
7771: CALL_OW 307
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: CALL_OW 314
7785: NOT
7786: OR
7787: IFFALSE 7938
// begin wait ( 0 0$2 ) ;
7789: LD_INT 70
7791: PPUSH
7792: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7796: LD_VAR 0 11
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PUSH
7805: LD_INT 1
7807: PLUS
7808: PUSH
7809: LD_VAR 0 2
7813: GREATER
7814: IFFALSE 7839
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7816: LD_ADDR_VAR 0 11
7820: PUSH
7821: LD_VAR 0 11
7825: PPUSH
7826: LD_INT 1
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: CALL_OW 1
7836: ST_TO_ADDR
7837: GO 7870
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7839: LD_ADDR_VAR 0 11
7843: PUSH
7844: LD_VAR 0 11
7848: PPUSH
7849: LD_INT 1
7851: PPUSH
7852: LD_VAR 0 11
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: PUSH
7861: LD_INT 1
7863: PLUS
7864: PPUSH
7865: CALL_OW 1
7869: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7870: LD_ADDR_VAR 0 11
7874: PUSH
7875: LD_VAR 0 11
7879: PPUSH
7880: LD_INT 2
7882: PPUSH
7883: LD_VAR 0 2
7887: PUSH
7888: LD_VAR 0 11
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: ARRAY
7897: PPUSH
7898: CALL_OW 1
7902: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7903: LD_VAR 0 1
7907: PPUSH
7908: LD_VAR 0 11
7912: PUSH
7913: LD_INT 2
7915: ARRAY
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 11
7925: PUSH
7926: LD_INT 2
7928: ARRAY
7929: PUSH
7930: LD_INT 2
7932: ARRAY
7933: PPUSH
7934: CALL_OW 114
// end ; end ; end ; if status = 2 then
7938: LD_VAR 0 12
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 8167
// begin if GetLives ( unit ) < 650 and safe_place then
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 256
7957: PUSH
7958: LD_INT 650
7960: LESS
7961: PUSH
7962: LD_VAR 0 16
7966: AND
7967: IFFALSE 7979
// begin status = 3 ;
7969: LD_ADDR_VAR 0 12
7973: PUSH
7974: LD_INT 3
7976: ST_TO_ADDR
// continue ;
7977: GO 7335
// end ; x := GetRememberedX ( unit ) ;
7979: LD_ADDR_VAR 0 6
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 252
7993: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 253
8008: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8009: LD_ADDR_VAR 0 13
8013: PUSH
8014: LD_INT 81
8016: PUSH
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 255
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 92
8033: PUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_VAR 0 7
8043: PUSH
8044: LD_VAR 0 15
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 101
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: ST_TO_ADDR
// if enemy then
8075: LD_VAR 0 13
8079: IFFALSE 8150
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8081: LD_ADDR_VAR 0 14
8085: PUSH
8086: LD_VAR 0 13
8090: PPUSH
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 74
8100: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8101: LD_VAR 0 14
8105: PPUSH
8106: LD_VAR 0 6
8110: PPUSH
8111: LD_VAR 0 7
8115: PPUSH
8116: CALL_OW 297
8120: PUSH
8121: LD_VAR 0 15
8125: PUSH
8126: LD_VAR 0 17
8130: PLUS
8131: LESS
8132: IFFALSE 8148
// ComAttackUnit ( unit , e ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: LD_VAR 0 14
8143: PPUSH
8144: CALL_OW 115
// end else
8148: GO 8167
// begin ComStop ( unit ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: CALL_OW 141
// status = 5 ;
8159: LD_ADDR_VAR 0 12
8163: PUSH
8164: LD_INT 5
8166: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8167: LD_VAR 0 12
8171: PUSH
8172: LD_INT 3
8174: EQUAL
8175: PUSH
8176: LD_VAR 0 16
8180: AND
8181: IFFALSE 8267
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8183: LD_VAR 0 1
8187: PPUSH
8188: LD_VAR 0 16
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: LD_VAR 0 16
8201: PUSH
8202: LD_INT 2
8204: ARRAY
8205: PPUSH
8206: CALL_OW 111
// wait ( 0 0$1 ) ;
8210: LD_INT 35
8212: PPUSH
8213: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8217: LD_VAR 0 1
8221: PPUSH
8222: LD_VAR 0 16
8226: PUSH
8227: LD_INT 1
8229: ARRAY
8230: PPUSH
8231: LD_VAR 0 16
8235: PUSH
8236: LD_INT 2
8238: ARRAY
8239: PPUSH
8240: CALL_OW 297
8244: PUSH
8245: LD_INT 4
8247: LESS
8248: IFFALSE 8183
// ComStop ( unit ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 141
// status = 4 ;
8259: LD_ADDR_VAR 0 12
8263: PUSH
8264: LD_INT 4
8266: ST_TO_ADDR
// end ; if status = 4 then
8267: LD_VAR 0 12
8271: PUSH
8272: LD_INT 4
8274: EQUAL
8275: IFFALSE 8307
// begin repeat wait ( 0 0$1 ) ;
8277: LD_INT 35
8279: PPUSH
8280: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 256
8293: PUSH
8294: LD_INT 1000
8296: EQUAL
8297: IFFALSE 8277
// status = 5 ;
8299: LD_ADDR_VAR 0 12
8303: PUSH
8304: LD_INT 5
8306: ST_TO_ADDR
// end ; if status = 5 then
8307: LD_VAR 0 12
8311: PUSH
8312: LD_INT 5
8314: EQUAL
8315: IFFALSE 8597
// begin p := 999 ;
8317: LD_ADDR_VAR 0 9
8321: PUSH
8322: LD_INT 999
8324: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8325: LD_ADDR_VAR 0 14
8329: PUSH
8330: LD_VAR 0 11
8334: PUSH
8335: LD_INT 2
8337: ARRAY
8338: PUSH
8339: LD_INT 1
8341: ARRAY
8342: PUSH
8343: LD_VAR 0 11
8347: PUSH
8348: LD_INT 2
8350: ARRAY
8351: PUSH
8352: LD_INT 2
8354: ARRAY
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: ST_TO_ADDR
// c := 1 ;
8360: LD_ADDR_VAR 0 8
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8368: LD_ADDR_VAR 0 5
8372: PUSH
8373: DOUBLE
8374: LD_INT 1
8376: DEC
8377: ST_TO_ADDR
8378: LD_VAR 0 11
8382: PUSH
8383: LD_INT 2
8385: ARRAY
8386: PUSH
8387: LD_INT 2
8389: DIV
8390: PUSH
8391: FOR_TO
8392: IFFALSE 8524
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_VAR 0 1
8403: PPUSH
8404: LD_VAR 0 11
8408: PUSH
8409: LD_INT 2
8411: ARRAY
8412: PUSH
8413: LD_VAR 0 8
8417: ARRAY
8418: PPUSH
8419: LD_VAR 0 11
8423: PUSH
8424: LD_INT 2
8426: ARRAY
8427: PUSH
8428: LD_VAR 0 8
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: ARRAY
8437: PPUSH
8438: CALL_OW 297
8442: ST_TO_ADDR
// if x < p then
8443: LD_VAR 0 6
8447: PUSH
8448: LD_VAR 0 9
8452: LESS
8453: IFFALSE 8508
// begin p := x ;
8455: LD_ADDR_VAR 0 9
8459: PUSH
8460: LD_VAR 0 6
8464: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8465: LD_ADDR_VAR 0 14
8469: PUSH
8470: LD_VAR 0 11
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PUSH
8479: LD_VAR 0 8
8483: ARRAY
8484: PUSH
8485: LD_VAR 0 11
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PLUS
8502: ARRAY
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: ST_TO_ADDR
// end ; c = c + 2 ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: LD_VAR 0 8
8517: PUSH
8518: LD_INT 2
8520: PLUS
8521: ST_TO_ADDR
// end ;
8522: GO 8391
8524: POP
8525: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8526: LD_VAR 0 1
8530: PPUSH
8531: LD_VAR 0 14
8535: PUSH
8536: LD_INT 1
8538: ARRAY
8539: PPUSH
8540: LD_VAR 0 14
8544: PUSH
8545: LD_INT 2
8547: ARRAY
8548: PPUSH
8549: CALL_OW 111
// wait ( 0 0$1 ) ;
8553: LD_INT 35
8555: PPUSH
8556: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_VAR 0 14
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PPUSH
8574: LD_VAR 0 14
8578: PUSH
8579: LD_INT 2
8581: ARRAY
8582: PPUSH
8583: CALL_OW 307
8587: IFFALSE 8526
// status = 1 ;
8589: LD_ADDR_VAR 0 12
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 301
8606: IFFALSE 7335
// end ;
8608: LD_VAR 0 4
8612: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8613: LD_INT 0
8615: PPUSH
8616: PPUSH
8617: PPUSH
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
8622: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8623: LD_VAR 0 1
8627: NOT
8628: PUSH
8629: LD_VAR 0 3
8633: NOT
8634: OR
8635: PUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 0
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: IN
8655: NOT
8656: OR
8657: PUSH
8658: LD_VAR 0 6
8662: NOT
8663: OR
8664: PUSH
8665: LD_VAR 0 7
8669: NOT
8670: OR
8671: IFFALSE 8675
// exit ;
8673: GO 9066
// sex_id :=  ;
8675: LD_ADDR_VAR 0 14
8679: PUSH
8680: LD_STRING 
8682: ST_TO_ADDR
// case class of 1 :
8683: LD_VAR 0 5
8687: PUSH
8688: LD_INT 1
8690: DOUBLE
8691: EQUAL
8692: IFTRUE 8696
8694: GO 8707
8696: POP
// class_id := Sol ; 2 :
8697: LD_ADDR_VAR 0 15
8701: PUSH
8702: LD_STRING Sol
8704: ST_TO_ADDR
8705: GO 8765
8707: LD_INT 2
8709: DOUBLE
8710: EQUAL
8711: IFTRUE 8715
8713: GO 8726
8715: POP
// class_id := Eng ; 3 :
8716: LD_ADDR_VAR 0 15
8720: PUSH
8721: LD_STRING Eng
8723: ST_TO_ADDR
8724: GO 8765
8726: LD_INT 3
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8745
8734: POP
// class_id := Mech ; 4 :
8735: LD_ADDR_VAR 0 15
8739: PUSH
8740: LD_STRING Mech
8742: ST_TO_ADDR
8743: GO 8765
8745: LD_INT 4
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8764
8753: POP
// class_id := Sci ; end ;
8754: LD_ADDR_VAR 0 15
8758: PUSH
8759: LD_STRING Sci
8761: ST_TO_ADDR
8762: GO 8765
8764: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8765: LD_ADDR_VAR 0 11
8769: PUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 25
8777: PUSH
8778: LD_VAR 0 5
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PPUSH
8787: CALL_OW 72
8791: ST_TO_ADDR
// if tmp then
8792: LD_VAR 0 11
8796: IFFALSE 8808
// units := tmp ;
8798: LD_ADDR_VAR 0 1
8802: PUSH
8803: LD_VAR 0 11
8807: ST_TO_ADDR
// if sex then
8808: LD_VAR 0 4
8812: IFFALSE 8868
// begin if sex = sex_female then
8814: LD_VAR 0 4
8818: PUSH
8819: LD_INT 2
8821: EQUAL
8822: IFFALSE 8832
// sex_id := F ;
8824: LD_ADDR_VAR 0 14
8828: PUSH
8829: LD_STRING F
8831: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8832: LD_ADDR_VAR 0 1
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_INT 26
8844: PUSH
8845: LD_VAR 0 4
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 72
8858: ST_TO_ADDR
// if not units then
8859: LD_VAR 0 1
8863: NOT
8864: IFFALSE 8868
// exit ;
8866: GO 9066
// end ; unit_id := id ;
8868: LD_ADDR_VAR 0 12
8872: PUSH
8873: LD_VAR 0 6
8877: ST_TO_ADDR
// if unit_id > units then
8878: LD_VAR 0 12
8882: PUSH
8883: LD_VAR 0 1
8887: GREATER
8888: IFFALSE 8898
// unit_id := 1 ;
8890: LD_ADDR_VAR 0 12
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// if not units [ unit_id ] then
8898: LD_VAR 0 1
8902: PUSH
8903: LD_VAR 0 12
8907: ARRAY
8908: NOT
8909: IFFALSE 8913
// exit ;
8911: GO 9066
// unit := units [ unit_id ] ;
8913: LD_ADDR_VAR 0 10
8917: PUSH
8918: LD_VAR 0 1
8922: PUSH
8923: LD_VAR 0 12
8927: ARRAY
8928: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8929: LD_ADDR_VAR 0 13
8933: PUSH
8934: LD_STRING D
8936: PUSH
8937: LD_VAR 0 3
8941: STR
8942: PUSH
8943: LD_STRING -
8945: STR
8946: PUSH
8947: LD_VAR 0 14
8951: STR
8952: PUSH
8953: LD_VAR 0 15
8957: STR
8958: PUSH
8959: LD_VAR 0 6
8963: STR
8964: PUSH
8965: LD_STRING -
8967: STR
8968: PUSH
8969: LD_VAR 0 7
8973: STR
8974: ST_TO_ADDR
// case type of 0 :
8975: LD_VAR 0 2
8979: PUSH
8980: LD_INT 0
8982: DOUBLE
8983: EQUAL
8984: IFTRUE 8988
8986: GO 9005
8988: POP
// Say ( unit , dialog_id ) ; 1 :
8989: LD_VAR 0 10
8993: PPUSH
8994: LD_VAR 0 13
8998: PPUSH
8999: CALL_OW 88
9003: GO 9056
9005: LD_INT 1
9007: DOUBLE
9008: EQUAL
9009: IFTRUE 9013
9011: GO 9030
9013: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9014: LD_VAR 0 10
9018: PPUSH
9019: LD_VAR 0 13
9023: PPUSH
9024: CALL_OW 94
9028: GO 9056
9030: LD_INT 2
9032: DOUBLE
9033: EQUAL
9034: IFTRUE 9038
9036: GO 9055
9038: POP
// ForceSay ( unit , dialog_id ) ; end ;
9039: LD_VAR 0 10
9043: PPUSH
9044: LD_VAR 0 13
9048: PPUSH
9049: CALL_OW 91
9053: GO 9056
9055: POP
// result := unit ;
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: LD_VAR 0 10
9065: ST_TO_ADDR
// end ;
9066: LD_VAR 0 8
9070: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9071: LD_INT 0
9073: PPUSH
9074: PPUSH
9075: PPUSH
// result := false ;
9076: LD_ADDR_VAR 0 4
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9084: LD_VAR 0 1
9088: NOT
9089: PUSH
9090: LD_VAR 0 2
9094: NOT
9095: OR
9096: PUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 310
9106: OR
9107: IFFALSE 9111
// exit ;
9109: GO 9315
// if distance < 0 then
9111: LD_VAR 0 3
9115: PUSH
9116: LD_INT 0
9118: LESS
9119: IFFALSE 9129
// distance := 0 ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9129: LD_ADDR_VAR 0 6
9133: PUSH
9134: LD_VAR 0 2
9138: PPUSH
9139: CALL_OW 266
9143: PPUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 250
9153: PPUSH
9154: LD_VAR 0 2
9158: PPUSH
9159: CALL_OW 251
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 254
9173: PPUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 248
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: CALL 50711 0 6
9191: ST_TO_ADDR
// if not entrance then
9192: LD_VAR 0 6
9196: NOT
9197: IFFALSE 9201
// exit ;
9199: GO 9315
// for i in entrance do
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: LD_VAR 0 6
9210: PUSH
9211: FOR_IN
9212: IFFALSE 9313
// begin if not distance then
9214: LD_VAR 0 3
9218: NOT
9219: IFFALSE 9264
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_VAR 0 5
9230: PUSH
9231: LD_INT 1
9233: ARRAY
9234: PPUSH
9235: LD_VAR 0 5
9239: PUSH
9240: LD_INT 2
9242: ARRAY
9243: PPUSH
9244: CALL_OW 307
9248: IFFALSE 9262
// begin result := true ;
9250: LD_ADDR_VAR 0 4
9254: PUSH
9255: LD_INT 1
9257: ST_TO_ADDR
// exit ;
9258: POP
9259: POP
9260: GO 9315
// end ; end else
9262: GO 9311
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9264: LD_VAR 0 1
9268: PPUSH
9269: LD_VAR 0 5
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: LD_VAR 0 5
9282: PUSH
9283: LD_INT 2
9285: ARRAY
9286: PPUSH
9287: CALL_OW 297
9291: PUSH
9292: LD_VAR 0 3
9296: LESSEQUAL
9297: IFFALSE 9311
// begin result := true ;
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// exit ;
9307: POP
9308: POP
9309: GO 9315
// end ; end ; end ;
9311: GO 9211
9313: POP
9314: POP
// end ;
9315: LD_VAR 0 4
9319: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9320: LD_INT 0
9322: PPUSH
9323: PPUSH
9324: PPUSH
// result := false ;
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: LD_INT 0
9332: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9333: LD_VAR 0 1
9337: NOT
9338: PUSH
9339: LD_VAR 0 2
9343: NOT
9344: OR
9345: PUSH
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 302
9355: NOT
9356: OR
9357: PUSH
9358: LD_VAR 0 2
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: OR
9369: IFFALSE 9373
// exit ;
9371: GO 9534
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 81
9380: PUSH
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 255
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 3
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 69
9420: PPUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 74
9430: PPUSH
9431: CALL_OW 296
9435: PUSH
9436: LD_INT 8
9438: LESS
9439: IFFALSE 9443
// exit ;
9441: GO 9534
// building := IsInUnit ( unit2 ) ;
9443: LD_ADDR_VAR 0 5
9447: PUSH
9448: LD_VAR 0 2
9452: PPUSH
9453: CALL_OW 310
9457: ST_TO_ADDR
// if building then
9458: LD_VAR 0 5
9462: IFFALSE 9489
// result := IsNearbyEntrance ( unit , building , 2 ) else
9464: LD_ADDR_VAR 0 3
9468: PUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: LD_VAR 0 5
9478: PPUSH
9479: LD_INT 2
9481: PPUSH
9482: CALL 9071 0 3
9486: ST_TO_ADDR
9487: GO 9534
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: LD_VAR 0 1
9498: PPUSH
9499: LD_VAR 0 2
9503: PPUSH
9504: CALL_OW 296
9508: PUSH
9509: LD_INT 6
9511: LESS
9512: PUSH
9513: LD_VAR 0 2
9517: PPUSH
9518: CALL_OW 255
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 292
9532: AND
9533: ST_TO_ADDR
// end ;
9534: LD_VAR 0 3
9538: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9539: LD_INT 0
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
// uc_side = 0 ;
9545: LD_ADDR_OWVAR 20
9549: PUSH
9550: LD_INT 0
9552: ST_TO_ADDR
// uc_nation = 0 ;
9553: LD_ADDR_OWVAR 21
9557: PUSH
9558: LD_INT 0
9560: ST_TO_ADDR
// nat_area := nature_area ;
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: LD_INT 24
9568: ST_TO_ADDR
// InitHc ;
9569: CALL_OW 19
// for i = 1 to 4 do
9573: LD_ADDR_VAR 0 2
9577: PUSH
9578: DOUBLE
9579: LD_INT 1
9581: DEC
9582: ST_TO_ADDR
9583: LD_INT 4
9585: PUSH
9586: FOR_TO
9587: IFFALSE 9634
// begin hc_class = 18 ;
9589: LD_ADDR_OWVAR 28
9593: PUSH
9594: LD_INT 18
9596: ST_TO_ADDR
// hc_gallery =  ;
9597: LD_ADDR_OWVAR 33
9601: PUSH
9602: LD_STRING 
9604: ST_TO_ADDR
// animal := CreateHuman ;
9605: LD_ADDR_VAR 0 3
9609: PUSH
9610: CALL_OW 44
9614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9615: LD_VAR 0 3
9619: PPUSH
9620: LD_VAR 0 4
9624: PPUSH
9625: LD_INT 0
9627: PPUSH
9628: CALL_OW 49
// end ;
9632: GO 9586
9634: POP
9635: POP
// for i = 1 to 3 do
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: DOUBLE
9642: LD_INT 1
9644: DEC
9645: ST_TO_ADDR
9646: LD_INT 3
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9744
// begin hc_class = class_apeman ;
9652: LD_ADDR_OWVAR 28
9656: PUSH
9657: LD_INT 12
9659: ST_TO_ADDR
// hc_gallery =  ;
9660: LD_ADDR_OWVAR 33
9664: PUSH
9665: LD_STRING 
9667: ST_TO_ADDR
// hc_agressivity = 0 ;
9668: LD_ADDR_OWVAR 35
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9676: LD_ADDR_OWVAR 31
9680: PUSH
9681: LD_INT 1
9683: PPUSH
9684: LD_INT 3
9686: PPUSH
9687: CALL_OW 12
9691: PUSH
9692: LD_INT 1
9694: PPUSH
9695: LD_INT 3
9697: PPUSH
9698: CALL_OW 12
9702: PUSH
9703: LD_INT 0
9705: PUSH
9706: LD_INT 0
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: ST_TO_ADDR
// animal := CreateHuman ;
9715: LD_ADDR_VAR 0 3
9719: PUSH
9720: CALL_OW 44
9724: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: LD_INT 0
9737: PPUSH
9738: CALL_OW 49
// end ;
9742: GO 9649
9744: POP
9745: POP
// for i = 1 to 3 do
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: DOUBLE
9752: LD_INT 1
9754: DEC
9755: ST_TO_ADDR
9756: LD_INT 3
9758: PUSH
9759: FOR_TO
9760: IFFALSE 9807
// begin hc_class = 13 ;
9762: LD_ADDR_OWVAR 28
9766: PUSH
9767: LD_INT 13
9769: ST_TO_ADDR
// hc_gallery =  ;
9770: LD_ADDR_OWVAR 33
9774: PUSH
9775: LD_STRING 
9777: ST_TO_ADDR
// animal := CreateHuman ;
9778: LD_ADDR_VAR 0 3
9782: PUSH
9783: CALL_OW 44
9787: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_VAR 0 4
9797: PPUSH
9798: LD_INT 0
9800: PPUSH
9801: CALL_OW 49
// end ;
9805: GO 9759
9807: POP
9808: POP
// for i = 1 to 3 do
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: DOUBLE
9815: LD_INT 1
9817: DEC
9818: ST_TO_ADDR
9819: LD_INT 3
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9868
// begin hc_class = 20 ;
9825: LD_ADDR_OWVAR 28
9829: PUSH
9830: LD_INT 20
9832: ST_TO_ADDR
// hc_gallery =  ;
9833: LD_ADDR_OWVAR 33
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// animal := CreateHuman ;
9841: LD_ADDR_VAR 0 3
9845: PUSH
9846: CALL_OW 44
9850: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 4
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: CALL_OW 49
// end ;
9866: GO 9822
9868: POP
9869: POP
// end ; end_of_file
9870: LD_VAR 0 1
9874: RET
// export function Action ; begin
9875: LD_INT 0
9877: PPUSH
// InGameOn ;
9878: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9882: LD_EXP 15
9886: PPUSH
9887: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9891: LD_EXP 15
9895: PPUSH
9896: LD_STRING D1-JMM-1
9898: PPUSH
9899: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9903: LD_EXP 16
9907: PPUSH
9908: LD_STRING D1-Roth-1
9910: PPUSH
9911: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9915: LD_EXP 15
9919: PPUSH
9920: LD_STRING D1-JMM-2
9922: PPUSH
9923: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9927: LD_EXP 16
9931: PPUSH
9932: LD_STRING D1-Roth-2
9934: PPUSH
9935: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9939: LD_EXP 15
9943: PPUSH
9944: LD_STRING D1-JMM-3
9946: PPUSH
9947: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9951: LD_EXP 16
9955: PPUSH
9956: LD_STRING D1-Roth-3
9958: PPUSH
9959: CALL_OW 88
// ComInvisible ( Roth ) ;
9963: LD_EXP 16
9967: PPUSH
9968: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9972: LD_INT 46
9974: PPUSH
9975: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9979: LD_EXP 15
9983: PPUSH
9984: LD_STRING D1-JMM-4
9986: PPUSH
9987: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9991: LD_INT 10
9993: PPUSH
9994: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9998: LD_EXP 16
10002: PPUSH
10003: LD_EXP 15
10007: PPUSH
10008: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
10012: LD_EXP 15
10016: PPUSH
10017: LD_STRING D1-JMM-4a
10019: PPUSH
10020: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
10024: LD_EXP 16
10028: PPUSH
10029: LD_STRING D1-Roth-4
10031: PPUSH
10032: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-JMM-5
10043: PPUSH
10044: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10048: LD_EXP 16
10052: PPUSH
10053: LD_STRING D1-Roth-5
10055: PPUSH
10056: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10060: LD_EXP 15
10064: PPUSH
10065: LD_STRING D1-JMM-6
10067: PPUSH
10068: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10072: LD_EXP 16
10076: PPUSH
10077: LD_STRING D1-Roth-6
10079: PPUSH
10080: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10084: LD_EXP 15
10088: PPUSH
10089: LD_STRING D1-JMM-7
10091: PPUSH
10092: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10096: LD_EXP 17
10100: PPUSH
10101: LD_EXP 15
10105: PPUSH
10106: CALL_OW 250
10110: PPUSH
10111: LD_EXP 15
10115: PPUSH
10116: CALL_OW 251
10120: PPUSH
10121: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10125: LD_EXP 16
10129: PPUSH
10130: LD_STRING D1-Roth-7
10132: PPUSH
10133: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10144: LD_EXP 17
10148: PPUSH
10149: LD_EXP 15
10153: PPUSH
10154: CALL_OW 296
10158: PUSH
10159: LD_INT 6
10161: LESS
10162: IFFALSE 10137
// ComTurnUnit ( Powell , JMM ) ;
10164: LD_EXP 17
10168: PPUSH
10169: LD_EXP 15
10173: PPUSH
10174: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10178: LD_EXP 17
10182: PPUSH
10183: LD_STRING D1-Pow-7
10185: PPUSH
10186: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10190: LD_EXP 15
10194: PPUSH
10195: LD_EXP 17
10199: PPUSH
10200: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10204: LD_EXP 16
10208: PPUSH
10209: LD_EXP 17
10213: PPUSH
10214: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10218: LD_EXP 15
10222: PPUSH
10223: LD_STRING D1-JMM-8
10225: PPUSH
10226: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10230: LD_EXP 17
10234: PPUSH
10235: LD_STRING D1-Pow-8
10237: PPUSH
10238: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10242: LD_EXP 15
10246: PPUSH
10247: LD_STRING D1-JMM-9
10249: PPUSH
10250: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10254: LD_EXP 17
10258: PPUSH
10259: LD_INT 124
10261: PPUSH
10262: LD_INT 61
10264: PPUSH
10265: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10269: LD_INT 35
10271: PPUSH
10272: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10276: LD_EXP 15
10280: PPUSH
10281: LD_EXP 17
10285: PPUSH
10286: CALL_OW 296
10290: PUSH
10291: LD_INT 6
10293: GREATER
10294: IFFALSE 10269
// SayRadio ( Powell , D1-Pow-9 ) ;
10296: LD_EXP 17
10300: PPUSH
10301: LD_STRING D1-Pow-9
10303: PPUSH
10304: CALL_OW 94
// RemoveUnit ( Powell ) ;
10308: LD_EXP 17
10312: PPUSH
10313: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10317: LD_EXP 17
10321: PPUSH
10322: LD_INT 18
10324: PPUSH
10325: CALL_OW 52
// if Joan and not Joan in selected then
10329: LD_EXP 37
10333: PUSH
10334: LD_EXP 37
10338: PUSH
10339: LD_EXP 3
10343: IN
10344: NOT
10345: AND
10346: IFFALSE 10360
// SayRadio ( Joan , D1-Joan-9 ) ;
10348: LD_EXP 37
10352: PPUSH
10353: LD_STRING D1-Joan-9
10355: PPUSH
10356: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10360: LD_EXP 16
10364: PPUSH
10365: LD_EXP 15
10369: PPUSH
10370: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10374: LD_EXP 15
10378: PPUSH
10379: LD_EXP 16
10383: PPUSH
10384: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10388: LD_EXP 16
10392: PPUSH
10393: LD_STRING D1-Roth-9
10395: PPUSH
10396: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10400: LD_EXP 15
10404: PPUSH
10405: LD_STRING D1-JMM-10
10407: PPUSH
10408: CALL_OW 88
// InGameOff ;
10412: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10416: LD_STRING M1
10418: PPUSH
10419: CALL_OW 337
// if Difficulty < 3 then
10423: LD_OWVAR 67
10427: PUSH
10428: LD_INT 3
10430: LESS
10431: IFFALSE 10443
// ChangeSideFog ( 4 , 7 ) ;
10433: LD_INT 4
10435: PPUSH
10436: LD_INT 7
10438: PPUSH
10439: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10443: LD_STRING enableBioCharacter(BIO_ROTH)
10445: PPUSH
10446: CALL_OW 559
// SaveForQuickRestart ;
10450: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10454: LD_INT 7
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 80
// wait ( 0 0$3 ) ;
10470: LD_INT 105
10472: PPUSH
10473: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10477: LD_EXP 16
10481: PPUSH
10482: LD_INT 124
10484: PPUSH
10485: LD_INT 18
10487: PPUSH
10488: CALL_OW 111
// AddComInvisible ( Roth ) ;
10492: LD_EXP 16
10496: PPUSH
10497: CALL_OW 212
// wait ( 0 0$30 ) ;
10501: LD_INT 1050
10503: PPUSH
10504: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10508: LD_EXP 16
10512: PPUSH
10513: LD_INT 2100
10515: PPUSH
10516: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10520: LD_EXP 16
10524: PPUSH
10525: LD_INT 156
10527: PPUSH
10528: LD_INT 20
10530: PPUSH
10531: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10535: LD_EXP 16
10539: PPUSH
10540: LD_INT 178
10542: PPUSH
10543: LD_INT 42
10545: PPUSH
10546: CALL_OW 171
// AddComInvisible ( Roth ) ;
10550: LD_EXP 16
10554: PPUSH
10555: CALL_OW 212
// end ;
10559: LD_VAR 0 1
10563: RET
// every 0 0$1 do var i , tmp ;
10564: GO 10566
10566: DISABLE
10567: LD_INT 0
10569: PPUSH
10570: PPUSH
// begin tmp := selected union friends ;
10571: LD_ADDR_VAR 0 2
10575: PUSH
10576: LD_EXP 3
10580: PUSH
10581: LD_EXP 4
10585: UNION
10586: ST_TO_ADDR
// if gamma_commander = 1 then
10587: LD_EXP 10
10591: PUSH
10592: LD_INT 1
10594: EQUAL
10595: IFFALSE 10613
// tmp := tmp union Donaldson ;
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_VAR 0 2
10606: PUSH
10607: LD_EXP 25
10611: UNION
10612: ST_TO_ADDR
// if gamma_commander = 2 then
10613: LD_EXP 10
10617: PUSH
10618: LD_INT 2
10620: EQUAL
10621: IFFALSE 10639
// tmp := tmp union Brown ;
10623: LD_ADDR_VAR 0 2
10627: PUSH
10628: LD_VAR 0 2
10632: PUSH
10633: LD_EXP 29
10637: UNION
10638: ST_TO_ADDR
// if not tmp then
10639: LD_VAR 0 2
10643: NOT
10644: IFFALSE 10648
// exit ;
10646: GO 10720
// repeat wait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 67
// for i in tmp do
10655: LD_ADDR_VAR 0 1
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: FOR_IN
10666: IFFALSE 10711
// if CanSpot ( JMM , i ) then
10668: LD_EXP 15
10672: PPUSH
10673: LD_VAR 0 1
10677: PPUSH
10678: CALL 9320 0 2
10682: IFFALSE 10709
// begin tmp := tmp diff i ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: DIFF
10699: ST_TO_ADDR
// Spot ( i ) ;
10700: LD_VAR 0 1
10704: PPUSH
10705: CALL 10723 0 1
// end ;
10709: GO 10665
10711: POP
10712: POP
// until not tmp ;
10713: LD_VAR 0 2
10717: NOT
10718: IFFALSE 10648
// end ;
10720: PPOPN 2
10722: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10723: LD_INT 0
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10729: LD_VAR 0 1
10733: NOT
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PUSH
10745: LD_INT 4
10747: NONEQUAL
10748: OR
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 555
10759: OR
10760: PUSH
10761: LD_VAR 0 1
10765: PPUSH
10766: CALL_OW 302
10770: NOT
10771: OR
10772: IFFALSE 10776
// exit ;
10774: GO 12686
// InGameOn ;
10776: CALL_OW 8
// side := 7 ;
10780: LD_ADDR_VAR 0 4
10784: PUSH
10785: LD_INT 7
10787: ST_TO_ADDR
// joined := false ;
10788: LD_ADDR_VAR 0 5
10792: PUSH
10793: LD_INT 0
10795: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 310
10810: ST_TO_ADDR
// if building then
10811: LD_VAR 0 3
10815: IFFALSE 10874
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10817: LD_EXP 15
10821: PPUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: CALL_OW 255
10831: PPUSH
10832: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10836: LD_EXP 15
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: CALL_OW 120
// repeat wait ( 3 ) ;
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 67
// until IsInUnit ( JMM ) ;
10857: LD_EXP 15
10861: PPUSH
10862: CALL_OW 310
10866: IFFALSE 10850
// DialogueOn ;
10868: CALL_OW 6
// end else
10872: GO 10906
// begin ComTurnUnit ( JMM , unit ) ;
10874: LD_EXP 15
10878: PPUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10888: LD_VAR 0 1
10892: PPUSH
10893: LD_EXP 15
10897: PPUSH
10898: CALL_OW 119
// DialogueOn ;
10902: CALL_OW 6
// end ; if unit = Joan then
10906: LD_VAR 0 1
10910: PUSH
10911: LD_EXP 37
10915: EQUAL
10916: IFFALSE 11026
// begin joined := true ;
10918: LD_ADDR_VAR 0 5
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if Joan in selected then
10926: LD_EXP 37
10930: PUSH
10931: LD_EXP 3
10935: IN
10936: IFFALSE 10964
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10938: LD_EXP 37
10942: PPUSH
10943: LD_STRING D3-Joan-Joan-1
10945: PPUSH
10946: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10950: LD_EXP 15
10954: PPUSH
10955: LD_STRING D3-Joan-JMM-1
10957: PPUSH
10958: CALL_OW 88
// end else
10962: GO 11024
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10964: LD_EXP 37
10968: PPUSH
10969: LD_STRING D4-Joan-Joan-1
10971: PPUSH
10972: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10976: LD_EXP 15
10980: PPUSH
10981: LD_STRING D4-Joan-JMM-1
10983: PPUSH
10984: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10988: LD_EXP 37
10992: PPUSH
10993: LD_STRING D4-Joan-Joan-2
10995: PPUSH
10996: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
11000: LD_EXP 15
11004: PPUSH
11005: LD_STRING D4-Joan-JMM-2
11007: PPUSH
11008: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
11012: LD_EXP 37
11016: PPUSH
11017: LD_STRING D4-Joan-Joan-3
11019: PPUSH
11020: CALL_OW 88
// end ; end else
11024: GO 12494
// if unit = Lisa then
11026: LD_VAR 0 1
11030: PUSH
11031: LD_EXP 24
11035: EQUAL
11036: IFFALSE 11228
// begin if Lisa in selected then
11038: LD_EXP 24
11042: PUSH
11043: LD_EXP 3
11047: IN
11048: IFFALSE 11161
// begin if GetSide ( Joan ) = 7 then
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 255
11059: PUSH
11060: LD_INT 7
11062: EQUAL
11063: IFFALSE 11127
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11065: LD_EXP 24
11069: PPUSH
11070: LD_STRING D3-LisaJ-Lisa-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11077: LD_EXP 15
11081: PPUSH
11082: LD_STRING D3-LisaJ-JMM-1
11084: PPUSH
11085: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11089: LD_EXP 24
11093: PPUSH
11094: LD_STRING D3-LisaJ-Lisa-2
11096: PPUSH
11097: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11101: LD_EXP 15
11105: PPUSH
11106: LD_STRING D3-LisaJ-JMM-2
11108: PPUSH
11109: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11113: LD_EXP 24
11117: PPUSH
11118: LD_STRING D3-LisaJ-Lisa-3
11120: PPUSH
11121: CALL_OW 88
// end else
11125: GO 11159
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11127: LD_EXP 24
11131: PPUSH
11132: LD_STRING D3-LisaL-Lisa-1
11134: PPUSH
11135: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11139: LD_EXP 15
11143: PPUSH
11144: LD_STRING D3-LisaL-JMM-1
11146: PPUSH
11147: CALL_OW 88
// joined := true ;
11151: LD_ADDR_VAR 0 5
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// end ; end else
11159: GO 11226
// begin if GetSide ( Joan ) = 7 then
11161: LD_EXP 37
11165: PPUSH
11166: CALL_OW 255
11170: PUSH
11171: LD_INT 7
11173: EQUAL
11174: IFFALSE 11214
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11176: LD_EXP 24
11180: PPUSH
11181: LD_STRING D4-LisaJ-Lisa-1
11183: PPUSH
11184: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11188: LD_EXP 15
11192: PPUSH
11193: LD_STRING D4-LisaJ-JMM-1
11195: PPUSH
11196: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11200: LD_EXP 24
11204: PPUSH
11205: LD_STRING D4-LisaJ-Lisa-2
11207: PPUSH
11208: CALL_OW 88
// end else
11212: GO 11226
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11214: LD_EXP 24
11218: PPUSH
11219: LD_STRING D4-LisaL-Lisa-1
11221: PPUSH
11222: CALL_OW 88
// end ; end ; end else
11226: GO 12494
// if unit = Frank then
11228: LD_VAR 0 1
11232: PUSH
11233: LD_EXP 34
11237: EQUAL
11238: IFFALSE 11378
// begin joined := true ;
11240: LD_ADDR_VAR 0 5
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// if Frank in selected then
11248: LD_EXP 34
11252: PUSH
11253: LD_EXP 3
11257: IN
11258: IFFALSE 11328
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11260: LD_EXP 34
11264: PPUSH
11265: LD_STRING D3-Frank-Frank-1
11267: PPUSH
11268: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11272: LD_EXP 15
11276: PPUSH
11277: LD_STRING D3-Frank-JMM-1
11279: PPUSH
11280: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11284: LD_EXP 34
11288: PPUSH
11289: LD_STRING D3-Frank-Frank-2
11291: PPUSH
11292: CALL_OW 88
// if reached_lab then
11296: LD_EXP 5
11300: IFFALSE 11326
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11302: LD_EXP 15
11306: PPUSH
11307: LD_STRING D3-Frank-JMM-2
11309: PPUSH
11310: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11314: LD_EXP 34
11318: PPUSH
11319: LD_STRING D3-Frank-Frank-3
11321: PPUSH
11322: CALL_OW 88
// end ; end else
11326: GO 11376
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11328: LD_EXP 34
11332: PPUSH
11333: LD_STRING D4-Frank-Frank-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11340: LD_EXP 15
11344: PPUSH
11345: LD_STRING D4-Frank-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11352: LD_EXP 34
11356: PPUSH
11357: LD_STRING D4-Frank-Frank-2
11359: PPUSH
11360: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11364: LD_EXP 15
11368: PPUSH
11369: LD_STRING D4-Frank-JMM-2
11371: PPUSH
11372: CALL_OW 88
// end ; end else
11376: GO 12494
// if unit = Brown then
11378: LD_VAR 0 1
11382: PUSH
11383: LD_EXP 29
11387: EQUAL
11388: IFFALSE 11484
// begin if Brown in selected or gamma_commander = 2 then
11390: LD_EXP 29
11394: PUSH
11395: LD_EXP 3
11399: IN
11400: PUSH
11401: LD_EXP 10
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: OR
11410: IFFALSE 11446
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11412: LD_EXP 29
11416: PPUSH
11417: LD_STRING D3-Soldier1-Sol1-1
11419: PPUSH
11420: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11424: LD_EXP 15
11428: PPUSH
11429: LD_STRING D6-JMM-Brown-1
11431: PPUSH
11432: CALL_OW 88
// joined := true ;
11436: LD_ADDR_VAR 0 5
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// end else
11444: GO 11482
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11446: LD_EXP 29
11450: PPUSH
11451: LD_STRING D4-Soldier2-Sol1-1
11453: PPUSH
11454: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11458: LD_EXP 15
11462: PPUSH
11463: LD_STRING D4-Soldier1-JMM-1
11465: PPUSH
11466: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11470: LD_EXP 29
11474: PPUSH
11475: LD_STRING D4-Soldier2-Sol1-2
11477: PPUSH
11478: CALL_OW 88
// end ; end else
11482: GO 12494
// if unit = Donaldson then
11484: LD_VAR 0 1
11488: PUSH
11489: LD_EXP 25
11493: EQUAL
11494: IFFALSE 11590
// begin if Donaldson in selected or gamma_commander = 1 then
11496: LD_EXP 25
11500: PUSH
11501: LD_EXP 3
11505: IN
11506: PUSH
11507: LD_EXP 10
11511: PUSH
11512: LD_INT 1
11514: EQUAL
11515: OR
11516: IFFALSE 11552
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11518: LD_EXP 25
11522: PPUSH
11523: LD_STRING D3-Soldier2-FSol2-1
11525: PPUSH
11526: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11530: LD_EXP 15
11534: PPUSH
11535: LD_STRING D3-Soldier2-JMM-1
11537: PPUSH
11538: CALL_OW 88
// joined := true ;
11542: LD_ADDR_VAR 0 5
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// end else
11550: GO 11588
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11552: LD_EXP 25
11556: PPUSH
11557: LD_STRING D4-Soldier1-FSol1-1
11559: PPUSH
11560: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11564: LD_EXP 15
11568: PPUSH
11569: LD_STRING D4-Soldier1-JMM-1
11571: PPUSH
11572: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11576: LD_EXP 25
11580: PPUSH
11581: LD_STRING D4-Soldier1-FSol1-2
11583: PPUSH
11584: CALL_OW 88
// end ; end else
11588: GO 12494
// if unit = Cyrus then
11590: LD_VAR 0 1
11594: PUSH
11595: LD_EXP 27
11599: EQUAL
11600: IFFALSE 11674
// begin if Cyrus in selected then
11602: LD_EXP 27
11606: PUSH
11607: LD_EXP 3
11611: IN
11612: IFFALSE 11648
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11614: LD_EXP 27
11618: PPUSH
11619: LD_STRING D3-Cyrus-Cyrus-1
11621: PPUSH
11622: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11626: LD_EXP 15
11630: PPUSH
11631: LD_STRING D3-Cyrus-JMM-1
11633: PPUSH
11634: CALL_OW 88
// joined := true ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// end else
11646: GO 11672
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11648: LD_EXP 27
11652: PPUSH
11653: LD_STRING D4-Cyrus-Cyrus-1
11655: PPUSH
11656: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11660: LD_EXP 15
11664: PPUSH
11665: LD_STRING D4-Cyrus-JMM-1
11667: PPUSH
11668: CALL_OW 88
// end ; end else
11672: GO 12494
// if unit = Bobby then
11674: LD_VAR 0 1
11678: PUSH
11679: LD_EXP 26
11683: EQUAL
11684: IFFALSE 11770
// begin if Bobby in selected then
11686: LD_EXP 26
11690: PUSH
11691: LD_EXP 3
11695: IN
11696: IFFALSE 11732
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11698: LD_EXP 26
11702: PPUSH
11703: LD_STRING D3-Bobby-Bobby-1
11705: PPUSH
11706: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11710: LD_EXP 15
11714: PPUSH
11715: LD_STRING D3-Bobby-JMM-1
11717: PPUSH
11718: CALL_OW 88
// joined := true ;
11722: LD_ADDR_VAR 0 5
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// end else
11730: GO 11768
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11732: LD_EXP 26
11736: PPUSH
11737: LD_STRING D4-Bobby-Bobby-1
11739: PPUSH
11740: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11744: LD_EXP 15
11748: PPUSH
11749: LD_STRING D4-Bobby-JMM-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11756: LD_EXP 26
11760: PPUSH
11761: LD_STRING D4-Bobby-Bobby-2
11763: PPUSH
11764: CALL_OW 88
// end ; end else
11768: GO 12494
// if unit = Cornel then
11770: LD_VAR 0 1
11774: PUSH
11775: LD_EXP 32
11779: EQUAL
11780: IFFALSE 11878
// begin if Cornel in selected then
11782: LD_EXP 32
11786: PUSH
11787: LD_EXP 3
11791: IN
11792: IFFALSE 11840
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11794: LD_EXP 32
11798: PPUSH
11799: LD_STRING D3-Mark-Corn-1
11801: PPUSH
11802: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11806: LD_EXP 15
11810: PPUSH
11811: LD_STRING D3-Mark-JMM-1
11813: PPUSH
11814: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11818: LD_EXP 32
11822: PPUSH
11823: LD_STRING D3-Mark-Corn-2
11825: PPUSH
11826: CALL_OW 88
// joined := true ;
11830: LD_ADDR_VAR 0 5
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// end else
11838: GO 11876
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11840: LD_EXP 32
11844: PPUSH
11845: LD_STRING D4-Mark-Corn-1
11847: PPUSH
11848: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11852: LD_EXP 15
11856: PPUSH
11857: LD_STRING D4-Mark-JMM-1
11859: PPUSH
11860: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11864: LD_EXP 32
11868: PPUSH
11869: LD_STRING D4-Mark-Corn-2
11871: PPUSH
11872: CALL_OW 88
// end ; end else
11876: GO 12494
// if unit = Gary then
11878: LD_VAR 0 1
11882: PUSH
11883: LD_EXP 33
11887: EQUAL
11888: IFFALSE 11986
// begin if Gary in selected then
11890: LD_EXP 33
11894: PUSH
11895: LD_EXP 3
11899: IN
11900: IFFALSE 11936
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11902: LD_EXP 33
11906: PPUSH
11907: LD_STRING D3-Gary-Gary-1
11909: PPUSH
11910: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11914: LD_EXP 15
11918: PPUSH
11919: LD_STRING D3-Gary-JMM-1
11921: PPUSH
11922: CALL_OW 88
// joined := true ;
11926: LD_ADDR_VAR 0 5
11930: PUSH
11931: LD_INT 1
11933: ST_TO_ADDR
// end else
11934: GO 11984
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11936: LD_EXP 33
11940: PPUSH
11941: LD_STRING D4-Gary-Gary-1
11943: PPUSH
11944: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11948: LD_EXP 33
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 235
// DialogueOff ;
11960: CALL_OW 7
// InGameOff ;
11964: CALL_OW 9
// SetSide ( JMM , side ) ;
11968: LD_EXP 15
11972: PPUSH
11973: LD_VAR 0 4
11977: PPUSH
11978: CALL_OW 235
// exit ;
11982: GO 12686
// end ; end else
11984: GO 12494
// if unit = Kikuchi then
11986: LD_VAR 0 1
11990: PUSH
11991: LD_EXP 35
11995: EQUAL
11996: IFFALSE 12094
// begin if Kikuchi in selected then
11998: LD_EXP 35
12002: PUSH
12003: LD_EXP 3
12007: IN
12008: IFFALSE 12044
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
12010: LD_EXP 35
12014: PPUSH
12015: LD_STRING D3-Yamako-Yam-1
12017: PPUSH
12018: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12022: LD_EXP 15
12026: PPUSH
12027: LD_STRING D3-Soldier2-JMM-1
12029: PPUSH
12030: CALL_OW 88
// joined := true ;
12034: LD_ADDR_VAR 0 5
12038: PUSH
12039: LD_INT 1
12041: ST_TO_ADDR
// end else
12042: GO 12092
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
12044: LD_EXP 35
12048: PPUSH
12049: LD_STRING D4-Yamako-Yam-1
12051: PPUSH
12052: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12056: LD_EXP 35
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 235
// DialogueOff ;
12068: CALL_OW 7
// InGameOff ;
12072: CALL_OW 9
// SetSide ( JMM , side ) ;
12076: LD_EXP 15
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// exit ;
12090: GO 12686
// end ; end else
12092: GO 12494
// if unit = Gladstone then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_EXP 30
12103: EQUAL
12104: IFFALSE 12178
// begin if Gladstone in selected then
12106: LD_EXP 30
12110: PUSH
12111: LD_EXP 3
12115: IN
12116: IFFALSE 12152
// begin joined := true ;
12118: LD_ADDR_VAR 0 5
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12126: LD_EXP 15
12130: PPUSH
12131: LD_STRING D3-Tim-JMM-1
12133: PPUSH
12134: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12138: LD_EXP 30
12142: PPUSH
12143: LD_STRING D3-Tim-Glad-1
12145: PPUSH
12146: CALL_OW 88
// end else
12150: GO 12176
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12152: LD_EXP 15
12156: PPUSH
12157: LD_STRING D4-Tim-JMM-1
12159: PPUSH
12160: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12164: LD_EXP 30
12168: PPUSH
12169: LD_STRING D4-Tim-Glad-1
12171: PPUSH
12172: CALL_OW 88
// end ; end else
12176: GO 12494
// if unit = Denis then
12178: LD_VAR 0 1
12182: PUSH
12183: LD_EXP 28
12187: EQUAL
12188: IFFALSE 12224
// begin joined := true ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12198: LD_EXP 28
12202: PPUSH
12203: LD_STRING D3-Denis-Den-1
12205: PPUSH
12206: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12210: LD_EXP 15
12214: PPUSH
12215: LD_STRING D3-Denis-JMM-1
12217: PPUSH
12218: CALL_OW 88
// end else
12222: GO 12494
// if unit = Simms then
12224: LD_VAR 0 1
12228: PUSH
12229: LD_EXP 36
12233: EQUAL
12234: IFFALSE 12270
// begin joined := true ;
12236: LD_ADDR_VAR 0 5
12240: PUSH
12241: LD_INT 1
12243: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12244: LD_EXP 36
12248: PPUSH
12249: LD_STRING D3-Simms-Sim-1
12251: PPUSH
12252: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12256: LD_EXP 15
12260: PPUSH
12261: LD_STRING D3-Simms-JMM-1
12263: PPUSH
12264: CALL_OW 88
// end else
12268: GO 12494
// if unit = DeltaDoctor then
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 38
12279: EQUAL
12280: IFFALSE 12316
// begin joined := true ;
12282: LD_ADDR_VAR 0 5
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12290: LD_EXP 38
12294: PPUSH
12295: LD_STRING D3-Soldier1-Sol1-1
12297: PPUSH
12298: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12302: LD_EXP 15
12306: PPUSH
12307: LD_STRING D3-Soldier1-JMM-1
12309: PPUSH
12310: CALL_OW 88
// end else
12314: GO 12494
// begin joined := unit in selected ;
12316: LD_ADDR_VAR 0 5
12320: PUSH
12321: LD_VAR 0 1
12325: PUSH
12326: LD_EXP 3
12330: IN
12331: ST_TO_ADDR
// if joined then
12332: LD_VAR 0 5
12336: IFFALSE 12405
// begin if GetSex ( unit ) = sex_male then
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL_OW 258
12347: PUSH
12348: LD_INT 1
12350: EQUAL
12351: IFFALSE 12379
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: LD_STRING D3-Soldier1-Sol1-1
12360: PPUSH
12361: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12365: LD_EXP 15
12369: PPUSH
12370: LD_STRING D3-Soldier1-JMM-1
12372: PPUSH
12373: CALL_OW 88
// end else
12377: GO 12403
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_STRING D3-Soldier2-FSol2-1
12386: PPUSH
12387: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12391: LD_EXP 15
12395: PPUSH
12396: LD_STRING D3-Soldier2-JMM-1
12398: PPUSH
12399: CALL_OW 88
// end ; end else
12403: GO 12494
// begin if GetSex ( unit ) = sex_male then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 258
12414: PUSH
12415: LD_INT 1
12417: EQUAL
12418: IFFALSE 12458
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_STRING D4-Soldier2-Sol1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12432: LD_EXP 15
12436: PPUSH
12437: LD_STRING D4-Soldier2-JMM-1
12439: PPUSH
12440: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12444: LD_VAR 0 1
12448: PPUSH
12449: LD_STRING D4-Soldier2-Sol2-1
12451: PPUSH
12452: CALL_OW 88
// end else
12456: GO 12494
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12458: LD_VAR 0 1
12462: PPUSH
12463: LD_STRING D4-Soldier1-FSol1-1
12465: PPUSH
12466: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12470: LD_EXP 15
12474: PPUSH
12475: LD_STRING D4-Soldier1-JMM-1
12477: PPUSH
12478: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12482: LD_VAR 0 1
12486: PPUSH
12487: LD_STRING D4-Soldier1-FSol1-2
12489: PPUSH
12490: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12494: CALL_OW 7
// InGameOff ;
12498: CALL_OW 9
// if building then
12502: LD_VAR 0 3
12506: IFFALSE 12607
// begin SetSide ( JMM , side ) ;
12508: LD_EXP 15
12512: PPUSH
12513: LD_VAR 0 4
12517: PPUSH
12518: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12522: LD_EXP 15
12526: PPUSH
12527: CALL_OW 122
// if joined then
12531: LD_VAR 0 5
12535: IFFALSE 12574
// begin SetSide ( unit , side ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_VAR 0 4
12546: PPUSH
12547: CALL_OW 235
// SetSide ( building , 1 ) ;
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 235
// ComExitBuilding ( unit ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 122
// end else
12572: GO 12605
// begin wait ( 0 0$10 ) ;
12574: LD_INT 350
12576: PPUSH
12577: CALL_OW 67
// SetSide ( unit , 1 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 235
// SetSide ( building , 1 ) ;
12593: LD_VAR 0 3
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: CALL_OW 235
// end ; end else
12605: GO 12686
// begin ComStop ( [ JMM , unit ] ) ;
12607: LD_EXP 15
12611: PUSH
12612: LD_VAR 0 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 141
// if joined then
12625: LD_VAR 0 5
12629: IFFALSE 12647
// SetSide ( unit , side ) else
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_VAR 0 4
12640: PPUSH
12641: CALL_OW 235
12645: GO 12686
// begin repeat wait ( 0 0$1 ) ;
12647: LD_INT 35
12649: PPUSH
12650: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12654: LD_EXP 15
12658: PPUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 296
12668: PUSH
12669: LD_INT 11
12671: GREATER
12672: IFFALSE 12647
// SetSide ( unit , 1 ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 235
// end ; end ; end ;
12686: LD_VAR 0 2
12690: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12691: LD_EXP 15
12695: PPUSH
12696: LD_EXP 39
12700: PPUSH
12701: CALL_OW 296
12705: PUSH
12706: LD_INT 6
12708: LESS
12709: PUSH
12710: LD_INT 7
12712: PPUSH
12713: LD_EXP 39
12717: PPUSH
12718: CALL_OW 292
12722: AND
12723: IFFALSE 12781
12725: GO 12727
12727: DISABLE
// begin DialogueOn ;
12728: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12732: LD_EXP 39
12736: PPUSH
12737: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12741: LD_EXP 15
12745: PPUSH
12746: LD_STRING D6-JMM-Mike-1
12748: PPUSH
12749: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12753: LD_EXP 39
12757: PPUSH
12758: LD_STRING D6-Mike-1
12760: PPUSH
12761: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12765: LD_EXP 39
12769: PPUSH
12770: LD_INT 7
12772: PPUSH
12773: CALL_OW 235
// DialogueOff ;
12777: CALL_OW 7
// end ;
12781: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12782: LD_EXP 15
12786: PPUSH
12787: CALL_OW 310
12791: PUSH
12792: LD_INT 47
12794: EQUAL
12795: IFFALSE 12863
12797: GO 12799
12799: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12800: LD_STRING M1a
12802: PPUSH
12803: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12807: LD_INT 13
12809: PPUSH
12810: LD_INT 7
12812: PPUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12820: LD_INT 29
12822: PPUSH
12823: LD_INT 7
12825: PPUSH
12826: LD_INT 2
12828: PPUSH
12829: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12833: LD_EXP 15
12837: PPUSH
12838: LD_INT 9
12840: PPUSH
12841: CALL_OW 336
// can_escape := true ;
12845: LD_ADDR_EXP 6
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12853: LD_INT 19
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: CALL_OW 424
// end ;
12863: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12864: LD_EXP 17
12868: PPUSH
12869: CALL_OW 256
12873: PUSH
12874: LD_INT 999
12876: LESS
12877: IFFALSE 12928
12879: GO 12881
12881: DISABLE
// begin enable ;
12882: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12883: LD_INT 25
12885: PPUSH
12886: LD_INT 48
12888: PPUSH
12889: CALL_OW 428
12893: PUSH
12894: LD_EXP 17
12898: EQUAL
12899: IFFALSE 12913
// begin RemoveUnit ( Powell ) ;
12901: LD_EXP 17
12905: PPUSH
12906: CALL_OW 64
// disable ;
12910: DISABLE
// end else
12911: GO 12928
// ComMoveXY ( Powell , 25 , 48 ) ;
12913: LD_EXP 17
12917: PPUSH
12918: LD_INT 25
12920: PPUSH
12921: LD_INT 48
12923: PPUSH
12924: CALL_OW 111
// end ;
12928: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12929: LD_INT 22
12931: PUSH
12932: LD_INT 4
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 21
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 3
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: LD_INT 990
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PUSH
12976: LD_EXP 16
12980: DIFF
12981: IFFALSE 13125
12983: GO 12985
12985: DISABLE
12986: LD_INT 0
12988: PPUSH
// begin enable ;
12989: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 22
12997: PUSH
12998: LD_INT 4
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: LD_INT 24
13020: PUSH
13021: LD_INT 990
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: PUSH
13042: LD_EXP 16
13046: DIFF
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13123
// begin ComFree ( i ) ;
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 139
// SetSide ( i , 1 ) ;
13060: LD_VAR 0 1
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_EXP 15
13081: PPUSH
13082: CALL_OW 296
13086: PUSH
13087: LD_INT 14
13089: LESS
13090: IFFALSE 13121
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13092: LD_VAR 0 1
13096: PPUSH
13097: LD_EXP 15
13101: PPUSH
13102: CALL_OW 250
13106: PPUSH
13107: LD_EXP 15
13111: PPUSH
13112: CALL_OW 251
13116: PPUSH
13117: CALL_OW 114
// end ;
13121: GO 13048
13123: POP
13124: POP
// end ;
13125: PPOPN 1
13127: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13128: LD_INT 22
13130: PUSH
13131: LD_INT 4
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 34
13140: PUSH
13141: LD_INT 12
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: IFFALSE 13238
13158: GO 13160
13160: DISABLE
13161: LD_INT 0
13163: PPUSH
// begin enable ;
13164: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13165: LD_ADDR_VAR 0 1
13169: PUSH
13170: LD_INT 22
13172: PUSH
13173: LD_INT 4
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 34
13182: PUSH
13183: LD_INT 12
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: PUSH
13199: FOR_IN
13200: IFFALSE 13236
// if GetDistUnits ( i , JMM ) < 6 then
13202: LD_VAR 0 1
13206: PPUSH
13207: LD_EXP 15
13211: PPUSH
13212: CALL_OW 296
13216: PUSH
13217: LD_INT 6
13219: LESS
13220: IFFALSE 13234
// SetSide ( i , 7 ) ;
13222: LD_VAR 0 1
13226: PPUSH
13227: LD_INT 7
13229: PPUSH
13230: CALL_OW 235
13234: GO 13199
13236: POP
13237: POP
// end ;
13238: PPOPN 1
13240: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13241: LD_EXP 6
13245: PUSH
13246: LD_INT 19
13248: PPUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 7
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 50
13261: PUSH
13262: EMPTY
13263: LIST
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 71
13284: NOT
13285: AND
13286: PUSH
13287: LD_INT 3
13289: PPUSH
13290: CALL_OW 469
13294: NOT
13295: AND
13296: PUSH
13297: LD_INT 5
13299: PPUSH
13300: CALL_OW 469
13304: NOT
13305: AND
13306: IFFALSE 15033
13308: GO 13310
13310: DISABLE
13311: LD_INT 0
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// begin m1 := false ;
13318: LD_ADDR_VAR 0 3
13322: PUSH
13323: LD_INT 0
13325: ST_TO_ADDR
// m2 := false ;
13326: LD_ADDR_VAR 0 4
13330: PUSH
13331: LD_INT 0
13333: ST_TO_ADDR
// m3 := false ;
13334: LD_ADDR_VAR 0 5
13338: PUSH
13339: LD_INT 0
13341: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_EXP 3
13351: PPUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 4
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: ST_TO_ADDR
// if not all_taken then
13385: LD_VAR 0 1
13389: NOT
13390: IFFALSE 13520
// begin if Query ( Q1 ) = 1 then
13392: LD_STRING Q1
13394: PPUSH
13395: CALL_OW 97
13399: PUSH
13400: LD_INT 1
13402: EQUAL
13403: IFFALSE 13520
// begin repeat wait ( 0 0$1 ) ;
13405: LD_INT 35
13407: PPUSH
13408: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13412: LD_EXP 3
13416: PPUSH
13417: LD_INT 22
13419: PUSH
13420: LD_INT 4
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 21
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 72
13445: PUSH
13446: LD_INT 0
13448: EQUAL
13449: PUSH
13450: LD_INT 19
13452: PPUSH
13453: LD_INT 22
13455: PUSH
13456: LD_INT 7
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 71
13488: NOT
13489: AND
13490: PUSH
13491: LD_INT 3
13493: PPUSH
13494: CALL_OW 469
13498: NOT
13499: AND
13500: PUSH
13501: LD_INT 5
13503: PPUSH
13504: CALL_OW 469
13508: NOT
13509: AND
13510: IFFALSE 13405
// all_taken := true ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// end ; end ; if Count ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 6 then
13520: LD_INT 22
13522: PUSH
13523: LD_INT 7
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 50
13542: PUSH
13543: EMPTY
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: PPUSH
13556: CALL 38505 0 1
13560: PUSH
13561: LD_INT 6
13563: LESS
13564: IFFALSE 13575
// begin YouLost ( AlliesLost ) ;
13566: LD_STRING AlliesLost
13568: PPUSH
13569: CALL_OW 104
// exit ;
13573: GO 15033
// end ; if team_kill_counter < 3 then
13575: LD_EXP 9
13579: PUSH
13580: LD_INT 3
13582: LESS
13583: IFFALSE 13599
// Say ( JMM , D5-JMM-1 ) else
13585: LD_EXP 15
13589: PPUSH
13590: LD_STRING D5-JMM-1
13592: PPUSH
13593: CALL_OW 88
13597: GO 13611
// Say ( JMM , D5-JMM-1a ) ;
13599: LD_EXP 15
13603: PPUSH
13604: LD_STRING D5-JMM-1a
13606: PPUSH
13607: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13611: LD_INT 22
13613: PUSH
13614: LD_INT 7
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 1
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 23
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: PPUSH
13646: CALL_OW 69
13650: PUSH
13651: LD_EXP 15
13655: PUSH
13656: LD_EXP 16
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: DIFF
13665: PUSH
13666: LD_INT 10
13668: GREATEREQUAL
13669: IFFALSE 13678
// SetAchievement ( ACH_TEAM ) ;
13671: LD_STRING ACH_TEAM
13673: PPUSH
13674: CALL_OW 543
// if not invis_used then
13678: LD_EXP 12
13682: NOT
13683: IFFALSE 13699
// begin wait ( 3 ) ;
13685: LD_INT 3
13687: PPUSH
13688: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13692: LD_STRING ACH_NOINVIS
13694: PPUSH
13695: CALL_OW 543
// end ; if not alert then
13699: LD_EXP 13
13703: NOT
13704: IFFALSE 13720
// begin wait ( 3 ) ;
13706: LD_INT 3
13708: PPUSH
13709: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13713: LD_STRING ACH_ALARM
13715: PPUSH
13716: CALL_OW 543
// end ; if tick < 15 15$00 then
13720: LD_OWVAR 1
13724: PUSH
13725: LD_INT 31500
13727: LESS
13728: IFFALSE 13744
// begin wait ( 3 ) ;
13730: LD_INT 3
13732: PPUSH
13733: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13737: LD_STRING ACH_ASPEED_16
13739: PPUSH
13740: CALL_OW 543
// end ; if all_taken then
13744: LD_VAR 0 1
13748: IFFALSE 13770
// begin AddMedal ( All , 1 ) ;
13750: LD_STRING All
13752: PPUSH
13753: LD_INT 1
13755: PPUSH
13756: CALL_OW 101
// m1 := true ;
13760: LD_ADDR_VAR 0 3
13764: PUSH
13765: LD_INT 1
13767: ST_TO_ADDR
// end else
13768: GO 13781
// AddMedal ( All , - 1 ) ;
13770: LD_STRING All
13772: PPUSH
13773: LD_INT 1
13775: NEG
13776: PPUSH
13777: CALL_OW 101
// if team_kill_counter then
13781: LD_EXP 9
13785: IFFALSE 13800
// AddMedal ( Save , - 1 ) else
13787: LD_STRING Save
13789: PPUSH
13790: LD_INT 1
13792: NEG
13793: PPUSH
13794: CALL_OW 101
13798: GO 13818
// begin AddMedal ( Save , 1 ) ;
13800: LD_STRING Save
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 101
// m2 := true ;
13810: LD_ADDR_VAR 0 4
13814: PUSH
13815: LD_INT 1
13817: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13818: LD_EXP 8
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 2
13828: PUSH
13829: LD_INT 1
13831: PUSH
13832: LD_INT 1
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: GREATEREQUAL
13847: IFFALSE 13862
// AddMedal ( Friendship , - 1 ) else
13849: LD_STRING Friendship
13851: PPUSH
13852: LD_INT 1
13854: NEG
13855: PPUSH
13856: CALL_OW 101
13860: GO 13880
// begin AddMedal ( Friendship , 1 ) ;
13862: LD_STRING Friendship
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: CALL_OW 101
// m3 := true ;
13872: LD_ADDR_VAR 0 5
13876: PUSH
13877: LD_INT 1
13879: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13880: LD_VAR 0 3
13884: PUSH
13885: LD_VAR 0 4
13889: AND
13890: PUSH
13891: LD_VAR 0 5
13895: AND
13896: PUSH
13897: LD_OWVAR 67
13901: PUSH
13902: LD_INT 3
13904: GREATEREQUAL
13905: AND
13906: IFFALSE 13918
// SetAchievementEX ( ACH_AMER , 16 ) ;
13908: LD_STRING ACH_AMER
13910: PPUSH
13911: LD_INT 16
13913: PPUSH
13914: CALL_OW 564
// GiveMedals ( MAIN ) ;
13918: LD_STRING MAIN
13920: PPUSH
13921: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13925: LD_ADDR_VAR 0 2
13929: PUSH
13930: LD_INT 22
13932: PUSH
13933: LD_INT 7
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 2
13942: PUSH
13943: LD_INT 25
13945: PUSH
13946: LD_INT 1
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 25
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 25
13965: PUSH
13966: LD_INT 3
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 25
13975: PUSH
13976: LD_INT 4
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 25
13985: PUSH
13986: LD_INT 5
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 25
13995: PUSH
13996: LD_INT 8
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 25
14005: PUSH
14006: LD_INT 9
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 25
14015: PUSH
14016: LD_INT 16
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: EMPTY
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
14046: LD_VAR 0 2
14050: PUSH
14051: LD_EXP 16
14055: UNION
14056: PUSH
14057: LD_EXP 39
14061: DIFF
14062: PPUSH
14063: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
14067: LD_EXP 15
14071: PPUSH
14072: LD_STRING 12a_JMM
14074: PPUSH
14075: CALL_OW 38
// if IsLive ( Roth ) then
14079: LD_EXP 16
14083: PPUSH
14084: CALL_OW 300
14088: IFFALSE 14102
// SaveCharacters ( Roth , 12a_Roth ) ;
14090: LD_EXP 16
14094: PPUSH
14095: LD_STRING 12a_Roth
14097: PPUSH
14098: CALL_OW 38
// if Lisa in tmp then
14102: LD_EXP 24
14106: PUSH
14107: LD_VAR 0 2
14111: IN
14112: IFFALSE 14128
// SaveCharacters ( Lisa , 12a_Lisa ) else
14114: LD_EXP 24
14118: PPUSH
14119: LD_STRING 12a_Lisa
14121: PPUSH
14122: CALL_OW 38
14126: GO 14146
// if Lisa then
14128: LD_EXP 24
14132: IFFALSE 14146
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14134: LD_EXP 24
14138: PPUSH
14139: LD_STRING 12p_Lisa
14141: PPUSH
14142: CALL_OW 38
// if Mike in tmp then
14146: LD_EXP 39
14150: PUSH
14151: LD_VAR 0 2
14155: IN
14156: IFFALSE 14170
// SaveCharacters ( Mike , 12a_Mike ) ;
14158: LD_EXP 39
14162: PPUSH
14163: LD_STRING 12a_Mike
14165: PPUSH
14166: CALL_OW 38
// if Donaldson in tmp then
14170: LD_EXP 25
14174: PUSH
14175: LD_VAR 0 2
14179: IN
14180: IFFALSE 14196
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14182: LD_EXP 25
14186: PPUSH
14187: LD_STRING 12a_Donaldson
14189: PPUSH
14190: CALL_OW 38
14194: GO 14214
// if Donaldson then
14196: LD_EXP 25
14200: IFFALSE 14214
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14202: LD_EXP 25
14206: PPUSH
14207: LD_STRING 12p_Donaldson
14209: PPUSH
14210: CALL_OW 38
// if Bobby in tmp then
14214: LD_EXP 26
14218: PUSH
14219: LD_VAR 0 2
14223: IN
14224: IFFALSE 14240
// SaveCharacters ( Bobby , 12a_Bobby ) else
14226: LD_EXP 26
14230: PPUSH
14231: LD_STRING 12a_Bobby
14233: PPUSH
14234: CALL_OW 38
14238: GO 14258
// if Bobby then
14240: LD_EXP 26
14244: IFFALSE 14258
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14246: LD_EXP 26
14250: PPUSH
14251: LD_STRING 12p_Bobby
14253: PPUSH
14254: CALL_OW 38
// if Cyrus in tmp then
14258: LD_EXP 27
14262: PUSH
14263: LD_VAR 0 2
14267: IN
14268: IFFALSE 14284
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14270: LD_EXP 27
14274: PPUSH
14275: LD_STRING 12a_Cyrus
14277: PPUSH
14278: CALL_OW 38
14282: GO 14302
// if Cyrus then
14284: LD_EXP 27
14288: IFFALSE 14302
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14290: LD_EXP 27
14294: PPUSH
14295: LD_STRING 12p_Cyrus
14297: PPUSH
14298: CALL_OW 38
// if Denis in tmp then
14302: LD_EXP 28
14306: PUSH
14307: LD_VAR 0 2
14311: IN
14312: IFFALSE 14326
// SaveCharacters ( Denis , 12a_Denis ) ;
14314: LD_EXP 28
14318: PPUSH
14319: LD_STRING 12a_Denis
14321: PPUSH
14322: CALL_OW 38
// if Brown in tmp then
14326: LD_EXP 29
14330: PUSH
14331: LD_VAR 0 2
14335: IN
14336: IFFALSE 14352
// SaveCharacters ( Brown , 12a_Brown ) else
14338: LD_EXP 29
14342: PPUSH
14343: LD_STRING 12a_Brown
14345: PPUSH
14346: CALL_OW 38
14350: GO 14376
// if Brown in tmp then
14352: LD_EXP 29
14356: PUSH
14357: LD_VAR 0 2
14361: IN
14362: IFFALSE 14376
// SaveCharacters ( Brown , 12p_Brown ) ;
14364: LD_EXP 29
14368: PPUSH
14369: LD_STRING 12p_Brown
14371: PPUSH
14372: CALL_OW 38
// if Gladstone in tmp then
14376: LD_EXP 30
14380: PUSH
14381: LD_VAR 0 2
14385: IN
14386: IFFALSE 14402
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14388: LD_EXP 30
14392: PPUSH
14393: LD_STRING 12a_Gladstone
14395: PPUSH
14396: CALL_OW 38
14400: GO 14420
// if Gladstone then
14402: LD_EXP 30
14406: IFFALSE 14420
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14408: LD_EXP 30
14412: PPUSH
14413: LD_STRING 12p_Gladstone
14415: PPUSH
14416: CALL_OW 38
// if Houten in tmp then
14420: LD_EXP 31
14424: PUSH
14425: LD_VAR 0 2
14429: IN
14430: IFFALSE 14446
// SaveCharacters ( Houten , 12a_Houten ) else
14432: LD_EXP 31
14436: PPUSH
14437: LD_STRING 12a_Houten
14439: PPUSH
14440: CALL_OW 38
14444: GO 14464
// if Houten then
14446: LD_EXP 31
14450: IFFALSE 14464
// SaveCharacters ( Houten , 12p_Houten ) ;
14452: LD_EXP 31
14456: PPUSH
14457: LD_STRING 12p_Houten
14459: PPUSH
14460: CALL_OW 38
// if Cornel in tmp then
14464: LD_EXP 32
14468: PUSH
14469: LD_VAR 0 2
14473: IN
14474: IFFALSE 14490
// SaveCharacters ( Cornel , 12a_Cornell ) else
14476: LD_EXP 32
14480: PPUSH
14481: LD_STRING 12a_Cornell
14483: PPUSH
14484: CALL_OW 38
14488: GO 14508
// if Cornel then
14490: LD_EXP 32
14494: IFFALSE 14508
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14496: LD_EXP 32
14500: PPUSH
14501: LD_STRING 12p_Cornell
14503: PPUSH
14504: CALL_OW 38
// if Gary in tmp then
14508: LD_EXP 33
14512: PUSH
14513: LD_VAR 0 2
14517: IN
14518: IFFALSE 14534
// SaveCharacters ( Gary , 12a_Gary ) else
14520: LD_EXP 33
14524: PPUSH
14525: LD_STRING 12a_Gary
14527: PPUSH
14528: CALL_OW 38
14532: GO 14552
// if Gary then
14534: LD_EXP 33
14538: IFFALSE 14552
// SaveCharacters ( Gary , 12p_Gary ) ;
14540: LD_EXP 33
14544: PPUSH
14545: LD_STRING 12p_Gary
14547: PPUSH
14548: CALL_OW 38
// if Frank in tmp then
14552: LD_EXP 34
14556: PUSH
14557: LD_VAR 0 2
14561: IN
14562: IFFALSE 14576
// SaveCharacters ( Frank , 12a_Frank ) ;
14564: LD_EXP 34
14568: PPUSH
14569: LD_STRING 12a_Frank
14571: PPUSH
14572: CALL_OW 38
// if Kikuchi in tmp then
14576: LD_EXP 35
14580: PUSH
14581: LD_VAR 0 2
14585: IN
14586: IFFALSE 14602
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14588: LD_EXP 35
14592: PPUSH
14593: LD_STRING 12a_Kikuchi
14595: PPUSH
14596: CALL_OW 38
14600: GO 14620
// if Kikuchi then
14602: LD_EXP 35
14606: IFFALSE 14620
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14608: LD_EXP 35
14612: PPUSH
14613: LD_STRING 12p_Kikuchi
14615: PPUSH
14616: CALL_OW 38
// if Simms in tmp then
14620: LD_EXP 36
14624: PUSH
14625: LD_VAR 0 2
14629: IN
14630: IFFALSE 14644
// SaveCharacters ( Simms , 12a_Simms ) ;
14632: LD_EXP 36
14636: PPUSH
14637: LD_STRING 12a_Simms
14639: PPUSH
14640: CALL_OW 38
// if Joan in tmp then
14644: LD_EXP 37
14648: PUSH
14649: LD_VAR 0 2
14653: IN
14654: IFFALSE 14668
// SaveCharacters ( Joan , 12a_Joan ) ;
14656: LD_EXP 37
14660: PPUSH
14661: LD_STRING 12a_Joan
14663: PPUSH
14664: CALL_OW 38
// if DeltaDoctor in tmp then
14668: LD_EXP 38
14672: PUSH
14673: LD_VAR 0 2
14677: IN
14678: IFFALSE 14692
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14680: LD_EXP 38
14684: PPUSH
14685: LD_STRING 12a_DeltaDoctor
14687: PPUSH
14688: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14692: LD_ADDR_VAR 0 2
14696: PUSH
14697: LD_VAR 0 2
14701: PUSH
14702: LD_EXP 15
14706: PUSH
14707: LD_EXP 16
14711: PUSH
14712: LD_EXP 24
14716: PUSH
14717: LD_EXP 25
14721: PUSH
14722: LD_EXP 26
14726: PUSH
14727: LD_EXP 27
14731: PUSH
14732: LD_EXP 28
14736: PUSH
14737: LD_EXP 29
14741: PUSH
14742: LD_EXP 30
14746: PUSH
14747: LD_EXP 31
14751: PUSH
14752: LD_EXP 32
14756: PUSH
14757: LD_EXP 33
14761: PUSH
14762: LD_EXP 34
14766: PUSH
14767: LD_EXP 35
14771: PUSH
14772: LD_EXP 36
14776: PUSH
14777: LD_EXP 37
14781: PUSH
14782: LD_EXP 38
14786: PUSH
14787: LD_EXP 39
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: DIFF
14812: ST_TO_ADDR
// if tmp then
14813: LD_VAR 0 2
14817: IFFALSE 14831
// SaveCharacters ( tmp , 12a_others ) ;
14819: LD_VAR 0 2
14823: PPUSH
14824: LD_STRING 12a_others
14826: PPUSH
14827: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: LD_INT 21
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 23
14848: PUSH
14849: LD_INT 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 2
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 69
14893: PUSH
14894: LD_EXP 15
14898: PUSH
14899: LD_EXP 16
14903: PUSH
14904: LD_EXP 24
14908: PUSH
14909: LD_EXP 25
14913: PUSH
14914: LD_EXP 26
14918: PUSH
14919: LD_EXP 27
14923: PUSH
14924: LD_EXP 28
14928: PUSH
14929: LD_EXP 29
14933: PUSH
14934: LD_EXP 30
14938: PUSH
14939: LD_EXP 31
14943: PUSH
14944: LD_EXP 32
14948: PUSH
14949: LD_EXP 33
14953: PUSH
14954: LD_EXP 34
14958: PUSH
14959: LD_EXP 35
14963: PUSH
14964: LD_EXP 36
14968: PUSH
14969: LD_EXP 37
14973: PUSH
14974: LD_EXP 38
14978: PUSH
14979: LD_EXP 17
14983: PUSH
14984: LD_EXP 39
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: DIFF
15010: ST_TO_ADDR
// if tmp then
15011: LD_VAR 0 2
15015: IFFALSE 15029
// SaveCharacters ( tmp , 12p_others ) ;
15017: LD_VAR 0 2
15021: PPUSH
15022: LD_STRING 12p_others
15024: PPUSH
15025: CALL_OW 38
// YouWin ;
15029: CALL_OW 103
// end ; end_of_file
15033: PPOPN 5
15035: END
// on SailEvent ( event ) do var tmp ;
15036: LD_INT 0
15038: PPUSH
// begin if event = 1 then
15039: LD_VAR 0 1
15043: PUSH
15044: LD_INT 1
15046: EQUAL
15047: IFFALSE 15120
// begin if not mobile_patrol then
15049: LD_EXP 18
15053: NOT
15054: IFFALSE 15058
// exit ;
15056: GO 15120
// tmp := mobile_patrol [ mobile_patrol ] ;
15058: LD_ADDR_VAR 0 2
15062: PUSH
15063: LD_EXP 18
15067: PUSH
15068: LD_EXP 18
15072: ARRAY
15073: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
15074: LD_ADDR_EXP 18
15078: PUSH
15079: LD_EXP 18
15083: PPUSH
15084: LD_EXP 18
15088: PPUSH
15089: CALL_OW 3
15093: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
15094: LD_VAR 0 2
15098: PPUSH
15099: LD_EXP 19
15103: PUSH
15104: LD_EXP 18
15108: PUSH
15109: LD_INT 1
15111: PLUS
15112: ARRAY
15113: PPUSH
15114: EMPTY
15115: PPUSH
15116: CALL 7021 0 3
// end ; end ;
15120: PPOPN 2
15122: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL 31509 0 1
// if un = JMM then
15132: LD_VAR 0 1
15136: PUSH
15137: LD_EXP 15
15141: EQUAL
15142: IFFALSE 15151
// YouLost ( JMM ) ;
15144: LD_STRING JMM
15146: PPUSH
15147: CALL_OW 104
// if un = Powell then
15151: LD_VAR 0 1
15155: PUSH
15156: LD_EXP 17
15160: EQUAL
15161: IFFALSE 15173
// SaveVariable ( true , 12a_PowellKilled ) ;
15163: LD_INT 1
15165: PPUSH
15166: LD_STRING 12a_PowellKilled
15168: PPUSH
15169: CALL_OW 39
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 255
15182: PUSH
15183: LD_INT 7
15185: EQUAL
15186: PUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 264
15196: PUSH
15197: LD_INT 12
15199: EQUAL
15200: AND
15201: IFFALSE 15210
// YouLost ( Artifact ) ;
15203: LD_STRING Artifact
15205: PPUSH
15206: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 255
15219: PUSH
15220: LD_INT 7
15222: EQUAL
15223: PUSH
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 247
15233: PUSH
15234: LD_INT 1
15236: EQUAL
15237: AND
15238: PUSH
15239: LD_VAR 0 1
15243: PUSH
15244: LD_EXP 16
15248: EQUAL
15249: OR
15250: IFFALSE 15266
// team_kill_counter := team_kill_counter + 1 ;
15252: LD_ADDR_EXP 9
15256: PUSH
15257: LD_EXP 9
15261: PUSH
15262: LD_INT 1
15264: PLUS
15265: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 255
15275: PUSH
15276: LD_INT 1
15278: EQUAL
15279: PUSH
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 247
15289: PUSH
15290: LD_INT 1
15292: EQUAL
15293: AND
15294: IFFALSE 15310
// friends_kill_counter := friends_kill_counter + 1 ;
15296: LD_ADDR_EXP 8
15300: PUSH
15301: LD_EXP 8
15305: PUSH
15306: LD_INT 1
15308: PLUS
15309: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15310: LD_VAR 0 1
15314: PPUSH
15315: CALL_OW 255
15319: PUSH
15320: LD_INT 1
15322: NONEQUAL
15323: IFFALSE 15327
// exit ;
15325: GO 15429
// if GetControl ( un ) = control_remote then
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 263
15336: PUSH
15337: LD_INT 2
15339: EQUAL
15340: IFFALSE 15358
// defenders := defenders diff un ;
15342: LD_ADDR_EXP 21
15346: PUSH
15347: LD_EXP 21
15351: PUSH
15352: LD_VAR 0 1
15356: DIFF
15357: ST_TO_ADDR
// if not un in defenders then
15358: LD_VAR 0 1
15362: PUSH
15363: LD_EXP 21
15367: IN
15368: NOT
15369: IFFALSE 15429
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15371: LD_ADDR_EXP 22
15375: PUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 250
15385: PUSH
15386: LD_VAR 0 1
15390: PPUSH
15391: CALL_OW 251
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: ST_TO_ADDR
// def_counter := Inc ( def_counter ) ;
15400: LD_ADDR_EXP 14
15404: PUSH
15405: LD_EXP 14
15409: PPUSH
15410: CALL 75455 0 1
15414: ST_TO_ADDR
// if def_counter < 4 then
15415: LD_EXP 14
15419: PUSH
15420: LD_INT 4
15422: LESS
15423: IFFALSE 15429
// Defend ;
15425: CALL 2958 0 0
// end ; end ;
15429: PPOPN 1
15431: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL 31629 0 2
// if GetSide ( veh ) <> 1 then
15446: LD_VAR 0 1
15450: PPUSH
15451: CALL_OW 255
15455: PUSH
15456: LD_INT 1
15458: NONEQUAL
15459: IFFALSE 15463
// exit ;
15461: GO 15487
// if GetControl ( veh ) = control_remote then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 263
15472: PUSH
15473: LD_INT 2
15475: EQUAL
15476: IFFALSE 15487
// Connect ( veh ) ;
15478: LD_VAR 0 1
15482: PPUSH
15483: CALL 44711 0 1
// end ;
15487: PPOPN 2
15489: END
// on UnitGoesToRed ( un ) do var i , veh ;
15490: LD_INT 0
15492: PPUSH
15493: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15494: LD_VAR 0 1
15498: PPUSH
15499: CALL_OW 255
15503: PUSH
15504: LD_INT 1
15506: EQUAL
15507: PUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 263
15517: PUSH
15518: LD_INT 2
15520: EQUAL
15521: AND
15522: IFFALSE 15533
// ComUnlink ( un ) ;
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 136
// if un = ambar0 then
15533: LD_VAR 0 1
15537: PUSH
15538: LD_INT 18
15540: EQUAL
15541: IFFALSE 15651
// begin uc_side := 1 ;
15543: LD_ADDR_OWVAR 20
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// uc_nation := 1 ;
15551: LD_ADDR_OWVAR 21
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// for i = 1 to 6 do
15559: LD_ADDR_VAR 0 2
15563: PUSH
15564: DOUBLE
15565: LD_INT 1
15567: DEC
15568: ST_TO_ADDR
15569: LD_INT 6
15571: PUSH
15572: FOR_TO
15573: IFFALSE 15649
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15575: LD_INT 3
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_INT 3
15583: PPUSH
15584: LD_INT 4
15586: PPUSH
15587: LD_INT 100
15589: PPUSH
15590: CALL 41243 0 5
// veh := CreateVehicle ;
15594: LD_ADDR_VAR 0 3
15598: PUSH
15599: CALL_OW 45
15603: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15604: LD_VAR 0 3
15608: PPUSH
15609: LD_INT 1
15611: PPUSH
15612: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_INT 25
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: CALL_OW 49
// defenders := defenders ^ veh ;
15631: LD_ADDR_EXP 21
15635: PUSH
15636: LD_EXP 21
15640: PUSH
15641: LD_VAR 0 3
15645: ADD
15646: ST_TO_ADDR
// end ;
15647: GO 15572
15649: POP
15650: POP
// end ; end ;
15651: PPOPN 3
15653: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15654: LD_VAR 0 2
15658: PUSH
15659: LD_EXP 17
15663: EQUAL
15664: IFFALSE 15675
// RemoveUnit ( Powell ) ;
15666: LD_EXP 17
15670: PPUSH
15671: CALL_OW 64
// end ;
15675: PPOPN 2
15677: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15678: LD_VAR 0 1
15682: PPUSH
15683: CALL 31613 0 1
// end ; end_of_file end_of_file
15687: PPOPN 1
15689: END
// export globalGameSaveCounter ; every 0 0$1 do
15690: GO 15692
15692: DISABLE
// begin enable ;
15693: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15694: LD_STRING updateTimer(
15696: PUSH
15697: LD_OWVAR 1
15701: STR
15702: PUSH
15703: LD_STRING );
15705: STR
15706: PPUSH
15707: CALL_OW 559
// end ;
15711: END
// every 0 0$1 do
15712: GO 15714
15714: DISABLE
// begin globalGameSaveCounter := 0 ;
15715: LD_ADDR_EXP 40
15719: PUSH
15720: LD_INT 0
15722: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15723: LD_STRING setGameSaveCounter(0)
15725: PPUSH
15726: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15730: LD_STRING initStreamRollete();
15732: PPUSH
15733: CALL_OW 559
// InitStreamMode ;
15737: CALL 17080 0 0
// DefineStreamItems ( false ) ;
15741: LD_INT 0
15743: PPUSH
15744: CALL 17544 0 1
// end ;
15748: END
// export function SOS_MapStart ( ) ; begin
15749: LD_INT 0
15751: PPUSH
// if streamModeActive then
15752: LD_EXP 41
15756: IFFALSE 15765
// DefineStreamItems ( true ) ;
15758: LD_INT 1
15760: PPUSH
15761: CALL 17544 0 1
// UpdateLuaVariables ( ) ;
15765: CALL 15782 0 0
// UpdateFactoryWaypoints ( ) ;
15769: CALL 30413 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15773: CALL 30670 0 0
// end ;
15777: LD_VAR 0 1
15781: RET
// function UpdateLuaVariables ( ) ; begin
15782: LD_INT 0
15784: PPUSH
// if globalGameSaveCounter then
15785: LD_EXP 40
15789: IFFALSE 15823
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15791: LD_ADDR_EXP 40
15795: PUSH
15796: LD_EXP 40
15800: PPUSH
15801: CALL 75455 0 1
15805: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15806: LD_STRING setGameSaveCounter(
15808: PUSH
15809: LD_EXP 40
15813: STR
15814: PUSH
15815: LD_STRING )
15817: STR
15818: PPUSH
15819: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15823: LD_STRING setGameDifficulty(
15825: PUSH
15826: LD_OWVAR 67
15830: STR
15831: PUSH
15832: LD_STRING )
15834: STR
15835: PPUSH
15836: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15840: LD_STRING displayDifficulty(
15842: PUSH
15843: LD_OWVAR 67
15847: STR
15848: PUSH
15849: LD_STRING )
15851: STR
15852: PPUSH
15853: CALL_OW 559
// end ;
15857: LD_VAR 0 1
15861: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15862: LD_INT 0
15864: PPUSH
// if p2 = stream_mode then
15865: LD_VAR 0 2
15869: PUSH
15870: LD_INT 100
15872: EQUAL
15873: IFFALSE 16876
// begin if not StreamModeActive then
15875: LD_EXP 41
15879: NOT
15880: IFFALSE 15890
// StreamModeActive := true ;
15882: LD_ADDR_EXP 41
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 0 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 0
15897: EQUAL
15898: IFFALSE 15904
// InitStreamMode ;
15900: CALL 17080 0 0
// if p3 = 1 then
15904: LD_VAR 0 3
15908: PUSH
15909: LD_INT 1
15911: EQUAL
15912: IFFALSE 15922
// sRocket := true ;
15914: LD_ADDR_EXP 46
15918: PUSH
15919: LD_INT 1
15921: ST_TO_ADDR
// if p3 = 2 then
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 2
15929: EQUAL
15930: IFFALSE 15940
// sSpeed := true ;
15932: LD_ADDR_EXP 45
15936: PUSH
15937: LD_INT 1
15939: ST_TO_ADDR
// if p3 = 3 then
15940: LD_VAR 0 3
15944: PUSH
15945: LD_INT 3
15947: EQUAL
15948: IFFALSE 15958
// sEngine := true ;
15950: LD_ADDR_EXP 47
15954: PUSH
15955: LD_INT 1
15957: ST_TO_ADDR
// if p3 = 4 then
15958: LD_VAR 0 3
15962: PUSH
15963: LD_INT 4
15965: EQUAL
15966: IFFALSE 15976
// sSpec := true ;
15968: LD_ADDR_EXP 44
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// if p3 = 5 then
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 5
15983: EQUAL
15984: IFFALSE 15994
// sLevel := true ;
15986: LD_ADDR_EXP 48
15990: PUSH
15991: LD_INT 1
15993: ST_TO_ADDR
// if p3 = 6 then
15994: LD_VAR 0 3
15998: PUSH
15999: LD_INT 6
16001: EQUAL
16002: IFFALSE 16012
// sArmoury := true ;
16004: LD_ADDR_EXP 49
16008: PUSH
16009: LD_INT 1
16011: ST_TO_ADDR
// if p3 = 7 then
16012: LD_VAR 0 3
16016: PUSH
16017: LD_INT 7
16019: EQUAL
16020: IFFALSE 16030
// sRadar := true ;
16022: LD_ADDR_EXP 50
16026: PUSH
16027: LD_INT 1
16029: ST_TO_ADDR
// if p3 = 8 then
16030: LD_VAR 0 3
16034: PUSH
16035: LD_INT 8
16037: EQUAL
16038: IFFALSE 16048
// sBunker := true ;
16040: LD_ADDR_EXP 51
16044: PUSH
16045: LD_INT 1
16047: ST_TO_ADDR
// if p3 = 9 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 9
16055: EQUAL
16056: IFFALSE 16066
// sHack := true ;
16058: LD_ADDR_EXP 52
16062: PUSH
16063: LD_INT 1
16065: ST_TO_ADDR
// if p3 = 10 then
16066: LD_VAR 0 3
16070: PUSH
16071: LD_INT 10
16073: EQUAL
16074: IFFALSE 16084
// sFire := true ;
16076: LD_ADDR_EXP 53
16080: PUSH
16081: LD_INT 1
16083: ST_TO_ADDR
// if p3 = 11 then
16084: LD_VAR 0 3
16088: PUSH
16089: LD_INT 11
16091: EQUAL
16092: IFFALSE 16102
// sRefresh := true ;
16094: LD_ADDR_EXP 54
16098: PUSH
16099: LD_INT 1
16101: ST_TO_ADDR
// if p3 = 12 then
16102: LD_VAR 0 3
16106: PUSH
16107: LD_INT 12
16109: EQUAL
16110: IFFALSE 16120
// sExp := true ;
16112: LD_ADDR_EXP 55
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// if p3 = 13 then
16120: LD_VAR 0 3
16124: PUSH
16125: LD_INT 13
16127: EQUAL
16128: IFFALSE 16138
// sDepot := true ;
16130: LD_ADDR_EXP 56
16134: PUSH
16135: LD_INT 1
16137: ST_TO_ADDR
// if p3 = 14 then
16138: LD_VAR 0 3
16142: PUSH
16143: LD_INT 14
16145: EQUAL
16146: IFFALSE 16156
// sFlag := true ;
16148: LD_ADDR_EXP 57
16152: PUSH
16153: LD_INT 1
16155: ST_TO_ADDR
// if p3 = 15 then
16156: LD_VAR 0 3
16160: PUSH
16161: LD_INT 15
16163: EQUAL
16164: IFFALSE 16174
// sKamikadze := true ;
16166: LD_ADDR_EXP 65
16170: PUSH
16171: LD_INT 1
16173: ST_TO_ADDR
// if p3 = 16 then
16174: LD_VAR 0 3
16178: PUSH
16179: LD_INT 16
16181: EQUAL
16182: IFFALSE 16192
// sTroll := true ;
16184: LD_ADDR_EXP 66
16188: PUSH
16189: LD_INT 1
16191: ST_TO_ADDR
// if p3 = 17 then
16192: LD_VAR 0 3
16196: PUSH
16197: LD_INT 17
16199: EQUAL
16200: IFFALSE 16210
// sSlow := true ;
16202: LD_ADDR_EXP 67
16206: PUSH
16207: LD_INT 1
16209: ST_TO_ADDR
// if p3 = 18 then
16210: LD_VAR 0 3
16214: PUSH
16215: LD_INT 18
16217: EQUAL
16218: IFFALSE 16228
// sLack := true ;
16220: LD_ADDR_EXP 68
16224: PUSH
16225: LD_INT 1
16227: ST_TO_ADDR
// if p3 = 19 then
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 19
16235: EQUAL
16236: IFFALSE 16246
// sTank := true ;
16238: LD_ADDR_EXP 70
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// if p3 = 20 then
16246: LD_VAR 0 3
16250: PUSH
16251: LD_INT 20
16253: EQUAL
16254: IFFALSE 16264
// sRemote := true ;
16256: LD_ADDR_EXP 71
16260: PUSH
16261: LD_INT 1
16263: ST_TO_ADDR
// if p3 = 21 then
16264: LD_VAR 0 3
16268: PUSH
16269: LD_INT 21
16271: EQUAL
16272: IFFALSE 16282
// sPowell := true ;
16274: LD_ADDR_EXP 72
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// if p3 = 22 then
16282: LD_VAR 0 3
16286: PUSH
16287: LD_INT 22
16289: EQUAL
16290: IFFALSE 16300
// sTeleport := true ;
16292: LD_ADDR_EXP 75
16296: PUSH
16297: LD_INT 1
16299: ST_TO_ADDR
// if p3 = 23 then
16300: LD_VAR 0 3
16304: PUSH
16305: LD_INT 23
16307: EQUAL
16308: IFFALSE 16318
// sOilTower := true ;
16310: LD_ADDR_EXP 77
16314: PUSH
16315: LD_INT 1
16317: ST_TO_ADDR
// if p3 = 24 then
16318: LD_VAR 0 3
16322: PUSH
16323: LD_INT 24
16325: EQUAL
16326: IFFALSE 16336
// sShovel := true ;
16328: LD_ADDR_EXP 78
16332: PUSH
16333: LD_INT 1
16335: ST_TO_ADDR
// if p3 = 25 then
16336: LD_VAR 0 3
16340: PUSH
16341: LD_INT 25
16343: EQUAL
16344: IFFALSE 16354
// sSheik := true ;
16346: LD_ADDR_EXP 79
16350: PUSH
16351: LD_INT 1
16353: ST_TO_ADDR
// if p3 = 26 then
16354: LD_VAR 0 3
16358: PUSH
16359: LD_INT 26
16361: EQUAL
16362: IFFALSE 16372
// sEarthquake := true ;
16364: LD_ADDR_EXP 81
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// if p3 = 27 then
16372: LD_VAR 0 3
16376: PUSH
16377: LD_INT 27
16379: EQUAL
16380: IFFALSE 16390
// sAI := true ;
16382: LD_ADDR_EXP 82
16386: PUSH
16387: LD_INT 1
16389: ST_TO_ADDR
// if p3 = 28 then
16390: LD_VAR 0 3
16394: PUSH
16395: LD_INT 28
16397: EQUAL
16398: IFFALSE 16408
// sCargo := true ;
16400: LD_ADDR_EXP 85
16404: PUSH
16405: LD_INT 1
16407: ST_TO_ADDR
// if p3 = 29 then
16408: LD_VAR 0 3
16412: PUSH
16413: LD_INT 29
16415: EQUAL
16416: IFFALSE 16426
// sDLaser := true ;
16418: LD_ADDR_EXP 86
16422: PUSH
16423: LD_INT 1
16425: ST_TO_ADDR
// if p3 = 30 then
16426: LD_VAR 0 3
16430: PUSH
16431: LD_INT 30
16433: EQUAL
16434: IFFALSE 16444
// sExchange := true ;
16436: LD_ADDR_EXP 87
16440: PUSH
16441: LD_INT 1
16443: ST_TO_ADDR
// if p3 = 31 then
16444: LD_VAR 0 3
16448: PUSH
16449: LD_INT 31
16451: EQUAL
16452: IFFALSE 16462
// sFac := true ;
16454: LD_ADDR_EXP 88
16458: PUSH
16459: LD_INT 1
16461: ST_TO_ADDR
// if p3 = 32 then
16462: LD_VAR 0 3
16466: PUSH
16467: LD_INT 32
16469: EQUAL
16470: IFFALSE 16480
// sPower := true ;
16472: LD_ADDR_EXP 89
16476: PUSH
16477: LD_INT 1
16479: ST_TO_ADDR
// if p3 = 33 then
16480: LD_VAR 0 3
16484: PUSH
16485: LD_INT 33
16487: EQUAL
16488: IFFALSE 16498
// sRandom := true ;
16490: LD_ADDR_EXP 90
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
// if p3 = 34 then
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 34
16505: EQUAL
16506: IFFALSE 16516
// sShield := true ;
16508: LD_ADDR_EXP 91
16512: PUSH
16513: LD_INT 1
16515: ST_TO_ADDR
// if p3 = 35 then
16516: LD_VAR 0 3
16520: PUSH
16521: LD_INT 35
16523: EQUAL
16524: IFFALSE 16534
// sTime := true ;
16526: LD_ADDR_EXP 92
16530: PUSH
16531: LD_INT 1
16533: ST_TO_ADDR
// if p3 = 36 then
16534: LD_VAR 0 3
16538: PUSH
16539: LD_INT 36
16541: EQUAL
16542: IFFALSE 16552
// sTools := true ;
16544: LD_ADDR_EXP 93
16548: PUSH
16549: LD_INT 1
16551: ST_TO_ADDR
// if p3 = 101 then
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 101
16559: EQUAL
16560: IFFALSE 16570
// sSold := true ;
16562: LD_ADDR_EXP 58
16566: PUSH
16567: LD_INT 1
16569: ST_TO_ADDR
// if p3 = 102 then
16570: LD_VAR 0 3
16574: PUSH
16575: LD_INT 102
16577: EQUAL
16578: IFFALSE 16588
// sDiff := true ;
16580: LD_ADDR_EXP 59
16584: PUSH
16585: LD_INT 1
16587: ST_TO_ADDR
// if p3 = 103 then
16588: LD_VAR 0 3
16592: PUSH
16593: LD_INT 103
16595: EQUAL
16596: IFFALSE 16606
// sFog := true ;
16598: LD_ADDR_EXP 62
16602: PUSH
16603: LD_INT 1
16605: ST_TO_ADDR
// if p3 = 104 then
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 104
16613: EQUAL
16614: IFFALSE 16624
// sReset := true ;
16616: LD_ADDR_EXP 63
16620: PUSH
16621: LD_INT 1
16623: ST_TO_ADDR
// if p3 = 105 then
16624: LD_VAR 0 3
16628: PUSH
16629: LD_INT 105
16631: EQUAL
16632: IFFALSE 16642
// sSun := true ;
16634: LD_ADDR_EXP 64
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// if p3 = 106 then
16642: LD_VAR 0 3
16646: PUSH
16647: LD_INT 106
16649: EQUAL
16650: IFFALSE 16660
// sTiger := true ;
16652: LD_ADDR_EXP 60
16656: PUSH
16657: LD_INT 1
16659: ST_TO_ADDR
// if p3 = 107 then
16660: LD_VAR 0 3
16664: PUSH
16665: LD_INT 107
16667: EQUAL
16668: IFFALSE 16678
// sBomb := true ;
16670: LD_ADDR_EXP 61
16674: PUSH
16675: LD_INT 1
16677: ST_TO_ADDR
// if p3 = 108 then
16678: LD_VAR 0 3
16682: PUSH
16683: LD_INT 108
16685: EQUAL
16686: IFFALSE 16696
// sWound := true ;
16688: LD_ADDR_EXP 69
16692: PUSH
16693: LD_INT 1
16695: ST_TO_ADDR
// if p3 = 109 then
16696: LD_VAR 0 3
16700: PUSH
16701: LD_INT 109
16703: EQUAL
16704: IFFALSE 16714
// sBetray := true ;
16706: LD_ADDR_EXP 73
16710: PUSH
16711: LD_INT 1
16713: ST_TO_ADDR
// if p3 = 110 then
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 110
16721: EQUAL
16722: IFFALSE 16732
// sContamin := true ;
16724: LD_ADDR_EXP 74
16728: PUSH
16729: LD_INT 1
16731: ST_TO_ADDR
// if p3 = 111 then
16732: LD_VAR 0 3
16736: PUSH
16737: LD_INT 111
16739: EQUAL
16740: IFFALSE 16750
// sOil := true ;
16742: LD_ADDR_EXP 76
16746: PUSH
16747: LD_INT 1
16749: ST_TO_ADDR
// if p3 = 112 then
16750: LD_VAR 0 3
16754: PUSH
16755: LD_INT 112
16757: EQUAL
16758: IFFALSE 16768
// sStu := true ;
16760: LD_ADDR_EXP 80
16764: PUSH
16765: LD_INT 1
16767: ST_TO_ADDR
// if p3 = 113 then
16768: LD_VAR 0 3
16772: PUSH
16773: LD_INT 113
16775: EQUAL
16776: IFFALSE 16786
// sBazooka := true ;
16778: LD_ADDR_EXP 83
16782: PUSH
16783: LD_INT 1
16785: ST_TO_ADDR
// if p3 = 114 then
16786: LD_VAR 0 3
16790: PUSH
16791: LD_INT 114
16793: EQUAL
16794: IFFALSE 16804
// sMortar := true ;
16796: LD_ADDR_EXP 84
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// if p3 = 115 then
16804: LD_VAR 0 3
16808: PUSH
16809: LD_INT 115
16811: EQUAL
16812: IFFALSE 16822
// sRanger := true ;
16814: LD_ADDR_EXP 94
16818: PUSH
16819: LD_INT 1
16821: ST_TO_ADDR
// if p3 = 116 then
16822: LD_VAR 0 3
16826: PUSH
16827: LD_INT 116
16829: EQUAL
16830: IFFALSE 16840
// sComputer := true ;
16832: LD_ADDR_EXP 95
16836: PUSH
16837: LD_INT 1
16839: ST_TO_ADDR
// if p3 = 117 then
16840: LD_VAR 0 3
16844: PUSH
16845: LD_INT 117
16847: EQUAL
16848: IFFALSE 16858
// s30 := true ;
16850: LD_ADDR_EXP 96
16854: PUSH
16855: LD_INT 1
16857: ST_TO_ADDR
// if p3 = 118 then
16858: LD_VAR 0 3
16862: PUSH
16863: LD_INT 118
16865: EQUAL
16866: IFFALSE 16876
// s60 := true ;
16868: LD_ADDR_EXP 97
16872: PUSH
16873: LD_INT 1
16875: ST_TO_ADDR
// end ; if p2 = hack_mode then
16876: LD_VAR 0 2
16880: PUSH
16881: LD_INT 101
16883: EQUAL
16884: IFFALSE 17012
// begin case p3 of 1 :
16886: LD_VAR 0 3
16890: PUSH
16891: LD_INT 1
16893: DOUBLE
16894: EQUAL
16895: IFTRUE 16899
16897: GO 16906
16899: POP
// hHackUnlimitedResources ; 2 :
16900: CALL 29159 0 0
16904: GO 17012
16906: LD_INT 2
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16921
16914: POP
// hHackSetLevel10 ; 3 :
16915: CALL 29292 0 0
16919: GO 17012
16921: LD_INT 3
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 16936
16929: POP
// hHackSetLevel10YourUnits ; 4 :
16930: CALL 29377 0 0
16934: GO 17012
16936: LD_INT 4
16938: DOUBLE
16939: EQUAL
16940: IFTRUE 16944
16942: GO 16951
16944: POP
// hHackInvincible ; 5 :
16945: CALL 29825 0 0
16949: GO 17012
16951: LD_INT 5
16953: DOUBLE
16954: EQUAL
16955: IFTRUE 16959
16957: GO 16966
16959: POP
// hHackInvisible ; 6 :
16960: CALL 29936 0 0
16964: GO 17012
16966: LD_INT 6
16968: DOUBLE
16969: EQUAL
16970: IFTRUE 16974
16972: GO 16981
16974: POP
// hHackChangeYourSide ; 7 :
16975: CALL 29993 0 0
16979: GO 17012
16981: LD_INT 7
16983: DOUBLE
16984: EQUAL
16985: IFTRUE 16989
16987: GO 16996
16989: POP
// hHackChangeUnitSide ; 8 :
16990: CALL 30035 0 0
16994: GO 17012
16996: LD_INT 8
16998: DOUBLE
16999: EQUAL
17000: IFTRUE 17004
17002: GO 17011
17004: POP
// hHackFog ; end ;
17005: CALL 30136 0 0
17009: GO 17012
17011: POP
// end ; if p2 = game_save_mode then
17012: LD_VAR 0 2
17016: PUSH
17017: LD_INT 102
17019: EQUAL
17020: IFFALSE 17075
// begin if p3 = 1 then
17022: LD_VAR 0 3
17026: PUSH
17027: LD_INT 1
17029: EQUAL
17030: IFFALSE 17042
// globalGameSaveCounter := p4 ;
17032: LD_ADDR_EXP 40
17036: PUSH
17037: LD_VAR 0 4
17041: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17042: LD_VAR 0 3
17046: PUSH
17047: LD_INT 2
17049: EQUAL
17050: PUSH
17051: LD_EXP 40
17055: AND
17056: IFFALSE 17075
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17058: LD_STRING setGameSaveCounter(
17060: PUSH
17061: LD_EXP 40
17065: STR
17066: PUSH
17067: LD_STRING )
17069: STR
17070: PPUSH
17071: CALL_OW 559
// end ; end ;
17075: LD_VAR 0 7
17079: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17080: LD_INT 0
17082: PPUSH
// streamModeActive := false ;
17083: LD_ADDR_EXP 41
17087: PUSH
17088: LD_INT 0
17090: ST_TO_ADDR
// normalCounter := 36 ;
17091: LD_ADDR_EXP 42
17095: PUSH
17096: LD_INT 36
17098: ST_TO_ADDR
// hardcoreCounter := 18 ;
17099: LD_ADDR_EXP 43
17103: PUSH
17104: LD_INT 18
17106: ST_TO_ADDR
// sRocket := false ;
17107: LD_ADDR_EXP 46
17111: PUSH
17112: LD_INT 0
17114: ST_TO_ADDR
// sSpeed := false ;
17115: LD_ADDR_EXP 45
17119: PUSH
17120: LD_INT 0
17122: ST_TO_ADDR
// sEngine := false ;
17123: LD_ADDR_EXP 47
17127: PUSH
17128: LD_INT 0
17130: ST_TO_ADDR
// sSpec := false ;
17131: LD_ADDR_EXP 44
17135: PUSH
17136: LD_INT 0
17138: ST_TO_ADDR
// sLevel := false ;
17139: LD_ADDR_EXP 48
17143: PUSH
17144: LD_INT 0
17146: ST_TO_ADDR
// sArmoury := false ;
17147: LD_ADDR_EXP 49
17151: PUSH
17152: LD_INT 0
17154: ST_TO_ADDR
// sRadar := false ;
17155: LD_ADDR_EXP 50
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// sBunker := false ;
17163: LD_ADDR_EXP 51
17167: PUSH
17168: LD_INT 0
17170: ST_TO_ADDR
// sHack := false ;
17171: LD_ADDR_EXP 52
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// sFire := false ;
17179: LD_ADDR_EXP 53
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// sRefresh := false ;
17187: LD_ADDR_EXP 54
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// sExp := false ;
17195: LD_ADDR_EXP 55
17199: PUSH
17200: LD_INT 0
17202: ST_TO_ADDR
// sDepot := false ;
17203: LD_ADDR_EXP 56
17207: PUSH
17208: LD_INT 0
17210: ST_TO_ADDR
// sFlag := false ;
17211: LD_ADDR_EXP 57
17215: PUSH
17216: LD_INT 0
17218: ST_TO_ADDR
// sKamikadze := false ;
17219: LD_ADDR_EXP 65
17223: PUSH
17224: LD_INT 0
17226: ST_TO_ADDR
// sTroll := false ;
17227: LD_ADDR_EXP 66
17231: PUSH
17232: LD_INT 0
17234: ST_TO_ADDR
// sSlow := false ;
17235: LD_ADDR_EXP 67
17239: PUSH
17240: LD_INT 0
17242: ST_TO_ADDR
// sLack := false ;
17243: LD_ADDR_EXP 68
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
// sTank := false ;
17251: LD_ADDR_EXP 70
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
// sRemote := false ;
17259: LD_ADDR_EXP 71
17263: PUSH
17264: LD_INT 0
17266: ST_TO_ADDR
// sPowell := false ;
17267: LD_ADDR_EXP 72
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// sTeleport := false ;
17275: LD_ADDR_EXP 75
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
// sOilTower := false ;
17283: LD_ADDR_EXP 77
17287: PUSH
17288: LD_INT 0
17290: ST_TO_ADDR
// sShovel := false ;
17291: LD_ADDR_EXP 78
17295: PUSH
17296: LD_INT 0
17298: ST_TO_ADDR
// sSheik := false ;
17299: LD_ADDR_EXP 79
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// sEarthquake := false ;
17307: LD_ADDR_EXP 81
17311: PUSH
17312: LD_INT 0
17314: ST_TO_ADDR
// sAI := false ;
17315: LD_ADDR_EXP 82
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// sCargo := false ;
17323: LD_ADDR_EXP 85
17327: PUSH
17328: LD_INT 0
17330: ST_TO_ADDR
// sDLaser := false ;
17331: LD_ADDR_EXP 86
17335: PUSH
17336: LD_INT 0
17338: ST_TO_ADDR
// sExchange := false ;
17339: LD_ADDR_EXP 87
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// sFac := false ;
17347: LD_ADDR_EXP 88
17351: PUSH
17352: LD_INT 0
17354: ST_TO_ADDR
// sPower := false ;
17355: LD_ADDR_EXP 89
17359: PUSH
17360: LD_INT 0
17362: ST_TO_ADDR
// sRandom := false ;
17363: LD_ADDR_EXP 90
17367: PUSH
17368: LD_INT 0
17370: ST_TO_ADDR
// sShield := false ;
17371: LD_ADDR_EXP 91
17375: PUSH
17376: LD_INT 0
17378: ST_TO_ADDR
// sTime := false ;
17379: LD_ADDR_EXP 92
17383: PUSH
17384: LD_INT 0
17386: ST_TO_ADDR
// sTools := false ;
17387: LD_ADDR_EXP 93
17391: PUSH
17392: LD_INT 0
17394: ST_TO_ADDR
// sSold := false ;
17395: LD_ADDR_EXP 58
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// sDiff := false ;
17403: LD_ADDR_EXP 59
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// sFog := false ;
17411: LD_ADDR_EXP 62
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// sReset := false ;
17419: LD_ADDR_EXP 63
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// sSun := false ;
17427: LD_ADDR_EXP 64
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// sTiger := false ;
17435: LD_ADDR_EXP 60
17439: PUSH
17440: LD_INT 0
17442: ST_TO_ADDR
// sBomb := false ;
17443: LD_ADDR_EXP 61
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// sWound := false ;
17451: LD_ADDR_EXP 69
17455: PUSH
17456: LD_INT 0
17458: ST_TO_ADDR
// sBetray := false ;
17459: LD_ADDR_EXP 73
17463: PUSH
17464: LD_INT 0
17466: ST_TO_ADDR
// sContamin := false ;
17467: LD_ADDR_EXP 74
17471: PUSH
17472: LD_INT 0
17474: ST_TO_ADDR
// sOil := false ;
17475: LD_ADDR_EXP 76
17479: PUSH
17480: LD_INT 0
17482: ST_TO_ADDR
// sStu := false ;
17483: LD_ADDR_EXP 80
17487: PUSH
17488: LD_INT 0
17490: ST_TO_ADDR
// sBazooka := false ;
17491: LD_ADDR_EXP 83
17495: PUSH
17496: LD_INT 0
17498: ST_TO_ADDR
// sMortar := false ;
17499: LD_ADDR_EXP 84
17503: PUSH
17504: LD_INT 0
17506: ST_TO_ADDR
// sRanger := false ;
17507: LD_ADDR_EXP 94
17511: PUSH
17512: LD_INT 0
17514: ST_TO_ADDR
// sComputer := false ;
17515: LD_ADDR_EXP 95
17519: PUSH
17520: LD_INT 0
17522: ST_TO_ADDR
// s30 := false ;
17523: LD_ADDR_EXP 96
17527: PUSH
17528: LD_INT 0
17530: ST_TO_ADDR
// s60 := false ;
17531: LD_ADDR_EXP 97
17535: PUSH
17536: LD_INT 0
17538: ST_TO_ADDR
// end ;
17539: LD_VAR 0 1
17543: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17544: LD_INT 0
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
17552: PPUSH
// result := [ ] ;
17553: LD_ADDR_VAR 0 2
17557: PUSH
17558: EMPTY
17559: ST_TO_ADDR
// if campaign_id = 1 then
17560: LD_OWVAR 69
17564: PUSH
17565: LD_INT 1
17567: EQUAL
17568: IFFALSE 20734
// begin case mission_number of 1 :
17570: LD_OWVAR 70
17574: PUSH
17575: LD_INT 1
17577: DOUBLE
17578: EQUAL
17579: IFTRUE 17583
17581: GO 17659
17583: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17584: LD_ADDR_VAR 0 2
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 4
17594: PUSH
17595: LD_INT 11
17597: PUSH
17598: LD_INT 12
17600: PUSH
17601: LD_INT 15
17603: PUSH
17604: LD_INT 16
17606: PUSH
17607: LD_INT 22
17609: PUSH
17610: LD_INT 23
17612: PUSH
17613: LD_INT 26
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 101
17629: PUSH
17630: LD_INT 102
17632: PUSH
17633: LD_INT 106
17635: PUSH
17636: LD_INT 116
17638: PUSH
17639: LD_INT 117
17641: PUSH
17642: LD_INT 118
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: ST_TO_ADDR
17657: GO 20732
17659: LD_INT 2
17661: DOUBLE
17662: EQUAL
17663: IFTRUE 17667
17665: GO 17751
17667: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17668: LD_ADDR_VAR 0 2
17672: PUSH
17673: LD_INT 2
17675: PUSH
17676: LD_INT 4
17678: PUSH
17679: LD_INT 11
17681: PUSH
17682: LD_INT 12
17684: PUSH
17685: LD_INT 15
17687: PUSH
17688: LD_INT 16
17690: PUSH
17691: LD_INT 22
17693: PUSH
17694: LD_INT 23
17696: PUSH
17697: LD_INT 26
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 101
17713: PUSH
17714: LD_INT 102
17716: PUSH
17717: LD_INT 105
17719: PUSH
17720: LD_INT 106
17722: PUSH
17723: LD_INT 108
17725: PUSH
17726: LD_INT 116
17728: PUSH
17729: LD_INT 117
17731: PUSH
17732: LD_INT 118
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: ST_TO_ADDR
17749: GO 20732
17751: LD_INT 3
17753: DOUBLE
17754: EQUAL
17755: IFTRUE 17759
17757: GO 17847
17759: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17760: LD_ADDR_VAR 0 2
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: LD_INT 4
17770: PUSH
17771: LD_INT 5
17773: PUSH
17774: LD_INT 11
17776: PUSH
17777: LD_INT 12
17779: PUSH
17780: LD_INT 15
17782: PUSH
17783: LD_INT 16
17785: PUSH
17786: LD_INT 22
17788: PUSH
17789: LD_INT 26
17791: PUSH
17792: LD_INT 36
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 101
17809: PUSH
17810: LD_INT 102
17812: PUSH
17813: LD_INT 105
17815: PUSH
17816: LD_INT 106
17818: PUSH
17819: LD_INT 108
17821: PUSH
17822: LD_INT 116
17824: PUSH
17825: LD_INT 117
17827: PUSH
17828: LD_INT 118
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: ST_TO_ADDR
17845: GO 20732
17847: LD_INT 4
17849: DOUBLE
17850: EQUAL
17851: IFTRUE 17855
17853: GO 17951
17855: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17856: LD_ADDR_VAR 0 2
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: LD_INT 4
17866: PUSH
17867: LD_INT 5
17869: PUSH
17870: LD_INT 8
17872: PUSH
17873: LD_INT 11
17875: PUSH
17876: LD_INT 12
17878: PUSH
17879: LD_INT 15
17881: PUSH
17882: LD_INT 16
17884: PUSH
17885: LD_INT 22
17887: PUSH
17888: LD_INT 23
17890: PUSH
17891: LD_INT 26
17893: PUSH
17894: LD_INT 36
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 101
17913: PUSH
17914: LD_INT 102
17916: PUSH
17917: LD_INT 105
17919: PUSH
17920: LD_INT 106
17922: PUSH
17923: LD_INT 108
17925: PUSH
17926: LD_INT 116
17928: PUSH
17929: LD_INT 117
17931: PUSH
17932: LD_INT 118
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: ST_TO_ADDR
17949: GO 20732
17951: LD_INT 5
17953: DOUBLE
17954: EQUAL
17955: IFTRUE 17959
17957: GO 18071
17959: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17960: LD_ADDR_VAR 0 2
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: LD_INT 4
17970: PUSH
17971: LD_INT 5
17973: PUSH
17974: LD_INT 6
17976: PUSH
17977: LD_INT 8
17979: PUSH
17980: LD_INT 11
17982: PUSH
17983: LD_INT 12
17985: PUSH
17986: LD_INT 15
17988: PUSH
17989: LD_INT 16
17991: PUSH
17992: LD_INT 22
17994: PUSH
17995: LD_INT 23
17997: PUSH
17998: LD_INT 25
18000: PUSH
18001: LD_INT 26
18003: PUSH
18004: LD_INT 36
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 101
18025: PUSH
18026: LD_INT 102
18028: PUSH
18029: LD_INT 105
18031: PUSH
18032: LD_INT 106
18034: PUSH
18035: LD_INT 108
18037: PUSH
18038: LD_INT 109
18040: PUSH
18041: LD_INT 112
18043: PUSH
18044: LD_INT 116
18046: PUSH
18047: LD_INT 117
18049: PUSH
18050: LD_INT 118
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: ST_TO_ADDR
18069: GO 20732
18071: LD_INT 6
18073: DOUBLE
18074: EQUAL
18075: IFTRUE 18079
18077: GO 18211
18079: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18080: LD_ADDR_VAR 0 2
18084: PUSH
18085: LD_INT 2
18087: PUSH
18088: LD_INT 4
18090: PUSH
18091: LD_INT 5
18093: PUSH
18094: LD_INT 6
18096: PUSH
18097: LD_INT 8
18099: PUSH
18100: LD_INT 11
18102: PUSH
18103: LD_INT 12
18105: PUSH
18106: LD_INT 15
18108: PUSH
18109: LD_INT 16
18111: PUSH
18112: LD_INT 20
18114: PUSH
18115: LD_INT 21
18117: PUSH
18118: LD_INT 22
18120: PUSH
18121: LD_INT 23
18123: PUSH
18124: LD_INT 25
18126: PUSH
18127: LD_INT 26
18129: PUSH
18130: LD_INT 30
18132: PUSH
18133: LD_INT 31
18135: PUSH
18136: LD_INT 32
18138: PUSH
18139: LD_INT 36
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 101
18165: PUSH
18166: LD_INT 102
18168: PUSH
18169: LD_INT 105
18171: PUSH
18172: LD_INT 106
18174: PUSH
18175: LD_INT 108
18177: PUSH
18178: LD_INT 109
18180: PUSH
18181: LD_INT 112
18183: PUSH
18184: LD_INT 116
18186: PUSH
18187: LD_INT 117
18189: PUSH
18190: LD_INT 118
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: ST_TO_ADDR
18209: GO 20732
18211: LD_INT 7
18213: DOUBLE
18214: EQUAL
18215: IFTRUE 18219
18217: GO 18331
18219: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: LD_INT 5
18233: PUSH
18234: LD_INT 7
18236: PUSH
18237: LD_INT 11
18239: PUSH
18240: LD_INT 12
18242: PUSH
18243: LD_INT 15
18245: PUSH
18246: LD_INT 16
18248: PUSH
18249: LD_INT 20
18251: PUSH
18252: LD_INT 21
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 23
18260: PUSH
18261: LD_INT 25
18263: PUSH
18264: LD_INT 26
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 101
18285: PUSH
18286: LD_INT 102
18288: PUSH
18289: LD_INT 103
18291: PUSH
18292: LD_INT 105
18294: PUSH
18295: LD_INT 106
18297: PUSH
18298: LD_INT 108
18300: PUSH
18301: LD_INT 112
18303: PUSH
18304: LD_INT 116
18306: PUSH
18307: LD_INT 117
18309: PUSH
18310: LD_INT 118
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: ST_TO_ADDR
18329: GO 20732
18331: LD_INT 8
18333: DOUBLE
18334: EQUAL
18335: IFTRUE 18339
18337: GO 18479
18339: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18340: LD_ADDR_VAR 0 2
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 4
18350: PUSH
18351: LD_INT 5
18353: PUSH
18354: LD_INT 6
18356: PUSH
18357: LD_INT 7
18359: PUSH
18360: LD_INT 8
18362: PUSH
18363: LD_INT 11
18365: PUSH
18366: LD_INT 12
18368: PUSH
18369: LD_INT 15
18371: PUSH
18372: LD_INT 16
18374: PUSH
18375: LD_INT 20
18377: PUSH
18378: LD_INT 21
18380: PUSH
18381: LD_INT 22
18383: PUSH
18384: LD_INT 23
18386: PUSH
18387: LD_INT 25
18389: PUSH
18390: LD_INT 26
18392: PUSH
18393: LD_INT 30
18395: PUSH
18396: LD_INT 31
18398: PUSH
18399: LD_INT 32
18401: PUSH
18402: LD_INT 36
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 101
18429: PUSH
18430: LD_INT 102
18432: PUSH
18433: LD_INT 103
18435: PUSH
18436: LD_INT 105
18438: PUSH
18439: LD_INT 106
18441: PUSH
18442: LD_INT 108
18444: PUSH
18445: LD_INT 109
18447: PUSH
18448: LD_INT 112
18450: PUSH
18451: LD_INT 116
18453: PUSH
18454: LD_INT 117
18456: PUSH
18457: LD_INT 118
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: ST_TO_ADDR
18477: GO 20732
18479: LD_INT 9
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18635
18487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: LD_INT 4
18498: PUSH
18499: LD_INT 5
18501: PUSH
18502: LD_INT 6
18504: PUSH
18505: LD_INT 7
18507: PUSH
18508: LD_INT 8
18510: PUSH
18511: LD_INT 11
18513: PUSH
18514: LD_INT 12
18516: PUSH
18517: LD_INT 15
18519: PUSH
18520: LD_INT 16
18522: PUSH
18523: LD_INT 20
18525: PUSH
18526: LD_INT 21
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_INT 23
18534: PUSH
18535: LD_INT 25
18537: PUSH
18538: LD_INT 26
18540: PUSH
18541: LD_INT 28
18543: PUSH
18544: LD_INT 30
18546: PUSH
18547: LD_INT 31
18549: PUSH
18550: LD_INT 32
18552: PUSH
18553: LD_INT 36
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 101
18581: PUSH
18582: LD_INT 102
18584: PUSH
18585: LD_INT 103
18587: PUSH
18588: LD_INT 105
18590: PUSH
18591: LD_INT 106
18593: PUSH
18594: LD_INT 108
18596: PUSH
18597: LD_INT 109
18599: PUSH
18600: LD_INT 112
18602: PUSH
18603: LD_INT 114
18605: PUSH
18606: LD_INT 116
18608: PUSH
18609: LD_INT 117
18611: PUSH
18612: LD_INT 118
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: ST_TO_ADDR
18633: GO 20732
18635: LD_INT 10
18637: DOUBLE
18638: EQUAL
18639: IFTRUE 18643
18641: GO 18839
18643: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18644: LD_ADDR_VAR 0 2
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: LD_INT 4
18654: PUSH
18655: LD_INT 5
18657: PUSH
18658: LD_INT 6
18660: PUSH
18661: LD_INT 7
18663: PUSH
18664: LD_INT 8
18666: PUSH
18667: LD_INT 9
18669: PUSH
18670: LD_INT 10
18672: PUSH
18673: LD_INT 11
18675: PUSH
18676: LD_INT 12
18678: PUSH
18679: LD_INT 13
18681: PUSH
18682: LD_INT 14
18684: PUSH
18685: LD_INT 15
18687: PUSH
18688: LD_INT 16
18690: PUSH
18691: LD_INT 17
18693: PUSH
18694: LD_INT 18
18696: PUSH
18697: LD_INT 19
18699: PUSH
18700: LD_INT 20
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 23
18711: PUSH
18712: LD_INT 24
18714: PUSH
18715: LD_INT 25
18717: PUSH
18718: LD_INT 26
18720: PUSH
18721: LD_INT 28
18723: PUSH
18724: LD_INT 30
18726: PUSH
18727: LD_INT 31
18729: PUSH
18730: LD_INT 32
18732: PUSH
18733: LD_INT 36
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 101
18769: PUSH
18770: LD_INT 102
18772: PUSH
18773: LD_INT 103
18775: PUSH
18776: LD_INT 104
18778: PUSH
18779: LD_INT 105
18781: PUSH
18782: LD_INT 106
18784: PUSH
18785: LD_INT 107
18787: PUSH
18788: LD_INT 108
18790: PUSH
18791: LD_INT 109
18793: PUSH
18794: LD_INT 110
18796: PUSH
18797: LD_INT 111
18799: PUSH
18800: LD_INT 112
18802: PUSH
18803: LD_INT 114
18805: PUSH
18806: LD_INT 116
18808: PUSH
18809: LD_INT 117
18811: PUSH
18812: LD_INT 118
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: ST_TO_ADDR
18837: GO 20732
18839: LD_INT 11
18841: DOUBLE
18842: EQUAL
18843: IFTRUE 18847
18845: GO 19051
18847: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18848: LD_ADDR_VAR 0 2
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: LD_INT 4
18861: PUSH
18862: LD_INT 5
18864: PUSH
18865: LD_INT 6
18867: PUSH
18868: LD_INT 7
18870: PUSH
18871: LD_INT 8
18873: PUSH
18874: LD_INT 9
18876: PUSH
18877: LD_INT 10
18879: PUSH
18880: LD_INT 11
18882: PUSH
18883: LD_INT 12
18885: PUSH
18886: LD_INT 13
18888: PUSH
18889: LD_INT 14
18891: PUSH
18892: LD_INT 15
18894: PUSH
18895: LD_INT 16
18897: PUSH
18898: LD_INT 17
18900: PUSH
18901: LD_INT 18
18903: PUSH
18904: LD_INT 19
18906: PUSH
18907: LD_INT 20
18909: PUSH
18910: LD_INT 21
18912: PUSH
18913: LD_INT 22
18915: PUSH
18916: LD_INT 23
18918: PUSH
18919: LD_INT 24
18921: PUSH
18922: LD_INT 25
18924: PUSH
18925: LD_INT 26
18927: PUSH
18928: LD_INT 28
18930: PUSH
18931: LD_INT 30
18933: PUSH
18934: LD_INT 31
18936: PUSH
18937: LD_INT 32
18939: PUSH
18940: LD_INT 34
18942: PUSH
18943: LD_INT 36
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 101
18981: PUSH
18982: LD_INT 102
18984: PUSH
18985: LD_INT 103
18987: PUSH
18988: LD_INT 104
18990: PUSH
18991: LD_INT 105
18993: PUSH
18994: LD_INT 106
18996: PUSH
18997: LD_INT 107
18999: PUSH
19000: LD_INT 108
19002: PUSH
19003: LD_INT 109
19005: PUSH
19006: LD_INT 110
19008: PUSH
19009: LD_INT 111
19011: PUSH
19012: LD_INT 112
19014: PUSH
19015: LD_INT 114
19017: PUSH
19018: LD_INT 116
19020: PUSH
19021: LD_INT 117
19023: PUSH
19024: LD_INT 118
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: ST_TO_ADDR
19049: GO 20732
19051: LD_INT 12
19053: DOUBLE
19054: EQUAL
19055: IFTRUE 19059
19057: GO 19279
19059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19060: LD_ADDR_VAR 0 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: LD_INT 4
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: LD_INT 6
19082: PUSH
19083: LD_INT 7
19085: PUSH
19086: LD_INT 8
19088: PUSH
19089: LD_INT 9
19091: PUSH
19092: LD_INT 10
19094: PUSH
19095: LD_INT 11
19097: PUSH
19098: LD_INT 12
19100: PUSH
19101: LD_INT 13
19103: PUSH
19104: LD_INT 14
19106: PUSH
19107: LD_INT 15
19109: PUSH
19110: LD_INT 16
19112: PUSH
19113: LD_INT 17
19115: PUSH
19116: LD_INT 18
19118: PUSH
19119: LD_INT 19
19121: PUSH
19122: LD_INT 20
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 22
19130: PUSH
19131: LD_INT 23
19133: PUSH
19134: LD_INT 24
19136: PUSH
19137: LD_INT 25
19139: PUSH
19140: LD_INT 26
19142: PUSH
19143: LD_INT 27
19145: PUSH
19146: LD_INT 28
19148: PUSH
19149: LD_INT 30
19151: PUSH
19152: LD_INT 31
19154: PUSH
19155: LD_INT 32
19157: PUSH
19158: LD_INT 33
19160: PUSH
19161: LD_INT 34
19163: PUSH
19164: LD_INT 36
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 101
19205: PUSH
19206: LD_INT 102
19208: PUSH
19209: LD_INT 103
19211: PUSH
19212: LD_INT 104
19214: PUSH
19215: LD_INT 105
19217: PUSH
19218: LD_INT 106
19220: PUSH
19221: LD_INT 107
19223: PUSH
19224: LD_INT 108
19226: PUSH
19227: LD_INT 109
19229: PUSH
19230: LD_INT 110
19232: PUSH
19233: LD_INT 111
19235: PUSH
19236: LD_INT 112
19238: PUSH
19239: LD_INT 113
19241: PUSH
19242: LD_INT 114
19244: PUSH
19245: LD_INT 116
19247: PUSH
19248: LD_INT 117
19250: PUSH
19251: LD_INT 118
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: ST_TO_ADDR
19277: GO 20732
19279: LD_INT 13
19281: DOUBLE
19282: EQUAL
19283: IFTRUE 19287
19285: GO 19495
19287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19288: LD_ADDR_VAR 0 2
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: LD_INT 3
19301: PUSH
19302: LD_INT 4
19304: PUSH
19305: LD_INT 5
19307: PUSH
19308: LD_INT 8
19310: PUSH
19311: LD_INT 9
19313: PUSH
19314: LD_INT 10
19316: PUSH
19317: LD_INT 11
19319: PUSH
19320: LD_INT 12
19322: PUSH
19323: LD_INT 14
19325: PUSH
19326: LD_INT 15
19328: PUSH
19329: LD_INT 16
19331: PUSH
19332: LD_INT 17
19334: PUSH
19335: LD_INT 18
19337: PUSH
19338: LD_INT 19
19340: PUSH
19341: LD_INT 20
19343: PUSH
19344: LD_INT 21
19346: PUSH
19347: LD_INT 22
19349: PUSH
19350: LD_INT 23
19352: PUSH
19353: LD_INT 24
19355: PUSH
19356: LD_INT 25
19358: PUSH
19359: LD_INT 26
19361: PUSH
19362: LD_INT 27
19364: PUSH
19365: LD_INT 28
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 31
19373: PUSH
19374: LD_INT 32
19376: PUSH
19377: LD_INT 33
19379: PUSH
19380: LD_INT 34
19382: PUSH
19383: LD_INT 36
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 101
19421: PUSH
19422: LD_INT 102
19424: PUSH
19425: LD_INT 103
19427: PUSH
19428: LD_INT 104
19430: PUSH
19431: LD_INT 105
19433: PUSH
19434: LD_INT 106
19436: PUSH
19437: LD_INT 107
19439: PUSH
19440: LD_INT 108
19442: PUSH
19443: LD_INT 109
19445: PUSH
19446: LD_INT 110
19448: PUSH
19449: LD_INT 111
19451: PUSH
19452: LD_INT 112
19454: PUSH
19455: LD_INT 113
19457: PUSH
19458: LD_INT 114
19460: PUSH
19461: LD_INT 116
19463: PUSH
19464: LD_INT 117
19466: PUSH
19467: LD_INT 118
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: ST_TO_ADDR
19493: GO 20732
19495: LD_INT 14
19497: DOUBLE
19498: EQUAL
19499: IFTRUE 19503
19501: GO 19727
19503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19504: LD_ADDR_VAR 0 2
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 3
19517: PUSH
19518: LD_INT 4
19520: PUSH
19521: LD_INT 5
19523: PUSH
19524: LD_INT 6
19526: PUSH
19527: LD_INT 7
19529: PUSH
19530: LD_INT 8
19532: PUSH
19533: LD_INT 9
19535: PUSH
19536: LD_INT 10
19538: PUSH
19539: LD_INT 11
19541: PUSH
19542: LD_INT 12
19544: PUSH
19545: LD_INT 13
19547: PUSH
19548: LD_INT 14
19550: PUSH
19551: LD_INT 15
19553: PUSH
19554: LD_INT 16
19556: PUSH
19557: LD_INT 17
19559: PUSH
19560: LD_INT 18
19562: PUSH
19563: LD_INT 19
19565: PUSH
19566: LD_INT 20
19568: PUSH
19569: LD_INT 21
19571: PUSH
19572: LD_INT 22
19574: PUSH
19575: LD_INT 23
19577: PUSH
19578: LD_INT 24
19580: PUSH
19581: LD_INT 25
19583: PUSH
19584: LD_INT 26
19586: PUSH
19587: LD_INT 27
19589: PUSH
19590: LD_INT 28
19592: PUSH
19593: LD_INT 29
19595: PUSH
19596: LD_INT 30
19598: PUSH
19599: LD_INT 31
19601: PUSH
19602: LD_INT 32
19604: PUSH
19605: LD_INT 33
19607: PUSH
19608: LD_INT 34
19610: PUSH
19611: LD_INT 36
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 101
19653: PUSH
19654: LD_INT 102
19656: PUSH
19657: LD_INT 103
19659: PUSH
19660: LD_INT 104
19662: PUSH
19663: LD_INT 105
19665: PUSH
19666: LD_INT 106
19668: PUSH
19669: LD_INT 107
19671: PUSH
19672: LD_INT 108
19674: PUSH
19675: LD_INT 109
19677: PUSH
19678: LD_INT 110
19680: PUSH
19681: LD_INT 111
19683: PUSH
19684: LD_INT 112
19686: PUSH
19687: LD_INT 113
19689: PUSH
19690: LD_INT 114
19692: PUSH
19693: LD_INT 116
19695: PUSH
19696: LD_INT 117
19698: PUSH
19699: LD_INT 118
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: ST_TO_ADDR
19725: GO 20732
19727: LD_INT 15
19729: DOUBLE
19730: EQUAL
19731: IFTRUE 19735
19733: GO 19959
19735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 4
19752: PUSH
19753: LD_INT 5
19755: PUSH
19756: LD_INT 6
19758: PUSH
19759: LD_INT 7
19761: PUSH
19762: LD_INT 8
19764: PUSH
19765: LD_INT 9
19767: PUSH
19768: LD_INT 10
19770: PUSH
19771: LD_INT 11
19773: PUSH
19774: LD_INT 12
19776: PUSH
19777: LD_INT 13
19779: PUSH
19780: LD_INT 14
19782: PUSH
19783: LD_INT 15
19785: PUSH
19786: LD_INT 16
19788: PUSH
19789: LD_INT 17
19791: PUSH
19792: LD_INT 18
19794: PUSH
19795: LD_INT 19
19797: PUSH
19798: LD_INT 20
19800: PUSH
19801: LD_INT 21
19803: PUSH
19804: LD_INT 22
19806: PUSH
19807: LD_INT 23
19809: PUSH
19810: LD_INT 24
19812: PUSH
19813: LD_INT 25
19815: PUSH
19816: LD_INT 26
19818: PUSH
19819: LD_INT 27
19821: PUSH
19822: LD_INT 28
19824: PUSH
19825: LD_INT 29
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 31
19833: PUSH
19834: LD_INT 32
19836: PUSH
19837: LD_INT 33
19839: PUSH
19840: LD_INT 34
19842: PUSH
19843: LD_INT 36
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 101
19885: PUSH
19886: LD_INT 102
19888: PUSH
19889: LD_INT 103
19891: PUSH
19892: LD_INT 104
19894: PUSH
19895: LD_INT 105
19897: PUSH
19898: LD_INT 106
19900: PUSH
19901: LD_INT 107
19903: PUSH
19904: LD_INT 108
19906: PUSH
19907: LD_INT 109
19909: PUSH
19910: LD_INT 110
19912: PUSH
19913: LD_INT 111
19915: PUSH
19916: LD_INT 112
19918: PUSH
19919: LD_INT 113
19921: PUSH
19922: LD_INT 114
19924: PUSH
19925: LD_INT 116
19927: PUSH
19928: LD_INT 117
19930: PUSH
19931: LD_INT 118
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: ST_TO_ADDR
19957: GO 20732
19959: LD_INT 16
19961: DOUBLE
19962: EQUAL
19963: IFTRUE 19967
19965: GO 20103
19967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19968: LD_ADDR_VAR 0 2
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: LD_INT 4
19978: PUSH
19979: LD_INT 5
19981: PUSH
19982: LD_INT 7
19984: PUSH
19985: LD_INT 11
19987: PUSH
19988: LD_INT 12
19990: PUSH
19991: LD_INT 15
19993: PUSH
19994: LD_INT 16
19996: PUSH
19997: LD_INT 20
19999: PUSH
20000: LD_INT 21
20002: PUSH
20003: LD_INT 22
20005: PUSH
20006: LD_INT 23
20008: PUSH
20009: LD_INT 25
20011: PUSH
20012: LD_INT 26
20014: PUSH
20015: LD_INT 30
20017: PUSH
20018: LD_INT 31
20020: PUSH
20021: LD_INT 32
20023: PUSH
20024: LD_INT 33
20026: PUSH
20027: LD_INT 34
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 101
20053: PUSH
20054: LD_INT 102
20056: PUSH
20057: LD_INT 103
20059: PUSH
20060: LD_INT 106
20062: PUSH
20063: LD_INT 108
20065: PUSH
20066: LD_INT 112
20068: PUSH
20069: LD_INT 113
20071: PUSH
20072: LD_INT 114
20074: PUSH
20075: LD_INT 116
20077: PUSH
20078: LD_INT 117
20080: PUSH
20081: LD_INT 118
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: ST_TO_ADDR
20101: GO 20732
20103: LD_INT 17
20105: DOUBLE
20106: EQUAL
20107: IFTRUE 20111
20109: GO 20335
20111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20112: LD_ADDR_VAR 0 2
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: LD_INT 3
20125: PUSH
20126: LD_INT 4
20128: PUSH
20129: LD_INT 5
20131: PUSH
20132: LD_INT 6
20134: PUSH
20135: LD_INT 7
20137: PUSH
20138: LD_INT 8
20140: PUSH
20141: LD_INT 9
20143: PUSH
20144: LD_INT 10
20146: PUSH
20147: LD_INT 11
20149: PUSH
20150: LD_INT 12
20152: PUSH
20153: LD_INT 13
20155: PUSH
20156: LD_INT 14
20158: PUSH
20159: LD_INT 15
20161: PUSH
20162: LD_INT 16
20164: PUSH
20165: LD_INT 17
20167: PUSH
20168: LD_INT 18
20170: PUSH
20171: LD_INT 19
20173: PUSH
20174: LD_INT 20
20176: PUSH
20177: LD_INT 21
20179: PUSH
20180: LD_INT 22
20182: PUSH
20183: LD_INT 23
20185: PUSH
20186: LD_INT 24
20188: PUSH
20189: LD_INT 25
20191: PUSH
20192: LD_INT 26
20194: PUSH
20195: LD_INT 27
20197: PUSH
20198: LD_INT 28
20200: PUSH
20201: LD_INT 29
20203: PUSH
20204: LD_INT 30
20206: PUSH
20207: LD_INT 31
20209: PUSH
20210: LD_INT 32
20212: PUSH
20213: LD_INT 33
20215: PUSH
20216: LD_INT 34
20218: PUSH
20219: LD_INT 36
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 101
20261: PUSH
20262: LD_INT 102
20264: PUSH
20265: LD_INT 103
20267: PUSH
20268: LD_INT 104
20270: PUSH
20271: LD_INT 105
20273: PUSH
20274: LD_INT 106
20276: PUSH
20277: LD_INT 107
20279: PUSH
20280: LD_INT 108
20282: PUSH
20283: LD_INT 109
20285: PUSH
20286: LD_INT 110
20288: PUSH
20289: LD_INT 111
20291: PUSH
20292: LD_INT 112
20294: PUSH
20295: LD_INT 113
20297: PUSH
20298: LD_INT 114
20300: PUSH
20301: LD_INT 116
20303: PUSH
20304: LD_INT 117
20306: PUSH
20307: LD_INT 118
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: ST_TO_ADDR
20333: GO 20732
20335: LD_INT 18
20337: DOUBLE
20338: EQUAL
20339: IFTRUE 20343
20341: GO 20491
20343: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 4
20354: PUSH
20355: LD_INT 5
20357: PUSH
20358: LD_INT 7
20360: PUSH
20361: LD_INT 11
20363: PUSH
20364: LD_INT 12
20366: PUSH
20367: LD_INT 15
20369: PUSH
20370: LD_INT 16
20372: PUSH
20373: LD_INT 20
20375: PUSH
20376: LD_INT 21
20378: PUSH
20379: LD_INT 22
20381: PUSH
20382: LD_INT 23
20384: PUSH
20385: LD_INT 25
20387: PUSH
20388: LD_INT 26
20390: PUSH
20391: LD_INT 30
20393: PUSH
20394: LD_INT 31
20396: PUSH
20397: LD_INT 32
20399: PUSH
20400: LD_INT 33
20402: PUSH
20403: LD_INT 34
20405: PUSH
20406: LD_INT 35
20408: PUSH
20409: LD_INT 36
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 101
20437: PUSH
20438: LD_INT 102
20440: PUSH
20441: LD_INT 103
20443: PUSH
20444: LD_INT 106
20446: PUSH
20447: LD_INT 108
20449: PUSH
20450: LD_INT 112
20452: PUSH
20453: LD_INT 113
20455: PUSH
20456: LD_INT 114
20458: PUSH
20459: LD_INT 115
20461: PUSH
20462: LD_INT 116
20464: PUSH
20465: LD_INT 117
20467: PUSH
20468: LD_INT 118
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: ST_TO_ADDR
20489: GO 20732
20491: LD_INT 19
20493: DOUBLE
20494: EQUAL
20495: IFTRUE 20499
20497: GO 20731
20499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20500: LD_ADDR_VAR 0 2
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: LD_INT 3
20513: PUSH
20514: LD_INT 4
20516: PUSH
20517: LD_INT 5
20519: PUSH
20520: LD_INT 6
20522: PUSH
20523: LD_INT 7
20525: PUSH
20526: LD_INT 8
20528: PUSH
20529: LD_INT 9
20531: PUSH
20532: LD_INT 10
20534: PUSH
20535: LD_INT 11
20537: PUSH
20538: LD_INT 12
20540: PUSH
20541: LD_INT 13
20543: PUSH
20544: LD_INT 14
20546: PUSH
20547: LD_INT 15
20549: PUSH
20550: LD_INT 16
20552: PUSH
20553: LD_INT 17
20555: PUSH
20556: LD_INT 18
20558: PUSH
20559: LD_INT 19
20561: PUSH
20562: LD_INT 20
20564: PUSH
20565: LD_INT 21
20567: PUSH
20568: LD_INT 22
20570: PUSH
20571: LD_INT 23
20573: PUSH
20574: LD_INT 24
20576: PUSH
20577: LD_INT 25
20579: PUSH
20580: LD_INT 26
20582: PUSH
20583: LD_INT 27
20585: PUSH
20586: LD_INT 28
20588: PUSH
20589: LD_INT 29
20591: PUSH
20592: LD_INT 30
20594: PUSH
20595: LD_INT 31
20597: PUSH
20598: LD_INT 32
20600: PUSH
20601: LD_INT 33
20603: PUSH
20604: LD_INT 34
20606: PUSH
20607: LD_INT 35
20609: PUSH
20610: LD_INT 36
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 101
20653: PUSH
20654: LD_INT 102
20656: PUSH
20657: LD_INT 103
20659: PUSH
20660: LD_INT 104
20662: PUSH
20663: LD_INT 105
20665: PUSH
20666: LD_INT 106
20668: PUSH
20669: LD_INT 107
20671: PUSH
20672: LD_INT 108
20674: PUSH
20675: LD_INT 109
20677: PUSH
20678: LD_INT 110
20680: PUSH
20681: LD_INT 111
20683: PUSH
20684: LD_INT 112
20686: PUSH
20687: LD_INT 113
20689: PUSH
20690: LD_INT 114
20692: PUSH
20693: LD_INT 115
20695: PUSH
20696: LD_INT 116
20698: PUSH
20699: LD_INT 117
20701: PUSH
20702: LD_INT 118
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: ST_TO_ADDR
20729: GO 20732
20731: POP
// end else
20732: GO 20963
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20734: LD_ADDR_VAR 0 2
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 3
20747: PUSH
20748: LD_INT 4
20750: PUSH
20751: LD_INT 5
20753: PUSH
20754: LD_INT 6
20756: PUSH
20757: LD_INT 7
20759: PUSH
20760: LD_INT 8
20762: PUSH
20763: LD_INT 9
20765: PUSH
20766: LD_INT 10
20768: PUSH
20769: LD_INT 11
20771: PUSH
20772: LD_INT 12
20774: PUSH
20775: LD_INT 13
20777: PUSH
20778: LD_INT 14
20780: PUSH
20781: LD_INT 15
20783: PUSH
20784: LD_INT 16
20786: PUSH
20787: LD_INT 17
20789: PUSH
20790: LD_INT 18
20792: PUSH
20793: LD_INT 19
20795: PUSH
20796: LD_INT 20
20798: PUSH
20799: LD_INT 21
20801: PUSH
20802: LD_INT 22
20804: PUSH
20805: LD_INT 23
20807: PUSH
20808: LD_INT 24
20810: PUSH
20811: LD_INT 25
20813: PUSH
20814: LD_INT 26
20816: PUSH
20817: LD_INT 27
20819: PUSH
20820: LD_INT 28
20822: PUSH
20823: LD_INT 29
20825: PUSH
20826: LD_INT 30
20828: PUSH
20829: LD_INT 31
20831: PUSH
20832: LD_INT 32
20834: PUSH
20835: LD_INT 33
20837: PUSH
20838: LD_INT 34
20840: PUSH
20841: LD_INT 35
20843: PUSH
20844: LD_INT 36
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 101
20887: PUSH
20888: LD_INT 102
20890: PUSH
20891: LD_INT 103
20893: PUSH
20894: LD_INT 104
20896: PUSH
20897: LD_INT 105
20899: PUSH
20900: LD_INT 106
20902: PUSH
20903: LD_INT 107
20905: PUSH
20906: LD_INT 108
20908: PUSH
20909: LD_INT 109
20911: PUSH
20912: LD_INT 110
20914: PUSH
20915: LD_INT 111
20917: PUSH
20918: LD_INT 112
20920: PUSH
20921: LD_INT 113
20923: PUSH
20924: LD_INT 114
20926: PUSH
20927: LD_INT 115
20929: PUSH
20930: LD_INT 116
20932: PUSH
20933: LD_INT 117
20935: PUSH
20936: LD_INT 118
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: ST_TO_ADDR
// if result then
20963: LD_VAR 0 2
20967: IFFALSE 21753
// begin normal :=  ;
20969: LD_ADDR_VAR 0 5
20973: PUSH
20974: LD_STRING 
20976: ST_TO_ADDR
// hardcore :=  ;
20977: LD_ADDR_VAR 0 6
20981: PUSH
20982: LD_STRING 
20984: ST_TO_ADDR
// active :=  ;
20985: LD_ADDR_VAR 0 7
20989: PUSH
20990: LD_STRING 
20992: ST_TO_ADDR
// for i = 1 to normalCounter do
20993: LD_ADDR_VAR 0 8
20997: PUSH
20998: DOUBLE
20999: LD_INT 1
21001: DEC
21002: ST_TO_ADDR
21003: LD_EXP 42
21007: PUSH
21008: FOR_TO
21009: IFFALSE 21110
// begin tmp := 0 ;
21011: LD_ADDR_VAR 0 3
21015: PUSH
21016: LD_STRING 0
21018: ST_TO_ADDR
// if result [ 1 ] then
21019: LD_VAR 0 2
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: IFFALSE 21092
// if result [ 1 ] [ 1 ] = i then
21029: LD_VAR 0 2
21033: PUSH
21034: LD_INT 1
21036: ARRAY
21037: PUSH
21038: LD_INT 1
21040: ARRAY
21041: PUSH
21042: LD_VAR 0 8
21046: EQUAL
21047: IFFALSE 21092
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21049: LD_ADDR_VAR 0 2
21053: PUSH
21054: LD_VAR 0 2
21058: PPUSH
21059: LD_INT 1
21061: PPUSH
21062: LD_VAR 0 2
21066: PUSH
21067: LD_INT 1
21069: ARRAY
21070: PPUSH
21071: LD_INT 1
21073: PPUSH
21074: CALL_OW 3
21078: PPUSH
21079: CALL_OW 1
21083: ST_TO_ADDR
// tmp := 1 ;
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_STRING 1
21091: ST_TO_ADDR
// end ; normal := normal & tmp ;
21092: LD_ADDR_VAR 0 5
21096: PUSH
21097: LD_VAR 0 5
21101: PUSH
21102: LD_VAR 0 3
21106: STR
21107: ST_TO_ADDR
// end ;
21108: GO 21008
21110: POP
21111: POP
// for i = 1 to hardcoreCounter do
21112: LD_ADDR_VAR 0 8
21116: PUSH
21117: DOUBLE
21118: LD_INT 1
21120: DEC
21121: ST_TO_ADDR
21122: LD_EXP 43
21126: PUSH
21127: FOR_TO
21128: IFFALSE 21233
// begin tmp := 0 ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_STRING 0
21137: ST_TO_ADDR
// if result [ 2 ] then
21138: LD_VAR 0 2
21142: PUSH
21143: LD_INT 2
21145: ARRAY
21146: IFFALSE 21215
// if result [ 2 ] [ 1 ] = 100 + i then
21148: LD_VAR 0 2
21152: PUSH
21153: LD_INT 2
21155: ARRAY
21156: PUSH
21157: LD_INT 1
21159: ARRAY
21160: PUSH
21161: LD_INT 100
21163: PUSH
21164: LD_VAR 0 8
21168: PLUS
21169: EQUAL
21170: IFFALSE 21215
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21172: LD_ADDR_VAR 0 2
21176: PUSH
21177: LD_VAR 0 2
21181: PPUSH
21182: LD_INT 2
21184: PPUSH
21185: LD_VAR 0 2
21189: PUSH
21190: LD_INT 2
21192: ARRAY
21193: PPUSH
21194: LD_INT 1
21196: PPUSH
21197: CALL_OW 3
21201: PPUSH
21202: CALL_OW 1
21206: ST_TO_ADDR
// tmp := 1 ;
21207: LD_ADDR_VAR 0 3
21211: PUSH
21212: LD_STRING 1
21214: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21215: LD_ADDR_VAR 0 6
21219: PUSH
21220: LD_VAR 0 6
21224: PUSH
21225: LD_VAR 0 3
21229: STR
21230: ST_TO_ADDR
// end ;
21231: GO 21127
21233: POP
21234: POP
// if isGameLoad then
21235: LD_VAR 0 1
21239: IFFALSE 21714
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21241: LD_ADDR_VAR 0 4
21245: PUSH
21246: LD_EXP 46
21250: PUSH
21251: LD_EXP 45
21255: PUSH
21256: LD_EXP 47
21260: PUSH
21261: LD_EXP 44
21265: PUSH
21266: LD_EXP 48
21270: PUSH
21271: LD_EXP 49
21275: PUSH
21276: LD_EXP 50
21280: PUSH
21281: LD_EXP 51
21285: PUSH
21286: LD_EXP 52
21290: PUSH
21291: LD_EXP 53
21295: PUSH
21296: LD_EXP 54
21300: PUSH
21301: LD_EXP 55
21305: PUSH
21306: LD_EXP 56
21310: PUSH
21311: LD_EXP 57
21315: PUSH
21316: LD_EXP 65
21320: PUSH
21321: LD_EXP 66
21325: PUSH
21326: LD_EXP 67
21330: PUSH
21331: LD_EXP 68
21335: PUSH
21336: LD_EXP 70
21340: PUSH
21341: LD_EXP 71
21345: PUSH
21346: LD_EXP 72
21350: PUSH
21351: LD_EXP 75
21355: PUSH
21356: LD_EXP 77
21360: PUSH
21361: LD_EXP 78
21365: PUSH
21366: LD_EXP 79
21370: PUSH
21371: LD_EXP 81
21375: PUSH
21376: LD_EXP 82
21380: PUSH
21381: LD_EXP 85
21385: PUSH
21386: LD_EXP 86
21390: PUSH
21391: LD_EXP 87
21395: PUSH
21396: LD_EXP 88
21400: PUSH
21401: LD_EXP 89
21405: PUSH
21406: LD_EXP 90
21410: PUSH
21411: LD_EXP 91
21415: PUSH
21416: LD_EXP 92
21420: PUSH
21421: LD_EXP 93
21425: PUSH
21426: LD_EXP 58
21430: PUSH
21431: LD_EXP 59
21435: PUSH
21436: LD_EXP 62
21440: PUSH
21441: LD_EXP 63
21445: PUSH
21446: LD_EXP 64
21450: PUSH
21451: LD_EXP 60
21455: PUSH
21456: LD_EXP 61
21460: PUSH
21461: LD_EXP 69
21465: PUSH
21466: LD_EXP 73
21470: PUSH
21471: LD_EXP 74
21475: PUSH
21476: LD_EXP 76
21480: PUSH
21481: LD_EXP 80
21485: PUSH
21486: LD_EXP 83
21490: PUSH
21491: LD_EXP 84
21495: PUSH
21496: LD_EXP 94
21500: PUSH
21501: LD_EXP 95
21505: PUSH
21506: LD_EXP 96
21510: PUSH
21511: LD_EXP 97
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: ST_TO_ADDR
// tmp :=  ;
21572: LD_ADDR_VAR 0 3
21576: PUSH
21577: LD_STRING 
21579: ST_TO_ADDR
// for i = 1 to normalCounter do
21580: LD_ADDR_VAR 0 8
21584: PUSH
21585: DOUBLE
21586: LD_INT 1
21588: DEC
21589: ST_TO_ADDR
21590: LD_EXP 42
21594: PUSH
21595: FOR_TO
21596: IFFALSE 21632
// begin if flags [ i ] then
21598: LD_VAR 0 4
21602: PUSH
21603: LD_VAR 0 8
21607: ARRAY
21608: IFFALSE 21630
// tmp := tmp & i & ; ;
21610: LD_ADDR_VAR 0 3
21614: PUSH
21615: LD_VAR 0 3
21619: PUSH
21620: LD_VAR 0 8
21624: STR
21625: PUSH
21626: LD_STRING ;
21628: STR
21629: ST_TO_ADDR
// end ;
21630: GO 21595
21632: POP
21633: POP
// for i = 1 to hardcoreCounter do
21634: LD_ADDR_VAR 0 8
21638: PUSH
21639: DOUBLE
21640: LD_INT 1
21642: DEC
21643: ST_TO_ADDR
21644: LD_EXP 43
21648: PUSH
21649: FOR_TO
21650: IFFALSE 21696
// begin if flags [ normalCounter + i ] then
21652: LD_VAR 0 4
21656: PUSH
21657: LD_EXP 42
21661: PUSH
21662: LD_VAR 0 8
21666: PLUS
21667: ARRAY
21668: IFFALSE 21694
// tmp := tmp & ( 100 + i ) & ; ;
21670: LD_ADDR_VAR 0 3
21674: PUSH
21675: LD_VAR 0 3
21679: PUSH
21680: LD_INT 100
21682: PUSH
21683: LD_VAR 0 8
21687: PLUS
21688: STR
21689: PUSH
21690: LD_STRING ;
21692: STR
21693: ST_TO_ADDR
// end ;
21694: GO 21649
21696: POP
21697: POP
// if tmp then
21698: LD_VAR 0 3
21702: IFFALSE 21714
// active := tmp ;
21704: LD_ADDR_VAR 0 7
21708: PUSH
21709: LD_VAR 0 3
21713: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21714: LD_STRING getStreamItemsFromMission("
21716: PUSH
21717: LD_VAR 0 5
21721: STR
21722: PUSH
21723: LD_STRING ","
21725: STR
21726: PUSH
21727: LD_VAR 0 6
21731: STR
21732: PUSH
21733: LD_STRING ","
21735: STR
21736: PUSH
21737: LD_VAR 0 7
21741: STR
21742: PUSH
21743: LD_STRING ")
21745: STR
21746: PPUSH
21747: CALL_OW 559
// end else
21751: GO 21760
// ToLua ( getStreamItemsFromMission("","","") ) ;
21753: LD_STRING getStreamItemsFromMission("","","")
21755: PPUSH
21756: CALL_OW 559
// end ;
21760: LD_VAR 0 2
21764: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21765: LD_EXP 41
21769: PUSH
21770: LD_EXP 46
21774: AND
21775: IFFALSE 21899
21777: GO 21779
21779: DISABLE
21780: LD_INT 0
21782: PPUSH
21783: PPUSH
// begin enable ;
21784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21785: LD_ADDR_VAR 0 2
21789: PUSH
21790: LD_INT 22
21792: PUSH
21793: LD_OWVAR 2
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: LD_INT 34
21807: PUSH
21808: LD_INT 7
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 34
21817: PUSH
21818: LD_INT 45
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 34
21827: PUSH
21828: LD_INT 28
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 34
21837: PUSH
21838: LD_INT 47
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PPUSH
21856: CALL_OW 69
21860: ST_TO_ADDR
// if not tmp then
21861: LD_VAR 0 2
21865: NOT
21866: IFFALSE 21870
// exit ;
21868: GO 21899
// for i in tmp do
21870: LD_ADDR_VAR 0 1
21874: PUSH
21875: LD_VAR 0 2
21879: PUSH
21880: FOR_IN
21881: IFFALSE 21897
// begin SetLives ( i , 0 ) ;
21883: LD_VAR 0 1
21887: PPUSH
21888: LD_INT 0
21890: PPUSH
21891: CALL_OW 234
// end ;
21895: GO 21880
21897: POP
21898: POP
// end ;
21899: PPOPN 2
21901: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21902: LD_EXP 41
21906: PUSH
21907: LD_EXP 47
21911: AND
21912: IFFALSE 21996
21914: GO 21916
21916: DISABLE
21917: LD_INT 0
21919: PPUSH
21920: PPUSH
// begin enable ;
21921: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21922: LD_ADDR_VAR 0 2
21926: PUSH
21927: LD_INT 22
21929: PUSH
21930: LD_OWVAR 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 32
21941: PUSH
21942: LD_INT 3
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 69
21957: ST_TO_ADDR
// if not tmp then
21958: LD_VAR 0 2
21962: NOT
21963: IFFALSE 21967
// exit ;
21965: GO 21996
// for i in tmp do
21967: LD_ADDR_VAR 0 1
21971: PUSH
21972: LD_VAR 0 2
21976: PUSH
21977: FOR_IN
21978: IFFALSE 21994
// begin SetLives ( i , 0 ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: LD_INT 0
21987: PPUSH
21988: CALL_OW 234
// end ;
21992: GO 21977
21994: POP
21995: POP
// end ;
21996: PPOPN 2
21998: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21999: LD_EXP 41
22003: PUSH
22004: LD_EXP 44
22008: AND
22009: IFFALSE 22102
22011: GO 22013
22013: DISABLE
22014: LD_INT 0
22016: PPUSH
// begin enable ;
22017: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22018: LD_ADDR_VAR 0 1
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_OWVAR 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 25
22040: PUSH
22041: LD_INT 5
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 25
22050: PUSH
22051: LD_INT 9
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 25
22060: PUSH
22061: LD_INT 8
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PPUSH
22078: CALL_OW 69
22082: PUSH
22083: FOR_IN
22084: IFFALSE 22100
// begin SetClass ( i , 1 ) ;
22086: LD_VAR 0 1
22090: PPUSH
22091: LD_INT 1
22093: PPUSH
22094: CALL_OW 336
// end ;
22098: GO 22083
22100: POP
22101: POP
// end ;
22102: PPOPN 1
22104: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22105: LD_EXP 41
22109: PUSH
22110: LD_EXP 45
22114: AND
22115: PUSH
22116: LD_OWVAR 65
22120: PUSH
22121: LD_INT 7
22123: LESS
22124: AND
22125: IFFALSE 22139
22127: GO 22129
22129: DISABLE
// begin enable ;
22130: ENABLE
// game_speed := 7 ;
22131: LD_ADDR_OWVAR 65
22135: PUSH
22136: LD_INT 7
22138: ST_TO_ADDR
// end ;
22139: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22140: LD_EXP 41
22144: PUSH
22145: LD_EXP 48
22149: AND
22150: IFFALSE 22352
22152: GO 22154
22154: DISABLE
22155: LD_INT 0
22157: PPUSH
22158: PPUSH
22159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22160: LD_ADDR_VAR 0 3
22164: PUSH
22165: LD_INT 81
22167: PUSH
22168: LD_OWVAR 2
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 21
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 69
22195: ST_TO_ADDR
// if not tmp then
22196: LD_VAR 0 3
22200: NOT
22201: IFFALSE 22205
// exit ;
22203: GO 22352
// if tmp > 5 then
22205: LD_VAR 0 3
22209: PUSH
22210: LD_INT 5
22212: GREATER
22213: IFFALSE 22225
// k := 5 else
22215: LD_ADDR_VAR 0 2
22219: PUSH
22220: LD_INT 5
22222: ST_TO_ADDR
22223: GO 22235
// k := tmp ;
22225: LD_ADDR_VAR 0 2
22229: PUSH
22230: LD_VAR 0 3
22234: ST_TO_ADDR
// for i := 1 to k do
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: DOUBLE
22241: LD_INT 1
22243: DEC
22244: ST_TO_ADDR
22245: LD_VAR 0 2
22249: PUSH
22250: FOR_TO
22251: IFFALSE 22350
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22253: LD_VAR 0 3
22257: PUSH
22258: LD_VAR 0 1
22262: ARRAY
22263: PPUSH
22264: LD_VAR 0 1
22268: PUSH
22269: LD_INT 4
22271: MOD
22272: PUSH
22273: LD_INT 1
22275: PLUS
22276: PPUSH
22277: CALL_OW 259
22281: PUSH
22282: LD_INT 10
22284: LESS
22285: IFFALSE 22348
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22287: LD_VAR 0 3
22291: PUSH
22292: LD_VAR 0 1
22296: ARRAY
22297: PPUSH
22298: LD_VAR 0 1
22302: PUSH
22303: LD_INT 4
22305: MOD
22306: PUSH
22307: LD_INT 1
22309: PLUS
22310: PPUSH
22311: LD_VAR 0 3
22315: PUSH
22316: LD_VAR 0 1
22320: ARRAY
22321: PPUSH
22322: LD_VAR 0 1
22326: PUSH
22327: LD_INT 4
22329: MOD
22330: PUSH
22331: LD_INT 1
22333: PLUS
22334: PPUSH
22335: CALL_OW 259
22339: PUSH
22340: LD_INT 1
22342: PLUS
22343: PPUSH
22344: CALL_OW 237
22348: GO 22250
22350: POP
22351: POP
// end ;
22352: PPOPN 3
22354: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22355: LD_EXP 41
22359: PUSH
22360: LD_EXP 49
22364: AND
22365: IFFALSE 22385
22367: GO 22369
22369: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22370: LD_INT 4
22372: PPUSH
22373: LD_OWVAR 2
22377: PPUSH
22378: LD_INT 0
22380: PPUSH
22381: CALL_OW 324
22385: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22386: LD_EXP 41
22390: PUSH
22391: LD_EXP 78
22395: AND
22396: IFFALSE 22416
22398: GO 22400
22400: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22401: LD_INT 19
22403: PPUSH
22404: LD_OWVAR 2
22408: PPUSH
22409: LD_INT 0
22411: PPUSH
22412: CALL_OW 324
22416: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22417: LD_EXP 41
22421: PUSH
22422: LD_EXP 50
22426: AND
22427: IFFALSE 22529
22429: GO 22431
22431: DISABLE
22432: LD_INT 0
22434: PPUSH
22435: PPUSH
// begin enable ;
22436: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: LD_INT 22
22444: PUSH
22445: LD_OWVAR 2
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 34
22459: PUSH
22460: LD_INT 11
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 34
22469: PUSH
22470: LD_INT 30
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PPUSH
22486: CALL_OW 69
22490: ST_TO_ADDR
// if not tmp then
22491: LD_VAR 0 2
22495: NOT
22496: IFFALSE 22500
// exit ;
22498: GO 22529
// for i in tmp do
22500: LD_ADDR_VAR 0 1
22504: PUSH
22505: LD_VAR 0 2
22509: PUSH
22510: FOR_IN
22511: IFFALSE 22527
// begin SetLives ( i , 0 ) ;
22513: LD_VAR 0 1
22517: PPUSH
22518: LD_INT 0
22520: PPUSH
22521: CALL_OW 234
// end ;
22525: GO 22510
22527: POP
22528: POP
// end ;
22529: PPOPN 2
22531: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22532: LD_EXP 41
22536: PUSH
22537: LD_EXP 51
22541: AND
22542: IFFALSE 22562
22544: GO 22546
22546: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22547: LD_INT 32
22549: PPUSH
22550: LD_OWVAR 2
22554: PPUSH
22555: LD_INT 0
22557: PPUSH
22558: CALL_OW 324
22562: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22563: LD_EXP 41
22567: PUSH
22568: LD_EXP 52
22572: AND
22573: IFFALSE 22754
22575: GO 22577
22577: DISABLE
22578: LD_INT 0
22580: PPUSH
22581: PPUSH
22582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22583: LD_ADDR_VAR 0 2
22587: PUSH
22588: LD_INT 22
22590: PUSH
22591: LD_OWVAR 2
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 33
22602: PUSH
22603: LD_INT 3
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PPUSH
22614: CALL_OW 69
22618: ST_TO_ADDR
// if not tmp then
22619: LD_VAR 0 2
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 22754
// side := 0 ;
22628: LD_ADDR_VAR 0 3
22632: PUSH
22633: LD_INT 0
22635: ST_TO_ADDR
// for i := 1 to 8 do
22636: LD_ADDR_VAR 0 1
22640: PUSH
22641: DOUBLE
22642: LD_INT 1
22644: DEC
22645: ST_TO_ADDR
22646: LD_INT 8
22648: PUSH
22649: FOR_TO
22650: IFFALSE 22698
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22652: LD_OWVAR 2
22656: PUSH
22657: LD_VAR 0 1
22661: NONEQUAL
22662: PUSH
22663: LD_OWVAR 2
22667: PPUSH
22668: LD_VAR 0 1
22672: PPUSH
22673: CALL_OW 81
22677: PUSH
22678: LD_INT 2
22680: EQUAL
22681: AND
22682: IFFALSE 22696
// begin side := i ;
22684: LD_ADDR_VAR 0 3
22688: PUSH
22689: LD_VAR 0 1
22693: ST_TO_ADDR
// break ;
22694: GO 22698
// end ;
22696: GO 22649
22698: POP
22699: POP
// if not side then
22700: LD_VAR 0 3
22704: NOT
22705: IFFALSE 22709
// exit ;
22707: GO 22754
// for i := 1 to tmp do
22709: LD_ADDR_VAR 0 1
22713: PUSH
22714: DOUBLE
22715: LD_INT 1
22717: DEC
22718: ST_TO_ADDR
22719: LD_VAR 0 2
22723: PUSH
22724: FOR_TO
22725: IFFALSE 22752
// if Prob ( 60 ) then
22727: LD_INT 60
22729: PPUSH
22730: CALL_OW 13
22734: IFFALSE 22750
// SetSide ( i , side ) ;
22736: LD_VAR 0 1
22740: PPUSH
22741: LD_VAR 0 3
22745: PPUSH
22746: CALL_OW 235
22750: GO 22724
22752: POP
22753: POP
// end ;
22754: PPOPN 3
22756: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22757: LD_EXP 41
22761: PUSH
22762: LD_EXP 54
22766: AND
22767: IFFALSE 22886
22769: GO 22771
22771: DISABLE
22772: LD_INT 0
22774: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22775: LD_ADDR_VAR 0 1
22779: PUSH
22780: LD_INT 22
22782: PUSH
22783: LD_OWVAR 2
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 21
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: LD_INT 23
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 69
22828: PUSH
22829: FOR_IN
22830: IFFALSE 22884
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22832: LD_VAR 0 1
22836: PPUSH
22837: CALL_OW 257
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: LD_INT 4
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: IN
22860: IFFALSE 22882
// SetClass ( un , rand ( 1 , 4 ) ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_INT 1
22869: PPUSH
22870: LD_INT 4
22872: PPUSH
22873: CALL_OW 12
22877: PPUSH
22878: CALL_OW 336
22882: GO 22829
22884: POP
22885: POP
// end ;
22886: PPOPN 1
22888: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22889: LD_EXP 41
22893: PUSH
22894: LD_EXP 53
22898: AND
22899: IFFALSE 22978
22901: GO 22903
22903: DISABLE
22904: LD_INT 0
22906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22907: LD_ADDR_VAR 0 1
22911: PUSH
22912: LD_INT 22
22914: PUSH
22915: LD_OWVAR 2
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 21
22926: PUSH
22927: LD_INT 3
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PPUSH
22938: CALL_OW 69
22942: ST_TO_ADDR
// if not tmp then
22943: LD_VAR 0 1
22947: NOT
22948: IFFALSE 22952
// exit ;
22950: GO 22978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22952: LD_VAR 0 1
22956: PUSH
22957: LD_INT 1
22959: PPUSH
22960: LD_VAR 0 1
22964: PPUSH
22965: CALL_OW 12
22969: ARRAY
22970: PPUSH
22971: LD_INT 100
22973: PPUSH
22974: CALL_OW 234
// end ;
22978: PPOPN 1
22980: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22981: LD_EXP 41
22985: PUSH
22986: LD_EXP 55
22990: AND
22991: IFFALSE 23089
22993: GO 22995
22995: DISABLE
22996: LD_INT 0
22998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22999: LD_ADDR_VAR 0 1
23003: PUSH
23004: LD_INT 22
23006: PUSH
23007: LD_OWVAR 2
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 21
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PPUSH
23030: CALL_OW 69
23034: ST_TO_ADDR
// if not tmp then
23035: LD_VAR 0 1
23039: NOT
23040: IFFALSE 23044
// exit ;
23042: GO 23089
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23044: LD_VAR 0 1
23048: PUSH
23049: LD_INT 1
23051: PPUSH
23052: LD_VAR 0 1
23056: PPUSH
23057: CALL_OW 12
23061: ARRAY
23062: PPUSH
23063: LD_INT 1
23065: PPUSH
23066: LD_INT 4
23068: PPUSH
23069: CALL_OW 12
23073: PPUSH
23074: LD_INT 3000
23076: PPUSH
23077: LD_INT 9000
23079: PPUSH
23080: CALL_OW 12
23084: PPUSH
23085: CALL_OW 492
// end ;
23089: PPOPN 1
23091: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23092: LD_EXP 41
23096: PUSH
23097: LD_EXP 56
23101: AND
23102: IFFALSE 23122
23104: GO 23106
23106: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23107: LD_INT 1
23109: PPUSH
23110: LD_OWVAR 2
23114: PPUSH
23115: LD_INT 0
23117: PPUSH
23118: CALL_OW 324
23122: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23123: LD_EXP 41
23127: PUSH
23128: LD_EXP 57
23132: AND
23133: IFFALSE 23216
23135: GO 23137
23137: DISABLE
23138: LD_INT 0
23140: PPUSH
23141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23142: LD_ADDR_VAR 0 2
23146: PUSH
23147: LD_INT 22
23149: PUSH
23150: LD_OWVAR 2
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 3
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: ST_TO_ADDR
// if not tmp then
23178: LD_VAR 0 2
23182: NOT
23183: IFFALSE 23187
// exit ;
23185: GO 23216
// for i in tmp do
23187: LD_ADDR_VAR 0 1
23191: PUSH
23192: LD_VAR 0 2
23196: PUSH
23197: FOR_IN
23198: IFFALSE 23214
// SetBLevel ( i , 10 ) ;
23200: LD_VAR 0 1
23204: PPUSH
23205: LD_INT 10
23207: PPUSH
23208: CALL_OW 241
23212: GO 23197
23214: POP
23215: POP
// end ;
23216: PPOPN 2
23218: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23219: LD_EXP 41
23223: PUSH
23224: LD_EXP 58
23228: AND
23229: IFFALSE 23340
23231: GO 23233
23233: DISABLE
23234: LD_INT 0
23236: PPUSH
23237: PPUSH
23238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23239: LD_ADDR_VAR 0 3
23243: PUSH
23244: LD_INT 22
23246: PUSH
23247: LD_OWVAR 2
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 25
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 69
23274: ST_TO_ADDR
// if not tmp then
23275: LD_VAR 0 3
23279: NOT
23280: IFFALSE 23284
// exit ;
23282: GO 23340
// un := tmp [ rand ( 1 , tmp ) ] ;
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_VAR 0 3
23293: PUSH
23294: LD_INT 1
23296: PPUSH
23297: LD_VAR 0 3
23301: PPUSH
23302: CALL_OW 12
23306: ARRAY
23307: ST_TO_ADDR
// if Crawls ( un ) then
23308: LD_VAR 0 2
23312: PPUSH
23313: CALL_OW 318
23317: IFFALSE 23328
// ComWalk ( un ) ;
23319: LD_VAR 0 2
23323: PPUSH
23324: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23328: LD_VAR 0 2
23332: PPUSH
23333: LD_INT 5
23335: PPUSH
23336: CALL_OW 336
// end ;
23340: PPOPN 3
23342: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23343: LD_EXP 41
23347: PUSH
23348: LD_EXP 59
23352: AND
23353: PUSH
23354: LD_OWVAR 67
23358: PUSH
23359: LD_INT 4
23361: LESS
23362: AND
23363: IFFALSE 23382
23365: GO 23367
23367: DISABLE
// begin Difficulty := Difficulty + 1 ;
23368: LD_ADDR_OWVAR 67
23372: PUSH
23373: LD_OWVAR 67
23377: PUSH
23378: LD_INT 1
23380: PLUS
23381: ST_TO_ADDR
// end ;
23382: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23383: LD_EXP 41
23387: PUSH
23388: LD_EXP 60
23392: AND
23393: IFFALSE 23496
23395: GO 23397
23397: DISABLE
23398: LD_INT 0
23400: PPUSH
// begin for i := 1 to 5 do
23401: LD_ADDR_VAR 0 1
23405: PUSH
23406: DOUBLE
23407: LD_INT 1
23409: DEC
23410: ST_TO_ADDR
23411: LD_INT 5
23413: PUSH
23414: FOR_TO
23415: IFFALSE 23494
// begin uc_nation := nation_nature ;
23417: LD_ADDR_OWVAR 21
23421: PUSH
23422: LD_INT 0
23424: ST_TO_ADDR
// uc_side := 0 ;
23425: LD_ADDR_OWVAR 20
23429: PUSH
23430: LD_INT 0
23432: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23433: LD_ADDR_OWVAR 29
23437: PUSH
23438: LD_INT 12
23440: PUSH
23441: LD_INT 12
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: ST_TO_ADDR
// hc_agressivity := 20 ;
23448: LD_ADDR_OWVAR 35
23452: PUSH
23453: LD_INT 20
23455: ST_TO_ADDR
// hc_class := class_tiger ;
23456: LD_ADDR_OWVAR 28
23460: PUSH
23461: LD_INT 14
23463: ST_TO_ADDR
// hc_gallery :=  ;
23464: LD_ADDR_OWVAR 33
23468: PUSH
23469: LD_STRING 
23471: ST_TO_ADDR
// hc_name :=  ;
23472: LD_ADDR_OWVAR 26
23476: PUSH
23477: LD_STRING 
23479: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23480: CALL_OW 44
23484: PPUSH
23485: LD_INT 0
23487: PPUSH
23488: CALL_OW 51
// end ;
23492: GO 23414
23494: POP
23495: POP
// end ;
23496: PPOPN 1
23498: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23499: LD_EXP 41
23503: PUSH
23504: LD_EXP 61
23508: AND
23509: IFFALSE 23518
23511: GO 23513
23513: DISABLE
// StreamSibBomb ;
23514: CALL 23519 0 0
23518: END
// export function StreamSibBomb ; var i , x , y ; begin
23519: LD_INT 0
23521: PPUSH
23522: PPUSH
23523: PPUSH
23524: PPUSH
// result := false ;
23525: LD_ADDR_VAR 0 1
23529: PUSH
23530: LD_INT 0
23532: ST_TO_ADDR
// for i := 1 to 16 do
23533: LD_ADDR_VAR 0 2
23537: PUSH
23538: DOUBLE
23539: LD_INT 1
23541: DEC
23542: ST_TO_ADDR
23543: LD_INT 16
23545: PUSH
23546: FOR_TO
23547: IFFALSE 23746
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23549: LD_ADDR_VAR 0 3
23553: PUSH
23554: LD_INT 10
23556: PUSH
23557: LD_INT 20
23559: PUSH
23560: LD_INT 30
23562: PUSH
23563: LD_INT 40
23565: PUSH
23566: LD_INT 50
23568: PUSH
23569: LD_INT 60
23571: PUSH
23572: LD_INT 70
23574: PUSH
23575: LD_INT 80
23577: PUSH
23578: LD_INT 90
23580: PUSH
23581: LD_INT 100
23583: PUSH
23584: LD_INT 110
23586: PUSH
23587: LD_INT 120
23589: PUSH
23590: LD_INT 130
23592: PUSH
23593: LD_INT 140
23595: PUSH
23596: LD_INT 150
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PPUSH
23619: LD_INT 15
23621: PPUSH
23622: CALL_OW 12
23626: ARRAY
23627: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23628: LD_ADDR_VAR 0 4
23632: PUSH
23633: LD_INT 10
23635: PUSH
23636: LD_INT 20
23638: PUSH
23639: LD_INT 30
23641: PUSH
23642: LD_INT 40
23644: PUSH
23645: LD_INT 50
23647: PUSH
23648: LD_INT 60
23650: PUSH
23651: LD_INT 70
23653: PUSH
23654: LD_INT 80
23656: PUSH
23657: LD_INT 90
23659: PUSH
23660: LD_INT 100
23662: PUSH
23663: LD_INT 110
23665: PUSH
23666: LD_INT 120
23668: PUSH
23669: LD_INT 130
23671: PUSH
23672: LD_INT 140
23674: PUSH
23675: LD_INT 150
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: PPUSH
23698: LD_INT 15
23700: PPUSH
23701: CALL_OW 12
23705: ARRAY
23706: ST_TO_ADDR
// if ValidHex ( x , y ) then
23707: LD_VAR 0 3
23711: PPUSH
23712: LD_VAR 0 4
23716: PPUSH
23717: CALL_OW 488
23721: IFFALSE 23744
// begin result := [ x , y ] ;
23723: LD_ADDR_VAR 0 1
23727: PUSH
23728: LD_VAR 0 3
23732: PUSH
23733: LD_VAR 0 4
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: ST_TO_ADDR
// break ;
23742: GO 23746
// end ; end ;
23744: GO 23546
23746: POP
23747: POP
// if result then
23748: LD_VAR 0 1
23752: IFFALSE 23812
// begin ToLua ( playSibBomb() ) ;
23754: LD_STRING playSibBomb()
23756: PPUSH
23757: CALL_OW 559
// wait ( 0 0$14 ) ;
23761: LD_INT 490
23763: PPUSH
23764: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23768: LD_VAR 0 1
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PPUSH
23777: LD_VAR 0 1
23781: PUSH
23782: LD_INT 2
23784: ARRAY
23785: PPUSH
23786: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23790: LD_VAR 0 1
23794: PUSH
23795: LD_INT 1
23797: ARRAY
23798: PPUSH
23799: LD_VAR 0 1
23803: PUSH
23804: LD_INT 2
23806: ARRAY
23807: PPUSH
23808: CALL_OW 429
// end ; end ;
23812: LD_VAR 0 1
23816: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23817: LD_EXP 41
23821: PUSH
23822: LD_EXP 63
23826: AND
23827: IFFALSE 23839
23829: GO 23831
23831: DISABLE
// YouLost (  ) ;
23832: LD_STRING 
23834: PPUSH
23835: CALL_OW 104
23839: END
// every 0 0$1 trigger StreamModeActive and sFog do
23840: LD_EXP 41
23844: PUSH
23845: LD_EXP 62
23849: AND
23850: IFFALSE 23864
23852: GO 23854
23854: DISABLE
// FogOff ( your_side ) ;
23855: LD_OWVAR 2
23859: PPUSH
23860: CALL_OW 344
23864: END
// every 0 0$1 trigger StreamModeActive and sSun do
23865: LD_EXP 41
23869: PUSH
23870: LD_EXP 64
23874: AND
23875: IFFALSE 23903
23877: GO 23879
23879: DISABLE
// begin solar_recharge_percent := 0 ;
23880: LD_ADDR_OWVAR 79
23884: PUSH
23885: LD_INT 0
23887: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23888: LD_INT 10500
23890: PPUSH
23891: CALL_OW 67
// solar_recharge_percent := 100 ;
23895: LD_ADDR_OWVAR 79
23899: PUSH
23900: LD_INT 100
23902: ST_TO_ADDR
// end ;
23903: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23904: LD_EXP 41
23908: PUSH
23909: LD_EXP 65
23913: AND
23914: IFFALSE 24153
23916: GO 23918
23918: DISABLE
23919: LD_INT 0
23921: PPUSH
23922: PPUSH
23923: PPUSH
// begin tmp := [ ] ;
23924: LD_ADDR_VAR 0 3
23928: PUSH
23929: EMPTY
23930: ST_TO_ADDR
// for i := 1 to 6 do
23931: LD_ADDR_VAR 0 1
23935: PUSH
23936: DOUBLE
23937: LD_INT 1
23939: DEC
23940: ST_TO_ADDR
23941: LD_INT 6
23943: PUSH
23944: FOR_TO
23945: IFFALSE 24050
// begin uc_nation := nation_nature ;
23947: LD_ADDR_OWVAR 21
23951: PUSH
23952: LD_INT 0
23954: ST_TO_ADDR
// uc_side := 0 ;
23955: LD_ADDR_OWVAR 20
23959: PUSH
23960: LD_INT 0
23962: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23963: LD_ADDR_OWVAR 29
23967: PUSH
23968: LD_INT 12
23970: PUSH
23971: LD_INT 12
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: ST_TO_ADDR
// hc_agressivity := 20 ;
23978: LD_ADDR_OWVAR 35
23982: PUSH
23983: LD_INT 20
23985: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23986: LD_ADDR_OWVAR 28
23990: PUSH
23991: LD_INT 17
23993: ST_TO_ADDR
// hc_gallery :=  ;
23994: LD_ADDR_OWVAR 33
23998: PUSH
23999: LD_STRING 
24001: ST_TO_ADDR
// hc_name :=  ;
24002: LD_ADDR_OWVAR 26
24006: PUSH
24007: LD_STRING 
24009: ST_TO_ADDR
// un := CreateHuman ;
24010: LD_ADDR_VAR 0 2
24014: PUSH
24015: CALL_OW 44
24019: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24020: LD_VAR 0 2
24024: PPUSH
24025: LD_INT 1
24027: PPUSH
24028: CALL_OW 51
// tmp := tmp ^ un ;
24032: LD_ADDR_VAR 0 3
24036: PUSH
24037: LD_VAR 0 3
24041: PUSH
24042: LD_VAR 0 2
24046: ADD
24047: ST_TO_ADDR
// end ;
24048: GO 23944
24050: POP
24051: POP
// repeat wait ( 0 0$1 ) ;
24052: LD_INT 35
24054: PPUSH
24055: CALL_OW 67
// for un in tmp do
24059: LD_ADDR_VAR 0 2
24063: PUSH
24064: LD_VAR 0 3
24068: PUSH
24069: FOR_IN
24070: IFFALSE 24144
// begin if IsDead ( un ) then
24072: LD_VAR 0 2
24076: PPUSH
24077: CALL_OW 301
24081: IFFALSE 24101
// begin tmp := tmp diff un ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_VAR 0 3
24092: PUSH
24093: LD_VAR 0 2
24097: DIFF
24098: ST_TO_ADDR
// continue ;
24099: GO 24069
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24101: LD_VAR 0 2
24105: PPUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 22
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PPUSH
24123: CALL_OW 69
24127: PPUSH
24128: LD_VAR 0 2
24132: PPUSH
24133: CALL_OW 74
24137: PPUSH
24138: CALL_OW 115
// end ;
24142: GO 24069
24144: POP
24145: POP
// until not tmp ;
24146: LD_VAR 0 3
24150: NOT
24151: IFFALSE 24052
// end ;
24153: PPOPN 3
24155: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24156: LD_EXP 41
24160: PUSH
24161: LD_EXP 66
24165: AND
24166: IFFALSE 24220
24168: GO 24170
24170: DISABLE
// begin ToLua ( displayTroll(); ) ;
24171: LD_STRING displayTroll();
24173: PPUSH
24174: CALL_OW 559
// wait ( 3 3$00 ) ;
24178: LD_INT 6300
24180: PPUSH
24181: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24185: LD_STRING hideTroll();
24187: PPUSH
24188: CALL_OW 559
// wait ( 1 1$00 ) ;
24192: LD_INT 2100
24194: PPUSH
24195: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24199: LD_STRING displayTroll();
24201: PPUSH
24202: CALL_OW 559
// wait ( 1 1$00 ) ;
24206: LD_INT 2100
24208: PPUSH
24209: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24213: LD_STRING hideTroll();
24215: PPUSH
24216: CALL_OW 559
// end ;
24220: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24221: LD_EXP 41
24225: PUSH
24226: LD_EXP 67
24230: AND
24231: IFFALSE 24294
24233: GO 24235
24235: DISABLE
24236: LD_INT 0
24238: PPUSH
// begin p := 0 ;
24239: LD_ADDR_VAR 0 1
24243: PUSH
24244: LD_INT 0
24246: ST_TO_ADDR
// repeat game_speed := 1 ;
24247: LD_ADDR_OWVAR 65
24251: PUSH
24252: LD_INT 1
24254: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24255: LD_INT 35
24257: PPUSH
24258: CALL_OW 67
// p := p + 1 ;
24262: LD_ADDR_VAR 0 1
24266: PUSH
24267: LD_VAR 0 1
24271: PUSH
24272: LD_INT 1
24274: PLUS
24275: ST_TO_ADDR
// until p >= 60 ;
24276: LD_VAR 0 1
24280: PUSH
24281: LD_INT 60
24283: GREATEREQUAL
24284: IFFALSE 24247
// game_speed := 4 ;
24286: LD_ADDR_OWVAR 65
24290: PUSH
24291: LD_INT 4
24293: ST_TO_ADDR
// end ;
24294: PPOPN 1
24296: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24297: LD_EXP 41
24301: PUSH
24302: LD_EXP 68
24306: AND
24307: IFFALSE 24453
24309: GO 24311
24311: DISABLE
24312: LD_INT 0
24314: PPUSH
24315: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_OWVAR 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 30
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PPUSH
24365: CALL_OW 69
24369: ST_TO_ADDR
// if not depot then
24370: LD_VAR 0 1
24374: NOT
24375: IFFALSE 24379
// exit ;
24377: GO 24453
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24379: LD_ADDR_VAR 0 2
24383: PUSH
24384: LD_VAR 0 1
24388: PUSH
24389: LD_INT 1
24391: PPUSH
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 12
24401: ARRAY
24402: PPUSH
24403: CALL_OW 274
24407: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24408: LD_VAR 0 2
24412: PPUSH
24413: LD_INT 1
24415: PPUSH
24416: LD_INT 0
24418: PPUSH
24419: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24423: LD_VAR 0 2
24427: PPUSH
24428: LD_INT 2
24430: PPUSH
24431: LD_INT 0
24433: PPUSH
24434: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24438: LD_VAR 0 2
24442: PPUSH
24443: LD_INT 3
24445: PPUSH
24446: LD_INT 0
24448: PPUSH
24449: CALL_OW 277
// end ;
24453: PPOPN 2
24455: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24456: LD_EXP 41
24460: PUSH
24461: LD_EXP 69
24465: AND
24466: IFFALSE 24563
24468: GO 24470
24470: DISABLE
24471: LD_INT 0
24473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24474: LD_ADDR_VAR 0 1
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_OWVAR 2
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 21
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: LD_INT 23
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: PPUSH
24523: CALL_OW 69
24527: ST_TO_ADDR
// if not tmp then
24528: LD_VAR 0 1
24532: NOT
24533: IFFALSE 24537
// exit ;
24535: GO 24563
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24537: LD_VAR 0 1
24541: PUSH
24542: LD_INT 1
24544: PPUSH
24545: LD_VAR 0 1
24549: PPUSH
24550: CALL_OW 12
24554: ARRAY
24555: PPUSH
24556: LD_INT 200
24558: PPUSH
24559: CALL_OW 234
// end ;
24563: PPOPN 1
24565: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24566: LD_EXP 41
24570: PUSH
24571: LD_EXP 70
24575: AND
24576: IFFALSE 24655
24578: GO 24580
24580: DISABLE
24581: LD_INT 0
24583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24584: LD_ADDR_VAR 0 1
24588: PUSH
24589: LD_INT 22
24591: PUSH
24592: LD_OWVAR 2
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 21
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PPUSH
24615: CALL_OW 69
24619: ST_TO_ADDR
// if not tmp then
24620: LD_VAR 0 1
24624: NOT
24625: IFFALSE 24629
// exit ;
24627: GO 24655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24629: LD_VAR 0 1
24633: PUSH
24634: LD_INT 1
24636: PPUSH
24637: LD_VAR 0 1
24641: PPUSH
24642: CALL_OW 12
24646: ARRAY
24647: PPUSH
24648: LD_INT 60
24650: PPUSH
24651: CALL_OW 234
// end ;
24655: PPOPN 1
24657: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24658: LD_EXP 41
24662: PUSH
24663: LD_EXP 71
24667: AND
24668: IFFALSE 24767
24670: GO 24672
24672: DISABLE
24673: LD_INT 0
24675: PPUSH
24676: PPUSH
// begin enable ;
24677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24678: LD_ADDR_VAR 0 1
24682: PUSH
24683: LD_INT 22
24685: PUSH
24686: LD_OWVAR 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 61
24697: PUSH
24698: EMPTY
24699: LIST
24700: PUSH
24701: LD_INT 33
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: PPUSH
24716: CALL_OW 69
24720: ST_TO_ADDR
// if not tmp then
24721: LD_VAR 0 1
24725: NOT
24726: IFFALSE 24730
// exit ;
24728: GO 24767
// for i in tmp do
24730: LD_ADDR_VAR 0 2
24734: PUSH
24735: LD_VAR 0 1
24739: PUSH
24740: FOR_IN
24741: IFFALSE 24765
// if IsControledBy ( i ) then
24743: LD_VAR 0 2
24747: PPUSH
24748: CALL_OW 312
24752: IFFALSE 24763
// ComUnlink ( i ) ;
24754: LD_VAR 0 2
24758: PPUSH
24759: CALL_OW 136
24763: GO 24740
24765: POP
24766: POP
// end ;
24767: PPOPN 2
24769: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24770: LD_EXP 41
24774: PUSH
24775: LD_EXP 72
24779: AND
24780: IFFALSE 24920
24782: GO 24784
24784: DISABLE
24785: LD_INT 0
24787: PPUSH
24788: PPUSH
// begin ToLua ( displayPowell(); ) ;
24789: LD_STRING displayPowell();
24791: PPUSH
24792: CALL_OW 559
// uc_side := 0 ;
24796: LD_ADDR_OWVAR 20
24800: PUSH
24801: LD_INT 0
24803: ST_TO_ADDR
// uc_nation := 2 ;
24804: LD_ADDR_OWVAR 21
24808: PUSH
24809: LD_INT 2
24811: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24812: LD_ADDR_OWVAR 37
24816: PUSH
24817: LD_INT 14
24819: ST_TO_ADDR
// vc_engine := engine_siberite ;
24820: LD_ADDR_OWVAR 39
24824: PUSH
24825: LD_INT 3
24827: ST_TO_ADDR
// vc_control := control_apeman ;
24828: LD_ADDR_OWVAR 38
24832: PUSH
24833: LD_INT 5
24835: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24836: LD_ADDR_OWVAR 40
24840: PUSH
24841: LD_INT 29
24843: ST_TO_ADDR
// un := CreateVehicle ;
24844: LD_ADDR_VAR 0 2
24848: PUSH
24849: CALL_OW 45
24853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24854: LD_VAR 0 2
24858: PPUSH
24859: LD_INT 1
24861: PPUSH
24862: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24866: LD_INT 35
24868: PPUSH
24869: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24873: LD_VAR 0 2
24877: PPUSH
24878: LD_INT 22
24880: PUSH
24881: LD_OWVAR 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PPUSH
24890: CALL_OW 69
24894: PPUSH
24895: LD_VAR 0 2
24899: PPUSH
24900: CALL_OW 74
24904: PPUSH
24905: CALL_OW 115
// until IsDead ( un ) ;
24909: LD_VAR 0 2
24913: PPUSH
24914: CALL_OW 301
24918: IFFALSE 24866
// end ;
24920: PPOPN 2
24922: END
// every 0 0$1 trigger StreamModeActive and sStu do
24923: LD_EXP 41
24927: PUSH
24928: LD_EXP 80
24932: AND
24933: IFFALSE 24949
24935: GO 24937
24937: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24938: LD_STRING displayStucuk();
24940: PPUSH
24941: CALL_OW 559
// ResetFog ;
24945: CALL_OW 335
// end ;
24949: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24950: LD_EXP 41
24954: PUSH
24955: LD_EXP 73
24959: AND
24960: IFFALSE 25101
24962: GO 24964
24964: DISABLE
24965: LD_INT 0
24967: PPUSH
24968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24969: LD_ADDR_VAR 0 2
24973: PUSH
24974: LD_INT 22
24976: PUSH
24977: LD_OWVAR 2
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 21
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PPUSH
25000: CALL_OW 69
25004: ST_TO_ADDR
// if not tmp then
25005: LD_VAR 0 2
25009: NOT
25010: IFFALSE 25014
// exit ;
25012: GO 25101
// un := tmp [ rand ( 1 , tmp ) ] ;
25014: LD_ADDR_VAR 0 1
25018: PUSH
25019: LD_VAR 0 2
25023: PUSH
25024: LD_INT 1
25026: PPUSH
25027: LD_VAR 0 2
25031: PPUSH
25032: CALL_OW 12
25036: ARRAY
25037: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25038: LD_VAR 0 1
25042: PPUSH
25043: LD_INT 0
25045: PPUSH
25046: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25050: LD_VAR 0 1
25054: PPUSH
25055: LD_OWVAR 3
25059: PUSH
25060: LD_VAR 0 1
25064: DIFF
25065: PPUSH
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 74
25075: PPUSH
25076: CALL_OW 115
// wait ( 0 0$20 ) ;
25080: LD_INT 700
25082: PPUSH
25083: CALL_OW 67
// SetSide ( un , your_side ) ;
25087: LD_VAR 0 1
25091: PPUSH
25092: LD_OWVAR 2
25096: PPUSH
25097: CALL_OW 235
// end ;
25101: PPOPN 2
25103: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25104: LD_EXP 41
25108: PUSH
25109: LD_EXP 74
25113: AND
25114: IFFALSE 25220
25116: GO 25118
25118: DISABLE
25119: LD_INT 0
25121: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25122: LD_ADDR_VAR 0 1
25126: PUSH
25127: LD_INT 22
25129: PUSH
25130: LD_OWVAR 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 30
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 30
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PPUSH
25171: CALL_OW 69
25175: ST_TO_ADDR
// if not depot then
25176: LD_VAR 0 1
25180: NOT
25181: IFFALSE 25185
// exit ;
25183: GO 25220
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25185: LD_VAR 0 1
25189: PUSH
25190: LD_INT 1
25192: ARRAY
25193: PPUSH
25194: CALL_OW 250
25198: PPUSH
25199: LD_VAR 0 1
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: PPUSH
25208: CALL_OW 251
25212: PPUSH
25213: LD_INT 70
25215: PPUSH
25216: CALL_OW 495
// end ;
25220: PPOPN 1
25222: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25223: LD_EXP 41
25227: PUSH
25228: LD_EXP 75
25232: AND
25233: IFFALSE 25444
25235: GO 25237
25237: DISABLE
25238: LD_INT 0
25240: PPUSH
25241: PPUSH
25242: PPUSH
25243: PPUSH
25244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25245: LD_ADDR_VAR 0 5
25249: PUSH
25250: LD_INT 22
25252: PUSH
25253: LD_OWVAR 2
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 21
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PPUSH
25276: CALL_OW 69
25280: ST_TO_ADDR
// if not tmp then
25281: LD_VAR 0 5
25285: NOT
25286: IFFALSE 25290
// exit ;
25288: GO 25444
// for i in tmp do
25290: LD_ADDR_VAR 0 1
25294: PUSH
25295: LD_VAR 0 5
25299: PUSH
25300: FOR_IN
25301: IFFALSE 25442
// begin d := rand ( 0 , 5 ) ;
25303: LD_ADDR_VAR 0 4
25307: PUSH
25308: LD_INT 0
25310: PPUSH
25311: LD_INT 5
25313: PPUSH
25314: CALL_OW 12
25318: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25319: LD_ADDR_VAR 0 2
25323: PUSH
25324: LD_VAR 0 1
25328: PPUSH
25329: CALL_OW 250
25333: PPUSH
25334: LD_VAR 0 4
25338: PPUSH
25339: LD_INT 3
25341: PPUSH
25342: LD_INT 12
25344: PPUSH
25345: CALL_OW 12
25349: PPUSH
25350: CALL_OW 272
25354: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25355: LD_ADDR_VAR 0 3
25359: PUSH
25360: LD_VAR 0 1
25364: PPUSH
25365: CALL_OW 251
25369: PPUSH
25370: LD_VAR 0 4
25374: PPUSH
25375: LD_INT 3
25377: PPUSH
25378: LD_INT 12
25380: PPUSH
25381: CALL_OW 12
25385: PPUSH
25386: CALL_OW 273
25390: ST_TO_ADDR
// if ValidHex ( x , y ) then
25391: LD_VAR 0 2
25395: PPUSH
25396: LD_VAR 0 3
25400: PPUSH
25401: CALL_OW 488
25405: IFFALSE 25440
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25407: LD_VAR 0 1
25411: PPUSH
25412: LD_VAR 0 2
25416: PPUSH
25417: LD_VAR 0 3
25421: PPUSH
25422: LD_INT 3
25424: PPUSH
25425: LD_INT 6
25427: PPUSH
25428: CALL_OW 12
25432: PPUSH
25433: LD_INT 1
25435: PPUSH
25436: CALL_OW 483
// end ;
25440: GO 25300
25442: POP
25443: POP
// end ;
25444: PPOPN 5
25446: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25447: LD_EXP 41
25451: PUSH
25452: LD_EXP 76
25456: AND
25457: IFFALSE 25551
25459: GO 25461
25461: DISABLE
25462: LD_INT 0
25464: PPUSH
25465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25466: LD_ADDR_VAR 0 2
25470: PUSH
25471: LD_INT 22
25473: PUSH
25474: LD_OWVAR 2
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 32
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 21
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 69
25512: ST_TO_ADDR
// if not tmp then
25513: LD_VAR 0 2
25517: NOT
25518: IFFALSE 25522
// exit ;
25520: GO 25551
// for i in tmp do
25522: LD_ADDR_VAR 0 1
25526: PUSH
25527: LD_VAR 0 2
25531: PUSH
25532: FOR_IN
25533: IFFALSE 25549
// SetFuel ( i , 0 ) ;
25535: LD_VAR 0 1
25539: PPUSH
25540: LD_INT 0
25542: PPUSH
25543: CALL_OW 240
25547: GO 25532
25549: POP
25550: POP
// end ;
25551: PPOPN 2
25553: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25554: LD_EXP 41
25558: PUSH
25559: LD_EXP 77
25563: AND
25564: IFFALSE 25630
25566: GO 25568
25568: DISABLE
25569: LD_INT 0
25571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25572: LD_ADDR_VAR 0 1
25576: PUSH
25577: LD_INT 22
25579: PUSH
25580: LD_OWVAR 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 30
25591: PUSH
25592: LD_INT 29
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PPUSH
25603: CALL_OW 69
25607: ST_TO_ADDR
// if not tmp then
25608: LD_VAR 0 1
25612: NOT
25613: IFFALSE 25617
// exit ;
25615: GO 25630
// DestroyUnit ( tmp [ 1 ] ) ;
25617: LD_VAR 0 1
25621: PUSH
25622: LD_INT 1
25624: ARRAY
25625: PPUSH
25626: CALL_OW 65
// end ;
25630: PPOPN 1
25632: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25633: LD_EXP 41
25637: PUSH
25638: LD_EXP 79
25642: AND
25643: IFFALSE 25772
25645: GO 25647
25647: DISABLE
25648: LD_INT 0
25650: PPUSH
// begin uc_side := 0 ;
25651: LD_ADDR_OWVAR 20
25655: PUSH
25656: LD_INT 0
25658: ST_TO_ADDR
// uc_nation := nation_arabian ;
25659: LD_ADDR_OWVAR 21
25663: PUSH
25664: LD_INT 2
25666: ST_TO_ADDR
// hc_gallery :=  ;
25667: LD_ADDR_OWVAR 33
25671: PUSH
25672: LD_STRING 
25674: ST_TO_ADDR
// hc_name :=  ;
25675: LD_ADDR_OWVAR 26
25679: PUSH
25680: LD_STRING 
25682: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25683: LD_INT 1
25685: PPUSH
25686: LD_INT 11
25688: PPUSH
25689: LD_INT 10
25691: PPUSH
25692: CALL_OW 380
// un := CreateHuman ;
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: CALL_OW 44
25705: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25706: LD_VAR 0 1
25710: PPUSH
25711: LD_INT 1
25713: PPUSH
25714: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25718: LD_INT 35
25720: PPUSH
25721: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25725: LD_VAR 0 1
25729: PPUSH
25730: LD_INT 22
25732: PUSH
25733: LD_OWVAR 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 69
25746: PPUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: CALL_OW 74
25756: PPUSH
25757: CALL_OW 115
// until IsDead ( un ) ;
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 301
25770: IFFALSE 25718
// end ;
25772: PPOPN 1
25774: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25775: LD_EXP 41
25779: PUSH
25780: LD_EXP 81
25784: AND
25785: IFFALSE 25797
25787: GO 25789
25789: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25790: LD_STRING earthquake(getX(game), 0, 32)
25792: PPUSH
25793: CALL_OW 559
25797: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25798: LD_EXP 41
25802: PUSH
25803: LD_EXP 82
25807: AND
25808: IFFALSE 25899
25810: GO 25812
25812: DISABLE
25813: LD_INT 0
25815: PPUSH
// begin enable ;
25816: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: LD_INT 22
25824: PUSH
25825: LD_OWVAR 2
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 21
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 33
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: ST_TO_ADDR
// if not tmp then
25864: LD_VAR 0 1
25868: NOT
25869: IFFALSE 25873
// exit ;
25871: GO 25899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25873: LD_VAR 0 1
25877: PUSH
25878: LD_INT 1
25880: PPUSH
25881: LD_VAR 0 1
25885: PPUSH
25886: CALL_OW 12
25890: ARRAY
25891: PPUSH
25892: LD_INT 1
25894: PPUSH
25895: CALL_OW 234
// end ;
25899: PPOPN 1
25901: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25902: LD_EXP 41
25906: PUSH
25907: LD_EXP 83
25911: AND
25912: IFFALSE 26053
25914: GO 25916
25916: DISABLE
25917: LD_INT 0
25919: PPUSH
25920: PPUSH
25921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25922: LD_ADDR_VAR 0 3
25926: PUSH
25927: LD_INT 22
25929: PUSH
25930: LD_OWVAR 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 25
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PPUSH
25953: CALL_OW 69
25957: ST_TO_ADDR
// if not tmp then
25958: LD_VAR 0 3
25962: NOT
25963: IFFALSE 25967
// exit ;
25965: GO 26053
// un := tmp [ rand ( 1 , tmp ) ] ;
25967: LD_ADDR_VAR 0 2
25971: PUSH
25972: LD_VAR 0 3
25976: PUSH
25977: LD_INT 1
25979: PPUSH
25980: LD_VAR 0 3
25984: PPUSH
25985: CALL_OW 12
25989: ARRAY
25990: ST_TO_ADDR
// if Crawls ( un ) then
25991: LD_VAR 0 2
25995: PPUSH
25996: CALL_OW 318
26000: IFFALSE 26011
// ComWalk ( un ) ;
26002: LD_VAR 0 2
26006: PPUSH
26007: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26011: LD_VAR 0 2
26015: PPUSH
26016: LD_INT 9
26018: PPUSH
26019: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26023: LD_INT 28
26025: PPUSH
26026: LD_OWVAR 2
26030: PPUSH
26031: LD_INT 2
26033: PPUSH
26034: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26038: LD_INT 29
26040: PPUSH
26041: LD_OWVAR 2
26045: PPUSH
26046: LD_INT 2
26048: PPUSH
26049: CALL_OW 322
// end ;
26053: PPOPN 3
26055: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26056: LD_EXP 41
26060: PUSH
26061: LD_EXP 84
26065: AND
26066: IFFALSE 26177
26068: GO 26070
26070: DISABLE
26071: LD_INT 0
26073: PPUSH
26074: PPUSH
26075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26076: LD_ADDR_VAR 0 3
26080: PUSH
26081: LD_INT 22
26083: PUSH
26084: LD_OWVAR 2
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 25
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PPUSH
26107: CALL_OW 69
26111: ST_TO_ADDR
// if not tmp then
26112: LD_VAR 0 3
26116: NOT
26117: IFFALSE 26121
// exit ;
26119: GO 26177
// un := tmp [ rand ( 1 , tmp ) ] ;
26121: LD_ADDR_VAR 0 2
26125: PUSH
26126: LD_VAR 0 3
26130: PUSH
26131: LD_INT 1
26133: PPUSH
26134: LD_VAR 0 3
26138: PPUSH
26139: CALL_OW 12
26143: ARRAY
26144: ST_TO_ADDR
// if Crawls ( un ) then
26145: LD_VAR 0 2
26149: PPUSH
26150: CALL_OW 318
26154: IFFALSE 26165
// ComWalk ( un ) ;
26156: LD_VAR 0 2
26160: PPUSH
26161: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26165: LD_VAR 0 2
26169: PPUSH
26170: LD_INT 8
26172: PPUSH
26173: CALL_OW 336
// end ;
26177: PPOPN 3
26179: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26180: LD_EXP 41
26184: PUSH
26185: LD_EXP 85
26189: AND
26190: IFFALSE 26334
26192: GO 26194
26194: DISABLE
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26199: LD_ADDR_VAR 0 2
26203: PUSH
26204: LD_INT 22
26206: PUSH
26207: LD_OWVAR 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 21
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 34
26231: PUSH
26232: LD_INT 12
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 34
26241: PUSH
26242: LD_INT 51
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 34
26251: PUSH
26252: LD_INT 32
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: PPUSH
26270: CALL_OW 69
26274: ST_TO_ADDR
// if not tmp then
26275: LD_VAR 0 2
26279: NOT
26280: IFFALSE 26284
// exit ;
26282: GO 26334
// for i in tmp do
26284: LD_ADDR_VAR 0 1
26288: PUSH
26289: LD_VAR 0 2
26293: PUSH
26294: FOR_IN
26295: IFFALSE 26332
// if GetCargo ( i , mat_artifact ) = 0 then
26297: LD_VAR 0 1
26301: PPUSH
26302: LD_INT 4
26304: PPUSH
26305: CALL_OW 289
26309: PUSH
26310: LD_INT 0
26312: EQUAL
26313: IFFALSE 26330
// SetCargo ( i , mat_siberit , 100 ) ;
26315: LD_VAR 0 1
26319: PPUSH
26320: LD_INT 3
26322: PPUSH
26323: LD_INT 100
26325: PPUSH
26326: CALL_OW 290
26330: GO 26294
26332: POP
26333: POP
// end ;
26334: PPOPN 2
26336: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26337: LD_EXP 41
26341: PUSH
26342: LD_EXP 86
26346: AND
26347: IFFALSE 26530
26349: GO 26351
26351: DISABLE
26352: LD_INT 0
26354: PPUSH
26355: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26356: LD_ADDR_VAR 0 2
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_OWVAR 2
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PPUSH
26373: CALL_OW 69
26377: ST_TO_ADDR
// if not tmp then
26378: LD_VAR 0 2
26382: NOT
26383: IFFALSE 26387
// exit ;
26385: GO 26530
// for i := 1 to 2 do
26387: LD_ADDR_VAR 0 1
26391: PUSH
26392: DOUBLE
26393: LD_INT 1
26395: DEC
26396: ST_TO_ADDR
26397: LD_INT 2
26399: PUSH
26400: FOR_TO
26401: IFFALSE 26528
// begin uc_side := your_side ;
26403: LD_ADDR_OWVAR 20
26407: PUSH
26408: LD_OWVAR 2
26412: ST_TO_ADDR
// uc_nation := nation_american ;
26413: LD_ADDR_OWVAR 21
26417: PUSH
26418: LD_INT 1
26420: ST_TO_ADDR
// vc_chassis := us_morphling ;
26421: LD_ADDR_OWVAR 37
26425: PUSH
26426: LD_INT 5
26428: ST_TO_ADDR
// vc_engine := engine_siberite ;
26429: LD_ADDR_OWVAR 39
26433: PUSH
26434: LD_INT 3
26436: ST_TO_ADDR
// vc_control := control_computer ;
26437: LD_ADDR_OWVAR 38
26441: PUSH
26442: LD_INT 3
26444: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26445: LD_ADDR_OWVAR 40
26449: PUSH
26450: LD_INT 10
26452: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26453: LD_VAR 0 2
26457: PUSH
26458: LD_INT 1
26460: ARRAY
26461: PPUSH
26462: CALL_OW 310
26466: NOT
26467: IFFALSE 26514
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26469: CALL_OW 45
26473: PPUSH
26474: LD_VAR 0 2
26478: PUSH
26479: LD_INT 1
26481: ARRAY
26482: PPUSH
26483: CALL_OW 250
26487: PPUSH
26488: LD_VAR 0 2
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: PPUSH
26497: CALL_OW 251
26501: PPUSH
26502: LD_INT 12
26504: PPUSH
26505: LD_INT 1
26507: PPUSH
26508: CALL_OW 50
26512: GO 26526
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26514: CALL_OW 45
26518: PPUSH
26519: LD_INT 1
26521: PPUSH
26522: CALL_OW 51
// end ;
26526: GO 26400
26528: POP
26529: POP
// end ;
26530: PPOPN 2
26532: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26533: LD_EXP 41
26537: PUSH
26538: LD_EXP 87
26542: AND
26543: IFFALSE 26765
26545: GO 26547
26547: DISABLE
26548: LD_INT 0
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26556: LD_ADDR_VAR 0 6
26560: PUSH
26561: LD_INT 22
26563: PUSH
26564: LD_OWVAR 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 21
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 3
26585: PUSH
26586: LD_INT 23
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: PPUSH
26605: CALL_OW 69
26609: ST_TO_ADDR
// if not tmp then
26610: LD_VAR 0 6
26614: NOT
26615: IFFALSE 26619
// exit ;
26617: GO 26765
// s1 := rand ( 1 , 4 ) ;
26619: LD_ADDR_VAR 0 2
26623: PUSH
26624: LD_INT 1
26626: PPUSH
26627: LD_INT 4
26629: PPUSH
26630: CALL_OW 12
26634: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26635: LD_ADDR_VAR 0 4
26639: PUSH
26640: LD_VAR 0 6
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: LD_VAR 0 2
26653: PPUSH
26654: CALL_OW 259
26658: ST_TO_ADDR
// if s1 = 1 then
26659: LD_VAR 0 2
26663: PUSH
26664: LD_INT 1
26666: EQUAL
26667: IFFALSE 26687
// s2 := rand ( 2 , 4 ) else
26669: LD_ADDR_VAR 0 3
26673: PUSH
26674: LD_INT 2
26676: PPUSH
26677: LD_INT 4
26679: PPUSH
26680: CALL_OW 12
26684: ST_TO_ADDR
26685: GO 26695
// s2 := 1 ;
26687: LD_ADDR_VAR 0 3
26691: PUSH
26692: LD_INT 1
26694: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26695: LD_ADDR_VAR 0 5
26699: PUSH
26700: LD_VAR 0 6
26704: PUSH
26705: LD_INT 1
26707: ARRAY
26708: PPUSH
26709: LD_VAR 0 3
26713: PPUSH
26714: CALL_OW 259
26718: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26719: LD_VAR 0 6
26723: PUSH
26724: LD_INT 1
26726: ARRAY
26727: PPUSH
26728: LD_VAR 0 2
26732: PPUSH
26733: LD_VAR 0 5
26737: PPUSH
26738: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26742: LD_VAR 0 6
26746: PUSH
26747: LD_INT 1
26749: ARRAY
26750: PPUSH
26751: LD_VAR 0 3
26755: PPUSH
26756: LD_VAR 0 4
26760: PPUSH
26761: CALL_OW 237
// end ;
26765: PPOPN 6
26767: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26768: LD_EXP 41
26772: PUSH
26773: LD_EXP 88
26777: AND
26778: IFFALSE 26857
26780: GO 26782
26782: DISABLE
26783: LD_INT 0
26785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26786: LD_ADDR_VAR 0 1
26790: PUSH
26791: LD_INT 22
26793: PUSH
26794: LD_OWVAR 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 30
26805: PUSH
26806: LD_INT 3
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: ST_TO_ADDR
// if not tmp then
26822: LD_VAR 0 1
26826: NOT
26827: IFFALSE 26831
// exit ;
26829: GO 26857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26831: LD_VAR 0 1
26835: PUSH
26836: LD_INT 1
26838: PPUSH
26839: LD_VAR 0 1
26843: PPUSH
26844: CALL_OW 12
26848: ARRAY
26849: PPUSH
26850: LD_INT 1
26852: PPUSH
26853: CALL_OW 234
// end ;
26857: PPOPN 1
26859: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26860: LD_EXP 41
26864: PUSH
26865: LD_EXP 89
26869: AND
26870: IFFALSE 26982
26872: GO 26874
26874: DISABLE
26875: LD_INT 0
26877: PPUSH
26878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_INT 22
26886: PUSH
26887: LD_OWVAR 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 30
26901: PUSH
26902: LD_INT 27
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 30
26911: PUSH
26912: LD_INT 26
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 30
26921: PUSH
26922: LD_INT 28
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PPUSH
26939: CALL_OW 69
26943: ST_TO_ADDR
// if not tmp then
26944: LD_VAR 0 2
26948: NOT
26949: IFFALSE 26953
// exit ;
26951: GO 26982
// for i in tmp do
26953: LD_ADDR_VAR 0 1
26957: PUSH
26958: LD_VAR 0 2
26962: PUSH
26963: FOR_IN
26964: IFFALSE 26980
// SetLives ( i , 1 ) ;
26966: LD_VAR 0 1
26970: PPUSH
26971: LD_INT 1
26973: PPUSH
26974: CALL_OW 234
26978: GO 26963
26980: POP
26981: POP
// end ;
26982: PPOPN 2
26984: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26985: LD_EXP 41
26989: PUSH
26990: LD_EXP 90
26994: AND
26995: IFFALSE 27282
26997: GO 26999
26999: DISABLE
27000: LD_INT 0
27002: PPUSH
27003: PPUSH
27004: PPUSH
// begin i := rand ( 1 , 7 ) ;
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_INT 1
27012: PPUSH
27013: LD_INT 7
27015: PPUSH
27016: CALL_OW 12
27020: ST_TO_ADDR
// case i of 1 :
27021: LD_VAR 0 1
27025: PUSH
27026: LD_INT 1
27028: DOUBLE
27029: EQUAL
27030: IFTRUE 27034
27032: GO 27044
27034: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27035: LD_STRING earthquake(getX(game), 0, 32)
27037: PPUSH
27038: CALL_OW 559
27042: GO 27282
27044: LD_INT 2
27046: DOUBLE
27047: EQUAL
27048: IFTRUE 27052
27050: GO 27066
27052: POP
// begin ToLua ( displayStucuk(); ) ;
27053: LD_STRING displayStucuk();
27055: PPUSH
27056: CALL_OW 559
// ResetFog ;
27060: CALL_OW 335
// end ; 3 :
27064: GO 27282
27066: LD_INT 3
27068: DOUBLE
27069: EQUAL
27070: IFTRUE 27074
27072: GO 27178
27074: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27075: LD_ADDR_VAR 0 2
27079: PUSH
27080: LD_INT 22
27082: PUSH
27083: LD_OWVAR 2
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 25
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PPUSH
27106: CALL_OW 69
27110: ST_TO_ADDR
// if not tmp then
27111: LD_VAR 0 2
27115: NOT
27116: IFFALSE 27120
// exit ;
27118: GO 27282
// un := tmp [ rand ( 1 , tmp ) ] ;
27120: LD_ADDR_VAR 0 3
27124: PUSH
27125: LD_VAR 0 2
27129: PUSH
27130: LD_INT 1
27132: PPUSH
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 12
27142: ARRAY
27143: ST_TO_ADDR
// if Crawls ( un ) then
27144: LD_VAR 0 3
27148: PPUSH
27149: CALL_OW 318
27153: IFFALSE 27164
// ComWalk ( un ) ;
27155: LD_VAR 0 3
27159: PPUSH
27160: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27164: LD_VAR 0 3
27168: PPUSH
27169: LD_INT 8
27171: PPUSH
27172: CALL_OW 336
// end ; 4 :
27176: GO 27282
27178: LD_INT 4
27180: DOUBLE
27181: EQUAL
27182: IFTRUE 27186
27184: GO 27260
27186: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27187: LD_ADDR_VAR 0 2
27191: PUSH
27192: LD_INT 22
27194: PUSH
27195: LD_OWVAR 2
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 30
27206: PUSH
27207: LD_INT 29
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PPUSH
27218: CALL_OW 69
27222: ST_TO_ADDR
// if not tmp then
27223: LD_VAR 0 2
27227: NOT
27228: IFFALSE 27232
// exit ;
27230: GO 27282
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27232: LD_VAR 0 2
27236: PUSH
27237: LD_INT 1
27239: ARRAY
27240: PPUSH
27241: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27245: LD_VAR 0 2
27249: PUSH
27250: LD_INT 1
27252: ARRAY
27253: PPUSH
27254: CALL_OW 65
// end ; 5 .. 7 :
27258: GO 27282
27260: LD_INT 5
27262: DOUBLE
27263: GREATEREQUAL
27264: IFFALSE 27272
27266: LD_INT 7
27268: DOUBLE
27269: LESSEQUAL
27270: IFTRUE 27274
27272: GO 27281
27274: POP
// StreamSibBomb ; end ;
27275: CALL 23519 0 0
27279: GO 27282
27281: POP
// end ;
27282: PPOPN 3
27284: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27285: LD_EXP 41
27289: PUSH
27290: LD_EXP 91
27294: AND
27295: IFFALSE 27451
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
27304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: LD_INT 81
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: LD_INT 21
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 21
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PPUSH
27354: CALL_OW 69
27358: ST_TO_ADDR
// if not tmp then
27359: LD_VAR 0 2
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27451
// p := 0 ;
27368: LD_ADDR_VAR 0 3
27372: PUSH
27373: LD_INT 0
27375: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27376: LD_INT 35
27378: PPUSH
27379: CALL_OW 67
// p := p + 1 ;
27383: LD_ADDR_VAR 0 3
27387: PUSH
27388: LD_VAR 0 3
27392: PUSH
27393: LD_INT 1
27395: PLUS
27396: ST_TO_ADDR
// for i in tmp do
27397: LD_ADDR_VAR 0 1
27401: PUSH
27402: LD_VAR 0 2
27406: PUSH
27407: FOR_IN
27408: IFFALSE 27439
// if GetLives ( i ) < 1000 then
27410: LD_VAR 0 1
27414: PPUSH
27415: CALL_OW 256
27419: PUSH
27420: LD_INT 1000
27422: LESS
27423: IFFALSE 27437
// SetLives ( i , 1000 ) ;
27425: LD_VAR 0 1
27429: PPUSH
27430: LD_INT 1000
27432: PPUSH
27433: CALL_OW 234
27437: GO 27407
27439: POP
27440: POP
// until p > 20 ;
27441: LD_VAR 0 3
27445: PUSH
27446: LD_INT 20
27448: GREATER
27449: IFFALSE 27376
// end ;
27451: PPOPN 3
27453: END
// every 0 0$1 trigger StreamModeActive and sTime do
27454: LD_EXP 41
27458: PUSH
27459: LD_EXP 92
27463: AND
27464: IFFALSE 27499
27466: GO 27468
27468: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27469: LD_INT 28
27471: PPUSH
27472: LD_OWVAR 2
27476: PPUSH
27477: LD_INT 2
27479: PPUSH
27480: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27484: LD_INT 30
27486: PPUSH
27487: LD_OWVAR 2
27491: PPUSH
27492: LD_INT 2
27494: PPUSH
27495: CALL_OW 322
// end ;
27499: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27500: LD_EXP 41
27504: PUSH
27505: LD_EXP 93
27509: AND
27510: IFFALSE 27631
27512: GO 27514
27514: DISABLE
27515: LD_INT 0
27517: PPUSH
27518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27519: LD_ADDR_VAR 0 2
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_OWVAR 2
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 21
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 3
27548: PUSH
27549: LD_INT 23
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: PPUSH
27568: CALL_OW 69
27572: ST_TO_ADDR
// if not tmp then
27573: LD_VAR 0 2
27577: NOT
27578: IFFALSE 27582
// exit ;
27580: GO 27631
// for i in tmp do
27582: LD_ADDR_VAR 0 1
27586: PUSH
27587: LD_VAR 0 2
27591: PUSH
27592: FOR_IN
27593: IFFALSE 27629
// begin if Crawls ( i ) then
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 318
27604: IFFALSE 27615
// ComWalk ( i ) ;
27606: LD_VAR 0 1
27610: PPUSH
27611: CALL_OW 138
// SetClass ( i , 2 ) ;
27615: LD_VAR 0 1
27619: PPUSH
27620: LD_INT 2
27622: PPUSH
27623: CALL_OW 336
// end ;
27627: GO 27592
27629: POP
27630: POP
// end ;
27631: PPOPN 2
27633: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27634: LD_EXP 41
27638: PUSH
27639: LD_EXP 94
27643: AND
27644: IFFALSE 27932
27646: GO 27648
27648: DISABLE
27649: LD_INT 0
27651: PPUSH
27652: PPUSH
27653: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27654: LD_OWVAR 2
27658: PPUSH
27659: LD_INT 9
27661: PPUSH
27662: LD_INT 1
27664: PPUSH
27665: LD_INT 1
27667: PPUSH
27668: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27672: LD_INT 9
27674: PPUSH
27675: LD_OWVAR 2
27679: PPUSH
27680: CALL_OW 343
// uc_side := 9 ;
27684: LD_ADDR_OWVAR 20
27688: PUSH
27689: LD_INT 9
27691: ST_TO_ADDR
// uc_nation := 2 ;
27692: LD_ADDR_OWVAR 21
27696: PUSH
27697: LD_INT 2
27699: ST_TO_ADDR
// hc_name := Dark Warrior ;
27700: LD_ADDR_OWVAR 26
27704: PUSH
27705: LD_STRING Dark Warrior
27707: ST_TO_ADDR
// hc_gallery :=  ;
27708: LD_ADDR_OWVAR 33
27712: PUSH
27713: LD_STRING 
27715: ST_TO_ADDR
// hc_noskilllimit := true ;
27716: LD_ADDR_OWVAR 76
27720: PUSH
27721: LD_INT 1
27723: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27724: LD_ADDR_OWVAR 31
27728: PUSH
27729: LD_INT 30
27731: PUSH
27732: LD_INT 30
27734: PUSH
27735: LD_INT 30
27737: PUSH
27738: LD_INT 30
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// un := CreateHuman ;
27747: LD_ADDR_VAR 0 3
27751: PUSH
27752: CALL_OW 44
27756: ST_TO_ADDR
// hc_noskilllimit := false ;
27757: LD_ADDR_OWVAR 76
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27765: LD_VAR 0 3
27769: PPUSH
27770: LD_INT 1
27772: PPUSH
27773: CALL_OW 51
// ToLua ( playRanger() ) ;
27777: LD_STRING playRanger()
27779: PPUSH
27780: CALL_OW 559
// p := 0 ;
27784: LD_ADDR_VAR 0 2
27788: PUSH
27789: LD_INT 0
27791: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27792: LD_INT 35
27794: PPUSH
27795: CALL_OW 67
// p := p + 1 ;
27799: LD_ADDR_VAR 0 2
27803: PUSH
27804: LD_VAR 0 2
27808: PUSH
27809: LD_INT 1
27811: PLUS
27812: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27813: LD_VAR 0 3
27817: PPUSH
27818: CALL_OW 256
27822: PUSH
27823: LD_INT 1000
27825: LESS
27826: IFFALSE 27840
// SetLives ( un , 1000 ) ;
27828: LD_VAR 0 3
27832: PPUSH
27833: LD_INT 1000
27835: PPUSH
27836: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27840: LD_VAR 0 3
27844: PPUSH
27845: LD_INT 81
27847: PUSH
27848: LD_OWVAR 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 91
27859: PUSH
27860: LD_VAR 0 3
27864: PUSH
27865: LD_INT 30
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PPUSH
27877: CALL_OW 69
27881: PPUSH
27882: LD_VAR 0 3
27886: PPUSH
27887: CALL_OW 74
27891: PPUSH
27892: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27896: LD_VAR 0 2
27900: PUSH
27901: LD_INT 80
27903: GREATER
27904: PUSH
27905: LD_VAR 0 3
27909: PPUSH
27910: CALL_OW 301
27914: OR
27915: IFFALSE 27792
// if un then
27917: LD_VAR 0 3
27921: IFFALSE 27932
// RemoveUnit ( un ) ;
27923: LD_VAR 0 3
27927: PPUSH
27928: CALL_OW 64
// end ;
27932: PPOPN 3
27934: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27935: LD_EXP 95
27939: IFFALSE 28055
27941: GO 27943
27943: DISABLE
27944: LD_INT 0
27946: PPUSH
27947: PPUSH
27948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27949: LD_ADDR_VAR 0 2
27953: PUSH
27954: LD_INT 81
27956: PUSH
27957: LD_OWVAR 2
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 21
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PPUSH
27980: CALL_OW 69
27984: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27985: LD_STRING playComputer()
27987: PPUSH
27988: CALL_OW 559
// if not tmp then
27992: LD_VAR 0 2
27996: NOT
27997: IFFALSE 28001
// exit ;
27999: GO 28055
// for i in tmp do
28001: LD_ADDR_VAR 0 1
28005: PUSH
28006: LD_VAR 0 2
28010: PUSH
28011: FOR_IN
28012: IFFALSE 28053
// for j := 1 to 4 do
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: DOUBLE
28020: LD_INT 1
28022: DEC
28023: ST_TO_ADDR
28024: LD_INT 4
28026: PUSH
28027: FOR_TO
28028: IFFALSE 28049
// SetSkill ( i , j , 10 ) ;
28030: LD_VAR 0 1
28034: PPUSH
28035: LD_VAR 0 3
28039: PPUSH
28040: LD_INT 10
28042: PPUSH
28043: CALL_OW 237
28047: GO 28027
28049: POP
28050: POP
28051: GO 28011
28053: POP
28054: POP
// end ;
28055: PPOPN 3
28057: END
// every 0 0$1 trigger s30 do var i , tmp ;
28058: LD_EXP 96
28062: IFFALSE 28131
28064: GO 28066
28066: DISABLE
28067: LD_INT 0
28069: PPUSH
28070: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28071: LD_ADDR_VAR 0 2
28075: PUSH
28076: LD_INT 22
28078: PUSH
28079: LD_OWVAR 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PPUSH
28088: CALL_OW 69
28092: ST_TO_ADDR
// if not tmp then
28093: LD_VAR 0 2
28097: NOT
28098: IFFALSE 28102
// exit ;
28100: GO 28131
// for i in tmp do
28102: LD_ADDR_VAR 0 1
28106: PUSH
28107: LD_VAR 0 2
28111: PUSH
28112: FOR_IN
28113: IFFALSE 28129
// SetLives ( i , 300 ) ;
28115: LD_VAR 0 1
28119: PPUSH
28120: LD_INT 300
28122: PPUSH
28123: CALL_OW 234
28127: GO 28112
28129: POP
28130: POP
// end ;
28131: PPOPN 2
28133: END
// every 0 0$1 trigger s60 do var i , tmp ;
28134: LD_EXP 97
28138: IFFALSE 28207
28140: GO 28142
28142: DISABLE
28143: LD_INT 0
28145: PPUSH
28146: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28147: LD_ADDR_VAR 0 2
28151: PUSH
28152: LD_INT 22
28154: PUSH
28155: LD_OWVAR 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 69
28168: ST_TO_ADDR
// if not tmp then
28169: LD_VAR 0 2
28173: NOT
28174: IFFALSE 28178
// exit ;
28176: GO 28207
// for i in tmp do
28178: LD_ADDR_VAR 0 1
28182: PUSH
28183: LD_VAR 0 2
28187: PUSH
28188: FOR_IN
28189: IFFALSE 28205
// SetLives ( i , 600 ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_INT 600
28198: PPUSH
28199: CALL_OW 234
28203: GO 28188
28205: POP
28206: POP
// end ;
28207: PPOPN 2
28209: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28210: LD_INT 0
28212: PPUSH
// case cmd of 301 :
28213: LD_VAR 0 1
28217: PUSH
28218: LD_INT 301
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28258
28226: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28227: LD_VAR 0 6
28231: PPUSH
28232: LD_VAR 0 7
28236: PPUSH
28237: LD_VAR 0 8
28241: PPUSH
28242: LD_VAR 0 4
28246: PPUSH
28247: LD_VAR 0 5
28251: PPUSH
28252: CALL 29467 0 5
28256: GO 28379
28258: LD_INT 302
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28266
28264: GO 28303
28266: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28267: LD_VAR 0 6
28271: PPUSH
28272: LD_VAR 0 7
28276: PPUSH
28277: LD_VAR 0 8
28281: PPUSH
28282: LD_VAR 0 9
28286: PPUSH
28287: LD_VAR 0 4
28291: PPUSH
28292: LD_VAR 0 5
28296: PPUSH
28297: CALL 29558 0 6
28301: GO 28379
28303: LD_INT 303
28305: DOUBLE
28306: EQUAL
28307: IFTRUE 28311
28309: GO 28348
28311: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28312: LD_VAR 0 6
28316: PPUSH
28317: LD_VAR 0 7
28321: PPUSH
28322: LD_VAR 0 8
28326: PPUSH
28327: LD_VAR 0 9
28331: PPUSH
28332: LD_VAR 0 4
28336: PPUSH
28337: LD_VAR 0 5
28341: PPUSH
28342: CALL 28384 0 6
28346: GO 28379
28348: LD_INT 304
28350: DOUBLE
28351: EQUAL
28352: IFTRUE 28356
28354: GO 28378
28356: POP
// hHackTeleport ( unit , x , y ) ; end ;
28357: LD_VAR 0 2
28361: PPUSH
28362: LD_VAR 0 4
28366: PPUSH
28367: LD_VAR 0 5
28371: PPUSH
28372: CALL 30151 0 3
28376: GO 28379
28378: POP
// end ;
28379: LD_VAR 0 12
28383: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28384: LD_INT 0
28386: PPUSH
28387: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28388: LD_VAR 0 1
28392: PUSH
28393: LD_INT 1
28395: LESS
28396: PUSH
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 3
28404: GREATER
28405: OR
28406: PUSH
28407: LD_VAR 0 5
28411: PPUSH
28412: LD_VAR 0 6
28416: PPUSH
28417: CALL_OW 428
28421: OR
28422: IFFALSE 28426
// exit ;
28424: GO 29154
// uc_side := your_side ;
28426: LD_ADDR_OWVAR 20
28430: PUSH
28431: LD_OWVAR 2
28435: ST_TO_ADDR
// uc_nation := nation ;
28436: LD_ADDR_OWVAR 21
28440: PUSH
28441: LD_VAR 0 1
28445: ST_TO_ADDR
// bc_level = 1 ;
28446: LD_ADDR_OWVAR 43
28450: PUSH
28451: LD_INT 1
28453: ST_TO_ADDR
// case btype of 1 :
28454: LD_VAR 0 2
28458: PUSH
28459: LD_INT 1
28461: DOUBLE
28462: EQUAL
28463: IFTRUE 28467
28465: GO 28478
28467: POP
// bc_type := b_depot ; 2 :
28468: LD_ADDR_OWVAR 42
28472: PUSH
28473: LD_INT 0
28475: ST_TO_ADDR
28476: GO 29098
28478: LD_INT 2
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28497
28486: POP
// bc_type := b_warehouse ; 3 :
28487: LD_ADDR_OWVAR 42
28491: PUSH
28492: LD_INT 1
28494: ST_TO_ADDR
28495: GO 29098
28497: LD_INT 3
28499: DOUBLE
28500: EQUAL
28501: IFTRUE 28505
28503: GO 28516
28505: POP
// bc_type := b_lab ; 4 .. 9 :
28506: LD_ADDR_OWVAR 42
28510: PUSH
28511: LD_INT 6
28513: ST_TO_ADDR
28514: GO 29098
28516: LD_INT 4
28518: DOUBLE
28519: GREATEREQUAL
28520: IFFALSE 28528
28522: LD_INT 9
28524: DOUBLE
28525: LESSEQUAL
28526: IFTRUE 28530
28528: GO 28590
28530: POP
// begin bc_type := b_lab_half ;
28531: LD_ADDR_OWVAR 42
28535: PUSH
28536: LD_INT 7
28538: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28539: LD_ADDR_OWVAR 44
28543: PUSH
28544: LD_INT 10
28546: PUSH
28547: LD_INT 11
28549: PUSH
28550: LD_INT 12
28552: PUSH
28553: LD_INT 15
28555: PUSH
28556: LD_INT 14
28558: PUSH
28559: LD_INT 13
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: PUSH
28570: LD_VAR 0 2
28574: PUSH
28575: LD_INT 3
28577: MINUS
28578: ARRAY
28579: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28580: LD_ADDR_OWVAR 45
28584: PUSH
28585: LD_INT 9
28587: ST_TO_ADDR
// end ; 10 .. 13 :
28588: GO 29098
28590: LD_INT 10
28592: DOUBLE
28593: GREATEREQUAL
28594: IFFALSE 28602
28596: LD_INT 13
28598: DOUBLE
28599: LESSEQUAL
28600: IFTRUE 28604
28602: GO 28681
28604: POP
// begin bc_type := b_lab_full ;
28605: LD_ADDR_OWVAR 42
28609: PUSH
28610: LD_INT 8
28612: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28613: LD_ADDR_OWVAR 44
28617: PUSH
28618: LD_INT 10
28620: PUSH
28621: LD_INT 12
28623: PUSH
28624: LD_INT 14
28626: PUSH
28627: LD_INT 13
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: PUSH
28636: LD_VAR 0 2
28640: PUSH
28641: LD_INT 9
28643: MINUS
28644: ARRAY
28645: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28646: LD_ADDR_OWVAR 45
28650: PUSH
28651: LD_INT 11
28653: PUSH
28654: LD_INT 15
28656: PUSH
28657: LD_INT 12
28659: PUSH
28660: LD_INT 15
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: PUSH
28669: LD_VAR 0 2
28673: PUSH
28674: LD_INT 9
28676: MINUS
28677: ARRAY
28678: ST_TO_ADDR
// end ; 14 :
28679: GO 29098
28681: LD_INT 14
28683: DOUBLE
28684: EQUAL
28685: IFTRUE 28689
28687: GO 28700
28689: POP
// bc_type := b_workshop ; 15 :
28690: LD_ADDR_OWVAR 42
28694: PUSH
28695: LD_INT 2
28697: ST_TO_ADDR
28698: GO 29098
28700: LD_INT 15
28702: DOUBLE
28703: EQUAL
28704: IFTRUE 28708
28706: GO 28719
28708: POP
// bc_type := b_factory ; 16 :
28709: LD_ADDR_OWVAR 42
28713: PUSH
28714: LD_INT 3
28716: ST_TO_ADDR
28717: GO 29098
28719: LD_INT 16
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28738
28727: POP
// bc_type := b_ext_gun ; 17 :
28728: LD_ADDR_OWVAR 42
28732: PUSH
28733: LD_INT 17
28735: ST_TO_ADDR
28736: GO 29098
28738: LD_INT 17
28740: DOUBLE
28741: EQUAL
28742: IFTRUE 28746
28744: GO 28774
28746: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28747: LD_ADDR_OWVAR 42
28751: PUSH
28752: LD_INT 19
28754: PUSH
28755: LD_INT 23
28757: PUSH
28758: LD_INT 19
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: PUSH
28766: LD_VAR 0 1
28770: ARRAY
28771: ST_TO_ADDR
28772: GO 29098
28774: LD_INT 18
28776: DOUBLE
28777: EQUAL
28778: IFTRUE 28782
28780: GO 28793
28782: POP
// bc_type := b_ext_radar ; 19 :
28783: LD_ADDR_OWVAR 42
28787: PUSH
28788: LD_INT 20
28790: ST_TO_ADDR
28791: GO 29098
28793: LD_INT 19
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28812
28801: POP
// bc_type := b_ext_radio ; 20 :
28802: LD_ADDR_OWVAR 42
28806: PUSH
28807: LD_INT 22
28809: ST_TO_ADDR
28810: GO 29098
28812: LD_INT 20
28814: DOUBLE
28815: EQUAL
28816: IFTRUE 28820
28818: GO 28831
28820: POP
// bc_type := b_ext_siberium ; 21 :
28821: LD_ADDR_OWVAR 42
28825: PUSH
28826: LD_INT 21
28828: ST_TO_ADDR
28829: GO 29098
28831: LD_INT 21
28833: DOUBLE
28834: EQUAL
28835: IFTRUE 28839
28837: GO 28850
28839: POP
// bc_type := b_ext_computer ; 22 :
28840: LD_ADDR_OWVAR 42
28844: PUSH
28845: LD_INT 24
28847: ST_TO_ADDR
28848: GO 29098
28850: LD_INT 22
28852: DOUBLE
28853: EQUAL
28854: IFTRUE 28858
28856: GO 28869
28858: POP
// bc_type := b_ext_track ; 23 :
28859: LD_ADDR_OWVAR 42
28863: PUSH
28864: LD_INT 16
28866: ST_TO_ADDR
28867: GO 29098
28869: LD_INT 23
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 28888
28877: POP
// bc_type := b_ext_laser ; 24 :
28878: LD_ADDR_OWVAR 42
28882: PUSH
28883: LD_INT 25
28885: ST_TO_ADDR
28886: GO 29098
28888: LD_INT 24
28890: DOUBLE
28891: EQUAL
28892: IFTRUE 28896
28894: GO 28907
28896: POP
// bc_type := b_control_tower ; 25 :
28897: LD_ADDR_OWVAR 42
28901: PUSH
28902: LD_INT 36
28904: ST_TO_ADDR
28905: GO 29098
28907: LD_INT 25
28909: DOUBLE
28910: EQUAL
28911: IFTRUE 28915
28913: GO 28926
28915: POP
// bc_type := b_breastwork ; 26 :
28916: LD_ADDR_OWVAR 42
28920: PUSH
28921: LD_INT 31
28923: ST_TO_ADDR
28924: GO 29098
28926: LD_INT 26
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28945
28934: POP
// bc_type := b_bunker ; 27 :
28935: LD_ADDR_OWVAR 42
28939: PUSH
28940: LD_INT 32
28942: ST_TO_ADDR
28943: GO 29098
28945: LD_INT 27
28947: DOUBLE
28948: EQUAL
28949: IFTRUE 28953
28951: GO 28964
28953: POP
// bc_type := b_turret ; 28 :
28954: LD_ADDR_OWVAR 42
28958: PUSH
28959: LD_INT 33
28961: ST_TO_ADDR
28962: GO 29098
28964: LD_INT 28
28966: DOUBLE
28967: EQUAL
28968: IFTRUE 28972
28970: GO 28983
28972: POP
// bc_type := b_armoury ; 29 :
28973: LD_ADDR_OWVAR 42
28977: PUSH
28978: LD_INT 4
28980: ST_TO_ADDR
28981: GO 29098
28983: LD_INT 29
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 28991
28989: GO 29002
28991: POP
// bc_type := b_barracks ; 30 :
28992: LD_ADDR_OWVAR 42
28996: PUSH
28997: LD_INT 5
28999: ST_TO_ADDR
29000: GO 29098
29002: LD_INT 30
29004: DOUBLE
29005: EQUAL
29006: IFTRUE 29010
29008: GO 29021
29010: POP
// bc_type := b_solar_power ; 31 :
29011: LD_ADDR_OWVAR 42
29015: PUSH
29016: LD_INT 27
29018: ST_TO_ADDR
29019: GO 29098
29021: LD_INT 31
29023: DOUBLE
29024: EQUAL
29025: IFTRUE 29029
29027: GO 29040
29029: POP
// bc_type := b_oil_power ; 32 :
29030: LD_ADDR_OWVAR 42
29034: PUSH
29035: LD_INT 26
29037: ST_TO_ADDR
29038: GO 29098
29040: LD_INT 32
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29048
29046: GO 29059
29048: POP
// bc_type := b_siberite_power ; 33 :
29049: LD_ADDR_OWVAR 42
29053: PUSH
29054: LD_INT 28
29056: ST_TO_ADDR
29057: GO 29098
29059: LD_INT 33
29061: DOUBLE
29062: EQUAL
29063: IFTRUE 29067
29065: GO 29078
29067: POP
// bc_type := b_oil_mine ; 34 :
29068: LD_ADDR_OWVAR 42
29072: PUSH
29073: LD_INT 29
29075: ST_TO_ADDR
29076: GO 29098
29078: LD_INT 34
29080: DOUBLE
29081: EQUAL
29082: IFTRUE 29086
29084: GO 29097
29086: POP
// bc_type := b_siberite_mine ; end ;
29087: LD_ADDR_OWVAR 42
29091: PUSH
29092: LD_INT 30
29094: ST_TO_ADDR
29095: GO 29098
29097: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29098: LD_ADDR_VAR 0 8
29102: PUSH
29103: LD_VAR 0 5
29107: PPUSH
29108: LD_VAR 0 6
29112: PPUSH
29113: LD_VAR 0 3
29117: PPUSH
29118: CALL_OW 47
29122: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29123: LD_OWVAR 42
29127: PUSH
29128: LD_INT 32
29130: PUSH
29131: LD_INT 33
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: IN
29138: IFFALSE 29154
// PlaceWeaponTurret ( b , weapon ) ;
29140: LD_VAR 0 8
29144: PPUSH
29145: LD_VAR 0 4
29149: PPUSH
29150: CALL_OW 431
// end ;
29154: LD_VAR 0 7
29158: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29159: LD_INT 0
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29165: LD_ADDR_VAR 0 4
29169: PUSH
29170: LD_INT 22
29172: PUSH
29173: LD_OWVAR 2
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 30
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 30
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 69
29218: ST_TO_ADDR
// if not tmp then
29219: LD_VAR 0 4
29223: NOT
29224: IFFALSE 29228
// exit ;
29226: GO 29287
// for i in tmp do
29228: LD_ADDR_VAR 0 2
29232: PUSH
29233: LD_VAR 0 4
29237: PUSH
29238: FOR_IN
29239: IFFALSE 29285
// for j = 1 to 3 do
29241: LD_ADDR_VAR 0 3
29245: PUSH
29246: DOUBLE
29247: LD_INT 1
29249: DEC
29250: ST_TO_ADDR
29251: LD_INT 3
29253: PUSH
29254: FOR_TO
29255: IFFALSE 29281
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29257: LD_VAR 0 2
29261: PPUSH
29262: CALL_OW 274
29266: PPUSH
29267: LD_VAR 0 3
29271: PPUSH
29272: LD_INT 99999
29274: PPUSH
29275: CALL_OW 277
29279: GO 29254
29281: POP
29282: POP
29283: GO 29238
29285: POP
29286: POP
// end ;
29287: LD_VAR 0 1
29291: RET
// export function hHackSetLevel10 ; var i , j ; begin
29292: LD_INT 0
29294: PPUSH
29295: PPUSH
29296: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29297: LD_ADDR_VAR 0 2
29301: PUSH
29302: LD_INT 21
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PPUSH
29312: CALL_OW 69
29316: PUSH
29317: FOR_IN
29318: IFFALSE 29370
// if IsSelected ( i ) then
29320: LD_VAR 0 2
29324: PPUSH
29325: CALL_OW 306
29329: IFFALSE 29368
// begin for j := 1 to 4 do
29331: LD_ADDR_VAR 0 3
29335: PUSH
29336: DOUBLE
29337: LD_INT 1
29339: DEC
29340: ST_TO_ADDR
29341: LD_INT 4
29343: PUSH
29344: FOR_TO
29345: IFFALSE 29366
// SetSkill ( i , j , 10 ) ;
29347: LD_VAR 0 2
29351: PPUSH
29352: LD_VAR 0 3
29356: PPUSH
29357: LD_INT 10
29359: PPUSH
29360: CALL_OW 237
29364: GO 29344
29366: POP
29367: POP
// end ;
29368: GO 29317
29370: POP
29371: POP
// end ;
29372: LD_VAR 0 1
29376: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29377: LD_INT 0
29379: PPUSH
29380: PPUSH
29381: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29382: LD_ADDR_VAR 0 2
29386: PUSH
29387: LD_INT 22
29389: PUSH
29390: LD_OWVAR 2
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 21
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PPUSH
29413: CALL_OW 69
29417: PUSH
29418: FOR_IN
29419: IFFALSE 29460
// begin for j := 1 to 4 do
29421: LD_ADDR_VAR 0 3
29425: PUSH
29426: DOUBLE
29427: LD_INT 1
29429: DEC
29430: ST_TO_ADDR
29431: LD_INT 4
29433: PUSH
29434: FOR_TO
29435: IFFALSE 29456
// SetSkill ( i , j , 10 ) ;
29437: LD_VAR 0 2
29441: PPUSH
29442: LD_VAR 0 3
29446: PPUSH
29447: LD_INT 10
29449: PPUSH
29450: CALL_OW 237
29454: GO 29434
29456: POP
29457: POP
// end ;
29458: GO 29418
29460: POP
29461: POP
// end ;
29462: LD_VAR 0 1
29466: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29467: LD_INT 0
29469: PPUSH
// uc_side := your_side ;
29470: LD_ADDR_OWVAR 20
29474: PUSH
29475: LD_OWVAR 2
29479: ST_TO_ADDR
// uc_nation := nation ;
29480: LD_ADDR_OWVAR 21
29484: PUSH
29485: LD_VAR 0 1
29489: ST_TO_ADDR
// InitHc ;
29490: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29494: LD_INT 0
29496: PPUSH
29497: LD_VAR 0 2
29501: PPUSH
29502: LD_VAR 0 3
29506: PPUSH
29507: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29511: LD_VAR 0 4
29515: PPUSH
29516: LD_VAR 0 5
29520: PPUSH
29521: CALL_OW 428
29525: PUSH
29526: LD_INT 0
29528: EQUAL
29529: IFFALSE 29553
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29531: CALL_OW 44
29535: PPUSH
29536: LD_VAR 0 4
29540: PPUSH
29541: LD_VAR 0 5
29545: PPUSH
29546: LD_INT 1
29548: PPUSH
29549: CALL_OW 48
// end ;
29553: LD_VAR 0 6
29557: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29558: LD_INT 0
29560: PPUSH
29561: PPUSH
// uc_side := your_side ;
29562: LD_ADDR_OWVAR 20
29566: PUSH
29567: LD_OWVAR 2
29571: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29572: LD_VAR 0 1
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 4
29588: PUSH
29589: LD_INT 5
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: IN
29599: IFFALSE 29611
// uc_nation := nation_american else
29601: LD_ADDR_OWVAR 21
29605: PUSH
29606: LD_INT 1
29608: ST_TO_ADDR
29609: GO 29654
// if chassis in [ 11 , 12 , 13 , 14 ] then
29611: LD_VAR 0 1
29615: PUSH
29616: LD_INT 11
29618: PUSH
29619: LD_INT 12
29621: PUSH
29622: LD_INT 13
29624: PUSH
29625: LD_INT 14
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: IN
29634: IFFALSE 29646
// uc_nation := nation_arabian else
29636: LD_ADDR_OWVAR 21
29640: PUSH
29641: LD_INT 2
29643: ST_TO_ADDR
29644: GO 29654
// uc_nation := nation_russian ;
29646: LD_ADDR_OWVAR 21
29650: PUSH
29651: LD_INT 3
29653: ST_TO_ADDR
// vc_chassis := chassis ;
29654: LD_ADDR_OWVAR 37
29658: PUSH
29659: LD_VAR 0 1
29663: ST_TO_ADDR
// vc_engine := engine ;
29664: LD_ADDR_OWVAR 39
29668: PUSH
29669: LD_VAR 0 2
29673: ST_TO_ADDR
// vc_control := control ;
29674: LD_ADDR_OWVAR 38
29678: PUSH
29679: LD_VAR 0 3
29683: ST_TO_ADDR
// vc_weapon := weapon ;
29684: LD_ADDR_OWVAR 40
29688: PUSH
29689: LD_VAR 0 4
29693: ST_TO_ADDR
// un := CreateVehicle ;
29694: LD_ADDR_VAR 0 8
29698: PUSH
29699: CALL_OW 45
29703: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29704: LD_VAR 0 8
29708: PPUSH
29709: LD_INT 0
29711: PPUSH
29712: LD_INT 5
29714: PPUSH
29715: CALL_OW 12
29719: PPUSH
29720: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29724: LD_VAR 0 8
29728: PPUSH
29729: LD_VAR 0 5
29733: PPUSH
29734: LD_VAR 0 6
29738: PPUSH
29739: LD_INT 1
29741: PPUSH
29742: CALL_OW 48
// end ;
29746: LD_VAR 0 7
29750: RET
// export hInvincible ; every 1 do
29751: GO 29753
29753: DISABLE
// hInvincible := [ ] ;
29754: LD_ADDR_EXP 98
29758: PUSH
29759: EMPTY
29760: ST_TO_ADDR
29761: END
// every 10 do var i ;
29762: GO 29764
29764: DISABLE
29765: LD_INT 0
29767: PPUSH
// begin enable ;
29768: ENABLE
// if not hInvincible then
29769: LD_EXP 98
29773: NOT
29774: IFFALSE 29778
// exit ;
29776: GO 29822
// for i in hInvincible do
29778: LD_ADDR_VAR 0 1
29782: PUSH
29783: LD_EXP 98
29787: PUSH
29788: FOR_IN
29789: IFFALSE 29820
// if GetLives ( i ) < 1000 then
29791: LD_VAR 0 1
29795: PPUSH
29796: CALL_OW 256
29800: PUSH
29801: LD_INT 1000
29803: LESS
29804: IFFALSE 29818
// SetLives ( i , 1000 ) ;
29806: LD_VAR 0 1
29810: PPUSH
29811: LD_INT 1000
29813: PPUSH
29814: CALL_OW 234
29818: GO 29788
29820: POP
29821: POP
// end ;
29822: PPOPN 1
29824: END
// export function hHackInvincible ; var i ; begin
29825: LD_INT 0
29827: PPUSH
29828: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29829: LD_ADDR_VAR 0 2
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: LD_INT 21
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 21
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: LIST
29861: PPUSH
29862: CALL_OW 69
29866: PUSH
29867: FOR_IN
29868: IFFALSE 29929
// if IsSelected ( i ) then
29870: LD_VAR 0 2
29874: PPUSH
29875: CALL_OW 306
29879: IFFALSE 29927
// begin if i in hInvincible then
29881: LD_VAR 0 2
29885: PUSH
29886: LD_EXP 98
29890: IN
29891: IFFALSE 29911
// hInvincible := hInvincible diff i else
29893: LD_ADDR_EXP 98
29897: PUSH
29898: LD_EXP 98
29902: PUSH
29903: LD_VAR 0 2
29907: DIFF
29908: ST_TO_ADDR
29909: GO 29927
// hInvincible := hInvincible union i ;
29911: LD_ADDR_EXP 98
29915: PUSH
29916: LD_EXP 98
29920: PUSH
29921: LD_VAR 0 2
29925: UNION
29926: ST_TO_ADDR
// end ;
29927: GO 29867
29929: POP
29930: POP
// end ;
29931: LD_VAR 0 1
29935: RET
// export function hHackInvisible ; var i , j ; begin
29936: LD_INT 0
29938: PPUSH
29939: PPUSH
29940: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: LD_INT 21
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PPUSH
29956: CALL_OW 69
29960: PUSH
29961: FOR_IN
29962: IFFALSE 29986
// if IsSelected ( i ) then
29964: LD_VAR 0 2
29968: PPUSH
29969: CALL_OW 306
29973: IFFALSE 29984
// ComForceInvisible ( i ) ;
29975: LD_VAR 0 2
29979: PPUSH
29980: CALL_OW 496
29984: GO 29961
29986: POP
29987: POP
// end ;
29988: LD_VAR 0 1
29992: RET
// export function hHackChangeYourSide ; begin
29993: LD_INT 0
29995: PPUSH
// if your_side = 8 then
29996: LD_OWVAR 2
30000: PUSH
30001: LD_INT 8
30003: EQUAL
30004: IFFALSE 30016
// your_side := 0 else
30006: LD_ADDR_OWVAR 2
30010: PUSH
30011: LD_INT 0
30013: ST_TO_ADDR
30014: GO 30030
// your_side := your_side + 1 ;
30016: LD_ADDR_OWVAR 2
30020: PUSH
30021: LD_OWVAR 2
30025: PUSH
30026: LD_INT 1
30028: PLUS
30029: ST_TO_ADDR
// end ;
30030: LD_VAR 0 1
30034: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30035: LD_INT 0
30037: PPUSH
30038: PPUSH
30039: PPUSH
// for i in all_units do
30040: LD_ADDR_VAR 0 2
30044: PUSH
30045: LD_OWVAR 3
30049: PUSH
30050: FOR_IN
30051: IFFALSE 30129
// if IsSelected ( i ) then
30053: LD_VAR 0 2
30057: PPUSH
30058: CALL_OW 306
30062: IFFALSE 30127
// begin j := GetSide ( i ) ;
30064: LD_ADDR_VAR 0 3
30068: PUSH
30069: LD_VAR 0 2
30073: PPUSH
30074: CALL_OW 255
30078: ST_TO_ADDR
// if j = 8 then
30079: LD_VAR 0 3
30083: PUSH
30084: LD_INT 8
30086: EQUAL
30087: IFFALSE 30099
// j := 0 else
30089: LD_ADDR_VAR 0 3
30093: PUSH
30094: LD_INT 0
30096: ST_TO_ADDR
30097: GO 30113
// j := j + 1 ;
30099: LD_ADDR_VAR 0 3
30103: PUSH
30104: LD_VAR 0 3
30108: PUSH
30109: LD_INT 1
30111: PLUS
30112: ST_TO_ADDR
// SetSide ( i , j ) ;
30113: LD_VAR 0 2
30117: PPUSH
30118: LD_VAR 0 3
30122: PPUSH
30123: CALL_OW 235
// end ;
30127: GO 30050
30129: POP
30130: POP
// end ;
30131: LD_VAR 0 1
30135: RET
// export function hHackFog ; begin
30136: LD_INT 0
30138: PPUSH
// FogOff ( true ) ;
30139: LD_INT 1
30141: PPUSH
30142: CALL_OW 344
// end ;
30146: LD_VAR 0 1
30150: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30151: LD_INT 0
30153: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30154: LD_VAR 0 1
30158: PPUSH
30159: LD_VAR 0 2
30163: PPUSH
30164: LD_VAR 0 3
30168: PPUSH
30169: LD_INT 1
30171: PPUSH
30172: LD_INT 1
30174: PPUSH
30175: CALL_OW 483
// CenterOnXY ( x , y ) ;
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: CALL_OW 84
// end ;
30193: LD_VAR 0 4
30197: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30198: LD_INT 0
30200: PPUSH
30201: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30202: LD_VAR 0 1
30206: NOT
30207: PUSH
30208: LD_VAR 0 2
30212: PPUSH
30213: LD_VAR 0 3
30217: PPUSH
30218: CALL_OW 488
30222: NOT
30223: OR
30224: PUSH
30225: LD_VAR 0 1
30229: PPUSH
30230: CALL_OW 266
30234: PUSH
30235: LD_INT 3
30237: NONEQUAL
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 247
30248: PUSH
30249: LD_INT 1
30251: EQUAL
30252: NOT
30253: AND
30254: OR
30255: IFFALSE 30259
// exit ;
30257: GO 30408
// if GetType ( factory ) = unit_human then
30259: LD_VAR 0 1
30263: PPUSH
30264: CALL_OW 247
30268: PUSH
30269: LD_INT 1
30271: EQUAL
30272: IFFALSE 30289
// factory := IsInUnit ( factory ) ;
30274: LD_ADDR_VAR 0 1
30278: PUSH
30279: LD_VAR 0 1
30283: PPUSH
30284: CALL_OW 310
30288: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30289: LD_VAR 0 1
30293: PPUSH
30294: CALL_OW 266
30298: PUSH
30299: LD_INT 3
30301: NONEQUAL
30302: IFFALSE 30306
// exit ;
30304: GO 30408
// if HexInfo ( x , y ) = factory then
30306: LD_VAR 0 2
30310: PPUSH
30311: LD_VAR 0 3
30315: PPUSH
30316: CALL_OW 428
30320: PUSH
30321: LD_VAR 0 1
30325: EQUAL
30326: IFFALSE 30353
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30328: LD_ADDR_EXP 99
30332: PUSH
30333: LD_EXP 99
30337: PPUSH
30338: LD_VAR 0 1
30342: PPUSH
30343: LD_INT 0
30345: PPUSH
30346: CALL_OW 1
30350: ST_TO_ADDR
30351: GO 30404
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30353: LD_ADDR_EXP 99
30357: PUSH
30358: LD_EXP 99
30362: PPUSH
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_VAR 0 1
30372: PPUSH
30373: CALL_OW 255
30377: PUSH
30378: LD_VAR 0 1
30382: PUSH
30383: LD_VAR 0 2
30387: PUSH
30388: LD_VAR 0 3
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: PPUSH
30399: CALL_OW 1
30403: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30404: CALL 30413 0 0
// end ;
30408: LD_VAR 0 4
30412: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30413: LD_INT 0
30415: PPUSH
30416: PPUSH
30417: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30418: LD_STRING resetFactoryWaypoint();
30420: PPUSH
30421: CALL_OW 559
// if factoryWaypoints then
30425: LD_EXP 99
30429: IFFALSE 30555
// begin list := PrepareArray ( factoryWaypoints ) ;
30431: LD_ADDR_VAR 0 3
30435: PUSH
30436: LD_EXP 99
30440: PPUSH
30441: CALL 77852 0 1
30445: ST_TO_ADDR
// for i := 1 to list do
30446: LD_ADDR_VAR 0 2
30450: PUSH
30451: DOUBLE
30452: LD_INT 1
30454: DEC
30455: ST_TO_ADDR
30456: LD_VAR 0 3
30460: PUSH
30461: FOR_TO
30462: IFFALSE 30553
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30464: LD_STRING setFactoryWaypointXY(
30466: PUSH
30467: LD_VAR 0 3
30471: PUSH
30472: LD_VAR 0 2
30476: ARRAY
30477: PUSH
30478: LD_INT 1
30480: ARRAY
30481: STR
30482: PUSH
30483: LD_STRING ,
30485: STR
30486: PUSH
30487: LD_VAR 0 3
30491: PUSH
30492: LD_VAR 0 2
30496: ARRAY
30497: PUSH
30498: LD_INT 2
30500: ARRAY
30501: STR
30502: PUSH
30503: LD_STRING ,
30505: STR
30506: PUSH
30507: LD_VAR 0 3
30511: PUSH
30512: LD_VAR 0 2
30516: ARRAY
30517: PUSH
30518: LD_INT 3
30520: ARRAY
30521: STR
30522: PUSH
30523: LD_STRING ,
30525: STR
30526: PUSH
30527: LD_VAR 0 3
30531: PUSH
30532: LD_VAR 0 2
30536: ARRAY
30537: PUSH
30538: LD_INT 4
30540: ARRAY
30541: STR
30542: PUSH
30543: LD_STRING )
30545: STR
30546: PPUSH
30547: CALL_OW 559
30551: GO 30461
30553: POP
30554: POP
// end ; end ;
30555: LD_VAR 0 1
30559: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30560: LD_INT 0
30562: PPUSH
// if HexInfo ( x , y ) = warehouse then
30563: LD_VAR 0 2
30567: PPUSH
30568: LD_VAR 0 3
30572: PPUSH
30573: CALL_OW 428
30577: PUSH
30578: LD_VAR 0 1
30582: EQUAL
30583: IFFALSE 30610
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30585: LD_ADDR_EXP 100
30589: PUSH
30590: LD_EXP 100
30594: PPUSH
30595: LD_VAR 0 1
30599: PPUSH
30600: LD_INT 0
30602: PPUSH
30603: CALL_OW 1
30607: ST_TO_ADDR
30608: GO 30661
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30610: LD_ADDR_EXP 100
30614: PUSH
30615: LD_EXP 100
30619: PPUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: LD_VAR 0 1
30629: PPUSH
30630: CALL_OW 255
30634: PUSH
30635: LD_VAR 0 1
30639: PUSH
30640: LD_VAR 0 2
30644: PUSH
30645: LD_VAR 0 3
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: PPUSH
30656: CALL_OW 1
30660: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30661: CALL 30670 0 0
// end ;
30665: LD_VAR 0 4
30669: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30670: LD_INT 0
30672: PPUSH
30673: PPUSH
30674: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30675: LD_STRING resetWarehouseGatheringPoints();
30677: PPUSH
30678: CALL_OW 559
// if warehouseGatheringPoints then
30682: LD_EXP 100
30686: IFFALSE 30812
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30688: LD_ADDR_VAR 0 3
30692: PUSH
30693: LD_EXP 100
30697: PPUSH
30698: CALL 77852 0 1
30702: ST_TO_ADDR
// for i := 1 to list do
30703: LD_ADDR_VAR 0 2
30707: PUSH
30708: DOUBLE
30709: LD_INT 1
30711: DEC
30712: ST_TO_ADDR
30713: LD_VAR 0 3
30717: PUSH
30718: FOR_TO
30719: IFFALSE 30810
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30721: LD_STRING setWarehouseGatheringPointXY(
30723: PUSH
30724: LD_VAR 0 3
30728: PUSH
30729: LD_VAR 0 2
30733: ARRAY
30734: PUSH
30735: LD_INT 1
30737: ARRAY
30738: STR
30739: PUSH
30740: LD_STRING ,
30742: STR
30743: PUSH
30744: LD_VAR 0 3
30748: PUSH
30749: LD_VAR 0 2
30753: ARRAY
30754: PUSH
30755: LD_INT 2
30757: ARRAY
30758: STR
30759: PUSH
30760: LD_STRING ,
30762: STR
30763: PUSH
30764: LD_VAR 0 3
30768: PUSH
30769: LD_VAR 0 2
30773: ARRAY
30774: PUSH
30775: LD_INT 3
30777: ARRAY
30778: STR
30779: PUSH
30780: LD_STRING ,
30782: STR
30783: PUSH
30784: LD_VAR 0 3
30788: PUSH
30789: LD_VAR 0 2
30793: ARRAY
30794: PUSH
30795: LD_INT 4
30797: ARRAY
30798: STR
30799: PUSH
30800: LD_STRING )
30802: STR
30803: PPUSH
30804: CALL_OW 559
30808: GO 30718
30810: POP
30811: POP
// end ; end ;
30812: LD_VAR 0 1
30816: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30817: LD_EXP 100
30821: IFFALSE 31506
30823: GO 30825
30825: DISABLE
30826: LD_INT 0
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
30835: PPUSH
30836: PPUSH
// begin enable ;
30837: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30838: LD_ADDR_VAR 0 3
30842: PUSH
30843: LD_EXP 100
30847: PPUSH
30848: CALL 77852 0 1
30852: ST_TO_ADDR
// if not list then
30853: LD_VAR 0 3
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 31506
// for i := 1 to list do
30862: LD_ADDR_VAR 0 1
30866: PUSH
30867: DOUBLE
30868: LD_INT 1
30870: DEC
30871: ST_TO_ADDR
30872: LD_VAR 0 3
30876: PUSH
30877: FOR_TO
30878: IFFALSE 31504
// begin depot := list [ i ] [ 2 ] ;
30880: LD_ADDR_VAR 0 8
30884: PUSH
30885: LD_VAR 0 3
30889: PUSH
30890: LD_VAR 0 1
30894: ARRAY
30895: PUSH
30896: LD_INT 2
30898: ARRAY
30899: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30900: LD_ADDR_VAR 0 5
30904: PUSH
30905: LD_VAR 0 3
30909: PUSH
30910: LD_VAR 0 1
30914: ARRAY
30915: PUSH
30916: LD_INT 1
30918: ARRAY
30919: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30920: LD_VAR 0 8
30924: PPUSH
30925: CALL_OW 301
30929: PUSH
30930: LD_VAR 0 5
30934: PUSH
30935: LD_VAR 0 8
30939: PPUSH
30940: CALL_OW 255
30944: NONEQUAL
30945: OR
30946: IFFALSE 30975
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30948: LD_ADDR_EXP 100
30952: PUSH
30953: LD_EXP 100
30957: PPUSH
30958: LD_VAR 0 8
30962: PPUSH
30963: LD_INT 0
30965: PPUSH
30966: CALL_OW 1
30970: ST_TO_ADDR
// exit ;
30971: POP
30972: POP
30973: GO 31506
// end ; x := list [ i ] [ 3 ] ;
30975: LD_ADDR_VAR 0 6
30979: PUSH
30980: LD_VAR 0 3
30984: PUSH
30985: LD_VAR 0 1
30989: ARRAY
30990: PUSH
30991: LD_INT 3
30993: ARRAY
30994: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30995: LD_ADDR_VAR 0 7
30999: PUSH
31000: LD_VAR 0 3
31004: PUSH
31005: LD_VAR 0 1
31009: ARRAY
31010: PUSH
31011: LD_INT 4
31013: ARRAY
31014: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31015: LD_ADDR_VAR 0 9
31019: PUSH
31020: LD_VAR 0 6
31024: PPUSH
31025: LD_VAR 0 7
31029: PPUSH
31030: LD_INT 16
31032: PPUSH
31033: CALL 76440 0 3
31037: ST_TO_ADDR
// if not cratesNearbyPoint then
31038: LD_VAR 0 9
31042: NOT
31043: IFFALSE 31049
// exit ;
31045: POP
31046: POP
31047: GO 31506
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31049: LD_ADDR_VAR 0 4
31053: PUSH
31054: LD_INT 22
31056: PUSH
31057: LD_VAR 0 5
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: LD_INT 60
31071: PUSH
31072: EMPTY
31073: LIST
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 91
31081: PUSH
31082: LD_VAR 0 8
31086: PUSH
31087: LD_INT 6
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 25
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 25
31110: PUSH
31111: LD_INT 16
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: PPUSH
31129: CALL_OW 69
31133: PUSH
31134: LD_VAR 0 8
31138: PPUSH
31139: CALL_OW 313
31143: PPUSH
31144: LD_INT 3
31146: PUSH
31147: LD_INT 60
31149: PUSH
31150: EMPTY
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: LD_INT 25
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 25
31172: PUSH
31173: LD_INT 16
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PPUSH
31189: CALL_OW 72
31193: UNION
31194: ST_TO_ADDR
// if tmp then
31195: LD_VAR 0 4
31199: IFFALSE 31279
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31201: LD_ADDR_VAR 0 4
31205: PUSH
31206: LD_VAR 0 4
31210: PPUSH
31211: LD_INT 3
31213: PPUSH
31214: CALL 74409 0 2
31218: ST_TO_ADDR
// for j in tmp do
31219: LD_ADDR_VAR 0 2
31223: PUSH
31224: LD_VAR 0 4
31228: PUSH
31229: FOR_IN
31230: IFFALSE 31273
// begin if IsInUnit ( j ) then
31232: LD_VAR 0 2
31236: PPUSH
31237: CALL_OW 310
31241: IFFALSE 31252
// ComExit ( j ) ;
31243: LD_VAR 0 2
31247: PPUSH
31248: CALL 74492 0 1
// AddComCollect ( j , x , y ) ;
31252: LD_VAR 0 2
31256: PPUSH
31257: LD_VAR 0 6
31261: PPUSH
31262: LD_VAR 0 7
31266: PPUSH
31267: CALL_OW 177
// end ;
31271: GO 31229
31273: POP
31274: POP
// exit ;
31275: POP
31276: POP
31277: GO 31506
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31279: LD_ADDR_VAR 0 4
31283: PUSH
31284: LD_INT 22
31286: PUSH
31287: LD_VAR 0 5
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 91
31298: PUSH
31299: LD_VAR 0 8
31303: PUSH
31304: LD_INT 8
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 34
31317: PUSH
31318: LD_INT 12
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 34
31327: PUSH
31328: LD_INT 51
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 34
31337: PUSH
31338: LD_INT 32
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 34
31347: PUSH
31348: LD_INT 89
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: PPUSH
31367: CALL_OW 69
31371: ST_TO_ADDR
// if tmp then
31372: LD_VAR 0 4
31376: IFFALSE 31502
// begin for j in tmp do
31378: LD_ADDR_VAR 0 2
31382: PUSH
31383: LD_VAR 0 4
31387: PUSH
31388: FOR_IN
31389: IFFALSE 31500
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31391: LD_VAR 0 2
31395: PPUSH
31396: CALL_OW 262
31400: PUSH
31401: LD_INT 3
31403: EQUAL
31404: PUSH
31405: LD_VAR 0 2
31409: PPUSH
31410: CALL_OW 261
31414: PUSH
31415: LD_INT 20
31417: GREATER
31418: OR
31419: PUSH
31420: LD_VAR 0 2
31424: PPUSH
31425: CALL_OW 314
31429: NOT
31430: AND
31431: PUSH
31432: LD_VAR 0 2
31436: PPUSH
31437: CALL_OW 263
31441: PUSH
31442: LD_INT 1
31444: NONEQUAL
31445: PUSH
31446: LD_VAR 0 2
31450: PPUSH
31451: CALL_OW 311
31455: OR
31456: AND
31457: IFFALSE 31498
// begin ComCollect ( j , x , y ) ;
31459: LD_VAR 0 2
31463: PPUSH
31464: LD_VAR 0 6
31468: PPUSH
31469: LD_VAR 0 7
31473: PPUSH
31474: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31478: LD_VAR 0 2
31482: PPUSH
31483: LD_VAR 0 8
31487: PPUSH
31488: CALL_OW 172
// exit ;
31492: POP
31493: POP
31494: POP
31495: POP
31496: GO 31506
// end ;
31498: GO 31388
31500: POP
31501: POP
// end ; end ;
31502: GO 30877
31504: POP
31505: POP
// end ; end_of_file
31506: PPOPN 9
31508: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31509: LD_INT 0
31511: PPUSH
31512: PPUSH
31513: PPUSH
31514: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31515: LD_VAR 0 1
31519: PPUSH
31520: CALL_OW 264
31524: PUSH
31525: LD_INT 91
31527: EQUAL
31528: IFFALSE 31600
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31530: LD_INT 68
31532: PPUSH
31533: LD_VAR 0 1
31537: PPUSH
31538: CALL_OW 255
31542: PPUSH
31543: CALL_OW 321
31547: PUSH
31548: LD_INT 2
31550: EQUAL
31551: IFFALSE 31563
// eff := 70 else
31553: LD_ADDR_VAR 0 4
31557: PUSH
31558: LD_INT 70
31560: ST_TO_ADDR
31561: GO 31571
// eff := 30 ;
31563: LD_ADDR_VAR 0 4
31567: PUSH
31568: LD_INT 30
31570: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31571: LD_VAR 0 1
31575: PPUSH
31576: CALL_OW 250
31580: PPUSH
31581: LD_VAR 0 1
31585: PPUSH
31586: CALL_OW 251
31590: PPUSH
31591: LD_VAR 0 4
31595: PPUSH
31596: CALL_OW 495
// end ; end ;
31600: LD_VAR 0 2
31604: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31605: LD_INT 0
31607: PPUSH
// end ;
31608: LD_VAR 0 4
31612: RET
// export function SOS_Command ( cmd ) ; begin
31613: LD_INT 0
31615: PPUSH
// end ;
31616: LD_VAR 0 2
31620: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31621: LD_INT 0
31623: PPUSH
// end ;
31624: LD_VAR 0 6
31628: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31629: LD_INT 0
31631: PPUSH
31632: PPUSH
// if not vehicle or not factory then
31633: LD_VAR 0 1
31637: NOT
31638: PUSH
31639: LD_VAR 0 2
31643: NOT
31644: OR
31645: IFFALSE 31649
// exit ;
31647: GO 31880
// if factoryWaypoints >= factory then
31649: LD_EXP 99
31653: PUSH
31654: LD_VAR 0 2
31658: GREATEREQUAL
31659: IFFALSE 31880
// if factoryWaypoints [ factory ] then
31661: LD_EXP 99
31665: PUSH
31666: LD_VAR 0 2
31670: ARRAY
31671: IFFALSE 31880
// begin if GetControl ( vehicle ) = control_manual then
31673: LD_VAR 0 1
31677: PPUSH
31678: CALL_OW 263
31682: PUSH
31683: LD_INT 1
31685: EQUAL
31686: IFFALSE 31767
// begin driver := IsDrivenBy ( vehicle ) ;
31688: LD_ADDR_VAR 0 4
31692: PUSH
31693: LD_VAR 0 1
31697: PPUSH
31698: CALL_OW 311
31702: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31703: LD_VAR 0 4
31707: PPUSH
31708: LD_EXP 99
31712: PUSH
31713: LD_VAR 0 2
31717: ARRAY
31718: PUSH
31719: LD_INT 3
31721: ARRAY
31722: PPUSH
31723: LD_EXP 99
31727: PUSH
31728: LD_VAR 0 2
31732: ARRAY
31733: PUSH
31734: LD_INT 4
31736: ARRAY
31737: PPUSH
31738: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31742: LD_VAR 0 4
31746: PPUSH
31747: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31751: LD_VAR 0 4
31755: PPUSH
31756: LD_VAR 0 2
31760: PPUSH
31761: CALL_OW 180
// end else
31765: GO 31880
// if GetControl ( vehicle ) = control_remote then
31767: LD_VAR 0 1
31771: PPUSH
31772: CALL_OW 263
31776: PUSH
31777: LD_INT 2
31779: EQUAL
31780: IFFALSE 31841
// begin wait ( 0 0$2 ) ;
31782: LD_INT 70
31784: PPUSH
31785: CALL_OW 67
// if Connect ( vehicle ) then
31789: LD_VAR 0 1
31793: PPUSH
31794: CALL 44711 0 1
31798: IFFALSE 31839
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31800: LD_VAR 0 1
31804: PPUSH
31805: LD_EXP 99
31809: PUSH
31810: LD_VAR 0 2
31814: ARRAY
31815: PUSH
31816: LD_INT 3
31818: ARRAY
31819: PPUSH
31820: LD_EXP 99
31824: PUSH
31825: LD_VAR 0 2
31829: ARRAY
31830: PUSH
31831: LD_INT 4
31833: ARRAY
31834: PPUSH
31835: CALL_OW 171
// end else
31839: GO 31880
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31841: LD_VAR 0 1
31845: PPUSH
31846: LD_EXP 99
31850: PUSH
31851: LD_VAR 0 2
31855: ARRAY
31856: PUSH
31857: LD_INT 3
31859: ARRAY
31860: PPUSH
31861: LD_EXP 99
31865: PUSH
31866: LD_VAR 0 2
31870: ARRAY
31871: PUSH
31872: LD_INT 4
31874: ARRAY
31875: PPUSH
31876: CALL_OW 171
// end ; end ;
31880: LD_VAR 0 3
31884: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31885: LD_INT 0
31887: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31888: LD_VAR 0 1
31892: PUSH
31893: LD_INT 250
31895: EQUAL
31896: PUSH
31897: LD_VAR 0 2
31901: PPUSH
31902: CALL_OW 264
31906: PUSH
31907: LD_INT 81
31909: EQUAL
31910: AND
31911: IFFALSE 31932
// MinerPlaceMine ( unit , x , y ) ;
31913: LD_VAR 0 2
31917: PPUSH
31918: LD_VAR 0 4
31922: PPUSH
31923: LD_VAR 0 5
31927: PPUSH
31928: CALL 34922 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31932: LD_VAR 0 1
31936: PUSH
31937: LD_INT 251
31939: EQUAL
31940: PUSH
31941: LD_VAR 0 2
31945: PPUSH
31946: CALL_OW 264
31950: PUSH
31951: LD_INT 81
31953: EQUAL
31954: AND
31955: IFFALSE 31976
// MinerDetonateMine ( unit , x , y ) ;
31957: LD_VAR 0 2
31961: PPUSH
31962: LD_VAR 0 4
31966: PPUSH
31967: LD_VAR 0 5
31971: PPUSH
31972: CALL 35197 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31976: LD_VAR 0 1
31980: PUSH
31981: LD_INT 252
31983: EQUAL
31984: PUSH
31985: LD_VAR 0 2
31989: PPUSH
31990: CALL_OW 264
31994: PUSH
31995: LD_INT 81
31997: EQUAL
31998: AND
31999: IFFALSE 32020
// MinerCreateMinefield ( unit , x , y ) ;
32001: LD_VAR 0 2
32005: PPUSH
32006: LD_VAR 0 4
32010: PPUSH
32011: LD_VAR 0 5
32015: PPUSH
32016: CALL 35614 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32020: LD_VAR 0 1
32024: PUSH
32025: LD_INT 253
32027: EQUAL
32028: PUSH
32029: LD_VAR 0 2
32033: PPUSH
32034: CALL_OW 257
32038: PUSH
32039: LD_INT 5
32041: EQUAL
32042: AND
32043: IFFALSE 32064
// ComBinocular ( unit , x , y ) ;
32045: LD_VAR 0 2
32049: PPUSH
32050: LD_VAR 0 4
32054: PPUSH
32055: LD_VAR 0 5
32059: PPUSH
32060: CALL 35983 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32064: LD_VAR 0 1
32068: PUSH
32069: LD_INT 254
32071: EQUAL
32072: PUSH
32073: LD_VAR 0 2
32077: PPUSH
32078: CALL_OW 264
32082: PUSH
32083: LD_INT 99
32085: EQUAL
32086: AND
32087: PUSH
32088: LD_VAR 0 3
32092: PPUSH
32093: CALL_OW 263
32097: PUSH
32098: LD_INT 3
32100: EQUAL
32101: AND
32102: IFFALSE 32118
// HackDestroyVehicle ( unit , selectedUnit ) ;
32104: LD_VAR 0 2
32108: PPUSH
32109: LD_VAR 0 3
32113: PPUSH
32114: CALL 34286 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32118: LD_VAR 0 1
32122: PUSH
32123: LD_INT 255
32125: EQUAL
32126: PUSH
32127: LD_VAR 0 2
32131: PPUSH
32132: CALL_OW 264
32136: PUSH
32137: LD_INT 14
32139: PUSH
32140: LD_INT 53
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: IN
32147: AND
32148: PUSH
32149: LD_VAR 0 4
32153: PPUSH
32154: LD_VAR 0 5
32158: PPUSH
32159: CALL_OW 488
32163: AND
32164: IFFALSE 32188
// CutTreeXYR ( unit , x , y , 12 ) ;
32166: LD_VAR 0 2
32170: PPUSH
32171: LD_VAR 0 4
32175: PPUSH
32176: LD_VAR 0 5
32180: PPUSH
32181: LD_INT 12
32183: PPUSH
32184: CALL 32283 0 4
// if cmd = 256 then
32188: LD_VAR 0 1
32192: PUSH
32193: LD_INT 256
32195: EQUAL
32196: IFFALSE 32217
// SetFactoryWaypoint ( unit , x , y ) ;
32198: LD_VAR 0 2
32202: PPUSH
32203: LD_VAR 0 4
32207: PPUSH
32208: LD_VAR 0 5
32212: PPUSH
32213: CALL 30198 0 3
// if cmd = 257 then
32217: LD_VAR 0 1
32221: PUSH
32222: LD_INT 257
32224: EQUAL
32225: IFFALSE 32246
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32227: LD_VAR 0 2
32231: PPUSH
32232: LD_VAR 0 4
32236: PPUSH
32237: LD_VAR 0 5
32241: PPUSH
32242: CALL 30560 0 3
// if cmd = 258 then
32246: LD_VAR 0 1
32250: PUSH
32251: LD_INT 258
32253: EQUAL
32254: IFFALSE 32278
// BurnTreeXYR ( unit , x , y , 8 ) ;
32256: LD_VAR 0 2
32260: PPUSH
32261: LD_VAR 0 4
32265: PPUSH
32266: LD_VAR 0 5
32270: PPUSH
32271: LD_INT 8
32273: PPUSH
32274: CALL 32677 0 4
// end ;
32278: LD_VAR 0 6
32282: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32283: LD_INT 0
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
32290: PPUSH
32291: PPUSH
32292: PPUSH
32293: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
32294: LD_VAR 0 1
32298: PPUSH
32299: CALL_OW 302
32303: NOT
32304: PUSH
32305: LD_VAR 0 2
32309: PPUSH
32310: LD_VAR 0 3
32314: PPUSH
32315: CALL_OW 488
32319: NOT
32320: OR
32321: PUSH
32322: LD_VAR 0 4
32326: NOT
32327: OR
32328: IFFALSE 32332
// exit ;
32330: GO 32672
// list := [ ] ;
32332: LD_ADDR_VAR 0 13
32336: PUSH
32337: EMPTY
32338: ST_TO_ADDR
// if x - r < 0 then
32339: LD_VAR 0 2
32343: PUSH
32344: LD_VAR 0 4
32348: MINUS
32349: PUSH
32350: LD_INT 0
32352: LESS
32353: IFFALSE 32365
// min_x := 0 else
32355: LD_ADDR_VAR 0 7
32359: PUSH
32360: LD_INT 0
32362: ST_TO_ADDR
32363: GO 32381
// min_x := x - r ;
32365: LD_ADDR_VAR 0 7
32369: PUSH
32370: LD_VAR 0 2
32374: PUSH
32375: LD_VAR 0 4
32379: MINUS
32380: ST_TO_ADDR
// if y - r < 0 then
32381: LD_VAR 0 3
32385: PUSH
32386: LD_VAR 0 4
32390: MINUS
32391: PUSH
32392: LD_INT 0
32394: LESS
32395: IFFALSE 32407
// min_y := 0 else
32397: LD_ADDR_VAR 0 8
32401: PUSH
32402: LD_INT 0
32404: ST_TO_ADDR
32405: GO 32423
// min_y := y - r ;
32407: LD_ADDR_VAR 0 8
32411: PUSH
32412: LD_VAR 0 3
32416: PUSH
32417: LD_VAR 0 4
32421: MINUS
32422: ST_TO_ADDR
// max_x := x + r ;
32423: LD_ADDR_VAR 0 9
32427: PUSH
32428: LD_VAR 0 2
32432: PUSH
32433: LD_VAR 0 4
32437: PLUS
32438: ST_TO_ADDR
// max_y := y + r ;
32439: LD_ADDR_VAR 0 10
32443: PUSH
32444: LD_VAR 0 3
32448: PUSH
32449: LD_VAR 0 4
32453: PLUS
32454: ST_TO_ADDR
// for _x = min_x to max_x do
32455: LD_ADDR_VAR 0 11
32459: PUSH
32460: DOUBLE
32461: LD_VAR 0 7
32465: DEC
32466: ST_TO_ADDR
32467: LD_VAR 0 9
32471: PUSH
32472: FOR_TO
32473: IFFALSE 32590
// for _y = min_y to max_y do
32475: LD_ADDR_VAR 0 12
32479: PUSH
32480: DOUBLE
32481: LD_VAR 0 8
32485: DEC
32486: ST_TO_ADDR
32487: LD_VAR 0 10
32491: PUSH
32492: FOR_TO
32493: IFFALSE 32586
// begin if not ValidHex ( _x , _y ) then
32495: LD_VAR 0 11
32499: PPUSH
32500: LD_VAR 0 12
32504: PPUSH
32505: CALL_OW 488
32509: NOT
32510: IFFALSE 32514
// continue ;
32512: GO 32492
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32514: LD_VAR 0 11
32518: PPUSH
32519: LD_VAR 0 12
32523: PPUSH
32524: CALL_OW 351
32528: PUSH
32529: LD_VAR 0 11
32533: PPUSH
32534: LD_VAR 0 12
32538: PPUSH
32539: CALL_OW 554
32543: AND
32544: IFFALSE 32584
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32546: LD_ADDR_VAR 0 13
32550: PUSH
32551: LD_VAR 0 13
32555: PPUSH
32556: LD_VAR 0 13
32560: PUSH
32561: LD_INT 1
32563: PLUS
32564: PPUSH
32565: LD_VAR 0 11
32569: PUSH
32570: LD_VAR 0 12
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PPUSH
32579: CALL_OW 2
32583: ST_TO_ADDR
// end ;
32584: GO 32492
32586: POP
32587: POP
32588: GO 32472
32590: POP
32591: POP
// if not list then
32592: LD_VAR 0 13
32596: NOT
32597: IFFALSE 32601
// exit ;
32599: GO 32672
// for i in list do
32601: LD_ADDR_VAR 0 6
32605: PUSH
32606: LD_VAR 0 13
32610: PUSH
32611: FOR_IN
32612: IFFALSE 32670
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32614: LD_VAR 0 1
32618: PPUSH
32619: LD_STRING M
32621: PUSH
32622: LD_VAR 0 6
32626: PUSH
32627: LD_INT 1
32629: ARRAY
32630: PUSH
32631: LD_VAR 0 6
32635: PUSH
32636: LD_INT 2
32638: ARRAY
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: PUSH
32661: EMPTY
32662: LIST
32663: PPUSH
32664: CALL_OW 447
32668: GO 32611
32670: POP
32671: POP
// end ;
32672: LD_VAR 0 5
32676: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
32677: LD_INT 0
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
32689: LD_VAR 0 1
32693: PPUSH
32694: CALL_OW 302
32698: NOT
32699: PUSH
32700: LD_VAR 0 2
32704: PPUSH
32705: LD_VAR 0 3
32709: PPUSH
32710: CALL_OW 488
32714: NOT
32715: OR
32716: PUSH
32717: LD_VAR 0 4
32721: NOT
32722: OR
32723: IFFALSE 32727
// exit ;
32725: GO 33240
// list := [ ] ;
32727: LD_ADDR_VAR 0 13
32731: PUSH
32732: EMPTY
32733: ST_TO_ADDR
// if x - r < 0 then
32734: LD_VAR 0 2
32738: PUSH
32739: LD_VAR 0 4
32743: MINUS
32744: PUSH
32745: LD_INT 0
32747: LESS
32748: IFFALSE 32760
// min_x := 0 else
32750: LD_ADDR_VAR 0 7
32754: PUSH
32755: LD_INT 0
32757: ST_TO_ADDR
32758: GO 32776
// min_x := x - r ;
32760: LD_ADDR_VAR 0 7
32764: PUSH
32765: LD_VAR 0 2
32769: PUSH
32770: LD_VAR 0 4
32774: MINUS
32775: ST_TO_ADDR
// if y - r < 0 then
32776: LD_VAR 0 3
32780: PUSH
32781: LD_VAR 0 4
32785: MINUS
32786: PUSH
32787: LD_INT 0
32789: LESS
32790: IFFALSE 32802
// min_y := 0 else
32792: LD_ADDR_VAR 0 8
32796: PUSH
32797: LD_INT 0
32799: ST_TO_ADDR
32800: GO 32818
// min_y := y - r ;
32802: LD_ADDR_VAR 0 8
32806: PUSH
32807: LD_VAR 0 3
32811: PUSH
32812: LD_VAR 0 4
32816: MINUS
32817: ST_TO_ADDR
// max_x := x + r ;
32818: LD_ADDR_VAR 0 9
32822: PUSH
32823: LD_VAR 0 2
32827: PUSH
32828: LD_VAR 0 4
32832: PLUS
32833: ST_TO_ADDR
// max_y := y + r ;
32834: LD_ADDR_VAR 0 10
32838: PUSH
32839: LD_VAR 0 3
32843: PUSH
32844: LD_VAR 0 4
32848: PLUS
32849: ST_TO_ADDR
// for _x = min_x to max_x do
32850: LD_ADDR_VAR 0 11
32854: PUSH
32855: DOUBLE
32856: LD_VAR 0 7
32860: DEC
32861: ST_TO_ADDR
32862: LD_VAR 0 9
32866: PUSH
32867: FOR_TO
32868: IFFALSE 32985
// for _y = min_y to max_y do
32870: LD_ADDR_VAR 0 12
32874: PUSH
32875: DOUBLE
32876: LD_VAR 0 8
32880: DEC
32881: ST_TO_ADDR
32882: LD_VAR 0 10
32886: PUSH
32887: FOR_TO
32888: IFFALSE 32981
// begin if not ValidHex ( _x , _y ) then
32890: LD_VAR 0 11
32894: PPUSH
32895: LD_VAR 0 12
32899: PPUSH
32900: CALL_OW 488
32904: NOT
32905: IFFALSE 32909
// continue ;
32907: GO 32887
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32909: LD_VAR 0 11
32913: PPUSH
32914: LD_VAR 0 12
32918: PPUSH
32919: CALL_OW 351
32923: PUSH
32924: LD_VAR 0 11
32928: PPUSH
32929: LD_VAR 0 12
32933: PPUSH
32934: CALL_OW 554
32938: AND
32939: IFFALSE 32979
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32941: LD_ADDR_VAR 0 13
32945: PUSH
32946: LD_VAR 0 13
32950: PPUSH
32951: LD_VAR 0 13
32955: PUSH
32956: LD_INT 1
32958: PLUS
32959: PPUSH
32960: LD_VAR 0 11
32964: PUSH
32965: LD_VAR 0 12
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PPUSH
32974: CALL_OW 2
32978: ST_TO_ADDR
// end ;
32979: GO 32887
32981: POP
32982: POP
32983: GO 32867
32985: POP
32986: POP
// if not list then
32987: LD_VAR 0 13
32991: NOT
32992: IFFALSE 32996
// exit ;
32994: GO 33240
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
32996: LD_ADDR_VAR 0 13
33000: PUSH
33001: LD_VAR 0 1
33005: PPUSH
33006: LD_VAR 0 13
33010: PPUSH
33011: LD_INT 1
33013: PPUSH
33014: LD_INT 1
33016: PPUSH
33017: CALL 41853 0 4
33021: ST_TO_ADDR
// ComStop ( flame ) ;
33022: LD_VAR 0 1
33026: PPUSH
33027: CALL_OW 141
// for i in list do
33031: LD_ADDR_VAR 0 6
33035: PUSH
33036: LD_VAR 0 13
33040: PUSH
33041: FOR_IN
33042: IFFALSE 33073
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
33044: LD_VAR 0 1
33048: PPUSH
33049: LD_VAR 0 6
33053: PUSH
33054: LD_INT 1
33056: ARRAY
33057: PPUSH
33058: LD_VAR 0 6
33062: PUSH
33063: LD_INT 2
33065: ARRAY
33066: PPUSH
33067: CALL_OW 176
33071: GO 33041
33073: POP
33074: POP
// repeat wait ( 0 0$1 ) ;
33075: LD_INT 35
33077: PPUSH
33078: CALL_OW 67
// task := GetTaskList ( flame ) ;
33082: LD_ADDR_VAR 0 14
33086: PUSH
33087: LD_VAR 0 1
33091: PPUSH
33092: CALL_OW 437
33096: ST_TO_ADDR
// if not task then
33097: LD_VAR 0 14
33101: NOT
33102: IFFALSE 33106
// exit ;
33104: GO 33240
// if task [ 1 ] [ 1 ] <> | then
33106: LD_VAR 0 14
33110: PUSH
33111: LD_INT 1
33113: ARRAY
33114: PUSH
33115: LD_INT 1
33117: ARRAY
33118: PUSH
33119: LD_STRING |
33121: NONEQUAL
33122: IFFALSE 33126
// exit ;
33124: GO 33240
// _x := task [ 1 ] [ 2 ] ;
33126: LD_ADDR_VAR 0 11
33130: PUSH
33131: LD_VAR 0 14
33135: PUSH
33136: LD_INT 1
33138: ARRAY
33139: PUSH
33140: LD_INT 2
33142: ARRAY
33143: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
33144: LD_ADDR_VAR 0 12
33148: PUSH
33149: LD_VAR 0 14
33153: PUSH
33154: LD_INT 1
33156: ARRAY
33157: PUSH
33158: LD_INT 3
33160: ARRAY
33161: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
33162: LD_VAR 0 11
33166: PPUSH
33167: LD_VAR 0 12
33171: PPUSH
33172: CALL_OW 351
33176: NOT
33177: PUSH
33178: LD_VAR 0 11
33182: PPUSH
33183: LD_VAR 0 12
33187: PPUSH
33188: CALL_OW 554
33192: NOT
33193: OR
33194: IFFALSE 33228
// begin task := Delete ( task , 1 ) ;
33196: LD_ADDR_VAR 0 14
33200: PUSH
33201: LD_VAR 0 14
33205: PPUSH
33206: LD_INT 1
33208: PPUSH
33209: CALL_OW 3
33213: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
33214: LD_VAR 0 1
33218: PPUSH
33219: LD_VAR 0 14
33223: PPUSH
33224: CALL_OW 446
// end ; until not HasTask ( flame ) ;
33228: LD_VAR 0 1
33232: PPUSH
33233: CALL_OW 314
33237: NOT
33238: IFFALSE 33075
// end ;
33240: LD_VAR 0 5
33244: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33245: LD_EXP 102
33249: NOT
33250: IFFALSE 33300
33252: GO 33254
33254: DISABLE
// begin initHack := true ;
33255: LD_ADDR_EXP 102
33259: PUSH
33260: LD_INT 1
33262: ST_TO_ADDR
// hackTanks := [ ] ;
33263: LD_ADDR_EXP 103
33267: PUSH
33268: EMPTY
33269: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33270: LD_ADDR_EXP 104
33274: PUSH
33275: EMPTY
33276: ST_TO_ADDR
// hackLimit := 3 ;
33277: LD_ADDR_EXP 105
33281: PUSH
33282: LD_INT 3
33284: ST_TO_ADDR
// hackDist := 12 ;
33285: LD_ADDR_EXP 106
33289: PUSH
33290: LD_INT 12
33292: ST_TO_ADDR
// hackCounter := [ ] ;
33293: LD_ADDR_EXP 107
33297: PUSH
33298: EMPTY
33299: ST_TO_ADDR
// end ;
33300: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33301: LD_EXP 102
33305: PUSH
33306: LD_INT 34
33308: PUSH
33309: LD_INT 99
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PPUSH
33316: CALL_OW 69
33320: AND
33321: IFFALSE 33574
33323: GO 33325
33325: DISABLE
33326: LD_INT 0
33328: PPUSH
33329: PPUSH
// begin enable ;
33330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33331: LD_ADDR_VAR 0 1
33335: PUSH
33336: LD_INT 34
33338: PUSH
33339: LD_INT 99
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PPUSH
33346: CALL_OW 69
33350: PUSH
33351: FOR_IN
33352: IFFALSE 33572
// begin if not i in hackTanks then
33354: LD_VAR 0 1
33358: PUSH
33359: LD_EXP 103
33363: IN
33364: NOT
33365: IFFALSE 33448
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33367: LD_ADDR_EXP 103
33371: PUSH
33372: LD_EXP 103
33376: PPUSH
33377: LD_EXP 103
33381: PUSH
33382: LD_INT 1
33384: PLUS
33385: PPUSH
33386: LD_VAR 0 1
33390: PPUSH
33391: CALL_OW 1
33395: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33396: LD_ADDR_EXP 104
33400: PUSH
33401: LD_EXP 104
33405: PPUSH
33406: LD_EXP 104
33410: PUSH
33411: LD_INT 1
33413: PLUS
33414: PPUSH
33415: EMPTY
33416: PPUSH
33417: CALL_OW 1
33421: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33422: LD_ADDR_EXP 107
33426: PUSH
33427: LD_EXP 107
33431: PPUSH
33432: LD_EXP 107
33436: PUSH
33437: LD_INT 1
33439: PLUS
33440: PPUSH
33441: EMPTY
33442: PPUSH
33443: CALL_OW 1
33447: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL_OW 302
33457: NOT
33458: IFFALSE 33471
// begin HackUnlinkAll ( i ) ;
33460: LD_VAR 0 1
33464: PPUSH
33465: CALL 33577 0 1
// continue ;
33469: GO 33351
// end ; HackCheckCapturedStatus ( i ) ;
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL 34020 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33480: LD_ADDR_VAR 0 2
33484: PUSH
33485: LD_INT 81
33487: PUSH
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 255
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 33
33504: PUSH
33505: LD_INT 3
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 91
33514: PUSH
33515: LD_VAR 0 1
33519: PUSH
33520: LD_EXP 106
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 50
33532: PUSH
33533: EMPTY
33534: LIST
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: PPUSH
33542: CALL_OW 69
33546: ST_TO_ADDR
// if not tmp then
33547: LD_VAR 0 2
33551: NOT
33552: IFFALSE 33556
// continue ;
33554: GO 33351
// HackLink ( i , tmp ) ;
33556: LD_VAR 0 1
33560: PPUSH
33561: LD_VAR 0 2
33565: PPUSH
33566: CALL 33713 0 2
// end ;
33570: GO 33351
33572: POP
33573: POP
// end ;
33574: PPOPN 2
33576: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33577: LD_INT 0
33579: PPUSH
33580: PPUSH
33581: PPUSH
// if not hack in hackTanks then
33582: LD_VAR 0 1
33586: PUSH
33587: LD_EXP 103
33591: IN
33592: NOT
33593: IFFALSE 33597
// exit ;
33595: GO 33708
// index := GetElementIndex ( hackTanks , hack ) ;
33597: LD_ADDR_VAR 0 4
33601: PUSH
33602: LD_EXP 103
33606: PPUSH
33607: LD_VAR 0 1
33611: PPUSH
33612: CALL 41150 0 2
33616: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33617: LD_EXP 104
33621: PUSH
33622: LD_VAR 0 4
33626: ARRAY
33627: IFFALSE 33708
// begin for i in hackTanksCaptured [ index ] do
33629: LD_ADDR_VAR 0 3
33633: PUSH
33634: LD_EXP 104
33638: PUSH
33639: LD_VAR 0 4
33643: ARRAY
33644: PUSH
33645: FOR_IN
33646: IFFALSE 33672
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33648: LD_VAR 0 3
33652: PUSH
33653: LD_INT 1
33655: ARRAY
33656: PPUSH
33657: LD_VAR 0 3
33661: PUSH
33662: LD_INT 2
33664: ARRAY
33665: PPUSH
33666: CALL_OW 235
33670: GO 33645
33672: POP
33673: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33674: LD_ADDR_EXP 104
33678: PUSH
33679: LD_EXP 104
33683: PPUSH
33684: LD_VAR 0 4
33688: PPUSH
33689: EMPTY
33690: PPUSH
33691: CALL_OW 1
33695: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33696: LD_VAR 0 1
33700: PPUSH
33701: LD_INT 0
33703: PPUSH
33704: CALL_OW 505
// end ; end ;
33708: LD_VAR 0 2
33712: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33713: LD_INT 0
33715: PPUSH
33716: PPUSH
33717: PPUSH
// if not hack in hackTanks or not vehicles then
33718: LD_VAR 0 1
33722: PUSH
33723: LD_EXP 103
33727: IN
33728: NOT
33729: PUSH
33730: LD_VAR 0 2
33734: NOT
33735: OR
33736: IFFALSE 33740
// exit ;
33738: GO 34015
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33740: LD_ADDR_VAR 0 2
33744: PUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: LD_VAR 0 2
33754: PPUSH
33755: LD_INT 1
33757: PPUSH
33758: LD_INT 1
33760: PPUSH
33761: CALL 41800 0 4
33765: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33766: LD_ADDR_VAR 0 5
33770: PUSH
33771: LD_EXP 103
33775: PPUSH
33776: LD_VAR 0 1
33780: PPUSH
33781: CALL 41150 0 2
33785: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33786: LD_EXP 104
33790: PUSH
33791: LD_VAR 0 5
33795: ARRAY
33796: PUSH
33797: LD_EXP 105
33801: LESS
33802: IFFALSE 33991
// begin for i := 1 to vehicles do
33804: LD_ADDR_VAR 0 4
33808: PUSH
33809: DOUBLE
33810: LD_INT 1
33812: DEC
33813: ST_TO_ADDR
33814: LD_VAR 0 2
33818: PUSH
33819: FOR_TO
33820: IFFALSE 33989
// begin if hackTanksCaptured [ index ] = hackLimit then
33822: LD_EXP 104
33826: PUSH
33827: LD_VAR 0 5
33831: ARRAY
33832: PUSH
33833: LD_EXP 105
33837: EQUAL
33838: IFFALSE 33842
// break ;
33840: GO 33989
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33842: LD_ADDR_EXP 107
33846: PUSH
33847: LD_EXP 107
33851: PPUSH
33852: LD_VAR 0 5
33856: PPUSH
33857: LD_EXP 107
33861: PUSH
33862: LD_VAR 0 5
33866: ARRAY
33867: PUSH
33868: LD_INT 1
33870: PLUS
33871: PPUSH
33872: CALL_OW 1
33876: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33877: LD_ADDR_EXP 104
33881: PUSH
33882: LD_EXP 104
33886: PPUSH
33887: LD_VAR 0 5
33891: PUSH
33892: LD_EXP 104
33896: PUSH
33897: LD_VAR 0 5
33901: ARRAY
33902: PUSH
33903: LD_INT 1
33905: PLUS
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PPUSH
33911: LD_VAR 0 2
33915: PUSH
33916: LD_VAR 0 4
33920: ARRAY
33921: PUSH
33922: LD_VAR 0 2
33926: PUSH
33927: LD_VAR 0 4
33931: ARRAY
33932: PPUSH
33933: CALL_OW 255
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PPUSH
33942: CALL 41365 0 3
33946: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33947: LD_VAR 0 2
33951: PUSH
33952: LD_VAR 0 4
33956: ARRAY
33957: PPUSH
33958: LD_VAR 0 1
33962: PPUSH
33963: CALL_OW 255
33967: PPUSH
33968: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33972: LD_VAR 0 2
33976: PUSH
33977: LD_VAR 0 4
33981: ARRAY
33982: PPUSH
33983: CALL_OW 141
// end ;
33987: GO 33819
33989: POP
33990: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33991: LD_VAR 0 1
33995: PPUSH
33996: LD_EXP 104
34000: PUSH
34001: LD_VAR 0 5
34005: ARRAY
34006: PUSH
34007: LD_INT 0
34009: PLUS
34010: PPUSH
34011: CALL_OW 505
// end ;
34015: LD_VAR 0 3
34019: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34020: LD_INT 0
34022: PPUSH
34023: PPUSH
34024: PPUSH
34025: PPUSH
// if not hack in hackTanks then
34026: LD_VAR 0 1
34030: PUSH
34031: LD_EXP 103
34035: IN
34036: NOT
34037: IFFALSE 34041
// exit ;
34039: GO 34281
// index := GetElementIndex ( hackTanks , hack ) ;
34041: LD_ADDR_VAR 0 4
34045: PUSH
34046: LD_EXP 103
34050: PPUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL 41150 0 2
34060: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34061: LD_ADDR_VAR 0 3
34065: PUSH
34066: DOUBLE
34067: LD_EXP 104
34071: PUSH
34072: LD_VAR 0 4
34076: ARRAY
34077: INC
34078: ST_TO_ADDR
34079: LD_INT 1
34081: PUSH
34082: FOR_DOWNTO
34083: IFFALSE 34255
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34085: LD_ADDR_VAR 0 5
34089: PUSH
34090: LD_EXP 104
34094: PUSH
34095: LD_VAR 0 4
34099: ARRAY
34100: PUSH
34101: LD_VAR 0 3
34105: ARRAY
34106: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34107: LD_VAR 0 5
34111: PUSH
34112: LD_INT 1
34114: ARRAY
34115: PPUSH
34116: CALL_OW 302
34120: NOT
34121: PUSH
34122: LD_VAR 0 5
34126: PUSH
34127: LD_INT 1
34129: ARRAY
34130: PPUSH
34131: CALL_OW 255
34135: PUSH
34136: LD_VAR 0 1
34140: PPUSH
34141: CALL_OW 255
34145: NONEQUAL
34146: OR
34147: IFFALSE 34253
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34149: LD_VAR 0 5
34153: PUSH
34154: LD_INT 1
34156: ARRAY
34157: PPUSH
34158: CALL_OW 305
34162: PUSH
34163: LD_VAR 0 5
34167: PUSH
34168: LD_INT 1
34170: ARRAY
34171: PPUSH
34172: CALL_OW 255
34176: PUSH
34177: LD_VAR 0 1
34181: PPUSH
34182: CALL_OW 255
34186: EQUAL
34187: AND
34188: IFFALSE 34212
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34190: LD_VAR 0 5
34194: PUSH
34195: LD_INT 1
34197: ARRAY
34198: PPUSH
34199: LD_VAR 0 5
34203: PUSH
34204: LD_INT 2
34206: ARRAY
34207: PPUSH
34208: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34212: LD_ADDR_EXP 104
34216: PUSH
34217: LD_EXP 104
34221: PPUSH
34222: LD_VAR 0 4
34226: PPUSH
34227: LD_EXP 104
34231: PUSH
34232: LD_VAR 0 4
34236: ARRAY
34237: PPUSH
34238: LD_VAR 0 3
34242: PPUSH
34243: CALL_OW 3
34247: PPUSH
34248: CALL_OW 1
34252: ST_TO_ADDR
// end ; end ;
34253: GO 34082
34255: POP
34256: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34257: LD_VAR 0 1
34261: PPUSH
34262: LD_EXP 104
34266: PUSH
34267: LD_VAR 0 4
34271: ARRAY
34272: PUSH
34273: LD_INT 0
34275: PLUS
34276: PPUSH
34277: CALL_OW 505
// end ;
34281: LD_VAR 0 2
34285: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34286: LD_INT 0
34288: PPUSH
34289: PPUSH
34290: PPUSH
34291: PPUSH
// if not hack in hackTanks then
34292: LD_VAR 0 1
34296: PUSH
34297: LD_EXP 103
34301: IN
34302: NOT
34303: IFFALSE 34307
// exit ;
34305: GO 34392
// index := GetElementIndex ( hackTanks , hack ) ;
34307: LD_ADDR_VAR 0 5
34311: PUSH
34312: LD_EXP 103
34316: PPUSH
34317: LD_VAR 0 1
34321: PPUSH
34322: CALL 41150 0 2
34326: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34327: LD_ADDR_VAR 0 4
34331: PUSH
34332: DOUBLE
34333: LD_INT 1
34335: DEC
34336: ST_TO_ADDR
34337: LD_EXP 104
34341: PUSH
34342: LD_VAR 0 5
34346: ARRAY
34347: PUSH
34348: FOR_TO
34349: IFFALSE 34390
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34351: LD_EXP 104
34355: PUSH
34356: LD_VAR 0 5
34360: ARRAY
34361: PUSH
34362: LD_VAR 0 4
34366: ARRAY
34367: PUSH
34368: LD_INT 1
34370: ARRAY
34371: PUSH
34372: LD_VAR 0 2
34376: EQUAL
34377: IFFALSE 34388
// KillUnit ( vehicle ) ;
34379: LD_VAR 0 2
34383: PPUSH
34384: CALL_OW 66
34388: GO 34348
34390: POP
34391: POP
// end ;
34392: LD_VAR 0 3
34396: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34397: LD_EXP 108
34401: NOT
34402: IFFALSE 34437
34404: GO 34406
34406: DISABLE
// begin initMiner := true ;
34407: LD_ADDR_EXP 108
34411: PUSH
34412: LD_INT 1
34414: ST_TO_ADDR
// minersList := [ ] ;
34415: LD_ADDR_EXP 109
34419: PUSH
34420: EMPTY
34421: ST_TO_ADDR
// minerMinesList := [ ] ;
34422: LD_ADDR_EXP 110
34426: PUSH
34427: EMPTY
34428: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34429: LD_ADDR_EXP 111
34433: PUSH
34434: LD_INT 5
34436: ST_TO_ADDR
// end ;
34437: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34438: LD_EXP 108
34442: PUSH
34443: LD_INT 34
34445: PUSH
34446: LD_INT 81
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PPUSH
34453: CALL_OW 69
34457: AND
34458: IFFALSE 34919
34460: GO 34462
34462: DISABLE
34463: LD_INT 0
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
// begin enable ;
34469: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34470: LD_ADDR_VAR 0 1
34474: PUSH
34475: LD_INT 34
34477: PUSH
34478: LD_INT 81
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PPUSH
34485: CALL_OW 69
34489: PUSH
34490: FOR_IN
34491: IFFALSE 34563
// begin if not i in minersList then
34493: LD_VAR 0 1
34497: PUSH
34498: LD_EXP 109
34502: IN
34503: NOT
34504: IFFALSE 34561
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34506: LD_ADDR_EXP 109
34510: PUSH
34511: LD_EXP 109
34515: PPUSH
34516: LD_EXP 109
34520: PUSH
34521: LD_INT 1
34523: PLUS
34524: PPUSH
34525: LD_VAR 0 1
34529: PPUSH
34530: CALL_OW 1
34534: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34535: LD_ADDR_EXP 110
34539: PUSH
34540: LD_EXP 110
34544: PPUSH
34545: LD_EXP 110
34549: PUSH
34550: LD_INT 1
34552: PLUS
34553: PPUSH
34554: EMPTY
34555: PPUSH
34556: CALL_OW 1
34560: ST_TO_ADDR
// end end ;
34561: GO 34490
34563: POP
34564: POP
// for i := minerMinesList downto 1 do
34565: LD_ADDR_VAR 0 1
34569: PUSH
34570: DOUBLE
34571: LD_EXP 110
34575: INC
34576: ST_TO_ADDR
34577: LD_INT 1
34579: PUSH
34580: FOR_DOWNTO
34581: IFFALSE 34917
// begin if IsLive ( minersList [ i ] ) then
34583: LD_EXP 109
34587: PUSH
34588: LD_VAR 0 1
34592: ARRAY
34593: PPUSH
34594: CALL_OW 300
34598: IFFALSE 34626
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34600: LD_EXP 109
34604: PUSH
34605: LD_VAR 0 1
34609: ARRAY
34610: PPUSH
34611: LD_EXP 110
34615: PUSH
34616: LD_VAR 0 1
34620: ARRAY
34621: PPUSH
34622: CALL_OW 505
// if not minerMinesList [ i ] then
34626: LD_EXP 110
34630: PUSH
34631: LD_VAR 0 1
34635: ARRAY
34636: NOT
34637: IFFALSE 34641
// continue ;
34639: GO 34580
// for j := minerMinesList [ i ] downto 1 do
34641: LD_ADDR_VAR 0 2
34645: PUSH
34646: DOUBLE
34647: LD_EXP 110
34651: PUSH
34652: LD_VAR 0 1
34656: ARRAY
34657: INC
34658: ST_TO_ADDR
34659: LD_INT 1
34661: PUSH
34662: FOR_DOWNTO
34663: IFFALSE 34913
// begin side := GetSide ( minersList [ i ] ) ;
34665: LD_ADDR_VAR 0 3
34669: PUSH
34670: LD_EXP 109
34674: PUSH
34675: LD_VAR 0 1
34679: ARRAY
34680: PPUSH
34681: CALL_OW 255
34685: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34686: LD_ADDR_VAR 0 4
34690: PUSH
34691: LD_EXP 110
34695: PUSH
34696: LD_VAR 0 1
34700: ARRAY
34701: PUSH
34702: LD_VAR 0 2
34706: ARRAY
34707: PUSH
34708: LD_INT 1
34710: ARRAY
34711: PPUSH
34712: LD_EXP 110
34716: PUSH
34717: LD_VAR 0 1
34721: ARRAY
34722: PUSH
34723: LD_VAR 0 2
34727: ARRAY
34728: PUSH
34729: LD_INT 2
34731: ARRAY
34732: PPUSH
34733: CALL_OW 428
34737: ST_TO_ADDR
// if not tmp then
34738: LD_VAR 0 4
34742: NOT
34743: IFFALSE 34747
// continue ;
34745: GO 34662
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34747: LD_VAR 0 4
34751: PUSH
34752: LD_INT 81
34754: PUSH
34755: LD_VAR 0 3
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PPUSH
34764: CALL_OW 69
34768: IN
34769: PUSH
34770: LD_EXP 110
34774: PUSH
34775: LD_VAR 0 1
34779: ARRAY
34780: PUSH
34781: LD_VAR 0 2
34785: ARRAY
34786: PUSH
34787: LD_INT 1
34789: ARRAY
34790: PPUSH
34791: LD_EXP 110
34795: PUSH
34796: LD_VAR 0 1
34800: ARRAY
34801: PUSH
34802: LD_VAR 0 2
34806: ARRAY
34807: PUSH
34808: LD_INT 2
34810: ARRAY
34811: PPUSH
34812: CALL_OW 458
34816: AND
34817: IFFALSE 34911
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34819: LD_EXP 110
34823: PUSH
34824: LD_VAR 0 1
34828: ARRAY
34829: PUSH
34830: LD_VAR 0 2
34834: ARRAY
34835: PUSH
34836: LD_INT 1
34838: ARRAY
34839: PPUSH
34840: LD_EXP 110
34844: PUSH
34845: LD_VAR 0 1
34849: ARRAY
34850: PUSH
34851: LD_VAR 0 2
34855: ARRAY
34856: PUSH
34857: LD_INT 2
34859: ARRAY
34860: PPUSH
34861: LD_VAR 0 3
34865: PPUSH
34866: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34870: LD_ADDR_EXP 110
34874: PUSH
34875: LD_EXP 110
34879: PPUSH
34880: LD_VAR 0 1
34884: PPUSH
34885: LD_EXP 110
34889: PUSH
34890: LD_VAR 0 1
34894: ARRAY
34895: PPUSH
34896: LD_VAR 0 2
34900: PPUSH
34901: CALL_OW 3
34905: PPUSH
34906: CALL_OW 1
34910: ST_TO_ADDR
// end ; end ;
34911: GO 34662
34913: POP
34914: POP
// end ;
34915: GO 34580
34917: POP
34918: POP
// end ;
34919: PPOPN 4
34921: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34922: LD_INT 0
34924: PPUSH
34925: PPUSH
// result := false ;
34926: LD_ADDR_VAR 0 4
34930: PUSH
34931: LD_INT 0
34933: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34934: LD_VAR 0 1
34938: PPUSH
34939: CALL_OW 264
34943: PUSH
34944: LD_INT 81
34946: EQUAL
34947: NOT
34948: IFFALSE 34952
// exit ;
34950: GO 35192
// index := GetElementIndex ( minersList , unit ) ;
34952: LD_ADDR_VAR 0 5
34956: PUSH
34957: LD_EXP 109
34961: PPUSH
34962: LD_VAR 0 1
34966: PPUSH
34967: CALL 41150 0 2
34971: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34972: LD_EXP 110
34976: PUSH
34977: LD_VAR 0 5
34981: ARRAY
34982: PUSH
34983: LD_EXP 111
34987: GREATEREQUAL
34988: IFFALSE 34992
// exit ;
34990: GO 35192
// ComMoveXY ( unit , x , y ) ;
34992: LD_VAR 0 1
34996: PPUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: LD_VAR 0 3
35006: PPUSH
35007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35011: LD_INT 35
35013: PPUSH
35014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35018: LD_VAR 0 1
35022: PPUSH
35023: LD_VAR 0 2
35027: PPUSH
35028: LD_VAR 0 3
35032: PPUSH
35033: CALL 72891 0 3
35037: NOT
35038: PUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL_OW 314
35048: AND
35049: IFFALSE 35053
// exit ;
35051: GO 35192
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35053: LD_VAR 0 2
35057: PPUSH
35058: LD_VAR 0 3
35062: PPUSH
35063: CALL_OW 428
35067: PUSH
35068: LD_VAR 0 1
35072: EQUAL
35073: PUSH
35074: LD_VAR 0 1
35078: PPUSH
35079: CALL_OW 314
35083: NOT
35084: AND
35085: IFFALSE 35011
// PlaySoundXY ( x , y , PlantMine ) ;
35087: LD_VAR 0 2
35091: PPUSH
35092: LD_VAR 0 3
35096: PPUSH
35097: LD_STRING PlantMine
35099: PPUSH
35100: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35104: LD_VAR 0 2
35108: PPUSH
35109: LD_VAR 0 3
35113: PPUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: CALL_OW 255
35123: PPUSH
35124: LD_INT 0
35126: PPUSH
35127: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35131: LD_ADDR_EXP 110
35135: PUSH
35136: LD_EXP 110
35140: PPUSH
35141: LD_VAR 0 5
35145: PUSH
35146: LD_EXP 110
35150: PUSH
35151: LD_VAR 0 5
35155: ARRAY
35156: PUSH
35157: LD_INT 1
35159: PLUS
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PPUSH
35165: LD_VAR 0 2
35169: PUSH
35170: LD_VAR 0 3
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PPUSH
35179: CALL 41365 0 3
35183: ST_TO_ADDR
// result := true ;
35184: LD_ADDR_VAR 0 4
35188: PUSH
35189: LD_INT 1
35191: ST_TO_ADDR
// end ;
35192: LD_VAR 0 4
35196: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35197: LD_INT 0
35199: PPUSH
35200: PPUSH
35201: PPUSH
// if not unit in minersList then
35202: LD_VAR 0 1
35206: PUSH
35207: LD_EXP 109
35211: IN
35212: NOT
35213: IFFALSE 35217
// exit ;
35215: GO 35609
// index := GetElementIndex ( minersList , unit ) ;
35217: LD_ADDR_VAR 0 6
35221: PUSH
35222: LD_EXP 109
35226: PPUSH
35227: LD_VAR 0 1
35231: PPUSH
35232: CALL 41150 0 2
35236: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35237: LD_ADDR_VAR 0 5
35241: PUSH
35242: DOUBLE
35243: LD_EXP 110
35247: PUSH
35248: LD_VAR 0 6
35252: ARRAY
35253: INC
35254: ST_TO_ADDR
35255: LD_INT 1
35257: PUSH
35258: FOR_DOWNTO
35259: IFFALSE 35420
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35261: LD_EXP 110
35265: PUSH
35266: LD_VAR 0 6
35270: ARRAY
35271: PUSH
35272: LD_VAR 0 5
35276: ARRAY
35277: PUSH
35278: LD_INT 1
35280: ARRAY
35281: PUSH
35282: LD_VAR 0 2
35286: EQUAL
35287: PUSH
35288: LD_EXP 110
35292: PUSH
35293: LD_VAR 0 6
35297: ARRAY
35298: PUSH
35299: LD_VAR 0 5
35303: ARRAY
35304: PUSH
35305: LD_INT 2
35307: ARRAY
35308: PUSH
35309: LD_VAR 0 3
35313: EQUAL
35314: AND
35315: IFFALSE 35418
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35317: LD_EXP 110
35321: PUSH
35322: LD_VAR 0 6
35326: ARRAY
35327: PUSH
35328: LD_VAR 0 5
35332: ARRAY
35333: PUSH
35334: LD_INT 1
35336: ARRAY
35337: PPUSH
35338: LD_EXP 110
35342: PUSH
35343: LD_VAR 0 6
35347: ARRAY
35348: PUSH
35349: LD_VAR 0 5
35353: ARRAY
35354: PUSH
35355: LD_INT 2
35357: ARRAY
35358: PPUSH
35359: LD_VAR 0 1
35363: PPUSH
35364: CALL_OW 255
35368: PPUSH
35369: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35373: LD_ADDR_EXP 110
35377: PUSH
35378: LD_EXP 110
35382: PPUSH
35383: LD_VAR 0 6
35387: PPUSH
35388: LD_EXP 110
35392: PUSH
35393: LD_VAR 0 6
35397: ARRAY
35398: PPUSH
35399: LD_VAR 0 5
35403: PPUSH
35404: CALL_OW 3
35408: PPUSH
35409: CALL_OW 1
35413: ST_TO_ADDR
// exit ;
35414: POP
35415: POP
35416: GO 35609
// end ; end ;
35418: GO 35258
35420: POP
35421: POP
// for i := minerMinesList [ index ] downto 1 do
35422: LD_ADDR_VAR 0 5
35426: PUSH
35427: DOUBLE
35428: LD_EXP 110
35432: PUSH
35433: LD_VAR 0 6
35437: ARRAY
35438: INC
35439: ST_TO_ADDR
35440: LD_INT 1
35442: PUSH
35443: FOR_DOWNTO
35444: IFFALSE 35607
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35446: LD_EXP 110
35450: PUSH
35451: LD_VAR 0 6
35455: ARRAY
35456: PUSH
35457: LD_VAR 0 5
35461: ARRAY
35462: PUSH
35463: LD_INT 1
35465: ARRAY
35466: PPUSH
35467: LD_EXP 110
35471: PUSH
35472: LD_VAR 0 6
35476: ARRAY
35477: PUSH
35478: LD_VAR 0 5
35482: ARRAY
35483: PUSH
35484: LD_INT 2
35486: ARRAY
35487: PPUSH
35488: LD_VAR 0 2
35492: PPUSH
35493: LD_VAR 0 3
35497: PPUSH
35498: CALL_OW 298
35502: PUSH
35503: LD_INT 6
35505: LESS
35506: IFFALSE 35605
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35508: LD_EXP 110
35512: PUSH
35513: LD_VAR 0 6
35517: ARRAY
35518: PUSH
35519: LD_VAR 0 5
35523: ARRAY
35524: PUSH
35525: LD_INT 1
35527: ARRAY
35528: PPUSH
35529: LD_EXP 110
35533: PUSH
35534: LD_VAR 0 6
35538: ARRAY
35539: PUSH
35540: LD_VAR 0 5
35544: ARRAY
35545: PUSH
35546: LD_INT 2
35548: ARRAY
35549: PPUSH
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 255
35559: PPUSH
35560: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35564: LD_ADDR_EXP 110
35568: PUSH
35569: LD_EXP 110
35573: PPUSH
35574: LD_VAR 0 6
35578: PPUSH
35579: LD_EXP 110
35583: PUSH
35584: LD_VAR 0 6
35588: ARRAY
35589: PPUSH
35590: LD_VAR 0 5
35594: PPUSH
35595: CALL_OW 3
35599: PPUSH
35600: CALL_OW 1
35604: ST_TO_ADDR
// end ; end ;
35605: GO 35443
35607: POP
35608: POP
// end ;
35609: LD_VAR 0 4
35613: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35614: LD_INT 0
35616: PPUSH
35617: PPUSH
35618: PPUSH
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
35623: PPUSH
35624: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35625: LD_VAR 0 1
35629: PPUSH
35630: CALL_OW 264
35634: PUSH
35635: LD_INT 81
35637: EQUAL
35638: NOT
35639: PUSH
35640: LD_VAR 0 1
35644: PUSH
35645: LD_EXP 109
35649: IN
35650: NOT
35651: OR
35652: IFFALSE 35656
// exit ;
35654: GO 35978
// index := GetElementIndex ( minersList , unit ) ;
35656: LD_ADDR_VAR 0 6
35660: PUSH
35661: LD_EXP 109
35665: PPUSH
35666: LD_VAR 0 1
35670: PPUSH
35671: CALL 41150 0 2
35675: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35676: LD_ADDR_VAR 0 8
35680: PUSH
35681: LD_EXP 111
35685: PUSH
35686: LD_EXP 110
35690: PUSH
35691: LD_VAR 0 6
35695: ARRAY
35696: MINUS
35697: ST_TO_ADDR
// if not minesFreeAmount then
35698: LD_VAR 0 8
35702: NOT
35703: IFFALSE 35707
// exit ;
35705: GO 35978
// tmp := [ ] ;
35707: LD_ADDR_VAR 0 7
35711: PUSH
35712: EMPTY
35713: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35714: LD_ADDR_VAR 0 5
35718: PUSH
35719: DOUBLE
35720: LD_INT 1
35722: DEC
35723: ST_TO_ADDR
35724: LD_VAR 0 8
35728: PUSH
35729: FOR_TO
35730: IFFALSE 35925
// begin _d := rand ( 0 , 5 ) ;
35732: LD_ADDR_VAR 0 11
35736: PUSH
35737: LD_INT 0
35739: PPUSH
35740: LD_INT 5
35742: PPUSH
35743: CALL_OW 12
35747: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35748: LD_ADDR_VAR 0 12
35752: PUSH
35753: LD_INT 2
35755: PPUSH
35756: LD_INT 6
35758: PPUSH
35759: CALL_OW 12
35763: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35764: LD_ADDR_VAR 0 9
35768: PUSH
35769: LD_VAR 0 2
35773: PPUSH
35774: LD_VAR 0 11
35778: PPUSH
35779: LD_VAR 0 12
35783: PPUSH
35784: CALL_OW 272
35788: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35789: LD_ADDR_VAR 0 10
35793: PUSH
35794: LD_VAR 0 3
35798: PPUSH
35799: LD_VAR 0 11
35803: PPUSH
35804: LD_VAR 0 12
35808: PPUSH
35809: CALL_OW 273
35813: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35814: LD_VAR 0 9
35818: PPUSH
35819: LD_VAR 0 10
35823: PPUSH
35824: CALL_OW 488
35828: PUSH
35829: LD_VAR 0 9
35833: PUSH
35834: LD_VAR 0 10
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_VAR 0 7
35847: IN
35848: NOT
35849: AND
35850: PUSH
35851: LD_VAR 0 9
35855: PPUSH
35856: LD_VAR 0 10
35860: PPUSH
35861: CALL_OW 458
35865: NOT
35866: AND
35867: IFFALSE 35909
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35869: LD_ADDR_VAR 0 7
35873: PUSH
35874: LD_VAR 0 7
35878: PPUSH
35879: LD_VAR 0 7
35883: PUSH
35884: LD_INT 1
35886: PLUS
35887: PPUSH
35888: LD_VAR 0 9
35892: PUSH
35893: LD_VAR 0 10
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PPUSH
35902: CALL_OW 1
35906: ST_TO_ADDR
35907: GO 35923
// i := i - 1 ;
35909: LD_ADDR_VAR 0 5
35913: PUSH
35914: LD_VAR 0 5
35918: PUSH
35919: LD_INT 1
35921: MINUS
35922: ST_TO_ADDR
// end ;
35923: GO 35729
35925: POP
35926: POP
// for i in tmp do
35927: LD_ADDR_VAR 0 5
35931: PUSH
35932: LD_VAR 0 7
35936: PUSH
35937: FOR_IN
35938: IFFALSE 35976
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35940: LD_VAR 0 1
35944: PPUSH
35945: LD_VAR 0 5
35949: PUSH
35950: LD_INT 1
35952: ARRAY
35953: PPUSH
35954: LD_VAR 0 5
35958: PUSH
35959: LD_INT 2
35961: ARRAY
35962: PPUSH
35963: CALL 34922 0 3
35967: NOT
35968: IFFALSE 35974
// exit ;
35970: POP
35971: POP
35972: GO 35978
35974: GO 35937
35976: POP
35977: POP
// end ;
35978: LD_VAR 0 4
35982: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35983: LD_INT 0
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
// if not GetClass ( unit ) = class_sniper then
35992: LD_VAR 0 1
35996: PPUSH
35997: CALL_OW 257
36001: PUSH
36002: LD_INT 5
36004: EQUAL
36005: NOT
36006: IFFALSE 36010
// exit ;
36008: GO 36398
// dist := 8 ;
36010: LD_ADDR_VAR 0 5
36014: PUSH
36015: LD_INT 8
36017: ST_TO_ADDR
// viewRange := 12 ;
36018: LD_ADDR_VAR 0 7
36022: PUSH
36023: LD_INT 12
36025: ST_TO_ADDR
// side := GetSide ( unit ) ;
36026: LD_ADDR_VAR 0 6
36030: PUSH
36031: LD_VAR 0 1
36035: PPUSH
36036: CALL_OW 255
36040: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36041: LD_INT 61
36043: PPUSH
36044: LD_VAR 0 6
36048: PPUSH
36049: CALL_OW 321
36053: PUSH
36054: LD_INT 2
36056: EQUAL
36057: IFFALSE 36067
// viewRange := 16 ;
36059: LD_ADDR_VAR 0 7
36063: PUSH
36064: LD_INT 16
36066: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36067: LD_VAR 0 1
36071: PPUSH
36072: LD_VAR 0 2
36076: PPUSH
36077: LD_VAR 0 3
36081: PPUSH
36082: CALL_OW 297
36086: PUSH
36087: LD_VAR 0 5
36091: GREATER
36092: IFFALSE 36171
// begin ComMoveXY ( unit , x , y ) ;
36094: LD_VAR 0 1
36098: PPUSH
36099: LD_VAR 0 2
36103: PPUSH
36104: LD_VAR 0 3
36108: PPUSH
36109: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36113: LD_INT 35
36115: PPUSH
36116: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36120: LD_VAR 0 1
36124: PPUSH
36125: LD_VAR 0 2
36129: PPUSH
36130: LD_VAR 0 3
36134: PPUSH
36135: CALL 72891 0 3
36139: NOT
36140: IFFALSE 36144
// exit ;
36142: GO 36398
// until GetDistUnitXY ( unit , x , y ) < dist ;
36144: LD_VAR 0 1
36148: PPUSH
36149: LD_VAR 0 2
36153: PPUSH
36154: LD_VAR 0 3
36158: PPUSH
36159: CALL_OW 297
36163: PUSH
36164: LD_VAR 0 5
36168: LESS
36169: IFFALSE 36113
// end ; ComTurnXY ( unit , x , y ) ;
36171: LD_VAR 0 1
36175: PPUSH
36176: LD_VAR 0 2
36180: PPUSH
36181: LD_VAR 0 3
36185: PPUSH
36186: CALL_OW 118
// wait ( 5 ) ;
36190: LD_INT 5
36192: PPUSH
36193: CALL_OW 67
// _d := GetDir ( unit ) ;
36197: LD_ADDR_VAR 0 10
36201: PUSH
36202: LD_VAR 0 1
36206: PPUSH
36207: CALL_OW 254
36211: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36212: LD_ADDR_VAR 0 8
36216: PUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 250
36226: PPUSH
36227: LD_VAR 0 10
36231: PPUSH
36232: LD_VAR 0 5
36236: PPUSH
36237: CALL_OW 272
36241: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36242: LD_ADDR_VAR 0 9
36246: PUSH
36247: LD_VAR 0 1
36251: PPUSH
36252: CALL_OW 251
36256: PPUSH
36257: LD_VAR 0 10
36261: PPUSH
36262: LD_VAR 0 5
36266: PPUSH
36267: CALL_OW 273
36271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36272: LD_VAR 0 8
36276: PPUSH
36277: LD_VAR 0 9
36281: PPUSH
36282: CALL_OW 488
36286: NOT
36287: IFFALSE 36291
// exit ;
36289: GO 36398
// ComAnimCustom ( unit , 1 ) ;
36291: LD_VAR 0 1
36295: PPUSH
36296: LD_INT 1
36298: PPUSH
36299: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36303: LD_VAR 0 8
36307: PPUSH
36308: LD_VAR 0 9
36312: PPUSH
36313: LD_VAR 0 6
36317: PPUSH
36318: LD_VAR 0 7
36322: PPUSH
36323: CALL_OW 330
// repeat wait ( 1 ) ;
36327: LD_INT 1
36329: PPUSH
36330: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36334: LD_VAR 0 1
36338: PPUSH
36339: CALL_OW 316
36343: PUSH
36344: LD_VAR 0 1
36348: PPUSH
36349: CALL_OW 314
36353: OR
36354: PUSH
36355: LD_VAR 0 1
36359: PPUSH
36360: CALL_OW 302
36364: NOT
36365: OR
36366: PUSH
36367: LD_VAR 0 1
36371: PPUSH
36372: CALL_OW 301
36376: OR
36377: IFFALSE 36327
// RemoveSeeing ( _x , _y , side ) ;
36379: LD_VAR 0 8
36383: PPUSH
36384: LD_VAR 0 9
36388: PPUSH
36389: LD_VAR 0 6
36393: PPUSH
36394: CALL_OW 331
// end ; end_of_file
36398: LD_VAR 0 4
36402: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36403: LD_INT 0
36405: PPUSH
36406: PPUSH
// if exist_mode then
36407: LD_VAR 0 2
36411: IFFALSE 36436
// unit := CreateCharacter ( prefix & ident ) else
36413: LD_ADDR_VAR 0 5
36417: PUSH
36418: LD_VAR 0 3
36422: PUSH
36423: LD_VAR 0 1
36427: STR
36428: PPUSH
36429: CALL_OW 34
36433: ST_TO_ADDR
36434: GO 36451
// unit := NewCharacter ( ident ) ;
36436: LD_ADDR_VAR 0 5
36440: PUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 25
36450: ST_TO_ADDR
// result := unit ;
36451: LD_ADDR_VAR 0 4
36455: PUSH
36456: LD_VAR 0 5
36460: ST_TO_ADDR
// end ;
36461: LD_VAR 0 4
36465: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36466: LD_INT 0
36468: PPUSH
36469: PPUSH
// if not side or not nation then
36470: LD_VAR 0 1
36474: NOT
36475: PUSH
36476: LD_VAR 0 2
36480: NOT
36481: OR
36482: IFFALSE 36486
// exit ;
36484: GO 37254
// case nation of nation_american :
36486: LD_VAR 0 2
36490: PUSH
36491: LD_INT 1
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36713
36499: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36500: LD_ADDR_VAR 0 4
36504: PUSH
36505: LD_INT 35
36507: PUSH
36508: LD_INT 45
36510: PUSH
36511: LD_INT 46
36513: PUSH
36514: LD_INT 47
36516: PUSH
36517: LD_INT 82
36519: PUSH
36520: LD_INT 83
36522: PUSH
36523: LD_INT 84
36525: PUSH
36526: LD_INT 85
36528: PUSH
36529: LD_INT 86
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: LD_INT 6
36540: PUSH
36541: LD_INT 15
36543: PUSH
36544: LD_INT 16
36546: PUSH
36547: LD_INT 7
36549: PUSH
36550: LD_INT 12
36552: PUSH
36553: LD_INT 13
36555: PUSH
36556: LD_INT 10
36558: PUSH
36559: LD_INT 14
36561: PUSH
36562: LD_INT 20
36564: PUSH
36565: LD_INT 21
36567: PUSH
36568: LD_INT 22
36570: PUSH
36571: LD_INT 25
36573: PUSH
36574: LD_INT 32
36576: PUSH
36577: LD_INT 27
36579: PUSH
36580: LD_INT 36
36582: PUSH
36583: LD_INT 69
36585: PUSH
36586: LD_INT 39
36588: PUSH
36589: LD_INT 34
36591: PUSH
36592: LD_INT 40
36594: PUSH
36595: LD_INT 48
36597: PUSH
36598: LD_INT 49
36600: PUSH
36601: LD_INT 50
36603: PUSH
36604: LD_INT 51
36606: PUSH
36607: LD_INT 52
36609: PUSH
36610: LD_INT 53
36612: PUSH
36613: LD_INT 54
36615: PUSH
36616: LD_INT 55
36618: PUSH
36619: LD_INT 56
36621: PUSH
36622: LD_INT 57
36624: PUSH
36625: LD_INT 58
36627: PUSH
36628: LD_INT 59
36630: PUSH
36631: LD_INT 60
36633: PUSH
36634: LD_INT 61
36636: PUSH
36637: LD_INT 62
36639: PUSH
36640: LD_INT 80
36642: PUSH
36643: LD_INT 82
36645: PUSH
36646: LD_INT 83
36648: PUSH
36649: LD_INT 84
36651: PUSH
36652: LD_INT 85
36654: PUSH
36655: LD_INT 86
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
36711: GO 37178
36713: LD_INT 2
36715: DOUBLE
36716: EQUAL
36717: IFTRUE 36721
36719: GO 36947
36721: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36722: LD_ADDR_VAR 0 4
36726: PUSH
36727: LD_INT 35
36729: PUSH
36730: LD_INT 45
36732: PUSH
36733: LD_INT 46
36735: PUSH
36736: LD_INT 47
36738: PUSH
36739: LD_INT 82
36741: PUSH
36742: LD_INT 83
36744: PUSH
36745: LD_INT 84
36747: PUSH
36748: LD_INT 85
36750: PUSH
36751: LD_INT 87
36753: PUSH
36754: LD_INT 70
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: LD_INT 11
36762: PUSH
36763: LD_INT 3
36765: PUSH
36766: LD_INT 4
36768: PUSH
36769: LD_INT 5
36771: PUSH
36772: LD_INT 6
36774: PUSH
36775: LD_INT 15
36777: PUSH
36778: LD_INT 18
36780: PUSH
36781: LD_INT 7
36783: PUSH
36784: LD_INT 17
36786: PUSH
36787: LD_INT 8
36789: PUSH
36790: LD_INT 20
36792: PUSH
36793: LD_INT 21
36795: PUSH
36796: LD_INT 22
36798: PUSH
36799: LD_INT 72
36801: PUSH
36802: LD_INT 26
36804: PUSH
36805: LD_INT 69
36807: PUSH
36808: LD_INT 39
36810: PUSH
36811: LD_INT 40
36813: PUSH
36814: LD_INT 41
36816: PUSH
36817: LD_INT 42
36819: PUSH
36820: LD_INT 43
36822: PUSH
36823: LD_INT 48
36825: PUSH
36826: LD_INT 49
36828: PUSH
36829: LD_INT 50
36831: PUSH
36832: LD_INT 51
36834: PUSH
36835: LD_INT 52
36837: PUSH
36838: LD_INT 53
36840: PUSH
36841: LD_INT 54
36843: PUSH
36844: LD_INT 55
36846: PUSH
36847: LD_INT 56
36849: PUSH
36850: LD_INT 60
36852: PUSH
36853: LD_INT 61
36855: PUSH
36856: LD_INT 62
36858: PUSH
36859: LD_INT 66
36861: PUSH
36862: LD_INT 67
36864: PUSH
36865: LD_INT 68
36867: PUSH
36868: LD_INT 81
36870: PUSH
36871: LD_INT 82
36873: PUSH
36874: LD_INT 83
36876: PUSH
36877: LD_INT 84
36879: PUSH
36880: LD_INT 85
36882: PUSH
36883: LD_INT 87
36885: PUSH
36886: LD_INT 88
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: ST_TO_ADDR
36945: GO 37178
36947: LD_INT 3
36949: DOUBLE
36950: EQUAL
36951: IFTRUE 36955
36953: GO 37177
36955: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36956: LD_ADDR_VAR 0 4
36960: PUSH
36961: LD_INT 46
36963: PUSH
36964: LD_INT 47
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 82
36975: PUSH
36976: LD_INT 83
36978: PUSH
36979: LD_INT 84
36981: PUSH
36982: LD_INT 85
36984: PUSH
36985: LD_INT 86
36987: PUSH
36988: LD_INT 11
36990: PUSH
36991: LD_INT 9
36993: PUSH
36994: LD_INT 20
36996: PUSH
36997: LD_INT 19
36999: PUSH
37000: LD_INT 21
37002: PUSH
37003: LD_INT 24
37005: PUSH
37006: LD_INT 22
37008: PUSH
37009: LD_INT 25
37011: PUSH
37012: LD_INT 28
37014: PUSH
37015: LD_INT 29
37017: PUSH
37018: LD_INT 30
37020: PUSH
37021: LD_INT 31
37023: PUSH
37024: LD_INT 37
37026: PUSH
37027: LD_INT 38
37029: PUSH
37030: LD_INT 32
37032: PUSH
37033: LD_INT 27
37035: PUSH
37036: LD_INT 33
37038: PUSH
37039: LD_INT 69
37041: PUSH
37042: LD_INT 39
37044: PUSH
37045: LD_INT 34
37047: PUSH
37048: LD_INT 40
37050: PUSH
37051: LD_INT 71
37053: PUSH
37054: LD_INT 23
37056: PUSH
37057: LD_INT 44
37059: PUSH
37060: LD_INT 48
37062: PUSH
37063: LD_INT 49
37065: PUSH
37066: LD_INT 50
37068: PUSH
37069: LD_INT 51
37071: PUSH
37072: LD_INT 52
37074: PUSH
37075: LD_INT 53
37077: PUSH
37078: LD_INT 54
37080: PUSH
37081: LD_INT 55
37083: PUSH
37084: LD_INT 56
37086: PUSH
37087: LD_INT 57
37089: PUSH
37090: LD_INT 58
37092: PUSH
37093: LD_INT 59
37095: PUSH
37096: LD_INT 63
37098: PUSH
37099: LD_INT 64
37101: PUSH
37102: LD_INT 65
37104: PUSH
37105: LD_INT 82
37107: PUSH
37108: LD_INT 83
37110: PUSH
37111: LD_INT 84
37113: PUSH
37114: LD_INT 85
37116: PUSH
37117: LD_INT 86
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
37175: GO 37178
37177: POP
// if state > - 1 and state < 3 then
37178: LD_VAR 0 3
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: GREATER
37187: PUSH
37188: LD_VAR 0 3
37192: PUSH
37193: LD_INT 3
37195: LESS
37196: AND
37197: IFFALSE 37254
// for i in result do
37199: LD_ADDR_VAR 0 5
37203: PUSH
37204: LD_VAR 0 4
37208: PUSH
37209: FOR_IN
37210: IFFALSE 37252
// if GetTech ( i , side ) <> state then
37212: LD_VAR 0 5
37216: PPUSH
37217: LD_VAR 0 1
37221: PPUSH
37222: CALL_OW 321
37226: PUSH
37227: LD_VAR 0 3
37231: NONEQUAL
37232: IFFALSE 37250
// result := result diff i ;
37234: LD_ADDR_VAR 0 4
37238: PUSH
37239: LD_VAR 0 4
37243: PUSH
37244: LD_VAR 0 5
37248: DIFF
37249: ST_TO_ADDR
37250: GO 37209
37252: POP
37253: POP
// end ;
37254: LD_VAR 0 4
37258: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37259: LD_INT 0
37261: PPUSH
37262: PPUSH
37263: PPUSH
// result := true ;
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_INT 1
37271: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37272: LD_ADDR_VAR 0 5
37276: PUSH
37277: LD_VAR 0 2
37281: PPUSH
37282: CALL_OW 480
37286: ST_TO_ADDR
// if not tmp then
37287: LD_VAR 0 5
37291: NOT
37292: IFFALSE 37296
// exit ;
37294: GO 37345
// for i in tmp do
37296: LD_ADDR_VAR 0 4
37300: PUSH
37301: LD_VAR 0 5
37305: PUSH
37306: FOR_IN
37307: IFFALSE 37343
// if GetTech ( i , side ) <> state_researched then
37309: LD_VAR 0 4
37313: PPUSH
37314: LD_VAR 0 1
37318: PPUSH
37319: CALL_OW 321
37323: PUSH
37324: LD_INT 2
37326: NONEQUAL
37327: IFFALSE 37341
// begin result := false ;
37329: LD_ADDR_VAR 0 3
37333: PUSH
37334: LD_INT 0
37336: ST_TO_ADDR
// exit ;
37337: POP
37338: POP
37339: GO 37345
// end ;
37341: GO 37306
37343: POP
37344: POP
// end ;
37345: LD_VAR 0 3
37349: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37350: LD_INT 0
37352: PPUSH
37353: PPUSH
37354: PPUSH
37355: PPUSH
37356: PPUSH
37357: PPUSH
37358: PPUSH
37359: PPUSH
37360: PPUSH
37361: PPUSH
37362: PPUSH
37363: PPUSH
37364: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37365: LD_VAR 0 1
37369: NOT
37370: PUSH
37371: LD_VAR 0 1
37375: PPUSH
37376: CALL_OW 257
37380: PUSH
37381: LD_INT 9
37383: NONEQUAL
37384: OR
37385: IFFALSE 37389
// exit ;
37387: GO 37962
// side := GetSide ( unit ) ;
37389: LD_ADDR_VAR 0 9
37393: PUSH
37394: LD_VAR 0 1
37398: PPUSH
37399: CALL_OW 255
37403: ST_TO_ADDR
// tech_space := tech_spacanom ;
37404: LD_ADDR_VAR 0 12
37408: PUSH
37409: LD_INT 29
37411: ST_TO_ADDR
// tech_time := tech_taurad ;
37412: LD_ADDR_VAR 0 13
37416: PUSH
37417: LD_INT 28
37419: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37420: LD_ADDR_VAR 0 11
37424: PUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: CALL_OW 310
37434: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37435: LD_VAR 0 11
37439: PPUSH
37440: CALL_OW 247
37444: PUSH
37445: LD_INT 2
37447: EQUAL
37448: IFFALSE 37452
// exit ;
37450: GO 37962
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37452: LD_ADDR_VAR 0 8
37456: PUSH
37457: LD_INT 81
37459: PUSH
37460: LD_VAR 0 9
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: LD_INT 21
37474: PUSH
37475: LD_INT 3
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PPUSH
37490: CALL_OW 69
37494: ST_TO_ADDR
// if not tmp then
37495: LD_VAR 0 8
37499: NOT
37500: IFFALSE 37504
// exit ;
37502: GO 37962
// if in_unit then
37504: LD_VAR 0 11
37508: IFFALSE 37532
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37510: LD_ADDR_VAR 0 10
37514: PUSH
37515: LD_VAR 0 8
37519: PPUSH
37520: LD_VAR 0 11
37524: PPUSH
37525: CALL_OW 74
37529: ST_TO_ADDR
37530: GO 37552
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37532: LD_ADDR_VAR 0 10
37536: PUSH
37537: LD_VAR 0 8
37541: PPUSH
37542: LD_VAR 0 1
37546: PPUSH
37547: CALL_OW 74
37551: ST_TO_ADDR
// if not enemy then
37552: LD_VAR 0 10
37556: NOT
37557: IFFALSE 37561
// exit ;
37559: GO 37962
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37561: LD_VAR 0 11
37565: PUSH
37566: LD_VAR 0 11
37570: PPUSH
37571: LD_VAR 0 10
37575: PPUSH
37576: CALL_OW 296
37580: PUSH
37581: LD_INT 13
37583: GREATER
37584: AND
37585: PUSH
37586: LD_VAR 0 1
37590: PPUSH
37591: LD_VAR 0 10
37595: PPUSH
37596: CALL_OW 296
37600: PUSH
37601: LD_INT 12
37603: GREATER
37604: OR
37605: IFFALSE 37609
// exit ;
37607: GO 37962
// missile := [ 1 ] ;
37609: LD_ADDR_VAR 0 14
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37620: LD_VAR 0 9
37624: PPUSH
37625: LD_VAR 0 12
37629: PPUSH
37630: CALL_OW 325
37634: IFFALSE 37663
// missile := Replace ( missile , missile + 1 , 2 ) ;
37636: LD_ADDR_VAR 0 14
37640: PUSH
37641: LD_VAR 0 14
37645: PPUSH
37646: LD_VAR 0 14
37650: PUSH
37651: LD_INT 1
37653: PLUS
37654: PPUSH
37655: LD_INT 2
37657: PPUSH
37658: CALL_OW 1
37662: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37663: LD_VAR 0 9
37667: PPUSH
37668: LD_VAR 0 13
37672: PPUSH
37673: CALL_OW 325
37677: PUSH
37678: LD_VAR 0 10
37682: PPUSH
37683: CALL_OW 255
37687: PPUSH
37688: LD_VAR 0 13
37692: PPUSH
37693: CALL_OW 325
37697: NOT
37698: AND
37699: IFFALSE 37728
// missile := Replace ( missile , missile + 1 , 3 ) ;
37701: LD_ADDR_VAR 0 14
37705: PUSH
37706: LD_VAR 0 14
37710: PPUSH
37711: LD_VAR 0 14
37715: PUSH
37716: LD_INT 1
37718: PLUS
37719: PPUSH
37720: LD_INT 3
37722: PPUSH
37723: CALL_OW 1
37727: ST_TO_ADDR
// if missile < 2 then
37728: LD_VAR 0 14
37732: PUSH
37733: LD_INT 2
37735: LESS
37736: IFFALSE 37740
// exit ;
37738: GO 37962
// x := GetX ( enemy ) ;
37740: LD_ADDR_VAR 0 4
37744: PUSH
37745: LD_VAR 0 10
37749: PPUSH
37750: CALL_OW 250
37754: ST_TO_ADDR
// y := GetY ( enemy ) ;
37755: LD_ADDR_VAR 0 5
37759: PUSH
37760: LD_VAR 0 10
37764: PPUSH
37765: CALL_OW 251
37769: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37770: LD_ADDR_VAR 0 6
37774: PUSH
37775: LD_VAR 0 4
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PPUSH
37784: LD_INT 1
37786: PPUSH
37787: CALL_OW 12
37791: PLUS
37792: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37793: LD_ADDR_VAR 0 7
37797: PUSH
37798: LD_VAR 0 5
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PPUSH
37807: LD_INT 1
37809: PPUSH
37810: CALL_OW 12
37814: PLUS
37815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37816: LD_VAR 0 6
37820: PPUSH
37821: LD_VAR 0 7
37825: PPUSH
37826: CALL_OW 488
37830: NOT
37831: IFFALSE 37853
// begin _x := x ;
37833: LD_ADDR_VAR 0 6
37837: PUSH
37838: LD_VAR 0 4
37842: ST_TO_ADDR
// _y := y ;
37843: LD_ADDR_VAR 0 7
37847: PUSH
37848: LD_VAR 0 5
37852: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37853: LD_ADDR_VAR 0 3
37857: PUSH
37858: LD_INT 1
37860: PPUSH
37861: LD_VAR 0 14
37865: PPUSH
37866: CALL_OW 12
37870: ST_TO_ADDR
// case i of 1 :
37871: LD_VAR 0 3
37875: PUSH
37876: LD_INT 1
37878: DOUBLE
37879: EQUAL
37880: IFTRUE 37884
37882: GO 37901
37884: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37885: LD_VAR 0 1
37889: PPUSH
37890: LD_VAR 0 10
37894: PPUSH
37895: CALL_OW 115
37899: GO 37962
37901: LD_INT 2
37903: DOUBLE
37904: EQUAL
37905: IFTRUE 37909
37907: GO 37931
37909: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37910: LD_VAR 0 1
37914: PPUSH
37915: LD_VAR 0 6
37919: PPUSH
37920: LD_VAR 0 7
37924: PPUSH
37925: CALL_OW 153
37929: GO 37962
37931: LD_INT 3
37933: DOUBLE
37934: EQUAL
37935: IFTRUE 37939
37937: GO 37961
37939: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37940: LD_VAR 0 1
37944: PPUSH
37945: LD_VAR 0 6
37949: PPUSH
37950: LD_VAR 0 7
37954: PPUSH
37955: CALL_OW 154
37959: GO 37962
37961: POP
// end ;
37962: LD_VAR 0 2
37966: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37967: LD_INT 0
37969: PPUSH
37970: PPUSH
37971: PPUSH
37972: PPUSH
37973: PPUSH
37974: PPUSH
// if not unit or not building then
37975: LD_VAR 0 1
37979: NOT
37980: PUSH
37981: LD_VAR 0 2
37985: NOT
37986: OR
37987: IFFALSE 37991
// exit ;
37989: GO 38149
// x := GetX ( building ) ;
37991: LD_ADDR_VAR 0 5
37995: PUSH
37996: LD_VAR 0 2
38000: PPUSH
38001: CALL_OW 250
38005: ST_TO_ADDR
// y := GetY ( building ) ;
38006: LD_ADDR_VAR 0 6
38010: PUSH
38011: LD_VAR 0 2
38015: PPUSH
38016: CALL_OW 251
38020: ST_TO_ADDR
// for i = 0 to 5 do
38021: LD_ADDR_VAR 0 4
38025: PUSH
38026: DOUBLE
38027: LD_INT 0
38029: DEC
38030: ST_TO_ADDR
38031: LD_INT 5
38033: PUSH
38034: FOR_TO
38035: IFFALSE 38147
// begin _x := ShiftX ( x , i , 3 ) ;
38037: LD_ADDR_VAR 0 7
38041: PUSH
38042: LD_VAR 0 5
38046: PPUSH
38047: LD_VAR 0 4
38051: PPUSH
38052: LD_INT 3
38054: PPUSH
38055: CALL_OW 272
38059: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38060: LD_ADDR_VAR 0 8
38064: PUSH
38065: LD_VAR 0 6
38069: PPUSH
38070: LD_VAR 0 4
38074: PPUSH
38075: LD_INT 3
38077: PPUSH
38078: CALL_OW 273
38082: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38083: LD_VAR 0 7
38087: PPUSH
38088: LD_VAR 0 8
38092: PPUSH
38093: CALL_OW 488
38097: NOT
38098: IFFALSE 38102
// continue ;
38100: GO 38034
// if HexInfo ( _x , _y ) = 0 then
38102: LD_VAR 0 7
38106: PPUSH
38107: LD_VAR 0 8
38111: PPUSH
38112: CALL_OW 428
38116: PUSH
38117: LD_INT 0
38119: EQUAL
38120: IFFALSE 38145
// begin ComMoveXY ( unit , _x , _y ) ;
38122: LD_VAR 0 1
38126: PPUSH
38127: LD_VAR 0 7
38131: PPUSH
38132: LD_VAR 0 8
38136: PPUSH
38137: CALL_OW 111
// exit ;
38141: POP
38142: POP
38143: GO 38149
// end ; end ;
38145: GO 38034
38147: POP
38148: POP
// end ;
38149: LD_VAR 0 3
38153: RET
// export function ScanBase ( side , base_area ) ; begin
38154: LD_INT 0
38156: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38157: LD_ADDR_VAR 0 3
38161: PUSH
38162: LD_VAR 0 2
38166: PPUSH
38167: LD_INT 81
38169: PUSH
38170: LD_VAR 0 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PPUSH
38179: CALL_OW 70
38183: ST_TO_ADDR
// end ;
38184: LD_VAR 0 3
38188: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38189: LD_INT 0
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
// result := false ;
38195: LD_ADDR_VAR 0 2
38199: PUSH
38200: LD_INT 0
38202: ST_TO_ADDR
// side := GetSide ( unit ) ;
38203: LD_ADDR_VAR 0 3
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 255
38217: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38218: LD_ADDR_VAR 0 4
38222: PUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: CALL_OW 248
38232: ST_TO_ADDR
// case nat of 1 :
38233: LD_VAR 0 4
38237: PUSH
38238: LD_INT 1
38240: DOUBLE
38241: EQUAL
38242: IFTRUE 38246
38244: GO 38257
38246: POP
// tech := tech_lassight ; 2 :
38247: LD_ADDR_VAR 0 5
38251: PUSH
38252: LD_INT 12
38254: ST_TO_ADDR
38255: GO 38296
38257: LD_INT 2
38259: DOUBLE
38260: EQUAL
38261: IFTRUE 38265
38263: GO 38276
38265: POP
// tech := tech_mortar ; 3 :
38266: LD_ADDR_VAR 0 5
38270: PUSH
38271: LD_INT 41
38273: ST_TO_ADDR
38274: GO 38296
38276: LD_INT 3
38278: DOUBLE
38279: EQUAL
38280: IFTRUE 38284
38282: GO 38295
38284: POP
// tech := tech_bazooka ; end ;
38285: LD_ADDR_VAR 0 5
38289: PUSH
38290: LD_INT 44
38292: ST_TO_ADDR
38293: GO 38296
38295: POP
// if Researched ( side , tech ) then
38296: LD_VAR 0 3
38300: PPUSH
38301: LD_VAR 0 5
38305: PPUSH
38306: CALL_OW 325
38310: IFFALSE 38337
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38312: LD_ADDR_VAR 0 2
38316: PUSH
38317: LD_INT 5
38319: PUSH
38320: LD_INT 8
38322: PUSH
38323: LD_INT 9
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: PUSH
38331: LD_VAR 0 4
38335: ARRAY
38336: ST_TO_ADDR
// end ;
38337: LD_VAR 0 2
38341: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38342: LD_INT 0
38344: PPUSH
38345: PPUSH
38346: PPUSH
// if not mines then
38347: LD_VAR 0 2
38351: NOT
38352: IFFALSE 38356
// exit ;
38354: GO 38500
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38356: LD_ADDR_VAR 0 5
38360: PUSH
38361: LD_INT 81
38363: PUSH
38364: LD_VAR 0 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 21
38378: PUSH
38379: LD_INT 3
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PPUSH
38394: CALL_OW 69
38398: ST_TO_ADDR
// for i in mines do
38399: LD_ADDR_VAR 0 4
38403: PUSH
38404: LD_VAR 0 2
38408: PUSH
38409: FOR_IN
38410: IFFALSE 38498
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38412: LD_VAR 0 4
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PPUSH
38421: LD_VAR 0 4
38425: PUSH
38426: LD_INT 2
38428: ARRAY
38429: PPUSH
38430: CALL_OW 458
38434: NOT
38435: IFFALSE 38439
// continue ;
38437: GO 38409
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38439: LD_VAR 0 4
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: PPUSH
38448: LD_VAR 0 4
38452: PUSH
38453: LD_INT 2
38455: ARRAY
38456: PPUSH
38457: CALL_OW 428
38461: PUSH
38462: LD_VAR 0 5
38466: IN
38467: IFFALSE 38496
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38469: LD_VAR 0 4
38473: PUSH
38474: LD_INT 1
38476: ARRAY
38477: PPUSH
38478: LD_VAR 0 4
38482: PUSH
38483: LD_INT 2
38485: ARRAY
38486: PPUSH
38487: LD_VAR 0 1
38491: PPUSH
38492: CALL_OW 456
// end ;
38496: GO 38409
38498: POP
38499: POP
// end ;
38500: LD_VAR 0 3
38504: RET
// export function Count ( array ) ; begin
38505: LD_INT 0
38507: PPUSH
// result := array + 0 ;
38508: LD_ADDR_VAR 0 2
38512: PUSH
38513: LD_VAR 0 1
38517: PUSH
38518: LD_INT 0
38520: PLUS
38521: ST_TO_ADDR
// end ;
38522: LD_VAR 0 2
38526: RET
// export function IsEmpty ( building ) ; begin
38527: LD_INT 0
38529: PPUSH
// if not building then
38530: LD_VAR 0 1
38534: NOT
38535: IFFALSE 38539
// exit ;
38537: GO 38582
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38539: LD_ADDR_VAR 0 2
38543: PUSH
38544: LD_VAR 0 1
38548: PUSH
38549: LD_INT 22
38551: PUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 255
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 58
38568: PUSH
38569: EMPTY
38570: LIST
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PPUSH
38576: CALL_OW 69
38580: IN
38581: ST_TO_ADDR
// end ;
38582: LD_VAR 0 2
38586: RET
// export function IsNotFull ( building ) ; var places ; begin
38587: LD_INT 0
38589: PPUSH
38590: PPUSH
// if not building then
38591: LD_VAR 0 1
38595: NOT
38596: IFFALSE 38600
// exit ;
38598: GO 38628
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38600: LD_ADDR_VAR 0 2
38604: PUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: LD_INT 3
38612: PUSH
38613: LD_INT 62
38615: PUSH
38616: EMPTY
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PPUSH
38623: CALL_OW 72
38627: ST_TO_ADDR
// end ;
38628: LD_VAR 0 2
38632: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38633: LD_INT 0
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
// tmp := [ ] ;
38639: LD_ADDR_VAR 0 3
38643: PUSH
38644: EMPTY
38645: ST_TO_ADDR
// list := [ ] ;
38646: LD_ADDR_VAR 0 5
38650: PUSH
38651: EMPTY
38652: ST_TO_ADDR
// for i = 16 to 25 do
38653: LD_ADDR_VAR 0 4
38657: PUSH
38658: DOUBLE
38659: LD_INT 16
38661: DEC
38662: ST_TO_ADDR
38663: LD_INT 25
38665: PUSH
38666: FOR_TO
38667: IFFALSE 38740
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38669: LD_ADDR_VAR 0 3
38673: PUSH
38674: LD_VAR 0 3
38678: PUSH
38679: LD_INT 22
38681: PUSH
38682: LD_VAR 0 1
38686: PPUSH
38687: CALL_OW 255
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 91
38698: PUSH
38699: LD_VAR 0 1
38703: PUSH
38704: LD_INT 6
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 30
38714: PUSH
38715: LD_VAR 0 4
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: PUSH
38729: EMPTY
38730: LIST
38731: PPUSH
38732: CALL_OW 69
38736: ADD
38737: ST_TO_ADDR
38738: GO 38666
38740: POP
38741: POP
// for i = 1 to tmp do
38742: LD_ADDR_VAR 0 4
38746: PUSH
38747: DOUBLE
38748: LD_INT 1
38750: DEC
38751: ST_TO_ADDR
38752: LD_VAR 0 3
38756: PUSH
38757: FOR_TO
38758: IFFALSE 38846
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38760: LD_ADDR_VAR 0 5
38764: PUSH
38765: LD_VAR 0 5
38769: PUSH
38770: LD_VAR 0 3
38774: PUSH
38775: LD_VAR 0 4
38779: ARRAY
38780: PPUSH
38781: CALL_OW 266
38785: PUSH
38786: LD_VAR 0 3
38790: PUSH
38791: LD_VAR 0 4
38795: ARRAY
38796: PPUSH
38797: CALL_OW 250
38801: PUSH
38802: LD_VAR 0 3
38806: PUSH
38807: LD_VAR 0 4
38811: ARRAY
38812: PPUSH
38813: CALL_OW 251
38817: PUSH
38818: LD_VAR 0 3
38822: PUSH
38823: LD_VAR 0 4
38827: ARRAY
38828: PPUSH
38829: CALL_OW 254
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: ADD
38843: ST_TO_ADDR
38844: GO 38757
38846: POP
38847: POP
// result := list ;
38848: LD_ADDR_VAR 0 2
38852: PUSH
38853: LD_VAR 0 5
38857: ST_TO_ADDR
// end ;
38858: LD_VAR 0 2
38862: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38863: LD_INT 0
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
// if not factory then
38872: LD_VAR 0 1
38876: NOT
38877: IFFALSE 38881
// exit ;
38879: GO 39474
// if control = control_apeman then
38881: LD_VAR 0 4
38885: PUSH
38886: LD_INT 5
38888: EQUAL
38889: IFFALSE 38998
// begin tmp := UnitsInside ( factory ) ;
38891: LD_ADDR_VAR 0 8
38895: PUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: CALL_OW 313
38905: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38906: LD_VAR 0 8
38910: PPUSH
38911: LD_INT 25
38913: PUSH
38914: LD_INT 12
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PPUSH
38921: CALL_OW 72
38925: NOT
38926: IFFALSE 38936
// control := control_manual ;
38928: LD_ADDR_VAR 0 4
38932: PUSH
38933: LD_INT 1
38935: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38936: LD_ADDR_VAR 0 8
38940: PUSH
38941: LD_VAR 0 1
38945: PPUSH
38946: CALL 38633 0 1
38950: ST_TO_ADDR
// if tmp then
38951: LD_VAR 0 8
38955: IFFALSE 38998
// begin for i in tmp do
38957: LD_ADDR_VAR 0 7
38961: PUSH
38962: LD_VAR 0 8
38966: PUSH
38967: FOR_IN
38968: IFFALSE 38996
// if i [ 1 ] = b_ext_radio then
38970: LD_VAR 0 7
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PUSH
38979: LD_INT 22
38981: EQUAL
38982: IFFALSE 38994
// begin control := control_remote ;
38984: LD_ADDR_VAR 0 4
38988: PUSH
38989: LD_INT 2
38991: ST_TO_ADDR
// break ;
38992: GO 38996
// end ;
38994: GO 38967
38996: POP
38997: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38998: LD_VAR 0 1
39002: PPUSH
39003: LD_VAR 0 2
39007: PPUSH
39008: LD_VAR 0 3
39012: PPUSH
39013: LD_VAR 0 4
39017: PPUSH
39018: LD_VAR 0 5
39022: PPUSH
39023: CALL_OW 448
39027: IFFALSE 39062
// begin result := [ chassis , engine , control , weapon ] ;
39029: LD_ADDR_VAR 0 6
39033: PUSH
39034: LD_VAR 0 2
39038: PUSH
39039: LD_VAR 0 3
39043: PUSH
39044: LD_VAR 0 4
39048: PUSH
39049: LD_VAR 0 5
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: ST_TO_ADDR
// exit ;
39060: GO 39474
// end ; _chassis := AvailableChassisList ( factory ) ;
39062: LD_ADDR_VAR 0 9
39066: PUSH
39067: LD_VAR 0 1
39071: PPUSH
39072: CALL_OW 475
39076: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39077: LD_ADDR_VAR 0 11
39081: PUSH
39082: LD_VAR 0 1
39086: PPUSH
39087: CALL_OW 476
39091: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39092: LD_ADDR_VAR 0 12
39096: PUSH
39097: LD_VAR 0 1
39101: PPUSH
39102: CALL_OW 477
39106: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39107: LD_ADDR_VAR 0 10
39111: PUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 478
39121: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39122: LD_VAR 0 9
39126: NOT
39127: PUSH
39128: LD_VAR 0 11
39132: NOT
39133: OR
39134: PUSH
39135: LD_VAR 0 12
39139: NOT
39140: OR
39141: PUSH
39142: LD_VAR 0 10
39146: NOT
39147: OR
39148: IFFALSE 39183
// begin result := [ chassis , engine , control , weapon ] ;
39150: LD_ADDR_VAR 0 6
39154: PUSH
39155: LD_VAR 0 2
39159: PUSH
39160: LD_VAR 0 3
39164: PUSH
39165: LD_VAR 0 4
39169: PUSH
39170: LD_VAR 0 5
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: ST_TO_ADDR
// exit ;
39181: GO 39474
// end ; if not chassis in _chassis then
39183: LD_VAR 0 2
39187: PUSH
39188: LD_VAR 0 9
39192: IN
39193: NOT
39194: IFFALSE 39220
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39196: LD_ADDR_VAR 0 2
39200: PUSH
39201: LD_VAR 0 9
39205: PUSH
39206: LD_INT 1
39208: PPUSH
39209: LD_VAR 0 9
39213: PPUSH
39214: CALL_OW 12
39218: ARRAY
39219: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39220: LD_VAR 0 2
39224: PPUSH
39225: LD_VAR 0 3
39229: PPUSH
39230: CALL 39479 0 2
39234: NOT
39235: IFFALSE 39294
// repeat engine := _engine [ 1 ] ;
39237: LD_ADDR_VAR 0 3
39241: PUSH
39242: LD_VAR 0 11
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39251: LD_ADDR_VAR 0 11
39255: PUSH
39256: LD_VAR 0 11
39260: PPUSH
39261: LD_INT 1
39263: PPUSH
39264: CALL_OW 3
39268: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39269: LD_VAR 0 2
39273: PPUSH
39274: LD_VAR 0 3
39278: PPUSH
39279: CALL 39479 0 2
39283: PUSH
39284: LD_VAR 0 11
39288: PUSH
39289: EMPTY
39290: EQUAL
39291: OR
39292: IFFALSE 39237
// if not control in _control then
39294: LD_VAR 0 4
39298: PUSH
39299: LD_VAR 0 12
39303: IN
39304: NOT
39305: IFFALSE 39331
// control := _control [ rand ( 1 , _control ) ] ;
39307: LD_ADDR_VAR 0 4
39311: PUSH
39312: LD_VAR 0 12
39316: PUSH
39317: LD_INT 1
39319: PPUSH
39320: LD_VAR 0 12
39324: PPUSH
39325: CALL_OW 12
39329: ARRAY
39330: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39331: LD_VAR 0 2
39335: PPUSH
39336: LD_VAR 0 5
39340: PPUSH
39341: CALL 39699 0 2
39345: NOT
39346: IFFALSE 39405
// repeat weapon := _weapon [ 1 ] ;
39348: LD_ADDR_VAR 0 5
39352: PUSH
39353: LD_VAR 0 10
39357: PUSH
39358: LD_INT 1
39360: ARRAY
39361: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39362: LD_ADDR_VAR 0 10
39366: PUSH
39367: LD_VAR 0 10
39371: PPUSH
39372: LD_INT 1
39374: PPUSH
39375: CALL_OW 3
39379: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39380: LD_VAR 0 2
39384: PPUSH
39385: LD_VAR 0 5
39389: PPUSH
39390: CALL 39699 0 2
39394: PUSH
39395: LD_VAR 0 10
39399: PUSH
39400: EMPTY
39401: EQUAL
39402: OR
39403: IFFALSE 39348
// result := [ ] ;
39405: LD_ADDR_VAR 0 6
39409: PUSH
39410: EMPTY
39411: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39412: LD_VAR 0 1
39416: PPUSH
39417: LD_VAR 0 2
39421: PPUSH
39422: LD_VAR 0 3
39426: PPUSH
39427: LD_VAR 0 4
39431: PPUSH
39432: LD_VAR 0 5
39436: PPUSH
39437: CALL_OW 448
39441: IFFALSE 39474
// result := [ chassis , engine , control , weapon ] ;
39443: LD_ADDR_VAR 0 6
39447: PUSH
39448: LD_VAR 0 2
39452: PUSH
39453: LD_VAR 0 3
39457: PUSH
39458: LD_VAR 0 4
39462: PUSH
39463: LD_VAR 0 5
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: ST_TO_ADDR
// end ;
39474: LD_VAR 0 6
39478: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39479: LD_INT 0
39481: PPUSH
// if not chassis or not engine then
39482: LD_VAR 0 1
39486: NOT
39487: PUSH
39488: LD_VAR 0 2
39492: NOT
39493: OR
39494: IFFALSE 39498
// exit ;
39496: GO 39694
// case engine of engine_solar :
39498: LD_VAR 0 2
39502: PUSH
39503: LD_INT 2
39505: DOUBLE
39506: EQUAL
39507: IFTRUE 39511
39509: GO 39549
39511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39512: LD_ADDR_VAR 0 3
39516: PUSH
39517: LD_INT 11
39519: PUSH
39520: LD_INT 12
39522: PUSH
39523: LD_INT 13
39525: PUSH
39526: LD_INT 14
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: LD_INT 3
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: ST_TO_ADDR
39547: GO 39678
39549: LD_INT 1
39551: DOUBLE
39552: EQUAL
39553: IFTRUE 39557
39555: GO 39619
39557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39558: LD_ADDR_VAR 0 3
39562: PUSH
39563: LD_INT 11
39565: PUSH
39566: LD_INT 12
39568: PUSH
39569: LD_INT 13
39571: PUSH
39572: LD_INT 14
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 3
39583: PUSH
39584: LD_INT 4
39586: PUSH
39587: LD_INT 5
39589: PUSH
39590: LD_INT 21
39592: PUSH
39593: LD_INT 23
39595: PUSH
39596: LD_INT 22
39598: PUSH
39599: LD_INT 24
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: ST_TO_ADDR
39617: GO 39678
39619: LD_INT 3
39621: DOUBLE
39622: EQUAL
39623: IFTRUE 39627
39625: GO 39677
39627: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39628: LD_ADDR_VAR 0 3
39632: PUSH
39633: LD_INT 13
39635: PUSH
39636: LD_INT 14
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 3
39644: PUSH
39645: LD_INT 4
39647: PUSH
39648: LD_INT 5
39650: PUSH
39651: LD_INT 21
39653: PUSH
39654: LD_INT 22
39656: PUSH
39657: LD_INT 23
39659: PUSH
39660: LD_INT 24
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
39675: GO 39678
39677: POP
// result := ( chassis in result ) ;
39678: LD_ADDR_VAR 0 3
39682: PUSH
39683: LD_VAR 0 1
39687: PUSH
39688: LD_VAR 0 3
39692: IN
39693: ST_TO_ADDR
// end ;
39694: LD_VAR 0 3
39698: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39699: LD_INT 0
39701: PPUSH
// if not chassis or not weapon then
39702: LD_VAR 0 1
39706: NOT
39707: PUSH
39708: LD_VAR 0 2
39712: NOT
39713: OR
39714: IFFALSE 39718
// exit ;
39716: GO 40778
// case weapon of us_machine_gun :
39718: LD_VAR 0 2
39722: PUSH
39723: LD_INT 2
39725: DOUBLE
39726: EQUAL
39727: IFTRUE 39731
39729: GO 39761
39731: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39732: LD_ADDR_VAR 0 3
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: LD_INT 3
39745: PUSH
39746: LD_INT 4
39748: PUSH
39749: LD_INT 5
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: ST_TO_ADDR
39759: GO 40762
39761: LD_INT 3
39763: DOUBLE
39764: EQUAL
39765: IFTRUE 39769
39767: GO 39799
39769: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39770: LD_ADDR_VAR 0 3
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: LD_INT 4
39786: PUSH
39787: LD_INT 5
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
39797: GO 40762
39799: LD_INT 11
39801: DOUBLE
39802: EQUAL
39803: IFTRUE 39807
39805: GO 39837
39807: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: LD_INT 4
39824: PUSH
39825: LD_INT 5
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: ST_TO_ADDR
39835: GO 40762
39837: LD_INT 4
39839: DOUBLE
39840: EQUAL
39841: IFTRUE 39845
39843: GO 39871
39845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39846: LD_ADDR_VAR 0 3
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: LD_INT 4
39859: PUSH
39860: LD_INT 5
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: ST_TO_ADDR
39869: GO 40762
39871: LD_INT 5
39873: DOUBLE
39874: EQUAL
39875: IFTRUE 39879
39877: GO 39905
39879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39880: LD_ADDR_VAR 0 3
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: LD_INT 4
39893: PUSH
39894: LD_INT 5
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: ST_TO_ADDR
39903: GO 40762
39905: LD_INT 9
39907: DOUBLE
39908: EQUAL
39909: IFTRUE 39913
39911: GO 39939
39913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39914: LD_ADDR_VAR 0 3
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: LD_INT 3
39924: PUSH
39925: LD_INT 4
39927: PUSH
39928: LD_INT 5
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: ST_TO_ADDR
39937: GO 40762
39939: LD_INT 7
39941: DOUBLE
39942: EQUAL
39943: IFTRUE 39947
39945: GO 39973
39947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: LD_INT 4
39961: PUSH
39962: LD_INT 5
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: ST_TO_ADDR
39971: GO 40762
39973: LD_INT 12
39975: DOUBLE
39976: EQUAL
39977: IFTRUE 39981
39979: GO 40007
39981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 3
39992: PUSH
39993: LD_INT 4
39995: PUSH
39996: LD_INT 5
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: ST_TO_ADDR
40005: GO 40762
40007: LD_INT 13
40009: DOUBLE
40010: EQUAL
40011: IFTRUE 40015
40013: GO 40041
40015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40016: LD_ADDR_VAR 0 3
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: LD_INT 3
40026: PUSH
40027: LD_INT 4
40029: PUSH
40030: LD_INT 5
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: ST_TO_ADDR
40039: GO 40762
40041: LD_INT 14
40043: DOUBLE
40044: EQUAL
40045: IFTRUE 40049
40047: GO 40067
40049: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_INT 4
40057: PUSH
40058: LD_INT 5
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: ST_TO_ADDR
40065: GO 40762
40067: LD_INT 6
40069: DOUBLE
40070: EQUAL
40071: IFTRUE 40075
40073: GO 40093
40075: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40076: LD_ADDR_VAR 0 3
40080: PUSH
40081: LD_INT 4
40083: PUSH
40084: LD_INT 5
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: ST_TO_ADDR
40091: GO 40762
40093: LD_INT 10
40095: DOUBLE
40096: EQUAL
40097: IFTRUE 40101
40099: GO 40119
40101: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40102: LD_ADDR_VAR 0 3
40106: PUSH
40107: LD_INT 4
40109: PUSH
40110: LD_INT 5
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: ST_TO_ADDR
40117: GO 40762
40119: LD_INT 22
40121: DOUBLE
40122: EQUAL
40123: IFTRUE 40127
40125: GO 40153
40127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40128: LD_ADDR_VAR 0 3
40132: PUSH
40133: LD_INT 11
40135: PUSH
40136: LD_INT 12
40138: PUSH
40139: LD_INT 13
40141: PUSH
40142: LD_INT 14
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: ST_TO_ADDR
40151: GO 40762
40153: LD_INT 23
40155: DOUBLE
40156: EQUAL
40157: IFTRUE 40161
40159: GO 40187
40161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40162: LD_ADDR_VAR 0 3
40166: PUSH
40167: LD_INT 11
40169: PUSH
40170: LD_INT 12
40172: PUSH
40173: LD_INT 13
40175: PUSH
40176: LD_INT 14
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: ST_TO_ADDR
40185: GO 40762
40187: LD_INT 24
40189: DOUBLE
40190: EQUAL
40191: IFTRUE 40195
40193: GO 40221
40195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40196: LD_ADDR_VAR 0 3
40200: PUSH
40201: LD_INT 11
40203: PUSH
40204: LD_INT 12
40206: PUSH
40207: LD_INT 13
40209: PUSH
40210: LD_INT 14
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: ST_TO_ADDR
40219: GO 40762
40221: LD_INT 30
40223: DOUBLE
40224: EQUAL
40225: IFTRUE 40229
40227: GO 40255
40229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40230: LD_ADDR_VAR 0 3
40234: PUSH
40235: LD_INT 11
40237: PUSH
40238: LD_INT 12
40240: PUSH
40241: LD_INT 13
40243: PUSH
40244: LD_INT 14
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
40253: GO 40762
40255: LD_INT 25
40257: DOUBLE
40258: EQUAL
40259: IFTRUE 40263
40261: GO 40281
40263: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40264: LD_ADDR_VAR 0 3
40268: PUSH
40269: LD_INT 13
40271: PUSH
40272: LD_INT 14
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: ST_TO_ADDR
40279: GO 40762
40281: LD_INT 27
40283: DOUBLE
40284: EQUAL
40285: IFTRUE 40289
40287: GO 40307
40289: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40290: LD_ADDR_VAR 0 3
40294: PUSH
40295: LD_INT 13
40297: PUSH
40298: LD_INT 14
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: ST_TO_ADDR
40305: GO 40762
40307: LD_INT 92
40309: DOUBLE
40310: EQUAL
40311: IFTRUE 40315
40313: GO 40341
40315: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40316: LD_ADDR_VAR 0 3
40320: PUSH
40321: LD_INT 11
40323: PUSH
40324: LD_INT 12
40326: PUSH
40327: LD_INT 13
40329: PUSH
40330: LD_INT 14
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: ST_TO_ADDR
40339: GO 40762
40341: LD_INT 28
40343: DOUBLE
40344: EQUAL
40345: IFTRUE 40349
40347: GO 40367
40349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40350: LD_ADDR_VAR 0 3
40354: PUSH
40355: LD_INT 13
40357: PUSH
40358: LD_INT 14
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: ST_TO_ADDR
40365: GO 40762
40367: LD_INT 29
40369: DOUBLE
40370: EQUAL
40371: IFTRUE 40375
40373: GO 40393
40375: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40376: LD_ADDR_VAR 0 3
40380: PUSH
40381: LD_INT 13
40383: PUSH
40384: LD_INT 14
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: ST_TO_ADDR
40391: GO 40762
40393: LD_INT 31
40395: DOUBLE
40396: EQUAL
40397: IFTRUE 40401
40399: GO 40419
40401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40402: LD_ADDR_VAR 0 3
40406: PUSH
40407: LD_INT 13
40409: PUSH
40410: LD_INT 14
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: ST_TO_ADDR
40417: GO 40762
40419: LD_INT 26
40421: DOUBLE
40422: EQUAL
40423: IFTRUE 40427
40425: GO 40445
40427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40428: LD_ADDR_VAR 0 3
40432: PUSH
40433: LD_INT 13
40435: PUSH
40436: LD_INT 14
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: ST_TO_ADDR
40443: GO 40762
40445: LD_INT 42
40447: DOUBLE
40448: EQUAL
40449: IFTRUE 40453
40451: GO 40479
40453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40454: LD_ADDR_VAR 0 3
40458: PUSH
40459: LD_INT 21
40461: PUSH
40462: LD_INT 22
40464: PUSH
40465: LD_INT 23
40467: PUSH
40468: LD_INT 24
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: ST_TO_ADDR
40477: GO 40762
40479: LD_INT 43
40481: DOUBLE
40482: EQUAL
40483: IFTRUE 40487
40485: GO 40513
40487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40488: LD_ADDR_VAR 0 3
40492: PUSH
40493: LD_INT 21
40495: PUSH
40496: LD_INT 22
40498: PUSH
40499: LD_INT 23
40501: PUSH
40502: LD_INT 24
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: ST_TO_ADDR
40511: GO 40762
40513: LD_INT 44
40515: DOUBLE
40516: EQUAL
40517: IFTRUE 40521
40519: GO 40547
40521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40522: LD_ADDR_VAR 0 3
40526: PUSH
40527: LD_INT 21
40529: PUSH
40530: LD_INT 22
40532: PUSH
40533: LD_INT 23
40535: PUSH
40536: LD_INT 24
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: ST_TO_ADDR
40545: GO 40762
40547: LD_INT 45
40549: DOUBLE
40550: EQUAL
40551: IFTRUE 40555
40553: GO 40581
40555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_INT 21
40563: PUSH
40564: LD_INT 22
40566: PUSH
40567: LD_INT 23
40569: PUSH
40570: LD_INT 24
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: ST_TO_ADDR
40579: GO 40762
40581: LD_INT 49
40583: DOUBLE
40584: EQUAL
40585: IFTRUE 40589
40587: GO 40615
40589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40590: LD_ADDR_VAR 0 3
40594: PUSH
40595: LD_INT 21
40597: PUSH
40598: LD_INT 22
40600: PUSH
40601: LD_INT 23
40603: PUSH
40604: LD_INT 24
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: ST_TO_ADDR
40613: GO 40762
40615: LD_INT 51
40617: DOUBLE
40618: EQUAL
40619: IFTRUE 40623
40621: GO 40649
40623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40624: LD_ADDR_VAR 0 3
40628: PUSH
40629: LD_INT 21
40631: PUSH
40632: LD_INT 22
40634: PUSH
40635: LD_INT 23
40637: PUSH
40638: LD_INT 24
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
40647: GO 40762
40649: LD_INT 52
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40657
40655: GO 40683
40657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40658: LD_ADDR_VAR 0 3
40662: PUSH
40663: LD_INT 21
40665: PUSH
40666: LD_INT 22
40668: PUSH
40669: LD_INT 23
40671: PUSH
40672: LD_INT 24
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: ST_TO_ADDR
40681: GO 40762
40683: LD_INT 53
40685: DOUBLE
40686: EQUAL
40687: IFTRUE 40691
40689: GO 40709
40691: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40692: LD_ADDR_VAR 0 3
40696: PUSH
40697: LD_INT 23
40699: PUSH
40700: LD_INT 24
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: ST_TO_ADDR
40707: GO 40762
40709: LD_INT 46
40711: DOUBLE
40712: EQUAL
40713: IFTRUE 40717
40715: GO 40735
40717: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40718: LD_ADDR_VAR 0 3
40722: PUSH
40723: LD_INT 23
40725: PUSH
40726: LD_INT 24
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: ST_TO_ADDR
40733: GO 40762
40735: LD_INT 47
40737: DOUBLE
40738: EQUAL
40739: IFTRUE 40743
40741: GO 40761
40743: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40744: LD_ADDR_VAR 0 3
40748: PUSH
40749: LD_INT 23
40751: PUSH
40752: LD_INT 24
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: ST_TO_ADDR
40759: GO 40762
40761: POP
// result := ( chassis in result ) ;
40762: LD_ADDR_VAR 0 3
40766: PUSH
40767: LD_VAR 0 1
40771: PUSH
40772: LD_VAR 0 3
40776: IN
40777: ST_TO_ADDR
// end ;
40778: LD_VAR 0 3
40782: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40783: LD_INT 0
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
// result := array ;
40792: LD_ADDR_VAR 0 5
40796: PUSH
40797: LD_VAR 0 1
40801: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40802: LD_VAR 0 1
40806: NOT
40807: PUSH
40808: LD_VAR 0 2
40812: NOT
40813: OR
40814: PUSH
40815: LD_VAR 0 3
40819: NOT
40820: OR
40821: PUSH
40822: LD_VAR 0 2
40826: PUSH
40827: LD_VAR 0 1
40831: GREATER
40832: OR
40833: PUSH
40834: LD_VAR 0 3
40838: PUSH
40839: LD_VAR 0 1
40843: GREATER
40844: OR
40845: IFFALSE 40849
// exit ;
40847: GO 41145
// if direction then
40849: LD_VAR 0 4
40853: IFFALSE 40917
// begin d := 1 ;
40855: LD_ADDR_VAR 0 9
40859: PUSH
40860: LD_INT 1
40862: ST_TO_ADDR
// if i_from > i_to then
40863: LD_VAR 0 2
40867: PUSH
40868: LD_VAR 0 3
40872: GREATER
40873: IFFALSE 40899
// length := ( array - i_from ) + i_to else
40875: LD_ADDR_VAR 0 11
40879: PUSH
40880: LD_VAR 0 1
40884: PUSH
40885: LD_VAR 0 2
40889: MINUS
40890: PUSH
40891: LD_VAR 0 3
40895: PLUS
40896: ST_TO_ADDR
40897: GO 40915
// length := i_to - i_from ;
40899: LD_ADDR_VAR 0 11
40903: PUSH
40904: LD_VAR 0 3
40908: PUSH
40909: LD_VAR 0 2
40913: MINUS
40914: ST_TO_ADDR
// end else
40915: GO 40978
// begin d := - 1 ;
40917: LD_ADDR_VAR 0 9
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: ST_TO_ADDR
// if i_from > i_to then
40926: LD_VAR 0 2
40930: PUSH
40931: LD_VAR 0 3
40935: GREATER
40936: IFFALSE 40956
// length := i_from - i_to else
40938: LD_ADDR_VAR 0 11
40942: PUSH
40943: LD_VAR 0 2
40947: PUSH
40948: LD_VAR 0 3
40952: MINUS
40953: ST_TO_ADDR
40954: GO 40978
// length := ( array - i_to ) + i_from ;
40956: LD_ADDR_VAR 0 11
40960: PUSH
40961: LD_VAR 0 1
40965: PUSH
40966: LD_VAR 0 3
40970: MINUS
40971: PUSH
40972: LD_VAR 0 2
40976: PLUS
40977: ST_TO_ADDR
// end ; if not length then
40978: LD_VAR 0 11
40982: NOT
40983: IFFALSE 40987
// exit ;
40985: GO 41145
// tmp := array ;
40987: LD_ADDR_VAR 0 10
40991: PUSH
40992: LD_VAR 0 1
40996: ST_TO_ADDR
// for i = 1 to length do
40997: LD_ADDR_VAR 0 6
41001: PUSH
41002: DOUBLE
41003: LD_INT 1
41005: DEC
41006: ST_TO_ADDR
41007: LD_VAR 0 11
41011: PUSH
41012: FOR_TO
41013: IFFALSE 41133
// begin for j = 1 to array do
41015: LD_ADDR_VAR 0 7
41019: PUSH
41020: DOUBLE
41021: LD_INT 1
41023: DEC
41024: ST_TO_ADDR
41025: LD_VAR 0 1
41029: PUSH
41030: FOR_TO
41031: IFFALSE 41119
// begin k := j + d ;
41033: LD_ADDR_VAR 0 8
41037: PUSH
41038: LD_VAR 0 7
41042: PUSH
41043: LD_VAR 0 9
41047: PLUS
41048: ST_TO_ADDR
// if k > array then
41049: LD_VAR 0 8
41053: PUSH
41054: LD_VAR 0 1
41058: GREATER
41059: IFFALSE 41069
// k := 1 ;
41061: LD_ADDR_VAR 0 8
41065: PUSH
41066: LD_INT 1
41068: ST_TO_ADDR
// if not k then
41069: LD_VAR 0 8
41073: NOT
41074: IFFALSE 41086
// k := array ;
41076: LD_ADDR_VAR 0 8
41080: PUSH
41081: LD_VAR 0 1
41085: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41086: LD_ADDR_VAR 0 10
41090: PUSH
41091: LD_VAR 0 10
41095: PPUSH
41096: LD_VAR 0 8
41100: PPUSH
41101: LD_VAR 0 1
41105: PUSH
41106: LD_VAR 0 7
41110: ARRAY
41111: PPUSH
41112: CALL_OW 1
41116: ST_TO_ADDR
// end ;
41117: GO 41030
41119: POP
41120: POP
// array := tmp ;
41121: LD_ADDR_VAR 0 1
41125: PUSH
41126: LD_VAR 0 10
41130: ST_TO_ADDR
// end ;
41131: GO 41012
41133: POP
41134: POP
// result := array ;
41135: LD_ADDR_VAR 0 5
41139: PUSH
41140: LD_VAR 0 1
41144: ST_TO_ADDR
// end ;
41145: LD_VAR 0 5
41149: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41150: LD_INT 0
41152: PPUSH
41153: PPUSH
// result := 0 ;
41154: LD_ADDR_VAR 0 3
41158: PUSH
41159: LD_INT 0
41161: ST_TO_ADDR
// if not array or not value in array then
41162: LD_VAR 0 1
41166: NOT
41167: PUSH
41168: LD_VAR 0 2
41172: PUSH
41173: LD_VAR 0 1
41177: IN
41178: NOT
41179: OR
41180: IFFALSE 41184
// exit ;
41182: GO 41238
// for i = 1 to array do
41184: LD_ADDR_VAR 0 4
41188: PUSH
41189: DOUBLE
41190: LD_INT 1
41192: DEC
41193: ST_TO_ADDR
41194: LD_VAR 0 1
41198: PUSH
41199: FOR_TO
41200: IFFALSE 41236
// if value = array [ i ] then
41202: LD_VAR 0 2
41206: PUSH
41207: LD_VAR 0 1
41211: PUSH
41212: LD_VAR 0 4
41216: ARRAY
41217: EQUAL
41218: IFFALSE 41234
// begin result := i ;
41220: LD_ADDR_VAR 0 3
41224: PUSH
41225: LD_VAR 0 4
41229: ST_TO_ADDR
// exit ;
41230: POP
41231: POP
41232: GO 41238
// end ;
41234: GO 41199
41236: POP
41237: POP
// end ;
41238: LD_VAR 0 3
41242: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41243: LD_INT 0
41245: PPUSH
// vc_chassis := chassis ;
41246: LD_ADDR_OWVAR 37
41250: PUSH
41251: LD_VAR 0 1
41255: ST_TO_ADDR
// vc_engine := engine ;
41256: LD_ADDR_OWVAR 39
41260: PUSH
41261: LD_VAR 0 2
41265: ST_TO_ADDR
// vc_control := control ;
41266: LD_ADDR_OWVAR 38
41270: PUSH
41271: LD_VAR 0 3
41275: ST_TO_ADDR
// vc_weapon := weapon ;
41276: LD_ADDR_OWVAR 40
41280: PUSH
41281: LD_VAR 0 4
41285: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41286: LD_ADDR_OWVAR 41
41290: PUSH
41291: LD_VAR 0 5
41295: ST_TO_ADDR
// end ;
41296: LD_VAR 0 6
41300: RET
// export function WantPlant ( unit ) ; var task ; begin
41301: LD_INT 0
41303: PPUSH
41304: PPUSH
// result := false ;
41305: LD_ADDR_VAR 0 2
41309: PUSH
41310: LD_INT 0
41312: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41313: LD_ADDR_VAR 0 3
41317: PUSH
41318: LD_VAR 0 1
41322: PPUSH
41323: CALL_OW 437
41327: ST_TO_ADDR
// if task then
41328: LD_VAR 0 3
41332: IFFALSE 41360
// if task [ 1 ] [ 1 ] = p then
41334: LD_VAR 0 3
41338: PUSH
41339: LD_INT 1
41341: ARRAY
41342: PUSH
41343: LD_INT 1
41345: ARRAY
41346: PUSH
41347: LD_STRING p
41349: EQUAL
41350: IFFALSE 41360
// result := true ;
41352: LD_ADDR_VAR 0 2
41356: PUSH
41357: LD_INT 1
41359: ST_TO_ADDR
// end ;
41360: LD_VAR 0 2
41364: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41365: LD_INT 0
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
// if pos < 1 then
41371: LD_VAR 0 2
41375: PUSH
41376: LD_INT 1
41378: LESS
41379: IFFALSE 41383
// exit ;
41381: GO 41686
// if pos = 1 then
41383: LD_VAR 0 2
41387: PUSH
41388: LD_INT 1
41390: EQUAL
41391: IFFALSE 41424
// result := Replace ( arr , pos [ 1 ] , value ) else
41393: LD_ADDR_VAR 0 4
41397: PUSH
41398: LD_VAR 0 1
41402: PPUSH
41403: LD_VAR 0 2
41407: PUSH
41408: LD_INT 1
41410: ARRAY
41411: PPUSH
41412: LD_VAR 0 3
41416: PPUSH
41417: CALL_OW 1
41421: ST_TO_ADDR
41422: GO 41686
// begin tmp := arr ;
41424: LD_ADDR_VAR 0 6
41428: PUSH
41429: LD_VAR 0 1
41433: ST_TO_ADDR
// s_arr := [ tmp ] ;
41434: LD_ADDR_VAR 0 7
41438: PUSH
41439: LD_VAR 0 6
41443: PUSH
41444: EMPTY
41445: LIST
41446: ST_TO_ADDR
// for i = 1 to pos - 1 do
41447: LD_ADDR_VAR 0 5
41451: PUSH
41452: DOUBLE
41453: LD_INT 1
41455: DEC
41456: ST_TO_ADDR
41457: LD_VAR 0 2
41461: PUSH
41462: LD_INT 1
41464: MINUS
41465: PUSH
41466: FOR_TO
41467: IFFALSE 41512
// begin tmp := tmp [ pos [ i ] ] ;
41469: LD_ADDR_VAR 0 6
41473: PUSH
41474: LD_VAR 0 6
41478: PUSH
41479: LD_VAR 0 2
41483: PUSH
41484: LD_VAR 0 5
41488: ARRAY
41489: ARRAY
41490: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41491: LD_ADDR_VAR 0 7
41495: PUSH
41496: LD_VAR 0 7
41500: PUSH
41501: LD_VAR 0 6
41505: PUSH
41506: EMPTY
41507: LIST
41508: ADD
41509: ST_TO_ADDR
// end ;
41510: GO 41466
41512: POP
41513: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41514: LD_ADDR_VAR 0 6
41518: PUSH
41519: LD_VAR 0 6
41523: PPUSH
41524: LD_VAR 0 2
41528: PUSH
41529: LD_VAR 0 2
41533: ARRAY
41534: PPUSH
41535: LD_VAR 0 3
41539: PPUSH
41540: CALL_OW 1
41544: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41545: LD_ADDR_VAR 0 7
41549: PUSH
41550: LD_VAR 0 7
41554: PPUSH
41555: LD_VAR 0 7
41559: PPUSH
41560: LD_VAR 0 6
41564: PPUSH
41565: CALL_OW 1
41569: ST_TO_ADDR
// for i = s_arr downto 2 do
41570: LD_ADDR_VAR 0 5
41574: PUSH
41575: DOUBLE
41576: LD_VAR 0 7
41580: INC
41581: ST_TO_ADDR
41582: LD_INT 2
41584: PUSH
41585: FOR_DOWNTO
41586: IFFALSE 41670
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41588: LD_ADDR_VAR 0 6
41592: PUSH
41593: LD_VAR 0 7
41597: PUSH
41598: LD_VAR 0 5
41602: PUSH
41603: LD_INT 1
41605: MINUS
41606: ARRAY
41607: PPUSH
41608: LD_VAR 0 2
41612: PUSH
41613: LD_VAR 0 5
41617: PUSH
41618: LD_INT 1
41620: MINUS
41621: ARRAY
41622: PPUSH
41623: LD_VAR 0 7
41627: PUSH
41628: LD_VAR 0 5
41632: ARRAY
41633: PPUSH
41634: CALL_OW 1
41638: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41639: LD_ADDR_VAR 0 7
41643: PUSH
41644: LD_VAR 0 7
41648: PPUSH
41649: LD_VAR 0 5
41653: PUSH
41654: LD_INT 1
41656: MINUS
41657: PPUSH
41658: LD_VAR 0 6
41662: PPUSH
41663: CALL_OW 1
41667: ST_TO_ADDR
// end ;
41668: GO 41585
41670: POP
41671: POP
// result := s_arr [ 1 ] ;
41672: LD_ADDR_VAR 0 4
41676: PUSH
41677: LD_VAR 0 7
41681: PUSH
41682: LD_INT 1
41684: ARRAY
41685: ST_TO_ADDR
// end ; end ;
41686: LD_VAR 0 4
41690: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41691: LD_INT 0
41693: PPUSH
41694: PPUSH
// if not list then
41695: LD_VAR 0 1
41699: NOT
41700: IFFALSE 41704
// exit ;
41702: GO 41795
// i := list [ pos1 ] ;
41704: LD_ADDR_VAR 0 5
41708: PUSH
41709: LD_VAR 0 1
41713: PUSH
41714: LD_VAR 0 2
41718: ARRAY
41719: ST_TO_ADDR
// if not i then
41720: LD_VAR 0 5
41724: NOT
41725: IFFALSE 41729
// exit ;
41727: GO 41795
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41729: LD_ADDR_VAR 0 1
41733: PUSH
41734: LD_VAR 0 1
41738: PPUSH
41739: LD_VAR 0 2
41743: PPUSH
41744: LD_VAR 0 1
41748: PUSH
41749: LD_VAR 0 3
41753: ARRAY
41754: PPUSH
41755: CALL_OW 1
41759: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41760: LD_ADDR_VAR 0 1
41764: PUSH
41765: LD_VAR 0 1
41769: PPUSH
41770: LD_VAR 0 3
41774: PPUSH
41775: LD_VAR 0 5
41779: PPUSH
41780: CALL_OW 1
41784: ST_TO_ADDR
// result := list ;
41785: LD_ADDR_VAR 0 4
41789: PUSH
41790: LD_VAR 0 1
41794: ST_TO_ADDR
// end ;
41795: LD_VAR 0 4
41799: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41800: LD_INT 0
41802: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: LD_VAR 0 1
41812: PPUSH
41813: CALL_OW 250
41817: PPUSH
41818: LD_VAR 0 1
41822: PPUSH
41823: CALL_OW 251
41827: PPUSH
41828: LD_VAR 0 2
41832: PPUSH
41833: LD_VAR 0 3
41837: PPUSH
41838: LD_VAR 0 4
41842: PPUSH
41843: CALL 42221 0 5
41847: ST_TO_ADDR
// end ;
41848: LD_VAR 0 5
41852: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41853: LD_INT 0
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
// if not list or not unit then
41859: LD_VAR 0 2
41863: NOT
41864: PUSH
41865: LD_VAR 0 1
41869: NOT
41870: OR
41871: IFFALSE 41875
// exit ;
41873: GO 42216
// result := [ ] ;
41875: LD_ADDR_VAR 0 5
41879: PUSH
41880: EMPTY
41881: ST_TO_ADDR
// for i in list do
41882: LD_ADDR_VAR 0 6
41886: PUSH
41887: LD_VAR 0 2
41891: PUSH
41892: FOR_IN
41893: IFFALSE 42111
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41895: LD_ADDR_VAR 0 8
41899: PUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: LD_VAR 0 6
41909: PUSH
41910: LD_INT 1
41912: ARRAY
41913: PPUSH
41914: LD_VAR 0 6
41918: PUSH
41919: LD_INT 2
41921: ARRAY
41922: PPUSH
41923: CALL_OW 297
41927: ST_TO_ADDR
// if not Count ( result ) then
41928: LD_VAR 0 5
41932: PPUSH
41933: CALL 38505 0 1
41937: NOT
41938: IFFALSE 41971
// begin result := Join ( result , [ i , tmp ] ) ;
41940: LD_ADDR_VAR 0 5
41944: PUSH
41945: LD_VAR 0 5
41949: PPUSH
41950: LD_VAR 0 6
41954: PUSH
41955: LD_VAR 0 8
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PPUSH
41964: CALL 74094 0 2
41968: ST_TO_ADDR
// continue ;
41969: GO 41892
// end ; if result [ result ] [ 2 ] <= tmp then
41971: LD_VAR 0 5
41975: PUSH
41976: LD_VAR 0 5
41980: ARRAY
41981: PUSH
41982: LD_INT 2
41984: ARRAY
41985: PUSH
41986: LD_VAR 0 8
41990: LESSEQUAL
41991: IFFALSE 42024
// result := Join ( result , [ i , tmp ] ) else
41993: LD_ADDR_VAR 0 5
41997: PUSH
41998: LD_VAR 0 5
42002: PPUSH
42003: LD_VAR 0 6
42007: PUSH
42008: LD_VAR 0 8
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PPUSH
42017: CALL 74094 0 2
42021: ST_TO_ADDR
42022: GO 42109
// begin for j := 1 to Count ( result ) do
42024: LD_ADDR_VAR 0 7
42028: PUSH
42029: DOUBLE
42030: LD_INT 1
42032: DEC
42033: ST_TO_ADDR
42034: LD_VAR 0 5
42038: PPUSH
42039: CALL 38505 0 1
42043: PUSH
42044: FOR_TO
42045: IFFALSE 42107
// begin if tmp < result [ j ] [ 2 ] then
42047: LD_VAR 0 8
42051: PUSH
42052: LD_VAR 0 5
42056: PUSH
42057: LD_VAR 0 7
42061: ARRAY
42062: PUSH
42063: LD_INT 2
42065: ARRAY
42066: LESS
42067: IFFALSE 42105
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42069: LD_ADDR_VAR 0 5
42073: PUSH
42074: LD_VAR 0 5
42078: PPUSH
42079: LD_VAR 0 7
42083: PPUSH
42084: LD_VAR 0 6
42088: PUSH
42089: LD_VAR 0 8
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PPUSH
42098: CALL_OW 2
42102: ST_TO_ADDR
// break ;
42103: GO 42107
// end ; end ;
42105: GO 42044
42107: POP
42108: POP
// end ; end ;
42109: GO 41892
42111: POP
42112: POP
// if result and not asc then
42113: LD_VAR 0 5
42117: PUSH
42118: LD_VAR 0 3
42122: NOT
42123: AND
42124: IFFALSE 42141
// result := ReverseArray ( result ) ;
42126: LD_ADDR_VAR 0 5
42130: PUSH
42131: LD_VAR 0 5
42135: PPUSH
42136: CALL 69381 0 1
42140: ST_TO_ADDR
// tmp := [ ] ;
42141: LD_ADDR_VAR 0 8
42145: PUSH
42146: EMPTY
42147: ST_TO_ADDR
// if mode then
42148: LD_VAR 0 4
42152: IFFALSE 42216
// begin for i := 1 to result do
42154: LD_ADDR_VAR 0 6
42158: PUSH
42159: DOUBLE
42160: LD_INT 1
42162: DEC
42163: ST_TO_ADDR
42164: LD_VAR 0 5
42168: PUSH
42169: FOR_TO
42170: IFFALSE 42204
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42172: LD_ADDR_VAR 0 8
42176: PUSH
42177: LD_VAR 0 8
42181: PPUSH
42182: LD_VAR 0 5
42186: PUSH
42187: LD_VAR 0 6
42191: ARRAY
42192: PUSH
42193: LD_INT 1
42195: ARRAY
42196: PPUSH
42197: CALL 74094 0 2
42201: ST_TO_ADDR
42202: GO 42169
42204: POP
42205: POP
// result := tmp ;
42206: LD_ADDR_VAR 0 5
42210: PUSH
42211: LD_VAR 0 8
42215: ST_TO_ADDR
// end ; end ;
42216: LD_VAR 0 5
42220: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42221: LD_INT 0
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
// if not list then
42227: LD_VAR 0 3
42231: NOT
42232: IFFALSE 42236
// exit ;
42234: GO 42624
// result := [ ] ;
42236: LD_ADDR_VAR 0 6
42240: PUSH
42241: EMPTY
42242: ST_TO_ADDR
// for i in list do
42243: LD_ADDR_VAR 0 7
42247: PUSH
42248: LD_VAR 0 3
42252: PUSH
42253: FOR_IN
42254: IFFALSE 42456
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42256: LD_ADDR_VAR 0 9
42260: PUSH
42261: LD_VAR 0 7
42265: PPUSH
42266: LD_VAR 0 1
42270: PPUSH
42271: LD_VAR 0 2
42275: PPUSH
42276: CALL_OW 297
42280: ST_TO_ADDR
// if not result then
42281: LD_VAR 0 6
42285: NOT
42286: IFFALSE 42312
// result := [ [ i , tmp ] ] else
42288: LD_ADDR_VAR 0 6
42292: PUSH
42293: LD_VAR 0 7
42297: PUSH
42298: LD_VAR 0 9
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: EMPTY
42308: LIST
42309: ST_TO_ADDR
42310: GO 42454
// begin if result [ result ] [ 2 ] < tmp then
42312: LD_VAR 0 6
42316: PUSH
42317: LD_VAR 0 6
42321: ARRAY
42322: PUSH
42323: LD_INT 2
42325: ARRAY
42326: PUSH
42327: LD_VAR 0 9
42331: LESS
42332: IFFALSE 42374
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42334: LD_ADDR_VAR 0 6
42338: PUSH
42339: LD_VAR 0 6
42343: PPUSH
42344: LD_VAR 0 6
42348: PUSH
42349: LD_INT 1
42351: PLUS
42352: PPUSH
42353: LD_VAR 0 7
42357: PUSH
42358: LD_VAR 0 9
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PPUSH
42367: CALL_OW 2
42371: ST_TO_ADDR
42372: GO 42454
// for j = 1 to result do
42374: LD_ADDR_VAR 0 8
42378: PUSH
42379: DOUBLE
42380: LD_INT 1
42382: DEC
42383: ST_TO_ADDR
42384: LD_VAR 0 6
42388: PUSH
42389: FOR_TO
42390: IFFALSE 42452
// begin if tmp < result [ j ] [ 2 ] then
42392: LD_VAR 0 9
42396: PUSH
42397: LD_VAR 0 6
42401: PUSH
42402: LD_VAR 0 8
42406: ARRAY
42407: PUSH
42408: LD_INT 2
42410: ARRAY
42411: LESS
42412: IFFALSE 42450
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42414: LD_ADDR_VAR 0 6
42418: PUSH
42419: LD_VAR 0 6
42423: PPUSH
42424: LD_VAR 0 8
42428: PPUSH
42429: LD_VAR 0 7
42433: PUSH
42434: LD_VAR 0 9
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PPUSH
42443: CALL_OW 2
42447: ST_TO_ADDR
// break ;
42448: GO 42452
// end ; end ;
42450: GO 42389
42452: POP
42453: POP
// end ; end ;
42454: GO 42253
42456: POP
42457: POP
// if result and not asc then
42458: LD_VAR 0 6
42462: PUSH
42463: LD_VAR 0 4
42467: NOT
42468: AND
42469: IFFALSE 42544
// begin tmp := result ;
42471: LD_ADDR_VAR 0 9
42475: PUSH
42476: LD_VAR 0 6
42480: ST_TO_ADDR
// for i = tmp downto 1 do
42481: LD_ADDR_VAR 0 7
42485: PUSH
42486: DOUBLE
42487: LD_VAR 0 9
42491: INC
42492: ST_TO_ADDR
42493: LD_INT 1
42495: PUSH
42496: FOR_DOWNTO
42497: IFFALSE 42542
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42499: LD_ADDR_VAR 0 6
42503: PUSH
42504: LD_VAR 0 6
42508: PPUSH
42509: LD_VAR 0 9
42513: PUSH
42514: LD_VAR 0 7
42518: MINUS
42519: PUSH
42520: LD_INT 1
42522: PLUS
42523: PPUSH
42524: LD_VAR 0 9
42528: PUSH
42529: LD_VAR 0 7
42533: ARRAY
42534: PPUSH
42535: CALL_OW 1
42539: ST_TO_ADDR
42540: GO 42496
42542: POP
42543: POP
// end ; tmp := [ ] ;
42544: LD_ADDR_VAR 0 9
42548: PUSH
42549: EMPTY
42550: ST_TO_ADDR
// if mode then
42551: LD_VAR 0 5
42555: IFFALSE 42624
// begin for i = 1 to result do
42557: LD_ADDR_VAR 0 7
42561: PUSH
42562: DOUBLE
42563: LD_INT 1
42565: DEC
42566: ST_TO_ADDR
42567: LD_VAR 0 6
42571: PUSH
42572: FOR_TO
42573: IFFALSE 42612
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42575: LD_ADDR_VAR 0 9
42579: PUSH
42580: LD_VAR 0 9
42584: PPUSH
42585: LD_VAR 0 7
42589: PPUSH
42590: LD_VAR 0 6
42594: PUSH
42595: LD_VAR 0 7
42599: ARRAY
42600: PUSH
42601: LD_INT 1
42603: ARRAY
42604: PPUSH
42605: CALL_OW 1
42609: ST_TO_ADDR
42610: GO 42572
42612: POP
42613: POP
// result := tmp ;
42614: LD_ADDR_VAR 0 6
42618: PUSH
42619: LD_VAR 0 9
42623: ST_TO_ADDR
// end ; end ;
42624: LD_VAR 0 6
42628: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42629: LD_INT 0
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42637: LD_ADDR_VAR 0 5
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: ST_TO_ADDR
// if not x or not y then
42659: LD_VAR 0 2
42663: NOT
42664: PUSH
42665: LD_VAR 0 3
42669: NOT
42670: OR
42671: IFFALSE 42675
// exit ;
42673: GO 44325
// if not range then
42675: LD_VAR 0 4
42679: NOT
42680: IFFALSE 42690
// range := 10 ;
42682: LD_ADDR_VAR 0 4
42686: PUSH
42687: LD_INT 10
42689: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42690: LD_ADDR_VAR 0 8
42694: PUSH
42695: LD_INT 81
42697: PUSH
42698: LD_VAR 0 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 92
42709: PUSH
42710: LD_VAR 0 2
42714: PUSH
42715: LD_VAR 0 3
42719: PUSH
42720: LD_VAR 0 4
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 21
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: PPUSH
42753: CALL_OW 69
42757: ST_TO_ADDR
// if not tmp then
42758: LD_VAR 0 8
42762: NOT
42763: IFFALSE 42767
// exit ;
42765: GO 44325
// for i in tmp do
42767: LD_ADDR_VAR 0 6
42771: PUSH
42772: LD_VAR 0 8
42776: PUSH
42777: FOR_IN
42778: IFFALSE 44300
// begin points := [ 0 , 0 , 0 ] ;
42780: LD_ADDR_VAR 0 9
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// bpoints := 1 ;
42799: LD_ADDR_VAR 0 10
42803: PUSH
42804: LD_INT 1
42806: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42807: LD_VAR 0 6
42811: PPUSH
42812: CALL_OW 247
42816: PUSH
42817: LD_INT 1
42819: DOUBLE
42820: EQUAL
42821: IFTRUE 42825
42823: GO 43403
42825: POP
// begin if GetClass ( i ) = 1 then
42826: LD_VAR 0 6
42830: PPUSH
42831: CALL_OW 257
42835: PUSH
42836: LD_INT 1
42838: EQUAL
42839: IFFALSE 42860
// points := [ 10 , 5 , 3 ] ;
42841: LD_ADDR_VAR 0 9
42845: PUSH
42846: LD_INT 10
42848: PUSH
42849: LD_INT 5
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42860: LD_VAR 0 6
42864: PPUSH
42865: CALL_OW 257
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: LD_INT 4
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: IN
42884: IFFALSE 42905
// points := [ 3 , 2 , 1 ] ;
42886: LD_ADDR_VAR 0 9
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42905: LD_VAR 0 6
42909: PPUSH
42910: CALL_OW 257
42914: PUSH
42915: LD_INT 5
42917: EQUAL
42918: IFFALSE 42939
// points := [ 130 , 5 , 2 ] ;
42920: LD_ADDR_VAR 0 9
42924: PUSH
42925: LD_INT 130
42927: PUSH
42928: LD_INT 5
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42939: LD_VAR 0 6
42943: PPUSH
42944: CALL_OW 257
42948: PUSH
42949: LD_INT 8
42951: EQUAL
42952: IFFALSE 42973
// points := [ 35 , 35 , 30 ] ;
42954: LD_ADDR_VAR 0 9
42958: PUSH
42959: LD_INT 35
42961: PUSH
42962: LD_INT 35
42964: PUSH
42965: LD_INT 30
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: LIST
42972: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42973: LD_VAR 0 6
42977: PPUSH
42978: CALL_OW 257
42982: PUSH
42983: LD_INT 9
42985: EQUAL
42986: IFFALSE 43007
// points := [ 20 , 55 , 40 ] ;
42988: LD_ADDR_VAR 0 9
42992: PUSH
42993: LD_INT 20
42995: PUSH
42996: LD_INT 55
42998: PUSH
42999: LD_INT 40
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43007: LD_VAR 0 6
43011: PPUSH
43012: CALL_OW 257
43016: PUSH
43017: LD_INT 12
43019: PUSH
43020: LD_INT 16
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: IN
43027: IFFALSE 43048
// points := [ 5 , 3 , 2 ] ;
43029: LD_ADDR_VAR 0 9
43033: PUSH
43034: LD_INT 5
43036: PUSH
43037: LD_INT 3
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43048: LD_VAR 0 6
43052: PPUSH
43053: CALL_OW 257
43057: PUSH
43058: LD_INT 17
43060: EQUAL
43061: IFFALSE 43082
// points := [ 100 , 50 , 75 ] ;
43063: LD_ADDR_VAR 0 9
43067: PUSH
43068: LD_INT 100
43070: PUSH
43071: LD_INT 50
43073: PUSH
43074: LD_INT 75
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43082: LD_VAR 0 6
43086: PPUSH
43087: CALL_OW 257
43091: PUSH
43092: LD_INT 15
43094: EQUAL
43095: IFFALSE 43116
// points := [ 10 , 5 , 3 ] ;
43097: LD_ADDR_VAR 0 9
43101: PUSH
43102: LD_INT 10
43104: PUSH
43105: LD_INT 5
43107: PUSH
43108: LD_INT 3
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43116: LD_VAR 0 6
43120: PPUSH
43121: CALL_OW 257
43125: PUSH
43126: LD_INT 14
43128: EQUAL
43129: IFFALSE 43150
// points := [ 10 , 0 , 0 ] ;
43131: LD_ADDR_VAR 0 9
43135: PUSH
43136: LD_INT 10
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43150: LD_VAR 0 6
43154: PPUSH
43155: CALL_OW 257
43159: PUSH
43160: LD_INT 11
43162: EQUAL
43163: IFFALSE 43184
// points := [ 30 , 10 , 5 ] ;
43165: LD_ADDR_VAR 0 9
43169: PUSH
43170: LD_INT 30
43172: PUSH
43173: LD_INT 10
43175: PUSH
43176: LD_INT 5
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43184: LD_VAR 0 1
43188: PPUSH
43189: LD_INT 5
43191: PPUSH
43192: CALL_OW 321
43196: PUSH
43197: LD_INT 2
43199: EQUAL
43200: IFFALSE 43217
// bpoints := bpoints * 1.8 ;
43202: LD_ADDR_VAR 0 10
43206: PUSH
43207: LD_VAR 0 10
43211: PUSH
43212: LD_REAL  1.80000000000000E+0000
43215: MUL
43216: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43217: LD_VAR 0 6
43221: PPUSH
43222: CALL_OW 257
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: LD_INT 4
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: IN
43245: PUSH
43246: LD_VAR 0 1
43250: PPUSH
43251: LD_INT 51
43253: PPUSH
43254: CALL_OW 321
43258: PUSH
43259: LD_INT 2
43261: EQUAL
43262: AND
43263: IFFALSE 43280
// bpoints := bpoints * 1.2 ;
43265: LD_ADDR_VAR 0 10
43269: PUSH
43270: LD_VAR 0 10
43274: PUSH
43275: LD_REAL  1.20000000000000E+0000
43278: MUL
43279: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43280: LD_VAR 0 6
43284: PPUSH
43285: CALL_OW 257
43289: PUSH
43290: LD_INT 5
43292: PUSH
43293: LD_INT 7
43295: PUSH
43296: LD_INT 9
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: IN
43304: PUSH
43305: LD_VAR 0 1
43309: PPUSH
43310: LD_INT 52
43312: PPUSH
43313: CALL_OW 321
43317: PUSH
43318: LD_INT 2
43320: EQUAL
43321: AND
43322: IFFALSE 43339
// bpoints := bpoints * 1.5 ;
43324: LD_ADDR_VAR 0 10
43328: PUSH
43329: LD_VAR 0 10
43333: PUSH
43334: LD_REAL  1.50000000000000E+0000
43337: MUL
43338: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43339: LD_VAR 0 1
43343: PPUSH
43344: LD_INT 66
43346: PPUSH
43347: CALL_OW 321
43351: PUSH
43352: LD_INT 2
43354: EQUAL
43355: IFFALSE 43372
// bpoints := bpoints * 1.1 ;
43357: LD_ADDR_VAR 0 10
43361: PUSH
43362: LD_VAR 0 10
43366: PUSH
43367: LD_REAL  1.10000000000000E+0000
43370: MUL
43371: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43372: LD_ADDR_VAR 0 10
43376: PUSH
43377: LD_VAR 0 10
43381: PUSH
43382: LD_VAR 0 6
43386: PPUSH
43387: LD_INT 1
43389: PPUSH
43390: CALL_OW 259
43394: PUSH
43395: LD_REAL  1.15000000000000E+0000
43398: MUL
43399: MUL
43400: ST_TO_ADDR
// end ; unit_vehicle :
43401: GO 44229
43403: LD_INT 2
43405: DOUBLE
43406: EQUAL
43407: IFTRUE 43411
43409: GO 44217
43411: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43412: LD_VAR 0 6
43416: PPUSH
43417: CALL_OW 264
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 42
43427: PUSH
43428: LD_INT 24
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: IN
43436: IFFALSE 43457
// points := [ 25 , 5 , 3 ] ;
43438: LD_ADDR_VAR 0 9
43442: PUSH
43443: LD_INT 25
43445: PUSH
43446: LD_INT 5
43448: PUSH
43449: LD_INT 3
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43457: LD_VAR 0 6
43461: PPUSH
43462: CALL_OW 264
43466: PUSH
43467: LD_INT 4
43469: PUSH
43470: LD_INT 43
43472: PUSH
43473: LD_INT 25
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: IN
43481: IFFALSE 43502
// points := [ 40 , 15 , 5 ] ;
43483: LD_ADDR_VAR 0 9
43487: PUSH
43488: LD_INT 40
43490: PUSH
43491: LD_INT 15
43493: PUSH
43494: LD_INT 5
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43502: LD_VAR 0 6
43506: PPUSH
43507: CALL_OW 264
43511: PUSH
43512: LD_INT 3
43514: PUSH
43515: LD_INT 23
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: IN
43522: IFFALSE 43543
// points := [ 7 , 25 , 8 ] ;
43524: LD_ADDR_VAR 0 9
43528: PUSH
43529: LD_INT 7
43531: PUSH
43532: LD_INT 25
43534: PUSH
43535: LD_INT 8
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43543: LD_VAR 0 6
43547: PPUSH
43548: CALL_OW 264
43552: PUSH
43553: LD_INT 5
43555: PUSH
43556: LD_INT 27
43558: PUSH
43559: LD_INT 44
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: IN
43567: IFFALSE 43588
// points := [ 14 , 50 , 16 ] ;
43569: LD_ADDR_VAR 0 9
43573: PUSH
43574: LD_INT 14
43576: PUSH
43577: LD_INT 50
43579: PUSH
43580: LD_INT 16
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43588: LD_VAR 0 6
43592: PPUSH
43593: CALL_OW 264
43597: PUSH
43598: LD_INT 6
43600: PUSH
43601: LD_INT 46
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: IN
43608: IFFALSE 43629
// points := [ 32 , 120 , 70 ] ;
43610: LD_ADDR_VAR 0 9
43614: PUSH
43615: LD_INT 32
43617: PUSH
43618: LD_INT 120
43620: PUSH
43621: LD_INT 70
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43629: LD_VAR 0 6
43633: PPUSH
43634: CALL_OW 264
43638: PUSH
43639: LD_INT 7
43641: PUSH
43642: LD_INT 28
43644: PUSH
43645: LD_INT 45
43647: PUSH
43648: LD_INT 92
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: IN
43657: IFFALSE 43678
// points := [ 35 , 20 , 45 ] ;
43659: LD_ADDR_VAR 0 9
43663: PUSH
43664: LD_INT 35
43666: PUSH
43667: LD_INT 20
43669: PUSH
43670: LD_INT 45
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: LIST
43677: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43678: LD_VAR 0 6
43682: PPUSH
43683: CALL_OW 264
43687: PUSH
43688: LD_INT 47
43690: PUSH
43691: EMPTY
43692: LIST
43693: IN
43694: IFFALSE 43715
// points := [ 67 , 45 , 75 ] ;
43696: LD_ADDR_VAR 0 9
43700: PUSH
43701: LD_INT 67
43703: PUSH
43704: LD_INT 45
43706: PUSH
43707: LD_INT 75
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: LIST
43714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43715: LD_VAR 0 6
43719: PPUSH
43720: CALL_OW 264
43724: PUSH
43725: LD_INT 26
43727: PUSH
43728: EMPTY
43729: LIST
43730: IN
43731: IFFALSE 43752
// points := [ 120 , 30 , 80 ] ;
43733: LD_ADDR_VAR 0 9
43737: PUSH
43738: LD_INT 120
43740: PUSH
43741: LD_INT 30
43743: PUSH
43744: LD_INT 80
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43752: LD_VAR 0 6
43756: PPUSH
43757: CALL_OW 264
43761: PUSH
43762: LD_INT 22
43764: PUSH
43765: EMPTY
43766: LIST
43767: IN
43768: IFFALSE 43789
// points := [ 40 , 1 , 1 ] ;
43770: LD_ADDR_VAR 0 9
43774: PUSH
43775: LD_INT 40
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43789: LD_VAR 0 6
43793: PPUSH
43794: CALL_OW 264
43798: PUSH
43799: LD_INT 29
43801: PUSH
43802: EMPTY
43803: LIST
43804: IN
43805: IFFALSE 43826
// points := [ 70 , 200 , 400 ] ;
43807: LD_ADDR_VAR 0 9
43811: PUSH
43812: LD_INT 70
43814: PUSH
43815: LD_INT 200
43817: PUSH
43818: LD_INT 400
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: LIST
43825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43826: LD_VAR 0 6
43830: PPUSH
43831: CALL_OW 264
43835: PUSH
43836: LD_INT 14
43838: PUSH
43839: LD_INT 53
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: IN
43846: IFFALSE 43867
// points := [ 40 , 10 , 20 ] ;
43848: LD_ADDR_VAR 0 9
43852: PUSH
43853: LD_INT 40
43855: PUSH
43856: LD_INT 10
43858: PUSH
43859: LD_INT 20
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43867: LD_VAR 0 6
43871: PPUSH
43872: CALL_OW 264
43876: PUSH
43877: LD_INT 9
43879: PUSH
43880: EMPTY
43881: LIST
43882: IN
43883: IFFALSE 43904
// points := [ 5 , 70 , 20 ] ;
43885: LD_ADDR_VAR 0 9
43889: PUSH
43890: LD_INT 5
43892: PUSH
43893: LD_INT 70
43895: PUSH
43896: LD_INT 20
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43904: LD_VAR 0 6
43908: PPUSH
43909: CALL_OW 264
43913: PUSH
43914: LD_INT 10
43916: PUSH
43917: EMPTY
43918: LIST
43919: IN
43920: IFFALSE 43941
// points := [ 35 , 110 , 70 ] ;
43922: LD_ADDR_VAR 0 9
43926: PUSH
43927: LD_INT 35
43929: PUSH
43930: LD_INT 110
43932: PUSH
43933: LD_INT 70
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43941: LD_VAR 0 6
43945: PPUSH
43946: CALL_OW 265
43950: PUSH
43951: LD_INT 25
43953: EQUAL
43954: IFFALSE 43975
// points := [ 80 , 65 , 100 ] ;
43956: LD_ADDR_VAR 0 9
43960: PUSH
43961: LD_INT 80
43963: PUSH
43964: LD_INT 65
43966: PUSH
43967: LD_INT 100
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43975: LD_VAR 0 6
43979: PPUSH
43980: CALL_OW 263
43984: PUSH
43985: LD_INT 1
43987: EQUAL
43988: IFFALSE 44023
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43990: LD_ADDR_VAR 0 10
43994: PUSH
43995: LD_VAR 0 10
43999: PUSH
44000: LD_VAR 0 6
44004: PPUSH
44005: CALL_OW 311
44009: PPUSH
44010: LD_INT 3
44012: PPUSH
44013: CALL_OW 259
44017: PUSH
44018: LD_INT 4
44020: MUL
44021: MUL
44022: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44023: LD_VAR 0 6
44027: PPUSH
44028: CALL_OW 263
44032: PUSH
44033: LD_INT 2
44035: EQUAL
44036: IFFALSE 44087
// begin j := IsControledBy ( i ) ;
44038: LD_ADDR_VAR 0 7
44042: PUSH
44043: LD_VAR 0 6
44047: PPUSH
44048: CALL_OW 312
44052: ST_TO_ADDR
// if j then
44053: LD_VAR 0 7
44057: IFFALSE 44087
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44059: LD_ADDR_VAR 0 10
44063: PUSH
44064: LD_VAR 0 10
44068: PUSH
44069: LD_VAR 0 7
44073: PPUSH
44074: LD_INT 3
44076: PPUSH
44077: CALL_OW 259
44081: PUSH
44082: LD_INT 3
44084: MUL
44085: MUL
44086: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44087: LD_VAR 0 6
44091: PPUSH
44092: CALL_OW 264
44096: PUSH
44097: LD_INT 5
44099: PUSH
44100: LD_INT 6
44102: PUSH
44103: LD_INT 46
44105: PUSH
44106: LD_INT 44
44108: PUSH
44109: LD_INT 47
44111: PUSH
44112: LD_INT 45
44114: PUSH
44115: LD_INT 28
44117: PUSH
44118: LD_INT 7
44120: PUSH
44121: LD_INT 27
44123: PUSH
44124: LD_INT 29
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: IN
44139: PUSH
44140: LD_VAR 0 1
44144: PPUSH
44145: LD_INT 52
44147: PPUSH
44148: CALL_OW 321
44152: PUSH
44153: LD_INT 2
44155: EQUAL
44156: AND
44157: IFFALSE 44174
// bpoints := bpoints * 1.2 ;
44159: LD_ADDR_VAR 0 10
44163: PUSH
44164: LD_VAR 0 10
44168: PUSH
44169: LD_REAL  1.20000000000000E+0000
44172: MUL
44173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44174: LD_VAR 0 6
44178: PPUSH
44179: CALL_OW 264
44183: PUSH
44184: LD_INT 6
44186: PUSH
44187: LD_INT 46
44189: PUSH
44190: LD_INT 47
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: IN
44198: IFFALSE 44215
// bpoints := bpoints * 1.2 ;
44200: LD_ADDR_VAR 0 10
44204: PUSH
44205: LD_VAR 0 10
44209: PUSH
44210: LD_REAL  1.20000000000000E+0000
44213: MUL
44214: ST_TO_ADDR
// end ; unit_building :
44215: GO 44229
44217: LD_INT 3
44219: DOUBLE
44220: EQUAL
44221: IFTRUE 44225
44223: GO 44228
44225: POP
// ; end ;
44226: GO 44229
44228: POP
// for j = 1 to 3 do
44229: LD_ADDR_VAR 0 7
44233: PUSH
44234: DOUBLE
44235: LD_INT 1
44237: DEC
44238: ST_TO_ADDR
44239: LD_INT 3
44241: PUSH
44242: FOR_TO
44243: IFFALSE 44296
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44245: LD_ADDR_VAR 0 5
44249: PUSH
44250: LD_VAR 0 5
44254: PPUSH
44255: LD_VAR 0 7
44259: PPUSH
44260: LD_VAR 0 5
44264: PUSH
44265: LD_VAR 0 7
44269: ARRAY
44270: PUSH
44271: LD_VAR 0 9
44275: PUSH
44276: LD_VAR 0 7
44280: ARRAY
44281: PUSH
44282: LD_VAR 0 10
44286: MUL
44287: PLUS
44288: PPUSH
44289: CALL_OW 1
44293: ST_TO_ADDR
44294: GO 44242
44296: POP
44297: POP
// end ;
44298: GO 42777
44300: POP
44301: POP
// result := Replace ( result , 4 , tmp ) ;
44302: LD_ADDR_VAR 0 5
44306: PUSH
44307: LD_VAR 0 5
44311: PPUSH
44312: LD_INT 4
44314: PPUSH
44315: LD_VAR 0 8
44319: PPUSH
44320: CALL_OW 1
44324: ST_TO_ADDR
// end ;
44325: LD_VAR 0 5
44329: RET
// export function DangerAtRange ( unit , range ) ; begin
44330: LD_INT 0
44332: PPUSH
// if not unit then
44333: LD_VAR 0 1
44337: NOT
44338: IFFALSE 44342
// exit ;
44340: GO 44387
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44342: LD_ADDR_VAR 0 3
44346: PUSH
44347: LD_VAR 0 1
44351: PPUSH
44352: CALL_OW 255
44356: PPUSH
44357: LD_VAR 0 1
44361: PPUSH
44362: CALL_OW 250
44366: PPUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: CALL_OW 251
44376: PPUSH
44377: LD_VAR 0 2
44381: PPUSH
44382: CALL 42629 0 4
44386: ST_TO_ADDR
// end ;
44387: LD_VAR 0 3
44391: RET
// export function DangerInArea ( side , area ) ; begin
44392: LD_INT 0
44394: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44395: LD_ADDR_VAR 0 3
44399: PUSH
44400: LD_VAR 0 2
44404: PPUSH
44405: LD_INT 81
44407: PUSH
44408: LD_VAR 0 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PPUSH
44417: CALL_OW 70
44421: ST_TO_ADDR
// end ;
44422: LD_VAR 0 3
44426: RET
// export function IsExtension ( b ) ; begin
44427: LD_INT 0
44429: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44430: LD_ADDR_VAR 0 2
44434: PUSH
44435: LD_VAR 0 1
44439: PUSH
44440: LD_INT 23
44442: PUSH
44443: LD_INT 20
44445: PUSH
44446: LD_INT 22
44448: PUSH
44449: LD_INT 17
44451: PUSH
44452: LD_INT 24
44454: PUSH
44455: LD_INT 21
44457: PUSH
44458: LD_INT 19
44460: PUSH
44461: LD_INT 16
44463: PUSH
44464: LD_INT 25
44466: PUSH
44467: LD_INT 18
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: IN
44482: ST_TO_ADDR
// end ;
44483: LD_VAR 0 2
44487: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44488: LD_INT 0
44490: PPUSH
44491: PPUSH
44492: PPUSH
// result := [ ] ;
44493: LD_ADDR_VAR 0 4
44497: PUSH
44498: EMPTY
44499: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44500: LD_ADDR_VAR 0 5
44504: PUSH
44505: LD_VAR 0 2
44509: PPUSH
44510: LD_INT 21
44512: PUSH
44513: LD_INT 3
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PPUSH
44520: CALL_OW 70
44524: ST_TO_ADDR
// if not tmp then
44525: LD_VAR 0 5
44529: NOT
44530: IFFALSE 44534
// exit ;
44532: GO 44598
// if checkLink then
44534: LD_VAR 0 3
44538: IFFALSE 44588
// begin for i in tmp do
44540: LD_ADDR_VAR 0 6
44544: PUSH
44545: LD_VAR 0 5
44549: PUSH
44550: FOR_IN
44551: IFFALSE 44586
// if GetBase ( i ) <> base then
44553: LD_VAR 0 6
44557: PPUSH
44558: CALL_OW 274
44562: PUSH
44563: LD_VAR 0 1
44567: NONEQUAL
44568: IFFALSE 44584
// ComLinkToBase ( base , i ) ;
44570: LD_VAR 0 1
44574: PPUSH
44575: LD_VAR 0 6
44579: PPUSH
44580: CALL_OW 169
44584: GO 44550
44586: POP
44587: POP
// end ; result := tmp ;
44588: LD_ADDR_VAR 0 4
44592: PUSH
44593: LD_VAR 0 5
44597: ST_TO_ADDR
// end ;
44598: LD_VAR 0 4
44602: RET
// export function ComComplete ( units , b ) ; var i ; begin
44603: LD_INT 0
44605: PPUSH
44606: PPUSH
// if not units then
44607: LD_VAR 0 1
44611: NOT
44612: IFFALSE 44616
// exit ;
44614: GO 44706
// for i in units do
44616: LD_ADDR_VAR 0 4
44620: PUSH
44621: LD_VAR 0 1
44625: PUSH
44626: FOR_IN
44627: IFFALSE 44704
// if BuildingStatus ( b ) = bs_build then
44629: LD_VAR 0 2
44633: PPUSH
44634: CALL_OW 461
44638: PUSH
44639: LD_INT 1
44641: EQUAL
44642: IFFALSE 44702
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44644: LD_VAR 0 4
44648: PPUSH
44649: LD_STRING h
44651: PUSH
44652: LD_VAR 0 2
44656: PPUSH
44657: CALL_OW 250
44661: PUSH
44662: LD_VAR 0 2
44666: PPUSH
44667: CALL_OW 251
44671: PUSH
44672: LD_VAR 0 2
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: PUSH
44695: EMPTY
44696: LIST
44697: PPUSH
44698: CALL_OW 446
44702: GO 44626
44704: POP
44705: POP
// end ;
44706: LD_VAR 0 3
44710: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44711: LD_INT 0
44713: PPUSH
44714: PPUSH
44715: PPUSH
44716: PPUSH
44717: PPUSH
44718: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44719: LD_VAR 0 1
44723: NOT
44724: PUSH
44725: LD_VAR 0 1
44729: PPUSH
44730: CALL_OW 263
44734: PUSH
44735: LD_INT 2
44737: NONEQUAL
44738: OR
44739: IFFALSE 44743
// exit ;
44741: GO 45059
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44743: LD_ADDR_VAR 0 6
44747: PUSH
44748: LD_INT 22
44750: PUSH
44751: LD_VAR 0 1
44755: PPUSH
44756: CALL_OW 255
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 30
44770: PUSH
44771: LD_INT 36
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 34
44780: PUSH
44781: LD_INT 31
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PPUSH
44797: CALL_OW 69
44801: ST_TO_ADDR
// if not tmp then
44802: LD_VAR 0 6
44806: NOT
44807: IFFALSE 44811
// exit ;
44809: GO 45059
// result := [ ] ;
44811: LD_ADDR_VAR 0 2
44815: PUSH
44816: EMPTY
44817: ST_TO_ADDR
// for i in tmp do
44818: LD_ADDR_VAR 0 3
44822: PUSH
44823: LD_VAR 0 6
44827: PUSH
44828: FOR_IN
44829: IFFALSE 44900
// begin t := UnitsInside ( i ) ;
44831: LD_ADDR_VAR 0 4
44835: PUSH
44836: LD_VAR 0 3
44840: PPUSH
44841: CALL_OW 313
44845: ST_TO_ADDR
// if t then
44846: LD_VAR 0 4
44850: IFFALSE 44898
// for j in t do
44852: LD_ADDR_VAR 0 7
44856: PUSH
44857: LD_VAR 0 4
44861: PUSH
44862: FOR_IN
44863: IFFALSE 44896
// result := Replace ( result , result + 1 , j ) ;
44865: LD_ADDR_VAR 0 2
44869: PUSH
44870: LD_VAR 0 2
44874: PPUSH
44875: LD_VAR 0 2
44879: PUSH
44880: LD_INT 1
44882: PLUS
44883: PPUSH
44884: LD_VAR 0 7
44888: PPUSH
44889: CALL_OW 1
44893: ST_TO_ADDR
44894: GO 44862
44896: POP
44897: POP
// end ;
44898: GO 44828
44900: POP
44901: POP
// if not result then
44902: LD_VAR 0 2
44906: NOT
44907: IFFALSE 44911
// exit ;
44909: GO 45059
// mech := result [ 1 ] ;
44911: LD_ADDR_VAR 0 5
44915: PUSH
44916: LD_VAR 0 2
44920: PUSH
44921: LD_INT 1
44923: ARRAY
44924: ST_TO_ADDR
// if result > 1 then
44925: LD_VAR 0 2
44929: PUSH
44930: LD_INT 1
44932: GREATER
44933: IFFALSE 45045
// begin for i = 2 to result do
44935: LD_ADDR_VAR 0 3
44939: PUSH
44940: DOUBLE
44941: LD_INT 2
44943: DEC
44944: ST_TO_ADDR
44945: LD_VAR 0 2
44949: PUSH
44950: FOR_TO
44951: IFFALSE 45043
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44953: LD_ADDR_VAR 0 4
44957: PUSH
44958: LD_VAR 0 2
44962: PUSH
44963: LD_VAR 0 3
44967: ARRAY
44968: PPUSH
44969: LD_INT 3
44971: PPUSH
44972: CALL_OW 259
44976: PUSH
44977: LD_VAR 0 2
44981: PUSH
44982: LD_VAR 0 3
44986: ARRAY
44987: PPUSH
44988: CALL_OW 432
44992: MINUS
44993: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44994: LD_VAR 0 4
44998: PUSH
44999: LD_VAR 0 5
45003: PPUSH
45004: LD_INT 3
45006: PPUSH
45007: CALL_OW 259
45011: PUSH
45012: LD_VAR 0 5
45016: PPUSH
45017: CALL_OW 432
45021: MINUS
45022: GREATEREQUAL
45023: IFFALSE 45041
// mech := result [ i ] ;
45025: LD_ADDR_VAR 0 5
45029: PUSH
45030: LD_VAR 0 2
45034: PUSH
45035: LD_VAR 0 3
45039: ARRAY
45040: ST_TO_ADDR
// end ;
45041: GO 44950
45043: POP
45044: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45045: LD_VAR 0 1
45049: PPUSH
45050: LD_VAR 0 5
45054: PPUSH
45055: CALL_OW 135
// end ;
45059: LD_VAR 0 2
45063: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45064: LD_INT 0
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
// result := [ ] ;
45079: LD_ADDR_VAR 0 7
45083: PUSH
45084: EMPTY
45085: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45086: LD_VAR 0 1
45090: PPUSH
45091: CALL_OW 266
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: IN
45106: NOT
45107: IFFALSE 45111
// exit ;
45109: GO 46745
// if name then
45111: LD_VAR 0 3
45115: IFFALSE 45131
// SetBName ( base_dep , name ) ;
45117: LD_VAR 0 1
45121: PPUSH
45122: LD_VAR 0 3
45126: PPUSH
45127: CALL_OW 500
// base := GetBase ( base_dep ) ;
45131: LD_ADDR_VAR 0 15
45135: PUSH
45136: LD_VAR 0 1
45140: PPUSH
45141: CALL_OW 274
45145: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45146: LD_ADDR_VAR 0 16
45150: PUSH
45151: LD_VAR 0 1
45155: PPUSH
45156: CALL_OW 255
45160: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45161: LD_ADDR_VAR 0 17
45165: PUSH
45166: LD_VAR 0 1
45170: PPUSH
45171: CALL_OW 248
45175: ST_TO_ADDR
// if sources then
45176: LD_VAR 0 5
45180: IFFALSE 45227
// for i = 1 to 3 do
45182: LD_ADDR_VAR 0 8
45186: PUSH
45187: DOUBLE
45188: LD_INT 1
45190: DEC
45191: ST_TO_ADDR
45192: LD_INT 3
45194: PUSH
45195: FOR_TO
45196: IFFALSE 45225
// AddResourceType ( base , i , sources [ i ] ) ;
45198: LD_VAR 0 15
45202: PPUSH
45203: LD_VAR 0 8
45207: PPUSH
45208: LD_VAR 0 5
45212: PUSH
45213: LD_VAR 0 8
45217: ARRAY
45218: PPUSH
45219: CALL_OW 276
45223: GO 45195
45225: POP
45226: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45227: LD_ADDR_VAR 0 18
45231: PUSH
45232: LD_VAR 0 15
45236: PPUSH
45237: LD_VAR 0 2
45241: PPUSH
45242: LD_INT 1
45244: PPUSH
45245: CALL 44488 0 3
45249: ST_TO_ADDR
// InitHc ;
45250: CALL_OW 19
// InitUc ;
45254: CALL_OW 18
// uc_side := side ;
45258: LD_ADDR_OWVAR 20
45262: PUSH
45263: LD_VAR 0 16
45267: ST_TO_ADDR
// uc_nation := nation ;
45268: LD_ADDR_OWVAR 21
45272: PUSH
45273: LD_VAR 0 17
45277: ST_TO_ADDR
// if buildings then
45278: LD_VAR 0 18
45282: IFFALSE 46604
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45284: LD_ADDR_VAR 0 19
45288: PUSH
45289: LD_VAR 0 18
45293: PPUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 30
45299: PUSH
45300: LD_INT 29
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 30
45309: PUSH
45310: LD_INT 30
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: PPUSH
45322: CALL_OW 72
45326: ST_TO_ADDR
// if tmp then
45327: LD_VAR 0 19
45331: IFFALSE 45379
// for i in tmp do
45333: LD_ADDR_VAR 0 8
45337: PUSH
45338: LD_VAR 0 19
45342: PUSH
45343: FOR_IN
45344: IFFALSE 45377
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45346: LD_VAR 0 8
45350: PPUSH
45351: CALL_OW 250
45355: PPUSH
45356: LD_VAR 0 8
45360: PPUSH
45361: CALL_OW 251
45365: PPUSH
45366: LD_VAR 0 16
45370: PPUSH
45371: CALL_OW 441
45375: GO 45343
45377: POP
45378: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45379: LD_VAR 0 18
45383: PPUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 30
45389: PUSH
45390: LD_INT 32
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 30
45399: PUSH
45400: LD_INT 33
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: PPUSH
45412: CALL_OW 72
45416: IFFALSE 45504
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45418: LD_ADDR_VAR 0 8
45422: PUSH
45423: LD_VAR 0 18
45427: PPUSH
45428: LD_INT 2
45430: PUSH
45431: LD_INT 30
45433: PUSH
45434: LD_INT 32
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 30
45443: PUSH
45444: LD_INT 33
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: PPUSH
45456: CALL_OW 72
45460: PUSH
45461: FOR_IN
45462: IFFALSE 45502
// begin if not GetBWeapon ( i ) then
45464: LD_VAR 0 8
45468: PPUSH
45469: CALL_OW 269
45473: NOT
45474: IFFALSE 45500
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45476: LD_VAR 0 8
45480: PPUSH
45481: LD_VAR 0 8
45485: PPUSH
45486: LD_VAR 0 2
45490: PPUSH
45491: CALL 46750 0 2
45495: PPUSH
45496: CALL_OW 431
// end ;
45500: GO 45461
45502: POP
45503: POP
// end ; for i = 1 to personel do
45504: LD_ADDR_VAR 0 8
45508: PUSH
45509: DOUBLE
45510: LD_INT 1
45512: DEC
45513: ST_TO_ADDR
45514: LD_VAR 0 6
45518: PUSH
45519: FOR_TO
45520: IFFALSE 46584
// begin if i > 4 then
45522: LD_VAR 0 8
45526: PUSH
45527: LD_INT 4
45529: GREATER
45530: IFFALSE 45534
// break ;
45532: GO 46584
// case i of 1 :
45534: LD_VAR 0 8
45538: PUSH
45539: LD_INT 1
45541: DOUBLE
45542: EQUAL
45543: IFTRUE 45547
45545: GO 45627
45547: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45548: LD_ADDR_VAR 0 12
45552: PUSH
45553: LD_VAR 0 18
45557: PPUSH
45558: LD_INT 22
45560: PUSH
45561: LD_VAR 0 16
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 58
45572: PUSH
45573: EMPTY
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 30
45581: PUSH
45582: LD_INT 32
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 30
45591: PUSH
45592: LD_INT 4
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 30
45601: PUSH
45602: LD_INT 5
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: PPUSH
45620: CALL_OW 72
45624: ST_TO_ADDR
45625: GO 45849
45627: LD_INT 2
45629: DOUBLE
45630: EQUAL
45631: IFTRUE 45635
45633: GO 45697
45635: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45636: LD_ADDR_VAR 0 12
45640: PUSH
45641: LD_VAR 0 18
45645: PPUSH
45646: LD_INT 22
45648: PUSH
45649: LD_VAR 0 16
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 30
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 30
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PPUSH
45690: CALL_OW 72
45694: ST_TO_ADDR
45695: GO 45849
45697: LD_INT 3
45699: DOUBLE
45700: EQUAL
45701: IFTRUE 45705
45703: GO 45767
45705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45706: LD_ADDR_VAR 0 12
45710: PUSH
45711: LD_VAR 0 18
45715: PPUSH
45716: LD_INT 22
45718: PUSH
45719: LD_VAR 0 16
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 30
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 30
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PPUSH
45760: CALL_OW 72
45764: ST_TO_ADDR
45765: GO 45849
45767: LD_INT 4
45769: DOUBLE
45770: EQUAL
45771: IFTRUE 45775
45773: GO 45848
45775: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45776: LD_ADDR_VAR 0 12
45780: PUSH
45781: LD_VAR 0 18
45785: PPUSH
45786: LD_INT 22
45788: PUSH
45789: LD_VAR 0 16
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: PUSH
45801: LD_INT 30
45803: PUSH
45804: LD_INT 6
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 30
45813: PUSH
45814: LD_INT 7
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 30
45823: PUSH
45824: LD_INT 8
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PPUSH
45841: CALL_OW 72
45845: ST_TO_ADDR
45846: GO 45849
45848: POP
// if i = 1 then
45849: LD_VAR 0 8
45853: PUSH
45854: LD_INT 1
45856: EQUAL
45857: IFFALSE 45968
// begin tmp := [ ] ;
45859: LD_ADDR_VAR 0 19
45863: PUSH
45864: EMPTY
45865: ST_TO_ADDR
// for j in f do
45866: LD_ADDR_VAR 0 9
45870: PUSH
45871: LD_VAR 0 12
45875: PUSH
45876: FOR_IN
45877: IFFALSE 45950
// if GetBType ( j ) = b_bunker then
45879: LD_VAR 0 9
45883: PPUSH
45884: CALL_OW 266
45888: PUSH
45889: LD_INT 32
45891: EQUAL
45892: IFFALSE 45919
// tmp := Insert ( tmp , 1 , j ) else
45894: LD_ADDR_VAR 0 19
45898: PUSH
45899: LD_VAR 0 19
45903: PPUSH
45904: LD_INT 1
45906: PPUSH
45907: LD_VAR 0 9
45911: PPUSH
45912: CALL_OW 2
45916: ST_TO_ADDR
45917: GO 45948
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45919: LD_ADDR_VAR 0 19
45923: PUSH
45924: LD_VAR 0 19
45928: PPUSH
45929: LD_VAR 0 19
45933: PUSH
45934: LD_INT 1
45936: PLUS
45937: PPUSH
45938: LD_VAR 0 9
45942: PPUSH
45943: CALL_OW 2
45947: ST_TO_ADDR
45948: GO 45876
45950: POP
45951: POP
// if tmp then
45952: LD_VAR 0 19
45956: IFFALSE 45968
// f := tmp ;
45958: LD_ADDR_VAR 0 12
45962: PUSH
45963: LD_VAR 0 19
45967: ST_TO_ADDR
// end ; x := personel [ i ] ;
45968: LD_ADDR_VAR 0 13
45972: PUSH
45973: LD_VAR 0 6
45977: PUSH
45978: LD_VAR 0 8
45982: ARRAY
45983: ST_TO_ADDR
// if x = - 1 then
45984: LD_VAR 0 13
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: EQUAL
45993: IFFALSE 46202
// begin for j in f do
45995: LD_ADDR_VAR 0 9
45999: PUSH
46000: LD_VAR 0 12
46004: PUSH
46005: FOR_IN
46006: IFFALSE 46198
// repeat InitHc ;
46008: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46012: LD_VAR 0 9
46016: PPUSH
46017: CALL_OW 266
46021: PUSH
46022: LD_INT 5
46024: EQUAL
46025: IFFALSE 46095
// begin if UnitsInside ( j ) < 3 then
46027: LD_VAR 0 9
46031: PPUSH
46032: CALL_OW 313
46036: PUSH
46037: LD_INT 3
46039: LESS
46040: IFFALSE 46076
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46042: LD_INT 0
46044: PPUSH
46045: LD_INT 5
46047: PUSH
46048: LD_INT 8
46050: PUSH
46051: LD_INT 9
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: PUSH
46059: LD_VAR 0 17
46063: ARRAY
46064: PPUSH
46065: LD_VAR 0 4
46069: PPUSH
46070: CALL_OW 380
46074: GO 46093
// PrepareHuman ( false , i , skill ) ;
46076: LD_INT 0
46078: PPUSH
46079: LD_VAR 0 8
46083: PPUSH
46084: LD_VAR 0 4
46088: PPUSH
46089: CALL_OW 380
// end else
46093: GO 46112
// PrepareHuman ( false , i , skill ) ;
46095: LD_INT 0
46097: PPUSH
46098: LD_VAR 0 8
46102: PPUSH
46103: LD_VAR 0 4
46107: PPUSH
46108: CALL_OW 380
// un := CreateHuman ;
46112: LD_ADDR_VAR 0 14
46116: PUSH
46117: CALL_OW 44
46121: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46122: LD_ADDR_VAR 0 7
46126: PUSH
46127: LD_VAR 0 7
46131: PPUSH
46132: LD_INT 1
46134: PPUSH
46135: LD_VAR 0 14
46139: PPUSH
46140: CALL_OW 2
46144: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46145: LD_VAR 0 14
46149: PPUSH
46150: LD_VAR 0 9
46154: PPUSH
46155: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46159: LD_VAR 0 9
46163: PPUSH
46164: CALL_OW 313
46168: PUSH
46169: LD_INT 6
46171: EQUAL
46172: PUSH
46173: LD_VAR 0 9
46177: PPUSH
46178: CALL_OW 266
46182: PUSH
46183: LD_INT 32
46185: PUSH
46186: LD_INT 31
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: IN
46193: OR
46194: IFFALSE 46008
46196: GO 46005
46198: POP
46199: POP
// end else
46200: GO 46582
// for j = 1 to x do
46202: LD_ADDR_VAR 0 9
46206: PUSH
46207: DOUBLE
46208: LD_INT 1
46210: DEC
46211: ST_TO_ADDR
46212: LD_VAR 0 13
46216: PUSH
46217: FOR_TO
46218: IFFALSE 46580
// begin InitHc ;
46220: CALL_OW 19
// if not f then
46224: LD_VAR 0 12
46228: NOT
46229: IFFALSE 46318
// begin PrepareHuman ( false , i , skill ) ;
46231: LD_INT 0
46233: PPUSH
46234: LD_VAR 0 8
46238: PPUSH
46239: LD_VAR 0 4
46243: PPUSH
46244: CALL_OW 380
// un := CreateHuman ;
46248: LD_ADDR_VAR 0 14
46252: PUSH
46253: CALL_OW 44
46257: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46258: LD_ADDR_VAR 0 7
46262: PUSH
46263: LD_VAR 0 7
46267: PPUSH
46268: LD_INT 1
46270: PPUSH
46271: LD_VAR 0 14
46275: PPUSH
46276: CALL_OW 2
46280: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46281: LD_VAR 0 14
46285: PPUSH
46286: LD_VAR 0 1
46290: PPUSH
46291: CALL_OW 250
46295: PPUSH
46296: LD_VAR 0 1
46300: PPUSH
46301: CALL_OW 251
46305: PPUSH
46306: LD_INT 10
46308: PPUSH
46309: LD_INT 0
46311: PPUSH
46312: CALL_OW 50
// continue ;
46316: GO 46217
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46318: LD_VAR 0 12
46322: PUSH
46323: LD_INT 1
46325: ARRAY
46326: PPUSH
46327: CALL_OW 313
46331: PUSH
46332: LD_VAR 0 12
46336: PUSH
46337: LD_INT 1
46339: ARRAY
46340: PPUSH
46341: CALL_OW 266
46345: PUSH
46346: LD_INT 32
46348: PUSH
46349: LD_INT 31
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: IN
46356: AND
46357: PUSH
46358: LD_VAR 0 12
46362: PUSH
46363: LD_INT 1
46365: ARRAY
46366: PPUSH
46367: CALL_OW 313
46371: PUSH
46372: LD_INT 6
46374: EQUAL
46375: OR
46376: IFFALSE 46396
// f := Delete ( f , 1 ) ;
46378: LD_ADDR_VAR 0 12
46382: PUSH
46383: LD_VAR 0 12
46387: PPUSH
46388: LD_INT 1
46390: PPUSH
46391: CALL_OW 3
46395: ST_TO_ADDR
// if not f then
46396: LD_VAR 0 12
46400: NOT
46401: IFFALSE 46419
// begin x := x + 2 ;
46403: LD_ADDR_VAR 0 13
46407: PUSH
46408: LD_VAR 0 13
46412: PUSH
46413: LD_INT 2
46415: PLUS
46416: ST_TO_ADDR
// continue ;
46417: GO 46217
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46419: LD_VAR 0 12
46423: PUSH
46424: LD_INT 1
46426: ARRAY
46427: PPUSH
46428: CALL_OW 266
46432: PUSH
46433: LD_INT 5
46435: EQUAL
46436: IFFALSE 46510
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46438: LD_VAR 0 12
46442: PUSH
46443: LD_INT 1
46445: ARRAY
46446: PPUSH
46447: CALL_OW 313
46451: PUSH
46452: LD_INT 3
46454: LESS
46455: IFFALSE 46491
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46457: LD_INT 0
46459: PPUSH
46460: LD_INT 5
46462: PUSH
46463: LD_INT 8
46465: PUSH
46466: LD_INT 9
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: PUSH
46474: LD_VAR 0 17
46478: ARRAY
46479: PPUSH
46480: LD_VAR 0 4
46484: PPUSH
46485: CALL_OW 380
46489: GO 46508
// PrepareHuman ( false , i , skill ) ;
46491: LD_INT 0
46493: PPUSH
46494: LD_VAR 0 8
46498: PPUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: CALL_OW 380
// end else
46508: GO 46527
// PrepareHuman ( false , i , skill ) ;
46510: LD_INT 0
46512: PPUSH
46513: LD_VAR 0 8
46517: PPUSH
46518: LD_VAR 0 4
46522: PPUSH
46523: CALL_OW 380
// un := CreateHuman ;
46527: LD_ADDR_VAR 0 14
46531: PUSH
46532: CALL_OW 44
46536: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46537: LD_ADDR_VAR 0 7
46541: PUSH
46542: LD_VAR 0 7
46546: PPUSH
46547: LD_INT 1
46549: PPUSH
46550: LD_VAR 0 14
46554: PPUSH
46555: CALL_OW 2
46559: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46560: LD_VAR 0 14
46564: PPUSH
46565: LD_VAR 0 12
46569: PUSH
46570: LD_INT 1
46572: ARRAY
46573: PPUSH
46574: CALL_OW 52
// end ;
46578: GO 46217
46580: POP
46581: POP
// end ;
46582: GO 45519
46584: POP
46585: POP
// result := result ^ buildings ;
46586: LD_ADDR_VAR 0 7
46590: PUSH
46591: LD_VAR 0 7
46595: PUSH
46596: LD_VAR 0 18
46600: ADD
46601: ST_TO_ADDR
// end else
46602: GO 46745
// begin for i = 1 to personel do
46604: LD_ADDR_VAR 0 8
46608: PUSH
46609: DOUBLE
46610: LD_INT 1
46612: DEC
46613: ST_TO_ADDR
46614: LD_VAR 0 6
46618: PUSH
46619: FOR_TO
46620: IFFALSE 46743
// begin if i > 4 then
46622: LD_VAR 0 8
46626: PUSH
46627: LD_INT 4
46629: GREATER
46630: IFFALSE 46634
// break ;
46632: GO 46743
// x := personel [ i ] ;
46634: LD_ADDR_VAR 0 13
46638: PUSH
46639: LD_VAR 0 6
46643: PUSH
46644: LD_VAR 0 8
46648: ARRAY
46649: ST_TO_ADDR
// if x = - 1 then
46650: LD_VAR 0 13
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: EQUAL
46659: IFFALSE 46663
// continue ;
46661: GO 46619
// PrepareHuman ( false , i , skill ) ;
46663: LD_INT 0
46665: PPUSH
46666: LD_VAR 0 8
46670: PPUSH
46671: LD_VAR 0 4
46675: PPUSH
46676: CALL_OW 380
// un := CreateHuman ;
46680: LD_ADDR_VAR 0 14
46684: PUSH
46685: CALL_OW 44
46689: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46690: LD_VAR 0 14
46694: PPUSH
46695: LD_VAR 0 1
46699: PPUSH
46700: CALL_OW 250
46704: PPUSH
46705: LD_VAR 0 1
46709: PPUSH
46710: CALL_OW 251
46714: PPUSH
46715: LD_INT 10
46717: PPUSH
46718: LD_INT 0
46720: PPUSH
46721: CALL_OW 50
// result := result ^ un ;
46725: LD_ADDR_VAR 0 7
46729: PUSH
46730: LD_VAR 0 7
46734: PUSH
46735: LD_VAR 0 14
46739: ADD
46740: ST_TO_ADDR
// end ;
46741: GO 46619
46743: POP
46744: POP
// end ; end ;
46745: LD_VAR 0 7
46749: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46750: LD_INT 0
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
// result := false ;
46768: LD_ADDR_VAR 0 3
46772: PUSH
46773: LD_INT 0
46775: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46776: LD_VAR 0 1
46780: NOT
46781: PUSH
46782: LD_VAR 0 1
46786: PPUSH
46787: CALL_OW 266
46791: PUSH
46792: LD_INT 32
46794: PUSH
46795: LD_INT 33
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: IN
46802: NOT
46803: OR
46804: IFFALSE 46808
// exit ;
46806: GO 47917
// nat := GetNation ( tower ) ;
46808: LD_ADDR_VAR 0 12
46812: PUSH
46813: LD_VAR 0 1
46817: PPUSH
46818: CALL_OW 248
46822: ST_TO_ADDR
// side := GetSide ( tower ) ;
46823: LD_ADDR_VAR 0 16
46827: PUSH
46828: LD_VAR 0 1
46832: PPUSH
46833: CALL_OW 255
46837: ST_TO_ADDR
// x := GetX ( tower ) ;
46838: LD_ADDR_VAR 0 10
46842: PUSH
46843: LD_VAR 0 1
46847: PPUSH
46848: CALL_OW 250
46852: ST_TO_ADDR
// y := GetY ( tower ) ;
46853: LD_ADDR_VAR 0 11
46857: PUSH
46858: LD_VAR 0 1
46862: PPUSH
46863: CALL_OW 251
46867: ST_TO_ADDR
// if not x or not y then
46868: LD_VAR 0 10
46872: NOT
46873: PUSH
46874: LD_VAR 0 11
46878: NOT
46879: OR
46880: IFFALSE 46884
// exit ;
46882: GO 47917
// weapon := 0 ;
46884: LD_ADDR_VAR 0 18
46888: PUSH
46889: LD_INT 0
46891: ST_TO_ADDR
// fac_list := [ ] ;
46892: LD_ADDR_VAR 0 17
46896: PUSH
46897: EMPTY
46898: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46899: LD_ADDR_VAR 0 6
46903: PUSH
46904: LD_VAR 0 1
46908: PPUSH
46909: CALL_OW 274
46913: PPUSH
46914: LD_VAR 0 2
46918: PPUSH
46919: LD_INT 0
46921: PPUSH
46922: CALL 44488 0 3
46926: PPUSH
46927: LD_INT 30
46929: PUSH
46930: LD_INT 3
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PPUSH
46937: CALL_OW 72
46941: ST_TO_ADDR
// if not factories then
46942: LD_VAR 0 6
46946: NOT
46947: IFFALSE 46951
// exit ;
46949: GO 47917
// for i in factories do
46951: LD_ADDR_VAR 0 8
46955: PUSH
46956: LD_VAR 0 6
46960: PUSH
46961: FOR_IN
46962: IFFALSE 46987
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46964: LD_ADDR_VAR 0 17
46968: PUSH
46969: LD_VAR 0 17
46973: PUSH
46974: LD_VAR 0 8
46978: PPUSH
46979: CALL_OW 478
46983: UNION
46984: ST_TO_ADDR
46985: GO 46961
46987: POP
46988: POP
// if not fac_list then
46989: LD_VAR 0 17
46993: NOT
46994: IFFALSE 46998
// exit ;
46996: GO 47917
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46998: LD_ADDR_VAR 0 5
47002: PUSH
47003: LD_INT 4
47005: PUSH
47006: LD_INT 5
47008: PUSH
47009: LD_INT 9
47011: PUSH
47012: LD_INT 10
47014: PUSH
47015: LD_INT 6
47017: PUSH
47018: LD_INT 7
47020: PUSH
47021: LD_INT 11
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 27
47035: PUSH
47036: LD_INT 28
47038: PUSH
47039: LD_INT 26
47041: PUSH
47042: LD_INT 30
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 43
47053: PUSH
47054: LD_INT 44
47056: PUSH
47057: LD_INT 46
47059: PUSH
47060: LD_INT 45
47062: PUSH
47063: LD_INT 47
47065: PUSH
47066: LD_INT 49
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: LIST
47081: PUSH
47082: LD_VAR 0 12
47086: ARRAY
47087: ST_TO_ADDR
// list := list isect fac_list ;
47088: LD_ADDR_VAR 0 5
47092: PUSH
47093: LD_VAR 0 5
47097: PUSH
47098: LD_VAR 0 17
47102: ISECT
47103: ST_TO_ADDR
// if not list then
47104: LD_VAR 0 5
47108: NOT
47109: IFFALSE 47113
// exit ;
47111: GO 47917
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47113: LD_VAR 0 12
47117: PUSH
47118: LD_INT 3
47120: EQUAL
47121: PUSH
47122: LD_INT 49
47124: PUSH
47125: LD_VAR 0 5
47129: IN
47130: AND
47131: PUSH
47132: LD_INT 31
47134: PPUSH
47135: LD_VAR 0 16
47139: PPUSH
47140: CALL_OW 321
47144: PUSH
47145: LD_INT 2
47147: EQUAL
47148: AND
47149: IFFALSE 47209
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47151: LD_INT 22
47153: PUSH
47154: LD_VAR 0 16
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 35
47165: PUSH
47166: LD_INT 49
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 91
47175: PUSH
47176: LD_VAR 0 1
47180: PUSH
47181: LD_INT 10
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: PPUSH
47194: CALL_OW 69
47198: NOT
47199: IFFALSE 47209
// weapon := ru_time_lapser ;
47201: LD_ADDR_VAR 0 18
47205: PUSH
47206: LD_INT 49
47208: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47209: LD_VAR 0 12
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: IN
47224: PUSH
47225: LD_INT 11
47227: PUSH
47228: LD_VAR 0 5
47232: IN
47233: PUSH
47234: LD_INT 30
47236: PUSH
47237: LD_VAR 0 5
47241: IN
47242: OR
47243: AND
47244: PUSH
47245: LD_INT 6
47247: PPUSH
47248: LD_VAR 0 16
47252: PPUSH
47253: CALL_OW 321
47257: PUSH
47258: LD_INT 2
47260: EQUAL
47261: AND
47262: IFFALSE 47427
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47264: LD_INT 22
47266: PUSH
47267: LD_VAR 0 16
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 35
47281: PUSH
47282: LD_INT 11
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 35
47291: PUSH
47292: LD_INT 30
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 91
47306: PUSH
47307: LD_VAR 0 1
47311: PUSH
47312: LD_INT 18
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: PPUSH
47325: CALL_OW 69
47329: NOT
47330: PUSH
47331: LD_INT 22
47333: PUSH
47334: LD_VAR 0 16
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 30
47348: PUSH
47349: LD_INT 32
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 30
47358: PUSH
47359: LD_INT 33
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 91
47373: PUSH
47374: LD_VAR 0 1
47378: PUSH
47379: LD_INT 12
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: PPUSH
47395: CALL_OW 69
47399: PUSH
47400: LD_INT 2
47402: GREATER
47403: AND
47404: IFFALSE 47427
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47406: LD_ADDR_VAR 0 18
47410: PUSH
47411: LD_INT 11
47413: PUSH
47414: LD_INT 30
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_VAR 0 12
47425: ARRAY
47426: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47427: LD_VAR 0 18
47431: NOT
47432: PUSH
47433: LD_INT 40
47435: PPUSH
47436: LD_VAR 0 16
47440: PPUSH
47441: CALL_OW 321
47445: PUSH
47446: LD_INT 2
47448: EQUAL
47449: AND
47450: PUSH
47451: LD_INT 7
47453: PUSH
47454: LD_VAR 0 5
47458: IN
47459: PUSH
47460: LD_INT 28
47462: PUSH
47463: LD_VAR 0 5
47467: IN
47468: OR
47469: PUSH
47470: LD_INT 45
47472: PUSH
47473: LD_VAR 0 5
47477: IN
47478: OR
47479: AND
47480: IFFALSE 47734
// begin hex := GetHexInfo ( x , y ) ;
47482: LD_ADDR_VAR 0 4
47486: PUSH
47487: LD_VAR 0 10
47491: PPUSH
47492: LD_VAR 0 11
47496: PPUSH
47497: CALL_OW 546
47501: ST_TO_ADDR
// if hex [ 1 ] then
47502: LD_VAR 0 4
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: IFFALSE 47514
// exit ;
47512: GO 47917
// height := hex [ 2 ] ;
47514: LD_ADDR_VAR 0 15
47518: PUSH
47519: LD_VAR 0 4
47523: PUSH
47524: LD_INT 2
47526: ARRAY
47527: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47528: LD_ADDR_VAR 0 14
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 5
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: ST_TO_ADDR
// for i in tmp do
47551: LD_ADDR_VAR 0 8
47555: PUSH
47556: LD_VAR 0 14
47560: PUSH
47561: FOR_IN
47562: IFFALSE 47732
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47564: LD_ADDR_VAR 0 9
47568: PUSH
47569: LD_VAR 0 10
47573: PPUSH
47574: LD_VAR 0 8
47578: PPUSH
47579: LD_INT 5
47581: PPUSH
47582: CALL_OW 272
47586: PUSH
47587: LD_VAR 0 11
47591: PPUSH
47592: LD_VAR 0 8
47596: PPUSH
47597: LD_INT 5
47599: PPUSH
47600: CALL_OW 273
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47609: LD_VAR 0 9
47613: PUSH
47614: LD_INT 1
47616: ARRAY
47617: PPUSH
47618: LD_VAR 0 9
47622: PUSH
47623: LD_INT 2
47625: ARRAY
47626: PPUSH
47627: CALL_OW 488
47631: IFFALSE 47730
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47633: LD_ADDR_VAR 0 4
47637: PUSH
47638: LD_VAR 0 9
47642: PUSH
47643: LD_INT 1
47645: ARRAY
47646: PPUSH
47647: LD_VAR 0 9
47651: PUSH
47652: LD_INT 2
47654: ARRAY
47655: PPUSH
47656: CALL_OW 546
47660: ST_TO_ADDR
// if hex [ 1 ] then
47661: LD_VAR 0 4
47665: PUSH
47666: LD_INT 1
47668: ARRAY
47669: IFFALSE 47673
// continue ;
47671: GO 47561
// h := hex [ 2 ] ;
47673: LD_ADDR_VAR 0 13
47677: PUSH
47678: LD_VAR 0 4
47682: PUSH
47683: LD_INT 2
47685: ARRAY
47686: ST_TO_ADDR
// if h + 7 < height then
47687: LD_VAR 0 13
47691: PUSH
47692: LD_INT 7
47694: PLUS
47695: PUSH
47696: LD_VAR 0 15
47700: LESS
47701: IFFALSE 47730
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47703: LD_ADDR_VAR 0 18
47707: PUSH
47708: LD_INT 7
47710: PUSH
47711: LD_INT 28
47713: PUSH
47714: LD_INT 45
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: PUSH
47722: LD_VAR 0 12
47726: ARRAY
47727: ST_TO_ADDR
// break ;
47728: GO 47732
// end ; end ; end ;
47730: GO 47561
47732: POP
47733: POP
// end ; if not weapon then
47734: LD_VAR 0 18
47738: NOT
47739: IFFALSE 47799
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47741: LD_ADDR_VAR 0 5
47745: PUSH
47746: LD_VAR 0 5
47750: PUSH
47751: LD_INT 11
47753: PUSH
47754: LD_INT 30
47756: PUSH
47757: LD_INT 49
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: DIFF
47765: ST_TO_ADDR
// if not list then
47766: LD_VAR 0 5
47770: NOT
47771: IFFALSE 47775
// exit ;
47773: GO 47917
// weapon := list [ rand ( 1 , list ) ] ;
47775: LD_ADDR_VAR 0 18
47779: PUSH
47780: LD_VAR 0 5
47784: PUSH
47785: LD_INT 1
47787: PPUSH
47788: LD_VAR 0 5
47792: PPUSH
47793: CALL_OW 12
47797: ARRAY
47798: ST_TO_ADDR
// end ; if weapon then
47799: LD_VAR 0 18
47803: IFFALSE 47917
// begin tmp := CostOfWeapon ( weapon ) ;
47805: LD_ADDR_VAR 0 14
47809: PUSH
47810: LD_VAR 0 18
47814: PPUSH
47815: CALL_OW 451
47819: ST_TO_ADDR
// j := GetBase ( tower ) ;
47820: LD_ADDR_VAR 0 9
47824: PUSH
47825: LD_VAR 0 1
47829: PPUSH
47830: CALL_OW 274
47834: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47835: LD_VAR 0 9
47839: PPUSH
47840: LD_INT 1
47842: PPUSH
47843: CALL_OW 275
47847: PUSH
47848: LD_VAR 0 14
47852: PUSH
47853: LD_INT 1
47855: ARRAY
47856: GREATEREQUAL
47857: PUSH
47858: LD_VAR 0 9
47862: PPUSH
47863: LD_INT 2
47865: PPUSH
47866: CALL_OW 275
47870: PUSH
47871: LD_VAR 0 14
47875: PUSH
47876: LD_INT 2
47878: ARRAY
47879: GREATEREQUAL
47880: AND
47881: PUSH
47882: LD_VAR 0 9
47886: PPUSH
47887: LD_INT 3
47889: PPUSH
47890: CALL_OW 275
47894: PUSH
47895: LD_VAR 0 14
47899: PUSH
47900: LD_INT 3
47902: ARRAY
47903: GREATEREQUAL
47904: AND
47905: IFFALSE 47917
// result := weapon ;
47907: LD_ADDR_VAR 0 3
47911: PUSH
47912: LD_VAR 0 18
47916: ST_TO_ADDR
// end ; end ;
47917: LD_VAR 0 3
47921: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47922: LD_INT 0
47924: PPUSH
47925: PPUSH
// result := true ;
47926: LD_ADDR_VAR 0 3
47930: PUSH
47931: LD_INT 1
47933: ST_TO_ADDR
// if array1 = array2 then
47934: LD_VAR 0 1
47938: PUSH
47939: LD_VAR 0 2
47943: EQUAL
47944: IFFALSE 48004
// begin for i = 1 to array1 do
47946: LD_ADDR_VAR 0 4
47950: PUSH
47951: DOUBLE
47952: LD_INT 1
47954: DEC
47955: ST_TO_ADDR
47956: LD_VAR 0 1
47960: PUSH
47961: FOR_TO
47962: IFFALSE 48000
// if array1 [ i ] <> array2 [ i ] then
47964: LD_VAR 0 1
47968: PUSH
47969: LD_VAR 0 4
47973: ARRAY
47974: PUSH
47975: LD_VAR 0 2
47979: PUSH
47980: LD_VAR 0 4
47984: ARRAY
47985: NONEQUAL
47986: IFFALSE 47998
// begin result := false ;
47988: LD_ADDR_VAR 0 3
47992: PUSH
47993: LD_INT 0
47995: ST_TO_ADDR
// break ;
47996: GO 48000
// end ;
47998: GO 47961
48000: POP
48001: POP
// end else
48002: GO 48012
// result := false ;
48004: LD_ADDR_VAR 0 3
48008: PUSH
48009: LD_INT 0
48011: ST_TO_ADDR
// end ;
48012: LD_VAR 0 3
48016: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48017: LD_INT 0
48019: PPUSH
48020: PPUSH
// if not array1 or not array2 then
48021: LD_VAR 0 1
48025: NOT
48026: PUSH
48027: LD_VAR 0 2
48031: NOT
48032: OR
48033: IFFALSE 48037
// exit ;
48035: GO 48101
// result := true ;
48037: LD_ADDR_VAR 0 3
48041: PUSH
48042: LD_INT 1
48044: ST_TO_ADDR
// for i = 1 to array1 do
48045: LD_ADDR_VAR 0 4
48049: PUSH
48050: DOUBLE
48051: LD_INT 1
48053: DEC
48054: ST_TO_ADDR
48055: LD_VAR 0 1
48059: PUSH
48060: FOR_TO
48061: IFFALSE 48099
// if array1 [ i ] <> array2 [ i ] then
48063: LD_VAR 0 1
48067: PUSH
48068: LD_VAR 0 4
48072: ARRAY
48073: PUSH
48074: LD_VAR 0 2
48078: PUSH
48079: LD_VAR 0 4
48083: ARRAY
48084: NONEQUAL
48085: IFFALSE 48097
// begin result := false ;
48087: LD_ADDR_VAR 0 3
48091: PUSH
48092: LD_INT 0
48094: ST_TO_ADDR
// break ;
48095: GO 48099
// end ;
48097: GO 48060
48099: POP
48100: POP
// end ;
48101: LD_VAR 0 3
48105: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48106: LD_INT 0
48108: PPUSH
48109: PPUSH
48110: PPUSH
// pom := GetBase ( fac ) ;
48111: LD_ADDR_VAR 0 5
48115: PUSH
48116: LD_VAR 0 1
48120: PPUSH
48121: CALL_OW 274
48125: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48126: LD_ADDR_VAR 0 4
48130: PUSH
48131: LD_VAR 0 2
48135: PUSH
48136: LD_INT 1
48138: ARRAY
48139: PPUSH
48140: LD_VAR 0 2
48144: PUSH
48145: LD_INT 2
48147: ARRAY
48148: PPUSH
48149: LD_VAR 0 2
48153: PUSH
48154: LD_INT 3
48156: ARRAY
48157: PPUSH
48158: LD_VAR 0 2
48162: PUSH
48163: LD_INT 4
48165: ARRAY
48166: PPUSH
48167: CALL_OW 449
48171: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48172: LD_ADDR_VAR 0 3
48176: PUSH
48177: LD_VAR 0 5
48181: PPUSH
48182: LD_INT 1
48184: PPUSH
48185: CALL_OW 275
48189: PUSH
48190: LD_VAR 0 4
48194: PUSH
48195: LD_INT 1
48197: ARRAY
48198: GREATEREQUAL
48199: PUSH
48200: LD_VAR 0 5
48204: PPUSH
48205: LD_INT 2
48207: PPUSH
48208: CALL_OW 275
48212: PUSH
48213: LD_VAR 0 4
48217: PUSH
48218: LD_INT 2
48220: ARRAY
48221: GREATEREQUAL
48222: AND
48223: PUSH
48224: LD_VAR 0 5
48228: PPUSH
48229: LD_INT 3
48231: PPUSH
48232: CALL_OW 275
48236: PUSH
48237: LD_VAR 0 4
48241: PUSH
48242: LD_INT 3
48244: ARRAY
48245: GREATEREQUAL
48246: AND
48247: ST_TO_ADDR
// end ;
48248: LD_VAR 0 3
48252: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48253: LD_INT 0
48255: PPUSH
48256: PPUSH
48257: PPUSH
48258: PPUSH
// pom := GetBase ( building ) ;
48259: LD_ADDR_VAR 0 3
48263: PUSH
48264: LD_VAR 0 1
48268: PPUSH
48269: CALL_OW 274
48273: ST_TO_ADDR
// if not pom then
48274: LD_VAR 0 3
48278: NOT
48279: IFFALSE 48283
// exit ;
48281: GO 48453
// btype := GetBType ( building ) ;
48283: LD_ADDR_VAR 0 5
48287: PUSH
48288: LD_VAR 0 1
48292: PPUSH
48293: CALL_OW 266
48297: ST_TO_ADDR
// if btype = b_armoury then
48298: LD_VAR 0 5
48302: PUSH
48303: LD_INT 4
48305: EQUAL
48306: IFFALSE 48316
// btype := b_barracks ;
48308: LD_ADDR_VAR 0 5
48312: PUSH
48313: LD_INT 5
48315: ST_TO_ADDR
// if btype = b_depot then
48316: LD_VAR 0 5
48320: PUSH
48321: LD_INT 0
48323: EQUAL
48324: IFFALSE 48334
// btype := b_warehouse ;
48326: LD_ADDR_VAR 0 5
48330: PUSH
48331: LD_INT 1
48333: ST_TO_ADDR
// if btype = b_workshop then
48334: LD_VAR 0 5
48338: PUSH
48339: LD_INT 2
48341: EQUAL
48342: IFFALSE 48352
// btype := b_factory ;
48344: LD_ADDR_VAR 0 5
48348: PUSH
48349: LD_INT 3
48351: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48352: LD_ADDR_VAR 0 4
48356: PUSH
48357: LD_VAR 0 5
48361: PPUSH
48362: LD_VAR 0 1
48366: PPUSH
48367: CALL_OW 248
48371: PPUSH
48372: CALL_OW 450
48376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48377: LD_ADDR_VAR 0 2
48381: PUSH
48382: LD_VAR 0 3
48386: PPUSH
48387: LD_INT 1
48389: PPUSH
48390: CALL_OW 275
48394: PUSH
48395: LD_VAR 0 4
48399: PUSH
48400: LD_INT 1
48402: ARRAY
48403: GREATEREQUAL
48404: PUSH
48405: LD_VAR 0 3
48409: PPUSH
48410: LD_INT 2
48412: PPUSH
48413: CALL_OW 275
48417: PUSH
48418: LD_VAR 0 4
48422: PUSH
48423: LD_INT 2
48425: ARRAY
48426: GREATEREQUAL
48427: AND
48428: PUSH
48429: LD_VAR 0 3
48433: PPUSH
48434: LD_INT 3
48436: PPUSH
48437: CALL_OW 275
48441: PUSH
48442: LD_VAR 0 4
48446: PUSH
48447: LD_INT 3
48449: ARRAY
48450: GREATEREQUAL
48451: AND
48452: ST_TO_ADDR
// end ;
48453: LD_VAR 0 2
48457: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48458: LD_INT 0
48460: PPUSH
48461: PPUSH
48462: PPUSH
// pom := GetBase ( building ) ;
48463: LD_ADDR_VAR 0 4
48467: PUSH
48468: LD_VAR 0 1
48472: PPUSH
48473: CALL_OW 274
48477: ST_TO_ADDR
// if not pom then
48478: LD_VAR 0 4
48482: NOT
48483: IFFALSE 48487
// exit ;
48485: GO 48588
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48487: LD_ADDR_VAR 0 5
48491: PUSH
48492: LD_VAR 0 2
48496: PPUSH
48497: LD_VAR 0 1
48501: PPUSH
48502: CALL_OW 248
48506: PPUSH
48507: CALL_OW 450
48511: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48512: LD_ADDR_VAR 0 3
48516: PUSH
48517: LD_VAR 0 4
48521: PPUSH
48522: LD_INT 1
48524: PPUSH
48525: CALL_OW 275
48529: PUSH
48530: LD_VAR 0 5
48534: PUSH
48535: LD_INT 1
48537: ARRAY
48538: GREATEREQUAL
48539: PUSH
48540: LD_VAR 0 4
48544: PPUSH
48545: LD_INT 2
48547: PPUSH
48548: CALL_OW 275
48552: PUSH
48553: LD_VAR 0 5
48557: PUSH
48558: LD_INT 2
48560: ARRAY
48561: GREATEREQUAL
48562: AND
48563: PUSH
48564: LD_VAR 0 4
48568: PPUSH
48569: LD_INT 3
48571: PPUSH
48572: CALL_OW 275
48576: PUSH
48577: LD_VAR 0 5
48581: PUSH
48582: LD_INT 3
48584: ARRAY
48585: GREATEREQUAL
48586: AND
48587: ST_TO_ADDR
// end ;
48588: LD_VAR 0 3
48592: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48593: LD_INT 0
48595: PPUSH
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
48600: PPUSH
48601: PPUSH
48602: PPUSH
48603: PPUSH
48604: PPUSH
48605: PPUSH
// result := false ;
48606: LD_ADDR_VAR 0 8
48610: PUSH
48611: LD_INT 0
48613: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48614: LD_VAR 0 5
48618: NOT
48619: PUSH
48620: LD_VAR 0 1
48624: NOT
48625: OR
48626: PUSH
48627: LD_VAR 0 2
48631: NOT
48632: OR
48633: PUSH
48634: LD_VAR 0 3
48638: NOT
48639: OR
48640: IFFALSE 48644
// exit ;
48642: GO 49458
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48644: LD_ADDR_VAR 0 14
48648: PUSH
48649: LD_VAR 0 1
48653: PPUSH
48654: LD_VAR 0 2
48658: PPUSH
48659: LD_VAR 0 3
48663: PPUSH
48664: LD_VAR 0 4
48668: PPUSH
48669: LD_VAR 0 5
48673: PUSH
48674: LD_INT 1
48676: ARRAY
48677: PPUSH
48678: CALL_OW 248
48682: PPUSH
48683: LD_INT 0
48685: PPUSH
48686: CALL 50711 0 6
48690: ST_TO_ADDR
// if not hexes then
48691: LD_VAR 0 14
48695: NOT
48696: IFFALSE 48700
// exit ;
48698: GO 49458
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48700: LD_ADDR_VAR 0 17
48704: PUSH
48705: LD_VAR 0 5
48709: PPUSH
48710: LD_INT 22
48712: PUSH
48713: LD_VAR 0 13
48717: PPUSH
48718: CALL_OW 255
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 30
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 30
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PPUSH
48759: CALL_OW 72
48763: ST_TO_ADDR
// for i = 1 to hexes do
48764: LD_ADDR_VAR 0 9
48768: PUSH
48769: DOUBLE
48770: LD_INT 1
48772: DEC
48773: ST_TO_ADDR
48774: LD_VAR 0 14
48778: PUSH
48779: FOR_TO
48780: IFFALSE 49456
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48782: LD_ADDR_VAR 0 13
48786: PUSH
48787: LD_VAR 0 14
48791: PUSH
48792: LD_VAR 0 9
48796: ARRAY
48797: PUSH
48798: LD_INT 1
48800: ARRAY
48801: PPUSH
48802: LD_VAR 0 14
48806: PUSH
48807: LD_VAR 0 9
48811: ARRAY
48812: PUSH
48813: LD_INT 2
48815: ARRAY
48816: PPUSH
48817: CALL_OW 428
48821: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48822: LD_VAR 0 14
48826: PUSH
48827: LD_VAR 0 9
48831: ARRAY
48832: PUSH
48833: LD_INT 1
48835: ARRAY
48836: PPUSH
48837: LD_VAR 0 14
48841: PUSH
48842: LD_VAR 0 9
48846: ARRAY
48847: PUSH
48848: LD_INT 2
48850: ARRAY
48851: PPUSH
48852: CALL_OW 351
48856: PUSH
48857: LD_VAR 0 14
48861: PUSH
48862: LD_VAR 0 9
48866: ARRAY
48867: PUSH
48868: LD_INT 1
48870: ARRAY
48871: PPUSH
48872: LD_VAR 0 14
48876: PUSH
48877: LD_VAR 0 9
48881: ARRAY
48882: PUSH
48883: LD_INT 2
48885: ARRAY
48886: PPUSH
48887: CALL_OW 488
48891: NOT
48892: OR
48893: PUSH
48894: LD_VAR 0 13
48898: PPUSH
48899: CALL_OW 247
48903: PUSH
48904: LD_INT 3
48906: EQUAL
48907: OR
48908: IFFALSE 48914
// exit ;
48910: POP
48911: POP
48912: GO 49458
// if not tmp then
48914: LD_VAR 0 13
48918: NOT
48919: IFFALSE 48923
// continue ;
48921: GO 48779
// result := true ;
48923: LD_ADDR_VAR 0 8
48927: PUSH
48928: LD_INT 1
48930: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48931: LD_VAR 0 6
48935: PUSH
48936: LD_VAR 0 13
48940: PPUSH
48941: CALL_OW 247
48945: PUSH
48946: LD_INT 2
48948: EQUAL
48949: AND
48950: PUSH
48951: LD_VAR 0 13
48955: PPUSH
48956: CALL_OW 263
48960: PUSH
48961: LD_INT 1
48963: EQUAL
48964: AND
48965: IFFALSE 49129
// begin if IsDrivenBy ( tmp ) then
48967: LD_VAR 0 13
48971: PPUSH
48972: CALL_OW 311
48976: IFFALSE 48980
// continue ;
48978: GO 48779
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48980: LD_VAR 0 6
48984: PPUSH
48985: LD_INT 3
48987: PUSH
48988: LD_INT 60
48990: PUSH
48991: EMPTY
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: LD_INT 55
49003: PUSH
49004: EMPTY
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PPUSH
49015: CALL_OW 72
49019: IFFALSE 49127
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49021: LD_ADDR_VAR 0 18
49025: PUSH
49026: LD_VAR 0 6
49030: PPUSH
49031: LD_INT 3
49033: PUSH
49034: LD_INT 60
49036: PUSH
49037: EMPTY
49038: LIST
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 3
49046: PUSH
49047: LD_INT 55
49049: PUSH
49050: EMPTY
49051: LIST
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PPUSH
49061: CALL_OW 72
49065: PUSH
49066: LD_INT 1
49068: ARRAY
49069: ST_TO_ADDR
// if IsInUnit ( driver ) then
49070: LD_VAR 0 18
49074: PPUSH
49075: CALL_OW 310
49079: IFFALSE 49090
// ComExit ( driver ) ;
49081: LD_VAR 0 18
49085: PPUSH
49086: CALL 74492 0 1
// AddComEnterUnit ( driver , tmp ) ;
49090: LD_VAR 0 18
49094: PPUSH
49095: LD_VAR 0 13
49099: PPUSH
49100: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49104: LD_VAR 0 18
49108: PPUSH
49109: LD_VAR 0 7
49113: PPUSH
49114: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49118: LD_VAR 0 18
49122: PPUSH
49123: CALL_OW 181
// end ; continue ;
49127: GO 48779
// end ; if not cleaners or not tmp in cleaners then
49129: LD_VAR 0 6
49133: NOT
49134: PUSH
49135: LD_VAR 0 13
49139: PUSH
49140: LD_VAR 0 6
49144: IN
49145: NOT
49146: OR
49147: IFFALSE 49454
// begin if dep then
49149: LD_VAR 0 17
49153: IFFALSE 49289
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49155: LD_ADDR_VAR 0 16
49159: PUSH
49160: LD_VAR 0 17
49164: PUSH
49165: LD_INT 1
49167: ARRAY
49168: PPUSH
49169: CALL_OW 250
49173: PPUSH
49174: LD_VAR 0 17
49178: PUSH
49179: LD_INT 1
49181: ARRAY
49182: PPUSH
49183: CALL_OW 254
49187: PPUSH
49188: LD_INT 5
49190: PPUSH
49191: CALL_OW 272
49195: PUSH
49196: LD_VAR 0 17
49200: PUSH
49201: LD_INT 1
49203: ARRAY
49204: PPUSH
49205: CALL_OW 251
49209: PPUSH
49210: LD_VAR 0 17
49214: PUSH
49215: LD_INT 1
49217: ARRAY
49218: PPUSH
49219: CALL_OW 254
49223: PPUSH
49224: LD_INT 5
49226: PPUSH
49227: CALL_OW 273
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49236: LD_VAR 0 16
49240: PUSH
49241: LD_INT 1
49243: ARRAY
49244: PPUSH
49245: LD_VAR 0 16
49249: PUSH
49250: LD_INT 2
49252: ARRAY
49253: PPUSH
49254: CALL_OW 488
49258: IFFALSE 49289
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49260: LD_VAR 0 13
49264: PPUSH
49265: LD_VAR 0 16
49269: PUSH
49270: LD_INT 1
49272: ARRAY
49273: PPUSH
49274: LD_VAR 0 16
49278: PUSH
49279: LD_INT 2
49281: ARRAY
49282: PPUSH
49283: CALL_OW 111
// continue ;
49287: GO 48779
// end ; end ; r := GetDir ( tmp ) ;
49289: LD_ADDR_VAR 0 15
49293: PUSH
49294: LD_VAR 0 13
49298: PPUSH
49299: CALL_OW 254
49303: ST_TO_ADDR
// if r = 5 then
49304: LD_VAR 0 15
49308: PUSH
49309: LD_INT 5
49311: EQUAL
49312: IFFALSE 49322
// r := 0 ;
49314: LD_ADDR_VAR 0 15
49318: PUSH
49319: LD_INT 0
49321: ST_TO_ADDR
// for j = r to 5 do
49322: LD_ADDR_VAR 0 10
49326: PUSH
49327: DOUBLE
49328: LD_VAR 0 15
49332: DEC
49333: ST_TO_ADDR
49334: LD_INT 5
49336: PUSH
49337: FOR_TO
49338: IFFALSE 49452
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49340: LD_ADDR_VAR 0 11
49344: PUSH
49345: LD_VAR 0 13
49349: PPUSH
49350: CALL_OW 250
49354: PPUSH
49355: LD_VAR 0 10
49359: PPUSH
49360: LD_INT 2
49362: PPUSH
49363: CALL_OW 272
49367: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49368: LD_ADDR_VAR 0 12
49372: PUSH
49373: LD_VAR 0 13
49377: PPUSH
49378: CALL_OW 251
49382: PPUSH
49383: LD_VAR 0 10
49387: PPUSH
49388: LD_INT 2
49390: PPUSH
49391: CALL_OW 273
49395: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49396: LD_VAR 0 11
49400: PPUSH
49401: LD_VAR 0 12
49405: PPUSH
49406: CALL_OW 488
49410: PUSH
49411: LD_VAR 0 11
49415: PPUSH
49416: LD_VAR 0 12
49420: PPUSH
49421: CALL_OW 428
49425: NOT
49426: AND
49427: IFFALSE 49450
// begin ComMoveXY ( tmp , _x , _y ) ;
49429: LD_VAR 0 13
49433: PPUSH
49434: LD_VAR 0 11
49438: PPUSH
49439: LD_VAR 0 12
49443: PPUSH
49444: CALL_OW 111
// break ;
49448: GO 49452
// end ; end ;
49450: GO 49337
49452: POP
49453: POP
// end ; end ;
49454: GO 48779
49456: POP
49457: POP
// end ;
49458: LD_VAR 0 8
49462: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49463: LD_INT 0
49465: PPUSH
// result := true ;
49466: LD_ADDR_VAR 0 3
49470: PUSH
49471: LD_INT 1
49473: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49474: LD_VAR 0 2
49478: PUSH
49479: LD_INT 24
49481: DOUBLE
49482: EQUAL
49483: IFTRUE 49493
49485: LD_INT 33
49487: DOUBLE
49488: EQUAL
49489: IFTRUE 49493
49491: GO 49518
49493: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49494: LD_ADDR_VAR 0 3
49498: PUSH
49499: LD_INT 32
49501: PPUSH
49502: LD_VAR 0 1
49506: PPUSH
49507: CALL_OW 321
49511: PUSH
49512: LD_INT 2
49514: EQUAL
49515: ST_TO_ADDR
49516: GO 49834
49518: LD_INT 20
49520: DOUBLE
49521: EQUAL
49522: IFTRUE 49526
49524: GO 49551
49526: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49527: LD_ADDR_VAR 0 3
49531: PUSH
49532: LD_INT 6
49534: PPUSH
49535: LD_VAR 0 1
49539: PPUSH
49540: CALL_OW 321
49544: PUSH
49545: LD_INT 2
49547: EQUAL
49548: ST_TO_ADDR
49549: GO 49834
49551: LD_INT 22
49553: DOUBLE
49554: EQUAL
49555: IFTRUE 49565
49557: LD_INT 36
49559: DOUBLE
49560: EQUAL
49561: IFTRUE 49565
49563: GO 49590
49565: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49566: LD_ADDR_VAR 0 3
49570: PUSH
49571: LD_INT 15
49573: PPUSH
49574: LD_VAR 0 1
49578: PPUSH
49579: CALL_OW 321
49583: PUSH
49584: LD_INT 2
49586: EQUAL
49587: ST_TO_ADDR
49588: GO 49834
49590: LD_INT 30
49592: DOUBLE
49593: EQUAL
49594: IFTRUE 49598
49596: GO 49623
49598: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49599: LD_ADDR_VAR 0 3
49603: PUSH
49604: LD_INT 20
49606: PPUSH
49607: LD_VAR 0 1
49611: PPUSH
49612: CALL_OW 321
49616: PUSH
49617: LD_INT 2
49619: EQUAL
49620: ST_TO_ADDR
49621: GO 49834
49623: LD_INT 28
49625: DOUBLE
49626: EQUAL
49627: IFTRUE 49637
49629: LD_INT 21
49631: DOUBLE
49632: EQUAL
49633: IFTRUE 49637
49635: GO 49662
49637: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49638: LD_ADDR_VAR 0 3
49642: PUSH
49643: LD_INT 21
49645: PPUSH
49646: LD_VAR 0 1
49650: PPUSH
49651: CALL_OW 321
49655: PUSH
49656: LD_INT 2
49658: EQUAL
49659: ST_TO_ADDR
49660: GO 49834
49662: LD_INT 16
49664: DOUBLE
49665: EQUAL
49666: IFTRUE 49670
49668: GO 49695
49670: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49671: LD_ADDR_VAR 0 3
49675: PUSH
49676: LD_INT 84
49678: PPUSH
49679: LD_VAR 0 1
49683: PPUSH
49684: CALL_OW 321
49688: PUSH
49689: LD_INT 2
49691: EQUAL
49692: ST_TO_ADDR
49693: GO 49834
49695: LD_INT 19
49697: DOUBLE
49698: EQUAL
49699: IFTRUE 49709
49701: LD_INT 23
49703: DOUBLE
49704: EQUAL
49705: IFTRUE 49709
49707: GO 49734
49709: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49710: LD_ADDR_VAR 0 3
49714: PUSH
49715: LD_INT 83
49717: PPUSH
49718: LD_VAR 0 1
49722: PPUSH
49723: CALL_OW 321
49727: PUSH
49728: LD_INT 2
49730: EQUAL
49731: ST_TO_ADDR
49732: GO 49834
49734: LD_INT 17
49736: DOUBLE
49737: EQUAL
49738: IFTRUE 49742
49740: GO 49767
49742: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49743: LD_ADDR_VAR 0 3
49747: PUSH
49748: LD_INT 39
49750: PPUSH
49751: LD_VAR 0 1
49755: PPUSH
49756: CALL_OW 321
49760: PUSH
49761: LD_INT 2
49763: EQUAL
49764: ST_TO_ADDR
49765: GO 49834
49767: LD_INT 18
49769: DOUBLE
49770: EQUAL
49771: IFTRUE 49775
49773: GO 49800
49775: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49776: LD_ADDR_VAR 0 3
49780: PUSH
49781: LD_INT 40
49783: PPUSH
49784: LD_VAR 0 1
49788: PPUSH
49789: CALL_OW 321
49793: PUSH
49794: LD_INT 2
49796: EQUAL
49797: ST_TO_ADDR
49798: GO 49834
49800: LD_INT 27
49802: DOUBLE
49803: EQUAL
49804: IFTRUE 49808
49806: GO 49833
49808: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49809: LD_ADDR_VAR 0 3
49813: PUSH
49814: LD_INT 35
49816: PPUSH
49817: LD_VAR 0 1
49821: PPUSH
49822: CALL_OW 321
49826: PUSH
49827: LD_INT 2
49829: EQUAL
49830: ST_TO_ADDR
49831: GO 49834
49833: POP
// end ;
49834: LD_VAR 0 3
49838: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49839: LD_INT 0
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
// result := false ;
49852: LD_ADDR_VAR 0 6
49856: PUSH
49857: LD_INT 0
49859: ST_TO_ADDR
// if btype = b_depot then
49860: LD_VAR 0 2
49864: PUSH
49865: LD_INT 0
49867: EQUAL
49868: IFFALSE 49880
// begin result := true ;
49870: LD_ADDR_VAR 0 6
49874: PUSH
49875: LD_INT 1
49877: ST_TO_ADDR
// exit ;
49878: GO 50706
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49880: LD_VAR 0 1
49884: NOT
49885: PUSH
49886: LD_VAR 0 1
49890: PPUSH
49891: CALL_OW 266
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: IN
49906: NOT
49907: OR
49908: PUSH
49909: LD_VAR 0 2
49913: NOT
49914: OR
49915: PUSH
49916: LD_VAR 0 5
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: LD_INT 4
49935: PUSH
49936: LD_INT 5
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: IN
49947: NOT
49948: OR
49949: PUSH
49950: LD_VAR 0 3
49954: PPUSH
49955: LD_VAR 0 4
49959: PPUSH
49960: CALL_OW 488
49964: NOT
49965: OR
49966: IFFALSE 49970
// exit ;
49968: GO 50706
// side := GetSide ( depot ) ;
49970: LD_ADDR_VAR 0 9
49974: PUSH
49975: LD_VAR 0 1
49979: PPUSH
49980: CALL_OW 255
49984: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49985: LD_VAR 0 9
49989: PPUSH
49990: LD_VAR 0 2
49994: PPUSH
49995: CALL 49463 0 2
49999: NOT
50000: IFFALSE 50004
// exit ;
50002: GO 50706
// pom := GetBase ( depot ) ;
50004: LD_ADDR_VAR 0 10
50008: PUSH
50009: LD_VAR 0 1
50013: PPUSH
50014: CALL_OW 274
50018: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50019: LD_ADDR_VAR 0 11
50023: PUSH
50024: LD_VAR 0 2
50028: PPUSH
50029: LD_VAR 0 1
50033: PPUSH
50034: CALL_OW 248
50038: PPUSH
50039: CALL_OW 450
50043: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50044: LD_VAR 0 10
50048: PPUSH
50049: LD_INT 1
50051: PPUSH
50052: CALL_OW 275
50056: PUSH
50057: LD_VAR 0 11
50061: PUSH
50062: LD_INT 1
50064: ARRAY
50065: GREATEREQUAL
50066: PUSH
50067: LD_VAR 0 10
50071: PPUSH
50072: LD_INT 2
50074: PPUSH
50075: CALL_OW 275
50079: PUSH
50080: LD_VAR 0 11
50084: PUSH
50085: LD_INT 2
50087: ARRAY
50088: GREATEREQUAL
50089: AND
50090: PUSH
50091: LD_VAR 0 10
50095: PPUSH
50096: LD_INT 3
50098: PPUSH
50099: CALL_OW 275
50103: PUSH
50104: LD_VAR 0 11
50108: PUSH
50109: LD_INT 3
50111: ARRAY
50112: GREATEREQUAL
50113: AND
50114: NOT
50115: IFFALSE 50119
// exit ;
50117: GO 50706
// if GetBType ( depot ) = b_depot then
50119: LD_VAR 0 1
50123: PPUSH
50124: CALL_OW 266
50128: PUSH
50129: LD_INT 0
50131: EQUAL
50132: IFFALSE 50144
// dist := 28 else
50134: LD_ADDR_VAR 0 14
50138: PUSH
50139: LD_INT 28
50141: ST_TO_ADDR
50142: GO 50152
// dist := 36 ;
50144: LD_ADDR_VAR 0 14
50148: PUSH
50149: LD_INT 36
50151: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50152: LD_VAR 0 1
50156: PPUSH
50157: LD_VAR 0 3
50161: PPUSH
50162: LD_VAR 0 4
50166: PPUSH
50167: CALL_OW 297
50171: PUSH
50172: LD_VAR 0 14
50176: GREATER
50177: IFFALSE 50181
// exit ;
50179: GO 50706
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50181: LD_ADDR_VAR 0 12
50185: PUSH
50186: LD_VAR 0 2
50190: PPUSH
50191: LD_VAR 0 3
50195: PPUSH
50196: LD_VAR 0 4
50200: PPUSH
50201: LD_VAR 0 5
50205: PPUSH
50206: LD_VAR 0 1
50210: PPUSH
50211: CALL_OW 248
50215: PPUSH
50216: LD_INT 0
50218: PPUSH
50219: CALL 50711 0 6
50223: ST_TO_ADDR
// if not hexes then
50224: LD_VAR 0 12
50228: NOT
50229: IFFALSE 50233
// exit ;
50231: GO 50706
// hex := GetHexInfo ( x , y ) ;
50233: LD_ADDR_VAR 0 15
50237: PUSH
50238: LD_VAR 0 3
50242: PPUSH
50243: LD_VAR 0 4
50247: PPUSH
50248: CALL_OW 546
50252: ST_TO_ADDR
// if hex [ 1 ] then
50253: LD_VAR 0 15
50257: PUSH
50258: LD_INT 1
50260: ARRAY
50261: IFFALSE 50265
// exit ;
50263: GO 50706
// height := hex [ 2 ] ;
50265: LD_ADDR_VAR 0 13
50269: PUSH
50270: LD_VAR 0 15
50274: PUSH
50275: LD_INT 2
50277: ARRAY
50278: ST_TO_ADDR
// for i = 1 to hexes do
50279: LD_ADDR_VAR 0 7
50283: PUSH
50284: DOUBLE
50285: LD_INT 1
50287: DEC
50288: ST_TO_ADDR
50289: LD_VAR 0 12
50293: PUSH
50294: FOR_TO
50295: IFFALSE 50625
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50297: LD_VAR 0 12
50301: PUSH
50302: LD_VAR 0 7
50306: ARRAY
50307: PUSH
50308: LD_INT 1
50310: ARRAY
50311: PPUSH
50312: LD_VAR 0 12
50316: PUSH
50317: LD_VAR 0 7
50321: ARRAY
50322: PUSH
50323: LD_INT 2
50325: ARRAY
50326: PPUSH
50327: CALL_OW 488
50331: NOT
50332: PUSH
50333: LD_VAR 0 12
50337: PUSH
50338: LD_VAR 0 7
50342: ARRAY
50343: PUSH
50344: LD_INT 1
50346: ARRAY
50347: PPUSH
50348: LD_VAR 0 12
50352: PUSH
50353: LD_VAR 0 7
50357: ARRAY
50358: PUSH
50359: LD_INT 2
50361: ARRAY
50362: PPUSH
50363: CALL_OW 428
50367: PUSH
50368: LD_INT 0
50370: GREATER
50371: OR
50372: PUSH
50373: LD_VAR 0 12
50377: PUSH
50378: LD_VAR 0 7
50382: ARRAY
50383: PUSH
50384: LD_INT 1
50386: ARRAY
50387: PPUSH
50388: LD_VAR 0 12
50392: PUSH
50393: LD_VAR 0 7
50397: ARRAY
50398: PUSH
50399: LD_INT 2
50401: ARRAY
50402: PPUSH
50403: CALL_OW 351
50407: OR
50408: IFFALSE 50414
// exit ;
50410: POP
50411: POP
50412: GO 50706
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50414: LD_ADDR_VAR 0 8
50418: PUSH
50419: LD_VAR 0 12
50423: PUSH
50424: LD_VAR 0 7
50428: ARRAY
50429: PUSH
50430: LD_INT 1
50432: ARRAY
50433: PPUSH
50434: LD_VAR 0 12
50438: PUSH
50439: LD_VAR 0 7
50443: ARRAY
50444: PUSH
50445: LD_INT 2
50447: ARRAY
50448: PPUSH
50449: CALL_OW 546
50453: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50454: LD_VAR 0 8
50458: PUSH
50459: LD_INT 1
50461: ARRAY
50462: PUSH
50463: LD_VAR 0 8
50467: PUSH
50468: LD_INT 2
50470: ARRAY
50471: PUSH
50472: LD_VAR 0 13
50476: PUSH
50477: LD_INT 2
50479: PLUS
50480: GREATER
50481: OR
50482: PUSH
50483: LD_VAR 0 8
50487: PUSH
50488: LD_INT 2
50490: ARRAY
50491: PUSH
50492: LD_VAR 0 13
50496: PUSH
50497: LD_INT 2
50499: MINUS
50500: LESS
50501: OR
50502: PUSH
50503: LD_VAR 0 8
50507: PUSH
50508: LD_INT 3
50510: ARRAY
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 8
50517: PUSH
50518: LD_INT 9
50520: PUSH
50521: LD_INT 10
50523: PUSH
50524: LD_INT 11
50526: PUSH
50527: LD_INT 12
50529: PUSH
50530: LD_INT 13
50532: PUSH
50533: LD_INT 16
50535: PUSH
50536: LD_INT 17
50538: PUSH
50539: LD_INT 18
50541: PUSH
50542: LD_INT 19
50544: PUSH
50545: LD_INT 20
50547: PUSH
50548: LD_INT 21
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: IN
50566: NOT
50567: OR
50568: PUSH
50569: LD_VAR 0 8
50573: PUSH
50574: LD_INT 5
50576: ARRAY
50577: NOT
50578: OR
50579: PUSH
50580: LD_VAR 0 8
50584: PUSH
50585: LD_INT 6
50587: ARRAY
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 7
50597: PUSH
50598: LD_INT 9
50600: PUSH
50601: LD_INT 10
50603: PUSH
50604: LD_INT 11
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: IN
50615: NOT
50616: OR
50617: IFFALSE 50623
// exit ;
50619: POP
50620: POP
50621: GO 50706
// end ;
50623: GO 50294
50625: POP
50626: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50627: LD_VAR 0 9
50631: PPUSH
50632: LD_VAR 0 3
50636: PPUSH
50637: LD_VAR 0 4
50641: PPUSH
50642: LD_INT 20
50644: PPUSH
50645: CALL 42629 0 4
50649: PUSH
50650: LD_INT 4
50652: ARRAY
50653: IFFALSE 50657
// exit ;
50655: GO 50706
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50657: LD_VAR 0 2
50661: PUSH
50662: LD_INT 29
50664: PUSH
50665: LD_INT 30
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: IN
50672: PUSH
50673: LD_VAR 0 3
50677: PPUSH
50678: LD_VAR 0 4
50682: PPUSH
50683: LD_VAR 0 9
50687: PPUSH
50688: CALL_OW 440
50692: NOT
50693: AND
50694: IFFALSE 50698
// exit ;
50696: GO 50706
// result := true ;
50698: LD_ADDR_VAR 0 6
50702: PUSH
50703: LD_INT 1
50705: ST_TO_ADDR
// end ;
50706: LD_VAR 0 6
50710: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50711: LD_INT 0
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
// result = [ ] ;
50771: LD_ADDR_VAR 0 7
50775: PUSH
50776: EMPTY
50777: ST_TO_ADDR
// temp_list = [ ] ;
50778: LD_ADDR_VAR 0 9
50782: PUSH
50783: EMPTY
50784: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50785: LD_VAR 0 4
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 4
50804: PUSH
50805: LD_INT 5
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: IN
50816: NOT
50817: PUSH
50818: LD_VAR 0 1
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: IN
50833: PUSH
50834: LD_VAR 0 5
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: IN
50853: NOT
50854: AND
50855: OR
50856: IFFALSE 50860
// exit ;
50858: GO 69251
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50860: LD_VAR 0 1
50864: PUSH
50865: LD_INT 6
50867: PUSH
50868: LD_INT 7
50870: PUSH
50871: LD_INT 8
50873: PUSH
50874: LD_INT 13
50876: PUSH
50877: LD_INT 12
50879: PUSH
50880: LD_INT 15
50882: PUSH
50883: LD_INT 11
50885: PUSH
50886: LD_INT 14
50888: PUSH
50889: LD_INT 10
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: IN
50903: IFFALSE 50913
// btype = b_lab ;
50905: LD_ADDR_VAR 0 1
50909: PUSH
50910: LD_INT 6
50912: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50913: LD_VAR 0 6
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: IN
50932: NOT
50933: PUSH
50934: LD_VAR 0 1
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: LD_INT 6
50953: PUSH
50954: LD_INT 36
50956: PUSH
50957: LD_INT 4
50959: PUSH
50960: LD_INT 5
50962: PUSH
50963: LD_INT 31
50965: PUSH
50966: LD_INT 32
50968: PUSH
50969: LD_INT 33
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: IN
50985: NOT
50986: PUSH
50987: LD_VAR 0 6
50991: PUSH
50992: LD_INT 1
50994: EQUAL
50995: AND
50996: OR
50997: PUSH
50998: LD_VAR 0 1
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: IN
51013: NOT
51014: PUSH
51015: LD_VAR 0 6
51019: PUSH
51020: LD_INT 2
51022: EQUAL
51023: AND
51024: OR
51025: IFFALSE 51035
// mode = 0 ;
51027: LD_ADDR_VAR 0 6
51031: PUSH
51032: LD_INT 0
51034: ST_TO_ADDR
// case mode of 0 :
51035: LD_VAR 0 6
51039: PUSH
51040: LD_INT 0
51042: DOUBLE
51043: EQUAL
51044: IFTRUE 51048
51046: GO 62501
51048: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51049: LD_ADDR_VAR 0 11
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51242: LD_ADDR_VAR 0 12
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: NEG
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51438: LD_ADDR_VAR 0 13
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: LD_INT 3
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51637: LD_ADDR_VAR 0 14
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 3
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51833: LD_ADDR_VAR 0 15
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52026: LD_ADDR_VAR 0 16
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52219: LD_ADDR_VAR 0 17
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52449: LD_ADDR_VAR 0 18
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52679: LD_ADDR_VAR 0 19
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52909: LD_ADDR_VAR 0 20
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53139: LD_ADDR_VAR 0 21
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53369: LD_ADDR_VAR 0 22
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53599: LD_ADDR_VAR 0 23
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53879: LD_ADDR_VAR 0 24
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54155: LD_ADDR_VAR 0 25
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54429: LD_ADDR_VAR 0 26
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54705: LD_ADDR_VAR 0 27
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54985: LD_ADDR_VAR 0 28
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: LD_INT 3
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55267: LD_ADDR_VAR 0 29
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 3
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55546: LD_ADDR_VAR 0 30
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 3
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55824: LD_ADDR_VAR 0 31
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 3
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56102: LD_ADDR_VAR 0 32
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 3
56345: NEG
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56380: LD_ADDR_VAR 0 33
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56659: LD_ADDR_VAR 0 34
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56939: LD_ADDR_VAR 0 35
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57051: LD_ADDR_VAR 0 36
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57163: LD_ADDR_VAR 0 37
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: NEG
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57275: LD_ADDR_VAR 0 38
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57387: LD_ADDR_VAR 0 39
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57499: LD_ADDR_VAR 0 40
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57611: LD_ADDR_VAR 0 41
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 3
57885: NEG
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57961: LD_ADDR_VAR 0 42
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 3
58258: NEG
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 3
58270: NEG
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58311: LD_ADDR_VAR 0 43
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58659: LD_ADDR_VAR 0 44
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 2
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: LD_INT 3
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 3
58902: PUSH
58903: LD_INT 3
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: LD_INT 3
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: NEG
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59009: LD_ADDR_VAR 0 45
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 3
59318: NEG
59319: PUSH
59320: LD_INT 3
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59359: LD_ADDR_VAR 0 46
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 3
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: NEG
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59707: LD_ADDR_VAR 0 47
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59858: LD_ADDR_VAR 0 48
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60005: LD_ADDR_VAR 0 49
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60149: LD_ADDR_VAR 0 50
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60293: LD_ADDR_VAR 0 51
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60440: LD_ADDR_VAR 0 52
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60591: LD_ADDR_VAR 0 53
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60821: LD_ADDR_VAR 0 54
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61051: LD_ADDR_VAR 0 55
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61281: LD_ADDR_VAR 0 56
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 2
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 2
61480: NEG
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61511: LD_ADDR_VAR 0 57
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61741: LD_ADDR_VAR 0 58
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: LD_INT 2
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: NEG
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61971: LD_ADDR_VAR 0 59
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62059: LD_ADDR_VAR 0 60
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62147: LD_ADDR_VAR 0 61
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62235: LD_ADDR_VAR 0 62
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62323: LD_ADDR_VAR 0 63
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62411: LD_ADDR_VAR 0 64
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// end ; 1 :
62499: GO 68396
62501: LD_INT 1
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62509
62507: GO 65132
62509: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62510: LD_ADDR_VAR 0 11
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62554: LD_ADDR_VAR 0 12
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 3
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62595: LD_ADDR_VAR 0 13
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62635: LD_ADDR_VAR 0 14
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 3
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 3
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: LIST
62675: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62676: LD_ADDR_VAR 0 15
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: LIST
62719: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62720: LD_ADDR_VAR 0 16
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: LD_INT 3
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 3
62739: NEG
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: LD_INT 3
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: LIST
62765: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62766: LD_ADDR_VAR 0 17
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62810: LD_ADDR_VAR 0 18
62814: PUSH
62815: LD_INT 2
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 3
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62851: LD_ADDR_VAR 0 19
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: LD_INT 2
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: LD_INT 3
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: LIST
62890: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62891: LD_ADDR_VAR 0 20
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: LD_INT 2
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62932: LD_ADDR_VAR 0 21
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 3
62950: NEG
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 3
62961: NEG
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: LIST
62975: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62976: LD_ADDR_VAR 0 22
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 3
62995: NEG
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: LD_INT 3
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: LIST
63021: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63022: LD_ADDR_VAR 0 23
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 3
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 4
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 3
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: LIST
63065: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63066: LD_ADDR_VAR 0 24
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 4
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63107: LD_ADDR_VAR 0 25
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 4
63124: PUSH
63125: LD_INT 3
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: LD_INT 4
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63147: LD_ADDR_VAR 0 26
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: LD_INT 4
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: LD_INT 3
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63188: LD_ADDR_VAR 0 27
63192: PUSH
63193: LD_INT 3
63195: NEG
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: NEG
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 4
63217: NEG
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: LIST
63231: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63232: LD_ADDR_VAR 0 28
63236: PUSH
63237: LD_INT 3
63239: NEG
63240: PUSH
63241: LD_INT 3
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 3
63251: NEG
63252: PUSH
63253: LD_INT 4
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 4
63263: NEG
63264: PUSH
63265: LD_INT 3
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: LIST
63277: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63278: LD_ADDR_VAR 0 29
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 3
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 3
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: LD_INT 4
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 4
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: LD_INT 3
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 5
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 5
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: LD_INT 4
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: LD_INT 6
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 6
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: LD_INT 5
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63433: LD_ADDR_VAR 0 30
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 3
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 3
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 4
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 4
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 4
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 5
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 5
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 5
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 6
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 6
63554: PUSH
63555: LD_INT 1
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63576: LD_ADDR_VAR 0 31
63580: PUSH
63581: LD_INT 3
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 3
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 3
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 4
63613: PUSH
63614: LD_INT 3
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 4
63623: PUSH
63624: LD_INT 4
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: LD_INT 4
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 5
63643: PUSH
63644: LD_INT 4
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 5
63653: PUSH
63654: LD_INT 5
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 4
63663: PUSH
63664: LD_INT 5
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 6
63673: PUSH
63674: LD_INT 5
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 6
63683: PUSH
63684: LD_INT 6
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 5
63693: PUSH
63694: LD_INT 6
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63715: LD_ADDR_VAR 0 32
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: LD_INT 3
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: LD_INT 3
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 4
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: LD_INT 4
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: LD_INT 3
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 5
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 5
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: LD_INT 4
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 6
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: LD_INT 6
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63858: LD_ADDR_VAR 0 33
63862: PUSH
63863: LD_INT 2
63865: NEG
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 3
63876: NEG
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 3
63887: NEG
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 4
63910: NEG
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 4
63921: NEG
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 4
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 5
63944: NEG
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 5
63955: NEG
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 5
63967: NEG
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 6
63978: NEG
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 6
63989: NEG
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64013: LD_ADDR_VAR 0 34
64017: PUSH
64018: LD_INT 2
64020: NEG
64021: PUSH
64022: LD_INT 3
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 3
64032: NEG
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 3
64044: NEG
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 3
64056: NEG
64057: PUSH
64058: LD_INT 4
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 4
64068: NEG
64069: PUSH
64070: LD_INT 3
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 4
64080: NEG
64081: PUSH
64082: LD_INT 4
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 4
64092: NEG
64093: PUSH
64094: LD_INT 5
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 5
64104: NEG
64105: PUSH
64106: LD_INT 4
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 5
64116: NEG
64117: PUSH
64118: LD_INT 5
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 5
64128: NEG
64129: PUSH
64130: LD_INT 6
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 6
64140: NEG
64141: PUSH
64142: LD_INT 5
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 6
64152: NEG
64153: PUSH
64154: LD_INT 6
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64176: LD_ADDR_VAR 0 41
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: LD_INT 3
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: LIST
64219: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64220: LD_ADDR_VAR 0 42
64224: PUSH
64225: LD_INT 2
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 2
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 3
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64261: LD_ADDR_VAR 0 43
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 3
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: PUSH
64289: LD_INT 3
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64301: LD_ADDR_VAR 0 44
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 3
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: LIST
64341: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64342: LD_ADDR_VAR 0 45
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 2
64360: NEG
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 3
64371: NEG
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64386: LD_ADDR_VAR 0 46
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: NEG
64406: PUSH
64407: LD_INT 3
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 3
64417: NEG
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64432: LD_ADDR_VAR 0 47
64436: PUSH
64437: LD_INT 2
64439: NEG
64440: PUSH
64441: LD_INT 3
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64465: LD_ADDR_VAR 0 48
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 2
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64496: LD_ADDR_VAR 0 49
64500: PUSH
64501: LD_INT 3
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 3
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64525: LD_ADDR_VAR 0 50
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: LD_INT 3
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: LD_INT 3
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64554: LD_ADDR_VAR 0 51
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64585: LD_ADDR_VAR 0 52
64589: PUSH
64590: LD_INT 3
64592: NEG
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 3
64604: NEG
64605: PUSH
64606: LD_INT 2
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64618: LD_ADDR_VAR 0 53
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 3
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 3
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 2
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: LIST
64661: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64662: LD_ADDR_VAR 0 54
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 3
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64703: LD_ADDR_VAR 0 55
64707: PUSH
64708: LD_INT 3
64710: PUSH
64711: LD_INT 2
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 3
64720: PUSH
64721: LD_INT 3
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 2
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64743: LD_ADDR_VAR 0 56
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: LD_INT 3
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: LD_INT 3
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: LD_INT 2
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: LIST
64783: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64784: LD_ADDR_VAR 0 57
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 3
64802: NEG
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 3
64813: NEG
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64828: LD_ADDR_VAR 0 58
64832: PUSH
64833: LD_INT 2
64835: NEG
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 3
64847: NEG
64848: PUSH
64849: LD_INT 2
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 3
64859: NEG
64860: PUSH
64861: LD_INT 3
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: LIST
64873: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64874: LD_ADDR_VAR 0 59
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: LIST
64917: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64918: LD_ADDR_VAR 0 60
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 2
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: LIST
64958: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64959: LD_ADDR_VAR 0 61
64963: PUSH
64964: LD_INT 2
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: LIST
64998: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64999: LD_ADDR_VAR 0 62
65003: PUSH
65004: LD_INT 1
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65040: LD_ADDR_VAR 0 63
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: LIST
65083: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65084: LD_ADDR_VAR 0 64
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: LD_INT 2
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 2
65103: NEG
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 2
65115: NEG
65116: PUSH
65117: LD_INT 2
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: ST_TO_ADDR
// end ; 2 :
65130: GO 68396
65132: LD_INT 2
65134: DOUBLE
65135: EQUAL
65136: IFTRUE 65140
65138: GO 68395
65140: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65141: LD_ADDR_VAR 0 29
65145: PUSH
65146: LD_INT 4
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 4
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 5
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 5
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 4
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 3
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 3
65220: PUSH
65221: LD_INT 2
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 5
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: LD_INT 3
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 4
65261: PUSH
65262: LD_INT 3
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 4
65271: PUSH
65272: LD_INT 4
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 3
65281: PUSH
65282: LD_INT 4
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 3
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: LD_INT 2
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 4
65311: PUSH
65312: LD_INT 2
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: LD_INT 4
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: LD_INT 4
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: LD_INT 4
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 5
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: LD_INT 5
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 1
65381: NEG
65382: PUSH
65383: LD_INT 4
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: LD_INT 3
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 2
65403: PUSH
65404: LD_INT 5
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: NEG
65414: PUSH
65415: LD_INT 3
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 3
65424: NEG
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 3
65435: NEG
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 2
65447: NEG
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 4
65480: NEG
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 4
65491: NEG
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 4
65503: NEG
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: LD_INT 2
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 4
65526: NEG
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 4
65538: NEG
65539: PUSH
65540: LD_INT 5
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 3
65550: NEG
65551: PUSH
65552: LD_INT 4
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 3
65562: NEG
65563: PUSH
65564: LD_INT 3
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 4
65574: NEG
65575: PUSH
65576: LD_INT 3
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 5
65586: NEG
65587: PUSH
65588: LD_INT 4
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 5
65598: NEG
65599: PUSH
65600: LD_INT 5
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: LD_INT 5
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 5
65622: NEG
65623: PUSH
65624: LD_INT 3
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65679: LD_ADDR_VAR 0 30
65683: PUSH
65684: LD_INT 4
65686: PUSH
65687: LD_INT 4
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 4
65696: PUSH
65697: LD_INT 3
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 5
65706: PUSH
65707: LD_INT 4
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 5
65716: PUSH
65717: LD_INT 5
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 4
65726: PUSH
65727: LD_INT 5
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 3
65736: PUSH
65737: LD_INT 4
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: LD_INT 3
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 5
65756: PUSH
65757: LD_INT 3
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: LD_INT 5
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: LD_INT 3
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: LD_INT 3
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: LD_INT 4
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 4
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: LD_INT 2
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: LD_INT 4
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 2
65858: NEG
65859: PUSH
65860: LD_INT 2
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 4
65869: NEG
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 4
65880: NEG
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 3
65892: NEG
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 3
65903: NEG
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 4
65914: NEG
65915: PUSH
65916: LD_INT 1
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 5
65925: NEG
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 5
65936: NEG
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 5
65948: NEG
65949: PUSH
65950: LD_INT 2
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 3
65960: NEG
65961: PUSH
65962: LD_INT 2
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 3
65971: NEG
65972: PUSH
65973: LD_INT 3
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: LD_INT 4
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: LD_INT 3
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 3
66019: NEG
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 4
66031: NEG
66032: PUSH
66033: LD_INT 3
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 4
66043: NEG
66044: PUSH
66045: LD_INT 4
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 2
66055: NEG
66056: PUSH
66057: LD_INT 4
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 4
66067: NEG
66068: PUSH
66069: LD_INT 2
66071: NEG
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 4
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: LD_INT 5
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: LD_INT 4
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: PUSH
66113: LD_INT 3
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 1
66134: NEG
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: NEG
66147: PUSH
66148: LD_INT 5
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 2
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 2
66169: NEG
66170: PUSH
66171: LD_INT 5
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66226: LD_ADDR_VAR 0 31
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: LD_INT 4
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: LD_INT 3
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: LD_INT 4
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: LD_INT 5
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: LD_INT 5
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: LD_INT 4
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 2
66305: PUSH
66306: LD_INT 5
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 2
66315: NEG
66316: PUSH
66317: LD_INT 3
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 3
66326: NEG
66327: PUSH
66328: LD_INT 0
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 3
66337: NEG
66338: PUSH
66339: LD_INT 1
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 2
66349: NEG
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 2
66360: NEG
66361: PUSH
66362: LD_INT 1
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 3
66371: NEG
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 4
66382: NEG
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 4
66393: NEG
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 4
66405: NEG
66406: PUSH
66407: LD_INT 2
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 2
66417: NEG
66418: PUSH
66419: LD_INT 2
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 4
66428: NEG
66429: PUSH
66430: LD_INT 4
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 4
66440: NEG
66441: PUSH
66442: LD_INT 5
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 3
66452: NEG
66453: PUSH
66454: LD_INT 4
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 3
66464: NEG
66465: PUSH
66466: LD_INT 3
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 4
66476: NEG
66477: PUSH
66478: LD_INT 3
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 5
66488: NEG
66489: PUSH
66490: LD_INT 4
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 5
66500: NEG
66501: PUSH
66502: LD_INT 5
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: LD_INT 5
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 5
66524: NEG
66525: PUSH
66526: LD_INT 3
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: LD_INT 4
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: PUSH
66559: LD_INT 3
66561: NEG
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 1
66569: PUSH
66570: LD_INT 2
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: PUSH
66605: LD_INT 4
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: LD_INT 2
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 2
66626: NEG
66627: PUSH
66628: LD_INT 4
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 4
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 4
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 5
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 4
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 3
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 5
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66776: LD_ADDR_VAR 0 32
66780: PUSH
66781: LD_INT 4
66783: NEG
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 4
66794: NEG
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 3
66806: NEG
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: LD_INT 1
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 4
66828: NEG
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 5
66839: NEG
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 5
66850: NEG
66851: PUSH
66852: LD_INT 1
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 5
66862: NEG
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 3
66874: NEG
66875: PUSH
66876: LD_INT 2
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 3
66885: NEG
66886: PUSH
66887: LD_INT 3
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 3
66897: NEG
66898: PUSH
66899: LD_INT 4
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 2
66909: NEG
66910: PUSH
66911: LD_INT 3
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 2
66921: NEG
66922: PUSH
66923: LD_INT 2
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 3
66933: NEG
66934: PUSH
66935: LD_INT 2
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 4
66945: NEG
66946: PUSH
66947: LD_INT 3
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 4
66957: NEG
66958: PUSH
66959: LD_INT 4
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 2
66969: NEG
66970: PUSH
66971: LD_INT 4
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 4
66981: NEG
66982: PUSH
66983: LD_INT 2
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 4
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 5
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 1
67015: PUSH
67016: LD_INT 4
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 1
67026: PUSH
67027: LD_INT 3
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: LD_INT 3
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: LD_INT 4
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: NEG
67061: PUSH
67062: LD_INT 5
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 2
67072: PUSH
67073: LD_INT 3
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 2
67083: NEG
67084: PUSH
67085: LD_INT 5
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 3
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 3
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 4
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 4
67126: PUSH
67127: LD_INT 1
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: LD_INT 1
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 2
67156: PUSH
67157: LD_INT 1
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 2
67167: PUSH
67168: LD_INT 2
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 4
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 4
67188: PUSH
67189: LD_INT 4
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 4
67198: PUSH
67199: LD_INT 3
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: LD_INT 4
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 5
67218: PUSH
67219: LD_INT 5
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 4
67228: PUSH
67229: LD_INT 5
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: LD_INT 4
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 3
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 5
67258: PUSH
67259: LD_INT 3
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 3
67268: PUSH
67269: LD_INT 5
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67323: LD_ADDR_VAR 0 33
67327: PUSH
67328: LD_INT 4
67330: NEG
67331: PUSH
67332: LD_INT 4
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 4
67342: NEG
67343: PUSH
67344: LD_INT 5
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 3
67354: NEG
67355: PUSH
67356: LD_INT 4
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 3
67366: NEG
67367: PUSH
67368: LD_INT 3
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 4
67378: NEG
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 5
67390: NEG
67391: PUSH
67392: LD_INT 4
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 5
67402: NEG
67403: PUSH
67404: LD_INT 5
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: LD_INT 5
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 5
67426: NEG
67427: PUSH
67428: LD_INT 3
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: LD_INT 4
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: LD_INT 3
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: PUSH
67472: LD_INT 2
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 0
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: LD_INT 3
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 1
67505: NEG
67506: PUSH
67507: LD_INT 4
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 2
67517: PUSH
67518: LD_INT 2
67520: NEG
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 2
67528: NEG
67529: PUSH
67530: LD_INT 4
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 4
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 4
67550: PUSH
67551: LD_INT 1
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 5
67561: PUSH
67562: LD_INT 0
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 5
67571: PUSH
67572: LD_INT 1
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 4
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 3
67591: PUSH
67592: LD_INT 0
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: LD_INT 1
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 3
67612: PUSH
67613: LD_INT 2
67615: NEG
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 5
67623: PUSH
67624: LD_INT 2
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 3
67633: PUSH
67634: LD_INT 3
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: LD_INT 2
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 4
67653: PUSH
67654: LD_INT 3
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 4
67663: PUSH
67664: LD_INT 4
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 3
67673: PUSH
67674: LD_INT 4
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 2
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 4
67703: PUSH
67704: LD_INT 2
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 2
67713: PUSH
67714: LD_INT 4
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 0
67723: PUSH
67724: LD_INT 4
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: PUSH
67754: LD_INT 5
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 5
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: LD_INT 4
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: NEG
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 2
67795: PUSH
67796: LD_INT 5
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 2
67805: NEG
67806: PUSH
67807: LD_INT 3
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67861: LD_ADDR_VAR 0 34
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: LD_INT 4
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: LD_INT 5
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: LD_INT 4
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: LD_INT 3
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: LD_INT 4
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: LD_INT 5
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: PUSH
67948: LD_INT 3
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: LD_INT 5
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 3
67970: PUSH
67971: LD_INT 0
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 3
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 4
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 4
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 2
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: LD_INT 2
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 4
68053: PUSH
68054: LD_INT 2
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 4
68063: PUSH
68064: LD_INT 4
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 4
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 5
68083: PUSH
68084: LD_INT 4
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 5
68093: PUSH
68094: LD_INT 5
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 4
68103: PUSH
68104: LD_INT 5
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 3
68113: PUSH
68114: LD_INT 4
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 3
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 5
68133: PUSH
68134: LD_INT 3
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: LD_INT 5
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: LD_INT 3
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 2
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: LD_INT 4
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: LD_INT 4
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 1
68203: NEG
68204: PUSH
68205: LD_INT 3
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: LD_INT 4
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 2
68235: NEG
68236: PUSH
68237: LD_INT 2
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 4
68246: NEG
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 4
68257: NEG
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 3
68269: NEG
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 3
68280: NEG
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 4
68291: NEG
68292: PUSH
68293: LD_INT 1
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 5
68302: NEG
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 5
68313: NEG
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 5
68325: NEG
68326: PUSH
68327: LD_INT 2
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 3
68337: NEG
68338: PUSH
68339: LD_INT 2
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: ST_TO_ADDR
// end ; end ;
68393: GO 68396
68395: POP
// case btype of b_depot , b_warehouse :
68396: LD_VAR 0 1
68400: PUSH
68401: LD_INT 0
68403: DOUBLE
68404: EQUAL
68405: IFTRUE 68415
68407: LD_INT 1
68409: DOUBLE
68410: EQUAL
68411: IFTRUE 68415
68413: GO 68616
68415: POP
// case nation of nation_american :
68416: LD_VAR 0 5
68420: PUSH
68421: LD_INT 1
68423: DOUBLE
68424: EQUAL
68425: IFTRUE 68429
68427: GO 68485
68429: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68430: LD_ADDR_VAR 0 9
68434: PUSH
68435: LD_VAR 0 11
68439: PUSH
68440: LD_VAR 0 12
68444: PUSH
68445: LD_VAR 0 13
68449: PUSH
68450: LD_VAR 0 14
68454: PUSH
68455: LD_VAR 0 15
68459: PUSH
68460: LD_VAR 0 16
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: PUSH
68473: LD_VAR 0 4
68477: PUSH
68478: LD_INT 1
68480: PLUS
68481: ARRAY
68482: ST_TO_ADDR
68483: GO 68614
68485: LD_INT 2
68487: DOUBLE
68488: EQUAL
68489: IFTRUE 68493
68491: GO 68549
68493: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68494: LD_ADDR_VAR 0 9
68498: PUSH
68499: LD_VAR 0 17
68503: PUSH
68504: LD_VAR 0 18
68508: PUSH
68509: LD_VAR 0 19
68513: PUSH
68514: LD_VAR 0 20
68518: PUSH
68519: LD_VAR 0 21
68523: PUSH
68524: LD_VAR 0 22
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: PUSH
68537: LD_VAR 0 4
68541: PUSH
68542: LD_INT 1
68544: PLUS
68545: ARRAY
68546: ST_TO_ADDR
68547: GO 68614
68549: LD_INT 3
68551: DOUBLE
68552: EQUAL
68553: IFTRUE 68557
68555: GO 68613
68557: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68558: LD_ADDR_VAR 0 9
68562: PUSH
68563: LD_VAR 0 23
68567: PUSH
68568: LD_VAR 0 24
68572: PUSH
68573: LD_VAR 0 25
68577: PUSH
68578: LD_VAR 0 26
68582: PUSH
68583: LD_VAR 0 27
68587: PUSH
68588: LD_VAR 0 28
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: PUSH
68601: LD_VAR 0 4
68605: PUSH
68606: LD_INT 1
68608: PLUS
68609: ARRAY
68610: ST_TO_ADDR
68611: GO 68614
68613: POP
68614: GO 69169
68616: LD_INT 2
68618: DOUBLE
68619: EQUAL
68620: IFTRUE 68630
68622: LD_INT 3
68624: DOUBLE
68625: EQUAL
68626: IFTRUE 68630
68628: GO 68686
68630: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68631: LD_ADDR_VAR 0 9
68635: PUSH
68636: LD_VAR 0 29
68640: PUSH
68641: LD_VAR 0 30
68645: PUSH
68646: LD_VAR 0 31
68650: PUSH
68651: LD_VAR 0 32
68655: PUSH
68656: LD_VAR 0 33
68660: PUSH
68661: LD_VAR 0 34
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: PUSH
68674: LD_VAR 0 4
68678: PUSH
68679: LD_INT 1
68681: PLUS
68682: ARRAY
68683: ST_TO_ADDR
68684: GO 69169
68686: LD_INT 16
68688: DOUBLE
68689: EQUAL
68690: IFTRUE 68748
68692: LD_INT 17
68694: DOUBLE
68695: EQUAL
68696: IFTRUE 68748
68698: LD_INT 18
68700: DOUBLE
68701: EQUAL
68702: IFTRUE 68748
68704: LD_INT 19
68706: DOUBLE
68707: EQUAL
68708: IFTRUE 68748
68710: LD_INT 22
68712: DOUBLE
68713: EQUAL
68714: IFTRUE 68748
68716: LD_INT 20
68718: DOUBLE
68719: EQUAL
68720: IFTRUE 68748
68722: LD_INT 21
68724: DOUBLE
68725: EQUAL
68726: IFTRUE 68748
68728: LD_INT 23
68730: DOUBLE
68731: EQUAL
68732: IFTRUE 68748
68734: LD_INT 24
68736: DOUBLE
68737: EQUAL
68738: IFTRUE 68748
68740: LD_INT 25
68742: DOUBLE
68743: EQUAL
68744: IFTRUE 68748
68746: GO 68804
68748: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68749: LD_ADDR_VAR 0 9
68753: PUSH
68754: LD_VAR 0 35
68758: PUSH
68759: LD_VAR 0 36
68763: PUSH
68764: LD_VAR 0 37
68768: PUSH
68769: LD_VAR 0 38
68773: PUSH
68774: LD_VAR 0 39
68778: PUSH
68779: LD_VAR 0 40
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: PUSH
68792: LD_VAR 0 4
68796: PUSH
68797: LD_INT 1
68799: PLUS
68800: ARRAY
68801: ST_TO_ADDR
68802: GO 69169
68804: LD_INT 6
68806: DOUBLE
68807: EQUAL
68808: IFTRUE 68860
68810: LD_INT 7
68812: DOUBLE
68813: EQUAL
68814: IFTRUE 68860
68816: LD_INT 8
68818: DOUBLE
68819: EQUAL
68820: IFTRUE 68860
68822: LD_INT 13
68824: DOUBLE
68825: EQUAL
68826: IFTRUE 68860
68828: LD_INT 12
68830: DOUBLE
68831: EQUAL
68832: IFTRUE 68860
68834: LD_INT 15
68836: DOUBLE
68837: EQUAL
68838: IFTRUE 68860
68840: LD_INT 11
68842: DOUBLE
68843: EQUAL
68844: IFTRUE 68860
68846: LD_INT 14
68848: DOUBLE
68849: EQUAL
68850: IFTRUE 68860
68852: LD_INT 10
68854: DOUBLE
68855: EQUAL
68856: IFTRUE 68860
68858: GO 68916
68860: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68861: LD_ADDR_VAR 0 9
68865: PUSH
68866: LD_VAR 0 41
68870: PUSH
68871: LD_VAR 0 42
68875: PUSH
68876: LD_VAR 0 43
68880: PUSH
68881: LD_VAR 0 44
68885: PUSH
68886: LD_VAR 0 45
68890: PUSH
68891: LD_VAR 0 46
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: PUSH
68904: LD_VAR 0 4
68908: PUSH
68909: LD_INT 1
68911: PLUS
68912: ARRAY
68913: ST_TO_ADDR
68914: GO 69169
68916: LD_INT 36
68918: DOUBLE
68919: EQUAL
68920: IFTRUE 68924
68922: GO 68980
68924: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68925: LD_ADDR_VAR 0 9
68929: PUSH
68930: LD_VAR 0 47
68934: PUSH
68935: LD_VAR 0 48
68939: PUSH
68940: LD_VAR 0 49
68944: PUSH
68945: LD_VAR 0 50
68949: PUSH
68950: LD_VAR 0 51
68954: PUSH
68955: LD_VAR 0 52
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: PUSH
68968: LD_VAR 0 4
68972: PUSH
68973: LD_INT 1
68975: PLUS
68976: ARRAY
68977: ST_TO_ADDR
68978: GO 69169
68980: LD_INT 4
68982: DOUBLE
68983: EQUAL
68984: IFTRUE 69006
68986: LD_INT 5
68988: DOUBLE
68989: EQUAL
68990: IFTRUE 69006
68992: LD_INT 34
68994: DOUBLE
68995: EQUAL
68996: IFTRUE 69006
68998: LD_INT 37
69000: DOUBLE
69001: EQUAL
69002: IFTRUE 69006
69004: GO 69062
69006: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69007: LD_ADDR_VAR 0 9
69011: PUSH
69012: LD_VAR 0 53
69016: PUSH
69017: LD_VAR 0 54
69021: PUSH
69022: LD_VAR 0 55
69026: PUSH
69027: LD_VAR 0 56
69031: PUSH
69032: LD_VAR 0 57
69036: PUSH
69037: LD_VAR 0 58
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: PUSH
69050: LD_VAR 0 4
69054: PUSH
69055: LD_INT 1
69057: PLUS
69058: ARRAY
69059: ST_TO_ADDR
69060: GO 69169
69062: LD_INT 31
69064: DOUBLE
69065: EQUAL
69066: IFTRUE 69112
69068: LD_INT 32
69070: DOUBLE
69071: EQUAL
69072: IFTRUE 69112
69074: LD_INT 33
69076: DOUBLE
69077: EQUAL
69078: IFTRUE 69112
69080: LD_INT 27
69082: DOUBLE
69083: EQUAL
69084: IFTRUE 69112
69086: LD_INT 26
69088: DOUBLE
69089: EQUAL
69090: IFTRUE 69112
69092: LD_INT 28
69094: DOUBLE
69095: EQUAL
69096: IFTRUE 69112
69098: LD_INT 29
69100: DOUBLE
69101: EQUAL
69102: IFTRUE 69112
69104: LD_INT 30
69106: DOUBLE
69107: EQUAL
69108: IFTRUE 69112
69110: GO 69168
69112: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69113: LD_ADDR_VAR 0 9
69117: PUSH
69118: LD_VAR 0 59
69122: PUSH
69123: LD_VAR 0 60
69127: PUSH
69128: LD_VAR 0 61
69132: PUSH
69133: LD_VAR 0 62
69137: PUSH
69138: LD_VAR 0 63
69142: PUSH
69143: LD_VAR 0 64
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: PUSH
69156: LD_VAR 0 4
69160: PUSH
69161: LD_INT 1
69163: PLUS
69164: ARRAY
69165: ST_TO_ADDR
69166: GO 69169
69168: POP
// temp_list2 = [ ] ;
69169: LD_ADDR_VAR 0 10
69173: PUSH
69174: EMPTY
69175: ST_TO_ADDR
// for i in temp_list do
69176: LD_ADDR_VAR 0 8
69180: PUSH
69181: LD_VAR 0 9
69185: PUSH
69186: FOR_IN
69187: IFFALSE 69239
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69189: LD_ADDR_VAR 0 10
69193: PUSH
69194: LD_VAR 0 10
69198: PUSH
69199: LD_VAR 0 8
69203: PUSH
69204: LD_INT 1
69206: ARRAY
69207: PUSH
69208: LD_VAR 0 2
69212: PLUS
69213: PUSH
69214: LD_VAR 0 8
69218: PUSH
69219: LD_INT 2
69221: ARRAY
69222: PUSH
69223: LD_VAR 0 3
69227: PLUS
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: EMPTY
69234: LIST
69235: ADD
69236: ST_TO_ADDR
69237: GO 69186
69239: POP
69240: POP
// result = temp_list2 ;
69241: LD_ADDR_VAR 0 7
69245: PUSH
69246: LD_VAR 0 10
69250: ST_TO_ADDR
// end ;
69251: LD_VAR 0 7
69255: RET
// export function EnemyInRange ( unit , dist ) ; begin
69256: LD_INT 0
69258: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69259: LD_ADDR_VAR 0 3
69263: PUSH
69264: LD_VAR 0 1
69268: PPUSH
69269: CALL_OW 255
69273: PPUSH
69274: LD_VAR 0 1
69278: PPUSH
69279: CALL_OW 250
69283: PPUSH
69284: LD_VAR 0 1
69288: PPUSH
69289: CALL_OW 251
69293: PPUSH
69294: LD_VAR 0 2
69298: PPUSH
69299: CALL 42629 0 4
69303: PUSH
69304: LD_INT 4
69306: ARRAY
69307: ST_TO_ADDR
// end ;
69308: LD_VAR 0 3
69312: RET
// export function PlayerSeeMe ( unit ) ; begin
69313: LD_INT 0
69315: PPUSH
// result := See ( your_side , unit ) ;
69316: LD_ADDR_VAR 0 2
69320: PUSH
69321: LD_OWVAR 2
69325: PPUSH
69326: LD_VAR 0 1
69330: PPUSH
69331: CALL_OW 292
69335: ST_TO_ADDR
// end ;
69336: LD_VAR 0 2
69340: RET
// export function ReverseDir ( unit ) ; begin
69341: LD_INT 0
69343: PPUSH
// if not unit then
69344: LD_VAR 0 1
69348: NOT
69349: IFFALSE 69353
// exit ;
69351: GO 69376
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69353: LD_ADDR_VAR 0 2
69357: PUSH
69358: LD_VAR 0 1
69362: PPUSH
69363: CALL_OW 254
69367: PUSH
69368: LD_INT 3
69370: PLUS
69371: PUSH
69372: LD_INT 6
69374: MOD
69375: ST_TO_ADDR
// end ;
69376: LD_VAR 0 2
69380: RET
// export function ReverseArray ( array ) ; var i ; begin
69381: LD_INT 0
69383: PPUSH
69384: PPUSH
// if not array then
69385: LD_VAR 0 1
69389: NOT
69390: IFFALSE 69394
// exit ;
69392: GO 69449
// result := [ ] ;
69394: LD_ADDR_VAR 0 2
69398: PUSH
69399: EMPTY
69400: ST_TO_ADDR
// for i := array downto 1 do
69401: LD_ADDR_VAR 0 3
69405: PUSH
69406: DOUBLE
69407: LD_VAR 0 1
69411: INC
69412: ST_TO_ADDR
69413: LD_INT 1
69415: PUSH
69416: FOR_DOWNTO
69417: IFFALSE 69447
// result := Join ( result , array [ i ] ) ;
69419: LD_ADDR_VAR 0 2
69423: PUSH
69424: LD_VAR 0 2
69428: PPUSH
69429: LD_VAR 0 1
69433: PUSH
69434: LD_VAR 0 3
69438: ARRAY
69439: PPUSH
69440: CALL 74094 0 2
69444: ST_TO_ADDR
69445: GO 69416
69447: POP
69448: POP
// end ;
69449: LD_VAR 0 2
69453: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69454: LD_INT 0
69456: PPUSH
69457: PPUSH
69458: PPUSH
69459: PPUSH
69460: PPUSH
69461: PPUSH
// if not unit or not hexes then
69462: LD_VAR 0 1
69466: NOT
69467: PUSH
69468: LD_VAR 0 2
69472: NOT
69473: OR
69474: IFFALSE 69478
// exit ;
69476: GO 69601
// dist := 9999 ;
69478: LD_ADDR_VAR 0 5
69482: PUSH
69483: LD_INT 9999
69485: ST_TO_ADDR
// for i = 1 to hexes do
69486: LD_ADDR_VAR 0 4
69490: PUSH
69491: DOUBLE
69492: LD_INT 1
69494: DEC
69495: ST_TO_ADDR
69496: LD_VAR 0 2
69500: PUSH
69501: FOR_TO
69502: IFFALSE 69589
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69504: LD_ADDR_VAR 0 6
69508: PUSH
69509: LD_VAR 0 1
69513: PPUSH
69514: LD_VAR 0 2
69518: PUSH
69519: LD_VAR 0 4
69523: ARRAY
69524: PUSH
69525: LD_INT 1
69527: ARRAY
69528: PPUSH
69529: LD_VAR 0 2
69533: PUSH
69534: LD_VAR 0 4
69538: ARRAY
69539: PUSH
69540: LD_INT 2
69542: ARRAY
69543: PPUSH
69544: CALL_OW 297
69548: ST_TO_ADDR
// if tdist < dist then
69549: LD_VAR 0 6
69553: PUSH
69554: LD_VAR 0 5
69558: LESS
69559: IFFALSE 69587
// begin hex := hexes [ i ] ;
69561: LD_ADDR_VAR 0 8
69565: PUSH
69566: LD_VAR 0 2
69570: PUSH
69571: LD_VAR 0 4
69575: ARRAY
69576: ST_TO_ADDR
// dist := tdist ;
69577: LD_ADDR_VAR 0 5
69581: PUSH
69582: LD_VAR 0 6
69586: ST_TO_ADDR
// end ; end ;
69587: GO 69501
69589: POP
69590: POP
// result := hex ;
69591: LD_ADDR_VAR 0 3
69595: PUSH
69596: LD_VAR 0 8
69600: ST_TO_ADDR
// end ;
69601: LD_VAR 0 3
69605: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69606: LD_INT 0
69608: PPUSH
69609: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69610: LD_VAR 0 1
69614: NOT
69615: PUSH
69616: LD_VAR 0 1
69620: PUSH
69621: LD_INT 21
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 23
69633: PUSH
69634: LD_INT 2
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PPUSH
69645: CALL_OW 69
69649: IN
69650: NOT
69651: OR
69652: IFFALSE 69656
// exit ;
69654: GO 69703
// for i = 1 to 3 do
69656: LD_ADDR_VAR 0 3
69660: PUSH
69661: DOUBLE
69662: LD_INT 1
69664: DEC
69665: ST_TO_ADDR
69666: LD_INT 3
69668: PUSH
69669: FOR_TO
69670: IFFALSE 69701
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69672: LD_VAR 0 1
69676: PPUSH
69677: CALL_OW 250
69681: PPUSH
69682: LD_VAR 0 1
69686: PPUSH
69687: CALL_OW 251
69691: PPUSH
69692: LD_INT 1
69694: PPUSH
69695: CALL_OW 453
69699: GO 69669
69701: POP
69702: POP
// end ;
69703: LD_VAR 0 2
69707: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69708: LD_INT 0
69710: PPUSH
69711: PPUSH
69712: PPUSH
69713: PPUSH
69714: PPUSH
69715: PPUSH
// if not unit or not enemy_unit then
69716: LD_VAR 0 1
69720: NOT
69721: PUSH
69722: LD_VAR 0 2
69726: NOT
69727: OR
69728: IFFALSE 69732
// exit ;
69730: GO 70199
// if GetLives ( i ) < 250 then
69732: LD_VAR 0 4
69736: PPUSH
69737: CALL_OW 256
69741: PUSH
69742: LD_INT 250
69744: LESS
69745: IFFALSE 69758
// begin ComAutodestruct ( i ) ;
69747: LD_VAR 0 4
69751: PPUSH
69752: CALL 69606 0 1
// exit ;
69756: GO 70199
// end ; x := GetX ( enemy_unit ) ;
69758: LD_ADDR_VAR 0 7
69762: PUSH
69763: LD_VAR 0 2
69767: PPUSH
69768: CALL_OW 250
69772: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69773: LD_ADDR_VAR 0 8
69777: PUSH
69778: LD_VAR 0 2
69782: PPUSH
69783: CALL_OW 251
69787: ST_TO_ADDR
// if not x or not y then
69788: LD_VAR 0 7
69792: NOT
69793: PUSH
69794: LD_VAR 0 8
69798: NOT
69799: OR
69800: IFFALSE 69804
// exit ;
69802: GO 70199
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69804: LD_ADDR_VAR 0 6
69808: PUSH
69809: LD_VAR 0 7
69813: PPUSH
69814: LD_INT 0
69816: PPUSH
69817: LD_INT 4
69819: PPUSH
69820: CALL_OW 272
69824: PUSH
69825: LD_VAR 0 8
69829: PPUSH
69830: LD_INT 0
69832: PPUSH
69833: LD_INT 4
69835: PPUSH
69836: CALL_OW 273
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_VAR 0 7
69849: PPUSH
69850: LD_INT 1
69852: PPUSH
69853: LD_INT 4
69855: PPUSH
69856: CALL_OW 272
69860: PUSH
69861: LD_VAR 0 8
69865: PPUSH
69866: LD_INT 1
69868: PPUSH
69869: LD_INT 4
69871: PPUSH
69872: CALL_OW 273
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_VAR 0 7
69885: PPUSH
69886: LD_INT 2
69888: PPUSH
69889: LD_INT 4
69891: PPUSH
69892: CALL_OW 272
69896: PUSH
69897: LD_VAR 0 8
69901: PPUSH
69902: LD_INT 2
69904: PPUSH
69905: LD_INT 4
69907: PPUSH
69908: CALL_OW 273
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_VAR 0 7
69921: PPUSH
69922: LD_INT 3
69924: PPUSH
69925: LD_INT 4
69927: PPUSH
69928: CALL_OW 272
69932: PUSH
69933: LD_VAR 0 8
69937: PPUSH
69938: LD_INT 3
69940: PPUSH
69941: LD_INT 4
69943: PPUSH
69944: CALL_OW 273
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_VAR 0 7
69957: PPUSH
69958: LD_INT 4
69960: PPUSH
69961: LD_INT 4
69963: PPUSH
69964: CALL_OW 272
69968: PUSH
69969: LD_VAR 0 8
69973: PPUSH
69974: LD_INT 4
69976: PPUSH
69977: LD_INT 4
69979: PPUSH
69980: CALL_OW 273
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_VAR 0 7
69993: PPUSH
69994: LD_INT 5
69996: PPUSH
69997: LD_INT 4
69999: PPUSH
70000: CALL_OW 272
70004: PUSH
70005: LD_VAR 0 8
70009: PPUSH
70010: LD_INT 5
70012: PPUSH
70013: LD_INT 4
70015: PPUSH
70016: CALL_OW 273
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: ST_TO_ADDR
// for i = tmp downto 1 do
70033: LD_ADDR_VAR 0 4
70037: PUSH
70038: DOUBLE
70039: LD_VAR 0 6
70043: INC
70044: ST_TO_ADDR
70045: LD_INT 1
70047: PUSH
70048: FOR_DOWNTO
70049: IFFALSE 70150
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70051: LD_VAR 0 6
70055: PUSH
70056: LD_VAR 0 4
70060: ARRAY
70061: PUSH
70062: LD_INT 1
70064: ARRAY
70065: PPUSH
70066: LD_VAR 0 6
70070: PUSH
70071: LD_VAR 0 4
70075: ARRAY
70076: PUSH
70077: LD_INT 2
70079: ARRAY
70080: PPUSH
70081: CALL_OW 488
70085: NOT
70086: PUSH
70087: LD_VAR 0 6
70091: PUSH
70092: LD_VAR 0 4
70096: ARRAY
70097: PUSH
70098: LD_INT 1
70100: ARRAY
70101: PPUSH
70102: LD_VAR 0 6
70106: PUSH
70107: LD_VAR 0 4
70111: ARRAY
70112: PUSH
70113: LD_INT 2
70115: ARRAY
70116: PPUSH
70117: CALL_OW 428
70121: PUSH
70122: LD_INT 0
70124: NONEQUAL
70125: OR
70126: IFFALSE 70148
// tmp := Delete ( tmp , i ) ;
70128: LD_ADDR_VAR 0 6
70132: PUSH
70133: LD_VAR 0 6
70137: PPUSH
70138: LD_VAR 0 4
70142: PPUSH
70143: CALL_OW 3
70147: ST_TO_ADDR
70148: GO 70048
70150: POP
70151: POP
// j := GetClosestHex ( unit , tmp ) ;
70152: LD_ADDR_VAR 0 5
70156: PUSH
70157: LD_VAR 0 1
70161: PPUSH
70162: LD_VAR 0 6
70166: PPUSH
70167: CALL 69454 0 2
70171: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70172: LD_VAR 0 1
70176: PPUSH
70177: LD_VAR 0 5
70181: PUSH
70182: LD_INT 1
70184: ARRAY
70185: PPUSH
70186: LD_VAR 0 5
70190: PUSH
70191: LD_INT 2
70193: ARRAY
70194: PPUSH
70195: CALL_OW 111
// end ;
70199: LD_VAR 0 3
70203: RET
// export function PrepareApemanSoldier ( ) ; begin
70204: LD_INT 0
70206: PPUSH
// uc_nation := 0 ;
70207: LD_ADDR_OWVAR 21
70211: PUSH
70212: LD_INT 0
70214: ST_TO_ADDR
// hc_sex := sex_male ;
70215: LD_ADDR_OWVAR 27
70219: PUSH
70220: LD_INT 1
70222: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70223: LD_ADDR_OWVAR 28
70227: PUSH
70228: LD_INT 15
70230: ST_TO_ADDR
// hc_gallery :=  ;
70231: LD_ADDR_OWVAR 33
70235: PUSH
70236: LD_STRING 
70238: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70239: LD_ADDR_OWVAR 31
70243: PUSH
70244: LD_INT 0
70246: PPUSH
70247: LD_INT 3
70249: PPUSH
70250: CALL_OW 12
70254: PUSH
70255: LD_INT 0
70257: PPUSH
70258: LD_INT 3
70260: PPUSH
70261: CALL_OW 12
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: ST_TO_ADDR
// end ;
70278: LD_VAR 0 1
70282: RET
// export function PrepareApemanEngineer ( ) ; begin
70283: LD_INT 0
70285: PPUSH
// uc_nation := 0 ;
70286: LD_ADDR_OWVAR 21
70290: PUSH
70291: LD_INT 0
70293: ST_TO_ADDR
// hc_sex := sex_male ;
70294: LD_ADDR_OWVAR 27
70298: PUSH
70299: LD_INT 1
70301: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70302: LD_ADDR_OWVAR 28
70306: PUSH
70307: LD_INT 16
70309: ST_TO_ADDR
// hc_gallery :=  ;
70310: LD_ADDR_OWVAR 33
70314: PUSH
70315: LD_STRING 
70317: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70318: LD_ADDR_OWVAR 31
70322: PUSH
70323: LD_INT 0
70325: PPUSH
70326: LD_INT 3
70328: PPUSH
70329: CALL_OW 12
70333: PUSH
70334: LD_INT 0
70336: PPUSH
70337: LD_INT 3
70339: PPUSH
70340: CALL_OW 12
70344: PUSH
70345: LD_INT 0
70347: PUSH
70348: LD_INT 0
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: ST_TO_ADDR
// end ;
70357: LD_VAR 0 1
70361: RET
// export function PrepareApeman ( agressivity ) ; begin
70362: LD_INT 0
70364: PPUSH
// uc_side := 0 ;
70365: LD_ADDR_OWVAR 20
70369: PUSH
70370: LD_INT 0
70372: ST_TO_ADDR
// uc_nation := 0 ;
70373: LD_ADDR_OWVAR 21
70377: PUSH
70378: LD_INT 0
70380: ST_TO_ADDR
// hc_sex := sex_male ;
70381: LD_ADDR_OWVAR 27
70385: PUSH
70386: LD_INT 1
70388: ST_TO_ADDR
// hc_class := class_apeman ;
70389: LD_ADDR_OWVAR 28
70393: PUSH
70394: LD_INT 12
70396: ST_TO_ADDR
// hc_gallery :=  ;
70397: LD_ADDR_OWVAR 33
70401: PUSH
70402: LD_STRING 
70404: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70405: LD_ADDR_OWVAR 35
70409: PUSH
70410: LD_VAR 0 1
70414: NEG
70415: PPUSH
70416: LD_VAR 0 1
70420: PPUSH
70421: CALL_OW 12
70425: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70426: LD_ADDR_OWVAR 31
70430: PUSH
70431: LD_INT 0
70433: PPUSH
70434: LD_INT 3
70436: PPUSH
70437: CALL_OW 12
70441: PUSH
70442: LD_INT 0
70444: PPUSH
70445: LD_INT 3
70447: PPUSH
70448: CALL_OW 12
70452: PUSH
70453: LD_INT 0
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: ST_TO_ADDR
// end ;
70465: LD_VAR 0 2
70469: RET
// export function PrepareTiger ( agressivity ) ; begin
70470: LD_INT 0
70472: PPUSH
// uc_side := 0 ;
70473: LD_ADDR_OWVAR 20
70477: PUSH
70478: LD_INT 0
70480: ST_TO_ADDR
// uc_nation := 0 ;
70481: LD_ADDR_OWVAR 21
70485: PUSH
70486: LD_INT 0
70488: ST_TO_ADDR
// hc_class := class_tiger ;
70489: LD_ADDR_OWVAR 28
70493: PUSH
70494: LD_INT 14
70496: ST_TO_ADDR
// hc_gallery :=  ;
70497: LD_ADDR_OWVAR 33
70501: PUSH
70502: LD_STRING 
70504: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70505: LD_ADDR_OWVAR 35
70509: PUSH
70510: LD_VAR 0 1
70514: NEG
70515: PPUSH
70516: LD_VAR 0 1
70520: PPUSH
70521: CALL_OW 12
70525: ST_TO_ADDR
// end ;
70526: LD_VAR 0 2
70530: RET
// export function PrepareEnchidna ( ) ; begin
70531: LD_INT 0
70533: PPUSH
// uc_side := 0 ;
70534: LD_ADDR_OWVAR 20
70538: PUSH
70539: LD_INT 0
70541: ST_TO_ADDR
// uc_nation := 0 ;
70542: LD_ADDR_OWVAR 21
70546: PUSH
70547: LD_INT 0
70549: ST_TO_ADDR
// hc_class := class_baggie ;
70550: LD_ADDR_OWVAR 28
70554: PUSH
70555: LD_INT 13
70557: ST_TO_ADDR
// hc_gallery :=  ;
70558: LD_ADDR_OWVAR 33
70562: PUSH
70563: LD_STRING 
70565: ST_TO_ADDR
// end ;
70566: LD_VAR 0 1
70570: RET
// export function PrepareFrog ( ) ; begin
70571: LD_INT 0
70573: PPUSH
// uc_side := 0 ;
70574: LD_ADDR_OWVAR 20
70578: PUSH
70579: LD_INT 0
70581: ST_TO_ADDR
// uc_nation := 0 ;
70582: LD_ADDR_OWVAR 21
70586: PUSH
70587: LD_INT 0
70589: ST_TO_ADDR
// hc_class := class_frog ;
70590: LD_ADDR_OWVAR 28
70594: PUSH
70595: LD_INT 19
70597: ST_TO_ADDR
// hc_gallery :=  ;
70598: LD_ADDR_OWVAR 33
70602: PUSH
70603: LD_STRING 
70605: ST_TO_ADDR
// end ;
70606: LD_VAR 0 1
70610: RET
// export function PrepareFish ( ) ; begin
70611: LD_INT 0
70613: PPUSH
// uc_side := 0 ;
70614: LD_ADDR_OWVAR 20
70618: PUSH
70619: LD_INT 0
70621: ST_TO_ADDR
// uc_nation := 0 ;
70622: LD_ADDR_OWVAR 21
70626: PUSH
70627: LD_INT 0
70629: ST_TO_ADDR
// hc_class := class_fish ;
70630: LD_ADDR_OWVAR 28
70634: PUSH
70635: LD_INT 20
70637: ST_TO_ADDR
// hc_gallery :=  ;
70638: LD_ADDR_OWVAR 33
70642: PUSH
70643: LD_STRING 
70645: ST_TO_ADDR
// end ;
70646: LD_VAR 0 1
70650: RET
// export function PrepareBird ( ) ; begin
70651: LD_INT 0
70653: PPUSH
// uc_side := 0 ;
70654: LD_ADDR_OWVAR 20
70658: PUSH
70659: LD_INT 0
70661: ST_TO_ADDR
// uc_nation := 0 ;
70662: LD_ADDR_OWVAR 21
70666: PUSH
70667: LD_INT 0
70669: ST_TO_ADDR
// hc_class := class_phororhacos ;
70670: LD_ADDR_OWVAR 28
70674: PUSH
70675: LD_INT 18
70677: ST_TO_ADDR
// hc_gallery :=  ;
70678: LD_ADDR_OWVAR 33
70682: PUSH
70683: LD_STRING 
70685: ST_TO_ADDR
// end ;
70686: LD_VAR 0 1
70690: RET
// export function PrepareHorse ( ) ; begin
70691: LD_INT 0
70693: PPUSH
// uc_side := 0 ;
70694: LD_ADDR_OWVAR 20
70698: PUSH
70699: LD_INT 0
70701: ST_TO_ADDR
// uc_nation := 0 ;
70702: LD_ADDR_OWVAR 21
70706: PUSH
70707: LD_INT 0
70709: ST_TO_ADDR
// hc_class := class_horse ;
70710: LD_ADDR_OWVAR 28
70714: PUSH
70715: LD_INT 21
70717: ST_TO_ADDR
// hc_gallery :=  ;
70718: LD_ADDR_OWVAR 33
70722: PUSH
70723: LD_STRING 
70725: ST_TO_ADDR
// end ;
70726: LD_VAR 0 1
70730: RET
// export function PrepareMastodont ( ) ; begin
70731: LD_INT 0
70733: PPUSH
// uc_side := 0 ;
70734: LD_ADDR_OWVAR 20
70738: PUSH
70739: LD_INT 0
70741: ST_TO_ADDR
// uc_nation := 0 ;
70742: LD_ADDR_OWVAR 21
70746: PUSH
70747: LD_INT 0
70749: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70750: LD_ADDR_OWVAR 37
70754: PUSH
70755: LD_INT 31
70757: ST_TO_ADDR
// vc_control := control_rider ;
70758: LD_ADDR_OWVAR 38
70762: PUSH
70763: LD_INT 4
70765: ST_TO_ADDR
// end ;
70766: LD_VAR 0 1
70770: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70771: LD_INT 0
70773: PPUSH
70774: PPUSH
70775: PPUSH
// uc_side = 0 ;
70776: LD_ADDR_OWVAR 20
70780: PUSH
70781: LD_INT 0
70783: ST_TO_ADDR
// uc_nation = 0 ;
70784: LD_ADDR_OWVAR 21
70788: PUSH
70789: LD_INT 0
70791: ST_TO_ADDR
// InitHc_All ( ) ;
70792: CALL_OW 584
// InitVc ;
70796: CALL_OW 20
// if mastodonts then
70800: LD_VAR 0 6
70804: IFFALSE 70871
// for i = 1 to mastodonts do
70806: LD_ADDR_VAR 0 11
70810: PUSH
70811: DOUBLE
70812: LD_INT 1
70814: DEC
70815: ST_TO_ADDR
70816: LD_VAR 0 6
70820: PUSH
70821: FOR_TO
70822: IFFALSE 70869
// begin vc_chassis := 31 ;
70824: LD_ADDR_OWVAR 37
70828: PUSH
70829: LD_INT 31
70831: ST_TO_ADDR
// vc_control := control_rider ;
70832: LD_ADDR_OWVAR 38
70836: PUSH
70837: LD_INT 4
70839: ST_TO_ADDR
// animal := CreateVehicle ;
70840: LD_ADDR_VAR 0 12
70844: PUSH
70845: CALL_OW 45
70849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70850: LD_VAR 0 12
70854: PPUSH
70855: LD_VAR 0 8
70859: PPUSH
70860: LD_INT 0
70862: PPUSH
70863: CALL 72999 0 3
// end ;
70867: GO 70821
70869: POP
70870: POP
// if horses then
70871: LD_VAR 0 5
70875: IFFALSE 70942
// for i = 1 to horses do
70877: LD_ADDR_VAR 0 11
70881: PUSH
70882: DOUBLE
70883: LD_INT 1
70885: DEC
70886: ST_TO_ADDR
70887: LD_VAR 0 5
70891: PUSH
70892: FOR_TO
70893: IFFALSE 70940
// begin hc_class := 21 ;
70895: LD_ADDR_OWVAR 28
70899: PUSH
70900: LD_INT 21
70902: ST_TO_ADDR
// hc_gallery :=  ;
70903: LD_ADDR_OWVAR 33
70907: PUSH
70908: LD_STRING 
70910: ST_TO_ADDR
// animal := CreateHuman ;
70911: LD_ADDR_VAR 0 12
70915: PUSH
70916: CALL_OW 44
70920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70921: LD_VAR 0 12
70925: PPUSH
70926: LD_VAR 0 8
70930: PPUSH
70931: LD_INT 0
70933: PPUSH
70934: CALL 72999 0 3
// end ;
70938: GO 70892
70940: POP
70941: POP
// if birds then
70942: LD_VAR 0 1
70946: IFFALSE 71013
// for i = 1 to birds do
70948: LD_ADDR_VAR 0 11
70952: PUSH
70953: DOUBLE
70954: LD_INT 1
70956: DEC
70957: ST_TO_ADDR
70958: LD_VAR 0 1
70962: PUSH
70963: FOR_TO
70964: IFFALSE 71011
// begin hc_class := 18 ;
70966: LD_ADDR_OWVAR 28
70970: PUSH
70971: LD_INT 18
70973: ST_TO_ADDR
// hc_gallery =  ;
70974: LD_ADDR_OWVAR 33
70978: PUSH
70979: LD_STRING 
70981: ST_TO_ADDR
// animal := CreateHuman ;
70982: LD_ADDR_VAR 0 12
70986: PUSH
70987: CALL_OW 44
70991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70992: LD_VAR 0 12
70996: PPUSH
70997: LD_VAR 0 8
71001: PPUSH
71002: LD_INT 0
71004: PPUSH
71005: CALL 72999 0 3
// end ;
71009: GO 70963
71011: POP
71012: POP
// if tigers then
71013: LD_VAR 0 2
71017: IFFALSE 71101
// for i = 1 to tigers do
71019: LD_ADDR_VAR 0 11
71023: PUSH
71024: DOUBLE
71025: LD_INT 1
71027: DEC
71028: ST_TO_ADDR
71029: LD_VAR 0 2
71033: PUSH
71034: FOR_TO
71035: IFFALSE 71099
// begin hc_class = class_tiger ;
71037: LD_ADDR_OWVAR 28
71041: PUSH
71042: LD_INT 14
71044: ST_TO_ADDR
// hc_gallery =  ;
71045: LD_ADDR_OWVAR 33
71049: PUSH
71050: LD_STRING 
71052: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71053: LD_ADDR_OWVAR 35
71057: PUSH
71058: LD_INT 7
71060: NEG
71061: PPUSH
71062: LD_INT 7
71064: PPUSH
71065: CALL_OW 12
71069: ST_TO_ADDR
// animal := CreateHuman ;
71070: LD_ADDR_VAR 0 12
71074: PUSH
71075: CALL_OW 44
71079: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71080: LD_VAR 0 12
71084: PPUSH
71085: LD_VAR 0 8
71089: PPUSH
71090: LD_INT 0
71092: PPUSH
71093: CALL 72999 0 3
// end ;
71097: GO 71034
71099: POP
71100: POP
// if apemans then
71101: LD_VAR 0 3
71105: IFFALSE 71228
// for i = 1 to apemans do
71107: LD_ADDR_VAR 0 11
71111: PUSH
71112: DOUBLE
71113: LD_INT 1
71115: DEC
71116: ST_TO_ADDR
71117: LD_VAR 0 3
71121: PUSH
71122: FOR_TO
71123: IFFALSE 71226
// begin hc_class = class_apeman ;
71125: LD_ADDR_OWVAR 28
71129: PUSH
71130: LD_INT 12
71132: ST_TO_ADDR
// hc_gallery =  ;
71133: LD_ADDR_OWVAR 33
71137: PUSH
71138: LD_STRING 
71140: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71141: LD_ADDR_OWVAR 35
71145: PUSH
71146: LD_INT 2
71148: NEG
71149: PPUSH
71150: LD_INT 2
71152: PPUSH
71153: CALL_OW 12
71157: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71158: LD_ADDR_OWVAR 31
71162: PUSH
71163: LD_INT 1
71165: PPUSH
71166: LD_INT 3
71168: PPUSH
71169: CALL_OW 12
71173: PUSH
71174: LD_INT 1
71176: PPUSH
71177: LD_INT 3
71179: PPUSH
71180: CALL_OW 12
71184: PUSH
71185: LD_INT 0
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: ST_TO_ADDR
// animal := CreateHuman ;
71197: LD_ADDR_VAR 0 12
71201: PUSH
71202: CALL_OW 44
71206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71207: LD_VAR 0 12
71211: PPUSH
71212: LD_VAR 0 8
71216: PPUSH
71217: LD_INT 0
71219: PPUSH
71220: CALL 72999 0 3
// end ;
71224: GO 71122
71226: POP
71227: POP
// if enchidnas then
71228: LD_VAR 0 4
71232: IFFALSE 71299
// for i = 1 to enchidnas do
71234: LD_ADDR_VAR 0 11
71238: PUSH
71239: DOUBLE
71240: LD_INT 1
71242: DEC
71243: ST_TO_ADDR
71244: LD_VAR 0 4
71248: PUSH
71249: FOR_TO
71250: IFFALSE 71297
// begin hc_class = 13 ;
71252: LD_ADDR_OWVAR 28
71256: PUSH
71257: LD_INT 13
71259: ST_TO_ADDR
// hc_gallery =  ;
71260: LD_ADDR_OWVAR 33
71264: PUSH
71265: LD_STRING 
71267: ST_TO_ADDR
// animal := CreateHuman ;
71268: LD_ADDR_VAR 0 12
71272: PUSH
71273: CALL_OW 44
71277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71278: LD_VAR 0 12
71282: PPUSH
71283: LD_VAR 0 8
71287: PPUSH
71288: LD_INT 0
71290: PPUSH
71291: CALL 72999 0 3
// end ;
71295: GO 71249
71297: POP
71298: POP
// if fishes then
71299: LD_VAR 0 7
71303: IFFALSE 71370
// for i = 1 to fishes do
71305: LD_ADDR_VAR 0 11
71309: PUSH
71310: DOUBLE
71311: LD_INT 1
71313: DEC
71314: ST_TO_ADDR
71315: LD_VAR 0 7
71319: PUSH
71320: FOR_TO
71321: IFFALSE 71368
// begin hc_class = 20 ;
71323: LD_ADDR_OWVAR 28
71327: PUSH
71328: LD_INT 20
71330: ST_TO_ADDR
// hc_gallery =  ;
71331: LD_ADDR_OWVAR 33
71335: PUSH
71336: LD_STRING 
71338: ST_TO_ADDR
// animal := CreateHuman ;
71339: LD_ADDR_VAR 0 12
71343: PUSH
71344: CALL_OW 44
71348: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71349: LD_VAR 0 12
71353: PPUSH
71354: LD_VAR 0 9
71358: PPUSH
71359: LD_INT 0
71361: PPUSH
71362: CALL 72999 0 3
// end ;
71366: GO 71320
71368: POP
71369: POP
// end ;
71370: LD_VAR 0 10
71374: RET
// export function WantHeal ( sci , unit ) ; begin
71375: LD_INT 0
71377: PPUSH
// if GetTaskList ( sci ) > 0 then
71378: LD_VAR 0 1
71382: PPUSH
71383: CALL_OW 437
71387: PUSH
71388: LD_INT 0
71390: GREATER
71391: IFFALSE 71461
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71393: LD_VAR 0 1
71397: PPUSH
71398: CALL_OW 437
71402: PUSH
71403: LD_INT 1
71405: ARRAY
71406: PUSH
71407: LD_INT 1
71409: ARRAY
71410: PUSH
71411: LD_STRING l
71413: EQUAL
71414: PUSH
71415: LD_VAR 0 1
71419: PPUSH
71420: CALL_OW 437
71424: PUSH
71425: LD_INT 1
71427: ARRAY
71428: PUSH
71429: LD_INT 4
71431: ARRAY
71432: PUSH
71433: LD_VAR 0 2
71437: EQUAL
71438: AND
71439: IFFALSE 71451
// result := true else
71441: LD_ADDR_VAR 0 3
71445: PUSH
71446: LD_INT 1
71448: ST_TO_ADDR
71449: GO 71459
// result := false ;
71451: LD_ADDR_VAR 0 3
71455: PUSH
71456: LD_INT 0
71458: ST_TO_ADDR
// end else
71459: GO 71469
// result := false ;
71461: LD_ADDR_VAR 0 3
71465: PUSH
71466: LD_INT 0
71468: ST_TO_ADDR
// end ;
71469: LD_VAR 0 3
71473: RET
// export function HealTarget ( sci ) ; begin
71474: LD_INT 0
71476: PPUSH
// if not sci then
71477: LD_VAR 0 1
71481: NOT
71482: IFFALSE 71486
// exit ;
71484: GO 71551
// result := 0 ;
71486: LD_ADDR_VAR 0 2
71490: PUSH
71491: LD_INT 0
71493: ST_TO_ADDR
// if GetTaskList ( sci ) then
71494: LD_VAR 0 1
71498: PPUSH
71499: CALL_OW 437
71503: IFFALSE 71551
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71505: LD_VAR 0 1
71509: PPUSH
71510: CALL_OW 437
71514: PUSH
71515: LD_INT 1
71517: ARRAY
71518: PUSH
71519: LD_INT 1
71521: ARRAY
71522: PUSH
71523: LD_STRING l
71525: EQUAL
71526: IFFALSE 71551
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71528: LD_ADDR_VAR 0 2
71532: PUSH
71533: LD_VAR 0 1
71537: PPUSH
71538: CALL_OW 437
71542: PUSH
71543: LD_INT 1
71545: ARRAY
71546: PUSH
71547: LD_INT 4
71549: ARRAY
71550: ST_TO_ADDR
// end ;
71551: LD_VAR 0 2
71555: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71556: LD_INT 0
71558: PPUSH
71559: PPUSH
71560: PPUSH
71561: PPUSH
// if not base_units then
71562: LD_VAR 0 1
71566: NOT
71567: IFFALSE 71571
// exit ;
71569: GO 71658
// result := false ;
71571: LD_ADDR_VAR 0 2
71575: PUSH
71576: LD_INT 0
71578: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71579: LD_ADDR_VAR 0 5
71583: PUSH
71584: LD_VAR 0 1
71588: PPUSH
71589: LD_INT 21
71591: PUSH
71592: LD_INT 3
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PPUSH
71599: CALL_OW 72
71603: ST_TO_ADDR
// if not tmp then
71604: LD_VAR 0 5
71608: NOT
71609: IFFALSE 71613
// exit ;
71611: GO 71658
// for i in tmp do
71613: LD_ADDR_VAR 0 3
71617: PUSH
71618: LD_VAR 0 5
71622: PUSH
71623: FOR_IN
71624: IFFALSE 71656
// begin result := EnemyInRange ( i , 22 ) ;
71626: LD_ADDR_VAR 0 2
71630: PUSH
71631: LD_VAR 0 3
71635: PPUSH
71636: LD_INT 22
71638: PPUSH
71639: CALL 69256 0 2
71643: ST_TO_ADDR
// if result then
71644: LD_VAR 0 2
71648: IFFALSE 71654
// exit ;
71650: POP
71651: POP
71652: GO 71658
// end ;
71654: GO 71623
71656: POP
71657: POP
// end ;
71658: LD_VAR 0 2
71662: RET
// export function FilterByTag ( units , tag ) ; begin
71663: LD_INT 0
71665: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71666: LD_ADDR_VAR 0 3
71670: PUSH
71671: LD_VAR 0 1
71675: PPUSH
71676: LD_INT 120
71678: PUSH
71679: LD_VAR 0 2
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PPUSH
71688: CALL_OW 72
71692: ST_TO_ADDR
// end ;
71693: LD_VAR 0 3
71697: RET
// export function IsDriver ( un ) ; begin
71698: LD_INT 0
71700: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71701: LD_ADDR_VAR 0 2
71705: PUSH
71706: LD_VAR 0 1
71710: PUSH
71711: LD_INT 55
71713: PUSH
71714: EMPTY
71715: LIST
71716: PPUSH
71717: CALL_OW 69
71721: IN
71722: ST_TO_ADDR
// end ;
71723: LD_VAR 0 2
71727: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71728: LD_INT 0
71730: PPUSH
71731: PPUSH
// list := [ ] ;
71732: LD_ADDR_VAR 0 5
71736: PUSH
71737: EMPTY
71738: ST_TO_ADDR
// case d of 0 :
71739: LD_VAR 0 3
71743: PUSH
71744: LD_INT 0
71746: DOUBLE
71747: EQUAL
71748: IFTRUE 71752
71750: GO 71885
71752: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71753: LD_ADDR_VAR 0 5
71757: PUSH
71758: LD_VAR 0 1
71762: PUSH
71763: LD_INT 4
71765: MINUS
71766: PUSH
71767: LD_VAR 0 2
71771: PUSH
71772: LD_INT 4
71774: MINUS
71775: PUSH
71776: LD_INT 2
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: LIST
71783: PUSH
71784: LD_VAR 0 1
71788: PUSH
71789: LD_INT 3
71791: MINUS
71792: PUSH
71793: LD_VAR 0 2
71797: PUSH
71798: LD_INT 1
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: LIST
71805: PUSH
71806: LD_VAR 0 1
71810: PUSH
71811: LD_INT 4
71813: PLUS
71814: PUSH
71815: LD_VAR 0 2
71819: PUSH
71820: LD_INT 4
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: LIST
71827: PUSH
71828: LD_VAR 0 1
71832: PUSH
71833: LD_INT 3
71835: PLUS
71836: PUSH
71837: LD_VAR 0 2
71841: PUSH
71842: LD_INT 3
71844: PLUS
71845: PUSH
71846: LD_INT 5
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: LIST
71853: PUSH
71854: LD_VAR 0 1
71858: PUSH
71859: LD_VAR 0 2
71863: PUSH
71864: LD_INT 4
71866: PLUS
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: LIST
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: ST_TO_ADDR
// end ; 1 :
71883: GO 72583
71885: LD_INT 1
71887: DOUBLE
71888: EQUAL
71889: IFTRUE 71893
71891: GO 72026
71893: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71894: LD_ADDR_VAR 0 5
71898: PUSH
71899: LD_VAR 0 1
71903: PUSH
71904: LD_VAR 0 2
71908: PUSH
71909: LD_INT 4
71911: MINUS
71912: PUSH
71913: LD_INT 3
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: LIST
71920: PUSH
71921: LD_VAR 0 1
71925: PUSH
71926: LD_INT 3
71928: MINUS
71929: PUSH
71930: LD_VAR 0 2
71934: PUSH
71935: LD_INT 3
71937: MINUS
71938: PUSH
71939: LD_INT 2
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: LIST
71946: PUSH
71947: LD_VAR 0 1
71951: PUSH
71952: LD_INT 4
71954: MINUS
71955: PUSH
71956: LD_VAR 0 2
71960: PUSH
71961: LD_INT 1
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: LIST
71968: PUSH
71969: LD_VAR 0 1
71973: PUSH
71974: LD_VAR 0 2
71978: PUSH
71979: LD_INT 3
71981: PLUS
71982: PUSH
71983: LD_INT 0
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: LIST
71990: PUSH
71991: LD_VAR 0 1
71995: PUSH
71996: LD_INT 4
71998: PLUS
71999: PUSH
72000: LD_VAR 0 2
72004: PUSH
72005: LD_INT 4
72007: PLUS
72008: PUSH
72009: LD_INT 5
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: ST_TO_ADDR
// end ; 2 :
72024: GO 72583
72026: LD_INT 2
72028: DOUBLE
72029: EQUAL
72030: IFTRUE 72034
72032: GO 72163
72034: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72035: LD_ADDR_VAR 0 5
72039: PUSH
72040: LD_VAR 0 1
72044: PUSH
72045: LD_VAR 0 2
72049: PUSH
72050: LD_INT 3
72052: MINUS
72053: PUSH
72054: LD_INT 3
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: LIST
72061: PUSH
72062: LD_VAR 0 1
72066: PUSH
72067: LD_INT 4
72069: PLUS
72070: PUSH
72071: LD_VAR 0 2
72075: PUSH
72076: LD_INT 4
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: LIST
72083: PUSH
72084: LD_VAR 0 1
72088: PUSH
72089: LD_VAR 0 2
72093: PUSH
72094: LD_INT 4
72096: PLUS
72097: PUSH
72098: LD_INT 0
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: PUSH
72106: LD_VAR 0 1
72110: PUSH
72111: LD_INT 3
72113: MINUS
72114: PUSH
72115: LD_VAR 0 2
72119: PUSH
72120: LD_INT 1
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: PUSH
72128: LD_VAR 0 1
72132: PUSH
72133: LD_INT 4
72135: MINUS
72136: PUSH
72137: LD_VAR 0 2
72141: PUSH
72142: LD_INT 4
72144: MINUS
72145: PUSH
72146: LD_INT 2
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: LIST
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: ST_TO_ADDR
// end ; 3 :
72161: GO 72583
72163: LD_INT 3
72165: DOUBLE
72166: EQUAL
72167: IFTRUE 72171
72169: GO 72304
72171: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72172: LD_ADDR_VAR 0 5
72176: PUSH
72177: LD_VAR 0 1
72181: PUSH
72182: LD_INT 3
72184: PLUS
72185: PUSH
72186: LD_VAR 0 2
72190: PUSH
72191: LD_INT 4
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: LIST
72198: PUSH
72199: LD_VAR 0 1
72203: PUSH
72204: LD_INT 4
72206: PLUS
72207: PUSH
72208: LD_VAR 0 2
72212: PUSH
72213: LD_INT 4
72215: PLUS
72216: PUSH
72217: LD_INT 5
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: LIST
72224: PUSH
72225: LD_VAR 0 1
72229: PUSH
72230: LD_INT 4
72232: MINUS
72233: PUSH
72234: LD_VAR 0 2
72238: PUSH
72239: LD_INT 1
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: LIST
72246: PUSH
72247: LD_VAR 0 1
72251: PUSH
72252: LD_VAR 0 2
72256: PUSH
72257: LD_INT 4
72259: MINUS
72260: PUSH
72261: LD_INT 3
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: LIST
72268: PUSH
72269: LD_VAR 0 1
72273: PUSH
72274: LD_INT 3
72276: MINUS
72277: PUSH
72278: LD_VAR 0 2
72282: PUSH
72283: LD_INT 3
72285: MINUS
72286: PUSH
72287: LD_INT 2
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: LIST
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: ST_TO_ADDR
// end ; 4 :
72302: GO 72583
72304: LD_INT 4
72306: DOUBLE
72307: EQUAL
72308: IFTRUE 72312
72310: GO 72445
72312: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72313: LD_ADDR_VAR 0 5
72317: PUSH
72318: LD_VAR 0 1
72322: PUSH
72323: LD_VAR 0 2
72327: PUSH
72328: LD_INT 4
72330: PLUS
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: LIST
72339: PUSH
72340: LD_VAR 0 1
72344: PUSH
72345: LD_INT 3
72347: PLUS
72348: PUSH
72349: LD_VAR 0 2
72353: PUSH
72354: LD_INT 3
72356: PLUS
72357: PUSH
72358: LD_INT 5
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: LIST
72365: PUSH
72366: LD_VAR 0 1
72370: PUSH
72371: LD_INT 4
72373: PLUS
72374: PUSH
72375: LD_VAR 0 2
72379: PUSH
72380: LD_INT 4
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: LIST
72387: PUSH
72388: LD_VAR 0 1
72392: PUSH
72393: LD_VAR 0 2
72397: PUSH
72398: LD_INT 3
72400: MINUS
72401: PUSH
72402: LD_INT 3
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: LIST
72409: PUSH
72410: LD_VAR 0 1
72414: PUSH
72415: LD_INT 4
72417: MINUS
72418: PUSH
72419: LD_VAR 0 2
72423: PUSH
72424: LD_INT 4
72426: MINUS
72427: PUSH
72428: LD_INT 2
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: LIST
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: ST_TO_ADDR
// end ; 5 :
72443: GO 72583
72445: LD_INT 5
72447: DOUBLE
72448: EQUAL
72449: IFTRUE 72453
72451: GO 72582
72453: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72454: LD_ADDR_VAR 0 5
72458: PUSH
72459: LD_VAR 0 1
72463: PUSH
72464: LD_INT 4
72466: MINUS
72467: PUSH
72468: LD_VAR 0 2
72472: PUSH
72473: LD_INT 1
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: PUSH
72481: LD_VAR 0 1
72485: PUSH
72486: LD_VAR 0 2
72490: PUSH
72491: LD_INT 4
72493: MINUS
72494: PUSH
72495: LD_INT 3
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: LIST
72502: PUSH
72503: LD_VAR 0 1
72507: PUSH
72508: LD_INT 4
72510: PLUS
72511: PUSH
72512: LD_VAR 0 2
72516: PUSH
72517: LD_INT 4
72519: PLUS
72520: PUSH
72521: LD_INT 5
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: LIST
72528: PUSH
72529: LD_VAR 0 1
72533: PUSH
72534: LD_INT 3
72536: PLUS
72537: PUSH
72538: LD_VAR 0 2
72542: PUSH
72543: LD_INT 4
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: LIST
72550: PUSH
72551: LD_VAR 0 1
72555: PUSH
72556: LD_VAR 0 2
72560: PUSH
72561: LD_INT 3
72563: PLUS
72564: PUSH
72565: LD_INT 0
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: LIST
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: ST_TO_ADDR
// end ; end ;
72580: GO 72583
72582: POP
// result := list ;
72583: LD_ADDR_VAR 0 4
72587: PUSH
72588: LD_VAR 0 5
72592: ST_TO_ADDR
// end ;
72593: LD_VAR 0 4
72597: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72598: LD_INT 0
72600: PPUSH
72601: PPUSH
72602: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72603: LD_VAR 0 1
72607: NOT
72608: PUSH
72609: LD_VAR 0 2
72613: PUSH
72614: LD_INT 1
72616: PUSH
72617: LD_INT 2
72619: PUSH
72620: LD_INT 3
72622: PUSH
72623: LD_INT 4
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: IN
72632: NOT
72633: OR
72634: IFFALSE 72638
// exit ;
72636: GO 72721
// tmp := [ ] ;
72638: LD_ADDR_VAR 0 5
72642: PUSH
72643: EMPTY
72644: ST_TO_ADDR
// for i in units do
72645: LD_ADDR_VAR 0 4
72649: PUSH
72650: LD_VAR 0 1
72654: PUSH
72655: FOR_IN
72656: IFFALSE 72690
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72658: LD_ADDR_VAR 0 5
72662: PUSH
72663: LD_VAR 0 5
72667: PPUSH
72668: LD_VAR 0 4
72672: PPUSH
72673: LD_VAR 0 2
72677: PPUSH
72678: CALL_OW 259
72682: PPUSH
72683: CALL 74094 0 2
72687: ST_TO_ADDR
72688: GO 72655
72690: POP
72691: POP
// if not tmp then
72692: LD_VAR 0 5
72696: NOT
72697: IFFALSE 72701
// exit ;
72699: GO 72721
// result := SortListByListDesc ( units , tmp ) ;
72701: LD_ADDR_VAR 0 3
72705: PUSH
72706: LD_VAR 0 1
72710: PPUSH
72711: LD_VAR 0 5
72715: PPUSH
72716: CALL_OW 77
72720: ST_TO_ADDR
// end ;
72721: LD_VAR 0 3
72725: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72726: LD_INT 0
72728: PPUSH
72729: PPUSH
72730: PPUSH
// result := false ;
72731: LD_ADDR_VAR 0 3
72735: PUSH
72736: LD_INT 0
72738: ST_TO_ADDR
// if not building then
72739: LD_VAR 0 2
72743: NOT
72744: IFFALSE 72748
// exit ;
72746: GO 72886
// x := GetX ( building ) ;
72748: LD_ADDR_VAR 0 4
72752: PUSH
72753: LD_VAR 0 2
72757: PPUSH
72758: CALL_OW 250
72762: ST_TO_ADDR
// y := GetY ( building ) ;
72763: LD_ADDR_VAR 0 5
72767: PUSH
72768: LD_VAR 0 2
72772: PPUSH
72773: CALL_OW 251
72777: ST_TO_ADDR
// if not x or not y then
72778: LD_VAR 0 4
72782: NOT
72783: PUSH
72784: LD_VAR 0 5
72788: NOT
72789: OR
72790: IFFALSE 72794
// exit ;
72792: GO 72886
// if GetTaskList ( unit ) then
72794: LD_VAR 0 1
72798: PPUSH
72799: CALL_OW 437
72803: IFFALSE 72886
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72805: LD_STRING e
72807: PUSH
72808: LD_VAR 0 1
72812: PPUSH
72813: CALL_OW 437
72817: PUSH
72818: LD_INT 1
72820: ARRAY
72821: PUSH
72822: LD_INT 1
72824: ARRAY
72825: EQUAL
72826: PUSH
72827: LD_VAR 0 4
72831: PUSH
72832: LD_VAR 0 1
72836: PPUSH
72837: CALL_OW 437
72841: PUSH
72842: LD_INT 1
72844: ARRAY
72845: PUSH
72846: LD_INT 2
72848: ARRAY
72849: EQUAL
72850: AND
72851: PUSH
72852: LD_VAR 0 5
72856: PUSH
72857: LD_VAR 0 1
72861: PPUSH
72862: CALL_OW 437
72866: PUSH
72867: LD_INT 1
72869: ARRAY
72870: PUSH
72871: LD_INT 3
72873: ARRAY
72874: EQUAL
72875: AND
72876: IFFALSE 72886
// result := true end ;
72878: LD_ADDR_VAR 0 3
72882: PUSH
72883: LD_INT 1
72885: ST_TO_ADDR
// end ;
72886: LD_VAR 0 3
72890: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72891: LD_INT 0
72893: PPUSH
// result := false ;
72894: LD_ADDR_VAR 0 4
72898: PUSH
72899: LD_INT 0
72901: ST_TO_ADDR
// if GetTaskList ( unit ) then
72902: LD_VAR 0 1
72906: PPUSH
72907: CALL_OW 437
72911: IFFALSE 72994
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72913: LD_STRING M
72915: PUSH
72916: LD_VAR 0 1
72920: PPUSH
72921: CALL_OW 437
72925: PUSH
72926: LD_INT 1
72928: ARRAY
72929: PUSH
72930: LD_INT 1
72932: ARRAY
72933: EQUAL
72934: PUSH
72935: LD_VAR 0 2
72939: PUSH
72940: LD_VAR 0 1
72944: PPUSH
72945: CALL_OW 437
72949: PUSH
72950: LD_INT 1
72952: ARRAY
72953: PUSH
72954: LD_INT 2
72956: ARRAY
72957: EQUAL
72958: AND
72959: PUSH
72960: LD_VAR 0 3
72964: PUSH
72965: LD_VAR 0 1
72969: PPUSH
72970: CALL_OW 437
72974: PUSH
72975: LD_INT 1
72977: ARRAY
72978: PUSH
72979: LD_INT 3
72981: ARRAY
72982: EQUAL
72983: AND
72984: IFFALSE 72994
// result := true ;
72986: LD_ADDR_VAR 0 4
72990: PUSH
72991: LD_INT 1
72993: ST_TO_ADDR
// end ; end ;
72994: LD_VAR 0 4
72998: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72999: LD_INT 0
73001: PPUSH
73002: PPUSH
73003: PPUSH
73004: PPUSH
// if not unit or not area then
73005: LD_VAR 0 1
73009: NOT
73010: PUSH
73011: LD_VAR 0 2
73015: NOT
73016: OR
73017: IFFALSE 73021
// exit ;
73019: GO 73197
// tmp := AreaToList ( area , i ) ;
73021: LD_ADDR_VAR 0 6
73025: PUSH
73026: LD_VAR 0 2
73030: PPUSH
73031: LD_VAR 0 5
73035: PPUSH
73036: CALL_OW 517
73040: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73041: LD_ADDR_VAR 0 5
73045: PUSH
73046: DOUBLE
73047: LD_INT 1
73049: DEC
73050: ST_TO_ADDR
73051: LD_VAR 0 6
73055: PUSH
73056: LD_INT 1
73058: ARRAY
73059: PUSH
73060: FOR_TO
73061: IFFALSE 73195
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73063: LD_ADDR_VAR 0 7
73067: PUSH
73068: LD_VAR 0 6
73072: PUSH
73073: LD_INT 1
73075: ARRAY
73076: PUSH
73077: LD_VAR 0 5
73081: ARRAY
73082: PUSH
73083: LD_VAR 0 6
73087: PUSH
73088: LD_INT 2
73090: ARRAY
73091: PUSH
73092: LD_VAR 0 5
73096: ARRAY
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73102: LD_INT 92
73104: PUSH
73105: LD_VAR 0 7
73109: PUSH
73110: LD_INT 1
73112: ARRAY
73113: PUSH
73114: LD_VAR 0 7
73118: PUSH
73119: LD_INT 2
73121: ARRAY
73122: PUSH
73123: LD_INT 2
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: PPUSH
73132: CALL_OW 69
73136: PUSH
73137: LD_INT 0
73139: EQUAL
73140: IFFALSE 73193
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73142: LD_VAR 0 1
73146: PPUSH
73147: LD_VAR 0 7
73151: PUSH
73152: LD_INT 1
73154: ARRAY
73155: PPUSH
73156: LD_VAR 0 7
73160: PUSH
73161: LD_INT 2
73163: ARRAY
73164: PPUSH
73165: LD_VAR 0 3
73169: PPUSH
73170: CALL_OW 48
// result := IsPlaced ( unit ) ;
73174: LD_ADDR_VAR 0 4
73178: PUSH
73179: LD_VAR 0 1
73183: PPUSH
73184: CALL_OW 305
73188: ST_TO_ADDR
// exit ;
73189: POP
73190: POP
73191: GO 73197
// end ; end ;
73193: GO 73060
73195: POP
73196: POP
// end ;
73197: LD_VAR 0 4
73201: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73202: LD_INT 0
73204: PPUSH
73205: PPUSH
73206: PPUSH
// if not side or side > 8 then
73207: LD_VAR 0 1
73211: NOT
73212: PUSH
73213: LD_VAR 0 1
73217: PUSH
73218: LD_INT 8
73220: GREATER
73221: OR
73222: IFFALSE 73226
// exit ;
73224: GO 73413
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73226: LD_ADDR_VAR 0 4
73230: PUSH
73231: LD_INT 22
73233: PUSH
73234: LD_VAR 0 1
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 21
73245: PUSH
73246: LD_INT 3
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PPUSH
73257: CALL_OW 69
73261: ST_TO_ADDR
// if not tmp then
73262: LD_VAR 0 4
73266: NOT
73267: IFFALSE 73271
// exit ;
73269: GO 73413
// enable_addtolog := true ;
73271: LD_ADDR_OWVAR 81
73275: PUSH
73276: LD_INT 1
73278: ST_TO_ADDR
// AddToLog ( [ ) ;
73279: LD_STRING [
73281: PPUSH
73282: CALL_OW 561
// for i in tmp do
73286: LD_ADDR_VAR 0 3
73290: PUSH
73291: LD_VAR 0 4
73295: PUSH
73296: FOR_IN
73297: IFFALSE 73404
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73299: LD_STRING [
73301: PUSH
73302: LD_VAR 0 3
73306: PPUSH
73307: CALL_OW 266
73311: STR
73312: PUSH
73313: LD_STRING , 
73315: STR
73316: PUSH
73317: LD_VAR 0 3
73321: PPUSH
73322: CALL_OW 250
73326: STR
73327: PUSH
73328: LD_STRING , 
73330: STR
73331: PUSH
73332: LD_VAR 0 3
73336: PPUSH
73337: CALL_OW 251
73341: STR
73342: PUSH
73343: LD_STRING , 
73345: STR
73346: PUSH
73347: LD_VAR 0 3
73351: PPUSH
73352: CALL_OW 254
73356: STR
73357: PUSH
73358: LD_STRING , 
73360: STR
73361: PUSH
73362: LD_VAR 0 3
73366: PPUSH
73367: LD_INT 1
73369: PPUSH
73370: CALL_OW 268
73374: STR
73375: PUSH
73376: LD_STRING , 
73378: STR
73379: PUSH
73380: LD_VAR 0 3
73384: PPUSH
73385: LD_INT 2
73387: PPUSH
73388: CALL_OW 268
73392: STR
73393: PUSH
73394: LD_STRING ],
73396: STR
73397: PPUSH
73398: CALL_OW 561
// end ;
73402: GO 73296
73404: POP
73405: POP
// AddToLog ( ]; ) ;
73406: LD_STRING ];
73408: PPUSH
73409: CALL_OW 561
// end ;
73413: LD_VAR 0 2
73417: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73418: LD_INT 0
73420: PPUSH
73421: PPUSH
73422: PPUSH
73423: PPUSH
73424: PPUSH
// if not area or not rate or not max then
73425: LD_VAR 0 1
73429: NOT
73430: PUSH
73431: LD_VAR 0 2
73435: NOT
73436: OR
73437: PUSH
73438: LD_VAR 0 4
73442: NOT
73443: OR
73444: IFFALSE 73448
// exit ;
73446: GO 73637
// while 1 do
73448: LD_INT 1
73450: IFFALSE 73637
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73452: LD_ADDR_VAR 0 9
73456: PUSH
73457: LD_VAR 0 1
73461: PPUSH
73462: LD_INT 1
73464: PPUSH
73465: CALL_OW 287
73469: PUSH
73470: LD_INT 10
73472: MUL
73473: ST_TO_ADDR
// r := rate / 10 ;
73474: LD_ADDR_VAR 0 7
73478: PUSH
73479: LD_VAR 0 2
73483: PUSH
73484: LD_INT 10
73486: DIVREAL
73487: ST_TO_ADDR
// time := 1 1$00 ;
73488: LD_ADDR_VAR 0 8
73492: PUSH
73493: LD_INT 2100
73495: ST_TO_ADDR
// if amount < min then
73496: LD_VAR 0 9
73500: PUSH
73501: LD_VAR 0 3
73505: LESS
73506: IFFALSE 73524
// r := r * 2 else
73508: LD_ADDR_VAR 0 7
73512: PUSH
73513: LD_VAR 0 7
73517: PUSH
73518: LD_INT 2
73520: MUL
73521: ST_TO_ADDR
73522: GO 73550
// if amount > max then
73524: LD_VAR 0 9
73528: PUSH
73529: LD_VAR 0 4
73533: GREATER
73534: IFFALSE 73550
// r := r / 2 ;
73536: LD_ADDR_VAR 0 7
73540: PUSH
73541: LD_VAR 0 7
73545: PUSH
73546: LD_INT 2
73548: DIVREAL
73549: ST_TO_ADDR
// time := time / r ;
73550: LD_ADDR_VAR 0 8
73554: PUSH
73555: LD_VAR 0 8
73559: PUSH
73560: LD_VAR 0 7
73564: DIVREAL
73565: ST_TO_ADDR
// if time < 0 then
73566: LD_VAR 0 8
73570: PUSH
73571: LD_INT 0
73573: LESS
73574: IFFALSE 73591
// time := time * - 1 ;
73576: LD_ADDR_VAR 0 8
73580: PUSH
73581: LD_VAR 0 8
73585: PUSH
73586: LD_INT 1
73588: NEG
73589: MUL
73590: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73591: LD_VAR 0 8
73595: PUSH
73596: LD_INT 35
73598: PPUSH
73599: LD_INT 875
73601: PPUSH
73602: CALL_OW 12
73606: PLUS
73607: PPUSH
73608: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73612: LD_INT 1
73614: PPUSH
73615: LD_INT 5
73617: PPUSH
73618: CALL_OW 12
73622: PPUSH
73623: LD_VAR 0 1
73627: PPUSH
73628: LD_INT 1
73630: PPUSH
73631: CALL_OW 55
// end ;
73635: GO 73448
// end ;
73637: LD_VAR 0 5
73641: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73642: LD_INT 0
73644: PPUSH
73645: PPUSH
73646: PPUSH
73647: PPUSH
73648: PPUSH
73649: PPUSH
73650: PPUSH
73651: PPUSH
// if not turrets or not factories then
73652: LD_VAR 0 1
73656: NOT
73657: PUSH
73658: LD_VAR 0 2
73662: NOT
73663: OR
73664: IFFALSE 73668
// exit ;
73666: GO 73975
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73668: LD_ADDR_VAR 0 10
73672: PUSH
73673: LD_INT 5
73675: PUSH
73676: LD_INT 6
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 2
73685: PUSH
73686: LD_INT 4
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 3
73695: PUSH
73696: LD_INT 5
73698: PUSH
73699: EMPTY
73700: LIST
73701: LIST
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 24
73710: PUSH
73711: LD_INT 25
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 23
73720: PUSH
73721: LD_INT 27
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 42
73734: PUSH
73735: LD_INT 43
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 44
73744: PUSH
73745: LD_INT 46
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 45
73754: PUSH
73755: LD_INT 47
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: LIST
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: LIST
73771: ST_TO_ADDR
// result := [ ] ;
73772: LD_ADDR_VAR 0 3
73776: PUSH
73777: EMPTY
73778: ST_TO_ADDR
// for i in turrets do
73779: LD_ADDR_VAR 0 4
73783: PUSH
73784: LD_VAR 0 1
73788: PUSH
73789: FOR_IN
73790: IFFALSE 73973
// begin nat := GetNation ( i ) ;
73792: LD_ADDR_VAR 0 7
73796: PUSH
73797: LD_VAR 0 4
73801: PPUSH
73802: CALL_OW 248
73806: ST_TO_ADDR
// weapon := 0 ;
73807: LD_ADDR_VAR 0 8
73811: PUSH
73812: LD_INT 0
73814: ST_TO_ADDR
// if not nat then
73815: LD_VAR 0 7
73819: NOT
73820: IFFALSE 73824
// continue ;
73822: GO 73789
// for j in list [ nat ] do
73824: LD_ADDR_VAR 0 5
73828: PUSH
73829: LD_VAR 0 10
73833: PUSH
73834: LD_VAR 0 7
73838: ARRAY
73839: PUSH
73840: FOR_IN
73841: IFFALSE 73882
// if GetBWeapon ( i ) = j [ 1 ] then
73843: LD_VAR 0 4
73847: PPUSH
73848: CALL_OW 269
73852: PUSH
73853: LD_VAR 0 5
73857: PUSH
73858: LD_INT 1
73860: ARRAY
73861: EQUAL
73862: IFFALSE 73880
// begin weapon := j [ 2 ] ;
73864: LD_ADDR_VAR 0 8
73868: PUSH
73869: LD_VAR 0 5
73873: PUSH
73874: LD_INT 2
73876: ARRAY
73877: ST_TO_ADDR
// break ;
73878: GO 73882
// end ;
73880: GO 73840
73882: POP
73883: POP
// if not weapon then
73884: LD_VAR 0 8
73888: NOT
73889: IFFALSE 73893
// continue ;
73891: GO 73789
// for k in factories do
73893: LD_ADDR_VAR 0 6
73897: PUSH
73898: LD_VAR 0 2
73902: PUSH
73903: FOR_IN
73904: IFFALSE 73969
// begin weapons := AvailableWeaponList ( k ) ;
73906: LD_ADDR_VAR 0 9
73910: PUSH
73911: LD_VAR 0 6
73915: PPUSH
73916: CALL_OW 478
73920: ST_TO_ADDR
// if not weapons then
73921: LD_VAR 0 9
73925: NOT
73926: IFFALSE 73930
// continue ;
73928: GO 73903
// if weapon in weapons then
73930: LD_VAR 0 8
73934: PUSH
73935: LD_VAR 0 9
73939: IN
73940: IFFALSE 73967
// begin result := [ i , weapon ] ;
73942: LD_ADDR_VAR 0 3
73946: PUSH
73947: LD_VAR 0 4
73951: PUSH
73952: LD_VAR 0 8
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: ST_TO_ADDR
// exit ;
73961: POP
73962: POP
73963: POP
73964: POP
73965: GO 73975
// end ; end ;
73967: GO 73903
73969: POP
73970: POP
// end ;
73971: GO 73789
73973: POP
73974: POP
// end ;
73975: LD_VAR 0 3
73979: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73980: LD_INT 0
73982: PPUSH
// if not side or side > 8 then
73983: LD_VAR 0 3
73987: NOT
73988: PUSH
73989: LD_VAR 0 3
73993: PUSH
73994: LD_INT 8
73996: GREATER
73997: OR
73998: IFFALSE 74002
// exit ;
74000: GO 74061
// if not range then
74002: LD_VAR 0 4
74006: NOT
74007: IFFALSE 74018
// range := - 12 ;
74009: LD_ADDR_VAR 0 4
74013: PUSH
74014: LD_INT 12
74016: NEG
74017: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74018: LD_VAR 0 1
74022: PPUSH
74023: LD_VAR 0 2
74027: PPUSH
74028: LD_VAR 0 3
74032: PPUSH
74033: LD_VAR 0 4
74037: PPUSH
74038: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74042: LD_VAR 0 1
74046: PPUSH
74047: LD_VAR 0 2
74051: PPUSH
74052: LD_VAR 0 3
74056: PPUSH
74057: CALL_OW 331
// end ;
74061: LD_VAR 0 5
74065: RET
// export function Video ( mode ) ; begin
74066: LD_INT 0
74068: PPUSH
// ingame_video = mode ;
74069: LD_ADDR_OWVAR 52
74073: PUSH
74074: LD_VAR 0 1
74078: ST_TO_ADDR
// interface_hidden = mode ;
74079: LD_ADDR_OWVAR 54
74083: PUSH
74084: LD_VAR 0 1
74088: ST_TO_ADDR
// end ;
74089: LD_VAR 0 2
74093: RET
// export function Join ( array , element ) ; begin
74094: LD_INT 0
74096: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74097: LD_ADDR_VAR 0 3
74101: PUSH
74102: LD_VAR 0 1
74106: PPUSH
74107: LD_VAR 0 1
74111: PUSH
74112: LD_INT 1
74114: PLUS
74115: PPUSH
74116: LD_VAR 0 2
74120: PPUSH
74121: CALL_OW 1
74125: ST_TO_ADDR
// end ;
74126: LD_VAR 0 3
74130: RET
// export function JoinUnion ( array , element ) ; begin
74131: LD_INT 0
74133: PPUSH
// result := array union element ;
74134: LD_ADDR_VAR 0 3
74138: PUSH
74139: LD_VAR 0 1
74143: PUSH
74144: LD_VAR 0 2
74148: UNION
74149: ST_TO_ADDR
// end ;
74150: LD_VAR 0 3
74154: RET
// export function GetBehemoths ( side ) ; begin
74155: LD_INT 0
74157: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74158: LD_ADDR_VAR 0 2
74162: PUSH
74163: LD_INT 22
74165: PUSH
74166: LD_VAR 0 1
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 31
74177: PUSH
74178: LD_INT 25
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PPUSH
74189: CALL_OW 69
74193: ST_TO_ADDR
// end ;
74194: LD_VAR 0 2
74198: RET
// export function Shuffle ( array ) ; var i , index ; begin
74199: LD_INT 0
74201: PPUSH
74202: PPUSH
74203: PPUSH
// result := [ ] ;
74204: LD_ADDR_VAR 0 2
74208: PUSH
74209: EMPTY
74210: ST_TO_ADDR
// if not array then
74211: LD_VAR 0 1
74215: NOT
74216: IFFALSE 74220
// exit ;
74218: GO 74319
// Randomize ;
74220: CALL_OW 10
// for i = array downto 1 do
74224: LD_ADDR_VAR 0 3
74228: PUSH
74229: DOUBLE
74230: LD_VAR 0 1
74234: INC
74235: ST_TO_ADDR
74236: LD_INT 1
74238: PUSH
74239: FOR_DOWNTO
74240: IFFALSE 74317
// begin index := rand ( 1 , array ) ;
74242: LD_ADDR_VAR 0 4
74246: PUSH
74247: LD_INT 1
74249: PPUSH
74250: LD_VAR 0 1
74254: PPUSH
74255: CALL_OW 12
74259: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74260: LD_ADDR_VAR 0 2
74264: PUSH
74265: LD_VAR 0 2
74269: PPUSH
74270: LD_VAR 0 2
74274: PUSH
74275: LD_INT 1
74277: PLUS
74278: PPUSH
74279: LD_VAR 0 1
74283: PUSH
74284: LD_VAR 0 4
74288: ARRAY
74289: PPUSH
74290: CALL_OW 2
74294: ST_TO_ADDR
// array := Delete ( array , index ) ;
74295: LD_ADDR_VAR 0 1
74299: PUSH
74300: LD_VAR 0 1
74304: PPUSH
74305: LD_VAR 0 4
74309: PPUSH
74310: CALL_OW 3
74314: ST_TO_ADDR
// end ;
74315: GO 74239
74317: POP
74318: POP
// end ;
74319: LD_VAR 0 2
74323: RET
// export function GetBaseMaterials ( base ) ; begin
74324: LD_INT 0
74326: PPUSH
// result := [ 0 , 0 , 0 ] ;
74327: LD_ADDR_VAR 0 2
74331: PUSH
74332: LD_INT 0
74334: PUSH
74335: LD_INT 0
74337: PUSH
74338: LD_INT 0
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: LIST
74345: ST_TO_ADDR
// if not base then
74346: LD_VAR 0 1
74350: NOT
74351: IFFALSE 74355
// exit ;
74353: GO 74404
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74355: LD_ADDR_VAR 0 2
74359: PUSH
74360: LD_VAR 0 1
74364: PPUSH
74365: LD_INT 1
74367: PPUSH
74368: CALL_OW 275
74372: PUSH
74373: LD_VAR 0 1
74377: PPUSH
74378: LD_INT 2
74380: PPUSH
74381: CALL_OW 275
74385: PUSH
74386: LD_VAR 0 1
74390: PPUSH
74391: LD_INT 3
74393: PPUSH
74394: CALL_OW 275
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: LIST
74403: ST_TO_ADDR
// end ;
74404: LD_VAR 0 2
74408: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74409: LD_INT 0
74411: PPUSH
74412: PPUSH
// result := array ;
74413: LD_ADDR_VAR 0 3
74417: PUSH
74418: LD_VAR 0 1
74422: ST_TO_ADDR
// if size >= result then
74423: LD_VAR 0 2
74427: PUSH
74428: LD_VAR 0 3
74432: GREATEREQUAL
74433: IFFALSE 74437
// exit ;
74435: GO 74487
// if size then
74437: LD_VAR 0 2
74441: IFFALSE 74487
// for i := array downto size do
74443: LD_ADDR_VAR 0 4
74447: PUSH
74448: DOUBLE
74449: LD_VAR 0 1
74453: INC
74454: ST_TO_ADDR
74455: LD_VAR 0 2
74459: PUSH
74460: FOR_DOWNTO
74461: IFFALSE 74485
// result := Delete ( result , result ) ;
74463: LD_ADDR_VAR 0 3
74467: PUSH
74468: LD_VAR 0 3
74472: PPUSH
74473: LD_VAR 0 3
74477: PPUSH
74478: CALL_OW 3
74482: ST_TO_ADDR
74483: GO 74460
74485: POP
74486: POP
// end ;
74487: LD_VAR 0 3
74491: RET
// export function ComExit ( unit ) ; var tmp ; begin
74492: LD_INT 0
74494: PPUSH
74495: PPUSH
// if not IsInUnit ( unit ) then
74496: LD_VAR 0 1
74500: PPUSH
74501: CALL_OW 310
74505: NOT
74506: IFFALSE 74510
// exit ;
74508: GO 74570
// tmp := IsInUnit ( unit ) ;
74510: LD_ADDR_VAR 0 3
74514: PUSH
74515: LD_VAR 0 1
74519: PPUSH
74520: CALL_OW 310
74524: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74525: LD_VAR 0 3
74529: PPUSH
74530: CALL_OW 247
74534: PUSH
74535: LD_INT 2
74537: EQUAL
74538: IFFALSE 74551
// ComExitVehicle ( unit ) else
74540: LD_VAR 0 1
74544: PPUSH
74545: CALL_OW 121
74549: GO 74560
// ComExitBuilding ( unit ) ;
74551: LD_VAR 0 1
74555: PPUSH
74556: CALL_OW 122
// result := tmp ;
74560: LD_ADDR_VAR 0 2
74564: PUSH
74565: LD_VAR 0 3
74569: ST_TO_ADDR
// end ;
74570: LD_VAR 0 2
74574: RET
// export function ComExitAll ( units ) ; var i ; begin
74575: LD_INT 0
74577: PPUSH
74578: PPUSH
// if not units then
74579: LD_VAR 0 1
74583: NOT
74584: IFFALSE 74588
// exit ;
74586: GO 74614
// for i in units do
74588: LD_ADDR_VAR 0 3
74592: PUSH
74593: LD_VAR 0 1
74597: PUSH
74598: FOR_IN
74599: IFFALSE 74612
// ComExit ( i ) ;
74601: LD_VAR 0 3
74605: PPUSH
74606: CALL 74492 0 1
74610: GO 74598
74612: POP
74613: POP
// end ;
74614: LD_VAR 0 2
74618: RET
// export function ResetHc ; begin
74619: LD_INT 0
74621: PPUSH
// InitHc ;
74622: CALL_OW 19
// hc_importance := 0 ;
74626: LD_ADDR_OWVAR 32
74630: PUSH
74631: LD_INT 0
74633: ST_TO_ADDR
// end ;
74634: LD_VAR 0 1
74638: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74639: LD_INT 0
74641: PPUSH
74642: PPUSH
74643: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74644: LD_ADDR_VAR 0 6
74648: PUSH
74649: LD_VAR 0 1
74653: PUSH
74654: LD_VAR 0 3
74658: PLUS
74659: PUSH
74660: LD_INT 2
74662: DIV
74663: ST_TO_ADDR
// if _x < 0 then
74664: LD_VAR 0 6
74668: PUSH
74669: LD_INT 0
74671: LESS
74672: IFFALSE 74689
// _x := _x * - 1 ;
74674: LD_ADDR_VAR 0 6
74678: PUSH
74679: LD_VAR 0 6
74683: PUSH
74684: LD_INT 1
74686: NEG
74687: MUL
74688: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74689: LD_ADDR_VAR 0 7
74693: PUSH
74694: LD_VAR 0 2
74698: PUSH
74699: LD_VAR 0 4
74703: PLUS
74704: PUSH
74705: LD_INT 2
74707: DIV
74708: ST_TO_ADDR
// if _y < 0 then
74709: LD_VAR 0 7
74713: PUSH
74714: LD_INT 0
74716: LESS
74717: IFFALSE 74734
// _y := _y * - 1 ;
74719: LD_ADDR_VAR 0 7
74723: PUSH
74724: LD_VAR 0 7
74728: PUSH
74729: LD_INT 1
74731: NEG
74732: MUL
74733: ST_TO_ADDR
// result := [ _x , _y ] ;
74734: LD_ADDR_VAR 0 5
74738: PUSH
74739: LD_VAR 0 6
74743: PUSH
74744: LD_VAR 0 7
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: ST_TO_ADDR
// end ;
74753: LD_VAR 0 5
74757: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74758: LD_INT 0
74760: PPUSH
74761: PPUSH
74762: PPUSH
74763: PPUSH
// task := GetTaskList ( unit ) ;
74764: LD_ADDR_VAR 0 7
74768: PUSH
74769: LD_VAR 0 1
74773: PPUSH
74774: CALL_OW 437
74778: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74779: LD_VAR 0 7
74783: NOT
74784: PUSH
74785: LD_VAR 0 1
74789: PPUSH
74790: LD_VAR 0 2
74794: PPUSH
74795: CALL_OW 308
74799: NOT
74800: AND
74801: IFFALSE 74805
// exit ;
74803: GO 74923
// if IsInArea ( unit , area ) then
74805: LD_VAR 0 1
74809: PPUSH
74810: LD_VAR 0 2
74814: PPUSH
74815: CALL_OW 308
74819: IFFALSE 74837
// begin ComMoveToArea ( unit , goAway ) ;
74821: LD_VAR 0 1
74825: PPUSH
74826: LD_VAR 0 3
74830: PPUSH
74831: CALL_OW 113
// exit ;
74835: GO 74923
// end ; if task [ 1 ] [ 1 ] <> M then
74837: LD_VAR 0 7
74841: PUSH
74842: LD_INT 1
74844: ARRAY
74845: PUSH
74846: LD_INT 1
74848: ARRAY
74849: PUSH
74850: LD_STRING M
74852: NONEQUAL
74853: IFFALSE 74857
// exit ;
74855: GO 74923
// x := task [ 1 ] [ 2 ] ;
74857: LD_ADDR_VAR 0 5
74861: PUSH
74862: LD_VAR 0 7
74866: PUSH
74867: LD_INT 1
74869: ARRAY
74870: PUSH
74871: LD_INT 2
74873: ARRAY
74874: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74875: LD_ADDR_VAR 0 6
74879: PUSH
74880: LD_VAR 0 7
74884: PUSH
74885: LD_INT 1
74887: ARRAY
74888: PUSH
74889: LD_INT 3
74891: ARRAY
74892: ST_TO_ADDR
// if InArea ( x , y , area ) then
74893: LD_VAR 0 5
74897: PPUSH
74898: LD_VAR 0 6
74902: PPUSH
74903: LD_VAR 0 2
74907: PPUSH
74908: CALL_OW 309
74912: IFFALSE 74923
// ComStop ( unit ) ;
74914: LD_VAR 0 1
74918: PPUSH
74919: CALL_OW 141
// end ;
74923: LD_VAR 0 4
74927: RET
// export function Abs ( value ) ; begin
74928: LD_INT 0
74930: PPUSH
// result := value ;
74931: LD_ADDR_VAR 0 2
74935: PUSH
74936: LD_VAR 0 1
74940: ST_TO_ADDR
// if value < 0 then
74941: LD_VAR 0 1
74945: PUSH
74946: LD_INT 0
74948: LESS
74949: IFFALSE 74966
// result := value * - 1 ;
74951: LD_ADDR_VAR 0 2
74955: PUSH
74956: LD_VAR 0 1
74960: PUSH
74961: LD_INT 1
74963: NEG
74964: MUL
74965: ST_TO_ADDR
// end ;
74966: LD_VAR 0 2
74970: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74971: LD_INT 0
74973: PPUSH
74974: PPUSH
74975: PPUSH
74976: PPUSH
74977: PPUSH
74978: PPUSH
74979: PPUSH
74980: PPUSH
// if not unit or not building then
74981: LD_VAR 0 1
74985: NOT
74986: PUSH
74987: LD_VAR 0 2
74991: NOT
74992: OR
74993: IFFALSE 74997
// exit ;
74995: GO 75223
// x := GetX ( building ) ;
74997: LD_ADDR_VAR 0 4
75001: PUSH
75002: LD_VAR 0 2
75006: PPUSH
75007: CALL_OW 250
75011: ST_TO_ADDR
// y := GetY ( building ) ;
75012: LD_ADDR_VAR 0 6
75016: PUSH
75017: LD_VAR 0 2
75021: PPUSH
75022: CALL_OW 251
75026: ST_TO_ADDR
// d := GetDir ( building ) ;
75027: LD_ADDR_VAR 0 8
75031: PUSH
75032: LD_VAR 0 2
75036: PPUSH
75037: CALL_OW 254
75041: ST_TO_ADDR
// r := 4 ;
75042: LD_ADDR_VAR 0 9
75046: PUSH
75047: LD_INT 4
75049: ST_TO_ADDR
// for i := 1 to 5 do
75050: LD_ADDR_VAR 0 10
75054: PUSH
75055: DOUBLE
75056: LD_INT 1
75058: DEC
75059: ST_TO_ADDR
75060: LD_INT 5
75062: PUSH
75063: FOR_TO
75064: IFFALSE 75221
// begin _x := ShiftX ( x , d , r + i ) ;
75066: LD_ADDR_VAR 0 5
75070: PUSH
75071: LD_VAR 0 4
75075: PPUSH
75076: LD_VAR 0 8
75080: PPUSH
75081: LD_VAR 0 9
75085: PUSH
75086: LD_VAR 0 10
75090: PLUS
75091: PPUSH
75092: CALL_OW 272
75096: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75097: LD_ADDR_VAR 0 7
75101: PUSH
75102: LD_VAR 0 6
75106: PPUSH
75107: LD_VAR 0 8
75111: PPUSH
75112: LD_VAR 0 9
75116: PUSH
75117: LD_VAR 0 10
75121: PLUS
75122: PPUSH
75123: CALL_OW 273
75127: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75128: LD_VAR 0 5
75132: PPUSH
75133: LD_VAR 0 7
75137: PPUSH
75138: CALL_OW 488
75142: PUSH
75143: LD_VAR 0 5
75147: PPUSH
75148: LD_VAR 0 7
75152: PPUSH
75153: CALL_OW 428
75157: PPUSH
75158: CALL_OW 247
75162: PUSH
75163: LD_INT 3
75165: PUSH
75166: LD_INT 2
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: IN
75173: NOT
75174: AND
75175: IFFALSE 75219
// begin ComMoveXY ( unit , _x , _y ) ;
75177: LD_VAR 0 1
75181: PPUSH
75182: LD_VAR 0 5
75186: PPUSH
75187: LD_VAR 0 7
75191: PPUSH
75192: CALL_OW 111
// result := [ _x , _y ] ;
75196: LD_ADDR_VAR 0 3
75200: PUSH
75201: LD_VAR 0 5
75205: PUSH
75206: LD_VAR 0 7
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: ST_TO_ADDR
// exit ;
75215: POP
75216: POP
75217: GO 75223
// end ; end ;
75219: GO 75063
75221: POP
75222: POP
// end ;
75223: LD_VAR 0 3
75227: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75228: LD_INT 0
75230: PPUSH
75231: PPUSH
75232: PPUSH
// result := 0 ;
75233: LD_ADDR_VAR 0 3
75237: PUSH
75238: LD_INT 0
75240: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75241: LD_VAR 0 1
75245: PUSH
75246: LD_INT 0
75248: LESS
75249: PUSH
75250: LD_VAR 0 1
75254: PUSH
75255: LD_INT 8
75257: GREATER
75258: OR
75259: PUSH
75260: LD_VAR 0 2
75264: PUSH
75265: LD_INT 0
75267: LESS
75268: OR
75269: PUSH
75270: LD_VAR 0 2
75274: PUSH
75275: LD_INT 8
75277: GREATER
75278: OR
75279: IFFALSE 75283
// exit ;
75281: GO 75358
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75283: LD_ADDR_VAR 0 4
75287: PUSH
75288: LD_INT 22
75290: PUSH
75291: LD_VAR 0 2
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PPUSH
75300: CALL_OW 69
75304: PUSH
75305: FOR_IN
75306: IFFALSE 75356
// begin un := UnitShoot ( i ) ;
75308: LD_ADDR_VAR 0 5
75312: PUSH
75313: LD_VAR 0 4
75317: PPUSH
75318: CALL_OW 504
75322: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75323: LD_VAR 0 5
75327: PPUSH
75328: CALL_OW 255
75332: PUSH
75333: LD_VAR 0 1
75337: EQUAL
75338: IFFALSE 75354
// begin result := un ;
75340: LD_ADDR_VAR 0 3
75344: PUSH
75345: LD_VAR 0 5
75349: ST_TO_ADDR
// exit ;
75350: POP
75351: POP
75352: GO 75358
// end ; end ;
75354: GO 75305
75356: POP
75357: POP
// end ;
75358: LD_VAR 0 3
75362: RET
// export function GetCargoBay ( units ) ; begin
75363: LD_INT 0
75365: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75366: LD_ADDR_VAR 0 2
75370: PUSH
75371: LD_VAR 0 1
75375: PPUSH
75376: LD_INT 2
75378: PUSH
75379: LD_INT 34
75381: PUSH
75382: LD_INT 12
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: PUSH
75389: LD_INT 34
75391: PUSH
75392: LD_INT 51
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 34
75401: PUSH
75402: LD_INT 32
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 34
75411: PUSH
75412: LD_INT 89
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: PPUSH
75426: CALL_OW 72
75430: ST_TO_ADDR
// end ;
75431: LD_VAR 0 2
75435: RET
// export function Negate ( value ) ; begin
75436: LD_INT 0
75438: PPUSH
// result := not value ;
75439: LD_ADDR_VAR 0 2
75443: PUSH
75444: LD_VAR 0 1
75448: NOT
75449: ST_TO_ADDR
// end ;
75450: LD_VAR 0 2
75454: RET
// export function Inc ( value ) ; begin
75455: LD_INT 0
75457: PPUSH
// result := value + 1 ;
75458: LD_ADDR_VAR 0 2
75462: PUSH
75463: LD_VAR 0 1
75467: PUSH
75468: LD_INT 1
75470: PLUS
75471: ST_TO_ADDR
// end ;
75472: LD_VAR 0 2
75476: RET
// export function Dec ( value ) ; begin
75477: LD_INT 0
75479: PPUSH
// result := value - 1 ;
75480: LD_ADDR_VAR 0 2
75484: PUSH
75485: LD_VAR 0 1
75489: PUSH
75490: LD_INT 1
75492: MINUS
75493: ST_TO_ADDR
// end ;
75494: LD_VAR 0 2
75498: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75499: LD_INT 0
75501: PPUSH
75502: PPUSH
75503: PPUSH
75504: PPUSH
75505: PPUSH
75506: PPUSH
75507: PPUSH
75508: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75509: LD_VAR 0 1
75513: PPUSH
75514: LD_VAR 0 2
75518: PPUSH
75519: CALL_OW 488
75523: NOT
75524: PUSH
75525: LD_VAR 0 3
75529: PPUSH
75530: LD_VAR 0 4
75534: PPUSH
75535: CALL_OW 488
75539: NOT
75540: OR
75541: IFFALSE 75554
// begin result := - 1 ;
75543: LD_ADDR_VAR 0 5
75547: PUSH
75548: LD_INT 1
75550: NEG
75551: ST_TO_ADDR
// exit ;
75552: GO 75789
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75554: LD_ADDR_VAR 0 12
75558: PUSH
75559: LD_VAR 0 1
75563: PPUSH
75564: LD_VAR 0 2
75568: PPUSH
75569: LD_VAR 0 3
75573: PPUSH
75574: LD_VAR 0 4
75578: PPUSH
75579: CALL 74639 0 4
75583: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75584: LD_ADDR_VAR 0 11
75588: PUSH
75589: LD_VAR 0 1
75593: PPUSH
75594: LD_VAR 0 2
75598: PPUSH
75599: LD_VAR 0 12
75603: PUSH
75604: LD_INT 1
75606: ARRAY
75607: PPUSH
75608: LD_VAR 0 12
75612: PUSH
75613: LD_INT 2
75615: ARRAY
75616: PPUSH
75617: CALL_OW 298
75621: ST_TO_ADDR
// distance := 9999 ;
75622: LD_ADDR_VAR 0 10
75626: PUSH
75627: LD_INT 9999
75629: ST_TO_ADDR
// for i := 0 to 5 do
75630: LD_ADDR_VAR 0 6
75634: PUSH
75635: DOUBLE
75636: LD_INT 0
75638: DEC
75639: ST_TO_ADDR
75640: LD_INT 5
75642: PUSH
75643: FOR_TO
75644: IFFALSE 75787
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75646: LD_ADDR_VAR 0 7
75650: PUSH
75651: LD_VAR 0 1
75655: PPUSH
75656: LD_VAR 0 6
75660: PPUSH
75661: LD_VAR 0 11
75665: PPUSH
75666: CALL_OW 272
75670: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75671: LD_ADDR_VAR 0 8
75675: PUSH
75676: LD_VAR 0 2
75680: PPUSH
75681: LD_VAR 0 6
75685: PPUSH
75686: LD_VAR 0 11
75690: PPUSH
75691: CALL_OW 273
75695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75696: LD_VAR 0 7
75700: PPUSH
75701: LD_VAR 0 8
75705: PPUSH
75706: CALL_OW 488
75710: NOT
75711: IFFALSE 75715
// continue ;
75713: GO 75643
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75715: LD_ADDR_VAR 0 9
75719: PUSH
75720: LD_VAR 0 12
75724: PUSH
75725: LD_INT 1
75727: ARRAY
75728: PPUSH
75729: LD_VAR 0 12
75733: PUSH
75734: LD_INT 2
75736: ARRAY
75737: PPUSH
75738: LD_VAR 0 7
75742: PPUSH
75743: LD_VAR 0 8
75747: PPUSH
75748: CALL_OW 298
75752: ST_TO_ADDR
// if tmp < distance then
75753: LD_VAR 0 9
75757: PUSH
75758: LD_VAR 0 10
75762: LESS
75763: IFFALSE 75785
// begin result := i ;
75765: LD_ADDR_VAR 0 5
75769: PUSH
75770: LD_VAR 0 6
75774: ST_TO_ADDR
// distance := tmp ;
75775: LD_ADDR_VAR 0 10
75779: PUSH
75780: LD_VAR 0 9
75784: ST_TO_ADDR
// end ; end ;
75785: GO 75643
75787: POP
75788: POP
// end ;
75789: LD_VAR 0 5
75793: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75794: LD_INT 0
75796: PPUSH
75797: PPUSH
// if not driver or not IsInUnit ( driver ) then
75798: LD_VAR 0 1
75802: NOT
75803: PUSH
75804: LD_VAR 0 1
75808: PPUSH
75809: CALL_OW 310
75813: NOT
75814: OR
75815: IFFALSE 75819
// exit ;
75817: GO 75909
// vehicle := IsInUnit ( driver ) ;
75819: LD_ADDR_VAR 0 3
75823: PUSH
75824: LD_VAR 0 1
75828: PPUSH
75829: CALL_OW 310
75833: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75834: LD_VAR 0 1
75838: PPUSH
75839: LD_STRING \
75841: PUSH
75842: LD_INT 0
75844: PUSH
75845: LD_INT 0
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: LD_INT 0
75853: PUSH
75854: LD_INT 0
75856: PUSH
75857: LD_INT 0
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: PUSH
75869: LD_STRING E
75871: PUSH
75872: LD_INT 0
75874: PUSH
75875: LD_INT 0
75877: PUSH
75878: LD_VAR 0 3
75882: PUSH
75883: LD_INT 0
75885: PUSH
75886: LD_INT 0
75888: PUSH
75889: LD_INT 0
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PPUSH
75905: CALL_OW 446
// end ;
75909: LD_VAR 0 2
75913: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75914: LD_INT 0
75916: PPUSH
75917: PPUSH
// if not driver or not IsInUnit ( driver ) then
75918: LD_VAR 0 1
75922: NOT
75923: PUSH
75924: LD_VAR 0 1
75928: PPUSH
75929: CALL_OW 310
75933: NOT
75934: OR
75935: IFFALSE 75939
// exit ;
75937: GO 76029
// vehicle := IsInUnit ( driver ) ;
75939: LD_ADDR_VAR 0 3
75943: PUSH
75944: LD_VAR 0 1
75948: PPUSH
75949: CALL_OW 310
75953: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75954: LD_VAR 0 1
75958: PPUSH
75959: LD_STRING \
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: LD_INT 0
75967: PUSH
75968: LD_INT 0
75970: PUSH
75971: LD_INT 0
75973: PUSH
75974: LD_INT 0
75976: PUSH
75977: LD_INT 0
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: PUSH
75989: LD_STRING E
75991: PUSH
75992: LD_INT 0
75994: PUSH
75995: LD_INT 0
75997: PUSH
75998: LD_VAR 0 3
76002: PUSH
76003: LD_INT 0
76005: PUSH
76006: LD_INT 0
76008: PUSH
76009: LD_INT 0
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: PPUSH
76025: CALL_OW 447
// end ;
76029: LD_VAR 0 2
76033: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76034: LD_INT 0
76036: PPUSH
76037: PPUSH
76038: PPUSH
// tmp := [ ] ;
76039: LD_ADDR_VAR 0 5
76043: PUSH
76044: EMPTY
76045: ST_TO_ADDR
// for i in units do
76046: LD_ADDR_VAR 0 4
76050: PUSH
76051: LD_VAR 0 1
76055: PUSH
76056: FOR_IN
76057: IFFALSE 76095
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76059: LD_ADDR_VAR 0 5
76063: PUSH
76064: LD_VAR 0 5
76068: PPUSH
76069: LD_VAR 0 5
76073: PUSH
76074: LD_INT 1
76076: PLUS
76077: PPUSH
76078: LD_VAR 0 4
76082: PPUSH
76083: CALL_OW 256
76087: PPUSH
76088: CALL_OW 2
76092: ST_TO_ADDR
76093: GO 76056
76095: POP
76096: POP
// if not tmp then
76097: LD_VAR 0 5
76101: NOT
76102: IFFALSE 76106
// exit ;
76104: GO 76154
// if asc then
76106: LD_VAR 0 2
76110: IFFALSE 76134
// result := SortListByListAsc ( units , tmp ) else
76112: LD_ADDR_VAR 0 3
76116: PUSH
76117: LD_VAR 0 1
76121: PPUSH
76122: LD_VAR 0 5
76126: PPUSH
76127: CALL_OW 76
76131: ST_TO_ADDR
76132: GO 76154
// result := SortListByListDesc ( units , tmp ) ;
76134: LD_ADDR_VAR 0 3
76138: PUSH
76139: LD_VAR 0 1
76143: PPUSH
76144: LD_VAR 0 5
76148: PPUSH
76149: CALL_OW 77
76153: ST_TO_ADDR
// end ;
76154: LD_VAR 0 3
76158: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76159: LD_INT 0
76161: PPUSH
76162: PPUSH
// task := GetTaskList ( mech ) ;
76163: LD_ADDR_VAR 0 4
76167: PUSH
76168: LD_VAR 0 1
76172: PPUSH
76173: CALL_OW 437
76177: ST_TO_ADDR
// if not task then
76178: LD_VAR 0 4
76182: NOT
76183: IFFALSE 76187
// exit ;
76185: GO 76229
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76187: LD_ADDR_VAR 0 3
76191: PUSH
76192: LD_VAR 0 4
76196: PUSH
76197: LD_INT 1
76199: ARRAY
76200: PUSH
76201: LD_INT 1
76203: ARRAY
76204: PUSH
76205: LD_STRING r
76207: EQUAL
76208: PUSH
76209: LD_VAR 0 4
76213: PUSH
76214: LD_INT 1
76216: ARRAY
76217: PUSH
76218: LD_INT 4
76220: ARRAY
76221: PUSH
76222: LD_VAR 0 2
76226: EQUAL
76227: AND
76228: ST_TO_ADDR
// end ;
76229: LD_VAR 0 3
76233: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76234: LD_INT 0
76236: PPUSH
// SetDir ( unit , d ) ;
76237: LD_VAR 0 1
76241: PPUSH
76242: LD_VAR 0 4
76246: PPUSH
76247: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76251: LD_VAR 0 1
76255: PPUSH
76256: LD_VAR 0 2
76260: PPUSH
76261: LD_VAR 0 3
76265: PPUSH
76266: LD_VAR 0 5
76270: PPUSH
76271: CALL_OW 48
// end ;
76275: LD_VAR 0 6
76279: RET
// export function ToNaturalNumber ( number ) ; begin
76280: LD_INT 0
76282: PPUSH
// result := number div 1 ;
76283: LD_ADDR_VAR 0 2
76287: PUSH
76288: LD_VAR 0 1
76292: PUSH
76293: LD_INT 1
76295: DIV
76296: ST_TO_ADDR
// if number < 0 then
76297: LD_VAR 0 1
76301: PUSH
76302: LD_INT 0
76304: LESS
76305: IFFALSE 76315
// result := 0 ;
76307: LD_ADDR_VAR 0 2
76311: PUSH
76312: LD_INT 0
76314: ST_TO_ADDR
// end ;
76315: LD_VAR 0 2
76319: RET
// export function SortByClass ( units , class ) ; var un ; begin
76320: LD_INT 0
76322: PPUSH
76323: PPUSH
// if not units or not class then
76324: LD_VAR 0 1
76328: NOT
76329: PUSH
76330: LD_VAR 0 2
76334: NOT
76335: OR
76336: IFFALSE 76340
// exit ;
76338: GO 76435
// result := [ ] ;
76340: LD_ADDR_VAR 0 3
76344: PUSH
76345: EMPTY
76346: ST_TO_ADDR
// for un in units do
76347: LD_ADDR_VAR 0 4
76351: PUSH
76352: LD_VAR 0 1
76356: PUSH
76357: FOR_IN
76358: IFFALSE 76433
// if GetClass ( un ) = class then
76360: LD_VAR 0 4
76364: PPUSH
76365: CALL_OW 257
76369: PUSH
76370: LD_VAR 0 2
76374: EQUAL
76375: IFFALSE 76402
// result := Insert ( result , 1 , un ) else
76377: LD_ADDR_VAR 0 3
76381: PUSH
76382: LD_VAR 0 3
76386: PPUSH
76387: LD_INT 1
76389: PPUSH
76390: LD_VAR 0 4
76394: PPUSH
76395: CALL_OW 2
76399: ST_TO_ADDR
76400: GO 76431
// result := Replace ( result , result + 1 , un ) ;
76402: LD_ADDR_VAR 0 3
76406: PUSH
76407: LD_VAR 0 3
76411: PPUSH
76412: LD_VAR 0 3
76416: PUSH
76417: LD_INT 1
76419: PLUS
76420: PPUSH
76421: LD_VAR 0 4
76425: PPUSH
76426: CALL_OW 1
76430: ST_TO_ADDR
76431: GO 76357
76433: POP
76434: POP
// end ;
76435: LD_VAR 0 3
76439: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76440: LD_INT 0
76442: PPUSH
76443: PPUSH
76444: PPUSH
76445: PPUSH
76446: PPUSH
76447: PPUSH
76448: PPUSH
// result := [ ] ;
76449: LD_ADDR_VAR 0 4
76453: PUSH
76454: EMPTY
76455: ST_TO_ADDR
// if x - r < 0 then
76456: LD_VAR 0 1
76460: PUSH
76461: LD_VAR 0 3
76465: MINUS
76466: PUSH
76467: LD_INT 0
76469: LESS
76470: IFFALSE 76482
// min_x := 0 else
76472: LD_ADDR_VAR 0 8
76476: PUSH
76477: LD_INT 0
76479: ST_TO_ADDR
76480: GO 76498
// min_x := x - r ;
76482: LD_ADDR_VAR 0 8
76486: PUSH
76487: LD_VAR 0 1
76491: PUSH
76492: LD_VAR 0 3
76496: MINUS
76497: ST_TO_ADDR
// if y - r < 0 then
76498: LD_VAR 0 2
76502: PUSH
76503: LD_VAR 0 3
76507: MINUS
76508: PUSH
76509: LD_INT 0
76511: LESS
76512: IFFALSE 76524
// min_y := 0 else
76514: LD_ADDR_VAR 0 7
76518: PUSH
76519: LD_INT 0
76521: ST_TO_ADDR
76522: GO 76540
// min_y := y - r ;
76524: LD_ADDR_VAR 0 7
76528: PUSH
76529: LD_VAR 0 2
76533: PUSH
76534: LD_VAR 0 3
76538: MINUS
76539: ST_TO_ADDR
// max_x := x + r ;
76540: LD_ADDR_VAR 0 9
76544: PUSH
76545: LD_VAR 0 1
76549: PUSH
76550: LD_VAR 0 3
76554: PLUS
76555: ST_TO_ADDR
// max_y := y + r ;
76556: LD_ADDR_VAR 0 10
76560: PUSH
76561: LD_VAR 0 2
76565: PUSH
76566: LD_VAR 0 3
76570: PLUS
76571: ST_TO_ADDR
// for _x = min_x to max_x do
76572: LD_ADDR_VAR 0 5
76576: PUSH
76577: DOUBLE
76578: LD_VAR 0 8
76582: DEC
76583: ST_TO_ADDR
76584: LD_VAR 0 9
76588: PUSH
76589: FOR_TO
76590: IFFALSE 76691
// for _y = min_y to max_y do
76592: LD_ADDR_VAR 0 6
76596: PUSH
76597: DOUBLE
76598: LD_VAR 0 7
76602: DEC
76603: ST_TO_ADDR
76604: LD_VAR 0 10
76608: PUSH
76609: FOR_TO
76610: IFFALSE 76687
// begin if not ValidHex ( _x , _y ) then
76612: LD_VAR 0 5
76616: PPUSH
76617: LD_VAR 0 6
76621: PPUSH
76622: CALL_OW 488
76626: NOT
76627: IFFALSE 76631
// continue ;
76629: GO 76609
// if GetResourceTypeXY ( _x , _y ) then
76631: LD_VAR 0 5
76635: PPUSH
76636: LD_VAR 0 6
76640: PPUSH
76641: CALL_OW 283
76645: IFFALSE 76685
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76647: LD_ADDR_VAR 0 4
76651: PUSH
76652: LD_VAR 0 4
76656: PPUSH
76657: LD_VAR 0 4
76661: PUSH
76662: LD_INT 1
76664: PLUS
76665: PPUSH
76666: LD_VAR 0 5
76670: PUSH
76671: LD_VAR 0 6
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: PPUSH
76680: CALL_OW 1
76684: ST_TO_ADDR
// end ;
76685: GO 76609
76687: POP
76688: POP
76689: GO 76589
76691: POP
76692: POP
// end ;
76693: LD_VAR 0 4
76697: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76698: LD_INT 0
76700: PPUSH
76701: PPUSH
76702: PPUSH
76703: PPUSH
76704: PPUSH
76705: PPUSH
76706: PPUSH
76707: PPUSH
// if not units then
76708: LD_VAR 0 1
76712: NOT
76713: IFFALSE 76717
// exit ;
76715: GO 77241
// result := UnitFilter ( units , [ f_ok ] ) ;
76717: LD_ADDR_VAR 0 3
76721: PUSH
76722: LD_VAR 0 1
76726: PPUSH
76727: LD_INT 50
76729: PUSH
76730: EMPTY
76731: LIST
76732: PPUSH
76733: CALL_OW 72
76737: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76738: LD_ADDR_VAR 0 8
76742: PUSH
76743: LD_VAR 0 1
76747: PUSH
76748: LD_INT 1
76750: ARRAY
76751: PPUSH
76752: CALL_OW 255
76756: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76757: LD_ADDR_VAR 0 10
76761: PUSH
76762: LD_INT 29
76764: PUSH
76765: LD_INT 91
76767: PUSH
76768: LD_INT 49
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: LIST
76775: ST_TO_ADDR
// if not result then
76776: LD_VAR 0 3
76780: NOT
76781: IFFALSE 76785
// exit ;
76783: GO 77241
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76785: LD_ADDR_VAR 0 5
76789: PUSH
76790: LD_INT 81
76792: PUSH
76793: LD_VAR 0 8
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: PPUSH
76802: CALL_OW 69
76806: ST_TO_ADDR
// for i in result do
76807: LD_ADDR_VAR 0 4
76811: PUSH
76812: LD_VAR 0 3
76816: PUSH
76817: FOR_IN
76818: IFFALSE 77239
// begin tag := GetTag ( i ) + 1 ;
76820: LD_ADDR_VAR 0 9
76824: PUSH
76825: LD_VAR 0 4
76829: PPUSH
76830: CALL_OW 110
76834: PUSH
76835: LD_INT 1
76837: PLUS
76838: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76839: LD_ADDR_VAR 0 7
76843: PUSH
76844: LD_VAR 0 4
76848: PPUSH
76849: CALL_OW 250
76853: PPUSH
76854: LD_VAR 0 4
76858: PPUSH
76859: CALL_OW 251
76863: PPUSH
76864: LD_INT 6
76866: PPUSH
76867: CALL 76440 0 3
76871: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76872: LD_VAR 0 4
76876: PPUSH
76877: CALL_OW 247
76881: PUSH
76882: LD_INT 2
76884: EQUAL
76885: PUSH
76886: LD_VAR 0 7
76890: AND
76891: PUSH
76892: LD_VAR 0 4
76896: PPUSH
76897: CALL_OW 264
76901: PUSH
76902: LD_VAR 0 10
76906: IN
76907: NOT
76908: AND
76909: IFFALSE 76948
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76911: LD_VAR 0 4
76915: PPUSH
76916: LD_VAR 0 7
76920: PUSH
76921: LD_INT 1
76923: ARRAY
76924: PUSH
76925: LD_INT 1
76927: ARRAY
76928: PPUSH
76929: LD_VAR 0 7
76933: PUSH
76934: LD_INT 1
76936: ARRAY
76937: PUSH
76938: LD_INT 2
76940: ARRAY
76941: PPUSH
76942: CALL_OW 116
76946: GO 77237
// if path > tag then
76948: LD_VAR 0 2
76952: PUSH
76953: LD_VAR 0 9
76957: GREATER
76958: IFFALSE 77166
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76960: LD_ADDR_VAR 0 6
76964: PUSH
76965: LD_VAR 0 5
76969: PPUSH
76970: LD_INT 91
76972: PUSH
76973: LD_VAR 0 4
76977: PUSH
76978: LD_INT 8
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: LIST
76985: PPUSH
76986: CALL_OW 72
76990: ST_TO_ADDR
// if nearEnemy then
76991: LD_VAR 0 6
76995: IFFALSE 77064
// begin if GetWeapon ( i ) = ru_time_lapser then
76997: LD_VAR 0 4
77001: PPUSH
77002: CALL_OW 264
77006: PUSH
77007: LD_INT 49
77009: EQUAL
77010: IFFALSE 77038
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77012: LD_VAR 0 4
77016: PPUSH
77017: LD_VAR 0 6
77021: PPUSH
77022: LD_VAR 0 4
77026: PPUSH
77027: CALL_OW 74
77031: PPUSH
77032: CALL_OW 112
77036: GO 77062
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77038: LD_VAR 0 4
77042: PPUSH
77043: LD_VAR 0 6
77047: PPUSH
77048: LD_VAR 0 4
77052: PPUSH
77053: CALL_OW 74
77057: PPUSH
77058: CALL 78312 0 2
// end else
77062: GO 77164
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77064: LD_VAR 0 4
77068: PPUSH
77069: LD_VAR 0 2
77073: PUSH
77074: LD_VAR 0 9
77078: ARRAY
77079: PUSH
77080: LD_INT 1
77082: ARRAY
77083: PPUSH
77084: LD_VAR 0 2
77088: PUSH
77089: LD_VAR 0 9
77093: ARRAY
77094: PUSH
77095: LD_INT 2
77097: ARRAY
77098: PPUSH
77099: CALL_OW 297
77103: PUSH
77104: LD_INT 6
77106: GREATER
77107: IFFALSE 77150
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77109: LD_VAR 0 4
77113: PPUSH
77114: LD_VAR 0 2
77118: PUSH
77119: LD_VAR 0 9
77123: ARRAY
77124: PUSH
77125: LD_INT 1
77127: ARRAY
77128: PPUSH
77129: LD_VAR 0 2
77133: PUSH
77134: LD_VAR 0 9
77138: ARRAY
77139: PUSH
77140: LD_INT 2
77142: ARRAY
77143: PPUSH
77144: CALL_OW 114
77148: GO 77164
// SetTag ( i , tag ) ;
77150: LD_VAR 0 4
77154: PPUSH
77155: LD_VAR 0 9
77159: PPUSH
77160: CALL_OW 109
// end else
77164: GO 77237
// if enemy then
77166: LD_VAR 0 5
77170: IFFALSE 77237
// begin if GetWeapon ( i ) = ru_time_lapser then
77172: LD_VAR 0 4
77176: PPUSH
77177: CALL_OW 264
77181: PUSH
77182: LD_INT 49
77184: EQUAL
77185: IFFALSE 77213
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77187: LD_VAR 0 4
77191: PPUSH
77192: LD_VAR 0 5
77196: PPUSH
77197: LD_VAR 0 4
77201: PPUSH
77202: CALL_OW 74
77206: PPUSH
77207: CALL_OW 112
77211: GO 77237
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77213: LD_VAR 0 4
77217: PPUSH
77218: LD_VAR 0 5
77222: PPUSH
77223: LD_VAR 0 4
77227: PPUSH
77228: CALL_OW 74
77232: PPUSH
77233: CALL 78312 0 2
// end ; end ;
77237: GO 76817
77239: POP
77240: POP
// end ;
77241: LD_VAR 0 3
77245: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77246: LD_INT 0
77248: PPUSH
77249: PPUSH
77250: PPUSH
// if not unit or IsInUnit ( unit ) then
77251: LD_VAR 0 1
77255: NOT
77256: PUSH
77257: LD_VAR 0 1
77261: PPUSH
77262: CALL_OW 310
77266: OR
77267: IFFALSE 77271
// exit ;
77269: GO 77362
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77271: LD_ADDR_VAR 0 4
77275: PUSH
77276: LD_VAR 0 1
77280: PPUSH
77281: CALL_OW 250
77285: PPUSH
77286: LD_VAR 0 2
77290: PPUSH
77291: LD_INT 1
77293: PPUSH
77294: CALL_OW 272
77298: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77299: LD_ADDR_VAR 0 5
77303: PUSH
77304: LD_VAR 0 1
77308: PPUSH
77309: CALL_OW 251
77313: PPUSH
77314: LD_VAR 0 2
77318: PPUSH
77319: LD_INT 1
77321: PPUSH
77322: CALL_OW 273
77326: ST_TO_ADDR
// if ValidHex ( x , y ) then
77327: LD_VAR 0 4
77331: PPUSH
77332: LD_VAR 0 5
77336: PPUSH
77337: CALL_OW 488
77341: IFFALSE 77362
// ComTurnXY ( unit , x , y ) ;
77343: LD_VAR 0 1
77347: PPUSH
77348: LD_VAR 0 4
77352: PPUSH
77353: LD_VAR 0 5
77357: PPUSH
77358: CALL_OW 118
// end ;
77362: LD_VAR 0 3
77366: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77367: LD_INT 0
77369: PPUSH
77370: PPUSH
// result := false ;
77371: LD_ADDR_VAR 0 3
77375: PUSH
77376: LD_INT 0
77378: ST_TO_ADDR
// if not units then
77379: LD_VAR 0 2
77383: NOT
77384: IFFALSE 77388
// exit ;
77386: GO 77433
// for i in units do
77388: LD_ADDR_VAR 0 4
77392: PUSH
77393: LD_VAR 0 2
77397: PUSH
77398: FOR_IN
77399: IFFALSE 77431
// if See ( side , i ) then
77401: LD_VAR 0 1
77405: PPUSH
77406: LD_VAR 0 4
77410: PPUSH
77411: CALL_OW 292
77415: IFFALSE 77429
// begin result := true ;
77417: LD_ADDR_VAR 0 3
77421: PUSH
77422: LD_INT 1
77424: ST_TO_ADDR
// exit ;
77425: POP
77426: POP
77427: GO 77433
// end ;
77429: GO 77398
77431: POP
77432: POP
// end ;
77433: LD_VAR 0 3
77437: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77438: LD_INT 0
77440: PPUSH
77441: PPUSH
77442: PPUSH
77443: PPUSH
// if not unit or not points then
77444: LD_VAR 0 1
77448: NOT
77449: PUSH
77450: LD_VAR 0 2
77454: NOT
77455: OR
77456: IFFALSE 77460
// exit ;
77458: GO 77550
// dist := 99999 ;
77460: LD_ADDR_VAR 0 5
77464: PUSH
77465: LD_INT 99999
77467: ST_TO_ADDR
// for i in points do
77468: LD_ADDR_VAR 0 4
77472: PUSH
77473: LD_VAR 0 2
77477: PUSH
77478: FOR_IN
77479: IFFALSE 77548
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77481: LD_ADDR_VAR 0 6
77485: PUSH
77486: LD_VAR 0 1
77490: PPUSH
77491: LD_VAR 0 4
77495: PUSH
77496: LD_INT 1
77498: ARRAY
77499: PPUSH
77500: LD_VAR 0 4
77504: PUSH
77505: LD_INT 2
77507: ARRAY
77508: PPUSH
77509: CALL_OW 297
77513: ST_TO_ADDR
// if tmpDist < dist then
77514: LD_VAR 0 6
77518: PUSH
77519: LD_VAR 0 5
77523: LESS
77524: IFFALSE 77546
// begin result := i ;
77526: LD_ADDR_VAR 0 3
77530: PUSH
77531: LD_VAR 0 4
77535: ST_TO_ADDR
// dist := tmpDist ;
77536: LD_ADDR_VAR 0 5
77540: PUSH
77541: LD_VAR 0 6
77545: ST_TO_ADDR
// end ; end ;
77546: GO 77478
77548: POP
77549: POP
// end ;
77550: LD_VAR 0 3
77554: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77555: LD_INT 0
77557: PPUSH
// uc_side := side ;
77558: LD_ADDR_OWVAR 20
77562: PUSH
77563: LD_VAR 0 1
77567: ST_TO_ADDR
// uc_nation := 3 ;
77568: LD_ADDR_OWVAR 21
77572: PUSH
77573: LD_INT 3
77575: ST_TO_ADDR
// vc_chassis := 25 ;
77576: LD_ADDR_OWVAR 37
77580: PUSH
77581: LD_INT 25
77583: ST_TO_ADDR
// vc_engine := engine_siberite ;
77584: LD_ADDR_OWVAR 39
77588: PUSH
77589: LD_INT 3
77591: ST_TO_ADDR
// vc_control := control_computer ;
77592: LD_ADDR_OWVAR 38
77596: PUSH
77597: LD_INT 3
77599: ST_TO_ADDR
// vc_weapon := 59 ;
77600: LD_ADDR_OWVAR 40
77604: PUSH
77605: LD_INT 59
77607: ST_TO_ADDR
// result := CreateVehicle ;
77608: LD_ADDR_VAR 0 5
77612: PUSH
77613: CALL_OW 45
77617: ST_TO_ADDR
// SetDir ( result , d ) ;
77618: LD_VAR 0 5
77622: PPUSH
77623: LD_VAR 0 4
77627: PPUSH
77628: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77632: LD_VAR 0 5
77636: PPUSH
77637: LD_VAR 0 2
77641: PPUSH
77642: LD_VAR 0 3
77646: PPUSH
77647: LD_INT 0
77649: PPUSH
77650: CALL_OW 48
// end ;
77654: LD_VAR 0 5
77658: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77659: LD_INT 0
77661: PPUSH
77662: PPUSH
77663: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77664: LD_ADDR_VAR 0 2
77668: PUSH
77669: LD_INT 0
77671: PUSH
77672: LD_INT 0
77674: PUSH
77675: LD_INT 0
77677: PUSH
77678: LD_INT 0
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: LIST
77685: LIST
77686: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77687: LD_VAR 0 1
77691: NOT
77692: PUSH
77693: LD_VAR 0 1
77697: PPUSH
77698: CALL_OW 264
77702: PUSH
77703: LD_INT 12
77705: PUSH
77706: LD_INT 51
77708: PUSH
77709: LD_INT 32
77711: PUSH
77712: LD_INT 89
77714: PUSH
77715: EMPTY
77716: LIST
77717: LIST
77718: LIST
77719: LIST
77720: IN
77721: NOT
77722: OR
77723: IFFALSE 77727
// exit ;
77725: GO 77825
// for i := 1 to 3 do
77727: LD_ADDR_VAR 0 3
77731: PUSH
77732: DOUBLE
77733: LD_INT 1
77735: DEC
77736: ST_TO_ADDR
77737: LD_INT 3
77739: PUSH
77740: FOR_TO
77741: IFFALSE 77823
// begin tmp := GetCargo ( cargo , i ) ;
77743: LD_ADDR_VAR 0 4
77747: PUSH
77748: LD_VAR 0 1
77752: PPUSH
77753: LD_VAR 0 3
77757: PPUSH
77758: CALL_OW 289
77762: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77763: LD_ADDR_VAR 0 2
77767: PUSH
77768: LD_VAR 0 2
77772: PPUSH
77773: LD_VAR 0 3
77777: PPUSH
77778: LD_VAR 0 4
77782: PPUSH
77783: CALL_OW 1
77787: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77788: LD_ADDR_VAR 0 2
77792: PUSH
77793: LD_VAR 0 2
77797: PPUSH
77798: LD_INT 4
77800: PPUSH
77801: LD_VAR 0 2
77805: PUSH
77806: LD_INT 4
77808: ARRAY
77809: PUSH
77810: LD_VAR 0 4
77814: PLUS
77815: PPUSH
77816: CALL_OW 1
77820: ST_TO_ADDR
// end ;
77821: GO 77740
77823: POP
77824: POP
// end ;
77825: LD_VAR 0 2
77829: RET
// export function Length ( array ) ; begin
77830: LD_INT 0
77832: PPUSH
// result := array + 0 ;
77833: LD_ADDR_VAR 0 2
77837: PUSH
77838: LD_VAR 0 1
77842: PUSH
77843: LD_INT 0
77845: PLUS
77846: ST_TO_ADDR
// end ;
77847: LD_VAR 0 2
77851: RET
// export function PrepareArray ( array ) ; begin
77852: LD_INT 0
77854: PPUSH
// result := array diff 0 ;
77855: LD_ADDR_VAR 0 2
77859: PUSH
77860: LD_VAR 0 1
77864: PUSH
77865: LD_INT 0
77867: DIFF
77868: ST_TO_ADDR
// if not result [ 1 ] then
77869: LD_VAR 0 2
77873: PUSH
77874: LD_INT 1
77876: ARRAY
77877: NOT
77878: IFFALSE 77898
// result := Delete ( result , 1 ) ;
77880: LD_ADDR_VAR 0 2
77884: PUSH
77885: LD_VAR 0 2
77889: PPUSH
77890: LD_INT 1
77892: PPUSH
77893: CALL_OW 3
77897: ST_TO_ADDR
// end ;
77898: LD_VAR 0 2
77902: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77903: LD_INT 0
77905: PPUSH
77906: PPUSH
77907: PPUSH
77908: PPUSH
// sibRocketRange := 25 ;
77909: LD_ADDR_VAR 0 6
77913: PUSH
77914: LD_INT 25
77916: ST_TO_ADDR
// result := false ;
77917: LD_ADDR_VAR 0 4
77921: PUSH
77922: LD_INT 0
77924: ST_TO_ADDR
// for i := 0 to 5 do
77925: LD_ADDR_VAR 0 5
77929: PUSH
77930: DOUBLE
77931: LD_INT 0
77933: DEC
77934: ST_TO_ADDR
77935: LD_INT 5
77937: PUSH
77938: FOR_TO
77939: IFFALSE 78006
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77941: LD_VAR 0 1
77945: PPUSH
77946: LD_VAR 0 5
77950: PPUSH
77951: LD_VAR 0 6
77955: PPUSH
77956: CALL_OW 272
77960: PPUSH
77961: LD_VAR 0 2
77965: PPUSH
77966: LD_VAR 0 5
77970: PPUSH
77971: LD_VAR 0 6
77975: PPUSH
77976: CALL_OW 273
77980: PPUSH
77981: LD_VAR 0 3
77985: PPUSH
77986: CALL_OW 309
77990: IFFALSE 78004
// begin result := true ;
77992: LD_ADDR_VAR 0 4
77996: PUSH
77997: LD_INT 1
77999: ST_TO_ADDR
// exit ;
78000: POP
78001: POP
78002: GO 78008
// end ;
78004: GO 77938
78006: POP
78007: POP
// end ;
78008: LD_VAR 0 4
78012: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
78013: LD_INT 0
78015: PPUSH
78016: PPUSH
78017: PPUSH
// if btype = b_depot then
78018: LD_VAR 0 2
78022: PUSH
78023: LD_INT 0
78025: EQUAL
78026: IFFALSE 78038
// begin result := true ;
78028: LD_ADDR_VAR 0 3
78032: PUSH
78033: LD_INT 1
78035: ST_TO_ADDR
// exit ;
78036: GO 78154
// end ; pom := GetBase ( depot ) ;
78038: LD_ADDR_VAR 0 4
78042: PUSH
78043: LD_VAR 0 1
78047: PPUSH
78048: CALL_OW 274
78052: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
78053: LD_ADDR_VAR 0 5
78057: PUSH
78058: LD_VAR 0 2
78062: PPUSH
78063: LD_VAR 0 1
78067: PPUSH
78068: CALL_OW 248
78072: PPUSH
78073: CALL_OW 450
78077: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
78078: LD_ADDR_VAR 0 3
78082: PUSH
78083: LD_VAR 0 4
78087: PPUSH
78088: LD_INT 1
78090: PPUSH
78091: CALL_OW 275
78095: PUSH
78096: LD_VAR 0 5
78100: PUSH
78101: LD_INT 1
78103: ARRAY
78104: GREATEREQUAL
78105: PUSH
78106: LD_VAR 0 4
78110: PPUSH
78111: LD_INT 2
78113: PPUSH
78114: CALL_OW 275
78118: PUSH
78119: LD_VAR 0 5
78123: PUSH
78124: LD_INT 2
78126: ARRAY
78127: GREATEREQUAL
78128: AND
78129: PUSH
78130: LD_VAR 0 4
78134: PPUSH
78135: LD_INT 3
78137: PPUSH
78138: CALL_OW 275
78142: PUSH
78143: LD_VAR 0 5
78147: PUSH
78148: LD_INT 3
78150: ARRAY
78151: GREATEREQUAL
78152: AND
78153: ST_TO_ADDR
// end ;
78154: LD_VAR 0 3
78158: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78159: LD_INT 0
78161: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78162: LD_VAR 0 1
78166: PPUSH
78167: LD_VAR 0 2
78171: PPUSH
78172: LD_INT 0
78174: PPUSH
78175: LD_INT 0
78177: PPUSH
78178: LD_INT 1
78180: PPUSH
78181: LD_INT 0
78183: PPUSH
78184: CALL_OW 587
// end ;
78188: LD_VAR 0 3
78192: RET
// export function CenterOnNow ( unit ) ; begin
78193: LD_INT 0
78195: PPUSH
// result := IsInUnit ( unit ) ;
78196: LD_ADDR_VAR 0 2
78200: PUSH
78201: LD_VAR 0 1
78205: PPUSH
78206: CALL_OW 310
78210: ST_TO_ADDR
// if not result then
78211: LD_VAR 0 2
78215: NOT
78216: IFFALSE 78228
// result := unit ;
78218: LD_ADDR_VAR 0 2
78222: PUSH
78223: LD_VAR 0 1
78227: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78228: LD_VAR 0 1
78232: PPUSH
78233: CALL_OW 87
// end ;
78237: LD_VAR 0 2
78241: RET
// export function ComMoveHex ( unit , hex ) ; begin
78242: LD_INT 0
78244: PPUSH
// if not hex then
78245: LD_VAR 0 2
78249: NOT
78250: IFFALSE 78254
// exit ;
78252: GO 78307
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78254: LD_VAR 0 2
78258: PUSH
78259: LD_INT 1
78261: ARRAY
78262: PPUSH
78263: LD_VAR 0 2
78267: PUSH
78268: LD_INT 2
78270: ARRAY
78271: PPUSH
78272: CALL_OW 428
78276: IFFALSE 78280
// exit ;
78278: GO 78307
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78280: LD_VAR 0 1
78284: PPUSH
78285: LD_VAR 0 2
78289: PUSH
78290: LD_INT 1
78292: ARRAY
78293: PPUSH
78294: LD_VAR 0 2
78298: PUSH
78299: LD_INT 2
78301: ARRAY
78302: PPUSH
78303: CALL_OW 111
// end ;
78307: LD_VAR 0 3
78311: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78312: LD_INT 0
78314: PPUSH
78315: PPUSH
78316: PPUSH
// if not unit or not enemy then
78317: LD_VAR 0 1
78321: NOT
78322: PUSH
78323: LD_VAR 0 2
78327: NOT
78328: OR
78329: IFFALSE 78333
// exit ;
78331: GO 78457
// x := GetX ( enemy ) ;
78333: LD_ADDR_VAR 0 4
78337: PUSH
78338: LD_VAR 0 2
78342: PPUSH
78343: CALL_OW 250
78347: ST_TO_ADDR
// y := GetY ( enemy ) ;
78348: LD_ADDR_VAR 0 5
78352: PUSH
78353: LD_VAR 0 2
78357: PPUSH
78358: CALL_OW 251
78362: ST_TO_ADDR
// if ValidHex ( x , y ) then
78363: LD_VAR 0 4
78367: PPUSH
78368: LD_VAR 0 5
78372: PPUSH
78373: CALL_OW 488
78377: IFFALSE 78457
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
78379: LD_VAR 0 2
78383: PPUSH
78384: CALL_OW 247
78388: PUSH
78389: LD_INT 3
78391: PUSH
78392: LD_INT 2
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: IN
78399: PUSH
78400: LD_VAR 0 1
78404: PPUSH
78405: CALL_OW 255
78409: PPUSH
78410: LD_VAR 0 2
78414: PPUSH
78415: CALL_OW 292
78419: OR
78420: IFFALSE 78438
// ComAttackUnit ( unit , enemy ) else
78422: LD_VAR 0 1
78426: PPUSH
78427: LD_VAR 0 2
78431: PPUSH
78432: CALL_OW 115
78436: GO 78457
// ComAgressiveMove ( unit , x , y ) ;
78438: LD_VAR 0 1
78442: PPUSH
78443: LD_VAR 0 4
78447: PPUSH
78448: LD_VAR 0 5
78452: PPUSH
78453: CALL_OW 114
// end ;
78457: LD_VAR 0 3
78461: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78462: LD_INT 0
78464: PPUSH
78465: PPUSH
78466: PPUSH
// list := AreaToList ( area , 0 ) ;
78467: LD_ADDR_VAR 0 5
78471: PUSH
78472: LD_VAR 0 1
78476: PPUSH
78477: LD_INT 0
78479: PPUSH
78480: CALL_OW 517
78484: ST_TO_ADDR
// if not list then
78485: LD_VAR 0 5
78489: NOT
78490: IFFALSE 78494
// exit ;
78492: GO 78624
// if all then
78494: LD_VAR 0 2
78498: IFFALSE 78586
// begin for i := 1 to list [ 1 ] do
78500: LD_ADDR_VAR 0 4
78504: PUSH
78505: DOUBLE
78506: LD_INT 1
78508: DEC
78509: ST_TO_ADDR
78510: LD_VAR 0 5
78514: PUSH
78515: LD_INT 1
78517: ARRAY
78518: PUSH
78519: FOR_TO
78520: IFFALSE 78582
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78522: LD_ADDR_VAR 0 3
78526: PUSH
78527: LD_VAR 0 3
78531: PPUSH
78532: LD_VAR 0 3
78536: PUSH
78537: LD_INT 1
78539: PLUS
78540: PPUSH
78541: LD_VAR 0 5
78545: PUSH
78546: LD_INT 1
78548: ARRAY
78549: PUSH
78550: LD_VAR 0 4
78554: ARRAY
78555: PUSH
78556: LD_VAR 0 5
78560: PUSH
78561: LD_INT 2
78563: ARRAY
78564: PUSH
78565: LD_VAR 0 4
78569: ARRAY
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: PPUSH
78575: CALL_OW 1
78579: ST_TO_ADDR
78580: GO 78519
78582: POP
78583: POP
// exit ;
78584: GO 78624
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78586: LD_ADDR_VAR 0 3
78590: PUSH
78591: LD_VAR 0 5
78595: PUSH
78596: LD_INT 1
78598: ARRAY
78599: PUSH
78600: LD_INT 1
78602: ARRAY
78603: PUSH
78604: LD_VAR 0 5
78608: PUSH
78609: LD_INT 2
78611: ARRAY
78612: PUSH
78613: LD_INT 1
78615: ARRAY
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PUSH
78621: EMPTY
78622: LIST
78623: ST_TO_ADDR
// end ;
78624: LD_VAR 0 3
78628: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78629: LD_INT 0
78631: PPUSH
78632: PPUSH
// list := AreaToList ( area , 0 ) ;
78633: LD_ADDR_VAR 0 4
78637: PUSH
78638: LD_VAR 0 1
78642: PPUSH
78643: LD_INT 0
78645: PPUSH
78646: CALL_OW 517
78650: ST_TO_ADDR
// if not list then
78651: LD_VAR 0 4
78655: NOT
78656: IFFALSE 78660
// exit ;
78658: GO 78701
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78660: LD_ADDR_VAR 0 3
78664: PUSH
78665: LD_VAR 0 4
78669: PUSH
78670: LD_INT 1
78672: ARRAY
78673: PUSH
78674: LD_INT 1
78676: ARRAY
78677: PUSH
78678: LD_VAR 0 4
78682: PUSH
78683: LD_INT 2
78685: ARRAY
78686: PUSH
78687: LD_INT 1
78689: ARRAY
78690: PUSH
78691: LD_VAR 0 2
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: LIST
78700: ST_TO_ADDR
// end ;
78701: LD_VAR 0 3
78705: RET
// export function First ( array ) ; begin
78706: LD_INT 0
78708: PPUSH
// if not array then
78709: LD_VAR 0 1
78713: NOT
78714: IFFALSE 78718
// exit ;
78716: GO 78732
// result := array [ 1 ] ;
78718: LD_ADDR_VAR 0 2
78722: PUSH
78723: LD_VAR 0 1
78727: PUSH
78728: LD_INT 1
78730: ARRAY
78731: ST_TO_ADDR
// end ;
78732: LD_VAR 0 2
78736: RET
// export function Last ( array ) ; begin
78737: LD_INT 0
78739: PPUSH
// if not array then
78740: LD_VAR 0 1
78744: NOT
78745: IFFALSE 78749
// exit ;
78747: GO 78765
// result := array [ array ] ;
78749: LD_ADDR_VAR 0 2
78753: PUSH
78754: LD_VAR 0 1
78758: PUSH
78759: LD_VAR 0 1
78763: ARRAY
78764: ST_TO_ADDR
// end ;
78765: LD_VAR 0 2
78769: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78770: LD_INT 0
78772: PPUSH
78773: PPUSH
// result := [ ] ;
78774: LD_ADDR_VAR 0 5
78778: PUSH
78779: EMPTY
78780: ST_TO_ADDR
// if not array then
78781: LD_VAR 0 1
78785: NOT
78786: IFFALSE 78790
// exit ;
78788: GO 78902
// for i := 1 to array do
78790: LD_ADDR_VAR 0 6
78794: PUSH
78795: DOUBLE
78796: LD_INT 1
78798: DEC
78799: ST_TO_ADDR
78800: LD_VAR 0 1
78804: PUSH
78805: FOR_TO
78806: IFFALSE 78900
// if array [ i ] [ index ] = value then
78808: LD_VAR 0 1
78812: PUSH
78813: LD_VAR 0 6
78817: ARRAY
78818: PUSH
78819: LD_VAR 0 2
78823: ARRAY
78824: PUSH
78825: LD_VAR 0 3
78829: EQUAL
78830: IFFALSE 78898
// begin if indexColumn then
78832: LD_VAR 0 4
78836: IFFALSE 78872
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78838: LD_ADDR_VAR 0 5
78842: PUSH
78843: LD_VAR 0 5
78847: PPUSH
78848: LD_VAR 0 1
78852: PUSH
78853: LD_VAR 0 6
78857: ARRAY
78858: PUSH
78859: LD_VAR 0 4
78863: ARRAY
78864: PPUSH
78865: CALL 74094 0 2
78869: ST_TO_ADDR
78870: GO 78898
// result := Join ( result , array [ i ] ) ;
78872: LD_ADDR_VAR 0 5
78876: PUSH
78877: LD_VAR 0 5
78881: PPUSH
78882: LD_VAR 0 1
78886: PUSH
78887: LD_VAR 0 6
78891: ARRAY
78892: PPUSH
78893: CALL 74094 0 2
78897: ST_TO_ADDR
// end ;
78898: GO 78805
78900: POP
78901: POP
// end ;
78902: LD_VAR 0 5
78906: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78907: LD_INT 0
78909: PPUSH
// if not vehicles or not parkingPoint then
78910: LD_VAR 0 1
78914: NOT
78915: PUSH
78916: LD_VAR 0 2
78920: NOT
78921: OR
78922: IFFALSE 78926
// exit ;
78924: GO 79024
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78926: LD_ADDR_VAR 0 1
78930: PUSH
78931: LD_VAR 0 1
78935: PPUSH
78936: LD_INT 50
78938: PUSH
78939: EMPTY
78940: LIST
78941: PUSH
78942: LD_INT 3
78944: PUSH
78945: LD_INT 92
78947: PUSH
78948: LD_VAR 0 2
78952: PUSH
78953: LD_INT 1
78955: ARRAY
78956: PUSH
78957: LD_VAR 0 2
78961: PUSH
78962: LD_INT 2
78964: ARRAY
78965: PUSH
78966: LD_INT 8
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: LIST
78973: LIST
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: PUSH
78979: EMPTY
78980: LIST
78981: LIST
78982: PPUSH
78983: CALL_OW 72
78987: ST_TO_ADDR
// if not vehicles then
78988: LD_VAR 0 1
78992: NOT
78993: IFFALSE 78997
// exit ;
78995: GO 79024
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78997: LD_VAR 0 1
79001: PPUSH
79002: LD_VAR 0 2
79006: PUSH
79007: LD_INT 1
79009: ARRAY
79010: PPUSH
79011: LD_VAR 0 2
79015: PUSH
79016: LD_INT 2
79018: ARRAY
79019: PPUSH
79020: CALL_OW 111
// end ;
79024: LD_VAR 0 3
79028: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
79029: LD_INT 0
79031: PPUSH
79032: PPUSH
79033: PPUSH
// if not side or not area then
79034: LD_VAR 0 1
79038: NOT
79039: PUSH
79040: LD_VAR 0 2
79044: NOT
79045: OR
79046: IFFALSE 79050
// exit ;
79048: GO 79169
// tmp := AreaToList ( area , 0 ) ;
79050: LD_ADDR_VAR 0 5
79054: PUSH
79055: LD_VAR 0 2
79059: PPUSH
79060: LD_INT 0
79062: PPUSH
79063: CALL_OW 517
79067: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
79068: LD_ADDR_VAR 0 4
79072: PUSH
79073: DOUBLE
79074: LD_INT 1
79076: DEC
79077: ST_TO_ADDR
79078: LD_VAR 0 5
79082: PUSH
79083: LD_INT 1
79085: ARRAY
79086: PUSH
79087: FOR_TO
79088: IFFALSE 79167
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
79090: LD_VAR 0 5
79094: PUSH
79095: LD_INT 1
79097: ARRAY
79098: PUSH
79099: LD_VAR 0 4
79103: ARRAY
79104: PPUSH
79105: LD_VAR 0 5
79109: PUSH
79110: LD_INT 2
79112: ARRAY
79113: PUSH
79114: LD_VAR 0 4
79118: ARRAY
79119: PPUSH
79120: CALL_OW 351
79124: IFFALSE 79165
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
79126: LD_VAR 0 5
79130: PUSH
79131: LD_INT 1
79133: ARRAY
79134: PUSH
79135: LD_VAR 0 4
79139: ARRAY
79140: PPUSH
79141: LD_VAR 0 5
79145: PUSH
79146: LD_INT 2
79148: ARRAY
79149: PUSH
79150: LD_VAR 0 4
79154: ARRAY
79155: PPUSH
79156: LD_VAR 0 1
79160: PPUSH
79161: CALL_OW 244
// end ;
79165: GO 79087
79167: POP
79168: POP
// end ; end_of_file
79169: LD_VAR 0 3
79173: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79174: LD_VAR 0 1
79178: PUSH
79179: LD_INT 200
79181: DOUBLE
79182: GREATEREQUAL
79183: IFFALSE 79191
79185: LD_INT 299
79187: DOUBLE
79188: LESSEQUAL
79189: IFTRUE 79193
79191: GO 79225
79193: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79194: LD_VAR 0 1
79198: PPUSH
79199: LD_VAR 0 2
79203: PPUSH
79204: LD_VAR 0 3
79208: PPUSH
79209: LD_VAR 0 4
79213: PPUSH
79214: LD_VAR 0 5
79218: PPUSH
79219: CALL 31885 0 5
79223: GO 79302
79225: LD_INT 300
79227: DOUBLE
79228: GREATEREQUAL
79229: IFFALSE 79237
79231: LD_INT 399
79233: DOUBLE
79234: LESSEQUAL
79235: IFTRUE 79239
79237: GO 79301
79239: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79240: LD_VAR 0 1
79244: PPUSH
79245: LD_VAR 0 2
79249: PPUSH
79250: LD_VAR 0 3
79254: PPUSH
79255: LD_VAR 0 4
79259: PPUSH
79260: LD_VAR 0 5
79264: PPUSH
79265: LD_VAR 0 6
79269: PPUSH
79270: LD_VAR 0 7
79274: PPUSH
79275: LD_VAR 0 8
79279: PPUSH
79280: LD_VAR 0 9
79284: PPUSH
79285: LD_VAR 0 10
79289: PPUSH
79290: LD_VAR 0 11
79294: PPUSH
79295: CALL 28210 0 11
79299: GO 79302
79301: POP
// end ;
79302: PPOPN 11
79304: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79305: LD_VAR 0 1
79309: PPUSH
79310: LD_VAR 0 2
79314: PPUSH
79315: LD_VAR 0 3
79319: PPUSH
79320: LD_VAR 0 4
79324: PPUSH
79325: LD_VAR 0 5
79329: PPUSH
79330: CALL 31621 0 5
// end ; end_of_file
79334: PPOPN 5
79336: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79337: LD_VAR 0 1
79341: PPUSH
79342: LD_VAR 0 2
79346: PPUSH
79347: LD_VAR 0 3
79351: PPUSH
79352: LD_VAR 0 4
79356: PPUSH
79357: LD_VAR 0 5
79361: PPUSH
79362: LD_VAR 0 6
79366: PPUSH
79367: CALL 15862 0 6
// end ;
79371: PPOPN 6
79373: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79374: LD_INT 0
79376: PPUSH
// begin if not units then
79377: LD_VAR 0 1
79381: NOT
79382: IFFALSE 79386
// exit ;
79384: GO 79386
// end ;
79386: PPOPN 7
79388: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79389: CALL 15749 0 0
// end ;
79393: PPOPN 1
79395: END
