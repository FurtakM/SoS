// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9187 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9523 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 34126 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 38990 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 38990 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 38990 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 38990 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 38990 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 36608 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 38990 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 38990 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 38990 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 34126 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 34126 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 34126 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 34126 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 34126 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 34126 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 34126 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 34126 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 34126 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 34126 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 34126 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 34126 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 34126 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 34126 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 34126 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4423: LD_ADDR_EXP 4
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_STRING 11c_others
4435: PPUSH
4436: CALL_OW 31
4440: ADD
4441: PUSH
4442: LD_STRING 11_others
4444: PPUSH
4445: CALL_OW 31
4449: ADD
4450: ST_TO_ADDR
// if friends < 18 then
4451: LD_EXP 4
4455: PUSH
4456: LD_INT 18
4458: LESS
4459: IFFALSE 4531
// for i = 1 to 18 do
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_INT 18
4473: PUSH
4474: FOR_TO
4475: IFFALSE 4529
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4498: LD_ADDR_EXP 4
4502: PUSH
4503: LD_EXP 4
4507: PPUSH
4508: LD_EXP 4
4512: PUSH
4513: LD_INT 1
4515: PLUS
4516: PPUSH
4517: CALL_OW 44
4521: PPUSH
4522: CALL_OW 2
4526: ST_TO_ADDR
// end ;
4527: GO 4474
4529: POP
4530: POP
// for i in friends do
4531: LD_ADDR_VAR 0 2
4535: PUSH
4536: LD_EXP 4
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4600
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: CALL_OW 259
4556: PUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_INT 4
4564: PPUSH
4565: CALL_OW 259
4569: GREATEREQUAL
4570: IFFALSE 4586
// SetClass ( i , class_soldier ) else
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 336
4584: GO 4598
// SetClass ( i , class_scientistic ) ;
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: CALL_OW 336
4598: GO 4541
4600: POP
4601: POP
// if Frank then
4602: LD_EXP 33
4606: IFFALSE 4620
// SetClass ( Frank , class_sniper ) ;
4608: LD_EXP 33
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4620: LD_EXP 36
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 37
4634: PUSH
4635: LD_EXP 35
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4653: LD_ADDR_EXP 3
4657: PUSH
4658: LD_STRING 
4660: PPUSH
4661: LD_INT 7
4663: PPUSH
4664: LD_INT 7
4666: PPUSH
4667: LD_INT -6
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: LD_EXP 15
4679: PUSH
4680: LD_EXP 35
4684: PUSH
4685: LD_EXP 27
4689: PUSH
4690: LD_EXP 37
4694: PUSH
4695: LD_INT -2
4697: PUSH
4698: LD_INT -3
4700: PUSH
4701: LD_INT -5
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_EXP 4
4719: ADD
4720: PPUSH
4721: LD_INT 1
4723: PUSH
4724: LD_INT 4
4726: PUSH
4727: LD_INT 2
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// if Simms then
4758: LD_EXP 35
4762: IFFALSE 4780
// selected := selected ^ Simms ;
4764: LD_ADDR_EXP 3
4768: PUSH
4769: LD_EXP 3
4773: PUSH
4774: LD_EXP 35
4778: ADD
4779: ST_TO_ADDR
// if Denis then
4780: LD_EXP 27
4784: IFFALSE 4802
// selected := selected ^ Denis ;
4786: LD_ADDR_EXP 3
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: LD_EXP 27
4800: ADD
4801: ST_TO_ADDR
// if DeltaDoctor then
4802: LD_EXP 37
4806: IFFALSE 4824
// selected := selected ^ DeltaDoctor ;
4808: LD_ADDR_EXP 3
4812: PUSH
4813: LD_EXP 3
4817: PUSH
4818: LD_EXP 37
4822: ADD
4823: ST_TO_ADDR
// friends := friends diff selected ;
4824: LD_ADDR_EXP 4
4828: PUSH
4829: LD_EXP 4
4833: PUSH
4834: LD_EXP 3
4838: DIFF
4839: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_INT 111
4847: PUSH
4848: LD_INT 137
4850: PUSH
4851: LD_INT 51
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 147
4861: PUSH
4862: LD_INT 129
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 7
4890: PUSH
4891: LD_INT 8
4893: PUSH
4894: LD_INT 17
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
// for i in buildings do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 4
4917: PUSH
4918: FOR_IN
4919: IFFALSE 4935
// SetSide ( i , 4 ) ;
4921: LD_VAR 0 2
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 235
4933: GO 4918
4935: POP
4936: POP
// for i in selected do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 3
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5288
// begin if GetClass ( i ) in [ 1 , 5 ] then
4950: LD_VAR 0 2
4954: PPUSH
4955: CALL_OW 257
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: IN
4970: IFFALSE 5130
// begin if buildings [ 1 ] then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: IFFALSE 5041
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PPUSH
5000: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 3
5033: PPUSH
5034: CALL_OW 1
5038: ST_TO_ADDR
// end else
5039: GO 5128
// begin if not areas then
5041: LD_VAR 0 5
5045: NOT
5046: IFFALSE 5080
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 87
5055: PPUSH
5056: LD_INT 68
5058: PPUSH
5059: LD_INT 8
5061: PPUSH
5062: LD_INT 0
5064: PPUSH
5065: CALL_OW 50
// ComHold ( i ) ;
5069: LD_VAR 0 2
5073: PPUSH
5074: CALL_OW 140
// end else
5078: GO 5128
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// ComHold ( i ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 3
5127: ST_TO_ADDR
// end ; end ; end else
5128: GO 5286
// begin if buildings [ 2 ] then
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: IFFALSE 5199
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 2
5152: ARRAY
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_VAR 0 4
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 3
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end else
5197: GO 5286
// begin if not areas then
5199: LD_VAR 0 5
5203: NOT
5204: IFFALSE 5238
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5206: LD_VAR 0 2
5210: PPUSH
5211: LD_INT 87
5213: PPUSH
5214: LD_INT 68
5216: PPUSH
5217: LD_INT 8
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 50
// ComHold ( i ) ;
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 140
// end else
5236: GO 5286
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 49
// ComHold ( i ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// end ; end ; end ; end ;
5286: GO 4947
5288: POP
5289: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5290: LD_ADDR_VAR 0 6
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 30
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: DOUBLE
5330: LD_VAR 0 6
5334: PUSH
5335: LD_EXP 4
5339: MINUS
5340: INC
5341: ST_TO_ADDR
5342: LD_INT 1
5344: PUSH
5345: FOR_DOWNTO
5346: IFFALSE 5413
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5382: LD_ADDR_EXP 4
5386: PUSH
5387: LD_EXP 4
5391: PPUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: PPUSH
5401: CALL_OW 44
5405: PPUSH
5406: CALL_OW 2
5410: ST_TO_ADDR
// end ;
5411: GO 5345
5413: POP
5414: POP
// if friends then
5415: LD_EXP 4
5419: IFFALSE 5535
// begin tmp := friends ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_EXP 4
5430: ST_TO_ADDR
// for i = 1 to bunkers do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5449: LD_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: ARRAY
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5467: LD_VAR 0 3
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 6
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 3
5530: ST_TO_ADDR
// end ;
5531: GO 5446
5533: POP
5534: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_VAR 0 5
5544: PUSH
5545: LD_INT 9
5547: PUSH
5548: LD_INT 10
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: LD_INT 15
5565: PUSH
5566: LD_INT 16
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 27
5574: PUSH
5575: LD_INT 28
5577: PUSH
5578: LD_INT 29
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 31
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 33
5592: PUSH
5593: LD_INT 34
5595: PUSH
5596: LD_INT 35
5598: PUSH
5599: LD_INT 36
5601: PUSH
5602: LD_INT 37
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: UNION
5627: ST_TO_ADDR
// for i in friends do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5926
// begin SetTag ( i , 2 ) ;
5641: LD_VAR 0 2
5645: PPUSH
5646: LD_INT 2
5648: PPUSH
5649: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 257
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: IN
5677: NOT
5678: IFFALSE 5692
// SetClass ( i , 1 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 257
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: LD_INT 5
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: IN
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: AND
5722: IFFALSE 5783
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 4
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 3
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// continue ;
5781: GO 5638
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5783: LD_VAR 0 2
5787: PPUSH
5788: CALL_OW 257
5792: PUSH
5793: LD_INT 4
5795: EQUAL
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: AND
5806: IFFALSE 5867
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: LD_VAR 0 4
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 3
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// continue ;
5865: GO 5638
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 5
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 5
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 3
5905: ST_TO_ADDR
// ComHold ( i ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 140
// if not areas then
5915: LD_VAR 0 5
5919: NOT
5920: IFFALSE 5924
// break ;
5922: GO 5926
// end ;
5924: GO 5638
5926: POP
5927: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5928: LD_EXP 4
5932: PPUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 52
5938: PUSH
5939: EMPTY
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 72
5950: IFFALSE 6017
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 52
5967: PUSH
5968: EMPTY
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 72
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6015
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 65
5990: PPUSH
5991: LD_INT 58
5993: PPUSH
5994: LD_INT 7
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 50
// ComHold ( i ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 140
// end ;
6013: GO 5980
6015: POP
6016: POP
// if Frank then
6017: LD_EXP 33
6021: IFFALSE 6035
// SetClass ( Frank , class_sniper ) ;
6023: LD_EXP 33
6027: PPUSH
6028: LD_INT 5
6030: PPUSH
6031: CALL_OW 336
// end ; end_of_file
6035: LD_VAR 0 1
6039: RET
// export function CanSayRand ( side ) ; begin
6040: LD_INT 0
6042: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 52
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: PUSH
6126: LD_EXP 14
6130: PUSH
6131: LD_EXP 33
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 25
6150: PUSH
6151: LD_EXP 26
6155: PUSH
6156: LD_EXP 27
6160: PUSH
6161: LD_EXP 28
6165: PUSH
6166: LD_EXP 29
6170: PUSH
6171: LD_EXP 30
6175: PUSH
6176: LD_EXP 16
6180: PUSH
6181: LD_EXP 31
6185: PUSH
6186: LD_EXP 32
6190: PUSH
6191: LD_EXP 34
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: DIFF
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 2
6217: RET
// export function SayRand ( sex , dial ) ; begin
6218: LD_INT 0
6220: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 52
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PUSH
6315: LD_EXP 14
6319: PUSH
6320: LD_EXP 33
6324: PUSH
6325: LD_EXP 23
6329: PUSH
6330: LD_EXP 24
6334: PUSH
6335: LD_EXP 25
6339: PUSH
6340: LD_EXP 26
6344: PUSH
6345: LD_EXP 27
6349: PUSH
6350: LD_EXP 28
6354: PUSH
6355: LD_EXP 29
6359: PUSH
6360: LD_EXP 30
6364: PUSH
6365: LD_EXP 16
6369: PUSH
6370: LD_EXP 31
6374: PUSH
6375: LD_EXP 32
6379: PUSH
6380: LD_EXP 34
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: DIFF
6401: ST_TO_ADDR
// if not result then
6402: LD_VAR 0 3
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6439
// result := result [ 1 ] ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ST_TO_ADDR
// Say ( result , dial ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: CALL_OW 88
// end ;
6439: LD_VAR 0 3
6443: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6444: LD_INT 0
6446: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_VAR 0 1
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: PUSH
6534: LD_EXP 14
6538: PUSH
6539: LD_EXP 33
6543: PUSH
6544: LD_EXP 23
6548: PUSH
6549: LD_EXP 24
6553: PUSH
6554: LD_EXP 25
6558: PUSH
6559: LD_EXP 26
6563: PUSH
6564: LD_EXP 27
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: LD_EXP 29
6578: PUSH
6579: LD_EXP 30
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 31
6593: PUSH
6594: LD_EXP 32
6598: PUSH
6599: LD_EXP 34
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ADD
6625: DIFF
6626: ST_TO_ADDR
// if not result then
6627: LD_VAR 0 4
6631: NOT
6632: IFFALSE 6636
// exit ;
6634: GO 6664
// result := result [ 1 ] ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: ST_TO_ADDR
// Say ( result , dial ) ;
6650: LD_VAR 0 4
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 88
// end ;
6664: LD_VAR 0 4
6668: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: PUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 247
6708: PUSH
6709: LD_INT 3
6711: EQUAL
6712: OR
6713: IFFALSE 6717
// exit ;
6715: GO 8256
// for i = path downto 1 do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_VAR 0 2
6727: INC
6728: ST_TO_ADDR
6729: LD_INT 1
6731: PUSH
6732: FOR_DOWNTO
6733: IFFALSE 6794
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6735: LD_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: CALL_OW 488
6769: NOT
6770: IFFALSE 6792
// path = Delete ( path , i ) ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_VAR 0 5
6786: PPUSH
6787: CALL_OW 3
6791: ST_TO_ADDR
// end ;
6792: GO 6732
6794: POP
6795: POP
// if not path then
6796: LD_VAR 0 2
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8256
// tmp_path := [ ] ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// if flags then
6812: LD_VAR 0 3
6816: IFFALSE 6890
// begin if flags [ 1 ] then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: ARRAY
6826: IFFALSE 6842
// safe_place = flags [ 1 ] ;
6828: LD_ADDR_VAR 0 16
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: ST_TO_ADDR
// if flags [ 2 ] then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 2
6849: ARRAY
6850: IFFALSE 6866
// spot_dist = flags [ 2 ] ;
6852: LD_ADDR_VAR 0 15
6856: PUSH
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 2
6864: ARRAY
6865: ST_TO_ADDR
// if flags [ 3 ] then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 3
6873: ARRAY
6874: IFFALSE 6890
// chase_range = flags [ 3 ] ;
6876: LD_ADDR_VAR 0 17
6880: PUSH
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 3
6888: ARRAY
6889: ST_TO_ADDR
// end ; if not chase_range then
6890: LD_VAR 0 17
6894: NOT
6895: IFFALSE 6905
// chase_range = 8 ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_INT 8
6904: ST_TO_ADDR
// if not spot_dist then
6905: LD_VAR 0 15
6909: NOT
6910: IFFALSE 6920
// spot_dist := 8 ;
6912: LD_ADDR_VAR 0 15
6916: PUSH
6917: LD_INT 8
6919: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6920: LD_ADDR_VAR 0 18
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 247
6934: PUSH
6935: LD_INT 2
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 262
6948: PUSH
6949: LD_INT 3
6951: NONEQUAL
6952: AND
6953: ST_TO_ADDR
// status = 1 ;
6954: LD_ADDR_VAR 0 12
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6990: LD_VAR 0 18
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 261
7004: PUSH
7005: LD_INT 20
7007: LESS
7008: AND
7009: IFFALSE 7202
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7011: LD_ADDR_VAR 0 10
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 30
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 29
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: ST_TO_ADDR
// if not station then
7092: LD_VAR 0 10
7096: NOT
7097: IFFALSE 7113
// begin SetFuel ( unit , 40 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 40
7106: PPUSH
7107: CALL_OW 240
// continue ;
7111: GO 6983
// end ; status := 6 ;
7113: LD_ADDR_VAR 0 12
7117: PUSH
7118: LD_INT 6
7120: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_VAR 0 10
7130: PPUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 74
7140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7141: LD_INT 35
7143: PPUSH
7144: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_VAR 0 10
7157: PPUSH
7158: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 10
7171: PPUSH
7172: CALL_OW 296
7176: PUSH
7177: LD_INT 6
7179: LESS
7180: IFFALSE 7141
// SetFuel ( unit , 100 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_INT 100
7189: PPUSH
7190: CALL_OW 240
// status := 5 ;
7194: LD_ADDR_VAR 0 12
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// end ; if status = 1 then
7202: LD_VAR 0 12
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7586
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7212: LD_ADDR_VAR 0 13
7216: PUSH
7217: LD_INT 81
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 255
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 91
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_VAR 0 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 101
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// for i in enemy do
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 13
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7332
// if IsInvisible ( i ) then
7303: LD_VAR 0 5
7307: PPUSH
7308: CALL_OW 571
7312: IFFALSE 7330
// enemy := enemy diff i ;
7314: LD_ADDR_VAR 0 13
7318: PUSH
7319: LD_VAR 0 13
7323: PUSH
7324: LD_VAR 0 5
7328: DIFF
7329: ST_TO_ADDR
7330: GO 7300
7332: POP
7333: POP
// if enemy then
7334: LD_VAR 0 13
7338: IFFALSE 7388
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 251
7373: PPUSH
7374: CALL_OW 232
// status = 2 ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// end else
7386: GO 7586
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_VAR 0 11
7397: PUSH
7398: LD_INT 2
7400: ARRAY
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: LD_VAR 0 11
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: PPUSH
7419: CALL_OW 307
7423: PUSH
7424: LD_VAR 0 1
7428: PPUSH
7429: CALL_OW 314
7433: NOT
7434: OR
7435: IFFALSE 7586
// begin wait ( 0 0$2 ) ;
7437: LD_INT 70
7439: PPUSH
7440: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7444: LD_VAR 0 11
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_INT 1
7455: PLUS
7456: PUSH
7457: LD_VAR 0 2
7461: GREATER
7462: IFFALSE 7487
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
7485: GO 7518
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 11
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 11
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 11
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ARRAY
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 11
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PPUSH
7569: LD_VAR 0 11
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 114
// end ; end ; end ; if status = 2 then
7586: LD_VAR 0 12
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: IFFALSE 7815
// begin if GetLives ( unit ) < 650 and safe_place then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 256
7605: PUSH
7606: LD_INT 650
7608: LESS
7609: PUSH
7610: LD_VAR 0 16
7614: AND
7615: IFFALSE 7627
// begin status = 3 ;
7617: LD_ADDR_VAR 0 12
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// continue ;
7625: GO 6983
// end ; x := GetRememberedX ( unit ) ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 252
7641: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 253
7656: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_INT 81
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 92
7681: PUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 7
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if enemy then
7723: LD_VAR 0 13
7727: IFFALSE 7798
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: LD_VAR 0 13
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 6
7758: PPUSH
7759: LD_VAR 0 7
7763: PPUSH
7764: CALL_OW 297
7768: PUSH
7769: LD_VAR 0 15
7773: PUSH
7774: LD_VAR 0 17
7778: PLUS
7779: LESS
7780: IFFALSE 7796
// ComAttackUnit ( unit , e ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 14
7791: PPUSH
7792: CALL_OW 115
// end else
7796: GO 7815
// begin ComStop ( unit ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 141
// status = 5 ;
7807: LD_ADDR_VAR 0 12
7811: PUSH
7812: LD_INT 5
7814: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7815: LD_VAR 0 12
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 16
7828: AND
7829: IFFALSE 7915
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 16
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: CALL_OW 111
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 16
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 16
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PPUSH
7888: CALL_OW 297
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: IFFALSE 7831
// ComStop ( unit ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 141
// status = 4 ;
7907: LD_ADDR_VAR 0 12
7911: PUSH
7912: LD_INT 4
7914: ST_TO_ADDR
// end ; if status = 4 then
7915: LD_VAR 0 12
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: IFFALSE 7955
// begin repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 256
7941: PUSH
7942: LD_INT 1000
7944: EQUAL
7945: IFFALSE 7925
// status = 5 ;
7947: LD_ADDR_VAR 0 12
7951: PUSH
7952: LD_INT 5
7954: ST_TO_ADDR
// end ; if status = 5 then
7955: LD_VAR 0 12
7959: PUSH
7960: LD_INT 5
7962: EQUAL
7963: IFFALSE 8245
// begin p := 999 ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 999
7972: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7973: LD_ADDR_VAR 0 14
7977: PUSH
7978: LD_VAR 0 11
7982: PUSH
7983: LD_INT 2
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_VAR 0 11
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// c := 1 ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: DOUBLE
8022: LD_INT 1
8024: DEC
8025: ST_TO_ADDR
8026: LD_VAR 0 11
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PUSH
8035: LD_INT 2
8037: DIV
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8172
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_VAR 0 11
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 8
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 11
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: LD_INT 1
8083: PLUS
8084: ARRAY
8085: PPUSH
8086: CALL_OW 297
8090: ST_TO_ADDR
// if x < p then
8091: LD_VAR 0 6
8095: PUSH
8096: LD_VAR 0 9
8100: LESS
8101: IFFALSE 8156
// begin p := x ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_VAR 0 6
8112: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8113: LD_ADDR_VAR 0 14
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 8
8131: ARRAY
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: ARRAY
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// end ; c = c + 2 ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 8
8165: PUSH
8166: LD_INT 2
8168: PLUS
8169: ST_TO_ADDR
// end ;
8170: GO 8039
8172: POP
8173: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 14
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_VAR 0 14
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 14
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 14
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 307
8235: IFFALSE 8174
// status = 1 ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 301
8254: IFFALSE 6983
// end ;
8256: LD_VAR 0 4
8260: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8271: LD_VAR 0 1
8275: NOT
8276: PUSH
8277: LD_VAR 0 3
8281: NOT
8282: OR
8283: PUSH
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: IN
8303: NOT
8304: OR
8305: PUSH
8306: LD_VAR 0 6
8310: NOT
8311: OR
8312: PUSH
8313: LD_VAR 0 7
8317: NOT
8318: OR
8319: IFFALSE 8323
// exit ;
8321: GO 8714
// sex_id :=  ;
8323: LD_ADDR_VAR 0 14
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// case class of 1 :
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8355
8344: POP
// class_id := Sol ; 2 :
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: LD_STRING Sol
8352: ST_TO_ADDR
8353: GO 8413
8355: LD_INT 2
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8374
8363: POP
// class_id := Eng ; 3 :
8364: LD_ADDR_VAR 0 15
8368: PUSH
8369: LD_STRING Eng
8371: ST_TO_ADDR
8372: GO 8413
8374: LD_INT 3
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8393
8382: POP
// class_id := Mech ; 4 :
8383: LD_ADDR_VAR 0 15
8387: PUSH
8388: LD_STRING Mech
8390: ST_TO_ADDR
8391: GO 8413
8393: LD_INT 4
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8412
8401: POP
// class_id := Sci ; end ;
8402: LD_ADDR_VAR 0 15
8406: PUSH
8407: LD_STRING Sci
8409: ST_TO_ADDR
8410: GO 8413
8412: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8413: LD_ADDR_VAR 0 11
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_INT 25
8425: PUSH
8426: LD_VAR 0 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 72
8439: ST_TO_ADDR
// if tmp then
8440: LD_VAR 0 11
8444: IFFALSE 8456
// units := tmp ;
8446: LD_ADDR_VAR 0 1
8450: PUSH
8451: LD_VAR 0 11
8455: ST_TO_ADDR
// if sex then
8456: LD_VAR 0 4
8460: IFFALSE 8516
// begin if sex = sex_female then
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 8480
// sex_id := F ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_STRING F
8479: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 26
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if not units then
8507: LD_VAR 0 1
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8714
// end ; unit_id := id ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_VAR 0 6
8525: ST_TO_ADDR
// if unit_id > units then
8526: LD_VAR 0 12
8530: PUSH
8531: LD_VAR 0 1
8535: GREATER
8536: IFFALSE 8546
// unit_id := 1 ;
8538: LD_ADDR_VAR 0 12
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not units [ unit_id ] then
8546: LD_VAR 0 1
8550: PUSH
8551: LD_VAR 0 12
8555: ARRAY
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8714
// unit := units [ unit_id ] ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 12
8575: ARRAY
8576: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8577: LD_ADDR_VAR 0 13
8581: PUSH
8582: LD_STRING D
8584: PUSH
8585: LD_VAR 0 3
8589: STR
8590: PUSH
8591: LD_STRING -
8593: STR
8594: PUSH
8595: LD_VAR 0 14
8599: STR
8600: PUSH
8601: LD_VAR 0 15
8605: STR
8606: PUSH
8607: LD_VAR 0 6
8611: STR
8612: PUSH
8613: LD_STRING -
8615: STR
8616: PUSH
8617: LD_VAR 0 7
8621: STR
8622: ST_TO_ADDR
// case type of 0 :
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 0
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8653
8636: POP
// Say ( unit , dialog_id ) ; 1 :
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_VAR 0 13
8646: PPUSH
8647: CALL_OW 88
8651: GO 8704
8653: LD_INT 1
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8678
8661: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8662: LD_VAR 0 10
8666: PPUSH
8667: LD_VAR 0 13
8671: PPUSH
8672: CALL_OW 94
8676: GO 8704
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8703
8686: POP
// ForceSay ( unit , dialog_id ) ; end ;
8687: LD_VAR 0 10
8691: PPUSH
8692: LD_VAR 0 13
8696: PPUSH
8697: CALL_OW 91
8701: GO 8704
8703: POP
// result := unit ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 10
8713: ST_TO_ADDR
// end ;
8714: LD_VAR 0 8
8718: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8719: LD_INT 0
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := false ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8732: LD_VAR 0 1
8736: NOT
8737: PUSH
8738: LD_VAR 0 2
8742: NOT
8743: OR
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 310
8754: OR
8755: IFFALSE 8759
// exit ;
8757: GO 8963
// if distance < 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: LESS
8767: IFFALSE 8777
// distance := 0 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 266
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 250
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 251
8811: PPUSH
8812: LD_VAR 0 2
8816: PPUSH
8817: CALL_OW 254
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 248
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL 48067 0 6
8839: ST_TO_ADDR
// if not entrance then
8840: LD_VAR 0 6
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8963
// for i in entrance do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8961
// begin if not distance then
8862: LD_VAR 0 3
8866: NOT
8867: IFFALSE 8912
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 307
8896: IFFALSE 8910
// begin result := true ;
8898: LD_ADDR_VAR 0 4
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// exit ;
8906: POP
8907: POP
8908: GO 8963
// end ; end else
8910: GO 8959
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: PPUSH
8935: CALL_OW 297
8939: PUSH
8940: LD_VAR 0 3
8944: LESSEQUAL
8945: IFFALSE 8959
// begin result := true ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// exit ;
8955: POP
8956: POP
8957: GO 8963
// end ; end ; end ;
8959: GO 8859
8961: POP
8962: POP
// end ;
8963: LD_VAR 0 4
8967: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
8972: PPUSH
// result := false ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8981: LD_VAR 0 1
8985: NOT
8986: PUSH
8987: LD_VAR 0 2
8991: NOT
8992: OR
8993: PUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 302
9003: NOT
9004: OR
9005: PUSH
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 302
9015: NOT
9016: OR
9017: IFFALSE 9021
// exit ;
9019: GO 9182
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9021: LD_VAR 0 1
9025: PPUSH
9026: LD_INT 81
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 255
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 74
9078: PPUSH
9079: CALL_OW 296
9083: PUSH
9084: LD_INT 8
9086: LESS
9087: IFFALSE 9091
// exit ;
9089: GO 9182
// building := IsInUnit ( unit2 ) ;
9091: LD_ADDR_VAR 0 5
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 310
9105: ST_TO_ADDR
// if building then
9106: LD_VAR 0 5
9110: IFFALSE 9137
// result := IsNearbyEntrance ( unit , building , 2 ) else
9112: LD_ADDR_VAR 0 3
9116: PUSH
9117: LD_VAR 0 1
9121: PPUSH
9122: LD_VAR 0 5
9126: PPUSH
9127: LD_INT 2
9129: PPUSH
9130: CALL 8719 0 3
9134: ST_TO_ADDR
9135: GO 9182
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9137: LD_ADDR_VAR 0 3
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 296
9156: PUSH
9157: LD_INT 6
9159: LESS
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 255
9170: PPUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 292
9180: AND
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 3
9186: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
// uc_side = 0 ;
9193: LD_ADDR_OWVAR 20
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_nation = 0 ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// nat_area := nature_area ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 24
9216: ST_TO_ADDR
// InitHc ;
9217: CALL_OW 19
// for i = 1 to 4 do
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 4
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9282
// begin hc_class = 18 ;
9237: LD_ADDR_OWVAR 28
9241: PUSH
9242: LD_INT 18
9244: ST_TO_ADDR
// hc_gallery =  ;
9245: LD_ADDR_OWVAR 33
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// animal := CreateHuman ;
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 0
9275: PPUSH
9276: CALL_OW 49
// end ;
9280: GO 9234
9282: POP
9283: POP
// for i = 1 to 3 do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: DOUBLE
9290: LD_INT 1
9292: DEC
9293: ST_TO_ADDR
9294: LD_INT 3
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9392
// begin hc_class = class_apeman ;
9300: LD_ADDR_OWVAR 28
9304: PUSH
9305: LD_INT 12
9307: ST_TO_ADDR
// hc_gallery =  ;
9308: LD_ADDR_OWVAR 33
9312: PUSH
9313: LD_STRING 
9315: ST_TO_ADDR
// hc_agressivity = 0 ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9324: LD_ADDR_OWVAR 31
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: LD_INT 3
9345: PPUSH
9346: CALL_OW 12
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// animal := CreateHuman ;
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: CALL_OW 44
9372: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: CALL_OW 49
// end ;
9390: GO 9297
9392: POP
9393: POP
// for i = 1 to 3 do
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: DOUBLE
9400: LD_INT 1
9402: DEC
9403: ST_TO_ADDR
9404: LD_INT 3
9406: PUSH
9407: FOR_TO
9408: IFFALSE 9455
// begin hc_class = 13 ;
9410: LD_ADDR_OWVAR 28
9414: PUSH
9415: LD_INT 13
9417: ST_TO_ADDR
// hc_gallery =  ;
9418: LD_ADDR_OWVAR 33
9422: PUSH
9423: LD_STRING 
9425: ST_TO_ADDR
// animal := CreateHuman ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: CALL_OW 44
9435: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 49
// end ;
9453: GO 9407
9455: POP
9456: POP
// for i = 1 to 3 do
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 3
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin hc_class = 20 ;
9473: LD_ADDR_OWVAR 28
9477: PUSH
9478: LD_INT 20
9480: ST_TO_ADDR
// hc_gallery =  ;
9481: LD_ADDR_OWVAR 33
9485: PUSH
9486: LD_STRING 
9488: ST_TO_ADDR
// animal := CreateHuman ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: CALL_OW 44
9498: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 4
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: CALL_OW 49
// end ;
9514: GO 9470
9516: POP
9517: POP
// end ; end_of_file
9518: LD_VAR 0 1
9522: RET
// export function Action ; begin
9523: LD_INT 0
9525: PPUSH
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9530: LD_EXP 14
9534: PPUSH
9535: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D1-JMM-1
9546: PPUSH
9547: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9551: LD_EXP 15
9555: PPUSH
9556: LD_STRING D1-Roth-1
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D1-JMM-2
9570: PPUSH
9571: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9575: LD_EXP 15
9579: PPUSH
9580: LD_STRING D1-Roth-2
9582: PPUSH
9583: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9587: LD_EXP 14
9591: PPUSH
9592: LD_STRING D1-JMM-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9599: LD_EXP 15
9603: PPUSH
9604: LD_STRING D1-Roth-3
9606: PPUSH
9607: CALL_OW 88
// ComInvisible ( Roth ) ;
9611: LD_EXP 15
9615: PPUSH
9616: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9620: LD_INT 46
9622: PPUSH
9623: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9627: LD_EXP 14
9631: PPUSH
9632: LD_STRING D1-JMM-4
9634: PPUSH
9635: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9639: LD_INT 10
9641: PPUSH
9642: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_EXP 14
9655: PPUSH
9656: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D1-JMM-4a
9667: PPUSH
9668: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D1-Roth-4
9679: PPUSH
9680: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9684: LD_EXP 14
9688: PPUSH
9689: LD_STRING D1-JMM-5
9691: PPUSH
9692: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING D1-Roth-5
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_STRING D1-JMM-6
9715: PPUSH
9716: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9720: LD_EXP 15
9724: PPUSH
9725: LD_STRING D1-Roth-6
9727: PPUSH
9728: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9732: LD_EXP 14
9736: PPUSH
9737: LD_STRING D1-JMM-7
9739: PPUSH
9740: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9744: LD_EXP 16
9748: PPUSH
9749: LD_EXP 14
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 14
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING D1-Roth-7
9780: PPUSH
9781: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9785: LD_INT 10
9787: PPUSH
9788: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9792: LD_EXP 16
9796: PPUSH
9797: LD_EXP 14
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 6
9809: LESS
9810: IFFALSE 9785
// ComTurnUnit ( Powell , JMM ) ;
9812: LD_EXP 16
9816: PPUSH
9817: LD_EXP 14
9821: PPUSH
9822: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_STRING D1-Pow-7
9833: PPUSH
9834: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_EXP 16
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_EXP 16
9861: PPUSH
9862: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9866: LD_EXP 14
9870: PPUSH
9871: LD_STRING D1-JMM-8
9873: PPUSH
9874: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9878: LD_EXP 16
9882: PPUSH
9883: LD_STRING D1-Pow-8
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9890: LD_EXP 14
9894: PPUSH
9895: LD_STRING D1-JMM-9
9897: PPUSH
9898: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 124
9909: PPUSH
9910: LD_INT 61
9912: PPUSH
9913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9917: LD_INT 35
9919: PPUSH
9920: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9924: LD_EXP 14
9928: PPUSH
9929: LD_EXP 16
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 6
9941: GREATER
9942: IFFALSE 9917
// SayRadio ( Powell , D1-Pow-9 ) ;
9944: LD_EXP 16
9948: PPUSH
9949: LD_STRING D1-Pow-9
9951: PPUSH
9952: CALL_OW 94
// RemoveUnit ( Powell ) ;
9956: LD_EXP 16
9960: PPUSH
9961: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9965: LD_EXP 16
9969: PPUSH
9970: LD_INT 18
9972: PPUSH
9973: CALL_OW 52
// if Joan and not Joan in selected then
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 36
9986: PUSH
9987: LD_EXP 3
9991: IN
9992: NOT
9993: AND
9994: IFFALSE 10008
// SayRadio ( Joan , D1-Joan-9 ) ;
9996: LD_EXP 36
10000: PPUSH
10001: LD_STRING D1-Joan-9
10003: PPUSH
10004: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10022: LD_EXP 14
10026: PPUSH
10027: LD_EXP 15
10031: PPUSH
10032: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-9
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-10
10055: PPUSH
10056: CALL_OW 88
// InGameOff ;
10060: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10064: LD_STRING M1
10066: PPUSH
10067: CALL_OW 337
// if Difficulty < 3 then
10071: LD_OWVAR 67
10075: PUSH
10076: LD_INT 3
10078: LESS
10079: IFFALSE 10091
// ChangeSideFog ( 4 , 7 ) ;
10081: LD_INT 4
10083: PPUSH
10084: LD_INT 7
10086: PPUSH
10087: CALL_OW 343
// SaveForQuickRestart ;
10091: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10095: LD_INT 7
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 80
// wait ( 0 0$3 ) ;
10111: LD_INT 105
10113: PPUSH
10114: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 124
10125: PPUSH
10126: LD_INT 18
10128: PPUSH
10129: CALL_OW 111
// AddComInvisible ( Roth ) ;
10133: LD_EXP 15
10137: PPUSH
10138: CALL_OW 212
// wait ( 0 0$30 ) ;
10142: LD_INT 1050
10144: PPUSH
10145: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10149: LD_EXP 15
10153: PPUSH
10154: LD_INT 2100
10156: PPUSH
10157: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_INT 156
10168: PPUSH
10169: LD_INT 20
10171: PPUSH
10172: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10176: LD_EXP 15
10180: PPUSH
10181: LD_INT 178
10183: PPUSH
10184: LD_INT 42
10186: PPUSH
10187: CALL_OW 171
// AddComInvisible ( Roth ) ;
10191: LD_EXP 15
10195: PPUSH
10196: CALL_OW 212
// end ;
10200: LD_VAR 0 1
10204: RET
// every 0 0$1 do var i , tmp ;
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin tmp := selected union friends ;
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_EXP 3
10221: PUSH
10222: LD_EXP 4
10226: UNION
10227: ST_TO_ADDR
// if not tmp then
10228: LD_VAR 0 2
10232: NOT
10233: IFFALSE 10237
// exit ;
10235: GO 10309
// repeat wait ( 0 0$1 ) ;
10237: LD_INT 35
10239: PPUSH
10240: CALL_OW 67
// for i in tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_VAR 0 2
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10300
// if CanSpot ( JMM , i ) then
10257: LD_EXP 14
10261: PPUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL 8968 0 2
10271: IFFALSE 10298
// begin tmp := tmp diff i ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// Spot ( i ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10312 0 1
// end ;
10298: GO 10254
10300: POP
10301: POP
// until not tmp ;
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10237
// end ;
10309: PPOPN 2
10311: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10318: LD_VAR 0 1
10322: NOT
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 4
10336: NONEQUAL
10337: OR
10338: PUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 555
10348: OR
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 302
10359: NOT
10360: OR
10361: IFFALSE 10365
// exit ;
10363: GO 12254
// InGameOn ;
10365: CALL_OW 8
// side := GetSide ( JMM ) ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_EXP 14
10378: PPUSH
10379: CALL_OW 255
10383: ST_TO_ADDR
// joined := false ;
10384: LD_ADDR_VAR 0 5
10388: PUSH
10389: LD_INT 0
10391: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10392: LD_ADDR_VAR 0 3
10396: PUSH
10397: LD_VAR 0 1
10401: PPUSH
10402: CALL_OW 310
10406: ST_TO_ADDR
// if building then
10407: LD_VAR 0 3
10411: IFFALSE 10470
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10413: LD_EXP 14
10417: PPUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 255
10427: PPUSH
10428: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10432: LD_EXP 14
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: CALL_OW 120
// repeat wait ( 3 ) ;
10446: LD_INT 3
10448: PPUSH
10449: CALL_OW 67
// until IsInUnit ( JMM ) ;
10453: LD_EXP 14
10457: PPUSH
10458: CALL_OW 310
10462: IFFALSE 10446
// DialogueOn ;
10464: CALL_OW 6
// end else
10468: GO 10502
// begin ComTurnUnit ( JMM , unit ) ;
10470: LD_EXP 14
10474: PPUSH
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_EXP 14
10493: PPUSH
10494: CALL_OW 119
// DialogueOn ;
10498: CALL_OW 6
// end ; if unit = Joan then
10502: LD_VAR 0 1
10506: PUSH
10507: LD_EXP 36
10511: EQUAL
10512: IFFALSE 10622
// begin joined := true ;
10514: LD_ADDR_VAR 0 5
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// if Joan in selected then
10522: LD_EXP 36
10526: PUSH
10527: LD_EXP 3
10531: IN
10532: IFFALSE 10560
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10534: LD_EXP 36
10538: PPUSH
10539: LD_STRING D3-Joan-Joan-1
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10546: LD_EXP 14
10550: PPUSH
10551: LD_STRING D3-Joan-JMM-1
10553: PPUSH
10554: CALL_OW 88
// end else
10558: GO 10620
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10560: LD_EXP 36
10564: PPUSH
10565: LD_STRING D4-Joan-Joan-1
10567: PPUSH
10568: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10572: LD_EXP 14
10576: PPUSH
10577: LD_STRING D4-Joan-JMM-1
10579: PPUSH
10580: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10584: LD_EXP 36
10588: PPUSH
10589: LD_STRING D4-Joan-Joan-2
10591: PPUSH
10592: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10596: LD_EXP 14
10600: PPUSH
10601: LD_STRING D4-Joan-JMM-2
10603: PPUSH
10604: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10608: LD_EXP 36
10612: PPUSH
10613: LD_STRING D4-Joan-Joan-3
10615: PPUSH
10616: CALL_OW 88
// end ; end else
10620: GO 12062
// if unit = Lisa then
10622: LD_VAR 0 1
10626: PUSH
10627: LD_EXP 23
10631: EQUAL
10632: IFFALSE 10824
// begin if Lisa in selected then
10634: LD_EXP 23
10638: PUSH
10639: LD_EXP 3
10643: IN
10644: IFFALSE 10757
// begin if GetSide ( Joan ) = 7 then
10646: LD_EXP 36
10650: PPUSH
10651: CALL_OW 255
10655: PUSH
10656: LD_INT 7
10658: EQUAL
10659: IFFALSE 10723
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10661: LD_EXP 23
10665: PPUSH
10666: LD_STRING D3-LisaJ-Lisa-1
10668: PPUSH
10669: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10673: LD_EXP 14
10677: PPUSH
10678: LD_STRING D3-LisaJ-JMM-1
10680: PPUSH
10681: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10685: LD_EXP 23
10689: PPUSH
10690: LD_STRING D3-LisaJ-Lisa-2
10692: PPUSH
10693: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10697: LD_EXP 14
10701: PPUSH
10702: LD_STRING D3-LisaJ-JMM-2
10704: PPUSH
10705: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10709: LD_EXP 23
10713: PPUSH
10714: LD_STRING D3-LisaJ-Lisa-3
10716: PPUSH
10717: CALL_OW 88
// end else
10721: GO 10755
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10723: LD_EXP 23
10727: PPUSH
10728: LD_STRING D3-LisaL-Lisa-1
10730: PPUSH
10731: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10735: LD_EXP 14
10739: PPUSH
10740: LD_STRING D3-LisaL-JMM-1
10742: PPUSH
10743: CALL_OW 88
// joined := true ;
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// end ; end else
10755: GO 10822
// begin if GetSide ( Joan ) = 7 then
10757: LD_EXP 36
10761: PPUSH
10762: CALL_OW 255
10766: PUSH
10767: LD_INT 7
10769: EQUAL
10770: IFFALSE 10810
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10772: LD_EXP 23
10776: PPUSH
10777: LD_STRING D4-LisaJ-Lisa-1
10779: PPUSH
10780: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10784: LD_EXP 14
10788: PPUSH
10789: LD_STRING D4-LisaJ-JMM-1
10791: PPUSH
10792: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10796: LD_EXP 23
10800: PPUSH
10801: LD_STRING D4-LisaJ-Lisa-2
10803: PPUSH
10804: CALL_OW 88
// end else
10808: GO 10822
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10810: LD_EXP 23
10814: PPUSH
10815: LD_STRING D4-LisaL-Lisa-1
10817: PPUSH
10818: CALL_OW 88
// end ; end ; end else
10822: GO 12062
// if unit = Frank then
10824: LD_VAR 0 1
10828: PUSH
10829: LD_EXP 33
10833: EQUAL
10834: IFFALSE 10974
// begin joined := true ;
10836: LD_ADDR_VAR 0 5
10840: PUSH
10841: LD_INT 1
10843: ST_TO_ADDR
// if Frank in selected then
10844: LD_EXP 33
10848: PUSH
10849: LD_EXP 3
10853: IN
10854: IFFALSE 10924
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10856: LD_EXP 33
10860: PPUSH
10861: LD_STRING D3-Frank-Frank-1
10863: PPUSH
10864: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10868: LD_EXP 14
10872: PPUSH
10873: LD_STRING D3-Frank-JMM-1
10875: PPUSH
10876: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10880: LD_EXP 33
10884: PPUSH
10885: LD_STRING D3-Frank-Frank-2
10887: PPUSH
10888: CALL_OW 88
// if reached_lab then
10892: LD_EXP 5
10896: IFFALSE 10922
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10898: LD_EXP 14
10902: PPUSH
10903: LD_STRING D3-Frank-JMM-2
10905: PPUSH
10906: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10910: LD_EXP 33
10914: PPUSH
10915: LD_STRING D3-Frank-Frank-3
10917: PPUSH
10918: CALL_OW 88
// end ; end else
10922: GO 10972
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10924: LD_EXP 33
10928: PPUSH
10929: LD_STRING D4-Frank-Frank-1
10931: PPUSH
10932: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10936: LD_EXP 14
10940: PPUSH
10941: LD_STRING D4-Frank-JMM-1
10943: PPUSH
10944: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10948: LD_EXP 33
10952: PPUSH
10953: LD_STRING D4-Frank-Frank-2
10955: PPUSH
10956: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10960: LD_EXP 14
10964: PPUSH
10965: LD_STRING D4-Frank-JMM-2
10967: PPUSH
10968: CALL_OW 88
// end ; end else
10972: GO 12062
// if unit = Brown then
10974: LD_VAR 0 1
10978: PUSH
10979: LD_EXP 28
10983: EQUAL
10984: IFFALSE 11080
// begin if Brown in selected or gamma_commander = 2 then
10986: LD_EXP 28
10990: PUSH
10991: LD_EXP 3
10995: IN
10996: PUSH
10997: LD_EXP 10
11001: PUSH
11002: LD_INT 2
11004: EQUAL
11005: OR
11006: IFFALSE 11042
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11008: LD_EXP 28
11012: PPUSH
11013: LD_STRING D3-Soldier1-Sol1-1
11015: PPUSH
11016: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11020: LD_EXP 14
11024: PPUSH
11025: LD_STRING D3-Soldier1-JMM-1
11027: PPUSH
11028: CALL_OW 88
// joined := true ;
11032: LD_ADDR_VAR 0 5
11036: PUSH
11037: LD_INT 1
11039: ST_TO_ADDR
// end else
11040: GO 11078
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11042: LD_EXP 28
11046: PPUSH
11047: LD_STRING D4-Soldier2-Sol1-1
11049: PPUSH
11050: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11054: LD_EXP 14
11058: PPUSH
11059: LD_STRING D4-Soldier1-JMM-1
11061: PPUSH
11062: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11066: LD_EXP 28
11070: PPUSH
11071: LD_STRING D4-Soldier2-Sol1-2
11073: PPUSH
11074: CALL_OW 88
// end ; end else
11078: GO 12062
// if unit = Donaldson then
11080: LD_VAR 0 1
11084: PUSH
11085: LD_EXP 24
11089: EQUAL
11090: IFFALSE 11186
// begin if Donaldson in selected or gamma_commander = 1 then
11092: LD_EXP 24
11096: PUSH
11097: LD_EXP 3
11101: IN
11102: PUSH
11103: LD_EXP 10
11107: PUSH
11108: LD_INT 1
11110: EQUAL
11111: OR
11112: IFFALSE 11148
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11114: LD_EXP 24
11118: PPUSH
11119: LD_STRING D3-Soldier2-FSol2-1
11121: PPUSH
11122: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11126: LD_EXP 14
11130: PPUSH
11131: LD_STRING D3-Soldier2-JMM-1
11133: PPUSH
11134: CALL_OW 88
// joined := true ;
11138: LD_ADDR_VAR 0 5
11142: PUSH
11143: LD_INT 1
11145: ST_TO_ADDR
// end else
11146: GO 11184
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_STRING D4-Soldier1-FSol1-1
11155: PPUSH
11156: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11160: LD_EXP 14
11164: PPUSH
11165: LD_STRING D4-Soldier1-JMM-1
11167: PPUSH
11168: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_STRING D4-Soldier1-FSol1-2
11179: PPUSH
11180: CALL_OW 88
// end ; end else
11184: GO 12062
// if unit = Cyrus then
11186: LD_VAR 0 1
11190: PUSH
11191: LD_EXP 26
11195: EQUAL
11196: IFFALSE 11270
// begin if Cyrus in selected then
11198: LD_EXP 26
11202: PUSH
11203: LD_EXP 3
11207: IN
11208: IFFALSE 11244
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11210: LD_EXP 26
11214: PPUSH
11215: LD_STRING D3-Cyrus-Cyrus-1
11217: PPUSH
11218: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11222: LD_EXP 14
11226: PPUSH
11227: LD_STRING D3-Cyrus-JMM-1
11229: PPUSH
11230: CALL_OW 88
// joined := true ;
11234: LD_ADDR_VAR 0 5
11238: PUSH
11239: LD_INT 1
11241: ST_TO_ADDR
// end else
11242: GO 11268
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11244: LD_EXP 26
11248: PPUSH
11249: LD_STRING D4-Cyrus-Cyrus-1
11251: PPUSH
11252: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11256: LD_EXP 14
11260: PPUSH
11261: LD_STRING D4-Cyrus-JMM-1
11263: PPUSH
11264: CALL_OW 88
// end ; end else
11268: GO 12062
// if unit = Bobby then
11270: LD_VAR 0 1
11274: PUSH
11275: LD_EXP 25
11279: EQUAL
11280: IFFALSE 11366
// begin if Bobby in selected then
11282: LD_EXP 25
11286: PUSH
11287: LD_EXP 3
11291: IN
11292: IFFALSE 11328
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11294: LD_EXP 25
11298: PPUSH
11299: LD_STRING D3-Bobby-Bobby-1
11301: PPUSH
11302: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11306: LD_EXP 14
11310: PPUSH
11311: LD_STRING D3-Bobby-JMM-1
11313: PPUSH
11314: CALL_OW 88
// joined := true ;
11318: LD_ADDR_VAR 0 5
11322: PUSH
11323: LD_INT 1
11325: ST_TO_ADDR
// end else
11326: GO 11364
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11328: LD_EXP 25
11332: PPUSH
11333: LD_STRING D4-Bobby-Bobby-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11340: LD_EXP 14
11344: PPUSH
11345: LD_STRING D4-Bobby-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11352: LD_EXP 25
11356: PPUSH
11357: LD_STRING D4-Bobby-Bobby-2
11359: PPUSH
11360: CALL_OW 88
// end ; end else
11364: GO 12062
// if unit = Cornel then
11366: LD_VAR 0 1
11370: PUSH
11371: LD_EXP 31
11375: EQUAL
11376: IFFALSE 11474
// begin if Cornel in selected then
11378: LD_EXP 31
11382: PUSH
11383: LD_EXP 3
11387: IN
11388: IFFALSE 11436
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11390: LD_EXP 31
11394: PPUSH
11395: LD_STRING D3-Mark-Corn-1
11397: PPUSH
11398: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11402: LD_EXP 14
11406: PPUSH
11407: LD_STRING D3-Mark-JMM-1
11409: PPUSH
11410: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11414: LD_EXP 31
11418: PPUSH
11419: LD_STRING D3-Mark-Corn-2
11421: PPUSH
11422: CALL_OW 88
// joined := true ;
11426: LD_ADDR_VAR 0 5
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// end else
11434: GO 11472
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11436: LD_EXP 31
11440: PPUSH
11441: LD_STRING D4-Mark-Corn-1
11443: PPUSH
11444: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11448: LD_EXP 14
11452: PPUSH
11453: LD_STRING D3-Joan-JMM-1
11455: PPUSH
11456: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11460: LD_EXP 31
11464: PPUSH
11465: LD_STRING D4-Mark-Corn-2
11467: PPUSH
11468: CALL_OW 88
// end ; end else
11472: GO 12062
// if unit = Gary then
11474: LD_VAR 0 1
11478: PUSH
11479: LD_EXP 32
11483: EQUAL
11484: IFFALSE 11568
// begin if Gary in selected then
11486: LD_EXP 32
11490: PUSH
11491: LD_EXP 3
11495: IN
11496: IFFALSE 11532
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11498: LD_EXP 32
11502: PPUSH
11503: LD_STRING D3-Gary-Gary-1
11505: PPUSH
11506: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11510: LD_EXP 14
11514: PPUSH
11515: LD_STRING D3-Gary-JMM-1
11517: PPUSH
11518: CALL_OW 88
// joined := true ;
11522: LD_ADDR_VAR 0 5
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// end else
11530: GO 11566
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11532: LD_EXP 32
11536: PPUSH
11537: LD_STRING D4-Gary-Gary-1
11539: PPUSH
11540: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11544: LD_EXP 32
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 235
// DialogueOff ;
11556: CALL_OW 7
// InGameOff ;
11560: CALL_OW 9
// exit ;
11564: GO 12254
// end ; end else
11566: GO 12062
// if unit = Kikuchi then
11568: LD_VAR 0 1
11572: PUSH
11573: LD_EXP 34
11577: EQUAL
11578: IFFALSE 11662
// begin if Kikuchi in selected then
11580: LD_EXP 34
11584: PUSH
11585: LD_EXP 3
11589: IN
11590: IFFALSE 11626
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11592: LD_EXP 34
11596: PPUSH
11597: LD_STRING D3-Yamako-Yam-1
11599: PPUSH
11600: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11604: LD_EXP 14
11608: PPUSH
11609: LD_STRING D3-Soldier2-JMM-1
11611: PPUSH
11612: CALL_OW 88
// joined := true ;
11616: LD_ADDR_VAR 0 5
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// end else
11624: GO 11660
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11626: LD_EXP 34
11630: PPUSH
11631: LD_STRING D4-Yamako-Yam-1
11633: PPUSH
11634: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11638: LD_EXP 34
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 235
// DialogueOff ;
11650: CALL_OW 7
// InGameOff ;
11654: CALL_OW 9
// exit ;
11658: GO 12254
// end ; end else
11660: GO 12062
// if unit = Gladstone then
11662: LD_VAR 0 1
11666: PUSH
11667: LD_EXP 29
11671: EQUAL
11672: IFFALSE 11746
// begin if Gladstone in selected then
11674: LD_EXP 29
11678: PUSH
11679: LD_EXP 3
11683: IN
11684: IFFALSE 11720
// begin joined := true ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11694: LD_EXP 14
11698: PPUSH
11699: LD_STRING D3-Tim-JMM-1
11701: PPUSH
11702: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11706: LD_EXP 29
11710: PPUSH
11711: LD_STRING D3-Tim-Glad-1
11713: PPUSH
11714: CALL_OW 88
// end else
11718: GO 11744
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11720: LD_EXP 14
11724: PPUSH
11725: LD_STRING D4-Tim-JMM-1
11727: PPUSH
11728: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11732: LD_EXP 29
11736: PPUSH
11737: LD_STRING D4-Tim-Glad-1
11739: PPUSH
11740: CALL_OW 88
// end ; end else
11744: GO 12062
// if unit = Denis then
11746: LD_VAR 0 1
11750: PUSH
11751: LD_EXP 27
11755: EQUAL
11756: IFFALSE 11792
// begin joined := true ;
11758: LD_ADDR_VAR 0 5
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11766: LD_EXP 27
11770: PPUSH
11771: LD_STRING D3-Denis-Den-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11778: LD_EXP 14
11782: PPUSH
11783: LD_STRING D3-Denis-JMM-1
11785: PPUSH
11786: CALL_OW 88
// end else
11790: GO 12062
// if unit = Simms then
11792: LD_VAR 0 1
11796: PUSH
11797: LD_EXP 35
11801: EQUAL
11802: IFFALSE 11838
// begin joined := true ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11812: LD_EXP 35
11816: PPUSH
11817: LD_STRING D3-Simms-Sim-1
11819: PPUSH
11820: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11824: LD_EXP 14
11828: PPUSH
11829: LD_STRING D3-Simms-JMM-1
11831: PPUSH
11832: CALL_OW 88
// end else
11836: GO 12062
// if unit = DeltaDoctor then
11838: LD_VAR 0 1
11842: PUSH
11843: LD_EXP 37
11847: EQUAL
11848: IFFALSE 11884
// begin joined := true ;
11850: LD_ADDR_VAR 0 5
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11858: LD_EXP 37
11862: PPUSH
11863: LD_STRING D3-Soldier1-Sol1-1
11865: PPUSH
11866: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11870: LD_EXP 14
11874: PPUSH
11875: LD_STRING D3-Soldier1-JMM-1
11877: PPUSH
11878: CALL_OW 88
// end else
11882: GO 12062
// begin joined := unit in selected ;
11884: LD_ADDR_VAR 0 5
11888: PUSH
11889: LD_VAR 0 1
11893: PUSH
11894: LD_EXP 3
11898: IN
11899: ST_TO_ADDR
// if joined then
11900: LD_VAR 0 5
11904: IFFALSE 11973
// begin if GetSex ( unit ) = sex_male then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 258
11915: PUSH
11916: LD_INT 1
11918: EQUAL
11919: IFFALSE 11947
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11921: LD_VAR 0 1
11925: PPUSH
11926: LD_STRING D3-Soldier1-Sol1-1
11928: PPUSH
11929: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11933: LD_EXP 14
11937: PPUSH
11938: LD_STRING D3-Soldier1-JMM-1
11940: PPUSH
11941: CALL_OW 88
// end else
11945: GO 11971
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_STRING D3-Soldier2-FSol2-1
11954: PPUSH
11955: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11959: LD_EXP 14
11963: PPUSH
11964: LD_STRING D3-Soldier2-JMM-1
11966: PPUSH
11967: CALL_OW 88
// end ; end else
11971: GO 12062
// begin if GetSex ( unit ) = sex_male then
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 258
11982: PUSH
11983: LD_INT 1
11985: EQUAL
11986: IFFALSE 12026
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_STRING D4-Soldier2-Sol1-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12000: LD_EXP 14
12004: PPUSH
12005: LD_STRING D4-Soldier2-JMM-1
12007: PPUSH
12008: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12012: LD_VAR 0 1
12016: PPUSH
12017: LD_STRING D4-Soldier2-Sol2-1
12019: PPUSH
12020: CALL_OW 88
// end else
12024: GO 12062
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: LD_STRING D4-Soldier1-FSol1-1
12033: PPUSH
12034: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12038: LD_EXP 14
12042: PPUSH
12043: LD_STRING D4-Soldier1-JMM-1
12045: PPUSH
12046: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12050: LD_VAR 0 1
12054: PPUSH
12055: LD_STRING D4-Soldier1-FSol1-2
12057: PPUSH
12058: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12062: CALL_OW 7
// InGameOff ;
12066: CALL_OW 9
// if building then
12070: LD_VAR 0 3
12074: IFFALSE 12175
// begin SetSide ( JMM , side ) ;
12076: LD_EXP 14
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12090: LD_EXP 14
12094: PPUSH
12095: CALL_OW 122
// if joined then
12099: LD_VAR 0 5
12103: IFFALSE 12142
// begin SetSide ( unit , side ) ;
12105: LD_VAR 0 1
12109: PPUSH
12110: LD_VAR 0 4
12114: PPUSH
12115: CALL_OW 235
// SetSide ( building , 1 ) ;
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 235
// ComExitBuilding ( unit ) ;
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 122
// end else
12140: GO 12173
// begin wait ( 0 0$10 ) ;
12142: LD_INT 350
12144: PPUSH
12145: CALL_OW 67
// SetSide ( unit , 1 ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 235
// SetSide ( building , 1 ) ;
12161: LD_VAR 0 3
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 235
// end ; end else
12173: GO 12254
// begin ComStop ( [ JMM , unit ] ) ;
12175: LD_EXP 14
12179: PUSH
12180: LD_VAR 0 1
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 141
// if joined then
12193: LD_VAR 0 5
12197: IFFALSE 12215
// SetSide ( unit , side ) else
12199: LD_VAR 0 1
12203: PPUSH
12204: LD_VAR 0 4
12208: PPUSH
12209: CALL_OW 235
12213: GO 12254
// begin repeat wait ( 0 0$1 ) ;
12215: LD_INT 35
12217: PPUSH
12218: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12222: LD_EXP 14
12226: PPUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 296
12236: PUSH
12237: LD_INT 11
12239: GREATER
12240: IFFALSE 12215
// SetSide ( unit , 1 ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 235
// end ; end ; end ;
12254: LD_VAR 0 2
12258: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12259: LD_EXP 14
12263: PPUSH
12264: CALL_OW 310
12268: PUSH
12269: LD_INT 47
12271: EQUAL
12272: IFFALSE 12340
12274: GO 12276
12276: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12277: LD_STRING M1a
12279: PPUSH
12280: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12284: LD_INT 13
12286: PPUSH
12287: LD_INT 7
12289: PPUSH
12290: LD_INT 2
12292: PPUSH
12293: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12297: LD_INT 29
12299: PPUSH
12300: LD_INT 7
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12310: LD_EXP 14
12314: PPUSH
12315: LD_INT 9
12317: PPUSH
12318: CALL_OW 336
// can_escape := true ;
12322: LD_ADDR_EXP 6
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12330: LD_INT 19
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 424
// end ;
12340: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12341: LD_EXP 16
12345: PPUSH
12346: CALL_OW 256
12350: PUSH
12351: LD_INT 999
12353: LESS
12354: IFFALSE 12405
12356: GO 12358
12358: DISABLE
// begin enable ;
12359: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12360: LD_INT 25
12362: PPUSH
12363: LD_INT 48
12365: PPUSH
12366: CALL_OW 428
12370: PUSH
12371: LD_EXP 16
12375: EQUAL
12376: IFFALSE 12390
// begin RemoveUnit ( Powell ) ;
12378: LD_EXP 16
12382: PPUSH
12383: CALL_OW 64
// disable ;
12387: DISABLE
// end else
12388: GO 12405
// ComMoveXY ( Powell , 25 , 48 ) ;
12390: LD_EXP 16
12394: PPUSH
12395: LD_INT 25
12397: PPUSH
12398: LD_INT 48
12400: PPUSH
12401: CALL_OW 111
// end ;
12405: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12406: LD_INT 22
12408: PUSH
12409: LD_INT 4
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 21
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: LD_INT 24
12431: PUSH
12432: LD_INT 990
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 69
12452: PUSH
12453: LD_EXP 15
12457: DIFF
12458: IFFALSE 12602
12460: GO 12462
12462: DISABLE
12463: LD_INT 0
12465: PPUSH
// begin enable ;
12466: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12467: LD_ADDR_VAR 0 1
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: LD_INT 24
12497: PUSH
12498: LD_INT 990
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 15
12523: DIFF
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12600
// begin ComFree ( i ) ;
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL_OW 139
// SetSide ( i , 1 ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_EXP 14
12558: PPUSH
12559: CALL_OW 296
12563: PUSH
12564: LD_INT 14
12566: LESS
12567: IFFALSE 12598
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_EXP 14
12578: PPUSH
12579: CALL_OW 250
12583: PPUSH
12584: LD_EXP 14
12588: PPUSH
12589: CALL_OW 251
12593: PPUSH
12594: CALL_OW 114
// end ;
12598: GO 12525
12600: POP
12601: POP
// end ;
12602: PPOPN 1
12604: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12605: LD_INT 22
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 34
12617: PUSH
12618: LD_INT 12
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: IFFALSE 12715
12635: GO 12637
12637: DISABLE
12638: LD_INT 0
12640: PPUSH
// begin enable ;
12641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12642: LD_ADDR_VAR 0 1
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 4
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 34
12659: PUSH
12660: LD_INT 12
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: PUSH
12676: FOR_IN
12677: IFFALSE 12713
// if GetDistUnits ( i , JMM ) < 6 then
12679: LD_VAR 0 1
12683: PPUSH
12684: LD_EXP 14
12688: PPUSH
12689: CALL_OW 296
12693: PUSH
12694: LD_INT 6
12696: LESS
12697: IFFALSE 12711
// SetSide ( i , 7 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 7
12706: PPUSH
12707: CALL_OW 235
12711: GO 12676
12713: POP
12714: POP
// end ;
12715: PPOPN 1
12717: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12718: LD_EXP 6
12722: PUSH
12723: LD_INT 19
12725: PPUSH
12726: LD_INT 22
12728: PUSH
12729: LD_INT 7
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 21
12738: PUSH
12739: LD_INT 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 71
12754: NOT
12755: AND
12756: PUSH
12757: LD_INT 3
12759: PPUSH
12760: CALL_OW 469
12764: NOT
12765: AND
12766: PUSH
12767: LD_INT 5
12769: PPUSH
12770: CALL_OW 469
12774: NOT
12775: AND
12776: IFFALSE 14402
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
// begin m1 := false ;
12788: LD_ADDR_VAR 0 3
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// m2 := false ;
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// m3 := false ;
12804: LD_ADDR_VAR 0 5
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12812: LD_ADDR_VAR 0 1
12816: PUSH
12817: LD_EXP 3
12821: PPUSH
12822: LD_INT 22
12824: PUSH
12825: LD_INT 4
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 21
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 72
12850: PUSH
12851: LD_INT 0
12853: EQUAL
12854: ST_TO_ADDR
// if not all_taken then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 13001
// case query ( Q1 ) of 1 :
12862: LD_STRING Q1
12864: PPUSH
12865: CALL_OW 97
12869: PUSH
12870: LD_INT 1
12872: DOUBLE
12873: EQUAL
12874: IFTRUE 12878
12876: GO 12989
12878: POP
// begin repeat wait ( 0 0$1 ) ;
12879: LD_INT 35
12881: PPUSH
12882: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12886: LD_EXP 3
12890: PPUSH
12891: LD_INT 22
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 72
12919: PUSH
12920: LD_INT 0
12922: EQUAL
12923: PUSH
12924: LD_INT 19
12926: PPUSH
12927: LD_INT 22
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 21
12939: PUSH
12940: LD_INT 1
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 71
12955: NOT
12956: AND
12957: PUSH
12958: LD_INT 3
12960: PPUSH
12961: CALL_OW 469
12965: NOT
12966: AND
12967: PUSH
12968: LD_INT 5
12970: PPUSH
12971: CALL_OW 469
12975: NOT
12976: AND
12977: IFFALSE 12879
// all_taken := true ;
12979: LD_ADDR_VAR 0 1
12983: PUSH
12984: LD_INT 1
12986: ST_TO_ADDR
// end ; 2 :
12987: GO 13001
12989: LD_INT 2
12991: DOUBLE
12992: EQUAL
12993: IFTRUE 12997
12995: GO 13000
12997: POP
// ; end ;
12998: GO 13001
13000: POP
// if team_kill_counter then
13001: LD_EXP 9
13005: IFFALSE 13021
// Say ( JMM , D5-JMM-1 ) else
13007: LD_EXP 14
13011: PPUSH
13012: LD_STRING D5-JMM-1
13014: PPUSH
13015: CALL_OW 88
13019: GO 13033
// Say ( JMM , D5-JMM-1a ) ;
13021: LD_EXP 14
13025: PPUSH
13026: LD_STRING D5-JMM-1a
13028: PPUSH
13029: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13033: LD_INT 22
13035: PUSH
13036: LD_INT 7
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 23
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: PUSH
13073: LD_EXP 14
13077: PUSH
13078: LD_EXP 15
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: DIFF
13087: PUSH
13088: LD_INT 10
13090: GREATEREQUAL
13091: IFFALSE 13100
// SetAchievement ( ACH_TEAM ) ;
13093: LD_STRING ACH_TEAM
13095: PPUSH
13096: CALL_OW 543
// if not invis_used then
13100: LD_EXP 12
13104: NOT
13105: IFFALSE 13121
// begin wait ( 3 ) ;
13107: LD_INT 3
13109: PPUSH
13110: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13114: LD_STRING ACH_NOINVIS
13116: PPUSH
13117: CALL_OW 543
// end ; if not alert then
13121: LD_EXP 13
13125: NOT
13126: IFFALSE 13142
// begin wait ( 3 ) ;
13128: LD_INT 3
13130: PPUSH
13131: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13135: LD_STRING ACH_ALARM
13137: PPUSH
13138: CALL_OW 543
// end ; if tick < 15 15$00 then
13142: LD_OWVAR 1
13146: PUSH
13147: LD_INT 31500
13149: LESS
13150: IFFALSE 13166
// begin wait ( 3 ) ;
13152: LD_INT 3
13154: PPUSH
13155: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13159: LD_STRING ACH_ASPEED_16
13161: PPUSH
13162: CALL_OW 543
// end ; if all_taken then
13166: LD_VAR 0 1
13170: IFFALSE 13192
// begin AddMedal ( All , 1 ) ;
13172: LD_STRING All
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 101
// m1 := true ;
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// end else
13190: GO 13203
// AddMedal ( All , - 1 ) ;
13192: LD_STRING All
13194: PPUSH
13195: LD_INT 1
13197: NEG
13198: PPUSH
13199: CALL_OW 101
// if team_kill_counter then
13203: LD_EXP 9
13207: IFFALSE 13222
// AddMedal ( Save , - 1 ) else
13209: LD_STRING Save
13211: PPUSH
13212: LD_INT 1
13214: NEG
13215: PPUSH
13216: CALL_OW 101
13220: GO 13240
// begin AddMedal ( Save , 1 ) ;
13222: LD_STRING Save
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 101
// m2 := true ;
13232: LD_ADDR_VAR 0 4
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13240: LD_EXP 8
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: LD_INT 1
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: PUSH
13263: LD_OWVAR 67
13267: ARRAY
13268: GREATEREQUAL
13269: IFFALSE 13284
// AddMedal ( Friendship , - 1 ) else
13271: LD_STRING Friendship
13273: PPUSH
13274: LD_INT 1
13276: NEG
13277: PPUSH
13278: CALL_OW 101
13282: GO 13302
// begin AddMedal ( Friendship , 1 ) ;
13284: LD_STRING Friendship
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 101
// m3 := true ;
13294: LD_ADDR_VAR 0 5
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13302: LD_VAR 0 3
13306: PUSH
13307: LD_VAR 0 4
13311: AND
13312: PUSH
13313: LD_VAR 0 5
13317: AND
13318: PUSH
13319: LD_OWVAR 67
13323: PUSH
13324: LD_INT 3
13326: GREATEREQUAL
13327: AND
13328: IFFALSE 13340
// SetAchievementEX ( ACH_AMER , 16 ) ;
13330: LD_STRING ACH_AMER
13332: PPUSH
13333: LD_INT 16
13335: PPUSH
13336: CALL_OW 564
// GiveMedals ( MAIN ) ;
13340: LD_STRING MAIN
13342: PPUSH
13343: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13347: LD_ADDR_VAR 0 2
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 7
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 1
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 25
13387: PUSH
13388: LD_INT 3
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 4
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 25
13417: PUSH
13418: LD_INT 8
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 25
13427: PUSH
13428: LD_INT 9
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13457: LD_VAR 0 2
13461: PUSH
13462: LD_EXP 15
13466: ADD
13467: PPUSH
13468: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13472: LD_EXP 14
13476: PPUSH
13477: LD_STRING 12a_JMM
13479: PPUSH
13480: CALL_OW 38
// if IsLive ( Roth ) then
13484: LD_EXP 15
13488: PPUSH
13489: CALL_OW 300
13493: IFFALSE 13507
// SaveCharacters ( Roth , 12a_Roth ) ;
13495: LD_EXP 15
13499: PPUSH
13500: LD_STRING 12a_Roth
13502: PPUSH
13503: CALL_OW 38
// if Lisa in tmp then
13507: LD_EXP 23
13511: PUSH
13512: LD_VAR 0 2
13516: IN
13517: IFFALSE 13533
// SaveCharacters ( Lisa , 12a_Lisa ) else
13519: LD_EXP 23
13523: PPUSH
13524: LD_STRING 12a_Lisa
13526: PPUSH
13527: CALL_OW 38
13531: GO 13551
// if Lisa then
13533: LD_EXP 23
13537: IFFALSE 13551
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13539: LD_EXP 23
13543: PPUSH
13544: LD_STRING 12p_Lisa
13546: PPUSH
13547: CALL_OW 38
// if Donaldson in tmp then
13551: LD_EXP 24
13555: PUSH
13556: LD_VAR 0 2
13560: IN
13561: IFFALSE 13577
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13563: LD_EXP 24
13567: PPUSH
13568: LD_STRING 12a_Donaldson
13570: PPUSH
13571: CALL_OW 38
13575: GO 13595
// if Donaldson then
13577: LD_EXP 24
13581: IFFALSE 13595
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13583: LD_EXP 24
13587: PPUSH
13588: LD_STRING 12p_Donaldson
13590: PPUSH
13591: CALL_OW 38
// if Bobby in tmp then
13595: LD_EXP 25
13599: PUSH
13600: LD_VAR 0 2
13604: IN
13605: IFFALSE 13621
// SaveCharacters ( Bobby , 12a_Bobby ) else
13607: LD_EXP 25
13611: PPUSH
13612: LD_STRING 12a_Bobby
13614: PPUSH
13615: CALL_OW 38
13619: GO 13639
// if Bobby then
13621: LD_EXP 25
13625: IFFALSE 13639
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13627: LD_EXP 25
13631: PPUSH
13632: LD_STRING 12p_Bobby
13634: PPUSH
13635: CALL_OW 38
// if Cyrus in tmp then
13639: LD_EXP 26
13643: PUSH
13644: LD_VAR 0 2
13648: IN
13649: IFFALSE 13665
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING 12a_Cyrus
13658: PPUSH
13659: CALL_OW 38
13663: GO 13683
// if Cyrus then
13665: LD_EXP 26
13669: IFFALSE 13683
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13671: LD_EXP 26
13675: PPUSH
13676: LD_STRING 12p_Cyrus
13678: PPUSH
13679: CALL_OW 38
// if Denis in tmp then
13683: LD_EXP 27
13687: PUSH
13688: LD_VAR 0 2
13692: IN
13693: IFFALSE 13707
// SaveCharacters ( Denis , 12a_Denis ) ;
13695: LD_EXP 27
13699: PPUSH
13700: LD_STRING 12a_Denis
13702: PPUSH
13703: CALL_OW 38
// if Brown in tmp then
13707: LD_EXP 28
13711: PUSH
13712: LD_VAR 0 2
13716: IN
13717: IFFALSE 13733
// SaveCharacters ( Brown , 12a_Brown ) else
13719: LD_EXP 28
13723: PPUSH
13724: LD_STRING 12a_Brown
13726: PPUSH
13727: CALL_OW 38
13731: GO 13757
// if Brown in tmp then
13733: LD_EXP 28
13737: PUSH
13738: LD_VAR 0 2
13742: IN
13743: IFFALSE 13757
// SaveCharacters ( Brown , 12p_Brown ) ;
13745: LD_EXP 28
13749: PPUSH
13750: LD_STRING 12p_Brown
13752: PPUSH
13753: CALL_OW 38
// if Gladstone in tmp then
13757: LD_EXP 29
13761: PUSH
13762: LD_VAR 0 2
13766: IN
13767: IFFALSE 13783
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13769: LD_EXP 29
13773: PPUSH
13774: LD_STRING 12a_Gladstone
13776: PPUSH
13777: CALL_OW 38
13781: GO 13801
// if Gladstone then
13783: LD_EXP 29
13787: IFFALSE 13801
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13789: LD_EXP 29
13793: PPUSH
13794: LD_STRING 12p_Gladstone
13796: PPUSH
13797: CALL_OW 38
// if Houten in tmp then
13801: LD_EXP 30
13805: PUSH
13806: LD_VAR 0 2
13810: IN
13811: IFFALSE 13827
// SaveCharacters ( Houten , 12a_Houten ) else
13813: LD_EXP 30
13817: PPUSH
13818: LD_STRING 12a_Houten
13820: PPUSH
13821: CALL_OW 38
13825: GO 13845
// if Houten then
13827: LD_EXP 30
13831: IFFALSE 13845
// SaveCharacters ( Houten , 12p_Houten ) ;
13833: LD_EXP 30
13837: PPUSH
13838: LD_STRING 12p_Houten
13840: PPUSH
13841: CALL_OW 38
// if Cornel in tmp then
13845: LD_EXP 31
13849: PUSH
13850: LD_VAR 0 2
13854: IN
13855: IFFALSE 13871
// SaveCharacters ( Cornel , 12a_Cornell ) else
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING 12a_Cornell
13864: PPUSH
13865: CALL_OW 38
13869: GO 13889
// if Cornel then
13871: LD_EXP 31
13875: IFFALSE 13889
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13877: LD_EXP 31
13881: PPUSH
13882: LD_STRING 12p_Cornell
13884: PPUSH
13885: CALL_OW 38
// if Gary in tmp then
13889: LD_EXP 32
13893: PUSH
13894: LD_VAR 0 2
13898: IN
13899: IFFALSE 13915
// SaveCharacters ( Gary , 12a_Gary ) else
13901: LD_EXP 32
13905: PPUSH
13906: LD_STRING 12a_Gary
13908: PPUSH
13909: CALL_OW 38
13913: GO 13933
// if Gary then
13915: LD_EXP 32
13919: IFFALSE 13933
// SaveCharacters ( Gary , 12p_Gary ) ;
13921: LD_EXP 32
13925: PPUSH
13926: LD_STRING 12p_Gary
13928: PPUSH
13929: CALL_OW 38
// if Frank in tmp then
13933: LD_EXP 33
13937: PUSH
13938: LD_VAR 0 2
13942: IN
13943: IFFALSE 13957
// SaveCharacters ( Frank , 12a_Frank ) ;
13945: LD_EXP 33
13949: PPUSH
13950: LD_STRING 12a_Frank
13952: PPUSH
13953: CALL_OW 38
// if Kikuchi in tmp then
13957: LD_EXP 34
13961: PUSH
13962: LD_VAR 0 2
13966: IN
13967: IFFALSE 13983
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING 12a_Kikuchi
13976: PPUSH
13977: CALL_OW 38
13981: GO 14001
// if Kikuchi then
13983: LD_EXP 34
13987: IFFALSE 14001
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13989: LD_EXP 34
13993: PPUSH
13994: LD_STRING 12p_Kikuchi
13996: PPUSH
13997: CALL_OW 38
// if Simms in tmp then
14001: LD_EXP 35
14005: PUSH
14006: LD_VAR 0 2
14010: IN
14011: IFFALSE 14025
// SaveCharacters ( Simms , 12a_Simms ) ;
14013: LD_EXP 35
14017: PPUSH
14018: LD_STRING 12a_Simms
14020: PPUSH
14021: CALL_OW 38
// if Joan in tmp then
14025: LD_EXP 36
14029: PUSH
14030: LD_VAR 0 2
14034: IN
14035: IFFALSE 14049
// SaveCharacters ( Joan , 12a_Joan ) ;
14037: LD_EXP 36
14041: PPUSH
14042: LD_STRING 12a_Joan
14044: PPUSH
14045: CALL_OW 38
// if DeltaDoctor in tmp then
14049: LD_EXP 37
14053: PUSH
14054: LD_VAR 0 2
14058: IN
14059: IFFALSE 14073
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14061: LD_EXP 37
14065: PPUSH
14066: LD_STRING 12a_DeltaDoctor
14068: PPUSH
14069: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_VAR 0 2
14082: PUSH
14083: LD_EXP 14
14087: PUSH
14088: LD_EXP 15
14092: PUSH
14093: LD_EXP 23
14097: PUSH
14098: LD_EXP 24
14102: PUSH
14103: LD_EXP 25
14107: PUSH
14108: LD_EXP 26
14112: PUSH
14113: LD_EXP 27
14117: PUSH
14118: LD_EXP 28
14122: PUSH
14123: LD_EXP 29
14127: PUSH
14128: LD_EXP 30
14132: PUSH
14133: LD_EXP 31
14137: PUSH
14138: LD_EXP 32
14142: PUSH
14143: LD_EXP 33
14147: PUSH
14148: LD_EXP 34
14152: PUSH
14153: LD_EXP 35
14157: PUSH
14158: LD_EXP 36
14162: PUSH
14163: LD_EXP 37
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: DIFF
14187: ST_TO_ADDR
// if tmp then
14188: LD_VAR 0 2
14192: IFFALSE 14206
// SaveCharacters ( tmp , 12a_others ) ;
14194: LD_VAR 0 2
14198: PPUSH
14199: LD_STRING 12a_others
14201: PPUSH
14202: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_INT 21
14213: PUSH
14214: LD_INT 1
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 23
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 4
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: PUSH
14269: LD_EXP 14
14273: PUSH
14274: LD_EXP 15
14278: PUSH
14279: LD_EXP 23
14283: PUSH
14284: LD_EXP 24
14288: PUSH
14289: LD_EXP 25
14293: PUSH
14294: LD_EXP 26
14298: PUSH
14299: LD_EXP 27
14303: PUSH
14304: LD_EXP 28
14308: PUSH
14309: LD_EXP 29
14313: PUSH
14314: LD_EXP 30
14318: PUSH
14319: LD_EXP 31
14323: PUSH
14324: LD_EXP 32
14328: PUSH
14329: LD_EXP 33
14333: PUSH
14334: LD_EXP 34
14338: PUSH
14339: LD_EXP 35
14343: PUSH
14344: LD_EXP 36
14348: PUSH
14349: LD_EXP 37
14353: PUSH
14354: LD_EXP 16
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: DIFF
14379: ST_TO_ADDR
// if tmp then
14380: LD_VAR 0 2
14384: IFFALSE 14398
// SaveCharacters ( tmp , 12p_others ) ;
14386: LD_VAR 0 2
14390: PPUSH
14391: LD_STRING 12p_others
14393: PPUSH
14394: CALL_OW 38
// YouWin ;
14398: CALL_OW 103
// end ; end_of_file
14402: PPOPN 5
14404: END
// on SailEvent ( event ) do var tmp ;
14405: LD_INT 0
14407: PPUSH
// begin if event = 1 then
14408: LD_VAR 0 1
14412: PUSH
14413: LD_INT 1
14415: EQUAL
14416: IFFALSE 14489
// begin if not mobile_patrol then
14418: LD_EXP 17
14422: NOT
14423: IFFALSE 14427
// exit ;
14425: GO 14489
// tmp := mobile_patrol [ mobile_patrol ] ;
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: LD_EXP 17
14436: PUSH
14437: LD_EXP 17
14441: ARRAY
14442: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14443: LD_ADDR_EXP 17
14447: PUSH
14448: LD_EXP 17
14452: PPUSH
14453: LD_EXP 17
14457: PPUSH
14458: CALL_OW 3
14462: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14463: LD_VAR 0 2
14467: PPUSH
14468: LD_EXP 18
14472: PUSH
14473: LD_EXP 17
14477: PUSH
14478: LD_INT 1
14480: PLUS
14481: ARRAY
14482: PPUSH
14483: EMPTY
14484: PPUSH
14485: CALL 6669 0 3
// end ; end ;
14489: PPOPN 2
14491: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14492: LD_VAR 0 1
14496: PUSH
14497: LD_EXP 14
14501: EQUAL
14502: IFFALSE 14511
// YouLost ( JMM ) ;
14504: LD_STRING JMM
14506: PPUSH
14507: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 255
14520: PUSH
14521: LD_INT 7
14523: EQUAL
14524: PUSH
14525: LD_VAR 0 1
14529: PPUSH
14530: CALL_OW 264
14534: PUSH
14535: LD_INT 12
14537: EQUAL
14538: AND
14539: IFFALSE 14548
// YouLost ( Artifact ) ;
14541: LD_STRING Artifact
14543: PPUSH
14544: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14548: LD_VAR 0 1
14552: PPUSH
14553: CALL_OW 255
14557: PUSH
14558: LD_INT 7
14560: EQUAL
14561: PUSH
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 247
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: AND
14576: PUSH
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 15
14586: EQUAL
14587: OR
14588: IFFALSE 14604
// team_kill_counter := team_kill_counter + 1 ;
14590: LD_ADDR_EXP 9
14594: PUSH
14595: LD_EXP 9
14599: PUSH
14600: LD_INT 1
14602: PLUS
14603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// friends_kill_counter := friends_kill_counter + 1 ;
14634: LD_ADDR_EXP 8
14638: PUSH
14639: LD_EXP 8
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 255
14657: PUSH
14658: LD_INT 1
14660: NONEQUAL
14661: IFFALSE 14665
// exit ;
14663: GO 14742
// if GetControl ( un ) = control_remote then
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 263
14674: PUSH
14675: LD_INT 2
14677: EQUAL
14678: IFFALSE 14696
// defenders := defenders diff un ;
14680: LD_ADDR_EXP 20
14684: PUSH
14685: LD_EXP 20
14689: PUSH
14690: LD_VAR 0 1
14694: DIFF
14695: ST_TO_ADDR
// if not un in defenders then
14696: LD_VAR 0 1
14700: PUSH
14701: LD_EXP 20
14705: IN
14706: NOT
14707: IFFALSE 14742
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14709: LD_ADDR_EXP 21
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 250
14723: PUSH
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 251
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: ST_TO_ADDR
// Defend ;
14738: CALL 2791 0 0
// end ; end ;
14742: PPOPN 1
14744: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 255
14754: PUSH
14755: LD_INT 1
14757: NONEQUAL
14758: IFFALSE 14762
// exit ;
14760: GO 14786
// if GetControl ( veh ) = control_remote then
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 263
14771: PUSH
14772: LD_INT 2
14774: EQUAL
14775: IFFALSE 14786
// Connect ( veh ) ;
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL 42083 0 1
// end ;
14786: PPOPN 2
14788: END
// on UnitGoesToRed ( un ) do var i , veh ;
14789: LD_INT 0
14791: PPUSH
14792: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 1
14805: EQUAL
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 263
14816: PUSH
14817: LD_INT 2
14819: EQUAL
14820: AND
14821: IFFALSE 14832
// ComUnlink ( un ) ;
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 136
// if un = ambar0 then
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 18
14839: EQUAL
14840: IFFALSE 14950
// begin uc_side := 1 ;
14842: LD_ADDR_OWVAR 20
14846: PUSH
14847: LD_INT 1
14849: ST_TO_ADDR
// uc_nation := 1 ;
14850: LD_ADDR_OWVAR 21
14854: PUSH
14855: LD_INT 1
14857: ST_TO_ADDR
// for i = 1 to 6 do
14858: LD_ADDR_VAR 0 2
14862: PUSH
14863: DOUBLE
14864: LD_INT 1
14866: DEC
14867: ST_TO_ADDR
14868: LD_INT 6
14870: PUSH
14871: FOR_TO
14872: IFFALSE 14948
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14874: LD_INT 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: LD_INT 3
14882: PPUSH
14883: LD_INT 4
14885: PPUSH
14886: LD_INT 100
14888: PPUSH
14889: CALL 38990 0 5
// veh := CreateVehicle ;
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: CALL_OW 45
14902: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_INT 1
14910: PPUSH
14911: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14915: LD_VAR 0 3
14919: PPUSH
14920: LD_INT 25
14922: PPUSH
14923: LD_INT 0
14925: PPUSH
14926: CALL_OW 49
// defenders := defenders ^ veh ;
14930: LD_ADDR_EXP 20
14934: PUSH
14935: LD_EXP 20
14939: PUSH
14940: LD_VAR 0 3
14944: ADD
14945: ST_TO_ADDR
// end ;
14946: GO 14871
14948: POP
14949: POP
// end ; end ;
14950: PPOPN 3
14952: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14953: LD_VAR 0 2
14957: PUSH
14958: LD_EXP 16
14962: EQUAL
14963: IFFALSE 14974
// RemoveUnit ( Powell ) ;
14965: LD_EXP 16
14969: PPUSH
14970: CALL_OW 64
// end ;
14974: PPOPN 2
14976: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: CALL 29592 0 1
// end ; end_of_file
14986: PPOPN 1
14988: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14989: LD_INT 0
14991: PPUSH
// ar_miner := 81 ;
14992: LD_ADDR_EXP 45
14996: PUSH
14997: LD_INT 81
14999: ST_TO_ADDR
// ar_crane := 88 ;
15000: LD_ADDR_EXP 44
15004: PUSH
15005: LD_INT 88
15007: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15008: LD_ADDR_EXP 39
15012: PUSH
15013: LD_INT 89
15015: ST_TO_ADDR
// us_hack := 99 ;
15016: LD_ADDR_EXP 40
15020: PUSH
15021: LD_INT 99
15023: ST_TO_ADDR
// us_artillery := 97 ;
15024: LD_ADDR_EXP 41
15028: PUSH
15029: LD_INT 97
15031: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15032: LD_ADDR_EXP 42
15036: PUSH
15037: LD_INT 91
15039: ST_TO_ADDR
// ar_mortar := 92 ;
15040: LD_ADDR_EXP 43
15044: PUSH
15045: LD_INT 92
15047: ST_TO_ADDR
// ru_radar := 98 ;
15048: LD_ADDR_EXP 38
15052: PUSH
15053: LD_INT 98
15055: ST_TO_ADDR
// tech_Artillery := 80 ;
15056: LD_ADDR_EXP 46
15060: PUSH
15061: LD_INT 80
15063: ST_TO_ADDR
// tech_RadMat := 81 ;
15064: LD_ADDR_EXP 47
15068: PUSH
15069: LD_INT 81
15071: ST_TO_ADDR
// tech_BasicTools := 82 ;
15072: LD_ADDR_EXP 48
15076: PUSH
15077: LD_INT 82
15079: ST_TO_ADDR
// tech_Cargo := 83 ;
15080: LD_ADDR_EXP 49
15084: PUSH
15085: LD_INT 83
15087: ST_TO_ADDR
// tech_Track := 84 ;
15088: LD_ADDR_EXP 50
15092: PUSH
15093: LD_INT 84
15095: ST_TO_ADDR
// tech_Crane := 85 ;
15096: LD_ADDR_EXP 51
15100: PUSH
15101: LD_INT 85
15103: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15104: LD_ADDR_EXP 52
15108: PUSH
15109: LD_INT 86
15111: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15112: LD_ADDR_EXP 53
15116: PUSH
15117: LD_INT 87
15119: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
15120: LD_ADDR_EXP 54
15124: PUSH
15125: LD_INT 88
15127: ST_TO_ADDR
// class_mastodont := 31 ;
15128: LD_ADDR_EXP 55
15132: PUSH
15133: LD_INT 31
15135: ST_TO_ADDR
// class_horse := 21 ;
15136: LD_ADDR_EXP 56
15140: PUSH
15141: LD_INT 21
15143: ST_TO_ADDR
// end ;
15144: LD_VAR 0 1
15148: RET
// every 1 do
15149: GO 15151
15151: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15152: CALL 14989 0 0
15156: END
// every 0 0$1 do
15157: GO 15159
15159: DISABLE
// begin enable ;
15160: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15161: LD_STRING updateTimer(
15163: PUSH
15164: LD_OWVAR 1
15168: STR
15169: PUSH
15170: LD_STRING );
15172: STR
15173: PPUSH
15174: CALL_OW 559
// end ;
15178: END
// on MapStart ( p ) do begin if streamModeActive then
15179: LD_EXP 57
15183: IFFALSE 15192
// DefineStreamItems ( true ) ;
15185: LD_INT 1
15187: PPUSH
15188: CALL 16840 0 1
// UpdateFactoryWaypoints ( ) ;
15192: CALL 30424 0 0
// end ;
15196: PPOPN 1
15198: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15199: LD_INT 0
15201: PPUSH
// if p2 = 100 then
15202: LD_VAR 0 2
15206: PUSH
15207: LD_INT 100
15209: EQUAL
15210: IFFALSE 16213
// begin if not StreamModeActive then
15212: LD_EXP 57
15216: NOT
15217: IFFALSE 15227
// StreamModeActive := true ;
15219: LD_ADDR_EXP 57
15223: PUSH
15224: LD_INT 1
15226: ST_TO_ADDR
// if p3 = 0 then
15227: LD_VAR 0 3
15231: PUSH
15232: LD_INT 0
15234: EQUAL
15235: IFFALSE 15241
// InitStreamMode ;
15237: CALL 16376 0 0
// if p3 = 1 then
15241: LD_VAR 0 3
15245: PUSH
15246: LD_INT 1
15248: EQUAL
15249: IFFALSE 15259
// sRocket := true ;
15251: LD_ADDR_EXP 62
15255: PUSH
15256: LD_INT 1
15258: ST_TO_ADDR
// if p3 = 2 then
15259: LD_VAR 0 3
15263: PUSH
15264: LD_INT 2
15266: EQUAL
15267: IFFALSE 15277
// sSpeed := true ;
15269: LD_ADDR_EXP 61
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// if p3 = 3 then
15277: LD_VAR 0 3
15281: PUSH
15282: LD_INT 3
15284: EQUAL
15285: IFFALSE 15295
// sEngine := true ;
15287: LD_ADDR_EXP 63
15291: PUSH
15292: LD_INT 1
15294: ST_TO_ADDR
// if p3 = 4 then
15295: LD_VAR 0 3
15299: PUSH
15300: LD_INT 4
15302: EQUAL
15303: IFFALSE 15313
// sSpec := true ;
15305: LD_ADDR_EXP 60
15309: PUSH
15310: LD_INT 1
15312: ST_TO_ADDR
// if p3 = 5 then
15313: LD_VAR 0 3
15317: PUSH
15318: LD_INT 5
15320: EQUAL
15321: IFFALSE 15331
// sLevel := true ;
15323: LD_ADDR_EXP 64
15327: PUSH
15328: LD_INT 1
15330: ST_TO_ADDR
// if p3 = 6 then
15331: LD_VAR 0 3
15335: PUSH
15336: LD_INT 6
15338: EQUAL
15339: IFFALSE 15349
// sArmoury := true ;
15341: LD_ADDR_EXP 65
15345: PUSH
15346: LD_INT 1
15348: ST_TO_ADDR
// if p3 = 7 then
15349: LD_VAR 0 3
15353: PUSH
15354: LD_INT 7
15356: EQUAL
15357: IFFALSE 15367
// sRadar := true ;
15359: LD_ADDR_EXP 66
15363: PUSH
15364: LD_INT 1
15366: ST_TO_ADDR
// if p3 = 8 then
15367: LD_VAR 0 3
15371: PUSH
15372: LD_INT 8
15374: EQUAL
15375: IFFALSE 15385
// sBunker := true ;
15377: LD_ADDR_EXP 67
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// if p3 = 9 then
15385: LD_VAR 0 3
15389: PUSH
15390: LD_INT 9
15392: EQUAL
15393: IFFALSE 15403
// sHack := true ;
15395: LD_ADDR_EXP 68
15399: PUSH
15400: LD_INT 1
15402: ST_TO_ADDR
// if p3 = 10 then
15403: LD_VAR 0 3
15407: PUSH
15408: LD_INT 10
15410: EQUAL
15411: IFFALSE 15421
// sFire := true ;
15413: LD_ADDR_EXP 69
15417: PUSH
15418: LD_INT 1
15420: ST_TO_ADDR
// if p3 = 11 then
15421: LD_VAR 0 3
15425: PUSH
15426: LD_INT 11
15428: EQUAL
15429: IFFALSE 15439
// sRefresh := true ;
15431: LD_ADDR_EXP 70
15435: PUSH
15436: LD_INT 1
15438: ST_TO_ADDR
// if p3 = 12 then
15439: LD_VAR 0 3
15443: PUSH
15444: LD_INT 12
15446: EQUAL
15447: IFFALSE 15457
// sExp := true ;
15449: LD_ADDR_EXP 71
15453: PUSH
15454: LD_INT 1
15456: ST_TO_ADDR
// if p3 = 13 then
15457: LD_VAR 0 3
15461: PUSH
15462: LD_INT 13
15464: EQUAL
15465: IFFALSE 15475
// sDepot := true ;
15467: LD_ADDR_EXP 72
15471: PUSH
15472: LD_INT 1
15474: ST_TO_ADDR
// if p3 = 14 then
15475: LD_VAR 0 3
15479: PUSH
15480: LD_INT 14
15482: EQUAL
15483: IFFALSE 15493
// sFlag := true ;
15485: LD_ADDR_EXP 73
15489: PUSH
15490: LD_INT 1
15492: ST_TO_ADDR
// if p3 = 15 then
15493: LD_VAR 0 3
15497: PUSH
15498: LD_INT 15
15500: EQUAL
15501: IFFALSE 15511
// sKamikadze := true ;
15503: LD_ADDR_EXP 81
15507: PUSH
15508: LD_INT 1
15510: ST_TO_ADDR
// if p3 = 16 then
15511: LD_VAR 0 3
15515: PUSH
15516: LD_INT 16
15518: EQUAL
15519: IFFALSE 15529
// sTroll := true ;
15521: LD_ADDR_EXP 82
15525: PUSH
15526: LD_INT 1
15528: ST_TO_ADDR
// if p3 = 17 then
15529: LD_VAR 0 3
15533: PUSH
15534: LD_INT 17
15536: EQUAL
15537: IFFALSE 15547
// sSlow := true ;
15539: LD_ADDR_EXP 83
15543: PUSH
15544: LD_INT 1
15546: ST_TO_ADDR
// if p3 = 18 then
15547: LD_VAR 0 3
15551: PUSH
15552: LD_INT 18
15554: EQUAL
15555: IFFALSE 15565
// sLack := true ;
15557: LD_ADDR_EXP 84
15561: PUSH
15562: LD_INT 1
15564: ST_TO_ADDR
// if p3 = 19 then
15565: LD_VAR 0 3
15569: PUSH
15570: LD_INT 19
15572: EQUAL
15573: IFFALSE 15583
// sTank := true ;
15575: LD_ADDR_EXP 86
15579: PUSH
15580: LD_INT 1
15582: ST_TO_ADDR
// if p3 = 20 then
15583: LD_VAR 0 3
15587: PUSH
15588: LD_INT 20
15590: EQUAL
15591: IFFALSE 15601
// sRemote := true ;
15593: LD_ADDR_EXP 87
15597: PUSH
15598: LD_INT 1
15600: ST_TO_ADDR
// if p3 = 21 then
15601: LD_VAR 0 3
15605: PUSH
15606: LD_INT 21
15608: EQUAL
15609: IFFALSE 15619
// sPowell := true ;
15611: LD_ADDR_EXP 88
15615: PUSH
15616: LD_INT 1
15618: ST_TO_ADDR
// if p3 = 22 then
15619: LD_VAR 0 3
15623: PUSH
15624: LD_INT 22
15626: EQUAL
15627: IFFALSE 15637
// sTeleport := true ;
15629: LD_ADDR_EXP 91
15633: PUSH
15634: LD_INT 1
15636: ST_TO_ADDR
// if p3 = 23 then
15637: LD_VAR 0 3
15641: PUSH
15642: LD_INT 23
15644: EQUAL
15645: IFFALSE 15655
// sOilTower := true ;
15647: LD_ADDR_EXP 93
15651: PUSH
15652: LD_INT 1
15654: ST_TO_ADDR
// if p3 = 24 then
15655: LD_VAR 0 3
15659: PUSH
15660: LD_INT 24
15662: EQUAL
15663: IFFALSE 15673
// sShovel := true ;
15665: LD_ADDR_EXP 94
15669: PUSH
15670: LD_INT 1
15672: ST_TO_ADDR
// if p3 = 25 then
15673: LD_VAR 0 3
15677: PUSH
15678: LD_INT 25
15680: EQUAL
15681: IFFALSE 15691
// sSheik := true ;
15683: LD_ADDR_EXP 95
15687: PUSH
15688: LD_INT 1
15690: ST_TO_ADDR
// if p3 = 26 then
15691: LD_VAR 0 3
15695: PUSH
15696: LD_INT 26
15698: EQUAL
15699: IFFALSE 15709
// sEarthquake := true ;
15701: LD_ADDR_EXP 97
15705: PUSH
15706: LD_INT 1
15708: ST_TO_ADDR
// if p3 = 27 then
15709: LD_VAR 0 3
15713: PUSH
15714: LD_INT 27
15716: EQUAL
15717: IFFALSE 15727
// sAI := true ;
15719: LD_ADDR_EXP 98
15723: PUSH
15724: LD_INT 1
15726: ST_TO_ADDR
// if p3 = 28 then
15727: LD_VAR 0 3
15731: PUSH
15732: LD_INT 28
15734: EQUAL
15735: IFFALSE 15745
// sCargo := true ;
15737: LD_ADDR_EXP 101
15741: PUSH
15742: LD_INT 1
15744: ST_TO_ADDR
// if p3 = 29 then
15745: LD_VAR 0 3
15749: PUSH
15750: LD_INT 29
15752: EQUAL
15753: IFFALSE 15763
// sDLaser := true ;
15755: LD_ADDR_EXP 102
15759: PUSH
15760: LD_INT 1
15762: ST_TO_ADDR
// if p3 = 30 then
15763: LD_VAR 0 3
15767: PUSH
15768: LD_INT 30
15770: EQUAL
15771: IFFALSE 15781
// sExchange := true ;
15773: LD_ADDR_EXP 103
15777: PUSH
15778: LD_INT 1
15780: ST_TO_ADDR
// if p3 = 31 then
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 31
15788: EQUAL
15789: IFFALSE 15799
// sFac := true ;
15791: LD_ADDR_EXP 104
15795: PUSH
15796: LD_INT 1
15798: ST_TO_ADDR
// if p3 = 32 then
15799: LD_VAR 0 3
15803: PUSH
15804: LD_INT 32
15806: EQUAL
15807: IFFALSE 15817
// sPower := true ;
15809: LD_ADDR_EXP 105
15813: PUSH
15814: LD_INT 1
15816: ST_TO_ADDR
// if p3 = 33 then
15817: LD_VAR 0 3
15821: PUSH
15822: LD_INT 33
15824: EQUAL
15825: IFFALSE 15835
// sRandom := true ;
15827: LD_ADDR_EXP 106
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if p3 = 34 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 34
15842: EQUAL
15843: IFFALSE 15853
// sShield := true ;
15845: LD_ADDR_EXP 107
15849: PUSH
15850: LD_INT 1
15852: ST_TO_ADDR
// if p3 = 35 then
15853: LD_VAR 0 3
15857: PUSH
15858: LD_INT 35
15860: EQUAL
15861: IFFALSE 15871
// sTime := true ;
15863: LD_ADDR_EXP 108
15867: PUSH
15868: LD_INT 1
15870: ST_TO_ADDR
// if p3 = 36 then
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 36
15878: EQUAL
15879: IFFALSE 15889
// sTools := true ;
15881: LD_ADDR_EXP 109
15885: PUSH
15886: LD_INT 1
15888: ST_TO_ADDR
// if p3 = 101 then
15889: LD_VAR 0 3
15893: PUSH
15894: LD_INT 101
15896: EQUAL
15897: IFFALSE 15907
// sSold := true ;
15899: LD_ADDR_EXP 74
15903: PUSH
15904: LD_INT 1
15906: ST_TO_ADDR
// if p3 = 102 then
15907: LD_VAR 0 3
15911: PUSH
15912: LD_INT 102
15914: EQUAL
15915: IFFALSE 15925
// sDiff := true ;
15917: LD_ADDR_EXP 75
15921: PUSH
15922: LD_INT 1
15924: ST_TO_ADDR
// if p3 = 103 then
15925: LD_VAR 0 3
15929: PUSH
15930: LD_INT 103
15932: EQUAL
15933: IFFALSE 15943
// sFog := true ;
15935: LD_ADDR_EXP 78
15939: PUSH
15940: LD_INT 1
15942: ST_TO_ADDR
// if p3 = 104 then
15943: LD_VAR 0 3
15947: PUSH
15948: LD_INT 104
15950: EQUAL
15951: IFFALSE 15961
// sReset := true ;
15953: LD_ADDR_EXP 79
15957: PUSH
15958: LD_INT 1
15960: ST_TO_ADDR
// if p3 = 105 then
15961: LD_VAR 0 3
15965: PUSH
15966: LD_INT 105
15968: EQUAL
15969: IFFALSE 15979
// sSun := true ;
15971: LD_ADDR_EXP 80
15975: PUSH
15976: LD_INT 1
15978: ST_TO_ADDR
// if p3 = 106 then
15979: LD_VAR 0 3
15983: PUSH
15984: LD_INT 106
15986: EQUAL
15987: IFFALSE 15997
// sTiger := true ;
15989: LD_ADDR_EXP 76
15993: PUSH
15994: LD_INT 1
15996: ST_TO_ADDR
// if p3 = 107 then
15997: LD_VAR 0 3
16001: PUSH
16002: LD_INT 107
16004: EQUAL
16005: IFFALSE 16015
// sBomb := true ;
16007: LD_ADDR_EXP 77
16011: PUSH
16012: LD_INT 1
16014: ST_TO_ADDR
// if p3 = 108 then
16015: LD_VAR 0 3
16019: PUSH
16020: LD_INT 108
16022: EQUAL
16023: IFFALSE 16033
// sWound := true ;
16025: LD_ADDR_EXP 85
16029: PUSH
16030: LD_INT 1
16032: ST_TO_ADDR
// if p3 = 109 then
16033: LD_VAR 0 3
16037: PUSH
16038: LD_INT 109
16040: EQUAL
16041: IFFALSE 16051
// sBetray := true ;
16043: LD_ADDR_EXP 89
16047: PUSH
16048: LD_INT 1
16050: ST_TO_ADDR
// if p3 = 110 then
16051: LD_VAR 0 3
16055: PUSH
16056: LD_INT 110
16058: EQUAL
16059: IFFALSE 16069
// sContamin := true ;
16061: LD_ADDR_EXP 90
16065: PUSH
16066: LD_INT 1
16068: ST_TO_ADDR
// if p3 = 111 then
16069: LD_VAR 0 3
16073: PUSH
16074: LD_INT 111
16076: EQUAL
16077: IFFALSE 16087
// sOil := true ;
16079: LD_ADDR_EXP 92
16083: PUSH
16084: LD_INT 1
16086: ST_TO_ADDR
// if p3 = 112 then
16087: LD_VAR 0 3
16091: PUSH
16092: LD_INT 112
16094: EQUAL
16095: IFFALSE 16105
// sStu := true ;
16097: LD_ADDR_EXP 96
16101: PUSH
16102: LD_INT 1
16104: ST_TO_ADDR
// if p3 = 113 then
16105: LD_VAR 0 3
16109: PUSH
16110: LD_INT 113
16112: EQUAL
16113: IFFALSE 16123
// sBazooka := true ;
16115: LD_ADDR_EXP 99
16119: PUSH
16120: LD_INT 1
16122: ST_TO_ADDR
// if p3 = 114 then
16123: LD_VAR 0 3
16127: PUSH
16128: LD_INT 114
16130: EQUAL
16131: IFFALSE 16141
// sMortar := true ;
16133: LD_ADDR_EXP 100
16137: PUSH
16138: LD_INT 1
16140: ST_TO_ADDR
// if p3 = 115 then
16141: LD_VAR 0 3
16145: PUSH
16146: LD_INT 115
16148: EQUAL
16149: IFFALSE 16159
// sRanger := true ;
16151: LD_ADDR_EXP 110
16155: PUSH
16156: LD_INT 1
16158: ST_TO_ADDR
// if p3 = 116 then
16159: LD_VAR 0 3
16163: PUSH
16164: LD_INT 116
16166: EQUAL
16167: IFFALSE 16177
// sComputer := true ;
16169: LD_ADDR_EXP 111
16173: PUSH
16174: LD_INT 1
16176: ST_TO_ADDR
// if p3 = 117 then
16177: LD_VAR 0 3
16181: PUSH
16182: LD_INT 117
16184: EQUAL
16185: IFFALSE 16195
// s30 := true ;
16187: LD_ADDR_EXP 112
16191: PUSH
16192: LD_INT 1
16194: ST_TO_ADDR
// if p3 = 118 then
16195: LD_VAR 0 3
16199: PUSH
16200: LD_INT 118
16202: EQUAL
16203: IFFALSE 16213
// s60 := true ;
16205: LD_ADDR_EXP 113
16209: PUSH
16210: LD_INT 1
16212: ST_TO_ADDR
// end ; if p2 = 101 then
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 101
16220: EQUAL
16221: IFFALSE 16349
// begin case p3 of 1 :
16223: LD_VAR 0 3
16227: PUSH
16228: LD_INT 1
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16243
16236: POP
// hHackUnlimitedResources ; 2 :
16237: CALL 28447 0 0
16241: GO 16349
16243: LD_INT 2
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16258
16251: POP
// hHackSetLevel10 ; 3 :
16252: CALL 28580 0 0
16256: GO 16349
16258: LD_INT 3
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16266
16264: GO 16273
16266: POP
// hHackSetLevel10YourUnits ; 4 :
16267: CALL 28665 0 0
16271: GO 16349
16273: LD_INT 4
16275: DOUBLE
16276: EQUAL
16277: IFTRUE 16281
16279: GO 16288
16281: POP
// hHackInvincible ; 5 :
16282: CALL 29113 0 0
16286: GO 16349
16288: LD_INT 5
16290: DOUBLE
16291: EQUAL
16292: IFTRUE 16296
16294: GO 16303
16296: POP
// hHackInvisible ; 6 :
16297: CALL 29224 0 0
16301: GO 16349
16303: LD_INT 6
16305: DOUBLE
16306: EQUAL
16307: IFTRUE 16311
16309: GO 16318
16311: POP
// hHackChangeYourSide ; 7 :
16312: CALL 29281 0 0
16316: GO 16349
16318: LD_INT 7
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16333
16326: POP
// hHackChangeUnitSide ; 8 :
16327: CALL 29323 0 0
16331: GO 16349
16333: LD_INT 8
16335: DOUBLE
16336: EQUAL
16337: IFTRUE 16341
16339: GO 16348
16341: POP
// hHackFog ; end ;
16342: CALL 29424 0 0
16346: GO 16349
16348: POP
// end ; end ;
16349: LD_VAR 0 7
16353: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16354: GO 16356
16356: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16357: LD_STRING initStreamRollete();
16359: PPUSH
16360: CALL_OW 559
// InitStreamMode ;
16364: CALL 16376 0 0
// DefineStreamItems ( false ) ;
16368: LD_INT 0
16370: PPUSH
16371: CALL 16840 0 1
// end ;
16375: END
// function InitStreamMode ; begin
16376: LD_INT 0
16378: PPUSH
// streamModeActive := false ;
16379: LD_ADDR_EXP 57
16383: PUSH
16384: LD_INT 0
16386: ST_TO_ADDR
// normalCounter := 36 ;
16387: LD_ADDR_EXP 58
16391: PUSH
16392: LD_INT 36
16394: ST_TO_ADDR
// hardcoreCounter := 18 ;
16395: LD_ADDR_EXP 59
16399: PUSH
16400: LD_INT 18
16402: ST_TO_ADDR
// sRocket := false ;
16403: LD_ADDR_EXP 62
16407: PUSH
16408: LD_INT 0
16410: ST_TO_ADDR
// sSpeed := false ;
16411: LD_ADDR_EXP 61
16415: PUSH
16416: LD_INT 0
16418: ST_TO_ADDR
// sEngine := false ;
16419: LD_ADDR_EXP 63
16423: PUSH
16424: LD_INT 0
16426: ST_TO_ADDR
// sSpec := false ;
16427: LD_ADDR_EXP 60
16431: PUSH
16432: LD_INT 0
16434: ST_TO_ADDR
// sLevel := false ;
16435: LD_ADDR_EXP 64
16439: PUSH
16440: LD_INT 0
16442: ST_TO_ADDR
// sArmoury := false ;
16443: LD_ADDR_EXP 65
16447: PUSH
16448: LD_INT 0
16450: ST_TO_ADDR
// sRadar := false ;
16451: LD_ADDR_EXP 66
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// sBunker := false ;
16459: LD_ADDR_EXP 67
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// sHack := false ;
16467: LD_ADDR_EXP 68
16471: PUSH
16472: LD_INT 0
16474: ST_TO_ADDR
// sFire := false ;
16475: LD_ADDR_EXP 69
16479: PUSH
16480: LD_INT 0
16482: ST_TO_ADDR
// sRefresh := false ;
16483: LD_ADDR_EXP 70
16487: PUSH
16488: LD_INT 0
16490: ST_TO_ADDR
// sExp := false ;
16491: LD_ADDR_EXP 71
16495: PUSH
16496: LD_INT 0
16498: ST_TO_ADDR
// sDepot := false ;
16499: LD_ADDR_EXP 72
16503: PUSH
16504: LD_INT 0
16506: ST_TO_ADDR
// sFlag := false ;
16507: LD_ADDR_EXP 73
16511: PUSH
16512: LD_INT 0
16514: ST_TO_ADDR
// sKamikadze := false ;
16515: LD_ADDR_EXP 81
16519: PUSH
16520: LD_INT 0
16522: ST_TO_ADDR
// sTroll := false ;
16523: LD_ADDR_EXP 82
16527: PUSH
16528: LD_INT 0
16530: ST_TO_ADDR
// sSlow := false ;
16531: LD_ADDR_EXP 83
16535: PUSH
16536: LD_INT 0
16538: ST_TO_ADDR
// sLack := false ;
16539: LD_ADDR_EXP 84
16543: PUSH
16544: LD_INT 0
16546: ST_TO_ADDR
// sTank := false ;
16547: LD_ADDR_EXP 86
16551: PUSH
16552: LD_INT 0
16554: ST_TO_ADDR
// sRemote := false ;
16555: LD_ADDR_EXP 87
16559: PUSH
16560: LD_INT 0
16562: ST_TO_ADDR
// sPowell := false ;
16563: LD_ADDR_EXP 88
16567: PUSH
16568: LD_INT 0
16570: ST_TO_ADDR
// sTeleport := false ;
16571: LD_ADDR_EXP 91
16575: PUSH
16576: LD_INT 0
16578: ST_TO_ADDR
// sOilTower := false ;
16579: LD_ADDR_EXP 93
16583: PUSH
16584: LD_INT 0
16586: ST_TO_ADDR
// sShovel := false ;
16587: LD_ADDR_EXP 94
16591: PUSH
16592: LD_INT 0
16594: ST_TO_ADDR
// sSheik := false ;
16595: LD_ADDR_EXP 95
16599: PUSH
16600: LD_INT 0
16602: ST_TO_ADDR
// sEarthquake := false ;
16603: LD_ADDR_EXP 97
16607: PUSH
16608: LD_INT 0
16610: ST_TO_ADDR
// sAI := false ;
16611: LD_ADDR_EXP 98
16615: PUSH
16616: LD_INT 0
16618: ST_TO_ADDR
// sCargo := false ;
16619: LD_ADDR_EXP 101
16623: PUSH
16624: LD_INT 0
16626: ST_TO_ADDR
// sDLaser := false ;
16627: LD_ADDR_EXP 102
16631: PUSH
16632: LD_INT 0
16634: ST_TO_ADDR
// sExchange := false ;
16635: LD_ADDR_EXP 103
16639: PUSH
16640: LD_INT 0
16642: ST_TO_ADDR
// sFac := false ;
16643: LD_ADDR_EXP 104
16647: PUSH
16648: LD_INT 0
16650: ST_TO_ADDR
// sPower := false ;
16651: LD_ADDR_EXP 105
16655: PUSH
16656: LD_INT 0
16658: ST_TO_ADDR
// sRandom := false ;
16659: LD_ADDR_EXP 106
16663: PUSH
16664: LD_INT 0
16666: ST_TO_ADDR
// sShield := false ;
16667: LD_ADDR_EXP 107
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
// sTime := false ;
16675: LD_ADDR_EXP 108
16679: PUSH
16680: LD_INT 0
16682: ST_TO_ADDR
// sTools := false ;
16683: LD_ADDR_EXP 109
16687: PUSH
16688: LD_INT 0
16690: ST_TO_ADDR
// sSold := false ;
16691: LD_ADDR_EXP 74
16695: PUSH
16696: LD_INT 0
16698: ST_TO_ADDR
// sDiff := false ;
16699: LD_ADDR_EXP 75
16703: PUSH
16704: LD_INT 0
16706: ST_TO_ADDR
// sFog := false ;
16707: LD_ADDR_EXP 78
16711: PUSH
16712: LD_INT 0
16714: ST_TO_ADDR
// sReset := false ;
16715: LD_ADDR_EXP 79
16719: PUSH
16720: LD_INT 0
16722: ST_TO_ADDR
// sSun := false ;
16723: LD_ADDR_EXP 80
16727: PUSH
16728: LD_INT 0
16730: ST_TO_ADDR
// sTiger := false ;
16731: LD_ADDR_EXP 76
16735: PUSH
16736: LD_INT 0
16738: ST_TO_ADDR
// sBomb := false ;
16739: LD_ADDR_EXP 77
16743: PUSH
16744: LD_INT 0
16746: ST_TO_ADDR
// sWound := false ;
16747: LD_ADDR_EXP 85
16751: PUSH
16752: LD_INT 0
16754: ST_TO_ADDR
// sBetray := false ;
16755: LD_ADDR_EXP 89
16759: PUSH
16760: LD_INT 0
16762: ST_TO_ADDR
// sContamin := false ;
16763: LD_ADDR_EXP 90
16767: PUSH
16768: LD_INT 0
16770: ST_TO_ADDR
// sOil := false ;
16771: LD_ADDR_EXP 92
16775: PUSH
16776: LD_INT 0
16778: ST_TO_ADDR
// sStu := false ;
16779: LD_ADDR_EXP 96
16783: PUSH
16784: LD_INT 0
16786: ST_TO_ADDR
// sBazooka := false ;
16787: LD_ADDR_EXP 99
16791: PUSH
16792: LD_INT 0
16794: ST_TO_ADDR
// sMortar := false ;
16795: LD_ADDR_EXP 100
16799: PUSH
16800: LD_INT 0
16802: ST_TO_ADDR
// sRanger := false ;
16803: LD_ADDR_EXP 110
16807: PUSH
16808: LD_INT 0
16810: ST_TO_ADDR
// sComputer := false ;
16811: LD_ADDR_EXP 111
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// s30 := false ;
16819: LD_ADDR_EXP 112
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// s60 := false ;
16827: LD_ADDR_EXP 113
16831: PUSH
16832: LD_INT 0
16834: ST_TO_ADDR
// end ;
16835: LD_VAR 0 1
16839: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16840: LD_INT 0
16842: PPUSH
16843: PPUSH
16844: PPUSH
16845: PPUSH
16846: PPUSH
16847: PPUSH
16848: PPUSH
// result := [ ] ;
16849: LD_ADDR_VAR 0 2
16853: PUSH
16854: EMPTY
16855: ST_TO_ADDR
// if campaign_id = 1 then
16856: LD_OWVAR 69
16860: PUSH
16861: LD_INT 1
16863: EQUAL
16864: IFFALSE 20030
// begin case mission_number of 1 :
16866: LD_OWVAR 70
16870: PUSH
16871: LD_INT 1
16873: DOUBLE
16874: EQUAL
16875: IFTRUE 16879
16877: GO 16955
16879: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16880: LD_ADDR_VAR 0 2
16884: PUSH
16885: LD_INT 2
16887: PUSH
16888: LD_INT 4
16890: PUSH
16891: LD_INT 11
16893: PUSH
16894: LD_INT 12
16896: PUSH
16897: LD_INT 15
16899: PUSH
16900: LD_INT 16
16902: PUSH
16903: LD_INT 22
16905: PUSH
16906: LD_INT 23
16908: PUSH
16909: LD_INT 26
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 101
16925: PUSH
16926: LD_INT 102
16928: PUSH
16929: LD_INT 106
16931: PUSH
16932: LD_INT 116
16934: PUSH
16935: LD_INT 117
16937: PUSH
16938: LD_INT 118
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: ST_TO_ADDR
16953: GO 20028
16955: LD_INT 2
16957: DOUBLE
16958: EQUAL
16959: IFTRUE 16963
16961: GO 17047
16963: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16964: LD_ADDR_VAR 0 2
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: LD_INT 4
16974: PUSH
16975: LD_INT 11
16977: PUSH
16978: LD_INT 12
16980: PUSH
16981: LD_INT 15
16983: PUSH
16984: LD_INT 16
16986: PUSH
16987: LD_INT 22
16989: PUSH
16990: LD_INT 23
16992: PUSH
16993: LD_INT 26
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 101
17009: PUSH
17010: LD_INT 102
17012: PUSH
17013: LD_INT 105
17015: PUSH
17016: LD_INT 106
17018: PUSH
17019: LD_INT 108
17021: PUSH
17022: LD_INT 116
17024: PUSH
17025: LD_INT 117
17027: PUSH
17028: LD_INT 118
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: ST_TO_ADDR
17045: GO 20028
17047: LD_INT 3
17049: DOUBLE
17050: EQUAL
17051: IFTRUE 17055
17053: GO 17143
17055: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17056: LD_ADDR_VAR 0 2
17060: PUSH
17061: LD_INT 2
17063: PUSH
17064: LD_INT 4
17066: PUSH
17067: LD_INT 5
17069: PUSH
17070: LD_INT 11
17072: PUSH
17073: LD_INT 12
17075: PUSH
17076: LD_INT 15
17078: PUSH
17079: LD_INT 16
17081: PUSH
17082: LD_INT 22
17084: PUSH
17085: LD_INT 26
17087: PUSH
17088: LD_INT 36
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 101
17105: PUSH
17106: LD_INT 102
17108: PUSH
17109: LD_INT 105
17111: PUSH
17112: LD_INT 106
17114: PUSH
17115: LD_INT 108
17117: PUSH
17118: LD_INT 116
17120: PUSH
17121: LD_INT 117
17123: PUSH
17124: LD_INT 118
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: ST_TO_ADDR
17141: GO 20028
17143: LD_INT 4
17145: DOUBLE
17146: EQUAL
17147: IFTRUE 17151
17149: GO 17247
17151: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17152: LD_ADDR_VAR 0 2
17156: PUSH
17157: LD_INT 2
17159: PUSH
17160: LD_INT 4
17162: PUSH
17163: LD_INT 5
17165: PUSH
17166: LD_INT 8
17168: PUSH
17169: LD_INT 11
17171: PUSH
17172: LD_INT 12
17174: PUSH
17175: LD_INT 15
17177: PUSH
17178: LD_INT 16
17180: PUSH
17181: LD_INT 22
17183: PUSH
17184: LD_INT 23
17186: PUSH
17187: LD_INT 26
17189: PUSH
17190: LD_INT 36
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 101
17209: PUSH
17210: LD_INT 102
17212: PUSH
17213: LD_INT 105
17215: PUSH
17216: LD_INT 106
17218: PUSH
17219: LD_INT 108
17221: PUSH
17222: LD_INT 116
17224: PUSH
17225: LD_INT 117
17227: PUSH
17228: LD_INT 118
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: ST_TO_ADDR
17245: GO 20028
17247: LD_INT 5
17249: DOUBLE
17250: EQUAL
17251: IFTRUE 17255
17253: GO 17367
17255: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17256: LD_ADDR_VAR 0 2
17260: PUSH
17261: LD_INT 2
17263: PUSH
17264: LD_INT 4
17266: PUSH
17267: LD_INT 5
17269: PUSH
17270: LD_INT 6
17272: PUSH
17273: LD_INT 8
17275: PUSH
17276: LD_INT 11
17278: PUSH
17279: LD_INT 12
17281: PUSH
17282: LD_INT 15
17284: PUSH
17285: LD_INT 16
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 23
17293: PUSH
17294: LD_INT 25
17296: PUSH
17297: LD_INT 26
17299: PUSH
17300: LD_INT 36
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 101
17321: PUSH
17322: LD_INT 102
17324: PUSH
17325: LD_INT 105
17327: PUSH
17328: LD_INT 106
17330: PUSH
17331: LD_INT 108
17333: PUSH
17334: LD_INT 109
17336: PUSH
17337: LD_INT 112
17339: PUSH
17340: LD_INT 116
17342: PUSH
17343: LD_INT 117
17345: PUSH
17346: LD_INT 118
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: ST_TO_ADDR
17365: GO 20028
17367: LD_INT 6
17369: DOUBLE
17370: EQUAL
17371: IFTRUE 17375
17373: GO 17507
17375: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17376: LD_ADDR_VAR 0 2
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: LD_INT 4
17386: PUSH
17387: LD_INT 5
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: LD_INT 8
17395: PUSH
17396: LD_INT 11
17398: PUSH
17399: LD_INT 12
17401: PUSH
17402: LD_INT 15
17404: PUSH
17405: LD_INT 16
17407: PUSH
17408: LD_INT 20
17410: PUSH
17411: LD_INT 21
17413: PUSH
17414: LD_INT 22
17416: PUSH
17417: LD_INT 23
17419: PUSH
17420: LD_INT 25
17422: PUSH
17423: LD_INT 26
17425: PUSH
17426: LD_INT 30
17428: PUSH
17429: LD_INT 31
17431: PUSH
17432: LD_INT 32
17434: PUSH
17435: LD_INT 36
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 101
17461: PUSH
17462: LD_INT 102
17464: PUSH
17465: LD_INT 105
17467: PUSH
17468: LD_INT 106
17470: PUSH
17471: LD_INT 108
17473: PUSH
17474: LD_INT 109
17476: PUSH
17477: LD_INT 112
17479: PUSH
17480: LD_INT 116
17482: PUSH
17483: LD_INT 117
17485: PUSH
17486: LD_INT 118
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: ST_TO_ADDR
17505: GO 20028
17507: LD_INT 7
17509: DOUBLE
17510: EQUAL
17511: IFTRUE 17515
17513: GO 17627
17515: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17516: LD_ADDR_VAR 0 2
17520: PUSH
17521: LD_INT 2
17523: PUSH
17524: LD_INT 4
17526: PUSH
17527: LD_INT 5
17529: PUSH
17530: LD_INT 7
17532: PUSH
17533: LD_INT 11
17535: PUSH
17536: LD_INT 12
17538: PUSH
17539: LD_INT 15
17541: PUSH
17542: LD_INT 16
17544: PUSH
17545: LD_INT 20
17547: PUSH
17548: LD_INT 21
17550: PUSH
17551: LD_INT 22
17553: PUSH
17554: LD_INT 23
17556: PUSH
17557: LD_INT 25
17559: PUSH
17560: LD_INT 26
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 101
17581: PUSH
17582: LD_INT 102
17584: PUSH
17585: LD_INT 103
17587: PUSH
17588: LD_INT 105
17590: PUSH
17591: LD_INT 106
17593: PUSH
17594: LD_INT 108
17596: PUSH
17597: LD_INT 112
17599: PUSH
17600: LD_INT 116
17602: PUSH
17603: LD_INT 117
17605: PUSH
17606: LD_INT 118
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: ST_TO_ADDR
17625: GO 20028
17627: LD_INT 8
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17775
17635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17636: LD_ADDR_VAR 0 2
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: LD_INT 4
17646: PUSH
17647: LD_INT 5
17649: PUSH
17650: LD_INT 6
17652: PUSH
17653: LD_INT 7
17655: PUSH
17656: LD_INT 8
17658: PUSH
17659: LD_INT 11
17661: PUSH
17662: LD_INT 12
17664: PUSH
17665: LD_INT 15
17667: PUSH
17668: LD_INT 16
17670: PUSH
17671: LD_INT 20
17673: PUSH
17674: LD_INT 21
17676: PUSH
17677: LD_INT 22
17679: PUSH
17680: LD_INT 23
17682: PUSH
17683: LD_INT 25
17685: PUSH
17686: LD_INT 26
17688: PUSH
17689: LD_INT 30
17691: PUSH
17692: LD_INT 31
17694: PUSH
17695: LD_INT 32
17697: PUSH
17698: LD_INT 36
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 101
17725: PUSH
17726: LD_INT 102
17728: PUSH
17729: LD_INT 103
17731: PUSH
17732: LD_INT 105
17734: PUSH
17735: LD_INT 106
17737: PUSH
17738: LD_INT 108
17740: PUSH
17741: LD_INT 109
17743: PUSH
17744: LD_INT 112
17746: PUSH
17747: LD_INT 116
17749: PUSH
17750: LD_INT 117
17752: PUSH
17753: LD_INT 118
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: ST_TO_ADDR
17773: GO 20028
17775: LD_INT 9
17777: DOUBLE
17778: EQUAL
17779: IFTRUE 17783
17781: GO 17931
17783: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17784: LD_ADDR_VAR 0 2
17788: PUSH
17789: LD_INT 2
17791: PUSH
17792: LD_INT 4
17794: PUSH
17795: LD_INT 5
17797: PUSH
17798: LD_INT 6
17800: PUSH
17801: LD_INT 7
17803: PUSH
17804: LD_INT 8
17806: PUSH
17807: LD_INT 11
17809: PUSH
17810: LD_INT 12
17812: PUSH
17813: LD_INT 15
17815: PUSH
17816: LD_INT 16
17818: PUSH
17819: LD_INT 20
17821: PUSH
17822: LD_INT 21
17824: PUSH
17825: LD_INT 22
17827: PUSH
17828: LD_INT 23
17830: PUSH
17831: LD_INT 25
17833: PUSH
17834: LD_INT 26
17836: PUSH
17837: LD_INT 28
17839: PUSH
17840: LD_INT 30
17842: PUSH
17843: LD_INT 31
17845: PUSH
17846: LD_INT 32
17848: PUSH
17849: LD_INT 36
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 101
17877: PUSH
17878: LD_INT 102
17880: PUSH
17881: LD_INT 103
17883: PUSH
17884: LD_INT 105
17886: PUSH
17887: LD_INT 106
17889: PUSH
17890: LD_INT 108
17892: PUSH
17893: LD_INT 109
17895: PUSH
17896: LD_INT 112
17898: PUSH
17899: LD_INT 114
17901: PUSH
17902: LD_INT 116
17904: PUSH
17905: LD_INT 117
17907: PUSH
17908: LD_INT 118
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: ST_TO_ADDR
17929: GO 20028
17931: LD_INT 10
17933: DOUBLE
17934: EQUAL
17935: IFTRUE 17939
17937: GO 18135
17939: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_INT 2
17947: PUSH
17948: LD_INT 4
17950: PUSH
17951: LD_INT 5
17953: PUSH
17954: LD_INT 6
17956: PUSH
17957: LD_INT 7
17959: PUSH
17960: LD_INT 8
17962: PUSH
17963: LD_INT 9
17965: PUSH
17966: LD_INT 10
17968: PUSH
17969: LD_INT 11
17971: PUSH
17972: LD_INT 12
17974: PUSH
17975: LD_INT 13
17977: PUSH
17978: LD_INT 14
17980: PUSH
17981: LD_INT 15
17983: PUSH
17984: LD_INT 16
17986: PUSH
17987: LD_INT 17
17989: PUSH
17990: LD_INT 18
17992: PUSH
17993: LD_INT 19
17995: PUSH
17996: LD_INT 20
17998: PUSH
17999: LD_INT 21
18001: PUSH
18002: LD_INT 22
18004: PUSH
18005: LD_INT 23
18007: PUSH
18008: LD_INT 24
18010: PUSH
18011: LD_INT 25
18013: PUSH
18014: LD_INT 26
18016: PUSH
18017: LD_INT 28
18019: PUSH
18020: LD_INT 30
18022: PUSH
18023: LD_INT 31
18025: PUSH
18026: LD_INT 32
18028: PUSH
18029: LD_INT 36
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 101
18065: PUSH
18066: LD_INT 102
18068: PUSH
18069: LD_INT 103
18071: PUSH
18072: LD_INT 104
18074: PUSH
18075: LD_INT 105
18077: PUSH
18078: LD_INT 106
18080: PUSH
18081: LD_INT 107
18083: PUSH
18084: LD_INT 108
18086: PUSH
18087: LD_INT 109
18089: PUSH
18090: LD_INT 110
18092: PUSH
18093: LD_INT 111
18095: PUSH
18096: LD_INT 112
18098: PUSH
18099: LD_INT 114
18101: PUSH
18102: LD_INT 116
18104: PUSH
18105: LD_INT 117
18107: PUSH
18108: LD_INT 118
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: ST_TO_ADDR
18133: GO 20028
18135: LD_INT 11
18137: DOUBLE
18138: EQUAL
18139: IFTRUE 18143
18141: GO 18347
18143: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18144: LD_ADDR_VAR 0 2
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: LD_INT 3
18154: PUSH
18155: LD_INT 4
18157: PUSH
18158: LD_INT 5
18160: PUSH
18161: LD_INT 6
18163: PUSH
18164: LD_INT 7
18166: PUSH
18167: LD_INT 8
18169: PUSH
18170: LD_INT 9
18172: PUSH
18173: LD_INT 10
18175: PUSH
18176: LD_INT 11
18178: PUSH
18179: LD_INT 12
18181: PUSH
18182: LD_INT 13
18184: PUSH
18185: LD_INT 14
18187: PUSH
18188: LD_INT 15
18190: PUSH
18191: LD_INT 16
18193: PUSH
18194: LD_INT 17
18196: PUSH
18197: LD_INT 18
18199: PUSH
18200: LD_INT 19
18202: PUSH
18203: LD_INT 20
18205: PUSH
18206: LD_INT 21
18208: PUSH
18209: LD_INT 22
18211: PUSH
18212: LD_INT 23
18214: PUSH
18215: LD_INT 24
18217: PUSH
18218: LD_INT 25
18220: PUSH
18221: LD_INT 26
18223: PUSH
18224: LD_INT 28
18226: PUSH
18227: LD_INT 30
18229: PUSH
18230: LD_INT 31
18232: PUSH
18233: LD_INT 32
18235: PUSH
18236: LD_INT 34
18238: PUSH
18239: LD_INT 36
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 101
18277: PUSH
18278: LD_INT 102
18280: PUSH
18281: LD_INT 103
18283: PUSH
18284: LD_INT 104
18286: PUSH
18287: LD_INT 105
18289: PUSH
18290: LD_INT 106
18292: PUSH
18293: LD_INT 107
18295: PUSH
18296: LD_INT 108
18298: PUSH
18299: LD_INT 109
18301: PUSH
18302: LD_INT 110
18304: PUSH
18305: LD_INT 111
18307: PUSH
18308: LD_INT 112
18310: PUSH
18311: LD_INT 114
18313: PUSH
18314: LD_INT 116
18316: PUSH
18317: LD_INT 117
18319: PUSH
18320: LD_INT 118
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: ST_TO_ADDR
18345: GO 20028
18347: LD_INT 12
18349: DOUBLE
18350: EQUAL
18351: IFTRUE 18355
18353: GO 18575
18355: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18356: LD_ADDR_VAR 0 2
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: LD_INT 2
18366: PUSH
18367: LD_INT 3
18369: PUSH
18370: LD_INT 4
18372: PUSH
18373: LD_INT 5
18375: PUSH
18376: LD_INT 6
18378: PUSH
18379: LD_INT 7
18381: PUSH
18382: LD_INT 8
18384: PUSH
18385: LD_INT 9
18387: PUSH
18388: LD_INT 10
18390: PUSH
18391: LD_INT 11
18393: PUSH
18394: LD_INT 12
18396: PUSH
18397: LD_INT 13
18399: PUSH
18400: LD_INT 14
18402: PUSH
18403: LD_INT 15
18405: PUSH
18406: LD_INT 16
18408: PUSH
18409: LD_INT 17
18411: PUSH
18412: LD_INT 18
18414: PUSH
18415: LD_INT 19
18417: PUSH
18418: LD_INT 20
18420: PUSH
18421: LD_INT 21
18423: PUSH
18424: LD_INT 22
18426: PUSH
18427: LD_INT 23
18429: PUSH
18430: LD_INT 24
18432: PUSH
18433: LD_INT 25
18435: PUSH
18436: LD_INT 26
18438: PUSH
18439: LD_INT 27
18441: PUSH
18442: LD_INT 28
18444: PUSH
18445: LD_INT 30
18447: PUSH
18448: LD_INT 31
18450: PUSH
18451: LD_INT 32
18453: PUSH
18454: LD_INT 33
18456: PUSH
18457: LD_INT 34
18459: PUSH
18460: LD_INT 36
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 101
18501: PUSH
18502: LD_INT 102
18504: PUSH
18505: LD_INT 103
18507: PUSH
18508: LD_INT 104
18510: PUSH
18511: LD_INT 105
18513: PUSH
18514: LD_INT 106
18516: PUSH
18517: LD_INT 107
18519: PUSH
18520: LD_INT 108
18522: PUSH
18523: LD_INT 109
18525: PUSH
18526: LD_INT 110
18528: PUSH
18529: LD_INT 111
18531: PUSH
18532: LD_INT 112
18534: PUSH
18535: LD_INT 113
18537: PUSH
18538: LD_INT 114
18540: PUSH
18541: LD_INT 116
18543: PUSH
18544: LD_INT 117
18546: PUSH
18547: LD_INT 118
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: ST_TO_ADDR
18573: GO 20028
18575: LD_INT 13
18577: DOUBLE
18578: EQUAL
18579: IFTRUE 18583
18581: GO 18791
18583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18584: LD_ADDR_VAR 0 2
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 3
18597: PUSH
18598: LD_INT 4
18600: PUSH
18601: LD_INT 5
18603: PUSH
18604: LD_INT 8
18606: PUSH
18607: LD_INT 9
18609: PUSH
18610: LD_INT 10
18612: PUSH
18613: LD_INT 11
18615: PUSH
18616: LD_INT 12
18618: PUSH
18619: LD_INT 14
18621: PUSH
18622: LD_INT 15
18624: PUSH
18625: LD_INT 16
18627: PUSH
18628: LD_INT 17
18630: PUSH
18631: LD_INT 18
18633: PUSH
18634: LD_INT 19
18636: PUSH
18637: LD_INT 20
18639: PUSH
18640: LD_INT 21
18642: PUSH
18643: LD_INT 22
18645: PUSH
18646: LD_INT 23
18648: PUSH
18649: LD_INT 24
18651: PUSH
18652: LD_INT 25
18654: PUSH
18655: LD_INT 26
18657: PUSH
18658: LD_INT 27
18660: PUSH
18661: LD_INT 28
18663: PUSH
18664: LD_INT 30
18666: PUSH
18667: LD_INT 31
18669: PUSH
18670: LD_INT 32
18672: PUSH
18673: LD_INT 33
18675: PUSH
18676: LD_INT 34
18678: PUSH
18679: LD_INT 36
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 101
18717: PUSH
18718: LD_INT 102
18720: PUSH
18721: LD_INT 103
18723: PUSH
18724: LD_INT 104
18726: PUSH
18727: LD_INT 105
18729: PUSH
18730: LD_INT 106
18732: PUSH
18733: LD_INT 107
18735: PUSH
18736: LD_INT 108
18738: PUSH
18739: LD_INT 109
18741: PUSH
18742: LD_INT 110
18744: PUSH
18745: LD_INT 111
18747: PUSH
18748: LD_INT 112
18750: PUSH
18751: LD_INT 113
18753: PUSH
18754: LD_INT 114
18756: PUSH
18757: LD_INT 116
18759: PUSH
18760: LD_INT 117
18762: PUSH
18763: LD_INT 118
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: ST_TO_ADDR
18789: GO 20028
18791: LD_INT 14
18793: DOUBLE
18794: EQUAL
18795: IFTRUE 18799
18797: GO 19023
18799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18800: LD_ADDR_VAR 0 2
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: LD_INT 3
18813: PUSH
18814: LD_INT 4
18816: PUSH
18817: LD_INT 5
18819: PUSH
18820: LD_INT 6
18822: PUSH
18823: LD_INT 7
18825: PUSH
18826: LD_INT 8
18828: PUSH
18829: LD_INT 9
18831: PUSH
18832: LD_INT 10
18834: PUSH
18835: LD_INT 11
18837: PUSH
18838: LD_INT 12
18840: PUSH
18841: LD_INT 13
18843: PUSH
18844: LD_INT 14
18846: PUSH
18847: LD_INT 15
18849: PUSH
18850: LD_INT 16
18852: PUSH
18853: LD_INT 17
18855: PUSH
18856: LD_INT 18
18858: PUSH
18859: LD_INT 19
18861: PUSH
18862: LD_INT 20
18864: PUSH
18865: LD_INT 21
18867: PUSH
18868: LD_INT 22
18870: PUSH
18871: LD_INT 23
18873: PUSH
18874: LD_INT 24
18876: PUSH
18877: LD_INT 25
18879: PUSH
18880: LD_INT 26
18882: PUSH
18883: LD_INT 27
18885: PUSH
18886: LD_INT 28
18888: PUSH
18889: LD_INT 29
18891: PUSH
18892: LD_INT 30
18894: PUSH
18895: LD_INT 31
18897: PUSH
18898: LD_INT 32
18900: PUSH
18901: LD_INT 33
18903: PUSH
18904: LD_INT 34
18906: PUSH
18907: LD_INT 36
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 101
18949: PUSH
18950: LD_INT 102
18952: PUSH
18953: LD_INT 103
18955: PUSH
18956: LD_INT 104
18958: PUSH
18959: LD_INT 105
18961: PUSH
18962: LD_INT 106
18964: PUSH
18965: LD_INT 107
18967: PUSH
18968: LD_INT 108
18970: PUSH
18971: LD_INT 109
18973: PUSH
18974: LD_INT 110
18976: PUSH
18977: LD_INT 111
18979: PUSH
18980: LD_INT 112
18982: PUSH
18983: LD_INT 113
18985: PUSH
18986: LD_INT 114
18988: PUSH
18989: LD_INT 116
18991: PUSH
18992: LD_INT 117
18994: PUSH
18995: LD_INT 118
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: ST_TO_ADDR
19021: GO 20028
19023: LD_INT 15
19025: DOUBLE
19026: EQUAL
19027: IFTRUE 19031
19029: GO 19255
19031: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19032: LD_ADDR_VAR 0 2
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: LD_INT 4
19048: PUSH
19049: LD_INT 5
19051: PUSH
19052: LD_INT 6
19054: PUSH
19055: LD_INT 7
19057: PUSH
19058: LD_INT 8
19060: PUSH
19061: LD_INT 9
19063: PUSH
19064: LD_INT 10
19066: PUSH
19067: LD_INT 11
19069: PUSH
19070: LD_INT 12
19072: PUSH
19073: LD_INT 13
19075: PUSH
19076: LD_INT 14
19078: PUSH
19079: LD_INT 15
19081: PUSH
19082: LD_INT 16
19084: PUSH
19085: LD_INT 17
19087: PUSH
19088: LD_INT 18
19090: PUSH
19091: LD_INT 19
19093: PUSH
19094: LD_INT 20
19096: PUSH
19097: LD_INT 21
19099: PUSH
19100: LD_INT 22
19102: PUSH
19103: LD_INT 23
19105: PUSH
19106: LD_INT 24
19108: PUSH
19109: LD_INT 25
19111: PUSH
19112: LD_INT 26
19114: PUSH
19115: LD_INT 27
19117: PUSH
19118: LD_INT 28
19120: PUSH
19121: LD_INT 29
19123: PUSH
19124: LD_INT 30
19126: PUSH
19127: LD_INT 31
19129: PUSH
19130: LD_INT 32
19132: PUSH
19133: LD_INT 33
19135: PUSH
19136: LD_INT 34
19138: PUSH
19139: LD_INT 36
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 101
19181: PUSH
19182: LD_INT 102
19184: PUSH
19185: LD_INT 103
19187: PUSH
19188: LD_INT 104
19190: PUSH
19191: LD_INT 105
19193: PUSH
19194: LD_INT 106
19196: PUSH
19197: LD_INT 107
19199: PUSH
19200: LD_INT 108
19202: PUSH
19203: LD_INT 109
19205: PUSH
19206: LD_INT 110
19208: PUSH
19209: LD_INT 111
19211: PUSH
19212: LD_INT 112
19214: PUSH
19215: LD_INT 113
19217: PUSH
19218: LD_INT 114
19220: PUSH
19221: LD_INT 116
19223: PUSH
19224: LD_INT 117
19226: PUSH
19227: LD_INT 118
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: ST_TO_ADDR
19253: GO 20028
19255: LD_INT 16
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19399
19263: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19264: LD_ADDR_VAR 0 2
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: LD_INT 4
19274: PUSH
19275: LD_INT 5
19277: PUSH
19278: LD_INT 7
19280: PUSH
19281: LD_INT 11
19283: PUSH
19284: LD_INT 12
19286: PUSH
19287: LD_INT 15
19289: PUSH
19290: LD_INT 16
19292: PUSH
19293: LD_INT 20
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_INT 23
19304: PUSH
19305: LD_INT 25
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 30
19313: PUSH
19314: LD_INT 31
19316: PUSH
19317: LD_INT 32
19319: PUSH
19320: LD_INT 33
19322: PUSH
19323: LD_INT 34
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 101
19349: PUSH
19350: LD_INT 102
19352: PUSH
19353: LD_INT 103
19355: PUSH
19356: LD_INT 106
19358: PUSH
19359: LD_INT 108
19361: PUSH
19362: LD_INT 112
19364: PUSH
19365: LD_INT 113
19367: PUSH
19368: LD_INT 114
19370: PUSH
19371: LD_INT 116
19373: PUSH
19374: LD_INT 117
19376: PUSH
19377: LD_INT 118
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: ST_TO_ADDR
19397: GO 20028
19399: LD_INT 17
19401: DOUBLE
19402: EQUAL
19403: IFTRUE 19407
19405: GO 19631
19407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19408: LD_ADDR_VAR 0 2
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: LD_INT 3
19421: PUSH
19422: LD_INT 4
19424: PUSH
19425: LD_INT 5
19427: PUSH
19428: LD_INT 6
19430: PUSH
19431: LD_INT 7
19433: PUSH
19434: LD_INT 8
19436: PUSH
19437: LD_INT 9
19439: PUSH
19440: LD_INT 10
19442: PUSH
19443: LD_INT 11
19445: PUSH
19446: LD_INT 12
19448: PUSH
19449: LD_INT 13
19451: PUSH
19452: LD_INT 14
19454: PUSH
19455: LD_INT 15
19457: PUSH
19458: LD_INT 16
19460: PUSH
19461: LD_INT 17
19463: PUSH
19464: LD_INT 18
19466: PUSH
19467: LD_INT 19
19469: PUSH
19470: LD_INT 20
19472: PUSH
19473: LD_INT 21
19475: PUSH
19476: LD_INT 22
19478: PUSH
19479: LD_INT 23
19481: PUSH
19482: LD_INT 24
19484: PUSH
19485: LD_INT 25
19487: PUSH
19488: LD_INT 26
19490: PUSH
19491: LD_INT 27
19493: PUSH
19494: LD_INT 28
19496: PUSH
19497: LD_INT 29
19499: PUSH
19500: LD_INT 30
19502: PUSH
19503: LD_INT 31
19505: PUSH
19506: LD_INT 32
19508: PUSH
19509: LD_INT 33
19511: PUSH
19512: LD_INT 34
19514: PUSH
19515: LD_INT 36
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 101
19557: PUSH
19558: LD_INT 102
19560: PUSH
19561: LD_INT 103
19563: PUSH
19564: LD_INT 104
19566: PUSH
19567: LD_INT 105
19569: PUSH
19570: LD_INT 106
19572: PUSH
19573: LD_INT 107
19575: PUSH
19576: LD_INT 108
19578: PUSH
19579: LD_INT 109
19581: PUSH
19582: LD_INT 110
19584: PUSH
19585: LD_INT 111
19587: PUSH
19588: LD_INT 112
19590: PUSH
19591: LD_INT 113
19593: PUSH
19594: LD_INT 114
19596: PUSH
19597: LD_INT 116
19599: PUSH
19600: LD_INT 117
19602: PUSH
19603: LD_INT 118
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: ST_TO_ADDR
19629: GO 20028
19631: LD_INT 18
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19787
19639: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19640: LD_ADDR_VAR 0 2
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: LD_INT 4
19650: PUSH
19651: LD_INT 5
19653: PUSH
19654: LD_INT 7
19656: PUSH
19657: LD_INT 11
19659: PUSH
19660: LD_INT 12
19662: PUSH
19663: LD_INT 15
19665: PUSH
19666: LD_INT 16
19668: PUSH
19669: LD_INT 20
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 22
19677: PUSH
19678: LD_INT 23
19680: PUSH
19681: LD_INT 25
19683: PUSH
19684: LD_INT 26
19686: PUSH
19687: LD_INT 30
19689: PUSH
19690: LD_INT 31
19692: PUSH
19693: LD_INT 32
19695: PUSH
19696: LD_INT 33
19698: PUSH
19699: LD_INT 34
19701: PUSH
19702: LD_INT 35
19704: PUSH
19705: LD_INT 36
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 101
19733: PUSH
19734: LD_INT 102
19736: PUSH
19737: LD_INT 103
19739: PUSH
19740: LD_INT 106
19742: PUSH
19743: LD_INT 108
19745: PUSH
19746: LD_INT 112
19748: PUSH
19749: LD_INT 113
19751: PUSH
19752: LD_INT 114
19754: PUSH
19755: LD_INT 115
19757: PUSH
19758: LD_INT 116
19760: PUSH
19761: LD_INT 117
19763: PUSH
19764: LD_INT 118
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: ST_TO_ADDR
19785: GO 20028
19787: LD_INT 19
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 20027
19795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19796: LD_ADDR_VAR 0 2
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: LD_INT 3
19809: PUSH
19810: LD_INT 4
19812: PUSH
19813: LD_INT 5
19815: PUSH
19816: LD_INT 6
19818: PUSH
19819: LD_INT 7
19821: PUSH
19822: LD_INT 8
19824: PUSH
19825: LD_INT 9
19827: PUSH
19828: LD_INT 10
19830: PUSH
19831: LD_INT 11
19833: PUSH
19834: LD_INT 12
19836: PUSH
19837: LD_INT 13
19839: PUSH
19840: LD_INT 14
19842: PUSH
19843: LD_INT 15
19845: PUSH
19846: LD_INT 16
19848: PUSH
19849: LD_INT 17
19851: PUSH
19852: LD_INT 18
19854: PUSH
19855: LD_INT 19
19857: PUSH
19858: LD_INT 20
19860: PUSH
19861: LD_INT 21
19863: PUSH
19864: LD_INT 22
19866: PUSH
19867: LD_INT 23
19869: PUSH
19870: LD_INT 24
19872: PUSH
19873: LD_INT 25
19875: PUSH
19876: LD_INT 26
19878: PUSH
19879: LD_INT 27
19881: PUSH
19882: LD_INT 28
19884: PUSH
19885: LD_INT 29
19887: PUSH
19888: LD_INT 30
19890: PUSH
19891: LD_INT 31
19893: PUSH
19894: LD_INT 32
19896: PUSH
19897: LD_INT 33
19899: PUSH
19900: LD_INT 34
19902: PUSH
19903: LD_INT 35
19905: PUSH
19906: LD_INT 36
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 101
19949: PUSH
19950: LD_INT 102
19952: PUSH
19953: LD_INT 103
19955: PUSH
19956: LD_INT 104
19958: PUSH
19959: LD_INT 105
19961: PUSH
19962: LD_INT 106
19964: PUSH
19965: LD_INT 107
19967: PUSH
19968: LD_INT 108
19970: PUSH
19971: LD_INT 109
19973: PUSH
19974: LD_INT 110
19976: PUSH
19977: LD_INT 111
19979: PUSH
19980: LD_INT 112
19982: PUSH
19983: LD_INT 113
19985: PUSH
19986: LD_INT 114
19988: PUSH
19989: LD_INT 115
19991: PUSH
19992: LD_INT 116
19994: PUSH
19995: LD_INT 117
19997: PUSH
19998: LD_INT 118
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: ST_TO_ADDR
20025: GO 20028
20027: POP
// end else
20028: GO 20259
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20030: LD_ADDR_VAR 0 2
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: LD_INT 4
20046: PUSH
20047: LD_INT 5
20049: PUSH
20050: LD_INT 6
20052: PUSH
20053: LD_INT 7
20055: PUSH
20056: LD_INT 8
20058: PUSH
20059: LD_INT 9
20061: PUSH
20062: LD_INT 10
20064: PUSH
20065: LD_INT 11
20067: PUSH
20068: LD_INT 12
20070: PUSH
20071: LD_INT 13
20073: PUSH
20074: LD_INT 14
20076: PUSH
20077: LD_INT 15
20079: PUSH
20080: LD_INT 16
20082: PUSH
20083: LD_INT 17
20085: PUSH
20086: LD_INT 18
20088: PUSH
20089: LD_INT 19
20091: PUSH
20092: LD_INT 20
20094: PUSH
20095: LD_INT 21
20097: PUSH
20098: LD_INT 22
20100: PUSH
20101: LD_INT 23
20103: PUSH
20104: LD_INT 24
20106: PUSH
20107: LD_INT 25
20109: PUSH
20110: LD_INT 26
20112: PUSH
20113: LD_INT 27
20115: PUSH
20116: LD_INT 28
20118: PUSH
20119: LD_INT 29
20121: PUSH
20122: LD_INT 30
20124: PUSH
20125: LD_INT 31
20127: PUSH
20128: LD_INT 32
20130: PUSH
20131: LD_INT 33
20133: PUSH
20134: LD_INT 34
20136: PUSH
20137: LD_INT 35
20139: PUSH
20140: LD_INT 36
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 101
20183: PUSH
20184: LD_INT 102
20186: PUSH
20187: LD_INT 103
20189: PUSH
20190: LD_INT 104
20192: PUSH
20193: LD_INT 105
20195: PUSH
20196: LD_INT 106
20198: PUSH
20199: LD_INT 107
20201: PUSH
20202: LD_INT 108
20204: PUSH
20205: LD_INT 109
20207: PUSH
20208: LD_INT 110
20210: PUSH
20211: LD_INT 111
20213: PUSH
20214: LD_INT 112
20216: PUSH
20217: LD_INT 113
20219: PUSH
20220: LD_INT 114
20222: PUSH
20223: LD_INT 115
20225: PUSH
20226: LD_INT 116
20228: PUSH
20229: LD_INT 117
20231: PUSH
20232: LD_INT 118
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: ST_TO_ADDR
// if result then
20259: LD_VAR 0 2
20263: IFFALSE 21049
// begin normal :=  ;
20265: LD_ADDR_VAR 0 5
20269: PUSH
20270: LD_STRING 
20272: ST_TO_ADDR
// hardcore :=  ;
20273: LD_ADDR_VAR 0 6
20277: PUSH
20278: LD_STRING 
20280: ST_TO_ADDR
// active :=  ;
20281: LD_ADDR_VAR 0 7
20285: PUSH
20286: LD_STRING 
20288: ST_TO_ADDR
// for i = 1 to normalCounter do
20289: LD_ADDR_VAR 0 8
20293: PUSH
20294: DOUBLE
20295: LD_INT 1
20297: DEC
20298: ST_TO_ADDR
20299: LD_EXP 58
20303: PUSH
20304: FOR_TO
20305: IFFALSE 20406
// begin tmp := 0 ;
20307: LD_ADDR_VAR 0 3
20311: PUSH
20312: LD_STRING 0
20314: ST_TO_ADDR
// if result [ 1 ] then
20315: LD_VAR 0 2
20319: PUSH
20320: LD_INT 1
20322: ARRAY
20323: IFFALSE 20388
// if result [ 1 ] [ 1 ] = i then
20325: LD_VAR 0 2
20329: PUSH
20330: LD_INT 1
20332: ARRAY
20333: PUSH
20334: LD_INT 1
20336: ARRAY
20337: PUSH
20338: LD_VAR 0 8
20342: EQUAL
20343: IFFALSE 20388
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20345: LD_ADDR_VAR 0 2
20349: PUSH
20350: LD_VAR 0 2
20354: PPUSH
20355: LD_INT 1
20357: PPUSH
20358: LD_VAR 0 2
20362: PUSH
20363: LD_INT 1
20365: ARRAY
20366: PPUSH
20367: LD_INT 1
20369: PPUSH
20370: CALL_OW 3
20374: PPUSH
20375: CALL_OW 1
20379: ST_TO_ADDR
// tmp := 1 ;
20380: LD_ADDR_VAR 0 3
20384: PUSH
20385: LD_STRING 1
20387: ST_TO_ADDR
// end ; normal := normal & tmp ;
20388: LD_ADDR_VAR 0 5
20392: PUSH
20393: LD_VAR 0 5
20397: PUSH
20398: LD_VAR 0 3
20402: STR
20403: ST_TO_ADDR
// end ;
20404: GO 20304
20406: POP
20407: POP
// for i = 1 to hardcoreCounter do
20408: LD_ADDR_VAR 0 8
20412: PUSH
20413: DOUBLE
20414: LD_INT 1
20416: DEC
20417: ST_TO_ADDR
20418: LD_EXP 59
20422: PUSH
20423: FOR_TO
20424: IFFALSE 20529
// begin tmp := 0 ;
20426: LD_ADDR_VAR 0 3
20430: PUSH
20431: LD_STRING 0
20433: ST_TO_ADDR
// if result [ 2 ] then
20434: LD_VAR 0 2
20438: PUSH
20439: LD_INT 2
20441: ARRAY
20442: IFFALSE 20511
// if result [ 2 ] [ 1 ] = 100 + i then
20444: LD_VAR 0 2
20448: PUSH
20449: LD_INT 2
20451: ARRAY
20452: PUSH
20453: LD_INT 1
20455: ARRAY
20456: PUSH
20457: LD_INT 100
20459: PUSH
20460: LD_VAR 0 8
20464: PLUS
20465: EQUAL
20466: IFFALSE 20511
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20468: LD_ADDR_VAR 0 2
20472: PUSH
20473: LD_VAR 0 2
20477: PPUSH
20478: LD_INT 2
20480: PPUSH
20481: LD_VAR 0 2
20485: PUSH
20486: LD_INT 2
20488: ARRAY
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: CALL_OW 3
20497: PPUSH
20498: CALL_OW 1
20502: ST_TO_ADDR
// tmp := 1 ;
20503: LD_ADDR_VAR 0 3
20507: PUSH
20508: LD_STRING 1
20510: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20511: LD_ADDR_VAR 0 6
20515: PUSH
20516: LD_VAR 0 6
20520: PUSH
20521: LD_VAR 0 3
20525: STR
20526: ST_TO_ADDR
// end ;
20527: GO 20423
20529: POP
20530: POP
// if isGameLoad then
20531: LD_VAR 0 1
20535: IFFALSE 21010
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20537: LD_ADDR_VAR 0 4
20541: PUSH
20542: LD_EXP 62
20546: PUSH
20547: LD_EXP 61
20551: PUSH
20552: LD_EXP 63
20556: PUSH
20557: LD_EXP 60
20561: PUSH
20562: LD_EXP 64
20566: PUSH
20567: LD_EXP 65
20571: PUSH
20572: LD_EXP 66
20576: PUSH
20577: LD_EXP 67
20581: PUSH
20582: LD_EXP 68
20586: PUSH
20587: LD_EXP 69
20591: PUSH
20592: LD_EXP 70
20596: PUSH
20597: LD_EXP 71
20601: PUSH
20602: LD_EXP 72
20606: PUSH
20607: LD_EXP 73
20611: PUSH
20612: LD_EXP 81
20616: PUSH
20617: LD_EXP 82
20621: PUSH
20622: LD_EXP 83
20626: PUSH
20627: LD_EXP 84
20631: PUSH
20632: LD_EXP 86
20636: PUSH
20637: LD_EXP 87
20641: PUSH
20642: LD_EXP 88
20646: PUSH
20647: LD_EXP 91
20651: PUSH
20652: LD_EXP 93
20656: PUSH
20657: LD_EXP 94
20661: PUSH
20662: LD_EXP 95
20666: PUSH
20667: LD_EXP 97
20671: PUSH
20672: LD_EXP 98
20676: PUSH
20677: LD_EXP 101
20681: PUSH
20682: LD_EXP 102
20686: PUSH
20687: LD_EXP 103
20691: PUSH
20692: LD_EXP 104
20696: PUSH
20697: LD_EXP 105
20701: PUSH
20702: LD_EXP 106
20706: PUSH
20707: LD_EXP 107
20711: PUSH
20712: LD_EXP 108
20716: PUSH
20717: LD_EXP 109
20721: PUSH
20722: LD_EXP 74
20726: PUSH
20727: LD_EXP 75
20731: PUSH
20732: LD_EXP 78
20736: PUSH
20737: LD_EXP 79
20741: PUSH
20742: LD_EXP 80
20746: PUSH
20747: LD_EXP 76
20751: PUSH
20752: LD_EXP 77
20756: PUSH
20757: LD_EXP 85
20761: PUSH
20762: LD_EXP 89
20766: PUSH
20767: LD_EXP 90
20771: PUSH
20772: LD_EXP 92
20776: PUSH
20777: LD_EXP 96
20781: PUSH
20782: LD_EXP 99
20786: PUSH
20787: LD_EXP 100
20791: PUSH
20792: LD_EXP 110
20796: PUSH
20797: LD_EXP 111
20801: PUSH
20802: LD_EXP 112
20806: PUSH
20807: LD_EXP 113
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: ST_TO_ADDR
// tmp :=  ;
20868: LD_ADDR_VAR 0 3
20872: PUSH
20873: LD_STRING 
20875: ST_TO_ADDR
// for i = 1 to normalCounter do
20876: LD_ADDR_VAR 0 8
20880: PUSH
20881: DOUBLE
20882: LD_INT 1
20884: DEC
20885: ST_TO_ADDR
20886: LD_EXP 58
20890: PUSH
20891: FOR_TO
20892: IFFALSE 20928
// begin if flags [ i ] then
20894: LD_VAR 0 4
20898: PUSH
20899: LD_VAR 0 8
20903: ARRAY
20904: IFFALSE 20926
// tmp := tmp & i & ; ;
20906: LD_ADDR_VAR 0 3
20910: PUSH
20911: LD_VAR 0 3
20915: PUSH
20916: LD_VAR 0 8
20920: STR
20921: PUSH
20922: LD_STRING ;
20924: STR
20925: ST_TO_ADDR
// end ;
20926: GO 20891
20928: POP
20929: POP
// for i = 1 to hardcoreCounter do
20930: LD_ADDR_VAR 0 8
20934: PUSH
20935: DOUBLE
20936: LD_INT 1
20938: DEC
20939: ST_TO_ADDR
20940: LD_EXP 59
20944: PUSH
20945: FOR_TO
20946: IFFALSE 20992
// begin if flags [ normalCounter + i ] then
20948: LD_VAR 0 4
20952: PUSH
20953: LD_EXP 58
20957: PUSH
20958: LD_VAR 0 8
20962: PLUS
20963: ARRAY
20964: IFFALSE 20990
// tmp := tmp & ( 100 + i ) & ; ;
20966: LD_ADDR_VAR 0 3
20970: PUSH
20971: LD_VAR 0 3
20975: PUSH
20976: LD_INT 100
20978: PUSH
20979: LD_VAR 0 8
20983: PLUS
20984: STR
20985: PUSH
20986: LD_STRING ;
20988: STR
20989: ST_TO_ADDR
// end ;
20990: GO 20945
20992: POP
20993: POP
// if tmp then
20994: LD_VAR 0 3
20998: IFFALSE 21010
// active := tmp ;
21000: LD_ADDR_VAR 0 7
21004: PUSH
21005: LD_VAR 0 3
21009: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21010: LD_STRING getStreamItemsFromMission("
21012: PUSH
21013: LD_VAR 0 5
21017: STR
21018: PUSH
21019: LD_STRING ","
21021: STR
21022: PUSH
21023: LD_VAR 0 6
21027: STR
21028: PUSH
21029: LD_STRING ","
21031: STR
21032: PUSH
21033: LD_VAR 0 7
21037: STR
21038: PUSH
21039: LD_STRING ")
21041: STR
21042: PPUSH
21043: CALL_OW 559
// end else
21047: GO 21056
// ToLua ( getStreamItemsFromMission("","","") ) ;
21049: LD_STRING getStreamItemsFromMission("","","")
21051: PPUSH
21052: CALL_OW 559
// end ;
21056: LD_VAR 0 2
21060: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21061: LD_EXP 57
21065: PUSH
21066: LD_EXP 62
21070: AND
21071: IFFALSE 21195
21073: GO 21075
21075: DISABLE
21076: LD_INT 0
21078: PPUSH
21079: PPUSH
// begin enable ;
21080: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21081: LD_ADDR_VAR 0 2
21085: PUSH
21086: LD_INT 22
21088: PUSH
21089: LD_OWVAR 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 2
21100: PUSH
21101: LD_INT 34
21103: PUSH
21104: LD_INT 7
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 34
21113: PUSH
21114: LD_INT 45
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 34
21123: PUSH
21124: LD_INT 28
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 34
21133: PUSH
21134: LD_INT 47
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PPUSH
21152: CALL_OW 69
21156: ST_TO_ADDR
// if not tmp then
21157: LD_VAR 0 2
21161: NOT
21162: IFFALSE 21166
// exit ;
21164: GO 21195
// for i in tmp do
21166: LD_ADDR_VAR 0 1
21170: PUSH
21171: LD_VAR 0 2
21175: PUSH
21176: FOR_IN
21177: IFFALSE 21193
// begin SetLives ( i , 0 ) ;
21179: LD_VAR 0 1
21183: PPUSH
21184: LD_INT 0
21186: PPUSH
21187: CALL_OW 234
// end ;
21191: GO 21176
21193: POP
21194: POP
// end ;
21195: PPOPN 2
21197: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21198: LD_EXP 57
21202: PUSH
21203: LD_EXP 63
21207: AND
21208: IFFALSE 21292
21210: GO 21212
21212: DISABLE
21213: LD_INT 0
21215: PPUSH
21216: PPUSH
// begin enable ;
21217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21218: LD_ADDR_VAR 0 2
21222: PUSH
21223: LD_INT 22
21225: PUSH
21226: LD_OWVAR 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 32
21237: PUSH
21238: LD_INT 3
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PPUSH
21249: CALL_OW 69
21253: ST_TO_ADDR
// if not tmp then
21254: LD_VAR 0 2
21258: NOT
21259: IFFALSE 21263
// exit ;
21261: GO 21292
// for i in tmp do
21263: LD_ADDR_VAR 0 1
21267: PUSH
21268: LD_VAR 0 2
21272: PUSH
21273: FOR_IN
21274: IFFALSE 21290
// begin SetLives ( i , 0 ) ;
21276: LD_VAR 0 1
21280: PPUSH
21281: LD_INT 0
21283: PPUSH
21284: CALL_OW 234
// end ;
21288: GO 21273
21290: POP
21291: POP
// end ;
21292: PPOPN 2
21294: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21295: LD_EXP 57
21299: PUSH
21300: LD_EXP 60
21304: AND
21305: IFFALSE 21398
21307: GO 21309
21309: DISABLE
21310: LD_INT 0
21312: PPUSH
// begin enable ;
21313: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21314: LD_ADDR_VAR 0 1
21318: PUSH
21319: LD_INT 22
21321: PUSH
21322: LD_OWVAR 2
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: LD_INT 25
21336: PUSH
21337: LD_INT 5
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 25
21346: PUSH
21347: LD_INT 9
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 25
21356: PUSH
21357: LD_INT 8
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PPUSH
21374: CALL_OW 69
21378: PUSH
21379: FOR_IN
21380: IFFALSE 21396
// begin SetClass ( i , 1 ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL_OW 336
// end ;
21394: GO 21379
21396: POP
21397: POP
// end ;
21398: PPOPN 1
21400: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21401: LD_EXP 57
21405: PUSH
21406: LD_EXP 61
21410: AND
21411: PUSH
21412: LD_OWVAR 65
21416: PUSH
21417: LD_INT 7
21419: LESS
21420: AND
21421: IFFALSE 21435
21423: GO 21425
21425: DISABLE
// begin enable ;
21426: ENABLE
// game_speed := 7 ;
21427: LD_ADDR_OWVAR 65
21431: PUSH
21432: LD_INT 7
21434: ST_TO_ADDR
// end ;
21435: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21436: LD_EXP 57
21440: PUSH
21441: LD_EXP 64
21445: AND
21446: IFFALSE 21648
21448: GO 21450
21450: DISABLE
21451: LD_INT 0
21453: PPUSH
21454: PPUSH
21455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21456: LD_ADDR_VAR 0 3
21460: PUSH
21461: LD_INT 81
21463: PUSH
21464: LD_OWVAR 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 21
21475: PUSH
21476: LD_INT 1
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PPUSH
21487: CALL_OW 69
21491: ST_TO_ADDR
// if not tmp then
21492: LD_VAR 0 3
21496: NOT
21497: IFFALSE 21501
// exit ;
21499: GO 21648
// if tmp > 5 then
21501: LD_VAR 0 3
21505: PUSH
21506: LD_INT 5
21508: GREATER
21509: IFFALSE 21521
// k := 5 else
21511: LD_ADDR_VAR 0 2
21515: PUSH
21516: LD_INT 5
21518: ST_TO_ADDR
21519: GO 21531
// k := tmp ;
21521: LD_ADDR_VAR 0 2
21525: PUSH
21526: LD_VAR 0 3
21530: ST_TO_ADDR
// for i := 1 to k do
21531: LD_ADDR_VAR 0 1
21535: PUSH
21536: DOUBLE
21537: LD_INT 1
21539: DEC
21540: ST_TO_ADDR
21541: LD_VAR 0 2
21545: PUSH
21546: FOR_TO
21547: IFFALSE 21646
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21549: LD_VAR 0 3
21553: PUSH
21554: LD_VAR 0 1
21558: ARRAY
21559: PPUSH
21560: LD_VAR 0 1
21564: PUSH
21565: LD_INT 4
21567: MOD
21568: PUSH
21569: LD_INT 1
21571: PLUS
21572: PPUSH
21573: CALL_OW 259
21577: PUSH
21578: LD_INT 10
21580: LESS
21581: IFFALSE 21644
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21583: LD_VAR 0 3
21587: PUSH
21588: LD_VAR 0 1
21592: ARRAY
21593: PPUSH
21594: LD_VAR 0 1
21598: PUSH
21599: LD_INT 4
21601: MOD
21602: PUSH
21603: LD_INT 1
21605: PLUS
21606: PPUSH
21607: LD_VAR 0 3
21611: PUSH
21612: LD_VAR 0 1
21616: ARRAY
21617: PPUSH
21618: LD_VAR 0 1
21622: PUSH
21623: LD_INT 4
21625: MOD
21626: PUSH
21627: LD_INT 1
21629: PLUS
21630: PPUSH
21631: CALL_OW 259
21635: PUSH
21636: LD_INT 1
21638: PLUS
21639: PPUSH
21640: CALL_OW 237
21644: GO 21546
21646: POP
21647: POP
// end ;
21648: PPOPN 3
21650: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21651: LD_EXP 57
21655: PUSH
21656: LD_EXP 65
21660: AND
21661: IFFALSE 21681
21663: GO 21665
21665: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21666: LD_INT 4
21668: PPUSH
21669: LD_OWVAR 2
21673: PPUSH
21674: LD_INT 0
21676: PPUSH
21677: CALL_OW 324
21681: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21682: LD_EXP 57
21686: PUSH
21687: LD_EXP 94
21691: AND
21692: IFFALSE 21712
21694: GO 21696
21696: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21697: LD_INT 19
21699: PPUSH
21700: LD_OWVAR 2
21704: PPUSH
21705: LD_INT 0
21707: PPUSH
21708: CALL_OW 324
21712: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21713: LD_EXP 57
21717: PUSH
21718: LD_EXP 66
21722: AND
21723: IFFALSE 21825
21725: GO 21727
21727: DISABLE
21728: LD_INT 0
21730: PPUSH
21731: PPUSH
// begin enable ;
21732: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21733: LD_ADDR_VAR 0 2
21737: PUSH
21738: LD_INT 22
21740: PUSH
21741: LD_OWVAR 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 34
21755: PUSH
21756: LD_INT 11
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 34
21765: PUSH
21766: LD_INT 30
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 69
21786: ST_TO_ADDR
// if not tmp then
21787: LD_VAR 0 2
21791: NOT
21792: IFFALSE 21796
// exit ;
21794: GO 21825
// for i in tmp do
21796: LD_ADDR_VAR 0 1
21800: PUSH
21801: LD_VAR 0 2
21805: PUSH
21806: FOR_IN
21807: IFFALSE 21823
// begin SetLives ( i , 0 ) ;
21809: LD_VAR 0 1
21813: PPUSH
21814: LD_INT 0
21816: PPUSH
21817: CALL_OW 234
// end ;
21821: GO 21806
21823: POP
21824: POP
// end ;
21825: PPOPN 2
21827: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21828: LD_EXP 57
21832: PUSH
21833: LD_EXP 67
21837: AND
21838: IFFALSE 21858
21840: GO 21842
21842: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21843: LD_INT 32
21845: PPUSH
21846: LD_OWVAR 2
21850: PPUSH
21851: LD_INT 0
21853: PPUSH
21854: CALL_OW 324
21858: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21859: LD_EXP 57
21863: PUSH
21864: LD_EXP 68
21868: AND
21869: IFFALSE 22050
21871: GO 21873
21873: DISABLE
21874: LD_INT 0
21876: PPUSH
21877: PPUSH
21878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21879: LD_ADDR_VAR 0 2
21883: PUSH
21884: LD_INT 22
21886: PUSH
21887: LD_OWVAR 2
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 33
21898: PUSH
21899: LD_INT 3
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PPUSH
21910: CALL_OW 69
21914: ST_TO_ADDR
// if not tmp then
21915: LD_VAR 0 2
21919: NOT
21920: IFFALSE 21924
// exit ;
21922: GO 22050
// side := 0 ;
21924: LD_ADDR_VAR 0 3
21928: PUSH
21929: LD_INT 0
21931: ST_TO_ADDR
// for i := 1 to 8 do
21932: LD_ADDR_VAR 0 1
21936: PUSH
21937: DOUBLE
21938: LD_INT 1
21940: DEC
21941: ST_TO_ADDR
21942: LD_INT 8
21944: PUSH
21945: FOR_TO
21946: IFFALSE 21994
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21948: LD_OWVAR 2
21952: PUSH
21953: LD_VAR 0 1
21957: NONEQUAL
21958: PUSH
21959: LD_OWVAR 2
21963: PPUSH
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 81
21973: PUSH
21974: LD_INT 2
21976: EQUAL
21977: AND
21978: IFFALSE 21992
// begin side := i ;
21980: LD_ADDR_VAR 0 3
21984: PUSH
21985: LD_VAR 0 1
21989: ST_TO_ADDR
// break ;
21990: GO 21994
// end ;
21992: GO 21945
21994: POP
21995: POP
// if not side then
21996: LD_VAR 0 3
22000: NOT
22001: IFFALSE 22005
// exit ;
22003: GO 22050
// for i := 1 to tmp do
22005: LD_ADDR_VAR 0 1
22009: PUSH
22010: DOUBLE
22011: LD_INT 1
22013: DEC
22014: ST_TO_ADDR
22015: LD_VAR 0 2
22019: PUSH
22020: FOR_TO
22021: IFFALSE 22048
// if Prob ( 60 ) then
22023: LD_INT 60
22025: PPUSH
22026: CALL_OW 13
22030: IFFALSE 22046
// SetSide ( i , side ) ;
22032: LD_VAR 0 1
22036: PPUSH
22037: LD_VAR 0 3
22041: PPUSH
22042: CALL_OW 235
22046: GO 22020
22048: POP
22049: POP
// end ;
22050: PPOPN 3
22052: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22053: LD_EXP 57
22057: PUSH
22058: LD_EXP 70
22062: AND
22063: IFFALSE 22182
22065: GO 22067
22067: DISABLE
22068: LD_INT 0
22070: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22071: LD_ADDR_VAR 0 1
22075: PUSH
22076: LD_INT 22
22078: PUSH
22079: LD_OWVAR 2
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 21
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: LD_INT 23
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: PPUSH
22120: CALL_OW 69
22124: PUSH
22125: FOR_IN
22126: IFFALSE 22180
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22128: LD_VAR 0 1
22132: PPUSH
22133: CALL_OW 257
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 3
22146: PUSH
22147: LD_INT 4
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: IN
22156: IFFALSE 22178
// SetClass ( un , rand ( 1 , 4 ) ) ;
22158: LD_VAR 0 1
22162: PPUSH
22163: LD_INT 1
22165: PPUSH
22166: LD_INT 4
22168: PPUSH
22169: CALL_OW 12
22173: PPUSH
22174: CALL_OW 336
22178: GO 22125
22180: POP
22181: POP
// end ;
22182: PPOPN 1
22184: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22185: LD_EXP 57
22189: PUSH
22190: LD_EXP 69
22194: AND
22195: IFFALSE 22274
22197: GO 22199
22199: DISABLE
22200: LD_INT 0
22202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22203: LD_ADDR_VAR 0 1
22207: PUSH
22208: LD_INT 22
22210: PUSH
22211: LD_OWVAR 2
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 21
22222: PUSH
22223: LD_INT 3
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PPUSH
22234: CALL_OW 69
22238: ST_TO_ADDR
// if not tmp then
22239: LD_VAR 0 1
22243: NOT
22244: IFFALSE 22248
// exit ;
22246: GO 22274
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22248: LD_VAR 0 1
22252: PUSH
22253: LD_INT 1
22255: PPUSH
22256: LD_VAR 0 1
22260: PPUSH
22261: CALL_OW 12
22265: ARRAY
22266: PPUSH
22267: LD_INT 100
22269: PPUSH
22270: CALL_OW 234
// end ;
22274: PPOPN 1
22276: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22277: LD_EXP 57
22281: PUSH
22282: LD_EXP 71
22286: AND
22287: IFFALSE 22385
22289: GO 22291
22291: DISABLE
22292: LD_INT 0
22294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22295: LD_ADDR_VAR 0 1
22299: PUSH
22300: LD_INT 22
22302: PUSH
22303: LD_OWVAR 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 21
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PPUSH
22326: CALL_OW 69
22330: ST_TO_ADDR
// if not tmp then
22331: LD_VAR 0 1
22335: NOT
22336: IFFALSE 22340
// exit ;
22338: GO 22385
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22340: LD_VAR 0 1
22344: PUSH
22345: LD_INT 1
22347: PPUSH
22348: LD_VAR 0 1
22352: PPUSH
22353: CALL_OW 12
22357: ARRAY
22358: PPUSH
22359: LD_INT 1
22361: PPUSH
22362: LD_INT 4
22364: PPUSH
22365: CALL_OW 12
22369: PPUSH
22370: LD_INT 3000
22372: PPUSH
22373: LD_INT 9000
22375: PPUSH
22376: CALL_OW 12
22380: PPUSH
22381: CALL_OW 492
// end ;
22385: PPOPN 1
22387: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22388: LD_EXP 57
22392: PUSH
22393: LD_EXP 72
22397: AND
22398: IFFALSE 22418
22400: GO 22402
22402: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22403: LD_INT 1
22405: PPUSH
22406: LD_OWVAR 2
22410: PPUSH
22411: LD_INT 0
22413: PPUSH
22414: CALL_OW 324
22418: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22419: LD_EXP 57
22423: PUSH
22424: LD_EXP 73
22428: AND
22429: IFFALSE 22512
22431: GO 22433
22433: DISABLE
22434: LD_INT 0
22436: PPUSH
22437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22438: LD_ADDR_VAR 0 2
22442: PUSH
22443: LD_INT 22
22445: PUSH
22446: LD_OWVAR 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 21
22457: PUSH
22458: LD_INT 3
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PPUSH
22469: CALL_OW 69
22473: ST_TO_ADDR
// if not tmp then
22474: LD_VAR 0 2
22478: NOT
22479: IFFALSE 22483
// exit ;
22481: GO 22512
// for i in tmp do
22483: LD_ADDR_VAR 0 1
22487: PUSH
22488: LD_VAR 0 2
22492: PUSH
22493: FOR_IN
22494: IFFALSE 22510
// SetBLevel ( i , 10 ) ;
22496: LD_VAR 0 1
22500: PPUSH
22501: LD_INT 10
22503: PPUSH
22504: CALL_OW 241
22508: GO 22493
22510: POP
22511: POP
// end ;
22512: PPOPN 2
22514: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22515: LD_EXP 57
22519: PUSH
22520: LD_EXP 74
22524: AND
22525: IFFALSE 22636
22527: GO 22529
22529: DISABLE
22530: LD_INT 0
22532: PPUSH
22533: PPUSH
22534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22535: LD_ADDR_VAR 0 3
22539: PUSH
22540: LD_INT 22
22542: PUSH
22543: LD_OWVAR 2
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 25
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PPUSH
22566: CALL_OW 69
22570: ST_TO_ADDR
// if not tmp then
22571: LD_VAR 0 3
22575: NOT
22576: IFFALSE 22580
// exit ;
22578: GO 22636
// un := tmp [ rand ( 1 , tmp ) ] ;
22580: LD_ADDR_VAR 0 2
22584: PUSH
22585: LD_VAR 0 3
22589: PUSH
22590: LD_INT 1
22592: PPUSH
22593: LD_VAR 0 3
22597: PPUSH
22598: CALL_OW 12
22602: ARRAY
22603: ST_TO_ADDR
// if Crawls ( un ) then
22604: LD_VAR 0 2
22608: PPUSH
22609: CALL_OW 318
22613: IFFALSE 22624
// ComWalk ( un ) ;
22615: LD_VAR 0 2
22619: PPUSH
22620: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22624: LD_VAR 0 2
22628: PPUSH
22629: LD_INT 5
22631: PPUSH
22632: CALL_OW 336
// end ;
22636: PPOPN 3
22638: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22639: LD_EXP 57
22643: PUSH
22644: LD_EXP 75
22648: AND
22649: PUSH
22650: LD_OWVAR 67
22654: PUSH
22655: LD_INT 4
22657: LESS
22658: AND
22659: IFFALSE 22678
22661: GO 22663
22663: DISABLE
// begin Difficulty := Difficulty + 1 ;
22664: LD_ADDR_OWVAR 67
22668: PUSH
22669: LD_OWVAR 67
22673: PUSH
22674: LD_INT 1
22676: PLUS
22677: ST_TO_ADDR
// end ;
22678: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22679: LD_EXP 57
22683: PUSH
22684: LD_EXP 76
22688: AND
22689: IFFALSE 22792
22691: GO 22693
22693: DISABLE
22694: LD_INT 0
22696: PPUSH
// begin for i := 1 to 5 do
22697: LD_ADDR_VAR 0 1
22701: PUSH
22702: DOUBLE
22703: LD_INT 1
22705: DEC
22706: ST_TO_ADDR
22707: LD_INT 5
22709: PUSH
22710: FOR_TO
22711: IFFALSE 22790
// begin uc_nation := nation_nature ;
22713: LD_ADDR_OWVAR 21
22717: PUSH
22718: LD_INT 0
22720: ST_TO_ADDR
// uc_side := 0 ;
22721: LD_ADDR_OWVAR 20
22725: PUSH
22726: LD_INT 0
22728: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22729: LD_ADDR_OWVAR 29
22733: PUSH
22734: LD_INT 12
22736: PUSH
22737: LD_INT 12
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: ST_TO_ADDR
// hc_agressivity := 20 ;
22744: LD_ADDR_OWVAR 35
22748: PUSH
22749: LD_INT 20
22751: ST_TO_ADDR
// hc_class := class_tiger ;
22752: LD_ADDR_OWVAR 28
22756: PUSH
22757: LD_INT 14
22759: ST_TO_ADDR
// hc_gallery :=  ;
22760: LD_ADDR_OWVAR 33
22764: PUSH
22765: LD_STRING 
22767: ST_TO_ADDR
// hc_name :=  ;
22768: LD_ADDR_OWVAR 26
22772: PUSH
22773: LD_STRING 
22775: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22776: CALL_OW 44
22780: PPUSH
22781: LD_INT 0
22783: PPUSH
22784: CALL_OW 51
// end ;
22788: GO 22710
22790: POP
22791: POP
// end ;
22792: PPOPN 1
22794: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22795: LD_EXP 57
22799: PUSH
22800: LD_EXP 77
22804: AND
22805: IFFALSE 22814
22807: GO 22809
22809: DISABLE
// StreamSibBomb ;
22810: CALL 22815 0 0
22814: END
// export function StreamSibBomb ; var i , x , y ; begin
22815: LD_INT 0
22817: PPUSH
22818: PPUSH
22819: PPUSH
22820: PPUSH
// result := false ;
22821: LD_ADDR_VAR 0 1
22825: PUSH
22826: LD_INT 0
22828: ST_TO_ADDR
// for i := 1 to 16 do
22829: LD_ADDR_VAR 0 2
22833: PUSH
22834: DOUBLE
22835: LD_INT 1
22837: DEC
22838: ST_TO_ADDR
22839: LD_INT 16
22841: PUSH
22842: FOR_TO
22843: IFFALSE 23042
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22845: LD_ADDR_VAR 0 3
22849: PUSH
22850: LD_INT 10
22852: PUSH
22853: LD_INT 20
22855: PUSH
22856: LD_INT 30
22858: PUSH
22859: LD_INT 40
22861: PUSH
22862: LD_INT 50
22864: PUSH
22865: LD_INT 60
22867: PUSH
22868: LD_INT 70
22870: PUSH
22871: LD_INT 80
22873: PUSH
22874: LD_INT 90
22876: PUSH
22877: LD_INT 100
22879: PUSH
22880: LD_INT 110
22882: PUSH
22883: LD_INT 120
22885: PUSH
22886: LD_INT 130
22888: PUSH
22889: LD_INT 140
22891: PUSH
22892: LD_INT 150
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 1
22914: PPUSH
22915: LD_INT 15
22917: PPUSH
22918: CALL_OW 12
22922: ARRAY
22923: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22924: LD_ADDR_VAR 0 4
22928: PUSH
22929: LD_INT 10
22931: PUSH
22932: LD_INT 20
22934: PUSH
22935: LD_INT 30
22937: PUSH
22938: LD_INT 40
22940: PUSH
22941: LD_INT 50
22943: PUSH
22944: LD_INT 60
22946: PUSH
22947: LD_INT 70
22949: PUSH
22950: LD_INT 80
22952: PUSH
22953: LD_INT 90
22955: PUSH
22956: LD_INT 100
22958: PUSH
22959: LD_INT 110
22961: PUSH
22962: LD_INT 120
22964: PUSH
22965: LD_INT 130
22967: PUSH
22968: LD_INT 140
22970: PUSH
22971: LD_INT 150
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: PPUSH
22994: LD_INT 15
22996: PPUSH
22997: CALL_OW 12
23001: ARRAY
23002: ST_TO_ADDR
// if ValidHex ( x , y ) then
23003: LD_VAR 0 3
23007: PPUSH
23008: LD_VAR 0 4
23012: PPUSH
23013: CALL_OW 488
23017: IFFALSE 23040
// begin result := [ x , y ] ;
23019: LD_ADDR_VAR 0 1
23023: PUSH
23024: LD_VAR 0 3
23028: PUSH
23029: LD_VAR 0 4
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: ST_TO_ADDR
// break ;
23038: GO 23042
// end ; end ;
23040: GO 22842
23042: POP
23043: POP
// if result then
23044: LD_VAR 0 1
23048: IFFALSE 23108
// begin ToLua ( playSibBomb() ) ;
23050: LD_STRING playSibBomb()
23052: PPUSH
23053: CALL_OW 559
// wait ( 0 0$14 ) ;
23057: LD_INT 490
23059: PPUSH
23060: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23064: LD_VAR 0 1
23068: PUSH
23069: LD_INT 1
23071: ARRAY
23072: PPUSH
23073: LD_VAR 0 1
23077: PUSH
23078: LD_INT 2
23080: ARRAY
23081: PPUSH
23082: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23086: LD_VAR 0 1
23090: PUSH
23091: LD_INT 1
23093: ARRAY
23094: PPUSH
23095: LD_VAR 0 1
23099: PUSH
23100: LD_INT 2
23102: ARRAY
23103: PPUSH
23104: CALL_OW 429
// end ; end ;
23108: LD_VAR 0 1
23112: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23113: LD_EXP 57
23117: PUSH
23118: LD_EXP 79
23122: AND
23123: IFFALSE 23135
23125: GO 23127
23127: DISABLE
// YouLost (  ) ;
23128: LD_STRING 
23130: PPUSH
23131: CALL_OW 104
23135: END
// every 0 0$1 trigger StreamModeActive and sFog do
23136: LD_EXP 57
23140: PUSH
23141: LD_EXP 78
23145: AND
23146: IFFALSE 23160
23148: GO 23150
23150: DISABLE
// FogOff ( your_side ) ;
23151: LD_OWVAR 2
23155: PPUSH
23156: CALL_OW 344
23160: END
// every 0 0$1 trigger StreamModeActive and sSun do
23161: LD_EXP 57
23165: PUSH
23166: LD_EXP 80
23170: AND
23171: IFFALSE 23199
23173: GO 23175
23175: DISABLE
// begin solar_recharge_percent := 0 ;
23176: LD_ADDR_OWVAR 79
23180: PUSH
23181: LD_INT 0
23183: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23184: LD_INT 10500
23186: PPUSH
23187: CALL_OW 67
// solar_recharge_percent := 100 ;
23191: LD_ADDR_OWVAR 79
23195: PUSH
23196: LD_INT 100
23198: ST_TO_ADDR
// end ;
23199: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23200: LD_EXP 57
23204: PUSH
23205: LD_EXP 81
23209: AND
23210: IFFALSE 23449
23212: GO 23214
23214: DISABLE
23215: LD_INT 0
23217: PPUSH
23218: PPUSH
23219: PPUSH
// begin tmp := [ ] ;
23220: LD_ADDR_VAR 0 3
23224: PUSH
23225: EMPTY
23226: ST_TO_ADDR
// for i := 1 to 6 do
23227: LD_ADDR_VAR 0 1
23231: PUSH
23232: DOUBLE
23233: LD_INT 1
23235: DEC
23236: ST_TO_ADDR
23237: LD_INT 6
23239: PUSH
23240: FOR_TO
23241: IFFALSE 23346
// begin uc_nation := nation_nature ;
23243: LD_ADDR_OWVAR 21
23247: PUSH
23248: LD_INT 0
23250: ST_TO_ADDR
// uc_side := 0 ;
23251: LD_ADDR_OWVAR 20
23255: PUSH
23256: LD_INT 0
23258: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23259: LD_ADDR_OWVAR 29
23263: PUSH
23264: LD_INT 12
23266: PUSH
23267: LD_INT 12
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: ST_TO_ADDR
// hc_agressivity := 20 ;
23274: LD_ADDR_OWVAR 35
23278: PUSH
23279: LD_INT 20
23281: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23282: LD_ADDR_OWVAR 28
23286: PUSH
23287: LD_INT 17
23289: ST_TO_ADDR
// hc_gallery :=  ;
23290: LD_ADDR_OWVAR 33
23294: PUSH
23295: LD_STRING 
23297: ST_TO_ADDR
// hc_name :=  ;
23298: LD_ADDR_OWVAR 26
23302: PUSH
23303: LD_STRING 
23305: ST_TO_ADDR
// un := CreateHuman ;
23306: LD_ADDR_VAR 0 2
23310: PUSH
23311: CALL_OW 44
23315: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23316: LD_VAR 0 2
23320: PPUSH
23321: LD_INT 1
23323: PPUSH
23324: CALL_OW 51
// tmp := tmp ^ un ;
23328: LD_ADDR_VAR 0 3
23332: PUSH
23333: LD_VAR 0 3
23337: PUSH
23338: LD_VAR 0 2
23342: ADD
23343: ST_TO_ADDR
// end ;
23344: GO 23240
23346: POP
23347: POP
// repeat wait ( 0 0$1 ) ;
23348: LD_INT 35
23350: PPUSH
23351: CALL_OW 67
// for un in tmp do
23355: LD_ADDR_VAR 0 2
23359: PUSH
23360: LD_VAR 0 3
23364: PUSH
23365: FOR_IN
23366: IFFALSE 23440
// begin if IsDead ( un ) then
23368: LD_VAR 0 2
23372: PPUSH
23373: CALL_OW 301
23377: IFFALSE 23397
// begin tmp := tmp diff un ;
23379: LD_ADDR_VAR 0 3
23383: PUSH
23384: LD_VAR 0 3
23388: PUSH
23389: LD_VAR 0 2
23393: DIFF
23394: ST_TO_ADDR
// continue ;
23395: GO 23365
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23397: LD_VAR 0 2
23401: PPUSH
23402: LD_INT 3
23404: PUSH
23405: LD_INT 22
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PPUSH
23419: CALL_OW 69
23423: PPUSH
23424: LD_VAR 0 2
23428: PPUSH
23429: CALL_OW 74
23433: PPUSH
23434: CALL_OW 115
// end ;
23438: GO 23365
23440: POP
23441: POP
// until not tmp ;
23442: LD_VAR 0 3
23446: NOT
23447: IFFALSE 23348
// end ;
23449: PPOPN 3
23451: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23452: LD_EXP 57
23456: PUSH
23457: LD_EXP 82
23461: AND
23462: IFFALSE 23516
23464: GO 23466
23466: DISABLE
// begin ToLua ( displayTroll(); ) ;
23467: LD_STRING displayTroll();
23469: PPUSH
23470: CALL_OW 559
// wait ( 3 3$00 ) ;
23474: LD_INT 6300
23476: PPUSH
23477: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23481: LD_STRING hideTroll();
23483: PPUSH
23484: CALL_OW 559
// wait ( 1 1$00 ) ;
23488: LD_INT 2100
23490: PPUSH
23491: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23495: LD_STRING displayTroll();
23497: PPUSH
23498: CALL_OW 559
// wait ( 1 1$00 ) ;
23502: LD_INT 2100
23504: PPUSH
23505: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23509: LD_STRING hideTroll();
23511: PPUSH
23512: CALL_OW 559
// end ;
23516: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23517: LD_EXP 57
23521: PUSH
23522: LD_EXP 83
23526: AND
23527: IFFALSE 23590
23529: GO 23531
23531: DISABLE
23532: LD_INT 0
23534: PPUSH
// begin p := 0 ;
23535: LD_ADDR_VAR 0 1
23539: PUSH
23540: LD_INT 0
23542: ST_TO_ADDR
// repeat game_speed := 1 ;
23543: LD_ADDR_OWVAR 65
23547: PUSH
23548: LD_INT 1
23550: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23551: LD_INT 35
23553: PPUSH
23554: CALL_OW 67
// p := p + 1 ;
23558: LD_ADDR_VAR 0 1
23562: PUSH
23563: LD_VAR 0 1
23567: PUSH
23568: LD_INT 1
23570: PLUS
23571: ST_TO_ADDR
// until p >= 60 ;
23572: LD_VAR 0 1
23576: PUSH
23577: LD_INT 60
23579: GREATEREQUAL
23580: IFFALSE 23543
// game_speed := 4 ;
23582: LD_ADDR_OWVAR 65
23586: PUSH
23587: LD_INT 4
23589: ST_TO_ADDR
// end ;
23590: PPOPN 1
23592: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23593: LD_EXP 57
23597: PUSH
23598: LD_EXP 84
23602: AND
23603: IFFALSE 23749
23605: GO 23607
23607: DISABLE
23608: LD_INT 0
23610: PPUSH
23611: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23612: LD_ADDR_VAR 0 1
23616: PUSH
23617: LD_INT 22
23619: PUSH
23620: LD_OWVAR 2
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 2
23631: PUSH
23632: LD_INT 30
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 30
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PPUSH
23661: CALL_OW 69
23665: ST_TO_ADDR
// if not depot then
23666: LD_VAR 0 1
23670: NOT
23671: IFFALSE 23675
// exit ;
23673: GO 23749
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23675: LD_ADDR_VAR 0 2
23679: PUSH
23680: LD_VAR 0 1
23684: PUSH
23685: LD_INT 1
23687: PPUSH
23688: LD_VAR 0 1
23692: PPUSH
23693: CALL_OW 12
23697: ARRAY
23698: PPUSH
23699: CALL_OW 274
23703: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: LD_INT 0
23714: PPUSH
23715: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23719: LD_VAR 0 2
23723: PPUSH
23724: LD_INT 2
23726: PPUSH
23727: LD_INT 0
23729: PPUSH
23730: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23734: LD_VAR 0 2
23738: PPUSH
23739: LD_INT 3
23741: PPUSH
23742: LD_INT 0
23744: PPUSH
23745: CALL_OW 277
// end ;
23749: PPOPN 2
23751: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23752: LD_EXP 57
23756: PUSH
23757: LD_EXP 85
23761: AND
23762: IFFALSE 23859
23764: GO 23766
23766: DISABLE
23767: LD_INT 0
23769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23770: LD_ADDR_VAR 0 1
23774: PUSH
23775: LD_INT 22
23777: PUSH
23778: LD_OWVAR 2
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 21
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 3
23799: PUSH
23800: LD_INT 23
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: LIST
23818: PPUSH
23819: CALL_OW 69
23823: ST_TO_ADDR
// if not tmp then
23824: LD_VAR 0 1
23828: NOT
23829: IFFALSE 23833
// exit ;
23831: GO 23859
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23833: LD_VAR 0 1
23837: PUSH
23838: LD_INT 1
23840: PPUSH
23841: LD_VAR 0 1
23845: PPUSH
23846: CALL_OW 12
23850: ARRAY
23851: PPUSH
23852: LD_INT 200
23854: PPUSH
23855: CALL_OW 234
// end ;
23859: PPOPN 1
23861: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23862: LD_EXP 57
23866: PUSH
23867: LD_EXP 86
23871: AND
23872: IFFALSE 23951
23874: GO 23876
23876: DISABLE
23877: LD_INT 0
23879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23880: LD_ADDR_VAR 0 1
23884: PUSH
23885: LD_INT 22
23887: PUSH
23888: LD_OWVAR 2
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 21
23899: PUSH
23900: LD_INT 2
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL_OW 69
23915: ST_TO_ADDR
// if not tmp then
23916: LD_VAR 0 1
23920: NOT
23921: IFFALSE 23925
// exit ;
23923: GO 23951
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23925: LD_VAR 0 1
23929: PUSH
23930: LD_INT 1
23932: PPUSH
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 12
23942: ARRAY
23943: PPUSH
23944: LD_INT 60
23946: PPUSH
23947: CALL_OW 234
// end ;
23951: PPOPN 1
23953: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23954: LD_EXP 57
23958: PUSH
23959: LD_EXP 87
23963: AND
23964: IFFALSE 24063
23966: GO 23968
23968: DISABLE
23969: LD_INT 0
23971: PPUSH
23972: PPUSH
// begin enable ;
23973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23974: LD_ADDR_VAR 0 1
23978: PUSH
23979: LD_INT 22
23981: PUSH
23982: LD_OWVAR 2
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 61
23993: PUSH
23994: EMPTY
23995: LIST
23996: PUSH
23997: LD_INT 33
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: PPUSH
24012: CALL_OW 69
24016: ST_TO_ADDR
// if not tmp then
24017: LD_VAR 0 1
24021: NOT
24022: IFFALSE 24026
// exit ;
24024: GO 24063
// for i in tmp do
24026: LD_ADDR_VAR 0 2
24030: PUSH
24031: LD_VAR 0 1
24035: PUSH
24036: FOR_IN
24037: IFFALSE 24061
// if IsControledBy ( i ) then
24039: LD_VAR 0 2
24043: PPUSH
24044: CALL_OW 312
24048: IFFALSE 24059
// ComUnlink ( i ) ;
24050: LD_VAR 0 2
24054: PPUSH
24055: CALL_OW 136
24059: GO 24036
24061: POP
24062: POP
// end ;
24063: PPOPN 2
24065: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24066: LD_EXP 57
24070: PUSH
24071: LD_EXP 88
24075: AND
24076: IFFALSE 24216
24078: GO 24080
24080: DISABLE
24081: LD_INT 0
24083: PPUSH
24084: PPUSH
// begin ToLua ( displayPowell(); ) ;
24085: LD_STRING displayPowell();
24087: PPUSH
24088: CALL_OW 559
// uc_side := 0 ;
24092: LD_ADDR_OWVAR 20
24096: PUSH
24097: LD_INT 0
24099: ST_TO_ADDR
// uc_nation := 2 ;
24100: LD_ADDR_OWVAR 21
24104: PUSH
24105: LD_INT 2
24107: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24108: LD_ADDR_OWVAR 37
24112: PUSH
24113: LD_INT 14
24115: ST_TO_ADDR
// vc_engine := engine_siberite ;
24116: LD_ADDR_OWVAR 39
24120: PUSH
24121: LD_INT 3
24123: ST_TO_ADDR
// vc_control := control_apeman ;
24124: LD_ADDR_OWVAR 38
24128: PUSH
24129: LD_INT 5
24131: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24132: LD_ADDR_OWVAR 40
24136: PUSH
24137: LD_INT 29
24139: ST_TO_ADDR
// un := CreateVehicle ;
24140: LD_ADDR_VAR 0 2
24144: PUSH
24145: CALL_OW 45
24149: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24150: LD_VAR 0 2
24154: PPUSH
24155: LD_INT 1
24157: PPUSH
24158: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24162: LD_INT 35
24164: PPUSH
24165: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24169: LD_VAR 0 2
24173: PPUSH
24174: LD_INT 22
24176: PUSH
24177: LD_OWVAR 2
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: PPUSH
24191: LD_VAR 0 2
24195: PPUSH
24196: CALL_OW 74
24200: PPUSH
24201: CALL_OW 115
// until IsDead ( un ) ;
24205: LD_VAR 0 2
24209: PPUSH
24210: CALL_OW 301
24214: IFFALSE 24162
// end ;
24216: PPOPN 2
24218: END
// every 0 0$1 trigger StreamModeActive and sStu do
24219: LD_EXP 57
24223: PUSH
24224: LD_EXP 96
24228: AND
24229: IFFALSE 24245
24231: GO 24233
24233: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24234: LD_STRING displayStucuk();
24236: PPUSH
24237: CALL_OW 559
// ResetFog ;
24241: CALL_OW 335
// end ;
24245: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24246: LD_EXP 57
24250: PUSH
24251: LD_EXP 89
24255: AND
24256: IFFALSE 24397
24258: GO 24260
24260: DISABLE
24261: LD_INT 0
24263: PPUSH
24264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24265: LD_ADDR_VAR 0 2
24269: PUSH
24270: LD_INT 22
24272: PUSH
24273: LD_OWVAR 2
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 21
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PPUSH
24296: CALL_OW 69
24300: ST_TO_ADDR
// if not tmp then
24301: LD_VAR 0 2
24305: NOT
24306: IFFALSE 24310
// exit ;
24308: GO 24397
// un := tmp [ rand ( 1 , tmp ) ] ;
24310: LD_ADDR_VAR 0 1
24314: PUSH
24315: LD_VAR 0 2
24319: PUSH
24320: LD_INT 1
24322: PPUSH
24323: LD_VAR 0 2
24327: PPUSH
24328: CALL_OW 12
24332: ARRAY
24333: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24334: LD_VAR 0 1
24338: PPUSH
24339: LD_INT 0
24341: PPUSH
24342: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24346: LD_VAR 0 1
24350: PPUSH
24351: LD_OWVAR 3
24355: PUSH
24356: LD_VAR 0 1
24360: DIFF
24361: PPUSH
24362: LD_VAR 0 1
24366: PPUSH
24367: CALL_OW 74
24371: PPUSH
24372: CALL_OW 115
// wait ( 0 0$20 ) ;
24376: LD_INT 700
24378: PPUSH
24379: CALL_OW 67
// SetSide ( un , your_side ) ;
24383: LD_VAR 0 1
24387: PPUSH
24388: LD_OWVAR 2
24392: PPUSH
24393: CALL_OW 235
// end ;
24397: PPOPN 2
24399: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24400: LD_EXP 57
24404: PUSH
24405: LD_EXP 90
24409: AND
24410: IFFALSE 24516
24412: GO 24414
24414: DISABLE
24415: LD_INT 0
24417: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24418: LD_ADDR_VAR 0 1
24422: PUSH
24423: LD_INT 22
24425: PUSH
24426: LD_OWVAR 2
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 30
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 30
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PPUSH
24467: CALL_OW 69
24471: ST_TO_ADDR
// if not depot then
24472: LD_VAR 0 1
24476: NOT
24477: IFFALSE 24481
// exit ;
24479: GO 24516
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24481: LD_VAR 0 1
24485: PUSH
24486: LD_INT 1
24488: ARRAY
24489: PPUSH
24490: CALL_OW 250
24494: PPUSH
24495: LD_VAR 0 1
24499: PUSH
24500: LD_INT 1
24502: ARRAY
24503: PPUSH
24504: CALL_OW 251
24508: PPUSH
24509: LD_INT 70
24511: PPUSH
24512: CALL_OW 495
// end ;
24516: PPOPN 1
24518: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24519: LD_EXP 57
24523: PUSH
24524: LD_EXP 91
24528: AND
24529: IFFALSE 24740
24531: GO 24533
24533: DISABLE
24534: LD_INT 0
24536: PPUSH
24537: PPUSH
24538: PPUSH
24539: PPUSH
24540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24541: LD_ADDR_VAR 0 5
24545: PUSH
24546: LD_INT 22
24548: PUSH
24549: LD_OWVAR 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 21
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PPUSH
24572: CALL_OW 69
24576: ST_TO_ADDR
// if not tmp then
24577: LD_VAR 0 5
24581: NOT
24582: IFFALSE 24586
// exit ;
24584: GO 24740
// for i in tmp do
24586: LD_ADDR_VAR 0 1
24590: PUSH
24591: LD_VAR 0 5
24595: PUSH
24596: FOR_IN
24597: IFFALSE 24738
// begin d := rand ( 0 , 5 ) ;
24599: LD_ADDR_VAR 0 4
24603: PUSH
24604: LD_INT 0
24606: PPUSH
24607: LD_INT 5
24609: PPUSH
24610: CALL_OW 12
24614: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24615: LD_ADDR_VAR 0 2
24619: PUSH
24620: LD_VAR 0 1
24624: PPUSH
24625: CALL_OW 250
24629: PPUSH
24630: LD_VAR 0 4
24634: PPUSH
24635: LD_INT 3
24637: PPUSH
24638: LD_INT 12
24640: PPUSH
24641: CALL_OW 12
24645: PPUSH
24646: CALL_OW 272
24650: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: LD_VAR 0 1
24660: PPUSH
24661: CALL_OW 251
24665: PPUSH
24666: LD_VAR 0 4
24670: PPUSH
24671: LD_INT 3
24673: PPUSH
24674: LD_INT 12
24676: PPUSH
24677: CALL_OW 12
24681: PPUSH
24682: CALL_OW 273
24686: ST_TO_ADDR
// if ValidHex ( x , y ) then
24687: LD_VAR 0 2
24691: PPUSH
24692: LD_VAR 0 3
24696: PPUSH
24697: CALL_OW 488
24701: IFFALSE 24736
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24703: LD_VAR 0 1
24707: PPUSH
24708: LD_VAR 0 2
24712: PPUSH
24713: LD_VAR 0 3
24717: PPUSH
24718: LD_INT 3
24720: PPUSH
24721: LD_INT 6
24723: PPUSH
24724: CALL_OW 12
24728: PPUSH
24729: LD_INT 1
24731: PPUSH
24732: CALL_OW 483
// end ;
24736: GO 24596
24738: POP
24739: POP
// end ;
24740: PPOPN 5
24742: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24743: LD_EXP 57
24747: PUSH
24748: LD_EXP 92
24752: AND
24753: IFFALSE 24847
24755: GO 24757
24757: DISABLE
24758: LD_INT 0
24760: PPUSH
24761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24762: LD_ADDR_VAR 0 2
24766: PUSH
24767: LD_INT 22
24769: PUSH
24770: LD_OWVAR 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 32
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 21
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: PPUSH
24804: CALL_OW 69
24808: ST_TO_ADDR
// if not tmp then
24809: LD_VAR 0 2
24813: NOT
24814: IFFALSE 24818
// exit ;
24816: GO 24847
// for i in tmp do
24818: LD_ADDR_VAR 0 1
24822: PUSH
24823: LD_VAR 0 2
24827: PUSH
24828: FOR_IN
24829: IFFALSE 24845
// SetFuel ( i , 0 ) ;
24831: LD_VAR 0 1
24835: PPUSH
24836: LD_INT 0
24838: PPUSH
24839: CALL_OW 240
24843: GO 24828
24845: POP
24846: POP
// end ;
24847: PPOPN 2
24849: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24850: LD_EXP 57
24854: PUSH
24855: LD_EXP 93
24859: AND
24860: IFFALSE 24926
24862: GO 24864
24864: DISABLE
24865: LD_INT 0
24867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24868: LD_ADDR_VAR 0 1
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_OWVAR 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 30
24887: PUSH
24888: LD_INT 29
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 69
24903: ST_TO_ADDR
// if not tmp then
24904: LD_VAR 0 1
24908: NOT
24909: IFFALSE 24913
// exit ;
24911: GO 24926
// DestroyUnit ( tmp [ 1 ] ) ;
24913: LD_VAR 0 1
24917: PUSH
24918: LD_INT 1
24920: ARRAY
24921: PPUSH
24922: CALL_OW 65
// end ;
24926: PPOPN 1
24928: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24929: LD_EXP 57
24933: PUSH
24934: LD_EXP 95
24938: AND
24939: IFFALSE 25068
24941: GO 24943
24943: DISABLE
24944: LD_INT 0
24946: PPUSH
// begin uc_side := 0 ;
24947: LD_ADDR_OWVAR 20
24951: PUSH
24952: LD_INT 0
24954: ST_TO_ADDR
// uc_nation := nation_arabian ;
24955: LD_ADDR_OWVAR 21
24959: PUSH
24960: LD_INT 2
24962: ST_TO_ADDR
// hc_gallery :=  ;
24963: LD_ADDR_OWVAR 33
24967: PUSH
24968: LD_STRING 
24970: ST_TO_ADDR
// hc_name :=  ;
24971: LD_ADDR_OWVAR 26
24975: PUSH
24976: LD_STRING 
24978: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24979: LD_INT 1
24981: PPUSH
24982: LD_INT 11
24984: PPUSH
24985: LD_INT 10
24987: PPUSH
24988: CALL_OW 380
// un := CreateHuman ;
24992: LD_ADDR_VAR 0 1
24996: PUSH
24997: CALL_OW 44
25001: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25002: LD_VAR 0 1
25006: PPUSH
25007: LD_INT 1
25009: PPUSH
25010: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25014: LD_INT 35
25016: PPUSH
25017: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25021: LD_VAR 0 1
25025: PPUSH
25026: LD_INT 22
25028: PUSH
25029: LD_OWVAR 2
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PPUSH
25038: CALL_OW 69
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 74
25052: PPUSH
25053: CALL_OW 115
// until IsDead ( un ) ;
25057: LD_VAR 0 1
25061: PPUSH
25062: CALL_OW 301
25066: IFFALSE 25014
// end ;
25068: PPOPN 1
25070: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25071: LD_EXP 57
25075: PUSH
25076: LD_EXP 97
25080: AND
25081: IFFALSE 25093
25083: GO 25085
25085: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25086: LD_STRING earthquake(getX(game), 0, 32)
25088: PPUSH
25089: CALL_OW 559
25093: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25094: LD_EXP 57
25098: PUSH
25099: LD_EXP 98
25103: AND
25104: IFFALSE 25195
25106: GO 25108
25108: DISABLE
25109: LD_INT 0
25111: PPUSH
// begin enable ;
25112: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25113: LD_ADDR_VAR 0 1
25117: PUSH
25118: LD_INT 22
25120: PUSH
25121: LD_OWVAR 2
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 33
25142: PUSH
25143: LD_INT 3
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: PPUSH
25155: CALL_OW 69
25159: ST_TO_ADDR
// if not tmp then
25160: LD_VAR 0 1
25164: NOT
25165: IFFALSE 25169
// exit ;
25167: GO 25195
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25169: LD_VAR 0 1
25173: PUSH
25174: LD_INT 1
25176: PPUSH
25177: LD_VAR 0 1
25181: PPUSH
25182: CALL_OW 12
25186: ARRAY
25187: PPUSH
25188: LD_INT 1
25190: PPUSH
25191: CALL_OW 234
// end ;
25195: PPOPN 1
25197: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25198: LD_EXP 57
25202: PUSH
25203: LD_EXP 99
25207: AND
25208: IFFALSE 25349
25210: GO 25212
25212: DISABLE
25213: LD_INT 0
25215: PPUSH
25216: PPUSH
25217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25218: LD_ADDR_VAR 0 3
25222: PUSH
25223: LD_INT 22
25225: PUSH
25226: LD_OWVAR 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 25
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PPUSH
25249: CALL_OW 69
25253: ST_TO_ADDR
// if not tmp then
25254: LD_VAR 0 3
25258: NOT
25259: IFFALSE 25263
// exit ;
25261: GO 25349
// un := tmp [ rand ( 1 , tmp ) ] ;
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_VAR 0 3
25272: PUSH
25273: LD_INT 1
25275: PPUSH
25276: LD_VAR 0 3
25280: PPUSH
25281: CALL_OW 12
25285: ARRAY
25286: ST_TO_ADDR
// if Crawls ( un ) then
25287: LD_VAR 0 2
25291: PPUSH
25292: CALL_OW 318
25296: IFFALSE 25307
// ComWalk ( un ) ;
25298: LD_VAR 0 2
25302: PPUSH
25303: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25307: LD_VAR 0 2
25311: PPUSH
25312: LD_INT 9
25314: PPUSH
25315: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25319: LD_INT 28
25321: PPUSH
25322: LD_OWVAR 2
25326: PPUSH
25327: LD_INT 2
25329: PPUSH
25330: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25334: LD_INT 29
25336: PPUSH
25337: LD_OWVAR 2
25341: PPUSH
25342: LD_INT 2
25344: PPUSH
25345: CALL_OW 322
// end ;
25349: PPOPN 3
25351: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25352: LD_EXP 57
25356: PUSH
25357: LD_EXP 100
25361: AND
25362: IFFALSE 25473
25364: GO 25366
25366: DISABLE
25367: LD_INT 0
25369: PPUSH
25370: PPUSH
25371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25372: LD_ADDR_VAR 0 3
25376: PUSH
25377: LD_INT 22
25379: PUSH
25380: LD_OWVAR 2
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 25
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PPUSH
25403: CALL_OW 69
25407: ST_TO_ADDR
// if not tmp then
25408: LD_VAR 0 3
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 25473
// un := tmp [ rand ( 1 , tmp ) ] ;
25417: LD_ADDR_VAR 0 2
25421: PUSH
25422: LD_VAR 0 3
25426: PUSH
25427: LD_INT 1
25429: PPUSH
25430: LD_VAR 0 3
25434: PPUSH
25435: CALL_OW 12
25439: ARRAY
25440: ST_TO_ADDR
// if Crawls ( un ) then
25441: LD_VAR 0 2
25445: PPUSH
25446: CALL_OW 318
25450: IFFALSE 25461
// ComWalk ( un ) ;
25452: LD_VAR 0 2
25456: PPUSH
25457: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25461: LD_VAR 0 2
25465: PPUSH
25466: LD_INT 8
25468: PPUSH
25469: CALL_OW 336
// end ;
25473: PPOPN 3
25475: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25476: LD_EXP 57
25480: PUSH
25481: LD_EXP 101
25485: AND
25486: IFFALSE 25630
25488: GO 25490
25490: DISABLE
25491: LD_INT 0
25493: PPUSH
25494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25495: LD_ADDR_VAR 0 2
25499: PUSH
25500: LD_INT 22
25502: PUSH
25503: LD_OWVAR 2
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 21
25514: PUSH
25515: LD_INT 2
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: LD_INT 34
25527: PUSH
25528: LD_INT 12
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 34
25537: PUSH
25538: LD_INT 51
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 34
25547: PUSH
25548: LD_INT 32
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: LIST
25565: PPUSH
25566: CALL_OW 69
25570: ST_TO_ADDR
// if not tmp then
25571: LD_VAR 0 2
25575: NOT
25576: IFFALSE 25580
// exit ;
25578: GO 25630
// for i in tmp do
25580: LD_ADDR_VAR 0 1
25584: PUSH
25585: LD_VAR 0 2
25589: PUSH
25590: FOR_IN
25591: IFFALSE 25628
// if GetCargo ( i , mat_artifact ) = 0 then
25593: LD_VAR 0 1
25597: PPUSH
25598: LD_INT 4
25600: PPUSH
25601: CALL_OW 289
25605: PUSH
25606: LD_INT 0
25608: EQUAL
25609: IFFALSE 25626
// SetCargo ( i , mat_siberit , 100 ) ;
25611: LD_VAR 0 1
25615: PPUSH
25616: LD_INT 3
25618: PPUSH
25619: LD_INT 100
25621: PPUSH
25622: CALL_OW 290
25626: GO 25590
25628: POP
25629: POP
// end ;
25630: PPOPN 2
25632: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25633: LD_EXP 57
25637: PUSH
25638: LD_EXP 102
25642: AND
25643: IFFALSE 25826
25645: GO 25647
25647: DISABLE
25648: LD_INT 0
25650: PPUSH
25651: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25652: LD_ADDR_VAR 0 2
25656: PUSH
25657: LD_INT 22
25659: PUSH
25660: LD_OWVAR 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PPUSH
25669: CALL_OW 69
25673: ST_TO_ADDR
// if not tmp then
25674: LD_VAR 0 2
25678: NOT
25679: IFFALSE 25683
// exit ;
25681: GO 25826
// for i := 1 to 2 do
25683: LD_ADDR_VAR 0 1
25687: PUSH
25688: DOUBLE
25689: LD_INT 1
25691: DEC
25692: ST_TO_ADDR
25693: LD_INT 2
25695: PUSH
25696: FOR_TO
25697: IFFALSE 25824
// begin uc_side := your_side ;
25699: LD_ADDR_OWVAR 20
25703: PUSH
25704: LD_OWVAR 2
25708: ST_TO_ADDR
// uc_nation := nation_american ;
25709: LD_ADDR_OWVAR 21
25713: PUSH
25714: LD_INT 1
25716: ST_TO_ADDR
// vc_chassis := us_morphling ;
25717: LD_ADDR_OWVAR 37
25721: PUSH
25722: LD_INT 5
25724: ST_TO_ADDR
// vc_engine := engine_siberite ;
25725: LD_ADDR_OWVAR 39
25729: PUSH
25730: LD_INT 3
25732: ST_TO_ADDR
// vc_control := control_computer ;
25733: LD_ADDR_OWVAR 38
25737: PUSH
25738: LD_INT 3
25740: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25741: LD_ADDR_OWVAR 40
25745: PUSH
25746: LD_INT 10
25748: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25749: LD_VAR 0 2
25753: PUSH
25754: LD_INT 1
25756: ARRAY
25757: PPUSH
25758: CALL_OW 310
25762: NOT
25763: IFFALSE 25810
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25765: CALL_OW 45
25769: PPUSH
25770: LD_VAR 0 2
25774: PUSH
25775: LD_INT 1
25777: ARRAY
25778: PPUSH
25779: CALL_OW 250
25783: PPUSH
25784: LD_VAR 0 2
25788: PUSH
25789: LD_INT 1
25791: ARRAY
25792: PPUSH
25793: CALL_OW 251
25797: PPUSH
25798: LD_INT 12
25800: PPUSH
25801: LD_INT 1
25803: PPUSH
25804: CALL_OW 50
25808: GO 25822
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25810: CALL_OW 45
25814: PPUSH
25815: LD_INT 1
25817: PPUSH
25818: CALL_OW 51
// end ;
25822: GO 25696
25824: POP
25825: POP
// end ;
25826: PPOPN 2
25828: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25829: LD_EXP 57
25833: PUSH
25834: LD_EXP 103
25838: AND
25839: IFFALSE 26061
25841: GO 25843
25843: DISABLE
25844: LD_INT 0
25846: PPUSH
25847: PPUSH
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25852: LD_ADDR_VAR 0 6
25856: PUSH
25857: LD_INT 22
25859: PUSH
25860: LD_OWVAR 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 21
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 3
25881: PUSH
25882: LD_INT 23
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: PPUSH
25901: CALL_OW 69
25905: ST_TO_ADDR
// if not tmp then
25906: LD_VAR 0 6
25910: NOT
25911: IFFALSE 25915
// exit ;
25913: GO 26061
// s1 := rand ( 1 , 4 ) ;
25915: LD_ADDR_VAR 0 2
25919: PUSH
25920: LD_INT 1
25922: PPUSH
25923: LD_INT 4
25925: PPUSH
25926: CALL_OW 12
25930: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25931: LD_ADDR_VAR 0 4
25935: PUSH
25936: LD_VAR 0 6
25940: PUSH
25941: LD_INT 1
25943: ARRAY
25944: PPUSH
25945: LD_VAR 0 2
25949: PPUSH
25950: CALL_OW 259
25954: ST_TO_ADDR
// if s1 = 1 then
25955: LD_VAR 0 2
25959: PUSH
25960: LD_INT 1
25962: EQUAL
25963: IFFALSE 25983
// s2 := rand ( 2 , 4 ) else
25965: LD_ADDR_VAR 0 3
25969: PUSH
25970: LD_INT 2
25972: PPUSH
25973: LD_INT 4
25975: PPUSH
25976: CALL_OW 12
25980: ST_TO_ADDR
25981: GO 25991
// s2 := 1 ;
25983: LD_ADDR_VAR 0 3
25987: PUSH
25988: LD_INT 1
25990: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25991: LD_ADDR_VAR 0 5
25995: PUSH
25996: LD_VAR 0 6
26000: PUSH
26001: LD_INT 1
26003: ARRAY
26004: PPUSH
26005: LD_VAR 0 3
26009: PPUSH
26010: CALL_OW 259
26014: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26015: LD_VAR 0 6
26019: PUSH
26020: LD_INT 1
26022: ARRAY
26023: PPUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: LD_VAR 0 5
26033: PPUSH
26034: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26038: LD_VAR 0 6
26042: PUSH
26043: LD_INT 1
26045: ARRAY
26046: PPUSH
26047: LD_VAR 0 3
26051: PPUSH
26052: LD_VAR 0 4
26056: PPUSH
26057: CALL_OW 237
// end ;
26061: PPOPN 6
26063: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26064: LD_EXP 57
26068: PUSH
26069: LD_EXP 104
26073: AND
26074: IFFALSE 26153
26076: GO 26078
26078: DISABLE
26079: LD_INT 0
26081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26082: LD_ADDR_VAR 0 1
26086: PUSH
26087: LD_INT 22
26089: PUSH
26090: LD_OWVAR 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 30
26101: PUSH
26102: LD_INT 3
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PPUSH
26113: CALL_OW 69
26117: ST_TO_ADDR
// if not tmp then
26118: LD_VAR 0 1
26122: NOT
26123: IFFALSE 26127
// exit ;
26125: GO 26153
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26127: LD_VAR 0 1
26131: PUSH
26132: LD_INT 1
26134: PPUSH
26135: LD_VAR 0 1
26139: PPUSH
26140: CALL_OW 12
26144: ARRAY
26145: PPUSH
26146: LD_INT 1
26148: PPUSH
26149: CALL_OW 234
// end ;
26153: PPOPN 1
26155: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26156: LD_EXP 57
26160: PUSH
26161: LD_EXP 105
26165: AND
26166: IFFALSE 26278
26168: GO 26170
26170: DISABLE
26171: LD_INT 0
26173: PPUSH
26174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26175: LD_ADDR_VAR 0 2
26179: PUSH
26180: LD_INT 22
26182: PUSH
26183: LD_OWVAR 2
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 2
26194: PUSH
26195: LD_INT 30
26197: PUSH
26198: LD_INT 27
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 30
26207: PUSH
26208: LD_INT 26
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 30
26217: PUSH
26218: LD_INT 28
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: CALL_OW 69
26239: ST_TO_ADDR
// if not tmp then
26240: LD_VAR 0 2
26244: NOT
26245: IFFALSE 26249
// exit ;
26247: GO 26278
// for i in tmp do
26249: LD_ADDR_VAR 0 1
26253: PUSH
26254: LD_VAR 0 2
26258: PUSH
26259: FOR_IN
26260: IFFALSE 26276
// SetLives ( i , 1 ) ;
26262: LD_VAR 0 1
26266: PPUSH
26267: LD_INT 1
26269: PPUSH
26270: CALL_OW 234
26274: GO 26259
26276: POP
26277: POP
// end ;
26278: PPOPN 2
26280: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26281: LD_EXP 57
26285: PUSH
26286: LD_EXP 106
26290: AND
26291: IFFALSE 26578
26293: GO 26295
26295: DISABLE
26296: LD_INT 0
26298: PPUSH
26299: PPUSH
26300: PPUSH
// begin i := rand ( 1 , 7 ) ;
26301: LD_ADDR_VAR 0 1
26305: PUSH
26306: LD_INT 1
26308: PPUSH
26309: LD_INT 7
26311: PPUSH
26312: CALL_OW 12
26316: ST_TO_ADDR
// case i of 1 :
26317: LD_VAR 0 1
26321: PUSH
26322: LD_INT 1
26324: DOUBLE
26325: EQUAL
26326: IFTRUE 26330
26328: GO 26340
26330: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26331: LD_STRING earthquake(getX(game), 0, 32)
26333: PPUSH
26334: CALL_OW 559
26338: GO 26578
26340: LD_INT 2
26342: DOUBLE
26343: EQUAL
26344: IFTRUE 26348
26346: GO 26362
26348: POP
// begin ToLua ( displayStucuk(); ) ;
26349: LD_STRING displayStucuk();
26351: PPUSH
26352: CALL_OW 559
// ResetFog ;
26356: CALL_OW 335
// end ; 3 :
26360: GO 26578
26362: LD_INT 3
26364: DOUBLE
26365: EQUAL
26366: IFTRUE 26370
26368: GO 26474
26370: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26371: LD_ADDR_VAR 0 2
26375: PUSH
26376: LD_INT 22
26378: PUSH
26379: LD_OWVAR 2
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 25
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PPUSH
26402: CALL_OW 69
26406: ST_TO_ADDR
// if not tmp then
26407: LD_VAR 0 2
26411: NOT
26412: IFFALSE 26416
// exit ;
26414: GO 26578
// un := tmp [ rand ( 1 , tmp ) ] ;
26416: LD_ADDR_VAR 0 3
26420: PUSH
26421: LD_VAR 0 2
26425: PUSH
26426: LD_INT 1
26428: PPUSH
26429: LD_VAR 0 2
26433: PPUSH
26434: CALL_OW 12
26438: ARRAY
26439: ST_TO_ADDR
// if Crawls ( un ) then
26440: LD_VAR 0 3
26444: PPUSH
26445: CALL_OW 318
26449: IFFALSE 26460
// ComWalk ( un ) ;
26451: LD_VAR 0 3
26455: PPUSH
26456: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26460: LD_VAR 0 3
26464: PPUSH
26465: LD_INT 8
26467: PPUSH
26468: CALL_OW 336
// end ; 4 :
26472: GO 26578
26474: LD_INT 4
26476: DOUBLE
26477: EQUAL
26478: IFTRUE 26482
26480: GO 26556
26482: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26483: LD_ADDR_VAR 0 2
26487: PUSH
26488: LD_INT 22
26490: PUSH
26491: LD_OWVAR 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 30
26502: PUSH
26503: LD_INT 29
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PPUSH
26514: CALL_OW 69
26518: ST_TO_ADDR
// if not tmp then
26519: LD_VAR 0 2
26523: NOT
26524: IFFALSE 26528
// exit ;
26526: GO 26578
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26528: LD_VAR 0 2
26532: PUSH
26533: LD_INT 1
26535: ARRAY
26536: PPUSH
26537: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26541: LD_VAR 0 2
26545: PUSH
26546: LD_INT 1
26548: ARRAY
26549: PPUSH
26550: CALL_OW 65
// end ; 5 .. 7 :
26554: GO 26578
26556: LD_INT 5
26558: DOUBLE
26559: GREATEREQUAL
26560: IFFALSE 26568
26562: LD_INT 7
26564: DOUBLE
26565: LESSEQUAL
26566: IFTRUE 26570
26568: GO 26577
26570: POP
// StreamSibBomb ; end ;
26571: CALL 22815 0 0
26575: GO 26578
26577: POP
// end ;
26578: PPOPN 3
26580: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26581: LD_EXP 57
26585: PUSH
26586: LD_EXP 107
26590: AND
26591: IFFALSE 26747
26593: GO 26595
26595: DISABLE
26596: LD_INT 0
26598: PPUSH
26599: PPUSH
26600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26601: LD_ADDR_VAR 0 2
26605: PUSH
26606: LD_INT 81
26608: PUSH
26609: LD_OWVAR 2
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: LD_INT 21
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 21
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PPUSH
26650: CALL_OW 69
26654: ST_TO_ADDR
// if not tmp then
26655: LD_VAR 0 2
26659: NOT
26660: IFFALSE 26664
// exit ;
26662: GO 26747
// p := 0 ;
26664: LD_ADDR_VAR 0 3
26668: PUSH
26669: LD_INT 0
26671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26672: LD_INT 35
26674: PPUSH
26675: CALL_OW 67
// p := p + 1 ;
26679: LD_ADDR_VAR 0 3
26683: PUSH
26684: LD_VAR 0 3
26688: PUSH
26689: LD_INT 1
26691: PLUS
26692: ST_TO_ADDR
// for i in tmp do
26693: LD_ADDR_VAR 0 1
26697: PUSH
26698: LD_VAR 0 2
26702: PUSH
26703: FOR_IN
26704: IFFALSE 26735
// if GetLives ( i ) < 1000 then
26706: LD_VAR 0 1
26710: PPUSH
26711: CALL_OW 256
26715: PUSH
26716: LD_INT 1000
26718: LESS
26719: IFFALSE 26733
// SetLives ( i , 1000 ) ;
26721: LD_VAR 0 1
26725: PPUSH
26726: LD_INT 1000
26728: PPUSH
26729: CALL_OW 234
26733: GO 26703
26735: POP
26736: POP
// until p > 20 ;
26737: LD_VAR 0 3
26741: PUSH
26742: LD_INT 20
26744: GREATER
26745: IFFALSE 26672
// end ;
26747: PPOPN 3
26749: END
// every 0 0$1 trigger StreamModeActive and sTime do
26750: LD_EXP 57
26754: PUSH
26755: LD_EXP 108
26759: AND
26760: IFFALSE 26795
26762: GO 26764
26764: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26765: LD_INT 28
26767: PPUSH
26768: LD_OWVAR 2
26772: PPUSH
26773: LD_INT 2
26775: PPUSH
26776: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26780: LD_INT 30
26782: PPUSH
26783: LD_OWVAR 2
26787: PPUSH
26788: LD_INT 2
26790: PPUSH
26791: CALL_OW 322
// end ;
26795: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26796: LD_EXP 57
26800: PUSH
26801: LD_EXP 109
26805: AND
26806: IFFALSE 26927
26808: GO 26810
26810: DISABLE
26811: LD_INT 0
26813: PPUSH
26814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26815: LD_ADDR_VAR 0 2
26819: PUSH
26820: LD_INT 22
26822: PUSH
26823: LD_OWVAR 2
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 21
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: LD_INT 23
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: PPUSH
26864: CALL_OW 69
26868: ST_TO_ADDR
// if not tmp then
26869: LD_VAR 0 2
26873: NOT
26874: IFFALSE 26878
// exit ;
26876: GO 26927
// for i in tmp do
26878: LD_ADDR_VAR 0 1
26882: PUSH
26883: LD_VAR 0 2
26887: PUSH
26888: FOR_IN
26889: IFFALSE 26925
// begin if Crawls ( i ) then
26891: LD_VAR 0 1
26895: PPUSH
26896: CALL_OW 318
26900: IFFALSE 26911
// ComWalk ( i ) ;
26902: LD_VAR 0 1
26906: PPUSH
26907: CALL_OW 138
// SetClass ( i , 2 ) ;
26911: LD_VAR 0 1
26915: PPUSH
26916: LD_INT 2
26918: PPUSH
26919: CALL_OW 336
// end ;
26923: GO 26888
26925: POP
26926: POP
// end ;
26927: PPOPN 2
26929: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26930: LD_EXP 57
26934: PUSH
26935: LD_EXP 110
26939: AND
26940: IFFALSE 27228
26942: GO 26944
26944: DISABLE
26945: LD_INT 0
26947: PPUSH
26948: PPUSH
26949: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26950: LD_OWVAR 2
26954: PPUSH
26955: LD_INT 9
26957: PPUSH
26958: LD_INT 1
26960: PPUSH
26961: LD_INT 1
26963: PPUSH
26964: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26968: LD_INT 9
26970: PPUSH
26971: LD_OWVAR 2
26975: PPUSH
26976: CALL_OW 343
// uc_side := 9 ;
26980: LD_ADDR_OWVAR 20
26984: PUSH
26985: LD_INT 9
26987: ST_TO_ADDR
// uc_nation := 2 ;
26988: LD_ADDR_OWVAR 21
26992: PUSH
26993: LD_INT 2
26995: ST_TO_ADDR
// hc_name := Dark Warrior ;
26996: LD_ADDR_OWVAR 26
27000: PUSH
27001: LD_STRING Dark Warrior
27003: ST_TO_ADDR
// hc_gallery :=  ;
27004: LD_ADDR_OWVAR 33
27008: PUSH
27009: LD_STRING 
27011: ST_TO_ADDR
// hc_noskilllimit := true ;
27012: LD_ADDR_OWVAR 76
27016: PUSH
27017: LD_INT 1
27019: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27020: LD_ADDR_OWVAR 31
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 30
27030: PUSH
27031: LD_INT 30
27033: PUSH
27034: LD_INT 30
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: ST_TO_ADDR
// un := CreateHuman ;
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: CALL_OW 44
27052: ST_TO_ADDR
// hc_noskilllimit := false ;
27053: LD_ADDR_OWVAR 76
27057: PUSH
27058: LD_INT 0
27060: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27061: LD_VAR 0 3
27065: PPUSH
27066: LD_INT 1
27068: PPUSH
27069: CALL_OW 51
// ToLua ( playRanger() ) ;
27073: LD_STRING playRanger()
27075: PPUSH
27076: CALL_OW 559
// p := 0 ;
27080: LD_ADDR_VAR 0 2
27084: PUSH
27085: LD_INT 0
27087: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27088: LD_INT 35
27090: PPUSH
27091: CALL_OW 67
// p := p + 1 ;
27095: LD_ADDR_VAR 0 2
27099: PUSH
27100: LD_VAR 0 2
27104: PUSH
27105: LD_INT 1
27107: PLUS
27108: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27109: LD_VAR 0 3
27113: PPUSH
27114: CALL_OW 256
27118: PUSH
27119: LD_INT 1000
27121: LESS
27122: IFFALSE 27136
// SetLives ( un , 1000 ) ;
27124: LD_VAR 0 3
27128: PPUSH
27129: LD_INT 1000
27131: PPUSH
27132: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27136: LD_VAR 0 3
27140: PPUSH
27141: LD_INT 81
27143: PUSH
27144: LD_OWVAR 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 91
27155: PUSH
27156: LD_VAR 0 3
27160: PUSH
27161: LD_INT 30
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PPUSH
27173: CALL_OW 69
27177: PPUSH
27178: LD_VAR 0 3
27182: PPUSH
27183: CALL_OW 74
27187: PPUSH
27188: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27192: LD_VAR 0 2
27196: PUSH
27197: LD_INT 80
27199: GREATER
27200: PUSH
27201: LD_VAR 0 3
27205: PPUSH
27206: CALL_OW 301
27210: OR
27211: IFFALSE 27088
// if un then
27213: LD_VAR 0 3
27217: IFFALSE 27228
// RemoveUnit ( un ) ;
27219: LD_VAR 0 3
27223: PPUSH
27224: CALL_OW 64
// end ;
27228: PPOPN 3
27230: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27231: LD_EXP 111
27235: IFFALSE 27351
27237: GO 27239
27239: DISABLE
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27245: LD_ADDR_VAR 0 2
27249: PUSH
27250: LD_INT 81
27252: PUSH
27253: LD_OWVAR 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 21
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PPUSH
27276: CALL_OW 69
27280: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27281: LD_STRING playComputer()
27283: PPUSH
27284: CALL_OW 559
// if not tmp then
27288: LD_VAR 0 2
27292: NOT
27293: IFFALSE 27297
// exit ;
27295: GO 27351
// for i in tmp do
27297: LD_ADDR_VAR 0 1
27301: PUSH
27302: LD_VAR 0 2
27306: PUSH
27307: FOR_IN
27308: IFFALSE 27349
// for j := 1 to 4 do
27310: LD_ADDR_VAR 0 3
27314: PUSH
27315: DOUBLE
27316: LD_INT 1
27318: DEC
27319: ST_TO_ADDR
27320: LD_INT 4
27322: PUSH
27323: FOR_TO
27324: IFFALSE 27345
// SetSkill ( i , j , 10 ) ;
27326: LD_VAR 0 1
27330: PPUSH
27331: LD_VAR 0 3
27335: PPUSH
27336: LD_INT 10
27338: PPUSH
27339: CALL_OW 237
27343: GO 27323
27345: POP
27346: POP
27347: GO 27307
27349: POP
27350: POP
// end ;
27351: PPOPN 3
27353: END
// every 0 0$1 trigger s30 do var i , tmp ;
27354: LD_EXP 112
27358: IFFALSE 27427
27360: GO 27362
27362: DISABLE
27363: LD_INT 0
27365: PPUSH
27366: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27367: LD_ADDR_VAR 0 2
27371: PUSH
27372: LD_INT 22
27374: PUSH
27375: LD_OWVAR 2
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PPUSH
27384: CALL_OW 69
27388: ST_TO_ADDR
// if not tmp then
27389: LD_VAR 0 2
27393: NOT
27394: IFFALSE 27398
// exit ;
27396: GO 27427
// for i in tmp do
27398: LD_ADDR_VAR 0 1
27402: PUSH
27403: LD_VAR 0 2
27407: PUSH
27408: FOR_IN
27409: IFFALSE 27425
// SetLives ( i , 300 ) ;
27411: LD_VAR 0 1
27415: PPUSH
27416: LD_INT 300
27418: PPUSH
27419: CALL_OW 234
27423: GO 27408
27425: POP
27426: POP
// end ;
27427: PPOPN 2
27429: END
// every 0 0$1 trigger s60 do var i , tmp ;
27430: LD_EXP 113
27434: IFFALSE 27503
27436: GO 27438
27438: DISABLE
27439: LD_INT 0
27441: PPUSH
27442: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27443: LD_ADDR_VAR 0 2
27447: PUSH
27448: LD_INT 22
27450: PUSH
27451: LD_OWVAR 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PPUSH
27460: CALL_OW 69
27464: ST_TO_ADDR
// if not tmp then
27465: LD_VAR 0 2
27469: NOT
27470: IFFALSE 27474
// exit ;
27472: GO 27503
// for i in tmp do
27474: LD_ADDR_VAR 0 1
27478: PUSH
27479: LD_VAR 0 2
27483: PUSH
27484: FOR_IN
27485: IFFALSE 27501
// SetLives ( i , 600 ) ;
27487: LD_VAR 0 1
27491: PPUSH
27492: LD_INT 600
27494: PPUSH
27495: CALL_OW 234
27499: GO 27484
27501: POP
27502: POP
// end ;
27503: PPOPN 2
27505: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27506: LD_INT 0
27508: PPUSH
// case cmd of 301 :
27509: LD_VAR 0 1
27513: PUSH
27514: LD_INT 301
27516: DOUBLE
27517: EQUAL
27518: IFTRUE 27522
27520: GO 27554
27522: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27523: LD_VAR 0 6
27527: PPUSH
27528: LD_VAR 0 7
27532: PPUSH
27533: LD_VAR 0 8
27537: PPUSH
27538: LD_VAR 0 4
27542: PPUSH
27543: LD_VAR 0 5
27547: PPUSH
27548: CALL 28755 0 5
27552: GO 27675
27554: LD_INT 302
27556: DOUBLE
27557: EQUAL
27558: IFTRUE 27562
27560: GO 27599
27562: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27563: LD_VAR 0 6
27567: PPUSH
27568: LD_VAR 0 7
27572: PPUSH
27573: LD_VAR 0 8
27577: PPUSH
27578: LD_VAR 0 9
27582: PPUSH
27583: LD_VAR 0 4
27587: PPUSH
27588: LD_VAR 0 5
27592: PPUSH
27593: CALL 28846 0 6
27597: GO 27675
27599: LD_INT 303
27601: DOUBLE
27602: EQUAL
27603: IFTRUE 27607
27605: GO 27644
27607: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27608: LD_VAR 0 6
27612: PPUSH
27613: LD_VAR 0 7
27617: PPUSH
27618: LD_VAR 0 8
27622: PPUSH
27623: LD_VAR 0 9
27627: PPUSH
27628: LD_VAR 0 4
27632: PPUSH
27633: LD_VAR 0 5
27637: PPUSH
27638: CALL 27680 0 6
27642: GO 27675
27644: LD_INT 304
27646: DOUBLE
27647: EQUAL
27648: IFTRUE 27652
27650: GO 27674
27652: POP
// hHackTeleport ( unit , x , y ) ; end ;
27653: LD_VAR 0 2
27657: PPUSH
27658: LD_VAR 0 4
27662: PPUSH
27663: LD_VAR 0 5
27667: PPUSH
27668: CALL 29439 0 3
27672: GO 27675
27674: POP
// end ;
27675: LD_VAR 0 12
27679: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27680: LD_INT 0
27682: PPUSH
27683: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27684: LD_VAR 0 1
27688: PUSH
27689: LD_INT 1
27691: LESS
27692: PUSH
27693: LD_VAR 0 1
27697: PUSH
27698: LD_INT 3
27700: GREATER
27701: OR
27702: PUSH
27703: LD_VAR 0 5
27707: PPUSH
27708: LD_VAR 0 6
27712: PPUSH
27713: CALL_OW 428
27717: OR
27718: IFFALSE 27722
// exit ;
27720: GO 28442
// uc_side := your_side ;
27722: LD_ADDR_OWVAR 20
27726: PUSH
27727: LD_OWVAR 2
27731: ST_TO_ADDR
// uc_nation := nation ;
27732: LD_ADDR_OWVAR 21
27736: PUSH
27737: LD_VAR 0 1
27741: ST_TO_ADDR
// bc_level = 1 ;
27742: LD_ADDR_OWVAR 43
27746: PUSH
27747: LD_INT 1
27749: ST_TO_ADDR
// case btype of 1 :
27750: LD_VAR 0 2
27754: PUSH
27755: LD_INT 1
27757: DOUBLE
27758: EQUAL
27759: IFTRUE 27763
27761: GO 27774
27763: POP
// bc_type := b_depot ; 2 :
27764: LD_ADDR_OWVAR 42
27768: PUSH
27769: LD_INT 0
27771: ST_TO_ADDR
27772: GO 28386
27774: LD_INT 2
27776: DOUBLE
27777: EQUAL
27778: IFTRUE 27782
27780: GO 27793
27782: POP
// bc_type := b_warehouse ; 3 :
27783: LD_ADDR_OWVAR 42
27787: PUSH
27788: LD_INT 1
27790: ST_TO_ADDR
27791: GO 28386
27793: LD_INT 3
27795: DOUBLE
27796: EQUAL
27797: IFTRUE 27801
27799: GO 27812
27801: POP
// bc_type := b_lab ; 4 .. 9 :
27802: LD_ADDR_OWVAR 42
27806: PUSH
27807: LD_INT 6
27809: ST_TO_ADDR
27810: GO 28386
27812: LD_INT 4
27814: DOUBLE
27815: GREATEREQUAL
27816: IFFALSE 27824
27818: LD_INT 9
27820: DOUBLE
27821: LESSEQUAL
27822: IFTRUE 27826
27824: GO 27878
27826: POP
// begin bc_type := b_lab_half ;
27827: LD_ADDR_OWVAR 42
27831: PUSH
27832: LD_INT 7
27834: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27835: LD_ADDR_OWVAR 44
27839: PUSH
27840: LD_INT 10
27842: PUSH
27843: LD_INT 11
27845: PUSH
27846: LD_INT 12
27848: PUSH
27849: LD_INT 15
27851: PUSH
27852: LD_INT 14
27854: PUSH
27855: LD_INT 13
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: PUSH
27866: LD_VAR 0 2
27870: PUSH
27871: LD_INT 3
27873: MINUS
27874: ARRAY
27875: ST_TO_ADDR
// end ; 10 .. 13 :
27876: GO 28386
27878: LD_INT 10
27880: DOUBLE
27881: GREATEREQUAL
27882: IFFALSE 27890
27884: LD_INT 13
27886: DOUBLE
27887: LESSEQUAL
27888: IFTRUE 27892
27890: GO 27969
27892: POP
// begin bc_type := b_lab_full ;
27893: LD_ADDR_OWVAR 42
27897: PUSH
27898: LD_INT 8
27900: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27901: LD_ADDR_OWVAR 44
27905: PUSH
27906: LD_INT 10
27908: PUSH
27909: LD_INT 12
27911: PUSH
27912: LD_INT 14
27914: PUSH
27915: LD_INT 13
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: PUSH
27924: LD_VAR 0 2
27928: PUSH
27929: LD_INT 9
27931: MINUS
27932: ARRAY
27933: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27934: LD_ADDR_OWVAR 45
27938: PUSH
27939: LD_INT 11
27941: PUSH
27942: LD_INT 15
27944: PUSH
27945: LD_INT 12
27947: PUSH
27948: LD_INT 15
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: PUSH
27957: LD_VAR 0 2
27961: PUSH
27962: LD_INT 9
27964: MINUS
27965: ARRAY
27966: ST_TO_ADDR
// end ; 14 :
27967: GO 28386
27969: LD_INT 14
27971: DOUBLE
27972: EQUAL
27973: IFTRUE 27977
27975: GO 27988
27977: POP
// bc_type := b_workshop ; 15 :
27978: LD_ADDR_OWVAR 42
27982: PUSH
27983: LD_INT 2
27985: ST_TO_ADDR
27986: GO 28386
27988: LD_INT 15
27990: DOUBLE
27991: EQUAL
27992: IFTRUE 27996
27994: GO 28007
27996: POP
// bc_type := b_factory ; 16 :
27997: LD_ADDR_OWVAR 42
28001: PUSH
28002: LD_INT 3
28004: ST_TO_ADDR
28005: GO 28386
28007: LD_INT 16
28009: DOUBLE
28010: EQUAL
28011: IFTRUE 28015
28013: GO 28026
28015: POP
// bc_type := b_ext_gun ; 17 :
28016: LD_ADDR_OWVAR 42
28020: PUSH
28021: LD_INT 17
28023: ST_TO_ADDR
28024: GO 28386
28026: LD_INT 17
28028: DOUBLE
28029: EQUAL
28030: IFTRUE 28034
28032: GO 28062
28034: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28035: LD_ADDR_OWVAR 42
28039: PUSH
28040: LD_INT 19
28042: PUSH
28043: LD_INT 23
28045: PUSH
28046: LD_INT 19
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: PUSH
28054: LD_VAR 0 1
28058: ARRAY
28059: ST_TO_ADDR
28060: GO 28386
28062: LD_INT 18
28064: DOUBLE
28065: EQUAL
28066: IFTRUE 28070
28068: GO 28081
28070: POP
// bc_type := b_ext_radar ; 19 :
28071: LD_ADDR_OWVAR 42
28075: PUSH
28076: LD_INT 20
28078: ST_TO_ADDR
28079: GO 28386
28081: LD_INT 19
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28100
28089: POP
// bc_type := b_ext_radio ; 20 :
28090: LD_ADDR_OWVAR 42
28094: PUSH
28095: LD_INT 22
28097: ST_TO_ADDR
28098: GO 28386
28100: LD_INT 20
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28119
28108: POP
// bc_type := b_ext_siberium ; 21 :
28109: LD_ADDR_OWVAR 42
28113: PUSH
28114: LD_INT 21
28116: ST_TO_ADDR
28117: GO 28386
28119: LD_INT 21
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28127
28125: GO 28138
28127: POP
// bc_type := b_ext_computer ; 22 :
28128: LD_ADDR_OWVAR 42
28132: PUSH
28133: LD_INT 24
28135: ST_TO_ADDR
28136: GO 28386
28138: LD_INT 22
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28157
28146: POP
// bc_type := b_ext_track ; 23 :
28147: LD_ADDR_OWVAR 42
28151: PUSH
28152: LD_INT 16
28154: ST_TO_ADDR
28155: GO 28386
28157: LD_INT 23
28159: DOUBLE
28160: EQUAL
28161: IFTRUE 28165
28163: GO 28176
28165: POP
// bc_type := b_ext_laser ; 24 :
28166: LD_ADDR_OWVAR 42
28170: PUSH
28171: LD_INT 25
28173: ST_TO_ADDR
28174: GO 28386
28176: LD_INT 24
28178: DOUBLE
28179: EQUAL
28180: IFTRUE 28184
28182: GO 28195
28184: POP
// bc_type := b_control_tower ; 25 :
28185: LD_ADDR_OWVAR 42
28189: PUSH
28190: LD_INT 36
28192: ST_TO_ADDR
28193: GO 28386
28195: LD_INT 25
28197: DOUBLE
28198: EQUAL
28199: IFTRUE 28203
28201: GO 28214
28203: POP
// bc_type := b_breastwork ; 26 :
28204: LD_ADDR_OWVAR 42
28208: PUSH
28209: LD_INT 31
28211: ST_TO_ADDR
28212: GO 28386
28214: LD_INT 26
28216: DOUBLE
28217: EQUAL
28218: IFTRUE 28222
28220: GO 28233
28222: POP
// bc_type := b_bunker ; 27 :
28223: LD_ADDR_OWVAR 42
28227: PUSH
28228: LD_INT 32
28230: ST_TO_ADDR
28231: GO 28386
28233: LD_INT 27
28235: DOUBLE
28236: EQUAL
28237: IFTRUE 28241
28239: GO 28252
28241: POP
// bc_type := b_turret ; 28 :
28242: LD_ADDR_OWVAR 42
28246: PUSH
28247: LD_INT 33
28249: ST_TO_ADDR
28250: GO 28386
28252: LD_INT 28
28254: DOUBLE
28255: EQUAL
28256: IFTRUE 28260
28258: GO 28271
28260: POP
// bc_type := b_armoury ; 29 :
28261: LD_ADDR_OWVAR 42
28265: PUSH
28266: LD_INT 4
28268: ST_TO_ADDR
28269: GO 28386
28271: LD_INT 29
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28290
28279: POP
// bc_type := b_barracks ; 30 :
28280: LD_ADDR_OWVAR 42
28284: PUSH
28285: LD_INT 5
28287: ST_TO_ADDR
28288: GO 28386
28290: LD_INT 30
28292: DOUBLE
28293: EQUAL
28294: IFTRUE 28298
28296: GO 28309
28298: POP
// bc_type := b_solar_power ; 31 :
28299: LD_ADDR_OWVAR 42
28303: PUSH
28304: LD_INT 27
28306: ST_TO_ADDR
28307: GO 28386
28309: LD_INT 31
28311: DOUBLE
28312: EQUAL
28313: IFTRUE 28317
28315: GO 28328
28317: POP
// bc_type := b_oil_power ; 32 :
28318: LD_ADDR_OWVAR 42
28322: PUSH
28323: LD_INT 26
28325: ST_TO_ADDR
28326: GO 28386
28328: LD_INT 32
28330: DOUBLE
28331: EQUAL
28332: IFTRUE 28336
28334: GO 28347
28336: POP
// bc_type := b_siberite_power ; 33 :
28337: LD_ADDR_OWVAR 42
28341: PUSH
28342: LD_INT 28
28344: ST_TO_ADDR
28345: GO 28386
28347: LD_INT 33
28349: DOUBLE
28350: EQUAL
28351: IFTRUE 28355
28353: GO 28366
28355: POP
// bc_type := b_oil_mine ; 34 :
28356: LD_ADDR_OWVAR 42
28360: PUSH
28361: LD_INT 29
28363: ST_TO_ADDR
28364: GO 28386
28366: LD_INT 34
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 28385
28374: POP
// bc_type := b_siberite_mine ; end ;
28375: LD_ADDR_OWVAR 42
28379: PUSH
28380: LD_INT 30
28382: ST_TO_ADDR
28383: GO 28386
28385: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28386: LD_ADDR_VAR 0 8
28390: PUSH
28391: LD_VAR 0 5
28395: PPUSH
28396: LD_VAR 0 6
28400: PPUSH
28401: LD_VAR 0 3
28405: PPUSH
28406: CALL_OW 47
28410: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28411: LD_OWVAR 42
28415: PUSH
28416: LD_INT 32
28418: PUSH
28419: LD_INT 33
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: IN
28426: IFFALSE 28442
// PlaceWeaponTurret ( b , weapon ) ;
28428: LD_VAR 0 8
28432: PPUSH
28433: LD_VAR 0 4
28437: PPUSH
28438: CALL_OW 431
// end ;
28442: LD_VAR 0 7
28446: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28447: LD_INT 0
28449: PPUSH
28450: PPUSH
28451: PPUSH
28452: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28453: LD_ADDR_VAR 0 4
28457: PUSH
28458: LD_INT 22
28460: PUSH
28461: LD_OWVAR 2
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: LD_INT 30
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 30
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PPUSH
28502: CALL_OW 69
28506: ST_TO_ADDR
// if not tmp then
28507: LD_VAR 0 4
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28575
// for i in tmp do
28516: LD_ADDR_VAR 0 2
28520: PUSH
28521: LD_VAR 0 4
28525: PUSH
28526: FOR_IN
28527: IFFALSE 28573
// for j = 1 to 3 do
28529: LD_ADDR_VAR 0 3
28533: PUSH
28534: DOUBLE
28535: LD_INT 1
28537: DEC
28538: ST_TO_ADDR
28539: LD_INT 3
28541: PUSH
28542: FOR_TO
28543: IFFALSE 28569
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28545: LD_VAR 0 2
28549: PPUSH
28550: CALL_OW 274
28554: PPUSH
28555: LD_VAR 0 3
28559: PPUSH
28560: LD_INT 99999
28562: PPUSH
28563: CALL_OW 277
28567: GO 28542
28569: POP
28570: POP
28571: GO 28526
28573: POP
28574: POP
// end ;
28575: LD_VAR 0 1
28579: RET
// export function hHackSetLevel10 ; var i , j ; begin
28580: LD_INT 0
28582: PPUSH
28583: PPUSH
28584: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28585: LD_ADDR_VAR 0 2
28589: PUSH
28590: LD_INT 21
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PPUSH
28600: CALL_OW 69
28604: PUSH
28605: FOR_IN
28606: IFFALSE 28658
// if IsSelected ( i ) then
28608: LD_VAR 0 2
28612: PPUSH
28613: CALL_OW 306
28617: IFFALSE 28656
// begin for j := 1 to 4 do
28619: LD_ADDR_VAR 0 3
28623: PUSH
28624: DOUBLE
28625: LD_INT 1
28627: DEC
28628: ST_TO_ADDR
28629: LD_INT 4
28631: PUSH
28632: FOR_TO
28633: IFFALSE 28654
// SetSkill ( i , j , 10 ) ;
28635: LD_VAR 0 2
28639: PPUSH
28640: LD_VAR 0 3
28644: PPUSH
28645: LD_INT 10
28647: PPUSH
28648: CALL_OW 237
28652: GO 28632
28654: POP
28655: POP
// end ;
28656: GO 28605
28658: POP
28659: POP
// end ;
28660: LD_VAR 0 1
28664: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
28669: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28670: LD_ADDR_VAR 0 2
28674: PUSH
28675: LD_INT 22
28677: PUSH
28678: LD_OWVAR 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 21
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PPUSH
28701: CALL_OW 69
28705: PUSH
28706: FOR_IN
28707: IFFALSE 28748
// begin for j := 1 to 4 do
28709: LD_ADDR_VAR 0 3
28713: PUSH
28714: DOUBLE
28715: LD_INT 1
28717: DEC
28718: ST_TO_ADDR
28719: LD_INT 4
28721: PUSH
28722: FOR_TO
28723: IFFALSE 28744
// SetSkill ( i , j , 10 ) ;
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_VAR 0 3
28734: PPUSH
28735: LD_INT 10
28737: PPUSH
28738: CALL_OW 237
28742: GO 28722
28744: POP
28745: POP
// end ;
28746: GO 28706
28748: POP
28749: POP
// end ;
28750: LD_VAR 0 1
28754: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28755: LD_INT 0
28757: PPUSH
// uc_side := your_side ;
28758: LD_ADDR_OWVAR 20
28762: PUSH
28763: LD_OWVAR 2
28767: ST_TO_ADDR
// uc_nation := nation ;
28768: LD_ADDR_OWVAR 21
28772: PUSH
28773: LD_VAR 0 1
28777: ST_TO_ADDR
// InitHc ;
28778: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28782: LD_INT 0
28784: PPUSH
28785: LD_VAR 0 2
28789: PPUSH
28790: LD_VAR 0 3
28794: PPUSH
28795: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28799: LD_VAR 0 4
28803: PPUSH
28804: LD_VAR 0 5
28808: PPUSH
28809: CALL_OW 428
28813: PUSH
28814: LD_INT 0
28816: EQUAL
28817: IFFALSE 28841
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28819: CALL_OW 44
28823: PPUSH
28824: LD_VAR 0 4
28828: PPUSH
28829: LD_VAR 0 5
28833: PPUSH
28834: LD_INT 1
28836: PPUSH
28837: CALL_OW 48
// end ;
28841: LD_VAR 0 6
28845: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28846: LD_INT 0
28848: PPUSH
28849: PPUSH
// uc_side := your_side ;
28850: LD_ADDR_OWVAR 20
28854: PUSH
28855: LD_OWVAR 2
28859: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28860: LD_VAR 0 1
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: LD_INT 2
28870: PUSH
28871: LD_INT 3
28873: PUSH
28874: LD_INT 4
28876: PUSH
28877: LD_INT 5
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: IN
28887: IFFALSE 28899
// uc_nation := nation_american else
28889: LD_ADDR_OWVAR 21
28893: PUSH
28894: LD_INT 1
28896: ST_TO_ADDR
28897: GO 28942
// if chassis in [ 11 , 12 , 13 , 14 ] then
28899: LD_VAR 0 1
28903: PUSH
28904: LD_INT 11
28906: PUSH
28907: LD_INT 12
28909: PUSH
28910: LD_INT 13
28912: PUSH
28913: LD_INT 14
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: IN
28922: IFFALSE 28934
// uc_nation := nation_arabian else
28924: LD_ADDR_OWVAR 21
28928: PUSH
28929: LD_INT 2
28931: ST_TO_ADDR
28932: GO 28942
// uc_nation := nation_russian ;
28934: LD_ADDR_OWVAR 21
28938: PUSH
28939: LD_INT 3
28941: ST_TO_ADDR
// vc_chassis := chassis ;
28942: LD_ADDR_OWVAR 37
28946: PUSH
28947: LD_VAR 0 1
28951: ST_TO_ADDR
// vc_engine := engine ;
28952: LD_ADDR_OWVAR 39
28956: PUSH
28957: LD_VAR 0 2
28961: ST_TO_ADDR
// vc_control := control ;
28962: LD_ADDR_OWVAR 38
28966: PUSH
28967: LD_VAR 0 3
28971: ST_TO_ADDR
// vc_weapon := weapon ;
28972: LD_ADDR_OWVAR 40
28976: PUSH
28977: LD_VAR 0 4
28981: ST_TO_ADDR
// un := CreateVehicle ;
28982: LD_ADDR_VAR 0 8
28986: PUSH
28987: CALL_OW 45
28991: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28992: LD_VAR 0 8
28996: PPUSH
28997: LD_INT 0
28999: PPUSH
29000: LD_INT 5
29002: PPUSH
29003: CALL_OW 12
29007: PPUSH
29008: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29012: LD_VAR 0 8
29016: PPUSH
29017: LD_VAR 0 5
29021: PPUSH
29022: LD_VAR 0 6
29026: PPUSH
29027: LD_INT 1
29029: PPUSH
29030: CALL_OW 48
// end ;
29034: LD_VAR 0 7
29038: RET
// export hInvincible ; every 1 do
29039: GO 29041
29041: DISABLE
// hInvincible := [ ] ;
29042: LD_ADDR_EXP 114
29046: PUSH
29047: EMPTY
29048: ST_TO_ADDR
29049: END
// every 10 do var i ;
29050: GO 29052
29052: DISABLE
29053: LD_INT 0
29055: PPUSH
// begin enable ;
29056: ENABLE
// if not hInvincible then
29057: LD_EXP 114
29061: NOT
29062: IFFALSE 29066
// exit ;
29064: GO 29110
// for i in hInvincible do
29066: LD_ADDR_VAR 0 1
29070: PUSH
29071: LD_EXP 114
29075: PUSH
29076: FOR_IN
29077: IFFALSE 29108
// if GetLives ( i ) < 1000 then
29079: LD_VAR 0 1
29083: PPUSH
29084: CALL_OW 256
29088: PUSH
29089: LD_INT 1000
29091: LESS
29092: IFFALSE 29106
// SetLives ( i , 1000 ) ;
29094: LD_VAR 0 1
29098: PPUSH
29099: LD_INT 1000
29101: PPUSH
29102: CALL_OW 234
29106: GO 29076
29108: POP
29109: POP
// end ;
29110: PPOPN 1
29112: END
// export function hHackInvincible ; var i ; begin
29113: LD_INT 0
29115: PPUSH
29116: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29117: LD_ADDR_VAR 0 2
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 21
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 21
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: LIST
29149: PPUSH
29150: CALL_OW 69
29154: PUSH
29155: FOR_IN
29156: IFFALSE 29217
// if IsSelected ( i ) then
29158: LD_VAR 0 2
29162: PPUSH
29163: CALL_OW 306
29167: IFFALSE 29215
// begin if i in hInvincible then
29169: LD_VAR 0 2
29173: PUSH
29174: LD_EXP 114
29178: IN
29179: IFFALSE 29199
// hInvincible := hInvincible diff i else
29181: LD_ADDR_EXP 114
29185: PUSH
29186: LD_EXP 114
29190: PUSH
29191: LD_VAR 0 2
29195: DIFF
29196: ST_TO_ADDR
29197: GO 29215
// hInvincible := hInvincible union i ;
29199: LD_ADDR_EXP 114
29203: PUSH
29204: LD_EXP 114
29208: PUSH
29209: LD_VAR 0 2
29213: UNION
29214: ST_TO_ADDR
// end ;
29215: GO 29155
29217: POP
29218: POP
// end ;
29219: LD_VAR 0 1
29223: RET
// export function hHackInvisible ; var i , j ; begin
29224: LD_INT 0
29226: PPUSH
29227: PPUSH
29228: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29229: LD_ADDR_VAR 0 2
29233: PUSH
29234: LD_INT 21
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 69
29248: PUSH
29249: FOR_IN
29250: IFFALSE 29274
// if IsSelected ( i ) then
29252: LD_VAR 0 2
29256: PPUSH
29257: CALL_OW 306
29261: IFFALSE 29272
// ComForceInvisible ( i ) ;
29263: LD_VAR 0 2
29267: PPUSH
29268: CALL_OW 496
29272: GO 29249
29274: POP
29275: POP
// end ;
29276: LD_VAR 0 1
29280: RET
// export function hHackChangeYourSide ; begin
29281: LD_INT 0
29283: PPUSH
// if your_side = 8 then
29284: LD_OWVAR 2
29288: PUSH
29289: LD_INT 8
29291: EQUAL
29292: IFFALSE 29304
// your_side := 0 else
29294: LD_ADDR_OWVAR 2
29298: PUSH
29299: LD_INT 0
29301: ST_TO_ADDR
29302: GO 29318
// your_side := your_side + 1 ;
29304: LD_ADDR_OWVAR 2
29308: PUSH
29309: LD_OWVAR 2
29313: PUSH
29314: LD_INT 1
29316: PLUS
29317: ST_TO_ADDR
// end ;
29318: LD_VAR 0 1
29322: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29323: LD_INT 0
29325: PPUSH
29326: PPUSH
29327: PPUSH
// for i in all_units do
29328: LD_ADDR_VAR 0 2
29332: PUSH
29333: LD_OWVAR 3
29337: PUSH
29338: FOR_IN
29339: IFFALSE 29417
// if IsSelected ( i ) then
29341: LD_VAR 0 2
29345: PPUSH
29346: CALL_OW 306
29350: IFFALSE 29415
// begin j := GetSide ( i ) ;
29352: LD_ADDR_VAR 0 3
29356: PUSH
29357: LD_VAR 0 2
29361: PPUSH
29362: CALL_OW 255
29366: ST_TO_ADDR
// if j = 8 then
29367: LD_VAR 0 3
29371: PUSH
29372: LD_INT 8
29374: EQUAL
29375: IFFALSE 29387
// j := 0 else
29377: LD_ADDR_VAR 0 3
29381: PUSH
29382: LD_INT 0
29384: ST_TO_ADDR
29385: GO 29401
// j := j + 1 ;
29387: LD_ADDR_VAR 0 3
29391: PUSH
29392: LD_VAR 0 3
29396: PUSH
29397: LD_INT 1
29399: PLUS
29400: ST_TO_ADDR
// SetSide ( i , j ) ;
29401: LD_VAR 0 2
29405: PPUSH
29406: LD_VAR 0 3
29410: PPUSH
29411: CALL_OW 235
// end ;
29415: GO 29338
29417: POP
29418: POP
// end ;
29419: LD_VAR 0 1
29423: RET
// export function hHackFog ; begin
29424: LD_INT 0
29426: PPUSH
// FogOff ( true ) ;
29427: LD_INT 1
29429: PPUSH
29430: CALL_OW 344
// end ;
29434: LD_VAR 0 1
29438: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29439: LD_INT 0
29441: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29442: LD_VAR 0 1
29446: PPUSH
29447: LD_VAR 0 2
29451: PPUSH
29452: LD_VAR 0 3
29456: PPUSH
29457: LD_INT 1
29459: PPUSH
29460: LD_INT 1
29462: PPUSH
29463: CALL_OW 483
// CenterOnXY ( x , y ) ;
29467: LD_VAR 0 2
29471: PPUSH
29472: LD_VAR 0 3
29476: PPUSH
29477: CALL_OW 84
// end ; end_of_file
29481: LD_VAR 0 4
29485: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29486: LD_INT 0
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29492: LD_VAR 0 1
29496: PPUSH
29497: CALL_OW 264
29501: PUSH
29502: LD_EXP 42
29506: EQUAL
29507: IFFALSE 29579
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29509: LD_INT 68
29511: PPUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL_OW 255
29521: PPUSH
29522: CALL_OW 321
29526: PUSH
29527: LD_INT 2
29529: EQUAL
29530: IFFALSE 29542
// eff := 70 else
29532: LD_ADDR_VAR 0 4
29536: PUSH
29537: LD_INT 70
29539: ST_TO_ADDR
29540: GO 29550
// eff := 30 ;
29542: LD_ADDR_VAR 0 4
29546: PUSH
29547: LD_INT 30
29549: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29550: LD_VAR 0 1
29554: PPUSH
29555: CALL_OW 250
29559: PPUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 251
29569: PPUSH
29570: LD_VAR 0 4
29574: PPUSH
29575: CALL_OW 495
// end ; end ;
29579: LD_VAR 0 2
29583: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29584: LD_INT 0
29586: PPUSH
// end ;
29587: LD_VAR 0 4
29591: RET
// export function SOS_Command ( cmd ) ; begin
29592: LD_INT 0
29594: PPUSH
// end ;
29595: LD_VAR 0 2
29599: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29600: LD_INT 0
29602: PPUSH
// end ;
29603: LD_VAR 0 6
29607: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
29608: LD_INT 0
29610: PPUSH
29611: PPUSH
// if not vehicle or not factory then
29612: LD_VAR 0 1
29616: NOT
29617: PUSH
29618: LD_VAR 0 2
29622: NOT
29623: OR
29624: IFFALSE 29628
// exit ;
29626: GO 29859
// if factoryWaypoints >= factory then
29628: LD_EXP 115
29632: PUSH
29633: LD_VAR 0 2
29637: GREATEREQUAL
29638: IFFALSE 29859
// if factoryWaypoints [ factory ] then
29640: LD_EXP 115
29644: PUSH
29645: LD_VAR 0 2
29649: ARRAY
29650: IFFALSE 29859
// begin if GetControl ( vehicle ) = control_manual then
29652: LD_VAR 0 1
29656: PPUSH
29657: CALL_OW 263
29661: PUSH
29662: LD_INT 1
29664: EQUAL
29665: IFFALSE 29746
// begin driver := IsDrivenBy ( vehicle ) ;
29667: LD_ADDR_VAR 0 4
29671: PUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 311
29681: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
29682: LD_VAR 0 4
29686: PPUSH
29687: LD_EXP 115
29691: PUSH
29692: LD_VAR 0 2
29696: ARRAY
29697: PUSH
29698: LD_INT 1
29700: ARRAY
29701: PPUSH
29702: LD_EXP 115
29706: PUSH
29707: LD_VAR 0 2
29711: ARRAY
29712: PUSH
29713: LD_INT 2
29715: ARRAY
29716: PPUSH
29717: CALL_OW 171
// AddComExitVehicle ( driver ) ;
29721: LD_VAR 0 4
29725: PPUSH
29726: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
29730: LD_VAR 0 4
29734: PPUSH
29735: LD_VAR 0 2
29739: PPUSH
29740: CALL_OW 180
// end else
29744: GO 29859
// if GetControl ( vehicle ) = control_remote then
29746: LD_VAR 0 1
29750: PPUSH
29751: CALL_OW 263
29755: PUSH
29756: LD_INT 2
29758: EQUAL
29759: IFFALSE 29820
// begin wait ( 0 0$2 ) ;
29761: LD_INT 70
29763: PPUSH
29764: CALL_OW 67
// if Connect ( vehicle ) then
29768: LD_VAR 0 1
29772: PPUSH
29773: CALL 42083 0 1
29777: IFFALSE 29818
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
29779: LD_VAR 0 1
29783: PPUSH
29784: LD_EXP 115
29788: PUSH
29789: LD_VAR 0 2
29793: ARRAY
29794: PUSH
29795: LD_INT 1
29797: ARRAY
29798: PPUSH
29799: LD_EXP 115
29803: PUSH
29804: LD_VAR 0 2
29808: ARRAY
29809: PUSH
29810: LD_INT 2
29812: ARRAY
29813: PPUSH
29814: CALL_OW 171
// end else
29818: GO 29859
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_EXP 115
29829: PUSH
29830: LD_VAR 0 2
29834: ARRAY
29835: PUSH
29836: LD_INT 1
29838: ARRAY
29839: PPUSH
29840: LD_EXP 115
29844: PUSH
29845: LD_VAR 0 2
29849: ARRAY
29850: PUSH
29851: LD_INT 2
29853: ARRAY
29854: PPUSH
29855: CALL_OW 171
// end ; end ;
29859: LD_VAR 0 3
29863: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29864: LD_INT 0
29866: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29867: LD_VAR 0 1
29871: PUSH
29872: LD_INT 250
29874: EQUAL
29875: PUSH
29876: LD_VAR 0 2
29880: PPUSH
29881: CALL_OW 264
29885: PUSH
29886: LD_EXP 45
29890: EQUAL
29891: AND
29892: IFFALSE 29913
// MinerPlaceMine ( unit , x , y ) ;
29894: LD_VAR 0 2
29898: PPUSH
29899: LD_VAR 0 4
29903: PPUSH
29904: LD_VAR 0 5
29908: PPUSH
29909: CALL 32641 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29913: LD_VAR 0 1
29917: PUSH
29918: LD_INT 251
29920: EQUAL
29921: PUSH
29922: LD_VAR 0 2
29926: PPUSH
29927: CALL_OW 264
29931: PUSH
29932: LD_EXP 45
29936: EQUAL
29937: AND
29938: IFFALSE 29959
// MinerDetonateMine ( unit , x , y ) ;
29940: LD_VAR 0 2
29944: PPUSH
29945: LD_VAR 0 4
29949: PPUSH
29950: LD_VAR 0 5
29954: PPUSH
29955: CALL 32918 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29959: LD_VAR 0 1
29963: PUSH
29964: LD_INT 252
29966: EQUAL
29967: PUSH
29968: LD_VAR 0 2
29972: PPUSH
29973: CALL_OW 264
29977: PUSH
29978: LD_EXP 45
29982: EQUAL
29983: AND
29984: IFFALSE 30005
// MinerCreateMinefield ( unit , x , y ) ;
29986: LD_VAR 0 2
29990: PPUSH
29991: LD_VAR 0 4
29995: PPUSH
29996: LD_VAR 0 5
30000: PPUSH
30001: CALL 33335 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30005: LD_VAR 0 1
30009: PUSH
30010: LD_INT 253
30012: EQUAL
30013: PUSH
30014: LD_VAR 0 2
30018: PPUSH
30019: CALL_OW 257
30023: PUSH
30024: LD_INT 5
30026: EQUAL
30027: AND
30028: IFFALSE 30049
// ComBinocular ( unit , x , y ) ;
30030: LD_VAR 0 2
30034: PPUSH
30035: LD_VAR 0 4
30039: PPUSH
30040: LD_VAR 0 5
30044: PPUSH
30045: CALL 33706 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30049: LD_VAR 0 1
30053: PUSH
30054: LD_INT 254
30056: EQUAL
30057: PUSH
30058: LD_VAR 0 2
30062: PPUSH
30063: CALL_OW 264
30067: PUSH
30068: LD_EXP 40
30072: EQUAL
30073: AND
30074: PUSH
30075: LD_VAR 0 3
30079: PPUSH
30080: CALL_OW 263
30084: PUSH
30085: LD_INT 3
30087: EQUAL
30088: AND
30089: IFFALSE 30105
// HackDestroyVehicle ( unit , selectedUnit ) ;
30091: LD_VAR 0 2
30095: PPUSH
30096: LD_VAR 0 3
30100: PPUSH
30101: CALL 32001 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30105: LD_VAR 0 1
30109: PUSH
30110: LD_INT 255
30112: EQUAL
30113: PUSH
30114: LD_VAR 0 2
30118: PPUSH
30119: CALL_OW 264
30123: PUSH
30124: LD_INT 14
30126: PUSH
30127: LD_INT 53
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: IN
30134: AND
30135: PUSH
30136: LD_VAR 0 4
30140: PPUSH
30141: LD_VAR 0 5
30145: PPUSH
30146: CALL_OW 488
30150: AND
30151: IFFALSE 30175
// CutTreeXYR ( unit , x , y , 12 ) ;
30153: LD_VAR 0 2
30157: PPUSH
30158: LD_VAR 0 4
30162: PPUSH
30163: LD_VAR 0 5
30167: PPUSH
30168: LD_INT 12
30170: PPUSH
30171: CALL 30567 0 4
// if cmd = 256 then
30175: LD_VAR 0 1
30179: PUSH
30180: LD_INT 256
30182: EQUAL
30183: IFFALSE 30204
// SetFactoryWaypoint ( unit , x , y ) ;
30185: LD_VAR 0 2
30189: PPUSH
30190: LD_VAR 0 4
30194: PPUSH
30195: LD_VAR 0 5
30199: PPUSH
30200: CALL 30209 0 3
// end ;
30204: LD_VAR 0 6
30208: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30209: LD_INT 0
30211: PPUSH
30212: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30213: LD_VAR 0 1
30217: NOT
30218: PUSH
30219: LD_VAR 0 2
30223: PPUSH
30224: LD_VAR 0 3
30228: PPUSH
30229: CALL_OW 488
30233: NOT
30234: OR
30235: PUSH
30236: LD_VAR 0 1
30240: PPUSH
30241: CALL_OW 266
30245: PUSH
30246: LD_INT 3
30248: NONEQUAL
30249: PUSH
30250: LD_VAR 0 1
30254: PPUSH
30255: CALL_OW 247
30259: PUSH
30260: LD_INT 1
30262: EQUAL
30263: NOT
30264: AND
30265: OR
30266: IFFALSE 30270
// exit ;
30268: GO 30419
// if GetType ( factory ) = unit_human then
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 247
30279: PUSH
30280: LD_INT 1
30282: EQUAL
30283: IFFALSE 30300
// factory := IsInUnit ( factory ) ;
30285: LD_ADDR_VAR 0 1
30289: PUSH
30290: LD_VAR 0 1
30294: PPUSH
30295: CALL_OW 310
30299: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 266
30309: PUSH
30310: LD_INT 3
30312: NONEQUAL
30313: IFFALSE 30317
// exit ;
30315: GO 30419
// if HexInfo ( x , y ) = factory then
30317: LD_VAR 0 2
30321: PPUSH
30322: LD_VAR 0 3
30326: PPUSH
30327: CALL_OW 428
30331: PUSH
30332: LD_VAR 0 1
30336: EQUAL
30337: IFFALSE 30364
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30339: LD_ADDR_EXP 115
30343: PUSH
30344: LD_EXP 115
30348: PPUSH
30349: LD_VAR 0 1
30353: PPUSH
30354: LD_INT 0
30356: PPUSH
30357: CALL_OW 1
30361: ST_TO_ADDR
30362: GO 30415
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30364: LD_ADDR_EXP 115
30368: PUSH
30369: LD_EXP 115
30373: PPUSH
30374: LD_VAR 0 1
30378: PPUSH
30379: LD_VAR 0 1
30383: PPUSH
30384: CALL_OW 255
30388: PUSH
30389: LD_VAR 0 1
30393: PUSH
30394: LD_VAR 0 2
30398: PUSH
30399: LD_VAR 0 3
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: PPUSH
30410: CALL_OW 1
30414: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30415: CALL 30424 0 0
// end ;
30419: LD_VAR 0 4
30423: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
30424: LD_INT 0
30426: PPUSH
30427: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30428: LD_STRING resetFactoryWaypoint();
30430: PPUSH
30431: CALL_OW 559
// if factoryWaypoints then
30435: LD_EXP 115
30439: IFFALSE 30562
// begin for i := 1 to factoryWaypoints do
30441: LD_ADDR_VAR 0 2
30445: PUSH
30446: DOUBLE
30447: LD_INT 1
30449: DEC
30450: ST_TO_ADDR
30451: LD_EXP 115
30455: PUSH
30456: FOR_TO
30457: IFFALSE 30560
// if factoryWaypoints [ i ] then
30459: LD_EXP 115
30463: PUSH
30464: LD_VAR 0 2
30468: ARRAY
30469: IFFALSE 30558
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
30471: LD_STRING setFactoryWaypointXY(
30473: PUSH
30474: LD_EXP 115
30478: PUSH
30479: LD_VAR 0 2
30483: ARRAY
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: STR
30489: PUSH
30490: LD_STRING ,
30492: STR
30493: PUSH
30494: LD_EXP 115
30498: PUSH
30499: LD_VAR 0 2
30503: ARRAY
30504: PUSH
30505: LD_INT 2
30507: ARRAY
30508: STR
30509: PUSH
30510: LD_STRING ,
30512: STR
30513: PUSH
30514: LD_EXP 115
30518: PUSH
30519: LD_VAR 0 2
30523: ARRAY
30524: PUSH
30525: LD_INT 3
30527: ARRAY
30528: STR
30529: PUSH
30530: LD_STRING ,
30532: STR
30533: PUSH
30534: LD_EXP 115
30538: PUSH
30539: LD_VAR 0 2
30543: ARRAY
30544: PUSH
30545: LD_INT 4
30547: ARRAY
30548: STR
30549: PUSH
30550: LD_STRING )
30552: STR
30553: PPUSH
30554: CALL_OW 559
30558: GO 30456
30560: POP
30561: POP
// end ; end ;
30562: LD_VAR 0 1
30566: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30567: LD_INT 0
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
30573: PPUSH
30574: PPUSH
30575: PPUSH
30576: PPUSH
30577: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30578: LD_VAR 0 1
30582: NOT
30583: PUSH
30584: LD_VAR 0 2
30588: PPUSH
30589: LD_VAR 0 3
30593: PPUSH
30594: CALL_OW 488
30598: NOT
30599: OR
30600: PUSH
30601: LD_VAR 0 4
30605: NOT
30606: OR
30607: IFFALSE 30611
// exit ;
30609: GO 30951
// list := [ ] ;
30611: LD_ADDR_VAR 0 13
30615: PUSH
30616: EMPTY
30617: ST_TO_ADDR
// if x - r < 0 then
30618: LD_VAR 0 2
30622: PUSH
30623: LD_VAR 0 4
30627: MINUS
30628: PUSH
30629: LD_INT 0
30631: LESS
30632: IFFALSE 30644
// min_x := 0 else
30634: LD_ADDR_VAR 0 7
30638: PUSH
30639: LD_INT 0
30641: ST_TO_ADDR
30642: GO 30660
// min_x := x - r ;
30644: LD_ADDR_VAR 0 7
30648: PUSH
30649: LD_VAR 0 2
30653: PUSH
30654: LD_VAR 0 4
30658: MINUS
30659: ST_TO_ADDR
// if y - r < 0 then
30660: LD_VAR 0 3
30664: PUSH
30665: LD_VAR 0 4
30669: MINUS
30670: PUSH
30671: LD_INT 0
30673: LESS
30674: IFFALSE 30686
// min_y := 0 else
30676: LD_ADDR_VAR 0 8
30680: PUSH
30681: LD_INT 0
30683: ST_TO_ADDR
30684: GO 30702
// min_y := y - r ;
30686: LD_ADDR_VAR 0 8
30690: PUSH
30691: LD_VAR 0 3
30695: PUSH
30696: LD_VAR 0 4
30700: MINUS
30701: ST_TO_ADDR
// max_x := x + r ;
30702: LD_ADDR_VAR 0 9
30706: PUSH
30707: LD_VAR 0 2
30711: PUSH
30712: LD_VAR 0 4
30716: PLUS
30717: ST_TO_ADDR
// max_y := y + r ;
30718: LD_ADDR_VAR 0 10
30722: PUSH
30723: LD_VAR 0 3
30727: PUSH
30728: LD_VAR 0 4
30732: PLUS
30733: ST_TO_ADDR
// for _x = min_x to max_x do
30734: LD_ADDR_VAR 0 11
30738: PUSH
30739: DOUBLE
30740: LD_VAR 0 7
30744: DEC
30745: ST_TO_ADDR
30746: LD_VAR 0 9
30750: PUSH
30751: FOR_TO
30752: IFFALSE 30869
// for _y = min_y to max_y do
30754: LD_ADDR_VAR 0 12
30758: PUSH
30759: DOUBLE
30760: LD_VAR 0 8
30764: DEC
30765: ST_TO_ADDR
30766: LD_VAR 0 10
30770: PUSH
30771: FOR_TO
30772: IFFALSE 30865
// begin if not ValidHex ( _x , _y ) then
30774: LD_VAR 0 11
30778: PPUSH
30779: LD_VAR 0 12
30783: PPUSH
30784: CALL_OW 488
30788: NOT
30789: IFFALSE 30793
// continue ;
30791: GO 30771
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30793: LD_VAR 0 11
30797: PPUSH
30798: LD_VAR 0 12
30802: PPUSH
30803: CALL_OW 351
30807: PUSH
30808: LD_VAR 0 11
30812: PPUSH
30813: LD_VAR 0 12
30817: PPUSH
30818: CALL_OW 554
30822: AND
30823: IFFALSE 30863
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30825: LD_ADDR_VAR 0 13
30829: PUSH
30830: LD_VAR 0 13
30834: PPUSH
30835: LD_VAR 0 13
30839: PUSH
30840: LD_INT 1
30842: PLUS
30843: PPUSH
30844: LD_VAR 0 11
30848: PUSH
30849: LD_VAR 0 12
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PPUSH
30858: CALL_OW 2
30862: ST_TO_ADDR
// end ;
30863: GO 30771
30865: POP
30866: POP
30867: GO 30751
30869: POP
30870: POP
// if not list then
30871: LD_VAR 0 13
30875: NOT
30876: IFFALSE 30880
// exit ;
30878: GO 30951
// for i in list do
30880: LD_ADDR_VAR 0 6
30884: PUSH
30885: LD_VAR 0 13
30889: PUSH
30890: FOR_IN
30891: IFFALSE 30949
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30893: LD_VAR 0 1
30897: PPUSH
30898: LD_STRING M
30900: PUSH
30901: LD_VAR 0 6
30905: PUSH
30906: LD_INT 1
30908: ARRAY
30909: PUSH
30910: LD_VAR 0 6
30914: PUSH
30915: LD_INT 2
30917: ARRAY
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: PUSH
30940: EMPTY
30941: LIST
30942: PPUSH
30943: CALL_OW 447
30947: GO 30890
30949: POP
30950: POP
// end ;
30951: LD_VAR 0 5
30955: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30956: LD_EXP 116
30960: NOT
30961: IFFALSE 31011
30963: GO 30965
30965: DISABLE
// begin initHack := true ;
30966: LD_ADDR_EXP 116
30970: PUSH
30971: LD_INT 1
30973: ST_TO_ADDR
// hackTanks := [ ] ;
30974: LD_ADDR_EXP 117
30978: PUSH
30979: EMPTY
30980: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30981: LD_ADDR_EXP 118
30985: PUSH
30986: EMPTY
30987: ST_TO_ADDR
// hackLimit := 3 ;
30988: LD_ADDR_EXP 119
30992: PUSH
30993: LD_INT 3
30995: ST_TO_ADDR
// hackDist := 12 ;
30996: LD_ADDR_EXP 120
31000: PUSH
31001: LD_INT 12
31003: ST_TO_ADDR
// hackCounter := [ ] ;
31004: LD_ADDR_EXP 121
31008: PUSH
31009: EMPTY
31010: ST_TO_ADDR
// end ;
31011: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31012: LD_EXP 116
31016: PUSH
31017: LD_INT 34
31019: PUSH
31020: LD_EXP 40
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PPUSH
31029: CALL_OW 69
31033: AND
31034: IFFALSE 31289
31036: GO 31038
31038: DISABLE
31039: LD_INT 0
31041: PPUSH
31042: PPUSH
// begin enable ;
31043: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31044: LD_ADDR_VAR 0 1
31048: PUSH
31049: LD_INT 34
31051: PUSH
31052: LD_EXP 40
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PPUSH
31061: CALL_OW 69
31065: PUSH
31066: FOR_IN
31067: IFFALSE 31287
// begin if not i in hackTanks then
31069: LD_VAR 0 1
31073: PUSH
31074: LD_EXP 117
31078: IN
31079: NOT
31080: IFFALSE 31163
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31082: LD_ADDR_EXP 117
31086: PUSH
31087: LD_EXP 117
31091: PPUSH
31092: LD_EXP 117
31096: PUSH
31097: LD_INT 1
31099: PLUS
31100: PPUSH
31101: LD_VAR 0 1
31105: PPUSH
31106: CALL_OW 1
31110: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31111: LD_ADDR_EXP 118
31115: PUSH
31116: LD_EXP 118
31120: PPUSH
31121: LD_EXP 118
31125: PUSH
31126: LD_INT 1
31128: PLUS
31129: PPUSH
31130: EMPTY
31131: PPUSH
31132: CALL_OW 1
31136: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31137: LD_ADDR_EXP 121
31141: PUSH
31142: LD_EXP 121
31146: PPUSH
31147: LD_EXP 121
31151: PUSH
31152: LD_INT 1
31154: PLUS
31155: PPUSH
31156: EMPTY
31157: PPUSH
31158: CALL_OW 1
31162: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31163: LD_VAR 0 1
31167: PPUSH
31168: CALL_OW 302
31172: NOT
31173: IFFALSE 31186
// begin HackUnlinkAll ( i ) ;
31175: LD_VAR 0 1
31179: PPUSH
31180: CALL 31292 0 1
// continue ;
31184: GO 31066
// end ; HackCheckCapturedStatus ( i ) ;
31186: LD_VAR 0 1
31190: PPUSH
31191: CALL 31735 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_INT 81
31202: PUSH
31203: LD_VAR 0 1
31207: PPUSH
31208: CALL_OW 255
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 33
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 91
31229: PUSH
31230: LD_VAR 0 1
31234: PUSH
31235: LD_EXP 120
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 50
31247: PUSH
31248: EMPTY
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: PPUSH
31257: CALL_OW 69
31261: ST_TO_ADDR
// if not tmp then
31262: LD_VAR 0 2
31266: NOT
31267: IFFALSE 31271
// continue ;
31269: GO 31066
// HackLink ( i , tmp ) ;
31271: LD_VAR 0 1
31275: PPUSH
31276: LD_VAR 0 2
31280: PPUSH
31281: CALL 31428 0 2
// end ;
31285: GO 31066
31287: POP
31288: POP
// end ;
31289: PPOPN 2
31291: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
31296: PPUSH
// if not hack in hackTanks then
31297: LD_VAR 0 1
31301: PUSH
31302: LD_EXP 117
31306: IN
31307: NOT
31308: IFFALSE 31312
// exit ;
31310: GO 31423
// index := GetElementIndex ( hackTanks , hack ) ;
31312: LD_ADDR_VAR 0 4
31316: PUSH
31317: LD_EXP 117
31321: PPUSH
31322: LD_VAR 0 1
31326: PPUSH
31327: CALL 38897 0 2
31331: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31332: LD_EXP 118
31336: PUSH
31337: LD_VAR 0 4
31341: ARRAY
31342: IFFALSE 31423
// begin for i in hackTanksCaptured [ index ] do
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_EXP 118
31353: PUSH
31354: LD_VAR 0 4
31358: ARRAY
31359: PUSH
31360: FOR_IN
31361: IFFALSE 31387
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31363: LD_VAR 0 3
31367: PUSH
31368: LD_INT 1
31370: ARRAY
31371: PPUSH
31372: LD_VAR 0 3
31376: PUSH
31377: LD_INT 2
31379: ARRAY
31380: PPUSH
31381: CALL_OW 235
31385: GO 31360
31387: POP
31388: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31389: LD_ADDR_EXP 118
31393: PUSH
31394: LD_EXP 118
31398: PPUSH
31399: LD_VAR 0 4
31403: PPUSH
31404: EMPTY
31405: PPUSH
31406: CALL_OW 1
31410: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31411: LD_VAR 0 1
31415: PPUSH
31416: LD_INT 0
31418: PPUSH
31419: CALL_OW 505
// end ; end ;
31423: LD_VAR 0 2
31427: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31428: LD_INT 0
31430: PPUSH
31431: PPUSH
31432: PPUSH
// if not hack in hackTanks or not vehicles then
31433: LD_VAR 0 1
31437: PUSH
31438: LD_EXP 117
31442: IN
31443: NOT
31444: PUSH
31445: LD_VAR 0 2
31449: NOT
31450: OR
31451: IFFALSE 31455
// exit ;
31453: GO 31730
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31455: LD_ADDR_VAR 0 2
31459: PUSH
31460: LD_VAR 0 1
31464: PPUSH
31465: LD_VAR 0 2
31469: PPUSH
31470: LD_INT 1
31472: PPUSH
31473: LD_INT 1
31475: PPUSH
31476: CALL 39547 0 4
31480: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31481: LD_ADDR_VAR 0 5
31485: PUSH
31486: LD_EXP 117
31490: PPUSH
31491: LD_VAR 0 1
31495: PPUSH
31496: CALL 38897 0 2
31500: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31501: LD_EXP 118
31505: PUSH
31506: LD_VAR 0 5
31510: ARRAY
31511: PUSH
31512: LD_EXP 119
31516: LESS
31517: IFFALSE 31706
// begin for i := 1 to vehicles do
31519: LD_ADDR_VAR 0 4
31523: PUSH
31524: DOUBLE
31525: LD_INT 1
31527: DEC
31528: ST_TO_ADDR
31529: LD_VAR 0 2
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31704
// begin if hackTanksCaptured [ index ] = hackLimit then
31537: LD_EXP 118
31541: PUSH
31542: LD_VAR 0 5
31546: ARRAY
31547: PUSH
31548: LD_EXP 119
31552: EQUAL
31553: IFFALSE 31557
// break ;
31555: GO 31704
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31557: LD_ADDR_EXP 121
31561: PUSH
31562: LD_EXP 121
31566: PPUSH
31567: LD_VAR 0 5
31571: PPUSH
31572: LD_EXP 121
31576: PUSH
31577: LD_VAR 0 5
31581: ARRAY
31582: PUSH
31583: LD_INT 1
31585: PLUS
31586: PPUSH
31587: CALL_OW 1
31591: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31592: LD_ADDR_EXP 118
31596: PUSH
31597: LD_EXP 118
31601: PPUSH
31602: LD_VAR 0 5
31606: PUSH
31607: LD_EXP 118
31611: PUSH
31612: LD_VAR 0 5
31616: ARRAY
31617: PUSH
31618: LD_INT 1
31620: PLUS
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PPUSH
31626: LD_VAR 0 2
31630: PUSH
31631: LD_VAR 0 4
31635: ARRAY
31636: PUSH
31637: LD_VAR 0 2
31641: PUSH
31642: LD_VAR 0 4
31646: ARRAY
31647: PPUSH
31648: CALL_OW 255
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PPUSH
31657: CALL 39112 0 3
31661: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31662: LD_VAR 0 2
31666: PUSH
31667: LD_VAR 0 4
31671: ARRAY
31672: PPUSH
31673: LD_VAR 0 1
31677: PPUSH
31678: CALL_OW 255
31682: PPUSH
31683: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31687: LD_VAR 0 2
31691: PUSH
31692: LD_VAR 0 4
31696: ARRAY
31697: PPUSH
31698: CALL_OW 141
// end ;
31702: GO 31534
31704: POP
31705: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31706: LD_VAR 0 1
31710: PPUSH
31711: LD_EXP 118
31715: PUSH
31716: LD_VAR 0 5
31720: ARRAY
31721: PUSH
31722: LD_INT 0
31724: PLUS
31725: PPUSH
31726: CALL_OW 505
// end ;
31730: LD_VAR 0 3
31734: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31735: LD_INT 0
31737: PPUSH
31738: PPUSH
31739: PPUSH
31740: PPUSH
// if not hack in hackTanks then
31741: LD_VAR 0 1
31745: PUSH
31746: LD_EXP 117
31750: IN
31751: NOT
31752: IFFALSE 31756
// exit ;
31754: GO 31996
// index := GetElementIndex ( hackTanks , hack ) ;
31756: LD_ADDR_VAR 0 4
31760: PUSH
31761: LD_EXP 117
31765: PPUSH
31766: LD_VAR 0 1
31770: PPUSH
31771: CALL 38897 0 2
31775: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31776: LD_ADDR_VAR 0 3
31780: PUSH
31781: DOUBLE
31782: LD_EXP 118
31786: PUSH
31787: LD_VAR 0 4
31791: ARRAY
31792: INC
31793: ST_TO_ADDR
31794: LD_INT 1
31796: PUSH
31797: FOR_DOWNTO
31798: IFFALSE 31970
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31800: LD_ADDR_VAR 0 5
31804: PUSH
31805: LD_EXP 118
31809: PUSH
31810: LD_VAR 0 4
31814: ARRAY
31815: PUSH
31816: LD_VAR 0 3
31820: ARRAY
31821: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31822: LD_VAR 0 5
31826: PUSH
31827: LD_INT 1
31829: ARRAY
31830: PPUSH
31831: CALL_OW 302
31835: NOT
31836: PUSH
31837: LD_VAR 0 5
31841: PUSH
31842: LD_INT 1
31844: ARRAY
31845: PPUSH
31846: CALL_OW 255
31850: PUSH
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 255
31860: NONEQUAL
31861: OR
31862: IFFALSE 31968
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31864: LD_VAR 0 5
31868: PUSH
31869: LD_INT 1
31871: ARRAY
31872: PPUSH
31873: CALL_OW 305
31877: PUSH
31878: LD_VAR 0 5
31882: PUSH
31883: LD_INT 1
31885: ARRAY
31886: PPUSH
31887: CALL_OW 255
31891: PUSH
31892: LD_VAR 0 1
31896: PPUSH
31897: CALL_OW 255
31901: EQUAL
31902: AND
31903: IFFALSE 31927
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31905: LD_VAR 0 5
31909: PUSH
31910: LD_INT 1
31912: ARRAY
31913: PPUSH
31914: LD_VAR 0 5
31918: PUSH
31919: LD_INT 2
31921: ARRAY
31922: PPUSH
31923: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31927: LD_ADDR_EXP 118
31931: PUSH
31932: LD_EXP 118
31936: PPUSH
31937: LD_VAR 0 4
31941: PPUSH
31942: LD_EXP 118
31946: PUSH
31947: LD_VAR 0 4
31951: ARRAY
31952: PPUSH
31953: LD_VAR 0 3
31957: PPUSH
31958: CALL_OW 3
31962: PPUSH
31963: CALL_OW 1
31967: ST_TO_ADDR
// end ; end ;
31968: GO 31797
31970: POP
31971: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31972: LD_VAR 0 1
31976: PPUSH
31977: LD_EXP 118
31981: PUSH
31982: LD_VAR 0 4
31986: ARRAY
31987: PUSH
31988: LD_INT 0
31990: PLUS
31991: PPUSH
31992: CALL_OW 505
// end ;
31996: LD_VAR 0 2
32000: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32001: LD_INT 0
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
// if not hack in hackTanks then
32007: LD_VAR 0 1
32011: PUSH
32012: LD_EXP 117
32016: IN
32017: NOT
32018: IFFALSE 32022
// exit ;
32020: GO 32107
// index := GetElementIndex ( hackTanks , hack ) ;
32022: LD_ADDR_VAR 0 5
32026: PUSH
32027: LD_EXP 117
32031: PPUSH
32032: LD_VAR 0 1
32036: PPUSH
32037: CALL 38897 0 2
32041: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32042: LD_ADDR_VAR 0 4
32046: PUSH
32047: DOUBLE
32048: LD_INT 1
32050: DEC
32051: ST_TO_ADDR
32052: LD_EXP 118
32056: PUSH
32057: LD_VAR 0 5
32061: ARRAY
32062: PUSH
32063: FOR_TO
32064: IFFALSE 32105
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32066: LD_EXP 118
32070: PUSH
32071: LD_VAR 0 5
32075: ARRAY
32076: PUSH
32077: LD_VAR 0 4
32081: ARRAY
32082: PUSH
32083: LD_INT 1
32085: ARRAY
32086: PUSH
32087: LD_VAR 0 2
32091: EQUAL
32092: IFFALSE 32103
// KillUnit ( vehicle ) ;
32094: LD_VAR 0 2
32098: PPUSH
32099: CALL_OW 66
32103: GO 32063
32105: POP
32106: POP
// end ;
32107: LD_VAR 0 3
32111: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32112: LD_EXP 122
32116: NOT
32117: IFFALSE 32152
32119: GO 32121
32121: DISABLE
// begin initMiner := true ;
32122: LD_ADDR_EXP 122
32126: PUSH
32127: LD_INT 1
32129: ST_TO_ADDR
// minersList := [ ] ;
32130: LD_ADDR_EXP 123
32134: PUSH
32135: EMPTY
32136: ST_TO_ADDR
// minerMinesList := [ ] ;
32137: LD_ADDR_EXP 124
32141: PUSH
32142: EMPTY
32143: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32144: LD_ADDR_EXP 125
32148: PUSH
32149: LD_INT 5
32151: ST_TO_ADDR
// end ;
32152: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32153: LD_EXP 122
32157: PUSH
32158: LD_INT 34
32160: PUSH
32161: LD_EXP 45
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PPUSH
32170: CALL_OW 69
32174: AND
32175: IFFALSE 32638
32177: GO 32179
32179: DISABLE
32180: LD_INT 0
32182: PPUSH
32183: PPUSH
32184: PPUSH
32185: PPUSH
// begin enable ;
32186: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32187: LD_ADDR_VAR 0 1
32191: PUSH
32192: LD_INT 34
32194: PUSH
32195: LD_EXP 45
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PPUSH
32204: CALL_OW 69
32208: PUSH
32209: FOR_IN
32210: IFFALSE 32282
// begin if not i in minersList then
32212: LD_VAR 0 1
32216: PUSH
32217: LD_EXP 123
32221: IN
32222: NOT
32223: IFFALSE 32280
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32225: LD_ADDR_EXP 123
32229: PUSH
32230: LD_EXP 123
32234: PPUSH
32235: LD_EXP 123
32239: PUSH
32240: LD_INT 1
32242: PLUS
32243: PPUSH
32244: LD_VAR 0 1
32248: PPUSH
32249: CALL_OW 1
32253: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32254: LD_ADDR_EXP 124
32258: PUSH
32259: LD_EXP 124
32263: PPUSH
32264: LD_EXP 124
32268: PUSH
32269: LD_INT 1
32271: PLUS
32272: PPUSH
32273: EMPTY
32274: PPUSH
32275: CALL_OW 1
32279: ST_TO_ADDR
// end end ;
32280: GO 32209
32282: POP
32283: POP
// for i := minerMinesList downto 1 do
32284: LD_ADDR_VAR 0 1
32288: PUSH
32289: DOUBLE
32290: LD_EXP 124
32294: INC
32295: ST_TO_ADDR
32296: LD_INT 1
32298: PUSH
32299: FOR_DOWNTO
32300: IFFALSE 32636
// begin if IsLive ( minersList [ i ] ) then
32302: LD_EXP 123
32306: PUSH
32307: LD_VAR 0 1
32311: ARRAY
32312: PPUSH
32313: CALL_OW 300
32317: IFFALSE 32345
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32319: LD_EXP 123
32323: PUSH
32324: LD_VAR 0 1
32328: ARRAY
32329: PPUSH
32330: LD_EXP 124
32334: PUSH
32335: LD_VAR 0 1
32339: ARRAY
32340: PPUSH
32341: CALL_OW 505
// if not minerMinesList [ i ] then
32345: LD_EXP 124
32349: PUSH
32350: LD_VAR 0 1
32354: ARRAY
32355: NOT
32356: IFFALSE 32360
// continue ;
32358: GO 32299
// for j := minerMinesList [ i ] downto 1 do
32360: LD_ADDR_VAR 0 2
32364: PUSH
32365: DOUBLE
32366: LD_EXP 124
32370: PUSH
32371: LD_VAR 0 1
32375: ARRAY
32376: INC
32377: ST_TO_ADDR
32378: LD_INT 1
32380: PUSH
32381: FOR_DOWNTO
32382: IFFALSE 32632
// begin side := GetSide ( minersList [ i ] ) ;
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_EXP 123
32393: PUSH
32394: LD_VAR 0 1
32398: ARRAY
32399: PPUSH
32400: CALL_OW 255
32404: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32405: LD_ADDR_VAR 0 4
32409: PUSH
32410: LD_EXP 124
32414: PUSH
32415: LD_VAR 0 1
32419: ARRAY
32420: PUSH
32421: LD_VAR 0 2
32425: ARRAY
32426: PUSH
32427: LD_INT 1
32429: ARRAY
32430: PPUSH
32431: LD_EXP 124
32435: PUSH
32436: LD_VAR 0 1
32440: ARRAY
32441: PUSH
32442: LD_VAR 0 2
32446: ARRAY
32447: PUSH
32448: LD_INT 2
32450: ARRAY
32451: PPUSH
32452: CALL_OW 428
32456: ST_TO_ADDR
// if not tmp then
32457: LD_VAR 0 4
32461: NOT
32462: IFFALSE 32466
// continue ;
32464: GO 32381
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32466: LD_VAR 0 4
32470: PUSH
32471: LD_INT 81
32473: PUSH
32474: LD_VAR 0 3
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PPUSH
32483: CALL_OW 69
32487: IN
32488: PUSH
32489: LD_EXP 124
32493: PUSH
32494: LD_VAR 0 1
32498: ARRAY
32499: PUSH
32500: LD_VAR 0 2
32504: ARRAY
32505: PUSH
32506: LD_INT 1
32508: ARRAY
32509: PPUSH
32510: LD_EXP 124
32514: PUSH
32515: LD_VAR 0 1
32519: ARRAY
32520: PUSH
32521: LD_VAR 0 2
32525: ARRAY
32526: PUSH
32527: LD_INT 2
32529: ARRAY
32530: PPUSH
32531: CALL_OW 458
32535: AND
32536: IFFALSE 32630
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32538: LD_EXP 124
32542: PUSH
32543: LD_VAR 0 1
32547: ARRAY
32548: PUSH
32549: LD_VAR 0 2
32553: ARRAY
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: PPUSH
32559: LD_EXP 124
32563: PUSH
32564: LD_VAR 0 1
32568: ARRAY
32569: PUSH
32570: LD_VAR 0 2
32574: ARRAY
32575: PUSH
32576: LD_INT 2
32578: ARRAY
32579: PPUSH
32580: LD_VAR 0 3
32584: PPUSH
32585: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32589: LD_ADDR_EXP 124
32593: PUSH
32594: LD_EXP 124
32598: PPUSH
32599: LD_VAR 0 1
32603: PPUSH
32604: LD_EXP 124
32608: PUSH
32609: LD_VAR 0 1
32613: ARRAY
32614: PPUSH
32615: LD_VAR 0 2
32619: PPUSH
32620: CALL_OW 3
32624: PPUSH
32625: CALL_OW 1
32629: ST_TO_ADDR
// end ; end ;
32630: GO 32381
32632: POP
32633: POP
// end ;
32634: GO 32299
32636: POP
32637: POP
// end ;
32638: PPOPN 4
32640: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32641: LD_INT 0
32643: PPUSH
32644: PPUSH
// result := false ;
32645: LD_ADDR_VAR 0 4
32649: PUSH
32650: LD_INT 0
32652: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32653: LD_VAR 0 1
32657: PPUSH
32658: CALL_OW 264
32662: PUSH
32663: LD_EXP 45
32667: EQUAL
32668: NOT
32669: IFFALSE 32673
// exit ;
32671: GO 32913
// index := GetElementIndex ( minersList , unit ) ;
32673: LD_ADDR_VAR 0 5
32677: PUSH
32678: LD_EXP 123
32682: PPUSH
32683: LD_VAR 0 1
32687: PPUSH
32688: CALL 38897 0 2
32692: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32693: LD_EXP 124
32697: PUSH
32698: LD_VAR 0 5
32702: ARRAY
32703: PUSH
32704: LD_EXP 125
32708: GREATEREQUAL
32709: IFFALSE 32713
// exit ;
32711: GO 32913
// ComMoveXY ( unit , x , y ) ;
32713: LD_VAR 0 1
32717: PPUSH
32718: LD_VAR 0 2
32722: PPUSH
32723: LD_VAR 0 3
32727: PPUSH
32728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32732: LD_INT 35
32734: PPUSH
32735: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32739: LD_VAR 0 1
32743: PPUSH
32744: LD_VAR 0 2
32748: PPUSH
32749: LD_VAR 0 3
32753: PPUSH
32754: CALL 69669 0 3
32758: NOT
32759: PUSH
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 314
32769: AND
32770: IFFALSE 32774
// exit ;
32772: GO 32913
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32774: LD_VAR 0 2
32778: PPUSH
32779: LD_VAR 0 3
32783: PPUSH
32784: CALL_OW 428
32788: PUSH
32789: LD_VAR 0 1
32793: EQUAL
32794: PUSH
32795: LD_VAR 0 1
32799: PPUSH
32800: CALL_OW 314
32804: NOT
32805: AND
32806: IFFALSE 32732
// PlaySoundXY ( x , y , PlantMine ) ;
32808: LD_VAR 0 2
32812: PPUSH
32813: LD_VAR 0 3
32817: PPUSH
32818: LD_STRING PlantMine
32820: PPUSH
32821: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32825: LD_VAR 0 2
32829: PPUSH
32830: LD_VAR 0 3
32834: PPUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 255
32844: PPUSH
32845: LD_INT 0
32847: PPUSH
32848: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32852: LD_ADDR_EXP 124
32856: PUSH
32857: LD_EXP 124
32861: PPUSH
32862: LD_VAR 0 5
32866: PUSH
32867: LD_EXP 124
32871: PUSH
32872: LD_VAR 0 5
32876: ARRAY
32877: PUSH
32878: LD_INT 1
32880: PLUS
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PPUSH
32886: LD_VAR 0 2
32890: PUSH
32891: LD_VAR 0 3
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PPUSH
32900: CALL 39112 0 3
32904: ST_TO_ADDR
// result := true ;
32905: LD_ADDR_VAR 0 4
32909: PUSH
32910: LD_INT 1
32912: ST_TO_ADDR
// end ;
32913: LD_VAR 0 4
32917: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32918: LD_INT 0
32920: PPUSH
32921: PPUSH
32922: PPUSH
// if not unit in minersList then
32923: LD_VAR 0 1
32927: PUSH
32928: LD_EXP 123
32932: IN
32933: NOT
32934: IFFALSE 32938
// exit ;
32936: GO 33330
// index := GetElementIndex ( minersList , unit ) ;
32938: LD_ADDR_VAR 0 6
32942: PUSH
32943: LD_EXP 123
32947: PPUSH
32948: LD_VAR 0 1
32952: PPUSH
32953: CALL 38897 0 2
32957: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32958: LD_ADDR_VAR 0 5
32962: PUSH
32963: DOUBLE
32964: LD_EXP 124
32968: PUSH
32969: LD_VAR 0 6
32973: ARRAY
32974: INC
32975: ST_TO_ADDR
32976: LD_INT 1
32978: PUSH
32979: FOR_DOWNTO
32980: IFFALSE 33141
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32982: LD_EXP 124
32986: PUSH
32987: LD_VAR 0 6
32991: ARRAY
32992: PUSH
32993: LD_VAR 0 5
32997: ARRAY
32998: PUSH
32999: LD_INT 1
33001: ARRAY
33002: PUSH
33003: LD_VAR 0 2
33007: EQUAL
33008: PUSH
33009: LD_EXP 124
33013: PUSH
33014: LD_VAR 0 6
33018: ARRAY
33019: PUSH
33020: LD_VAR 0 5
33024: ARRAY
33025: PUSH
33026: LD_INT 2
33028: ARRAY
33029: PUSH
33030: LD_VAR 0 3
33034: EQUAL
33035: AND
33036: IFFALSE 33139
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33038: LD_EXP 124
33042: PUSH
33043: LD_VAR 0 6
33047: ARRAY
33048: PUSH
33049: LD_VAR 0 5
33053: ARRAY
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: PPUSH
33059: LD_EXP 124
33063: PUSH
33064: LD_VAR 0 6
33068: ARRAY
33069: PUSH
33070: LD_VAR 0 5
33074: ARRAY
33075: PUSH
33076: LD_INT 2
33078: ARRAY
33079: PPUSH
33080: LD_VAR 0 1
33084: PPUSH
33085: CALL_OW 255
33089: PPUSH
33090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33094: LD_ADDR_EXP 124
33098: PUSH
33099: LD_EXP 124
33103: PPUSH
33104: LD_VAR 0 6
33108: PPUSH
33109: LD_EXP 124
33113: PUSH
33114: LD_VAR 0 6
33118: ARRAY
33119: PPUSH
33120: LD_VAR 0 5
33124: PPUSH
33125: CALL_OW 3
33129: PPUSH
33130: CALL_OW 1
33134: ST_TO_ADDR
// exit ;
33135: POP
33136: POP
33137: GO 33330
// end ; end ;
33139: GO 32979
33141: POP
33142: POP
// for i := minerMinesList [ index ] downto 1 do
33143: LD_ADDR_VAR 0 5
33147: PUSH
33148: DOUBLE
33149: LD_EXP 124
33153: PUSH
33154: LD_VAR 0 6
33158: ARRAY
33159: INC
33160: ST_TO_ADDR
33161: LD_INT 1
33163: PUSH
33164: FOR_DOWNTO
33165: IFFALSE 33328
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33167: LD_EXP 124
33171: PUSH
33172: LD_VAR 0 6
33176: ARRAY
33177: PUSH
33178: LD_VAR 0 5
33182: ARRAY
33183: PUSH
33184: LD_INT 1
33186: ARRAY
33187: PPUSH
33188: LD_EXP 124
33192: PUSH
33193: LD_VAR 0 6
33197: ARRAY
33198: PUSH
33199: LD_VAR 0 5
33203: ARRAY
33204: PUSH
33205: LD_INT 2
33207: ARRAY
33208: PPUSH
33209: LD_VAR 0 2
33213: PPUSH
33214: LD_VAR 0 3
33218: PPUSH
33219: CALL_OW 298
33223: PUSH
33224: LD_INT 6
33226: LESS
33227: IFFALSE 33326
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33229: LD_EXP 124
33233: PUSH
33234: LD_VAR 0 6
33238: ARRAY
33239: PUSH
33240: LD_VAR 0 5
33244: ARRAY
33245: PUSH
33246: LD_INT 1
33248: ARRAY
33249: PPUSH
33250: LD_EXP 124
33254: PUSH
33255: LD_VAR 0 6
33259: ARRAY
33260: PUSH
33261: LD_VAR 0 5
33265: ARRAY
33266: PUSH
33267: LD_INT 2
33269: ARRAY
33270: PPUSH
33271: LD_VAR 0 1
33275: PPUSH
33276: CALL_OW 255
33280: PPUSH
33281: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33285: LD_ADDR_EXP 124
33289: PUSH
33290: LD_EXP 124
33294: PPUSH
33295: LD_VAR 0 6
33299: PPUSH
33300: LD_EXP 124
33304: PUSH
33305: LD_VAR 0 6
33309: ARRAY
33310: PPUSH
33311: LD_VAR 0 5
33315: PPUSH
33316: CALL_OW 3
33320: PPUSH
33321: CALL_OW 1
33325: ST_TO_ADDR
// end ; end ;
33326: GO 33164
33328: POP
33329: POP
// end ;
33330: LD_VAR 0 4
33334: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33335: LD_INT 0
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33346: LD_VAR 0 1
33350: PPUSH
33351: CALL_OW 264
33355: PUSH
33356: LD_EXP 45
33360: EQUAL
33361: NOT
33362: PUSH
33363: LD_VAR 0 1
33367: PUSH
33368: LD_EXP 123
33372: IN
33373: NOT
33374: OR
33375: IFFALSE 33379
// exit ;
33377: GO 33701
// index := GetElementIndex ( minersList , unit ) ;
33379: LD_ADDR_VAR 0 6
33383: PUSH
33384: LD_EXP 123
33388: PPUSH
33389: LD_VAR 0 1
33393: PPUSH
33394: CALL 38897 0 2
33398: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33399: LD_ADDR_VAR 0 8
33403: PUSH
33404: LD_EXP 125
33408: PUSH
33409: LD_EXP 124
33413: PUSH
33414: LD_VAR 0 6
33418: ARRAY
33419: MINUS
33420: ST_TO_ADDR
// if not minesFreeAmount then
33421: LD_VAR 0 8
33425: NOT
33426: IFFALSE 33430
// exit ;
33428: GO 33701
// tmp := [ ] ;
33430: LD_ADDR_VAR 0 7
33434: PUSH
33435: EMPTY
33436: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33437: LD_ADDR_VAR 0 5
33441: PUSH
33442: DOUBLE
33443: LD_INT 1
33445: DEC
33446: ST_TO_ADDR
33447: LD_VAR 0 8
33451: PUSH
33452: FOR_TO
33453: IFFALSE 33648
// begin _d := rand ( 0 , 5 ) ;
33455: LD_ADDR_VAR 0 11
33459: PUSH
33460: LD_INT 0
33462: PPUSH
33463: LD_INT 5
33465: PPUSH
33466: CALL_OW 12
33470: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33471: LD_ADDR_VAR 0 12
33475: PUSH
33476: LD_INT 2
33478: PPUSH
33479: LD_INT 6
33481: PPUSH
33482: CALL_OW 12
33486: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33487: LD_ADDR_VAR 0 9
33491: PUSH
33492: LD_VAR 0 2
33496: PPUSH
33497: LD_VAR 0 11
33501: PPUSH
33502: LD_VAR 0 12
33506: PPUSH
33507: CALL_OW 272
33511: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33512: LD_ADDR_VAR 0 10
33516: PUSH
33517: LD_VAR 0 3
33521: PPUSH
33522: LD_VAR 0 11
33526: PPUSH
33527: LD_VAR 0 12
33531: PPUSH
33532: CALL_OW 273
33536: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33537: LD_VAR 0 9
33541: PPUSH
33542: LD_VAR 0 10
33546: PPUSH
33547: CALL_OW 488
33551: PUSH
33552: LD_VAR 0 9
33556: PUSH
33557: LD_VAR 0 10
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_VAR 0 7
33570: IN
33571: NOT
33572: AND
33573: PUSH
33574: LD_VAR 0 9
33578: PPUSH
33579: LD_VAR 0 10
33583: PPUSH
33584: CALL_OW 458
33588: NOT
33589: AND
33590: IFFALSE 33632
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33592: LD_ADDR_VAR 0 7
33596: PUSH
33597: LD_VAR 0 7
33601: PPUSH
33602: LD_VAR 0 7
33606: PUSH
33607: LD_INT 1
33609: PLUS
33610: PPUSH
33611: LD_VAR 0 9
33615: PUSH
33616: LD_VAR 0 10
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 1
33629: ST_TO_ADDR
33630: GO 33646
// i := i - 1 ;
33632: LD_ADDR_VAR 0 5
33636: PUSH
33637: LD_VAR 0 5
33641: PUSH
33642: LD_INT 1
33644: MINUS
33645: ST_TO_ADDR
// end ;
33646: GO 33452
33648: POP
33649: POP
// for i in tmp do
33650: LD_ADDR_VAR 0 5
33654: PUSH
33655: LD_VAR 0 7
33659: PUSH
33660: FOR_IN
33661: IFFALSE 33699
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33663: LD_VAR 0 1
33667: PPUSH
33668: LD_VAR 0 5
33672: PUSH
33673: LD_INT 1
33675: ARRAY
33676: PPUSH
33677: LD_VAR 0 5
33681: PUSH
33682: LD_INT 2
33684: ARRAY
33685: PPUSH
33686: CALL 32641 0 3
33690: NOT
33691: IFFALSE 33697
// exit ;
33693: POP
33694: POP
33695: GO 33701
33697: GO 33660
33699: POP
33700: POP
// end ;
33701: LD_VAR 0 4
33705: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33706: LD_INT 0
33708: PPUSH
33709: PPUSH
33710: PPUSH
33711: PPUSH
33712: PPUSH
33713: PPUSH
33714: PPUSH
// if not GetClass ( unit ) = class_sniper then
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL_OW 257
33724: PUSH
33725: LD_INT 5
33727: EQUAL
33728: NOT
33729: IFFALSE 33733
// exit ;
33731: GO 34121
// dist := 8 ;
33733: LD_ADDR_VAR 0 5
33737: PUSH
33738: LD_INT 8
33740: ST_TO_ADDR
// viewRange := 12 ;
33741: LD_ADDR_VAR 0 7
33745: PUSH
33746: LD_INT 12
33748: ST_TO_ADDR
// side := GetSide ( unit ) ;
33749: LD_ADDR_VAR 0 6
33753: PUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 255
33763: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33764: LD_INT 61
33766: PPUSH
33767: LD_VAR 0 6
33771: PPUSH
33772: CALL_OW 321
33776: PUSH
33777: LD_INT 2
33779: EQUAL
33780: IFFALSE 33790
// viewRange := 16 ;
33782: LD_ADDR_VAR 0 7
33786: PUSH
33787: LD_INT 16
33789: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33790: LD_VAR 0 1
33794: PPUSH
33795: LD_VAR 0 2
33799: PPUSH
33800: LD_VAR 0 3
33804: PPUSH
33805: CALL_OW 297
33809: PUSH
33810: LD_VAR 0 5
33814: GREATER
33815: IFFALSE 33894
// begin ComMoveXY ( unit , x , y ) ;
33817: LD_VAR 0 1
33821: PPUSH
33822: LD_VAR 0 2
33826: PPUSH
33827: LD_VAR 0 3
33831: PPUSH
33832: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33836: LD_INT 35
33838: PPUSH
33839: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33843: LD_VAR 0 1
33847: PPUSH
33848: LD_VAR 0 2
33852: PPUSH
33853: LD_VAR 0 3
33857: PPUSH
33858: CALL 69669 0 3
33862: NOT
33863: IFFALSE 33867
// exit ;
33865: GO 34121
// until GetDistUnitXY ( unit , x , y ) < dist ;
33867: LD_VAR 0 1
33871: PPUSH
33872: LD_VAR 0 2
33876: PPUSH
33877: LD_VAR 0 3
33881: PPUSH
33882: CALL_OW 297
33886: PUSH
33887: LD_VAR 0 5
33891: LESS
33892: IFFALSE 33836
// end ; ComTurnXY ( unit , x , y ) ;
33894: LD_VAR 0 1
33898: PPUSH
33899: LD_VAR 0 2
33903: PPUSH
33904: LD_VAR 0 3
33908: PPUSH
33909: CALL_OW 118
// wait ( 5 ) ;
33913: LD_INT 5
33915: PPUSH
33916: CALL_OW 67
// _d := GetDir ( unit ) ;
33920: LD_ADDR_VAR 0 10
33924: PUSH
33925: LD_VAR 0 1
33929: PPUSH
33930: CALL_OW 254
33934: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33935: LD_ADDR_VAR 0 8
33939: PUSH
33940: LD_VAR 0 1
33944: PPUSH
33945: CALL_OW 250
33949: PPUSH
33950: LD_VAR 0 10
33954: PPUSH
33955: LD_VAR 0 5
33959: PPUSH
33960: CALL_OW 272
33964: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33965: LD_ADDR_VAR 0 9
33969: PUSH
33970: LD_VAR 0 1
33974: PPUSH
33975: CALL_OW 251
33979: PPUSH
33980: LD_VAR 0 10
33984: PPUSH
33985: LD_VAR 0 5
33989: PPUSH
33990: CALL_OW 273
33994: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33995: LD_VAR 0 8
33999: PPUSH
34000: LD_VAR 0 9
34004: PPUSH
34005: CALL_OW 488
34009: NOT
34010: IFFALSE 34014
// exit ;
34012: GO 34121
// ComAnimCustom ( unit , 1 ) ;
34014: LD_VAR 0 1
34018: PPUSH
34019: LD_INT 1
34021: PPUSH
34022: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34026: LD_VAR 0 8
34030: PPUSH
34031: LD_VAR 0 9
34035: PPUSH
34036: LD_VAR 0 6
34040: PPUSH
34041: LD_VAR 0 7
34045: PPUSH
34046: CALL_OW 330
// repeat wait ( 1 ) ;
34050: LD_INT 1
34052: PPUSH
34053: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34057: LD_VAR 0 1
34061: PPUSH
34062: CALL_OW 316
34066: PUSH
34067: LD_VAR 0 1
34071: PPUSH
34072: CALL_OW 314
34076: OR
34077: PUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 302
34087: NOT
34088: OR
34089: PUSH
34090: LD_VAR 0 1
34094: PPUSH
34095: CALL_OW 301
34099: OR
34100: IFFALSE 34050
// RemoveSeeing ( _x , _y , side ) ;
34102: LD_VAR 0 8
34106: PPUSH
34107: LD_VAR 0 9
34111: PPUSH
34112: LD_VAR 0 6
34116: PPUSH
34117: CALL_OW 331
// end ; end_of_file
34121: LD_VAR 0 4
34125: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34126: LD_INT 0
34128: PPUSH
34129: PPUSH
// if exist_mode then
34130: LD_VAR 0 2
34134: IFFALSE 34159
// unit := CreateCharacter ( prefix & ident ) else
34136: LD_ADDR_VAR 0 5
34140: PUSH
34141: LD_VAR 0 3
34145: PUSH
34146: LD_VAR 0 1
34150: STR
34151: PPUSH
34152: CALL_OW 34
34156: ST_TO_ADDR
34157: GO 34174
// unit := NewCharacter ( ident ) ;
34159: LD_ADDR_VAR 0 5
34163: PUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 25
34173: ST_TO_ADDR
// result := unit ;
34174: LD_ADDR_VAR 0 4
34178: PUSH
34179: LD_VAR 0 5
34183: ST_TO_ADDR
// end ;
34184: LD_VAR 0 4
34188: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34189: LD_INT 0
34191: PPUSH
34192: PPUSH
// if not side or not nation then
34193: LD_VAR 0 1
34197: NOT
34198: PUSH
34199: LD_VAR 0 2
34203: NOT
34204: OR
34205: IFFALSE 34209
// exit ;
34207: GO 34977
// case nation of nation_american :
34209: LD_VAR 0 2
34213: PUSH
34214: LD_INT 1
34216: DOUBLE
34217: EQUAL
34218: IFTRUE 34222
34220: GO 34436
34222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34223: LD_ADDR_VAR 0 4
34227: PUSH
34228: LD_INT 35
34230: PUSH
34231: LD_INT 45
34233: PUSH
34234: LD_INT 46
34236: PUSH
34237: LD_INT 47
34239: PUSH
34240: LD_INT 82
34242: PUSH
34243: LD_INT 83
34245: PUSH
34246: LD_INT 84
34248: PUSH
34249: LD_INT 85
34251: PUSH
34252: LD_INT 86
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: LD_INT 6
34263: PUSH
34264: LD_INT 15
34266: PUSH
34267: LD_INT 16
34269: PUSH
34270: LD_INT 7
34272: PUSH
34273: LD_INT 12
34275: PUSH
34276: LD_INT 13
34278: PUSH
34279: LD_INT 10
34281: PUSH
34282: LD_INT 14
34284: PUSH
34285: LD_INT 20
34287: PUSH
34288: LD_INT 21
34290: PUSH
34291: LD_INT 22
34293: PUSH
34294: LD_INT 25
34296: PUSH
34297: LD_INT 32
34299: PUSH
34300: LD_INT 27
34302: PUSH
34303: LD_INT 36
34305: PUSH
34306: LD_INT 69
34308: PUSH
34309: LD_INT 39
34311: PUSH
34312: LD_INT 34
34314: PUSH
34315: LD_INT 40
34317: PUSH
34318: LD_INT 48
34320: PUSH
34321: LD_INT 49
34323: PUSH
34324: LD_INT 50
34326: PUSH
34327: LD_INT 51
34329: PUSH
34330: LD_INT 52
34332: PUSH
34333: LD_INT 53
34335: PUSH
34336: LD_INT 54
34338: PUSH
34339: LD_INT 55
34341: PUSH
34342: LD_INT 56
34344: PUSH
34345: LD_INT 57
34347: PUSH
34348: LD_INT 58
34350: PUSH
34351: LD_INT 59
34353: PUSH
34354: LD_INT 60
34356: PUSH
34357: LD_INT 61
34359: PUSH
34360: LD_INT 62
34362: PUSH
34363: LD_INT 80
34365: PUSH
34366: LD_INT 82
34368: PUSH
34369: LD_INT 83
34371: PUSH
34372: LD_INT 84
34374: PUSH
34375: LD_INT 85
34377: PUSH
34378: LD_INT 86
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: ST_TO_ADDR
34434: GO 34901
34436: LD_INT 2
34438: DOUBLE
34439: EQUAL
34440: IFTRUE 34444
34442: GO 34670
34444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34445: LD_ADDR_VAR 0 4
34449: PUSH
34450: LD_INT 35
34452: PUSH
34453: LD_INT 45
34455: PUSH
34456: LD_INT 46
34458: PUSH
34459: LD_INT 47
34461: PUSH
34462: LD_INT 82
34464: PUSH
34465: LD_INT 83
34467: PUSH
34468: LD_INT 84
34470: PUSH
34471: LD_INT 85
34473: PUSH
34474: LD_INT 87
34476: PUSH
34477: LD_INT 70
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: LD_INT 11
34485: PUSH
34486: LD_INT 3
34488: PUSH
34489: LD_INT 4
34491: PUSH
34492: LD_INT 5
34494: PUSH
34495: LD_INT 6
34497: PUSH
34498: LD_INT 15
34500: PUSH
34501: LD_INT 18
34503: PUSH
34504: LD_INT 7
34506: PUSH
34507: LD_INT 17
34509: PUSH
34510: LD_INT 8
34512: PUSH
34513: LD_INT 20
34515: PUSH
34516: LD_INT 21
34518: PUSH
34519: LD_INT 22
34521: PUSH
34522: LD_INT 72
34524: PUSH
34525: LD_INT 26
34527: PUSH
34528: LD_INT 69
34530: PUSH
34531: LD_INT 39
34533: PUSH
34534: LD_INT 40
34536: PUSH
34537: LD_INT 41
34539: PUSH
34540: LD_INT 42
34542: PUSH
34543: LD_INT 43
34545: PUSH
34546: LD_INT 48
34548: PUSH
34549: LD_INT 49
34551: PUSH
34552: LD_INT 50
34554: PUSH
34555: LD_INT 51
34557: PUSH
34558: LD_INT 52
34560: PUSH
34561: LD_INT 53
34563: PUSH
34564: LD_INT 54
34566: PUSH
34567: LD_INT 55
34569: PUSH
34570: LD_INT 56
34572: PUSH
34573: LD_INT 60
34575: PUSH
34576: LD_INT 61
34578: PUSH
34579: LD_INT 62
34581: PUSH
34582: LD_INT 66
34584: PUSH
34585: LD_INT 67
34587: PUSH
34588: LD_INT 68
34590: PUSH
34591: LD_INT 81
34593: PUSH
34594: LD_INT 82
34596: PUSH
34597: LD_INT 83
34599: PUSH
34600: LD_INT 84
34602: PUSH
34603: LD_INT 85
34605: PUSH
34606: LD_INT 87
34608: PUSH
34609: LD_INT 88
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
34668: GO 34901
34670: LD_INT 3
34672: DOUBLE
34673: EQUAL
34674: IFTRUE 34678
34676: GO 34900
34678: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34679: LD_ADDR_VAR 0 4
34683: PUSH
34684: LD_INT 46
34686: PUSH
34687: LD_INT 47
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 82
34698: PUSH
34699: LD_INT 83
34701: PUSH
34702: LD_INT 84
34704: PUSH
34705: LD_INT 85
34707: PUSH
34708: LD_INT 86
34710: PUSH
34711: LD_INT 11
34713: PUSH
34714: LD_INT 9
34716: PUSH
34717: LD_INT 20
34719: PUSH
34720: LD_INT 19
34722: PUSH
34723: LD_INT 21
34725: PUSH
34726: LD_INT 24
34728: PUSH
34729: LD_INT 22
34731: PUSH
34732: LD_INT 25
34734: PUSH
34735: LD_INT 28
34737: PUSH
34738: LD_INT 29
34740: PUSH
34741: LD_INT 30
34743: PUSH
34744: LD_INT 31
34746: PUSH
34747: LD_INT 37
34749: PUSH
34750: LD_INT 38
34752: PUSH
34753: LD_INT 32
34755: PUSH
34756: LD_INT 27
34758: PUSH
34759: LD_INT 33
34761: PUSH
34762: LD_INT 69
34764: PUSH
34765: LD_INT 39
34767: PUSH
34768: LD_INT 34
34770: PUSH
34771: LD_INT 40
34773: PUSH
34774: LD_INT 71
34776: PUSH
34777: LD_INT 23
34779: PUSH
34780: LD_INT 44
34782: PUSH
34783: LD_INT 48
34785: PUSH
34786: LD_INT 49
34788: PUSH
34789: LD_INT 50
34791: PUSH
34792: LD_INT 51
34794: PUSH
34795: LD_INT 52
34797: PUSH
34798: LD_INT 53
34800: PUSH
34801: LD_INT 54
34803: PUSH
34804: LD_INT 55
34806: PUSH
34807: LD_INT 56
34809: PUSH
34810: LD_INT 57
34812: PUSH
34813: LD_INT 58
34815: PUSH
34816: LD_INT 59
34818: PUSH
34819: LD_INT 63
34821: PUSH
34822: LD_INT 64
34824: PUSH
34825: LD_INT 65
34827: PUSH
34828: LD_INT 82
34830: PUSH
34831: LD_INT 83
34833: PUSH
34834: LD_INT 84
34836: PUSH
34837: LD_INT 85
34839: PUSH
34840: LD_INT 86
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: ST_TO_ADDR
34898: GO 34901
34900: POP
// if state > - 1 and state < 3 then
34901: LD_VAR 0 3
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: GREATER
34910: PUSH
34911: LD_VAR 0 3
34915: PUSH
34916: LD_INT 3
34918: LESS
34919: AND
34920: IFFALSE 34977
// for i in result do
34922: LD_ADDR_VAR 0 5
34926: PUSH
34927: LD_VAR 0 4
34931: PUSH
34932: FOR_IN
34933: IFFALSE 34975
// if GetTech ( i , side ) <> state then
34935: LD_VAR 0 5
34939: PPUSH
34940: LD_VAR 0 1
34944: PPUSH
34945: CALL_OW 321
34949: PUSH
34950: LD_VAR 0 3
34954: NONEQUAL
34955: IFFALSE 34973
// result := result diff i ;
34957: LD_ADDR_VAR 0 4
34961: PUSH
34962: LD_VAR 0 4
34966: PUSH
34967: LD_VAR 0 5
34971: DIFF
34972: ST_TO_ADDR
34973: GO 34932
34975: POP
34976: POP
// end ;
34977: LD_VAR 0 4
34981: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34982: LD_INT 0
34984: PPUSH
34985: PPUSH
34986: PPUSH
// result := true ;
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_INT 1
34994: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34995: LD_ADDR_VAR 0 5
34999: PUSH
35000: LD_VAR 0 2
35004: PPUSH
35005: CALL_OW 480
35009: ST_TO_ADDR
// if not tmp then
35010: LD_VAR 0 5
35014: NOT
35015: IFFALSE 35019
// exit ;
35017: GO 35068
// for i in tmp do
35019: LD_ADDR_VAR 0 4
35023: PUSH
35024: LD_VAR 0 5
35028: PUSH
35029: FOR_IN
35030: IFFALSE 35066
// if GetTech ( i , side ) <> state_researched then
35032: LD_VAR 0 4
35036: PPUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: CALL_OW 321
35046: PUSH
35047: LD_INT 2
35049: NONEQUAL
35050: IFFALSE 35064
// begin result := false ;
35052: LD_ADDR_VAR 0 3
35056: PUSH
35057: LD_INT 0
35059: ST_TO_ADDR
// exit ;
35060: POP
35061: POP
35062: GO 35068
// end ;
35064: GO 35029
35066: POP
35067: POP
// end ;
35068: LD_VAR 0 3
35072: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35073: LD_INT 0
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35088: LD_VAR 0 1
35092: NOT
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 257
35103: PUSH
35104: LD_INT 9
35106: NONEQUAL
35107: OR
35108: IFFALSE 35112
// exit ;
35110: GO 35685
// side := GetSide ( unit ) ;
35112: LD_ADDR_VAR 0 9
35116: PUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: CALL_OW 255
35126: ST_TO_ADDR
// tech_space := tech_spacanom ;
35127: LD_ADDR_VAR 0 12
35131: PUSH
35132: LD_INT 29
35134: ST_TO_ADDR
// tech_time := tech_taurad ;
35135: LD_ADDR_VAR 0 13
35139: PUSH
35140: LD_INT 28
35142: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35143: LD_ADDR_VAR 0 11
35147: PUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL_OW 310
35157: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35158: LD_VAR 0 11
35162: PPUSH
35163: CALL_OW 247
35167: PUSH
35168: LD_INT 2
35170: EQUAL
35171: IFFALSE 35175
// exit ;
35173: GO 35685
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35175: LD_ADDR_VAR 0 8
35179: PUSH
35180: LD_INT 81
35182: PUSH
35183: LD_VAR 0 9
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 3
35194: PUSH
35195: LD_INT 21
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PPUSH
35213: CALL_OW 69
35217: ST_TO_ADDR
// if not tmp then
35218: LD_VAR 0 8
35222: NOT
35223: IFFALSE 35227
// exit ;
35225: GO 35685
// if in_unit then
35227: LD_VAR 0 11
35231: IFFALSE 35255
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35233: LD_ADDR_VAR 0 10
35237: PUSH
35238: LD_VAR 0 8
35242: PPUSH
35243: LD_VAR 0 11
35247: PPUSH
35248: CALL_OW 74
35252: ST_TO_ADDR
35253: GO 35275
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35255: LD_ADDR_VAR 0 10
35259: PUSH
35260: LD_VAR 0 8
35264: PPUSH
35265: LD_VAR 0 1
35269: PPUSH
35270: CALL_OW 74
35274: ST_TO_ADDR
// if not enemy then
35275: LD_VAR 0 10
35279: NOT
35280: IFFALSE 35284
// exit ;
35282: GO 35685
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35284: LD_VAR 0 11
35288: PUSH
35289: LD_VAR 0 11
35293: PPUSH
35294: LD_VAR 0 10
35298: PPUSH
35299: CALL_OW 296
35303: PUSH
35304: LD_INT 13
35306: GREATER
35307: AND
35308: PUSH
35309: LD_VAR 0 1
35313: PPUSH
35314: LD_VAR 0 10
35318: PPUSH
35319: CALL_OW 296
35323: PUSH
35324: LD_INT 12
35326: GREATER
35327: OR
35328: IFFALSE 35332
// exit ;
35330: GO 35685
// missile := [ 1 ] ;
35332: LD_ADDR_VAR 0 14
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35343: LD_VAR 0 9
35347: PPUSH
35348: LD_VAR 0 12
35352: PPUSH
35353: CALL_OW 325
35357: IFFALSE 35386
// missile := Insert ( missile , missile + 1 , 2 ) ;
35359: LD_ADDR_VAR 0 14
35363: PUSH
35364: LD_VAR 0 14
35368: PPUSH
35369: LD_VAR 0 14
35373: PUSH
35374: LD_INT 1
35376: PLUS
35377: PPUSH
35378: LD_INT 2
35380: PPUSH
35381: CALL_OW 2
35385: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35386: LD_VAR 0 9
35390: PPUSH
35391: LD_VAR 0 13
35395: PPUSH
35396: CALL_OW 325
35400: PUSH
35401: LD_VAR 0 10
35405: PPUSH
35406: CALL_OW 255
35410: PPUSH
35411: LD_VAR 0 13
35415: PPUSH
35416: CALL_OW 325
35420: NOT
35421: AND
35422: IFFALSE 35451
// missile := Insert ( missile , missile + 1 , 3 ) ;
35424: LD_ADDR_VAR 0 14
35428: PUSH
35429: LD_VAR 0 14
35433: PPUSH
35434: LD_VAR 0 14
35438: PUSH
35439: LD_INT 1
35441: PLUS
35442: PPUSH
35443: LD_INT 3
35445: PPUSH
35446: CALL_OW 2
35450: ST_TO_ADDR
// if missile < 2 then
35451: LD_VAR 0 14
35455: PUSH
35456: LD_INT 2
35458: LESS
35459: IFFALSE 35463
// exit ;
35461: GO 35685
// x := GetX ( enemy ) ;
35463: LD_ADDR_VAR 0 4
35467: PUSH
35468: LD_VAR 0 10
35472: PPUSH
35473: CALL_OW 250
35477: ST_TO_ADDR
// y := GetY ( enemy ) ;
35478: LD_ADDR_VAR 0 5
35482: PUSH
35483: LD_VAR 0 10
35487: PPUSH
35488: CALL_OW 251
35492: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35493: LD_ADDR_VAR 0 6
35497: PUSH
35498: LD_VAR 0 4
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PPUSH
35507: LD_INT 1
35509: PPUSH
35510: CALL_OW 12
35514: PLUS
35515: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35516: LD_ADDR_VAR 0 7
35520: PUSH
35521: LD_VAR 0 5
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PPUSH
35530: LD_INT 1
35532: PPUSH
35533: CALL_OW 12
35537: PLUS
35538: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35539: LD_VAR 0 6
35543: PPUSH
35544: LD_VAR 0 7
35548: PPUSH
35549: CALL_OW 488
35553: NOT
35554: IFFALSE 35576
// begin _x := x ;
35556: LD_ADDR_VAR 0 6
35560: PUSH
35561: LD_VAR 0 4
35565: ST_TO_ADDR
// _y := y ;
35566: LD_ADDR_VAR 0 7
35570: PUSH
35571: LD_VAR 0 5
35575: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35576: LD_ADDR_VAR 0 3
35580: PUSH
35581: LD_INT 1
35583: PPUSH
35584: LD_VAR 0 14
35588: PPUSH
35589: CALL_OW 12
35593: ST_TO_ADDR
// case i of 1 :
35594: LD_VAR 0 3
35598: PUSH
35599: LD_INT 1
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35607
35605: GO 35624
35607: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35608: LD_VAR 0 1
35612: PPUSH
35613: LD_VAR 0 10
35617: PPUSH
35618: CALL_OW 115
35622: GO 35685
35624: LD_INT 2
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35632
35630: GO 35654
35632: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35633: LD_VAR 0 1
35637: PPUSH
35638: LD_VAR 0 6
35642: PPUSH
35643: LD_VAR 0 7
35647: PPUSH
35648: CALL_OW 153
35652: GO 35685
35654: LD_INT 3
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35662
35660: GO 35684
35662: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35663: LD_VAR 0 1
35667: PPUSH
35668: LD_VAR 0 6
35672: PPUSH
35673: LD_VAR 0 7
35677: PPUSH
35678: CALL_OW 154
35682: GO 35685
35684: POP
// end ;
35685: LD_VAR 0 2
35689: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35690: LD_INT 0
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
// if not unit or not building then
35698: LD_VAR 0 1
35702: NOT
35703: PUSH
35704: LD_VAR 0 2
35708: NOT
35709: OR
35710: IFFALSE 35714
// exit ;
35712: GO 35872
// x := GetX ( building ) ;
35714: LD_ADDR_VAR 0 5
35718: PUSH
35719: LD_VAR 0 2
35723: PPUSH
35724: CALL_OW 250
35728: ST_TO_ADDR
// y := GetY ( building ) ;
35729: LD_ADDR_VAR 0 6
35733: PUSH
35734: LD_VAR 0 2
35738: PPUSH
35739: CALL_OW 251
35743: ST_TO_ADDR
// for i = 0 to 5 do
35744: LD_ADDR_VAR 0 4
35748: PUSH
35749: DOUBLE
35750: LD_INT 0
35752: DEC
35753: ST_TO_ADDR
35754: LD_INT 5
35756: PUSH
35757: FOR_TO
35758: IFFALSE 35870
// begin _x := ShiftX ( x , i , 3 ) ;
35760: LD_ADDR_VAR 0 7
35764: PUSH
35765: LD_VAR 0 5
35769: PPUSH
35770: LD_VAR 0 4
35774: PPUSH
35775: LD_INT 3
35777: PPUSH
35778: CALL_OW 272
35782: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35783: LD_ADDR_VAR 0 8
35787: PUSH
35788: LD_VAR 0 6
35792: PPUSH
35793: LD_VAR 0 4
35797: PPUSH
35798: LD_INT 3
35800: PPUSH
35801: CALL_OW 273
35805: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35806: LD_VAR 0 7
35810: PPUSH
35811: LD_VAR 0 8
35815: PPUSH
35816: CALL_OW 488
35820: NOT
35821: IFFALSE 35825
// continue ;
35823: GO 35757
// if HexInfo ( _x , _y ) = 0 then
35825: LD_VAR 0 7
35829: PPUSH
35830: LD_VAR 0 8
35834: PPUSH
35835: CALL_OW 428
35839: PUSH
35840: LD_INT 0
35842: EQUAL
35843: IFFALSE 35868
// begin ComMoveXY ( unit , _x , _y ) ;
35845: LD_VAR 0 1
35849: PPUSH
35850: LD_VAR 0 7
35854: PPUSH
35855: LD_VAR 0 8
35859: PPUSH
35860: CALL_OW 111
// exit ;
35864: POP
35865: POP
35866: GO 35872
// end ; end ;
35868: GO 35757
35870: POP
35871: POP
// end ;
35872: LD_VAR 0 3
35876: RET
// export function ScanBase ( side , base_area ) ; begin
35877: LD_INT 0
35879: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35880: LD_ADDR_VAR 0 3
35884: PUSH
35885: LD_VAR 0 2
35889: PPUSH
35890: LD_INT 81
35892: PUSH
35893: LD_VAR 0 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PPUSH
35902: CALL_OW 70
35906: ST_TO_ADDR
// end ;
35907: LD_VAR 0 3
35911: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35912: LD_INT 0
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
// result := false ;
35918: LD_ADDR_VAR 0 2
35922: PUSH
35923: LD_INT 0
35925: ST_TO_ADDR
// side := GetSide ( unit ) ;
35926: LD_ADDR_VAR 0 3
35930: PUSH
35931: LD_VAR 0 1
35935: PPUSH
35936: CALL_OW 255
35940: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35941: LD_ADDR_VAR 0 4
35945: PUSH
35946: LD_VAR 0 1
35950: PPUSH
35951: CALL_OW 248
35955: ST_TO_ADDR
// case nat of 1 :
35956: LD_VAR 0 4
35960: PUSH
35961: LD_INT 1
35963: DOUBLE
35964: EQUAL
35965: IFTRUE 35969
35967: GO 35980
35969: POP
// tech := tech_lassight ; 2 :
35970: LD_ADDR_VAR 0 5
35974: PUSH
35975: LD_INT 12
35977: ST_TO_ADDR
35978: GO 36019
35980: LD_INT 2
35982: DOUBLE
35983: EQUAL
35984: IFTRUE 35988
35986: GO 35999
35988: POP
// tech := tech_mortar ; 3 :
35989: LD_ADDR_VAR 0 5
35993: PUSH
35994: LD_INT 41
35996: ST_TO_ADDR
35997: GO 36019
35999: LD_INT 3
36001: DOUBLE
36002: EQUAL
36003: IFTRUE 36007
36005: GO 36018
36007: POP
// tech := tech_bazooka ; end ;
36008: LD_ADDR_VAR 0 5
36012: PUSH
36013: LD_INT 44
36015: ST_TO_ADDR
36016: GO 36019
36018: POP
// if Researched ( side , tech ) then
36019: LD_VAR 0 3
36023: PPUSH
36024: LD_VAR 0 5
36028: PPUSH
36029: CALL_OW 325
36033: IFFALSE 36060
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36035: LD_ADDR_VAR 0 2
36039: PUSH
36040: LD_INT 5
36042: PUSH
36043: LD_INT 8
36045: PUSH
36046: LD_INT 9
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: PUSH
36054: LD_VAR 0 4
36058: ARRAY
36059: ST_TO_ADDR
// end ;
36060: LD_VAR 0 2
36064: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36065: LD_INT 0
36067: PPUSH
36068: PPUSH
36069: PPUSH
// if not mines then
36070: LD_VAR 0 2
36074: NOT
36075: IFFALSE 36079
// exit ;
36077: GO 36223
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36079: LD_ADDR_VAR 0 5
36083: PUSH
36084: LD_INT 81
36086: PUSH
36087: LD_VAR 0 1
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 3
36098: PUSH
36099: LD_INT 21
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PPUSH
36117: CALL_OW 69
36121: ST_TO_ADDR
// for i in mines do
36122: LD_ADDR_VAR 0 4
36126: PUSH
36127: LD_VAR 0 2
36131: PUSH
36132: FOR_IN
36133: IFFALSE 36221
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36135: LD_VAR 0 4
36139: PUSH
36140: LD_INT 1
36142: ARRAY
36143: PPUSH
36144: LD_VAR 0 4
36148: PUSH
36149: LD_INT 2
36151: ARRAY
36152: PPUSH
36153: CALL_OW 458
36157: NOT
36158: IFFALSE 36162
// continue ;
36160: GO 36132
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36162: LD_VAR 0 4
36166: PUSH
36167: LD_INT 1
36169: ARRAY
36170: PPUSH
36171: LD_VAR 0 4
36175: PUSH
36176: LD_INT 2
36178: ARRAY
36179: PPUSH
36180: CALL_OW 428
36184: PUSH
36185: LD_VAR 0 5
36189: IN
36190: IFFALSE 36219
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36192: LD_VAR 0 4
36196: PUSH
36197: LD_INT 1
36199: ARRAY
36200: PPUSH
36201: LD_VAR 0 4
36205: PUSH
36206: LD_INT 2
36208: ARRAY
36209: PPUSH
36210: LD_VAR 0 1
36214: PPUSH
36215: CALL_OW 456
// end ;
36219: GO 36132
36221: POP
36222: POP
// end ;
36223: LD_VAR 0 3
36227: RET
// export function Count ( array ) ; var i ; begin
36228: LD_INT 0
36230: PPUSH
36231: PPUSH
// result := 0 ;
36232: LD_ADDR_VAR 0 2
36236: PUSH
36237: LD_INT 0
36239: ST_TO_ADDR
// for i in array do
36240: LD_ADDR_VAR 0 3
36244: PUSH
36245: LD_VAR 0 1
36249: PUSH
36250: FOR_IN
36251: IFFALSE 36275
// if i then
36253: LD_VAR 0 3
36257: IFFALSE 36273
// result := result + 1 ;
36259: LD_ADDR_VAR 0 2
36263: PUSH
36264: LD_VAR 0 2
36268: PUSH
36269: LD_INT 1
36271: PLUS
36272: ST_TO_ADDR
36273: GO 36250
36275: POP
36276: POP
// end ;
36277: LD_VAR 0 2
36281: RET
// export function IsEmpty ( building ) ; begin
36282: LD_INT 0
36284: PPUSH
// if not building then
36285: LD_VAR 0 1
36289: NOT
36290: IFFALSE 36294
// exit ;
36292: GO 36337
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36294: LD_ADDR_VAR 0 2
36298: PUSH
36299: LD_VAR 0 1
36303: PUSH
36304: LD_INT 22
36306: PUSH
36307: LD_VAR 0 1
36311: PPUSH
36312: CALL_OW 255
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 58
36323: PUSH
36324: EMPTY
36325: LIST
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PPUSH
36331: CALL_OW 69
36335: IN
36336: ST_TO_ADDR
// end ;
36337: LD_VAR 0 2
36341: RET
// export function IsNotFull ( building ) ; begin
36342: LD_INT 0
36344: PPUSH
// if not building then
36345: LD_VAR 0 1
36349: NOT
36350: IFFALSE 36354
// exit ;
36352: GO 36373
// result := UnitsInside ( building ) < 6 ;
36354: LD_ADDR_VAR 0 2
36358: PUSH
36359: LD_VAR 0 1
36363: PPUSH
36364: CALL_OW 313
36368: PUSH
36369: LD_INT 6
36371: LESS
36372: ST_TO_ADDR
// end ;
36373: LD_VAR 0 2
36377: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36378: LD_INT 0
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
// tmp := [ ] ;
36384: LD_ADDR_VAR 0 3
36388: PUSH
36389: EMPTY
36390: ST_TO_ADDR
// list := [ ] ;
36391: LD_ADDR_VAR 0 5
36395: PUSH
36396: EMPTY
36397: ST_TO_ADDR
// for i = 16 to 25 do
36398: LD_ADDR_VAR 0 4
36402: PUSH
36403: DOUBLE
36404: LD_INT 16
36406: DEC
36407: ST_TO_ADDR
36408: LD_INT 25
36410: PUSH
36411: FOR_TO
36412: IFFALSE 36485
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_VAR 0 3
36423: PUSH
36424: LD_INT 22
36426: PUSH
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 255
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 91
36443: PUSH
36444: LD_VAR 0 1
36448: PUSH
36449: LD_INT 6
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 30
36459: PUSH
36460: LD_VAR 0 4
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: PUSH
36474: EMPTY
36475: LIST
36476: PPUSH
36477: CALL_OW 69
36481: ADD
36482: ST_TO_ADDR
36483: GO 36411
36485: POP
36486: POP
// for i = 1 to tmp do
36487: LD_ADDR_VAR 0 4
36491: PUSH
36492: DOUBLE
36493: LD_INT 1
36495: DEC
36496: ST_TO_ADDR
36497: LD_VAR 0 3
36501: PUSH
36502: FOR_TO
36503: IFFALSE 36591
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36505: LD_ADDR_VAR 0 5
36509: PUSH
36510: LD_VAR 0 5
36514: PUSH
36515: LD_VAR 0 3
36519: PUSH
36520: LD_VAR 0 4
36524: ARRAY
36525: PPUSH
36526: CALL_OW 266
36530: PUSH
36531: LD_VAR 0 3
36535: PUSH
36536: LD_VAR 0 4
36540: ARRAY
36541: PPUSH
36542: CALL_OW 250
36546: PUSH
36547: LD_VAR 0 3
36551: PUSH
36552: LD_VAR 0 4
36556: ARRAY
36557: PPUSH
36558: CALL_OW 251
36562: PUSH
36563: LD_VAR 0 3
36567: PUSH
36568: LD_VAR 0 4
36572: ARRAY
36573: PPUSH
36574: CALL_OW 254
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: ADD
36588: ST_TO_ADDR
36589: GO 36502
36591: POP
36592: POP
// result := list ;
36593: LD_ADDR_VAR 0 2
36597: PUSH
36598: LD_VAR 0 5
36602: ST_TO_ADDR
// end ;
36603: LD_VAR 0 2
36607: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36608: LD_INT 0
36610: PPUSH
36611: PPUSH
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
// if not factory then
36617: LD_VAR 0 1
36621: NOT
36622: IFFALSE 36626
// exit ;
36624: GO 37219
// if control = control_apeman then
36626: LD_VAR 0 4
36630: PUSH
36631: LD_INT 5
36633: EQUAL
36634: IFFALSE 36743
// begin tmp := UnitsInside ( factory ) ;
36636: LD_ADDR_VAR 0 8
36640: PUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 313
36650: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36651: LD_VAR 0 8
36655: PPUSH
36656: LD_INT 25
36658: PUSH
36659: LD_INT 12
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PPUSH
36666: CALL_OW 72
36670: NOT
36671: IFFALSE 36681
// control := control_manual ;
36673: LD_ADDR_VAR 0 4
36677: PUSH
36678: LD_INT 1
36680: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36681: LD_ADDR_VAR 0 8
36685: PUSH
36686: LD_VAR 0 1
36690: PPUSH
36691: CALL 36378 0 1
36695: ST_TO_ADDR
// if tmp then
36696: LD_VAR 0 8
36700: IFFALSE 36743
// begin for i in tmp do
36702: LD_ADDR_VAR 0 7
36706: PUSH
36707: LD_VAR 0 8
36711: PUSH
36712: FOR_IN
36713: IFFALSE 36741
// if i [ 1 ] = b_ext_radio then
36715: LD_VAR 0 7
36719: PUSH
36720: LD_INT 1
36722: ARRAY
36723: PUSH
36724: LD_INT 22
36726: EQUAL
36727: IFFALSE 36739
// begin control := control_remote ;
36729: LD_ADDR_VAR 0 4
36733: PUSH
36734: LD_INT 2
36736: ST_TO_ADDR
// break ;
36737: GO 36741
// end ;
36739: GO 36712
36741: POP
36742: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36743: LD_VAR 0 1
36747: PPUSH
36748: LD_VAR 0 2
36752: PPUSH
36753: LD_VAR 0 3
36757: PPUSH
36758: LD_VAR 0 4
36762: PPUSH
36763: LD_VAR 0 5
36767: PPUSH
36768: CALL_OW 448
36772: IFFALSE 36807
// begin result := [ chassis , engine , control , weapon ] ;
36774: LD_ADDR_VAR 0 6
36778: PUSH
36779: LD_VAR 0 2
36783: PUSH
36784: LD_VAR 0 3
36788: PUSH
36789: LD_VAR 0 4
36793: PUSH
36794: LD_VAR 0 5
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// exit ;
36805: GO 37219
// end ; _chassis := AvailableChassisList ( factory ) ;
36807: LD_ADDR_VAR 0 9
36811: PUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 475
36821: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36822: LD_ADDR_VAR 0 11
36826: PUSH
36827: LD_VAR 0 1
36831: PPUSH
36832: CALL_OW 476
36836: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36837: LD_ADDR_VAR 0 12
36841: PUSH
36842: LD_VAR 0 1
36846: PPUSH
36847: CALL_OW 477
36851: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36852: LD_ADDR_VAR 0 10
36856: PUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 478
36866: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36867: LD_VAR 0 9
36871: NOT
36872: PUSH
36873: LD_VAR 0 11
36877: NOT
36878: OR
36879: PUSH
36880: LD_VAR 0 12
36884: NOT
36885: OR
36886: PUSH
36887: LD_VAR 0 10
36891: NOT
36892: OR
36893: IFFALSE 36928
// begin result := [ chassis , engine , control , weapon ] ;
36895: LD_ADDR_VAR 0 6
36899: PUSH
36900: LD_VAR 0 2
36904: PUSH
36905: LD_VAR 0 3
36909: PUSH
36910: LD_VAR 0 4
36914: PUSH
36915: LD_VAR 0 5
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
// exit ;
36926: GO 37219
// end ; if not chassis in _chassis then
36928: LD_VAR 0 2
36932: PUSH
36933: LD_VAR 0 9
36937: IN
36938: NOT
36939: IFFALSE 36965
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36941: LD_ADDR_VAR 0 2
36945: PUSH
36946: LD_VAR 0 9
36950: PUSH
36951: LD_INT 1
36953: PPUSH
36954: LD_VAR 0 9
36958: PPUSH
36959: CALL_OW 12
36963: ARRAY
36964: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36965: LD_VAR 0 2
36969: PPUSH
36970: LD_VAR 0 3
36974: PPUSH
36975: CALL 37224 0 2
36979: NOT
36980: IFFALSE 37039
// repeat engine := _engine [ 1 ] ;
36982: LD_ADDR_VAR 0 3
36986: PUSH
36987: LD_VAR 0 11
36991: PUSH
36992: LD_INT 1
36994: ARRAY
36995: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36996: LD_ADDR_VAR 0 11
37000: PUSH
37001: LD_VAR 0 11
37005: PPUSH
37006: LD_INT 1
37008: PPUSH
37009: CALL_OW 3
37013: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37014: LD_VAR 0 2
37018: PPUSH
37019: LD_VAR 0 3
37023: PPUSH
37024: CALL 37224 0 2
37028: PUSH
37029: LD_VAR 0 11
37033: PUSH
37034: EMPTY
37035: EQUAL
37036: OR
37037: IFFALSE 36982
// if not control in _control then
37039: LD_VAR 0 4
37043: PUSH
37044: LD_VAR 0 12
37048: IN
37049: NOT
37050: IFFALSE 37076
// control := _control [ rand ( 1 , _control ) ] ;
37052: LD_ADDR_VAR 0 4
37056: PUSH
37057: LD_VAR 0 12
37061: PUSH
37062: LD_INT 1
37064: PPUSH
37065: LD_VAR 0 12
37069: PPUSH
37070: CALL_OW 12
37074: ARRAY
37075: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37076: LD_VAR 0 2
37080: PPUSH
37081: LD_VAR 0 5
37085: PPUSH
37086: CALL 37444 0 2
37090: NOT
37091: IFFALSE 37150
// repeat weapon := _weapon [ 1 ] ;
37093: LD_ADDR_VAR 0 5
37097: PUSH
37098: LD_VAR 0 10
37102: PUSH
37103: LD_INT 1
37105: ARRAY
37106: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37107: LD_ADDR_VAR 0 10
37111: PUSH
37112: LD_VAR 0 10
37116: PPUSH
37117: LD_INT 1
37119: PPUSH
37120: CALL_OW 3
37124: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37125: LD_VAR 0 2
37129: PPUSH
37130: LD_VAR 0 5
37134: PPUSH
37135: CALL 37444 0 2
37139: PUSH
37140: LD_VAR 0 10
37144: PUSH
37145: EMPTY
37146: EQUAL
37147: OR
37148: IFFALSE 37093
// result := [ ] ;
37150: LD_ADDR_VAR 0 6
37154: PUSH
37155: EMPTY
37156: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37157: LD_VAR 0 1
37161: PPUSH
37162: LD_VAR 0 2
37166: PPUSH
37167: LD_VAR 0 3
37171: PPUSH
37172: LD_VAR 0 4
37176: PPUSH
37177: LD_VAR 0 5
37181: PPUSH
37182: CALL_OW 448
37186: IFFALSE 37219
// result := [ chassis , engine , control , weapon ] ;
37188: LD_ADDR_VAR 0 6
37192: PUSH
37193: LD_VAR 0 2
37197: PUSH
37198: LD_VAR 0 3
37202: PUSH
37203: LD_VAR 0 4
37207: PUSH
37208: LD_VAR 0 5
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: ST_TO_ADDR
// end ;
37219: LD_VAR 0 6
37223: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37224: LD_INT 0
37226: PPUSH
// if not chassis or not engine then
37227: LD_VAR 0 1
37231: NOT
37232: PUSH
37233: LD_VAR 0 2
37237: NOT
37238: OR
37239: IFFALSE 37243
// exit ;
37241: GO 37439
// case engine of engine_solar :
37243: LD_VAR 0 2
37247: PUSH
37248: LD_INT 2
37250: DOUBLE
37251: EQUAL
37252: IFTRUE 37256
37254: GO 37294
37256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37257: LD_ADDR_VAR 0 3
37261: PUSH
37262: LD_INT 11
37264: PUSH
37265: LD_INT 12
37267: PUSH
37268: LD_INT 13
37270: PUSH
37271: LD_INT 14
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: ST_TO_ADDR
37292: GO 37423
37294: LD_INT 1
37296: DOUBLE
37297: EQUAL
37298: IFTRUE 37302
37300: GO 37364
37302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37303: LD_ADDR_VAR 0 3
37307: PUSH
37308: LD_INT 11
37310: PUSH
37311: LD_INT 12
37313: PUSH
37314: LD_INT 13
37316: PUSH
37317: LD_INT 14
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: LD_INT 3
37328: PUSH
37329: LD_INT 4
37331: PUSH
37332: LD_INT 5
37334: PUSH
37335: LD_INT 21
37337: PUSH
37338: LD_INT 23
37340: PUSH
37341: LD_INT 22
37343: PUSH
37344: LD_INT 24
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: ST_TO_ADDR
37362: GO 37423
37364: LD_INT 3
37366: DOUBLE
37367: EQUAL
37368: IFTRUE 37372
37370: GO 37422
37372: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37373: LD_ADDR_VAR 0 3
37377: PUSH
37378: LD_INT 13
37380: PUSH
37381: LD_INT 14
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: LD_INT 4
37392: PUSH
37393: LD_INT 5
37395: PUSH
37396: LD_INT 21
37398: PUSH
37399: LD_INT 22
37401: PUSH
37402: LD_INT 23
37404: PUSH
37405: LD_INT 24
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: ST_TO_ADDR
37420: GO 37423
37422: POP
// result := ( chassis in result ) ;
37423: LD_ADDR_VAR 0 3
37427: PUSH
37428: LD_VAR 0 1
37432: PUSH
37433: LD_VAR 0 3
37437: IN
37438: ST_TO_ADDR
// end ;
37439: LD_VAR 0 3
37443: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37444: LD_INT 0
37446: PPUSH
// if not chassis or not weapon then
37447: LD_VAR 0 1
37451: NOT
37452: PUSH
37453: LD_VAR 0 2
37457: NOT
37458: OR
37459: IFFALSE 37463
// exit ;
37461: GO 38525
// case weapon of us_machine_gun :
37463: LD_VAR 0 2
37467: PUSH
37468: LD_INT 2
37470: DOUBLE
37471: EQUAL
37472: IFTRUE 37476
37474: GO 37506
37476: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37477: LD_ADDR_VAR 0 3
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 2
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: LD_INT 4
37493: PUSH
37494: LD_INT 5
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: ST_TO_ADDR
37504: GO 38509
37506: LD_INT 3
37508: DOUBLE
37509: EQUAL
37510: IFTRUE 37514
37512: GO 37544
37514: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37515: LD_ADDR_VAR 0 3
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: LD_INT 4
37531: PUSH
37532: LD_INT 5
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: ST_TO_ADDR
37542: GO 38509
37544: LD_INT 11
37546: DOUBLE
37547: EQUAL
37548: IFTRUE 37552
37550: GO 37582
37552: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37553: LD_ADDR_VAR 0 3
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 2
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: LD_INT 4
37569: PUSH
37570: LD_INT 5
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
37580: GO 38509
37582: LD_INT 4
37584: DOUBLE
37585: EQUAL
37586: IFTRUE 37590
37588: GO 37616
37590: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37591: LD_ADDR_VAR 0 3
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: LD_INT 4
37604: PUSH
37605: LD_INT 5
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: ST_TO_ADDR
37614: GO 38509
37616: LD_INT 5
37618: DOUBLE
37619: EQUAL
37620: IFTRUE 37624
37622: GO 37650
37624: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37625: LD_ADDR_VAR 0 3
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: LD_INT 4
37638: PUSH
37639: LD_INT 5
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: ST_TO_ADDR
37648: GO 38509
37650: LD_INT 9
37652: DOUBLE
37653: EQUAL
37654: IFTRUE 37658
37656: GO 37684
37658: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37659: LD_ADDR_VAR 0 3
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 3
37669: PUSH
37670: LD_INT 4
37672: PUSH
37673: LD_INT 5
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: ST_TO_ADDR
37682: GO 38509
37684: LD_INT 7
37686: DOUBLE
37687: EQUAL
37688: IFTRUE 37692
37690: GO 37718
37692: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37693: LD_ADDR_VAR 0 3
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 3
37703: PUSH
37704: LD_INT 4
37706: PUSH
37707: LD_INT 5
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: ST_TO_ADDR
37716: GO 38509
37718: LD_INT 12
37720: DOUBLE
37721: EQUAL
37722: IFTRUE 37726
37724: GO 37752
37726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37727: LD_ADDR_VAR 0 3
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: LD_INT 3
37737: PUSH
37738: LD_INT 4
37740: PUSH
37741: LD_INT 5
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: ST_TO_ADDR
37750: GO 38509
37752: LD_INT 13
37754: DOUBLE
37755: EQUAL
37756: IFTRUE 37760
37758: GO 37786
37760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37761: LD_ADDR_VAR 0 3
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: LD_INT 4
37774: PUSH
37775: LD_INT 5
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: ST_TO_ADDR
37784: GO 38509
37786: LD_INT 14
37788: DOUBLE
37789: EQUAL
37790: IFTRUE 37794
37792: GO 37812
37794: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37795: LD_ADDR_VAR 0 3
37799: PUSH
37800: LD_INT 4
37802: PUSH
37803: LD_INT 5
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: ST_TO_ADDR
37810: GO 38509
37812: LD_INT 6
37814: DOUBLE
37815: EQUAL
37816: IFTRUE 37820
37818: GO 37838
37820: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37821: LD_ADDR_VAR 0 3
37825: PUSH
37826: LD_INT 4
37828: PUSH
37829: LD_INT 5
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: ST_TO_ADDR
37836: GO 38509
37838: LD_INT 10
37840: DOUBLE
37841: EQUAL
37842: IFTRUE 37846
37844: GO 37864
37846: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37847: LD_ADDR_VAR 0 3
37851: PUSH
37852: LD_INT 4
37854: PUSH
37855: LD_INT 5
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: ST_TO_ADDR
37862: GO 38509
37864: LD_INT 22
37866: DOUBLE
37867: EQUAL
37868: IFTRUE 37872
37870: GO 37898
37872: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37873: LD_ADDR_VAR 0 3
37877: PUSH
37878: LD_INT 11
37880: PUSH
37881: LD_INT 12
37883: PUSH
37884: LD_INT 13
37886: PUSH
37887: LD_INT 14
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
37896: GO 38509
37898: LD_INT 23
37900: DOUBLE
37901: EQUAL
37902: IFTRUE 37906
37904: GO 37932
37906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_INT 11
37914: PUSH
37915: LD_INT 12
37917: PUSH
37918: LD_INT 13
37920: PUSH
37921: LD_INT 14
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
37930: GO 38509
37932: LD_INT 24
37934: DOUBLE
37935: EQUAL
37936: IFTRUE 37940
37938: GO 37966
37940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37941: LD_ADDR_VAR 0 3
37945: PUSH
37946: LD_INT 11
37948: PUSH
37949: LD_INT 12
37951: PUSH
37952: LD_INT 13
37954: PUSH
37955: LD_INT 14
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: ST_TO_ADDR
37964: GO 38509
37966: LD_INT 30
37968: DOUBLE
37969: EQUAL
37970: IFTRUE 37974
37972: GO 38000
37974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37975: LD_ADDR_VAR 0 3
37979: PUSH
37980: LD_INT 11
37982: PUSH
37983: LD_INT 12
37985: PUSH
37986: LD_INT 13
37988: PUSH
37989: LD_INT 14
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: ST_TO_ADDR
37998: GO 38509
38000: LD_INT 25
38002: DOUBLE
38003: EQUAL
38004: IFTRUE 38008
38006: GO 38026
38008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38009: LD_ADDR_VAR 0 3
38013: PUSH
38014: LD_INT 13
38016: PUSH
38017: LD_INT 14
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: ST_TO_ADDR
38024: GO 38509
38026: LD_INT 27
38028: DOUBLE
38029: EQUAL
38030: IFTRUE 38034
38032: GO 38052
38034: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38035: LD_ADDR_VAR 0 3
38039: PUSH
38040: LD_INT 13
38042: PUSH
38043: LD_INT 14
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: ST_TO_ADDR
38050: GO 38509
38052: LD_EXP 43
38056: DOUBLE
38057: EQUAL
38058: IFTRUE 38062
38060: GO 38088
38062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38063: LD_ADDR_VAR 0 3
38067: PUSH
38068: LD_INT 11
38070: PUSH
38071: LD_INT 12
38073: PUSH
38074: LD_INT 13
38076: PUSH
38077: LD_INT 14
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: ST_TO_ADDR
38086: GO 38509
38088: LD_INT 28
38090: DOUBLE
38091: EQUAL
38092: IFTRUE 38096
38094: GO 38114
38096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38097: LD_ADDR_VAR 0 3
38101: PUSH
38102: LD_INT 13
38104: PUSH
38105: LD_INT 14
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: ST_TO_ADDR
38112: GO 38509
38114: LD_INT 29
38116: DOUBLE
38117: EQUAL
38118: IFTRUE 38122
38120: GO 38140
38122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38123: LD_ADDR_VAR 0 3
38127: PUSH
38128: LD_INT 13
38130: PUSH
38131: LD_INT 14
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: ST_TO_ADDR
38138: GO 38509
38140: LD_INT 31
38142: DOUBLE
38143: EQUAL
38144: IFTRUE 38148
38146: GO 38166
38148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38149: LD_ADDR_VAR 0 3
38153: PUSH
38154: LD_INT 13
38156: PUSH
38157: LD_INT 14
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: ST_TO_ADDR
38164: GO 38509
38166: LD_INT 26
38168: DOUBLE
38169: EQUAL
38170: IFTRUE 38174
38172: GO 38192
38174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38175: LD_ADDR_VAR 0 3
38179: PUSH
38180: LD_INT 13
38182: PUSH
38183: LD_INT 14
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: ST_TO_ADDR
38190: GO 38509
38192: LD_INT 42
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38226
38200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38201: LD_ADDR_VAR 0 3
38205: PUSH
38206: LD_INT 21
38208: PUSH
38209: LD_INT 22
38211: PUSH
38212: LD_INT 23
38214: PUSH
38215: LD_INT 24
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: ST_TO_ADDR
38224: GO 38509
38226: LD_INT 43
38228: DOUBLE
38229: EQUAL
38230: IFTRUE 38234
38232: GO 38260
38234: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_INT 21
38242: PUSH
38243: LD_INT 22
38245: PUSH
38246: LD_INT 23
38248: PUSH
38249: LD_INT 24
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: ST_TO_ADDR
38258: GO 38509
38260: LD_INT 44
38262: DOUBLE
38263: EQUAL
38264: IFTRUE 38268
38266: GO 38294
38268: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38269: LD_ADDR_VAR 0 3
38273: PUSH
38274: LD_INT 21
38276: PUSH
38277: LD_INT 22
38279: PUSH
38280: LD_INT 23
38282: PUSH
38283: LD_INT 24
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: ST_TO_ADDR
38292: GO 38509
38294: LD_INT 45
38296: DOUBLE
38297: EQUAL
38298: IFTRUE 38302
38300: GO 38328
38302: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38303: LD_ADDR_VAR 0 3
38307: PUSH
38308: LD_INT 21
38310: PUSH
38311: LD_INT 22
38313: PUSH
38314: LD_INT 23
38316: PUSH
38317: LD_INT 24
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: ST_TO_ADDR
38326: GO 38509
38328: LD_INT 49
38330: DOUBLE
38331: EQUAL
38332: IFTRUE 38336
38334: GO 38362
38336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38337: LD_ADDR_VAR 0 3
38341: PUSH
38342: LD_INT 21
38344: PUSH
38345: LD_INT 22
38347: PUSH
38348: LD_INT 23
38350: PUSH
38351: LD_INT 24
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: ST_TO_ADDR
38360: GO 38509
38362: LD_INT 51
38364: DOUBLE
38365: EQUAL
38366: IFTRUE 38370
38368: GO 38396
38370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38371: LD_ADDR_VAR 0 3
38375: PUSH
38376: LD_INT 21
38378: PUSH
38379: LD_INT 22
38381: PUSH
38382: LD_INT 23
38384: PUSH
38385: LD_INT 24
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
38394: GO 38509
38396: LD_INT 52
38398: DOUBLE
38399: EQUAL
38400: IFTRUE 38404
38402: GO 38430
38404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38405: LD_ADDR_VAR 0 3
38409: PUSH
38410: LD_INT 21
38412: PUSH
38413: LD_INT 22
38415: PUSH
38416: LD_INT 23
38418: PUSH
38419: LD_INT 24
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: ST_TO_ADDR
38428: GO 38509
38430: LD_INT 53
38432: DOUBLE
38433: EQUAL
38434: IFTRUE 38438
38436: GO 38456
38438: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_INT 23
38446: PUSH
38447: LD_INT 24
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: ST_TO_ADDR
38454: GO 38509
38456: LD_INT 46
38458: DOUBLE
38459: EQUAL
38460: IFTRUE 38464
38462: GO 38482
38464: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38465: LD_ADDR_VAR 0 3
38469: PUSH
38470: LD_INT 23
38472: PUSH
38473: LD_INT 24
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: ST_TO_ADDR
38480: GO 38509
38482: LD_INT 47
38484: DOUBLE
38485: EQUAL
38486: IFTRUE 38490
38488: GO 38508
38490: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38491: LD_ADDR_VAR 0 3
38495: PUSH
38496: LD_INT 23
38498: PUSH
38499: LD_INT 24
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: ST_TO_ADDR
38506: GO 38509
38508: POP
// result := ( chassis in result ) ;
38509: LD_ADDR_VAR 0 3
38513: PUSH
38514: LD_VAR 0 1
38518: PUSH
38519: LD_VAR 0 3
38523: IN
38524: ST_TO_ADDR
// end ;
38525: LD_VAR 0 3
38529: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38530: LD_INT 0
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
// result := array ;
38539: LD_ADDR_VAR 0 5
38543: PUSH
38544: LD_VAR 0 1
38548: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38549: LD_VAR 0 1
38553: NOT
38554: PUSH
38555: LD_VAR 0 2
38559: NOT
38560: OR
38561: PUSH
38562: LD_VAR 0 3
38566: NOT
38567: OR
38568: PUSH
38569: LD_VAR 0 2
38573: PUSH
38574: LD_VAR 0 1
38578: GREATER
38579: OR
38580: PUSH
38581: LD_VAR 0 3
38585: PUSH
38586: LD_VAR 0 1
38590: GREATER
38591: OR
38592: IFFALSE 38596
// exit ;
38594: GO 38892
// if direction then
38596: LD_VAR 0 4
38600: IFFALSE 38664
// begin d := 1 ;
38602: LD_ADDR_VAR 0 9
38606: PUSH
38607: LD_INT 1
38609: ST_TO_ADDR
// if i_from > i_to then
38610: LD_VAR 0 2
38614: PUSH
38615: LD_VAR 0 3
38619: GREATER
38620: IFFALSE 38646
// length := ( array - i_from ) + i_to else
38622: LD_ADDR_VAR 0 11
38626: PUSH
38627: LD_VAR 0 1
38631: PUSH
38632: LD_VAR 0 2
38636: MINUS
38637: PUSH
38638: LD_VAR 0 3
38642: PLUS
38643: ST_TO_ADDR
38644: GO 38662
// length := i_to - i_from ;
38646: LD_ADDR_VAR 0 11
38650: PUSH
38651: LD_VAR 0 3
38655: PUSH
38656: LD_VAR 0 2
38660: MINUS
38661: ST_TO_ADDR
// end else
38662: GO 38725
// begin d := - 1 ;
38664: LD_ADDR_VAR 0 9
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: ST_TO_ADDR
// if i_from > i_to then
38673: LD_VAR 0 2
38677: PUSH
38678: LD_VAR 0 3
38682: GREATER
38683: IFFALSE 38703
// length := i_from - i_to else
38685: LD_ADDR_VAR 0 11
38689: PUSH
38690: LD_VAR 0 2
38694: PUSH
38695: LD_VAR 0 3
38699: MINUS
38700: ST_TO_ADDR
38701: GO 38725
// length := ( array - i_to ) + i_from ;
38703: LD_ADDR_VAR 0 11
38707: PUSH
38708: LD_VAR 0 1
38712: PUSH
38713: LD_VAR 0 3
38717: MINUS
38718: PUSH
38719: LD_VAR 0 2
38723: PLUS
38724: ST_TO_ADDR
// end ; if not length then
38725: LD_VAR 0 11
38729: NOT
38730: IFFALSE 38734
// exit ;
38732: GO 38892
// tmp := array ;
38734: LD_ADDR_VAR 0 10
38738: PUSH
38739: LD_VAR 0 1
38743: ST_TO_ADDR
// for i = 1 to length do
38744: LD_ADDR_VAR 0 6
38748: PUSH
38749: DOUBLE
38750: LD_INT 1
38752: DEC
38753: ST_TO_ADDR
38754: LD_VAR 0 11
38758: PUSH
38759: FOR_TO
38760: IFFALSE 38880
// begin for j = 1 to array do
38762: LD_ADDR_VAR 0 7
38766: PUSH
38767: DOUBLE
38768: LD_INT 1
38770: DEC
38771: ST_TO_ADDR
38772: LD_VAR 0 1
38776: PUSH
38777: FOR_TO
38778: IFFALSE 38866
// begin k := j + d ;
38780: LD_ADDR_VAR 0 8
38784: PUSH
38785: LD_VAR 0 7
38789: PUSH
38790: LD_VAR 0 9
38794: PLUS
38795: ST_TO_ADDR
// if k > array then
38796: LD_VAR 0 8
38800: PUSH
38801: LD_VAR 0 1
38805: GREATER
38806: IFFALSE 38816
// k := 1 ;
38808: LD_ADDR_VAR 0 8
38812: PUSH
38813: LD_INT 1
38815: ST_TO_ADDR
// if not k then
38816: LD_VAR 0 8
38820: NOT
38821: IFFALSE 38833
// k := array ;
38823: LD_ADDR_VAR 0 8
38827: PUSH
38828: LD_VAR 0 1
38832: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38833: LD_ADDR_VAR 0 10
38837: PUSH
38838: LD_VAR 0 10
38842: PPUSH
38843: LD_VAR 0 8
38847: PPUSH
38848: LD_VAR 0 1
38852: PUSH
38853: LD_VAR 0 7
38857: ARRAY
38858: PPUSH
38859: CALL_OW 1
38863: ST_TO_ADDR
// end ;
38864: GO 38777
38866: POP
38867: POP
// array := tmp ;
38868: LD_ADDR_VAR 0 1
38872: PUSH
38873: LD_VAR 0 10
38877: ST_TO_ADDR
// end ;
38878: GO 38759
38880: POP
38881: POP
// result := array ;
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: LD_VAR 0 1
38891: ST_TO_ADDR
// end ;
38892: LD_VAR 0 5
38896: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38897: LD_INT 0
38899: PPUSH
38900: PPUSH
// result := 0 ;
38901: LD_ADDR_VAR 0 3
38905: PUSH
38906: LD_INT 0
38908: ST_TO_ADDR
// if not array or not value in array then
38909: LD_VAR 0 1
38913: NOT
38914: PUSH
38915: LD_VAR 0 2
38919: PUSH
38920: LD_VAR 0 1
38924: IN
38925: NOT
38926: OR
38927: IFFALSE 38931
// exit ;
38929: GO 38985
// for i = 1 to array do
38931: LD_ADDR_VAR 0 4
38935: PUSH
38936: DOUBLE
38937: LD_INT 1
38939: DEC
38940: ST_TO_ADDR
38941: LD_VAR 0 1
38945: PUSH
38946: FOR_TO
38947: IFFALSE 38983
// if value = array [ i ] then
38949: LD_VAR 0 2
38953: PUSH
38954: LD_VAR 0 1
38958: PUSH
38959: LD_VAR 0 4
38963: ARRAY
38964: EQUAL
38965: IFFALSE 38981
// begin result := i ;
38967: LD_ADDR_VAR 0 3
38971: PUSH
38972: LD_VAR 0 4
38976: ST_TO_ADDR
// exit ;
38977: POP
38978: POP
38979: GO 38985
// end ;
38981: GO 38946
38983: POP
38984: POP
// end ;
38985: LD_VAR 0 3
38989: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38990: LD_INT 0
38992: PPUSH
// vc_chassis := chassis ;
38993: LD_ADDR_OWVAR 37
38997: PUSH
38998: LD_VAR 0 1
39002: ST_TO_ADDR
// vc_engine := engine ;
39003: LD_ADDR_OWVAR 39
39007: PUSH
39008: LD_VAR 0 2
39012: ST_TO_ADDR
// vc_control := control ;
39013: LD_ADDR_OWVAR 38
39017: PUSH
39018: LD_VAR 0 3
39022: ST_TO_ADDR
// vc_weapon := weapon ;
39023: LD_ADDR_OWVAR 40
39027: PUSH
39028: LD_VAR 0 4
39032: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39033: LD_ADDR_OWVAR 41
39037: PUSH
39038: LD_VAR 0 5
39042: ST_TO_ADDR
// end ;
39043: LD_VAR 0 6
39047: RET
// export function WantPlant ( unit ) ; var task ; begin
39048: LD_INT 0
39050: PPUSH
39051: PPUSH
// result := false ;
39052: LD_ADDR_VAR 0 2
39056: PUSH
39057: LD_INT 0
39059: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39060: LD_ADDR_VAR 0 3
39064: PUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 437
39074: ST_TO_ADDR
// if task then
39075: LD_VAR 0 3
39079: IFFALSE 39107
// if task [ 1 ] [ 1 ] = p then
39081: LD_VAR 0 3
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: PUSH
39090: LD_INT 1
39092: ARRAY
39093: PUSH
39094: LD_STRING p
39096: EQUAL
39097: IFFALSE 39107
// result := true ;
39099: LD_ADDR_VAR 0 2
39103: PUSH
39104: LD_INT 1
39106: ST_TO_ADDR
// end ;
39107: LD_VAR 0 2
39111: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39112: LD_INT 0
39114: PPUSH
39115: PPUSH
39116: PPUSH
39117: PPUSH
// if pos < 1 then
39118: LD_VAR 0 2
39122: PUSH
39123: LD_INT 1
39125: LESS
39126: IFFALSE 39130
// exit ;
39128: GO 39433
// if pos = 1 then
39130: LD_VAR 0 2
39134: PUSH
39135: LD_INT 1
39137: EQUAL
39138: IFFALSE 39171
// result := Replace ( arr , pos [ 1 ] , value ) else
39140: LD_ADDR_VAR 0 4
39144: PUSH
39145: LD_VAR 0 1
39149: PPUSH
39150: LD_VAR 0 2
39154: PUSH
39155: LD_INT 1
39157: ARRAY
39158: PPUSH
39159: LD_VAR 0 3
39163: PPUSH
39164: CALL_OW 1
39168: ST_TO_ADDR
39169: GO 39433
// begin tmp := arr ;
39171: LD_ADDR_VAR 0 6
39175: PUSH
39176: LD_VAR 0 1
39180: ST_TO_ADDR
// s_arr := [ tmp ] ;
39181: LD_ADDR_VAR 0 7
39185: PUSH
39186: LD_VAR 0 6
39190: PUSH
39191: EMPTY
39192: LIST
39193: ST_TO_ADDR
// for i = 1 to pos - 1 do
39194: LD_ADDR_VAR 0 5
39198: PUSH
39199: DOUBLE
39200: LD_INT 1
39202: DEC
39203: ST_TO_ADDR
39204: LD_VAR 0 2
39208: PUSH
39209: LD_INT 1
39211: MINUS
39212: PUSH
39213: FOR_TO
39214: IFFALSE 39259
// begin tmp := tmp [ pos [ i ] ] ;
39216: LD_ADDR_VAR 0 6
39220: PUSH
39221: LD_VAR 0 6
39225: PUSH
39226: LD_VAR 0 2
39230: PUSH
39231: LD_VAR 0 5
39235: ARRAY
39236: ARRAY
39237: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39238: LD_ADDR_VAR 0 7
39242: PUSH
39243: LD_VAR 0 7
39247: PUSH
39248: LD_VAR 0 6
39252: PUSH
39253: EMPTY
39254: LIST
39255: ADD
39256: ST_TO_ADDR
// end ;
39257: GO 39213
39259: POP
39260: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39261: LD_ADDR_VAR 0 6
39265: PUSH
39266: LD_VAR 0 6
39270: PPUSH
39271: LD_VAR 0 2
39275: PUSH
39276: LD_VAR 0 2
39280: ARRAY
39281: PPUSH
39282: LD_VAR 0 3
39286: PPUSH
39287: CALL_OW 1
39291: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39292: LD_ADDR_VAR 0 7
39296: PUSH
39297: LD_VAR 0 7
39301: PPUSH
39302: LD_VAR 0 7
39306: PPUSH
39307: LD_VAR 0 6
39311: PPUSH
39312: CALL_OW 1
39316: ST_TO_ADDR
// for i = s_arr downto 2 do
39317: LD_ADDR_VAR 0 5
39321: PUSH
39322: DOUBLE
39323: LD_VAR 0 7
39327: INC
39328: ST_TO_ADDR
39329: LD_INT 2
39331: PUSH
39332: FOR_DOWNTO
39333: IFFALSE 39417
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39335: LD_ADDR_VAR 0 6
39339: PUSH
39340: LD_VAR 0 7
39344: PUSH
39345: LD_VAR 0 5
39349: PUSH
39350: LD_INT 1
39352: MINUS
39353: ARRAY
39354: PPUSH
39355: LD_VAR 0 2
39359: PUSH
39360: LD_VAR 0 5
39364: PUSH
39365: LD_INT 1
39367: MINUS
39368: ARRAY
39369: PPUSH
39370: LD_VAR 0 7
39374: PUSH
39375: LD_VAR 0 5
39379: ARRAY
39380: PPUSH
39381: CALL_OW 1
39385: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39386: LD_ADDR_VAR 0 7
39390: PUSH
39391: LD_VAR 0 7
39395: PPUSH
39396: LD_VAR 0 5
39400: PUSH
39401: LD_INT 1
39403: MINUS
39404: PPUSH
39405: LD_VAR 0 6
39409: PPUSH
39410: CALL_OW 1
39414: ST_TO_ADDR
// end ;
39415: GO 39332
39417: POP
39418: POP
// result := s_arr [ 1 ] ;
39419: LD_ADDR_VAR 0 4
39423: PUSH
39424: LD_VAR 0 7
39428: PUSH
39429: LD_INT 1
39431: ARRAY
39432: ST_TO_ADDR
// end ; end ;
39433: LD_VAR 0 4
39437: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39438: LD_INT 0
39440: PPUSH
39441: PPUSH
// if not list then
39442: LD_VAR 0 1
39446: NOT
39447: IFFALSE 39451
// exit ;
39449: GO 39542
// i := list [ pos1 ] ;
39451: LD_ADDR_VAR 0 5
39455: PUSH
39456: LD_VAR 0 1
39460: PUSH
39461: LD_VAR 0 2
39465: ARRAY
39466: ST_TO_ADDR
// if not i then
39467: LD_VAR 0 5
39471: NOT
39472: IFFALSE 39476
// exit ;
39474: GO 39542
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39476: LD_ADDR_VAR 0 1
39480: PUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: LD_VAR 0 2
39490: PPUSH
39491: LD_VAR 0 1
39495: PUSH
39496: LD_VAR 0 3
39500: ARRAY
39501: PPUSH
39502: CALL_OW 1
39506: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39507: LD_ADDR_VAR 0 1
39511: PUSH
39512: LD_VAR 0 1
39516: PPUSH
39517: LD_VAR 0 3
39521: PPUSH
39522: LD_VAR 0 5
39526: PPUSH
39527: CALL_OW 1
39531: ST_TO_ADDR
// result := list ;
39532: LD_ADDR_VAR 0 4
39536: PUSH
39537: LD_VAR 0 1
39541: ST_TO_ADDR
// end ;
39542: LD_VAR 0 4
39546: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39547: LD_INT 0
39549: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39550: LD_ADDR_VAR 0 5
39554: PUSH
39555: LD_VAR 0 1
39559: PPUSH
39560: CALL_OW 250
39564: PPUSH
39565: LD_VAR 0 1
39569: PPUSH
39570: CALL_OW 251
39574: PPUSH
39575: LD_VAR 0 2
39579: PPUSH
39580: LD_VAR 0 3
39584: PPUSH
39585: LD_VAR 0 4
39589: PPUSH
39590: CALL 39600 0 5
39594: ST_TO_ADDR
// end ;
39595: LD_VAR 0 5
39599: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39600: LD_INT 0
39602: PPUSH
39603: PPUSH
39604: PPUSH
39605: PPUSH
// if not list then
39606: LD_VAR 0 3
39610: NOT
39611: IFFALSE 39615
// exit ;
39613: GO 40003
// result := [ ] ;
39615: LD_ADDR_VAR 0 6
39619: PUSH
39620: EMPTY
39621: ST_TO_ADDR
// for i in list do
39622: LD_ADDR_VAR 0 7
39626: PUSH
39627: LD_VAR 0 3
39631: PUSH
39632: FOR_IN
39633: IFFALSE 39835
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39635: LD_ADDR_VAR 0 9
39639: PUSH
39640: LD_VAR 0 7
39644: PPUSH
39645: LD_VAR 0 1
39649: PPUSH
39650: LD_VAR 0 2
39654: PPUSH
39655: CALL_OW 297
39659: ST_TO_ADDR
// if not result then
39660: LD_VAR 0 6
39664: NOT
39665: IFFALSE 39691
// result := [ [ i , tmp ] ] else
39667: LD_ADDR_VAR 0 6
39671: PUSH
39672: LD_VAR 0 7
39676: PUSH
39677: LD_VAR 0 9
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: ST_TO_ADDR
39689: GO 39833
// begin if result [ result ] [ 2 ] < tmp then
39691: LD_VAR 0 6
39695: PUSH
39696: LD_VAR 0 6
39700: ARRAY
39701: PUSH
39702: LD_INT 2
39704: ARRAY
39705: PUSH
39706: LD_VAR 0 9
39710: LESS
39711: IFFALSE 39753
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39713: LD_ADDR_VAR 0 6
39717: PUSH
39718: LD_VAR 0 6
39722: PPUSH
39723: LD_VAR 0 6
39727: PUSH
39728: LD_INT 1
39730: PLUS
39731: PPUSH
39732: LD_VAR 0 7
39736: PUSH
39737: LD_VAR 0 9
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PPUSH
39746: CALL_OW 2
39750: ST_TO_ADDR
39751: GO 39833
// for j = 1 to result do
39753: LD_ADDR_VAR 0 8
39757: PUSH
39758: DOUBLE
39759: LD_INT 1
39761: DEC
39762: ST_TO_ADDR
39763: LD_VAR 0 6
39767: PUSH
39768: FOR_TO
39769: IFFALSE 39831
// begin if tmp < result [ j ] [ 2 ] then
39771: LD_VAR 0 9
39775: PUSH
39776: LD_VAR 0 6
39780: PUSH
39781: LD_VAR 0 8
39785: ARRAY
39786: PUSH
39787: LD_INT 2
39789: ARRAY
39790: LESS
39791: IFFALSE 39829
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39793: LD_ADDR_VAR 0 6
39797: PUSH
39798: LD_VAR 0 6
39802: PPUSH
39803: LD_VAR 0 8
39807: PPUSH
39808: LD_VAR 0 7
39812: PUSH
39813: LD_VAR 0 9
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PPUSH
39822: CALL_OW 2
39826: ST_TO_ADDR
// break ;
39827: GO 39831
// end ; end ;
39829: GO 39768
39831: POP
39832: POP
// end ; end ;
39833: GO 39632
39835: POP
39836: POP
// if result and not asc then
39837: LD_VAR 0 6
39841: PUSH
39842: LD_VAR 0 4
39846: NOT
39847: AND
39848: IFFALSE 39923
// begin tmp := result ;
39850: LD_ADDR_VAR 0 9
39854: PUSH
39855: LD_VAR 0 6
39859: ST_TO_ADDR
// for i = tmp downto 1 do
39860: LD_ADDR_VAR 0 7
39864: PUSH
39865: DOUBLE
39866: LD_VAR 0 9
39870: INC
39871: ST_TO_ADDR
39872: LD_INT 1
39874: PUSH
39875: FOR_DOWNTO
39876: IFFALSE 39921
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39878: LD_ADDR_VAR 0 6
39882: PUSH
39883: LD_VAR 0 6
39887: PPUSH
39888: LD_VAR 0 9
39892: PUSH
39893: LD_VAR 0 7
39897: MINUS
39898: PUSH
39899: LD_INT 1
39901: PLUS
39902: PPUSH
39903: LD_VAR 0 9
39907: PUSH
39908: LD_VAR 0 7
39912: ARRAY
39913: PPUSH
39914: CALL_OW 1
39918: ST_TO_ADDR
39919: GO 39875
39921: POP
39922: POP
// end ; tmp := [ ] ;
39923: LD_ADDR_VAR 0 9
39927: PUSH
39928: EMPTY
39929: ST_TO_ADDR
// if mode then
39930: LD_VAR 0 5
39934: IFFALSE 40003
// begin for i = 1 to result do
39936: LD_ADDR_VAR 0 7
39940: PUSH
39941: DOUBLE
39942: LD_INT 1
39944: DEC
39945: ST_TO_ADDR
39946: LD_VAR 0 6
39950: PUSH
39951: FOR_TO
39952: IFFALSE 39991
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39954: LD_ADDR_VAR 0 9
39958: PUSH
39959: LD_VAR 0 9
39963: PPUSH
39964: LD_VAR 0 7
39968: PPUSH
39969: LD_VAR 0 6
39973: PUSH
39974: LD_VAR 0 7
39978: ARRAY
39979: PUSH
39980: LD_INT 1
39982: ARRAY
39983: PPUSH
39984: CALL_OW 1
39988: ST_TO_ADDR
39989: GO 39951
39991: POP
39992: POP
// result := tmp ;
39993: LD_ADDR_VAR 0 6
39997: PUSH
39998: LD_VAR 0 9
40002: ST_TO_ADDR
// end ; end ;
40003: LD_VAR 0 6
40007: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40008: LD_INT 0
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40016: LD_ADDR_VAR 0 5
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: ST_TO_ADDR
// if not x or not y then
40038: LD_VAR 0 2
40042: NOT
40043: PUSH
40044: LD_VAR 0 3
40048: NOT
40049: OR
40050: IFFALSE 40054
// exit ;
40052: GO 41706
// if not range then
40054: LD_VAR 0 4
40058: NOT
40059: IFFALSE 40069
// range := 10 ;
40061: LD_ADDR_VAR 0 4
40065: PUSH
40066: LD_INT 10
40068: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40069: LD_ADDR_VAR 0 8
40073: PUSH
40074: LD_INT 81
40076: PUSH
40077: LD_VAR 0 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 92
40088: PUSH
40089: LD_VAR 0 2
40093: PUSH
40094: LD_VAR 0 3
40098: PUSH
40099: LD_VAR 0 4
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 3
40112: PUSH
40113: LD_INT 21
40115: PUSH
40116: LD_INT 3
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: PPUSH
40132: CALL_OW 69
40136: ST_TO_ADDR
// if not tmp then
40137: LD_VAR 0 8
40141: NOT
40142: IFFALSE 40146
// exit ;
40144: GO 41706
// for i in tmp do
40146: LD_ADDR_VAR 0 6
40150: PUSH
40151: LD_VAR 0 8
40155: PUSH
40156: FOR_IN
40157: IFFALSE 41681
// begin points := [ 0 , 0 , 0 ] ;
40159: LD_ADDR_VAR 0 9
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: ST_TO_ADDR
// bpoints := 1 ;
40178: LD_ADDR_VAR 0 10
40182: PUSH
40183: LD_INT 1
40185: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40186: LD_VAR 0 6
40190: PPUSH
40191: CALL_OW 247
40195: PUSH
40196: LD_INT 1
40198: DOUBLE
40199: EQUAL
40200: IFTRUE 40204
40202: GO 40782
40204: POP
// begin if GetClass ( i ) = 1 then
40205: LD_VAR 0 6
40209: PPUSH
40210: CALL_OW 257
40214: PUSH
40215: LD_INT 1
40217: EQUAL
40218: IFFALSE 40239
// points := [ 10 , 5 , 3 ] ;
40220: LD_ADDR_VAR 0 9
40224: PUSH
40225: LD_INT 10
40227: PUSH
40228: LD_INT 5
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40239: LD_VAR 0 6
40243: PPUSH
40244: CALL_OW 257
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: LD_INT 4
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: IN
40263: IFFALSE 40284
// points := [ 3 , 2 , 1 ] ;
40265: LD_ADDR_VAR 0 9
40269: PUSH
40270: LD_INT 3
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40284: LD_VAR 0 6
40288: PPUSH
40289: CALL_OW 257
40293: PUSH
40294: LD_INT 5
40296: EQUAL
40297: IFFALSE 40318
// points := [ 130 , 5 , 2 ] ;
40299: LD_ADDR_VAR 0 9
40303: PUSH
40304: LD_INT 130
40306: PUSH
40307: LD_INT 5
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40318: LD_VAR 0 6
40322: PPUSH
40323: CALL_OW 257
40327: PUSH
40328: LD_INT 8
40330: EQUAL
40331: IFFALSE 40352
// points := [ 35 , 35 , 30 ] ;
40333: LD_ADDR_VAR 0 9
40337: PUSH
40338: LD_INT 35
40340: PUSH
40341: LD_INT 35
40343: PUSH
40344: LD_INT 30
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40352: LD_VAR 0 6
40356: PPUSH
40357: CALL_OW 257
40361: PUSH
40362: LD_INT 9
40364: EQUAL
40365: IFFALSE 40386
// points := [ 20 , 55 , 40 ] ;
40367: LD_ADDR_VAR 0 9
40371: PUSH
40372: LD_INT 20
40374: PUSH
40375: LD_INT 55
40377: PUSH
40378: LD_INT 40
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40386: LD_VAR 0 6
40390: PPUSH
40391: CALL_OW 257
40395: PUSH
40396: LD_INT 12
40398: PUSH
40399: LD_INT 16
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: IN
40406: IFFALSE 40427
// points := [ 5 , 3 , 2 ] ;
40408: LD_ADDR_VAR 0 9
40412: PUSH
40413: LD_INT 5
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40427: LD_VAR 0 6
40431: PPUSH
40432: CALL_OW 257
40436: PUSH
40437: LD_INT 17
40439: EQUAL
40440: IFFALSE 40461
// points := [ 100 , 50 , 75 ] ;
40442: LD_ADDR_VAR 0 9
40446: PUSH
40447: LD_INT 100
40449: PUSH
40450: LD_INT 50
40452: PUSH
40453: LD_INT 75
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40461: LD_VAR 0 6
40465: PPUSH
40466: CALL_OW 257
40470: PUSH
40471: LD_INT 15
40473: EQUAL
40474: IFFALSE 40495
// points := [ 10 , 5 , 3 ] ;
40476: LD_ADDR_VAR 0 9
40480: PUSH
40481: LD_INT 10
40483: PUSH
40484: LD_INT 5
40486: PUSH
40487: LD_INT 3
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40495: LD_VAR 0 6
40499: PPUSH
40500: CALL_OW 257
40504: PUSH
40505: LD_INT 14
40507: EQUAL
40508: IFFALSE 40529
// points := [ 10 , 0 , 0 ] ;
40510: LD_ADDR_VAR 0 9
40514: PUSH
40515: LD_INT 10
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: LIST
40528: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40529: LD_VAR 0 6
40533: PPUSH
40534: CALL_OW 257
40538: PUSH
40539: LD_INT 11
40541: EQUAL
40542: IFFALSE 40563
// points := [ 30 , 10 , 5 ] ;
40544: LD_ADDR_VAR 0 9
40548: PUSH
40549: LD_INT 30
40551: PUSH
40552: LD_INT 10
40554: PUSH
40555: LD_INT 5
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40563: LD_VAR 0 1
40567: PPUSH
40568: LD_INT 5
40570: PPUSH
40571: CALL_OW 321
40575: PUSH
40576: LD_INT 2
40578: EQUAL
40579: IFFALSE 40596
// bpoints := bpoints * 1.8 ;
40581: LD_ADDR_VAR 0 10
40585: PUSH
40586: LD_VAR 0 10
40590: PUSH
40591: LD_REAL  1.80000000000000E+0000
40594: MUL
40595: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40596: LD_VAR 0 6
40600: PPUSH
40601: CALL_OW 257
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: LD_INT 4
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: IN
40624: PUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: LD_INT 51
40632: PPUSH
40633: CALL_OW 321
40637: PUSH
40638: LD_INT 2
40640: EQUAL
40641: AND
40642: IFFALSE 40659
// bpoints := bpoints * 1.2 ;
40644: LD_ADDR_VAR 0 10
40648: PUSH
40649: LD_VAR 0 10
40653: PUSH
40654: LD_REAL  1.20000000000000E+0000
40657: MUL
40658: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40659: LD_VAR 0 6
40663: PPUSH
40664: CALL_OW 257
40668: PUSH
40669: LD_INT 5
40671: PUSH
40672: LD_INT 7
40674: PUSH
40675: LD_INT 9
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: IN
40683: PUSH
40684: LD_VAR 0 1
40688: PPUSH
40689: LD_INT 52
40691: PPUSH
40692: CALL_OW 321
40696: PUSH
40697: LD_INT 2
40699: EQUAL
40700: AND
40701: IFFALSE 40718
// bpoints := bpoints * 1.5 ;
40703: LD_ADDR_VAR 0 10
40707: PUSH
40708: LD_VAR 0 10
40712: PUSH
40713: LD_REAL  1.50000000000000E+0000
40716: MUL
40717: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40718: LD_VAR 0 1
40722: PPUSH
40723: LD_INT 66
40725: PPUSH
40726: CALL_OW 321
40730: PUSH
40731: LD_INT 2
40733: EQUAL
40734: IFFALSE 40751
// bpoints := bpoints * 1.1 ;
40736: LD_ADDR_VAR 0 10
40740: PUSH
40741: LD_VAR 0 10
40745: PUSH
40746: LD_REAL  1.10000000000000E+0000
40749: MUL
40750: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40751: LD_ADDR_VAR 0 10
40755: PUSH
40756: LD_VAR 0 10
40760: PUSH
40761: LD_VAR 0 6
40765: PPUSH
40766: LD_INT 1
40768: PPUSH
40769: CALL_OW 259
40773: PUSH
40774: LD_REAL  1.15000000000000E+0000
40777: MUL
40778: MUL
40779: ST_TO_ADDR
// end ; unit_vehicle :
40780: GO 41610
40782: LD_INT 2
40784: DOUBLE
40785: EQUAL
40786: IFTRUE 40790
40788: GO 41598
40790: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40791: LD_VAR 0 6
40795: PPUSH
40796: CALL_OW 264
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: LD_INT 42
40806: PUSH
40807: LD_INT 24
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: IN
40815: IFFALSE 40836
// points := [ 25 , 5 , 3 ] ;
40817: LD_ADDR_VAR 0 9
40821: PUSH
40822: LD_INT 25
40824: PUSH
40825: LD_INT 5
40827: PUSH
40828: LD_INT 3
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: LIST
40835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40836: LD_VAR 0 6
40840: PPUSH
40841: CALL_OW 264
40845: PUSH
40846: LD_INT 4
40848: PUSH
40849: LD_INT 43
40851: PUSH
40852: LD_INT 25
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: IN
40860: IFFALSE 40881
// points := [ 40 , 15 , 5 ] ;
40862: LD_ADDR_VAR 0 9
40866: PUSH
40867: LD_INT 40
40869: PUSH
40870: LD_INT 15
40872: PUSH
40873: LD_INT 5
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40881: LD_VAR 0 6
40885: PPUSH
40886: CALL_OW 264
40890: PUSH
40891: LD_INT 3
40893: PUSH
40894: LD_INT 23
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: IN
40901: IFFALSE 40922
// points := [ 7 , 25 , 8 ] ;
40903: LD_ADDR_VAR 0 9
40907: PUSH
40908: LD_INT 7
40910: PUSH
40911: LD_INT 25
40913: PUSH
40914: LD_INT 8
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40922: LD_VAR 0 6
40926: PPUSH
40927: CALL_OW 264
40931: PUSH
40932: LD_INT 5
40934: PUSH
40935: LD_INT 27
40937: PUSH
40938: LD_INT 44
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: IN
40946: IFFALSE 40967
// points := [ 14 , 50 , 16 ] ;
40948: LD_ADDR_VAR 0 9
40952: PUSH
40953: LD_INT 14
40955: PUSH
40956: LD_INT 50
40958: PUSH
40959: LD_INT 16
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40967: LD_VAR 0 6
40971: PPUSH
40972: CALL_OW 264
40976: PUSH
40977: LD_INT 6
40979: PUSH
40980: LD_INT 46
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: IN
40987: IFFALSE 41008
// points := [ 32 , 120 , 70 ] ;
40989: LD_ADDR_VAR 0 9
40993: PUSH
40994: LD_INT 32
40996: PUSH
40997: LD_INT 120
40999: PUSH
41000: LD_INT 70
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41008: LD_VAR 0 6
41012: PPUSH
41013: CALL_OW 264
41017: PUSH
41018: LD_INT 7
41020: PUSH
41021: LD_INT 28
41023: PUSH
41024: LD_INT 45
41026: PUSH
41027: LD_EXP 43
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: IN
41038: IFFALSE 41059
// points := [ 35 , 20 , 45 ] ;
41040: LD_ADDR_VAR 0 9
41044: PUSH
41045: LD_INT 35
41047: PUSH
41048: LD_INT 20
41050: PUSH
41051: LD_INT 45
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: LIST
41058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41059: LD_VAR 0 6
41063: PPUSH
41064: CALL_OW 264
41068: PUSH
41069: LD_INT 47
41071: PUSH
41072: EMPTY
41073: LIST
41074: IN
41075: IFFALSE 41096
// points := [ 67 , 45 , 75 ] ;
41077: LD_ADDR_VAR 0 9
41081: PUSH
41082: LD_INT 67
41084: PUSH
41085: LD_INT 45
41087: PUSH
41088: LD_INT 75
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41096: LD_VAR 0 6
41100: PPUSH
41101: CALL_OW 264
41105: PUSH
41106: LD_INT 26
41108: PUSH
41109: EMPTY
41110: LIST
41111: IN
41112: IFFALSE 41133
// points := [ 120 , 30 , 80 ] ;
41114: LD_ADDR_VAR 0 9
41118: PUSH
41119: LD_INT 120
41121: PUSH
41122: LD_INT 30
41124: PUSH
41125: LD_INT 80
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41133: LD_VAR 0 6
41137: PPUSH
41138: CALL_OW 264
41142: PUSH
41143: LD_INT 22
41145: PUSH
41146: EMPTY
41147: LIST
41148: IN
41149: IFFALSE 41170
// points := [ 40 , 1 , 1 ] ;
41151: LD_ADDR_VAR 0 9
41155: PUSH
41156: LD_INT 40
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41170: LD_VAR 0 6
41174: PPUSH
41175: CALL_OW 264
41179: PUSH
41180: LD_INT 29
41182: PUSH
41183: EMPTY
41184: LIST
41185: IN
41186: IFFALSE 41207
// points := [ 70 , 200 , 400 ] ;
41188: LD_ADDR_VAR 0 9
41192: PUSH
41193: LD_INT 70
41195: PUSH
41196: LD_INT 200
41198: PUSH
41199: LD_INT 400
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: LIST
41206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41207: LD_VAR 0 6
41211: PPUSH
41212: CALL_OW 264
41216: PUSH
41217: LD_INT 14
41219: PUSH
41220: LD_INT 53
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: IN
41227: IFFALSE 41248
// points := [ 40 , 10 , 20 ] ;
41229: LD_ADDR_VAR 0 9
41233: PUSH
41234: LD_INT 40
41236: PUSH
41237: LD_INT 10
41239: PUSH
41240: LD_INT 20
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: LIST
41247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41248: LD_VAR 0 6
41252: PPUSH
41253: CALL_OW 264
41257: PUSH
41258: LD_INT 9
41260: PUSH
41261: EMPTY
41262: LIST
41263: IN
41264: IFFALSE 41285
// points := [ 5 , 70 , 20 ] ;
41266: LD_ADDR_VAR 0 9
41270: PUSH
41271: LD_INT 5
41273: PUSH
41274: LD_INT 70
41276: PUSH
41277: LD_INT 20
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: LIST
41284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41285: LD_VAR 0 6
41289: PPUSH
41290: CALL_OW 264
41294: PUSH
41295: LD_INT 10
41297: PUSH
41298: EMPTY
41299: LIST
41300: IN
41301: IFFALSE 41322
// points := [ 35 , 110 , 70 ] ;
41303: LD_ADDR_VAR 0 9
41307: PUSH
41308: LD_INT 35
41310: PUSH
41311: LD_INT 110
41313: PUSH
41314: LD_INT 70
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41322: LD_VAR 0 6
41326: PPUSH
41327: CALL_OW 265
41331: PUSH
41332: LD_INT 25
41334: EQUAL
41335: IFFALSE 41356
// points := [ 80 , 65 , 100 ] ;
41337: LD_ADDR_VAR 0 9
41341: PUSH
41342: LD_INT 80
41344: PUSH
41345: LD_INT 65
41347: PUSH
41348: LD_INT 100
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: LIST
41355: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41356: LD_VAR 0 6
41360: PPUSH
41361: CALL_OW 263
41365: PUSH
41366: LD_INT 1
41368: EQUAL
41369: IFFALSE 41404
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41371: LD_ADDR_VAR 0 10
41375: PUSH
41376: LD_VAR 0 10
41380: PUSH
41381: LD_VAR 0 6
41385: PPUSH
41386: CALL_OW 311
41390: PPUSH
41391: LD_INT 3
41393: PPUSH
41394: CALL_OW 259
41398: PUSH
41399: LD_INT 4
41401: MUL
41402: MUL
41403: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41404: LD_VAR 0 6
41408: PPUSH
41409: CALL_OW 263
41413: PUSH
41414: LD_INT 2
41416: EQUAL
41417: IFFALSE 41468
// begin j := IsControledBy ( i ) ;
41419: LD_ADDR_VAR 0 7
41423: PUSH
41424: LD_VAR 0 6
41428: PPUSH
41429: CALL_OW 312
41433: ST_TO_ADDR
// if j then
41434: LD_VAR 0 7
41438: IFFALSE 41468
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41440: LD_ADDR_VAR 0 10
41444: PUSH
41445: LD_VAR 0 10
41449: PUSH
41450: LD_VAR 0 7
41454: PPUSH
41455: LD_INT 3
41457: PPUSH
41458: CALL_OW 259
41462: PUSH
41463: LD_INT 3
41465: MUL
41466: MUL
41467: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41468: LD_VAR 0 6
41472: PPUSH
41473: CALL_OW 264
41477: PUSH
41478: LD_INT 5
41480: PUSH
41481: LD_INT 6
41483: PUSH
41484: LD_INT 46
41486: PUSH
41487: LD_INT 44
41489: PUSH
41490: LD_INT 47
41492: PUSH
41493: LD_INT 45
41495: PUSH
41496: LD_INT 28
41498: PUSH
41499: LD_INT 7
41501: PUSH
41502: LD_INT 27
41504: PUSH
41505: LD_INT 29
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: IN
41520: PUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: LD_INT 52
41528: PPUSH
41529: CALL_OW 321
41533: PUSH
41534: LD_INT 2
41536: EQUAL
41537: AND
41538: IFFALSE 41555
// bpoints := bpoints * 1.2 ;
41540: LD_ADDR_VAR 0 10
41544: PUSH
41545: LD_VAR 0 10
41549: PUSH
41550: LD_REAL  1.20000000000000E+0000
41553: MUL
41554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41555: LD_VAR 0 6
41559: PPUSH
41560: CALL_OW 264
41564: PUSH
41565: LD_INT 6
41567: PUSH
41568: LD_INT 46
41570: PUSH
41571: LD_INT 47
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: IN
41579: IFFALSE 41596
// bpoints := bpoints * 1.2 ;
41581: LD_ADDR_VAR 0 10
41585: PUSH
41586: LD_VAR 0 10
41590: PUSH
41591: LD_REAL  1.20000000000000E+0000
41594: MUL
41595: ST_TO_ADDR
// end ; unit_building :
41596: GO 41610
41598: LD_INT 3
41600: DOUBLE
41601: EQUAL
41602: IFTRUE 41606
41604: GO 41609
41606: POP
// ; end ;
41607: GO 41610
41609: POP
// for j = 1 to 3 do
41610: LD_ADDR_VAR 0 7
41614: PUSH
41615: DOUBLE
41616: LD_INT 1
41618: DEC
41619: ST_TO_ADDR
41620: LD_INT 3
41622: PUSH
41623: FOR_TO
41624: IFFALSE 41677
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41626: LD_ADDR_VAR 0 5
41630: PUSH
41631: LD_VAR 0 5
41635: PPUSH
41636: LD_VAR 0 7
41640: PPUSH
41641: LD_VAR 0 5
41645: PUSH
41646: LD_VAR 0 7
41650: ARRAY
41651: PUSH
41652: LD_VAR 0 9
41656: PUSH
41657: LD_VAR 0 7
41661: ARRAY
41662: PUSH
41663: LD_VAR 0 10
41667: MUL
41668: PLUS
41669: PPUSH
41670: CALL_OW 1
41674: ST_TO_ADDR
41675: GO 41623
41677: POP
41678: POP
// end ;
41679: GO 40156
41681: POP
41682: POP
// result := Replace ( result , 4 , tmp ) ;
41683: LD_ADDR_VAR 0 5
41687: PUSH
41688: LD_VAR 0 5
41692: PPUSH
41693: LD_INT 4
41695: PPUSH
41696: LD_VAR 0 8
41700: PPUSH
41701: CALL_OW 1
41705: ST_TO_ADDR
// end ;
41706: LD_VAR 0 5
41710: RET
// export function DangerAtRange ( unit , range ) ; begin
41711: LD_INT 0
41713: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41714: LD_ADDR_VAR 0 3
41718: PUSH
41719: LD_VAR 0 1
41723: PPUSH
41724: CALL_OW 255
41728: PPUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: CALL_OW 250
41738: PPUSH
41739: LD_VAR 0 1
41743: PPUSH
41744: CALL_OW 251
41748: PPUSH
41749: LD_VAR 0 2
41753: PPUSH
41754: CALL 40008 0 4
41758: ST_TO_ADDR
// end ;
41759: LD_VAR 0 3
41763: RET
// export function DangerInArea ( side , area ) ; begin
41764: LD_INT 0
41766: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41767: LD_ADDR_VAR 0 3
41771: PUSH
41772: LD_VAR 0 2
41776: PPUSH
41777: LD_INT 81
41779: PUSH
41780: LD_VAR 0 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PPUSH
41789: CALL_OW 70
41793: ST_TO_ADDR
// end ;
41794: LD_VAR 0 3
41798: RET
// export function IsExtension ( b ) ; begin
41799: LD_INT 0
41801: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41802: LD_ADDR_VAR 0 2
41806: PUSH
41807: LD_VAR 0 1
41811: PUSH
41812: LD_INT 23
41814: PUSH
41815: LD_INT 20
41817: PUSH
41818: LD_INT 22
41820: PUSH
41821: LD_INT 17
41823: PUSH
41824: LD_INT 24
41826: PUSH
41827: LD_INT 21
41829: PUSH
41830: LD_INT 19
41832: PUSH
41833: LD_INT 16
41835: PUSH
41836: LD_INT 25
41838: PUSH
41839: LD_INT 18
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: IN
41854: ST_TO_ADDR
// end ;
41855: LD_VAR 0 2
41859: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41860: LD_INT 0
41862: PPUSH
41863: PPUSH
41864: PPUSH
// result := [ ] ;
41865: LD_ADDR_VAR 0 4
41869: PUSH
41870: EMPTY
41871: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41872: LD_ADDR_VAR 0 5
41876: PUSH
41877: LD_VAR 0 2
41881: PPUSH
41882: LD_INT 21
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PPUSH
41892: CALL_OW 70
41896: ST_TO_ADDR
// if not tmp then
41897: LD_VAR 0 5
41901: NOT
41902: IFFALSE 41906
// exit ;
41904: GO 41970
// if checkLink then
41906: LD_VAR 0 3
41910: IFFALSE 41960
// begin for i in tmp do
41912: LD_ADDR_VAR 0 6
41916: PUSH
41917: LD_VAR 0 5
41921: PUSH
41922: FOR_IN
41923: IFFALSE 41958
// if GetBase ( i ) <> base then
41925: LD_VAR 0 6
41929: PPUSH
41930: CALL_OW 274
41934: PUSH
41935: LD_VAR 0 1
41939: NONEQUAL
41940: IFFALSE 41956
// ComLinkToBase ( base , i ) ;
41942: LD_VAR 0 1
41946: PPUSH
41947: LD_VAR 0 6
41951: PPUSH
41952: CALL_OW 169
41956: GO 41922
41958: POP
41959: POP
// end ; result := tmp ;
41960: LD_ADDR_VAR 0 4
41964: PUSH
41965: LD_VAR 0 5
41969: ST_TO_ADDR
// end ;
41970: LD_VAR 0 4
41974: RET
// export function ComComplete ( units , b ) ; var i ; begin
41975: LD_INT 0
41977: PPUSH
41978: PPUSH
// if not units then
41979: LD_VAR 0 1
41983: NOT
41984: IFFALSE 41988
// exit ;
41986: GO 42078
// for i in units do
41988: LD_ADDR_VAR 0 4
41992: PUSH
41993: LD_VAR 0 1
41997: PUSH
41998: FOR_IN
41999: IFFALSE 42076
// if BuildingStatus ( b ) = bs_build then
42001: LD_VAR 0 2
42005: PPUSH
42006: CALL_OW 461
42010: PUSH
42011: LD_INT 1
42013: EQUAL
42014: IFFALSE 42074
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42016: LD_VAR 0 4
42020: PPUSH
42021: LD_STRING h
42023: PUSH
42024: LD_VAR 0 2
42028: PPUSH
42029: CALL_OW 250
42033: PUSH
42034: LD_VAR 0 2
42038: PPUSH
42039: CALL_OW 251
42043: PUSH
42044: LD_VAR 0 2
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: PUSH
42067: EMPTY
42068: LIST
42069: PPUSH
42070: CALL_OW 446
42074: GO 41998
42076: POP
42077: POP
// end ;
42078: LD_VAR 0 3
42082: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42083: LD_INT 0
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42091: LD_VAR 0 1
42095: NOT
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 263
42106: PUSH
42107: LD_INT 2
42109: NONEQUAL
42110: OR
42111: IFFALSE 42115
// exit ;
42113: GO 42431
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42115: LD_ADDR_VAR 0 6
42119: PUSH
42120: LD_INT 22
42122: PUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 255
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 30
42142: PUSH
42143: LD_INT 36
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 34
42152: PUSH
42153: LD_INT 31
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PPUSH
42169: CALL_OW 69
42173: ST_TO_ADDR
// if not tmp then
42174: LD_VAR 0 6
42178: NOT
42179: IFFALSE 42183
// exit ;
42181: GO 42431
// result := [ ] ;
42183: LD_ADDR_VAR 0 2
42187: PUSH
42188: EMPTY
42189: ST_TO_ADDR
// for i in tmp do
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_VAR 0 6
42199: PUSH
42200: FOR_IN
42201: IFFALSE 42272
// begin t := UnitsInside ( i ) ;
42203: LD_ADDR_VAR 0 4
42207: PUSH
42208: LD_VAR 0 3
42212: PPUSH
42213: CALL_OW 313
42217: ST_TO_ADDR
// if t then
42218: LD_VAR 0 4
42222: IFFALSE 42270
// for j in t do
42224: LD_ADDR_VAR 0 7
42228: PUSH
42229: LD_VAR 0 4
42233: PUSH
42234: FOR_IN
42235: IFFALSE 42268
// result := Replace ( result , result + 1 , j ) ;
42237: LD_ADDR_VAR 0 2
42241: PUSH
42242: LD_VAR 0 2
42246: PPUSH
42247: LD_VAR 0 2
42251: PUSH
42252: LD_INT 1
42254: PLUS
42255: PPUSH
42256: LD_VAR 0 7
42260: PPUSH
42261: CALL_OW 1
42265: ST_TO_ADDR
42266: GO 42234
42268: POP
42269: POP
// end ;
42270: GO 42200
42272: POP
42273: POP
// if not result then
42274: LD_VAR 0 2
42278: NOT
42279: IFFALSE 42283
// exit ;
42281: GO 42431
// mech := result [ 1 ] ;
42283: LD_ADDR_VAR 0 5
42287: PUSH
42288: LD_VAR 0 2
42292: PUSH
42293: LD_INT 1
42295: ARRAY
42296: ST_TO_ADDR
// if result > 1 then
42297: LD_VAR 0 2
42301: PUSH
42302: LD_INT 1
42304: GREATER
42305: IFFALSE 42417
// begin for i = 2 to result do
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: DOUBLE
42313: LD_INT 2
42315: DEC
42316: ST_TO_ADDR
42317: LD_VAR 0 2
42321: PUSH
42322: FOR_TO
42323: IFFALSE 42415
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42325: LD_ADDR_VAR 0 4
42329: PUSH
42330: LD_VAR 0 2
42334: PUSH
42335: LD_VAR 0 3
42339: ARRAY
42340: PPUSH
42341: LD_INT 3
42343: PPUSH
42344: CALL_OW 259
42348: PUSH
42349: LD_VAR 0 2
42353: PUSH
42354: LD_VAR 0 3
42358: ARRAY
42359: PPUSH
42360: CALL_OW 432
42364: MINUS
42365: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42366: LD_VAR 0 4
42370: PUSH
42371: LD_VAR 0 5
42375: PPUSH
42376: LD_INT 3
42378: PPUSH
42379: CALL_OW 259
42383: PUSH
42384: LD_VAR 0 5
42388: PPUSH
42389: CALL_OW 432
42393: MINUS
42394: GREATEREQUAL
42395: IFFALSE 42413
// mech := result [ i ] ;
42397: LD_ADDR_VAR 0 5
42401: PUSH
42402: LD_VAR 0 2
42406: PUSH
42407: LD_VAR 0 3
42411: ARRAY
42412: ST_TO_ADDR
// end ;
42413: GO 42322
42415: POP
42416: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42417: LD_VAR 0 1
42421: PPUSH
42422: LD_VAR 0 5
42426: PPUSH
42427: CALL_OW 135
// end ;
42431: LD_VAR 0 2
42435: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42436: LD_INT 0
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
// result := [ ] ;
42451: LD_ADDR_VAR 0 7
42455: PUSH
42456: EMPTY
42457: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42458: LD_VAR 0 1
42462: PPUSH
42463: CALL_OW 266
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: IN
42478: NOT
42479: IFFALSE 42483
// exit ;
42481: GO 44117
// if name then
42483: LD_VAR 0 3
42487: IFFALSE 42503
// SetBName ( base_dep , name ) ;
42489: LD_VAR 0 1
42493: PPUSH
42494: LD_VAR 0 3
42498: PPUSH
42499: CALL_OW 500
// base := GetBase ( base_dep ) ;
42503: LD_ADDR_VAR 0 15
42507: PUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 274
42517: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42518: LD_ADDR_VAR 0 16
42522: PUSH
42523: LD_VAR 0 1
42527: PPUSH
42528: CALL_OW 255
42532: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42533: LD_ADDR_VAR 0 17
42537: PUSH
42538: LD_VAR 0 1
42542: PPUSH
42543: CALL_OW 248
42547: ST_TO_ADDR
// if sources then
42548: LD_VAR 0 5
42552: IFFALSE 42599
// for i = 1 to 3 do
42554: LD_ADDR_VAR 0 8
42558: PUSH
42559: DOUBLE
42560: LD_INT 1
42562: DEC
42563: ST_TO_ADDR
42564: LD_INT 3
42566: PUSH
42567: FOR_TO
42568: IFFALSE 42597
// AddResourceType ( base , i , sources [ i ] ) ;
42570: LD_VAR 0 15
42574: PPUSH
42575: LD_VAR 0 8
42579: PPUSH
42580: LD_VAR 0 5
42584: PUSH
42585: LD_VAR 0 8
42589: ARRAY
42590: PPUSH
42591: CALL_OW 276
42595: GO 42567
42597: POP
42598: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42599: LD_ADDR_VAR 0 18
42603: PUSH
42604: LD_VAR 0 15
42608: PPUSH
42609: LD_VAR 0 2
42613: PPUSH
42614: LD_INT 1
42616: PPUSH
42617: CALL 41860 0 3
42621: ST_TO_ADDR
// InitHc ;
42622: CALL_OW 19
// InitUc ;
42626: CALL_OW 18
// uc_side := side ;
42630: LD_ADDR_OWVAR 20
42634: PUSH
42635: LD_VAR 0 16
42639: ST_TO_ADDR
// uc_nation := nation ;
42640: LD_ADDR_OWVAR 21
42644: PUSH
42645: LD_VAR 0 17
42649: ST_TO_ADDR
// if buildings then
42650: LD_VAR 0 18
42654: IFFALSE 43976
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42656: LD_ADDR_VAR 0 19
42660: PUSH
42661: LD_VAR 0 18
42665: PPUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 30
42671: PUSH
42672: LD_INT 29
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 30
42681: PUSH
42682: LD_INT 30
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: PPUSH
42694: CALL_OW 72
42698: ST_TO_ADDR
// if tmp then
42699: LD_VAR 0 19
42703: IFFALSE 42751
// for i in tmp do
42705: LD_ADDR_VAR 0 8
42709: PUSH
42710: LD_VAR 0 19
42714: PUSH
42715: FOR_IN
42716: IFFALSE 42749
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42718: LD_VAR 0 8
42722: PPUSH
42723: CALL_OW 250
42727: PPUSH
42728: LD_VAR 0 8
42732: PPUSH
42733: CALL_OW 251
42737: PPUSH
42738: LD_VAR 0 16
42742: PPUSH
42743: CALL_OW 441
42747: GO 42715
42749: POP
42750: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42751: LD_VAR 0 18
42755: PPUSH
42756: LD_INT 2
42758: PUSH
42759: LD_INT 30
42761: PUSH
42762: LD_INT 32
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 30
42771: PUSH
42772: LD_INT 33
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: PPUSH
42784: CALL_OW 72
42788: IFFALSE 42876
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42790: LD_ADDR_VAR 0 8
42794: PUSH
42795: LD_VAR 0 18
42799: PPUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 30
42805: PUSH
42806: LD_INT 32
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 30
42815: PUSH
42816: LD_INT 33
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: PPUSH
42828: CALL_OW 72
42832: PUSH
42833: FOR_IN
42834: IFFALSE 42874
// begin if not GetBWeapon ( i ) then
42836: LD_VAR 0 8
42840: PPUSH
42841: CALL_OW 269
42845: NOT
42846: IFFALSE 42872
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42848: LD_VAR 0 8
42852: PPUSH
42853: LD_VAR 0 8
42857: PPUSH
42858: LD_VAR 0 2
42862: PPUSH
42863: CALL 44122 0 2
42867: PPUSH
42868: CALL_OW 431
// end ;
42872: GO 42833
42874: POP
42875: POP
// end ; for i = 1 to personel do
42876: LD_ADDR_VAR 0 8
42880: PUSH
42881: DOUBLE
42882: LD_INT 1
42884: DEC
42885: ST_TO_ADDR
42886: LD_VAR 0 6
42890: PUSH
42891: FOR_TO
42892: IFFALSE 43956
// begin if i > 4 then
42894: LD_VAR 0 8
42898: PUSH
42899: LD_INT 4
42901: GREATER
42902: IFFALSE 42906
// break ;
42904: GO 43956
// case i of 1 :
42906: LD_VAR 0 8
42910: PUSH
42911: LD_INT 1
42913: DOUBLE
42914: EQUAL
42915: IFTRUE 42919
42917: GO 42999
42919: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42920: LD_ADDR_VAR 0 12
42924: PUSH
42925: LD_VAR 0 18
42929: PPUSH
42930: LD_INT 22
42932: PUSH
42933: LD_VAR 0 16
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 58
42944: PUSH
42945: EMPTY
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: LD_INT 30
42953: PUSH
42954: LD_INT 32
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 30
42963: PUSH
42964: LD_INT 4
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 30
42973: PUSH
42974: LD_INT 5
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: PPUSH
42992: CALL_OW 72
42996: ST_TO_ADDR
42997: GO 43221
42999: LD_INT 2
43001: DOUBLE
43002: EQUAL
43003: IFTRUE 43007
43005: GO 43069
43007: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43008: LD_ADDR_VAR 0 12
43012: PUSH
43013: LD_VAR 0 18
43017: PPUSH
43018: LD_INT 22
43020: PUSH
43021: LD_VAR 0 16
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 30
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 30
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PPUSH
43062: CALL_OW 72
43066: ST_TO_ADDR
43067: GO 43221
43069: LD_INT 3
43071: DOUBLE
43072: EQUAL
43073: IFTRUE 43077
43075: GO 43139
43077: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43078: LD_ADDR_VAR 0 12
43082: PUSH
43083: LD_VAR 0 18
43087: PPUSH
43088: LD_INT 22
43090: PUSH
43091: LD_VAR 0 16
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 30
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 30
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PPUSH
43132: CALL_OW 72
43136: ST_TO_ADDR
43137: GO 43221
43139: LD_INT 4
43141: DOUBLE
43142: EQUAL
43143: IFTRUE 43147
43145: GO 43220
43147: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43148: LD_ADDR_VAR 0 12
43152: PUSH
43153: LD_VAR 0 18
43157: PPUSH
43158: LD_INT 22
43160: PUSH
43161: LD_VAR 0 16
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 30
43175: PUSH
43176: LD_INT 6
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 30
43185: PUSH
43186: LD_INT 7
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 30
43195: PUSH
43196: LD_INT 8
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PPUSH
43213: CALL_OW 72
43217: ST_TO_ADDR
43218: GO 43221
43220: POP
// if i = 1 then
43221: LD_VAR 0 8
43225: PUSH
43226: LD_INT 1
43228: EQUAL
43229: IFFALSE 43340
// begin tmp := [ ] ;
43231: LD_ADDR_VAR 0 19
43235: PUSH
43236: EMPTY
43237: ST_TO_ADDR
// for j in f do
43238: LD_ADDR_VAR 0 9
43242: PUSH
43243: LD_VAR 0 12
43247: PUSH
43248: FOR_IN
43249: IFFALSE 43322
// if GetBType ( j ) = b_bunker then
43251: LD_VAR 0 9
43255: PPUSH
43256: CALL_OW 266
43260: PUSH
43261: LD_INT 32
43263: EQUAL
43264: IFFALSE 43291
// tmp := Insert ( tmp , 1 , j ) else
43266: LD_ADDR_VAR 0 19
43270: PUSH
43271: LD_VAR 0 19
43275: PPUSH
43276: LD_INT 1
43278: PPUSH
43279: LD_VAR 0 9
43283: PPUSH
43284: CALL_OW 2
43288: ST_TO_ADDR
43289: GO 43320
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43291: LD_ADDR_VAR 0 19
43295: PUSH
43296: LD_VAR 0 19
43300: PPUSH
43301: LD_VAR 0 19
43305: PUSH
43306: LD_INT 1
43308: PLUS
43309: PPUSH
43310: LD_VAR 0 9
43314: PPUSH
43315: CALL_OW 2
43319: ST_TO_ADDR
43320: GO 43248
43322: POP
43323: POP
// if tmp then
43324: LD_VAR 0 19
43328: IFFALSE 43340
// f := tmp ;
43330: LD_ADDR_VAR 0 12
43334: PUSH
43335: LD_VAR 0 19
43339: ST_TO_ADDR
// end ; x := personel [ i ] ;
43340: LD_ADDR_VAR 0 13
43344: PUSH
43345: LD_VAR 0 6
43349: PUSH
43350: LD_VAR 0 8
43354: ARRAY
43355: ST_TO_ADDR
// if x = - 1 then
43356: LD_VAR 0 13
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: EQUAL
43365: IFFALSE 43574
// begin for j in f do
43367: LD_ADDR_VAR 0 9
43371: PUSH
43372: LD_VAR 0 12
43376: PUSH
43377: FOR_IN
43378: IFFALSE 43570
// repeat InitHc ;
43380: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43384: LD_VAR 0 9
43388: PPUSH
43389: CALL_OW 266
43393: PUSH
43394: LD_INT 5
43396: EQUAL
43397: IFFALSE 43467
// begin if UnitsInside ( j ) < 3 then
43399: LD_VAR 0 9
43403: PPUSH
43404: CALL_OW 313
43408: PUSH
43409: LD_INT 3
43411: LESS
43412: IFFALSE 43448
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43414: LD_INT 0
43416: PPUSH
43417: LD_INT 5
43419: PUSH
43420: LD_INT 8
43422: PUSH
43423: LD_INT 9
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: PUSH
43431: LD_VAR 0 17
43435: ARRAY
43436: PPUSH
43437: LD_VAR 0 4
43441: PPUSH
43442: CALL_OW 380
43446: GO 43465
// PrepareHuman ( false , i , skill ) ;
43448: LD_INT 0
43450: PPUSH
43451: LD_VAR 0 8
43455: PPUSH
43456: LD_VAR 0 4
43460: PPUSH
43461: CALL_OW 380
// end else
43465: GO 43484
// PrepareHuman ( false , i , skill ) ;
43467: LD_INT 0
43469: PPUSH
43470: LD_VAR 0 8
43474: PPUSH
43475: LD_VAR 0 4
43479: PPUSH
43480: CALL_OW 380
// un := CreateHuman ;
43484: LD_ADDR_VAR 0 14
43488: PUSH
43489: CALL_OW 44
43493: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43494: LD_ADDR_VAR 0 7
43498: PUSH
43499: LD_VAR 0 7
43503: PPUSH
43504: LD_INT 1
43506: PPUSH
43507: LD_VAR 0 14
43511: PPUSH
43512: CALL_OW 2
43516: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43517: LD_VAR 0 14
43521: PPUSH
43522: LD_VAR 0 9
43526: PPUSH
43527: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43531: LD_VAR 0 9
43535: PPUSH
43536: CALL_OW 313
43540: PUSH
43541: LD_INT 6
43543: EQUAL
43544: PUSH
43545: LD_VAR 0 9
43549: PPUSH
43550: CALL_OW 266
43554: PUSH
43555: LD_INT 32
43557: PUSH
43558: LD_INT 31
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: IN
43565: OR
43566: IFFALSE 43380
43568: GO 43377
43570: POP
43571: POP
// end else
43572: GO 43954
// for j = 1 to x do
43574: LD_ADDR_VAR 0 9
43578: PUSH
43579: DOUBLE
43580: LD_INT 1
43582: DEC
43583: ST_TO_ADDR
43584: LD_VAR 0 13
43588: PUSH
43589: FOR_TO
43590: IFFALSE 43952
// begin InitHc ;
43592: CALL_OW 19
// if not f then
43596: LD_VAR 0 12
43600: NOT
43601: IFFALSE 43690
// begin PrepareHuman ( false , i , skill ) ;
43603: LD_INT 0
43605: PPUSH
43606: LD_VAR 0 8
43610: PPUSH
43611: LD_VAR 0 4
43615: PPUSH
43616: CALL_OW 380
// un := CreateHuman ;
43620: LD_ADDR_VAR 0 14
43624: PUSH
43625: CALL_OW 44
43629: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43630: LD_ADDR_VAR 0 7
43634: PUSH
43635: LD_VAR 0 7
43639: PPUSH
43640: LD_INT 1
43642: PPUSH
43643: LD_VAR 0 14
43647: PPUSH
43648: CALL_OW 2
43652: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43653: LD_VAR 0 14
43657: PPUSH
43658: LD_VAR 0 1
43662: PPUSH
43663: CALL_OW 250
43667: PPUSH
43668: LD_VAR 0 1
43672: PPUSH
43673: CALL_OW 251
43677: PPUSH
43678: LD_INT 10
43680: PPUSH
43681: LD_INT 0
43683: PPUSH
43684: CALL_OW 50
// continue ;
43688: GO 43589
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43690: LD_VAR 0 12
43694: PUSH
43695: LD_INT 1
43697: ARRAY
43698: PPUSH
43699: CALL_OW 313
43703: PUSH
43704: LD_VAR 0 12
43708: PUSH
43709: LD_INT 1
43711: ARRAY
43712: PPUSH
43713: CALL_OW 266
43717: PUSH
43718: LD_INT 32
43720: PUSH
43721: LD_INT 31
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: IN
43728: AND
43729: PUSH
43730: LD_VAR 0 12
43734: PUSH
43735: LD_INT 1
43737: ARRAY
43738: PPUSH
43739: CALL_OW 313
43743: PUSH
43744: LD_INT 6
43746: EQUAL
43747: OR
43748: IFFALSE 43768
// f := Delete ( f , 1 ) ;
43750: LD_ADDR_VAR 0 12
43754: PUSH
43755: LD_VAR 0 12
43759: PPUSH
43760: LD_INT 1
43762: PPUSH
43763: CALL_OW 3
43767: ST_TO_ADDR
// if not f then
43768: LD_VAR 0 12
43772: NOT
43773: IFFALSE 43791
// begin x := x + 2 ;
43775: LD_ADDR_VAR 0 13
43779: PUSH
43780: LD_VAR 0 13
43784: PUSH
43785: LD_INT 2
43787: PLUS
43788: ST_TO_ADDR
// continue ;
43789: GO 43589
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43791: LD_VAR 0 12
43795: PUSH
43796: LD_INT 1
43798: ARRAY
43799: PPUSH
43800: CALL_OW 266
43804: PUSH
43805: LD_INT 5
43807: EQUAL
43808: IFFALSE 43882
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43810: LD_VAR 0 12
43814: PUSH
43815: LD_INT 1
43817: ARRAY
43818: PPUSH
43819: CALL_OW 313
43823: PUSH
43824: LD_INT 3
43826: LESS
43827: IFFALSE 43863
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43829: LD_INT 0
43831: PPUSH
43832: LD_INT 5
43834: PUSH
43835: LD_INT 8
43837: PUSH
43838: LD_INT 9
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: PUSH
43846: LD_VAR 0 17
43850: ARRAY
43851: PPUSH
43852: LD_VAR 0 4
43856: PPUSH
43857: CALL_OW 380
43861: GO 43880
// PrepareHuman ( false , i , skill ) ;
43863: LD_INT 0
43865: PPUSH
43866: LD_VAR 0 8
43870: PPUSH
43871: LD_VAR 0 4
43875: PPUSH
43876: CALL_OW 380
// end else
43880: GO 43899
// PrepareHuman ( false , i , skill ) ;
43882: LD_INT 0
43884: PPUSH
43885: LD_VAR 0 8
43889: PPUSH
43890: LD_VAR 0 4
43894: PPUSH
43895: CALL_OW 380
// un := CreateHuman ;
43899: LD_ADDR_VAR 0 14
43903: PUSH
43904: CALL_OW 44
43908: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43909: LD_ADDR_VAR 0 7
43913: PUSH
43914: LD_VAR 0 7
43918: PPUSH
43919: LD_INT 1
43921: PPUSH
43922: LD_VAR 0 14
43926: PPUSH
43927: CALL_OW 2
43931: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43932: LD_VAR 0 14
43936: PPUSH
43937: LD_VAR 0 12
43941: PUSH
43942: LD_INT 1
43944: ARRAY
43945: PPUSH
43946: CALL_OW 52
// end ;
43950: GO 43589
43952: POP
43953: POP
// end ;
43954: GO 42891
43956: POP
43957: POP
// result := result ^ buildings ;
43958: LD_ADDR_VAR 0 7
43962: PUSH
43963: LD_VAR 0 7
43967: PUSH
43968: LD_VAR 0 18
43972: ADD
43973: ST_TO_ADDR
// end else
43974: GO 44117
// begin for i = 1 to personel do
43976: LD_ADDR_VAR 0 8
43980: PUSH
43981: DOUBLE
43982: LD_INT 1
43984: DEC
43985: ST_TO_ADDR
43986: LD_VAR 0 6
43990: PUSH
43991: FOR_TO
43992: IFFALSE 44115
// begin if i > 4 then
43994: LD_VAR 0 8
43998: PUSH
43999: LD_INT 4
44001: GREATER
44002: IFFALSE 44006
// break ;
44004: GO 44115
// x := personel [ i ] ;
44006: LD_ADDR_VAR 0 13
44010: PUSH
44011: LD_VAR 0 6
44015: PUSH
44016: LD_VAR 0 8
44020: ARRAY
44021: ST_TO_ADDR
// if x = - 1 then
44022: LD_VAR 0 13
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: EQUAL
44031: IFFALSE 44035
// continue ;
44033: GO 43991
// PrepareHuman ( false , i , skill ) ;
44035: LD_INT 0
44037: PPUSH
44038: LD_VAR 0 8
44042: PPUSH
44043: LD_VAR 0 4
44047: PPUSH
44048: CALL_OW 380
// un := CreateHuman ;
44052: LD_ADDR_VAR 0 14
44056: PUSH
44057: CALL_OW 44
44061: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44062: LD_VAR 0 14
44066: PPUSH
44067: LD_VAR 0 1
44071: PPUSH
44072: CALL_OW 250
44076: PPUSH
44077: LD_VAR 0 1
44081: PPUSH
44082: CALL_OW 251
44086: PPUSH
44087: LD_INT 10
44089: PPUSH
44090: LD_INT 0
44092: PPUSH
44093: CALL_OW 50
// result := result ^ un ;
44097: LD_ADDR_VAR 0 7
44101: PUSH
44102: LD_VAR 0 7
44106: PUSH
44107: LD_VAR 0 14
44111: ADD
44112: ST_TO_ADDR
// end ;
44113: GO 43991
44115: POP
44116: POP
// end ; end ;
44117: LD_VAR 0 7
44121: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44122: LD_INT 0
44124: PPUSH
44125: PPUSH
44126: PPUSH
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
44136: PPUSH
44137: PPUSH
44138: PPUSH
44139: PPUSH
// result := false ;
44140: LD_ADDR_VAR 0 3
44144: PUSH
44145: LD_INT 0
44147: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44148: LD_VAR 0 1
44152: NOT
44153: PUSH
44154: LD_VAR 0 1
44158: PPUSH
44159: CALL_OW 266
44163: PUSH
44164: LD_INT 32
44166: PUSH
44167: LD_INT 33
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: IN
44174: NOT
44175: OR
44176: IFFALSE 44180
// exit ;
44178: GO 45289
// nat := GetNation ( tower ) ;
44180: LD_ADDR_VAR 0 12
44184: PUSH
44185: LD_VAR 0 1
44189: PPUSH
44190: CALL_OW 248
44194: ST_TO_ADDR
// side := GetSide ( tower ) ;
44195: LD_ADDR_VAR 0 16
44199: PUSH
44200: LD_VAR 0 1
44204: PPUSH
44205: CALL_OW 255
44209: ST_TO_ADDR
// x := GetX ( tower ) ;
44210: LD_ADDR_VAR 0 10
44214: PUSH
44215: LD_VAR 0 1
44219: PPUSH
44220: CALL_OW 250
44224: ST_TO_ADDR
// y := GetY ( tower ) ;
44225: LD_ADDR_VAR 0 11
44229: PUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 251
44239: ST_TO_ADDR
// if not x or not y then
44240: LD_VAR 0 10
44244: NOT
44245: PUSH
44246: LD_VAR 0 11
44250: NOT
44251: OR
44252: IFFALSE 44256
// exit ;
44254: GO 45289
// weapon := 0 ;
44256: LD_ADDR_VAR 0 18
44260: PUSH
44261: LD_INT 0
44263: ST_TO_ADDR
// fac_list := [ ] ;
44264: LD_ADDR_VAR 0 17
44268: PUSH
44269: EMPTY
44270: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44271: LD_ADDR_VAR 0 6
44275: PUSH
44276: LD_VAR 0 1
44280: PPUSH
44281: CALL_OW 274
44285: PPUSH
44286: LD_VAR 0 2
44290: PPUSH
44291: LD_INT 0
44293: PPUSH
44294: CALL 41860 0 3
44298: PPUSH
44299: LD_INT 30
44301: PUSH
44302: LD_INT 3
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PPUSH
44309: CALL_OW 72
44313: ST_TO_ADDR
// if not factories then
44314: LD_VAR 0 6
44318: NOT
44319: IFFALSE 44323
// exit ;
44321: GO 45289
// for i in factories do
44323: LD_ADDR_VAR 0 8
44327: PUSH
44328: LD_VAR 0 6
44332: PUSH
44333: FOR_IN
44334: IFFALSE 44359
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44336: LD_ADDR_VAR 0 17
44340: PUSH
44341: LD_VAR 0 17
44345: PUSH
44346: LD_VAR 0 8
44350: PPUSH
44351: CALL_OW 478
44355: UNION
44356: ST_TO_ADDR
44357: GO 44333
44359: POP
44360: POP
// if not fac_list then
44361: LD_VAR 0 17
44365: NOT
44366: IFFALSE 44370
// exit ;
44368: GO 45289
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44370: LD_ADDR_VAR 0 5
44374: PUSH
44375: LD_INT 4
44377: PUSH
44378: LD_INT 5
44380: PUSH
44381: LD_INT 9
44383: PUSH
44384: LD_INT 10
44386: PUSH
44387: LD_INT 6
44389: PUSH
44390: LD_INT 7
44392: PUSH
44393: LD_INT 11
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 27
44407: PUSH
44408: LD_INT 28
44410: PUSH
44411: LD_INT 26
44413: PUSH
44414: LD_INT 30
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 43
44425: PUSH
44426: LD_INT 44
44428: PUSH
44429: LD_INT 46
44431: PUSH
44432: LD_INT 45
44434: PUSH
44435: LD_INT 47
44437: PUSH
44438: LD_INT 49
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: PUSH
44454: LD_VAR 0 12
44458: ARRAY
44459: ST_TO_ADDR
// list := list isect fac_list ;
44460: LD_ADDR_VAR 0 5
44464: PUSH
44465: LD_VAR 0 5
44469: PUSH
44470: LD_VAR 0 17
44474: ISECT
44475: ST_TO_ADDR
// if not list then
44476: LD_VAR 0 5
44480: NOT
44481: IFFALSE 44485
// exit ;
44483: GO 45289
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44485: LD_VAR 0 12
44489: PUSH
44490: LD_INT 3
44492: EQUAL
44493: PUSH
44494: LD_INT 49
44496: PUSH
44497: LD_VAR 0 5
44501: IN
44502: AND
44503: PUSH
44504: LD_INT 31
44506: PPUSH
44507: LD_VAR 0 16
44511: PPUSH
44512: CALL_OW 321
44516: PUSH
44517: LD_INT 2
44519: EQUAL
44520: AND
44521: IFFALSE 44581
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44523: LD_INT 22
44525: PUSH
44526: LD_VAR 0 16
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 35
44537: PUSH
44538: LD_INT 49
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 91
44547: PUSH
44548: LD_VAR 0 1
44552: PUSH
44553: LD_INT 10
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: PPUSH
44566: CALL_OW 69
44570: NOT
44571: IFFALSE 44581
// weapon := ru_time_lapser ;
44573: LD_ADDR_VAR 0 18
44577: PUSH
44578: LD_INT 49
44580: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44581: LD_VAR 0 12
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: IN
44596: PUSH
44597: LD_INT 11
44599: PUSH
44600: LD_VAR 0 5
44604: IN
44605: PUSH
44606: LD_INT 30
44608: PUSH
44609: LD_VAR 0 5
44613: IN
44614: OR
44615: AND
44616: PUSH
44617: LD_INT 6
44619: PPUSH
44620: LD_VAR 0 16
44624: PPUSH
44625: CALL_OW 321
44629: PUSH
44630: LD_INT 2
44632: EQUAL
44633: AND
44634: IFFALSE 44799
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44636: LD_INT 22
44638: PUSH
44639: LD_VAR 0 16
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 35
44653: PUSH
44654: LD_INT 11
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 35
44663: PUSH
44664: LD_INT 30
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 91
44678: PUSH
44679: LD_VAR 0 1
44683: PUSH
44684: LD_INT 18
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: LIST
44696: PPUSH
44697: CALL_OW 69
44701: NOT
44702: PUSH
44703: LD_INT 22
44705: PUSH
44706: LD_VAR 0 16
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 30
44720: PUSH
44721: LD_INT 32
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 30
44730: PUSH
44731: LD_INT 33
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 91
44745: PUSH
44746: LD_VAR 0 1
44750: PUSH
44751: LD_INT 12
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: LIST
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: PPUSH
44767: CALL_OW 69
44771: PUSH
44772: LD_INT 2
44774: GREATER
44775: AND
44776: IFFALSE 44799
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44778: LD_ADDR_VAR 0 18
44782: PUSH
44783: LD_INT 11
44785: PUSH
44786: LD_INT 30
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_VAR 0 12
44797: ARRAY
44798: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44799: LD_VAR 0 18
44803: NOT
44804: PUSH
44805: LD_INT 40
44807: PPUSH
44808: LD_VAR 0 16
44812: PPUSH
44813: CALL_OW 321
44817: PUSH
44818: LD_INT 2
44820: EQUAL
44821: AND
44822: PUSH
44823: LD_INT 7
44825: PUSH
44826: LD_VAR 0 5
44830: IN
44831: PUSH
44832: LD_INT 28
44834: PUSH
44835: LD_VAR 0 5
44839: IN
44840: OR
44841: PUSH
44842: LD_INT 45
44844: PUSH
44845: LD_VAR 0 5
44849: IN
44850: OR
44851: AND
44852: IFFALSE 45106
// begin hex := GetHexInfo ( x , y ) ;
44854: LD_ADDR_VAR 0 4
44858: PUSH
44859: LD_VAR 0 10
44863: PPUSH
44864: LD_VAR 0 11
44868: PPUSH
44869: CALL_OW 546
44873: ST_TO_ADDR
// if hex [ 1 ] then
44874: LD_VAR 0 4
44878: PUSH
44879: LD_INT 1
44881: ARRAY
44882: IFFALSE 44886
// exit ;
44884: GO 45289
// height := hex [ 2 ] ;
44886: LD_ADDR_VAR 0 15
44890: PUSH
44891: LD_VAR 0 4
44895: PUSH
44896: LD_INT 2
44898: ARRAY
44899: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44900: LD_ADDR_VAR 0 14
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: LD_INT 5
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: ST_TO_ADDR
// for i in tmp do
44923: LD_ADDR_VAR 0 8
44927: PUSH
44928: LD_VAR 0 14
44932: PUSH
44933: FOR_IN
44934: IFFALSE 45104
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44936: LD_ADDR_VAR 0 9
44940: PUSH
44941: LD_VAR 0 10
44945: PPUSH
44946: LD_VAR 0 8
44950: PPUSH
44951: LD_INT 5
44953: PPUSH
44954: CALL_OW 272
44958: PUSH
44959: LD_VAR 0 11
44963: PPUSH
44964: LD_VAR 0 8
44968: PPUSH
44969: LD_INT 5
44971: PPUSH
44972: CALL_OW 273
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44981: LD_VAR 0 9
44985: PUSH
44986: LD_INT 1
44988: ARRAY
44989: PPUSH
44990: LD_VAR 0 9
44994: PUSH
44995: LD_INT 2
44997: ARRAY
44998: PPUSH
44999: CALL_OW 488
45003: IFFALSE 45102
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45005: LD_ADDR_VAR 0 4
45009: PUSH
45010: LD_VAR 0 9
45014: PUSH
45015: LD_INT 1
45017: ARRAY
45018: PPUSH
45019: LD_VAR 0 9
45023: PUSH
45024: LD_INT 2
45026: ARRAY
45027: PPUSH
45028: CALL_OW 546
45032: ST_TO_ADDR
// if hex [ 1 ] then
45033: LD_VAR 0 4
45037: PUSH
45038: LD_INT 1
45040: ARRAY
45041: IFFALSE 45045
// continue ;
45043: GO 44933
// h := hex [ 2 ] ;
45045: LD_ADDR_VAR 0 13
45049: PUSH
45050: LD_VAR 0 4
45054: PUSH
45055: LD_INT 2
45057: ARRAY
45058: ST_TO_ADDR
// if h + 7 < height then
45059: LD_VAR 0 13
45063: PUSH
45064: LD_INT 7
45066: PLUS
45067: PUSH
45068: LD_VAR 0 15
45072: LESS
45073: IFFALSE 45102
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45075: LD_ADDR_VAR 0 18
45079: PUSH
45080: LD_INT 7
45082: PUSH
45083: LD_INT 28
45085: PUSH
45086: LD_INT 45
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: LIST
45093: PUSH
45094: LD_VAR 0 12
45098: ARRAY
45099: ST_TO_ADDR
// break ;
45100: GO 45104
// end ; end ; end ;
45102: GO 44933
45104: POP
45105: POP
// end ; if not weapon then
45106: LD_VAR 0 18
45110: NOT
45111: IFFALSE 45171
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45113: LD_ADDR_VAR 0 5
45117: PUSH
45118: LD_VAR 0 5
45122: PUSH
45123: LD_INT 11
45125: PUSH
45126: LD_INT 30
45128: PUSH
45129: LD_INT 49
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: DIFF
45137: ST_TO_ADDR
// if not list then
45138: LD_VAR 0 5
45142: NOT
45143: IFFALSE 45147
// exit ;
45145: GO 45289
// weapon := list [ rand ( 1 , list ) ] ;
45147: LD_ADDR_VAR 0 18
45151: PUSH
45152: LD_VAR 0 5
45156: PUSH
45157: LD_INT 1
45159: PPUSH
45160: LD_VAR 0 5
45164: PPUSH
45165: CALL_OW 12
45169: ARRAY
45170: ST_TO_ADDR
// end ; if weapon then
45171: LD_VAR 0 18
45175: IFFALSE 45289
// begin tmp := CostOfWeapon ( weapon ) ;
45177: LD_ADDR_VAR 0 14
45181: PUSH
45182: LD_VAR 0 18
45186: PPUSH
45187: CALL_OW 451
45191: ST_TO_ADDR
// j := GetBase ( tower ) ;
45192: LD_ADDR_VAR 0 9
45196: PUSH
45197: LD_VAR 0 1
45201: PPUSH
45202: CALL_OW 274
45206: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45207: LD_VAR 0 9
45211: PPUSH
45212: LD_INT 1
45214: PPUSH
45215: CALL_OW 275
45219: PUSH
45220: LD_VAR 0 14
45224: PUSH
45225: LD_INT 1
45227: ARRAY
45228: GREATEREQUAL
45229: PUSH
45230: LD_VAR 0 9
45234: PPUSH
45235: LD_INT 2
45237: PPUSH
45238: CALL_OW 275
45242: PUSH
45243: LD_VAR 0 14
45247: PUSH
45248: LD_INT 2
45250: ARRAY
45251: GREATEREQUAL
45252: AND
45253: PUSH
45254: LD_VAR 0 9
45258: PPUSH
45259: LD_INT 3
45261: PPUSH
45262: CALL_OW 275
45266: PUSH
45267: LD_VAR 0 14
45271: PUSH
45272: LD_INT 3
45274: ARRAY
45275: GREATEREQUAL
45276: AND
45277: IFFALSE 45289
// result := weapon ;
45279: LD_ADDR_VAR 0 3
45283: PUSH
45284: LD_VAR 0 18
45288: ST_TO_ADDR
// end ; end ;
45289: LD_VAR 0 3
45293: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45294: LD_INT 0
45296: PPUSH
45297: PPUSH
// result := true ;
45298: LD_ADDR_VAR 0 3
45302: PUSH
45303: LD_INT 1
45305: ST_TO_ADDR
// if array1 = array2 then
45306: LD_VAR 0 1
45310: PUSH
45311: LD_VAR 0 2
45315: EQUAL
45316: IFFALSE 45376
// begin for i = 1 to array1 do
45318: LD_ADDR_VAR 0 4
45322: PUSH
45323: DOUBLE
45324: LD_INT 1
45326: DEC
45327: ST_TO_ADDR
45328: LD_VAR 0 1
45332: PUSH
45333: FOR_TO
45334: IFFALSE 45372
// if array1 [ i ] <> array2 [ i ] then
45336: LD_VAR 0 1
45340: PUSH
45341: LD_VAR 0 4
45345: ARRAY
45346: PUSH
45347: LD_VAR 0 2
45351: PUSH
45352: LD_VAR 0 4
45356: ARRAY
45357: NONEQUAL
45358: IFFALSE 45370
// begin result := false ;
45360: LD_ADDR_VAR 0 3
45364: PUSH
45365: LD_INT 0
45367: ST_TO_ADDR
// break ;
45368: GO 45372
// end ;
45370: GO 45333
45372: POP
45373: POP
// end else
45374: GO 45384
// result := false ;
45376: LD_ADDR_VAR 0 3
45380: PUSH
45381: LD_INT 0
45383: ST_TO_ADDR
// end ;
45384: LD_VAR 0 3
45388: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45389: LD_INT 0
45391: PPUSH
45392: PPUSH
// if not array1 or not array2 then
45393: LD_VAR 0 1
45397: NOT
45398: PUSH
45399: LD_VAR 0 2
45403: NOT
45404: OR
45405: IFFALSE 45409
// exit ;
45407: GO 45473
// result := true ;
45409: LD_ADDR_VAR 0 3
45413: PUSH
45414: LD_INT 1
45416: ST_TO_ADDR
// for i = 1 to array1 do
45417: LD_ADDR_VAR 0 4
45421: PUSH
45422: DOUBLE
45423: LD_INT 1
45425: DEC
45426: ST_TO_ADDR
45427: LD_VAR 0 1
45431: PUSH
45432: FOR_TO
45433: IFFALSE 45471
// if array1 [ i ] <> array2 [ i ] then
45435: LD_VAR 0 1
45439: PUSH
45440: LD_VAR 0 4
45444: ARRAY
45445: PUSH
45446: LD_VAR 0 2
45450: PUSH
45451: LD_VAR 0 4
45455: ARRAY
45456: NONEQUAL
45457: IFFALSE 45469
// begin result := false ;
45459: LD_ADDR_VAR 0 3
45463: PUSH
45464: LD_INT 0
45466: ST_TO_ADDR
// break ;
45467: GO 45471
// end ;
45469: GO 45432
45471: POP
45472: POP
// end ;
45473: LD_VAR 0 3
45477: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45478: LD_INT 0
45480: PPUSH
45481: PPUSH
45482: PPUSH
// pom := GetBase ( fac ) ;
45483: LD_ADDR_VAR 0 5
45487: PUSH
45488: LD_VAR 0 1
45492: PPUSH
45493: CALL_OW 274
45497: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45498: LD_ADDR_VAR 0 4
45502: PUSH
45503: LD_VAR 0 2
45507: PUSH
45508: LD_INT 1
45510: ARRAY
45511: PPUSH
45512: LD_VAR 0 2
45516: PUSH
45517: LD_INT 2
45519: ARRAY
45520: PPUSH
45521: LD_VAR 0 2
45525: PUSH
45526: LD_INT 3
45528: ARRAY
45529: PPUSH
45530: LD_VAR 0 2
45534: PUSH
45535: LD_INT 4
45537: ARRAY
45538: PPUSH
45539: CALL_OW 449
45543: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45544: LD_ADDR_VAR 0 3
45548: PUSH
45549: LD_VAR 0 5
45553: PPUSH
45554: LD_INT 1
45556: PPUSH
45557: CALL_OW 275
45561: PUSH
45562: LD_VAR 0 4
45566: PUSH
45567: LD_INT 1
45569: ARRAY
45570: GREATEREQUAL
45571: PUSH
45572: LD_VAR 0 5
45576: PPUSH
45577: LD_INT 2
45579: PPUSH
45580: CALL_OW 275
45584: PUSH
45585: LD_VAR 0 4
45589: PUSH
45590: LD_INT 2
45592: ARRAY
45593: GREATEREQUAL
45594: AND
45595: PUSH
45596: LD_VAR 0 5
45600: PPUSH
45601: LD_INT 3
45603: PPUSH
45604: CALL_OW 275
45608: PUSH
45609: LD_VAR 0 4
45613: PUSH
45614: LD_INT 3
45616: ARRAY
45617: GREATEREQUAL
45618: AND
45619: ST_TO_ADDR
// end ;
45620: LD_VAR 0 3
45624: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45625: LD_INT 0
45627: PPUSH
45628: PPUSH
45629: PPUSH
45630: PPUSH
// pom := GetBase ( building ) ;
45631: LD_ADDR_VAR 0 3
45635: PUSH
45636: LD_VAR 0 1
45640: PPUSH
45641: CALL_OW 274
45645: ST_TO_ADDR
// if not pom then
45646: LD_VAR 0 3
45650: NOT
45651: IFFALSE 45655
// exit ;
45653: GO 45825
// btype := GetBType ( building ) ;
45655: LD_ADDR_VAR 0 5
45659: PUSH
45660: LD_VAR 0 1
45664: PPUSH
45665: CALL_OW 266
45669: ST_TO_ADDR
// if btype = b_armoury then
45670: LD_VAR 0 5
45674: PUSH
45675: LD_INT 4
45677: EQUAL
45678: IFFALSE 45688
// btype := b_barracks ;
45680: LD_ADDR_VAR 0 5
45684: PUSH
45685: LD_INT 5
45687: ST_TO_ADDR
// if btype = b_depot then
45688: LD_VAR 0 5
45692: PUSH
45693: LD_INT 0
45695: EQUAL
45696: IFFALSE 45706
// btype := b_warehouse ;
45698: LD_ADDR_VAR 0 5
45702: PUSH
45703: LD_INT 1
45705: ST_TO_ADDR
// if btype = b_workshop then
45706: LD_VAR 0 5
45710: PUSH
45711: LD_INT 2
45713: EQUAL
45714: IFFALSE 45724
// btype := b_factory ;
45716: LD_ADDR_VAR 0 5
45720: PUSH
45721: LD_INT 3
45723: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45724: LD_ADDR_VAR 0 4
45728: PUSH
45729: LD_VAR 0 5
45733: PPUSH
45734: LD_VAR 0 1
45738: PPUSH
45739: CALL_OW 248
45743: PPUSH
45744: CALL_OW 450
45748: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45749: LD_ADDR_VAR 0 2
45753: PUSH
45754: LD_VAR 0 3
45758: PPUSH
45759: LD_INT 1
45761: PPUSH
45762: CALL_OW 275
45766: PUSH
45767: LD_VAR 0 4
45771: PUSH
45772: LD_INT 1
45774: ARRAY
45775: GREATEREQUAL
45776: PUSH
45777: LD_VAR 0 3
45781: PPUSH
45782: LD_INT 2
45784: PPUSH
45785: CALL_OW 275
45789: PUSH
45790: LD_VAR 0 4
45794: PUSH
45795: LD_INT 2
45797: ARRAY
45798: GREATEREQUAL
45799: AND
45800: PUSH
45801: LD_VAR 0 3
45805: PPUSH
45806: LD_INT 3
45808: PPUSH
45809: CALL_OW 275
45813: PUSH
45814: LD_VAR 0 4
45818: PUSH
45819: LD_INT 3
45821: ARRAY
45822: GREATEREQUAL
45823: AND
45824: ST_TO_ADDR
// end ;
45825: LD_VAR 0 2
45829: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45830: LD_INT 0
45832: PPUSH
45833: PPUSH
45834: PPUSH
// pom := GetBase ( building ) ;
45835: LD_ADDR_VAR 0 4
45839: PUSH
45840: LD_VAR 0 1
45844: PPUSH
45845: CALL_OW 274
45849: ST_TO_ADDR
// if not pom then
45850: LD_VAR 0 4
45854: NOT
45855: IFFALSE 45859
// exit ;
45857: GO 45960
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45859: LD_ADDR_VAR 0 5
45863: PUSH
45864: LD_VAR 0 2
45868: PPUSH
45869: LD_VAR 0 1
45873: PPUSH
45874: CALL_OW 248
45878: PPUSH
45879: CALL_OW 450
45883: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45884: LD_ADDR_VAR 0 3
45888: PUSH
45889: LD_VAR 0 4
45893: PPUSH
45894: LD_INT 1
45896: PPUSH
45897: CALL_OW 275
45901: PUSH
45902: LD_VAR 0 5
45906: PUSH
45907: LD_INT 1
45909: ARRAY
45910: GREATEREQUAL
45911: PUSH
45912: LD_VAR 0 4
45916: PPUSH
45917: LD_INT 2
45919: PPUSH
45920: CALL_OW 275
45924: PUSH
45925: LD_VAR 0 5
45929: PUSH
45930: LD_INT 2
45932: ARRAY
45933: GREATEREQUAL
45934: AND
45935: PUSH
45936: LD_VAR 0 4
45940: PPUSH
45941: LD_INT 3
45943: PPUSH
45944: CALL_OW 275
45948: PUSH
45949: LD_VAR 0 5
45953: PUSH
45954: LD_INT 3
45956: ARRAY
45957: GREATEREQUAL
45958: AND
45959: ST_TO_ADDR
// end ;
45960: LD_VAR 0 3
45964: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45965: LD_INT 0
45967: PPUSH
45968: PPUSH
45969: PPUSH
45970: PPUSH
45971: PPUSH
45972: PPUSH
45973: PPUSH
45974: PPUSH
45975: PPUSH
45976: PPUSH
45977: PPUSH
// result := false ;
45978: LD_ADDR_VAR 0 8
45982: PUSH
45983: LD_INT 0
45985: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45986: LD_VAR 0 5
45990: NOT
45991: PUSH
45992: LD_VAR 0 1
45996: NOT
45997: OR
45998: PUSH
45999: LD_VAR 0 2
46003: NOT
46004: OR
46005: PUSH
46006: LD_VAR 0 3
46010: NOT
46011: OR
46012: IFFALSE 46016
// exit ;
46014: GO 46830
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46016: LD_ADDR_VAR 0 14
46020: PUSH
46021: LD_VAR 0 1
46025: PPUSH
46026: LD_VAR 0 2
46030: PPUSH
46031: LD_VAR 0 3
46035: PPUSH
46036: LD_VAR 0 4
46040: PPUSH
46041: LD_VAR 0 5
46045: PUSH
46046: LD_INT 1
46048: ARRAY
46049: PPUSH
46050: CALL_OW 248
46054: PPUSH
46055: LD_INT 0
46057: PPUSH
46058: CALL 48067 0 6
46062: ST_TO_ADDR
// if not hexes then
46063: LD_VAR 0 14
46067: NOT
46068: IFFALSE 46072
// exit ;
46070: GO 46830
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46072: LD_ADDR_VAR 0 17
46076: PUSH
46077: LD_VAR 0 5
46081: PPUSH
46082: LD_INT 22
46084: PUSH
46085: LD_VAR 0 13
46089: PPUSH
46090: CALL_OW 255
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 30
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 30
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PPUSH
46131: CALL_OW 72
46135: ST_TO_ADDR
// for i = 1 to hexes do
46136: LD_ADDR_VAR 0 9
46140: PUSH
46141: DOUBLE
46142: LD_INT 1
46144: DEC
46145: ST_TO_ADDR
46146: LD_VAR 0 14
46150: PUSH
46151: FOR_TO
46152: IFFALSE 46828
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46154: LD_ADDR_VAR 0 13
46158: PUSH
46159: LD_VAR 0 14
46163: PUSH
46164: LD_VAR 0 9
46168: ARRAY
46169: PUSH
46170: LD_INT 1
46172: ARRAY
46173: PPUSH
46174: LD_VAR 0 14
46178: PUSH
46179: LD_VAR 0 9
46183: ARRAY
46184: PUSH
46185: LD_INT 2
46187: ARRAY
46188: PPUSH
46189: CALL_OW 428
46193: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46194: LD_VAR 0 14
46198: PUSH
46199: LD_VAR 0 9
46203: ARRAY
46204: PUSH
46205: LD_INT 1
46207: ARRAY
46208: PPUSH
46209: LD_VAR 0 14
46213: PUSH
46214: LD_VAR 0 9
46218: ARRAY
46219: PUSH
46220: LD_INT 2
46222: ARRAY
46223: PPUSH
46224: CALL_OW 351
46228: PUSH
46229: LD_VAR 0 14
46233: PUSH
46234: LD_VAR 0 9
46238: ARRAY
46239: PUSH
46240: LD_INT 1
46242: ARRAY
46243: PPUSH
46244: LD_VAR 0 14
46248: PUSH
46249: LD_VAR 0 9
46253: ARRAY
46254: PUSH
46255: LD_INT 2
46257: ARRAY
46258: PPUSH
46259: CALL_OW 488
46263: NOT
46264: OR
46265: PUSH
46266: LD_VAR 0 13
46270: PPUSH
46271: CALL_OW 247
46275: PUSH
46276: LD_INT 3
46278: EQUAL
46279: OR
46280: IFFALSE 46286
// exit ;
46282: POP
46283: POP
46284: GO 46830
// if not tmp then
46286: LD_VAR 0 13
46290: NOT
46291: IFFALSE 46295
// continue ;
46293: GO 46151
// result := true ;
46295: LD_ADDR_VAR 0 8
46299: PUSH
46300: LD_INT 1
46302: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46303: LD_VAR 0 6
46307: PUSH
46308: LD_VAR 0 13
46312: PPUSH
46313: CALL_OW 247
46317: PUSH
46318: LD_INT 2
46320: EQUAL
46321: AND
46322: PUSH
46323: LD_VAR 0 13
46327: PPUSH
46328: CALL_OW 263
46332: PUSH
46333: LD_INT 1
46335: EQUAL
46336: AND
46337: IFFALSE 46501
// begin if IsDrivenBy ( tmp ) then
46339: LD_VAR 0 13
46343: PPUSH
46344: CALL_OW 311
46348: IFFALSE 46352
// continue ;
46350: GO 46151
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46352: LD_VAR 0 6
46356: PPUSH
46357: LD_INT 3
46359: PUSH
46360: LD_INT 60
46362: PUSH
46363: EMPTY
46364: LIST
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: LD_INT 55
46375: PUSH
46376: EMPTY
46377: LIST
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PPUSH
46387: CALL_OW 72
46391: IFFALSE 46499
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46393: LD_ADDR_VAR 0 18
46397: PUSH
46398: LD_VAR 0 6
46402: PPUSH
46403: LD_INT 3
46405: PUSH
46406: LD_INT 60
46408: PUSH
46409: EMPTY
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 3
46418: PUSH
46419: LD_INT 55
46421: PUSH
46422: EMPTY
46423: LIST
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PPUSH
46433: CALL_OW 72
46437: PUSH
46438: LD_INT 1
46440: ARRAY
46441: ST_TO_ADDR
// if IsInUnit ( driver ) then
46442: LD_VAR 0 18
46446: PPUSH
46447: CALL_OW 310
46451: IFFALSE 46462
// ComExit ( driver ) ;
46453: LD_VAR 0 18
46457: PPUSH
46458: CALL 71251 0 1
// AddComEnterUnit ( driver , tmp ) ;
46462: LD_VAR 0 18
46466: PPUSH
46467: LD_VAR 0 13
46471: PPUSH
46472: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46476: LD_VAR 0 18
46480: PPUSH
46481: LD_VAR 0 7
46485: PPUSH
46486: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46490: LD_VAR 0 18
46494: PPUSH
46495: CALL_OW 181
// end ; continue ;
46499: GO 46151
// end ; if not cleaners or not tmp in cleaners then
46501: LD_VAR 0 6
46505: NOT
46506: PUSH
46507: LD_VAR 0 13
46511: PUSH
46512: LD_VAR 0 6
46516: IN
46517: NOT
46518: OR
46519: IFFALSE 46826
// begin if dep then
46521: LD_VAR 0 17
46525: IFFALSE 46661
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46527: LD_ADDR_VAR 0 16
46531: PUSH
46532: LD_VAR 0 17
46536: PUSH
46537: LD_INT 1
46539: ARRAY
46540: PPUSH
46541: CALL_OW 250
46545: PPUSH
46546: LD_VAR 0 17
46550: PUSH
46551: LD_INT 1
46553: ARRAY
46554: PPUSH
46555: CALL_OW 254
46559: PPUSH
46560: LD_INT 5
46562: PPUSH
46563: CALL_OW 272
46567: PUSH
46568: LD_VAR 0 17
46572: PUSH
46573: LD_INT 1
46575: ARRAY
46576: PPUSH
46577: CALL_OW 251
46581: PPUSH
46582: LD_VAR 0 17
46586: PUSH
46587: LD_INT 1
46589: ARRAY
46590: PPUSH
46591: CALL_OW 254
46595: PPUSH
46596: LD_INT 5
46598: PPUSH
46599: CALL_OW 273
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46608: LD_VAR 0 16
46612: PUSH
46613: LD_INT 1
46615: ARRAY
46616: PPUSH
46617: LD_VAR 0 16
46621: PUSH
46622: LD_INT 2
46624: ARRAY
46625: PPUSH
46626: CALL_OW 488
46630: IFFALSE 46661
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46632: LD_VAR 0 13
46636: PPUSH
46637: LD_VAR 0 16
46641: PUSH
46642: LD_INT 1
46644: ARRAY
46645: PPUSH
46646: LD_VAR 0 16
46650: PUSH
46651: LD_INT 2
46653: ARRAY
46654: PPUSH
46655: CALL_OW 111
// continue ;
46659: GO 46151
// end ; end ; r := GetDir ( tmp ) ;
46661: LD_ADDR_VAR 0 15
46665: PUSH
46666: LD_VAR 0 13
46670: PPUSH
46671: CALL_OW 254
46675: ST_TO_ADDR
// if r = 5 then
46676: LD_VAR 0 15
46680: PUSH
46681: LD_INT 5
46683: EQUAL
46684: IFFALSE 46694
// r := 0 ;
46686: LD_ADDR_VAR 0 15
46690: PUSH
46691: LD_INT 0
46693: ST_TO_ADDR
// for j = r to 5 do
46694: LD_ADDR_VAR 0 10
46698: PUSH
46699: DOUBLE
46700: LD_VAR 0 15
46704: DEC
46705: ST_TO_ADDR
46706: LD_INT 5
46708: PUSH
46709: FOR_TO
46710: IFFALSE 46824
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46712: LD_ADDR_VAR 0 11
46716: PUSH
46717: LD_VAR 0 13
46721: PPUSH
46722: CALL_OW 250
46726: PPUSH
46727: LD_VAR 0 10
46731: PPUSH
46732: LD_INT 2
46734: PPUSH
46735: CALL_OW 272
46739: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46740: LD_ADDR_VAR 0 12
46744: PUSH
46745: LD_VAR 0 13
46749: PPUSH
46750: CALL_OW 251
46754: PPUSH
46755: LD_VAR 0 10
46759: PPUSH
46760: LD_INT 2
46762: PPUSH
46763: CALL_OW 273
46767: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46768: LD_VAR 0 11
46772: PPUSH
46773: LD_VAR 0 12
46777: PPUSH
46778: CALL_OW 488
46782: PUSH
46783: LD_VAR 0 11
46787: PPUSH
46788: LD_VAR 0 12
46792: PPUSH
46793: CALL_OW 428
46797: NOT
46798: AND
46799: IFFALSE 46822
// begin ComMoveXY ( tmp , _x , _y ) ;
46801: LD_VAR 0 13
46805: PPUSH
46806: LD_VAR 0 11
46810: PPUSH
46811: LD_VAR 0 12
46815: PPUSH
46816: CALL_OW 111
// break ;
46820: GO 46824
// end ; end ;
46822: GO 46709
46824: POP
46825: POP
// end ; end ;
46826: GO 46151
46828: POP
46829: POP
// end ;
46830: LD_VAR 0 8
46834: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46835: LD_INT 0
46837: PPUSH
// result := true ;
46838: LD_ADDR_VAR 0 3
46842: PUSH
46843: LD_INT 1
46845: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46846: LD_VAR 0 2
46850: PUSH
46851: LD_INT 24
46853: DOUBLE
46854: EQUAL
46855: IFTRUE 46865
46857: LD_INT 33
46859: DOUBLE
46860: EQUAL
46861: IFTRUE 46865
46863: GO 46890
46865: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46866: LD_ADDR_VAR 0 3
46870: PUSH
46871: LD_INT 32
46873: PPUSH
46874: LD_VAR 0 1
46878: PPUSH
46879: CALL_OW 321
46883: PUSH
46884: LD_INT 2
46886: EQUAL
46887: ST_TO_ADDR
46888: GO 47210
46890: LD_INT 20
46892: DOUBLE
46893: EQUAL
46894: IFTRUE 46898
46896: GO 46923
46898: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46899: LD_ADDR_VAR 0 3
46903: PUSH
46904: LD_INT 6
46906: PPUSH
46907: LD_VAR 0 1
46911: PPUSH
46912: CALL_OW 321
46916: PUSH
46917: LD_INT 2
46919: EQUAL
46920: ST_TO_ADDR
46921: GO 47210
46923: LD_INT 22
46925: DOUBLE
46926: EQUAL
46927: IFTRUE 46937
46929: LD_INT 36
46931: DOUBLE
46932: EQUAL
46933: IFTRUE 46937
46935: GO 46962
46937: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46938: LD_ADDR_VAR 0 3
46942: PUSH
46943: LD_INT 15
46945: PPUSH
46946: LD_VAR 0 1
46950: PPUSH
46951: CALL_OW 321
46955: PUSH
46956: LD_INT 2
46958: EQUAL
46959: ST_TO_ADDR
46960: GO 47210
46962: LD_INT 30
46964: DOUBLE
46965: EQUAL
46966: IFTRUE 46970
46968: GO 46995
46970: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46971: LD_ADDR_VAR 0 3
46975: PUSH
46976: LD_INT 20
46978: PPUSH
46979: LD_VAR 0 1
46983: PPUSH
46984: CALL_OW 321
46988: PUSH
46989: LD_INT 2
46991: EQUAL
46992: ST_TO_ADDR
46993: GO 47210
46995: LD_INT 28
46997: DOUBLE
46998: EQUAL
46999: IFTRUE 47009
47001: LD_INT 21
47003: DOUBLE
47004: EQUAL
47005: IFTRUE 47009
47007: GO 47034
47009: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47010: LD_ADDR_VAR 0 3
47014: PUSH
47015: LD_INT 21
47017: PPUSH
47018: LD_VAR 0 1
47022: PPUSH
47023: CALL_OW 321
47027: PUSH
47028: LD_INT 2
47030: EQUAL
47031: ST_TO_ADDR
47032: GO 47210
47034: LD_INT 16
47036: DOUBLE
47037: EQUAL
47038: IFTRUE 47042
47040: GO 47069
47042: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47043: LD_ADDR_VAR 0 3
47047: PUSH
47048: LD_EXP 50
47052: PPUSH
47053: LD_VAR 0 1
47057: PPUSH
47058: CALL_OW 321
47062: PUSH
47063: LD_INT 2
47065: EQUAL
47066: ST_TO_ADDR
47067: GO 47210
47069: LD_INT 19
47071: DOUBLE
47072: EQUAL
47073: IFTRUE 47083
47075: LD_INT 23
47077: DOUBLE
47078: EQUAL
47079: IFTRUE 47083
47081: GO 47110
47083: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47084: LD_ADDR_VAR 0 3
47088: PUSH
47089: LD_EXP 49
47093: PPUSH
47094: LD_VAR 0 1
47098: PPUSH
47099: CALL_OW 321
47103: PUSH
47104: LD_INT 2
47106: EQUAL
47107: ST_TO_ADDR
47108: GO 47210
47110: LD_INT 17
47112: DOUBLE
47113: EQUAL
47114: IFTRUE 47118
47116: GO 47143
47118: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47119: LD_ADDR_VAR 0 3
47123: PUSH
47124: LD_INT 39
47126: PPUSH
47127: LD_VAR 0 1
47131: PPUSH
47132: CALL_OW 321
47136: PUSH
47137: LD_INT 2
47139: EQUAL
47140: ST_TO_ADDR
47141: GO 47210
47143: LD_INT 18
47145: DOUBLE
47146: EQUAL
47147: IFTRUE 47151
47149: GO 47176
47151: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47152: LD_ADDR_VAR 0 3
47156: PUSH
47157: LD_INT 40
47159: PPUSH
47160: LD_VAR 0 1
47164: PPUSH
47165: CALL_OW 321
47169: PUSH
47170: LD_INT 2
47172: EQUAL
47173: ST_TO_ADDR
47174: GO 47210
47176: LD_INT 27
47178: DOUBLE
47179: EQUAL
47180: IFTRUE 47184
47182: GO 47209
47184: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47185: LD_ADDR_VAR 0 3
47189: PUSH
47190: LD_INT 35
47192: PPUSH
47193: LD_VAR 0 1
47197: PPUSH
47198: CALL_OW 321
47202: PUSH
47203: LD_INT 2
47205: EQUAL
47206: ST_TO_ADDR
47207: GO 47210
47209: POP
// end ;
47210: LD_VAR 0 3
47214: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47215: LD_INT 0
47217: PPUSH
47218: PPUSH
47219: PPUSH
47220: PPUSH
47221: PPUSH
47222: PPUSH
47223: PPUSH
47224: PPUSH
47225: PPUSH
47226: PPUSH
47227: PPUSH
// result := false ;
47228: LD_ADDR_VAR 0 6
47232: PUSH
47233: LD_INT 0
47235: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47236: LD_VAR 0 1
47240: NOT
47241: PUSH
47242: LD_VAR 0 1
47246: PPUSH
47247: CALL_OW 266
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: IN
47262: NOT
47263: OR
47264: PUSH
47265: LD_VAR 0 2
47269: NOT
47270: OR
47271: PUSH
47272: LD_VAR 0 5
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 2
47285: PUSH
47286: LD_INT 3
47288: PUSH
47289: LD_INT 4
47291: PUSH
47292: LD_INT 5
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: IN
47303: NOT
47304: OR
47305: PUSH
47306: LD_VAR 0 3
47310: PPUSH
47311: LD_VAR 0 4
47315: PPUSH
47316: CALL_OW 488
47320: NOT
47321: OR
47322: IFFALSE 47326
// exit ;
47324: GO 48062
// side := GetSide ( depot ) ;
47326: LD_ADDR_VAR 0 9
47330: PUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: CALL_OW 255
47340: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47341: LD_VAR 0 9
47345: PPUSH
47346: LD_VAR 0 2
47350: PPUSH
47351: CALL 46835 0 2
47355: NOT
47356: IFFALSE 47360
// exit ;
47358: GO 48062
// pom := GetBase ( depot ) ;
47360: LD_ADDR_VAR 0 10
47364: PUSH
47365: LD_VAR 0 1
47369: PPUSH
47370: CALL_OW 274
47374: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47375: LD_ADDR_VAR 0 11
47379: PUSH
47380: LD_VAR 0 2
47384: PPUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: CALL_OW 248
47394: PPUSH
47395: CALL_OW 450
47399: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47400: LD_VAR 0 10
47404: PPUSH
47405: LD_INT 1
47407: PPUSH
47408: CALL_OW 275
47412: PUSH
47413: LD_VAR 0 11
47417: PUSH
47418: LD_INT 1
47420: ARRAY
47421: GREATEREQUAL
47422: PUSH
47423: LD_VAR 0 10
47427: PPUSH
47428: LD_INT 2
47430: PPUSH
47431: CALL_OW 275
47435: PUSH
47436: LD_VAR 0 11
47440: PUSH
47441: LD_INT 2
47443: ARRAY
47444: GREATEREQUAL
47445: AND
47446: PUSH
47447: LD_VAR 0 10
47451: PPUSH
47452: LD_INT 3
47454: PPUSH
47455: CALL_OW 275
47459: PUSH
47460: LD_VAR 0 11
47464: PUSH
47465: LD_INT 3
47467: ARRAY
47468: GREATEREQUAL
47469: AND
47470: NOT
47471: IFFALSE 47475
// exit ;
47473: GO 48062
// if GetBType ( depot ) = b_depot then
47475: LD_VAR 0 1
47479: PPUSH
47480: CALL_OW 266
47484: PUSH
47485: LD_INT 0
47487: EQUAL
47488: IFFALSE 47500
// dist := 28 else
47490: LD_ADDR_VAR 0 14
47494: PUSH
47495: LD_INT 28
47497: ST_TO_ADDR
47498: GO 47508
// dist := 36 ;
47500: LD_ADDR_VAR 0 14
47504: PUSH
47505: LD_INT 36
47507: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47508: LD_VAR 0 1
47512: PPUSH
47513: LD_VAR 0 3
47517: PPUSH
47518: LD_VAR 0 4
47522: PPUSH
47523: CALL_OW 297
47527: PUSH
47528: LD_VAR 0 14
47532: GREATER
47533: IFFALSE 47537
// exit ;
47535: GO 48062
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47537: LD_ADDR_VAR 0 12
47541: PUSH
47542: LD_VAR 0 2
47546: PPUSH
47547: LD_VAR 0 3
47551: PPUSH
47552: LD_VAR 0 4
47556: PPUSH
47557: LD_VAR 0 5
47561: PPUSH
47562: LD_VAR 0 1
47566: PPUSH
47567: CALL_OW 248
47571: PPUSH
47572: LD_INT 0
47574: PPUSH
47575: CALL 48067 0 6
47579: ST_TO_ADDR
// if not hexes then
47580: LD_VAR 0 12
47584: NOT
47585: IFFALSE 47589
// exit ;
47587: GO 48062
// hex := GetHexInfo ( x , y ) ;
47589: LD_ADDR_VAR 0 15
47593: PUSH
47594: LD_VAR 0 3
47598: PPUSH
47599: LD_VAR 0 4
47603: PPUSH
47604: CALL_OW 546
47608: ST_TO_ADDR
// if hex [ 1 ] then
47609: LD_VAR 0 15
47613: PUSH
47614: LD_INT 1
47616: ARRAY
47617: IFFALSE 47621
// exit ;
47619: GO 48062
// height := hex [ 2 ] ;
47621: LD_ADDR_VAR 0 13
47625: PUSH
47626: LD_VAR 0 15
47630: PUSH
47631: LD_INT 2
47633: ARRAY
47634: ST_TO_ADDR
// for i = 1 to hexes do
47635: LD_ADDR_VAR 0 7
47639: PUSH
47640: DOUBLE
47641: LD_INT 1
47643: DEC
47644: ST_TO_ADDR
47645: LD_VAR 0 12
47649: PUSH
47650: FOR_TO
47651: IFFALSE 47981
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47653: LD_VAR 0 12
47657: PUSH
47658: LD_VAR 0 7
47662: ARRAY
47663: PUSH
47664: LD_INT 1
47666: ARRAY
47667: PPUSH
47668: LD_VAR 0 12
47672: PUSH
47673: LD_VAR 0 7
47677: ARRAY
47678: PUSH
47679: LD_INT 2
47681: ARRAY
47682: PPUSH
47683: CALL_OW 488
47687: NOT
47688: PUSH
47689: LD_VAR 0 12
47693: PUSH
47694: LD_VAR 0 7
47698: ARRAY
47699: PUSH
47700: LD_INT 1
47702: ARRAY
47703: PPUSH
47704: LD_VAR 0 12
47708: PUSH
47709: LD_VAR 0 7
47713: ARRAY
47714: PUSH
47715: LD_INT 2
47717: ARRAY
47718: PPUSH
47719: CALL_OW 428
47723: PUSH
47724: LD_INT 0
47726: GREATER
47727: OR
47728: PUSH
47729: LD_VAR 0 12
47733: PUSH
47734: LD_VAR 0 7
47738: ARRAY
47739: PUSH
47740: LD_INT 1
47742: ARRAY
47743: PPUSH
47744: LD_VAR 0 12
47748: PUSH
47749: LD_VAR 0 7
47753: ARRAY
47754: PUSH
47755: LD_INT 2
47757: ARRAY
47758: PPUSH
47759: CALL_OW 351
47763: OR
47764: IFFALSE 47770
// exit ;
47766: POP
47767: POP
47768: GO 48062
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47770: LD_ADDR_VAR 0 8
47774: PUSH
47775: LD_VAR 0 12
47779: PUSH
47780: LD_VAR 0 7
47784: ARRAY
47785: PUSH
47786: LD_INT 1
47788: ARRAY
47789: PPUSH
47790: LD_VAR 0 12
47794: PUSH
47795: LD_VAR 0 7
47799: ARRAY
47800: PUSH
47801: LD_INT 2
47803: ARRAY
47804: PPUSH
47805: CALL_OW 546
47809: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47810: LD_VAR 0 8
47814: PUSH
47815: LD_INT 1
47817: ARRAY
47818: PUSH
47819: LD_VAR 0 8
47823: PUSH
47824: LD_INT 2
47826: ARRAY
47827: PUSH
47828: LD_VAR 0 13
47832: PUSH
47833: LD_INT 2
47835: PLUS
47836: GREATER
47837: OR
47838: PUSH
47839: LD_VAR 0 8
47843: PUSH
47844: LD_INT 2
47846: ARRAY
47847: PUSH
47848: LD_VAR 0 13
47852: PUSH
47853: LD_INT 2
47855: MINUS
47856: LESS
47857: OR
47858: PUSH
47859: LD_VAR 0 8
47863: PUSH
47864: LD_INT 3
47866: ARRAY
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 8
47873: PUSH
47874: LD_INT 9
47876: PUSH
47877: LD_INT 10
47879: PUSH
47880: LD_INT 11
47882: PUSH
47883: LD_INT 12
47885: PUSH
47886: LD_INT 13
47888: PUSH
47889: LD_INT 16
47891: PUSH
47892: LD_INT 17
47894: PUSH
47895: LD_INT 18
47897: PUSH
47898: LD_INT 19
47900: PUSH
47901: LD_INT 20
47903: PUSH
47904: LD_INT 21
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: IN
47922: NOT
47923: OR
47924: PUSH
47925: LD_VAR 0 8
47929: PUSH
47930: LD_INT 5
47932: ARRAY
47933: NOT
47934: OR
47935: PUSH
47936: LD_VAR 0 8
47940: PUSH
47941: LD_INT 6
47943: ARRAY
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 7
47953: PUSH
47954: LD_INT 9
47956: PUSH
47957: LD_INT 10
47959: PUSH
47960: LD_INT 11
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: IN
47971: NOT
47972: OR
47973: IFFALSE 47979
// exit ;
47975: POP
47976: POP
47977: GO 48062
// end ;
47979: GO 47650
47981: POP
47982: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47983: LD_VAR 0 9
47987: PPUSH
47988: LD_VAR 0 3
47992: PPUSH
47993: LD_VAR 0 4
47997: PPUSH
47998: LD_INT 20
48000: PPUSH
48001: CALL 40008 0 4
48005: PUSH
48006: LD_INT 4
48008: ARRAY
48009: IFFALSE 48013
// exit ;
48011: GO 48062
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48013: LD_VAR 0 2
48017: PUSH
48018: LD_INT 29
48020: PUSH
48021: LD_INT 30
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: IN
48028: PUSH
48029: LD_VAR 0 3
48033: PPUSH
48034: LD_VAR 0 4
48038: PPUSH
48039: LD_VAR 0 9
48043: PPUSH
48044: CALL_OW 440
48048: NOT
48049: AND
48050: IFFALSE 48054
// exit ;
48052: GO 48062
// result := true ;
48054: LD_ADDR_VAR 0 6
48058: PUSH
48059: LD_INT 1
48061: ST_TO_ADDR
// end ;
48062: LD_VAR 0 6
48066: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48067: LD_INT 0
48069: PPUSH
48070: PPUSH
48071: PPUSH
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
48080: PPUSH
48081: PPUSH
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
48092: PPUSH
48093: PPUSH
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
48106: PPUSH
48107: PPUSH
48108: PPUSH
48109: PPUSH
48110: PPUSH
48111: PPUSH
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
48117: PPUSH
48118: PPUSH
48119: PPUSH
48120: PPUSH
48121: PPUSH
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
48126: PPUSH
// result = [ ] ;
48127: LD_ADDR_VAR 0 7
48131: PUSH
48132: EMPTY
48133: ST_TO_ADDR
// temp_list = [ ] ;
48134: LD_ADDR_VAR 0 9
48138: PUSH
48139: EMPTY
48140: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48141: LD_VAR 0 4
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: LD_INT 4
48160: PUSH
48161: LD_INT 5
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: IN
48172: NOT
48173: PUSH
48174: LD_VAR 0 1
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: IN
48189: PUSH
48190: LD_VAR 0 5
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: LD_INT 3
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: IN
48209: NOT
48210: AND
48211: OR
48212: IFFALSE 48216
// exit ;
48214: GO 66607
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48216: LD_VAR 0 1
48220: PUSH
48221: LD_INT 6
48223: PUSH
48224: LD_INT 7
48226: PUSH
48227: LD_INT 8
48229: PUSH
48230: LD_INT 13
48232: PUSH
48233: LD_INT 12
48235: PUSH
48236: LD_INT 15
48238: PUSH
48239: LD_INT 11
48241: PUSH
48242: LD_INT 14
48244: PUSH
48245: LD_INT 10
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: IN
48259: IFFALSE 48269
// btype = b_lab ;
48261: LD_ADDR_VAR 0 1
48265: PUSH
48266: LD_INT 6
48268: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48269: LD_VAR 0 6
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: LIST
48287: IN
48288: NOT
48289: PUSH
48290: LD_VAR 0 1
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: LD_INT 6
48309: PUSH
48310: LD_INT 36
48312: PUSH
48313: LD_INT 4
48315: PUSH
48316: LD_INT 5
48318: PUSH
48319: LD_INT 31
48321: PUSH
48322: LD_INT 32
48324: PUSH
48325: LD_INT 33
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: IN
48341: NOT
48342: PUSH
48343: LD_VAR 0 6
48347: PUSH
48348: LD_INT 1
48350: EQUAL
48351: AND
48352: OR
48353: PUSH
48354: LD_VAR 0 1
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: IN
48369: NOT
48370: PUSH
48371: LD_VAR 0 6
48375: PUSH
48376: LD_INT 2
48378: EQUAL
48379: AND
48380: OR
48381: IFFALSE 48391
// mode = 0 ;
48383: LD_ADDR_VAR 0 6
48387: PUSH
48388: LD_INT 0
48390: ST_TO_ADDR
// case mode of 0 :
48391: LD_VAR 0 6
48395: PUSH
48396: LD_INT 0
48398: DOUBLE
48399: EQUAL
48400: IFTRUE 48404
48402: GO 59857
48404: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48405: LD_ADDR_VAR 0 11
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48598: LD_ADDR_VAR 0 12
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 3
48755: NEG
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48794: LD_ADDR_VAR 0 13
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 3
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: LD_INT 3
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48993: LD_ADDR_VAR 0 14
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49189: LD_ADDR_VAR 0 15
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 3
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 3
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49382: LD_ADDR_VAR 0 16
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49575: LD_ADDR_VAR 0 17
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49805: LD_ADDR_VAR 0 18
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50035: LD_ADDR_VAR 0 19
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50265: LD_ADDR_VAR 0 20
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50495: LD_ADDR_VAR 0 21
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50725: LD_ADDR_VAR 0 22
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50955: LD_ADDR_VAR 0 23
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 3
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51235: LD_ADDR_VAR 0 24
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51511: LD_ADDR_VAR 0 25
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51785: LD_ADDR_VAR 0 26
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52061: LD_ADDR_VAR 0 27
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52341: LD_ADDR_VAR 0 28
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: NEG
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52623: LD_ADDR_VAR 0 29
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52902: LD_ADDR_VAR 0 30
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 3
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53180: LD_ADDR_VAR 0 31
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 3
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53458: LD_ADDR_VAR 0 32
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 3
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53736: LD_ADDR_VAR 0 33
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 3
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54015: LD_ADDR_VAR 0 34
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54295: LD_ADDR_VAR 0 35
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54407: LD_ADDR_VAR 0 36
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54519: LD_ADDR_VAR 0 37
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54631: LD_ADDR_VAR 0 38
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54743: LD_ADDR_VAR 0 39
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54855: LD_ADDR_VAR 0 40
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54967: LD_ADDR_VAR 0 41
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55317: LD_ADDR_VAR 0 42
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 3
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 3
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 3
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 3
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 3
55614: NEG
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 3
55626: NEG
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55667: LD_ADDR_VAR 0 43
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 3
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 3
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: NEG
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56015: LD_ADDR_VAR 0 44
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: LD_INT 3
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: NEG
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56365: LD_ADDR_VAR 0 45
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 3
56674: NEG
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56715: LD_ADDR_VAR 0 46
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 3
57011: NEG
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57063: LD_ADDR_VAR 0 47
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57214: LD_ADDR_VAR 0 48
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57361: LD_ADDR_VAR 0 49
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57505: LD_ADDR_VAR 0 50
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57649: LD_ADDR_VAR 0 51
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57796: LD_ADDR_VAR 0 52
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57947: LD_ADDR_VAR 0 53
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58177: LD_ADDR_VAR 0 54
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58407: LD_ADDR_VAR 0 55
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58637: LD_ADDR_VAR 0 56
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58867: LD_ADDR_VAR 0 57
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 2
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 2
59066: NEG
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59097: LD_ADDR_VAR 0 58
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59327: LD_ADDR_VAR 0 59
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59415: LD_ADDR_VAR 0 60
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59503: LD_ADDR_VAR 0 61
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59591: LD_ADDR_VAR 0 62
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59679: LD_ADDR_VAR 0 63
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59767: LD_ADDR_VAR 0 64
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// end ; 1 :
59855: GO 65752
59857: LD_INT 1
59859: DOUBLE
59860: EQUAL
59861: IFTRUE 59865
59863: GO 62488
59865: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59866: LD_ADDR_VAR 0 11
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 3
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: LIST
59909: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59910: LD_ADDR_VAR 0 12
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: LIST
59950: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59951: LD_ADDR_VAR 0 13
59955: PUSH
59956: LD_INT 3
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 3
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: LIST
59990: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59991: LD_ADDR_VAR 0 14
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 3
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: LD_INT 3
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60032: LD_ADDR_VAR 0 15
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: LIST
60075: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60076: LD_ADDR_VAR 0 16
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: LD_INT 3
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60122: LD_ADDR_VAR 0 17
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 3
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60166: LD_ADDR_VAR 0 18
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60207: LD_ADDR_VAR 0 19
60211: PUSH
60212: LD_INT 3
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: LIST
60246: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60247: LD_ADDR_VAR 0 20
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60288: LD_ADDR_VAR 0 21
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: LIST
60331: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60332: LD_ADDR_VAR 0 22
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60378: LD_ADDR_VAR 0 23
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 4
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60422: LD_ADDR_VAR 0 24
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 4
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60463: LD_ADDR_VAR 0 25
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: LD_INT 3
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 4
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: LD_INT 4
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60503: LD_ADDR_VAR 0 26
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 4
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60544: LD_ADDR_VAR 0 27
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 4
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60588: LD_ADDR_VAR 0 28
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: LD_INT 3
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: LD_INT 4
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 4
60619: NEG
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60634: LD_ADDR_VAR 0 29
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 3
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 4
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 4
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 5
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 5
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 4
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 6
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 6
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 5
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60789: LD_ADDR_VAR 0 30
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 3
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 4
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 4
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 5
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 5
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 5
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 6
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 6
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60932: LD_ADDR_VAR 0 31
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 4
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 5
60999: PUSH
61000: LD_INT 4
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 5
61009: PUSH
61010: LD_INT 5
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 4
61019: PUSH
61020: LD_INT 5
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 6
61029: PUSH
61030: LD_INT 5
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 6
61039: PUSH
61040: LD_INT 6
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 5
61049: PUSH
61050: LD_INT 6
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61071: LD_ADDR_VAR 0 32
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 3
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 3
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 2
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: LD_INT 4
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 4
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 5
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: LD_INT 5
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 4
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 6
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 6
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: LD_INT 5
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61214: LD_ADDR_VAR 0 33
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 3
61232: NEG
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 4
61266: NEG
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 4
61277: NEG
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 4
61289: NEG
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 5
61300: NEG
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 5
61311: NEG
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 5
61323: NEG
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 6
61334: NEG
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 6
61345: NEG
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61369: LD_ADDR_VAR 0 34
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: NEG
61389: PUSH
61390: LD_INT 2
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 3
61400: NEG
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: NEG
61413: PUSH
61414: LD_INT 4
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 4
61424: NEG
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 4
61436: NEG
61437: PUSH
61438: LD_INT 4
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 4
61448: NEG
61449: PUSH
61450: LD_INT 5
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 5
61460: NEG
61461: PUSH
61462: LD_INT 4
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 5
61472: NEG
61473: PUSH
61474: LD_INT 5
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 5
61484: NEG
61485: PUSH
61486: LD_INT 6
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 6
61496: NEG
61497: PUSH
61498: LD_INT 5
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 6
61508: NEG
61509: PUSH
61510: LD_INT 6
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61532: LD_ADDR_VAR 0 41
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61576: LD_ADDR_VAR 0 42
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61617: LD_ADDR_VAR 0 43
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61657: LD_ADDR_VAR 0 44
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: LD_INT 2
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61698: LD_ADDR_VAR 0 45
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: NEG
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: LIST
61741: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61742: LD_ADDR_VAR 0 46
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: LIST
61787: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61788: LD_ADDR_VAR 0 47
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: LD_INT 3
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61821: LD_ADDR_VAR 0 48
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61852: LD_ADDR_VAR 0 49
61856: PUSH
61857: LD_INT 3
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 3
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61881: LD_ADDR_VAR 0 50
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61910: LD_ADDR_VAR 0 51
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61941: LD_ADDR_VAR 0 52
61945: PUSH
61946: LD_INT 3
61948: NEG
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 3
61960: NEG
61961: PUSH
61962: LD_INT 2
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61974: LD_ADDR_VAR 0 53
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 3
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: LD_INT 3
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62018: LD_ADDR_VAR 0 54
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: LIST
62058: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62059: LD_ADDR_VAR 0 55
62063: PUSH
62064: LD_INT 3
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 3
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62099: LD_ADDR_VAR 0 56
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62140: LD_ADDR_VAR 0 57
62144: PUSH
62145: LD_INT 2
62147: NEG
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62184: LD_ADDR_VAR 0 58
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: LD_INT 3
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 3
62203: NEG
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 3
62215: NEG
62216: PUSH
62217: LD_INT 3
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62230: LD_ADDR_VAR 0 59
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 2
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62274: LD_ADDR_VAR 0 60
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 2
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62315: LD_ADDR_VAR 0 61
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 2
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62355: LD_ADDR_VAR 0 62
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62396: LD_ADDR_VAR 0 63
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62440: LD_ADDR_VAR 0 64
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 2
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: LIST
62485: ST_TO_ADDR
// end ; 2 :
62486: GO 65752
62488: LD_INT 2
62490: DOUBLE
62491: EQUAL
62492: IFTRUE 62496
62494: GO 65751
62496: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62497: LD_ADDR_VAR 0 29
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 5
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 5
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 4
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 3
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: LD_INT 2
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 5
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 3
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 4
62617: PUSH
62618: LD_INT 3
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 4
62627: PUSH
62628: LD_INT 4
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 3
62637: PUSH
62638: LD_INT 4
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: LD_INT 3
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 4
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 4
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 4
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 3
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 4
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 5
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: LD_INT 5
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: LD_INT 4
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: LD_INT 5
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: LD_INT 3
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 3
62780: NEG
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 3
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 3
62825: NEG
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 4
62836: NEG
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 4
62847: NEG
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 4
62859: NEG
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 4
62882: NEG
62883: PUSH
62884: LD_INT 4
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 4
62894: NEG
62895: PUSH
62896: LD_INT 5
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: NEG
62907: PUSH
62908: LD_INT 4
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 4
62930: NEG
62931: PUSH
62932: LD_INT 3
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 5
62942: NEG
62943: PUSH
62944: LD_INT 4
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 5
62954: NEG
62955: PUSH
62956: LD_INT 5
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: LD_INT 5
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 5
62978: NEG
62979: PUSH
62980: LD_INT 3
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63035: LD_ADDR_VAR 0 30
63039: PUSH
63040: LD_INT 4
63042: PUSH
63043: LD_INT 4
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 4
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 5
63062: PUSH
63063: LD_INT 4
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 5
63072: PUSH
63073: LD_INT 5
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 4
63082: PUSH
63083: LD_INT 5
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 3
63092: PUSH
63093: LD_INT 4
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 3
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 5
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 3
63122: PUSH
63123: LD_INT 5
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 3
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: LD_INT 4
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 4
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 4
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 4
63225: NEG
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 4
63236: NEG
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 3
63248: NEG
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 3
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 4
63270: NEG
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 5
63281: NEG
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 5
63292: NEG
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 5
63304: NEG
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: NEG
63340: PUSH
63341: LD_INT 4
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: LD_INT 2
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 3
63375: NEG
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 4
63387: NEG
63388: PUSH
63389: LD_INT 3
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 4
63399: NEG
63400: PUSH
63401: LD_INT 4
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 4
63423: NEG
63424: PUSH
63425: LD_INT 2
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: LD_INT 4
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 5
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 4
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 3
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: LD_INT 3
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 4
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: LD_INT 5
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: LD_INT 3
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: LD_INT 5
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63582: LD_ADDR_VAR 0 31
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 4
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: LD_INT 4
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: PUSH
63620: LD_INT 5
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: LD_INT 5
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: LD_INT 4
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: LD_INT 3
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: LD_INT 5
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 3
63682: NEG
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 3
63693: NEG
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 3
63727: NEG
63728: PUSH
63729: LD_INT 1
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 4
63738: NEG
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 4
63749: NEG
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 4
63761: NEG
63762: PUSH
63763: LD_INT 2
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: NEG
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 4
63784: NEG
63785: PUSH
63786: LD_INT 4
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 4
63796: NEG
63797: PUSH
63798: LD_INT 5
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 3
63808: NEG
63809: PUSH
63810: LD_INT 4
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 3
63820: NEG
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 4
63832: NEG
63833: PUSH
63834: LD_INT 3
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 5
63844: NEG
63845: PUSH
63846: LD_INT 4
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 5
63856: NEG
63857: PUSH
63858: LD_INT 5
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: LD_INT 5
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 5
63880: NEG
63881: PUSH
63882: LD_INT 3
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 3
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 4
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 3
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 2
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: LD_INT 3
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: LD_INT 4
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 2
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: LD_INT 4
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 4
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 4
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 5
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 5
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 4
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 3
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 3
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 3
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 5
64077: PUSH
64078: LD_INT 2
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64132: LD_ADDR_VAR 0 32
64136: PUSH
64137: LD_INT 4
64139: NEG
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 4
64150: NEG
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 4
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 5
64195: NEG
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 5
64206: NEG
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 5
64218: NEG
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 3
64230: NEG
64231: PUSH
64232: LD_INT 2
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 3
64241: NEG
64242: PUSH
64243: LD_INT 3
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 3
64253: NEG
64254: PUSH
64255: LD_INT 4
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 2
64265: NEG
64266: PUSH
64267: LD_INT 3
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 2
64277: NEG
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 3
64289: NEG
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 4
64301: NEG
64302: PUSH
64303: LD_INT 3
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 4
64313: NEG
64314: PUSH
64315: LD_INT 4
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: LD_INT 4
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 4
64337: NEG
64338: PUSH
64339: LD_INT 2
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 4
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 5
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 4
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: LD_INT 3
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 3
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: LD_INT 4
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: LD_INT 5
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: PUSH
64429: LD_INT 3
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: NEG
64440: PUSH
64441: LD_INT 5
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 3
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 3
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 4
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 4
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 3
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: PUSH
64524: LD_INT 2
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 4
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 4
64544: PUSH
64545: LD_INT 4
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 4
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 5
64564: PUSH
64565: LD_INT 4
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 5
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 4
64584: PUSH
64585: LD_INT 5
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 3
64594: PUSH
64595: LD_INT 4
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 5
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: LD_INT 5
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64679: LD_ADDR_VAR 0 33
64683: PUSH
64684: LD_INT 4
64686: NEG
64687: PUSH
64688: LD_INT 4
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 4
64698: NEG
64699: PUSH
64700: LD_INT 5
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: NEG
64711: PUSH
64712: LD_INT 4
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 4
64734: NEG
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 5
64746: NEG
64747: PUSH
64748: LD_INT 4
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 5
64758: NEG
64759: PUSH
64760: LD_INT 5
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 3
64770: NEG
64771: PUSH
64772: LD_INT 5
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 5
64782: NEG
64783: PUSH
64784: LD_INT 3
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 3
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: LD_INT 4
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: LD_INT 3
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: LD_INT 3
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: LD_INT 4
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 2
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: NEG
64885: PUSH
64886: LD_INT 4
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 4
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 4
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 5
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 5
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 4
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: PUSH
64969: LD_INT 2
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 5
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 3
64989: PUSH
64990: LD_INT 3
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 3
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 4
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 4
65019: PUSH
65020: LD_INT 4
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 3
65029: PUSH
65030: LD_INT 4
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 2
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 4
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: LD_INT 4
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: LD_INT 4
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: LD_INT 5
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 5
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: LD_INT 4
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 3
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: LD_INT 5
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: LD_INT 3
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65217: LD_ADDR_VAR 0 34
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 4
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: LD_INT 5
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: LD_INT 4
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 4
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: LD_INT 5
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 2
65314: NEG
65315: PUSH
65316: LD_INT 5
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 3
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 3
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 4
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 4
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 2
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 4
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 4
65419: PUSH
65420: LD_INT 4
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 4
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 5
65439: PUSH
65440: LD_INT 4
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 5
65449: PUSH
65450: LD_INT 5
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 4
65459: PUSH
65460: LD_INT 5
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: PUSH
65470: LD_INT 4
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 3
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 5
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 3
65499: PUSH
65500: LD_INT 5
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 3
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: LD_INT 3
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: LD_INT 4
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: LD_INT 4
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: PUSH
65561: LD_INT 3
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: LD_INT 2
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 2
65581: PUSH
65582: LD_INT 4
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 2
65591: NEG
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 4
65602: NEG
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 4
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 3
65625: NEG
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 3
65636: NEG
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 4
65647: NEG
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 5
65658: NEG
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 5
65669: NEG
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 5
65681: NEG
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: NEG
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: ST_TO_ADDR
// end ; end ;
65749: GO 65752
65751: POP
// case btype of b_depot , b_warehouse :
65752: LD_VAR 0 1
65756: PUSH
65757: LD_INT 0
65759: DOUBLE
65760: EQUAL
65761: IFTRUE 65771
65763: LD_INT 1
65765: DOUBLE
65766: EQUAL
65767: IFTRUE 65771
65769: GO 65972
65771: POP
// case nation of nation_american :
65772: LD_VAR 0 5
65776: PUSH
65777: LD_INT 1
65779: DOUBLE
65780: EQUAL
65781: IFTRUE 65785
65783: GO 65841
65785: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65786: LD_ADDR_VAR 0 9
65790: PUSH
65791: LD_VAR 0 11
65795: PUSH
65796: LD_VAR 0 12
65800: PUSH
65801: LD_VAR 0 13
65805: PUSH
65806: LD_VAR 0 14
65810: PUSH
65811: LD_VAR 0 15
65815: PUSH
65816: LD_VAR 0 16
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: PUSH
65829: LD_VAR 0 4
65833: PUSH
65834: LD_INT 1
65836: PLUS
65837: ARRAY
65838: ST_TO_ADDR
65839: GO 65970
65841: LD_INT 2
65843: DOUBLE
65844: EQUAL
65845: IFTRUE 65849
65847: GO 65905
65849: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65850: LD_ADDR_VAR 0 9
65854: PUSH
65855: LD_VAR 0 17
65859: PUSH
65860: LD_VAR 0 18
65864: PUSH
65865: LD_VAR 0 19
65869: PUSH
65870: LD_VAR 0 20
65874: PUSH
65875: LD_VAR 0 21
65879: PUSH
65880: LD_VAR 0 22
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: PUSH
65893: LD_VAR 0 4
65897: PUSH
65898: LD_INT 1
65900: PLUS
65901: ARRAY
65902: ST_TO_ADDR
65903: GO 65970
65905: LD_INT 3
65907: DOUBLE
65908: EQUAL
65909: IFTRUE 65913
65911: GO 65969
65913: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65914: LD_ADDR_VAR 0 9
65918: PUSH
65919: LD_VAR 0 23
65923: PUSH
65924: LD_VAR 0 24
65928: PUSH
65929: LD_VAR 0 25
65933: PUSH
65934: LD_VAR 0 26
65938: PUSH
65939: LD_VAR 0 27
65943: PUSH
65944: LD_VAR 0 28
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: PUSH
65957: LD_VAR 0 4
65961: PUSH
65962: LD_INT 1
65964: PLUS
65965: ARRAY
65966: ST_TO_ADDR
65967: GO 65970
65969: POP
65970: GO 66525
65972: LD_INT 2
65974: DOUBLE
65975: EQUAL
65976: IFTRUE 65986
65978: LD_INT 3
65980: DOUBLE
65981: EQUAL
65982: IFTRUE 65986
65984: GO 66042
65986: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65987: LD_ADDR_VAR 0 9
65991: PUSH
65992: LD_VAR 0 29
65996: PUSH
65997: LD_VAR 0 30
66001: PUSH
66002: LD_VAR 0 31
66006: PUSH
66007: LD_VAR 0 32
66011: PUSH
66012: LD_VAR 0 33
66016: PUSH
66017: LD_VAR 0 34
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: PUSH
66030: LD_VAR 0 4
66034: PUSH
66035: LD_INT 1
66037: PLUS
66038: ARRAY
66039: ST_TO_ADDR
66040: GO 66525
66042: LD_INT 16
66044: DOUBLE
66045: EQUAL
66046: IFTRUE 66104
66048: LD_INT 17
66050: DOUBLE
66051: EQUAL
66052: IFTRUE 66104
66054: LD_INT 18
66056: DOUBLE
66057: EQUAL
66058: IFTRUE 66104
66060: LD_INT 19
66062: DOUBLE
66063: EQUAL
66064: IFTRUE 66104
66066: LD_INT 22
66068: DOUBLE
66069: EQUAL
66070: IFTRUE 66104
66072: LD_INT 20
66074: DOUBLE
66075: EQUAL
66076: IFTRUE 66104
66078: LD_INT 21
66080: DOUBLE
66081: EQUAL
66082: IFTRUE 66104
66084: LD_INT 23
66086: DOUBLE
66087: EQUAL
66088: IFTRUE 66104
66090: LD_INT 24
66092: DOUBLE
66093: EQUAL
66094: IFTRUE 66104
66096: LD_INT 25
66098: DOUBLE
66099: EQUAL
66100: IFTRUE 66104
66102: GO 66160
66104: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66105: LD_ADDR_VAR 0 9
66109: PUSH
66110: LD_VAR 0 35
66114: PUSH
66115: LD_VAR 0 36
66119: PUSH
66120: LD_VAR 0 37
66124: PUSH
66125: LD_VAR 0 38
66129: PUSH
66130: LD_VAR 0 39
66134: PUSH
66135: LD_VAR 0 40
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: PUSH
66148: LD_VAR 0 4
66152: PUSH
66153: LD_INT 1
66155: PLUS
66156: ARRAY
66157: ST_TO_ADDR
66158: GO 66525
66160: LD_INT 6
66162: DOUBLE
66163: EQUAL
66164: IFTRUE 66216
66166: LD_INT 7
66168: DOUBLE
66169: EQUAL
66170: IFTRUE 66216
66172: LD_INT 8
66174: DOUBLE
66175: EQUAL
66176: IFTRUE 66216
66178: LD_INT 13
66180: DOUBLE
66181: EQUAL
66182: IFTRUE 66216
66184: LD_INT 12
66186: DOUBLE
66187: EQUAL
66188: IFTRUE 66216
66190: LD_INT 15
66192: DOUBLE
66193: EQUAL
66194: IFTRUE 66216
66196: LD_INT 11
66198: DOUBLE
66199: EQUAL
66200: IFTRUE 66216
66202: LD_INT 14
66204: DOUBLE
66205: EQUAL
66206: IFTRUE 66216
66208: LD_INT 10
66210: DOUBLE
66211: EQUAL
66212: IFTRUE 66216
66214: GO 66272
66216: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66217: LD_ADDR_VAR 0 9
66221: PUSH
66222: LD_VAR 0 41
66226: PUSH
66227: LD_VAR 0 42
66231: PUSH
66232: LD_VAR 0 43
66236: PUSH
66237: LD_VAR 0 44
66241: PUSH
66242: LD_VAR 0 45
66246: PUSH
66247: LD_VAR 0 46
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: PUSH
66260: LD_VAR 0 4
66264: PUSH
66265: LD_INT 1
66267: PLUS
66268: ARRAY
66269: ST_TO_ADDR
66270: GO 66525
66272: LD_INT 36
66274: DOUBLE
66275: EQUAL
66276: IFTRUE 66280
66278: GO 66336
66280: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66281: LD_ADDR_VAR 0 9
66285: PUSH
66286: LD_VAR 0 47
66290: PUSH
66291: LD_VAR 0 48
66295: PUSH
66296: LD_VAR 0 49
66300: PUSH
66301: LD_VAR 0 50
66305: PUSH
66306: LD_VAR 0 51
66310: PUSH
66311: LD_VAR 0 52
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: PUSH
66324: LD_VAR 0 4
66328: PUSH
66329: LD_INT 1
66331: PLUS
66332: ARRAY
66333: ST_TO_ADDR
66334: GO 66525
66336: LD_INT 4
66338: DOUBLE
66339: EQUAL
66340: IFTRUE 66362
66342: LD_INT 5
66344: DOUBLE
66345: EQUAL
66346: IFTRUE 66362
66348: LD_INT 34
66350: DOUBLE
66351: EQUAL
66352: IFTRUE 66362
66354: LD_INT 37
66356: DOUBLE
66357: EQUAL
66358: IFTRUE 66362
66360: GO 66418
66362: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66363: LD_ADDR_VAR 0 9
66367: PUSH
66368: LD_VAR 0 53
66372: PUSH
66373: LD_VAR 0 54
66377: PUSH
66378: LD_VAR 0 55
66382: PUSH
66383: LD_VAR 0 56
66387: PUSH
66388: LD_VAR 0 57
66392: PUSH
66393: LD_VAR 0 58
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: PUSH
66406: LD_VAR 0 4
66410: PUSH
66411: LD_INT 1
66413: PLUS
66414: ARRAY
66415: ST_TO_ADDR
66416: GO 66525
66418: LD_INT 31
66420: DOUBLE
66421: EQUAL
66422: IFTRUE 66468
66424: LD_INT 32
66426: DOUBLE
66427: EQUAL
66428: IFTRUE 66468
66430: LD_INT 33
66432: DOUBLE
66433: EQUAL
66434: IFTRUE 66468
66436: LD_INT 27
66438: DOUBLE
66439: EQUAL
66440: IFTRUE 66468
66442: LD_INT 26
66444: DOUBLE
66445: EQUAL
66446: IFTRUE 66468
66448: LD_INT 28
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66468
66454: LD_INT 29
66456: DOUBLE
66457: EQUAL
66458: IFTRUE 66468
66460: LD_INT 30
66462: DOUBLE
66463: EQUAL
66464: IFTRUE 66468
66466: GO 66524
66468: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66469: LD_ADDR_VAR 0 9
66473: PUSH
66474: LD_VAR 0 59
66478: PUSH
66479: LD_VAR 0 60
66483: PUSH
66484: LD_VAR 0 61
66488: PUSH
66489: LD_VAR 0 62
66493: PUSH
66494: LD_VAR 0 63
66498: PUSH
66499: LD_VAR 0 64
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: PUSH
66512: LD_VAR 0 4
66516: PUSH
66517: LD_INT 1
66519: PLUS
66520: ARRAY
66521: ST_TO_ADDR
66522: GO 66525
66524: POP
// temp_list2 = [ ] ;
66525: LD_ADDR_VAR 0 10
66529: PUSH
66530: EMPTY
66531: ST_TO_ADDR
// for i in temp_list do
66532: LD_ADDR_VAR 0 8
66536: PUSH
66537: LD_VAR 0 9
66541: PUSH
66542: FOR_IN
66543: IFFALSE 66595
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66545: LD_ADDR_VAR 0 10
66549: PUSH
66550: LD_VAR 0 10
66554: PUSH
66555: LD_VAR 0 8
66559: PUSH
66560: LD_INT 1
66562: ARRAY
66563: PUSH
66564: LD_VAR 0 2
66568: PLUS
66569: PUSH
66570: LD_VAR 0 8
66574: PUSH
66575: LD_INT 2
66577: ARRAY
66578: PUSH
66579: LD_VAR 0 3
66583: PLUS
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: ADD
66592: ST_TO_ADDR
66593: GO 66542
66595: POP
66596: POP
// result = temp_list2 ;
66597: LD_ADDR_VAR 0 7
66601: PUSH
66602: LD_VAR 0 10
66606: ST_TO_ADDR
// end ;
66607: LD_VAR 0 7
66611: RET
// export function EnemyInRange ( unit , dist ) ; begin
66612: LD_INT 0
66614: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66615: LD_ADDR_VAR 0 3
66619: PUSH
66620: LD_VAR 0 1
66624: PPUSH
66625: CALL_OW 255
66629: PPUSH
66630: LD_VAR 0 1
66634: PPUSH
66635: CALL_OW 250
66639: PPUSH
66640: LD_VAR 0 1
66644: PPUSH
66645: CALL_OW 251
66649: PPUSH
66650: LD_VAR 0 2
66654: PPUSH
66655: CALL 40008 0 4
66659: PUSH
66660: LD_INT 4
66662: ARRAY
66663: ST_TO_ADDR
// end ;
66664: LD_VAR 0 3
66668: RET
// export function PlayerSeeMe ( unit ) ; begin
66669: LD_INT 0
66671: PPUSH
// result := See ( your_side , unit ) ;
66672: LD_ADDR_VAR 0 2
66676: PUSH
66677: LD_OWVAR 2
66681: PPUSH
66682: LD_VAR 0 1
66686: PPUSH
66687: CALL_OW 292
66691: ST_TO_ADDR
// end ;
66692: LD_VAR 0 2
66696: RET
// export function ReverseDir ( unit ) ; begin
66697: LD_INT 0
66699: PPUSH
// if not unit then
66700: LD_VAR 0 1
66704: NOT
66705: IFFALSE 66709
// exit ;
66707: GO 66732
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66709: LD_ADDR_VAR 0 2
66713: PUSH
66714: LD_VAR 0 1
66718: PPUSH
66719: CALL_OW 254
66723: PUSH
66724: LD_INT 3
66726: PLUS
66727: PUSH
66728: LD_INT 6
66730: MOD
66731: ST_TO_ADDR
// end ;
66732: LD_VAR 0 2
66736: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66737: LD_INT 0
66739: PPUSH
66740: PPUSH
66741: PPUSH
66742: PPUSH
66743: PPUSH
// if not hexes then
66744: LD_VAR 0 2
66748: NOT
66749: IFFALSE 66753
// exit ;
66751: GO 66901
// dist := 9999 ;
66753: LD_ADDR_VAR 0 5
66757: PUSH
66758: LD_INT 9999
66760: ST_TO_ADDR
// for i = 1 to hexes do
66761: LD_ADDR_VAR 0 4
66765: PUSH
66766: DOUBLE
66767: LD_INT 1
66769: DEC
66770: ST_TO_ADDR
66771: LD_VAR 0 2
66775: PUSH
66776: FOR_TO
66777: IFFALSE 66889
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66779: LD_VAR 0 1
66783: PPUSH
66784: LD_VAR 0 2
66788: PUSH
66789: LD_VAR 0 4
66793: ARRAY
66794: PUSH
66795: LD_INT 1
66797: ARRAY
66798: PPUSH
66799: LD_VAR 0 2
66803: PUSH
66804: LD_VAR 0 4
66808: ARRAY
66809: PUSH
66810: LD_INT 2
66812: ARRAY
66813: PPUSH
66814: CALL_OW 297
66818: PUSH
66819: LD_VAR 0 5
66823: LESS
66824: IFFALSE 66887
// begin hex := hexes [ i ] ;
66826: LD_ADDR_VAR 0 7
66830: PUSH
66831: LD_VAR 0 2
66835: PUSH
66836: LD_VAR 0 4
66840: ARRAY
66841: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66842: LD_ADDR_VAR 0 5
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: LD_VAR 0 2
66856: PUSH
66857: LD_VAR 0 4
66861: ARRAY
66862: PUSH
66863: LD_INT 1
66865: ARRAY
66866: PPUSH
66867: LD_VAR 0 2
66871: PUSH
66872: LD_VAR 0 4
66876: ARRAY
66877: PUSH
66878: LD_INT 2
66880: ARRAY
66881: PPUSH
66882: CALL_OW 297
66886: ST_TO_ADDR
// end ; end ;
66887: GO 66776
66889: POP
66890: POP
// result := hex ;
66891: LD_ADDR_VAR 0 3
66895: PUSH
66896: LD_VAR 0 7
66900: ST_TO_ADDR
// end ;
66901: LD_VAR 0 3
66905: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66906: LD_INT 0
66908: PPUSH
66909: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66910: LD_VAR 0 1
66914: NOT
66915: PUSH
66916: LD_VAR 0 1
66920: PUSH
66921: LD_INT 21
66923: PUSH
66924: LD_INT 2
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 23
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PPUSH
66945: CALL_OW 69
66949: IN
66950: NOT
66951: OR
66952: IFFALSE 66956
// exit ;
66954: GO 67003
// for i = 1 to 3 do
66956: LD_ADDR_VAR 0 3
66960: PUSH
66961: DOUBLE
66962: LD_INT 1
66964: DEC
66965: ST_TO_ADDR
66966: LD_INT 3
66968: PUSH
66969: FOR_TO
66970: IFFALSE 67001
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66972: LD_VAR 0 1
66976: PPUSH
66977: CALL_OW 250
66981: PPUSH
66982: LD_VAR 0 1
66986: PPUSH
66987: CALL_OW 251
66991: PPUSH
66992: LD_INT 1
66994: PPUSH
66995: CALL_OW 453
66999: GO 66969
67001: POP
67002: POP
// end ;
67003: LD_VAR 0 2
67007: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67008: LD_INT 0
67010: PPUSH
67011: PPUSH
67012: PPUSH
67013: PPUSH
67014: PPUSH
67015: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67016: LD_VAR 0 1
67020: NOT
67021: PUSH
67022: LD_VAR 0 2
67026: NOT
67027: OR
67028: PUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: CALL_OW 314
67038: OR
67039: IFFALSE 67043
// exit ;
67041: GO 67484
// x := GetX ( enemy_unit ) ;
67043: LD_ADDR_VAR 0 7
67047: PUSH
67048: LD_VAR 0 2
67052: PPUSH
67053: CALL_OW 250
67057: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67058: LD_ADDR_VAR 0 8
67062: PUSH
67063: LD_VAR 0 2
67067: PPUSH
67068: CALL_OW 251
67072: ST_TO_ADDR
// if not x or not y then
67073: LD_VAR 0 7
67077: NOT
67078: PUSH
67079: LD_VAR 0 8
67083: NOT
67084: OR
67085: IFFALSE 67089
// exit ;
67087: GO 67484
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67089: LD_ADDR_VAR 0 6
67093: PUSH
67094: LD_VAR 0 7
67098: PPUSH
67099: LD_INT 0
67101: PPUSH
67102: LD_INT 4
67104: PPUSH
67105: CALL_OW 272
67109: PUSH
67110: LD_VAR 0 8
67114: PPUSH
67115: LD_INT 0
67117: PPUSH
67118: LD_INT 4
67120: PPUSH
67121: CALL_OW 273
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_VAR 0 7
67134: PPUSH
67135: LD_INT 1
67137: PPUSH
67138: LD_INT 4
67140: PPUSH
67141: CALL_OW 272
67145: PUSH
67146: LD_VAR 0 8
67150: PPUSH
67151: LD_INT 1
67153: PPUSH
67154: LD_INT 4
67156: PPUSH
67157: CALL_OW 273
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_VAR 0 7
67170: PPUSH
67171: LD_INT 2
67173: PPUSH
67174: LD_INT 4
67176: PPUSH
67177: CALL_OW 272
67181: PUSH
67182: LD_VAR 0 8
67186: PPUSH
67187: LD_INT 2
67189: PPUSH
67190: LD_INT 4
67192: PPUSH
67193: CALL_OW 273
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_VAR 0 7
67206: PPUSH
67207: LD_INT 3
67209: PPUSH
67210: LD_INT 4
67212: PPUSH
67213: CALL_OW 272
67217: PUSH
67218: LD_VAR 0 8
67222: PPUSH
67223: LD_INT 3
67225: PPUSH
67226: LD_INT 4
67228: PPUSH
67229: CALL_OW 273
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_VAR 0 7
67242: PPUSH
67243: LD_INT 4
67245: PPUSH
67246: LD_INT 4
67248: PPUSH
67249: CALL_OW 272
67253: PUSH
67254: LD_VAR 0 8
67258: PPUSH
67259: LD_INT 4
67261: PPUSH
67262: LD_INT 4
67264: PPUSH
67265: CALL_OW 273
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_VAR 0 7
67278: PPUSH
67279: LD_INT 5
67281: PPUSH
67282: LD_INT 4
67284: PPUSH
67285: CALL_OW 272
67289: PUSH
67290: LD_VAR 0 8
67294: PPUSH
67295: LD_INT 5
67297: PPUSH
67298: LD_INT 4
67300: PPUSH
67301: CALL_OW 273
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: ST_TO_ADDR
// for i = tmp downto 1 do
67318: LD_ADDR_VAR 0 4
67322: PUSH
67323: DOUBLE
67324: LD_VAR 0 6
67328: INC
67329: ST_TO_ADDR
67330: LD_INT 1
67332: PUSH
67333: FOR_DOWNTO
67334: IFFALSE 67435
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67336: LD_VAR 0 6
67340: PUSH
67341: LD_VAR 0 4
67345: ARRAY
67346: PUSH
67347: LD_INT 1
67349: ARRAY
67350: PPUSH
67351: LD_VAR 0 6
67355: PUSH
67356: LD_VAR 0 4
67360: ARRAY
67361: PUSH
67362: LD_INT 2
67364: ARRAY
67365: PPUSH
67366: CALL_OW 488
67370: NOT
67371: PUSH
67372: LD_VAR 0 6
67376: PUSH
67377: LD_VAR 0 4
67381: ARRAY
67382: PUSH
67383: LD_INT 1
67385: ARRAY
67386: PPUSH
67387: LD_VAR 0 6
67391: PUSH
67392: LD_VAR 0 4
67396: ARRAY
67397: PUSH
67398: LD_INT 2
67400: ARRAY
67401: PPUSH
67402: CALL_OW 428
67406: PUSH
67407: LD_INT 0
67409: NONEQUAL
67410: OR
67411: IFFALSE 67433
// tmp := Delete ( tmp , i ) ;
67413: LD_ADDR_VAR 0 6
67417: PUSH
67418: LD_VAR 0 6
67422: PPUSH
67423: LD_VAR 0 4
67427: PPUSH
67428: CALL_OW 3
67432: ST_TO_ADDR
67433: GO 67333
67435: POP
67436: POP
// j := GetClosestHex ( unit , tmp ) ;
67437: LD_ADDR_VAR 0 5
67441: PUSH
67442: LD_VAR 0 1
67446: PPUSH
67447: LD_VAR 0 6
67451: PPUSH
67452: CALL 66737 0 2
67456: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67457: LD_VAR 0 1
67461: PPUSH
67462: LD_VAR 0 5
67466: PUSH
67467: LD_INT 1
67469: ARRAY
67470: PPUSH
67471: LD_VAR 0 5
67475: PUSH
67476: LD_INT 2
67478: ARRAY
67479: PPUSH
67480: CALL_OW 111
// end ;
67484: LD_VAR 0 3
67488: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67489: LD_INT 0
67491: PPUSH
67492: PPUSH
67493: PPUSH
// uc_side = 0 ;
67494: LD_ADDR_OWVAR 20
67498: PUSH
67499: LD_INT 0
67501: ST_TO_ADDR
// uc_nation = 0 ;
67502: LD_ADDR_OWVAR 21
67506: PUSH
67507: LD_INT 0
67509: ST_TO_ADDR
// InitHc_All ( ) ;
67510: CALL_OW 584
// InitVc ;
67514: CALL_OW 20
// if mastodonts then
67518: LD_VAR 0 6
67522: IFFALSE 67589
// for i = 1 to mastodonts do
67524: LD_ADDR_VAR 0 11
67528: PUSH
67529: DOUBLE
67530: LD_INT 1
67532: DEC
67533: ST_TO_ADDR
67534: LD_VAR 0 6
67538: PUSH
67539: FOR_TO
67540: IFFALSE 67587
// begin vc_chassis := 31 ;
67542: LD_ADDR_OWVAR 37
67546: PUSH
67547: LD_INT 31
67549: ST_TO_ADDR
// vc_control := control_rider ;
67550: LD_ADDR_OWVAR 38
67554: PUSH
67555: LD_INT 4
67557: ST_TO_ADDR
// animal := CreateVehicle ;
67558: LD_ADDR_VAR 0 12
67562: PUSH
67563: CALL_OW 45
67567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67568: LD_VAR 0 12
67572: PPUSH
67573: LD_VAR 0 8
67577: PPUSH
67578: LD_INT 0
67580: PPUSH
67581: CALL 69777 0 3
// end ;
67585: GO 67539
67587: POP
67588: POP
// if horses then
67589: LD_VAR 0 5
67593: IFFALSE 67660
// for i = 1 to horses do
67595: LD_ADDR_VAR 0 11
67599: PUSH
67600: DOUBLE
67601: LD_INT 1
67603: DEC
67604: ST_TO_ADDR
67605: LD_VAR 0 5
67609: PUSH
67610: FOR_TO
67611: IFFALSE 67658
// begin hc_class := 21 ;
67613: LD_ADDR_OWVAR 28
67617: PUSH
67618: LD_INT 21
67620: ST_TO_ADDR
// hc_gallery :=  ;
67621: LD_ADDR_OWVAR 33
67625: PUSH
67626: LD_STRING 
67628: ST_TO_ADDR
// animal := CreateHuman ;
67629: LD_ADDR_VAR 0 12
67633: PUSH
67634: CALL_OW 44
67638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67639: LD_VAR 0 12
67643: PPUSH
67644: LD_VAR 0 8
67648: PPUSH
67649: LD_INT 0
67651: PPUSH
67652: CALL 69777 0 3
// end ;
67656: GO 67610
67658: POP
67659: POP
// if birds then
67660: LD_VAR 0 1
67664: IFFALSE 67731
// for i = 1 to birds do
67666: LD_ADDR_VAR 0 11
67670: PUSH
67671: DOUBLE
67672: LD_INT 1
67674: DEC
67675: ST_TO_ADDR
67676: LD_VAR 0 1
67680: PUSH
67681: FOR_TO
67682: IFFALSE 67729
// begin hc_class = 18 ;
67684: LD_ADDR_OWVAR 28
67688: PUSH
67689: LD_INT 18
67691: ST_TO_ADDR
// hc_gallery =  ;
67692: LD_ADDR_OWVAR 33
67696: PUSH
67697: LD_STRING 
67699: ST_TO_ADDR
// animal := CreateHuman ;
67700: LD_ADDR_VAR 0 12
67704: PUSH
67705: CALL_OW 44
67709: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67710: LD_VAR 0 12
67714: PPUSH
67715: LD_VAR 0 8
67719: PPUSH
67720: LD_INT 0
67722: PPUSH
67723: CALL 69777 0 3
// end ;
67727: GO 67681
67729: POP
67730: POP
// if tigers then
67731: LD_VAR 0 2
67735: IFFALSE 67819
// for i = 1 to tigers do
67737: LD_ADDR_VAR 0 11
67741: PUSH
67742: DOUBLE
67743: LD_INT 1
67745: DEC
67746: ST_TO_ADDR
67747: LD_VAR 0 2
67751: PUSH
67752: FOR_TO
67753: IFFALSE 67817
// begin hc_class = class_tiger ;
67755: LD_ADDR_OWVAR 28
67759: PUSH
67760: LD_INT 14
67762: ST_TO_ADDR
// hc_gallery =  ;
67763: LD_ADDR_OWVAR 33
67767: PUSH
67768: LD_STRING 
67770: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67771: LD_ADDR_OWVAR 35
67775: PUSH
67776: LD_INT 7
67778: NEG
67779: PPUSH
67780: LD_INT 7
67782: PPUSH
67783: CALL_OW 12
67787: ST_TO_ADDR
// animal := CreateHuman ;
67788: LD_ADDR_VAR 0 12
67792: PUSH
67793: CALL_OW 44
67797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67798: LD_VAR 0 12
67802: PPUSH
67803: LD_VAR 0 8
67807: PPUSH
67808: LD_INT 0
67810: PPUSH
67811: CALL 69777 0 3
// end ;
67815: GO 67752
67817: POP
67818: POP
// if apemans then
67819: LD_VAR 0 3
67823: IFFALSE 67946
// for i = 1 to apemans do
67825: LD_ADDR_VAR 0 11
67829: PUSH
67830: DOUBLE
67831: LD_INT 1
67833: DEC
67834: ST_TO_ADDR
67835: LD_VAR 0 3
67839: PUSH
67840: FOR_TO
67841: IFFALSE 67944
// begin hc_class = class_apeman ;
67843: LD_ADDR_OWVAR 28
67847: PUSH
67848: LD_INT 12
67850: ST_TO_ADDR
// hc_gallery =  ;
67851: LD_ADDR_OWVAR 33
67855: PUSH
67856: LD_STRING 
67858: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67859: LD_ADDR_OWVAR 35
67863: PUSH
67864: LD_INT 2
67866: NEG
67867: PPUSH
67868: LD_INT 2
67870: PPUSH
67871: CALL_OW 12
67875: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67876: LD_ADDR_OWVAR 31
67880: PUSH
67881: LD_INT 1
67883: PPUSH
67884: LD_INT 3
67886: PPUSH
67887: CALL_OW 12
67891: PUSH
67892: LD_INT 1
67894: PPUSH
67895: LD_INT 3
67897: PPUSH
67898: CALL_OW 12
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: ST_TO_ADDR
// animal := CreateHuman ;
67915: LD_ADDR_VAR 0 12
67919: PUSH
67920: CALL_OW 44
67924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67925: LD_VAR 0 12
67929: PPUSH
67930: LD_VAR 0 8
67934: PPUSH
67935: LD_INT 0
67937: PPUSH
67938: CALL 69777 0 3
// end ;
67942: GO 67840
67944: POP
67945: POP
// if enchidnas then
67946: LD_VAR 0 4
67950: IFFALSE 68017
// for i = 1 to enchidnas do
67952: LD_ADDR_VAR 0 11
67956: PUSH
67957: DOUBLE
67958: LD_INT 1
67960: DEC
67961: ST_TO_ADDR
67962: LD_VAR 0 4
67966: PUSH
67967: FOR_TO
67968: IFFALSE 68015
// begin hc_class = 13 ;
67970: LD_ADDR_OWVAR 28
67974: PUSH
67975: LD_INT 13
67977: ST_TO_ADDR
// hc_gallery =  ;
67978: LD_ADDR_OWVAR 33
67982: PUSH
67983: LD_STRING 
67985: ST_TO_ADDR
// animal := CreateHuman ;
67986: LD_ADDR_VAR 0 12
67990: PUSH
67991: CALL_OW 44
67995: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67996: LD_VAR 0 12
68000: PPUSH
68001: LD_VAR 0 8
68005: PPUSH
68006: LD_INT 0
68008: PPUSH
68009: CALL 69777 0 3
// end ;
68013: GO 67967
68015: POP
68016: POP
// if fishes then
68017: LD_VAR 0 7
68021: IFFALSE 68088
// for i = 1 to fishes do
68023: LD_ADDR_VAR 0 11
68027: PUSH
68028: DOUBLE
68029: LD_INT 1
68031: DEC
68032: ST_TO_ADDR
68033: LD_VAR 0 7
68037: PUSH
68038: FOR_TO
68039: IFFALSE 68086
// begin hc_class = 20 ;
68041: LD_ADDR_OWVAR 28
68045: PUSH
68046: LD_INT 20
68048: ST_TO_ADDR
// hc_gallery =  ;
68049: LD_ADDR_OWVAR 33
68053: PUSH
68054: LD_STRING 
68056: ST_TO_ADDR
// animal := CreateHuman ;
68057: LD_ADDR_VAR 0 12
68061: PUSH
68062: CALL_OW 44
68066: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68067: LD_VAR 0 12
68071: PPUSH
68072: LD_VAR 0 9
68076: PPUSH
68077: LD_INT 0
68079: PPUSH
68080: CALL 69777 0 3
// end ;
68084: GO 68038
68086: POP
68087: POP
// end ;
68088: LD_VAR 0 10
68092: RET
// export function WantHeal ( sci , unit ) ; begin
68093: LD_INT 0
68095: PPUSH
// if GetTaskList ( sci ) > 0 then
68096: LD_VAR 0 1
68100: PPUSH
68101: CALL_OW 437
68105: PUSH
68106: LD_INT 0
68108: GREATER
68109: IFFALSE 68179
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68111: LD_VAR 0 1
68115: PPUSH
68116: CALL_OW 437
68120: PUSH
68121: LD_INT 1
68123: ARRAY
68124: PUSH
68125: LD_INT 1
68127: ARRAY
68128: PUSH
68129: LD_STRING l
68131: EQUAL
68132: PUSH
68133: LD_VAR 0 1
68137: PPUSH
68138: CALL_OW 437
68142: PUSH
68143: LD_INT 1
68145: ARRAY
68146: PUSH
68147: LD_INT 4
68149: ARRAY
68150: PUSH
68151: LD_VAR 0 2
68155: EQUAL
68156: AND
68157: IFFALSE 68169
// result := true else
68159: LD_ADDR_VAR 0 3
68163: PUSH
68164: LD_INT 1
68166: ST_TO_ADDR
68167: GO 68177
// result := false ;
68169: LD_ADDR_VAR 0 3
68173: PUSH
68174: LD_INT 0
68176: ST_TO_ADDR
// end else
68177: GO 68187
// result := false ;
68179: LD_ADDR_VAR 0 3
68183: PUSH
68184: LD_INT 0
68186: ST_TO_ADDR
// end ;
68187: LD_VAR 0 3
68191: RET
// export function HealTarget ( sci ) ; begin
68192: LD_INT 0
68194: PPUSH
// if not sci then
68195: LD_VAR 0 1
68199: NOT
68200: IFFALSE 68204
// exit ;
68202: GO 68269
// result := 0 ;
68204: LD_ADDR_VAR 0 2
68208: PUSH
68209: LD_INT 0
68211: ST_TO_ADDR
// if GetTaskList ( sci ) then
68212: LD_VAR 0 1
68216: PPUSH
68217: CALL_OW 437
68221: IFFALSE 68269
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68223: LD_VAR 0 1
68227: PPUSH
68228: CALL_OW 437
68232: PUSH
68233: LD_INT 1
68235: ARRAY
68236: PUSH
68237: LD_INT 1
68239: ARRAY
68240: PUSH
68241: LD_STRING l
68243: EQUAL
68244: IFFALSE 68269
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68246: LD_ADDR_VAR 0 2
68250: PUSH
68251: LD_VAR 0 1
68255: PPUSH
68256: CALL_OW 437
68260: PUSH
68261: LD_INT 1
68263: ARRAY
68264: PUSH
68265: LD_INT 4
68267: ARRAY
68268: ST_TO_ADDR
// end ;
68269: LD_VAR 0 2
68273: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68274: LD_INT 0
68276: PPUSH
68277: PPUSH
68278: PPUSH
68279: PPUSH
// if not base_units then
68280: LD_VAR 0 1
68284: NOT
68285: IFFALSE 68289
// exit ;
68287: GO 68376
// result := false ;
68289: LD_ADDR_VAR 0 2
68293: PUSH
68294: LD_INT 0
68296: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68297: LD_ADDR_VAR 0 5
68301: PUSH
68302: LD_VAR 0 1
68306: PPUSH
68307: LD_INT 21
68309: PUSH
68310: LD_INT 3
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PPUSH
68317: CALL_OW 72
68321: ST_TO_ADDR
// if not tmp then
68322: LD_VAR 0 5
68326: NOT
68327: IFFALSE 68331
// exit ;
68329: GO 68376
// for i in tmp do
68331: LD_ADDR_VAR 0 3
68335: PUSH
68336: LD_VAR 0 5
68340: PUSH
68341: FOR_IN
68342: IFFALSE 68374
// begin result := EnemyInRange ( i , 22 ) ;
68344: LD_ADDR_VAR 0 2
68348: PUSH
68349: LD_VAR 0 3
68353: PPUSH
68354: LD_INT 22
68356: PPUSH
68357: CALL 66612 0 2
68361: ST_TO_ADDR
// if result then
68362: LD_VAR 0 2
68366: IFFALSE 68372
// exit ;
68368: POP
68369: POP
68370: GO 68376
// end ;
68372: GO 68341
68374: POP
68375: POP
// end ;
68376: LD_VAR 0 2
68380: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68381: LD_INT 0
68383: PPUSH
68384: PPUSH
// if not units then
68385: LD_VAR 0 1
68389: NOT
68390: IFFALSE 68394
// exit ;
68392: GO 68464
// result := [ ] ;
68394: LD_ADDR_VAR 0 3
68398: PUSH
68399: EMPTY
68400: ST_TO_ADDR
// for i in units do
68401: LD_ADDR_VAR 0 4
68405: PUSH
68406: LD_VAR 0 1
68410: PUSH
68411: FOR_IN
68412: IFFALSE 68462
// if GetTag ( i ) = tag then
68414: LD_VAR 0 4
68418: PPUSH
68419: CALL_OW 110
68423: PUSH
68424: LD_VAR 0 2
68428: EQUAL
68429: IFFALSE 68460
// result := Replace ( result , result + 1 , i ) ;
68431: LD_ADDR_VAR 0 3
68435: PUSH
68436: LD_VAR 0 3
68440: PPUSH
68441: LD_VAR 0 3
68445: PUSH
68446: LD_INT 1
68448: PLUS
68449: PPUSH
68450: LD_VAR 0 4
68454: PPUSH
68455: CALL_OW 1
68459: ST_TO_ADDR
68460: GO 68411
68462: POP
68463: POP
// end ;
68464: LD_VAR 0 3
68468: RET
// export function IsDriver ( un ) ; begin
68469: LD_INT 0
68471: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68472: LD_ADDR_VAR 0 2
68476: PUSH
68477: LD_VAR 0 1
68481: PUSH
68482: LD_INT 55
68484: PUSH
68485: EMPTY
68486: LIST
68487: PPUSH
68488: CALL_OW 69
68492: IN
68493: ST_TO_ADDR
// end ;
68494: LD_VAR 0 2
68498: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68499: LD_INT 0
68501: PPUSH
68502: PPUSH
// list := [ ] ;
68503: LD_ADDR_VAR 0 5
68507: PUSH
68508: EMPTY
68509: ST_TO_ADDR
// case d of 0 :
68510: LD_VAR 0 3
68514: PUSH
68515: LD_INT 0
68517: DOUBLE
68518: EQUAL
68519: IFTRUE 68523
68521: GO 68656
68523: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68524: LD_ADDR_VAR 0 5
68528: PUSH
68529: LD_VAR 0 1
68533: PUSH
68534: LD_INT 4
68536: MINUS
68537: PUSH
68538: LD_VAR 0 2
68542: PUSH
68543: LD_INT 4
68545: MINUS
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: PUSH
68555: LD_VAR 0 1
68559: PUSH
68560: LD_INT 3
68562: MINUS
68563: PUSH
68564: LD_VAR 0 2
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: PUSH
68577: LD_VAR 0 1
68581: PUSH
68582: LD_INT 4
68584: PLUS
68585: PUSH
68586: LD_VAR 0 2
68590: PUSH
68591: LD_INT 4
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: LIST
68598: PUSH
68599: LD_VAR 0 1
68603: PUSH
68604: LD_INT 3
68606: PLUS
68607: PUSH
68608: LD_VAR 0 2
68612: PUSH
68613: LD_INT 3
68615: PLUS
68616: PUSH
68617: LD_INT 5
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: LIST
68624: PUSH
68625: LD_VAR 0 1
68629: PUSH
68630: LD_VAR 0 2
68634: PUSH
68635: LD_INT 4
68637: PLUS
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: LIST
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: ST_TO_ADDR
// end ; 1 :
68654: GO 69354
68656: LD_INT 1
68658: DOUBLE
68659: EQUAL
68660: IFTRUE 68664
68662: GO 68797
68664: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68665: LD_ADDR_VAR 0 5
68669: PUSH
68670: LD_VAR 0 1
68674: PUSH
68675: LD_VAR 0 2
68679: PUSH
68680: LD_INT 4
68682: MINUS
68683: PUSH
68684: LD_INT 3
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: PUSH
68692: LD_VAR 0 1
68696: PUSH
68697: LD_INT 3
68699: MINUS
68700: PUSH
68701: LD_VAR 0 2
68705: PUSH
68706: LD_INT 3
68708: MINUS
68709: PUSH
68710: LD_INT 2
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: PUSH
68718: LD_VAR 0 1
68722: PUSH
68723: LD_INT 4
68725: MINUS
68726: PUSH
68727: LD_VAR 0 2
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: LIST
68739: PUSH
68740: LD_VAR 0 1
68744: PUSH
68745: LD_VAR 0 2
68749: PUSH
68750: LD_INT 3
68752: PLUS
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: PUSH
68762: LD_VAR 0 1
68766: PUSH
68767: LD_INT 4
68769: PLUS
68770: PUSH
68771: LD_VAR 0 2
68775: PUSH
68776: LD_INT 4
68778: PLUS
68779: PUSH
68780: LD_INT 5
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: ST_TO_ADDR
// end ; 2 :
68795: GO 69354
68797: LD_INT 2
68799: DOUBLE
68800: EQUAL
68801: IFTRUE 68805
68803: GO 68934
68805: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68806: LD_ADDR_VAR 0 5
68810: PUSH
68811: LD_VAR 0 1
68815: PUSH
68816: LD_VAR 0 2
68820: PUSH
68821: LD_INT 3
68823: MINUS
68824: PUSH
68825: LD_INT 3
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: PUSH
68833: LD_VAR 0 1
68837: PUSH
68838: LD_INT 4
68840: PLUS
68841: PUSH
68842: LD_VAR 0 2
68846: PUSH
68847: LD_INT 4
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: LIST
68854: PUSH
68855: LD_VAR 0 1
68859: PUSH
68860: LD_VAR 0 2
68864: PUSH
68865: LD_INT 4
68867: PLUS
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: LIST
68876: PUSH
68877: LD_VAR 0 1
68881: PUSH
68882: LD_INT 3
68884: MINUS
68885: PUSH
68886: LD_VAR 0 2
68890: PUSH
68891: LD_INT 1
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: LIST
68898: PUSH
68899: LD_VAR 0 1
68903: PUSH
68904: LD_INT 4
68906: MINUS
68907: PUSH
68908: LD_VAR 0 2
68912: PUSH
68913: LD_INT 4
68915: MINUS
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: LIST
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: ST_TO_ADDR
// end ; 3 :
68932: GO 69354
68934: LD_INT 3
68936: DOUBLE
68937: EQUAL
68938: IFTRUE 68942
68940: GO 69075
68942: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68943: LD_ADDR_VAR 0 5
68947: PUSH
68948: LD_VAR 0 1
68952: PUSH
68953: LD_INT 3
68955: PLUS
68956: PUSH
68957: LD_VAR 0 2
68961: PUSH
68962: LD_INT 4
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: PUSH
68970: LD_VAR 0 1
68974: PUSH
68975: LD_INT 4
68977: PLUS
68978: PUSH
68979: LD_VAR 0 2
68983: PUSH
68984: LD_INT 4
68986: PLUS
68987: PUSH
68988: LD_INT 5
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: LIST
68995: PUSH
68996: LD_VAR 0 1
69000: PUSH
69001: LD_INT 4
69003: MINUS
69004: PUSH
69005: LD_VAR 0 2
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: LIST
69017: PUSH
69018: LD_VAR 0 1
69022: PUSH
69023: LD_VAR 0 2
69027: PUSH
69028: LD_INT 4
69030: MINUS
69031: PUSH
69032: LD_INT 3
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: LIST
69039: PUSH
69040: LD_VAR 0 1
69044: PUSH
69045: LD_INT 3
69047: MINUS
69048: PUSH
69049: LD_VAR 0 2
69053: PUSH
69054: LD_INT 3
69056: MINUS
69057: PUSH
69058: LD_INT 2
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: LIST
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: ST_TO_ADDR
// end ; 4 :
69073: GO 69354
69075: LD_INT 4
69077: DOUBLE
69078: EQUAL
69079: IFTRUE 69083
69081: GO 69216
69083: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69084: LD_ADDR_VAR 0 5
69088: PUSH
69089: LD_VAR 0 1
69093: PUSH
69094: LD_VAR 0 2
69098: PUSH
69099: LD_INT 4
69101: PLUS
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: LIST
69110: PUSH
69111: LD_VAR 0 1
69115: PUSH
69116: LD_INT 3
69118: PLUS
69119: PUSH
69120: LD_VAR 0 2
69124: PUSH
69125: LD_INT 3
69127: PLUS
69128: PUSH
69129: LD_INT 5
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: LIST
69136: PUSH
69137: LD_VAR 0 1
69141: PUSH
69142: LD_INT 4
69144: PLUS
69145: PUSH
69146: LD_VAR 0 2
69150: PUSH
69151: LD_INT 4
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: LIST
69158: PUSH
69159: LD_VAR 0 1
69163: PUSH
69164: LD_VAR 0 2
69168: PUSH
69169: LD_INT 3
69171: MINUS
69172: PUSH
69173: LD_INT 3
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: LIST
69180: PUSH
69181: LD_VAR 0 1
69185: PUSH
69186: LD_INT 4
69188: MINUS
69189: PUSH
69190: LD_VAR 0 2
69194: PUSH
69195: LD_INT 4
69197: MINUS
69198: PUSH
69199: LD_INT 2
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: ST_TO_ADDR
// end ; 5 :
69214: GO 69354
69216: LD_INT 5
69218: DOUBLE
69219: EQUAL
69220: IFTRUE 69224
69222: GO 69353
69224: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69225: LD_ADDR_VAR 0 5
69229: PUSH
69230: LD_VAR 0 1
69234: PUSH
69235: LD_INT 4
69237: MINUS
69238: PUSH
69239: LD_VAR 0 2
69243: PUSH
69244: LD_INT 1
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: LIST
69251: PUSH
69252: LD_VAR 0 1
69256: PUSH
69257: LD_VAR 0 2
69261: PUSH
69262: LD_INT 4
69264: MINUS
69265: PUSH
69266: LD_INT 3
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: LIST
69273: PUSH
69274: LD_VAR 0 1
69278: PUSH
69279: LD_INT 4
69281: PLUS
69282: PUSH
69283: LD_VAR 0 2
69287: PUSH
69288: LD_INT 4
69290: PLUS
69291: PUSH
69292: LD_INT 5
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: LIST
69299: PUSH
69300: LD_VAR 0 1
69304: PUSH
69305: LD_INT 3
69307: PLUS
69308: PUSH
69309: LD_VAR 0 2
69313: PUSH
69314: LD_INT 4
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: LIST
69321: PUSH
69322: LD_VAR 0 1
69326: PUSH
69327: LD_VAR 0 2
69331: PUSH
69332: LD_INT 3
69334: PLUS
69335: PUSH
69336: LD_INT 0
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: LIST
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: ST_TO_ADDR
// end ; end ;
69351: GO 69354
69353: POP
// result := list ;
69354: LD_ADDR_VAR 0 4
69358: PUSH
69359: LD_VAR 0 5
69363: ST_TO_ADDR
// end ;
69364: LD_VAR 0 4
69368: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69369: LD_INT 0
69371: PPUSH
69372: PPUSH
69373: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69374: LD_VAR 0 1
69378: NOT
69379: PUSH
69380: LD_VAR 0 2
69384: PUSH
69385: LD_INT 1
69387: PUSH
69388: LD_INT 2
69390: PUSH
69391: LD_INT 3
69393: PUSH
69394: LD_INT 4
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: IN
69403: NOT
69404: OR
69405: IFFALSE 69409
// exit ;
69407: GO 69501
// tmp := [ ] ;
69409: LD_ADDR_VAR 0 5
69413: PUSH
69414: EMPTY
69415: ST_TO_ADDR
// for i in units do
69416: LD_ADDR_VAR 0 4
69420: PUSH
69421: LD_VAR 0 1
69425: PUSH
69426: FOR_IN
69427: IFFALSE 69470
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69429: LD_ADDR_VAR 0 5
69433: PUSH
69434: LD_VAR 0 5
69438: PPUSH
69439: LD_VAR 0 5
69443: PUSH
69444: LD_INT 1
69446: PLUS
69447: PPUSH
69448: LD_VAR 0 4
69452: PPUSH
69453: LD_VAR 0 2
69457: PPUSH
69458: CALL_OW 259
69462: PPUSH
69463: CALL_OW 2
69467: ST_TO_ADDR
69468: GO 69426
69470: POP
69471: POP
// if not tmp then
69472: LD_VAR 0 5
69476: NOT
69477: IFFALSE 69481
// exit ;
69479: GO 69501
// result := SortListByListDesc ( units , tmp ) ;
69481: LD_ADDR_VAR 0 3
69485: PUSH
69486: LD_VAR 0 1
69490: PPUSH
69491: LD_VAR 0 5
69495: PPUSH
69496: CALL_OW 77
69500: ST_TO_ADDR
// end ;
69501: LD_VAR 0 3
69505: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69506: LD_INT 0
69508: PPUSH
69509: PPUSH
69510: PPUSH
// result := false ;
69511: LD_ADDR_VAR 0 3
69515: PUSH
69516: LD_INT 0
69518: ST_TO_ADDR
// x := GetX ( building ) ;
69519: LD_ADDR_VAR 0 4
69523: PUSH
69524: LD_VAR 0 2
69528: PPUSH
69529: CALL_OW 250
69533: ST_TO_ADDR
// y := GetY ( building ) ;
69534: LD_ADDR_VAR 0 5
69538: PUSH
69539: LD_VAR 0 2
69543: PPUSH
69544: CALL_OW 251
69548: ST_TO_ADDR
// if not building or not x or not y then
69549: LD_VAR 0 2
69553: NOT
69554: PUSH
69555: LD_VAR 0 4
69559: NOT
69560: OR
69561: PUSH
69562: LD_VAR 0 5
69566: NOT
69567: OR
69568: IFFALSE 69572
// exit ;
69570: GO 69664
// if GetTaskList ( unit ) then
69572: LD_VAR 0 1
69576: PPUSH
69577: CALL_OW 437
69581: IFFALSE 69664
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69583: LD_STRING e
69585: PUSH
69586: LD_VAR 0 1
69590: PPUSH
69591: CALL_OW 437
69595: PUSH
69596: LD_INT 1
69598: ARRAY
69599: PUSH
69600: LD_INT 1
69602: ARRAY
69603: EQUAL
69604: PUSH
69605: LD_VAR 0 4
69609: PUSH
69610: LD_VAR 0 1
69614: PPUSH
69615: CALL_OW 437
69619: PUSH
69620: LD_INT 1
69622: ARRAY
69623: PUSH
69624: LD_INT 2
69626: ARRAY
69627: EQUAL
69628: AND
69629: PUSH
69630: LD_VAR 0 5
69634: PUSH
69635: LD_VAR 0 1
69639: PPUSH
69640: CALL_OW 437
69644: PUSH
69645: LD_INT 1
69647: ARRAY
69648: PUSH
69649: LD_INT 3
69651: ARRAY
69652: EQUAL
69653: AND
69654: IFFALSE 69664
// result := true end ;
69656: LD_ADDR_VAR 0 3
69660: PUSH
69661: LD_INT 1
69663: ST_TO_ADDR
// end ;
69664: LD_VAR 0 3
69668: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69669: LD_INT 0
69671: PPUSH
// result := false ;
69672: LD_ADDR_VAR 0 4
69676: PUSH
69677: LD_INT 0
69679: ST_TO_ADDR
// if GetTaskList ( unit ) then
69680: LD_VAR 0 1
69684: PPUSH
69685: CALL_OW 437
69689: IFFALSE 69772
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69691: LD_STRING M
69693: PUSH
69694: LD_VAR 0 1
69698: PPUSH
69699: CALL_OW 437
69703: PUSH
69704: LD_INT 1
69706: ARRAY
69707: PUSH
69708: LD_INT 1
69710: ARRAY
69711: EQUAL
69712: PUSH
69713: LD_VAR 0 2
69717: PUSH
69718: LD_VAR 0 1
69722: PPUSH
69723: CALL_OW 437
69727: PUSH
69728: LD_INT 1
69730: ARRAY
69731: PUSH
69732: LD_INT 2
69734: ARRAY
69735: EQUAL
69736: AND
69737: PUSH
69738: LD_VAR 0 3
69742: PUSH
69743: LD_VAR 0 1
69747: PPUSH
69748: CALL_OW 437
69752: PUSH
69753: LD_INT 1
69755: ARRAY
69756: PUSH
69757: LD_INT 3
69759: ARRAY
69760: EQUAL
69761: AND
69762: IFFALSE 69772
// result := true ;
69764: LD_ADDR_VAR 0 4
69768: PUSH
69769: LD_INT 1
69771: ST_TO_ADDR
// end ; end ;
69772: LD_VAR 0 4
69776: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69777: LD_INT 0
69779: PPUSH
69780: PPUSH
69781: PPUSH
69782: PPUSH
// if not unit or not area then
69783: LD_VAR 0 1
69787: NOT
69788: PUSH
69789: LD_VAR 0 2
69793: NOT
69794: OR
69795: IFFALSE 69799
// exit ;
69797: GO 69963
// tmp := AreaToList ( area , i ) ;
69799: LD_ADDR_VAR 0 6
69803: PUSH
69804: LD_VAR 0 2
69808: PPUSH
69809: LD_VAR 0 5
69813: PPUSH
69814: CALL_OW 517
69818: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69819: LD_ADDR_VAR 0 5
69823: PUSH
69824: DOUBLE
69825: LD_INT 1
69827: DEC
69828: ST_TO_ADDR
69829: LD_VAR 0 6
69833: PUSH
69834: LD_INT 1
69836: ARRAY
69837: PUSH
69838: FOR_TO
69839: IFFALSE 69961
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69841: LD_ADDR_VAR 0 7
69845: PUSH
69846: LD_VAR 0 6
69850: PUSH
69851: LD_INT 1
69853: ARRAY
69854: PUSH
69855: LD_VAR 0 5
69859: ARRAY
69860: PUSH
69861: LD_VAR 0 6
69865: PUSH
69866: LD_INT 2
69868: ARRAY
69869: PUSH
69870: LD_VAR 0 5
69874: ARRAY
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69880: LD_VAR 0 7
69884: PUSH
69885: LD_INT 1
69887: ARRAY
69888: PPUSH
69889: LD_VAR 0 7
69893: PUSH
69894: LD_INT 2
69896: ARRAY
69897: PPUSH
69898: CALL_OW 428
69902: PUSH
69903: LD_INT 0
69905: EQUAL
69906: IFFALSE 69959
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69908: LD_VAR 0 1
69912: PPUSH
69913: LD_VAR 0 7
69917: PUSH
69918: LD_INT 1
69920: ARRAY
69921: PPUSH
69922: LD_VAR 0 7
69926: PUSH
69927: LD_INT 2
69929: ARRAY
69930: PPUSH
69931: LD_VAR 0 3
69935: PPUSH
69936: CALL_OW 48
// result := IsPlaced ( unit ) ;
69940: LD_ADDR_VAR 0 4
69944: PUSH
69945: LD_VAR 0 1
69949: PPUSH
69950: CALL_OW 305
69954: ST_TO_ADDR
// exit ;
69955: POP
69956: POP
69957: GO 69963
// end ; end ;
69959: GO 69838
69961: POP
69962: POP
// end ;
69963: LD_VAR 0 4
69967: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69968: LD_INT 0
69970: PPUSH
69971: PPUSH
69972: PPUSH
// if not side or side > 8 then
69973: LD_VAR 0 1
69977: NOT
69978: PUSH
69979: LD_VAR 0 1
69983: PUSH
69984: LD_INT 8
69986: GREATER
69987: OR
69988: IFFALSE 69992
// exit ;
69990: GO 70179
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69992: LD_ADDR_VAR 0 4
69996: PUSH
69997: LD_INT 22
69999: PUSH
70000: LD_VAR 0 1
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 21
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PPUSH
70023: CALL_OW 69
70027: ST_TO_ADDR
// if not tmp then
70028: LD_VAR 0 4
70032: NOT
70033: IFFALSE 70037
// exit ;
70035: GO 70179
// enable_addtolog := true ;
70037: LD_ADDR_OWVAR 81
70041: PUSH
70042: LD_INT 1
70044: ST_TO_ADDR
// AddToLog ( [ ) ;
70045: LD_STRING [
70047: PPUSH
70048: CALL_OW 561
// for i in tmp do
70052: LD_ADDR_VAR 0 3
70056: PUSH
70057: LD_VAR 0 4
70061: PUSH
70062: FOR_IN
70063: IFFALSE 70170
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70065: LD_STRING [
70067: PUSH
70068: LD_VAR 0 3
70072: PPUSH
70073: CALL_OW 266
70077: STR
70078: PUSH
70079: LD_STRING , 
70081: STR
70082: PUSH
70083: LD_VAR 0 3
70087: PPUSH
70088: CALL_OW 250
70092: STR
70093: PUSH
70094: LD_STRING , 
70096: STR
70097: PUSH
70098: LD_VAR 0 3
70102: PPUSH
70103: CALL_OW 251
70107: STR
70108: PUSH
70109: LD_STRING , 
70111: STR
70112: PUSH
70113: LD_VAR 0 3
70117: PPUSH
70118: CALL_OW 254
70122: STR
70123: PUSH
70124: LD_STRING , 
70126: STR
70127: PUSH
70128: LD_VAR 0 3
70132: PPUSH
70133: LD_INT 1
70135: PPUSH
70136: CALL_OW 268
70140: STR
70141: PUSH
70142: LD_STRING , 
70144: STR
70145: PUSH
70146: LD_VAR 0 3
70150: PPUSH
70151: LD_INT 2
70153: PPUSH
70154: CALL_OW 268
70158: STR
70159: PUSH
70160: LD_STRING ],
70162: STR
70163: PPUSH
70164: CALL_OW 561
// end ;
70168: GO 70062
70170: POP
70171: POP
// AddToLog ( ]; ) ;
70172: LD_STRING ];
70174: PPUSH
70175: CALL_OW 561
// end ;
70179: LD_VAR 0 2
70183: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70184: LD_INT 0
70186: PPUSH
70187: PPUSH
70188: PPUSH
70189: PPUSH
70190: PPUSH
// if not area or not rate or not max then
70191: LD_VAR 0 1
70195: NOT
70196: PUSH
70197: LD_VAR 0 2
70201: NOT
70202: OR
70203: PUSH
70204: LD_VAR 0 4
70208: NOT
70209: OR
70210: IFFALSE 70214
// exit ;
70212: GO 70406
// while 1 do
70214: LD_INT 1
70216: IFFALSE 70406
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70218: LD_ADDR_VAR 0 9
70222: PUSH
70223: LD_VAR 0 1
70227: PPUSH
70228: LD_INT 1
70230: PPUSH
70231: CALL_OW 287
70235: PUSH
70236: LD_INT 10
70238: MUL
70239: ST_TO_ADDR
// r := rate / 10 ;
70240: LD_ADDR_VAR 0 7
70244: PUSH
70245: LD_VAR 0 2
70249: PUSH
70250: LD_INT 10
70252: DIVREAL
70253: ST_TO_ADDR
// time := 1 1$00 ;
70254: LD_ADDR_VAR 0 8
70258: PUSH
70259: LD_INT 2100
70261: ST_TO_ADDR
// if amount < min then
70262: LD_VAR 0 9
70266: PUSH
70267: LD_VAR 0 3
70271: LESS
70272: IFFALSE 70290
// r := r * 2 else
70274: LD_ADDR_VAR 0 7
70278: PUSH
70279: LD_VAR 0 7
70283: PUSH
70284: LD_INT 2
70286: MUL
70287: ST_TO_ADDR
70288: GO 70316
// if amount > max then
70290: LD_VAR 0 9
70294: PUSH
70295: LD_VAR 0 4
70299: GREATER
70300: IFFALSE 70316
// r := r / 2 ;
70302: LD_ADDR_VAR 0 7
70306: PUSH
70307: LD_VAR 0 7
70311: PUSH
70312: LD_INT 2
70314: DIVREAL
70315: ST_TO_ADDR
// time := time / r ;
70316: LD_ADDR_VAR 0 8
70320: PUSH
70321: LD_VAR 0 8
70325: PUSH
70326: LD_VAR 0 7
70330: DIVREAL
70331: ST_TO_ADDR
// if time < 0 then
70332: LD_VAR 0 8
70336: PUSH
70337: LD_INT 0
70339: LESS
70340: IFFALSE 70357
// time := time * - 1 ;
70342: LD_ADDR_VAR 0 8
70346: PUSH
70347: LD_VAR 0 8
70351: PUSH
70352: LD_INT 1
70354: NEG
70355: MUL
70356: ST_TO_ADDR
// wait ( time ) ;
70357: LD_VAR 0 8
70361: PPUSH
70362: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70366: LD_INT 35
70368: PPUSH
70369: LD_INT 875
70371: PPUSH
70372: CALL_OW 12
70376: PPUSH
70377: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70381: LD_INT 1
70383: PPUSH
70384: LD_INT 5
70386: PPUSH
70387: CALL_OW 12
70391: PPUSH
70392: LD_VAR 0 1
70396: PPUSH
70397: LD_INT 1
70399: PPUSH
70400: CALL_OW 55
// end ;
70404: GO 70214
// end ;
70406: LD_VAR 0 5
70410: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70411: LD_INT 0
70413: PPUSH
70414: PPUSH
70415: PPUSH
70416: PPUSH
70417: PPUSH
70418: PPUSH
70419: PPUSH
70420: PPUSH
// if not turrets or not factories then
70421: LD_VAR 0 1
70425: NOT
70426: PUSH
70427: LD_VAR 0 2
70431: NOT
70432: OR
70433: IFFALSE 70437
// exit ;
70435: GO 70744
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70437: LD_ADDR_VAR 0 10
70441: PUSH
70442: LD_INT 5
70444: PUSH
70445: LD_INT 6
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 2
70454: PUSH
70455: LD_INT 4
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 3
70464: PUSH
70465: LD_INT 5
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 24
70479: PUSH
70480: LD_INT 25
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 23
70489: PUSH
70490: LD_INT 27
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 42
70503: PUSH
70504: LD_INT 43
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 44
70513: PUSH
70514: LD_INT 46
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 45
70523: PUSH
70524: LD_INT 47
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: LIST
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: LIST
70540: ST_TO_ADDR
// result := [ ] ;
70541: LD_ADDR_VAR 0 3
70545: PUSH
70546: EMPTY
70547: ST_TO_ADDR
// for i in turrets do
70548: LD_ADDR_VAR 0 4
70552: PUSH
70553: LD_VAR 0 1
70557: PUSH
70558: FOR_IN
70559: IFFALSE 70742
// begin nat := GetNation ( i ) ;
70561: LD_ADDR_VAR 0 7
70565: PUSH
70566: LD_VAR 0 4
70570: PPUSH
70571: CALL_OW 248
70575: ST_TO_ADDR
// weapon := 0 ;
70576: LD_ADDR_VAR 0 8
70580: PUSH
70581: LD_INT 0
70583: ST_TO_ADDR
// if not nat then
70584: LD_VAR 0 7
70588: NOT
70589: IFFALSE 70593
// continue ;
70591: GO 70558
// for j in list [ nat ] do
70593: LD_ADDR_VAR 0 5
70597: PUSH
70598: LD_VAR 0 10
70602: PUSH
70603: LD_VAR 0 7
70607: ARRAY
70608: PUSH
70609: FOR_IN
70610: IFFALSE 70651
// if GetBWeapon ( i ) = j [ 1 ] then
70612: LD_VAR 0 4
70616: PPUSH
70617: CALL_OW 269
70621: PUSH
70622: LD_VAR 0 5
70626: PUSH
70627: LD_INT 1
70629: ARRAY
70630: EQUAL
70631: IFFALSE 70649
// begin weapon := j [ 2 ] ;
70633: LD_ADDR_VAR 0 8
70637: PUSH
70638: LD_VAR 0 5
70642: PUSH
70643: LD_INT 2
70645: ARRAY
70646: ST_TO_ADDR
// break ;
70647: GO 70651
// end ;
70649: GO 70609
70651: POP
70652: POP
// if not weapon then
70653: LD_VAR 0 8
70657: NOT
70658: IFFALSE 70662
// continue ;
70660: GO 70558
// for k in factories do
70662: LD_ADDR_VAR 0 6
70666: PUSH
70667: LD_VAR 0 2
70671: PUSH
70672: FOR_IN
70673: IFFALSE 70738
// begin weapons := AvailableWeaponList ( k ) ;
70675: LD_ADDR_VAR 0 9
70679: PUSH
70680: LD_VAR 0 6
70684: PPUSH
70685: CALL_OW 478
70689: ST_TO_ADDR
// if not weapons then
70690: LD_VAR 0 9
70694: NOT
70695: IFFALSE 70699
// continue ;
70697: GO 70672
// if weapon in weapons then
70699: LD_VAR 0 8
70703: PUSH
70704: LD_VAR 0 9
70708: IN
70709: IFFALSE 70736
// begin result := [ i , weapon ] ;
70711: LD_ADDR_VAR 0 3
70715: PUSH
70716: LD_VAR 0 4
70720: PUSH
70721: LD_VAR 0 8
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: ST_TO_ADDR
// exit ;
70730: POP
70731: POP
70732: POP
70733: POP
70734: GO 70744
// end ; end ;
70736: GO 70672
70738: POP
70739: POP
// end ;
70740: GO 70558
70742: POP
70743: POP
// end ;
70744: LD_VAR 0 3
70748: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70749: LD_INT 0
70751: PPUSH
// if not side or side > 8 then
70752: LD_VAR 0 3
70756: NOT
70757: PUSH
70758: LD_VAR 0 3
70762: PUSH
70763: LD_INT 8
70765: GREATER
70766: OR
70767: IFFALSE 70771
// exit ;
70769: GO 70830
// if not range then
70771: LD_VAR 0 4
70775: NOT
70776: IFFALSE 70787
// range := - 12 ;
70778: LD_ADDR_VAR 0 4
70782: PUSH
70783: LD_INT 12
70785: NEG
70786: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70787: LD_VAR 0 1
70791: PPUSH
70792: LD_VAR 0 2
70796: PPUSH
70797: LD_VAR 0 3
70801: PPUSH
70802: LD_VAR 0 4
70806: PPUSH
70807: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70811: LD_VAR 0 1
70815: PPUSH
70816: LD_VAR 0 2
70820: PPUSH
70821: LD_VAR 0 3
70825: PPUSH
70826: CALL_OW 331
// end ;
70830: LD_VAR 0 5
70834: RET
// export function Video ( mode ) ; begin
70835: LD_INT 0
70837: PPUSH
// ingame_video = mode ;
70838: LD_ADDR_OWVAR 52
70842: PUSH
70843: LD_VAR 0 1
70847: ST_TO_ADDR
// interface_hidden = mode ;
70848: LD_ADDR_OWVAR 54
70852: PUSH
70853: LD_VAR 0 1
70857: ST_TO_ADDR
// end ;
70858: LD_VAR 0 2
70862: RET
// export function Join ( array , element ) ; begin
70863: LD_INT 0
70865: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70866: LD_ADDR_VAR 0 3
70870: PUSH
70871: LD_VAR 0 1
70875: PPUSH
70876: LD_VAR 0 1
70880: PUSH
70881: LD_INT 1
70883: PLUS
70884: PPUSH
70885: LD_VAR 0 2
70889: PPUSH
70890: CALL_OW 1
70894: ST_TO_ADDR
// end ;
70895: LD_VAR 0 3
70899: RET
// export function JoinUnion ( array , element ) ; begin
70900: LD_INT 0
70902: PPUSH
// result := array union element ;
70903: LD_ADDR_VAR 0 3
70907: PUSH
70908: LD_VAR 0 1
70912: PUSH
70913: LD_VAR 0 2
70917: UNION
70918: ST_TO_ADDR
// end ;
70919: LD_VAR 0 3
70923: RET
// export function GetBehemoths ( side ) ; begin
70924: LD_INT 0
70926: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70927: LD_ADDR_VAR 0 2
70931: PUSH
70932: LD_INT 22
70934: PUSH
70935: LD_VAR 0 1
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 31
70946: PUSH
70947: LD_INT 25
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PPUSH
70958: CALL_OW 69
70962: ST_TO_ADDR
// end ;
70963: LD_VAR 0 2
70967: RET
// export function Shuffle ( array ) ; var i , index ; begin
70968: LD_INT 0
70970: PPUSH
70971: PPUSH
70972: PPUSH
// result := [ ] ;
70973: LD_ADDR_VAR 0 2
70977: PUSH
70978: EMPTY
70979: ST_TO_ADDR
// if not array then
70980: LD_VAR 0 1
70984: NOT
70985: IFFALSE 70989
// exit ;
70987: GO 71088
// Randomize ;
70989: CALL_OW 10
// for i = array downto 1 do
70993: LD_ADDR_VAR 0 3
70997: PUSH
70998: DOUBLE
70999: LD_VAR 0 1
71003: INC
71004: ST_TO_ADDR
71005: LD_INT 1
71007: PUSH
71008: FOR_DOWNTO
71009: IFFALSE 71086
// begin index := rand ( 1 , array ) ;
71011: LD_ADDR_VAR 0 4
71015: PUSH
71016: LD_INT 1
71018: PPUSH
71019: LD_VAR 0 1
71023: PPUSH
71024: CALL_OW 12
71028: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71029: LD_ADDR_VAR 0 2
71033: PUSH
71034: LD_VAR 0 2
71038: PPUSH
71039: LD_VAR 0 2
71043: PUSH
71044: LD_INT 1
71046: PLUS
71047: PPUSH
71048: LD_VAR 0 1
71052: PUSH
71053: LD_VAR 0 4
71057: ARRAY
71058: PPUSH
71059: CALL_OW 2
71063: ST_TO_ADDR
// array := Delete ( array , index ) ;
71064: LD_ADDR_VAR 0 1
71068: PUSH
71069: LD_VAR 0 1
71073: PPUSH
71074: LD_VAR 0 4
71078: PPUSH
71079: CALL_OW 3
71083: ST_TO_ADDR
// end ;
71084: GO 71008
71086: POP
71087: POP
// end ;
71088: LD_VAR 0 2
71092: RET
// export function GetBaseMaterials ( base ) ; begin
71093: LD_INT 0
71095: PPUSH
// result := [ 0 , 0 , 0 ] ;
71096: LD_ADDR_VAR 0 2
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: LIST
71114: ST_TO_ADDR
// if not base then
71115: LD_VAR 0 1
71119: NOT
71120: IFFALSE 71124
// exit ;
71122: GO 71173
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71124: LD_ADDR_VAR 0 2
71128: PUSH
71129: LD_VAR 0 1
71133: PPUSH
71134: LD_INT 1
71136: PPUSH
71137: CALL_OW 275
71141: PUSH
71142: LD_VAR 0 1
71146: PPUSH
71147: LD_INT 2
71149: PPUSH
71150: CALL_OW 275
71154: PUSH
71155: LD_VAR 0 1
71159: PPUSH
71160: LD_INT 3
71162: PPUSH
71163: CALL_OW 275
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: LIST
71172: ST_TO_ADDR
// end ;
71173: LD_VAR 0 2
71177: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71178: LD_INT 0
71180: PPUSH
71181: PPUSH
// result := array ;
71182: LD_ADDR_VAR 0 3
71186: PUSH
71187: LD_VAR 0 1
71191: ST_TO_ADDR
// if size > 0 then
71192: LD_VAR 0 2
71196: PUSH
71197: LD_INT 0
71199: GREATER
71200: IFFALSE 71246
// for i := array downto size do
71202: LD_ADDR_VAR 0 4
71206: PUSH
71207: DOUBLE
71208: LD_VAR 0 1
71212: INC
71213: ST_TO_ADDR
71214: LD_VAR 0 2
71218: PUSH
71219: FOR_DOWNTO
71220: IFFALSE 71244
// result := Delete ( result , result ) ;
71222: LD_ADDR_VAR 0 3
71226: PUSH
71227: LD_VAR 0 3
71231: PPUSH
71232: LD_VAR 0 3
71236: PPUSH
71237: CALL_OW 3
71241: ST_TO_ADDR
71242: GO 71219
71244: POP
71245: POP
// end ;
71246: LD_VAR 0 3
71250: RET
// export function ComExit ( unit ) ; var tmp ; begin
71251: LD_INT 0
71253: PPUSH
71254: PPUSH
// if not IsInUnit ( unit ) then
71255: LD_VAR 0 1
71259: PPUSH
71260: CALL_OW 310
71264: NOT
71265: IFFALSE 71269
// exit ;
71267: GO 71329
// tmp := IsInUnit ( unit ) ;
71269: LD_ADDR_VAR 0 3
71273: PUSH
71274: LD_VAR 0 1
71278: PPUSH
71279: CALL_OW 310
71283: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71284: LD_VAR 0 3
71288: PPUSH
71289: CALL_OW 247
71293: PUSH
71294: LD_INT 2
71296: EQUAL
71297: IFFALSE 71310
// ComExitVehicle ( unit ) else
71299: LD_VAR 0 1
71303: PPUSH
71304: CALL_OW 121
71308: GO 71319
// ComExitBuilding ( unit ) ;
71310: LD_VAR 0 1
71314: PPUSH
71315: CALL_OW 122
// result := tmp ;
71319: LD_ADDR_VAR 0 2
71323: PUSH
71324: LD_VAR 0 3
71328: ST_TO_ADDR
// end ;
71329: LD_VAR 0 2
71333: RET
// export function ComExitAll ( units ) ; var i ; begin
71334: LD_INT 0
71336: PPUSH
71337: PPUSH
// if not units then
71338: LD_VAR 0 1
71342: NOT
71343: IFFALSE 71347
// exit ;
71345: GO 71373
// for i in units do
71347: LD_ADDR_VAR 0 3
71351: PUSH
71352: LD_VAR 0 1
71356: PUSH
71357: FOR_IN
71358: IFFALSE 71371
// ComExit ( i ) ;
71360: LD_VAR 0 3
71364: PPUSH
71365: CALL 71251 0 1
71369: GO 71357
71371: POP
71372: POP
// end ;
71373: LD_VAR 0 2
71377: RET
// export function ResetHc ; begin
71378: LD_INT 0
71380: PPUSH
// InitHc ;
71381: CALL_OW 19
// hc_importance := 0 ;
71385: LD_ADDR_OWVAR 32
71389: PUSH
71390: LD_INT 0
71392: ST_TO_ADDR
// end ;
71393: LD_VAR 0 1
71397: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71398: LD_INT 0
71400: PPUSH
71401: PPUSH
71402: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71403: LD_ADDR_VAR 0 6
71407: PUSH
71408: LD_VAR 0 1
71412: PUSH
71413: LD_VAR 0 3
71417: PLUS
71418: PUSH
71419: LD_INT 2
71421: DIV
71422: ST_TO_ADDR
// if _x < 0 then
71423: LD_VAR 0 6
71427: PUSH
71428: LD_INT 0
71430: LESS
71431: IFFALSE 71448
// _x := _x * - 1 ;
71433: LD_ADDR_VAR 0 6
71437: PUSH
71438: LD_VAR 0 6
71442: PUSH
71443: LD_INT 1
71445: NEG
71446: MUL
71447: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71448: LD_ADDR_VAR 0 7
71452: PUSH
71453: LD_VAR 0 2
71457: PUSH
71458: LD_VAR 0 4
71462: PLUS
71463: PUSH
71464: LD_INT 2
71466: DIV
71467: ST_TO_ADDR
// if _y < 0 then
71468: LD_VAR 0 7
71472: PUSH
71473: LD_INT 0
71475: LESS
71476: IFFALSE 71493
// _y := _y * - 1 ;
71478: LD_ADDR_VAR 0 7
71482: PUSH
71483: LD_VAR 0 7
71487: PUSH
71488: LD_INT 1
71490: NEG
71491: MUL
71492: ST_TO_ADDR
// result := [ _x , _y ] ;
71493: LD_ADDR_VAR 0 5
71497: PUSH
71498: LD_VAR 0 6
71502: PUSH
71503: LD_VAR 0 7
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: ST_TO_ADDR
// end ;
71512: LD_VAR 0 5
71516: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71517: LD_INT 0
71519: PPUSH
71520: PPUSH
71521: PPUSH
71522: PPUSH
// task := GetTaskList ( unit ) ;
71523: LD_ADDR_VAR 0 7
71527: PUSH
71528: LD_VAR 0 1
71532: PPUSH
71533: CALL_OW 437
71537: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71538: LD_VAR 0 7
71542: NOT
71543: PUSH
71544: LD_VAR 0 1
71548: PPUSH
71549: LD_VAR 0 2
71553: PPUSH
71554: CALL_OW 308
71558: NOT
71559: AND
71560: IFFALSE 71564
// exit ;
71562: GO 71682
// if IsInArea ( unit , area ) then
71564: LD_VAR 0 1
71568: PPUSH
71569: LD_VAR 0 2
71573: PPUSH
71574: CALL_OW 308
71578: IFFALSE 71596
// begin ComMoveToArea ( unit , goAway ) ;
71580: LD_VAR 0 1
71584: PPUSH
71585: LD_VAR 0 3
71589: PPUSH
71590: CALL_OW 113
// exit ;
71594: GO 71682
// end ; if task [ 1 ] [ 1 ] <> M then
71596: LD_VAR 0 7
71600: PUSH
71601: LD_INT 1
71603: ARRAY
71604: PUSH
71605: LD_INT 1
71607: ARRAY
71608: PUSH
71609: LD_STRING M
71611: NONEQUAL
71612: IFFALSE 71616
// exit ;
71614: GO 71682
// x := task [ 1 ] [ 2 ] ;
71616: LD_ADDR_VAR 0 5
71620: PUSH
71621: LD_VAR 0 7
71625: PUSH
71626: LD_INT 1
71628: ARRAY
71629: PUSH
71630: LD_INT 2
71632: ARRAY
71633: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71634: LD_ADDR_VAR 0 6
71638: PUSH
71639: LD_VAR 0 7
71643: PUSH
71644: LD_INT 1
71646: ARRAY
71647: PUSH
71648: LD_INT 3
71650: ARRAY
71651: ST_TO_ADDR
// if InArea ( x , y , area ) then
71652: LD_VAR 0 5
71656: PPUSH
71657: LD_VAR 0 6
71661: PPUSH
71662: LD_VAR 0 2
71666: PPUSH
71667: CALL_OW 309
71671: IFFALSE 71682
// ComStop ( unit ) ;
71673: LD_VAR 0 1
71677: PPUSH
71678: CALL_OW 141
// end ;
71682: LD_VAR 0 4
71686: RET
// export function Abs ( value ) ; begin
71687: LD_INT 0
71689: PPUSH
// result := value ;
71690: LD_ADDR_VAR 0 2
71694: PUSH
71695: LD_VAR 0 1
71699: ST_TO_ADDR
// if value < 0 then
71700: LD_VAR 0 1
71704: PUSH
71705: LD_INT 0
71707: LESS
71708: IFFALSE 71725
// result := value * - 1 ;
71710: LD_ADDR_VAR 0 2
71714: PUSH
71715: LD_VAR 0 1
71719: PUSH
71720: LD_INT 1
71722: NEG
71723: MUL
71724: ST_TO_ADDR
// end ;
71725: LD_VAR 0 2
71729: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71730: LD_INT 0
71732: PPUSH
71733: PPUSH
71734: PPUSH
71735: PPUSH
71736: PPUSH
71737: PPUSH
71738: PPUSH
71739: PPUSH
// if not unit or not building then
71740: LD_VAR 0 1
71744: NOT
71745: PUSH
71746: LD_VAR 0 2
71750: NOT
71751: OR
71752: IFFALSE 71756
// exit ;
71754: GO 71982
// x := GetX ( building ) ;
71756: LD_ADDR_VAR 0 4
71760: PUSH
71761: LD_VAR 0 2
71765: PPUSH
71766: CALL_OW 250
71770: ST_TO_ADDR
// y := GetY ( building ) ;
71771: LD_ADDR_VAR 0 6
71775: PUSH
71776: LD_VAR 0 2
71780: PPUSH
71781: CALL_OW 251
71785: ST_TO_ADDR
// d := GetDir ( building ) ;
71786: LD_ADDR_VAR 0 8
71790: PUSH
71791: LD_VAR 0 2
71795: PPUSH
71796: CALL_OW 254
71800: ST_TO_ADDR
// r := 4 ;
71801: LD_ADDR_VAR 0 9
71805: PUSH
71806: LD_INT 4
71808: ST_TO_ADDR
// for i := 1 to 5 do
71809: LD_ADDR_VAR 0 10
71813: PUSH
71814: DOUBLE
71815: LD_INT 1
71817: DEC
71818: ST_TO_ADDR
71819: LD_INT 5
71821: PUSH
71822: FOR_TO
71823: IFFALSE 71980
// begin _x := ShiftX ( x , d , r + i ) ;
71825: LD_ADDR_VAR 0 5
71829: PUSH
71830: LD_VAR 0 4
71834: PPUSH
71835: LD_VAR 0 8
71839: PPUSH
71840: LD_VAR 0 9
71844: PUSH
71845: LD_VAR 0 10
71849: PLUS
71850: PPUSH
71851: CALL_OW 272
71855: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71856: LD_ADDR_VAR 0 7
71860: PUSH
71861: LD_VAR 0 6
71865: PPUSH
71866: LD_VAR 0 8
71870: PPUSH
71871: LD_VAR 0 9
71875: PUSH
71876: LD_VAR 0 10
71880: PLUS
71881: PPUSH
71882: CALL_OW 273
71886: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71887: LD_VAR 0 5
71891: PPUSH
71892: LD_VAR 0 7
71896: PPUSH
71897: CALL_OW 488
71901: PUSH
71902: LD_VAR 0 5
71906: PPUSH
71907: LD_VAR 0 7
71911: PPUSH
71912: CALL_OW 428
71916: PPUSH
71917: CALL_OW 247
71921: PUSH
71922: LD_INT 3
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: IN
71932: NOT
71933: AND
71934: IFFALSE 71978
// begin ComMoveXY ( unit , _x , _y ) ;
71936: LD_VAR 0 1
71940: PPUSH
71941: LD_VAR 0 5
71945: PPUSH
71946: LD_VAR 0 7
71950: PPUSH
71951: CALL_OW 111
// result := [ _x , _y ] ;
71955: LD_ADDR_VAR 0 3
71959: PUSH
71960: LD_VAR 0 5
71964: PUSH
71965: LD_VAR 0 7
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: ST_TO_ADDR
// exit ;
71974: POP
71975: POP
71976: GO 71982
// end ; end ;
71978: GO 71822
71980: POP
71981: POP
// end ;
71982: LD_VAR 0 3
71986: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71987: LD_INT 0
71989: PPUSH
71990: PPUSH
71991: PPUSH
// result := 0 ;
71992: LD_ADDR_VAR 0 3
71996: PUSH
71997: LD_INT 0
71999: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72000: LD_VAR 0 1
72004: PUSH
72005: LD_INT 0
72007: LESS
72008: PUSH
72009: LD_VAR 0 1
72013: PUSH
72014: LD_INT 8
72016: GREATER
72017: OR
72018: PUSH
72019: LD_VAR 0 2
72023: PUSH
72024: LD_INT 0
72026: LESS
72027: OR
72028: PUSH
72029: LD_VAR 0 2
72033: PUSH
72034: LD_INT 8
72036: GREATER
72037: OR
72038: IFFALSE 72042
// exit ;
72040: GO 72117
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72042: LD_ADDR_VAR 0 4
72046: PUSH
72047: LD_INT 22
72049: PUSH
72050: LD_VAR 0 2
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PPUSH
72059: CALL_OW 69
72063: PUSH
72064: FOR_IN
72065: IFFALSE 72115
// begin un := UnitShoot ( i ) ;
72067: LD_ADDR_VAR 0 5
72071: PUSH
72072: LD_VAR 0 4
72076: PPUSH
72077: CALL_OW 504
72081: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72082: LD_VAR 0 5
72086: PPUSH
72087: CALL_OW 255
72091: PUSH
72092: LD_VAR 0 1
72096: EQUAL
72097: IFFALSE 72113
// begin result := un ;
72099: LD_ADDR_VAR 0 3
72103: PUSH
72104: LD_VAR 0 5
72108: ST_TO_ADDR
// exit ;
72109: POP
72110: POP
72111: GO 72117
// end ; end ;
72113: GO 72064
72115: POP
72116: POP
// end ;
72117: LD_VAR 0 3
72121: RET
// export function GetCargoBay ( units ) ; begin
72122: LD_INT 0
72124: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72125: LD_ADDR_VAR 0 2
72129: PUSH
72130: LD_VAR 0 1
72134: PPUSH
72135: LD_INT 2
72137: PUSH
72138: LD_INT 34
72140: PUSH
72141: LD_INT 12
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 34
72150: PUSH
72151: LD_INT 51
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 34
72160: PUSH
72161: LD_INT 32
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 34
72170: PUSH
72171: LD_EXP 39
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: PPUSH
72187: CALL_OW 72
72191: ST_TO_ADDR
// end ;
72192: LD_VAR 0 2
72196: RET
// export function Negate ( value ) ; begin
72197: LD_INT 0
72199: PPUSH
// result := not value ;
72200: LD_ADDR_VAR 0 2
72204: PUSH
72205: LD_VAR 0 1
72209: NOT
72210: ST_TO_ADDR
// end ;
72211: LD_VAR 0 2
72215: RET
// export function Inc ( value ) ; begin
72216: LD_INT 0
72218: PPUSH
// result := value + 1 ;
72219: LD_ADDR_VAR 0 2
72223: PUSH
72224: LD_VAR 0 1
72228: PUSH
72229: LD_INT 1
72231: PLUS
72232: ST_TO_ADDR
// end ;
72233: LD_VAR 0 2
72237: RET
// export function Dec ( value ) ; begin
72238: LD_INT 0
72240: PPUSH
// result := value - 1 ;
72241: LD_ADDR_VAR 0 2
72245: PUSH
72246: LD_VAR 0 1
72250: PUSH
72251: LD_INT 1
72253: MINUS
72254: ST_TO_ADDR
// end ;
72255: LD_VAR 0 2
72259: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72260: LD_INT 0
72262: PPUSH
72263: PPUSH
72264: PPUSH
72265: PPUSH
72266: PPUSH
72267: PPUSH
72268: PPUSH
72269: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72270: LD_VAR 0 1
72274: PPUSH
72275: LD_VAR 0 2
72279: PPUSH
72280: CALL_OW 488
72284: NOT
72285: PUSH
72286: LD_VAR 0 3
72290: PPUSH
72291: LD_VAR 0 4
72295: PPUSH
72296: CALL_OW 488
72300: NOT
72301: OR
72302: IFFALSE 72315
// begin result := - 1 ;
72304: LD_ADDR_VAR 0 5
72308: PUSH
72309: LD_INT 1
72311: NEG
72312: ST_TO_ADDR
// exit ;
72313: GO 72550
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72315: LD_ADDR_VAR 0 12
72319: PUSH
72320: LD_VAR 0 1
72324: PPUSH
72325: LD_VAR 0 2
72329: PPUSH
72330: LD_VAR 0 3
72334: PPUSH
72335: LD_VAR 0 4
72339: PPUSH
72340: CALL 71398 0 4
72344: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72345: LD_ADDR_VAR 0 11
72349: PUSH
72350: LD_VAR 0 1
72354: PPUSH
72355: LD_VAR 0 2
72359: PPUSH
72360: LD_VAR 0 12
72364: PUSH
72365: LD_INT 1
72367: ARRAY
72368: PPUSH
72369: LD_VAR 0 12
72373: PUSH
72374: LD_INT 2
72376: ARRAY
72377: PPUSH
72378: CALL_OW 298
72382: ST_TO_ADDR
// distance := 9999 ;
72383: LD_ADDR_VAR 0 10
72387: PUSH
72388: LD_INT 9999
72390: ST_TO_ADDR
// for i := 0 to 5 do
72391: LD_ADDR_VAR 0 6
72395: PUSH
72396: DOUBLE
72397: LD_INT 0
72399: DEC
72400: ST_TO_ADDR
72401: LD_INT 5
72403: PUSH
72404: FOR_TO
72405: IFFALSE 72548
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72407: LD_ADDR_VAR 0 7
72411: PUSH
72412: LD_VAR 0 1
72416: PPUSH
72417: LD_VAR 0 6
72421: PPUSH
72422: LD_VAR 0 11
72426: PPUSH
72427: CALL_OW 272
72431: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72432: LD_ADDR_VAR 0 8
72436: PUSH
72437: LD_VAR 0 2
72441: PPUSH
72442: LD_VAR 0 6
72446: PPUSH
72447: LD_VAR 0 11
72451: PPUSH
72452: CALL_OW 273
72456: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72457: LD_VAR 0 7
72461: PPUSH
72462: LD_VAR 0 8
72466: PPUSH
72467: CALL_OW 488
72471: NOT
72472: IFFALSE 72476
// continue ;
72474: GO 72404
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72476: LD_ADDR_VAR 0 9
72480: PUSH
72481: LD_VAR 0 12
72485: PUSH
72486: LD_INT 1
72488: ARRAY
72489: PPUSH
72490: LD_VAR 0 12
72494: PUSH
72495: LD_INT 2
72497: ARRAY
72498: PPUSH
72499: LD_VAR 0 7
72503: PPUSH
72504: LD_VAR 0 8
72508: PPUSH
72509: CALL_OW 298
72513: ST_TO_ADDR
// if tmp < distance then
72514: LD_VAR 0 9
72518: PUSH
72519: LD_VAR 0 10
72523: LESS
72524: IFFALSE 72546
// begin result := i ;
72526: LD_ADDR_VAR 0 5
72530: PUSH
72531: LD_VAR 0 6
72535: ST_TO_ADDR
// distance := tmp ;
72536: LD_ADDR_VAR 0 10
72540: PUSH
72541: LD_VAR 0 9
72545: ST_TO_ADDR
// end ; end ;
72546: GO 72404
72548: POP
72549: POP
// end ;
72550: LD_VAR 0 5
72554: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72555: LD_INT 0
72557: PPUSH
72558: PPUSH
// if not driver or not IsInUnit ( driver ) then
72559: LD_VAR 0 1
72563: NOT
72564: PUSH
72565: LD_VAR 0 1
72569: PPUSH
72570: CALL_OW 310
72574: NOT
72575: OR
72576: IFFALSE 72580
// exit ;
72578: GO 72670
// vehicle := IsInUnit ( driver ) ;
72580: LD_ADDR_VAR 0 3
72584: PUSH
72585: LD_VAR 0 1
72589: PPUSH
72590: CALL_OW 310
72594: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72595: LD_VAR 0 1
72599: PPUSH
72600: LD_STRING \
72602: PUSH
72603: LD_INT 0
72605: PUSH
72606: LD_INT 0
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: LD_INT 0
72614: PUSH
72615: LD_INT 0
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: PUSH
72630: LD_STRING E
72632: PUSH
72633: LD_INT 0
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: LD_VAR 0 3
72643: PUSH
72644: LD_INT 0
72646: PUSH
72647: LD_INT 0
72649: PUSH
72650: LD_INT 0
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PPUSH
72666: CALL_OW 446
// end ;
72670: LD_VAR 0 2
72674: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72675: LD_INT 0
72677: PPUSH
72678: PPUSH
// if not driver or not IsInUnit ( driver ) then
72679: LD_VAR 0 1
72683: NOT
72684: PUSH
72685: LD_VAR 0 1
72689: PPUSH
72690: CALL_OW 310
72694: NOT
72695: OR
72696: IFFALSE 72700
// exit ;
72698: GO 72790
// vehicle := IsInUnit ( driver ) ;
72700: LD_ADDR_VAR 0 3
72704: PUSH
72705: LD_VAR 0 1
72709: PPUSH
72710: CALL_OW 310
72714: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72715: LD_VAR 0 1
72719: PPUSH
72720: LD_STRING \
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 0
72728: PUSH
72729: LD_INT 0
72731: PUSH
72732: LD_INT 0
72734: PUSH
72735: LD_INT 0
72737: PUSH
72738: LD_INT 0
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: PUSH
72750: LD_STRING E
72752: PUSH
72753: LD_INT 0
72755: PUSH
72756: LD_INT 0
72758: PUSH
72759: LD_VAR 0 3
72763: PUSH
72764: LD_INT 0
72766: PUSH
72767: LD_INT 0
72769: PUSH
72770: LD_INT 0
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PPUSH
72786: CALL_OW 447
// end ;
72790: LD_VAR 0 2
72794: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72795: LD_INT 0
72797: PPUSH
72798: PPUSH
72799: PPUSH
// tmp := [ ] ;
72800: LD_ADDR_VAR 0 5
72804: PUSH
72805: EMPTY
72806: ST_TO_ADDR
// for i in units do
72807: LD_ADDR_VAR 0 4
72811: PUSH
72812: LD_VAR 0 1
72816: PUSH
72817: FOR_IN
72818: IFFALSE 72856
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72820: LD_ADDR_VAR 0 5
72824: PUSH
72825: LD_VAR 0 5
72829: PPUSH
72830: LD_VAR 0 5
72834: PUSH
72835: LD_INT 1
72837: PLUS
72838: PPUSH
72839: LD_VAR 0 4
72843: PPUSH
72844: CALL_OW 256
72848: PPUSH
72849: CALL_OW 2
72853: ST_TO_ADDR
72854: GO 72817
72856: POP
72857: POP
// if not tmp then
72858: LD_VAR 0 5
72862: NOT
72863: IFFALSE 72867
// exit ;
72865: GO 72915
// if asc then
72867: LD_VAR 0 2
72871: IFFALSE 72895
// result := SortListByListAsc ( units , tmp ) else
72873: LD_ADDR_VAR 0 3
72877: PUSH
72878: LD_VAR 0 1
72882: PPUSH
72883: LD_VAR 0 5
72887: PPUSH
72888: CALL_OW 76
72892: ST_TO_ADDR
72893: GO 72915
// result := SortListByListDesc ( units , tmp ) ;
72895: LD_ADDR_VAR 0 3
72899: PUSH
72900: LD_VAR 0 1
72904: PPUSH
72905: LD_VAR 0 5
72909: PPUSH
72910: CALL_OW 77
72914: ST_TO_ADDR
// end ;
72915: LD_VAR 0 3
72919: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72920: LD_INT 0
72922: PPUSH
72923: PPUSH
// task := GetTaskList ( mech ) ;
72924: LD_ADDR_VAR 0 4
72928: PUSH
72929: LD_VAR 0 1
72933: PPUSH
72934: CALL_OW 437
72938: ST_TO_ADDR
// if not task then
72939: LD_VAR 0 4
72943: NOT
72944: IFFALSE 72948
// exit ;
72946: GO 72990
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72948: LD_ADDR_VAR 0 3
72952: PUSH
72953: LD_VAR 0 4
72957: PUSH
72958: LD_INT 1
72960: ARRAY
72961: PUSH
72962: LD_INT 1
72964: ARRAY
72965: PUSH
72966: LD_STRING r
72968: EQUAL
72969: PUSH
72970: LD_VAR 0 4
72974: PUSH
72975: LD_INT 1
72977: ARRAY
72978: PUSH
72979: LD_INT 4
72981: ARRAY
72982: PUSH
72983: LD_VAR 0 2
72987: EQUAL
72988: AND
72989: ST_TO_ADDR
// end ;
72990: LD_VAR 0 3
72994: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72995: LD_INT 0
72997: PPUSH
// SetDir ( unit , d ) ;
72998: LD_VAR 0 1
73002: PPUSH
73003: LD_VAR 0 4
73007: PPUSH
73008: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73012: LD_VAR 0 1
73016: PPUSH
73017: LD_VAR 0 2
73021: PPUSH
73022: LD_VAR 0 3
73026: PPUSH
73027: LD_VAR 0 5
73031: PPUSH
73032: CALL_OW 48
// end ;
73036: LD_VAR 0 6
73040: RET
// export function ToNaturalNumber ( number ) ; begin
73041: LD_INT 0
73043: PPUSH
// result := number div 1 ;
73044: LD_ADDR_VAR 0 2
73048: PUSH
73049: LD_VAR 0 1
73053: PUSH
73054: LD_INT 1
73056: DIV
73057: ST_TO_ADDR
// if number < 0 then
73058: LD_VAR 0 1
73062: PUSH
73063: LD_INT 0
73065: LESS
73066: IFFALSE 73076
// result := 0 ;
73068: LD_ADDR_VAR 0 2
73072: PUSH
73073: LD_INT 0
73075: ST_TO_ADDR
// end ;
73076: LD_VAR 0 2
73080: RET
// export function SortByClass ( units , class ) ; var un ; begin
73081: LD_INT 0
73083: PPUSH
73084: PPUSH
// if not units or not class then
73085: LD_VAR 0 1
73089: NOT
73090: PUSH
73091: LD_VAR 0 2
73095: NOT
73096: OR
73097: IFFALSE 73101
// exit ;
73099: GO 73196
// result := [ ] ;
73101: LD_ADDR_VAR 0 3
73105: PUSH
73106: EMPTY
73107: ST_TO_ADDR
// for un in units do
73108: LD_ADDR_VAR 0 4
73112: PUSH
73113: LD_VAR 0 1
73117: PUSH
73118: FOR_IN
73119: IFFALSE 73194
// if GetClass ( un ) = class then
73121: LD_VAR 0 4
73125: PPUSH
73126: CALL_OW 257
73130: PUSH
73131: LD_VAR 0 2
73135: EQUAL
73136: IFFALSE 73163
// result := Insert ( result , 1 , un ) else
73138: LD_ADDR_VAR 0 3
73142: PUSH
73143: LD_VAR 0 3
73147: PPUSH
73148: LD_INT 1
73150: PPUSH
73151: LD_VAR 0 4
73155: PPUSH
73156: CALL_OW 2
73160: ST_TO_ADDR
73161: GO 73192
// result := Replace ( result , result + 1 , un ) ;
73163: LD_ADDR_VAR 0 3
73167: PUSH
73168: LD_VAR 0 3
73172: PPUSH
73173: LD_VAR 0 3
73177: PUSH
73178: LD_INT 1
73180: PLUS
73181: PPUSH
73182: LD_VAR 0 4
73186: PPUSH
73187: CALL_OW 1
73191: ST_TO_ADDR
73192: GO 73118
73194: POP
73195: POP
// end ;
73196: LD_VAR 0 3
73200: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73201: LD_INT 0
73203: PPUSH
73204: PPUSH
73205: PPUSH
73206: PPUSH
73207: PPUSH
73208: PPUSH
73209: PPUSH
// result := [ ] ;
73210: LD_ADDR_VAR 0 4
73214: PUSH
73215: EMPTY
73216: ST_TO_ADDR
// if x - r < 0 then
73217: LD_VAR 0 1
73221: PUSH
73222: LD_VAR 0 3
73226: MINUS
73227: PUSH
73228: LD_INT 0
73230: LESS
73231: IFFALSE 73243
// min_x := 0 else
73233: LD_ADDR_VAR 0 8
73237: PUSH
73238: LD_INT 0
73240: ST_TO_ADDR
73241: GO 73259
// min_x := x - r ;
73243: LD_ADDR_VAR 0 8
73247: PUSH
73248: LD_VAR 0 1
73252: PUSH
73253: LD_VAR 0 3
73257: MINUS
73258: ST_TO_ADDR
// if y - r < 0 then
73259: LD_VAR 0 2
73263: PUSH
73264: LD_VAR 0 3
73268: MINUS
73269: PUSH
73270: LD_INT 0
73272: LESS
73273: IFFALSE 73285
// min_y := 0 else
73275: LD_ADDR_VAR 0 7
73279: PUSH
73280: LD_INT 0
73282: ST_TO_ADDR
73283: GO 73301
// min_y := y - r ;
73285: LD_ADDR_VAR 0 7
73289: PUSH
73290: LD_VAR 0 2
73294: PUSH
73295: LD_VAR 0 3
73299: MINUS
73300: ST_TO_ADDR
// max_x := x + r ;
73301: LD_ADDR_VAR 0 9
73305: PUSH
73306: LD_VAR 0 1
73310: PUSH
73311: LD_VAR 0 3
73315: PLUS
73316: ST_TO_ADDR
// max_y := y + r ;
73317: LD_ADDR_VAR 0 10
73321: PUSH
73322: LD_VAR 0 2
73326: PUSH
73327: LD_VAR 0 3
73331: PLUS
73332: ST_TO_ADDR
// for _x = min_x to max_x do
73333: LD_ADDR_VAR 0 5
73337: PUSH
73338: DOUBLE
73339: LD_VAR 0 8
73343: DEC
73344: ST_TO_ADDR
73345: LD_VAR 0 9
73349: PUSH
73350: FOR_TO
73351: IFFALSE 73452
// for _y = min_y to max_y do
73353: LD_ADDR_VAR 0 6
73357: PUSH
73358: DOUBLE
73359: LD_VAR 0 7
73363: DEC
73364: ST_TO_ADDR
73365: LD_VAR 0 10
73369: PUSH
73370: FOR_TO
73371: IFFALSE 73448
// begin if not ValidHex ( _x , _y ) then
73373: LD_VAR 0 5
73377: PPUSH
73378: LD_VAR 0 6
73382: PPUSH
73383: CALL_OW 488
73387: NOT
73388: IFFALSE 73392
// continue ;
73390: GO 73370
// if GetResourceTypeXY ( _x , _y ) then
73392: LD_VAR 0 5
73396: PPUSH
73397: LD_VAR 0 6
73401: PPUSH
73402: CALL_OW 283
73406: IFFALSE 73446
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73408: LD_ADDR_VAR 0 4
73412: PUSH
73413: LD_VAR 0 4
73417: PPUSH
73418: LD_VAR 0 4
73422: PUSH
73423: LD_INT 1
73425: PLUS
73426: PPUSH
73427: LD_VAR 0 5
73431: PUSH
73432: LD_VAR 0 6
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PPUSH
73441: CALL_OW 1
73445: ST_TO_ADDR
// end ;
73446: GO 73370
73448: POP
73449: POP
73450: GO 73350
73452: POP
73453: POP
// end ;
73454: LD_VAR 0 4
73458: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73459: LD_INT 0
73461: PPUSH
73462: PPUSH
73463: PPUSH
73464: PPUSH
73465: PPUSH
73466: PPUSH
73467: PPUSH
73468: PPUSH
// if not units then
73469: LD_VAR 0 1
73473: NOT
73474: IFFALSE 73478
// exit ;
73476: GO 73903
// result := UnitFilter ( units , [ f_ok ] ) ;
73478: LD_ADDR_VAR 0 3
73482: PUSH
73483: LD_VAR 0 1
73487: PPUSH
73488: LD_INT 50
73490: PUSH
73491: EMPTY
73492: LIST
73493: PPUSH
73494: CALL_OW 72
73498: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73499: LD_ADDR_VAR 0 8
73503: PUSH
73504: LD_VAR 0 1
73508: PUSH
73509: LD_INT 1
73511: ARRAY
73512: PPUSH
73513: CALL_OW 255
73517: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
73518: LD_ADDR_VAR 0 10
73522: PUSH
73523: LD_INT 29
73525: PUSH
73526: LD_EXP 42
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: ST_TO_ADDR
// if not result then
73535: LD_VAR 0 3
73539: NOT
73540: IFFALSE 73544
// exit ;
73542: GO 73903
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73544: LD_ADDR_VAR 0 5
73548: PUSH
73549: LD_INT 81
73551: PUSH
73552: LD_VAR 0 8
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PPUSH
73561: CALL_OW 69
73565: ST_TO_ADDR
// for i in result do
73566: LD_ADDR_VAR 0 4
73570: PUSH
73571: LD_VAR 0 3
73575: PUSH
73576: FOR_IN
73577: IFFALSE 73901
// begin tag := GetTag ( i ) + 1 ;
73579: LD_ADDR_VAR 0 9
73583: PUSH
73584: LD_VAR 0 4
73588: PPUSH
73589: CALL_OW 110
73593: PUSH
73594: LD_INT 1
73596: PLUS
73597: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73598: LD_ADDR_VAR 0 7
73602: PUSH
73603: LD_VAR 0 4
73607: PPUSH
73608: CALL_OW 250
73612: PPUSH
73613: LD_VAR 0 4
73617: PPUSH
73618: CALL_OW 251
73622: PPUSH
73623: LD_INT 6
73625: PPUSH
73626: CALL 73201 0 3
73630: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73631: LD_VAR 0 7
73635: PUSH
73636: LD_VAR 0 4
73640: PPUSH
73641: CALL_OW 264
73645: PUSH
73646: LD_VAR 0 10
73650: IN
73651: NOT
73652: AND
73653: IFFALSE 73692
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73655: LD_VAR 0 4
73659: PPUSH
73660: LD_VAR 0 7
73664: PUSH
73665: LD_INT 1
73667: ARRAY
73668: PUSH
73669: LD_INT 1
73671: ARRAY
73672: PPUSH
73673: LD_VAR 0 7
73677: PUSH
73678: LD_INT 1
73680: ARRAY
73681: PUSH
73682: LD_INT 2
73684: ARRAY
73685: PPUSH
73686: CALL_OW 116
73690: GO 73899
// if path > tag then
73692: LD_VAR 0 2
73696: PUSH
73697: LD_VAR 0 9
73701: GREATER
73702: IFFALSE 73869
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
73704: LD_ADDR_VAR 0 6
73708: PUSH
73709: LD_VAR 0 5
73713: PPUSH
73714: LD_INT 91
73716: PUSH
73717: LD_VAR 0 4
73721: PUSH
73722: LD_INT 12
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: LIST
73729: PPUSH
73730: CALL_OW 72
73734: ST_TO_ADDR
// if nearEnemy then
73735: LD_VAR 0 6
73739: IFFALSE 73767
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73741: LD_VAR 0 4
73745: PPUSH
73746: LD_VAR 0 6
73750: PPUSH
73751: LD_VAR 0 4
73755: PPUSH
73756: CALL_OW 74
73760: PPUSH
73761: CALL_OW 115
73765: GO 73867
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73767: LD_VAR 0 4
73771: PPUSH
73772: LD_VAR 0 2
73776: PUSH
73777: LD_VAR 0 9
73781: ARRAY
73782: PUSH
73783: LD_INT 1
73785: ARRAY
73786: PPUSH
73787: LD_VAR 0 2
73791: PUSH
73792: LD_VAR 0 9
73796: ARRAY
73797: PUSH
73798: LD_INT 2
73800: ARRAY
73801: PPUSH
73802: CALL_OW 297
73806: PUSH
73807: LD_INT 6
73809: GREATER
73810: IFFALSE 73853
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73812: LD_VAR 0 4
73816: PPUSH
73817: LD_VAR 0 2
73821: PUSH
73822: LD_VAR 0 9
73826: ARRAY
73827: PUSH
73828: LD_INT 1
73830: ARRAY
73831: PPUSH
73832: LD_VAR 0 2
73836: PUSH
73837: LD_VAR 0 9
73841: ARRAY
73842: PUSH
73843: LD_INT 2
73845: ARRAY
73846: PPUSH
73847: CALL_OW 114
73851: GO 73867
// SetTag ( i , tag ) ;
73853: LD_VAR 0 4
73857: PPUSH
73858: LD_VAR 0 9
73862: PPUSH
73863: CALL_OW 109
// end else
73867: GO 73899
// if enemy then
73869: LD_VAR 0 5
73873: IFFALSE 73899
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73875: LD_VAR 0 4
73879: PPUSH
73880: LD_VAR 0 5
73884: PPUSH
73885: LD_VAR 0 4
73889: PPUSH
73890: CALL_OW 74
73894: PPUSH
73895: CALL_OW 115
// end ;
73899: GO 73576
73901: POP
73902: POP
// end ;
73903: LD_VAR 0 3
73907: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73908: LD_INT 0
73910: PPUSH
73911: PPUSH
73912: PPUSH
// if not unit or IsInUnit ( unit ) then
73913: LD_VAR 0 1
73917: NOT
73918: PUSH
73919: LD_VAR 0 1
73923: PPUSH
73924: CALL_OW 310
73928: OR
73929: IFFALSE 73933
// exit ;
73931: GO 74024
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73933: LD_ADDR_VAR 0 4
73937: PUSH
73938: LD_VAR 0 1
73942: PPUSH
73943: CALL_OW 250
73947: PPUSH
73948: LD_VAR 0 2
73952: PPUSH
73953: LD_INT 1
73955: PPUSH
73956: CALL_OW 272
73960: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73961: LD_ADDR_VAR 0 5
73965: PUSH
73966: LD_VAR 0 1
73970: PPUSH
73971: CALL_OW 251
73975: PPUSH
73976: LD_VAR 0 2
73980: PPUSH
73981: LD_INT 1
73983: PPUSH
73984: CALL_OW 273
73988: ST_TO_ADDR
// if ValidHex ( x , y ) then
73989: LD_VAR 0 4
73993: PPUSH
73994: LD_VAR 0 5
73998: PPUSH
73999: CALL_OW 488
74003: IFFALSE 74024
// ComTurnXY ( unit , x , y ) ;
74005: LD_VAR 0 1
74009: PPUSH
74010: LD_VAR 0 4
74014: PPUSH
74015: LD_VAR 0 5
74019: PPUSH
74020: CALL_OW 118
// end ;
74024: LD_VAR 0 3
74028: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74029: LD_INT 0
74031: PPUSH
74032: PPUSH
// result := false ;
74033: LD_ADDR_VAR 0 3
74037: PUSH
74038: LD_INT 0
74040: ST_TO_ADDR
// if not units then
74041: LD_VAR 0 2
74045: NOT
74046: IFFALSE 74050
// exit ;
74048: GO 74095
// for i in units do
74050: LD_ADDR_VAR 0 4
74054: PUSH
74055: LD_VAR 0 2
74059: PUSH
74060: FOR_IN
74061: IFFALSE 74093
// if See ( side , i ) then
74063: LD_VAR 0 1
74067: PPUSH
74068: LD_VAR 0 4
74072: PPUSH
74073: CALL_OW 292
74077: IFFALSE 74091
// begin result := true ;
74079: LD_ADDR_VAR 0 3
74083: PUSH
74084: LD_INT 1
74086: ST_TO_ADDR
// exit ;
74087: POP
74088: POP
74089: GO 74095
// end ;
74091: GO 74060
74093: POP
74094: POP
// end ;
74095: LD_VAR 0 3
74099: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74100: LD_INT 0
74102: PPUSH
74103: PPUSH
74104: PPUSH
74105: PPUSH
// if not unit or not points then
74106: LD_VAR 0 1
74110: NOT
74111: PUSH
74112: LD_VAR 0 2
74116: NOT
74117: OR
74118: IFFALSE 74122
// exit ;
74120: GO 74212
// dist := 99999 ;
74122: LD_ADDR_VAR 0 5
74126: PUSH
74127: LD_INT 99999
74129: ST_TO_ADDR
// for i in points do
74130: LD_ADDR_VAR 0 4
74134: PUSH
74135: LD_VAR 0 2
74139: PUSH
74140: FOR_IN
74141: IFFALSE 74210
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74143: LD_ADDR_VAR 0 6
74147: PUSH
74148: LD_VAR 0 1
74152: PPUSH
74153: LD_VAR 0 4
74157: PUSH
74158: LD_INT 1
74160: ARRAY
74161: PPUSH
74162: LD_VAR 0 4
74166: PUSH
74167: LD_INT 2
74169: ARRAY
74170: PPUSH
74171: CALL_OW 297
74175: ST_TO_ADDR
// if tmpDist < dist then
74176: LD_VAR 0 6
74180: PUSH
74181: LD_VAR 0 5
74185: LESS
74186: IFFALSE 74208
// begin result := i ;
74188: LD_ADDR_VAR 0 3
74192: PUSH
74193: LD_VAR 0 4
74197: ST_TO_ADDR
// dist := tmpDist ;
74198: LD_ADDR_VAR 0 5
74202: PUSH
74203: LD_VAR 0 6
74207: ST_TO_ADDR
// end ; end ;
74208: GO 74140
74210: POP
74211: POP
// end ; end_of_file
74212: LD_VAR 0 3
74216: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74217: LD_VAR 0 1
74221: PUSH
74222: LD_INT 200
74224: DOUBLE
74225: GREATEREQUAL
74226: IFFALSE 74234
74228: LD_INT 299
74230: DOUBLE
74231: LESSEQUAL
74232: IFTRUE 74236
74234: GO 74268
74236: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74237: LD_VAR 0 1
74241: PPUSH
74242: LD_VAR 0 2
74246: PPUSH
74247: LD_VAR 0 3
74251: PPUSH
74252: LD_VAR 0 4
74256: PPUSH
74257: LD_VAR 0 5
74261: PPUSH
74262: CALL 29864 0 5
74266: GO 74345
74268: LD_INT 300
74270: DOUBLE
74271: GREATEREQUAL
74272: IFFALSE 74280
74274: LD_INT 399
74276: DOUBLE
74277: LESSEQUAL
74278: IFTRUE 74282
74280: GO 74344
74282: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74283: LD_VAR 0 1
74287: PPUSH
74288: LD_VAR 0 2
74292: PPUSH
74293: LD_VAR 0 3
74297: PPUSH
74298: LD_VAR 0 4
74302: PPUSH
74303: LD_VAR 0 5
74307: PPUSH
74308: LD_VAR 0 6
74312: PPUSH
74313: LD_VAR 0 7
74317: PPUSH
74318: LD_VAR 0 8
74322: PPUSH
74323: LD_VAR 0 9
74327: PPUSH
74328: LD_VAR 0 10
74332: PPUSH
74333: LD_VAR 0 11
74337: PPUSH
74338: CALL 27506 0 11
74342: GO 74345
74344: POP
// end ;
74345: PPOPN 11
74347: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74348: LD_VAR 0 1
74352: PPUSH
74353: LD_VAR 0 2
74357: PPUSH
74358: LD_VAR 0 3
74362: PPUSH
74363: LD_VAR 0 4
74367: PPUSH
74368: LD_VAR 0 5
74372: PPUSH
74373: CALL 29600 0 5
// end ; end_of_file
74377: PPOPN 5
74379: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74380: LD_VAR 0 1
74384: PPUSH
74385: LD_VAR 0 2
74389: PPUSH
74390: LD_VAR 0 3
74394: PPUSH
74395: LD_VAR 0 4
74399: PPUSH
74400: LD_VAR 0 5
74404: PPUSH
74405: LD_VAR 0 6
74409: PPUSH
74410: CALL 15199 0 6
// end ;
74414: PPOPN 6
74416: END
