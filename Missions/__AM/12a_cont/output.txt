// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9539 0 0
// PrepareAlliance ;
  19: CALL 352 0 0
// PrepareFriends ;
  23: CALL 3821 0 0
// PrepareAmerican ;
  27: CALL 789 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 17
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 15
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9875 0 0
// PreparePatrol ;
 117: CALL 1413 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert , def_counter ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// def_counter := 0 ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// end ;
 251: LD_VAR 0 1
 255: RET
// every 0 0$1 trigger on_hill do
 256: LD_EXP 7
 260: IFFALSE 272
 262: GO 264
 264: DISABLE
// SetAchievement ( ACH_EYE ) ;
 265: LD_STRING ACH_EYE
 267: PPUSH
 268: CALL_OW 543
 272: END
// every 0 0$1 trigger not invis_used do var i ;
 273: LD_EXP 12
 277: NOT
 278: IFFALSE 349
 280: GO 282
 282: DISABLE
 283: LD_INT 0
 285: PPUSH
// begin enable ;
 286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 287: LD_ADDR_VAR 0 1
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_INT 7
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 21
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 347
// if IsInvisible ( i ) then
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 571
 333: IFFALSE 345
// begin invis_used := true ;
 335: LD_ADDR_EXP 12
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// break ;
 343: GO 347
// end ;
 345: GO 321
 347: POP
 348: POP
// end ; end_of_file
 349: PPOPN 1
 351: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 352: LD_INT 0
 354: PPUSH
 355: PPUSH
// uc_side := 7 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 7
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 372: LD_ADDR_EXP 15
 376: PUSH
 377: LD_STRING JMM
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: LD_STRING 11_
 388: PPUSH
 389: CALL 36384 0 3
 393: ST_TO_ADDR
// uc_side := 4 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 4
 401: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Roth
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 415: LD_EXP 15
 419: PPUSH
 420: LD_INT 1
 422: PPUSH
 423: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 427: LD_EXP 15
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 439: LD_EXP 15
 443: PPUSH
 444: LD_INT 105
 446: PPUSH
 447: LD_INT 10
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 457: LD_EXP 16
 461: PPUSH
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 469: LD_EXP 16
 473: PPUSH
 474: LD_INT 109
 476: PPUSH
 477: LD_INT 10
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 16
 496: PPUSH
 497: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 501: LD_EXP 16
 505: PPUSH
 506: LD_EXP 15
 510: PPUSH
 511: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 515: LD_INT 3
 517: PPUSH
 518: LD_INT 3
 520: PPUSH
 521: LD_INT 3
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: LD_INT 100
 529: PPUSH
 530: CALL 41224 0 5
// cargo := CreateVehicle ;
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: CALL_OW 45
 543: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 556: LD_VAR 0 2
 560: PPUSH
 561: LD_INT 179
 563: PPUSH
 564: LD_INT 45
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 4
 581: PPUSH
 582: LD_INT 30
 584: PPUSH
 585: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 589: LD_STRING 11_artifact_captured
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: IFFALSE 656
// begin cargo := CreateVehicle ;
 601: LD_ADDR_VAR 0 2
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 171
 630: PPUSH
 631: LD_INT 85
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 641: LD_VAR 0 2
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 50
 651: PPUSH
 652: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 656: LD_INT 47
 658: PPUSH
 659: LD_INT 7
 661: PPUSH
 662: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 666: LD_INT 1
 668: PPUSH
 669: LD_INT 47
 671: PPUSH
 672: CALL_OW 471
// end ;
 676: LD_VAR 0 1
 680: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 681: LD_INT 38
 683: PPUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 7
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 70
 698: PUSH
 699: LD_EXP 7
 703: NOT
 704: AND
 705: IFFALSE 736
 707: GO 709
 709: DISABLE
// begin enable ;
 710: ENABLE
// on_hill := true ;
 711: LD_ADDR_EXP 7
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 719: LD_INT 126
 721: PPUSH
 722: LD_INT 13
 724: PPUSH
 725: LD_INT 7
 727: PPUSH
 728: LD_INT 90
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 22
 742: PUSH
 743: LD_INT 7
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 70
 754: NOT
 755: PUSH
 756: LD_EXP 7
 760: AND
 761: IFFALSE 788
 763: GO 765
 765: DISABLE
// begin enable ;
 766: ENABLE
// on_hill := false ;
 767: LD_ADDR_EXP 7
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 775: LD_INT 126
 777: PPUSH
 778: LD_INT 13
 780: PPUSH
 781: LD_INT 7
 783: PPUSH
 784: CALL_OW 331
// end ; end_of_file
 788: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 789: LD_INT 0
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
 795: PPUSH
 796: PPUSH
// if Difficulty = 1 then
 797: LD_OWVAR 67
 801: PUSH
 802: LD_INT 1
 804: EQUAL
 805: IFFALSE 913
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 807: LD_ADDR_VAR 0 6
 811: PUSH
 812: LD_INT 155
 814: PUSH
 815: LD_INT 77
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 193
 824: PUSH
 825: LD_INT 93
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 188
 834: PUSH
 835: LD_INT 81
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 56
 844: PUSH
 845: LD_INT 85
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 98
 854: PUSH
 855: LD_INT 87
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: ST_TO_ADDR
// for i in tmp do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 6
 878: PUSH
 879: FOR_IN
 880: IFFALSE 911
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 882: LD_VAR 0 2
 886: PUSH
 887: LD_INT 1
 889: ARRAY
 890: PPUSH
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 2
 898: ARRAY
 899: PPUSH
 900: CALL_OW 428
 904: PPUSH
 905: CALL_OW 64
 909: GO 879
 911: POP
 912: POP
// end ; defcon := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defcon_wave := 0 ;
 921: LD_ADDR_EXP 23
 925: PUSH
 926: LD_INT 0
 928: ST_TO_ADDR
// defenders := [ ] ;
 929: LD_ADDR_EXP 21
 933: PUSH
 934: EMPTY
 935: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 936: LD_INT 5
 938: PPUSH
 939: LD_STRING alfa
 941: PPUSH
 942: CALL_OW 500
// uc_side := 1 ;
 946: LD_ADDR_OWVAR 20
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// uc_nation := 1 ;
 954: LD_ADDR_OWVAR 21
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 962: LD_ADDR_EXP 17
 966: PUSH
 967: LD_STRING Powell
 969: PPUSH
 970: CALL_OW 25
 974: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 975: LD_EXP 17
 979: PPUSH
 980: LD_INT 110
 982: PPUSH
 983: LD_INT 26
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 48
// ComHold ( Powell ) ;
 993: LD_EXP 17
 997: PPUSH
 998: CALL_OW 140
// for i := 1 to 5 do
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: DOUBLE
1008: LD_INT 1
1010: DEC
1011: ST_TO_ADDR
1012: LD_INT 5
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1072
// begin PrepareHuman ( false , 1 , 10 ) ;
1018: LD_INT 0
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1031: LD_ADDR_EXP 20
1035: PUSH
1036: LD_EXP 20
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: CALL_OW 44
1048: PPUSH
1049: CALL_OW 2
1053: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1054: LD_EXP 20
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_INT 18
1065: PPUSH
1066: CALL_OW 52
// end ;
1070: GO 1015
1072: POP
1073: POP
// if Difficulty > 1 then
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: GREATER
1082: IFFALSE 1233
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1084: LD_ADDR_VAR 0 6
1088: PUSH
1089: LD_INT 81
1091: PUSH
1092: LD_INT 33
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 134
1101: PUSH
1102: LD_INT 114
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 193
1111: PUSH
1112: LD_INT 102
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: DOUBLE
1130: LD_INT 1
1132: DEC
1133: ST_TO_ADDR
1134: LD_OWVAR 67
1138: PUSH
1139: LD_INT 1
1141: MINUS
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1231
// begin PrepareSoldier ( false , 10 ) ;
1146: LD_INT 0
1148: PPUSH
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 381
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1166: LD_VAR 0 5
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1178: LD_VAR 0 5
1182: PPUSH
1183: LD_VAR 0 6
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 6
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PUSH
1209: LD_INT 2
1211: ARRAY
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// ComHold ( un ) ;
1220: LD_VAR 0 5
1224: PPUSH
1225: CALL_OW 140
// end ;
1229: GO 1143
1231: POP
1232: POP
// end ; if Difficulty > 2 then
1233: LD_OWVAR 67
1237: PUSH
1238: LD_INT 2
1240: GREATER
1241: IFFALSE 1290
// begin bc_type := b_turret ;
1243: LD_ADDR_OWVAR 42
1247: PUSH
1248: LD_INT 33
1250: ST_TO_ADDR
// bc_level := 7 ;
1251: LD_ADDR_OWVAR 43
1255: PUSH
1256: LD_INT 7
1258: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_INT 107
1266: PPUSH
1267: LD_INT 55
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 47
1277: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1278: LD_VAR 0 4
1282: PPUSH
1283: LD_INT 7
1285: PPUSH
1286: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1290: LD_ADDR_VAR 0 2
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 3
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: PUSH
1324: LD_INT 22
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: LD_INT 30
1336: PUSH
1337: LD_INT 36
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 69
1352: ADD
1353: PUSH
1354: FOR_IN
1355: IFFALSE 1406
// for j = 1 to 3 do
1357: LD_ADDR_VAR 0 3
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_INT 3
1369: PUSH
1370: FOR_TO
1371: IFFALSE 1402
// begin PrepareHuman ( false , 3 , 6 ) ;
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 6
1381: PPUSH
1382: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1386: CALL_OW 44
1390: PPUSH
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: GO 1370
1402: POP
1403: POP
1404: GO 1354
1406: POP
1407: POP
// end ;
1408: LD_VAR 0 1
1412: RET
// export function PreparePatrol ; var i , un ; begin
1413: LD_INT 0
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_side := 1 ;
1418: LD_ADDR_OWVAR 20
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_nation := 1 ;
1426: LD_ADDR_OWVAR 21
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1434: LD_ADDR_EXP 19
1438: PUSH
1439: LD_INT 99
1441: PUSH
1442: LD_INT 55
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 113
1451: PUSH
1452: LD_INT 67
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 129
1461: PUSH
1462: LD_INT 68
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 135
1471: PUSH
1472: LD_INT 62
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 103
1481: PUSH
1482: LD_INT 41
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 27
1498: PUSH
1499: LD_INT 49
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 46
1508: PUSH
1509: LD_INT 49
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: LD_INT 87
1518: PUSH
1519: LD_INT 70
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 99
1528: PUSH
1529: LD_INT 79
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 118
1538: PUSH
1539: LD_INT 111
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 99
1548: PUSH
1549: LD_INT 79
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 87
1558: PUSH
1559: LD_INT 70
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 46
1568: PUSH
1569: LD_INT 49
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 200
1588: PUSH
1589: LD_INT 88
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 175
1598: PUSH
1599: LD_INT 80
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 135
1608: PUSH
1609: LD_INT 62
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 117
1618: PUSH
1619: LD_INT 53
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 103
1628: PUSH
1629: LD_INT 41
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 99
1638: PUSH
1639: LD_INT 24
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 85
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 99
1658: PUSH
1659: LD_INT 24
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 103
1668: PUSH
1669: LD_INT 41
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 98
1678: PUSH
1679: LD_INT 47
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 99
1688: PUSH
1689: LD_INT 56
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 96
1698: PUSH
1699: LD_INT 66
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 99
1708: PUSH
1709: LD_INT 56
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 112
1718: PUSH
1719: LD_INT 66
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 129
1728: PUSH
1729: LD_INT 68
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 135
1738: PUSH
1739: LD_INT 62
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 156
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 168
1758: PUSH
1759: LD_INT 76
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 168
1768: PUSH
1769: LD_INT 61
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 168
1778: PUSH
1779: LD_INT 75
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 185
1788: PUSH
1789: LD_INT 85
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// mobile_patrol := [ ] ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: EMPTY
1830: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1831: LD_INT 3
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: LD_INT 3
1839: PPUSH
1840: LD_INT 4
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL 41224 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1850: LD_ADDR_EXP 18
1854: PUSH
1855: LD_EXP 18
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 45
1867: PPUSH
1868: CALL_OW 2
1872: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1873: LD_EXP 18
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: LD_INT 99
1884: PPUSH
1885: LD_INT 55
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1895: LD_INT 2
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 3
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 100
1909: PPUSH
1910: CALL 41224 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_EXP 18
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: CALL_OW 45
1931: PPUSH
1932: CALL_OW 2
1936: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1937: LD_EXP 18
1941: PUSH
1942: LD_INT 2
1944: ARRAY
1945: PPUSH
1946: LD_INT 27
1948: PPUSH
1949: LD_INT 49
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1959: LD_INT 3
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: LD_INT 9
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 7
1976: PUSH
1977: LD_INT 7
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: LD_OWVAR 67
1990: ARRAY
1991: PPUSH
1992: LD_INT 100
1994: PPUSH
1995: CALL 41224 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1999: LD_ADDR_EXP 18
2003: PUSH
2004: LD_EXP 18
2008: PPUSH
2009: LD_INT 3
2011: PPUSH
2012: CALL_OW 45
2016: PPUSH
2017: CALL_OW 2
2021: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2022: LD_EXP 18
2026: PUSH
2027: LD_INT 3
2029: ARRAY
2030: PPUSH
2031: LD_INT 200
2033: PPUSH
2034: LD_INT 88
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 48
// for i := mobile_patrol downto 1 do
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: DOUBLE
2050: LD_EXP 18
2054: INC
2055: ST_TO_ADDR
2056: LD_INT 1
2058: PUSH
2059: FOR_DOWNTO
2060: IFFALSE 2071
// RaiseSailEvent ( 1 ) ;
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 427
2069: GO 2059
2071: POP
2072: POP
// end ;
2073: LD_VAR 0 1
2077: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2088: LD_ADDR_VAR 0 5
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 21
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 22
2115: PUSH
2116: LD_INT 1
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2128: LD_ADDR_VAR 0 6
2132: PUSH
2133: LD_INT 176
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 135
2141: PUSH
2142: LD_INT 62
2144: PUSH
2145: LD_INT 114
2147: PUSH
2148: LD_INT 67
2150: PUSH
2151: LD_INT 93
2153: PUSH
2154: LD_INT 71
2156: PUSH
2157: LD_INT 76
2159: PUSH
2160: LD_INT 67
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 107
2177: PUSH
2178: LD_INT 92
2180: PUSH
2181: LD_INT 92
2183: PUSH
2184: LD_INT 72
2186: PUSH
2187: LD_INT 77
2189: PUSH
2190: LD_INT 68
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 45
2203: PUSH
2204: LD_INT 49
2206: PUSH
2207: LD_INT 67
2209: PUSH
2210: LD_INT 59
2212: PUSH
2213: LD_INT 77
2215: PUSH
2216: LD_INT 68
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2232: LD_ADDR_VAR 0 4
2236: PUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_VAR 0 5
2244: PPUSH
2245: CALL_OW 12
2249: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 2
2260: PPUSH
2261: CALL_OW 12
2265: ST_TO_ADDR
// uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2282: LD_INT 2
2284: PPUSH
2285: LD_INT 3
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: LD_INT 12
2293: PPUSH
2294: LD_INT 100
2296: PPUSH
2297: CALL 41224 0 5
// veh := CreateVehicle ;
2301: LD_ADDR_VAR 0 8
2305: PUSH
2306: CALL_OW 45
2310: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2311: LD_VAR 0 8
2315: PPUSH
2316: LD_VAR 0 5
2320: PUSH
2321: LD_VAR 0 4
2325: ARRAY
2326: PUSH
2327: LD_INT 2
2329: ARRAY
2330: PPUSH
2331: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2335: LD_VAR 0 8
2339: PPUSH
2340: LD_VAR 0 5
2344: PUSH
2345: LD_VAR 0 4
2349: ARRAY
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2362: LD_VAR 0 8
2366: PPUSH
2367: LD_INT 1
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_VAR 0 3
2381: ARRAY
2382: PPUSH
2383: LD_INT 100
2385: PPUSH
2386: CALL_OW 290
// tmp := road [ k ] ;
2390: LD_ADDR_VAR 0 7
2394: PUSH
2395: LD_VAR 0 6
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_VAR 0 7
2420: PUSH
2421: LD_INT 2
2423: DIV
2424: PUSH
2425: FOR_TO
2426: IFFALSE 2473
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 7
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_INT 2
2445: MUL
2446: PUSH
2447: LD_INT 1
2449: MINUS
2450: ARRAY
2451: PPUSH
2452: LD_VAR 0 7
2456: PUSH
2457: LD_VAR 0 2
2461: PUSH
2462: LD_INT 2
2464: MUL
2465: ARRAY
2466: PPUSH
2467: CALL_OW 171
2471: GO 2425
2473: POP
2474: POP
// AddComGive ( veh , alfa ) ;
2475: LD_VAR 0 8
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2487: LD_VAR 0 8
2491: PPUSH
2492: LD_INT 70
2494: PPUSH
2495: CALL_OW 202
// for i = tmp div 2 downto 1 do
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: DOUBLE
2505: LD_VAR 0 7
2509: PUSH
2510: LD_INT 2
2512: DIV
2513: INC
2514: ST_TO_ADDR
2515: LD_INT 1
2517: PUSH
2518: FOR_DOWNTO
2519: IFFALSE 2566
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2521: LD_VAR 0 8
2525: PPUSH
2526: LD_VAR 0 7
2530: PUSH
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 2
2538: MUL
2539: PUSH
2540: LD_INT 1
2542: MINUS
2543: ARRAY
2544: PPUSH
2545: LD_VAR 0 7
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_INT 2
2557: MUL
2558: ARRAY
2559: PPUSH
2560: CALL_OW 171
2564: GO 2518
2566: POP
2567: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2568: LD_VAR 0 8
2572: PPUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_VAR 0 4
2582: ARRAY
2583: PUSH
2584: LD_INT 1
2586: ARRAY
2587: PPUSH
2588: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2592: LD_INT 35
2594: PPUSH
2595: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2599: LD_VAR 0 8
2603: PPUSH
2604: LD_VAR 0 5
2608: PUSH
2609: LD_VAR 0 4
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_VAR 0 8
2628: PPUSH
2629: LD_VAR 0 3
2633: PPUSH
2634: CALL_OW 289
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: AND
2643: IFFALSE 2592
// RemoveUnit ( veh ) ;
2645: LD_VAR 0 8
2649: PPUSH
2650: CALL_OW 64
// end ;
2654: LD_VAR 0 1
2658: RET
// every 3 3$00 do
2659: GO 2661
2661: DISABLE
// begin enable ;
2662: ENABLE
// SpawnCargo ;
2663: CALL 2078 0 0
// end ;
2667: END
// export function PrepareDefenders ; var i , tmp ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
// if defenders then
2673: LD_EXP 21
2677: IFFALSE 2681
// exit ;
2679: GO 2953
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2681: LD_ADDR_VAR 0 2
2685: PUSH
2686: DOUBLE
2687: LD_INT 1
2689: DEC
2690: ST_TO_ADDR
2691: LD_INT 4
2693: PUSH
2694: LD_INT 5
2696: PUSH
2697: LD_INT 6
2699: PUSH
2700: LD_INT 7
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2855
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 6
2725: PPUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: CALL_OW 12
2746: ARRAY
2747: PPUSH
2748: LD_INT 1
2750: PUSH
2751: LD_INT 3
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 1
2760: PPUSH
2761: LD_INT 2
2763: PPUSH
2764: CALL_OW 12
2768: ARRAY
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: LD_INT 9
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 1
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: CALL_OW 12
2797: ARRAY
2798: PPUSH
2799: CALL 38844 0 5
2803: ST_TO_ADDR
// if tmp then
2804: LD_VAR 0 3
2808: IFFALSE 2853
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2810: LD_INT 6
2812: PPUSH
2813: LD_VAR 0 3
2817: PUSH
2818: LD_INT 1
2820: ARRAY
2821: PPUSH
2822: LD_VAR 0 3
2826: PUSH
2827: LD_INT 2
2829: ARRAY
2830: PPUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_INT 3
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 3
2844: PUSH
2845: LD_INT 4
2847: ARRAY
2848: PPUSH
2849: CALL_OW 185
// end ;
2853: GO 2715
2855: POP
2856: POP
// repeat wait ( 0 0$1 ) ;
2857: LD_INT 35
2859: PPUSH
2860: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 33
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_INT 4
2895: PUSH
2896: LD_INT 5
2898: PUSH
2899: LD_INT 6
2901: PUSH
2902: LD_INT 7
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_OWVAR 67
2915: ARRAY
2916: GREATEREQUAL
2917: IFFALSE 2857
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2919: LD_ADDR_EXP 21
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 1
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 33
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: ST_TO_ADDR
// end ;
2953: LD_VAR 0 1
2957: RET
// export function Defend ; var i , un , veh , tmp ; begin
2958: LD_INT 0
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
// defcon_wave := defcon_wave + 1 ;
2965: LD_ADDR_EXP 23
2969: PUSH
2970: LD_EXP 23
2974: PUSH
2975: LD_INT 1
2977: PLUS
2978: ST_TO_ADDR
// if not defenders then
2979: LD_EXP 21
2983: NOT
2984: IFFALSE 2990
// PrepareDefenders ;
2986: CALL 2668 0 0
// if defcon_wave > 1 then
2990: LD_EXP 23
2994: PUSH
2995: LD_INT 1
2997: GREATER
2998: IFFALSE 3256
// begin for i = 1 to defcon_wave + 2 do
3000: LD_ADDR_VAR 0 2
3004: PUSH
3005: DOUBLE
3006: LD_INT 1
3008: DEC
3009: ST_TO_ADDR
3010: LD_EXP 23
3014: PUSH
3015: LD_INT 2
3017: PLUS
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3162
// begin uc_side := 1 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// uc_nation := 1 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 1
3037: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 3
3043: PPUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: LD_INT 7
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: CALL_OW 12
3071: ARRAY
3072: PPUSH
3073: LD_INT 100
3075: PPUSH
3076: CALL 41224 0 5
// veh := CreateVehicle ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: CALL_OW 45
3089: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 233
// defenders := defenders ^ veh ;
3102: LD_ADDR_EXP 21
3106: PUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_VAR 0 4
3116: ADD
3117: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3118: LD_INT 0
3120: PPUSH
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 9
3126: PPUSH
3127: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3131: CALL_OW 44
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 25
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL_OW 49
// end ;
3160: GO 3019
3162: POP
3163: POP
// for i = 1 to defcon_wave do
3164: LD_ADDR_VAR 0 2
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_EXP 23
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3254
// begin uc_side := 1 ;
3182: LD_ADDR_OWVAR 20
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// uc_nation := 1 ;
3190: LD_ADDR_OWVAR 21
3194: PUSH
3195: LD_INT 1
3197: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 5
3203: PPUSH
3204: LD_INT 9
3206: PPUSH
3207: CALL_OW 380
// un := CreateHuman ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: CALL_OW 44
3220: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3221: LD_VAR 0 3
3225: PPUSH
3226: LD_INT 25
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
// defenders := defenders ^ un ;
3236: LD_ADDR_EXP 21
3240: PUSH
3241: LD_EXP 21
3245: PUSH
3246: LD_VAR 0 3
3250: ADD
3251: ST_TO_ADDR
// end ;
3252: GO 3179
3254: POP
3255: POP
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// for i in defenders do
3263: LD_ADDR_VAR 0 2
3267: PUSH
3268: LD_EXP 21
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3356
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3276: LD_EXP 22
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_EXP 22
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: LD_EXP 22
3299: PUSH
3300: LD_INT 2
3302: ARRAY
3303: PPUSH
3304: CALL_OW 297
3308: PUSH
3309: LD_INT 10
3311: GREATER
3312: AND
3313: PUSH
3314: LD_VAR 0 2
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: AND
3325: IFFALSE 3354
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_EXP 22
3336: PUSH
3337: LD_INT 1
3339: ARRAY
3340: PPUSH
3341: LD_EXP 22
3345: PUSH
3346: LD_INT 2
3348: ARRAY
3349: PPUSH
3350: CALL_OW 114
// end ;
3354: GO 3273
3356: POP
3357: POP
// until not defenders ;
3358: LD_EXP 21
3362: NOT
3363: IFFALSE 3256
// end ;
3365: LD_VAR 0 1
3369: RET
// every 0 0$1 do var radar , i ;
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
// begin uc_side := 1 ;
3377: LD_ADDR_OWVAR 20
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// uc_nation := 1 ;
3385: LD_ADDR_OWVAR 21
3389: PUSH
3390: LD_INT 1
3392: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3393: LD_INT 1
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: LD_INT 11
3404: PPUSH
3405: LD_INT 100
3407: PPUSH
3408: CALL 41224 0 5
// radar := CreateVehicle ;
3412: LD_ADDR_VAR 0 1
3416: PUSH
3417: CALL_OW 45
3421: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3434: LD_VAR 0 1
3438: PPUSH
3439: LD_INT 51
3441: PPUSH
3442: LD_INT 45
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: LD_INT 700
3459: PPUSH
3460: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 75
3474: PPUSH
3475: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 350
3486: PPUSH
3487: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 83
3498: PPUSH
3499: LD_INT 87
3501: PPUSH
3502: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 525
3513: PPUSH
3514: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 94
3525: PPUSH
3526: LD_INT 81
3528: PPUSH
3529: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3533: LD_VAR 0 1
3537: PPUSH
3538: LD_INT 350
3540: PPUSH
3541: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3545: LD_VAR 0 1
3549: PPUSH
3550: LD_INT 55
3552: PPUSH
3553: LD_INT 48
3555: PPUSH
3556: CALL_OW 171
// wait ( 1 1$00 ) ;
3560: LD_INT 2100
3562: PPUSH
3563: CALL_OW 67
// until not IsOk ( radar ) ;
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 302
3576: NOT
3577: IFFALSE 3452
// end ;
3579: PPOPN 2
3581: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3582: LD_OWVAR 67
3586: PUSH
3587: LD_INT 1
3589: GREATER
3590: PUSH
3591: LD_EXP 11
3595: AND
3596: IFFALSE 3818
3598: GO 3600
3600: DISABLE
3601: LD_INT 0
3603: PPUSH
// begin enable ;
3604: ENABLE
// uc_side := 1 ;
3605: LD_ADDR_OWVAR 20
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// uc_nation := 1 ;
3613: LD_ADDR_OWVAR 21
3617: PUSH
3618: LD_INT 1
3620: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3621: LD_INT 5
3623: PPUSH
3624: LD_INT 3
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 100
3635: PPUSH
3636: CALL 41224 0 5
// un := CreateVehicle ;
3640: LD_ADDR_VAR 0 1
3644: PUSH
3645: CALL_OW 45
3649: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 3
3657: PPUSH
3658: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3662: LD_VAR 0 1
3666: PPUSH
3667: LD_INT 155
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 0
3675: PPUSH
3676: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3680: LD_VAR 0 1
3684: PPUSH
3685: LD_INT 169
3687: PPUSH
3688: LD_INT 77
3690: PPUSH
3691: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: LD_INT 70
3702: PPUSH
3703: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3707: LD_VAR 0 1
3711: PPUSH
3712: LD_INT 134
3714: PPUSH
3715: LD_INT 62
3717: PPUSH
3718: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_INT 103
3729: PPUSH
3730: LD_INT 42
3732: PPUSH
3733: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3737: LD_VAR 0 1
3741: PPUSH
3742: LD_INT 70
3744: PPUSH
3745: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3749: LD_VAR 0 1
3753: PPUSH
3754: LD_INT 84
3756: PPUSH
3757: LD_INT 2
3759: PPUSH
3760: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3764: LD_INT 35
3766: PPUSH
3767: CALL_OW 67
// if IsDead ( un ) then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 301
3780: IFFALSE 3792
// begin extra_patrol := false ;
3782: LD_ADDR_EXP 11
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// exit ;
3790: GO 3818
// end ; until IsAt ( un , 84 , 2 ) ;
3792: LD_VAR 0 1
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 2
3802: PPUSH
3803: CALL_OW 307
3807: IFFALSE 3764
// RemoveUnit ( un ) ;
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 64
// end ; end_of_file
3818: PPOPN 1
3820: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3821: LD_INT 0
3823: PPUSH
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// uc_side := 4 ;
3831: LD_ADDR_OWVAR 20
3835: PUSH
3836: LD_INT 4
3838: ST_TO_ADDR
// uc_nation := 1 ;
3839: LD_ADDR_OWVAR 21
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3847: LD_ADDR_EXP 38
3851: PUSH
3852: LD_STRING DeltaDoctor
3854: PPUSH
3855: LD_EXP 1
3859: NOT
3860: PPUSH
3861: LD_STRING 10c_
3863: PPUSH
3864: CALL 36384 0 3
3868: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3869: LD_ADDR_EXP 37
3873: PUSH
3874: LD_STRING Joan
3876: PPUSH
3877: LD_EXP 1
3881: NOT
3882: PPUSH
3883: LD_STRING 10c_
3885: PPUSH
3886: CALL 36384 0 3
3890: ST_TO_ADDR
// if Joan then
3891: LD_EXP 37
3895: IFFALSE 3926
// friends := Insert ( friends , friends + 1 , Joan ) ;
3897: LD_ADDR_EXP 4
3901: PUSH
3902: LD_EXP 4
3906: PPUSH
3907: LD_EXP 4
3911: PUSH
3912: LD_INT 1
3914: PLUS
3915: PPUSH
3916: LD_EXP 37
3920: PPUSH
3921: CALL_OW 2
3925: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3926: LD_ADDR_EXP 36
3930: PUSH
3931: LD_STRING Simms
3933: PPUSH
3934: LD_EXP 1
3938: NOT
3939: PPUSH
3940: LD_STRING 10c_
3942: PPUSH
3943: CALL 36384 0 3
3947: ST_TO_ADDR
// if debug then
3948: LD_EXP 1
3952: IFFALSE 3969
// Kikuchi := NewCharacter ( Yamoko ) else
3954: LD_ADDR_EXP 35
3958: PUSH
3959: LD_STRING Yamoko
3961: PPUSH
3962: CALL_OW 25
3966: ST_TO_ADDR
3967: GO 3991
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3969: LD_ADDR_EXP 35
3973: PUSH
3974: LD_STRING Kikuchi
3976: PPUSH
3977: LD_EXP 1
3981: NOT
3982: PPUSH
3983: LD_STRING 11_
3985: PPUSH
3986: CALL 36384 0 3
3990: ST_TO_ADDR
// if Kikuchi then
3991: LD_EXP 35
3995: IFFALSE 4026
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3997: LD_ADDR_EXP 4
4001: PUSH
4002: LD_EXP 4
4006: PPUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 1
4014: PLUS
4015: PPUSH
4016: LD_EXP 35
4020: PPUSH
4021: CALL_OW 2
4025: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
4026: LD_ADDR_EXP 34
4030: PUSH
4031: LD_STRING Frank
4033: PPUSH
4034: LD_EXP 1
4038: NOT
4039: PPUSH
4040: LD_STRING 11_
4042: PPUSH
4043: CALL 36384 0 3
4047: ST_TO_ADDR
// if Frank then
4048: LD_EXP 34
4052: IFFALSE 4083
// friends := Insert ( friends , friends + 1 , Frank ) ;
4054: LD_ADDR_EXP 4
4058: PUSH
4059: LD_EXP 4
4063: PPUSH
4064: LD_EXP 4
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: PPUSH
4073: LD_EXP 34
4077: PPUSH
4078: CALL_OW 2
4082: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4083: LD_ADDR_EXP 33
4087: PUSH
4088: LD_STRING Gary
4090: PPUSH
4091: LD_EXP 1
4095: NOT
4096: PPUSH
4097: LD_STRING 11_
4099: PPUSH
4100: CALL 36384 0 3
4104: ST_TO_ADDR
// if Gary then
4105: LD_EXP 33
4109: IFFALSE 4140
// friends := Insert ( friends , friends + 1 , Gary ) ;
4111: LD_ADDR_EXP 4
4115: PUSH
4116: LD_EXP 4
4120: PPUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 1
4128: PLUS
4129: PPUSH
4130: LD_EXP 33
4134: PPUSH
4135: CALL_OW 2
4139: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4140: LD_ADDR_EXP 32
4144: PUSH
4145: LD_STRING Cornell
4147: PPUSH
4148: LD_EXP 1
4152: NOT
4153: PPUSH
4154: LD_STRING 11_
4156: PPUSH
4157: CALL 36384 0 3
4161: ST_TO_ADDR
// if Cornel then
4162: LD_EXP 32
4166: IFFALSE 4197
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4168: LD_ADDR_EXP 4
4172: PUSH
4173: LD_EXP 4
4177: PPUSH
4178: LD_EXP 4
4182: PUSH
4183: LD_INT 1
4185: PLUS
4186: PPUSH
4187: LD_EXP 32
4191: PPUSH
4192: CALL_OW 2
4196: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4197: LD_ADDR_EXP 31
4201: PUSH
4202: LD_STRING Houten
4204: PPUSH
4205: LD_EXP 1
4209: NOT
4210: PPUSH
4211: LD_STRING 11_
4213: PPUSH
4214: CALL 36384 0 3
4218: ST_TO_ADDR
// if Houten then
4219: LD_EXP 31
4223: IFFALSE 4254
// friends := Insert ( friends , friends + 1 , Houten ) ;
4225: LD_ADDR_EXP 4
4229: PUSH
4230: LD_EXP 4
4234: PPUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 1
4242: PLUS
4243: PPUSH
4244: LD_EXP 31
4248: PPUSH
4249: CALL_OW 2
4253: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4254: LD_ADDR_EXP 30
4258: PUSH
4259: LD_STRING Gladstone
4261: PPUSH
4262: LD_EXP 1
4266: NOT
4267: PPUSH
4268: LD_STRING 11_
4270: PPUSH
4271: CALL 36384 0 3
4275: ST_TO_ADDR
// if Gladstone then
4276: LD_EXP 30
4280: IFFALSE 4311
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4282: LD_ADDR_EXP 4
4286: PUSH
4287: LD_EXP 4
4291: PPUSH
4292: LD_EXP 4
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: PPUSH
4301: LD_EXP 30
4305: PPUSH
4306: CALL_OW 2
4310: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4311: LD_ADDR_EXP 24
4315: PUSH
4316: LD_STRING Lisa
4318: PPUSH
4319: LD_EXP 1
4323: NOT
4324: PPUSH
4325: LD_STRING 11_
4327: PPUSH
4328: CALL 36384 0 3
4332: ST_TO_ADDR
// if Lisa then
4333: LD_EXP 24
4337: IFFALSE 4362
// friends := Insert ( friends , 1 , Lisa ) ;
4339: LD_ADDR_EXP 4
4343: PUSH
4344: LD_EXP 4
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: LD_EXP 24
4356: PPUSH
4357: CALL_OW 2
4361: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4362: LD_ADDR_EXP 25
4366: PUSH
4367: LD_STRING Donaldson
4369: PPUSH
4370: LD_EXP 1
4374: NOT
4375: PPUSH
4376: LD_STRING 11_
4378: PPUSH
4379: CALL 36384 0 3
4383: ST_TO_ADDR
// if Donaldson then
4384: LD_EXP 25
4388: IFFALSE 4419
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4390: LD_ADDR_EXP 4
4394: PUSH
4395: LD_EXP 4
4399: PPUSH
4400: LD_EXP 4
4404: PUSH
4405: LD_INT 1
4407: PLUS
4408: PPUSH
4409: LD_EXP 25
4413: PPUSH
4414: CALL_OW 2
4418: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4419: LD_ADDR_EXP 26
4423: PUSH
4424: LD_STRING Bobby
4426: PPUSH
4427: LD_EXP 1
4431: NOT
4432: PPUSH
4433: LD_STRING 11_
4435: PPUSH
4436: CALL 36384 0 3
4440: ST_TO_ADDR
// if Bobby then
4441: LD_EXP 26
4445: IFFALSE 4476
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4447: LD_ADDR_EXP 4
4451: PUSH
4452: LD_EXP 4
4456: PPUSH
4457: LD_EXP 4
4461: PUSH
4462: LD_INT 1
4464: PLUS
4465: PPUSH
4466: LD_EXP 26
4470: PPUSH
4471: CALL_OW 2
4475: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4476: LD_ADDR_EXP 27
4480: PUSH
4481: LD_STRING Cyrus
4483: PPUSH
4484: LD_EXP 1
4488: NOT
4489: PPUSH
4490: LD_STRING 11_
4492: PPUSH
4493: CALL 36384 0 3
4497: ST_TO_ADDR
// if Cyrus then
4498: LD_EXP 27
4502: IFFALSE 4533
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4504: LD_ADDR_EXP 4
4508: PUSH
4509: LD_EXP 4
4513: PPUSH
4514: LD_EXP 4
4518: PUSH
4519: LD_INT 1
4521: PLUS
4522: PPUSH
4523: LD_EXP 27
4527: PPUSH
4528: CALL_OW 2
4532: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4533: LD_ADDR_EXP 28
4537: PUSH
4538: LD_STRING Denis
4540: PPUSH
4541: LD_EXP 1
4545: NOT
4546: PPUSH
4547: LD_STRING 11_
4549: PPUSH
4550: CALL 36384 0 3
4554: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4555: LD_ADDR_EXP 29
4559: PUSH
4560: LD_STRING Brown
4562: PPUSH
4563: LD_EXP 1
4567: NOT
4568: PPUSH
4569: LD_STRING 11_
4571: PPUSH
4572: CALL 36384 0 3
4576: ST_TO_ADDR
// if Brown then
4577: LD_EXP 29
4581: IFFALSE 4612
// friends := Insert ( friends , friends + 1 , Brown ) ;
4583: LD_ADDR_EXP 4
4587: PUSH
4588: LD_EXP 4
4592: PPUSH
4593: LD_EXP 4
4597: PUSH
4598: LD_INT 1
4600: PLUS
4601: PPUSH
4602: LD_EXP 29
4606: PPUSH
4607: CALL_OW 2
4611: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4612: LD_ADDR_EXP 39
4616: PUSH
4617: LD_STRING Mike
4619: PPUSH
4620: LD_EXP 1
4624: NOT
4625: PPUSH
4626: LD_STRING 10c_
4628: PPUSH
4629: CALL 36384 0 3
4633: ST_TO_ADDR
// if Mike then
4634: LD_EXP 39
4638: IFFALSE 4679
// begin SetClass ( Mike , class_apeman_engineer ) ;
4640: LD_EXP 39
4644: PPUSH
4645: LD_INT 16
4647: PPUSH
4648: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4652: LD_EXP 39
4656: PPUSH
4657: LD_INT 180
4659: PPUSH
4660: LD_INT 87
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL_OW 48
// ComHold ( Mike ) ;
4670: LD_EXP 39
4674: PPUSH
4675: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4679: LD_ADDR_EXP 4
4683: PUSH
4684: LD_EXP 4
4688: PUSH
4689: LD_STRING 11c_others
4691: PPUSH
4692: CALL_OW 31
4696: ADD
4697: PUSH
4698: LD_STRING 11_others
4700: PPUSH
4701: CALL_OW 31
4705: ADD
4706: ST_TO_ADDR
// if friends < 18 then
4707: LD_EXP 4
4711: PUSH
4712: LD_INT 18
4714: LESS
4715: IFFALSE 4787
// for i = 1 to 18 do
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: DOUBLE
4723: LD_INT 1
4725: DEC
4726: ST_TO_ADDR
4727: LD_INT 18
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4785
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4733: LD_INT 0
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: LD_INT 4
4741: PPUSH
4742: CALL_OW 12
4746: PPUSH
4747: LD_INT 7
4749: PPUSH
4750: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4754: LD_ADDR_EXP 4
4758: PUSH
4759: LD_EXP 4
4763: PPUSH
4764: LD_EXP 4
4768: PUSH
4769: LD_INT 1
4771: PLUS
4772: PPUSH
4773: CALL_OW 44
4777: PPUSH
4778: CALL_OW 2
4782: ST_TO_ADDR
// end ;
4783: GO 4730
4785: POP
4786: POP
// for i in friends do
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: LD_EXP 4
4796: PUSH
4797: FOR_IN
4798: IFFALSE 4871
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4800: LD_VAR 0 2
4804: PPUSH
4805: CALL_OW 248
4809: PUSH
4810: LD_INT 1
4812: EQUAL
4813: PUSH
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 259
4826: PUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 259
4839: GREATEREQUAL
4840: AND
4841: IFFALSE 4857
// SetClass ( i , class_soldier ) else
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 336
4855: GO 4869
// SetClass ( i , class_scientistic ) ;
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: CALL_OW 336
4869: GO 4797
4871: POP
4872: POP
// if Frank then
4873: LD_EXP 34
4877: IFFALSE 4891
// SetClass ( Frank , class_sniper ) ;
4879: LD_EXP 34
4883: PPUSH
4884: LD_INT 5
4886: PPUSH
4887: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4891: LD_EXP 37
4895: PUSH
4896: LD_EXP 28
4900: PUSH
4901: LD_EXP 38
4905: PUSH
4906: LD_EXP 36
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ [ class_soldier , 3 ] , [ class_scientistic , 2 , 5 ] , [ class_sniper , 0 , 2 ] ] ) ;
4924: LD_ADDR_EXP 3
4928: PUSH
4929: LD_STRING 
4931: PPUSH
4932: LD_INT 7
4934: PPUSH
4935: LD_INT 7
4937: PPUSH
4938: LD_INT -6
4940: PUSH
4941: LD_EXP 15
4945: PUSH
4946: LD_EXP 16
4950: PUSH
4951: LD_EXP 36
4955: PUSH
4956: LD_EXP 28
4960: PUSH
4961: LD_EXP 38
4965: PUSH
4966: LD_INT -2
4968: PUSH
4969: LD_INT -3
4971: PUSH
4972: LD_INT -5
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PUSH
4986: LD_EXP 4
4990: ADD
4991: PPUSH
4992: LD_INT 1
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 4
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 5
5018: PUSH
5019: LD_INT 0
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 42
5039: ST_TO_ADDR
// if Simms then
5040: LD_EXP 36
5044: IFFALSE 5062
// selected := selected ^ Simms ;
5046: LD_ADDR_EXP 3
5050: PUSH
5051: LD_EXP 3
5055: PUSH
5056: LD_EXP 36
5060: ADD
5061: ST_TO_ADDR
// if Denis then
5062: LD_EXP 28
5066: IFFALSE 5084
// selected := selected ^ Denis ;
5068: LD_ADDR_EXP 3
5072: PUSH
5073: LD_EXP 3
5077: PUSH
5078: LD_EXP 28
5082: ADD
5083: ST_TO_ADDR
// if DeltaDoctor then
5084: LD_EXP 38
5088: IFFALSE 5106
// selected := selected ^ DeltaDoctor ;
5090: LD_ADDR_EXP 3
5094: PUSH
5095: LD_EXP 3
5099: PUSH
5100: LD_EXP 38
5104: ADD
5105: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5106: LD_EXP 10
5110: PUSH
5111: LD_INT 1
5113: EQUAL
5114: PUSH
5115: LD_EXP 25
5119: AND
5120: IFFALSE 5132
// gammaCommander := Donaldson ;
5122: LD_ADDR_VAR 0 8
5126: PUSH
5127: LD_EXP 25
5131: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5132: LD_EXP 10
5136: PUSH
5137: LD_INT 2
5139: EQUAL
5140: PUSH
5141: LD_EXP 29
5145: AND
5146: IFFALSE 5158
// gammaCommander := Brown ;
5148: LD_ADDR_VAR 0 8
5152: PUSH
5153: LD_EXP 29
5157: ST_TO_ADDR
// friends := friends diff selected ;
5158: LD_ADDR_EXP 4
5162: PUSH
5163: LD_EXP 4
5167: PUSH
5168: LD_EXP 3
5172: DIFF
5173: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5174: LD_ADDR_EXP 4
5178: PUSH
5179: LD_EXP 4
5183: PUSH
5184: LD_VAR 0 8
5188: DIFF
5189: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5190: LD_ADDR_VAR 0 4
5194: PUSH
5195: LD_INT 111
5197: PUSH
5198: LD_INT 137
5200: PUSH
5201: LD_INT 51
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_INT 147
5211: PUSH
5212: LD_INT 129
5214: PUSH
5215: LD_INT 25
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5227: LD_ADDR_VAR 0 5
5231: PUSH
5232: LD_INT 5
5234: PUSH
5235: LD_INT 6
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: LD_INT 17
5246: PUSH
5247: LD_INT 18
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: ST_TO_ADDR
// for i in buildings do
5258: LD_ADDR_VAR 0 2
5262: PUSH
5263: LD_VAR 0 4
5267: PUSH
5268: FOR_IN
5269: IFFALSE 5285
// SetSide ( i , 4 ) ;
5271: LD_VAR 0 2
5275: PPUSH
5276: LD_INT 4
5278: PPUSH
5279: CALL_OW 235
5283: GO 5268
5285: POP
5286: POP
// for i in selected union gammaCommander do
5287: LD_ADDR_VAR 0 2
5291: PUSH
5292: LD_EXP 3
5296: PUSH
5297: LD_VAR 0 8
5301: UNION
5302: PUSH
5303: FOR_IN
5304: IFFALSE 5644
// begin if GetClass ( i ) in [ 1 , 5 ] then
5306: LD_VAR 0 2
5310: PPUSH
5311: CALL_OW 257
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: IN
5326: IFFALSE 5486
// begin if buildings [ 1 ] then
5328: LD_VAR 0 4
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: IFFALSE 5397
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_VAR 0 4
5347: PUSH
5348: LD_INT 1
5350: ARRAY
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PPUSH
5356: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5360: LD_ADDR_VAR 0 4
5364: PUSH
5365: LD_VAR 0 4
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: LD_VAR 0 4
5377: PUSH
5378: LD_INT 1
5380: ARRAY
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 3
5389: PPUSH
5390: CALL_OW 1
5394: ST_TO_ADDR
// end else
5395: GO 5484
// begin if not areas then
5397: LD_VAR 0 5
5401: NOT
5402: IFFALSE 5436
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_INT 87
5411: PPUSH
5412: LD_INT 68
5414: PPUSH
5415: LD_INT 8
5417: PPUSH
5418: LD_INT 0
5420: PPUSH
5421: CALL_OW 50
// ComHold ( i ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 140
// end else
5434: GO 5484
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// ComHold ( i ) ;
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5466: LD_ADDR_VAR 0 5
5470: PUSH
5471: LD_VAR 0 5
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: CALL_OW 3
5483: ST_TO_ADDR
// end ; end ; end else
5484: GO 5642
// begin if buildings [ 2 ] then
5486: LD_VAR 0 4
5490: PUSH
5491: LD_INT 2
5493: ARRAY
5494: IFFALSE 5555
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5496: LD_VAR 0 2
5500: PPUSH
5501: LD_VAR 0 4
5505: PUSH
5506: LD_INT 2
5508: ARRAY
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5518: LD_ADDR_VAR 0 4
5522: PUSH
5523: LD_VAR 0 4
5527: PPUSH
5528: LD_INT 2
5530: PPUSH
5531: LD_VAR 0 4
5535: PUSH
5536: LD_INT 2
5538: ARRAY
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: CALL_OW 3
5547: PPUSH
5548: CALL_OW 1
5552: ST_TO_ADDR
// end else
5553: GO 5642
// begin if not areas then
5555: LD_VAR 0 5
5559: NOT
5560: IFFALSE 5594
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 87
5569: PPUSH
5570: LD_INT 68
5572: PPUSH
5573: LD_INT 8
5575: PPUSH
5576: LD_INT 0
5578: PPUSH
5579: CALL_OW 50
// ComHold ( i ) ;
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 140
// end else
5592: GO 5642
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 5
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_INT 0
5610: PPUSH
5611: CALL_OW 49
// ComHold ( i ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: LD_INT 1
5636: PPUSH
5637: CALL_OW 3
5641: ST_TO_ADDR
// end ; end ; end ; end ;
5642: GO 5303
5644: POP
5645: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5646: LD_ADDR_VAR 0 6
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 30
5663: PUSH
5664: LD_INT 32
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: CALL_OW 69
5679: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5680: LD_ADDR_VAR 0 2
5684: PUSH
5685: DOUBLE
5686: LD_VAR 0 6
5690: PUSH
5691: LD_EXP 4
5695: MINUS
5696: INC
5697: ST_TO_ADDR
5698: LD_INT 1
5700: PUSH
5701: FOR_DOWNTO
5702: IFFALSE 5769
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5704: LD_INT 0
5706: PPUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_INT 7
5712: PUSH
5713: LD_INT 8
5715: PUSH
5716: LD_INT 9
5718: PUSH
5719: LD_INT 10
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_OWVAR 67
5732: ARRAY
5733: PPUSH
5734: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5738: LD_ADDR_EXP 4
5742: PUSH
5743: LD_EXP 4
5747: PPUSH
5748: LD_EXP 4
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: PPUSH
5757: CALL_OW 44
5761: PPUSH
5762: CALL_OW 2
5766: ST_TO_ADDR
// end ;
5767: GO 5701
5769: POP
5770: POP
// if friends then
5771: LD_EXP 4
5775: IFFALSE 5891
// begin tmp := friends ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: LD_EXP 4
5786: ST_TO_ADDR
// for i = 1 to bunkers do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: DOUBLE
5793: LD_INT 1
5795: DEC
5796: ST_TO_ADDR
5797: LD_VAR 0 6
5801: PUSH
5802: FOR_TO
5803: IFFALSE 5889
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5805: LD_VAR 0 3
5809: PUSH
5810: LD_VAR 0 3
5814: ARRAY
5815: PPUSH
5816: LD_INT 1
5818: PPUSH
5819: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 3
5832: ARRAY
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 3
5850: ARRAY
5851: PPUSH
5852: LD_VAR 0 6
5856: PUSH
5857: LD_VAR 0 2
5861: ARRAY
5862: PPUSH
5863: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_VAR 0 3
5876: PPUSH
5877: LD_VAR 0 3
5881: PPUSH
5882: CALL_OW 3
5886: ST_TO_ADDR
// end ;
5887: GO 5802
5889: POP
5890: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5891: LD_ADDR_VAR 0 5
5895: PUSH
5896: LD_VAR 0 5
5900: PUSH
5901: LD_INT 9
5903: PUSH
5904: LD_INT 10
5906: PUSH
5907: LD_INT 11
5909: PUSH
5910: LD_INT 12
5912: PUSH
5913: LD_INT 13
5915: PUSH
5916: LD_INT 14
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 26
5927: PUSH
5928: LD_INT 27
5930: PUSH
5931: LD_INT 28
5933: PUSH
5934: LD_INT 29
5936: PUSH
5937: LD_INT 30
5939: PUSH
5940: LD_INT 31
5942: PUSH
5943: LD_INT 32
5945: PUSH
5946: LD_INT 33
5948: PUSH
5949: LD_INT 34
5951: PUSH
5952: LD_INT 35
5954: PUSH
5955: LD_INT 36
5957: PUSH
5958: LD_INT 37
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: UNION
5983: ST_TO_ADDR
// for i in friends do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_EXP 4
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6278
// begin SetTag ( i , 2 ) ;
5997: LD_VAR 0 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_sniper ] then
6009: LD_VAR 0 2
6013: PPUSH
6014: CALL_OW 257
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: LD_INT 5
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: IN
6029: NOT
6030: IFFALSE 6044
// SetClass ( i , 1 ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6044: LD_VAR 0 2
6048: PPUSH
6049: CALL_OW 257
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 5
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: IN
6064: PUSH
6065: LD_VAR 0 4
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: AND
6074: IFFALSE 6135
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_VAR 0 4
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PUSH
6090: LD_INT 1
6092: ARRAY
6093: PPUSH
6094: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6098: LD_ADDR_VAR 0 4
6102: PUSH
6103: LD_VAR 0 4
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: LD_VAR 0 4
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 3
6127: PPUSH
6128: CALL_OW 1
6132: ST_TO_ADDR
// continue ;
6133: GO 5994
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6135: LD_VAR 0 2
6139: PPUSH
6140: CALL_OW 257
6144: PUSH
6145: LD_INT 4
6147: EQUAL
6148: PUSH
6149: LD_VAR 0 4
6153: PUSH
6154: LD_INT 2
6156: ARRAY
6157: AND
6158: IFFALSE 6219
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_VAR 0 4
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: PPUSH
6178: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6182: LD_ADDR_VAR 0 4
6186: PUSH
6187: LD_VAR 0 4
6191: PPUSH
6192: LD_INT 2
6194: PPUSH
6195: LD_VAR 0 4
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: LD_INT 1
6206: PPUSH
6207: CALL_OW 3
6211: PPUSH
6212: CALL_OW 1
6216: ST_TO_ADDR
// continue ;
6217: GO 5994
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6219: LD_VAR 0 2
6223: PPUSH
6224: LD_VAR 0 5
6228: PUSH
6229: LD_INT 1
6231: ARRAY
6232: PPUSH
6233: LD_INT 0
6235: PPUSH
6236: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6240: LD_ADDR_VAR 0 5
6244: PUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 3
6257: ST_TO_ADDR
// ComHold ( i ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: CALL_OW 140
// if not areas then
6267: LD_VAR 0 5
6271: NOT
6272: IFFALSE 6276
// break ;
6274: GO 6278
// end ;
6276: GO 5994
6278: POP
6279: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6280: LD_EXP 4
6284: PPUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 52
6290: PUSH
6291: EMPTY
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 72
6302: IFFALSE 6369
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_EXP 4
6313: PPUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 52
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PPUSH
6327: CALL_OW 72
6331: PUSH
6332: FOR_IN
6333: IFFALSE 6367
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 65
6342: PPUSH
6343: LD_INT 58
6345: PPUSH
6346: LD_INT 7
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ComHold ( i ) ;
6356: LD_VAR 0 2
6360: PPUSH
6361: CALL_OW 140
// end ;
6365: GO 6332
6367: POP
6368: POP
// if Frank then
6369: LD_EXP 34
6373: IFFALSE 6387
// SetClass ( Frank , class_sniper ) ;
6375: LD_EXP 34
6379: PPUSH
6380: LD_INT 5
6382: PPUSH
6383: CALL_OW 336
// end ; end_of_file
6387: LD_VAR 0 1
6391: RET
// export function CanSayRand ( side ) ; begin
6392: LD_INT 0
6394: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: LD_INT 52
6402: PUSH
6403: EMPTY
6404: LIST
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_VAR 0 1
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 2
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 25
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 69
6477: PUSH
6478: LD_EXP 15
6482: PUSH
6483: LD_EXP 34
6487: PUSH
6488: LD_EXP 24
6492: PUSH
6493: LD_EXP 25
6497: PUSH
6498: LD_EXP 26
6502: PUSH
6503: LD_EXP 27
6507: PUSH
6508: LD_EXP 28
6512: PUSH
6513: LD_EXP 29
6517: PUSH
6518: LD_EXP 30
6522: PUSH
6523: LD_EXP 31
6527: PUSH
6528: LD_EXP 17
6532: PUSH
6533: LD_EXP 32
6537: PUSH
6538: LD_EXP 33
6542: PUSH
6543: LD_EXP 35
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: DIFF
6564: ST_TO_ADDR
// end ;
6565: LD_VAR 0 2
6569: RET
// export function SayRand ( sex , dial ) ; begin
6570: LD_INT 0
6572: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 52
6580: PUSH
6581: EMPTY
6582: LIST
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 1
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 26
6596: PUSH
6597: LD_VAR 0 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 25
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 25
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: PUSH
6667: LD_EXP 15
6671: PUSH
6672: LD_EXP 34
6676: PUSH
6677: LD_EXP 24
6681: PUSH
6682: LD_EXP 25
6686: PUSH
6687: LD_EXP 26
6691: PUSH
6692: LD_EXP 27
6696: PUSH
6697: LD_EXP 28
6701: PUSH
6702: LD_EXP 29
6706: PUSH
6707: LD_EXP 30
6711: PUSH
6712: LD_EXP 31
6716: PUSH
6717: LD_EXP 17
6721: PUSH
6722: LD_EXP 32
6726: PUSH
6727: LD_EXP 33
6731: PUSH
6732: LD_EXP 35
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: DIFF
6753: ST_TO_ADDR
// if not result then
6754: LD_VAR 0 3
6758: NOT
6759: IFFALSE 6763
// exit ;
6761: GO 6791
// result := result [ 1 ] ;
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_VAR 0 3
6772: PUSH
6773: LD_INT 1
6775: ARRAY
6776: ST_TO_ADDR
// Say ( result , dial ) ;
6777: LD_VAR 0 3
6781: PPUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 88
// end ;
6791: LD_VAR 0 3
6795: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6796: LD_INT 0
6798: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6799: LD_ADDR_VAR 0 4
6803: PUSH
6804: LD_INT 22
6806: PUSH
6807: LD_INT 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 26
6816: PUSH
6817: LD_VAR 0 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 25
6831: PUSH
6832: LD_INT 1
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 25
6851: PUSH
6852: LD_INT 3
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PUSH
6886: LD_EXP 15
6890: PUSH
6891: LD_EXP 34
6895: PUSH
6896: LD_EXP 24
6900: PUSH
6901: LD_EXP 25
6905: PUSH
6906: LD_EXP 26
6910: PUSH
6911: LD_EXP 27
6915: PUSH
6916: LD_EXP 28
6920: PUSH
6921: LD_EXP 29
6925: PUSH
6926: LD_EXP 30
6930: PUSH
6931: LD_EXP 31
6935: PUSH
6936: LD_EXP 17
6940: PUSH
6941: LD_EXP 32
6945: PUSH
6946: LD_EXP 33
6950: PUSH
6951: LD_EXP 35
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_VAR 0 3
6976: ADD
6977: DIFF
6978: ST_TO_ADDR
// if not result then
6979: LD_VAR 0 4
6983: NOT
6984: IFFALSE 6988
// exit ;
6986: GO 7016
// result := result [ 1 ] ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 4
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: ST_TO_ADDR
// Say ( result , dial ) ;
7002: LD_VAR 0 4
7006: PPUSH
7007: LD_VAR 0 2
7011: PPUSH
7012: CALL_OW 88
// end ;
7016: LD_VAR 0 4
7020: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
7030: PPUSH
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7038: LD_VAR 0 1
7042: NOT
7043: PUSH
7044: LD_VAR 0 2
7048: NOT
7049: OR
7050: PUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 247
7060: PUSH
7061: LD_INT 3
7063: EQUAL
7064: OR
7065: IFFALSE 7069
// exit ;
7067: GO 8608
// for i = path downto 1 do
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: DOUBLE
7075: LD_VAR 0 2
7079: INC
7080: ST_TO_ADDR
7081: LD_INT 1
7083: PUSH
7084: FOR_DOWNTO
7085: IFFALSE 7146
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7087: LD_VAR 0 2
7091: PUSH
7092: LD_VAR 0 5
7096: ARRAY
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 2
7106: PUSH
7107: LD_VAR 0 5
7111: ARRAY
7112: PUSH
7113: LD_INT 2
7115: ARRAY
7116: PPUSH
7117: CALL_OW 488
7121: NOT
7122: IFFALSE 7144
// path = Delete ( path , i ) ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_VAR 0 2
7133: PPUSH
7134: LD_VAR 0 5
7138: PPUSH
7139: CALL_OW 3
7143: ST_TO_ADDR
// end ;
7144: GO 7084
7146: POP
7147: POP
// if not path then
7148: LD_VAR 0 2
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 8608
// tmp_path := [ ] ;
7157: LD_ADDR_VAR 0 11
7161: PUSH
7162: EMPTY
7163: ST_TO_ADDR
// if flags then
7164: LD_VAR 0 3
7168: IFFALSE 7242
// begin if flags [ 1 ] then
7170: LD_VAR 0 3
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: IFFALSE 7194
// safe_place = flags [ 1 ] ;
7180: LD_ADDR_VAR 0 16
7184: PUSH
7185: LD_VAR 0 3
7189: PUSH
7190: LD_INT 1
7192: ARRAY
7193: ST_TO_ADDR
// if flags [ 2 ] then
7194: LD_VAR 0 3
7198: PUSH
7199: LD_INT 2
7201: ARRAY
7202: IFFALSE 7218
// spot_dist = flags [ 2 ] ;
7204: LD_ADDR_VAR 0 15
7208: PUSH
7209: LD_VAR 0 3
7213: PUSH
7214: LD_INT 2
7216: ARRAY
7217: ST_TO_ADDR
// if flags [ 3 ] then
7218: LD_VAR 0 3
7222: PUSH
7223: LD_INT 3
7225: ARRAY
7226: IFFALSE 7242
// chase_range = flags [ 3 ] ;
7228: LD_ADDR_VAR 0 17
7232: PUSH
7233: LD_VAR 0 3
7237: PUSH
7238: LD_INT 3
7240: ARRAY
7241: ST_TO_ADDR
// end ; if not chase_range then
7242: LD_VAR 0 17
7246: NOT
7247: IFFALSE 7257
// chase_range = 8 ;
7249: LD_ADDR_VAR 0 17
7253: PUSH
7254: LD_INT 8
7256: ST_TO_ADDR
// if not spot_dist then
7257: LD_VAR 0 15
7261: NOT
7262: IFFALSE 7272
// spot_dist := 8 ;
7264: LD_ADDR_VAR 0 15
7268: PUSH
7269: LD_INT 8
7271: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7272: LD_ADDR_VAR 0 18
7276: PUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 247
7286: PUSH
7287: LD_INT 2
7289: EQUAL
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 262
7300: PUSH
7301: LD_INT 3
7303: NONEQUAL
7304: AND
7305: ST_TO_ADDR
// status = 1 ;
7306: LD_ADDR_VAR 0 12
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7314: LD_ADDR_VAR 0 11
7318: PUSH
7319: LD_INT 1
7321: PUSH
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7335: LD_INT 35
7337: PPUSH
7338: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7342: LD_VAR 0 18
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 261
7356: PUSH
7357: LD_INT 20
7359: LESS
7360: AND
7361: IFFALSE 7554
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7363: LD_ADDR_VAR 0 10
7367: PUSH
7368: LD_INT 22
7370: PUSH
7371: LD_VAR 0 1
7375: PPUSH
7376: CALL_OW 255
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 30
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 30
7400: PUSH
7401: LD_INT 1
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 30
7410: PUSH
7411: LD_INT 29
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 69
7443: ST_TO_ADDR
// if not station then
7444: LD_VAR 0 10
7448: NOT
7449: IFFALSE 7465
// begin SetFuel ( unit , 40 ) ;
7451: LD_VAR 0 1
7455: PPUSH
7456: LD_INT 40
7458: PPUSH
7459: CALL_OW 240
// continue ;
7463: GO 7335
// end ; status := 6 ;
7465: LD_ADDR_VAR 0 12
7469: PUSH
7470: LD_INT 6
7472: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 10
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 74
7492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7493: LD_INT 35
7495: PPUSH
7496: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7500: LD_VAR 0 1
7504: PPUSH
7505: LD_VAR 0 10
7509: PPUSH
7510: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 10
7523: PPUSH
7524: CALL_OW 296
7528: PUSH
7529: LD_INT 6
7531: LESS
7532: IFFALSE 7493
// SetFuel ( unit , 100 ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: LD_INT 100
7541: PPUSH
7542: CALL_OW 240
// status := 5 ;
7546: LD_ADDR_VAR 0 12
7550: PUSH
7551: LD_INT 5
7553: ST_TO_ADDR
// end ; if status = 1 then
7554: LD_VAR 0 12
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7938
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7564: LD_ADDR_VAR 0 13
7568: PUSH
7569: LD_INT 81
7571: PUSH
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 255
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 3
7588: PUSH
7589: LD_INT 21
7591: PUSH
7592: LD_INT 3
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 91
7605: PUSH
7606: LD_VAR 0 1
7610: PUSH
7611: LD_VAR 0 15
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 101
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 69
7641: ST_TO_ADDR
// for i in enemy do
7642: LD_ADDR_VAR 0 5
7646: PUSH
7647: LD_VAR 0 13
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7684
// if IsInvisible ( i ) then
7655: LD_VAR 0 5
7659: PPUSH
7660: CALL_OW 571
7664: IFFALSE 7682
// enemy := enemy diff i ;
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 13
7675: PUSH
7676: LD_VAR 0 5
7680: DIFF
7681: ST_TO_ADDR
7682: GO 7652
7684: POP
7685: POP
// if enemy then
7686: LD_VAR 0 13
7690: IFFALSE 7740
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 250
7706: PPUSH
7707: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7711: LD_VAR 0 1
7715: PPUSH
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 251
7725: PPUSH
7726: CALL_OW 232
// status = 2 ;
7730: LD_ADDR_VAR 0 12
7734: PUSH
7735: LD_INT 2
7737: ST_TO_ADDR
// end else
7738: GO 7938
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_VAR 0 11
7749: PUSH
7750: LD_INT 2
7752: ARRAY
7753: PUSH
7754: LD_INT 1
7756: ARRAY
7757: PPUSH
7758: LD_VAR 0 11
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PPUSH
7771: CALL_OW 307
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: CALL_OW 314
7785: NOT
7786: OR
7787: IFFALSE 7938
// begin wait ( 0 0$2 ) ;
7789: LD_INT 70
7791: PPUSH
7792: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7796: LD_VAR 0 11
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PUSH
7805: LD_INT 1
7807: PLUS
7808: PUSH
7809: LD_VAR 0 2
7813: GREATER
7814: IFFALSE 7839
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7816: LD_ADDR_VAR 0 11
7820: PUSH
7821: LD_VAR 0 11
7825: PPUSH
7826: LD_INT 1
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: CALL_OW 1
7836: ST_TO_ADDR
7837: GO 7870
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7839: LD_ADDR_VAR 0 11
7843: PUSH
7844: LD_VAR 0 11
7848: PPUSH
7849: LD_INT 1
7851: PPUSH
7852: LD_VAR 0 11
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: PUSH
7861: LD_INT 1
7863: PLUS
7864: PPUSH
7865: CALL_OW 1
7869: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7870: LD_ADDR_VAR 0 11
7874: PUSH
7875: LD_VAR 0 11
7879: PPUSH
7880: LD_INT 2
7882: PPUSH
7883: LD_VAR 0 2
7887: PUSH
7888: LD_VAR 0 11
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: ARRAY
7897: PPUSH
7898: CALL_OW 1
7902: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7903: LD_VAR 0 1
7907: PPUSH
7908: LD_VAR 0 11
7912: PUSH
7913: LD_INT 2
7915: ARRAY
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 11
7925: PUSH
7926: LD_INT 2
7928: ARRAY
7929: PUSH
7930: LD_INT 2
7932: ARRAY
7933: PPUSH
7934: CALL_OW 114
// end ; end ; end ; if status = 2 then
7938: LD_VAR 0 12
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 8167
// begin if GetLives ( unit ) < 650 and safe_place then
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 256
7957: PUSH
7958: LD_INT 650
7960: LESS
7961: PUSH
7962: LD_VAR 0 16
7966: AND
7967: IFFALSE 7979
// begin status = 3 ;
7969: LD_ADDR_VAR 0 12
7973: PUSH
7974: LD_INT 3
7976: ST_TO_ADDR
// continue ;
7977: GO 7335
// end ; x := GetRememberedX ( unit ) ;
7979: LD_ADDR_VAR 0 6
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 252
7993: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 253
8008: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8009: LD_ADDR_VAR 0 13
8013: PUSH
8014: LD_INT 81
8016: PUSH
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 255
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 92
8033: PUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_VAR 0 7
8043: PUSH
8044: LD_VAR 0 15
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 101
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: ST_TO_ADDR
// if enemy then
8075: LD_VAR 0 13
8079: IFFALSE 8150
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8081: LD_ADDR_VAR 0 14
8085: PUSH
8086: LD_VAR 0 13
8090: PPUSH
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 74
8100: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8101: LD_VAR 0 14
8105: PPUSH
8106: LD_VAR 0 6
8110: PPUSH
8111: LD_VAR 0 7
8115: PPUSH
8116: CALL_OW 297
8120: PUSH
8121: LD_VAR 0 15
8125: PUSH
8126: LD_VAR 0 17
8130: PLUS
8131: LESS
8132: IFFALSE 8148
// ComAttackUnit ( unit , e ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: LD_VAR 0 14
8143: PPUSH
8144: CALL_OW 115
// end else
8148: GO 8167
// begin ComStop ( unit ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: CALL_OW 141
// status = 5 ;
8159: LD_ADDR_VAR 0 12
8163: PUSH
8164: LD_INT 5
8166: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8167: LD_VAR 0 12
8171: PUSH
8172: LD_INT 3
8174: EQUAL
8175: PUSH
8176: LD_VAR 0 16
8180: AND
8181: IFFALSE 8267
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8183: LD_VAR 0 1
8187: PPUSH
8188: LD_VAR 0 16
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: LD_VAR 0 16
8201: PUSH
8202: LD_INT 2
8204: ARRAY
8205: PPUSH
8206: CALL_OW 111
// wait ( 0 0$1 ) ;
8210: LD_INT 35
8212: PPUSH
8213: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8217: LD_VAR 0 1
8221: PPUSH
8222: LD_VAR 0 16
8226: PUSH
8227: LD_INT 1
8229: ARRAY
8230: PPUSH
8231: LD_VAR 0 16
8235: PUSH
8236: LD_INT 2
8238: ARRAY
8239: PPUSH
8240: CALL_OW 297
8244: PUSH
8245: LD_INT 4
8247: LESS
8248: IFFALSE 8183
// ComStop ( unit ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 141
// status = 4 ;
8259: LD_ADDR_VAR 0 12
8263: PUSH
8264: LD_INT 4
8266: ST_TO_ADDR
// end ; if status = 4 then
8267: LD_VAR 0 12
8271: PUSH
8272: LD_INT 4
8274: EQUAL
8275: IFFALSE 8307
// begin repeat wait ( 0 0$1 ) ;
8277: LD_INT 35
8279: PPUSH
8280: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 256
8293: PUSH
8294: LD_INT 1000
8296: EQUAL
8297: IFFALSE 8277
// status = 5 ;
8299: LD_ADDR_VAR 0 12
8303: PUSH
8304: LD_INT 5
8306: ST_TO_ADDR
// end ; if status = 5 then
8307: LD_VAR 0 12
8311: PUSH
8312: LD_INT 5
8314: EQUAL
8315: IFFALSE 8597
// begin p := 999 ;
8317: LD_ADDR_VAR 0 9
8321: PUSH
8322: LD_INT 999
8324: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8325: LD_ADDR_VAR 0 14
8329: PUSH
8330: LD_VAR 0 11
8334: PUSH
8335: LD_INT 2
8337: ARRAY
8338: PUSH
8339: LD_INT 1
8341: ARRAY
8342: PUSH
8343: LD_VAR 0 11
8347: PUSH
8348: LD_INT 2
8350: ARRAY
8351: PUSH
8352: LD_INT 2
8354: ARRAY
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: ST_TO_ADDR
// c := 1 ;
8360: LD_ADDR_VAR 0 8
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8368: LD_ADDR_VAR 0 5
8372: PUSH
8373: DOUBLE
8374: LD_INT 1
8376: DEC
8377: ST_TO_ADDR
8378: LD_VAR 0 11
8382: PUSH
8383: LD_INT 2
8385: ARRAY
8386: PUSH
8387: LD_INT 2
8389: DIV
8390: PUSH
8391: FOR_TO
8392: IFFALSE 8524
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_VAR 0 1
8403: PPUSH
8404: LD_VAR 0 11
8408: PUSH
8409: LD_INT 2
8411: ARRAY
8412: PUSH
8413: LD_VAR 0 8
8417: ARRAY
8418: PPUSH
8419: LD_VAR 0 11
8423: PUSH
8424: LD_INT 2
8426: ARRAY
8427: PUSH
8428: LD_VAR 0 8
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: ARRAY
8437: PPUSH
8438: CALL_OW 297
8442: ST_TO_ADDR
// if x < p then
8443: LD_VAR 0 6
8447: PUSH
8448: LD_VAR 0 9
8452: LESS
8453: IFFALSE 8508
// begin p := x ;
8455: LD_ADDR_VAR 0 9
8459: PUSH
8460: LD_VAR 0 6
8464: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8465: LD_ADDR_VAR 0 14
8469: PUSH
8470: LD_VAR 0 11
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PUSH
8479: LD_VAR 0 8
8483: ARRAY
8484: PUSH
8485: LD_VAR 0 11
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PLUS
8502: ARRAY
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: ST_TO_ADDR
// end ; c = c + 2 ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: LD_VAR 0 8
8517: PUSH
8518: LD_INT 2
8520: PLUS
8521: ST_TO_ADDR
// end ;
8522: GO 8391
8524: POP
8525: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8526: LD_VAR 0 1
8530: PPUSH
8531: LD_VAR 0 14
8535: PUSH
8536: LD_INT 1
8538: ARRAY
8539: PPUSH
8540: LD_VAR 0 14
8544: PUSH
8545: LD_INT 2
8547: ARRAY
8548: PPUSH
8549: CALL_OW 111
// wait ( 0 0$1 ) ;
8553: LD_INT 35
8555: PPUSH
8556: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_VAR 0 14
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PPUSH
8574: LD_VAR 0 14
8578: PUSH
8579: LD_INT 2
8581: ARRAY
8582: PPUSH
8583: CALL_OW 307
8587: IFFALSE 8526
// status = 1 ;
8589: LD_ADDR_VAR 0 12
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 301
8606: IFFALSE 7335
// end ;
8608: LD_VAR 0 4
8612: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8613: LD_INT 0
8615: PPUSH
8616: PPUSH
8617: PPUSH
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
8622: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8623: LD_VAR 0 1
8627: NOT
8628: PUSH
8629: LD_VAR 0 3
8633: NOT
8634: OR
8635: PUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 0
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: IN
8655: NOT
8656: OR
8657: PUSH
8658: LD_VAR 0 6
8662: NOT
8663: OR
8664: PUSH
8665: LD_VAR 0 7
8669: NOT
8670: OR
8671: IFFALSE 8675
// exit ;
8673: GO 9066
// sex_id :=  ;
8675: LD_ADDR_VAR 0 14
8679: PUSH
8680: LD_STRING 
8682: ST_TO_ADDR
// case class of 1 :
8683: LD_VAR 0 5
8687: PUSH
8688: LD_INT 1
8690: DOUBLE
8691: EQUAL
8692: IFTRUE 8696
8694: GO 8707
8696: POP
// class_id := Sol ; 2 :
8697: LD_ADDR_VAR 0 15
8701: PUSH
8702: LD_STRING Sol
8704: ST_TO_ADDR
8705: GO 8765
8707: LD_INT 2
8709: DOUBLE
8710: EQUAL
8711: IFTRUE 8715
8713: GO 8726
8715: POP
// class_id := Eng ; 3 :
8716: LD_ADDR_VAR 0 15
8720: PUSH
8721: LD_STRING Eng
8723: ST_TO_ADDR
8724: GO 8765
8726: LD_INT 3
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8745
8734: POP
// class_id := Mech ; 4 :
8735: LD_ADDR_VAR 0 15
8739: PUSH
8740: LD_STRING Mech
8742: ST_TO_ADDR
8743: GO 8765
8745: LD_INT 4
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8764
8753: POP
// class_id := Sci ; end ;
8754: LD_ADDR_VAR 0 15
8758: PUSH
8759: LD_STRING Sci
8761: ST_TO_ADDR
8762: GO 8765
8764: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8765: LD_ADDR_VAR 0 11
8769: PUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 25
8777: PUSH
8778: LD_VAR 0 5
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PPUSH
8787: CALL_OW 72
8791: ST_TO_ADDR
// if tmp then
8792: LD_VAR 0 11
8796: IFFALSE 8808
// units := tmp ;
8798: LD_ADDR_VAR 0 1
8802: PUSH
8803: LD_VAR 0 11
8807: ST_TO_ADDR
// if sex then
8808: LD_VAR 0 4
8812: IFFALSE 8868
// begin if sex = sex_female then
8814: LD_VAR 0 4
8818: PUSH
8819: LD_INT 2
8821: EQUAL
8822: IFFALSE 8832
// sex_id := F ;
8824: LD_ADDR_VAR 0 14
8828: PUSH
8829: LD_STRING F
8831: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8832: LD_ADDR_VAR 0 1
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_INT 26
8844: PUSH
8845: LD_VAR 0 4
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 72
8858: ST_TO_ADDR
// if not units then
8859: LD_VAR 0 1
8863: NOT
8864: IFFALSE 8868
// exit ;
8866: GO 9066
// end ; unit_id := id ;
8868: LD_ADDR_VAR 0 12
8872: PUSH
8873: LD_VAR 0 6
8877: ST_TO_ADDR
// if unit_id > units then
8878: LD_VAR 0 12
8882: PUSH
8883: LD_VAR 0 1
8887: GREATER
8888: IFFALSE 8898
// unit_id := 1 ;
8890: LD_ADDR_VAR 0 12
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// if not units [ unit_id ] then
8898: LD_VAR 0 1
8902: PUSH
8903: LD_VAR 0 12
8907: ARRAY
8908: NOT
8909: IFFALSE 8913
// exit ;
8911: GO 9066
// unit := units [ unit_id ] ;
8913: LD_ADDR_VAR 0 10
8917: PUSH
8918: LD_VAR 0 1
8922: PUSH
8923: LD_VAR 0 12
8927: ARRAY
8928: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8929: LD_ADDR_VAR 0 13
8933: PUSH
8934: LD_STRING D
8936: PUSH
8937: LD_VAR 0 3
8941: STR
8942: PUSH
8943: LD_STRING -
8945: STR
8946: PUSH
8947: LD_VAR 0 14
8951: STR
8952: PUSH
8953: LD_VAR 0 15
8957: STR
8958: PUSH
8959: LD_VAR 0 6
8963: STR
8964: PUSH
8965: LD_STRING -
8967: STR
8968: PUSH
8969: LD_VAR 0 7
8973: STR
8974: ST_TO_ADDR
// case type of 0 :
8975: LD_VAR 0 2
8979: PUSH
8980: LD_INT 0
8982: DOUBLE
8983: EQUAL
8984: IFTRUE 8988
8986: GO 9005
8988: POP
// Say ( unit , dialog_id ) ; 1 :
8989: LD_VAR 0 10
8993: PPUSH
8994: LD_VAR 0 13
8998: PPUSH
8999: CALL_OW 88
9003: GO 9056
9005: LD_INT 1
9007: DOUBLE
9008: EQUAL
9009: IFTRUE 9013
9011: GO 9030
9013: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9014: LD_VAR 0 10
9018: PPUSH
9019: LD_VAR 0 13
9023: PPUSH
9024: CALL_OW 94
9028: GO 9056
9030: LD_INT 2
9032: DOUBLE
9033: EQUAL
9034: IFTRUE 9038
9036: GO 9055
9038: POP
// ForceSay ( unit , dialog_id ) ; end ;
9039: LD_VAR 0 10
9043: PPUSH
9044: LD_VAR 0 13
9048: PPUSH
9049: CALL_OW 91
9053: GO 9056
9055: POP
// result := unit ;
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: LD_VAR 0 10
9065: ST_TO_ADDR
// end ;
9066: LD_VAR 0 8
9070: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9071: LD_INT 0
9073: PPUSH
9074: PPUSH
9075: PPUSH
// result := false ;
9076: LD_ADDR_VAR 0 4
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9084: LD_VAR 0 1
9088: NOT
9089: PUSH
9090: LD_VAR 0 2
9094: NOT
9095: OR
9096: PUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 310
9106: OR
9107: IFFALSE 9111
// exit ;
9109: GO 9315
// if distance < 0 then
9111: LD_VAR 0 3
9115: PUSH
9116: LD_INT 0
9118: LESS
9119: IFFALSE 9129
// distance := 0 ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9129: LD_ADDR_VAR 0 6
9133: PUSH
9134: LD_VAR 0 2
9138: PPUSH
9139: CALL_OW 266
9143: PPUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 250
9153: PPUSH
9154: LD_VAR 0 2
9158: PPUSH
9159: CALL_OW 251
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 254
9173: PPUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 248
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: CALL 50692 0 6
9191: ST_TO_ADDR
// if not entrance then
9192: LD_VAR 0 6
9196: NOT
9197: IFFALSE 9201
// exit ;
9199: GO 9315
// for i in entrance do
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: LD_VAR 0 6
9210: PUSH
9211: FOR_IN
9212: IFFALSE 9313
// begin if not distance then
9214: LD_VAR 0 3
9218: NOT
9219: IFFALSE 9264
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_VAR 0 5
9230: PUSH
9231: LD_INT 1
9233: ARRAY
9234: PPUSH
9235: LD_VAR 0 5
9239: PUSH
9240: LD_INT 2
9242: ARRAY
9243: PPUSH
9244: CALL_OW 307
9248: IFFALSE 9262
// begin result := true ;
9250: LD_ADDR_VAR 0 4
9254: PUSH
9255: LD_INT 1
9257: ST_TO_ADDR
// exit ;
9258: POP
9259: POP
9260: GO 9315
// end ; end else
9262: GO 9311
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9264: LD_VAR 0 1
9268: PPUSH
9269: LD_VAR 0 5
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: LD_VAR 0 5
9282: PUSH
9283: LD_INT 2
9285: ARRAY
9286: PPUSH
9287: CALL_OW 297
9291: PUSH
9292: LD_VAR 0 3
9296: LESSEQUAL
9297: IFFALSE 9311
// begin result := true ;
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// exit ;
9307: POP
9308: POP
9309: GO 9315
// end ; end ; end ;
9311: GO 9211
9313: POP
9314: POP
// end ;
9315: LD_VAR 0 4
9319: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9320: LD_INT 0
9322: PPUSH
9323: PPUSH
9324: PPUSH
// result := false ;
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: LD_INT 0
9332: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9333: LD_VAR 0 1
9337: NOT
9338: PUSH
9339: LD_VAR 0 2
9343: NOT
9344: OR
9345: PUSH
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 302
9355: NOT
9356: OR
9357: PUSH
9358: LD_VAR 0 2
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: OR
9369: IFFALSE 9373
// exit ;
9371: GO 9534
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 81
9380: PUSH
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 255
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 3
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 69
9420: PPUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 74
9430: PPUSH
9431: CALL_OW 296
9435: PUSH
9436: LD_INT 8
9438: LESS
9439: IFFALSE 9443
// exit ;
9441: GO 9534
// building := IsInUnit ( unit2 ) ;
9443: LD_ADDR_VAR 0 5
9447: PUSH
9448: LD_VAR 0 2
9452: PPUSH
9453: CALL_OW 310
9457: ST_TO_ADDR
// if building then
9458: LD_VAR 0 5
9462: IFFALSE 9489
// result := IsNearbyEntrance ( unit , building , 2 ) else
9464: LD_ADDR_VAR 0 3
9468: PUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: LD_VAR 0 5
9478: PPUSH
9479: LD_INT 2
9481: PPUSH
9482: CALL 9071 0 3
9486: ST_TO_ADDR
9487: GO 9534
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: LD_VAR 0 1
9498: PPUSH
9499: LD_VAR 0 2
9503: PPUSH
9504: CALL_OW 296
9508: PUSH
9509: LD_INT 6
9511: LESS
9512: PUSH
9513: LD_VAR 0 2
9517: PPUSH
9518: CALL_OW 255
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 292
9532: AND
9533: ST_TO_ADDR
// end ;
9534: LD_VAR 0 3
9538: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9539: LD_INT 0
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
// uc_side = 0 ;
9545: LD_ADDR_OWVAR 20
9549: PUSH
9550: LD_INT 0
9552: ST_TO_ADDR
// uc_nation = 0 ;
9553: LD_ADDR_OWVAR 21
9557: PUSH
9558: LD_INT 0
9560: ST_TO_ADDR
// nat_area := nature_area ;
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: LD_INT 24
9568: ST_TO_ADDR
// InitHc ;
9569: CALL_OW 19
// for i = 1 to 4 do
9573: LD_ADDR_VAR 0 2
9577: PUSH
9578: DOUBLE
9579: LD_INT 1
9581: DEC
9582: ST_TO_ADDR
9583: LD_INT 4
9585: PUSH
9586: FOR_TO
9587: IFFALSE 9634
// begin hc_class = 18 ;
9589: LD_ADDR_OWVAR 28
9593: PUSH
9594: LD_INT 18
9596: ST_TO_ADDR
// hc_gallery =  ;
9597: LD_ADDR_OWVAR 33
9601: PUSH
9602: LD_STRING 
9604: ST_TO_ADDR
// animal := CreateHuman ;
9605: LD_ADDR_VAR 0 3
9609: PUSH
9610: CALL_OW 44
9614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9615: LD_VAR 0 3
9619: PPUSH
9620: LD_VAR 0 4
9624: PPUSH
9625: LD_INT 0
9627: PPUSH
9628: CALL_OW 49
// end ;
9632: GO 9586
9634: POP
9635: POP
// for i = 1 to 3 do
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: DOUBLE
9642: LD_INT 1
9644: DEC
9645: ST_TO_ADDR
9646: LD_INT 3
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9744
// begin hc_class = class_apeman ;
9652: LD_ADDR_OWVAR 28
9656: PUSH
9657: LD_INT 12
9659: ST_TO_ADDR
// hc_gallery =  ;
9660: LD_ADDR_OWVAR 33
9664: PUSH
9665: LD_STRING 
9667: ST_TO_ADDR
// hc_agressivity = 0 ;
9668: LD_ADDR_OWVAR 35
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9676: LD_ADDR_OWVAR 31
9680: PUSH
9681: LD_INT 1
9683: PPUSH
9684: LD_INT 3
9686: PPUSH
9687: CALL_OW 12
9691: PUSH
9692: LD_INT 1
9694: PPUSH
9695: LD_INT 3
9697: PPUSH
9698: CALL_OW 12
9702: PUSH
9703: LD_INT 0
9705: PUSH
9706: LD_INT 0
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: ST_TO_ADDR
// animal := CreateHuman ;
9715: LD_ADDR_VAR 0 3
9719: PUSH
9720: CALL_OW 44
9724: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: LD_INT 0
9737: PPUSH
9738: CALL_OW 49
// end ;
9742: GO 9649
9744: POP
9745: POP
// for i = 1 to 3 do
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: DOUBLE
9752: LD_INT 1
9754: DEC
9755: ST_TO_ADDR
9756: LD_INT 3
9758: PUSH
9759: FOR_TO
9760: IFFALSE 9807
// begin hc_class = 13 ;
9762: LD_ADDR_OWVAR 28
9766: PUSH
9767: LD_INT 13
9769: ST_TO_ADDR
// hc_gallery =  ;
9770: LD_ADDR_OWVAR 33
9774: PUSH
9775: LD_STRING 
9777: ST_TO_ADDR
// animal := CreateHuman ;
9778: LD_ADDR_VAR 0 3
9782: PUSH
9783: CALL_OW 44
9787: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_VAR 0 4
9797: PPUSH
9798: LD_INT 0
9800: PPUSH
9801: CALL_OW 49
// end ;
9805: GO 9759
9807: POP
9808: POP
// for i = 1 to 3 do
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: DOUBLE
9815: LD_INT 1
9817: DEC
9818: ST_TO_ADDR
9819: LD_INT 3
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9868
// begin hc_class = 20 ;
9825: LD_ADDR_OWVAR 28
9829: PUSH
9830: LD_INT 20
9832: ST_TO_ADDR
// hc_gallery =  ;
9833: LD_ADDR_OWVAR 33
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// animal := CreateHuman ;
9841: LD_ADDR_VAR 0 3
9845: PUSH
9846: CALL_OW 44
9850: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 4
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: CALL_OW 49
// end ;
9866: GO 9822
9868: POP
9869: POP
// end ; end_of_file
9870: LD_VAR 0 1
9874: RET
// export function Action ; begin
9875: LD_INT 0
9877: PPUSH
// InGameOn ;
9878: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9882: LD_EXP 15
9886: PPUSH
9887: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9891: LD_EXP 15
9895: PPUSH
9896: LD_STRING D1-JMM-1
9898: PPUSH
9899: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9903: LD_EXP 16
9907: PPUSH
9908: LD_STRING D1-Roth-1
9910: PPUSH
9911: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9915: LD_EXP 15
9919: PPUSH
9920: LD_STRING D1-JMM-2
9922: PPUSH
9923: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9927: LD_EXP 16
9931: PPUSH
9932: LD_STRING D1-Roth-2
9934: PPUSH
9935: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9939: LD_EXP 15
9943: PPUSH
9944: LD_STRING D1-JMM-3
9946: PPUSH
9947: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9951: LD_EXP 16
9955: PPUSH
9956: LD_STRING D1-Roth-3
9958: PPUSH
9959: CALL_OW 88
// ComInvisible ( Roth ) ;
9963: LD_EXP 16
9967: PPUSH
9968: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9972: LD_INT 46
9974: PPUSH
9975: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9979: LD_EXP 15
9983: PPUSH
9984: LD_STRING D1-JMM-4
9986: PPUSH
9987: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9991: LD_INT 10
9993: PPUSH
9994: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9998: LD_EXP 16
10002: PPUSH
10003: LD_EXP 15
10007: PPUSH
10008: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
10012: LD_EXP 15
10016: PPUSH
10017: LD_STRING D1-JMM-4a
10019: PPUSH
10020: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
10024: LD_EXP 16
10028: PPUSH
10029: LD_STRING D1-Roth-4
10031: PPUSH
10032: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-JMM-5
10043: PPUSH
10044: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10048: LD_EXP 16
10052: PPUSH
10053: LD_STRING D1-Roth-5
10055: PPUSH
10056: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10060: LD_EXP 15
10064: PPUSH
10065: LD_STRING D1-JMM-6
10067: PPUSH
10068: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10072: LD_EXP 16
10076: PPUSH
10077: LD_STRING D1-Roth-6
10079: PPUSH
10080: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10084: LD_EXP 15
10088: PPUSH
10089: LD_STRING D1-JMM-7
10091: PPUSH
10092: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10096: LD_EXP 17
10100: PPUSH
10101: LD_EXP 15
10105: PPUSH
10106: CALL_OW 250
10110: PPUSH
10111: LD_EXP 15
10115: PPUSH
10116: CALL_OW 251
10120: PPUSH
10121: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10125: LD_EXP 16
10129: PPUSH
10130: LD_STRING D1-Roth-7
10132: PPUSH
10133: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10144: LD_EXP 17
10148: PPUSH
10149: LD_EXP 15
10153: PPUSH
10154: CALL_OW 296
10158: PUSH
10159: LD_INT 6
10161: LESS
10162: IFFALSE 10137
// ComTurnUnit ( Powell , JMM ) ;
10164: LD_EXP 17
10168: PPUSH
10169: LD_EXP 15
10173: PPUSH
10174: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10178: LD_EXP 17
10182: PPUSH
10183: LD_STRING D1-Pow-7
10185: PPUSH
10186: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10190: LD_EXP 15
10194: PPUSH
10195: LD_EXP 17
10199: PPUSH
10200: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10204: LD_EXP 16
10208: PPUSH
10209: LD_EXP 17
10213: PPUSH
10214: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10218: LD_EXP 15
10222: PPUSH
10223: LD_STRING D1-JMM-8
10225: PPUSH
10226: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10230: LD_EXP 17
10234: PPUSH
10235: LD_STRING D1-Pow-8
10237: PPUSH
10238: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10242: LD_EXP 15
10246: PPUSH
10247: LD_STRING D1-JMM-9
10249: PPUSH
10250: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10254: LD_EXP 17
10258: PPUSH
10259: LD_INT 124
10261: PPUSH
10262: LD_INT 61
10264: PPUSH
10265: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10269: LD_INT 35
10271: PPUSH
10272: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10276: LD_EXP 15
10280: PPUSH
10281: LD_EXP 17
10285: PPUSH
10286: CALL_OW 296
10290: PUSH
10291: LD_INT 6
10293: GREATER
10294: IFFALSE 10269
// SayRadio ( Powell , D1-Pow-9 ) ;
10296: LD_EXP 17
10300: PPUSH
10301: LD_STRING D1-Pow-9
10303: PPUSH
10304: CALL_OW 94
// RemoveUnit ( Powell ) ;
10308: LD_EXP 17
10312: PPUSH
10313: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10317: LD_EXP 17
10321: PPUSH
10322: LD_INT 18
10324: PPUSH
10325: CALL_OW 52
// if Joan and not Joan in selected then
10329: LD_EXP 37
10333: PUSH
10334: LD_EXP 37
10338: PUSH
10339: LD_EXP 3
10343: IN
10344: NOT
10345: AND
10346: IFFALSE 10360
// SayRadio ( Joan , D1-Joan-9 ) ;
10348: LD_EXP 37
10352: PPUSH
10353: LD_STRING D1-Joan-9
10355: PPUSH
10356: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10360: LD_EXP 16
10364: PPUSH
10365: LD_EXP 15
10369: PPUSH
10370: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10374: LD_EXP 15
10378: PPUSH
10379: LD_EXP 16
10383: PPUSH
10384: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10388: LD_EXP 16
10392: PPUSH
10393: LD_STRING D1-Roth-9
10395: PPUSH
10396: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10400: LD_EXP 15
10404: PPUSH
10405: LD_STRING D1-JMM-10
10407: PPUSH
10408: CALL_OW 88
// InGameOff ;
10412: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10416: LD_STRING M1
10418: PPUSH
10419: CALL_OW 337
// if Difficulty < 3 then
10423: LD_OWVAR 67
10427: PUSH
10428: LD_INT 3
10430: LESS
10431: IFFALSE 10443
// ChangeSideFog ( 4 , 7 ) ;
10433: LD_INT 4
10435: PPUSH
10436: LD_INT 7
10438: PPUSH
10439: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10443: LD_STRING enableBioCharacter(BIO_ROTH)
10445: PPUSH
10446: CALL_OW 559
// SaveForQuickRestart ;
10450: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10454: LD_INT 7
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 80
// wait ( 0 0$3 ) ;
10470: LD_INT 105
10472: PPUSH
10473: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10477: LD_EXP 16
10481: PPUSH
10482: LD_INT 124
10484: PPUSH
10485: LD_INT 18
10487: PPUSH
10488: CALL_OW 111
// AddComInvisible ( Roth ) ;
10492: LD_EXP 16
10496: PPUSH
10497: CALL_OW 212
// wait ( 0 0$30 ) ;
10501: LD_INT 1050
10503: PPUSH
10504: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10508: LD_EXP 16
10512: PPUSH
10513: LD_INT 2100
10515: PPUSH
10516: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10520: LD_EXP 16
10524: PPUSH
10525: LD_INT 156
10527: PPUSH
10528: LD_INT 20
10530: PPUSH
10531: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10535: LD_EXP 16
10539: PPUSH
10540: LD_INT 178
10542: PPUSH
10543: LD_INT 42
10545: PPUSH
10546: CALL_OW 171
// AddComInvisible ( Roth ) ;
10550: LD_EXP 16
10554: PPUSH
10555: CALL_OW 212
// end ;
10559: LD_VAR 0 1
10563: RET
// every 0 0$1 do var i , tmp ;
10564: GO 10566
10566: DISABLE
10567: LD_INT 0
10569: PPUSH
10570: PPUSH
// begin tmp := selected union friends ;
10571: LD_ADDR_VAR 0 2
10575: PUSH
10576: LD_EXP 3
10580: PUSH
10581: LD_EXP 4
10585: UNION
10586: ST_TO_ADDR
// if gamma_commander = 1 then
10587: LD_EXP 10
10591: PUSH
10592: LD_INT 1
10594: EQUAL
10595: IFFALSE 10613
// tmp := tmp union Donaldson ;
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_VAR 0 2
10606: PUSH
10607: LD_EXP 25
10611: UNION
10612: ST_TO_ADDR
// if gamma_commander = 2 then
10613: LD_EXP 10
10617: PUSH
10618: LD_INT 2
10620: EQUAL
10621: IFFALSE 10639
// tmp := tmp union Brown ;
10623: LD_ADDR_VAR 0 2
10627: PUSH
10628: LD_VAR 0 2
10632: PUSH
10633: LD_EXP 29
10637: UNION
10638: ST_TO_ADDR
// if not tmp then
10639: LD_VAR 0 2
10643: NOT
10644: IFFALSE 10648
// exit ;
10646: GO 10720
// repeat wait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 67
// for i in tmp do
10655: LD_ADDR_VAR 0 1
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: FOR_IN
10666: IFFALSE 10711
// if CanSpot ( JMM , i ) then
10668: LD_EXP 15
10672: PPUSH
10673: LD_VAR 0 1
10677: PPUSH
10678: CALL 9320 0 2
10682: IFFALSE 10709
// begin tmp := tmp diff i ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: DIFF
10699: ST_TO_ADDR
// Spot ( i ) ;
10700: LD_VAR 0 1
10704: PPUSH
10705: CALL 10723 0 1
// end ;
10709: GO 10665
10711: POP
10712: POP
// until not tmp ;
10713: LD_VAR 0 2
10717: NOT
10718: IFFALSE 10648
// end ;
10720: PPOPN 2
10722: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10723: LD_INT 0
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10729: LD_VAR 0 1
10733: NOT
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PUSH
10745: LD_INT 4
10747: NONEQUAL
10748: OR
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 555
10759: OR
10760: PUSH
10761: LD_VAR 0 1
10765: PPUSH
10766: CALL_OW 302
10770: NOT
10771: OR
10772: IFFALSE 10776
// exit ;
10774: GO 12686
// InGameOn ;
10776: CALL_OW 8
// side := 7 ;
10780: LD_ADDR_VAR 0 4
10784: PUSH
10785: LD_INT 7
10787: ST_TO_ADDR
// joined := false ;
10788: LD_ADDR_VAR 0 5
10792: PUSH
10793: LD_INT 0
10795: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 310
10810: ST_TO_ADDR
// if building then
10811: LD_VAR 0 3
10815: IFFALSE 10874
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10817: LD_EXP 15
10821: PPUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: CALL_OW 255
10831: PPUSH
10832: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10836: LD_EXP 15
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: CALL_OW 120
// repeat wait ( 3 ) ;
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 67
// until IsInUnit ( JMM ) ;
10857: LD_EXP 15
10861: PPUSH
10862: CALL_OW 310
10866: IFFALSE 10850
// DialogueOn ;
10868: CALL_OW 6
// end else
10872: GO 10906
// begin ComTurnUnit ( JMM , unit ) ;
10874: LD_EXP 15
10878: PPUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10888: LD_VAR 0 1
10892: PPUSH
10893: LD_EXP 15
10897: PPUSH
10898: CALL_OW 119
// DialogueOn ;
10902: CALL_OW 6
// end ; if unit = Joan then
10906: LD_VAR 0 1
10910: PUSH
10911: LD_EXP 37
10915: EQUAL
10916: IFFALSE 11026
// begin joined := true ;
10918: LD_ADDR_VAR 0 5
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if Joan in selected then
10926: LD_EXP 37
10930: PUSH
10931: LD_EXP 3
10935: IN
10936: IFFALSE 10964
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10938: LD_EXP 37
10942: PPUSH
10943: LD_STRING D3-Joan-Joan-1
10945: PPUSH
10946: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10950: LD_EXP 15
10954: PPUSH
10955: LD_STRING D3-Joan-JMM-1
10957: PPUSH
10958: CALL_OW 88
// end else
10962: GO 11024
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10964: LD_EXP 37
10968: PPUSH
10969: LD_STRING D4-Joan-Joan-1
10971: PPUSH
10972: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10976: LD_EXP 15
10980: PPUSH
10981: LD_STRING D4-Joan-JMM-1
10983: PPUSH
10984: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10988: LD_EXP 37
10992: PPUSH
10993: LD_STRING D4-Joan-Joan-2
10995: PPUSH
10996: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
11000: LD_EXP 15
11004: PPUSH
11005: LD_STRING D4-Joan-JMM-2
11007: PPUSH
11008: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
11012: LD_EXP 37
11016: PPUSH
11017: LD_STRING D4-Joan-Joan-3
11019: PPUSH
11020: CALL_OW 88
// end ; end else
11024: GO 12494
// if unit = Lisa then
11026: LD_VAR 0 1
11030: PUSH
11031: LD_EXP 24
11035: EQUAL
11036: IFFALSE 11228
// begin if Lisa in selected then
11038: LD_EXP 24
11042: PUSH
11043: LD_EXP 3
11047: IN
11048: IFFALSE 11161
// begin if GetSide ( Joan ) = 7 then
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 255
11059: PUSH
11060: LD_INT 7
11062: EQUAL
11063: IFFALSE 11127
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11065: LD_EXP 24
11069: PPUSH
11070: LD_STRING D3-LisaJ-Lisa-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11077: LD_EXP 15
11081: PPUSH
11082: LD_STRING D3-LisaJ-JMM-1
11084: PPUSH
11085: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11089: LD_EXP 24
11093: PPUSH
11094: LD_STRING D3-LisaJ-Lisa-2
11096: PPUSH
11097: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11101: LD_EXP 15
11105: PPUSH
11106: LD_STRING D3-LisaJ-JMM-2
11108: PPUSH
11109: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11113: LD_EXP 24
11117: PPUSH
11118: LD_STRING D3-LisaJ-Lisa-3
11120: PPUSH
11121: CALL_OW 88
// end else
11125: GO 11159
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11127: LD_EXP 24
11131: PPUSH
11132: LD_STRING D3-LisaL-Lisa-1
11134: PPUSH
11135: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11139: LD_EXP 15
11143: PPUSH
11144: LD_STRING D3-LisaL-JMM-1
11146: PPUSH
11147: CALL_OW 88
// joined := true ;
11151: LD_ADDR_VAR 0 5
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// end ; end else
11159: GO 11226
// begin if GetSide ( Joan ) = 7 then
11161: LD_EXP 37
11165: PPUSH
11166: CALL_OW 255
11170: PUSH
11171: LD_INT 7
11173: EQUAL
11174: IFFALSE 11214
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11176: LD_EXP 24
11180: PPUSH
11181: LD_STRING D4-LisaJ-Lisa-1
11183: PPUSH
11184: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11188: LD_EXP 15
11192: PPUSH
11193: LD_STRING D4-LisaJ-JMM-1
11195: PPUSH
11196: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11200: LD_EXP 24
11204: PPUSH
11205: LD_STRING D4-LisaJ-Lisa-2
11207: PPUSH
11208: CALL_OW 88
// end else
11212: GO 11226
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11214: LD_EXP 24
11218: PPUSH
11219: LD_STRING D4-LisaL-Lisa-1
11221: PPUSH
11222: CALL_OW 88
// end ; end ; end else
11226: GO 12494
// if unit = Frank then
11228: LD_VAR 0 1
11232: PUSH
11233: LD_EXP 34
11237: EQUAL
11238: IFFALSE 11378
// begin joined := true ;
11240: LD_ADDR_VAR 0 5
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// if Frank in selected then
11248: LD_EXP 34
11252: PUSH
11253: LD_EXP 3
11257: IN
11258: IFFALSE 11328
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11260: LD_EXP 34
11264: PPUSH
11265: LD_STRING D3-Frank-Frank-1
11267: PPUSH
11268: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11272: LD_EXP 15
11276: PPUSH
11277: LD_STRING D3-Frank-JMM-1
11279: PPUSH
11280: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11284: LD_EXP 34
11288: PPUSH
11289: LD_STRING D3-Frank-Frank-2
11291: PPUSH
11292: CALL_OW 88
// if reached_lab then
11296: LD_EXP 5
11300: IFFALSE 11326
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11302: LD_EXP 15
11306: PPUSH
11307: LD_STRING D3-Frank-JMM-2
11309: PPUSH
11310: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11314: LD_EXP 34
11318: PPUSH
11319: LD_STRING D3-Frank-Frank-3
11321: PPUSH
11322: CALL_OW 88
// end ; end else
11326: GO 11376
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11328: LD_EXP 34
11332: PPUSH
11333: LD_STRING D4-Frank-Frank-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11340: LD_EXP 15
11344: PPUSH
11345: LD_STRING D4-Frank-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11352: LD_EXP 34
11356: PPUSH
11357: LD_STRING D4-Frank-Frank-2
11359: PPUSH
11360: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11364: LD_EXP 15
11368: PPUSH
11369: LD_STRING D4-Frank-JMM-2
11371: PPUSH
11372: CALL_OW 88
// end ; end else
11376: GO 12494
// if unit = Brown then
11378: LD_VAR 0 1
11382: PUSH
11383: LD_EXP 29
11387: EQUAL
11388: IFFALSE 11484
// begin if Brown in selected or gamma_commander = 2 then
11390: LD_EXP 29
11394: PUSH
11395: LD_EXP 3
11399: IN
11400: PUSH
11401: LD_EXP 10
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: OR
11410: IFFALSE 11446
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11412: LD_EXP 29
11416: PPUSH
11417: LD_STRING D3-Soldier1-Sol1-1
11419: PPUSH
11420: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11424: LD_EXP 15
11428: PPUSH
11429: LD_STRING D6-JMM-Brown-1
11431: PPUSH
11432: CALL_OW 88
// joined := true ;
11436: LD_ADDR_VAR 0 5
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// end else
11444: GO 11482
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11446: LD_EXP 29
11450: PPUSH
11451: LD_STRING D4-Soldier2-Sol1-1
11453: PPUSH
11454: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11458: LD_EXP 15
11462: PPUSH
11463: LD_STRING D4-Soldier1-JMM-1
11465: PPUSH
11466: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11470: LD_EXP 29
11474: PPUSH
11475: LD_STRING D4-Soldier2-Sol1-2
11477: PPUSH
11478: CALL_OW 88
// end ; end else
11482: GO 12494
// if unit = Donaldson then
11484: LD_VAR 0 1
11488: PUSH
11489: LD_EXP 25
11493: EQUAL
11494: IFFALSE 11590
// begin if Donaldson in selected or gamma_commander = 1 then
11496: LD_EXP 25
11500: PUSH
11501: LD_EXP 3
11505: IN
11506: PUSH
11507: LD_EXP 10
11511: PUSH
11512: LD_INT 1
11514: EQUAL
11515: OR
11516: IFFALSE 11552
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11518: LD_EXP 25
11522: PPUSH
11523: LD_STRING D3-Soldier2-FSol2-1
11525: PPUSH
11526: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11530: LD_EXP 15
11534: PPUSH
11535: LD_STRING D3-Soldier2-JMM-1
11537: PPUSH
11538: CALL_OW 88
// joined := true ;
11542: LD_ADDR_VAR 0 5
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// end else
11550: GO 11588
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11552: LD_EXP 25
11556: PPUSH
11557: LD_STRING D4-Soldier1-FSol1-1
11559: PPUSH
11560: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11564: LD_EXP 15
11568: PPUSH
11569: LD_STRING D4-Soldier1-JMM-1
11571: PPUSH
11572: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11576: LD_EXP 25
11580: PPUSH
11581: LD_STRING D4-Soldier1-FSol1-2
11583: PPUSH
11584: CALL_OW 88
// end ; end else
11588: GO 12494
// if unit = Cyrus then
11590: LD_VAR 0 1
11594: PUSH
11595: LD_EXP 27
11599: EQUAL
11600: IFFALSE 11674
// begin if Cyrus in selected then
11602: LD_EXP 27
11606: PUSH
11607: LD_EXP 3
11611: IN
11612: IFFALSE 11648
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11614: LD_EXP 27
11618: PPUSH
11619: LD_STRING D3-Cyrus-Cyrus-1
11621: PPUSH
11622: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11626: LD_EXP 15
11630: PPUSH
11631: LD_STRING D3-Cyrus-JMM-1
11633: PPUSH
11634: CALL_OW 88
// joined := true ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// end else
11646: GO 11672
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11648: LD_EXP 27
11652: PPUSH
11653: LD_STRING D4-Cyrus-Cyrus-1
11655: PPUSH
11656: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11660: LD_EXP 15
11664: PPUSH
11665: LD_STRING D4-Cyrus-JMM-1
11667: PPUSH
11668: CALL_OW 88
// end ; end else
11672: GO 12494
// if unit = Bobby then
11674: LD_VAR 0 1
11678: PUSH
11679: LD_EXP 26
11683: EQUAL
11684: IFFALSE 11770
// begin if Bobby in selected then
11686: LD_EXP 26
11690: PUSH
11691: LD_EXP 3
11695: IN
11696: IFFALSE 11732
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11698: LD_EXP 26
11702: PPUSH
11703: LD_STRING D3-Bobby-Bobby-1
11705: PPUSH
11706: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11710: LD_EXP 15
11714: PPUSH
11715: LD_STRING D3-Bobby-JMM-1
11717: PPUSH
11718: CALL_OW 88
// joined := true ;
11722: LD_ADDR_VAR 0 5
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// end else
11730: GO 11768
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11732: LD_EXP 26
11736: PPUSH
11737: LD_STRING D4-Bobby-Bobby-1
11739: PPUSH
11740: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11744: LD_EXP 15
11748: PPUSH
11749: LD_STRING D4-Bobby-JMM-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11756: LD_EXP 26
11760: PPUSH
11761: LD_STRING D4-Bobby-Bobby-2
11763: PPUSH
11764: CALL_OW 88
// end ; end else
11768: GO 12494
// if unit = Cornel then
11770: LD_VAR 0 1
11774: PUSH
11775: LD_EXP 32
11779: EQUAL
11780: IFFALSE 11878
// begin if Cornel in selected then
11782: LD_EXP 32
11786: PUSH
11787: LD_EXP 3
11791: IN
11792: IFFALSE 11840
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11794: LD_EXP 32
11798: PPUSH
11799: LD_STRING D3-Mark-Corn-1
11801: PPUSH
11802: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11806: LD_EXP 15
11810: PPUSH
11811: LD_STRING D3-Mark-JMM-1
11813: PPUSH
11814: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11818: LD_EXP 32
11822: PPUSH
11823: LD_STRING D3-Mark-Corn-2
11825: PPUSH
11826: CALL_OW 88
// joined := true ;
11830: LD_ADDR_VAR 0 5
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// end else
11838: GO 11876
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11840: LD_EXP 32
11844: PPUSH
11845: LD_STRING D4-Mark-Corn-1
11847: PPUSH
11848: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11852: LD_EXP 15
11856: PPUSH
11857: LD_STRING D4-Mark-JMM-1
11859: PPUSH
11860: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11864: LD_EXP 32
11868: PPUSH
11869: LD_STRING D4-Mark-Corn-2
11871: PPUSH
11872: CALL_OW 88
// end ; end else
11876: GO 12494
// if unit = Gary then
11878: LD_VAR 0 1
11882: PUSH
11883: LD_EXP 33
11887: EQUAL
11888: IFFALSE 11986
// begin if Gary in selected then
11890: LD_EXP 33
11894: PUSH
11895: LD_EXP 3
11899: IN
11900: IFFALSE 11936
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11902: LD_EXP 33
11906: PPUSH
11907: LD_STRING D3-Gary-Gary-1
11909: PPUSH
11910: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11914: LD_EXP 15
11918: PPUSH
11919: LD_STRING D3-Gary-JMM-1
11921: PPUSH
11922: CALL_OW 88
// joined := true ;
11926: LD_ADDR_VAR 0 5
11930: PUSH
11931: LD_INT 1
11933: ST_TO_ADDR
// end else
11934: GO 11984
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11936: LD_EXP 33
11940: PPUSH
11941: LD_STRING D4-Gary-Gary-1
11943: PPUSH
11944: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11948: LD_EXP 33
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 235
// DialogueOff ;
11960: CALL_OW 7
// InGameOff ;
11964: CALL_OW 9
// SetSide ( JMM , side ) ;
11968: LD_EXP 15
11972: PPUSH
11973: LD_VAR 0 4
11977: PPUSH
11978: CALL_OW 235
// exit ;
11982: GO 12686
// end ; end else
11984: GO 12494
// if unit = Kikuchi then
11986: LD_VAR 0 1
11990: PUSH
11991: LD_EXP 35
11995: EQUAL
11996: IFFALSE 12094
// begin if Kikuchi in selected then
11998: LD_EXP 35
12002: PUSH
12003: LD_EXP 3
12007: IN
12008: IFFALSE 12044
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
12010: LD_EXP 35
12014: PPUSH
12015: LD_STRING D3-Yamako-Yam-1
12017: PPUSH
12018: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12022: LD_EXP 15
12026: PPUSH
12027: LD_STRING D3-Soldier2-JMM-1
12029: PPUSH
12030: CALL_OW 88
// joined := true ;
12034: LD_ADDR_VAR 0 5
12038: PUSH
12039: LD_INT 1
12041: ST_TO_ADDR
// end else
12042: GO 12092
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
12044: LD_EXP 35
12048: PPUSH
12049: LD_STRING D4-Yamako-Yam-1
12051: PPUSH
12052: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12056: LD_EXP 35
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 235
// DialogueOff ;
12068: CALL_OW 7
// InGameOff ;
12072: CALL_OW 9
// SetSide ( JMM , side ) ;
12076: LD_EXP 15
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// exit ;
12090: GO 12686
// end ; end else
12092: GO 12494
// if unit = Gladstone then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_EXP 30
12103: EQUAL
12104: IFFALSE 12178
// begin if Gladstone in selected then
12106: LD_EXP 30
12110: PUSH
12111: LD_EXP 3
12115: IN
12116: IFFALSE 12152
// begin joined := true ;
12118: LD_ADDR_VAR 0 5
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12126: LD_EXP 15
12130: PPUSH
12131: LD_STRING D3-Tim-JMM-1
12133: PPUSH
12134: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12138: LD_EXP 30
12142: PPUSH
12143: LD_STRING D3-Tim-Glad-1
12145: PPUSH
12146: CALL_OW 88
// end else
12150: GO 12176
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12152: LD_EXP 15
12156: PPUSH
12157: LD_STRING D4-Tim-JMM-1
12159: PPUSH
12160: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12164: LD_EXP 30
12168: PPUSH
12169: LD_STRING D4-Tim-Glad-1
12171: PPUSH
12172: CALL_OW 88
// end ; end else
12176: GO 12494
// if unit = Denis then
12178: LD_VAR 0 1
12182: PUSH
12183: LD_EXP 28
12187: EQUAL
12188: IFFALSE 12224
// begin joined := true ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12198: LD_EXP 28
12202: PPUSH
12203: LD_STRING D3-Denis-Den-1
12205: PPUSH
12206: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12210: LD_EXP 15
12214: PPUSH
12215: LD_STRING D3-Denis-JMM-1
12217: PPUSH
12218: CALL_OW 88
// end else
12222: GO 12494
// if unit = Simms then
12224: LD_VAR 0 1
12228: PUSH
12229: LD_EXP 36
12233: EQUAL
12234: IFFALSE 12270
// begin joined := true ;
12236: LD_ADDR_VAR 0 5
12240: PUSH
12241: LD_INT 1
12243: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12244: LD_EXP 36
12248: PPUSH
12249: LD_STRING D3-Simms-Sim-1
12251: PPUSH
12252: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12256: LD_EXP 15
12260: PPUSH
12261: LD_STRING D3-Simms-JMM-1
12263: PPUSH
12264: CALL_OW 88
// end else
12268: GO 12494
// if unit = DeltaDoctor then
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 38
12279: EQUAL
12280: IFFALSE 12316
// begin joined := true ;
12282: LD_ADDR_VAR 0 5
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12290: LD_EXP 38
12294: PPUSH
12295: LD_STRING D3-Soldier1-Sol1-1
12297: PPUSH
12298: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12302: LD_EXP 15
12306: PPUSH
12307: LD_STRING D3-Soldier1-JMM-1
12309: PPUSH
12310: CALL_OW 88
// end else
12314: GO 12494
// begin joined := unit in selected ;
12316: LD_ADDR_VAR 0 5
12320: PUSH
12321: LD_VAR 0 1
12325: PUSH
12326: LD_EXP 3
12330: IN
12331: ST_TO_ADDR
// if joined then
12332: LD_VAR 0 5
12336: IFFALSE 12405
// begin if GetSex ( unit ) = sex_male then
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL_OW 258
12347: PUSH
12348: LD_INT 1
12350: EQUAL
12351: IFFALSE 12379
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: LD_STRING D3-Soldier1-Sol1-1
12360: PPUSH
12361: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12365: LD_EXP 15
12369: PPUSH
12370: LD_STRING D3-Soldier1-JMM-1
12372: PPUSH
12373: CALL_OW 88
// end else
12377: GO 12403
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_STRING D3-Soldier2-FSol2-1
12386: PPUSH
12387: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12391: LD_EXP 15
12395: PPUSH
12396: LD_STRING D3-Soldier2-JMM-1
12398: PPUSH
12399: CALL_OW 88
// end ; end else
12403: GO 12494
// begin if GetSex ( unit ) = sex_male then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 258
12414: PUSH
12415: LD_INT 1
12417: EQUAL
12418: IFFALSE 12458
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_STRING D4-Soldier2-Sol1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12432: LD_EXP 15
12436: PPUSH
12437: LD_STRING D4-Soldier2-JMM-1
12439: PPUSH
12440: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12444: LD_VAR 0 1
12448: PPUSH
12449: LD_STRING D4-Soldier2-Sol2-1
12451: PPUSH
12452: CALL_OW 88
// end else
12456: GO 12494
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12458: LD_VAR 0 1
12462: PPUSH
12463: LD_STRING D4-Soldier1-FSol1-1
12465: PPUSH
12466: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12470: LD_EXP 15
12474: PPUSH
12475: LD_STRING D4-Soldier1-JMM-1
12477: PPUSH
12478: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12482: LD_VAR 0 1
12486: PPUSH
12487: LD_STRING D4-Soldier1-FSol1-2
12489: PPUSH
12490: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12494: CALL_OW 7
// InGameOff ;
12498: CALL_OW 9
// if building then
12502: LD_VAR 0 3
12506: IFFALSE 12607
// begin SetSide ( JMM , side ) ;
12508: LD_EXP 15
12512: PPUSH
12513: LD_VAR 0 4
12517: PPUSH
12518: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12522: LD_EXP 15
12526: PPUSH
12527: CALL_OW 122
// if joined then
12531: LD_VAR 0 5
12535: IFFALSE 12574
// begin SetSide ( unit , side ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_VAR 0 4
12546: PPUSH
12547: CALL_OW 235
// SetSide ( building , 1 ) ;
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 235
// ComExitBuilding ( unit ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 122
// end else
12572: GO 12605
// begin wait ( 0 0$10 ) ;
12574: LD_INT 350
12576: PPUSH
12577: CALL_OW 67
// SetSide ( unit , 1 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 235
// SetSide ( building , 1 ) ;
12593: LD_VAR 0 3
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: CALL_OW 235
// end ; end else
12605: GO 12686
// begin ComStop ( [ JMM , unit ] ) ;
12607: LD_EXP 15
12611: PUSH
12612: LD_VAR 0 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 141
// if joined then
12625: LD_VAR 0 5
12629: IFFALSE 12647
// SetSide ( unit , side ) else
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_VAR 0 4
12640: PPUSH
12641: CALL_OW 235
12645: GO 12686
// begin repeat wait ( 0 0$1 ) ;
12647: LD_INT 35
12649: PPUSH
12650: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12654: LD_EXP 15
12658: PPUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 296
12668: PUSH
12669: LD_INT 11
12671: GREATER
12672: IFFALSE 12647
// SetSide ( unit , 1 ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 235
// end ; end ; end ;
12686: LD_VAR 0 2
12690: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12691: LD_EXP 15
12695: PPUSH
12696: LD_EXP 39
12700: PPUSH
12701: CALL_OW 296
12705: PUSH
12706: LD_INT 6
12708: LESS
12709: PUSH
12710: LD_INT 7
12712: PPUSH
12713: LD_EXP 39
12717: PPUSH
12718: CALL_OW 292
12722: AND
12723: IFFALSE 12781
12725: GO 12727
12727: DISABLE
// begin DialogueOn ;
12728: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12732: LD_EXP 39
12736: PPUSH
12737: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12741: LD_EXP 15
12745: PPUSH
12746: LD_STRING D6-JMM-Mike-1
12748: PPUSH
12749: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12753: LD_EXP 39
12757: PPUSH
12758: LD_STRING D6-Mike-1
12760: PPUSH
12761: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12765: LD_EXP 39
12769: PPUSH
12770: LD_INT 7
12772: PPUSH
12773: CALL_OW 235
// DialogueOff ;
12777: CALL_OW 7
// end ;
12781: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12782: LD_EXP 15
12786: PPUSH
12787: CALL_OW 310
12791: PUSH
12792: LD_INT 47
12794: EQUAL
12795: IFFALSE 12863
12797: GO 12799
12799: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12800: LD_STRING M1a
12802: PPUSH
12803: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12807: LD_INT 13
12809: PPUSH
12810: LD_INT 7
12812: PPUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12820: LD_INT 29
12822: PPUSH
12823: LD_INT 7
12825: PPUSH
12826: LD_INT 2
12828: PPUSH
12829: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12833: LD_EXP 15
12837: PPUSH
12838: LD_INT 9
12840: PPUSH
12841: CALL_OW 336
// can_escape := true ;
12845: LD_ADDR_EXP 6
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12853: LD_INT 19
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: CALL_OW 424
// end ;
12863: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12864: LD_EXP 17
12868: PPUSH
12869: CALL_OW 256
12873: PUSH
12874: LD_INT 999
12876: LESS
12877: IFFALSE 12928
12879: GO 12881
12881: DISABLE
// begin enable ;
12882: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12883: LD_INT 25
12885: PPUSH
12886: LD_INT 48
12888: PPUSH
12889: CALL_OW 428
12893: PUSH
12894: LD_EXP 17
12898: EQUAL
12899: IFFALSE 12913
// begin RemoveUnit ( Powell ) ;
12901: LD_EXP 17
12905: PPUSH
12906: CALL_OW 64
// disable ;
12910: DISABLE
// end else
12911: GO 12928
// ComMoveXY ( Powell , 25 , 48 ) ;
12913: LD_EXP 17
12917: PPUSH
12918: LD_INT 25
12920: PPUSH
12921: LD_INT 48
12923: PPUSH
12924: CALL_OW 111
// end ;
12928: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12929: LD_INT 22
12931: PUSH
12932: LD_INT 4
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 21
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 3
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: LD_INT 990
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PUSH
12976: LD_EXP 16
12980: DIFF
12981: IFFALSE 13125
12983: GO 12985
12985: DISABLE
12986: LD_INT 0
12988: PPUSH
// begin enable ;
12989: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 22
12997: PUSH
12998: LD_INT 4
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: LD_INT 24
13020: PUSH
13021: LD_INT 990
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: PUSH
13042: LD_EXP 16
13046: DIFF
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13123
// begin ComFree ( i ) ;
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 139
// SetSide ( i , 1 ) ;
13060: LD_VAR 0 1
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_EXP 15
13081: PPUSH
13082: CALL_OW 296
13086: PUSH
13087: LD_INT 14
13089: LESS
13090: IFFALSE 13121
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13092: LD_VAR 0 1
13096: PPUSH
13097: LD_EXP 15
13101: PPUSH
13102: CALL_OW 250
13106: PPUSH
13107: LD_EXP 15
13111: PPUSH
13112: CALL_OW 251
13116: PPUSH
13117: CALL_OW 114
// end ;
13121: GO 13048
13123: POP
13124: POP
// end ;
13125: PPOPN 1
13127: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13128: LD_INT 22
13130: PUSH
13131: LD_INT 4
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 34
13140: PUSH
13141: LD_INT 12
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: IFFALSE 13238
13158: GO 13160
13160: DISABLE
13161: LD_INT 0
13163: PPUSH
// begin enable ;
13164: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13165: LD_ADDR_VAR 0 1
13169: PUSH
13170: LD_INT 22
13172: PUSH
13173: LD_INT 4
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 34
13182: PUSH
13183: LD_INT 12
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: PUSH
13199: FOR_IN
13200: IFFALSE 13236
// if GetDistUnits ( i , JMM ) < 6 then
13202: LD_VAR 0 1
13206: PPUSH
13207: LD_EXP 15
13211: PPUSH
13212: CALL_OW 296
13216: PUSH
13217: LD_INT 6
13219: LESS
13220: IFFALSE 13234
// SetSide ( i , 7 ) ;
13222: LD_VAR 0 1
13226: PPUSH
13227: LD_INT 7
13229: PPUSH
13230: CALL_OW 235
13234: GO 13199
13236: POP
13237: POP
// end ;
13238: PPOPN 1
13240: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13241: LD_EXP 6
13245: PUSH
13246: LD_INT 19
13248: PPUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 7
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 50
13261: PUSH
13262: EMPTY
13263: LIST
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 71
13284: NOT
13285: AND
13286: PUSH
13287: LD_INT 3
13289: PPUSH
13290: CALL_OW 469
13294: NOT
13295: AND
13296: PUSH
13297: LD_INT 5
13299: PPUSH
13300: CALL_OW 469
13304: NOT
13305: AND
13306: IFFALSE 15031
13308: GO 13310
13310: DISABLE
13311: LD_INT 0
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// begin m1 := false ;
13318: LD_ADDR_VAR 0 3
13322: PUSH
13323: LD_INT 0
13325: ST_TO_ADDR
// m2 := false ;
13326: LD_ADDR_VAR 0 4
13330: PUSH
13331: LD_INT 0
13333: ST_TO_ADDR
// m3 := false ;
13334: LD_ADDR_VAR 0 5
13338: PUSH
13339: LD_INT 0
13341: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_EXP 3
13351: PPUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 4
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: ST_TO_ADDR
// if not all_taken then
13385: LD_VAR 0 1
13389: NOT
13390: IFFALSE 13520
// begin if Query ( Q1 ) = 1 then
13392: LD_STRING Q1
13394: PPUSH
13395: CALL_OW 97
13399: PUSH
13400: LD_INT 1
13402: EQUAL
13403: IFFALSE 13520
// begin repeat wait ( 0 0$1 ) ;
13405: LD_INT 35
13407: PPUSH
13408: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13412: LD_EXP 3
13416: PPUSH
13417: LD_INT 22
13419: PUSH
13420: LD_INT 4
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 21
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 72
13445: PUSH
13446: LD_INT 0
13448: EQUAL
13449: PUSH
13450: LD_INT 19
13452: PPUSH
13453: LD_INT 22
13455: PUSH
13456: LD_INT 7
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 71
13488: NOT
13489: AND
13490: PUSH
13491: LD_INT 3
13493: PPUSH
13494: CALL_OW 469
13498: NOT
13499: AND
13500: PUSH
13501: LD_INT 5
13503: PPUSH
13504: CALL_OW 469
13508: NOT
13509: AND
13510: IFFALSE 13405
// all_taken := true ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// end ; end ; if Count ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 6 then
13520: LD_INT 22
13522: PUSH
13523: LD_INT 7
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 50
13542: PUSH
13543: EMPTY
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: PPUSH
13556: CALL 38486 0 1
13560: PUSH
13561: LD_INT 6
13563: LESS
13564: IFFALSE 13573
// begin YouLost ( AlliesLost ) ;
13566: LD_STRING AlliesLost
13568: PPUSH
13569: CALL_OW 104
// end ; if team_kill_counter < 3 then
13573: LD_EXP 9
13577: PUSH
13578: LD_INT 3
13580: LESS
13581: IFFALSE 13597
// Say ( JMM , D5-JMM-1 ) else
13583: LD_EXP 15
13587: PPUSH
13588: LD_STRING D5-JMM-1
13590: PPUSH
13591: CALL_OW 88
13595: GO 13609
// Say ( JMM , D5-JMM-1a ) ;
13597: LD_EXP 15
13601: PPUSH
13602: LD_STRING D5-JMM-1a
13604: PPUSH
13605: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13609: LD_INT 22
13611: PUSH
13612: LD_INT 7
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 21
13621: PUSH
13622: LD_INT 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 23
13631: PUSH
13632: LD_INT 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: PPUSH
13644: CALL_OW 69
13648: PUSH
13649: LD_EXP 15
13653: PUSH
13654: LD_EXP 16
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: DIFF
13663: PUSH
13664: LD_INT 10
13666: GREATEREQUAL
13667: IFFALSE 13676
// SetAchievement ( ACH_TEAM ) ;
13669: LD_STRING ACH_TEAM
13671: PPUSH
13672: CALL_OW 543
// if not invis_used then
13676: LD_EXP 12
13680: NOT
13681: IFFALSE 13697
// begin wait ( 3 ) ;
13683: LD_INT 3
13685: PPUSH
13686: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13690: LD_STRING ACH_NOINVIS
13692: PPUSH
13693: CALL_OW 543
// end ; if not alert then
13697: LD_EXP 13
13701: NOT
13702: IFFALSE 13718
// begin wait ( 3 ) ;
13704: LD_INT 3
13706: PPUSH
13707: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13711: LD_STRING ACH_ALARM
13713: PPUSH
13714: CALL_OW 543
// end ; if tick < 15 15$00 then
13718: LD_OWVAR 1
13722: PUSH
13723: LD_INT 31500
13725: LESS
13726: IFFALSE 13742
// begin wait ( 3 ) ;
13728: LD_INT 3
13730: PPUSH
13731: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13735: LD_STRING ACH_ASPEED_16
13737: PPUSH
13738: CALL_OW 543
// end ; if all_taken then
13742: LD_VAR 0 1
13746: IFFALSE 13768
// begin AddMedal ( All , 1 ) ;
13748: LD_STRING All
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 101
// m1 := true ;
13758: LD_ADDR_VAR 0 3
13762: PUSH
13763: LD_INT 1
13765: ST_TO_ADDR
// end else
13766: GO 13779
// AddMedal ( All , - 1 ) ;
13768: LD_STRING All
13770: PPUSH
13771: LD_INT 1
13773: NEG
13774: PPUSH
13775: CALL_OW 101
// if team_kill_counter then
13779: LD_EXP 9
13783: IFFALSE 13798
// AddMedal ( Save , - 1 ) else
13785: LD_STRING Save
13787: PPUSH
13788: LD_INT 1
13790: NEG
13791: PPUSH
13792: CALL_OW 101
13796: GO 13816
// begin AddMedal ( Save , 1 ) ;
13798: LD_STRING Save
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL_OW 101
// m2 := true ;
13808: LD_ADDR_VAR 0 4
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13816: LD_EXP 8
13820: PUSH
13821: LD_INT 2
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: LD_INT 1
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_OWVAR 67
13843: ARRAY
13844: GREATEREQUAL
13845: IFFALSE 13860
// AddMedal ( Friendship , - 1 ) else
13847: LD_STRING Friendship
13849: PPUSH
13850: LD_INT 1
13852: NEG
13853: PPUSH
13854: CALL_OW 101
13858: GO 13878
// begin AddMedal ( Friendship , 1 ) ;
13860: LD_STRING Friendship
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: CALL_OW 101
// m3 := true ;
13870: LD_ADDR_VAR 0 5
13874: PUSH
13875: LD_INT 1
13877: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13878: LD_VAR 0 3
13882: PUSH
13883: LD_VAR 0 4
13887: AND
13888: PUSH
13889: LD_VAR 0 5
13893: AND
13894: PUSH
13895: LD_OWVAR 67
13899: PUSH
13900: LD_INT 3
13902: GREATEREQUAL
13903: AND
13904: IFFALSE 13916
// SetAchievementEX ( ACH_AMER , 16 ) ;
13906: LD_STRING ACH_AMER
13908: PPUSH
13909: LD_INT 16
13911: PPUSH
13912: CALL_OW 564
// GiveMedals ( MAIN ) ;
13916: LD_STRING MAIN
13918: PPUSH
13919: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13923: LD_ADDR_VAR 0 2
13927: PUSH
13928: LD_INT 22
13930: PUSH
13931: LD_INT 7
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 2
13940: PUSH
13941: LD_INT 25
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 25
13963: PUSH
13964: LD_INT 3
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 25
13973: PUSH
13974: LD_INT 4
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 25
13983: PUSH
13984: LD_INT 5
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 25
13993: PUSH
13994: LD_INT 8
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 25
14003: PUSH
14004: LD_INT 9
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 25
14013: PUSH
14014: LD_INT 16
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: EMPTY
14037: LIST
14038: PPUSH
14039: CALL_OW 69
14043: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
14044: LD_VAR 0 2
14048: PUSH
14049: LD_EXP 16
14053: UNION
14054: PUSH
14055: LD_EXP 39
14059: DIFF
14060: PPUSH
14061: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
14065: LD_EXP 15
14069: PPUSH
14070: LD_STRING 12a_JMM
14072: PPUSH
14073: CALL_OW 38
// if IsLive ( Roth ) then
14077: LD_EXP 16
14081: PPUSH
14082: CALL_OW 300
14086: IFFALSE 14100
// SaveCharacters ( Roth , 12a_Roth ) ;
14088: LD_EXP 16
14092: PPUSH
14093: LD_STRING 12a_Roth
14095: PPUSH
14096: CALL_OW 38
// if Lisa in tmp then
14100: LD_EXP 24
14104: PUSH
14105: LD_VAR 0 2
14109: IN
14110: IFFALSE 14126
// SaveCharacters ( Lisa , 12a_Lisa ) else
14112: LD_EXP 24
14116: PPUSH
14117: LD_STRING 12a_Lisa
14119: PPUSH
14120: CALL_OW 38
14124: GO 14144
// if Lisa then
14126: LD_EXP 24
14130: IFFALSE 14144
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14132: LD_EXP 24
14136: PPUSH
14137: LD_STRING 12p_Lisa
14139: PPUSH
14140: CALL_OW 38
// if Mike in tmp then
14144: LD_EXP 39
14148: PUSH
14149: LD_VAR 0 2
14153: IN
14154: IFFALSE 14168
// SaveCharacters ( Mike , 12a_Mike ) ;
14156: LD_EXP 39
14160: PPUSH
14161: LD_STRING 12a_Mike
14163: PPUSH
14164: CALL_OW 38
// if Donaldson in tmp then
14168: LD_EXP 25
14172: PUSH
14173: LD_VAR 0 2
14177: IN
14178: IFFALSE 14194
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14180: LD_EXP 25
14184: PPUSH
14185: LD_STRING 12a_Donaldson
14187: PPUSH
14188: CALL_OW 38
14192: GO 14212
// if Donaldson then
14194: LD_EXP 25
14198: IFFALSE 14212
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14200: LD_EXP 25
14204: PPUSH
14205: LD_STRING 12p_Donaldson
14207: PPUSH
14208: CALL_OW 38
// if Bobby in tmp then
14212: LD_EXP 26
14216: PUSH
14217: LD_VAR 0 2
14221: IN
14222: IFFALSE 14238
// SaveCharacters ( Bobby , 12a_Bobby ) else
14224: LD_EXP 26
14228: PPUSH
14229: LD_STRING 12a_Bobby
14231: PPUSH
14232: CALL_OW 38
14236: GO 14256
// if Bobby then
14238: LD_EXP 26
14242: IFFALSE 14256
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14244: LD_EXP 26
14248: PPUSH
14249: LD_STRING 12p_Bobby
14251: PPUSH
14252: CALL_OW 38
// if Cyrus in tmp then
14256: LD_EXP 27
14260: PUSH
14261: LD_VAR 0 2
14265: IN
14266: IFFALSE 14282
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14268: LD_EXP 27
14272: PPUSH
14273: LD_STRING 12a_Cyrus
14275: PPUSH
14276: CALL_OW 38
14280: GO 14300
// if Cyrus then
14282: LD_EXP 27
14286: IFFALSE 14300
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14288: LD_EXP 27
14292: PPUSH
14293: LD_STRING 12p_Cyrus
14295: PPUSH
14296: CALL_OW 38
// if Denis in tmp then
14300: LD_EXP 28
14304: PUSH
14305: LD_VAR 0 2
14309: IN
14310: IFFALSE 14324
// SaveCharacters ( Denis , 12a_Denis ) ;
14312: LD_EXP 28
14316: PPUSH
14317: LD_STRING 12a_Denis
14319: PPUSH
14320: CALL_OW 38
// if Brown in tmp then
14324: LD_EXP 29
14328: PUSH
14329: LD_VAR 0 2
14333: IN
14334: IFFALSE 14350
// SaveCharacters ( Brown , 12a_Brown ) else
14336: LD_EXP 29
14340: PPUSH
14341: LD_STRING 12a_Brown
14343: PPUSH
14344: CALL_OW 38
14348: GO 14374
// if Brown in tmp then
14350: LD_EXP 29
14354: PUSH
14355: LD_VAR 0 2
14359: IN
14360: IFFALSE 14374
// SaveCharacters ( Brown , 12p_Brown ) ;
14362: LD_EXP 29
14366: PPUSH
14367: LD_STRING 12p_Brown
14369: PPUSH
14370: CALL_OW 38
// if Gladstone in tmp then
14374: LD_EXP 30
14378: PUSH
14379: LD_VAR 0 2
14383: IN
14384: IFFALSE 14400
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14386: LD_EXP 30
14390: PPUSH
14391: LD_STRING 12a_Gladstone
14393: PPUSH
14394: CALL_OW 38
14398: GO 14418
// if Gladstone then
14400: LD_EXP 30
14404: IFFALSE 14418
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14406: LD_EXP 30
14410: PPUSH
14411: LD_STRING 12p_Gladstone
14413: PPUSH
14414: CALL_OW 38
// if Houten in tmp then
14418: LD_EXP 31
14422: PUSH
14423: LD_VAR 0 2
14427: IN
14428: IFFALSE 14444
// SaveCharacters ( Houten , 12a_Houten ) else
14430: LD_EXP 31
14434: PPUSH
14435: LD_STRING 12a_Houten
14437: PPUSH
14438: CALL_OW 38
14442: GO 14462
// if Houten then
14444: LD_EXP 31
14448: IFFALSE 14462
// SaveCharacters ( Houten , 12p_Houten ) ;
14450: LD_EXP 31
14454: PPUSH
14455: LD_STRING 12p_Houten
14457: PPUSH
14458: CALL_OW 38
// if Cornel in tmp then
14462: LD_EXP 32
14466: PUSH
14467: LD_VAR 0 2
14471: IN
14472: IFFALSE 14488
// SaveCharacters ( Cornel , 12a_Cornell ) else
14474: LD_EXP 32
14478: PPUSH
14479: LD_STRING 12a_Cornell
14481: PPUSH
14482: CALL_OW 38
14486: GO 14506
// if Cornel then
14488: LD_EXP 32
14492: IFFALSE 14506
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14494: LD_EXP 32
14498: PPUSH
14499: LD_STRING 12p_Cornell
14501: PPUSH
14502: CALL_OW 38
// if Gary in tmp then
14506: LD_EXP 33
14510: PUSH
14511: LD_VAR 0 2
14515: IN
14516: IFFALSE 14532
// SaveCharacters ( Gary , 12a_Gary ) else
14518: LD_EXP 33
14522: PPUSH
14523: LD_STRING 12a_Gary
14525: PPUSH
14526: CALL_OW 38
14530: GO 14550
// if Gary then
14532: LD_EXP 33
14536: IFFALSE 14550
// SaveCharacters ( Gary , 12p_Gary ) ;
14538: LD_EXP 33
14542: PPUSH
14543: LD_STRING 12p_Gary
14545: PPUSH
14546: CALL_OW 38
// if Frank in tmp then
14550: LD_EXP 34
14554: PUSH
14555: LD_VAR 0 2
14559: IN
14560: IFFALSE 14574
// SaveCharacters ( Frank , 12a_Frank ) ;
14562: LD_EXP 34
14566: PPUSH
14567: LD_STRING 12a_Frank
14569: PPUSH
14570: CALL_OW 38
// if Kikuchi in tmp then
14574: LD_EXP 35
14578: PUSH
14579: LD_VAR 0 2
14583: IN
14584: IFFALSE 14600
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14586: LD_EXP 35
14590: PPUSH
14591: LD_STRING 12a_Kikuchi
14593: PPUSH
14594: CALL_OW 38
14598: GO 14618
// if Kikuchi then
14600: LD_EXP 35
14604: IFFALSE 14618
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14606: LD_EXP 35
14610: PPUSH
14611: LD_STRING 12p_Kikuchi
14613: PPUSH
14614: CALL_OW 38
// if Simms in tmp then
14618: LD_EXP 36
14622: PUSH
14623: LD_VAR 0 2
14627: IN
14628: IFFALSE 14642
// SaveCharacters ( Simms , 12a_Simms ) ;
14630: LD_EXP 36
14634: PPUSH
14635: LD_STRING 12a_Simms
14637: PPUSH
14638: CALL_OW 38
// if Joan in tmp then
14642: LD_EXP 37
14646: PUSH
14647: LD_VAR 0 2
14651: IN
14652: IFFALSE 14666
// SaveCharacters ( Joan , 12a_Joan ) ;
14654: LD_EXP 37
14658: PPUSH
14659: LD_STRING 12a_Joan
14661: PPUSH
14662: CALL_OW 38
// if DeltaDoctor in tmp then
14666: LD_EXP 38
14670: PUSH
14671: LD_VAR 0 2
14675: IN
14676: IFFALSE 14690
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14678: LD_EXP 38
14682: PPUSH
14683: LD_STRING 12a_DeltaDoctor
14685: PPUSH
14686: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14690: LD_ADDR_VAR 0 2
14694: PUSH
14695: LD_VAR 0 2
14699: PUSH
14700: LD_EXP 15
14704: PUSH
14705: LD_EXP 16
14709: PUSH
14710: LD_EXP 24
14714: PUSH
14715: LD_EXP 25
14719: PUSH
14720: LD_EXP 26
14724: PUSH
14725: LD_EXP 27
14729: PUSH
14730: LD_EXP 28
14734: PUSH
14735: LD_EXP 29
14739: PUSH
14740: LD_EXP 30
14744: PUSH
14745: LD_EXP 31
14749: PUSH
14750: LD_EXP 32
14754: PUSH
14755: LD_EXP 33
14759: PUSH
14760: LD_EXP 34
14764: PUSH
14765: LD_EXP 35
14769: PUSH
14770: LD_EXP 36
14774: PUSH
14775: LD_EXP 37
14779: PUSH
14780: LD_EXP 38
14784: PUSH
14785: LD_EXP 39
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: DIFF
14810: ST_TO_ADDR
// if tmp then
14811: LD_VAR 0 2
14815: IFFALSE 14829
// SaveCharacters ( tmp , 12a_others ) ;
14817: LD_VAR 0 2
14821: PPUSH
14822: LD_STRING 12a_others
14824: PPUSH
14825: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14829: LD_ADDR_VAR 0 2
14833: PUSH
14834: LD_INT 21
14836: PUSH
14837: LD_INT 1
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 23
14846: PUSH
14847: LD_INT 1
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 2
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_INT 1
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 22
14869: PUSH
14870: LD_INT 4
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 69
14891: PUSH
14892: LD_EXP 15
14896: PUSH
14897: LD_EXP 16
14901: PUSH
14902: LD_EXP 24
14906: PUSH
14907: LD_EXP 25
14911: PUSH
14912: LD_EXP 26
14916: PUSH
14917: LD_EXP 27
14921: PUSH
14922: LD_EXP 28
14926: PUSH
14927: LD_EXP 29
14931: PUSH
14932: LD_EXP 30
14936: PUSH
14937: LD_EXP 31
14941: PUSH
14942: LD_EXP 32
14946: PUSH
14947: LD_EXP 33
14951: PUSH
14952: LD_EXP 34
14956: PUSH
14957: LD_EXP 35
14961: PUSH
14962: LD_EXP 36
14966: PUSH
14967: LD_EXP 37
14971: PUSH
14972: LD_EXP 38
14976: PUSH
14977: LD_EXP 17
14981: PUSH
14982: LD_EXP 39
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: DIFF
15008: ST_TO_ADDR
// if tmp then
15009: LD_VAR 0 2
15013: IFFALSE 15027
// SaveCharacters ( tmp , 12p_others ) ;
15015: LD_VAR 0 2
15019: PPUSH
15020: LD_STRING 12p_others
15022: PPUSH
15023: CALL_OW 38
// YouWin ;
15027: CALL_OW 103
// end ; end_of_file
15031: PPOPN 5
15033: END
// on SailEvent ( event ) do var tmp ;
15034: LD_INT 0
15036: PPUSH
// begin if event = 1 then
15037: LD_VAR 0 1
15041: PUSH
15042: LD_INT 1
15044: EQUAL
15045: IFFALSE 15118
// begin if not mobile_patrol then
15047: LD_EXP 18
15051: NOT
15052: IFFALSE 15056
// exit ;
15054: GO 15118
// tmp := mobile_patrol [ mobile_patrol ] ;
15056: LD_ADDR_VAR 0 2
15060: PUSH
15061: LD_EXP 18
15065: PUSH
15066: LD_EXP 18
15070: ARRAY
15071: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
15072: LD_ADDR_EXP 18
15076: PUSH
15077: LD_EXP 18
15081: PPUSH
15082: LD_EXP 18
15086: PPUSH
15087: CALL_OW 3
15091: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
15092: LD_VAR 0 2
15096: PPUSH
15097: LD_EXP 19
15101: PUSH
15102: LD_EXP 18
15106: PUSH
15107: LD_INT 1
15109: PLUS
15110: ARRAY
15111: PPUSH
15112: EMPTY
15113: PPUSH
15114: CALL 7021 0 3
// end ; end ;
15118: PPOPN 2
15120: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL 31490 0 1
// if un = JMM then
15130: LD_VAR 0 1
15134: PUSH
15135: LD_EXP 15
15139: EQUAL
15140: IFFALSE 15149
// YouLost ( JMM ) ;
15142: LD_STRING JMM
15144: PPUSH
15145: CALL_OW 104
// if un = Powell then
15149: LD_VAR 0 1
15153: PUSH
15154: LD_EXP 17
15158: EQUAL
15159: IFFALSE 15171
// SaveVariable ( true , 12a_PowellKilled ) ;
15161: LD_INT 1
15163: PPUSH
15164: LD_STRING 12a_PowellKilled
15166: PPUSH
15167: CALL_OW 39
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15171: LD_VAR 0 1
15175: PPUSH
15176: CALL_OW 255
15180: PUSH
15181: LD_INT 7
15183: EQUAL
15184: PUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: CALL_OW 264
15194: PUSH
15195: LD_INT 12
15197: EQUAL
15198: AND
15199: IFFALSE 15208
// YouLost ( Artifact ) ;
15201: LD_STRING Artifact
15203: PPUSH
15204: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15208: LD_VAR 0 1
15212: PPUSH
15213: CALL_OW 255
15217: PUSH
15218: LD_INT 7
15220: EQUAL
15221: PUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 247
15231: PUSH
15232: LD_INT 1
15234: EQUAL
15235: AND
15236: PUSH
15237: LD_VAR 0 1
15241: PUSH
15242: LD_EXP 16
15246: EQUAL
15247: OR
15248: IFFALSE 15264
// team_kill_counter := team_kill_counter + 1 ;
15250: LD_ADDR_EXP 9
15254: PUSH
15255: LD_EXP 9
15259: PUSH
15260: LD_INT 1
15262: PLUS
15263: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 255
15273: PUSH
15274: LD_INT 1
15276: EQUAL
15277: PUSH
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 247
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: AND
15292: IFFALSE 15308
// friends_kill_counter := friends_kill_counter + 1 ;
15294: LD_ADDR_EXP 8
15298: PUSH
15299: LD_EXP 8
15303: PUSH
15304: LD_INT 1
15306: PLUS
15307: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15308: LD_VAR 0 1
15312: PPUSH
15313: CALL_OW 255
15317: PUSH
15318: LD_INT 1
15320: NONEQUAL
15321: IFFALSE 15325
// exit ;
15323: GO 15427
// if GetControl ( un ) = control_remote then
15325: LD_VAR 0 1
15329: PPUSH
15330: CALL_OW 263
15334: PUSH
15335: LD_INT 2
15337: EQUAL
15338: IFFALSE 15356
// defenders := defenders diff un ;
15340: LD_ADDR_EXP 21
15344: PUSH
15345: LD_EXP 21
15349: PUSH
15350: LD_VAR 0 1
15354: DIFF
15355: ST_TO_ADDR
// if not un in defenders then
15356: LD_VAR 0 1
15360: PUSH
15361: LD_EXP 21
15365: IN
15366: NOT
15367: IFFALSE 15427
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15369: LD_ADDR_EXP 22
15373: PUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL_OW 250
15383: PUSH
15384: LD_VAR 0 1
15388: PPUSH
15389: CALL_OW 251
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: ST_TO_ADDR
// def_counter := Inc ( def_counter ) ;
15398: LD_ADDR_EXP 14
15402: PUSH
15403: LD_EXP 14
15407: PPUSH
15408: CALL 75436 0 1
15412: ST_TO_ADDR
// if def_counter < 4 then
15413: LD_EXP 14
15417: PUSH
15418: LD_INT 4
15420: LESS
15421: IFFALSE 15427
// Defend ;
15423: CALL 2958 0 0
// end ; end ;
15427: PPOPN 1
15429: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15430: LD_VAR 0 1
15434: PPUSH
15435: LD_VAR 0 2
15439: PPUSH
15440: CALL 31610 0 2
// if GetSide ( veh ) <> 1 then
15444: LD_VAR 0 1
15448: PPUSH
15449: CALL_OW 255
15453: PUSH
15454: LD_INT 1
15456: NONEQUAL
15457: IFFALSE 15461
// exit ;
15459: GO 15485
// if GetControl ( veh ) = control_remote then
15461: LD_VAR 0 1
15465: PPUSH
15466: CALL_OW 263
15470: PUSH
15471: LD_INT 2
15473: EQUAL
15474: IFFALSE 15485
// Connect ( veh ) ;
15476: LD_VAR 0 1
15480: PPUSH
15481: CALL 44692 0 1
// end ;
15485: PPOPN 2
15487: END
// on UnitGoesToRed ( un ) do var i , veh ;
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15492: LD_VAR 0 1
15496: PPUSH
15497: CALL_OW 255
15501: PUSH
15502: LD_INT 1
15504: EQUAL
15505: PUSH
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL_OW 263
15515: PUSH
15516: LD_INT 2
15518: EQUAL
15519: AND
15520: IFFALSE 15531
// ComUnlink ( un ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 136
// if un = ambar0 then
15531: LD_VAR 0 1
15535: PUSH
15536: LD_INT 18
15538: EQUAL
15539: IFFALSE 15649
// begin uc_side := 1 ;
15541: LD_ADDR_OWVAR 20
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// uc_nation := 1 ;
15549: LD_ADDR_OWVAR 21
15553: PUSH
15554: LD_INT 1
15556: ST_TO_ADDR
// for i = 1 to 6 do
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: DOUBLE
15563: LD_INT 1
15565: DEC
15566: ST_TO_ADDR
15567: LD_INT 6
15569: PUSH
15570: FOR_TO
15571: IFFALSE 15647
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15573: LD_INT 3
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: LD_INT 3
15581: PPUSH
15582: LD_INT 4
15584: PPUSH
15585: LD_INT 100
15587: PPUSH
15588: CALL 41224 0 5
// veh := CreateVehicle ;
15592: LD_ADDR_VAR 0 3
15596: PUSH
15597: CALL_OW 45
15601: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15614: LD_VAR 0 3
15618: PPUSH
15619: LD_INT 25
15621: PPUSH
15622: LD_INT 0
15624: PPUSH
15625: CALL_OW 49
// defenders := defenders ^ veh ;
15629: LD_ADDR_EXP 21
15633: PUSH
15634: LD_EXP 21
15638: PUSH
15639: LD_VAR 0 3
15643: ADD
15644: ST_TO_ADDR
// end ;
15645: GO 15570
15647: POP
15648: POP
// end ; end ;
15649: PPOPN 3
15651: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15652: LD_VAR 0 2
15656: PUSH
15657: LD_EXP 17
15661: EQUAL
15662: IFFALSE 15673
// RemoveUnit ( Powell ) ;
15664: LD_EXP 17
15668: PPUSH
15669: CALL_OW 64
// end ;
15673: PPOPN 2
15675: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL 31594 0 1
// end ; end_of_file end_of_file
15685: PPOPN 1
15687: END
// export globalGameSaveCounter ; every 0 0$1 do
15688: GO 15690
15690: DISABLE
// begin enable ;
15691: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15692: LD_STRING updateTimer(
15694: PUSH
15695: LD_OWVAR 1
15699: STR
15700: PUSH
15701: LD_STRING );
15703: STR
15704: PPUSH
15705: CALL_OW 559
// end ;
15709: END
// every 0 0$1 do
15710: GO 15712
15712: DISABLE
// begin globalGameSaveCounter := 0 ;
15713: LD_ADDR_EXP 40
15717: PUSH
15718: LD_INT 0
15720: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15721: LD_STRING setGameSaveCounter(0)
15723: PPUSH
15724: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15728: LD_STRING initStreamRollete();
15730: PPUSH
15731: CALL_OW 559
// InitStreamMode ;
15735: CALL 17061 0 0
// DefineStreamItems ( false ) ;
15739: LD_INT 0
15741: PPUSH
15742: CALL 17525 0 1
// end ;
15746: END
// export function SOS_MapStart ( ) ; begin
15747: LD_INT 0
15749: PPUSH
// if streamModeActive then
15750: LD_EXP 41
15754: IFFALSE 15763
// DefineStreamItems ( true ) ;
15756: LD_INT 1
15758: PPUSH
15759: CALL 17525 0 1
// UpdateLuaVariables ( ) ;
15763: CALL 15780 0 0
// UpdateFactoryWaypoints ( ) ;
15767: CALL 30394 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15771: CALL 30651 0 0
// end ;
15775: LD_VAR 0 1
15779: RET
// function UpdateLuaVariables ( ) ; begin
15780: LD_INT 0
15782: PPUSH
// if globalGameSaveCounter then
15783: LD_EXP 40
15787: IFFALSE 15821
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15789: LD_ADDR_EXP 40
15793: PUSH
15794: LD_EXP 40
15798: PPUSH
15799: CALL 75436 0 1
15803: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15804: LD_STRING setGameSaveCounter(
15806: PUSH
15807: LD_EXP 40
15811: STR
15812: PUSH
15813: LD_STRING )
15815: STR
15816: PPUSH
15817: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15821: LD_STRING setGameDifficulty(
15823: PUSH
15824: LD_OWVAR 67
15828: STR
15829: PUSH
15830: LD_STRING )
15832: STR
15833: PPUSH
15834: CALL_OW 559
// end ;
15838: LD_VAR 0 1
15842: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15843: LD_INT 0
15845: PPUSH
// if p2 = stream_mode then
15846: LD_VAR 0 2
15850: PUSH
15851: LD_INT 100
15853: EQUAL
15854: IFFALSE 16857
// begin if not StreamModeActive then
15856: LD_EXP 41
15860: NOT
15861: IFFALSE 15871
// StreamModeActive := true ;
15863: LD_ADDR_EXP 41
15867: PUSH
15868: LD_INT 1
15870: ST_TO_ADDR
// if p3 = 0 then
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 0
15878: EQUAL
15879: IFFALSE 15885
// InitStreamMode ;
15881: CALL 17061 0 0
// if p3 = 1 then
15885: LD_VAR 0 3
15889: PUSH
15890: LD_INT 1
15892: EQUAL
15893: IFFALSE 15903
// sRocket := true ;
15895: LD_ADDR_EXP 46
15899: PUSH
15900: LD_INT 1
15902: ST_TO_ADDR
// if p3 = 2 then
15903: LD_VAR 0 3
15907: PUSH
15908: LD_INT 2
15910: EQUAL
15911: IFFALSE 15921
// sSpeed := true ;
15913: LD_ADDR_EXP 45
15917: PUSH
15918: LD_INT 1
15920: ST_TO_ADDR
// if p3 = 3 then
15921: LD_VAR 0 3
15925: PUSH
15926: LD_INT 3
15928: EQUAL
15929: IFFALSE 15939
// sEngine := true ;
15931: LD_ADDR_EXP 47
15935: PUSH
15936: LD_INT 1
15938: ST_TO_ADDR
// if p3 = 4 then
15939: LD_VAR 0 3
15943: PUSH
15944: LD_INT 4
15946: EQUAL
15947: IFFALSE 15957
// sSpec := true ;
15949: LD_ADDR_EXP 44
15953: PUSH
15954: LD_INT 1
15956: ST_TO_ADDR
// if p3 = 5 then
15957: LD_VAR 0 3
15961: PUSH
15962: LD_INT 5
15964: EQUAL
15965: IFFALSE 15975
// sLevel := true ;
15967: LD_ADDR_EXP 48
15971: PUSH
15972: LD_INT 1
15974: ST_TO_ADDR
// if p3 = 6 then
15975: LD_VAR 0 3
15979: PUSH
15980: LD_INT 6
15982: EQUAL
15983: IFFALSE 15993
// sArmoury := true ;
15985: LD_ADDR_EXP 49
15989: PUSH
15990: LD_INT 1
15992: ST_TO_ADDR
// if p3 = 7 then
15993: LD_VAR 0 3
15997: PUSH
15998: LD_INT 7
16000: EQUAL
16001: IFFALSE 16011
// sRadar := true ;
16003: LD_ADDR_EXP 50
16007: PUSH
16008: LD_INT 1
16010: ST_TO_ADDR
// if p3 = 8 then
16011: LD_VAR 0 3
16015: PUSH
16016: LD_INT 8
16018: EQUAL
16019: IFFALSE 16029
// sBunker := true ;
16021: LD_ADDR_EXP 51
16025: PUSH
16026: LD_INT 1
16028: ST_TO_ADDR
// if p3 = 9 then
16029: LD_VAR 0 3
16033: PUSH
16034: LD_INT 9
16036: EQUAL
16037: IFFALSE 16047
// sHack := true ;
16039: LD_ADDR_EXP 52
16043: PUSH
16044: LD_INT 1
16046: ST_TO_ADDR
// if p3 = 10 then
16047: LD_VAR 0 3
16051: PUSH
16052: LD_INT 10
16054: EQUAL
16055: IFFALSE 16065
// sFire := true ;
16057: LD_ADDR_EXP 53
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// if p3 = 11 then
16065: LD_VAR 0 3
16069: PUSH
16070: LD_INT 11
16072: EQUAL
16073: IFFALSE 16083
// sRefresh := true ;
16075: LD_ADDR_EXP 54
16079: PUSH
16080: LD_INT 1
16082: ST_TO_ADDR
// if p3 = 12 then
16083: LD_VAR 0 3
16087: PUSH
16088: LD_INT 12
16090: EQUAL
16091: IFFALSE 16101
// sExp := true ;
16093: LD_ADDR_EXP 55
16097: PUSH
16098: LD_INT 1
16100: ST_TO_ADDR
// if p3 = 13 then
16101: LD_VAR 0 3
16105: PUSH
16106: LD_INT 13
16108: EQUAL
16109: IFFALSE 16119
// sDepot := true ;
16111: LD_ADDR_EXP 56
16115: PUSH
16116: LD_INT 1
16118: ST_TO_ADDR
// if p3 = 14 then
16119: LD_VAR 0 3
16123: PUSH
16124: LD_INT 14
16126: EQUAL
16127: IFFALSE 16137
// sFlag := true ;
16129: LD_ADDR_EXP 57
16133: PUSH
16134: LD_INT 1
16136: ST_TO_ADDR
// if p3 = 15 then
16137: LD_VAR 0 3
16141: PUSH
16142: LD_INT 15
16144: EQUAL
16145: IFFALSE 16155
// sKamikadze := true ;
16147: LD_ADDR_EXP 65
16151: PUSH
16152: LD_INT 1
16154: ST_TO_ADDR
// if p3 = 16 then
16155: LD_VAR 0 3
16159: PUSH
16160: LD_INT 16
16162: EQUAL
16163: IFFALSE 16173
// sTroll := true ;
16165: LD_ADDR_EXP 66
16169: PUSH
16170: LD_INT 1
16172: ST_TO_ADDR
// if p3 = 17 then
16173: LD_VAR 0 3
16177: PUSH
16178: LD_INT 17
16180: EQUAL
16181: IFFALSE 16191
// sSlow := true ;
16183: LD_ADDR_EXP 67
16187: PUSH
16188: LD_INT 1
16190: ST_TO_ADDR
// if p3 = 18 then
16191: LD_VAR 0 3
16195: PUSH
16196: LD_INT 18
16198: EQUAL
16199: IFFALSE 16209
// sLack := true ;
16201: LD_ADDR_EXP 68
16205: PUSH
16206: LD_INT 1
16208: ST_TO_ADDR
// if p3 = 19 then
16209: LD_VAR 0 3
16213: PUSH
16214: LD_INT 19
16216: EQUAL
16217: IFFALSE 16227
// sTank := true ;
16219: LD_ADDR_EXP 70
16223: PUSH
16224: LD_INT 1
16226: ST_TO_ADDR
// if p3 = 20 then
16227: LD_VAR 0 3
16231: PUSH
16232: LD_INT 20
16234: EQUAL
16235: IFFALSE 16245
// sRemote := true ;
16237: LD_ADDR_EXP 71
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// if p3 = 21 then
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 21
16252: EQUAL
16253: IFFALSE 16263
// sPowell := true ;
16255: LD_ADDR_EXP 72
16259: PUSH
16260: LD_INT 1
16262: ST_TO_ADDR
// if p3 = 22 then
16263: LD_VAR 0 3
16267: PUSH
16268: LD_INT 22
16270: EQUAL
16271: IFFALSE 16281
// sTeleport := true ;
16273: LD_ADDR_EXP 75
16277: PUSH
16278: LD_INT 1
16280: ST_TO_ADDR
// if p3 = 23 then
16281: LD_VAR 0 3
16285: PUSH
16286: LD_INT 23
16288: EQUAL
16289: IFFALSE 16299
// sOilTower := true ;
16291: LD_ADDR_EXP 77
16295: PUSH
16296: LD_INT 1
16298: ST_TO_ADDR
// if p3 = 24 then
16299: LD_VAR 0 3
16303: PUSH
16304: LD_INT 24
16306: EQUAL
16307: IFFALSE 16317
// sShovel := true ;
16309: LD_ADDR_EXP 78
16313: PUSH
16314: LD_INT 1
16316: ST_TO_ADDR
// if p3 = 25 then
16317: LD_VAR 0 3
16321: PUSH
16322: LD_INT 25
16324: EQUAL
16325: IFFALSE 16335
// sSheik := true ;
16327: LD_ADDR_EXP 79
16331: PUSH
16332: LD_INT 1
16334: ST_TO_ADDR
// if p3 = 26 then
16335: LD_VAR 0 3
16339: PUSH
16340: LD_INT 26
16342: EQUAL
16343: IFFALSE 16353
// sEarthquake := true ;
16345: LD_ADDR_EXP 81
16349: PUSH
16350: LD_INT 1
16352: ST_TO_ADDR
// if p3 = 27 then
16353: LD_VAR 0 3
16357: PUSH
16358: LD_INT 27
16360: EQUAL
16361: IFFALSE 16371
// sAI := true ;
16363: LD_ADDR_EXP 82
16367: PUSH
16368: LD_INT 1
16370: ST_TO_ADDR
// if p3 = 28 then
16371: LD_VAR 0 3
16375: PUSH
16376: LD_INT 28
16378: EQUAL
16379: IFFALSE 16389
// sCargo := true ;
16381: LD_ADDR_EXP 85
16385: PUSH
16386: LD_INT 1
16388: ST_TO_ADDR
// if p3 = 29 then
16389: LD_VAR 0 3
16393: PUSH
16394: LD_INT 29
16396: EQUAL
16397: IFFALSE 16407
// sDLaser := true ;
16399: LD_ADDR_EXP 86
16403: PUSH
16404: LD_INT 1
16406: ST_TO_ADDR
// if p3 = 30 then
16407: LD_VAR 0 3
16411: PUSH
16412: LD_INT 30
16414: EQUAL
16415: IFFALSE 16425
// sExchange := true ;
16417: LD_ADDR_EXP 87
16421: PUSH
16422: LD_INT 1
16424: ST_TO_ADDR
// if p3 = 31 then
16425: LD_VAR 0 3
16429: PUSH
16430: LD_INT 31
16432: EQUAL
16433: IFFALSE 16443
// sFac := true ;
16435: LD_ADDR_EXP 88
16439: PUSH
16440: LD_INT 1
16442: ST_TO_ADDR
// if p3 = 32 then
16443: LD_VAR 0 3
16447: PUSH
16448: LD_INT 32
16450: EQUAL
16451: IFFALSE 16461
// sPower := true ;
16453: LD_ADDR_EXP 89
16457: PUSH
16458: LD_INT 1
16460: ST_TO_ADDR
// if p3 = 33 then
16461: LD_VAR 0 3
16465: PUSH
16466: LD_INT 33
16468: EQUAL
16469: IFFALSE 16479
// sRandom := true ;
16471: LD_ADDR_EXP 90
16475: PUSH
16476: LD_INT 1
16478: ST_TO_ADDR
// if p3 = 34 then
16479: LD_VAR 0 3
16483: PUSH
16484: LD_INT 34
16486: EQUAL
16487: IFFALSE 16497
// sShield := true ;
16489: LD_ADDR_EXP 91
16493: PUSH
16494: LD_INT 1
16496: ST_TO_ADDR
// if p3 = 35 then
16497: LD_VAR 0 3
16501: PUSH
16502: LD_INT 35
16504: EQUAL
16505: IFFALSE 16515
// sTime := true ;
16507: LD_ADDR_EXP 92
16511: PUSH
16512: LD_INT 1
16514: ST_TO_ADDR
// if p3 = 36 then
16515: LD_VAR 0 3
16519: PUSH
16520: LD_INT 36
16522: EQUAL
16523: IFFALSE 16533
// sTools := true ;
16525: LD_ADDR_EXP 93
16529: PUSH
16530: LD_INT 1
16532: ST_TO_ADDR
// if p3 = 101 then
16533: LD_VAR 0 3
16537: PUSH
16538: LD_INT 101
16540: EQUAL
16541: IFFALSE 16551
// sSold := true ;
16543: LD_ADDR_EXP 58
16547: PUSH
16548: LD_INT 1
16550: ST_TO_ADDR
// if p3 = 102 then
16551: LD_VAR 0 3
16555: PUSH
16556: LD_INT 102
16558: EQUAL
16559: IFFALSE 16569
// sDiff := true ;
16561: LD_ADDR_EXP 59
16565: PUSH
16566: LD_INT 1
16568: ST_TO_ADDR
// if p3 = 103 then
16569: LD_VAR 0 3
16573: PUSH
16574: LD_INT 103
16576: EQUAL
16577: IFFALSE 16587
// sFog := true ;
16579: LD_ADDR_EXP 62
16583: PUSH
16584: LD_INT 1
16586: ST_TO_ADDR
// if p3 = 104 then
16587: LD_VAR 0 3
16591: PUSH
16592: LD_INT 104
16594: EQUAL
16595: IFFALSE 16605
// sReset := true ;
16597: LD_ADDR_EXP 63
16601: PUSH
16602: LD_INT 1
16604: ST_TO_ADDR
// if p3 = 105 then
16605: LD_VAR 0 3
16609: PUSH
16610: LD_INT 105
16612: EQUAL
16613: IFFALSE 16623
// sSun := true ;
16615: LD_ADDR_EXP 64
16619: PUSH
16620: LD_INT 1
16622: ST_TO_ADDR
// if p3 = 106 then
16623: LD_VAR 0 3
16627: PUSH
16628: LD_INT 106
16630: EQUAL
16631: IFFALSE 16641
// sTiger := true ;
16633: LD_ADDR_EXP 60
16637: PUSH
16638: LD_INT 1
16640: ST_TO_ADDR
// if p3 = 107 then
16641: LD_VAR 0 3
16645: PUSH
16646: LD_INT 107
16648: EQUAL
16649: IFFALSE 16659
// sBomb := true ;
16651: LD_ADDR_EXP 61
16655: PUSH
16656: LD_INT 1
16658: ST_TO_ADDR
// if p3 = 108 then
16659: LD_VAR 0 3
16663: PUSH
16664: LD_INT 108
16666: EQUAL
16667: IFFALSE 16677
// sWound := true ;
16669: LD_ADDR_EXP 69
16673: PUSH
16674: LD_INT 1
16676: ST_TO_ADDR
// if p3 = 109 then
16677: LD_VAR 0 3
16681: PUSH
16682: LD_INT 109
16684: EQUAL
16685: IFFALSE 16695
// sBetray := true ;
16687: LD_ADDR_EXP 73
16691: PUSH
16692: LD_INT 1
16694: ST_TO_ADDR
// if p3 = 110 then
16695: LD_VAR 0 3
16699: PUSH
16700: LD_INT 110
16702: EQUAL
16703: IFFALSE 16713
// sContamin := true ;
16705: LD_ADDR_EXP 74
16709: PUSH
16710: LD_INT 1
16712: ST_TO_ADDR
// if p3 = 111 then
16713: LD_VAR 0 3
16717: PUSH
16718: LD_INT 111
16720: EQUAL
16721: IFFALSE 16731
// sOil := true ;
16723: LD_ADDR_EXP 76
16727: PUSH
16728: LD_INT 1
16730: ST_TO_ADDR
// if p3 = 112 then
16731: LD_VAR 0 3
16735: PUSH
16736: LD_INT 112
16738: EQUAL
16739: IFFALSE 16749
// sStu := true ;
16741: LD_ADDR_EXP 80
16745: PUSH
16746: LD_INT 1
16748: ST_TO_ADDR
// if p3 = 113 then
16749: LD_VAR 0 3
16753: PUSH
16754: LD_INT 113
16756: EQUAL
16757: IFFALSE 16767
// sBazooka := true ;
16759: LD_ADDR_EXP 83
16763: PUSH
16764: LD_INT 1
16766: ST_TO_ADDR
// if p3 = 114 then
16767: LD_VAR 0 3
16771: PUSH
16772: LD_INT 114
16774: EQUAL
16775: IFFALSE 16785
// sMortar := true ;
16777: LD_ADDR_EXP 84
16781: PUSH
16782: LD_INT 1
16784: ST_TO_ADDR
// if p3 = 115 then
16785: LD_VAR 0 3
16789: PUSH
16790: LD_INT 115
16792: EQUAL
16793: IFFALSE 16803
// sRanger := true ;
16795: LD_ADDR_EXP 94
16799: PUSH
16800: LD_INT 1
16802: ST_TO_ADDR
// if p3 = 116 then
16803: LD_VAR 0 3
16807: PUSH
16808: LD_INT 116
16810: EQUAL
16811: IFFALSE 16821
// sComputer := true ;
16813: LD_ADDR_EXP 95
16817: PUSH
16818: LD_INT 1
16820: ST_TO_ADDR
// if p3 = 117 then
16821: LD_VAR 0 3
16825: PUSH
16826: LD_INT 117
16828: EQUAL
16829: IFFALSE 16839
// s30 := true ;
16831: LD_ADDR_EXP 96
16835: PUSH
16836: LD_INT 1
16838: ST_TO_ADDR
// if p3 = 118 then
16839: LD_VAR 0 3
16843: PUSH
16844: LD_INT 118
16846: EQUAL
16847: IFFALSE 16857
// s60 := true ;
16849: LD_ADDR_EXP 97
16853: PUSH
16854: LD_INT 1
16856: ST_TO_ADDR
// end ; if p2 = hack_mode then
16857: LD_VAR 0 2
16861: PUSH
16862: LD_INT 101
16864: EQUAL
16865: IFFALSE 16993
// begin case p3 of 1 :
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 1
16874: DOUBLE
16875: EQUAL
16876: IFTRUE 16880
16878: GO 16887
16880: POP
// hHackUnlimitedResources ; 2 :
16881: CALL 29140 0 0
16885: GO 16993
16887: LD_INT 2
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16902
16895: POP
// hHackSetLevel10 ; 3 :
16896: CALL 29273 0 0
16900: GO 16993
16902: LD_INT 3
16904: DOUBLE
16905: EQUAL
16906: IFTRUE 16910
16908: GO 16917
16910: POP
// hHackSetLevel10YourUnits ; 4 :
16911: CALL 29358 0 0
16915: GO 16993
16917: LD_INT 4
16919: DOUBLE
16920: EQUAL
16921: IFTRUE 16925
16923: GO 16932
16925: POP
// hHackInvincible ; 5 :
16926: CALL 29806 0 0
16930: GO 16993
16932: LD_INT 5
16934: DOUBLE
16935: EQUAL
16936: IFTRUE 16940
16938: GO 16947
16940: POP
// hHackInvisible ; 6 :
16941: CALL 29917 0 0
16945: GO 16993
16947: LD_INT 6
16949: DOUBLE
16950: EQUAL
16951: IFTRUE 16955
16953: GO 16962
16955: POP
// hHackChangeYourSide ; 7 :
16956: CALL 29974 0 0
16960: GO 16993
16962: LD_INT 7
16964: DOUBLE
16965: EQUAL
16966: IFTRUE 16970
16968: GO 16977
16970: POP
// hHackChangeUnitSide ; 8 :
16971: CALL 30016 0 0
16975: GO 16993
16977: LD_INT 8
16979: DOUBLE
16980: EQUAL
16981: IFTRUE 16985
16983: GO 16992
16985: POP
// hHackFog ; end ;
16986: CALL 30117 0 0
16990: GO 16993
16992: POP
// end ; if p2 = game_save_mode then
16993: LD_VAR 0 2
16997: PUSH
16998: LD_INT 102
17000: EQUAL
17001: IFFALSE 17056
// begin if p3 = 1 then
17003: LD_VAR 0 3
17007: PUSH
17008: LD_INT 1
17010: EQUAL
17011: IFFALSE 17023
// globalGameSaveCounter := p4 ;
17013: LD_ADDR_EXP 40
17017: PUSH
17018: LD_VAR 0 4
17022: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17023: LD_VAR 0 3
17027: PUSH
17028: LD_INT 2
17030: EQUAL
17031: PUSH
17032: LD_EXP 40
17036: AND
17037: IFFALSE 17056
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17039: LD_STRING setGameSaveCounter(
17041: PUSH
17042: LD_EXP 40
17046: STR
17047: PUSH
17048: LD_STRING )
17050: STR
17051: PPUSH
17052: CALL_OW 559
// end ; end ;
17056: LD_VAR 0 7
17060: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17061: LD_INT 0
17063: PPUSH
// streamModeActive := false ;
17064: LD_ADDR_EXP 41
17068: PUSH
17069: LD_INT 0
17071: ST_TO_ADDR
// normalCounter := 36 ;
17072: LD_ADDR_EXP 42
17076: PUSH
17077: LD_INT 36
17079: ST_TO_ADDR
// hardcoreCounter := 18 ;
17080: LD_ADDR_EXP 43
17084: PUSH
17085: LD_INT 18
17087: ST_TO_ADDR
// sRocket := false ;
17088: LD_ADDR_EXP 46
17092: PUSH
17093: LD_INT 0
17095: ST_TO_ADDR
// sSpeed := false ;
17096: LD_ADDR_EXP 45
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// sEngine := false ;
17104: LD_ADDR_EXP 47
17108: PUSH
17109: LD_INT 0
17111: ST_TO_ADDR
// sSpec := false ;
17112: LD_ADDR_EXP 44
17116: PUSH
17117: LD_INT 0
17119: ST_TO_ADDR
// sLevel := false ;
17120: LD_ADDR_EXP 48
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// sArmoury := false ;
17128: LD_ADDR_EXP 49
17132: PUSH
17133: LD_INT 0
17135: ST_TO_ADDR
// sRadar := false ;
17136: LD_ADDR_EXP 50
17140: PUSH
17141: LD_INT 0
17143: ST_TO_ADDR
// sBunker := false ;
17144: LD_ADDR_EXP 51
17148: PUSH
17149: LD_INT 0
17151: ST_TO_ADDR
// sHack := false ;
17152: LD_ADDR_EXP 52
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// sFire := false ;
17160: LD_ADDR_EXP 53
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// sRefresh := false ;
17168: LD_ADDR_EXP 54
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// sExp := false ;
17176: LD_ADDR_EXP 55
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// sDepot := false ;
17184: LD_ADDR_EXP 56
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// sFlag := false ;
17192: LD_ADDR_EXP 57
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// sKamikadze := false ;
17200: LD_ADDR_EXP 65
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// sTroll := false ;
17208: LD_ADDR_EXP 66
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// sSlow := false ;
17216: LD_ADDR_EXP 67
17220: PUSH
17221: LD_INT 0
17223: ST_TO_ADDR
// sLack := false ;
17224: LD_ADDR_EXP 68
17228: PUSH
17229: LD_INT 0
17231: ST_TO_ADDR
// sTank := false ;
17232: LD_ADDR_EXP 70
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// sRemote := false ;
17240: LD_ADDR_EXP 71
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// sPowell := false ;
17248: LD_ADDR_EXP 72
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// sTeleport := false ;
17256: LD_ADDR_EXP 75
17260: PUSH
17261: LD_INT 0
17263: ST_TO_ADDR
// sOilTower := false ;
17264: LD_ADDR_EXP 77
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// sShovel := false ;
17272: LD_ADDR_EXP 78
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// sSheik := false ;
17280: LD_ADDR_EXP 79
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// sEarthquake := false ;
17288: LD_ADDR_EXP 81
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// sAI := false ;
17296: LD_ADDR_EXP 82
17300: PUSH
17301: LD_INT 0
17303: ST_TO_ADDR
// sCargo := false ;
17304: LD_ADDR_EXP 85
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// sDLaser := false ;
17312: LD_ADDR_EXP 86
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// sExchange := false ;
17320: LD_ADDR_EXP 87
17324: PUSH
17325: LD_INT 0
17327: ST_TO_ADDR
// sFac := false ;
17328: LD_ADDR_EXP 88
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// sPower := false ;
17336: LD_ADDR_EXP 89
17340: PUSH
17341: LD_INT 0
17343: ST_TO_ADDR
// sRandom := false ;
17344: LD_ADDR_EXP 90
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// sShield := false ;
17352: LD_ADDR_EXP 91
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
// sTime := false ;
17360: LD_ADDR_EXP 92
17364: PUSH
17365: LD_INT 0
17367: ST_TO_ADDR
// sTools := false ;
17368: LD_ADDR_EXP 93
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// sSold := false ;
17376: LD_ADDR_EXP 58
17380: PUSH
17381: LD_INT 0
17383: ST_TO_ADDR
// sDiff := false ;
17384: LD_ADDR_EXP 59
17388: PUSH
17389: LD_INT 0
17391: ST_TO_ADDR
// sFog := false ;
17392: LD_ADDR_EXP 62
17396: PUSH
17397: LD_INT 0
17399: ST_TO_ADDR
// sReset := false ;
17400: LD_ADDR_EXP 63
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// sSun := false ;
17408: LD_ADDR_EXP 64
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// sTiger := false ;
17416: LD_ADDR_EXP 60
17420: PUSH
17421: LD_INT 0
17423: ST_TO_ADDR
// sBomb := false ;
17424: LD_ADDR_EXP 61
17428: PUSH
17429: LD_INT 0
17431: ST_TO_ADDR
// sWound := false ;
17432: LD_ADDR_EXP 69
17436: PUSH
17437: LD_INT 0
17439: ST_TO_ADDR
// sBetray := false ;
17440: LD_ADDR_EXP 73
17444: PUSH
17445: LD_INT 0
17447: ST_TO_ADDR
// sContamin := false ;
17448: LD_ADDR_EXP 74
17452: PUSH
17453: LD_INT 0
17455: ST_TO_ADDR
// sOil := false ;
17456: LD_ADDR_EXP 76
17460: PUSH
17461: LD_INT 0
17463: ST_TO_ADDR
// sStu := false ;
17464: LD_ADDR_EXP 80
17468: PUSH
17469: LD_INT 0
17471: ST_TO_ADDR
// sBazooka := false ;
17472: LD_ADDR_EXP 83
17476: PUSH
17477: LD_INT 0
17479: ST_TO_ADDR
// sMortar := false ;
17480: LD_ADDR_EXP 84
17484: PUSH
17485: LD_INT 0
17487: ST_TO_ADDR
// sRanger := false ;
17488: LD_ADDR_EXP 94
17492: PUSH
17493: LD_INT 0
17495: ST_TO_ADDR
// sComputer := false ;
17496: LD_ADDR_EXP 95
17500: PUSH
17501: LD_INT 0
17503: ST_TO_ADDR
// s30 := false ;
17504: LD_ADDR_EXP 96
17508: PUSH
17509: LD_INT 0
17511: ST_TO_ADDR
// s60 := false ;
17512: LD_ADDR_EXP 97
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// end ;
17520: LD_VAR 0 1
17524: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17525: LD_INT 0
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
// result := [ ] ;
17534: LD_ADDR_VAR 0 2
17538: PUSH
17539: EMPTY
17540: ST_TO_ADDR
// if campaign_id = 1 then
17541: LD_OWVAR 69
17545: PUSH
17546: LD_INT 1
17548: EQUAL
17549: IFFALSE 20715
// begin case mission_number of 1 :
17551: LD_OWVAR 70
17555: PUSH
17556: LD_INT 1
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17640
17564: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17565: LD_ADDR_VAR 0 2
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 4
17575: PUSH
17576: LD_INT 11
17578: PUSH
17579: LD_INT 12
17581: PUSH
17582: LD_INT 15
17584: PUSH
17585: LD_INT 16
17587: PUSH
17588: LD_INT 22
17590: PUSH
17591: LD_INT 23
17593: PUSH
17594: LD_INT 26
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 101
17610: PUSH
17611: LD_INT 102
17613: PUSH
17614: LD_INT 106
17616: PUSH
17617: LD_INT 116
17619: PUSH
17620: LD_INT 117
17622: PUSH
17623: LD_INT 118
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: ST_TO_ADDR
17638: GO 20713
17640: LD_INT 2
17642: DOUBLE
17643: EQUAL
17644: IFTRUE 17648
17646: GO 17732
17648: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17649: LD_ADDR_VAR 0 2
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: LD_INT 4
17659: PUSH
17660: LD_INT 11
17662: PUSH
17663: LD_INT 12
17665: PUSH
17666: LD_INT 15
17668: PUSH
17669: LD_INT 16
17671: PUSH
17672: LD_INT 22
17674: PUSH
17675: LD_INT 23
17677: PUSH
17678: LD_INT 26
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 101
17694: PUSH
17695: LD_INT 102
17697: PUSH
17698: LD_INT 105
17700: PUSH
17701: LD_INT 106
17703: PUSH
17704: LD_INT 108
17706: PUSH
17707: LD_INT 116
17709: PUSH
17710: LD_INT 117
17712: PUSH
17713: LD_INT 118
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: ST_TO_ADDR
17730: GO 20713
17732: LD_INT 3
17734: DOUBLE
17735: EQUAL
17736: IFTRUE 17740
17738: GO 17828
17740: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 4
17751: PUSH
17752: LD_INT 5
17754: PUSH
17755: LD_INT 11
17757: PUSH
17758: LD_INT 12
17760: PUSH
17761: LD_INT 15
17763: PUSH
17764: LD_INT 16
17766: PUSH
17767: LD_INT 22
17769: PUSH
17770: LD_INT 26
17772: PUSH
17773: LD_INT 36
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 101
17790: PUSH
17791: LD_INT 102
17793: PUSH
17794: LD_INT 105
17796: PUSH
17797: LD_INT 106
17799: PUSH
17800: LD_INT 108
17802: PUSH
17803: LD_INT 116
17805: PUSH
17806: LD_INT 117
17808: PUSH
17809: LD_INT 118
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: ST_TO_ADDR
17826: GO 20713
17828: LD_INT 4
17830: DOUBLE
17831: EQUAL
17832: IFTRUE 17836
17834: GO 17932
17836: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17837: LD_ADDR_VAR 0 2
17841: PUSH
17842: LD_INT 2
17844: PUSH
17845: LD_INT 4
17847: PUSH
17848: LD_INT 5
17850: PUSH
17851: LD_INT 8
17853: PUSH
17854: LD_INT 11
17856: PUSH
17857: LD_INT 12
17859: PUSH
17860: LD_INT 15
17862: PUSH
17863: LD_INT 16
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_INT 23
17871: PUSH
17872: LD_INT 26
17874: PUSH
17875: LD_INT 36
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 101
17894: PUSH
17895: LD_INT 102
17897: PUSH
17898: LD_INT 105
17900: PUSH
17901: LD_INT 106
17903: PUSH
17904: LD_INT 108
17906: PUSH
17907: LD_INT 116
17909: PUSH
17910: LD_INT 117
17912: PUSH
17913: LD_INT 118
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: ST_TO_ADDR
17930: GO 20713
17932: LD_INT 5
17934: DOUBLE
17935: EQUAL
17936: IFTRUE 17940
17938: GO 18052
17940: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17941: LD_ADDR_VAR 0 2
17945: PUSH
17946: LD_INT 2
17948: PUSH
17949: LD_INT 4
17951: PUSH
17952: LD_INT 5
17954: PUSH
17955: LD_INT 6
17957: PUSH
17958: LD_INT 8
17960: PUSH
17961: LD_INT 11
17963: PUSH
17964: LD_INT 12
17966: PUSH
17967: LD_INT 15
17969: PUSH
17970: LD_INT 16
17972: PUSH
17973: LD_INT 22
17975: PUSH
17976: LD_INT 23
17978: PUSH
17979: LD_INT 25
17981: PUSH
17982: LD_INT 26
17984: PUSH
17985: LD_INT 36
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 101
18006: PUSH
18007: LD_INT 102
18009: PUSH
18010: LD_INT 105
18012: PUSH
18013: LD_INT 106
18015: PUSH
18016: LD_INT 108
18018: PUSH
18019: LD_INT 109
18021: PUSH
18022: LD_INT 112
18024: PUSH
18025: LD_INT 116
18027: PUSH
18028: LD_INT 117
18030: PUSH
18031: LD_INT 118
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: ST_TO_ADDR
18050: GO 20713
18052: LD_INT 6
18054: DOUBLE
18055: EQUAL
18056: IFTRUE 18060
18058: GO 18192
18060: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18061: LD_ADDR_VAR 0 2
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: LD_INT 4
18071: PUSH
18072: LD_INT 5
18074: PUSH
18075: LD_INT 6
18077: PUSH
18078: LD_INT 8
18080: PUSH
18081: LD_INT 11
18083: PUSH
18084: LD_INT 12
18086: PUSH
18087: LD_INT 15
18089: PUSH
18090: LD_INT 16
18092: PUSH
18093: LD_INT 20
18095: PUSH
18096: LD_INT 21
18098: PUSH
18099: LD_INT 22
18101: PUSH
18102: LD_INT 23
18104: PUSH
18105: LD_INT 25
18107: PUSH
18108: LD_INT 26
18110: PUSH
18111: LD_INT 30
18113: PUSH
18114: LD_INT 31
18116: PUSH
18117: LD_INT 32
18119: PUSH
18120: LD_INT 36
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 101
18146: PUSH
18147: LD_INT 102
18149: PUSH
18150: LD_INT 105
18152: PUSH
18153: LD_INT 106
18155: PUSH
18156: LD_INT 108
18158: PUSH
18159: LD_INT 109
18161: PUSH
18162: LD_INT 112
18164: PUSH
18165: LD_INT 116
18167: PUSH
18168: LD_INT 117
18170: PUSH
18171: LD_INT 118
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: ST_TO_ADDR
18190: GO 20713
18192: LD_INT 7
18194: DOUBLE
18195: EQUAL
18196: IFTRUE 18200
18198: GO 18312
18200: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18201: LD_ADDR_VAR 0 2
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: LD_INT 4
18211: PUSH
18212: LD_INT 5
18214: PUSH
18215: LD_INT 7
18217: PUSH
18218: LD_INT 11
18220: PUSH
18221: LD_INT 12
18223: PUSH
18224: LD_INT 15
18226: PUSH
18227: LD_INT 16
18229: PUSH
18230: LD_INT 20
18232: PUSH
18233: LD_INT 21
18235: PUSH
18236: LD_INT 22
18238: PUSH
18239: LD_INT 23
18241: PUSH
18242: LD_INT 25
18244: PUSH
18245: LD_INT 26
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 101
18266: PUSH
18267: LD_INT 102
18269: PUSH
18270: LD_INT 103
18272: PUSH
18273: LD_INT 105
18275: PUSH
18276: LD_INT 106
18278: PUSH
18279: LD_INT 108
18281: PUSH
18282: LD_INT 112
18284: PUSH
18285: LD_INT 116
18287: PUSH
18288: LD_INT 117
18290: PUSH
18291: LD_INT 118
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: ST_TO_ADDR
18310: GO 20713
18312: LD_INT 8
18314: DOUBLE
18315: EQUAL
18316: IFTRUE 18320
18318: GO 18460
18320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18321: LD_ADDR_VAR 0 2
18325: PUSH
18326: LD_INT 2
18328: PUSH
18329: LD_INT 4
18331: PUSH
18332: LD_INT 5
18334: PUSH
18335: LD_INT 6
18337: PUSH
18338: LD_INT 7
18340: PUSH
18341: LD_INT 8
18343: PUSH
18344: LD_INT 11
18346: PUSH
18347: LD_INT 12
18349: PUSH
18350: LD_INT 15
18352: PUSH
18353: LD_INT 16
18355: PUSH
18356: LD_INT 20
18358: PUSH
18359: LD_INT 21
18361: PUSH
18362: LD_INT 22
18364: PUSH
18365: LD_INT 23
18367: PUSH
18368: LD_INT 25
18370: PUSH
18371: LD_INT 26
18373: PUSH
18374: LD_INT 30
18376: PUSH
18377: LD_INT 31
18379: PUSH
18380: LD_INT 32
18382: PUSH
18383: LD_INT 36
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 101
18410: PUSH
18411: LD_INT 102
18413: PUSH
18414: LD_INT 103
18416: PUSH
18417: LD_INT 105
18419: PUSH
18420: LD_INT 106
18422: PUSH
18423: LD_INT 108
18425: PUSH
18426: LD_INT 109
18428: PUSH
18429: LD_INT 112
18431: PUSH
18432: LD_INT 116
18434: PUSH
18435: LD_INT 117
18437: PUSH
18438: LD_INT 118
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: ST_TO_ADDR
18458: GO 20713
18460: LD_INT 9
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 18616
18468: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18469: LD_ADDR_VAR 0 2
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: LD_INT 4
18479: PUSH
18480: LD_INT 5
18482: PUSH
18483: LD_INT 6
18485: PUSH
18486: LD_INT 7
18488: PUSH
18489: LD_INT 8
18491: PUSH
18492: LD_INT 11
18494: PUSH
18495: LD_INT 12
18497: PUSH
18498: LD_INT 15
18500: PUSH
18501: LD_INT 16
18503: PUSH
18504: LD_INT 20
18506: PUSH
18507: LD_INT 21
18509: PUSH
18510: LD_INT 22
18512: PUSH
18513: LD_INT 23
18515: PUSH
18516: LD_INT 25
18518: PUSH
18519: LD_INT 26
18521: PUSH
18522: LD_INT 28
18524: PUSH
18525: LD_INT 30
18527: PUSH
18528: LD_INT 31
18530: PUSH
18531: LD_INT 32
18533: PUSH
18534: LD_INT 36
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 101
18562: PUSH
18563: LD_INT 102
18565: PUSH
18566: LD_INT 103
18568: PUSH
18569: LD_INT 105
18571: PUSH
18572: LD_INT 106
18574: PUSH
18575: LD_INT 108
18577: PUSH
18578: LD_INT 109
18580: PUSH
18581: LD_INT 112
18583: PUSH
18584: LD_INT 114
18586: PUSH
18587: LD_INT 116
18589: PUSH
18590: LD_INT 117
18592: PUSH
18593: LD_INT 118
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: ST_TO_ADDR
18614: GO 20713
18616: LD_INT 10
18618: DOUBLE
18619: EQUAL
18620: IFTRUE 18624
18622: GO 18820
18624: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18625: LD_ADDR_VAR 0 2
18629: PUSH
18630: LD_INT 2
18632: PUSH
18633: LD_INT 4
18635: PUSH
18636: LD_INT 5
18638: PUSH
18639: LD_INT 6
18641: PUSH
18642: LD_INT 7
18644: PUSH
18645: LD_INT 8
18647: PUSH
18648: LD_INT 9
18650: PUSH
18651: LD_INT 10
18653: PUSH
18654: LD_INT 11
18656: PUSH
18657: LD_INT 12
18659: PUSH
18660: LD_INT 13
18662: PUSH
18663: LD_INT 14
18665: PUSH
18666: LD_INT 15
18668: PUSH
18669: LD_INT 16
18671: PUSH
18672: LD_INT 17
18674: PUSH
18675: LD_INT 18
18677: PUSH
18678: LD_INT 19
18680: PUSH
18681: LD_INT 20
18683: PUSH
18684: LD_INT 21
18686: PUSH
18687: LD_INT 22
18689: PUSH
18690: LD_INT 23
18692: PUSH
18693: LD_INT 24
18695: PUSH
18696: LD_INT 25
18698: PUSH
18699: LD_INT 26
18701: PUSH
18702: LD_INT 28
18704: PUSH
18705: LD_INT 30
18707: PUSH
18708: LD_INT 31
18710: PUSH
18711: LD_INT 32
18713: PUSH
18714: LD_INT 36
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 101
18750: PUSH
18751: LD_INT 102
18753: PUSH
18754: LD_INT 103
18756: PUSH
18757: LD_INT 104
18759: PUSH
18760: LD_INT 105
18762: PUSH
18763: LD_INT 106
18765: PUSH
18766: LD_INT 107
18768: PUSH
18769: LD_INT 108
18771: PUSH
18772: LD_INT 109
18774: PUSH
18775: LD_INT 110
18777: PUSH
18778: LD_INT 111
18780: PUSH
18781: LD_INT 112
18783: PUSH
18784: LD_INT 114
18786: PUSH
18787: LD_INT 116
18789: PUSH
18790: LD_INT 117
18792: PUSH
18793: LD_INT 118
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: ST_TO_ADDR
18818: GO 20713
18820: LD_INT 11
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 19032
18828: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18829: LD_ADDR_VAR 0 2
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 3
18839: PUSH
18840: LD_INT 4
18842: PUSH
18843: LD_INT 5
18845: PUSH
18846: LD_INT 6
18848: PUSH
18849: LD_INT 7
18851: PUSH
18852: LD_INT 8
18854: PUSH
18855: LD_INT 9
18857: PUSH
18858: LD_INT 10
18860: PUSH
18861: LD_INT 11
18863: PUSH
18864: LD_INT 12
18866: PUSH
18867: LD_INT 13
18869: PUSH
18870: LD_INT 14
18872: PUSH
18873: LD_INT 15
18875: PUSH
18876: LD_INT 16
18878: PUSH
18879: LD_INT 17
18881: PUSH
18882: LD_INT 18
18884: PUSH
18885: LD_INT 19
18887: PUSH
18888: LD_INT 20
18890: PUSH
18891: LD_INT 21
18893: PUSH
18894: LD_INT 22
18896: PUSH
18897: LD_INT 23
18899: PUSH
18900: LD_INT 24
18902: PUSH
18903: LD_INT 25
18905: PUSH
18906: LD_INT 26
18908: PUSH
18909: LD_INT 28
18911: PUSH
18912: LD_INT 30
18914: PUSH
18915: LD_INT 31
18917: PUSH
18918: LD_INT 32
18920: PUSH
18921: LD_INT 34
18923: PUSH
18924: LD_INT 36
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 101
18962: PUSH
18963: LD_INT 102
18965: PUSH
18966: LD_INT 103
18968: PUSH
18969: LD_INT 104
18971: PUSH
18972: LD_INT 105
18974: PUSH
18975: LD_INT 106
18977: PUSH
18978: LD_INT 107
18980: PUSH
18981: LD_INT 108
18983: PUSH
18984: LD_INT 109
18986: PUSH
18987: LD_INT 110
18989: PUSH
18990: LD_INT 111
18992: PUSH
18993: LD_INT 112
18995: PUSH
18996: LD_INT 114
18998: PUSH
18999: LD_INT 116
19001: PUSH
19002: LD_INT 117
19004: PUSH
19005: LD_INT 118
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: ST_TO_ADDR
19030: GO 20713
19032: LD_INT 12
19034: DOUBLE
19035: EQUAL
19036: IFTRUE 19040
19038: GO 19260
19040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19041: LD_ADDR_VAR 0 2
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 4
19057: PUSH
19058: LD_INT 5
19060: PUSH
19061: LD_INT 6
19063: PUSH
19064: LD_INT 7
19066: PUSH
19067: LD_INT 8
19069: PUSH
19070: LD_INT 9
19072: PUSH
19073: LD_INT 10
19075: PUSH
19076: LD_INT 11
19078: PUSH
19079: LD_INT 12
19081: PUSH
19082: LD_INT 13
19084: PUSH
19085: LD_INT 14
19087: PUSH
19088: LD_INT 15
19090: PUSH
19091: LD_INT 16
19093: PUSH
19094: LD_INT 17
19096: PUSH
19097: LD_INT 18
19099: PUSH
19100: LD_INT 19
19102: PUSH
19103: LD_INT 20
19105: PUSH
19106: LD_INT 21
19108: PUSH
19109: LD_INT 22
19111: PUSH
19112: LD_INT 23
19114: PUSH
19115: LD_INT 24
19117: PUSH
19118: LD_INT 25
19120: PUSH
19121: LD_INT 26
19123: PUSH
19124: LD_INT 27
19126: PUSH
19127: LD_INT 28
19129: PUSH
19130: LD_INT 30
19132: PUSH
19133: LD_INT 31
19135: PUSH
19136: LD_INT 32
19138: PUSH
19139: LD_INT 33
19141: PUSH
19142: LD_INT 34
19144: PUSH
19145: LD_INT 36
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 101
19186: PUSH
19187: LD_INT 102
19189: PUSH
19190: LD_INT 103
19192: PUSH
19193: LD_INT 104
19195: PUSH
19196: LD_INT 105
19198: PUSH
19199: LD_INT 106
19201: PUSH
19202: LD_INT 107
19204: PUSH
19205: LD_INT 108
19207: PUSH
19208: LD_INT 109
19210: PUSH
19211: LD_INT 110
19213: PUSH
19214: LD_INT 111
19216: PUSH
19217: LD_INT 112
19219: PUSH
19220: LD_INT 113
19222: PUSH
19223: LD_INT 114
19225: PUSH
19226: LD_INT 116
19228: PUSH
19229: LD_INT 117
19231: PUSH
19232: LD_INT 118
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: ST_TO_ADDR
19258: GO 20713
19260: LD_INT 13
19262: DOUBLE
19263: EQUAL
19264: IFTRUE 19268
19266: GO 19476
19268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19269: LD_ADDR_VAR 0 2
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 3
19282: PUSH
19283: LD_INT 4
19285: PUSH
19286: LD_INT 5
19288: PUSH
19289: LD_INT 8
19291: PUSH
19292: LD_INT 9
19294: PUSH
19295: LD_INT 10
19297: PUSH
19298: LD_INT 11
19300: PUSH
19301: LD_INT 12
19303: PUSH
19304: LD_INT 14
19306: PUSH
19307: LD_INT 15
19309: PUSH
19310: LD_INT 16
19312: PUSH
19313: LD_INT 17
19315: PUSH
19316: LD_INT 18
19318: PUSH
19319: LD_INT 19
19321: PUSH
19322: LD_INT 20
19324: PUSH
19325: LD_INT 21
19327: PUSH
19328: LD_INT 22
19330: PUSH
19331: LD_INT 23
19333: PUSH
19334: LD_INT 24
19336: PUSH
19337: LD_INT 25
19339: PUSH
19340: LD_INT 26
19342: PUSH
19343: LD_INT 27
19345: PUSH
19346: LD_INT 28
19348: PUSH
19349: LD_INT 30
19351: PUSH
19352: LD_INT 31
19354: PUSH
19355: LD_INT 32
19357: PUSH
19358: LD_INT 33
19360: PUSH
19361: LD_INT 34
19363: PUSH
19364: LD_INT 36
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 101
19402: PUSH
19403: LD_INT 102
19405: PUSH
19406: LD_INT 103
19408: PUSH
19409: LD_INT 104
19411: PUSH
19412: LD_INT 105
19414: PUSH
19415: LD_INT 106
19417: PUSH
19418: LD_INT 107
19420: PUSH
19421: LD_INT 108
19423: PUSH
19424: LD_INT 109
19426: PUSH
19427: LD_INT 110
19429: PUSH
19430: LD_INT 111
19432: PUSH
19433: LD_INT 112
19435: PUSH
19436: LD_INT 113
19438: PUSH
19439: LD_INT 114
19441: PUSH
19442: LD_INT 116
19444: PUSH
19445: LD_INT 117
19447: PUSH
19448: LD_INT 118
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: ST_TO_ADDR
19474: GO 20713
19476: LD_INT 14
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19708
19484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19485: LD_ADDR_VAR 0 2
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 3
19498: PUSH
19499: LD_INT 4
19501: PUSH
19502: LD_INT 5
19504: PUSH
19505: LD_INT 6
19507: PUSH
19508: LD_INT 7
19510: PUSH
19511: LD_INT 8
19513: PUSH
19514: LD_INT 9
19516: PUSH
19517: LD_INT 10
19519: PUSH
19520: LD_INT 11
19522: PUSH
19523: LD_INT 12
19525: PUSH
19526: LD_INT 13
19528: PUSH
19529: LD_INT 14
19531: PUSH
19532: LD_INT 15
19534: PUSH
19535: LD_INT 16
19537: PUSH
19538: LD_INT 17
19540: PUSH
19541: LD_INT 18
19543: PUSH
19544: LD_INT 19
19546: PUSH
19547: LD_INT 20
19549: PUSH
19550: LD_INT 21
19552: PUSH
19553: LD_INT 22
19555: PUSH
19556: LD_INT 23
19558: PUSH
19559: LD_INT 24
19561: PUSH
19562: LD_INT 25
19564: PUSH
19565: LD_INT 26
19567: PUSH
19568: LD_INT 27
19570: PUSH
19571: LD_INT 28
19573: PUSH
19574: LD_INT 29
19576: PUSH
19577: LD_INT 30
19579: PUSH
19580: LD_INT 31
19582: PUSH
19583: LD_INT 32
19585: PUSH
19586: LD_INT 33
19588: PUSH
19589: LD_INT 34
19591: PUSH
19592: LD_INT 36
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 101
19634: PUSH
19635: LD_INT 102
19637: PUSH
19638: LD_INT 103
19640: PUSH
19641: LD_INT 104
19643: PUSH
19644: LD_INT 105
19646: PUSH
19647: LD_INT 106
19649: PUSH
19650: LD_INT 107
19652: PUSH
19653: LD_INT 108
19655: PUSH
19656: LD_INT 109
19658: PUSH
19659: LD_INT 110
19661: PUSH
19662: LD_INT 111
19664: PUSH
19665: LD_INT 112
19667: PUSH
19668: LD_INT 113
19670: PUSH
19671: LD_INT 114
19673: PUSH
19674: LD_INT 116
19676: PUSH
19677: LD_INT 117
19679: PUSH
19680: LD_INT 118
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: ST_TO_ADDR
19706: GO 20713
19708: LD_INT 15
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19940
19716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19717: LD_ADDR_VAR 0 2
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: LD_INT 4
19733: PUSH
19734: LD_INT 5
19736: PUSH
19737: LD_INT 6
19739: PUSH
19740: LD_INT 7
19742: PUSH
19743: LD_INT 8
19745: PUSH
19746: LD_INT 9
19748: PUSH
19749: LD_INT 10
19751: PUSH
19752: LD_INT 11
19754: PUSH
19755: LD_INT 12
19757: PUSH
19758: LD_INT 13
19760: PUSH
19761: LD_INT 14
19763: PUSH
19764: LD_INT 15
19766: PUSH
19767: LD_INT 16
19769: PUSH
19770: LD_INT 17
19772: PUSH
19773: LD_INT 18
19775: PUSH
19776: LD_INT 19
19778: PUSH
19779: LD_INT 20
19781: PUSH
19782: LD_INT 21
19784: PUSH
19785: LD_INT 22
19787: PUSH
19788: LD_INT 23
19790: PUSH
19791: LD_INT 24
19793: PUSH
19794: LD_INT 25
19796: PUSH
19797: LD_INT 26
19799: PUSH
19800: LD_INT 27
19802: PUSH
19803: LD_INT 28
19805: PUSH
19806: LD_INT 29
19808: PUSH
19809: LD_INT 30
19811: PUSH
19812: LD_INT 31
19814: PUSH
19815: LD_INT 32
19817: PUSH
19818: LD_INT 33
19820: PUSH
19821: LD_INT 34
19823: PUSH
19824: LD_INT 36
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 101
19866: PUSH
19867: LD_INT 102
19869: PUSH
19870: LD_INT 103
19872: PUSH
19873: LD_INT 104
19875: PUSH
19876: LD_INT 105
19878: PUSH
19879: LD_INT 106
19881: PUSH
19882: LD_INT 107
19884: PUSH
19885: LD_INT 108
19887: PUSH
19888: LD_INT 109
19890: PUSH
19891: LD_INT 110
19893: PUSH
19894: LD_INT 111
19896: PUSH
19897: LD_INT 112
19899: PUSH
19900: LD_INT 113
19902: PUSH
19903: LD_INT 114
19905: PUSH
19906: LD_INT 116
19908: PUSH
19909: LD_INT 117
19911: PUSH
19912: LD_INT 118
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: ST_TO_ADDR
19938: GO 20713
19940: LD_INT 16
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 20084
19948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19949: LD_ADDR_VAR 0 2
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: LD_INT 4
19959: PUSH
19960: LD_INT 5
19962: PUSH
19963: LD_INT 7
19965: PUSH
19966: LD_INT 11
19968: PUSH
19969: LD_INT 12
19971: PUSH
19972: LD_INT 15
19974: PUSH
19975: LD_INT 16
19977: PUSH
19978: LD_INT 20
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 22
19986: PUSH
19987: LD_INT 23
19989: PUSH
19990: LD_INT 25
19992: PUSH
19993: LD_INT 26
19995: PUSH
19996: LD_INT 30
19998: PUSH
19999: LD_INT 31
20001: PUSH
20002: LD_INT 32
20004: PUSH
20005: LD_INT 33
20007: PUSH
20008: LD_INT 34
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 101
20034: PUSH
20035: LD_INT 102
20037: PUSH
20038: LD_INT 103
20040: PUSH
20041: LD_INT 106
20043: PUSH
20044: LD_INT 108
20046: PUSH
20047: LD_INT 112
20049: PUSH
20050: LD_INT 113
20052: PUSH
20053: LD_INT 114
20055: PUSH
20056: LD_INT 116
20058: PUSH
20059: LD_INT 117
20061: PUSH
20062: LD_INT 118
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: ST_TO_ADDR
20082: GO 20713
20084: LD_INT 17
20086: DOUBLE
20087: EQUAL
20088: IFTRUE 20092
20090: GO 20316
20092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20093: LD_ADDR_VAR 0 2
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: LD_INT 3
20106: PUSH
20107: LD_INT 4
20109: PUSH
20110: LD_INT 5
20112: PUSH
20113: LD_INT 6
20115: PUSH
20116: LD_INT 7
20118: PUSH
20119: LD_INT 8
20121: PUSH
20122: LD_INT 9
20124: PUSH
20125: LD_INT 10
20127: PUSH
20128: LD_INT 11
20130: PUSH
20131: LD_INT 12
20133: PUSH
20134: LD_INT 13
20136: PUSH
20137: LD_INT 14
20139: PUSH
20140: LD_INT 15
20142: PUSH
20143: LD_INT 16
20145: PUSH
20146: LD_INT 17
20148: PUSH
20149: LD_INT 18
20151: PUSH
20152: LD_INT 19
20154: PUSH
20155: LD_INT 20
20157: PUSH
20158: LD_INT 21
20160: PUSH
20161: LD_INT 22
20163: PUSH
20164: LD_INT 23
20166: PUSH
20167: LD_INT 24
20169: PUSH
20170: LD_INT 25
20172: PUSH
20173: LD_INT 26
20175: PUSH
20176: LD_INT 27
20178: PUSH
20179: LD_INT 28
20181: PUSH
20182: LD_INT 29
20184: PUSH
20185: LD_INT 30
20187: PUSH
20188: LD_INT 31
20190: PUSH
20191: LD_INT 32
20193: PUSH
20194: LD_INT 33
20196: PUSH
20197: LD_INT 34
20199: PUSH
20200: LD_INT 36
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 101
20242: PUSH
20243: LD_INT 102
20245: PUSH
20246: LD_INT 103
20248: PUSH
20249: LD_INT 104
20251: PUSH
20252: LD_INT 105
20254: PUSH
20255: LD_INT 106
20257: PUSH
20258: LD_INT 107
20260: PUSH
20261: LD_INT 108
20263: PUSH
20264: LD_INT 109
20266: PUSH
20267: LD_INT 110
20269: PUSH
20270: LD_INT 111
20272: PUSH
20273: LD_INT 112
20275: PUSH
20276: LD_INT 113
20278: PUSH
20279: LD_INT 114
20281: PUSH
20282: LD_INT 116
20284: PUSH
20285: LD_INT 117
20287: PUSH
20288: LD_INT 118
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: ST_TO_ADDR
20314: GO 20713
20316: LD_INT 18
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20472
20324: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20325: LD_ADDR_VAR 0 2
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: LD_INT 4
20335: PUSH
20336: LD_INT 5
20338: PUSH
20339: LD_INT 7
20341: PUSH
20342: LD_INT 11
20344: PUSH
20345: LD_INT 12
20347: PUSH
20348: LD_INT 15
20350: PUSH
20351: LD_INT 16
20353: PUSH
20354: LD_INT 20
20356: PUSH
20357: LD_INT 21
20359: PUSH
20360: LD_INT 22
20362: PUSH
20363: LD_INT 23
20365: PUSH
20366: LD_INT 25
20368: PUSH
20369: LD_INT 26
20371: PUSH
20372: LD_INT 30
20374: PUSH
20375: LD_INT 31
20377: PUSH
20378: LD_INT 32
20380: PUSH
20381: LD_INT 33
20383: PUSH
20384: LD_INT 34
20386: PUSH
20387: LD_INT 35
20389: PUSH
20390: LD_INT 36
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 101
20418: PUSH
20419: LD_INT 102
20421: PUSH
20422: LD_INT 103
20424: PUSH
20425: LD_INT 106
20427: PUSH
20428: LD_INT 108
20430: PUSH
20431: LD_INT 112
20433: PUSH
20434: LD_INT 113
20436: PUSH
20437: LD_INT 114
20439: PUSH
20440: LD_INT 115
20442: PUSH
20443: LD_INT 116
20445: PUSH
20446: LD_INT 117
20448: PUSH
20449: LD_INT 118
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: ST_TO_ADDR
20470: GO 20713
20472: LD_INT 19
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20712
20480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: LD_INT 4
20497: PUSH
20498: LD_INT 5
20500: PUSH
20501: LD_INT 6
20503: PUSH
20504: LD_INT 7
20506: PUSH
20507: LD_INT 8
20509: PUSH
20510: LD_INT 9
20512: PUSH
20513: LD_INT 10
20515: PUSH
20516: LD_INT 11
20518: PUSH
20519: LD_INT 12
20521: PUSH
20522: LD_INT 13
20524: PUSH
20525: LD_INT 14
20527: PUSH
20528: LD_INT 15
20530: PUSH
20531: LD_INT 16
20533: PUSH
20534: LD_INT 17
20536: PUSH
20537: LD_INT 18
20539: PUSH
20540: LD_INT 19
20542: PUSH
20543: LD_INT 20
20545: PUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 24
20557: PUSH
20558: LD_INT 25
20560: PUSH
20561: LD_INT 26
20563: PUSH
20564: LD_INT 27
20566: PUSH
20567: LD_INT 28
20569: PUSH
20570: LD_INT 29
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 31
20578: PUSH
20579: LD_INT 32
20581: PUSH
20582: LD_INT 33
20584: PUSH
20585: LD_INT 34
20587: PUSH
20588: LD_INT 35
20590: PUSH
20591: LD_INT 36
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 101
20634: PUSH
20635: LD_INT 102
20637: PUSH
20638: LD_INT 103
20640: PUSH
20641: LD_INT 104
20643: PUSH
20644: LD_INT 105
20646: PUSH
20647: LD_INT 106
20649: PUSH
20650: LD_INT 107
20652: PUSH
20653: LD_INT 108
20655: PUSH
20656: LD_INT 109
20658: PUSH
20659: LD_INT 110
20661: PUSH
20662: LD_INT 111
20664: PUSH
20665: LD_INT 112
20667: PUSH
20668: LD_INT 113
20670: PUSH
20671: LD_INT 114
20673: PUSH
20674: LD_INT 115
20676: PUSH
20677: LD_INT 116
20679: PUSH
20680: LD_INT 117
20682: PUSH
20683: LD_INT 118
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: ST_TO_ADDR
20710: GO 20713
20712: POP
// end else
20713: GO 20944
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20715: LD_ADDR_VAR 0 2
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 2
20725: PUSH
20726: LD_INT 3
20728: PUSH
20729: LD_INT 4
20731: PUSH
20732: LD_INT 5
20734: PUSH
20735: LD_INT 6
20737: PUSH
20738: LD_INT 7
20740: PUSH
20741: LD_INT 8
20743: PUSH
20744: LD_INT 9
20746: PUSH
20747: LD_INT 10
20749: PUSH
20750: LD_INT 11
20752: PUSH
20753: LD_INT 12
20755: PUSH
20756: LD_INT 13
20758: PUSH
20759: LD_INT 14
20761: PUSH
20762: LD_INT 15
20764: PUSH
20765: LD_INT 16
20767: PUSH
20768: LD_INT 17
20770: PUSH
20771: LD_INT 18
20773: PUSH
20774: LD_INT 19
20776: PUSH
20777: LD_INT 20
20779: PUSH
20780: LD_INT 21
20782: PUSH
20783: LD_INT 22
20785: PUSH
20786: LD_INT 23
20788: PUSH
20789: LD_INT 24
20791: PUSH
20792: LD_INT 25
20794: PUSH
20795: LD_INT 26
20797: PUSH
20798: LD_INT 27
20800: PUSH
20801: LD_INT 28
20803: PUSH
20804: LD_INT 29
20806: PUSH
20807: LD_INT 30
20809: PUSH
20810: LD_INT 31
20812: PUSH
20813: LD_INT 32
20815: PUSH
20816: LD_INT 33
20818: PUSH
20819: LD_INT 34
20821: PUSH
20822: LD_INT 35
20824: PUSH
20825: LD_INT 36
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 101
20868: PUSH
20869: LD_INT 102
20871: PUSH
20872: LD_INT 103
20874: PUSH
20875: LD_INT 104
20877: PUSH
20878: LD_INT 105
20880: PUSH
20881: LD_INT 106
20883: PUSH
20884: LD_INT 107
20886: PUSH
20887: LD_INT 108
20889: PUSH
20890: LD_INT 109
20892: PUSH
20893: LD_INT 110
20895: PUSH
20896: LD_INT 111
20898: PUSH
20899: LD_INT 112
20901: PUSH
20902: LD_INT 113
20904: PUSH
20905: LD_INT 114
20907: PUSH
20908: LD_INT 115
20910: PUSH
20911: LD_INT 116
20913: PUSH
20914: LD_INT 117
20916: PUSH
20917: LD_INT 118
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: ST_TO_ADDR
// if result then
20944: LD_VAR 0 2
20948: IFFALSE 21734
// begin normal :=  ;
20950: LD_ADDR_VAR 0 5
20954: PUSH
20955: LD_STRING 
20957: ST_TO_ADDR
// hardcore :=  ;
20958: LD_ADDR_VAR 0 6
20962: PUSH
20963: LD_STRING 
20965: ST_TO_ADDR
// active :=  ;
20966: LD_ADDR_VAR 0 7
20970: PUSH
20971: LD_STRING 
20973: ST_TO_ADDR
// for i = 1 to normalCounter do
20974: LD_ADDR_VAR 0 8
20978: PUSH
20979: DOUBLE
20980: LD_INT 1
20982: DEC
20983: ST_TO_ADDR
20984: LD_EXP 42
20988: PUSH
20989: FOR_TO
20990: IFFALSE 21091
// begin tmp := 0 ;
20992: LD_ADDR_VAR 0 3
20996: PUSH
20997: LD_STRING 0
20999: ST_TO_ADDR
// if result [ 1 ] then
21000: LD_VAR 0 2
21004: PUSH
21005: LD_INT 1
21007: ARRAY
21008: IFFALSE 21073
// if result [ 1 ] [ 1 ] = i then
21010: LD_VAR 0 2
21014: PUSH
21015: LD_INT 1
21017: ARRAY
21018: PUSH
21019: LD_INT 1
21021: ARRAY
21022: PUSH
21023: LD_VAR 0 8
21027: EQUAL
21028: IFFALSE 21073
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21030: LD_ADDR_VAR 0 2
21034: PUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: LD_INT 1
21042: PPUSH
21043: LD_VAR 0 2
21047: PUSH
21048: LD_INT 1
21050: ARRAY
21051: PPUSH
21052: LD_INT 1
21054: PPUSH
21055: CALL_OW 3
21059: PPUSH
21060: CALL_OW 1
21064: ST_TO_ADDR
// tmp := 1 ;
21065: LD_ADDR_VAR 0 3
21069: PUSH
21070: LD_STRING 1
21072: ST_TO_ADDR
// end ; normal := normal & tmp ;
21073: LD_ADDR_VAR 0 5
21077: PUSH
21078: LD_VAR 0 5
21082: PUSH
21083: LD_VAR 0 3
21087: STR
21088: ST_TO_ADDR
// end ;
21089: GO 20989
21091: POP
21092: POP
// for i = 1 to hardcoreCounter do
21093: LD_ADDR_VAR 0 8
21097: PUSH
21098: DOUBLE
21099: LD_INT 1
21101: DEC
21102: ST_TO_ADDR
21103: LD_EXP 43
21107: PUSH
21108: FOR_TO
21109: IFFALSE 21214
// begin tmp := 0 ;
21111: LD_ADDR_VAR 0 3
21115: PUSH
21116: LD_STRING 0
21118: ST_TO_ADDR
// if result [ 2 ] then
21119: LD_VAR 0 2
21123: PUSH
21124: LD_INT 2
21126: ARRAY
21127: IFFALSE 21196
// if result [ 2 ] [ 1 ] = 100 + i then
21129: LD_VAR 0 2
21133: PUSH
21134: LD_INT 2
21136: ARRAY
21137: PUSH
21138: LD_INT 1
21140: ARRAY
21141: PUSH
21142: LD_INT 100
21144: PUSH
21145: LD_VAR 0 8
21149: PLUS
21150: EQUAL
21151: IFFALSE 21196
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_VAR 0 2
21162: PPUSH
21163: LD_INT 2
21165: PPUSH
21166: LD_VAR 0 2
21170: PUSH
21171: LD_INT 2
21173: ARRAY
21174: PPUSH
21175: LD_INT 1
21177: PPUSH
21178: CALL_OW 3
21182: PPUSH
21183: CALL_OW 1
21187: ST_TO_ADDR
// tmp := 1 ;
21188: LD_ADDR_VAR 0 3
21192: PUSH
21193: LD_STRING 1
21195: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21196: LD_ADDR_VAR 0 6
21200: PUSH
21201: LD_VAR 0 6
21205: PUSH
21206: LD_VAR 0 3
21210: STR
21211: ST_TO_ADDR
// end ;
21212: GO 21108
21214: POP
21215: POP
// if isGameLoad then
21216: LD_VAR 0 1
21220: IFFALSE 21695
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21222: LD_ADDR_VAR 0 4
21226: PUSH
21227: LD_EXP 46
21231: PUSH
21232: LD_EXP 45
21236: PUSH
21237: LD_EXP 47
21241: PUSH
21242: LD_EXP 44
21246: PUSH
21247: LD_EXP 48
21251: PUSH
21252: LD_EXP 49
21256: PUSH
21257: LD_EXP 50
21261: PUSH
21262: LD_EXP 51
21266: PUSH
21267: LD_EXP 52
21271: PUSH
21272: LD_EXP 53
21276: PUSH
21277: LD_EXP 54
21281: PUSH
21282: LD_EXP 55
21286: PUSH
21287: LD_EXP 56
21291: PUSH
21292: LD_EXP 57
21296: PUSH
21297: LD_EXP 65
21301: PUSH
21302: LD_EXP 66
21306: PUSH
21307: LD_EXP 67
21311: PUSH
21312: LD_EXP 68
21316: PUSH
21317: LD_EXP 70
21321: PUSH
21322: LD_EXP 71
21326: PUSH
21327: LD_EXP 72
21331: PUSH
21332: LD_EXP 75
21336: PUSH
21337: LD_EXP 77
21341: PUSH
21342: LD_EXP 78
21346: PUSH
21347: LD_EXP 79
21351: PUSH
21352: LD_EXP 81
21356: PUSH
21357: LD_EXP 82
21361: PUSH
21362: LD_EXP 85
21366: PUSH
21367: LD_EXP 86
21371: PUSH
21372: LD_EXP 87
21376: PUSH
21377: LD_EXP 88
21381: PUSH
21382: LD_EXP 89
21386: PUSH
21387: LD_EXP 90
21391: PUSH
21392: LD_EXP 91
21396: PUSH
21397: LD_EXP 92
21401: PUSH
21402: LD_EXP 93
21406: PUSH
21407: LD_EXP 58
21411: PUSH
21412: LD_EXP 59
21416: PUSH
21417: LD_EXP 62
21421: PUSH
21422: LD_EXP 63
21426: PUSH
21427: LD_EXP 64
21431: PUSH
21432: LD_EXP 60
21436: PUSH
21437: LD_EXP 61
21441: PUSH
21442: LD_EXP 69
21446: PUSH
21447: LD_EXP 73
21451: PUSH
21452: LD_EXP 74
21456: PUSH
21457: LD_EXP 76
21461: PUSH
21462: LD_EXP 80
21466: PUSH
21467: LD_EXP 83
21471: PUSH
21472: LD_EXP 84
21476: PUSH
21477: LD_EXP 94
21481: PUSH
21482: LD_EXP 95
21486: PUSH
21487: LD_EXP 96
21491: PUSH
21492: LD_EXP 97
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: ST_TO_ADDR
// tmp :=  ;
21553: LD_ADDR_VAR 0 3
21557: PUSH
21558: LD_STRING 
21560: ST_TO_ADDR
// for i = 1 to normalCounter do
21561: LD_ADDR_VAR 0 8
21565: PUSH
21566: DOUBLE
21567: LD_INT 1
21569: DEC
21570: ST_TO_ADDR
21571: LD_EXP 42
21575: PUSH
21576: FOR_TO
21577: IFFALSE 21613
// begin if flags [ i ] then
21579: LD_VAR 0 4
21583: PUSH
21584: LD_VAR 0 8
21588: ARRAY
21589: IFFALSE 21611
// tmp := tmp & i & ; ;
21591: LD_ADDR_VAR 0 3
21595: PUSH
21596: LD_VAR 0 3
21600: PUSH
21601: LD_VAR 0 8
21605: STR
21606: PUSH
21607: LD_STRING ;
21609: STR
21610: ST_TO_ADDR
// end ;
21611: GO 21576
21613: POP
21614: POP
// for i = 1 to hardcoreCounter do
21615: LD_ADDR_VAR 0 8
21619: PUSH
21620: DOUBLE
21621: LD_INT 1
21623: DEC
21624: ST_TO_ADDR
21625: LD_EXP 43
21629: PUSH
21630: FOR_TO
21631: IFFALSE 21677
// begin if flags [ normalCounter + i ] then
21633: LD_VAR 0 4
21637: PUSH
21638: LD_EXP 42
21642: PUSH
21643: LD_VAR 0 8
21647: PLUS
21648: ARRAY
21649: IFFALSE 21675
// tmp := tmp & ( 100 + i ) & ; ;
21651: LD_ADDR_VAR 0 3
21655: PUSH
21656: LD_VAR 0 3
21660: PUSH
21661: LD_INT 100
21663: PUSH
21664: LD_VAR 0 8
21668: PLUS
21669: STR
21670: PUSH
21671: LD_STRING ;
21673: STR
21674: ST_TO_ADDR
// end ;
21675: GO 21630
21677: POP
21678: POP
// if tmp then
21679: LD_VAR 0 3
21683: IFFALSE 21695
// active := tmp ;
21685: LD_ADDR_VAR 0 7
21689: PUSH
21690: LD_VAR 0 3
21694: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21695: LD_STRING getStreamItemsFromMission("
21697: PUSH
21698: LD_VAR 0 5
21702: STR
21703: PUSH
21704: LD_STRING ","
21706: STR
21707: PUSH
21708: LD_VAR 0 6
21712: STR
21713: PUSH
21714: LD_STRING ","
21716: STR
21717: PUSH
21718: LD_VAR 0 7
21722: STR
21723: PUSH
21724: LD_STRING ")
21726: STR
21727: PPUSH
21728: CALL_OW 559
// end else
21732: GO 21741
// ToLua ( getStreamItemsFromMission("","","") ) ;
21734: LD_STRING getStreamItemsFromMission("","","")
21736: PPUSH
21737: CALL_OW 559
// end ;
21741: LD_VAR 0 2
21745: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21746: LD_EXP 41
21750: PUSH
21751: LD_EXP 46
21755: AND
21756: IFFALSE 21880
21758: GO 21760
21760: DISABLE
21761: LD_INT 0
21763: PPUSH
21764: PPUSH
// begin enable ;
21765: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 22
21773: PUSH
21774: LD_OWVAR 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 34
21788: PUSH
21789: LD_INT 7
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 34
21798: PUSH
21799: LD_INT 45
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 34
21808: PUSH
21809: LD_INT 28
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 34
21818: PUSH
21819: LD_INT 47
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PPUSH
21837: CALL_OW 69
21841: ST_TO_ADDR
// if not tmp then
21842: LD_VAR 0 2
21846: NOT
21847: IFFALSE 21851
// exit ;
21849: GO 21880
// for i in tmp do
21851: LD_ADDR_VAR 0 1
21855: PUSH
21856: LD_VAR 0 2
21860: PUSH
21861: FOR_IN
21862: IFFALSE 21878
// begin SetLives ( i , 0 ) ;
21864: LD_VAR 0 1
21868: PPUSH
21869: LD_INT 0
21871: PPUSH
21872: CALL_OW 234
// end ;
21876: GO 21861
21878: POP
21879: POP
// end ;
21880: PPOPN 2
21882: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21883: LD_EXP 41
21887: PUSH
21888: LD_EXP 47
21892: AND
21893: IFFALSE 21977
21895: GO 21897
21897: DISABLE
21898: LD_INT 0
21900: PPUSH
21901: PPUSH
// begin enable ;
21902: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21903: LD_ADDR_VAR 0 2
21907: PUSH
21908: LD_INT 22
21910: PUSH
21911: LD_OWVAR 2
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 32
21922: PUSH
21923: LD_INT 3
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PPUSH
21934: CALL_OW 69
21938: ST_TO_ADDR
// if not tmp then
21939: LD_VAR 0 2
21943: NOT
21944: IFFALSE 21948
// exit ;
21946: GO 21977
// for i in tmp do
21948: LD_ADDR_VAR 0 1
21952: PUSH
21953: LD_VAR 0 2
21957: PUSH
21958: FOR_IN
21959: IFFALSE 21975
// begin SetLives ( i , 0 ) ;
21961: LD_VAR 0 1
21965: PPUSH
21966: LD_INT 0
21968: PPUSH
21969: CALL_OW 234
// end ;
21973: GO 21958
21975: POP
21976: POP
// end ;
21977: PPOPN 2
21979: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21980: LD_EXP 41
21984: PUSH
21985: LD_EXP 44
21989: AND
21990: IFFALSE 22083
21992: GO 21994
21994: DISABLE
21995: LD_INT 0
21997: PPUSH
// begin enable ;
21998: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21999: LD_ADDR_VAR 0 1
22003: PUSH
22004: LD_INT 22
22006: PUSH
22007: LD_OWVAR 2
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 25
22021: PUSH
22022: LD_INT 5
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 25
22031: PUSH
22032: LD_INT 9
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 25
22041: PUSH
22042: LD_INT 8
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PPUSH
22059: CALL_OW 69
22063: PUSH
22064: FOR_IN
22065: IFFALSE 22081
// begin SetClass ( i , 1 ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 1
22074: PPUSH
22075: CALL_OW 336
// end ;
22079: GO 22064
22081: POP
22082: POP
// end ;
22083: PPOPN 1
22085: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22086: LD_EXP 41
22090: PUSH
22091: LD_EXP 45
22095: AND
22096: PUSH
22097: LD_OWVAR 65
22101: PUSH
22102: LD_INT 7
22104: LESS
22105: AND
22106: IFFALSE 22120
22108: GO 22110
22110: DISABLE
// begin enable ;
22111: ENABLE
// game_speed := 7 ;
22112: LD_ADDR_OWVAR 65
22116: PUSH
22117: LD_INT 7
22119: ST_TO_ADDR
// end ;
22120: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22121: LD_EXP 41
22125: PUSH
22126: LD_EXP 48
22130: AND
22131: IFFALSE 22333
22133: GO 22135
22135: DISABLE
22136: LD_INT 0
22138: PPUSH
22139: PPUSH
22140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22141: LD_ADDR_VAR 0 3
22145: PUSH
22146: LD_INT 81
22148: PUSH
22149: LD_OWVAR 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 21
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PPUSH
22172: CALL_OW 69
22176: ST_TO_ADDR
// if not tmp then
22177: LD_VAR 0 3
22181: NOT
22182: IFFALSE 22186
// exit ;
22184: GO 22333
// if tmp > 5 then
22186: LD_VAR 0 3
22190: PUSH
22191: LD_INT 5
22193: GREATER
22194: IFFALSE 22206
// k := 5 else
22196: LD_ADDR_VAR 0 2
22200: PUSH
22201: LD_INT 5
22203: ST_TO_ADDR
22204: GO 22216
// k := tmp ;
22206: LD_ADDR_VAR 0 2
22210: PUSH
22211: LD_VAR 0 3
22215: ST_TO_ADDR
// for i := 1 to k do
22216: LD_ADDR_VAR 0 1
22220: PUSH
22221: DOUBLE
22222: LD_INT 1
22224: DEC
22225: ST_TO_ADDR
22226: LD_VAR 0 2
22230: PUSH
22231: FOR_TO
22232: IFFALSE 22331
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22234: LD_VAR 0 3
22238: PUSH
22239: LD_VAR 0 1
22243: ARRAY
22244: PPUSH
22245: LD_VAR 0 1
22249: PUSH
22250: LD_INT 4
22252: MOD
22253: PUSH
22254: LD_INT 1
22256: PLUS
22257: PPUSH
22258: CALL_OW 259
22262: PUSH
22263: LD_INT 10
22265: LESS
22266: IFFALSE 22329
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22268: LD_VAR 0 3
22272: PUSH
22273: LD_VAR 0 1
22277: ARRAY
22278: PPUSH
22279: LD_VAR 0 1
22283: PUSH
22284: LD_INT 4
22286: MOD
22287: PUSH
22288: LD_INT 1
22290: PLUS
22291: PPUSH
22292: LD_VAR 0 3
22296: PUSH
22297: LD_VAR 0 1
22301: ARRAY
22302: PPUSH
22303: LD_VAR 0 1
22307: PUSH
22308: LD_INT 4
22310: MOD
22311: PUSH
22312: LD_INT 1
22314: PLUS
22315: PPUSH
22316: CALL_OW 259
22320: PUSH
22321: LD_INT 1
22323: PLUS
22324: PPUSH
22325: CALL_OW 237
22329: GO 22231
22331: POP
22332: POP
// end ;
22333: PPOPN 3
22335: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22336: LD_EXP 41
22340: PUSH
22341: LD_EXP 49
22345: AND
22346: IFFALSE 22366
22348: GO 22350
22350: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22351: LD_INT 4
22353: PPUSH
22354: LD_OWVAR 2
22358: PPUSH
22359: LD_INT 0
22361: PPUSH
22362: CALL_OW 324
22366: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22367: LD_EXP 41
22371: PUSH
22372: LD_EXP 78
22376: AND
22377: IFFALSE 22397
22379: GO 22381
22381: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22382: LD_INT 19
22384: PPUSH
22385: LD_OWVAR 2
22389: PPUSH
22390: LD_INT 0
22392: PPUSH
22393: CALL_OW 324
22397: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22398: LD_EXP 41
22402: PUSH
22403: LD_EXP 50
22407: AND
22408: IFFALSE 22510
22410: GO 22412
22412: DISABLE
22413: LD_INT 0
22415: PPUSH
22416: PPUSH
// begin enable ;
22417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22418: LD_ADDR_VAR 0 2
22422: PUSH
22423: LD_INT 22
22425: PUSH
22426: LD_OWVAR 2
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 34
22440: PUSH
22441: LD_INT 11
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 34
22450: PUSH
22451: LD_INT 30
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PPUSH
22467: CALL_OW 69
22471: ST_TO_ADDR
// if not tmp then
22472: LD_VAR 0 2
22476: NOT
22477: IFFALSE 22481
// exit ;
22479: GO 22510
// for i in tmp do
22481: LD_ADDR_VAR 0 1
22485: PUSH
22486: LD_VAR 0 2
22490: PUSH
22491: FOR_IN
22492: IFFALSE 22508
// begin SetLives ( i , 0 ) ;
22494: LD_VAR 0 1
22498: PPUSH
22499: LD_INT 0
22501: PPUSH
22502: CALL_OW 234
// end ;
22506: GO 22491
22508: POP
22509: POP
// end ;
22510: PPOPN 2
22512: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22513: LD_EXP 41
22517: PUSH
22518: LD_EXP 51
22522: AND
22523: IFFALSE 22543
22525: GO 22527
22527: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22528: LD_INT 32
22530: PPUSH
22531: LD_OWVAR 2
22535: PPUSH
22536: LD_INT 0
22538: PPUSH
22539: CALL_OW 324
22543: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22544: LD_EXP 41
22548: PUSH
22549: LD_EXP 52
22553: AND
22554: IFFALSE 22735
22556: GO 22558
22558: DISABLE
22559: LD_INT 0
22561: PPUSH
22562: PPUSH
22563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22564: LD_ADDR_VAR 0 2
22568: PUSH
22569: LD_INT 22
22571: PUSH
22572: LD_OWVAR 2
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 33
22583: PUSH
22584: LD_INT 3
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PPUSH
22595: CALL_OW 69
22599: ST_TO_ADDR
// if not tmp then
22600: LD_VAR 0 2
22604: NOT
22605: IFFALSE 22609
// exit ;
22607: GO 22735
// side := 0 ;
22609: LD_ADDR_VAR 0 3
22613: PUSH
22614: LD_INT 0
22616: ST_TO_ADDR
// for i := 1 to 8 do
22617: LD_ADDR_VAR 0 1
22621: PUSH
22622: DOUBLE
22623: LD_INT 1
22625: DEC
22626: ST_TO_ADDR
22627: LD_INT 8
22629: PUSH
22630: FOR_TO
22631: IFFALSE 22679
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22633: LD_OWVAR 2
22637: PUSH
22638: LD_VAR 0 1
22642: NONEQUAL
22643: PUSH
22644: LD_OWVAR 2
22648: PPUSH
22649: LD_VAR 0 1
22653: PPUSH
22654: CALL_OW 81
22658: PUSH
22659: LD_INT 2
22661: EQUAL
22662: AND
22663: IFFALSE 22677
// begin side := i ;
22665: LD_ADDR_VAR 0 3
22669: PUSH
22670: LD_VAR 0 1
22674: ST_TO_ADDR
// break ;
22675: GO 22679
// end ;
22677: GO 22630
22679: POP
22680: POP
// if not side then
22681: LD_VAR 0 3
22685: NOT
22686: IFFALSE 22690
// exit ;
22688: GO 22735
// for i := 1 to tmp do
22690: LD_ADDR_VAR 0 1
22694: PUSH
22695: DOUBLE
22696: LD_INT 1
22698: DEC
22699: ST_TO_ADDR
22700: LD_VAR 0 2
22704: PUSH
22705: FOR_TO
22706: IFFALSE 22733
// if Prob ( 60 ) then
22708: LD_INT 60
22710: PPUSH
22711: CALL_OW 13
22715: IFFALSE 22731
// SetSide ( i , side ) ;
22717: LD_VAR 0 1
22721: PPUSH
22722: LD_VAR 0 3
22726: PPUSH
22727: CALL_OW 235
22731: GO 22705
22733: POP
22734: POP
// end ;
22735: PPOPN 3
22737: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22738: LD_EXP 41
22742: PUSH
22743: LD_EXP 54
22747: AND
22748: IFFALSE 22867
22750: GO 22752
22752: DISABLE
22753: LD_INT 0
22755: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22756: LD_ADDR_VAR 0 1
22760: PUSH
22761: LD_INT 22
22763: PUSH
22764: LD_OWVAR 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 21
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 3
22785: PUSH
22786: LD_INT 23
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: PPUSH
22805: CALL_OW 69
22809: PUSH
22810: FOR_IN
22811: IFFALSE 22865
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22813: LD_VAR 0 1
22817: PPUSH
22818: CALL_OW 257
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: LD_INT 3
22831: PUSH
22832: LD_INT 4
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: IN
22841: IFFALSE 22863
// SetClass ( un , rand ( 1 , 4 ) ) ;
22843: LD_VAR 0 1
22847: PPUSH
22848: LD_INT 1
22850: PPUSH
22851: LD_INT 4
22853: PPUSH
22854: CALL_OW 12
22858: PPUSH
22859: CALL_OW 336
22863: GO 22810
22865: POP
22866: POP
// end ;
22867: PPOPN 1
22869: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22870: LD_EXP 41
22874: PUSH
22875: LD_EXP 53
22879: AND
22880: IFFALSE 22959
22882: GO 22884
22884: DISABLE
22885: LD_INT 0
22887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22888: LD_ADDR_VAR 0 1
22892: PUSH
22893: LD_INT 22
22895: PUSH
22896: LD_OWVAR 2
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 21
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 69
22923: ST_TO_ADDR
// if not tmp then
22924: LD_VAR 0 1
22928: NOT
22929: IFFALSE 22933
// exit ;
22931: GO 22959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22933: LD_VAR 0 1
22937: PUSH
22938: LD_INT 1
22940: PPUSH
22941: LD_VAR 0 1
22945: PPUSH
22946: CALL_OW 12
22950: ARRAY
22951: PPUSH
22952: LD_INT 100
22954: PPUSH
22955: CALL_OW 234
// end ;
22959: PPOPN 1
22961: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22962: LD_EXP 41
22966: PUSH
22967: LD_EXP 55
22971: AND
22972: IFFALSE 23070
22974: GO 22976
22976: DISABLE
22977: LD_INT 0
22979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22980: LD_ADDR_VAR 0 1
22984: PUSH
22985: LD_INT 22
22987: PUSH
22988: LD_OWVAR 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 21
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 69
23015: ST_TO_ADDR
// if not tmp then
23016: LD_VAR 0 1
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23070
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23025: LD_VAR 0 1
23029: PUSH
23030: LD_INT 1
23032: PPUSH
23033: LD_VAR 0 1
23037: PPUSH
23038: CALL_OW 12
23042: ARRAY
23043: PPUSH
23044: LD_INT 1
23046: PPUSH
23047: LD_INT 4
23049: PPUSH
23050: CALL_OW 12
23054: PPUSH
23055: LD_INT 3000
23057: PPUSH
23058: LD_INT 9000
23060: PPUSH
23061: CALL_OW 12
23065: PPUSH
23066: CALL_OW 492
// end ;
23070: PPOPN 1
23072: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23073: LD_EXP 41
23077: PUSH
23078: LD_EXP 56
23082: AND
23083: IFFALSE 23103
23085: GO 23087
23087: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23088: LD_INT 1
23090: PPUSH
23091: LD_OWVAR 2
23095: PPUSH
23096: LD_INT 0
23098: PPUSH
23099: CALL_OW 324
23103: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23104: LD_EXP 41
23108: PUSH
23109: LD_EXP 57
23113: AND
23114: IFFALSE 23197
23116: GO 23118
23118: DISABLE
23119: LD_INT 0
23121: PPUSH
23122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23123: LD_ADDR_VAR 0 2
23127: PUSH
23128: LD_INT 22
23130: PUSH
23131: LD_OWVAR 2
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 21
23142: PUSH
23143: LD_INT 3
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PPUSH
23154: CALL_OW 69
23158: ST_TO_ADDR
// if not tmp then
23159: LD_VAR 0 2
23163: NOT
23164: IFFALSE 23168
// exit ;
23166: GO 23197
// for i in tmp do
23168: LD_ADDR_VAR 0 1
23172: PUSH
23173: LD_VAR 0 2
23177: PUSH
23178: FOR_IN
23179: IFFALSE 23195
// SetBLevel ( i , 10 ) ;
23181: LD_VAR 0 1
23185: PPUSH
23186: LD_INT 10
23188: PPUSH
23189: CALL_OW 241
23193: GO 23178
23195: POP
23196: POP
// end ;
23197: PPOPN 2
23199: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23200: LD_EXP 41
23204: PUSH
23205: LD_EXP 58
23209: AND
23210: IFFALSE 23321
23212: GO 23214
23214: DISABLE
23215: LD_INT 0
23217: PPUSH
23218: PPUSH
23219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23220: LD_ADDR_VAR 0 3
23224: PUSH
23225: LD_INT 22
23227: PUSH
23228: LD_OWVAR 2
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 25
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PPUSH
23251: CALL_OW 69
23255: ST_TO_ADDR
// if not tmp then
23256: LD_VAR 0 3
23260: NOT
23261: IFFALSE 23265
// exit ;
23263: GO 23321
// un := tmp [ rand ( 1 , tmp ) ] ;
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: LD_VAR 0 3
23274: PUSH
23275: LD_INT 1
23277: PPUSH
23278: LD_VAR 0 3
23282: PPUSH
23283: CALL_OW 12
23287: ARRAY
23288: ST_TO_ADDR
// if Crawls ( un ) then
23289: LD_VAR 0 2
23293: PPUSH
23294: CALL_OW 318
23298: IFFALSE 23309
// ComWalk ( un ) ;
23300: LD_VAR 0 2
23304: PPUSH
23305: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23309: LD_VAR 0 2
23313: PPUSH
23314: LD_INT 5
23316: PPUSH
23317: CALL_OW 336
// end ;
23321: PPOPN 3
23323: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23324: LD_EXP 41
23328: PUSH
23329: LD_EXP 59
23333: AND
23334: PUSH
23335: LD_OWVAR 67
23339: PUSH
23340: LD_INT 4
23342: LESS
23343: AND
23344: IFFALSE 23363
23346: GO 23348
23348: DISABLE
// begin Difficulty := Difficulty + 1 ;
23349: LD_ADDR_OWVAR 67
23353: PUSH
23354: LD_OWVAR 67
23358: PUSH
23359: LD_INT 1
23361: PLUS
23362: ST_TO_ADDR
// end ;
23363: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23364: LD_EXP 41
23368: PUSH
23369: LD_EXP 60
23373: AND
23374: IFFALSE 23477
23376: GO 23378
23378: DISABLE
23379: LD_INT 0
23381: PPUSH
// begin for i := 1 to 5 do
23382: LD_ADDR_VAR 0 1
23386: PUSH
23387: DOUBLE
23388: LD_INT 1
23390: DEC
23391: ST_TO_ADDR
23392: LD_INT 5
23394: PUSH
23395: FOR_TO
23396: IFFALSE 23475
// begin uc_nation := nation_nature ;
23398: LD_ADDR_OWVAR 21
23402: PUSH
23403: LD_INT 0
23405: ST_TO_ADDR
// uc_side := 0 ;
23406: LD_ADDR_OWVAR 20
23410: PUSH
23411: LD_INT 0
23413: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23414: LD_ADDR_OWVAR 29
23418: PUSH
23419: LD_INT 12
23421: PUSH
23422: LD_INT 12
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: ST_TO_ADDR
// hc_agressivity := 20 ;
23429: LD_ADDR_OWVAR 35
23433: PUSH
23434: LD_INT 20
23436: ST_TO_ADDR
// hc_class := class_tiger ;
23437: LD_ADDR_OWVAR 28
23441: PUSH
23442: LD_INT 14
23444: ST_TO_ADDR
// hc_gallery :=  ;
23445: LD_ADDR_OWVAR 33
23449: PUSH
23450: LD_STRING 
23452: ST_TO_ADDR
// hc_name :=  ;
23453: LD_ADDR_OWVAR 26
23457: PUSH
23458: LD_STRING 
23460: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23461: CALL_OW 44
23465: PPUSH
23466: LD_INT 0
23468: PPUSH
23469: CALL_OW 51
// end ;
23473: GO 23395
23475: POP
23476: POP
// end ;
23477: PPOPN 1
23479: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23480: LD_EXP 41
23484: PUSH
23485: LD_EXP 61
23489: AND
23490: IFFALSE 23499
23492: GO 23494
23494: DISABLE
// StreamSibBomb ;
23495: CALL 23500 0 0
23499: END
// export function StreamSibBomb ; var i , x , y ; begin
23500: LD_INT 0
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
// result := false ;
23506: LD_ADDR_VAR 0 1
23510: PUSH
23511: LD_INT 0
23513: ST_TO_ADDR
// for i := 1 to 16 do
23514: LD_ADDR_VAR 0 2
23518: PUSH
23519: DOUBLE
23520: LD_INT 1
23522: DEC
23523: ST_TO_ADDR
23524: LD_INT 16
23526: PUSH
23527: FOR_TO
23528: IFFALSE 23727
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: LD_INT 10
23537: PUSH
23538: LD_INT 20
23540: PUSH
23541: LD_INT 30
23543: PUSH
23544: LD_INT 40
23546: PUSH
23547: LD_INT 50
23549: PUSH
23550: LD_INT 60
23552: PUSH
23553: LD_INT 70
23555: PUSH
23556: LD_INT 80
23558: PUSH
23559: LD_INT 90
23561: PUSH
23562: LD_INT 100
23564: PUSH
23565: LD_INT 110
23567: PUSH
23568: LD_INT 120
23570: PUSH
23571: LD_INT 130
23573: PUSH
23574: LD_INT 140
23576: PUSH
23577: LD_INT 150
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: PPUSH
23600: LD_INT 15
23602: PPUSH
23603: CALL_OW 12
23607: ARRAY
23608: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23609: LD_ADDR_VAR 0 4
23613: PUSH
23614: LD_INT 10
23616: PUSH
23617: LD_INT 20
23619: PUSH
23620: LD_INT 30
23622: PUSH
23623: LD_INT 40
23625: PUSH
23626: LD_INT 50
23628: PUSH
23629: LD_INT 60
23631: PUSH
23632: LD_INT 70
23634: PUSH
23635: LD_INT 80
23637: PUSH
23638: LD_INT 90
23640: PUSH
23641: LD_INT 100
23643: PUSH
23644: LD_INT 110
23646: PUSH
23647: LD_INT 120
23649: PUSH
23650: LD_INT 130
23652: PUSH
23653: LD_INT 140
23655: PUSH
23656: LD_INT 150
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PPUSH
23679: LD_INT 15
23681: PPUSH
23682: CALL_OW 12
23686: ARRAY
23687: ST_TO_ADDR
// if ValidHex ( x , y ) then
23688: LD_VAR 0 3
23692: PPUSH
23693: LD_VAR 0 4
23697: PPUSH
23698: CALL_OW 488
23702: IFFALSE 23725
// begin result := [ x , y ] ;
23704: LD_ADDR_VAR 0 1
23708: PUSH
23709: LD_VAR 0 3
23713: PUSH
23714: LD_VAR 0 4
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: ST_TO_ADDR
// break ;
23723: GO 23727
// end ; end ;
23725: GO 23527
23727: POP
23728: POP
// if result then
23729: LD_VAR 0 1
23733: IFFALSE 23793
// begin ToLua ( playSibBomb() ) ;
23735: LD_STRING playSibBomb()
23737: PPUSH
23738: CALL_OW 559
// wait ( 0 0$14 ) ;
23742: LD_INT 490
23744: PPUSH
23745: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23749: LD_VAR 0 1
23753: PUSH
23754: LD_INT 1
23756: ARRAY
23757: PPUSH
23758: LD_VAR 0 1
23762: PUSH
23763: LD_INT 2
23765: ARRAY
23766: PPUSH
23767: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23771: LD_VAR 0 1
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PPUSH
23780: LD_VAR 0 1
23784: PUSH
23785: LD_INT 2
23787: ARRAY
23788: PPUSH
23789: CALL_OW 429
// end ; end ;
23793: LD_VAR 0 1
23797: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23798: LD_EXP 41
23802: PUSH
23803: LD_EXP 63
23807: AND
23808: IFFALSE 23820
23810: GO 23812
23812: DISABLE
// YouLost (  ) ;
23813: LD_STRING 
23815: PPUSH
23816: CALL_OW 104
23820: END
// every 0 0$1 trigger StreamModeActive and sFog do
23821: LD_EXP 41
23825: PUSH
23826: LD_EXP 62
23830: AND
23831: IFFALSE 23845
23833: GO 23835
23835: DISABLE
// FogOff ( your_side ) ;
23836: LD_OWVAR 2
23840: PPUSH
23841: CALL_OW 344
23845: END
// every 0 0$1 trigger StreamModeActive and sSun do
23846: LD_EXP 41
23850: PUSH
23851: LD_EXP 64
23855: AND
23856: IFFALSE 23884
23858: GO 23860
23860: DISABLE
// begin solar_recharge_percent := 0 ;
23861: LD_ADDR_OWVAR 79
23865: PUSH
23866: LD_INT 0
23868: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23869: LD_INT 10500
23871: PPUSH
23872: CALL_OW 67
// solar_recharge_percent := 100 ;
23876: LD_ADDR_OWVAR 79
23880: PUSH
23881: LD_INT 100
23883: ST_TO_ADDR
// end ;
23884: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23885: LD_EXP 41
23889: PUSH
23890: LD_EXP 65
23894: AND
23895: IFFALSE 24134
23897: GO 23899
23899: DISABLE
23900: LD_INT 0
23902: PPUSH
23903: PPUSH
23904: PPUSH
// begin tmp := [ ] ;
23905: LD_ADDR_VAR 0 3
23909: PUSH
23910: EMPTY
23911: ST_TO_ADDR
// for i := 1 to 6 do
23912: LD_ADDR_VAR 0 1
23916: PUSH
23917: DOUBLE
23918: LD_INT 1
23920: DEC
23921: ST_TO_ADDR
23922: LD_INT 6
23924: PUSH
23925: FOR_TO
23926: IFFALSE 24031
// begin uc_nation := nation_nature ;
23928: LD_ADDR_OWVAR 21
23932: PUSH
23933: LD_INT 0
23935: ST_TO_ADDR
// uc_side := 0 ;
23936: LD_ADDR_OWVAR 20
23940: PUSH
23941: LD_INT 0
23943: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23944: LD_ADDR_OWVAR 29
23948: PUSH
23949: LD_INT 12
23951: PUSH
23952: LD_INT 12
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: ST_TO_ADDR
// hc_agressivity := 20 ;
23959: LD_ADDR_OWVAR 35
23963: PUSH
23964: LD_INT 20
23966: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23967: LD_ADDR_OWVAR 28
23971: PUSH
23972: LD_INT 17
23974: ST_TO_ADDR
// hc_gallery :=  ;
23975: LD_ADDR_OWVAR 33
23979: PUSH
23980: LD_STRING 
23982: ST_TO_ADDR
// hc_name :=  ;
23983: LD_ADDR_OWVAR 26
23987: PUSH
23988: LD_STRING 
23990: ST_TO_ADDR
// un := CreateHuman ;
23991: LD_ADDR_VAR 0 2
23995: PUSH
23996: CALL_OW 44
24000: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24001: LD_VAR 0 2
24005: PPUSH
24006: LD_INT 1
24008: PPUSH
24009: CALL_OW 51
// tmp := tmp ^ un ;
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: LD_VAR 0 3
24022: PUSH
24023: LD_VAR 0 2
24027: ADD
24028: ST_TO_ADDR
// end ;
24029: GO 23925
24031: POP
24032: POP
// repeat wait ( 0 0$1 ) ;
24033: LD_INT 35
24035: PPUSH
24036: CALL_OW 67
// for un in tmp do
24040: LD_ADDR_VAR 0 2
24044: PUSH
24045: LD_VAR 0 3
24049: PUSH
24050: FOR_IN
24051: IFFALSE 24125
// begin if IsDead ( un ) then
24053: LD_VAR 0 2
24057: PPUSH
24058: CALL_OW 301
24062: IFFALSE 24082
// begin tmp := tmp diff un ;
24064: LD_ADDR_VAR 0 3
24068: PUSH
24069: LD_VAR 0 3
24073: PUSH
24074: LD_VAR 0 2
24078: DIFF
24079: ST_TO_ADDR
// continue ;
24080: GO 24050
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24082: LD_VAR 0 2
24086: PPUSH
24087: LD_INT 3
24089: PUSH
24090: LD_INT 22
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PPUSH
24104: CALL_OW 69
24108: PPUSH
24109: LD_VAR 0 2
24113: PPUSH
24114: CALL_OW 74
24118: PPUSH
24119: CALL_OW 115
// end ;
24123: GO 24050
24125: POP
24126: POP
// until not tmp ;
24127: LD_VAR 0 3
24131: NOT
24132: IFFALSE 24033
// end ;
24134: PPOPN 3
24136: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24137: LD_EXP 41
24141: PUSH
24142: LD_EXP 66
24146: AND
24147: IFFALSE 24201
24149: GO 24151
24151: DISABLE
// begin ToLua ( displayTroll(); ) ;
24152: LD_STRING displayTroll();
24154: PPUSH
24155: CALL_OW 559
// wait ( 3 3$00 ) ;
24159: LD_INT 6300
24161: PPUSH
24162: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24166: LD_STRING hideTroll();
24168: PPUSH
24169: CALL_OW 559
// wait ( 1 1$00 ) ;
24173: LD_INT 2100
24175: PPUSH
24176: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24180: LD_STRING displayTroll();
24182: PPUSH
24183: CALL_OW 559
// wait ( 1 1$00 ) ;
24187: LD_INT 2100
24189: PPUSH
24190: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24194: LD_STRING hideTroll();
24196: PPUSH
24197: CALL_OW 559
// end ;
24201: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24202: LD_EXP 41
24206: PUSH
24207: LD_EXP 67
24211: AND
24212: IFFALSE 24275
24214: GO 24216
24216: DISABLE
24217: LD_INT 0
24219: PPUSH
// begin p := 0 ;
24220: LD_ADDR_VAR 0 1
24224: PUSH
24225: LD_INT 0
24227: ST_TO_ADDR
// repeat game_speed := 1 ;
24228: LD_ADDR_OWVAR 65
24232: PUSH
24233: LD_INT 1
24235: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24236: LD_INT 35
24238: PPUSH
24239: CALL_OW 67
// p := p + 1 ;
24243: LD_ADDR_VAR 0 1
24247: PUSH
24248: LD_VAR 0 1
24252: PUSH
24253: LD_INT 1
24255: PLUS
24256: ST_TO_ADDR
// until p >= 60 ;
24257: LD_VAR 0 1
24261: PUSH
24262: LD_INT 60
24264: GREATEREQUAL
24265: IFFALSE 24228
// game_speed := 4 ;
24267: LD_ADDR_OWVAR 65
24271: PUSH
24272: LD_INT 4
24274: ST_TO_ADDR
// end ;
24275: PPOPN 1
24277: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24278: LD_EXP 41
24282: PUSH
24283: LD_EXP 68
24287: AND
24288: IFFALSE 24434
24290: GO 24292
24292: DISABLE
24293: LD_INT 0
24295: PPUSH
24296: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24297: LD_ADDR_VAR 0 1
24301: PUSH
24302: LD_INT 22
24304: PUSH
24305: LD_OWVAR 2
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: PUSH
24317: LD_INT 30
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 30
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PPUSH
24346: CALL_OW 69
24350: ST_TO_ADDR
// if not depot then
24351: LD_VAR 0 1
24355: NOT
24356: IFFALSE 24360
// exit ;
24358: GO 24434
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24360: LD_ADDR_VAR 0 2
24364: PUSH
24365: LD_VAR 0 1
24369: PUSH
24370: LD_INT 1
24372: PPUSH
24373: LD_VAR 0 1
24377: PPUSH
24378: CALL_OW 12
24382: ARRAY
24383: PPUSH
24384: CALL_OW 274
24388: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24389: LD_VAR 0 2
24393: PPUSH
24394: LD_INT 1
24396: PPUSH
24397: LD_INT 0
24399: PPUSH
24400: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24404: LD_VAR 0 2
24408: PPUSH
24409: LD_INT 2
24411: PPUSH
24412: LD_INT 0
24414: PPUSH
24415: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24419: LD_VAR 0 2
24423: PPUSH
24424: LD_INT 3
24426: PPUSH
24427: LD_INT 0
24429: PPUSH
24430: CALL_OW 277
// end ;
24434: PPOPN 2
24436: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24437: LD_EXP 41
24441: PUSH
24442: LD_EXP 69
24446: AND
24447: IFFALSE 24544
24449: GO 24451
24451: DISABLE
24452: LD_INT 0
24454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24455: LD_ADDR_VAR 0 1
24459: PUSH
24460: LD_INT 22
24462: PUSH
24463: LD_OWVAR 2
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 21
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 3
24484: PUSH
24485: LD_INT 23
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: PPUSH
24504: CALL_OW 69
24508: ST_TO_ADDR
// if not tmp then
24509: LD_VAR 0 1
24513: NOT
24514: IFFALSE 24518
// exit ;
24516: GO 24544
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24518: LD_VAR 0 1
24522: PUSH
24523: LD_INT 1
24525: PPUSH
24526: LD_VAR 0 1
24530: PPUSH
24531: CALL_OW 12
24535: ARRAY
24536: PPUSH
24537: LD_INT 200
24539: PPUSH
24540: CALL_OW 234
// end ;
24544: PPOPN 1
24546: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24547: LD_EXP 41
24551: PUSH
24552: LD_EXP 70
24556: AND
24557: IFFALSE 24636
24559: GO 24561
24561: DISABLE
24562: LD_INT 0
24564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24565: LD_ADDR_VAR 0 1
24569: PUSH
24570: LD_INT 22
24572: PUSH
24573: LD_OWVAR 2
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 21
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PPUSH
24596: CALL_OW 69
24600: ST_TO_ADDR
// if not tmp then
24601: LD_VAR 0 1
24605: NOT
24606: IFFALSE 24610
// exit ;
24608: GO 24636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24610: LD_VAR 0 1
24614: PUSH
24615: LD_INT 1
24617: PPUSH
24618: LD_VAR 0 1
24622: PPUSH
24623: CALL_OW 12
24627: ARRAY
24628: PPUSH
24629: LD_INT 60
24631: PPUSH
24632: CALL_OW 234
// end ;
24636: PPOPN 1
24638: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24639: LD_EXP 41
24643: PUSH
24644: LD_EXP 71
24648: AND
24649: IFFALSE 24748
24651: GO 24653
24653: DISABLE
24654: LD_INT 0
24656: PPUSH
24657: PPUSH
// begin enable ;
24658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24659: LD_ADDR_VAR 0 1
24663: PUSH
24664: LD_INT 22
24666: PUSH
24667: LD_OWVAR 2
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 61
24678: PUSH
24679: EMPTY
24680: LIST
24681: PUSH
24682: LD_INT 33
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: LIST
24696: PPUSH
24697: CALL_OW 69
24701: ST_TO_ADDR
// if not tmp then
24702: LD_VAR 0 1
24706: NOT
24707: IFFALSE 24711
// exit ;
24709: GO 24748
// for i in tmp do
24711: LD_ADDR_VAR 0 2
24715: PUSH
24716: LD_VAR 0 1
24720: PUSH
24721: FOR_IN
24722: IFFALSE 24746
// if IsControledBy ( i ) then
24724: LD_VAR 0 2
24728: PPUSH
24729: CALL_OW 312
24733: IFFALSE 24744
// ComUnlink ( i ) ;
24735: LD_VAR 0 2
24739: PPUSH
24740: CALL_OW 136
24744: GO 24721
24746: POP
24747: POP
// end ;
24748: PPOPN 2
24750: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24751: LD_EXP 41
24755: PUSH
24756: LD_EXP 72
24760: AND
24761: IFFALSE 24901
24763: GO 24765
24765: DISABLE
24766: LD_INT 0
24768: PPUSH
24769: PPUSH
// begin ToLua ( displayPowell(); ) ;
24770: LD_STRING displayPowell();
24772: PPUSH
24773: CALL_OW 559
// uc_side := 0 ;
24777: LD_ADDR_OWVAR 20
24781: PUSH
24782: LD_INT 0
24784: ST_TO_ADDR
// uc_nation := 2 ;
24785: LD_ADDR_OWVAR 21
24789: PUSH
24790: LD_INT 2
24792: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24793: LD_ADDR_OWVAR 37
24797: PUSH
24798: LD_INT 14
24800: ST_TO_ADDR
// vc_engine := engine_siberite ;
24801: LD_ADDR_OWVAR 39
24805: PUSH
24806: LD_INT 3
24808: ST_TO_ADDR
// vc_control := control_apeman ;
24809: LD_ADDR_OWVAR 38
24813: PUSH
24814: LD_INT 5
24816: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24817: LD_ADDR_OWVAR 40
24821: PUSH
24822: LD_INT 29
24824: ST_TO_ADDR
// un := CreateVehicle ;
24825: LD_ADDR_VAR 0 2
24829: PUSH
24830: CALL_OW 45
24834: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24835: LD_VAR 0 2
24839: PPUSH
24840: LD_INT 1
24842: PPUSH
24843: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24847: LD_INT 35
24849: PPUSH
24850: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24854: LD_VAR 0 2
24858: PPUSH
24859: LD_INT 22
24861: PUSH
24862: LD_OWVAR 2
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PPUSH
24871: CALL_OW 69
24875: PPUSH
24876: LD_VAR 0 2
24880: PPUSH
24881: CALL_OW 74
24885: PPUSH
24886: CALL_OW 115
// until IsDead ( un ) ;
24890: LD_VAR 0 2
24894: PPUSH
24895: CALL_OW 301
24899: IFFALSE 24847
// end ;
24901: PPOPN 2
24903: END
// every 0 0$1 trigger StreamModeActive and sStu do
24904: LD_EXP 41
24908: PUSH
24909: LD_EXP 80
24913: AND
24914: IFFALSE 24930
24916: GO 24918
24918: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24919: LD_STRING displayStucuk();
24921: PPUSH
24922: CALL_OW 559
// ResetFog ;
24926: CALL_OW 335
// end ;
24930: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24931: LD_EXP 41
24935: PUSH
24936: LD_EXP 73
24940: AND
24941: IFFALSE 25082
24943: GO 24945
24945: DISABLE
24946: LD_INT 0
24948: PPUSH
24949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24950: LD_ADDR_VAR 0 2
24954: PUSH
24955: LD_INT 22
24957: PUSH
24958: LD_OWVAR 2
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 21
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PPUSH
24981: CALL_OW 69
24985: ST_TO_ADDR
// if not tmp then
24986: LD_VAR 0 2
24990: NOT
24991: IFFALSE 24995
// exit ;
24993: GO 25082
// un := tmp [ rand ( 1 , tmp ) ] ;
24995: LD_ADDR_VAR 0 1
24999: PUSH
25000: LD_VAR 0 2
25004: PUSH
25005: LD_INT 1
25007: PPUSH
25008: LD_VAR 0 2
25012: PPUSH
25013: CALL_OW 12
25017: ARRAY
25018: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25019: LD_VAR 0 1
25023: PPUSH
25024: LD_INT 0
25026: PPUSH
25027: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25031: LD_VAR 0 1
25035: PPUSH
25036: LD_OWVAR 3
25040: PUSH
25041: LD_VAR 0 1
25045: DIFF
25046: PPUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: CALL_OW 74
25056: PPUSH
25057: CALL_OW 115
// wait ( 0 0$20 ) ;
25061: LD_INT 700
25063: PPUSH
25064: CALL_OW 67
// SetSide ( un , your_side ) ;
25068: LD_VAR 0 1
25072: PPUSH
25073: LD_OWVAR 2
25077: PPUSH
25078: CALL_OW 235
// end ;
25082: PPOPN 2
25084: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25085: LD_EXP 41
25089: PUSH
25090: LD_EXP 74
25094: AND
25095: IFFALSE 25201
25097: GO 25099
25099: DISABLE
25100: LD_INT 0
25102: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25103: LD_ADDR_VAR 0 1
25107: PUSH
25108: LD_INT 22
25110: PUSH
25111: LD_OWVAR 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 30
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 30
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PPUSH
25152: CALL_OW 69
25156: ST_TO_ADDR
// if not depot then
25157: LD_VAR 0 1
25161: NOT
25162: IFFALSE 25166
// exit ;
25164: GO 25201
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25166: LD_VAR 0 1
25170: PUSH
25171: LD_INT 1
25173: ARRAY
25174: PPUSH
25175: CALL_OW 250
25179: PPUSH
25180: LD_VAR 0 1
25184: PUSH
25185: LD_INT 1
25187: ARRAY
25188: PPUSH
25189: CALL_OW 251
25193: PPUSH
25194: LD_INT 70
25196: PPUSH
25197: CALL_OW 495
// end ;
25201: PPOPN 1
25203: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25204: LD_EXP 41
25208: PUSH
25209: LD_EXP 75
25213: AND
25214: IFFALSE 25425
25216: GO 25218
25218: DISABLE
25219: LD_INT 0
25221: PPUSH
25222: PPUSH
25223: PPUSH
25224: PPUSH
25225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25226: LD_ADDR_VAR 0 5
25230: PUSH
25231: LD_INT 22
25233: PUSH
25234: LD_OWVAR 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 21
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PPUSH
25257: CALL_OW 69
25261: ST_TO_ADDR
// if not tmp then
25262: LD_VAR 0 5
25266: NOT
25267: IFFALSE 25271
// exit ;
25269: GO 25425
// for i in tmp do
25271: LD_ADDR_VAR 0 1
25275: PUSH
25276: LD_VAR 0 5
25280: PUSH
25281: FOR_IN
25282: IFFALSE 25423
// begin d := rand ( 0 , 5 ) ;
25284: LD_ADDR_VAR 0 4
25288: PUSH
25289: LD_INT 0
25291: PPUSH
25292: LD_INT 5
25294: PPUSH
25295: CALL_OW 12
25299: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25300: LD_ADDR_VAR 0 2
25304: PUSH
25305: LD_VAR 0 1
25309: PPUSH
25310: CALL_OW 250
25314: PPUSH
25315: LD_VAR 0 4
25319: PPUSH
25320: LD_INT 3
25322: PPUSH
25323: LD_INT 12
25325: PPUSH
25326: CALL_OW 12
25330: PPUSH
25331: CALL_OW 272
25335: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25336: LD_ADDR_VAR 0 3
25340: PUSH
25341: LD_VAR 0 1
25345: PPUSH
25346: CALL_OW 251
25350: PPUSH
25351: LD_VAR 0 4
25355: PPUSH
25356: LD_INT 3
25358: PPUSH
25359: LD_INT 12
25361: PPUSH
25362: CALL_OW 12
25366: PPUSH
25367: CALL_OW 273
25371: ST_TO_ADDR
// if ValidHex ( x , y ) then
25372: LD_VAR 0 2
25376: PPUSH
25377: LD_VAR 0 3
25381: PPUSH
25382: CALL_OW 488
25386: IFFALSE 25421
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25388: LD_VAR 0 1
25392: PPUSH
25393: LD_VAR 0 2
25397: PPUSH
25398: LD_VAR 0 3
25402: PPUSH
25403: LD_INT 3
25405: PPUSH
25406: LD_INT 6
25408: PPUSH
25409: CALL_OW 12
25413: PPUSH
25414: LD_INT 1
25416: PPUSH
25417: CALL_OW 483
// end ;
25421: GO 25281
25423: POP
25424: POP
// end ;
25425: PPOPN 5
25427: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25428: LD_EXP 41
25432: PUSH
25433: LD_EXP 76
25437: AND
25438: IFFALSE 25532
25440: GO 25442
25442: DISABLE
25443: LD_INT 0
25445: PPUSH
25446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25447: LD_ADDR_VAR 0 2
25451: PUSH
25452: LD_INT 22
25454: PUSH
25455: LD_OWVAR 2
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 32
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 21
25476: PUSH
25477: LD_INT 2
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: PPUSH
25489: CALL_OW 69
25493: ST_TO_ADDR
// if not tmp then
25494: LD_VAR 0 2
25498: NOT
25499: IFFALSE 25503
// exit ;
25501: GO 25532
// for i in tmp do
25503: LD_ADDR_VAR 0 1
25507: PUSH
25508: LD_VAR 0 2
25512: PUSH
25513: FOR_IN
25514: IFFALSE 25530
// SetFuel ( i , 0 ) ;
25516: LD_VAR 0 1
25520: PPUSH
25521: LD_INT 0
25523: PPUSH
25524: CALL_OW 240
25528: GO 25513
25530: POP
25531: POP
// end ;
25532: PPOPN 2
25534: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25535: LD_EXP 41
25539: PUSH
25540: LD_EXP 77
25544: AND
25545: IFFALSE 25611
25547: GO 25549
25549: DISABLE
25550: LD_INT 0
25552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25553: LD_ADDR_VAR 0 1
25557: PUSH
25558: LD_INT 22
25560: PUSH
25561: LD_OWVAR 2
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 30
25572: PUSH
25573: LD_INT 29
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PPUSH
25584: CALL_OW 69
25588: ST_TO_ADDR
// if not tmp then
25589: LD_VAR 0 1
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25611
// DestroyUnit ( tmp [ 1 ] ) ;
25598: LD_VAR 0 1
25602: PUSH
25603: LD_INT 1
25605: ARRAY
25606: PPUSH
25607: CALL_OW 65
// end ;
25611: PPOPN 1
25613: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25614: LD_EXP 41
25618: PUSH
25619: LD_EXP 79
25623: AND
25624: IFFALSE 25753
25626: GO 25628
25628: DISABLE
25629: LD_INT 0
25631: PPUSH
// begin uc_side := 0 ;
25632: LD_ADDR_OWVAR 20
25636: PUSH
25637: LD_INT 0
25639: ST_TO_ADDR
// uc_nation := nation_arabian ;
25640: LD_ADDR_OWVAR 21
25644: PUSH
25645: LD_INT 2
25647: ST_TO_ADDR
// hc_gallery :=  ;
25648: LD_ADDR_OWVAR 33
25652: PUSH
25653: LD_STRING 
25655: ST_TO_ADDR
// hc_name :=  ;
25656: LD_ADDR_OWVAR 26
25660: PUSH
25661: LD_STRING 
25663: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25664: LD_INT 1
25666: PPUSH
25667: LD_INT 11
25669: PPUSH
25670: LD_INT 10
25672: PPUSH
25673: CALL_OW 380
// un := CreateHuman ;
25677: LD_ADDR_VAR 0 1
25681: PUSH
25682: CALL_OW 44
25686: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25687: LD_VAR 0 1
25691: PPUSH
25692: LD_INT 1
25694: PPUSH
25695: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25699: LD_INT 35
25701: PPUSH
25702: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25706: LD_VAR 0 1
25710: PPUSH
25711: LD_INT 22
25713: PUSH
25714: LD_OWVAR 2
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 69
25727: PPUSH
25728: LD_VAR 0 1
25732: PPUSH
25733: CALL_OW 74
25737: PPUSH
25738: CALL_OW 115
// until IsDead ( un ) ;
25742: LD_VAR 0 1
25746: PPUSH
25747: CALL_OW 301
25751: IFFALSE 25699
// end ;
25753: PPOPN 1
25755: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25756: LD_EXP 41
25760: PUSH
25761: LD_EXP 81
25765: AND
25766: IFFALSE 25778
25768: GO 25770
25770: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25771: LD_STRING earthquake(getX(game), 0, 32)
25773: PPUSH
25774: CALL_OW 559
25778: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25779: LD_EXP 41
25783: PUSH
25784: LD_EXP 82
25788: AND
25789: IFFALSE 25880
25791: GO 25793
25793: DISABLE
25794: LD_INT 0
25796: PPUSH
// begin enable ;
25797: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25798: LD_ADDR_VAR 0 1
25802: PUSH
25803: LD_INT 22
25805: PUSH
25806: LD_OWVAR 2
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 21
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 33
25827: PUSH
25828: LD_INT 3
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: PPUSH
25840: CALL_OW 69
25844: ST_TO_ADDR
// if not tmp then
25845: LD_VAR 0 1
25849: NOT
25850: IFFALSE 25854
// exit ;
25852: GO 25880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25854: LD_VAR 0 1
25858: PUSH
25859: LD_INT 1
25861: PPUSH
25862: LD_VAR 0 1
25866: PPUSH
25867: CALL_OW 12
25871: ARRAY
25872: PPUSH
25873: LD_INT 1
25875: PPUSH
25876: CALL_OW 234
// end ;
25880: PPOPN 1
25882: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25883: LD_EXP 41
25887: PUSH
25888: LD_EXP 83
25892: AND
25893: IFFALSE 26034
25895: GO 25897
25897: DISABLE
25898: LD_INT 0
25900: PPUSH
25901: PPUSH
25902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_INT 22
25910: PUSH
25911: LD_OWVAR 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 25
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: ST_TO_ADDR
// if not tmp then
25939: LD_VAR 0 3
25943: NOT
25944: IFFALSE 25948
// exit ;
25946: GO 26034
// un := tmp [ rand ( 1 , tmp ) ] ;
25948: LD_ADDR_VAR 0 2
25952: PUSH
25953: LD_VAR 0 3
25957: PUSH
25958: LD_INT 1
25960: PPUSH
25961: LD_VAR 0 3
25965: PPUSH
25966: CALL_OW 12
25970: ARRAY
25971: ST_TO_ADDR
// if Crawls ( un ) then
25972: LD_VAR 0 2
25976: PPUSH
25977: CALL_OW 318
25981: IFFALSE 25992
// ComWalk ( un ) ;
25983: LD_VAR 0 2
25987: PPUSH
25988: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25992: LD_VAR 0 2
25996: PPUSH
25997: LD_INT 9
25999: PPUSH
26000: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26004: LD_INT 28
26006: PPUSH
26007: LD_OWVAR 2
26011: PPUSH
26012: LD_INT 2
26014: PPUSH
26015: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26019: LD_INT 29
26021: PPUSH
26022: LD_OWVAR 2
26026: PPUSH
26027: LD_INT 2
26029: PPUSH
26030: CALL_OW 322
// end ;
26034: PPOPN 3
26036: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26037: LD_EXP 41
26041: PUSH
26042: LD_EXP 84
26046: AND
26047: IFFALSE 26158
26049: GO 26051
26051: DISABLE
26052: LD_INT 0
26054: PPUSH
26055: PPUSH
26056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26057: LD_ADDR_VAR 0 3
26061: PUSH
26062: LD_INT 22
26064: PUSH
26065: LD_OWVAR 2
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 25
26076: PUSH
26077: LD_INT 1
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PPUSH
26088: CALL_OW 69
26092: ST_TO_ADDR
// if not tmp then
26093: LD_VAR 0 3
26097: NOT
26098: IFFALSE 26102
// exit ;
26100: GO 26158
// un := tmp [ rand ( 1 , tmp ) ] ;
26102: LD_ADDR_VAR 0 2
26106: PUSH
26107: LD_VAR 0 3
26111: PUSH
26112: LD_INT 1
26114: PPUSH
26115: LD_VAR 0 3
26119: PPUSH
26120: CALL_OW 12
26124: ARRAY
26125: ST_TO_ADDR
// if Crawls ( un ) then
26126: LD_VAR 0 2
26130: PPUSH
26131: CALL_OW 318
26135: IFFALSE 26146
// ComWalk ( un ) ;
26137: LD_VAR 0 2
26141: PPUSH
26142: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26146: LD_VAR 0 2
26150: PPUSH
26151: LD_INT 8
26153: PPUSH
26154: CALL_OW 336
// end ;
26158: PPOPN 3
26160: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26161: LD_EXP 41
26165: PUSH
26166: LD_EXP 85
26170: AND
26171: IFFALSE 26315
26173: GO 26175
26175: DISABLE
26176: LD_INT 0
26178: PPUSH
26179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26180: LD_ADDR_VAR 0 2
26184: PUSH
26185: LD_INT 22
26187: PUSH
26188: LD_OWVAR 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 2
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 34
26212: PUSH
26213: LD_INT 12
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 34
26222: PUSH
26223: LD_INT 51
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 34
26232: PUSH
26233: LD_INT 32
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: PPUSH
26251: CALL_OW 69
26255: ST_TO_ADDR
// if not tmp then
26256: LD_VAR 0 2
26260: NOT
26261: IFFALSE 26265
// exit ;
26263: GO 26315
// for i in tmp do
26265: LD_ADDR_VAR 0 1
26269: PUSH
26270: LD_VAR 0 2
26274: PUSH
26275: FOR_IN
26276: IFFALSE 26313
// if GetCargo ( i , mat_artifact ) = 0 then
26278: LD_VAR 0 1
26282: PPUSH
26283: LD_INT 4
26285: PPUSH
26286: CALL_OW 289
26290: PUSH
26291: LD_INT 0
26293: EQUAL
26294: IFFALSE 26311
// SetCargo ( i , mat_siberit , 100 ) ;
26296: LD_VAR 0 1
26300: PPUSH
26301: LD_INT 3
26303: PPUSH
26304: LD_INT 100
26306: PPUSH
26307: CALL_OW 290
26311: GO 26275
26313: POP
26314: POP
// end ;
26315: PPOPN 2
26317: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26318: LD_EXP 41
26322: PUSH
26323: LD_EXP 86
26327: AND
26328: IFFALSE 26511
26330: GO 26332
26332: DISABLE
26333: LD_INT 0
26335: PPUSH
26336: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26337: LD_ADDR_VAR 0 2
26341: PUSH
26342: LD_INT 22
26344: PUSH
26345: LD_OWVAR 2
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PPUSH
26354: CALL_OW 69
26358: ST_TO_ADDR
// if not tmp then
26359: LD_VAR 0 2
26363: NOT
26364: IFFALSE 26368
// exit ;
26366: GO 26511
// for i := 1 to 2 do
26368: LD_ADDR_VAR 0 1
26372: PUSH
26373: DOUBLE
26374: LD_INT 1
26376: DEC
26377: ST_TO_ADDR
26378: LD_INT 2
26380: PUSH
26381: FOR_TO
26382: IFFALSE 26509
// begin uc_side := your_side ;
26384: LD_ADDR_OWVAR 20
26388: PUSH
26389: LD_OWVAR 2
26393: ST_TO_ADDR
// uc_nation := nation_american ;
26394: LD_ADDR_OWVAR 21
26398: PUSH
26399: LD_INT 1
26401: ST_TO_ADDR
// vc_chassis := us_morphling ;
26402: LD_ADDR_OWVAR 37
26406: PUSH
26407: LD_INT 5
26409: ST_TO_ADDR
// vc_engine := engine_siberite ;
26410: LD_ADDR_OWVAR 39
26414: PUSH
26415: LD_INT 3
26417: ST_TO_ADDR
// vc_control := control_computer ;
26418: LD_ADDR_OWVAR 38
26422: PUSH
26423: LD_INT 3
26425: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26426: LD_ADDR_OWVAR 40
26430: PUSH
26431: LD_INT 10
26433: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26434: LD_VAR 0 2
26438: PUSH
26439: LD_INT 1
26441: ARRAY
26442: PPUSH
26443: CALL_OW 310
26447: NOT
26448: IFFALSE 26495
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26450: CALL_OW 45
26454: PPUSH
26455: LD_VAR 0 2
26459: PUSH
26460: LD_INT 1
26462: ARRAY
26463: PPUSH
26464: CALL_OW 250
26468: PPUSH
26469: LD_VAR 0 2
26473: PUSH
26474: LD_INT 1
26476: ARRAY
26477: PPUSH
26478: CALL_OW 251
26482: PPUSH
26483: LD_INT 12
26485: PPUSH
26486: LD_INT 1
26488: PPUSH
26489: CALL_OW 50
26493: GO 26507
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26495: CALL_OW 45
26499: PPUSH
26500: LD_INT 1
26502: PPUSH
26503: CALL_OW 51
// end ;
26507: GO 26381
26509: POP
26510: POP
// end ;
26511: PPOPN 2
26513: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26514: LD_EXP 41
26518: PUSH
26519: LD_EXP 87
26523: AND
26524: IFFALSE 26746
26526: GO 26528
26528: DISABLE
26529: LD_INT 0
26531: PPUSH
26532: PPUSH
26533: PPUSH
26534: PPUSH
26535: PPUSH
26536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26537: LD_ADDR_VAR 0 6
26541: PUSH
26542: LD_INT 22
26544: PUSH
26545: LD_OWVAR 2
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 21
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 3
26566: PUSH
26567: LD_INT 23
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: LIST
26585: PPUSH
26586: CALL_OW 69
26590: ST_TO_ADDR
// if not tmp then
26591: LD_VAR 0 6
26595: NOT
26596: IFFALSE 26600
// exit ;
26598: GO 26746
// s1 := rand ( 1 , 4 ) ;
26600: LD_ADDR_VAR 0 2
26604: PUSH
26605: LD_INT 1
26607: PPUSH
26608: LD_INT 4
26610: PPUSH
26611: CALL_OW 12
26615: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26616: LD_ADDR_VAR 0 4
26620: PUSH
26621: LD_VAR 0 6
26625: PUSH
26626: LD_INT 1
26628: ARRAY
26629: PPUSH
26630: LD_VAR 0 2
26634: PPUSH
26635: CALL_OW 259
26639: ST_TO_ADDR
// if s1 = 1 then
26640: LD_VAR 0 2
26644: PUSH
26645: LD_INT 1
26647: EQUAL
26648: IFFALSE 26668
// s2 := rand ( 2 , 4 ) else
26650: LD_ADDR_VAR 0 3
26654: PUSH
26655: LD_INT 2
26657: PPUSH
26658: LD_INT 4
26660: PPUSH
26661: CALL_OW 12
26665: ST_TO_ADDR
26666: GO 26676
// s2 := 1 ;
26668: LD_ADDR_VAR 0 3
26672: PUSH
26673: LD_INT 1
26675: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26676: LD_ADDR_VAR 0 5
26680: PUSH
26681: LD_VAR 0 6
26685: PUSH
26686: LD_INT 1
26688: ARRAY
26689: PPUSH
26690: LD_VAR 0 3
26694: PPUSH
26695: CALL_OW 259
26699: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26700: LD_VAR 0 6
26704: PUSH
26705: LD_INT 1
26707: ARRAY
26708: PPUSH
26709: LD_VAR 0 2
26713: PPUSH
26714: LD_VAR 0 5
26718: PPUSH
26719: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26723: LD_VAR 0 6
26727: PUSH
26728: LD_INT 1
26730: ARRAY
26731: PPUSH
26732: LD_VAR 0 3
26736: PPUSH
26737: LD_VAR 0 4
26741: PPUSH
26742: CALL_OW 237
// end ;
26746: PPOPN 6
26748: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26749: LD_EXP 41
26753: PUSH
26754: LD_EXP 88
26758: AND
26759: IFFALSE 26838
26761: GO 26763
26763: DISABLE
26764: LD_INT 0
26766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26767: LD_ADDR_VAR 0 1
26771: PUSH
26772: LD_INT 22
26774: PUSH
26775: LD_OWVAR 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 30
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PPUSH
26798: CALL_OW 69
26802: ST_TO_ADDR
// if not tmp then
26803: LD_VAR 0 1
26807: NOT
26808: IFFALSE 26812
// exit ;
26810: GO 26838
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26812: LD_VAR 0 1
26816: PUSH
26817: LD_INT 1
26819: PPUSH
26820: LD_VAR 0 1
26824: PPUSH
26825: CALL_OW 12
26829: ARRAY
26830: PPUSH
26831: LD_INT 1
26833: PPUSH
26834: CALL_OW 234
// end ;
26838: PPOPN 1
26840: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26841: LD_EXP 41
26845: PUSH
26846: LD_EXP 89
26850: AND
26851: IFFALSE 26963
26853: GO 26855
26855: DISABLE
26856: LD_INT 0
26858: PPUSH
26859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26860: LD_ADDR_VAR 0 2
26864: PUSH
26865: LD_INT 22
26867: PUSH
26868: LD_OWVAR 2
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: LD_INT 30
26882: PUSH
26883: LD_INT 27
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 30
26892: PUSH
26893: LD_INT 26
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 30
26902: PUSH
26903: LD_INT 28
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PPUSH
26920: CALL_OW 69
26924: ST_TO_ADDR
// if not tmp then
26925: LD_VAR 0 2
26929: NOT
26930: IFFALSE 26934
// exit ;
26932: GO 26963
// for i in tmp do
26934: LD_ADDR_VAR 0 1
26938: PUSH
26939: LD_VAR 0 2
26943: PUSH
26944: FOR_IN
26945: IFFALSE 26961
// SetLives ( i , 1 ) ;
26947: LD_VAR 0 1
26951: PPUSH
26952: LD_INT 1
26954: PPUSH
26955: CALL_OW 234
26959: GO 26944
26961: POP
26962: POP
// end ;
26963: PPOPN 2
26965: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26966: LD_EXP 41
26970: PUSH
26971: LD_EXP 90
26975: AND
26976: IFFALSE 27263
26978: GO 26980
26980: DISABLE
26981: LD_INT 0
26983: PPUSH
26984: PPUSH
26985: PPUSH
// begin i := rand ( 1 , 7 ) ;
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: LD_INT 1
26993: PPUSH
26994: LD_INT 7
26996: PPUSH
26997: CALL_OW 12
27001: ST_TO_ADDR
// case i of 1 :
27002: LD_VAR 0 1
27006: PUSH
27007: LD_INT 1
27009: DOUBLE
27010: EQUAL
27011: IFTRUE 27015
27013: GO 27025
27015: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27016: LD_STRING earthquake(getX(game), 0, 32)
27018: PPUSH
27019: CALL_OW 559
27023: GO 27263
27025: LD_INT 2
27027: DOUBLE
27028: EQUAL
27029: IFTRUE 27033
27031: GO 27047
27033: POP
// begin ToLua ( displayStucuk(); ) ;
27034: LD_STRING displayStucuk();
27036: PPUSH
27037: CALL_OW 559
// ResetFog ;
27041: CALL_OW 335
// end ; 3 :
27045: GO 27263
27047: LD_INT 3
27049: DOUBLE
27050: EQUAL
27051: IFTRUE 27055
27053: GO 27159
27055: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27056: LD_ADDR_VAR 0 2
27060: PUSH
27061: LD_INT 22
27063: PUSH
27064: LD_OWVAR 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 25
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PPUSH
27087: CALL_OW 69
27091: ST_TO_ADDR
// if not tmp then
27092: LD_VAR 0 2
27096: NOT
27097: IFFALSE 27101
// exit ;
27099: GO 27263
// un := tmp [ rand ( 1 , tmp ) ] ;
27101: LD_ADDR_VAR 0 3
27105: PUSH
27106: LD_VAR 0 2
27110: PUSH
27111: LD_INT 1
27113: PPUSH
27114: LD_VAR 0 2
27118: PPUSH
27119: CALL_OW 12
27123: ARRAY
27124: ST_TO_ADDR
// if Crawls ( un ) then
27125: LD_VAR 0 3
27129: PPUSH
27130: CALL_OW 318
27134: IFFALSE 27145
// ComWalk ( un ) ;
27136: LD_VAR 0 3
27140: PPUSH
27141: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27145: LD_VAR 0 3
27149: PPUSH
27150: LD_INT 8
27152: PPUSH
27153: CALL_OW 336
// end ; 4 :
27157: GO 27263
27159: LD_INT 4
27161: DOUBLE
27162: EQUAL
27163: IFTRUE 27167
27165: GO 27241
27167: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27168: LD_ADDR_VAR 0 2
27172: PUSH
27173: LD_INT 22
27175: PUSH
27176: LD_OWVAR 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 30
27187: PUSH
27188: LD_INT 29
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PPUSH
27199: CALL_OW 69
27203: ST_TO_ADDR
// if not tmp then
27204: LD_VAR 0 2
27208: NOT
27209: IFFALSE 27213
// exit ;
27211: GO 27263
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27213: LD_VAR 0 2
27217: PUSH
27218: LD_INT 1
27220: ARRAY
27221: PPUSH
27222: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27226: LD_VAR 0 2
27230: PUSH
27231: LD_INT 1
27233: ARRAY
27234: PPUSH
27235: CALL_OW 65
// end ; 5 .. 7 :
27239: GO 27263
27241: LD_INT 5
27243: DOUBLE
27244: GREATEREQUAL
27245: IFFALSE 27253
27247: LD_INT 7
27249: DOUBLE
27250: LESSEQUAL
27251: IFTRUE 27255
27253: GO 27262
27255: POP
// StreamSibBomb ; end ;
27256: CALL 23500 0 0
27260: GO 27263
27262: POP
// end ;
27263: PPOPN 3
27265: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27266: LD_EXP 41
27270: PUSH
27271: LD_EXP 91
27275: AND
27276: IFFALSE 27432
27278: GO 27280
27280: DISABLE
27281: LD_INT 0
27283: PPUSH
27284: PPUSH
27285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27286: LD_ADDR_VAR 0 2
27290: PUSH
27291: LD_INT 81
27293: PUSH
27294: LD_OWVAR 2
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: LD_INT 21
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 21
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PPUSH
27335: CALL_OW 69
27339: ST_TO_ADDR
// if not tmp then
27340: LD_VAR 0 2
27344: NOT
27345: IFFALSE 27349
// exit ;
27347: GO 27432
// p := 0 ;
27349: LD_ADDR_VAR 0 3
27353: PUSH
27354: LD_INT 0
27356: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27357: LD_INT 35
27359: PPUSH
27360: CALL_OW 67
// p := p + 1 ;
27364: LD_ADDR_VAR 0 3
27368: PUSH
27369: LD_VAR 0 3
27373: PUSH
27374: LD_INT 1
27376: PLUS
27377: ST_TO_ADDR
// for i in tmp do
27378: LD_ADDR_VAR 0 1
27382: PUSH
27383: LD_VAR 0 2
27387: PUSH
27388: FOR_IN
27389: IFFALSE 27420
// if GetLives ( i ) < 1000 then
27391: LD_VAR 0 1
27395: PPUSH
27396: CALL_OW 256
27400: PUSH
27401: LD_INT 1000
27403: LESS
27404: IFFALSE 27418
// SetLives ( i , 1000 ) ;
27406: LD_VAR 0 1
27410: PPUSH
27411: LD_INT 1000
27413: PPUSH
27414: CALL_OW 234
27418: GO 27388
27420: POP
27421: POP
// until p > 20 ;
27422: LD_VAR 0 3
27426: PUSH
27427: LD_INT 20
27429: GREATER
27430: IFFALSE 27357
// end ;
27432: PPOPN 3
27434: END
// every 0 0$1 trigger StreamModeActive and sTime do
27435: LD_EXP 41
27439: PUSH
27440: LD_EXP 92
27444: AND
27445: IFFALSE 27480
27447: GO 27449
27449: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27450: LD_INT 28
27452: PPUSH
27453: LD_OWVAR 2
27457: PPUSH
27458: LD_INT 2
27460: PPUSH
27461: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27465: LD_INT 30
27467: PPUSH
27468: LD_OWVAR 2
27472: PPUSH
27473: LD_INT 2
27475: PPUSH
27476: CALL_OW 322
// end ;
27480: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27481: LD_EXP 41
27485: PUSH
27486: LD_EXP 93
27490: AND
27491: IFFALSE 27612
27493: GO 27495
27495: DISABLE
27496: LD_INT 0
27498: PPUSH
27499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27500: LD_ADDR_VAR 0 2
27504: PUSH
27505: LD_INT 22
27507: PUSH
27508: LD_OWVAR 2
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 21
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 3
27529: PUSH
27530: LD_INT 23
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: PPUSH
27549: CALL_OW 69
27553: ST_TO_ADDR
// if not tmp then
27554: LD_VAR 0 2
27558: NOT
27559: IFFALSE 27563
// exit ;
27561: GO 27612
// for i in tmp do
27563: LD_ADDR_VAR 0 1
27567: PUSH
27568: LD_VAR 0 2
27572: PUSH
27573: FOR_IN
27574: IFFALSE 27610
// begin if Crawls ( i ) then
27576: LD_VAR 0 1
27580: PPUSH
27581: CALL_OW 318
27585: IFFALSE 27596
// ComWalk ( i ) ;
27587: LD_VAR 0 1
27591: PPUSH
27592: CALL_OW 138
// SetClass ( i , 2 ) ;
27596: LD_VAR 0 1
27600: PPUSH
27601: LD_INT 2
27603: PPUSH
27604: CALL_OW 336
// end ;
27608: GO 27573
27610: POP
27611: POP
// end ;
27612: PPOPN 2
27614: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27615: LD_EXP 41
27619: PUSH
27620: LD_EXP 94
27624: AND
27625: IFFALSE 27913
27627: GO 27629
27629: DISABLE
27630: LD_INT 0
27632: PPUSH
27633: PPUSH
27634: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27635: LD_OWVAR 2
27639: PPUSH
27640: LD_INT 9
27642: PPUSH
27643: LD_INT 1
27645: PPUSH
27646: LD_INT 1
27648: PPUSH
27649: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27653: LD_INT 9
27655: PPUSH
27656: LD_OWVAR 2
27660: PPUSH
27661: CALL_OW 343
// uc_side := 9 ;
27665: LD_ADDR_OWVAR 20
27669: PUSH
27670: LD_INT 9
27672: ST_TO_ADDR
// uc_nation := 2 ;
27673: LD_ADDR_OWVAR 21
27677: PUSH
27678: LD_INT 2
27680: ST_TO_ADDR
// hc_name := Dark Warrior ;
27681: LD_ADDR_OWVAR 26
27685: PUSH
27686: LD_STRING Dark Warrior
27688: ST_TO_ADDR
// hc_gallery :=  ;
27689: LD_ADDR_OWVAR 33
27693: PUSH
27694: LD_STRING 
27696: ST_TO_ADDR
// hc_noskilllimit := true ;
27697: LD_ADDR_OWVAR 76
27701: PUSH
27702: LD_INT 1
27704: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27705: LD_ADDR_OWVAR 31
27709: PUSH
27710: LD_INT 30
27712: PUSH
27713: LD_INT 30
27715: PUSH
27716: LD_INT 30
27718: PUSH
27719: LD_INT 30
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: ST_TO_ADDR
// un := CreateHuman ;
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: CALL_OW 44
27737: ST_TO_ADDR
// hc_noskilllimit := false ;
27738: LD_ADDR_OWVAR 76
27742: PUSH
27743: LD_INT 0
27745: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27746: LD_VAR 0 3
27750: PPUSH
27751: LD_INT 1
27753: PPUSH
27754: CALL_OW 51
// ToLua ( playRanger() ) ;
27758: LD_STRING playRanger()
27760: PPUSH
27761: CALL_OW 559
// p := 0 ;
27765: LD_ADDR_VAR 0 2
27769: PUSH
27770: LD_INT 0
27772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27773: LD_INT 35
27775: PPUSH
27776: CALL_OW 67
// p := p + 1 ;
27780: LD_ADDR_VAR 0 2
27784: PUSH
27785: LD_VAR 0 2
27789: PUSH
27790: LD_INT 1
27792: PLUS
27793: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27794: LD_VAR 0 3
27798: PPUSH
27799: CALL_OW 256
27803: PUSH
27804: LD_INT 1000
27806: LESS
27807: IFFALSE 27821
// SetLives ( un , 1000 ) ;
27809: LD_VAR 0 3
27813: PPUSH
27814: LD_INT 1000
27816: PPUSH
27817: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27821: LD_VAR 0 3
27825: PPUSH
27826: LD_INT 81
27828: PUSH
27829: LD_OWVAR 2
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 91
27840: PUSH
27841: LD_VAR 0 3
27845: PUSH
27846: LD_INT 30
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PPUSH
27858: CALL_OW 69
27862: PPUSH
27863: LD_VAR 0 3
27867: PPUSH
27868: CALL_OW 74
27872: PPUSH
27873: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27877: LD_VAR 0 2
27881: PUSH
27882: LD_INT 80
27884: GREATER
27885: PUSH
27886: LD_VAR 0 3
27890: PPUSH
27891: CALL_OW 301
27895: OR
27896: IFFALSE 27773
// if un then
27898: LD_VAR 0 3
27902: IFFALSE 27913
// RemoveUnit ( un ) ;
27904: LD_VAR 0 3
27908: PPUSH
27909: CALL_OW 64
// end ;
27913: PPOPN 3
27915: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27916: LD_EXP 95
27920: IFFALSE 28036
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27930: LD_ADDR_VAR 0 2
27934: PUSH
27935: LD_INT 81
27937: PUSH
27938: LD_OWVAR 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 21
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27966: LD_STRING playComputer()
27968: PPUSH
27969: CALL_OW 559
// if not tmp then
27973: LD_VAR 0 2
27977: NOT
27978: IFFALSE 27982
// exit ;
27980: GO 28036
// for i in tmp do
27982: LD_ADDR_VAR 0 1
27986: PUSH
27987: LD_VAR 0 2
27991: PUSH
27992: FOR_IN
27993: IFFALSE 28034
// for j := 1 to 4 do
27995: LD_ADDR_VAR 0 3
27999: PUSH
28000: DOUBLE
28001: LD_INT 1
28003: DEC
28004: ST_TO_ADDR
28005: LD_INT 4
28007: PUSH
28008: FOR_TO
28009: IFFALSE 28030
// SetSkill ( i , j , 10 ) ;
28011: LD_VAR 0 1
28015: PPUSH
28016: LD_VAR 0 3
28020: PPUSH
28021: LD_INT 10
28023: PPUSH
28024: CALL_OW 237
28028: GO 28008
28030: POP
28031: POP
28032: GO 27992
28034: POP
28035: POP
// end ;
28036: PPOPN 3
28038: END
// every 0 0$1 trigger s30 do var i , tmp ;
28039: LD_EXP 96
28043: IFFALSE 28112
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
28051: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28052: LD_ADDR_VAR 0 2
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PPUSH
28069: CALL_OW 69
28073: ST_TO_ADDR
// if not tmp then
28074: LD_VAR 0 2
28078: NOT
28079: IFFALSE 28083
// exit ;
28081: GO 28112
// for i in tmp do
28083: LD_ADDR_VAR 0 1
28087: PUSH
28088: LD_VAR 0 2
28092: PUSH
28093: FOR_IN
28094: IFFALSE 28110
// SetLives ( i , 300 ) ;
28096: LD_VAR 0 1
28100: PPUSH
28101: LD_INT 300
28103: PPUSH
28104: CALL_OW 234
28108: GO 28093
28110: POP
28111: POP
// end ;
28112: PPOPN 2
28114: END
// every 0 0$1 trigger s60 do var i , tmp ;
28115: LD_EXP 97
28119: IFFALSE 28188
28121: GO 28123
28123: DISABLE
28124: LD_INT 0
28126: PPUSH
28127: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28128: LD_ADDR_VAR 0 2
28132: PUSH
28133: LD_INT 22
28135: PUSH
28136: LD_OWVAR 2
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: ST_TO_ADDR
// if not tmp then
28150: LD_VAR 0 2
28154: NOT
28155: IFFALSE 28159
// exit ;
28157: GO 28188
// for i in tmp do
28159: LD_ADDR_VAR 0 1
28163: PUSH
28164: LD_VAR 0 2
28168: PUSH
28169: FOR_IN
28170: IFFALSE 28186
// SetLives ( i , 600 ) ;
28172: LD_VAR 0 1
28176: PPUSH
28177: LD_INT 600
28179: PPUSH
28180: CALL_OW 234
28184: GO 28169
28186: POP
28187: POP
// end ;
28188: PPOPN 2
28190: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28191: LD_INT 0
28193: PPUSH
// case cmd of 301 :
28194: LD_VAR 0 1
28198: PUSH
28199: LD_INT 301
28201: DOUBLE
28202: EQUAL
28203: IFTRUE 28207
28205: GO 28239
28207: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28208: LD_VAR 0 6
28212: PPUSH
28213: LD_VAR 0 7
28217: PPUSH
28218: LD_VAR 0 8
28222: PPUSH
28223: LD_VAR 0 4
28227: PPUSH
28228: LD_VAR 0 5
28232: PPUSH
28233: CALL 29448 0 5
28237: GO 28360
28239: LD_INT 302
28241: DOUBLE
28242: EQUAL
28243: IFTRUE 28247
28245: GO 28284
28247: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28248: LD_VAR 0 6
28252: PPUSH
28253: LD_VAR 0 7
28257: PPUSH
28258: LD_VAR 0 8
28262: PPUSH
28263: LD_VAR 0 9
28267: PPUSH
28268: LD_VAR 0 4
28272: PPUSH
28273: LD_VAR 0 5
28277: PPUSH
28278: CALL 29539 0 6
28282: GO 28360
28284: LD_INT 303
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28329
28292: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28293: LD_VAR 0 6
28297: PPUSH
28298: LD_VAR 0 7
28302: PPUSH
28303: LD_VAR 0 8
28307: PPUSH
28308: LD_VAR 0 9
28312: PPUSH
28313: LD_VAR 0 4
28317: PPUSH
28318: LD_VAR 0 5
28322: PPUSH
28323: CALL 28365 0 6
28327: GO 28360
28329: LD_INT 304
28331: DOUBLE
28332: EQUAL
28333: IFTRUE 28337
28335: GO 28359
28337: POP
// hHackTeleport ( unit , x , y ) ; end ;
28338: LD_VAR 0 2
28342: PPUSH
28343: LD_VAR 0 4
28347: PPUSH
28348: LD_VAR 0 5
28352: PPUSH
28353: CALL 30132 0 3
28357: GO 28360
28359: POP
// end ;
28360: LD_VAR 0 12
28364: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28365: LD_INT 0
28367: PPUSH
28368: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28369: LD_VAR 0 1
28373: PUSH
28374: LD_INT 1
28376: LESS
28377: PUSH
28378: LD_VAR 0 1
28382: PUSH
28383: LD_INT 3
28385: GREATER
28386: OR
28387: PUSH
28388: LD_VAR 0 5
28392: PPUSH
28393: LD_VAR 0 6
28397: PPUSH
28398: CALL_OW 428
28402: OR
28403: IFFALSE 28407
// exit ;
28405: GO 29135
// uc_side := your_side ;
28407: LD_ADDR_OWVAR 20
28411: PUSH
28412: LD_OWVAR 2
28416: ST_TO_ADDR
// uc_nation := nation ;
28417: LD_ADDR_OWVAR 21
28421: PUSH
28422: LD_VAR 0 1
28426: ST_TO_ADDR
// bc_level = 1 ;
28427: LD_ADDR_OWVAR 43
28431: PUSH
28432: LD_INT 1
28434: ST_TO_ADDR
// case btype of 1 :
28435: LD_VAR 0 2
28439: PUSH
28440: LD_INT 1
28442: DOUBLE
28443: EQUAL
28444: IFTRUE 28448
28446: GO 28459
28448: POP
// bc_type := b_depot ; 2 :
28449: LD_ADDR_OWVAR 42
28453: PUSH
28454: LD_INT 0
28456: ST_TO_ADDR
28457: GO 29079
28459: LD_INT 2
28461: DOUBLE
28462: EQUAL
28463: IFTRUE 28467
28465: GO 28478
28467: POP
// bc_type := b_warehouse ; 3 :
28468: LD_ADDR_OWVAR 42
28472: PUSH
28473: LD_INT 1
28475: ST_TO_ADDR
28476: GO 29079
28478: LD_INT 3
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28497
28486: POP
// bc_type := b_lab ; 4 .. 9 :
28487: LD_ADDR_OWVAR 42
28491: PUSH
28492: LD_INT 6
28494: ST_TO_ADDR
28495: GO 29079
28497: LD_INT 4
28499: DOUBLE
28500: GREATEREQUAL
28501: IFFALSE 28509
28503: LD_INT 9
28505: DOUBLE
28506: LESSEQUAL
28507: IFTRUE 28511
28509: GO 28571
28511: POP
// begin bc_type := b_lab_half ;
28512: LD_ADDR_OWVAR 42
28516: PUSH
28517: LD_INT 7
28519: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28520: LD_ADDR_OWVAR 44
28524: PUSH
28525: LD_INT 10
28527: PUSH
28528: LD_INT 11
28530: PUSH
28531: LD_INT 12
28533: PUSH
28534: LD_INT 15
28536: PUSH
28537: LD_INT 14
28539: PUSH
28540: LD_INT 13
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: PUSH
28551: LD_VAR 0 2
28555: PUSH
28556: LD_INT 3
28558: MINUS
28559: ARRAY
28560: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28561: LD_ADDR_OWVAR 45
28565: PUSH
28566: LD_INT 9
28568: ST_TO_ADDR
// end ; 10 .. 13 :
28569: GO 29079
28571: LD_INT 10
28573: DOUBLE
28574: GREATEREQUAL
28575: IFFALSE 28583
28577: LD_INT 13
28579: DOUBLE
28580: LESSEQUAL
28581: IFTRUE 28585
28583: GO 28662
28585: POP
// begin bc_type := b_lab_full ;
28586: LD_ADDR_OWVAR 42
28590: PUSH
28591: LD_INT 8
28593: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28594: LD_ADDR_OWVAR 44
28598: PUSH
28599: LD_INT 10
28601: PUSH
28602: LD_INT 12
28604: PUSH
28605: LD_INT 14
28607: PUSH
28608: LD_INT 13
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: PUSH
28617: LD_VAR 0 2
28621: PUSH
28622: LD_INT 9
28624: MINUS
28625: ARRAY
28626: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28627: LD_ADDR_OWVAR 45
28631: PUSH
28632: LD_INT 11
28634: PUSH
28635: LD_INT 15
28637: PUSH
28638: LD_INT 12
28640: PUSH
28641: LD_INT 15
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: PUSH
28650: LD_VAR 0 2
28654: PUSH
28655: LD_INT 9
28657: MINUS
28658: ARRAY
28659: ST_TO_ADDR
// end ; 14 :
28660: GO 29079
28662: LD_INT 14
28664: DOUBLE
28665: EQUAL
28666: IFTRUE 28670
28668: GO 28681
28670: POP
// bc_type := b_workshop ; 15 :
28671: LD_ADDR_OWVAR 42
28675: PUSH
28676: LD_INT 2
28678: ST_TO_ADDR
28679: GO 29079
28681: LD_INT 15
28683: DOUBLE
28684: EQUAL
28685: IFTRUE 28689
28687: GO 28700
28689: POP
// bc_type := b_factory ; 16 :
28690: LD_ADDR_OWVAR 42
28694: PUSH
28695: LD_INT 3
28697: ST_TO_ADDR
28698: GO 29079
28700: LD_INT 16
28702: DOUBLE
28703: EQUAL
28704: IFTRUE 28708
28706: GO 28719
28708: POP
// bc_type := b_ext_gun ; 17 :
28709: LD_ADDR_OWVAR 42
28713: PUSH
28714: LD_INT 17
28716: ST_TO_ADDR
28717: GO 29079
28719: LD_INT 17
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28755
28727: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28728: LD_ADDR_OWVAR 42
28732: PUSH
28733: LD_INT 19
28735: PUSH
28736: LD_INT 23
28738: PUSH
28739: LD_INT 19
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: PUSH
28747: LD_VAR 0 1
28751: ARRAY
28752: ST_TO_ADDR
28753: GO 29079
28755: LD_INT 18
28757: DOUBLE
28758: EQUAL
28759: IFTRUE 28763
28761: GO 28774
28763: POP
// bc_type := b_ext_radar ; 19 :
28764: LD_ADDR_OWVAR 42
28768: PUSH
28769: LD_INT 20
28771: ST_TO_ADDR
28772: GO 29079
28774: LD_INT 19
28776: DOUBLE
28777: EQUAL
28778: IFTRUE 28782
28780: GO 28793
28782: POP
// bc_type := b_ext_radio ; 20 :
28783: LD_ADDR_OWVAR 42
28787: PUSH
28788: LD_INT 22
28790: ST_TO_ADDR
28791: GO 29079
28793: LD_INT 20
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28812
28801: POP
// bc_type := b_ext_siberium ; 21 :
28802: LD_ADDR_OWVAR 42
28806: PUSH
28807: LD_INT 21
28809: ST_TO_ADDR
28810: GO 29079
28812: LD_INT 21
28814: DOUBLE
28815: EQUAL
28816: IFTRUE 28820
28818: GO 28831
28820: POP
// bc_type := b_ext_computer ; 22 :
28821: LD_ADDR_OWVAR 42
28825: PUSH
28826: LD_INT 24
28828: ST_TO_ADDR
28829: GO 29079
28831: LD_INT 22
28833: DOUBLE
28834: EQUAL
28835: IFTRUE 28839
28837: GO 28850
28839: POP
// bc_type := b_ext_track ; 23 :
28840: LD_ADDR_OWVAR 42
28844: PUSH
28845: LD_INT 16
28847: ST_TO_ADDR
28848: GO 29079
28850: LD_INT 23
28852: DOUBLE
28853: EQUAL
28854: IFTRUE 28858
28856: GO 28869
28858: POP
// bc_type := b_ext_laser ; 24 :
28859: LD_ADDR_OWVAR 42
28863: PUSH
28864: LD_INT 25
28866: ST_TO_ADDR
28867: GO 29079
28869: LD_INT 24
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 28888
28877: POP
// bc_type := b_control_tower ; 25 :
28878: LD_ADDR_OWVAR 42
28882: PUSH
28883: LD_INT 36
28885: ST_TO_ADDR
28886: GO 29079
28888: LD_INT 25
28890: DOUBLE
28891: EQUAL
28892: IFTRUE 28896
28894: GO 28907
28896: POP
// bc_type := b_breastwork ; 26 :
28897: LD_ADDR_OWVAR 42
28901: PUSH
28902: LD_INT 31
28904: ST_TO_ADDR
28905: GO 29079
28907: LD_INT 26
28909: DOUBLE
28910: EQUAL
28911: IFTRUE 28915
28913: GO 28926
28915: POP
// bc_type := b_bunker ; 27 :
28916: LD_ADDR_OWVAR 42
28920: PUSH
28921: LD_INT 32
28923: ST_TO_ADDR
28924: GO 29079
28926: LD_INT 27
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28945
28934: POP
// bc_type := b_turret ; 28 :
28935: LD_ADDR_OWVAR 42
28939: PUSH
28940: LD_INT 33
28942: ST_TO_ADDR
28943: GO 29079
28945: LD_INT 28
28947: DOUBLE
28948: EQUAL
28949: IFTRUE 28953
28951: GO 28964
28953: POP
// bc_type := b_armoury ; 29 :
28954: LD_ADDR_OWVAR 42
28958: PUSH
28959: LD_INT 4
28961: ST_TO_ADDR
28962: GO 29079
28964: LD_INT 29
28966: DOUBLE
28967: EQUAL
28968: IFTRUE 28972
28970: GO 28983
28972: POP
// bc_type := b_barracks ; 30 :
28973: LD_ADDR_OWVAR 42
28977: PUSH
28978: LD_INT 5
28980: ST_TO_ADDR
28981: GO 29079
28983: LD_INT 30
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 28991
28989: GO 29002
28991: POP
// bc_type := b_solar_power ; 31 :
28992: LD_ADDR_OWVAR 42
28996: PUSH
28997: LD_INT 27
28999: ST_TO_ADDR
29000: GO 29079
29002: LD_INT 31
29004: DOUBLE
29005: EQUAL
29006: IFTRUE 29010
29008: GO 29021
29010: POP
// bc_type := b_oil_power ; 32 :
29011: LD_ADDR_OWVAR 42
29015: PUSH
29016: LD_INT 26
29018: ST_TO_ADDR
29019: GO 29079
29021: LD_INT 32
29023: DOUBLE
29024: EQUAL
29025: IFTRUE 29029
29027: GO 29040
29029: POP
// bc_type := b_siberite_power ; 33 :
29030: LD_ADDR_OWVAR 42
29034: PUSH
29035: LD_INT 28
29037: ST_TO_ADDR
29038: GO 29079
29040: LD_INT 33
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29048
29046: GO 29059
29048: POP
// bc_type := b_oil_mine ; 34 :
29049: LD_ADDR_OWVAR 42
29053: PUSH
29054: LD_INT 29
29056: ST_TO_ADDR
29057: GO 29079
29059: LD_INT 34
29061: DOUBLE
29062: EQUAL
29063: IFTRUE 29067
29065: GO 29078
29067: POP
// bc_type := b_siberite_mine ; end ;
29068: LD_ADDR_OWVAR 42
29072: PUSH
29073: LD_INT 30
29075: ST_TO_ADDR
29076: GO 29079
29078: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29079: LD_ADDR_VAR 0 8
29083: PUSH
29084: LD_VAR 0 5
29088: PPUSH
29089: LD_VAR 0 6
29093: PPUSH
29094: LD_VAR 0 3
29098: PPUSH
29099: CALL_OW 47
29103: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29104: LD_OWVAR 42
29108: PUSH
29109: LD_INT 32
29111: PUSH
29112: LD_INT 33
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: IN
29119: IFFALSE 29135
// PlaceWeaponTurret ( b , weapon ) ;
29121: LD_VAR 0 8
29125: PPUSH
29126: LD_VAR 0 4
29130: PPUSH
29131: CALL_OW 431
// end ;
29135: LD_VAR 0 7
29139: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29140: LD_INT 0
29142: PPUSH
29143: PPUSH
29144: PPUSH
29145: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29146: LD_ADDR_VAR 0 4
29150: PUSH
29151: LD_INT 22
29153: PUSH
29154: LD_OWVAR 2
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: LD_INT 30
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 30
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PPUSH
29195: CALL_OW 69
29199: ST_TO_ADDR
// if not tmp then
29200: LD_VAR 0 4
29204: NOT
29205: IFFALSE 29209
// exit ;
29207: GO 29268
// for i in tmp do
29209: LD_ADDR_VAR 0 2
29213: PUSH
29214: LD_VAR 0 4
29218: PUSH
29219: FOR_IN
29220: IFFALSE 29266
// for j = 1 to 3 do
29222: LD_ADDR_VAR 0 3
29226: PUSH
29227: DOUBLE
29228: LD_INT 1
29230: DEC
29231: ST_TO_ADDR
29232: LD_INT 3
29234: PUSH
29235: FOR_TO
29236: IFFALSE 29262
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29238: LD_VAR 0 2
29242: PPUSH
29243: CALL_OW 274
29247: PPUSH
29248: LD_VAR 0 3
29252: PPUSH
29253: LD_INT 99999
29255: PPUSH
29256: CALL_OW 277
29260: GO 29235
29262: POP
29263: POP
29264: GO 29219
29266: POP
29267: POP
// end ;
29268: LD_VAR 0 1
29272: RET
// export function hHackSetLevel10 ; var i , j ; begin
29273: LD_INT 0
29275: PPUSH
29276: PPUSH
29277: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29278: LD_ADDR_VAR 0 2
29282: PUSH
29283: LD_INT 21
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PPUSH
29293: CALL_OW 69
29297: PUSH
29298: FOR_IN
29299: IFFALSE 29351
// if IsSelected ( i ) then
29301: LD_VAR 0 2
29305: PPUSH
29306: CALL_OW 306
29310: IFFALSE 29349
// begin for j := 1 to 4 do
29312: LD_ADDR_VAR 0 3
29316: PUSH
29317: DOUBLE
29318: LD_INT 1
29320: DEC
29321: ST_TO_ADDR
29322: LD_INT 4
29324: PUSH
29325: FOR_TO
29326: IFFALSE 29347
// SetSkill ( i , j , 10 ) ;
29328: LD_VAR 0 2
29332: PPUSH
29333: LD_VAR 0 3
29337: PPUSH
29338: LD_INT 10
29340: PPUSH
29341: CALL_OW 237
29345: GO 29325
29347: POP
29348: POP
// end ;
29349: GO 29298
29351: POP
29352: POP
// end ;
29353: LD_VAR 0 1
29357: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29358: LD_INT 0
29360: PPUSH
29361: PPUSH
29362: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: LD_INT 22
29370: PUSH
29371: LD_OWVAR 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 21
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PPUSH
29394: CALL_OW 69
29398: PUSH
29399: FOR_IN
29400: IFFALSE 29441
// begin for j := 1 to 4 do
29402: LD_ADDR_VAR 0 3
29406: PUSH
29407: DOUBLE
29408: LD_INT 1
29410: DEC
29411: ST_TO_ADDR
29412: LD_INT 4
29414: PUSH
29415: FOR_TO
29416: IFFALSE 29437
// SetSkill ( i , j , 10 ) ;
29418: LD_VAR 0 2
29422: PPUSH
29423: LD_VAR 0 3
29427: PPUSH
29428: LD_INT 10
29430: PPUSH
29431: CALL_OW 237
29435: GO 29415
29437: POP
29438: POP
// end ;
29439: GO 29399
29441: POP
29442: POP
// end ;
29443: LD_VAR 0 1
29447: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29448: LD_INT 0
29450: PPUSH
// uc_side := your_side ;
29451: LD_ADDR_OWVAR 20
29455: PUSH
29456: LD_OWVAR 2
29460: ST_TO_ADDR
// uc_nation := nation ;
29461: LD_ADDR_OWVAR 21
29465: PUSH
29466: LD_VAR 0 1
29470: ST_TO_ADDR
// InitHc ;
29471: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29475: LD_INT 0
29477: PPUSH
29478: LD_VAR 0 2
29482: PPUSH
29483: LD_VAR 0 3
29487: PPUSH
29488: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29492: LD_VAR 0 4
29496: PPUSH
29497: LD_VAR 0 5
29501: PPUSH
29502: CALL_OW 428
29506: PUSH
29507: LD_INT 0
29509: EQUAL
29510: IFFALSE 29534
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29512: CALL_OW 44
29516: PPUSH
29517: LD_VAR 0 4
29521: PPUSH
29522: LD_VAR 0 5
29526: PPUSH
29527: LD_INT 1
29529: PPUSH
29530: CALL_OW 48
// end ;
29534: LD_VAR 0 6
29538: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29539: LD_INT 0
29541: PPUSH
29542: PPUSH
// uc_side := your_side ;
29543: LD_ADDR_OWVAR 20
29547: PUSH
29548: LD_OWVAR 2
29552: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29553: LD_VAR 0 1
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: LD_INT 4
29569: PUSH
29570: LD_INT 5
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: IN
29580: IFFALSE 29592
// uc_nation := nation_american else
29582: LD_ADDR_OWVAR 21
29586: PUSH
29587: LD_INT 1
29589: ST_TO_ADDR
29590: GO 29635
// if chassis in [ 11 , 12 , 13 , 14 ] then
29592: LD_VAR 0 1
29596: PUSH
29597: LD_INT 11
29599: PUSH
29600: LD_INT 12
29602: PUSH
29603: LD_INT 13
29605: PUSH
29606: LD_INT 14
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: IN
29615: IFFALSE 29627
// uc_nation := nation_arabian else
29617: LD_ADDR_OWVAR 21
29621: PUSH
29622: LD_INT 2
29624: ST_TO_ADDR
29625: GO 29635
// uc_nation := nation_russian ;
29627: LD_ADDR_OWVAR 21
29631: PUSH
29632: LD_INT 3
29634: ST_TO_ADDR
// vc_chassis := chassis ;
29635: LD_ADDR_OWVAR 37
29639: PUSH
29640: LD_VAR 0 1
29644: ST_TO_ADDR
// vc_engine := engine ;
29645: LD_ADDR_OWVAR 39
29649: PUSH
29650: LD_VAR 0 2
29654: ST_TO_ADDR
// vc_control := control ;
29655: LD_ADDR_OWVAR 38
29659: PUSH
29660: LD_VAR 0 3
29664: ST_TO_ADDR
// vc_weapon := weapon ;
29665: LD_ADDR_OWVAR 40
29669: PUSH
29670: LD_VAR 0 4
29674: ST_TO_ADDR
// un := CreateVehicle ;
29675: LD_ADDR_VAR 0 8
29679: PUSH
29680: CALL_OW 45
29684: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29685: LD_VAR 0 8
29689: PPUSH
29690: LD_INT 0
29692: PPUSH
29693: LD_INT 5
29695: PPUSH
29696: CALL_OW 12
29700: PPUSH
29701: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29705: LD_VAR 0 8
29709: PPUSH
29710: LD_VAR 0 5
29714: PPUSH
29715: LD_VAR 0 6
29719: PPUSH
29720: LD_INT 1
29722: PPUSH
29723: CALL_OW 48
// end ;
29727: LD_VAR 0 7
29731: RET
// export hInvincible ; every 1 do
29732: GO 29734
29734: DISABLE
// hInvincible := [ ] ;
29735: LD_ADDR_EXP 98
29739: PUSH
29740: EMPTY
29741: ST_TO_ADDR
29742: END
// every 10 do var i ;
29743: GO 29745
29745: DISABLE
29746: LD_INT 0
29748: PPUSH
// begin enable ;
29749: ENABLE
// if not hInvincible then
29750: LD_EXP 98
29754: NOT
29755: IFFALSE 29759
// exit ;
29757: GO 29803
// for i in hInvincible do
29759: LD_ADDR_VAR 0 1
29763: PUSH
29764: LD_EXP 98
29768: PUSH
29769: FOR_IN
29770: IFFALSE 29801
// if GetLives ( i ) < 1000 then
29772: LD_VAR 0 1
29776: PPUSH
29777: CALL_OW 256
29781: PUSH
29782: LD_INT 1000
29784: LESS
29785: IFFALSE 29799
// SetLives ( i , 1000 ) ;
29787: LD_VAR 0 1
29791: PPUSH
29792: LD_INT 1000
29794: PPUSH
29795: CALL_OW 234
29799: GO 29769
29801: POP
29802: POP
// end ;
29803: PPOPN 1
29805: END
// export function hHackInvincible ; var i ; begin
29806: LD_INT 0
29808: PPUSH
29809: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29810: LD_ADDR_VAR 0 2
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: LD_INT 21
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 21
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: PPUSH
29843: CALL_OW 69
29847: PUSH
29848: FOR_IN
29849: IFFALSE 29910
// if IsSelected ( i ) then
29851: LD_VAR 0 2
29855: PPUSH
29856: CALL_OW 306
29860: IFFALSE 29908
// begin if i in hInvincible then
29862: LD_VAR 0 2
29866: PUSH
29867: LD_EXP 98
29871: IN
29872: IFFALSE 29892
// hInvincible := hInvincible diff i else
29874: LD_ADDR_EXP 98
29878: PUSH
29879: LD_EXP 98
29883: PUSH
29884: LD_VAR 0 2
29888: DIFF
29889: ST_TO_ADDR
29890: GO 29908
// hInvincible := hInvincible union i ;
29892: LD_ADDR_EXP 98
29896: PUSH
29897: LD_EXP 98
29901: PUSH
29902: LD_VAR 0 2
29906: UNION
29907: ST_TO_ADDR
// end ;
29908: GO 29848
29910: POP
29911: POP
// end ;
29912: LD_VAR 0 1
29916: RET
// export function hHackInvisible ; var i , j ; begin
29917: LD_INT 0
29919: PPUSH
29920: PPUSH
29921: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29922: LD_ADDR_VAR 0 2
29926: PUSH
29927: LD_INT 21
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PPUSH
29937: CALL_OW 69
29941: PUSH
29942: FOR_IN
29943: IFFALSE 29967
// if IsSelected ( i ) then
29945: LD_VAR 0 2
29949: PPUSH
29950: CALL_OW 306
29954: IFFALSE 29965
// ComForceInvisible ( i ) ;
29956: LD_VAR 0 2
29960: PPUSH
29961: CALL_OW 496
29965: GO 29942
29967: POP
29968: POP
// end ;
29969: LD_VAR 0 1
29973: RET
// export function hHackChangeYourSide ; begin
29974: LD_INT 0
29976: PPUSH
// if your_side = 8 then
29977: LD_OWVAR 2
29981: PUSH
29982: LD_INT 8
29984: EQUAL
29985: IFFALSE 29997
// your_side := 0 else
29987: LD_ADDR_OWVAR 2
29991: PUSH
29992: LD_INT 0
29994: ST_TO_ADDR
29995: GO 30011
// your_side := your_side + 1 ;
29997: LD_ADDR_OWVAR 2
30001: PUSH
30002: LD_OWVAR 2
30006: PUSH
30007: LD_INT 1
30009: PLUS
30010: ST_TO_ADDR
// end ;
30011: LD_VAR 0 1
30015: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30016: LD_INT 0
30018: PPUSH
30019: PPUSH
30020: PPUSH
// for i in all_units do
30021: LD_ADDR_VAR 0 2
30025: PUSH
30026: LD_OWVAR 3
30030: PUSH
30031: FOR_IN
30032: IFFALSE 30110
// if IsSelected ( i ) then
30034: LD_VAR 0 2
30038: PPUSH
30039: CALL_OW 306
30043: IFFALSE 30108
// begin j := GetSide ( i ) ;
30045: LD_ADDR_VAR 0 3
30049: PUSH
30050: LD_VAR 0 2
30054: PPUSH
30055: CALL_OW 255
30059: ST_TO_ADDR
// if j = 8 then
30060: LD_VAR 0 3
30064: PUSH
30065: LD_INT 8
30067: EQUAL
30068: IFFALSE 30080
// j := 0 else
30070: LD_ADDR_VAR 0 3
30074: PUSH
30075: LD_INT 0
30077: ST_TO_ADDR
30078: GO 30094
// j := j + 1 ;
30080: LD_ADDR_VAR 0 3
30084: PUSH
30085: LD_VAR 0 3
30089: PUSH
30090: LD_INT 1
30092: PLUS
30093: ST_TO_ADDR
// SetSide ( i , j ) ;
30094: LD_VAR 0 2
30098: PPUSH
30099: LD_VAR 0 3
30103: PPUSH
30104: CALL_OW 235
// end ;
30108: GO 30031
30110: POP
30111: POP
// end ;
30112: LD_VAR 0 1
30116: RET
// export function hHackFog ; begin
30117: LD_INT 0
30119: PPUSH
// FogOff ( true ) ;
30120: LD_INT 1
30122: PPUSH
30123: CALL_OW 344
// end ;
30127: LD_VAR 0 1
30131: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30132: LD_INT 0
30134: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30135: LD_VAR 0 1
30139: PPUSH
30140: LD_VAR 0 2
30144: PPUSH
30145: LD_VAR 0 3
30149: PPUSH
30150: LD_INT 1
30152: PPUSH
30153: LD_INT 1
30155: PPUSH
30156: CALL_OW 483
// CenterOnXY ( x , y ) ;
30160: LD_VAR 0 2
30164: PPUSH
30165: LD_VAR 0 3
30169: PPUSH
30170: CALL_OW 84
// end ;
30174: LD_VAR 0 4
30178: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30179: LD_INT 0
30181: PPUSH
30182: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30183: LD_VAR 0 1
30187: NOT
30188: PUSH
30189: LD_VAR 0 2
30193: PPUSH
30194: LD_VAR 0 3
30198: PPUSH
30199: CALL_OW 488
30203: NOT
30204: OR
30205: PUSH
30206: LD_VAR 0 1
30210: PPUSH
30211: CALL_OW 266
30215: PUSH
30216: LD_INT 3
30218: NONEQUAL
30219: PUSH
30220: LD_VAR 0 1
30224: PPUSH
30225: CALL_OW 247
30229: PUSH
30230: LD_INT 1
30232: EQUAL
30233: NOT
30234: AND
30235: OR
30236: IFFALSE 30240
// exit ;
30238: GO 30389
// if GetType ( factory ) = unit_human then
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL_OW 247
30249: PUSH
30250: LD_INT 1
30252: EQUAL
30253: IFFALSE 30270
// factory := IsInUnit ( factory ) ;
30255: LD_ADDR_VAR 0 1
30259: PUSH
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 310
30269: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 266
30279: PUSH
30280: LD_INT 3
30282: NONEQUAL
30283: IFFALSE 30287
// exit ;
30285: GO 30389
// if HexInfo ( x , y ) = factory then
30287: LD_VAR 0 2
30291: PPUSH
30292: LD_VAR 0 3
30296: PPUSH
30297: CALL_OW 428
30301: PUSH
30302: LD_VAR 0 1
30306: EQUAL
30307: IFFALSE 30334
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30309: LD_ADDR_EXP 99
30313: PUSH
30314: LD_EXP 99
30318: PPUSH
30319: LD_VAR 0 1
30323: PPUSH
30324: LD_INT 0
30326: PPUSH
30327: CALL_OW 1
30331: ST_TO_ADDR
30332: GO 30385
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30334: LD_ADDR_EXP 99
30338: PUSH
30339: LD_EXP 99
30343: PPUSH
30344: LD_VAR 0 1
30348: PPUSH
30349: LD_VAR 0 1
30353: PPUSH
30354: CALL_OW 255
30358: PUSH
30359: LD_VAR 0 1
30363: PUSH
30364: LD_VAR 0 2
30368: PUSH
30369: LD_VAR 0 3
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: PPUSH
30380: CALL_OW 1
30384: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30385: CALL 30394 0 0
// end ;
30389: LD_VAR 0 4
30393: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30394: LD_INT 0
30396: PPUSH
30397: PPUSH
30398: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30399: LD_STRING resetFactoryWaypoint();
30401: PPUSH
30402: CALL_OW 559
// if factoryWaypoints then
30406: LD_EXP 99
30410: IFFALSE 30536
// begin list := PrepareArray ( factoryWaypoints ) ;
30412: LD_ADDR_VAR 0 3
30416: PUSH
30417: LD_EXP 99
30421: PPUSH
30422: CALL 77833 0 1
30426: ST_TO_ADDR
// for i := 1 to list do
30427: LD_ADDR_VAR 0 2
30431: PUSH
30432: DOUBLE
30433: LD_INT 1
30435: DEC
30436: ST_TO_ADDR
30437: LD_VAR 0 3
30441: PUSH
30442: FOR_TO
30443: IFFALSE 30534
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30445: LD_STRING setFactoryWaypointXY(
30447: PUSH
30448: LD_VAR 0 3
30452: PUSH
30453: LD_VAR 0 2
30457: ARRAY
30458: PUSH
30459: LD_INT 1
30461: ARRAY
30462: STR
30463: PUSH
30464: LD_STRING ,
30466: STR
30467: PUSH
30468: LD_VAR 0 3
30472: PUSH
30473: LD_VAR 0 2
30477: ARRAY
30478: PUSH
30479: LD_INT 2
30481: ARRAY
30482: STR
30483: PUSH
30484: LD_STRING ,
30486: STR
30487: PUSH
30488: LD_VAR 0 3
30492: PUSH
30493: LD_VAR 0 2
30497: ARRAY
30498: PUSH
30499: LD_INT 3
30501: ARRAY
30502: STR
30503: PUSH
30504: LD_STRING ,
30506: STR
30507: PUSH
30508: LD_VAR 0 3
30512: PUSH
30513: LD_VAR 0 2
30517: ARRAY
30518: PUSH
30519: LD_INT 4
30521: ARRAY
30522: STR
30523: PUSH
30524: LD_STRING )
30526: STR
30527: PPUSH
30528: CALL_OW 559
30532: GO 30442
30534: POP
30535: POP
// end ; end ;
30536: LD_VAR 0 1
30540: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30541: LD_INT 0
30543: PPUSH
// if HexInfo ( x , y ) = warehouse then
30544: LD_VAR 0 2
30548: PPUSH
30549: LD_VAR 0 3
30553: PPUSH
30554: CALL_OW 428
30558: PUSH
30559: LD_VAR 0 1
30563: EQUAL
30564: IFFALSE 30591
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30566: LD_ADDR_EXP 100
30570: PUSH
30571: LD_EXP 100
30575: PPUSH
30576: LD_VAR 0 1
30580: PPUSH
30581: LD_INT 0
30583: PPUSH
30584: CALL_OW 1
30588: ST_TO_ADDR
30589: GO 30642
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30591: LD_ADDR_EXP 100
30595: PUSH
30596: LD_EXP 100
30600: PPUSH
30601: LD_VAR 0 1
30605: PPUSH
30606: LD_VAR 0 1
30610: PPUSH
30611: CALL_OW 255
30615: PUSH
30616: LD_VAR 0 1
30620: PUSH
30621: LD_VAR 0 2
30625: PUSH
30626: LD_VAR 0 3
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: PPUSH
30637: CALL_OW 1
30641: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30642: CALL 30651 0 0
// end ;
30646: LD_VAR 0 4
30650: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30651: LD_INT 0
30653: PPUSH
30654: PPUSH
30655: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30656: LD_STRING resetWarehouseGatheringPoints();
30658: PPUSH
30659: CALL_OW 559
// if warehouseGatheringPoints then
30663: LD_EXP 100
30667: IFFALSE 30793
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_EXP 100
30678: PPUSH
30679: CALL 77833 0 1
30683: ST_TO_ADDR
// for i := 1 to list do
30684: LD_ADDR_VAR 0 2
30688: PUSH
30689: DOUBLE
30690: LD_INT 1
30692: DEC
30693: ST_TO_ADDR
30694: LD_VAR 0 3
30698: PUSH
30699: FOR_TO
30700: IFFALSE 30791
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30702: LD_STRING setWarehouseGatheringPointXY(
30704: PUSH
30705: LD_VAR 0 3
30709: PUSH
30710: LD_VAR 0 2
30714: ARRAY
30715: PUSH
30716: LD_INT 1
30718: ARRAY
30719: STR
30720: PUSH
30721: LD_STRING ,
30723: STR
30724: PUSH
30725: LD_VAR 0 3
30729: PUSH
30730: LD_VAR 0 2
30734: ARRAY
30735: PUSH
30736: LD_INT 2
30738: ARRAY
30739: STR
30740: PUSH
30741: LD_STRING ,
30743: STR
30744: PUSH
30745: LD_VAR 0 3
30749: PUSH
30750: LD_VAR 0 2
30754: ARRAY
30755: PUSH
30756: LD_INT 3
30758: ARRAY
30759: STR
30760: PUSH
30761: LD_STRING ,
30763: STR
30764: PUSH
30765: LD_VAR 0 3
30769: PUSH
30770: LD_VAR 0 2
30774: ARRAY
30775: PUSH
30776: LD_INT 4
30778: ARRAY
30779: STR
30780: PUSH
30781: LD_STRING )
30783: STR
30784: PPUSH
30785: CALL_OW 559
30789: GO 30699
30791: POP
30792: POP
// end ; end ;
30793: LD_VAR 0 1
30797: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30798: LD_EXP 100
30802: IFFALSE 31487
30804: GO 30806
30806: DISABLE
30807: LD_INT 0
30809: PPUSH
30810: PPUSH
30811: PPUSH
30812: PPUSH
30813: PPUSH
30814: PPUSH
30815: PPUSH
30816: PPUSH
30817: PPUSH
// begin enable ;
30818: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30819: LD_ADDR_VAR 0 3
30823: PUSH
30824: LD_EXP 100
30828: PPUSH
30829: CALL 77833 0 1
30833: ST_TO_ADDR
// if not list then
30834: LD_VAR 0 3
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 31487
// for i := 1 to list do
30843: LD_ADDR_VAR 0 1
30847: PUSH
30848: DOUBLE
30849: LD_INT 1
30851: DEC
30852: ST_TO_ADDR
30853: LD_VAR 0 3
30857: PUSH
30858: FOR_TO
30859: IFFALSE 31485
// begin depot := list [ i ] [ 2 ] ;
30861: LD_ADDR_VAR 0 8
30865: PUSH
30866: LD_VAR 0 3
30870: PUSH
30871: LD_VAR 0 1
30875: ARRAY
30876: PUSH
30877: LD_INT 2
30879: ARRAY
30880: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30881: LD_ADDR_VAR 0 5
30885: PUSH
30886: LD_VAR 0 3
30890: PUSH
30891: LD_VAR 0 1
30895: ARRAY
30896: PUSH
30897: LD_INT 1
30899: ARRAY
30900: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30901: LD_VAR 0 8
30905: PPUSH
30906: CALL_OW 301
30910: PUSH
30911: LD_VAR 0 5
30915: PUSH
30916: LD_VAR 0 8
30920: PPUSH
30921: CALL_OW 255
30925: NONEQUAL
30926: OR
30927: IFFALSE 30956
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30929: LD_ADDR_EXP 100
30933: PUSH
30934: LD_EXP 100
30938: PPUSH
30939: LD_VAR 0 8
30943: PPUSH
30944: LD_INT 0
30946: PPUSH
30947: CALL_OW 1
30951: ST_TO_ADDR
// exit ;
30952: POP
30953: POP
30954: GO 31487
// end ; x := list [ i ] [ 3 ] ;
30956: LD_ADDR_VAR 0 6
30960: PUSH
30961: LD_VAR 0 3
30965: PUSH
30966: LD_VAR 0 1
30970: ARRAY
30971: PUSH
30972: LD_INT 3
30974: ARRAY
30975: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30976: LD_ADDR_VAR 0 7
30980: PUSH
30981: LD_VAR 0 3
30985: PUSH
30986: LD_VAR 0 1
30990: ARRAY
30991: PUSH
30992: LD_INT 4
30994: ARRAY
30995: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30996: LD_ADDR_VAR 0 9
31000: PUSH
31001: LD_VAR 0 6
31005: PPUSH
31006: LD_VAR 0 7
31010: PPUSH
31011: LD_INT 16
31013: PPUSH
31014: CALL 76421 0 3
31018: ST_TO_ADDR
// if not cratesNearbyPoint then
31019: LD_VAR 0 9
31023: NOT
31024: IFFALSE 31030
// exit ;
31026: POP
31027: POP
31028: GO 31487
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31030: LD_ADDR_VAR 0 4
31034: PUSH
31035: LD_INT 22
31037: PUSH
31038: LD_VAR 0 5
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 3
31049: PUSH
31050: LD_INT 60
31052: PUSH
31053: EMPTY
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 91
31062: PUSH
31063: LD_VAR 0 8
31067: PUSH
31068: LD_INT 6
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 2
31078: PUSH
31079: LD_INT 25
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 25
31091: PUSH
31092: LD_INT 16
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: PPUSH
31110: CALL_OW 69
31114: PUSH
31115: LD_VAR 0 8
31119: PPUSH
31120: CALL_OW 313
31124: PPUSH
31125: LD_INT 3
31127: PUSH
31128: LD_INT 60
31130: PUSH
31131: EMPTY
31132: LIST
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: PUSH
31141: LD_INT 25
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 25
31153: PUSH
31154: LD_INT 16
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PPUSH
31170: CALL_OW 72
31174: UNION
31175: ST_TO_ADDR
// if tmp then
31176: LD_VAR 0 4
31180: IFFALSE 31260
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31182: LD_ADDR_VAR 0 4
31186: PUSH
31187: LD_VAR 0 4
31191: PPUSH
31192: LD_INT 3
31194: PPUSH
31195: CALL 74390 0 2
31199: ST_TO_ADDR
// for j in tmp do
31200: LD_ADDR_VAR 0 2
31204: PUSH
31205: LD_VAR 0 4
31209: PUSH
31210: FOR_IN
31211: IFFALSE 31254
// begin if IsInUnit ( j ) then
31213: LD_VAR 0 2
31217: PPUSH
31218: CALL_OW 310
31222: IFFALSE 31233
// ComExit ( j ) ;
31224: LD_VAR 0 2
31228: PPUSH
31229: CALL 74473 0 1
// AddComCollect ( j , x , y ) ;
31233: LD_VAR 0 2
31237: PPUSH
31238: LD_VAR 0 6
31242: PPUSH
31243: LD_VAR 0 7
31247: PPUSH
31248: CALL_OW 177
// end ;
31252: GO 31210
31254: POP
31255: POP
// exit ;
31256: POP
31257: POP
31258: GO 31487
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31260: LD_ADDR_VAR 0 4
31264: PUSH
31265: LD_INT 22
31267: PUSH
31268: LD_VAR 0 5
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 91
31279: PUSH
31280: LD_VAR 0 8
31284: PUSH
31285: LD_INT 8
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 34
31298: PUSH
31299: LD_INT 12
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 34
31308: PUSH
31309: LD_INT 51
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 34
31318: PUSH
31319: LD_INT 32
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 34
31328: PUSH
31329: LD_INT 89
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: PPUSH
31348: CALL_OW 69
31352: ST_TO_ADDR
// if tmp then
31353: LD_VAR 0 4
31357: IFFALSE 31483
// begin for j in tmp do
31359: LD_ADDR_VAR 0 2
31363: PUSH
31364: LD_VAR 0 4
31368: PUSH
31369: FOR_IN
31370: IFFALSE 31481
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31372: LD_VAR 0 2
31376: PPUSH
31377: CALL_OW 262
31381: PUSH
31382: LD_INT 3
31384: EQUAL
31385: PUSH
31386: LD_VAR 0 2
31390: PPUSH
31391: CALL_OW 261
31395: PUSH
31396: LD_INT 20
31398: GREATER
31399: OR
31400: PUSH
31401: LD_VAR 0 2
31405: PPUSH
31406: CALL_OW 314
31410: NOT
31411: AND
31412: PUSH
31413: LD_VAR 0 2
31417: PPUSH
31418: CALL_OW 263
31422: PUSH
31423: LD_INT 1
31425: NONEQUAL
31426: PUSH
31427: LD_VAR 0 2
31431: PPUSH
31432: CALL_OW 311
31436: OR
31437: AND
31438: IFFALSE 31479
// begin ComCollect ( j , x , y ) ;
31440: LD_VAR 0 2
31444: PPUSH
31445: LD_VAR 0 6
31449: PPUSH
31450: LD_VAR 0 7
31454: PPUSH
31455: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31459: LD_VAR 0 2
31463: PPUSH
31464: LD_VAR 0 8
31468: PPUSH
31469: CALL_OW 172
// exit ;
31473: POP
31474: POP
31475: POP
31476: POP
31477: GO 31487
// end ;
31479: GO 31369
31481: POP
31482: POP
// end ; end ;
31483: GO 30858
31485: POP
31486: POP
// end ; end_of_file
31487: PPOPN 9
31489: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31490: LD_INT 0
31492: PPUSH
31493: PPUSH
31494: PPUSH
31495: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31496: LD_VAR 0 1
31500: PPUSH
31501: CALL_OW 264
31505: PUSH
31506: LD_INT 91
31508: EQUAL
31509: IFFALSE 31581
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31511: LD_INT 68
31513: PPUSH
31514: LD_VAR 0 1
31518: PPUSH
31519: CALL_OW 255
31523: PPUSH
31524: CALL_OW 321
31528: PUSH
31529: LD_INT 2
31531: EQUAL
31532: IFFALSE 31544
// eff := 70 else
31534: LD_ADDR_VAR 0 4
31538: PUSH
31539: LD_INT 70
31541: ST_TO_ADDR
31542: GO 31552
// eff := 30 ;
31544: LD_ADDR_VAR 0 4
31548: PUSH
31549: LD_INT 30
31551: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31552: LD_VAR 0 1
31556: PPUSH
31557: CALL_OW 250
31561: PPUSH
31562: LD_VAR 0 1
31566: PPUSH
31567: CALL_OW 251
31571: PPUSH
31572: LD_VAR 0 4
31576: PPUSH
31577: CALL_OW 495
// end ; end ;
31581: LD_VAR 0 2
31585: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31586: LD_INT 0
31588: PPUSH
// end ;
31589: LD_VAR 0 4
31593: RET
// export function SOS_Command ( cmd ) ; begin
31594: LD_INT 0
31596: PPUSH
// end ;
31597: LD_VAR 0 2
31601: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31602: LD_INT 0
31604: PPUSH
// end ;
31605: LD_VAR 0 6
31609: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31610: LD_INT 0
31612: PPUSH
31613: PPUSH
// if not vehicle or not factory then
31614: LD_VAR 0 1
31618: NOT
31619: PUSH
31620: LD_VAR 0 2
31624: NOT
31625: OR
31626: IFFALSE 31630
// exit ;
31628: GO 31861
// if factoryWaypoints >= factory then
31630: LD_EXP 99
31634: PUSH
31635: LD_VAR 0 2
31639: GREATEREQUAL
31640: IFFALSE 31861
// if factoryWaypoints [ factory ] then
31642: LD_EXP 99
31646: PUSH
31647: LD_VAR 0 2
31651: ARRAY
31652: IFFALSE 31861
// begin if GetControl ( vehicle ) = control_manual then
31654: LD_VAR 0 1
31658: PPUSH
31659: CALL_OW 263
31663: PUSH
31664: LD_INT 1
31666: EQUAL
31667: IFFALSE 31748
// begin driver := IsDrivenBy ( vehicle ) ;
31669: LD_ADDR_VAR 0 4
31673: PUSH
31674: LD_VAR 0 1
31678: PPUSH
31679: CALL_OW 311
31683: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31684: LD_VAR 0 4
31688: PPUSH
31689: LD_EXP 99
31693: PUSH
31694: LD_VAR 0 2
31698: ARRAY
31699: PUSH
31700: LD_INT 3
31702: ARRAY
31703: PPUSH
31704: LD_EXP 99
31708: PUSH
31709: LD_VAR 0 2
31713: ARRAY
31714: PUSH
31715: LD_INT 4
31717: ARRAY
31718: PPUSH
31719: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31723: LD_VAR 0 4
31727: PPUSH
31728: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31732: LD_VAR 0 4
31736: PPUSH
31737: LD_VAR 0 2
31741: PPUSH
31742: CALL_OW 180
// end else
31746: GO 31861
// if GetControl ( vehicle ) = control_remote then
31748: LD_VAR 0 1
31752: PPUSH
31753: CALL_OW 263
31757: PUSH
31758: LD_INT 2
31760: EQUAL
31761: IFFALSE 31822
// begin wait ( 0 0$2 ) ;
31763: LD_INT 70
31765: PPUSH
31766: CALL_OW 67
// if Connect ( vehicle ) then
31770: LD_VAR 0 1
31774: PPUSH
31775: CALL 44692 0 1
31779: IFFALSE 31820
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31781: LD_VAR 0 1
31785: PPUSH
31786: LD_EXP 99
31790: PUSH
31791: LD_VAR 0 2
31795: ARRAY
31796: PUSH
31797: LD_INT 3
31799: ARRAY
31800: PPUSH
31801: LD_EXP 99
31805: PUSH
31806: LD_VAR 0 2
31810: ARRAY
31811: PUSH
31812: LD_INT 4
31814: ARRAY
31815: PPUSH
31816: CALL_OW 171
// end else
31820: GO 31861
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31822: LD_VAR 0 1
31826: PPUSH
31827: LD_EXP 99
31831: PUSH
31832: LD_VAR 0 2
31836: ARRAY
31837: PUSH
31838: LD_INT 3
31840: ARRAY
31841: PPUSH
31842: LD_EXP 99
31846: PUSH
31847: LD_VAR 0 2
31851: ARRAY
31852: PUSH
31853: LD_INT 4
31855: ARRAY
31856: PPUSH
31857: CALL_OW 171
// end ; end ;
31861: LD_VAR 0 3
31865: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31866: LD_INT 0
31868: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31869: LD_VAR 0 1
31873: PUSH
31874: LD_INT 250
31876: EQUAL
31877: PUSH
31878: LD_VAR 0 2
31882: PPUSH
31883: CALL_OW 264
31887: PUSH
31888: LD_INT 81
31890: EQUAL
31891: AND
31892: IFFALSE 31913
// MinerPlaceMine ( unit , x , y ) ;
31894: LD_VAR 0 2
31898: PPUSH
31899: LD_VAR 0 4
31903: PPUSH
31904: LD_VAR 0 5
31908: PPUSH
31909: CALL 34903 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31913: LD_VAR 0 1
31917: PUSH
31918: LD_INT 251
31920: EQUAL
31921: PUSH
31922: LD_VAR 0 2
31926: PPUSH
31927: CALL_OW 264
31931: PUSH
31932: LD_INT 81
31934: EQUAL
31935: AND
31936: IFFALSE 31957
// MinerDetonateMine ( unit , x , y ) ;
31938: LD_VAR 0 2
31942: PPUSH
31943: LD_VAR 0 4
31947: PPUSH
31948: LD_VAR 0 5
31952: PPUSH
31953: CALL 35178 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31957: LD_VAR 0 1
31961: PUSH
31962: LD_INT 252
31964: EQUAL
31965: PUSH
31966: LD_VAR 0 2
31970: PPUSH
31971: CALL_OW 264
31975: PUSH
31976: LD_INT 81
31978: EQUAL
31979: AND
31980: IFFALSE 32001
// MinerCreateMinefield ( unit , x , y ) ;
31982: LD_VAR 0 2
31986: PPUSH
31987: LD_VAR 0 4
31991: PPUSH
31992: LD_VAR 0 5
31996: PPUSH
31997: CALL 35595 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32001: LD_VAR 0 1
32005: PUSH
32006: LD_INT 253
32008: EQUAL
32009: PUSH
32010: LD_VAR 0 2
32014: PPUSH
32015: CALL_OW 257
32019: PUSH
32020: LD_INT 5
32022: EQUAL
32023: AND
32024: IFFALSE 32045
// ComBinocular ( unit , x , y ) ;
32026: LD_VAR 0 2
32030: PPUSH
32031: LD_VAR 0 4
32035: PPUSH
32036: LD_VAR 0 5
32040: PPUSH
32041: CALL 35964 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32045: LD_VAR 0 1
32049: PUSH
32050: LD_INT 254
32052: EQUAL
32053: PUSH
32054: LD_VAR 0 2
32058: PPUSH
32059: CALL_OW 264
32063: PUSH
32064: LD_INT 99
32066: EQUAL
32067: AND
32068: PUSH
32069: LD_VAR 0 3
32073: PPUSH
32074: CALL_OW 263
32078: PUSH
32079: LD_INT 3
32081: EQUAL
32082: AND
32083: IFFALSE 32099
// HackDestroyVehicle ( unit , selectedUnit ) ;
32085: LD_VAR 0 2
32089: PPUSH
32090: LD_VAR 0 3
32094: PPUSH
32095: CALL 34267 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32099: LD_VAR 0 1
32103: PUSH
32104: LD_INT 255
32106: EQUAL
32107: PUSH
32108: LD_VAR 0 2
32112: PPUSH
32113: CALL_OW 264
32117: PUSH
32118: LD_INT 14
32120: PUSH
32121: LD_INT 53
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: IN
32128: AND
32129: PUSH
32130: LD_VAR 0 4
32134: PPUSH
32135: LD_VAR 0 5
32139: PPUSH
32140: CALL_OW 488
32144: AND
32145: IFFALSE 32169
// CutTreeXYR ( unit , x , y , 12 ) ;
32147: LD_VAR 0 2
32151: PPUSH
32152: LD_VAR 0 4
32156: PPUSH
32157: LD_VAR 0 5
32161: PPUSH
32162: LD_INT 12
32164: PPUSH
32165: CALL 32264 0 4
// if cmd = 256 then
32169: LD_VAR 0 1
32173: PUSH
32174: LD_INT 256
32176: EQUAL
32177: IFFALSE 32198
// SetFactoryWaypoint ( unit , x , y ) ;
32179: LD_VAR 0 2
32183: PPUSH
32184: LD_VAR 0 4
32188: PPUSH
32189: LD_VAR 0 5
32193: PPUSH
32194: CALL 30179 0 3
// if cmd = 257 then
32198: LD_VAR 0 1
32202: PUSH
32203: LD_INT 257
32205: EQUAL
32206: IFFALSE 32227
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32208: LD_VAR 0 2
32212: PPUSH
32213: LD_VAR 0 4
32217: PPUSH
32218: LD_VAR 0 5
32222: PPUSH
32223: CALL 30541 0 3
// if cmd = 258 then
32227: LD_VAR 0 1
32231: PUSH
32232: LD_INT 258
32234: EQUAL
32235: IFFALSE 32259
// BurnTreeXYR ( unit , x , y , 8 ) ;
32237: LD_VAR 0 2
32241: PPUSH
32242: LD_VAR 0 4
32246: PPUSH
32247: LD_VAR 0 5
32251: PPUSH
32252: LD_INT 8
32254: PPUSH
32255: CALL 32658 0 4
// end ;
32259: LD_VAR 0 6
32263: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32264: LD_INT 0
32266: PPUSH
32267: PPUSH
32268: PPUSH
32269: PPUSH
32270: PPUSH
32271: PPUSH
32272: PPUSH
32273: PPUSH
32274: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 302
32284: NOT
32285: PUSH
32286: LD_VAR 0 2
32290: PPUSH
32291: LD_VAR 0 3
32295: PPUSH
32296: CALL_OW 488
32300: NOT
32301: OR
32302: PUSH
32303: LD_VAR 0 4
32307: NOT
32308: OR
32309: IFFALSE 32313
// exit ;
32311: GO 32653
// list := [ ] ;
32313: LD_ADDR_VAR 0 13
32317: PUSH
32318: EMPTY
32319: ST_TO_ADDR
// if x - r < 0 then
32320: LD_VAR 0 2
32324: PUSH
32325: LD_VAR 0 4
32329: MINUS
32330: PUSH
32331: LD_INT 0
32333: LESS
32334: IFFALSE 32346
// min_x := 0 else
32336: LD_ADDR_VAR 0 7
32340: PUSH
32341: LD_INT 0
32343: ST_TO_ADDR
32344: GO 32362
// min_x := x - r ;
32346: LD_ADDR_VAR 0 7
32350: PUSH
32351: LD_VAR 0 2
32355: PUSH
32356: LD_VAR 0 4
32360: MINUS
32361: ST_TO_ADDR
// if y - r < 0 then
32362: LD_VAR 0 3
32366: PUSH
32367: LD_VAR 0 4
32371: MINUS
32372: PUSH
32373: LD_INT 0
32375: LESS
32376: IFFALSE 32388
// min_y := 0 else
32378: LD_ADDR_VAR 0 8
32382: PUSH
32383: LD_INT 0
32385: ST_TO_ADDR
32386: GO 32404
// min_y := y - r ;
32388: LD_ADDR_VAR 0 8
32392: PUSH
32393: LD_VAR 0 3
32397: PUSH
32398: LD_VAR 0 4
32402: MINUS
32403: ST_TO_ADDR
// max_x := x + r ;
32404: LD_ADDR_VAR 0 9
32408: PUSH
32409: LD_VAR 0 2
32413: PUSH
32414: LD_VAR 0 4
32418: PLUS
32419: ST_TO_ADDR
// max_y := y + r ;
32420: LD_ADDR_VAR 0 10
32424: PUSH
32425: LD_VAR 0 3
32429: PUSH
32430: LD_VAR 0 4
32434: PLUS
32435: ST_TO_ADDR
// for _x = min_x to max_x do
32436: LD_ADDR_VAR 0 11
32440: PUSH
32441: DOUBLE
32442: LD_VAR 0 7
32446: DEC
32447: ST_TO_ADDR
32448: LD_VAR 0 9
32452: PUSH
32453: FOR_TO
32454: IFFALSE 32571
// for _y = min_y to max_y do
32456: LD_ADDR_VAR 0 12
32460: PUSH
32461: DOUBLE
32462: LD_VAR 0 8
32466: DEC
32467: ST_TO_ADDR
32468: LD_VAR 0 10
32472: PUSH
32473: FOR_TO
32474: IFFALSE 32567
// begin if not ValidHex ( _x , _y ) then
32476: LD_VAR 0 11
32480: PPUSH
32481: LD_VAR 0 12
32485: PPUSH
32486: CALL_OW 488
32490: NOT
32491: IFFALSE 32495
// continue ;
32493: GO 32473
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32495: LD_VAR 0 11
32499: PPUSH
32500: LD_VAR 0 12
32504: PPUSH
32505: CALL_OW 351
32509: PUSH
32510: LD_VAR 0 11
32514: PPUSH
32515: LD_VAR 0 12
32519: PPUSH
32520: CALL_OW 554
32524: AND
32525: IFFALSE 32565
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32527: LD_ADDR_VAR 0 13
32531: PUSH
32532: LD_VAR 0 13
32536: PPUSH
32537: LD_VAR 0 13
32541: PUSH
32542: LD_INT 1
32544: PLUS
32545: PPUSH
32546: LD_VAR 0 11
32550: PUSH
32551: LD_VAR 0 12
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PPUSH
32560: CALL_OW 2
32564: ST_TO_ADDR
// end ;
32565: GO 32473
32567: POP
32568: POP
32569: GO 32453
32571: POP
32572: POP
// if not list then
32573: LD_VAR 0 13
32577: NOT
32578: IFFALSE 32582
// exit ;
32580: GO 32653
// for i in list do
32582: LD_ADDR_VAR 0 6
32586: PUSH
32587: LD_VAR 0 13
32591: PUSH
32592: FOR_IN
32593: IFFALSE 32651
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32595: LD_VAR 0 1
32599: PPUSH
32600: LD_STRING M
32602: PUSH
32603: LD_VAR 0 6
32607: PUSH
32608: LD_INT 1
32610: ARRAY
32611: PUSH
32612: LD_VAR 0 6
32616: PUSH
32617: LD_INT 2
32619: ARRAY
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: PUSH
32642: EMPTY
32643: LIST
32644: PPUSH
32645: CALL_OW 447
32649: GO 32592
32651: POP
32652: POP
// end ;
32653: LD_VAR 0 5
32657: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
32658: LD_INT 0
32660: PPUSH
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
32667: PPUSH
32668: PPUSH
32669: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
32670: LD_VAR 0 1
32674: PPUSH
32675: CALL_OW 302
32679: NOT
32680: PUSH
32681: LD_VAR 0 2
32685: PPUSH
32686: LD_VAR 0 3
32690: PPUSH
32691: CALL_OW 488
32695: NOT
32696: OR
32697: PUSH
32698: LD_VAR 0 4
32702: NOT
32703: OR
32704: IFFALSE 32708
// exit ;
32706: GO 33221
// list := [ ] ;
32708: LD_ADDR_VAR 0 13
32712: PUSH
32713: EMPTY
32714: ST_TO_ADDR
// if x - r < 0 then
32715: LD_VAR 0 2
32719: PUSH
32720: LD_VAR 0 4
32724: MINUS
32725: PUSH
32726: LD_INT 0
32728: LESS
32729: IFFALSE 32741
// min_x := 0 else
32731: LD_ADDR_VAR 0 7
32735: PUSH
32736: LD_INT 0
32738: ST_TO_ADDR
32739: GO 32757
// min_x := x - r ;
32741: LD_ADDR_VAR 0 7
32745: PUSH
32746: LD_VAR 0 2
32750: PUSH
32751: LD_VAR 0 4
32755: MINUS
32756: ST_TO_ADDR
// if y - r < 0 then
32757: LD_VAR 0 3
32761: PUSH
32762: LD_VAR 0 4
32766: MINUS
32767: PUSH
32768: LD_INT 0
32770: LESS
32771: IFFALSE 32783
// min_y := 0 else
32773: LD_ADDR_VAR 0 8
32777: PUSH
32778: LD_INT 0
32780: ST_TO_ADDR
32781: GO 32799
// min_y := y - r ;
32783: LD_ADDR_VAR 0 8
32787: PUSH
32788: LD_VAR 0 3
32792: PUSH
32793: LD_VAR 0 4
32797: MINUS
32798: ST_TO_ADDR
// max_x := x + r ;
32799: LD_ADDR_VAR 0 9
32803: PUSH
32804: LD_VAR 0 2
32808: PUSH
32809: LD_VAR 0 4
32813: PLUS
32814: ST_TO_ADDR
// max_y := y + r ;
32815: LD_ADDR_VAR 0 10
32819: PUSH
32820: LD_VAR 0 3
32824: PUSH
32825: LD_VAR 0 4
32829: PLUS
32830: ST_TO_ADDR
// for _x = min_x to max_x do
32831: LD_ADDR_VAR 0 11
32835: PUSH
32836: DOUBLE
32837: LD_VAR 0 7
32841: DEC
32842: ST_TO_ADDR
32843: LD_VAR 0 9
32847: PUSH
32848: FOR_TO
32849: IFFALSE 32966
// for _y = min_y to max_y do
32851: LD_ADDR_VAR 0 12
32855: PUSH
32856: DOUBLE
32857: LD_VAR 0 8
32861: DEC
32862: ST_TO_ADDR
32863: LD_VAR 0 10
32867: PUSH
32868: FOR_TO
32869: IFFALSE 32962
// begin if not ValidHex ( _x , _y ) then
32871: LD_VAR 0 11
32875: PPUSH
32876: LD_VAR 0 12
32880: PPUSH
32881: CALL_OW 488
32885: NOT
32886: IFFALSE 32890
// continue ;
32888: GO 32868
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32890: LD_VAR 0 11
32894: PPUSH
32895: LD_VAR 0 12
32899: PPUSH
32900: CALL_OW 351
32904: PUSH
32905: LD_VAR 0 11
32909: PPUSH
32910: LD_VAR 0 12
32914: PPUSH
32915: CALL_OW 554
32919: AND
32920: IFFALSE 32960
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32922: LD_ADDR_VAR 0 13
32926: PUSH
32927: LD_VAR 0 13
32931: PPUSH
32932: LD_VAR 0 13
32936: PUSH
32937: LD_INT 1
32939: PLUS
32940: PPUSH
32941: LD_VAR 0 11
32945: PUSH
32946: LD_VAR 0 12
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PPUSH
32955: CALL_OW 2
32959: ST_TO_ADDR
// end ;
32960: GO 32868
32962: POP
32963: POP
32964: GO 32848
32966: POP
32967: POP
// if not list then
32968: LD_VAR 0 13
32972: NOT
32973: IFFALSE 32977
// exit ;
32975: GO 33221
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
32977: LD_ADDR_VAR 0 13
32981: PUSH
32982: LD_VAR 0 1
32986: PPUSH
32987: LD_VAR 0 13
32991: PPUSH
32992: LD_INT 1
32994: PPUSH
32995: LD_INT 1
32997: PPUSH
32998: CALL 41834 0 4
33002: ST_TO_ADDR
// ComStop ( flame ) ;
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 141
// for i in list do
33012: LD_ADDR_VAR 0 6
33016: PUSH
33017: LD_VAR 0 13
33021: PUSH
33022: FOR_IN
33023: IFFALSE 33054
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
33025: LD_VAR 0 1
33029: PPUSH
33030: LD_VAR 0 6
33034: PUSH
33035: LD_INT 1
33037: ARRAY
33038: PPUSH
33039: LD_VAR 0 6
33043: PUSH
33044: LD_INT 2
33046: ARRAY
33047: PPUSH
33048: CALL_OW 176
33052: GO 33022
33054: POP
33055: POP
// repeat wait ( 0 0$1 ) ;
33056: LD_INT 35
33058: PPUSH
33059: CALL_OW 67
// task := GetTaskList ( flame ) ;
33063: LD_ADDR_VAR 0 14
33067: PUSH
33068: LD_VAR 0 1
33072: PPUSH
33073: CALL_OW 437
33077: ST_TO_ADDR
// if not task then
33078: LD_VAR 0 14
33082: NOT
33083: IFFALSE 33087
// exit ;
33085: GO 33221
// if task [ 1 ] [ 1 ] <> | then
33087: LD_VAR 0 14
33091: PUSH
33092: LD_INT 1
33094: ARRAY
33095: PUSH
33096: LD_INT 1
33098: ARRAY
33099: PUSH
33100: LD_STRING |
33102: NONEQUAL
33103: IFFALSE 33107
// exit ;
33105: GO 33221
// _x := task [ 1 ] [ 2 ] ;
33107: LD_ADDR_VAR 0 11
33111: PUSH
33112: LD_VAR 0 14
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: PUSH
33121: LD_INT 2
33123: ARRAY
33124: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
33125: LD_ADDR_VAR 0 12
33129: PUSH
33130: LD_VAR 0 14
33134: PUSH
33135: LD_INT 1
33137: ARRAY
33138: PUSH
33139: LD_INT 3
33141: ARRAY
33142: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
33143: LD_VAR 0 11
33147: PPUSH
33148: LD_VAR 0 12
33152: PPUSH
33153: CALL_OW 351
33157: NOT
33158: PUSH
33159: LD_VAR 0 11
33163: PPUSH
33164: LD_VAR 0 12
33168: PPUSH
33169: CALL_OW 554
33173: NOT
33174: OR
33175: IFFALSE 33209
// begin task := Delete ( task , 1 ) ;
33177: LD_ADDR_VAR 0 14
33181: PUSH
33182: LD_VAR 0 14
33186: PPUSH
33187: LD_INT 1
33189: PPUSH
33190: CALL_OW 3
33194: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
33195: LD_VAR 0 1
33199: PPUSH
33200: LD_VAR 0 14
33204: PPUSH
33205: CALL_OW 446
// end ; until not HasTask ( flame ) ;
33209: LD_VAR 0 1
33213: PPUSH
33214: CALL_OW 314
33218: NOT
33219: IFFALSE 33056
// end ;
33221: LD_VAR 0 5
33225: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33226: LD_EXP 102
33230: NOT
33231: IFFALSE 33281
33233: GO 33235
33235: DISABLE
// begin initHack := true ;
33236: LD_ADDR_EXP 102
33240: PUSH
33241: LD_INT 1
33243: ST_TO_ADDR
// hackTanks := [ ] ;
33244: LD_ADDR_EXP 103
33248: PUSH
33249: EMPTY
33250: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33251: LD_ADDR_EXP 104
33255: PUSH
33256: EMPTY
33257: ST_TO_ADDR
// hackLimit := 3 ;
33258: LD_ADDR_EXP 105
33262: PUSH
33263: LD_INT 3
33265: ST_TO_ADDR
// hackDist := 12 ;
33266: LD_ADDR_EXP 106
33270: PUSH
33271: LD_INT 12
33273: ST_TO_ADDR
// hackCounter := [ ] ;
33274: LD_ADDR_EXP 107
33278: PUSH
33279: EMPTY
33280: ST_TO_ADDR
// end ;
33281: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33282: LD_EXP 102
33286: PUSH
33287: LD_INT 34
33289: PUSH
33290: LD_INT 99
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PPUSH
33297: CALL_OW 69
33301: AND
33302: IFFALSE 33555
33304: GO 33306
33306: DISABLE
33307: LD_INT 0
33309: PPUSH
33310: PPUSH
// begin enable ;
33311: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33312: LD_ADDR_VAR 0 1
33316: PUSH
33317: LD_INT 34
33319: PUSH
33320: LD_INT 99
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PPUSH
33327: CALL_OW 69
33331: PUSH
33332: FOR_IN
33333: IFFALSE 33553
// begin if not i in hackTanks then
33335: LD_VAR 0 1
33339: PUSH
33340: LD_EXP 103
33344: IN
33345: NOT
33346: IFFALSE 33429
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33348: LD_ADDR_EXP 103
33352: PUSH
33353: LD_EXP 103
33357: PPUSH
33358: LD_EXP 103
33362: PUSH
33363: LD_INT 1
33365: PLUS
33366: PPUSH
33367: LD_VAR 0 1
33371: PPUSH
33372: CALL_OW 1
33376: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33377: LD_ADDR_EXP 104
33381: PUSH
33382: LD_EXP 104
33386: PPUSH
33387: LD_EXP 104
33391: PUSH
33392: LD_INT 1
33394: PLUS
33395: PPUSH
33396: EMPTY
33397: PPUSH
33398: CALL_OW 1
33402: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33403: LD_ADDR_EXP 107
33407: PUSH
33408: LD_EXP 107
33412: PPUSH
33413: LD_EXP 107
33417: PUSH
33418: LD_INT 1
33420: PLUS
33421: PPUSH
33422: EMPTY
33423: PPUSH
33424: CALL_OW 1
33428: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33429: LD_VAR 0 1
33433: PPUSH
33434: CALL_OW 302
33438: NOT
33439: IFFALSE 33452
// begin HackUnlinkAll ( i ) ;
33441: LD_VAR 0 1
33445: PPUSH
33446: CALL 33558 0 1
// continue ;
33450: GO 33332
// end ; HackCheckCapturedStatus ( i ) ;
33452: LD_VAR 0 1
33456: PPUSH
33457: CALL 34001 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33461: LD_ADDR_VAR 0 2
33465: PUSH
33466: LD_INT 81
33468: PUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 255
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 33
33485: PUSH
33486: LD_INT 3
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 91
33495: PUSH
33496: LD_VAR 0 1
33500: PUSH
33501: LD_EXP 106
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 50
33513: PUSH
33514: EMPTY
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: PPUSH
33523: CALL_OW 69
33527: ST_TO_ADDR
// if not tmp then
33528: LD_VAR 0 2
33532: NOT
33533: IFFALSE 33537
// continue ;
33535: GO 33332
// HackLink ( i , tmp ) ;
33537: LD_VAR 0 1
33541: PPUSH
33542: LD_VAR 0 2
33546: PPUSH
33547: CALL 33694 0 2
// end ;
33551: GO 33332
33553: POP
33554: POP
// end ;
33555: PPOPN 2
33557: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33558: LD_INT 0
33560: PPUSH
33561: PPUSH
33562: PPUSH
// if not hack in hackTanks then
33563: LD_VAR 0 1
33567: PUSH
33568: LD_EXP 103
33572: IN
33573: NOT
33574: IFFALSE 33578
// exit ;
33576: GO 33689
// index := GetElementIndex ( hackTanks , hack ) ;
33578: LD_ADDR_VAR 0 4
33582: PUSH
33583: LD_EXP 103
33587: PPUSH
33588: LD_VAR 0 1
33592: PPUSH
33593: CALL 41131 0 2
33597: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33598: LD_EXP 104
33602: PUSH
33603: LD_VAR 0 4
33607: ARRAY
33608: IFFALSE 33689
// begin for i in hackTanksCaptured [ index ] do
33610: LD_ADDR_VAR 0 3
33614: PUSH
33615: LD_EXP 104
33619: PUSH
33620: LD_VAR 0 4
33624: ARRAY
33625: PUSH
33626: FOR_IN
33627: IFFALSE 33653
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33629: LD_VAR 0 3
33633: PUSH
33634: LD_INT 1
33636: ARRAY
33637: PPUSH
33638: LD_VAR 0 3
33642: PUSH
33643: LD_INT 2
33645: ARRAY
33646: PPUSH
33647: CALL_OW 235
33651: GO 33626
33653: POP
33654: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33655: LD_ADDR_EXP 104
33659: PUSH
33660: LD_EXP 104
33664: PPUSH
33665: LD_VAR 0 4
33669: PPUSH
33670: EMPTY
33671: PPUSH
33672: CALL_OW 1
33676: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33677: LD_VAR 0 1
33681: PPUSH
33682: LD_INT 0
33684: PPUSH
33685: CALL_OW 505
// end ; end ;
33689: LD_VAR 0 2
33693: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33694: LD_INT 0
33696: PPUSH
33697: PPUSH
33698: PPUSH
// if not hack in hackTanks or not vehicles then
33699: LD_VAR 0 1
33703: PUSH
33704: LD_EXP 103
33708: IN
33709: NOT
33710: PUSH
33711: LD_VAR 0 2
33715: NOT
33716: OR
33717: IFFALSE 33721
// exit ;
33719: GO 33996
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33721: LD_ADDR_VAR 0 2
33725: PUSH
33726: LD_VAR 0 1
33730: PPUSH
33731: LD_VAR 0 2
33735: PPUSH
33736: LD_INT 1
33738: PPUSH
33739: LD_INT 1
33741: PPUSH
33742: CALL 41781 0 4
33746: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33747: LD_ADDR_VAR 0 5
33751: PUSH
33752: LD_EXP 103
33756: PPUSH
33757: LD_VAR 0 1
33761: PPUSH
33762: CALL 41131 0 2
33766: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33767: LD_EXP 104
33771: PUSH
33772: LD_VAR 0 5
33776: ARRAY
33777: PUSH
33778: LD_EXP 105
33782: LESS
33783: IFFALSE 33972
// begin for i := 1 to vehicles do
33785: LD_ADDR_VAR 0 4
33789: PUSH
33790: DOUBLE
33791: LD_INT 1
33793: DEC
33794: ST_TO_ADDR
33795: LD_VAR 0 2
33799: PUSH
33800: FOR_TO
33801: IFFALSE 33970
// begin if hackTanksCaptured [ index ] = hackLimit then
33803: LD_EXP 104
33807: PUSH
33808: LD_VAR 0 5
33812: ARRAY
33813: PUSH
33814: LD_EXP 105
33818: EQUAL
33819: IFFALSE 33823
// break ;
33821: GO 33970
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33823: LD_ADDR_EXP 107
33827: PUSH
33828: LD_EXP 107
33832: PPUSH
33833: LD_VAR 0 5
33837: PPUSH
33838: LD_EXP 107
33842: PUSH
33843: LD_VAR 0 5
33847: ARRAY
33848: PUSH
33849: LD_INT 1
33851: PLUS
33852: PPUSH
33853: CALL_OW 1
33857: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33858: LD_ADDR_EXP 104
33862: PUSH
33863: LD_EXP 104
33867: PPUSH
33868: LD_VAR 0 5
33872: PUSH
33873: LD_EXP 104
33877: PUSH
33878: LD_VAR 0 5
33882: ARRAY
33883: PUSH
33884: LD_INT 1
33886: PLUS
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PPUSH
33892: LD_VAR 0 2
33896: PUSH
33897: LD_VAR 0 4
33901: ARRAY
33902: PUSH
33903: LD_VAR 0 2
33907: PUSH
33908: LD_VAR 0 4
33912: ARRAY
33913: PPUSH
33914: CALL_OW 255
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PPUSH
33923: CALL 41346 0 3
33927: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33928: LD_VAR 0 2
33932: PUSH
33933: LD_VAR 0 4
33937: ARRAY
33938: PPUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: CALL_OW 255
33948: PPUSH
33949: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33953: LD_VAR 0 2
33957: PUSH
33958: LD_VAR 0 4
33962: ARRAY
33963: PPUSH
33964: CALL_OW 141
// end ;
33968: GO 33800
33970: POP
33971: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33972: LD_VAR 0 1
33976: PPUSH
33977: LD_EXP 104
33981: PUSH
33982: LD_VAR 0 5
33986: ARRAY
33987: PUSH
33988: LD_INT 0
33990: PLUS
33991: PPUSH
33992: CALL_OW 505
// end ;
33996: LD_VAR 0 3
34000: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34001: LD_INT 0
34003: PPUSH
34004: PPUSH
34005: PPUSH
34006: PPUSH
// if not hack in hackTanks then
34007: LD_VAR 0 1
34011: PUSH
34012: LD_EXP 103
34016: IN
34017: NOT
34018: IFFALSE 34022
// exit ;
34020: GO 34262
// index := GetElementIndex ( hackTanks , hack ) ;
34022: LD_ADDR_VAR 0 4
34026: PUSH
34027: LD_EXP 103
34031: PPUSH
34032: LD_VAR 0 1
34036: PPUSH
34037: CALL 41131 0 2
34041: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: DOUBLE
34048: LD_EXP 104
34052: PUSH
34053: LD_VAR 0 4
34057: ARRAY
34058: INC
34059: ST_TO_ADDR
34060: LD_INT 1
34062: PUSH
34063: FOR_DOWNTO
34064: IFFALSE 34236
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34066: LD_ADDR_VAR 0 5
34070: PUSH
34071: LD_EXP 104
34075: PUSH
34076: LD_VAR 0 4
34080: ARRAY
34081: PUSH
34082: LD_VAR 0 3
34086: ARRAY
34087: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34088: LD_VAR 0 5
34092: PUSH
34093: LD_INT 1
34095: ARRAY
34096: PPUSH
34097: CALL_OW 302
34101: NOT
34102: PUSH
34103: LD_VAR 0 5
34107: PUSH
34108: LD_INT 1
34110: ARRAY
34111: PPUSH
34112: CALL_OW 255
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: CALL_OW 255
34126: NONEQUAL
34127: OR
34128: IFFALSE 34234
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34130: LD_VAR 0 5
34134: PUSH
34135: LD_INT 1
34137: ARRAY
34138: PPUSH
34139: CALL_OW 305
34143: PUSH
34144: LD_VAR 0 5
34148: PUSH
34149: LD_INT 1
34151: ARRAY
34152: PPUSH
34153: CALL_OW 255
34157: PUSH
34158: LD_VAR 0 1
34162: PPUSH
34163: CALL_OW 255
34167: EQUAL
34168: AND
34169: IFFALSE 34193
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34171: LD_VAR 0 5
34175: PUSH
34176: LD_INT 1
34178: ARRAY
34179: PPUSH
34180: LD_VAR 0 5
34184: PUSH
34185: LD_INT 2
34187: ARRAY
34188: PPUSH
34189: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34193: LD_ADDR_EXP 104
34197: PUSH
34198: LD_EXP 104
34202: PPUSH
34203: LD_VAR 0 4
34207: PPUSH
34208: LD_EXP 104
34212: PUSH
34213: LD_VAR 0 4
34217: ARRAY
34218: PPUSH
34219: LD_VAR 0 3
34223: PPUSH
34224: CALL_OW 3
34228: PPUSH
34229: CALL_OW 1
34233: ST_TO_ADDR
// end ; end ;
34234: GO 34063
34236: POP
34237: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34238: LD_VAR 0 1
34242: PPUSH
34243: LD_EXP 104
34247: PUSH
34248: LD_VAR 0 4
34252: ARRAY
34253: PUSH
34254: LD_INT 0
34256: PLUS
34257: PPUSH
34258: CALL_OW 505
// end ;
34262: LD_VAR 0 2
34266: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34267: LD_INT 0
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
// if not hack in hackTanks then
34273: LD_VAR 0 1
34277: PUSH
34278: LD_EXP 103
34282: IN
34283: NOT
34284: IFFALSE 34288
// exit ;
34286: GO 34373
// index := GetElementIndex ( hackTanks , hack ) ;
34288: LD_ADDR_VAR 0 5
34292: PUSH
34293: LD_EXP 103
34297: PPUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: CALL 41131 0 2
34307: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34308: LD_ADDR_VAR 0 4
34312: PUSH
34313: DOUBLE
34314: LD_INT 1
34316: DEC
34317: ST_TO_ADDR
34318: LD_EXP 104
34322: PUSH
34323: LD_VAR 0 5
34327: ARRAY
34328: PUSH
34329: FOR_TO
34330: IFFALSE 34371
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34332: LD_EXP 104
34336: PUSH
34337: LD_VAR 0 5
34341: ARRAY
34342: PUSH
34343: LD_VAR 0 4
34347: ARRAY
34348: PUSH
34349: LD_INT 1
34351: ARRAY
34352: PUSH
34353: LD_VAR 0 2
34357: EQUAL
34358: IFFALSE 34369
// KillUnit ( vehicle ) ;
34360: LD_VAR 0 2
34364: PPUSH
34365: CALL_OW 66
34369: GO 34329
34371: POP
34372: POP
// end ;
34373: LD_VAR 0 3
34377: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34378: LD_EXP 108
34382: NOT
34383: IFFALSE 34418
34385: GO 34387
34387: DISABLE
// begin initMiner := true ;
34388: LD_ADDR_EXP 108
34392: PUSH
34393: LD_INT 1
34395: ST_TO_ADDR
// minersList := [ ] ;
34396: LD_ADDR_EXP 109
34400: PUSH
34401: EMPTY
34402: ST_TO_ADDR
// minerMinesList := [ ] ;
34403: LD_ADDR_EXP 110
34407: PUSH
34408: EMPTY
34409: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34410: LD_ADDR_EXP 111
34414: PUSH
34415: LD_INT 5
34417: ST_TO_ADDR
// end ;
34418: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34419: LD_EXP 108
34423: PUSH
34424: LD_INT 34
34426: PUSH
34427: LD_INT 81
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PPUSH
34434: CALL_OW 69
34438: AND
34439: IFFALSE 34900
34441: GO 34443
34443: DISABLE
34444: LD_INT 0
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
// begin enable ;
34450: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34451: LD_ADDR_VAR 0 1
34455: PUSH
34456: LD_INT 34
34458: PUSH
34459: LD_INT 81
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PPUSH
34466: CALL_OW 69
34470: PUSH
34471: FOR_IN
34472: IFFALSE 34544
// begin if not i in minersList then
34474: LD_VAR 0 1
34478: PUSH
34479: LD_EXP 109
34483: IN
34484: NOT
34485: IFFALSE 34542
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34487: LD_ADDR_EXP 109
34491: PUSH
34492: LD_EXP 109
34496: PPUSH
34497: LD_EXP 109
34501: PUSH
34502: LD_INT 1
34504: PLUS
34505: PPUSH
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 1
34515: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34516: LD_ADDR_EXP 110
34520: PUSH
34521: LD_EXP 110
34525: PPUSH
34526: LD_EXP 110
34530: PUSH
34531: LD_INT 1
34533: PLUS
34534: PPUSH
34535: EMPTY
34536: PPUSH
34537: CALL_OW 1
34541: ST_TO_ADDR
// end end ;
34542: GO 34471
34544: POP
34545: POP
// for i := minerMinesList downto 1 do
34546: LD_ADDR_VAR 0 1
34550: PUSH
34551: DOUBLE
34552: LD_EXP 110
34556: INC
34557: ST_TO_ADDR
34558: LD_INT 1
34560: PUSH
34561: FOR_DOWNTO
34562: IFFALSE 34898
// begin if IsLive ( minersList [ i ] ) then
34564: LD_EXP 109
34568: PUSH
34569: LD_VAR 0 1
34573: ARRAY
34574: PPUSH
34575: CALL_OW 300
34579: IFFALSE 34607
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34581: LD_EXP 109
34585: PUSH
34586: LD_VAR 0 1
34590: ARRAY
34591: PPUSH
34592: LD_EXP 110
34596: PUSH
34597: LD_VAR 0 1
34601: ARRAY
34602: PPUSH
34603: CALL_OW 505
// if not minerMinesList [ i ] then
34607: LD_EXP 110
34611: PUSH
34612: LD_VAR 0 1
34616: ARRAY
34617: NOT
34618: IFFALSE 34622
// continue ;
34620: GO 34561
// for j := minerMinesList [ i ] downto 1 do
34622: LD_ADDR_VAR 0 2
34626: PUSH
34627: DOUBLE
34628: LD_EXP 110
34632: PUSH
34633: LD_VAR 0 1
34637: ARRAY
34638: INC
34639: ST_TO_ADDR
34640: LD_INT 1
34642: PUSH
34643: FOR_DOWNTO
34644: IFFALSE 34894
// begin side := GetSide ( minersList [ i ] ) ;
34646: LD_ADDR_VAR 0 3
34650: PUSH
34651: LD_EXP 109
34655: PUSH
34656: LD_VAR 0 1
34660: ARRAY
34661: PPUSH
34662: CALL_OW 255
34666: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34667: LD_ADDR_VAR 0 4
34671: PUSH
34672: LD_EXP 110
34676: PUSH
34677: LD_VAR 0 1
34681: ARRAY
34682: PUSH
34683: LD_VAR 0 2
34687: ARRAY
34688: PUSH
34689: LD_INT 1
34691: ARRAY
34692: PPUSH
34693: LD_EXP 110
34697: PUSH
34698: LD_VAR 0 1
34702: ARRAY
34703: PUSH
34704: LD_VAR 0 2
34708: ARRAY
34709: PUSH
34710: LD_INT 2
34712: ARRAY
34713: PPUSH
34714: CALL_OW 428
34718: ST_TO_ADDR
// if not tmp then
34719: LD_VAR 0 4
34723: NOT
34724: IFFALSE 34728
// continue ;
34726: GO 34643
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34728: LD_VAR 0 4
34732: PUSH
34733: LD_INT 81
34735: PUSH
34736: LD_VAR 0 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PPUSH
34745: CALL_OW 69
34749: IN
34750: PUSH
34751: LD_EXP 110
34755: PUSH
34756: LD_VAR 0 1
34760: ARRAY
34761: PUSH
34762: LD_VAR 0 2
34766: ARRAY
34767: PUSH
34768: LD_INT 1
34770: ARRAY
34771: PPUSH
34772: LD_EXP 110
34776: PUSH
34777: LD_VAR 0 1
34781: ARRAY
34782: PUSH
34783: LD_VAR 0 2
34787: ARRAY
34788: PUSH
34789: LD_INT 2
34791: ARRAY
34792: PPUSH
34793: CALL_OW 458
34797: AND
34798: IFFALSE 34892
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34800: LD_EXP 110
34804: PUSH
34805: LD_VAR 0 1
34809: ARRAY
34810: PUSH
34811: LD_VAR 0 2
34815: ARRAY
34816: PUSH
34817: LD_INT 1
34819: ARRAY
34820: PPUSH
34821: LD_EXP 110
34825: PUSH
34826: LD_VAR 0 1
34830: ARRAY
34831: PUSH
34832: LD_VAR 0 2
34836: ARRAY
34837: PUSH
34838: LD_INT 2
34840: ARRAY
34841: PPUSH
34842: LD_VAR 0 3
34846: PPUSH
34847: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34851: LD_ADDR_EXP 110
34855: PUSH
34856: LD_EXP 110
34860: PPUSH
34861: LD_VAR 0 1
34865: PPUSH
34866: LD_EXP 110
34870: PUSH
34871: LD_VAR 0 1
34875: ARRAY
34876: PPUSH
34877: LD_VAR 0 2
34881: PPUSH
34882: CALL_OW 3
34886: PPUSH
34887: CALL_OW 1
34891: ST_TO_ADDR
// end ; end ;
34892: GO 34643
34894: POP
34895: POP
// end ;
34896: GO 34561
34898: POP
34899: POP
// end ;
34900: PPOPN 4
34902: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34903: LD_INT 0
34905: PPUSH
34906: PPUSH
// result := false ;
34907: LD_ADDR_VAR 0 4
34911: PUSH
34912: LD_INT 0
34914: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34915: LD_VAR 0 1
34919: PPUSH
34920: CALL_OW 264
34924: PUSH
34925: LD_INT 81
34927: EQUAL
34928: NOT
34929: IFFALSE 34933
// exit ;
34931: GO 35173
// index := GetElementIndex ( minersList , unit ) ;
34933: LD_ADDR_VAR 0 5
34937: PUSH
34938: LD_EXP 109
34942: PPUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL 41131 0 2
34952: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34953: LD_EXP 110
34957: PUSH
34958: LD_VAR 0 5
34962: ARRAY
34963: PUSH
34964: LD_EXP 111
34968: GREATEREQUAL
34969: IFFALSE 34973
// exit ;
34971: GO 35173
// ComMoveXY ( unit , x , y ) ;
34973: LD_VAR 0 1
34977: PPUSH
34978: LD_VAR 0 2
34982: PPUSH
34983: LD_VAR 0 3
34987: PPUSH
34988: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34992: LD_INT 35
34994: PPUSH
34995: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34999: LD_VAR 0 1
35003: PPUSH
35004: LD_VAR 0 2
35008: PPUSH
35009: LD_VAR 0 3
35013: PPUSH
35014: CALL 72872 0 3
35018: NOT
35019: PUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 314
35029: AND
35030: IFFALSE 35034
// exit ;
35032: GO 35173
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35034: LD_VAR 0 2
35038: PPUSH
35039: LD_VAR 0 3
35043: PPUSH
35044: CALL_OW 428
35048: PUSH
35049: LD_VAR 0 1
35053: EQUAL
35054: PUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: CALL_OW 314
35064: NOT
35065: AND
35066: IFFALSE 34992
// PlaySoundXY ( x , y , PlantMine ) ;
35068: LD_VAR 0 2
35072: PPUSH
35073: LD_VAR 0 3
35077: PPUSH
35078: LD_STRING PlantMine
35080: PPUSH
35081: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35085: LD_VAR 0 2
35089: PPUSH
35090: LD_VAR 0 3
35094: PPUSH
35095: LD_VAR 0 1
35099: PPUSH
35100: CALL_OW 255
35104: PPUSH
35105: LD_INT 0
35107: PPUSH
35108: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35112: LD_ADDR_EXP 110
35116: PUSH
35117: LD_EXP 110
35121: PPUSH
35122: LD_VAR 0 5
35126: PUSH
35127: LD_EXP 110
35131: PUSH
35132: LD_VAR 0 5
35136: ARRAY
35137: PUSH
35138: LD_INT 1
35140: PLUS
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PPUSH
35146: LD_VAR 0 2
35150: PUSH
35151: LD_VAR 0 3
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PPUSH
35160: CALL 41346 0 3
35164: ST_TO_ADDR
// result := true ;
35165: LD_ADDR_VAR 0 4
35169: PUSH
35170: LD_INT 1
35172: ST_TO_ADDR
// end ;
35173: LD_VAR 0 4
35177: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35178: LD_INT 0
35180: PPUSH
35181: PPUSH
35182: PPUSH
// if not unit in minersList then
35183: LD_VAR 0 1
35187: PUSH
35188: LD_EXP 109
35192: IN
35193: NOT
35194: IFFALSE 35198
// exit ;
35196: GO 35590
// index := GetElementIndex ( minersList , unit ) ;
35198: LD_ADDR_VAR 0 6
35202: PUSH
35203: LD_EXP 109
35207: PPUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL 41131 0 2
35217: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35218: LD_ADDR_VAR 0 5
35222: PUSH
35223: DOUBLE
35224: LD_EXP 110
35228: PUSH
35229: LD_VAR 0 6
35233: ARRAY
35234: INC
35235: ST_TO_ADDR
35236: LD_INT 1
35238: PUSH
35239: FOR_DOWNTO
35240: IFFALSE 35401
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35242: LD_EXP 110
35246: PUSH
35247: LD_VAR 0 6
35251: ARRAY
35252: PUSH
35253: LD_VAR 0 5
35257: ARRAY
35258: PUSH
35259: LD_INT 1
35261: ARRAY
35262: PUSH
35263: LD_VAR 0 2
35267: EQUAL
35268: PUSH
35269: LD_EXP 110
35273: PUSH
35274: LD_VAR 0 6
35278: ARRAY
35279: PUSH
35280: LD_VAR 0 5
35284: ARRAY
35285: PUSH
35286: LD_INT 2
35288: ARRAY
35289: PUSH
35290: LD_VAR 0 3
35294: EQUAL
35295: AND
35296: IFFALSE 35399
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35298: LD_EXP 110
35302: PUSH
35303: LD_VAR 0 6
35307: ARRAY
35308: PUSH
35309: LD_VAR 0 5
35313: ARRAY
35314: PUSH
35315: LD_INT 1
35317: ARRAY
35318: PPUSH
35319: LD_EXP 110
35323: PUSH
35324: LD_VAR 0 6
35328: ARRAY
35329: PUSH
35330: LD_VAR 0 5
35334: ARRAY
35335: PUSH
35336: LD_INT 2
35338: ARRAY
35339: PPUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: CALL_OW 255
35349: PPUSH
35350: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35354: LD_ADDR_EXP 110
35358: PUSH
35359: LD_EXP 110
35363: PPUSH
35364: LD_VAR 0 6
35368: PPUSH
35369: LD_EXP 110
35373: PUSH
35374: LD_VAR 0 6
35378: ARRAY
35379: PPUSH
35380: LD_VAR 0 5
35384: PPUSH
35385: CALL_OW 3
35389: PPUSH
35390: CALL_OW 1
35394: ST_TO_ADDR
// exit ;
35395: POP
35396: POP
35397: GO 35590
// end ; end ;
35399: GO 35239
35401: POP
35402: POP
// for i := minerMinesList [ index ] downto 1 do
35403: LD_ADDR_VAR 0 5
35407: PUSH
35408: DOUBLE
35409: LD_EXP 110
35413: PUSH
35414: LD_VAR 0 6
35418: ARRAY
35419: INC
35420: ST_TO_ADDR
35421: LD_INT 1
35423: PUSH
35424: FOR_DOWNTO
35425: IFFALSE 35588
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35427: LD_EXP 110
35431: PUSH
35432: LD_VAR 0 6
35436: ARRAY
35437: PUSH
35438: LD_VAR 0 5
35442: ARRAY
35443: PUSH
35444: LD_INT 1
35446: ARRAY
35447: PPUSH
35448: LD_EXP 110
35452: PUSH
35453: LD_VAR 0 6
35457: ARRAY
35458: PUSH
35459: LD_VAR 0 5
35463: ARRAY
35464: PUSH
35465: LD_INT 2
35467: ARRAY
35468: PPUSH
35469: LD_VAR 0 2
35473: PPUSH
35474: LD_VAR 0 3
35478: PPUSH
35479: CALL_OW 298
35483: PUSH
35484: LD_INT 6
35486: LESS
35487: IFFALSE 35586
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35489: LD_EXP 110
35493: PUSH
35494: LD_VAR 0 6
35498: ARRAY
35499: PUSH
35500: LD_VAR 0 5
35504: ARRAY
35505: PUSH
35506: LD_INT 1
35508: ARRAY
35509: PPUSH
35510: LD_EXP 110
35514: PUSH
35515: LD_VAR 0 6
35519: ARRAY
35520: PUSH
35521: LD_VAR 0 5
35525: ARRAY
35526: PUSH
35527: LD_INT 2
35529: ARRAY
35530: PPUSH
35531: LD_VAR 0 1
35535: PPUSH
35536: CALL_OW 255
35540: PPUSH
35541: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35545: LD_ADDR_EXP 110
35549: PUSH
35550: LD_EXP 110
35554: PPUSH
35555: LD_VAR 0 6
35559: PPUSH
35560: LD_EXP 110
35564: PUSH
35565: LD_VAR 0 6
35569: ARRAY
35570: PPUSH
35571: LD_VAR 0 5
35575: PPUSH
35576: CALL_OW 3
35580: PPUSH
35581: CALL_OW 1
35585: ST_TO_ADDR
// end ; end ;
35586: GO 35424
35588: POP
35589: POP
// end ;
35590: LD_VAR 0 4
35594: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35595: LD_INT 0
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35606: LD_VAR 0 1
35610: PPUSH
35611: CALL_OW 264
35615: PUSH
35616: LD_INT 81
35618: EQUAL
35619: NOT
35620: PUSH
35621: LD_VAR 0 1
35625: PUSH
35626: LD_EXP 109
35630: IN
35631: NOT
35632: OR
35633: IFFALSE 35637
// exit ;
35635: GO 35959
// index := GetElementIndex ( minersList , unit ) ;
35637: LD_ADDR_VAR 0 6
35641: PUSH
35642: LD_EXP 109
35646: PPUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL 41131 0 2
35656: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35657: LD_ADDR_VAR 0 8
35661: PUSH
35662: LD_EXP 111
35666: PUSH
35667: LD_EXP 110
35671: PUSH
35672: LD_VAR 0 6
35676: ARRAY
35677: MINUS
35678: ST_TO_ADDR
// if not minesFreeAmount then
35679: LD_VAR 0 8
35683: NOT
35684: IFFALSE 35688
// exit ;
35686: GO 35959
// tmp := [ ] ;
35688: LD_ADDR_VAR 0 7
35692: PUSH
35693: EMPTY
35694: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35695: LD_ADDR_VAR 0 5
35699: PUSH
35700: DOUBLE
35701: LD_INT 1
35703: DEC
35704: ST_TO_ADDR
35705: LD_VAR 0 8
35709: PUSH
35710: FOR_TO
35711: IFFALSE 35906
// begin _d := rand ( 0 , 5 ) ;
35713: LD_ADDR_VAR 0 11
35717: PUSH
35718: LD_INT 0
35720: PPUSH
35721: LD_INT 5
35723: PPUSH
35724: CALL_OW 12
35728: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35729: LD_ADDR_VAR 0 12
35733: PUSH
35734: LD_INT 2
35736: PPUSH
35737: LD_INT 6
35739: PPUSH
35740: CALL_OW 12
35744: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35745: LD_ADDR_VAR 0 9
35749: PUSH
35750: LD_VAR 0 2
35754: PPUSH
35755: LD_VAR 0 11
35759: PPUSH
35760: LD_VAR 0 12
35764: PPUSH
35765: CALL_OW 272
35769: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35770: LD_ADDR_VAR 0 10
35774: PUSH
35775: LD_VAR 0 3
35779: PPUSH
35780: LD_VAR 0 11
35784: PPUSH
35785: LD_VAR 0 12
35789: PPUSH
35790: CALL_OW 273
35794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35795: LD_VAR 0 9
35799: PPUSH
35800: LD_VAR 0 10
35804: PPUSH
35805: CALL_OW 488
35809: PUSH
35810: LD_VAR 0 9
35814: PUSH
35815: LD_VAR 0 10
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_VAR 0 7
35828: IN
35829: NOT
35830: AND
35831: PUSH
35832: LD_VAR 0 9
35836: PPUSH
35837: LD_VAR 0 10
35841: PPUSH
35842: CALL_OW 458
35846: NOT
35847: AND
35848: IFFALSE 35890
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35850: LD_ADDR_VAR 0 7
35854: PUSH
35855: LD_VAR 0 7
35859: PPUSH
35860: LD_VAR 0 7
35864: PUSH
35865: LD_INT 1
35867: PLUS
35868: PPUSH
35869: LD_VAR 0 9
35873: PUSH
35874: LD_VAR 0 10
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PPUSH
35883: CALL_OW 1
35887: ST_TO_ADDR
35888: GO 35904
// i := i - 1 ;
35890: LD_ADDR_VAR 0 5
35894: PUSH
35895: LD_VAR 0 5
35899: PUSH
35900: LD_INT 1
35902: MINUS
35903: ST_TO_ADDR
// end ;
35904: GO 35710
35906: POP
35907: POP
// for i in tmp do
35908: LD_ADDR_VAR 0 5
35912: PUSH
35913: LD_VAR 0 7
35917: PUSH
35918: FOR_IN
35919: IFFALSE 35957
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35921: LD_VAR 0 1
35925: PPUSH
35926: LD_VAR 0 5
35930: PUSH
35931: LD_INT 1
35933: ARRAY
35934: PPUSH
35935: LD_VAR 0 5
35939: PUSH
35940: LD_INT 2
35942: ARRAY
35943: PPUSH
35944: CALL 34903 0 3
35948: NOT
35949: IFFALSE 35955
// exit ;
35951: POP
35952: POP
35953: GO 35959
35955: GO 35918
35957: POP
35958: POP
// end ;
35959: LD_VAR 0 4
35963: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35964: LD_INT 0
35966: PPUSH
35967: PPUSH
35968: PPUSH
35969: PPUSH
35970: PPUSH
35971: PPUSH
35972: PPUSH
// if not GetClass ( unit ) = class_sniper then
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 257
35982: PUSH
35983: LD_INT 5
35985: EQUAL
35986: NOT
35987: IFFALSE 35991
// exit ;
35989: GO 36379
// dist := 8 ;
35991: LD_ADDR_VAR 0 5
35995: PUSH
35996: LD_INT 8
35998: ST_TO_ADDR
// viewRange := 12 ;
35999: LD_ADDR_VAR 0 7
36003: PUSH
36004: LD_INT 12
36006: ST_TO_ADDR
// side := GetSide ( unit ) ;
36007: LD_ADDR_VAR 0 6
36011: PUSH
36012: LD_VAR 0 1
36016: PPUSH
36017: CALL_OW 255
36021: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36022: LD_INT 61
36024: PPUSH
36025: LD_VAR 0 6
36029: PPUSH
36030: CALL_OW 321
36034: PUSH
36035: LD_INT 2
36037: EQUAL
36038: IFFALSE 36048
// viewRange := 16 ;
36040: LD_ADDR_VAR 0 7
36044: PUSH
36045: LD_INT 16
36047: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36048: LD_VAR 0 1
36052: PPUSH
36053: LD_VAR 0 2
36057: PPUSH
36058: LD_VAR 0 3
36062: PPUSH
36063: CALL_OW 297
36067: PUSH
36068: LD_VAR 0 5
36072: GREATER
36073: IFFALSE 36152
// begin ComMoveXY ( unit , x , y ) ;
36075: LD_VAR 0 1
36079: PPUSH
36080: LD_VAR 0 2
36084: PPUSH
36085: LD_VAR 0 3
36089: PPUSH
36090: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36094: LD_INT 35
36096: PPUSH
36097: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36101: LD_VAR 0 1
36105: PPUSH
36106: LD_VAR 0 2
36110: PPUSH
36111: LD_VAR 0 3
36115: PPUSH
36116: CALL 72872 0 3
36120: NOT
36121: IFFALSE 36125
// exit ;
36123: GO 36379
// until GetDistUnitXY ( unit , x , y ) < dist ;
36125: LD_VAR 0 1
36129: PPUSH
36130: LD_VAR 0 2
36134: PPUSH
36135: LD_VAR 0 3
36139: PPUSH
36140: CALL_OW 297
36144: PUSH
36145: LD_VAR 0 5
36149: LESS
36150: IFFALSE 36094
// end ; ComTurnXY ( unit , x , y ) ;
36152: LD_VAR 0 1
36156: PPUSH
36157: LD_VAR 0 2
36161: PPUSH
36162: LD_VAR 0 3
36166: PPUSH
36167: CALL_OW 118
// wait ( 5 ) ;
36171: LD_INT 5
36173: PPUSH
36174: CALL_OW 67
// _d := GetDir ( unit ) ;
36178: LD_ADDR_VAR 0 10
36182: PUSH
36183: LD_VAR 0 1
36187: PPUSH
36188: CALL_OW 254
36192: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36193: LD_ADDR_VAR 0 8
36197: PUSH
36198: LD_VAR 0 1
36202: PPUSH
36203: CALL_OW 250
36207: PPUSH
36208: LD_VAR 0 10
36212: PPUSH
36213: LD_VAR 0 5
36217: PPUSH
36218: CALL_OW 272
36222: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36223: LD_ADDR_VAR 0 9
36227: PUSH
36228: LD_VAR 0 1
36232: PPUSH
36233: CALL_OW 251
36237: PPUSH
36238: LD_VAR 0 10
36242: PPUSH
36243: LD_VAR 0 5
36247: PPUSH
36248: CALL_OW 273
36252: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36253: LD_VAR 0 8
36257: PPUSH
36258: LD_VAR 0 9
36262: PPUSH
36263: CALL_OW 488
36267: NOT
36268: IFFALSE 36272
// exit ;
36270: GO 36379
// ComAnimCustom ( unit , 1 ) ;
36272: LD_VAR 0 1
36276: PPUSH
36277: LD_INT 1
36279: PPUSH
36280: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36284: LD_VAR 0 8
36288: PPUSH
36289: LD_VAR 0 9
36293: PPUSH
36294: LD_VAR 0 6
36298: PPUSH
36299: LD_VAR 0 7
36303: PPUSH
36304: CALL_OW 330
// repeat wait ( 1 ) ;
36308: LD_INT 1
36310: PPUSH
36311: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 316
36324: PUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 314
36334: OR
36335: PUSH
36336: LD_VAR 0 1
36340: PPUSH
36341: CALL_OW 302
36345: NOT
36346: OR
36347: PUSH
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL_OW 301
36357: OR
36358: IFFALSE 36308
// RemoveSeeing ( _x , _y , side ) ;
36360: LD_VAR 0 8
36364: PPUSH
36365: LD_VAR 0 9
36369: PPUSH
36370: LD_VAR 0 6
36374: PPUSH
36375: CALL_OW 331
// end ; end_of_file
36379: LD_VAR 0 4
36383: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36384: LD_INT 0
36386: PPUSH
36387: PPUSH
// if exist_mode then
36388: LD_VAR 0 2
36392: IFFALSE 36417
// unit := CreateCharacter ( prefix & ident ) else
36394: LD_ADDR_VAR 0 5
36398: PUSH
36399: LD_VAR 0 3
36403: PUSH
36404: LD_VAR 0 1
36408: STR
36409: PPUSH
36410: CALL_OW 34
36414: ST_TO_ADDR
36415: GO 36432
// unit := NewCharacter ( ident ) ;
36417: LD_ADDR_VAR 0 5
36421: PUSH
36422: LD_VAR 0 1
36426: PPUSH
36427: CALL_OW 25
36431: ST_TO_ADDR
// result := unit ;
36432: LD_ADDR_VAR 0 4
36436: PUSH
36437: LD_VAR 0 5
36441: ST_TO_ADDR
// end ;
36442: LD_VAR 0 4
36446: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36447: LD_INT 0
36449: PPUSH
36450: PPUSH
// if not side or not nation then
36451: LD_VAR 0 1
36455: NOT
36456: PUSH
36457: LD_VAR 0 2
36461: NOT
36462: OR
36463: IFFALSE 36467
// exit ;
36465: GO 37235
// case nation of nation_american :
36467: LD_VAR 0 2
36471: PUSH
36472: LD_INT 1
36474: DOUBLE
36475: EQUAL
36476: IFTRUE 36480
36478: GO 36694
36480: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36481: LD_ADDR_VAR 0 4
36485: PUSH
36486: LD_INT 35
36488: PUSH
36489: LD_INT 45
36491: PUSH
36492: LD_INT 46
36494: PUSH
36495: LD_INT 47
36497: PUSH
36498: LD_INT 82
36500: PUSH
36501: LD_INT 83
36503: PUSH
36504: LD_INT 84
36506: PUSH
36507: LD_INT 85
36509: PUSH
36510: LD_INT 86
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: LD_INT 6
36521: PUSH
36522: LD_INT 15
36524: PUSH
36525: LD_INT 16
36527: PUSH
36528: LD_INT 7
36530: PUSH
36531: LD_INT 12
36533: PUSH
36534: LD_INT 13
36536: PUSH
36537: LD_INT 10
36539: PUSH
36540: LD_INT 14
36542: PUSH
36543: LD_INT 20
36545: PUSH
36546: LD_INT 21
36548: PUSH
36549: LD_INT 22
36551: PUSH
36552: LD_INT 25
36554: PUSH
36555: LD_INT 32
36557: PUSH
36558: LD_INT 27
36560: PUSH
36561: LD_INT 36
36563: PUSH
36564: LD_INT 69
36566: PUSH
36567: LD_INT 39
36569: PUSH
36570: LD_INT 34
36572: PUSH
36573: LD_INT 40
36575: PUSH
36576: LD_INT 48
36578: PUSH
36579: LD_INT 49
36581: PUSH
36582: LD_INT 50
36584: PUSH
36585: LD_INT 51
36587: PUSH
36588: LD_INT 52
36590: PUSH
36591: LD_INT 53
36593: PUSH
36594: LD_INT 54
36596: PUSH
36597: LD_INT 55
36599: PUSH
36600: LD_INT 56
36602: PUSH
36603: LD_INT 57
36605: PUSH
36606: LD_INT 58
36608: PUSH
36609: LD_INT 59
36611: PUSH
36612: LD_INT 60
36614: PUSH
36615: LD_INT 61
36617: PUSH
36618: LD_INT 62
36620: PUSH
36621: LD_INT 80
36623: PUSH
36624: LD_INT 82
36626: PUSH
36627: LD_INT 83
36629: PUSH
36630: LD_INT 84
36632: PUSH
36633: LD_INT 85
36635: PUSH
36636: LD_INT 86
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
36692: GO 37159
36694: LD_INT 2
36696: DOUBLE
36697: EQUAL
36698: IFTRUE 36702
36700: GO 36928
36702: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36703: LD_ADDR_VAR 0 4
36707: PUSH
36708: LD_INT 35
36710: PUSH
36711: LD_INT 45
36713: PUSH
36714: LD_INT 46
36716: PUSH
36717: LD_INT 47
36719: PUSH
36720: LD_INT 82
36722: PUSH
36723: LD_INT 83
36725: PUSH
36726: LD_INT 84
36728: PUSH
36729: LD_INT 85
36731: PUSH
36732: LD_INT 87
36734: PUSH
36735: LD_INT 70
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: LD_INT 11
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: LD_INT 4
36749: PUSH
36750: LD_INT 5
36752: PUSH
36753: LD_INT 6
36755: PUSH
36756: LD_INT 15
36758: PUSH
36759: LD_INT 18
36761: PUSH
36762: LD_INT 7
36764: PUSH
36765: LD_INT 17
36767: PUSH
36768: LD_INT 8
36770: PUSH
36771: LD_INT 20
36773: PUSH
36774: LD_INT 21
36776: PUSH
36777: LD_INT 22
36779: PUSH
36780: LD_INT 72
36782: PUSH
36783: LD_INT 26
36785: PUSH
36786: LD_INT 69
36788: PUSH
36789: LD_INT 39
36791: PUSH
36792: LD_INT 40
36794: PUSH
36795: LD_INT 41
36797: PUSH
36798: LD_INT 42
36800: PUSH
36801: LD_INT 43
36803: PUSH
36804: LD_INT 48
36806: PUSH
36807: LD_INT 49
36809: PUSH
36810: LD_INT 50
36812: PUSH
36813: LD_INT 51
36815: PUSH
36816: LD_INT 52
36818: PUSH
36819: LD_INT 53
36821: PUSH
36822: LD_INT 54
36824: PUSH
36825: LD_INT 55
36827: PUSH
36828: LD_INT 56
36830: PUSH
36831: LD_INT 60
36833: PUSH
36834: LD_INT 61
36836: PUSH
36837: LD_INT 62
36839: PUSH
36840: LD_INT 66
36842: PUSH
36843: LD_INT 67
36845: PUSH
36846: LD_INT 68
36848: PUSH
36849: LD_INT 81
36851: PUSH
36852: LD_INT 82
36854: PUSH
36855: LD_INT 83
36857: PUSH
36858: LD_INT 84
36860: PUSH
36861: LD_INT 85
36863: PUSH
36864: LD_INT 87
36866: PUSH
36867: LD_INT 88
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
36926: GO 37159
36928: LD_INT 3
36930: DOUBLE
36931: EQUAL
36932: IFTRUE 36936
36934: GO 37158
36936: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36937: LD_ADDR_VAR 0 4
36941: PUSH
36942: LD_INT 46
36944: PUSH
36945: LD_INT 47
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 82
36956: PUSH
36957: LD_INT 83
36959: PUSH
36960: LD_INT 84
36962: PUSH
36963: LD_INT 85
36965: PUSH
36966: LD_INT 86
36968: PUSH
36969: LD_INT 11
36971: PUSH
36972: LD_INT 9
36974: PUSH
36975: LD_INT 20
36977: PUSH
36978: LD_INT 19
36980: PUSH
36981: LD_INT 21
36983: PUSH
36984: LD_INT 24
36986: PUSH
36987: LD_INT 22
36989: PUSH
36990: LD_INT 25
36992: PUSH
36993: LD_INT 28
36995: PUSH
36996: LD_INT 29
36998: PUSH
36999: LD_INT 30
37001: PUSH
37002: LD_INT 31
37004: PUSH
37005: LD_INT 37
37007: PUSH
37008: LD_INT 38
37010: PUSH
37011: LD_INT 32
37013: PUSH
37014: LD_INT 27
37016: PUSH
37017: LD_INT 33
37019: PUSH
37020: LD_INT 69
37022: PUSH
37023: LD_INT 39
37025: PUSH
37026: LD_INT 34
37028: PUSH
37029: LD_INT 40
37031: PUSH
37032: LD_INT 71
37034: PUSH
37035: LD_INT 23
37037: PUSH
37038: LD_INT 44
37040: PUSH
37041: LD_INT 48
37043: PUSH
37044: LD_INT 49
37046: PUSH
37047: LD_INT 50
37049: PUSH
37050: LD_INT 51
37052: PUSH
37053: LD_INT 52
37055: PUSH
37056: LD_INT 53
37058: PUSH
37059: LD_INT 54
37061: PUSH
37062: LD_INT 55
37064: PUSH
37065: LD_INT 56
37067: PUSH
37068: LD_INT 57
37070: PUSH
37071: LD_INT 58
37073: PUSH
37074: LD_INT 59
37076: PUSH
37077: LD_INT 63
37079: PUSH
37080: LD_INT 64
37082: PUSH
37083: LD_INT 65
37085: PUSH
37086: LD_INT 82
37088: PUSH
37089: LD_INT 83
37091: PUSH
37092: LD_INT 84
37094: PUSH
37095: LD_INT 85
37097: PUSH
37098: LD_INT 86
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: ST_TO_ADDR
37156: GO 37159
37158: POP
// if state > - 1 and state < 3 then
37159: LD_VAR 0 3
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: GREATER
37168: PUSH
37169: LD_VAR 0 3
37173: PUSH
37174: LD_INT 3
37176: LESS
37177: AND
37178: IFFALSE 37235
// for i in result do
37180: LD_ADDR_VAR 0 5
37184: PUSH
37185: LD_VAR 0 4
37189: PUSH
37190: FOR_IN
37191: IFFALSE 37233
// if GetTech ( i , side ) <> state then
37193: LD_VAR 0 5
37197: PPUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL_OW 321
37207: PUSH
37208: LD_VAR 0 3
37212: NONEQUAL
37213: IFFALSE 37231
// result := result diff i ;
37215: LD_ADDR_VAR 0 4
37219: PUSH
37220: LD_VAR 0 4
37224: PUSH
37225: LD_VAR 0 5
37229: DIFF
37230: ST_TO_ADDR
37231: GO 37190
37233: POP
37234: POP
// end ;
37235: LD_VAR 0 4
37239: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37240: LD_INT 0
37242: PPUSH
37243: PPUSH
37244: PPUSH
// result := true ;
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_INT 1
37252: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37253: LD_ADDR_VAR 0 5
37257: PUSH
37258: LD_VAR 0 2
37262: PPUSH
37263: CALL_OW 480
37267: ST_TO_ADDR
// if not tmp then
37268: LD_VAR 0 5
37272: NOT
37273: IFFALSE 37277
// exit ;
37275: GO 37326
// for i in tmp do
37277: LD_ADDR_VAR 0 4
37281: PUSH
37282: LD_VAR 0 5
37286: PUSH
37287: FOR_IN
37288: IFFALSE 37324
// if GetTech ( i , side ) <> state_researched then
37290: LD_VAR 0 4
37294: PPUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: CALL_OW 321
37304: PUSH
37305: LD_INT 2
37307: NONEQUAL
37308: IFFALSE 37322
// begin result := false ;
37310: LD_ADDR_VAR 0 3
37314: PUSH
37315: LD_INT 0
37317: ST_TO_ADDR
// exit ;
37318: POP
37319: POP
37320: GO 37326
// end ;
37322: GO 37287
37324: POP
37325: POP
// end ;
37326: LD_VAR 0 3
37330: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37331: LD_INT 0
37333: PPUSH
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37346: LD_VAR 0 1
37350: NOT
37351: PUSH
37352: LD_VAR 0 1
37356: PPUSH
37357: CALL_OW 257
37361: PUSH
37362: LD_INT 9
37364: NONEQUAL
37365: OR
37366: IFFALSE 37370
// exit ;
37368: GO 37943
// side := GetSide ( unit ) ;
37370: LD_ADDR_VAR 0 9
37374: PUSH
37375: LD_VAR 0 1
37379: PPUSH
37380: CALL_OW 255
37384: ST_TO_ADDR
// tech_space := tech_spacanom ;
37385: LD_ADDR_VAR 0 12
37389: PUSH
37390: LD_INT 29
37392: ST_TO_ADDR
// tech_time := tech_taurad ;
37393: LD_ADDR_VAR 0 13
37397: PUSH
37398: LD_INT 28
37400: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37401: LD_ADDR_VAR 0 11
37405: PUSH
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 310
37415: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37416: LD_VAR 0 11
37420: PPUSH
37421: CALL_OW 247
37425: PUSH
37426: LD_INT 2
37428: EQUAL
37429: IFFALSE 37433
// exit ;
37431: GO 37943
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37433: LD_ADDR_VAR 0 8
37437: PUSH
37438: LD_INT 81
37440: PUSH
37441: LD_VAR 0 9
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 3
37452: PUSH
37453: LD_INT 21
37455: PUSH
37456: LD_INT 3
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PPUSH
37471: CALL_OW 69
37475: ST_TO_ADDR
// if not tmp then
37476: LD_VAR 0 8
37480: NOT
37481: IFFALSE 37485
// exit ;
37483: GO 37943
// if in_unit then
37485: LD_VAR 0 11
37489: IFFALSE 37513
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37491: LD_ADDR_VAR 0 10
37495: PUSH
37496: LD_VAR 0 8
37500: PPUSH
37501: LD_VAR 0 11
37505: PPUSH
37506: CALL_OW 74
37510: ST_TO_ADDR
37511: GO 37533
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37513: LD_ADDR_VAR 0 10
37517: PUSH
37518: LD_VAR 0 8
37522: PPUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 74
37532: ST_TO_ADDR
// if not enemy then
37533: LD_VAR 0 10
37537: NOT
37538: IFFALSE 37542
// exit ;
37540: GO 37943
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37542: LD_VAR 0 11
37546: PUSH
37547: LD_VAR 0 11
37551: PPUSH
37552: LD_VAR 0 10
37556: PPUSH
37557: CALL_OW 296
37561: PUSH
37562: LD_INT 13
37564: GREATER
37565: AND
37566: PUSH
37567: LD_VAR 0 1
37571: PPUSH
37572: LD_VAR 0 10
37576: PPUSH
37577: CALL_OW 296
37581: PUSH
37582: LD_INT 12
37584: GREATER
37585: OR
37586: IFFALSE 37590
// exit ;
37588: GO 37943
// missile := [ 1 ] ;
37590: LD_ADDR_VAR 0 14
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: EMPTY
37599: LIST
37600: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37601: LD_VAR 0 9
37605: PPUSH
37606: LD_VAR 0 12
37610: PPUSH
37611: CALL_OW 325
37615: IFFALSE 37644
// missile := Replace ( missile , missile + 1 , 2 ) ;
37617: LD_ADDR_VAR 0 14
37621: PUSH
37622: LD_VAR 0 14
37626: PPUSH
37627: LD_VAR 0 14
37631: PUSH
37632: LD_INT 1
37634: PLUS
37635: PPUSH
37636: LD_INT 2
37638: PPUSH
37639: CALL_OW 1
37643: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37644: LD_VAR 0 9
37648: PPUSH
37649: LD_VAR 0 13
37653: PPUSH
37654: CALL_OW 325
37658: PUSH
37659: LD_VAR 0 10
37663: PPUSH
37664: CALL_OW 255
37668: PPUSH
37669: LD_VAR 0 13
37673: PPUSH
37674: CALL_OW 325
37678: NOT
37679: AND
37680: IFFALSE 37709
// missile := Replace ( missile , missile + 1 , 3 ) ;
37682: LD_ADDR_VAR 0 14
37686: PUSH
37687: LD_VAR 0 14
37691: PPUSH
37692: LD_VAR 0 14
37696: PUSH
37697: LD_INT 1
37699: PLUS
37700: PPUSH
37701: LD_INT 3
37703: PPUSH
37704: CALL_OW 1
37708: ST_TO_ADDR
// if missile < 2 then
37709: LD_VAR 0 14
37713: PUSH
37714: LD_INT 2
37716: LESS
37717: IFFALSE 37721
// exit ;
37719: GO 37943
// x := GetX ( enemy ) ;
37721: LD_ADDR_VAR 0 4
37725: PUSH
37726: LD_VAR 0 10
37730: PPUSH
37731: CALL_OW 250
37735: ST_TO_ADDR
// y := GetY ( enemy ) ;
37736: LD_ADDR_VAR 0 5
37740: PUSH
37741: LD_VAR 0 10
37745: PPUSH
37746: CALL_OW 251
37750: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37751: LD_ADDR_VAR 0 6
37755: PUSH
37756: LD_VAR 0 4
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PPUSH
37765: LD_INT 1
37767: PPUSH
37768: CALL_OW 12
37772: PLUS
37773: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37774: LD_ADDR_VAR 0 7
37778: PUSH
37779: LD_VAR 0 5
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PPUSH
37788: LD_INT 1
37790: PPUSH
37791: CALL_OW 12
37795: PLUS
37796: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37797: LD_VAR 0 6
37801: PPUSH
37802: LD_VAR 0 7
37806: PPUSH
37807: CALL_OW 488
37811: NOT
37812: IFFALSE 37834
// begin _x := x ;
37814: LD_ADDR_VAR 0 6
37818: PUSH
37819: LD_VAR 0 4
37823: ST_TO_ADDR
// _y := y ;
37824: LD_ADDR_VAR 0 7
37828: PUSH
37829: LD_VAR 0 5
37833: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_INT 1
37841: PPUSH
37842: LD_VAR 0 14
37846: PPUSH
37847: CALL_OW 12
37851: ST_TO_ADDR
// case i of 1 :
37852: LD_VAR 0 3
37856: PUSH
37857: LD_INT 1
37859: DOUBLE
37860: EQUAL
37861: IFTRUE 37865
37863: GO 37882
37865: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_VAR 0 10
37875: PPUSH
37876: CALL_OW 115
37880: GO 37943
37882: LD_INT 2
37884: DOUBLE
37885: EQUAL
37886: IFTRUE 37890
37888: GO 37912
37890: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37891: LD_VAR 0 1
37895: PPUSH
37896: LD_VAR 0 6
37900: PPUSH
37901: LD_VAR 0 7
37905: PPUSH
37906: CALL_OW 153
37910: GO 37943
37912: LD_INT 3
37914: DOUBLE
37915: EQUAL
37916: IFTRUE 37920
37918: GO 37942
37920: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37921: LD_VAR 0 1
37925: PPUSH
37926: LD_VAR 0 6
37930: PPUSH
37931: LD_VAR 0 7
37935: PPUSH
37936: CALL_OW 154
37940: GO 37943
37942: POP
// end ;
37943: LD_VAR 0 2
37947: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37948: LD_INT 0
37950: PPUSH
37951: PPUSH
37952: PPUSH
37953: PPUSH
37954: PPUSH
37955: PPUSH
// if not unit or not building then
37956: LD_VAR 0 1
37960: NOT
37961: PUSH
37962: LD_VAR 0 2
37966: NOT
37967: OR
37968: IFFALSE 37972
// exit ;
37970: GO 38130
// x := GetX ( building ) ;
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: LD_VAR 0 2
37981: PPUSH
37982: CALL_OW 250
37986: ST_TO_ADDR
// y := GetY ( building ) ;
37987: LD_ADDR_VAR 0 6
37991: PUSH
37992: LD_VAR 0 2
37996: PPUSH
37997: CALL_OW 251
38001: ST_TO_ADDR
// for i = 0 to 5 do
38002: LD_ADDR_VAR 0 4
38006: PUSH
38007: DOUBLE
38008: LD_INT 0
38010: DEC
38011: ST_TO_ADDR
38012: LD_INT 5
38014: PUSH
38015: FOR_TO
38016: IFFALSE 38128
// begin _x := ShiftX ( x , i , 3 ) ;
38018: LD_ADDR_VAR 0 7
38022: PUSH
38023: LD_VAR 0 5
38027: PPUSH
38028: LD_VAR 0 4
38032: PPUSH
38033: LD_INT 3
38035: PPUSH
38036: CALL_OW 272
38040: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38041: LD_ADDR_VAR 0 8
38045: PUSH
38046: LD_VAR 0 6
38050: PPUSH
38051: LD_VAR 0 4
38055: PPUSH
38056: LD_INT 3
38058: PPUSH
38059: CALL_OW 273
38063: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38064: LD_VAR 0 7
38068: PPUSH
38069: LD_VAR 0 8
38073: PPUSH
38074: CALL_OW 488
38078: NOT
38079: IFFALSE 38083
// continue ;
38081: GO 38015
// if HexInfo ( _x , _y ) = 0 then
38083: LD_VAR 0 7
38087: PPUSH
38088: LD_VAR 0 8
38092: PPUSH
38093: CALL_OW 428
38097: PUSH
38098: LD_INT 0
38100: EQUAL
38101: IFFALSE 38126
// begin ComMoveXY ( unit , _x , _y ) ;
38103: LD_VAR 0 1
38107: PPUSH
38108: LD_VAR 0 7
38112: PPUSH
38113: LD_VAR 0 8
38117: PPUSH
38118: CALL_OW 111
// exit ;
38122: POP
38123: POP
38124: GO 38130
// end ; end ;
38126: GO 38015
38128: POP
38129: POP
// end ;
38130: LD_VAR 0 3
38134: RET
// export function ScanBase ( side , base_area ) ; begin
38135: LD_INT 0
38137: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38138: LD_ADDR_VAR 0 3
38142: PUSH
38143: LD_VAR 0 2
38147: PPUSH
38148: LD_INT 81
38150: PUSH
38151: LD_VAR 0 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PPUSH
38160: CALL_OW 70
38164: ST_TO_ADDR
// end ;
38165: LD_VAR 0 3
38169: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38170: LD_INT 0
38172: PPUSH
38173: PPUSH
38174: PPUSH
38175: PPUSH
// result := false ;
38176: LD_ADDR_VAR 0 2
38180: PUSH
38181: LD_INT 0
38183: ST_TO_ADDR
// side := GetSide ( unit ) ;
38184: LD_ADDR_VAR 0 3
38188: PUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: CALL_OW 255
38198: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38199: LD_ADDR_VAR 0 4
38203: PUSH
38204: LD_VAR 0 1
38208: PPUSH
38209: CALL_OW 248
38213: ST_TO_ADDR
// case nat of 1 :
38214: LD_VAR 0 4
38218: PUSH
38219: LD_INT 1
38221: DOUBLE
38222: EQUAL
38223: IFTRUE 38227
38225: GO 38238
38227: POP
// tech := tech_lassight ; 2 :
38228: LD_ADDR_VAR 0 5
38232: PUSH
38233: LD_INT 12
38235: ST_TO_ADDR
38236: GO 38277
38238: LD_INT 2
38240: DOUBLE
38241: EQUAL
38242: IFTRUE 38246
38244: GO 38257
38246: POP
// tech := tech_mortar ; 3 :
38247: LD_ADDR_VAR 0 5
38251: PUSH
38252: LD_INT 41
38254: ST_TO_ADDR
38255: GO 38277
38257: LD_INT 3
38259: DOUBLE
38260: EQUAL
38261: IFTRUE 38265
38263: GO 38276
38265: POP
// tech := tech_bazooka ; end ;
38266: LD_ADDR_VAR 0 5
38270: PUSH
38271: LD_INT 44
38273: ST_TO_ADDR
38274: GO 38277
38276: POP
// if Researched ( side , tech ) then
38277: LD_VAR 0 3
38281: PPUSH
38282: LD_VAR 0 5
38286: PPUSH
38287: CALL_OW 325
38291: IFFALSE 38318
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38293: LD_ADDR_VAR 0 2
38297: PUSH
38298: LD_INT 5
38300: PUSH
38301: LD_INT 8
38303: PUSH
38304: LD_INT 9
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: PUSH
38312: LD_VAR 0 4
38316: ARRAY
38317: ST_TO_ADDR
// end ;
38318: LD_VAR 0 2
38322: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38323: LD_INT 0
38325: PPUSH
38326: PPUSH
38327: PPUSH
// if not mines then
38328: LD_VAR 0 2
38332: NOT
38333: IFFALSE 38337
// exit ;
38335: GO 38481
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38337: LD_ADDR_VAR 0 5
38341: PUSH
38342: LD_INT 81
38344: PUSH
38345: LD_VAR 0 1
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: LD_INT 21
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PPUSH
38375: CALL_OW 69
38379: ST_TO_ADDR
// for i in mines do
38380: LD_ADDR_VAR 0 4
38384: PUSH
38385: LD_VAR 0 2
38389: PUSH
38390: FOR_IN
38391: IFFALSE 38479
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38393: LD_VAR 0 4
38397: PUSH
38398: LD_INT 1
38400: ARRAY
38401: PPUSH
38402: LD_VAR 0 4
38406: PUSH
38407: LD_INT 2
38409: ARRAY
38410: PPUSH
38411: CALL_OW 458
38415: NOT
38416: IFFALSE 38420
// continue ;
38418: GO 38390
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38420: LD_VAR 0 4
38424: PUSH
38425: LD_INT 1
38427: ARRAY
38428: PPUSH
38429: LD_VAR 0 4
38433: PUSH
38434: LD_INT 2
38436: ARRAY
38437: PPUSH
38438: CALL_OW 428
38442: PUSH
38443: LD_VAR 0 5
38447: IN
38448: IFFALSE 38477
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38450: LD_VAR 0 4
38454: PUSH
38455: LD_INT 1
38457: ARRAY
38458: PPUSH
38459: LD_VAR 0 4
38463: PUSH
38464: LD_INT 2
38466: ARRAY
38467: PPUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL_OW 456
// end ;
38477: GO 38390
38479: POP
38480: POP
// end ;
38481: LD_VAR 0 3
38485: RET
// export function Count ( array ) ; begin
38486: LD_INT 0
38488: PPUSH
// result := array + 0 ;
38489: LD_ADDR_VAR 0 2
38493: PUSH
38494: LD_VAR 0 1
38498: PUSH
38499: LD_INT 0
38501: PLUS
38502: ST_TO_ADDR
// end ;
38503: LD_VAR 0 2
38507: RET
// export function IsEmpty ( building ) ; begin
38508: LD_INT 0
38510: PPUSH
// if not building then
38511: LD_VAR 0 1
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38563
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38520: LD_ADDR_VAR 0 2
38524: PUSH
38525: LD_VAR 0 1
38529: PUSH
38530: LD_INT 22
38532: PUSH
38533: LD_VAR 0 1
38537: PPUSH
38538: CALL_OW 255
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 58
38549: PUSH
38550: EMPTY
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PPUSH
38557: CALL_OW 69
38561: IN
38562: ST_TO_ADDR
// end ;
38563: LD_VAR 0 2
38567: RET
// export function IsNotFull ( building ) ; var places ; begin
38568: LD_INT 0
38570: PPUSH
38571: PPUSH
// if not building then
38572: LD_VAR 0 1
38576: NOT
38577: IFFALSE 38581
// exit ;
38579: GO 38609
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38581: LD_ADDR_VAR 0 2
38585: PUSH
38586: LD_VAR 0 1
38590: PPUSH
38591: LD_INT 3
38593: PUSH
38594: LD_INT 62
38596: PUSH
38597: EMPTY
38598: LIST
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PPUSH
38604: CALL_OW 72
38608: ST_TO_ADDR
// end ;
38609: LD_VAR 0 2
38613: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38614: LD_INT 0
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
// tmp := [ ] ;
38620: LD_ADDR_VAR 0 3
38624: PUSH
38625: EMPTY
38626: ST_TO_ADDR
// list := [ ] ;
38627: LD_ADDR_VAR 0 5
38631: PUSH
38632: EMPTY
38633: ST_TO_ADDR
// for i = 16 to 25 do
38634: LD_ADDR_VAR 0 4
38638: PUSH
38639: DOUBLE
38640: LD_INT 16
38642: DEC
38643: ST_TO_ADDR
38644: LD_INT 25
38646: PUSH
38647: FOR_TO
38648: IFFALSE 38721
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38650: LD_ADDR_VAR 0 3
38654: PUSH
38655: LD_VAR 0 3
38659: PUSH
38660: LD_INT 22
38662: PUSH
38663: LD_VAR 0 1
38667: PPUSH
38668: CALL_OW 255
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 91
38679: PUSH
38680: LD_VAR 0 1
38684: PUSH
38685: LD_INT 6
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 30
38695: PUSH
38696: LD_VAR 0 4
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: PPUSH
38713: CALL_OW 69
38717: ADD
38718: ST_TO_ADDR
38719: GO 38647
38721: POP
38722: POP
// for i = 1 to tmp do
38723: LD_ADDR_VAR 0 4
38727: PUSH
38728: DOUBLE
38729: LD_INT 1
38731: DEC
38732: ST_TO_ADDR
38733: LD_VAR 0 3
38737: PUSH
38738: FOR_TO
38739: IFFALSE 38827
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38741: LD_ADDR_VAR 0 5
38745: PUSH
38746: LD_VAR 0 5
38750: PUSH
38751: LD_VAR 0 3
38755: PUSH
38756: LD_VAR 0 4
38760: ARRAY
38761: PPUSH
38762: CALL_OW 266
38766: PUSH
38767: LD_VAR 0 3
38771: PUSH
38772: LD_VAR 0 4
38776: ARRAY
38777: PPUSH
38778: CALL_OW 250
38782: PUSH
38783: LD_VAR 0 3
38787: PUSH
38788: LD_VAR 0 4
38792: ARRAY
38793: PPUSH
38794: CALL_OW 251
38798: PUSH
38799: LD_VAR 0 3
38803: PUSH
38804: LD_VAR 0 4
38808: ARRAY
38809: PPUSH
38810: CALL_OW 254
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: PUSH
38821: EMPTY
38822: LIST
38823: ADD
38824: ST_TO_ADDR
38825: GO 38738
38827: POP
38828: POP
// result := list ;
38829: LD_ADDR_VAR 0 2
38833: PUSH
38834: LD_VAR 0 5
38838: ST_TO_ADDR
// end ;
38839: LD_VAR 0 2
38843: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38844: LD_INT 0
38846: PPUSH
38847: PPUSH
38848: PPUSH
38849: PPUSH
38850: PPUSH
38851: PPUSH
38852: PPUSH
// if not factory then
38853: LD_VAR 0 1
38857: NOT
38858: IFFALSE 38862
// exit ;
38860: GO 39455
// if control = control_apeman then
38862: LD_VAR 0 4
38866: PUSH
38867: LD_INT 5
38869: EQUAL
38870: IFFALSE 38979
// begin tmp := UnitsInside ( factory ) ;
38872: LD_ADDR_VAR 0 8
38876: PUSH
38877: LD_VAR 0 1
38881: PPUSH
38882: CALL_OW 313
38886: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38887: LD_VAR 0 8
38891: PPUSH
38892: LD_INT 25
38894: PUSH
38895: LD_INT 12
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PPUSH
38902: CALL_OW 72
38906: NOT
38907: IFFALSE 38917
// control := control_manual ;
38909: LD_ADDR_VAR 0 4
38913: PUSH
38914: LD_INT 1
38916: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38917: LD_ADDR_VAR 0 8
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: CALL 38614 0 1
38931: ST_TO_ADDR
// if tmp then
38932: LD_VAR 0 8
38936: IFFALSE 38979
// begin for i in tmp do
38938: LD_ADDR_VAR 0 7
38942: PUSH
38943: LD_VAR 0 8
38947: PUSH
38948: FOR_IN
38949: IFFALSE 38977
// if i [ 1 ] = b_ext_radio then
38951: LD_VAR 0 7
38955: PUSH
38956: LD_INT 1
38958: ARRAY
38959: PUSH
38960: LD_INT 22
38962: EQUAL
38963: IFFALSE 38975
// begin control := control_remote ;
38965: LD_ADDR_VAR 0 4
38969: PUSH
38970: LD_INT 2
38972: ST_TO_ADDR
// break ;
38973: GO 38977
// end ;
38975: GO 38948
38977: POP
38978: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38979: LD_VAR 0 1
38983: PPUSH
38984: LD_VAR 0 2
38988: PPUSH
38989: LD_VAR 0 3
38993: PPUSH
38994: LD_VAR 0 4
38998: PPUSH
38999: LD_VAR 0 5
39003: PPUSH
39004: CALL_OW 448
39008: IFFALSE 39043
// begin result := [ chassis , engine , control , weapon ] ;
39010: LD_ADDR_VAR 0 6
39014: PUSH
39015: LD_VAR 0 2
39019: PUSH
39020: LD_VAR 0 3
39024: PUSH
39025: LD_VAR 0 4
39029: PUSH
39030: LD_VAR 0 5
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: ST_TO_ADDR
// exit ;
39041: GO 39455
// end ; _chassis := AvailableChassisList ( factory ) ;
39043: LD_ADDR_VAR 0 9
39047: PUSH
39048: LD_VAR 0 1
39052: PPUSH
39053: CALL_OW 475
39057: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39058: LD_ADDR_VAR 0 11
39062: PUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 476
39072: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39073: LD_ADDR_VAR 0 12
39077: PUSH
39078: LD_VAR 0 1
39082: PPUSH
39083: CALL_OW 477
39087: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39088: LD_ADDR_VAR 0 10
39092: PUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 478
39102: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39103: LD_VAR 0 9
39107: NOT
39108: PUSH
39109: LD_VAR 0 11
39113: NOT
39114: OR
39115: PUSH
39116: LD_VAR 0 12
39120: NOT
39121: OR
39122: PUSH
39123: LD_VAR 0 10
39127: NOT
39128: OR
39129: IFFALSE 39164
// begin result := [ chassis , engine , control , weapon ] ;
39131: LD_ADDR_VAR 0 6
39135: PUSH
39136: LD_VAR 0 2
39140: PUSH
39141: LD_VAR 0 3
39145: PUSH
39146: LD_VAR 0 4
39150: PUSH
39151: LD_VAR 0 5
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// exit ;
39162: GO 39455
// end ; if not chassis in _chassis then
39164: LD_VAR 0 2
39168: PUSH
39169: LD_VAR 0 9
39173: IN
39174: NOT
39175: IFFALSE 39201
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39177: LD_ADDR_VAR 0 2
39181: PUSH
39182: LD_VAR 0 9
39186: PUSH
39187: LD_INT 1
39189: PPUSH
39190: LD_VAR 0 9
39194: PPUSH
39195: CALL_OW 12
39199: ARRAY
39200: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39201: LD_VAR 0 2
39205: PPUSH
39206: LD_VAR 0 3
39210: PPUSH
39211: CALL 39460 0 2
39215: NOT
39216: IFFALSE 39275
// repeat engine := _engine [ 1 ] ;
39218: LD_ADDR_VAR 0 3
39222: PUSH
39223: LD_VAR 0 11
39227: PUSH
39228: LD_INT 1
39230: ARRAY
39231: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39232: LD_ADDR_VAR 0 11
39236: PUSH
39237: LD_VAR 0 11
39241: PPUSH
39242: LD_INT 1
39244: PPUSH
39245: CALL_OW 3
39249: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39250: LD_VAR 0 2
39254: PPUSH
39255: LD_VAR 0 3
39259: PPUSH
39260: CALL 39460 0 2
39264: PUSH
39265: LD_VAR 0 11
39269: PUSH
39270: EMPTY
39271: EQUAL
39272: OR
39273: IFFALSE 39218
// if not control in _control then
39275: LD_VAR 0 4
39279: PUSH
39280: LD_VAR 0 12
39284: IN
39285: NOT
39286: IFFALSE 39312
// control := _control [ rand ( 1 , _control ) ] ;
39288: LD_ADDR_VAR 0 4
39292: PUSH
39293: LD_VAR 0 12
39297: PUSH
39298: LD_INT 1
39300: PPUSH
39301: LD_VAR 0 12
39305: PPUSH
39306: CALL_OW 12
39310: ARRAY
39311: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39312: LD_VAR 0 2
39316: PPUSH
39317: LD_VAR 0 5
39321: PPUSH
39322: CALL 39680 0 2
39326: NOT
39327: IFFALSE 39386
// repeat weapon := _weapon [ 1 ] ;
39329: LD_ADDR_VAR 0 5
39333: PUSH
39334: LD_VAR 0 10
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39343: LD_ADDR_VAR 0 10
39347: PUSH
39348: LD_VAR 0 10
39352: PPUSH
39353: LD_INT 1
39355: PPUSH
39356: CALL_OW 3
39360: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39361: LD_VAR 0 2
39365: PPUSH
39366: LD_VAR 0 5
39370: PPUSH
39371: CALL 39680 0 2
39375: PUSH
39376: LD_VAR 0 10
39380: PUSH
39381: EMPTY
39382: EQUAL
39383: OR
39384: IFFALSE 39329
// result := [ ] ;
39386: LD_ADDR_VAR 0 6
39390: PUSH
39391: EMPTY
39392: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39393: LD_VAR 0 1
39397: PPUSH
39398: LD_VAR 0 2
39402: PPUSH
39403: LD_VAR 0 3
39407: PPUSH
39408: LD_VAR 0 4
39412: PPUSH
39413: LD_VAR 0 5
39417: PPUSH
39418: CALL_OW 448
39422: IFFALSE 39455
// result := [ chassis , engine , control , weapon ] ;
39424: LD_ADDR_VAR 0 6
39428: PUSH
39429: LD_VAR 0 2
39433: PUSH
39434: LD_VAR 0 3
39438: PUSH
39439: LD_VAR 0 4
39443: PUSH
39444: LD_VAR 0 5
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// end ;
39455: LD_VAR 0 6
39459: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39460: LD_INT 0
39462: PPUSH
// if not chassis or not engine then
39463: LD_VAR 0 1
39467: NOT
39468: PUSH
39469: LD_VAR 0 2
39473: NOT
39474: OR
39475: IFFALSE 39479
// exit ;
39477: GO 39675
// case engine of engine_solar :
39479: LD_VAR 0 2
39483: PUSH
39484: LD_INT 2
39486: DOUBLE
39487: EQUAL
39488: IFTRUE 39492
39490: GO 39530
39492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39493: LD_ADDR_VAR 0 3
39497: PUSH
39498: LD_INT 11
39500: PUSH
39501: LD_INT 12
39503: PUSH
39504: LD_INT 13
39506: PUSH
39507: LD_INT 14
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 3
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: ST_TO_ADDR
39528: GO 39659
39530: LD_INT 1
39532: DOUBLE
39533: EQUAL
39534: IFTRUE 39538
39536: GO 39600
39538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39539: LD_ADDR_VAR 0 3
39543: PUSH
39544: LD_INT 11
39546: PUSH
39547: LD_INT 12
39549: PUSH
39550: LD_INT 13
39552: PUSH
39553: LD_INT 14
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: LD_INT 4
39567: PUSH
39568: LD_INT 5
39570: PUSH
39571: LD_INT 21
39573: PUSH
39574: LD_INT 23
39576: PUSH
39577: LD_INT 22
39579: PUSH
39580: LD_INT 24
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: ST_TO_ADDR
39598: GO 39659
39600: LD_INT 3
39602: DOUBLE
39603: EQUAL
39604: IFTRUE 39608
39606: GO 39658
39608: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39609: LD_ADDR_VAR 0 3
39613: PUSH
39614: LD_INT 13
39616: PUSH
39617: LD_INT 14
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 4
39628: PUSH
39629: LD_INT 5
39631: PUSH
39632: LD_INT 21
39634: PUSH
39635: LD_INT 22
39637: PUSH
39638: LD_INT 23
39640: PUSH
39641: LD_INT 24
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: ST_TO_ADDR
39656: GO 39659
39658: POP
// result := ( chassis in result ) ;
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_VAR 0 1
39668: PUSH
39669: LD_VAR 0 3
39673: IN
39674: ST_TO_ADDR
// end ;
39675: LD_VAR 0 3
39679: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39680: LD_INT 0
39682: PPUSH
// if not chassis or not weapon then
39683: LD_VAR 0 1
39687: NOT
39688: PUSH
39689: LD_VAR 0 2
39693: NOT
39694: OR
39695: IFFALSE 39699
// exit ;
39697: GO 40759
// case weapon of us_machine_gun :
39699: LD_VAR 0 2
39703: PUSH
39704: LD_INT 2
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39712
39710: GO 39742
39712: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39713: LD_ADDR_VAR 0 3
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: LD_INT 4
39729: PUSH
39730: LD_INT 5
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: ST_TO_ADDR
39740: GO 40743
39742: LD_INT 3
39744: DOUBLE
39745: EQUAL
39746: IFTRUE 39750
39748: GO 39780
39750: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39751: LD_ADDR_VAR 0 3
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: LD_INT 3
39764: PUSH
39765: LD_INT 4
39767: PUSH
39768: LD_INT 5
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: ST_TO_ADDR
39778: GO 40743
39780: LD_INT 11
39782: DOUBLE
39783: EQUAL
39784: IFTRUE 39788
39786: GO 39818
39788: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39789: LD_ADDR_VAR 0 3
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: LD_INT 4
39805: PUSH
39806: LD_INT 5
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: ST_TO_ADDR
39816: GO 40743
39818: LD_INT 4
39820: DOUBLE
39821: EQUAL
39822: IFTRUE 39826
39824: GO 39852
39826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39827: LD_ADDR_VAR 0 3
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: LD_INT 4
39840: PUSH
39841: LD_INT 5
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: ST_TO_ADDR
39850: GO 40743
39852: LD_INT 5
39854: DOUBLE
39855: EQUAL
39856: IFTRUE 39860
39858: GO 39886
39860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39861: LD_ADDR_VAR 0 3
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 3
39871: PUSH
39872: LD_INT 4
39874: PUSH
39875: LD_INT 5
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: ST_TO_ADDR
39884: GO 40743
39886: LD_INT 9
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39894
39892: GO 39920
39894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39895: LD_ADDR_VAR 0 3
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: LD_INT 4
39908: PUSH
39909: LD_INT 5
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: ST_TO_ADDR
39918: GO 40743
39920: LD_INT 7
39922: DOUBLE
39923: EQUAL
39924: IFTRUE 39928
39926: GO 39954
39928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39929: LD_ADDR_VAR 0 3
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 3
39939: PUSH
39940: LD_INT 4
39942: PUSH
39943: LD_INT 5
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: ST_TO_ADDR
39952: GO 40743
39954: LD_INT 12
39956: DOUBLE
39957: EQUAL
39958: IFTRUE 39962
39960: GO 39988
39962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39963: LD_ADDR_VAR 0 3
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: LD_INT 4
39976: PUSH
39977: LD_INT 5
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: ST_TO_ADDR
39986: GO 40743
39988: LD_INT 13
39990: DOUBLE
39991: EQUAL
39992: IFTRUE 39996
39994: GO 40022
39996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39997: LD_ADDR_VAR 0 3
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 3
40007: PUSH
40008: LD_INT 4
40010: PUSH
40011: LD_INT 5
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: ST_TO_ADDR
40020: GO 40743
40022: LD_INT 14
40024: DOUBLE
40025: EQUAL
40026: IFTRUE 40030
40028: GO 40048
40030: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40031: LD_ADDR_VAR 0 3
40035: PUSH
40036: LD_INT 4
40038: PUSH
40039: LD_INT 5
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: ST_TO_ADDR
40046: GO 40743
40048: LD_INT 6
40050: DOUBLE
40051: EQUAL
40052: IFTRUE 40056
40054: GO 40074
40056: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_INT 4
40064: PUSH
40065: LD_INT 5
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: ST_TO_ADDR
40072: GO 40743
40074: LD_INT 10
40076: DOUBLE
40077: EQUAL
40078: IFTRUE 40082
40080: GO 40100
40082: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40083: LD_ADDR_VAR 0 3
40087: PUSH
40088: LD_INT 4
40090: PUSH
40091: LD_INT 5
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: ST_TO_ADDR
40098: GO 40743
40100: LD_INT 22
40102: DOUBLE
40103: EQUAL
40104: IFTRUE 40108
40106: GO 40134
40108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40109: LD_ADDR_VAR 0 3
40113: PUSH
40114: LD_INT 11
40116: PUSH
40117: LD_INT 12
40119: PUSH
40120: LD_INT 13
40122: PUSH
40123: LD_INT 14
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: ST_TO_ADDR
40132: GO 40743
40134: LD_INT 23
40136: DOUBLE
40137: EQUAL
40138: IFTRUE 40142
40140: GO 40168
40142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40143: LD_ADDR_VAR 0 3
40147: PUSH
40148: LD_INT 11
40150: PUSH
40151: LD_INT 12
40153: PUSH
40154: LD_INT 13
40156: PUSH
40157: LD_INT 14
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: ST_TO_ADDR
40166: GO 40743
40168: LD_INT 24
40170: DOUBLE
40171: EQUAL
40172: IFTRUE 40176
40174: GO 40202
40176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40177: LD_ADDR_VAR 0 3
40181: PUSH
40182: LD_INT 11
40184: PUSH
40185: LD_INT 12
40187: PUSH
40188: LD_INT 13
40190: PUSH
40191: LD_INT 14
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: ST_TO_ADDR
40200: GO 40743
40202: LD_INT 30
40204: DOUBLE
40205: EQUAL
40206: IFTRUE 40210
40208: GO 40236
40210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40211: LD_ADDR_VAR 0 3
40215: PUSH
40216: LD_INT 11
40218: PUSH
40219: LD_INT 12
40221: PUSH
40222: LD_INT 13
40224: PUSH
40225: LD_INT 14
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: ST_TO_ADDR
40234: GO 40743
40236: LD_INT 25
40238: DOUBLE
40239: EQUAL
40240: IFTRUE 40244
40242: GO 40262
40244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40245: LD_ADDR_VAR 0 3
40249: PUSH
40250: LD_INT 13
40252: PUSH
40253: LD_INT 14
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: ST_TO_ADDR
40260: GO 40743
40262: LD_INT 27
40264: DOUBLE
40265: EQUAL
40266: IFTRUE 40270
40268: GO 40288
40270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40271: LD_ADDR_VAR 0 3
40275: PUSH
40276: LD_INT 13
40278: PUSH
40279: LD_INT 14
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: ST_TO_ADDR
40286: GO 40743
40288: LD_INT 92
40290: DOUBLE
40291: EQUAL
40292: IFTRUE 40296
40294: GO 40322
40296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40297: LD_ADDR_VAR 0 3
40301: PUSH
40302: LD_INT 11
40304: PUSH
40305: LD_INT 12
40307: PUSH
40308: LD_INT 13
40310: PUSH
40311: LD_INT 14
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: ST_TO_ADDR
40320: GO 40743
40322: LD_INT 28
40324: DOUBLE
40325: EQUAL
40326: IFTRUE 40330
40328: GO 40348
40330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40331: LD_ADDR_VAR 0 3
40335: PUSH
40336: LD_INT 13
40338: PUSH
40339: LD_INT 14
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: ST_TO_ADDR
40346: GO 40743
40348: LD_INT 29
40350: DOUBLE
40351: EQUAL
40352: IFTRUE 40356
40354: GO 40374
40356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40357: LD_ADDR_VAR 0 3
40361: PUSH
40362: LD_INT 13
40364: PUSH
40365: LD_INT 14
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: ST_TO_ADDR
40372: GO 40743
40374: LD_INT 31
40376: DOUBLE
40377: EQUAL
40378: IFTRUE 40382
40380: GO 40400
40382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40383: LD_ADDR_VAR 0 3
40387: PUSH
40388: LD_INT 13
40390: PUSH
40391: LD_INT 14
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: ST_TO_ADDR
40398: GO 40743
40400: LD_INT 26
40402: DOUBLE
40403: EQUAL
40404: IFTRUE 40408
40406: GO 40426
40408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40409: LD_ADDR_VAR 0 3
40413: PUSH
40414: LD_INT 13
40416: PUSH
40417: LD_INT 14
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: ST_TO_ADDR
40424: GO 40743
40426: LD_INT 42
40428: DOUBLE
40429: EQUAL
40430: IFTRUE 40434
40432: GO 40460
40434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40435: LD_ADDR_VAR 0 3
40439: PUSH
40440: LD_INT 21
40442: PUSH
40443: LD_INT 22
40445: PUSH
40446: LD_INT 23
40448: PUSH
40449: LD_INT 24
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: ST_TO_ADDR
40458: GO 40743
40460: LD_INT 43
40462: DOUBLE
40463: EQUAL
40464: IFTRUE 40468
40466: GO 40494
40468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40469: LD_ADDR_VAR 0 3
40473: PUSH
40474: LD_INT 21
40476: PUSH
40477: LD_INT 22
40479: PUSH
40480: LD_INT 23
40482: PUSH
40483: LD_INT 24
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: ST_TO_ADDR
40492: GO 40743
40494: LD_INT 44
40496: DOUBLE
40497: EQUAL
40498: IFTRUE 40502
40500: GO 40528
40502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40503: LD_ADDR_VAR 0 3
40507: PUSH
40508: LD_INT 21
40510: PUSH
40511: LD_INT 22
40513: PUSH
40514: LD_INT 23
40516: PUSH
40517: LD_INT 24
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
40526: GO 40743
40528: LD_INT 45
40530: DOUBLE
40531: EQUAL
40532: IFTRUE 40536
40534: GO 40562
40536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_INT 21
40544: PUSH
40545: LD_INT 22
40547: PUSH
40548: LD_INT 23
40550: PUSH
40551: LD_INT 24
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: ST_TO_ADDR
40560: GO 40743
40562: LD_INT 49
40564: DOUBLE
40565: EQUAL
40566: IFTRUE 40570
40568: GO 40596
40570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40571: LD_ADDR_VAR 0 3
40575: PUSH
40576: LD_INT 21
40578: PUSH
40579: LD_INT 22
40581: PUSH
40582: LD_INT 23
40584: PUSH
40585: LD_INT 24
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: ST_TO_ADDR
40594: GO 40743
40596: LD_INT 51
40598: DOUBLE
40599: EQUAL
40600: IFTRUE 40604
40602: GO 40630
40604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40605: LD_ADDR_VAR 0 3
40609: PUSH
40610: LD_INT 21
40612: PUSH
40613: LD_INT 22
40615: PUSH
40616: LD_INT 23
40618: PUSH
40619: LD_INT 24
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
40628: GO 40743
40630: LD_INT 52
40632: DOUBLE
40633: EQUAL
40634: IFTRUE 40638
40636: GO 40664
40638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: LD_INT 21
40646: PUSH
40647: LD_INT 22
40649: PUSH
40650: LD_INT 23
40652: PUSH
40653: LD_INT 24
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: ST_TO_ADDR
40662: GO 40743
40664: LD_INT 53
40666: DOUBLE
40667: EQUAL
40668: IFTRUE 40672
40670: GO 40690
40672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40673: LD_ADDR_VAR 0 3
40677: PUSH
40678: LD_INT 23
40680: PUSH
40681: LD_INT 24
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: ST_TO_ADDR
40688: GO 40743
40690: LD_INT 46
40692: DOUBLE
40693: EQUAL
40694: IFTRUE 40698
40696: GO 40716
40698: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40699: LD_ADDR_VAR 0 3
40703: PUSH
40704: LD_INT 23
40706: PUSH
40707: LD_INT 24
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: ST_TO_ADDR
40714: GO 40743
40716: LD_INT 47
40718: DOUBLE
40719: EQUAL
40720: IFTRUE 40724
40722: GO 40742
40724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40725: LD_ADDR_VAR 0 3
40729: PUSH
40730: LD_INT 23
40732: PUSH
40733: LD_INT 24
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: ST_TO_ADDR
40740: GO 40743
40742: POP
// result := ( chassis in result ) ;
40743: LD_ADDR_VAR 0 3
40747: PUSH
40748: LD_VAR 0 1
40752: PUSH
40753: LD_VAR 0 3
40757: IN
40758: ST_TO_ADDR
// end ;
40759: LD_VAR 0 3
40763: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40764: LD_INT 0
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
// result := array ;
40773: LD_ADDR_VAR 0 5
40777: PUSH
40778: LD_VAR 0 1
40782: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40783: LD_VAR 0 1
40787: NOT
40788: PUSH
40789: LD_VAR 0 2
40793: NOT
40794: OR
40795: PUSH
40796: LD_VAR 0 3
40800: NOT
40801: OR
40802: PUSH
40803: LD_VAR 0 2
40807: PUSH
40808: LD_VAR 0 1
40812: GREATER
40813: OR
40814: PUSH
40815: LD_VAR 0 3
40819: PUSH
40820: LD_VAR 0 1
40824: GREATER
40825: OR
40826: IFFALSE 40830
// exit ;
40828: GO 41126
// if direction then
40830: LD_VAR 0 4
40834: IFFALSE 40898
// begin d := 1 ;
40836: LD_ADDR_VAR 0 9
40840: PUSH
40841: LD_INT 1
40843: ST_TO_ADDR
// if i_from > i_to then
40844: LD_VAR 0 2
40848: PUSH
40849: LD_VAR 0 3
40853: GREATER
40854: IFFALSE 40880
// length := ( array - i_from ) + i_to else
40856: LD_ADDR_VAR 0 11
40860: PUSH
40861: LD_VAR 0 1
40865: PUSH
40866: LD_VAR 0 2
40870: MINUS
40871: PUSH
40872: LD_VAR 0 3
40876: PLUS
40877: ST_TO_ADDR
40878: GO 40896
// length := i_to - i_from ;
40880: LD_ADDR_VAR 0 11
40884: PUSH
40885: LD_VAR 0 3
40889: PUSH
40890: LD_VAR 0 2
40894: MINUS
40895: ST_TO_ADDR
// end else
40896: GO 40959
// begin d := - 1 ;
40898: LD_ADDR_VAR 0 9
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: ST_TO_ADDR
// if i_from > i_to then
40907: LD_VAR 0 2
40911: PUSH
40912: LD_VAR 0 3
40916: GREATER
40917: IFFALSE 40937
// length := i_from - i_to else
40919: LD_ADDR_VAR 0 11
40923: PUSH
40924: LD_VAR 0 2
40928: PUSH
40929: LD_VAR 0 3
40933: MINUS
40934: ST_TO_ADDR
40935: GO 40959
// length := ( array - i_to ) + i_from ;
40937: LD_ADDR_VAR 0 11
40941: PUSH
40942: LD_VAR 0 1
40946: PUSH
40947: LD_VAR 0 3
40951: MINUS
40952: PUSH
40953: LD_VAR 0 2
40957: PLUS
40958: ST_TO_ADDR
// end ; if not length then
40959: LD_VAR 0 11
40963: NOT
40964: IFFALSE 40968
// exit ;
40966: GO 41126
// tmp := array ;
40968: LD_ADDR_VAR 0 10
40972: PUSH
40973: LD_VAR 0 1
40977: ST_TO_ADDR
// for i = 1 to length do
40978: LD_ADDR_VAR 0 6
40982: PUSH
40983: DOUBLE
40984: LD_INT 1
40986: DEC
40987: ST_TO_ADDR
40988: LD_VAR 0 11
40992: PUSH
40993: FOR_TO
40994: IFFALSE 41114
// begin for j = 1 to array do
40996: LD_ADDR_VAR 0 7
41000: PUSH
41001: DOUBLE
41002: LD_INT 1
41004: DEC
41005: ST_TO_ADDR
41006: LD_VAR 0 1
41010: PUSH
41011: FOR_TO
41012: IFFALSE 41100
// begin k := j + d ;
41014: LD_ADDR_VAR 0 8
41018: PUSH
41019: LD_VAR 0 7
41023: PUSH
41024: LD_VAR 0 9
41028: PLUS
41029: ST_TO_ADDR
// if k > array then
41030: LD_VAR 0 8
41034: PUSH
41035: LD_VAR 0 1
41039: GREATER
41040: IFFALSE 41050
// k := 1 ;
41042: LD_ADDR_VAR 0 8
41046: PUSH
41047: LD_INT 1
41049: ST_TO_ADDR
// if not k then
41050: LD_VAR 0 8
41054: NOT
41055: IFFALSE 41067
// k := array ;
41057: LD_ADDR_VAR 0 8
41061: PUSH
41062: LD_VAR 0 1
41066: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41067: LD_ADDR_VAR 0 10
41071: PUSH
41072: LD_VAR 0 10
41076: PPUSH
41077: LD_VAR 0 8
41081: PPUSH
41082: LD_VAR 0 1
41086: PUSH
41087: LD_VAR 0 7
41091: ARRAY
41092: PPUSH
41093: CALL_OW 1
41097: ST_TO_ADDR
// end ;
41098: GO 41011
41100: POP
41101: POP
// array := tmp ;
41102: LD_ADDR_VAR 0 1
41106: PUSH
41107: LD_VAR 0 10
41111: ST_TO_ADDR
// end ;
41112: GO 40993
41114: POP
41115: POP
// result := array ;
41116: LD_ADDR_VAR 0 5
41120: PUSH
41121: LD_VAR 0 1
41125: ST_TO_ADDR
// end ;
41126: LD_VAR 0 5
41130: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41131: LD_INT 0
41133: PPUSH
41134: PPUSH
// result := 0 ;
41135: LD_ADDR_VAR 0 3
41139: PUSH
41140: LD_INT 0
41142: ST_TO_ADDR
// if not array or not value in array then
41143: LD_VAR 0 1
41147: NOT
41148: PUSH
41149: LD_VAR 0 2
41153: PUSH
41154: LD_VAR 0 1
41158: IN
41159: NOT
41160: OR
41161: IFFALSE 41165
// exit ;
41163: GO 41219
// for i = 1 to array do
41165: LD_ADDR_VAR 0 4
41169: PUSH
41170: DOUBLE
41171: LD_INT 1
41173: DEC
41174: ST_TO_ADDR
41175: LD_VAR 0 1
41179: PUSH
41180: FOR_TO
41181: IFFALSE 41217
// if value = array [ i ] then
41183: LD_VAR 0 2
41187: PUSH
41188: LD_VAR 0 1
41192: PUSH
41193: LD_VAR 0 4
41197: ARRAY
41198: EQUAL
41199: IFFALSE 41215
// begin result := i ;
41201: LD_ADDR_VAR 0 3
41205: PUSH
41206: LD_VAR 0 4
41210: ST_TO_ADDR
// exit ;
41211: POP
41212: POP
41213: GO 41219
// end ;
41215: GO 41180
41217: POP
41218: POP
// end ;
41219: LD_VAR 0 3
41223: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41224: LD_INT 0
41226: PPUSH
// vc_chassis := chassis ;
41227: LD_ADDR_OWVAR 37
41231: PUSH
41232: LD_VAR 0 1
41236: ST_TO_ADDR
// vc_engine := engine ;
41237: LD_ADDR_OWVAR 39
41241: PUSH
41242: LD_VAR 0 2
41246: ST_TO_ADDR
// vc_control := control ;
41247: LD_ADDR_OWVAR 38
41251: PUSH
41252: LD_VAR 0 3
41256: ST_TO_ADDR
// vc_weapon := weapon ;
41257: LD_ADDR_OWVAR 40
41261: PUSH
41262: LD_VAR 0 4
41266: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41267: LD_ADDR_OWVAR 41
41271: PUSH
41272: LD_VAR 0 5
41276: ST_TO_ADDR
// end ;
41277: LD_VAR 0 6
41281: RET
// export function WantPlant ( unit ) ; var task ; begin
41282: LD_INT 0
41284: PPUSH
41285: PPUSH
// result := false ;
41286: LD_ADDR_VAR 0 2
41290: PUSH
41291: LD_INT 0
41293: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41294: LD_ADDR_VAR 0 3
41298: PUSH
41299: LD_VAR 0 1
41303: PPUSH
41304: CALL_OW 437
41308: ST_TO_ADDR
// if task then
41309: LD_VAR 0 3
41313: IFFALSE 41341
// if task [ 1 ] [ 1 ] = p then
41315: LD_VAR 0 3
41319: PUSH
41320: LD_INT 1
41322: ARRAY
41323: PUSH
41324: LD_INT 1
41326: ARRAY
41327: PUSH
41328: LD_STRING p
41330: EQUAL
41331: IFFALSE 41341
// result := true ;
41333: LD_ADDR_VAR 0 2
41337: PUSH
41338: LD_INT 1
41340: ST_TO_ADDR
// end ;
41341: LD_VAR 0 2
41345: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41346: LD_INT 0
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
// if pos < 1 then
41352: LD_VAR 0 2
41356: PUSH
41357: LD_INT 1
41359: LESS
41360: IFFALSE 41364
// exit ;
41362: GO 41667
// if pos = 1 then
41364: LD_VAR 0 2
41368: PUSH
41369: LD_INT 1
41371: EQUAL
41372: IFFALSE 41405
// result := Replace ( arr , pos [ 1 ] , value ) else
41374: LD_ADDR_VAR 0 4
41378: PUSH
41379: LD_VAR 0 1
41383: PPUSH
41384: LD_VAR 0 2
41388: PUSH
41389: LD_INT 1
41391: ARRAY
41392: PPUSH
41393: LD_VAR 0 3
41397: PPUSH
41398: CALL_OW 1
41402: ST_TO_ADDR
41403: GO 41667
// begin tmp := arr ;
41405: LD_ADDR_VAR 0 6
41409: PUSH
41410: LD_VAR 0 1
41414: ST_TO_ADDR
// s_arr := [ tmp ] ;
41415: LD_ADDR_VAR 0 7
41419: PUSH
41420: LD_VAR 0 6
41424: PUSH
41425: EMPTY
41426: LIST
41427: ST_TO_ADDR
// for i = 1 to pos - 1 do
41428: LD_ADDR_VAR 0 5
41432: PUSH
41433: DOUBLE
41434: LD_INT 1
41436: DEC
41437: ST_TO_ADDR
41438: LD_VAR 0 2
41442: PUSH
41443: LD_INT 1
41445: MINUS
41446: PUSH
41447: FOR_TO
41448: IFFALSE 41493
// begin tmp := tmp [ pos [ i ] ] ;
41450: LD_ADDR_VAR 0 6
41454: PUSH
41455: LD_VAR 0 6
41459: PUSH
41460: LD_VAR 0 2
41464: PUSH
41465: LD_VAR 0 5
41469: ARRAY
41470: ARRAY
41471: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41472: LD_ADDR_VAR 0 7
41476: PUSH
41477: LD_VAR 0 7
41481: PUSH
41482: LD_VAR 0 6
41486: PUSH
41487: EMPTY
41488: LIST
41489: ADD
41490: ST_TO_ADDR
// end ;
41491: GO 41447
41493: POP
41494: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41495: LD_ADDR_VAR 0 6
41499: PUSH
41500: LD_VAR 0 6
41504: PPUSH
41505: LD_VAR 0 2
41509: PUSH
41510: LD_VAR 0 2
41514: ARRAY
41515: PPUSH
41516: LD_VAR 0 3
41520: PPUSH
41521: CALL_OW 1
41525: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41526: LD_ADDR_VAR 0 7
41530: PUSH
41531: LD_VAR 0 7
41535: PPUSH
41536: LD_VAR 0 7
41540: PPUSH
41541: LD_VAR 0 6
41545: PPUSH
41546: CALL_OW 1
41550: ST_TO_ADDR
// for i = s_arr downto 2 do
41551: LD_ADDR_VAR 0 5
41555: PUSH
41556: DOUBLE
41557: LD_VAR 0 7
41561: INC
41562: ST_TO_ADDR
41563: LD_INT 2
41565: PUSH
41566: FOR_DOWNTO
41567: IFFALSE 41651
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41569: LD_ADDR_VAR 0 6
41573: PUSH
41574: LD_VAR 0 7
41578: PUSH
41579: LD_VAR 0 5
41583: PUSH
41584: LD_INT 1
41586: MINUS
41587: ARRAY
41588: PPUSH
41589: LD_VAR 0 2
41593: PUSH
41594: LD_VAR 0 5
41598: PUSH
41599: LD_INT 1
41601: MINUS
41602: ARRAY
41603: PPUSH
41604: LD_VAR 0 7
41608: PUSH
41609: LD_VAR 0 5
41613: ARRAY
41614: PPUSH
41615: CALL_OW 1
41619: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41620: LD_ADDR_VAR 0 7
41624: PUSH
41625: LD_VAR 0 7
41629: PPUSH
41630: LD_VAR 0 5
41634: PUSH
41635: LD_INT 1
41637: MINUS
41638: PPUSH
41639: LD_VAR 0 6
41643: PPUSH
41644: CALL_OW 1
41648: ST_TO_ADDR
// end ;
41649: GO 41566
41651: POP
41652: POP
// result := s_arr [ 1 ] ;
41653: LD_ADDR_VAR 0 4
41657: PUSH
41658: LD_VAR 0 7
41662: PUSH
41663: LD_INT 1
41665: ARRAY
41666: ST_TO_ADDR
// end ; end ;
41667: LD_VAR 0 4
41671: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41672: LD_INT 0
41674: PPUSH
41675: PPUSH
// if not list then
41676: LD_VAR 0 1
41680: NOT
41681: IFFALSE 41685
// exit ;
41683: GO 41776
// i := list [ pos1 ] ;
41685: LD_ADDR_VAR 0 5
41689: PUSH
41690: LD_VAR 0 1
41694: PUSH
41695: LD_VAR 0 2
41699: ARRAY
41700: ST_TO_ADDR
// if not i then
41701: LD_VAR 0 5
41705: NOT
41706: IFFALSE 41710
// exit ;
41708: GO 41776
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41710: LD_ADDR_VAR 0 1
41714: PUSH
41715: LD_VAR 0 1
41719: PPUSH
41720: LD_VAR 0 2
41724: PPUSH
41725: LD_VAR 0 1
41729: PUSH
41730: LD_VAR 0 3
41734: ARRAY
41735: PPUSH
41736: CALL_OW 1
41740: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41741: LD_ADDR_VAR 0 1
41745: PUSH
41746: LD_VAR 0 1
41750: PPUSH
41751: LD_VAR 0 3
41755: PPUSH
41756: LD_VAR 0 5
41760: PPUSH
41761: CALL_OW 1
41765: ST_TO_ADDR
// result := list ;
41766: LD_ADDR_VAR 0 4
41770: PUSH
41771: LD_VAR 0 1
41775: ST_TO_ADDR
// end ;
41776: LD_VAR 0 4
41780: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41781: LD_INT 0
41783: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41784: LD_ADDR_VAR 0 5
41788: PUSH
41789: LD_VAR 0 1
41793: PPUSH
41794: CALL_OW 250
41798: PPUSH
41799: LD_VAR 0 1
41803: PPUSH
41804: CALL_OW 251
41808: PPUSH
41809: LD_VAR 0 2
41813: PPUSH
41814: LD_VAR 0 3
41818: PPUSH
41819: LD_VAR 0 4
41823: PPUSH
41824: CALL 42202 0 5
41828: ST_TO_ADDR
// end ;
41829: LD_VAR 0 5
41833: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41834: LD_INT 0
41836: PPUSH
41837: PPUSH
41838: PPUSH
41839: PPUSH
// if not list or not unit then
41840: LD_VAR 0 2
41844: NOT
41845: PUSH
41846: LD_VAR 0 1
41850: NOT
41851: OR
41852: IFFALSE 41856
// exit ;
41854: GO 42197
// result := [ ] ;
41856: LD_ADDR_VAR 0 5
41860: PUSH
41861: EMPTY
41862: ST_TO_ADDR
// for i in list do
41863: LD_ADDR_VAR 0 6
41867: PUSH
41868: LD_VAR 0 2
41872: PUSH
41873: FOR_IN
41874: IFFALSE 42092
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41876: LD_ADDR_VAR 0 8
41880: PUSH
41881: LD_VAR 0 1
41885: PPUSH
41886: LD_VAR 0 6
41890: PUSH
41891: LD_INT 1
41893: ARRAY
41894: PPUSH
41895: LD_VAR 0 6
41899: PUSH
41900: LD_INT 2
41902: ARRAY
41903: PPUSH
41904: CALL_OW 297
41908: ST_TO_ADDR
// if not Count ( result ) then
41909: LD_VAR 0 5
41913: PPUSH
41914: CALL 38486 0 1
41918: NOT
41919: IFFALSE 41952
// begin result := Join ( result , [ i , tmp ] ) ;
41921: LD_ADDR_VAR 0 5
41925: PUSH
41926: LD_VAR 0 5
41930: PPUSH
41931: LD_VAR 0 6
41935: PUSH
41936: LD_VAR 0 8
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PPUSH
41945: CALL 74075 0 2
41949: ST_TO_ADDR
// continue ;
41950: GO 41873
// end ; if result [ result ] [ 2 ] <= tmp then
41952: LD_VAR 0 5
41956: PUSH
41957: LD_VAR 0 5
41961: ARRAY
41962: PUSH
41963: LD_INT 2
41965: ARRAY
41966: PUSH
41967: LD_VAR 0 8
41971: LESSEQUAL
41972: IFFALSE 42005
// result := Join ( result , [ i , tmp ] ) else
41974: LD_ADDR_VAR 0 5
41978: PUSH
41979: LD_VAR 0 5
41983: PPUSH
41984: LD_VAR 0 6
41988: PUSH
41989: LD_VAR 0 8
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PPUSH
41998: CALL 74075 0 2
42002: ST_TO_ADDR
42003: GO 42090
// begin for j := 1 to Count ( result ) do
42005: LD_ADDR_VAR 0 7
42009: PUSH
42010: DOUBLE
42011: LD_INT 1
42013: DEC
42014: ST_TO_ADDR
42015: LD_VAR 0 5
42019: PPUSH
42020: CALL 38486 0 1
42024: PUSH
42025: FOR_TO
42026: IFFALSE 42088
// begin if tmp < result [ j ] [ 2 ] then
42028: LD_VAR 0 8
42032: PUSH
42033: LD_VAR 0 5
42037: PUSH
42038: LD_VAR 0 7
42042: ARRAY
42043: PUSH
42044: LD_INT 2
42046: ARRAY
42047: LESS
42048: IFFALSE 42086
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42050: LD_ADDR_VAR 0 5
42054: PUSH
42055: LD_VAR 0 5
42059: PPUSH
42060: LD_VAR 0 7
42064: PPUSH
42065: LD_VAR 0 6
42069: PUSH
42070: LD_VAR 0 8
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PPUSH
42079: CALL_OW 2
42083: ST_TO_ADDR
// break ;
42084: GO 42088
// end ; end ;
42086: GO 42025
42088: POP
42089: POP
// end ; end ;
42090: GO 41873
42092: POP
42093: POP
// if result and not asc then
42094: LD_VAR 0 5
42098: PUSH
42099: LD_VAR 0 3
42103: NOT
42104: AND
42105: IFFALSE 42122
// result := ReverseArray ( result ) ;
42107: LD_ADDR_VAR 0 5
42111: PUSH
42112: LD_VAR 0 5
42116: PPUSH
42117: CALL 69362 0 1
42121: ST_TO_ADDR
// tmp := [ ] ;
42122: LD_ADDR_VAR 0 8
42126: PUSH
42127: EMPTY
42128: ST_TO_ADDR
// if mode then
42129: LD_VAR 0 4
42133: IFFALSE 42197
// begin for i := 1 to result do
42135: LD_ADDR_VAR 0 6
42139: PUSH
42140: DOUBLE
42141: LD_INT 1
42143: DEC
42144: ST_TO_ADDR
42145: LD_VAR 0 5
42149: PUSH
42150: FOR_TO
42151: IFFALSE 42185
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42153: LD_ADDR_VAR 0 8
42157: PUSH
42158: LD_VAR 0 8
42162: PPUSH
42163: LD_VAR 0 5
42167: PUSH
42168: LD_VAR 0 6
42172: ARRAY
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: PPUSH
42178: CALL 74075 0 2
42182: ST_TO_ADDR
42183: GO 42150
42185: POP
42186: POP
// result := tmp ;
42187: LD_ADDR_VAR 0 5
42191: PUSH
42192: LD_VAR 0 8
42196: ST_TO_ADDR
// end ; end ;
42197: LD_VAR 0 5
42201: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42202: LD_INT 0
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
// if not list then
42208: LD_VAR 0 3
42212: NOT
42213: IFFALSE 42217
// exit ;
42215: GO 42605
// result := [ ] ;
42217: LD_ADDR_VAR 0 6
42221: PUSH
42222: EMPTY
42223: ST_TO_ADDR
// for i in list do
42224: LD_ADDR_VAR 0 7
42228: PUSH
42229: LD_VAR 0 3
42233: PUSH
42234: FOR_IN
42235: IFFALSE 42437
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42237: LD_ADDR_VAR 0 9
42241: PUSH
42242: LD_VAR 0 7
42246: PPUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: LD_VAR 0 2
42256: PPUSH
42257: CALL_OW 297
42261: ST_TO_ADDR
// if not result then
42262: LD_VAR 0 6
42266: NOT
42267: IFFALSE 42293
// result := [ [ i , tmp ] ] else
42269: LD_ADDR_VAR 0 6
42273: PUSH
42274: LD_VAR 0 7
42278: PUSH
42279: LD_VAR 0 9
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: EMPTY
42289: LIST
42290: ST_TO_ADDR
42291: GO 42435
// begin if result [ result ] [ 2 ] < tmp then
42293: LD_VAR 0 6
42297: PUSH
42298: LD_VAR 0 6
42302: ARRAY
42303: PUSH
42304: LD_INT 2
42306: ARRAY
42307: PUSH
42308: LD_VAR 0 9
42312: LESS
42313: IFFALSE 42355
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42315: LD_ADDR_VAR 0 6
42319: PUSH
42320: LD_VAR 0 6
42324: PPUSH
42325: LD_VAR 0 6
42329: PUSH
42330: LD_INT 1
42332: PLUS
42333: PPUSH
42334: LD_VAR 0 7
42338: PUSH
42339: LD_VAR 0 9
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PPUSH
42348: CALL_OW 2
42352: ST_TO_ADDR
42353: GO 42435
// for j = 1 to result do
42355: LD_ADDR_VAR 0 8
42359: PUSH
42360: DOUBLE
42361: LD_INT 1
42363: DEC
42364: ST_TO_ADDR
42365: LD_VAR 0 6
42369: PUSH
42370: FOR_TO
42371: IFFALSE 42433
// begin if tmp < result [ j ] [ 2 ] then
42373: LD_VAR 0 9
42377: PUSH
42378: LD_VAR 0 6
42382: PUSH
42383: LD_VAR 0 8
42387: ARRAY
42388: PUSH
42389: LD_INT 2
42391: ARRAY
42392: LESS
42393: IFFALSE 42431
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42395: LD_ADDR_VAR 0 6
42399: PUSH
42400: LD_VAR 0 6
42404: PPUSH
42405: LD_VAR 0 8
42409: PPUSH
42410: LD_VAR 0 7
42414: PUSH
42415: LD_VAR 0 9
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PPUSH
42424: CALL_OW 2
42428: ST_TO_ADDR
// break ;
42429: GO 42433
// end ; end ;
42431: GO 42370
42433: POP
42434: POP
// end ; end ;
42435: GO 42234
42437: POP
42438: POP
// if result and not asc then
42439: LD_VAR 0 6
42443: PUSH
42444: LD_VAR 0 4
42448: NOT
42449: AND
42450: IFFALSE 42525
// begin tmp := result ;
42452: LD_ADDR_VAR 0 9
42456: PUSH
42457: LD_VAR 0 6
42461: ST_TO_ADDR
// for i = tmp downto 1 do
42462: LD_ADDR_VAR 0 7
42466: PUSH
42467: DOUBLE
42468: LD_VAR 0 9
42472: INC
42473: ST_TO_ADDR
42474: LD_INT 1
42476: PUSH
42477: FOR_DOWNTO
42478: IFFALSE 42523
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42480: LD_ADDR_VAR 0 6
42484: PUSH
42485: LD_VAR 0 6
42489: PPUSH
42490: LD_VAR 0 9
42494: PUSH
42495: LD_VAR 0 7
42499: MINUS
42500: PUSH
42501: LD_INT 1
42503: PLUS
42504: PPUSH
42505: LD_VAR 0 9
42509: PUSH
42510: LD_VAR 0 7
42514: ARRAY
42515: PPUSH
42516: CALL_OW 1
42520: ST_TO_ADDR
42521: GO 42477
42523: POP
42524: POP
// end ; tmp := [ ] ;
42525: LD_ADDR_VAR 0 9
42529: PUSH
42530: EMPTY
42531: ST_TO_ADDR
// if mode then
42532: LD_VAR 0 5
42536: IFFALSE 42605
// begin for i = 1 to result do
42538: LD_ADDR_VAR 0 7
42542: PUSH
42543: DOUBLE
42544: LD_INT 1
42546: DEC
42547: ST_TO_ADDR
42548: LD_VAR 0 6
42552: PUSH
42553: FOR_TO
42554: IFFALSE 42593
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42556: LD_ADDR_VAR 0 9
42560: PUSH
42561: LD_VAR 0 9
42565: PPUSH
42566: LD_VAR 0 7
42570: PPUSH
42571: LD_VAR 0 6
42575: PUSH
42576: LD_VAR 0 7
42580: ARRAY
42581: PUSH
42582: LD_INT 1
42584: ARRAY
42585: PPUSH
42586: CALL_OW 1
42590: ST_TO_ADDR
42591: GO 42553
42593: POP
42594: POP
// result := tmp ;
42595: LD_ADDR_VAR 0 6
42599: PUSH
42600: LD_VAR 0 9
42604: ST_TO_ADDR
// end ; end ;
42605: LD_VAR 0 6
42609: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42610: LD_INT 0
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42618: LD_ADDR_VAR 0 5
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: ST_TO_ADDR
// if not x or not y then
42640: LD_VAR 0 2
42644: NOT
42645: PUSH
42646: LD_VAR 0 3
42650: NOT
42651: OR
42652: IFFALSE 42656
// exit ;
42654: GO 44306
// if not range then
42656: LD_VAR 0 4
42660: NOT
42661: IFFALSE 42671
// range := 10 ;
42663: LD_ADDR_VAR 0 4
42667: PUSH
42668: LD_INT 10
42670: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42671: LD_ADDR_VAR 0 8
42675: PUSH
42676: LD_INT 81
42678: PUSH
42679: LD_VAR 0 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 92
42690: PUSH
42691: LD_VAR 0 2
42695: PUSH
42696: LD_VAR 0 3
42700: PUSH
42701: LD_VAR 0 4
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: LD_INT 21
42717: PUSH
42718: LD_INT 3
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: PPUSH
42734: CALL_OW 69
42738: ST_TO_ADDR
// if not tmp then
42739: LD_VAR 0 8
42743: NOT
42744: IFFALSE 42748
// exit ;
42746: GO 44306
// for i in tmp do
42748: LD_ADDR_VAR 0 6
42752: PUSH
42753: LD_VAR 0 8
42757: PUSH
42758: FOR_IN
42759: IFFALSE 44281
// begin points := [ 0 , 0 , 0 ] ;
42761: LD_ADDR_VAR 0 9
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: ST_TO_ADDR
// bpoints := 1 ;
42780: LD_ADDR_VAR 0 10
42784: PUSH
42785: LD_INT 1
42787: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42788: LD_VAR 0 6
42792: PPUSH
42793: CALL_OW 247
42797: PUSH
42798: LD_INT 1
42800: DOUBLE
42801: EQUAL
42802: IFTRUE 42806
42804: GO 43384
42806: POP
// begin if GetClass ( i ) = 1 then
42807: LD_VAR 0 6
42811: PPUSH
42812: CALL_OW 257
42816: PUSH
42817: LD_INT 1
42819: EQUAL
42820: IFFALSE 42841
// points := [ 10 , 5 , 3 ] ;
42822: LD_ADDR_VAR 0 9
42826: PUSH
42827: LD_INT 10
42829: PUSH
42830: LD_INT 5
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42841: LD_VAR 0 6
42845: PPUSH
42846: CALL_OW 257
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 3
42856: PUSH
42857: LD_INT 4
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: IN
42865: IFFALSE 42886
// points := [ 3 , 2 , 1 ] ;
42867: LD_ADDR_VAR 0 9
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42886: LD_VAR 0 6
42890: PPUSH
42891: CALL_OW 257
42895: PUSH
42896: LD_INT 5
42898: EQUAL
42899: IFFALSE 42920
// points := [ 130 , 5 , 2 ] ;
42901: LD_ADDR_VAR 0 9
42905: PUSH
42906: LD_INT 130
42908: PUSH
42909: LD_INT 5
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42920: LD_VAR 0 6
42924: PPUSH
42925: CALL_OW 257
42929: PUSH
42930: LD_INT 8
42932: EQUAL
42933: IFFALSE 42954
// points := [ 35 , 35 , 30 ] ;
42935: LD_ADDR_VAR 0 9
42939: PUSH
42940: LD_INT 35
42942: PUSH
42943: LD_INT 35
42945: PUSH
42946: LD_INT 30
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: LIST
42953: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42954: LD_VAR 0 6
42958: PPUSH
42959: CALL_OW 257
42963: PUSH
42964: LD_INT 9
42966: EQUAL
42967: IFFALSE 42988
// points := [ 20 , 55 , 40 ] ;
42969: LD_ADDR_VAR 0 9
42973: PUSH
42974: LD_INT 20
42976: PUSH
42977: LD_INT 55
42979: PUSH
42980: LD_INT 40
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42988: LD_VAR 0 6
42992: PPUSH
42993: CALL_OW 257
42997: PUSH
42998: LD_INT 12
43000: PUSH
43001: LD_INT 16
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: IN
43008: IFFALSE 43029
// points := [ 5 , 3 , 2 ] ;
43010: LD_ADDR_VAR 0 9
43014: PUSH
43015: LD_INT 5
43017: PUSH
43018: LD_INT 3
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43029: LD_VAR 0 6
43033: PPUSH
43034: CALL_OW 257
43038: PUSH
43039: LD_INT 17
43041: EQUAL
43042: IFFALSE 43063
// points := [ 100 , 50 , 75 ] ;
43044: LD_ADDR_VAR 0 9
43048: PUSH
43049: LD_INT 100
43051: PUSH
43052: LD_INT 50
43054: PUSH
43055: LD_INT 75
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43063: LD_VAR 0 6
43067: PPUSH
43068: CALL_OW 257
43072: PUSH
43073: LD_INT 15
43075: EQUAL
43076: IFFALSE 43097
// points := [ 10 , 5 , 3 ] ;
43078: LD_ADDR_VAR 0 9
43082: PUSH
43083: LD_INT 10
43085: PUSH
43086: LD_INT 5
43088: PUSH
43089: LD_INT 3
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43097: LD_VAR 0 6
43101: PPUSH
43102: CALL_OW 257
43106: PUSH
43107: LD_INT 14
43109: EQUAL
43110: IFFALSE 43131
// points := [ 10 , 0 , 0 ] ;
43112: LD_ADDR_VAR 0 9
43116: PUSH
43117: LD_INT 10
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43131: LD_VAR 0 6
43135: PPUSH
43136: CALL_OW 257
43140: PUSH
43141: LD_INT 11
43143: EQUAL
43144: IFFALSE 43165
// points := [ 30 , 10 , 5 ] ;
43146: LD_ADDR_VAR 0 9
43150: PUSH
43151: LD_INT 30
43153: PUSH
43154: LD_INT 10
43156: PUSH
43157: LD_INT 5
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43165: LD_VAR 0 1
43169: PPUSH
43170: LD_INT 5
43172: PPUSH
43173: CALL_OW 321
43177: PUSH
43178: LD_INT 2
43180: EQUAL
43181: IFFALSE 43198
// bpoints := bpoints * 1.8 ;
43183: LD_ADDR_VAR 0 10
43187: PUSH
43188: LD_VAR 0 10
43192: PUSH
43193: LD_REAL  1.80000000000000E+0000
43196: MUL
43197: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43198: LD_VAR 0 6
43202: PPUSH
43203: CALL_OW 257
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: LD_INT 4
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: IN
43226: PUSH
43227: LD_VAR 0 1
43231: PPUSH
43232: LD_INT 51
43234: PPUSH
43235: CALL_OW 321
43239: PUSH
43240: LD_INT 2
43242: EQUAL
43243: AND
43244: IFFALSE 43261
// bpoints := bpoints * 1.2 ;
43246: LD_ADDR_VAR 0 10
43250: PUSH
43251: LD_VAR 0 10
43255: PUSH
43256: LD_REAL  1.20000000000000E+0000
43259: MUL
43260: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43261: LD_VAR 0 6
43265: PPUSH
43266: CALL_OW 257
43270: PUSH
43271: LD_INT 5
43273: PUSH
43274: LD_INT 7
43276: PUSH
43277: LD_INT 9
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: IN
43285: PUSH
43286: LD_VAR 0 1
43290: PPUSH
43291: LD_INT 52
43293: PPUSH
43294: CALL_OW 321
43298: PUSH
43299: LD_INT 2
43301: EQUAL
43302: AND
43303: IFFALSE 43320
// bpoints := bpoints * 1.5 ;
43305: LD_ADDR_VAR 0 10
43309: PUSH
43310: LD_VAR 0 10
43314: PUSH
43315: LD_REAL  1.50000000000000E+0000
43318: MUL
43319: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43320: LD_VAR 0 1
43324: PPUSH
43325: LD_INT 66
43327: PPUSH
43328: CALL_OW 321
43332: PUSH
43333: LD_INT 2
43335: EQUAL
43336: IFFALSE 43353
// bpoints := bpoints * 1.1 ;
43338: LD_ADDR_VAR 0 10
43342: PUSH
43343: LD_VAR 0 10
43347: PUSH
43348: LD_REAL  1.10000000000000E+0000
43351: MUL
43352: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43353: LD_ADDR_VAR 0 10
43357: PUSH
43358: LD_VAR 0 10
43362: PUSH
43363: LD_VAR 0 6
43367: PPUSH
43368: LD_INT 1
43370: PPUSH
43371: CALL_OW 259
43375: PUSH
43376: LD_REAL  1.15000000000000E+0000
43379: MUL
43380: MUL
43381: ST_TO_ADDR
// end ; unit_vehicle :
43382: GO 44210
43384: LD_INT 2
43386: DOUBLE
43387: EQUAL
43388: IFTRUE 43392
43390: GO 44198
43392: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43393: LD_VAR 0 6
43397: PPUSH
43398: CALL_OW 264
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: LD_INT 42
43408: PUSH
43409: LD_INT 24
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: IN
43417: IFFALSE 43438
// points := [ 25 , 5 , 3 ] ;
43419: LD_ADDR_VAR 0 9
43423: PUSH
43424: LD_INT 25
43426: PUSH
43427: LD_INT 5
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43438: LD_VAR 0 6
43442: PPUSH
43443: CALL_OW 264
43447: PUSH
43448: LD_INT 4
43450: PUSH
43451: LD_INT 43
43453: PUSH
43454: LD_INT 25
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: IN
43462: IFFALSE 43483
// points := [ 40 , 15 , 5 ] ;
43464: LD_ADDR_VAR 0 9
43468: PUSH
43469: LD_INT 40
43471: PUSH
43472: LD_INT 15
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43483: LD_VAR 0 6
43487: PPUSH
43488: CALL_OW 264
43492: PUSH
43493: LD_INT 3
43495: PUSH
43496: LD_INT 23
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: IN
43503: IFFALSE 43524
// points := [ 7 , 25 , 8 ] ;
43505: LD_ADDR_VAR 0 9
43509: PUSH
43510: LD_INT 7
43512: PUSH
43513: LD_INT 25
43515: PUSH
43516: LD_INT 8
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: LIST
43523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43524: LD_VAR 0 6
43528: PPUSH
43529: CALL_OW 264
43533: PUSH
43534: LD_INT 5
43536: PUSH
43537: LD_INT 27
43539: PUSH
43540: LD_INT 44
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: IN
43548: IFFALSE 43569
// points := [ 14 , 50 , 16 ] ;
43550: LD_ADDR_VAR 0 9
43554: PUSH
43555: LD_INT 14
43557: PUSH
43558: LD_INT 50
43560: PUSH
43561: LD_INT 16
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43569: LD_VAR 0 6
43573: PPUSH
43574: CALL_OW 264
43578: PUSH
43579: LD_INT 6
43581: PUSH
43582: LD_INT 46
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: IN
43589: IFFALSE 43610
// points := [ 32 , 120 , 70 ] ;
43591: LD_ADDR_VAR 0 9
43595: PUSH
43596: LD_INT 32
43598: PUSH
43599: LD_INT 120
43601: PUSH
43602: LD_INT 70
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43610: LD_VAR 0 6
43614: PPUSH
43615: CALL_OW 264
43619: PUSH
43620: LD_INT 7
43622: PUSH
43623: LD_INT 28
43625: PUSH
43626: LD_INT 45
43628: PUSH
43629: LD_INT 92
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: IN
43638: IFFALSE 43659
// points := [ 35 , 20 , 45 ] ;
43640: LD_ADDR_VAR 0 9
43644: PUSH
43645: LD_INT 35
43647: PUSH
43648: LD_INT 20
43650: PUSH
43651: LD_INT 45
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43659: LD_VAR 0 6
43663: PPUSH
43664: CALL_OW 264
43668: PUSH
43669: LD_INT 47
43671: PUSH
43672: EMPTY
43673: LIST
43674: IN
43675: IFFALSE 43696
// points := [ 67 , 45 , 75 ] ;
43677: LD_ADDR_VAR 0 9
43681: PUSH
43682: LD_INT 67
43684: PUSH
43685: LD_INT 45
43687: PUSH
43688: LD_INT 75
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43696: LD_VAR 0 6
43700: PPUSH
43701: CALL_OW 264
43705: PUSH
43706: LD_INT 26
43708: PUSH
43709: EMPTY
43710: LIST
43711: IN
43712: IFFALSE 43733
// points := [ 120 , 30 , 80 ] ;
43714: LD_ADDR_VAR 0 9
43718: PUSH
43719: LD_INT 120
43721: PUSH
43722: LD_INT 30
43724: PUSH
43725: LD_INT 80
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43733: LD_VAR 0 6
43737: PPUSH
43738: CALL_OW 264
43742: PUSH
43743: LD_INT 22
43745: PUSH
43746: EMPTY
43747: LIST
43748: IN
43749: IFFALSE 43770
// points := [ 40 , 1 , 1 ] ;
43751: LD_ADDR_VAR 0 9
43755: PUSH
43756: LD_INT 40
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43770: LD_VAR 0 6
43774: PPUSH
43775: CALL_OW 264
43779: PUSH
43780: LD_INT 29
43782: PUSH
43783: EMPTY
43784: LIST
43785: IN
43786: IFFALSE 43807
// points := [ 70 , 200 , 400 ] ;
43788: LD_ADDR_VAR 0 9
43792: PUSH
43793: LD_INT 70
43795: PUSH
43796: LD_INT 200
43798: PUSH
43799: LD_INT 400
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43807: LD_VAR 0 6
43811: PPUSH
43812: CALL_OW 264
43816: PUSH
43817: LD_INT 14
43819: PUSH
43820: LD_INT 53
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: IN
43827: IFFALSE 43848
// points := [ 40 , 10 , 20 ] ;
43829: LD_ADDR_VAR 0 9
43833: PUSH
43834: LD_INT 40
43836: PUSH
43837: LD_INT 10
43839: PUSH
43840: LD_INT 20
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43848: LD_VAR 0 6
43852: PPUSH
43853: CALL_OW 264
43857: PUSH
43858: LD_INT 9
43860: PUSH
43861: EMPTY
43862: LIST
43863: IN
43864: IFFALSE 43885
// points := [ 5 , 70 , 20 ] ;
43866: LD_ADDR_VAR 0 9
43870: PUSH
43871: LD_INT 5
43873: PUSH
43874: LD_INT 70
43876: PUSH
43877: LD_INT 20
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43885: LD_VAR 0 6
43889: PPUSH
43890: CALL_OW 264
43894: PUSH
43895: LD_INT 10
43897: PUSH
43898: EMPTY
43899: LIST
43900: IN
43901: IFFALSE 43922
// points := [ 35 , 110 , 70 ] ;
43903: LD_ADDR_VAR 0 9
43907: PUSH
43908: LD_INT 35
43910: PUSH
43911: LD_INT 110
43913: PUSH
43914: LD_INT 70
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43922: LD_VAR 0 6
43926: PPUSH
43927: CALL_OW 265
43931: PUSH
43932: LD_INT 25
43934: EQUAL
43935: IFFALSE 43956
// points := [ 80 , 65 , 100 ] ;
43937: LD_ADDR_VAR 0 9
43941: PUSH
43942: LD_INT 80
43944: PUSH
43945: LD_INT 65
43947: PUSH
43948: LD_INT 100
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43956: LD_VAR 0 6
43960: PPUSH
43961: CALL_OW 263
43965: PUSH
43966: LD_INT 1
43968: EQUAL
43969: IFFALSE 44004
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43971: LD_ADDR_VAR 0 10
43975: PUSH
43976: LD_VAR 0 10
43980: PUSH
43981: LD_VAR 0 6
43985: PPUSH
43986: CALL_OW 311
43990: PPUSH
43991: LD_INT 3
43993: PPUSH
43994: CALL_OW 259
43998: PUSH
43999: LD_INT 4
44001: MUL
44002: MUL
44003: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44004: LD_VAR 0 6
44008: PPUSH
44009: CALL_OW 263
44013: PUSH
44014: LD_INT 2
44016: EQUAL
44017: IFFALSE 44068
// begin j := IsControledBy ( i ) ;
44019: LD_ADDR_VAR 0 7
44023: PUSH
44024: LD_VAR 0 6
44028: PPUSH
44029: CALL_OW 312
44033: ST_TO_ADDR
// if j then
44034: LD_VAR 0 7
44038: IFFALSE 44068
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44040: LD_ADDR_VAR 0 10
44044: PUSH
44045: LD_VAR 0 10
44049: PUSH
44050: LD_VAR 0 7
44054: PPUSH
44055: LD_INT 3
44057: PPUSH
44058: CALL_OW 259
44062: PUSH
44063: LD_INT 3
44065: MUL
44066: MUL
44067: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44068: LD_VAR 0 6
44072: PPUSH
44073: CALL_OW 264
44077: PUSH
44078: LD_INT 5
44080: PUSH
44081: LD_INT 6
44083: PUSH
44084: LD_INT 46
44086: PUSH
44087: LD_INT 44
44089: PUSH
44090: LD_INT 47
44092: PUSH
44093: LD_INT 45
44095: PUSH
44096: LD_INT 28
44098: PUSH
44099: LD_INT 7
44101: PUSH
44102: LD_INT 27
44104: PUSH
44105: LD_INT 29
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: IN
44120: PUSH
44121: LD_VAR 0 1
44125: PPUSH
44126: LD_INT 52
44128: PPUSH
44129: CALL_OW 321
44133: PUSH
44134: LD_INT 2
44136: EQUAL
44137: AND
44138: IFFALSE 44155
// bpoints := bpoints * 1.2 ;
44140: LD_ADDR_VAR 0 10
44144: PUSH
44145: LD_VAR 0 10
44149: PUSH
44150: LD_REAL  1.20000000000000E+0000
44153: MUL
44154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44155: LD_VAR 0 6
44159: PPUSH
44160: CALL_OW 264
44164: PUSH
44165: LD_INT 6
44167: PUSH
44168: LD_INT 46
44170: PUSH
44171: LD_INT 47
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: IN
44179: IFFALSE 44196
// bpoints := bpoints * 1.2 ;
44181: LD_ADDR_VAR 0 10
44185: PUSH
44186: LD_VAR 0 10
44190: PUSH
44191: LD_REAL  1.20000000000000E+0000
44194: MUL
44195: ST_TO_ADDR
// end ; unit_building :
44196: GO 44210
44198: LD_INT 3
44200: DOUBLE
44201: EQUAL
44202: IFTRUE 44206
44204: GO 44209
44206: POP
// ; end ;
44207: GO 44210
44209: POP
// for j = 1 to 3 do
44210: LD_ADDR_VAR 0 7
44214: PUSH
44215: DOUBLE
44216: LD_INT 1
44218: DEC
44219: ST_TO_ADDR
44220: LD_INT 3
44222: PUSH
44223: FOR_TO
44224: IFFALSE 44277
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44226: LD_ADDR_VAR 0 5
44230: PUSH
44231: LD_VAR 0 5
44235: PPUSH
44236: LD_VAR 0 7
44240: PPUSH
44241: LD_VAR 0 5
44245: PUSH
44246: LD_VAR 0 7
44250: ARRAY
44251: PUSH
44252: LD_VAR 0 9
44256: PUSH
44257: LD_VAR 0 7
44261: ARRAY
44262: PUSH
44263: LD_VAR 0 10
44267: MUL
44268: PLUS
44269: PPUSH
44270: CALL_OW 1
44274: ST_TO_ADDR
44275: GO 44223
44277: POP
44278: POP
// end ;
44279: GO 42758
44281: POP
44282: POP
// result := Replace ( result , 4 , tmp ) ;
44283: LD_ADDR_VAR 0 5
44287: PUSH
44288: LD_VAR 0 5
44292: PPUSH
44293: LD_INT 4
44295: PPUSH
44296: LD_VAR 0 8
44300: PPUSH
44301: CALL_OW 1
44305: ST_TO_ADDR
// end ;
44306: LD_VAR 0 5
44310: RET
// export function DangerAtRange ( unit , range ) ; begin
44311: LD_INT 0
44313: PPUSH
// if not unit then
44314: LD_VAR 0 1
44318: NOT
44319: IFFALSE 44323
// exit ;
44321: GO 44368
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44323: LD_ADDR_VAR 0 3
44327: PUSH
44328: LD_VAR 0 1
44332: PPUSH
44333: CALL_OW 255
44337: PPUSH
44338: LD_VAR 0 1
44342: PPUSH
44343: CALL_OW 250
44347: PPUSH
44348: LD_VAR 0 1
44352: PPUSH
44353: CALL_OW 251
44357: PPUSH
44358: LD_VAR 0 2
44362: PPUSH
44363: CALL 42610 0 4
44367: ST_TO_ADDR
// end ;
44368: LD_VAR 0 3
44372: RET
// export function DangerInArea ( side , area ) ; begin
44373: LD_INT 0
44375: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44376: LD_ADDR_VAR 0 3
44380: PUSH
44381: LD_VAR 0 2
44385: PPUSH
44386: LD_INT 81
44388: PUSH
44389: LD_VAR 0 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PPUSH
44398: CALL_OW 70
44402: ST_TO_ADDR
// end ;
44403: LD_VAR 0 3
44407: RET
// export function IsExtension ( b ) ; begin
44408: LD_INT 0
44410: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44411: LD_ADDR_VAR 0 2
44415: PUSH
44416: LD_VAR 0 1
44420: PUSH
44421: LD_INT 23
44423: PUSH
44424: LD_INT 20
44426: PUSH
44427: LD_INT 22
44429: PUSH
44430: LD_INT 17
44432: PUSH
44433: LD_INT 24
44435: PUSH
44436: LD_INT 21
44438: PUSH
44439: LD_INT 19
44441: PUSH
44442: LD_INT 16
44444: PUSH
44445: LD_INT 25
44447: PUSH
44448: LD_INT 18
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: IN
44463: ST_TO_ADDR
// end ;
44464: LD_VAR 0 2
44468: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44469: LD_INT 0
44471: PPUSH
44472: PPUSH
44473: PPUSH
// result := [ ] ;
44474: LD_ADDR_VAR 0 4
44478: PUSH
44479: EMPTY
44480: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44481: LD_ADDR_VAR 0 5
44485: PUSH
44486: LD_VAR 0 2
44490: PPUSH
44491: LD_INT 21
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PPUSH
44501: CALL_OW 70
44505: ST_TO_ADDR
// if not tmp then
44506: LD_VAR 0 5
44510: NOT
44511: IFFALSE 44515
// exit ;
44513: GO 44579
// if checkLink then
44515: LD_VAR 0 3
44519: IFFALSE 44569
// begin for i in tmp do
44521: LD_ADDR_VAR 0 6
44525: PUSH
44526: LD_VAR 0 5
44530: PUSH
44531: FOR_IN
44532: IFFALSE 44567
// if GetBase ( i ) <> base then
44534: LD_VAR 0 6
44538: PPUSH
44539: CALL_OW 274
44543: PUSH
44544: LD_VAR 0 1
44548: NONEQUAL
44549: IFFALSE 44565
// ComLinkToBase ( base , i ) ;
44551: LD_VAR 0 1
44555: PPUSH
44556: LD_VAR 0 6
44560: PPUSH
44561: CALL_OW 169
44565: GO 44531
44567: POP
44568: POP
// end ; result := tmp ;
44569: LD_ADDR_VAR 0 4
44573: PUSH
44574: LD_VAR 0 5
44578: ST_TO_ADDR
// end ;
44579: LD_VAR 0 4
44583: RET
// export function ComComplete ( units , b ) ; var i ; begin
44584: LD_INT 0
44586: PPUSH
44587: PPUSH
// if not units then
44588: LD_VAR 0 1
44592: NOT
44593: IFFALSE 44597
// exit ;
44595: GO 44687
// for i in units do
44597: LD_ADDR_VAR 0 4
44601: PUSH
44602: LD_VAR 0 1
44606: PUSH
44607: FOR_IN
44608: IFFALSE 44685
// if BuildingStatus ( b ) = bs_build then
44610: LD_VAR 0 2
44614: PPUSH
44615: CALL_OW 461
44619: PUSH
44620: LD_INT 1
44622: EQUAL
44623: IFFALSE 44683
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44625: LD_VAR 0 4
44629: PPUSH
44630: LD_STRING h
44632: PUSH
44633: LD_VAR 0 2
44637: PPUSH
44638: CALL_OW 250
44642: PUSH
44643: LD_VAR 0 2
44647: PPUSH
44648: CALL_OW 251
44652: PUSH
44653: LD_VAR 0 2
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: PPUSH
44679: CALL_OW 446
44683: GO 44607
44685: POP
44686: POP
// end ;
44687: LD_VAR 0 3
44691: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44692: LD_INT 0
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44700: LD_VAR 0 1
44704: NOT
44705: PUSH
44706: LD_VAR 0 1
44710: PPUSH
44711: CALL_OW 263
44715: PUSH
44716: LD_INT 2
44718: NONEQUAL
44719: OR
44720: IFFALSE 44724
// exit ;
44722: GO 45040
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44724: LD_ADDR_VAR 0 6
44728: PUSH
44729: LD_INT 22
44731: PUSH
44732: LD_VAR 0 1
44736: PPUSH
44737: CALL_OW 255
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 30
44751: PUSH
44752: LD_INT 36
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 34
44761: PUSH
44762: LD_INT 31
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PPUSH
44778: CALL_OW 69
44782: ST_TO_ADDR
// if not tmp then
44783: LD_VAR 0 6
44787: NOT
44788: IFFALSE 44792
// exit ;
44790: GO 45040
// result := [ ] ;
44792: LD_ADDR_VAR 0 2
44796: PUSH
44797: EMPTY
44798: ST_TO_ADDR
// for i in tmp do
44799: LD_ADDR_VAR 0 3
44803: PUSH
44804: LD_VAR 0 6
44808: PUSH
44809: FOR_IN
44810: IFFALSE 44881
// begin t := UnitsInside ( i ) ;
44812: LD_ADDR_VAR 0 4
44816: PUSH
44817: LD_VAR 0 3
44821: PPUSH
44822: CALL_OW 313
44826: ST_TO_ADDR
// if t then
44827: LD_VAR 0 4
44831: IFFALSE 44879
// for j in t do
44833: LD_ADDR_VAR 0 7
44837: PUSH
44838: LD_VAR 0 4
44842: PUSH
44843: FOR_IN
44844: IFFALSE 44877
// result := Replace ( result , result + 1 , j ) ;
44846: LD_ADDR_VAR 0 2
44850: PUSH
44851: LD_VAR 0 2
44855: PPUSH
44856: LD_VAR 0 2
44860: PUSH
44861: LD_INT 1
44863: PLUS
44864: PPUSH
44865: LD_VAR 0 7
44869: PPUSH
44870: CALL_OW 1
44874: ST_TO_ADDR
44875: GO 44843
44877: POP
44878: POP
// end ;
44879: GO 44809
44881: POP
44882: POP
// if not result then
44883: LD_VAR 0 2
44887: NOT
44888: IFFALSE 44892
// exit ;
44890: GO 45040
// mech := result [ 1 ] ;
44892: LD_ADDR_VAR 0 5
44896: PUSH
44897: LD_VAR 0 2
44901: PUSH
44902: LD_INT 1
44904: ARRAY
44905: ST_TO_ADDR
// if result > 1 then
44906: LD_VAR 0 2
44910: PUSH
44911: LD_INT 1
44913: GREATER
44914: IFFALSE 45026
// begin for i = 2 to result do
44916: LD_ADDR_VAR 0 3
44920: PUSH
44921: DOUBLE
44922: LD_INT 2
44924: DEC
44925: ST_TO_ADDR
44926: LD_VAR 0 2
44930: PUSH
44931: FOR_TO
44932: IFFALSE 45024
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44934: LD_ADDR_VAR 0 4
44938: PUSH
44939: LD_VAR 0 2
44943: PUSH
44944: LD_VAR 0 3
44948: ARRAY
44949: PPUSH
44950: LD_INT 3
44952: PPUSH
44953: CALL_OW 259
44957: PUSH
44958: LD_VAR 0 2
44962: PUSH
44963: LD_VAR 0 3
44967: ARRAY
44968: PPUSH
44969: CALL_OW 432
44973: MINUS
44974: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44975: LD_VAR 0 4
44979: PUSH
44980: LD_VAR 0 5
44984: PPUSH
44985: LD_INT 3
44987: PPUSH
44988: CALL_OW 259
44992: PUSH
44993: LD_VAR 0 5
44997: PPUSH
44998: CALL_OW 432
45002: MINUS
45003: GREATEREQUAL
45004: IFFALSE 45022
// mech := result [ i ] ;
45006: LD_ADDR_VAR 0 5
45010: PUSH
45011: LD_VAR 0 2
45015: PUSH
45016: LD_VAR 0 3
45020: ARRAY
45021: ST_TO_ADDR
// end ;
45022: GO 44931
45024: POP
45025: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45026: LD_VAR 0 1
45030: PPUSH
45031: LD_VAR 0 5
45035: PPUSH
45036: CALL_OW 135
// end ;
45040: LD_VAR 0 2
45044: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45045: LD_INT 0
45047: PPUSH
45048: PPUSH
45049: PPUSH
45050: PPUSH
45051: PPUSH
45052: PPUSH
45053: PPUSH
45054: PPUSH
45055: PPUSH
45056: PPUSH
45057: PPUSH
45058: PPUSH
45059: PPUSH
// result := [ ] ;
45060: LD_ADDR_VAR 0 7
45064: PUSH
45065: EMPTY
45066: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45067: LD_VAR 0 1
45071: PPUSH
45072: CALL_OW 266
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: IN
45087: NOT
45088: IFFALSE 45092
// exit ;
45090: GO 46726
// if name then
45092: LD_VAR 0 3
45096: IFFALSE 45112
// SetBName ( base_dep , name ) ;
45098: LD_VAR 0 1
45102: PPUSH
45103: LD_VAR 0 3
45107: PPUSH
45108: CALL_OW 500
// base := GetBase ( base_dep ) ;
45112: LD_ADDR_VAR 0 15
45116: PUSH
45117: LD_VAR 0 1
45121: PPUSH
45122: CALL_OW 274
45126: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45127: LD_ADDR_VAR 0 16
45131: PUSH
45132: LD_VAR 0 1
45136: PPUSH
45137: CALL_OW 255
45141: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45142: LD_ADDR_VAR 0 17
45146: PUSH
45147: LD_VAR 0 1
45151: PPUSH
45152: CALL_OW 248
45156: ST_TO_ADDR
// if sources then
45157: LD_VAR 0 5
45161: IFFALSE 45208
// for i = 1 to 3 do
45163: LD_ADDR_VAR 0 8
45167: PUSH
45168: DOUBLE
45169: LD_INT 1
45171: DEC
45172: ST_TO_ADDR
45173: LD_INT 3
45175: PUSH
45176: FOR_TO
45177: IFFALSE 45206
// AddResourceType ( base , i , sources [ i ] ) ;
45179: LD_VAR 0 15
45183: PPUSH
45184: LD_VAR 0 8
45188: PPUSH
45189: LD_VAR 0 5
45193: PUSH
45194: LD_VAR 0 8
45198: ARRAY
45199: PPUSH
45200: CALL_OW 276
45204: GO 45176
45206: POP
45207: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45208: LD_ADDR_VAR 0 18
45212: PUSH
45213: LD_VAR 0 15
45217: PPUSH
45218: LD_VAR 0 2
45222: PPUSH
45223: LD_INT 1
45225: PPUSH
45226: CALL 44469 0 3
45230: ST_TO_ADDR
// InitHc ;
45231: CALL_OW 19
// InitUc ;
45235: CALL_OW 18
// uc_side := side ;
45239: LD_ADDR_OWVAR 20
45243: PUSH
45244: LD_VAR 0 16
45248: ST_TO_ADDR
// uc_nation := nation ;
45249: LD_ADDR_OWVAR 21
45253: PUSH
45254: LD_VAR 0 17
45258: ST_TO_ADDR
// if buildings then
45259: LD_VAR 0 18
45263: IFFALSE 46585
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45265: LD_ADDR_VAR 0 19
45269: PUSH
45270: LD_VAR 0 18
45274: PPUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 30
45280: PUSH
45281: LD_INT 29
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 30
45290: PUSH
45291: LD_INT 30
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: PPUSH
45303: CALL_OW 72
45307: ST_TO_ADDR
// if tmp then
45308: LD_VAR 0 19
45312: IFFALSE 45360
// for i in tmp do
45314: LD_ADDR_VAR 0 8
45318: PUSH
45319: LD_VAR 0 19
45323: PUSH
45324: FOR_IN
45325: IFFALSE 45358
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45327: LD_VAR 0 8
45331: PPUSH
45332: CALL_OW 250
45336: PPUSH
45337: LD_VAR 0 8
45341: PPUSH
45342: CALL_OW 251
45346: PPUSH
45347: LD_VAR 0 16
45351: PPUSH
45352: CALL_OW 441
45356: GO 45324
45358: POP
45359: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45360: LD_VAR 0 18
45364: PPUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 30
45370: PUSH
45371: LD_INT 32
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 30
45380: PUSH
45381: LD_INT 33
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: PPUSH
45393: CALL_OW 72
45397: IFFALSE 45485
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45399: LD_ADDR_VAR 0 8
45403: PUSH
45404: LD_VAR 0 18
45408: PPUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 30
45414: PUSH
45415: LD_INT 32
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 30
45424: PUSH
45425: LD_INT 33
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: PPUSH
45437: CALL_OW 72
45441: PUSH
45442: FOR_IN
45443: IFFALSE 45483
// begin if not GetBWeapon ( i ) then
45445: LD_VAR 0 8
45449: PPUSH
45450: CALL_OW 269
45454: NOT
45455: IFFALSE 45481
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45457: LD_VAR 0 8
45461: PPUSH
45462: LD_VAR 0 8
45466: PPUSH
45467: LD_VAR 0 2
45471: PPUSH
45472: CALL 46731 0 2
45476: PPUSH
45477: CALL_OW 431
// end ;
45481: GO 45442
45483: POP
45484: POP
// end ; for i = 1 to personel do
45485: LD_ADDR_VAR 0 8
45489: PUSH
45490: DOUBLE
45491: LD_INT 1
45493: DEC
45494: ST_TO_ADDR
45495: LD_VAR 0 6
45499: PUSH
45500: FOR_TO
45501: IFFALSE 46565
// begin if i > 4 then
45503: LD_VAR 0 8
45507: PUSH
45508: LD_INT 4
45510: GREATER
45511: IFFALSE 45515
// break ;
45513: GO 46565
// case i of 1 :
45515: LD_VAR 0 8
45519: PUSH
45520: LD_INT 1
45522: DOUBLE
45523: EQUAL
45524: IFTRUE 45528
45526: GO 45608
45528: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45529: LD_ADDR_VAR 0 12
45533: PUSH
45534: LD_VAR 0 18
45538: PPUSH
45539: LD_INT 22
45541: PUSH
45542: LD_VAR 0 16
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 58
45553: PUSH
45554: EMPTY
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: LD_INT 30
45562: PUSH
45563: LD_INT 32
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 30
45572: PUSH
45573: LD_INT 4
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 30
45582: PUSH
45583: LD_INT 5
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: PPUSH
45601: CALL_OW 72
45605: ST_TO_ADDR
45606: GO 45830
45608: LD_INT 2
45610: DOUBLE
45611: EQUAL
45612: IFTRUE 45616
45614: GO 45678
45616: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45617: LD_ADDR_VAR 0 12
45621: PUSH
45622: LD_VAR 0 18
45626: PPUSH
45627: LD_INT 22
45629: PUSH
45630: LD_VAR 0 16
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: LD_INT 30
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 30
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PPUSH
45671: CALL_OW 72
45675: ST_TO_ADDR
45676: GO 45830
45678: LD_INT 3
45680: DOUBLE
45681: EQUAL
45682: IFTRUE 45686
45684: GO 45748
45686: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45687: LD_ADDR_VAR 0 12
45691: PUSH
45692: LD_VAR 0 18
45696: PPUSH
45697: LD_INT 22
45699: PUSH
45700: LD_VAR 0 16
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: LD_INT 30
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 30
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PPUSH
45741: CALL_OW 72
45745: ST_TO_ADDR
45746: GO 45830
45748: LD_INT 4
45750: DOUBLE
45751: EQUAL
45752: IFTRUE 45756
45754: GO 45829
45756: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45757: LD_ADDR_VAR 0 12
45761: PUSH
45762: LD_VAR 0 18
45766: PPUSH
45767: LD_INT 22
45769: PUSH
45770: LD_VAR 0 16
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 30
45784: PUSH
45785: LD_INT 6
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 30
45794: PUSH
45795: LD_INT 7
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 30
45804: PUSH
45805: LD_INT 8
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PPUSH
45822: CALL_OW 72
45826: ST_TO_ADDR
45827: GO 45830
45829: POP
// if i = 1 then
45830: LD_VAR 0 8
45834: PUSH
45835: LD_INT 1
45837: EQUAL
45838: IFFALSE 45949
// begin tmp := [ ] ;
45840: LD_ADDR_VAR 0 19
45844: PUSH
45845: EMPTY
45846: ST_TO_ADDR
// for j in f do
45847: LD_ADDR_VAR 0 9
45851: PUSH
45852: LD_VAR 0 12
45856: PUSH
45857: FOR_IN
45858: IFFALSE 45931
// if GetBType ( j ) = b_bunker then
45860: LD_VAR 0 9
45864: PPUSH
45865: CALL_OW 266
45869: PUSH
45870: LD_INT 32
45872: EQUAL
45873: IFFALSE 45900
// tmp := Insert ( tmp , 1 , j ) else
45875: LD_ADDR_VAR 0 19
45879: PUSH
45880: LD_VAR 0 19
45884: PPUSH
45885: LD_INT 1
45887: PPUSH
45888: LD_VAR 0 9
45892: PPUSH
45893: CALL_OW 2
45897: ST_TO_ADDR
45898: GO 45929
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45900: LD_ADDR_VAR 0 19
45904: PUSH
45905: LD_VAR 0 19
45909: PPUSH
45910: LD_VAR 0 19
45914: PUSH
45915: LD_INT 1
45917: PLUS
45918: PPUSH
45919: LD_VAR 0 9
45923: PPUSH
45924: CALL_OW 2
45928: ST_TO_ADDR
45929: GO 45857
45931: POP
45932: POP
// if tmp then
45933: LD_VAR 0 19
45937: IFFALSE 45949
// f := tmp ;
45939: LD_ADDR_VAR 0 12
45943: PUSH
45944: LD_VAR 0 19
45948: ST_TO_ADDR
// end ; x := personel [ i ] ;
45949: LD_ADDR_VAR 0 13
45953: PUSH
45954: LD_VAR 0 6
45958: PUSH
45959: LD_VAR 0 8
45963: ARRAY
45964: ST_TO_ADDR
// if x = - 1 then
45965: LD_VAR 0 13
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: EQUAL
45974: IFFALSE 46183
// begin for j in f do
45976: LD_ADDR_VAR 0 9
45980: PUSH
45981: LD_VAR 0 12
45985: PUSH
45986: FOR_IN
45987: IFFALSE 46179
// repeat InitHc ;
45989: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45993: LD_VAR 0 9
45997: PPUSH
45998: CALL_OW 266
46002: PUSH
46003: LD_INT 5
46005: EQUAL
46006: IFFALSE 46076
// begin if UnitsInside ( j ) < 3 then
46008: LD_VAR 0 9
46012: PPUSH
46013: CALL_OW 313
46017: PUSH
46018: LD_INT 3
46020: LESS
46021: IFFALSE 46057
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46023: LD_INT 0
46025: PPUSH
46026: LD_INT 5
46028: PUSH
46029: LD_INT 8
46031: PUSH
46032: LD_INT 9
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: PUSH
46040: LD_VAR 0 17
46044: ARRAY
46045: PPUSH
46046: LD_VAR 0 4
46050: PPUSH
46051: CALL_OW 380
46055: GO 46074
// PrepareHuman ( false , i , skill ) ;
46057: LD_INT 0
46059: PPUSH
46060: LD_VAR 0 8
46064: PPUSH
46065: LD_VAR 0 4
46069: PPUSH
46070: CALL_OW 380
// end else
46074: GO 46093
// PrepareHuman ( false , i , skill ) ;
46076: LD_INT 0
46078: PPUSH
46079: LD_VAR 0 8
46083: PPUSH
46084: LD_VAR 0 4
46088: PPUSH
46089: CALL_OW 380
// un := CreateHuman ;
46093: LD_ADDR_VAR 0 14
46097: PUSH
46098: CALL_OW 44
46102: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46103: LD_ADDR_VAR 0 7
46107: PUSH
46108: LD_VAR 0 7
46112: PPUSH
46113: LD_INT 1
46115: PPUSH
46116: LD_VAR 0 14
46120: PPUSH
46121: CALL_OW 2
46125: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46126: LD_VAR 0 14
46130: PPUSH
46131: LD_VAR 0 9
46135: PPUSH
46136: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46140: LD_VAR 0 9
46144: PPUSH
46145: CALL_OW 313
46149: PUSH
46150: LD_INT 6
46152: EQUAL
46153: PUSH
46154: LD_VAR 0 9
46158: PPUSH
46159: CALL_OW 266
46163: PUSH
46164: LD_INT 32
46166: PUSH
46167: LD_INT 31
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: IN
46174: OR
46175: IFFALSE 45989
46177: GO 45986
46179: POP
46180: POP
// end else
46181: GO 46563
// for j = 1 to x do
46183: LD_ADDR_VAR 0 9
46187: PUSH
46188: DOUBLE
46189: LD_INT 1
46191: DEC
46192: ST_TO_ADDR
46193: LD_VAR 0 13
46197: PUSH
46198: FOR_TO
46199: IFFALSE 46561
// begin InitHc ;
46201: CALL_OW 19
// if not f then
46205: LD_VAR 0 12
46209: NOT
46210: IFFALSE 46299
// begin PrepareHuman ( false , i , skill ) ;
46212: LD_INT 0
46214: PPUSH
46215: LD_VAR 0 8
46219: PPUSH
46220: LD_VAR 0 4
46224: PPUSH
46225: CALL_OW 380
// un := CreateHuman ;
46229: LD_ADDR_VAR 0 14
46233: PUSH
46234: CALL_OW 44
46238: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46239: LD_ADDR_VAR 0 7
46243: PUSH
46244: LD_VAR 0 7
46248: PPUSH
46249: LD_INT 1
46251: PPUSH
46252: LD_VAR 0 14
46256: PPUSH
46257: CALL_OW 2
46261: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46262: LD_VAR 0 14
46266: PPUSH
46267: LD_VAR 0 1
46271: PPUSH
46272: CALL_OW 250
46276: PPUSH
46277: LD_VAR 0 1
46281: PPUSH
46282: CALL_OW 251
46286: PPUSH
46287: LD_INT 10
46289: PPUSH
46290: LD_INT 0
46292: PPUSH
46293: CALL_OW 50
// continue ;
46297: GO 46198
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46299: LD_VAR 0 12
46303: PUSH
46304: LD_INT 1
46306: ARRAY
46307: PPUSH
46308: CALL_OW 313
46312: PUSH
46313: LD_VAR 0 12
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PPUSH
46322: CALL_OW 266
46326: PUSH
46327: LD_INT 32
46329: PUSH
46330: LD_INT 31
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: IN
46337: AND
46338: PUSH
46339: LD_VAR 0 12
46343: PUSH
46344: LD_INT 1
46346: ARRAY
46347: PPUSH
46348: CALL_OW 313
46352: PUSH
46353: LD_INT 6
46355: EQUAL
46356: OR
46357: IFFALSE 46377
// f := Delete ( f , 1 ) ;
46359: LD_ADDR_VAR 0 12
46363: PUSH
46364: LD_VAR 0 12
46368: PPUSH
46369: LD_INT 1
46371: PPUSH
46372: CALL_OW 3
46376: ST_TO_ADDR
// if not f then
46377: LD_VAR 0 12
46381: NOT
46382: IFFALSE 46400
// begin x := x + 2 ;
46384: LD_ADDR_VAR 0 13
46388: PUSH
46389: LD_VAR 0 13
46393: PUSH
46394: LD_INT 2
46396: PLUS
46397: ST_TO_ADDR
// continue ;
46398: GO 46198
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46400: LD_VAR 0 12
46404: PUSH
46405: LD_INT 1
46407: ARRAY
46408: PPUSH
46409: CALL_OW 266
46413: PUSH
46414: LD_INT 5
46416: EQUAL
46417: IFFALSE 46491
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46419: LD_VAR 0 12
46423: PUSH
46424: LD_INT 1
46426: ARRAY
46427: PPUSH
46428: CALL_OW 313
46432: PUSH
46433: LD_INT 3
46435: LESS
46436: IFFALSE 46472
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46438: LD_INT 0
46440: PPUSH
46441: LD_INT 5
46443: PUSH
46444: LD_INT 8
46446: PUSH
46447: LD_INT 9
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: PUSH
46455: LD_VAR 0 17
46459: ARRAY
46460: PPUSH
46461: LD_VAR 0 4
46465: PPUSH
46466: CALL_OW 380
46470: GO 46489
// PrepareHuman ( false , i , skill ) ;
46472: LD_INT 0
46474: PPUSH
46475: LD_VAR 0 8
46479: PPUSH
46480: LD_VAR 0 4
46484: PPUSH
46485: CALL_OW 380
// end else
46489: GO 46508
// PrepareHuman ( false , i , skill ) ;
46491: LD_INT 0
46493: PPUSH
46494: LD_VAR 0 8
46498: PPUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: CALL_OW 380
// un := CreateHuman ;
46508: LD_ADDR_VAR 0 14
46512: PUSH
46513: CALL_OW 44
46517: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46518: LD_ADDR_VAR 0 7
46522: PUSH
46523: LD_VAR 0 7
46527: PPUSH
46528: LD_INT 1
46530: PPUSH
46531: LD_VAR 0 14
46535: PPUSH
46536: CALL_OW 2
46540: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46541: LD_VAR 0 14
46545: PPUSH
46546: LD_VAR 0 12
46550: PUSH
46551: LD_INT 1
46553: ARRAY
46554: PPUSH
46555: CALL_OW 52
// end ;
46559: GO 46198
46561: POP
46562: POP
// end ;
46563: GO 45500
46565: POP
46566: POP
// result := result ^ buildings ;
46567: LD_ADDR_VAR 0 7
46571: PUSH
46572: LD_VAR 0 7
46576: PUSH
46577: LD_VAR 0 18
46581: ADD
46582: ST_TO_ADDR
// end else
46583: GO 46726
// begin for i = 1 to personel do
46585: LD_ADDR_VAR 0 8
46589: PUSH
46590: DOUBLE
46591: LD_INT 1
46593: DEC
46594: ST_TO_ADDR
46595: LD_VAR 0 6
46599: PUSH
46600: FOR_TO
46601: IFFALSE 46724
// begin if i > 4 then
46603: LD_VAR 0 8
46607: PUSH
46608: LD_INT 4
46610: GREATER
46611: IFFALSE 46615
// break ;
46613: GO 46724
// x := personel [ i ] ;
46615: LD_ADDR_VAR 0 13
46619: PUSH
46620: LD_VAR 0 6
46624: PUSH
46625: LD_VAR 0 8
46629: ARRAY
46630: ST_TO_ADDR
// if x = - 1 then
46631: LD_VAR 0 13
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: EQUAL
46640: IFFALSE 46644
// continue ;
46642: GO 46600
// PrepareHuman ( false , i , skill ) ;
46644: LD_INT 0
46646: PPUSH
46647: LD_VAR 0 8
46651: PPUSH
46652: LD_VAR 0 4
46656: PPUSH
46657: CALL_OW 380
// un := CreateHuman ;
46661: LD_ADDR_VAR 0 14
46665: PUSH
46666: CALL_OW 44
46670: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46671: LD_VAR 0 14
46675: PPUSH
46676: LD_VAR 0 1
46680: PPUSH
46681: CALL_OW 250
46685: PPUSH
46686: LD_VAR 0 1
46690: PPUSH
46691: CALL_OW 251
46695: PPUSH
46696: LD_INT 10
46698: PPUSH
46699: LD_INT 0
46701: PPUSH
46702: CALL_OW 50
// result := result ^ un ;
46706: LD_ADDR_VAR 0 7
46710: PUSH
46711: LD_VAR 0 7
46715: PUSH
46716: LD_VAR 0 14
46720: ADD
46721: ST_TO_ADDR
// end ;
46722: GO 46600
46724: POP
46725: POP
// end ; end ;
46726: LD_VAR 0 7
46730: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46731: LD_INT 0
46733: PPUSH
46734: PPUSH
46735: PPUSH
46736: PPUSH
46737: PPUSH
46738: PPUSH
46739: PPUSH
46740: PPUSH
46741: PPUSH
46742: PPUSH
46743: PPUSH
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
46748: PPUSH
// result := false ;
46749: LD_ADDR_VAR 0 3
46753: PUSH
46754: LD_INT 0
46756: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46757: LD_VAR 0 1
46761: NOT
46762: PUSH
46763: LD_VAR 0 1
46767: PPUSH
46768: CALL_OW 266
46772: PUSH
46773: LD_INT 32
46775: PUSH
46776: LD_INT 33
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: IN
46783: NOT
46784: OR
46785: IFFALSE 46789
// exit ;
46787: GO 47898
// nat := GetNation ( tower ) ;
46789: LD_ADDR_VAR 0 12
46793: PUSH
46794: LD_VAR 0 1
46798: PPUSH
46799: CALL_OW 248
46803: ST_TO_ADDR
// side := GetSide ( tower ) ;
46804: LD_ADDR_VAR 0 16
46808: PUSH
46809: LD_VAR 0 1
46813: PPUSH
46814: CALL_OW 255
46818: ST_TO_ADDR
// x := GetX ( tower ) ;
46819: LD_ADDR_VAR 0 10
46823: PUSH
46824: LD_VAR 0 1
46828: PPUSH
46829: CALL_OW 250
46833: ST_TO_ADDR
// y := GetY ( tower ) ;
46834: LD_ADDR_VAR 0 11
46838: PUSH
46839: LD_VAR 0 1
46843: PPUSH
46844: CALL_OW 251
46848: ST_TO_ADDR
// if not x or not y then
46849: LD_VAR 0 10
46853: NOT
46854: PUSH
46855: LD_VAR 0 11
46859: NOT
46860: OR
46861: IFFALSE 46865
// exit ;
46863: GO 47898
// weapon := 0 ;
46865: LD_ADDR_VAR 0 18
46869: PUSH
46870: LD_INT 0
46872: ST_TO_ADDR
// fac_list := [ ] ;
46873: LD_ADDR_VAR 0 17
46877: PUSH
46878: EMPTY
46879: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46880: LD_ADDR_VAR 0 6
46884: PUSH
46885: LD_VAR 0 1
46889: PPUSH
46890: CALL_OW 274
46894: PPUSH
46895: LD_VAR 0 2
46899: PPUSH
46900: LD_INT 0
46902: PPUSH
46903: CALL 44469 0 3
46907: PPUSH
46908: LD_INT 30
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PPUSH
46918: CALL_OW 72
46922: ST_TO_ADDR
// if not factories then
46923: LD_VAR 0 6
46927: NOT
46928: IFFALSE 46932
// exit ;
46930: GO 47898
// for i in factories do
46932: LD_ADDR_VAR 0 8
46936: PUSH
46937: LD_VAR 0 6
46941: PUSH
46942: FOR_IN
46943: IFFALSE 46968
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46945: LD_ADDR_VAR 0 17
46949: PUSH
46950: LD_VAR 0 17
46954: PUSH
46955: LD_VAR 0 8
46959: PPUSH
46960: CALL_OW 478
46964: UNION
46965: ST_TO_ADDR
46966: GO 46942
46968: POP
46969: POP
// if not fac_list then
46970: LD_VAR 0 17
46974: NOT
46975: IFFALSE 46979
// exit ;
46977: GO 47898
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46979: LD_ADDR_VAR 0 5
46983: PUSH
46984: LD_INT 4
46986: PUSH
46987: LD_INT 5
46989: PUSH
46990: LD_INT 9
46992: PUSH
46993: LD_INT 10
46995: PUSH
46996: LD_INT 6
46998: PUSH
46999: LD_INT 7
47001: PUSH
47002: LD_INT 11
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 27
47016: PUSH
47017: LD_INT 28
47019: PUSH
47020: LD_INT 26
47022: PUSH
47023: LD_INT 30
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 43
47034: PUSH
47035: LD_INT 44
47037: PUSH
47038: LD_INT 46
47040: PUSH
47041: LD_INT 45
47043: PUSH
47044: LD_INT 47
47046: PUSH
47047: LD_INT 49
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: PUSH
47063: LD_VAR 0 12
47067: ARRAY
47068: ST_TO_ADDR
// list := list isect fac_list ;
47069: LD_ADDR_VAR 0 5
47073: PUSH
47074: LD_VAR 0 5
47078: PUSH
47079: LD_VAR 0 17
47083: ISECT
47084: ST_TO_ADDR
// if not list then
47085: LD_VAR 0 5
47089: NOT
47090: IFFALSE 47094
// exit ;
47092: GO 47898
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47094: LD_VAR 0 12
47098: PUSH
47099: LD_INT 3
47101: EQUAL
47102: PUSH
47103: LD_INT 49
47105: PUSH
47106: LD_VAR 0 5
47110: IN
47111: AND
47112: PUSH
47113: LD_INT 31
47115: PPUSH
47116: LD_VAR 0 16
47120: PPUSH
47121: CALL_OW 321
47125: PUSH
47126: LD_INT 2
47128: EQUAL
47129: AND
47130: IFFALSE 47190
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47132: LD_INT 22
47134: PUSH
47135: LD_VAR 0 16
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 35
47146: PUSH
47147: LD_INT 49
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 91
47156: PUSH
47157: LD_VAR 0 1
47161: PUSH
47162: LD_INT 10
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: LIST
47174: PPUSH
47175: CALL_OW 69
47179: NOT
47180: IFFALSE 47190
// weapon := ru_time_lapser ;
47182: LD_ADDR_VAR 0 18
47186: PUSH
47187: LD_INT 49
47189: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47190: LD_VAR 0 12
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: IN
47205: PUSH
47206: LD_INT 11
47208: PUSH
47209: LD_VAR 0 5
47213: IN
47214: PUSH
47215: LD_INT 30
47217: PUSH
47218: LD_VAR 0 5
47222: IN
47223: OR
47224: AND
47225: PUSH
47226: LD_INT 6
47228: PPUSH
47229: LD_VAR 0 16
47233: PPUSH
47234: CALL_OW 321
47238: PUSH
47239: LD_INT 2
47241: EQUAL
47242: AND
47243: IFFALSE 47408
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47245: LD_INT 22
47247: PUSH
47248: LD_VAR 0 16
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 35
47262: PUSH
47263: LD_INT 11
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 35
47272: PUSH
47273: LD_INT 30
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 91
47287: PUSH
47288: LD_VAR 0 1
47292: PUSH
47293: LD_INT 18
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: PPUSH
47306: CALL_OW 69
47310: NOT
47311: PUSH
47312: LD_INT 22
47314: PUSH
47315: LD_VAR 0 16
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 30
47329: PUSH
47330: LD_INT 32
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 30
47339: PUSH
47340: LD_INT 33
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 91
47354: PUSH
47355: LD_VAR 0 1
47359: PUSH
47360: LD_INT 12
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: LIST
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: PPUSH
47376: CALL_OW 69
47380: PUSH
47381: LD_INT 2
47383: GREATER
47384: AND
47385: IFFALSE 47408
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47387: LD_ADDR_VAR 0 18
47391: PUSH
47392: LD_INT 11
47394: PUSH
47395: LD_INT 30
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_VAR 0 12
47406: ARRAY
47407: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47408: LD_VAR 0 18
47412: NOT
47413: PUSH
47414: LD_INT 40
47416: PPUSH
47417: LD_VAR 0 16
47421: PPUSH
47422: CALL_OW 321
47426: PUSH
47427: LD_INT 2
47429: EQUAL
47430: AND
47431: PUSH
47432: LD_INT 7
47434: PUSH
47435: LD_VAR 0 5
47439: IN
47440: PUSH
47441: LD_INT 28
47443: PUSH
47444: LD_VAR 0 5
47448: IN
47449: OR
47450: PUSH
47451: LD_INT 45
47453: PUSH
47454: LD_VAR 0 5
47458: IN
47459: OR
47460: AND
47461: IFFALSE 47715
// begin hex := GetHexInfo ( x , y ) ;
47463: LD_ADDR_VAR 0 4
47467: PUSH
47468: LD_VAR 0 10
47472: PPUSH
47473: LD_VAR 0 11
47477: PPUSH
47478: CALL_OW 546
47482: ST_TO_ADDR
// if hex [ 1 ] then
47483: LD_VAR 0 4
47487: PUSH
47488: LD_INT 1
47490: ARRAY
47491: IFFALSE 47495
// exit ;
47493: GO 47898
// height := hex [ 2 ] ;
47495: LD_ADDR_VAR 0 15
47499: PUSH
47500: LD_VAR 0 4
47504: PUSH
47505: LD_INT 2
47507: ARRAY
47508: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47509: LD_ADDR_VAR 0 14
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: LD_INT 5
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: ST_TO_ADDR
// for i in tmp do
47532: LD_ADDR_VAR 0 8
47536: PUSH
47537: LD_VAR 0 14
47541: PUSH
47542: FOR_IN
47543: IFFALSE 47713
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47545: LD_ADDR_VAR 0 9
47549: PUSH
47550: LD_VAR 0 10
47554: PPUSH
47555: LD_VAR 0 8
47559: PPUSH
47560: LD_INT 5
47562: PPUSH
47563: CALL_OW 272
47567: PUSH
47568: LD_VAR 0 11
47572: PPUSH
47573: LD_VAR 0 8
47577: PPUSH
47578: LD_INT 5
47580: PPUSH
47581: CALL_OW 273
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47590: LD_VAR 0 9
47594: PUSH
47595: LD_INT 1
47597: ARRAY
47598: PPUSH
47599: LD_VAR 0 9
47603: PUSH
47604: LD_INT 2
47606: ARRAY
47607: PPUSH
47608: CALL_OW 488
47612: IFFALSE 47711
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47614: LD_ADDR_VAR 0 4
47618: PUSH
47619: LD_VAR 0 9
47623: PUSH
47624: LD_INT 1
47626: ARRAY
47627: PPUSH
47628: LD_VAR 0 9
47632: PUSH
47633: LD_INT 2
47635: ARRAY
47636: PPUSH
47637: CALL_OW 546
47641: ST_TO_ADDR
// if hex [ 1 ] then
47642: LD_VAR 0 4
47646: PUSH
47647: LD_INT 1
47649: ARRAY
47650: IFFALSE 47654
// continue ;
47652: GO 47542
// h := hex [ 2 ] ;
47654: LD_ADDR_VAR 0 13
47658: PUSH
47659: LD_VAR 0 4
47663: PUSH
47664: LD_INT 2
47666: ARRAY
47667: ST_TO_ADDR
// if h + 7 < height then
47668: LD_VAR 0 13
47672: PUSH
47673: LD_INT 7
47675: PLUS
47676: PUSH
47677: LD_VAR 0 15
47681: LESS
47682: IFFALSE 47711
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47684: LD_ADDR_VAR 0 18
47688: PUSH
47689: LD_INT 7
47691: PUSH
47692: LD_INT 28
47694: PUSH
47695: LD_INT 45
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: PUSH
47703: LD_VAR 0 12
47707: ARRAY
47708: ST_TO_ADDR
// break ;
47709: GO 47713
// end ; end ; end ;
47711: GO 47542
47713: POP
47714: POP
// end ; if not weapon then
47715: LD_VAR 0 18
47719: NOT
47720: IFFALSE 47780
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47722: LD_ADDR_VAR 0 5
47726: PUSH
47727: LD_VAR 0 5
47731: PUSH
47732: LD_INT 11
47734: PUSH
47735: LD_INT 30
47737: PUSH
47738: LD_INT 49
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: DIFF
47746: ST_TO_ADDR
// if not list then
47747: LD_VAR 0 5
47751: NOT
47752: IFFALSE 47756
// exit ;
47754: GO 47898
// weapon := list [ rand ( 1 , list ) ] ;
47756: LD_ADDR_VAR 0 18
47760: PUSH
47761: LD_VAR 0 5
47765: PUSH
47766: LD_INT 1
47768: PPUSH
47769: LD_VAR 0 5
47773: PPUSH
47774: CALL_OW 12
47778: ARRAY
47779: ST_TO_ADDR
// end ; if weapon then
47780: LD_VAR 0 18
47784: IFFALSE 47898
// begin tmp := CostOfWeapon ( weapon ) ;
47786: LD_ADDR_VAR 0 14
47790: PUSH
47791: LD_VAR 0 18
47795: PPUSH
47796: CALL_OW 451
47800: ST_TO_ADDR
// j := GetBase ( tower ) ;
47801: LD_ADDR_VAR 0 9
47805: PUSH
47806: LD_VAR 0 1
47810: PPUSH
47811: CALL_OW 274
47815: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47816: LD_VAR 0 9
47820: PPUSH
47821: LD_INT 1
47823: PPUSH
47824: CALL_OW 275
47828: PUSH
47829: LD_VAR 0 14
47833: PUSH
47834: LD_INT 1
47836: ARRAY
47837: GREATEREQUAL
47838: PUSH
47839: LD_VAR 0 9
47843: PPUSH
47844: LD_INT 2
47846: PPUSH
47847: CALL_OW 275
47851: PUSH
47852: LD_VAR 0 14
47856: PUSH
47857: LD_INT 2
47859: ARRAY
47860: GREATEREQUAL
47861: AND
47862: PUSH
47863: LD_VAR 0 9
47867: PPUSH
47868: LD_INT 3
47870: PPUSH
47871: CALL_OW 275
47875: PUSH
47876: LD_VAR 0 14
47880: PUSH
47881: LD_INT 3
47883: ARRAY
47884: GREATEREQUAL
47885: AND
47886: IFFALSE 47898
// result := weapon ;
47888: LD_ADDR_VAR 0 3
47892: PUSH
47893: LD_VAR 0 18
47897: ST_TO_ADDR
// end ; end ;
47898: LD_VAR 0 3
47902: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47903: LD_INT 0
47905: PPUSH
47906: PPUSH
// result := true ;
47907: LD_ADDR_VAR 0 3
47911: PUSH
47912: LD_INT 1
47914: ST_TO_ADDR
// if array1 = array2 then
47915: LD_VAR 0 1
47919: PUSH
47920: LD_VAR 0 2
47924: EQUAL
47925: IFFALSE 47985
// begin for i = 1 to array1 do
47927: LD_ADDR_VAR 0 4
47931: PUSH
47932: DOUBLE
47933: LD_INT 1
47935: DEC
47936: ST_TO_ADDR
47937: LD_VAR 0 1
47941: PUSH
47942: FOR_TO
47943: IFFALSE 47981
// if array1 [ i ] <> array2 [ i ] then
47945: LD_VAR 0 1
47949: PUSH
47950: LD_VAR 0 4
47954: ARRAY
47955: PUSH
47956: LD_VAR 0 2
47960: PUSH
47961: LD_VAR 0 4
47965: ARRAY
47966: NONEQUAL
47967: IFFALSE 47979
// begin result := false ;
47969: LD_ADDR_VAR 0 3
47973: PUSH
47974: LD_INT 0
47976: ST_TO_ADDR
// break ;
47977: GO 47981
// end ;
47979: GO 47942
47981: POP
47982: POP
// end else
47983: GO 47993
// result := false ;
47985: LD_ADDR_VAR 0 3
47989: PUSH
47990: LD_INT 0
47992: ST_TO_ADDR
// end ;
47993: LD_VAR 0 3
47997: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47998: LD_INT 0
48000: PPUSH
48001: PPUSH
// if not array1 or not array2 then
48002: LD_VAR 0 1
48006: NOT
48007: PUSH
48008: LD_VAR 0 2
48012: NOT
48013: OR
48014: IFFALSE 48018
// exit ;
48016: GO 48082
// result := true ;
48018: LD_ADDR_VAR 0 3
48022: PUSH
48023: LD_INT 1
48025: ST_TO_ADDR
// for i = 1 to array1 do
48026: LD_ADDR_VAR 0 4
48030: PUSH
48031: DOUBLE
48032: LD_INT 1
48034: DEC
48035: ST_TO_ADDR
48036: LD_VAR 0 1
48040: PUSH
48041: FOR_TO
48042: IFFALSE 48080
// if array1 [ i ] <> array2 [ i ] then
48044: LD_VAR 0 1
48048: PUSH
48049: LD_VAR 0 4
48053: ARRAY
48054: PUSH
48055: LD_VAR 0 2
48059: PUSH
48060: LD_VAR 0 4
48064: ARRAY
48065: NONEQUAL
48066: IFFALSE 48078
// begin result := false ;
48068: LD_ADDR_VAR 0 3
48072: PUSH
48073: LD_INT 0
48075: ST_TO_ADDR
// break ;
48076: GO 48080
// end ;
48078: GO 48041
48080: POP
48081: POP
// end ;
48082: LD_VAR 0 3
48086: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48087: LD_INT 0
48089: PPUSH
48090: PPUSH
48091: PPUSH
// pom := GetBase ( fac ) ;
48092: LD_ADDR_VAR 0 5
48096: PUSH
48097: LD_VAR 0 1
48101: PPUSH
48102: CALL_OW 274
48106: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48107: LD_ADDR_VAR 0 4
48111: PUSH
48112: LD_VAR 0 2
48116: PUSH
48117: LD_INT 1
48119: ARRAY
48120: PPUSH
48121: LD_VAR 0 2
48125: PUSH
48126: LD_INT 2
48128: ARRAY
48129: PPUSH
48130: LD_VAR 0 2
48134: PUSH
48135: LD_INT 3
48137: ARRAY
48138: PPUSH
48139: LD_VAR 0 2
48143: PUSH
48144: LD_INT 4
48146: ARRAY
48147: PPUSH
48148: CALL_OW 449
48152: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48153: LD_ADDR_VAR 0 3
48157: PUSH
48158: LD_VAR 0 5
48162: PPUSH
48163: LD_INT 1
48165: PPUSH
48166: CALL_OW 275
48170: PUSH
48171: LD_VAR 0 4
48175: PUSH
48176: LD_INT 1
48178: ARRAY
48179: GREATEREQUAL
48180: PUSH
48181: LD_VAR 0 5
48185: PPUSH
48186: LD_INT 2
48188: PPUSH
48189: CALL_OW 275
48193: PUSH
48194: LD_VAR 0 4
48198: PUSH
48199: LD_INT 2
48201: ARRAY
48202: GREATEREQUAL
48203: AND
48204: PUSH
48205: LD_VAR 0 5
48209: PPUSH
48210: LD_INT 3
48212: PPUSH
48213: CALL_OW 275
48217: PUSH
48218: LD_VAR 0 4
48222: PUSH
48223: LD_INT 3
48225: ARRAY
48226: GREATEREQUAL
48227: AND
48228: ST_TO_ADDR
// end ;
48229: LD_VAR 0 3
48233: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48234: LD_INT 0
48236: PPUSH
48237: PPUSH
48238: PPUSH
48239: PPUSH
// pom := GetBase ( building ) ;
48240: LD_ADDR_VAR 0 3
48244: PUSH
48245: LD_VAR 0 1
48249: PPUSH
48250: CALL_OW 274
48254: ST_TO_ADDR
// if not pom then
48255: LD_VAR 0 3
48259: NOT
48260: IFFALSE 48264
// exit ;
48262: GO 48434
// btype := GetBType ( building ) ;
48264: LD_ADDR_VAR 0 5
48268: PUSH
48269: LD_VAR 0 1
48273: PPUSH
48274: CALL_OW 266
48278: ST_TO_ADDR
// if btype = b_armoury then
48279: LD_VAR 0 5
48283: PUSH
48284: LD_INT 4
48286: EQUAL
48287: IFFALSE 48297
// btype := b_barracks ;
48289: LD_ADDR_VAR 0 5
48293: PUSH
48294: LD_INT 5
48296: ST_TO_ADDR
// if btype = b_depot then
48297: LD_VAR 0 5
48301: PUSH
48302: LD_INT 0
48304: EQUAL
48305: IFFALSE 48315
// btype := b_warehouse ;
48307: LD_ADDR_VAR 0 5
48311: PUSH
48312: LD_INT 1
48314: ST_TO_ADDR
// if btype = b_workshop then
48315: LD_VAR 0 5
48319: PUSH
48320: LD_INT 2
48322: EQUAL
48323: IFFALSE 48333
// btype := b_factory ;
48325: LD_ADDR_VAR 0 5
48329: PUSH
48330: LD_INT 3
48332: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48333: LD_ADDR_VAR 0 4
48337: PUSH
48338: LD_VAR 0 5
48342: PPUSH
48343: LD_VAR 0 1
48347: PPUSH
48348: CALL_OW 248
48352: PPUSH
48353: CALL_OW 450
48357: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48358: LD_ADDR_VAR 0 2
48362: PUSH
48363: LD_VAR 0 3
48367: PPUSH
48368: LD_INT 1
48370: PPUSH
48371: CALL_OW 275
48375: PUSH
48376: LD_VAR 0 4
48380: PUSH
48381: LD_INT 1
48383: ARRAY
48384: GREATEREQUAL
48385: PUSH
48386: LD_VAR 0 3
48390: PPUSH
48391: LD_INT 2
48393: PPUSH
48394: CALL_OW 275
48398: PUSH
48399: LD_VAR 0 4
48403: PUSH
48404: LD_INT 2
48406: ARRAY
48407: GREATEREQUAL
48408: AND
48409: PUSH
48410: LD_VAR 0 3
48414: PPUSH
48415: LD_INT 3
48417: PPUSH
48418: CALL_OW 275
48422: PUSH
48423: LD_VAR 0 4
48427: PUSH
48428: LD_INT 3
48430: ARRAY
48431: GREATEREQUAL
48432: AND
48433: ST_TO_ADDR
// end ;
48434: LD_VAR 0 2
48438: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48439: LD_INT 0
48441: PPUSH
48442: PPUSH
48443: PPUSH
// pom := GetBase ( building ) ;
48444: LD_ADDR_VAR 0 4
48448: PUSH
48449: LD_VAR 0 1
48453: PPUSH
48454: CALL_OW 274
48458: ST_TO_ADDR
// if not pom then
48459: LD_VAR 0 4
48463: NOT
48464: IFFALSE 48468
// exit ;
48466: GO 48569
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48468: LD_ADDR_VAR 0 5
48472: PUSH
48473: LD_VAR 0 2
48477: PPUSH
48478: LD_VAR 0 1
48482: PPUSH
48483: CALL_OW 248
48487: PPUSH
48488: CALL_OW 450
48492: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48493: LD_ADDR_VAR 0 3
48497: PUSH
48498: LD_VAR 0 4
48502: PPUSH
48503: LD_INT 1
48505: PPUSH
48506: CALL_OW 275
48510: PUSH
48511: LD_VAR 0 5
48515: PUSH
48516: LD_INT 1
48518: ARRAY
48519: GREATEREQUAL
48520: PUSH
48521: LD_VAR 0 4
48525: PPUSH
48526: LD_INT 2
48528: PPUSH
48529: CALL_OW 275
48533: PUSH
48534: LD_VAR 0 5
48538: PUSH
48539: LD_INT 2
48541: ARRAY
48542: GREATEREQUAL
48543: AND
48544: PUSH
48545: LD_VAR 0 4
48549: PPUSH
48550: LD_INT 3
48552: PPUSH
48553: CALL_OW 275
48557: PUSH
48558: LD_VAR 0 5
48562: PUSH
48563: LD_INT 3
48565: ARRAY
48566: GREATEREQUAL
48567: AND
48568: ST_TO_ADDR
// end ;
48569: LD_VAR 0 3
48573: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48574: LD_INT 0
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
// result := false ;
48587: LD_ADDR_VAR 0 8
48591: PUSH
48592: LD_INT 0
48594: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48595: LD_VAR 0 5
48599: NOT
48600: PUSH
48601: LD_VAR 0 1
48605: NOT
48606: OR
48607: PUSH
48608: LD_VAR 0 2
48612: NOT
48613: OR
48614: PUSH
48615: LD_VAR 0 3
48619: NOT
48620: OR
48621: IFFALSE 48625
// exit ;
48623: GO 49439
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48625: LD_ADDR_VAR 0 14
48629: PUSH
48630: LD_VAR 0 1
48634: PPUSH
48635: LD_VAR 0 2
48639: PPUSH
48640: LD_VAR 0 3
48644: PPUSH
48645: LD_VAR 0 4
48649: PPUSH
48650: LD_VAR 0 5
48654: PUSH
48655: LD_INT 1
48657: ARRAY
48658: PPUSH
48659: CALL_OW 248
48663: PPUSH
48664: LD_INT 0
48666: PPUSH
48667: CALL 50692 0 6
48671: ST_TO_ADDR
// if not hexes then
48672: LD_VAR 0 14
48676: NOT
48677: IFFALSE 48681
// exit ;
48679: GO 49439
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48681: LD_ADDR_VAR 0 17
48685: PUSH
48686: LD_VAR 0 5
48690: PPUSH
48691: LD_INT 22
48693: PUSH
48694: LD_VAR 0 13
48698: PPUSH
48699: CALL_OW 255
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 30
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 30
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PPUSH
48740: CALL_OW 72
48744: ST_TO_ADDR
// for i = 1 to hexes do
48745: LD_ADDR_VAR 0 9
48749: PUSH
48750: DOUBLE
48751: LD_INT 1
48753: DEC
48754: ST_TO_ADDR
48755: LD_VAR 0 14
48759: PUSH
48760: FOR_TO
48761: IFFALSE 49437
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48763: LD_ADDR_VAR 0 13
48767: PUSH
48768: LD_VAR 0 14
48772: PUSH
48773: LD_VAR 0 9
48777: ARRAY
48778: PUSH
48779: LD_INT 1
48781: ARRAY
48782: PPUSH
48783: LD_VAR 0 14
48787: PUSH
48788: LD_VAR 0 9
48792: ARRAY
48793: PUSH
48794: LD_INT 2
48796: ARRAY
48797: PPUSH
48798: CALL_OW 428
48802: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48803: LD_VAR 0 14
48807: PUSH
48808: LD_VAR 0 9
48812: ARRAY
48813: PUSH
48814: LD_INT 1
48816: ARRAY
48817: PPUSH
48818: LD_VAR 0 14
48822: PUSH
48823: LD_VAR 0 9
48827: ARRAY
48828: PUSH
48829: LD_INT 2
48831: ARRAY
48832: PPUSH
48833: CALL_OW 351
48837: PUSH
48838: LD_VAR 0 14
48842: PUSH
48843: LD_VAR 0 9
48847: ARRAY
48848: PUSH
48849: LD_INT 1
48851: ARRAY
48852: PPUSH
48853: LD_VAR 0 14
48857: PUSH
48858: LD_VAR 0 9
48862: ARRAY
48863: PUSH
48864: LD_INT 2
48866: ARRAY
48867: PPUSH
48868: CALL_OW 488
48872: NOT
48873: OR
48874: PUSH
48875: LD_VAR 0 13
48879: PPUSH
48880: CALL_OW 247
48884: PUSH
48885: LD_INT 3
48887: EQUAL
48888: OR
48889: IFFALSE 48895
// exit ;
48891: POP
48892: POP
48893: GO 49439
// if not tmp then
48895: LD_VAR 0 13
48899: NOT
48900: IFFALSE 48904
// continue ;
48902: GO 48760
// result := true ;
48904: LD_ADDR_VAR 0 8
48908: PUSH
48909: LD_INT 1
48911: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48912: LD_VAR 0 6
48916: PUSH
48917: LD_VAR 0 13
48921: PPUSH
48922: CALL_OW 247
48926: PUSH
48927: LD_INT 2
48929: EQUAL
48930: AND
48931: PUSH
48932: LD_VAR 0 13
48936: PPUSH
48937: CALL_OW 263
48941: PUSH
48942: LD_INT 1
48944: EQUAL
48945: AND
48946: IFFALSE 49110
// begin if IsDrivenBy ( tmp ) then
48948: LD_VAR 0 13
48952: PPUSH
48953: CALL_OW 311
48957: IFFALSE 48961
// continue ;
48959: GO 48760
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48961: LD_VAR 0 6
48965: PPUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 60
48971: PUSH
48972: EMPTY
48973: LIST
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: LD_INT 55
48984: PUSH
48985: EMPTY
48986: LIST
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PPUSH
48996: CALL_OW 72
49000: IFFALSE 49108
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49002: LD_ADDR_VAR 0 18
49006: PUSH
49007: LD_VAR 0 6
49011: PPUSH
49012: LD_INT 3
49014: PUSH
49015: LD_INT 60
49017: PUSH
49018: EMPTY
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 3
49027: PUSH
49028: LD_INT 55
49030: PUSH
49031: EMPTY
49032: LIST
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PPUSH
49042: CALL_OW 72
49046: PUSH
49047: LD_INT 1
49049: ARRAY
49050: ST_TO_ADDR
// if IsInUnit ( driver ) then
49051: LD_VAR 0 18
49055: PPUSH
49056: CALL_OW 310
49060: IFFALSE 49071
// ComExit ( driver ) ;
49062: LD_VAR 0 18
49066: PPUSH
49067: CALL 74473 0 1
// AddComEnterUnit ( driver , tmp ) ;
49071: LD_VAR 0 18
49075: PPUSH
49076: LD_VAR 0 13
49080: PPUSH
49081: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49085: LD_VAR 0 18
49089: PPUSH
49090: LD_VAR 0 7
49094: PPUSH
49095: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49099: LD_VAR 0 18
49103: PPUSH
49104: CALL_OW 181
// end ; continue ;
49108: GO 48760
// end ; if not cleaners or not tmp in cleaners then
49110: LD_VAR 0 6
49114: NOT
49115: PUSH
49116: LD_VAR 0 13
49120: PUSH
49121: LD_VAR 0 6
49125: IN
49126: NOT
49127: OR
49128: IFFALSE 49435
// begin if dep then
49130: LD_VAR 0 17
49134: IFFALSE 49270
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49136: LD_ADDR_VAR 0 16
49140: PUSH
49141: LD_VAR 0 17
49145: PUSH
49146: LD_INT 1
49148: ARRAY
49149: PPUSH
49150: CALL_OW 250
49154: PPUSH
49155: LD_VAR 0 17
49159: PUSH
49160: LD_INT 1
49162: ARRAY
49163: PPUSH
49164: CALL_OW 254
49168: PPUSH
49169: LD_INT 5
49171: PPUSH
49172: CALL_OW 272
49176: PUSH
49177: LD_VAR 0 17
49181: PUSH
49182: LD_INT 1
49184: ARRAY
49185: PPUSH
49186: CALL_OW 251
49190: PPUSH
49191: LD_VAR 0 17
49195: PUSH
49196: LD_INT 1
49198: ARRAY
49199: PPUSH
49200: CALL_OW 254
49204: PPUSH
49205: LD_INT 5
49207: PPUSH
49208: CALL_OW 273
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49217: LD_VAR 0 16
49221: PUSH
49222: LD_INT 1
49224: ARRAY
49225: PPUSH
49226: LD_VAR 0 16
49230: PUSH
49231: LD_INT 2
49233: ARRAY
49234: PPUSH
49235: CALL_OW 488
49239: IFFALSE 49270
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49241: LD_VAR 0 13
49245: PPUSH
49246: LD_VAR 0 16
49250: PUSH
49251: LD_INT 1
49253: ARRAY
49254: PPUSH
49255: LD_VAR 0 16
49259: PUSH
49260: LD_INT 2
49262: ARRAY
49263: PPUSH
49264: CALL_OW 111
// continue ;
49268: GO 48760
// end ; end ; r := GetDir ( tmp ) ;
49270: LD_ADDR_VAR 0 15
49274: PUSH
49275: LD_VAR 0 13
49279: PPUSH
49280: CALL_OW 254
49284: ST_TO_ADDR
// if r = 5 then
49285: LD_VAR 0 15
49289: PUSH
49290: LD_INT 5
49292: EQUAL
49293: IFFALSE 49303
// r := 0 ;
49295: LD_ADDR_VAR 0 15
49299: PUSH
49300: LD_INT 0
49302: ST_TO_ADDR
// for j = r to 5 do
49303: LD_ADDR_VAR 0 10
49307: PUSH
49308: DOUBLE
49309: LD_VAR 0 15
49313: DEC
49314: ST_TO_ADDR
49315: LD_INT 5
49317: PUSH
49318: FOR_TO
49319: IFFALSE 49433
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49321: LD_ADDR_VAR 0 11
49325: PUSH
49326: LD_VAR 0 13
49330: PPUSH
49331: CALL_OW 250
49335: PPUSH
49336: LD_VAR 0 10
49340: PPUSH
49341: LD_INT 2
49343: PPUSH
49344: CALL_OW 272
49348: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49349: LD_ADDR_VAR 0 12
49353: PUSH
49354: LD_VAR 0 13
49358: PPUSH
49359: CALL_OW 251
49363: PPUSH
49364: LD_VAR 0 10
49368: PPUSH
49369: LD_INT 2
49371: PPUSH
49372: CALL_OW 273
49376: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49377: LD_VAR 0 11
49381: PPUSH
49382: LD_VAR 0 12
49386: PPUSH
49387: CALL_OW 488
49391: PUSH
49392: LD_VAR 0 11
49396: PPUSH
49397: LD_VAR 0 12
49401: PPUSH
49402: CALL_OW 428
49406: NOT
49407: AND
49408: IFFALSE 49431
// begin ComMoveXY ( tmp , _x , _y ) ;
49410: LD_VAR 0 13
49414: PPUSH
49415: LD_VAR 0 11
49419: PPUSH
49420: LD_VAR 0 12
49424: PPUSH
49425: CALL_OW 111
// break ;
49429: GO 49433
// end ; end ;
49431: GO 49318
49433: POP
49434: POP
// end ; end ;
49435: GO 48760
49437: POP
49438: POP
// end ;
49439: LD_VAR 0 8
49443: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49444: LD_INT 0
49446: PPUSH
// result := true ;
49447: LD_ADDR_VAR 0 3
49451: PUSH
49452: LD_INT 1
49454: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49455: LD_VAR 0 2
49459: PUSH
49460: LD_INT 24
49462: DOUBLE
49463: EQUAL
49464: IFTRUE 49474
49466: LD_INT 33
49468: DOUBLE
49469: EQUAL
49470: IFTRUE 49474
49472: GO 49499
49474: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49475: LD_ADDR_VAR 0 3
49479: PUSH
49480: LD_INT 32
49482: PPUSH
49483: LD_VAR 0 1
49487: PPUSH
49488: CALL_OW 321
49492: PUSH
49493: LD_INT 2
49495: EQUAL
49496: ST_TO_ADDR
49497: GO 49815
49499: LD_INT 20
49501: DOUBLE
49502: EQUAL
49503: IFTRUE 49507
49505: GO 49532
49507: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49508: LD_ADDR_VAR 0 3
49512: PUSH
49513: LD_INT 6
49515: PPUSH
49516: LD_VAR 0 1
49520: PPUSH
49521: CALL_OW 321
49525: PUSH
49526: LD_INT 2
49528: EQUAL
49529: ST_TO_ADDR
49530: GO 49815
49532: LD_INT 22
49534: DOUBLE
49535: EQUAL
49536: IFTRUE 49546
49538: LD_INT 36
49540: DOUBLE
49541: EQUAL
49542: IFTRUE 49546
49544: GO 49571
49546: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49547: LD_ADDR_VAR 0 3
49551: PUSH
49552: LD_INT 15
49554: PPUSH
49555: LD_VAR 0 1
49559: PPUSH
49560: CALL_OW 321
49564: PUSH
49565: LD_INT 2
49567: EQUAL
49568: ST_TO_ADDR
49569: GO 49815
49571: LD_INT 30
49573: DOUBLE
49574: EQUAL
49575: IFTRUE 49579
49577: GO 49604
49579: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49580: LD_ADDR_VAR 0 3
49584: PUSH
49585: LD_INT 20
49587: PPUSH
49588: LD_VAR 0 1
49592: PPUSH
49593: CALL_OW 321
49597: PUSH
49598: LD_INT 2
49600: EQUAL
49601: ST_TO_ADDR
49602: GO 49815
49604: LD_INT 28
49606: DOUBLE
49607: EQUAL
49608: IFTRUE 49618
49610: LD_INT 21
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49618
49616: GO 49643
49618: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49619: LD_ADDR_VAR 0 3
49623: PUSH
49624: LD_INT 21
49626: PPUSH
49627: LD_VAR 0 1
49631: PPUSH
49632: CALL_OW 321
49636: PUSH
49637: LD_INT 2
49639: EQUAL
49640: ST_TO_ADDR
49641: GO 49815
49643: LD_INT 16
49645: DOUBLE
49646: EQUAL
49647: IFTRUE 49651
49649: GO 49676
49651: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49652: LD_ADDR_VAR 0 3
49656: PUSH
49657: LD_INT 84
49659: PPUSH
49660: LD_VAR 0 1
49664: PPUSH
49665: CALL_OW 321
49669: PUSH
49670: LD_INT 2
49672: EQUAL
49673: ST_TO_ADDR
49674: GO 49815
49676: LD_INT 19
49678: DOUBLE
49679: EQUAL
49680: IFTRUE 49690
49682: LD_INT 23
49684: DOUBLE
49685: EQUAL
49686: IFTRUE 49690
49688: GO 49715
49690: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49691: LD_ADDR_VAR 0 3
49695: PUSH
49696: LD_INT 83
49698: PPUSH
49699: LD_VAR 0 1
49703: PPUSH
49704: CALL_OW 321
49708: PUSH
49709: LD_INT 2
49711: EQUAL
49712: ST_TO_ADDR
49713: GO 49815
49715: LD_INT 17
49717: DOUBLE
49718: EQUAL
49719: IFTRUE 49723
49721: GO 49748
49723: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49724: LD_ADDR_VAR 0 3
49728: PUSH
49729: LD_INT 39
49731: PPUSH
49732: LD_VAR 0 1
49736: PPUSH
49737: CALL_OW 321
49741: PUSH
49742: LD_INT 2
49744: EQUAL
49745: ST_TO_ADDR
49746: GO 49815
49748: LD_INT 18
49750: DOUBLE
49751: EQUAL
49752: IFTRUE 49756
49754: GO 49781
49756: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49757: LD_ADDR_VAR 0 3
49761: PUSH
49762: LD_INT 40
49764: PPUSH
49765: LD_VAR 0 1
49769: PPUSH
49770: CALL_OW 321
49774: PUSH
49775: LD_INT 2
49777: EQUAL
49778: ST_TO_ADDR
49779: GO 49815
49781: LD_INT 27
49783: DOUBLE
49784: EQUAL
49785: IFTRUE 49789
49787: GO 49814
49789: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49790: LD_ADDR_VAR 0 3
49794: PUSH
49795: LD_INT 35
49797: PPUSH
49798: LD_VAR 0 1
49802: PPUSH
49803: CALL_OW 321
49807: PUSH
49808: LD_INT 2
49810: EQUAL
49811: ST_TO_ADDR
49812: GO 49815
49814: POP
// end ;
49815: LD_VAR 0 3
49819: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49820: LD_INT 0
49822: PPUSH
49823: PPUSH
49824: PPUSH
49825: PPUSH
49826: PPUSH
49827: PPUSH
49828: PPUSH
49829: PPUSH
49830: PPUSH
49831: PPUSH
49832: PPUSH
// result := false ;
49833: LD_ADDR_VAR 0 6
49837: PUSH
49838: LD_INT 0
49840: ST_TO_ADDR
// if btype = b_depot then
49841: LD_VAR 0 2
49845: PUSH
49846: LD_INT 0
49848: EQUAL
49849: IFFALSE 49861
// begin result := true ;
49851: LD_ADDR_VAR 0 6
49855: PUSH
49856: LD_INT 1
49858: ST_TO_ADDR
// exit ;
49859: GO 50687
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49861: LD_VAR 0 1
49865: NOT
49866: PUSH
49867: LD_VAR 0 1
49871: PPUSH
49872: CALL_OW 266
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: IN
49887: NOT
49888: OR
49889: PUSH
49890: LD_VAR 0 2
49894: NOT
49895: OR
49896: PUSH
49897: LD_VAR 0 5
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: LD_INT 4
49916: PUSH
49917: LD_INT 5
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: IN
49928: NOT
49929: OR
49930: PUSH
49931: LD_VAR 0 3
49935: PPUSH
49936: LD_VAR 0 4
49940: PPUSH
49941: CALL_OW 488
49945: NOT
49946: OR
49947: IFFALSE 49951
// exit ;
49949: GO 50687
// side := GetSide ( depot ) ;
49951: LD_ADDR_VAR 0 9
49955: PUSH
49956: LD_VAR 0 1
49960: PPUSH
49961: CALL_OW 255
49965: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49966: LD_VAR 0 9
49970: PPUSH
49971: LD_VAR 0 2
49975: PPUSH
49976: CALL 49444 0 2
49980: NOT
49981: IFFALSE 49985
// exit ;
49983: GO 50687
// pom := GetBase ( depot ) ;
49985: LD_ADDR_VAR 0 10
49989: PUSH
49990: LD_VAR 0 1
49994: PPUSH
49995: CALL_OW 274
49999: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50000: LD_ADDR_VAR 0 11
50004: PUSH
50005: LD_VAR 0 2
50009: PPUSH
50010: LD_VAR 0 1
50014: PPUSH
50015: CALL_OW 248
50019: PPUSH
50020: CALL_OW 450
50024: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50025: LD_VAR 0 10
50029: PPUSH
50030: LD_INT 1
50032: PPUSH
50033: CALL_OW 275
50037: PUSH
50038: LD_VAR 0 11
50042: PUSH
50043: LD_INT 1
50045: ARRAY
50046: GREATEREQUAL
50047: PUSH
50048: LD_VAR 0 10
50052: PPUSH
50053: LD_INT 2
50055: PPUSH
50056: CALL_OW 275
50060: PUSH
50061: LD_VAR 0 11
50065: PUSH
50066: LD_INT 2
50068: ARRAY
50069: GREATEREQUAL
50070: AND
50071: PUSH
50072: LD_VAR 0 10
50076: PPUSH
50077: LD_INT 3
50079: PPUSH
50080: CALL_OW 275
50084: PUSH
50085: LD_VAR 0 11
50089: PUSH
50090: LD_INT 3
50092: ARRAY
50093: GREATEREQUAL
50094: AND
50095: NOT
50096: IFFALSE 50100
// exit ;
50098: GO 50687
// if GetBType ( depot ) = b_depot then
50100: LD_VAR 0 1
50104: PPUSH
50105: CALL_OW 266
50109: PUSH
50110: LD_INT 0
50112: EQUAL
50113: IFFALSE 50125
// dist := 28 else
50115: LD_ADDR_VAR 0 14
50119: PUSH
50120: LD_INT 28
50122: ST_TO_ADDR
50123: GO 50133
// dist := 36 ;
50125: LD_ADDR_VAR 0 14
50129: PUSH
50130: LD_INT 36
50132: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50133: LD_VAR 0 1
50137: PPUSH
50138: LD_VAR 0 3
50142: PPUSH
50143: LD_VAR 0 4
50147: PPUSH
50148: CALL_OW 297
50152: PUSH
50153: LD_VAR 0 14
50157: GREATER
50158: IFFALSE 50162
// exit ;
50160: GO 50687
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50162: LD_ADDR_VAR 0 12
50166: PUSH
50167: LD_VAR 0 2
50171: PPUSH
50172: LD_VAR 0 3
50176: PPUSH
50177: LD_VAR 0 4
50181: PPUSH
50182: LD_VAR 0 5
50186: PPUSH
50187: LD_VAR 0 1
50191: PPUSH
50192: CALL_OW 248
50196: PPUSH
50197: LD_INT 0
50199: PPUSH
50200: CALL 50692 0 6
50204: ST_TO_ADDR
// if not hexes then
50205: LD_VAR 0 12
50209: NOT
50210: IFFALSE 50214
// exit ;
50212: GO 50687
// hex := GetHexInfo ( x , y ) ;
50214: LD_ADDR_VAR 0 15
50218: PUSH
50219: LD_VAR 0 3
50223: PPUSH
50224: LD_VAR 0 4
50228: PPUSH
50229: CALL_OW 546
50233: ST_TO_ADDR
// if hex [ 1 ] then
50234: LD_VAR 0 15
50238: PUSH
50239: LD_INT 1
50241: ARRAY
50242: IFFALSE 50246
// exit ;
50244: GO 50687
// height := hex [ 2 ] ;
50246: LD_ADDR_VAR 0 13
50250: PUSH
50251: LD_VAR 0 15
50255: PUSH
50256: LD_INT 2
50258: ARRAY
50259: ST_TO_ADDR
// for i = 1 to hexes do
50260: LD_ADDR_VAR 0 7
50264: PUSH
50265: DOUBLE
50266: LD_INT 1
50268: DEC
50269: ST_TO_ADDR
50270: LD_VAR 0 12
50274: PUSH
50275: FOR_TO
50276: IFFALSE 50606
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50278: LD_VAR 0 12
50282: PUSH
50283: LD_VAR 0 7
50287: ARRAY
50288: PUSH
50289: LD_INT 1
50291: ARRAY
50292: PPUSH
50293: LD_VAR 0 12
50297: PUSH
50298: LD_VAR 0 7
50302: ARRAY
50303: PUSH
50304: LD_INT 2
50306: ARRAY
50307: PPUSH
50308: CALL_OW 488
50312: NOT
50313: PUSH
50314: LD_VAR 0 12
50318: PUSH
50319: LD_VAR 0 7
50323: ARRAY
50324: PUSH
50325: LD_INT 1
50327: ARRAY
50328: PPUSH
50329: LD_VAR 0 12
50333: PUSH
50334: LD_VAR 0 7
50338: ARRAY
50339: PUSH
50340: LD_INT 2
50342: ARRAY
50343: PPUSH
50344: CALL_OW 428
50348: PUSH
50349: LD_INT 0
50351: GREATER
50352: OR
50353: PUSH
50354: LD_VAR 0 12
50358: PUSH
50359: LD_VAR 0 7
50363: ARRAY
50364: PUSH
50365: LD_INT 1
50367: ARRAY
50368: PPUSH
50369: LD_VAR 0 12
50373: PUSH
50374: LD_VAR 0 7
50378: ARRAY
50379: PUSH
50380: LD_INT 2
50382: ARRAY
50383: PPUSH
50384: CALL_OW 351
50388: OR
50389: IFFALSE 50395
// exit ;
50391: POP
50392: POP
50393: GO 50687
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50395: LD_ADDR_VAR 0 8
50399: PUSH
50400: LD_VAR 0 12
50404: PUSH
50405: LD_VAR 0 7
50409: ARRAY
50410: PUSH
50411: LD_INT 1
50413: ARRAY
50414: PPUSH
50415: LD_VAR 0 12
50419: PUSH
50420: LD_VAR 0 7
50424: ARRAY
50425: PUSH
50426: LD_INT 2
50428: ARRAY
50429: PPUSH
50430: CALL_OW 546
50434: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50435: LD_VAR 0 8
50439: PUSH
50440: LD_INT 1
50442: ARRAY
50443: PUSH
50444: LD_VAR 0 8
50448: PUSH
50449: LD_INT 2
50451: ARRAY
50452: PUSH
50453: LD_VAR 0 13
50457: PUSH
50458: LD_INT 2
50460: PLUS
50461: GREATER
50462: OR
50463: PUSH
50464: LD_VAR 0 8
50468: PUSH
50469: LD_INT 2
50471: ARRAY
50472: PUSH
50473: LD_VAR 0 13
50477: PUSH
50478: LD_INT 2
50480: MINUS
50481: LESS
50482: OR
50483: PUSH
50484: LD_VAR 0 8
50488: PUSH
50489: LD_INT 3
50491: ARRAY
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 8
50498: PUSH
50499: LD_INT 9
50501: PUSH
50502: LD_INT 10
50504: PUSH
50505: LD_INT 11
50507: PUSH
50508: LD_INT 12
50510: PUSH
50511: LD_INT 13
50513: PUSH
50514: LD_INT 16
50516: PUSH
50517: LD_INT 17
50519: PUSH
50520: LD_INT 18
50522: PUSH
50523: LD_INT 19
50525: PUSH
50526: LD_INT 20
50528: PUSH
50529: LD_INT 21
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: IN
50547: NOT
50548: OR
50549: PUSH
50550: LD_VAR 0 8
50554: PUSH
50555: LD_INT 5
50557: ARRAY
50558: NOT
50559: OR
50560: PUSH
50561: LD_VAR 0 8
50565: PUSH
50566: LD_INT 6
50568: ARRAY
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 7
50578: PUSH
50579: LD_INT 9
50581: PUSH
50582: LD_INT 10
50584: PUSH
50585: LD_INT 11
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: IN
50596: NOT
50597: OR
50598: IFFALSE 50604
// exit ;
50600: POP
50601: POP
50602: GO 50687
// end ;
50604: GO 50275
50606: POP
50607: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50608: LD_VAR 0 9
50612: PPUSH
50613: LD_VAR 0 3
50617: PPUSH
50618: LD_VAR 0 4
50622: PPUSH
50623: LD_INT 20
50625: PPUSH
50626: CALL 42610 0 4
50630: PUSH
50631: LD_INT 4
50633: ARRAY
50634: IFFALSE 50638
// exit ;
50636: GO 50687
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50638: LD_VAR 0 2
50642: PUSH
50643: LD_INT 29
50645: PUSH
50646: LD_INT 30
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: IN
50653: PUSH
50654: LD_VAR 0 3
50658: PPUSH
50659: LD_VAR 0 4
50663: PPUSH
50664: LD_VAR 0 9
50668: PPUSH
50669: CALL_OW 440
50673: NOT
50674: AND
50675: IFFALSE 50679
// exit ;
50677: GO 50687
// result := true ;
50679: LD_ADDR_VAR 0 6
50683: PUSH
50684: LD_INT 1
50686: ST_TO_ADDR
// end ;
50687: LD_VAR 0 6
50691: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50692: LD_INT 0
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
// result = [ ] ;
50752: LD_ADDR_VAR 0 7
50756: PUSH
50757: EMPTY
50758: ST_TO_ADDR
// temp_list = [ ] ;
50759: LD_ADDR_VAR 0 9
50763: PUSH
50764: EMPTY
50765: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50766: LD_VAR 0 4
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: LD_INT 5
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: IN
50797: NOT
50798: PUSH
50799: LD_VAR 0 1
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: IN
50814: PUSH
50815: LD_VAR 0 5
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: LIST
50833: IN
50834: NOT
50835: AND
50836: OR
50837: IFFALSE 50841
// exit ;
50839: GO 69232
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50841: LD_VAR 0 1
50845: PUSH
50846: LD_INT 6
50848: PUSH
50849: LD_INT 7
50851: PUSH
50852: LD_INT 8
50854: PUSH
50855: LD_INT 13
50857: PUSH
50858: LD_INT 12
50860: PUSH
50861: LD_INT 15
50863: PUSH
50864: LD_INT 11
50866: PUSH
50867: LD_INT 14
50869: PUSH
50870: LD_INT 10
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: IN
50884: IFFALSE 50894
// btype = b_lab ;
50886: LD_ADDR_VAR 0 1
50890: PUSH
50891: LD_INT 6
50893: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50894: LD_VAR 0 6
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: IN
50913: NOT
50914: PUSH
50915: LD_VAR 0 1
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 6
50934: PUSH
50935: LD_INT 36
50937: PUSH
50938: LD_INT 4
50940: PUSH
50941: LD_INT 5
50943: PUSH
50944: LD_INT 31
50946: PUSH
50947: LD_INT 32
50949: PUSH
50950: LD_INT 33
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: IN
50966: NOT
50967: PUSH
50968: LD_VAR 0 6
50972: PUSH
50973: LD_INT 1
50975: EQUAL
50976: AND
50977: OR
50978: PUSH
50979: LD_VAR 0 1
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: IN
50994: NOT
50995: PUSH
50996: LD_VAR 0 6
51000: PUSH
51001: LD_INT 2
51003: EQUAL
51004: AND
51005: OR
51006: IFFALSE 51016
// mode = 0 ;
51008: LD_ADDR_VAR 0 6
51012: PUSH
51013: LD_INT 0
51015: ST_TO_ADDR
// case mode of 0 :
51016: LD_VAR 0 6
51020: PUSH
51021: LD_INT 0
51023: DOUBLE
51024: EQUAL
51025: IFTRUE 51029
51027: GO 62482
51029: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51030: LD_ADDR_VAR 0 11
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 3
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 3
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51223: LD_ADDR_VAR 0 12
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51419: LD_ADDR_VAR 0 13
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: LD_INT 3
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 3
51590: NEG
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51618: LD_ADDR_VAR 0 14
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51814: LD_ADDR_VAR 0 15
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52007: LD_ADDR_VAR 0 16
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 3
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52200: LD_ADDR_VAR 0 17
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52430: LD_ADDR_VAR 0 18
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52660: LD_ADDR_VAR 0 19
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52890: LD_ADDR_VAR 0 20
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53120: LD_ADDR_VAR 0 21
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53350: LD_ADDR_VAR 0 22
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53580: LD_ADDR_VAR 0 23
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53860: LD_ADDR_VAR 0 24
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54136: LD_ADDR_VAR 0 25
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54410: LD_ADDR_VAR 0 26
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54686: LD_ADDR_VAR 0 27
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54966: LD_ADDR_VAR 0 28
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: NEG
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: NEG
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55248: LD_ADDR_VAR 0 29
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 3
55492: NEG
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55527: LD_ADDR_VAR 0 30
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 3
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55805: LD_ADDR_VAR 0 31
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 3
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56083: LD_ADDR_VAR 0 32
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 3
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 3
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56361: LD_ADDR_VAR 0 33
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 3
56605: NEG
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56640: LD_ADDR_VAR 0 34
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 3
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 3
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56920: LD_ADDR_VAR 0 35
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57032: LD_ADDR_VAR 0 36
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57144: LD_ADDR_VAR 0 37
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57256: LD_ADDR_VAR 0 38
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57368: LD_ADDR_VAR 0 39
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57480: LD_ADDR_VAR 0 40
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57592: LD_ADDR_VAR 0 41
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: NEG
57783: PUSH
57784: LD_INT 3
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: NEG
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57942: LD_ADDR_VAR 0 42
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: LD_INT 3
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: NEG
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58292: LD_ADDR_VAR 0 43
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: NEG
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 3
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: LD_INT 3
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58640: LD_ADDR_VAR 0 44
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: LD_INT 3
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 3
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58990: LD_ADDR_VAR 0 45
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: NEG
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 3
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 3
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59340: LD_ADDR_VAR 0 46
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 2
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 3
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: LD_INT 3
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59688: LD_ADDR_VAR 0 47
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59839: LD_ADDR_VAR 0 48
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59986: LD_ADDR_VAR 0 49
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60130: LD_ADDR_VAR 0 50
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60274: LD_ADDR_VAR 0 51
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60421: LD_ADDR_VAR 0 52
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60572: LD_ADDR_VAR 0 53
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 2
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60802: LD_ADDR_VAR 0 54
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61032: LD_ADDR_VAR 0 55
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 2
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: NEG
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61262: LD_ADDR_VAR 0 56
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61492: LD_ADDR_VAR 0 57
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 2
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: NEG
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 2
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61722: LD_ADDR_VAR 0 58
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61952: LD_ADDR_VAR 0 59
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62040: LD_ADDR_VAR 0 60
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62128: LD_ADDR_VAR 0 61
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62216: LD_ADDR_VAR 0 62
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62304: LD_ADDR_VAR 0 63
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62392: LD_ADDR_VAR 0 64
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: ST_TO_ADDR
// end ; 1 :
62480: GO 68377
62482: LD_INT 1
62484: DOUBLE
62485: EQUAL
62486: IFTRUE 62490
62488: GO 65113
62490: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62491: LD_ADDR_VAR 0 11
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 3
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 2
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62535: LD_ADDR_VAR 0 12
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: LIST
62575: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62576: LD_ADDR_VAR 0 13
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: LD_INT 2
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 3
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62616: LD_ADDR_VAR 0 14
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: LIST
62656: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62657: LD_ADDR_VAR 0 15
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 3
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: LIST
62700: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62701: LD_ADDR_VAR 0 16
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 3
62720: NEG
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 3
62732: NEG
62733: PUSH
62734: LD_INT 3
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62747: LD_ADDR_VAR 0 17
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 3
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62791: LD_ADDR_VAR 0 18
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 3
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 3
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62832: LD_ADDR_VAR 0 19
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: LD_INT 3
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: LD_INT 3
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62872: LD_ADDR_VAR 0 20
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 3
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 3
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62913: LD_ADDR_VAR 0 21
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 3
62942: NEG
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62957: LD_ADDR_VAR 0 22
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: LD_INT 3
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 3
62976: NEG
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 3
62988: NEG
62989: PUSH
62990: LD_INT 3
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63003: LD_ADDR_VAR 0 23
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 3
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 4
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 3
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63047: LD_ADDR_VAR 0 24
63051: PUSH
63052: LD_INT 3
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 4
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: LIST
63087: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63088: LD_ADDR_VAR 0 25
63092: PUSH
63093: LD_INT 3
63095: PUSH
63096: LD_INT 3
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 4
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: LD_INT 4
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63128: LD_ADDR_VAR 0 26
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: LD_INT 4
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: LIST
63168: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63169: LD_ADDR_VAR 0 27
63173: PUSH
63174: LD_INT 3
63176: NEG
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 3
63187: NEG
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 4
63198: NEG
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: LIST
63212: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63213: LD_ADDR_VAR 0 28
63217: PUSH
63218: LD_INT 3
63220: NEG
63221: PUSH
63222: LD_INT 3
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 3
63232: NEG
63233: PUSH
63234: LD_INT 4
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 4
63244: NEG
63245: PUSH
63246: LD_INT 3
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63259: LD_ADDR_VAR 0 29
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: LD_INT 3
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: LD_INT 2
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: LD_INT 4
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 4
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 3
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 5
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 5
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: LD_INT 4
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 6
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 6
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 5
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63414: LD_ADDR_VAR 0 30
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 3
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 3
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 4
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 4
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 4
63483: PUSH
63484: LD_INT 1
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 5
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 5
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 5
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 6
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 6
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63557: LD_ADDR_VAR 0 31
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: LD_INT 3
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: LD_INT 3
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 4
63594: PUSH
63595: LD_INT 3
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 4
63604: PUSH
63605: LD_INT 4
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 3
63614: PUSH
63615: LD_INT 4
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 5
63624: PUSH
63625: LD_INT 4
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 5
63634: PUSH
63635: LD_INT 5
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 4
63644: PUSH
63645: LD_INT 5
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 6
63654: PUSH
63655: LD_INT 5
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 6
63664: PUSH
63665: LD_INT 6
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 5
63674: PUSH
63675: LD_INT 6
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63696: LD_ADDR_VAR 0 32
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: LD_INT 4
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: LD_INT 4
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 3
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: LD_INT 5
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 5
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: LD_INT 4
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: LD_INT 6
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 6
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: LD_INT 5
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63839: LD_ADDR_VAR 0 33
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: NEG
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 3
63880: NEG
63881: PUSH
63882: LD_INT 1
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 4
63891: NEG
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 4
63902: NEG
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 4
63914: NEG
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 5
63925: NEG
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 5
63936: NEG
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 5
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 6
63959: NEG
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 6
63970: NEG
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63994: LD_ADDR_VAR 0 34
63998: PUSH
63999: LD_INT 2
64001: NEG
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 3
64013: NEG
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 3
64025: NEG
64026: PUSH
64027: LD_INT 3
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 3
64037: NEG
64038: PUSH
64039: LD_INT 4
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 4
64049: NEG
64050: PUSH
64051: LD_INT 3
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 4
64061: NEG
64062: PUSH
64063: LD_INT 4
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 4
64073: NEG
64074: PUSH
64075: LD_INT 5
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 5
64085: NEG
64086: PUSH
64087: LD_INT 4
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 5
64097: NEG
64098: PUSH
64099: LD_INT 5
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 5
64109: NEG
64110: PUSH
64111: LD_INT 6
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 6
64121: NEG
64122: PUSH
64123: LD_INT 5
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 6
64133: NEG
64134: PUSH
64135: LD_INT 6
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64157: LD_ADDR_VAR 0 41
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 3
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: LIST
64200: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64201: LD_ADDR_VAR 0 42
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64242: LD_ADDR_VAR 0 43
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 3
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64282: LD_ADDR_VAR 0 44
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: PUSH
64300: LD_INT 3
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: LIST
64322: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64323: LD_ADDR_VAR 0 45
64327: PUSH
64328: LD_INT 2
64330: NEG
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 2
64341: NEG
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 3
64352: NEG
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64367: LD_ADDR_VAR 0 46
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: LD_INT 2
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: NEG
64387: PUSH
64388: LD_INT 3
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64413: LD_ADDR_VAR 0 47
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 3
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64446: LD_ADDR_VAR 0 48
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 2
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64477: LD_ADDR_VAR 0 49
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 3
64494: PUSH
64495: LD_INT 2
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64506: LD_ADDR_VAR 0 50
64510: PUSH
64511: LD_INT 2
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: LD_INT 3
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64535: LD_ADDR_VAR 0 51
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 2
64553: NEG
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64566: LD_ADDR_VAR 0 52
64570: PUSH
64571: LD_INT 3
64573: NEG
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: LD_INT 2
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64599: LD_ADDR_VAR 0 53
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: LD_INT 3
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 2
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64643: LD_ADDR_VAR 0 54
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 3
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64684: LD_ADDR_VAR 0 55
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: LD_INT 2
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: PUSH
64702: LD_INT 3
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: LD_INT 3
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: LIST
64723: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64724: LD_ADDR_VAR 0 56
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 3
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 3
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 2
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64765: LD_ADDR_VAR 0 57
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 3
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64809: LD_ADDR_VAR 0 58
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: LD_INT 3
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 3
64840: NEG
64841: PUSH
64842: LD_INT 3
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64855: LD_ADDR_VAR 0 59
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: LD_INT 2
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: LD_INT 2
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64899: LD_ADDR_VAR 0 60
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 2
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64940: LD_ADDR_VAR 0 61
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64980: LD_ADDR_VAR 0 62
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 2
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65021: LD_ADDR_VAR 0 63
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 2
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65065: LD_ADDR_VAR 0 64
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 2
65084: NEG
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// end ; 2 :
65111: GO 68377
65113: LD_INT 2
65115: DOUBLE
65116: EQUAL
65117: IFTRUE 65121
65119: GO 68376
65121: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65122: LD_ADDR_VAR 0 29
65126: PUSH
65127: LD_INT 4
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 4
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 5
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 5
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 4
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 3
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: LD_INT 2
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 5
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 3
65222: PUSH
65223: LD_INT 3
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 3
65232: PUSH
65233: LD_INT 2
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 4
65242: PUSH
65243: LD_INT 3
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 4
65252: PUSH
65253: LD_INT 4
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: LD_INT 4
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: LD_INT 3
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 4
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: PUSH
65303: LD_INT 4
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 4
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: LD_INT 3
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: LD_INT 4
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: LD_INT 5
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 5
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: NEG
65363: PUSH
65364: LD_INT 4
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: NEG
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: LD_INT 5
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: LD_INT 3
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 3
65405: NEG
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 3
65416: NEG
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 2
65439: NEG
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 3
65450: NEG
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 4
65461: NEG
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 4
65472: NEG
65473: PUSH
65474: LD_INT 1
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 4
65484: NEG
65485: PUSH
65486: LD_INT 2
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 2
65496: NEG
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 4
65507: NEG
65508: PUSH
65509: LD_INT 4
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 4
65519: NEG
65520: PUSH
65521: LD_INT 5
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 3
65531: NEG
65532: PUSH
65533: LD_INT 4
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: LD_INT 3
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 4
65555: NEG
65556: PUSH
65557: LD_INT 3
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 5
65567: NEG
65568: PUSH
65569: LD_INT 4
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 5
65579: NEG
65580: PUSH
65581: LD_INT 5
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 3
65591: NEG
65592: PUSH
65593: LD_INT 5
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 5
65603: NEG
65604: PUSH
65605: LD_INT 3
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65660: LD_ADDR_VAR 0 30
65664: PUSH
65665: LD_INT 4
65667: PUSH
65668: LD_INT 4
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 4
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 5
65687: PUSH
65688: LD_INT 4
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: LD_INT 5
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 4
65707: PUSH
65708: LD_INT 5
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 3
65717: PUSH
65718: LD_INT 4
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: PUSH
65728: LD_INT 3
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 5
65737: PUSH
65738: LD_INT 3
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: LD_INT 5
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: LD_INT 3
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: LD_INT 4
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: LD_INT 4
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: PUSH
65820: LD_INT 2
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: LD_INT 4
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: NEG
65840: PUSH
65841: LD_INT 2
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 4
65850: NEG
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 4
65861: NEG
65862: PUSH
65863: LD_INT 1
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 3
65873: NEG
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 3
65884: NEG
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 4
65895: NEG
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 5
65906: NEG
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 5
65917: NEG
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 5
65929: NEG
65930: PUSH
65931: LD_INT 2
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: LD_INT 2
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: NEG
65953: PUSH
65954: LD_INT 3
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: NEG
65965: PUSH
65966: LD_INT 4
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 2
65976: NEG
65977: PUSH
65978: LD_INT 3
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 3
66000: NEG
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 4
66012: NEG
66013: PUSH
66014: LD_INT 3
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 4
66024: NEG
66025: PUSH
66026: LD_INT 4
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: LD_INT 4
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 4
66048: NEG
66049: PUSH
66050: LD_INT 2
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: LD_INT 4
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: LD_INT 5
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: LD_INT 4
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: LD_INT 4
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: LD_INT 5
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 2
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: NEG
66151: PUSH
66152: LD_INT 5
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66207: LD_ADDR_VAR 0 31
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 4
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: LD_INT 3
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: LD_INT 4
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: LD_INT 5
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 5
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: LD_INT 4
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: LD_INT 3
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 2
66286: PUSH
66287: LD_INT 5
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 3
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 3
66307: NEG
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: NEG
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: LD_INT 1
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: LD_INT 1
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 4
66363: NEG
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 4
66374: NEG
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 4
66386: NEG
66387: PUSH
66388: LD_INT 2
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 2
66398: NEG
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: NEG
66410: PUSH
66411: LD_INT 4
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 4
66421: NEG
66422: PUSH
66423: LD_INT 5
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 3
66433: NEG
66434: PUSH
66435: LD_INT 4
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: LD_INT 3
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 4
66457: NEG
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 5
66469: NEG
66470: PUSH
66471: LD_INT 4
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 5
66481: NEG
66482: PUSH
66483: LD_INT 5
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 3
66493: NEG
66494: PUSH
66495: LD_INT 5
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 5
66505: NEG
66506: PUSH
66507: LD_INT 3
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 3
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: LD_INT 4
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: LD_INT 3
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: LD_INT 2
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: LD_INT 3
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: LD_INT 4
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 2
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 2
66607: NEG
66608: PUSH
66609: LD_INT 4
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 4
66619: PUSH
66620: LD_INT 0
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 4
66629: PUSH
66630: LD_INT 1
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 5
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 5
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 4
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 3
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 3
66691: PUSH
66692: LD_INT 2
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 5
66702: PUSH
66703: LD_INT 2
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66757: LD_ADDR_VAR 0 32
66761: PUSH
66762: LD_INT 4
66764: NEG
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 4
66775: NEG
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 3
66787: NEG
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: NEG
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 4
66809: NEG
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 5
66820: NEG
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 5
66831: NEG
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 5
66843: NEG
66844: PUSH
66845: LD_INT 2
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 3
66855: NEG
66856: PUSH
66857: LD_INT 2
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 3
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 4
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: LD_INT 2
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 3
66914: NEG
66915: PUSH
66916: LD_INT 2
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 4
66926: NEG
66927: PUSH
66928: LD_INT 3
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 4
66938: NEG
66939: PUSH
66940: LD_INT 4
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 2
66950: NEG
66951: PUSH
66952: LD_INT 4
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 4
66962: NEG
66963: PUSH
66964: LD_INT 2
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 4
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: LD_INT 5
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: LD_INT 4
66999: NEG
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: LD_INT 4
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: LD_INT 5
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: LD_INT 5
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 3
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 3
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 4
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 4
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 2
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 2
67148: PUSH
67149: LD_INT 2
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 4
67159: PUSH
67160: LD_INT 2
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 4
67169: PUSH
67170: LD_INT 4
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 4
67179: PUSH
67180: LD_INT 3
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 5
67189: PUSH
67190: LD_INT 4
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 5
67199: PUSH
67200: LD_INT 5
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: LD_INT 5
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 3
67219: PUSH
67220: LD_INT 4
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 3
67229: PUSH
67230: LD_INT 3
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 5
67239: PUSH
67240: LD_INT 3
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 3
67249: PUSH
67250: LD_INT 5
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67304: LD_ADDR_VAR 0 33
67308: PUSH
67309: LD_INT 4
67311: NEG
67312: PUSH
67313: LD_INT 4
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 4
67323: NEG
67324: PUSH
67325: LD_INT 5
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: NEG
67336: PUSH
67337: LD_INT 4
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 3
67347: NEG
67348: PUSH
67349: LD_INT 3
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 4
67359: NEG
67360: PUSH
67361: LD_INT 3
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 5
67371: NEG
67372: PUSH
67373: LD_INT 4
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 5
67383: NEG
67384: PUSH
67385: LD_INT 5
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 3
67395: NEG
67396: PUSH
67397: LD_INT 5
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 5
67407: NEG
67408: PUSH
67409: LD_INT 3
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: LD_INT 3
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: LD_INT 4
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: LD_INT 3
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 1
67452: PUSH
67453: LD_INT 2
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: LD_INT 2
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 3
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: LD_INT 4
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 2
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: LD_INT 4
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 4
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 4
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 5
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 5
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 4
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 3
67582: PUSH
67583: LD_INT 1
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 3
67593: PUSH
67594: LD_INT 2
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 5
67604: PUSH
67605: LD_INT 2
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: LD_INT 3
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 3
67624: PUSH
67625: LD_INT 2
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 4
67634: PUSH
67635: LD_INT 3
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 4
67644: PUSH
67645: LD_INT 4
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 3
67654: PUSH
67655: LD_INT 4
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 2
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 4
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: LD_INT 4
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: LD_INT 4
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: LD_INT 4
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 1
67734: PUSH
67735: LD_INT 5
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: LD_INT 5
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 1
67754: NEG
67755: PUSH
67756: LD_INT 4
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: NEG
67766: PUSH
67767: LD_INT 3
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 2
67776: PUSH
67777: LD_INT 5
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: NEG
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67842: LD_ADDR_VAR 0 34
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 4
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: LD_INT 5
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: LD_INT 4
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: LD_INT 3
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: LD_INT 3
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 1
67904: NEG
67905: PUSH
67906: LD_INT 4
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: LD_INT 5
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 2
67939: NEG
67940: PUSH
67941: LD_INT 5
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 3
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: LD_INT 1
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 0
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 4
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: LD_INT 1
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 2
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 4
68034: PUSH
68035: LD_INT 2
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 4
68044: PUSH
68045: LD_INT 4
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 4
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 5
68064: PUSH
68065: LD_INT 4
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 5
68074: PUSH
68075: LD_INT 5
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 4
68084: PUSH
68085: LD_INT 5
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 3
68094: PUSH
68095: LD_INT 4
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 3
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 5
68114: PUSH
68115: LD_INT 3
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: LD_INT 5
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 3
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 2
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: LD_INT 3
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: LD_INT 4
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: LD_INT 4
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 1
68195: NEG
68196: PUSH
68197: LD_INT 2
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 2
68206: PUSH
68207: LD_INT 4
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: LD_INT 2
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 4
68227: NEG
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 4
68238: NEG
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 3
68250: NEG
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: LD_INT 1
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 4
68272: NEG
68273: PUSH
68274: LD_INT 1
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 5
68283: NEG
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 5
68294: NEG
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 5
68306: NEG
68307: PUSH
68308: LD_INT 2
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 3
68318: NEG
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: ST_TO_ADDR
// end ; end ;
68374: GO 68377
68376: POP
// case btype of b_depot , b_warehouse :
68377: LD_VAR 0 1
68381: PUSH
68382: LD_INT 0
68384: DOUBLE
68385: EQUAL
68386: IFTRUE 68396
68388: LD_INT 1
68390: DOUBLE
68391: EQUAL
68392: IFTRUE 68396
68394: GO 68597
68396: POP
// case nation of nation_american :
68397: LD_VAR 0 5
68401: PUSH
68402: LD_INT 1
68404: DOUBLE
68405: EQUAL
68406: IFTRUE 68410
68408: GO 68466
68410: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68411: LD_ADDR_VAR 0 9
68415: PUSH
68416: LD_VAR 0 11
68420: PUSH
68421: LD_VAR 0 12
68425: PUSH
68426: LD_VAR 0 13
68430: PUSH
68431: LD_VAR 0 14
68435: PUSH
68436: LD_VAR 0 15
68440: PUSH
68441: LD_VAR 0 16
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: PUSH
68454: LD_VAR 0 4
68458: PUSH
68459: LD_INT 1
68461: PLUS
68462: ARRAY
68463: ST_TO_ADDR
68464: GO 68595
68466: LD_INT 2
68468: DOUBLE
68469: EQUAL
68470: IFTRUE 68474
68472: GO 68530
68474: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68475: LD_ADDR_VAR 0 9
68479: PUSH
68480: LD_VAR 0 17
68484: PUSH
68485: LD_VAR 0 18
68489: PUSH
68490: LD_VAR 0 19
68494: PUSH
68495: LD_VAR 0 20
68499: PUSH
68500: LD_VAR 0 21
68504: PUSH
68505: LD_VAR 0 22
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: PUSH
68518: LD_VAR 0 4
68522: PUSH
68523: LD_INT 1
68525: PLUS
68526: ARRAY
68527: ST_TO_ADDR
68528: GO 68595
68530: LD_INT 3
68532: DOUBLE
68533: EQUAL
68534: IFTRUE 68538
68536: GO 68594
68538: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68539: LD_ADDR_VAR 0 9
68543: PUSH
68544: LD_VAR 0 23
68548: PUSH
68549: LD_VAR 0 24
68553: PUSH
68554: LD_VAR 0 25
68558: PUSH
68559: LD_VAR 0 26
68563: PUSH
68564: LD_VAR 0 27
68568: PUSH
68569: LD_VAR 0 28
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: PUSH
68582: LD_VAR 0 4
68586: PUSH
68587: LD_INT 1
68589: PLUS
68590: ARRAY
68591: ST_TO_ADDR
68592: GO 68595
68594: POP
68595: GO 69150
68597: LD_INT 2
68599: DOUBLE
68600: EQUAL
68601: IFTRUE 68611
68603: LD_INT 3
68605: DOUBLE
68606: EQUAL
68607: IFTRUE 68611
68609: GO 68667
68611: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68612: LD_ADDR_VAR 0 9
68616: PUSH
68617: LD_VAR 0 29
68621: PUSH
68622: LD_VAR 0 30
68626: PUSH
68627: LD_VAR 0 31
68631: PUSH
68632: LD_VAR 0 32
68636: PUSH
68637: LD_VAR 0 33
68641: PUSH
68642: LD_VAR 0 34
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: PUSH
68655: LD_VAR 0 4
68659: PUSH
68660: LD_INT 1
68662: PLUS
68663: ARRAY
68664: ST_TO_ADDR
68665: GO 69150
68667: LD_INT 16
68669: DOUBLE
68670: EQUAL
68671: IFTRUE 68729
68673: LD_INT 17
68675: DOUBLE
68676: EQUAL
68677: IFTRUE 68729
68679: LD_INT 18
68681: DOUBLE
68682: EQUAL
68683: IFTRUE 68729
68685: LD_INT 19
68687: DOUBLE
68688: EQUAL
68689: IFTRUE 68729
68691: LD_INT 22
68693: DOUBLE
68694: EQUAL
68695: IFTRUE 68729
68697: LD_INT 20
68699: DOUBLE
68700: EQUAL
68701: IFTRUE 68729
68703: LD_INT 21
68705: DOUBLE
68706: EQUAL
68707: IFTRUE 68729
68709: LD_INT 23
68711: DOUBLE
68712: EQUAL
68713: IFTRUE 68729
68715: LD_INT 24
68717: DOUBLE
68718: EQUAL
68719: IFTRUE 68729
68721: LD_INT 25
68723: DOUBLE
68724: EQUAL
68725: IFTRUE 68729
68727: GO 68785
68729: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68730: LD_ADDR_VAR 0 9
68734: PUSH
68735: LD_VAR 0 35
68739: PUSH
68740: LD_VAR 0 36
68744: PUSH
68745: LD_VAR 0 37
68749: PUSH
68750: LD_VAR 0 38
68754: PUSH
68755: LD_VAR 0 39
68759: PUSH
68760: LD_VAR 0 40
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: PUSH
68773: LD_VAR 0 4
68777: PUSH
68778: LD_INT 1
68780: PLUS
68781: ARRAY
68782: ST_TO_ADDR
68783: GO 69150
68785: LD_INT 6
68787: DOUBLE
68788: EQUAL
68789: IFTRUE 68841
68791: LD_INT 7
68793: DOUBLE
68794: EQUAL
68795: IFTRUE 68841
68797: LD_INT 8
68799: DOUBLE
68800: EQUAL
68801: IFTRUE 68841
68803: LD_INT 13
68805: DOUBLE
68806: EQUAL
68807: IFTRUE 68841
68809: LD_INT 12
68811: DOUBLE
68812: EQUAL
68813: IFTRUE 68841
68815: LD_INT 15
68817: DOUBLE
68818: EQUAL
68819: IFTRUE 68841
68821: LD_INT 11
68823: DOUBLE
68824: EQUAL
68825: IFTRUE 68841
68827: LD_INT 14
68829: DOUBLE
68830: EQUAL
68831: IFTRUE 68841
68833: LD_INT 10
68835: DOUBLE
68836: EQUAL
68837: IFTRUE 68841
68839: GO 68897
68841: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68842: LD_ADDR_VAR 0 9
68846: PUSH
68847: LD_VAR 0 41
68851: PUSH
68852: LD_VAR 0 42
68856: PUSH
68857: LD_VAR 0 43
68861: PUSH
68862: LD_VAR 0 44
68866: PUSH
68867: LD_VAR 0 45
68871: PUSH
68872: LD_VAR 0 46
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: PUSH
68885: LD_VAR 0 4
68889: PUSH
68890: LD_INT 1
68892: PLUS
68893: ARRAY
68894: ST_TO_ADDR
68895: GO 69150
68897: LD_INT 36
68899: DOUBLE
68900: EQUAL
68901: IFTRUE 68905
68903: GO 68961
68905: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68906: LD_ADDR_VAR 0 9
68910: PUSH
68911: LD_VAR 0 47
68915: PUSH
68916: LD_VAR 0 48
68920: PUSH
68921: LD_VAR 0 49
68925: PUSH
68926: LD_VAR 0 50
68930: PUSH
68931: LD_VAR 0 51
68935: PUSH
68936: LD_VAR 0 52
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: PUSH
68949: LD_VAR 0 4
68953: PUSH
68954: LD_INT 1
68956: PLUS
68957: ARRAY
68958: ST_TO_ADDR
68959: GO 69150
68961: LD_INT 4
68963: DOUBLE
68964: EQUAL
68965: IFTRUE 68987
68967: LD_INT 5
68969: DOUBLE
68970: EQUAL
68971: IFTRUE 68987
68973: LD_INT 34
68975: DOUBLE
68976: EQUAL
68977: IFTRUE 68987
68979: LD_INT 37
68981: DOUBLE
68982: EQUAL
68983: IFTRUE 68987
68985: GO 69043
68987: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68988: LD_ADDR_VAR 0 9
68992: PUSH
68993: LD_VAR 0 53
68997: PUSH
68998: LD_VAR 0 54
69002: PUSH
69003: LD_VAR 0 55
69007: PUSH
69008: LD_VAR 0 56
69012: PUSH
69013: LD_VAR 0 57
69017: PUSH
69018: LD_VAR 0 58
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: PUSH
69031: LD_VAR 0 4
69035: PUSH
69036: LD_INT 1
69038: PLUS
69039: ARRAY
69040: ST_TO_ADDR
69041: GO 69150
69043: LD_INT 31
69045: DOUBLE
69046: EQUAL
69047: IFTRUE 69093
69049: LD_INT 32
69051: DOUBLE
69052: EQUAL
69053: IFTRUE 69093
69055: LD_INT 33
69057: DOUBLE
69058: EQUAL
69059: IFTRUE 69093
69061: LD_INT 27
69063: DOUBLE
69064: EQUAL
69065: IFTRUE 69093
69067: LD_INT 26
69069: DOUBLE
69070: EQUAL
69071: IFTRUE 69093
69073: LD_INT 28
69075: DOUBLE
69076: EQUAL
69077: IFTRUE 69093
69079: LD_INT 29
69081: DOUBLE
69082: EQUAL
69083: IFTRUE 69093
69085: LD_INT 30
69087: DOUBLE
69088: EQUAL
69089: IFTRUE 69093
69091: GO 69149
69093: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69094: LD_ADDR_VAR 0 9
69098: PUSH
69099: LD_VAR 0 59
69103: PUSH
69104: LD_VAR 0 60
69108: PUSH
69109: LD_VAR 0 61
69113: PUSH
69114: LD_VAR 0 62
69118: PUSH
69119: LD_VAR 0 63
69123: PUSH
69124: LD_VAR 0 64
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: PUSH
69137: LD_VAR 0 4
69141: PUSH
69142: LD_INT 1
69144: PLUS
69145: ARRAY
69146: ST_TO_ADDR
69147: GO 69150
69149: POP
// temp_list2 = [ ] ;
69150: LD_ADDR_VAR 0 10
69154: PUSH
69155: EMPTY
69156: ST_TO_ADDR
// for i in temp_list do
69157: LD_ADDR_VAR 0 8
69161: PUSH
69162: LD_VAR 0 9
69166: PUSH
69167: FOR_IN
69168: IFFALSE 69220
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69170: LD_ADDR_VAR 0 10
69174: PUSH
69175: LD_VAR 0 10
69179: PUSH
69180: LD_VAR 0 8
69184: PUSH
69185: LD_INT 1
69187: ARRAY
69188: PUSH
69189: LD_VAR 0 2
69193: PLUS
69194: PUSH
69195: LD_VAR 0 8
69199: PUSH
69200: LD_INT 2
69202: ARRAY
69203: PUSH
69204: LD_VAR 0 3
69208: PLUS
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: EMPTY
69215: LIST
69216: ADD
69217: ST_TO_ADDR
69218: GO 69167
69220: POP
69221: POP
// result = temp_list2 ;
69222: LD_ADDR_VAR 0 7
69226: PUSH
69227: LD_VAR 0 10
69231: ST_TO_ADDR
// end ;
69232: LD_VAR 0 7
69236: RET
// export function EnemyInRange ( unit , dist ) ; begin
69237: LD_INT 0
69239: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69240: LD_ADDR_VAR 0 3
69244: PUSH
69245: LD_VAR 0 1
69249: PPUSH
69250: CALL_OW 255
69254: PPUSH
69255: LD_VAR 0 1
69259: PPUSH
69260: CALL_OW 250
69264: PPUSH
69265: LD_VAR 0 1
69269: PPUSH
69270: CALL_OW 251
69274: PPUSH
69275: LD_VAR 0 2
69279: PPUSH
69280: CALL 42610 0 4
69284: PUSH
69285: LD_INT 4
69287: ARRAY
69288: ST_TO_ADDR
// end ;
69289: LD_VAR 0 3
69293: RET
// export function PlayerSeeMe ( unit ) ; begin
69294: LD_INT 0
69296: PPUSH
// result := See ( your_side , unit ) ;
69297: LD_ADDR_VAR 0 2
69301: PUSH
69302: LD_OWVAR 2
69306: PPUSH
69307: LD_VAR 0 1
69311: PPUSH
69312: CALL_OW 292
69316: ST_TO_ADDR
// end ;
69317: LD_VAR 0 2
69321: RET
// export function ReverseDir ( unit ) ; begin
69322: LD_INT 0
69324: PPUSH
// if not unit then
69325: LD_VAR 0 1
69329: NOT
69330: IFFALSE 69334
// exit ;
69332: GO 69357
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69334: LD_ADDR_VAR 0 2
69338: PUSH
69339: LD_VAR 0 1
69343: PPUSH
69344: CALL_OW 254
69348: PUSH
69349: LD_INT 3
69351: PLUS
69352: PUSH
69353: LD_INT 6
69355: MOD
69356: ST_TO_ADDR
// end ;
69357: LD_VAR 0 2
69361: RET
// export function ReverseArray ( array ) ; var i ; begin
69362: LD_INT 0
69364: PPUSH
69365: PPUSH
// if not array then
69366: LD_VAR 0 1
69370: NOT
69371: IFFALSE 69375
// exit ;
69373: GO 69430
// result := [ ] ;
69375: LD_ADDR_VAR 0 2
69379: PUSH
69380: EMPTY
69381: ST_TO_ADDR
// for i := array downto 1 do
69382: LD_ADDR_VAR 0 3
69386: PUSH
69387: DOUBLE
69388: LD_VAR 0 1
69392: INC
69393: ST_TO_ADDR
69394: LD_INT 1
69396: PUSH
69397: FOR_DOWNTO
69398: IFFALSE 69428
// result := Join ( result , array [ i ] ) ;
69400: LD_ADDR_VAR 0 2
69404: PUSH
69405: LD_VAR 0 2
69409: PPUSH
69410: LD_VAR 0 1
69414: PUSH
69415: LD_VAR 0 3
69419: ARRAY
69420: PPUSH
69421: CALL 74075 0 2
69425: ST_TO_ADDR
69426: GO 69397
69428: POP
69429: POP
// end ;
69430: LD_VAR 0 2
69434: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69435: LD_INT 0
69437: PPUSH
69438: PPUSH
69439: PPUSH
69440: PPUSH
69441: PPUSH
69442: PPUSH
// if not unit or not hexes then
69443: LD_VAR 0 1
69447: NOT
69448: PUSH
69449: LD_VAR 0 2
69453: NOT
69454: OR
69455: IFFALSE 69459
// exit ;
69457: GO 69582
// dist := 9999 ;
69459: LD_ADDR_VAR 0 5
69463: PUSH
69464: LD_INT 9999
69466: ST_TO_ADDR
// for i = 1 to hexes do
69467: LD_ADDR_VAR 0 4
69471: PUSH
69472: DOUBLE
69473: LD_INT 1
69475: DEC
69476: ST_TO_ADDR
69477: LD_VAR 0 2
69481: PUSH
69482: FOR_TO
69483: IFFALSE 69570
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69485: LD_ADDR_VAR 0 6
69489: PUSH
69490: LD_VAR 0 1
69494: PPUSH
69495: LD_VAR 0 2
69499: PUSH
69500: LD_VAR 0 4
69504: ARRAY
69505: PUSH
69506: LD_INT 1
69508: ARRAY
69509: PPUSH
69510: LD_VAR 0 2
69514: PUSH
69515: LD_VAR 0 4
69519: ARRAY
69520: PUSH
69521: LD_INT 2
69523: ARRAY
69524: PPUSH
69525: CALL_OW 297
69529: ST_TO_ADDR
// if tdist < dist then
69530: LD_VAR 0 6
69534: PUSH
69535: LD_VAR 0 5
69539: LESS
69540: IFFALSE 69568
// begin hex := hexes [ i ] ;
69542: LD_ADDR_VAR 0 8
69546: PUSH
69547: LD_VAR 0 2
69551: PUSH
69552: LD_VAR 0 4
69556: ARRAY
69557: ST_TO_ADDR
// dist := tdist ;
69558: LD_ADDR_VAR 0 5
69562: PUSH
69563: LD_VAR 0 6
69567: ST_TO_ADDR
// end ; end ;
69568: GO 69482
69570: POP
69571: POP
// result := hex ;
69572: LD_ADDR_VAR 0 3
69576: PUSH
69577: LD_VAR 0 8
69581: ST_TO_ADDR
// end ;
69582: LD_VAR 0 3
69586: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69587: LD_INT 0
69589: PPUSH
69590: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69591: LD_VAR 0 1
69595: NOT
69596: PUSH
69597: LD_VAR 0 1
69601: PUSH
69602: LD_INT 21
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 23
69614: PUSH
69615: LD_INT 2
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PPUSH
69626: CALL_OW 69
69630: IN
69631: NOT
69632: OR
69633: IFFALSE 69637
// exit ;
69635: GO 69684
// for i = 1 to 3 do
69637: LD_ADDR_VAR 0 3
69641: PUSH
69642: DOUBLE
69643: LD_INT 1
69645: DEC
69646: ST_TO_ADDR
69647: LD_INT 3
69649: PUSH
69650: FOR_TO
69651: IFFALSE 69682
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69653: LD_VAR 0 1
69657: PPUSH
69658: CALL_OW 250
69662: PPUSH
69663: LD_VAR 0 1
69667: PPUSH
69668: CALL_OW 251
69672: PPUSH
69673: LD_INT 1
69675: PPUSH
69676: CALL_OW 453
69680: GO 69650
69682: POP
69683: POP
// end ;
69684: LD_VAR 0 2
69688: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69689: LD_INT 0
69691: PPUSH
69692: PPUSH
69693: PPUSH
69694: PPUSH
69695: PPUSH
69696: PPUSH
// if not unit or not enemy_unit then
69697: LD_VAR 0 1
69701: NOT
69702: PUSH
69703: LD_VAR 0 2
69707: NOT
69708: OR
69709: IFFALSE 69713
// exit ;
69711: GO 70180
// if GetLives ( i ) < 250 then
69713: LD_VAR 0 4
69717: PPUSH
69718: CALL_OW 256
69722: PUSH
69723: LD_INT 250
69725: LESS
69726: IFFALSE 69739
// begin ComAutodestruct ( i ) ;
69728: LD_VAR 0 4
69732: PPUSH
69733: CALL 69587 0 1
// exit ;
69737: GO 70180
// end ; x := GetX ( enemy_unit ) ;
69739: LD_ADDR_VAR 0 7
69743: PUSH
69744: LD_VAR 0 2
69748: PPUSH
69749: CALL_OW 250
69753: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69754: LD_ADDR_VAR 0 8
69758: PUSH
69759: LD_VAR 0 2
69763: PPUSH
69764: CALL_OW 251
69768: ST_TO_ADDR
// if not x or not y then
69769: LD_VAR 0 7
69773: NOT
69774: PUSH
69775: LD_VAR 0 8
69779: NOT
69780: OR
69781: IFFALSE 69785
// exit ;
69783: GO 70180
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69785: LD_ADDR_VAR 0 6
69789: PUSH
69790: LD_VAR 0 7
69794: PPUSH
69795: LD_INT 0
69797: PPUSH
69798: LD_INT 4
69800: PPUSH
69801: CALL_OW 272
69805: PUSH
69806: LD_VAR 0 8
69810: PPUSH
69811: LD_INT 0
69813: PPUSH
69814: LD_INT 4
69816: PPUSH
69817: CALL_OW 273
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_VAR 0 7
69830: PPUSH
69831: LD_INT 1
69833: PPUSH
69834: LD_INT 4
69836: PPUSH
69837: CALL_OW 272
69841: PUSH
69842: LD_VAR 0 8
69846: PPUSH
69847: LD_INT 1
69849: PPUSH
69850: LD_INT 4
69852: PPUSH
69853: CALL_OW 273
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_VAR 0 7
69866: PPUSH
69867: LD_INT 2
69869: PPUSH
69870: LD_INT 4
69872: PPUSH
69873: CALL_OW 272
69877: PUSH
69878: LD_VAR 0 8
69882: PPUSH
69883: LD_INT 2
69885: PPUSH
69886: LD_INT 4
69888: PPUSH
69889: CALL_OW 273
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_VAR 0 7
69902: PPUSH
69903: LD_INT 3
69905: PPUSH
69906: LD_INT 4
69908: PPUSH
69909: CALL_OW 272
69913: PUSH
69914: LD_VAR 0 8
69918: PPUSH
69919: LD_INT 3
69921: PPUSH
69922: LD_INT 4
69924: PPUSH
69925: CALL_OW 273
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_VAR 0 7
69938: PPUSH
69939: LD_INT 4
69941: PPUSH
69942: LD_INT 4
69944: PPUSH
69945: CALL_OW 272
69949: PUSH
69950: LD_VAR 0 8
69954: PPUSH
69955: LD_INT 4
69957: PPUSH
69958: LD_INT 4
69960: PPUSH
69961: CALL_OW 273
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_VAR 0 7
69974: PPUSH
69975: LD_INT 5
69977: PPUSH
69978: LD_INT 4
69980: PPUSH
69981: CALL_OW 272
69985: PUSH
69986: LD_VAR 0 8
69990: PPUSH
69991: LD_INT 5
69993: PPUSH
69994: LD_INT 4
69996: PPUSH
69997: CALL_OW 273
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: ST_TO_ADDR
// for i = tmp downto 1 do
70014: LD_ADDR_VAR 0 4
70018: PUSH
70019: DOUBLE
70020: LD_VAR 0 6
70024: INC
70025: ST_TO_ADDR
70026: LD_INT 1
70028: PUSH
70029: FOR_DOWNTO
70030: IFFALSE 70131
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70032: LD_VAR 0 6
70036: PUSH
70037: LD_VAR 0 4
70041: ARRAY
70042: PUSH
70043: LD_INT 1
70045: ARRAY
70046: PPUSH
70047: LD_VAR 0 6
70051: PUSH
70052: LD_VAR 0 4
70056: ARRAY
70057: PUSH
70058: LD_INT 2
70060: ARRAY
70061: PPUSH
70062: CALL_OW 488
70066: NOT
70067: PUSH
70068: LD_VAR 0 6
70072: PUSH
70073: LD_VAR 0 4
70077: ARRAY
70078: PUSH
70079: LD_INT 1
70081: ARRAY
70082: PPUSH
70083: LD_VAR 0 6
70087: PUSH
70088: LD_VAR 0 4
70092: ARRAY
70093: PUSH
70094: LD_INT 2
70096: ARRAY
70097: PPUSH
70098: CALL_OW 428
70102: PUSH
70103: LD_INT 0
70105: NONEQUAL
70106: OR
70107: IFFALSE 70129
// tmp := Delete ( tmp , i ) ;
70109: LD_ADDR_VAR 0 6
70113: PUSH
70114: LD_VAR 0 6
70118: PPUSH
70119: LD_VAR 0 4
70123: PPUSH
70124: CALL_OW 3
70128: ST_TO_ADDR
70129: GO 70029
70131: POP
70132: POP
// j := GetClosestHex ( unit , tmp ) ;
70133: LD_ADDR_VAR 0 5
70137: PUSH
70138: LD_VAR 0 1
70142: PPUSH
70143: LD_VAR 0 6
70147: PPUSH
70148: CALL 69435 0 2
70152: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70153: LD_VAR 0 1
70157: PPUSH
70158: LD_VAR 0 5
70162: PUSH
70163: LD_INT 1
70165: ARRAY
70166: PPUSH
70167: LD_VAR 0 5
70171: PUSH
70172: LD_INT 2
70174: ARRAY
70175: PPUSH
70176: CALL_OW 111
// end ;
70180: LD_VAR 0 3
70184: RET
// export function PrepareApemanSoldier ( ) ; begin
70185: LD_INT 0
70187: PPUSH
// uc_nation := 0 ;
70188: LD_ADDR_OWVAR 21
70192: PUSH
70193: LD_INT 0
70195: ST_TO_ADDR
// hc_sex := sex_male ;
70196: LD_ADDR_OWVAR 27
70200: PUSH
70201: LD_INT 1
70203: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70204: LD_ADDR_OWVAR 28
70208: PUSH
70209: LD_INT 15
70211: ST_TO_ADDR
// hc_gallery :=  ;
70212: LD_ADDR_OWVAR 33
70216: PUSH
70217: LD_STRING 
70219: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70220: LD_ADDR_OWVAR 31
70224: PUSH
70225: LD_INT 0
70227: PPUSH
70228: LD_INT 3
70230: PPUSH
70231: CALL_OW 12
70235: PUSH
70236: LD_INT 0
70238: PPUSH
70239: LD_INT 3
70241: PPUSH
70242: CALL_OW 12
70246: PUSH
70247: LD_INT 0
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: ST_TO_ADDR
// end ;
70259: LD_VAR 0 1
70263: RET
// export function PrepareApemanEngineer ( ) ; begin
70264: LD_INT 0
70266: PPUSH
// uc_nation := 0 ;
70267: LD_ADDR_OWVAR 21
70271: PUSH
70272: LD_INT 0
70274: ST_TO_ADDR
// hc_sex := sex_male ;
70275: LD_ADDR_OWVAR 27
70279: PUSH
70280: LD_INT 1
70282: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70283: LD_ADDR_OWVAR 28
70287: PUSH
70288: LD_INT 16
70290: ST_TO_ADDR
// hc_gallery :=  ;
70291: LD_ADDR_OWVAR 33
70295: PUSH
70296: LD_STRING 
70298: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70299: LD_ADDR_OWVAR 31
70303: PUSH
70304: LD_INT 0
70306: PPUSH
70307: LD_INT 3
70309: PPUSH
70310: CALL_OW 12
70314: PUSH
70315: LD_INT 0
70317: PPUSH
70318: LD_INT 3
70320: PPUSH
70321: CALL_OW 12
70325: PUSH
70326: LD_INT 0
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: ST_TO_ADDR
// end ;
70338: LD_VAR 0 1
70342: RET
// export function PrepareApeman ( agressivity ) ; begin
70343: LD_INT 0
70345: PPUSH
// uc_side := 0 ;
70346: LD_ADDR_OWVAR 20
70350: PUSH
70351: LD_INT 0
70353: ST_TO_ADDR
// uc_nation := 0 ;
70354: LD_ADDR_OWVAR 21
70358: PUSH
70359: LD_INT 0
70361: ST_TO_ADDR
// hc_sex := sex_male ;
70362: LD_ADDR_OWVAR 27
70366: PUSH
70367: LD_INT 1
70369: ST_TO_ADDR
// hc_class := class_apeman ;
70370: LD_ADDR_OWVAR 28
70374: PUSH
70375: LD_INT 12
70377: ST_TO_ADDR
// hc_gallery :=  ;
70378: LD_ADDR_OWVAR 33
70382: PUSH
70383: LD_STRING 
70385: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70386: LD_ADDR_OWVAR 35
70390: PUSH
70391: LD_VAR 0 1
70395: NEG
70396: PPUSH
70397: LD_VAR 0 1
70401: PPUSH
70402: CALL_OW 12
70406: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70407: LD_ADDR_OWVAR 31
70411: PUSH
70412: LD_INT 0
70414: PPUSH
70415: LD_INT 3
70417: PPUSH
70418: CALL_OW 12
70422: PUSH
70423: LD_INT 0
70425: PPUSH
70426: LD_INT 3
70428: PPUSH
70429: CALL_OW 12
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: LD_INT 0
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: ST_TO_ADDR
// end ;
70446: LD_VAR 0 2
70450: RET
// export function PrepareTiger ( agressivity ) ; begin
70451: LD_INT 0
70453: PPUSH
// uc_side := 0 ;
70454: LD_ADDR_OWVAR 20
70458: PUSH
70459: LD_INT 0
70461: ST_TO_ADDR
// uc_nation := 0 ;
70462: LD_ADDR_OWVAR 21
70466: PUSH
70467: LD_INT 0
70469: ST_TO_ADDR
// hc_class := class_tiger ;
70470: LD_ADDR_OWVAR 28
70474: PUSH
70475: LD_INT 14
70477: ST_TO_ADDR
// hc_gallery :=  ;
70478: LD_ADDR_OWVAR 33
70482: PUSH
70483: LD_STRING 
70485: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70486: LD_ADDR_OWVAR 35
70490: PUSH
70491: LD_VAR 0 1
70495: NEG
70496: PPUSH
70497: LD_VAR 0 1
70501: PPUSH
70502: CALL_OW 12
70506: ST_TO_ADDR
// end ;
70507: LD_VAR 0 2
70511: RET
// export function PrepareEnchidna ( ) ; begin
70512: LD_INT 0
70514: PPUSH
// uc_side := 0 ;
70515: LD_ADDR_OWVAR 20
70519: PUSH
70520: LD_INT 0
70522: ST_TO_ADDR
// uc_nation := 0 ;
70523: LD_ADDR_OWVAR 21
70527: PUSH
70528: LD_INT 0
70530: ST_TO_ADDR
// hc_class := class_baggie ;
70531: LD_ADDR_OWVAR 28
70535: PUSH
70536: LD_INT 13
70538: ST_TO_ADDR
// hc_gallery :=  ;
70539: LD_ADDR_OWVAR 33
70543: PUSH
70544: LD_STRING 
70546: ST_TO_ADDR
// end ;
70547: LD_VAR 0 1
70551: RET
// export function PrepareFrog ( ) ; begin
70552: LD_INT 0
70554: PPUSH
// uc_side := 0 ;
70555: LD_ADDR_OWVAR 20
70559: PUSH
70560: LD_INT 0
70562: ST_TO_ADDR
// uc_nation := 0 ;
70563: LD_ADDR_OWVAR 21
70567: PUSH
70568: LD_INT 0
70570: ST_TO_ADDR
// hc_class := class_frog ;
70571: LD_ADDR_OWVAR 28
70575: PUSH
70576: LD_INT 19
70578: ST_TO_ADDR
// hc_gallery :=  ;
70579: LD_ADDR_OWVAR 33
70583: PUSH
70584: LD_STRING 
70586: ST_TO_ADDR
// end ;
70587: LD_VAR 0 1
70591: RET
// export function PrepareFish ( ) ; begin
70592: LD_INT 0
70594: PPUSH
// uc_side := 0 ;
70595: LD_ADDR_OWVAR 20
70599: PUSH
70600: LD_INT 0
70602: ST_TO_ADDR
// uc_nation := 0 ;
70603: LD_ADDR_OWVAR 21
70607: PUSH
70608: LD_INT 0
70610: ST_TO_ADDR
// hc_class := class_fish ;
70611: LD_ADDR_OWVAR 28
70615: PUSH
70616: LD_INT 20
70618: ST_TO_ADDR
// hc_gallery :=  ;
70619: LD_ADDR_OWVAR 33
70623: PUSH
70624: LD_STRING 
70626: ST_TO_ADDR
// end ;
70627: LD_VAR 0 1
70631: RET
// export function PrepareBird ( ) ; begin
70632: LD_INT 0
70634: PPUSH
// uc_side := 0 ;
70635: LD_ADDR_OWVAR 20
70639: PUSH
70640: LD_INT 0
70642: ST_TO_ADDR
// uc_nation := 0 ;
70643: LD_ADDR_OWVAR 21
70647: PUSH
70648: LD_INT 0
70650: ST_TO_ADDR
// hc_class := class_phororhacos ;
70651: LD_ADDR_OWVAR 28
70655: PUSH
70656: LD_INT 18
70658: ST_TO_ADDR
// hc_gallery :=  ;
70659: LD_ADDR_OWVAR 33
70663: PUSH
70664: LD_STRING 
70666: ST_TO_ADDR
// end ;
70667: LD_VAR 0 1
70671: RET
// export function PrepareHorse ( ) ; begin
70672: LD_INT 0
70674: PPUSH
// uc_side := 0 ;
70675: LD_ADDR_OWVAR 20
70679: PUSH
70680: LD_INT 0
70682: ST_TO_ADDR
// uc_nation := 0 ;
70683: LD_ADDR_OWVAR 21
70687: PUSH
70688: LD_INT 0
70690: ST_TO_ADDR
// hc_class := class_horse ;
70691: LD_ADDR_OWVAR 28
70695: PUSH
70696: LD_INT 21
70698: ST_TO_ADDR
// hc_gallery :=  ;
70699: LD_ADDR_OWVAR 33
70703: PUSH
70704: LD_STRING 
70706: ST_TO_ADDR
// end ;
70707: LD_VAR 0 1
70711: RET
// export function PrepareMastodont ( ) ; begin
70712: LD_INT 0
70714: PPUSH
// uc_side := 0 ;
70715: LD_ADDR_OWVAR 20
70719: PUSH
70720: LD_INT 0
70722: ST_TO_ADDR
// uc_nation := 0 ;
70723: LD_ADDR_OWVAR 21
70727: PUSH
70728: LD_INT 0
70730: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70731: LD_ADDR_OWVAR 37
70735: PUSH
70736: LD_INT 31
70738: ST_TO_ADDR
// vc_control := control_rider ;
70739: LD_ADDR_OWVAR 38
70743: PUSH
70744: LD_INT 4
70746: ST_TO_ADDR
// end ;
70747: LD_VAR 0 1
70751: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70752: LD_INT 0
70754: PPUSH
70755: PPUSH
70756: PPUSH
// uc_side = 0 ;
70757: LD_ADDR_OWVAR 20
70761: PUSH
70762: LD_INT 0
70764: ST_TO_ADDR
// uc_nation = 0 ;
70765: LD_ADDR_OWVAR 21
70769: PUSH
70770: LD_INT 0
70772: ST_TO_ADDR
// InitHc_All ( ) ;
70773: CALL_OW 584
// InitVc ;
70777: CALL_OW 20
// if mastodonts then
70781: LD_VAR 0 6
70785: IFFALSE 70852
// for i = 1 to mastodonts do
70787: LD_ADDR_VAR 0 11
70791: PUSH
70792: DOUBLE
70793: LD_INT 1
70795: DEC
70796: ST_TO_ADDR
70797: LD_VAR 0 6
70801: PUSH
70802: FOR_TO
70803: IFFALSE 70850
// begin vc_chassis := 31 ;
70805: LD_ADDR_OWVAR 37
70809: PUSH
70810: LD_INT 31
70812: ST_TO_ADDR
// vc_control := control_rider ;
70813: LD_ADDR_OWVAR 38
70817: PUSH
70818: LD_INT 4
70820: ST_TO_ADDR
// animal := CreateVehicle ;
70821: LD_ADDR_VAR 0 12
70825: PUSH
70826: CALL_OW 45
70830: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70831: LD_VAR 0 12
70835: PPUSH
70836: LD_VAR 0 8
70840: PPUSH
70841: LD_INT 0
70843: PPUSH
70844: CALL 72980 0 3
// end ;
70848: GO 70802
70850: POP
70851: POP
// if horses then
70852: LD_VAR 0 5
70856: IFFALSE 70923
// for i = 1 to horses do
70858: LD_ADDR_VAR 0 11
70862: PUSH
70863: DOUBLE
70864: LD_INT 1
70866: DEC
70867: ST_TO_ADDR
70868: LD_VAR 0 5
70872: PUSH
70873: FOR_TO
70874: IFFALSE 70921
// begin hc_class := 21 ;
70876: LD_ADDR_OWVAR 28
70880: PUSH
70881: LD_INT 21
70883: ST_TO_ADDR
// hc_gallery :=  ;
70884: LD_ADDR_OWVAR 33
70888: PUSH
70889: LD_STRING 
70891: ST_TO_ADDR
// animal := CreateHuman ;
70892: LD_ADDR_VAR 0 12
70896: PUSH
70897: CALL_OW 44
70901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70902: LD_VAR 0 12
70906: PPUSH
70907: LD_VAR 0 8
70911: PPUSH
70912: LD_INT 0
70914: PPUSH
70915: CALL 72980 0 3
// end ;
70919: GO 70873
70921: POP
70922: POP
// if birds then
70923: LD_VAR 0 1
70927: IFFALSE 70994
// for i = 1 to birds do
70929: LD_ADDR_VAR 0 11
70933: PUSH
70934: DOUBLE
70935: LD_INT 1
70937: DEC
70938: ST_TO_ADDR
70939: LD_VAR 0 1
70943: PUSH
70944: FOR_TO
70945: IFFALSE 70992
// begin hc_class := 18 ;
70947: LD_ADDR_OWVAR 28
70951: PUSH
70952: LD_INT 18
70954: ST_TO_ADDR
// hc_gallery =  ;
70955: LD_ADDR_OWVAR 33
70959: PUSH
70960: LD_STRING 
70962: ST_TO_ADDR
// animal := CreateHuman ;
70963: LD_ADDR_VAR 0 12
70967: PUSH
70968: CALL_OW 44
70972: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70973: LD_VAR 0 12
70977: PPUSH
70978: LD_VAR 0 8
70982: PPUSH
70983: LD_INT 0
70985: PPUSH
70986: CALL 72980 0 3
// end ;
70990: GO 70944
70992: POP
70993: POP
// if tigers then
70994: LD_VAR 0 2
70998: IFFALSE 71082
// for i = 1 to tigers do
71000: LD_ADDR_VAR 0 11
71004: PUSH
71005: DOUBLE
71006: LD_INT 1
71008: DEC
71009: ST_TO_ADDR
71010: LD_VAR 0 2
71014: PUSH
71015: FOR_TO
71016: IFFALSE 71080
// begin hc_class = class_tiger ;
71018: LD_ADDR_OWVAR 28
71022: PUSH
71023: LD_INT 14
71025: ST_TO_ADDR
// hc_gallery =  ;
71026: LD_ADDR_OWVAR 33
71030: PUSH
71031: LD_STRING 
71033: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71034: LD_ADDR_OWVAR 35
71038: PUSH
71039: LD_INT 7
71041: NEG
71042: PPUSH
71043: LD_INT 7
71045: PPUSH
71046: CALL_OW 12
71050: ST_TO_ADDR
// animal := CreateHuman ;
71051: LD_ADDR_VAR 0 12
71055: PUSH
71056: CALL_OW 44
71060: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71061: LD_VAR 0 12
71065: PPUSH
71066: LD_VAR 0 8
71070: PPUSH
71071: LD_INT 0
71073: PPUSH
71074: CALL 72980 0 3
// end ;
71078: GO 71015
71080: POP
71081: POP
// if apemans then
71082: LD_VAR 0 3
71086: IFFALSE 71209
// for i = 1 to apemans do
71088: LD_ADDR_VAR 0 11
71092: PUSH
71093: DOUBLE
71094: LD_INT 1
71096: DEC
71097: ST_TO_ADDR
71098: LD_VAR 0 3
71102: PUSH
71103: FOR_TO
71104: IFFALSE 71207
// begin hc_class = class_apeman ;
71106: LD_ADDR_OWVAR 28
71110: PUSH
71111: LD_INT 12
71113: ST_TO_ADDR
// hc_gallery =  ;
71114: LD_ADDR_OWVAR 33
71118: PUSH
71119: LD_STRING 
71121: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71122: LD_ADDR_OWVAR 35
71126: PUSH
71127: LD_INT 2
71129: NEG
71130: PPUSH
71131: LD_INT 2
71133: PPUSH
71134: CALL_OW 12
71138: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71139: LD_ADDR_OWVAR 31
71143: PUSH
71144: LD_INT 1
71146: PPUSH
71147: LD_INT 3
71149: PPUSH
71150: CALL_OW 12
71154: PUSH
71155: LD_INT 1
71157: PPUSH
71158: LD_INT 3
71160: PPUSH
71161: CALL_OW 12
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: LD_INT 0
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: ST_TO_ADDR
// animal := CreateHuman ;
71178: LD_ADDR_VAR 0 12
71182: PUSH
71183: CALL_OW 44
71187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71188: LD_VAR 0 12
71192: PPUSH
71193: LD_VAR 0 8
71197: PPUSH
71198: LD_INT 0
71200: PPUSH
71201: CALL 72980 0 3
// end ;
71205: GO 71103
71207: POP
71208: POP
// if enchidnas then
71209: LD_VAR 0 4
71213: IFFALSE 71280
// for i = 1 to enchidnas do
71215: LD_ADDR_VAR 0 11
71219: PUSH
71220: DOUBLE
71221: LD_INT 1
71223: DEC
71224: ST_TO_ADDR
71225: LD_VAR 0 4
71229: PUSH
71230: FOR_TO
71231: IFFALSE 71278
// begin hc_class = 13 ;
71233: LD_ADDR_OWVAR 28
71237: PUSH
71238: LD_INT 13
71240: ST_TO_ADDR
// hc_gallery =  ;
71241: LD_ADDR_OWVAR 33
71245: PUSH
71246: LD_STRING 
71248: ST_TO_ADDR
// animal := CreateHuman ;
71249: LD_ADDR_VAR 0 12
71253: PUSH
71254: CALL_OW 44
71258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71259: LD_VAR 0 12
71263: PPUSH
71264: LD_VAR 0 8
71268: PPUSH
71269: LD_INT 0
71271: PPUSH
71272: CALL 72980 0 3
// end ;
71276: GO 71230
71278: POP
71279: POP
// if fishes then
71280: LD_VAR 0 7
71284: IFFALSE 71351
// for i = 1 to fishes do
71286: LD_ADDR_VAR 0 11
71290: PUSH
71291: DOUBLE
71292: LD_INT 1
71294: DEC
71295: ST_TO_ADDR
71296: LD_VAR 0 7
71300: PUSH
71301: FOR_TO
71302: IFFALSE 71349
// begin hc_class = 20 ;
71304: LD_ADDR_OWVAR 28
71308: PUSH
71309: LD_INT 20
71311: ST_TO_ADDR
// hc_gallery =  ;
71312: LD_ADDR_OWVAR 33
71316: PUSH
71317: LD_STRING 
71319: ST_TO_ADDR
// animal := CreateHuman ;
71320: LD_ADDR_VAR 0 12
71324: PUSH
71325: CALL_OW 44
71329: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71330: LD_VAR 0 12
71334: PPUSH
71335: LD_VAR 0 9
71339: PPUSH
71340: LD_INT 0
71342: PPUSH
71343: CALL 72980 0 3
// end ;
71347: GO 71301
71349: POP
71350: POP
// end ;
71351: LD_VAR 0 10
71355: RET
// export function WantHeal ( sci , unit ) ; begin
71356: LD_INT 0
71358: PPUSH
// if GetTaskList ( sci ) > 0 then
71359: LD_VAR 0 1
71363: PPUSH
71364: CALL_OW 437
71368: PUSH
71369: LD_INT 0
71371: GREATER
71372: IFFALSE 71442
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71374: LD_VAR 0 1
71378: PPUSH
71379: CALL_OW 437
71383: PUSH
71384: LD_INT 1
71386: ARRAY
71387: PUSH
71388: LD_INT 1
71390: ARRAY
71391: PUSH
71392: LD_STRING l
71394: EQUAL
71395: PUSH
71396: LD_VAR 0 1
71400: PPUSH
71401: CALL_OW 437
71405: PUSH
71406: LD_INT 1
71408: ARRAY
71409: PUSH
71410: LD_INT 4
71412: ARRAY
71413: PUSH
71414: LD_VAR 0 2
71418: EQUAL
71419: AND
71420: IFFALSE 71432
// result := true else
71422: LD_ADDR_VAR 0 3
71426: PUSH
71427: LD_INT 1
71429: ST_TO_ADDR
71430: GO 71440
// result := false ;
71432: LD_ADDR_VAR 0 3
71436: PUSH
71437: LD_INT 0
71439: ST_TO_ADDR
// end else
71440: GO 71450
// result := false ;
71442: LD_ADDR_VAR 0 3
71446: PUSH
71447: LD_INT 0
71449: ST_TO_ADDR
// end ;
71450: LD_VAR 0 3
71454: RET
// export function HealTarget ( sci ) ; begin
71455: LD_INT 0
71457: PPUSH
// if not sci then
71458: LD_VAR 0 1
71462: NOT
71463: IFFALSE 71467
// exit ;
71465: GO 71532
// result := 0 ;
71467: LD_ADDR_VAR 0 2
71471: PUSH
71472: LD_INT 0
71474: ST_TO_ADDR
// if GetTaskList ( sci ) then
71475: LD_VAR 0 1
71479: PPUSH
71480: CALL_OW 437
71484: IFFALSE 71532
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71486: LD_VAR 0 1
71490: PPUSH
71491: CALL_OW 437
71495: PUSH
71496: LD_INT 1
71498: ARRAY
71499: PUSH
71500: LD_INT 1
71502: ARRAY
71503: PUSH
71504: LD_STRING l
71506: EQUAL
71507: IFFALSE 71532
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71509: LD_ADDR_VAR 0 2
71513: PUSH
71514: LD_VAR 0 1
71518: PPUSH
71519: CALL_OW 437
71523: PUSH
71524: LD_INT 1
71526: ARRAY
71527: PUSH
71528: LD_INT 4
71530: ARRAY
71531: ST_TO_ADDR
// end ;
71532: LD_VAR 0 2
71536: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71537: LD_INT 0
71539: PPUSH
71540: PPUSH
71541: PPUSH
71542: PPUSH
// if not base_units then
71543: LD_VAR 0 1
71547: NOT
71548: IFFALSE 71552
// exit ;
71550: GO 71639
// result := false ;
71552: LD_ADDR_VAR 0 2
71556: PUSH
71557: LD_INT 0
71559: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71560: LD_ADDR_VAR 0 5
71564: PUSH
71565: LD_VAR 0 1
71569: PPUSH
71570: LD_INT 21
71572: PUSH
71573: LD_INT 3
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PPUSH
71580: CALL_OW 72
71584: ST_TO_ADDR
// if not tmp then
71585: LD_VAR 0 5
71589: NOT
71590: IFFALSE 71594
// exit ;
71592: GO 71639
// for i in tmp do
71594: LD_ADDR_VAR 0 3
71598: PUSH
71599: LD_VAR 0 5
71603: PUSH
71604: FOR_IN
71605: IFFALSE 71637
// begin result := EnemyInRange ( i , 22 ) ;
71607: LD_ADDR_VAR 0 2
71611: PUSH
71612: LD_VAR 0 3
71616: PPUSH
71617: LD_INT 22
71619: PPUSH
71620: CALL 69237 0 2
71624: ST_TO_ADDR
// if result then
71625: LD_VAR 0 2
71629: IFFALSE 71635
// exit ;
71631: POP
71632: POP
71633: GO 71639
// end ;
71635: GO 71604
71637: POP
71638: POP
// end ;
71639: LD_VAR 0 2
71643: RET
// export function FilterByTag ( units , tag ) ; begin
71644: LD_INT 0
71646: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71647: LD_ADDR_VAR 0 3
71651: PUSH
71652: LD_VAR 0 1
71656: PPUSH
71657: LD_INT 120
71659: PUSH
71660: LD_VAR 0 2
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PPUSH
71669: CALL_OW 72
71673: ST_TO_ADDR
// end ;
71674: LD_VAR 0 3
71678: RET
// export function IsDriver ( un ) ; begin
71679: LD_INT 0
71681: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71682: LD_ADDR_VAR 0 2
71686: PUSH
71687: LD_VAR 0 1
71691: PUSH
71692: LD_INT 55
71694: PUSH
71695: EMPTY
71696: LIST
71697: PPUSH
71698: CALL_OW 69
71702: IN
71703: ST_TO_ADDR
// end ;
71704: LD_VAR 0 2
71708: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71709: LD_INT 0
71711: PPUSH
71712: PPUSH
// list := [ ] ;
71713: LD_ADDR_VAR 0 5
71717: PUSH
71718: EMPTY
71719: ST_TO_ADDR
// case d of 0 :
71720: LD_VAR 0 3
71724: PUSH
71725: LD_INT 0
71727: DOUBLE
71728: EQUAL
71729: IFTRUE 71733
71731: GO 71866
71733: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71734: LD_ADDR_VAR 0 5
71738: PUSH
71739: LD_VAR 0 1
71743: PUSH
71744: LD_INT 4
71746: MINUS
71747: PUSH
71748: LD_VAR 0 2
71752: PUSH
71753: LD_INT 4
71755: MINUS
71756: PUSH
71757: LD_INT 2
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: LIST
71764: PUSH
71765: LD_VAR 0 1
71769: PUSH
71770: LD_INT 3
71772: MINUS
71773: PUSH
71774: LD_VAR 0 2
71778: PUSH
71779: LD_INT 1
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: LIST
71786: PUSH
71787: LD_VAR 0 1
71791: PUSH
71792: LD_INT 4
71794: PLUS
71795: PUSH
71796: LD_VAR 0 2
71800: PUSH
71801: LD_INT 4
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: LIST
71808: PUSH
71809: LD_VAR 0 1
71813: PUSH
71814: LD_INT 3
71816: PLUS
71817: PUSH
71818: LD_VAR 0 2
71822: PUSH
71823: LD_INT 3
71825: PLUS
71826: PUSH
71827: LD_INT 5
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: PUSH
71835: LD_VAR 0 1
71839: PUSH
71840: LD_VAR 0 2
71844: PUSH
71845: LD_INT 4
71847: PLUS
71848: PUSH
71849: LD_INT 0
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: LIST
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: ST_TO_ADDR
// end ; 1 :
71864: GO 72564
71866: LD_INT 1
71868: DOUBLE
71869: EQUAL
71870: IFTRUE 71874
71872: GO 72007
71874: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71875: LD_ADDR_VAR 0 5
71879: PUSH
71880: LD_VAR 0 1
71884: PUSH
71885: LD_VAR 0 2
71889: PUSH
71890: LD_INT 4
71892: MINUS
71893: PUSH
71894: LD_INT 3
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: LIST
71901: PUSH
71902: LD_VAR 0 1
71906: PUSH
71907: LD_INT 3
71909: MINUS
71910: PUSH
71911: LD_VAR 0 2
71915: PUSH
71916: LD_INT 3
71918: MINUS
71919: PUSH
71920: LD_INT 2
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: PUSH
71928: LD_VAR 0 1
71932: PUSH
71933: LD_INT 4
71935: MINUS
71936: PUSH
71937: LD_VAR 0 2
71941: PUSH
71942: LD_INT 1
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: LIST
71949: PUSH
71950: LD_VAR 0 1
71954: PUSH
71955: LD_VAR 0 2
71959: PUSH
71960: LD_INT 3
71962: PLUS
71963: PUSH
71964: LD_INT 0
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: LIST
71971: PUSH
71972: LD_VAR 0 1
71976: PUSH
71977: LD_INT 4
71979: PLUS
71980: PUSH
71981: LD_VAR 0 2
71985: PUSH
71986: LD_INT 4
71988: PLUS
71989: PUSH
71990: LD_INT 5
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: LIST
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: ST_TO_ADDR
// end ; 2 :
72005: GO 72564
72007: LD_INT 2
72009: DOUBLE
72010: EQUAL
72011: IFTRUE 72015
72013: GO 72144
72015: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72016: LD_ADDR_VAR 0 5
72020: PUSH
72021: LD_VAR 0 1
72025: PUSH
72026: LD_VAR 0 2
72030: PUSH
72031: LD_INT 3
72033: MINUS
72034: PUSH
72035: LD_INT 3
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: LIST
72042: PUSH
72043: LD_VAR 0 1
72047: PUSH
72048: LD_INT 4
72050: PLUS
72051: PUSH
72052: LD_VAR 0 2
72056: PUSH
72057: LD_INT 4
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: LIST
72064: PUSH
72065: LD_VAR 0 1
72069: PUSH
72070: LD_VAR 0 2
72074: PUSH
72075: LD_INT 4
72077: PLUS
72078: PUSH
72079: LD_INT 0
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: LIST
72086: PUSH
72087: LD_VAR 0 1
72091: PUSH
72092: LD_INT 3
72094: MINUS
72095: PUSH
72096: LD_VAR 0 2
72100: PUSH
72101: LD_INT 1
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: LD_INT 4
72116: MINUS
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: LD_INT 4
72125: MINUS
72126: PUSH
72127: LD_INT 2
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: ST_TO_ADDR
// end ; 3 :
72142: GO 72564
72144: LD_INT 3
72146: DOUBLE
72147: EQUAL
72148: IFTRUE 72152
72150: GO 72285
72152: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72153: LD_ADDR_VAR 0 5
72157: PUSH
72158: LD_VAR 0 1
72162: PUSH
72163: LD_INT 3
72165: PLUS
72166: PUSH
72167: LD_VAR 0 2
72171: PUSH
72172: LD_INT 4
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: LIST
72179: PUSH
72180: LD_VAR 0 1
72184: PUSH
72185: LD_INT 4
72187: PLUS
72188: PUSH
72189: LD_VAR 0 2
72193: PUSH
72194: LD_INT 4
72196: PLUS
72197: PUSH
72198: LD_INT 5
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: LIST
72205: PUSH
72206: LD_VAR 0 1
72210: PUSH
72211: LD_INT 4
72213: MINUS
72214: PUSH
72215: LD_VAR 0 2
72219: PUSH
72220: LD_INT 1
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: LIST
72227: PUSH
72228: LD_VAR 0 1
72232: PUSH
72233: LD_VAR 0 2
72237: PUSH
72238: LD_INT 4
72240: MINUS
72241: PUSH
72242: LD_INT 3
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: LIST
72249: PUSH
72250: LD_VAR 0 1
72254: PUSH
72255: LD_INT 3
72257: MINUS
72258: PUSH
72259: LD_VAR 0 2
72263: PUSH
72264: LD_INT 3
72266: MINUS
72267: PUSH
72268: LD_INT 2
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: LIST
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: ST_TO_ADDR
// end ; 4 :
72283: GO 72564
72285: LD_INT 4
72287: DOUBLE
72288: EQUAL
72289: IFTRUE 72293
72291: GO 72426
72293: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72294: LD_ADDR_VAR 0 5
72298: PUSH
72299: LD_VAR 0 1
72303: PUSH
72304: LD_VAR 0 2
72308: PUSH
72309: LD_INT 4
72311: PLUS
72312: PUSH
72313: LD_INT 0
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: LIST
72320: PUSH
72321: LD_VAR 0 1
72325: PUSH
72326: LD_INT 3
72328: PLUS
72329: PUSH
72330: LD_VAR 0 2
72334: PUSH
72335: LD_INT 3
72337: PLUS
72338: PUSH
72339: LD_INT 5
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: PUSH
72347: LD_VAR 0 1
72351: PUSH
72352: LD_INT 4
72354: PLUS
72355: PUSH
72356: LD_VAR 0 2
72360: PUSH
72361: LD_INT 4
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: LIST
72368: PUSH
72369: LD_VAR 0 1
72373: PUSH
72374: LD_VAR 0 2
72378: PUSH
72379: LD_INT 3
72381: MINUS
72382: PUSH
72383: LD_INT 3
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: LIST
72390: PUSH
72391: LD_VAR 0 1
72395: PUSH
72396: LD_INT 4
72398: MINUS
72399: PUSH
72400: LD_VAR 0 2
72404: PUSH
72405: LD_INT 4
72407: MINUS
72408: PUSH
72409: LD_INT 2
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: LIST
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: ST_TO_ADDR
// end ; 5 :
72424: GO 72564
72426: LD_INT 5
72428: DOUBLE
72429: EQUAL
72430: IFTRUE 72434
72432: GO 72563
72434: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72435: LD_ADDR_VAR 0 5
72439: PUSH
72440: LD_VAR 0 1
72444: PUSH
72445: LD_INT 4
72447: MINUS
72448: PUSH
72449: LD_VAR 0 2
72453: PUSH
72454: LD_INT 1
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: LIST
72461: PUSH
72462: LD_VAR 0 1
72466: PUSH
72467: LD_VAR 0 2
72471: PUSH
72472: LD_INT 4
72474: MINUS
72475: PUSH
72476: LD_INT 3
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: LIST
72483: PUSH
72484: LD_VAR 0 1
72488: PUSH
72489: LD_INT 4
72491: PLUS
72492: PUSH
72493: LD_VAR 0 2
72497: PUSH
72498: LD_INT 4
72500: PLUS
72501: PUSH
72502: LD_INT 5
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: LIST
72509: PUSH
72510: LD_VAR 0 1
72514: PUSH
72515: LD_INT 3
72517: PLUS
72518: PUSH
72519: LD_VAR 0 2
72523: PUSH
72524: LD_INT 4
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: LIST
72531: PUSH
72532: LD_VAR 0 1
72536: PUSH
72537: LD_VAR 0 2
72541: PUSH
72542: LD_INT 3
72544: PLUS
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: LIST
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: ST_TO_ADDR
// end ; end ;
72561: GO 72564
72563: POP
// result := list ;
72564: LD_ADDR_VAR 0 4
72568: PUSH
72569: LD_VAR 0 5
72573: ST_TO_ADDR
// end ;
72574: LD_VAR 0 4
72578: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72579: LD_INT 0
72581: PPUSH
72582: PPUSH
72583: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72584: LD_VAR 0 1
72588: NOT
72589: PUSH
72590: LD_VAR 0 2
72594: PUSH
72595: LD_INT 1
72597: PUSH
72598: LD_INT 2
72600: PUSH
72601: LD_INT 3
72603: PUSH
72604: LD_INT 4
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: IN
72613: NOT
72614: OR
72615: IFFALSE 72619
// exit ;
72617: GO 72702
// tmp := [ ] ;
72619: LD_ADDR_VAR 0 5
72623: PUSH
72624: EMPTY
72625: ST_TO_ADDR
// for i in units do
72626: LD_ADDR_VAR 0 4
72630: PUSH
72631: LD_VAR 0 1
72635: PUSH
72636: FOR_IN
72637: IFFALSE 72671
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72639: LD_ADDR_VAR 0 5
72643: PUSH
72644: LD_VAR 0 5
72648: PPUSH
72649: LD_VAR 0 4
72653: PPUSH
72654: LD_VAR 0 2
72658: PPUSH
72659: CALL_OW 259
72663: PPUSH
72664: CALL 74075 0 2
72668: ST_TO_ADDR
72669: GO 72636
72671: POP
72672: POP
// if not tmp then
72673: LD_VAR 0 5
72677: NOT
72678: IFFALSE 72682
// exit ;
72680: GO 72702
// result := SortListByListDesc ( units , tmp ) ;
72682: LD_ADDR_VAR 0 3
72686: PUSH
72687: LD_VAR 0 1
72691: PPUSH
72692: LD_VAR 0 5
72696: PPUSH
72697: CALL_OW 77
72701: ST_TO_ADDR
// end ;
72702: LD_VAR 0 3
72706: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72707: LD_INT 0
72709: PPUSH
72710: PPUSH
72711: PPUSH
// result := false ;
72712: LD_ADDR_VAR 0 3
72716: PUSH
72717: LD_INT 0
72719: ST_TO_ADDR
// if not building then
72720: LD_VAR 0 2
72724: NOT
72725: IFFALSE 72729
// exit ;
72727: GO 72867
// x := GetX ( building ) ;
72729: LD_ADDR_VAR 0 4
72733: PUSH
72734: LD_VAR 0 2
72738: PPUSH
72739: CALL_OW 250
72743: ST_TO_ADDR
// y := GetY ( building ) ;
72744: LD_ADDR_VAR 0 5
72748: PUSH
72749: LD_VAR 0 2
72753: PPUSH
72754: CALL_OW 251
72758: ST_TO_ADDR
// if not x or not y then
72759: LD_VAR 0 4
72763: NOT
72764: PUSH
72765: LD_VAR 0 5
72769: NOT
72770: OR
72771: IFFALSE 72775
// exit ;
72773: GO 72867
// if GetTaskList ( unit ) then
72775: LD_VAR 0 1
72779: PPUSH
72780: CALL_OW 437
72784: IFFALSE 72867
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72786: LD_STRING e
72788: PUSH
72789: LD_VAR 0 1
72793: PPUSH
72794: CALL_OW 437
72798: PUSH
72799: LD_INT 1
72801: ARRAY
72802: PUSH
72803: LD_INT 1
72805: ARRAY
72806: EQUAL
72807: PUSH
72808: LD_VAR 0 4
72812: PUSH
72813: LD_VAR 0 1
72817: PPUSH
72818: CALL_OW 437
72822: PUSH
72823: LD_INT 1
72825: ARRAY
72826: PUSH
72827: LD_INT 2
72829: ARRAY
72830: EQUAL
72831: AND
72832: PUSH
72833: LD_VAR 0 5
72837: PUSH
72838: LD_VAR 0 1
72842: PPUSH
72843: CALL_OW 437
72847: PUSH
72848: LD_INT 1
72850: ARRAY
72851: PUSH
72852: LD_INT 3
72854: ARRAY
72855: EQUAL
72856: AND
72857: IFFALSE 72867
// result := true end ;
72859: LD_ADDR_VAR 0 3
72863: PUSH
72864: LD_INT 1
72866: ST_TO_ADDR
// end ;
72867: LD_VAR 0 3
72871: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72872: LD_INT 0
72874: PPUSH
// result := false ;
72875: LD_ADDR_VAR 0 4
72879: PUSH
72880: LD_INT 0
72882: ST_TO_ADDR
// if GetTaskList ( unit ) then
72883: LD_VAR 0 1
72887: PPUSH
72888: CALL_OW 437
72892: IFFALSE 72975
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72894: LD_STRING M
72896: PUSH
72897: LD_VAR 0 1
72901: PPUSH
72902: CALL_OW 437
72906: PUSH
72907: LD_INT 1
72909: ARRAY
72910: PUSH
72911: LD_INT 1
72913: ARRAY
72914: EQUAL
72915: PUSH
72916: LD_VAR 0 2
72920: PUSH
72921: LD_VAR 0 1
72925: PPUSH
72926: CALL_OW 437
72930: PUSH
72931: LD_INT 1
72933: ARRAY
72934: PUSH
72935: LD_INT 2
72937: ARRAY
72938: EQUAL
72939: AND
72940: PUSH
72941: LD_VAR 0 3
72945: PUSH
72946: LD_VAR 0 1
72950: PPUSH
72951: CALL_OW 437
72955: PUSH
72956: LD_INT 1
72958: ARRAY
72959: PUSH
72960: LD_INT 3
72962: ARRAY
72963: EQUAL
72964: AND
72965: IFFALSE 72975
// result := true ;
72967: LD_ADDR_VAR 0 4
72971: PUSH
72972: LD_INT 1
72974: ST_TO_ADDR
// end ; end ;
72975: LD_VAR 0 4
72979: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72980: LD_INT 0
72982: PPUSH
72983: PPUSH
72984: PPUSH
72985: PPUSH
// if not unit or not area then
72986: LD_VAR 0 1
72990: NOT
72991: PUSH
72992: LD_VAR 0 2
72996: NOT
72997: OR
72998: IFFALSE 73002
// exit ;
73000: GO 73178
// tmp := AreaToList ( area , i ) ;
73002: LD_ADDR_VAR 0 6
73006: PUSH
73007: LD_VAR 0 2
73011: PPUSH
73012: LD_VAR 0 5
73016: PPUSH
73017: CALL_OW 517
73021: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73022: LD_ADDR_VAR 0 5
73026: PUSH
73027: DOUBLE
73028: LD_INT 1
73030: DEC
73031: ST_TO_ADDR
73032: LD_VAR 0 6
73036: PUSH
73037: LD_INT 1
73039: ARRAY
73040: PUSH
73041: FOR_TO
73042: IFFALSE 73176
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73044: LD_ADDR_VAR 0 7
73048: PUSH
73049: LD_VAR 0 6
73053: PUSH
73054: LD_INT 1
73056: ARRAY
73057: PUSH
73058: LD_VAR 0 5
73062: ARRAY
73063: PUSH
73064: LD_VAR 0 6
73068: PUSH
73069: LD_INT 2
73071: ARRAY
73072: PUSH
73073: LD_VAR 0 5
73077: ARRAY
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73083: LD_INT 92
73085: PUSH
73086: LD_VAR 0 7
73090: PUSH
73091: LD_INT 1
73093: ARRAY
73094: PUSH
73095: LD_VAR 0 7
73099: PUSH
73100: LD_INT 2
73102: ARRAY
73103: PUSH
73104: LD_INT 2
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: PPUSH
73113: CALL_OW 69
73117: PUSH
73118: LD_INT 0
73120: EQUAL
73121: IFFALSE 73174
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73123: LD_VAR 0 1
73127: PPUSH
73128: LD_VAR 0 7
73132: PUSH
73133: LD_INT 1
73135: ARRAY
73136: PPUSH
73137: LD_VAR 0 7
73141: PUSH
73142: LD_INT 2
73144: ARRAY
73145: PPUSH
73146: LD_VAR 0 3
73150: PPUSH
73151: CALL_OW 48
// result := IsPlaced ( unit ) ;
73155: LD_ADDR_VAR 0 4
73159: PUSH
73160: LD_VAR 0 1
73164: PPUSH
73165: CALL_OW 305
73169: ST_TO_ADDR
// exit ;
73170: POP
73171: POP
73172: GO 73178
// end ; end ;
73174: GO 73041
73176: POP
73177: POP
// end ;
73178: LD_VAR 0 4
73182: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73183: LD_INT 0
73185: PPUSH
73186: PPUSH
73187: PPUSH
// if not side or side > 8 then
73188: LD_VAR 0 1
73192: NOT
73193: PUSH
73194: LD_VAR 0 1
73198: PUSH
73199: LD_INT 8
73201: GREATER
73202: OR
73203: IFFALSE 73207
// exit ;
73205: GO 73394
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73207: LD_ADDR_VAR 0 4
73211: PUSH
73212: LD_INT 22
73214: PUSH
73215: LD_VAR 0 1
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 21
73226: PUSH
73227: LD_INT 3
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PPUSH
73238: CALL_OW 69
73242: ST_TO_ADDR
// if not tmp then
73243: LD_VAR 0 4
73247: NOT
73248: IFFALSE 73252
// exit ;
73250: GO 73394
// enable_addtolog := true ;
73252: LD_ADDR_OWVAR 81
73256: PUSH
73257: LD_INT 1
73259: ST_TO_ADDR
// AddToLog ( [ ) ;
73260: LD_STRING [
73262: PPUSH
73263: CALL_OW 561
// for i in tmp do
73267: LD_ADDR_VAR 0 3
73271: PUSH
73272: LD_VAR 0 4
73276: PUSH
73277: FOR_IN
73278: IFFALSE 73385
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73280: LD_STRING [
73282: PUSH
73283: LD_VAR 0 3
73287: PPUSH
73288: CALL_OW 266
73292: STR
73293: PUSH
73294: LD_STRING , 
73296: STR
73297: PUSH
73298: LD_VAR 0 3
73302: PPUSH
73303: CALL_OW 250
73307: STR
73308: PUSH
73309: LD_STRING , 
73311: STR
73312: PUSH
73313: LD_VAR 0 3
73317: PPUSH
73318: CALL_OW 251
73322: STR
73323: PUSH
73324: LD_STRING , 
73326: STR
73327: PUSH
73328: LD_VAR 0 3
73332: PPUSH
73333: CALL_OW 254
73337: STR
73338: PUSH
73339: LD_STRING , 
73341: STR
73342: PUSH
73343: LD_VAR 0 3
73347: PPUSH
73348: LD_INT 1
73350: PPUSH
73351: CALL_OW 268
73355: STR
73356: PUSH
73357: LD_STRING , 
73359: STR
73360: PUSH
73361: LD_VAR 0 3
73365: PPUSH
73366: LD_INT 2
73368: PPUSH
73369: CALL_OW 268
73373: STR
73374: PUSH
73375: LD_STRING ],
73377: STR
73378: PPUSH
73379: CALL_OW 561
// end ;
73383: GO 73277
73385: POP
73386: POP
// AddToLog ( ]; ) ;
73387: LD_STRING ];
73389: PPUSH
73390: CALL_OW 561
// end ;
73394: LD_VAR 0 2
73398: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73399: LD_INT 0
73401: PPUSH
73402: PPUSH
73403: PPUSH
73404: PPUSH
73405: PPUSH
// if not area or not rate or not max then
73406: LD_VAR 0 1
73410: NOT
73411: PUSH
73412: LD_VAR 0 2
73416: NOT
73417: OR
73418: PUSH
73419: LD_VAR 0 4
73423: NOT
73424: OR
73425: IFFALSE 73429
// exit ;
73427: GO 73618
// while 1 do
73429: LD_INT 1
73431: IFFALSE 73618
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73433: LD_ADDR_VAR 0 9
73437: PUSH
73438: LD_VAR 0 1
73442: PPUSH
73443: LD_INT 1
73445: PPUSH
73446: CALL_OW 287
73450: PUSH
73451: LD_INT 10
73453: MUL
73454: ST_TO_ADDR
// r := rate / 10 ;
73455: LD_ADDR_VAR 0 7
73459: PUSH
73460: LD_VAR 0 2
73464: PUSH
73465: LD_INT 10
73467: DIVREAL
73468: ST_TO_ADDR
// time := 1 1$00 ;
73469: LD_ADDR_VAR 0 8
73473: PUSH
73474: LD_INT 2100
73476: ST_TO_ADDR
// if amount < min then
73477: LD_VAR 0 9
73481: PUSH
73482: LD_VAR 0 3
73486: LESS
73487: IFFALSE 73505
// r := r * 2 else
73489: LD_ADDR_VAR 0 7
73493: PUSH
73494: LD_VAR 0 7
73498: PUSH
73499: LD_INT 2
73501: MUL
73502: ST_TO_ADDR
73503: GO 73531
// if amount > max then
73505: LD_VAR 0 9
73509: PUSH
73510: LD_VAR 0 4
73514: GREATER
73515: IFFALSE 73531
// r := r / 2 ;
73517: LD_ADDR_VAR 0 7
73521: PUSH
73522: LD_VAR 0 7
73526: PUSH
73527: LD_INT 2
73529: DIVREAL
73530: ST_TO_ADDR
// time := time / r ;
73531: LD_ADDR_VAR 0 8
73535: PUSH
73536: LD_VAR 0 8
73540: PUSH
73541: LD_VAR 0 7
73545: DIVREAL
73546: ST_TO_ADDR
// if time < 0 then
73547: LD_VAR 0 8
73551: PUSH
73552: LD_INT 0
73554: LESS
73555: IFFALSE 73572
// time := time * - 1 ;
73557: LD_ADDR_VAR 0 8
73561: PUSH
73562: LD_VAR 0 8
73566: PUSH
73567: LD_INT 1
73569: NEG
73570: MUL
73571: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73572: LD_VAR 0 8
73576: PUSH
73577: LD_INT 35
73579: PPUSH
73580: LD_INT 875
73582: PPUSH
73583: CALL_OW 12
73587: PLUS
73588: PPUSH
73589: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73593: LD_INT 1
73595: PPUSH
73596: LD_INT 5
73598: PPUSH
73599: CALL_OW 12
73603: PPUSH
73604: LD_VAR 0 1
73608: PPUSH
73609: LD_INT 1
73611: PPUSH
73612: CALL_OW 55
// end ;
73616: GO 73429
// end ;
73618: LD_VAR 0 5
73622: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73623: LD_INT 0
73625: PPUSH
73626: PPUSH
73627: PPUSH
73628: PPUSH
73629: PPUSH
73630: PPUSH
73631: PPUSH
73632: PPUSH
// if not turrets or not factories then
73633: LD_VAR 0 1
73637: NOT
73638: PUSH
73639: LD_VAR 0 2
73643: NOT
73644: OR
73645: IFFALSE 73649
// exit ;
73647: GO 73956
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73649: LD_ADDR_VAR 0 10
73653: PUSH
73654: LD_INT 5
73656: PUSH
73657: LD_INT 6
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 2
73666: PUSH
73667: LD_INT 4
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 3
73676: PUSH
73677: LD_INT 5
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: LIST
73688: PUSH
73689: LD_INT 24
73691: PUSH
73692: LD_INT 25
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: PUSH
73699: LD_INT 23
73701: PUSH
73702: LD_INT 27
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: PUSH
73713: LD_INT 42
73715: PUSH
73716: LD_INT 43
73718: PUSH
73719: EMPTY
73720: LIST
73721: LIST
73722: PUSH
73723: LD_INT 44
73725: PUSH
73726: LD_INT 46
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 45
73735: PUSH
73736: LD_INT 47
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: LIST
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: LIST
73752: ST_TO_ADDR
// result := [ ] ;
73753: LD_ADDR_VAR 0 3
73757: PUSH
73758: EMPTY
73759: ST_TO_ADDR
// for i in turrets do
73760: LD_ADDR_VAR 0 4
73764: PUSH
73765: LD_VAR 0 1
73769: PUSH
73770: FOR_IN
73771: IFFALSE 73954
// begin nat := GetNation ( i ) ;
73773: LD_ADDR_VAR 0 7
73777: PUSH
73778: LD_VAR 0 4
73782: PPUSH
73783: CALL_OW 248
73787: ST_TO_ADDR
// weapon := 0 ;
73788: LD_ADDR_VAR 0 8
73792: PUSH
73793: LD_INT 0
73795: ST_TO_ADDR
// if not nat then
73796: LD_VAR 0 7
73800: NOT
73801: IFFALSE 73805
// continue ;
73803: GO 73770
// for j in list [ nat ] do
73805: LD_ADDR_VAR 0 5
73809: PUSH
73810: LD_VAR 0 10
73814: PUSH
73815: LD_VAR 0 7
73819: ARRAY
73820: PUSH
73821: FOR_IN
73822: IFFALSE 73863
// if GetBWeapon ( i ) = j [ 1 ] then
73824: LD_VAR 0 4
73828: PPUSH
73829: CALL_OW 269
73833: PUSH
73834: LD_VAR 0 5
73838: PUSH
73839: LD_INT 1
73841: ARRAY
73842: EQUAL
73843: IFFALSE 73861
// begin weapon := j [ 2 ] ;
73845: LD_ADDR_VAR 0 8
73849: PUSH
73850: LD_VAR 0 5
73854: PUSH
73855: LD_INT 2
73857: ARRAY
73858: ST_TO_ADDR
// break ;
73859: GO 73863
// end ;
73861: GO 73821
73863: POP
73864: POP
// if not weapon then
73865: LD_VAR 0 8
73869: NOT
73870: IFFALSE 73874
// continue ;
73872: GO 73770
// for k in factories do
73874: LD_ADDR_VAR 0 6
73878: PUSH
73879: LD_VAR 0 2
73883: PUSH
73884: FOR_IN
73885: IFFALSE 73950
// begin weapons := AvailableWeaponList ( k ) ;
73887: LD_ADDR_VAR 0 9
73891: PUSH
73892: LD_VAR 0 6
73896: PPUSH
73897: CALL_OW 478
73901: ST_TO_ADDR
// if not weapons then
73902: LD_VAR 0 9
73906: NOT
73907: IFFALSE 73911
// continue ;
73909: GO 73884
// if weapon in weapons then
73911: LD_VAR 0 8
73915: PUSH
73916: LD_VAR 0 9
73920: IN
73921: IFFALSE 73948
// begin result := [ i , weapon ] ;
73923: LD_ADDR_VAR 0 3
73927: PUSH
73928: LD_VAR 0 4
73932: PUSH
73933: LD_VAR 0 8
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: ST_TO_ADDR
// exit ;
73942: POP
73943: POP
73944: POP
73945: POP
73946: GO 73956
// end ; end ;
73948: GO 73884
73950: POP
73951: POP
// end ;
73952: GO 73770
73954: POP
73955: POP
// end ;
73956: LD_VAR 0 3
73960: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73961: LD_INT 0
73963: PPUSH
// if not side or side > 8 then
73964: LD_VAR 0 3
73968: NOT
73969: PUSH
73970: LD_VAR 0 3
73974: PUSH
73975: LD_INT 8
73977: GREATER
73978: OR
73979: IFFALSE 73983
// exit ;
73981: GO 74042
// if not range then
73983: LD_VAR 0 4
73987: NOT
73988: IFFALSE 73999
// range := - 12 ;
73990: LD_ADDR_VAR 0 4
73994: PUSH
73995: LD_INT 12
73997: NEG
73998: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73999: LD_VAR 0 1
74003: PPUSH
74004: LD_VAR 0 2
74008: PPUSH
74009: LD_VAR 0 3
74013: PPUSH
74014: LD_VAR 0 4
74018: PPUSH
74019: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74023: LD_VAR 0 1
74027: PPUSH
74028: LD_VAR 0 2
74032: PPUSH
74033: LD_VAR 0 3
74037: PPUSH
74038: CALL_OW 331
// end ;
74042: LD_VAR 0 5
74046: RET
// export function Video ( mode ) ; begin
74047: LD_INT 0
74049: PPUSH
// ingame_video = mode ;
74050: LD_ADDR_OWVAR 52
74054: PUSH
74055: LD_VAR 0 1
74059: ST_TO_ADDR
// interface_hidden = mode ;
74060: LD_ADDR_OWVAR 54
74064: PUSH
74065: LD_VAR 0 1
74069: ST_TO_ADDR
// end ;
74070: LD_VAR 0 2
74074: RET
// export function Join ( array , element ) ; begin
74075: LD_INT 0
74077: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74078: LD_ADDR_VAR 0 3
74082: PUSH
74083: LD_VAR 0 1
74087: PPUSH
74088: LD_VAR 0 1
74092: PUSH
74093: LD_INT 1
74095: PLUS
74096: PPUSH
74097: LD_VAR 0 2
74101: PPUSH
74102: CALL_OW 1
74106: ST_TO_ADDR
// end ;
74107: LD_VAR 0 3
74111: RET
// export function JoinUnion ( array , element ) ; begin
74112: LD_INT 0
74114: PPUSH
// result := array union element ;
74115: LD_ADDR_VAR 0 3
74119: PUSH
74120: LD_VAR 0 1
74124: PUSH
74125: LD_VAR 0 2
74129: UNION
74130: ST_TO_ADDR
// end ;
74131: LD_VAR 0 3
74135: RET
// export function GetBehemoths ( side ) ; begin
74136: LD_INT 0
74138: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74139: LD_ADDR_VAR 0 2
74143: PUSH
74144: LD_INT 22
74146: PUSH
74147: LD_VAR 0 1
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 31
74158: PUSH
74159: LD_INT 25
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PPUSH
74170: CALL_OW 69
74174: ST_TO_ADDR
// end ;
74175: LD_VAR 0 2
74179: RET
// export function Shuffle ( array ) ; var i , index ; begin
74180: LD_INT 0
74182: PPUSH
74183: PPUSH
74184: PPUSH
// result := [ ] ;
74185: LD_ADDR_VAR 0 2
74189: PUSH
74190: EMPTY
74191: ST_TO_ADDR
// if not array then
74192: LD_VAR 0 1
74196: NOT
74197: IFFALSE 74201
// exit ;
74199: GO 74300
// Randomize ;
74201: CALL_OW 10
// for i = array downto 1 do
74205: LD_ADDR_VAR 0 3
74209: PUSH
74210: DOUBLE
74211: LD_VAR 0 1
74215: INC
74216: ST_TO_ADDR
74217: LD_INT 1
74219: PUSH
74220: FOR_DOWNTO
74221: IFFALSE 74298
// begin index := rand ( 1 , array ) ;
74223: LD_ADDR_VAR 0 4
74227: PUSH
74228: LD_INT 1
74230: PPUSH
74231: LD_VAR 0 1
74235: PPUSH
74236: CALL_OW 12
74240: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74241: LD_ADDR_VAR 0 2
74245: PUSH
74246: LD_VAR 0 2
74250: PPUSH
74251: LD_VAR 0 2
74255: PUSH
74256: LD_INT 1
74258: PLUS
74259: PPUSH
74260: LD_VAR 0 1
74264: PUSH
74265: LD_VAR 0 4
74269: ARRAY
74270: PPUSH
74271: CALL_OW 2
74275: ST_TO_ADDR
// array := Delete ( array , index ) ;
74276: LD_ADDR_VAR 0 1
74280: PUSH
74281: LD_VAR 0 1
74285: PPUSH
74286: LD_VAR 0 4
74290: PPUSH
74291: CALL_OW 3
74295: ST_TO_ADDR
// end ;
74296: GO 74220
74298: POP
74299: POP
// end ;
74300: LD_VAR 0 2
74304: RET
// export function GetBaseMaterials ( base ) ; begin
74305: LD_INT 0
74307: PPUSH
// result := [ 0 , 0 , 0 ] ;
74308: LD_ADDR_VAR 0 2
74312: PUSH
74313: LD_INT 0
74315: PUSH
74316: LD_INT 0
74318: PUSH
74319: LD_INT 0
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: ST_TO_ADDR
// if not base then
74327: LD_VAR 0 1
74331: NOT
74332: IFFALSE 74336
// exit ;
74334: GO 74385
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74336: LD_ADDR_VAR 0 2
74340: PUSH
74341: LD_VAR 0 1
74345: PPUSH
74346: LD_INT 1
74348: PPUSH
74349: CALL_OW 275
74353: PUSH
74354: LD_VAR 0 1
74358: PPUSH
74359: LD_INT 2
74361: PPUSH
74362: CALL_OW 275
74366: PUSH
74367: LD_VAR 0 1
74371: PPUSH
74372: LD_INT 3
74374: PPUSH
74375: CALL_OW 275
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: LIST
74384: ST_TO_ADDR
// end ;
74385: LD_VAR 0 2
74389: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74390: LD_INT 0
74392: PPUSH
74393: PPUSH
// result := array ;
74394: LD_ADDR_VAR 0 3
74398: PUSH
74399: LD_VAR 0 1
74403: ST_TO_ADDR
// if size >= result then
74404: LD_VAR 0 2
74408: PUSH
74409: LD_VAR 0 3
74413: GREATEREQUAL
74414: IFFALSE 74418
// exit ;
74416: GO 74468
// if size then
74418: LD_VAR 0 2
74422: IFFALSE 74468
// for i := array downto size do
74424: LD_ADDR_VAR 0 4
74428: PUSH
74429: DOUBLE
74430: LD_VAR 0 1
74434: INC
74435: ST_TO_ADDR
74436: LD_VAR 0 2
74440: PUSH
74441: FOR_DOWNTO
74442: IFFALSE 74466
// result := Delete ( result , result ) ;
74444: LD_ADDR_VAR 0 3
74448: PUSH
74449: LD_VAR 0 3
74453: PPUSH
74454: LD_VAR 0 3
74458: PPUSH
74459: CALL_OW 3
74463: ST_TO_ADDR
74464: GO 74441
74466: POP
74467: POP
// end ;
74468: LD_VAR 0 3
74472: RET
// export function ComExit ( unit ) ; var tmp ; begin
74473: LD_INT 0
74475: PPUSH
74476: PPUSH
// if not IsInUnit ( unit ) then
74477: LD_VAR 0 1
74481: PPUSH
74482: CALL_OW 310
74486: NOT
74487: IFFALSE 74491
// exit ;
74489: GO 74551
// tmp := IsInUnit ( unit ) ;
74491: LD_ADDR_VAR 0 3
74495: PUSH
74496: LD_VAR 0 1
74500: PPUSH
74501: CALL_OW 310
74505: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74506: LD_VAR 0 3
74510: PPUSH
74511: CALL_OW 247
74515: PUSH
74516: LD_INT 2
74518: EQUAL
74519: IFFALSE 74532
// ComExitVehicle ( unit ) else
74521: LD_VAR 0 1
74525: PPUSH
74526: CALL_OW 121
74530: GO 74541
// ComExitBuilding ( unit ) ;
74532: LD_VAR 0 1
74536: PPUSH
74537: CALL_OW 122
// result := tmp ;
74541: LD_ADDR_VAR 0 2
74545: PUSH
74546: LD_VAR 0 3
74550: ST_TO_ADDR
// end ;
74551: LD_VAR 0 2
74555: RET
// export function ComExitAll ( units ) ; var i ; begin
74556: LD_INT 0
74558: PPUSH
74559: PPUSH
// if not units then
74560: LD_VAR 0 1
74564: NOT
74565: IFFALSE 74569
// exit ;
74567: GO 74595
// for i in units do
74569: LD_ADDR_VAR 0 3
74573: PUSH
74574: LD_VAR 0 1
74578: PUSH
74579: FOR_IN
74580: IFFALSE 74593
// ComExit ( i ) ;
74582: LD_VAR 0 3
74586: PPUSH
74587: CALL 74473 0 1
74591: GO 74579
74593: POP
74594: POP
// end ;
74595: LD_VAR 0 2
74599: RET
// export function ResetHc ; begin
74600: LD_INT 0
74602: PPUSH
// InitHc ;
74603: CALL_OW 19
// hc_importance := 0 ;
74607: LD_ADDR_OWVAR 32
74611: PUSH
74612: LD_INT 0
74614: ST_TO_ADDR
// end ;
74615: LD_VAR 0 1
74619: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74620: LD_INT 0
74622: PPUSH
74623: PPUSH
74624: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74625: LD_ADDR_VAR 0 6
74629: PUSH
74630: LD_VAR 0 1
74634: PUSH
74635: LD_VAR 0 3
74639: PLUS
74640: PUSH
74641: LD_INT 2
74643: DIV
74644: ST_TO_ADDR
// if _x < 0 then
74645: LD_VAR 0 6
74649: PUSH
74650: LD_INT 0
74652: LESS
74653: IFFALSE 74670
// _x := _x * - 1 ;
74655: LD_ADDR_VAR 0 6
74659: PUSH
74660: LD_VAR 0 6
74664: PUSH
74665: LD_INT 1
74667: NEG
74668: MUL
74669: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74670: LD_ADDR_VAR 0 7
74674: PUSH
74675: LD_VAR 0 2
74679: PUSH
74680: LD_VAR 0 4
74684: PLUS
74685: PUSH
74686: LD_INT 2
74688: DIV
74689: ST_TO_ADDR
// if _y < 0 then
74690: LD_VAR 0 7
74694: PUSH
74695: LD_INT 0
74697: LESS
74698: IFFALSE 74715
// _y := _y * - 1 ;
74700: LD_ADDR_VAR 0 7
74704: PUSH
74705: LD_VAR 0 7
74709: PUSH
74710: LD_INT 1
74712: NEG
74713: MUL
74714: ST_TO_ADDR
// result := [ _x , _y ] ;
74715: LD_ADDR_VAR 0 5
74719: PUSH
74720: LD_VAR 0 6
74724: PUSH
74725: LD_VAR 0 7
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: ST_TO_ADDR
// end ;
74734: LD_VAR 0 5
74738: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74739: LD_INT 0
74741: PPUSH
74742: PPUSH
74743: PPUSH
74744: PPUSH
// task := GetTaskList ( unit ) ;
74745: LD_ADDR_VAR 0 7
74749: PUSH
74750: LD_VAR 0 1
74754: PPUSH
74755: CALL_OW 437
74759: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74760: LD_VAR 0 7
74764: NOT
74765: PUSH
74766: LD_VAR 0 1
74770: PPUSH
74771: LD_VAR 0 2
74775: PPUSH
74776: CALL_OW 308
74780: NOT
74781: AND
74782: IFFALSE 74786
// exit ;
74784: GO 74904
// if IsInArea ( unit , area ) then
74786: LD_VAR 0 1
74790: PPUSH
74791: LD_VAR 0 2
74795: PPUSH
74796: CALL_OW 308
74800: IFFALSE 74818
// begin ComMoveToArea ( unit , goAway ) ;
74802: LD_VAR 0 1
74806: PPUSH
74807: LD_VAR 0 3
74811: PPUSH
74812: CALL_OW 113
// exit ;
74816: GO 74904
// end ; if task [ 1 ] [ 1 ] <> M then
74818: LD_VAR 0 7
74822: PUSH
74823: LD_INT 1
74825: ARRAY
74826: PUSH
74827: LD_INT 1
74829: ARRAY
74830: PUSH
74831: LD_STRING M
74833: NONEQUAL
74834: IFFALSE 74838
// exit ;
74836: GO 74904
// x := task [ 1 ] [ 2 ] ;
74838: LD_ADDR_VAR 0 5
74842: PUSH
74843: LD_VAR 0 7
74847: PUSH
74848: LD_INT 1
74850: ARRAY
74851: PUSH
74852: LD_INT 2
74854: ARRAY
74855: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74856: LD_ADDR_VAR 0 6
74860: PUSH
74861: LD_VAR 0 7
74865: PUSH
74866: LD_INT 1
74868: ARRAY
74869: PUSH
74870: LD_INT 3
74872: ARRAY
74873: ST_TO_ADDR
// if InArea ( x , y , area ) then
74874: LD_VAR 0 5
74878: PPUSH
74879: LD_VAR 0 6
74883: PPUSH
74884: LD_VAR 0 2
74888: PPUSH
74889: CALL_OW 309
74893: IFFALSE 74904
// ComStop ( unit ) ;
74895: LD_VAR 0 1
74899: PPUSH
74900: CALL_OW 141
// end ;
74904: LD_VAR 0 4
74908: RET
// export function Abs ( value ) ; begin
74909: LD_INT 0
74911: PPUSH
// result := value ;
74912: LD_ADDR_VAR 0 2
74916: PUSH
74917: LD_VAR 0 1
74921: ST_TO_ADDR
// if value < 0 then
74922: LD_VAR 0 1
74926: PUSH
74927: LD_INT 0
74929: LESS
74930: IFFALSE 74947
// result := value * - 1 ;
74932: LD_ADDR_VAR 0 2
74936: PUSH
74937: LD_VAR 0 1
74941: PUSH
74942: LD_INT 1
74944: NEG
74945: MUL
74946: ST_TO_ADDR
// end ;
74947: LD_VAR 0 2
74951: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74952: LD_INT 0
74954: PPUSH
74955: PPUSH
74956: PPUSH
74957: PPUSH
74958: PPUSH
74959: PPUSH
74960: PPUSH
74961: PPUSH
// if not unit or not building then
74962: LD_VAR 0 1
74966: NOT
74967: PUSH
74968: LD_VAR 0 2
74972: NOT
74973: OR
74974: IFFALSE 74978
// exit ;
74976: GO 75204
// x := GetX ( building ) ;
74978: LD_ADDR_VAR 0 4
74982: PUSH
74983: LD_VAR 0 2
74987: PPUSH
74988: CALL_OW 250
74992: ST_TO_ADDR
// y := GetY ( building ) ;
74993: LD_ADDR_VAR 0 6
74997: PUSH
74998: LD_VAR 0 2
75002: PPUSH
75003: CALL_OW 251
75007: ST_TO_ADDR
// d := GetDir ( building ) ;
75008: LD_ADDR_VAR 0 8
75012: PUSH
75013: LD_VAR 0 2
75017: PPUSH
75018: CALL_OW 254
75022: ST_TO_ADDR
// r := 4 ;
75023: LD_ADDR_VAR 0 9
75027: PUSH
75028: LD_INT 4
75030: ST_TO_ADDR
// for i := 1 to 5 do
75031: LD_ADDR_VAR 0 10
75035: PUSH
75036: DOUBLE
75037: LD_INT 1
75039: DEC
75040: ST_TO_ADDR
75041: LD_INT 5
75043: PUSH
75044: FOR_TO
75045: IFFALSE 75202
// begin _x := ShiftX ( x , d , r + i ) ;
75047: LD_ADDR_VAR 0 5
75051: PUSH
75052: LD_VAR 0 4
75056: PPUSH
75057: LD_VAR 0 8
75061: PPUSH
75062: LD_VAR 0 9
75066: PUSH
75067: LD_VAR 0 10
75071: PLUS
75072: PPUSH
75073: CALL_OW 272
75077: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75078: LD_ADDR_VAR 0 7
75082: PUSH
75083: LD_VAR 0 6
75087: PPUSH
75088: LD_VAR 0 8
75092: PPUSH
75093: LD_VAR 0 9
75097: PUSH
75098: LD_VAR 0 10
75102: PLUS
75103: PPUSH
75104: CALL_OW 273
75108: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75109: LD_VAR 0 5
75113: PPUSH
75114: LD_VAR 0 7
75118: PPUSH
75119: CALL_OW 488
75123: PUSH
75124: LD_VAR 0 5
75128: PPUSH
75129: LD_VAR 0 7
75133: PPUSH
75134: CALL_OW 428
75138: PPUSH
75139: CALL_OW 247
75143: PUSH
75144: LD_INT 3
75146: PUSH
75147: LD_INT 2
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: IN
75154: NOT
75155: AND
75156: IFFALSE 75200
// begin ComMoveXY ( unit , _x , _y ) ;
75158: LD_VAR 0 1
75162: PPUSH
75163: LD_VAR 0 5
75167: PPUSH
75168: LD_VAR 0 7
75172: PPUSH
75173: CALL_OW 111
// result := [ _x , _y ] ;
75177: LD_ADDR_VAR 0 3
75181: PUSH
75182: LD_VAR 0 5
75186: PUSH
75187: LD_VAR 0 7
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: ST_TO_ADDR
// exit ;
75196: POP
75197: POP
75198: GO 75204
// end ; end ;
75200: GO 75044
75202: POP
75203: POP
// end ;
75204: LD_VAR 0 3
75208: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75209: LD_INT 0
75211: PPUSH
75212: PPUSH
75213: PPUSH
// result := 0 ;
75214: LD_ADDR_VAR 0 3
75218: PUSH
75219: LD_INT 0
75221: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75222: LD_VAR 0 1
75226: PUSH
75227: LD_INT 0
75229: LESS
75230: PUSH
75231: LD_VAR 0 1
75235: PUSH
75236: LD_INT 8
75238: GREATER
75239: OR
75240: PUSH
75241: LD_VAR 0 2
75245: PUSH
75246: LD_INT 0
75248: LESS
75249: OR
75250: PUSH
75251: LD_VAR 0 2
75255: PUSH
75256: LD_INT 8
75258: GREATER
75259: OR
75260: IFFALSE 75264
// exit ;
75262: GO 75339
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75264: LD_ADDR_VAR 0 4
75268: PUSH
75269: LD_INT 22
75271: PUSH
75272: LD_VAR 0 2
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PPUSH
75281: CALL_OW 69
75285: PUSH
75286: FOR_IN
75287: IFFALSE 75337
// begin un := UnitShoot ( i ) ;
75289: LD_ADDR_VAR 0 5
75293: PUSH
75294: LD_VAR 0 4
75298: PPUSH
75299: CALL_OW 504
75303: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75304: LD_VAR 0 5
75308: PPUSH
75309: CALL_OW 255
75313: PUSH
75314: LD_VAR 0 1
75318: EQUAL
75319: IFFALSE 75335
// begin result := un ;
75321: LD_ADDR_VAR 0 3
75325: PUSH
75326: LD_VAR 0 5
75330: ST_TO_ADDR
// exit ;
75331: POP
75332: POP
75333: GO 75339
// end ; end ;
75335: GO 75286
75337: POP
75338: POP
// end ;
75339: LD_VAR 0 3
75343: RET
// export function GetCargoBay ( units ) ; begin
75344: LD_INT 0
75346: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75347: LD_ADDR_VAR 0 2
75351: PUSH
75352: LD_VAR 0 1
75356: PPUSH
75357: LD_INT 2
75359: PUSH
75360: LD_INT 34
75362: PUSH
75363: LD_INT 12
75365: PUSH
75366: EMPTY
75367: LIST
75368: LIST
75369: PUSH
75370: LD_INT 34
75372: PUSH
75373: LD_INT 51
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PUSH
75380: LD_INT 34
75382: PUSH
75383: LD_INT 32
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 34
75392: PUSH
75393: LD_INT 89
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: PPUSH
75407: CALL_OW 72
75411: ST_TO_ADDR
// end ;
75412: LD_VAR 0 2
75416: RET
// export function Negate ( value ) ; begin
75417: LD_INT 0
75419: PPUSH
// result := not value ;
75420: LD_ADDR_VAR 0 2
75424: PUSH
75425: LD_VAR 0 1
75429: NOT
75430: ST_TO_ADDR
// end ;
75431: LD_VAR 0 2
75435: RET
// export function Inc ( value ) ; begin
75436: LD_INT 0
75438: PPUSH
// result := value + 1 ;
75439: LD_ADDR_VAR 0 2
75443: PUSH
75444: LD_VAR 0 1
75448: PUSH
75449: LD_INT 1
75451: PLUS
75452: ST_TO_ADDR
// end ;
75453: LD_VAR 0 2
75457: RET
// export function Dec ( value ) ; begin
75458: LD_INT 0
75460: PPUSH
// result := value - 1 ;
75461: LD_ADDR_VAR 0 2
75465: PUSH
75466: LD_VAR 0 1
75470: PUSH
75471: LD_INT 1
75473: MINUS
75474: ST_TO_ADDR
// end ;
75475: LD_VAR 0 2
75479: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75480: LD_INT 0
75482: PPUSH
75483: PPUSH
75484: PPUSH
75485: PPUSH
75486: PPUSH
75487: PPUSH
75488: PPUSH
75489: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75490: LD_VAR 0 1
75494: PPUSH
75495: LD_VAR 0 2
75499: PPUSH
75500: CALL_OW 488
75504: NOT
75505: PUSH
75506: LD_VAR 0 3
75510: PPUSH
75511: LD_VAR 0 4
75515: PPUSH
75516: CALL_OW 488
75520: NOT
75521: OR
75522: IFFALSE 75535
// begin result := - 1 ;
75524: LD_ADDR_VAR 0 5
75528: PUSH
75529: LD_INT 1
75531: NEG
75532: ST_TO_ADDR
// exit ;
75533: GO 75770
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75535: LD_ADDR_VAR 0 12
75539: PUSH
75540: LD_VAR 0 1
75544: PPUSH
75545: LD_VAR 0 2
75549: PPUSH
75550: LD_VAR 0 3
75554: PPUSH
75555: LD_VAR 0 4
75559: PPUSH
75560: CALL 74620 0 4
75564: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75565: LD_ADDR_VAR 0 11
75569: PUSH
75570: LD_VAR 0 1
75574: PPUSH
75575: LD_VAR 0 2
75579: PPUSH
75580: LD_VAR 0 12
75584: PUSH
75585: LD_INT 1
75587: ARRAY
75588: PPUSH
75589: LD_VAR 0 12
75593: PUSH
75594: LD_INT 2
75596: ARRAY
75597: PPUSH
75598: CALL_OW 298
75602: ST_TO_ADDR
// distance := 9999 ;
75603: LD_ADDR_VAR 0 10
75607: PUSH
75608: LD_INT 9999
75610: ST_TO_ADDR
// for i := 0 to 5 do
75611: LD_ADDR_VAR 0 6
75615: PUSH
75616: DOUBLE
75617: LD_INT 0
75619: DEC
75620: ST_TO_ADDR
75621: LD_INT 5
75623: PUSH
75624: FOR_TO
75625: IFFALSE 75768
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75627: LD_ADDR_VAR 0 7
75631: PUSH
75632: LD_VAR 0 1
75636: PPUSH
75637: LD_VAR 0 6
75641: PPUSH
75642: LD_VAR 0 11
75646: PPUSH
75647: CALL_OW 272
75651: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75652: LD_ADDR_VAR 0 8
75656: PUSH
75657: LD_VAR 0 2
75661: PPUSH
75662: LD_VAR 0 6
75666: PPUSH
75667: LD_VAR 0 11
75671: PPUSH
75672: CALL_OW 273
75676: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75677: LD_VAR 0 7
75681: PPUSH
75682: LD_VAR 0 8
75686: PPUSH
75687: CALL_OW 488
75691: NOT
75692: IFFALSE 75696
// continue ;
75694: GO 75624
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75696: LD_ADDR_VAR 0 9
75700: PUSH
75701: LD_VAR 0 12
75705: PUSH
75706: LD_INT 1
75708: ARRAY
75709: PPUSH
75710: LD_VAR 0 12
75714: PUSH
75715: LD_INT 2
75717: ARRAY
75718: PPUSH
75719: LD_VAR 0 7
75723: PPUSH
75724: LD_VAR 0 8
75728: PPUSH
75729: CALL_OW 298
75733: ST_TO_ADDR
// if tmp < distance then
75734: LD_VAR 0 9
75738: PUSH
75739: LD_VAR 0 10
75743: LESS
75744: IFFALSE 75766
// begin result := i ;
75746: LD_ADDR_VAR 0 5
75750: PUSH
75751: LD_VAR 0 6
75755: ST_TO_ADDR
// distance := tmp ;
75756: LD_ADDR_VAR 0 10
75760: PUSH
75761: LD_VAR 0 9
75765: ST_TO_ADDR
// end ; end ;
75766: GO 75624
75768: POP
75769: POP
// end ;
75770: LD_VAR 0 5
75774: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75775: LD_INT 0
75777: PPUSH
75778: PPUSH
// if not driver or not IsInUnit ( driver ) then
75779: LD_VAR 0 1
75783: NOT
75784: PUSH
75785: LD_VAR 0 1
75789: PPUSH
75790: CALL_OW 310
75794: NOT
75795: OR
75796: IFFALSE 75800
// exit ;
75798: GO 75890
// vehicle := IsInUnit ( driver ) ;
75800: LD_ADDR_VAR 0 3
75804: PUSH
75805: LD_VAR 0 1
75809: PPUSH
75810: CALL_OW 310
75814: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75815: LD_VAR 0 1
75819: PPUSH
75820: LD_STRING \
75822: PUSH
75823: LD_INT 0
75825: PUSH
75826: LD_INT 0
75828: PUSH
75829: LD_INT 0
75831: PUSH
75832: LD_INT 0
75834: PUSH
75835: LD_INT 0
75837: PUSH
75838: LD_INT 0
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: PUSH
75850: LD_STRING E
75852: PUSH
75853: LD_INT 0
75855: PUSH
75856: LD_INT 0
75858: PUSH
75859: LD_VAR 0 3
75863: PUSH
75864: LD_INT 0
75866: PUSH
75867: LD_INT 0
75869: PUSH
75870: LD_INT 0
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PPUSH
75886: CALL_OW 446
// end ;
75890: LD_VAR 0 2
75894: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75895: LD_INT 0
75897: PPUSH
75898: PPUSH
// if not driver or not IsInUnit ( driver ) then
75899: LD_VAR 0 1
75903: NOT
75904: PUSH
75905: LD_VAR 0 1
75909: PPUSH
75910: CALL_OW 310
75914: NOT
75915: OR
75916: IFFALSE 75920
// exit ;
75918: GO 76010
// vehicle := IsInUnit ( driver ) ;
75920: LD_ADDR_VAR 0 3
75924: PUSH
75925: LD_VAR 0 1
75929: PPUSH
75930: CALL_OW 310
75934: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75935: LD_VAR 0 1
75939: PPUSH
75940: LD_STRING \
75942: PUSH
75943: LD_INT 0
75945: PUSH
75946: LD_INT 0
75948: PUSH
75949: LD_INT 0
75951: PUSH
75952: LD_INT 0
75954: PUSH
75955: LD_INT 0
75957: PUSH
75958: LD_INT 0
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: PUSH
75970: LD_STRING E
75972: PUSH
75973: LD_INT 0
75975: PUSH
75976: LD_INT 0
75978: PUSH
75979: LD_VAR 0 3
75983: PUSH
75984: LD_INT 0
75986: PUSH
75987: LD_INT 0
75989: PUSH
75990: LD_INT 0
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PPUSH
76006: CALL_OW 447
// end ;
76010: LD_VAR 0 2
76014: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76015: LD_INT 0
76017: PPUSH
76018: PPUSH
76019: PPUSH
// tmp := [ ] ;
76020: LD_ADDR_VAR 0 5
76024: PUSH
76025: EMPTY
76026: ST_TO_ADDR
// for i in units do
76027: LD_ADDR_VAR 0 4
76031: PUSH
76032: LD_VAR 0 1
76036: PUSH
76037: FOR_IN
76038: IFFALSE 76076
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76040: LD_ADDR_VAR 0 5
76044: PUSH
76045: LD_VAR 0 5
76049: PPUSH
76050: LD_VAR 0 5
76054: PUSH
76055: LD_INT 1
76057: PLUS
76058: PPUSH
76059: LD_VAR 0 4
76063: PPUSH
76064: CALL_OW 256
76068: PPUSH
76069: CALL_OW 2
76073: ST_TO_ADDR
76074: GO 76037
76076: POP
76077: POP
// if not tmp then
76078: LD_VAR 0 5
76082: NOT
76083: IFFALSE 76087
// exit ;
76085: GO 76135
// if asc then
76087: LD_VAR 0 2
76091: IFFALSE 76115
// result := SortListByListAsc ( units , tmp ) else
76093: LD_ADDR_VAR 0 3
76097: PUSH
76098: LD_VAR 0 1
76102: PPUSH
76103: LD_VAR 0 5
76107: PPUSH
76108: CALL_OW 76
76112: ST_TO_ADDR
76113: GO 76135
// result := SortListByListDesc ( units , tmp ) ;
76115: LD_ADDR_VAR 0 3
76119: PUSH
76120: LD_VAR 0 1
76124: PPUSH
76125: LD_VAR 0 5
76129: PPUSH
76130: CALL_OW 77
76134: ST_TO_ADDR
// end ;
76135: LD_VAR 0 3
76139: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76140: LD_INT 0
76142: PPUSH
76143: PPUSH
// task := GetTaskList ( mech ) ;
76144: LD_ADDR_VAR 0 4
76148: PUSH
76149: LD_VAR 0 1
76153: PPUSH
76154: CALL_OW 437
76158: ST_TO_ADDR
// if not task then
76159: LD_VAR 0 4
76163: NOT
76164: IFFALSE 76168
// exit ;
76166: GO 76210
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76168: LD_ADDR_VAR 0 3
76172: PUSH
76173: LD_VAR 0 4
76177: PUSH
76178: LD_INT 1
76180: ARRAY
76181: PUSH
76182: LD_INT 1
76184: ARRAY
76185: PUSH
76186: LD_STRING r
76188: EQUAL
76189: PUSH
76190: LD_VAR 0 4
76194: PUSH
76195: LD_INT 1
76197: ARRAY
76198: PUSH
76199: LD_INT 4
76201: ARRAY
76202: PUSH
76203: LD_VAR 0 2
76207: EQUAL
76208: AND
76209: ST_TO_ADDR
// end ;
76210: LD_VAR 0 3
76214: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76215: LD_INT 0
76217: PPUSH
// SetDir ( unit , d ) ;
76218: LD_VAR 0 1
76222: PPUSH
76223: LD_VAR 0 4
76227: PPUSH
76228: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76232: LD_VAR 0 1
76236: PPUSH
76237: LD_VAR 0 2
76241: PPUSH
76242: LD_VAR 0 3
76246: PPUSH
76247: LD_VAR 0 5
76251: PPUSH
76252: CALL_OW 48
// end ;
76256: LD_VAR 0 6
76260: RET
// export function ToNaturalNumber ( number ) ; begin
76261: LD_INT 0
76263: PPUSH
// result := number div 1 ;
76264: LD_ADDR_VAR 0 2
76268: PUSH
76269: LD_VAR 0 1
76273: PUSH
76274: LD_INT 1
76276: DIV
76277: ST_TO_ADDR
// if number < 0 then
76278: LD_VAR 0 1
76282: PUSH
76283: LD_INT 0
76285: LESS
76286: IFFALSE 76296
// result := 0 ;
76288: LD_ADDR_VAR 0 2
76292: PUSH
76293: LD_INT 0
76295: ST_TO_ADDR
// end ;
76296: LD_VAR 0 2
76300: RET
// export function SortByClass ( units , class ) ; var un ; begin
76301: LD_INT 0
76303: PPUSH
76304: PPUSH
// if not units or not class then
76305: LD_VAR 0 1
76309: NOT
76310: PUSH
76311: LD_VAR 0 2
76315: NOT
76316: OR
76317: IFFALSE 76321
// exit ;
76319: GO 76416
// result := [ ] ;
76321: LD_ADDR_VAR 0 3
76325: PUSH
76326: EMPTY
76327: ST_TO_ADDR
// for un in units do
76328: LD_ADDR_VAR 0 4
76332: PUSH
76333: LD_VAR 0 1
76337: PUSH
76338: FOR_IN
76339: IFFALSE 76414
// if GetClass ( un ) = class then
76341: LD_VAR 0 4
76345: PPUSH
76346: CALL_OW 257
76350: PUSH
76351: LD_VAR 0 2
76355: EQUAL
76356: IFFALSE 76383
// result := Insert ( result , 1 , un ) else
76358: LD_ADDR_VAR 0 3
76362: PUSH
76363: LD_VAR 0 3
76367: PPUSH
76368: LD_INT 1
76370: PPUSH
76371: LD_VAR 0 4
76375: PPUSH
76376: CALL_OW 2
76380: ST_TO_ADDR
76381: GO 76412
// result := Replace ( result , result + 1 , un ) ;
76383: LD_ADDR_VAR 0 3
76387: PUSH
76388: LD_VAR 0 3
76392: PPUSH
76393: LD_VAR 0 3
76397: PUSH
76398: LD_INT 1
76400: PLUS
76401: PPUSH
76402: LD_VAR 0 4
76406: PPUSH
76407: CALL_OW 1
76411: ST_TO_ADDR
76412: GO 76338
76414: POP
76415: POP
// end ;
76416: LD_VAR 0 3
76420: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76421: LD_INT 0
76423: PPUSH
76424: PPUSH
76425: PPUSH
76426: PPUSH
76427: PPUSH
76428: PPUSH
76429: PPUSH
// result := [ ] ;
76430: LD_ADDR_VAR 0 4
76434: PUSH
76435: EMPTY
76436: ST_TO_ADDR
// if x - r < 0 then
76437: LD_VAR 0 1
76441: PUSH
76442: LD_VAR 0 3
76446: MINUS
76447: PUSH
76448: LD_INT 0
76450: LESS
76451: IFFALSE 76463
// min_x := 0 else
76453: LD_ADDR_VAR 0 8
76457: PUSH
76458: LD_INT 0
76460: ST_TO_ADDR
76461: GO 76479
// min_x := x - r ;
76463: LD_ADDR_VAR 0 8
76467: PUSH
76468: LD_VAR 0 1
76472: PUSH
76473: LD_VAR 0 3
76477: MINUS
76478: ST_TO_ADDR
// if y - r < 0 then
76479: LD_VAR 0 2
76483: PUSH
76484: LD_VAR 0 3
76488: MINUS
76489: PUSH
76490: LD_INT 0
76492: LESS
76493: IFFALSE 76505
// min_y := 0 else
76495: LD_ADDR_VAR 0 7
76499: PUSH
76500: LD_INT 0
76502: ST_TO_ADDR
76503: GO 76521
// min_y := y - r ;
76505: LD_ADDR_VAR 0 7
76509: PUSH
76510: LD_VAR 0 2
76514: PUSH
76515: LD_VAR 0 3
76519: MINUS
76520: ST_TO_ADDR
// max_x := x + r ;
76521: LD_ADDR_VAR 0 9
76525: PUSH
76526: LD_VAR 0 1
76530: PUSH
76531: LD_VAR 0 3
76535: PLUS
76536: ST_TO_ADDR
// max_y := y + r ;
76537: LD_ADDR_VAR 0 10
76541: PUSH
76542: LD_VAR 0 2
76546: PUSH
76547: LD_VAR 0 3
76551: PLUS
76552: ST_TO_ADDR
// for _x = min_x to max_x do
76553: LD_ADDR_VAR 0 5
76557: PUSH
76558: DOUBLE
76559: LD_VAR 0 8
76563: DEC
76564: ST_TO_ADDR
76565: LD_VAR 0 9
76569: PUSH
76570: FOR_TO
76571: IFFALSE 76672
// for _y = min_y to max_y do
76573: LD_ADDR_VAR 0 6
76577: PUSH
76578: DOUBLE
76579: LD_VAR 0 7
76583: DEC
76584: ST_TO_ADDR
76585: LD_VAR 0 10
76589: PUSH
76590: FOR_TO
76591: IFFALSE 76668
// begin if not ValidHex ( _x , _y ) then
76593: LD_VAR 0 5
76597: PPUSH
76598: LD_VAR 0 6
76602: PPUSH
76603: CALL_OW 488
76607: NOT
76608: IFFALSE 76612
// continue ;
76610: GO 76590
// if GetResourceTypeXY ( _x , _y ) then
76612: LD_VAR 0 5
76616: PPUSH
76617: LD_VAR 0 6
76621: PPUSH
76622: CALL_OW 283
76626: IFFALSE 76666
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76628: LD_ADDR_VAR 0 4
76632: PUSH
76633: LD_VAR 0 4
76637: PPUSH
76638: LD_VAR 0 4
76642: PUSH
76643: LD_INT 1
76645: PLUS
76646: PPUSH
76647: LD_VAR 0 5
76651: PUSH
76652: LD_VAR 0 6
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PPUSH
76661: CALL_OW 1
76665: ST_TO_ADDR
// end ;
76666: GO 76590
76668: POP
76669: POP
76670: GO 76570
76672: POP
76673: POP
// end ;
76674: LD_VAR 0 4
76678: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76679: LD_INT 0
76681: PPUSH
76682: PPUSH
76683: PPUSH
76684: PPUSH
76685: PPUSH
76686: PPUSH
76687: PPUSH
76688: PPUSH
// if not units then
76689: LD_VAR 0 1
76693: NOT
76694: IFFALSE 76698
// exit ;
76696: GO 77222
// result := UnitFilter ( units , [ f_ok ] ) ;
76698: LD_ADDR_VAR 0 3
76702: PUSH
76703: LD_VAR 0 1
76707: PPUSH
76708: LD_INT 50
76710: PUSH
76711: EMPTY
76712: LIST
76713: PPUSH
76714: CALL_OW 72
76718: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76719: LD_ADDR_VAR 0 8
76723: PUSH
76724: LD_VAR 0 1
76728: PUSH
76729: LD_INT 1
76731: ARRAY
76732: PPUSH
76733: CALL_OW 255
76737: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76738: LD_ADDR_VAR 0 10
76742: PUSH
76743: LD_INT 29
76745: PUSH
76746: LD_INT 91
76748: PUSH
76749: LD_INT 49
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: LIST
76756: ST_TO_ADDR
// if not result then
76757: LD_VAR 0 3
76761: NOT
76762: IFFALSE 76766
// exit ;
76764: GO 77222
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76766: LD_ADDR_VAR 0 5
76770: PUSH
76771: LD_INT 81
76773: PUSH
76774: LD_VAR 0 8
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PPUSH
76783: CALL_OW 69
76787: ST_TO_ADDR
// for i in result do
76788: LD_ADDR_VAR 0 4
76792: PUSH
76793: LD_VAR 0 3
76797: PUSH
76798: FOR_IN
76799: IFFALSE 77220
// begin tag := GetTag ( i ) + 1 ;
76801: LD_ADDR_VAR 0 9
76805: PUSH
76806: LD_VAR 0 4
76810: PPUSH
76811: CALL_OW 110
76815: PUSH
76816: LD_INT 1
76818: PLUS
76819: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76820: LD_ADDR_VAR 0 7
76824: PUSH
76825: LD_VAR 0 4
76829: PPUSH
76830: CALL_OW 250
76834: PPUSH
76835: LD_VAR 0 4
76839: PPUSH
76840: CALL_OW 251
76844: PPUSH
76845: LD_INT 6
76847: PPUSH
76848: CALL 76421 0 3
76852: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76853: LD_VAR 0 4
76857: PPUSH
76858: CALL_OW 247
76862: PUSH
76863: LD_INT 2
76865: EQUAL
76866: PUSH
76867: LD_VAR 0 7
76871: AND
76872: PUSH
76873: LD_VAR 0 4
76877: PPUSH
76878: CALL_OW 264
76882: PUSH
76883: LD_VAR 0 10
76887: IN
76888: NOT
76889: AND
76890: IFFALSE 76929
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76892: LD_VAR 0 4
76896: PPUSH
76897: LD_VAR 0 7
76901: PUSH
76902: LD_INT 1
76904: ARRAY
76905: PUSH
76906: LD_INT 1
76908: ARRAY
76909: PPUSH
76910: LD_VAR 0 7
76914: PUSH
76915: LD_INT 1
76917: ARRAY
76918: PUSH
76919: LD_INT 2
76921: ARRAY
76922: PPUSH
76923: CALL_OW 116
76927: GO 77218
// if path > tag then
76929: LD_VAR 0 2
76933: PUSH
76934: LD_VAR 0 9
76938: GREATER
76939: IFFALSE 77147
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76941: LD_ADDR_VAR 0 6
76945: PUSH
76946: LD_VAR 0 5
76950: PPUSH
76951: LD_INT 91
76953: PUSH
76954: LD_VAR 0 4
76958: PUSH
76959: LD_INT 8
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: LIST
76966: PPUSH
76967: CALL_OW 72
76971: ST_TO_ADDR
// if nearEnemy then
76972: LD_VAR 0 6
76976: IFFALSE 77045
// begin if GetWeapon ( i ) = ru_time_lapser then
76978: LD_VAR 0 4
76982: PPUSH
76983: CALL_OW 264
76987: PUSH
76988: LD_INT 49
76990: EQUAL
76991: IFFALSE 77019
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76993: LD_VAR 0 4
76997: PPUSH
76998: LD_VAR 0 6
77002: PPUSH
77003: LD_VAR 0 4
77007: PPUSH
77008: CALL_OW 74
77012: PPUSH
77013: CALL_OW 112
77017: GO 77043
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77019: LD_VAR 0 4
77023: PPUSH
77024: LD_VAR 0 6
77028: PPUSH
77029: LD_VAR 0 4
77033: PPUSH
77034: CALL_OW 74
77038: PPUSH
77039: CALL 78147 0 2
// end else
77043: GO 77145
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77045: LD_VAR 0 4
77049: PPUSH
77050: LD_VAR 0 2
77054: PUSH
77055: LD_VAR 0 9
77059: ARRAY
77060: PUSH
77061: LD_INT 1
77063: ARRAY
77064: PPUSH
77065: LD_VAR 0 2
77069: PUSH
77070: LD_VAR 0 9
77074: ARRAY
77075: PUSH
77076: LD_INT 2
77078: ARRAY
77079: PPUSH
77080: CALL_OW 297
77084: PUSH
77085: LD_INT 6
77087: GREATER
77088: IFFALSE 77131
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77090: LD_VAR 0 4
77094: PPUSH
77095: LD_VAR 0 2
77099: PUSH
77100: LD_VAR 0 9
77104: ARRAY
77105: PUSH
77106: LD_INT 1
77108: ARRAY
77109: PPUSH
77110: LD_VAR 0 2
77114: PUSH
77115: LD_VAR 0 9
77119: ARRAY
77120: PUSH
77121: LD_INT 2
77123: ARRAY
77124: PPUSH
77125: CALL_OW 114
77129: GO 77145
// SetTag ( i , tag ) ;
77131: LD_VAR 0 4
77135: PPUSH
77136: LD_VAR 0 9
77140: PPUSH
77141: CALL_OW 109
// end else
77145: GO 77218
// if enemy then
77147: LD_VAR 0 5
77151: IFFALSE 77218
// begin if GetWeapon ( i ) = ru_time_lapser then
77153: LD_VAR 0 4
77157: PPUSH
77158: CALL_OW 264
77162: PUSH
77163: LD_INT 49
77165: EQUAL
77166: IFFALSE 77194
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77168: LD_VAR 0 4
77172: PPUSH
77173: LD_VAR 0 5
77177: PPUSH
77178: LD_VAR 0 4
77182: PPUSH
77183: CALL_OW 74
77187: PPUSH
77188: CALL_OW 112
77192: GO 77218
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77194: LD_VAR 0 4
77198: PPUSH
77199: LD_VAR 0 5
77203: PPUSH
77204: LD_VAR 0 4
77208: PPUSH
77209: CALL_OW 74
77213: PPUSH
77214: CALL 78147 0 2
// end ; end ;
77218: GO 76798
77220: POP
77221: POP
// end ;
77222: LD_VAR 0 3
77226: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77227: LD_INT 0
77229: PPUSH
77230: PPUSH
77231: PPUSH
// if not unit or IsInUnit ( unit ) then
77232: LD_VAR 0 1
77236: NOT
77237: PUSH
77238: LD_VAR 0 1
77242: PPUSH
77243: CALL_OW 310
77247: OR
77248: IFFALSE 77252
// exit ;
77250: GO 77343
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77252: LD_ADDR_VAR 0 4
77256: PUSH
77257: LD_VAR 0 1
77261: PPUSH
77262: CALL_OW 250
77266: PPUSH
77267: LD_VAR 0 2
77271: PPUSH
77272: LD_INT 1
77274: PPUSH
77275: CALL_OW 272
77279: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77280: LD_ADDR_VAR 0 5
77284: PUSH
77285: LD_VAR 0 1
77289: PPUSH
77290: CALL_OW 251
77294: PPUSH
77295: LD_VAR 0 2
77299: PPUSH
77300: LD_INT 1
77302: PPUSH
77303: CALL_OW 273
77307: ST_TO_ADDR
// if ValidHex ( x , y ) then
77308: LD_VAR 0 4
77312: PPUSH
77313: LD_VAR 0 5
77317: PPUSH
77318: CALL_OW 488
77322: IFFALSE 77343
// ComTurnXY ( unit , x , y ) ;
77324: LD_VAR 0 1
77328: PPUSH
77329: LD_VAR 0 4
77333: PPUSH
77334: LD_VAR 0 5
77338: PPUSH
77339: CALL_OW 118
// end ;
77343: LD_VAR 0 3
77347: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77348: LD_INT 0
77350: PPUSH
77351: PPUSH
// result := false ;
77352: LD_ADDR_VAR 0 3
77356: PUSH
77357: LD_INT 0
77359: ST_TO_ADDR
// if not units then
77360: LD_VAR 0 2
77364: NOT
77365: IFFALSE 77369
// exit ;
77367: GO 77414
// for i in units do
77369: LD_ADDR_VAR 0 4
77373: PUSH
77374: LD_VAR 0 2
77378: PUSH
77379: FOR_IN
77380: IFFALSE 77412
// if See ( side , i ) then
77382: LD_VAR 0 1
77386: PPUSH
77387: LD_VAR 0 4
77391: PPUSH
77392: CALL_OW 292
77396: IFFALSE 77410
// begin result := true ;
77398: LD_ADDR_VAR 0 3
77402: PUSH
77403: LD_INT 1
77405: ST_TO_ADDR
// exit ;
77406: POP
77407: POP
77408: GO 77414
// end ;
77410: GO 77379
77412: POP
77413: POP
// end ;
77414: LD_VAR 0 3
77418: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77419: LD_INT 0
77421: PPUSH
77422: PPUSH
77423: PPUSH
77424: PPUSH
// if not unit or not points then
77425: LD_VAR 0 1
77429: NOT
77430: PUSH
77431: LD_VAR 0 2
77435: NOT
77436: OR
77437: IFFALSE 77441
// exit ;
77439: GO 77531
// dist := 99999 ;
77441: LD_ADDR_VAR 0 5
77445: PUSH
77446: LD_INT 99999
77448: ST_TO_ADDR
// for i in points do
77449: LD_ADDR_VAR 0 4
77453: PUSH
77454: LD_VAR 0 2
77458: PUSH
77459: FOR_IN
77460: IFFALSE 77529
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77462: LD_ADDR_VAR 0 6
77466: PUSH
77467: LD_VAR 0 1
77471: PPUSH
77472: LD_VAR 0 4
77476: PUSH
77477: LD_INT 1
77479: ARRAY
77480: PPUSH
77481: LD_VAR 0 4
77485: PUSH
77486: LD_INT 2
77488: ARRAY
77489: PPUSH
77490: CALL_OW 297
77494: ST_TO_ADDR
// if tmpDist < dist then
77495: LD_VAR 0 6
77499: PUSH
77500: LD_VAR 0 5
77504: LESS
77505: IFFALSE 77527
// begin result := i ;
77507: LD_ADDR_VAR 0 3
77511: PUSH
77512: LD_VAR 0 4
77516: ST_TO_ADDR
// dist := tmpDist ;
77517: LD_ADDR_VAR 0 5
77521: PUSH
77522: LD_VAR 0 6
77526: ST_TO_ADDR
// end ; end ;
77527: GO 77459
77529: POP
77530: POP
// end ;
77531: LD_VAR 0 3
77535: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77536: LD_INT 0
77538: PPUSH
// uc_side := side ;
77539: LD_ADDR_OWVAR 20
77543: PUSH
77544: LD_VAR 0 1
77548: ST_TO_ADDR
// uc_nation := 3 ;
77549: LD_ADDR_OWVAR 21
77553: PUSH
77554: LD_INT 3
77556: ST_TO_ADDR
// vc_chassis := 25 ;
77557: LD_ADDR_OWVAR 37
77561: PUSH
77562: LD_INT 25
77564: ST_TO_ADDR
// vc_engine := engine_siberite ;
77565: LD_ADDR_OWVAR 39
77569: PUSH
77570: LD_INT 3
77572: ST_TO_ADDR
// vc_control := control_computer ;
77573: LD_ADDR_OWVAR 38
77577: PUSH
77578: LD_INT 3
77580: ST_TO_ADDR
// vc_weapon := 59 ;
77581: LD_ADDR_OWVAR 40
77585: PUSH
77586: LD_INT 59
77588: ST_TO_ADDR
// result := CreateVehicle ;
77589: LD_ADDR_VAR 0 5
77593: PUSH
77594: CALL_OW 45
77598: ST_TO_ADDR
// SetDir ( result , d ) ;
77599: LD_VAR 0 5
77603: PPUSH
77604: LD_VAR 0 4
77608: PPUSH
77609: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77613: LD_VAR 0 5
77617: PPUSH
77618: LD_VAR 0 2
77622: PPUSH
77623: LD_VAR 0 3
77627: PPUSH
77628: LD_INT 0
77630: PPUSH
77631: CALL_OW 48
// end ;
77635: LD_VAR 0 5
77639: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77640: LD_INT 0
77642: PPUSH
77643: PPUSH
77644: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77645: LD_ADDR_VAR 0 2
77649: PUSH
77650: LD_INT 0
77652: PUSH
77653: LD_INT 0
77655: PUSH
77656: LD_INT 0
77658: PUSH
77659: LD_INT 0
77661: PUSH
77662: EMPTY
77663: LIST
77664: LIST
77665: LIST
77666: LIST
77667: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77668: LD_VAR 0 1
77672: NOT
77673: PUSH
77674: LD_VAR 0 1
77678: PPUSH
77679: CALL_OW 264
77683: PUSH
77684: LD_INT 12
77686: PUSH
77687: LD_INT 51
77689: PUSH
77690: LD_INT 32
77692: PUSH
77693: LD_INT 89
77695: PUSH
77696: EMPTY
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: IN
77702: NOT
77703: OR
77704: IFFALSE 77708
// exit ;
77706: GO 77806
// for i := 1 to 3 do
77708: LD_ADDR_VAR 0 3
77712: PUSH
77713: DOUBLE
77714: LD_INT 1
77716: DEC
77717: ST_TO_ADDR
77718: LD_INT 3
77720: PUSH
77721: FOR_TO
77722: IFFALSE 77804
// begin tmp := GetCargo ( cargo , i ) ;
77724: LD_ADDR_VAR 0 4
77728: PUSH
77729: LD_VAR 0 1
77733: PPUSH
77734: LD_VAR 0 3
77738: PPUSH
77739: CALL_OW 289
77743: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77744: LD_ADDR_VAR 0 2
77748: PUSH
77749: LD_VAR 0 2
77753: PPUSH
77754: LD_VAR 0 3
77758: PPUSH
77759: LD_VAR 0 4
77763: PPUSH
77764: CALL_OW 1
77768: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77769: LD_ADDR_VAR 0 2
77773: PUSH
77774: LD_VAR 0 2
77778: PPUSH
77779: LD_INT 4
77781: PPUSH
77782: LD_VAR 0 2
77786: PUSH
77787: LD_INT 4
77789: ARRAY
77790: PUSH
77791: LD_VAR 0 4
77795: PLUS
77796: PPUSH
77797: CALL_OW 1
77801: ST_TO_ADDR
// end ;
77802: GO 77721
77804: POP
77805: POP
// end ;
77806: LD_VAR 0 2
77810: RET
// export function Length ( array ) ; begin
77811: LD_INT 0
77813: PPUSH
// result := array + 0 ;
77814: LD_ADDR_VAR 0 2
77818: PUSH
77819: LD_VAR 0 1
77823: PUSH
77824: LD_INT 0
77826: PLUS
77827: ST_TO_ADDR
// end ;
77828: LD_VAR 0 2
77832: RET
// export function PrepareArray ( array ) ; begin
77833: LD_INT 0
77835: PPUSH
// result := array diff 0 ;
77836: LD_ADDR_VAR 0 2
77840: PUSH
77841: LD_VAR 0 1
77845: PUSH
77846: LD_INT 0
77848: DIFF
77849: ST_TO_ADDR
// if not result [ 1 ] then
77850: LD_VAR 0 2
77854: PUSH
77855: LD_INT 1
77857: ARRAY
77858: NOT
77859: IFFALSE 77879
// result := Delete ( result , 1 ) ;
77861: LD_ADDR_VAR 0 2
77865: PUSH
77866: LD_VAR 0 2
77870: PPUSH
77871: LD_INT 1
77873: PPUSH
77874: CALL_OW 3
77878: ST_TO_ADDR
// end ;
77879: LD_VAR 0 2
77883: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77884: LD_INT 0
77886: PPUSH
77887: PPUSH
77888: PPUSH
77889: PPUSH
// sibRocketRange := 25 ;
77890: LD_ADDR_VAR 0 6
77894: PUSH
77895: LD_INT 25
77897: ST_TO_ADDR
// result := false ;
77898: LD_ADDR_VAR 0 4
77902: PUSH
77903: LD_INT 0
77905: ST_TO_ADDR
// for i := 0 to 5 do
77906: LD_ADDR_VAR 0 5
77910: PUSH
77911: DOUBLE
77912: LD_INT 0
77914: DEC
77915: ST_TO_ADDR
77916: LD_INT 5
77918: PUSH
77919: FOR_TO
77920: IFFALSE 77987
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77922: LD_VAR 0 1
77926: PPUSH
77927: LD_VAR 0 5
77931: PPUSH
77932: LD_VAR 0 6
77936: PPUSH
77937: CALL_OW 272
77941: PPUSH
77942: LD_VAR 0 2
77946: PPUSH
77947: LD_VAR 0 5
77951: PPUSH
77952: LD_VAR 0 6
77956: PPUSH
77957: CALL_OW 273
77961: PPUSH
77962: LD_VAR 0 3
77966: PPUSH
77967: CALL_OW 309
77971: IFFALSE 77985
// begin result := true ;
77973: LD_ADDR_VAR 0 4
77977: PUSH
77978: LD_INT 1
77980: ST_TO_ADDR
// exit ;
77981: POP
77982: POP
77983: GO 77989
// end ;
77985: GO 77919
77987: POP
77988: POP
// end ;
77989: LD_VAR 0 4
77993: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77994: LD_INT 0
77996: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77997: LD_VAR 0 1
78001: PPUSH
78002: LD_VAR 0 2
78006: PPUSH
78007: LD_INT 0
78009: PPUSH
78010: LD_INT 0
78012: PPUSH
78013: LD_INT 1
78015: PPUSH
78016: LD_INT 0
78018: PPUSH
78019: CALL_OW 587
// end ;
78023: LD_VAR 0 3
78027: RET
// export function CenterOnNow ( unit ) ; begin
78028: LD_INT 0
78030: PPUSH
// result := IsInUnit ( unit ) ;
78031: LD_ADDR_VAR 0 2
78035: PUSH
78036: LD_VAR 0 1
78040: PPUSH
78041: CALL_OW 310
78045: ST_TO_ADDR
// if not result then
78046: LD_VAR 0 2
78050: NOT
78051: IFFALSE 78063
// result := unit ;
78053: LD_ADDR_VAR 0 2
78057: PUSH
78058: LD_VAR 0 1
78062: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78063: LD_VAR 0 1
78067: PPUSH
78068: CALL_OW 87
// end ;
78072: LD_VAR 0 2
78076: RET
// export function ComMoveHex ( unit , hex ) ; begin
78077: LD_INT 0
78079: PPUSH
// if not hex then
78080: LD_VAR 0 2
78084: NOT
78085: IFFALSE 78089
// exit ;
78087: GO 78142
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78089: LD_VAR 0 2
78093: PUSH
78094: LD_INT 1
78096: ARRAY
78097: PPUSH
78098: LD_VAR 0 2
78102: PUSH
78103: LD_INT 2
78105: ARRAY
78106: PPUSH
78107: CALL_OW 428
78111: IFFALSE 78115
// exit ;
78113: GO 78142
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78115: LD_VAR 0 1
78119: PPUSH
78120: LD_VAR 0 2
78124: PUSH
78125: LD_INT 1
78127: ARRAY
78128: PPUSH
78129: LD_VAR 0 2
78133: PUSH
78134: LD_INT 2
78136: ARRAY
78137: PPUSH
78138: CALL_OW 111
// end ;
78142: LD_VAR 0 3
78146: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78147: LD_INT 0
78149: PPUSH
78150: PPUSH
78151: PPUSH
// if not unit or not enemy then
78152: LD_VAR 0 1
78156: NOT
78157: PUSH
78158: LD_VAR 0 2
78162: NOT
78163: OR
78164: IFFALSE 78168
// exit ;
78166: GO 78292
// x := GetX ( enemy ) ;
78168: LD_ADDR_VAR 0 4
78172: PUSH
78173: LD_VAR 0 2
78177: PPUSH
78178: CALL_OW 250
78182: ST_TO_ADDR
// y := GetY ( enemy ) ;
78183: LD_ADDR_VAR 0 5
78187: PUSH
78188: LD_VAR 0 2
78192: PPUSH
78193: CALL_OW 251
78197: ST_TO_ADDR
// if ValidHex ( x , y ) then
78198: LD_VAR 0 4
78202: PPUSH
78203: LD_VAR 0 5
78207: PPUSH
78208: CALL_OW 488
78212: IFFALSE 78292
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
78214: LD_VAR 0 2
78218: PPUSH
78219: CALL_OW 247
78223: PUSH
78224: LD_INT 3
78226: PUSH
78227: LD_INT 2
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: IN
78234: PUSH
78235: LD_VAR 0 1
78239: PPUSH
78240: CALL_OW 255
78244: PPUSH
78245: LD_VAR 0 2
78249: PPUSH
78250: CALL_OW 292
78254: AND
78255: IFFALSE 78273
// ComAttackUnit ( unit , enemy ) else
78257: LD_VAR 0 1
78261: PPUSH
78262: LD_VAR 0 2
78266: PPUSH
78267: CALL_OW 115
78271: GO 78292
// ComAgressiveMove ( unit , x , y ) ;
78273: LD_VAR 0 1
78277: PPUSH
78278: LD_VAR 0 4
78282: PPUSH
78283: LD_VAR 0 5
78287: PPUSH
78288: CALL_OW 114
// end ;
78292: LD_VAR 0 3
78296: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78297: LD_INT 0
78299: PPUSH
78300: PPUSH
78301: PPUSH
// list := AreaToList ( area , 0 ) ;
78302: LD_ADDR_VAR 0 5
78306: PUSH
78307: LD_VAR 0 1
78311: PPUSH
78312: LD_INT 0
78314: PPUSH
78315: CALL_OW 517
78319: ST_TO_ADDR
// if not list then
78320: LD_VAR 0 5
78324: NOT
78325: IFFALSE 78329
// exit ;
78327: GO 78459
// if all then
78329: LD_VAR 0 2
78333: IFFALSE 78421
// begin for i := 1 to list [ 1 ] do
78335: LD_ADDR_VAR 0 4
78339: PUSH
78340: DOUBLE
78341: LD_INT 1
78343: DEC
78344: ST_TO_ADDR
78345: LD_VAR 0 5
78349: PUSH
78350: LD_INT 1
78352: ARRAY
78353: PUSH
78354: FOR_TO
78355: IFFALSE 78417
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78357: LD_ADDR_VAR 0 3
78361: PUSH
78362: LD_VAR 0 3
78366: PPUSH
78367: LD_VAR 0 3
78371: PUSH
78372: LD_INT 1
78374: PLUS
78375: PPUSH
78376: LD_VAR 0 5
78380: PUSH
78381: LD_INT 1
78383: ARRAY
78384: PUSH
78385: LD_VAR 0 4
78389: ARRAY
78390: PUSH
78391: LD_VAR 0 5
78395: PUSH
78396: LD_INT 2
78398: ARRAY
78399: PUSH
78400: LD_VAR 0 4
78404: ARRAY
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PPUSH
78410: CALL_OW 1
78414: ST_TO_ADDR
78415: GO 78354
78417: POP
78418: POP
// exit ;
78419: GO 78459
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78421: LD_ADDR_VAR 0 3
78425: PUSH
78426: LD_VAR 0 5
78430: PUSH
78431: LD_INT 1
78433: ARRAY
78434: PUSH
78435: LD_INT 1
78437: ARRAY
78438: PUSH
78439: LD_VAR 0 5
78443: PUSH
78444: LD_INT 2
78446: ARRAY
78447: PUSH
78448: LD_INT 1
78450: ARRAY
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: PUSH
78456: EMPTY
78457: LIST
78458: ST_TO_ADDR
// end ;
78459: LD_VAR 0 3
78463: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78464: LD_INT 0
78466: PPUSH
78467: PPUSH
// list := AreaToList ( area , 0 ) ;
78468: LD_ADDR_VAR 0 4
78472: PUSH
78473: LD_VAR 0 1
78477: PPUSH
78478: LD_INT 0
78480: PPUSH
78481: CALL_OW 517
78485: ST_TO_ADDR
// if not list then
78486: LD_VAR 0 4
78490: NOT
78491: IFFALSE 78495
// exit ;
78493: GO 78536
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78495: LD_ADDR_VAR 0 3
78499: PUSH
78500: LD_VAR 0 4
78504: PUSH
78505: LD_INT 1
78507: ARRAY
78508: PUSH
78509: LD_INT 1
78511: ARRAY
78512: PUSH
78513: LD_VAR 0 4
78517: PUSH
78518: LD_INT 2
78520: ARRAY
78521: PUSH
78522: LD_INT 1
78524: ARRAY
78525: PUSH
78526: LD_VAR 0 2
78530: PUSH
78531: EMPTY
78532: LIST
78533: LIST
78534: LIST
78535: ST_TO_ADDR
// end ;
78536: LD_VAR 0 3
78540: RET
// export function First ( array ) ; begin
78541: LD_INT 0
78543: PPUSH
// if not array then
78544: LD_VAR 0 1
78548: NOT
78549: IFFALSE 78553
// exit ;
78551: GO 78567
// result := array [ 1 ] ;
78553: LD_ADDR_VAR 0 2
78557: PUSH
78558: LD_VAR 0 1
78562: PUSH
78563: LD_INT 1
78565: ARRAY
78566: ST_TO_ADDR
// end ;
78567: LD_VAR 0 2
78571: RET
// export function Last ( array ) ; begin
78572: LD_INT 0
78574: PPUSH
// if not array then
78575: LD_VAR 0 1
78579: NOT
78580: IFFALSE 78584
// exit ;
78582: GO 78600
// result := array [ array ] ;
78584: LD_ADDR_VAR 0 2
78588: PUSH
78589: LD_VAR 0 1
78593: PUSH
78594: LD_VAR 0 1
78598: ARRAY
78599: ST_TO_ADDR
// end ;
78600: LD_VAR 0 2
78604: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78605: LD_INT 0
78607: PPUSH
78608: PPUSH
// result := [ ] ;
78609: LD_ADDR_VAR 0 5
78613: PUSH
78614: EMPTY
78615: ST_TO_ADDR
// if not array then
78616: LD_VAR 0 1
78620: NOT
78621: IFFALSE 78625
// exit ;
78623: GO 78737
// for i := 1 to array do
78625: LD_ADDR_VAR 0 6
78629: PUSH
78630: DOUBLE
78631: LD_INT 1
78633: DEC
78634: ST_TO_ADDR
78635: LD_VAR 0 1
78639: PUSH
78640: FOR_TO
78641: IFFALSE 78735
// if array [ i ] [ index ] = value then
78643: LD_VAR 0 1
78647: PUSH
78648: LD_VAR 0 6
78652: ARRAY
78653: PUSH
78654: LD_VAR 0 2
78658: ARRAY
78659: PUSH
78660: LD_VAR 0 3
78664: EQUAL
78665: IFFALSE 78733
// begin if indexColumn then
78667: LD_VAR 0 4
78671: IFFALSE 78707
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78673: LD_ADDR_VAR 0 5
78677: PUSH
78678: LD_VAR 0 5
78682: PPUSH
78683: LD_VAR 0 1
78687: PUSH
78688: LD_VAR 0 6
78692: ARRAY
78693: PUSH
78694: LD_VAR 0 4
78698: ARRAY
78699: PPUSH
78700: CALL 74075 0 2
78704: ST_TO_ADDR
78705: GO 78733
// result := Join ( result , array [ i ] ) ;
78707: LD_ADDR_VAR 0 5
78711: PUSH
78712: LD_VAR 0 5
78716: PPUSH
78717: LD_VAR 0 1
78721: PUSH
78722: LD_VAR 0 6
78726: ARRAY
78727: PPUSH
78728: CALL 74075 0 2
78732: ST_TO_ADDR
// end ;
78733: GO 78640
78735: POP
78736: POP
// end ;
78737: LD_VAR 0 5
78741: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
78742: LD_INT 0
78744: PPUSH
78745: PPUSH
78746: PPUSH
// if btype = b_depot then
78747: LD_VAR 0 2
78751: PUSH
78752: LD_INT 0
78754: EQUAL
78755: IFFALSE 78767
// begin result := true ;
78757: LD_ADDR_VAR 0 3
78761: PUSH
78762: LD_INT 1
78764: ST_TO_ADDR
// exit ;
78765: GO 78883
// end ; pom := GetBase ( depot ) ;
78767: LD_ADDR_VAR 0 4
78771: PUSH
78772: LD_VAR 0 1
78776: PPUSH
78777: CALL_OW 274
78781: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
78782: LD_ADDR_VAR 0 5
78786: PUSH
78787: LD_VAR 0 2
78791: PPUSH
78792: LD_VAR 0 1
78796: PPUSH
78797: CALL_OW 248
78801: PPUSH
78802: CALL_OW 450
78806: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
78807: LD_ADDR_VAR 0 3
78811: PUSH
78812: LD_VAR 0 4
78816: PPUSH
78817: LD_INT 1
78819: PPUSH
78820: CALL_OW 275
78824: PUSH
78825: LD_VAR 0 5
78829: PUSH
78830: LD_INT 1
78832: ARRAY
78833: GREATEREQUAL
78834: PUSH
78835: LD_VAR 0 4
78839: PPUSH
78840: LD_INT 2
78842: PPUSH
78843: CALL_OW 275
78847: PUSH
78848: LD_VAR 0 5
78852: PUSH
78853: LD_INT 2
78855: ARRAY
78856: GREATEREQUAL
78857: AND
78858: PUSH
78859: LD_VAR 0 4
78863: PPUSH
78864: LD_INT 3
78866: PPUSH
78867: CALL_OW 275
78871: PUSH
78872: LD_VAR 0 5
78876: PUSH
78877: LD_INT 3
78879: ARRAY
78880: GREATEREQUAL
78881: AND
78882: ST_TO_ADDR
// end ;
78883: LD_VAR 0 3
78887: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78888: LD_INT 0
78890: PPUSH
// if not vehicles or not parkingPoint then
78891: LD_VAR 0 1
78895: NOT
78896: PUSH
78897: LD_VAR 0 2
78901: NOT
78902: OR
78903: IFFALSE 78907
// exit ;
78905: GO 79005
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78907: LD_ADDR_VAR 0 1
78911: PUSH
78912: LD_VAR 0 1
78916: PPUSH
78917: LD_INT 50
78919: PUSH
78920: EMPTY
78921: LIST
78922: PUSH
78923: LD_INT 3
78925: PUSH
78926: LD_INT 92
78928: PUSH
78929: LD_VAR 0 2
78933: PUSH
78934: LD_INT 1
78936: ARRAY
78937: PUSH
78938: LD_VAR 0 2
78942: PUSH
78943: LD_INT 2
78945: ARRAY
78946: PUSH
78947: LD_INT 8
78949: PUSH
78950: EMPTY
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PUSH
78960: EMPTY
78961: LIST
78962: LIST
78963: PPUSH
78964: CALL_OW 72
78968: ST_TO_ADDR
// if not vehicles then
78969: LD_VAR 0 1
78973: NOT
78974: IFFALSE 78978
// exit ;
78976: GO 79005
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78978: LD_VAR 0 1
78982: PPUSH
78983: LD_VAR 0 2
78987: PUSH
78988: LD_INT 1
78990: ARRAY
78991: PPUSH
78992: LD_VAR 0 2
78996: PUSH
78997: LD_INT 2
78999: ARRAY
79000: PPUSH
79001: CALL_OW 111
// end ; end_of_file
79005: LD_VAR 0 3
79009: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79010: LD_VAR 0 1
79014: PUSH
79015: LD_INT 200
79017: DOUBLE
79018: GREATEREQUAL
79019: IFFALSE 79027
79021: LD_INT 299
79023: DOUBLE
79024: LESSEQUAL
79025: IFTRUE 79029
79027: GO 79061
79029: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79030: LD_VAR 0 1
79034: PPUSH
79035: LD_VAR 0 2
79039: PPUSH
79040: LD_VAR 0 3
79044: PPUSH
79045: LD_VAR 0 4
79049: PPUSH
79050: LD_VAR 0 5
79054: PPUSH
79055: CALL 31866 0 5
79059: GO 79138
79061: LD_INT 300
79063: DOUBLE
79064: GREATEREQUAL
79065: IFFALSE 79073
79067: LD_INT 399
79069: DOUBLE
79070: LESSEQUAL
79071: IFTRUE 79075
79073: GO 79137
79075: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79076: LD_VAR 0 1
79080: PPUSH
79081: LD_VAR 0 2
79085: PPUSH
79086: LD_VAR 0 3
79090: PPUSH
79091: LD_VAR 0 4
79095: PPUSH
79096: LD_VAR 0 5
79100: PPUSH
79101: LD_VAR 0 6
79105: PPUSH
79106: LD_VAR 0 7
79110: PPUSH
79111: LD_VAR 0 8
79115: PPUSH
79116: LD_VAR 0 9
79120: PPUSH
79121: LD_VAR 0 10
79125: PPUSH
79126: LD_VAR 0 11
79130: PPUSH
79131: CALL 28191 0 11
79135: GO 79138
79137: POP
// end ;
79138: PPOPN 11
79140: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79141: LD_VAR 0 1
79145: PPUSH
79146: LD_VAR 0 2
79150: PPUSH
79151: LD_VAR 0 3
79155: PPUSH
79156: LD_VAR 0 4
79160: PPUSH
79161: LD_VAR 0 5
79165: PPUSH
79166: CALL 31602 0 5
// end ; end_of_file
79170: PPOPN 5
79172: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79173: LD_VAR 0 1
79177: PPUSH
79178: LD_VAR 0 2
79182: PPUSH
79183: LD_VAR 0 3
79187: PPUSH
79188: LD_VAR 0 4
79192: PPUSH
79193: LD_VAR 0 5
79197: PPUSH
79198: LD_VAR 0 6
79202: PPUSH
79203: CALL 15843 0 6
// end ;
79207: PPOPN 6
79209: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79210: LD_INT 0
79212: PPUSH
// begin if not units then
79213: LD_VAR 0 1
79217: NOT
79218: IFFALSE 79222
// exit ;
79220: GO 79222
// end ;
79222: PPOPN 7
79224: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79225: CALL 15747 0 0
// end ;
79229: PPOPN 1
79231: END
