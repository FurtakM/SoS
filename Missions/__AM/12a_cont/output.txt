// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9269 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9605 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 35318 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 40333 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 40333 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 40333 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 40333 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 40333 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 37953 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 40333 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 40333 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 40333 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 35318 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 35318 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 35318 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 35318 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 35318 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 35318 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 35318 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 35318 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 35318 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 35318 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 35318 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 35318 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 35318 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 35318 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 35318 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4423: LD_ADDR_EXP 38
4427: PUSH
4428: LD_STRING Mike
4430: PPUSH
4431: LD_EXP 1
4435: NOT
4436: PPUSH
4437: LD_STRING 10c_
4439: PPUSH
4440: CALL 35318 0 3
4444: ST_TO_ADDR
// if Mike then
4445: LD_EXP 38
4449: IFFALSE 4490
// begin SetClass ( Mike , class_apeman_engineer ) ;
4451: LD_EXP 38
4455: PPUSH
4456: LD_INT 16
4458: PPUSH
4459: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4463: LD_EXP 38
4467: PPUSH
4468: LD_INT 180
4470: PPUSH
4471: LD_INT 87
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: CALL_OW 48
// ComHold ( Mike ) ;
4481: LD_EXP 38
4485: PPUSH
4486: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4490: LD_ADDR_EXP 4
4494: PUSH
4495: LD_EXP 4
4499: PUSH
4500: LD_STRING 11c_others
4502: PPUSH
4503: CALL_OW 31
4507: ADD
4508: PUSH
4509: LD_STRING 11_others
4511: PPUSH
4512: CALL_OW 31
4516: ADD
4517: ST_TO_ADDR
// if friends < 18 then
4518: LD_EXP 4
4522: PUSH
4523: LD_INT 18
4525: LESS
4526: IFFALSE 4598
// for i = 1 to 18 do
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: DOUBLE
4534: LD_INT 1
4536: DEC
4537: ST_TO_ADDR
4538: LD_INT 18
4540: PUSH
4541: FOR_TO
4542: IFFALSE 4596
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4544: LD_INT 0
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 4
4552: PPUSH
4553: CALL_OW 12
4557: PPUSH
4558: LD_INT 7
4560: PPUSH
4561: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4565: LD_ADDR_EXP 4
4569: PUSH
4570: LD_EXP 4
4574: PPUSH
4575: LD_EXP 4
4579: PUSH
4580: LD_INT 1
4582: PLUS
4583: PPUSH
4584: CALL_OW 44
4588: PPUSH
4589: CALL_OW 2
4593: ST_TO_ADDR
// end ;
4594: GO 4541
4596: POP
4597: POP
// for i in friends do
4598: LD_ADDR_VAR 0 2
4602: PUSH
4603: LD_EXP 4
4607: PUSH
4608: FOR_IN
4609: IFFALSE 4682
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4611: LD_VAR 0 2
4615: PPUSH
4616: CALL_OW 248
4620: PUSH
4621: LD_INT 1
4623: EQUAL
4624: PUSH
4625: LD_VAR 0 2
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: CALL_OW 259
4637: PUSH
4638: LD_VAR 0 2
4642: PPUSH
4643: LD_INT 4
4645: PPUSH
4646: CALL_OW 259
4650: GREATEREQUAL
4651: AND
4652: IFFALSE 4668
// SetClass ( i , class_soldier ) else
4654: LD_VAR 0 2
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: CALL_OW 336
4666: GO 4680
// SetClass ( i , class_scientistic ) ;
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: CALL_OW 336
4680: GO 4608
4682: POP
4683: POP
// if Frank then
4684: LD_EXP 33
4688: IFFALSE 4702
// SetClass ( Frank , class_sniper ) ;
4690: LD_EXP 33
4694: PPUSH
4695: LD_INT 5
4697: PPUSH
4698: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4702: LD_EXP 36
4706: PUSH
4707: LD_EXP 27
4711: PUSH
4712: LD_EXP 37
4716: PUSH
4717: LD_EXP 35
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4735: LD_ADDR_EXP 3
4739: PUSH
4740: LD_STRING 
4742: PPUSH
4743: LD_INT 7
4745: PPUSH
4746: LD_INT 7
4748: PPUSH
4749: LD_INT -6
4751: PUSH
4752: LD_EXP 14
4756: PUSH
4757: LD_EXP 15
4761: PUSH
4762: LD_EXP 35
4766: PUSH
4767: LD_EXP 27
4771: PUSH
4772: LD_EXP 37
4776: PUSH
4777: LD_INT -2
4779: PUSH
4780: LD_INT -3
4782: PUSH
4783: LD_INT -5
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: PUSH
4797: LD_EXP 4
4801: ADD
4802: PPUSH
4803: LD_INT 1
4805: PUSH
4806: LD_INT 4
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 5
4818: PUSH
4819: LD_INT 0
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: PPUSH
4835: CALL_OW 42
4839: ST_TO_ADDR
// if Simms then
4840: LD_EXP 35
4844: IFFALSE 4862
// selected := selected ^ Simms ;
4846: LD_ADDR_EXP 3
4850: PUSH
4851: LD_EXP 3
4855: PUSH
4856: LD_EXP 35
4860: ADD
4861: ST_TO_ADDR
// if Denis then
4862: LD_EXP 27
4866: IFFALSE 4884
// selected := selected ^ Denis ;
4868: LD_ADDR_EXP 3
4872: PUSH
4873: LD_EXP 3
4877: PUSH
4878: LD_EXP 27
4882: ADD
4883: ST_TO_ADDR
// if DeltaDoctor then
4884: LD_EXP 37
4888: IFFALSE 4906
// selected := selected ^ DeltaDoctor ;
4890: LD_ADDR_EXP 3
4894: PUSH
4895: LD_EXP 3
4899: PUSH
4900: LD_EXP 37
4904: ADD
4905: ST_TO_ADDR
// friends := friends diff selected ;
4906: LD_ADDR_EXP 4
4910: PUSH
4911: LD_EXP 4
4915: PUSH
4916: LD_EXP 3
4920: DIFF
4921: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_INT 111
4929: PUSH
4930: LD_INT 137
4932: PUSH
4933: LD_INT 51
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: LD_INT 147
4943: PUSH
4944: LD_INT 129
4946: PUSH
4947: LD_INT 25
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: LIST
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4959: LD_ADDR_VAR 0 5
4963: PUSH
4964: LD_INT 5
4966: PUSH
4967: LD_INT 6
4969: PUSH
4970: LD_INT 7
4972: PUSH
4973: LD_INT 8
4975: PUSH
4976: LD_INT 17
4978: PUSH
4979: LD_INT 18
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: ST_TO_ADDR
// for i in buildings do
4990: LD_ADDR_VAR 0 2
4994: PUSH
4995: LD_VAR 0 4
4999: PUSH
5000: FOR_IN
5001: IFFALSE 5017
// SetSide ( i , 4 ) ;
5003: LD_VAR 0 2
5007: PPUSH
5008: LD_INT 4
5010: PPUSH
5011: CALL_OW 235
5015: GO 5000
5017: POP
5018: POP
// for i in selected do
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_EXP 3
5028: PUSH
5029: FOR_IN
5030: IFFALSE 5370
// begin if GetClass ( i ) in [ 1 , 5 ] then
5032: LD_VAR 0 2
5036: PPUSH
5037: CALL_OW 257
5041: PUSH
5042: LD_INT 1
5044: PUSH
5045: LD_INT 5
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: IN
5052: IFFALSE 5212
// begin if buildings [ 1 ] then
5054: LD_VAR 0 4
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: IFFALSE 5123
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5064: LD_VAR 0 2
5068: PPUSH
5069: LD_VAR 0 4
5073: PUSH
5074: LD_INT 1
5076: ARRAY
5077: PUSH
5078: LD_INT 1
5080: ARRAY
5081: PPUSH
5082: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5086: LD_ADDR_VAR 0 4
5090: PUSH
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: LD_VAR 0 4
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL_OW 3
5115: PPUSH
5116: CALL_OW 1
5120: ST_TO_ADDR
// end else
5121: GO 5210
// begin if not areas then
5123: LD_VAR 0 5
5127: NOT
5128: IFFALSE 5162
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5130: LD_VAR 0 2
5134: PPUSH
5135: LD_INT 87
5137: PPUSH
5138: LD_INT 68
5140: PPUSH
5141: LD_INT 8
5143: PPUSH
5144: LD_INT 0
5146: PPUSH
5147: CALL_OW 50
// ComHold ( i ) ;
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL_OW 140
// end else
5160: GO 5210
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_VAR 0 5
5171: PUSH
5172: LD_INT 1
5174: ARRAY
5175: PPUSH
5176: LD_INT 0
5178: PPUSH
5179: CALL_OW 49
// ComHold ( i ) ;
5183: LD_VAR 0 2
5187: PPUSH
5188: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5192: LD_ADDR_VAR 0 5
5196: PUSH
5197: LD_VAR 0 5
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: CALL_OW 3
5209: ST_TO_ADDR
// end ; end ; end else
5210: GO 5368
// begin if buildings [ 2 ] then
5212: LD_VAR 0 4
5216: PUSH
5217: LD_INT 2
5219: ARRAY
5220: IFFALSE 5281
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: ARRAY
5235: PUSH
5236: LD_INT 1
5238: ARRAY
5239: PPUSH
5240: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5244: LD_ADDR_VAR 0 4
5248: PUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: LD_INT 2
5256: PPUSH
5257: LD_VAR 0 4
5261: PUSH
5262: LD_INT 2
5264: ARRAY
5265: PPUSH
5266: LD_INT 1
5268: PPUSH
5269: CALL_OW 3
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// end else
5279: GO 5368
// begin if not areas then
5281: LD_VAR 0 5
5285: NOT
5286: IFFALSE 5320
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5288: LD_VAR 0 2
5292: PPUSH
5293: LD_INT 87
5295: PPUSH
5296: LD_INT 68
5298: PPUSH
5299: LD_INT 8
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 50
// ComHold ( i ) ;
5309: LD_VAR 0 2
5313: PPUSH
5314: CALL_OW 140
// end else
5318: GO 5368
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5320: LD_VAR 0 2
5324: PPUSH
5325: LD_VAR 0 5
5329: PUSH
5330: LD_INT 1
5332: ARRAY
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: CALL_OW 49
// ComHold ( i ) ;
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5350: LD_ADDR_VAR 0 5
5354: PUSH
5355: LD_VAR 0 5
5359: PPUSH
5360: LD_INT 1
5362: PPUSH
5363: CALL_OW 3
5367: ST_TO_ADDR
// end ; end ; end ; end ;
5368: GO 5029
5370: POP
5371: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5372: LD_ADDR_VAR 0 6
5376: PUSH
5377: LD_INT 22
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 30
5389: PUSH
5390: LD_INT 32
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5406: LD_ADDR_VAR 0 2
5410: PUSH
5411: DOUBLE
5412: LD_VAR 0 6
5416: PUSH
5417: LD_EXP 4
5421: MINUS
5422: INC
5423: ST_TO_ADDR
5424: LD_INT 1
5426: PUSH
5427: FOR_DOWNTO
5428: IFFALSE 5495
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5430: LD_INT 0
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: LD_INT 7
5438: PUSH
5439: LD_INT 8
5441: PUSH
5442: LD_INT 9
5444: PUSH
5445: LD_INT 10
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: PUSH
5454: LD_OWVAR 67
5458: ARRAY
5459: PPUSH
5460: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5464: LD_ADDR_EXP 4
5468: PUSH
5469: LD_EXP 4
5473: PPUSH
5474: LD_EXP 4
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: CALL_OW 44
5487: PPUSH
5488: CALL_OW 2
5492: ST_TO_ADDR
// end ;
5493: GO 5427
5495: POP
5496: POP
// if friends then
5497: LD_EXP 4
5501: IFFALSE 5617
// begin tmp := friends ;
5503: LD_ADDR_VAR 0 3
5507: PUSH
5508: LD_EXP 4
5512: ST_TO_ADDR
// for i = 1 to bunkers do
5513: LD_ADDR_VAR 0 2
5517: PUSH
5518: DOUBLE
5519: LD_INT 1
5521: DEC
5522: ST_TO_ADDR
5523: LD_VAR 0 6
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5615
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5531: LD_VAR 0 3
5535: PUSH
5536: LD_VAR 0 3
5540: ARRAY
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5549: LD_VAR 0 3
5553: PUSH
5554: LD_VAR 0 3
5558: ARRAY
5559: PPUSH
5560: LD_INT 1
5562: PPUSH
5563: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5567: LD_VAR 0 3
5571: PUSH
5572: LD_VAR 0 3
5576: ARRAY
5577: PPUSH
5578: LD_VAR 0 6
5582: PUSH
5583: LD_VAR 0 2
5587: ARRAY
5588: PPUSH
5589: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_VAR 0 3
5607: PPUSH
5608: CALL_OW 3
5612: ST_TO_ADDR
// end ;
5613: GO 5528
5615: POP
5616: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5617: LD_ADDR_VAR 0 5
5621: PUSH
5622: LD_VAR 0 5
5626: PUSH
5627: LD_INT 9
5629: PUSH
5630: LD_INT 10
5632: PUSH
5633: LD_INT 11
5635: PUSH
5636: LD_INT 12
5638: PUSH
5639: LD_INT 13
5641: PUSH
5642: LD_INT 14
5644: PUSH
5645: LD_INT 15
5647: PUSH
5648: LD_INT 16
5650: PUSH
5651: LD_INT 26
5653: PUSH
5654: LD_INT 27
5656: PUSH
5657: LD_INT 28
5659: PUSH
5660: LD_INT 29
5662: PUSH
5663: LD_INT 30
5665: PUSH
5666: LD_INT 31
5668: PUSH
5669: LD_INT 32
5671: PUSH
5672: LD_INT 33
5674: PUSH
5675: LD_INT 34
5677: PUSH
5678: LD_INT 35
5680: PUSH
5681: LD_INT 36
5683: PUSH
5684: LD_INT 37
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: UNION
5709: ST_TO_ADDR
// for i in friends do
5710: LD_ADDR_VAR 0 2
5714: PUSH
5715: LD_EXP 4
5719: PUSH
5720: FOR_IN
5721: IFFALSE 6008
// begin SetTag ( i , 2 ) ;
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_INT 2
5730: PPUSH
5731: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5735: LD_VAR 0 2
5739: PPUSH
5740: CALL_OW 257
5744: PUSH
5745: LD_INT 1
5747: PUSH
5748: LD_INT 4
5750: PUSH
5751: LD_INT 5
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: IN
5759: NOT
5760: IFFALSE 5774
// SetClass ( i , 1 ) ;
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_INT 1
5769: PPUSH
5770: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5774: LD_VAR 0 2
5778: PPUSH
5779: CALL_OW 257
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 5
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: IN
5794: PUSH
5795: LD_VAR 0 4
5799: PUSH
5800: LD_INT 1
5802: ARRAY
5803: AND
5804: IFFALSE 5865
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5806: LD_VAR 0 2
5810: PPUSH
5811: LD_VAR 0 4
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: PUSH
5820: LD_INT 1
5822: ARRAY
5823: PPUSH
5824: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5828: LD_ADDR_VAR 0 4
5832: PUSH
5833: LD_VAR 0 4
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: LD_VAR 0 4
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 1
5852: PPUSH
5853: CALL_OW 3
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// continue ;
5863: GO 5720
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5865: LD_VAR 0 2
5869: PPUSH
5870: CALL_OW 257
5874: PUSH
5875: LD_INT 4
5877: EQUAL
5878: PUSH
5879: LD_VAR 0 4
5883: PUSH
5884: LD_INT 2
5886: ARRAY
5887: AND
5888: IFFALSE 5949
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5890: LD_VAR 0 2
5894: PPUSH
5895: LD_VAR 0 4
5899: PUSH
5900: LD_INT 2
5902: ARRAY
5903: PUSH
5904: LD_INT 1
5906: ARRAY
5907: PPUSH
5908: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5912: LD_ADDR_VAR 0 4
5916: PUSH
5917: LD_VAR 0 4
5921: PPUSH
5922: LD_INT 2
5924: PPUSH
5925: LD_VAR 0 4
5929: PUSH
5930: LD_INT 2
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 3
5941: PPUSH
5942: CALL_OW 1
5946: ST_TO_ADDR
// continue ;
5947: GO 5720
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5949: LD_VAR 0 2
5953: PPUSH
5954: LD_VAR 0 5
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: PPUSH
5963: LD_INT 0
5965: PPUSH
5966: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5970: LD_ADDR_VAR 0 5
5974: PUSH
5975: LD_VAR 0 5
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 3
5987: ST_TO_ADDR
// ComHold ( i ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: CALL_OW 140
// if not areas then
5997: LD_VAR 0 5
6001: NOT
6002: IFFALSE 6006
// break ;
6004: GO 6008
// end ;
6006: GO 5720
6008: POP
6009: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6010: LD_EXP 4
6014: PPUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 52
6020: PUSH
6021: EMPTY
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PPUSH
6028: CALL_OW 72
6032: IFFALSE 6099
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6034: LD_ADDR_VAR 0 2
6038: PUSH
6039: LD_EXP 4
6043: PPUSH
6044: LD_INT 3
6046: PUSH
6047: LD_INT 52
6049: PUSH
6050: EMPTY
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 72
6061: PUSH
6062: FOR_IN
6063: IFFALSE 6097
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6065: LD_VAR 0 2
6069: PPUSH
6070: LD_INT 65
6072: PPUSH
6073: LD_INT 58
6075: PPUSH
6076: LD_INT 7
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: CALL_OW 50
// ComHold ( i ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: CALL_OW 140
// end ;
6095: GO 6062
6097: POP
6098: POP
// if Frank then
6099: LD_EXP 33
6103: IFFALSE 6117
// SetClass ( Frank , class_sniper ) ;
6105: LD_EXP 33
6109: PPUSH
6110: LD_INT 5
6112: PPUSH
6113: CALL_OW 336
// end ; end_of_file
6117: LD_VAR 0 1
6121: RET
// export function CanSayRand ( side ) ; begin
6122: LD_INT 0
6124: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6125: LD_ADDR_VAR 0 2
6129: PUSH
6130: LD_INT 52
6132: PUSH
6133: EMPTY
6134: LIST
6135: PUSH
6136: LD_INT 22
6138: PUSH
6139: LD_VAR 0 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 2
6150: PUSH
6151: LD_INT 25
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: PUSH
6208: LD_EXP 14
6212: PUSH
6213: LD_EXP 33
6217: PUSH
6218: LD_EXP 23
6222: PUSH
6223: LD_EXP 24
6227: PUSH
6228: LD_EXP 25
6232: PUSH
6233: LD_EXP 26
6237: PUSH
6238: LD_EXP 27
6242: PUSH
6243: LD_EXP 28
6247: PUSH
6248: LD_EXP 29
6252: PUSH
6253: LD_EXP 30
6257: PUSH
6258: LD_EXP 16
6262: PUSH
6263: LD_EXP 31
6267: PUSH
6268: LD_EXP 32
6272: PUSH
6273: LD_EXP 34
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: DIFF
6294: ST_TO_ADDR
// end ;
6295: LD_VAR 0 2
6299: RET
// export function SayRand ( sex , dial ) ; begin
6300: LD_INT 0
6302: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6303: LD_ADDR_VAR 0 3
6307: PUSH
6308: LD_INT 52
6310: PUSH
6311: EMPTY
6312: LIST
6313: PUSH
6314: LD_INT 22
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: LD_INT 26
6326: PUSH
6327: LD_VAR 0 1
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 2
6338: PUSH
6339: LD_INT 25
6341: PUSH
6342: LD_INT 1
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 25
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 25
6361: PUSH
6362: LD_INT 3
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 25
6371: PUSH
6372: LD_INT 4
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL_OW 69
6396: PUSH
6397: LD_EXP 14
6401: PUSH
6402: LD_EXP 33
6406: PUSH
6407: LD_EXP 23
6411: PUSH
6412: LD_EXP 24
6416: PUSH
6417: LD_EXP 25
6421: PUSH
6422: LD_EXP 26
6426: PUSH
6427: LD_EXP 27
6431: PUSH
6432: LD_EXP 28
6436: PUSH
6437: LD_EXP 29
6441: PUSH
6442: LD_EXP 30
6446: PUSH
6447: LD_EXP 16
6451: PUSH
6452: LD_EXP 31
6456: PUSH
6457: LD_EXP 32
6461: PUSH
6462: LD_EXP 34
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: DIFF
6483: ST_TO_ADDR
// if not result then
6484: LD_VAR 0 3
6488: NOT
6489: IFFALSE 6493
// exit ;
6491: GO 6521
// result := result [ 1 ] ;
6493: LD_ADDR_VAR 0 3
6497: PUSH
6498: LD_VAR 0 3
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: ST_TO_ADDR
// Say ( result , dial ) ;
6507: LD_VAR 0 3
6511: PPUSH
6512: LD_VAR 0 2
6516: PPUSH
6517: CALL_OW 88
// end ;
6521: LD_VAR 0 3
6525: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6526: LD_INT 0
6528: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: LD_INT 22
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 26
6546: PUSH
6547: LD_VAR 0 1
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 2
6558: PUSH
6559: LD_INT 25
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 25
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 25
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 25
6591: PUSH
6592: LD_INT 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PPUSH
6611: CALL_OW 69
6615: PUSH
6616: LD_EXP 14
6620: PUSH
6621: LD_EXP 33
6625: PUSH
6626: LD_EXP 23
6630: PUSH
6631: LD_EXP 24
6635: PUSH
6636: LD_EXP 25
6640: PUSH
6641: LD_EXP 26
6645: PUSH
6646: LD_EXP 27
6650: PUSH
6651: LD_EXP 28
6655: PUSH
6656: LD_EXP 29
6660: PUSH
6661: LD_EXP 30
6665: PUSH
6666: LD_EXP 16
6670: PUSH
6671: LD_EXP 31
6675: PUSH
6676: LD_EXP 32
6680: PUSH
6681: LD_EXP 34
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: LD_VAR 0 3
6706: ADD
6707: DIFF
6708: ST_TO_ADDR
// if not result then
6709: LD_VAR 0 4
6713: NOT
6714: IFFALSE 6718
// exit ;
6716: GO 6746
// result := result [ 1 ] ;
6718: LD_ADDR_VAR 0 4
6722: PUSH
6723: LD_VAR 0 4
6727: PUSH
6728: LD_INT 1
6730: ARRAY
6731: ST_TO_ADDR
// Say ( result , dial ) ;
6732: LD_VAR 0 4
6736: PPUSH
6737: LD_VAR 0 2
6741: PPUSH
6742: CALL_OW 88
// end ;
6746: LD_VAR 0 4
6750: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6751: LD_INT 0
6753: PPUSH
6754: PPUSH
6755: PPUSH
6756: PPUSH
6757: PPUSH
6758: PPUSH
6759: PPUSH
6760: PPUSH
6761: PPUSH
6762: PPUSH
6763: PPUSH
6764: PPUSH
6765: PPUSH
6766: PPUSH
6767: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6768: LD_VAR 0 1
6772: NOT
6773: PUSH
6774: LD_VAR 0 2
6778: NOT
6779: OR
6780: PUSH
6781: LD_VAR 0 1
6785: PPUSH
6786: CALL_OW 247
6790: PUSH
6791: LD_INT 3
6793: EQUAL
6794: OR
6795: IFFALSE 6799
// exit ;
6797: GO 8338
// for i = path downto 1 do
6799: LD_ADDR_VAR 0 5
6803: PUSH
6804: DOUBLE
6805: LD_VAR 0 2
6809: INC
6810: ST_TO_ADDR
6811: LD_INT 1
6813: PUSH
6814: FOR_DOWNTO
6815: IFFALSE 6876
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6817: LD_VAR 0 2
6821: PUSH
6822: LD_VAR 0 5
6826: ARRAY
6827: PUSH
6828: LD_INT 1
6830: ARRAY
6831: PPUSH
6832: LD_VAR 0 2
6836: PUSH
6837: LD_VAR 0 5
6841: ARRAY
6842: PUSH
6843: LD_INT 2
6845: ARRAY
6846: PPUSH
6847: CALL_OW 488
6851: NOT
6852: IFFALSE 6874
// path = Delete ( path , i ) ;
6854: LD_ADDR_VAR 0 2
6858: PUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_VAR 0 5
6868: PPUSH
6869: CALL_OW 3
6873: ST_TO_ADDR
// end ;
6874: GO 6814
6876: POP
6877: POP
// if not path then
6878: LD_VAR 0 2
6882: NOT
6883: IFFALSE 6887
// exit ;
6885: GO 8338
// tmp_path := [ ] ;
6887: LD_ADDR_VAR 0 11
6891: PUSH
6892: EMPTY
6893: ST_TO_ADDR
// if flags then
6894: LD_VAR 0 3
6898: IFFALSE 6972
// begin if flags [ 1 ] then
6900: LD_VAR 0 3
6904: PUSH
6905: LD_INT 1
6907: ARRAY
6908: IFFALSE 6924
// safe_place = flags [ 1 ] ;
6910: LD_ADDR_VAR 0 16
6914: PUSH
6915: LD_VAR 0 3
6919: PUSH
6920: LD_INT 1
6922: ARRAY
6923: ST_TO_ADDR
// if flags [ 2 ] then
6924: LD_VAR 0 3
6928: PUSH
6929: LD_INT 2
6931: ARRAY
6932: IFFALSE 6948
// spot_dist = flags [ 2 ] ;
6934: LD_ADDR_VAR 0 15
6938: PUSH
6939: LD_VAR 0 3
6943: PUSH
6944: LD_INT 2
6946: ARRAY
6947: ST_TO_ADDR
// if flags [ 3 ] then
6948: LD_VAR 0 3
6952: PUSH
6953: LD_INT 3
6955: ARRAY
6956: IFFALSE 6972
// chase_range = flags [ 3 ] ;
6958: LD_ADDR_VAR 0 17
6962: PUSH
6963: LD_VAR 0 3
6967: PUSH
6968: LD_INT 3
6970: ARRAY
6971: ST_TO_ADDR
// end ; if not chase_range then
6972: LD_VAR 0 17
6976: NOT
6977: IFFALSE 6987
// chase_range = 8 ;
6979: LD_ADDR_VAR 0 17
6983: PUSH
6984: LD_INT 8
6986: ST_TO_ADDR
// if not spot_dist then
6987: LD_VAR 0 15
6991: NOT
6992: IFFALSE 7002
// spot_dist := 8 ;
6994: LD_ADDR_VAR 0 15
6998: PUSH
6999: LD_INT 8
7001: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7002: LD_ADDR_VAR 0 18
7006: PUSH
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 247
7016: PUSH
7017: LD_INT 2
7019: EQUAL
7020: PUSH
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 262
7030: PUSH
7031: LD_INT 3
7033: NONEQUAL
7034: AND
7035: ST_TO_ADDR
// status = 1 ;
7036: LD_ADDR_VAR 0 12
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7044: LD_ADDR_VAR 0 11
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: LD_VAR 0 2
7056: PUSH
7057: LD_INT 1
7059: ARRAY
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7065: LD_INT 35
7067: PPUSH
7068: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7072: LD_VAR 0 18
7076: PUSH
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 261
7086: PUSH
7087: LD_INT 20
7089: LESS
7090: AND
7091: IFFALSE 7284
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7093: LD_ADDR_VAR 0 10
7097: PUSH
7098: LD_INT 22
7100: PUSH
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 255
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 30
7120: PUSH
7121: LD_INT 0
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 1
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 30
7140: PUSH
7141: LD_INT 29
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 30
7150: PUSH
7151: LD_INT 3
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PPUSH
7169: CALL_OW 69
7173: ST_TO_ADDR
// if not station then
7174: LD_VAR 0 10
7178: NOT
7179: IFFALSE 7195
// begin SetFuel ( unit , 40 ) ;
7181: LD_VAR 0 1
7185: PPUSH
7186: LD_INT 40
7188: PPUSH
7189: CALL_OW 240
// continue ;
7193: GO 7065
// end ; status := 6 ;
7195: LD_ADDR_VAR 0 12
7199: PUSH
7200: LD_INT 6
7202: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7203: LD_ADDR_VAR 0 10
7207: PUSH
7208: LD_VAR 0 10
7212: PPUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 74
7222: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7223: LD_INT 35
7225: PPUSH
7226: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_VAR 0 10
7239: PPUSH
7240: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7244: LD_VAR 0 1
7248: PPUSH
7249: LD_VAR 0 10
7253: PPUSH
7254: CALL_OW 296
7258: PUSH
7259: LD_INT 6
7261: LESS
7262: IFFALSE 7223
// SetFuel ( unit , 100 ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_INT 100
7271: PPUSH
7272: CALL_OW 240
// status := 5 ;
7276: LD_ADDR_VAR 0 12
7280: PUSH
7281: LD_INT 5
7283: ST_TO_ADDR
// end ; if status = 1 then
7284: LD_VAR 0 12
7288: PUSH
7289: LD_INT 1
7291: EQUAL
7292: IFFALSE 7668
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7294: LD_ADDR_VAR 0 13
7298: PUSH
7299: LD_INT 81
7301: PUSH
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 3
7318: PUSH
7319: LD_INT 21
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 91
7335: PUSH
7336: LD_VAR 0 1
7340: PUSH
7341: LD_VAR 0 15
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 1
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: ST_TO_ADDR
// for i in enemy do
7372: LD_ADDR_VAR 0 5
7376: PUSH
7377: LD_VAR 0 13
7381: PUSH
7382: FOR_IN
7383: IFFALSE 7414
// if IsInvisible ( i ) then
7385: LD_VAR 0 5
7389: PPUSH
7390: CALL_OW 571
7394: IFFALSE 7412
// enemy := enemy diff i ;
7396: LD_ADDR_VAR 0 13
7400: PUSH
7401: LD_VAR 0 13
7405: PUSH
7406: LD_VAR 0 5
7410: DIFF
7411: ST_TO_ADDR
7412: GO 7382
7414: POP
7415: POP
// if enemy then
7416: LD_VAR 0 13
7420: IFFALSE 7470
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7422: LD_VAR 0 1
7426: PPUSH
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 250
7436: PPUSH
7437: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7441: LD_VAR 0 1
7445: PPUSH
7446: LD_VAR 0 1
7450: PPUSH
7451: CALL_OW 251
7455: PPUSH
7456: CALL_OW 232
// status = 2 ;
7460: LD_ADDR_VAR 0 12
7464: PUSH
7465: LD_INT 2
7467: ST_TO_ADDR
// end else
7468: GO 7668
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7470: LD_VAR 0 1
7474: PPUSH
7475: LD_VAR 0 11
7479: PUSH
7480: LD_INT 2
7482: ARRAY
7483: PUSH
7484: LD_INT 1
7486: ARRAY
7487: PPUSH
7488: LD_VAR 0 11
7492: PUSH
7493: LD_INT 2
7495: ARRAY
7496: PUSH
7497: LD_INT 2
7499: ARRAY
7500: PPUSH
7501: CALL_OW 307
7505: PUSH
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 314
7515: NOT
7516: OR
7517: IFFALSE 7668
// begin wait ( 0 0$2 ) ;
7519: LD_INT 70
7521: PPUSH
7522: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7526: LD_VAR 0 11
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PUSH
7535: LD_INT 1
7537: PLUS
7538: PUSH
7539: LD_VAR 0 2
7543: GREATER
7544: IFFALSE 7569
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7546: LD_ADDR_VAR 0 11
7550: PUSH
7551: LD_VAR 0 11
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 1
7566: ST_TO_ADDR
7567: GO 7600
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7569: LD_ADDR_VAR 0 11
7573: PUSH
7574: LD_VAR 0 11
7578: PPUSH
7579: LD_INT 1
7581: PPUSH
7582: LD_VAR 0 11
7586: PUSH
7587: LD_INT 1
7589: ARRAY
7590: PUSH
7591: LD_INT 1
7593: PLUS
7594: PPUSH
7595: CALL_OW 1
7599: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7600: LD_ADDR_VAR 0 11
7604: PUSH
7605: LD_VAR 0 11
7609: PPUSH
7610: LD_INT 2
7612: PPUSH
7613: LD_VAR 0 2
7617: PUSH
7618: LD_VAR 0 11
7622: PUSH
7623: LD_INT 1
7625: ARRAY
7626: ARRAY
7627: PPUSH
7628: CALL_OW 1
7632: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7633: LD_VAR 0 1
7637: PPUSH
7638: LD_VAR 0 11
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: PUSH
7647: LD_INT 1
7649: ARRAY
7650: PPUSH
7651: LD_VAR 0 11
7655: PUSH
7656: LD_INT 2
7658: ARRAY
7659: PUSH
7660: LD_INT 2
7662: ARRAY
7663: PPUSH
7664: CALL_OW 114
// end ; end ; end ; if status = 2 then
7668: LD_VAR 0 12
7672: PUSH
7673: LD_INT 2
7675: EQUAL
7676: IFFALSE 7897
// begin if GetLives ( unit ) < 650 and safe_place then
7678: LD_VAR 0 1
7682: PPUSH
7683: CALL_OW 256
7687: PUSH
7688: LD_INT 650
7690: LESS
7691: PUSH
7692: LD_VAR 0 16
7696: AND
7697: IFFALSE 7709
// begin status = 3 ;
7699: LD_ADDR_VAR 0 12
7703: PUSH
7704: LD_INT 3
7706: ST_TO_ADDR
// continue ;
7707: GO 7065
// end ; x := GetRememberedX ( unit ) ;
7709: LD_ADDR_VAR 0 6
7713: PUSH
7714: LD_VAR 0 1
7718: PPUSH
7719: CALL_OW 252
7723: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7724: LD_ADDR_VAR 0 7
7728: PUSH
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 253
7738: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7739: LD_ADDR_VAR 0 13
7743: PUSH
7744: LD_INT 81
7746: PUSH
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 255
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 92
7763: PUSH
7764: LD_VAR 0 6
7768: PUSH
7769: LD_VAR 0 7
7773: PUSH
7774: LD_VAR 0 15
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 101
7787: PUSH
7788: LD_INT 1
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 69
7804: ST_TO_ADDR
// if enemy then
7805: LD_VAR 0 13
7809: IFFALSE 7880
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7811: LD_ADDR_VAR 0 14
7815: PUSH
7816: LD_VAR 0 13
7820: PPUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 74
7830: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7831: LD_VAR 0 14
7835: PPUSH
7836: LD_VAR 0 6
7840: PPUSH
7841: LD_VAR 0 7
7845: PPUSH
7846: CALL_OW 297
7850: PUSH
7851: LD_VAR 0 15
7855: PUSH
7856: LD_VAR 0 17
7860: PLUS
7861: LESS
7862: IFFALSE 7878
// ComAttackUnit ( unit , e ) ;
7864: LD_VAR 0 1
7868: PPUSH
7869: LD_VAR 0 14
7873: PPUSH
7874: CALL_OW 115
// end else
7878: GO 7897
// begin ComStop ( unit ) ;
7880: LD_VAR 0 1
7884: PPUSH
7885: CALL_OW 141
// status = 5 ;
7889: LD_ADDR_VAR 0 12
7893: PUSH
7894: LD_INT 5
7896: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7897: LD_VAR 0 12
7901: PUSH
7902: LD_INT 3
7904: EQUAL
7905: PUSH
7906: LD_VAR 0 16
7910: AND
7911: IFFALSE 7997
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_VAR 0 16
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_VAR 0 16
7931: PUSH
7932: LD_INT 2
7934: ARRAY
7935: PPUSH
7936: CALL_OW 111
// wait ( 0 0$1 ) ;
7940: LD_INT 35
7942: PPUSH
7943: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7947: LD_VAR 0 1
7951: PPUSH
7952: LD_VAR 0 16
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: PPUSH
7961: LD_VAR 0 16
7965: PUSH
7966: LD_INT 2
7968: ARRAY
7969: PPUSH
7970: CALL_OW 297
7974: PUSH
7975: LD_INT 4
7977: LESS
7978: IFFALSE 7913
// ComStop ( unit ) ;
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 141
// status = 4 ;
7989: LD_ADDR_VAR 0 12
7993: PUSH
7994: LD_INT 4
7996: ST_TO_ADDR
// end ; if status = 4 then
7997: LD_VAR 0 12
8001: PUSH
8002: LD_INT 4
8004: EQUAL
8005: IFFALSE 8037
// begin repeat wait ( 0 0$1 ) ;
8007: LD_INT 35
8009: PPUSH
8010: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 256
8023: PUSH
8024: LD_INT 1000
8026: EQUAL
8027: IFFALSE 8007
// status = 5 ;
8029: LD_ADDR_VAR 0 12
8033: PUSH
8034: LD_INT 5
8036: ST_TO_ADDR
// end ; if status = 5 then
8037: LD_VAR 0 12
8041: PUSH
8042: LD_INT 5
8044: EQUAL
8045: IFFALSE 8327
// begin p := 999 ;
8047: LD_ADDR_VAR 0 9
8051: PUSH
8052: LD_INT 999
8054: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8055: LD_ADDR_VAR 0 14
8059: PUSH
8060: LD_VAR 0 11
8064: PUSH
8065: LD_INT 2
8067: ARRAY
8068: PUSH
8069: LD_INT 1
8071: ARRAY
8072: PUSH
8073: LD_VAR 0 11
8077: PUSH
8078: LD_INT 2
8080: ARRAY
8081: PUSH
8082: LD_INT 2
8084: ARRAY
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: ST_TO_ADDR
// c := 1 ;
8090: LD_ADDR_VAR 0 8
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8098: LD_ADDR_VAR 0 5
8102: PUSH
8103: DOUBLE
8104: LD_INT 1
8106: DEC
8107: ST_TO_ADDR
8108: LD_VAR 0 11
8112: PUSH
8113: LD_INT 2
8115: ARRAY
8116: PUSH
8117: LD_INT 2
8119: DIV
8120: PUSH
8121: FOR_TO
8122: IFFALSE 8254
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8124: LD_ADDR_VAR 0 6
8128: PUSH
8129: LD_VAR 0 1
8133: PPUSH
8134: LD_VAR 0 11
8138: PUSH
8139: LD_INT 2
8141: ARRAY
8142: PUSH
8143: LD_VAR 0 8
8147: ARRAY
8148: PPUSH
8149: LD_VAR 0 11
8153: PUSH
8154: LD_INT 2
8156: ARRAY
8157: PUSH
8158: LD_VAR 0 8
8162: PUSH
8163: LD_INT 1
8165: PLUS
8166: ARRAY
8167: PPUSH
8168: CALL_OW 297
8172: ST_TO_ADDR
// if x < p then
8173: LD_VAR 0 6
8177: PUSH
8178: LD_VAR 0 9
8182: LESS
8183: IFFALSE 8238
// begin p := x ;
8185: LD_ADDR_VAR 0 9
8189: PUSH
8190: LD_VAR 0 6
8194: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8195: LD_ADDR_VAR 0 14
8199: PUSH
8200: LD_VAR 0 11
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_VAR 0 8
8213: ARRAY
8214: PUSH
8215: LD_VAR 0 11
8219: PUSH
8220: LD_INT 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 8
8228: PUSH
8229: LD_INT 1
8231: PLUS
8232: ARRAY
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: ST_TO_ADDR
// end ; c = c + 2 ;
8238: LD_ADDR_VAR 0 8
8242: PUSH
8243: LD_VAR 0 8
8247: PUSH
8248: LD_INT 2
8250: PLUS
8251: ST_TO_ADDR
// end ;
8252: GO 8121
8254: POP
8255: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_VAR 0 14
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_VAR 0 14
8274: PUSH
8275: LD_INT 2
8277: ARRAY
8278: PPUSH
8279: CALL_OW 111
// wait ( 0 0$1 ) ;
8283: LD_INT 35
8285: PPUSH
8286: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8290: LD_VAR 0 1
8294: PPUSH
8295: LD_VAR 0 14
8299: PUSH
8300: LD_INT 1
8302: ARRAY
8303: PPUSH
8304: LD_VAR 0 14
8308: PUSH
8309: LD_INT 2
8311: ARRAY
8312: PPUSH
8313: CALL_OW 307
8317: IFFALSE 8256
// status = 1 ;
8319: LD_ADDR_VAR 0 12
8323: PUSH
8324: LD_INT 1
8326: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 301
8336: IFFALSE 7065
// end ;
8338: LD_VAR 0 4
8342: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8343: LD_INT 0
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8353: LD_VAR 0 1
8357: NOT
8358: PUSH
8359: LD_VAR 0 3
8363: NOT
8364: OR
8365: PUSH
8366: LD_VAR 0 4
8370: PUSH
8371: LD_INT 1
8373: PUSH
8374: LD_INT 2
8376: PUSH
8377: LD_INT 0
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: IN
8385: NOT
8386: OR
8387: PUSH
8388: LD_VAR 0 6
8392: NOT
8393: OR
8394: PUSH
8395: LD_VAR 0 7
8399: NOT
8400: OR
8401: IFFALSE 8405
// exit ;
8403: GO 8796
// sex_id :=  ;
8405: LD_ADDR_VAR 0 14
8409: PUSH
8410: LD_STRING 
8412: ST_TO_ADDR
// case class of 1 :
8413: LD_VAR 0 5
8417: PUSH
8418: LD_INT 1
8420: DOUBLE
8421: EQUAL
8422: IFTRUE 8426
8424: GO 8437
8426: POP
// class_id := Sol ; 2 :
8427: LD_ADDR_VAR 0 15
8431: PUSH
8432: LD_STRING Sol
8434: ST_TO_ADDR
8435: GO 8495
8437: LD_INT 2
8439: DOUBLE
8440: EQUAL
8441: IFTRUE 8445
8443: GO 8456
8445: POP
// class_id := Eng ; 3 :
8446: LD_ADDR_VAR 0 15
8450: PUSH
8451: LD_STRING Eng
8453: ST_TO_ADDR
8454: GO 8495
8456: LD_INT 3
8458: DOUBLE
8459: EQUAL
8460: IFTRUE 8464
8462: GO 8475
8464: POP
// class_id := Mech ; 4 :
8465: LD_ADDR_VAR 0 15
8469: PUSH
8470: LD_STRING Mech
8472: ST_TO_ADDR
8473: GO 8495
8475: LD_INT 4
8477: DOUBLE
8478: EQUAL
8479: IFTRUE 8483
8481: GO 8494
8483: POP
// class_id := Sci ; end ;
8484: LD_ADDR_VAR 0 15
8488: PUSH
8489: LD_STRING Sci
8491: ST_TO_ADDR
8492: GO 8495
8494: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8495: LD_ADDR_VAR 0 11
8499: PUSH
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_INT 25
8507: PUSH
8508: LD_VAR 0 5
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PPUSH
8517: CALL_OW 72
8521: ST_TO_ADDR
// if tmp then
8522: LD_VAR 0 11
8526: IFFALSE 8538
// units := tmp ;
8528: LD_ADDR_VAR 0 1
8532: PUSH
8533: LD_VAR 0 11
8537: ST_TO_ADDR
// if sex then
8538: LD_VAR 0 4
8542: IFFALSE 8598
// begin if sex = sex_female then
8544: LD_VAR 0 4
8548: PUSH
8549: LD_INT 2
8551: EQUAL
8552: IFFALSE 8562
// sex_id := F ;
8554: LD_ADDR_VAR 0 14
8558: PUSH
8559: LD_STRING F
8561: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8562: LD_ADDR_VAR 0 1
8566: PUSH
8567: LD_VAR 0 1
8571: PPUSH
8572: LD_INT 26
8574: PUSH
8575: LD_VAR 0 4
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PPUSH
8584: CALL_OW 72
8588: ST_TO_ADDR
// if not units then
8589: LD_VAR 0 1
8593: NOT
8594: IFFALSE 8598
// exit ;
8596: GO 8796
// end ; unit_id := id ;
8598: LD_ADDR_VAR 0 12
8602: PUSH
8603: LD_VAR 0 6
8607: ST_TO_ADDR
// if unit_id > units then
8608: LD_VAR 0 12
8612: PUSH
8613: LD_VAR 0 1
8617: GREATER
8618: IFFALSE 8628
// unit_id := 1 ;
8620: LD_ADDR_VAR 0 12
8624: PUSH
8625: LD_INT 1
8627: ST_TO_ADDR
// if not units [ unit_id ] then
8628: LD_VAR 0 1
8632: PUSH
8633: LD_VAR 0 12
8637: ARRAY
8638: NOT
8639: IFFALSE 8643
// exit ;
8641: GO 8796
// unit := units [ unit_id ] ;
8643: LD_ADDR_VAR 0 10
8647: PUSH
8648: LD_VAR 0 1
8652: PUSH
8653: LD_VAR 0 12
8657: ARRAY
8658: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8659: LD_ADDR_VAR 0 13
8663: PUSH
8664: LD_STRING D
8666: PUSH
8667: LD_VAR 0 3
8671: STR
8672: PUSH
8673: LD_STRING -
8675: STR
8676: PUSH
8677: LD_VAR 0 14
8681: STR
8682: PUSH
8683: LD_VAR 0 15
8687: STR
8688: PUSH
8689: LD_VAR 0 6
8693: STR
8694: PUSH
8695: LD_STRING -
8697: STR
8698: PUSH
8699: LD_VAR 0 7
8703: STR
8704: ST_TO_ADDR
// case type of 0 :
8705: LD_VAR 0 2
8709: PUSH
8710: LD_INT 0
8712: DOUBLE
8713: EQUAL
8714: IFTRUE 8718
8716: GO 8735
8718: POP
// Say ( unit , dialog_id ) ; 1 :
8719: LD_VAR 0 10
8723: PPUSH
8724: LD_VAR 0 13
8728: PPUSH
8729: CALL_OW 88
8733: GO 8786
8735: LD_INT 1
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8743
8741: GO 8760
8743: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8744: LD_VAR 0 10
8748: PPUSH
8749: LD_VAR 0 13
8753: PPUSH
8754: CALL_OW 94
8758: GO 8786
8760: LD_INT 2
8762: DOUBLE
8763: EQUAL
8764: IFTRUE 8768
8766: GO 8785
8768: POP
// ForceSay ( unit , dialog_id ) ; end ;
8769: LD_VAR 0 10
8773: PPUSH
8774: LD_VAR 0 13
8778: PPUSH
8779: CALL_OW 91
8783: GO 8786
8785: POP
// result := unit ;
8786: LD_ADDR_VAR 0 8
8790: PUSH
8791: LD_VAR 0 10
8795: ST_TO_ADDR
// end ;
8796: LD_VAR 0 8
8800: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8801: LD_INT 0
8803: PPUSH
8804: PPUSH
8805: PPUSH
// result := false ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8814: LD_VAR 0 1
8818: NOT
8819: PUSH
8820: LD_VAR 0 2
8824: NOT
8825: OR
8826: PUSH
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 310
8836: OR
8837: IFFALSE 8841
// exit ;
8839: GO 9045
// if distance < 0 then
8841: LD_VAR 0 3
8845: PUSH
8846: LD_INT 0
8848: LESS
8849: IFFALSE 8859
// distance := 0 ;
8851: LD_ADDR_VAR 0 3
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8859: LD_ADDR_VAR 0 6
8863: PUSH
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 266
8873: PPUSH
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 250
8883: PPUSH
8884: LD_VAR 0 2
8888: PPUSH
8889: CALL_OW 251
8893: PPUSH
8894: LD_VAR 0 2
8898: PPUSH
8899: CALL_OW 254
8903: PPUSH
8904: LD_VAR 0 2
8908: PPUSH
8909: CALL_OW 248
8913: PPUSH
8914: LD_INT 1
8916: PPUSH
8917: CALL 49404 0 6
8921: ST_TO_ADDR
// if not entrance then
8922: LD_VAR 0 6
8926: NOT
8927: IFFALSE 8931
// exit ;
8929: GO 9045
// for i in entrance do
8931: LD_ADDR_VAR 0 5
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: FOR_IN
8942: IFFALSE 9043
// begin if not distance then
8944: LD_VAR 0 3
8948: NOT
8949: IFFALSE 8994
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8951: LD_VAR 0 1
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: LD_VAR 0 5
8969: PUSH
8970: LD_INT 2
8972: ARRAY
8973: PPUSH
8974: CALL_OW 307
8978: IFFALSE 8992
// begin result := true ;
8980: LD_ADDR_VAR 0 4
8984: PUSH
8985: LD_INT 1
8987: ST_TO_ADDR
// exit ;
8988: POP
8989: POP
8990: GO 9045
// end ; end else
8992: GO 9041
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8994: LD_VAR 0 1
8998: PPUSH
8999: LD_VAR 0 5
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_VAR 0 5
9012: PUSH
9013: LD_INT 2
9015: ARRAY
9016: PPUSH
9017: CALL_OW 297
9021: PUSH
9022: LD_VAR 0 3
9026: LESSEQUAL
9027: IFFALSE 9041
// begin result := true ;
9029: LD_ADDR_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// exit ;
9037: POP
9038: POP
9039: GO 9045
// end ; end ; end ;
9041: GO 8941
9043: POP
9044: POP
// end ;
9045: LD_VAR 0 4
9049: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
9054: PPUSH
// result := false ;
9055: LD_ADDR_VAR 0 3
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9063: LD_VAR 0 1
9067: NOT
9068: PUSH
9069: LD_VAR 0 2
9073: NOT
9074: OR
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 302
9085: NOT
9086: OR
9087: PUSH
9088: LD_VAR 0 2
9092: PPUSH
9093: CALL_OW 302
9097: NOT
9098: OR
9099: IFFALSE 9103
// exit ;
9101: GO 9264
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9103: LD_VAR 0 1
9107: PPUSH
9108: LD_INT 81
9110: PUSH
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 255
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PUSH
9125: LD_INT 3
9127: PUSH
9128: LD_INT 21
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: PPUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 74
9160: PPUSH
9161: CALL_OW 296
9165: PUSH
9166: LD_INT 8
9168: LESS
9169: IFFALSE 9173
// exit ;
9171: GO 9264
// building := IsInUnit ( unit2 ) ;
9173: LD_ADDR_VAR 0 5
9177: PUSH
9178: LD_VAR 0 2
9182: PPUSH
9183: CALL_OW 310
9187: ST_TO_ADDR
// if building then
9188: LD_VAR 0 5
9192: IFFALSE 9219
// result := IsNearbyEntrance ( unit , building , 2 ) else
9194: LD_ADDR_VAR 0 3
9198: PUSH
9199: LD_VAR 0 1
9203: PPUSH
9204: LD_VAR 0 5
9208: PPUSH
9209: LD_INT 2
9211: PPUSH
9212: CALL 8801 0 3
9216: ST_TO_ADDR
9217: GO 9264
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9219: LD_ADDR_VAR 0 3
9223: PUSH
9224: LD_VAR 0 1
9228: PPUSH
9229: LD_VAR 0 2
9233: PPUSH
9234: CALL_OW 296
9238: PUSH
9239: LD_INT 6
9241: LESS
9242: PUSH
9243: LD_VAR 0 2
9247: PPUSH
9248: CALL_OW 255
9252: PPUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: CALL_OW 292
9262: AND
9263: ST_TO_ADDR
// end ;
9264: LD_VAR 0 3
9268: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
// uc_side = 0 ;
9275: LD_ADDR_OWVAR 20
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// uc_nation = 0 ;
9283: LD_ADDR_OWVAR 21
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// nat_area := nature_area ;
9291: LD_ADDR_VAR 0 4
9295: PUSH
9296: LD_INT 24
9298: ST_TO_ADDR
// InitHc ;
9299: CALL_OW 19
// for i = 1 to 4 do
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: DOUBLE
9309: LD_INT 1
9311: DEC
9312: ST_TO_ADDR
9313: LD_INT 4
9315: PUSH
9316: FOR_TO
9317: IFFALSE 9364
// begin hc_class = 18 ;
9319: LD_ADDR_OWVAR 28
9323: PUSH
9324: LD_INT 18
9326: ST_TO_ADDR
// hc_gallery =  ;
9327: LD_ADDR_OWVAR 33
9331: PUSH
9332: LD_STRING 
9334: ST_TO_ADDR
// animal := CreateHuman ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: CALL_OW 44
9344: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9345: LD_VAR 0 3
9349: PPUSH
9350: LD_VAR 0 4
9354: PPUSH
9355: LD_INT 0
9357: PPUSH
9358: CALL_OW 49
// end ;
9362: GO 9316
9364: POP
9365: POP
// for i = 1 to 3 do
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: DOUBLE
9372: LD_INT 1
9374: DEC
9375: ST_TO_ADDR
9376: LD_INT 3
9378: PUSH
9379: FOR_TO
9380: IFFALSE 9474
// begin hc_class = class_apeman ;
9382: LD_ADDR_OWVAR 28
9386: PUSH
9387: LD_INT 12
9389: ST_TO_ADDR
// hc_gallery =  ;
9390: LD_ADDR_OWVAR 33
9394: PUSH
9395: LD_STRING 
9397: ST_TO_ADDR
// hc_agressivity = 0 ;
9398: LD_ADDR_OWVAR 35
9402: PUSH
9403: LD_INT 0
9405: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9406: LD_ADDR_OWVAR 31
9410: PUSH
9411: LD_INT 1
9413: PPUSH
9414: LD_INT 3
9416: PPUSH
9417: CALL_OW 12
9421: PUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 3
9427: PPUSH
9428: CALL_OW 12
9432: PUSH
9433: LD_INT 0
9435: PUSH
9436: LD_INT 0
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: ST_TO_ADDR
// animal := CreateHuman ;
9445: LD_ADDR_VAR 0 3
9449: PUSH
9450: CALL_OW 44
9454: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9455: LD_VAR 0 3
9459: PPUSH
9460: LD_VAR 0 4
9464: PPUSH
9465: LD_INT 0
9467: PPUSH
9468: CALL_OW 49
// end ;
9472: GO 9379
9474: POP
9475: POP
// for i = 1 to 3 do
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: DOUBLE
9482: LD_INT 1
9484: DEC
9485: ST_TO_ADDR
9486: LD_INT 3
9488: PUSH
9489: FOR_TO
9490: IFFALSE 9537
// begin hc_class = 13 ;
9492: LD_ADDR_OWVAR 28
9496: PUSH
9497: LD_INT 13
9499: ST_TO_ADDR
// hc_gallery =  ;
9500: LD_ADDR_OWVAR 33
9504: PUSH
9505: LD_STRING 
9507: ST_TO_ADDR
// animal := CreateHuman ;
9508: LD_ADDR_VAR 0 3
9512: PUSH
9513: CALL_OW 44
9517: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9518: LD_VAR 0 3
9522: PPUSH
9523: LD_VAR 0 4
9527: PPUSH
9528: LD_INT 0
9530: PPUSH
9531: CALL_OW 49
// end ;
9535: GO 9489
9537: POP
9538: POP
// for i = 1 to 3 do
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_INT 3
9551: PUSH
9552: FOR_TO
9553: IFFALSE 9598
// begin hc_class = 20 ;
9555: LD_ADDR_OWVAR 28
9559: PUSH
9560: LD_INT 20
9562: ST_TO_ADDR
// hc_gallery =  ;
9563: LD_ADDR_OWVAR 33
9567: PUSH
9568: LD_STRING 
9570: ST_TO_ADDR
// animal := CreateHuman ;
9571: LD_ADDR_VAR 0 3
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9581: LD_VAR 0 3
9585: PPUSH
9586: LD_INT 4
9588: PPUSH
9589: LD_INT 0
9591: PPUSH
9592: CALL_OW 49
// end ;
9596: GO 9552
9598: POP
9599: POP
// end ; end_of_file
9600: LD_VAR 0 1
9604: RET
// export function Action ; begin
9605: LD_INT 0
9607: PPUSH
// InGameOn ;
9608: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9612: LD_EXP 14
9616: PPUSH
9617: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9621: LD_EXP 14
9625: PPUSH
9626: LD_STRING D1-JMM-1
9628: PPUSH
9629: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9633: LD_EXP 15
9637: PPUSH
9638: LD_STRING D1-Roth-1
9640: PPUSH
9641: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9645: LD_EXP 14
9649: PPUSH
9650: LD_STRING D1-JMM-2
9652: PPUSH
9653: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9657: LD_EXP 15
9661: PPUSH
9662: LD_STRING D1-Roth-2
9664: PPUSH
9665: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9669: LD_EXP 14
9673: PPUSH
9674: LD_STRING D1-JMM-3
9676: PPUSH
9677: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9681: LD_EXP 15
9685: PPUSH
9686: LD_STRING D1-Roth-3
9688: PPUSH
9689: CALL_OW 88
// ComInvisible ( Roth ) ;
9693: LD_EXP 15
9697: PPUSH
9698: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9702: LD_INT 46
9704: PPUSH
9705: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9709: LD_EXP 14
9713: PPUSH
9714: LD_STRING D1-JMM-4
9716: PPUSH
9717: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9721: LD_INT 10
9723: PPUSH
9724: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9728: LD_EXP 15
9732: PPUSH
9733: LD_EXP 14
9737: PPUSH
9738: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9742: LD_EXP 14
9746: PPUSH
9747: LD_STRING D1-JMM-4a
9749: PPUSH
9750: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9754: LD_EXP 15
9758: PPUSH
9759: LD_STRING D1-Roth-4
9761: PPUSH
9762: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9766: LD_EXP 14
9770: PPUSH
9771: LD_STRING D1-JMM-5
9773: PPUSH
9774: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9778: LD_EXP 15
9782: PPUSH
9783: LD_STRING D1-Roth-5
9785: PPUSH
9786: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9790: LD_EXP 14
9794: PPUSH
9795: LD_STRING D1-JMM-6
9797: PPUSH
9798: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9802: LD_EXP 15
9806: PPUSH
9807: LD_STRING D1-Roth-6
9809: PPUSH
9810: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9814: LD_EXP 14
9818: PPUSH
9819: LD_STRING D1-JMM-7
9821: PPUSH
9822: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_EXP 14
9835: PPUSH
9836: CALL_OW 250
9840: PPUSH
9841: LD_EXP 14
9845: PPUSH
9846: CALL_OW 251
9850: PPUSH
9851: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9855: LD_EXP 15
9859: PPUSH
9860: LD_STRING D1-Roth-7
9862: PPUSH
9863: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9867: LD_INT 10
9869: PPUSH
9870: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9874: LD_EXP 16
9878: PPUSH
9879: LD_EXP 14
9883: PPUSH
9884: CALL_OW 296
9888: PUSH
9889: LD_INT 6
9891: LESS
9892: IFFALSE 9867
// ComTurnUnit ( Powell , JMM ) ;
9894: LD_EXP 16
9898: PPUSH
9899: LD_EXP 14
9903: PPUSH
9904: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9908: LD_EXP 16
9912: PPUSH
9913: LD_STRING D1-Pow-7
9915: PPUSH
9916: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9920: LD_EXP 14
9924: PPUSH
9925: LD_EXP 16
9929: PPUSH
9930: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9934: LD_EXP 15
9938: PPUSH
9939: LD_EXP 16
9943: PPUSH
9944: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9948: LD_EXP 14
9952: PPUSH
9953: LD_STRING D1-JMM-8
9955: PPUSH
9956: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9960: LD_EXP 16
9964: PPUSH
9965: LD_STRING D1-Pow-8
9967: PPUSH
9968: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9972: LD_EXP 14
9976: PPUSH
9977: LD_STRING D1-JMM-9
9979: PPUSH
9980: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9984: LD_EXP 16
9988: PPUSH
9989: LD_INT 124
9991: PPUSH
9992: LD_INT 61
9994: PPUSH
9995: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9999: LD_INT 35
10001: PPUSH
10002: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10006: LD_EXP 14
10010: PPUSH
10011: LD_EXP 16
10015: PPUSH
10016: CALL_OW 296
10020: PUSH
10021: LD_INT 6
10023: GREATER
10024: IFFALSE 9999
// SayRadio ( Powell , D1-Pow-9 ) ;
10026: LD_EXP 16
10030: PPUSH
10031: LD_STRING D1-Pow-9
10033: PPUSH
10034: CALL_OW 94
// RemoveUnit ( Powell ) ;
10038: LD_EXP 16
10042: PPUSH
10043: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10047: LD_EXP 16
10051: PPUSH
10052: LD_INT 18
10054: PPUSH
10055: CALL_OW 52
// if Joan and not Joan in selected then
10059: LD_EXP 36
10063: PUSH
10064: LD_EXP 36
10068: PUSH
10069: LD_EXP 3
10073: IN
10074: NOT
10075: AND
10076: IFFALSE 10090
// SayRadio ( Joan , D1-Joan-9 ) ;
10078: LD_EXP 36
10082: PPUSH
10083: LD_STRING D1-Joan-9
10085: PPUSH
10086: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10090: LD_EXP 15
10094: PPUSH
10095: LD_EXP 14
10099: PPUSH
10100: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10104: LD_EXP 14
10108: PPUSH
10109: LD_EXP 15
10113: PPUSH
10114: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_STRING D1-Roth-9
10125: PPUSH
10126: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10130: LD_EXP 14
10134: PPUSH
10135: LD_STRING D1-JMM-10
10137: PPUSH
10138: CALL_OW 88
// InGameOff ;
10142: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10146: LD_STRING M1
10148: PPUSH
10149: CALL_OW 337
// if Difficulty < 3 then
10153: LD_OWVAR 67
10157: PUSH
10158: LD_INT 3
10160: LESS
10161: IFFALSE 10173
// ChangeSideFog ( 4 , 7 ) ;
10163: LD_INT 4
10165: PPUSH
10166: LD_INT 7
10168: PPUSH
10169: CALL_OW 343
// SaveForQuickRestart ;
10173: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10177: LD_INT 7
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_INT 2
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 80
// wait ( 0 0$3 ) ;
10193: LD_INT 105
10195: PPUSH
10196: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10200: LD_EXP 15
10204: PPUSH
10205: LD_INT 124
10207: PPUSH
10208: LD_INT 18
10210: PPUSH
10211: CALL_OW 111
// AddComInvisible ( Roth ) ;
10215: LD_EXP 15
10219: PPUSH
10220: CALL_OW 212
// wait ( 0 0$30 ) ;
10224: LD_INT 1050
10226: PPUSH
10227: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10231: LD_EXP 15
10235: PPUSH
10236: LD_INT 2100
10238: PPUSH
10239: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10243: LD_EXP 15
10247: PPUSH
10248: LD_INT 156
10250: PPUSH
10251: LD_INT 20
10253: PPUSH
10254: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10258: LD_EXP 15
10262: PPUSH
10263: LD_INT 178
10265: PPUSH
10266: LD_INT 42
10268: PPUSH
10269: CALL_OW 171
// AddComInvisible ( Roth ) ;
10273: LD_EXP 15
10277: PPUSH
10278: CALL_OW 212
// end ;
10282: LD_VAR 0 1
10286: RET
// every 0 0$1 do var i , tmp ;
10287: GO 10289
10289: DISABLE
10290: LD_INT 0
10292: PPUSH
10293: PPUSH
// begin tmp := selected union friends ;
10294: LD_ADDR_VAR 0 2
10298: PUSH
10299: LD_EXP 3
10303: PUSH
10304: LD_EXP 4
10308: UNION
10309: ST_TO_ADDR
// if not tmp then
10310: LD_VAR 0 2
10314: NOT
10315: IFFALSE 10319
// exit ;
10317: GO 10391
// repeat wait ( 0 0$1 ) ;
10319: LD_INT 35
10321: PPUSH
10322: CALL_OW 67
// for i in tmp do
10326: LD_ADDR_VAR 0 1
10330: PUSH
10331: LD_VAR 0 2
10335: PUSH
10336: FOR_IN
10337: IFFALSE 10382
// if CanSpot ( JMM , i ) then
10339: LD_EXP 14
10343: PPUSH
10344: LD_VAR 0 1
10348: PPUSH
10349: CALL 9050 0 2
10353: IFFALSE 10380
// begin tmp := tmp diff i ;
10355: LD_ADDR_VAR 0 2
10359: PUSH
10360: LD_VAR 0 2
10364: PUSH
10365: LD_VAR 0 1
10369: DIFF
10370: ST_TO_ADDR
// Spot ( i ) ;
10371: LD_VAR 0 1
10375: PPUSH
10376: CALL 10394 0 1
// end ;
10380: GO 10336
10382: POP
10383: POP
// until not tmp ;
10384: LD_VAR 0 2
10388: NOT
10389: IFFALSE 10319
// end ;
10391: PPOPN 2
10393: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10394: LD_INT 0
10396: PPUSH
10397: PPUSH
10398: PPUSH
10399: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10400: LD_VAR 0 1
10404: NOT
10405: PUSH
10406: LD_VAR 0 1
10410: PPUSH
10411: CALL_OW 255
10415: PUSH
10416: LD_INT 4
10418: NONEQUAL
10419: OR
10420: PUSH
10421: LD_VAR 0 1
10425: PPUSH
10426: CALL_OW 555
10430: OR
10431: PUSH
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 302
10441: NOT
10442: OR
10443: IFFALSE 10447
// exit ;
10445: GO 12329
// InGameOn ;
10447: CALL_OW 8
// side := 7 ;
10451: LD_ADDR_VAR 0 4
10455: PUSH
10456: LD_INT 7
10458: ST_TO_ADDR
// joined := false ;
10459: LD_ADDR_VAR 0 5
10463: PUSH
10464: LD_INT 0
10466: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10467: LD_ADDR_VAR 0 3
10471: PUSH
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 310
10481: ST_TO_ADDR
// if building then
10482: LD_VAR 0 3
10486: IFFALSE 10545
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10488: LD_EXP 14
10492: PPUSH
10493: LD_VAR 0 1
10497: PPUSH
10498: CALL_OW 255
10502: PPUSH
10503: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10507: LD_EXP 14
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: CALL_OW 120
// repeat wait ( 3 ) ;
10521: LD_INT 3
10523: PPUSH
10524: CALL_OW 67
// until IsInUnit ( JMM ) ;
10528: LD_EXP 14
10532: PPUSH
10533: CALL_OW 310
10537: IFFALSE 10521
// DialogueOn ;
10539: CALL_OW 6
// end else
10543: GO 10577
// begin ComTurnUnit ( JMM , unit ) ;
10545: LD_EXP 14
10549: PPUSH
10550: LD_VAR 0 1
10554: PPUSH
10555: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10559: LD_VAR 0 1
10563: PPUSH
10564: LD_EXP 14
10568: PPUSH
10569: CALL_OW 119
// DialogueOn ;
10573: CALL_OW 6
// end ; if unit = Joan then
10577: LD_VAR 0 1
10581: PUSH
10582: LD_EXP 36
10586: EQUAL
10587: IFFALSE 10697
// begin joined := true ;
10589: LD_ADDR_VAR 0 5
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// if Joan in selected then
10597: LD_EXP 36
10601: PUSH
10602: LD_EXP 3
10606: IN
10607: IFFALSE 10635
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10609: LD_EXP 36
10613: PPUSH
10614: LD_STRING D3-Joan-Joan-1
10616: PPUSH
10617: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10621: LD_EXP 14
10625: PPUSH
10626: LD_STRING D3-Joan-JMM-1
10628: PPUSH
10629: CALL_OW 88
// end else
10633: GO 10695
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10635: LD_EXP 36
10639: PPUSH
10640: LD_STRING D4-Joan-Joan-1
10642: PPUSH
10643: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10647: LD_EXP 14
10651: PPUSH
10652: LD_STRING D4-Joan-JMM-1
10654: PPUSH
10655: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10659: LD_EXP 36
10663: PPUSH
10664: LD_STRING D4-Joan-Joan-2
10666: PPUSH
10667: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10671: LD_EXP 14
10675: PPUSH
10676: LD_STRING D4-Joan-JMM-2
10678: PPUSH
10679: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10683: LD_EXP 36
10687: PPUSH
10688: LD_STRING D4-Joan-Joan-3
10690: PPUSH
10691: CALL_OW 88
// end ; end else
10695: GO 12137
// if unit = Lisa then
10697: LD_VAR 0 1
10701: PUSH
10702: LD_EXP 23
10706: EQUAL
10707: IFFALSE 10899
// begin if Lisa in selected then
10709: LD_EXP 23
10713: PUSH
10714: LD_EXP 3
10718: IN
10719: IFFALSE 10832
// begin if GetSide ( Joan ) = 7 then
10721: LD_EXP 36
10725: PPUSH
10726: CALL_OW 255
10730: PUSH
10731: LD_INT 7
10733: EQUAL
10734: IFFALSE 10798
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10736: LD_EXP 23
10740: PPUSH
10741: LD_STRING D3-LisaJ-Lisa-1
10743: PPUSH
10744: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10748: LD_EXP 14
10752: PPUSH
10753: LD_STRING D3-LisaJ-JMM-1
10755: PPUSH
10756: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10760: LD_EXP 23
10764: PPUSH
10765: LD_STRING D3-LisaJ-Lisa-2
10767: PPUSH
10768: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10772: LD_EXP 14
10776: PPUSH
10777: LD_STRING D3-LisaJ-JMM-2
10779: PPUSH
10780: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10784: LD_EXP 23
10788: PPUSH
10789: LD_STRING D3-LisaJ-Lisa-3
10791: PPUSH
10792: CALL_OW 88
// end else
10796: GO 10830
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10798: LD_EXP 23
10802: PPUSH
10803: LD_STRING D3-LisaL-Lisa-1
10805: PPUSH
10806: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10810: LD_EXP 14
10814: PPUSH
10815: LD_STRING D3-LisaL-JMM-1
10817: PPUSH
10818: CALL_OW 88
// joined := true ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// end ; end else
10830: GO 10897
// begin if GetSide ( Joan ) = 7 then
10832: LD_EXP 36
10836: PPUSH
10837: CALL_OW 255
10841: PUSH
10842: LD_INT 7
10844: EQUAL
10845: IFFALSE 10885
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10847: LD_EXP 23
10851: PPUSH
10852: LD_STRING D4-LisaJ-Lisa-1
10854: PPUSH
10855: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10859: LD_EXP 14
10863: PPUSH
10864: LD_STRING D4-LisaJ-JMM-1
10866: PPUSH
10867: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10871: LD_EXP 23
10875: PPUSH
10876: LD_STRING D4-LisaJ-Lisa-2
10878: PPUSH
10879: CALL_OW 88
// end else
10883: GO 10897
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10885: LD_EXP 23
10889: PPUSH
10890: LD_STRING D4-LisaL-Lisa-1
10892: PPUSH
10893: CALL_OW 88
// end ; end ; end else
10897: GO 12137
// if unit = Frank then
10899: LD_VAR 0 1
10903: PUSH
10904: LD_EXP 33
10908: EQUAL
10909: IFFALSE 11049
// begin joined := true ;
10911: LD_ADDR_VAR 0 5
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// if Frank in selected then
10919: LD_EXP 33
10923: PUSH
10924: LD_EXP 3
10928: IN
10929: IFFALSE 10999
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10931: LD_EXP 33
10935: PPUSH
10936: LD_STRING D3-Frank-Frank-1
10938: PPUSH
10939: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10943: LD_EXP 14
10947: PPUSH
10948: LD_STRING D3-Frank-JMM-1
10950: PPUSH
10951: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10955: LD_EXP 33
10959: PPUSH
10960: LD_STRING D3-Frank-Frank-2
10962: PPUSH
10963: CALL_OW 88
// if reached_lab then
10967: LD_EXP 5
10971: IFFALSE 10997
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10973: LD_EXP 14
10977: PPUSH
10978: LD_STRING D3-Frank-JMM-2
10980: PPUSH
10981: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10985: LD_EXP 33
10989: PPUSH
10990: LD_STRING D3-Frank-Frank-3
10992: PPUSH
10993: CALL_OW 88
// end ; end else
10997: GO 11047
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10999: LD_EXP 33
11003: PPUSH
11004: LD_STRING D4-Frank-Frank-1
11006: PPUSH
11007: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11011: LD_EXP 14
11015: PPUSH
11016: LD_STRING D4-Frank-JMM-1
11018: PPUSH
11019: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11023: LD_EXP 33
11027: PPUSH
11028: LD_STRING D4-Frank-Frank-2
11030: PPUSH
11031: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11035: LD_EXP 14
11039: PPUSH
11040: LD_STRING D4-Frank-JMM-2
11042: PPUSH
11043: CALL_OW 88
// end ; end else
11047: GO 12137
// if unit = Brown then
11049: LD_VAR 0 1
11053: PUSH
11054: LD_EXP 28
11058: EQUAL
11059: IFFALSE 11155
// begin if Brown in selected or gamma_commander = 2 then
11061: LD_EXP 28
11065: PUSH
11066: LD_EXP 3
11070: IN
11071: PUSH
11072: LD_EXP 10
11076: PUSH
11077: LD_INT 2
11079: EQUAL
11080: OR
11081: IFFALSE 11117
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11083: LD_EXP 28
11087: PPUSH
11088: LD_STRING D3-Soldier1-Sol1-1
11090: PPUSH
11091: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11095: LD_EXP 14
11099: PPUSH
11100: LD_STRING D6-JMM-Brown-1
11102: PPUSH
11103: CALL_OW 88
// joined := true ;
11107: LD_ADDR_VAR 0 5
11111: PUSH
11112: LD_INT 1
11114: ST_TO_ADDR
// end else
11115: GO 11153
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11117: LD_EXP 28
11121: PPUSH
11122: LD_STRING D4-Soldier2-Sol1-1
11124: PPUSH
11125: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11129: LD_EXP 14
11133: PPUSH
11134: LD_STRING D4-Soldier1-JMM-1
11136: PPUSH
11137: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11141: LD_EXP 28
11145: PPUSH
11146: LD_STRING D4-Soldier2-Sol1-2
11148: PPUSH
11149: CALL_OW 88
// end ; end else
11153: GO 12137
// if unit = Donaldson then
11155: LD_VAR 0 1
11159: PUSH
11160: LD_EXP 24
11164: EQUAL
11165: IFFALSE 11261
// begin if Donaldson in selected or gamma_commander = 1 then
11167: LD_EXP 24
11171: PUSH
11172: LD_EXP 3
11176: IN
11177: PUSH
11178: LD_EXP 10
11182: PUSH
11183: LD_INT 1
11185: EQUAL
11186: OR
11187: IFFALSE 11223
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11189: LD_EXP 24
11193: PPUSH
11194: LD_STRING D3-Soldier2-FSol2-1
11196: PPUSH
11197: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11201: LD_EXP 14
11205: PPUSH
11206: LD_STRING D3-Soldier2-JMM-1
11208: PPUSH
11209: CALL_OW 88
// joined := true ;
11213: LD_ADDR_VAR 0 5
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// end else
11221: GO 11259
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11223: LD_VAR 0 1
11227: PPUSH
11228: LD_STRING D4-Soldier1-FSol1-1
11230: PPUSH
11231: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11235: LD_EXP 14
11239: PPUSH
11240: LD_STRING D4-Soldier1-JMM-1
11242: PPUSH
11243: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: LD_STRING D4-Soldier1-FSol1-2
11254: PPUSH
11255: CALL_OW 88
// end ; end else
11259: GO 12137
// if unit = Cyrus then
11261: LD_VAR 0 1
11265: PUSH
11266: LD_EXP 26
11270: EQUAL
11271: IFFALSE 11345
// begin if Cyrus in selected then
11273: LD_EXP 26
11277: PUSH
11278: LD_EXP 3
11282: IN
11283: IFFALSE 11319
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11285: LD_EXP 26
11289: PPUSH
11290: LD_STRING D3-Cyrus-Cyrus-1
11292: PPUSH
11293: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11297: LD_EXP 14
11301: PPUSH
11302: LD_STRING D3-Cyrus-JMM-1
11304: PPUSH
11305: CALL_OW 88
// joined := true ;
11309: LD_ADDR_VAR 0 5
11313: PUSH
11314: LD_INT 1
11316: ST_TO_ADDR
// end else
11317: GO 11343
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11319: LD_EXP 26
11323: PPUSH
11324: LD_STRING D4-Cyrus-Cyrus-1
11326: PPUSH
11327: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11331: LD_EXP 14
11335: PPUSH
11336: LD_STRING D4-Cyrus-JMM-1
11338: PPUSH
11339: CALL_OW 88
// end ; end else
11343: GO 12137
// if unit = Bobby then
11345: LD_VAR 0 1
11349: PUSH
11350: LD_EXP 25
11354: EQUAL
11355: IFFALSE 11441
// begin if Bobby in selected then
11357: LD_EXP 25
11361: PUSH
11362: LD_EXP 3
11366: IN
11367: IFFALSE 11403
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11369: LD_EXP 25
11373: PPUSH
11374: LD_STRING D3-Bobby-Bobby-1
11376: PPUSH
11377: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11381: LD_EXP 14
11385: PPUSH
11386: LD_STRING D3-Bobby-JMM-1
11388: PPUSH
11389: CALL_OW 88
// joined := true ;
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// end else
11401: GO 11439
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11403: LD_EXP 25
11407: PPUSH
11408: LD_STRING D4-Bobby-Bobby-1
11410: PPUSH
11411: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11415: LD_EXP 14
11419: PPUSH
11420: LD_STRING D4-Bobby-JMM-1
11422: PPUSH
11423: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11427: LD_EXP 25
11431: PPUSH
11432: LD_STRING D4-Bobby-Bobby-2
11434: PPUSH
11435: CALL_OW 88
// end ; end else
11439: GO 12137
// if unit = Cornel then
11441: LD_VAR 0 1
11445: PUSH
11446: LD_EXP 31
11450: EQUAL
11451: IFFALSE 11549
// begin if Cornel in selected then
11453: LD_EXP 31
11457: PUSH
11458: LD_EXP 3
11462: IN
11463: IFFALSE 11511
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11465: LD_EXP 31
11469: PPUSH
11470: LD_STRING D3-Mark-Corn-1
11472: PPUSH
11473: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11477: LD_EXP 14
11481: PPUSH
11482: LD_STRING D3-Mark-JMM-1
11484: PPUSH
11485: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11489: LD_EXP 31
11493: PPUSH
11494: LD_STRING D3-Mark-Corn-2
11496: PPUSH
11497: CALL_OW 88
// joined := true ;
11501: LD_ADDR_VAR 0 5
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// end else
11509: GO 11547
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11511: LD_EXP 31
11515: PPUSH
11516: LD_STRING D4-Mark-Corn-1
11518: PPUSH
11519: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11523: LD_EXP 14
11527: PPUSH
11528: LD_STRING D4-Mark-JMM-1
11530: PPUSH
11531: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11535: LD_EXP 31
11539: PPUSH
11540: LD_STRING D4-Mark-Corn-2
11542: PPUSH
11543: CALL_OW 88
// end ; end else
11547: GO 12137
// if unit = Gary then
11549: LD_VAR 0 1
11553: PUSH
11554: LD_EXP 32
11558: EQUAL
11559: IFFALSE 11643
// begin if Gary in selected then
11561: LD_EXP 32
11565: PUSH
11566: LD_EXP 3
11570: IN
11571: IFFALSE 11607
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11573: LD_EXP 32
11577: PPUSH
11578: LD_STRING D3-Gary-Gary-1
11580: PPUSH
11581: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11585: LD_EXP 14
11589: PPUSH
11590: LD_STRING D3-Gary-JMM-1
11592: PPUSH
11593: CALL_OW 88
// joined := true ;
11597: LD_ADDR_VAR 0 5
11601: PUSH
11602: LD_INT 1
11604: ST_TO_ADDR
// end else
11605: GO 11641
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11607: LD_EXP 32
11611: PPUSH
11612: LD_STRING D4-Gary-Gary-1
11614: PPUSH
11615: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11619: LD_EXP 32
11623: PPUSH
11624: LD_INT 1
11626: PPUSH
11627: CALL_OW 235
// DialogueOff ;
11631: CALL_OW 7
// InGameOff ;
11635: CALL_OW 9
// exit ;
11639: GO 12329
// end ; end else
11641: GO 12137
// if unit = Kikuchi then
11643: LD_VAR 0 1
11647: PUSH
11648: LD_EXP 34
11652: EQUAL
11653: IFFALSE 11737
// begin if Kikuchi in selected then
11655: LD_EXP 34
11659: PUSH
11660: LD_EXP 3
11664: IN
11665: IFFALSE 11701
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11667: LD_EXP 34
11671: PPUSH
11672: LD_STRING D3-Yamako-Yam-1
11674: PPUSH
11675: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11679: LD_EXP 14
11683: PPUSH
11684: LD_STRING D3-Soldier2-JMM-1
11686: PPUSH
11687: CALL_OW 88
// joined := true ;
11691: LD_ADDR_VAR 0 5
11695: PUSH
11696: LD_INT 1
11698: ST_TO_ADDR
// end else
11699: GO 11735
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11701: LD_EXP 34
11705: PPUSH
11706: LD_STRING D4-Yamako-Yam-1
11708: PPUSH
11709: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11713: LD_EXP 34
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 235
// DialogueOff ;
11725: CALL_OW 7
// InGameOff ;
11729: CALL_OW 9
// exit ;
11733: GO 12329
// end ; end else
11735: GO 12137
// if unit = Gladstone then
11737: LD_VAR 0 1
11741: PUSH
11742: LD_EXP 29
11746: EQUAL
11747: IFFALSE 11821
// begin if Gladstone in selected then
11749: LD_EXP 29
11753: PUSH
11754: LD_EXP 3
11758: IN
11759: IFFALSE 11795
// begin joined := true ;
11761: LD_ADDR_VAR 0 5
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11769: LD_EXP 14
11773: PPUSH
11774: LD_STRING D3-Tim-JMM-1
11776: PPUSH
11777: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11781: LD_EXP 29
11785: PPUSH
11786: LD_STRING D3-Tim-Glad-1
11788: PPUSH
11789: CALL_OW 88
// end else
11793: GO 11819
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11795: LD_EXP 14
11799: PPUSH
11800: LD_STRING D4-Tim-JMM-1
11802: PPUSH
11803: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11807: LD_EXP 29
11811: PPUSH
11812: LD_STRING D4-Tim-Glad-1
11814: PPUSH
11815: CALL_OW 88
// end ; end else
11819: GO 12137
// if unit = Denis then
11821: LD_VAR 0 1
11825: PUSH
11826: LD_EXP 27
11830: EQUAL
11831: IFFALSE 11867
// begin joined := true ;
11833: LD_ADDR_VAR 0 5
11837: PUSH
11838: LD_INT 1
11840: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11841: LD_EXP 27
11845: PPUSH
11846: LD_STRING D3-Denis-Den-1
11848: PPUSH
11849: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11853: LD_EXP 14
11857: PPUSH
11858: LD_STRING D3-Denis-JMM-1
11860: PPUSH
11861: CALL_OW 88
// end else
11865: GO 12137
// if unit = Simms then
11867: LD_VAR 0 1
11871: PUSH
11872: LD_EXP 35
11876: EQUAL
11877: IFFALSE 11913
// begin joined := true ;
11879: LD_ADDR_VAR 0 5
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11887: LD_EXP 35
11891: PPUSH
11892: LD_STRING D3-Simms-Sim-1
11894: PPUSH
11895: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11899: LD_EXP 14
11903: PPUSH
11904: LD_STRING D3-Simms-JMM-1
11906: PPUSH
11907: CALL_OW 88
// end else
11911: GO 12137
// if unit = DeltaDoctor then
11913: LD_VAR 0 1
11917: PUSH
11918: LD_EXP 37
11922: EQUAL
11923: IFFALSE 11959
// begin joined := true ;
11925: LD_ADDR_VAR 0 5
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11933: LD_EXP 37
11937: PPUSH
11938: LD_STRING D3-Soldier1-Sol1-1
11940: PPUSH
11941: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11945: LD_EXP 14
11949: PPUSH
11950: LD_STRING D3-Soldier1-JMM-1
11952: PPUSH
11953: CALL_OW 88
// end else
11957: GO 12137
// begin joined := unit in selected ;
11959: LD_ADDR_VAR 0 5
11963: PUSH
11964: LD_VAR 0 1
11968: PUSH
11969: LD_EXP 3
11973: IN
11974: ST_TO_ADDR
// if joined then
11975: LD_VAR 0 5
11979: IFFALSE 12048
// begin if GetSex ( unit ) = sex_male then
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 258
11990: PUSH
11991: LD_INT 1
11993: EQUAL
11994: IFFALSE 12022
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_STRING D3-Soldier1-Sol1-1
12003: PPUSH
12004: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12008: LD_EXP 14
12012: PPUSH
12013: LD_STRING D3-Soldier1-JMM-1
12015: PPUSH
12016: CALL_OW 88
// end else
12020: GO 12046
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: LD_STRING D3-Soldier2-FSol2-1
12029: PPUSH
12030: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12034: LD_EXP 14
12038: PPUSH
12039: LD_STRING D3-Soldier2-JMM-1
12041: PPUSH
12042: CALL_OW 88
// end ; end else
12046: GO 12137
// begin if GetSex ( unit ) = sex_male then
12048: LD_VAR 0 1
12052: PPUSH
12053: CALL_OW 258
12057: PUSH
12058: LD_INT 1
12060: EQUAL
12061: IFFALSE 12101
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_STRING D4-Soldier2-Sol1-1
12070: PPUSH
12071: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12075: LD_EXP 14
12079: PPUSH
12080: LD_STRING D4-Soldier2-JMM-1
12082: PPUSH
12083: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12087: LD_VAR 0 1
12091: PPUSH
12092: LD_STRING D4-Soldier2-Sol2-1
12094: PPUSH
12095: CALL_OW 88
// end else
12099: GO 12137
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_STRING D4-Soldier1-FSol1-1
12108: PPUSH
12109: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12113: LD_EXP 14
12117: PPUSH
12118: LD_STRING D4-Soldier1-JMM-1
12120: PPUSH
12121: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12125: LD_VAR 0 1
12129: PPUSH
12130: LD_STRING D4-Soldier1-FSol1-2
12132: PPUSH
12133: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12137: CALL_OW 7
// InGameOff ;
12141: CALL_OW 9
// if building then
12145: LD_VAR 0 3
12149: IFFALSE 12250
// begin SetSide ( JMM , side ) ;
12151: LD_EXP 14
12155: PPUSH
12156: LD_VAR 0 4
12160: PPUSH
12161: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12165: LD_EXP 14
12169: PPUSH
12170: CALL_OW 122
// if joined then
12174: LD_VAR 0 5
12178: IFFALSE 12217
// begin SetSide ( unit , side ) ;
12180: LD_VAR 0 1
12184: PPUSH
12185: LD_VAR 0 4
12189: PPUSH
12190: CALL_OW 235
// SetSide ( building , 1 ) ;
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 235
// ComExitBuilding ( unit ) ;
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 122
// end else
12215: GO 12248
// begin wait ( 0 0$10 ) ;
12217: LD_INT 350
12219: PPUSH
12220: CALL_OW 67
// SetSide ( unit , 1 ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 235
// SetSide ( building , 1 ) ;
12236: LD_VAR 0 3
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: CALL_OW 235
// end ; end else
12248: GO 12329
// begin ComStop ( [ JMM , unit ] ) ;
12250: LD_EXP 14
12254: PUSH
12255: LD_VAR 0 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 141
// if joined then
12268: LD_VAR 0 5
12272: IFFALSE 12290
// SetSide ( unit , side ) else
12274: LD_VAR 0 1
12278: PPUSH
12279: LD_VAR 0 4
12283: PPUSH
12284: CALL_OW 235
12288: GO 12329
// begin repeat wait ( 0 0$1 ) ;
12290: LD_INT 35
12292: PPUSH
12293: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12297: LD_EXP 14
12301: PPUSH
12302: LD_VAR 0 1
12306: PPUSH
12307: CALL_OW 296
12311: PUSH
12312: LD_INT 11
12314: GREATER
12315: IFFALSE 12290
// SetSide ( unit , 1 ) ;
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 235
// end ; end ; end ;
12329: LD_VAR 0 2
12333: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12334: LD_EXP 14
12338: PPUSH
12339: LD_EXP 38
12343: PPUSH
12344: CALL_OW 296
12348: PUSH
12349: LD_INT 6
12351: LESS
12352: PUSH
12353: LD_INT 7
12355: PPUSH
12356: LD_EXP 38
12360: PPUSH
12361: CALL_OW 292
12365: AND
12366: IFFALSE 12424
12368: GO 12370
12370: DISABLE
// begin DialogueOn ;
12371: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12375: LD_EXP 38
12379: PPUSH
12380: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12384: LD_EXP 14
12388: PPUSH
12389: LD_STRING D6-JMM-Mike-1
12391: PPUSH
12392: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12396: LD_EXP 38
12400: PPUSH
12401: LD_STRING D6-Mike-1
12403: PPUSH
12404: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12408: LD_EXP 38
12412: PPUSH
12413: LD_INT 7
12415: PPUSH
12416: CALL_OW 235
// DialogueOff ;
12420: CALL_OW 7
// end ;
12424: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12425: LD_EXP 14
12429: PPUSH
12430: CALL_OW 310
12434: PUSH
12435: LD_INT 47
12437: EQUAL
12438: IFFALSE 12506
12440: GO 12442
12442: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12443: LD_STRING M1a
12445: PPUSH
12446: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12450: LD_INT 13
12452: PPUSH
12453: LD_INT 7
12455: PPUSH
12456: LD_INT 2
12458: PPUSH
12459: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12463: LD_INT 29
12465: PPUSH
12466: LD_INT 7
12468: PPUSH
12469: LD_INT 2
12471: PPUSH
12472: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12476: LD_EXP 14
12480: PPUSH
12481: LD_INT 9
12483: PPUSH
12484: CALL_OW 336
// can_escape := true ;
12488: LD_ADDR_EXP 6
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12496: LD_INT 19
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 424
// end ;
12506: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12507: LD_EXP 16
12511: PPUSH
12512: CALL_OW 256
12516: PUSH
12517: LD_INT 999
12519: LESS
12520: IFFALSE 12571
12522: GO 12524
12524: DISABLE
// begin enable ;
12525: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12526: LD_INT 25
12528: PPUSH
12529: LD_INT 48
12531: PPUSH
12532: CALL_OW 428
12536: PUSH
12537: LD_EXP 16
12541: EQUAL
12542: IFFALSE 12556
// begin RemoveUnit ( Powell ) ;
12544: LD_EXP 16
12548: PPUSH
12549: CALL_OW 64
// disable ;
12553: DISABLE
// end else
12554: GO 12571
// ComMoveXY ( Powell , 25 , 48 ) ;
12556: LD_EXP 16
12560: PPUSH
12561: LD_INT 25
12563: PPUSH
12564: LD_INT 48
12566: PPUSH
12567: CALL_OW 111
// end ;
12571: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12572: LD_INT 22
12574: PUSH
12575: LD_INT 4
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 21
12584: PUSH
12585: LD_INT 1
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: LD_INT 24
12597: PUSH
12598: LD_INT 990
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: PPUSH
12614: CALL_OW 69
12618: PUSH
12619: LD_EXP 15
12623: DIFF
12624: IFFALSE 12768
12626: GO 12628
12628: DISABLE
12629: LD_INT 0
12631: PPUSH
// begin enable ;
12632: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12633: LD_ADDR_VAR 0 1
12637: PUSH
12638: LD_INT 22
12640: PUSH
12641: LD_INT 4
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: LD_INT 21
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 3
12660: PUSH
12661: LD_INT 24
12663: PUSH
12664: LD_INT 990
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 69
12684: PUSH
12685: LD_EXP 15
12689: DIFF
12690: PUSH
12691: FOR_IN
12692: IFFALSE 12766
// begin ComFree ( i ) ;
12694: LD_VAR 0 1
12698: PPUSH
12699: CALL_OW 139
// SetSide ( i , 1 ) ;
12703: LD_VAR 0 1
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12715: LD_VAR 0 1
12719: PPUSH
12720: LD_EXP 14
12724: PPUSH
12725: CALL_OW 296
12729: PUSH
12730: LD_INT 14
12732: LESS
12733: IFFALSE 12764
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12735: LD_VAR 0 1
12739: PPUSH
12740: LD_EXP 14
12744: PPUSH
12745: CALL_OW 250
12749: PPUSH
12750: LD_EXP 14
12754: PPUSH
12755: CALL_OW 251
12759: PPUSH
12760: CALL_OW 114
// end ;
12764: GO 12691
12766: POP
12767: POP
// end ;
12768: PPOPN 1
12770: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12771: LD_INT 22
12773: PUSH
12774: LD_INT 4
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 34
12783: PUSH
12784: LD_INT 12
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: IFFALSE 12881
12801: GO 12803
12803: DISABLE
12804: LD_INT 0
12806: PPUSH
// begin enable ;
12807: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12808: LD_ADDR_VAR 0 1
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 34
12825: PUSH
12826: LD_INT 12
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 69
12841: PUSH
12842: FOR_IN
12843: IFFALSE 12879
// if GetDistUnits ( i , JMM ) < 6 then
12845: LD_VAR 0 1
12849: PPUSH
12850: LD_EXP 14
12854: PPUSH
12855: CALL_OW 296
12859: PUSH
12860: LD_INT 6
12862: LESS
12863: IFFALSE 12877
// SetSide ( i , 7 ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: LD_INT 7
12872: PPUSH
12873: CALL_OW 235
12877: GO 12842
12879: POP
12880: POP
// end ;
12881: PPOPN 1
12883: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12884: LD_EXP 6
12888: PUSH
12889: LD_INT 19
12891: PPUSH
12892: LD_INT 22
12894: PUSH
12895: LD_INT 7
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 21
12904: PUSH
12905: LD_INT 1
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PPUSH
12916: CALL_OW 71
12920: NOT
12921: AND
12922: PUSH
12923: LD_INT 3
12925: PPUSH
12926: CALL_OW 469
12930: NOT
12931: AND
12932: PUSH
12933: LD_INT 5
12935: PPUSH
12936: CALL_OW 469
12940: NOT
12941: AND
12942: IFFALSE 14625
12944: GO 12946
12946: DISABLE
12947: LD_INT 0
12949: PPUSH
12950: PPUSH
12951: PPUSH
12952: PPUSH
12953: PPUSH
// begin m1 := false ;
12954: LD_ADDR_VAR 0 3
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// m2 := false ;
12962: LD_ADDR_VAR 0 4
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
// m3 := false ;
12970: LD_ADDR_VAR 0 5
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12978: LD_ADDR_VAR 0 1
12982: PUSH
12983: LD_EXP 3
12987: PPUSH
12988: LD_INT 22
12990: PUSH
12991: LD_INT 4
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 21
13000: PUSH
13001: LD_INT 1
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 72
13016: PUSH
13017: LD_INT 0
13019: EQUAL
13020: ST_TO_ADDR
// if not all_taken then
13021: LD_VAR 0 1
13025: NOT
13026: IFFALSE 13167
// case Query ( Q1 ) of 1 :
13028: LD_STRING Q1
13030: PPUSH
13031: CALL_OW 97
13035: PUSH
13036: LD_INT 1
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13155
13044: POP
// begin repeat wait ( 0 0$1 ) ;
13045: LD_INT 35
13047: PPUSH
13048: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13052: LD_EXP 3
13056: PPUSH
13057: LD_INT 22
13059: PUSH
13060: LD_INT 4
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 21
13069: PUSH
13070: LD_INT 1
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 72
13085: PUSH
13086: LD_INT 0
13088: EQUAL
13089: PUSH
13090: LD_INT 19
13092: PPUSH
13093: LD_INT 22
13095: PUSH
13096: LD_INT 7
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 1
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 71
13121: NOT
13122: AND
13123: PUSH
13124: LD_INT 3
13126: PPUSH
13127: CALL_OW 469
13131: NOT
13132: AND
13133: PUSH
13134: LD_INT 5
13136: PPUSH
13137: CALL_OW 469
13141: NOT
13142: AND
13143: IFFALSE 13045
// all_taken := true ;
13145: LD_ADDR_VAR 0 1
13149: PUSH
13150: LD_INT 1
13152: ST_TO_ADDR
// end ; 2 :
13153: GO 13167
13155: LD_INT 2
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13166
13163: POP
// ; end ;
13164: GO 13167
13166: POP
// if team_kill_counter < 3 then
13167: LD_EXP 9
13171: PUSH
13172: LD_INT 3
13174: LESS
13175: IFFALSE 13191
// Say ( JMM , D5-JMM-1 ) else
13177: LD_EXP 14
13181: PPUSH
13182: LD_STRING D5-JMM-1
13184: PPUSH
13185: CALL_OW 88
13189: GO 13203
// Say ( JMM , D5-JMM-1a ) ;
13191: LD_EXP 14
13195: PPUSH
13196: LD_STRING D5-JMM-1a
13198: PPUSH
13199: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13203: LD_INT 22
13205: PUSH
13206: LD_INT 7
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 23
13225: PUSH
13226: LD_INT 1
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: PPUSH
13238: CALL_OW 69
13242: PUSH
13243: LD_EXP 14
13247: PUSH
13248: LD_EXP 15
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: DIFF
13257: PUSH
13258: LD_INT 10
13260: GREATEREQUAL
13261: IFFALSE 13270
// SetAchievement ( ACH_TEAM ) ;
13263: LD_STRING ACH_TEAM
13265: PPUSH
13266: CALL_OW 543
// if not invis_used then
13270: LD_EXP 12
13274: NOT
13275: IFFALSE 13291
// begin wait ( 3 ) ;
13277: LD_INT 3
13279: PPUSH
13280: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13284: LD_STRING ACH_NOINVIS
13286: PPUSH
13287: CALL_OW 543
// end ; if not alert then
13291: LD_EXP 13
13295: NOT
13296: IFFALSE 13312
// begin wait ( 3 ) ;
13298: LD_INT 3
13300: PPUSH
13301: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13305: LD_STRING ACH_ALARM
13307: PPUSH
13308: CALL_OW 543
// end ; if tick < 15 15$00 then
13312: LD_OWVAR 1
13316: PUSH
13317: LD_INT 31500
13319: LESS
13320: IFFALSE 13336
// begin wait ( 3 ) ;
13322: LD_INT 3
13324: PPUSH
13325: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13329: LD_STRING ACH_ASPEED_16
13331: PPUSH
13332: CALL_OW 543
// end ; if all_taken then
13336: LD_VAR 0 1
13340: IFFALSE 13362
// begin AddMedal ( All , 1 ) ;
13342: LD_STRING All
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 101
// m1 := true ;
13352: LD_ADDR_VAR 0 3
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// end else
13360: GO 13373
// AddMedal ( All , - 1 ) ;
13362: LD_STRING All
13364: PPUSH
13365: LD_INT 1
13367: NEG
13368: PPUSH
13369: CALL_OW 101
// if team_kill_counter then
13373: LD_EXP 9
13377: IFFALSE 13392
// AddMedal ( Save , - 1 ) else
13379: LD_STRING Save
13381: PPUSH
13382: LD_INT 1
13384: NEG
13385: PPUSH
13386: CALL_OW 101
13390: GO 13410
// begin AddMedal ( Save , 1 ) ;
13392: LD_STRING Save
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 101
// m2 := true ;
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: LD_INT 1
13409: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13410: LD_EXP 8
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: LD_INT 2
13420: PUSH
13421: LD_INT 1
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: LD_OWVAR 67
13437: ARRAY
13438: GREATEREQUAL
13439: IFFALSE 13454
// AddMedal ( Friendship , - 1 ) else
13441: LD_STRING Friendship
13443: PPUSH
13444: LD_INT 1
13446: NEG
13447: PPUSH
13448: CALL_OW 101
13452: GO 13472
// begin AddMedal ( Friendship , 1 ) ;
13454: LD_STRING Friendship
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 101
// m3 := true ;
13464: LD_ADDR_VAR 0 5
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_VAR 0 4
13481: AND
13482: PUSH
13483: LD_VAR 0 5
13487: AND
13488: PUSH
13489: LD_OWVAR 67
13493: PUSH
13494: LD_INT 3
13496: GREATEREQUAL
13497: AND
13498: IFFALSE 13510
// SetAchievementEX ( ACH_AMER , 16 ) ;
13500: LD_STRING ACH_AMER
13502: PPUSH
13503: LD_INT 16
13505: PPUSH
13506: CALL_OW 564
// GiveMedals ( MAIN ) ;
13510: LD_STRING MAIN
13512: PPUSH
13513: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13517: LD_ADDR_VAR 0 2
13521: PUSH
13522: LD_INT 22
13524: PUSH
13525: LD_INT 7
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 3
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 25
13567: PUSH
13568: LD_INT 4
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 5
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 25
13587: PUSH
13588: LD_INT 8
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 25
13597: PUSH
13598: LD_INT 9
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 25
13607: PUSH
13608: LD_INT 16
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13638: LD_VAR 0 2
13642: PUSH
13643: LD_EXP 15
13647: UNION
13648: PUSH
13649: LD_EXP 38
13653: DIFF
13654: PPUSH
13655: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13659: LD_EXP 14
13663: PPUSH
13664: LD_STRING 12a_JMM
13666: PPUSH
13667: CALL_OW 38
// if IsLive ( Roth ) then
13671: LD_EXP 15
13675: PPUSH
13676: CALL_OW 300
13680: IFFALSE 13694
// SaveCharacters ( Roth , 12a_Roth ) ;
13682: LD_EXP 15
13686: PPUSH
13687: LD_STRING 12a_Roth
13689: PPUSH
13690: CALL_OW 38
// if Lisa in tmp then
13694: LD_EXP 23
13698: PUSH
13699: LD_VAR 0 2
13703: IN
13704: IFFALSE 13720
// SaveCharacters ( Lisa , 12a_Lisa ) else
13706: LD_EXP 23
13710: PPUSH
13711: LD_STRING 12a_Lisa
13713: PPUSH
13714: CALL_OW 38
13718: GO 13738
// if Lisa then
13720: LD_EXP 23
13724: IFFALSE 13738
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13726: LD_EXP 23
13730: PPUSH
13731: LD_STRING 12p_Lisa
13733: PPUSH
13734: CALL_OW 38
// if Mike in tmp then
13738: LD_EXP 38
13742: PUSH
13743: LD_VAR 0 2
13747: IN
13748: IFFALSE 13762
// SaveCharacters ( Mike , 12a_Mike ) ;
13750: LD_EXP 38
13754: PPUSH
13755: LD_STRING 12a_Mike
13757: PPUSH
13758: CALL_OW 38
// if Donaldson in tmp then
13762: LD_EXP 24
13766: PUSH
13767: LD_VAR 0 2
13771: IN
13772: IFFALSE 13788
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13774: LD_EXP 24
13778: PPUSH
13779: LD_STRING 12a_Donaldson
13781: PPUSH
13782: CALL_OW 38
13786: GO 13806
// if Donaldson then
13788: LD_EXP 24
13792: IFFALSE 13806
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13794: LD_EXP 24
13798: PPUSH
13799: LD_STRING 12p_Donaldson
13801: PPUSH
13802: CALL_OW 38
// if Bobby in tmp then
13806: LD_EXP 25
13810: PUSH
13811: LD_VAR 0 2
13815: IN
13816: IFFALSE 13832
// SaveCharacters ( Bobby , 12a_Bobby ) else
13818: LD_EXP 25
13822: PPUSH
13823: LD_STRING 12a_Bobby
13825: PPUSH
13826: CALL_OW 38
13830: GO 13850
// if Bobby then
13832: LD_EXP 25
13836: IFFALSE 13850
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13838: LD_EXP 25
13842: PPUSH
13843: LD_STRING 12p_Bobby
13845: PPUSH
13846: CALL_OW 38
// if Cyrus in tmp then
13850: LD_EXP 26
13854: PUSH
13855: LD_VAR 0 2
13859: IN
13860: IFFALSE 13876
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13862: LD_EXP 26
13866: PPUSH
13867: LD_STRING 12a_Cyrus
13869: PPUSH
13870: CALL_OW 38
13874: GO 13894
// if Cyrus then
13876: LD_EXP 26
13880: IFFALSE 13894
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13882: LD_EXP 26
13886: PPUSH
13887: LD_STRING 12p_Cyrus
13889: PPUSH
13890: CALL_OW 38
// if Denis in tmp then
13894: LD_EXP 27
13898: PUSH
13899: LD_VAR 0 2
13903: IN
13904: IFFALSE 13918
// SaveCharacters ( Denis , 12a_Denis ) ;
13906: LD_EXP 27
13910: PPUSH
13911: LD_STRING 12a_Denis
13913: PPUSH
13914: CALL_OW 38
// if Brown in tmp then
13918: LD_EXP 28
13922: PUSH
13923: LD_VAR 0 2
13927: IN
13928: IFFALSE 13944
// SaveCharacters ( Brown , 12a_Brown ) else
13930: LD_EXP 28
13934: PPUSH
13935: LD_STRING 12a_Brown
13937: PPUSH
13938: CALL_OW 38
13942: GO 13968
// if Brown in tmp then
13944: LD_EXP 28
13948: PUSH
13949: LD_VAR 0 2
13953: IN
13954: IFFALSE 13968
// SaveCharacters ( Brown , 12p_Brown ) ;
13956: LD_EXP 28
13960: PPUSH
13961: LD_STRING 12p_Brown
13963: PPUSH
13964: CALL_OW 38
// if Gladstone in tmp then
13968: LD_EXP 29
13972: PUSH
13973: LD_VAR 0 2
13977: IN
13978: IFFALSE 13994
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13980: LD_EXP 29
13984: PPUSH
13985: LD_STRING 12a_Gladstone
13987: PPUSH
13988: CALL_OW 38
13992: GO 14012
// if Gladstone then
13994: LD_EXP 29
13998: IFFALSE 14012
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14000: LD_EXP 29
14004: PPUSH
14005: LD_STRING 12p_Gladstone
14007: PPUSH
14008: CALL_OW 38
// if Houten in tmp then
14012: LD_EXP 30
14016: PUSH
14017: LD_VAR 0 2
14021: IN
14022: IFFALSE 14038
// SaveCharacters ( Houten , 12a_Houten ) else
14024: LD_EXP 30
14028: PPUSH
14029: LD_STRING 12a_Houten
14031: PPUSH
14032: CALL_OW 38
14036: GO 14056
// if Houten then
14038: LD_EXP 30
14042: IFFALSE 14056
// SaveCharacters ( Houten , 12p_Houten ) ;
14044: LD_EXP 30
14048: PPUSH
14049: LD_STRING 12p_Houten
14051: PPUSH
14052: CALL_OW 38
// if Cornel in tmp then
14056: LD_EXP 31
14060: PUSH
14061: LD_VAR 0 2
14065: IN
14066: IFFALSE 14082
// SaveCharacters ( Cornel , 12a_Cornell ) else
14068: LD_EXP 31
14072: PPUSH
14073: LD_STRING 12a_Cornell
14075: PPUSH
14076: CALL_OW 38
14080: GO 14100
// if Cornel then
14082: LD_EXP 31
14086: IFFALSE 14100
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14088: LD_EXP 31
14092: PPUSH
14093: LD_STRING 12p_Cornell
14095: PPUSH
14096: CALL_OW 38
// if Gary in tmp then
14100: LD_EXP 32
14104: PUSH
14105: LD_VAR 0 2
14109: IN
14110: IFFALSE 14126
// SaveCharacters ( Gary , 12a_Gary ) else
14112: LD_EXP 32
14116: PPUSH
14117: LD_STRING 12a_Gary
14119: PPUSH
14120: CALL_OW 38
14124: GO 14144
// if Gary then
14126: LD_EXP 32
14130: IFFALSE 14144
// SaveCharacters ( Gary , 12p_Gary ) ;
14132: LD_EXP 32
14136: PPUSH
14137: LD_STRING 12p_Gary
14139: PPUSH
14140: CALL_OW 38
// if Frank in tmp then
14144: LD_EXP 33
14148: PUSH
14149: LD_VAR 0 2
14153: IN
14154: IFFALSE 14168
// SaveCharacters ( Frank , 12a_Frank ) ;
14156: LD_EXP 33
14160: PPUSH
14161: LD_STRING 12a_Frank
14163: PPUSH
14164: CALL_OW 38
// if Kikuchi in tmp then
14168: LD_EXP 34
14172: PUSH
14173: LD_VAR 0 2
14177: IN
14178: IFFALSE 14194
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14180: LD_EXP 34
14184: PPUSH
14185: LD_STRING 12a_Kikuchi
14187: PPUSH
14188: CALL_OW 38
14192: GO 14212
// if Kikuchi then
14194: LD_EXP 34
14198: IFFALSE 14212
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14200: LD_EXP 34
14204: PPUSH
14205: LD_STRING 12p_Kikuchi
14207: PPUSH
14208: CALL_OW 38
// if Simms in tmp then
14212: LD_EXP 35
14216: PUSH
14217: LD_VAR 0 2
14221: IN
14222: IFFALSE 14236
// SaveCharacters ( Simms , 12a_Simms ) ;
14224: LD_EXP 35
14228: PPUSH
14229: LD_STRING 12a_Simms
14231: PPUSH
14232: CALL_OW 38
// if Joan in tmp then
14236: LD_EXP 36
14240: PUSH
14241: LD_VAR 0 2
14245: IN
14246: IFFALSE 14260
// SaveCharacters ( Joan , 12a_Joan ) ;
14248: LD_EXP 36
14252: PPUSH
14253: LD_STRING 12a_Joan
14255: PPUSH
14256: CALL_OW 38
// if DeltaDoctor in tmp then
14260: LD_EXP 37
14264: PUSH
14265: LD_VAR 0 2
14269: IN
14270: IFFALSE 14284
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14272: LD_EXP 37
14276: PPUSH
14277: LD_STRING 12a_DeltaDoctor
14279: PPUSH
14280: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: LD_VAR 0 2
14293: PUSH
14294: LD_EXP 14
14298: PUSH
14299: LD_EXP 15
14303: PUSH
14304: LD_EXP 23
14308: PUSH
14309: LD_EXP 24
14313: PUSH
14314: LD_EXP 25
14318: PUSH
14319: LD_EXP 26
14323: PUSH
14324: LD_EXP 27
14328: PUSH
14329: LD_EXP 28
14333: PUSH
14334: LD_EXP 29
14338: PUSH
14339: LD_EXP 30
14343: PUSH
14344: LD_EXP 31
14348: PUSH
14349: LD_EXP 32
14353: PUSH
14354: LD_EXP 33
14358: PUSH
14359: LD_EXP 34
14363: PUSH
14364: LD_EXP 35
14368: PUSH
14369: LD_EXP 36
14373: PUSH
14374: LD_EXP 37
14378: PUSH
14379: LD_EXP 38
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: DIFF
14404: ST_TO_ADDR
// if tmp then
14405: LD_VAR 0 2
14409: IFFALSE 14423
// SaveCharacters ( tmp , 12a_others ) ;
14411: LD_VAR 0 2
14415: PPUSH
14416: LD_STRING 12a_others
14418: PPUSH
14419: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14423: LD_ADDR_VAR 0 2
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 1
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 23
14440: PUSH
14441: LD_INT 1
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 22
14463: PUSH
14464: LD_INT 4
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 69
14485: PUSH
14486: LD_EXP 14
14490: PUSH
14491: LD_EXP 15
14495: PUSH
14496: LD_EXP 23
14500: PUSH
14501: LD_EXP 24
14505: PUSH
14506: LD_EXP 25
14510: PUSH
14511: LD_EXP 26
14515: PUSH
14516: LD_EXP 27
14520: PUSH
14521: LD_EXP 28
14525: PUSH
14526: LD_EXP 29
14530: PUSH
14531: LD_EXP 30
14535: PUSH
14536: LD_EXP 31
14540: PUSH
14541: LD_EXP 32
14545: PUSH
14546: LD_EXP 33
14550: PUSH
14551: LD_EXP 34
14555: PUSH
14556: LD_EXP 35
14560: PUSH
14561: LD_EXP 36
14565: PUSH
14566: LD_EXP 37
14570: PUSH
14571: LD_EXP 16
14575: PUSH
14576: LD_EXP 38
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: DIFF
14602: ST_TO_ADDR
// if tmp then
14603: LD_VAR 0 2
14607: IFFALSE 14621
// SaveCharacters ( tmp , 12p_others ) ;
14609: LD_VAR 0 2
14613: PPUSH
14614: LD_STRING 12p_others
14616: PPUSH
14617: CALL_OW 38
// YouWin ;
14621: CALL_OW 103
// end ; end_of_file
14625: PPOPN 5
14627: END
// on SailEvent ( event ) do var tmp ;
14628: LD_INT 0
14630: PPUSH
// begin if event = 1 then
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 1
14638: EQUAL
14639: IFFALSE 14712
// begin if not mobile_patrol then
14641: LD_EXP 17
14645: NOT
14646: IFFALSE 14650
// exit ;
14648: GO 14712
// tmp := mobile_patrol [ mobile_patrol ] ;
14650: LD_ADDR_VAR 0 2
14654: PUSH
14655: LD_EXP 17
14659: PUSH
14660: LD_EXP 17
14664: ARRAY
14665: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14666: LD_ADDR_EXP 17
14670: PUSH
14671: LD_EXP 17
14675: PPUSH
14676: LD_EXP 17
14680: PPUSH
14681: CALL_OW 3
14685: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14686: LD_VAR 0 2
14690: PPUSH
14691: LD_EXP 18
14695: PUSH
14696: LD_EXP 17
14700: PUSH
14701: LD_INT 1
14703: PLUS
14704: ARRAY
14705: PPUSH
14706: EMPTY
14707: PPUSH
14708: CALL 6751 0 3
// end ; end ;
14712: PPOPN 2
14714: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
14715: LD_VAR 0 1
14719: PPUSH
14720: CALL 31029 0 1
// if un = JMM then
14724: LD_VAR 0 1
14728: PUSH
14729: LD_EXP 14
14733: EQUAL
14734: IFFALSE 14743
// YouLost ( JMM ) ;
14736: LD_STRING JMM
14738: PPUSH
14739: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 255
14752: PUSH
14753: LD_INT 7
14755: EQUAL
14756: PUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 264
14766: PUSH
14767: LD_INT 12
14769: EQUAL
14770: AND
14771: IFFALSE 14780
// YouLost ( Artifact ) ;
14773: LD_STRING Artifact
14775: PPUSH
14776: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14780: LD_VAR 0 1
14784: PPUSH
14785: CALL_OW 255
14789: PUSH
14790: LD_INT 7
14792: EQUAL
14793: PUSH
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL_OW 247
14803: PUSH
14804: LD_INT 1
14806: EQUAL
14807: AND
14808: PUSH
14809: LD_VAR 0 1
14813: PUSH
14814: LD_EXP 15
14818: EQUAL
14819: OR
14820: IFFALSE 14836
// team_kill_counter := team_kill_counter + 1 ;
14822: LD_ADDR_EXP 9
14826: PUSH
14827: LD_EXP 9
14831: PUSH
14832: LD_INT 1
14834: PLUS
14835: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 255
14845: PUSH
14846: LD_INT 1
14848: EQUAL
14849: PUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 247
14859: PUSH
14860: LD_INT 1
14862: EQUAL
14863: AND
14864: IFFALSE 14880
// friends_kill_counter := friends_kill_counter + 1 ;
14866: LD_ADDR_EXP 8
14870: PUSH
14871: LD_EXP 8
14875: PUSH
14876: LD_INT 1
14878: PLUS
14879: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 255
14889: PUSH
14890: LD_INT 1
14892: NONEQUAL
14893: IFFALSE 14897
// exit ;
14895: GO 14974
// if GetControl ( un ) = control_remote then
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 263
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: IFFALSE 14928
// defenders := defenders diff un ;
14912: LD_ADDR_EXP 20
14916: PUSH
14917: LD_EXP 20
14921: PUSH
14922: LD_VAR 0 1
14926: DIFF
14927: ST_TO_ADDR
// if not un in defenders then
14928: LD_VAR 0 1
14932: PUSH
14933: LD_EXP 20
14937: IN
14938: NOT
14939: IFFALSE 14974
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14941: LD_ADDR_EXP 21
14945: PUSH
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 250
14955: PUSH
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL_OW 251
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: ST_TO_ADDR
// Defend ;
14970: CALL 2791 0 0
// end ; end ;
14974: PPOPN 1
14976: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: LD_VAR 0 2
14986: PPUSH
14987: CALL 31149 0 2
// if GetSide ( veh ) <> 1 then
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 255
15000: PUSH
15001: LD_INT 1
15003: NONEQUAL
15004: IFFALSE 15008
// exit ;
15006: GO 15032
// if GetControl ( veh ) = control_remote then
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 263
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: IFFALSE 15032
// Connect ( veh ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL 43424 0 1
// end ;
15032: PPOPN 2
15034: END
// on UnitGoesToRed ( un ) do var i , veh ;
15035: LD_INT 0
15037: PPUSH
15038: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15039: LD_VAR 0 1
15043: PPUSH
15044: CALL_OW 255
15048: PUSH
15049: LD_INT 1
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 1
15057: PPUSH
15058: CALL_OW 263
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: AND
15067: IFFALSE 15078
// ComUnlink ( un ) ;
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 136
// if un = ambar0 then
15078: LD_VAR 0 1
15082: PUSH
15083: LD_INT 18
15085: EQUAL
15086: IFFALSE 15196
// begin uc_side := 1 ;
15088: LD_ADDR_OWVAR 20
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// uc_nation := 1 ;
15096: LD_ADDR_OWVAR 21
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// for i = 1 to 6 do
15104: LD_ADDR_VAR 0 2
15108: PUSH
15109: DOUBLE
15110: LD_INT 1
15112: DEC
15113: ST_TO_ADDR
15114: LD_INT 6
15116: PUSH
15117: FOR_TO
15118: IFFALSE 15194
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15120: LD_INT 3
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: LD_INT 3
15128: PPUSH
15129: LD_INT 4
15131: PPUSH
15132: LD_INT 100
15134: PPUSH
15135: CALL 40333 0 5
// veh := CreateVehicle ;
15139: LD_ADDR_VAR 0 3
15143: PUSH
15144: CALL_OW 45
15148: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15149: LD_VAR 0 3
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15161: LD_VAR 0 3
15165: PPUSH
15166: LD_INT 25
15168: PPUSH
15169: LD_INT 0
15171: PPUSH
15172: CALL_OW 49
// defenders := defenders ^ veh ;
15176: LD_ADDR_EXP 20
15180: PUSH
15181: LD_EXP 20
15185: PUSH
15186: LD_VAR 0 3
15190: ADD
15191: ST_TO_ADDR
// end ;
15192: GO 15117
15194: POP
15195: POP
// end ; end ;
15196: PPOPN 3
15198: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15199: LD_VAR 0 2
15203: PUSH
15204: LD_EXP 16
15208: EQUAL
15209: IFFALSE 15220
// RemoveUnit ( Powell ) ;
15211: LD_EXP 16
15215: PPUSH
15216: CALL_OW 64
// end ;
15220: PPOPN 2
15222: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL 31133 0 1
// end ; end_of_file end_of_file
15232: PPOPN 1
15234: END
// export globalGameSaveCounter ; every 0 0$1 do
15235: GO 15237
15237: DISABLE
// begin enable ;
15238: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15239: LD_STRING updateTimer(
15241: PUSH
15242: LD_OWVAR 1
15246: STR
15247: PUSH
15248: LD_STRING );
15250: STR
15251: PPUSH
15252: CALL_OW 559
// end ;
15256: END
// every 0 0$1 do
15257: GO 15259
15259: DISABLE
// begin globalGameSaveCounter := 0 ;
15260: LD_ADDR_EXP 39
15264: PUSH
15265: LD_INT 0
15267: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15268: LD_STRING setGameSaveCounter(0)
15270: PPUSH
15271: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15275: LD_STRING initStreamRollete();
15277: PPUSH
15278: CALL_OW 559
// InitStreamMode ;
15282: CALL 16608 0 0
// DefineStreamItems ( false ) ;
15286: LD_INT 0
15288: PPUSH
15289: CALL 17072 0 1
// end ;
15293: END
// export function SOS_MapStart ( ) ; begin
15294: LD_INT 0
15296: PPUSH
// if streamModeActive then
15297: LD_EXP 40
15301: IFFALSE 15310
// DefineStreamItems ( true ) ;
15303: LD_INT 1
15305: PPUSH
15306: CALL 17072 0 1
// UpdateLuaVariables ( ) ;
15310: CALL 15327 0 0
// UpdateFactoryWaypoints ( ) ;
15314: CALL 29933 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15318: CALL 30190 0 0
// end ;
15322: LD_VAR 0 1
15326: RET
// function UpdateLuaVariables ( ) ; begin
15327: LD_INT 0
15329: PPUSH
// if globalGameSaveCounter then
15330: LD_EXP 39
15334: IFFALSE 15368
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15336: LD_ADDR_EXP 39
15340: PUSH
15341: LD_EXP 39
15345: PPUSH
15346: CALL 74147 0 1
15350: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15351: LD_STRING setGameSaveCounter(
15353: PUSH
15354: LD_EXP 39
15358: STR
15359: PUSH
15360: LD_STRING )
15362: STR
15363: PPUSH
15364: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15368: LD_STRING setGameDifficulty(
15370: PUSH
15371: LD_OWVAR 67
15375: STR
15376: PUSH
15377: LD_STRING )
15379: STR
15380: PPUSH
15381: CALL_OW 559
// end ;
15385: LD_VAR 0 1
15389: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15390: LD_INT 0
15392: PPUSH
// if p2 = stream_mode then
15393: LD_VAR 0 2
15397: PUSH
15398: LD_INT 100
15400: EQUAL
15401: IFFALSE 16404
// begin if not StreamModeActive then
15403: LD_EXP 40
15407: NOT
15408: IFFALSE 15418
// StreamModeActive := true ;
15410: LD_ADDR_EXP 40
15414: PUSH
15415: LD_INT 1
15417: ST_TO_ADDR
// if p3 = 0 then
15418: LD_VAR 0 3
15422: PUSH
15423: LD_INT 0
15425: EQUAL
15426: IFFALSE 15432
// InitStreamMode ;
15428: CALL 16608 0 0
// if p3 = 1 then
15432: LD_VAR 0 3
15436: PUSH
15437: LD_INT 1
15439: EQUAL
15440: IFFALSE 15450
// sRocket := true ;
15442: LD_ADDR_EXP 45
15446: PUSH
15447: LD_INT 1
15449: ST_TO_ADDR
// if p3 = 2 then
15450: LD_VAR 0 3
15454: PUSH
15455: LD_INT 2
15457: EQUAL
15458: IFFALSE 15468
// sSpeed := true ;
15460: LD_ADDR_EXP 44
15464: PUSH
15465: LD_INT 1
15467: ST_TO_ADDR
// if p3 = 3 then
15468: LD_VAR 0 3
15472: PUSH
15473: LD_INT 3
15475: EQUAL
15476: IFFALSE 15486
// sEngine := true ;
15478: LD_ADDR_EXP 46
15482: PUSH
15483: LD_INT 1
15485: ST_TO_ADDR
// if p3 = 4 then
15486: LD_VAR 0 3
15490: PUSH
15491: LD_INT 4
15493: EQUAL
15494: IFFALSE 15504
// sSpec := true ;
15496: LD_ADDR_EXP 43
15500: PUSH
15501: LD_INT 1
15503: ST_TO_ADDR
// if p3 = 5 then
15504: LD_VAR 0 3
15508: PUSH
15509: LD_INT 5
15511: EQUAL
15512: IFFALSE 15522
// sLevel := true ;
15514: LD_ADDR_EXP 47
15518: PUSH
15519: LD_INT 1
15521: ST_TO_ADDR
// if p3 = 6 then
15522: LD_VAR 0 3
15526: PUSH
15527: LD_INT 6
15529: EQUAL
15530: IFFALSE 15540
// sArmoury := true ;
15532: LD_ADDR_EXP 48
15536: PUSH
15537: LD_INT 1
15539: ST_TO_ADDR
// if p3 = 7 then
15540: LD_VAR 0 3
15544: PUSH
15545: LD_INT 7
15547: EQUAL
15548: IFFALSE 15558
// sRadar := true ;
15550: LD_ADDR_EXP 49
15554: PUSH
15555: LD_INT 1
15557: ST_TO_ADDR
// if p3 = 8 then
15558: LD_VAR 0 3
15562: PUSH
15563: LD_INT 8
15565: EQUAL
15566: IFFALSE 15576
// sBunker := true ;
15568: LD_ADDR_EXP 50
15572: PUSH
15573: LD_INT 1
15575: ST_TO_ADDR
// if p3 = 9 then
15576: LD_VAR 0 3
15580: PUSH
15581: LD_INT 9
15583: EQUAL
15584: IFFALSE 15594
// sHack := true ;
15586: LD_ADDR_EXP 51
15590: PUSH
15591: LD_INT 1
15593: ST_TO_ADDR
// if p3 = 10 then
15594: LD_VAR 0 3
15598: PUSH
15599: LD_INT 10
15601: EQUAL
15602: IFFALSE 15612
// sFire := true ;
15604: LD_ADDR_EXP 52
15608: PUSH
15609: LD_INT 1
15611: ST_TO_ADDR
// if p3 = 11 then
15612: LD_VAR 0 3
15616: PUSH
15617: LD_INT 11
15619: EQUAL
15620: IFFALSE 15630
// sRefresh := true ;
15622: LD_ADDR_EXP 53
15626: PUSH
15627: LD_INT 1
15629: ST_TO_ADDR
// if p3 = 12 then
15630: LD_VAR 0 3
15634: PUSH
15635: LD_INT 12
15637: EQUAL
15638: IFFALSE 15648
// sExp := true ;
15640: LD_ADDR_EXP 54
15644: PUSH
15645: LD_INT 1
15647: ST_TO_ADDR
// if p3 = 13 then
15648: LD_VAR 0 3
15652: PUSH
15653: LD_INT 13
15655: EQUAL
15656: IFFALSE 15666
// sDepot := true ;
15658: LD_ADDR_EXP 55
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// if p3 = 14 then
15666: LD_VAR 0 3
15670: PUSH
15671: LD_INT 14
15673: EQUAL
15674: IFFALSE 15684
// sFlag := true ;
15676: LD_ADDR_EXP 56
15680: PUSH
15681: LD_INT 1
15683: ST_TO_ADDR
// if p3 = 15 then
15684: LD_VAR 0 3
15688: PUSH
15689: LD_INT 15
15691: EQUAL
15692: IFFALSE 15702
// sKamikadze := true ;
15694: LD_ADDR_EXP 64
15698: PUSH
15699: LD_INT 1
15701: ST_TO_ADDR
// if p3 = 16 then
15702: LD_VAR 0 3
15706: PUSH
15707: LD_INT 16
15709: EQUAL
15710: IFFALSE 15720
// sTroll := true ;
15712: LD_ADDR_EXP 65
15716: PUSH
15717: LD_INT 1
15719: ST_TO_ADDR
// if p3 = 17 then
15720: LD_VAR 0 3
15724: PUSH
15725: LD_INT 17
15727: EQUAL
15728: IFFALSE 15738
// sSlow := true ;
15730: LD_ADDR_EXP 66
15734: PUSH
15735: LD_INT 1
15737: ST_TO_ADDR
// if p3 = 18 then
15738: LD_VAR 0 3
15742: PUSH
15743: LD_INT 18
15745: EQUAL
15746: IFFALSE 15756
// sLack := true ;
15748: LD_ADDR_EXP 67
15752: PUSH
15753: LD_INT 1
15755: ST_TO_ADDR
// if p3 = 19 then
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 19
15763: EQUAL
15764: IFFALSE 15774
// sTank := true ;
15766: LD_ADDR_EXP 69
15770: PUSH
15771: LD_INT 1
15773: ST_TO_ADDR
// if p3 = 20 then
15774: LD_VAR 0 3
15778: PUSH
15779: LD_INT 20
15781: EQUAL
15782: IFFALSE 15792
// sRemote := true ;
15784: LD_ADDR_EXP 70
15788: PUSH
15789: LD_INT 1
15791: ST_TO_ADDR
// if p3 = 21 then
15792: LD_VAR 0 3
15796: PUSH
15797: LD_INT 21
15799: EQUAL
15800: IFFALSE 15810
// sPowell := true ;
15802: LD_ADDR_EXP 71
15806: PUSH
15807: LD_INT 1
15809: ST_TO_ADDR
// if p3 = 22 then
15810: LD_VAR 0 3
15814: PUSH
15815: LD_INT 22
15817: EQUAL
15818: IFFALSE 15828
// sTeleport := true ;
15820: LD_ADDR_EXP 74
15824: PUSH
15825: LD_INT 1
15827: ST_TO_ADDR
// if p3 = 23 then
15828: LD_VAR 0 3
15832: PUSH
15833: LD_INT 23
15835: EQUAL
15836: IFFALSE 15846
// sOilTower := true ;
15838: LD_ADDR_EXP 76
15842: PUSH
15843: LD_INT 1
15845: ST_TO_ADDR
// if p3 = 24 then
15846: LD_VAR 0 3
15850: PUSH
15851: LD_INT 24
15853: EQUAL
15854: IFFALSE 15864
// sShovel := true ;
15856: LD_ADDR_EXP 77
15860: PUSH
15861: LD_INT 1
15863: ST_TO_ADDR
// if p3 = 25 then
15864: LD_VAR 0 3
15868: PUSH
15869: LD_INT 25
15871: EQUAL
15872: IFFALSE 15882
// sSheik := true ;
15874: LD_ADDR_EXP 78
15878: PUSH
15879: LD_INT 1
15881: ST_TO_ADDR
// if p3 = 26 then
15882: LD_VAR 0 3
15886: PUSH
15887: LD_INT 26
15889: EQUAL
15890: IFFALSE 15900
// sEarthquake := true ;
15892: LD_ADDR_EXP 80
15896: PUSH
15897: LD_INT 1
15899: ST_TO_ADDR
// if p3 = 27 then
15900: LD_VAR 0 3
15904: PUSH
15905: LD_INT 27
15907: EQUAL
15908: IFFALSE 15918
// sAI := true ;
15910: LD_ADDR_EXP 81
15914: PUSH
15915: LD_INT 1
15917: ST_TO_ADDR
// if p3 = 28 then
15918: LD_VAR 0 3
15922: PUSH
15923: LD_INT 28
15925: EQUAL
15926: IFFALSE 15936
// sCargo := true ;
15928: LD_ADDR_EXP 84
15932: PUSH
15933: LD_INT 1
15935: ST_TO_ADDR
// if p3 = 29 then
15936: LD_VAR 0 3
15940: PUSH
15941: LD_INT 29
15943: EQUAL
15944: IFFALSE 15954
// sDLaser := true ;
15946: LD_ADDR_EXP 85
15950: PUSH
15951: LD_INT 1
15953: ST_TO_ADDR
// if p3 = 30 then
15954: LD_VAR 0 3
15958: PUSH
15959: LD_INT 30
15961: EQUAL
15962: IFFALSE 15972
// sExchange := true ;
15964: LD_ADDR_EXP 86
15968: PUSH
15969: LD_INT 1
15971: ST_TO_ADDR
// if p3 = 31 then
15972: LD_VAR 0 3
15976: PUSH
15977: LD_INT 31
15979: EQUAL
15980: IFFALSE 15990
// sFac := true ;
15982: LD_ADDR_EXP 87
15986: PUSH
15987: LD_INT 1
15989: ST_TO_ADDR
// if p3 = 32 then
15990: LD_VAR 0 3
15994: PUSH
15995: LD_INT 32
15997: EQUAL
15998: IFFALSE 16008
// sPower := true ;
16000: LD_ADDR_EXP 88
16004: PUSH
16005: LD_INT 1
16007: ST_TO_ADDR
// if p3 = 33 then
16008: LD_VAR 0 3
16012: PUSH
16013: LD_INT 33
16015: EQUAL
16016: IFFALSE 16026
// sRandom := true ;
16018: LD_ADDR_EXP 89
16022: PUSH
16023: LD_INT 1
16025: ST_TO_ADDR
// if p3 = 34 then
16026: LD_VAR 0 3
16030: PUSH
16031: LD_INT 34
16033: EQUAL
16034: IFFALSE 16044
// sShield := true ;
16036: LD_ADDR_EXP 90
16040: PUSH
16041: LD_INT 1
16043: ST_TO_ADDR
// if p3 = 35 then
16044: LD_VAR 0 3
16048: PUSH
16049: LD_INT 35
16051: EQUAL
16052: IFFALSE 16062
// sTime := true ;
16054: LD_ADDR_EXP 91
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// if p3 = 36 then
16062: LD_VAR 0 3
16066: PUSH
16067: LD_INT 36
16069: EQUAL
16070: IFFALSE 16080
// sTools := true ;
16072: LD_ADDR_EXP 92
16076: PUSH
16077: LD_INT 1
16079: ST_TO_ADDR
// if p3 = 101 then
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 101
16087: EQUAL
16088: IFFALSE 16098
// sSold := true ;
16090: LD_ADDR_EXP 57
16094: PUSH
16095: LD_INT 1
16097: ST_TO_ADDR
// if p3 = 102 then
16098: LD_VAR 0 3
16102: PUSH
16103: LD_INT 102
16105: EQUAL
16106: IFFALSE 16116
// sDiff := true ;
16108: LD_ADDR_EXP 58
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// if p3 = 103 then
16116: LD_VAR 0 3
16120: PUSH
16121: LD_INT 103
16123: EQUAL
16124: IFFALSE 16134
// sFog := true ;
16126: LD_ADDR_EXP 61
16130: PUSH
16131: LD_INT 1
16133: ST_TO_ADDR
// if p3 = 104 then
16134: LD_VAR 0 3
16138: PUSH
16139: LD_INT 104
16141: EQUAL
16142: IFFALSE 16152
// sReset := true ;
16144: LD_ADDR_EXP 62
16148: PUSH
16149: LD_INT 1
16151: ST_TO_ADDR
// if p3 = 105 then
16152: LD_VAR 0 3
16156: PUSH
16157: LD_INT 105
16159: EQUAL
16160: IFFALSE 16170
// sSun := true ;
16162: LD_ADDR_EXP 63
16166: PUSH
16167: LD_INT 1
16169: ST_TO_ADDR
// if p3 = 106 then
16170: LD_VAR 0 3
16174: PUSH
16175: LD_INT 106
16177: EQUAL
16178: IFFALSE 16188
// sTiger := true ;
16180: LD_ADDR_EXP 59
16184: PUSH
16185: LD_INT 1
16187: ST_TO_ADDR
// if p3 = 107 then
16188: LD_VAR 0 3
16192: PUSH
16193: LD_INT 107
16195: EQUAL
16196: IFFALSE 16206
// sBomb := true ;
16198: LD_ADDR_EXP 60
16202: PUSH
16203: LD_INT 1
16205: ST_TO_ADDR
// if p3 = 108 then
16206: LD_VAR 0 3
16210: PUSH
16211: LD_INT 108
16213: EQUAL
16214: IFFALSE 16224
// sWound := true ;
16216: LD_ADDR_EXP 68
16220: PUSH
16221: LD_INT 1
16223: ST_TO_ADDR
// if p3 = 109 then
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 109
16231: EQUAL
16232: IFFALSE 16242
// sBetray := true ;
16234: LD_ADDR_EXP 72
16238: PUSH
16239: LD_INT 1
16241: ST_TO_ADDR
// if p3 = 110 then
16242: LD_VAR 0 3
16246: PUSH
16247: LD_INT 110
16249: EQUAL
16250: IFFALSE 16260
// sContamin := true ;
16252: LD_ADDR_EXP 73
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// if p3 = 111 then
16260: LD_VAR 0 3
16264: PUSH
16265: LD_INT 111
16267: EQUAL
16268: IFFALSE 16278
// sOil := true ;
16270: LD_ADDR_EXP 75
16274: PUSH
16275: LD_INT 1
16277: ST_TO_ADDR
// if p3 = 112 then
16278: LD_VAR 0 3
16282: PUSH
16283: LD_INT 112
16285: EQUAL
16286: IFFALSE 16296
// sStu := true ;
16288: LD_ADDR_EXP 79
16292: PUSH
16293: LD_INT 1
16295: ST_TO_ADDR
// if p3 = 113 then
16296: LD_VAR 0 3
16300: PUSH
16301: LD_INT 113
16303: EQUAL
16304: IFFALSE 16314
// sBazooka := true ;
16306: LD_ADDR_EXP 82
16310: PUSH
16311: LD_INT 1
16313: ST_TO_ADDR
// if p3 = 114 then
16314: LD_VAR 0 3
16318: PUSH
16319: LD_INT 114
16321: EQUAL
16322: IFFALSE 16332
// sMortar := true ;
16324: LD_ADDR_EXP 83
16328: PUSH
16329: LD_INT 1
16331: ST_TO_ADDR
// if p3 = 115 then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 115
16339: EQUAL
16340: IFFALSE 16350
// sRanger := true ;
16342: LD_ADDR_EXP 93
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// if p3 = 116 then
16350: LD_VAR 0 3
16354: PUSH
16355: LD_INT 116
16357: EQUAL
16358: IFFALSE 16368
// sComputer := true ;
16360: LD_ADDR_EXP 94
16364: PUSH
16365: LD_INT 1
16367: ST_TO_ADDR
// if p3 = 117 then
16368: LD_VAR 0 3
16372: PUSH
16373: LD_INT 117
16375: EQUAL
16376: IFFALSE 16386
// s30 := true ;
16378: LD_ADDR_EXP 95
16382: PUSH
16383: LD_INT 1
16385: ST_TO_ADDR
// if p3 = 118 then
16386: LD_VAR 0 3
16390: PUSH
16391: LD_INT 118
16393: EQUAL
16394: IFFALSE 16404
// s60 := true ;
16396: LD_ADDR_EXP 96
16400: PUSH
16401: LD_INT 1
16403: ST_TO_ADDR
// end ; if p2 = hack_mode then
16404: LD_VAR 0 2
16408: PUSH
16409: LD_INT 101
16411: EQUAL
16412: IFFALSE 16540
// begin case p3 of 1 :
16414: LD_VAR 0 3
16418: PUSH
16419: LD_INT 1
16421: DOUBLE
16422: EQUAL
16423: IFTRUE 16427
16425: GO 16434
16427: POP
// hHackUnlimitedResources ; 2 :
16428: CALL 28679 0 0
16432: GO 16540
16434: LD_INT 2
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16449
16442: POP
// hHackSetLevel10 ; 3 :
16443: CALL 28812 0 0
16447: GO 16540
16449: LD_INT 3
16451: DOUBLE
16452: EQUAL
16453: IFTRUE 16457
16455: GO 16464
16457: POP
// hHackSetLevel10YourUnits ; 4 :
16458: CALL 28897 0 0
16462: GO 16540
16464: LD_INT 4
16466: DOUBLE
16467: EQUAL
16468: IFTRUE 16472
16470: GO 16479
16472: POP
// hHackInvincible ; 5 :
16473: CALL 29345 0 0
16477: GO 16540
16479: LD_INT 5
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16494
16487: POP
// hHackInvisible ; 6 :
16488: CALL 29456 0 0
16492: GO 16540
16494: LD_INT 6
16496: DOUBLE
16497: EQUAL
16498: IFTRUE 16502
16500: GO 16509
16502: POP
// hHackChangeYourSide ; 7 :
16503: CALL 29513 0 0
16507: GO 16540
16509: LD_INT 7
16511: DOUBLE
16512: EQUAL
16513: IFTRUE 16517
16515: GO 16524
16517: POP
// hHackChangeUnitSide ; 8 :
16518: CALL 29555 0 0
16522: GO 16540
16524: LD_INT 8
16526: DOUBLE
16527: EQUAL
16528: IFTRUE 16532
16530: GO 16539
16532: POP
// hHackFog ; end ;
16533: CALL 29656 0 0
16537: GO 16540
16539: POP
// end ; if p2 = game_save_mode then
16540: LD_VAR 0 2
16544: PUSH
16545: LD_INT 102
16547: EQUAL
16548: IFFALSE 16603
// begin if p3 = 1 then
16550: LD_VAR 0 3
16554: PUSH
16555: LD_INT 1
16557: EQUAL
16558: IFFALSE 16570
// globalGameSaveCounter := p4 ;
16560: LD_ADDR_EXP 39
16564: PUSH
16565: LD_VAR 0 4
16569: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16570: LD_VAR 0 3
16574: PUSH
16575: LD_INT 2
16577: EQUAL
16578: PUSH
16579: LD_EXP 39
16583: AND
16584: IFFALSE 16603
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16586: LD_STRING setGameSaveCounter(
16588: PUSH
16589: LD_EXP 39
16593: STR
16594: PUSH
16595: LD_STRING )
16597: STR
16598: PPUSH
16599: CALL_OW 559
// end ; end ;
16603: LD_VAR 0 7
16607: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16608: LD_INT 0
16610: PPUSH
// streamModeActive := false ;
16611: LD_ADDR_EXP 40
16615: PUSH
16616: LD_INT 0
16618: ST_TO_ADDR
// normalCounter := 36 ;
16619: LD_ADDR_EXP 41
16623: PUSH
16624: LD_INT 36
16626: ST_TO_ADDR
// hardcoreCounter := 18 ;
16627: LD_ADDR_EXP 42
16631: PUSH
16632: LD_INT 18
16634: ST_TO_ADDR
// sRocket := false ;
16635: LD_ADDR_EXP 45
16639: PUSH
16640: LD_INT 0
16642: ST_TO_ADDR
// sSpeed := false ;
16643: LD_ADDR_EXP 44
16647: PUSH
16648: LD_INT 0
16650: ST_TO_ADDR
// sEngine := false ;
16651: LD_ADDR_EXP 46
16655: PUSH
16656: LD_INT 0
16658: ST_TO_ADDR
// sSpec := false ;
16659: LD_ADDR_EXP 43
16663: PUSH
16664: LD_INT 0
16666: ST_TO_ADDR
// sLevel := false ;
16667: LD_ADDR_EXP 47
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
// sArmoury := false ;
16675: LD_ADDR_EXP 48
16679: PUSH
16680: LD_INT 0
16682: ST_TO_ADDR
// sRadar := false ;
16683: LD_ADDR_EXP 49
16687: PUSH
16688: LD_INT 0
16690: ST_TO_ADDR
// sBunker := false ;
16691: LD_ADDR_EXP 50
16695: PUSH
16696: LD_INT 0
16698: ST_TO_ADDR
// sHack := false ;
16699: LD_ADDR_EXP 51
16703: PUSH
16704: LD_INT 0
16706: ST_TO_ADDR
// sFire := false ;
16707: LD_ADDR_EXP 52
16711: PUSH
16712: LD_INT 0
16714: ST_TO_ADDR
// sRefresh := false ;
16715: LD_ADDR_EXP 53
16719: PUSH
16720: LD_INT 0
16722: ST_TO_ADDR
// sExp := false ;
16723: LD_ADDR_EXP 54
16727: PUSH
16728: LD_INT 0
16730: ST_TO_ADDR
// sDepot := false ;
16731: LD_ADDR_EXP 55
16735: PUSH
16736: LD_INT 0
16738: ST_TO_ADDR
// sFlag := false ;
16739: LD_ADDR_EXP 56
16743: PUSH
16744: LD_INT 0
16746: ST_TO_ADDR
// sKamikadze := false ;
16747: LD_ADDR_EXP 64
16751: PUSH
16752: LD_INT 0
16754: ST_TO_ADDR
// sTroll := false ;
16755: LD_ADDR_EXP 65
16759: PUSH
16760: LD_INT 0
16762: ST_TO_ADDR
// sSlow := false ;
16763: LD_ADDR_EXP 66
16767: PUSH
16768: LD_INT 0
16770: ST_TO_ADDR
// sLack := false ;
16771: LD_ADDR_EXP 67
16775: PUSH
16776: LD_INT 0
16778: ST_TO_ADDR
// sTank := false ;
16779: LD_ADDR_EXP 69
16783: PUSH
16784: LD_INT 0
16786: ST_TO_ADDR
// sRemote := false ;
16787: LD_ADDR_EXP 70
16791: PUSH
16792: LD_INT 0
16794: ST_TO_ADDR
// sPowell := false ;
16795: LD_ADDR_EXP 71
16799: PUSH
16800: LD_INT 0
16802: ST_TO_ADDR
// sTeleport := false ;
16803: LD_ADDR_EXP 74
16807: PUSH
16808: LD_INT 0
16810: ST_TO_ADDR
// sOilTower := false ;
16811: LD_ADDR_EXP 76
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// sShovel := false ;
16819: LD_ADDR_EXP 77
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// sSheik := false ;
16827: LD_ADDR_EXP 78
16831: PUSH
16832: LD_INT 0
16834: ST_TO_ADDR
// sEarthquake := false ;
16835: LD_ADDR_EXP 80
16839: PUSH
16840: LD_INT 0
16842: ST_TO_ADDR
// sAI := false ;
16843: LD_ADDR_EXP 81
16847: PUSH
16848: LD_INT 0
16850: ST_TO_ADDR
// sCargo := false ;
16851: LD_ADDR_EXP 84
16855: PUSH
16856: LD_INT 0
16858: ST_TO_ADDR
// sDLaser := false ;
16859: LD_ADDR_EXP 85
16863: PUSH
16864: LD_INT 0
16866: ST_TO_ADDR
// sExchange := false ;
16867: LD_ADDR_EXP 86
16871: PUSH
16872: LD_INT 0
16874: ST_TO_ADDR
// sFac := false ;
16875: LD_ADDR_EXP 87
16879: PUSH
16880: LD_INT 0
16882: ST_TO_ADDR
// sPower := false ;
16883: LD_ADDR_EXP 88
16887: PUSH
16888: LD_INT 0
16890: ST_TO_ADDR
// sRandom := false ;
16891: LD_ADDR_EXP 89
16895: PUSH
16896: LD_INT 0
16898: ST_TO_ADDR
// sShield := false ;
16899: LD_ADDR_EXP 90
16903: PUSH
16904: LD_INT 0
16906: ST_TO_ADDR
// sTime := false ;
16907: LD_ADDR_EXP 91
16911: PUSH
16912: LD_INT 0
16914: ST_TO_ADDR
// sTools := false ;
16915: LD_ADDR_EXP 92
16919: PUSH
16920: LD_INT 0
16922: ST_TO_ADDR
// sSold := false ;
16923: LD_ADDR_EXP 57
16927: PUSH
16928: LD_INT 0
16930: ST_TO_ADDR
// sDiff := false ;
16931: LD_ADDR_EXP 58
16935: PUSH
16936: LD_INT 0
16938: ST_TO_ADDR
// sFog := false ;
16939: LD_ADDR_EXP 61
16943: PUSH
16944: LD_INT 0
16946: ST_TO_ADDR
// sReset := false ;
16947: LD_ADDR_EXP 62
16951: PUSH
16952: LD_INT 0
16954: ST_TO_ADDR
// sSun := false ;
16955: LD_ADDR_EXP 63
16959: PUSH
16960: LD_INT 0
16962: ST_TO_ADDR
// sTiger := false ;
16963: LD_ADDR_EXP 59
16967: PUSH
16968: LD_INT 0
16970: ST_TO_ADDR
// sBomb := false ;
16971: LD_ADDR_EXP 60
16975: PUSH
16976: LD_INT 0
16978: ST_TO_ADDR
// sWound := false ;
16979: LD_ADDR_EXP 68
16983: PUSH
16984: LD_INT 0
16986: ST_TO_ADDR
// sBetray := false ;
16987: LD_ADDR_EXP 72
16991: PUSH
16992: LD_INT 0
16994: ST_TO_ADDR
// sContamin := false ;
16995: LD_ADDR_EXP 73
16999: PUSH
17000: LD_INT 0
17002: ST_TO_ADDR
// sOil := false ;
17003: LD_ADDR_EXP 75
17007: PUSH
17008: LD_INT 0
17010: ST_TO_ADDR
// sStu := false ;
17011: LD_ADDR_EXP 79
17015: PUSH
17016: LD_INT 0
17018: ST_TO_ADDR
// sBazooka := false ;
17019: LD_ADDR_EXP 82
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// sMortar := false ;
17027: LD_ADDR_EXP 83
17031: PUSH
17032: LD_INT 0
17034: ST_TO_ADDR
// sRanger := false ;
17035: LD_ADDR_EXP 93
17039: PUSH
17040: LD_INT 0
17042: ST_TO_ADDR
// sComputer := false ;
17043: LD_ADDR_EXP 94
17047: PUSH
17048: LD_INT 0
17050: ST_TO_ADDR
// s30 := false ;
17051: LD_ADDR_EXP 95
17055: PUSH
17056: LD_INT 0
17058: ST_TO_ADDR
// s60 := false ;
17059: LD_ADDR_EXP 96
17063: PUSH
17064: LD_INT 0
17066: ST_TO_ADDR
// end ;
17067: LD_VAR 0 1
17071: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17072: LD_INT 0
17074: PPUSH
17075: PPUSH
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
17080: PPUSH
// result := [ ] ;
17081: LD_ADDR_VAR 0 2
17085: PUSH
17086: EMPTY
17087: ST_TO_ADDR
// if campaign_id = 1 then
17088: LD_OWVAR 69
17092: PUSH
17093: LD_INT 1
17095: EQUAL
17096: IFFALSE 20262
// begin case mission_number of 1 :
17098: LD_OWVAR 70
17102: PUSH
17103: LD_INT 1
17105: DOUBLE
17106: EQUAL
17107: IFTRUE 17111
17109: GO 17187
17111: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17112: LD_ADDR_VAR 0 2
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: LD_INT 4
17122: PUSH
17123: LD_INT 11
17125: PUSH
17126: LD_INT 12
17128: PUSH
17129: LD_INT 15
17131: PUSH
17132: LD_INT 16
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_INT 23
17140: PUSH
17141: LD_INT 26
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 101
17157: PUSH
17158: LD_INT 102
17160: PUSH
17161: LD_INT 106
17163: PUSH
17164: LD_INT 116
17166: PUSH
17167: LD_INT 117
17169: PUSH
17170: LD_INT 118
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: ST_TO_ADDR
17185: GO 20260
17187: LD_INT 2
17189: DOUBLE
17190: EQUAL
17191: IFTRUE 17195
17193: GO 17279
17195: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17196: LD_ADDR_VAR 0 2
17200: PUSH
17201: LD_INT 2
17203: PUSH
17204: LD_INT 4
17206: PUSH
17207: LD_INT 11
17209: PUSH
17210: LD_INT 12
17212: PUSH
17213: LD_INT 15
17215: PUSH
17216: LD_INT 16
17218: PUSH
17219: LD_INT 22
17221: PUSH
17222: LD_INT 23
17224: PUSH
17225: LD_INT 26
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 101
17241: PUSH
17242: LD_INT 102
17244: PUSH
17245: LD_INT 105
17247: PUSH
17248: LD_INT 106
17250: PUSH
17251: LD_INT 108
17253: PUSH
17254: LD_INT 116
17256: PUSH
17257: LD_INT 117
17259: PUSH
17260: LD_INT 118
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: ST_TO_ADDR
17277: GO 20260
17279: LD_INT 3
17281: DOUBLE
17282: EQUAL
17283: IFTRUE 17287
17285: GO 17375
17287: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17288: LD_ADDR_VAR 0 2
17292: PUSH
17293: LD_INT 2
17295: PUSH
17296: LD_INT 4
17298: PUSH
17299: LD_INT 5
17301: PUSH
17302: LD_INT 11
17304: PUSH
17305: LD_INT 12
17307: PUSH
17308: LD_INT 15
17310: PUSH
17311: LD_INT 16
17313: PUSH
17314: LD_INT 22
17316: PUSH
17317: LD_INT 26
17319: PUSH
17320: LD_INT 36
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 101
17337: PUSH
17338: LD_INT 102
17340: PUSH
17341: LD_INT 105
17343: PUSH
17344: LD_INT 106
17346: PUSH
17347: LD_INT 108
17349: PUSH
17350: LD_INT 116
17352: PUSH
17353: LD_INT 117
17355: PUSH
17356: LD_INT 118
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: ST_TO_ADDR
17373: GO 20260
17375: LD_INT 4
17377: DOUBLE
17378: EQUAL
17379: IFTRUE 17383
17381: GO 17479
17383: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: LD_INT 2
17391: PUSH
17392: LD_INT 4
17394: PUSH
17395: LD_INT 5
17397: PUSH
17398: LD_INT 8
17400: PUSH
17401: LD_INT 11
17403: PUSH
17404: LD_INT 12
17406: PUSH
17407: LD_INT 15
17409: PUSH
17410: LD_INT 16
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 23
17418: PUSH
17419: LD_INT 26
17421: PUSH
17422: LD_INT 36
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 101
17441: PUSH
17442: LD_INT 102
17444: PUSH
17445: LD_INT 105
17447: PUSH
17448: LD_INT 106
17450: PUSH
17451: LD_INT 108
17453: PUSH
17454: LD_INT 116
17456: PUSH
17457: LD_INT 117
17459: PUSH
17460: LD_INT 118
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: ST_TO_ADDR
17477: GO 20260
17479: LD_INT 5
17481: DOUBLE
17482: EQUAL
17483: IFTRUE 17487
17485: GO 17599
17487: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: LD_INT 4
17498: PUSH
17499: LD_INT 5
17501: PUSH
17502: LD_INT 6
17504: PUSH
17505: LD_INT 8
17507: PUSH
17508: LD_INT 11
17510: PUSH
17511: LD_INT 12
17513: PUSH
17514: LD_INT 15
17516: PUSH
17517: LD_INT 16
17519: PUSH
17520: LD_INT 22
17522: PUSH
17523: LD_INT 23
17525: PUSH
17526: LD_INT 25
17528: PUSH
17529: LD_INT 26
17531: PUSH
17532: LD_INT 36
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 101
17553: PUSH
17554: LD_INT 102
17556: PUSH
17557: LD_INT 105
17559: PUSH
17560: LD_INT 106
17562: PUSH
17563: LD_INT 108
17565: PUSH
17566: LD_INT 109
17568: PUSH
17569: LD_INT 112
17571: PUSH
17572: LD_INT 116
17574: PUSH
17575: LD_INT 117
17577: PUSH
17578: LD_INT 118
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: ST_TO_ADDR
17597: GO 20260
17599: LD_INT 6
17601: DOUBLE
17602: EQUAL
17603: IFTRUE 17607
17605: GO 17739
17607: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17608: LD_ADDR_VAR 0 2
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: LD_INT 4
17618: PUSH
17619: LD_INT 5
17621: PUSH
17622: LD_INT 6
17624: PUSH
17625: LD_INT 8
17627: PUSH
17628: LD_INT 11
17630: PUSH
17631: LD_INT 12
17633: PUSH
17634: LD_INT 15
17636: PUSH
17637: LD_INT 16
17639: PUSH
17640: LD_INT 20
17642: PUSH
17643: LD_INT 21
17645: PUSH
17646: LD_INT 22
17648: PUSH
17649: LD_INT 23
17651: PUSH
17652: LD_INT 25
17654: PUSH
17655: LD_INT 26
17657: PUSH
17658: LD_INT 30
17660: PUSH
17661: LD_INT 31
17663: PUSH
17664: LD_INT 32
17666: PUSH
17667: LD_INT 36
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 101
17693: PUSH
17694: LD_INT 102
17696: PUSH
17697: LD_INT 105
17699: PUSH
17700: LD_INT 106
17702: PUSH
17703: LD_INT 108
17705: PUSH
17706: LD_INT 109
17708: PUSH
17709: LD_INT 112
17711: PUSH
17712: LD_INT 116
17714: PUSH
17715: LD_INT 117
17717: PUSH
17718: LD_INT 118
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: ST_TO_ADDR
17737: GO 20260
17739: LD_INT 7
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17859
17747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17748: LD_ADDR_VAR 0 2
17752: PUSH
17753: LD_INT 2
17755: PUSH
17756: LD_INT 4
17758: PUSH
17759: LD_INT 5
17761: PUSH
17762: LD_INT 7
17764: PUSH
17765: LD_INT 11
17767: PUSH
17768: LD_INT 12
17770: PUSH
17771: LD_INT 15
17773: PUSH
17774: LD_INT 16
17776: PUSH
17777: LD_INT 20
17779: PUSH
17780: LD_INT 21
17782: PUSH
17783: LD_INT 22
17785: PUSH
17786: LD_INT 23
17788: PUSH
17789: LD_INT 25
17791: PUSH
17792: LD_INT 26
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 101
17813: PUSH
17814: LD_INT 102
17816: PUSH
17817: LD_INT 103
17819: PUSH
17820: LD_INT 105
17822: PUSH
17823: LD_INT 106
17825: PUSH
17826: LD_INT 108
17828: PUSH
17829: LD_INT 112
17831: PUSH
17832: LD_INT 116
17834: PUSH
17835: LD_INT 117
17837: PUSH
17838: LD_INT 118
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: ST_TO_ADDR
17857: GO 20260
17859: LD_INT 8
17861: DOUBLE
17862: EQUAL
17863: IFTRUE 17867
17865: GO 18007
17867: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17868: LD_ADDR_VAR 0 2
17872: PUSH
17873: LD_INT 2
17875: PUSH
17876: LD_INT 4
17878: PUSH
17879: LD_INT 5
17881: PUSH
17882: LD_INT 6
17884: PUSH
17885: LD_INT 7
17887: PUSH
17888: LD_INT 8
17890: PUSH
17891: LD_INT 11
17893: PUSH
17894: LD_INT 12
17896: PUSH
17897: LD_INT 15
17899: PUSH
17900: LD_INT 16
17902: PUSH
17903: LD_INT 20
17905: PUSH
17906: LD_INT 21
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_INT 23
17914: PUSH
17915: LD_INT 25
17917: PUSH
17918: LD_INT 26
17920: PUSH
17921: LD_INT 30
17923: PUSH
17924: LD_INT 31
17926: PUSH
17927: LD_INT 32
17929: PUSH
17930: LD_INT 36
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 101
17957: PUSH
17958: LD_INT 102
17960: PUSH
17961: LD_INT 103
17963: PUSH
17964: LD_INT 105
17966: PUSH
17967: LD_INT 106
17969: PUSH
17970: LD_INT 108
17972: PUSH
17973: LD_INT 109
17975: PUSH
17976: LD_INT 112
17978: PUSH
17979: LD_INT 116
17981: PUSH
17982: LD_INT 117
17984: PUSH
17985: LD_INT 118
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: ST_TO_ADDR
18005: GO 20260
18007: LD_INT 9
18009: DOUBLE
18010: EQUAL
18011: IFTRUE 18015
18013: GO 18163
18015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18016: LD_ADDR_VAR 0 2
18020: PUSH
18021: LD_INT 2
18023: PUSH
18024: LD_INT 4
18026: PUSH
18027: LD_INT 5
18029: PUSH
18030: LD_INT 6
18032: PUSH
18033: LD_INT 7
18035: PUSH
18036: LD_INT 8
18038: PUSH
18039: LD_INT 11
18041: PUSH
18042: LD_INT 12
18044: PUSH
18045: LD_INT 15
18047: PUSH
18048: LD_INT 16
18050: PUSH
18051: LD_INT 20
18053: PUSH
18054: LD_INT 21
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_INT 23
18062: PUSH
18063: LD_INT 25
18065: PUSH
18066: LD_INT 26
18068: PUSH
18069: LD_INT 28
18071: PUSH
18072: LD_INT 30
18074: PUSH
18075: LD_INT 31
18077: PUSH
18078: LD_INT 32
18080: PUSH
18081: LD_INT 36
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 101
18109: PUSH
18110: LD_INT 102
18112: PUSH
18113: LD_INT 103
18115: PUSH
18116: LD_INT 105
18118: PUSH
18119: LD_INT 106
18121: PUSH
18122: LD_INT 108
18124: PUSH
18125: LD_INT 109
18127: PUSH
18128: LD_INT 112
18130: PUSH
18131: LD_INT 114
18133: PUSH
18134: LD_INT 116
18136: PUSH
18137: LD_INT 117
18139: PUSH
18140: LD_INT 118
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: ST_TO_ADDR
18161: GO 20260
18163: LD_INT 10
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18367
18171: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: LD_INT 4
18182: PUSH
18183: LD_INT 5
18185: PUSH
18186: LD_INT 6
18188: PUSH
18189: LD_INT 7
18191: PUSH
18192: LD_INT 8
18194: PUSH
18195: LD_INT 9
18197: PUSH
18198: LD_INT 10
18200: PUSH
18201: LD_INT 11
18203: PUSH
18204: LD_INT 12
18206: PUSH
18207: LD_INT 13
18209: PUSH
18210: LD_INT 14
18212: PUSH
18213: LD_INT 15
18215: PUSH
18216: LD_INT 16
18218: PUSH
18219: LD_INT 17
18221: PUSH
18222: LD_INT 18
18224: PUSH
18225: LD_INT 19
18227: PUSH
18228: LD_INT 20
18230: PUSH
18231: LD_INT 21
18233: PUSH
18234: LD_INT 22
18236: PUSH
18237: LD_INT 23
18239: PUSH
18240: LD_INT 24
18242: PUSH
18243: LD_INT 25
18245: PUSH
18246: LD_INT 26
18248: PUSH
18249: LD_INT 28
18251: PUSH
18252: LD_INT 30
18254: PUSH
18255: LD_INT 31
18257: PUSH
18258: LD_INT 32
18260: PUSH
18261: LD_INT 36
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 101
18297: PUSH
18298: LD_INT 102
18300: PUSH
18301: LD_INT 103
18303: PUSH
18304: LD_INT 104
18306: PUSH
18307: LD_INT 105
18309: PUSH
18310: LD_INT 106
18312: PUSH
18313: LD_INT 107
18315: PUSH
18316: LD_INT 108
18318: PUSH
18319: LD_INT 109
18321: PUSH
18322: LD_INT 110
18324: PUSH
18325: LD_INT 111
18327: PUSH
18328: LD_INT 112
18330: PUSH
18331: LD_INT 114
18333: PUSH
18334: LD_INT 116
18336: PUSH
18337: LD_INT 117
18339: PUSH
18340: LD_INT 118
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: ST_TO_ADDR
18365: GO 20260
18367: LD_INT 11
18369: DOUBLE
18370: EQUAL
18371: IFTRUE 18375
18373: GO 18579
18375: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18376: LD_ADDR_VAR 0 2
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: LD_INT 3
18386: PUSH
18387: LD_INT 4
18389: PUSH
18390: LD_INT 5
18392: PUSH
18393: LD_INT 6
18395: PUSH
18396: LD_INT 7
18398: PUSH
18399: LD_INT 8
18401: PUSH
18402: LD_INT 9
18404: PUSH
18405: LD_INT 10
18407: PUSH
18408: LD_INT 11
18410: PUSH
18411: LD_INT 12
18413: PUSH
18414: LD_INT 13
18416: PUSH
18417: LD_INT 14
18419: PUSH
18420: LD_INT 15
18422: PUSH
18423: LD_INT 16
18425: PUSH
18426: LD_INT 17
18428: PUSH
18429: LD_INT 18
18431: PUSH
18432: LD_INT 19
18434: PUSH
18435: LD_INT 20
18437: PUSH
18438: LD_INT 21
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_INT 23
18446: PUSH
18447: LD_INT 24
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 26
18455: PUSH
18456: LD_INT 28
18458: PUSH
18459: LD_INT 30
18461: PUSH
18462: LD_INT 31
18464: PUSH
18465: LD_INT 32
18467: PUSH
18468: LD_INT 34
18470: PUSH
18471: LD_INT 36
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 101
18509: PUSH
18510: LD_INT 102
18512: PUSH
18513: LD_INT 103
18515: PUSH
18516: LD_INT 104
18518: PUSH
18519: LD_INT 105
18521: PUSH
18522: LD_INT 106
18524: PUSH
18525: LD_INT 107
18527: PUSH
18528: LD_INT 108
18530: PUSH
18531: LD_INT 109
18533: PUSH
18534: LD_INT 110
18536: PUSH
18537: LD_INT 111
18539: PUSH
18540: LD_INT 112
18542: PUSH
18543: LD_INT 114
18545: PUSH
18546: LD_INT 116
18548: PUSH
18549: LD_INT 117
18551: PUSH
18552: LD_INT 118
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: ST_TO_ADDR
18577: GO 20260
18579: LD_INT 12
18581: DOUBLE
18582: EQUAL
18583: IFTRUE 18587
18585: GO 18807
18587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18588: LD_ADDR_VAR 0 2
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: LD_INT 3
18601: PUSH
18602: LD_INT 4
18604: PUSH
18605: LD_INT 5
18607: PUSH
18608: LD_INT 6
18610: PUSH
18611: LD_INT 7
18613: PUSH
18614: LD_INT 8
18616: PUSH
18617: LD_INT 9
18619: PUSH
18620: LD_INT 10
18622: PUSH
18623: LD_INT 11
18625: PUSH
18626: LD_INT 12
18628: PUSH
18629: LD_INT 13
18631: PUSH
18632: LD_INT 14
18634: PUSH
18635: LD_INT 15
18637: PUSH
18638: LD_INT 16
18640: PUSH
18641: LD_INT 17
18643: PUSH
18644: LD_INT 18
18646: PUSH
18647: LD_INT 19
18649: PUSH
18650: LD_INT 20
18652: PUSH
18653: LD_INT 21
18655: PUSH
18656: LD_INT 22
18658: PUSH
18659: LD_INT 23
18661: PUSH
18662: LD_INT 24
18664: PUSH
18665: LD_INT 25
18667: PUSH
18668: LD_INT 26
18670: PUSH
18671: LD_INT 27
18673: PUSH
18674: LD_INT 28
18676: PUSH
18677: LD_INT 30
18679: PUSH
18680: LD_INT 31
18682: PUSH
18683: LD_INT 32
18685: PUSH
18686: LD_INT 33
18688: PUSH
18689: LD_INT 34
18691: PUSH
18692: LD_INT 36
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 101
18733: PUSH
18734: LD_INT 102
18736: PUSH
18737: LD_INT 103
18739: PUSH
18740: LD_INT 104
18742: PUSH
18743: LD_INT 105
18745: PUSH
18746: LD_INT 106
18748: PUSH
18749: LD_INT 107
18751: PUSH
18752: LD_INT 108
18754: PUSH
18755: LD_INT 109
18757: PUSH
18758: LD_INT 110
18760: PUSH
18761: LD_INT 111
18763: PUSH
18764: LD_INT 112
18766: PUSH
18767: LD_INT 113
18769: PUSH
18770: LD_INT 114
18772: PUSH
18773: LD_INT 116
18775: PUSH
18776: LD_INT 117
18778: PUSH
18779: LD_INT 118
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: ST_TO_ADDR
18805: GO 20260
18807: LD_INT 13
18809: DOUBLE
18810: EQUAL
18811: IFTRUE 18815
18813: GO 19023
18815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18816: LD_ADDR_VAR 0 2
18820: PUSH
18821: LD_INT 1
18823: PUSH
18824: LD_INT 2
18826: PUSH
18827: LD_INT 3
18829: PUSH
18830: LD_INT 4
18832: PUSH
18833: LD_INT 5
18835: PUSH
18836: LD_INT 8
18838: PUSH
18839: LD_INT 9
18841: PUSH
18842: LD_INT 10
18844: PUSH
18845: LD_INT 11
18847: PUSH
18848: LD_INT 12
18850: PUSH
18851: LD_INT 14
18853: PUSH
18854: LD_INT 15
18856: PUSH
18857: LD_INT 16
18859: PUSH
18860: LD_INT 17
18862: PUSH
18863: LD_INT 18
18865: PUSH
18866: LD_INT 19
18868: PUSH
18869: LD_INT 20
18871: PUSH
18872: LD_INT 21
18874: PUSH
18875: LD_INT 22
18877: PUSH
18878: LD_INT 23
18880: PUSH
18881: LD_INT 24
18883: PUSH
18884: LD_INT 25
18886: PUSH
18887: LD_INT 26
18889: PUSH
18890: LD_INT 27
18892: PUSH
18893: LD_INT 28
18895: PUSH
18896: LD_INT 30
18898: PUSH
18899: LD_INT 31
18901: PUSH
18902: LD_INT 32
18904: PUSH
18905: LD_INT 33
18907: PUSH
18908: LD_INT 34
18910: PUSH
18911: LD_INT 36
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 101
18949: PUSH
18950: LD_INT 102
18952: PUSH
18953: LD_INT 103
18955: PUSH
18956: LD_INT 104
18958: PUSH
18959: LD_INT 105
18961: PUSH
18962: LD_INT 106
18964: PUSH
18965: LD_INT 107
18967: PUSH
18968: LD_INT 108
18970: PUSH
18971: LD_INT 109
18973: PUSH
18974: LD_INT 110
18976: PUSH
18977: LD_INT 111
18979: PUSH
18980: LD_INT 112
18982: PUSH
18983: LD_INT 113
18985: PUSH
18986: LD_INT 114
18988: PUSH
18989: LD_INT 116
18991: PUSH
18992: LD_INT 117
18994: PUSH
18995: LD_INT 118
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: ST_TO_ADDR
19021: GO 20260
19023: LD_INT 14
19025: DOUBLE
19026: EQUAL
19027: IFTRUE 19031
19029: GO 19255
19031: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19032: LD_ADDR_VAR 0 2
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: LD_INT 4
19048: PUSH
19049: LD_INT 5
19051: PUSH
19052: LD_INT 6
19054: PUSH
19055: LD_INT 7
19057: PUSH
19058: LD_INT 8
19060: PUSH
19061: LD_INT 9
19063: PUSH
19064: LD_INT 10
19066: PUSH
19067: LD_INT 11
19069: PUSH
19070: LD_INT 12
19072: PUSH
19073: LD_INT 13
19075: PUSH
19076: LD_INT 14
19078: PUSH
19079: LD_INT 15
19081: PUSH
19082: LD_INT 16
19084: PUSH
19085: LD_INT 17
19087: PUSH
19088: LD_INT 18
19090: PUSH
19091: LD_INT 19
19093: PUSH
19094: LD_INT 20
19096: PUSH
19097: LD_INT 21
19099: PUSH
19100: LD_INT 22
19102: PUSH
19103: LD_INT 23
19105: PUSH
19106: LD_INT 24
19108: PUSH
19109: LD_INT 25
19111: PUSH
19112: LD_INT 26
19114: PUSH
19115: LD_INT 27
19117: PUSH
19118: LD_INT 28
19120: PUSH
19121: LD_INT 29
19123: PUSH
19124: LD_INT 30
19126: PUSH
19127: LD_INT 31
19129: PUSH
19130: LD_INT 32
19132: PUSH
19133: LD_INT 33
19135: PUSH
19136: LD_INT 34
19138: PUSH
19139: LD_INT 36
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 101
19181: PUSH
19182: LD_INT 102
19184: PUSH
19185: LD_INT 103
19187: PUSH
19188: LD_INT 104
19190: PUSH
19191: LD_INT 105
19193: PUSH
19194: LD_INT 106
19196: PUSH
19197: LD_INT 107
19199: PUSH
19200: LD_INT 108
19202: PUSH
19203: LD_INT 109
19205: PUSH
19206: LD_INT 110
19208: PUSH
19209: LD_INT 111
19211: PUSH
19212: LD_INT 112
19214: PUSH
19215: LD_INT 113
19217: PUSH
19218: LD_INT 114
19220: PUSH
19221: LD_INT 116
19223: PUSH
19224: LD_INT 117
19226: PUSH
19227: LD_INT 118
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: ST_TO_ADDR
19253: GO 20260
19255: LD_INT 15
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19487
19263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19264: LD_ADDR_VAR 0 2
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: LD_INT 3
19277: PUSH
19278: LD_INT 4
19280: PUSH
19281: LD_INT 5
19283: PUSH
19284: LD_INT 6
19286: PUSH
19287: LD_INT 7
19289: PUSH
19290: LD_INT 8
19292: PUSH
19293: LD_INT 9
19295: PUSH
19296: LD_INT 10
19298: PUSH
19299: LD_INT 11
19301: PUSH
19302: LD_INT 12
19304: PUSH
19305: LD_INT 13
19307: PUSH
19308: LD_INT 14
19310: PUSH
19311: LD_INT 15
19313: PUSH
19314: LD_INT 16
19316: PUSH
19317: LD_INT 17
19319: PUSH
19320: LD_INT 18
19322: PUSH
19323: LD_INT 19
19325: PUSH
19326: LD_INT 20
19328: PUSH
19329: LD_INT 21
19331: PUSH
19332: LD_INT 22
19334: PUSH
19335: LD_INT 23
19337: PUSH
19338: LD_INT 24
19340: PUSH
19341: LD_INT 25
19343: PUSH
19344: LD_INT 26
19346: PUSH
19347: LD_INT 27
19349: PUSH
19350: LD_INT 28
19352: PUSH
19353: LD_INT 29
19355: PUSH
19356: LD_INT 30
19358: PUSH
19359: LD_INT 31
19361: PUSH
19362: LD_INT 32
19364: PUSH
19365: LD_INT 33
19367: PUSH
19368: LD_INT 34
19370: PUSH
19371: LD_INT 36
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 101
19413: PUSH
19414: LD_INT 102
19416: PUSH
19417: LD_INT 103
19419: PUSH
19420: LD_INT 104
19422: PUSH
19423: LD_INT 105
19425: PUSH
19426: LD_INT 106
19428: PUSH
19429: LD_INT 107
19431: PUSH
19432: LD_INT 108
19434: PUSH
19435: LD_INT 109
19437: PUSH
19438: LD_INT 110
19440: PUSH
19441: LD_INT 111
19443: PUSH
19444: LD_INT 112
19446: PUSH
19447: LD_INT 113
19449: PUSH
19450: LD_INT 114
19452: PUSH
19453: LD_INT 116
19455: PUSH
19456: LD_INT 117
19458: PUSH
19459: LD_INT 118
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: ST_TO_ADDR
19485: GO 20260
19487: LD_INT 16
19489: DOUBLE
19490: EQUAL
19491: IFTRUE 19495
19493: GO 19631
19495: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19496: LD_ADDR_VAR 0 2
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 4
19506: PUSH
19507: LD_INT 5
19509: PUSH
19510: LD_INT 7
19512: PUSH
19513: LD_INT 11
19515: PUSH
19516: LD_INT 12
19518: PUSH
19519: LD_INT 15
19521: PUSH
19522: LD_INT 16
19524: PUSH
19525: LD_INT 20
19527: PUSH
19528: LD_INT 21
19530: PUSH
19531: LD_INT 22
19533: PUSH
19534: LD_INT 23
19536: PUSH
19537: LD_INT 25
19539: PUSH
19540: LD_INT 26
19542: PUSH
19543: LD_INT 30
19545: PUSH
19546: LD_INT 31
19548: PUSH
19549: LD_INT 32
19551: PUSH
19552: LD_INT 33
19554: PUSH
19555: LD_INT 34
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 101
19581: PUSH
19582: LD_INT 102
19584: PUSH
19585: LD_INT 103
19587: PUSH
19588: LD_INT 106
19590: PUSH
19591: LD_INT 108
19593: PUSH
19594: LD_INT 112
19596: PUSH
19597: LD_INT 113
19599: PUSH
19600: LD_INT 114
19602: PUSH
19603: LD_INT 116
19605: PUSH
19606: LD_INT 117
19608: PUSH
19609: LD_INT 118
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: ST_TO_ADDR
19629: GO 20260
19631: LD_INT 17
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19863
19639: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19640: LD_ADDR_VAR 0 2
19644: PUSH
19645: LD_INT 1
19647: PUSH
19648: LD_INT 2
19650: PUSH
19651: LD_INT 3
19653: PUSH
19654: LD_INT 4
19656: PUSH
19657: LD_INT 5
19659: PUSH
19660: LD_INT 6
19662: PUSH
19663: LD_INT 7
19665: PUSH
19666: LD_INT 8
19668: PUSH
19669: LD_INT 9
19671: PUSH
19672: LD_INT 10
19674: PUSH
19675: LD_INT 11
19677: PUSH
19678: LD_INT 12
19680: PUSH
19681: LD_INT 13
19683: PUSH
19684: LD_INT 14
19686: PUSH
19687: LD_INT 15
19689: PUSH
19690: LD_INT 16
19692: PUSH
19693: LD_INT 17
19695: PUSH
19696: LD_INT 18
19698: PUSH
19699: LD_INT 19
19701: PUSH
19702: LD_INT 20
19704: PUSH
19705: LD_INT 21
19707: PUSH
19708: LD_INT 22
19710: PUSH
19711: LD_INT 23
19713: PUSH
19714: LD_INT 24
19716: PUSH
19717: LD_INT 25
19719: PUSH
19720: LD_INT 26
19722: PUSH
19723: LD_INT 27
19725: PUSH
19726: LD_INT 28
19728: PUSH
19729: LD_INT 29
19731: PUSH
19732: LD_INT 30
19734: PUSH
19735: LD_INT 31
19737: PUSH
19738: LD_INT 32
19740: PUSH
19741: LD_INT 33
19743: PUSH
19744: LD_INT 34
19746: PUSH
19747: LD_INT 36
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 101
19789: PUSH
19790: LD_INT 102
19792: PUSH
19793: LD_INT 103
19795: PUSH
19796: LD_INT 104
19798: PUSH
19799: LD_INT 105
19801: PUSH
19802: LD_INT 106
19804: PUSH
19805: LD_INT 107
19807: PUSH
19808: LD_INT 108
19810: PUSH
19811: LD_INT 109
19813: PUSH
19814: LD_INT 110
19816: PUSH
19817: LD_INT 111
19819: PUSH
19820: LD_INT 112
19822: PUSH
19823: LD_INT 113
19825: PUSH
19826: LD_INT 114
19828: PUSH
19829: LD_INT 116
19831: PUSH
19832: LD_INT 117
19834: PUSH
19835: LD_INT 118
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: ST_TO_ADDR
19861: GO 20260
19863: LD_INT 18
19865: DOUBLE
19866: EQUAL
19867: IFTRUE 19871
19869: GO 20019
19871: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19872: LD_ADDR_VAR 0 2
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 4
19882: PUSH
19883: LD_INT 5
19885: PUSH
19886: LD_INT 7
19888: PUSH
19889: LD_INT 11
19891: PUSH
19892: LD_INT 12
19894: PUSH
19895: LD_INT 15
19897: PUSH
19898: LD_INT 16
19900: PUSH
19901: LD_INT 20
19903: PUSH
19904: LD_INT 21
19906: PUSH
19907: LD_INT 22
19909: PUSH
19910: LD_INT 23
19912: PUSH
19913: LD_INT 25
19915: PUSH
19916: LD_INT 26
19918: PUSH
19919: LD_INT 30
19921: PUSH
19922: LD_INT 31
19924: PUSH
19925: LD_INT 32
19927: PUSH
19928: LD_INT 33
19930: PUSH
19931: LD_INT 34
19933: PUSH
19934: LD_INT 35
19936: PUSH
19937: LD_INT 36
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 101
19965: PUSH
19966: LD_INT 102
19968: PUSH
19969: LD_INT 103
19971: PUSH
19972: LD_INT 106
19974: PUSH
19975: LD_INT 108
19977: PUSH
19978: LD_INT 112
19980: PUSH
19981: LD_INT 113
19983: PUSH
19984: LD_INT 114
19986: PUSH
19987: LD_INT 115
19989: PUSH
19990: LD_INT 116
19992: PUSH
19993: LD_INT 117
19995: PUSH
19996: LD_INT 118
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: ST_TO_ADDR
20017: GO 20260
20019: LD_INT 19
20021: DOUBLE
20022: EQUAL
20023: IFTRUE 20027
20025: GO 20259
20027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20028: LD_ADDR_VAR 0 2
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: LD_INT 3
20041: PUSH
20042: LD_INT 4
20044: PUSH
20045: LD_INT 5
20047: PUSH
20048: LD_INT 6
20050: PUSH
20051: LD_INT 7
20053: PUSH
20054: LD_INT 8
20056: PUSH
20057: LD_INT 9
20059: PUSH
20060: LD_INT 10
20062: PUSH
20063: LD_INT 11
20065: PUSH
20066: LD_INT 12
20068: PUSH
20069: LD_INT 13
20071: PUSH
20072: LD_INT 14
20074: PUSH
20075: LD_INT 15
20077: PUSH
20078: LD_INT 16
20080: PUSH
20081: LD_INT 17
20083: PUSH
20084: LD_INT 18
20086: PUSH
20087: LD_INT 19
20089: PUSH
20090: LD_INT 20
20092: PUSH
20093: LD_INT 21
20095: PUSH
20096: LD_INT 22
20098: PUSH
20099: LD_INT 23
20101: PUSH
20102: LD_INT 24
20104: PUSH
20105: LD_INT 25
20107: PUSH
20108: LD_INT 26
20110: PUSH
20111: LD_INT 27
20113: PUSH
20114: LD_INT 28
20116: PUSH
20117: LD_INT 29
20119: PUSH
20120: LD_INT 30
20122: PUSH
20123: LD_INT 31
20125: PUSH
20126: LD_INT 32
20128: PUSH
20129: LD_INT 33
20131: PUSH
20132: LD_INT 34
20134: PUSH
20135: LD_INT 35
20137: PUSH
20138: LD_INT 36
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 101
20181: PUSH
20182: LD_INT 102
20184: PUSH
20185: LD_INT 103
20187: PUSH
20188: LD_INT 104
20190: PUSH
20191: LD_INT 105
20193: PUSH
20194: LD_INT 106
20196: PUSH
20197: LD_INT 107
20199: PUSH
20200: LD_INT 108
20202: PUSH
20203: LD_INT 109
20205: PUSH
20206: LD_INT 110
20208: PUSH
20209: LD_INT 111
20211: PUSH
20212: LD_INT 112
20214: PUSH
20215: LD_INT 113
20217: PUSH
20218: LD_INT 114
20220: PUSH
20221: LD_INT 115
20223: PUSH
20224: LD_INT 116
20226: PUSH
20227: LD_INT 117
20229: PUSH
20230: LD_INT 118
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: ST_TO_ADDR
20257: GO 20260
20259: POP
// end else
20260: GO 20491
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20262: LD_ADDR_VAR 0 2
20266: PUSH
20267: LD_INT 1
20269: PUSH
20270: LD_INT 2
20272: PUSH
20273: LD_INT 3
20275: PUSH
20276: LD_INT 4
20278: PUSH
20279: LD_INT 5
20281: PUSH
20282: LD_INT 6
20284: PUSH
20285: LD_INT 7
20287: PUSH
20288: LD_INT 8
20290: PUSH
20291: LD_INT 9
20293: PUSH
20294: LD_INT 10
20296: PUSH
20297: LD_INT 11
20299: PUSH
20300: LD_INT 12
20302: PUSH
20303: LD_INT 13
20305: PUSH
20306: LD_INT 14
20308: PUSH
20309: LD_INT 15
20311: PUSH
20312: LD_INT 16
20314: PUSH
20315: LD_INT 17
20317: PUSH
20318: LD_INT 18
20320: PUSH
20321: LD_INT 19
20323: PUSH
20324: LD_INT 20
20326: PUSH
20327: LD_INT 21
20329: PUSH
20330: LD_INT 22
20332: PUSH
20333: LD_INT 23
20335: PUSH
20336: LD_INT 24
20338: PUSH
20339: LD_INT 25
20341: PUSH
20342: LD_INT 26
20344: PUSH
20345: LD_INT 27
20347: PUSH
20348: LD_INT 28
20350: PUSH
20351: LD_INT 29
20353: PUSH
20354: LD_INT 30
20356: PUSH
20357: LD_INT 31
20359: PUSH
20360: LD_INT 32
20362: PUSH
20363: LD_INT 33
20365: PUSH
20366: LD_INT 34
20368: PUSH
20369: LD_INT 35
20371: PUSH
20372: LD_INT 36
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 101
20415: PUSH
20416: LD_INT 102
20418: PUSH
20419: LD_INT 103
20421: PUSH
20422: LD_INT 104
20424: PUSH
20425: LD_INT 105
20427: PUSH
20428: LD_INT 106
20430: PUSH
20431: LD_INT 107
20433: PUSH
20434: LD_INT 108
20436: PUSH
20437: LD_INT 109
20439: PUSH
20440: LD_INT 110
20442: PUSH
20443: LD_INT 111
20445: PUSH
20446: LD_INT 112
20448: PUSH
20449: LD_INT 113
20451: PUSH
20452: LD_INT 114
20454: PUSH
20455: LD_INT 115
20457: PUSH
20458: LD_INT 116
20460: PUSH
20461: LD_INT 117
20463: PUSH
20464: LD_INT 118
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: ST_TO_ADDR
// if result then
20491: LD_VAR 0 2
20495: IFFALSE 21281
// begin normal :=  ;
20497: LD_ADDR_VAR 0 5
20501: PUSH
20502: LD_STRING 
20504: ST_TO_ADDR
// hardcore :=  ;
20505: LD_ADDR_VAR 0 6
20509: PUSH
20510: LD_STRING 
20512: ST_TO_ADDR
// active :=  ;
20513: LD_ADDR_VAR 0 7
20517: PUSH
20518: LD_STRING 
20520: ST_TO_ADDR
// for i = 1 to normalCounter do
20521: LD_ADDR_VAR 0 8
20525: PUSH
20526: DOUBLE
20527: LD_INT 1
20529: DEC
20530: ST_TO_ADDR
20531: LD_EXP 41
20535: PUSH
20536: FOR_TO
20537: IFFALSE 20638
// begin tmp := 0 ;
20539: LD_ADDR_VAR 0 3
20543: PUSH
20544: LD_STRING 0
20546: ST_TO_ADDR
// if result [ 1 ] then
20547: LD_VAR 0 2
20551: PUSH
20552: LD_INT 1
20554: ARRAY
20555: IFFALSE 20620
// if result [ 1 ] [ 1 ] = i then
20557: LD_VAR 0 2
20561: PUSH
20562: LD_INT 1
20564: ARRAY
20565: PUSH
20566: LD_INT 1
20568: ARRAY
20569: PUSH
20570: LD_VAR 0 8
20574: EQUAL
20575: IFFALSE 20620
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20577: LD_ADDR_VAR 0 2
20581: PUSH
20582: LD_VAR 0 2
20586: PPUSH
20587: LD_INT 1
20589: PPUSH
20590: LD_VAR 0 2
20594: PUSH
20595: LD_INT 1
20597: ARRAY
20598: PPUSH
20599: LD_INT 1
20601: PPUSH
20602: CALL_OW 3
20606: PPUSH
20607: CALL_OW 1
20611: ST_TO_ADDR
// tmp := 1 ;
20612: LD_ADDR_VAR 0 3
20616: PUSH
20617: LD_STRING 1
20619: ST_TO_ADDR
// end ; normal := normal & tmp ;
20620: LD_ADDR_VAR 0 5
20624: PUSH
20625: LD_VAR 0 5
20629: PUSH
20630: LD_VAR 0 3
20634: STR
20635: ST_TO_ADDR
// end ;
20636: GO 20536
20638: POP
20639: POP
// for i = 1 to hardcoreCounter do
20640: LD_ADDR_VAR 0 8
20644: PUSH
20645: DOUBLE
20646: LD_INT 1
20648: DEC
20649: ST_TO_ADDR
20650: LD_EXP 42
20654: PUSH
20655: FOR_TO
20656: IFFALSE 20761
// begin tmp := 0 ;
20658: LD_ADDR_VAR 0 3
20662: PUSH
20663: LD_STRING 0
20665: ST_TO_ADDR
// if result [ 2 ] then
20666: LD_VAR 0 2
20670: PUSH
20671: LD_INT 2
20673: ARRAY
20674: IFFALSE 20743
// if result [ 2 ] [ 1 ] = 100 + i then
20676: LD_VAR 0 2
20680: PUSH
20681: LD_INT 2
20683: ARRAY
20684: PUSH
20685: LD_INT 1
20687: ARRAY
20688: PUSH
20689: LD_INT 100
20691: PUSH
20692: LD_VAR 0 8
20696: PLUS
20697: EQUAL
20698: IFFALSE 20743
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20700: LD_ADDR_VAR 0 2
20704: PUSH
20705: LD_VAR 0 2
20709: PPUSH
20710: LD_INT 2
20712: PPUSH
20713: LD_VAR 0 2
20717: PUSH
20718: LD_INT 2
20720: ARRAY
20721: PPUSH
20722: LD_INT 1
20724: PPUSH
20725: CALL_OW 3
20729: PPUSH
20730: CALL_OW 1
20734: ST_TO_ADDR
// tmp := 1 ;
20735: LD_ADDR_VAR 0 3
20739: PUSH
20740: LD_STRING 1
20742: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20743: LD_ADDR_VAR 0 6
20747: PUSH
20748: LD_VAR 0 6
20752: PUSH
20753: LD_VAR 0 3
20757: STR
20758: ST_TO_ADDR
// end ;
20759: GO 20655
20761: POP
20762: POP
// if isGameLoad then
20763: LD_VAR 0 1
20767: IFFALSE 21242
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20769: LD_ADDR_VAR 0 4
20773: PUSH
20774: LD_EXP 45
20778: PUSH
20779: LD_EXP 44
20783: PUSH
20784: LD_EXP 46
20788: PUSH
20789: LD_EXP 43
20793: PUSH
20794: LD_EXP 47
20798: PUSH
20799: LD_EXP 48
20803: PUSH
20804: LD_EXP 49
20808: PUSH
20809: LD_EXP 50
20813: PUSH
20814: LD_EXP 51
20818: PUSH
20819: LD_EXP 52
20823: PUSH
20824: LD_EXP 53
20828: PUSH
20829: LD_EXP 54
20833: PUSH
20834: LD_EXP 55
20838: PUSH
20839: LD_EXP 56
20843: PUSH
20844: LD_EXP 64
20848: PUSH
20849: LD_EXP 65
20853: PUSH
20854: LD_EXP 66
20858: PUSH
20859: LD_EXP 67
20863: PUSH
20864: LD_EXP 69
20868: PUSH
20869: LD_EXP 70
20873: PUSH
20874: LD_EXP 71
20878: PUSH
20879: LD_EXP 74
20883: PUSH
20884: LD_EXP 76
20888: PUSH
20889: LD_EXP 77
20893: PUSH
20894: LD_EXP 78
20898: PUSH
20899: LD_EXP 80
20903: PUSH
20904: LD_EXP 81
20908: PUSH
20909: LD_EXP 84
20913: PUSH
20914: LD_EXP 85
20918: PUSH
20919: LD_EXP 86
20923: PUSH
20924: LD_EXP 87
20928: PUSH
20929: LD_EXP 88
20933: PUSH
20934: LD_EXP 89
20938: PUSH
20939: LD_EXP 90
20943: PUSH
20944: LD_EXP 91
20948: PUSH
20949: LD_EXP 92
20953: PUSH
20954: LD_EXP 57
20958: PUSH
20959: LD_EXP 58
20963: PUSH
20964: LD_EXP 61
20968: PUSH
20969: LD_EXP 62
20973: PUSH
20974: LD_EXP 63
20978: PUSH
20979: LD_EXP 59
20983: PUSH
20984: LD_EXP 60
20988: PUSH
20989: LD_EXP 68
20993: PUSH
20994: LD_EXP 72
20998: PUSH
20999: LD_EXP 73
21003: PUSH
21004: LD_EXP 75
21008: PUSH
21009: LD_EXP 79
21013: PUSH
21014: LD_EXP 82
21018: PUSH
21019: LD_EXP 83
21023: PUSH
21024: LD_EXP 93
21028: PUSH
21029: LD_EXP 94
21033: PUSH
21034: LD_EXP 95
21038: PUSH
21039: LD_EXP 96
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: ST_TO_ADDR
// tmp :=  ;
21100: LD_ADDR_VAR 0 3
21104: PUSH
21105: LD_STRING 
21107: ST_TO_ADDR
// for i = 1 to normalCounter do
21108: LD_ADDR_VAR 0 8
21112: PUSH
21113: DOUBLE
21114: LD_INT 1
21116: DEC
21117: ST_TO_ADDR
21118: LD_EXP 41
21122: PUSH
21123: FOR_TO
21124: IFFALSE 21160
// begin if flags [ i ] then
21126: LD_VAR 0 4
21130: PUSH
21131: LD_VAR 0 8
21135: ARRAY
21136: IFFALSE 21158
// tmp := tmp & i & ; ;
21138: LD_ADDR_VAR 0 3
21142: PUSH
21143: LD_VAR 0 3
21147: PUSH
21148: LD_VAR 0 8
21152: STR
21153: PUSH
21154: LD_STRING ;
21156: STR
21157: ST_TO_ADDR
// end ;
21158: GO 21123
21160: POP
21161: POP
// for i = 1 to hardcoreCounter do
21162: LD_ADDR_VAR 0 8
21166: PUSH
21167: DOUBLE
21168: LD_INT 1
21170: DEC
21171: ST_TO_ADDR
21172: LD_EXP 42
21176: PUSH
21177: FOR_TO
21178: IFFALSE 21224
// begin if flags [ normalCounter + i ] then
21180: LD_VAR 0 4
21184: PUSH
21185: LD_EXP 41
21189: PUSH
21190: LD_VAR 0 8
21194: PLUS
21195: ARRAY
21196: IFFALSE 21222
// tmp := tmp & ( 100 + i ) & ; ;
21198: LD_ADDR_VAR 0 3
21202: PUSH
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 100
21210: PUSH
21211: LD_VAR 0 8
21215: PLUS
21216: STR
21217: PUSH
21218: LD_STRING ;
21220: STR
21221: ST_TO_ADDR
// end ;
21222: GO 21177
21224: POP
21225: POP
// if tmp then
21226: LD_VAR 0 3
21230: IFFALSE 21242
// active := tmp ;
21232: LD_ADDR_VAR 0 7
21236: PUSH
21237: LD_VAR 0 3
21241: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21242: LD_STRING getStreamItemsFromMission("
21244: PUSH
21245: LD_VAR 0 5
21249: STR
21250: PUSH
21251: LD_STRING ","
21253: STR
21254: PUSH
21255: LD_VAR 0 6
21259: STR
21260: PUSH
21261: LD_STRING ","
21263: STR
21264: PUSH
21265: LD_VAR 0 7
21269: STR
21270: PUSH
21271: LD_STRING ")
21273: STR
21274: PPUSH
21275: CALL_OW 559
// end else
21279: GO 21288
// ToLua ( getStreamItemsFromMission("","","") ) ;
21281: LD_STRING getStreamItemsFromMission("","","")
21283: PPUSH
21284: CALL_OW 559
// end ;
21288: LD_VAR 0 2
21292: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21293: LD_EXP 40
21297: PUSH
21298: LD_EXP 45
21302: AND
21303: IFFALSE 21427
21305: GO 21307
21307: DISABLE
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
// begin enable ;
21312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21313: LD_ADDR_VAR 0 2
21317: PUSH
21318: LD_INT 22
21320: PUSH
21321: LD_OWVAR 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: LD_INT 34
21335: PUSH
21336: LD_INT 7
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 34
21345: PUSH
21346: LD_INT 45
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 34
21355: PUSH
21356: LD_INT 28
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 34
21365: PUSH
21366: LD_INT 47
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PPUSH
21384: CALL_OW 69
21388: ST_TO_ADDR
// if not tmp then
21389: LD_VAR 0 2
21393: NOT
21394: IFFALSE 21398
// exit ;
21396: GO 21427
// for i in tmp do
21398: LD_ADDR_VAR 0 1
21402: PUSH
21403: LD_VAR 0 2
21407: PUSH
21408: FOR_IN
21409: IFFALSE 21425
// begin SetLives ( i , 0 ) ;
21411: LD_VAR 0 1
21415: PPUSH
21416: LD_INT 0
21418: PPUSH
21419: CALL_OW 234
// end ;
21423: GO 21408
21425: POP
21426: POP
// end ;
21427: PPOPN 2
21429: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21430: LD_EXP 40
21434: PUSH
21435: LD_EXP 46
21439: AND
21440: IFFALSE 21524
21442: GO 21444
21444: DISABLE
21445: LD_INT 0
21447: PPUSH
21448: PPUSH
// begin enable ;
21449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: LD_INT 22
21457: PUSH
21458: LD_OWVAR 2
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 32
21469: PUSH
21470: LD_INT 3
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PPUSH
21481: CALL_OW 69
21485: ST_TO_ADDR
// if not tmp then
21486: LD_VAR 0 2
21490: NOT
21491: IFFALSE 21495
// exit ;
21493: GO 21524
// for i in tmp do
21495: LD_ADDR_VAR 0 1
21499: PUSH
21500: LD_VAR 0 2
21504: PUSH
21505: FOR_IN
21506: IFFALSE 21522
// begin SetLives ( i , 0 ) ;
21508: LD_VAR 0 1
21512: PPUSH
21513: LD_INT 0
21515: PPUSH
21516: CALL_OW 234
// end ;
21520: GO 21505
21522: POP
21523: POP
// end ;
21524: PPOPN 2
21526: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21527: LD_EXP 40
21531: PUSH
21532: LD_EXP 43
21536: AND
21537: IFFALSE 21630
21539: GO 21541
21541: DISABLE
21542: LD_INT 0
21544: PPUSH
// begin enable ;
21545: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21546: LD_ADDR_VAR 0 1
21550: PUSH
21551: LD_INT 22
21553: PUSH
21554: LD_OWVAR 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 5
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 25
21578: PUSH
21579: LD_INT 9
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 25
21588: PUSH
21589: LD_INT 8
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PPUSH
21606: CALL_OW 69
21610: PUSH
21611: FOR_IN
21612: IFFALSE 21628
// begin SetClass ( i , 1 ) ;
21614: LD_VAR 0 1
21618: PPUSH
21619: LD_INT 1
21621: PPUSH
21622: CALL_OW 336
// end ;
21626: GO 21611
21628: POP
21629: POP
// end ;
21630: PPOPN 1
21632: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21633: LD_EXP 40
21637: PUSH
21638: LD_EXP 44
21642: AND
21643: PUSH
21644: LD_OWVAR 65
21648: PUSH
21649: LD_INT 7
21651: LESS
21652: AND
21653: IFFALSE 21667
21655: GO 21657
21657: DISABLE
// begin enable ;
21658: ENABLE
// game_speed := 7 ;
21659: LD_ADDR_OWVAR 65
21663: PUSH
21664: LD_INT 7
21666: ST_TO_ADDR
// end ;
21667: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21668: LD_EXP 40
21672: PUSH
21673: LD_EXP 47
21677: AND
21678: IFFALSE 21880
21680: GO 21682
21682: DISABLE
21683: LD_INT 0
21685: PPUSH
21686: PPUSH
21687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21688: LD_ADDR_VAR 0 3
21692: PUSH
21693: LD_INT 81
21695: PUSH
21696: LD_OWVAR 2
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 21
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PPUSH
21719: CALL_OW 69
21723: ST_TO_ADDR
// if not tmp then
21724: LD_VAR 0 3
21728: NOT
21729: IFFALSE 21733
// exit ;
21731: GO 21880
// if tmp > 5 then
21733: LD_VAR 0 3
21737: PUSH
21738: LD_INT 5
21740: GREATER
21741: IFFALSE 21753
// k := 5 else
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: LD_INT 5
21750: ST_TO_ADDR
21751: GO 21763
// k := tmp ;
21753: LD_ADDR_VAR 0 2
21757: PUSH
21758: LD_VAR 0 3
21762: ST_TO_ADDR
// for i := 1 to k do
21763: LD_ADDR_VAR 0 1
21767: PUSH
21768: DOUBLE
21769: LD_INT 1
21771: DEC
21772: ST_TO_ADDR
21773: LD_VAR 0 2
21777: PUSH
21778: FOR_TO
21779: IFFALSE 21878
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21781: LD_VAR 0 3
21785: PUSH
21786: LD_VAR 0 1
21790: ARRAY
21791: PPUSH
21792: LD_VAR 0 1
21796: PUSH
21797: LD_INT 4
21799: MOD
21800: PUSH
21801: LD_INT 1
21803: PLUS
21804: PPUSH
21805: CALL_OW 259
21809: PUSH
21810: LD_INT 10
21812: LESS
21813: IFFALSE 21876
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21815: LD_VAR 0 3
21819: PUSH
21820: LD_VAR 0 1
21824: ARRAY
21825: PPUSH
21826: LD_VAR 0 1
21830: PUSH
21831: LD_INT 4
21833: MOD
21834: PUSH
21835: LD_INT 1
21837: PLUS
21838: PPUSH
21839: LD_VAR 0 3
21843: PUSH
21844: LD_VAR 0 1
21848: ARRAY
21849: PPUSH
21850: LD_VAR 0 1
21854: PUSH
21855: LD_INT 4
21857: MOD
21858: PUSH
21859: LD_INT 1
21861: PLUS
21862: PPUSH
21863: CALL_OW 259
21867: PUSH
21868: LD_INT 1
21870: PLUS
21871: PPUSH
21872: CALL_OW 237
21876: GO 21778
21878: POP
21879: POP
// end ;
21880: PPOPN 3
21882: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21883: LD_EXP 40
21887: PUSH
21888: LD_EXP 48
21892: AND
21893: IFFALSE 21913
21895: GO 21897
21897: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21898: LD_INT 4
21900: PPUSH
21901: LD_OWVAR 2
21905: PPUSH
21906: LD_INT 0
21908: PPUSH
21909: CALL_OW 324
21913: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21914: LD_EXP 40
21918: PUSH
21919: LD_EXP 77
21923: AND
21924: IFFALSE 21944
21926: GO 21928
21928: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21929: LD_INT 19
21931: PPUSH
21932: LD_OWVAR 2
21936: PPUSH
21937: LD_INT 0
21939: PPUSH
21940: CALL_OW 324
21944: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21945: LD_EXP 40
21949: PUSH
21950: LD_EXP 49
21954: AND
21955: IFFALSE 22057
21957: GO 21959
21959: DISABLE
21960: LD_INT 0
21962: PPUSH
21963: PPUSH
// begin enable ;
21964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21965: LD_ADDR_VAR 0 2
21969: PUSH
21970: LD_INT 22
21972: PUSH
21973: LD_OWVAR 2
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: PUSH
21985: LD_INT 34
21987: PUSH
21988: LD_INT 11
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 34
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PPUSH
22014: CALL_OW 69
22018: ST_TO_ADDR
// if not tmp then
22019: LD_VAR 0 2
22023: NOT
22024: IFFALSE 22028
// exit ;
22026: GO 22057
// for i in tmp do
22028: LD_ADDR_VAR 0 1
22032: PUSH
22033: LD_VAR 0 2
22037: PUSH
22038: FOR_IN
22039: IFFALSE 22055
// begin SetLives ( i , 0 ) ;
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_INT 0
22048: PPUSH
22049: CALL_OW 234
// end ;
22053: GO 22038
22055: POP
22056: POP
// end ;
22057: PPOPN 2
22059: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22060: LD_EXP 40
22064: PUSH
22065: LD_EXP 50
22069: AND
22070: IFFALSE 22090
22072: GO 22074
22074: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22075: LD_INT 32
22077: PPUSH
22078: LD_OWVAR 2
22082: PPUSH
22083: LD_INT 0
22085: PPUSH
22086: CALL_OW 324
22090: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22091: LD_EXP 40
22095: PUSH
22096: LD_EXP 51
22100: AND
22101: IFFALSE 22282
22103: GO 22105
22105: DISABLE
22106: LD_INT 0
22108: PPUSH
22109: PPUSH
22110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22111: LD_ADDR_VAR 0 2
22115: PUSH
22116: LD_INT 22
22118: PUSH
22119: LD_OWVAR 2
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 33
22130: PUSH
22131: LD_INT 3
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PPUSH
22142: CALL_OW 69
22146: ST_TO_ADDR
// if not tmp then
22147: LD_VAR 0 2
22151: NOT
22152: IFFALSE 22156
// exit ;
22154: GO 22282
// side := 0 ;
22156: LD_ADDR_VAR 0 3
22160: PUSH
22161: LD_INT 0
22163: ST_TO_ADDR
// for i := 1 to 8 do
22164: LD_ADDR_VAR 0 1
22168: PUSH
22169: DOUBLE
22170: LD_INT 1
22172: DEC
22173: ST_TO_ADDR
22174: LD_INT 8
22176: PUSH
22177: FOR_TO
22178: IFFALSE 22226
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22180: LD_OWVAR 2
22184: PUSH
22185: LD_VAR 0 1
22189: NONEQUAL
22190: PUSH
22191: LD_OWVAR 2
22195: PPUSH
22196: LD_VAR 0 1
22200: PPUSH
22201: CALL_OW 81
22205: PUSH
22206: LD_INT 2
22208: EQUAL
22209: AND
22210: IFFALSE 22224
// begin side := i ;
22212: LD_ADDR_VAR 0 3
22216: PUSH
22217: LD_VAR 0 1
22221: ST_TO_ADDR
// break ;
22222: GO 22226
// end ;
22224: GO 22177
22226: POP
22227: POP
// if not side then
22228: LD_VAR 0 3
22232: NOT
22233: IFFALSE 22237
// exit ;
22235: GO 22282
// for i := 1 to tmp do
22237: LD_ADDR_VAR 0 1
22241: PUSH
22242: DOUBLE
22243: LD_INT 1
22245: DEC
22246: ST_TO_ADDR
22247: LD_VAR 0 2
22251: PUSH
22252: FOR_TO
22253: IFFALSE 22280
// if Prob ( 60 ) then
22255: LD_INT 60
22257: PPUSH
22258: CALL_OW 13
22262: IFFALSE 22278
// SetSide ( i , side ) ;
22264: LD_VAR 0 1
22268: PPUSH
22269: LD_VAR 0 3
22273: PPUSH
22274: CALL_OW 235
22278: GO 22252
22280: POP
22281: POP
// end ;
22282: PPOPN 3
22284: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22285: LD_EXP 40
22289: PUSH
22290: LD_EXP 53
22294: AND
22295: IFFALSE 22414
22297: GO 22299
22299: DISABLE
22300: LD_INT 0
22302: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22303: LD_ADDR_VAR 0 1
22307: PUSH
22308: LD_INT 22
22310: PUSH
22311: LD_OWVAR 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 21
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 3
22332: PUSH
22333: LD_INT 23
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: PUSH
22357: FOR_IN
22358: IFFALSE 22412
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22360: LD_VAR 0 1
22364: PPUSH
22365: CALL_OW 257
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: LD_INT 4
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: IN
22388: IFFALSE 22410
// SetClass ( un , rand ( 1 , 4 ) ) ;
22390: LD_VAR 0 1
22394: PPUSH
22395: LD_INT 1
22397: PPUSH
22398: LD_INT 4
22400: PPUSH
22401: CALL_OW 12
22405: PPUSH
22406: CALL_OW 336
22410: GO 22357
22412: POP
22413: POP
// end ;
22414: PPOPN 1
22416: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22417: LD_EXP 40
22421: PUSH
22422: LD_EXP 52
22426: AND
22427: IFFALSE 22506
22429: GO 22431
22431: DISABLE
22432: LD_INT 0
22434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22435: LD_ADDR_VAR 0 1
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 21
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PPUSH
22466: CALL_OW 69
22470: ST_TO_ADDR
// if not tmp then
22471: LD_VAR 0 1
22475: NOT
22476: IFFALSE 22480
// exit ;
22478: GO 22506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22480: LD_VAR 0 1
22484: PUSH
22485: LD_INT 1
22487: PPUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 12
22497: ARRAY
22498: PPUSH
22499: LD_INT 100
22501: PPUSH
22502: CALL_OW 234
// end ;
22506: PPOPN 1
22508: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22509: LD_EXP 40
22513: PUSH
22514: LD_EXP 54
22518: AND
22519: IFFALSE 22617
22521: GO 22523
22523: DISABLE
22524: LD_INT 0
22526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22527: LD_ADDR_VAR 0 1
22531: PUSH
22532: LD_INT 22
22534: PUSH
22535: LD_OWVAR 2
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 21
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PPUSH
22558: CALL_OW 69
22562: ST_TO_ADDR
// if not tmp then
22563: LD_VAR 0 1
22567: NOT
22568: IFFALSE 22572
// exit ;
22570: GO 22617
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22572: LD_VAR 0 1
22576: PUSH
22577: LD_INT 1
22579: PPUSH
22580: LD_VAR 0 1
22584: PPUSH
22585: CALL_OW 12
22589: ARRAY
22590: PPUSH
22591: LD_INT 1
22593: PPUSH
22594: LD_INT 4
22596: PPUSH
22597: CALL_OW 12
22601: PPUSH
22602: LD_INT 3000
22604: PPUSH
22605: LD_INT 9000
22607: PPUSH
22608: CALL_OW 12
22612: PPUSH
22613: CALL_OW 492
// end ;
22617: PPOPN 1
22619: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22620: LD_EXP 40
22624: PUSH
22625: LD_EXP 55
22629: AND
22630: IFFALSE 22650
22632: GO 22634
22634: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22635: LD_INT 1
22637: PPUSH
22638: LD_OWVAR 2
22642: PPUSH
22643: LD_INT 0
22645: PPUSH
22646: CALL_OW 324
22650: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22651: LD_EXP 40
22655: PUSH
22656: LD_EXP 56
22660: AND
22661: IFFALSE 22744
22663: GO 22665
22665: DISABLE
22666: LD_INT 0
22668: PPUSH
22669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22670: LD_ADDR_VAR 0 2
22674: PUSH
22675: LD_INT 22
22677: PUSH
22678: LD_OWVAR 2
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 21
22689: PUSH
22690: LD_INT 3
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 69
22705: ST_TO_ADDR
// if not tmp then
22706: LD_VAR 0 2
22710: NOT
22711: IFFALSE 22715
// exit ;
22713: GO 22744
// for i in tmp do
22715: LD_ADDR_VAR 0 1
22719: PUSH
22720: LD_VAR 0 2
22724: PUSH
22725: FOR_IN
22726: IFFALSE 22742
// SetBLevel ( i , 10 ) ;
22728: LD_VAR 0 1
22732: PPUSH
22733: LD_INT 10
22735: PPUSH
22736: CALL_OW 241
22740: GO 22725
22742: POP
22743: POP
// end ;
22744: PPOPN 2
22746: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22747: LD_EXP 40
22751: PUSH
22752: LD_EXP 57
22756: AND
22757: IFFALSE 22868
22759: GO 22761
22761: DISABLE
22762: LD_INT 0
22764: PPUSH
22765: PPUSH
22766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22767: LD_ADDR_VAR 0 3
22771: PUSH
22772: LD_INT 22
22774: PUSH
22775: LD_OWVAR 2
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 25
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PPUSH
22798: CALL_OW 69
22802: ST_TO_ADDR
// if not tmp then
22803: LD_VAR 0 3
22807: NOT
22808: IFFALSE 22812
// exit ;
22810: GO 22868
// un := tmp [ rand ( 1 , tmp ) ] ;
22812: LD_ADDR_VAR 0 2
22816: PUSH
22817: LD_VAR 0 3
22821: PUSH
22822: LD_INT 1
22824: PPUSH
22825: LD_VAR 0 3
22829: PPUSH
22830: CALL_OW 12
22834: ARRAY
22835: ST_TO_ADDR
// if Crawls ( un ) then
22836: LD_VAR 0 2
22840: PPUSH
22841: CALL_OW 318
22845: IFFALSE 22856
// ComWalk ( un ) ;
22847: LD_VAR 0 2
22851: PPUSH
22852: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22856: LD_VAR 0 2
22860: PPUSH
22861: LD_INT 5
22863: PPUSH
22864: CALL_OW 336
// end ;
22868: PPOPN 3
22870: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22871: LD_EXP 40
22875: PUSH
22876: LD_EXP 58
22880: AND
22881: PUSH
22882: LD_OWVAR 67
22886: PUSH
22887: LD_INT 4
22889: LESS
22890: AND
22891: IFFALSE 22910
22893: GO 22895
22895: DISABLE
// begin Difficulty := Difficulty + 1 ;
22896: LD_ADDR_OWVAR 67
22900: PUSH
22901: LD_OWVAR 67
22905: PUSH
22906: LD_INT 1
22908: PLUS
22909: ST_TO_ADDR
// end ;
22910: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22911: LD_EXP 40
22915: PUSH
22916: LD_EXP 59
22920: AND
22921: IFFALSE 23024
22923: GO 22925
22925: DISABLE
22926: LD_INT 0
22928: PPUSH
// begin for i := 1 to 5 do
22929: LD_ADDR_VAR 0 1
22933: PUSH
22934: DOUBLE
22935: LD_INT 1
22937: DEC
22938: ST_TO_ADDR
22939: LD_INT 5
22941: PUSH
22942: FOR_TO
22943: IFFALSE 23022
// begin uc_nation := nation_nature ;
22945: LD_ADDR_OWVAR 21
22949: PUSH
22950: LD_INT 0
22952: ST_TO_ADDR
// uc_side := 0 ;
22953: LD_ADDR_OWVAR 20
22957: PUSH
22958: LD_INT 0
22960: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22961: LD_ADDR_OWVAR 29
22965: PUSH
22966: LD_INT 12
22968: PUSH
22969: LD_INT 12
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: ST_TO_ADDR
// hc_agressivity := 20 ;
22976: LD_ADDR_OWVAR 35
22980: PUSH
22981: LD_INT 20
22983: ST_TO_ADDR
// hc_class := class_tiger ;
22984: LD_ADDR_OWVAR 28
22988: PUSH
22989: LD_INT 14
22991: ST_TO_ADDR
// hc_gallery :=  ;
22992: LD_ADDR_OWVAR 33
22996: PUSH
22997: LD_STRING 
22999: ST_TO_ADDR
// hc_name :=  ;
23000: LD_ADDR_OWVAR 26
23004: PUSH
23005: LD_STRING 
23007: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23008: CALL_OW 44
23012: PPUSH
23013: LD_INT 0
23015: PPUSH
23016: CALL_OW 51
// end ;
23020: GO 22942
23022: POP
23023: POP
// end ;
23024: PPOPN 1
23026: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23027: LD_EXP 40
23031: PUSH
23032: LD_EXP 60
23036: AND
23037: IFFALSE 23046
23039: GO 23041
23041: DISABLE
// StreamSibBomb ;
23042: CALL 23047 0 0
23046: END
// export function StreamSibBomb ; var i , x , y ; begin
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
23051: PPUSH
23052: PPUSH
// result := false ;
23053: LD_ADDR_VAR 0 1
23057: PUSH
23058: LD_INT 0
23060: ST_TO_ADDR
// for i := 1 to 16 do
23061: LD_ADDR_VAR 0 2
23065: PUSH
23066: DOUBLE
23067: LD_INT 1
23069: DEC
23070: ST_TO_ADDR
23071: LD_INT 16
23073: PUSH
23074: FOR_TO
23075: IFFALSE 23274
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23077: LD_ADDR_VAR 0 3
23081: PUSH
23082: LD_INT 10
23084: PUSH
23085: LD_INT 20
23087: PUSH
23088: LD_INT 30
23090: PUSH
23091: LD_INT 40
23093: PUSH
23094: LD_INT 50
23096: PUSH
23097: LD_INT 60
23099: PUSH
23100: LD_INT 70
23102: PUSH
23103: LD_INT 80
23105: PUSH
23106: LD_INT 90
23108: PUSH
23109: LD_INT 100
23111: PUSH
23112: LD_INT 110
23114: PUSH
23115: LD_INT 120
23117: PUSH
23118: LD_INT 130
23120: PUSH
23121: LD_INT 140
23123: PUSH
23124: LD_INT 150
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 1
23146: PPUSH
23147: LD_INT 15
23149: PPUSH
23150: CALL_OW 12
23154: ARRAY
23155: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23156: LD_ADDR_VAR 0 4
23160: PUSH
23161: LD_INT 10
23163: PUSH
23164: LD_INT 20
23166: PUSH
23167: LD_INT 30
23169: PUSH
23170: LD_INT 40
23172: PUSH
23173: LD_INT 50
23175: PUSH
23176: LD_INT 60
23178: PUSH
23179: LD_INT 70
23181: PUSH
23182: LD_INT 80
23184: PUSH
23185: LD_INT 90
23187: PUSH
23188: LD_INT 100
23190: PUSH
23191: LD_INT 110
23193: PUSH
23194: LD_INT 120
23196: PUSH
23197: LD_INT 130
23199: PUSH
23200: LD_INT 140
23202: PUSH
23203: LD_INT 150
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PPUSH
23226: LD_INT 15
23228: PPUSH
23229: CALL_OW 12
23233: ARRAY
23234: ST_TO_ADDR
// if ValidHex ( x , y ) then
23235: LD_VAR 0 3
23239: PPUSH
23240: LD_VAR 0 4
23244: PPUSH
23245: CALL_OW 488
23249: IFFALSE 23272
// begin result := [ x , y ] ;
23251: LD_ADDR_VAR 0 1
23255: PUSH
23256: LD_VAR 0 3
23260: PUSH
23261: LD_VAR 0 4
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: ST_TO_ADDR
// break ;
23270: GO 23274
// end ; end ;
23272: GO 23074
23274: POP
23275: POP
// if result then
23276: LD_VAR 0 1
23280: IFFALSE 23340
// begin ToLua ( playSibBomb() ) ;
23282: LD_STRING playSibBomb()
23284: PPUSH
23285: CALL_OW 559
// wait ( 0 0$14 ) ;
23289: LD_INT 490
23291: PPUSH
23292: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23296: LD_VAR 0 1
23300: PUSH
23301: LD_INT 1
23303: ARRAY
23304: PPUSH
23305: LD_VAR 0 1
23309: PUSH
23310: LD_INT 2
23312: ARRAY
23313: PPUSH
23314: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23318: LD_VAR 0 1
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: LD_VAR 0 1
23331: PUSH
23332: LD_INT 2
23334: ARRAY
23335: PPUSH
23336: CALL_OW 429
// end ; end ;
23340: LD_VAR 0 1
23344: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23345: LD_EXP 40
23349: PUSH
23350: LD_EXP 62
23354: AND
23355: IFFALSE 23367
23357: GO 23359
23359: DISABLE
// YouLost (  ) ;
23360: LD_STRING 
23362: PPUSH
23363: CALL_OW 104
23367: END
// every 0 0$1 trigger StreamModeActive and sFog do
23368: LD_EXP 40
23372: PUSH
23373: LD_EXP 61
23377: AND
23378: IFFALSE 23392
23380: GO 23382
23382: DISABLE
// FogOff ( your_side ) ;
23383: LD_OWVAR 2
23387: PPUSH
23388: CALL_OW 344
23392: END
// every 0 0$1 trigger StreamModeActive and sSun do
23393: LD_EXP 40
23397: PUSH
23398: LD_EXP 63
23402: AND
23403: IFFALSE 23431
23405: GO 23407
23407: DISABLE
// begin solar_recharge_percent := 0 ;
23408: LD_ADDR_OWVAR 79
23412: PUSH
23413: LD_INT 0
23415: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23416: LD_INT 10500
23418: PPUSH
23419: CALL_OW 67
// solar_recharge_percent := 100 ;
23423: LD_ADDR_OWVAR 79
23427: PUSH
23428: LD_INT 100
23430: ST_TO_ADDR
// end ;
23431: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23432: LD_EXP 40
23436: PUSH
23437: LD_EXP 64
23441: AND
23442: IFFALSE 23681
23444: GO 23446
23446: DISABLE
23447: LD_INT 0
23449: PPUSH
23450: PPUSH
23451: PPUSH
// begin tmp := [ ] ;
23452: LD_ADDR_VAR 0 3
23456: PUSH
23457: EMPTY
23458: ST_TO_ADDR
// for i := 1 to 6 do
23459: LD_ADDR_VAR 0 1
23463: PUSH
23464: DOUBLE
23465: LD_INT 1
23467: DEC
23468: ST_TO_ADDR
23469: LD_INT 6
23471: PUSH
23472: FOR_TO
23473: IFFALSE 23578
// begin uc_nation := nation_nature ;
23475: LD_ADDR_OWVAR 21
23479: PUSH
23480: LD_INT 0
23482: ST_TO_ADDR
// uc_side := 0 ;
23483: LD_ADDR_OWVAR 20
23487: PUSH
23488: LD_INT 0
23490: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23491: LD_ADDR_OWVAR 29
23495: PUSH
23496: LD_INT 12
23498: PUSH
23499: LD_INT 12
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: ST_TO_ADDR
// hc_agressivity := 20 ;
23506: LD_ADDR_OWVAR 35
23510: PUSH
23511: LD_INT 20
23513: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23514: LD_ADDR_OWVAR 28
23518: PUSH
23519: LD_INT 17
23521: ST_TO_ADDR
// hc_gallery :=  ;
23522: LD_ADDR_OWVAR 33
23526: PUSH
23527: LD_STRING 
23529: ST_TO_ADDR
// hc_name :=  ;
23530: LD_ADDR_OWVAR 26
23534: PUSH
23535: LD_STRING 
23537: ST_TO_ADDR
// un := CreateHuman ;
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: CALL_OW 44
23547: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23548: LD_VAR 0 2
23552: PPUSH
23553: LD_INT 1
23555: PPUSH
23556: CALL_OW 51
// tmp := tmp ^ un ;
23560: LD_ADDR_VAR 0 3
23564: PUSH
23565: LD_VAR 0 3
23569: PUSH
23570: LD_VAR 0 2
23574: ADD
23575: ST_TO_ADDR
// end ;
23576: GO 23472
23578: POP
23579: POP
// repeat wait ( 0 0$1 ) ;
23580: LD_INT 35
23582: PPUSH
23583: CALL_OW 67
// for un in tmp do
23587: LD_ADDR_VAR 0 2
23591: PUSH
23592: LD_VAR 0 3
23596: PUSH
23597: FOR_IN
23598: IFFALSE 23672
// begin if IsDead ( un ) then
23600: LD_VAR 0 2
23604: PPUSH
23605: CALL_OW 301
23609: IFFALSE 23629
// begin tmp := tmp diff un ;
23611: LD_ADDR_VAR 0 3
23615: PUSH
23616: LD_VAR 0 3
23620: PUSH
23621: LD_VAR 0 2
23625: DIFF
23626: ST_TO_ADDR
// continue ;
23627: GO 23597
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23629: LD_VAR 0 2
23633: PPUSH
23634: LD_INT 3
23636: PUSH
23637: LD_INT 22
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PPUSH
23651: CALL_OW 69
23655: PPUSH
23656: LD_VAR 0 2
23660: PPUSH
23661: CALL_OW 74
23665: PPUSH
23666: CALL_OW 115
// end ;
23670: GO 23597
23672: POP
23673: POP
// until not tmp ;
23674: LD_VAR 0 3
23678: NOT
23679: IFFALSE 23580
// end ;
23681: PPOPN 3
23683: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23684: LD_EXP 40
23688: PUSH
23689: LD_EXP 65
23693: AND
23694: IFFALSE 23748
23696: GO 23698
23698: DISABLE
// begin ToLua ( displayTroll(); ) ;
23699: LD_STRING displayTroll();
23701: PPUSH
23702: CALL_OW 559
// wait ( 3 3$00 ) ;
23706: LD_INT 6300
23708: PPUSH
23709: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23713: LD_STRING hideTroll();
23715: PPUSH
23716: CALL_OW 559
// wait ( 1 1$00 ) ;
23720: LD_INT 2100
23722: PPUSH
23723: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23727: LD_STRING displayTroll();
23729: PPUSH
23730: CALL_OW 559
// wait ( 1 1$00 ) ;
23734: LD_INT 2100
23736: PPUSH
23737: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23741: LD_STRING hideTroll();
23743: PPUSH
23744: CALL_OW 559
// end ;
23748: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23749: LD_EXP 40
23753: PUSH
23754: LD_EXP 66
23758: AND
23759: IFFALSE 23822
23761: GO 23763
23763: DISABLE
23764: LD_INT 0
23766: PPUSH
// begin p := 0 ;
23767: LD_ADDR_VAR 0 1
23771: PUSH
23772: LD_INT 0
23774: ST_TO_ADDR
// repeat game_speed := 1 ;
23775: LD_ADDR_OWVAR 65
23779: PUSH
23780: LD_INT 1
23782: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23783: LD_INT 35
23785: PPUSH
23786: CALL_OW 67
// p := p + 1 ;
23790: LD_ADDR_VAR 0 1
23794: PUSH
23795: LD_VAR 0 1
23799: PUSH
23800: LD_INT 1
23802: PLUS
23803: ST_TO_ADDR
// until p >= 60 ;
23804: LD_VAR 0 1
23808: PUSH
23809: LD_INT 60
23811: GREATEREQUAL
23812: IFFALSE 23775
// game_speed := 4 ;
23814: LD_ADDR_OWVAR 65
23818: PUSH
23819: LD_INT 4
23821: ST_TO_ADDR
// end ;
23822: PPOPN 1
23824: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23825: LD_EXP 40
23829: PUSH
23830: LD_EXP 67
23834: AND
23835: IFFALSE 23981
23837: GO 23839
23839: DISABLE
23840: LD_INT 0
23842: PPUSH
23843: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23844: LD_ADDR_VAR 0 1
23848: PUSH
23849: LD_INT 22
23851: PUSH
23852: LD_OWVAR 2
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: LD_INT 30
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 30
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 69
23897: ST_TO_ADDR
// if not depot then
23898: LD_VAR 0 1
23902: NOT
23903: IFFALSE 23907
// exit ;
23905: GO 23981
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23907: LD_ADDR_VAR 0 2
23911: PUSH
23912: LD_VAR 0 1
23916: PUSH
23917: LD_INT 1
23919: PPUSH
23920: LD_VAR 0 1
23924: PPUSH
23925: CALL_OW 12
23929: ARRAY
23930: PPUSH
23931: CALL_OW 274
23935: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23936: LD_VAR 0 2
23940: PPUSH
23941: LD_INT 1
23943: PPUSH
23944: LD_INT 0
23946: PPUSH
23947: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23951: LD_VAR 0 2
23955: PPUSH
23956: LD_INT 2
23958: PPUSH
23959: LD_INT 0
23961: PPUSH
23962: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23966: LD_VAR 0 2
23970: PPUSH
23971: LD_INT 3
23973: PPUSH
23974: LD_INT 0
23976: PPUSH
23977: CALL_OW 277
// end ;
23981: PPOPN 2
23983: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23984: LD_EXP 40
23988: PUSH
23989: LD_EXP 68
23993: AND
23994: IFFALSE 24091
23996: GO 23998
23998: DISABLE
23999: LD_INT 0
24001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24002: LD_ADDR_VAR 0 1
24006: PUSH
24007: LD_INT 22
24009: PUSH
24010: LD_OWVAR 2
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 21
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 3
24031: PUSH
24032: LD_INT 23
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: PPUSH
24051: CALL_OW 69
24055: ST_TO_ADDR
// if not tmp then
24056: LD_VAR 0 1
24060: NOT
24061: IFFALSE 24065
// exit ;
24063: GO 24091
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24065: LD_VAR 0 1
24069: PUSH
24070: LD_INT 1
24072: PPUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL_OW 12
24082: ARRAY
24083: PPUSH
24084: LD_INT 200
24086: PPUSH
24087: CALL_OW 234
// end ;
24091: PPOPN 1
24093: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24094: LD_EXP 40
24098: PUSH
24099: LD_EXP 69
24103: AND
24104: IFFALSE 24183
24106: GO 24108
24108: DISABLE
24109: LD_INT 0
24111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24112: LD_ADDR_VAR 0 1
24116: PUSH
24117: LD_INT 22
24119: PUSH
24120: LD_OWVAR 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 21
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PPUSH
24143: CALL_OW 69
24147: ST_TO_ADDR
// if not tmp then
24148: LD_VAR 0 1
24152: NOT
24153: IFFALSE 24157
// exit ;
24155: GO 24183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24157: LD_VAR 0 1
24161: PUSH
24162: LD_INT 1
24164: PPUSH
24165: LD_VAR 0 1
24169: PPUSH
24170: CALL_OW 12
24174: ARRAY
24175: PPUSH
24176: LD_INT 60
24178: PPUSH
24179: CALL_OW 234
// end ;
24183: PPOPN 1
24185: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24186: LD_EXP 40
24190: PUSH
24191: LD_EXP 70
24195: AND
24196: IFFALSE 24295
24198: GO 24200
24200: DISABLE
24201: LD_INT 0
24203: PPUSH
24204: PPUSH
// begin enable ;
24205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24206: LD_ADDR_VAR 0 1
24210: PUSH
24211: LD_INT 22
24213: PUSH
24214: LD_OWVAR 2
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 61
24225: PUSH
24226: EMPTY
24227: LIST
24228: PUSH
24229: LD_INT 33
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: PPUSH
24244: CALL_OW 69
24248: ST_TO_ADDR
// if not tmp then
24249: LD_VAR 0 1
24253: NOT
24254: IFFALSE 24258
// exit ;
24256: GO 24295
// for i in tmp do
24258: LD_ADDR_VAR 0 2
24262: PUSH
24263: LD_VAR 0 1
24267: PUSH
24268: FOR_IN
24269: IFFALSE 24293
// if IsControledBy ( i ) then
24271: LD_VAR 0 2
24275: PPUSH
24276: CALL_OW 312
24280: IFFALSE 24291
// ComUnlink ( i ) ;
24282: LD_VAR 0 2
24286: PPUSH
24287: CALL_OW 136
24291: GO 24268
24293: POP
24294: POP
// end ;
24295: PPOPN 2
24297: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24298: LD_EXP 40
24302: PUSH
24303: LD_EXP 71
24307: AND
24308: IFFALSE 24448
24310: GO 24312
24312: DISABLE
24313: LD_INT 0
24315: PPUSH
24316: PPUSH
// begin ToLua ( displayPowell(); ) ;
24317: LD_STRING displayPowell();
24319: PPUSH
24320: CALL_OW 559
// uc_side := 0 ;
24324: LD_ADDR_OWVAR 20
24328: PUSH
24329: LD_INT 0
24331: ST_TO_ADDR
// uc_nation := 2 ;
24332: LD_ADDR_OWVAR 21
24336: PUSH
24337: LD_INT 2
24339: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24340: LD_ADDR_OWVAR 37
24344: PUSH
24345: LD_INT 14
24347: ST_TO_ADDR
// vc_engine := engine_siberite ;
24348: LD_ADDR_OWVAR 39
24352: PUSH
24353: LD_INT 3
24355: ST_TO_ADDR
// vc_control := control_apeman ;
24356: LD_ADDR_OWVAR 38
24360: PUSH
24361: LD_INT 5
24363: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24364: LD_ADDR_OWVAR 40
24368: PUSH
24369: LD_INT 29
24371: ST_TO_ADDR
// un := CreateVehicle ;
24372: LD_ADDR_VAR 0 2
24376: PUSH
24377: CALL_OW 45
24381: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24382: LD_VAR 0 2
24386: PPUSH
24387: LD_INT 1
24389: PPUSH
24390: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24394: LD_INT 35
24396: PPUSH
24397: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24401: LD_VAR 0 2
24405: PPUSH
24406: LD_INT 22
24408: PUSH
24409: LD_OWVAR 2
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 69
24422: PPUSH
24423: LD_VAR 0 2
24427: PPUSH
24428: CALL_OW 74
24432: PPUSH
24433: CALL_OW 115
// until IsDead ( un ) ;
24437: LD_VAR 0 2
24441: PPUSH
24442: CALL_OW 301
24446: IFFALSE 24394
// end ;
24448: PPOPN 2
24450: END
// every 0 0$1 trigger StreamModeActive and sStu do
24451: LD_EXP 40
24455: PUSH
24456: LD_EXP 79
24460: AND
24461: IFFALSE 24477
24463: GO 24465
24465: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24466: LD_STRING displayStucuk();
24468: PPUSH
24469: CALL_OW 559
// ResetFog ;
24473: CALL_OW 335
// end ;
24477: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24478: LD_EXP 40
24482: PUSH
24483: LD_EXP 72
24487: AND
24488: IFFALSE 24629
24490: GO 24492
24492: DISABLE
24493: LD_INT 0
24495: PPUSH
24496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24497: LD_ADDR_VAR 0 2
24501: PUSH
24502: LD_INT 22
24504: PUSH
24505: LD_OWVAR 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 21
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PPUSH
24528: CALL_OW 69
24532: ST_TO_ADDR
// if not tmp then
24533: LD_VAR 0 2
24537: NOT
24538: IFFALSE 24542
// exit ;
24540: GO 24629
// un := tmp [ rand ( 1 , tmp ) ] ;
24542: LD_ADDR_VAR 0 1
24546: PUSH
24547: LD_VAR 0 2
24551: PUSH
24552: LD_INT 1
24554: PPUSH
24555: LD_VAR 0 2
24559: PPUSH
24560: CALL_OW 12
24564: ARRAY
24565: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24566: LD_VAR 0 1
24570: PPUSH
24571: LD_INT 0
24573: PPUSH
24574: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24578: LD_VAR 0 1
24582: PPUSH
24583: LD_OWVAR 3
24587: PUSH
24588: LD_VAR 0 1
24592: DIFF
24593: PPUSH
24594: LD_VAR 0 1
24598: PPUSH
24599: CALL_OW 74
24603: PPUSH
24604: CALL_OW 115
// wait ( 0 0$20 ) ;
24608: LD_INT 700
24610: PPUSH
24611: CALL_OW 67
// SetSide ( un , your_side ) ;
24615: LD_VAR 0 1
24619: PPUSH
24620: LD_OWVAR 2
24624: PPUSH
24625: CALL_OW 235
// end ;
24629: PPOPN 2
24631: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24632: LD_EXP 40
24636: PUSH
24637: LD_EXP 73
24641: AND
24642: IFFALSE 24748
24644: GO 24646
24646: DISABLE
24647: LD_INT 0
24649: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24650: LD_ADDR_VAR 0 1
24654: PUSH
24655: LD_INT 22
24657: PUSH
24658: LD_OWVAR 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: LD_INT 30
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 30
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: ST_TO_ADDR
// if not depot then
24704: LD_VAR 0 1
24708: NOT
24709: IFFALSE 24713
// exit ;
24711: GO 24748
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24713: LD_VAR 0 1
24717: PUSH
24718: LD_INT 1
24720: ARRAY
24721: PPUSH
24722: CALL_OW 250
24726: PPUSH
24727: LD_VAR 0 1
24731: PUSH
24732: LD_INT 1
24734: ARRAY
24735: PPUSH
24736: CALL_OW 251
24740: PPUSH
24741: LD_INT 70
24743: PPUSH
24744: CALL_OW 495
// end ;
24748: PPOPN 1
24750: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24751: LD_EXP 40
24755: PUSH
24756: LD_EXP 74
24760: AND
24761: IFFALSE 24972
24763: GO 24765
24765: DISABLE
24766: LD_INT 0
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
24772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24773: LD_ADDR_VAR 0 5
24777: PUSH
24778: LD_INT 22
24780: PUSH
24781: LD_OWVAR 2
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 21
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PPUSH
24804: CALL_OW 69
24808: ST_TO_ADDR
// if not tmp then
24809: LD_VAR 0 5
24813: NOT
24814: IFFALSE 24818
// exit ;
24816: GO 24972
// for i in tmp do
24818: LD_ADDR_VAR 0 1
24822: PUSH
24823: LD_VAR 0 5
24827: PUSH
24828: FOR_IN
24829: IFFALSE 24970
// begin d := rand ( 0 , 5 ) ;
24831: LD_ADDR_VAR 0 4
24835: PUSH
24836: LD_INT 0
24838: PPUSH
24839: LD_INT 5
24841: PPUSH
24842: CALL_OW 12
24846: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24847: LD_ADDR_VAR 0 2
24851: PUSH
24852: LD_VAR 0 1
24856: PPUSH
24857: CALL_OW 250
24861: PPUSH
24862: LD_VAR 0 4
24866: PPUSH
24867: LD_INT 3
24869: PPUSH
24870: LD_INT 12
24872: PPUSH
24873: CALL_OW 12
24877: PPUSH
24878: CALL_OW 272
24882: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24883: LD_ADDR_VAR 0 3
24887: PUSH
24888: LD_VAR 0 1
24892: PPUSH
24893: CALL_OW 251
24897: PPUSH
24898: LD_VAR 0 4
24902: PPUSH
24903: LD_INT 3
24905: PPUSH
24906: LD_INT 12
24908: PPUSH
24909: CALL_OW 12
24913: PPUSH
24914: CALL_OW 273
24918: ST_TO_ADDR
// if ValidHex ( x , y ) then
24919: LD_VAR 0 2
24923: PPUSH
24924: LD_VAR 0 3
24928: PPUSH
24929: CALL_OW 488
24933: IFFALSE 24968
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24935: LD_VAR 0 1
24939: PPUSH
24940: LD_VAR 0 2
24944: PPUSH
24945: LD_VAR 0 3
24949: PPUSH
24950: LD_INT 3
24952: PPUSH
24953: LD_INT 6
24955: PPUSH
24956: CALL_OW 12
24960: PPUSH
24961: LD_INT 1
24963: PPUSH
24964: CALL_OW 483
// end ;
24968: GO 24828
24970: POP
24971: POP
// end ;
24972: PPOPN 5
24974: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24975: LD_EXP 40
24979: PUSH
24980: LD_EXP 75
24984: AND
24985: IFFALSE 25079
24987: GO 24989
24989: DISABLE
24990: LD_INT 0
24992: PPUSH
24993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24994: LD_ADDR_VAR 0 2
24998: PUSH
24999: LD_INT 22
25001: PUSH
25002: LD_OWVAR 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 32
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 21
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: PPUSH
25036: CALL_OW 69
25040: ST_TO_ADDR
// if not tmp then
25041: LD_VAR 0 2
25045: NOT
25046: IFFALSE 25050
// exit ;
25048: GO 25079
// for i in tmp do
25050: LD_ADDR_VAR 0 1
25054: PUSH
25055: LD_VAR 0 2
25059: PUSH
25060: FOR_IN
25061: IFFALSE 25077
// SetFuel ( i , 0 ) ;
25063: LD_VAR 0 1
25067: PPUSH
25068: LD_INT 0
25070: PPUSH
25071: CALL_OW 240
25075: GO 25060
25077: POP
25078: POP
// end ;
25079: PPOPN 2
25081: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25082: LD_EXP 40
25086: PUSH
25087: LD_EXP 76
25091: AND
25092: IFFALSE 25158
25094: GO 25096
25096: DISABLE
25097: LD_INT 0
25099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25100: LD_ADDR_VAR 0 1
25104: PUSH
25105: LD_INT 22
25107: PUSH
25108: LD_OWVAR 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 30
25119: PUSH
25120: LD_INT 29
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PPUSH
25131: CALL_OW 69
25135: ST_TO_ADDR
// if not tmp then
25136: LD_VAR 0 1
25140: NOT
25141: IFFALSE 25145
// exit ;
25143: GO 25158
// DestroyUnit ( tmp [ 1 ] ) ;
25145: LD_VAR 0 1
25149: PUSH
25150: LD_INT 1
25152: ARRAY
25153: PPUSH
25154: CALL_OW 65
// end ;
25158: PPOPN 1
25160: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25161: LD_EXP 40
25165: PUSH
25166: LD_EXP 78
25170: AND
25171: IFFALSE 25300
25173: GO 25175
25175: DISABLE
25176: LD_INT 0
25178: PPUSH
// begin uc_side := 0 ;
25179: LD_ADDR_OWVAR 20
25183: PUSH
25184: LD_INT 0
25186: ST_TO_ADDR
// uc_nation := nation_arabian ;
25187: LD_ADDR_OWVAR 21
25191: PUSH
25192: LD_INT 2
25194: ST_TO_ADDR
// hc_gallery :=  ;
25195: LD_ADDR_OWVAR 33
25199: PUSH
25200: LD_STRING 
25202: ST_TO_ADDR
// hc_name :=  ;
25203: LD_ADDR_OWVAR 26
25207: PUSH
25208: LD_STRING 
25210: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25211: LD_INT 1
25213: PPUSH
25214: LD_INT 11
25216: PPUSH
25217: LD_INT 10
25219: PPUSH
25220: CALL_OW 380
// un := CreateHuman ;
25224: LD_ADDR_VAR 0 1
25228: PUSH
25229: CALL_OW 44
25233: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25234: LD_VAR 0 1
25238: PPUSH
25239: LD_INT 1
25241: PPUSH
25242: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25246: LD_INT 35
25248: PPUSH
25249: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25253: LD_VAR 0 1
25257: PPUSH
25258: LD_INT 22
25260: PUSH
25261: LD_OWVAR 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 69
25274: PPUSH
25275: LD_VAR 0 1
25279: PPUSH
25280: CALL_OW 74
25284: PPUSH
25285: CALL_OW 115
// until IsDead ( un ) ;
25289: LD_VAR 0 1
25293: PPUSH
25294: CALL_OW 301
25298: IFFALSE 25246
// end ;
25300: PPOPN 1
25302: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25303: LD_EXP 40
25307: PUSH
25308: LD_EXP 80
25312: AND
25313: IFFALSE 25325
25315: GO 25317
25317: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25318: LD_STRING earthquake(getX(game), 0, 32)
25320: PPUSH
25321: CALL_OW 559
25325: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25326: LD_EXP 40
25330: PUSH
25331: LD_EXP 81
25335: AND
25336: IFFALSE 25427
25338: GO 25340
25340: DISABLE
25341: LD_INT 0
25343: PPUSH
// begin enable ;
25344: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25345: LD_ADDR_VAR 0 1
25349: PUSH
25350: LD_INT 22
25352: PUSH
25353: LD_OWVAR 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 21
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 33
25374: PUSH
25375: LD_INT 3
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: LIST
25386: PPUSH
25387: CALL_OW 69
25391: ST_TO_ADDR
// if not tmp then
25392: LD_VAR 0 1
25396: NOT
25397: IFFALSE 25401
// exit ;
25399: GO 25427
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25401: LD_VAR 0 1
25405: PUSH
25406: LD_INT 1
25408: PPUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: CALL_OW 12
25418: ARRAY
25419: PPUSH
25420: LD_INT 1
25422: PPUSH
25423: CALL_OW 234
// end ;
25427: PPOPN 1
25429: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25430: LD_EXP 40
25434: PUSH
25435: LD_EXP 82
25439: AND
25440: IFFALSE 25581
25442: GO 25444
25444: DISABLE
25445: LD_INT 0
25447: PPUSH
25448: PPUSH
25449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25450: LD_ADDR_VAR 0 3
25454: PUSH
25455: LD_INT 22
25457: PUSH
25458: LD_OWVAR 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 25
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PPUSH
25481: CALL_OW 69
25485: ST_TO_ADDR
// if not tmp then
25486: LD_VAR 0 3
25490: NOT
25491: IFFALSE 25495
// exit ;
25493: GO 25581
// un := tmp [ rand ( 1 , tmp ) ] ;
25495: LD_ADDR_VAR 0 2
25499: PUSH
25500: LD_VAR 0 3
25504: PUSH
25505: LD_INT 1
25507: PPUSH
25508: LD_VAR 0 3
25512: PPUSH
25513: CALL_OW 12
25517: ARRAY
25518: ST_TO_ADDR
// if Crawls ( un ) then
25519: LD_VAR 0 2
25523: PPUSH
25524: CALL_OW 318
25528: IFFALSE 25539
// ComWalk ( un ) ;
25530: LD_VAR 0 2
25534: PPUSH
25535: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25539: LD_VAR 0 2
25543: PPUSH
25544: LD_INT 9
25546: PPUSH
25547: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25551: LD_INT 28
25553: PPUSH
25554: LD_OWVAR 2
25558: PPUSH
25559: LD_INT 2
25561: PPUSH
25562: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25566: LD_INT 29
25568: PPUSH
25569: LD_OWVAR 2
25573: PPUSH
25574: LD_INT 2
25576: PPUSH
25577: CALL_OW 322
// end ;
25581: PPOPN 3
25583: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25584: LD_EXP 40
25588: PUSH
25589: LD_EXP 83
25593: AND
25594: IFFALSE 25705
25596: GO 25598
25598: DISABLE
25599: LD_INT 0
25601: PPUSH
25602: PPUSH
25603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25604: LD_ADDR_VAR 0 3
25608: PUSH
25609: LD_INT 22
25611: PUSH
25612: LD_OWVAR 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 25
25623: PUSH
25624: LD_INT 1
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 69
25639: ST_TO_ADDR
// if not tmp then
25640: LD_VAR 0 3
25644: NOT
25645: IFFALSE 25649
// exit ;
25647: GO 25705
// un := tmp [ rand ( 1 , tmp ) ] ;
25649: LD_ADDR_VAR 0 2
25653: PUSH
25654: LD_VAR 0 3
25658: PUSH
25659: LD_INT 1
25661: PPUSH
25662: LD_VAR 0 3
25666: PPUSH
25667: CALL_OW 12
25671: ARRAY
25672: ST_TO_ADDR
// if Crawls ( un ) then
25673: LD_VAR 0 2
25677: PPUSH
25678: CALL_OW 318
25682: IFFALSE 25693
// ComWalk ( un ) ;
25684: LD_VAR 0 2
25688: PPUSH
25689: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_INT 8
25700: PPUSH
25701: CALL_OW 336
// end ;
25705: PPOPN 3
25707: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25708: LD_EXP 40
25712: PUSH
25713: LD_EXP 84
25717: AND
25718: IFFALSE 25862
25720: GO 25722
25722: DISABLE
25723: LD_INT 0
25725: PPUSH
25726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_INT 22
25734: PUSH
25735: LD_OWVAR 2
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 21
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: LD_INT 34
25759: PUSH
25760: LD_INT 12
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 34
25769: PUSH
25770: LD_INT 51
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 34
25779: PUSH
25780: LD_INT 32
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: PPUSH
25798: CALL_OW 69
25802: ST_TO_ADDR
// if not tmp then
25803: LD_VAR 0 2
25807: NOT
25808: IFFALSE 25812
// exit ;
25810: GO 25862
// for i in tmp do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: LD_VAR 0 2
25821: PUSH
25822: FOR_IN
25823: IFFALSE 25860
// if GetCargo ( i , mat_artifact ) = 0 then
25825: LD_VAR 0 1
25829: PPUSH
25830: LD_INT 4
25832: PPUSH
25833: CALL_OW 289
25837: PUSH
25838: LD_INT 0
25840: EQUAL
25841: IFFALSE 25858
// SetCargo ( i , mat_siberit , 100 ) ;
25843: LD_VAR 0 1
25847: PPUSH
25848: LD_INT 3
25850: PPUSH
25851: LD_INT 100
25853: PPUSH
25854: CALL_OW 290
25858: GO 25822
25860: POP
25861: POP
// end ;
25862: PPOPN 2
25864: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25865: LD_EXP 40
25869: PUSH
25870: LD_EXP 85
25874: AND
25875: IFFALSE 26058
25877: GO 25879
25879: DISABLE
25880: LD_INT 0
25882: PPUSH
25883: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25884: LD_ADDR_VAR 0 2
25888: PUSH
25889: LD_INT 22
25891: PUSH
25892: LD_OWVAR 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PPUSH
25901: CALL_OW 69
25905: ST_TO_ADDR
// if not tmp then
25906: LD_VAR 0 2
25910: NOT
25911: IFFALSE 25915
// exit ;
25913: GO 26058
// for i := 1 to 2 do
25915: LD_ADDR_VAR 0 1
25919: PUSH
25920: DOUBLE
25921: LD_INT 1
25923: DEC
25924: ST_TO_ADDR
25925: LD_INT 2
25927: PUSH
25928: FOR_TO
25929: IFFALSE 26056
// begin uc_side := your_side ;
25931: LD_ADDR_OWVAR 20
25935: PUSH
25936: LD_OWVAR 2
25940: ST_TO_ADDR
// uc_nation := nation_american ;
25941: LD_ADDR_OWVAR 21
25945: PUSH
25946: LD_INT 1
25948: ST_TO_ADDR
// vc_chassis := us_morphling ;
25949: LD_ADDR_OWVAR 37
25953: PUSH
25954: LD_INT 5
25956: ST_TO_ADDR
// vc_engine := engine_siberite ;
25957: LD_ADDR_OWVAR 39
25961: PUSH
25962: LD_INT 3
25964: ST_TO_ADDR
// vc_control := control_computer ;
25965: LD_ADDR_OWVAR 38
25969: PUSH
25970: LD_INT 3
25972: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25973: LD_ADDR_OWVAR 40
25977: PUSH
25978: LD_INT 10
25980: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25981: LD_VAR 0 2
25985: PUSH
25986: LD_INT 1
25988: ARRAY
25989: PPUSH
25990: CALL_OW 310
25994: NOT
25995: IFFALSE 26042
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25997: CALL_OW 45
26001: PPUSH
26002: LD_VAR 0 2
26006: PUSH
26007: LD_INT 1
26009: ARRAY
26010: PPUSH
26011: CALL_OW 250
26015: PPUSH
26016: LD_VAR 0 2
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PPUSH
26025: CALL_OW 251
26029: PPUSH
26030: LD_INT 12
26032: PPUSH
26033: LD_INT 1
26035: PPUSH
26036: CALL_OW 50
26040: GO 26054
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26042: CALL_OW 45
26046: PPUSH
26047: LD_INT 1
26049: PPUSH
26050: CALL_OW 51
// end ;
26054: GO 25928
26056: POP
26057: POP
// end ;
26058: PPOPN 2
26060: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26061: LD_EXP 40
26065: PUSH
26066: LD_EXP 86
26070: AND
26071: IFFALSE 26293
26073: GO 26075
26075: DISABLE
26076: LD_INT 0
26078: PPUSH
26079: PPUSH
26080: PPUSH
26081: PPUSH
26082: PPUSH
26083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26084: LD_ADDR_VAR 0 6
26088: PUSH
26089: LD_INT 22
26091: PUSH
26092: LD_OWVAR 2
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 21
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 3
26113: PUSH
26114: LD_INT 23
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: LIST
26132: PPUSH
26133: CALL_OW 69
26137: ST_TO_ADDR
// if not tmp then
26138: LD_VAR 0 6
26142: NOT
26143: IFFALSE 26147
// exit ;
26145: GO 26293
// s1 := rand ( 1 , 4 ) ;
26147: LD_ADDR_VAR 0 2
26151: PUSH
26152: LD_INT 1
26154: PPUSH
26155: LD_INT 4
26157: PPUSH
26158: CALL_OW 12
26162: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26163: LD_ADDR_VAR 0 4
26167: PUSH
26168: LD_VAR 0 6
26172: PUSH
26173: LD_INT 1
26175: ARRAY
26176: PPUSH
26177: LD_VAR 0 2
26181: PPUSH
26182: CALL_OW 259
26186: ST_TO_ADDR
// if s1 = 1 then
26187: LD_VAR 0 2
26191: PUSH
26192: LD_INT 1
26194: EQUAL
26195: IFFALSE 26215
// s2 := rand ( 2 , 4 ) else
26197: LD_ADDR_VAR 0 3
26201: PUSH
26202: LD_INT 2
26204: PPUSH
26205: LD_INT 4
26207: PPUSH
26208: CALL_OW 12
26212: ST_TO_ADDR
26213: GO 26223
// s2 := 1 ;
26215: LD_ADDR_VAR 0 3
26219: PUSH
26220: LD_INT 1
26222: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26223: LD_ADDR_VAR 0 5
26227: PUSH
26228: LD_VAR 0 6
26232: PUSH
26233: LD_INT 1
26235: ARRAY
26236: PPUSH
26237: LD_VAR 0 3
26241: PPUSH
26242: CALL_OW 259
26246: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26247: LD_VAR 0 6
26251: PUSH
26252: LD_INT 1
26254: ARRAY
26255: PPUSH
26256: LD_VAR 0 2
26260: PPUSH
26261: LD_VAR 0 5
26265: PPUSH
26266: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26270: LD_VAR 0 6
26274: PUSH
26275: LD_INT 1
26277: ARRAY
26278: PPUSH
26279: LD_VAR 0 3
26283: PPUSH
26284: LD_VAR 0 4
26288: PPUSH
26289: CALL_OW 237
// end ;
26293: PPOPN 6
26295: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26296: LD_EXP 40
26300: PUSH
26301: LD_EXP 87
26305: AND
26306: IFFALSE 26385
26308: GO 26310
26310: DISABLE
26311: LD_INT 0
26313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26314: LD_ADDR_VAR 0 1
26318: PUSH
26319: LD_INT 22
26321: PUSH
26322: LD_OWVAR 2
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 30
26333: PUSH
26334: LD_INT 3
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PPUSH
26345: CALL_OW 69
26349: ST_TO_ADDR
// if not tmp then
26350: LD_VAR 0 1
26354: NOT
26355: IFFALSE 26359
// exit ;
26357: GO 26385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26359: LD_VAR 0 1
26363: PUSH
26364: LD_INT 1
26366: PPUSH
26367: LD_VAR 0 1
26371: PPUSH
26372: CALL_OW 12
26376: ARRAY
26377: PPUSH
26378: LD_INT 1
26380: PPUSH
26381: CALL_OW 234
// end ;
26385: PPOPN 1
26387: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26388: LD_EXP 40
26392: PUSH
26393: LD_EXP 88
26397: AND
26398: IFFALSE 26510
26400: GO 26402
26402: DISABLE
26403: LD_INT 0
26405: PPUSH
26406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26407: LD_ADDR_VAR 0 2
26411: PUSH
26412: LD_INT 22
26414: PUSH
26415: LD_OWVAR 2
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: LD_INT 30
26429: PUSH
26430: LD_INT 27
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 30
26439: PUSH
26440: LD_INT 26
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 30
26449: PUSH
26450: LD_INT 28
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PPUSH
26467: CALL_OW 69
26471: ST_TO_ADDR
// if not tmp then
26472: LD_VAR 0 2
26476: NOT
26477: IFFALSE 26481
// exit ;
26479: GO 26510
// for i in tmp do
26481: LD_ADDR_VAR 0 1
26485: PUSH
26486: LD_VAR 0 2
26490: PUSH
26491: FOR_IN
26492: IFFALSE 26508
// SetLives ( i , 1 ) ;
26494: LD_VAR 0 1
26498: PPUSH
26499: LD_INT 1
26501: PPUSH
26502: CALL_OW 234
26506: GO 26491
26508: POP
26509: POP
// end ;
26510: PPOPN 2
26512: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26513: LD_EXP 40
26517: PUSH
26518: LD_EXP 89
26522: AND
26523: IFFALSE 26810
26525: GO 26527
26527: DISABLE
26528: LD_INT 0
26530: PPUSH
26531: PPUSH
26532: PPUSH
// begin i := rand ( 1 , 7 ) ;
26533: LD_ADDR_VAR 0 1
26537: PUSH
26538: LD_INT 1
26540: PPUSH
26541: LD_INT 7
26543: PPUSH
26544: CALL_OW 12
26548: ST_TO_ADDR
// case i of 1 :
26549: LD_VAR 0 1
26553: PUSH
26554: LD_INT 1
26556: DOUBLE
26557: EQUAL
26558: IFTRUE 26562
26560: GO 26572
26562: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26563: LD_STRING earthquake(getX(game), 0, 32)
26565: PPUSH
26566: CALL_OW 559
26570: GO 26810
26572: LD_INT 2
26574: DOUBLE
26575: EQUAL
26576: IFTRUE 26580
26578: GO 26594
26580: POP
// begin ToLua ( displayStucuk(); ) ;
26581: LD_STRING displayStucuk();
26583: PPUSH
26584: CALL_OW 559
// ResetFog ;
26588: CALL_OW 335
// end ; 3 :
26592: GO 26810
26594: LD_INT 3
26596: DOUBLE
26597: EQUAL
26598: IFTRUE 26602
26600: GO 26706
26602: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26603: LD_ADDR_VAR 0 2
26607: PUSH
26608: LD_INT 22
26610: PUSH
26611: LD_OWVAR 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 25
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PPUSH
26634: CALL_OW 69
26638: ST_TO_ADDR
// if not tmp then
26639: LD_VAR 0 2
26643: NOT
26644: IFFALSE 26648
// exit ;
26646: GO 26810
// un := tmp [ rand ( 1 , tmp ) ] ;
26648: LD_ADDR_VAR 0 3
26652: PUSH
26653: LD_VAR 0 2
26657: PUSH
26658: LD_INT 1
26660: PPUSH
26661: LD_VAR 0 2
26665: PPUSH
26666: CALL_OW 12
26670: ARRAY
26671: ST_TO_ADDR
// if Crawls ( un ) then
26672: LD_VAR 0 3
26676: PPUSH
26677: CALL_OW 318
26681: IFFALSE 26692
// ComWalk ( un ) ;
26683: LD_VAR 0 3
26687: PPUSH
26688: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26692: LD_VAR 0 3
26696: PPUSH
26697: LD_INT 8
26699: PPUSH
26700: CALL_OW 336
// end ; 4 :
26704: GO 26810
26706: LD_INT 4
26708: DOUBLE
26709: EQUAL
26710: IFTRUE 26714
26712: GO 26788
26714: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26715: LD_ADDR_VAR 0 2
26719: PUSH
26720: LD_INT 22
26722: PUSH
26723: LD_OWVAR 2
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 30
26734: PUSH
26735: LD_INT 29
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PPUSH
26746: CALL_OW 69
26750: ST_TO_ADDR
// if not tmp then
26751: LD_VAR 0 2
26755: NOT
26756: IFFALSE 26760
// exit ;
26758: GO 26810
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26760: LD_VAR 0 2
26764: PUSH
26765: LD_INT 1
26767: ARRAY
26768: PPUSH
26769: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26773: LD_VAR 0 2
26777: PUSH
26778: LD_INT 1
26780: ARRAY
26781: PPUSH
26782: CALL_OW 65
// end ; 5 .. 7 :
26786: GO 26810
26788: LD_INT 5
26790: DOUBLE
26791: GREATEREQUAL
26792: IFFALSE 26800
26794: LD_INT 7
26796: DOUBLE
26797: LESSEQUAL
26798: IFTRUE 26802
26800: GO 26809
26802: POP
// StreamSibBomb ; end ;
26803: CALL 23047 0 0
26807: GO 26810
26809: POP
// end ;
26810: PPOPN 3
26812: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26813: LD_EXP 40
26817: PUSH
26818: LD_EXP 90
26822: AND
26823: IFFALSE 26979
26825: GO 26827
26827: DISABLE
26828: LD_INT 0
26830: PPUSH
26831: PPUSH
26832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26833: LD_ADDR_VAR 0 2
26837: PUSH
26838: LD_INT 81
26840: PUSH
26841: LD_OWVAR 2
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 2
26852: PUSH
26853: LD_INT 21
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 21
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PPUSH
26882: CALL_OW 69
26886: ST_TO_ADDR
// if not tmp then
26887: LD_VAR 0 2
26891: NOT
26892: IFFALSE 26896
// exit ;
26894: GO 26979
// p := 0 ;
26896: LD_ADDR_VAR 0 3
26900: PUSH
26901: LD_INT 0
26903: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26904: LD_INT 35
26906: PPUSH
26907: CALL_OW 67
// p := p + 1 ;
26911: LD_ADDR_VAR 0 3
26915: PUSH
26916: LD_VAR 0 3
26920: PUSH
26921: LD_INT 1
26923: PLUS
26924: ST_TO_ADDR
// for i in tmp do
26925: LD_ADDR_VAR 0 1
26929: PUSH
26930: LD_VAR 0 2
26934: PUSH
26935: FOR_IN
26936: IFFALSE 26967
// if GetLives ( i ) < 1000 then
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 256
26947: PUSH
26948: LD_INT 1000
26950: LESS
26951: IFFALSE 26965
// SetLives ( i , 1000 ) ;
26953: LD_VAR 0 1
26957: PPUSH
26958: LD_INT 1000
26960: PPUSH
26961: CALL_OW 234
26965: GO 26935
26967: POP
26968: POP
// until p > 20 ;
26969: LD_VAR 0 3
26973: PUSH
26974: LD_INT 20
26976: GREATER
26977: IFFALSE 26904
// end ;
26979: PPOPN 3
26981: END
// every 0 0$1 trigger StreamModeActive and sTime do
26982: LD_EXP 40
26986: PUSH
26987: LD_EXP 91
26991: AND
26992: IFFALSE 27027
26994: GO 26996
26996: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26997: LD_INT 28
26999: PPUSH
27000: LD_OWVAR 2
27004: PPUSH
27005: LD_INT 2
27007: PPUSH
27008: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27012: LD_INT 30
27014: PPUSH
27015: LD_OWVAR 2
27019: PPUSH
27020: LD_INT 2
27022: PPUSH
27023: CALL_OW 322
// end ;
27027: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27028: LD_EXP 40
27032: PUSH
27033: LD_EXP 92
27037: AND
27038: IFFALSE 27159
27040: GO 27042
27042: DISABLE
27043: LD_INT 0
27045: PPUSH
27046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27047: LD_ADDR_VAR 0 2
27051: PUSH
27052: LD_INT 22
27054: PUSH
27055: LD_OWVAR 2
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 21
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 3
27076: PUSH
27077: LD_INT 23
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: PPUSH
27096: CALL_OW 69
27100: ST_TO_ADDR
// if not tmp then
27101: LD_VAR 0 2
27105: NOT
27106: IFFALSE 27110
// exit ;
27108: GO 27159
// for i in tmp do
27110: LD_ADDR_VAR 0 1
27114: PUSH
27115: LD_VAR 0 2
27119: PUSH
27120: FOR_IN
27121: IFFALSE 27157
// begin if Crawls ( i ) then
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL_OW 318
27132: IFFALSE 27143
// ComWalk ( i ) ;
27134: LD_VAR 0 1
27138: PPUSH
27139: CALL_OW 138
// SetClass ( i , 2 ) ;
27143: LD_VAR 0 1
27147: PPUSH
27148: LD_INT 2
27150: PPUSH
27151: CALL_OW 336
// end ;
27155: GO 27120
27157: POP
27158: POP
// end ;
27159: PPOPN 2
27161: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27162: LD_EXP 40
27166: PUSH
27167: LD_EXP 93
27171: AND
27172: IFFALSE 27460
27174: GO 27176
27176: DISABLE
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
27181: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27182: LD_OWVAR 2
27186: PPUSH
27187: LD_INT 9
27189: PPUSH
27190: LD_INT 1
27192: PPUSH
27193: LD_INT 1
27195: PPUSH
27196: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27200: LD_INT 9
27202: PPUSH
27203: LD_OWVAR 2
27207: PPUSH
27208: CALL_OW 343
// uc_side := 9 ;
27212: LD_ADDR_OWVAR 20
27216: PUSH
27217: LD_INT 9
27219: ST_TO_ADDR
// uc_nation := 2 ;
27220: LD_ADDR_OWVAR 21
27224: PUSH
27225: LD_INT 2
27227: ST_TO_ADDR
// hc_name := Dark Warrior ;
27228: LD_ADDR_OWVAR 26
27232: PUSH
27233: LD_STRING Dark Warrior
27235: ST_TO_ADDR
// hc_gallery :=  ;
27236: LD_ADDR_OWVAR 33
27240: PUSH
27241: LD_STRING 
27243: ST_TO_ADDR
// hc_noskilllimit := true ;
27244: LD_ADDR_OWVAR 76
27248: PUSH
27249: LD_INT 1
27251: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27252: LD_ADDR_OWVAR 31
27256: PUSH
27257: LD_INT 30
27259: PUSH
27260: LD_INT 30
27262: PUSH
27263: LD_INT 30
27265: PUSH
27266: LD_INT 30
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: ST_TO_ADDR
// un := CreateHuman ;
27275: LD_ADDR_VAR 0 3
27279: PUSH
27280: CALL_OW 44
27284: ST_TO_ADDR
// hc_noskilllimit := false ;
27285: LD_ADDR_OWVAR 76
27289: PUSH
27290: LD_INT 0
27292: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27293: LD_VAR 0 3
27297: PPUSH
27298: LD_INT 1
27300: PPUSH
27301: CALL_OW 51
// ToLua ( playRanger() ) ;
27305: LD_STRING playRanger()
27307: PPUSH
27308: CALL_OW 559
// p := 0 ;
27312: LD_ADDR_VAR 0 2
27316: PUSH
27317: LD_INT 0
27319: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27320: LD_INT 35
27322: PPUSH
27323: CALL_OW 67
// p := p + 1 ;
27327: LD_ADDR_VAR 0 2
27331: PUSH
27332: LD_VAR 0 2
27336: PUSH
27337: LD_INT 1
27339: PLUS
27340: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27341: LD_VAR 0 3
27345: PPUSH
27346: CALL_OW 256
27350: PUSH
27351: LD_INT 1000
27353: LESS
27354: IFFALSE 27368
// SetLives ( un , 1000 ) ;
27356: LD_VAR 0 3
27360: PPUSH
27361: LD_INT 1000
27363: PPUSH
27364: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27368: LD_VAR 0 3
27372: PPUSH
27373: LD_INT 81
27375: PUSH
27376: LD_OWVAR 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 91
27387: PUSH
27388: LD_VAR 0 3
27392: PUSH
27393: LD_INT 30
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PPUSH
27405: CALL_OW 69
27409: PPUSH
27410: LD_VAR 0 3
27414: PPUSH
27415: CALL_OW 74
27419: PPUSH
27420: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27424: LD_VAR 0 2
27428: PUSH
27429: LD_INT 80
27431: GREATER
27432: PUSH
27433: LD_VAR 0 3
27437: PPUSH
27438: CALL_OW 301
27442: OR
27443: IFFALSE 27320
// if un then
27445: LD_VAR 0 3
27449: IFFALSE 27460
// RemoveUnit ( un ) ;
27451: LD_VAR 0 3
27455: PPUSH
27456: CALL_OW 64
// end ;
27460: PPOPN 3
27462: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27463: LD_EXP 94
27467: IFFALSE 27583
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
27475: PPUSH
27476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27477: LD_ADDR_VAR 0 2
27481: PUSH
27482: LD_INT 81
27484: PUSH
27485: LD_OWVAR 2
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 21
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PPUSH
27508: CALL_OW 69
27512: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27513: LD_STRING playComputer()
27515: PPUSH
27516: CALL_OW 559
// if not tmp then
27520: LD_VAR 0 2
27524: NOT
27525: IFFALSE 27529
// exit ;
27527: GO 27583
// for i in tmp do
27529: LD_ADDR_VAR 0 1
27533: PUSH
27534: LD_VAR 0 2
27538: PUSH
27539: FOR_IN
27540: IFFALSE 27581
// for j := 1 to 4 do
27542: LD_ADDR_VAR 0 3
27546: PUSH
27547: DOUBLE
27548: LD_INT 1
27550: DEC
27551: ST_TO_ADDR
27552: LD_INT 4
27554: PUSH
27555: FOR_TO
27556: IFFALSE 27577
// SetSkill ( i , j , 10 ) ;
27558: LD_VAR 0 1
27562: PPUSH
27563: LD_VAR 0 3
27567: PPUSH
27568: LD_INT 10
27570: PPUSH
27571: CALL_OW 237
27575: GO 27555
27577: POP
27578: POP
27579: GO 27539
27581: POP
27582: POP
// end ;
27583: PPOPN 3
27585: END
// every 0 0$1 trigger s30 do var i , tmp ;
27586: LD_EXP 95
27590: IFFALSE 27659
27592: GO 27594
27594: DISABLE
27595: LD_INT 0
27597: PPUSH
27598: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27599: LD_ADDR_VAR 0 2
27603: PUSH
27604: LD_INT 22
27606: PUSH
27607: LD_OWVAR 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PPUSH
27616: CALL_OW 69
27620: ST_TO_ADDR
// if not tmp then
27621: LD_VAR 0 2
27625: NOT
27626: IFFALSE 27630
// exit ;
27628: GO 27659
// for i in tmp do
27630: LD_ADDR_VAR 0 1
27634: PUSH
27635: LD_VAR 0 2
27639: PUSH
27640: FOR_IN
27641: IFFALSE 27657
// SetLives ( i , 300 ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 300
27650: PPUSH
27651: CALL_OW 234
27655: GO 27640
27657: POP
27658: POP
// end ;
27659: PPOPN 2
27661: END
// every 0 0$1 trigger s60 do var i , tmp ;
27662: LD_EXP 96
27666: IFFALSE 27735
27668: GO 27670
27670: DISABLE
27671: LD_INT 0
27673: PPUSH
27674: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27675: LD_ADDR_VAR 0 2
27679: PUSH
27680: LD_INT 22
27682: PUSH
27683: LD_OWVAR 2
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PPUSH
27692: CALL_OW 69
27696: ST_TO_ADDR
// if not tmp then
27697: LD_VAR 0 2
27701: NOT
27702: IFFALSE 27706
// exit ;
27704: GO 27735
// for i in tmp do
27706: LD_ADDR_VAR 0 1
27710: PUSH
27711: LD_VAR 0 2
27715: PUSH
27716: FOR_IN
27717: IFFALSE 27733
// SetLives ( i , 600 ) ;
27719: LD_VAR 0 1
27723: PPUSH
27724: LD_INT 600
27726: PPUSH
27727: CALL_OW 234
27731: GO 27716
27733: POP
27734: POP
// end ;
27735: PPOPN 2
27737: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27738: LD_INT 0
27740: PPUSH
// case cmd of 301 :
27741: LD_VAR 0 1
27745: PUSH
27746: LD_INT 301
27748: DOUBLE
27749: EQUAL
27750: IFTRUE 27754
27752: GO 27786
27754: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27755: LD_VAR 0 6
27759: PPUSH
27760: LD_VAR 0 7
27764: PPUSH
27765: LD_VAR 0 8
27769: PPUSH
27770: LD_VAR 0 4
27774: PPUSH
27775: LD_VAR 0 5
27779: PPUSH
27780: CALL 28987 0 5
27784: GO 27907
27786: LD_INT 302
27788: DOUBLE
27789: EQUAL
27790: IFTRUE 27794
27792: GO 27831
27794: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27795: LD_VAR 0 6
27799: PPUSH
27800: LD_VAR 0 7
27804: PPUSH
27805: LD_VAR 0 8
27809: PPUSH
27810: LD_VAR 0 9
27814: PPUSH
27815: LD_VAR 0 4
27819: PPUSH
27820: LD_VAR 0 5
27824: PPUSH
27825: CALL 29078 0 6
27829: GO 27907
27831: LD_INT 303
27833: DOUBLE
27834: EQUAL
27835: IFTRUE 27839
27837: GO 27876
27839: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27840: LD_VAR 0 6
27844: PPUSH
27845: LD_VAR 0 7
27849: PPUSH
27850: LD_VAR 0 8
27854: PPUSH
27855: LD_VAR 0 9
27859: PPUSH
27860: LD_VAR 0 4
27864: PPUSH
27865: LD_VAR 0 5
27869: PPUSH
27870: CALL 27912 0 6
27874: GO 27907
27876: LD_INT 304
27878: DOUBLE
27879: EQUAL
27880: IFTRUE 27884
27882: GO 27906
27884: POP
// hHackTeleport ( unit , x , y ) ; end ;
27885: LD_VAR 0 2
27889: PPUSH
27890: LD_VAR 0 4
27894: PPUSH
27895: LD_VAR 0 5
27899: PPUSH
27900: CALL 29671 0 3
27904: GO 27907
27906: POP
// end ;
27907: LD_VAR 0 12
27911: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27912: LD_INT 0
27914: PPUSH
27915: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27916: LD_VAR 0 1
27920: PUSH
27921: LD_INT 1
27923: LESS
27924: PUSH
27925: LD_VAR 0 1
27929: PUSH
27930: LD_INT 3
27932: GREATER
27933: OR
27934: PUSH
27935: LD_VAR 0 5
27939: PPUSH
27940: LD_VAR 0 6
27944: PPUSH
27945: CALL_OW 428
27949: OR
27950: IFFALSE 27954
// exit ;
27952: GO 28674
// uc_side := your_side ;
27954: LD_ADDR_OWVAR 20
27958: PUSH
27959: LD_OWVAR 2
27963: ST_TO_ADDR
// uc_nation := nation ;
27964: LD_ADDR_OWVAR 21
27968: PUSH
27969: LD_VAR 0 1
27973: ST_TO_ADDR
// bc_level = 1 ;
27974: LD_ADDR_OWVAR 43
27978: PUSH
27979: LD_INT 1
27981: ST_TO_ADDR
// case btype of 1 :
27982: LD_VAR 0 2
27986: PUSH
27987: LD_INT 1
27989: DOUBLE
27990: EQUAL
27991: IFTRUE 27995
27993: GO 28006
27995: POP
// bc_type := b_depot ; 2 :
27996: LD_ADDR_OWVAR 42
28000: PUSH
28001: LD_INT 0
28003: ST_TO_ADDR
28004: GO 28618
28006: LD_INT 2
28008: DOUBLE
28009: EQUAL
28010: IFTRUE 28014
28012: GO 28025
28014: POP
// bc_type := b_warehouse ; 3 :
28015: LD_ADDR_OWVAR 42
28019: PUSH
28020: LD_INT 1
28022: ST_TO_ADDR
28023: GO 28618
28025: LD_INT 3
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28033
28031: GO 28044
28033: POP
// bc_type := b_lab ; 4 .. 9 :
28034: LD_ADDR_OWVAR 42
28038: PUSH
28039: LD_INT 6
28041: ST_TO_ADDR
28042: GO 28618
28044: LD_INT 4
28046: DOUBLE
28047: GREATEREQUAL
28048: IFFALSE 28056
28050: LD_INT 9
28052: DOUBLE
28053: LESSEQUAL
28054: IFTRUE 28058
28056: GO 28110
28058: POP
// begin bc_type := b_lab_half ;
28059: LD_ADDR_OWVAR 42
28063: PUSH
28064: LD_INT 7
28066: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28067: LD_ADDR_OWVAR 44
28071: PUSH
28072: LD_INT 10
28074: PUSH
28075: LD_INT 11
28077: PUSH
28078: LD_INT 12
28080: PUSH
28081: LD_INT 15
28083: PUSH
28084: LD_INT 14
28086: PUSH
28087: LD_INT 13
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: PUSH
28098: LD_VAR 0 2
28102: PUSH
28103: LD_INT 3
28105: MINUS
28106: ARRAY
28107: ST_TO_ADDR
// end ; 10 .. 13 :
28108: GO 28618
28110: LD_INT 10
28112: DOUBLE
28113: GREATEREQUAL
28114: IFFALSE 28122
28116: LD_INT 13
28118: DOUBLE
28119: LESSEQUAL
28120: IFTRUE 28124
28122: GO 28201
28124: POP
// begin bc_type := b_lab_full ;
28125: LD_ADDR_OWVAR 42
28129: PUSH
28130: LD_INT 8
28132: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28133: LD_ADDR_OWVAR 44
28137: PUSH
28138: LD_INT 10
28140: PUSH
28141: LD_INT 12
28143: PUSH
28144: LD_INT 14
28146: PUSH
28147: LD_INT 13
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: PUSH
28156: LD_VAR 0 2
28160: PUSH
28161: LD_INT 9
28163: MINUS
28164: ARRAY
28165: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28166: LD_ADDR_OWVAR 45
28170: PUSH
28171: LD_INT 11
28173: PUSH
28174: LD_INT 15
28176: PUSH
28177: LD_INT 12
28179: PUSH
28180: LD_INT 15
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: PUSH
28189: LD_VAR 0 2
28193: PUSH
28194: LD_INT 9
28196: MINUS
28197: ARRAY
28198: ST_TO_ADDR
// end ; 14 :
28199: GO 28618
28201: LD_INT 14
28203: DOUBLE
28204: EQUAL
28205: IFTRUE 28209
28207: GO 28220
28209: POP
// bc_type := b_workshop ; 15 :
28210: LD_ADDR_OWVAR 42
28214: PUSH
28215: LD_INT 2
28217: ST_TO_ADDR
28218: GO 28618
28220: LD_INT 15
28222: DOUBLE
28223: EQUAL
28224: IFTRUE 28228
28226: GO 28239
28228: POP
// bc_type := b_factory ; 16 :
28229: LD_ADDR_OWVAR 42
28233: PUSH
28234: LD_INT 3
28236: ST_TO_ADDR
28237: GO 28618
28239: LD_INT 16
28241: DOUBLE
28242: EQUAL
28243: IFTRUE 28247
28245: GO 28258
28247: POP
// bc_type := b_ext_gun ; 17 :
28248: LD_ADDR_OWVAR 42
28252: PUSH
28253: LD_INT 17
28255: ST_TO_ADDR
28256: GO 28618
28258: LD_INT 17
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28266
28264: GO 28294
28266: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28267: LD_ADDR_OWVAR 42
28271: PUSH
28272: LD_INT 19
28274: PUSH
28275: LD_INT 23
28277: PUSH
28278: LD_INT 19
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: PUSH
28286: LD_VAR 0 1
28290: ARRAY
28291: ST_TO_ADDR
28292: GO 28618
28294: LD_INT 18
28296: DOUBLE
28297: EQUAL
28298: IFTRUE 28302
28300: GO 28313
28302: POP
// bc_type := b_ext_radar ; 19 :
28303: LD_ADDR_OWVAR 42
28307: PUSH
28308: LD_INT 20
28310: ST_TO_ADDR
28311: GO 28618
28313: LD_INT 19
28315: DOUBLE
28316: EQUAL
28317: IFTRUE 28321
28319: GO 28332
28321: POP
// bc_type := b_ext_radio ; 20 :
28322: LD_ADDR_OWVAR 42
28326: PUSH
28327: LD_INT 22
28329: ST_TO_ADDR
28330: GO 28618
28332: LD_INT 20
28334: DOUBLE
28335: EQUAL
28336: IFTRUE 28340
28338: GO 28351
28340: POP
// bc_type := b_ext_siberium ; 21 :
28341: LD_ADDR_OWVAR 42
28345: PUSH
28346: LD_INT 21
28348: ST_TO_ADDR
28349: GO 28618
28351: LD_INT 21
28353: DOUBLE
28354: EQUAL
28355: IFTRUE 28359
28357: GO 28370
28359: POP
// bc_type := b_ext_computer ; 22 :
28360: LD_ADDR_OWVAR 42
28364: PUSH
28365: LD_INT 24
28367: ST_TO_ADDR
28368: GO 28618
28370: LD_INT 22
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28389
28378: POP
// bc_type := b_ext_track ; 23 :
28379: LD_ADDR_OWVAR 42
28383: PUSH
28384: LD_INT 16
28386: ST_TO_ADDR
28387: GO 28618
28389: LD_INT 23
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28408
28397: POP
// bc_type := b_ext_laser ; 24 :
28398: LD_ADDR_OWVAR 42
28402: PUSH
28403: LD_INT 25
28405: ST_TO_ADDR
28406: GO 28618
28408: LD_INT 24
28410: DOUBLE
28411: EQUAL
28412: IFTRUE 28416
28414: GO 28427
28416: POP
// bc_type := b_control_tower ; 25 :
28417: LD_ADDR_OWVAR 42
28421: PUSH
28422: LD_INT 36
28424: ST_TO_ADDR
28425: GO 28618
28427: LD_INT 25
28429: DOUBLE
28430: EQUAL
28431: IFTRUE 28435
28433: GO 28446
28435: POP
// bc_type := b_breastwork ; 26 :
28436: LD_ADDR_OWVAR 42
28440: PUSH
28441: LD_INT 31
28443: ST_TO_ADDR
28444: GO 28618
28446: LD_INT 26
28448: DOUBLE
28449: EQUAL
28450: IFTRUE 28454
28452: GO 28465
28454: POP
// bc_type := b_bunker ; 27 :
28455: LD_ADDR_OWVAR 42
28459: PUSH
28460: LD_INT 32
28462: ST_TO_ADDR
28463: GO 28618
28465: LD_INT 27
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28484
28473: POP
// bc_type := b_turret ; 28 :
28474: LD_ADDR_OWVAR 42
28478: PUSH
28479: LD_INT 33
28481: ST_TO_ADDR
28482: GO 28618
28484: LD_INT 28
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28503
28492: POP
// bc_type := b_armoury ; 29 :
28493: LD_ADDR_OWVAR 42
28497: PUSH
28498: LD_INT 4
28500: ST_TO_ADDR
28501: GO 28618
28503: LD_INT 29
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28522
28511: POP
// bc_type := b_barracks ; 30 :
28512: LD_ADDR_OWVAR 42
28516: PUSH
28517: LD_INT 5
28519: ST_TO_ADDR
28520: GO 28618
28522: LD_INT 30
28524: DOUBLE
28525: EQUAL
28526: IFTRUE 28530
28528: GO 28541
28530: POP
// bc_type := b_solar_power ; 31 :
28531: LD_ADDR_OWVAR 42
28535: PUSH
28536: LD_INT 27
28538: ST_TO_ADDR
28539: GO 28618
28541: LD_INT 31
28543: DOUBLE
28544: EQUAL
28545: IFTRUE 28549
28547: GO 28560
28549: POP
// bc_type := b_oil_power ; 32 :
28550: LD_ADDR_OWVAR 42
28554: PUSH
28555: LD_INT 26
28557: ST_TO_ADDR
28558: GO 28618
28560: LD_INT 32
28562: DOUBLE
28563: EQUAL
28564: IFTRUE 28568
28566: GO 28579
28568: POP
// bc_type := b_siberite_power ; 33 :
28569: LD_ADDR_OWVAR 42
28573: PUSH
28574: LD_INT 28
28576: ST_TO_ADDR
28577: GO 28618
28579: LD_INT 33
28581: DOUBLE
28582: EQUAL
28583: IFTRUE 28587
28585: GO 28598
28587: POP
// bc_type := b_oil_mine ; 34 :
28588: LD_ADDR_OWVAR 42
28592: PUSH
28593: LD_INT 29
28595: ST_TO_ADDR
28596: GO 28618
28598: LD_INT 34
28600: DOUBLE
28601: EQUAL
28602: IFTRUE 28606
28604: GO 28617
28606: POP
// bc_type := b_siberite_mine ; end ;
28607: LD_ADDR_OWVAR 42
28611: PUSH
28612: LD_INT 30
28614: ST_TO_ADDR
28615: GO 28618
28617: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28618: LD_ADDR_VAR 0 8
28622: PUSH
28623: LD_VAR 0 5
28627: PPUSH
28628: LD_VAR 0 6
28632: PPUSH
28633: LD_VAR 0 3
28637: PPUSH
28638: CALL_OW 47
28642: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28643: LD_OWVAR 42
28647: PUSH
28648: LD_INT 32
28650: PUSH
28651: LD_INT 33
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: IN
28658: IFFALSE 28674
// PlaceWeaponTurret ( b , weapon ) ;
28660: LD_VAR 0 8
28664: PPUSH
28665: LD_VAR 0 4
28669: PPUSH
28670: CALL_OW 431
// end ;
28674: LD_VAR 0 7
28678: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28679: LD_INT 0
28681: PPUSH
28682: PPUSH
28683: PPUSH
28684: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28685: LD_ADDR_VAR 0 4
28689: PUSH
28690: LD_INT 22
28692: PUSH
28693: LD_OWVAR 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: LD_INT 30
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 30
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PPUSH
28734: CALL_OW 69
28738: ST_TO_ADDR
// if not tmp then
28739: LD_VAR 0 4
28743: NOT
28744: IFFALSE 28748
// exit ;
28746: GO 28807
// for i in tmp do
28748: LD_ADDR_VAR 0 2
28752: PUSH
28753: LD_VAR 0 4
28757: PUSH
28758: FOR_IN
28759: IFFALSE 28805
// for j = 1 to 3 do
28761: LD_ADDR_VAR 0 3
28765: PUSH
28766: DOUBLE
28767: LD_INT 1
28769: DEC
28770: ST_TO_ADDR
28771: LD_INT 3
28773: PUSH
28774: FOR_TO
28775: IFFALSE 28801
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28777: LD_VAR 0 2
28781: PPUSH
28782: CALL_OW 274
28786: PPUSH
28787: LD_VAR 0 3
28791: PPUSH
28792: LD_INT 99999
28794: PPUSH
28795: CALL_OW 277
28799: GO 28774
28801: POP
28802: POP
28803: GO 28758
28805: POP
28806: POP
// end ;
28807: LD_VAR 0 1
28811: RET
// export function hHackSetLevel10 ; var i , j ; begin
28812: LD_INT 0
28814: PPUSH
28815: PPUSH
28816: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28817: LD_ADDR_VAR 0 2
28821: PUSH
28822: LD_INT 21
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PPUSH
28832: CALL_OW 69
28836: PUSH
28837: FOR_IN
28838: IFFALSE 28890
// if IsSelected ( i ) then
28840: LD_VAR 0 2
28844: PPUSH
28845: CALL_OW 306
28849: IFFALSE 28888
// begin for j := 1 to 4 do
28851: LD_ADDR_VAR 0 3
28855: PUSH
28856: DOUBLE
28857: LD_INT 1
28859: DEC
28860: ST_TO_ADDR
28861: LD_INT 4
28863: PUSH
28864: FOR_TO
28865: IFFALSE 28886
// SetSkill ( i , j , 10 ) ;
28867: LD_VAR 0 2
28871: PPUSH
28872: LD_VAR 0 3
28876: PPUSH
28877: LD_INT 10
28879: PPUSH
28880: CALL_OW 237
28884: GO 28864
28886: POP
28887: POP
// end ;
28888: GO 28837
28890: POP
28891: POP
// end ;
28892: LD_VAR 0 1
28896: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
28901: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28902: LD_ADDR_VAR 0 2
28906: PUSH
28907: LD_INT 22
28909: PUSH
28910: LD_OWVAR 2
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 21
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PPUSH
28933: CALL_OW 69
28937: PUSH
28938: FOR_IN
28939: IFFALSE 28980
// begin for j := 1 to 4 do
28941: LD_ADDR_VAR 0 3
28945: PUSH
28946: DOUBLE
28947: LD_INT 1
28949: DEC
28950: ST_TO_ADDR
28951: LD_INT 4
28953: PUSH
28954: FOR_TO
28955: IFFALSE 28976
// SetSkill ( i , j , 10 ) ;
28957: LD_VAR 0 2
28961: PPUSH
28962: LD_VAR 0 3
28966: PPUSH
28967: LD_INT 10
28969: PPUSH
28970: CALL_OW 237
28974: GO 28954
28976: POP
28977: POP
// end ;
28978: GO 28938
28980: POP
28981: POP
// end ;
28982: LD_VAR 0 1
28986: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28987: LD_INT 0
28989: PPUSH
// uc_side := your_side ;
28990: LD_ADDR_OWVAR 20
28994: PUSH
28995: LD_OWVAR 2
28999: ST_TO_ADDR
// uc_nation := nation ;
29000: LD_ADDR_OWVAR 21
29004: PUSH
29005: LD_VAR 0 1
29009: ST_TO_ADDR
// InitHc ;
29010: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29014: LD_INT 0
29016: PPUSH
29017: LD_VAR 0 2
29021: PPUSH
29022: LD_VAR 0 3
29026: PPUSH
29027: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29031: LD_VAR 0 4
29035: PPUSH
29036: LD_VAR 0 5
29040: PPUSH
29041: CALL_OW 428
29045: PUSH
29046: LD_INT 0
29048: EQUAL
29049: IFFALSE 29073
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29051: CALL_OW 44
29055: PPUSH
29056: LD_VAR 0 4
29060: PPUSH
29061: LD_VAR 0 5
29065: PPUSH
29066: LD_INT 1
29068: PPUSH
29069: CALL_OW 48
// end ;
29073: LD_VAR 0 6
29077: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29078: LD_INT 0
29080: PPUSH
29081: PPUSH
// uc_side := your_side ;
29082: LD_ADDR_OWVAR 20
29086: PUSH
29087: LD_OWVAR 2
29091: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29092: LD_VAR 0 1
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: LD_INT 4
29108: PUSH
29109: LD_INT 5
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: IN
29119: IFFALSE 29131
// uc_nation := nation_american else
29121: LD_ADDR_OWVAR 21
29125: PUSH
29126: LD_INT 1
29128: ST_TO_ADDR
29129: GO 29174
// if chassis in [ 11 , 12 , 13 , 14 ] then
29131: LD_VAR 0 1
29135: PUSH
29136: LD_INT 11
29138: PUSH
29139: LD_INT 12
29141: PUSH
29142: LD_INT 13
29144: PUSH
29145: LD_INT 14
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: IN
29154: IFFALSE 29166
// uc_nation := nation_arabian else
29156: LD_ADDR_OWVAR 21
29160: PUSH
29161: LD_INT 2
29163: ST_TO_ADDR
29164: GO 29174
// uc_nation := nation_russian ;
29166: LD_ADDR_OWVAR 21
29170: PUSH
29171: LD_INT 3
29173: ST_TO_ADDR
// vc_chassis := chassis ;
29174: LD_ADDR_OWVAR 37
29178: PUSH
29179: LD_VAR 0 1
29183: ST_TO_ADDR
// vc_engine := engine ;
29184: LD_ADDR_OWVAR 39
29188: PUSH
29189: LD_VAR 0 2
29193: ST_TO_ADDR
// vc_control := control ;
29194: LD_ADDR_OWVAR 38
29198: PUSH
29199: LD_VAR 0 3
29203: ST_TO_ADDR
// vc_weapon := weapon ;
29204: LD_ADDR_OWVAR 40
29208: PUSH
29209: LD_VAR 0 4
29213: ST_TO_ADDR
// un := CreateVehicle ;
29214: LD_ADDR_VAR 0 8
29218: PUSH
29219: CALL_OW 45
29223: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29224: LD_VAR 0 8
29228: PPUSH
29229: LD_INT 0
29231: PPUSH
29232: LD_INT 5
29234: PPUSH
29235: CALL_OW 12
29239: PPUSH
29240: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29244: LD_VAR 0 8
29248: PPUSH
29249: LD_VAR 0 5
29253: PPUSH
29254: LD_VAR 0 6
29258: PPUSH
29259: LD_INT 1
29261: PPUSH
29262: CALL_OW 48
// end ;
29266: LD_VAR 0 7
29270: RET
// export hInvincible ; every 1 do
29271: GO 29273
29273: DISABLE
// hInvincible := [ ] ;
29274: LD_ADDR_EXP 97
29278: PUSH
29279: EMPTY
29280: ST_TO_ADDR
29281: END
// every 10 do var i ;
29282: GO 29284
29284: DISABLE
29285: LD_INT 0
29287: PPUSH
// begin enable ;
29288: ENABLE
// if not hInvincible then
29289: LD_EXP 97
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29342
// for i in hInvincible do
29298: LD_ADDR_VAR 0 1
29302: PUSH
29303: LD_EXP 97
29307: PUSH
29308: FOR_IN
29309: IFFALSE 29340
// if GetLives ( i ) < 1000 then
29311: LD_VAR 0 1
29315: PPUSH
29316: CALL_OW 256
29320: PUSH
29321: LD_INT 1000
29323: LESS
29324: IFFALSE 29338
// SetLives ( i , 1000 ) ;
29326: LD_VAR 0 1
29330: PPUSH
29331: LD_INT 1000
29333: PPUSH
29334: CALL_OW 234
29338: GO 29308
29340: POP
29341: POP
// end ;
29342: PPOPN 1
29344: END
// export function hHackInvincible ; var i ; begin
29345: LD_INT 0
29347: PPUSH
29348: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29349: LD_ADDR_VAR 0 2
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: LD_INT 21
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 21
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: PPUSH
29382: CALL_OW 69
29386: PUSH
29387: FOR_IN
29388: IFFALSE 29449
// if IsSelected ( i ) then
29390: LD_VAR 0 2
29394: PPUSH
29395: CALL_OW 306
29399: IFFALSE 29447
// begin if i in hInvincible then
29401: LD_VAR 0 2
29405: PUSH
29406: LD_EXP 97
29410: IN
29411: IFFALSE 29431
// hInvincible := hInvincible diff i else
29413: LD_ADDR_EXP 97
29417: PUSH
29418: LD_EXP 97
29422: PUSH
29423: LD_VAR 0 2
29427: DIFF
29428: ST_TO_ADDR
29429: GO 29447
// hInvincible := hInvincible union i ;
29431: LD_ADDR_EXP 97
29435: PUSH
29436: LD_EXP 97
29440: PUSH
29441: LD_VAR 0 2
29445: UNION
29446: ST_TO_ADDR
// end ;
29447: GO 29387
29449: POP
29450: POP
// end ;
29451: LD_VAR 0 1
29455: RET
// export function hHackInvisible ; var i , j ; begin
29456: LD_INT 0
29458: PPUSH
29459: PPUSH
29460: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29461: LD_ADDR_VAR 0 2
29465: PUSH
29466: LD_INT 21
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PPUSH
29476: CALL_OW 69
29480: PUSH
29481: FOR_IN
29482: IFFALSE 29506
// if IsSelected ( i ) then
29484: LD_VAR 0 2
29488: PPUSH
29489: CALL_OW 306
29493: IFFALSE 29504
// ComForceInvisible ( i ) ;
29495: LD_VAR 0 2
29499: PPUSH
29500: CALL_OW 496
29504: GO 29481
29506: POP
29507: POP
// end ;
29508: LD_VAR 0 1
29512: RET
// export function hHackChangeYourSide ; begin
29513: LD_INT 0
29515: PPUSH
// if your_side = 8 then
29516: LD_OWVAR 2
29520: PUSH
29521: LD_INT 8
29523: EQUAL
29524: IFFALSE 29536
// your_side := 0 else
29526: LD_ADDR_OWVAR 2
29530: PUSH
29531: LD_INT 0
29533: ST_TO_ADDR
29534: GO 29550
// your_side := your_side + 1 ;
29536: LD_ADDR_OWVAR 2
29540: PUSH
29541: LD_OWVAR 2
29545: PUSH
29546: LD_INT 1
29548: PLUS
29549: ST_TO_ADDR
// end ;
29550: LD_VAR 0 1
29554: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
29559: PPUSH
// for i in all_units do
29560: LD_ADDR_VAR 0 2
29564: PUSH
29565: LD_OWVAR 3
29569: PUSH
29570: FOR_IN
29571: IFFALSE 29649
// if IsSelected ( i ) then
29573: LD_VAR 0 2
29577: PPUSH
29578: CALL_OW 306
29582: IFFALSE 29647
// begin j := GetSide ( i ) ;
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_VAR 0 2
29593: PPUSH
29594: CALL_OW 255
29598: ST_TO_ADDR
// if j = 8 then
29599: LD_VAR 0 3
29603: PUSH
29604: LD_INT 8
29606: EQUAL
29607: IFFALSE 29619
// j := 0 else
29609: LD_ADDR_VAR 0 3
29613: PUSH
29614: LD_INT 0
29616: ST_TO_ADDR
29617: GO 29633
// j := j + 1 ;
29619: LD_ADDR_VAR 0 3
29623: PUSH
29624: LD_VAR 0 3
29628: PUSH
29629: LD_INT 1
29631: PLUS
29632: ST_TO_ADDR
// SetSide ( i , j ) ;
29633: LD_VAR 0 2
29637: PPUSH
29638: LD_VAR 0 3
29642: PPUSH
29643: CALL_OW 235
// end ;
29647: GO 29570
29649: POP
29650: POP
// end ;
29651: LD_VAR 0 1
29655: RET
// export function hHackFog ; begin
29656: LD_INT 0
29658: PPUSH
// FogOff ( true ) ;
29659: LD_INT 1
29661: PPUSH
29662: CALL_OW 344
// end ;
29666: LD_VAR 0 1
29670: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29671: LD_INT 0
29673: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29674: LD_VAR 0 1
29678: PPUSH
29679: LD_VAR 0 2
29683: PPUSH
29684: LD_VAR 0 3
29688: PPUSH
29689: LD_INT 1
29691: PPUSH
29692: LD_INT 1
29694: PPUSH
29695: CALL_OW 483
// CenterOnXY ( x , y ) ;
29699: LD_VAR 0 2
29703: PPUSH
29704: LD_VAR 0 3
29708: PPUSH
29709: CALL_OW 84
// end ;
29713: LD_VAR 0 4
29717: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29718: LD_INT 0
29720: PPUSH
29721: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29722: LD_VAR 0 1
29726: NOT
29727: PUSH
29728: LD_VAR 0 2
29732: PPUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: CALL_OW 488
29742: NOT
29743: OR
29744: PUSH
29745: LD_VAR 0 1
29749: PPUSH
29750: CALL_OW 266
29754: PUSH
29755: LD_INT 3
29757: NONEQUAL
29758: PUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 247
29768: PUSH
29769: LD_INT 1
29771: EQUAL
29772: NOT
29773: AND
29774: OR
29775: IFFALSE 29779
// exit ;
29777: GO 29928
// if GetType ( factory ) = unit_human then
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 247
29788: PUSH
29789: LD_INT 1
29791: EQUAL
29792: IFFALSE 29809
// factory := IsInUnit ( factory ) ;
29794: LD_ADDR_VAR 0 1
29798: PUSH
29799: LD_VAR 0 1
29803: PPUSH
29804: CALL_OW 310
29808: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 266
29818: PUSH
29819: LD_INT 3
29821: NONEQUAL
29822: IFFALSE 29826
// exit ;
29824: GO 29928
// if HexInfo ( x , y ) = factory then
29826: LD_VAR 0 2
29830: PPUSH
29831: LD_VAR 0 3
29835: PPUSH
29836: CALL_OW 428
29840: PUSH
29841: LD_VAR 0 1
29845: EQUAL
29846: IFFALSE 29873
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29848: LD_ADDR_EXP 98
29852: PUSH
29853: LD_EXP 98
29857: PPUSH
29858: LD_VAR 0 1
29862: PPUSH
29863: LD_INT 0
29865: PPUSH
29866: CALL_OW 1
29870: ST_TO_ADDR
29871: GO 29924
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29873: LD_ADDR_EXP 98
29877: PUSH
29878: LD_EXP 98
29882: PPUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: LD_VAR 0 1
29892: PPUSH
29893: CALL_OW 255
29897: PUSH
29898: LD_VAR 0 1
29902: PUSH
29903: LD_VAR 0 2
29907: PUSH
29908: LD_VAR 0 3
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL_OW 1
29923: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29924: CALL 29933 0 0
// end ;
29928: LD_VAR 0 4
29932: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29933: LD_INT 0
29935: PPUSH
29936: PPUSH
29937: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29938: LD_STRING resetFactoryWaypoint();
29940: PPUSH
29941: CALL_OW 559
// if factoryWaypoints then
29945: LD_EXP 98
29949: IFFALSE 30075
// begin list := PrepareArray ( factoryWaypoints ) ;
29951: LD_ADDR_VAR 0 3
29955: PUSH
29956: LD_EXP 98
29960: PPUSH
29961: CALL 76544 0 1
29965: ST_TO_ADDR
// for i := 1 to list do
29966: LD_ADDR_VAR 0 2
29970: PUSH
29971: DOUBLE
29972: LD_INT 1
29974: DEC
29975: ST_TO_ADDR
29976: LD_VAR 0 3
29980: PUSH
29981: FOR_TO
29982: IFFALSE 30073
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29984: LD_STRING setFactoryWaypointXY(
29986: PUSH
29987: LD_VAR 0 3
29991: PUSH
29992: LD_VAR 0 2
29996: ARRAY
29997: PUSH
29998: LD_INT 1
30000: ARRAY
30001: STR
30002: PUSH
30003: LD_STRING ,
30005: STR
30006: PUSH
30007: LD_VAR 0 3
30011: PUSH
30012: LD_VAR 0 2
30016: ARRAY
30017: PUSH
30018: LD_INT 2
30020: ARRAY
30021: STR
30022: PUSH
30023: LD_STRING ,
30025: STR
30026: PUSH
30027: LD_VAR 0 3
30031: PUSH
30032: LD_VAR 0 2
30036: ARRAY
30037: PUSH
30038: LD_INT 3
30040: ARRAY
30041: STR
30042: PUSH
30043: LD_STRING ,
30045: STR
30046: PUSH
30047: LD_VAR 0 3
30051: PUSH
30052: LD_VAR 0 2
30056: ARRAY
30057: PUSH
30058: LD_INT 4
30060: ARRAY
30061: STR
30062: PUSH
30063: LD_STRING )
30065: STR
30066: PPUSH
30067: CALL_OW 559
30071: GO 29981
30073: POP
30074: POP
// end ; end ;
30075: LD_VAR 0 1
30079: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30080: LD_INT 0
30082: PPUSH
// if HexInfo ( x , y ) = warehouse then
30083: LD_VAR 0 2
30087: PPUSH
30088: LD_VAR 0 3
30092: PPUSH
30093: CALL_OW 428
30097: PUSH
30098: LD_VAR 0 1
30102: EQUAL
30103: IFFALSE 30130
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30105: LD_ADDR_EXP 99
30109: PUSH
30110: LD_EXP 99
30114: PPUSH
30115: LD_VAR 0 1
30119: PPUSH
30120: LD_INT 0
30122: PPUSH
30123: CALL_OW 1
30127: ST_TO_ADDR
30128: GO 30181
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30130: LD_ADDR_EXP 99
30134: PUSH
30135: LD_EXP 99
30139: PPUSH
30140: LD_VAR 0 1
30144: PPUSH
30145: LD_VAR 0 1
30149: PPUSH
30150: CALL_OW 255
30154: PUSH
30155: LD_VAR 0 1
30159: PUSH
30160: LD_VAR 0 2
30164: PUSH
30165: LD_VAR 0 3
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: PPUSH
30176: CALL_OW 1
30180: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30181: CALL 30190 0 0
// end ;
30185: LD_VAR 0 4
30189: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30190: LD_INT 0
30192: PPUSH
30193: PPUSH
30194: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30195: LD_STRING resetWarehouseGatheringPoints();
30197: PPUSH
30198: CALL_OW 559
// if warehouseGatheringPoints then
30202: LD_EXP 99
30206: IFFALSE 30332
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30208: LD_ADDR_VAR 0 3
30212: PUSH
30213: LD_EXP 99
30217: PPUSH
30218: CALL 76544 0 1
30222: ST_TO_ADDR
// for i := 1 to list do
30223: LD_ADDR_VAR 0 2
30227: PUSH
30228: DOUBLE
30229: LD_INT 1
30231: DEC
30232: ST_TO_ADDR
30233: LD_VAR 0 3
30237: PUSH
30238: FOR_TO
30239: IFFALSE 30330
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30241: LD_STRING setWarehouseGatheringPointXY(
30243: PUSH
30244: LD_VAR 0 3
30248: PUSH
30249: LD_VAR 0 2
30253: ARRAY
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: STR
30259: PUSH
30260: LD_STRING ,
30262: STR
30263: PUSH
30264: LD_VAR 0 3
30268: PUSH
30269: LD_VAR 0 2
30273: ARRAY
30274: PUSH
30275: LD_INT 2
30277: ARRAY
30278: STR
30279: PUSH
30280: LD_STRING ,
30282: STR
30283: PUSH
30284: LD_VAR 0 3
30288: PUSH
30289: LD_VAR 0 2
30293: ARRAY
30294: PUSH
30295: LD_INT 3
30297: ARRAY
30298: STR
30299: PUSH
30300: LD_STRING ,
30302: STR
30303: PUSH
30304: LD_VAR 0 3
30308: PUSH
30309: LD_VAR 0 2
30313: ARRAY
30314: PUSH
30315: LD_INT 4
30317: ARRAY
30318: STR
30319: PUSH
30320: LD_STRING )
30322: STR
30323: PPUSH
30324: CALL_OW 559
30328: GO 30238
30330: POP
30331: POP
// end ; end ;
30332: LD_VAR 0 1
30336: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30337: LD_EXP 99
30341: IFFALSE 31026
30343: GO 30345
30345: DISABLE
30346: LD_INT 0
30348: PPUSH
30349: PPUSH
30350: PPUSH
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
// begin enable ;
30357: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30358: LD_ADDR_VAR 0 3
30362: PUSH
30363: LD_EXP 99
30367: PPUSH
30368: CALL 76544 0 1
30372: ST_TO_ADDR
// if not list then
30373: LD_VAR 0 3
30377: NOT
30378: IFFALSE 30382
// exit ;
30380: GO 31026
// for i := 1 to list do
30382: LD_ADDR_VAR 0 1
30386: PUSH
30387: DOUBLE
30388: LD_INT 1
30390: DEC
30391: ST_TO_ADDR
30392: LD_VAR 0 3
30396: PUSH
30397: FOR_TO
30398: IFFALSE 31024
// begin depot := list [ i ] [ 2 ] ;
30400: LD_ADDR_VAR 0 8
30404: PUSH
30405: LD_VAR 0 3
30409: PUSH
30410: LD_VAR 0 1
30414: ARRAY
30415: PUSH
30416: LD_INT 2
30418: ARRAY
30419: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30420: LD_ADDR_VAR 0 5
30424: PUSH
30425: LD_VAR 0 3
30429: PUSH
30430: LD_VAR 0 1
30434: ARRAY
30435: PUSH
30436: LD_INT 1
30438: ARRAY
30439: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30440: LD_VAR 0 8
30444: PPUSH
30445: CALL_OW 301
30449: PUSH
30450: LD_VAR 0 5
30454: PUSH
30455: LD_VAR 0 8
30459: PPUSH
30460: CALL_OW 255
30464: NONEQUAL
30465: OR
30466: IFFALSE 30495
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30468: LD_ADDR_EXP 99
30472: PUSH
30473: LD_EXP 99
30477: PPUSH
30478: LD_VAR 0 8
30482: PPUSH
30483: LD_INT 0
30485: PPUSH
30486: CALL_OW 1
30490: ST_TO_ADDR
// exit ;
30491: POP
30492: POP
30493: GO 31026
// end ; x := list [ i ] [ 3 ] ;
30495: LD_ADDR_VAR 0 6
30499: PUSH
30500: LD_VAR 0 3
30504: PUSH
30505: LD_VAR 0 1
30509: ARRAY
30510: PUSH
30511: LD_INT 3
30513: ARRAY
30514: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30515: LD_ADDR_VAR 0 7
30519: PUSH
30520: LD_VAR 0 3
30524: PUSH
30525: LD_VAR 0 1
30529: ARRAY
30530: PUSH
30531: LD_INT 4
30533: ARRAY
30534: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30535: LD_ADDR_VAR 0 9
30539: PUSH
30540: LD_VAR 0 6
30544: PPUSH
30545: LD_VAR 0 7
30549: PPUSH
30550: LD_INT 16
30552: PPUSH
30553: CALL 75132 0 3
30557: ST_TO_ADDR
// if not cratesNearbyPoint then
30558: LD_VAR 0 9
30562: NOT
30563: IFFALSE 30569
// exit ;
30565: POP
30566: POP
30567: GO 31026
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30569: LD_ADDR_VAR 0 4
30573: PUSH
30574: LD_INT 22
30576: PUSH
30577: LD_VAR 0 5
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 60
30591: PUSH
30592: EMPTY
30593: LIST
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 91
30601: PUSH
30602: LD_VAR 0 8
30606: PUSH
30607: LD_INT 6
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: LD_INT 25
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 25
30630: PUSH
30631: LD_INT 16
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: PPUSH
30649: CALL_OW 69
30653: PUSH
30654: LD_VAR 0 8
30658: PPUSH
30659: CALL_OW 313
30663: PPUSH
30664: LD_INT 3
30666: PUSH
30667: LD_INT 60
30669: PUSH
30670: EMPTY
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: LD_INT 25
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 25
30692: PUSH
30693: LD_INT 16
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PPUSH
30709: CALL_OW 72
30713: UNION
30714: ST_TO_ADDR
// if tmp then
30715: LD_VAR 0 4
30719: IFFALSE 30799
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30721: LD_ADDR_VAR 0 4
30725: PUSH
30726: LD_VAR 0 4
30730: PPUSH
30731: LD_INT 3
30733: PPUSH
30734: CALL 73101 0 2
30738: ST_TO_ADDR
// for j in tmp do
30739: LD_ADDR_VAR 0 2
30743: PUSH
30744: LD_VAR 0 4
30748: PUSH
30749: FOR_IN
30750: IFFALSE 30793
// begin if IsInUnit ( j ) then
30752: LD_VAR 0 2
30756: PPUSH
30757: CALL_OW 310
30761: IFFALSE 30772
// ComExit ( j ) ;
30763: LD_VAR 0 2
30767: PPUSH
30768: CALL 73184 0 1
// AddComCollect ( j , x , y ) ;
30772: LD_VAR 0 2
30776: PPUSH
30777: LD_VAR 0 6
30781: PPUSH
30782: LD_VAR 0 7
30786: PPUSH
30787: CALL_OW 177
// end ;
30791: GO 30749
30793: POP
30794: POP
// exit ;
30795: POP
30796: POP
30797: GO 31026
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30799: LD_ADDR_VAR 0 4
30803: PUSH
30804: LD_INT 22
30806: PUSH
30807: LD_VAR 0 5
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 91
30818: PUSH
30819: LD_VAR 0 8
30823: PUSH
30824: LD_INT 8
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: LD_INT 34
30837: PUSH
30838: LD_INT 12
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 34
30847: PUSH
30848: LD_INT 51
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 34
30857: PUSH
30858: LD_INT 32
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 34
30867: PUSH
30868: LD_INT 89
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: PPUSH
30887: CALL_OW 69
30891: ST_TO_ADDR
// if tmp then
30892: LD_VAR 0 4
30896: IFFALSE 31022
// begin for j in tmp do
30898: LD_ADDR_VAR 0 2
30902: PUSH
30903: LD_VAR 0 4
30907: PUSH
30908: FOR_IN
30909: IFFALSE 31020
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30911: LD_VAR 0 2
30915: PPUSH
30916: CALL_OW 262
30920: PUSH
30921: LD_INT 3
30923: EQUAL
30924: PUSH
30925: LD_VAR 0 2
30929: PPUSH
30930: CALL_OW 261
30934: PUSH
30935: LD_INT 20
30937: GREATER
30938: OR
30939: PUSH
30940: LD_VAR 0 2
30944: PPUSH
30945: CALL_OW 314
30949: NOT
30950: AND
30951: PUSH
30952: LD_VAR 0 2
30956: PPUSH
30957: CALL_OW 263
30961: PUSH
30962: LD_INT 1
30964: NONEQUAL
30965: PUSH
30966: LD_VAR 0 2
30970: PPUSH
30971: CALL_OW 311
30975: OR
30976: AND
30977: IFFALSE 31018
// begin ComCollect ( j , x , y ) ;
30979: LD_VAR 0 2
30983: PPUSH
30984: LD_VAR 0 6
30988: PPUSH
30989: LD_VAR 0 7
30993: PPUSH
30994: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30998: LD_VAR 0 2
31002: PPUSH
31003: LD_VAR 0 8
31007: PPUSH
31008: CALL_OW 172
// exit ;
31012: POP
31013: POP
31014: POP
31015: POP
31016: GO 31026
// end ;
31018: GO 30908
31020: POP
31021: POP
// end ; end ;
31022: GO 30397
31024: POP
31025: POP
// end ; end_of_file
31026: PPOPN 9
31028: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31029: LD_INT 0
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31035: LD_VAR 0 1
31039: PPUSH
31040: CALL_OW 264
31044: PUSH
31045: LD_INT 91
31047: EQUAL
31048: IFFALSE 31120
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31050: LD_INT 68
31052: PPUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 255
31062: PPUSH
31063: CALL_OW 321
31067: PUSH
31068: LD_INT 2
31070: EQUAL
31071: IFFALSE 31083
// eff := 70 else
31073: LD_ADDR_VAR 0 4
31077: PUSH
31078: LD_INT 70
31080: ST_TO_ADDR
31081: GO 31091
// eff := 30 ;
31083: LD_ADDR_VAR 0 4
31087: PUSH
31088: LD_INT 30
31090: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 250
31100: PPUSH
31101: LD_VAR 0 1
31105: PPUSH
31106: CALL_OW 251
31110: PPUSH
31111: LD_VAR 0 4
31115: PPUSH
31116: CALL_OW 495
// end ; end ;
31120: LD_VAR 0 2
31124: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31125: LD_INT 0
31127: PPUSH
// end ;
31128: LD_VAR 0 4
31132: RET
// export function SOS_Command ( cmd ) ; begin
31133: LD_INT 0
31135: PPUSH
// end ;
31136: LD_VAR 0 2
31140: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31141: LD_INT 0
31143: PPUSH
// end ;
31144: LD_VAR 0 6
31148: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31149: LD_INT 0
31151: PPUSH
31152: PPUSH
// if not vehicle or not factory then
31153: LD_VAR 0 1
31157: NOT
31158: PUSH
31159: LD_VAR 0 2
31163: NOT
31164: OR
31165: IFFALSE 31169
// exit ;
31167: GO 31400
// if factoryWaypoints >= factory then
31169: LD_EXP 98
31173: PUSH
31174: LD_VAR 0 2
31178: GREATEREQUAL
31179: IFFALSE 31400
// if factoryWaypoints [ factory ] then
31181: LD_EXP 98
31185: PUSH
31186: LD_VAR 0 2
31190: ARRAY
31191: IFFALSE 31400
// begin if GetControl ( vehicle ) = control_manual then
31193: LD_VAR 0 1
31197: PPUSH
31198: CALL_OW 263
31202: PUSH
31203: LD_INT 1
31205: EQUAL
31206: IFFALSE 31287
// begin driver := IsDrivenBy ( vehicle ) ;
31208: LD_ADDR_VAR 0 4
31212: PUSH
31213: LD_VAR 0 1
31217: PPUSH
31218: CALL_OW 311
31222: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31223: LD_VAR 0 4
31227: PPUSH
31228: LD_EXP 98
31232: PUSH
31233: LD_VAR 0 2
31237: ARRAY
31238: PUSH
31239: LD_INT 3
31241: ARRAY
31242: PPUSH
31243: LD_EXP 98
31247: PUSH
31248: LD_VAR 0 2
31252: ARRAY
31253: PUSH
31254: LD_INT 4
31256: ARRAY
31257: PPUSH
31258: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31262: LD_VAR 0 4
31266: PPUSH
31267: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31271: LD_VAR 0 4
31275: PPUSH
31276: LD_VAR 0 2
31280: PPUSH
31281: CALL_OW 180
// end else
31285: GO 31400
// if GetControl ( vehicle ) = control_remote then
31287: LD_VAR 0 1
31291: PPUSH
31292: CALL_OW 263
31296: PUSH
31297: LD_INT 2
31299: EQUAL
31300: IFFALSE 31361
// begin wait ( 0 0$2 ) ;
31302: LD_INT 70
31304: PPUSH
31305: CALL_OW 67
// if Connect ( vehicle ) then
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL 43424 0 1
31318: IFFALSE 31359
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31320: LD_VAR 0 1
31324: PPUSH
31325: LD_EXP 98
31329: PUSH
31330: LD_VAR 0 2
31334: ARRAY
31335: PUSH
31336: LD_INT 3
31338: ARRAY
31339: PPUSH
31340: LD_EXP 98
31344: PUSH
31345: LD_VAR 0 2
31349: ARRAY
31350: PUSH
31351: LD_INT 4
31353: ARRAY
31354: PPUSH
31355: CALL_OW 171
// end else
31359: GO 31400
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31361: LD_VAR 0 1
31365: PPUSH
31366: LD_EXP 98
31370: PUSH
31371: LD_VAR 0 2
31375: ARRAY
31376: PUSH
31377: LD_INT 3
31379: ARRAY
31380: PPUSH
31381: LD_EXP 98
31385: PUSH
31386: LD_VAR 0 2
31390: ARRAY
31391: PUSH
31392: LD_INT 4
31394: ARRAY
31395: PPUSH
31396: CALL_OW 171
// end ; end ;
31400: LD_VAR 0 3
31404: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31405: LD_INT 0
31407: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31408: LD_VAR 0 1
31412: PUSH
31413: LD_INT 250
31415: EQUAL
31416: PUSH
31417: LD_VAR 0 2
31421: PPUSH
31422: CALL_OW 264
31426: PUSH
31427: LD_INT 81
31429: EQUAL
31430: AND
31431: IFFALSE 31452
// MinerPlaceMine ( unit , x , y ) ;
31433: LD_VAR 0 2
31437: PPUSH
31438: LD_VAR 0 4
31442: PPUSH
31443: LD_VAR 0 5
31447: PPUSH
31448: CALL 33837 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31452: LD_VAR 0 1
31456: PUSH
31457: LD_INT 251
31459: EQUAL
31460: PUSH
31461: LD_VAR 0 2
31465: PPUSH
31466: CALL_OW 264
31470: PUSH
31471: LD_INT 81
31473: EQUAL
31474: AND
31475: IFFALSE 31496
// MinerDetonateMine ( unit , x , y ) ;
31477: LD_VAR 0 2
31481: PPUSH
31482: LD_VAR 0 4
31486: PPUSH
31487: LD_VAR 0 5
31491: PPUSH
31492: CALL 34112 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31496: LD_VAR 0 1
31500: PUSH
31501: LD_INT 252
31503: EQUAL
31504: PUSH
31505: LD_VAR 0 2
31509: PPUSH
31510: CALL_OW 264
31514: PUSH
31515: LD_INT 81
31517: EQUAL
31518: AND
31519: IFFALSE 31540
// MinerCreateMinefield ( unit , x , y ) ;
31521: LD_VAR 0 2
31525: PPUSH
31526: LD_VAR 0 4
31530: PPUSH
31531: LD_VAR 0 5
31535: PPUSH
31536: CALL 34529 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31540: LD_VAR 0 1
31544: PUSH
31545: LD_INT 253
31547: EQUAL
31548: PUSH
31549: LD_VAR 0 2
31553: PPUSH
31554: CALL_OW 257
31558: PUSH
31559: LD_INT 5
31561: EQUAL
31562: AND
31563: IFFALSE 31584
// ComBinocular ( unit , x , y ) ;
31565: LD_VAR 0 2
31569: PPUSH
31570: LD_VAR 0 4
31574: PPUSH
31575: LD_VAR 0 5
31579: PPUSH
31580: CALL 34898 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31584: LD_VAR 0 1
31588: PUSH
31589: LD_INT 254
31591: EQUAL
31592: PUSH
31593: LD_VAR 0 2
31597: PPUSH
31598: CALL_OW 264
31602: PUSH
31603: LD_INT 99
31605: EQUAL
31606: AND
31607: PUSH
31608: LD_VAR 0 3
31612: PPUSH
31613: CALL_OW 263
31617: PUSH
31618: LD_INT 3
31620: EQUAL
31621: AND
31622: IFFALSE 31638
// HackDestroyVehicle ( unit , selectedUnit ) ;
31624: LD_VAR 0 2
31628: PPUSH
31629: LD_VAR 0 3
31633: PPUSH
31634: CALL 33201 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31638: LD_VAR 0 1
31642: PUSH
31643: LD_INT 255
31645: EQUAL
31646: PUSH
31647: LD_VAR 0 2
31651: PPUSH
31652: CALL_OW 264
31656: PUSH
31657: LD_INT 14
31659: PUSH
31660: LD_INT 53
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: IN
31667: AND
31668: PUSH
31669: LD_VAR 0 4
31673: PPUSH
31674: LD_VAR 0 5
31678: PPUSH
31679: CALL_OW 488
31683: AND
31684: IFFALSE 31708
// CutTreeXYR ( unit , x , y , 12 ) ;
31686: LD_VAR 0 2
31690: PPUSH
31691: LD_VAR 0 4
31695: PPUSH
31696: LD_VAR 0 5
31700: PPUSH
31701: LD_INT 12
31703: PPUSH
31704: CALL 31771 0 4
// if cmd = 256 then
31708: LD_VAR 0 1
31712: PUSH
31713: LD_INT 256
31715: EQUAL
31716: IFFALSE 31737
// SetFactoryWaypoint ( unit , x , y ) ;
31718: LD_VAR 0 2
31722: PPUSH
31723: LD_VAR 0 4
31727: PPUSH
31728: LD_VAR 0 5
31732: PPUSH
31733: CALL 29718 0 3
// if cmd = 257 then
31737: LD_VAR 0 1
31741: PUSH
31742: LD_INT 257
31744: EQUAL
31745: IFFALSE 31766
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31747: LD_VAR 0 2
31751: PPUSH
31752: LD_VAR 0 4
31756: PPUSH
31757: LD_VAR 0 5
31761: PPUSH
31762: CALL 30080 0 3
// end ;
31766: LD_VAR 0 6
31770: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31771: LD_INT 0
31773: PPUSH
31774: PPUSH
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31782: LD_VAR 0 1
31786: NOT
31787: PUSH
31788: LD_VAR 0 2
31792: PPUSH
31793: LD_VAR 0 3
31797: PPUSH
31798: CALL_OW 488
31802: NOT
31803: OR
31804: PUSH
31805: LD_VAR 0 4
31809: NOT
31810: OR
31811: IFFALSE 31815
// exit ;
31813: GO 32155
// list := [ ] ;
31815: LD_ADDR_VAR 0 13
31819: PUSH
31820: EMPTY
31821: ST_TO_ADDR
// if x - r < 0 then
31822: LD_VAR 0 2
31826: PUSH
31827: LD_VAR 0 4
31831: MINUS
31832: PUSH
31833: LD_INT 0
31835: LESS
31836: IFFALSE 31848
// min_x := 0 else
31838: LD_ADDR_VAR 0 7
31842: PUSH
31843: LD_INT 0
31845: ST_TO_ADDR
31846: GO 31864
// min_x := x - r ;
31848: LD_ADDR_VAR 0 7
31852: PUSH
31853: LD_VAR 0 2
31857: PUSH
31858: LD_VAR 0 4
31862: MINUS
31863: ST_TO_ADDR
// if y - r < 0 then
31864: LD_VAR 0 3
31868: PUSH
31869: LD_VAR 0 4
31873: MINUS
31874: PUSH
31875: LD_INT 0
31877: LESS
31878: IFFALSE 31890
// min_y := 0 else
31880: LD_ADDR_VAR 0 8
31884: PUSH
31885: LD_INT 0
31887: ST_TO_ADDR
31888: GO 31906
// min_y := y - r ;
31890: LD_ADDR_VAR 0 8
31894: PUSH
31895: LD_VAR 0 3
31899: PUSH
31900: LD_VAR 0 4
31904: MINUS
31905: ST_TO_ADDR
// max_x := x + r ;
31906: LD_ADDR_VAR 0 9
31910: PUSH
31911: LD_VAR 0 2
31915: PUSH
31916: LD_VAR 0 4
31920: PLUS
31921: ST_TO_ADDR
// max_y := y + r ;
31922: LD_ADDR_VAR 0 10
31926: PUSH
31927: LD_VAR 0 3
31931: PUSH
31932: LD_VAR 0 4
31936: PLUS
31937: ST_TO_ADDR
// for _x = min_x to max_x do
31938: LD_ADDR_VAR 0 11
31942: PUSH
31943: DOUBLE
31944: LD_VAR 0 7
31948: DEC
31949: ST_TO_ADDR
31950: LD_VAR 0 9
31954: PUSH
31955: FOR_TO
31956: IFFALSE 32073
// for _y = min_y to max_y do
31958: LD_ADDR_VAR 0 12
31962: PUSH
31963: DOUBLE
31964: LD_VAR 0 8
31968: DEC
31969: ST_TO_ADDR
31970: LD_VAR 0 10
31974: PUSH
31975: FOR_TO
31976: IFFALSE 32069
// begin if not ValidHex ( _x , _y ) then
31978: LD_VAR 0 11
31982: PPUSH
31983: LD_VAR 0 12
31987: PPUSH
31988: CALL_OW 488
31992: NOT
31993: IFFALSE 31997
// continue ;
31995: GO 31975
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31997: LD_VAR 0 11
32001: PPUSH
32002: LD_VAR 0 12
32006: PPUSH
32007: CALL_OW 351
32011: PUSH
32012: LD_VAR 0 11
32016: PPUSH
32017: LD_VAR 0 12
32021: PPUSH
32022: CALL_OW 554
32026: AND
32027: IFFALSE 32067
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32029: LD_ADDR_VAR 0 13
32033: PUSH
32034: LD_VAR 0 13
32038: PPUSH
32039: LD_VAR 0 13
32043: PUSH
32044: LD_INT 1
32046: PLUS
32047: PPUSH
32048: LD_VAR 0 11
32052: PUSH
32053: LD_VAR 0 12
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PPUSH
32062: CALL_OW 2
32066: ST_TO_ADDR
// end ;
32067: GO 31975
32069: POP
32070: POP
32071: GO 31955
32073: POP
32074: POP
// if not list then
32075: LD_VAR 0 13
32079: NOT
32080: IFFALSE 32084
// exit ;
32082: GO 32155
// for i in list do
32084: LD_ADDR_VAR 0 6
32088: PUSH
32089: LD_VAR 0 13
32093: PUSH
32094: FOR_IN
32095: IFFALSE 32153
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32097: LD_VAR 0 1
32101: PPUSH
32102: LD_STRING M
32104: PUSH
32105: LD_VAR 0 6
32109: PUSH
32110: LD_INT 1
32112: ARRAY
32113: PUSH
32114: LD_VAR 0 6
32118: PUSH
32119: LD_INT 2
32121: ARRAY
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: PPUSH
32147: CALL_OW 447
32151: GO 32094
32153: POP
32154: POP
// end ;
32155: LD_VAR 0 5
32159: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32160: LD_EXP 101
32164: NOT
32165: IFFALSE 32215
32167: GO 32169
32169: DISABLE
// begin initHack := true ;
32170: LD_ADDR_EXP 101
32174: PUSH
32175: LD_INT 1
32177: ST_TO_ADDR
// hackTanks := [ ] ;
32178: LD_ADDR_EXP 102
32182: PUSH
32183: EMPTY
32184: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32185: LD_ADDR_EXP 103
32189: PUSH
32190: EMPTY
32191: ST_TO_ADDR
// hackLimit := 3 ;
32192: LD_ADDR_EXP 104
32196: PUSH
32197: LD_INT 3
32199: ST_TO_ADDR
// hackDist := 12 ;
32200: LD_ADDR_EXP 105
32204: PUSH
32205: LD_INT 12
32207: ST_TO_ADDR
// hackCounter := [ ] ;
32208: LD_ADDR_EXP 106
32212: PUSH
32213: EMPTY
32214: ST_TO_ADDR
// end ;
32215: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32216: LD_EXP 101
32220: PUSH
32221: LD_INT 34
32223: PUSH
32224: LD_INT 99
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PPUSH
32231: CALL_OW 69
32235: AND
32236: IFFALSE 32489
32238: GO 32240
32240: DISABLE
32241: LD_INT 0
32243: PPUSH
32244: PPUSH
// begin enable ;
32245: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32246: LD_ADDR_VAR 0 1
32250: PUSH
32251: LD_INT 34
32253: PUSH
32254: LD_INT 99
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PPUSH
32261: CALL_OW 69
32265: PUSH
32266: FOR_IN
32267: IFFALSE 32487
// begin if not i in hackTanks then
32269: LD_VAR 0 1
32273: PUSH
32274: LD_EXP 102
32278: IN
32279: NOT
32280: IFFALSE 32363
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32282: LD_ADDR_EXP 102
32286: PUSH
32287: LD_EXP 102
32291: PPUSH
32292: LD_EXP 102
32296: PUSH
32297: LD_INT 1
32299: PLUS
32300: PPUSH
32301: LD_VAR 0 1
32305: PPUSH
32306: CALL_OW 1
32310: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32311: LD_ADDR_EXP 103
32315: PUSH
32316: LD_EXP 103
32320: PPUSH
32321: LD_EXP 103
32325: PUSH
32326: LD_INT 1
32328: PLUS
32329: PPUSH
32330: EMPTY
32331: PPUSH
32332: CALL_OW 1
32336: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32337: LD_ADDR_EXP 106
32341: PUSH
32342: LD_EXP 106
32346: PPUSH
32347: LD_EXP 106
32351: PUSH
32352: LD_INT 1
32354: PLUS
32355: PPUSH
32356: EMPTY
32357: PPUSH
32358: CALL_OW 1
32362: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32363: LD_VAR 0 1
32367: PPUSH
32368: CALL_OW 302
32372: NOT
32373: IFFALSE 32386
// begin HackUnlinkAll ( i ) ;
32375: LD_VAR 0 1
32379: PPUSH
32380: CALL 32492 0 1
// continue ;
32384: GO 32266
// end ; HackCheckCapturedStatus ( i ) ;
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL 32935 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32395: LD_ADDR_VAR 0 2
32399: PUSH
32400: LD_INT 81
32402: PUSH
32403: LD_VAR 0 1
32407: PPUSH
32408: CALL_OW 255
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 33
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 91
32429: PUSH
32430: LD_VAR 0 1
32434: PUSH
32435: LD_EXP 105
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 50
32447: PUSH
32448: EMPTY
32449: LIST
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: PPUSH
32457: CALL_OW 69
32461: ST_TO_ADDR
// if not tmp then
32462: LD_VAR 0 2
32466: NOT
32467: IFFALSE 32471
// continue ;
32469: GO 32266
// HackLink ( i , tmp ) ;
32471: LD_VAR 0 1
32475: PPUSH
32476: LD_VAR 0 2
32480: PPUSH
32481: CALL 32628 0 2
// end ;
32485: GO 32266
32487: POP
32488: POP
// end ;
32489: PPOPN 2
32491: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32492: LD_INT 0
32494: PPUSH
32495: PPUSH
32496: PPUSH
// if not hack in hackTanks then
32497: LD_VAR 0 1
32501: PUSH
32502: LD_EXP 102
32506: IN
32507: NOT
32508: IFFALSE 32512
// exit ;
32510: GO 32623
// index := GetElementIndex ( hackTanks , hack ) ;
32512: LD_ADDR_VAR 0 4
32516: PUSH
32517: LD_EXP 102
32521: PPUSH
32522: LD_VAR 0 1
32526: PPUSH
32527: CALL 40240 0 2
32531: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32532: LD_EXP 103
32536: PUSH
32537: LD_VAR 0 4
32541: ARRAY
32542: IFFALSE 32623
// begin for i in hackTanksCaptured [ index ] do
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_EXP 103
32553: PUSH
32554: LD_VAR 0 4
32558: ARRAY
32559: PUSH
32560: FOR_IN
32561: IFFALSE 32587
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32563: LD_VAR 0 3
32567: PUSH
32568: LD_INT 1
32570: ARRAY
32571: PPUSH
32572: LD_VAR 0 3
32576: PUSH
32577: LD_INT 2
32579: ARRAY
32580: PPUSH
32581: CALL_OW 235
32585: GO 32560
32587: POP
32588: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32589: LD_ADDR_EXP 103
32593: PUSH
32594: LD_EXP 103
32598: PPUSH
32599: LD_VAR 0 4
32603: PPUSH
32604: EMPTY
32605: PPUSH
32606: CALL_OW 1
32610: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32611: LD_VAR 0 1
32615: PPUSH
32616: LD_INT 0
32618: PPUSH
32619: CALL_OW 505
// end ; end ;
32623: LD_VAR 0 2
32627: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32628: LD_INT 0
32630: PPUSH
32631: PPUSH
32632: PPUSH
// if not hack in hackTanks or not vehicles then
32633: LD_VAR 0 1
32637: PUSH
32638: LD_EXP 102
32642: IN
32643: NOT
32644: PUSH
32645: LD_VAR 0 2
32649: NOT
32650: OR
32651: IFFALSE 32655
// exit ;
32653: GO 32930
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32655: LD_ADDR_VAR 0 2
32659: PUSH
32660: LD_VAR 0 1
32664: PPUSH
32665: LD_VAR 0 2
32669: PPUSH
32670: LD_INT 1
32672: PPUSH
32673: LD_INT 1
32675: PPUSH
32676: CALL 40890 0 4
32680: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32681: LD_ADDR_VAR 0 5
32685: PUSH
32686: LD_EXP 102
32690: PPUSH
32691: LD_VAR 0 1
32695: PPUSH
32696: CALL 40240 0 2
32700: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32701: LD_EXP 103
32705: PUSH
32706: LD_VAR 0 5
32710: ARRAY
32711: PUSH
32712: LD_EXP 104
32716: LESS
32717: IFFALSE 32906
// begin for i := 1 to vehicles do
32719: LD_ADDR_VAR 0 4
32723: PUSH
32724: DOUBLE
32725: LD_INT 1
32727: DEC
32728: ST_TO_ADDR
32729: LD_VAR 0 2
32733: PUSH
32734: FOR_TO
32735: IFFALSE 32904
// begin if hackTanksCaptured [ index ] = hackLimit then
32737: LD_EXP 103
32741: PUSH
32742: LD_VAR 0 5
32746: ARRAY
32747: PUSH
32748: LD_EXP 104
32752: EQUAL
32753: IFFALSE 32757
// break ;
32755: GO 32904
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32757: LD_ADDR_EXP 106
32761: PUSH
32762: LD_EXP 106
32766: PPUSH
32767: LD_VAR 0 5
32771: PPUSH
32772: LD_EXP 106
32776: PUSH
32777: LD_VAR 0 5
32781: ARRAY
32782: PUSH
32783: LD_INT 1
32785: PLUS
32786: PPUSH
32787: CALL_OW 1
32791: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32792: LD_ADDR_EXP 103
32796: PUSH
32797: LD_EXP 103
32801: PPUSH
32802: LD_VAR 0 5
32806: PUSH
32807: LD_EXP 103
32811: PUSH
32812: LD_VAR 0 5
32816: ARRAY
32817: PUSH
32818: LD_INT 1
32820: PLUS
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PPUSH
32826: LD_VAR 0 2
32830: PUSH
32831: LD_VAR 0 4
32835: ARRAY
32836: PUSH
32837: LD_VAR 0 2
32841: PUSH
32842: LD_VAR 0 4
32846: ARRAY
32847: PPUSH
32848: CALL_OW 255
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PPUSH
32857: CALL 40455 0 3
32861: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32862: LD_VAR 0 2
32866: PUSH
32867: LD_VAR 0 4
32871: ARRAY
32872: PPUSH
32873: LD_VAR 0 1
32877: PPUSH
32878: CALL_OW 255
32882: PPUSH
32883: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32887: LD_VAR 0 2
32891: PUSH
32892: LD_VAR 0 4
32896: ARRAY
32897: PPUSH
32898: CALL_OW 141
// end ;
32902: GO 32734
32904: POP
32905: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32906: LD_VAR 0 1
32910: PPUSH
32911: LD_EXP 103
32915: PUSH
32916: LD_VAR 0 5
32920: ARRAY
32921: PUSH
32922: LD_INT 0
32924: PLUS
32925: PPUSH
32926: CALL_OW 505
// end ;
32930: LD_VAR 0 3
32934: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32935: LD_INT 0
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
// if not hack in hackTanks then
32941: LD_VAR 0 1
32945: PUSH
32946: LD_EXP 102
32950: IN
32951: NOT
32952: IFFALSE 32956
// exit ;
32954: GO 33196
// index := GetElementIndex ( hackTanks , hack ) ;
32956: LD_ADDR_VAR 0 4
32960: PUSH
32961: LD_EXP 102
32965: PPUSH
32966: LD_VAR 0 1
32970: PPUSH
32971: CALL 40240 0 2
32975: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: DOUBLE
32982: LD_EXP 103
32986: PUSH
32987: LD_VAR 0 4
32991: ARRAY
32992: INC
32993: ST_TO_ADDR
32994: LD_INT 1
32996: PUSH
32997: FOR_DOWNTO
32998: IFFALSE 33170
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33000: LD_ADDR_VAR 0 5
33004: PUSH
33005: LD_EXP 103
33009: PUSH
33010: LD_VAR 0 4
33014: ARRAY
33015: PUSH
33016: LD_VAR 0 3
33020: ARRAY
33021: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33022: LD_VAR 0 5
33026: PUSH
33027: LD_INT 1
33029: ARRAY
33030: PPUSH
33031: CALL_OW 302
33035: NOT
33036: PUSH
33037: LD_VAR 0 5
33041: PUSH
33042: LD_INT 1
33044: ARRAY
33045: PPUSH
33046: CALL_OW 255
33050: PUSH
33051: LD_VAR 0 1
33055: PPUSH
33056: CALL_OW 255
33060: NONEQUAL
33061: OR
33062: IFFALSE 33168
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33064: LD_VAR 0 5
33068: PUSH
33069: LD_INT 1
33071: ARRAY
33072: PPUSH
33073: CALL_OW 305
33077: PUSH
33078: LD_VAR 0 5
33082: PUSH
33083: LD_INT 1
33085: ARRAY
33086: PPUSH
33087: CALL_OW 255
33091: PUSH
33092: LD_VAR 0 1
33096: PPUSH
33097: CALL_OW 255
33101: EQUAL
33102: AND
33103: IFFALSE 33127
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33105: LD_VAR 0 5
33109: PUSH
33110: LD_INT 1
33112: ARRAY
33113: PPUSH
33114: LD_VAR 0 5
33118: PUSH
33119: LD_INT 2
33121: ARRAY
33122: PPUSH
33123: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33127: LD_ADDR_EXP 103
33131: PUSH
33132: LD_EXP 103
33136: PPUSH
33137: LD_VAR 0 4
33141: PPUSH
33142: LD_EXP 103
33146: PUSH
33147: LD_VAR 0 4
33151: ARRAY
33152: PPUSH
33153: LD_VAR 0 3
33157: PPUSH
33158: CALL_OW 3
33162: PPUSH
33163: CALL_OW 1
33167: ST_TO_ADDR
// end ; end ;
33168: GO 32997
33170: POP
33171: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33172: LD_VAR 0 1
33176: PPUSH
33177: LD_EXP 103
33181: PUSH
33182: LD_VAR 0 4
33186: ARRAY
33187: PUSH
33188: LD_INT 0
33190: PLUS
33191: PPUSH
33192: CALL_OW 505
// end ;
33196: LD_VAR 0 2
33200: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33201: LD_INT 0
33203: PPUSH
33204: PPUSH
33205: PPUSH
33206: PPUSH
// if not hack in hackTanks then
33207: LD_VAR 0 1
33211: PUSH
33212: LD_EXP 102
33216: IN
33217: NOT
33218: IFFALSE 33222
// exit ;
33220: GO 33307
// index := GetElementIndex ( hackTanks , hack ) ;
33222: LD_ADDR_VAR 0 5
33226: PUSH
33227: LD_EXP 102
33231: PPUSH
33232: LD_VAR 0 1
33236: PPUSH
33237: CALL 40240 0 2
33241: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33242: LD_ADDR_VAR 0 4
33246: PUSH
33247: DOUBLE
33248: LD_INT 1
33250: DEC
33251: ST_TO_ADDR
33252: LD_EXP 103
33256: PUSH
33257: LD_VAR 0 5
33261: ARRAY
33262: PUSH
33263: FOR_TO
33264: IFFALSE 33305
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33266: LD_EXP 103
33270: PUSH
33271: LD_VAR 0 5
33275: ARRAY
33276: PUSH
33277: LD_VAR 0 4
33281: ARRAY
33282: PUSH
33283: LD_INT 1
33285: ARRAY
33286: PUSH
33287: LD_VAR 0 2
33291: EQUAL
33292: IFFALSE 33303
// KillUnit ( vehicle ) ;
33294: LD_VAR 0 2
33298: PPUSH
33299: CALL_OW 66
33303: GO 33263
33305: POP
33306: POP
// end ;
33307: LD_VAR 0 3
33311: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33312: LD_EXP 107
33316: NOT
33317: IFFALSE 33352
33319: GO 33321
33321: DISABLE
// begin initMiner := true ;
33322: LD_ADDR_EXP 107
33326: PUSH
33327: LD_INT 1
33329: ST_TO_ADDR
// minersList := [ ] ;
33330: LD_ADDR_EXP 108
33334: PUSH
33335: EMPTY
33336: ST_TO_ADDR
// minerMinesList := [ ] ;
33337: LD_ADDR_EXP 109
33341: PUSH
33342: EMPTY
33343: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33344: LD_ADDR_EXP 110
33348: PUSH
33349: LD_INT 5
33351: ST_TO_ADDR
// end ;
33352: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33353: LD_EXP 107
33357: PUSH
33358: LD_INT 34
33360: PUSH
33361: LD_INT 81
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PPUSH
33368: CALL_OW 69
33372: AND
33373: IFFALSE 33834
33375: GO 33377
33377: DISABLE
33378: LD_INT 0
33380: PPUSH
33381: PPUSH
33382: PPUSH
33383: PPUSH
// begin enable ;
33384: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33385: LD_ADDR_VAR 0 1
33389: PUSH
33390: LD_INT 34
33392: PUSH
33393: LD_INT 81
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PPUSH
33400: CALL_OW 69
33404: PUSH
33405: FOR_IN
33406: IFFALSE 33478
// begin if not i in minersList then
33408: LD_VAR 0 1
33412: PUSH
33413: LD_EXP 108
33417: IN
33418: NOT
33419: IFFALSE 33476
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33421: LD_ADDR_EXP 108
33425: PUSH
33426: LD_EXP 108
33430: PPUSH
33431: LD_EXP 108
33435: PUSH
33436: LD_INT 1
33438: PLUS
33439: PPUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: CALL_OW 1
33449: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33450: LD_ADDR_EXP 109
33454: PUSH
33455: LD_EXP 109
33459: PPUSH
33460: LD_EXP 109
33464: PUSH
33465: LD_INT 1
33467: PLUS
33468: PPUSH
33469: EMPTY
33470: PPUSH
33471: CALL_OW 1
33475: ST_TO_ADDR
// end end ;
33476: GO 33405
33478: POP
33479: POP
// for i := minerMinesList downto 1 do
33480: LD_ADDR_VAR 0 1
33484: PUSH
33485: DOUBLE
33486: LD_EXP 109
33490: INC
33491: ST_TO_ADDR
33492: LD_INT 1
33494: PUSH
33495: FOR_DOWNTO
33496: IFFALSE 33832
// begin if IsLive ( minersList [ i ] ) then
33498: LD_EXP 108
33502: PUSH
33503: LD_VAR 0 1
33507: ARRAY
33508: PPUSH
33509: CALL_OW 300
33513: IFFALSE 33541
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33515: LD_EXP 108
33519: PUSH
33520: LD_VAR 0 1
33524: ARRAY
33525: PPUSH
33526: LD_EXP 109
33530: PUSH
33531: LD_VAR 0 1
33535: ARRAY
33536: PPUSH
33537: CALL_OW 505
// if not minerMinesList [ i ] then
33541: LD_EXP 109
33545: PUSH
33546: LD_VAR 0 1
33550: ARRAY
33551: NOT
33552: IFFALSE 33556
// continue ;
33554: GO 33495
// for j := minerMinesList [ i ] downto 1 do
33556: LD_ADDR_VAR 0 2
33560: PUSH
33561: DOUBLE
33562: LD_EXP 109
33566: PUSH
33567: LD_VAR 0 1
33571: ARRAY
33572: INC
33573: ST_TO_ADDR
33574: LD_INT 1
33576: PUSH
33577: FOR_DOWNTO
33578: IFFALSE 33828
// begin side := GetSide ( minersList [ i ] ) ;
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_EXP 108
33589: PUSH
33590: LD_VAR 0 1
33594: ARRAY
33595: PPUSH
33596: CALL_OW 255
33600: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33601: LD_ADDR_VAR 0 4
33605: PUSH
33606: LD_EXP 109
33610: PUSH
33611: LD_VAR 0 1
33615: ARRAY
33616: PUSH
33617: LD_VAR 0 2
33621: ARRAY
33622: PUSH
33623: LD_INT 1
33625: ARRAY
33626: PPUSH
33627: LD_EXP 109
33631: PUSH
33632: LD_VAR 0 1
33636: ARRAY
33637: PUSH
33638: LD_VAR 0 2
33642: ARRAY
33643: PUSH
33644: LD_INT 2
33646: ARRAY
33647: PPUSH
33648: CALL_OW 428
33652: ST_TO_ADDR
// if not tmp then
33653: LD_VAR 0 4
33657: NOT
33658: IFFALSE 33662
// continue ;
33660: GO 33577
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33662: LD_VAR 0 4
33666: PUSH
33667: LD_INT 81
33669: PUSH
33670: LD_VAR 0 3
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PPUSH
33679: CALL_OW 69
33683: IN
33684: PUSH
33685: LD_EXP 109
33689: PUSH
33690: LD_VAR 0 1
33694: ARRAY
33695: PUSH
33696: LD_VAR 0 2
33700: ARRAY
33701: PUSH
33702: LD_INT 1
33704: ARRAY
33705: PPUSH
33706: LD_EXP 109
33710: PUSH
33711: LD_VAR 0 1
33715: ARRAY
33716: PUSH
33717: LD_VAR 0 2
33721: ARRAY
33722: PUSH
33723: LD_INT 2
33725: ARRAY
33726: PPUSH
33727: CALL_OW 458
33731: AND
33732: IFFALSE 33826
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33734: LD_EXP 109
33738: PUSH
33739: LD_VAR 0 1
33743: ARRAY
33744: PUSH
33745: LD_VAR 0 2
33749: ARRAY
33750: PUSH
33751: LD_INT 1
33753: ARRAY
33754: PPUSH
33755: LD_EXP 109
33759: PUSH
33760: LD_VAR 0 1
33764: ARRAY
33765: PUSH
33766: LD_VAR 0 2
33770: ARRAY
33771: PUSH
33772: LD_INT 2
33774: ARRAY
33775: PPUSH
33776: LD_VAR 0 3
33780: PPUSH
33781: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33785: LD_ADDR_EXP 109
33789: PUSH
33790: LD_EXP 109
33794: PPUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: LD_EXP 109
33804: PUSH
33805: LD_VAR 0 1
33809: ARRAY
33810: PPUSH
33811: LD_VAR 0 2
33815: PPUSH
33816: CALL_OW 3
33820: PPUSH
33821: CALL_OW 1
33825: ST_TO_ADDR
// end ; end ;
33826: GO 33577
33828: POP
33829: POP
// end ;
33830: GO 33495
33832: POP
33833: POP
// end ;
33834: PPOPN 4
33836: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33837: LD_INT 0
33839: PPUSH
33840: PPUSH
// result := false ;
33841: LD_ADDR_VAR 0 4
33845: PUSH
33846: LD_INT 0
33848: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33849: LD_VAR 0 1
33853: PPUSH
33854: CALL_OW 264
33858: PUSH
33859: LD_INT 81
33861: EQUAL
33862: NOT
33863: IFFALSE 33867
// exit ;
33865: GO 34107
// index := GetElementIndex ( minersList , unit ) ;
33867: LD_ADDR_VAR 0 5
33871: PUSH
33872: LD_EXP 108
33876: PPUSH
33877: LD_VAR 0 1
33881: PPUSH
33882: CALL 40240 0 2
33886: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33887: LD_EXP 109
33891: PUSH
33892: LD_VAR 0 5
33896: ARRAY
33897: PUSH
33898: LD_EXP 110
33902: GREATEREQUAL
33903: IFFALSE 33907
// exit ;
33905: GO 34107
// ComMoveXY ( unit , x , y ) ;
33907: LD_VAR 0 1
33911: PPUSH
33912: LD_VAR 0 2
33916: PPUSH
33917: LD_VAR 0 3
33921: PPUSH
33922: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33926: LD_INT 35
33928: PPUSH
33929: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33933: LD_VAR 0 1
33937: PPUSH
33938: LD_VAR 0 2
33942: PPUSH
33943: LD_VAR 0 3
33947: PPUSH
33948: CALL 71595 0 3
33952: NOT
33953: PUSH
33954: LD_VAR 0 1
33958: PPUSH
33959: CALL_OW 314
33963: AND
33964: IFFALSE 33968
// exit ;
33966: GO 34107
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33968: LD_VAR 0 2
33972: PPUSH
33973: LD_VAR 0 3
33977: PPUSH
33978: CALL_OW 428
33982: PUSH
33983: LD_VAR 0 1
33987: EQUAL
33988: PUSH
33989: LD_VAR 0 1
33993: PPUSH
33994: CALL_OW 314
33998: NOT
33999: AND
34000: IFFALSE 33926
// PlaySoundXY ( x , y , PlantMine ) ;
34002: LD_VAR 0 2
34006: PPUSH
34007: LD_VAR 0 3
34011: PPUSH
34012: LD_STRING PlantMine
34014: PPUSH
34015: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34019: LD_VAR 0 2
34023: PPUSH
34024: LD_VAR 0 3
34028: PPUSH
34029: LD_VAR 0 1
34033: PPUSH
34034: CALL_OW 255
34038: PPUSH
34039: LD_INT 0
34041: PPUSH
34042: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34046: LD_ADDR_EXP 109
34050: PUSH
34051: LD_EXP 109
34055: PPUSH
34056: LD_VAR 0 5
34060: PUSH
34061: LD_EXP 109
34065: PUSH
34066: LD_VAR 0 5
34070: ARRAY
34071: PUSH
34072: LD_INT 1
34074: PLUS
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PPUSH
34080: LD_VAR 0 2
34084: PUSH
34085: LD_VAR 0 3
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PPUSH
34094: CALL 40455 0 3
34098: ST_TO_ADDR
// result := true ;
34099: LD_ADDR_VAR 0 4
34103: PUSH
34104: LD_INT 1
34106: ST_TO_ADDR
// end ;
34107: LD_VAR 0 4
34111: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
34116: PPUSH
// if not unit in minersList then
34117: LD_VAR 0 1
34121: PUSH
34122: LD_EXP 108
34126: IN
34127: NOT
34128: IFFALSE 34132
// exit ;
34130: GO 34524
// index := GetElementIndex ( minersList , unit ) ;
34132: LD_ADDR_VAR 0 6
34136: PUSH
34137: LD_EXP 108
34141: PPUSH
34142: LD_VAR 0 1
34146: PPUSH
34147: CALL 40240 0 2
34151: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34152: LD_ADDR_VAR 0 5
34156: PUSH
34157: DOUBLE
34158: LD_EXP 109
34162: PUSH
34163: LD_VAR 0 6
34167: ARRAY
34168: INC
34169: ST_TO_ADDR
34170: LD_INT 1
34172: PUSH
34173: FOR_DOWNTO
34174: IFFALSE 34335
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34176: LD_EXP 109
34180: PUSH
34181: LD_VAR 0 6
34185: ARRAY
34186: PUSH
34187: LD_VAR 0 5
34191: ARRAY
34192: PUSH
34193: LD_INT 1
34195: ARRAY
34196: PUSH
34197: LD_VAR 0 2
34201: EQUAL
34202: PUSH
34203: LD_EXP 109
34207: PUSH
34208: LD_VAR 0 6
34212: ARRAY
34213: PUSH
34214: LD_VAR 0 5
34218: ARRAY
34219: PUSH
34220: LD_INT 2
34222: ARRAY
34223: PUSH
34224: LD_VAR 0 3
34228: EQUAL
34229: AND
34230: IFFALSE 34333
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34232: LD_EXP 109
34236: PUSH
34237: LD_VAR 0 6
34241: ARRAY
34242: PUSH
34243: LD_VAR 0 5
34247: ARRAY
34248: PUSH
34249: LD_INT 1
34251: ARRAY
34252: PPUSH
34253: LD_EXP 109
34257: PUSH
34258: LD_VAR 0 6
34262: ARRAY
34263: PUSH
34264: LD_VAR 0 5
34268: ARRAY
34269: PUSH
34270: LD_INT 2
34272: ARRAY
34273: PPUSH
34274: LD_VAR 0 1
34278: PPUSH
34279: CALL_OW 255
34283: PPUSH
34284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34288: LD_ADDR_EXP 109
34292: PUSH
34293: LD_EXP 109
34297: PPUSH
34298: LD_VAR 0 6
34302: PPUSH
34303: LD_EXP 109
34307: PUSH
34308: LD_VAR 0 6
34312: ARRAY
34313: PPUSH
34314: LD_VAR 0 5
34318: PPUSH
34319: CALL_OW 3
34323: PPUSH
34324: CALL_OW 1
34328: ST_TO_ADDR
// exit ;
34329: POP
34330: POP
34331: GO 34524
// end ; end ;
34333: GO 34173
34335: POP
34336: POP
// for i := minerMinesList [ index ] downto 1 do
34337: LD_ADDR_VAR 0 5
34341: PUSH
34342: DOUBLE
34343: LD_EXP 109
34347: PUSH
34348: LD_VAR 0 6
34352: ARRAY
34353: INC
34354: ST_TO_ADDR
34355: LD_INT 1
34357: PUSH
34358: FOR_DOWNTO
34359: IFFALSE 34522
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34361: LD_EXP 109
34365: PUSH
34366: LD_VAR 0 6
34370: ARRAY
34371: PUSH
34372: LD_VAR 0 5
34376: ARRAY
34377: PUSH
34378: LD_INT 1
34380: ARRAY
34381: PPUSH
34382: LD_EXP 109
34386: PUSH
34387: LD_VAR 0 6
34391: ARRAY
34392: PUSH
34393: LD_VAR 0 5
34397: ARRAY
34398: PUSH
34399: LD_INT 2
34401: ARRAY
34402: PPUSH
34403: LD_VAR 0 2
34407: PPUSH
34408: LD_VAR 0 3
34412: PPUSH
34413: CALL_OW 298
34417: PUSH
34418: LD_INT 6
34420: LESS
34421: IFFALSE 34520
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34423: LD_EXP 109
34427: PUSH
34428: LD_VAR 0 6
34432: ARRAY
34433: PUSH
34434: LD_VAR 0 5
34438: ARRAY
34439: PUSH
34440: LD_INT 1
34442: ARRAY
34443: PPUSH
34444: LD_EXP 109
34448: PUSH
34449: LD_VAR 0 6
34453: ARRAY
34454: PUSH
34455: LD_VAR 0 5
34459: ARRAY
34460: PUSH
34461: LD_INT 2
34463: ARRAY
34464: PPUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: CALL_OW 255
34474: PPUSH
34475: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34479: LD_ADDR_EXP 109
34483: PUSH
34484: LD_EXP 109
34488: PPUSH
34489: LD_VAR 0 6
34493: PPUSH
34494: LD_EXP 109
34498: PUSH
34499: LD_VAR 0 6
34503: ARRAY
34504: PPUSH
34505: LD_VAR 0 5
34509: PPUSH
34510: CALL_OW 3
34514: PPUSH
34515: CALL_OW 1
34519: ST_TO_ADDR
// end ; end ;
34520: GO 34358
34522: POP
34523: POP
// end ;
34524: LD_VAR 0 4
34528: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34529: LD_INT 0
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34540: LD_VAR 0 1
34544: PPUSH
34545: CALL_OW 264
34549: PUSH
34550: LD_INT 81
34552: EQUAL
34553: NOT
34554: PUSH
34555: LD_VAR 0 1
34559: PUSH
34560: LD_EXP 108
34564: IN
34565: NOT
34566: OR
34567: IFFALSE 34571
// exit ;
34569: GO 34893
// index := GetElementIndex ( minersList , unit ) ;
34571: LD_ADDR_VAR 0 6
34575: PUSH
34576: LD_EXP 108
34580: PPUSH
34581: LD_VAR 0 1
34585: PPUSH
34586: CALL 40240 0 2
34590: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34591: LD_ADDR_VAR 0 8
34595: PUSH
34596: LD_EXP 110
34600: PUSH
34601: LD_EXP 109
34605: PUSH
34606: LD_VAR 0 6
34610: ARRAY
34611: MINUS
34612: ST_TO_ADDR
// if not minesFreeAmount then
34613: LD_VAR 0 8
34617: NOT
34618: IFFALSE 34622
// exit ;
34620: GO 34893
// tmp := [ ] ;
34622: LD_ADDR_VAR 0 7
34626: PUSH
34627: EMPTY
34628: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34629: LD_ADDR_VAR 0 5
34633: PUSH
34634: DOUBLE
34635: LD_INT 1
34637: DEC
34638: ST_TO_ADDR
34639: LD_VAR 0 8
34643: PUSH
34644: FOR_TO
34645: IFFALSE 34840
// begin _d := rand ( 0 , 5 ) ;
34647: LD_ADDR_VAR 0 11
34651: PUSH
34652: LD_INT 0
34654: PPUSH
34655: LD_INT 5
34657: PPUSH
34658: CALL_OW 12
34662: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34663: LD_ADDR_VAR 0 12
34667: PUSH
34668: LD_INT 2
34670: PPUSH
34671: LD_INT 6
34673: PPUSH
34674: CALL_OW 12
34678: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34679: LD_ADDR_VAR 0 9
34683: PUSH
34684: LD_VAR 0 2
34688: PPUSH
34689: LD_VAR 0 11
34693: PPUSH
34694: LD_VAR 0 12
34698: PPUSH
34699: CALL_OW 272
34703: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34704: LD_ADDR_VAR 0 10
34708: PUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: LD_VAR 0 11
34718: PPUSH
34719: LD_VAR 0 12
34723: PPUSH
34724: CALL_OW 273
34728: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34729: LD_VAR 0 9
34733: PPUSH
34734: LD_VAR 0 10
34738: PPUSH
34739: CALL_OW 488
34743: PUSH
34744: LD_VAR 0 9
34748: PUSH
34749: LD_VAR 0 10
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_VAR 0 7
34762: IN
34763: NOT
34764: AND
34765: PUSH
34766: LD_VAR 0 9
34770: PPUSH
34771: LD_VAR 0 10
34775: PPUSH
34776: CALL_OW 458
34780: NOT
34781: AND
34782: IFFALSE 34824
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34784: LD_ADDR_VAR 0 7
34788: PUSH
34789: LD_VAR 0 7
34793: PPUSH
34794: LD_VAR 0 7
34798: PUSH
34799: LD_INT 1
34801: PLUS
34802: PPUSH
34803: LD_VAR 0 9
34807: PUSH
34808: LD_VAR 0 10
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PPUSH
34817: CALL_OW 1
34821: ST_TO_ADDR
34822: GO 34838
// i := i - 1 ;
34824: LD_ADDR_VAR 0 5
34828: PUSH
34829: LD_VAR 0 5
34833: PUSH
34834: LD_INT 1
34836: MINUS
34837: ST_TO_ADDR
// end ;
34838: GO 34644
34840: POP
34841: POP
// for i in tmp do
34842: LD_ADDR_VAR 0 5
34846: PUSH
34847: LD_VAR 0 7
34851: PUSH
34852: FOR_IN
34853: IFFALSE 34891
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34855: LD_VAR 0 1
34859: PPUSH
34860: LD_VAR 0 5
34864: PUSH
34865: LD_INT 1
34867: ARRAY
34868: PPUSH
34869: LD_VAR 0 5
34873: PUSH
34874: LD_INT 2
34876: ARRAY
34877: PPUSH
34878: CALL 33837 0 3
34882: NOT
34883: IFFALSE 34889
// exit ;
34885: POP
34886: POP
34887: GO 34893
34889: GO 34852
34891: POP
34892: POP
// end ;
34893: LD_VAR 0 4
34897: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34898: LD_INT 0
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
// if not GetClass ( unit ) = class_sniper then
34907: LD_VAR 0 1
34911: PPUSH
34912: CALL_OW 257
34916: PUSH
34917: LD_INT 5
34919: EQUAL
34920: NOT
34921: IFFALSE 34925
// exit ;
34923: GO 35313
// dist := 8 ;
34925: LD_ADDR_VAR 0 5
34929: PUSH
34930: LD_INT 8
34932: ST_TO_ADDR
// viewRange := 12 ;
34933: LD_ADDR_VAR 0 7
34937: PUSH
34938: LD_INT 12
34940: ST_TO_ADDR
// side := GetSide ( unit ) ;
34941: LD_ADDR_VAR 0 6
34945: PUSH
34946: LD_VAR 0 1
34950: PPUSH
34951: CALL_OW 255
34955: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34956: LD_INT 61
34958: PPUSH
34959: LD_VAR 0 6
34963: PPUSH
34964: CALL_OW 321
34968: PUSH
34969: LD_INT 2
34971: EQUAL
34972: IFFALSE 34982
// viewRange := 16 ;
34974: LD_ADDR_VAR 0 7
34978: PUSH
34979: LD_INT 16
34981: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34982: LD_VAR 0 1
34986: PPUSH
34987: LD_VAR 0 2
34991: PPUSH
34992: LD_VAR 0 3
34996: PPUSH
34997: CALL_OW 297
35001: PUSH
35002: LD_VAR 0 5
35006: GREATER
35007: IFFALSE 35086
// begin ComMoveXY ( unit , x , y ) ;
35009: LD_VAR 0 1
35013: PPUSH
35014: LD_VAR 0 2
35018: PPUSH
35019: LD_VAR 0 3
35023: PPUSH
35024: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35028: LD_INT 35
35030: PPUSH
35031: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35035: LD_VAR 0 1
35039: PPUSH
35040: LD_VAR 0 2
35044: PPUSH
35045: LD_VAR 0 3
35049: PPUSH
35050: CALL 71595 0 3
35054: NOT
35055: IFFALSE 35059
// exit ;
35057: GO 35313
// until GetDistUnitXY ( unit , x , y ) < dist ;
35059: LD_VAR 0 1
35063: PPUSH
35064: LD_VAR 0 2
35068: PPUSH
35069: LD_VAR 0 3
35073: PPUSH
35074: CALL_OW 297
35078: PUSH
35079: LD_VAR 0 5
35083: LESS
35084: IFFALSE 35028
// end ; ComTurnXY ( unit , x , y ) ;
35086: LD_VAR 0 1
35090: PPUSH
35091: LD_VAR 0 2
35095: PPUSH
35096: LD_VAR 0 3
35100: PPUSH
35101: CALL_OW 118
// wait ( 5 ) ;
35105: LD_INT 5
35107: PPUSH
35108: CALL_OW 67
// _d := GetDir ( unit ) ;
35112: LD_ADDR_VAR 0 10
35116: PUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: CALL_OW 254
35126: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35127: LD_ADDR_VAR 0 8
35131: PUSH
35132: LD_VAR 0 1
35136: PPUSH
35137: CALL_OW 250
35141: PPUSH
35142: LD_VAR 0 10
35146: PPUSH
35147: LD_VAR 0 5
35151: PPUSH
35152: CALL_OW 272
35156: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35157: LD_ADDR_VAR 0 9
35161: PUSH
35162: LD_VAR 0 1
35166: PPUSH
35167: CALL_OW 251
35171: PPUSH
35172: LD_VAR 0 10
35176: PPUSH
35177: LD_VAR 0 5
35181: PPUSH
35182: CALL_OW 273
35186: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35187: LD_VAR 0 8
35191: PPUSH
35192: LD_VAR 0 9
35196: PPUSH
35197: CALL_OW 488
35201: NOT
35202: IFFALSE 35206
// exit ;
35204: GO 35313
// ComAnimCustom ( unit , 1 ) ;
35206: LD_VAR 0 1
35210: PPUSH
35211: LD_INT 1
35213: PPUSH
35214: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35218: LD_VAR 0 8
35222: PPUSH
35223: LD_VAR 0 9
35227: PPUSH
35228: LD_VAR 0 6
35232: PPUSH
35233: LD_VAR 0 7
35237: PPUSH
35238: CALL_OW 330
// repeat wait ( 1 ) ;
35242: LD_INT 1
35244: PPUSH
35245: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35249: LD_VAR 0 1
35253: PPUSH
35254: CALL_OW 316
35258: PUSH
35259: LD_VAR 0 1
35263: PPUSH
35264: CALL_OW 314
35268: OR
35269: PUSH
35270: LD_VAR 0 1
35274: PPUSH
35275: CALL_OW 302
35279: NOT
35280: OR
35281: PUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 301
35291: OR
35292: IFFALSE 35242
// RemoveSeeing ( _x , _y , side ) ;
35294: LD_VAR 0 8
35298: PPUSH
35299: LD_VAR 0 9
35303: PPUSH
35304: LD_VAR 0 6
35308: PPUSH
35309: CALL_OW 331
// end ; end_of_file
35313: LD_VAR 0 4
35317: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35318: LD_INT 0
35320: PPUSH
35321: PPUSH
// if exist_mode then
35322: LD_VAR 0 2
35326: IFFALSE 35351
// unit := CreateCharacter ( prefix & ident ) else
35328: LD_ADDR_VAR 0 5
35332: PUSH
35333: LD_VAR 0 3
35337: PUSH
35338: LD_VAR 0 1
35342: STR
35343: PPUSH
35344: CALL_OW 34
35348: ST_TO_ADDR
35349: GO 35366
// unit := NewCharacter ( ident ) ;
35351: LD_ADDR_VAR 0 5
35355: PUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: CALL_OW 25
35365: ST_TO_ADDR
// result := unit ;
35366: LD_ADDR_VAR 0 4
35370: PUSH
35371: LD_VAR 0 5
35375: ST_TO_ADDR
// end ;
35376: LD_VAR 0 4
35380: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35381: LD_INT 0
35383: PPUSH
35384: PPUSH
// if not side or not nation then
35385: LD_VAR 0 1
35389: NOT
35390: PUSH
35391: LD_VAR 0 2
35395: NOT
35396: OR
35397: IFFALSE 35401
// exit ;
35399: GO 36169
// case nation of nation_american :
35401: LD_VAR 0 2
35405: PUSH
35406: LD_INT 1
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35628
35414: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35415: LD_ADDR_VAR 0 4
35419: PUSH
35420: LD_INT 35
35422: PUSH
35423: LD_INT 45
35425: PUSH
35426: LD_INT 46
35428: PUSH
35429: LD_INT 47
35431: PUSH
35432: LD_INT 82
35434: PUSH
35435: LD_INT 83
35437: PUSH
35438: LD_INT 84
35440: PUSH
35441: LD_INT 85
35443: PUSH
35444: LD_INT 86
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: LD_INT 6
35455: PUSH
35456: LD_INT 15
35458: PUSH
35459: LD_INT 16
35461: PUSH
35462: LD_INT 7
35464: PUSH
35465: LD_INT 12
35467: PUSH
35468: LD_INT 13
35470: PUSH
35471: LD_INT 10
35473: PUSH
35474: LD_INT 14
35476: PUSH
35477: LD_INT 20
35479: PUSH
35480: LD_INT 21
35482: PUSH
35483: LD_INT 22
35485: PUSH
35486: LD_INT 25
35488: PUSH
35489: LD_INT 32
35491: PUSH
35492: LD_INT 27
35494: PUSH
35495: LD_INT 36
35497: PUSH
35498: LD_INT 69
35500: PUSH
35501: LD_INT 39
35503: PUSH
35504: LD_INT 34
35506: PUSH
35507: LD_INT 40
35509: PUSH
35510: LD_INT 48
35512: PUSH
35513: LD_INT 49
35515: PUSH
35516: LD_INT 50
35518: PUSH
35519: LD_INT 51
35521: PUSH
35522: LD_INT 52
35524: PUSH
35525: LD_INT 53
35527: PUSH
35528: LD_INT 54
35530: PUSH
35531: LD_INT 55
35533: PUSH
35534: LD_INT 56
35536: PUSH
35537: LD_INT 57
35539: PUSH
35540: LD_INT 58
35542: PUSH
35543: LD_INT 59
35545: PUSH
35546: LD_INT 60
35548: PUSH
35549: LD_INT 61
35551: PUSH
35552: LD_INT 62
35554: PUSH
35555: LD_INT 80
35557: PUSH
35558: LD_INT 82
35560: PUSH
35561: LD_INT 83
35563: PUSH
35564: LD_INT 84
35566: PUSH
35567: LD_INT 85
35569: PUSH
35570: LD_INT 86
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
35626: GO 36093
35628: LD_INT 2
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35636
35634: GO 35862
35636: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35637: LD_ADDR_VAR 0 4
35641: PUSH
35642: LD_INT 35
35644: PUSH
35645: LD_INT 45
35647: PUSH
35648: LD_INT 46
35650: PUSH
35651: LD_INT 47
35653: PUSH
35654: LD_INT 82
35656: PUSH
35657: LD_INT 83
35659: PUSH
35660: LD_INT 84
35662: PUSH
35663: LD_INT 85
35665: PUSH
35666: LD_INT 87
35668: PUSH
35669: LD_INT 70
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: LD_INT 11
35677: PUSH
35678: LD_INT 3
35680: PUSH
35681: LD_INT 4
35683: PUSH
35684: LD_INT 5
35686: PUSH
35687: LD_INT 6
35689: PUSH
35690: LD_INT 15
35692: PUSH
35693: LD_INT 18
35695: PUSH
35696: LD_INT 7
35698: PUSH
35699: LD_INT 17
35701: PUSH
35702: LD_INT 8
35704: PUSH
35705: LD_INT 20
35707: PUSH
35708: LD_INT 21
35710: PUSH
35711: LD_INT 22
35713: PUSH
35714: LD_INT 72
35716: PUSH
35717: LD_INT 26
35719: PUSH
35720: LD_INT 69
35722: PUSH
35723: LD_INT 39
35725: PUSH
35726: LD_INT 40
35728: PUSH
35729: LD_INT 41
35731: PUSH
35732: LD_INT 42
35734: PUSH
35735: LD_INT 43
35737: PUSH
35738: LD_INT 48
35740: PUSH
35741: LD_INT 49
35743: PUSH
35744: LD_INT 50
35746: PUSH
35747: LD_INT 51
35749: PUSH
35750: LD_INT 52
35752: PUSH
35753: LD_INT 53
35755: PUSH
35756: LD_INT 54
35758: PUSH
35759: LD_INT 55
35761: PUSH
35762: LD_INT 56
35764: PUSH
35765: LD_INT 60
35767: PUSH
35768: LD_INT 61
35770: PUSH
35771: LD_INT 62
35773: PUSH
35774: LD_INT 66
35776: PUSH
35777: LD_INT 67
35779: PUSH
35780: LD_INT 68
35782: PUSH
35783: LD_INT 81
35785: PUSH
35786: LD_INT 82
35788: PUSH
35789: LD_INT 83
35791: PUSH
35792: LD_INT 84
35794: PUSH
35795: LD_INT 85
35797: PUSH
35798: LD_INT 87
35800: PUSH
35801: LD_INT 88
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: ST_TO_ADDR
35860: GO 36093
35862: LD_INT 3
35864: DOUBLE
35865: EQUAL
35866: IFTRUE 35870
35868: GO 36092
35870: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35871: LD_ADDR_VAR 0 4
35875: PUSH
35876: LD_INT 46
35878: PUSH
35879: LD_INT 47
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 82
35890: PUSH
35891: LD_INT 83
35893: PUSH
35894: LD_INT 84
35896: PUSH
35897: LD_INT 85
35899: PUSH
35900: LD_INT 86
35902: PUSH
35903: LD_INT 11
35905: PUSH
35906: LD_INT 9
35908: PUSH
35909: LD_INT 20
35911: PUSH
35912: LD_INT 19
35914: PUSH
35915: LD_INT 21
35917: PUSH
35918: LD_INT 24
35920: PUSH
35921: LD_INT 22
35923: PUSH
35924: LD_INT 25
35926: PUSH
35927: LD_INT 28
35929: PUSH
35930: LD_INT 29
35932: PUSH
35933: LD_INT 30
35935: PUSH
35936: LD_INT 31
35938: PUSH
35939: LD_INT 37
35941: PUSH
35942: LD_INT 38
35944: PUSH
35945: LD_INT 32
35947: PUSH
35948: LD_INT 27
35950: PUSH
35951: LD_INT 33
35953: PUSH
35954: LD_INT 69
35956: PUSH
35957: LD_INT 39
35959: PUSH
35960: LD_INT 34
35962: PUSH
35963: LD_INT 40
35965: PUSH
35966: LD_INT 71
35968: PUSH
35969: LD_INT 23
35971: PUSH
35972: LD_INT 44
35974: PUSH
35975: LD_INT 48
35977: PUSH
35978: LD_INT 49
35980: PUSH
35981: LD_INT 50
35983: PUSH
35984: LD_INT 51
35986: PUSH
35987: LD_INT 52
35989: PUSH
35990: LD_INT 53
35992: PUSH
35993: LD_INT 54
35995: PUSH
35996: LD_INT 55
35998: PUSH
35999: LD_INT 56
36001: PUSH
36002: LD_INT 57
36004: PUSH
36005: LD_INT 58
36007: PUSH
36008: LD_INT 59
36010: PUSH
36011: LD_INT 63
36013: PUSH
36014: LD_INT 64
36016: PUSH
36017: LD_INT 65
36019: PUSH
36020: LD_INT 82
36022: PUSH
36023: LD_INT 83
36025: PUSH
36026: LD_INT 84
36028: PUSH
36029: LD_INT 85
36031: PUSH
36032: LD_INT 86
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
36090: GO 36093
36092: POP
// if state > - 1 and state < 3 then
36093: LD_VAR 0 3
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: GREATER
36102: PUSH
36103: LD_VAR 0 3
36107: PUSH
36108: LD_INT 3
36110: LESS
36111: AND
36112: IFFALSE 36169
// for i in result do
36114: LD_ADDR_VAR 0 5
36118: PUSH
36119: LD_VAR 0 4
36123: PUSH
36124: FOR_IN
36125: IFFALSE 36167
// if GetTech ( i , side ) <> state then
36127: LD_VAR 0 5
36131: PPUSH
36132: LD_VAR 0 1
36136: PPUSH
36137: CALL_OW 321
36141: PUSH
36142: LD_VAR 0 3
36146: NONEQUAL
36147: IFFALSE 36165
// result := result diff i ;
36149: LD_ADDR_VAR 0 4
36153: PUSH
36154: LD_VAR 0 4
36158: PUSH
36159: LD_VAR 0 5
36163: DIFF
36164: ST_TO_ADDR
36165: GO 36124
36167: POP
36168: POP
// end ;
36169: LD_VAR 0 4
36173: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36174: LD_INT 0
36176: PPUSH
36177: PPUSH
36178: PPUSH
// result := true ;
36179: LD_ADDR_VAR 0 3
36183: PUSH
36184: LD_INT 1
36186: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36187: LD_ADDR_VAR 0 5
36191: PUSH
36192: LD_VAR 0 2
36196: PPUSH
36197: CALL_OW 480
36201: ST_TO_ADDR
// if not tmp then
36202: LD_VAR 0 5
36206: NOT
36207: IFFALSE 36211
// exit ;
36209: GO 36260
// for i in tmp do
36211: LD_ADDR_VAR 0 4
36215: PUSH
36216: LD_VAR 0 5
36220: PUSH
36221: FOR_IN
36222: IFFALSE 36258
// if GetTech ( i , side ) <> state_researched then
36224: LD_VAR 0 4
36228: PPUSH
36229: LD_VAR 0 1
36233: PPUSH
36234: CALL_OW 321
36238: PUSH
36239: LD_INT 2
36241: NONEQUAL
36242: IFFALSE 36256
// begin result := false ;
36244: LD_ADDR_VAR 0 3
36248: PUSH
36249: LD_INT 0
36251: ST_TO_ADDR
// exit ;
36252: POP
36253: POP
36254: GO 36260
// end ;
36256: GO 36221
36258: POP
36259: POP
// end ;
36260: LD_VAR 0 3
36264: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36265: LD_INT 0
36267: PPUSH
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36280: LD_VAR 0 1
36284: NOT
36285: PUSH
36286: LD_VAR 0 1
36290: PPUSH
36291: CALL_OW 257
36295: PUSH
36296: LD_INT 9
36298: NONEQUAL
36299: OR
36300: IFFALSE 36304
// exit ;
36302: GO 36877
// side := GetSide ( unit ) ;
36304: LD_ADDR_VAR 0 9
36308: PUSH
36309: LD_VAR 0 1
36313: PPUSH
36314: CALL_OW 255
36318: ST_TO_ADDR
// tech_space := tech_spacanom ;
36319: LD_ADDR_VAR 0 12
36323: PUSH
36324: LD_INT 29
36326: ST_TO_ADDR
// tech_time := tech_taurad ;
36327: LD_ADDR_VAR 0 13
36331: PUSH
36332: LD_INT 28
36334: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36335: LD_ADDR_VAR 0 11
36339: PUSH
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 310
36349: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36350: LD_VAR 0 11
36354: PPUSH
36355: CALL_OW 247
36359: PUSH
36360: LD_INT 2
36362: EQUAL
36363: IFFALSE 36367
// exit ;
36365: GO 36877
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36367: LD_ADDR_VAR 0 8
36371: PUSH
36372: LD_INT 81
36374: PUSH
36375: LD_VAR 0 9
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 3
36386: PUSH
36387: LD_INT 21
36389: PUSH
36390: LD_INT 3
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PPUSH
36405: CALL_OW 69
36409: ST_TO_ADDR
// if not tmp then
36410: LD_VAR 0 8
36414: NOT
36415: IFFALSE 36419
// exit ;
36417: GO 36877
// if in_unit then
36419: LD_VAR 0 11
36423: IFFALSE 36447
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36425: LD_ADDR_VAR 0 10
36429: PUSH
36430: LD_VAR 0 8
36434: PPUSH
36435: LD_VAR 0 11
36439: PPUSH
36440: CALL_OW 74
36444: ST_TO_ADDR
36445: GO 36467
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36447: LD_ADDR_VAR 0 10
36451: PUSH
36452: LD_VAR 0 8
36456: PPUSH
36457: LD_VAR 0 1
36461: PPUSH
36462: CALL_OW 74
36466: ST_TO_ADDR
// if not enemy then
36467: LD_VAR 0 10
36471: NOT
36472: IFFALSE 36476
// exit ;
36474: GO 36877
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36476: LD_VAR 0 11
36480: PUSH
36481: LD_VAR 0 11
36485: PPUSH
36486: LD_VAR 0 10
36490: PPUSH
36491: CALL_OW 296
36495: PUSH
36496: LD_INT 13
36498: GREATER
36499: AND
36500: PUSH
36501: LD_VAR 0 1
36505: PPUSH
36506: LD_VAR 0 10
36510: PPUSH
36511: CALL_OW 296
36515: PUSH
36516: LD_INT 12
36518: GREATER
36519: OR
36520: IFFALSE 36524
// exit ;
36522: GO 36877
// missile := [ 1 ] ;
36524: LD_ADDR_VAR 0 14
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36535: LD_VAR 0 9
36539: PPUSH
36540: LD_VAR 0 12
36544: PPUSH
36545: CALL_OW 325
36549: IFFALSE 36578
// missile := Replace ( missile , missile + 1 , 2 ) ;
36551: LD_ADDR_VAR 0 14
36555: PUSH
36556: LD_VAR 0 14
36560: PPUSH
36561: LD_VAR 0 14
36565: PUSH
36566: LD_INT 1
36568: PLUS
36569: PPUSH
36570: LD_INT 2
36572: PPUSH
36573: CALL_OW 1
36577: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36578: LD_VAR 0 9
36582: PPUSH
36583: LD_VAR 0 13
36587: PPUSH
36588: CALL_OW 325
36592: PUSH
36593: LD_VAR 0 10
36597: PPUSH
36598: CALL_OW 255
36602: PPUSH
36603: LD_VAR 0 13
36607: PPUSH
36608: CALL_OW 325
36612: NOT
36613: AND
36614: IFFALSE 36643
// missile := Replace ( missile , missile + 1 , 3 ) ;
36616: LD_ADDR_VAR 0 14
36620: PUSH
36621: LD_VAR 0 14
36625: PPUSH
36626: LD_VAR 0 14
36630: PUSH
36631: LD_INT 1
36633: PLUS
36634: PPUSH
36635: LD_INT 3
36637: PPUSH
36638: CALL_OW 1
36642: ST_TO_ADDR
// if missile < 2 then
36643: LD_VAR 0 14
36647: PUSH
36648: LD_INT 2
36650: LESS
36651: IFFALSE 36655
// exit ;
36653: GO 36877
// x := GetX ( enemy ) ;
36655: LD_ADDR_VAR 0 4
36659: PUSH
36660: LD_VAR 0 10
36664: PPUSH
36665: CALL_OW 250
36669: ST_TO_ADDR
// y := GetY ( enemy ) ;
36670: LD_ADDR_VAR 0 5
36674: PUSH
36675: LD_VAR 0 10
36679: PPUSH
36680: CALL_OW 251
36684: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36685: LD_ADDR_VAR 0 6
36689: PUSH
36690: LD_VAR 0 4
36694: PUSH
36695: LD_INT 1
36697: NEG
36698: PPUSH
36699: LD_INT 1
36701: PPUSH
36702: CALL_OW 12
36706: PLUS
36707: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36708: LD_ADDR_VAR 0 7
36712: PUSH
36713: LD_VAR 0 5
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PPUSH
36722: LD_INT 1
36724: PPUSH
36725: CALL_OW 12
36729: PLUS
36730: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36731: LD_VAR 0 6
36735: PPUSH
36736: LD_VAR 0 7
36740: PPUSH
36741: CALL_OW 488
36745: NOT
36746: IFFALSE 36768
// begin _x := x ;
36748: LD_ADDR_VAR 0 6
36752: PUSH
36753: LD_VAR 0 4
36757: ST_TO_ADDR
// _y := y ;
36758: LD_ADDR_VAR 0 7
36762: PUSH
36763: LD_VAR 0 5
36767: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36768: LD_ADDR_VAR 0 3
36772: PUSH
36773: LD_INT 1
36775: PPUSH
36776: LD_VAR 0 14
36780: PPUSH
36781: CALL_OW 12
36785: ST_TO_ADDR
// case i of 1 :
36786: LD_VAR 0 3
36790: PUSH
36791: LD_INT 1
36793: DOUBLE
36794: EQUAL
36795: IFTRUE 36799
36797: GO 36816
36799: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36800: LD_VAR 0 1
36804: PPUSH
36805: LD_VAR 0 10
36809: PPUSH
36810: CALL_OW 115
36814: GO 36877
36816: LD_INT 2
36818: DOUBLE
36819: EQUAL
36820: IFTRUE 36824
36822: GO 36846
36824: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36825: LD_VAR 0 1
36829: PPUSH
36830: LD_VAR 0 6
36834: PPUSH
36835: LD_VAR 0 7
36839: PPUSH
36840: CALL_OW 153
36844: GO 36877
36846: LD_INT 3
36848: DOUBLE
36849: EQUAL
36850: IFTRUE 36854
36852: GO 36876
36854: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36855: LD_VAR 0 1
36859: PPUSH
36860: LD_VAR 0 6
36864: PPUSH
36865: LD_VAR 0 7
36869: PPUSH
36870: CALL_OW 154
36874: GO 36877
36876: POP
// end ;
36877: LD_VAR 0 2
36881: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36882: LD_INT 0
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
// if not unit or not building then
36890: LD_VAR 0 1
36894: NOT
36895: PUSH
36896: LD_VAR 0 2
36900: NOT
36901: OR
36902: IFFALSE 36906
// exit ;
36904: GO 37064
// x := GetX ( building ) ;
36906: LD_ADDR_VAR 0 5
36910: PUSH
36911: LD_VAR 0 2
36915: PPUSH
36916: CALL_OW 250
36920: ST_TO_ADDR
// y := GetY ( building ) ;
36921: LD_ADDR_VAR 0 6
36925: PUSH
36926: LD_VAR 0 2
36930: PPUSH
36931: CALL_OW 251
36935: ST_TO_ADDR
// for i = 0 to 5 do
36936: LD_ADDR_VAR 0 4
36940: PUSH
36941: DOUBLE
36942: LD_INT 0
36944: DEC
36945: ST_TO_ADDR
36946: LD_INT 5
36948: PUSH
36949: FOR_TO
36950: IFFALSE 37062
// begin _x := ShiftX ( x , i , 3 ) ;
36952: LD_ADDR_VAR 0 7
36956: PUSH
36957: LD_VAR 0 5
36961: PPUSH
36962: LD_VAR 0 4
36966: PPUSH
36967: LD_INT 3
36969: PPUSH
36970: CALL_OW 272
36974: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36975: LD_ADDR_VAR 0 8
36979: PUSH
36980: LD_VAR 0 6
36984: PPUSH
36985: LD_VAR 0 4
36989: PPUSH
36990: LD_INT 3
36992: PPUSH
36993: CALL_OW 273
36997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36998: LD_VAR 0 7
37002: PPUSH
37003: LD_VAR 0 8
37007: PPUSH
37008: CALL_OW 488
37012: NOT
37013: IFFALSE 37017
// continue ;
37015: GO 36949
// if HexInfo ( _x , _y ) = 0 then
37017: LD_VAR 0 7
37021: PPUSH
37022: LD_VAR 0 8
37026: PPUSH
37027: CALL_OW 428
37031: PUSH
37032: LD_INT 0
37034: EQUAL
37035: IFFALSE 37060
// begin ComMoveXY ( unit , _x , _y ) ;
37037: LD_VAR 0 1
37041: PPUSH
37042: LD_VAR 0 7
37046: PPUSH
37047: LD_VAR 0 8
37051: PPUSH
37052: CALL_OW 111
// exit ;
37056: POP
37057: POP
37058: GO 37064
// end ; end ;
37060: GO 36949
37062: POP
37063: POP
// end ;
37064: LD_VAR 0 3
37068: RET
// export function ScanBase ( side , base_area ) ; begin
37069: LD_INT 0
37071: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37072: LD_ADDR_VAR 0 3
37076: PUSH
37077: LD_VAR 0 2
37081: PPUSH
37082: LD_INT 81
37084: PUSH
37085: LD_VAR 0 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PPUSH
37094: CALL_OW 70
37098: ST_TO_ADDR
// end ;
37099: LD_VAR 0 3
37103: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37104: LD_INT 0
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
// result := false ;
37110: LD_ADDR_VAR 0 2
37114: PUSH
37115: LD_INT 0
37117: ST_TO_ADDR
// side := GetSide ( unit ) ;
37118: LD_ADDR_VAR 0 3
37122: PUSH
37123: LD_VAR 0 1
37127: PPUSH
37128: CALL_OW 255
37132: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37133: LD_ADDR_VAR 0 4
37137: PUSH
37138: LD_VAR 0 1
37142: PPUSH
37143: CALL_OW 248
37147: ST_TO_ADDR
// case nat of 1 :
37148: LD_VAR 0 4
37152: PUSH
37153: LD_INT 1
37155: DOUBLE
37156: EQUAL
37157: IFTRUE 37161
37159: GO 37172
37161: POP
// tech := tech_lassight ; 2 :
37162: LD_ADDR_VAR 0 5
37166: PUSH
37167: LD_INT 12
37169: ST_TO_ADDR
37170: GO 37211
37172: LD_INT 2
37174: DOUBLE
37175: EQUAL
37176: IFTRUE 37180
37178: GO 37191
37180: POP
// tech := tech_mortar ; 3 :
37181: LD_ADDR_VAR 0 5
37185: PUSH
37186: LD_INT 41
37188: ST_TO_ADDR
37189: GO 37211
37191: LD_INT 3
37193: DOUBLE
37194: EQUAL
37195: IFTRUE 37199
37197: GO 37210
37199: POP
// tech := tech_bazooka ; end ;
37200: LD_ADDR_VAR 0 5
37204: PUSH
37205: LD_INT 44
37207: ST_TO_ADDR
37208: GO 37211
37210: POP
// if Researched ( side , tech ) then
37211: LD_VAR 0 3
37215: PPUSH
37216: LD_VAR 0 5
37220: PPUSH
37221: CALL_OW 325
37225: IFFALSE 37252
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37227: LD_ADDR_VAR 0 2
37231: PUSH
37232: LD_INT 5
37234: PUSH
37235: LD_INT 8
37237: PUSH
37238: LD_INT 9
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: PUSH
37246: LD_VAR 0 4
37250: ARRAY
37251: ST_TO_ADDR
// end ;
37252: LD_VAR 0 2
37256: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37257: LD_INT 0
37259: PPUSH
37260: PPUSH
37261: PPUSH
// if not mines then
37262: LD_VAR 0 2
37266: NOT
37267: IFFALSE 37271
// exit ;
37269: GO 37415
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37271: LD_ADDR_VAR 0 5
37275: PUSH
37276: LD_INT 81
37278: PUSH
37279: LD_VAR 0 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: LD_INT 21
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PPUSH
37309: CALL_OW 69
37313: ST_TO_ADDR
// for i in mines do
37314: LD_ADDR_VAR 0 4
37318: PUSH
37319: LD_VAR 0 2
37323: PUSH
37324: FOR_IN
37325: IFFALSE 37413
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37327: LD_VAR 0 4
37331: PUSH
37332: LD_INT 1
37334: ARRAY
37335: PPUSH
37336: LD_VAR 0 4
37340: PUSH
37341: LD_INT 2
37343: ARRAY
37344: PPUSH
37345: CALL_OW 458
37349: NOT
37350: IFFALSE 37354
// continue ;
37352: GO 37324
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37354: LD_VAR 0 4
37358: PUSH
37359: LD_INT 1
37361: ARRAY
37362: PPUSH
37363: LD_VAR 0 4
37367: PUSH
37368: LD_INT 2
37370: ARRAY
37371: PPUSH
37372: CALL_OW 428
37376: PUSH
37377: LD_VAR 0 5
37381: IN
37382: IFFALSE 37411
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37384: LD_VAR 0 4
37388: PUSH
37389: LD_INT 1
37391: ARRAY
37392: PPUSH
37393: LD_VAR 0 4
37397: PUSH
37398: LD_INT 2
37400: ARRAY
37401: PPUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 456
// end ;
37411: GO 37324
37413: POP
37414: POP
// end ;
37415: LD_VAR 0 3
37419: RET
// export function Count ( array ) ; var i ; begin
37420: LD_INT 0
37422: PPUSH
37423: PPUSH
// result := 0 ;
37424: LD_ADDR_VAR 0 2
37428: PUSH
37429: LD_INT 0
37431: ST_TO_ADDR
// for i in array do
37432: LD_ADDR_VAR 0 3
37436: PUSH
37437: LD_VAR 0 1
37441: PUSH
37442: FOR_IN
37443: IFFALSE 37467
// if i then
37445: LD_VAR 0 3
37449: IFFALSE 37465
// result := result + 1 ;
37451: LD_ADDR_VAR 0 2
37455: PUSH
37456: LD_VAR 0 2
37460: PUSH
37461: LD_INT 1
37463: PLUS
37464: ST_TO_ADDR
37465: GO 37442
37467: POP
37468: POP
// end ;
37469: LD_VAR 0 2
37473: RET
// export function IsEmpty ( building ) ; begin
37474: LD_INT 0
37476: PPUSH
// if not building then
37477: LD_VAR 0 1
37481: NOT
37482: IFFALSE 37486
// exit ;
37484: GO 37529
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37486: LD_ADDR_VAR 0 2
37490: PUSH
37491: LD_VAR 0 1
37495: PUSH
37496: LD_INT 22
37498: PUSH
37499: LD_VAR 0 1
37503: PPUSH
37504: CALL_OW 255
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 58
37515: PUSH
37516: EMPTY
37517: LIST
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PPUSH
37523: CALL_OW 69
37527: IN
37528: ST_TO_ADDR
// end ;
37529: LD_VAR 0 2
37533: RET
// export function IsNotFull ( building ) ; var places ; begin
37534: LD_INT 0
37536: PPUSH
37537: PPUSH
// if not building then
37538: LD_VAR 0 1
37542: NOT
37543: IFFALSE 37547
// exit ;
37545: GO 37718
// result := false ;
37547: LD_ADDR_VAR 0 2
37551: PUSH
37552: LD_INT 0
37554: ST_TO_ADDR
// places := 0 ;
37555: LD_ADDR_VAR 0 3
37559: PUSH
37560: LD_INT 0
37562: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 266
37572: PUSH
37573: LD_INT 0
37575: DOUBLE
37576: EQUAL
37577: IFTRUE 37635
37579: LD_INT 1
37581: DOUBLE
37582: EQUAL
37583: IFTRUE 37635
37585: LD_INT 6
37587: DOUBLE
37588: EQUAL
37589: IFTRUE 37635
37591: LD_INT 7
37593: DOUBLE
37594: EQUAL
37595: IFTRUE 37635
37597: LD_INT 8
37599: DOUBLE
37600: EQUAL
37601: IFTRUE 37635
37603: LD_INT 4
37605: DOUBLE
37606: EQUAL
37607: IFTRUE 37635
37609: LD_INT 5
37611: DOUBLE
37612: EQUAL
37613: IFTRUE 37635
37615: LD_INT 2
37617: DOUBLE
37618: EQUAL
37619: IFTRUE 37635
37621: LD_INT 3
37623: DOUBLE
37624: EQUAL
37625: IFTRUE 37635
37627: LD_INT 35
37629: DOUBLE
37630: EQUAL
37631: IFTRUE 37635
37633: GO 37646
37635: POP
// places := 6 ; b_bunker , b_breastwork :
37636: LD_ADDR_VAR 0 3
37640: PUSH
37641: LD_INT 6
37643: ST_TO_ADDR
37644: GO 37691
37646: LD_INT 32
37648: DOUBLE
37649: EQUAL
37650: IFTRUE 37660
37652: LD_INT 31
37654: DOUBLE
37655: EQUAL
37656: IFTRUE 37660
37658: GO 37671
37660: POP
// places := 1 ; b_control_tower :
37661: LD_ADDR_VAR 0 3
37665: PUSH
37666: LD_INT 1
37668: ST_TO_ADDR
37669: GO 37691
37671: LD_INT 36
37673: DOUBLE
37674: EQUAL
37675: IFTRUE 37679
37677: GO 37690
37679: POP
// places := 3 ; end ;
37680: LD_ADDR_VAR 0 3
37684: PUSH
37685: LD_INT 3
37687: ST_TO_ADDR
37688: GO 37691
37690: POP
// if places then
37691: LD_VAR 0 3
37695: IFFALSE 37718
// result := UnitsInside ( building ) < places ;
37697: LD_ADDR_VAR 0 2
37701: PUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL_OW 313
37711: PUSH
37712: LD_VAR 0 3
37716: LESS
37717: ST_TO_ADDR
// end ;
37718: LD_VAR 0 2
37722: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37723: LD_INT 0
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
// tmp := [ ] ;
37729: LD_ADDR_VAR 0 3
37733: PUSH
37734: EMPTY
37735: ST_TO_ADDR
// list := [ ] ;
37736: LD_ADDR_VAR 0 5
37740: PUSH
37741: EMPTY
37742: ST_TO_ADDR
// for i = 16 to 25 do
37743: LD_ADDR_VAR 0 4
37747: PUSH
37748: DOUBLE
37749: LD_INT 16
37751: DEC
37752: ST_TO_ADDR
37753: LD_INT 25
37755: PUSH
37756: FOR_TO
37757: IFFALSE 37830
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37759: LD_ADDR_VAR 0 3
37763: PUSH
37764: LD_VAR 0 3
37768: PUSH
37769: LD_INT 22
37771: PUSH
37772: LD_VAR 0 1
37776: PPUSH
37777: CALL_OW 255
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 91
37788: PUSH
37789: LD_VAR 0 1
37793: PUSH
37794: LD_INT 6
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 30
37804: PUSH
37805: LD_VAR 0 4
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: PUSH
37819: EMPTY
37820: LIST
37821: PPUSH
37822: CALL_OW 69
37826: ADD
37827: ST_TO_ADDR
37828: GO 37756
37830: POP
37831: POP
// for i = 1 to tmp do
37832: LD_ADDR_VAR 0 4
37836: PUSH
37837: DOUBLE
37838: LD_INT 1
37840: DEC
37841: ST_TO_ADDR
37842: LD_VAR 0 3
37846: PUSH
37847: FOR_TO
37848: IFFALSE 37936
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37850: LD_ADDR_VAR 0 5
37854: PUSH
37855: LD_VAR 0 5
37859: PUSH
37860: LD_VAR 0 3
37864: PUSH
37865: LD_VAR 0 4
37869: ARRAY
37870: PPUSH
37871: CALL_OW 266
37875: PUSH
37876: LD_VAR 0 3
37880: PUSH
37881: LD_VAR 0 4
37885: ARRAY
37886: PPUSH
37887: CALL_OW 250
37891: PUSH
37892: LD_VAR 0 3
37896: PUSH
37897: LD_VAR 0 4
37901: ARRAY
37902: PPUSH
37903: CALL_OW 251
37907: PUSH
37908: LD_VAR 0 3
37912: PUSH
37913: LD_VAR 0 4
37917: ARRAY
37918: PPUSH
37919: CALL_OW 254
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: PUSH
37930: EMPTY
37931: LIST
37932: ADD
37933: ST_TO_ADDR
37934: GO 37847
37936: POP
37937: POP
// result := list ;
37938: LD_ADDR_VAR 0 2
37942: PUSH
37943: LD_VAR 0 5
37947: ST_TO_ADDR
// end ;
37948: LD_VAR 0 2
37952: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37953: LD_INT 0
37955: PPUSH
37956: PPUSH
37957: PPUSH
37958: PPUSH
37959: PPUSH
37960: PPUSH
37961: PPUSH
// if not factory then
37962: LD_VAR 0 1
37966: NOT
37967: IFFALSE 37971
// exit ;
37969: GO 38564
// if control = control_apeman then
37971: LD_VAR 0 4
37975: PUSH
37976: LD_INT 5
37978: EQUAL
37979: IFFALSE 38088
// begin tmp := UnitsInside ( factory ) ;
37981: LD_ADDR_VAR 0 8
37985: PUSH
37986: LD_VAR 0 1
37990: PPUSH
37991: CALL_OW 313
37995: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37996: LD_VAR 0 8
38000: PPUSH
38001: LD_INT 25
38003: PUSH
38004: LD_INT 12
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PPUSH
38011: CALL_OW 72
38015: NOT
38016: IFFALSE 38026
// control := control_manual ;
38018: LD_ADDR_VAR 0 4
38022: PUSH
38023: LD_INT 1
38025: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38026: LD_ADDR_VAR 0 8
38030: PUSH
38031: LD_VAR 0 1
38035: PPUSH
38036: CALL 37723 0 1
38040: ST_TO_ADDR
// if tmp then
38041: LD_VAR 0 8
38045: IFFALSE 38088
// begin for i in tmp do
38047: LD_ADDR_VAR 0 7
38051: PUSH
38052: LD_VAR 0 8
38056: PUSH
38057: FOR_IN
38058: IFFALSE 38086
// if i [ 1 ] = b_ext_radio then
38060: LD_VAR 0 7
38064: PUSH
38065: LD_INT 1
38067: ARRAY
38068: PUSH
38069: LD_INT 22
38071: EQUAL
38072: IFFALSE 38084
// begin control := control_remote ;
38074: LD_ADDR_VAR 0 4
38078: PUSH
38079: LD_INT 2
38081: ST_TO_ADDR
// break ;
38082: GO 38086
// end ;
38084: GO 38057
38086: POP
38087: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38088: LD_VAR 0 1
38092: PPUSH
38093: LD_VAR 0 2
38097: PPUSH
38098: LD_VAR 0 3
38102: PPUSH
38103: LD_VAR 0 4
38107: PPUSH
38108: LD_VAR 0 5
38112: PPUSH
38113: CALL_OW 448
38117: IFFALSE 38152
// begin result := [ chassis , engine , control , weapon ] ;
38119: LD_ADDR_VAR 0 6
38123: PUSH
38124: LD_VAR 0 2
38128: PUSH
38129: LD_VAR 0 3
38133: PUSH
38134: LD_VAR 0 4
38138: PUSH
38139: LD_VAR 0 5
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: ST_TO_ADDR
// exit ;
38150: GO 38564
// end ; _chassis := AvailableChassisList ( factory ) ;
38152: LD_ADDR_VAR 0 9
38156: PUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL_OW 475
38166: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38167: LD_ADDR_VAR 0 11
38171: PUSH
38172: LD_VAR 0 1
38176: PPUSH
38177: CALL_OW 476
38181: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38182: LD_ADDR_VAR 0 12
38186: PUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 477
38196: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38197: LD_ADDR_VAR 0 10
38201: PUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 478
38211: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38212: LD_VAR 0 9
38216: NOT
38217: PUSH
38218: LD_VAR 0 11
38222: NOT
38223: OR
38224: PUSH
38225: LD_VAR 0 12
38229: NOT
38230: OR
38231: PUSH
38232: LD_VAR 0 10
38236: NOT
38237: OR
38238: IFFALSE 38273
// begin result := [ chassis , engine , control , weapon ] ;
38240: LD_ADDR_VAR 0 6
38244: PUSH
38245: LD_VAR 0 2
38249: PUSH
38250: LD_VAR 0 3
38254: PUSH
38255: LD_VAR 0 4
38259: PUSH
38260: LD_VAR 0 5
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// exit ;
38271: GO 38564
// end ; if not chassis in _chassis then
38273: LD_VAR 0 2
38277: PUSH
38278: LD_VAR 0 9
38282: IN
38283: NOT
38284: IFFALSE 38310
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38286: LD_ADDR_VAR 0 2
38290: PUSH
38291: LD_VAR 0 9
38295: PUSH
38296: LD_INT 1
38298: PPUSH
38299: LD_VAR 0 9
38303: PPUSH
38304: CALL_OW 12
38308: ARRAY
38309: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38310: LD_VAR 0 2
38314: PPUSH
38315: LD_VAR 0 3
38319: PPUSH
38320: CALL 38569 0 2
38324: NOT
38325: IFFALSE 38384
// repeat engine := _engine [ 1 ] ;
38327: LD_ADDR_VAR 0 3
38331: PUSH
38332: LD_VAR 0 11
38336: PUSH
38337: LD_INT 1
38339: ARRAY
38340: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38341: LD_ADDR_VAR 0 11
38345: PUSH
38346: LD_VAR 0 11
38350: PPUSH
38351: LD_INT 1
38353: PPUSH
38354: CALL_OW 3
38358: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38359: LD_VAR 0 2
38363: PPUSH
38364: LD_VAR 0 3
38368: PPUSH
38369: CALL 38569 0 2
38373: PUSH
38374: LD_VAR 0 11
38378: PUSH
38379: EMPTY
38380: EQUAL
38381: OR
38382: IFFALSE 38327
// if not control in _control then
38384: LD_VAR 0 4
38388: PUSH
38389: LD_VAR 0 12
38393: IN
38394: NOT
38395: IFFALSE 38421
// control := _control [ rand ( 1 , _control ) ] ;
38397: LD_ADDR_VAR 0 4
38401: PUSH
38402: LD_VAR 0 12
38406: PUSH
38407: LD_INT 1
38409: PPUSH
38410: LD_VAR 0 12
38414: PPUSH
38415: CALL_OW 12
38419: ARRAY
38420: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38421: LD_VAR 0 2
38425: PPUSH
38426: LD_VAR 0 5
38430: PPUSH
38431: CALL 38789 0 2
38435: NOT
38436: IFFALSE 38495
// repeat weapon := _weapon [ 1 ] ;
38438: LD_ADDR_VAR 0 5
38442: PUSH
38443: LD_VAR 0 10
38447: PUSH
38448: LD_INT 1
38450: ARRAY
38451: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38452: LD_ADDR_VAR 0 10
38456: PUSH
38457: LD_VAR 0 10
38461: PPUSH
38462: LD_INT 1
38464: PPUSH
38465: CALL_OW 3
38469: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_VAR 0 5
38479: PPUSH
38480: CALL 38789 0 2
38484: PUSH
38485: LD_VAR 0 10
38489: PUSH
38490: EMPTY
38491: EQUAL
38492: OR
38493: IFFALSE 38438
// result := [ ] ;
38495: LD_ADDR_VAR 0 6
38499: PUSH
38500: EMPTY
38501: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38502: LD_VAR 0 1
38506: PPUSH
38507: LD_VAR 0 2
38511: PPUSH
38512: LD_VAR 0 3
38516: PPUSH
38517: LD_VAR 0 4
38521: PPUSH
38522: LD_VAR 0 5
38526: PPUSH
38527: CALL_OW 448
38531: IFFALSE 38564
// result := [ chassis , engine , control , weapon ] ;
38533: LD_ADDR_VAR 0 6
38537: PUSH
38538: LD_VAR 0 2
38542: PUSH
38543: LD_VAR 0 3
38547: PUSH
38548: LD_VAR 0 4
38552: PUSH
38553: LD_VAR 0 5
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// end ;
38564: LD_VAR 0 6
38568: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38569: LD_INT 0
38571: PPUSH
// if not chassis or not engine then
38572: LD_VAR 0 1
38576: NOT
38577: PUSH
38578: LD_VAR 0 2
38582: NOT
38583: OR
38584: IFFALSE 38588
// exit ;
38586: GO 38784
// case engine of engine_solar :
38588: LD_VAR 0 2
38592: PUSH
38593: LD_INT 2
38595: DOUBLE
38596: EQUAL
38597: IFTRUE 38601
38599: GO 38639
38601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38602: LD_ADDR_VAR 0 3
38606: PUSH
38607: LD_INT 11
38609: PUSH
38610: LD_INT 12
38612: PUSH
38613: LD_INT 13
38615: PUSH
38616: LD_INT 14
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: LD_INT 3
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: ST_TO_ADDR
38637: GO 38768
38639: LD_INT 1
38641: DOUBLE
38642: EQUAL
38643: IFTRUE 38647
38645: GO 38709
38647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38648: LD_ADDR_VAR 0 3
38652: PUSH
38653: LD_INT 11
38655: PUSH
38656: LD_INT 12
38658: PUSH
38659: LD_INT 13
38661: PUSH
38662: LD_INT 14
38664: PUSH
38665: LD_INT 1
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: LD_INT 4
38676: PUSH
38677: LD_INT 5
38679: PUSH
38680: LD_INT 21
38682: PUSH
38683: LD_INT 23
38685: PUSH
38686: LD_INT 22
38688: PUSH
38689: LD_INT 24
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
38707: GO 38768
38709: LD_INT 3
38711: DOUBLE
38712: EQUAL
38713: IFTRUE 38717
38715: GO 38767
38717: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38718: LD_ADDR_VAR 0 3
38722: PUSH
38723: LD_INT 13
38725: PUSH
38726: LD_INT 14
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 3
38734: PUSH
38735: LD_INT 4
38737: PUSH
38738: LD_INT 5
38740: PUSH
38741: LD_INT 21
38743: PUSH
38744: LD_INT 22
38746: PUSH
38747: LD_INT 23
38749: PUSH
38750: LD_INT 24
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
38765: GO 38768
38767: POP
// result := ( chassis in result ) ;
38768: LD_ADDR_VAR 0 3
38772: PUSH
38773: LD_VAR 0 1
38777: PUSH
38778: LD_VAR 0 3
38782: IN
38783: ST_TO_ADDR
// end ;
38784: LD_VAR 0 3
38788: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38789: LD_INT 0
38791: PPUSH
// if not chassis or not weapon then
38792: LD_VAR 0 1
38796: NOT
38797: PUSH
38798: LD_VAR 0 2
38802: NOT
38803: OR
38804: IFFALSE 38808
// exit ;
38806: GO 39868
// case weapon of us_machine_gun :
38808: LD_VAR 0 2
38812: PUSH
38813: LD_INT 2
38815: DOUBLE
38816: EQUAL
38817: IFTRUE 38821
38819: GO 38851
38821: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38822: LD_ADDR_VAR 0 3
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: LD_INT 4
38838: PUSH
38839: LD_INT 5
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: ST_TO_ADDR
38849: GO 39852
38851: LD_INT 3
38853: DOUBLE
38854: EQUAL
38855: IFTRUE 38859
38857: GO 38889
38859: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38860: LD_ADDR_VAR 0 3
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: LD_INT 4
38876: PUSH
38877: LD_INT 5
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
38887: GO 39852
38889: LD_INT 11
38891: DOUBLE
38892: EQUAL
38893: IFTRUE 38897
38895: GO 38927
38897: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38898: LD_ADDR_VAR 0 3
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 3
38911: PUSH
38912: LD_INT 4
38914: PUSH
38915: LD_INT 5
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: ST_TO_ADDR
38925: GO 39852
38927: LD_INT 4
38929: DOUBLE
38930: EQUAL
38931: IFTRUE 38935
38933: GO 38961
38935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38936: LD_ADDR_VAR 0 3
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: LD_INT 3
38946: PUSH
38947: LD_INT 4
38949: PUSH
38950: LD_INT 5
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: ST_TO_ADDR
38959: GO 39852
38961: LD_INT 5
38963: DOUBLE
38964: EQUAL
38965: IFTRUE 38969
38967: GO 38995
38969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38970: LD_ADDR_VAR 0 3
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: LD_INT 4
38983: PUSH
38984: LD_INT 5
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
38993: GO 39852
38995: LD_INT 9
38997: DOUBLE
38998: EQUAL
38999: IFTRUE 39003
39001: GO 39029
39003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39004: LD_ADDR_VAR 0 3
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: LD_INT 4
39017: PUSH
39018: LD_INT 5
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: ST_TO_ADDR
39027: GO 39852
39029: LD_INT 7
39031: DOUBLE
39032: EQUAL
39033: IFTRUE 39037
39035: GO 39063
39037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39038: LD_ADDR_VAR 0 3
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: LD_INT 4
39051: PUSH
39052: LD_INT 5
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: ST_TO_ADDR
39061: GO 39852
39063: LD_INT 12
39065: DOUBLE
39066: EQUAL
39067: IFTRUE 39071
39069: GO 39097
39071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39072: LD_ADDR_VAR 0 3
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: LD_INT 4
39085: PUSH
39086: LD_INT 5
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: ST_TO_ADDR
39095: GO 39852
39097: LD_INT 13
39099: DOUBLE
39100: EQUAL
39101: IFTRUE 39105
39103: GO 39131
39105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39106: LD_ADDR_VAR 0 3
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: LD_INT 4
39119: PUSH
39120: LD_INT 5
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: ST_TO_ADDR
39129: GO 39852
39131: LD_INT 14
39133: DOUBLE
39134: EQUAL
39135: IFTRUE 39139
39137: GO 39157
39139: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39140: LD_ADDR_VAR 0 3
39144: PUSH
39145: LD_INT 4
39147: PUSH
39148: LD_INT 5
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: ST_TO_ADDR
39155: GO 39852
39157: LD_INT 6
39159: DOUBLE
39160: EQUAL
39161: IFTRUE 39165
39163: GO 39183
39165: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39166: LD_ADDR_VAR 0 3
39170: PUSH
39171: LD_INT 4
39173: PUSH
39174: LD_INT 5
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: ST_TO_ADDR
39181: GO 39852
39183: LD_INT 10
39185: DOUBLE
39186: EQUAL
39187: IFTRUE 39191
39189: GO 39209
39191: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39192: LD_ADDR_VAR 0 3
39196: PUSH
39197: LD_INT 4
39199: PUSH
39200: LD_INT 5
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: ST_TO_ADDR
39207: GO 39852
39209: LD_INT 22
39211: DOUBLE
39212: EQUAL
39213: IFTRUE 39217
39215: GO 39243
39217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39218: LD_ADDR_VAR 0 3
39222: PUSH
39223: LD_INT 11
39225: PUSH
39226: LD_INT 12
39228: PUSH
39229: LD_INT 13
39231: PUSH
39232: LD_INT 14
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: ST_TO_ADDR
39241: GO 39852
39243: LD_INT 23
39245: DOUBLE
39246: EQUAL
39247: IFTRUE 39251
39249: GO 39277
39251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: LD_INT 11
39259: PUSH
39260: LD_INT 12
39262: PUSH
39263: LD_INT 13
39265: PUSH
39266: LD_INT 14
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: ST_TO_ADDR
39275: GO 39852
39277: LD_INT 24
39279: DOUBLE
39280: EQUAL
39281: IFTRUE 39285
39283: GO 39311
39285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39286: LD_ADDR_VAR 0 3
39290: PUSH
39291: LD_INT 11
39293: PUSH
39294: LD_INT 12
39296: PUSH
39297: LD_INT 13
39299: PUSH
39300: LD_INT 14
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: ST_TO_ADDR
39309: GO 39852
39311: LD_INT 30
39313: DOUBLE
39314: EQUAL
39315: IFTRUE 39319
39317: GO 39345
39319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39320: LD_ADDR_VAR 0 3
39324: PUSH
39325: LD_INT 11
39327: PUSH
39328: LD_INT 12
39330: PUSH
39331: LD_INT 13
39333: PUSH
39334: LD_INT 14
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
39343: GO 39852
39345: LD_INT 25
39347: DOUBLE
39348: EQUAL
39349: IFTRUE 39353
39351: GO 39371
39353: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39354: LD_ADDR_VAR 0 3
39358: PUSH
39359: LD_INT 13
39361: PUSH
39362: LD_INT 14
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: ST_TO_ADDR
39369: GO 39852
39371: LD_INT 27
39373: DOUBLE
39374: EQUAL
39375: IFTRUE 39379
39377: GO 39397
39379: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39380: LD_ADDR_VAR 0 3
39384: PUSH
39385: LD_INT 13
39387: PUSH
39388: LD_INT 14
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: ST_TO_ADDR
39395: GO 39852
39397: LD_INT 92
39399: DOUBLE
39400: EQUAL
39401: IFTRUE 39405
39403: GO 39431
39405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: LD_INT 11
39413: PUSH
39414: LD_INT 12
39416: PUSH
39417: LD_INT 13
39419: PUSH
39420: LD_INT 14
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
39429: GO 39852
39431: LD_INT 28
39433: DOUBLE
39434: EQUAL
39435: IFTRUE 39439
39437: GO 39457
39439: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39440: LD_ADDR_VAR 0 3
39444: PUSH
39445: LD_INT 13
39447: PUSH
39448: LD_INT 14
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: ST_TO_ADDR
39455: GO 39852
39457: LD_INT 29
39459: DOUBLE
39460: EQUAL
39461: IFTRUE 39465
39463: GO 39483
39465: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39466: LD_ADDR_VAR 0 3
39470: PUSH
39471: LD_INT 13
39473: PUSH
39474: LD_INT 14
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: ST_TO_ADDR
39481: GO 39852
39483: LD_INT 31
39485: DOUBLE
39486: EQUAL
39487: IFTRUE 39491
39489: GO 39509
39491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39492: LD_ADDR_VAR 0 3
39496: PUSH
39497: LD_INT 13
39499: PUSH
39500: LD_INT 14
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: ST_TO_ADDR
39507: GO 39852
39509: LD_INT 26
39511: DOUBLE
39512: EQUAL
39513: IFTRUE 39517
39515: GO 39535
39517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39518: LD_ADDR_VAR 0 3
39522: PUSH
39523: LD_INT 13
39525: PUSH
39526: LD_INT 14
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: ST_TO_ADDR
39533: GO 39852
39535: LD_INT 42
39537: DOUBLE
39538: EQUAL
39539: IFTRUE 39543
39541: GO 39569
39543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39544: LD_ADDR_VAR 0 3
39548: PUSH
39549: LD_INT 21
39551: PUSH
39552: LD_INT 22
39554: PUSH
39555: LD_INT 23
39557: PUSH
39558: LD_INT 24
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: ST_TO_ADDR
39567: GO 39852
39569: LD_INT 43
39571: DOUBLE
39572: EQUAL
39573: IFTRUE 39577
39575: GO 39603
39577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39578: LD_ADDR_VAR 0 3
39582: PUSH
39583: LD_INT 21
39585: PUSH
39586: LD_INT 22
39588: PUSH
39589: LD_INT 23
39591: PUSH
39592: LD_INT 24
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: ST_TO_ADDR
39601: GO 39852
39603: LD_INT 44
39605: DOUBLE
39606: EQUAL
39607: IFTRUE 39611
39609: GO 39637
39611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39612: LD_ADDR_VAR 0 3
39616: PUSH
39617: LD_INT 21
39619: PUSH
39620: LD_INT 22
39622: PUSH
39623: LD_INT 23
39625: PUSH
39626: LD_INT 24
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: ST_TO_ADDR
39635: GO 39852
39637: LD_INT 45
39639: DOUBLE
39640: EQUAL
39641: IFTRUE 39645
39643: GO 39671
39645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39646: LD_ADDR_VAR 0 3
39650: PUSH
39651: LD_INT 21
39653: PUSH
39654: LD_INT 22
39656: PUSH
39657: LD_INT 23
39659: PUSH
39660: LD_INT 24
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: ST_TO_ADDR
39669: GO 39852
39671: LD_INT 49
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39679
39677: GO 39705
39679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39680: LD_ADDR_VAR 0 3
39684: PUSH
39685: LD_INT 21
39687: PUSH
39688: LD_INT 22
39690: PUSH
39691: LD_INT 23
39693: PUSH
39694: LD_INT 24
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: ST_TO_ADDR
39703: GO 39852
39705: LD_INT 51
39707: DOUBLE
39708: EQUAL
39709: IFTRUE 39713
39711: GO 39739
39713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39714: LD_ADDR_VAR 0 3
39718: PUSH
39719: LD_INT 21
39721: PUSH
39722: LD_INT 22
39724: PUSH
39725: LD_INT 23
39727: PUSH
39728: LD_INT 24
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: ST_TO_ADDR
39737: GO 39852
39739: LD_INT 52
39741: DOUBLE
39742: EQUAL
39743: IFTRUE 39747
39745: GO 39773
39747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39748: LD_ADDR_VAR 0 3
39752: PUSH
39753: LD_INT 21
39755: PUSH
39756: LD_INT 22
39758: PUSH
39759: LD_INT 23
39761: PUSH
39762: LD_INT 24
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: ST_TO_ADDR
39771: GO 39852
39773: LD_INT 53
39775: DOUBLE
39776: EQUAL
39777: IFTRUE 39781
39779: GO 39799
39781: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39782: LD_ADDR_VAR 0 3
39786: PUSH
39787: LD_INT 23
39789: PUSH
39790: LD_INT 24
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: ST_TO_ADDR
39797: GO 39852
39799: LD_INT 46
39801: DOUBLE
39802: EQUAL
39803: IFTRUE 39807
39805: GO 39825
39807: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_INT 23
39815: PUSH
39816: LD_INT 24
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: ST_TO_ADDR
39823: GO 39852
39825: LD_INT 47
39827: DOUBLE
39828: EQUAL
39829: IFTRUE 39833
39831: GO 39851
39833: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39834: LD_ADDR_VAR 0 3
39838: PUSH
39839: LD_INT 23
39841: PUSH
39842: LD_INT 24
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: ST_TO_ADDR
39849: GO 39852
39851: POP
// result := ( chassis in result ) ;
39852: LD_ADDR_VAR 0 3
39856: PUSH
39857: LD_VAR 0 1
39861: PUSH
39862: LD_VAR 0 3
39866: IN
39867: ST_TO_ADDR
// end ;
39868: LD_VAR 0 3
39872: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39873: LD_INT 0
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
// result := array ;
39882: LD_ADDR_VAR 0 5
39886: PUSH
39887: LD_VAR 0 1
39891: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39892: LD_VAR 0 1
39896: NOT
39897: PUSH
39898: LD_VAR 0 2
39902: NOT
39903: OR
39904: PUSH
39905: LD_VAR 0 3
39909: NOT
39910: OR
39911: PUSH
39912: LD_VAR 0 2
39916: PUSH
39917: LD_VAR 0 1
39921: GREATER
39922: OR
39923: PUSH
39924: LD_VAR 0 3
39928: PUSH
39929: LD_VAR 0 1
39933: GREATER
39934: OR
39935: IFFALSE 39939
// exit ;
39937: GO 40235
// if direction then
39939: LD_VAR 0 4
39943: IFFALSE 40007
// begin d := 1 ;
39945: LD_ADDR_VAR 0 9
39949: PUSH
39950: LD_INT 1
39952: ST_TO_ADDR
// if i_from > i_to then
39953: LD_VAR 0 2
39957: PUSH
39958: LD_VAR 0 3
39962: GREATER
39963: IFFALSE 39989
// length := ( array - i_from ) + i_to else
39965: LD_ADDR_VAR 0 11
39969: PUSH
39970: LD_VAR 0 1
39974: PUSH
39975: LD_VAR 0 2
39979: MINUS
39980: PUSH
39981: LD_VAR 0 3
39985: PLUS
39986: ST_TO_ADDR
39987: GO 40005
// length := i_to - i_from ;
39989: LD_ADDR_VAR 0 11
39993: PUSH
39994: LD_VAR 0 3
39998: PUSH
39999: LD_VAR 0 2
40003: MINUS
40004: ST_TO_ADDR
// end else
40005: GO 40068
// begin d := - 1 ;
40007: LD_ADDR_VAR 0 9
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: ST_TO_ADDR
// if i_from > i_to then
40016: LD_VAR 0 2
40020: PUSH
40021: LD_VAR 0 3
40025: GREATER
40026: IFFALSE 40046
// length := i_from - i_to else
40028: LD_ADDR_VAR 0 11
40032: PUSH
40033: LD_VAR 0 2
40037: PUSH
40038: LD_VAR 0 3
40042: MINUS
40043: ST_TO_ADDR
40044: GO 40068
// length := ( array - i_to ) + i_from ;
40046: LD_ADDR_VAR 0 11
40050: PUSH
40051: LD_VAR 0 1
40055: PUSH
40056: LD_VAR 0 3
40060: MINUS
40061: PUSH
40062: LD_VAR 0 2
40066: PLUS
40067: ST_TO_ADDR
// end ; if not length then
40068: LD_VAR 0 11
40072: NOT
40073: IFFALSE 40077
// exit ;
40075: GO 40235
// tmp := array ;
40077: LD_ADDR_VAR 0 10
40081: PUSH
40082: LD_VAR 0 1
40086: ST_TO_ADDR
// for i = 1 to length do
40087: LD_ADDR_VAR 0 6
40091: PUSH
40092: DOUBLE
40093: LD_INT 1
40095: DEC
40096: ST_TO_ADDR
40097: LD_VAR 0 11
40101: PUSH
40102: FOR_TO
40103: IFFALSE 40223
// begin for j = 1 to array do
40105: LD_ADDR_VAR 0 7
40109: PUSH
40110: DOUBLE
40111: LD_INT 1
40113: DEC
40114: ST_TO_ADDR
40115: LD_VAR 0 1
40119: PUSH
40120: FOR_TO
40121: IFFALSE 40209
// begin k := j + d ;
40123: LD_ADDR_VAR 0 8
40127: PUSH
40128: LD_VAR 0 7
40132: PUSH
40133: LD_VAR 0 9
40137: PLUS
40138: ST_TO_ADDR
// if k > array then
40139: LD_VAR 0 8
40143: PUSH
40144: LD_VAR 0 1
40148: GREATER
40149: IFFALSE 40159
// k := 1 ;
40151: LD_ADDR_VAR 0 8
40155: PUSH
40156: LD_INT 1
40158: ST_TO_ADDR
// if not k then
40159: LD_VAR 0 8
40163: NOT
40164: IFFALSE 40176
// k := array ;
40166: LD_ADDR_VAR 0 8
40170: PUSH
40171: LD_VAR 0 1
40175: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40176: LD_ADDR_VAR 0 10
40180: PUSH
40181: LD_VAR 0 10
40185: PPUSH
40186: LD_VAR 0 8
40190: PPUSH
40191: LD_VAR 0 1
40195: PUSH
40196: LD_VAR 0 7
40200: ARRAY
40201: PPUSH
40202: CALL_OW 1
40206: ST_TO_ADDR
// end ;
40207: GO 40120
40209: POP
40210: POP
// array := tmp ;
40211: LD_ADDR_VAR 0 1
40215: PUSH
40216: LD_VAR 0 10
40220: ST_TO_ADDR
// end ;
40221: GO 40102
40223: POP
40224: POP
// result := array ;
40225: LD_ADDR_VAR 0 5
40229: PUSH
40230: LD_VAR 0 1
40234: ST_TO_ADDR
// end ;
40235: LD_VAR 0 5
40239: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40240: LD_INT 0
40242: PPUSH
40243: PPUSH
// result := 0 ;
40244: LD_ADDR_VAR 0 3
40248: PUSH
40249: LD_INT 0
40251: ST_TO_ADDR
// if not array or not value in array then
40252: LD_VAR 0 1
40256: NOT
40257: PUSH
40258: LD_VAR 0 2
40262: PUSH
40263: LD_VAR 0 1
40267: IN
40268: NOT
40269: OR
40270: IFFALSE 40274
// exit ;
40272: GO 40328
// for i = 1 to array do
40274: LD_ADDR_VAR 0 4
40278: PUSH
40279: DOUBLE
40280: LD_INT 1
40282: DEC
40283: ST_TO_ADDR
40284: LD_VAR 0 1
40288: PUSH
40289: FOR_TO
40290: IFFALSE 40326
// if value = array [ i ] then
40292: LD_VAR 0 2
40296: PUSH
40297: LD_VAR 0 1
40301: PUSH
40302: LD_VAR 0 4
40306: ARRAY
40307: EQUAL
40308: IFFALSE 40324
// begin result := i ;
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: LD_VAR 0 4
40319: ST_TO_ADDR
// exit ;
40320: POP
40321: POP
40322: GO 40328
// end ;
40324: GO 40289
40326: POP
40327: POP
// end ;
40328: LD_VAR 0 3
40332: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40333: LD_INT 0
40335: PPUSH
// vc_chassis := chassis ;
40336: LD_ADDR_OWVAR 37
40340: PUSH
40341: LD_VAR 0 1
40345: ST_TO_ADDR
// vc_engine := engine ;
40346: LD_ADDR_OWVAR 39
40350: PUSH
40351: LD_VAR 0 2
40355: ST_TO_ADDR
// vc_control := control ;
40356: LD_ADDR_OWVAR 38
40360: PUSH
40361: LD_VAR 0 3
40365: ST_TO_ADDR
// vc_weapon := weapon ;
40366: LD_ADDR_OWVAR 40
40370: PUSH
40371: LD_VAR 0 4
40375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40376: LD_ADDR_OWVAR 41
40380: PUSH
40381: LD_VAR 0 5
40385: ST_TO_ADDR
// end ;
40386: LD_VAR 0 6
40390: RET
// export function WantPlant ( unit ) ; var task ; begin
40391: LD_INT 0
40393: PPUSH
40394: PPUSH
// result := false ;
40395: LD_ADDR_VAR 0 2
40399: PUSH
40400: LD_INT 0
40402: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40403: LD_ADDR_VAR 0 3
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 437
40417: ST_TO_ADDR
// if task then
40418: LD_VAR 0 3
40422: IFFALSE 40450
// if task [ 1 ] [ 1 ] = p then
40424: LD_VAR 0 3
40428: PUSH
40429: LD_INT 1
40431: ARRAY
40432: PUSH
40433: LD_INT 1
40435: ARRAY
40436: PUSH
40437: LD_STRING p
40439: EQUAL
40440: IFFALSE 40450
// result := true ;
40442: LD_ADDR_VAR 0 2
40446: PUSH
40447: LD_INT 1
40449: ST_TO_ADDR
// end ;
40450: LD_VAR 0 2
40454: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40455: LD_INT 0
40457: PPUSH
40458: PPUSH
40459: PPUSH
40460: PPUSH
// if pos < 1 then
40461: LD_VAR 0 2
40465: PUSH
40466: LD_INT 1
40468: LESS
40469: IFFALSE 40473
// exit ;
40471: GO 40776
// if pos = 1 then
40473: LD_VAR 0 2
40477: PUSH
40478: LD_INT 1
40480: EQUAL
40481: IFFALSE 40514
// result := Replace ( arr , pos [ 1 ] , value ) else
40483: LD_ADDR_VAR 0 4
40487: PUSH
40488: LD_VAR 0 1
40492: PPUSH
40493: LD_VAR 0 2
40497: PUSH
40498: LD_INT 1
40500: ARRAY
40501: PPUSH
40502: LD_VAR 0 3
40506: PPUSH
40507: CALL_OW 1
40511: ST_TO_ADDR
40512: GO 40776
// begin tmp := arr ;
40514: LD_ADDR_VAR 0 6
40518: PUSH
40519: LD_VAR 0 1
40523: ST_TO_ADDR
// s_arr := [ tmp ] ;
40524: LD_ADDR_VAR 0 7
40528: PUSH
40529: LD_VAR 0 6
40533: PUSH
40534: EMPTY
40535: LIST
40536: ST_TO_ADDR
// for i = 1 to pos - 1 do
40537: LD_ADDR_VAR 0 5
40541: PUSH
40542: DOUBLE
40543: LD_INT 1
40545: DEC
40546: ST_TO_ADDR
40547: LD_VAR 0 2
40551: PUSH
40552: LD_INT 1
40554: MINUS
40555: PUSH
40556: FOR_TO
40557: IFFALSE 40602
// begin tmp := tmp [ pos [ i ] ] ;
40559: LD_ADDR_VAR 0 6
40563: PUSH
40564: LD_VAR 0 6
40568: PUSH
40569: LD_VAR 0 2
40573: PUSH
40574: LD_VAR 0 5
40578: ARRAY
40579: ARRAY
40580: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40581: LD_ADDR_VAR 0 7
40585: PUSH
40586: LD_VAR 0 7
40590: PUSH
40591: LD_VAR 0 6
40595: PUSH
40596: EMPTY
40597: LIST
40598: ADD
40599: ST_TO_ADDR
// end ;
40600: GO 40556
40602: POP
40603: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40604: LD_ADDR_VAR 0 6
40608: PUSH
40609: LD_VAR 0 6
40613: PPUSH
40614: LD_VAR 0 2
40618: PUSH
40619: LD_VAR 0 2
40623: ARRAY
40624: PPUSH
40625: LD_VAR 0 3
40629: PPUSH
40630: CALL_OW 1
40634: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40635: LD_ADDR_VAR 0 7
40639: PUSH
40640: LD_VAR 0 7
40644: PPUSH
40645: LD_VAR 0 7
40649: PPUSH
40650: LD_VAR 0 6
40654: PPUSH
40655: CALL_OW 1
40659: ST_TO_ADDR
// for i = s_arr downto 2 do
40660: LD_ADDR_VAR 0 5
40664: PUSH
40665: DOUBLE
40666: LD_VAR 0 7
40670: INC
40671: ST_TO_ADDR
40672: LD_INT 2
40674: PUSH
40675: FOR_DOWNTO
40676: IFFALSE 40760
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40678: LD_ADDR_VAR 0 6
40682: PUSH
40683: LD_VAR 0 7
40687: PUSH
40688: LD_VAR 0 5
40692: PUSH
40693: LD_INT 1
40695: MINUS
40696: ARRAY
40697: PPUSH
40698: LD_VAR 0 2
40702: PUSH
40703: LD_VAR 0 5
40707: PUSH
40708: LD_INT 1
40710: MINUS
40711: ARRAY
40712: PPUSH
40713: LD_VAR 0 7
40717: PUSH
40718: LD_VAR 0 5
40722: ARRAY
40723: PPUSH
40724: CALL_OW 1
40728: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40729: LD_ADDR_VAR 0 7
40733: PUSH
40734: LD_VAR 0 7
40738: PPUSH
40739: LD_VAR 0 5
40743: PUSH
40744: LD_INT 1
40746: MINUS
40747: PPUSH
40748: LD_VAR 0 6
40752: PPUSH
40753: CALL_OW 1
40757: ST_TO_ADDR
// end ;
40758: GO 40675
40760: POP
40761: POP
// result := s_arr [ 1 ] ;
40762: LD_ADDR_VAR 0 4
40766: PUSH
40767: LD_VAR 0 7
40771: PUSH
40772: LD_INT 1
40774: ARRAY
40775: ST_TO_ADDR
// end ; end ;
40776: LD_VAR 0 4
40780: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40781: LD_INT 0
40783: PPUSH
40784: PPUSH
// if not list then
40785: LD_VAR 0 1
40789: NOT
40790: IFFALSE 40794
// exit ;
40792: GO 40885
// i := list [ pos1 ] ;
40794: LD_ADDR_VAR 0 5
40798: PUSH
40799: LD_VAR 0 1
40803: PUSH
40804: LD_VAR 0 2
40808: ARRAY
40809: ST_TO_ADDR
// if not i then
40810: LD_VAR 0 5
40814: NOT
40815: IFFALSE 40819
// exit ;
40817: GO 40885
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40819: LD_ADDR_VAR 0 1
40823: PUSH
40824: LD_VAR 0 1
40828: PPUSH
40829: LD_VAR 0 2
40833: PPUSH
40834: LD_VAR 0 1
40838: PUSH
40839: LD_VAR 0 3
40843: ARRAY
40844: PPUSH
40845: CALL_OW 1
40849: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40850: LD_ADDR_VAR 0 1
40854: PUSH
40855: LD_VAR 0 1
40859: PPUSH
40860: LD_VAR 0 3
40864: PPUSH
40865: LD_VAR 0 5
40869: PPUSH
40870: CALL_OW 1
40874: ST_TO_ADDR
// result := list ;
40875: LD_ADDR_VAR 0 4
40879: PUSH
40880: LD_VAR 0 1
40884: ST_TO_ADDR
// end ;
40885: LD_VAR 0 4
40889: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40890: LD_INT 0
40892: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40893: LD_ADDR_VAR 0 5
40897: PUSH
40898: LD_VAR 0 1
40902: PPUSH
40903: CALL_OW 250
40907: PPUSH
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL_OW 251
40917: PPUSH
40918: LD_VAR 0 2
40922: PPUSH
40923: LD_VAR 0 3
40927: PPUSH
40928: LD_VAR 0 4
40932: PPUSH
40933: CALL 40943 0 5
40937: ST_TO_ADDR
// end ;
40938: LD_VAR 0 5
40942: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40943: LD_INT 0
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
// if not list then
40949: LD_VAR 0 3
40953: NOT
40954: IFFALSE 40958
// exit ;
40956: GO 41346
// result := [ ] ;
40958: LD_ADDR_VAR 0 6
40962: PUSH
40963: EMPTY
40964: ST_TO_ADDR
// for i in list do
40965: LD_ADDR_VAR 0 7
40969: PUSH
40970: LD_VAR 0 3
40974: PUSH
40975: FOR_IN
40976: IFFALSE 41178
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40978: LD_ADDR_VAR 0 9
40982: PUSH
40983: LD_VAR 0 7
40987: PPUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: CALL_OW 297
41002: ST_TO_ADDR
// if not result then
41003: LD_VAR 0 6
41007: NOT
41008: IFFALSE 41034
// result := [ [ i , tmp ] ] else
41010: LD_ADDR_VAR 0 6
41014: PUSH
41015: LD_VAR 0 7
41019: PUSH
41020: LD_VAR 0 9
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: ST_TO_ADDR
41032: GO 41176
// begin if result [ result ] [ 2 ] < tmp then
41034: LD_VAR 0 6
41038: PUSH
41039: LD_VAR 0 6
41043: ARRAY
41044: PUSH
41045: LD_INT 2
41047: ARRAY
41048: PUSH
41049: LD_VAR 0 9
41053: LESS
41054: IFFALSE 41096
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41056: LD_ADDR_VAR 0 6
41060: PUSH
41061: LD_VAR 0 6
41065: PPUSH
41066: LD_VAR 0 6
41070: PUSH
41071: LD_INT 1
41073: PLUS
41074: PPUSH
41075: LD_VAR 0 7
41079: PUSH
41080: LD_VAR 0 9
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PPUSH
41089: CALL_OW 2
41093: ST_TO_ADDR
41094: GO 41176
// for j = 1 to result do
41096: LD_ADDR_VAR 0 8
41100: PUSH
41101: DOUBLE
41102: LD_INT 1
41104: DEC
41105: ST_TO_ADDR
41106: LD_VAR 0 6
41110: PUSH
41111: FOR_TO
41112: IFFALSE 41174
// begin if tmp < result [ j ] [ 2 ] then
41114: LD_VAR 0 9
41118: PUSH
41119: LD_VAR 0 6
41123: PUSH
41124: LD_VAR 0 8
41128: ARRAY
41129: PUSH
41130: LD_INT 2
41132: ARRAY
41133: LESS
41134: IFFALSE 41172
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41136: LD_ADDR_VAR 0 6
41140: PUSH
41141: LD_VAR 0 6
41145: PPUSH
41146: LD_VAR 0 8
41150: PPUSH
41151: LD_VAR 0 7
41155: PUSH
41156: LD_VAR 0 9
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PPUSH
41165: CALL_OW 2
41169: ST_TO_ADDR
// break ;
41170: GO 41174
// end ; end ;
41172: GO 41111
41174: POP
41175: POP
// end ; end ;
41176: GO 40975
41178: POP
41179: POP
// if result and not asc then
41180: LD_VAR 0 6
41184: PUSH
41185: LD_VAR 0 4
41189: NOT
41190: AND
41191: IFFALSE 41266
// begin tmp := result ;
41193: LD_ADDR_VAR 0 9
41197: PUSH
41198: LD_VAR 0 6
41202: ST_TO_ADDR
// for i = tmp downto 1 do
41203: LD_ADDR_VAR 0 7
41207: PUSH
41208: DOUBLE
41209: LD_VAR 0 9
41213: INC
41214: ST_TO_ADDR
41215: LD_INT 1
41217: PUSH
41218: FOR_DOWNTO
41219: IFFALSE 41264
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41221: LD_ADDR_VAR 0 6
41225: PUSH
41226: LD_VAR 0 6
41230: PPUSH
41231: LD_VAR 0 9
41235: PUSH
41236: LD_VAR 0 7
41240: MINUS
41241: PUSH
41242: LD_INT 1
41244: PLUS
41245: PPUSH
41246: LD_VAR 0 9
41250: PUSH
41251: LD_VAR 0 7
41255: ARRAY
41256: PPUSH
41257: CALL_OW 1
41261: ST_TO_ADDR
41262: GO 41218
41264: POP
41265: POP
// end ; tmp := [ ] ;
41266: LD_ADDR_VAR 0 9
41270: PUSH
41271: EMPTY
41272: ST_TO_ADDR
// if mode then
41273: LD_VAR 0 5
41277: IFFALSE 41346
// begin for i = 1 to result do
41279: LD_ADDR_VAR 0 7
41283: PUSH
41284: DOUBLE
41285: LD_INT 1
41287: DEC
41288: ST_TO_ADDR
41289: LD_VAR 0 6
41293: PUSH
41294: FOR_TO
41295: IFFALSE 41334
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41297: LD_ADDR_VAR 0 9
41301: PUSH
41302: LD_VAR 0 9
41306: PPUSH
41307: LD_VAR 0 7
41311: PPUSH
41312: LD_VAR 0 6
41316: PUSH
41317: LD_VAR 0 7
41321: ARRAY
41322: PUSH
41323: LD_INT 1
41325: ARRAY
41326: PPUSH
41327: CALL_OW 1
41331: ST_TO_ADDR
41332: GO 41294
41334: POP
41335: POP
// result := tmp ;
41336: LD_ADDR_VAR 0 6
41340: PUSH
41341: LD_VAR 0 9
41345: ST_TO_ADDR
// end ; end ;
41346: LD_VAR 0 6
41350: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41351: LD_INT 0
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41359: LD_ADDR_VAR 0 5
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: ST_TO_ADDR
// if not x or not y then
41381: LD_VAR 0 2
41385: NOT
41386: PUSH
41387: LD_VAR 0 3
41391: NOT
41392: OR
41393: IFFALSE 41397
// exit ;
41395: GO 43047
// if not range then
41397: LD_VAR 0 4
41401: NOT
41402: IFFALSE 41412
// range := 10 ;
41404: LD_ADDR_VAR 0 4
41408: PUSH
41409: LD_INT 10
41411: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41412: LD_ADDR_VAR 0 8
41416: PUSH
41417: LD_INT 81
41419: PUSH
41420: LD_VAR 0 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 92
41431: PUSH
41432: LD_VAR 0 2
41436: PUSH
41437: LD_VAR 0 3
41441: PUSH
41442: LD_VAR 0 4
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 3
41455: PUSH
41456: LD_INT 21
41458: PUSH
41459: LD_INT 3
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: PPUSH
41475: CALL_OW 69
41479: ST_TO_ADDR
// if not tmp then
41480: LD_VAR 0 8
41484: NOT
41485: IFFALSE 41489
// exit ;
41487: GO 43047
// for i in tmp do
41489: LD_ADDR_VAR 0 6
41493: PUSH
41494: LD_VAR 0 8
41498: PUSH
41499: FOR_IN
41500: IFFALSE 43022
// begin points := [ 0 , 0 , 0 ] ;
41502: LD_ADDR_VAR 0 9
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: LIST
41520: ST_TO_ADDR
// bpoints := 1 ;
41521: LD_ADDR_VAR 0 10
41525: PUSH
41526: LD_INT 1
41528: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41529: LD_VAR 0 6
41533: PPUSH
41534: CALL_OW 247
41538: PUSH
41539: LD_INT 1
41541: DOUBLE
41542: EQUAL
41543: IFTRUE 41547
41545: GO 42125
41547: POP
// begin if GetClass ( i ) = 1 then
41548: LD_VAR 0 6
41552: PPUSH
41553: CALL_OW 257
41557: PUSH
41558: LD_INT 1
41560: EQUAL
41561: IFFALSE 41582
// points := [ 10 , 5 , 3 ] ;
41563: LD_ADDR_VAR 0 9
41567: PUSH
41568: LD_INT 10
41570: PUSH
41571: LD_INT 5
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41582: LD_VAR 0 6
41586: PPUSH
41587: CALL_OW 257
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 3
41597: PUSH
41598: LD_INT 4
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: IN
41606: IFFALSE 41627
// points := [ 3 , 2 , 1 ] ;
41608: LD_ADDR_VAR 0 9
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: LIST
41626: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41627: LD_VAR 0 6
41631: PPUSH
41632: CALL_OW 257
41636: PUSH
41637: LD_INT 5
41639: EQUAL
41640: IFFALSE 41661
// points := [ 130 , 5 , 2 ] ;
41642: LD_ADDR_VAR 0 9
41646: PUSH
41647: LD_INT 130
41649: PUSH
41650: LD_INT 5
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: LIST
41660: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41661: LD_VAR 0 6
41665: PPUSH
41666: CALL_OW 257
41670: PUSH
41671: LD_INT 8
41673: EQUAL
41674: IFFALSE 41695
// points := [ 35 , 35 , 30 ] ;
41676: LD_ADDR_VAR 0 9
41680: PUSH
41681: LD_INT 35
41683: PUSH
41684: LD_INT 35
41686: PUSH
41687: LD_INT 30
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41695: LD_VAR 0 6
41699: PPUSH
41700: CALL_OW 257
41704: PUSH
41705: LD_INT 9
41707: EQUAL
41708: IFFALSE 41729
// points := [ 20 , 55 , 40 ] ;
41710: LD_ADDR_VAR 0 9
41714: PUSH
41715: LD_INT 20
41717: PUSH
41718: LD_INT 55
41720: PUSH
41721: LD_INT 40
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41729: LD_VAR 0 6
41733: PPUSH
41734: CALL_OW 257
41738: PUSH
41739: LD_INT 12
41741: PUSH
41742: LD_INT 16
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: IN
41749: IFFALSE 41770
// points := [ 5 , 3 , 2 ] ;
41751: LD_ADDR_VAR 0 9
41755: PUSH
41756: LD_INT 5
41758: PUSH
41759: LD_INT 3
41761: PUSH
41762: LD_INT 2
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: LIST
41769: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41770: LD_VAR 0 6
41774: PPUSH
41775: CALL_OW 257
41779: PUSH
41780: LD_INT 17
41782: EQUAL
41783: IFFALSE 41804
// points := [ 100 , 50 , 75 ] ;
41785: LD_ADDR_VAR 0 9
41789: PUSH
41790: LD_INT 100
41792: PUSH
41793: LD_INT 50
41795: PUSH
41796: LD_INT 75
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41804: LD_VAR 0 6
41808: PPUSH
41809: CALL_OW 257
41813: PUSH
41814: LD_INT 15
41816: EQUAL
41817: IFFALSE 41838
// points := [ 10 , 5 , 3 ] ;
41819: LD_ADDR_VAR 0 9
41823: PUSH
41824: LD_INT 10
41826: PUSH
41827: LD_INT 5
41829: PUSH
41830: LD_INT 3
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: LIST
41837: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41838: LD_VAR 0 6
41842: PPUSH
41843: CALL_OW 257
41847: PUSH
41848: LD_INT 14
41850: EQUAL
41851: IFFALSE 41872
// points := [ 10 , 0 , 0 ] ;
41853: LD_ADDR_VAR 0 9
41857: PUSH
41858: LD_INT 10
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41872: LD_VAR 0 6
41876: PPUSH
41877: CALL_OW 257
41881: PUSH
41882: LD_INT 11
41884: EQUAL
41885: IFFALSE 41906
// points := [ 30 , 10 , 5 ] ;
41887: LD_ADDR_VAR 0 9
41891: PUSH
41892: LD_INT 30
41894: PUSH
41895: LD_INT 10
41897: PUSH
41898: LD_INT 5
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41906: LD_VAR 0 1
41910: PPUSH
41911: LD_INT 5
41913: PPUSH
41914: CALL_OW 321
41918: PUSH
41919: LD_INT 2
41921: EQUAL
41922: IFFALSE 41939
// bpoints := bpoints * 1.8 ;
41924: LD_ADDR_VAR 0 10
41928: PUSH
41929: LD_VAR 0 10
41933: PUSH
41934: LD_REAL  1.80000000000000E+0000
41937: MUL
41938: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41939: LD_VAR 0 6
41943: PPUSH
41944: CALL_OW 257
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: LD_INT 4
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: IN
41967: PUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: LD_INT 51
41975: PPUSH
41976: CALL_OW 321
41980: PUSH
41981: LD_INT 2
41983: EQUAL
41984: AND
41985: IFFALSE 42002
// bpoints := bpoints * 1.2 ;
41987: LD_ADDR_VAR 0 10
41991: PUSH
41992: LD_VAR 0 10
41996: PUSH
41997: LD_REAL  1.20000000000000E+0000
42000: MUL
42001: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42002: LD_VAR 0 6
42006: PPUSH
42007: CALL_OW 257
42011: PUSH
42012: LD_INT 5
42014: PUSH
42015: LD_INT 7
42017: PUSH
42018: LD_INT 9
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: IN
42026: PUSH
42027: LD_VAR 0 1
42031: PPUSH
42032: LD_INT 52
42034: PPUSH
42035: CALL_OW 321
42039: PUSH
42040: LD_INT 2
42042: EQUAL
42043: AND
42044: IFFALSE 42061
// bpoints := bpoints * 1.5 ;
42046: LD_ADDR_VAR 0 10
42050: PUSH
42051: LD_VAR 0 10
42055: PUSH
42056: LD_REAL  1.50000000000000E+0000
42059: MUL
42060: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42061: LD_VAR 0 1
42065: PPUSH
42066: LD_INT 66
42068: PPUSH
42069: CALL_OW 321
42073: PUSH
42074: LD_INT 2
42076: EQUAL
42077: IFFALSE 42094
// bpoints := bpoints * 1.1 ;
42079: LD_ADDR_VAR 0 10
42083: PUSH
42084: LD_VAR 0 10
42088: PUSH
42089: LD_REAL  1.10000000000000E+0000
42092: MUL
42093: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42094: LD_ADDR_VAR 0 10
42098: PUSH
42099: LD_VAR 0 10
42103: PUSH
42104: LD_VAR 0 6
42108: PPUSH
42109: LD_INT 1
42111: PPUSH
42112: CALL_OW 259
42116: PUSH
42117: LD_REAL  1.15000000000000E+0000
42120: MUL
42121: MUL
42122: ST_TO_ADDR
// end ; unit_vehicle :
42123: GO 42951
42125: LD_INT 2
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42939
42133: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42134: LD_VAR 0 6
42138: PPUSH
42139: CALL_OW 264
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 42
42149: PUSH
42150: LD_INT 24
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: IN
42158: IFFALSE 42179
// points := [ 25 , 5 , 3 ] ;
42160: LD_ADDR_VAR 0 9
42164: PUSH
42165: LD_INT 25
42167: PUSH
42168: LD_INT 5
42170: PUSH
42171: LD_INT 3
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: LIST
42178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42179: LD_VAR 0 6
42183: PPUSH
42184: CALL_OW 264
42188: PUSH
42189: LD_INT 4
42191: PUSH
42192: LD_INT 43
42194: PUSH
42195: LD_INT 25
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: IN
42203: IFFALSE 42224
// points := [ 40 , 15 , 5 ] ;
42205: LD_ADDR_VAR 0 9
42209: PUSH
42210: LD_INT 40
42212: PUSH
42213: LD_INT 15
42215: PUSH
42216: LD_INT 5
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42224: LD_VAR 0 6
42228: PPUSH
42229: CALL_OW 264
42233: PUSH
42234: LD_INT 3
42236: PUSH
42237: LD_INT 23
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: IN
42244: IFFALSE 42265
// points := [ 7 , 25 , 8 ] ;
42246: LD_ADDR_VAR 0 9
42250: PUSH
42251: LD_INT 7
42253: PUSH
42254: LD_INT 25
42256: PUSH
42257: LD_INT 8
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42265: LD_VAR 0 6
42269: PPUSH
42270: CALL_OW 264
42274: PUSH
42275: LD_INT 5
42277: PUSH
42278: LD_INT 27
42280: PUSH
42281: LD_INT 44
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: IN
42289: IFFALSE 42310
// points := [ 14 , 50 , 16 ] ;
42291: LD_ADDR_VAR 0 9
42295: PUSH
42296: LD_INT 14
42298: PUSH
42299: LD_INT 50
42301: PUSH
42302: LD_INT 16
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: LIST
42309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42310: LD_VAR 0 6
42314: PPUSH
42315: CALL_OW 264
42319: PUSH
42320: LD_INT 6
42322: PUSH
42323: LD_INT 46
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: IN
42330: IFFALSE 42351
// points := [ 32 , 120 , 70 ] ;
42332: LD_ADDR_VAR 0 9
42336: PUSH
42337: LD_INT 32
42339: PUSH
42340: LD_INT 120
42342: PUSH
42343: LD_INT 70
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42351: LD_VAR 0 6
42355: PPUSH
42356: CALL_OW 264
42360: PUSH
42361: LD_INT 7
42363: PUSH
42364: LD_INT 28
42366: PUSH
42367: LD_INT 45
42369: PUSH
42370: LD_INT 92
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: IN
42379: IFFALSE 42400
// points := [ 35 , 20 , 45 ] ;
42381: LD_ADDR_VAR 0 9
42385: PUSH
42386: LD_INT 35
42388: PUSH
42389: LD_INT 20
42391: PUSH
42392: LD_INT 45
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42400: LD_VAR 0 6
42404: PPUSH
42405: CALL_OW 264
42409: PUSH
42410: LD_INT 47
42412: PUSH
42413: EMPTY
42414: LIST
42415: IN
42416: IFFALSE 42437
// points := [ 67 , 45 , 75 ] ;
42418: LD_ADDR_VAR 0 9
42422: PUSH
42423: LD_INT 67
42425: PUSH
42426: LD_INT 45
42428: PUSH
42429: LD_INT 75
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: LIST
42436: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42437: LD_VAR 0 6
42441: PPUSH
42442: CALL_OW 264
42446: PUSH
42447: LD_INT 26
42449: PUSH
42450: EMPTY
42451: LIST
42452: IN
42453: IFFALSE 42474
// points := [ 120 , 30 , 80 ] ;
42455: LD_ADDR_VAR 0 9
42459: PUSH
42460: LD_INT 120
42462: PUSH
42463: LD_INT 30
42465: PUSH
42466: LD_INT 80
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: LIST
42473: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42474: LD_VAR 0 6
42478: PPUSH
42479: CALL_OW 264
42483: PUSH
42484: LD_INT 22
42486: PUSH
42487: EMPTY
42488: LIST
42489: IN
42490: IFFALSE 42511
// points := [ 40 , 1 , 1 ] ;
42492: LD_ADDR_VAR 0 9
42496: PUSH
42497: LD_INT 40
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42511: LD_VAR 0 6
42515: PPUSH
42516: CALL_OW 264
42520: PUSH
42521: LD_INT 29
42523: PUSH
42524: EMPTY
42525: LIST
42526: IN
42527: IFFALSE 42548
// points := [ 70 , 200 , 400 ] ;
42529: LD_ADDR_VAR 0 9
42533: PUSH
42534: LD_INT 70
42536: PUSH
42537: LD_INT 200
42539: PUSH
42540: LD_INT 400
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42548: LD_VAR 0 6
42552: PPUSH
42553: CALL_OW 264
42557: PUSH
42558: LD_INT 14
42560: PUSH
42561: LD_INT 53
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: IN
42568: IFFALSE 42589
// points := [ 40 , 10 , 20 ] ;
42570: LD_ADDR_VAR 0 9
42574: PUSH
42575: LD_INT 40
42577: PUSH
42578: LD_INT 10
42580: PUSH
42581: LD_INT 20
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: LIST
42588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42589: LD_VAR 0 6
42593: PPUSH
42594: CALL_OW 264
42598: PUSH
42599: LD_INT 9
42601: PUSH
42602: EMPTY
42603: LIST
42604: IN
42605: IFFALSE 42626
// points := [ 5 , 70 , 20 ] ;
42607: LD_ADDR_VAR 0 9
42611: PUSH
42612: LD_INT 5
42614: PUSH
42615: LD_INT 70
42617: PUSH
42618: LD_INT 20
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42626: LD_VAR 0 6
42630: PPUSH
42631: CALL_OW 264
42635: PUSH
42636: LD_INT 10
42638: PUSH
42639: EMPTY
42640: LIST
42641: IN
42642: IFFALSE 42663
// points := [ 35 , 110 , 70 ] ;
42644: LD_ADDR_VAR 0 9
42648: PUSH
42649: LD_INT 35
42651: PUSH
42652: LD_INT 110
42654: PUSH
42655: LD_INT 70
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42663: LD_VAR 0 6
42667: PPUSH
42668: CALL_OW 265
42672: PUSH
42673: LD_INT 25
42675: EQUAL
42676: IFFALSE 42697
// points := [ 80 , 65 , 100 ] ;
42678: LD_ADDR_VAR 0 9
42682: PUSH
42683: LD_INT 80
42685: PUSH
42686: LD_INT 65
42688: PUSH
42689: LD_INT 100
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: LIST
42696: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42697: LD_VAR 0 6
42701: PPUSH
42702: CALL_OW 263
42706: PUSH
42707: LD_INT 1
42709: EQUAL
42710: IFFALSE 42745
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42712: LD_ADDR_VAR 0 10
42716: PUSH
42717: LD_VAR 0 10
42721: PUSH
42722: LD_VAR 0 6
42726: PPUSH
42727: CALL_OW 311
42731: PPUSH
42732: LD_INT 3
42734: PPUSH
42735: CALL_OW 259
42739: PUSH
42740: LD_INT 4
42742: MUL
42743: MUL
42744: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42745: LD_VAR 0 6
42749: PPUSH
42750: CALL_OW 263
42754: PUSH
42755: LD_INT 2
42757: EQUAL
42758: IFFALSE 42809
// begin j := IsControledBy ( i ) ;
42760: LD_ADDR_VAR 0 7
42764: PUSH
42765: LD_VAR 0 6
42769: PPUSH
42770: CALL_OW 312
42774: ST_TO_ADDR
// if j then
42775: LD_VAR 0 7
42779: IFFALSE 42809
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42781: LD_ADDR_VAR 0 10
42785: PUSH
42786: LD_VAR 0 10
42790: PUSH
42791: LD_VAR 0 7
42795: PPUSH
42796: LD_INT 3
42798: PPUSH
42799: CALL_OW 259
42803: PUSH
42804: LD_INT 3
42806: MUL
42807: MUL
42808: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42809: LD_VAR 0 6
42813: PPUSH
42814: CALL_OW 264
42818: PUSH
42819: LD_INT 5
42821: PUSH
42822: LD_INT 6
42824: PUSH
42825: LD_INT 46
42827: PUSH
42828: LD_INT 44
42830: PUSH
42831: LD_INT 47
42833: PUSH
42834: LD_INT 45
42836: PUSH
42837: LD_INT 28
42839: PUSH
42840: LD_INT 7
42842: PUSH
42843: LD_INT 27
42845: PUSH
42846: LD_INT 29
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: IN
42861: PUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: LD_INT 52
42869: PPUSH
42870: CALL_OW 321
42874: PUSH
42875: LD_INT 2
42877: EQUAL
42878: AND
42879: IFFALSE 42896
// bpoints := bpoints * 1.2 ;
42881: LD_ADDR_VAR 0 10
42885: PUSH
42886: LD_VAR 0 10
42890: PUSH
42891: LD_REAL  1.20000000000000E+0000
42894: MUL
42895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42896: LD_VAR 0 6
42900: PPUSH
42901: CALL_OW 264
42905: PUSH
42906: LD_INT 6
42908: PUSH
42909: LD_INT 46
42911: PUSH
42912: LD_INT 47
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: IN
42920: IFFALSE 42937
// bpoints := bpoints * 1.2 ;
42922: LD_ADDR_VAR 0 10
42926: PUSH
42927: LD_VAR 0 10
42931: PUSH
42932: LD_REAL  1.20000000000000E+0000
42935: MUL
42936: ST_TO_ADDR
// end ; unit_building :
42937: GO 42951
42939: LD_INT 3
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 42950
42947: POP
// ; end ;
42948: GO 42951
42950: POP
// for j = 1 to 3 do
42951: LD_ADDR_VAR 0 7
42955: PUSH
42956: DOUBLE
42957: LD_INT 1
42959: DEC
42960: ST_TO_ADDR
42961: LD_INT 3
42963: PUSH
42964: FOR_TO
42965: IFFALSE 43018
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42967: LD_ADDR_VAR 0 5
42971: PUSH
42972: LD_VAR 0 5
42976: PPUSH
42977: LD_VAR 0 7
42981: PPUSH
42982: LD_VAR 0 5
42986: PUSH
42987: LD_VAR 0 7
42991: ARRAY
42992: PUSH
42993: LD_VAR 0 9
42997: PUSH
42998: LD_VAR 0 7
43002: ARRAY
43003: PUSH
43004: LD_VAR 0 10
43008: MUL
43009: PLUS
43010: PPUSH
43011: CALL_OW 1
43015: ST_TO_ADDR
43016: GO 42964
43018: POP
43019: POP
// end ;
43020: GO 41499
43022: POP
43023: POP
// result := Replace ( result , 4 , tmp ) ;
43024: LD_ADDR_VAR 0 5
43028: PUSH
43029: LD_VAR 0 5
43033: PPUSH
43034: LD_INT 4
43036: PPUSH
43037: LD_VAR 0 8
43041: PPUSH
43042: CALL_OW 1
43046: ST_TO_ADDR
// end ;
43047: LD_VAR 0 5
43051: RET
// export function DangerAtRange ( unit , range ) ; begin
43052: LD_INT 0
43054: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43055: LD_ADDR_VAR 0 3
43059: PUSH
43060: LD_VAR 0 1
43064: PPUSH
43065: CALL_OW 255
43069: PPUSH
43070: LD_VAR 0 1
43074: PPUSH
43075: CALL_OW 250
43079: PPUSH
43080: LD_VAR 0 1
43084: PPUSH
43085: CALL_OW 251
43089: PPUSH
43090: LD_VAR 0 2
43094: PPUSH
43095: CALL 41351 0 4
43099: ST_TO_ADDR
// end ;
43100: LD_VAR 0 3
43104: RET
// export function DangerInArea ( side , area ) ; begin
43105: LD_INT 0
43107: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43108: LD_ADDR_VAR 0 3
43112: PUSH
43113: LD_VAR 0 2
43117: PPUSH
43118: LD_INT 81
43120: PUSH
43121: LD_VAR 0 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PPUSH
43130: CALL_OW 70
43134: ST_TO_ADDR
// end ;
43135: LD_VAR 0 3
43139: RET
// export function IsExtension ( b ) ; begin
43140: LD_INT 0
43142: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43143: LD_ADDR_VAR 0 2
43147: PUSH
43148: LD_VAR 0 1
43152: PUSH
43153: LD_INT 23
43155: PUSH
43156: LD_INT 20
43158: PUSH
43159: LD_INT 22
43161: PUSH
43162: LD_INT 17
43164: PUSH
43165: LD_INT 24
43167: PUSH
43168: LD_INT 21
43170: PUSH
43171: LD_INT 19
43173: PUSH
43174: LD_INT 16
43176: PUSH
43177: LD_INT 25
43179: PUSH
43180: LD_INT 18
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: IN
43195: ST_TO_ADDR
// end ;
43196: LD_VAR 0 2
43200: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43201: LD_INT 0
43203: PPUSH
43204: PPUSH
43205: PPUSH
// result := [ ] ;
43206: LD_ADDR_VAR 0 4
43210: PUSH
43211: EMPTY
43212: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43213: LD_ADDR_VAR 0 5
43217: PUSH
43218: LD_VAR 0 2
43222: PPUSH
43223: LD_INT 21
43225: PUSH
43226: LD_INT 3
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PPUSH
43233: CALL_OW 70
43237: ST_TO_ADDR
// if not tmp then
43238: LD_VAR 0 5
43242: NOT
43243: IFFALSE 43247
// exit ;
43245: GO 43311
// if checkLink then
43247: LD_VAR 0 3
43251: IFFALSE 43301
// begin for i in tmp do
43253: LD_ADDR_VAR 0 6
43257: PUSH
43258: LD_VAR 0 5
43262: PUSH
43263: FOR_IN
43264: IFFALSE 43299
// if GetBase ( i ) <> base then
43266: LD_VAR 0 6
43270: PPUSH
43271: CALL_OW 274
43275: PUSH
43276: LD_VAR 0 1
43280: NONEQUAL
43281: IFFALSE 43297
// ComLinkToBase ( base , i ) ;
43283: LD_VAR 0 1
43287: PPUSH
43288: LD_VAR 0 6
43292: PPUSH
43293: CALL_OW 169
43297: GO 43263
43299: POP
43300: POP
// end ; result := tmp ;
43301: LD_ADDR_VAR 0 4
43305: PUSH
43306: LD_VAR 0 5
43310: ST_TO_ADDR
// end ;
43311: LD_VAR 0 4
43315: RET
// export function ComComplete ( units , b ) ; var i ; begin
43316: LD_INT 0
43318: PPUSH
43319: PPUSH
// if not units then
43320: LD_VAR 0 1
43324: NOT
43325: IFFALSE 43329
// exit ;
43327: GO 43419
// for i in units do
43329: LD_ADDR_VAR 0 4
43333: PUSH
43334: LD_VAR 0 1
43338: PUSH
43339: FOR_IN
43340: IFFALSE 43417
// if BuildingStatus ( b ) = bs_build then
43342: LD_VAR 0 2
43346: PPUSH
43347: CALL_OW 461
43351: PUSH
43352: LD_INT 1
43354: EQUAL
43355: IFFALSE 43415
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43357: LD_VAR 0 4
43361: PPUSH
43362: LD_STRING h
43364: PUSH
43365: LD_VAR 0 2
43369: PPUSH
43370: CALL_OW 250
43374: PUSH
43375: LD_VAR 0 2
43379: PPUSH
43380: CALL_OW 251
43384: PUSH
43385: LD_VAR 0 2
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: PUSH
43408: EMPTY
43409: LIST
43410: PPUSH
43411: CALL_OW 446
43415: GO 43339
43417: POP
43418: POP
// end ;
43419: LD_VAR 0 3
43423: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43424: LD_INT 0
43426: PPUSH
43427: PPUSH
43428: PPUSH
43429: PPUSH
43430: PPUSH
43431: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43432: LD_VAR 0 1
43436: NOT
43437: PUSH
43438: LD_VAR 0 1
43442: PPUSH
43443: CALL_OW 263
43447: PUSH
43448: LD_INT 2
43450: NONEQUAL
43451: OR
43452: IFFALSE 43456
// exit ;
43454: GO 43772
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43456: LD_ADDR_VAR 0 6
43460: PUSH
43461: LD_INT 22
43463: PUSH
43464: LD_VAR 0 1
43468: PPUSH
43469: CALL_OW 255
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 30
43483: PUSH
43484: LD_INT 36
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 34
43493: PUSH
43494: LD_INT 31
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PPUSH
43510: CALL_OW 69
43514: ST_TO_ADDR
// if not tmp then
43515: LD_VAR 0 6
43519: NOT
43520: IFFALSE 43524
// exit ;
43522: GO 43772
// result := [ ] ;
43524: LD_ADDR_VAR 0 2
43528: PUSH
43529: EMPTY
43530: ST_TO_ADDR
// for i in tmp do
43531: LD_ADDR_VAR 0 3
43535: PUSH
43536: LD_VAR 0 6
43540: PUSH
43541: FOR_IN
43542: IFFALSE 43613
// begin t := UnitsInside ( i ) ;
43544: LD_ADDR_VAR 0 4
43548: PUSH
43549: LD_VAR 0 3
43553: PPUSH
43554: CALL_OW 313
43558: ST_TO_ADDR
// if t then
43559: LD_VAR 0 4
43563: IFFALSE 43611
// for j in t do
43565: LD_ADDR_VAR 0 7
43569: PUSH
43570: LD_VAR 0 4
43574: PUSH
43575: FOR_IN
43576: IFFALSE 43609
// result := Replace ( result , result + 1 , j ) ;
43578: LD_ADDR_VAR 0 2
43582: PUSH
43583: LD_VAR 0 2
43587: PPUSH
43588: LD_VAR 0 2
43592: PUSH
43593: LD_INT 1
43595: PLUS
43596: PPUSH
43597: LD_VAR 0 7
43601: PPUSH
43602: CALL_OW 1
43606: ST_TO_ADDR
43607: GO 43575
43609: POP
43610: POP
// end ;
43611: GO 43541
43613: POP
43614: POP
// if not result then
43615: LD_VAR 0 2
43619: NOT
43620: IFFALSE 43624
// exit ;
43622: GO 43772
// mech := result [ 1 ] ;
43624: LD_ADDR_VAR 0 5
43628: PUSH
43629: LD_VAR 0 2
43633: PUSH
43634: LD_INT 1
43636: ARRAY
43637: ST_TO_ADDR
// if result > 1 then
43638: LD_VAR 0 2
43642: PUSH
43643: LD_INT 1
43645: GREATER
43646: IFFALSE 43758
// begin for i = 2 to result do
43648: LD_ADDR_VAR 0 3
43652: PUSH
43653: DOUBLE
43654: LD_INT 2
43656: DEC
43657: ST_TO_ADDR
43658: LD_VAR 0 2
43662: PUSH
43663: FOR_TO
43664: IFFALSE 43756
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43666: LD_ADDR_VAR 0 4
43670: PUSH
43671: LD_VAR 0 2
43675: PUSH
43676: LD_VAR 0 3
43680: ARRAY
43681: PPUSH
43682: LD_INT 3
43684: PPUSH
43685: CALL_OW 259
43689: PUSH
43690: LD_VAR 0 2
43694: PUSH
43695: LD_VAR 0 3
43699: ARRAY
43700: PPUSH
43701: CALL_OW 432
43705: MINUS
43706: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43707: LD_VAR 0 4
43711: PUSH
43712: LD_VAR 0 5
43716: PPUSH
43717: LD_INT 3
43719: PPUSH
43720: CALL_OW 259
43724: PUSH
43725: LD_VAR 0 5
43729: PPUSH
43730: CALL_OW 432
43734: MINUS
43735: GREATEREQUAL
43736: IFFALSE 43754
// mech := result [ i ] ;
43738: LD_ADDR_VAR 0 5
43742: PUSH
43743: LD_VAR 0 2
43747: PUSH
43748: LD_VAR 0 3
43752: ARRAY
43753: ST_TO_ADDR
// end ;
43754: GO 43663
43756: POP
43757: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43758: LD_VAR 0 1
43762: PPUSH
43763: LD_VAR 0 5
43767: PPUSH
43768: CALL_OW 135
// end ;
43772: LD_VAR 0 2
43776: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43777: LD_INT 0
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
// result := [ ] ;
43792: LD_ADDR_VAR 0 7
43796: PUSH
43797: EMPTY
43798: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43799: LD_VAR 0 1
43803: PPUSH
43804: CALL_OW 266
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: IN
43819: NOT
43820: IFFALSE 43824
// exit ;
43822: GO 45458
// if name then
43824: LD_VAR 0 3
43828: IFFALSE 43844
// SetBName ( base_dep , name ) ;
43830: LD_VAR 0 1
43834: PPUSH
43835: LD_VAR 0 3
43839: PPUSH
43840: CALL_OW 500
// base := GetBase ( base_dep ) ;
43844: LD_ADDR_VAR 0 15
43848: PUSH
43849: LD_VAR 0 1
43853: PPUSH
43854: CALL_OW 274
43858: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43859: LD_ADDR_VAR 0 16
43863: PUSH
43864: LD_VAR 0 1
43868: PPUSH
43869: CALL_OW 255
43873: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43874: LD_ADDR_VAR 0 17
43878: PUSH
43879: LD_VAR 0 1
43883: PPUSH
43884: CALL_OW 248
43888: ST_TO_ADDR
// if sources then
43889: LD_VAR 0 5
43893: IFFALSE 43940
// for i = 1 to 3 do
43895: LD_ADDR_VAR 0 8
43899: PUSH
43900: DOUBLE
43901: LD_INT 1
43903: DEC
43904: ST_TO_ADDR
43905: LD_INT 3
43907: PUSH
43908: FOR_TO
43909: IFFALSE 43938
// AddResourceType ( base , i , sources [ i ] ) ;
43911: LD_VAR 0 15
43915: PPUSH
43916: LD_VAR 0 8
43920: PPUSH
43921: LD_VAR 0 5
43925: PUSH
43926: LD_VAR 0 8
43930: ARRAY
43931: PPUSH
43932: CALL_OW 276
43936: GO 43908
43938: POP
43939: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43940: LD_ADDR_VAR 0 18
43944: PUSH
43945: LD_VAR 0 15
43949: PPUSH
43950: LD_VAR 0 2
43954: PPUSH
43955: LD_INT 1
43957: PPUSH
43958: CALL 43201 0 3
43962: ST_TO_ADDR
// InitHc ;
43963: CALL_OW 19
// InitUc ;
43967: CALL_OW 18
// uc_side := side ;
43971: LD_ADDR_OWVAR 20
43975: PUSH
43976: LD_VAR 0 16
43980: ST_TO_ADDR
// uc_nation := nation ;
43981: LD_ADDR_OWVAR 21
43985: PUSH
43986: LD_VAR 0 17
43990: ST_TO_ADDR
// if buildings then
43991: LD_VAR 0 18
43995: IFFALSE 45317
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43997: LD_ADDR_VAR 0 19
44001: PUSH
44002: LD_VAR 0 18
44006: PPUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 30
44012: PUSH
44013: LD_INT 29
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 30
44022: PUSH
44023: LD_INT 30
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: PPUSH
44035: CALL_OW 72
44039: ST_TO_ADDR
// if tmp then
44040: LD_VAR 0 19
44044: IFFALSE 44092
// for i in tmp do
44046: LD_ADDR_VAR 0 8
44050: PUSH
44051: LD_VAR 0 19
44055: PUSH
44056: FOR_IN
44057: IFFALSE 44090
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44059: LD_VAR 0 8
44063: PPUSH
44064: CALL_OW 250
44068: PPUSH
44069: LD_VAR 0 8
44073: PPUSH
44074: CALL_OW 251
44078: PPUSH
44079: LD_VAR 0 16
44083: PPUSH
44084: CALL_OW 441
44088: GO 44056
44090: POP
44091: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44092: LD_VAR 0 18
44096: PPUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 30
44102: PUSH
44103: LD_INT 32
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 30
44112: PUSH
44113: LD_INT 33
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: PPUSH
44125: CALL_OW 72
44129: IFFALSE 44217
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44131: LD_ADDR_VAR 0 8
44135: PUSH
44136: LD_VAR 0 18
44140: PPUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 30
44146: PUSH
44147: LD_INT 32
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 30
44156: PUSH
44157: LD_INT 33
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: PPUSH
44169: CALL_OW 72
44173: PUSH
44174: FOR_IN
44175: IFFALSE 44215
// begin if not GetBWeapon ( i ) then
44177: LD_VAR 0 8
44181: PPUSH
44182: CALL_OW 269
44186: NOT
44187: IFFALSE 44213
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44189: LD_VAR 0 8
44193: PPUSH
44194: LD_VAR 0 8
44198: PPUSH
44199: LD_VAR 0 2
44203: PPUSH
44204: CALL 45463 0 2
44208: PPUSH
44209: CALL_OW 431
// end ;
44213: GO 44174
44215: POP
44216: POP
// end ; for i = 1 to personel do
44217: LD_ADDR_VAR 0 8
44221: PUSH
44222: DOUBLE
44223: LD_INT 1
44225: DEC
44226: ST_TO_ADDR
44227: LD_VAR 0 6
44231: PUSH
44232: FOR_TO
44233: IFFALSE 45297
// begin if i > 4 then
44235: LD_VAR 0 8
44239: PUSH
44240: LD_INT 4
44242: GREATER
44243: IFFALSE 44247
// break ;
44245: GO 45297
// case i of 1 :
44247: LD_VAR 0 8
44251: PUSH
44252: LD_INT 1
44254: DOUBLE
44255: EQUAL
44256: IFTRUE 44260
44258: GO 44340
44260: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44261: LD_ADDR_VAR 0 12
44265: PUSH
44266: LD_VAR 0 18
44270: PPUSH
44271: LD_INT 22
44273: PUSH
44274: LD_VAR 0 16
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 58
44285: PUSH
44286: EMPTY
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: LD_INT 30
44294: PUSH
44295: LD_INT 32
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 30
44304: PUSH
44305: LD_INT 4
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 30
44314: PUSH
44315: LD_INT 5
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: PPUSH
44333: CALL_OW 72
44337: ST_TO_ADDR
44338: GO 44562
44340: LD_INT 2
44342: DOUBLE
44343: EQUAL
44344: IFTRUE 44348
44346: GO 44410
44348: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44349: LD_ADDR_VAR 0 12
44353: PUSH
44354: LD_VAR 0 18
44358: PPUSH
44359: LD_INT 22
44361: PUSH
44362: LD_VAR 0 16
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 30
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 30
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PPUSH
44403: CALL_OW 72
44407: ST_TO_ADDR
44408: GO 44562
44410: LD_INT 3
44412: DOUBLE
44413: EQUAL
44414: IFTRUE 44418
44416: GO 44480
44418: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44419: LD_ADDR_VAR 0 12
44423: PUSH
44424: LD_VAR 0 18
44428: PPUSH
44429: LD_INT 22
44431: PUSH
44432: LD_VAR 0 16
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: LD_INT 30
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 30
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PPUSH
44473: CALL_OW 72
44477: ST_TO_ADDR
44478: GO 44562
44480: LD_INT 4
44482: DOUBLE
44483: EQUAL
44484: IFTRUE 44488
44486: GO 44561
44488: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44489: LD_ADDR_VAR 0 12
44493: PUSH
44494: LD_VAR 0 18
44498: PPUSH
44499: LD_INT 22
44501: PUSH
44502: LD_VAR 0 16
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 30
44516: PUSH
44517: LD_INT 6
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 30
44526: PUSH
44527: LD_INT 7
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 30
44536: PUSH
44537: LD_INT 8
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PPUSH
44554: CALL_OW 72
44558: ST_TO_ADDR
44559: GO 44562
44561: POP
// if i = 1 then
44562: LD_VAR 0 8
44566: PUSH
44567: LD_INT 1
44569: EQUAL
44570: IFFALSE 44681
// begin tmp := [ ] ;
44572: LD_ADDR_VAR 0 19
44576: PUSH
44577: EMPTY
44578: ST_TO_ADDR
// for j in f do
44579: LD_ADDR_VAR 0 9
44583: PUSH
44584: LD_VAR 0 12
44588: PUSH
44589: FOR_IN
44590: IFFALSE 44663
// if GetBType ( j ) = b_bunker then
44592: LD_VAR 0 9
44596: PPUSH
44597: CALL_OW 266
44601: PUSH
44602: LD_INT 32
44604: EQUAL
44605: IFFALSE 44632
// tmp := Insert ( tmp , 1 , j ) else
44607: LD_ADDR_VAR 0 19
44611: PUSH
44612: LD_VAR 0 19
44616: PPUSH
44617: LD_INT 1
44619: PPUSH
44620: LD_VAR 0 9
44624: PPUSH
44625: CALL_OW 2
44629: ST_TO_ADDR
44630: GO 44661
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44632: LD_ADDR_VAR 0 19
44636: PUSH
44637: LD_VAR 0 19
44641: PPUSH
44642: LD_VAR 0 19
44646: PUSH
44647: LD_INT 1
44649: PLUS
44650: PPUSH
44651: LD_VAR 0 9
44655: PPUSH
44656: CALL_OW 2
44660: ST_TO_ADDR
44661: GO 44589
44663: POP
44664: POP
// if tmp then
44665: LD_VAR 0 19
44669: IFFALSE 44681
// f := tmp ;
44671: LD_ADDR_VAR 0 12
44675: PUSH
44676: LD_VAR 0 19
44680: ST_TO_ADDR
// end ; x := personel [ i ] ;
44681: LD_ADDR_VAR 0 13
44685: PUSH
44686: LD_VAR 0 6
44690: PUSH
44691: LD_VAR 0 8
44695: ARRAY
44696: ST_TO_ADDR
// if x = - 1 then
44697: LD_VAR 0 13
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: EQUAL
44706: IFFALSE 44915
// begin for j in f do
44708: LD_ADDR_VAR 0 9
44712: PUSH
44713: LD_VAR 0 12
44717: PUSH
44718: FOR_IN
44719: IFFALSE 44911
// repeat InitHc ;
44721: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44725: LD_VAR 0 9
44729: PPUSH
44730: CALL_OW 266
44734: PUSH
44735: LD_INT 5
44737: EQUAL
44738: IFFALSE 44808
// begin if UnitsInside ( j ) < 3 then
44740: LD_VAR 0 9
44744: PPUSH
44745: CALL_OW 313
44749: PUSH
44750: LD_INT 3
44752: LESS
44753: IFFALSE 44789
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44755: LD_INT 0
44757: PPUSH
44758: LD_INT 5
44760: PUSH
44761: LD_INT 8
44763: PUSH
44764: LD_INT 9
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: PUSH
44772: LD_VAR 0 17
44776: ARRAY
44777: PPUSH
44778: LD_VAR 0 4
44782: PPUSH
44783: CALL_OW 380
44787: GO 44806
// PrepareHuman ( false , i , skill ) ;
44789: LD_INT 0
44791: PPUSH
44792: LD_VAR 0 8
44796: PPUSH
44797: LD_VAR 0 4
44801: PPUSH
44802: CALL_OW 380
// end else
44806: GO 44825
// PrepareHuman ( false , i , skill ) ;
44808: LD_INT 0
44810: PPUSH
44811: LD_VAR 0 8
44815: PPUSH
44816: LD_VAR 0 4
44820: PPUSH
44821: CALL_OW 380
// un := CreateHuman ;
44825: LD_ADDR_VAR 0 14
44829: PUSH
44830: CALL_OW 44
44834: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44835: LD_ADDR_VAR 0 7
44839: PUSH
44840: LD_VAR 0 7
44844: PPUSH
44845: LD_INT 1
44847: PPUSH
44848: LD_VAR 0 14
44852: PPUSH
44853: CALL_OW 2
44857: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44858: LD_VAR 0 14
44862: PPUSH
44863: LD_VAR 0 9
44867: PPUSH
44868: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44872: LD_VAR 0 9
44876: PPUSH
44877: CALL_OW 313
44881: PUSH
44882: LD_INT 6
44884: EQUAL
44885: PUSH
44886: LD_VAR 0 9
44890: PPUSH
44891: CALL_OW 266
44895: PUSH
44896: LD_INT 32
44898: PUSH
44899: LD_INT 31
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: IN
44906: OR
44907: IFFALSE 44721
44909: GO 44718
44911: POP
44912: POP
// end else
44913: GO 45295
// for j = 1 to x do
44915: LD_ADDR_VAR 0 9
44919: PUSH
44920: DOUBLE
44921: LD_INT 1
44923: DEC
44924: ST_TO_ADDR
44925: LD_VAR 0 13
44929: PUSH
44930: FOR_TO
44931: IFFALSE 45293
// begin InitHc ;
44933: CALL_OW 19
// if not f then
44937: LD_VAR 0 12
44941: NOT
44942: IFFALSE 45031
// begin PrepareHuman ( false , i , skill ) ;
44944: LD_INT 0
44946: PPUSH
44947: LD_VAR 0 8
44951: PPUSH
44952: LD_VAR 0 4
44956: PPUSH
44957: CALL_OW 380
// un := CreateHuman ;
44961: LD_ADDR_VAR 0 14
44965: PUSH
44966: CALL_OW 44
44970: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44971: LD_ADDR_VAR 0 7
44975: PUSH
44976: LD_VAR 0 7
44980: PPUSH
44981: LD_INT 1
44983: PPUSH
44984: LD_VAR 0 14
44988: PPUSH
44989: CALL_OW 2
44993: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44994: LD_VAR 0 14
44998: PPUSH
44999: LD_VAR 0 1
45003: PPUSH
45004: CALL_OW 250
45008: PPUSH
45009: LD_VAR 0 1
45013: PPUSH
45014: CALL_OW 251
45018: PPUSH
45019: LD_INT 10
45021: PPUSH
45022: LD_INT 0
45024: PPUSH
45025: CALL_OW 50
// continue ;
45029: GO 44930
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45031: LD_VAR 0 12
45035: PUSH
45036: LD_INT 1
45038: ARRAY
45039: PPUSH
45040: CALL_OW 313
45044: PUSH
45045: LD_VAR 0 12
45049: PUSH
45050: LD_INT 1
45052: ARRAY
45053: PPUSH
45054: CALL_OW 266
45058: PUSH
45059: LD_INT 32
45061: PUSH
45062: LD_INT 31
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: IN
45069: AND
45070: PUSH
45071: LD_VAR 0 12
45075: PUSH
45076: LD_INT 1
45078: ARRAY
45079: PPUSH
45080: CALL_OW 313
45084: PUSH
45085: LD_INT 6
45087: EQUAL
45088: OR
45089: IFFALSE 45109
// f := Delete ( f , 1 ) ;
45091: LD_ADDR_VAR 0 12
45095: PUSH
45096: LD_VAR 0 12
45100: PPUSH
45101: LD_INT 1
45103: PPUSH
45104: CALL_OW 3
45108: ST_TO_ADDR
// if not f then
45109: LD_VAR 0 12
45113: NOT
45114: IFFALSE 45132
// begin x := x + 2 ;
45116: LD_ADDR_VAR 0 13
45120: PUSH
45121: LD_VAR 0 13
45125: PUSH
45126: LD_INT 2
45128: PLUS
45129: ST_TO_ADDR
// continue ;
45130: GO 44930
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45132: LD_VAR 0 12
45136: PUSH
45137: LD_INT 1
45139: ARRAY
45140: PPUSH
45141: CALL_OW 266
45145: PUSH
45146: LD_INT 5
45148: EQUAL
45149: IFFALSE 45223
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45151: LD_VAR 0 12
45155: PUSH
45156: LD_INT 1
45158: ARRAY
45159: PPUSH
45160: CALL_OW 313
45164: PUSH
45165: LD_INT 3
45167: LESS
45168: IFFALSE 45204
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45170: LD_INT 0
45172: PPUSH
45173: LD_INT 5
45175: PUSH
45176: LD_INT 8
45178: PUSH
45179: LD_INT 9
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: PUSH
45187: LD_VAR 0 17
45191: ARRAY
45192: PPUSH
45193: LD_VAR 0 4
45197: PPUSH
45198: CALL_OW 380
45202: GO 45221
// PrepareHuman ( false , i , skill ) ;
45204: LD_INT 0
45206: PPUSH
45207: LD_VAR 0 8
45211: PPUSH
45212: LD_VAR 0 4
45216: PPUSH
45217: CALL_OW 380
// end else
45221: GO 45240
// PrepareHuman ( false , i , skill ) ;
45223: LD_INT 0
45225: PPUSH
45226: LD_VAR 0 8
45230: PPUSH
45231: LD_VAR 0 4
45235: PPUSH
45236: CALL_OW 380
// un := CreateHuman ;
45240: LD_ADDR_VAR 0 14
45244: PUSH
45245: CALL_OW 44
45249: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45250: LD_ADDR_VAR 0 7
45254: PUSH
45255: LD_VAR 0 7
45259: PPUSH
45260: LD_INT 1
45262: PPUSH
45263: LD_VAR 0 14
45267: PPUSH
45268: CALL_OW 2
45272: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45273: LD_VAR 0 14
45277: PPUSH
45278: LD_VAR 0 12
45282: PUSH
45283: LD_INT 1
45285: ARRAY
45286: PPUSH
45287: CALL_OW 52
// end ;
45291: GO 44930
45293: POP
45294: POP
// end ;
45295: GO 44232
45297: POP
45298: POP
// result := result ^ buildings ;
45299: LD_ADDR_VAR 0 7
45303: PUSH
45304: LD_VAR 0 7
45308: PUSH
45309: LD_VAR 0 18
45313: ADD
45314: ST_TO_ADDR
// end else
45315: GO 45458
// begin for i = 1 to personel do
45317: LD_ADDR_VAR 0 8
45321: PUSH
45322: DOUBLE
45323: LD_INT 1
45325: DEC
45326: ST_TO_ADDR
45327: LD_VAR 0 6
45331: PUSH
45332: FOR_TO
45333: IFFALSE 45456
// begin if i > 4 then
45335: LD_VAR 0 8
45339: PUSH
45340: LD_INT 4
45342: GREATER
45343: IFFALSE 45347
// break ;
45345: GO 45456
// x := personel [ i ] ;
45347: LD_ADDR_VAR 0 13
45351: PUSH
45352: LD_VAR 0 6
45356: PUSH
45357: LD_VAR 0 8
45361: ARRAY
45362: ST_TO_ADDR
// if x = - 1 then
45363: LD_VAR 0 13
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: EQUAL
45372: IFFALSE 45376
// continue ;
45374: GO 45332
// PrepareHuman ( false , i , skill ) ;
45376: LD_INT 0
45378: PPUSH
45379: LD_VAR 0 8
45383: PPUSH
45384: LD_VAR 0 4
45388: PPUSH
45389: CALL_OW 380
// un := CreateHuman ;
45393: LD_ADDR_VAR 0 14
45397: PUSH
45398: CALL_OW 44
45402: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45403: LD_VAR 0 14
45407: PPUSH
45408: LD_VAR 0 1
45412: PPUSH
45413: CALL_OW 250
45417: PPUSH
45418: LD_VAR 0 1
45422: PPUSH
45423: CALL_OW 251
45427: PPUSH
45428: LD_INT 10
45430: PPUSH
45431: LD_INT 0
45433: PPUSH
45434: CALL_OW 50
// result := result ^ un ;
45438: LD_ADDR_VAR 0 7
45442: PUSH
45443: LD_VAR 0 7
45447: PUSH
45448: LD_VAR 0 14
45452: ADD
45453: ST_TO_ADDR
// end ;
45454: GO 45332
45456: POP
45457: POP
// end ; end ;
45458: LD_VAR 0 7
45462: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45463: LD_INT 0
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
// result := false ;
45481: LD_ADDR_VAR 0 3
45485: PUSH
45486: LD_INT 0
45488: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45489: LD_VAR 0 1
45493: NOT
45494: PUSH
45495: LD_VAR 0 1
45499: PPUSH
45500: CALL_OW 266
45504: PUSH
45505: LD_INT 32
45507: PUSH
45508: LD_INT 33
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: IN
45515: NOT
45516: OR
45517: IFFALSE 45521
// exit ;
45519: GO 46630
// nat := GetNation ( tower ) ;
45521: LD_ADDR_VAR 0 12
45525: PUSH
45526: LD_VAR 0 1
45530: PPUSH
45531: CALL_OW 248
45535: ST_TO_ADDR
// side := GetSide ( tower ) ;
45536: LD_ADDR_VAR 0 16
45540: PUSH
45541: LD_VAR 0 1
45545: PPUSH
45546: CALL_OW 255
45550: ST_TO_ADDR
// x := GetX ( tower ) ;
45551: LD_ADDR_VAR 0 10
45555: PUSH
45556: LD_VAR 0 1
45560: PPUSH
45561: CALL_OW 250
45565: ST_TO_ADDR
// y := GetY ( tower ) ;
45566: LD_ADDR_VAR 0 11
45570: PUSH
45571: LD_VAR 0 1
45575: PPUSH
45576: CALL_OW 251
45580: ST_TO_ADDR
// if not x or not y then
45581: LD_VAR 0 10
45585: NOT
45586: PUSH
45587: LD_VAR 0 11
45591: NOT
45592: OR
45593: IFFALSE 45597
// exit ;
45595: GO 46630
// weapon := 0 ;
45597: LD_ADDR_VAR 0 18
45601: PUSH
45602: LD_INT 0
45604: ST_TO_ADDR
// fac_list := [ ] ;
45605: LD_ADDR_VAR 0 17
45609: PUSH
45610: EMPTY
45611: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45612: LD_ADDR_VAR 0 6
45616: PUSH
45617: LD_VAR 0 1
45621: PPUSH
45622: CALL_OW 274
45626: PPUSH
45627: LD_VAR 0 2
45631: PPUSH
45632: LD_INT 0
45634: PPUSH
45635: CALL 43201 0 3
45639: PPUSH
45640: LD_INT 30
45642: PUSH
45643: LD_INT 3
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PPUSH
45650: CALL_OW 72
45654: ST_TO_ADDR
// if not factories then
45655: LD_VAR 0 6
45659: NOT
45660: IFFALSE 45664
// exit ;
45662: GO 46630
// for i in factories do
45664: LD_ADDR_VAR 0 8
45668: PUSH
45669: LD_VAR 0 6
45673: PUSH
45674: FOR_IN
45675: IFFALSE 45700
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45677: LD_ADDR_VAR 0 17
45681: PUSH
45682: LD_VAR 0 17
45686: PUSH
45687: LD_VAR 0 8
45691: PPUSH
45692: CALL_OW 478
45696: UNION
45697: ST_TO_ADDR
45698: GO 45674
45700: POP
45701: POP
// if not fac_list then
45702: LD_VAR 0 17
45706: NOT
45707: IFFALSE 45711
// exit ;
45709: GO 46630
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45711: LD_ADDR_VAR 0 5
45715: PUSH
45716: LD_INT 4
45718: PUSH
45719: LD_INT 5
45721: PUSH
45722: LD_INT 9
45724: PUSH
45725: LD_INT 10
45727: PUSH
45728: LD_INT 6
45730: PUSH
45731: LD_INT 7
45733: PUSH
45734: LD_INT 11
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 27
45748: PUSH
45749: LD_INT 28
45751: PUSH
45752: LD_INT 26
45754: PUSH
45755: LD_INT 30
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 43
45766: PUSH
45767: LD_INT 44
45769: PUSH
45770: LD_INT 46
45772: PUSH
45773: LD_INT 45
45775: PUSH
45776: LD_INT 47
45778: PUSH
45779: LD_INT 49
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: PUSH
45795: LD_VAR 0 12
45799: ARRAY
45800: ST_TO_ADDR
// list := list isect fac_list ;
45801: LD_ADDR_VAR 0 5
45805: PUSH
45806: LD_VAR 0 5
45810: PUSH
45811: LD_VAR 0 17
45815: ISECT
45816: ST_TO_ADDR
// if not list then
45817: LD_VAR 0 5
45821: NOT
45822: IFFALSE 45826
// exit ;
45824: GO 46630
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45826: LD_VAR 0 12
45830: PUSH
45831: LD_INT 3
45833: EQUAL
45834: PUSH
45835: LD_INT 49
45837: PUSH
45838: LD_VAR 0 5
45842: IN
45843: AND
45844: PUSH
45845: LD_INT 31
45847: PPUSH
45848: LD_VAR 0 16
45852: PPUSH
45853: CALL_OW 321
45857: PUSH
45858: LD_INT 2
45860: EQUAL
45861: AND
45862: IFFALSE 45922
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45864: LD_INT 22
45866: PUSH
45867: LD_VAR 0 16
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 35
45878: PUSH
45879: LD_INT 49
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 91
45888: PUSH
45889: LD_VAR 0 1
45893: PUSH
45894: LD_INT 10
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: PPUSH
45907: CALL_OW 69
45911: NOT
45912: IFFALSE 45922
// weapon := ru_time_lapser ;
45914: LD_ADDR_VAR 0 18
45918: PUSH
45919: LD_INT 49
45921: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45922: LD_VAR 0 12
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: IN
45937: PUSH
45938: LD_INT 11
45940: PUSH
45941: LD_VAR 0 5
45945: IN
45946: PUSH
45947: LD_INT 30
45949: PUSH
45950: LD_VAR 0 5
45954: IN
45955: OR
45956: AND
45957: PUSH
45958: LD_INT 6
45960: PPUSH
45961: LD_VAR 0 16
45965: PPUSH
45966: CALL_OW 321
45970: PUSH
45971: LD_INT 2
45973: EQUAL
45974: AND
45975: IFFALSE 46140
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45977: LD_INT 22
45979: PUSH
45980: LD_VAR 0 16
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 35
45994: PUSH
45995: LD_INT 11
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 35
46004: PUSH
46005: LD_INT 30
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 91
46019: PUSH
46020: LD_VAR 0 1
46024: PUSH
46025: LD_INT 18
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: PPUSH
46038: CALL_OW 69
46042: NOT
46043: PUSH
46044: LD_INT 22
46046: PUSH
46047: LD_VAR 0 16
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 30
46061: PUSH
46062: LD_INT 32
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 30
46071: PUSH
46072: LD_INT 33
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 91
46086: PUSH
46087: LD_VAR 0 1
46091: PUSH
46092: LD_INT 12
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: PPUSH
46108: CALL_OW 69
46112: PUSH
46113: LD_INT 2
46115: GREATER
46116: AND
46117: IFFALSE 46140
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46119: LD_ADDR_VAR 0 18
46123: PUSH
46124: LD_INT 11
46126: PUSH
46127: LD_INT 30
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_VAR 0 12
46138: ARRAY
46139: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46140: LD_VAR 0 18
46144: NOT
46145: PUSH
46146: LD_INT 40
46148: PPUSH
46149: LD_VAR 0 16
46153: PPUSH
46154: CALL_OW 321
46158: PUSH
46159: LD_INT 2
46161: EQUAL
46162: AND
46163: PUSH
46164: LD_INT 7
46166: PUSH
46167: LD_VAR 0 5
46171: IN
46172: PUSH
46173: LD_INT 28
46175: PUSH
46176: LD_VAR 0 5
46180: IN
46181: OR
46182: PUSH
46183: LD_INT 45
46185: PUSH
46186: LD_VAR 0 5
46190: IN
46191: OR
46192: AND
46193: IFFALSE 46447
// begin hex := GetHexInfo ( x , y ) ;
46195: LD_ADDR_VAR 0 4
46199: PUSH
46200: LD_VAR 0 10
46204: PPUSH
46205: LD_VAR 0 11
46209: PPUSH
46210: CALL_OW 546
46214: ST_TO_ADDR
// if hex [ 1 ] then
46215: LD_VAR 0 4
46219: PUSH
46220: LD_INT 1
46222: ARRAY
46223: IFFALSE 46227
// exit ;
46225: GO 46630
// height := hex [ 2 ] ;
46227: LD_ADDR_VAR 0 15
46231: PUSH
46232: LD_VAR 0 4
46236: PUSH
46237: LD_INT 2
46239: ARRAY
46240: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46241: LD_ADDR_VAR 0 14
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: LD_INT 5
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: ST_TO_ADDR
// for i in tmp do
46264: LD_ADDR_VAR 0 8
46268: PUSH
46269: LD_VAR 0 14
46273: PUSH
46274: FOR_IN
46275: IFFALSE 46445
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46277: LD_ADDR_VAR 0 9
46281: PUSH
46282: LD_VAR 0 10
46286: PPUSH
46287: LD_VAR 0 8
46291: PPUSH
46292: LD_INT 5
46294: PPUSH
46295: CALL_OW 272
46299: PUSH
46300: LD_VAR 0 11
46304: PPUSH
46305: LD_VAR 0 8
46309: PPUSH
46310: LD_INT 5
46312: PPUSH
46313: CALL_OW 273
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46322: LD_VAR 0 9
46326: PUSH
46327: LD_INT 1
46329: ARRAY
46330: PPUSH
46331: LD_VAR 0 9
46335: PUSH
46336: LD_INT 2
46338: ARRAY
46339: PPUSH
46340: CALL_OW 488
46344: IFFALSE 46443
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46346: LD_ADDR_VAR 0 4
46350: PUSH
46351: LD_VAR 0 9
46355: PUSH
46356: LD_INT 1
46358: ARRAY
46359: PPUSH
46360: LD_VAR 0 9
46364: PUSH
46365: LD_INT 2
46367: ARRAY
46368: PPUSH
46369: CALL_OW 546
46373: ST_TO_ADDR
// if hex [ 1 ] then
46374: LD_VAR 0 4
46378: PUSH
46379: LD_INT 1
46381: ARRAY
46382: IFFALSE 46386
// continue ;
46384: GO 46274
// h := hex [ 2 ] ;
46386: LD_ADDR_VAR 0 13
46390: PUSH
46391: LD_VAR 0 4
46395: PUSH
46396: LD_INT 2
46398: ARRAY
46399: ST_TO_ADDR
// if h + 7 < height then
46400: LD_VAR 0 13
46404: PUSH
46405: LD_INT 7
46407: PLUS
46408: PUSH
46409: LD_VAR 0 15
46413: LESS
46414: IFFALSE 46443
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46416: LD_ADDR_VAR 0 18
46420: PUSH
46421: LD_INT 7
46423: PUSH
46424: LD_INT 28
46426: PUSH
46427: LD_INT 45
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: PUSH
46435: LD_VAR 0 12
46439: ARRAY
46440: ST_TO_ADDR
// break ;
46441: GO 46445
// end ; end ; end ;
46443: GO 46274
46445: POP
46446: POP
// end ; if not weapon then
46447: LD_VAR 0 18
46451: NOT
46452: IFFALSE 46512
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46454: LD_ADDR_VAR 0 5
46458: PUSH
46459: LD_VAR 0 5
46463: PUSH
46464: LD_INT 11
46466: PUSH
46467: LD_INT 30
46469: PUSH
46470: LD_INT 49
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: DIFF
46478: ST_TO_ADDR
// if not list then
46479: LD_VAR 0 5
46483: NOT
46484: IFFALSE 46488
// exit ;
46486: GO 46630
// weapon := list [ rand ( 1 , list ) ] ;
46488: LD_ADDR_VAR 0 18
46492: PUSH
46493: LD_VAR 0 5
46497: PUSH
46498: LD_INT 1
46500: PPUSH
46501: LD_VAR 0 5
46505: PPUSH
46506: CALL_OW 12
46510: ARRAY
46511: ST_TO_ADDR
// end ; if weapon then
46512: LD_VAR 0 18
46516: IFFALSE 46630
// begin tmp := CostOfWeapon ( weapon ) ;
46518: LD_ADDR_VAR 0 14
46522: PUSH
46523: LD_VAR 0 18
46527: PPUSH
46528: CALL_OW 451
46532: ST_TO_ADDR
// j := GetBase ( tower ) ;
46533: LD_ADDR_VAR 0 9
46537: PUSH
46538: LD_VAR 0 1
46542: PPUSH
46543: CALL_OW 274
46547: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46548: LD_VAR 0 9
46552: PPUSH
46553: LD_INT 1
46555: PPUSH
46556: CALL_OW 275
46560: PUSH
46561: LD_VAR 0 14
46565: PUSH
46566: LD_INT 1
46568: ARRAY
46569: GREATEREQUAL
46570: PUSH
46571: LD_VAR 0 9
46575: PPUSH
46576: LD_INT 2
46578: PPUSH
46579: CALL_OW 275
46583: PUSH
46584: LD_VAR 0 14
46588: PUSH
46589: LD_INT 2
46591: ARRAY
46592: GREATEREQUAL
46593: AND
46594: PUSH
46595: LD_VAR 0 9
46599: PPUSH
46600: LD_INT 3
46602: PPUSH
46603: CALL_OW 275
46607: PUSH
46608: LD_VAR 0 14
46612: PUSH
46613: LD_INT 3
46615: ARRAY
46616: GREATEREQUAL
46617: AND
46618: IFFALSE 46630
// result := weapon ;
46620: LD_ADDR_VAR 0 3
46624: PUSH
46625: LD_VAR 0 18
46629: ST_TO_ADDR
// end ; end ;
46630: LD_VAR 0 3
46634: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46635: LD_INT 0
46637: PPUSH
46638: PPUSH
// result := true ;
46639: LD_ADDR_VAR 0 3
46643: PUSH
46644: LD_INT 1
46646: ST_TO_ADDR
// if array1 = array2 then
46647: LD_VAR 0 1
46651: PUSH
46652: LD_VAR 0 2
46656: EQUAL
46657: IFFALSE 46717
// begin for i = 1 to array1 do
46659: LD_ADDR_VAR 0 4
46663: PUSH
46664: DOUBLE
46665: LD_INT 1
46667: DEC
46668: ST_TO_ADDR
46669: LD_VAR 0 1
46673: PUSH
46674: FOR_TO
46675: IFFALSE 46713
// if array1 [ i ] <> array2 [ i ] then
46677: LD_VAR 0 1
46681: PUSH
46682: LD_VAR 0 4
46686: ARRAY
46687: PUSH
46688: LD_VAR 0 2
46692: PUSH
46693: LD_VAR 0 4
46697: ARRAY
46698: NONEQUAL
46699: IFFALSE 46711
// begin result := false ;
46701: LD_ADDR_VAR 0 3
46705: PUSH
46706: LD_INT 0
46708: ST_TO_ADDR
// break ;
46709: GO 46713
// end ;
46711: GO 46674
46713: POP
46714: POP
// end else
46715: GO 46725
// result := false ;
46717: LD_ADDR_VAR 0 3
46721: PUSH
46722: LD_INT 0
46724: ST_TO_ADDR
// end ;
46725: LD_VAR 0 3
46729: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46730: LD_INT 0
46732: PPUSH
46733: PPUSH
// if not array1 or not array2 then
46734: LD_VAR 0 1
46738: NOT
46739: PUSH
46740: LD_VAR 0 2
46744: NOT
46745: OR
46746: IFFALSE 46750
// exit ;
46748: GO 46814
// result := true ;
46750: LD_ADDR_VAR 0 3
46754: PUSH
46755: LD_INT 1
46757: ST_TO_ADDR
// for i = 1 to array1 do
46758: LD_ADDR_VAR 0 4
46762: PUSH
46763: DOUBLE
46764: LD_INT 1
46766: DEC
46767: ST_TO_ADDR
46768: LD_VAR 0 1
46772: PUSH
46773: FOR_TO
46774: IFFALSE 46812
// if array1 [ i ] <> array2 [ i ] then
46776: LD_VAR 0 1
46780: PUSH
46781: LD_VAR 0 4
46785: ARRAY
46786: PUSH
46787: LD_VAR 0 2
46791: PUSH
46792: LD_VAR 0 4
46796: ARRAY
46797: NONEQUAL
46798: IFFALSE 46810
// begin result := false ;
46800: LD_ADDR_VAR 0 3
46804: PUSH
46805: LD_INT 0
46807: ST_TO_ADDR
// break ;
46808: GO 46812
// end ;
46810: GO 46773
46812: POP
46813: POP
// end ;
46814: LD_VAR 0 3
46818: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46819: LD_INT 0
46821: PPUSH
46822: PPUSH
46823: PPUSH
// pom := GetBase ( fac ) ;
46824: LD_ADDR_VAR 0 5
46828: PUSH
46829: LD_VAR 0 1
46833: PPUSH
46834: CALL_OW 274
46838: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46839: LD_ADDR_VAR 0 4
46843: PUSH
46844: LD_VAR 0 2
46848: PUSH
46849: LD_INT 1
46851: ARRAY
46852: PPUSH
46853: LD_VAR 0 2
46857: PUSH
46858: LD_INT 2
46860: ARRAY
46861: PPUSH
46862: LD_VAR 0 2
46866: PUSH
46867: LD_INT 3
46869: ARRAY
46870: PPUSH
46871: LD_VAR 0 2
46875: PUSH
46876: LD_INT 4
46878: ARRAY
46879: PPUSH
46880: CALL_OW 449
46884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46885: LD_ADDR_VAR 0 3
46889: PUSH
46890: LD_VAR 0 5
46894: PPUSH
46895: LD_INT 1
46897: PPUSH
46898: CALL_OW 275
46902: PUSH
46903: LD_VAR 0 4
46907: PUSH
46908: LD_INT 1
46910: ARRAY
46911: GREATEREQUAL
46912: PUSH
46913: LD_VAR 0 5
46917: PPUSH
46918: LD_INT 2
46920: PPUSH
46921: CALL_OW 275
46925: PUSH
46926: LD_VAR 0 4
46930: PUSH
46931: LD_INT 2
46933: ARRAY
46934: GREATEREQUAL
46935: AND
46936: PUSH
46937: LD_VAR 0 5
46941: PPUSH
46942: LD_INT 3
46944: PPUSH
46945: CALL_OW 275
46949: PUSH
46950: LD_VAR 0 4
46954: PUSH
46955: LD_INT 3
46957: ARRAY
46958: GREATEREQUAL
46959: AND
46960: ST_TO_ADDR
// end ;
46961: LD_VAR 0 3
46965: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46966: LD_INT 0
46968: PPUSH
46969: PPUSH
46970: PPUSH
46971: PPUSH
// pom := GetBase ( building ) ;
46972: LD_ADDR_VAR 0 3
46976: PUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: CALL_OW 274
46986: ST_TO_ADDR
// if not pom then
46987: LD_VAR 0 3
46991: NOT
46992: IFFALSE 46996
// exit ;
46994: GO 47166
// btype := GetBType ( building ) ;
46996: LD_ADDR_VAR 0 5
47000: PUSH
47001: LD_VAR 0 1
47005: PPUSH
47006: CALL_OW 266
47010: ST_TO_ADDR
// if btype = b_armoury then
47011: LD_VAR 0 5
47015: PUSH
47016: LD_INT 4
47018: EQUAL
47019: IFFALSE 47029
// btype := b_barracks ;
47021: LD_ADDR_VAR 0 5
47025: PUSH
47026: LD_INT 5
47028: ST_TO_ADDR
// if btype = b_depot then
47029: LD_VAR 0 5
47033: PUSH
47034: LD_INT 0
47036: EQUAL
47037: IFFALSE 47047
// btype := b_warehouse ;
47039: LD_ADDR_VAR 0 5
47043: PUSH
47044: LD_INT 1
47046: ST_TO_ADDR
// if btype = b_workshop then
47047: LD_VAR 0 5
47051: PUSH
47052: LD_INT 2
47054: EQUAL
47055: IFFALSE 47065
// btype := b_factory ;
47057: LD_ADDR_VAR 0 5
47061: PUSH
47062: LD_INT 3
47064: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47065: LD_ADDR_VAR 0 4
47069: PUSH
47070: LD_VAR 0 5
47074: PPUSH
47075: LD_VAR 0 1
47079: PPUSH
47080: CALL_OW 248
47084: PPUSH
47085: CALL_OW 450
47089: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47090: LD_ADDR_VAR 0 2
47094: PUSH
47095: LD_VAR 0 3
47099: PPUSH
47100: LD_INT 1
47102: PPUSH
47103: CALL_OW 275
47107: PUSH
47108: LD_VAR 0 4
47112: PUSH
47113: LD_INT 1
47115: ARRAY
47116: GREATEREQUAL
47117: PUSH
47118: LD_VAR 0 3
47122: PPUSH
47123: LD_INT 2
47125: PPUSH
47126: CALL_OW 275
47130: PUSH
47131: LD_VAR 0 4
47135: PUSH
47136: LD_INT 2
47138: ARRAY
47139: GREATEREQUAL
47140: AND
47141: PUSH
47142: LD_VAR 0 3
47146: PPUSH
47147: LD_INT 3
47149: PPUSH
47150: CALL_OW 275
47154: PUSH
47155: LD_VAR 0 4
47159: PUSH
47160: LD_INT 3
47162: ARRAY
47163: GREATEREQUAL
47164: AND
47165: ST_TO_ADDR
// end ;
47166: LD_VAR 0 2
47170: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47171: LD_INT 0
47173: PPUSH
47174: PPUSH
47175: PPUSH
// pom := GetBase ( building ) ;
47176: LD_ADDR_VAR 0 4
47180: PUSH
47181: LD_VAR 0 1
47185: PPUSH
47186: CALL_OW 274
47190: ST_TO_ADDR
// if not pom then
47191: LD_VAR 0 4
47195: NOT
47196: IFFALSE 47200
// exit ;
47198: GO 47301
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47200: LD_ADDR_VAR 0 5
47204: PUSH
47205: LD_VAR 0 2
47209: PPUSH
47210: LD_VAR 0 1
47214: PPUSH
47215: CALL_OW 248
47219: PPUSH
47220: CALL_OW 450
47224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47225: LD_ADDR_VAR 0 3
47229: PUSH
47230: LD_VAR 0 4
47234: PPUSH
47235: LD_INT 1
47237: PPUSH
47238: CALL_OW 275
47242: PUSH
47243: LD_VAR 0 5
47247: PUSH
47248: LD_INT 1
47250: ARRAY
47251: GREATEREQUAL
47252: PUSH
47253: LD_VAR 0 4
47257: PPUSH
47258: LD_INT 2
47260: PPUSH
47261: CALL_OW 275
47265: PUSH
47266: LD_VAR 0 5
47270: PUSH
47271: LD_INT 2
47273: ARRAY
47274: GREATEREQUAL
47275: AND
47276: PUSH
47277: LD_VAR 0 4
47281: PPUSH
47282: LD_INT 3
47284: PPUSH
47285: CALL_OW 275
47289: PUSH
47290: LD_VAR 0 5
47294: PUSH
47295: LD_INT 3
47297: ARRAY
47298: GREATEREQUAL
47299: AND
47300: ST_TO_ADDR
// end ;
47301: LD_VAR 0 3
47305: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47306: LD_INT 0
47308: PPUSH
47309: PPUSH
47310: PPUSH
47311: PPUSH
47312: PPUSH
47313: PPUSH
47314: PPUSH
47315: PPUSH
47316: PPUSH
47317: PPUSH
47318: PPUSH
// result := false ;
47319: LD_ADDR_VAR 0 8
47323: PUSH
47324: LD_INT 0
47326: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47327: LD_VAR 0 5
47331: NOT
47332: PUSH
47333: LD_VAR 0 1
47337: NOT
47338: OR
47339: PUSH
47340: LD_VAR 0 2
47344: NOT
47345: OR
47346: PUSH
47347: LD_VAR 0 3
47351: NOT
47352: OR
47353: IFFALSE 47357
// exit ;
47355: GO 48171
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47357: LD_ADDR_VAR 0 14
47361: PUSH
47362: LD_VAR 0 1
47366: PPUSH
47367: LD_VAR 0 2
47371: PPUSH
47372: LD_VAR 0 3
47376: PPUSH
47377: LD_VAR 0 4
47381: PPUSH
47382: LD_VAR 0 5
47386: PUSH
47387: LD_INT 1
47389: ARRAY
47390: PPUSH
47391: CALL_OW 248
47395: PPUSH
47396: LD_INT 0
47398: PPUSH
47399: CALL 49404 0 6
47403: ST_TO_ADDR
// if not hexes then
47404: LD_VAR 0 14
47408: NOT
47409: IFFALSE 47413
// exit ;
47411: GO 48171
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47413: LD_ADDR_VAR 0 17
47417: PUSH
47418: LD_VAR 0 5
47422: PPUSH
47423: LD_INT 22
47425: PUSH
47426: LD_VAR 0 13
47430: PPUSH
47431: CALL_OW 255
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: LD_INT 30
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 30
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PPUSH
47472: CALL_OW 72
47476: ST_TO_ADDR
// for i = 1 to hexes do
47477: LD_ADDR_VAR 0 9
47481: PUSH
47482: DOUBLE
47483: LD_INT 1
47485: DEC
47486: ST_TO_ADDR
47487: LD_VAR 0 14
47491: PUSH
47492: FOR_TO
47493: IFFALSE 48169
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47495: LD_ADDR_VAR 0 13
47499: PUSH
47500: LD_VAR 0 14
47504: PUSH
47505: LD_VAR 0 9
47509: ARRAY
47510: PUSH
47511: LD_INT 1
47513: ARRAY
47514: PPUSH
47515: LD_VAR 0 14
47519: PUSH
47520: LD_VAR 0 9
47524: ARRAY
47525: PUSH
47526: LD_INT 2
47528: ARRAY
47529: PPUSH
47530: CALL_OW 428
47534: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47535: LD_VAR 0 14
47539: PUSH
47540: LD_VAR 0 9
47544: ARRAY
47545: PUSH
47546: LD_INT 1
47548: ARRAY
47549: PPUSH
47550: LD_VAR 0 14
47554: PUSH
47555: LD_VAR 0 9
47559: ARRAY
47560: PUSH
47561: LD_INT 2
47563: ARRAY
47564: PPUSH
47565: CALL_OW 351
47569: PUSH
47570: LD_VAR 0 14
47574: PUSH
47575: LD_VAR 0 9
47579: ARRAY
47580: PUSH
47581: LD_INT 1
47583: ARRAY
47584: PPUSH
47585: LD_VAR 0 14
47589: PUSH
47590: LD_VAR 0 9
47594: ARRAY
47595: PUSH
47596: LD_INT 2
47598: ARRAY
47599: PPUSH
47600: CALL_OW 488
47604: NOT
47605: OR
47606: PUSH
47607: LD_VAR 0 13
47611: PPUSH
47612: CALL_OW 247
47616: PUSH
47617: LD_INT 3
47619: EQUAL
47620: OR
47621: IFFALSE 47627
// exit ;
47623: POP
47624: POP
47625: GO 48171
// if not tmp then
47627: LD_VAR 0 13
47631: NOT
47632: IFFALSE 47636
// continue ;
47634: GO 47492
// result := true ;
47636: LD_ADDR_VAR 0 8
47640: PUSH
47641: LD_INT 1
47643: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47644: LD_VAR 0 6
47648: PUSH
47649: LD_VAR 0 13
47653: PPUSH
47654: CALL_OW 247
47658: PUSH
47659: LD_INT 2
47661: EQUAL
47662: AND
47663: PUSH
47664: LD_VAR 0 13
47668: PPUSH
47669: CALL_OW 263
47673: PUSH
47674: LD_INT 1
47676: EQUAL
47677: AND
47678: IFFALSE 47842
// begin if IsDrivenBy ( tmp ) then
47680: LD_VAR 0 13
47684: PPUSH
47685: CALL_OW 311
47689: IFFALSE 47693
// continue ;
47691: GO 47492
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47693: LD_VAR 0 6
47697: PPUSH
47698: LD_INT 3
47700: PUSH
47701: LD_INT 60
47703: PUSH
47704: EMPTY
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 3
47713: PUSH
47714: LD_INT 55
47716: PUSH
47717: EMPTY
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PPUSH
47728: CALL_OW 72
47732: IFFALSE 47840
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47734: LD_ADDR_VAR 0 18
47738: PUSH
47739: LD_VAR 0 6
47743: PPUSH
47744: LD_INT 3
47746: PUSH
47747: LD_INT 60
47749: PUSH
47750: EMPTY
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: LD_INT 55
47762: PUSH
47763: EMPTY
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PPUSH
47774: CALL_OW 72
47778: PUSH
47779: LD_INT 1
47781: ARRAY
47782: ST_TO_ADDR
// if IsInUnit ( driver ) then
47783: LD_VAR 0 18
47787: PPUSH
47788: CALL_OW 310
47792: IFFALSE 47803
// ComExit ( driver ) ;
47794: LD_VAR 0 18
47798: PPUSH
47799: CALL 73184 0 1
// AddComEnterUnit ( driver , tmp ) ;
47803: LD_VAR 0 18
47807: PPUSH
47808: LD_VAR 0 13
47812: PPUSH
47813: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47817: LD_VAR 0 18
47821: PPUSH
47822: LD_VAR 0 7
47826: PPUSH
47827: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47831: LD_VAR 0 18
47835: PPUSH
47836: CALL_OW 181
// end ; continue ;
47840: GO 47492
// end ; if not cleaners or not tmp in cleaners then
47842: LD_VAR 0 6
47846: NOT
47847: PUSH
47848: LD_VAR 0 13
47852: PUSH
47853: LD_VAR 0 6
47857: IN
47858: NOT
47859: OR
47860: IFFALSE 48167
// begin if dep then
47862: LD_VAR 0 17
47866: IFFALSE 48002
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47868: LD_ADDR_VAR 0 16
47872: PUSH
47873: LD_VAR 0 17
47877: PUSH
47878: LD_INT 1
47880: ARRAY
47881: PPUSH
47882: CALL_OW 250
47886: PPUSH
47887: LD_VAR 0 17
47891: PUSH
47892: LD_INT 1
47894: ARRAY
47895: PPUSH
47896: CALL_OW 254
47900: PPUSH
47901: LD_INT 5
47903: PPUSH
47904: CALL_OW 272
47908: PUSH
47909: LD_VAR 0 17
47913: PUSH
47914: LD_INT 1
47916: ARRAY
47917: PPUSH
47918: CALL_OW 251
47922: PPUSH
47923: LD_VAR 0 17
47927: PUSH
47928: LD_INT 1
47930: ARRAY
47931: PPUSH
47932: CALL_OW 254
47936: PPUSH
47937: LD_INT 5
47939: PPUSH
47940: CALL_OW 273
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47949: LD_VAR 0 16
47953: PUSH
47954: LD_INT 1
47956: ARRAY
47957: PPUSH
47958: LD_VAR 0 16
47962: PUSH
47963: LD_INT 2
47965: ARRAY
47966: PPUSH
47967: CALL_OW 488
47971: IFFALSE 48002
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47973: LD_VAR 0 13
47977: PPUSH
47978: LD_VAR 0 16
47982: PUSH
47983: LD_INT 1
47985: ARRAY
47986: PPUSH
47987: LD_VAR 0 16
47991: PUSH
47992: LD_INT 2
47994: ARRAY
47995: PPUSH
47996: CALL_OW 111
// continue ;
48000: GO 47492
// end ; end ; r := GetDir ( tmp ) ;
48002: LD_ADDR_VAR 0 15
48006: PUSH
48007: LD_VAR 0 13
48011: PPUSH
48012: CALL_OW 254
48016: ST_TO_ADDR
// if r = 5 then
48017: LD_VAR 0 15
48021: PUSH
48022: LD_INT 5
48024: EQUAL
48025: IFFALSE 48035
// r := 0 ;
48027: LD_ADDR_VAR 0 15
48031: PUSH
48032: LD_INT 0
48034: ST_TO_ADDR
// for j = r to 5 do
48035: LD_ADDR_VAR 0 10
48039: PUSH
48040: DOUBLE
48041: LD_VAR 0 15
48045: DEC
48046: ST_TO_ADDR
48047: LD_INT 5
48049: PUSH
48050: FOR_TO
48051: IFFALSE 48165
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48053: LD_ADDR_VAR 0 11
48057: PUSH
48058: LD_VAR 0 13
48062: PPUSH
48063: CALL_OW 250
48067: PPUSH
48068: LD_VAR 0 10
48072: PPUSH
48073: LD_INT 2
48075: PPUSH
48076: CALL_OW 272
48080: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48081: LD_ADDR_VAR 0 12
48085: PUSH
48086: LD_VAR 0 13
48090: PPUSH
48091: CALL_OW 251
48095: PPUSH
48096: LD_VAR 0 10
48100: PPUSH
48101: LD_INT 2
48103: PPUSH
48104: CALL_OW 273
48108: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48109: LD_VAR 0 11
48113: PPUSH
48114: LD_VAR 0 12
48118: PPUSH
48119: CALL_OW 488
48123: PUSH
48124: LD_VAR 0 11
48128: PPUSH
48129: LD_VAR 0 12
48133: PPUSH
48134: CALL_OW 428
48138: NOT
48139: AND
48140: IFFALSE 48163
// begin ComMoveXY ( tmp , _x , _y ) ;
48142: LD_VAR 0 13
48146: PPUSH
48147: LD_VAR 0 11
48151: PPUSH
48152: LD_VAR 0 12
48156: PPUSH
48157: CALL_OW 111
// break ;
48161: GO 48165
// end ; end ;
48163: GO 48050
48165: POP
48166: POP
// end ; end ;
48167: GO 47492
48169: POP
48170: POP
// end ;
48171: LD_VAR 0 8
48175: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48176: LD_INT 0
48178: PPUSH
// result := true ;
48179: LD_ADDR_VAR 0 3
48183: PUSH
48184: LD_INT 1
48186: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48187: LD_VAR 0 2
48191: PUSH
48192: LD_INT 24
48194: DOUBLE
48195: EQUAL
48196: IFTRUE 48206
48198: LD_INT 33
48200: DOUBLE
48201: EQUAL
48202: IFTRUE 48206
48204: GO 48231
48206: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48207: LD_ADDR_VAR 0 3
48211: PUSH
48212: LD_INT 32
48214: PPUSH
48215: LD_VAR 0 1
48219: PPUSH
48220: CALL_OW 321
48224: PUSH
48225: LD_INT 2
48227: EQUAL
48228: ST_TO_ADDR
48229: GO 48547
48231: LD_INT 20
48233: DOUBLE
48234: EQUAL
48235: IFTRUE 48239
48237: GO 48264
48239: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48240: LD_ADDR_VAR 0 3
48244: PUSH
48245: LD_INT 6
48247: PPUSH
48248: LD_VAR 0 1
48252: PPUSH
48253: CALL_OW 321
48257: PUSH
48258: LD_INT 2
48260: EQUAL
48261: ST_TO_ADDR
48262: GO 48547
48264: LD_INT 22
48266: DOUBLE
48267: EQUAL
48268: IFTRUE 48278
48270: LD_INT 36
48272: DOUBLE
48273: EQUAL
48274: IFTRUE 48278
48276: GO 48303
48278: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48279: LD_ADDR_VAR 0 3
48283: PUSH
48284: LD_INT 15
48286: PPUSH
48287: LD_VAR 0 1
48291: PPUSH
48292: CALL_OW 321
48296: PUSH
48297: LD_INT 2
48299: EQUAL
48300: ST_TO_ADDR
48301: GO 48547
48303: LD_INT 30
48305: DOUBLE
48306: EQUAL
48307: IFTRUE 48311
48309: GO 48336
48311: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48312: LD_ADDR_VAR 0 3
48316: PUSH
48317: LD_INT 20
48319: PPUSH
48320: LD_VAR 0 1
48324: PPUSH
48325: CALL_OW 321
48329: PUSH
48330: LD_INT 2
48332: EQUAL
48333: ST_TO_ADDR
48334: GO 48547
48336: LD_INT 28
48338: DOUBLE
48339: EQUAL
48340: IFTRUE 48350
48342: LD_INT 21
48344: DOUBLE
48345: EQUAL
48346: IFTRUE 48350
48348: GO 48375
48350: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48351: LD_ADDR_VAR 0 3
48355: PUSH
48356: LD_INT 21
48358: PPUSH
48359: LD_VAR 0 1
48363: PPUSH
48364: CALL_OW 321
48368: PUSH
48369: LD_INT 2
48371: EQUAL
48372: ST_TO_ADDR
48373: GO 48547
48375: LD_INT 16
48377: DOUBLE
48378: EQUAL
48379: IFTRUE 48383
48381: GO 48408
48383: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48384: LD_ADDR_VAR 0 3
48388: PUSH
48389: LD_INT 84
48391: PPUSH
48392: LD_VAR 0 1
48396: PPUSH
48397: CALL_OW 321
48401: PUSH
48402: LD_INT 2
48404: EQUAL
48405: ST_TO_ADDR
48406: GO 48547
48408: LD_INT 19
48410: DOUBLE
48411: EQUAL
48412: IFTRUE 48422
48414: LD_INT 23
48416: DOUBLE
48417: EQUAL
48418: IFTRUE 48422
48420: GO 48447
48422: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48423: LD_ADDR_VAR 0 3
48427: PUSH
48428: LD_INT 83
48430: PPUSH
48431: LD_VAR 0 1
48435: PPUSH
48436: CALL_OW 321
48440: PUSH
48441: LD_INT 2
48443: EQUAL
48444: ST_TO_ADDR
48445: GO 48547
48447: LD_INT 17
48449: DOUBLE
48450: EQUAL
48451: IFTRUE 48455
48453: GO 48480
48455: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48456: LD_ADDR_VAR 0 3
48460: PUSH
48461: LD_INT 39
48463: PPUSH
48464: LD_VAR 0 1
48468: PPUSH
48469: CALL_OW 321
48473: PUSH
48474: LD_INT 2
48476: EQUAL
48477: ST_TO_ADDR
48478: GO 48547
48480: LD_INT 18
48482: DOUBLE
48483: EQUAL
48484: IFTRUE 48488
48486: GO 48513
48488: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48489: LD_ADDR_VAR 0 3
48493: PUSH
48494: LD_INT 40
48496: PPUSH
48497: LD_VAR 0 1
48501: PPUSH
48502: CALL_OW 321
48506: PUSH
48507: LD_INT 2
48509: EQUAL
48510: ST_TO_ADDR
48511: GO 48547
48513: LD_INT 27
48515: DOUBLE
48516: EQUAL
48517: IFTRUE 48521
48519: GO 48546
48521: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48522: LD_ADDR_VAR 0 3
48526: PUSH
48527: LD_INT 35
48529: PPUSH
48530: LD_VAR 0 1
48534: PPUSH
48535: CALL_OW 321
48539: PUSH
48540: LD_INT 2
48542: EQUAL
48543: ST_TO_ADDR
48544: GO 48547
48546: POP
// end ;
48547: LD_VAR 0 3
48551: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48552: LD_INT 0
48554: PPUSH
48555: PPUSH
48556: PPUSH
48557: PPUSH
48558: PPUSH
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
// result := false ;
48565: LD_ADDR_VAR 0 6
48569: PUSH
48570: LD_INT 0
48572: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48573: LD_VAR 0 1
48577: NOT
48578: PUSH
48579: LD_VAR 0 1
48583: PPUSH
48584: CALL_OW 266
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: IN
48599: NOT
48600: OR
48601: PUSH
48602: LD_VAR 0 2
48606: NOT
48607: OR
48608: PUSH
48609: LD_VAR 0 5
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: LD_INT 4
48628: PUSH
48629: LD_INT 5
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: IN
48640: NOT
48641: OR
48642: PUSH
48643: LD_VAR 0 3
48647: PPUSH
48648: LD_VAR 0 4
48652: PPUSH
48653: CALL_OW 488
48657: NOT
48658: OR
48659: IFFALSE 48663
// exit ;
48661: GO 49399
// side := GetSide ( depot ) ;
48663: LD_ADDR_VAR 0 9
48667: PUSH
48668: LD_VAR 0 1
48672: PPUSH
48673: CALL_OW 255
48677: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48678: LD_VAR 0 9
48682: PPUSH
48683: LD_VAR 0 2
48687: PPUSH
48688: CALL 48176 0 2
48692: NOT
48693: IFFALSE 48697
// exit ;
48695: GO 49399
// pom := GetBase ( depot ) ;
48697: LD_ADDR_VAR 0 10
48701: PUSH
48702: LD_VAR 0 1
48706: PPUSH
48707: CALL_OW 274
48711: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48712: LD_ADDR_VAR 0 11
48716: PUSH
48717: LD_VAR 0 2
48721: PPUSH
48722: LD_VAR 0 1
48726: PPUSH
48727: CALL_OW 248
48731: PPUSH
48732: CALL_OW 450
48736: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48737: LD_VAR 0 10
48741: PPUSH
48742: LD_INT 1
48744: PPUSH
48745: CALL_OW 275
48749: PUSH
48750: LD_VAR 0 11
48754: PUSH
48755: LD_INT 1
48757: ARRAY
48758: GREATEREQUAL
48759: PUSH
48760: LD_VAR 0 10
48764: PPUSH
48765: LD_INT 2
48767: PPUSH
48768: CALL_OW 275
48772: PUSH
48773: LD_VAR 0 11
48777: PUSH
48778: LD_INT 2
48780: ARRAY
48781: GREATEREQUAL
48782: AND
48783: PUSH
48784: LD_VAR 0 10
48788: PPUSH
48789: LD_INT 3
48791: PPUSH
48792: CALL_OW 275
48796: PUSH
48797: LD_VAR 0 11
48801: PUSH
48802: LD_INT 3
48804: ARRAY
48805: GREATEREQUAL
48806: AND
48807: NOT
48808: IFFALSE 48812
// exit ;
48810: GO 49399
// if GetBType ( depot ) = b_depot then
48812: LD_VAR 0 1
48816: PPUSH
48817: CALL_OW 266
48821: PUSH
48822: LD_INT 0
48824: EQUAL
48825: IFFALSE 48837
// dist := 28 else
48827: LD_ADDR_VAR 0 14
48831: PUSH
48832: LD_INT 28
48834: ST_TO_ADDR
48835: GO 48845
// dist := 36 ;
48837: LD_ADDR_VAR 0 14
48841: PUSH
48842: LD_INT 36
48844: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48845: LD_VAR 0 1
48849: PPUSH
48850: LD_VAR 0 3
48854: PPUSH
48855: LD_VAR 0 4
48859: PPUSH
48860: CALL_OW 297
48864: PUSH
48865: LD_VAR 0 14
48869: GREATER
48870: IFFALSE 48874
// exit ;
48872: GO 49399
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48874: LD_ADDR_VAR 0 12
48878: PUSH
48879: LD_VAR 0 2
48883: PPUSH
48884: LD_VAR 0 3
48888: PPUSH
48889: LD_VAR 0 4
48893: PPUSH
48894: LD_VAR 0 5
48898: PPUSH
48899: LD_VAR 0 1
48903: PPUSH
48904: CALL_OW 248
48908: PPUSH
48909: LD_INT 0
48911: PPUSH
48912: CALL 49404 0 6
48916: ST_TO_ADDR
// if not hexes then
48917: LD_VAR 0 12
48921: NOT
48922: IFFALSE 48926
// exit ;
48924: GO 49399
// hex := GetHexInfo ( x , y ) ;
48926: LD_ADDR_VAR 0 15
48930: PUSH
48931: LD_VAR 0 3
48935: PPUSH
48936: LD_VAR 0 4
48940: PPUSH
48941: CALL_OW 546
48945: ST_TO_ADDR
// if hex [ 1 ] then
48946: LD_VAR 0 15
48950: PUSH
48951: LD_INT 1
48953: ARRAY
48954: IFFALSE 48958
// exit ;
48956: GO 49399
// height := hex [ 2 ] ;
48958: LD_ADDR_VAR 0 13
48962: PUSH
48963: LD_VAR 0 15
48967: PUSH
48968: LD_INT 2
48970: ARRAY
48971: ST_TO_ADDR
// for i = 1 to hexes do
48972: LD_ADDR_VAR 0 7
48976: PUSH
48977: DOUBLE
48978: LD_INT 1
48980: DEC
48981: ST_TO_ADDR
48982: LD_VAR 0 12
48986: PUSH
48987: FOR_TO
48988: IFFALSE 49318
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48990: LD_VAR 0 12
48994: PUSH
48995: LD_VAR 0 7
48999: ARRAY
49000: PUSH
49001: LD_INT 1
49003: ARRAY
49004: PPUSH
49005: LD_VAR 0 12
49009: PUSH
49010: LD_VAR 0 7
49014: ARRAY
49015: PUSH
49016: LD_INT 2
49018: ARRAY
49019: PPUSH
49020: CALL_OW 488
49024: NOT
49025: PUSH
49026: LD_VAR 0 12
49030: PUSH
49031: LD_VAR 0 7
49035: ARRAY
49036: PUSH
49037: LD_INT 1
49039: ARRAY
49040: PPUSH
49041: LD_VAR 0 12
49045: PUSH
49046: LD_VAR 0 7
49050: ARRAY
49051: PUSH
49052: LD_INT 2
49054: ARRAY
49055: PPUSH
49056: CALL_OW 428
49060: PUSH
49061: LD_INT 0
49063: GREATER
49064: OR
49065: PUSH
49066: LD_VAR 0 12
49070: PUSH
49071: LD_VAR 0 7
49075: ARRAY
49076: PUSH
49077: LD_INT 1
49079: ARRAY
49080: PPUSH
49081: LD_VAR 0 12
49085: PUSH
49086: LD_VAR 0 7
49090: ARRAY
49091: PUSH
49092: LD_INT 2
49094: ARRAY
49095: PPUSH
49096: CALL_OW 351
49100: OR
49101: IFFALSE 49107
// exit ;
49103: POP
49104: POP
49105: GO 49399
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49107: LD_ADDR_VAR 0 8
49111: PUSH
49112: LD_VAR 0 12
49116: PUSH
49117: LD_VAR 0 7
49121: ARRAY
49122: PUSH
49123: LD_INT 1
49125: ARRAY
49126: PPUSH
49127: LD_VAR 0 12
49131: PUSH
49132: LD_VAR 0 7
49136: ARRAY
49137: PUSH
49138: LD_INT 2
49140: ARRAY
49141: PPUSH
49142: CALL_OW 546
49146: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49147: LD_VAR 0 8
49151: PUSH
49152: LD_INT 1
49154: ARRAY
49155: PUSH
49156: LD_VAR 0 8
49160: PUSH
49161: LD_INT 2
49163: ARRAY
49164: PUSH
49165: LD_VAR 0 13
49169: PUSH
49170: LD_INT 2
49172: PLUS
49173: GREATER
49174: OR
49175: PUSH
49176: LD_VAR 0 8
49180: PUSH
49181: LD_INT 2
49183: ARRAY
49184: PUSH
49185: LD_VAR 0 13
49189: PUSH
49190: LD_INT 2
49192: MINUS
49193: LESS
49194: OR
49195: PUSH
49196: LD_VAR 0 8
49200: PUSH
49201: LD_INT 3
49203: ARRAY
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 8
49210: PUSH
49211: LD_INT 9
49213: PUSH
49214: LD_INT 10
49216: PUSH
49217: LD_INT 11
49219: PUSH
49220: LD_INT 12
49222: PUSH
49223: LD_INT 13
49225: PUSH
49226: LD_INT 16
49228: PUSH
49229: LD_INT 17
49231: PUSH
49232: LD_INT 18
49234: PUSH
49235: LD_INT 19
49237: PUSH
49238: LD_INT 20
49240: PUSH
49241: LD_INT 21
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: IN
49259: NOT
49260: OR
49261: PUSH
49262: LD_VAR 0 8
49266: PUSH
49267: LD_INT 5
49269: ARRAY
49270: NOT
49271: OR
49272: PUSH
49273: LD_VAR 0 8
49277: PUSH
49278: LD_INT 6
49280: ARRAY
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 7
49290: PUSH
49291: LD_INT 9
49293: PUSH
49294: LD_INT 10
49296: PUSH
49297: LD_INT 11
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: IN
49308: NOT
49309: OR
49310: IFFALSE 49316
// exit ;
49312: POP
49313: POP
49314: GO 49399
// end ;
49316: GO 48987
49318: POP
49319: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49320: LD_VAR 0 9
49324: PPUSH
49325: LD_VAR 0 3
49329: PPUSH
49330: LD_VAR 0 4
49334: PPUSH
49335: LD_INT 20
49337: PPUSH
49338: CALL 41351 0 4
49342: PUSH
49343: LD_INT 4
49345: ARRAY
49346: IFFALSE 49350
// exit ;
49348: GO 49399
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49350: LD_VAR 0 2
49354: PUSH
49355: LD_INT 29
49357: PUSH
49358: LD_INT 30
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: IN
49365: PUSH
49366: LD_VAR 0 3
49370: PPUSH
49371: LD_VAR 0 4
49375: PPUSH
49376: LD_VAR 0 9
49380: PPUSH
49381: CALL_OW 440
49385: NOT
49386: AND
49387: IFFALSE 49391
// exit ;
49389: GO 49399
// result := true ;
49391: LD_ADDR_VAR 0 6
49395: PUSH
49396: LD_INT 1
49398: ST_TO_ADDR
// end ;
49399: LD_VAR 0 6
49403: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49404: LD_INT 0
49406: PPUSH
49407: PPUSH
49408: PPUSH
49409: PPUSH
49410: PPUSH
49411: PPUSH
49412: PPUSH
49413: PPUSH
49414: PPUSH
49415: PPUSH
49416: PPUSH
49417: PPUSH
49418: PPUSH
49419: PPUSH
49420: PPUSH
49421: PPUSH
49422: PPUSH
49423: PPUSH
49424: PPUSH
49425: PPUSH
49426: PPUSH
49427: PPUSH
49428: PPUSH
49429: PPUSH
49430: PPUSH
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
49443: PPUSH
49444: PPUSH
49445: PPUSH
49446: PPUSH
49447: PPUSH
49448: PPUSH
49449: PPUSH
49450: PPUSH
49451: PPUSH
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
49462: PPUSH
49463: PPUSH
// result = [ ] ;
49464: LD_ADDR_VAR 0 7
49468: PUSH
49469: EMPTY
49470: ST_TO_ADDR
// temp_list = [ ] ;
49471: LD_ADDR_VAR 0 9
49475: PUSH
49476: EMPTY
49477: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49478: LD_VAR 0 4
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: LD_INT 4
49497: PUSH
49498: LD_INT 5
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: IN
49509: NOT
49510: PUSH
49511: LD_VAR 0 1
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: IN
49526: PUSH
49527: LD_VAR 0 5
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 3
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: LIST
49545: IN
49546: NOT
49547: AND
49548: OR
49549: IFFALSE 49553
// exit ;
49551: GO 67944
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49553: LD_VAR 0 1
49557: PUSH
49558: LD_INT 6
49560: PUSH
49561: LD_INT 7
49563: PUSH
49564: LD_INT 8
49566: PUSH
49567: LD_INT 13
49569: PUSH
49570: LD_INT 12
49572: PUSH
49573: LD_INT 15
49575: PUSH
49576: LD_INT 11
49578: PUSH
49579: LD_INT 14
49581: PUSH
49582: LD_INT 10
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: IN
49596: IFFALSE 49606
// btype = b_lab ;
49598: LD_ADDR_VAR 0 1
49602: PUSH
49603: LD_INT 6
49605: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49606: LD_VAR 0 6
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: LIST
49624: IN
49625: NOT
49626: PUSH
49627: LD_VAR 0 1
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 3
49643: PUSH
49644: LD_INT 6
49646: PUSH
49647: LD_INT 36
49649: PUSH
49650: LD_INT 4
49652: PUSH
49653: LD_INT 5
49655: PUSH
49656: LD_INT 31
49658: PUSH
49659: LD_INT 32
49661: PUSH
49662: LD_INT 33
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: IN
49678: NOT
49679: PUSH
49680: LD_VAR 0 6
49684: PUSH
49685: LD_INT 1
49687: EQUAL
49688: AND
49689: OR
49690: PUSH
49691: LD_VAR 0 1
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_INT 3
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: IN
49706: NOT
49707: PUSH
49708: LD_VAR 0 6
49712: PUSH
49713: LD_INT 2
49715: EQUAL
49716: AND
49717: OR
49718: IFFALSE 49728
// mode = 0 ;
49720: LD_ADDR_VAR 0 6
49724: PUSH
49725: LD_INT 0
49727: ST_TO_ADDR
// case mode of 0 :
49728: LD_VAR 0 6
49732: PUSH
49733: LD_INT 0
49735: DOUBLE
49736: EQUAL
49737: IFTRUE 49741
49739: GO 61194
49741: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49742: LD_ADDR_VAR 0 11
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49935: LD_ADDR_VAR 0 12
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50131: LD_ADDR_VAR 0 13
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 3
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 3
50290: NEG
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: NEG
50303: PUSH
50304: LD_INT 3
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50330: LD_ADDR_VAR 0 14
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50526: LD_ADDR_VAR 0 15
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50719: LD_ADDR_VAR 0 16
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50912: LD_ADDR_VAR 0 17
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51142: LD_ADDR_VAR 0 18
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51372: LD_ADDR_VAR 0 19
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51602: LD_ADDR_VAR 0 20
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51832: LD_ADDR_VAR 0 21
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52062: LD_ADDR_VAR 0 22
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52292: LD_ADDR_VAR 0 23
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 3
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52572: LD_ADDR_VAR 0 24
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52848: LD_ADDR_VAR 0 25
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53122: LD_ADDR_VAR 0 26
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53398: LD_ADDR_VAR 0 27
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53678: LD_ADDR_VAR 0 28
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 3
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53960: LD_ADDR_VAR 0 29
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 3
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54239: LD_ADDR_VAR 0 30
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54517: LD_ADDR_VAR 0 31
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: NEG
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54795: LD_ADDR_VAR 0 32
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55073: LD_ADDR_VAR 0 33
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: LD_INT 3
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55352: LD_ADDR_VAR 0 34
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55632: LD_ADDR_VAR 0 35
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55744: LD_ADDR_VAR 0 36
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55856: LD_ADDR_VAR 0 37
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55968: LD_ADDR_VAR 0 38
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56080: LD_ADDR_VAR 0 39
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56192: LD_ADDR_VAR 0 40
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56304: LD_ADDR_VAR 0 41
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: NEG
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 3
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56654: LD_ADDR_VAR 0 42
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 3
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57004: LD_ADDR_VAR 0 43
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 3
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57352: LD_ADDR_VAR 0 44
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: LD_INT 3
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: LD_INT 3
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 3
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: NEG
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57702: LD_ADDR_VAR 0 45
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 3
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58052: LD_ADDR_VAR 0 46
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 3
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 3
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58400: LD_ADDR_VAR 0 47
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58551: LD_ADDR_VAR 0 48
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58698: LD_ADDR_VAR 0 49
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58842: LD_ADDR_VAR 0 50
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58986: LD_ADDR_VAR 0 51
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59133: LD_ADDR_VAR 0 52
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59284: LD_ADDR_VAR 0 53
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 2
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59514: LD_ADDR_VAR 0 54
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 2
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59744: LD_ADDR_VAR 0 55
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59974: LD_ADDR_VAR 0 56
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: NEG
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60204: LD_ADDR_VAR 0 57
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60434: LD_ADDR_VAR 0 58
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60664: LD_ADDR_VAR 0 59
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60752: LD_ADDR_VAR 0 60
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60840: LD_ADDR_VAR 0 61
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60928: LD_ADDR_VAR 0 62
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61016: LD_ADDR_VAR 0 63
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61104: LD_ADDR_VAR 0 64
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: ST_TO_ADDR
// end ; 1 :
61192: GO 67089
61194: LD_INT 1
61196: DOUBLE
61197: EQUAL
61198: IFTRUE 61202
61200: GO 63825
61202: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61203: LD_ADDR_VAR 0 11
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 3
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 3
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61247: LD_ADDR_VAR 0 12
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61288: LD_ADDR_VAR 0 13
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: LD_INT 3
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 3
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61328: LD_ADDR_VAR 0 14
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 3
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: LD_INT 3
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61369: LD_ADDR_VAR 0 15
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61413: LD_ADDR_VAR 0 16
61417: PUSH
61418: LD_INT 2
61420: NEG
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: LD_INT 2
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61459: LD_ADDR_VAR 0 17
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 2
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61503: LD_ADDR_VAR 0 18
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61544: LD_ADDR_VAR 0 19
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61584: LD_ADDR_VAR 0 20
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: LD_INT 3
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: LIST
61624: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61625: LD_ADDR_VAR 0 21
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: NEG
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 3
61654: NEG
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: LIST
61668: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61669: LD_ADDR_VAR 0 22
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 3
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: LD_INT 3
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61715: LD_ADDR_VAR 0 23
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 4
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: LD_INT 3
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: LIST
61758: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61759: LD_ADDR_VAR 0 24
61763: PUSH
61764: LD_INT 3
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 3
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 4
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61800: LD_ADDR_VAR 0 25
61804: PUSH
61805: LD_INT 3
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 4
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: PUSH
61828: LD_INT 4
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: LIST
61839: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61840: LD_ADDR_VAR 0 26
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 4
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: LD_INT 3
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: LIST
61880: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61881: LD_ADDR_VAR 0 27
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: NEG
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 4
61910: NEG
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: LIST
61924: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61925: LD_ADDR_VAR 0 28
61929: PUSH
61930: LD_INT 3
61932: NEG
61933: PUSH
61934: LD_INT 3
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: NEG
61945: PUSH
61946: LD_INT 4
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: NEG
61957: PUSH
61958: LD_INT 3
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: LIST
61970: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61971: LD_ADDR_VAR 0 29
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: LD_INT 3
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: LD_INT 3
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: LD_INT 2
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 4
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 4
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: LD_INT 3
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: LD_INT 5
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 5
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: LD_INT 4
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: LD_INT 6
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 6
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 5
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62126: LD_ADDR_VAR 0 30
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: LD_INT 1
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 4
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 4
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 4
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 5
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 5
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 5
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 6
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 6
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62269: LD_ADDR_VAR 0 31
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 3
62286: PUSH
62287: LD_INT 3
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 4
62306: PUSH
62307: LD_INT 3
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 4
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 3
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 5
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 5
62346: PUSH
62347: LD_INT 5
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 4
62356: PUSH
62357: LD_INT 5
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 6
62366: PUSH
62367: LD_INT 5
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 6
62376: PUSH
62377: LD_INT 6
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 5
62386: PUSH
62387: LD_INT 6
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62408: LD_ADDR_VAR 0 32
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 4
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 4
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: LD_INT 5
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 5
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 6
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 6
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 5
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62551: LD_ADDR_VAR 0 33
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 3
62569: NEG
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: NEG
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: NEG
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 4
62603: NEG
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 4
62614: NEG
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 4
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 5
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 5
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 5
62660: NEG
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 6
62671: NEG
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 6
62682: NEG
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62706: LD_ADDR_VAR 0 34
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 3
62725: NEG
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 3
62737: NEG
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 3
62749: NEG
62750: PUSH
62751: LD_INT 4
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 4
62761: NEG
62762: PUSH
62763: LD_INT 3
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 4
62773: NEG
62774: PUSH
62775: LD_INT 4
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 4
62785: NEG
62786: PUSH
62787: LD_INT 5
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 5
62797: NEG
62798: PUSH
62799: LD_INT 4
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 5
62809: NEG
62810: PUSH
62811: LD_INT 5
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 5
62821: NEG
62822: PUSH
62823: LD_INT 6
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 6
62833: NEG
62834: PUSH
62835: LD_INT 5
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 6
62845: NEG
62846: PUSH
62847: LD_INT 6
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62869: LD_ADDR_VAR 0 41
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: LD_INT 2
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62913: LD_ADDR_VAR 0 42
62917: PUSH
62918: LD_INT 2
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 3
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: LIST
62953: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62954: LD_ADDR_VAR 0 43
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: LD_INT 3
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: LIST
62993: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62994: LD_ADDR_VAR 0 44
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: LIST
63034: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63035: LD_ADDR_VAR 0 45
63039: PUSH
63040: LD_INT 2
63042: NEG
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 2
63053: NEG
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: NEG
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63079: LD_ADDR_VAR 0 46
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 2
63098: NEG
63099: PUSH
63100: LD_INT 3
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 3
63110: NEG
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: LIST
63124: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63125: LD_ADDR_VAR 0 47
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: LD_INT 3
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63158: LD_ADDR_VAR 0 48
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63189: LD_ADDR_VAR 0 49
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63218: LD_ADDR_VAR 0 50
63222: PUSH
63223: LD_INT 2
63225: PUSH
63226: LD_INT 3
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: LD_INT 3
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63247: LD_ADDR_VAR 0 51
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 2
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 2
63265: NEG
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63278: LD_ADDR_VAR 0 52
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: NEG
63298: PUSH
63299: LD_INT 2
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63311: LD_ADDR_VAR 0 53
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: LD_INT 3
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: LD_INT 3
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63355: LD_ADDR_VAR 0 54
63359: PUSH
63360: LD_INT 2
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 3
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: LIST
63395: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63396: LD_ADDR_VAR 0 55
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: LD_INT 3
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: LIST
63435: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63436: LD_ADDR_VAR 0 56
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 3
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63477: LD_ADDR_VAR 0 57
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 3
63495: NEG
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 3
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: LIST
63520: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63521: LD_ADDR_VAR 0 58
63525: PUSH
63526: LD_INT 2
63528: NEG
63529: PUSH
63530: LD_INT 3
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 3
63540: NEG
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 3
63552: NEG
63553: PUSH
63554: LD_INT 3
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63567: LD_ADDR_VAR 0 59
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: LD_INT 2
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63611: LD_ADDR_VAR 0 60
63615: PUSH
63616: LD_INT 1
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: LIST
63651: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63652: LD_ADDR_VAR 0 61
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63692: LD_ADDR_VAR 0 62
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 2
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63733: LD_ADDR_VAR 0 63
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: LD_INT 1
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 2
63762: NEG
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: LIST
63776: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63777: LD_ADDR_VAR 0 64
63781: PUSH
63782: LD_INT 1
63784: NEG
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 2
63796: NEG
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: LD_INT 2
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: LIST
63822: ST_TO_ADDR
// end ; 2 :
63823: GO 67089
63825: LD_INT 2
63827: DOUBLE
63828: EQUAL
63829: IFTRUE 63833
63831: GO 67088
63833: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63834: LD_ADDR_VAR 0 29
63838: PUSH
63839: LD_INT 4
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 4
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 5
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 5
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 4
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 3
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 5
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 3
63934: PUSH
63935: LD_INT 3
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 3
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 4
63954: PUSH
63955: LD_INT 3
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 4
63964: PUSH
63965: LD_INT 4
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 3
63974: PUSH
63975: LD_INT 4
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 3
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: PUSH
63995: LD_INT 2
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 4
64004: PUSH
64005: LD_INT 2
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: LD_INT 4
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 4
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: LD_INT 4
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: LD_INT 5
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 5
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: LD_INT 4
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: LD_INT 3
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: PUSH
64097: LD_INT 5
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: NEG
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 3
64117: NEG
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 3
64128: NEG
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: NEG
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 4
64173: NEG
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 4
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 4
64196: NEG
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 2
64208: NEG
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 4
64219: NEG
64220: PUSH
64221: LD_INT 4
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 4
64231: NEG
64232: PUSH
64233: LD_INT 5
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: NEG
64244: PUSH
64245: LD_INT 4
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 3
64255: NEG
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 4
64267: NEG
64268: PUSH
64269: LD_INT 3
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 5
64279: NEG
64280: PUSH
64281: LD_INT 4
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 5
64291: NEG
64292: PUSH
64293: LD_INT 5
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 3
64303: NEG
64304: PUSH
64305: LD_INT 5
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 5
64315: NEG
64316: PUSH
64317: LD_INT 3
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64372: LD_ADDR_VAR 0 30
64376: PUSH
64377: LD_INT 4
64379: PUSH
64380: LD_INT 4
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 4
64389: PUSH
64390: LD_INT 3
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 5
64399: PUSH
64400: LD_INT 4
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 5
64409: PUSH
64410: LD_INT 5
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 4
64419: PUSH
64420: LD_INT 5
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: LD_INT 4
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 3
64439: PUSH
64440: LD_INT 3
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 5
64449: PUSH
64450: LD_INT 3
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 3
64459: PUSH
64460: LD_INT 5
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: LD_INT 3
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 4
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: LD_INT 4
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: LD_INT 3
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: LD_INT 4
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 4
64562: NEG
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 4
64573: NEG
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 4
64607: NEG
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 5
64618: NEG
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 5
64629: NEG
64630: PUSH
64631: LD_INT 1
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 5
64641: NEG
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 3
64653: NEG
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: LD_INT 3
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: LD_INT 4
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 2
64688: NEG
64689: PUSH
64690: LD_INT 3
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 2
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 4
64724: NEG
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 4
64736: NEG
64737: PUSH
64738: LD_INT 4
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: LD_INT 4
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 4
64760: NEG
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: LD_INT 4
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: LD_INT 5
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: LD_INT 4
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 3
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 4
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: NEG
64840: PUSH
64841: LD_INT 5
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: NEG
64863: PUSH
64864: LD_INT 5
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64919: LD_ADDR_VAR 0 31
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 4
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: LD_INT 4
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 5
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 5
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: LD_INT 4
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 2
64998: PUSH
64999: LD_INT 5
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 2
65008: NEG
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 3
65019: NEG
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 3
65030: NEG
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 3
65064: NEG
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 4
65075: NEG
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 4
65086: NEG
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 4
65098: NEG
65099: PUSH
65100: LD_INT 2
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 4
65121: NEG
65122: PUSH
65123: LD_INT 4
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 4
65133: NEG
65134: PUSH
65135: LD_INT 5
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: LD_INT 4
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 3
65157: NEG
65158: PUSH
65159: LD_INT 3
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 4
65169: NEG
65170: PUSH
65171: LD_INT 3
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 5
65181: NEG
65182: PUSH
65183: LD_INT 4
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 5
65193: NEG
65194: PUSH
65195: LD_INT 5
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 3
65205: NEG
65206: PUSH
65207: LD_INT 5
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 5
65217: NEG
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: LD_INT 3
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 4
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: LD_INT 3
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: LD_INT 2
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: LD_INT 2
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 4
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: PUSH
65309: LD_INT 2
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 2
65319: NEG
65320: PUSH
65321: LD_INT 4
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 4
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 4
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 5
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 5
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 4
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 5
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65469: LD_ADDR_VAR 0 32
65473: PUSH
65474: LD_INT 4
65476: NEG
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: LD_INT 1
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 3
65510: NEG
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 4
65521: NEG
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 5
65532: NEG
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 5
65543: NEG
65544: PUSH
65545: LD_INT 1
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 5
65555: NEG
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 3
65567: NEG
65568: PUSH
65569: LD_INT 2
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 3
65578: NEG
65579: PUSH
65580: LD_INT 3
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 3
65590: NEG
65591: PUSH
65592: LD_INT 4
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 2
65602: NEG
65603: PUSH
65604: LD_INT 3
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 2
65614: NEG
65615: PUSH
65616: LD_INT 2
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 3
65626: NEG
65627: PUSH
65628: LD_INT 2
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 4
65638: NEG
65639: PUSH
65640: LD_INT 3
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 4
65650: NEG
65651: PUSH
65652: LD_INT 4
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: NEG
65663: PUSH
65664: LD_INT 4
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 4
65674: NEG
65675: PUSH
65676: LD_INT 2
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_INT 4
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 5
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 4
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: NEG
65742: PUSH
65743: LD_INT 4
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: LD_INT 5
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: LD_INT 3
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: LD_INT 5
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 4
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 4
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 3
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: LD_INT 1
65852: NEG
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 2
65860: PUSH
65861: LD_INT 2
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 4
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 4
65881: PUSH
65882: LD_INT 4
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 4
65891: PUSH
65892: LD_INT 3
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 5
65901: PUSH
65902: LD_INT 4
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 5
65911: PUSH
65912: LD_INT 5
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 4
65921: PUSH
65922: LD_INT 5
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: LD_INT 4
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 3
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 5
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 3
65961: PUSH
65962: LD_INT 5
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66016: LD_ADDR_VAR 0 33
66020: PUSH
66021: LD_INT 4
66023: NEG
66024: PUSH
66025: LD_INT 4
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 4
66035: NEG
66036: PUSH
66037: LD_INT 5
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 3
66047: NEG
66048: PUSH
66049: LD_INT 4
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: NEG
66060: PUSH
66061: LD_INT 3
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 4
66071: NEG
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 5
66083: NEG
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 5
66095: NEG
66096: PUSH
66097: LD_INT 5
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: LD_INT 5
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 5
66119: NEG
66120: PUSH
66121: LD_INT 3
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: LD_INT 3
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 4
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: LD_INT 3
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 1
66164: PUSH
66165: LD_INT 2
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: LD_INT 2
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: LD_INT 3
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: LD_INT 4
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 2
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 2
66221: NEG
66222: PUSH
66223: LD_INT 4
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 4
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 4
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 5
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 5
66264: PUSH
66265: LD_INT 1
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 4
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 3
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 3
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 5
66316: PUSH
66317: LD_INT 2
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 3
66326: PUSH
66327: LD_INT 3
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: LD_INT 2
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 4
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 4
66356: PUSH
66357: LD_INT 4
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 3
66366: PUSH
66367: LD_INT 4
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: PUSH
66377: LD_INT 3
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 2
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 4
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 2
66406: PUSH
66407: LD_INT 4
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 4
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 3
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: LD_INT 4
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: LD_INT 5
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 5
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: LD_INT 4
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: LD_INT 3
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 2
66488: PUSH
66489: LD_INT 5
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 2
66498: NEG
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66554: LD_ADDR_VAR 0 34
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 4
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 5
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 4
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 3
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: LD_INT 4
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: LD_INT 5
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 2
66640: PUSH
66641: LD_INT 3
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 2
66651: NEG
66652: PUSH
66653: LD_INT 5
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 3
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 3
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 4
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 4
66694: PUSH
66695: LD_INT 1
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 3
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: LD_INT 2
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 4
66746: PUSH
66747: LD_INT 2
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 4
66756: PUSH
66757: LD_INT 4
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 4
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 5
66776: PUSH
66777: LD_INT 4
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 5
66786: PUSH
66787: LD_INT 5
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 4
66796: PUSH
66797: LD_INT 5
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 3
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 3
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 5
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 3
66836: PUSH
66837: LD_INT 5
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: LD_INT 3
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: LD_INT 2
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: PUSH
66867: LD_INT 3
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: LD_INT 4
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 4
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: LD_INT 3
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: NEG
66908: PUSH
66909: LD_INT 2
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 2
66918: PUSH
66919: LD_INT 4
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 2
66928: NEG
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 4
66939: NEG
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 4
66950: NEG
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 3
66962: NEG
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 3
66973: NEG
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: NEG
66985: PUSH
66986: LD_INT 1
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 5
66995: NEG
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 5
67006: NEG
67007: PUSH
67008: LD_INT 1
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 5
67018: NEG
67019: PUSH
67020: LD_INT 2
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 3
67030: NEG
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: ST_TO_ADDR
// end ; end ;
67086: GO 67089
67088: POP
// case btype of b_depot , b_warehouse :
67089: LD_VAR 0 1
67093: PUSH
67094: LD_INT 0
67096: DOUBLE
67097: EQUAL
67098: IFTRUE 67108
67100: LD_INT 1
67102: DOUBLE
67103: EQUAL
67104: IFTRUE 67108
67106: GO 67309
67108: POP
// case nation of nation_american :
67109: LD_VAR 0 5
67113: PUSH
67114: LD_INT 1
67116: DOUBLE
67117: EQUAL
67118: IFTRUE 67122
67120: GO 67178
67122: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67123: LD_ADDR_VAR 0 9
67127: PUSH
67128: LD_VAR 0 11
67132: PUSH
67133: LD_VAR 0 12
67137: PUSH
67138: LD_VAR 0 13
67142: PUSH
67143: LD_VAR 0 14
67147: PUSH
67148: LD_VAR 0 15
67152: PUSH
67153: LD_VAR 0 16
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: PUSH
67166: LD_VAR 0 4
67170: PUSH
67171: LD_INT 1
67173: PLUS
67174: ARRAY
67175: ST_TO_ADDR
67176: GO 67307
67178: LD_INT 2
67180: DOUBLE
67181: EQUAL
67182: IFTRUE 67186
67184: GO 67242
67186: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67187: LD_ADDR_VAR 0 9
67191: PUSH
67192: LD_VAR 0 17
67196: PUSH
67197: LD_VAR 0 18
67201: PUSH
67202: LD_VAR 0 19
67206: PUSH
67207: LD_VAR 0 20
67211: PUSH
67212: LD_VAR 0 21
67216: PUSH
67217: LD_VAR 0 22
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: PUSH
67230: LD_VAR 0 4
67234: PUSH
67235: LD_INT 1
67237: PLUS
67238: ARRAY
67239: ST_TO_ADDR
67240: GO 67307
67242: LD_INT 3
67244: DOUBLE
67245: EQUAL
67246: IFTRUE 67250
67248: GO 67306
67250: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67251: LD_ADDR_VAR 0 9
67255: PUSH
67256: LD_VAR 0 23
67260: PUSH
67261: LD_VAR 0 24
67265: PUSH
67266: LD_VAR 0 25
67270: PUSH
67271: LD_VAR 0 26
67275: PUSH
67276: LD_VAR 0 27
67280: PUSH
67281: LD_VAR 0 28
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: PUSH
67294: LD_VAR 0 4
67298: PUSH
67299: LD_INT 1
67301: PLUS
67302: ARRAY
67303: ST_TO_ADDR
67304: GO 67307
67306: POP
67307: GO 67862
67309: LD_INT 2
67311: DOUBLE
67312: EQUAL
67313: IFTRUE 67323
67315: LD_INT 3
67317: DOUBLE
67318: EQUAL
67319: IFTRUE 67323
67321: GO 67379
67323: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67324: LD_ADDR_VAR 0 9
67328: PUSH
67329: LD_VAR 0 29
67333: PUSH
67334: LD_VAR 0 30
67338: PUSH
67339: LD_VAR 0 31
67343: PUSH
67344: LD_VAR 0 32
67348: PUSH
67349: LD_VAR 0 33
67353: PUSH
67354: LD_VAR 0 34
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: PUSH
67367: LD_VAR 0 4
67371: PUSH
67372: LD_INT 1
67374: PLUS
67375: ARRAY
67376: ST_TO_ADDR
67377: GO 67862
67379: LD_INT 16
67381: DOUBLE
67382: EQUAL
67383: IFTRUE 67441
67385: LD_INT 17
67387: DOUBLE
67388: EQUAL
67389: IFTRUE 67441
67391: LD_INT 18
67393: DOUBLE
67394: EQUAL
67395: IFTRUE 67441
67397: LD_INT 19
67399: DOUBLE
67400: EQUAL
67401: IFTRUE 67441
67403: LD_INT 22
67405: DOUBLE
67406: EQUAL
67407: IFTRUE 67441
67409: LD_INT 20
67411: DOUBLE
67412: EQUAL
67413: IFTRUE 67441
67415: LD_INT 21
67417: DOUBLE
67418: EQUAL
67419: IFTRUE 67441
67421: LD_INT 23
67423: DOUBLE
67424: EQUAL
67425: IFTRUE 67441
67427: LD_INT 24
67429: DOUBLE
67430: EQUAL
67431: IFTRUE 67441
67433: LD_INT 25
67435: DOUBLE
67436: EQUAL
67437: IFTRUE 67441
67439: GO 67497
67441: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67442: LD_ADDR_VAR 0 9
67446: PUSH
67447: LD_VAR 0 35
67451: PUSH
67452: LD_VAR 0 36
67456: PUSH
67457: LD_VAR 0 37
67461: PUSH
67462: LD_VAR 0 38
67466: PUSH
67467: LD_VAR 0 39
67471: PUSH
67472: LD_VAR 0 40
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: PUSH
67485: LD_VAR 0 4
67489: PUSH
67490: LD_INT 1
67492: PLUS
67493: ARRAY
67494: ST_TO_ADDR
67495: GO 67862
67497: LD_INT 6
67499: DOUBLE
67500: EQUAL
67501: IFTRUE 67553
67503: LD_INT 7
67505: DOUBLE
67506: EQUAL
67507: IFTRUE 67553
67509: LD_INT 8
67511: DOUBLE
67512: EQUAL
67513: IFTRUE 67553
67515: LD_INT 13
67517: DOUBLE
67518: EQUAL
67519: IFTRUE 67553
67521: LD_INT 12
67523: DOUBLE
67524: EQUAL
67525: IFTRUE 67553
67527: LD_INT 15
67529: DOUBLE
67530: EQUAL
67531: IFTRUE 67553
67533: LD_INT 11
67535: DOUBLE
67536: EQUAL
67537: IFTRUE 67553
67539: LD_INT 14
67541: DOUBLE
67542: EQUAL
67543: IFTRUE 67553
67545: LD_INT 10
67547: DOUBLE
67548: EQUAL
67549: IFTRUE 67553
67551: GO 67609
67553: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67554: LD_ADDR_VAR 0 9
67558: PUSH
67559: LD_VAR 0 41
67563: PUSH
67564: LD_VAR 0 42
67568: PUSH
67569: LD_VAR 0 43
67573: PUSH
67574: LD_VAR 0 44
67578: PUSH
67579: LD_VAR 0 45
67583: PUSH
67584: LD_VAR 0 46
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: PUSH
67597: LD_VAR 0 4
67601: PUSH
67602: LD_INT 1
67604: PLUS
67605: ARRAY
67606: ST_TO_ADDR
67607: GO 67862
67609: LD_INT 36
67611: DOUBLE
67612: EQUAL
67613: IFTRUE 67617
67615: GO 67673
67617: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67618: LD_ADDR_VAR 0 9
67622: PUSH
67623: LD_VAR 0 47
67627: PUSH
67628: LD_VAR 0 48
67632: PUSH
67633: LD_VAR 0 49
67637: PUSH
67638: LD_VAR 0 50
67642: PUSH
67643: LD_VAR 0 51
67647: PUSH
67648: LD_VAR 0 52
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: PUSH
67661: LD_VAR 0 4
67665: PUSH
67666: LD_INT 1
67668: PLUS
67669: ARRAY
67670: ST_TO_ADDR
67671: GO 67862
67673: LD_INT 4
67675: DOUBLE
67676: EQUAL
67677: IFTRUE 67699
67679: LD_INT 5
67681: DOUBLE
67682: EQUAL
67683: IFTRUE 67699
67685: LD_INT 34
67687: DOUBLE
67688: EQUAL
67689: IFTRUE 67699
67691: LD_INT 37
67693: DOUBLE
67694: EQUAL
67695: IFTRUE 67699
67697: GO 67755
67699: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67700: LD_ADDR_VAR 0 9
67704: PUSH
67705: LD_VAR 0 53
67709: PUSH
67710: LD_VAR 0 54
67714: PUSH
67715: LD_VAR 0 55
67719: PUSH
67720: LD_VAR 0 56
67724: PUSH
67725: LD_VAR 0 57
67729: PUSH
67730: LD_VAR 0 58
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: PUSH
67743: LD_VAR 0 4
67747: PUSH
67748: LD_INT 1
67750: PLUS
67751: ARRAY
67752: ST_TO_ADDR
67753: GO 67862
67755: LD_INT 31
67757: DOUBLE
67758: EQUAL
67759: IFTRUE 67805
67761: LD_INT 32
67763: DOUBLE
67764: EQUAL
67765: IFTRUE 67805
67767: LD_INT 33
67769: DOUBLE
67770: EQUAL
67771: IFTRUE 67805
67773: LD_INT 27
67775: DOUBLE
67776: EQUAL
67777: IFTRUE 67805
67779: LD_INT 26
67781: DOUBLE
67782: EQUAL
67783: IFTRUE 67805
67785: LD_INT 28
67787: DOUBLE
67788: EQUAL
67789: IFTRUE 67805
67791: LD_INT 29
67793: DOUBLE
67794: EQUAL
67795: IFTRUE 67805
67797: LD_INT 30
67799: DOUBLE
67800: EQUAL
67801: IFTRUE 67805
67803: GO 67861
67805: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67806: LD_ADDR_VAR 0 9
67810: PUSH
67811: LD_VAR 0 59
67815: PUSH
67816: LD_VAR 0 60
67820: PUSH
67821: LD_VAR 0 61
67825: PUSH
67826: LD_VAR 0 62
67830: PUSH
67831: LD_VAR 0 63
67835: PUSH
67836: LD_VAR 0 64
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: PUSH
67849: LD_VAR 0 4
67853: PUSH
67854: LD_INT 1
67856: PLUS
67857: ARRAY
67858: ST_TO_ADDR
67859: GO 67862
67861: POP
// temp_list2 = [ ] ;
67862: LD_ADDR_VAR 0 10
67866: PUSH
67867: EMPTY
67868: ST_TO_ADDR
// for i in temp_list do
67869: LD_ADDR_VAR 0 8
67873: PUSH
67874: LD_VAR 0 9
67878: PUSH
67879: FOR_IN
67880: IFFALSE 67932
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67882: LD_ADDR_VAR 0 10
67886: PUSH
67887: LD_VAR 0 10
67891: PUSH
67892: LD_VAR 0 8
67896: PUSH
67897: LD_INT 1
67899: ARRAY
67900: PUSH
67901: LD_VAR 0 2
67905: PLUS
67906: PUSH
67907: LD_VAR 0 8
67911: PUSH
67912: LD_INT 2
67914: ARRAY
67915: PUSH
67916: LD_VAR 0 3
67920: PLUS
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: EMPTY
67927: LIST
67928: ADD
67929: ST_TO_ADDR
67930: GO 67879
67932: POP
67933: POP
// result = temp_list2 ;
67934: LD_ADDR_VAR 0 7
67938: PUSH
67939: LD_VAR 0 10
67943: ST_TO_ADDR
// end ;
67944: LD_VAR 0 7
67948: RET
// export function EnemyInRange ( unit , dist ) ; begin
67949: LD_INT 0
67951: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67952: LD_ADDR_VAR 0 3
67956: PUSH
67957: LD_VAR 0 1
67961: PPUSH
67962: CALL_OW 255
67966: PPUSH
67967: LD_VAR 0 1
67971: PPUSH
67972: CALL_OW 250
67976: PPUSH
67977: LD_VAR 0 1
67981: PPUSH
67982: CALL_OW 251
67986: PPUSH
67987: LD_VAR 0 2
67991: PPUSH
67992: CALL 41351 0 4
67996: PUSH
67997: LD_INT 4
67999: ARRAY
68000: ST_TO_ADDR
// end ;
68001: LD_VAR 0 3
68005: RET
// export function PlayerSeeMe ( unit ) ; begin
68006: LD_INT 0
68008: PPUSH
// result := See ( your_side , unit ) ;
68009: LD_ADDR_VAR 0 2
68013: PUSH
68014: LD_OWVAR 2
68018: PPUSH
68019: LD_VAR 0 1
68023: PPUSH
68024: CALL_OW 292
68028: ST_TO_ADDR
// end ;
68029: LD_VAR 0 2
68033: RET
// export function ReverseDir ( unit ) ; begin
68034: LD_INT 0
68036: PPUSH
// if not unit then
68037: LD_VAR 0 1
68041: NOT
68042: IFFALSE 68046
// exit ;
68044: GO 68069
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68046: LD_ADDR_VAR 0 2
68050: PUSH
68051: LD_VAR 0 1
68055: PPUSH
68056: CALL_OW 254
68060: PUSH
68061: LD_INT 3
68063: PLUS
68064: PUSH
68065: LD_INT 6
68067: MOD
68068: ST_TO_ADDR
// end ;
68069: LD_VAR 0 2
68073: RET
// export function ReverseArray ( array ) ; var i ; begin
68074: LD_INT 0
68076: PPUSH
68077: PPUSH
// if not array then
68078: LD_VAR 0 1
68082: NOT
68083: IFFALSE 68087
// exit ;
68085: GO 68142
// result := [ ] ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: EMPTY
68093: ST_TO_ADDR
// for i := array downto 1 do
68094: LD_ADDR_VAR 0 3
68098: PUSH
68099: DOUBLE
68100: LD_VAR 0 1
68104: INC
68105: ST_TO_ADDR
68106: LD_INT 1
68108: PUSH
68109: FOR_DOWNTO
68110: IFFALSE 68140
// result := Join ( result , array [ i ] ) ;
68112: LD_ADDR_VAR 0 2
68116: PUSH
68117: LD_VAR 0 2
68121: PPUSH
68122: LD_VAR 0 1
68126: PUSH
68127: LD_VAR 0 3
68131: ARRAY
68132: PPUSH
68133: CALL 72786 0 2
68137: ST_TO_ADDR
68138: GO 68109
68140: POP
68141: POP
// end ;
68142: LD_VAR 0 2
68146: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68147: LD_INT 0
68149: PPUSH
68150: PPUSH
68151: PPUSH
68152: PPUSH
68153: PPUSH
68154: PPUSH
// if not unit or not hexes then
68155: LD_VAR 0 1
68159: NOT
68160: PUSH
68161: LD_VAR 0 2
68165: NOT
68166: OR
68167: IFFALSE 68171
// exit ;
68169: GO 68294
// dist := 9999 ;
68171: LD_ADDR_VAR 0 5
68175: PUSH
68176: LD_INT 9999
68178: ST_TO_ADDR
// for i = 1 to hexes do
68179: LD_ADDR_VAR 0 4
68183: PUSH
68184: DOUBLE
68185: LD_INT 1
68187: DEC
68188: ST_TO_ADDR
68189: LD_VAR 0 2
68193: PUSH
68194: FOR_TO
68195: IFFALSE 68282
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68197: LD_ADDR_VAR 0 6
68201: PUSH
68202: LD_VAR 0 1
68206: PPUSH
68207: LD_VAR 0 2
68211: PUSH
68212: LD_VAR 0 4
68216: ARRAY
68217: PUSH
68218: LD_INT 1
68220: ARRAY
68221: PPUSH
68222: LD_VAR 0 2
68226: PUSH
68227: LD_VAR 0 4
68231: ARRAY
68232: PUSH
68233: LD_INT 2
68235: ARRAY
68236: PPUSH
68237: CALL_OW 297
68241: ST_TO_ADDR
// if tdist < dist then
68242: LD_VAR 0 6
68246: PUSH
68247: LD_VAR 0 5
68251: LESS
68252: IFFALSE 68280
// begin hex := hexes [ i ] ;
68254: LD_ADDR_VAR 0 8
68258: PUSH
68259: LD_VAR 0 2
68263: PUSH
68264: LD_VAR 0 4
68268: ARRAY
68269: ST_TO_ADDR
// dist := tdist ;
68270: LD_ADDR_VAR 0 5
68274: PUSH
68275: LD_VAR 0 6
68279: ST_TO_ADDR
// end ; end ;
68280: GO 68194
68282: POP
68283: POP
// result := hex ;
68284: LD_ADDR_VAR 0 3
68288: PUSH
68289: LD_VAR 0 8
68293: ST_TO_ADDR
// end ;
68294: LD_VAR 0 3
68298: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68299: LD_INT 0
68301: PPUSH
68302: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68303: LD_VAR 0 1
68307: NOT
68308: PUSH
68309: LD_VAR 0 1
68313: PUSH
68314: LD_INT 21
68316: PUSH
68317: LD_INT 2
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 23
68326: PUSH
68327: LD_INT 2
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PPUSH
68338: CALL_OW 69
68342: IN
68343: NOT
68344: OR
68345: IFFALSE 68349
// exit ;
68347: GO 68396
// for i = 1 to 3 do
68349: LD_ADDR_VAR 0 3
68353: PUSH
68354: DOUBLE
68355: LD_INT 1
68357: DEC
68358: ST_TO_ADDR
68359: LD_INT 3
68361: PUSH
68362: FOR_TO
68363: IFFALSE 68394
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68365: LD_VAR 0 1
68369: PPUSH
68370: CALL_OW 250
68374: PPUSH
68375: LD_VAR 0 1
68379: PPUSH
68380: CALL_OW 251
68384: PPUSH
68385: LD_INT 1
68387: PPUSH
68388: CALL_OW 453
68392: GO 68362
68394: POP
68395: POP
// end ;
68396: LD_VAR 0 2
68400: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68401: LD_INT 0
68403: PPUSH
68404: PPUSH
68405: PPUSH
68406: PPUSH
68407: PPUSH
68408: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68409: LD_VAR 0 1
68413: NOT
68414: PUSH
68415: LD_VAR 0 2
68419: NOT
68420: OR
68421: PUSH
68422: LD_VAR 0 1
68426: PPUSH
68427: CALL_OW 314
68431: OR
68432: IFFALSE 68436
// exit ;
68434: GO 68903
// if GetLives ( i ) < 250 then
68436: LD_VAR 0 4
68440: PPUSH
68441: CALL_OW 256
68445: PUSH
68446: LD_INT 250
68448: LESS
68449: IFFALSE 68462
// begin ComAutodestruct ( i ) ;
68451: LD_VAR 0 4
68455: PPUSH
68456: CALL 68299 0 1
// exit ;
68460: GO 68903
// end ; x := GetX ( enemy_unit ) ;
68462: LD_ADDR_VAR 0 7
68466: PUSH
68467: LD_VAR 0 2
68471: PPUSH
68472: CALL_OW 250
68476: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68477: LD_ADDR_VAR 0 8
68481: PUSH
68482: LD_VAR 0 2
68486: PPUSH
68487: CALL_OW 251
68491: ST_TO_ADDR
// if not x or not y then
68492: LD_VAR 0 7
68496: NOT
68497: PUSH
68498: LD_VAR 0 8
68502: NOT
68503: OR
68504: IFFALSE 68508
// exit ;
68506: GO 68903
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68508: LD_ADDR_VAR 0 6
68512: PUSH
68513: LD_VAR 0 7
68517: PPUSH
68518: LD_INT 0
68520: PPUSH
68521: LD_INT 4
68523: PPUSH
68524: CALL_OW 272
68528: PUSH
68529: LD_VAR 0 8
68533: PPUSH
68534: LD_INT 0
68536: PPUSH
68537: LD_INT 4
68539: PPUSH
68540: CALL_OW 273
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_VAR 0 7
68553: PPUSH
68554: LD_INT 1
68556: PPUSH
68557: LD_INT 4
68559: PPUSH
68560: CALL_OW 272
68564: PUSH
68565: LD_VAR 0 8
68569: PPUSH
68570: LD_INT 1
68572: PPUSH
68573: LD_INT 4
68575: PPUSH
68576: CALL_OW 273
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_VAR 0 7
68589: PPUSH
68590: LD_INT 2
68592: PPUSH
68593: LD_INT 4
68595: PPUSH
68596: CALL_OW 272
68600: PUSH
68601: LD_VAR 0 8
68605: PPUSH
68606: LD_INT 2
68608: PPUSH
68609: LD_INT 4
68611: PPUSH
68612: CALL_OW 273
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_VAR 0 7
68625: PPUSH
68626: LD_INT 3
68628: PPUSH
68629: LD_INT 4
68631: PPUSH
68632: CALL_OW 272
68636: PUSH
68637: LD_VAR 0 8
68641: PPUSH
68642: LD_INT 3
68644: PPUSH
68645: LD_INT 4
68647: PPUSH
68648: CALL_OW 273
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_VAR 0 7
68661: PPUSH
68662: LD_INT 4
68664: PPUSH
68665: LD_INT 4
68667: PPUSH
68668: CALL_OW 272
68672: PUSH
68673: LD_VAR 0 8
68677: PPUSH
68678: LD_INT 4
68680: PPUSH
68681: LD_INT 4
68683: PPUSH
68684: CALL_OW 273
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_VAR 0 7
68697: PPUSH
68698: LD_INT 5
68700: PPUSH
68701: LD_INT 4
68703: PPUSH
68704: CALL_OW 272
68708: PUSH
68709: LD_VAR 0 8
68713: PPUSH
68714: LD_INT 5
68716: PPUSH
68717: LD_INT 4
68719: PPUSH
68720: CALL_OW 273
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: ST_TO_ADDR
// for i = tmp downto 1 do
68737: LD_ADDR_VAR 0 4
68741: PUSH
68742: DOUBLE
68743: LD_VAR 0 6
68747: INC
68748: ST_TO_ADDR
68749: LD_INT 1
68751: PUSH
68752: FOR_DOWNTO
68753: IFFALSE 68854
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68755: LD_VAR 0 6
68759: PUSH
68760: LD_VAR 0 4
68764: ARRAY
68765: PUSH
68766: LD_INT 1
68768: ARRAY
68769: PPUSH
68770: LD_VAR 0 6
68774: PUSH
68775: LD_VAR 0 4
68779: ARRAY
68780: PUSH
68781: LD_INT 2
68783: ARRAY
68784: PPUSH
68785: CALL_OW 488
68789: NOT
68790: PUSH
68791: LD_VAR 0 6
68795: PUSH
68796: LD_VAR 0 4
68800: ARRAY
68801: PUSH
68802: LD_INT 1
68804: ARRAY
68805: PPUSH
68806: LD_VAR 0 6
68810: PUSH
68811: LD_VAR 0 4
68815: ARRAY
68816: PUSH
68817: LD_INT 2
68819: ARRAY
68820: PPUSH
68821: CALL_OW 428
68825: PUSH
68826: LD_INT 0
68828: NONEQUAL
68829: OR
68830: IFFALSE 68852
// tmp := Delete ( tmp , i ) ;
68832: LD_ADDR_VAR 0 6
68836: PUSH
68837: LD_VAR 0 6
68841: PPUSH
68842: LD_VAR 0 4
68846: PPUSH
68847: CALL_OW 3
68851: ST_TO_ADDR
68852: GO 68752
68854: POP
68855: POP
// j := GetClosestHex ( unit , tmp ) ;
68856: LD_ADDR_VAR 0 5
68860: PUSH
68861: LD_VAR 0 1
68865: PPUSH
68866: LD_VAR 0 6
68870: PPUSH
68871: CALL 68147 0 2
68875: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68876: LD_VAR 0 1
68880: PPUSH
68881: LD_VAR 0 5
68885: PUSH
68886: LD_INT 1
68888: ARRAY
68889: PPUSH
68890: LD_VAR 0 5
68894: PUSH
68895: LD_INT 2
68897: ARRAY
68898: PPUSH
68899: CALL_OW 111
// end ;
68903: LD_VAR 0 3
68907: RET
// export function PrepareApemanSoldier ( ) ; begin
68908: LD_INT 0
68910: PPUSH
// uc_nation := 0 ;
68911: LD_ADDR_OWVAR 21
68915: PUSH
68916: LD_INT 0
68918: ST_TO_ADDR
// hc_sex := sex_male ;
68919: LD_ADDR_OWVAR 27
68923: PUSH
68924: LD_INT 1
68926: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68927: LD_ADDR_OWVAR 28
68931: PUSH
68932: LD_INT 15
68934: ST_TO_ADDR
// hc_gallery :=  ;
68935: LD_ADDR_OWVAR 33
68939: PUSH
68940: LD_STRING 
68942: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68943: LD_ADDR_OWVAR 31
68947: PUSH
68948: LD_INT 0
68950: PPUSH
68951: LD_INT 3
68953: PPUSH
68954: CALL_OW 12
68958: PUSH
68959: LD_INT 0
68961: PPUSH
68962: LD_INT 3
68964: PPUSH
68965: CALL_OW 12
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: LD_INT 0
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: ST_TO_ADDR
// end ;
68982: LD_VAR 0 1
68986: RET
// export function PrepareApemanEngineer ( ) ; begin
68987: LD_INT 0
68989: PPUSH
// uc_nation := 0 ;
68990: LD_ADDR_OWVAR 21
68994: PUSH
68995: LD_INT 0
68997: ST_TO_ADDR
// hc_sex := sex_male ;
68998: LD_ADDR_OWVAR 27
69002: PUSH
69003: LD_INT 1
69005: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69006: LD_ADDR_OWVAR 28
69010: PUSH
69011: LD_INT 16
69013: ST_TO_ADDR
// hc_gallery :=  ;
69014: LD_ADDR_OWVAR 33
69018: PUSH
69019: LD_STRING 
69021: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69022: LD_ADDR_OWVAR 31
69026: PUSH
69027: LD_INT 0
69029: PPUSH
69030: LD_INT 3
69032: PPUSH
69033: CALL_OW 12
69037: PUSH
69038: LD_INT 0
69040: PPUSH
69041: LD_INT 3
69043: PPUSH
69044: CALL_OW 12
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: ST_TO_ADDR
// end ;
69061: LD_VAR 0 1
69065: RET
// export function PrepareApeman ( agressivity ) ; begin
69066: LD_INT 0
69068: PPUSH
// uc_side := 0 ;
69069: LD_ADDR_OWVAR 20
69073: PUSH
69074: LD_INT 0
69076: ST_TO_ADDR
// uc_nation := 0 ;
69077: LD_ADDR_OWVAR 21
69081: PUSH
69082: LD_INT 0
69084: ST_TO_ADDR
// hc_sex := sex_male ;
69085: LD_ADDR_OWVAR 27
69089: PUSH
69090: LD_INT 1
69092: ST_TO_ADDR
// hc_class := class_apeman ;
69093: LD_ADDR_OWVAR 28
69097: PUSH
69098: LD_INT 12
69100: ST_TO_ADDR
// hc_gallery :=  ;
69101: LD_ADDR_OWVAR 33
69105: PUSH
69106: LD_STRING 
69108: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69109: LD_ADDR_OWVAR 35
69113: PUSH
69114: LD_VAR 0 1
69118: NEG
69119: PPUSH
69120: LD_VAR 0 1
69124: PPUSH
69125: CALL_OW 12
69129: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69130: LD_ADDR_OWVAR 31
69134: PUSH
69135: LD_INT 0
69137: PPUSH
69138: LD_INT 3
69140: PPUSH
69141: CALL_OW 12
69145: PUSH
69146: LD_INT 0
69148: PPUSH
69149: LD_INT 3
69151: PPUSH
69152: CALL_OW 12
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: ST_TO_ADDR
// end ;
69169: LD_VAR 0 2
69173: RET
// export function PrepareTiger ( agressivity ) ; begin
69174: LD_INT 0
69176: PPUSH
// uc_side := 0 ;
69177: LD_ADDR_OWVAR 20
69181: PUSH
69182: LD_INT 0
69184: ST_TO_ADDR
// uc_nation := 0 ;
69185: LD_ADDR_OWVAR 21
69189: PUSH
69190: LD_INT 0
69192: ST_TO_ADDR
// hc_class := class_tiger ;
69193: LD_ADDR_OWVAR 28
69197: PUSH
69198: LD_INT 14
69200: ST_TO_ADDR
// hc_gallery :=  ;
69201: LD_ADDR_OWVAR 33
69205: PUSH
69206: LD_STRING 
69208: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69209: LD_ADDR_OWVAR 35
69213: PUSH
69214: LD_VAR 0 1
69218: NEG
69219: PPUSH
69220: LD_VAR 0 1
69224: PPUSH
69225: CALL_OW 12
69229: ST_TO_ADDR
// end ;
69230: LD_VAR 0 2
69234: RET
// export function PrepareEnchidna ( ) ; begin
69235: LD_INT 0
69237: PPUSH
// uc_side := 0 ;
69238: LD_ADDR_OWVAR 20
69242: PUSH
69243: LD_INT 0
69245: ST_TO_ADDR
// uc_nation := 0 ;
69246: LD_ADDR_OWVAR 21
69250: PUSH
69251: LD_INT 0
69253: ST_TO_ADDR
// hc_class := class_baggie ;
69254: LD_ADDR_OWVAR 28
69258: PUSH
69259: LD_INT 13
69261: ST_TO_ADDR
// hc_gallery :=  ;
69262: LD_ADDR_OWVAR 33
69266: PUSH
69267: LD_STRING 
69269: ST_TO_ADDR
// end ;
69270: LD_VAR 0 1
69274: RET
// export function PrepareFrog ( ) ; begin
69275: LD_INT 0
69277: PPUSH
// uc_side := 0 ;
69278: LD_ADDR_OWVAR 20
69282: PUSH
69283: LD_INT 0
69285: ST_TO_ADDR
// uc_nation := 0 ;
69286: LD_ADDR_OWVAR 21
69290: PUSH
69291: LD_INT 0
69293: ST_TO_ADDR
// hc_class := class_frog ;
69294: LD_ADDR_OWVAR 28
69298: PUSH
69299: LD_INT 19
69301: ST_TO_ADDR
// hc_gallery :=  ;
69302: LD_ADDR_OWVAR 33
69306: PUSH
69307: LD_STRING 
69309: ST_TO_ADDR
// end ;
69310: LD_VAR 0 1
69314: RET
// export function PrepareFish ( ) ; begin
69315: LD_INT 0
69317: PPUSH
// uc_side := 0 ;
69318: LD_ADDR_OWVAR 20
69322: PUSH
69323: LD_INT 0
69325: ST_TO_ADDR
// uc_nation := 0 ;
69326: LD_ADDR_OWVAR 21
69330: PUSH
69331: LD_INT 0
69333: ST_TO_ADDR
// hc_class := class_fish ;
69334: LD_ADDR_OWVAR 28
69338: PUSH
69339: LD_INT 20
69341: ST_TO_ADDR
// hc_gallery :=  ;
69342: LD_ADDR_OWVAR 33
69346: PUSH
69347: LD_STRING 
69349: ST_TO_ADDR
// end ;
69350: LD_VAR 0 1
69354: RET
// export function PrepareBird ( ) ; begin
69355: LD_INT 0
69357: PPUSH
// uc_side := 0 ;
69358: LD_ADDR_OWVAR 20
69362: PUSH
69363: LD_INT 0
69365: ST_TO_ADDR
// uc_nation := 0 ;
69366: LD_ADDR_OWVAR 21
69370: PUSH
69371: LD_INT 0
69373: ST_TO_ADDR
// hc_class := class_phororhacos ;
69374: LD_ADDR_OWVAR 28
69378: PUSH
69379: LD_INT 18
69381: ST_TO_ADDR
// hc_gallery :=  ;
69382: LD_ADDR_OWVAR 33
69386: PUSH
69387: LD_STRING 
69389: ST_TO_ADDR
// end ;
69390: LD_VAR 0 1
69394: RET
// export function PrepareHorse ( ) ; begin
69395: LD_INT 0
69397: PPUSH
// uc_side := 0 ;
69398: LD_ADDR_OWVAR 20
69402: PUSH
69403: LD_INT 0
69405: ST_TO_ADDR
// uc_nation := 0 ;
69406: LD_ADDR_OWVAR 21
69410: PUSH
69411: LD_INT 0
69413: ST_TO_ADDR
// hc_class := class_horse ;
69414: LD_ADDR_OWVAR 28
69418: PUSH
69419: LD_INT 21
69421: ST_TO_ADDR
// hc_gallery :=  ;
69422: LD_ADDR_OWVAR 33
69426: PUSH
69427: LD_STRING 
69429: ST_TO_ADDR
// end ;
69430: LD_VAR 0 1
69434: RET
// export function PrepareMastodont ( ) ; begin
69435: LD_INT 0
69437: PPUSH
// uc_side := 0 ;
69438: LD_ADDR_OWVAR 20
69442: PUSH
69443: LD_INT 0
69445: ST_TO_ADDR
// uc_nation := 0 ;
69446: LD_ADDR_OWVAR 21
69450: PUSH
69451: LD_INT 0
69453: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69454: LD_ADDR_OWVAR 37
69458: PUSH
69459: LD_INT 31
69461: ST_TO_ADDR
// vc_control := control_rider ;
69462: LD_ADDR_OWVAR 38
69466: PUSH
69467: LD_INT 4
69469: ST_TO_ADDR
// end ;
69470: LD_VAR 0 1
69474: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69475: LD_INT 0
69477: PPUSH
69478: PPUSH
69479: PPUSH
// uc_side = 0 ;
69480: LD_ADDR_OWVAR 20
69484: PUSH
69485: LD_INT 0
69487: ST_TO_ADDR
// uc_nation = 0 ;
69488: LD_ADDR_OWVAR 21
69492: PUSH
69493: LD_INT 0
69495: ST_TO_ADDR
// InitHc_All ( ) ;
69496: CALL_OW 584
// InitVc ;
69500: CALL_OW 20
// if mastodonts then
69504: LD_VAR 0 6
69508: IFFALSE 69575
// for i = 1 to mastodonts do
69510: LD_ADDR_VAR 0 11
69514: PUSH
69515: DOUBLE
69516: LD_INT 1
69518: DEC
69519: ST_TO_ADDR
69520: LD_VAR 0 6
69524: PUSH
69525: FOR_TO
69526: IFFALSE 69573
// begin vc_chassis := 31 ;
69528: LD_ADDR_OWVAR 37
69532: PUSH
69533: LD_INT 31
69535: ST_TO_ADDR
// vc_control := control_rider ;
69536: LD_ADDR_OWVAR 38
69540: PUSH
69541: LD_INT 4
69543: ST_TO_ADDR
// animal := CreateVehicle ;
69544: LD_ADDR_VAR 0 12
69548: PUSH
69549: CALL_OW 45
69553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69554: LD_VAR 0 12
69558: PPUSH
69559: LD_VAR 0 8
69563: PPUSH
69564: LD_INT 0
69566: PPUSH
69567: CALL 71703 0 3
// end ;
69571: GO 69525
69573: POP
69574: POP
// if horses then
69575: LD_VAR 0 5
69579: IFFALSE 69646
// for i = 1 to horses do
69581: LD_ADDR_VAR 0 11
69585: PUSH
69586: DOUBLE
69587: LD_INT 1
69589: DEC
69590: ST_TO_ADDR
69591: LD_VAR 0 5
69595: PUSH
69596: FOR_TO
69597: IFFALSE 69644
// begin hc_class := 21 ;
69599: LD_ADDR_OWVAR 28
69603: PUSH
69604: LD_INT 21
69606: ST_TO_ADDR
// hc_gallery :=  ;
69607: LD_ADDR_OWVAR 33
69611: PUSH
69612: LD_STRING 
69614: ST_TO_ADDR
// animal := CreateHuman ;
69615: LD_ADDR_VAR 0 12
69619: PUSH
69620: CALL_OW 44
69624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69625: LD_VAR 0 12
69629: PPUSH
69630: LD_VAR 0 8
69634: PPUSH
69635: LD_INT 0
69637: PPUSH
69638: CALL 71703 0 3
// end ;
69642: GO 69596
69644: POP
69645: POP
// if birds then
69646: LD_VAR 0 1
69650: IFFALSE 69717
// for i = 1 to birds do
69652: LD_ADDR_VAR 0 11
69656: PUSH
69657: DOUBLE
69658: LD_INT 1
69660: DEC
69661: ST_TO_ADDR
69662: LD_VAR 0 1
69666: PUSH
69667: FOR_TO
69668: IFFALSE 69715
// begin hc_class = 18 ;
69670: LD_ADDR_OWVAR 28
69674: PUSH
69675: LD_INT 18
69677: ST_TO_ADDR
// hc_gallery =  ;
69678: LD_ADDR_OWVAR 33
69682: PUSH
69683: LD_STRING 
69685: ST_TO_ADDR
// animal := CreateHuman ;
69686: LD_ADDR_VAR 0 12
69690: PUSH
69691: CALL_OW 44
69695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69696: LD_VAR 0 12
69700: PPUSH
69701: LD_VAR 0 8
69705: PPUSH
69706: LD_INT 0
69708: PPUSH
69709: CALL 71703 0 3
// end ;
69713: GO 69667
69715: POP
69716: POP
// if tigers then
69717: LD_VAR 0 2
69721: IFFALSE 69805
// for i = 1 to tigers do
69723: LD_ADDR_VAR 0 11
69727: PUSH
69728: DOUBLE
69729: LD_INT 1
69731: DEC
69732: ST_TO_ADDR
69733: LD_VAR 0 2
69737: PUSH
69738: FOR_TO
69739: IFFALSE 69803
// begin hc_class = class_tiger ;
69741: LD_ADDR_OWVAR 28
69745: PUSH
69746: LD_INT 14
69748: ST_TO_ADDR
// hc_gallery =  ;
69749: LD_ADDR_OWVAR 33
69753: PUSH
69754: LD_STRING 
69756: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69757: LD_ADDR_OWVAR 35
69761: PUSH
69762: LD_INT 7
69764: NEG
69765: PPUSH
69766: LD_INT 7
69768: PPUSH
69769: CALL_OW 12
69773: ST_TO_ADDR
// animal := CreateHuman ;
69774: LD_ADDR_VAR 0 12
69778: PUSH
69779: CALL_OW 44
69783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69784: LD_VAR 0 12
69788: PPUSH
69789: LD_VAR 0 8
69793: PPUSH
69794: LD_INT 0
69796: PPUSH
69797: CALL 71703 0 3
// end ;
69801: GO 69738
69803: POP
69804: POP
// if apemans then
69805: LD_VAR 0 3
69809: IFFALSE 69932
// for i = 1 to apemans do
69811: LD_ADDR_VAR 0 11
69815: PUSH
69816: DOUBLE
69817: LD_INT 1
69819: DEC
69820: ST_TO_ADDR
69821: LD_VAR 0 3
69825: PUSH
69826: FOR_TO
69827: IFFALSE 69930
// begin hc_class = class_apeman ;
69829: LD_ADDR_OWVAR 28
69833: PUSH
69834: LD_INT 12
69836: ST_TO_ADDR
// hc_gallery =  ;
69837: LD_ADDR_OWVAR 33
69841: PUSH
69842: LD_STRING 
69844: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69845: LD_ADDR_OWVAR 35
69849: PUSH
69850: LD_INT 2
69852: NEG
69853: PPUSH
69854: LD_INT 2
69856: PPUSH
69857: CALL_OW 12
69861: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69862: LD_ADDR_OWVAR 31
69866: PUSH
69867: LD_INT 1
69869: PPUSH
69870: LD_INT 3
69872: PPUSH
69873: CALL_OW 12
69877: PUSH
69878: LD_INT 1
69880: PPUSH
69881: LD_INT 3
69883: PPUSH
69884: CALL_OW 12
69888: PUSH
69889: LD_INT 0
69891: PUSH
69892: LD_INT 0
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: ST_TO_ADDR
// animal := CreateHuman ;
69901: LD_ADDR_VAR 0 12
69905: PUSH
69906: CALL_OW 44
69910: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69911: LD_VAR 0 12
69915: PPUSH
69916: LD_VAR 0 8
69920: PPUSH
69921: LD_INT 0
69923: PPUSH
69924: CALL 71703 0 3
// end ;
69928: GO 69826
69930: POP
69931: POP
// if enchidnas then
69932: LD_VAR 0 4
69936: IFFALSE 70003
// for i = 1 to enchidnas do
69938: LD_ADDR_VAR 0 11
69942: PUSH
69943: DOUBLE
69944: LD_INT 1
69946: DEC
69947: ST_TO_ADDR
69948: LD_VAR 0 4
69952: PUSH
69953: FOR_TO
69954: IFFALSE 70001
// begin hc_class = 13 ;
69956: LD_ADDR_OWVAR 28
69960: PUSH
69961: LD_INT 13
69963: ST_TO_ADDR
// hc_gallery =  ;
69964: LD_ADDR_OWVAR 33
69968: PUSH
69969: LD_STRING 
69971: ST_TO_ADDR
// animal := CreateHuman ;
69972: LD_ADDR_VAR 0 12
69976: PUSH
69977: CALL_OW 44
69981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69982: LD_VAR 0 12
69986: PPUSH
69987: LD_VAR 0 8
69991: PPUSH
69992: LD_INT 0
69994: PPUSH
69995: CALL 71703 0 3
// end ;
69999: GO 69953
70001: POP
70002: POP
// if fishes then
70003: LD_VAR 0 7
70007: IFFALSE 70074
// for i = 1 to fishes do
70009: LD_ADDR_VAR 0 11
70013: PUSH
70014: DOUBLE
70015: LD_INT 1
70017: DEC
70018: ST_TO_ADDR
70019: LD_VAR 0 7
70023: PUSH
70024: FOR_TO
70025: IFFALSE 70072
// begin hc_class = 20 ;
70027: LD_ADDR_OWVAR 28
70031: PUSH
70032: LD_INT 20
70034: ST_TO_ADDR
// hc_gallery =  ;
70035: LD_ADDR_OWVAR 33
70039: PUSH
70040: LD_STRING 
70042: ST_TO_ADDR
// animal := CreateHuman ;
70043: LD_ADDR_VAR 0 12
70047: PUSH
70048: CALL_OW 44
70052: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70053: LD_VAR 0 12
70057: PPUSH
70058: LD_VAR 0 9
70062: PPUSH
70063: LD_INT 0
70065: PPUSH
70066: CALL 71703 0 3
// end ;
70070: GO 70024
70072: POP
70073: POP
// end ;
70074: LD_VAR 0 10
70078: RET
// export function WantHeal ( sci , unit ) ; begin
70079: LD_INT 0
70081: PPUSH
// if GetTaskList ( sci ) > 0 then
70082: LD_VAR 0 1
70086: PPUSH
70087: CALL_OW 437
70091: PUSH
70092: LD_INT 0
70094: GREATER
70095: IFFALSE 70165
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70097: LD_VAR 0 1
70101: PPUSH
70102: CALL_OW 437
70106: PUSH
70107: LD_INT 1
70109: ARRAY
70110: PUSH
70111: LD_INT 1
70113: ARRAY
70114: PUSH
70115: LD_STRING l
70117: EQUAL
70118: PUSH
70119: LD_VAR 0 1
70123: PPUSH
70124: CALL_OW 437
70128: PUSH
70129: LD_INT 1
70131: ARRAY
70132: PUSH
70133: LD_INT 4
70135: ARRAY
70136: PUSH
70137: LD_VAR 0 2
70141: EQUAL
70142: AND
70143: IFFALSE 70155
// result := true else
70145: LD_ADDR_VAR 0 3
70149: PUSH
70150: LD_INT 1
70152: ST_TO_ADDR
70153: GO 70163
// result := false ;
70155: LD_ADDR_VAR 0 3
70159: PUSH
70160: LD_INT 0
70162: ST_TO_ADDR
// end else
70163: GO 70173
// result := false ;
70165: LD_ADDR_VAR 0 3
70169: PUSH
70170: LD_INT 0
70172: ST_TO_ADDR
// end ;
70173: LD_VAR 0 3
70177: RET
// export function HealTarget ( sci ) ; begin
70178: LD_INT 0
70180: PPUSH
// if not sci then
70181: LD_VAR 0 1
70185: NOT
70186: IFFALSE 70190
// exit ;
70188: GO 70255
// result := 0 ;
70190: LD_ADDR_VAR 0 2
70194: PUSH
70195: LD_INT 0
70197: ST_TO_ADDR
// if GetTaskList ( sci ) then
70198: LD_VAR 0 1
70202: PPUSH
70203: CALL_OW 437
70207: IFFALSE 70255
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70209: LD_VAR 0 1
70213: PPUSH
70214: CALL_OW 437
70218: PUSH
70219: LD_INT 1
70221: ARRAY
70222: PUSH
70223: LD_INT 1
70225: ARRAY
70226: PUSH
70227: LD_STRING l
70229: EQUAL
70230: IFFALSE 70255
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70232: LD_ADDR_VAR 0 2
70236: PUSH
70237: LD_VAR 0 1
70241: PPUSH
70242: CALL_OW 437
70246: PUSH
70247: LD_INT 1
70249: ARRAY
70250: PUSH
70251: LD_INT 4
70253: ARRAY
70254: ST_TO_ADDR
// end ;
70255: LD_VAR 0 2
70259: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70260: LD_INT 0
70262: PPUSH
70263: PPUSH
70264: PPUSH
70265: PPUSH
// if not base_units then
70266: LD_VAR 0 1
70270: NOT
70271: IFFALSE 70275
// exit ;
70273: GO 70362
// result := false ;
70275: LD_ADDR_VAR 0 2
70279: PUSH
70280: LD_INT 0
70282: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70283: LD_ADDR_VAR 0 5
70287: PUSH
70288: LD_VAR 0 1
70292: PPUSH
70293: LD_INT 21
70295: PUSH
70296: LD_INT 3
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PPUSH
70303: CALL_OW 72
70307: ST_TO_ADDR
// if not tmp then
70308: LD_VAR 0 5
70312: NOT
70313: IFFALSE 70317
// exit ;
70315: GO 70362
// for i in tmp do
70317: LD_ADDR_VAR 0 3
70321: PUSH
70322: LD_VAR 0 5
70326: PUSH
70327: FOR_IN
70328: IFFALSE 70360
// begin result := EnemyInRange ( i , 22 ) ;
70330: LD_ADDR_VAR 0 2
70334: PUSH
70335: LD_VAR 0 3
70339: PPUSH
70340: LD_INT 22
70342: PPUSH
70343: CALL 67949 0 2
70347: ST_TO_ADDR
// if result then
70348: LD_VAR 0 2
70352: IFFALSE 70358
// exit ;
70354: POP
70355: POP
70356: GO 70362
// end ;
70358: GO 70327
70360: POP
70361: POP
// end ;
70362: LD_VAR 0 2
70366: RET
// export function FilterByTag ( units , tag ) ; begin
70367: LD_INT 0
70369: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70370: LD_ADDR_VAR 0 3
70374: PUSH
70375: LD_VAR 0 1
70379: PPUSH
70380: LD_INT 120
70382: PUSH
70383: LD_VAR 0 2
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PPUSH
70392: CALL_OW 72
70396: ST_TO_ADDR
// end ;
70397: LD_VAR 0 3
70401: RET
// export function IsDriver ( un ) ; begin
70402: LD_INT 0
70404: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70405: LD_ADDR_VAR 0 2
70409: PUSH
70410: LD_VAR 0 1
70414: PUSH
70415: LD_INT 55
70417: PUSH
70418: EMPTY
70419: LIST
70420: PPUSH
70421: CALL_OW 69
70425: IN
70426: ST_TO_ADDR
// end ;
70427: LD_VAR 0 2
70431: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70432: LD_INT 0
70434: PPUSH
70435: PPUSH
// list := [ ] ;
70436: LD_ADDR_VAR 0 5
70440: PUSH
70441: EMPTY
70442: ST_TO_ADDR
// case d of 0 :
70443: LD_VAR 0 3
70447: PUSH
70448: LD_INT 0
70450: DOUBLE
70451: EQUAL
70452: IFTRUE 70456
70454: GO 70589
70456: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70457: LD_ADDR_VAR 0 5
70461: PUSH
70462: LD_VAR 0 1
70466: PUSH
70467: LD_INT 4
70469: MINUS
70470: PUSH
70471: LD_VAR 0 2
70475: PUSH
70476: LD_INT 4
70478: MINUS
70479: PUSH
70480: LD_INT 2
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: LIST
70487: PUSH
70488: LD_VAR 0 1
70492: PUSH
70493: LD_INT 3
70495: MINUS
70496: PUSH
70497: LD_VAR 0 2
70501: PUSH
70502: LD_INT 1
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: LIST
70509: PUSH
70510: LD_VAR 0 1
70514: PUSH
70515: LD_INT 4
70517: PLUS
70518: PUSH
70519: LD_VAR 0 2
70523: PUSH
70524: LD_INT 4
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: LIST
70531: PUSH
70532: LD_VAR 0 1
70536: PUSH
70537: LD_INT 3
70539: PLUS
70540: PUSH
70541: LD_VAR 0 2
70545: PUSH
70546: LD_INT 3
70548: PLUS
70549: PUSH
70550: LD_INT 5
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: LIST
70557: PUSH
70558: LD_VAR 0 1
70562: PUSH
70563: LD_VAR 0 2
70567: PUSH
70568: LD_INT 4
70570: PLUS
70571: PUSH
70572: LD_INT 0
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: LIST
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: ST_TO_ADDR
// end ; 1 :
70587: GO 71287
70589: LD_INT 1
70591: DOUBLE
70592: EQUAL
70593: IFTRUE 70597
70595: GO 70730
70597: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70598: LD_ADDR_VAR 0 5
70602: PUSH
70603: LD_VAR 0 1
70607: PUSH
70608: LD_VAR 0 2
70612: PUSH
70613: LD_INT 4
70615: MINUS
70616: PUSH
70617: LD_INT 3
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: LIST
70624: PUSH
70625: LD_VAR 0 1
70629: PUSH
70630: LD_INT 3
70632: MINUS
70633: PUSH
70634: LD_VAR 0 2
70638: PUSH
70639: LD_INT 3
70641: MINUS
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: PUSH
70651: LD_VAR 0 1
70655: PUSH
70656: LD_INT 4
70658: MINUS
70659: PUSH
70660: LD_VAR 0 2
70664: PUSH
70665: LD_INT 1
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: LIST
70672: PUSH
70673: LD_VAR 0 1
70677: PUSH
70678: LD_VAR 0 2
70682: PUSH
70683: LD_INT 3
70685: PLUS
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: LIST
70694: PUSH
70695: LD_VAR 0 1
70699: PUSH
70700: LD_INT 4
70702: PLUS
70703: PUSH
70704: LD_VAR 0 2
70708: PUSH
70709: LD_INT 4
70711: PLUS
70712: PUSH
70713: LD_INT 5
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: ST_TO_ADDR
// end ; 2 :
70728: GO 71287
70730: LD_INT 2
70732: DOUBLE
70733: EQUAL
70734: IFTRUE 70738
70736: GO 70867
70738: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70739: LD_ADDR_VAR 0 5
70743: PUSH
70744: LD_VAR 0 1
70748: PUSH
70749: LD_VAR 0 2
70753: PUSH
70754: LD_INT 3
70756: MINUS
70757: PUSH
70758: LD_INT 3
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: PUSH
70766: LD_VAR 0 1
70770: PUSH
70771: LD_INT 4
70773: PLUS
70774: PUSH
70775: LD_VAR 0 2
70779: PUSH
70780: LD_INT 4
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: LIST
70787: PUSH
70788: LD_VAR 0 1
70792: PUSH
70793: LD_VAR 0 2
70797: PUSH
70798: LD_INT 4
70800: PLUS
70801: PUSH
70802: LD_INT 0
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: PUSH
70810: LD_VAR 0 1
70814: PUSH
70815: LD_INT 3
70817: MINUS
70818: PUSH
70819: LD_VAR 0 2
70823: PUSH
70824: LD_INT 1
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: LIST
70831: PUSH
70832: LD_VAR 0 1
70836: PUSH
70837: LD_INT 4
70839: MINUS
70840: PUSH
70841: LD_VAR 0 2
70845: PUSH
70846: LD_INT 4
70848: MINUS
70849: PUSH
70850: LD_INT 2
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: LIST
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: ST_TO_ADDR
// end ; 3 :
70865: GO 71287
70867: LD_INT 3
70869: DOUBLE
70870: EQUAL
70871: IFTRUE 70875
70873: GO 71008
70875: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70876: LD_ADDR_VAR 0 5
70880: PUSH
70881: LD_VAR 0 1
70885: PUSH
70886: LD_INT 3
70888: PLUS
70889: PUSH
70890: LD_VAR 0 2
70894: PUSH
70895: LD_INT 4
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: LIST
70902: PUSH
70903: LD_VAR 0 1
70907: PUSH
70908: LD_INT 4
70910: PLUS
70911: PUSH
70912: LD_VAR 0 2
70916: PUSH
70917: LD_INT 4
70919: PLUS
70920: PUSH
70921: LD_INT 5
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: LIST
70928: PUSH
70929: LD_VAR 0 1
70933: PUSH
70934: LD_INT 4
70936: MINUS
70937: PUSH
70938: LD_VAR 0 2
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: LIST
70950: PUSH
70951: LD_VAR 0 1
70955: PUSH
70956: LD_VAR 0 2
70960: PUSH
70961: LD_INT 4
70963: MINUS
70964: PUSH
70965: LD_INT 3
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: LIST
70972: PUSH
70973: LD_VAR 0 1
70977: PUSH
70978: LD_INT 3
70980: MINUS
70981: PUSH
70982: LD_VAR 0 2
70986: PUSH
70987: LD_INT 3
70989: MINUS
70990: PUSH
70991: LD_INT 2
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: LIST
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: ST_TO_ADDR
// end ; 4 :
71006: GO 71287
71008: LD_INT 4
71010: DOUBLE
71011: EQUAL
71012: IFTRUE 71016
71014: GO 71149
71016: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71017: LD_ADDR_VAR 0 5
71021: PUSH
71022: LD_VAR 0 1
71026: PUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_INT 4
71034: PLUS
71035: PUSH
71036: LD_INT 0
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: PUSH
71044: LD_VAR 0 1
71048: PUSH
71049: LD_INT 3
71051: PLUS
71052: PUSH
71053: LD_VAR 0 2
71057: PUSH
71058: LD_INT 3
71060: PLUS
71061: PUSH
71062: LD_INT 5
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: LIST
71069: PUSH
71070: LD_VAR 0 1
71074: PUSH
71075: LD_INT 4
71077: PLUS
71078: PUSH
71079: LD_VAR 0 2
71083: PUSH
71084: LD_INT 4
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: PUSH
71092: LD_VAR 0 1
71096: PUSH
71097: LD_VAR 0 2
71101: PUSH
71102: LD_INT 3
71104: MINUS
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: LIST
71113: PUSH
71114: LD_VAR 0 1
71118: PUSH
71119: LD_INT 4
71121: MINUS
71122: PUSH
71123: LD_VAR 0 2
71127: PUSH
71128: LD_INT 4
71130: MINUS
71131: PUSH
71132: LD_INT 2
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: LIST
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: ST_TO_ADDR
// end ; 5 :
71147: GO 71287
71149: LD_INT 5
71151: DOUBLE
71152: EQUAL
71153: IFTRUE 71157
71155: GO 71286
71157: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71158: LD_ADDR_VAR 0 5
71162: PUSH
71163: LD_VAR 0 1
71167: PUSH
71168: LD_INT 4
71170: MINUS
71171: PUSH
71172: LD_VAR 0 2
71176: PUSH
71177: LD_INT 1
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: LIST
71184: PUSH
71185: LD_VAR 0 1
71189: PUSH
71190: LD_VAR 0 2
71194: PUSH
71195: LD_INT 4
71197: MINUS
71198: PUSH
71199: LD_INT 3
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: LIST
71206: PUSH
71207: LD_VAR 0 1
71211: PUSH
71212: LD_INT 4
71214: PLUS
71215: PUSH
71216: LD_VAR 0 2
71220: PUSH
71221: LD_INT 4
71223: PLUS
71224: PUSH
71225: LD_INT 5
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: LIST
71232: PUSH
71233: LD_VAR 0 1
71237: PUSH
71238: LD_INT 3
71240: PLUS
71241: PUSH
71242: LD_VAR 0 2
71246: PUSH
71247: LD_INT 4
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: LIST
71254: PUSH
71255: LD_VAR 0 1
71259: PUSH
71260: LD_VAR 0 2
71264: PUSH
71265: LD_INT 3
71267: PLUS
71268: PUSH
71269: LD_INT 0
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: LIST
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: ST_TO_ADDR
// end ; end ;
71284: GO 71287
71286: POP
// result := list ;
71287: LD_ADDR_VAR 0 4
71291: PUSH
71292: LD_VAR 0 5
71296: ST_TO_ADDR
// end ;
71297: LD_VAR 0 4
71301: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71302: LD_INT 0
71304: PPUSH
71305: PPUSH
71306: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71307: LD_VAR 0 1
71311: NOT
71312: PUSH
71313: LD_VAR 0 2
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: LD_INT 2
71323: PUSH
71324: LD_INT 3
71326: PUSH
71327: LD_INT 4
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: IN
71336: NOT
71337: OR
71338: IFFALSE 71342
// exit ;
71340: GO 71425
// tmp := [ ] ;
71342: LD_ADDR_VAR 0 5
71346: PUSH
71347: EMPTY
71348: ST_TO_ADDR
// for i in units do
71349: LD_ADDR_VAR 0 4
71353: PUSH
71354: LD_VAR 0 1
71358: PUSH
71359: FOR_IN
71360: IFFALSE 71394
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71362: LD_ADDR_VAR 0 5
71366: PUSH
71367: LD_VAR 0 5
71371: PPUSH
71372: LD_VAR 0 4
71376: PPUSH
71377: LD_VAR 0 2
71381: PPUSH
71382: CALL_OW 259
71386: PPUSH
71387: CALL 72786 0 2
71391: ST_TO_ADDR
71392: GO 71359
71394: POP
71395: POP
// if not tmp then
71396: LD_VAR 0 5
71400: NOT
71401: IFFALSE 71405
// exit ;
71403: GO 71425
// result := SortListByListDesc ( units , tmp ) ;
71405: LD_ADDR_VAR 0 3
71409: PUSH
71410: LD_VAR 0 1
71414: PPUSH
71415: LD_VAR 0 5
71419: PPUSH
71420: CALL_OW 77
71424: ST_TO_ADDR
// end ;
71425: LD_VAR 0 3
71429: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71430: LD_INT 0
71432: PPUSH
71433: PPUSH
71434: PPUSH
// result := false ;
71435: LD_ADDR_VAR 0 3
71439: PUSH
71440: LD_INT 0
71442: ST_TO_ADDR
// if not building then
71443: LD_VAR 0 2
71447: NOT
71448: IFFALSE 71452
// exit ;
71450: GO 71590
// x := GetX ( building ) ;
71452: LD_ADDR_VAR 0 4
71456: PUSH
71457: LD_VAR 0 2
71461: PPUSH
71462: CALL_OW 250
71466: ST_TO_ADDR
// y := GetY ( building ) ;
71467: LD_ADDR_VAR 0 5
71471: PUSH
71472: LD_VAR 0 2
71476: PPUSH
71477: CALL_OW 251
71481: ST_TO_ADDR
// if not x or not y then
71482: LD_VAR 0 4
71486: NOT
71487: PUSH
71488: LD_VAR 0 5
71492: NOT
71493: OR
71494: IFFALSE 71498
// exit ;
71496: GO 71590
// if GetTaskList ( unit ) then
71498: LD_VAR 0 1
71502: PPUSH
71503: CALL_OW 437
71507: IFFALSE 71590
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71509: LD_STRING e
71511: PUSH
71512: LD_VAR 0 1
71516: PPUSH
71517: CALL_OW 437
71521: PUSH
71522: LD_INT 1
71524: ARRAY
71525: PUSH
71526: LD_INT 1
71528: ARRAY
71529: EQUAL
71530: PUSH
71531: LD_VAR 0 4
71535: PUSH
71536: LD_VAR 0 1
71540: PPUSH
71541: CALL_OW 437
71545: PUSH
71546: LD_INT 1
71548: ARRAY
71549: PUSH
71550: LD_INT 2
71552: ARRAY
71553: EQUAL
71554: AND
71555: PUSH
71556: LD_VAR 0 5
71560: PUSH
71561: LD_VAR 0 1
71565: PPUSH
71566: CALL_OW 437
71570: PUSH
71571: LD_INT 1
71573: ARRAY
71574: PUSH
71575: LD_INT 3
71577: ARRAY
71578: EQUAL
71579: AND
71580: IFFALSE 71590
// result := true end ;
71582: LD_ADDR_VAR 0 3
71586: PUSH
71587: LD_INT 1
71589: ST_TO_ADDR
// end ;
71590: LD_VAR 0 3
71594: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71595: LD_INT 0
71597: PPUSH
// result := false ;
71598: LD_ADDR_VAR 0 4
71602: PUSH
71603: LD_INT 0
71605: ST_TO_ADDR
// if GetTaskList ( unit ) then
71606: LD_VAR 0 1
71610: PPUSH
71611: CALL_OW 437
71615: IFFALSE 71698
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71617: LD_STRING M
71619: PUSH
71620: LD_VAR 0 1
71624: PPUSH
71625: CALL_OW 437
71629: PUSH
71630: LD_INT 1
71632: ARRAY
71633: PUSH
71634: LD_INT 1
71636: ARRAY
71637: EQUAL
71638: PUSH
71639: LD_VAR 0 2
71643: PUSH
71644: LD_VAR 0 1
71648: PPUSH
71649: CALL_OW 437
71653: PUSH
71654: LD_INT 1
71656: ARRAY
71657: PUSH
71658: LD_INT 2
71660: ARRAY
71661: EQUAL
71662: AND
71663: PUSH
71664: LD_VAR 0 3
71668: PUSH
71669: LD_VAR 0 1
71673: PPUSH
71674: CALL_OW 437
71678: PUSH
71679: LD_INT 1
71681: ARRAY
71682: PUSH
71683: LD_INT 3
71685: ARRAY
71686: EQUAL
71687: AND
71688: IFFALSE 71698
// result := true ;
71690: LD_ADDR_VAR 0 4
71694: PUSH
71695: LD_INT 1
71697: ST_TO_ADDR
// end ; end ;
71698: LD_VAR 0 4
71702: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71703: LD_INT 0
71705: PPUSH
71706: PPUSH
71707: PPUSH
71708: PPUSH
// if not unit or not area then
71709: LD_VAR 0 1
71713: NOT
71714: PUSH
71715: LD_VAR 0 2
71719: NOT
71720: OR
71721: IFFALSE 71725
// exit ;
71723: GO 71889
// tmp := AreaToList ( area , i ) ;
71725: LD_ADDR_VAR 0 6
71729: PUSH
71730: LD_VAR 0 2
71734: PPUSH
71735: LD_VAR 0 5
71739: PPUSH
71740: CALL_OW 517
71744: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71745: LD_ADDR_VAR 0 5
71749: PUSH
71750: DOUBLE
71751: LD_INT 1
71753: DEC
71754: ST_TO_ADDR
71755: LD_VAR 0 6
71759: PUSH
71760: LD_INT 1
71762: ARRAY
71763: PUSH
71764: FOR_TO
71765: IFFALSE 71887
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71767: LD_ADDR_VAR 0 7
71771: PUSH
71772: LD_VAR 0 6
71776: PUSH
71777: LD_INT 1
71779: ARRAY
71780: PUSH
71781: LD_VAR 0 5
71785: ARRAY
71786: PUSH
71787: LD_VAR 0 6
71791: PUSH
71792: LD_INT 2
71794: ARRAY
71795: PUSH
71796: LD_VAR 0 5
71800: ARRAY
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71806: LD_VAR 0 7
71810: PUSH
71811: LD_INT 1
71813: ARRAY
71814: PPUSH
71815: LD_VAR 0 7
71819: PUSH
71820: LD_INT 2
71822: ARRAY
71823: PPUSH
71824: CALL_OW 428
71828: PUSH
71829: LD_INT 0
71831: EQUAL
71832: IFFALSE 71885
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71834: LD_VAR 0 1
71838: PPUSH
71839: LD_VAR 0 7
71843: PUSH
71844: LD_INT 1
71846: ARRAY
71847: PPUSH
71848: LD_VAR 0 7
71852: PUSH
71853: LD_INT 2
71855: ARRAY
71856: PPUSH
71857: LD_VAR 0 3
71861: PPUSH
71862: CALL_OW 48
// result := IsPlaced ( unit ) ;
71866: LD_ADDR_VAR 0 4
71870: PUSH
71871: LD_VAR 0 1
71875: PPUSH
71876: CALL_OW 305
71880: ST_TO_ADDR
// exit ;
71881: POP
71882: POP
71883: GO 71889
// end ; end ;
71885: GO 71764
71887: POP
71888: POP
// end ;
71889: LD_VAR 0 4
71893: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71894: LD_INT 0
71896: PPUSH
71897: PPUSH
71898: PPUSH
// if not side or side > 8 then
71899: LD_VAR 0 1
71903: NOT
71904: PUSH
71905: LD_VAR 0 1
71909: PUSH
71910: LD_INT 8
71912: GREATER
71913: OR
71914: IFFALSE 71918
// exit ;
71916: GO 72105
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71918: LD_ADDR_VAR 0 4
71922: PUSH
71923: LD_INT 22
71925: PUSH
71926: LD_VAR 0 1
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 21
71937: PUSH
71938: LD_INT 3
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PPUSH
71949: CALL_OW 69
71953: ST_TO_ADDR
// if not tmp then
71954: LD_VAR 0 4
71958: NOT
71959: IFFALSE 71963
// exit ;
71961: GO 72105
// enable_addtolog := true ;
71963: LD_ADDR_OWVAR 81
71967: PUSH
71968: LD_INT 1
71970: ST_TO_ADDR
// AddToLog ( [ ) ;
71971: LD_STRING [
71973: PPUSH
71974: CALL_OW 561
// for i in tmp do
71978: LD_ADDR_VAR 0 3
71982: PUSH
71983: LD_VAR 0 4
71987: PUSH
71988: FOR_IN
71989: IFFALSE 72096
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71991: LD_STRING [
71993: PUSH
71994: LD_VAR 0 3
71998: PPUSH
71999: CALL_OW 266
72003: STR
72004: PUSH
72005: LD_STRING , 
72007: STR
72008: PUSH
72009: LD_VAR 0 3
72013: PPUSH
72014: CALL_OW 250
72018: STR
72019: PUSH
72020: LD_STRING , 
72022: STR
72023: PUSH
72024: LD_VAR 0 3
72028: PPUSH
72029: CALL_OW 251
72033: STR
72034: PUSH
72035: LD_STRING , 
72037: STR
72038: PUSH
72039: LD_VAR 0 3
72043: PPUSH
72044: CALL_OW 254
72048: STR
72049: PUSH
72050: LD_STRING , 
72052: STR
72053: PUSH
72054: LD_VAR 0 3
72058: PPUSH
72059: LD_INT 1
72061: PPUSH
72062: CALL_OW 268
72066: STR
72067: PUSH
72068: LD_STRING , 
72070: STR
72071: PUSH
72072: LD_VAR 0 3
72076: PPUSH
72077: LD_INT 2
72079: PPUSH
72080: CALL_OW 268
72084: STR
72085: PUSH
72086: LD_STRING ],
72088: STR
72089: PPUSH
72090: CALL_OW 561
// end ;
72094: GO 71988
72096: POP
72097: POP
// AddToLog ( ]; ) ;
72098: LD_STRING ];
72100: PPUSH
72101: CALL_OW 561
// end ;
72105: LD_VAR 0 2
72109: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72110: LD_INT 0
72112: PPUSH
72113: PPUSH
72114: PPUSH
72115: PPUSH
72116: PPUSH
// if not area or not rate or not max then
72117: LD_VAR 0 1
72121: NOT
72122: PUSH
72123: LD_VAR 0 2
72127: NOT
72128: OR
72129: PUSH
72130: LD_VAR 0 4
72134: NOT
72135: OR
72136: IFFALSE 72140
// exit ;
72138: GO 72329
// while 1 do
72140: LD_INT 1
72142: IFFALSE 72329
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72144: LD_ADDR_VAR 0 9
72148: PUSH
72149: LD_VAR 0 1
72153: PPUSH
72154: LD_INT 1
72156: PPUSH
72157: CALL_OW 287
72161: PUSH
72162: LD_INT 10
72164: MUL
72165: ST_TO_ADDR
// r := rate / 10 ;
72166: LD_ADDR_VAR 0 7
72170: PUSH
72171: LD_VAR 0 2
72175: PUSH
72176: LD_INT 10
72178: DIVREAL
72179: ST_TO_ADDR
// time := 1 1$00 ;
72180: LD_ADDR_VAR 0 8
72184: PUSH
72185: LD_INT 2100
72187: ST_TO_ADDR
// if amount < min then
72188: LD_VAR 0 9
72192: PUSH
72193: LD_VAR 0 3
72197: LESS
72198: IFFALSE 72216
// r := r * 2 else
72200: LD_ADDR_VAR 0 7
72204: PUSH
72205: LD_VAR 0 7
72209: PUSH
72210: LD_INT 2
72212: MUL
72213: ST_TO_ADDR
72214: GO 72242
// if amount > max then
72216: LD_VAR 0 9
72220: PUSH
72221: LD_VAR 0 4
72225: GREATER
72226: IFFALSE 72242
// r := r / 2 ;
72228: LD_ADDR_VAR 0 7
72232: PUSH
72233: LD_VAR 0 7
72237: PUSH
72238: LD_INT 2
72240: DIVREAL
72241: ST_TO_ADDR
// time := time / r ;
72242: LD_ADDR_VAR 0 8
72246: PUSH
72247: LD_VAR 0 8
72251: PUSH
72252: LD_VAR 0 7
72256: DIVREAL
72257: ST_TO_ADDR
// if time < 0 then
72258: LD_VAR 0 8
72262: PUSH
72263: LD_INT 0
72265: LESS
72266: IFFALSE 72283
// time := time * - 1 ;
72268: LD_ADDR_VAR 0 8
72272: PUSH
72273: LD_VAR 0 8
72277: PUSH
72278: LD_INT 1
72280: NEG
72281: MUL
72282: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72283: LD_VAR 0 8
72287: PUSH
72288: LD_INT 35
72290: PPUSH
72291: LD_INT 875
72293: PPUSH
72294: CALL_OW 12
72298: PLUS
72299: PPUSH
72300: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72304: LD_INT 1
72306: PPUSH
72307: LD_INT 5
72309: PPUSH
72310: CALL_OW 12
72314: PPUSH
72315: LD_VAR 0 1
72319: PPUSH
72320: LD_INT 1
72322: PPUSH
72323: CALL_OW 55
// end ;
72327: GO 72140
// end ;
72329: LD_VAR 0 5
72333: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72334: LD_INT 0
72336: PPUSH
72337: PPUSH
72338: PPUSH
72339: PPUSH
72340: PPUSH
72341: PPUSH
72342: PPUSH
72343: PPUSH
// if not turrets or not factories then
72344: LD_VAR 0 1
72348: NOT
72349: PUSH
72350: LD_VAR 0 2
72354: NOT
72355: OR
72356: IFFALSE 72360
// exit ;
72358: GO 72667
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72360: LD_ADDR_VAR 0 10
72364: PUSH
72365: LD_INT 5
72367: PUSH
72368: LD_INT 6
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 2
72377: PUSH
72378: LD_INT 4
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 3
72387: PUSH
72388: LD_INT 5
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 24
72402: PUSH
72403: LD_INT 25
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 23
72412: PUSH
72413: LD_INT 27
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 42
72426: PUSH
72427: LD_INT 43
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 44
72436: PUSH
72437: LD_INT 46
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 45
72446: PUSH
72447: LD_INT 47
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: LIST
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: ST_TO_ADDR
// result := [ ] ;
72464: LD_ADDR_VAR 0 3
72468: PUSH
72469: EMPTY
72470: ST_TO_ADDR
// for i in turrets do
72471: LD_ADDR_VAR 0 4
72475: PUSH
72476: LD_VAR 0 1
72480: PUSH
72481: FOR_IN
72482: IFFALSE 72665
// begin nat := GetNation ( i ) ;
72484: LD_ADDR_VAR 0 7
72488: PUSH
72489: LD_VAR 0 4
72493: PPUSH
72494: CALL_OW 248
72498: ST_TO_ADDR
// weapon := 0 ;
72499: LD_ADDR_VAR 0 8
72503: PUSH
72504: LD_INT 0
72506: ST_TO_ADDR
// if not nat then
72507: LD_VAR 0 7
72511: NOT
72512: IFFALSE 72516
// continue ;
72514: GO 72481
// for j in list [ nat ] do
72516: LD_ADDR_VAR 0 5
72520: PUSH
72521: LD_VAR 0 10
72525: PUSH
72526: LD_VAR 0 7
72530: ARRAY
72531: PUSH
72532: FOR_IN
72533: IFFALSE 72574
// if GetBWeapon ( i ) = j [ 1 ] then
72535: LD_VAR 0 4
72539: PPUSH
72540: CALL_OW 269
72544: PUSH
72545: LD_VAR 0 5
72549: PUSH
72550: LD_INT 1
72552: ARRAY
72553: EQUAL
72554: IFFALSE 72572
// begin weapon := j [ 2 ] ;
72556: LD_ADDR_VAR 0 8
72560: PUSH
72561: LD_VAR 0 5
72565: PUSH
72566: LD_INT 2
72568: ARRAY
72569: ST_TO_ADDR
// break ;
72570: GO 72574
// end ;
72572: GO 72532
72574: POP
72575: POP
// if not weapon then
72576: LD_VAR 0 8
72580: NOT
72581: IFFALSE 72585
// continue ;
72583: GO 72481
// for k in factories do
72585: LD_ADDR_VAR 0 6
72589: PUSH
72590: LD_VAR 0 2
72594: PUSH
72595: FOR_IN
72596: IFFALSE 72661
// begin weapons := AvailableWeaponList ( k ) ;
72598: LD_ADDR_VAR 0 9
72602: PUSH
72603: LD_VAR 0 6
72607: PPUSH
72608: CALL_OW 478
72612: ST_TO_ADDR
// if not weapons then
72613: LD_VAR 0 9
72617: NOT
72618: IFFALSE 72622
// continue ;
72620: GO 72595
// if weapon in weapons then
72622: LD_VAR 0 8
72626: PUSH
72627: LD_VAR 0 9
72631: IN
72632: IFFALSE 72659
// begin result := [ i , weapon ] ;
72634: LD_ADDR_VAR 0 3
72638: PUSH
72639: LD_VAR 0 4
72643: PUSH
72644: LD_VAR 0 8
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: ST_TO_ADDR
// exit ;
72653: POP
72654: POP
72655: POP
72656: POP
72657: GO 72667
// end ; end ;
72659: GO 72595
72661: POP
72662: POP
// end ;
72663: GO 72481
72665: POP
72666: POP
// end ;
72667: LD_VAR 0 3
72671: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72672: LD_INT 0
72674: PPUSH
// if not side or side > 8 then
72675: LD_VAR 0 3
72679: NOT
72680: PUSH
72681: LD_VAR 0 3
72685: PUSH
72686: LD_INT 8
72688: GREATER
72689: OR
72690: IFFALSE 72694
// exit ;
72692: GO 72753
// if not range then
72694: LD_VAR 0 4
72698: NOT
72699: IFFALSE 72710
// range := - 12 ;
72701: LD_ADDR_VAR 0 4
72705: PUSH
72706: LD_INT 12
72708: NEG
72709: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72710: LD_VAR 0 1
72714: PPUSH
72715: LD_VAR 0 2
72719: PPUSH
72720: LD_VAR 0 3
72724: PPUSH
72725: LD_VAR 0 4
72729: PPUSH
72730: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72734: LD_VAR 0 1
72738: PPUSH
72739: LD_VAR 0 2
72743: PPUSH
72744: LD_VAR 0 3
72748: PPUSH
72749: CALL_OW 331
// end ;
72753: LD_VAR 0 5
72757: RET
// export function Video ( mode ) ; begin
72758: LD_INT 0
72760: PPUSH
// ingame_video = mode ;
72761: LD_ADDR_OWVAR 52
72765: PUSH
72766: LD_VAR 0 1
72770: ST_TO_ADDR
// interface_hidden = mode ;
72771: LD_ADDR_OWVAR 54
72775: PUSH
72776: LD_VAR 0 1
72780: ST_TO_ADDR
// end ;
72781: LD_VAR 0 2
72785: RET
// export function Join ( array , element ) ; begin
72786: LD_INT 0
72788: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72789: LD_ADDR_VAR 0 3
72793: PUSH
72794: LD_VAR 0 1
72798: PPUSH
72799: LD_VAR 0 1
72803: PUSH
72804: LD_INT 1
72806: PLUS
72807: PPUSH
72808: LD_VAR 0 2
72812: PPUSH
72813: CALL_OW 1
72817: ST_TO_ADDR
// end ;
72818: LD_VAR 0 3
72822: RET
// export function JoinUnion ( array , element ) ; begin
72823: LD_INT 0
72825: PPUSH
// result := array union element ;
72826: LD_ADDR_VAR 0 3
72830: PUSH
72831: LD_VAR 0 1
72835: PUSH
72836: LD_VAR 0 2
72840: UNION
72841: ST_TO_ADDR
// end ;
72842: LD_VAR 0 3
72846: RET
// export function GetBehemoths ( side ) ; begin
72847: LD_INT 0
72849: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72850: LD_ADDR_VAR 0 2
72854: PUSH
72855: LD_INT 22
72857: PUSH
72858: LD_VAR 0 1
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 31
72869: PUSH
72870: LD_INT 25
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PPUSH
72881: CALL_OW 69
72885: ST_TO_ADDR
// end ;
72886: LD_VAR 0 2
72890: RET
// export function Shuffle ( array ) ; var i , index ; begin
72891: LD_INT 0
72893: PPUSH
72894: PPUSH
72895: PPUSH
// result := [ ] ;
72896: LD_ADDR_VAR 0 2
72900: PUSH
72901: EMPTY
72902: ST_TO_ADDR
// if not array then
72903: LD_VAR 0 1
72907: NOT
72908: IFFALSE 72912
// exit ;
72910: GO 73011
// Randomize ;
72912: CALL_OW 10
// for i = array downto 1 do
72916: LD_ADDR_VAR 0 3
72920: PUSH
72921: DOUBLE
72922: LD_VAR 0 1
72926: INC
72927: ST_TO_ADDR
72928: LD_INT 1
72930: PUSH
72931: FOR_DOWNTO
72932: IFFALSE 73009
// begin index := rand ( 1 , array ) ;
72934: LD_ADDR_VAR 0 4
72938: PUSH
72939: LD_INT 1
72941: PPUSH
72942: LD_VAR 0 1
72946: PPUSH
72947: CALL_OW 12
72951: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72952: LD_ADDR_VAR 0 2
72956: PUSH
72957: LD_VAR 0 2
72961: PPUSH
72962: LD_VAR 0 2
72966: PUSH
72967: LD_INT 1
72969: PLUS
72970: PPUSH
72971: LD_VAR 0 1
72975: PUSH
72976: LD_VAR 0 4
72980: ARRAY
72981: PPUSH
72982: CALL_OW 2
72986: ST_TO_ADDR
// array := Delete ( array , index ) ;
72987: LD_ADDR_VAR 0 1
72991: PUSH
72992: LD_VAR 0 1
72996: PPUSH
72997: LD_VAR 0 4
73001: PPUSH
73002: CALL_OW 3
73006: ST_TO_ADDR
// end ;
73007: GO 72931
73009: POP
73010: POP
// end ;
73011: LD_VAR 0 2
73015: RET
// export function GetBaseMaterials ( base ) ; begin
73016: LD_INT 0
73018: PPUSH
// result := [ 0 , 0 , 0 ] ;
73019: LD_ADDR_VAR 0 2
73023: PUSH
73024: LD_INT 0
73026: PUSH
73027: LD_INT 0
73029: PUSH
73030: LD_INT 0
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: LIST
73037: ST_TO_ADDR
// if not base then
73038: LD_VAR 0 1
73042: NOT
73043: IFFALSE 73047
// exit ;
73045: GO 73096
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73047: LD_ADDR_VAR 0 2
73051: PUSH
73052: LD_VAR 0 1
73056: PPUSH
73057: LD_INT 1
73059: PPUSH
73060: CALL_OW 275
73064: PUSH
73065: LD_VAR 0 1
73069: PPUSH
73070: LD_INT 2
73072: PPUSH
73073: CALL_OW 275
73077: PUSH
73078: LD_VAR 0 1
73082: PPUSH
73083: LD_INT 3
73085: PPUSH
73086: CALL_OW 275
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: LIST
73095: ST_TO_ADDR
// end ;
73096: LD_VAR 0 2
73100: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73101: LD_INT 0
73103: PPUSH
73104: PPUSH
// result := array ;
73105: LD_ADDR_VAR 0 3
73109: PUSH
73110: LD_VAR 0 1
73114: ST_TO_ADDR
// if size >= result then
73115: LD_VAR 0 2
73119: PUSH
73120: LD_VAR 0 3
73124: GREATEREQUAL
73125: IFFALSE 73129
// exit ;
73127: GO 73179
// if size then
73129: LD_VAR 0 2
73133: IFFALSE 73179
// for i := array downto size do
73135: LD_ADDR_VAR 0 4
73139: PUSH
73140: DOUBLE
73141: LD_VAR 0 1
73145: INC
73146: ST_TO_ADDR
73147: LD_VAR 0 2
73151: PUSH
73152: FOR_DOWNTO
73153: IFFALSE 73177
// result := Delete ( result , result ) ;
73155: LD_ADDR_VAR 0 3
73159: PUSH
73160: LD_VAR 0 3
73164: PPUSH
73165: LD_VAR 0 3
73169: PPUSH
73170: CALL_OW 3
73174: ST_TO_ADDR
73175: GO 73152
73177: POP
73178: POP
// end ;
73179: LD_VAR 0 3
73183: RET
// export function ComExit ( unit ) ; var tmp ; begin
73184: LD_INT 0
73186: PPUSH
73187: PPUSH
// if not IsInUnit ( unit ) then
73188: LD_VAR 0 1
73192: PPUSH
73193: CALL_OW 310
73197: NOT
73198: IFFALSE 73202
// exit ;
73200: GO 73262
// tmp := IsInUnit ( unit ) ;
73202: LD_ADDR_VAR 0 3
73206: PUSH
73207: LD_VAR 0 1
73211: PPUSH
73212: CALL_OW 310
73216: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73217: LD_VAR 0 3
73221: PPUSH
73222: CALL_OW 247
73226: PUSH
73227: LD_INT 2
73229: EQUAL
73230: IFFALSE 73243
// ComExitVehicle ( unit ) else
73232: LD_VAR 0 1
73236: PPUSH
73237: CALL_OW 121
73241: GO 73252
// ComExitBuilding ( unit ) ;
73243: LD_VAR 0 1
73247: PPUSH
73248: CALL_OW 122
// result := tmp ;
73252: LD_ADDR_VAR 0 2
73256: PUSH
73257: LD_VAR 0 3
73261: ST_TO_ADDR
// end ;
73262: LD_VAR 0 2
73266: RET
// export function ComExitAll ( units ) ; var i ; begin
73267: LD_INT 0
73269: PPUSH
73270: PPUSH
// if not units then
73271: LD_VAR 0 1
73275: NOT
73276: IFFALSE 73280
// exit ;
73278: GO 73306
// for i in units do
73280: LD_ADDR_VAR 0 3
73284: PUSH
73285: LD_VAR 0 1
73289: PUSH
73290: FOR_IN
73291: IFFALSE 73304
// ComExit ( i ) ;
73293: LD_VAR 0 3
73297: PPUSH
73298: CALL 73184 0 1
73302: GO 73290
73304: POP
73305: POP
// end ;
73306: LD_VAR 0 2
73310: RET
// export function ResetHc ; begin
73311: LD_INT 0
73313: PPUSH
// InitHc ;
73314: CALL_OW 19
// hc_importance := 0 ;
73318: LD_ADDR_OWVAR 32
73322: PUSH
73323: LD_INT 0
73325: ST_TO_ADDR
// end ;
73326: LD_VAR 0 1
73330: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73331: LD_INT 0
73333: PPUSH
73334: PPUSH
73335: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73336: LD_ADDR_VAR 0 6
73340: PUSH
73341: LD_VAR 0 1
73345: PUSH
73346: LD_VAR 0 3
73350: PLUS
73351: PUSH
73352: LD_INT 2
73354: DIV
73355: ST_TO_ADDR
// if _x < 0 then
73356: LD_VAR 0 6
73360: PUSH
73361: LD_INT 0
73363: LESS
73364: IFFALSE 73381
// _x := _x * - 1 ;
73366: LD_ADDR_VAR 0 6
73370: PUSH
73371: LD_VAR 0 6
73375: PUSH
73376: LD_INT 1
73378: NEG
73379: MUL
73380: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73381: LD_ADDR_VAR 0 7
73385: PUSH
73386: LD_VAR 0 2
73390: PUSH
73391: LD_VAR 0 4
73395: PLUS
73396: PUSH
73397: LD_INT 2
73399: DIV
73400: ST_TO_ADDR
// if _y < 0 then
73401: LD_VAR 0 7
73405: PUSH
73406: LD_INT 0
73408: LESS
73409: IFFALSE 73426
// _y := _y * - 1 ;
73411: LD_ADDR_VAR 0 7
73415: PUSH
73416: LD_VAR 0 7
73420: PUSH
73421: LD_INT 1
73423: NEG
73424: MUL
73425: ST_TO_ADDR
// result := [ _x , _y ] ;
73426: LD_ADDR_VAR 0 5
73430: PUSH
73431: LD_VAR 0 6
73435: PUSH
73436: LD_VAR 0 7
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: ST_TO_ADDR
// end ;
73445: LD_VAR 0 5
73449: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73450: LD_INT 0
73452: PPUSH
73453: PPUSH
73454: PPUSH
73455: PPUSH
// task := GetTaskList ( unit ) ;
73456: LD_ADDR_VAR 0 7
73460: PUSH
73461: LD_VAR 0 1
73465: PPUSH
73466: CALL_OW 437
73470: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73471: LD_VAR 0 7
73475: NOT
73476: PUSH
73477: LD_VAR 0 1
73481: PPUSH
73482: LD_VAR 0 2
73486: PPUSH
73487: CALL_OW 308
73491: NOT
73492: AND
73493: IFFALSE 73497
// exit ;
73495: GO 73615
// if IsInArea ( unit , area ) then
73497: LD_VAR 0 1
73501: PPUSH
73502: LD_VAR 0 2
73506: PPUSH
73507: CALL_OW 308
73511: IFFALSE 73529
// begin ComMoveToArea ( unit , goAway ) ;
73513: LD_VAR 0 1
73517: PPUSH
73518: LD_VAR 0 3
73522: PPUSH
73523: CALL_OW 113
// exit ;
73527: GO 73615
// end ; if task [ 1 ] [ 1 ] <> M then
73529: LD_VAR 0 7
73533: PUSH
73534: LD_INT 1
73536: ARRAY
73537: PUSH
73538: LD_INT 1
73540: ARRAY
73541: PUSH
73542: LD_STRING M
73544: NONEQUAL
73545: IFFALSE 73549
// exit ;
73547: GO 73615
// x := task [ 1 ] [ 2 ] ;
73549: LD_ADDR_VAR 0 5
73553: PUSH
73554: LD_VAR 0 7
73558: PUSH
73559: LD_INT 1
73561: ARRAY
73562: PUSH
73563: LD_INT 2
73565: ARRAY
73566: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73567: LD_ADDR_VAR 0 6
73571: PUSH
73572: LD_VAR 0 7
73576: PUSH
73577: LD_INT 1
73579: ARRAY
73580: PUSH
73581: LD_INT 3
73583: ARRAY
73584: ST_TO_ADDR
// if InArea ( x , y , area ) then
73585: LD_VAR 0 5
73589: PPUSH
73590: LD_VAR 0 6
73594: PPUSH
73595: LD_VAR 0 2
73599: PPUSH
73600: CALL_OW 309
73604: IFFALSE 73615
// ComStop ( unit ) ;
73606: LD_VAR 0 1
73610: PPUSH
73611: CALL_OW 141
// end ;
73615: LD_VAR 0 4
73619: RET
// export function Abs ( value ) ; begin
73620: LD_INT 0
73622: PPUSH
// result := value ;
73623: LD_ADDR_VAR 0 2
73627: PUSH
73628: LD_VAR 0 1
73632: ST_TO_ADDR
// if value < 0 then
73633: LD_VAR 0 1
73637: PUSH
73638: LD_INT 0
73640: LESS
73641: IFFALSE 73658
// result := value * - 1 ;
73643: LD_ADDR_VAR 0 2
73647: PUSH
73648: LD_VAR 0 1
73652: PUSH
73653: LD_INT 1
73655: NEG
73656: MUL
73657: ST_TO_ADDR
// end ;
73658: LD_VAR 0 2
73662: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73663: LD_INT 0
73665: PPUSH
73666: PPUSH
73667: PPUSH
73668: PPUSH
73669: PPUSH
73670: PPUSH
73671: PPUSH
73672: PPUSH
// if not unit or not building then
73673: LD_VAR 0 1
73677: NOT
73678: PUSH
73679: LD_VAR 0 2
73683: NOT
73684: OR
73685: IFFALSE 73689
// exit ;
73687: GO 73915
// x := GetX ( building ) ;
73689: LD_ADDR_VAR 0 4
73693: PUSH
73694: LD_VAR 0 2
73698: PPUSH
73699: CALL_OW 250
73703: ST_TO_ADDR
// y := GetY ( building ) ;
73704: LD_ADDR_VAR 0 6
73708: PUSH
73709: LD_VAR 0 2
73713: PPUSH
73714: CALL_OW 251
73718: ST_TO_ADDR
// d := GetDir ( building ) ;
73719: LD_ADDR_VAR 0 8
73723: PUSH
73724: LD_VAR 0 2
73728: PPUSH
73729: CALL_OW 254
73733: ST_TO_ADDR
// r := 4 ;
73734: LD_ADDR_VAR 0 9
73738: PUSH
73739: LD_INT 4
73741: ST_TO_ADDR
// for i := 1 to 5 do
73742: LD_ADDR_VAR 0 10
73746: PUSH
73747: DOUBLE
73748: LD_INT 1
73750: DEC
73751: ST_TO_ADDR
73752: LD_INT 5
73754: PUSH
73755: FOR_TO
73756: IFFALSE 73913
// begin _x := ShiftX ( x , d , r + i ) ;
73758: LD_ADDR_VAR 0 5
73762: PUSH
73763: LD_VAR 0 4
73767: PPUSH
73768: LD_VAR 0 8
73772: PPUSH
73773: LD_VAR 0 9
73777: PUSH
73778: LD_VAR 0 10
73782: PLUS
73783: PPUSH
73784: CALL_OW 272
73788: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73789: LD_ADDR_VAR 0 7
73793: PUSH
73794: LD_VAR 0 6
73798: PPUSH
73799: LD_VAR 0 8
73803: PPUSH
73804: LD_VAR 0 9
73808: PUSH
73809: LD_VAR 0 10
73813: PLUS
73814: PPUSH
73815: CALL_OW 273
73819: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73820: LD_VAR 0 5
73824: PPUSH
73825: LD_VAR 0 7
73829: PPUSH
73830: CALL_OW 488
73834: PUSH
73835: LD_VAR 0 5
73839: PPUSH
73840: LD_VAR 0 7
73844: PPUSH
73845: CALL_OW 428
73849: PPUSH
73850: CALL_OW 247
73854: PUSH
73855: LD_INT 3
73857: PUSH
73858: LD_INT 2
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: IN
73865: NOT
73866: AND
73867: IFFALSE 73911
// begin ComMoveXY ( unit , _x , _y ) ;
73869: LD_VAR 0 1
73873: PPUSH
73874: LD_VAR 0 5
73878: PPUSH
73879: LD_VAR 0 7
73883: PPUSH
73884: CALL_OW 111
// result := [ _x , _y ] ;
73888: LD_ADDR_VAR 0 3
73892: PUSH
73893: LD_VAR 0 5
73897: PUSH
73898: LD_VAR 0 7
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: ST_TO_ADDR
// exit ;
73907: POP
73908: POP
73909: GO 73915
// end ; end ;
73911: GO 73755
73913: POP
73914: POP
// end ;
73915: LD_VAR 0 3
73919: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73920: LD_INT 0
73922: PPUSH
73923: PPUSH
73924: PPUSH
// result := 0 ;
73925: LD_ADDR_VAR 0 3
73929: PUSH
73930: LD_INT 0
73932: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73933: LD_VAR 0 1
73937: PUSH
73938: LD_INT 0
73940: LESS
73941: PUSH
73942: LD_VAR 0 1
73946: PUSH
73947: LD_INT 8
73949: GREATER
73950: OR
73951: PUSH
73952: LD_VAR 0 2
73956: PUSH
73957: LD_INT 0
73959: LESS
73960: OR
73961: PUSH
73962: LD_VAR 0 2
73966: PUSH
73967: LD_INT 8
73969: GREATER
73970: OR
73971: IFFALSE 73975
// exit ;
73973: GO 74050
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73975: LD_ADDR_VAR 0 4
73979: PUSH
73980: LD_INT 22
73982: PUSH
73983: LD_VAR 0 2
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PPUSH
73992: CALL_OW 69
73996: PUSH
73997: FOR_IN
73998: IFFALSE 74048
// begin un := UnitShoot ( i ) ;
74000: LD_ADDR_VAR 0 5
74004: PUSH
74005: LD_VAR 0 4
74009: PPUSH
74010: CALL_OW 504
74014: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74015: LD_VAR 0 5
74019: PPUSH
74020: CALL_OW 255
74024: PUSH
74025: LD_VAR 0 1
74029: EQUAL
74030: IFFALSE 74046
// begin result := un ;
74032: LD_ADDR_VAR 0 3
74036: PUSH
74037: LD_VAR 0 5
74041: ST_TO_ADDR
// exit ;
74042: POP
74043: POP
74044: GO 74050
// end ; end ;
74046: GO 73997
74048: POP
74049: POP
// end ;
74050: LD_VAR 0 3
74054: RET
// export function GetCargoBay ( units ) ; begin
74055: LD_INT 0
74057: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74058: LD_ADDR_VAR 0 2
74062: PUSH
74063: LD_VAR 0 1
74067: PPUSH
74068: LD_INT 2
74070: PUSH
74071: LD_INT 34
74073: PUSH
74074: LD_INT 12
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: LD_INT 34
74083: PUSH
74084: LD_INT 51
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 34
74093: PUSH
74094: LD_INT 32
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: PUSH
74101: LD_INT 34
74103: PUSH
74104: LD_INT 89
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: PPUSH
74118: CALL_OW 72
74122: ST_TO_ADDR
// end ;
74123: LD_VAR 0 2
74127: RET
// export function Negate ( value ) ; begin
74128: LD_INT 0
74130: PPUSH
// result := not value ;
74131: LD_ADDR_VAR 0 2
74135: PUSH
74136: LD_VAR 0 1
74140: NOT
74141: ST_TO_ADDR
// end ;
74142: LD_VAR 0 2
74146: RET
// export function Inc ( value ) ; begin
74147: LD_INT 0
74149: PPUSH
// result := value + 1 ;
74150: LD_ADDR_VAR 0 2
74154: PUSH
74155: LD_VAR 0 1
74159: PUSH
74160: LD_INT 1
74162: PLUS
74163: ST_TO_ADDR
// end ;
74164: LD_VAR 0 2
74168: RET
// export function Dec ( value ) ; begin
74169: LD_INT 0
74171: PPUSH
// result := value - 1 ;
74172: LD_ADDR_VAR 0 2
74176: PUSH
74177: LD_VAR 0 1
74181: PUSH
74182: LD_INT 1
74184: MINUS
74185: ST_TO_ADDR
// end ;
74186: LD_VAR 0 2
74190: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74191: LD_INT 0
74193: PPUSH
74194: PPUSH
74195: PPUSH
74196: PPUSH
74197: PPUSH
74198: PPUSH
74199: PPUSH
74200: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74201: LD_VAR 0 1
74205: PPUSH
74206: LD_VAR 0 2
74210: PPUSH
74211: CALL_OW 488
74215: NOT
74216: PUSH
74217: LD_VAR 0 3
74221: PPUSH
74222: LD_VAR 0 4
74226: PPUSH
74227: CALL_OW 488
74231: NOT
74232: OR
74233: IFFALSE 74246
// begin result := - 1 ;
74235: LD_ADDR_VAR 0 5
74239: PUSH
74240: LD_INT 1
74242: NEG
74243: ST_TO_ADDR
// exit ;
74244: GO 74481
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74246: LD_ADDR_VAR 0 12
74250: PUSH
74251: LD_VAR 0 1
74255: PPUSH
74256: LD_VAR 0 2
74260: PPUSH
74261: LD_VAR 0 3
74265: PPUSH
74266: LD_VAR 0 4
74270: PPUSH
74271: CALL 73331 0 4
74275: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74276: LD_ADDR_VAR 0 11
74280: PUSH
74281: LD_VAR 0 1
74285: PPUSH
74286: LD_VAR 0 2
74290: PPUSH
74291: LD_VAR 0 12
74295: PUSH
74296: LD_INT 1
74298: ARRAY
74299: PPUSH
74300: LD_VAR 0 12
74304: PUSH
74305: LD_INT 2
74307: ARRAY
74308: PPUSH
74309: CALL_OW 298
74313: ST_TO_ADDR
// distance := 9999 ;
74314: LD_ADDR_VAR 0 10
74318: PUSH
74319: LD_INT 9999
74321: ST_TO_ADDR
// for i := 0 to 5 do
74322: LD_ADDR_VAR 0 6
74326: PUSH
74327: DOUBLE
74328: LD_INT 0
74330: DEC
74331: ST_TO_ADDR
74332: LD_INT 5
74334: PUSH
74335: FOR_TO
74336: IFFALSE 74479
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74338: LD_ADDR_VAR 0 7
74342: PUSH
74343: LD_VAR 0 1
74347: PPUSH
74348: LD_VAR 0 6
74352: PPUSH
74353: LD_VAR 0 11
74357: PPUSH
74358: CALL_OW 272
74362: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74363: LD_ADDR_VAR 0 8
74367: PUSH
74368: LD_VAR 0 2
74372: PPUSH
74373: LD_VAR 0 6
74377: PPUSH
74378: LD_VAR 0 11
74382: PPUSH
74383: CALL_OW 273
74387: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74388: LD_VAR 0 7
74392: PPUSH
74393: LD_VAR 0 8
74397: PPUSH
74398: CALL_OW 488
74402: NOT
74403: IFFALSE 74407
// continue ;
74405: GO 74335
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74407: LD_ADDR_VAR 0 9
74411: PUSH
74412: LD_VAR 0 12
74416: PUSH
74417: LD_INT 1
74419: ARRAY
74420: PPUSH
74421: LD_VAR 0 12
74425: PUSH
74426: LD_INT 2
74428: ARRAY
74429: PPUSH
74430: LD_VAR 0 7
74434: PPUSH
74435: LD_VAR 0 8
74439: PPUSH
74440: CALL_OW 298
74444: ST_TO_ADDR
// if tmp < distance then
74445: LD_VAR 0 9
74449: PUSH
74450: LD_VAR 0 10
74454: LESS
74455: IFFALSE 74477
// begin result := i ;
74457: LD_ADDR_VAR 0 5
74461: PUSH
74462: LD_VAR 0 6
74466: ST_TO_ADDR
// distance := tmp ;
74467: LD_ADDR_VAR 0 10
74471: PUSH
74472: LD_VAR 0 9
74476: ST_TO_ADDR
// end ; end ;
74477: GO 74335
74479: POP
74480: POP
// end ;
74481: LD_VAR 0 5
74485: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74486: LD_INT 0
74488: PPUSH
74489: PPUSH
// if not driver or not IsInUnit ( driver ) then
74490: LD_VAR 0 1
74494: NOT
74495: PUSH
74496: LD_VAR 0 1
74500: PPUSH
74501: CALL_OW 310
74505: NOT
74506: OR
74507: IFFALSE 74511
// exit ;
74509: GO 74601
// vehicle := IsInUnit ( driver ) ;
74511: LD_ADDR_VAR 0 3
74515: PUSH
74516: LD_VAR 0 1
74520: PPUSH
74521: CALL_OW 310
74525: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74526: LD_VAR 0 1
74530: PPUSH
74531: LD_STRING \
74533: PUSH
74534: LD_INT 0
74536: PUSH
74537: LD_INT 0
74539: PUSH
74540: LD_INT 0
74542: PUSH
74543: LD_INT 0
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: LD_INT 0
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: PUSH
74561: LD_STRING E
74563: PUSH
74564: LD_INT 0
74566: PUSH
74567: LD_INT 0
74569: PUSH
74570: LD_VAR 0 3
74574: PUSH
74575: LD_INT 0
74577: PUSH
74578: LD_INT 0
74580: PUSH
74581: LD_INT 0
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PPUSH
74597: CALL_OW 446
// end ;
74601: LD_VAR 0 2
74605: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74606: LD_INT 0
74608: PPUSH
74609: PPUSH
// if not driver or not IsInUnit ( driver ) then
74610: LD_VAR 0 1
74614: NOT
74615: PUSH
74616: LD_VAR 0 1
74620: PPUSH
74621: CALL_OW 310
74625: NOT
74626: OR
74627: IFFALSE 74631
// exit ;
74629: GO 74721
// vehicle := IsInUnit ( driver ) ;
74631: LD_ADDR_VAR 0 3
74635: PUSH
74636: LD_VAR 0 1
74640: PPUSH
74641: CALL_OW 310
74645: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74646: LD_VAR 0 1
74650: PPUSH
74651: LD_STRING \
74653: PUSH
74654: LD_INT 0
74656: PUSH
74657: LD_INT 0
74659: PUSH
74660: LD_INT 0
74662: PUSH
74663: LD_INT 0
74665: PUSH
74666: LD_INT 0
74668: PUSH
74669: LD_INT 0
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: PUSH
74681: LD_STRING E
74683: PUSH
74684: LD_INT 0
74686: PUSH
74687: LD_INT 0
74689: PUSH
74690: LD_VAR 0 3
74694: PUSH
74695: LD_INT 0
74697: PUSH
74698: LD_INT 0
74700: PUSH
74701: LD_INT 0
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PPUSH
74717: CALL_OW 447
// end ;
74721: LD_VAR 0 2
74725: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74726: LD_INT 0
74728: PPUSH
74729: PPUSH
74730: PPUSH
// tmp := [ ] ;
74731: LD_ADDR_VAR 0 5
74735: PUSH
74736: EMPTY
74737: ST_TO_ADDR
// for i in units do
74738: LD_ADDR_VAR 0 4
74742: PUSH
74743: LD_VAR 0 1
74747: PUSH
74748: FOR_IN
74749: IFFALSE 74787
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74751: LD_ADDR_VAR 0 5
74755: PUSH
74756: LD_VAR 0 5
74760: PPUSH
74761: LD_VAR 0 5
74765: PUSH
74766: LD_INT 1
74768: PLUS
74769: PPUSH
74770: LD_VAR 0 4
74774: PPUSH
74775: CALL_OW 256
74779: PPUSH
74780: CALL_OW 2
74784: ST_TO_ADDR
74785: GO 74748
74787: POP
74788: POP
// if not tmp then
74789: LD_VAR 0 5
74793: NOT
74794: IFFALSE 74798
// exit ;
74796: GO 74846
// if asc then
74798: LD_VAR 0 2
74802: IFFALSE 74826
// result := SortListByListAsc ( units , tmp ) else
74804: LD_ADDR_VAR 0 3
74808: PUSH
74809: LD_VAR 0 1
74813: PPUSH
74814: LD_VAR 0 5
74818: PPUSH
74819: CALL_OW 76
74823: ST_TO_ADDR
74824: GO 74846
// result := SortListByListDesc ( units , tmp ) ;
74826: LD_ADDR_VAR 0 3
74830: PUSH
74831: LD_VAR 0 1
74835: PPUSH
74836: LD_VAR 0 5
74840: PPUSH
74841: CALL_OW 77
74845: ST_TO_ADDR
// end ;
74846: LD_VAR 0 3
74850: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74851: LD_INT 0
74853: PPUSH
74854: PPUSH
// task := GetTaskList ( mech ) ;
74855: LD_ADDR_VAR 0 4
74859: PUSH
74860: LD_VAR 0 1
74864: PPUSH
74865: CALL_OW 437
74869: ST_TO_ADDR
// if not task then
74870: LD_VAR 0 4
74874: NOT
74875: IFFALSE 74879
// exit ;
74877: GO 74921
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74879: LD_ADDR_VAR 0 3
74883: PUSH
74884: LD_VAR 0 4
74888: PUSH
74889: LD_INT 1
74891: ARRAY
74892: PUSH
74893: LD_INT 1
74895: ARRAY
74896: PUSH
74897: LD_STRING r
74899: EQUAL
74900: PUSH
74901: LD_VAR 0 4
74905: PUSH
74906: LD_INT 1
74908: ARRAY
74909: PUSH
74910: LD_INT 4
74912: ARRAY
74913: PUSH
74914: LD_VAR 0 2
74918: EQUAL
74919: AND
74920: ST_TO_ADDR
// end ;
74921: LD_VAR 0 3
74925: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74926: LD_INT 0
74928: PPUSH
// SetDir ( unit , d ) ;
74929: LD_VAR 0 1
74933: PPUSH
74934: LD_VAR 0 4
74938: PPUSH
74939: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74943: LD_VAR 0 1
74947: PPUSH
74948: LD_VAR 0 2
74952: PPUSH
74953: LD_VAR 0 3
74957: PPUSH
74958: LD_VAR 0 5
74962: PPUSH
74963: CALL_OW 48
// end ;
74967: LD_VAR 0 6
74971: RET
// export function ToNaturalNumber ( number ) ; begin
74972: LD_INT 0
74974: PPUSH
// result := number div 1 ;
74975: LD_ADDR_VAR 0 2
74979: PUSH
74980: LD_VAR 0 1
74984: PUSH
74985: LD_INT 1
74987: DIV
74988: ST_TO_ADDR
// if number < 0 then
74989: LD_VAR 0 1
74993: PUSH
74994: LD_INT 0
74996: LESS
74997: IFFALSE 75007
// result := 0 ;
74999: LD_ADDR_VAR 0 2
75003: PUSH
75004: LD_INT 0
75006: ST_TO_ADDR
// end ;
75007: LD_VAR 0 2
75011: RET
// export function SortByClass ( units , class ) ; var un ; begin
75012: LD_INT 0
75014: PPUSH
75015: PPUSH
// if not units or not class then
75016: LD_VAR 0 1
75020: NOT
75021: PUSH
75022: LD_VAR 0 2
75026: NOT
75027: OR
75028: IFFALSE 75032
// exit ;
75030: GO 75127
// result := [ ] ;
75032: LD_ADDR_VAR 0 3
75036: PUSH
75037: EMPTY
75038: ST_TO_ADDR
// for un in units do
75039: LD_ADDR_VAR 0 4
75043: PUSH
75044: LD_VAR 0 1
75048: PUSH
75049: FOR_IN
75050: IFFALSE 75125
// if GetClass ( un ) = class then
75052: LD_VAR 0 4
75056: PPUSH
75057: CALL_OW 257
75061: PUSH
75062: LD_VAR 0 2
75066: EQUAL
75067: IFFALSE 75094
// result := Insert ( result , 1 , un ) else
75069: LD_ADDR_VAR 0 3
75073: PUSH
75074: LD_VAR 0 3
75078: PPUSH
75079: LD_INT 1
75081: PPUSH
75082: LD_VAR 0 4
75086: PPUSH
75087: CALL_OW 2
75091: ST_TO_ADDR
75092: GO 75123
// result := Replace ( result , result + 1 , un ) ;
75094: LD_ADDR_VAR 0 3
75098: PUSH
75099: LD_VAR 0 3
75103: PPUSH
75104: LD_VAR 0 3
75108: PUSH
75109: LD_INT 1
75111: PLUS
75112: PPUSH
75113: LD_VAR 0 4
75117: PPUSH
75118: CALL_OW 1
75122: ST_TO_ADDR
75123: GO 75049
75125: POP
75126: POP
// end ;
75127: LD_VAR 0 3
75131: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75132: LD_INT 0
75134: PPUSH
75135: PPUSH
75136: PPUSH
75137: PPUSH
75138: PPUSH
75139: PPUSH
75140: PPUSH
// result := [ ] ;
75141: LD_ADDR_VAR 0 4
75145: PUSH
75146: EMPTY
75147: ST_TO_ADDR
// if x - r < 0 then
75148: LD_VAR 0 1
75152: PUSH
75153: LD_VAR 0 3
75157: MINUS
75158: PUSH
75159: LD_INT 0
75161: LESS
75162: IFFALSE 75174
// min_x := 0 else
75164: LD_ADDR_VAR 0 8
75168: PUSH
75169: LD_INT 0
75171: ST_TO_ADDR
75172: GO 75190
// min_x := x - r ;
75174: LD_ADDR_VAR 0 8
75178: PUSH
75179: LD_VAR 0 1
75183: PUSH
75184: LD_VAR 0 3
75188: MINUS
75189: ST_TO_ADDR
// if y - r < 0 then
75190: LD_VAR 0 2
75194: PUSH
75195: LD_VAR 0 3
75199: MINUS
75200: PUSH
75201: LD_INT 0
75203: LESS
75204: IFFALSE 75216
// min_y := 0 else
75206: LD_ADDR_VAR 0 7
75210: PUSH
75211: LD_INT 0
75213: ST_TO_ADDR
75214: GO 75232
// min_y := y - r ;
75216: LD_ADDR_VAR 0 7
75220: PUSH
75221: LD_VAR 0 2
75225: PUSH
75226: LD_VAR 0 3
75230: MINUS
75231: ST_TO_ADDR
// max_x := x + r ;
75232: LD_ADDR_VAR 0 9
75236: PUSH
75237: LD_VAR 0 1
75241: PUSH
75242: LD_VAR 0 3
75246: PLUS
75247: ST_TO_ADDR
// max_y := y + r ;
75248: LD_ADDR_VAR 0 10
75252: PUSH
75253: LD_VAR 0 2
75257: PUSH
75258: LD_VAR 0 3
75262: PLUS
75263: ST_TO_ADDR
// for _x = min_x to max_x do
75264: LD_ADDR_VAR 0 5
75268: PUSH
75269: DOUBLE
75270: LD_VAR 0 8
75274: DEC
75275: ST_TO_ADDR
75276: LD_VAR 0 9
75280: PUSH
75281: FOR_TO
75282: IFFALSE 75383
// for _y = min_y to max_y do
75284: LD_ADDR_VAR 0 6
75288: PUSH
75289: DOUBLE
75290: LD_VAR 0 7
75294: DEC
75295: ST_TO_ADDR
75296: LD_VAR 0 10
75300: PUSH
75301: FOR_TO
75302: IFFALSE 75379
// begin if not ValidHex ( _x , _y ) then
75304: LD_VAR 0 5
75308: PPUSH
75309: LD_VAR 0 6
75313: PPUSH
75314: CALL_OW 488
75318: NOT
75319: IFFALSE 75323
// continue ;
75321: GO 75301
// if GetResourceTypeXY ( _x , _y ) then
75323: LD_VAR 0 5
75327: PPUSH
75328: LD_VAR 0 6
75332: PPUSH
75333: CALL_OW 283
75337: IFFALSE 75377
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75339: LD_ADDR_VAR 0 4
75343: PUSH
75344: LD_VAR 0 4
75348: PPUSH
75349: LD_VAR 0 4
75353: PUSH
75354: LD_INT 1
75356: PLUS
75357: PPUSH
75358: LD_VAR 0 5
75362: PUSH
75363: LD_VAR 0 6
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PPUSH
75372: CALL_OW 1
75376: ST_TO_ADDR
// end ;
75377: GO 75301
75379: POP
75380: POP
75381: GO 75281
75383: POP
75384: POP
// end ;
75385: LD_VAR 0 4
75389: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75390: LD_INT 0
75392: PPUSH
75393: PPUSH
75394: PPUSH
75395: PPUSH
75396: PPUSH
75397: PPUSH
75398: PPUSH
75399: PPUSH
// if not units then
75400: LD_VAR 0 1
75404: NOT
75405: IFFALSE 75409
// exit ;
75407: GO 75933
// result := UnitFilter ( units , [ f_ok ] ) ;
75409: LD_ADDR_VAR 0 3
75413: PUSH
75414: LD_VAR 0 1
75418: PPUSH
75419: LD_INT 50
75421: PUSH
75422: EMPTY
75423: LIST
75424: PPUSH
75425: CALL_OW 72
75429: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75430: LD_ADDR_VAR 0 8
75434: PUSH
75435: LD_VAR 0 1
75439: PUSH
75440: LD_INT 1
75442: ARRAY
75443: PPUSH
75444: CALL_OW 255
75448: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75449: LD_ADDR_VAR 0 10
75453: PUSH
75454: LD_INT 29
75456: PUSH
75457: LD_INT 91
75459: PUSH
75460: LD_INT 49
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: LIST
75467: ST_TO_ADDR
// if not result then
75468: LD_VAR 0 3
75472: NOT
75473: IFFALSE 75477
// exit ;
75475: GO 75933
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75477: LD_ADDR_VAR 0 5
75481: PUSH
75482: LD_INT 81
75484: PUSH
75485: LD_VAR 0 8
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: PPUSH
75494: CALL_OW 69
75498: ST_TO_ADDR
// for i in result do
75499: LD_ADDR_VAR 0 4
75503: PUSH
75504: LD_VAR 0 3
75508: PUSH
75509: FOR_IN
75510: IFFALSE 75931
// begin tag := GetTag ( i ) + 1 ;
75512: LD_ADDR_VAR 0 9
75516: PUSH
75517: LD_VAR 0 4
75521: PPUSH
75522: CALL_OW 110
75526: PUSH
75527: LD_INT 1
75529: PLUS
75530: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75531: LD_ADDR_VAR 0 7
75535: PUSH
75536: LD_VAR 0 4
75540: PPUSH
75541: CALL_OW 250
75545: PPUSH
75546: LD_VAR 0 4
75550: PPUSH
75551: CALL_OW 251
75555: PPUSH
75556: LD_INT 6
75558: PPUSH
75559: CALL 75132 0 3
75563: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75564: LD_VAR 0 4
75568: PPUSH
75569: CALL_OW 247
75573: PUSH
75574: LD_INT 2
75576: EQUAL
75577: PUSH
75578: LD_VAR 0 7
75582: AND
75583: PUSH
75584: LD_VAR 0 4
75588: PPUSH
75589: CALL_OW 264
75593: PUSH
75594: LD_VAR 0 10
75598: IN
75599: NOT
75600: AND
75601: IFFALSE 75640
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75603: LD_VAR 0 4
75607: PPUSH
75608: LD_VAR 0 7
75612: PUSH
75613: LD_INT 1
75615: ARRAY
75616: PUSH
75617: LD_INT 1
75619: ARRAY
75620: PPUSH
75621: LD_VAR 0 7
75625: PUSH
75626: LD_INT 1
75628: ARRAY
75629: PUSH
75630: LD_INT 2
75632: ARRAY
75633: PPUSH
75634: CALL_OW 116
75638: GO 75929
// if path > tag then
75640: LD_VAR 0 2
75644: PUSH
75645: LD_VAR 0 9
75649: GREATER
75650: IFFALSE 75858
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75652: LD_ADDR_VAR 0 6
75656: PUSH
75657: LD_VAR 0 5
75661: PPUSH
75662: LD_INT 91
75664: PUSH
75665: LD_VAR 0 4
75669: PUSH
75670: LD_INT 8
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: LIST
75677: PPUSH
75678: CALL_OW 72
75682: ST_TO_ADDR
// if nearEnemy then
75683: LD_VAR 0 6
75687: IFFALSE 75756
// begin if GetWeapon ( i ) = ru_time_lapser then
75689: LD_VAR 0 4
75693: PPUSH
75694: CALL_OW 264
75698: PUSH
75699: LD_INT 49
75701: EQUAL
75702: IFFALSE 75730
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75704: LD_VAR 0 4
75708: PPUSH
75709: LD_VAR 0 6
75713: PPUSH
75714: LD_VAR 0 4
75718: PPUSH
75719: CALL_OW 74
75723: PPUSH
75724: CALL_OW 112
75728: GO 75754
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75730: LD_VAR 0 4
75734: PPUSH
75735: LD_VAR 0 6
75739: PPUSH
75740: LD_VAR 0 4
75744: PPUSH
75745: CALL_OW 74
75749: PPUSH
75750: CALL_OW 115
// end else
75754: GO 75856
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75756: LD_VAR 0 4
75760: PPUSH
75761: LD_VAR 0 2
75765: PUSH
75766: LD_VAR 0 9
75770: ARRAY
75771: PUSH
75772: LD_INT 1
75774: ARRAY
75775: PPUSH
75776: LD_VAR 0 2
75780: PUSH
75781: LD_VAR 0 9
75785: ARRAY
75786: PUSH
75787: LD_INT 2
75789: ARRAY
75790: PPUSH
75791: CALL_OW 297
75795: PUSH
75796: LD_INT 6
75798: GREATER
75799: IFFALSE 75842
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75801: LD_VAR 0 4
75805: PPUSH
75806: LD_VAR 0 2
75810: PUSH
75811: LD_VAR 0 9
75815: ARRAY
75816: PUSH
75817: LD_INT 1
75819: ARRAY
75820: PPUSH
75821: LD_VAR 0 2
75825: PUSH
75826: LD_VAR 0 9
75830: ARRAY
75831: PUSH
75832: LD_INT 2
75834: ARRAY
75835: PPUSH
75836: CALL_OW 114
75840: GO 75856
// SetTag ( i , tag ) ;
75842: LD_VAR 0 4
75846: PPUSH
75847: LD_VAR 0 9
75851: PPUSH
75852: CALL_OW 109
// end else
75856: GO 75929
// if enemy then
75858: LD_VAR 0 5
75862: IFFALSE 75929
// begin if GetWeapon ( i ) = ru_time_lapser then
75864: LD_VAR 0 4
75868: PPUSH
75869: CALL_OW 264
75873: PUSH
75874: LD_INT 49
75876: EQUAL
75877: IFFALSE 75905
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75879: LD_VAR 0 4
75883: PPUSH
75884: LD_VAR 0 5
75888: PPUSH
75889: LD_VAR 0 4
75893: PPUSH
75894: CALL_OW 74
75898: PPUSH
75899: CALL_OW 112
75903: GO 75929
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75905: LD_VAR 0 4
75909: PPUSH
75910: LD_VAR 0 5
75914: PPUSH
75915: LD_VAR 0 4
75919: PPUSH
75920: CALL_OW 74
75924: PPUSH
75925: CALL_OW 115
// end ; end ;
75929: GO 75509
75931: POP
75932: POP
// end ;
75933: LD_VAR 0 3
75937: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75938: LD_INT 0
75940: PPUSH
75941: PPUSH
75942: PPUSH
// if not unit or IsInUnit ( unit ) then
75943: LD_VAR 0 1
75947: NOT
75948: PUSH
75949: LD_VAR 0 1
75953: PPUSH
75954: CALL_OW 310
75958: OR
75959: IFFALSE 75963
// exit ;
75961: GO 76054
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75963: LD_ADDR_VAR 0 4
75967: PUSH
75968: LD_VAR 0 1
75972: PPUSH
75973: CALL_OW 250
75977: PPUSH
75978: LD_VAR 0 2
75982: PPUSH
75983: LD_INT 1
75985: PPUSH
75986: CALL_OW 272
75990: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75991: LD_ADDR_VAR 0 5
75995: PUSH
75996: LD_VAR 0 1
76000: PPUSH
76001: CALL_OW 251
76005: PPUSH
76006: LD_VAR 0 2
76010: PPUSH
76011: LD_INT 1
76013: PPUSH
76014: CALL_OW 273
76018: ST_TO_ADDR
// if ValidHex ( x , y ) then
76019: LD_VAR 0 4
76023: PPUSH
76024: LD_VAR 0 5
76028: PPUSH
76029: CALL_OW 488
76033: IFFALSE 76054
// ComTurnXY ( unit , x , y ) ;
76035: LD_VAR 0 1
76039: PPUSH
76040: LD_VAR 0 4
76044: PPUSH
76045: LD_VAR 0 5
76049: PPUSH
76050: CALL_OW 118
// end ;
76054: LD_VAR 0 3
76058: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76059: LD_INT 0
76061: PPUSH
76062: PPUSH
// result := false ;
76063: LD_ADDR_VAR 0 3
76067: PUSH
76068: LD_INT 0
76070: ST_TO_ADDR
// if not units then
76071: LD_VAR 0 2
76075: NOT
76076: IFFALSE 76080
// exit ;
76078: GO 76125
// for i in units do
76080: LD_ADDR_VAR 0 4
76084: PUSH
76085: LD_VAR 0 2
76089: PUSH
76090: FOR_IN
76091: IFFALSE 76123
// if See ( side , i ) then
76093: LD_VAR 0 1
76097: PPUSH
76098: LD_VAR 0 4
76102: PPUSH
76103: CALL_OW 292
76107: IFFALSE 76121
// begin result := true ;
76109: LD_ADDR_VAR 0 3
76113: PUSH
76114: LD_INT 1
76116: ST_TO_ADDR
// exit ;
76117: POP
76118: POP
76119: GO 76125
// end ;
76121: GO 76090
76123: POP
76124: POP
// end ;
76125: LD_VAR 0 3
76129: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76130: LD_INT 0
76132: PPUSH
76133: PPUSH
76134: PPUSH
76135: PPUSH
// if not unit or not points then
76136: LD_VAR 0 1
76140: NOT
76141: PUSH
76142: LD_VAR 0 2
76146: NOT
76147: OR
76148: IFFALSE 76152
// exit ;
76150: GO 76242
// dist := 99999 ;
76152: LD_ADDR_VAR 0 5
76156: PUSH
76157: LD_INT 99999
76159: ST_TO_ADDR
// for i in points do
76160: LD_ADDR_VAR 0 4
76164: PUSH
76165: LD_VAR 0 2
76169: PUSH
76170: FOR_IN
76171: IFFALSE 76240
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76173: LD_ADDR_VAR 0 6
76177: PUSH
76178: LD_VAR 0 1
76182: PPUSH
76183: LD_VAR 0 4
76187: PUSH
76188: LD_INT 1
76190: ARRAY
76191: PPUSH
76192: LD_VAR 0 4
76196: PUSH
76197: LD_INT 2
76199: ARRAY
76200: PPUSH
76201: CALL_OW 297
76205: ST_TO_ADDR
// if tmpDist < dist then
76206: LD_VAR 0 6
76210: PUSH
76211: LD_VAR 0 5
76215: LESS
76216: IFFALSE 76238
// begin result := i ;
76218: LD_ADDR_VAR 0 3
76222: PUSH
76223: LD_VAR 0 4
76227: ST_TO_ADDR
// dist := tmpDist ;
76228: LD_ADDR_VAR 0 5
76232: PUSH
76233: LD_VAR 0 6
76237: ST_TO_ADDR
// end ; end ;
76238: GO 76170
76240: POP
76241: POP
// end ;
76242: LD_VAR 0 3
76246: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76247: LD_INT 0
76249: PPUSH
// uc_side := side ;
76250: LD_ADDR_OWVAR 20
76254: PUSH
76255: LD_VAR 0 1
76259: ST_TO_ADDR
// uc_nation := 3 ;
76260: LD_ADDR_OWVAR 21
76264: PUSH
76265: LD_INT 3
76267: ST_TO_ADDR
// vc_chassis := 25 ;
76268: LD_ADDR_OWVAR 37
76272: PUSH
76273: LD_INT 25
76275: ST_TO_ADDR
// vc_engine := engine_siberite ;
76276: LD_ADDR_OWVAR 39
76280: PUSH
76281: LD_INT 3
76283: ST_TO_ADDR
// vc_control := control_computer ;
76284: LD_ADDR_OWVAR 38
76288: PUSH
76289: LD_INT 3
76291: ST_TO_ADDR
// vc_weapon := 59 ;
76292: LD_ADDR_OWVAR 40
76296: PUSH
76297: LD_INT 59
76299: ST_TO_ADDR
// result := CreateVehicle ;
76300: LD_ADDR_VAR 0 5
76304: PUSH
76305: CALL_OW 45
76309: ST_TO_ADDR
// SetDir ( result , d ) ;
76310: LD_VAR 0 5
76314: PPUSH
76315: LD_VAR 0 4
76319: PPUSH
76320: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76324: LD_VAR 0 5
76328: PPUSH
76329: LD_VAR 0 2
76333: PPUSH
76334: LD_VAR 0 3
76338: PPUSH
76339: LD_INT 0
76341: PPUSH
76342: CALL_OW 48
// end ;
76346: LD_VAR 0 5
76350: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76351: LD_INT 0
76353: PPUSH
76354: PPUSH
76355: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76356: LD_ADDR_VAR 0 2
76360: PUSH
76361: LD_INT 0
76363: PUSH
76364: LD_INT 0
76366: PUSH
76367: LD_INT 0
76369: PUSH
76370: LD_INT 0
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76379: LD_VAR 0 1
76383: NOT
76384: PUSH
76385: LD_VAR 0 1
76389: PPUSH
76390: CALL_OW 264
76394: PUSH
76395: LD_INT 12
76397: PUSH
76398: LD_INT 51
76400: PUSH
76401: LD_INT 32
76403: PUSH
76404: LD_INT 89
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: LIST
76411: LIST
76412: IN
76413: NOT
76414: OR
76415: IFFALSE 76419
// exit ;
76417: GO 76517
// for i := 1 to 3 do
76419: LD_ADDR_VAR 0 3
76423: PUSH
76424: DOUBLE
76425: LD_INT 1
76427: DEC
76428: ST_TO_ADDR
76429: LD_INT 3
76431: PUSH
76432: FOR_TO
76433: IFFALSE 76515
// begin tmp := GetCargo ( cargo , i ) ;
76435: LD_ADDR_VAR 0 4
76439: PUSH
76440: LD_VAR 0 1
76444: PPUSH
76445: LD_VAR 0 3
76449: PPUSH
76450: CALL_OW 289
76454: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76455: LD_ADDR_VAR 0 2
76459: PUSH
76460: LD_VAR 0 2
76464: PPUSH
76465: LD_VAR 0 3
76469: PPUSH
76470: LD_VAR 0 4
76474: PPUSH
76475: CALL_OW 1
76479: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76480: LD_ADDR_VAR 0 2
76484: PUSH
76485: LD_VAR 0 2
76489: PPUSH
76490: LD_INT 4
76492: PPUSH
76493: LD_VAR 0 2
76497: PUSH
76498: LD_INT 4
76500: ARRAY
76501: PUSH
76502: LD_VAR 0 4
76506: PLUS
76507: PPUSH
76508: CALL_OW 1
76512: ST_TO_ADDR
// end ;
76513: GO 76432
76515: POP
76516: POP
// end ;
76517: LD_VAR 0 2
76521: RET
// export function Length ( array ) ; begin
76522: LD_INT 0
76524: PPUSH
// result := array + 0 ;
76525: LD_ADDR_VAR 0 2
76529: PUSH
76530: LD_VAR 0 1
76534: PUSH
76535: LD_INT 0
76537: PLUS
76538: ST_TO_ADDR
// end ;
76539: LD_VAR 0 2
76543: RET
// export function PrepareArray ( array ) ; begin
76544: LD_INT 0
76546: PPUSH
// result := array diff 0 ;
76547: LD_ADDR_VAR 0 2
76551: PUSH
76552: LD_VAR 0 1
76556: PUSH
76557: LD_INT 0
76559: DIFF
76560: ST_TO_ADDR
// if not result [ 1 ] then
76561: LD_VAR 0 2
76565: PUSH
76566: LD_INT 1
76568: ARRAY
76569: NOT
76570: IFFALSE 76590
// result := Delete ( result , 1 ) ;
76572: LD_ADDR_VAR 0 2
76576: PUSH
76577: LD_VAR 0 2
76581: PPUSH
76582: LD_INT 1
76584: PPUSH
76585: CALL_OW 3
76589: ST_TO_ADDR
// end ;
76590: LD_VAR 0 2
76594: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76595: LD_INT 0
76597: PPUSH
76598: PPUSH
76599: PPUSH
76600: PPUSH
// sibRocketRange := 25 ;
76601: LD_ADDR_VAR 0 6
76605: PUSH
76606: LD_INT 25
76608: ST_TO_ADDR
// result := false ;
76609: LD_ADDR_VAR 0 4
76613: PUSH
76614: LD_INT 0
76616: ST_TO_ADDR
// for i := 0 to 5 do
76617: LD_ADDR_VAR 0 5
76621: PUSH
76622: DOUBLE
76623: LD_INT 0
76625: DEC
76626: ST_TO_ADDR
76627: LD_INT 5
76629: PUSH
76630: FOR_TO
76631: IFFALSE 76698
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76633: LD_VAR 0 1
76637: PPUSH
76638: LD_VAR 0 5
76642: PPUSH
76643: LD_VAR 0 6
76647: PPUSH
76648: CALL_OW 272
76652: PPUSH
76653: LD_VAR 0 2
76657: PPUSH
76658: LD_VAR 0 5
76662: PPUSH
76663: LD_VAR 0 6
76667: PPUSH
76668: CALL_OW 273
76672: PPUSH
76673: LD_VAR 0 3
76677: PPUSH
76678: CALL_OW 309
76682: IFFALSE 76696
// begin result := true ;
76684: LD_ADDR_VAR 0 4
76688: PUSH
76689: LD_INT 1
76691: ST_TO_ADDR
// exit ;
76692: POP
76693: POP
76694: GO 76700
// end ;
76696: GO 76630
76698: POP
76699: POP
// end ;
76700: LD_VAR 0 4
76704: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76705: LD_INT 0
76707: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76708: LD_VAR 0 1
76712: PPUSH
76713: LD_VAR 0 2
76717: PPUSH
76718: LD_INT 0
76720: PPUSH
76721: LD_INT 0
76723: PPUSH
76724: LD_INT 1
76726: PPUSH
76727: LD_INT 0
76729: PPUSH
76730: CALL_OW 587
// end ; end_of_file
76734: LD_VAR 0 3
76738: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76739: LD_VAR 0 1
76743: PUSH
76744: LD_INT 200
76746: DOUBLE
76747: GREATEREQUAL
76748: IFFALSE 76756
76750: LD_INT 299
76752: DOUBLE
76753: LESSEQUAL
76754: IFTRUE 76758
76756: GO 76790
76758: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76759: LD_VAR 0 1
76763: PPUSH
76764: LD_VAR 0 2
76768: PPUSH
76769: LD_VAR 0 3
76773: PPUSH
76774: LD_VAR 0 4
76778: PPUSH
76779: LD_VAR 0 5
76783: PPUSH
76784: CALL 31405 0 5
76788: GO 76867
76790: LD_INT 300
76792: DOUBLE
76793: GREATEREQUAL
76794: IFFALSE 76802
76796: LD_INT 399
76798: DOUBLE
76799: LESSEQUAL
76800: IFTRUE 76804
76802: GO 76866
76804: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76805: LD_VAR 0 1
76809: PPUSH
76810: LD_VAR 0 2
76814: PPUSH
76815: LD_VAR 0 3
76819: PPUSH
76820: LD_VAR 0 4
76824: PPUSH
76825: LD_VAR 0 5
76829: PPUSH
76830: LD_VAR 0 6
76834: PPUSH
76835: LD_VAR 0 7
76839: PPUSH
76840: LD_VAR 0 8
76844: PPUSH
76845: LD_VAR 0 9
76849: PPUSH
76850: LD_VAR 0 10
76854: PPUSH
76855: LD_VAR 0 11
76859: PPUSH
76860: CALL 27738 0 11
76864: GO 76867
76866: POP
// end ;
76867: PPOPN 11
76869: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76870: LD_VAR 0 1
76874: PPUSH
76875: LD_VAR 0 2
76879: PPUSH
76880: LD_VAR 0 3
76884: PPUSH
76885: LD_VAR 0 4
76889: PPUSH
76890: LD_VAR 0 5
76894: PPUSH
76895: CALL 31141 0 5
// end ; end_of_file
76899: PPOPN 5
76901: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76902: LD_VAR 0 1
76906: PPUSH
76907: LD_VAR 0 2
76911: PPUSH
76912: LD_VAR 0 3
76916: PPUSH
76917: LD_VAR 0 4
76921: PPUSH
76922: LD_VAR 0 5
76926: PPUSH
76927: LD_VAR 0 6
76931: PPUSH
76932: CALL 15390 0 6
// end ;
76936: PPOPN 6
76938: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76939: LD_INT 0
76941: PPUSH
// begin if not units then
76942: LD_VAR 0 1
76946: NOT
76947: IFFALSE 76951
// exit ;
76949: GO 76951
// end ;
76951: PPOPN 7
76953: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76954: CALL 15294 0 0
// end ;
76958: PPOPN 1
76960: END
