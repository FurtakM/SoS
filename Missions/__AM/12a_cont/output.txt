// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9539 0 0
// PrepareAlliance ;
  19: CALL 352 0 0
// PrepareFriends ;
  23: CALL 3821 0 0
// PrepareAmerican ;
  27: CALL 789 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 17
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 15
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9875 0 0
// PreparePatrol ;
 117: CALL 1413 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert , def_counter ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// def_counter := 0 ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// end ;
 251: LD_VAR 0 1
 255: RET
// every 0 0$1 trigger on_hill do
 256: LD_EXP 7
 260: IFFALSE 272
 262: GO 264
 264: DISABLE
// SetAchievement ( ACH_EYE ) ;
 265: LD_STRING ACH_EYE
 267: PPUSH
 268: CALL_OW 543
 272: END
// every 0 0$1 trigger not invis_used do var i ;
 273: LD_EXP 12
 277: NOT
 278: IFFALSE 349
 280: GO 282
 282: DISABLE
 283: LD_INT 0
 285: PPUSH
// begin enable ;
 286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 287: LD_ADDR_VAR 0 1
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_INT 7
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 21
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 347
// if IsInvisible ( i ) then
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 571
 333: IFFALSE 345
// begin invis_used := true ;
 335: LD_ADDR_EXP 12
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// break ;
 343: GO 347
// end ;
 345: GO 321
 347: POP
 348: POP
// end ; end_of_file
 349: PPOPN 1
 351: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 352: LD_INT 0
 354: PPUSH
 355: PPUSH
// uc_side := 7 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 7
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 372: LD_ADDR_EXP 15
 376: PUSH
 377: LD_STRING JMM
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: LD_STRING 11_
 388: PPUSH
 389: CALL 36401 0 3
 393: ST_TO_ADDR
// uc_side := 4 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 4
 401: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Roth
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 415: LD_EXP 15
 419: PPUSH
 420: LD_INT 1
 422: PPUSH
 423: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 427: LD_EXP 15
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 439: LD_EXP 15
 443: PPUSH
 444: LD_INT 105
 446: PPUSH
 447: LD_INT 10
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 457: LD_EXP 16
 461: PPUSH
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 469: LD_EXP 16
 473: PPUSH
 474: LD_INT 109
 476: PPUSH
 477: LD_INT 10
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 16
 496: PPUSH
 497: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 501: LD_EXP 16
 505: PPUSH
 506: LD_EXP 15
 510: PPUSH
 511: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 515: LD_INT 3
 517: PPUSH
 518: LD_INT 3
 520: PPUSH
 521: LD_INT 3
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: LD_INT 100
 529: PPUSH
 530: CALL 41241 0 5
// cargo := CreateVehicle ;
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: CALL_OW 45
 543: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 556: LD_VAR 0 2
 560: PPUSH
 561: LD_INT 179
 563: PPUSH
 564: LD_INT 45
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 4
 581: PPUSH
 582: LD_INT 30
 584: PPUSH
 585: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 589: LD_STRING 11_artifact_captured
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: IFFALSE 656
// begin cargo := CreateVehicle ;
 601: LD_ADDR_VAR 0 2
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 171
 630: PPUSH
 631: LD_INT 85
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 641: LD_VAR 0 2
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 50
 651: PPUSH
 652: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 656: LD_INT 47
 658: PPUSH
 659: LD_INT 7
 661: PPUSH
 662: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 666: LD_INT 1
 668: PPUSH
 669: LD_INT 47
 671: PPUSH
 672: CALL_OW 471
// end ;
 676: LD_VAR 0 1
 680: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 681: LD_INT 38
 683: PPUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 7
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 70
 698: PUSH
 699: LD_EXP 7
 703: NOT
 704: AND
 705: IFFALSE 736
 707: GO 709
 709: DISABLE
// begin enable ;
 710: ENABLE
// on_hill := true ;
 711: LD_ADDR_EXP 7
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 719: LD_INT 126
 721: PPUSH
 722: LD_INT 13
 724: PPUSH
 725: LD_INT 7
 727: PPUSH
 728: LD_INT 90
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 22
 742: PUSH
 743: LD_INT 7
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 70
 754: NOT
 755: PUSH
 756: LD_EXP 7
 760: AND
 761: IFFALSE 788
 763: GO 765
 765: DISABLE
// begin enable ;
 766: ENABLE
// on_hill := false ;
 767: LD_ADDR_EXP 7
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 775: LD_INT 126
 777: PPUSH
 778: LD_INT 13
 780: PPUSH
 781: LD_INT 7
 783: PPUSH
 784: CALL_OW 331
// end ; end_of_file
 788: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 789: LD_INT 0
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
 795: PPUSH
 796: PPUSH
// if Difficulty = 1 then
 797: LD_OWVAR 67
 801: PUSH
 802: LD_INT 1
 804: EQUAL
 805: IFFALSE 913
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 807: LD_ADDR_VAR 0 6
 811: PUSH
 812: LD_INT 155
 814: PUSH
 815: LD_INT 77
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 193
 824: PUSH
 825: LD_INT 93
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 188
 834: PUSH
 835: LD_INT 81
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 56
 844: PUSH
 845: LD_INT 85
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 98
 854: PUSH
 855: LD_INT 87
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: ST_TO_ADDR
// for i in tmp do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_VAR 0 6
 878: PUSH
 879: FOR_IN
 880: IFFALSE 911
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 882: LD_VAR 0 2
 886: PUSH
 887: LD_INT 1
 889: ARRAY
 890: PPUSH
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 2
 898: ARRAY
 899: PPUSH
 900: CALL_OW 428
 904: PPUSH
 905: CALL_OW 64
 909: GO 879
 911: POP
 912: POP
// end ; defcon := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defcon_wave := 0 ;
 921: LD_ADDR_EXP 23
 925: PUSH
 926: LD_INT 0
 928: ST_TO_ADDR
// defenders := [ ] ;
 929: LD_ADDR_EXP 21
 933: PUSH
 934: EMPTY
 935: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 936: LD_INT 5
 938: PPUSH
 939: LD_STRING alfa
 941: PPUSH
 942: CALL_OW 500
// uc_side := 1 ;
 946: LD_ADDR_OWVAR 20
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// uc_nation := 1 ;
 954: LD_ADDR_OWVAR 21
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 962: LD_ADDR_EXP 17
 966: PUSH
 967: LD_STRING Powell
 969: PPUSH
 970: CALL_OW 25
 974: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 975: LD_EXP 17
 979: PPUSH
 980: LD_INT 110
 982: PPUSH
 983: LD_INT 26
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 48
// ComHold ( Powell ) ;
 993: LD_EXP 17
 997: PPUSH
 998: CALL_OW 140
// for i := 1 to 5 do
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: DOUBLE
1008: LD_INT 1
1010: DEC
1011: ST_TO_ADDR
1012: LD_INT 5
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1072
// begin PrepareHuman ( false , 1 , 10 ) ;
1018: LD_INT 0
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1031: LD_ADDR_EXP 20
1035: PUSH
1036: LD_EXP 20
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: CALL_OW 44
1048: PPUSH
1049: CALL_OW 2
1053: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1054: LD_EXP 20
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_INT 18
1065: PPUSH
1066: CALL_OW 52
// end ;
1070: GO 1015
1072: POP
1073: POP
// if Difficulty > 1 then
1074: LD_OWVAR 67
1078: PUSH
1079: LD_INT 1
1081: GREATER
1082: IFFALSE 1233
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1084: LD_ADDR_VAR 0 6
1088: PUSH
1089: LD_INT 81
1091: PUSH
1092: LD_INT 33
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PUSH
1099: LD_INT 134
1101: PUSH
1102: LD_INT 114
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 193
1111: PUSH
1112: LD_INT 102
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: DOUBLE
1130: LD_INT 1
1132: DEC
1133: ST_TO_ADDR
1134: LD_OWVAR 67
1138: PUSH
1139: LD_INT 1
1141: MINUS
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1231
// begin PrepareSoldier ( false , 10 ) ;
1146: LD_INT 0
1148: PPUSH
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 381
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1166: LD_VAR 0 5
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1178: LD_VAR 0 5
1182: PPUSH
1183: LD_VAR 0 6
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 6
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PUSH
1209: LD_INT 2
1211: ARRAY
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// ComHold ( un ) ;
1220: LD_VAR 0 5
1224: PPUSH
1225: CALL_OW 140
// end ;
1229: GO 1143
1231: POP
1232: POP
// end ; if Difficulty > 2 then
1233: LD_OWVAR 67
1237: PUSH
1238: LD_INT 2
1240: GREATER
1241: IFFALSE 1290
// begin bc_type := b_turret ;
1243: LD_ADDR_OWVAR 42
1247: PUSH
1248: LD_INT 33
1250: ST_TO_ADDR
// bc_level := 7 ;
1251: LD_ADDR_OWVAR 43
1255: PUSH
1256: LD_INT 7
1258: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1259: LD_ADDR_VAR 0 4
1263: PUSH
1264: LD_INT 107
1266: PPUSH
1267: LD_INT 55
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 47
1277: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1278: LD_VAR 0 4
1282: PPUSH
1283: LD_INT 7
1285: PPUSH
1286: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1290: LD_ADDR_VAR 0 2
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 3
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: PUSH
1324: LD_INT 22
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: LD_INT 30
1336: PUSH
1337: LD_INT 36
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 69
1352: ADD
1353: PUSH
1354: FOR_IN
1355: IFFALSE 1406
// for j = 1 to 3 do
1357: LD_ADDR_VAR 0 3
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_INT 3
1369: PUSH
1370: FOR_TO
1371: IFFALSE 1402
// begin PrepareHuman ( false , 3 , 6 ) ;
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 6
1381: PPUSH
1382: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1386: CALL_OW 44
1390: PPUSH
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: GO 1370
1402: POP
1403: POP
1404: GO 1354
1406: POP
1407: POP
// end ;
1408: LD_VAR 0 1
1412: RET
// export function PreparePatrol ; var i , un ; begin
1413: LD_INT 0
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_side := 1 ;
1418: LD_ADDR_OWVAR 20
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_nation := 1 ;
1426: LD_ADDR_OWVAR 21
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1434: LD_ADDR_EXP 19
1438: PUSH
1439: LD_INT 99
1441: PUSH
1442: LD_INT 55
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 113
1451: PUSH
1452: LD_INT 67
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 129
1461: PUSH
1462: LD_INT 68
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 135
1471: PUSH
1472: LD_INT 62
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 103
1481: PUSH
1482: LD_INT 41
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 27
1498: PUSH
1499: LD_INT 49
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 46
1508: PUSH
1509: LD_INT 49
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: LD_INT 87
1518: PUSH
1519: LD_INT 70
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 99
1528: PUSH
1529: LD_INT 79
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 118
1538: PUSH
1539: LD_INT 111
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 99
1548: PUSH
1549: LD_INT 79
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 87
1558: PUSH
1559: LD_INT 70
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 46
1568: PUSH
1569: LD_INT 49
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 200
1588: PUSH
1589: LD_INT 88
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 175
1598: PUSH
1599: LD_INT 80
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 135
1608: PUSH
1609: LD_INT 62
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 117
1618: PUSH
1619: LD_INT 53
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 103
1628: PUSH
1629: LD_INT 41
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 99
1638: PUSH
1639: LD_INT 24
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 85
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 99
1658: PUSH
1659: LD_INT 24
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 103
1668: PUSH
1669: LD_INT 41
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 98
1678: PUSH
1679: LD_INT 47
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 99
1688: PUSH
1689: LD_INT 56
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 96
1698: PUSH
1699: LD_INT 66
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 99
1708: PUSH
1709: LD_INT 56
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 112
1718: PUSH
1719: LD_INT 66
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 129
1728: PUSH
1729: LD_INT 68
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 135
1738: PUSH
1739: LD_INT 62
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 156
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 168
1758: PUSH
1759: LD_INT 76
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 168
1768: PUSH
1769: LD_INT 61
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 168
1778: PUSH
1779: LD_INT 75
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 185
1788: PUSH
1789: LD_INT 85
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// mobile_patrol := [ ] ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: EMPTY
1830: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1831: LD_INT 3
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: LD_INT 3
1839: PPUSH
1840: LD_INT 4
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL 41241 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1850: LD_ADDR_EXP 18
1854: PUSH
1855: LD_EXP 18
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 45
1867: PPUSH
1868: CALL_OW 2
1872: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1873: LD_EXP 18
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: LD_INT 99
1884: PPUSH
1885: LD_INT 55
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1895: LD_INT 2
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 3
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 100
1909: PPUSH
1910: CALL 41241 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_EXP 18
1923: PPUSH
1924: LD_INT 2
1926: PPUSH
1927: CALL_OW 45
1931: PPUSH
1932: CALL_OW 2
1936: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1937: LD_EXP 18
1941: PUSH
1942: LD_INT 2
1944: ARRAY
1945: PPUSH
1946: LD_INT 27
1948: PPUSH
1949: LD_INT 49
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1959: LD_INT 3
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: LD_INT 9
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 7
1976: PUSH
1977: LD_INT 7
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: LD_OWVAR 67
1990: ARRAY
1991: PPUSH
1992: LD_INT 100
1994: PPUSH
1995: CALL 41241 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1999: LD_ADDR_EXP 18
2003: PUSH
2004: LD_EXP 18
2008: PPUSH
2009: LD_INT 3
2011: PPUSH
2012: CALL_OW 45
2016: PPUSH
2017: CALL_OW 2
2021: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2022: LD_EXP 18
2026: PUSH
2027: LD_INT 3
2029: ARRAY
2030: PPUSH
2031: LD_INT 200
2033: PPUSH
2034: LD_INT 88
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 48
// for i := mobile_patrol downto 1 do
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: DOUBLE
2050: LD_EXP 18
2054: INC
2055: ST_TO_ADDR
2056: LD_INT 1
2058: PUSH
2059: FOR_DOWNTO
2060: IFFALSE 2071
// RaiseSailEvent ( 1 ) ;
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 427
2069: GO 2059
2071: POP
2072: POP
// end ;
2073: LD_VAR 0 1
2077: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2088: LD_ADDR_VAR 0 5
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 21
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 22
2115: PUSH
2116: LD_INT 1
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2128: LD_ADDR_VAR 0 6
2132: PUSH
2133: LD_INT 176
2135: PUSH
2136: LD_INT 81
2138: PUSH
2139: LD_INT 135
2141: PUSH
2142: LD_INT 62
2144: PUSH
2145: LD_INT 114
2147: PUSH
2148: LD_INT 67
2150: PUSH
2151: LD_INT 93
2153: PUSH
2154: LD_INT 71
2156: PUSH
2157: LD_INT 76
2159: PUSH
2160: LD_INT 67
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 107
2177: PUSH
2178: LD_INT 92
2180: PUSH
2181: LD_INT 92
2183: PUSH
2184: LD_INT 72
2186: PUSH
2187: LD_INT 77
2189: PUSH
2190: LD_INT 68
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 45
2203: PUSH
2204: LD_INT 49
2206: PUSH
2207: LD_INT 67
2209: PUSH
2210: LD_INT 59
2212: PUSH
2213: LD_INT 77
2215: PUSH
2216: LD_INT 68
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2232: LD_ADDR_VAR 0 4
2236: PUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_VAR 0 5
2244: PPUSH
2245: CALL_OW 12
2249: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 2
2260: PPUSH
2261: CALL_OW 12
2265: ST_TO_ADDR
// uc_side := 1 ;
2266: LD_ADDR_OWVAR 20
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// uc_nation := 1 ;
2274: LD_ADDR_OWVAR 21
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2282: LD_INT 2
2284: PPUSH
2285: LD_INT 3
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: LD_INT 12
2293: PPUSH
2294: LD_INT 100
2296: PPUSH
2297: CALL 41241 0 5
// veh := CreateVehicle ;
2301: LD_ADDR_VAR 0 8
2305: PUSH
2306: CALL_OW 45
2310: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2311: LD_VAR 0 8
2315: PPUSH
2316: LD_VAR 0 5
2320: PUSH
2321: LD_VAR 0 4
2325: ARRAY
2326: PUSH
2327: LD_INT 2
2329: ARRAY
2330: PPUSH
2331: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2335: LD_VAR 0 8
2339: PPUSH
2340: LD_VAR 0 5
2344: PUSH
2345: LD_VAR 0 4
2349: ARRAY
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2362: LD_VAR 0 8
2366: PPUSH
2367: LD_INT 1
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_VAR 0 3
2381: ARRAY
2382: PPUSH
2383: LD_INT 100
2385: PPUSH
2386: CALL_OW 290
// tmp := road [ k ] ;
2390: LD_ADDR_VAR 0 7
2394: PUSH
2395: LD_VAR 0 6
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_VAR 0 7
2420: PUSH
2421: LD_INT 2
2423: DIV
2424: PUSH
2425: FOR_TO
2426: IFFALSE 2473
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 7
2437: PUSH
2438: LD_VAR 0 2
2442: PUSH
2443: LD_INT 2
2445: MUL
2446: PUSH
2447: LD_INT 1
2449: MINUS
2450: ARRAY
2451: PPUSH
2452: LD_VAR 0 7
2456: PUSH
2457: LD_VAR 0 2
2461: PUSH
2462: LD_INT 2
2464: MUL
2465: ARRAY
2466: PPUSH
2467: CALL_OW 171
2471: GO 2425
2473: POP
2474: POP
// AddComGive ( veh , alfa ) ;
2475: LD_VAR 0 8
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2487: LD_VAR 0 8
2491: PPUSH
2492: LD_INT 70
2494: PPUSH
2495: CALL_OW 202
// for i = tmp div 2 downto 1 do
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: DOUBLE
2505: LD_VAR 0 7
2509: PUSH
2510: LD_INT 2
2512: DIV
2513: INC
2514: ST_TO_ADDR
2515: LD_INT 1
2517: PUSH
2518: FOR_DOWNTO
2519: IFFALSE 2566
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2521: LD_VAR 0 8
2525: PPUSH
2526: LD_VAR 0 7
2530: PUSH
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 2
2538: MUL
2539: PUSH
2540: LD_INT 1
2542: MINUS
2543: ARRAY
2544: PPUSH
2545: LD_VAR 0 7
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_INT 2
2557: MUL
2558: ARRAY
2559: PPUSH
2560: CALL_OW 171
2564: GO 2518
2566: POP
2567: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2568: LD_VAR 0 8
2572: PPUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_VAR 0 4
2582: ARRAY
2583: PUSH
2584: LD_INT 1
2586: ARRAY
2587: PPUSH
2588: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2592: LD_INT 35
2594: PPUSH
2595: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2599: LD_VAR 0 8
2603: PPUSH
2604: LD_VAR 0 5
2608: PUSH
2609: LD_VAR 0 4
2613: ARRAY
2614: PUSH
2615: LD_INT 1
2617: ARRAY
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_VAR 0 8
2628: PPUSH
2629: LD_VAR 0 3
2633: PPUSH
2634: CALL_OW 289
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: AND
2643: IFFALSE 2592
// RemoveUnit ( veh ) ;
2645: LD_VAR 0 8
2649: PPUSH
2650: CALL_OW 64
// end ;
2654: LD_VAR 0 1
2658: RET
// every 3 3$00 do
2659: GO 2661
2661: DISABLE
// begin enable ;
2662: ENABLE
// SpawnCargo ;
2663: CALL 2078 0 0
// end ;
2667: END
// export function PrepareDefenders ; var i , tmp ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
// if defenders then
2673: LD_EXP 21
2677: IFFALSE 2681
// exit ;
2679: GO 2953
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2681: LD_ADDR_VAR 0 2
2685: PUSH
2686: DOUBLE
2687: LD_INT 1
2689: DEC
2690: ST_TO_ADDR
2691: LD_INT 4
2693: PUSH
2694: LD_INT 5
2696: PUSH
2697: LD_INT 6
2699: PUSH
2700: LD_INT 7
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2855
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2718: LD_ADDR_VAR 0 3
2722: PUSH
2723: LD_INT 6
2725: PPUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: CALL_OW 12
2746: ARRAY
2747: PPUSH
2748: LD_INT 1
2750: PUSH
2751: LD_INT 3
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 1
2760: PPUSH
2761: LD_INT 2
2763: PPUSH
2764: CALL_OW 12
2768: ARRAY
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: LD_INT 9
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 1
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: CALL_OW 12
2797: ARRAY
2798: PPUSH
2799: CALL 38861 0 5
2803: ST_TO_ADDR
// if tmp then
2804: LD_VAR 0 3
2808: IFFALSE 2853
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2810: LD_INT 6
2812: PPUSH
2813: LD_VAR 0 3
2817: PUSH
2818: LD_INT 1
2820: ARRAY
2821: PPUSH
2822: LD_VAR 0 3
2826: PUSH
2827: LD_INT 2
2829: ARRAY
2830: PPUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_INT 3
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 3
2844: PUSH
2845: LD_INT 4
2847: ARRAY
2848: PPUSH
2849: CALL_OW 185
// end ;
2853: GO 2715
2855: POP
2856: POP
// repeat wait ( 0 0$1 ) ;
2857: LD_INT 35
2859: PPUSH
2860: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 33
2876: PUSH
2877: LD_INT 2
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_INT 4
2895: PUSH
2896: LD_INT 5
2898: PUSH
2899: LD_INT 6
2901: PUSH
2902: LD_INT 7
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_OWVAR 67
2915: ARRAY
2916: GREATEREQUAL
2917: IFFALSE 2857
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2919: LD_ADDR_EXP 21
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 1
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 33
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: ST_TO_ADDR
// end ;
2953: LD_VAR 0 1
2957: RET
// export function Defend ; var i , un , veh , tmp ; begin
2958: LD_INT 0
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
// defcon_wave := defcon_wave + 1 ;
2965: LD_ADDR_EXP 23
2969: PUSH
2970: LD_EXP 23
2974: PUSH
2975: LD_INT 1
2977: PLUS
2978: ST_TO_ADDR
// if not defenders then
2979: LD_EXP 21
2983: NOT
2984: IFFALSE 2990
// PrepareDefenders ;
2986: CALL 2668 0 0
// if defcon_wave > 1 then
2990: LD_EXP 23
2994: PUSH
2995: LD_INT 1
2997: GREATER
2998: IFFALSE 3256
// begin for i = 1 to defcon_wave + 2 do
3000: LD_ADDR_VAR 0 2
3004: PUSH
3005: DOUBLE
3006: LD_INT 1
3008: DEC
3009: ST_TO_ADDR
3010: LD_EXP 23
3014: PUSH
3015: LD_INT 2
3017: PLUS
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3162
// begin uc_side := 1 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 1
3029: ST_TO_ADDR
// uc_nation := 1 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 1
3037: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3038: LD_INT 4
3040: PPUSH
3041: LD_INT 3
3043: PPUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: LD_INT 7
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: CALL_OW 12
3071: ARRAY
3072: PPUSH
3073: LD_INT 100
3075: PPUSH
3076: CALL 41241 0 5
// veh := CreateVehicle ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: CALL_OW 45
3089: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3090: LD_VAR 0 4
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: CALL_OW 233
// defenders := defenders ^ veh ;
3102: LD_ADDR_EXP 21
3106: PUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_VAR 0 4
3116: ADD
3117: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3118: LD_INT 0
3120: PPUSH
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 9
3126: PPUSH
3127: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3131: CALL_OW 44
3135: PPUSH
3136: LD_VAR 0 4
3140: PPUSH
3141: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3145: LD_VAR 0 4
3149: PPUSH
3150: LD_INT 25
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL_OW 49
// end ;
3160: GO 3019
3162: POP
3163: POP
// for i = 1 to defcon_wave do
3164: LD_ADDR_VAR 0 2
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_EXP 23
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3254
// begin uc_side := 1 ;
3182: LD_ADDR_OWVAR 20
3186: PUSH
3187: LD_INT 1
3189: ST_TO_ADDR
// uc_nation := 1 ;
3190: LD_ADDR_OWVAR 21
3194: PUSH
3195: LD_INT 1
3197: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 5
3203: PPUSH
3204: LD_INT 9
3206: PPUSH
3207: CALL_OW 380
// un := CreateHuman ;
3211: LD_ADDR_VAR 0 3
3215: PUSH
3216: CALL_OW 44
3220: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3221: LD_VAR 0 3
3225: PPUSH
3226: LD_INT 25
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
// defenders := defenders ^ un ;
3236: LD_ADDR_EXP 21
3240: PUSH
3241: LD_EXP 21
3245: PUSH
3246: LD_VAR 0 3
3250: ADD
3251: ST_TO_ADDR
// end ;
3252: GO 3179
3254: POP
3255: POP
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// for i in defenders do
3263: LD_ADDR_VAR 0 2
3267: PUSH
3268: LD_EXP 21
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3356
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3276: LD_EXP 22
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_EXP 22
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: PPUSH
3295: LD_EXP 22
3299: PUSH
3300: LD_INT 2
3302: ARRAY
3303: PPUSH
3304: CALL_OW 297
3308: PUSH
3309: LD_INT 10
3311: GREATER
3312: AND
3313: PUSH
3314: LD_VAR 0 2
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: AND
3325: IFFALSE 3354
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_EXP 22
3336: PUSH
3337: LD_INT 1
3339: ARRAY
3340: PPUSH
3341: LD_EXP 22
3345: PUSH
3346: LD_INT 2
3348: ARRAY
3349: PPUSH
3350: CALL_OW 114
// end ;
3354: GO 3273
3356: POP
3357: POP
// until not defenders ;
3358: LD_EXP 21
3362: NOT
3363: IFFALSE 3256
// end ;
3365: LD_VAR 0 1
3369: RET
// every 0 0$1 do var radar , i ;
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
3376: PPUSH
// begin uc_side := 1 ;
3377: LD_ADDR_OWVAR 20
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// uc_nation := 1 ;
3385: LD_ADDR_OWVAR 21
3389: PUSH
3390: LD_INT 1
3392: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3393: LD_INT 1
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: LD_INT 11
3404: PPUSH
3405: LD_INT 100
3407: PPUSH
3408: CALL 41241 0 5
// radar := CreateVehicle ;
3412: LD_ADDR_VAR 0 1
3416: PUSH
3417: CALL_OW 45
3421: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3434: LD_VAR 0 1
3438: PPUSH
3439: LD_INT 51
3441: PPUSH
3442: LD_INT 45
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3452: LD_VAR 0 1
3456: PPUSH
3457: LD_INT 700
3459: PPUSH
3460: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 65
3471: PPUSH
3472: LD_INT 75
3474: PPUSH
3475: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 350
3486: PPUSH
3487: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 83
3498: PPUSH
3499: LD_INT 87
3501: PPUSH
3502: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 525
3513: PPUSH
3514: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 94
3525: PPUSH
3526: LD_INT 81
3528: PPUSH
3529: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3533: LD_VAR 0 1
3537: PPUSH
3538: LD_INT 350
3540: PPUSH
3541: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3545: LD_VAR 0 1
3549: PPUSH
3550: LD_INT 55
3552: PPUSH
3553: LD_INT 48
3555: PPUSH
3556: CALL_OW 171
// wait ( 1 1$00 ) ;
3560: LD_INT 2100
3562: PPUSH
3563: CALL_OW 67
// until not IsOk ( radar ) ;
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 302
3576: NOT
3577: IFFALSE 3452
// end ;
3579: PPOPN 2
3581: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3582: LD_OWVAR 67
3586: PUSH
3587: LD_INT 1
3589: GREATER
3590: PUSH
3591: LD_EXP 11
3595: AND
3596: IFFALSE 3818
3598: GO 3600
3600: DISABLE
3601: LD_INT 0
3603: PPUSH
// begin enable ;
3604: ENABLE
// uc_side := 1 ;
3605: LD_ADDR_OWVAR 20
3609: PUSH
3610: LD_INT 1
3612: ST_TO_ADDR
// uc_nation := 1 ;
3613: LD_ADDR_OWVAR 21
3617: PUSH
3618: LD_INT 1
3620: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3621: LD_INT 5
3623: PPUSH
3624: LD_INT 3
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 100
3635: PPUSH
3636: CALL 41241 0 5
// un := CreateVehicle ;
3640: LD_ADDR_VAR 0 1
3644: PUSH
3645: CALL_OW 45
3649: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 3
3657: PPUSH
3658: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3662: LD_VAR 0 1
3666: PPUSH
3667: LD_INT 155
3669: PPUSH
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 0
3675: PPUSH
3676: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3680: LD_VAR 0 1
3684: PPUSH
3685: LD_INT 169
3687: PPUSH
3688: LD_INT 77
3690: PPUSH
3691: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3695: LD_VAR 0 1
3699: PPUSH
3700: LD_INT 70
3702: PPUSH
3703: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3707: LD_VAR 0 1
3711: PPUSH
3712: LD_INT 134
3714: PPUSH
3715: LD_INT 62
3717: PPUSH
3718: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_INT 103
3729: PPUSH
3730: LD_INT 42
3732: PPUSH
3733: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3737: LD_VAR 0 1
3741: PPUSH
3742: LD_INT 70
3744: PPUSH
3745: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3749: LD_VAR 0 1
3753: PPUSH
3754: LD_INT 84
3756: PPUSH
3757: LD_INT 2
3759: PPUSH
3760: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3764: LD_INT 35
3766: PPUSH
3767: CALL_OW 67
// if IsDead ( un ) then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 301
3780: IFFALSE 3792
// begin extra_patrol := false ;
3782: LD_ADDR_EXP 11
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// exit ;
3790: GO 3818
// end ; until IsAt ( un , 84 , 2 ) ;
3792: LD_VAR 0 1
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 2
3802: PPUSH
3803: CALL_OW 307
3807: IFFALSE 3764
// RemoveUnit ( un ) ;
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 64
// end ; end_of_file
3818: PPOPN 1
3820: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3821: LD_INT 0
3823: PPUSH
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// uc_side := 4 ;
3831: LD_ADDR_OWVAR 20
3835: PUSH
3836: LD_INT 4
3838: ST_TO_ADDR
// uc_nation := 1 ;
3839: LD_ADDR_OWVAR 21
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3847: LD_ADDR_EXP 38
3851: PUSH
3852: LD_STRING DeltaDoctor
3854: PPUSH
3855: LD_EXP 1
3859: NOT
3860: PPUSH
3861: LD_STRING 10c_
3863: PPUSH
3864: CALL 36401 0 3
3868: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3869: LD_ADDR_EXP 37
3873: PUSH
3874: LD_STRING Joan
3876: PPUSH
3877: LD_EXP 1
3881: NOT
3882: PPUSH
3883: LD_STRING 10c_
3885: PPUSH
3886: CALL 36401 0 3
3890: ST_TO_ADDR
// if Joan then
3891: LD_EXP 37
3895: IFFALSE 3926
// friends := Insert ( friends , friends + 1 , Joan ) ;
3897: LD_ADDR_EXP 4
3901: PUSH
3902: LD_EXP 4
3906: PPUSH
3907: LD_EXP 4
3911: PUSH
3912: LD_INT 1
3914: PLUS
3915: PPUSH
3916: LD_EXP 37
3920: PPUSH
3921: CALL_OW 2
3925: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3926: LD_ADDR_EXP 36
3930: PUSH
3931: LD_STRING Simms
3933: PPUSH
3934: LD_EXP 1
3938: NOT
3939: PPUSH
3940: LD_STRING 10c_
3942: PPUSH
3943: CALL 36401 0 3
3947: ST_TO_ADDR
// if debug then
3948: LD_EXP 1
3952: IFFALSE 3969
// Kikuchi := NewCharacter ( Yamoko ) else
3954: LD_ADDR_EXP 35
3958: PUSH
3959: LD_STRING Yamoko
3961: PPUSH
3962: CALL_OW 25
3966: ST_TO_ADDR
3967: GO 3991
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3969: LD_ADDR_EXP 35
3973: PUSH
3974: LD_STRING Kikuchi
3976: PPUSH
3977: LD_EXP 1
3981: NOT
3982: PPUSH
3983: LD_STRING 11_
3985: PPUSH
3986: CALL 36401 0 3
3990: ST_TO_ADDR
// if Kikuchi then
3991: LD_EXP 35
3995: IFFALSE 4026
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3997: LD_ADDR_EXP 4
4001: PUSH
4002: LD_EXP 4
4006: PPUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 1
4014: PLUS
4015: PPUSH
4016: LD_EXP 35
4020: PPUSH
4021: CALL_OW 2
4025: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
4026: LD_ADDR_EXP 34
4030: PUSH
4031: LD_STRING Frank
4033: PPUSH
4034: LD_EXP 1
4038: NOT
4039: PPUSH
4040: LD_STRING 11_
4042: PPUSH
4043: CALL 36401 0 3
4047: ST_TO_ADDR
// if Frank then
4048: LD_EXP 34
4052: IFFALSE 4083
// friends := Insert ( friends , friends + 1 , Frank ) ;
4054: LD_ADDR_EXP 4
4058: PUSH
4059: LD_EXP 4
4063: PPUSH
4064: LD_EXP 4
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: PPUSH
4073: LD_EXP 34
4077: PPUSH
4078: CALL_OW 2
4082: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4083: LD_ADDR_EXP 33
4087: PUSH
4088: LD_STRING Gary
4090: PPUSH
4091: LD_EXP 1
4095: NOT
4096: PPUSH
4097: LD_STRING 11_
4099: PPUSH
4100: CALL 36401 0 3
4104: ST_TO_ADDR
// if Gary then
4105: LD_EXP 33
4109: IFFALSE 4140
// friends := Insert ( friends , friends + 1 , Gary ) ;
4111: LD_ADDR_EXP 4
4115: PUSH
4116: LD_EXP 4
4120: PPUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 1
4128: PLUS
4129: PPUSH
4130: LD_EXP 33
4134: PPUSH
4135: CALL_OW 2
4139: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4140: LD_ADDR_EXP 32
4144: PUSH
4145: LD_STRING Cornell
4147: PPUSH
4148: LD_EXP 1
4152: NOT
4153: PPUSH
4154: LD_STRING 11_
4156: PPUSH
4157: CALL 36401 0 3
4161: ST_TO_ADDR
// if Cornel then
4162: LD_EXP 32
4166: IFFALSE 4197
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4168: LD_ADDR_EXP 4
4172: PUSH
4173: LD_EXP 4
4177: PPUSH
4178: LD_EXP 4
4182: PUSH
4183: LD_INT 1
4185: PLUS
4186: PPUSH
4187: LD_EXP 32
4191: PPUSH
4192: CALL_OW 2
4196: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4197: LD_ADDR_EXP 31
4201: PUSH
4202: LD_STRING Houten
4204: PPUSH
4205: LD_EXP 1
4209: NOT
4210: PPUSH
4211: LD_STRING 11_
4213: PPUSH
4214: CALL 36401 0 3
4218: ST_TO_ADDR
// if Houten then
4219: LD_EXP 31
4223: IFFALSE 4254
// friends := Insert ( friends , friends + 1 , Houten ) ;
4225: LD_ADDR_EXP 4
4229: PUSH
4230: LD_EXP 4
4234: PPUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 1
4242: PLUS
4243: PPUSH
4244: LD_EXP 31
4248: PPUSH
4249: CALL_OW 2
4253: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4254: LD_ADDR_EXP 30
4258: PUSH
4259: LD_STRING Gladstone
4261: PPUSH
4262: LD_EXP 1
4266: NOT
4267: PPUSH
4268: LD_STRING 11_
4270: PPUSH
4271: CALL 36401 0 3
4275: ST_TO_ADDR
// if Gladstone then
4276: LD_EXP 30
4280: IFFALSE 4311
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4282: LD_ADDR_EXP 4
4286: PUSH
4287: LD_EXP 4
4291: PPUSH
4292: LD_EXP 4
4296: PUSH
4297: LD_INT 1
4299: PLUS
4300: PPUSH
4301: LD_EXP 30
4305: PPUSH
4306: CALL_OW 2
4310: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4311: LD_ADDR_EXP 24
4315: PUSH
4316: LD_STRING Lisa
4318: PPUSH
4319: LD_EXP 1
4323: NOT
4324: PPUSH
4325: LD_STRING 11_
4327: PPUSH
4328: CALL 36401 0 3
4332: ST_TO_ADDR
// if Lisa then
4333: LD_EXP 24
4337: IFFALSE 4362
// friends := Insert ( friends , 1 , Lisa ) ;
4339: LD_ADDR_EXP 4
4343: PUSH
4344: LD_EXP 4
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: LD_EXP 24
4356: PPUSH
4357: CALL_OW 2
4361: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4362: LD_ADDR_EXP 25
4366: PUSH
4367: LD_STRING Donaldson
4369: PPUSH
4370: LD_EXP 1
4374: NOT
4375: PPUSH
4376: LD_STRING 11_
4378: PPUSH
4379: CALL 36401 0 3
4383: ST_TO_ADDR
// if Donaldson then
4384: LD_EXP 25
4388: IFFALSE 4419
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4390: LD_ADDR_EXP 4
4394: PUSH
4395: LD_EXP 4
4399: PPUSH
4400: LD_EXP 4
4404: PUSH
4405: LD_INT 1
4407: PLUS
4408: PPUSH
4409: LD_EXP 25
4413: PPUSH
4414: CALL_OW 2
4418: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4419: LD_ADDR_EXP 26
4423: PUSH
4424: LD_STRING Bobby
4426: PPUSH
4427: LD_EXP 1
4431: NOT
4432: PPUSH
4433: LD_STRING 11_
4435: PPUSH
4436: CALL 36401 0 3
4440: ST_TO_ADDR
// if Bobby then
4441: LD_EXP 26
4445: IFFALSE 4476
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4447: LD_ADDR_EXP 4
4451: PUSH
4452: LD_EXP 4
4456: PPUSH
4457: LD_EXP 4
4461: PUSH
4462: LD_INT 1
4464: PLUS
4465: PPUSH
4466: LD_EXP 26
4470: PPUSH
4471: CALL_OW 2
4475: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4476: LD_ADDR_EXP 27
4480: PUSH
4481: LD_STRING Cyrus
4483: PPUSH
4484: LD_EXP 1
4488: NOT
4489: PPUSH
4490: LD_STRING 11_
4492: PPUSH
4493: CALL 36401 0 3
4497: ST_TO_ADDR
// if Cyrus then
4498: LD_EXP 27
4502: IFFALSE 4533
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4504: LD_ADDR_EXP 4
4508: PUSH
4509: LD_EXP 4
4513: PPUSH
4514: LD_EXP 4
4518: PUSH
4519: LD_INT 1
4521: PLUS
4522: PPUSH
4523: LD_EXP 27
4527: PPUSH
4528: CALL_OW 2
4532: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4533: LD_ADDR_EXP 28
4537: PUSH
4538: LD_STRING Denis
4540: PPUSH
4541: LD_EXP 1
4545: NOT
4546: PPUSH
4547: LD_STRING 11_
4549: PPUSH
4550: CALL 36401 0 3
4554: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4555: LD_ADDR_EXP 29
4559: PUSH
4560: LD_STRING Brown
4562: PPUSH
4563: LD_EXP 1
4567: NOT
4568: PPUSH
4569: LD_STRING 11_
4571: PPUSH
4572: CALL 36401 0 3
4576: ST_TO_ADDR
// if Brown then
4577: LD_EXP 29
4581: IFFALSE 4612
// friends := Insert ( friends , friends + 1 , Brown ) ;
4583: LD_ADDR_EXP 4
4587: PUSH
4588: LD_EXP 4
4592: PPUSH
4593: LD_EXP 4
4597: PUSH
4598: LD_INT 1
4600: PLUS
4601: PPUSH
4602: LD_EXP 29
4606: PPUSH
4607: CALL_OW 2
4611: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4612: LD_ADDR_EXP 39
4616: PUSH
4617: LD_STRING Mike
4619: PPUSH
4620: LD_EXP 1
4624: NOT
4625: PPUSH
4626: LD_STRING 10c_
4628: PPUSH
4629: CALL 36401 0 3
4633: ST_TO_ADDR
// if Mike then
4634: LD_EXP 39
4638: IFFALSE 4679
// begin SetClass ( Mike , class_apeman_engineer ) ;
4640: LD_EXP 39
4644: PPUSH
4645: LD_INT 16
4647: PPUSH
4648: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4652: LD_EXP 39
4656: PPUSH
4657: LD_INT 180
4659: PPUSH
4660: LD_INT 87
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL_OW 48
// ComHold ( Mike ) ;
4670: LD_EXP 39
4674: PPUSH
4675: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4679: LD_ADDR_EXP 4
4683: PUSH
4684: LD_EXP 4
4688: PUSH
4689: LD_STRING 11c_others
4691: PPUSH
4692: CALL_OW 31
4696: ADD
4697: PUSH
4698: LD_STRING 11_others
4700: PPUSH
4701: CALL_OW 31
4705: ADD
4706: ST_TO_ADDR
// if friends < 18 then
4707: LD_EXP 4
4711: PUSH
4712: LD_INT 18
4714: LESS
4715: IFFALSE 4787
// for i = 1 to 18 do
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: DOUBLE
4723: LD_INT 1
4725: DEC
4726: ST_TO_ADDR
4727: LD_INT 18
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4785
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4733: LD_INT 0
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: LD_INT 4
4741: PPUSH
4742: CALL_OW 12
4746: PPUSH
4747: LD_INT 7
4749: PPUSH
4750: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4754: LD_ADDR_EXP 4
4758: PUSH
4759: LD_EXP 4
4763: PPUSH
4764: LD_EXP 4
4768: PUSH
4769: LD_INT 1
4771: PLUS
4772: PPUSH
4773: CALL_OW 44
4777: PPUSH
4778: CALL_OW 2
4782: ST_TO_ADDR
// end ;
4783: GO 4730
4785: POP
4786: POP
// for i in friends do
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: LD_EXP 4
4796: PUSH
4797: FOR_IN
4798: IFFALSE 4871
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4800: LD_VAR 0 2
4804: PPUSH
4805: CALL_OW 248
4809: PUSH
4810: LD_INT 1
4812: EQUAL
4813: PUSH
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 259
4826: PUSH
4827: LD_VAR 0 2
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 259
4839: GREATEREQUAL
4840: AND
4841: IFFALSE 4857
// SetClass ( i , class_soldier ) else
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 336
4855: GO 4869
// SetClass ( i , class_scientistic ) ;
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: CALL_OW 336
4869: GO 4797
4871: POP
4872: POP
// if Frank then
4873: LD_EXP 34
4877: IFFALSE 4891
// SetClass ( Frank , class_sniper ) ;
4879: LD_EXP 34
4883: PPUSH
4884: LD_INT 5
4886: PPUSH
4887: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4891: LD_EXP 37
4895: PUSH
4896: LD_EXP 28
4900: PUSH
4901: LD_EXP 38
4905: PUSH
4906: LD_EXP 36
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ [ class_soldier , 3 ] , [ class_scientistic , 2 , 5 ] , [ class_sniper , 0 , 2 ] ] ) ;
4924: LD_ADDR_EXP 3
4928: PUSH
4929: LD_STRING 
4931: PPUSH
4932: LD_INT 7
4934: PPUSH
4935: LD_INT 7
4937: PPUSH
4938: LD_INT -6
4940: PUSH
4941: LD_EXP 15
4945: PUSH
4946: LD_EXP 16
4950: PUSH
4951: LD_EXP 36
4955: PUSH
4956: LD_EXP 28
4960: PUSH
4961: LD_EXP 38
4965: PUSH
4966: LD_INT -2
4968: PUSH
4969: LD_INT -3
4971: PUSH
4972: LD_INT -5
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PUSH
4986: LD_EXP 4
4990: ADD
4991: PPUSH
4992: LD_INT 1
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 4
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 5
5018: PUSH
5019: LD_INT 0
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PPUSH
5035: CALL_OW 42
5039: ST_TO_ADDR
// if Simms then
5040: LD_EXP 36
5044: IFFALSE 5062
// selected := selected ^ Simms ;
5046: LD_ADDR_EXP 3
5050: PUSH
5051: LD_EXP 3
5055: PUSH
5056: LD_EXP 36
5060: ADD
5061: ST_TO_ADDR
// if Denis then
5062: LD_EXP 28
5066: IFFALSE 5084
// selected := selected ^ Denis ;
5068: LD_ADDR_EXP 3
5072: PUSH
5073: LD_EXP 3
5077: PUSH
5078: LD_EXP 28
5082: ADD
5083: ST_TO_ADDR
// if DeltaDoctor then
5084: LD_EXP 38
5088: IFFALSE 5106
// selected := selected ^ DeltaDoctor ;
5090: LD_ADDR_EXP 3
5094: PUSH
5095: LD_EXP 3
5099: PUSH
5100: LD_EXP 38
5104: ADD
5105: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5106: LD_EXP 10
5110: PUSH
5111: LD_INT 1
5113: EQUAL
5114: PUSH
5115: LD_EXP 25
5119: AND
5120: IFFALSE 5132
// gammaCommander := Donaldson ;
5122: LD_ADDR_VAR 0 8
5126: PUSH
5127: LD_EXP 25
5131: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5132: LD_EXP 10
5136: PUSH
5137: LD_INT 2
5139: EQUAL
5140: PUSH
5141: LD_EXP 29
5145: AND
5146: IFFALSE 5158
// gammaCommander := Brown ;
5148: LD_ADDR_VAR 0 8
5152: PUSH
5153: LD_EXP 29
5157: ST_TO_ADDR
// friends := friends diff selected ;
5158: LD_ADDR_EXP 4
5162: PUSH
5163: LD_EXP 4
5167: PUSH
5168: LD_EXP 3
5172: DIFF
5173: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5174: LD_ADDR_EXP 4
5178: PUSH
5179: LD_EXP 4
5183: PUSH
5184: LD_VAR 0 8
5188: DIFF
5189: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5190: LD_ADDR_VAR 0 4
5194: PUSH
5195: LD_INT 111
5197: PUSH
5198: LD_INT 137
5200: PUSH
5201: LD_INT 51
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_INT 147
5211: PUSH
5212: LD_INT 129
5214: PUSH
5215: LD_INT 25
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5227: LD_ADDR_VAR 0 5
5231: PUSH
5232: LD_INT 5
5234: PUSH
5235: LD_INT 6
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: LD_INT 17
5246: PUSH
5247: LD_INT 18
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: ST_TO_ADDR
// for i in buildings do
5258: LD_ADDR_VAR 0 2
5262: PUSH
5263: LD_VAR 0 4
5267: PUSH
5268: FOR_IN
5269: IFFALSE 5285
// SetSide ( i , 4 ) ;
5271: LD_VAR 0 2
5275: PPUSH
5276: LD_INT 4
5278: PPUSH
5279: CALL_OW 235
5283: GO 5268
5285: POP
5286: POP
// for i in selected union gammaCommander do
5287: LD_ADDR_VAR 0 2
5291: PUSH
5292: LD_EXP 3
5296: PUSH
5297: LD_VAR 0 8
5301: UNION
5302: PUSH
5303: FOR_IN
5304: IFFALSE 5644
// begin if GetClass ( i ) in [ 1 , 5 ] then
5306: LD_VAR 0 2
5310: PPUSH
5311: CALL_OW 257
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: IN
5326: IFFALSE 5486
// begin if buildings [ 1 ] then
5328: LD_VAR 0 4
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: IFFALSE 5397
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_VAR 0 4
5347: PUSH
5348: LD_INT 1
5350: ARRAY
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PPUSH
5356: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5360: LD_ADDR_VAR 0 4
5364: PUSH
5365: LD_VAR 0 4
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: LD_VAR 0 4
5377: PUSH
5378: LD_INT 1
5380: ARRAY
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 3
5389: PPUSH
5390: CALL_OW 1
5394: ST_TO_ADDR
// end else
5395: GO 5484
// begin if not areas then
5397: LD_VAR 0 5
5401: NOT
5402: IFFALSE 5436
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_INT 87
5411: PPUSH
5412: LD_INT 68
5414: PPUSH
5415: LD_INT 8
5417: PPUSH
5418: LD_INT 0
5420: PPUSH
5421: CALL_OW 50
// ComHold ( i ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 140
// end else
5434: GO 5484
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// ComHold ( i ) ;
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5466: LD_ADDR_VAR 0 5
5470: PUSH
5471: LD_VAR 0 5
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: CALL_OW 3
5483: ST_TO_ADDR
// end ; end ; end else
5484: GO 5642
// begin if buildings [ 2 ] then
5486: LD_VAR 0 4
5490: PUSH
5491: LD_INT 2
5493: ARRAY
5494: IFFALSE 5555
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5496: LD_VAR 0 2
5500: PPUSH
5501: LD_VAR 0 4
5505: PUSH
5506: LD_INT 2
5508: ARRAY
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5518: LD_ADDR_VAR 0 4
5522: PUSH
5523: LD_VAR 0 4
5527: PPUSH
5528: LD_INT 2
5530: PPUSH
5531: LD_VAR 0 4
5535: PUSH
5536: LD_INT 2
5538: ARRAY
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: CALL_OW 3
5547: PPUSH
5548: CALL_OW 1
5552: ST_TO_ADDR
// end else
5553: GO 5642
// begin if not areas then
5555: LD_VAR 0 5
5559: NOT
5560: IFFALSE 5594
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 87
5569: PPUSH
5570: LD_INT 68
5572: PPUSH
5573: LD_INT 8
5575: PPUSH
5576: LD_INT 0
5578: PPUSH
5579: CALL_OW 50
// ComHold ( i ) ;
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 140
// end else
5592: GO 5642
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 5
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_INT 0
5610: PPUSH
5611: CALL_OW 49
// ComHold ( i ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: LD_INT 1
5636: PPUSH
5637: CALL_OW 3
5641: ST_TO_ADDR
// end ; end ; end ; end ;
5642: GO 5303
5644: POP
5645: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5646: LD_ADDR_VAR 0 6
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 30
5663: PUSH
5664: LD_INT 32
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: CALL_OW 69
5679: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5680: LD_ADDR_VAR 0 2
5684: PUSH
5685: DOUBLE
5686: LD_VAR 0 6
5690: PUSH
5691: LD_EXP 4
5695: MINUS
5696: INC
5697: ST_TO_ADDR
5698: LD_INT 1
5700: PUSH
5701: FOR_DOWNTO
5702: IFFALSE 5769
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5704: LD_INT 0
5706: PPUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_INT 7
5712: PUSH
5713: LD_INT 8
5715: PUSH
5716: LD_INT 9
5718: PUSH
5719: LD_INT 10
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_OWVAR 67
5732: ARRAY
5733: PPUSH
5734: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5738: LD_ADDR_EXP 4
5742: PUSH
5743: LD_EXP 4
5747: PPUSH
5748: LD_EXP 4
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: PPUSH
5757: CALL_OW 44
5761: PPUSH
5762: CALL_OW 2
5766: ST_TO_ADDR
// end ;
5767: GO 5701
5769: POP
5770: POP
// if friends then
5771: LD_EXP 4
5775: IFFALSE 5891
// begin tmp := friends ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: LD_EXP 4
5786: ST_TO_ADDR
// for i = 1 to bunkers do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: DOUBLE
5793: LD_INT 1
5795: DEC
5796: ST_TO_ADDR
5797: LD_VAR 0 6
5801: PUSH
5802: FOR_TO
5803: IFFALSE 5889
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5805: LD_VAR 0 3
5809: PUSH
5810: LD_VAR 0 3
5814: ARRAY
5815: PPUSH
5816: LD_INT 1
5818: PPUSH
5819: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 3
5832: ARRAY
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 3
5850: ARRAY
5851: PPUSH
5852: LD_VAR 0 6
5856: PUSH
5857: LD_VAR 0 2
5861: ARRAY
5862: PPUSH
5863: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_VAR 0 3
5876: PPUSH
5877: LD_VAR 0 3
5881: PPUSH
5882: CALL_OW 3
5886: ST_TO_ADDR
// end ;
5887: GO 5802
5889: POP
5890: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5891: LD_ADDR_VAR 0 5
5895: PUSH
5896: LD_VAR 0 5
5900: PUSH
5901: LD_INT 9
5903: PUSH
5904: LD_INT 10
5906: PUSH
5907: LD_INT 11
5909: PUSH
5910: LD_INT 12
5912: PUSH
5913: LD_INT 13
5915: PUSH
5916: LD_INT 14
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 26
5927: PUSH
5928: LD_INT 27
5930: PUSH
5931: LD_INT 28
5933: PUSH
5934: LD_INT 29
5936: PUSH
5937: LD_INT 30
5939: PUSH
5940: LD_INT 31
5942: PUSH
5943: LD_INT 32
5945: PUSH
5946: LD_INT 33
5948: PUSH
5949: LD_INT 34
5951: PUSH
5952: LD_INT 35
5954: PUSH
5955: LD_INT 36
5957: PUSH
5958: LD_INT 37
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: UNION
5983: ST_TO_ADDR
// for i in friends do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_EXP 4
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6278
// begin SetTag ( i , 2 ) ;
5997: LD_VAR 0 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_sniper ] then
6009: LD_VAR 0 2
6013: PPUSH
6014: CALL_OW 257
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: LD_INT 5
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: IN
6029: NOT
6030: IFFALSE 6044
// SetClass ( i , 1 ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6044: LD_VAR 0 2
6048: PPUSH
6049: CALL_OW 257
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 5
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: IN
6064: PUSH
6065: LD_VAR 0 4
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: AND
6074: IFFALSE 6135
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_VAR 0 4
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PUSH
6090: LD_INT 1
6092: ARRAY
6093: PPUSH
6094: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6098: LD_ADDR_VAR 0 4
6102: PUSH
6103: LD_VAR 0 4
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: LD_VAR 0 4
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 3
6127: PPUSH
6128: CALL_OW 1
6132: ST_TO_ADDR
// continue ;
6133: GO 5994
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6135: LD_VAR 0 2
6139: PPUSH
6140: CALL_OW 257
6144: PUSH
6145: LD_INT 4
6147: EQUAL
6148: PUSH
6149: LD_VAR 0 4
6153: PUSH
6154: LD_INT 2
6156: ARRAY
6157: AND
6158: IFFALSE 6219
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_VAR 0 4
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: PPUSH
6178: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6182: LD_ADDR_VAR 0 4
6186: PUSH
6187: LD_VAR 0 4
6191: PPUSH
6192: LD_INT 2
6194: PPUSH
6195: LD_VAR 0 4
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: LD_INT 1
6206: PPUSH
6207: CALL_OW 3
6211: PPUSH
6212: CALL_OW 1
6216: ST_TO_ADDR
// continue ;
6217: GO 5994
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6219: LD_VAR 0 2
6223: PPUSH
6224: LD_VAR 0 5
6228: PUSH
6229: LD_INT 1
6231: ARRAY
6232: PPUSH
6233: LD_INT 0
6235: PPUSH
6236: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6240: LD_ADDR_VAR 0 5
6244: PUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 3
6257: ST_TO_ADDR
// ComHold ( i ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: CALL_OW 140
// if not areas then
6267: LD_VAR 0 5
6271: NOT
6272: IFFALSE 6276
// break ;
6274: GO 6278
// end ;
6276: GO 5994
6278: POP
6279: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6280: LD_EXP 4
6284: PPUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 52
6290: PUSH
6291: EMPTY
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 72
6302: IFFALSE 6369
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_EXP 4
6313: PPUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 52
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PPUSH
6327: CALL_OW 72
6331: PUSH
6332: FOR_IN
6333: IFFALSE 6367
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 65
6342: PPUSH
6343: LD_INT 58
6345: PPUSH
6346: LD_INT 7
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ComHold ( i ) ;
6356: LD_VAR 0 2
6360: PPUSH
6361: CALL_OW 140
// end ;
6365: GO 6332
6367: POP
6368: POP
// if Frank then
6369: LD_EXP 34
6373: IFFALSE 6387
// SetClass ( Frank , class_sniper ) ;
6375: LD_EXP 34
6379: PPUSH
6380: LD_INT 5
6382: PPUSH
6383: CALL_OW 336
// end ; end_of_file
6387: LD_VAR 0 1
6391: RET
// export function CanSayRand ( side ) ; begin
6392: LD_INT 0
6394: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: LD_INT 52
6402: PUSH
6403: EMPTY
6404: LIST
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_VAR 0 1
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 2
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 25
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 69
6477: PUSH
6478: LD_EXP 15
6482: PUSH
6483: LD_EXP 34
6487: PUSH
6488: LD_EXP 24
6492: PUSH
6493: LD_EXP 25
6497: PUSH
6498: LD_EXP 26
6502: PUSH
6503: LD_EXP 27
6507: PUSH
6508: LD_EXP 28
6512: PUSH
6513: LD_EXP 29
6517: PUSH
6518: LD_EXP 30
6522: PUSH
6523: LD_EXP 31
6527: PUSH
6528: LD_EXP 17
6532: PUSH
6533: LD_EXP 32
6537: PUSH
6538: LD_EXP 33
6542: PUSH
6543: LD_EXP 35
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: DIFF
6564: ST_TO_ADDR
// end ;
6565: LD_VAR 0 2
6569: RET
// export function SayRand ( sex , dial ) ; begin
6570: LD_INT 0
6572: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 52
6580: PUSH
6581: EMPTY
6582: LIST
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 1
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 26
6596: PUSH
6597: LD_VAR 0 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 25
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 25
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: PUSH
6667: LD_EXP 15
6671: PUSH
6672: LD_EXP 34
6676: PUSH
6677: LD_EXP 24
6681: PUSH
6682: LD_EXP 25
6686: PUSH
6687: LD_EXP 26
6691: PUSH
6692: LD_EXP 27
6696: PUSH
6697: LD_EXP 28
6701: PUSH
6702: LD_EXP 29
6706: PUSH
6707: LD_EXP 30
6711: PUSH
6712: LD_EXP 31
6716: PUSH
6717: LD_EXP 17
6721: PUSH
6722: LD_EXP 32
6726: PUSH
6727: LD_EXP 33
6731: PUSH
6732: LD_EXP 35
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: DIFF
6753: ST_TO_ADDR
// if not result then
6754: LD_VAR 0 3
6758: NOT
6759: IFFALSE 6763
// exit ;
6761: GO 6791
// result := result [ 1 ] ;
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_VAR 0 3
6772: PUSH
6773: LD_INT 1
6775: ARRAY
6776: ST_TO_ADDR
// Say ( result , dial ) ;
6777: LD_VAR 0 3
6781: PPUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: CALL_OW 88
// end ;
6791: LD_VAR 0 3
6795: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6796: LD_INT 0
6798: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6799: LD_ADDR_VAR 0 4
6803: PUSH
6804: LD_INT 22
6806: PUSH
6807: LD_INT 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 26
6816: PUSH
6817: LD_VAR 0 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 25
6831: PUSH
6832: LD_INT 1
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 25
6851: PUSH
6852: LD_INT 3
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PUSH
6886: LD_EXP 15
6890: PUSH
6891: LD_EXP 34
6895: PUSH
6896: LD_EXP 24
6900: PUSH
6901: LD_EXP 25
6905: PUSH
6906: LD_EXP 26
6910: PUSH
6911: LD_EXP 27
6915: PUSH
6916: LD_EXP 28
6920: PUSH
6921: LD_EXP 29
6925: PUSH
6926: LD_EXP 30
6930: PUSH
6931: LD_EXP 31
6935: PUSH
6936: LD_EXP 17
6940: PUSH
6941: LD_EXP 32
6945: PUSH
6946: LD_EXP 33
6950: PUSH
6951: LD_EXP 35
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_VAR 0 3
6976: ADD
6977: DIFF
6978: ST_TO_ADDR
// if not result then
6979: LD_VAR 0 4
6983: NOT
6984: IFFALSE 6988
// exit ;
6986: GO 7016
// result := result [ 1 ] ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 4
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: ST_TO_ADDR
// Say ( result , dial ) ;
7002: LD_VAR 0 4
7006: PPUSH
7007: LD_VAR 0 2
7011: PPUSH
7012: CALL_OW 88
// end ;
7016: LD_VAR 0 4
7020: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
7030: PPUSH
7031: PPUSH
7032: PPUSH
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7038: LD_VAR 0 1
7042: NOT
7043: PUSH
7044: LD_VAR 0 2
7048: NOT
7049: OR
7050: PUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 247
7060: PUSH
7061: LD_INT 3
7063: EQUAL
7064: OR
7065: IFFALSE 7069
// exit ;
7067: GO 8608
// for i = path downto 1 do
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: DOUBLE
7075: LD_VAR 0 2
7079: INC
7080: ST_TO_ADDR
7081: LD_INT 1
7083: PUSH
7084: FOR_DOWNTO
7085: IFFALSE 7146
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7087: LD_VAR 0 2
7091: PUSH
7092: LD_VAR 0 5
7096: ARRAY
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 2
7106: PUSH
7107: LD_VAR 0 5
7111: ARRAY
7112: PUSH
7113: LD_INT 2
7115: ARRAY
7116: PPUSH
7117: CALL_OW 488
7121: NOT
7122: IFFALSE 7144
// path = Delete ( path , i ) ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_VAR 0 2
7133: PPUSH
7134: LD_VAR 0 5
7138: PPUSH
7139: CALL_OW 3
7143: ST_TO_ADDR
// end ;
7144: GO 7084
7146: POP
7147: POP
// if not path then
7148: LD_VAR 0 2
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 8608
// tmp_path := [ ] ;
7157: LD_ADDR_VAR 0 11
7161: PUSH
7162: EMPTY
7163: ST_TO_ADDR
// if flags then
7164: LD_VAR 0 3
7168: IFFALSE 7242
// begin if flags [ 1 ] then
7170: LD_VAR 0 3
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: IFFALSE 7194
// safe_place = flags [ 1 ] ;
7180: LD_ADDR_VAR 0 16
7184: PUSH
7185: LD_VAR 0 3
7189: PUSH
7190: LD_INT 1
7192: ARRAY
7193: ST_TO_ADDR
// if flags [ 2 ] then
7194: LD_VAR 0 3
7198: PUSH
7199: LD_INT 2
7201: ARRAY
7202: IFFALSE 7218
// spot_dist = flags [ 2 ] ;
7204: LD_ADDR_VAR 0 15
7208: PUSH
7209: LD_VAR 0 3
7213: PUSH
7214: LD_INT 2
7216: ARRAY
7217: ST_TO_ADDR
// if flags [ 3 ] then
7218: LD_VAR 0 3
7222: PUSH
7223: LD_INT 3
7225: ARRAY
7226: IFFALSE 7242
// chase_range = flags [ 3 ] ;
7228: LD_ADDR_VAR 0 17
7232: PUSH
7233: LD_VAR 0 3
7237: PUSH
7238: LD_INT 3
7240: ARRAY
7241: ST_TO_ADDR
// end ; if not chase_range then
7242: LD_VAR 0 17
7246: NOT
7247: IFFALSE 7257
// chase_range = 8 ;
7249: LD_ADDR_VAR 0 17
7253: PUSH
7254: LD_INT 8
7256: ST_TO_ADDR
// if not spot_dist then
7257: LD_VAR 0 15
7261: NOT
7262: IFFALSE 7272
// spot_dist := 8 ;
7264: LD_ADDR_VAR 0 15
7268: PUSH
7269: LD_INT 8
7271: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7272: LD_ADDR_VAR 0 18
7276: PUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 247
7286: PUSH
7287: LD_INT 2
7289: EQUAL
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 262
7300: PUSH
7301: LD_INT 3
7303: NONEQUAL
7304: AND
7305: ST_TO_ADDR
// status = 1 ;
7306: LD_ADDR_VAR 0 12
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7314: LD_ADDR_VAR 0 11
7318: PUSH
7319: LD_INT 1
7321: PUSH
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7335: LD_INT 35
7337: PPUSH
7338: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7342: LD_VAR 0 18
7346: PUSH
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 261
7356: PUSH
7357: LD_INT 20
7359: LESS
7360: AND
7361: IFFALSE 7554
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7363: LD_ADDR_VAR 0 10
7367: PUSH
7368: LD_INT 22
7370: PUSH
7371: LD_VAR 0 1
7375: PPUSH
7376: CALL_OW 255
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 30
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 30
7400: PUSH
7401: LD_INT 1
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 30
7410: PUSH
7411: LD_INT 29
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 69
7443: ST_TO_ADDR
// if not station then
7444: LD_VAR 0 10
7448: NOT
7449: IFFALSE 7465
// begin SetFuel ( unit , 40 ) ;
7451: LD_VAR 0 1
7455: PPUSH
7456: LD_INT 40
7458: PPUSH
7459: CALL_OW 240
// continue ;
7463: GO 7335
// end ; status := 6 ;
7465: LD_ADDR_VAR 0 12
7469: PUSH
7470: LD_INT 6
7472: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 10
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 74
7492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7493: LD_INT 35
7495: PPUSH
7496: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7500: LD_VAR 0 1
7504: PPUSH
7505: LD_VAR 0 10
7509: PPUSH
7510: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 10
7523: PPUSH
7524: CALL_OW 296
7528: PUSH
7529: LD_INT 6
7531: LESS
7532: IFFALSE 7493
// SetFuel ( unit , 100 ) ;
7534: LD_VAR 0 1
7538: PPUSH
7539: LD_INT 100
7541: PPUSH
7542: CALL_OW 240
// status := 5 ;
7546: LD_ADDR_VAR 0 12
7550: PUSH
7551: LD_INT 5
7553: ST_TO_ADDR
// end ; if status = 1 then
7554: LD_VAR 0 12
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7938
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7564: LD_ADDR_VAR 0 13
7568: PUSH
7569: LD_INT 81
7571: PUSH
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 255
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 3
7588: PUSH
7589: LD_INT 21
7591: PUSH
7592: LD_INT 3
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 91
7605: PUSH
7606: LD_VAR 0 1
7610: PUSH
7611: LD_VAR 0 15
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 101
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 69
7641: ST_TO_ADDR
// for i in enemy do
7642: LD_ADDR_VAR 0 5
7646: PUSH
7647: LD_VAR 0 13
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7684
// if IsInvisible ( i ) then
7655: LD_VAR 0 5
7659: PPUSH
7660: CALL_OW 571
7664: IFFALSE 7682
// enemy := enemy diff i ;
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 13
7675: PUSH
7676: LD_VAR 0 5
7680: DIFF
7681: ST_TO_ADDR
7682: GO 7652
7684: POP
7685: POP
// if enemy then
7686: LD_VAR 0 13
7690: IFFALSE 7740
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 250
7706: PPUSH
7707: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7711: LD_VAR 0 1
7715: PPUSH
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 251
7725: PPUSH
7726: CALL_OW 232
// status = 2 ;
7730: LD_ADDR_VAR 0 12
7734: PUSH
7735: LD_INT 2
7737: ST_TO_ADDR
// end else
7738: GO 7938
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_VAR 0 11
7749: PUSH
7750: LD_INT 2
7752: ARRAY
7753: PUSH
7754: LD_INT 1
7756: ARRAY
7757: PPUSH
7758: LD_VAR 0 11
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PPUSH
7771: CALL_OW 307
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: CALL_OW 314
7785: NOT
7786: OR
7787: IFFALSE 7938
// begin wait ( 0 0$2 ) ;
7789: LD_INT 70
7791: PPUSH
7792: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7796: LD_VAR 0 11
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PUSH
7805: LD_INT 1
7807: PLUS
7808: PUSH
7809: LD_VAR 0 2
7813: GREATER
7814: IFFALSE 7839
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7816: LD_ADDR_VAR 0 11
7820: PUSH
7821: LD_VAR 0 11
7825: PPUSH
7826: LD_INT 1
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: CALL_OW 1
7836: ST_TO_ADDR
7837: GO 7870
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7839: LD_ADDR_VAR 0 11
7843: PUSH
7844: LD_VAR 0 11
7848: PPUSH
7849: LD_INT 1
7851: PPUSH
7852: LD_VAR 0 11
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: PUSH
7861: LD_INT 1
7863: PLUS
7864: PPUSH
7865: CALL_OW 1
7869: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7870: LD_ADDR_VAR 0 11
7874: PUSH
7875: LD_VAR 0 11
7879: PPUSH
7880: LD_INT 2
7882: PPUSH
7883: LD_VAR 0 2
7887: PUSH
7888: LD_VAR 0 11
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: ARRAY
7897: PPUSH
7898: CALL_OW 1
7902: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7903: LD_VAR 0 1
7907: PPUSH
7908: LD_VAR 0 11
7912: PUSH
7913: LD_INT 2
7915: ARRAY
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 11
7925: PUSH
7926: LD_INT 2
7928: ARRAY
7929: PUSH
7930: LD_INT 2
7932: ARRAY
7933: PPUSH
7934: CALL_OW 114
// end ; end ; end ; if status = 2 then
7938: LD_VAR 0 12
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 8167
// begin if GetLives ( unit ) < 650 and safe_place then
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 256
7957: PUSH
7958: LD_INT 650
7960: LESS
7961: PUSH
7962: LD_VAR 0 16
7966: AND
7967: IFFALSE 7979
// begin status = 3 ;
7969: LD_ADDR_VAR 0 12
7973: PUSH
7974: LD_INT 3
7976: ST_TO_ADDR
// continue ;
7977: GO 7335
// end ; x := GetRememberedX ( unit ) ;
7979: LD_ADDR_VAR 0 6
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 252
7993: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 253
8008: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8009: LD_ADDR_VAR 0 13
8013: PUSH
8014: LD_INT 81
8016: PUSH
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 255
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 92
8033: PUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_VAR 0 7
8043: PUSH
8044: LD_VAR 0 15
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 101
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: ST_TO_ADDR
// if enemy then
8075: LD_VAR 0 13
8079: IFFALSE 8150
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8081: LD_ADDR_VAR 0 14
8085: PUSH
8086: LD_VAR 0 13
8090: PPUSH
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 74
8100: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8101: LD_VAR 0 14
8105: PPUSH
8106: LD_VAR 0 6
8110: PPUSH
8111: LD_VAR 0 7
8115: PPUSH
8116: CALL_OW 297
8120: PUSH
8121: LD_VAR 0 15
8125: PUSH
8126: LD_VAR 0 17
8130: PLUS
8131: LESS
8132: IFFALSE 8148
// ComAttackUnit ( unit , e ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: LD_VAR 0 14
8143: PPUSH
8144: CALL_OW 115
// end else
8148: GO 8167
// begin ComStop ( unit ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: CALL_OW 141
// status = 5 ;
8159: LD_ADDR_VAR 0 12
8163: PUSH
8164: LD_INT 5
8166: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8167: LD_VAR 0 12
8171: PUSH
8172: LD_INT 3
8174: EQUAL
8175: PUSH
8176: LD_VAR 0 16
8180: AND
8181: IFFALSE 8267
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8183: LD_VAR 0 1
8187: PPUSH
8188: LD_VAR 0 16
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: LD_VAR 0 16
8201: PUSH
8202: LD_INT 2
8204: ARRAY
8205: PPUSH
8206: CALL_OW 111
// wait ( 0 0$1 ) ;
8210: LD_INT 35
8212: PPUSH
8213: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8217: LD_VAR 0 1
8221: PPUSH
8222: LD_VAR 0 16
8226: PUSH
8227: LD_INT 1
8229: ARRAY
8230: PPUSH
8231: LD_VAR 0 16
8235: PUSH
8236: LD_INT 2
8238: ARRAY
8239: PPUSH
8240: CALL_OW 297
8244: PUSH
8245: LD_INT 4
8247: LESS
8248: IFFALSE 8183
// ComStop ( unit ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 141
// status = 4 ;
8259: LD_ADDR_VAR 0 12
8263: PUSH
8264: LD_INT 4
8266: ST_TO_ADDR
// end ; if status = 4 then
8267: LD_VAR 0 12
8271: PUSH
8272: LD_INT 4
8274: EQUAL
8275: IFFALSE 8307
// begin repeat wait ( 0 0$1 ) ;
8277: LD_INT 35
8279: PPUSH
8280: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 256
8293: PUSH
8294: LD_INT 1000
8296: EQUAL
8297: IFFALSE 8277
// status = 5 ;
8299: LD_ADDR_VAR 0 12
8303: PUSH
8304: LD_INT 5
8306: ST_TO_ADDR
// end ; if status = 5 then
8307: LD_VAR 0 12
8311: PUSH
8312: LD_INT 5
8314: EQUAL
8315: IFFALSE 8597
// begin p := 999 ;
8317: LD_ADDR_VAR 0 9
8321: PUSH
8322: LD_INT 999
8324: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8325: LD_ADDR_VAR 0 14
8329: PUSH
8330: LD_VAR 0 11
8334: PUSH
8335: LD_INT 2
8337: ARRAY
8338: PUSH
8339: LD_INT 1
8341: ARRAY
8342: PUSH
8343: LD_VAR 0 11
8347: PUSH
8348: LD_INT 2
8350: ARRAY
8351: PUSH
8352: LD_INT 2
8354: ARRAY
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: ST_TO_ADDR
// c := 1 ;
8360: LD_ADDR_VAR 0 8
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8368: LD_ADDR_VAR 0 5
8372: PUSH
8373: DOUBLE
8374: LD_INT 1
8376: DEC
8377: ST_TO_ADDR
8378: LD_VAR 0 11
8382: PUSH
8383: LD_INT 2
8385: ARRAY
8386: PUSH
8387: LD_INT 2
8389: DIV
8390: PUSH
8391: FOR_TO
8392: IFFALSE 8524
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_VAR 0 1
8403: PPUSH
8404: LD_VAR 0 11
8408: PUSH
8409: LD_INT 2
8411: ARRAY
8412: PUSH
8413: LD_VAR 0 8
8417: ARRAY
8418: PPUSH
8419: LD_VAR 0 11
8423: PUSH
8424: LD_INT 2
8426: ARRAY
8427: PUSH
8428: LD_VAR 0 8
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: ARRAY
8437: PPUSH
8438: CALL_OW 297
8442: ST_TO_ADDR
// if x < p then
8443: LD_VAR 0 6
8447: PUSH
8448: LD_VAR 0 9
8452: LESS
8453: IFFALSE 8508
// begin p := x ;
8455: LD_ADDR_VAR 0 9
8459: PUSH
8460: LD_VAR 0 6
8464: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8465: LD_ADDR_VAR 0 14
8469: PUSH
8470: LD_VAR 0 11
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PUSH
8479: LD_VAR 0 8
8483: ARRAY
8484: PUSH
8485: LD_VAR 0 11
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PUSH
8494: LD_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PLUS
8502: ARRAY
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: ST_TO_ADDR
// end ; c = c + 2 ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: LD_VAR 0 8
8517: PUSH
8518: LD_INT 2
8520: PLUS
8521: ST_TO_ADDR
// end ;
8522: GO 8391
8524: POP
8525: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8526: LD_VAR 0 1
8530: PPUSH
8531: LD_VAR 0 14
8535: PUSH
8536: LD_INT 1
8538: ARRAY
8539: PPUSH
8540: LD_VAR 0 14
8544: PUSH
8545: LD_INT 2
8547: ARRAY
8548: PPUSH
8549: CALL_OW 111
// wait ( 0 0$1 ) ;
8553: LD_INT 35
8555: PPUSH
8556: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_VAR 0 14
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PPUSH
8574: LD_VAR 0 14
8578: PUSH
8579: LD_INT 2
8581: ARRAY
8582: PPUSH
8583: CALL_OW 307
8587: IFFALSE 8526
// status = 1 ;
8589: LD_ADDR_VAR 0 12
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 301
8606: IFFALSE 7335
// end ;
8608: LD_VAR 0 4
8612: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8613: LD_INT 0
8615: PPUSH
8616: PPUSH
8617: PPUSH
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
8622: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8623: LD_VAR 0 1
8627: NOT
8628: PUSH
8629: LD_VAR 0 3
8633: NOT
8634: OR
8635: PUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 0
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: IN
8655: NOT
8656: OR
8657: PUSH
8658: LD_VAR 0 6
8662: NOT
8663: OR
8664: PUSH
8665: LD_VAR 0 7
8669: NOT
8670: OR
8671: IFFALSE 8675
// exit ;
8673: GO 9066
// sex_id :=  ;
8675: LD_ADDR_VAR 0 14
8679: PUSH
8680: LD_STRING 
8682: ST_TO_ADDR
// case class of 1 :
8683: LD_VAR 0 5
8687: PUSH
8688: LD_INT 1
8690: DOUBLE
8691: EQUAL
8692: IFTRUE 8696
8694: GO 8707
8696: POP
// class_id := Sol ; 2 :
8697: LD_ADDR_VAR 0 15
8701: PUSH
8702: LD_STRING Sol
8704: ST_TO_ADDR
8705: GO 8765
8707: LD_INT 2
8709: DOUBLE
8710: EQUAL
8711: IFTRUE 8715
8713: GO 8726
8715: POP
// class_id := Eng ; 3 :
8716: LD_ADDR_VAR 0 15
8720: PUSH
8721: LD_STRING Eng
8723: ST_TO_ADDR
8724: GO 8765
8726: LD_INT 3
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 8745
8734: POP
// class_id := Mech ; 4 :
8735: LD_ADDR_VAR 0 15
8739: PUSH
8740: LD_STRING Mech
8742: ST_TO_ADDR
8743: GO 8765
8745: LD_INT 4
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8764
8753: POP
// class_id := Sci ; end ;
8754: LD_ADDR_VAR 0 15
8758: PUSH
8759: LD_STRING Sci
8761: ST_TO_ADDR
8762: GO 8765
8764: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8765: LD_ADDR_VAR 0 11
8769: PUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 25
8777: PUSH
8778: LD_VAR 0 5
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PPUSH
8787: CALL_OW 72
8791: ST_TO_ADDR
// if tmp then
8792: LD_VAR 0 11
8796: IFFALSE 8808
// units := tmp ;
8798: LD_ADDR_VAR 0 1
8802: PUSH
8803: LD_VAR 0 11
8807: ST_TO_ADDR
// if sex then
8808: LD_VAR 0 4
8812: IFFALSE 8868
// begin if sex = sex_female then
8814: LD_VAR 0 4
8818: PUSH
8819: LD_INT 2
8821: EQUAL
8822: IFFALSE 8832
// sex_id := F ;
8824: LD_ADDR_VAR 0 14
8828: PUSH
8829: LD_STRING F
8831: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8832: LD_ADDR_VAR 0 1
8836: PUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_INT 26
8844: PUSH
8845: LD_VAR 0 4
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PPUSH
8854: CALL_OW 72
8858: ST_TO_ADDR
// if not units then
8859: LD_VAR 0 1
8863: NOT
8864: IFFALSE 8868
// exit ;
8866: GO 9066
// end ; unit_id := id ;
8868: LD_ADDR_VAR 0 12
8872: PUSH
8873: LD_VAR 0 6
8877: ST_TO_ADDR
// if unit_id > units then
8878: LD_VAR 0 12
8882: PUSH
8883: LD_VAR 0 1
8887: GREATER
8888: IFFALSE 8898
// unit_id := 1 ;
8890: LD_ADDR_VAR 0 12
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// if not units [ unit_id ] then
8898: LD_VAR 0 1
8902: PUSH
8903: LD_VAR 0 12
8907: ARRAY
8908: NOT
8909: IFFALSE 8913
// exit ;
8911: GO 9066
// unit := units [ unit_id ] ;
8913: LD_ADDR_VAR 0 10
8917: PUSH
8918: LD_VAR 0 1
8922: PUSH
8923: LD_VAR 0 12
8927: ARRAY
8928: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8929: LD_ADDR_VAR 0 13
8933: PUSH
8934: LD_STRING D
8936: PUSH
8937: LD_VAR 0 3
8941: STR
8942: PUSH
8943: LD_STRING -
8945: STR
8946: PUSH
8947: LD_VAR 0 14
8951: STR
8952: PUSH
8953: LD_VAR 0 15
8957: STR
8958: PUSH
8959: LD_VAR 0 6
8963: STR
8964: PUSH
8965: LD_STRING -
8967: STR
8968: PUSH
8969: LD_VAR 0 7
8973: STR
8974: ST_TO_ADDR
// case type of 0 :
8975: LD_VAR 0 2
8979: PUSH
8980: LD_INT 0
8982: DOUBLE
8983: EQUAL
8984: IFTRUE 8988
8986: GO 9005
8988: POP
// Say ( unit , dialog_id ) ; 1 :
8989: LD_VAR 0 10
8993: PPUSH
8994: LD_VAR 0 13
8998: PPUSH
8999: CALL_OW 88
9003: GO 9056
9005: LD_INT 1
9007: DOUBLE
9008: EQUAL
9009: IFTRUE 9013
9011: GO 9030
9013: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9014: LD_VAR 0 10
9018: PPUSH
9019: LD_VAR 0 13
9023: PPUSH
9024: CALL_OW 94
9028: GO 9056
9030: LD_INT 2
9032: DOUBLE
9033: EQUAL
9034: IFTRUE 9038
9036: GO 9055
9038: POP
// ForceSay ( unit , dialog_id ) ; end ;
9039: LD_VAR 0 10
9043: PPUSH
9044: LD_VAR 0 13
9048: PPUSH
9049: CALL_OW 91
9053: GO 9056
9055: POP
// result := unit ;
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: LD_VAR 0 10
9065: ST_TO_ADDR
// end ;
9066: LD_VAR 0 8
9070: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9071: LD_INT 0
9073: PPUSH
9074: PPUSH
9075: PPUSH
// result := false ;
9076: LD_ADDR_VAR 0 4
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9084: LD_VAR 0 1
9088: NOT
9089: PUSH
9090: LD_VAR 0 2
9094: NOT
9095: OR
9096: PUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 310
9106: OR
9107: IFFALSE 9111
// exit ;
9109: GO 9315
// if distance < 0 then
9111: LD_VAR 0 3
9115: PUSH
9116: LD_INT 0
9118: LESS
9119: IFFALSE 9129
// distance := 0 ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9129: LD_ADDR_VAR 0 6
9133: PUSH
9134: LD_VAR 0 2
9138: PPUSH
9139: CALL_OW 266
9143: PPUSH
9144: LD_VAR 0 2
9148: PPUSH
9149: CALL_OW 250
9153: PPUSH
9154: LD_VAR 0 2
9158: PPUSH
9159: CALL_OW 251
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 254
9173: PPUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 248
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: CALL 50709 0 6
9191: ST_TO_ADDR
// if not entrance then
9192: LD_VAR 0 6
9196: NOT
9197: IFFALSE 9201
// exit ;
9199: GO 9315
// for i in entrance do
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: LD_VAR 0 6
9210: PUSH
9211: FOR_IN
9212: IFFALSE 9313
// begin if not distance then
9214: LD_VAR 0 3
9218: NOT
9219: IFFALSE 9264
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_VAR 0 5
9230: PUSH
9231: LD_INT 1
9233: ARRAY
9234: PPUSH
9235: LD_VAR 0 5
9239: PUSH
9240: LD_INT 2
9242: ARRAY
9243: PPUSH
9244: CALL_OW 307
9248: IFFALSE 9262
// begin result := true ;
9250: LD_ADDR_VAR 0 4
9254: PUSH
9255: LD_INT 1
9257: ST_TO_ADDR
// exit ;
9258: POP
9259: POP
9260: GO 9315
// end ; end else
9262: GO 9311
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9264: LD_VAR 0 1
9268: PPUSH
9269: LD_VAR 0 5
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: LD_VAR 0 5
9282: PUSH
9283: LD_INT 2
9285: ARRAY
9286: PPUSH
9287: CALL_OW 297
9291: PUSH
9292: LD_VAR 0 3
9296: LESSEQUAL
9297: IFFALSE 9311
// begin result := true ;
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// exit ;
9307: POP
9308: POP
9309: GO 9315
// end ; end ; end ;
9311: GO 9211
9313: POP
9314: POP
// end ;
9315: LD_VAR 0 4
9319: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9320: LD_INT 0
9322: PPUSH
9323: PPUSH
9324: PPUSH
// result := false ;
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: LD_INT 0
9332: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9333: LD_VAR 0 1
9337: NOT
9338: PUSH
9339: LD_VAR 0 2
9343: NOT
9344: OR
9345: PUSH
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 302
9355: NOT
9356: OR
9357: PUSH
9358: LD_VAR 0 2
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: OR
9369: IFFALSE 9373
// exit ;
9371: GO 9534
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 81
9380: PUSH
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 255
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 3
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 69
9420: PPUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 74
9430: PPUSH
9431: CALL_OW 296
9435: PUSH
9436: LD_INT 8
9438: LESS
9439: IFFALSE 9443
// exit ;
9441: GO 9534
// building := IsInUnit ( unit2 ) ;
9443: LD_ADDR_VAR 0 5
9447: PUSH
9448: LD_VAR 0 2
9452: PPUSH
9453: CALL_OW 310
9457: ST_TO_ADDR
// if building then
9458: LD_VAR 0 5
9462: IFFALSE 9489
// result := IsNearbyEntrance ( unit , building , 2 ) else
9464: LD_ADDR_VAR 0 3
9468: PUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: LD_VAR 0 5
9478: PPUSH
9479: LD_INT 2
9481: PPUSH
9482: CALL 9071 0 3
9486: ST_TO_ADDR
9487: GO 9534
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: LD_VAR 0 1
9498: PPUSH
9499: LD_VAR 0 2
9503: PPUSH
9504: CALL_OW 296
9508: PUSH
9509: LD_INT 6
9511: LESS
9512: PUSH
9513: LD_VAR 0 2
9517: PPUSH
9518: CALL_OW 255
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 292
9532: AND
9533: ST_TO_ADDR
// end ;
9534: LD_VAR 0 3
9538: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9539: LD_INT 0
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
// uc_side = 0 ;
9545: LD_ADDR_OWVAR 20
9549: PUSH
9550: LD_INT 0
9552: ST_TO_ADDR
// uc_nation = 0 ;
9553: LD_ADDR_OWVAR 21
9557: PUSH
9558: LD_INT 0
9560: ST_TO_ADDR
// nat_area := nature_area ;
9561: LD_ADDR_VAR 0 4
9565: PUSH
9566: LD_INT 24
9568: ST_TO_ADDR
// InitHc ;
9569: CALL_OW 19
// for i = 1 to 4 do
9573: LD_ADDR_VAR 0 2
9577: PUSH
9578: DOUBLE
9579: LD_INT 1
9581: DEC
9582: ST_TO_ADDR
9583: LD_INT 4
9585: PUSH
9586: FOR_TO
9587: IFFALSE 9634
// begin hc_class = 18 ;
9589: LD_ADDR_OWVAR 28
9593: PUSH
9594: LD_INT 18
9596: ST_TO_ADDR
// hc_gallery =  ;
9597: LD_ADDR_OWVAR 33
9601: PUSH
9602: LD_STRING 
9604: ST_TO_ADDR
// animal := CreateHuman ;
9605: LD_ADDR_VAR 0 3
9609: PUSH
9610: CALL_OW 44
9614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9615: LD_VAR 0 3
9619: PPUSH
9620: LD_VAR 0 4
9624: PPUSH
9625: LD_INT 0
9627: PPUSH
9628: CALL_OW 49
// end ;
9632: GO 9586
9634: POP
9635: POP
// for i = 1 to 3 do
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: DOUBLE
9642: LD_INT 1
9644: DEC
9645: ST_TO_ADDR
9646: LD_INT 3
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9744
// begin hc_class = class_apeman ;
9652: LD_ADDR_OWVAR 28
9656: PUSH
9657: LD_INT 12
9659: ST_TO_ADDR
// hc_gallery =  ;
9660: LD_ADDR_OWVAR 33
9664: PUSH
9665: LD_STRING 
9667: ST_TO_ADDR
// hc_agressivity = 0 ;
9668: LD_ADDR_OWVAR 35
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9676: LD_ADDR_OWVAR 31
9680: PUSH
9681: LD_INT 1
9683: PPUSH
9684: LD_INT 3
9686: PPUSH
9687: CALL_OW 12
9691: PUSH
9692: LD_INT 1
9694: PPUSH
9695: LD_INT 3
9697: PPUSH
9698: CALL_OW 12
9702: PUSH
9703: LD_INT 0
9705: PUSH
9706: LD_INT 0
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: ST_TO_ADDR
// animal := CreateHuman ;
9715: LD_ADDR_VAR 0 3
9719: PUSH
9720: CALL_OW 44
9724: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: LD_INT 0
9737: PPUSH
9738: CALL_OW 49
// end ;
9742: GO 9649
9744: POP
9745: POP
// for i = 1 to 3 do
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: DOUBLE
9752: LD_INT 1
9754: DEC
9755: ST_TO_ADDR
9756: LD_INT 3
9758: PUSH
9759: FOR_TO
9760: IFFALSE 9807
// begin hc_class = 13 ;
9762: LD_ADDR_OWVAR 28
9766: PUSH
9767: LD_INT 13
9769: ST_TO_ADDR
// hc_gallery =  ;
9770: LD_ADDR_OWVAR 33
9774: PUSH
9775: LD_STRING 
9777: ST_TO_ADDR
// animal := CreateHuman ;
9778: LD_ADDR_VAR 0 3
9782: PUSH
9783: CALL_OW 44
9787: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_VAR 0 4
9797: PPUSH
9798: LD_INT 0
9800: PPUSH
9801: CALL_OW 49
// end ;
9805: GO 9759
9807: POP
9808: POP
// for i = 1 to 3 do
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: DOUBLE
9815: LD_INT 1
9817: DEC
9818: ST_TO_ADDR
9819: LD_INT 3
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9868
// begin hc_class = 20 ;
9825: LD_ADDR_OWVAR 28
9829: PUSH
9830: LD_INT 20
9832: ST_TO_ADDR
// hc_gallery =  ;
9833: LD_ADDR_OWVAR 33
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// animal := CreateHuman ;
9841: LD_ADDR_VAR 0 3
9845: PUSH
9846: CALL_OW 44
9850: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 4
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: CALL_OW 49
// end ;
9866: GO 9822
9868: POP
9869: POP
// end ; end_of_file
9870: LD_VAR 0 1
9874: RET
// export function Action ; begin
9875: LD_INT 0
9877: PPUSH
// InGameOn ;
9878: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9882: LD_EXP 15
9886: PPUSH
9887: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9891: LD_EXP 15
9895: PPUSH
9896: LD_STRING D1-JMM-1
9898: PPUSH
9899: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9903: LD_EXP 16
9907: PPUSH
9908: LD_STRING D1-Roth-1
9910: PPUSH
9911: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9915: LD_EXP 15
9919: PPUSH
9920: LD_STRING D1-JMM-2
9922: PPUSH
9923: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9927: LD_EXP 16
9931: PPUSH
9932: LD_STRING D1-Roth-2
9934: PPUSH
9935: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9939: LD_EXP 15
9943: PPUSH
9944: LD_STRING D1-JMM-3
9946: PPUSH
9947: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9951: LD_EXP 16
9955: PPUSH
9956: LD_STRING D1-Roth-3
9958: PPUSH
9959: CALL_OW 88
// ComInvisible ( Roth ) ;
9963: LD_EXP 16
9967: PPUSH
9968: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9972: LD_INT 46
9974: PPUSH
9975: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9979: LD_EXP 15
9983: PPUSH
9984: LD_STRING D1-JMM-4
9986: PPUSH
9987: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9991: LD_INT 10
9993: PPUSH
9994: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9998: LD_EXP 16
10002: PPUSH
10003: LD_EXP 15
10007: PPUSH
10008: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
10012: LD_EXP 15
10016: PPUSH
10017: LD_STRING D1-JMM-4a
10019: PPUSH
10020: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
10024: LD_EXP 16
10028: PPUSH
10029: LD_STRING D1-Roth-4
10031: PPUSH
10032: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-JMM-5
10043: PPUSH
10044: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10048: LD_EXP 16
10052: PPUSH
10053: LD_STRING D1-Roth-5
10055: PPUSH
10056: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10060: LD_EXP 15
10064: PPUSH
10065: LD_STRING D1-JMM-6
10067: PPUSH
10068: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10072: LD_EXP 16
10076: PPUSH
10077: LD_STRING D1-Roth-6
10079: PPUSH
10080: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10084: LD_EXP 15
10088: PPUSH
10089: LD_STRING D1-JMM-7
10091: PPUSH
10092: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10096: LD_EXP 17
10100: PPUSH
10101: LD_EXP 15
10105: PPUSH
10106: CALL_OW 250
10110: PPUSH
10111: LD_EXP 15
10115: PPUSH
10116: CALL_OW 251
10120: PPUSH
10121: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10125: LD_EXP 16
10129: PPUSH
10130: LD_STRING D1-Roth-7
10132: PPUSH
10133: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10144: LD_EXP 17
10148: PPUSH
10149: LD_EXP 15
10153: PPUSH
10154: CALL_OW 296
10158: PUSH
10159: LD_INT 6
10161: LESS
10162: IFFALSE 10137
// ComTurnUnit ( Powell , JMM ) ;
10164: LD_EXP 17
10168: PPUSH
10169: LD_EXP 15
10173: PPUSH
10174: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10178: LD_EXP 17
10182: PPUSH
10183: LD_STRING D1-Pow-7
10185: PPUSH
10186: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10190: LD_EXP 15
10194: PPUSH
10195: LD_EXP 17
10199: PPUSH
10200: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10204: LD_EXP 16
10208: PPUSH
10209: LD_EXP 17
10213: PPUSH
10214: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10218: LD_EXP 15
10222: PPUSH
10223: LD_STRING D1-JMM-8
10225: PPUSH
10226: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10230: LD_EXP 17
10234: PPUSH
10235: LD_STRING D1-Pow-8
10237: PPUSH
10238: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10242: LD_EXP 15
10246: PPUSH
10247: LD_STRING D1-JMM-9
10249: PPUSH
10250: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10254: LD_EXP 17
10258: PPUSH
10259: LD_INT 124
10261: PPUSH
10262: LD_INT 61
10264: PPUSH
10265: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10269: LD_INT 35
10271: PPUSH
10272: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10276: LD_EXP 15
10280: PPUSH
10281: LD_EXP 17
10285: PPUSH
10286: CALL_OW 296
10290: PUSH
10291: LD_INT 6
10293: GREATER
10294: IFFALSE 10269
// SayRadio ( Powell , D1-Pow-9 ) ;
10296: LD_EXP 17
10300: PPUSH
10301: LD_STRING D1-Pow-9
10303: PPUSH
10304: CALL_OW 94
// RemoveUnit ( Powell ) ;
10308: LD_EXP 17
10312: PPUSH
10313: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10317: LD_EXP 17
10321: PPUSH
10322: LD_INT 18
10324: PPUSH
10325: CALL_OW 52
// if Joan and not Joan in selected then
10329: LD_EXP 37
10333: PUSH
10334: LD_EXP 37
10338: PUSH
10339: LD_EXP 3
10343: IN
10344: NOT
10345: AND
10346: IFFALSE 10360
// SayRadio ( Joan , D1-Joan-9 ) ;
10348: LD_EXP 37
10352: PPUSH
10353: LD_STRING D1-Joan-9
10355: PPUSH
10356: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10360: LD_EXP 16
10364: PPUSH
10365: LD_EXP 15
10369: PPUSH
10370: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10374: LD_EXP 15
10378: PPUSH
10379: LD_EXP 16
10383: PPUSH
10384: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10388: LD_EXP 16
10392: PPUSH
10393: LD_STRING D1-Roth-9
10395: PPUSH
10396: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10400: LD_EXP 15
10404: PPUSH
10405: LD_STRING D1-JMM-10
10407: PPUSH
10408: CALL_OW 88
// InGameOff ;
10412: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10416: LD_STRING M1
10418: PPUSH
10419: CALL_OW 337
// if Difficulty < 3 then
10423: LD_OWVAR 67
10427: PUSH
10428: LD_INT 3
10430: LESS
10431: IFFALSE 10443
// ChangeSideFog ( 4 , 7 ) ;
10433: LD_INT 4
10435: PPUSH
10436: LD_INT 7
10438: PPUSH
10439: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10443: LD_STRING enableBioCharacter(BIO_ROTH)
10445: PPUSH
10446: CALL_OW 559
// SaveForQuickRestart ;
10450: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10454: LD_INT 7
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 80
// wait ( 0 0$3 ) ;
10470: LD_INT 105
10472: PPUSH
10473: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10477: LD_EXP 16
10481: PPUSH
10482: LD_INT 124
10484: PPUSH
10485: LD_INT 18
10487: PPUSH
10488: CALL_OW 111
// AddComInvisible ( Roth ) ;
10492: LD_EXP 16
10496: PPUSH
10497: CALL_OW 212
// wait ( 0 0$30 ) ;
10501: LD_INT 1050
10503: PPUSH
10504: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10508: LD_EXP 16
10512: PPUSH
10513: LD_INT 2100
10515: PPUSH
10516: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10520: LD_EXP 16
10524: PPUSH
10525: LD_INT 156
10527: PPUSH
10528: LD_INT 20
10530: PPUSH
10531: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10535: LD_EXP 16
10539: PPUSH
10540: LD_INT 178
10542: PPUSH
10543: LD_INT 42
10545: PPUSH
10546: CALL_OW 171
// AddComInvisible ( Roth ) ;
10550: LD_EXP 16
10554: PPUSH
10555: CALL_OW 212
// end ;
10559: LD_VAR 0 1
10563: RET
// every 0 0$1 do var i , tmp ;
10564: GO 10566
10566: DISABLE
10567: LD_INT 0
10569: PPUSH
10570: PPUSH
// begin tmp := selected union friends ;
10571: LD_ADDR_VAR 0 2
10575: PUSH
10576: LD_EXP 3
10580: PUSH
10581: LD_EXP 4
10585: UNION
10586: ST_TO_ADDR
// if gamma_commander = 1 then
10587: LD_EXP 10
10591: PUSH
10592: LD_INT 1
10594: EQUAL
10595: IFFALSE 10613
// tmp := tmp union Donaldson ;
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_VAR 0 2
10606: PUSH
10607: LD_EXP 25
10611: UNION
10612: ST_TO_ADDR
// if gamma_commander = 2 then
10613: LD_EXP 10
10617: PUSH
10618: LD_INT 2
10620: EQUAL
10621: IFFALSE 10639
// tmp := tmp union Brown ;
10623: LD_ADDR_VAR 0 2
10627: PUSH
10628: LD_VAR 0 2
10632: PUSH
10633: LD_EXP 29
10637: UNION
10638: ST_TO_ADDR
// if not tmp then
10639: LD_VAR 0 2
10643: NOT
10644: IFFALSE 10648
// exit ;
10646: GO 10720
// repeat wait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 67
// for i in tmp do
10655: LD_ADDR_VAR 0 1
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: FOR_IN
10666: IFFALSE 10711
// if CanSpot ( JMM , i ) then
10668: LD_EXP 15
10672: PPUSH
10673: LD_VAR 0 1
10677: PPUSH
10678: CALL 9320 0 2
10682: IFFALSE 10709
// begin tmp := tmp diff i ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: DIFF
10699: ST_TO_ADDR
// Spot ( i ) ;
10700: LD_VAR 0 1
10704: PPUSH
10705: CALL 10723 0 1
// end ;
10709: GO 10665
10711: POP
10712: POP
// until not tmp ;
10713: LD_VAR 0 2
10717: NOT
10718: IFFALSE 10648
// end ;
10720: PPOPN 2
10722: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10723: LD_INT 0
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10729: LD_VAR 0 1
10733: NOT
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PUSH
10745: LD_INT 4
10747: NONEQUAL
10748: OR
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 555
10759: OR
10760: PUSH
10761: LD_VAR 0 1
10765: PPUSH
10766: CALL_OW 302
10770: NOT
10771: OR
10772: IFFALSE 10776
// exit ;
10774: GO 12686
// InGameOn ;
10776: CALL_OW 8
// side := 7 ;
10780: LD_ADDR_VAR 0 4
10784: PUSH
10785: LD_INT 7
10787: ST_TO_ADDR
// joined := false ;
10788: LD_ADDR_VAR 0 5
10792: PUSH
10793: LD_INT 0
10795: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 310
10810: ST_TO_ADDR
// if building then
10811: LD_VAR 0 3
10815: IFFALSE 10874
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10817: LD_EXP 15
10821: PPUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: CALL_OW 255
10831: PPUSH
10832: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10836: LD_EXP 15
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: CALL_OW 120
// repeat wait ( 3 ) ;
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 67
// until IsInUnit ( JMM ) ;
10857: LD_EXP 15
10861: PPUSH
10862: CALL_OW 310
10866: IFFALSE 10850
// DialogueOn ;
10868: CALL_OW 6
// end else
10872: GO 10906
// begin ComTurnUnit ( JMM , unit ) ;
10874: LD_EXP 15
10878: PPUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10888: LD_VAR 0 1
10892: PPUSH
10893: LD_EXP 15
10897: PPUSH
10898: CALL_OW 119
// DialogueOn ;
10902: CALL_OW 6
// end ; if unit = Joan then
10906: LD_VAR 0 1
10910: PUSH
10911: LD_EXP 37
10915: EQUAL
10916: IFFALSE 11026
// begin joined := true ;
10918: LD_ADDR_VAR 0 5
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if Joan in selected then
10926: LD_EXP 37
10930: PUSH
10931: LD_EXP 3
10935: IN
10936: IFFALSE 10964
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10938: LD_EXP 37
10942: PPUSH
10943: LD_STRING D3-Joan-Joan-1
10945: PPUSH
10946: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10950: LD_EXP 15
10954: PPUSH
10955: LD_STRING D3-Joan-JMM-1
10957: PPUSH
10958: CALL_OW 88
// end else
10962: GO 11024
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10964: LD_EXP 37
10968: PPUSH
10969: LD_STRING D4-Joan-Joan-1
10971: PPUSH
10972: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10976: LD_EXP 15
10980: PPUSH
10981: LD_STRING D4-Joan-JMM-1
10983: PPUSH
10984: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10988: LD_EXP 37
10992: PPUSH
10993: LD_STRING D4-Joan-Joan-2
10995: PPUSH
10996: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
11000: LD_EXP 15
11004: PPUSH
11005: LD_STRING D4-Joan-JMM-2
11007: PPUSH
11008: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
11012: LD_EXP 37
11016: PPUSH
11017: LD_STRING D4-Joan-Joan-3
11019: PPUSH
11020: CALL_OW 88
// end ; end else
11024: GO 12494
// if unit = Lisa then
11026: LD_VAR 0 1
11030: PUSH
11031: LD_EXP 24
11035: EQUAL
11036: IFFALSE 11228
// begin if Lisa in selected then
11038: LD_EXP 24
11042: PUSH
11043: LD_EXP 3
11047: IN
11048: IFFALSE 11161
// begin if GetSide ( Joan ) = 7 then
11050: LD_EXP 37
11054: PPUSH
11055: CALL_OW 255
11059: PUSH
11060: LD_INT 7
11062: EQUAL
11063: IFFALSE 11127
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11065: LD_EXP 24
11069: PPUSH
11070: LD_STRING D3-LisaJ-Lisa-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11077: LD_EXP 15
11081: PPUSH
11082: LD_STRING D3-LisaJ-JMM-1
11084: PPUSH
11085: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11089: LD_EXP 24
11093: PPUSH
11094: LD_STRING D3-LisaJ-Lisa-2
11096: PPUSH
11097: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11101: LD_EXP 15
11105: PPUSH
11106: LD_STRING D3-LisaJ-JMM-2
11108: PPUSH
11109: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11113: LD_EXP 24
11117: PPUSH
11118: LD_STRING D3-LisaJ-Lisa-3
11120: PPUSH
11121: CALL_OW 88
// end else
11125: GO 11159
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11127: LD_EXP 24
11131: PPUSH
11132: LD_STRING D3-LisaL-Lisa-1
11134: PPUSH
11135: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11139: LD_EXP 15
11143: PPUSH
11144: LD_STRING D3-LisaL-JMM-1
11146: PPUSH
11147: CALL_OW 88
// joined := true ;
11151: LD_ADDR_VAR 0 5
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// end ; end else
11159: GO 11226
// begin if GetSide ( Joan ) = 7 then
11161: LD_EXP 37
11165: PPUSH
11166: CALL_OW 255
11170: PUSH
11171: LD_INT 7
11173: EQUAL
11174: IFFALSE 11214
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11176: LD_EXP 24
11180: PPUSH
11181: LD_STRING D4-LisaJ-Lisa-1
11183: PPUSH
11184: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11188: LD_EXP 15
11192: PPUSH
11193: LD_STRING D4-LisaJ-JMM-1
11195: PPUSH
11196: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11200: LD_EXP 24
11204: PPUSH
11205: LD_STRING D4-LisaJ-Lisa-2
11207: PPUSH
11208: CALL_OW 88
// end else
11212: GO 11226
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11214: LD_EXP 24
11218: PPUSH
11219: LD_STRING D4-LisaL-Lisa-1
11221: PPUSH
11222: CALL_OW 88
// end ; end ; end else
11226: GO 12494
// if unit = Frank then
11228: LD_VAR 0 1
11232: PUSH
11233: LD_EXP 34
11237: EQUAL
11238: IFFALSE 11378
// begin joined := true ;
11240: LD_ADDR_VAR 0 5
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// if Frank in selected then
11248: LD_EXP 34
11252: PUSH
11253: LD_EXP 3
11257: IN
11258: IFFALSE 11328
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11260: LD_EXP 34
11264: PPUSH
11265: LD_STRING D3-Frank-Frank-1
11267: PPUSH
11268: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11272: LD_EXP 15
11276: PPUSH
11277: LD_STRING D3-Frank-JMM-1
11279: PPUSH
11280: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11284: LD_EXP 34
11288: PPUSH
11289: LD_STRING D3-Frank-Frank-2
11291: PPUSH
11292: CALL_OW 88
// if reached_lab then
11296: LD_EXP 5
11300: IFFALSE 11326
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11302: LD_EXP 15
11306: PPUSH
11307: LD_STRING D3-Frank-JMM-2
11309: PPUSH
11310: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11314: LD_EXP 34
11318: PPUSH
11319: LD_STRING D3-Frank-Frank-3
11321: PPUSH
11322: CALL_OW 88
// end ; end else
11326: GO 11376
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11328: LD_EXP 34
11332: PPUSH
11333: LD_STRING D4-Frank-Frank-1
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11340: LD_EXP 15
11344: PPUSH
11345: LD_STRING D4-Frank-JMM-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11352: LD_EXP 34
11356: PPUSH
11357: LD_STRING D4-Frank-Frank-2
11359: PPUSH
11360: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11364: LD_EXP 15
11368: PPUSH
11369: LD_STRING D4-Frank-JMM-2
11371: PPUSH
11372: CALL_OW 88
// end ; end else
11376: GO 12494
// if unit = Brown then
11378: LD_VAR 0 1
11382: PUSH
11383: LD_EXP 29
11387: EQUAL
11388: IFFALSE 11484
// begin if Brown in selected or gamma_commander = 2 then
11390: LD_EXP 29
11394: PUSH
11395: LD_EXP 3
11399: IN
11400: PUSH
11401: LD_EXP 10
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: OR
11410: IFFALSE 11446
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11412: LD_EXP 29
11416: PPUSH
11417: LD_STRING D3-Soldier1-Sol1-1
11419: PPUSH
11420: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11424: LD_EXP 15
11428: PPUSH
11429: LD_STRING D6-JMM-Brown-1
11431: PPUSH
11432: CALL_OW 88
// joined := true ;
11436: LD_ADDR_VAR 0 5
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// end else
11444: GO 11482
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11446: LD_EXP 29
11450: PPUSH
11451: LD_STRING D4-Soldier2-Sol1-1
11453: PPUSH
11454: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11458: LD_EXP 15
11462: PPUSH
11463: LD_STRING D4-Soldier1-JMM-1
11465: PPUSH
11466: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11470: LD_EXP 29
11474: PPUSH
11475: LD_STRING D4-Soldier2-Sol1-2
11477: PPUSH
11478: CALL_OW 88
// end ; end else
11482: GO 12494
// if unit = Donaldson then
11484: LD_VAR 0 1
11488: PUSH
11489: LD_EXP 25
11493: EQUAL
11494: IFFALSE 11590
// begin if Donaldson in selected or gamma_commander = 1 then
11496: LD_EXP 25
11500: PUSH
11501: LD_EXP 3
11505: IN
11506: PUSH
11507: LD_EXP 10
11511: PUSH
11512: LD_INT 1
11514: EQUAL
11515: OR
11516: IFFALSE 11552
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11518: LD_EXP 25
11522: PPUSH
11523: LD_STRING D3-Soldier2-FSol2-1
11525: PPUSH
11526: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11530: LD_EXP 15
11534: PPUSH
11535: LD_STRING D3-Soldier2-JMM-1
11537: PPUSH
11538: CALL_OW 88
// joined := true ;
11542: LD_ADDR_VAR 0 5
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// end else
11550: GO 11588
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11552: LD_EXP 25
11556: PPUSH
11557: LD_STRING D4-Soldier1-FSol1-1
11559: PPUSH
11560: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11564: LD_EXP 15
11568: PPUSH
11569: LD_STRING D4-Soldier1-JMM-1
11571: PPUSH
11572: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11576: LD_EXP 25
11580: PPUSH
11581: LD_STRING D4-Soldier1-FSol1-2
11583: PPUSH
11584: CALL_OW 88
// end ; end else
11588: GO 12494
// if unit = Cyrus then
11590: LD_VAR 0 1
11594: PUSH
11595: LD_EXP 27
11599: EQUAL
11600: IFFALSE 11674
// begin if Cyrus in selected then
11602: LD_EXP 27
11606: PUSH
11607: LD_EXP 3
11611: IN
11612: IFFALSE 11648
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11614: LD_EXP 27
11618: PPUSH
11619: LD_STRING D3-Cyrus-Cyrus-1
11621: PPUSH
11622: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11626: LD_EXP 15
11630: PPUSH
11631: LD_STRING D3-Cyrus-JMM-1
11633: PPUSH
11634: CALL_OW 88
// joined := true ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// end else
11646: GO 11672
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11648: LD_EXP 27
11652: PPUSH
11653: LD_STRING D4-Cyrus-Cyrus-1
11655: PPUSH
11656: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11660: LD_EXP 15
11664: PPUSH
11665: LD_STRING D4-Cyrus-JMM-1
11667: PPUSH
11668: CALL_OW 88
// end ; end else
11672: GO 12494
// if unit = Bobby then
11674: LD_VAR 0 1
11678: PUSH
11679: LD_EXP 26
11683: EQUAL
11684: IFFALSE 11770
// begin if Bobby in selected then
11686: LD_EXP 26
11690: PUSH
11691: LD_EXP 3
11695: IN
11696: IFFALSE 11732
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11698: LD_EXP 26
11702: PPUSH
11703: LD_STRING D3-Bobby-Bobby-1
11705: PPUSH
11706: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11710: LD_EXP 15
11714: PPUSH
11715: LD_STRING D3-Bobby-JMM-1
11717: PPUSH
11718: CALL_OW 88
// joined := true ;
11722: LD_ADDR_VAR 0 5
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// end else
11730: GO 11768
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11732: LD_EXP 26
11736: PPUSH
11737: LD_STRING D4-Bobby-Bobby-1
11739: PPUSH
11740: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11744: LD_EXP 15
11748: PPUSH
11749: LD_STRING D4-Bobby-JMM-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11756: LD_EXP 26
11760: PPUSH
11761: LD_STRING D4-Bobby-Bobby-2
11763: PPUSH
11764: CALL_OW 88
// end ; end else
11768: GO 12494
// if unit = Cornel then
11770: LD_VAR 0 1
11774: PUSH
11775: LD_EXP 32
11779: EQUAL
11780: IFFALSE 11878
// begin if Cornel in selected then
11782: LD_EXP 32
11786: PUSH
11787: LD_EXP 3
11791: IN
11792: IFFALSE 11840
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11794: LD_EXP 32
11798: PPUSH
11799: LD_STRING D3-Mark-Corn-1
11801: PPUSH
11802: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11806: LD_EXP 15
11810: PPUSH
11811: LD_STRING D3-Mark-JMM-1
11813: PPUSH
11814: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11818: LD_EXP 32
11822: PPUSH
11823: LD_STRING D3-Mark-Corn-2
11825: PPUSH
11826: CALL_OW 88
// joined := true ;
11830: LD_ADDR_VAR 0 5
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// end else
11838: GO 11876
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11840: LD_EXP 32
11844: PPUSH
11845: LD_STRING D4-Mark-Corn-1
11847: PPUSH
11848: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11852: LD_EXP 15
11856: PPUSH
11857: LD_STRING D4-Mark-JMM-1
11859: PPUSH
11860: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11864: LD_EXP 32
11868: PPUSH
11869: LD_STRING D4-Mark-Corn-2
11871: PPUSH
11872: CALL_OW 88
// end ; end else
11876: GO 12494
// if unit = Gary then
11878: LD_VAR 0 1
11882: PUSH
11883: LD_EXP 33
11887: EQUAL
11888: IFFALSE 11986
// begin if Gary in selected then
11890: LD_EXP 33
11894: PUSH
11895: LD_EXP 3
11899: IN
11900: IFFALSE 11936
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11902: LD_EXP 33
11906: PPUSH
11907: LD_STRING D3-Gary-Gary-1
11909: PPUSH
11910: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11914: LD_EXP 15
11918: PPUSH
11919: LD_STRING D3-Gary-JMM-1
11921: PPUSH
11922: CALL_OW 88
// joined := true ;
11926: LD_ADDR_VAR 0 5
11930: PUSH
11931: LD_INT 1
11933: ST_TO_ADDR
// end else
11934: GO 11984
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11936: LD_EXP 33
11940: PPUSH
11941: LD_STRING D4-Gary-Gary-1
11943: PPUSH
11944: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11948: LD_EXP 33
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 235
// DialogueOff ;
11960: CALL_OW 7
// InGameOff ;
11964: CALL_OW 9
// SetSide ( JMM , side ) ;
11968: LD_EXP 15
11972: PPUSH
11973: LD_VAR 0 4
11977: PPUSH
11978: CALL_OW 235
// exit ;
11982: GO 12686
// end ; end else
11984: GO 12494
// if unit = Kikuchi then
11986: LD_VAR 0 1
11990: PUSH
11991: LD_EXP 35
11995: EQUAL
11996: IFFALSE 12094
// begin if Kikuchi in selected then
11998: LD_EXP 35
12002: PUSH
12003: LD_EXP 3
12007: IN
12008: IFFALSE 12044
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
12010: LD_EXP 35
12014: PPUSH
12015: LD_STRING D3-Yamako-Yam-1
12017: PPUSH
12018: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12022: LD_EXP 15
12026: PPUSH
12027: LD_STRING D3-Soldier2-JMM-1
12029: PPUSH
12030: CALL_OW 88
// joined := true ;
12034: LD_ADDR_VAR 0 5
12038: PUSH
12039: LD_INT 1
12041: ST_TO_ADDR
// end else
12042: GO 12092
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
12044: LD_EXP 35
12048: PPUSH
12049: LD_STRING D4-Yamako-Yam-1
12051: PPUSH
12052: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12056: LD_EXP 35
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 235
// DialogueOff ;
12068: CALL_OW 7
// InGameOff ;
12072: CALL_OW 9
// SetSide ( JMM , side ) ;
12076: LD_EXP 15
12080: PPUSH
12081: LD_VAR 0 4
12085: PPUSH
12086: CALL_OW 235
// exit ;
12090: GO 12686
// end ; end else
12092: GO 12494
// if unit = Gladstone then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_EXP 30
12103: EQUAL
12104: IFFALSE 12178
// begin if Gladstone in selected then
12106: LD_EXP 30
12110: PUSH
12111: LD_EXP 3
12115: IN
12116: IFFALSE 12152
// begin joined := true ;
12118: LD_ADDR_VAR 0 5
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12126: LD_EXP 15
12130: PPUSH
12131: LD_STRING D3-Tim-JMM-1
12133: PPUSH
12134: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12138: LD_EXP 30
12142: PPUSH
12143: LD_STRING D3-Tim-Glad-1
12145: PPUSH
12146: CALL_OW 88
// end else
12150: GO 12176
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12152: LD_EXP 15
12156: PPUSH
12157: LD_STRING D4-Tim-JMM-1
12159: PPUSH
12160: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12164: LD_EXP 30
12168: PPUSH
12169: LD_STRING D4-Tim-Glad-1
12171: PPUSH
12172: CALL_OW 88
// end ; end else
12176: GO 12494
// if unit = Denis then
12178: LD_VAR 0 1
12182: PUSH
12183: LD_EXP 28
12187: EQUAL
12188: IFFALSE 12224
// begin joined := true ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12198: LD_EXP 28
12202: PPUSH
12203: LD_STRING D3-Denis-Den-1
12205: PPUSH
12206: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12210: LD_EXP 15
12214: PPUSH
12215: LD_STRING D3-Denis-JMM-1
12217: PPUSH
12218: CALL_OW 88
// end else
12222: GO 12494
// if unit = Simms then
12224: LD_VAR 0 1
12228: PUSH
12229: LD_EXP 36
12233: EQUAL
12234: IFFALSE 12270
// begin joined := true ;
12236: LD_ADDR_VAR 0 5
12240: PUSH
12241: LD_INT 1
12243: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12244: LD_EXP 36
12248: PPUSH
12249: LD_STRING D3-Simms-Sim-1
12251: PPUSH
12252: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12256: LD_EXP 15
12260: PPUSH
12261: LD_STRING D3-Simms-JMM-1
12263: PPUSH
12264: CALL_OW 88
// end else
12268: GO 12494
// if unit = DeltaDoctor then
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 38
12279: EQUAL
12280: IFFALSE 12316
// begin joined := true ;
12282: LD_ADDR_VAR 0 5
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12290: LD_EXP 38
12294: PPUSH
12295: LD_STRING D3-Soldier1-Sol1-1
12297: PPUSH
12298: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12302: LD_EXP 15
12306: PPUSH
12307: LD_STRING D3-Soldier1-JMM-1
12309: PPUSH
12310: CALL_OW 88
// end else
12314: GO 12494
// begin joined := unit in selected ;
12316: LD_ADDR_VAR 0 5
12320: PUSH
12321: LD_VAR 0 1
12325: PUSH
12326: LD_EXP 3
12330: IN
12331: ST_TO_ADDR
// if joined then
12332: LD_VAR 0 5
12336: IFFALSE 12405
// begin if GetSex ( unit ) = sex_male then
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL_OW 258
12347: PUSH
12348: LD_INT 1
12350: EQUAL
12351: IFFALSE 12379
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: LD_STRING D3-Soldier1-Sol1-1
12360: PPUSH
12361: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12365: LD_EXP 15
12369: PPUSH
12370: LD_STRING D3-Soldier1-JMM-1
12372: PPUSH
12373: CALL_OW 88
// end else
12377: GO 12403
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_STRING D3-Soldier2-FSol2-1
12386: PPUSH
12387: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12391: LD_EXP 15
12395: PPUSH
12396: LD_STRING D3-Soldier2-JMM-1
12398: PPUSH
12399: CALL_OW 88
// end ; end else
12403: GO 12494
// begin if GetSex ( unit ) = sex_male then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 258
12414: PUSH
12415: LD_INT 1
12417: EQUAL
12418: IFFALSE 12458
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12420: LD_VAR 0 1
12424: PPUSH
12425: LD_STRING D4-Soldier2-Sol1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12432: LD_EXP 15
12436: PPUSH
12437: LD_STRING D4-Soldier2-JMM-1
12439: PPUSH
12440: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12444: LD_VAR 0 1
12448: PPUSH
12449: LD_STRING D4-Soldier2-Sol2-1
12451: PPUSH
12452: CALL_OW 88
// end else
12456: GO 12494
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12458: LD_VAR 0 1
12462: PPUSH
12463: LD_STRING D4-Soldier1-FSol1-1
12465: PPUSH
12466: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12470: LD_EXP 15
12474: PPUSH
12475: LD_STRING D4-Soldier1-JMM-1
12477: PPUSH
12478: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12482: LD_VAR 0 1
12486: PPUSH
12487: LD_STRING D4-Soldier1-FSol1-2
12489: PPUSH
12490: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12494: CALL_OW 7
// InGameOff ;
12498: CALL_OW 9
// if building then
12502: LD_VAR 0 3
12506: IFFALSE 12607
// begin SetSide ( JMM , side ) ;
12508: LD_EXP 15
12512: PPUSH
12513: LD_VAR 0 4
12517: PPUSH
12518: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12522: LD_EXP 15
12526: PPUSH
12527: CALL_OW 122
// if joined then
12531: LD_VAR 0 5
12535: IFFALSE 12574
// begin SetSide ( unit , side ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: LD_VAR 0 4
12546: PPUSH
12547: CALL_OW 235
// SetSide ( building , 1 ) ;
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 235
// ComExitBuilding ( unit ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 122
// end else
12572: GO 12605
// begin wait ( 0 0$10 ) ;
12574: LD_INT 350
12576: PPUSH
12577: CALL_OW 67
// SetSide ( unit , 1 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 235
// SetSide ( building , 1 ) ;
12593: LD_VAR 0 3
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: CALL_OW 235
// end ; end else
12605: GO 12686
// begin ComStop ( [ JMM , unit ] ) ;
12607: LD_EXP 15
12611: PUSH
12612: LD_VAR 0 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 141
// if joined then
12625: LD_VAR 0 5
12629: IFFALSE 12647
// SetSide ( unit , side ) else
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_VAR 0 4
12640: PPUSH
12641: CALL_OW 235
12645: GO 12686
// begin repeat wait ( 0 0$1 ) ;
12647: LD_INT 35
12649: PPUSH
12650: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12654: LD_EXP 15
12658: PPUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 296
12668: PUSH
12669: LD_INT 11
12671: GREATER
12672: IFFALSE 12647
// SetSide ( unit , 1 ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 235
// end ; end ; end ;
12686: LD_VAR 0 2
12690: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12691: LD_EXP 15
12695: PPUSH
12696: LD_EXP 39
12700: PPUSH
12701: CALL_OW 296
12705: PUSH
12706: LD_INT 6
12708: LESS
12709: PUSH
12710: LD_INT 7
12712: PPUSH
12713: LD_EXP 39
12717: PPUSH
12718: CALL_OW 292
12722: AND
12723: IFFALSE 12781
12725: GO 12727
12727: DISABLE
// begin DialogueOn ;
12728: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12732: LD_EXP 39
12736: PPUSH
12737: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12741: LD_EXP 15
12745: PPUSH
12746: LD_STRING D6-JMM-Mike-1
12748: PPUSH
12749: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12753: LD_EXP 39
12757: PPUSH
12758: LD_STRING D6-Mike-1
12760: PPUSH
12761: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12765: LD_EXP 39
12769: PPUSH
12770: LD_INT 7
12772: PPUSH
12773: CALL_OW 235
// DialogueOff ;
12777: CALL_OW 7
// end ;
12781: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12782: LD_EXP 15
12786: PPUSH
12787: CALL_OW 310
12791: PUSH
12792: LD_INT 47
12794: EQUAL
12795: IFFALSE 12863
12797: GO 12799
12799: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12800: LD_STRING M1a
12802: PPUSH
12803: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12807: LD_INT 13
12809: PPUSH
12810: LD_INT 7
12812: PPUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12820: LD_INT 29
12822: PPUSH
12823: LD_INT 7
12825: PPUSH
12826: LD_INT 2
12828: PPUSH
12829: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12833: LD_EXP 15
12837: PPUSH
12838: LD_INT 9
12840: PPUSH
12841: CALL_OW 336
// can_escape := true ;
12845: LD_ADDR_EXP 6
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12853: LD_INT 19
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: CALL_OW 424
// end ;
12863: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12864: LD_EXP 17
12868: PPUSH
12869: CALL_OW 256
12873: PUSH
12874: LD_INT 999
12876: LESS
12877: IFFALSE 12928
12879: GO 12881
12881: DISABLE
// begin enable ;
12882: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12883: LD_INT 25
12885: PPUSH
12886: LD_INT 48
12888: PPUSH
12889: CALL_OW 428
12893: PUSH
12894: LD_EXP 17
12898: EQUAL
12899: IFFALSE 12913
// begin RemoveUnit ( Powell ) ;
12901: LD_EXP 17
12905: PPUSH
12906: CALL_OW 64
// disable ;
12910: DISABLE
// end else
12911: GO 12928
// ComMoveXY ( Powell , 25 , 48 ) ;
12913: LD_EXP 17
12917: PPUSH
12918: LD_INT 25
12920: PPUSH
12921: LD_INT 48
12923: PPUSH
12924: CALL_OW 111
// end ;
12928: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12929: LD_INT 22
12931: PUSH
12932: LD_INT 4
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 21
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 3
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: LD_INT 990
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PUSH
12976: LD_EXP 16
12980: DIFF
12981: IFFALSE 13125
12983: GO 12985
12985: DISABLE
12986: LD_INT 0
12988: PPUSH
// begin enable ;
12989: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 22
12997: PUSH
12998: LD_INT 4
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 3
13017: PUSH
13018: LD_INT 24
13020: PUSH
13021: LD_INT 990
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: PUSH
13042: LD_EXP 16
13046: DIFF
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13123
// begin ComFree ( i ) ;
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 139
// SetSide ( i , 1 ) ;
13060: LD_VAR 0 1
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_EXP 15
13081: PPUSH
13082: CALL_OW 296
13086: PUSH
13087: LD_INT 14
13089: LESS
13090: IFFALSE 13121
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13092: LD_VAR 0 1
13096: PPUSH
13097: LD_EXP 15
13101: PPUSH
13102: CALL_OW 250
13106: PPUSH
13107: LD_EXP 15
13111: PPUSH
13112: CALL_OW 251
13116: PPUSH
13117: CALL_OW 114
// end ;
13121: GO 13048
13123: POP
13124: POP
// end ;
13125: PPOPN 1
13127: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13128: LD_INT 22
13130: PUSH
13131: LD_INT 4
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 34
13140: PUSH
13141: LD_INT 12
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: IFFALSE 13238
13158: GO 13160
13160: DISABLE
13161: LD_INT 0
13163: PPUSH
// begin enable ;
13164: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13165: LD_ADDR_VAR 0 1
13169: PUSH
13170: LD_INT 22
13172: PUSH
13173: LD_INT 4
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 34
13182: PUSH
13183: LD_INT 12
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: PUSH
13199: FOR_IN
13200: IFFALSE 13236
// if GetDistUnits ( i , JMM ) < 6 then
13202: LD_VAR 0 1
13206: PPUSH
13207: LD_EXP 15
13211: PPUSH
13212: CALL_OW 296
13216: PUSH
13217: LD_INT 6
13219: LESS
13220: IFFALSE 13234
// SetSide ( i , 7 ) ;
13222: LD_VAR 0 1
13226: PPUSH
13227: LD_INT 7
13229: PPUSH
13230: CALL_OW 235
13234: GO 13199
13236: POP
13237: POP
// end ;
13238: PPOPN 1
13240: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13241: LD_EXP 6
13245: PUSH
13246: LD_INT 19
13248: PPUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 7
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 50
13261: PUSH
13262: EMPTY
13263: LIST
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 71
13284: NOT
13285: AND
13286: PUSH
13287: LD_INT 3
13289: PPUSH
13290: CALL_OW 469
13294: NOT
13295: AND
13296: PUSH
13297: LD_INT 5
13299: PPUSH
13300: CALL_OW 469
13304: NOT
13305: AND
13306: IFFALSE 15031
13308: GO 13310
13310: DISABLE
13311: LD_INT 0
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// begin m1 := false ;
13318: LD_ADDR_VAR 0 3
13322: PUSH
13323: LD_INT 0
13325: ST_TO_ADDR
// m2 := false ;
13326: LD_ADDR_VAR 0 4
13330: PUSH
13331: LD_INT 0
13333: ST_TO_ADDR
// m3 := false ;
13334: LD_ADDR_VAR 0 5
13338: PUSH
13339: LD_INT 0
13341: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_EXP 3
13351: PPUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 4
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: ST_TO_ADDR
// if not all_taken then
13385: LD_VAR 0 1
13389: NOT
13390: IFFALSE 13520
// begin if Query ( Q1 ) = 1 then
13392: LD_STRING Q1
13394: PPUSH
13395: CALL_OW 97
13399: PUSH
13400: LD_INT 1
13402: EQUAL
13403: IFFALSE 13520
// begin repeat wait ( 0 0$1 ) ;
13405: LD_INT 35
13407: PPUSH
13408: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13412: LD_EXP 3
13416: PPUSH
13417: LD_INT 22
13419: PUSH
13420: LD_INT 4
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 21
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 72
13445: PUSH
13446: LD_INT 0
13448: EQUAL
13449: PUSH
13450: LD_INT 19
13452: PPUSH
13453: LD_INT 22
13455: PUSH
13456: LD_INT 7
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 50
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 71
13488: NOT
13489: AND
13490: PUSH
13491: LD_INT 3
13493: PPUSH
13494: CALL_OW 469
13498: NOT
13499: AND
13500: PUSH
13501: LD_INT 5
13503: PPUSH
13504: CALL_OW 469
13508: NOT
13509: AND
13510: IFFALSE 13405
// all_taken := true ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// end ; end ; if Count ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 6 then
13520: LD_INT 22
13522: PUSH
13523: LD_INT 7
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 50
13542: PUSH
13543: EMPTY
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: PPUSH
13556: CALL 38503 0 1
13560: PUSH
13561: LD_INT 6
13563: LESS
13564: IFFALSE 13573
// begin YouLost ( AlliesLost ) ;
13566: LD_STRING AlliesLost
13568: PPUSH
13569: CALL_OW 104
// end ; if team_kill_counter < 3 then
13573: LD_EXP 9
13577: PUSH
13578: LD_INT 3
13580: LESS
13581: IFFALSE 13597
// Say ( JMM , D5-JMM-1 ) else
13583: LD_EXP 15
13587: PPUSH
13588: LD_STRING D5-JMM-1
13590: PPUSH
13591: CALL_OW 88
13595: GO 13609
// Say ( JMM , D5-JMM-1a ) ;
13597: LD_EXP 15
13601: PPUSH
13602: LD_STRING D5-JMM-1a
13604: PPUSH
13605: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13609: LD_INT 22
13611: PUSH
13612: LD_INT 7
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 21
13621: PUSH
13622: LD_INT 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 23
13631: PUSH
13632: LD_INT 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: PPUSH
13644: CALL_OW 69
13648: PUSH
13649: LD_EXP 15
13653: PUSH
13654: LD_EXP 16
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: DIFF
13663: PUSH
13664: LD_INT 10
13666: GREATEREQUAL
13667: IFFALSE 13676
// SetAchievement ( ACH_TEAM ) ;
13669: LD_STRING ACH_TEAM
13671: PPUSH
13672: CALL_OW 543
// if not invis_used then
13676: LD_EXP 12
13680: NOT
13681: IFFALSE 13697
// begin wait ( 3 ) ;
13683: LD_INT 3
13685: PPUSH
13686: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13690: LD_STRING ACH_NOINVIS
13692: PPUSH
13693: CALL_OW 543
// end ; if not alert then
13697: LD_EXP 13
13701: NOT
13702: IFFALSE 13718
// begin wait ( 3 ) ;
13704: LD_INT 3
13706: PPUSH
13707: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13711: LD_STRING ACH_ALARM
13713: PPUSH
13714: CALL_OW 543
// end ; if tick < 15 15$00 then
13718: LD_OWVAR 1
13722: PUSH
13723: LD_INT 31500
13725: LESS
13726: IFFALSE 13742
// begin wait ( 3 ) ;
13728: LD_INT 3
13730: PPUSH
13731: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13735: LD_STRING ACH_ASPEED_16
13737: PPUSH
13738: CALL_OW 543
// end ; if all_taken then
13742: LD_VAR 0 1
13746: IFFALSE 13768
// begin AddMedal ( All , 1 ) ;
13748: LD_STRING All
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 101
// m1 := true ;
13758: LD_ADDR_VAR 0 3
13762: PUSH
13763: LD_INT 1
13765: ST_TO_ADDR
// end else
13766: GO 13779
// AddMedal ( All , - 1 ) ;
13768: LD_STRING All
13770: PPUSH
13771: LD_INT 1
13773: NEG
13774: PPUSH
13775: CALL_OW 101
// if team_kill_counter then
13779: LD_EXP 9
13783: IFFALSE 13798
// AddMedal ( Save , - 1 ) else
13785: LD_STRING Save
13787: PPUSH
13788: LD_INT 1
13790: NEG
13791: PPUSH
13792: CALL_OW 101
13796: GO 13816
// begin AddMedal ( Save , 1 ) ;
13798: LD_STRING Save
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL_OW 101
// m2 := true ;
13808: LD_ADDR_VAR 0 4
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13816: LD_EXP 8
13820: PUSH
13821: LD_INT 2
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: LD_INT 1
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_OWVAR 67
13843: ARRAY
13844: GREATEREQUAL
13845: IFFALSE 13860
// AddMedal ( Friendship , - 1 ) else
13847: LD_STRING Friendship
13849: PPUSH
13850: LD_INT 1
13852: NEG
13853: PPUSH
13854: CALL_OW 101
13858: GO 13878
// begin AddMedal ( Friendship , 1 ) ;
13860: LD_STRING Friendship
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: CALL_OW 101
// m3 := true ;
13870: LD_ADDR_VAR 0 5
13874: PUSH
13875: LD_INT 1
13877: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13878: LD_VAR 0 3
13882: PUSH
13883: LD_VAR 0 4
13887: AND
13888: PUSH
13889: LD_VAR 0 5
13893: AND
13894: PUSH
13895: LD_OWVAR 67
13899: PUSH
13900: LD_INT 3
13902: GREATEREQUAL
13903: AND
13904: IFFALSE 13916
// SetAchievementEX ( ACH_AMER , 16 ) ;
13906: LD_STRING ACH_AMER
13908: PPUSH
13909: LD_INT 16
13911: PPUSH
13912: CALL_OW 564
// GiveMedals ( MAIN ) ;
13916: LD_STRING MAIN
13918: PPUSH
13919: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13923: LD_ADDR_VAR 0 2
13927: PUSH
13928: LD_INT 22
13930: PUSH
13931: LD_INT 7
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 2
13940: PUSH
13941: LD_INT 25
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 25
13963: PUSH
13964: LD_INT 3
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 25
13973: PUSH
13974: LD_INT 4
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 25
13983: PUSH
13984: LD_INT 5
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 25
13993: PUSH
13994: LD_INT 8
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 25
14003: PUSH
14004: LD_INT 9
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 25
14013: PUSH
14014: LD_INT 16
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: EMPTY
14037: LIST
14038: PPUSH
14039: CALL_OW 69
14043: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
14044: LD_VAR 0 2
14048: PUSH
14049: LD_EXP 16
14053: UNION
14054: PUSH
14055: LD_EXP 39
14059: DIFF
14060: PPUSH
14061: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
14065: LD_EXP 15
14069: PPUSH
14070: LD_STRING 12a_JMM
14072: PPUSH
14073: CALL_OW 38
// if IsLive ( Roth ) then
14077: LD_EXP 16
14081: PPUSH
14082: CALL_OW 300
14086: IFFALSE 14100
// SaveCharacters ( Roth , 12a_Roth ) ;
14088: LD_EXP 16
14092: PPUSH
14093: LD_STRING 12a_Roth
14095: PPUSH
14096: CALL_OW 38
// if Lisa in tmp then
14100: LD_EXP 24
14104: PUSH
14105: LD_VAR 0 2
14109: IN
14110: IFFALSE 14126
// SaveCharacters ( Lisa , 12a_Lisa ) else
14112: LD_EXP 24
14116: PPUSH
14117: LD_STRING 12a_Lisa
14119: PPUSH
14120: CALL_OW 38
14124: GO 14144
// if Lisa then
14126: LD_EXP 24
14130: IFFALSE 14144
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14132: LD_EXP 24
14136: PPUSH
14137: LD_STRING 12p_Lisa
14139: PPUSH
14140: CALL_OW 38
// if Mike in tmp then
14144: LD_EXP 39
14148: PUSH
14149: LD_VAR 0 2
14153: IN
14154: IFFALSE 14168
// SaveCharacters ( Mike , 12a_Mike ) ;
14156: LD_EXP 39
14160: PPUSH
14161: LD_STRING 12a_Mike
14163: PPUSH
14164: CALL_OW 38
// if Donaldson in tmp then
14168: LD_EXP 25
14172: PUSH
14173: LD_VAR 0 2
14177: IN
14178: IFFALSE 14194
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14180: LD_EXP 25
14184: PPUSH
14185: LD_STRING 12a_Donaldson
14187: PPUSH
14188: CALL_OW 38
14192: GO 14212
// if Donaldson then
14194: LD_EXP 25
14198: IFFALSE 14212
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14200: LD_EXP 25
14204: PPUSH
14205: LD_STRING 12p_Donaldson
14207: PPUSH
14208: CALL_OW 38
// if Bobby in tmp then
14212: LD_EXP 26
14216: PUSH
14217: LD_VAR 0 2
14221: IN
14222: IFFALSE 14238
// SaveCharacters ( Bobby , 12a_Bobby ) else
14224: LD_EXP 26
14228: PPUSH
14229: LD_STRING 12a_Bobby
14231: PPUSH
14232: CALL_OW 38
14236: GO 14256
// if Bobby then
14238: LD_EXP 26
14242: IFFALSE 14256
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14244: LD_EXP 26
14248: PPUSH
14249: LD_STRING 12p_Bobby
14251: PPUSH
14252: CALL_OW 38
// if Cyrus in tmp then
14256: LD_EXP 27
14260: PUSH
14261: LD_VAR 0 2
14265: IN
14266: IFFALSE 14282
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14268: LD_EXP 27
14272: PPUSH
14273: LD_STRING 12a_Cyrus
14275: PPUSH
14276: CALL_OW 38
14280: GO 14300
// if Cyrus then
14282: LD_EXP 27
14286: IFFALSE 14300
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14288: LD_EXP 27
14292: PPUSH
14293: LD_STRING 12p_Cyrus
14295: PPUSH
14296: CALL_OW 38
// if Denis in tmp then
14300: LD_EXP 28
14304: PUSH
14305: LD_VAR 0 2
14309: IN
14310: IFFALSE 14324
// SaveCharacters ( Denis , 12a_Denis ) ;
14312: LD_EXP 28
14316: PPUSH
14317: LD_STRING 12a_Denis
14319: PPUSH
14320: CALL_OW 38
// if Brown in tmp then
14324: LD_EXP 29
14328: PUSH
14329: LD_VAR 0 2
14333: IN
14334: IFFALSE 14350
// SaveCharacters ( Brown , 12a_Brown ) else
14336: LD_EXP 29
14340: PPUSH
14341: LD_STRING 12a_Brown
14343: PPUSH
14344: CALL_OW 38
14348: GO 14374
// if Brown in tmp then
14350: LD_EXP 29
14354: PUSH
14355: LD_VAR 0 2
14359: IN
14360: IFFALSE 14374
// SaveCharacters ( Brown , 12p_Brown ) ;
14362: LD_EXP 29
14366: PPUSH
14367: LD_STRING 12p_Brown
14369: PPUSH
14370: CALL_OW 38
// if Gladstone in tmp then
14374: LD_EXP 30
14378: PUSH
14379: LD_VAR 0 2
14383: IN
14384: IFFALSE 14400
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14386: LD_EXP 30
14390: PPUSH
14391: LD_STRING 12a_Gladstone
14393: PPUSH
14394: CALL_OW 38
14398: GO 14418
// if Gladstone then
14400: LD_EXP 30
14404: IFFALSE 14418
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14406: LD_EXP 30
14410: PPUSH
14411: LD_STRING 12p_Gladstone
14413: PPUSH
14414: CALL_OW 38
// if Houten in tmp then
14418: LD_EXP 31
14422: PUSH
14423: LD_VAR 0 2
14427: IN
14428: IFFALSE 14444
// SaveCharacters ( Houten , 12a_Houten ) else
14430: LD_EXP 31
14434: PPUSH
14435: LD_STRING 12a_Houten
14437: PPUSH
14438: CALL_OW 38
14442: GO 14462
// if Houten then
14444: LD_EXP 31
14448: IFFALSE 14462
// SaveCharacters ( Houten , 12p_Houten ) ;
14450: LD_EXP 31
14454: PPUSH
14455: LD_STRING 12p_Houten
14457: PPUSH
14458: CALL_OW 38
// if Cornel in tmp then
14462: LD_EXP 32
14466: PUSH
14467: LD_VAR 0 2
14471: IN
14472: IFFALSE 14488
// SaveCharacters ( Cornel , 12a_Cornell ) else
14474: LD_EXP 32
14478: PPUSH
14479: LD_STRING 12a_Cornell
14481: PPUSH
14482: CALL_OW 38
14486: GO 14506
// if Cornel then
14488: LD_EXP 32
14492: IFFALSE 14506
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14494: LD_EXP 32
14498: PPUSH
14499: LD_STRING 12p_Cornell
14501: PPUSH
14502: CALL_OW 38
// if Gary in tmp then
14506: LD_EXP 33
14510: PUSH
14511: LD_VAR 0 2
14515: IN
14516: IFFALSE 14532
// SaveCharacters ( Gary , 12a_Gary ) else
14518: LD_EXP 33
14522: PPUSH
14523: LD_STRING 12a_Gary
14525: PPUSH
14526: CALL_OW 38
14530: GO 14550
// if Gary then
14532: LD_EXP 33
14536: IFFALSE 14550
// SaveCharacters ( Gary , 12p_Gary ) ;
14538: LD_EXP 33
14542: PPUSH
14543: LD_STRING 12p_Gary
14545: PPUSH
14546: CALL_OW 38
// if Frank in tmp then
14550: LD_EXP 34
14554: PUSH
14555: LD_VAR 0 2
14559: IN
14560: IFFALSE 14574
// SaveCharacters ( Frank , 12a_Frank ) ;
14562: LD_EXP 34
14566: PPUSH
14567: LD_STRING 12a_Frank
14569: PPUSH
14570: CALL_OW 38
// if Kikuchi in tmp then
14574: LD_EXP 35
14578: PUSH
14579: LD_VAR 0 2
14583: IN
14584: IFFALSE 14600
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14586: LD_EXP 35
14590: PPUSH
14591: LD_STRING 12a_Kikuchi
14593: PPUSH
14594: CALL_OW 38
14598: GO 14618
// if Kikuchi then
14600: LD_EXP 35
14604: IFFALSE 14618
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14606: LD_EXP 35
14610: PPUSH
14611: LD_STRING 12p_Kikuchi
14613: PPUSH
14614: CALL_OW 38
// if Simms in tmp then
14618: LD_EXP 36
14622: PUSH
14623: LD_VAR 0 2
14627: IN
14628: IFFALSE 14642
// SaveCharacters ( Simms , 12a_Simms ) ;
14630: LD_EXP 36
14634: PPUSH
14635: LD_STRING 12a_Simms
14637: PPUSH
14638: CALL_OW 38
// if Joan in tmp then
14642: LD_EXP 37
14646: PUSH
14647: LD_VAR 0 2
14651: IN
14652: IFFALSE 14666
// SaveCharacters ( Joan , 12a_Joan ) ;
14654: LD_EXP 37
14658: PPUSH
14659: LD_STRING 12a_Joan
14661: PPUSH
14662: CALL_OW 38
// if DeltaDoctor in tmp then
14666: LD_EXP 38
14670: PUSH
14671: LD_VAR 0 2
14675: IN
14676: IFFALSE 14690
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14678: LD_EXP 38
14682: PPUSH
14683: LD_STRING 12a_DeltaDoctor
14685: PPUSH
14686: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14690: LD_ADDR_VAR 0 2
14694: PUSH
14695: LD_VAR 0 2
14699: PUSH
14700: LD_EXP 15
14704: PUSH
14705: LD_EXP 16
14709: PUSH
14710: LD_EXP 24
14714: PUSH
14715: LD_EXP 25
14719: PUSH
14720: LD_EXP 26
14724: PUSH
14725: LD_EXP 27
14729: PUSH
14730: LD_EXP 28
14734: PUSH
14735: LD_EXP 29
14739: PUSH
14740: LD_EXP 30
14744: PUSH
14745: LD_EXP 31
14749: PUSH
14750: LD_EXP 32
14754: PUSH
14755: LD_EXP 33
14759: PUSH
14760: LD_EXP 34
14764: PUSH
14765: LD_EXP 35
14769: PUSH
14770: LD_EXP 36
14774: PUSH
14775: LD_EXP 37
14779: PUSH
14780: LD_EXP 38
14784: PUSH
14785: LD_EXP 39
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: DIFF
14810: ST_TO_ADDR
// if tmp then
14811: LD_VAR 0 2
14815: IFFALSE 14829
// SaveCharacters ( tmp , 12a_others ) ;
14817: LD_VAR 0 2
14821: PPUSH
14822: LD_STRING 12a_others
14824: PPUSH
14825: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14829: LD_ADDR_VAR 0 2
14833: PUSH
14834: LD_INT 21
14836: PUSH
14837: LD_INT 1
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 23
14846: PUSH
14847: LD_INT 1
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 2
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_INT 1
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 22
14869: PUSH
14870: LD_INT 4
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 69
14891: PUSH
14892: LD_EXP 15
14896: PUSH
14897: LD_EXP 16
14901: PUSH
14902: LD_EXP 24
14906: PUSH
14907: LD_EXP 25
14911: PUSH
14912: LD_EXP 26
14916: PUSH
14917: LD_EXP 27
14921: PUSH
14922: LD_EXP 28
14926: PUSH
14927: LD_EXP 29
14931: PUSH
14932: LD_EXP 30
14936: PUSH
14937: LD_EXP 31
14941: PUSH
14942: LD_EXP 32
14946: PUSH
14947: LD_EXP 33
14951: PUSH
14952: LD_EXP 34
14956: PUSH
14957: LD_EXP 35
14961: PUSH
14962: LD_EXP 36
14966: PUSH
14967: LD_EXP 37
14971: PUSH
14972: LD_EXP 38
14976: PUSH
14977: LD_EXP 17
14981: PUSH
14982: LD_EXP 39
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: DIFF
15008: ST_TO_ADDR
// if tmp then
15009: LD_VAR 0 2
15013: IFFALSE 15027
// SaveCharacters ( tmp , 12p_others ) ;
15015: LD_VAR 0 2
15019: PPUSH
15020: LD_STRING 12p_others
15022: PPUSH
15023: CALL_OW 38
// YouWin ;
15027: CALL_OW 103
// end ; end_of_file
15031: PPOPN 5
15033: END
// on SailEvent ( event ) do var tmp ;
15034: LD_INT 0
15036: PPUSH
// begin if event = 1 then
15037: LD_VAR 0 1
15041: PUSH
15042: LD_INT 1
15044: EQUAL
15045: IFFALSE 15118
// begin if not mobile_patrol then
15047: LD_EXP 18
15051: NOT
15052: IFFALSE 15056
// exit ;
15054: GO 15118
// tmp := mobile_patrol [ mobile_patrol ] ;
15056: LD_ADDR_VAR 0 2
15060: PUSH
15061: LD_EXP 18
15065: PUSH
15066: LD_EXP 18
15070: ARRAY
15071: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
15072: LD_ADDR_EXP 18
15076: PUSH
15077: LD_EXP 18
15081: PPUSH
15082: LD_EXP 18
15086: PPUSH
15087: CALL_OW 3
15091: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
15092: LD_VAR 0 2
15096: PPUSH
15097: LD_EXP 19
15101: PUSH
15102: LD_EXP 18
15106: PUSH
15107: LD_INT 1
15109: PLUS
15110: ARRAY
15111: PPUSH
15112: EMPTY
15113: PPUSH
15114: CALL 7021 0 3
// end ; end ;
15118: PPOPN 2
15120: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL 31507 0 1
// if un = JMM then
15130: LD_VAR 0 1
15134: PUSH
15135: LD_EXP 15
15139: EQUAL
15140: IFFALSE 15149
// YouLost ( JMM ) ;
15142: LD_STRING JMM
15144: PPUSH
15145: CALL_OW 104
// if un = Powell then
15149: LD_VAR 0 1
15153: PUSH
15154: LD_EXP 17
15158: EQUAL
15159: IFFALSE 15171
// SaveVariable ( true , 12a_PowellKilled ) ;
15161: LD_INT 1
15163: PPUSH
15164: LD_STRING 12a_PowellKilled
15166: PPUSH
15167: CALL_OW 39
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15171: LD_VAR 0 1
15175: PPUSH
15176: CALL_OW 255
15180: PUSH
15181: LD_INT 7
15183: EQUAL
15184: PUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: CALL_OW 264
15194: PUSH
15195: LD_INT 12
15197: EQUAL
15198: AND
15199: IFFALSE 15208
// YouLost ( Artifact ) ;
15201: LD_STRING Artifact
15203: PPUSH
15204: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15208: LD_VAR 0 1
15212: PPUSH
15213: CALL_OW 255
15217: PUSH
15218: LD_INT 7
15220: EQUAL
15221: PUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 247
15231: PUSH
15232: LD_INT 1
15234: EQUAL
15235: AND
15236: PUSH
15237: LD_VAR 0 1
15241: PUSH
15242: LD_EXP 16
15246: EQUAL
15247: OR
15248: IFFALSE 15264
// team_kill_counter := team_kill_counter + 1 ;
15250: LD_ADDR_EXP 9
15254: PUSH
15255: LD_EXP 9
15259: PUSH
15260: LD_INT 1
15262: PLUS
15263: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 255
15273: PUSH
15274: LD_INT 1
15276: EQUAL
15277: PUSH
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 247
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: AND
15292: IFFALSE 15308
// friends_kill_counter := friends_kill_counter + 1 ;
15294: LD_ADDR_EXP 8
15298: PUSH
15299: LD_EXP 8
15303: PUSH
15304: LD_INT 1
15306: PLUS
15307: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15308: LD_VAR 0 1
15312: PPUSH
15313: CALL_OW 255
15317: PUSH
15318: LD_INT 1
15320: NONEQUAL
15321: IFFALSE 15325
// exit ;
15323: GO 15427
// if GetControl ( un ) = control_remote then
15325: LD_VAR 0 1
15329: PPUSH
15330: CALL_OW 263
15334: PUSH
15335: LD_INT 2
15337: EQUAL
15338: IFFALSE 15356
// defenders := defenders diff un ;
15340: LD_ADDR_EXP 21
15344: PUSH
15345: LD_EXP 21
15349: PUSH
15350: LD_VAR 0 1
15354: DIFF
15355: ST_TO_ADDR
// if not un in defenders then
15356: LD_VAR 0 1
15360: PUSH
15361: LD_EXP 21
15365: IN
15366: NOT
15367: IFFALSE 15427
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15369: LD_ADDR_EXP 22
15373: PUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL_OW 250
15383: PUSH
15384: LD_VAR 0 1
15388: PPUSH
15389: CALL_OW 251
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: ST_TO_ADDR
// def_counter := Inc ( def_counter ) ;
15398: LD_ADDR_EXP 14
15402: PUSH
15403: LD_EXP 14
15407: PPUSH
15408: CALL 75453 0 1
15412: ST_TO_ADDR
// if def_counter < 4 then
15413: LD_EXP 14
15417: PUSH
15418: LD_INT 4
15420: LESS
15421: IFFALSE 15427
// Defend ;
15423: CALL 2958 0 0
// end ; end ;
15427: PPOPN 1
15429: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15430: LD_VAR 0 1
15434: PPUSH
15435: LD_VAR 0 2
15439: PPUSH
15440: CALL 31627 0 2
// if GetSide ( veh ) <> 1 then
15444: LD_VAR 0 1
15448: PPUSH
15449: CALL_OW 255
15453: PUSH
15454: LD_INT 1
15456: NONEQUAL
15457: IFFALSE 15461
// exit ;
15459: GO 15485
// if GetControl ( veh ) = control_remote then
15461: LD_VAR 0 1
15465: PPUSH
15466: CALL_OW 263
15470: PUSH
15471: LD_INT 2
15473: EQUAL
15474: IFFALSE 15485
// Connect ( veh ) ;
15476: LD_VAR 0 1
15480: PPUSH
15481: CALL 44709 0 1
// end ;
15485: PPOPN 2
15487: END
// on UnitGoesToRed ( un ) do var i , veh ;
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15492: LD_VAR 0 1
15496: PPUSH
15497: CALL_OW 255
15501: PUSH
15502: LD_INT 1
15504: EQUAL
15505: PUSH
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL_OW 263
15515: PUSH
15516: LD_INT 2
15518: EQUAL
15519: AND
15520: IFFALSE 15531
// ComUnlink ( un ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 136
// if un = ambar0 then
15531: LD_VAR 0 1
15535: PUSH
15536: LD_INT 18
15538: EQUAL
15539: IFFALSE 15649
// begin uc_side := 1 ;
15541: LD_ADDR_OWVAR 20
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// uc_nation := 1 ;
15549: LD_ADDR_OWVAR 21
15553: PUSH
15554: LD_INT 1
15556: ST_TO_ADDR
// for i = 1 to 6 do
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: DOUBLE
15563: LD_INT 1
15565: DEC
15566: ST_TO_ADDR
15567: LD_INT 6
15569: PUSH
15570: FOR_TO
15571: IFFALSE 15647
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15573: LD_INT 3
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: LD_INT 3
15581: PPUSH
15582: LD_INT 4
15584: PPUSH
15585: LD_INT 100
15587: PPUSH
15588: CALL 41241 0 5
// veh := CreateVehicle ;
15592: LD_ADDR_VAR 0 3
15596: PUSH
15597: CALL_OW 45
15601: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15614: LD_VAR 0 3
15618: PPUSH
15619: LD_INT 25
15621: PPUSH
15622: LD_INT 0
15624: PPUSH
15625: CALL_OW 49
// defenders := defenders ^ veh ;
15629: LD_ADDR_EXP 21
15633: PUSH
15634: LD_EXP 21
15638: PUSH
15639: LD_VAR 0 3
15643: ADD
15644: ST_TO_ADDR
// end ;
15645: GO 15570
15647: POP
15648: POP
// end ; end ;
15649: PPOPN 3
15651: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15652: LD_VAR 0 2
15656: PUSH
15657: LD_EXP 17
15661: EQUAL
15662: IFFALSE 15673
// RemoveUnit ( Powell ) ;
15664: LD_EXP 17
15668: PPUSH
15669: CALL_OW 64
// end ;
15673: PPOPN 2
15675: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL 31611 0 1
// end ; end_of_file end_of_file
15685: PPOPN 1
15687: END
// export globalGameSaveCounter ; every 0 0$1 do
15688: GO 15690
15690: DISABLE
// begin enable ;
15691: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15692: LD_STRING updateTimer(
15694: PUSH
15695: LD_OWVAR 1
15699: STR
15700: PUSH
15701: LD_STRING );
15703: STR
15704: PPUSH
15705: CALL_OW 559
// end ;
15709: END
// every 0 0$1 do
15710: GO 15712
15712: DISABLE
// begin globalGameSaveCounter := 0 ;
15713: LD_ADDR_EXP 40
15717: PUSH
15718: LD_INT 0
15720: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15721: LD_STRING setGameSaveCounter(0)
15723: PPUSH
15724: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15728: LD_STRING initStreamRollete();
15730: PPUSH
15731: CALL_OW 559
// InitStreamMode ;
15735: CALL 17078 0 0
// DefineStreamItems ( false ) ;
15739: LD_INT 0
15741: PPUSH
15742: CALL 17542 0 1
// end ;
15746: END
// export function SOS_MapStart ( ) ; begin
15747: LD_INT 0
15749: PPUSH
// if streamModeActive then
15750: LD_EXP 41
15754: IFFALSE 15763
// DefineStreamItems ( true ) ;
15756: LD_INT 1
15758: PPUSH
15759: CALL 17542 0 1
// UpdateLuaVariables ( ) ;
15763: CALL 15780 0 0
// UpdateFactoryWaypoints ( ) ;
15767: CALL 30411 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15771: CALL 30668 0 0
// end ;
15775: LD_VAR 0 1
15779: RET
// function UpdateLuaVariables ( ) ; begin
15780: LD_INT 0
15782: PPUSH
// if globalGameSaveCounter then
15783: LD_EXP 40
15787: IFFALSE 15821
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15789: LD_ADDR_EXP 40
15793: PUSH
15794: LD_EXP 40
15798: PPUSH
15799: CALL 75453 0 1
15803: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15804: LD_STRING setGameSaveCounter(
15806: PUSH
15807: LD_EXP 40
15811: STR
15812: PUSH
15813: LD_STRING )
15815: STR
15816: PPUSH
15817: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15821: LD_STRING setGameDifficulty(
15823: PUSH
15824: LD_OWVAR 67
15828: STR
15829: PUSH
15830: LD_STRING )
15832: STR
15833: PPUSH
15834: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15838: LD_STRING displayDifficulty(
15840: PUSH
15841: LD_OWVAR 67
15845: STR
15846: PUSH
15847: LD_STRING )
15849: STR
15850: PPUSH
15851: CALL_OW 559
// end ;
15855: LD_VAR 0 1
15859: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15860: LD_INT 0
15862: PPUSH
// if p2 = stream_mode then
15863: LD_VAR 0 2
15867: PUSH
15868: LD_INT 100
15870: EQUAL
15871: IFFALSE 16874
// begin if not StreamModeActive then
15873: LD_EXP 41
15877: NOT
15878: IFFALSE 15888
// StreamModeActive := true ;
15880: LD_ADDR_EXP 41
15884: PUSH
15885: LD_INT 1
15887: ST_TO_ADDR
// if p3 = 0 then
15888: LD_VAR 0 3
15892: PUSH
15893: LD_INT 0
15895: EQUAL
15896: IFFALSE 15902
// InitStreamMode ;
15898: CALL 17078 0 0
// if p3 = 1 then
15902: LD_VAR 0 3
15906: PUSH
15907: LD_INT 1
15909: EQUAL
15910: IFFALSE 15920
// sRocket := true ;
15912: LD_ADDR_EXP 46
15916: PUSH
15917: LD_INT 1
15919: ST_TO_ADDR
// if p3 = 2 then
15920: LD_VAR 0 3
15924: PUSH
15925: LD_INT 2
15927: EQUAL
15928: IFFALSE 15938
// sSpeed := true ;
15930: LD_ADDR_EXP 45
15934: PUSH
15935: LD_INT 1
15937: ST_TO_ADDR
// if p3 = 3 then
15938: LD_VAR 0 3
15942: PUSH
15943: LD_INT 3
15945: EQUAL
15946: IFFALSE 15956
// sEngine := true ;
15948: LD_ADDR_EXP 47
15952: PUSH
15953: LD_INT 1
15955: ST_TO_ADDR
// if p3 = 4 then
15956: LD_VAR 0 3
15960: PUSH
15961: LD_INT 4
15963: EQUAL
15964: IFFALSE 15974
// sSpec := true ;
15966: LD_ADDR_EXP 44
15970: PUSH
15971: LD_INT 1
15973: ST_TO_ADDR
// if p3 = 5 then
15974: LD_VAR 0 3
15978: PUSH
15979: LD_INT 5
15981: EQUAL
15982: IFFALSE 15992
// sLevel := true ;
15984: LD_ADDR_EXP 48
15988: PUSH
15989: LD_INT 1
15991: ST_TO_ADDR
// if p3 = 6 then
15992: LD_VAR 0 3
15996: PUSH
15997: LD_INT 6
15999: EQUAL
16000: IFFALSE 16010
// sArmoury := true ;
16002: LD_ADDR_EXP 49
16006: PUSH
16007: LD_INT 1
16009: ST_TO_ADDR
// if p3 = 7 then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_INT 7
16017: EQUAL
16018: IFFALSE 16028
// sRadar := true ;
16020: LD_ADDR_EXP 50
16024: PUSH
16025: LD_INT 1
16027: ST_TO_ADDR
// if p3 = 8 then
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 8
16035: EQUAL
16036: IFFALSE 16046
// sBunker := true ;
16038: LD_ADDR_EXP 51
16042: PUSH
16043: LD_INT 1
16045: ST_TO_ADDR
// if p3 = 9 then
16046: LD_VAR 0 3
16050: PUSH
16051: LD_INT 9
16053: EQUAL
16054: IFFALSE 16064
// sHack := true ;
16056: LD_ADDR_EXP 52
16060: PUSH
16061: LD_INT 1
16063: ST_TO_ADDR
// if p3 = 10 then
16064: LD_VAR 0 3
16068: PUSH
16069: LD_INT 10
16071: EQUAL
16072: IFFALSE 16082
// sFire := true ;
16074: LD_ADDR_EXP 53
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// if p3 = 11 then
16082: LD_VAR 0 3
16086: PUSH
16087: LD_INT 11
16089: EQUAL
16090: IFFALSE 16100
// sRefresh := true ;
16092: LD_ADDR_EXP 54
16096: PUSH
16097: LD_INT 1
16099: ST_TO_ADDR
// if p3 = 12 then
16100: LD_VAR 0 3
16104: PUSH
16105: LD_INT 12
16107: EQUAL
16108: IFFALSE 16118
// sExp := true ;
16110: LD_ADDR_EXP 55
16114: PUSH
16115: LD_INT 1
16117: ST_TO_ADDR
// if p3 = 13 then
16118: LD_VAR 0 3
16122: PUSH
16123: LD_INT 13
16125: EQUAL
16126: IFFALSE 16136
// sDepot := true ;
16128: LD_ADDR_EXP 56
16132: PUSH
16133: LD_INT 1
16135: ST_TO_ADDR
// if p3 = 14 then
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 14
16143: EQUAL
16144: IFFALSE 16154
// sFlag := true ;
16146: LD_ADDR_EXP 57
16150: PUSH
16151: LD_INT 1
16153: ST_TO_ADDR
// if p3 = 15 then
16154: LD_VAR 0 3
16158: PUSH
16159: LD_INT 15
16161: EQUAL
16162: IFFALSE 16172
// sKamikadze := true ;
16164: LD_ADDR_EXP 65
16168: PUSH
16169: LD_INT 1
16171: ST_TO_ADDR
// if p3 = 16 then
16172: LD_VAR 0 3
16176: PUSH
16177: LD_INT 16
16179: EQUAL
16180: IFFALSE 16190
// sTroll := true ;
16182: LD_ADDR_EXP 66
16186: PUSH
16187: LD_INT 1
16189: ST_TO_ADDR
// if p3 = 17 then
16190: LD_VAR 0 3
16194: PUSH
16195: LD_INT 17
16197: EQUAL
16198: IFFALSE 16208
// sSlow := true ;
16200: LD_ADDR_EXP 67
16204: PUSH
16205: LD_INT 1
16207: ST_TO_ADDR
// if p3 = 18 then
16208: LD_VAR 0 3
16212: PUSH
16213: LD_INT 18
16215: EQUAL
16216: IFFALSE 16226
// sLack := true ;
16218: LD_ADDR_EXP 68
16222: PUSH
16223: LD_INT 1
16225: ST_TO_ADDR
// if p3 = 19 then
16226: LD_VAR 0 3
16230: PUSH
16231: LD_INT 19
16233: EQUAL
16234: IFFALSE 16244
// sTank := true ;
16236: LD_ADDR_EXP 70
16240: PUSH
16241: LD_INT 1
16243: ST_TO_ADDR
// if p3 = 20 then
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 20
16251: EQUAL
16252: IFFALSE 16262
// sRemote := true ;
16254: LD_ADDR_EXP 71
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// if p3 = 21 then
16262: LD_VAR 0 3
16266: PUSH
16267: LD_INT 21
16269: EQUAL
16270: IFFALSE 16280
// sPowell := true ;
16272: LD_ADDR_EXP 72
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if p3 = 22 then
16280: LD_VAR 0 3
16284: PUSH
16285: LD_INT 22
16287: EQUAL
16288: IFFALSE 16298
// sTeleport := true ;
16290: LD_ADDR_EXP 75
16294: PUSH
16295: LD_INT 1
16297: ST_TO_ADDR
// if p3 = 23 then
16298: LD_VAR 0 3
16302: PUSH
16303: LD_INT 23
16305: EQUAL
16306: IFFALSE 16316
// sOilTower := true ;
16308: LD_ADDR_EXP 77
16312: PUSH
16313: LD_INT 1
16315: ST_TO_ADDR
// if p3 = 24 then
16316: LD_VAR 0 3
16320: PUSH
16321: LD_INT 24
16323: EQUAL
16324: IFFALSE 16334
// sShovel := true ;
16326: LD_ADDR_EXP 78
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// if p3 = 25 then
16334: LD_VAR 0 3
16338: PUSH
16339: LD_INT 25
16341: EQUAL
16342: IFFALSE 16352
// sSheik := true ;
16344: LD_ADDR_EXP 79
16348: PUSH
16349: LD_INT 1
16351: ST_TO_ADDR
// if p3 = 26 then
16352: LD_VAR 0 3
16356: PUSH
16357: LD_INT 26
16359: EQUAL
16360: IFFALSE 16370
// sEarthquake := true ;
16362: LD_ADDR_EXP 81
16366: PUSH
16367: LD_INT 1
16369: ST_TO_ADDR
// if p3 = 27 then
16370: LD_VAR 0 3
16374: PUSH
16375: LD_INT 27
16377: EQUAL
16378: IFFALSE 16388
// sAI := true ;
16380: LD_ADDR_EXP 82
16384: PUSH
16385: LD_INT 1
16387: ST_TO_ADDR
// if p3 = 28 then
16388: LD_VAR 0 3
16392: PUSH
16393: LD_INT 28
16395: EQUAL
16396: IFFALSE 16406
// sCargo := true ;
16398: LD_ADDR_EXP 85
16402: PUSH
16403: LD_INT 1
16405: ST_TO_ADDR
// if p3 = 29 then
16406: LD_VAR 0 3
16410: PUSH
16411: LD_INT 29
16413: EQUAL
16414: IFFALSE 16424
// sDLaser := true ;
16416: LD_ADDR_EXP 86
16420: PUSH
16421: LD_INT 1
16423: ST_TO_ADDR
// if p3 = 30 then
16424: LD_VAR 0 3
16428: PUSH
16429: LD_INT 30
16431: EQUAL
16432: IFFALSE 16442
// sExchange := true ;
16434: LD_ADDR_EXP 87
16438: PUSH
16439: LD_INT 1
16441: ST_TO_ADDR
// if p3 = 31 then
16442: LD_VAR 0 3
16446: PUSH
16447: LD_INT 31
16449: EQUAL
16450: IFFALSE 16460
// sFac := true ;
16452: LD_ADDR_EXP 88
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// if p3 = 32 then
16460: LD_VAR 0 3
16464: PUSH
16465: LD_INT 32
16467: EQUAL
16468: IFFALSE 16478
// sPower := true ;
16470: LD_ADDR_EXP 89
16474: PUSH
16475: LD_INT 1
16477: ST_TO_ADDR
// if p3 = 33 then
16478: LD_VAR 0 3
16482: PUSH
16483: LD_INT 33
16485: EQUAL
16486: IFFALSE 16496
// sRandom := true ;
16488: LD_ADDR_EXP 90
16492: PUSH
16493: LD_INT 1
16495: ST_TO_ADDR
// if p3 = 34 then
16496: LD_VAR 0 3
16500: PUSH
16501: LD_INT 34
16503: EQUAL
16504: IFFALSE 16514
// sShield := true ;
16506: LD_ADDR_EXP 91
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// if p3 = 35 then
16514: LD_VAR 0 3
16518: PUSH
16519: LD_INT 35
16521: EQUAL
16522: IFFALSE 16532
// sTime := true ;
16524: LD_ADDR_EXP 92
16528: PUSH
16529: LD_INT 1
16531: ST_TO_ADDR
// if p3 = 36 then
16532: LD_VAR 0 3
16536: PUSH
16537: LD_INT 36
16539: EQUAL
16540: IFFALSE 16550
// sTools := true ;
16542: LD_ADDR_EXP 93
16546: PUSH
16547: LD_INT 1
16549: ST_TO_ADDR
// if p3 = 101 then
16550: LD_VAR 0 3
16554: PUSH
16555: LD_INT 101
16557: EQUAL
16558: IFFALSE 16568
// sSold := true ;
16560: LD_ADDR_EXP 58
16564: PUSH
16565: LD_INT 1
16567: ST_TO_ADDR
// if p3 = 102 then
16568: LD_VAR 0 3
16572: PUSH
16573: LD_INT 102
16575: EQUAL
16576: IFFALSE 16586
// sDiff := true ;
16578: LD_ADDR_EXP 59
16582: PUSH
16583: LD_INT 1
16585: ST_TO_ADDR
// if p3 = 103 then
16586: LD_VAR 0 3
16590: PUSH
16591: LD_INT 103
16593: EQUAL
16594: IFFALSE 16604
// sFog := true ;
16596: LD_ADDR_EXP 62
16600: PUSH
16601: LD_INT 1
16603: ST_TO_ADDR
// if p3 = 104 then
16604: LD_VAR 0 3
16608: PUSH
16609: LD_INT 104
16611: EQUAL
16612: IFFALSE 16622
// sReset := true ;
16614: LD_ADDR_EXP 63
16618: PUSH
16619: LD_INT 1
16621: ST_TO_ADDR
// if p3 = 105 then
16622: LD_VAR 0 3
16626: PUSH
16627: LD_INT 105
16629: EQUAL
16630: IFFALSE 16640
// sSun := true ;
16632: LD_ADDR_EXP 64
16636: PUSH
16637: LD_INT 1
16639: ST_TO_ADDR
// if p3 = 106 then
16640: LD_VAR 0 3
16644: PUSH
16645: LD_INT 106
16647: EQUAL
16648: IFFALSE 16658
// sTiger := true ;
16650: LD_ADDR_EXP 60
16654: PUSH
16655: LD_INT 1
16657: ST_TO_ADDR
// if p3 = 107 then
16658: LD_VAR 0 3
16662: PUSH
16663: LD_INT 107
16665: EQUAL
16666: IFFALSE 16676
// sBomb := true ;
16668: LD_ADDR_EXP 61
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// if p3 = 108 then
16676: LD_VAR 0 3
16680: PUSH
16681: LD_INT 108
16683: EQUAL
16684: IFFALSE 16694
// sWound := true ;
16686: LD_ADDR_EXP 69
16690: PUSH
16691: LD_INT 1
16693: ST_TO_ADDR
// if p3 = 109 then
16694: LD_VAR 0 3
16698: PUSH
16699: LD_INT 109
16701: EQUAL
16702: IFFALSE 16712
// sBetray := true ;
16704: LD_ADDR_EXP 73
16708: PUSH
16709: LD_INT 1
16711: ST_TO_ADDR
// if p3 = 110 then
16712: LD_VAR 0 3
16716: PUSH
16717: LD_INT 110
16719: EQUAL
16720: IFFALSE 16730
// sContamin := true ;
16722: LD_ADDR_EXP 74
16726: PUSH
16727: LD_INT 1
16729: ST_TO_ADDR
// if p3 = 111 then
16730: LD_VAR 0 3
16734: PUSH
16735: LD_INT 111
16737: EQUAL
16738: IFFALSE 16748
// sOil := true ;
16740: LD_ADDR_EXP 76
16744: PUSH
16745: LD_INT 1
16747: ST_TO_ADDR
// if p3 = 112 then
16748: LD_VAR 0 3
16752: PUSH
16753: LD_INT 112
16755: EQUAL
16756: IFFALSE 16766
// sStu := true ;
16758: LD_ADDR_EXP 80
16762: PUSH
16763: LD_INT 1
16765: ST_TO_ADDR
// if p3 = 113 then
16766: LD_VAR 0 3
16770: PUSH
16771: LD_INT 113
16773: EQUAL
16774: IFFALSE 16784
// sBazooka := true ;
16776: LD_ADDR_EXP 83
16780: PUSH
16781: LD_INT 1
16783: ST_TO_ADDR
// if p3 = 114 then
16784: LD_VAR 0 3
16788: PUSH
16789: LD_INT 114
16791: EQUAL
16792: IFFALSE 16802
// sMortar := true ;
16794: LD_ADDR_EXP 84
16798: PUSH
16799: LD_INT 1
16801: ST_TO_ADDR
// if p3 = 115 then
16802: LD_VAR 0 3
16806: PUSH
16807: LD_INT 115
16809: EQUAL
16810: IFFALSE 16820
// sRanger := true ;
16812: LD_ADDR_EXP 94
16816: PUSH
16817: LD_INT 1
16819: ST_TO_ADDR
// if p3 = 116 then
16820: LD_VAR 0 3
16824: PUSH
16825: LD_INT 116
16827: EQUAL
16828: IFFALSE 16838
// sComputer := true ;
16830: LD_ADDR_EXP 95
16834: PUSH
16835: LD_INT 1
16837: ST_TO_ADDR
// if p3 = 117 then
16838: LD_VAR 0 3
16842: PUSH
16843: LD_INT 117
16845: EQUAL
16846: IFFALSE 16856
// s30 := true ;
16848: LD_ADDR_EXP 96
16852: PUSH
16853: LD_INT 1
16855: ST_TO_ADDR
// if p3 = 118 then
16856: LD_VAR 0 3
16860: PUSH
16861: LD_INT 118
16863: EQUAL
16864: IFFALSE 16874
// s60 := true ;
16866: LD_ADDR_EXP 97
16870: PUSH
16871: LD_INT 1
16873: ST_TO_ADDR
// end ; if p2 = hack_mode then
16874: LD_VAR 0 2
16878: PUSH
16879: LD_INT 101
16881: EQUAL
16882: IFFALSE 17010
// begin case p3 of 1 :
16884: LD_VAR 0 3
16888: PUSH
16889: LD_INT 1
16891: DOUBLE
16892: EQUAL
16893: IFTRUE 16897
16895: GO 16904
16897: POP
// hHackUnlimitedResources ; 2 :
16898: CALL 29157 0 0
16902: GO 17010
16904: LD_INT 2
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 16919
16912: POP
// hHackSetLevel10 ; 3 :
16913: CALL 29290 0 0
16917: GO 17010
16919: LD_INT 3
16921: DOUBLE
16922: EQUAL
16923: IFTRUE 16927
16925: GO 16934
16927: POP
// hHackSetLevel10YourUnits ; 4 :
16928: CALL 29375 0 0
16932: GO 17010
16934: LD_INT 4
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16949
16942: POP
// hHackInvincible ; 5 :
16943: CALL 29823 0 0
16947: GO 17010
16949: LD_INT 5
16951: DOUBLE
16952: EQUAL
16953: IFTRUE 16957
16955: GO 16964
16957: POP
// hHackInvisible ; 6 :
16958: CALL 29934 0 0
16962: GO 17010
16964: LD_INT 6
16966: DOUBLE
16967: EQUAL
16968: IFTRUE 16972
16970: GO 16979
16972: POP
// hHackChangeYourSide ; 7 :
16973: CALL 29991 0 0
16977: GO 17010
16979: LD_INT 7
16981: DOUBLE
16982: EQUAL
16983: IFTRUE 16987
16985: GO 16994
16987: POP
// hHackChangeUnitSide ; 8 :
16988: CALL 30033 0 0
16992: GO 17010
16994: LD_INT 8
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17002
17000: GO 17009
17002: POP
// hHackFog ; end ;
17003: CALL 30134 0 0
17007: GO 17010
17009: POP
// end ; if p2 = game_save_mode then
17010: LD_VAR 0 2
17014: PUSH
17015: LD_INT 102
17017: EQUAL
17018: IFFALSE 17073
// begin if p3 = 1 then
17020: LD_VAR 0 3
17024: PUSH
17025: LD_INT 1
17027: EQUAL
17028: IFFALSE 17040
// globalGameSaveCounter := p4 ;
17030: LD_ADDR_EXP 40
17034: PUSH
17035: LD_VAR 0 4
17039: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17040: LD_VAR 0 3
17044: PUSH
17045: LD_INT 2
17047: EQUAL
17048: PUSH
17049: LD_EXP 40
17053: AND
17054: IFFALSE 17073
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17056: LD_STRING setGameSaveCounter(
17058: PUSH
17059: LD_EXP 40
17063: STR
17064: PUSH
17065: LD_STRING )
17067: STR
17068: PPUSH
17069: CALL_OW 559
// end ; end ;
17073: LD_VAR 0 7
17077: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17078: LD_INT 0
17080: PPUSH
// streamModeActive := false ;
17081: LD_ADDR_EXP 41
17085: PUSH
17086: LD_INT 0
17088: ST_TO_ADDR
// normalCounter := 36 ;
17089: LD_ADDR_EXP 42
17093: PUSH
17094: LD_INT 36
17096: ST_TO_ADDR
// hardcoreCounter := 18 ;
17097: LD_ADDR_EXP 43
17101: PUSH
17102: LD_INT 18
17104: ST_TO_ADDR
// sRocket := false ;
17105: LD_ADDR_EXP 46
17109: PUSH
17110: LD_INT 0
17112: ST_TO_ADDR
// sSpeed := false ;
17113: LD_ADDR_EXP 45
17117: PUSH
17118: LD_INT 0
17120: ST_TO_ADDR
// sEngine := false ;
17121: LD_ADDR_EXP 47
17125: PUSH
17126: LD_INT 0
17128: ST_TO_ADDR
// sSpec := false ;
17129: LD_ADDR_EXP 44
17133: PUSH
17134: LD_INT 0
17136: ST_TO_ADDR
// sLevel := false ;
17137: LD_ADDR_EXP 48
17141: PUSH
17142: LD_INT 0
17144: ST_TO_ADDR
// sArmoury := false ;
17145: LD_ADDR_EXP 49
17149: PUSH
17150: LD_INT 0
17152: ST_TO_ADDR
// sRadar := false ;
17153: LD_ADDR_EXP 50
17157: PUSH
17158: LD_INT 0
17160: ST_TO_ADDR
// sBunker := false ;
17161: LD_ADDR_EXP 51
17165: PUSH
17166: LD_INT 0
17168: ST_TO_ADDR
// sHack := false ;
17169: LD_ADDR_EXP 52
17173: PUSH
17174: LD_INT 0
17176: ST_TO_ADDR
// sFire := false ;
17177: LD_ADDR_EXP 53
17181: PUSH
17182: LD_INT 0
17184: ST_TO_ADDR
// sRefresh := false ;
17185: LD_ADDR_EXP 54
17189: PUSH
17190: LD_INT 0
17192: ST_TO_ADDR
// sExp := false ;
17193: LD_ADDR_EXP 55
17197: PUSH
17198: LD_INT 0
17200: ST_TO_ADDR
// sDepot := false ;
17201: LD_ADDR_EXP 56
17205: PUSH
17206: LD_INT 0
17208: ST_TO_ADDR
// sFlag := false ;
17209: LD_ADDR_EXP 57
17213: PUSH
17214: LD_INT 0
17216: ST_TO_ADDR
// sKamikadze := false ;
17217: LD_ADDR_EXP 65
17221: PUSH
17222: LD_INT 0
17224: ST_TO_ADDR
// sTroll := false ;
17225: LD_ADDR_EXP 66
17229: PUSH
17230: LD_INT 0
17232: ST_TO_ADDR
// sSlow := false ;
17233: LD_ADDR_EXP 67
17237: PUSH
17238: LD_INT 0
17240: ST_TO_ADDR
// sLack := false ;
17241: LD_ADDR_EXP 68
17245: PUSH
17246: LD_INT 0
17248: ST_TO_ADDR
// sTank := false ;
17249: LD_ADDR_EXP 70
17253: PUSH
17254: LD_INT 0
17256: ST_TO_ADDR
// sRemote := false ;
17257: LD_ADDR_EXP 71
17261: PUSH
17262: LD_INT 0
17264: ST_TO_ADDR
// sPowell := false ;
17265: LD_ADDR_EXP 72
17269: PUSH
17270: LD_INT 0
17272: ST_TO_ADDR
// sTeleport := false ;
17273: LD_ADDR_EXP 75
17277: PUSH
17278: LD_INT 0
17280: ST_TO_ADDR
// sOilTower := false ;
17281: LD_ADDR_EXP 77
17285: PUSH
17286: LD_INT 0
17288: ST_TO_ADDR
// sShovel := false ;
17289: LD_ADDR_EXP 78
17293: PUSH
17294: LD_INT 0
17296: ST_TO_ADDR
// sSheik := false ;
17297: LD_ADDR_EXP 79
17301: PUSH
17302: LD_INT 0
17304: ST_TO_ADDR
// sEarthquake := false ;
17305: LD_ADDR_EXP 81
17309: PUSH
17310: LD_INT 0
17312: ST_TO_ADDR
// sAI := false ;
17313: LD_ADDR_EXP 82
17317: PUSH
17318: LD_INT 0
17320: ST_TO_ADDR
// sCargo := false ;
17321: LD_ADDR_EXP 85
17325: PUSH
17326: LD_INT 0
17328: ST_TO_ADDR
// sDLaser := false ;
17329: LD_ADDR_EXP 86
17333: PUSH
17334: LD_INT 0
17336: ST_TO_ADDR
// sExchange := false ;
17337: LD_ADDR_EXP 87
17341: PUSH
17342: LD_INT 0
17344: ST_TO_ADDR
// sFac := false ;
17345: LD_ADDR_EXP 88
17349: PUSH
17350: LD_INT 0
17352: ST_TO_ADDR
// sPower := false ;
17353: LD_ADDR_EXP 89
17357: PUSH
17358: LD_INT 0
17360: ST_TO_ADDR
// sRandom := false ;
17361: LD_ADDR_EXP 90
17365: PUSH
17366: LD_INT 0
17368: ST_TO_ADDR
// sShield := false ;
17369: LD_ADDR_EXP 91
17373: PUSH
17374: LD_INT 0
17376: ST_TO_ADDR
// sTime := false ;
17377: LD_ADDR_EXP 92
17381: PUSH
17382: LD_INT 0
17384: ST_TO_ADDR
// sTools := false ;
17385: LD_ADDR_EXP 93
17389: PUSH
17390: LD_INT 0
17392: ST_TO_ADDR
// sSold := false ;
17393: LD_ADDR_EXP 58
17397: PUSH
17398: LD_INT 0
17400: ST_TO_ADDR
// sDiff := false ;
17401: LD_ADDR_EXP 59
17405: PUSH
17406: LD_INT 0
17408: ST_TO_ADDR
// sFog := false ;
17409: LD_ADDR_EXP 62
17413: PUSH
17414: LD_INT 0
17416: ST_TO_ADDR
// sReset := false ;
17417: LD_ADDR_EXP 63
17421: PUSH
17422: LD_INT 0
17424: ST_TO_ADDR
// sSun := false ;
17425: LD_ADDR_EXP 64
17429: PUSH
17430: LD_INT 0
17432: ST_TO_ADDR
// sTiger := false ;
17433: LD_ADDR_EXP 60
17437: PUSH
17438: LD_INT 0
17440: ST_TO_ADDR
// sBomb := false ;
17441: LD_ADDR_EXP 61
17445: PUSH
17446: LD_INT 0
17448: ST_TO_ADDR
// sWound := false ;
17449: LD_ADDR_EXP 69
17453: PUSH
17454: LD_INT 0
17456: ST_TO_ADDR
// sBetray := false ;
17457: LD_ADDR_EXP 73
17461: PUSH
17462: LD_INT 0
17464: ST_TO_ADDR
// sContamin := false ;
17465: LD_ADDR_EXP 74
17469: PUSH
17470: LD_INT 0
17472: ST_TO_ADDR
// sOil := false ;
17473: LD_ADDR_EXP 76
17477: PUSH
17478: LD_INT 0
17480: ST_TO_ADDR
// sStu := false ;
17481: LD_ADDR_EXP 80
17485: PUSH
17486: LD_INT 0
17488: ST_TO_ADDR
// sBazooka := false ;
17489: LD_ADDR_EXP 83
17493: PUSH
17494: LD_INT 0
17496: ST_TO_ADDR
// sMortar := false ;
17497: LD_ADDR_EXP 84
17501: PUSH
17502: LD_INT 0
17504: ST_TO_ADDR
// sRanger := false ;
17505: LD_ADDR_EXP 94
17509: PUSH
17510: LD_INT 0
17512: ST_TO_ADDR
// sComputer := false ;
17513: LD_ADDR_EXP 95
17517: PUSH
17518: LD_INT 0
17520: ST_TO_ADDR
// s30 := false ;
17521: LD_ADDR_EXP 96
17525: PUSH
17526: LD_INT 0
17528: ST_TO_ADDR
// s60 := false ;
17529: LD_ADDR_EXP 97
17533: PUSH
17534: LD_INT 0
17536: ST_TO_ADDR
// end ;
17537: LD_VAR 0 1
17541: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17542: LD_INT 0
17544: PPUSH
17545: PPUSH
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
// result := [ ] ;
17551: LD_ADDR_VAR 0 2
17555: PUSH
17556: EMPTY
17557: ST_TO_ADDR
// if campaign_id = 1 then
17558: LD_OWVAR 69
17562: PUSH
17563: LD_INT 1
17565: EQUAL
17566: IFFALSE 20732
// begin case mission_number of 1 :
17568: LD_OWVAR 70
17572: PUSH
17573: LD_INT 1
17575: DOUBLE
17576: EQUAL
17577: IFTRUE 17581
17579: GO 17657
17581: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17582: LD_ADDR_VAR 0 2
17586: PUSH
17587: LD_INT 2
17589: PUSH
17590: LD_INT 4
17592: PUSH
17593: LD_INT 11
17595: PUSH
17596: LD_INT 12
17598: PUSH
17599: LD_INT 15
17601: PUSH
17602: LD_INT 16
17604: PUSH
17605: LD_INT 22
17607: PUSH
17608: LD_INT 23
17610: PUSH
17611: LD_INT 26
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 101
17627: PUSH
17628: LD_INT 102
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: LD_INT 116
17636: PUSH
17637: LD_INT 117
17639: PUSH
17640: LD_INT 118
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: ST_TO_ADDR
17655: GO 20730
17657: LD_INT 2
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17749
17665: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17666: LD_ADDR_VAR 0 2
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: LD_INT 4
17676: PUSH
17677: LD_INT 11
17679: PUSH
17680: LD_INT 12
17682: PUSH
17683: LD_INT 15
17685: PUSH
17686: LD_INT 16
17688: PUSH
17689: LD_INT 22
17691: PUSH
17692: LD_INT 23
17694: PUSH
17695: LD_INT 26
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 101
17711: PUSH
17712: LD_INT 102
17714: PUSH
17715: LD_INT 105
17717: PUSH
17718: LD_INT 106
17720: PUSH
17721: LD_INT 108
17723: PUSH
17724: LD_INT 116
17726: PUSH
17727: LD_INT 117
17729: PUSH
17730: LD_INT 118
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: ST_TO_ADDR
17747: GO 20730
17749: LD_INT 3
17751: DOUBLE
17752: EQUAL
17753: IFTRUE 17757
17755: GO 17845
17757: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17758: LD_ADDR_VAR 0 2
17762: PUSH
17763: LD_INT 2
17765: PUSH
17766: LD_INT 4
17768: PUSH
17769: LD_INT 5
17771: PUSH
17772: LD_INT 11
17774: PUSH
17775: LD_INT 12
17777: PUSH
17778: LD_INT 15
17780: PUSH
17781: LD_INT 16
17783: PUSH
17784: LD_INT 22
17786: PUSH
17787: LD_INT 26
17789: PUSH
17790: LD_INT 36
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 101
17807: PUSH
17808: LD_INT 102
17810: PUSH
17811: LD_INT 105
17813: PUSH
17814: LD_INT 106
17816: PUSH
17817: LD_INT 108
17819: PUSH
17820: LD_INT 116
17822: PUSH
17823: LD_INT 117
17825: PUSH
17826: LD_INT 118
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: ST_TO_ADDR
17843: GO 20730
17845: LD_INT 4
17847: DOUBLE
17848: EQUAL
17849: IFTRUE 17853
17851: GO 17949
17853: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17854: LD_ADDR_VAR 0 2
17858: PUSH
17859: LD_INT 2
17861: PUSH
17862: LD_INT 4
17864: PUSH
17865: LD_INT 5
17867: PUSH
17868: LD_INT 8
17870: PUSH
17871: LD_INT 11
17873: PUSH
17874: LD_INT 12
17876: PUSH
17877: LD_INT 15
17879: PUSH
17880: LD_INT 16
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_INT 23
17888: PUSH
17889: LD_INT 26
17891: PUSH
17892: LD_INT 36
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 101
17911: PUSH
17912: LD_INT 102
17914: PUSH
17915: LD_INT 105
17917: PUSH
17918: LD_INT 106
17920: PUSH
17921: LD_INT 108
17923: PUSH
17924: LD_INT 116
17926: PUSH
17927: LD_INT 117
17929: PUSH
17930: LD_INT 118
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: ST_TO_ADDR
17947: GO 20730
17949: LD_INT 5
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17957
17955: GO 18069
17957: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17958: LD_ADDR_VAR 0 2
17962: PUSH
17963: LD_INT 2
17965: PUSH
17966: LD_INT 4
17968: PUSH
17969: LD_INT 5
17971: PUSH
17972: LD_INT 6
17974: PUSH
17975: LD_INT 8
17977: PUSH
17978: LD_INT 11
17980: PUSH
17981: LD_INT 12
17983: PUSH
17984: LD_INT 15
17986: PUSH
17987: LD_INT 16
17989: PUSH
17990: LD_INT 22
17992: PUSH
17993: LD_INT 23
17995: PUSH
17996: LD_INT 25
17998: PUSH
17999: LD_INT 26
18001: PUSH
18002: LD_INT 36
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 101
18023: PUSH
18024: LD_INT 102
18026: PUSH
18027: LD_INT 105
18029: PUSH
18030: LD_INT 106
18032: PUSH
18033: LD_INT 108
18035: PUSH
18036: LD_INT 109
18038: PUSH
18039: LD_INT 112
18041: PUSH
18042: LD_INT 116
18044: PUSH
18045: LD_INT 117
18047: PUSH
18048: LD_INT 118
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: ST_TO_ADDR
18067: GO 20730
18069: LD_INT 6
18071: DOUBLE
18072: EQUAL
18073: IFTRUE 18077
18075: GO 18209
18077: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18078: LD_ADDR_VAR 0 2
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: LD_INT 4
18088: PUSH
18089: LD_INT 5
18091: PUSH
18092: LD_INT 6
18094: PUSH
18095: LD_INT 8
18097: PUSH
18098: LD_INT 11
18100: PUSH
18101: LD_INT 12
18103: PUSH
18104: LD_INT 15
18106: PUSH
18107: LD_INT 16
18109: PUSH
18110: LD_INT 20
18112: PUSH
18113: LD_INT 21
18115: PUSH
18116: LD_INT 22
18118: PUSH
18119: LD_INT 23
18121: PUSH
18122: LD_INT 25
18124: PUSH
18125: LD_INT 26
18127: PUSH
18128: LD_INT 30
18130: PUSH
18131: LD_INT 31
18133: PUSH
18134: LD_INT 32
18136: PUSH
18137: LD_INT 36
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 101
18163: PUSH
18164: LD_INT 102
18166: PUSH
18167: LD_INT 105
18169: PUSH
18170: LD_INT 106
18172: PUSH
18173: LD_INT 108
18175: PUSH
18176: LD_INT 109
18178: PUSH
18179: LD_INT 112
18181: PUSH
18182: LD_INT 116
18184: PUSH
18185: LD_INT 117
18187: PUSH
18188: LD_INT 118
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: ST_TO_ADDR
18207: GO 20730
18209: LD_INT 7
18211: DOUBLE
18212: EQUAL
18213: IFTRUE 18217
18215: GO 18329
18217: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18218: LD_ADDR_VAR 0 2
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: LD_INT 4
18228: PUSH
18229: LD_INT 5
18231: PUSH
18232: LD_INT 7
18234: PUSH
18235: LD_INT 11
18237: PUSH
18238: LD_INT 12
18240: PUSH
18241: LD_INT 15
18243: PUSH
18244: LD_INT 16
18246: PUSH
18247: LD_INT 20
18249: PUSH
18250: LD_INT 21
18252: PUSH
18253: LD_INT 22
18255: PUSH
18256: LD_INT 23
18258: PUSH
18259: LD_INT 25
18261: PUSH
18262: LD_INT 26
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 101
18283: PUSH
18284: LD_INT 102
18286: PUSH
18287: LD_INT 103
18289: PUSH
18290: LD_INT 105
18292: PUSH
18293: LD_INT 106
18295: PUSH
18296: LD_INT 108
18298: PUSH
18299: LD_INT 112
18301: PUSH
18302: LD_INT 116
18304: PUSH
18305: LD_INT 117
18307: PUSH
18308: LD_INT 118
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: ST_TO_ADDR
18327: GO 20730
18329: LD_INT 8
18331: DOUBLE
18332: EQUAL
18333: IFTRUE 18337
18335: GO 18477
18337: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18338: LD_ADDR_VAR 0 2
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: LD_INT 4
18348: PUSH
18349: LD_INT 5
18351: PUSH
18352: LD_INT 6
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: LD_INT 8
18360: PUSH
18361: LD_INT 11
18363: PUSH
18364: LD_INT 12
18366: PUSH
18367: LD_INT 15
18369: PUSH
18370: LD_INT 16
18372: PUSH
18373: LD_INT 20
18375: PUSH
18376: LD_INT 21
18378: PUSH
18379: LD_INT 22
18381: PUSH
18382: LD_INT 23
18384: PUSH
18385: LD_INT 25
18387: PUSH
18388: LD_INT 26
18390: PUSH
18391: LD_INT 30
18393: PUSH
18394: LD_INT 31
18396: PUSH
18397: LD_INT 32
18399: PUSH
18400: LD_INT 36
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 101
18427: PUSH
18428: LD_INT 102
18430: PUSH
18431: LD_INT 103
18433: PUSH
18434: LD_INT 105
18436: PUSH
18437: LD_INT 106
18439: PUSH
18440: LD_INT 108
18442: PUSH
18443: LD_INT 109
18445: PUSH
18446: LD_INT 112
18448: PUSH
18449: LD_INT 116
18451: PUSH
18452: LD_INT 117
18454: PUSH
18455: LD_INT 118
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: ST_TO_ADDR
18475: GO 20730
18477: LD_INT 9
18479: DOUBLE
18480: EQUAL
18481: IFTRUE 18485
18483: GO 18633
18485: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 2
18493: PUSH
18494: LD_INT 4
18496: PUSH
18497: LD_INT 5
18499: PUSH
18500: LD_INT 6
18502: PUSH
18503: LD_INT 7
18505: PUSH
18506: LD_INT 8
18508: PUSH
18509: LD_INT 11
18511: PUSH
18512: LD_INT 12
18514: PUSH
18515: LD_INT 15
18517: PUSH
18518: LD_INT 16
18520: PUSH
18521: LD_INT 20
18523: PUSH
18524: LD_INT 21
18526: PUSH
18527: LD_INT 22
18529: PUSH
18530: LD_INT 23
18532: PUSH
18533: LD_INT 25
18535: PUSH
18536: LD_INT 26
18538: PUSH
18539: LD_INT 28
18541: PUSH
18542: LD_INT 30
18544: PUSH
18545: LD_INT 31
18547: PUSH
18548: LD_INT 32
18550: PUSH
18551: LD_INT 36
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 101
18579: PUSH
18580: LD_INT 102
18582: PUSH
18583: LD_INT 103
18585: PUSH
18586: LD_INT 105
18588: PUSH
18589: LD_INT 106
18591: PUSH
18592: LD_INT 108
18594: PUSH
18595: LD_INT 109
18597: PUSH
18598: LD_INT 112
18600: PUSH
18601: LD_INT 114
18603: PUSH
18604: LD_INT 116
18606: PUSH
18607: LD_INT 117
18609: PUSH
18610: LD_INT 118
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: ST_TO_ADDR
18631: GO 20730
18633: LD_INT 10
18635: DOUBLE
18636: EQUAL
18637: IFTRUE 18641
18639: GO 18837
18641: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18642: LD_ADDR_VAR 0 2
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: LD_INT 4
18652: PUSH
18653: LD_INT 5
18655: PUSH
18656: LD_INT 6
18658: PUSH
18659: LD_INT 7
18661: PUSH
18662: LD_INT 8
18664: PUSH
18665: LD_INT 9
18667: PUSH
18668: LD_INT 10
18670: PUSH
18671: LD_INT 11
18673: PUSH
18674: LD_INT 12
18676: PUSH
18677: LD_INT 13
18679: PUSH
18680: LD_INT 14
18682: PUSH
18683: LD_INT 15
18685: PUSH
18686: LD_INT 16
18688: PUSH
18689: LD_INT 17
18691: PUSH
18692: LD_INT 18
18694: PUSH
18695: LD_INT 19
18697: PUSH
18698: LD_INT 20
18700: PUSH
18701: LD_INT 21
18703: PUSH
18704: LD_INT 22
18706: PUSH
18707: LD_INT 23
18709: PUSH
18710: LD_INT 24
18712: PUSH
18713: LD_INT 25
18715: PUSH
18716: LD_INT 26
18718: PUSH
18719: LD_INT 28
18721: PUSH
18722: LD_INT 30
18724: PUSH
18725: LD_INT 31
18727: PUSH
18728: LD_INT 32
18730: PUSH
18731: LD_INT 36
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 101
18767: PUSH
18768: LD_INT 102
18770: PUSH
18771: LD_INT 103
18773: PUSH
18774: LD_INT 104
18776: PUSH
18777: LD_INT 105
18779: PUSH
18780: LD_INT 106
18782: PUSH
18783: LD_INT 107
18785: PUSH
18786: LD_INT 108
18788: PUSH
18789: LD_INT 109
18791: PUSH
18792: LD_INT 110
18794: PUSH
18795: LD_INT 111
18797: PUSH
18798: LD_INT 112
18800: PUSH
18801: LD_INT 114
18803: PUSH
18804: LD_INT 116
18806: PUSH
18807: LD_INT 117
18809: PUSH
18810: LD_INT 118
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: ST_TO_ADDR
18835: GO 20730
18837: LD_INT 11
18839: DOUBLE
18840: EQUAL
18841: IFTRUE 18845
18843: GO 19049
18845: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18846: LD_ADDR_VAR 0 2
18850: PUSH
18851: LD_INT 2
18853: PUSH
18854: LD_INT 3
18856: PUSH
18857: LD_INT 4
18859: PUSH
18860: LD_INT 5
18862: PUSH
18863: LD_INT 6
18865: PUSH
18866: LD_INT 7
18868: PUSH
18869: LD_INT 8
18871: PUSH
18872: LD_INT 9
18874: PUSH
18875: LD_INT 10
18877: PUSH
18878: LD_INT 11
18880: PUSH
18881: LD_INT 12
18883: PUSH
18884: LD_INT 13
18886: PUSH
18887: LD_INT 14
18889: PUSH
18890: LD_INT 15
18892: PUSH
18893: LD_INT 16
18895: PUSH
18896: LD_INT 17
18898: PUSH
18899: LD_INT 18
18901: PUSH
18902: LD_INT 19
18904: PUSH
18905: LD_INT 20
18907: PUSH
18908: LD_INT 21
18910: PUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 23
18916: PUSH
18917: LD_INT 24
18919: PUSH
18920: LD_INT 25
18922: PUSH
18923: LD_INT 26
18925: PUSH
18926: LD_INT 28
18928: PUSH
18929: LD_INT 30
18931: PUSH
18932: LD_INT 31
18934: PUSH
18935: LD_INT 32
18937: PUSH
18938: LD_INT 34
18940: PUSH
18941: LD_INT 36
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 101
18979: PUSH
18980: LD_INT 102
18982: PUSH
18983: LD_INT 103
18985: PUSH
18986: LD_INT 104
18988: PUSH
18989: LD_INT 105
18991: PUSH
18992: LD_INT 106
18994: PUSH
18995: LD_INT 107
18997: PUSH
18998: LD_INT 108
19000: PUSH
19001: LD_INT 109
19003: PUSH
19004: LD_INT 110
19006: PUSH
19007: LD_INT 111
19009: PUSH
19010: LD_INT 112
19012: PUSH
19013: LD_INT 114
19015: PUSH
19016: LD_INT 116
19018: PUSH
19019: LD_INT 117
19021: PUSH
19022: LD_INT 118
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: ST_TO_ADDR
19047: GO 20730
19049: LD_INT 12
19051: DOUBLE
19052: EQUAL
19053: IFTRUE 19057
19055: GO 19277
19057: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19058: LD_ADDR_VAR 0 2
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: LD_INT 3
19071: PUSH
19072: LD_INT 4
19074: PUSH
19075: LD_INT 5
19077: PUSH
19078: LD_INT 6
19080: PUSH
19081: LD_INT 7
19083: PUSH
19084: LD_INT 8
19086: PUSH
19087: LD_INT 9
19089: PUSH
19090: LD_INT 10
19092: PUSH
19093: LD_INT 11
19095: PUSH
19096: LD_INT 12
19098: PUSH
19099: LD_INT 13
19101: PUSH
19102: LD_INT 14
19104: PUSH
19105: LD_INT 15
19107: PUSH
19108: LD_INT 16
19110: PUSH
19111: LD_INT 17
19113: PUSH
19114: LD_INT 18
19116: PUSH
19117: LD_INT 19
19119: PUSH
19120: LD_INT 20
19122: PUSH
19123: LD_INT 21
19125: PUSH
19126: LD_INT 22
19128: PUSH
19129: LD_INT 23
19131: PUSH
19132: LD_INT 24
19134: PUSH
19135: LD_INT 25
19137: PUSH
19138: LD_INT 26
19140: PUSH
19141: LD_INT 27
19143: PUSH
19144: LD_INT 28
19146: PUSH
19147: LD_INT 30
19149: PUSH
19150: LD_INT 31
19152: PUSH
19153: LD_INT 32
19155: PUSH
19156: LD_INT 33
19158: PUSH
19159: LD_INT 34
19161: PUSH
19162: LD_INT 36
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 101
19203: PUSH
19204: LD_INT 102
19206: PUSH
19207: LD_INT 103
19209: PUSH
19210: LD_INT 104
19212: PUSH
19213: LD_INT 105
19215: PUSH
19216: LD_INT 106
19218: PUSH
19219: LD_INT 107
19221: PUSH
19222: LD_INT 108
19224: PUSH
19225: LD_INT 109
19227: PUSH
19228: LD_INT 110
19230: PUSH
19231: LD_INT 111
19233: PUSH
19234: LD_INT 112
19236: PUSH
19237: LD_INT 113
19239: PUSH
19240: LD_INT 114
19242: PUSH
19243: LD_INT 116
19245: PUSH
19246: LD_INT 117
19248: PUSH
19249: LD_INT 118
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: ST_TO_ADDR
19275: GO 20730
19277: LD_INT 13
19279: DOUBLE
19280: EQUAL
19281: IFTRUE 19285
19283: GO 19493
19285: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19286: LD_ADDR_VAR 0 2
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: LD_INT 3
19299: PUSH
19300: LD_INT 4
19302: PUSH
19303: LD_INT 5
19305: PUSH
19306: LD_INT 8
19308: PUSH
19309: LD_INT 9
19311: PUSH
19312: LD_INT 10
19314: PUSH
19315: LD_INT 11
19317: PUSH
19318: LD_INT 12
19320: PUSH
19321: LD_INT 14
19323: PUSH
19324: LD_INT 15
19326: PUSH
19327: LD_INT 16
19329: PUSH
19330: LD_INT 17
19332: PUSH
19333: LD_INT 18
19335: PUSH
19336: LD_INT 19
19338: PUSH
19339: LD_INT 20
19341: PUSH
19342: LD_INT 21
19344: PUSH
19345: LD_INT 22
19347: PUSH
19348: LD_INT 23
19350: PUSH
19351: LD_INT 24
19353: PUSH
19354: LD_INT 25
19356: PUSH
19357: LD_INT 26
19359: PUSH
19360: LD_INT 27
19362: PUSH
19363: LD_INT 28
19365: PUSH
19366: LD_INT 30
19368: PUSH
19369: LD_INT 31
19371: PUSH
19372: LD_INT 32
19374: PUSH
19375: LD_INT 33
19377: PUSH
19378: LD_INT 34
19380: PUSH
19381: LD_INT 36
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 101
19419: PUSH
19420: LD_INT 102
19422: PUSH
19423: LD_INT 103
19425: PUSH
19426: LD_INT 104
19428: PUSH
19429: LD_INT 105
19431: PUSH
19432: LD_INT 106
19434: PUSH
19435: LD_INT 107
19437: PUSH
19438: LD_INT 108
19440: PUSH
19441: LD_INT 109
19443: PUSH
19444: LD_INT 110
19446: PUSH
19447: LD_INT 111
19449: PUSH
19450: LD_INT 112
19452: PUSH
19453: LD_INT 113
19455: PUSH
19456: LD_INT 114
19458: PUSH
19459: LD_INT 116
19461: PUSH
19462: LD_INT 117
19464: PUSH
19465: LD_INT 118
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: ST_TO_ADDR
19491: GO 20730
19493: LD_INT 14
19495: DOUBLE
19496: EQUAL
19497: IFTRUE 19501
19499: GO 19725
19501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19502: LD_ADDR_VAR 0 2
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: LD_INT 2
19512: PUSH
19513: LD_INT 3
19515: PUSH
19516: LD_INT 4
19518: PUSH
19519: LD_INT 5
19521: PUSH
19522: LD_INT 6
19524: PUSH
19525: LD_INT 7
19527: PUSH
19528: LD_INT 8
19530: PUSH
19531: LD_INT 9
19533: PUSH
19534: LD_INT 10
19536: PUSH
19537: LD_INT 11
19539: PUSH
19540: LD_INT 12
19542: PUSH
19543: LD_INT 13
19545: PUSH
19546: LD_INT 14
19548: PUSH
19549: LD_INT 15
19551: PUSH
19552: LD_INT 16
19554: PUSH
19555: LD_INT 17
19557: PUSH
19558: LD_INT 18
19560: PUSH
19561: LD_INT 19
19563: PUSH
19564: LD_INT 20
19566: PUSH
19567: LD_INT 21
19569: PUSH
19570: LD_INT 22
19572: PUSH
19573: LD_INT 23
19575: PUSH
19576: LD_INT 24
19578: PUSH
19579: LD_INT 25
19581: PUSH
19582: LD_INT 26
19584: PUSH
19585: LD_INT 27
19587: PUSH
19588: LD_INT 28
19590: PUSH
19591: LD_INT 29
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 31
19599: PUSH
19600: LD_INT 32
19602: PUSH
19603: LD_INT 33
19605: PUSH
19606: LD_INT 34
19608: PUSH
19609: LD_INT 36
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 101
19651: PUSH
19652: LD_INT 102
19654: PUSH
19655: LD_INT 103
19657: PUSH
19658: LD_INT 104
19660: PUSH
19661: LD_INT 105
19663: PUSH
19664: LD_INT 106
19666: PUSH
19667: LD_INT 107
19669: PUSH
19670: LD_INT 108
19672: PUSH
19673: LD_INT 109
19675: PUSH
19676: LD_INT 110
19678: PUSH
19679: LD_INT 111
19681: PUSH
19682: LD_INT 112
19684: PUSH
19685: LD_INT 113
19687: PUSH
19688: LD_INT 114
19690: PUSH
19691: LD_INT 116
19693: PUSH
19694: LD_INT 117
19696: PUSH
19697: LD_INT 118
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: ST_TO_ADDR
19723: GO 20730
19725: LD_INT 15
19727: DOUBLE
19728: EQUAL
19729: IFTRUE 19733
19731: GO 19957
19733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19734: LD_ADDR_VAR 0 2
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: LD_INT 3
19747: PUSH
19748: LD_INT 4
19750: PUSH
19751: LD_INT 5
19753: PUSH
19754: LD_INT 6
19756: PUSH
19757: LD_INT 7
19759: PUSH
19760: LD_INT 8
19762: PUSH
19763: LD_INT 9
19765: PUSH
19766: LD_INT 10
19768: PUSH
19769: LD_INT 11
19771: PUSH
19772: LD_INT 12
19774: PUSH
19775: LD_INT 13
19777: PUSH
19778: LD_INT 14
19780: PUSH
19781: LD_INT 15
19783: PUSH
19784: LD_INT 16
19786: PUSH
19787: LD_INT 17
19789: PUSH
19790: LD_INT 18
19792: PUSH
19793: LD_INT 19
19795: PUSH
19796: LD_INT 20
19798: PUSH
19799: LD_INT 21
19801: PUSH
19802: LD_INT 22
19804: PUSH
19805: LD_INT 23
19807: PUSH
19808: LD_INT 24
19810: PUSH
19811: LD_INT 25
19813: PUSH
19814: LD_INT 26
19816: PUSH
19817: LD_INT 27
19819: PUSH
19820: LD_INT 28
19822: PUSH
19823: LD_INT 29
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: LD_INT 31
19831: PUSH
19832: LD_INT 32
19834: PUSH
19835: LD_INT 33
19837: PUSH
19838: LD_INT 34
19840: PUSH
19841: LD_INT 36
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 101
19883: PUSH
19884: LD_INT 102
19886: PUSH
19887: LD_INT 103
19889: PUSH
19890: LD_INT 104
19892: PUSH
19893: LD_INT 105
19895: PUSH
19896: LD_INT 106
19898: PUSH
19899: LD_INT 107
19901: PUSH
19902: LD_INT 108
19904: PUSH
19905: LD_INT 109
19907: PUSH
19908: LD_INT 110
19910: PUSH
19911: LD_INT 111
19913: PUSH
19914: LD_INT 112
19916: PUSH
19917: LD_INT 113
19919: PUSH
19920: LD_INT 114
19922: PUSH
19923: LD_INT 116
19925: PUSH
19926: LD_INT 117
19928: PUSH
19929: LD_INT 118
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: ST_TO_ADDR
19955: GO 20730
19957: LD_INT 16
19959: DOUBLE
19960: EQUAL
19961: IFTRUE 19965
19963: GO 20101
19965: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19966: LD_ADDR_VAR 0 2
19970: PUSH
19971: LD_INT 2
19973: PUSH
19974: LD_INT 4
19976: PUSH
19977: LD_INT 5
19979: PUSH
19980: LD_INT 7
19982: PUSH
19983: LD_INT 11
19985: PUSH
19986: LD_INT 12
19988: PUSH
19989: LD_INT 15
19991: PUSH
19992: LD_INT 16
19994: PUSH
19995: LD_INT 20
19997: PUSH
19998: LD_INT 21
20000: PUSH
20001: LD_INT 22
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 25
20009: PUSH
20010: LD_INT 26
20012: PUSH
20013: LD_INT 30
20015: PUSH
20016: LD_INT 31
20018: PUSH
20019: LD_INT 32
20021: PUSH
20022: LD_INT 33
20024: PUSH
20025: LD_INT 34
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 101
20051: PUSH
20052: LD_INT 102
20054: PUSH
20055: LD_INT 103
20057: PUSH
20058: LD_INT 106
20060: PUSH
20061: LD_INT 108
20063: PUSH
20064: LD_INT 112
20066: PUSH
20067: LD_INT 113
20069: PUSH
20070: LD_INT 114
20072: PUSH
20073: LD_INT 116
20075: PUSH
20076: LD_INT 117
20078: PUSH
20079: LD_INT 118
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: ST_TO_ADDR
20099: GO 20730
20101: LD_INT 17
20103: DOUBLE
20104: EQUAL
20105: IFTRUE 20109
20107: GO 20333
20109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20110: LD_ADDR_VAR 0 2
20114: PUSH
20115: LD_INT 1
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: LD_INT 3
20123: PUSH
20124: LD_INT 4
20126: PUSH
20127: LD_INT 5
20129: PUSH
20130: LD_INT 6
20132: PUSH
20133: LD_INT 7
20135: PUSH
20136: LD_INT 8
20138: PUSH
20139: LD_INT 9
20141: PUSH
20142: LD_INT 10
20144: PUSH
20145: LD_INT 11
20147: PUSH
20148: LD_INT 12
20150: PUSH
20151: LD_INT 13
20153: PUSH
20154: LD_INT 14
20156: PUSH
20157: LD_INT 15
20159: PUSH
20160: LD_INT 16
20162: PUSH
20163: LD_INT 17
20165: PUSH
20166: LD_INT 18
20168: PUSH
20169: LD_INT 19
20171: PUSH
20172: LD_INT 20
20174: PUSH
20175: LD_INT 21
20177: PUSH
20178: LD_INT 22
20180: PUSH
20181: LD_INT 23
20183: PUSH
20184: LD_INT 24
20186: PUSH
20187: LD_INT 25
20189: PUSH
20190: LD_INT 26
20192: PUSH
20193: LD_INT 27
20195: PUSH
20196: LD_INT 28
20198: PUSH
20199: LD_INT 29
20201: PUSH
20202: LD_INT 30
20204: PUSH
20205: LD_INT 31
20207: PUSH
20208: LD_INT 32
20210: PUSH
20211: LD_INT 33
20213: PUSH
20214: LD_INT 34
20216: PUSH
20217: LD_INT 36
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 101
20259: PUSH
20260: LD_INT 102
20262: PUSH
20263: LD_INT 103
20265: PUSH
20266: LD_INT 104
20268: PUSH
20269: LD_INT 105
20271: PUSH
20272: LD_INT 106
20274: PUSH
20275: LD_INT 107
20277: PUSH
20278: LD_INT 108
20280: PUSH
20281: LD_INT 109
20283: PUSH
20284: LD_INT 110
20286: PUSH
20287: LD_INT 111
20289: PUSH
20290: LD_INT 112
20292: PUSH
20293: LD_INT 113
20295: PUSH
20296: LD_INT 114
20298: PUSH
20299: LD_INT 116
20301: PUSH
20302: LD_INT 117
20304: PUSH
20305: LD_INT 118
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: ST_TO_ADDR
20331: GO 20730
20333: LD_INT 18
20335: DOUBLE
20336: EQUAL
20337: IFTRUE 20341
20339: GO 20489
20341: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20342: LD_ADDR_VAR 0 2
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: LD_INT 4
20352: PUSH
20353: LD_INT 5
20355: PUSH
20356: LD_INT 7
20358: PUSH
20359: LD_INT 11
20361: PUSH
20362: LD_INT 12
20364: PUSH
20365: LD_INT 15
20367: PUSH
20368: LD_INT 16
20370: PUSH
20371: LD_INT 20
20373: PUSH
20374: LD_INT 21
20376: PUSH
20377: LD_INT 22
20379: PUSH
20380: LD_INT 23
20382: PUSH
20383: LD_INT 25
20385: PUSH
20386: LD_INT 26
20388: PUSH
20389: LD_INT 30
20391: PUSH
20392: LD_INT 31
20394: PUSH
20395: LD_INT 32
20397: PUSH
20398: LD_INT 33
20400: PUSH
20401: LD_INT 34
20403: PUSH
20404: LD_INT 35
20406: PUSH
20407: LD_INT 36
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 101
20435: PUSH
20436: LD_INT 102
20438: PUSH
20439: LD_INT 103
20441: PUSH
20442: LD_INT 106
20444: PUSH
20445: LD_INT 108
20447: PUSH
20448: LD_INT 112
20450: PUSH
20451: LD_INT 113
20453: PUSH
20454: LD_INT 114
20456: PUSH
20457: LD_INT 115
20459: PUSH
20460: LD_INT 116
20462: PUSH
20463: LD_INT 117
20465: PUSH
20466: LD_INT 118
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: ST_TO_ADDR
20487: GO 20730
20489: LD_INT 19
20491: DOUBLE
20492: EQUAL
20493: IFTRUE 20497
20495: GO 20729
20497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20498: LD_ADDR_VAR 0 2
20502: PUSH
20503: LD_INT 1
20505: PUSH
20506: LD_INT 2
20508: PUSH
20509: LD_INT 3
20511: PUSH
20512: LD_INT 4
20514: PUSH
20515: LD_INT 5
20517: PUSH
20518: LD_INT 6
20520: PUSH
20521: LD_INT 7
20523: PUSH
20524: LD_INT 8
20526: PUSH
20527: LD_INT 9
20529: PUSH
20530: LD_INT 10
20532: PUSH
20533: LD_INT 11
20535: PUSH
20536: LD_INT 12
20538: PUSH
20539: LD_INT 13
20541: PUSH
20542: LD_INT 14
20544: PUSH
20545: LD_INT 15
20547: PUSH
20548: LD_INT 16
20550: PUSH
20551: LD_INT 17
20553: PUSH
20554: LD_INT 18
20556: PUSH
20557: LD_INT 19
20559: PUSH
20560: LD_INT 20
20562: PUSH
20563: LD_INT 21
20565: PUSH
20566: LD_INT 22
20568: PUSH
20569: LD_INT 23
20571: PUSH
20572: LD_INT 24
20574: PUSH
20575: LD_INT 25
20577: PUSH
20578: LD_INT 26
20580: PUSH
20581: LD_INT 27
20583: PUSH
20584: LD_INT 28
20586: PUSH
20587: LD_INT 29
20589: PUSH
20590: LD_INT 30
20592: PUSH
20593: LD_INT 31
20595: PUSH
20596: LD_INT 32
20598: PUSH
20599: LD_INT 33
20601: PUSH
20602: LD_INT 34
20604: PUSH
20605: LD_INT 35
20607: PUSH
20608: LD_INT 36
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 101
20651: PUSH
20652: LD_INT 102
20654: PUSH
20655: LD_INT 103
20657: PUSH
20658: LD_INT 104
20660: PUSH
20661: LD_INT 105
20663: PUSH
20664: LD_INT 106
20666: PUSH
20667: LD_INT 107
20669: PUSH
20670: LD_INT 108
20672: PUSH
20673: LD_INT 109
20675: PUSH
20676: LD_INT 110
20678: PUSH
20679: LD_INT 111
20681: PUSH
20682: LD_INT 112
20684: PUSH
20685: LD_INT 113
20687: PUSH
20688: LD_INT 114
20690: PUSH
20691: LD_INT 115
20693: PUSH
20694: LD_INT 116
20696: PUSH
20697: LD_INT 117
20699: PUSH
20700: LD_INT 118
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: ST_TO_ADDR
20727: GO 20730
20729: POP
// end else
20730: GO 20961
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20732: LD_ADDR_VAR 0 2
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 3
20745: PUSH
20746: LD_INT 4
20748: PUSH
20749: LD_INT 5
20751: PUSH
20752: LD_INT 6
20754: PUSH
20755: LD_INT 7
20757: PUSH
20758: LD_INT 8
20760: PUSH
20761: LD_INT 9
20763: PUSH
20764: LD_INT 10
20766: PUSH
20767: LD_INT 11
20769: PUSH
20770: LD_INT 12
20772: PUSH
20773: LD_INT 13
20775: PUSH
20776: LD_INT 14
20778: PUSH
20779: LD_INT 15
20781: PUSH
20782: LD_INT 16
20784: PUSH
20785: LD_INT 17
20787: PUSH
20788: LD_INT 18
20790: PUSH
20791: LD_INT 19
20793: PUSH
20794: LD_INT 20
20796: PUSH
20797: LD_INT 21
20799: PUSH
20800: LD_INT 22
20802: PUSH
20803: LD_INT 23
20805: PUSH
20806: LD_INT 24
20808: PUSH
20809: LD_INT 25
20811: PUSH
20812: LD_INT 26
20814: PUSH
20815: LD_INT 27
20817: PUSH
20818: LD_INT 28
20820: PUSH
20821: LD_INT 29
20823: PUSH
20824: LD_INT 30
20826: PUSH
20827: LD_INT 31
20829: PUSH
20830: LD_INT 32
20832: PUSH
20833: LD_INT 33
20835: PUSH
20836: LD_INT 34
20838: PUSH
20839: LD_INT 35
20841: PUSH
20842: LD_INT 36
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 101
20885: PUSH
20886: LD_INT 102
20888: PUSH
20889: LD_INT 103
20891: PUSH
20892: LD_INT 104
20894: PUSH
20895: LD_INT 105
20897: PUSH
20898: LD_INT 106
20900: PUSH
20901: LD_INT 107
20903: PUSH
20904: LD_INT 108
20906: PUSH
20907: LD_INT 109
20909: PUSH
20910: LD_INT 110
20912: PUSH
20913: LD_INT 111
20915: PUSH
20916: LD_INT 112
20918: PUSH
20919: LD_INT 113
20921: PUSH
20922: LD_INT 114
20924: PUSH
20925: LD_INT 115
20927: PUSH
20928: LD_INT 116
20930: PUSH
20931: LD_INT 117
20933: PUSH
20934: LD_INT 118
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: ST_TO_ADDR
// if result then
20961: LD_VAR 0 2
20965: IFFALSE 21751
// begin normal :=  ;
20967: LD_ADDR_VAR 0 5
20971: PUSH
20972: LD_STRING 
20974: ST_TO_ADDR
// hardcore :=  ;
20975: LD_ADDR_VAR 0 6
20979: PUSH
20980: LD_STRING 
20982: ST_TO_ADDR
// active :=  ;
20983: LD_ADDR_VAR 0 7
20987: PUSH
20988: LD_STRING 
20990: ST_TO_ADDR
// for i = 1 to normalCounter do
20991: LD_ADDR_VAR 0 8
20995: PUSH
20996: DOUBLE
20997: LD_INT 1
20999: DEC
21000: ST_TO_ADDR
21001: LD_EXP 42
21005: PUSH
21006: FOR_TO
21007: IFFALSE 21108
// begin tmp := 0 ;
21009: LD_ADDR_VAR 0 3
21013: PUSH
21014: LD_STRING 0
21016: ST_TO_ADDR
// if result [ 1 ] then
21017: LD_VAR 0 2
21021: PUSH
21022: LD_INT 1
21024: ARRAY
21025: IFFALSE 21090
// if result [ 1 ] [ 1 ] = i then
21027: LD_VAR 0 2
21031: PUSH
21032: LD_INT 1
21034: ARRAY
21035: PUSH
21036: LD_INT 1
21038: ARRAY
21039: PUSH
21040: LD_VAR 0 8
21044: EQUAL
21045: IFFALSE 21090
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21047: LD_ADDR_VAR 0 2
21051: PUSH
21052: LD_VAR 0 2
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: LD_VAR 0 2
21064: PUSH
21065: LD_INT 1
21067: ARRAY
21068: PPUSH
21069: LD_INT 1
21071: PPUSH
21072: CALL_OW 3
21076: PPUSH
21077: CALL_OW 1
21081: ST_TO_ADDR
// tmp := 1 ;
21082: LD_ADDR_VAR 0 3
21086: PUSH
21087: LD_STRING 1
21089: ST_TO_ADDR
// end ; normal := normal & tmp ;
21090: LD_ADDR_VAR 0 5
21094: PUSH
21095: LD_VAR 0 5
21099: PUSH
21100: LD_VAR 0 3
21104: STR
21105: ST_TO_ADDR
// end ;
21106: GO 21006
21108: POP
21109: POP
// for i = 1 to hardcoreCounter do
21110: LD_ADDR_VAR 0 8
21114: PUSH
21115: DOUBLE
21116: LD_INT 1
21118: DEC
21119: ST_TO_ADDR
21120: LD_EXP 43
21124: PUSH
21125: FOR_TO
21126: IFFALSE 21231
// begin tmp := 0 ;
21128: LD_ADDR_VAR 0 3
21132: PUSH
21133: LD_STRING 0
21135: ST_TO_ADDR
// if result [ 2 ] then
21136: LD_VAR 0 2
21140: PUSH
21141: LD_INT 2
21143: ARRAY
21144: IFFALSE 21213
// if result [ 2 ] [ 1 ] = 100 + i then
21146: LD_VAR 0 2
21150: PUSH
21151: LD_INT 2
21153: ARRAY
21154: PUSH
21155: LD_INT 1
21157: ARRAY
21158: PUSH
21159: LD_INT 100
21161: PUSH
21162: LD_VAR 0 8
21166: PLUS
21167: EQUAL
21168: IFFALSE 21213
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21170: LD_ADDR_VAR 0 2
21174: PUSH
21175: LD_VAR 0 2
21179: PPUSH
21180: LD_INT 2
21182: PPUSH
21183: LD_VAR 0 2
21187: PUSH
21188: LD_INT 2
21190: ARRAY
21191: PPUSH
21192: LD_INT 1
21194: PPUSH
21195: CALL_OW 3
21199: PPUSH
21200: CALL_OW 1
21204: ST_TO_ADDR
// tmp := 1 ;
21205: LD_ADDR_VAR 0 3
21209: PUSH
21210: LD_STRING 1
21212: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21213: LD_ADDR_VAR 0 6
21217: PUSH
21218: LD_VAR 0 6
21222: PUSH
21223: LD_VAR 0 3
21227: STR
21228: ST_TO_ADDR
// end ;
21229: GO 21125
21231: POP
21232: POP
// if isGameLoad then
21233: LD_VAR 0 1
21237: IFFALSE 21712
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21239: LD_ADDR_VAR 0 4
21243: PUSH
21244: LD_EXP 46
21248: PUSH
21249: LD_EXP 45
21253: PUSH
21254: LD_EXP 47
21258: PUSH
21259: LD_EXP 44
21263: PUSH
21264: LD_EXP 48
21268: PUSH
21269: LD_EXP 49
21273: PUSH
21274: LD_EXP 50
21278: PUSH
21279: LD_EXP 51
21283: PUSH
21284: LD_EXP 52
21288: PUSH
21289: LD_EXP 53
21293: PUSH
21294: LD_EXP 54
21298: PUSH
21299: LD_EXP 55
21303: PUSH
21304: LD_EXP 56
21308: PUSH
21309: LD_EXP 57
21313: PUSH
21314: LD_EXP 65
21318: PUSH
21319: LD_EXP 66
21323: PUSH
21324: LD_EXP 67
21328: PUSH
21329: LD_EXP 68
21333: PUSH
21334: LD_EXP 70
21338: PUSH
21339: LD_EXP 71
21343: PUSH
21344: LD_EXP 72
21348: PUSH
21349: LD_EXP 75
21353: PUSH
21354: LD_EXP 77
21358: PUSH
21359: LD_EXP 78
21363: PUSH
21364: LD_EXP 79
21368: PUSH
21369: LD_EXP 81
21373: PUSH
21374: LD_EXP 82
21378: PUSH
21379: LD_EXP 85
21383: PUSH
21384: LD_EXP 86
21388: PUSH
21389: LD_EXP 87
21393: PUSH
21394: LD_EXP 88
21398: PUSH
21399: LD_EXP 89
21403: PUSH
21404: LD_EXP 90
21408: PUSH
21409: LD_EXP 91
21413: PUSH
21414: LD_EXP 92
21418: PUSH
21419: LD_EXP 93
21423: PUSH
21424: LD_EXP 58
21428: PUSH
21429: LD_EXP 59
21433: PUSH
21434: LD_EXP 62
21438: PUSH
21439: LD_EXP 63
21443: PUSH
21444: LD_EXP 64
21448: PUSH
21449: LD_EXP 60
21453: PUSH
21454: LD_EXP 61
21458: PUSH
21459: LD_EXP 69
21463: PUSH
21464: LD_EXP 73
21468: PUSH
21469: LD_EXP 74
21473: PUSH
21474: LD_EXP 76
21478: PUSH
21479: LD_EXP 80
21483: PUSH
21484: LD_EXP 83
21488: PUSH
21489: LD_EXP 84
21493: PUSH
21494: LD_EXP 94
21498: PUSH
21499: LD_EXP 95
21503: PUSH
21504: LD_EXP 96
21508: PUSH
21509: LD_EXP 97
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: ST_TO_ADDR
// tmp :=  ;
21570: LD_ADDR_VAR 0 3
21574: PUSH
21575: LD_STRING 
21577: ST_TO_ADDR
// for i = 1 to normalCounter do
21578: LD_ADDR_VAR 0 8
21582: PUSH
21583: DOUBLE
21584: LD_INT 1
21586: DEC
21587: ST_TO_ADDR
21588: LD_EXP 42
21592: PUSH
21593: FOR_TO
21594: IFFALSE 21630
// begin if flags [ i ] then
21596: LD_VAR 0 4
21600: PUSH
21601: LD_VAR 0 8
21605: ARRAY
21606: IFFALSE 21628
// tmp := tmp & i & ; ;
21608: LD_ADDR_VAR 0 3
21612: PUSH
21613: LD_VAR 0 3
21617: PUSH
21618: LD_VAR 0 8
21622: STR
21623: PUSH
21624: LD_STRING ;
21626: STR
21627: ST_TO_ADDR
// end ;
21628: GO 21593
21630: POP
21631: POP
// for i = 1 to hardcoreCounter do
21632: LD_ADDR_VAR 0 8
21636: PUSH
21637: DOUBLE
21638: LD_INT 1
21640: DEC
21641: ST_TO_ADDR
21642: LD_EXP 43
21646: PUSH
21647: FOR_TO
21648: IFFALSE 21694
// begin if flags [ normalCounter + i ] then
21650: LD_VAR 0 4
21654: PUSH
21655: LD_EXP 42
21659: PUSH
21660: LD_VAR 0 8
21664: PLUS
21665: ARRAY
21666: IFFALSE 21692
// tmp := tmp & ( 100 + i ) & ; ;
21668: LD_ADDR_VAR 0 3
21672: PUSH
21673: LD_VAR 0 3
21677: PUSH
21678: LD_INT 100
21680: PUSH
21681: LD_VAR 0 8
21685: PLUS
21686: STR
21687: PUSH
21688: LD_STRING ;
21690: STR
21691: ST_TO_ADDR
// end ;
21692: GO 21647
21694: POP
21695: POP
// if tmp then
21696: LD_VAR 0 3
21700: IFFALSE 21712
// active := tmp ;
21702: LD_ADDR_VAR 0 7
21706: PUSH
21707: LD_VAR 0 3
21711: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21712: LD_STRING getStreamItemsFromMission("
21714: PUSH
21715: LD_VAR 0 5
21719: STR
21720: PUSH
21721: LD_STRING ","
21723: STR
21724: PUSH
21725: LD_VAR 0 6
21729: STR
21730: PUSH
21731: LD_STRING ","
21733: STR
21734: PUSH
21735: LD_VAR 0 7
21739: STR
21740: PUSH
21741: LD_STRING ")
21743: STR
21744: PPUSH
21745: CALL_OW 559
// end else
21749: GO 21758
// ToLua ( getStreamItemsFromMission("","","") ) ;
21751: LD_STRING getStreamItemsFromMission("","","")
21753: PPUSH
21754: CALL_OW 559
// end ;
21758: LD_VAR 0 2
21762: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21763: LD_EXP 41
21767: PUSH
21768: LD_EXP 46
21772: AND
21773: IFFALSE 21897
21775: GO 21777
21777: DISABLE
21778: LD_INT 0
21780: PPUSH
21781: PPUSH
// begin enable ;
21782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21783: LD_ADDR_VAR 0 2
21787: PUSH
21788: LD_INT 22
21790: PUSH
21791: LD_OWVAR 2
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: LD_INT 34
21805: PUSH
21806: LD_INT 7
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 34
21815: PUSH
21816: LD_INT 45
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 34
21825: PUSH
21826: LD_INT 28
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 34
21835: PUSH
21836: LD_INT 47
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PPUSH
21854: CALL_OW 69
21858: ST_TO_ADDR
// if not tmp then
21859: LD_VAR 0 2
21863: NOT
21864: IFFALSE 21868
// exit ;
21866: GO 21897
// for i in tmp do
21868: LD_ADDR_VAR 0 1
21872: PUSH
21873: LD_VAR 0 2
21877: PUSH
21878: FOR_IN
21879: IFFALSE 21895
// begin SetLives ( i , 0 ) ;
21881: LD_VAR 0 1
21885: PPUSH
21886: LD_INT 0
21888: PPUSH
21889: CALL_OW 234
// end ;
21893: GO 21878
21895: POP
21896: POP
// end ;
21897: PPOPN 2
21899: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21900: LD_EXP 41
21904: PUSH
21905: LD_EXP 47
21909: AND
21910: IFFALSE 21994
21912: GO 21914
21914: DISABLE
21915: LD_INT 0
21917: PPUSH
21918: PPUSH
// begin enable ;
21919: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21920: LD_ADDR_VAR 0 2
21924: PUSH
21925: LD_INT 22
21927: PUSH
21928: LD_OWVAR 2
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 32
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PPUSH
21951: CALL_OW 69
21955: ST_TO_ADDR
// if not tmp then
21956: LD_VAR 0 2
21960: NOT
21961: IFFALSE 21965
// exit ;
21963: GO 21994
// for i in tmp do
21965: LD_ADDR_VAR 0 1
21969: PUSH
21970: LD_VAR 0 2
21974: PUSH
21975: FOR_IN
21976: IFFALSE 21992
// begin SetLives ( i , 0 ) ;
21978: LD_VAR 0 1
21982: PPUSH
21983: LD_INT 0
21985: PPUSH
21986: CALL_OW 234
// end ;
21990: GO 21975
21992: POP
21993: POP
// end ;
21994: PPOPN 2
21996: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21997: LD_EXP 41
22001: PUSH
22002: LD_EXP 44
22006: AND
22007: IFFALSE 22100
22009: GO 22011
22011: DISABLE
22012: LD_INT 0
22014: PPUSH
// begin enable ;
22015: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22016: LD_ADDR_VAR 0 1
22020: PUSH
22021: LD_INT 22
22023: PUSH
22024: LD_OWVAR 2
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: LD_INT 25
22038: PUSH
22039: LD_INT 5
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 25
22048: PUSH
22049: LD_INT 9
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 25
22058: PUSH
22059: LD_INT 8
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PPUSH
22076: CALL_OW 69
22080: PUSH
22081: FOR_IN
22082: IFFALSE 22098
// begin SetClass ( i , 1 ) ;
22084: LD_VAR 0 1
22088: PPUSH
22089: LD_INT 1
22091: PPUSH
22092: CALL_OW 336
// end ;
22096: GO 22081
22098: POP
22099: POP
// end ;
22100: PPOPN 1
22102: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22103: LD_EXP 41
22107: PUSH
22108: LD_EXP 45
22112: AND
22113: PUSH
22114: LD_OWVAR 65
22118: PUSH
22119: LD_INT 7
22121: LESS
22122: AND
22123: IFFALSE 22137
22125: GO 22127
22127: DISABLE
// begin enable ;
22128: ENABLE
// game_speed := 7 ;
22129: LD_ADDR_OWVAR 65
22133: PUSH
22134: LD_INT 7
22136: ST_TO_ADDR
// end ;
22137: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22138: LD_EXP 41
22142: PUSH
22143: LD_EXP 48
22147: AND
22148: IFFALSE 22350
22150: GO 22152
22152: DISABLE
22153: LD_INT 0
22155: PPUSH
22156: PPUSH
22157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22158: LD_ADDR_VAR 0 3
22162: PUSH
22163: LD_INT 81
22165: PUSH
22166: LD_OWVAR 2
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 21
22177: PUSH
22178: LD_INT 1
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 69
22193: ST_TO_ADDR
// if not tmp then
22194: LD_VAR 0 3
22198: NOT
22199: IFFALSE 22203
// exit ;
22201: GO 22350
// if tmp > 5 then
22203: LD_VAR 0 3
22207: PUSH
22208: LD_INT 5
22210: GREATER
22211: IFFALSE 22223
// k := 5 else
22213: LD_ADDR_VAR 0 2
22217: PUSH
22218: LD_INT 5
22220: ST_TO_ADDR
22221: GO 22233
// k := tmp ;
22223: LD_ADDR_VAR 0 2
22227: PUSH
22228: LD_VAR 0 3
22232: ST_TO_ADDR
// for i := 1 to k do
22233: LD_ADDR_VAR 0 1
22237: PUSH
22238: DOUBLE
22239: LD_INT 1
22241: DEC
22242: ST_TO_ADDR
22243: LD_VAR 0 2
22247: PUSH
22248: FOR_TO
22249: IFFALSE 22348
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22251: LD_VAR 0 3
22255: PUSH
22256: LD_VAR 0 1
22260: ARRAY
22261: PPUSH
22262: LD_VAR 0 1
22266: PUSH
22267: LD_INT 4
22269: MOD
22270: PUSH
22271: LD_INT 1
22273: PLUS
22274: PPUSH
22275: CALL_OW 259
22279: PUSH
22280: LD_INT 10
22282: LESS
22283: IFFALSE 22346
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22285: LD_VAR 0 3
22289: PUSH
22290: LD_VAR 0 1
22294: ARRAY
22295: PPUSH
22296: LD_VAR 0 1
22300: PUSH
22301: LD_INT 4
22303: MOD
22304: PUSH
22305: LD_INT 1
22307: PLUS
22308: PPUSH
22309: LD_VAR 0 3
22313: PUSH
22314: LD_VAR 0 1
22318: ARRAY
22319: PPUSH
22320: LD_VAR 0 1
22324: PUSH
22325: LD_INT 4
22327: MOD
22328: PUSH
22329: LD_INT 1
22331: PLUS
22332: PPUSH
22333: CALL_OW 259
22337: PUSH
22338: LD_INT 1
22340: PLUS
22341: PPUSH
22342: CALL_OW 237
22346: GO 22248
22348: POP
22349: POP
// end ;
22350: PPOPN 3
22352: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22353: LD_EXP 41
22357: PUSH
22358: LD_EXP 49
22362: AND
22363: IFFALSE 22383
22365: GO 22367
22367: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22368: LD_INT 4
22370: PPUSH
22371: LD_OWVAR 2
22375: PPUSH
22376: LD_INT 0
22378: PPUSH
22379: CALL_OW 324
22383: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22384: LD_EXP 41
22388: PUSH
22389: LD_EXP 78
22393: AND
22394: IFFALSE 22414
22396: GO 22398
22398: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22399: LD_INT 19
22401: PPUSH
22402: LD_OWVAR 2
22406: PPUSH
22407: LD_INT 0
22409: PPUSH
22410: CALL_OW 324
22414: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22415: LD_EXP 41
22419: PUSH
22420: LD_EXP 50
22424: AND
22425: IFFALSE 22527
22427: GO 22429
22429: DISABLE
22430: LD_INT 0
22432: PPUSH
22433: PPUSH
// begin enable ;
22434: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22435: LD_ADDR_VAR 0 2
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 2
22454: PUSH
22455: LD_INT 34
22457: PUSH
22458: LD_INT 11
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 34
22467: PUSH
22468: LD_INT 30
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PPUSH
22484: CALL_OW 69
22488: ST_TO_ADDR
// if not tmp then
22489: LD_VAR 0 2
22493: NOT
22494: IFFALSE 22498
// exit ;
22496: GO 22527
// for i in tmp do
22498: LD_ADDR_VAR 0 1
22502: PUSH
22503: LD_VAR 0 2
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22525
// begin SetLives ( i , 0 ) ;
22511: LD_VAR 0 1
22515: PPUSH
22516: LD_INT 0
22518: PPUSH
22519: CALL_OW 234
// end ;
22523: GO 22508
22525: POP
22526: POP
// end ;
22527: PPOPN 2
22529: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22530: LD_EXP 41
22534: PUSH
22535: LD_EXP 51
22539: AND
22540: IFFALSE 22560
22542: GO 22544
22544: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22545: LD_INT 32
22547: PPUSH
22548: LD_OWVAR 2
22552: PPUSH
22553: LD_INT 0
22555: PPUSH
22556: CALL_OW 324
22560: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22561: LD_EXP 41
22565: PUSH
22566: LD_EXP 52
22570: AND
22571: IFFALSE 22752
22573: GO 22575
22575: DISABLE
22576: LD_INT 0
22578: PPUSH
22579: PPUSH
22580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22581: LD_ADDR_VAR 0 2
22585: PUSH
22586: LD_INT 22
22588: PUSH
22589: LD_OWVAR 2
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 33
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PPUSH
22612: CALL_OW 69
22616: ST_TO_ADDR
// if not tmp then
22617: LD_VAR 0 2
22621: NOT
22622: IFFALSE 22626
// exit ;
22624: GO 22752
// side := 0 ;
22626: LD_ADDR_VAR 0 3
22630: PUSH
22631: LD_INT 0
22633: ST_TO_ADDR
// for i := 1 to 8 do
22634: LD_ADDR_VAR 0 1
22638: PUSH
22639: DOUBLE
22640: LD_INT 1
22642: DEC
22643: ST_TO_ADDR
22644: LD_INT 8
22646: PUSH
22647: FOR_TO
22648: IFFALSE 22696
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22650: LD_OWVAR 2
22654: PUSH
22655: LD_VAR 0 1
22659: NONEQUAL
22660: PUSH
22661: LD_OWVAR 2
22665: PPUSH
22666: LD_VAR 0 1
22670: PPUSH
22671: CALL_OW 81
22675: PUSH
22676: LD_INT 2
22678: EQUAL
22679: AND
22680: IFFALSE 22694
// begin side := i ;
22682: LD_ADDR_VAR 0 3
22686: PUSH
22687: LD_VAR 0 1
22691: ST_TO_ADDR
// break ;
22692: GO 22696
// end ;
22694: GO 22647
22696: POP
22697: POP
// if not side then
22698: LD_VAR 0 3
22702: NOT
22703: IFFALSE 22707
// exit ;
22705: GO 22752
// for i := 1 to tmp do
22707: LD_ADDR_VAR 0 1
22711: PUSH
22712: DOUBLE
22713: LD_INT 1
22715: DEC
22716: ST_TO_ADDR
22717: LD_VAR 0 2
22721: PUSH
22722: FOR_TO
22723: IFFALSE 22750
// if Prob ( 60 ) then
22725: LD_INT 60
22727: PPUSH
22728: CALL_OW 13
22732: IFFALSE 22748
// SetSide ( i , side ) ;
22734: LD_VAR 0 1
22738: PPUSH
22739: LD_VAR 0 3
22743: PPUSH
22744: CALL_OW 235
22748: GO 22722
22750: POP
22751: POP
// end ;
22752: PPOPN 3
22754: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22755: LD_EXP 41
22759: PUSH
22760: LD_EXP 54
22764: AND
22765: IFFALSE 22884
22767: GO 22769
22769: DISABLE
22770: LD_INT 0
22772: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22773: LD_ADDR_VAR 0 1
22777: PUSH
22778: LD_INT 22
22780: PUSH
22781: LD_OWVAR 2
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 21
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: LD_INT 23
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: LIST
22821: PPUSH
22822: CALL_OW 69
22826: PUSH
22827: FOR_IN
22828: IFFALSE 22882
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22830: LD_VAR 0 1
22834: PPUSH
22835: CALL_OW 257
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 3
22848: PUSH
22849: LD_INT 4
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: IN
22858: IFFALSE 22880
// SetClass ( un , rand ( 1 , 4 ) ) ;
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_INT 1
22867: PPUSH
22868: LD_INT 4
22870: PPUSH
22871: CALL_OW 12
22875: PPUSH
22876: CALL_OW 336
22880: GO 22827
22882: POP
22883: POP
// end ;
22884: PPOPN 1
22886: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22887: LD_EXP 41
22891: PUSH
22892: LD_EXP 53
22896: AND
22897: IFFALSE 22976
22899: GO 22901
22901: DISABLE
22902: LD_INT 0
22904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22905: LD_ADDR_VAR 0 1
22909: PUSH
22910: LD_INT 22
22912: PUSH
22913: LD_OWVAR 2
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 21
22924: PUSH
22925: LD_INT 3
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PPUSH
22936: CALL_OW 69
22940: ST_TO_ADDR
// if not tmp then
22941: LD_VAR 0 1
22945: NOT
22946: IFFALSE 22950
// exit ;
22948: GO 22976
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22950: LD_VAR 0 1
22954: PUSH
22955: LD_INT 1
22957: PPUSH
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 12
22967: ARRAY
22968: PPUSH
22969: LD_INT 100
22971: PPUSH
22972: CALL_OW 234
// end ;
22976: PPOPN 1
22978: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22979: LD_EXP 41
22983: PUSH
22984: LD_EXP 55
22988: AND
22989: IFFALSE 23087
22991: GO 22993
22993: DISABLE
22994: LD_INT 0
22996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22997: LD_ADDR_VAR 0 1
23001: PUSH
23002: LD_INT 22
23004: PUSH
23005: LD_OWVAR 2
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 21
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PPUSH
23028: CALL_OW 69
23032: ST_TO_ADDR
// if not tmp then
23033: LD_VAR 0 1
23037: NOT
23038: IFFALSE 23042
// exit ;
23040: GO 23087
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23042: LD_VAR 0 1
23046: PUSH
23047: LD_INT 1
23049: PPUSH
23050: LD_VAR 0 1
23054: PPUSH
23055: CALL_OW 12
23059: ARRAY
23060: PPUSH
23061: LD_INT 1
23063: PPUSH
23064: LD_INT 4
23066: PPUSH
23067: CALL_OW 12
23071: PPUSH
23072: LD_INT 3000
23074: PPUSH
23075: LD_INT 9000
23077: PPUSH
23078: CALL_OW 12
23082: PPUSH
23083: CALL_OW 492
// end ;
23087: PPOPN 1
23089: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23090: LD_EXP 41
23094: PUSH
23095: LD_EXP 56
23099: AND
23100: IFFALSE 23120
23102: GO 23104
23104: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23105: LD_INT 1
23107: PPUSH
23108: LD_OWVAR 2
23112: PPUSH
23113: LD_INT 0
23115: PPUSH
23116: CALL_OW 324
23120: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23121: LD_EXP 41
23125: PUSH
23126: LD_EXP 57
23130: AND
23131: IFFALSE 23214
23133: GO 23135
23135: DISABLE
23136: LD_INT 0
23138: PPUSH
23139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23140: LD_ADDR_VAR 0 2
23144: PUSH
23145: LD_INT 22
23147: PUSH
23148: LD_OWVAR 2
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 21
23159: PUSH
23160: LD_INT 3
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PPUSH
23171: CALL_OW 69
23175: ST_TO_ADDR
// if not tmp then
23176: LD_VAR 0 2
23180: NOT
23181: IFFALSE 23185
// exit ;
23183: GO 23214
// for i in tmp do
23185: LD_ADDR_VAR 0 1
23189: PUSH
23190: LD_VAR 0 2
23194: PUSH
23195: FOR_IN
23196: IFFALSE 23212
// SetBLevel ( i , 10 ) ;
23198: LD_VAR 0 1
23202: PPUSH
23203: LD_INT 10
23205: PPUSH
23206: CALL_OW 241
23210: GO 23195
23212: POP
23213: POP
// end ;
23214: PPOPN 2
23216: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23217: LD_EXP 41
23221: PUSH
23222: LD_EXP 58
23226: AND
23227: IFFALSE 23338
23229: GO 23231
23231: DISABLE
23232: LD_INT 0
23234: PPUSH
23235: PPUSH
23236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23237: LD_ADDR_VAR 0 3
23241: PUSH
23242: LD_INT 22
23244: PUSH
23245: LD_OWVAR 2
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 25
23256: PUSH
23257: LD_INT 1
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PPUSH
23268: CALL_OW 69
23272: ST_TO_ADDR
// if not tmp then
23273: LD_VAR 0 3
23277: NOT
23278: IFFALSE 23282
// exit ;
23280: GO 23338
// un := tmp [ rand ( 1 , tmp ) ] ;
23282: LD_ADDR_VAR 0 2
23286: PUSH
23287: LD_VAR 0 3
23291: PUSH
23292: LD_INT 1
23294: PPUSH
23295: LD_VAR 0 3
23299: PPUSH
23300: CALL_OW 12
23304: ARRAY
23305: ST_TO_ADDR
// if Crawls ( un ) then
23306: LD_VAR 0 2
23310: PPUSH
23311: CALL_OW 318
23315: IFFALSE 23326
// ComWalk ( un ) ;
23317: LD_VAR 0 2
23321: PPUSH
23322: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23326: LD_VAR 0 2
23330: PPUSH
23331: LD_INT 5
23333: PPUSH
23334: CALL_OW 336
// end ;
23338: PPOPN 3
23340: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23341: LD_EXP 41
23345: PUSH
23346: LD_EXP 59
23350: AND
23351: PUSH
23352: LD_OWVAR 67
23356: PUSH
23357: LD_INT 4
23359: LESS
23360: AND
23361: IFFALSE 23380
23363: GO 23365
23365: DISABLE
// begin Difficulty := Difficulty + 1 ;
23366: LD_ADDR_OWVAR 67
23370: PUSH
23371: LD_OWVAR 67
23375: PUSH
23376: LD_INT 1
23378: PLUS
23379: ST_TO_ADDR
// end ;
23380: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23381: LD_EXP 41
23385: PUSH
23386: LD_EXP 60
23390: AND
23391: IFFALSE 23494
23393: GO 23395
23395: DISABLE
23396: LD_INT 0
23398: PPUSH
// begin for i := 1 to 5 do
23399: LD_ADDR_VAR 0 1
23403: PUSH
23404: DOUBLE
23405: LD_INT 1
23407: DEC
23408: ST_TO_ADDR
23409: LD_INT 5
23411: PUSH
23412: FOR_TO
23413: IFFALSE 23492
// begin uc_nation := nation_nature ;
23415: LD_ADDR_OWVAR 21
23419: PUSH
23420: LD_INT 0
23422: ST_TO_ADDR
// uc_side := 0 ;
23423: LD_ADDR_OWVAR 20
23427: PUSH
23428: LD_INT 0
23430: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23431: LD_ADDR_OWVAR 29
23435: PUSH
23436: LD_INT 12
23438: PUSH
23439: LD_INT 12
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: ST_TO_ADDR
// hc_agressivity := 20 ;
23446: LD_ADDR_OWVAR 35
23450: PUSH
23451: LD_INT 20
23453: ST_TO_ADDR
// hc_class := class_tiger ;
23454: LD_ADDR_OWVAR 28
23458: PUSH
23459: LD_INT 14
23461: ST_TO_ADDR
// hc_gallery :=  ;
23462: LD_ADDR_OWVAR 33
23466: PUSH
23467: LD_STRING 
23469: ST_TO_ADDR
// hc_name :=  ;
23470: LD_ADDR_OWVAR 26
23474: PUSH
23475: LD_STRING 
23477: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23478: CALL_OW 44
23482: PPUSH
23483: LD_INT 0
23485: PPUSH
23486: CALL_OW 51
// end ;
23490: GO 23412
23492: POP
23493: POP
// end ;
23494: PPOPN 1
23496: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23497: LD_EXP 41
23501: PUSH
23502: LD_EXP 61
23506: AND
23507: IFFALSE 23516
23509: GO 23511
23511: DISABLE
// StreamSibBomb ;
23512: CALL 23517 0 0
23516: END
// export function StreamSibBomb ; var i , x , y ; begin
23517: LD_INT 0
23519: PPUSH
23520: PPUSH
23521: PPUSH
23522: PPUSH
// result := false ;
23523: LD_ADDR_VAR 0 1
23527: PUSH
23528: LD_INT 0
23530: ST_TO_ADDR
// for i := 1 to 16 do
23531: LD_ADDR_VAR 0 2
23535: PUSH
23536: DOUBLE
23537: LD_INT 1
23539: DEC
23540: ST_TO_ADDR
23541: LD_INT 16
23543: PUSH
23544: FOR_TO
23545: IFFALSE 23744
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23547: LD_ADDR_VAR 0 3
23551: PUSH
23552: LD_INT 10
23554: PUSH
23555: LD_INT 20
23557: PUSH
23558: LD_INT 30
23560: PUSH
23561: LD_INT 40
23563: PUSH
23564: LD_INT 50
23566: PUSH
23567: LD_INT 60
23569: PUSH
23570: LD_INT 70
23572: PUSH
23573: LD_INT 80
23575: PUSH
23576: LD_INT 90
23578: PUSH
23579: LD_INT 100
23581: PUSH
23582: LD_INT 110
23584: PUSH
23585: LD_INT 120
23587: PUSH
23588: LD_INT 130
23590: PUSH
23591: LD_INT 140
23593: PUSH
23594: LD_INT 150
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 1
23616: PPUSH
23617: LD_INT 15
23619: PPUSH
23620: CALL_OW 12
23624: ARRAY
23625: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23626: LD_ADDR_VAR 0 4
23630: PUSH
23631: LD_INT 10
23633: PUSH
23634: LD_INT 20
23636: PUSH
23637: LD_INT 30
23639: PUSH
23640: LD_INT 40
23642: PUSH
23643: LD_INT 50
23645: PUSH
23646: LD_INT 60
23648: PUSH
23649: LD_INT 70
23651: PUSH
23652: LD_INT 80
23654: PUSH
23655: LD_INT 90
23657: PUSH
23658: LD_INT 100
23660: PUSH
23661: LD_INT 110
23663: PUSH
23664: LD_INT 120
23666: PUSH
23667: LD_INT 130
23669: PUSH
23670: LD_INT 140
23672: PUSH
23673: LD_INT 150
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: PPUSH
23696: LD_INT 15
23698: PPUSH
23699: CALL_OW 12
23703: ARRAY
23704: ST_TO_ADDR
// if ValidHex ( x , y ) then
23705: LD_VAR 0 3
23709: PPUSH
23710: LD_VAR 0 4
23714: PPUSH
23715: CALL_OW 488
23719: IFFALSE 23742
// begin result := [ x , y ] ;
23721: LD_ADDR_VAR 0 1
23725: PUSH
23726: LD_VAR 0 3
23730: PUSH
23731: LD_VAR 0 4
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: ST_TO_ADDR
// break ;
23740: GO 23744
// end ; end ;
23742: GO 23544
23744: POP
23745: POP
// if result then
23746: LD_VAR 0 1
23750: IFFALSE 23810
// begin ToLua ( playSibBomb() ) ;
23752: LD_STRING playSibBomb()
23754: PPUSH
23755: CALL_OW 559
// wait ( 0 0$14 ) ;
23759: LD_INT 490
23761: PPUSH
23762: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23766: LD_VAR 0 1
23770: PUSH
23771: LD_INT 1
23773: ARRAY
23774: PPUSH
23775: LD_VAR 0 1
23779: PUSH
23780: LD_INT 2
23782: ARRAY
23783: PPUSH
23784: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23788: LD_VAR 0 1
23792: PUSH
23793: LD_INT 1
23795: ARRAY
23796: PPUSH
23797: LD_VAR 0 1
23801: PUSH
23802: LD_INT 2
23804: ARRAY
23805: PPUSH
23806: CALL_OW 429
// end ; end ;
23810: LD_VAR 0 1
23814: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23815: LD_EXP 41
23819: PUSH
23820: LD_EXP 63
23824: AND
23825: IFFALSE 23837
23827: GO 23829
23829: DISABLE
// YouLost (  ) ;
23830: LD_STRING 
23832: PPUSH
23833: CALL_OW 104
23837: END
// every 0 0$1 trigger StreamModeActive and sFog do
23838: LD_EXP 41
23842: PUSH
23843: LD_EXP 62
23847: AND
23848: IFFALSE 23862
23850: GO 23852
23852: DISABLE
// FogOff ( your_side ) ;
23853: LD_OWVAR 2
23857: PPUSH
23858: CALL_OW 344
23862: END
// every 0 0$1 trigger StreamModeActive and sSun do
23863: LD_EXP 41
23867: PUSH
23868: LD_EXP 64
23872: AND
23873: IFFALSE 23901
23875: GO 23877
23877: DISABLE
// begin solar_recharge_percent := 0 ;
23878: LD_ADDR_OWVAR 79
23882: PUSH
23883: LD_INT 0
23885: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23886: LD_INT 10500
23888: PPUSH
23889: CALL_OW 67
// solar_recharge_percent := 100 ;
23893: LD_ADDR_OWVAR 79
23897: PUSH
23898: LD_INT 100
23900: ST_TO_ADDR
// end ;
23901: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23902: LD_EXP 41
23906: PUSH
23907: LD_EXP 65
23911: AND
23912: IFFALSE 24151
23914: GO 23916
23916: DISABLE
23917: LD_INT 0
23919: PPUSH
23920: PPUSH
23921: PPUSH
// begin tmp := [ ] ;
23922: LD_ADDR_VAR 0 3
23926: PUSH
23927: EMPTY
23928: ST_TO_ADDR
// for i := 1 to 6 do
23929: LD_ADDR_VAR 0 1
23933: PUSH
23934: DOUBLE
23935: LD_INT 1
23937: DEC
23938: ST_TO_ADDR
23939: LD_INT 6
23941: PUSH
23942: FOR_TO
23943: IFFALSE 24048
// begin uc_nation := nation_nature ;
23945: LD_ADDR_OWVAR 21
23949: PUSH
23950: LD_INT 0
23952: ST_TO_ADDR
// uc_side := 0 ;
23953: LD_ADDR_OWVAR 20
23957: PUSH
23958: LD_INT 0
23960: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23961: LD_ADDR_OWVAR 29
23965: PUSH
23966: LD_INT 12
23968: PUSH
23969: LD_INT 12
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: ST_TO_ADDR
// hc_agressivity := 20 ;
23976: LD_ADDR_OWVAR 35
23980: PUSH
23981: LD_INT 20
23983: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23984: LD_ADDR_OWVAR 28
23988: PUSH
23989: LD_INT 17
23991: ST_TO_ADDR
// hc_gallery :=  ;
23992: LD_ADDR_OWVAR 33
23996: PUSH
23997: LD_STRING 
23999: ST_TO_ADDR
// hc_name :=  ;
24000: LD_ADDR_OWVAR 26
24004: PUSH
24005: LD_STRING 
24007: ST_TO_ADDR
// un := CreateHuman ;
24008: LD_ADDR_VAR 0 2
24012: PUSH
24013: CALL_OW 44
24017: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24018: LD_VAR 0 2
24022: PPUSH
24023: LD_INT 1
24025: PPUSH
24026: CALL_OW 51
// tmp := tmp ^ un ;
24030: LD_ADDR_VAR 0 3
24034: PUSH
24035: LD_VAR 0 3
24039: PUSH
24040: LD_VAR 0 2
24044: ADD
24045: ST_TO_ADDR
// end ;
24046: GO 23942
24048: POP
24049: POP
// repeat wait ( 0 0$1 ) ;
24050: LD_INT 35
24052: PPUSH
24053: CALL_OW 67
// for un in tmp do
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: LD_VAR 0 3
24066: PUSH
24067: FOR_IN
24068: IFFALSE 24142
// begin if IsDead ( un ) then
24070: LD_VAR 0 2
24074: PPUSH
24075: CALL_OW 301
24079: IFFALSE 24099
// begin tmp := tmp diff un ;
24081: LD_ADDR_VAR 0 3
24085: PUSH
24086: LD_VAR 0 3
24090: PUSH
24091: LD_VAR 0 2
24095: DIFF
24096: ST_TO_ADDR
// continue ;
24097: GO 24067
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24099: LD_VAR 0 2
24103: PPUSH
24104: LD_INT 3
24106: PUSH
24107: LD_INT 22
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PPUSH
24121: CALL_OW 69
24125: PPUSH
24126: LD_VAR 0 2
24130: PPUSH
24131: CALL_OW 74
24135: PPUSH
24136: CALL_OW 115
// end ;
24140: GO 24067
24142: POP
24143: POP
// until not tmp ;
24144: LD_VAR 0 3
24148: NOT
24149: IFFALSE 24050
// end ;
24151: PPOPN 3
24153: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24154: LD_EXP 41
24158: PUSH
24159: LD_EXP 66
24163: AND
24164: IFFALSE 24218
24166: GO 24168
24168: DISABLE
// begin ToLua ( displayTroll(); ) ;
24169: LD_STRING displayTroll();
24171: PPUSH
24172: CALL_OW 559
// wait ( 3 3$00 ) ;
24176: LD_INT 6300
24178: PPUSH
24179: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24183: LD_STRING hideTroll();
24185: PPUSH
24186: CALL_OW 559
// wait ( 1 1$00 ) ;
24190: LD_INT 2100
24192: PPUSH
24193: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24197: LD_STRING displayTroll();
24199: PPUSH
24200: CALL_OW 559
// wait ( 1 1$00 ) ;
24204: LD_INT 2100
24206: PPUSH
24207: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24211: LD_STRING hideTroll();
24213: PPUSH
24214: CALL_OW 559
// end ;
24218: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24219: LD_EXP 41
24223: PUSH
24224: LD_EXP 67
24228: AND
24229: IFFALSE 24292
24231: GO 24233
24233: DISABLE
24234: LD_INT 0
24236: PPUSH
// begin p := 0 ;
24237: LD_ADDR_VAR 0 1
24241: PUSH
24242: LD_INT 0
24244: ST_TO_ADDR
// repeat game_speed := 1 ;
24245: LD_ADDR_OWVAR 65
24249: PUSH
24250: LD_INT 1
24252: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24253: LD_INT 35
24255: PPUSH
24256: CALL_OW 67
// p := p + 1 ;
24260: LD_ADDR_VAR 0 1
24264: PUSH
24265: LD_VAR 0 1
24269: PUSH
24270: LD_INT 1
24272: PLUS
24273: ST_TO_ADDR
// until p >= 60 ;
24274: LD_VAR 0 1
24278: PUSH
24279: LD_INT 60
24281: GREATEREQUAL
24282: IFFALSE 24245
// game_speed := 4 ;
24284: LD_ADDR_OWVAR 65
24288: PUSH
24289: LD_INT 4
24291: ST_TO_ADDR
// end ;
24292: PPOPN 1
24294: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24295: LD_EXP 41
24299: PUSH
24300: LD_EXP 68
24304: AND
24305: IFFALSE 24451
24307: GO 24309
24309: DISABLE
24310: LD_INT 0
24312: PPUSH
24313: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24314: LD_ADDR_VAR 0 1
24318: PUSH
24319: LD_INT 22
24321: PUSH
24322: LD_OWVAR 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 30
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PPUSH
24363: CALL_OW 69
24367: ST_TO_ADDR
// if not depot then
24368: LD_VAR 0 1
24372: NOT
24373: IFFALSE 24377
// exit ;
24375: GO 24451
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24377: LD_ADDR_VAR 0 2
24381: PUSH
24382: LD_VAR 0 1
24386: PUSH
24387: LD_INT 1
24389: PPUSH
24390: LD_VAR 0 1
24394: PPUSH
24395: CALL_OW 12
24399: ARRAY
24400: PPUSH
24401: CALL_OW 274
24405: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24406: LD_VAR 0 2
24410: PPUSH
24411: LD_INT 1
24413: PPUSH
24414: LD_INT 0
24416: PPUSH
24417: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24421: LD_VAR 0 2
24425: PPUSH
24426: LD_INT 2
24428: PPUSH
24429: LD_INT 0
24431: PPUSH
24432: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24436: LD_VAR 0 2
24440: PPUSH
24441: LD_INT 3
24443: PPUSH
24444: LD_INT 0
24446: PPUSH
24447: CALL_OW 277
// end ;
24451: PPOPN 2
24453: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24454: LD_EXP 41
24458: PUSH
24459: LD_EXP 69
24463: AND
24464: IFFALSE 24561
24466: GO 24468
24468: DISABLE
24469: LD_INT 0
24471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24472: LD_ADDR_VAR 0 1
24476: PUSH
24477: LD_INT 22
24479: PUSH
24480: LD_OWVAR 2
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 21
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 3
24501: PUSH
24502: LD_INT 23
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: PPUSH
24521: CALL_OW 69
24525: ST_TO_ADDR
// if not tmp then
24526: LD_VAR 0 1
24530: NOT
24531: IFFALSE 24535
// exit ;
24533: GO 24561
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24535: LD_VAR 0 1
24539: PUSH
24540: LD_INT 1
24542: PPUSH
24543: LD_VAR 0 1
24547: PPUSH
24548: CALL_OW 12
24552: ARRAY
24553: PPUSH
24554: LD_INT 200
24556: PPUSH
24557: CALL_OW 234
// end ;
24561: PPOPN 1
24563: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24564: LD_EXP 41
24568: PUSH
24569: LD_EXP 70
24573: AND
24574: IFFALSE 24653
24576: GO 24578
24578: DISABLE
24579: LD_INT 0
24581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24582: LD_ADDR_VAR 0 1
24586: PUSH
24587: LD_INT 22
24589: PUSH
24590: LD_OWVAR 2
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 21
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PPUSH
24613: CALL_OW 69
24617: ST_TO_ADDR
// if not tmp then
24618: LD_VAR 0 1
24622: NOT
24623: IFFALSE 24627
// exit ;
24625: GO 24653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24627: LD_VAR 0 1
24631: PUSH
24632: LD_INT 1
24634: PPUSH
24635: LD_VAR 0 1
24639: PPUSH
24640: CALL_OW 12
24644: ARRAY
24645: PPUSH
24646: LD_INT 60
24648: PPUSH
24649: CALL_OW 234
// end ;
24653: PPOPN 1
24655: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24656: LD_EXP 41
24660: PUSH
24661: LD_EXP 71
24665: AND
24666: IFFALSE 24765
24668: GO 24670
24670: DISABLE
24671: LD_INT 0
24673: PPUSH
24674: PPUSH
// begin enable ;
24675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24676: LD_ADDR_VAR 0 1
24680: PUSH
24681: LD_INT 22
24683: PUSH
24684: LD_OWVAR 2
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 61
24695: PUSH
24696: EMPTY
24697: LIST
24698: PUSH
24699: LD_INT 33
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: PPUSH
24714: CALL_OW 69
24718: ST_TO_ADDR
// if not tmp then
24719: LD_VAR 0 1
24723: NOT
24724: IFFALSE 24728
// exit ;
24726: GO 24765
// for i in tmp do
24728: LD_ADDR_VAR 0 2
24732: PUSH
24733: LD_VAR 0 1
24737: PUSH
24738: FOR_IN
24739: IFFALSE 24763
// if IsControledBy ( i ) then
24741: LD_VAR 0 2
24745: PPUSH
24746: CALL_OW 312
24750: IFFALSE 24761
// ComUnlink ( i ) ;
24752: LD_VAR 0 2
24756: PPUSH
24757: CALL_OW 136
24761: GO 24738
24763: POP
24764: POP
// end ;
24765: PPOPN 2
24767: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24768: LD_EXP 41
24772: PUSH
24773: LD_EXP 72
24777: AND
24778: IFFALSE 24918
24780: GO 24782
24782: DISABLE
24783: LD_INT 0
24785: PPUSH
24786: PPUSH
// begin ToLua ( displayPowell(); ) ;
24787: LD_STRING displayPowell();
24789: PPUSH
24790: CALL_OW 559
// uc_side := 0 ;
24794: LD_ADDR_OWVAR 20
24798: PUSH
24799: LD_INT 0
24801: ST_TO_ADDR
// uc_nation := 2 ;
24802: LD_ADDR_OWVAR 21
24806: PUSH
24807: LD_INT 2
24809: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24810: LD_ADDR_OWVAR 37
24814: PUSH
24815: LD_INT 14
24817: ST_TO_ADDR
// vc_engine := engine_siberite ;
24818: LD_ADDR_OWVAR 39
24822: PUSH
24823: LD_INT 3
24825: ST_TO_ADDR
// vc_control := control_apeman ;
24826: LD_ADDR_OWVAR 38
24830: PUSH
24831: LD_INT 5
24833: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24834: LD_ADDR_OWVAR 40
24838: PUSH
24839: LD_INT 29
24841: ST_TO_ADDR
// un := CreateVehicle ;
24842: LD_ADDR_VAR 0 2
24846: PUSH
24847: CALL_OW 45
24851: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24852: LD_VAR 0 2
24856: PPUSH
24857: LD_INT 1
24859: PPUSH
24860: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24864: LD_INT 35
24866: PPUSH
24867: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24871: LD_VAR 0 2
24875: PPUSH
24876: LD_INT 22
24878: PUSH
24879: LD_OWVAR 2
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 69
24892: PPUSH
24893: LD_VAR 0 2
24897: PPUSH
24898: CALL_OW 74
24902: PPUSH
24903: CALL_OW 115
// until IsDead ( un ) ;
24907: LD_VAR 0 2
24911: PPUSH
24912: CALL_OW 301
24916: IFFALSE 24864
// end ;
24918: PPOPN 2
24920: END
// every 0 0$1 trigger StreamModeActive and sStu do
24921: LD_EXP 41
24925: PUSH
24926: LD_EXP 80
24930: AND
24931: IFFALSE 24947
24933: GO 24935
24935: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24936: LD_STRING displayStucuk();
24938: PPUSH
24939: CALL_OW 559
// ResetFog ;
24943: CALL_OW 335
// end ;
24947: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24948: LD_EXP 41
24952: PUSH
24953: LD_EXP 73
24957: AND
24958: IFFALSE 25099
24960: GO 24962
24962: DISABLE
24963: LD_INT 0
24965: PPUSH
24966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24967: LD_ADDR_VAR 0 2
24971: PUSH
24972: LD_INT 22
24974: PUSH
24975: LD_OWVAR 2
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 21
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PPUSH
24998: CALL_OW 69
25002: ST_TO_ADDR
// if not tmp then
25003: LD_VAR 0 2
25007: NOT
25008: IFFALSE 25012
// exit ;
25010: GO 25099
// un := tmp [ rand ( 1 , tmp ) ] ;
25012: LD_ADDR_VAR 0 1
25016: PUSH
25017: LD_VAR 0 2
25021: PUSH
25022: LD_INT 1
25024: PPUSH
25025: LD_VAR 0 2
25029: PPUSH
25030: CALL_OW 12
25034: ARRAY
25035: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25036: LD_VAR 0 1
25040: PPUSH
25041: LD_INT 0
25043: PPUSH
25044: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25048: LD_VAR 0 1
25052: PPUSH
25053: LD_OWVAR 3
25057: PUSH
25058: LD_VAR 0 1
25062: DIFF
25063: PPUSH
25064: LD_VAR 0 1
25068: PPUSH
25069: CALL_OW 74
25073: PPUSH
25074: CALL_OW 115
// wait ( 0 0$20 ) ;
25078: LD_INT 700
25080: PPUSH
25081: CALL_OW 67
// SetSide ( un , your_side ) ;
25085: LD_VAR 0 1
25089: PPUSH
25090: LD_OWVAR 2
25094: PPUSH
25095: CALL_OW 235
// end ;
25099: PPOPN 2
25101: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25102: LD_EXP 41
25106: PUSH
25107: LD_EXP 74
25111: AND
25112: IFFALSE 25218
25114: GO 25116
25116: DISABLE
25117: LD_INT 0
25119: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25120: LD_ADDR_VAR 0 1
25124: PUSH
25125: LD_INT 22
25127: PUSH
25128: LD_OWVAR 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 30
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 30
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: LIST
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PPUSH
25169: CALL_OW 69
25173: ST_TO_ADDR
// if not depot then
25174: LD_VAR 0 1
25178: NOT
25179: IFFALSE 25183
// exit ;
25181: GO 25218
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25183: LD_VAR 0 1
25187: PUSH
25188: LD_INT 1
25190: ARRAY
25191: PPUSH
25192: CALL_OW 250
25196: PPUSH
25197: LD_VAR 0 1
25201: PUSH
25202: LD_INT 1
25204: ARRAY
25205: PPUSH
25206: CALL_OW 251
25210: PPUSH
25211: LD_INT 70
25213: PPUSH
25214: CALL_OW 495
// end ;
25218: PPOPN 1
25220: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25221: LD_EXP 41
25225: PUSH
25226: LD_EXP 75
25230: AND
25231: IFFALSE 25442
25233: GO 25235
25235: DISABLE
25236: LD_INT 0
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
25242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25243: LD_ADDR_VAR 0 5
25247: PUSH
25248: LD_INT 22
25250: PUSH
25251: LD_OWVAR 2
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 21
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PPUSH
25274: CALL_OW 69
25278: ST_TO_ADDR
// if not tmp then
25279: LD_VAR 0 5
25283: NOT
25284: IFFALSE 25288
// exit ;
25286: GO 25442
// for i in tmp do
25288: LD_ADDR_VAR 0 1
25292: PUSH
25293: LD_VAR 0 5
25297: PUSH
25298: FOR_IN
25299: IFFALSE 25440
// begin d := rand ( 0 , 5 ) ;
25301: LD_ADDR_VAR 0 4
25305: PUSH
25306: LD_INT 0
25308: PPUSH
25309: LD_INT 5
25311: PPUSH
25312: CALL_OW 12
25316: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25317: LD_ADDR_VAR 0 2
25321: PUSH
25322: LD_VAR 0 1
25326: PPUSH
25327: CALL_OW 250
25331: PPUSH
25332: LD_VAR 0 4
25336: PPUSH
25337: LD_INT 3
25339: PPUSH
25340: LD_INT 12
25342: PPUSH
25343: CALL_OW 12
25347: PPUSH
25348: CALL_OW 272
25352: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25353: LD_ADDR_VAR 0 3
25357: PUSH
25358: LD_VAR 0 1
25362: PPUSH
25363: CALL_OW 251
25367: PPUSH
25368: LD_VAR 0 4
25372: PPUSH
25373: LD_INT 3
25375: PPUSH
25376: LD_INT 12
25378: PPUSH
25379: CALL_OW 12
25383: PPUSH
25384: CALL_OW 273
25388: ST_TO_ADDR
// if ValidHex ( x , y ) then
25389: LD_VAR 0 2
25393: PPUSH
25394: LD_VAR 0 3
25398: PPUSH
25399: CALL_OW 488
25403: IFFALSE 25438
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25405: LD_VAR 0 1
25409: PPUSH
25410: LD_VAR 0 2
25414: PPUSH
25415: LD_VAR 0 3
25419: PPUSH
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 6
25425: PPUSH
25426: CALL_OW 12
25430: PPUSH
25431: LD_INT 1
25433: PPUSH
25434: CALL_OW 483
// end ;
25438: GO 25298
25440: POP
25441: POP
// end ;
25442: PPOPN 5
25444: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25445: LD_EXP 41
25449: PUSH
25450: LD_EXP 76
25454: AND
25455: IFFALSE 25549
25457: GO 25459
25459: DISABLE
25460: LD_INT 0
25462: PPUSH
25463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25464: LD_ADDR_VAR 0 2
25468: PUSH
25469: LD_INT 22
25471: PUSH
25472: LD_OWVAR 2
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 32
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 21
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: LIST
25505: PPUSH
25506: CALL_OW 69
25510: ST_TO_ADDR
// if not tmp then
25511: LD_VAR 0 2
25515: NOT
25516: IFFALSE 25520
// exit ;
25518: GO 25549
// for i in tmp do
25520: LD_ADDR_VAR 0 1
25524: PUSH
25525: LD_VAR 0 2
25529: PUSH
25530: FOR_IN
25531: IFFALSE 25547
// SetFuel ( i , 0 ) ;
25533: LD_VAR 0 1
25537: PPUSH
25538: LD_INT 0
25540: PPUSH
25541: CALL_OW 240
25545: GO 25530
25547: POP
25548: POP
// end ;
25549: PPOPN 2
25551: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25552: LD_EXP 41
25556: PUSH
25557: LD_EXP 77
25561: AND
25562: IFFALSE 25628
25564: GO 25566
25566: DISABLE
25567: LD_INT 0
25569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25570: LD_ADDR_VAR 0 1
25574: PUSH
25575: LD_INT 22
25577: PUSH
25578: LD_OWVAR 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 30
25589: PUSH
25590: LD_INT 29
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PPUSH
25601: CALL_OW 69
25605: ST_TO_ADDR
// if not tmp then
25606: LD_VAR 0 1
25610: NOT
25611: IFFALSE 25615
// exit ;
25613: GO 25628
// DestroyUnit ( tmp [ 1 ] ) ;
25615: LD_VAR 0 1
25619: PUSH
25620: LD_INT 1
25622: ARRAY
25623: PPUSH
25624: CALL_OW 65
// end ;
25628: PPOPN 1
25630: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25631: LD_EXP 41
25635: PUSH
25636: LD_EXP 79
25640: AND
25641: IFFALSE 25770
25643: GO 25645
25645: DISABLE
25646: LD_INT 0
25648: PPUSH
// begin uc_side := 0 ;
25649: LD_ADDR_OWVAR 20
25653: PUSH
25654: LD_INT 0
25656: ST_TO_ADDR
// uc_nation := nation_arabian ;
25657: LD_ADDR_OWVAR 21
25661: PUSH
25662: LD_INT 2
25664: ST_TO_ADDR
// hc_gallery :=  ;
25665: LD_ADDR_OWVAR 33
25669: PUSH
25670: LD_STRING 
25672: ST_TO_ADDR
// hc_name :=  ;
25673: LD_ADDR_OWVAR 26
25677: PUSH
25678: LD_STRING 
25680: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25681: LD_INT 1
25683: PPUSH
25684: LD_INT 11
25686: PPUSH
25687: LD_INT 10
25689: PPUSH
25690: CALL_OW 380
// un := CreateHuman ;
25694: LD_ADDR_VAR 0 1
25698: PUSH
25699: CALL_OW 44
25703: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25704: LD_VAR 0 1
25708: PPUSH
25709: LD_INT 1
25711: PPUSH
25712: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25716: LD_INT 35
25718: PPUSH
25719: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25723: LD_VAR 0 1
25727: PPUSH
25728: LD_INT 22
25730: PUSH
25731: LD_OWVAR 2
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PPUSH
25740: CALL_OW 69
25744: PPUSH
25745: LD_VAR 0 1
25749: PPUSH
25750: CALL_OW 74
25754: PPUSH
25755: CALL_OW 115
// until IsDead ( un ) ;
25759: LD_VAR 0 1
25763: PPUSH
25764: CALL_OW 301
25768: IFFALSE 25716
// end ;
25770: PPOPN 1
25772: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25773: LD_EXP 41
25777: PUSH
25778: LD_EXP 81
25782: AND
25783: IFFALSE 25795
25785: GO 25787
25787: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25788: LD_STRING earthquake(getX(game), 0, 32)
25790: PPUSH
25791: CALL_OW 559
25795: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25796: LD_EXP 41
25800: PUSH
25801: LD_EXP 82
25805: AND
25806: IFFALSE 25897
25808: GO 25810
25810: DISABLE
25811: LD_INT 0
25813: PPUSH
// begin enable ;
25814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25815: LD_ADDR_VAR 0 1
25819: PUSH
25820: LD_INT 22
25822: PUSH
25823: LD_OWVAR 2
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 21
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 33
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: PPUSH
25857: CALL_OW 69
25861: ST_TO_ADDR
// if not tmp then
25862: LD_VAR 0 1
25866: NOT
25867: IFFALSE 25871
// exit ;
25869: GO 25897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25871: LD_VAR 0 1
25875: PUSH
25876: LD_INT 1
25878: PPUSH
25879: LD_VAR 0 1
25883: PPUSH
25884: CALL_OW 12
25888: ARRAY
25889: PPUSH
25890: LD_INT 1
25892: PPUSH
25893: CALL_OW 234
// end ;
25897: PPOPN 1
25899: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25900: LD_EXP 41
25904: PUSH
25905: LD_EXP 83
25909: AND
25910: IFFALSE 26051
25912: GO 25914
25914: DISABLE
25915: LD_INT 0
25917: PPUSH
25918: PPUSH
25919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25920: LD_ADDR_VAR 0 3
25924: PUSH
25925: LD_INT 22
25927: PUSH
25928: LD_OWVAR 2
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 25
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PPUSH
25951: CALL_OW 69
25955: ST_TO_ADDR
// if not tmp then
25956: LD_VAR 0 3
25960: NOT
25961: IFFALSE 25965
// exit ;
25963: GO 26051
// un := tmp [ rand ( 1 , tmp ) ] ;
25965: LD_ADDR_VAR 0 2
25969: PUSH
25970: LD_VAR 0 3
25974: PUSH
25975: LD_INT 1
25977: PPUSH
25978: LD_VAR 0 3
25982: PPUSH
25983: CALL_OW 12
25987: ARRAY
25988: ST_TO_ADDR
// if Crawls ( un ) then
25989: LD_VAR 0 2
25993: PPUSH
25994: CALL_OW 318
25998: IFFALSE 26009
// ComWalk ( un ) ;
26000: LD_VAR 0 2
26004: PPUSH
26005: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26009: LD_VAR 0 2
26013: PPUSH
26014: LD_INT 9
26016: PPUSH
26017: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26021: LD_INT 28
26023: PPUSH
26024: LD_OWVAR 2
26028: PPUSH
26029: LD_INT 2
26031: PPUSH
26032: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26036: LD_INT 29
26038: PPUSH
26039: LD_OWVAR 2
26043: PPUSH
26044: LD_INT 2
26046: PPUSH
26047: CALL_OW 322
// end ;
26051: PPOPN 3
26053: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26054: LD_EXP 41
26058: PUSH
26059: LD_EXP 84
26063: AND
26064: IFFALSE 26175
26066: GO 26068
26068: DISABLE
26069: LD_INT 0
26071: PPUSH
26072: PPUSH
26073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26074: LD_ADDR_VAR 0 3
26078: PUSH
26079: LD_INT 22
26081: PUSH
26082: LD_OWVAR 2
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 25
26093: PUSH
26094: LD_INT 1
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 69
26109: ST_TO_ADDR
// if not tmp then
26110: LD_VAR 0 3
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26175
// un := tmp [ rand ( 1 , tmp ) ] ;
26119: LD_ADDR_VAR 0 2
26123: PUSH
26124: LD_VAR 0 3
26128: PUSH
26129: LD_INT 1
26131: PPUSH
26132: LD_VAR 0 3
26136: PPUSH
26137: CALL_OW 12
26141: ARRAY
26142: ST_TO_ADDR
// if Crawls ( un ) then
26143: LD_VAR 0 2
26147: PPUSH
26148: CALL_OW 318
26152: IFFALSE 26163
// ComWalk ( un ) ;
26154: LD_VAR 0 2
26158: PPUSH
26159: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26163: LD_VAR 0 2
26167: PPUSH
26168: LD_INT 8
26170: PPUSH
26171: CALL_OW 336
// end ;
26175: PPOPN 3
26177: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26178: LD_EXP 41
26182: PUSH
26183: LD_EXP 85
26187: AND
26188: IFFALSE 26332
26190: GO 26192
26192: DISABLE
26193: LD_INT 0
26195: PPUSH
26196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_INT 22
26204: PUSH
26205: LD_OWVAR 2
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 21
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: LD_INT 34
26229: PUSH
26230: LD_INT 12
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 34
26239: PUSH
26240: LD_INT 51
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 34
26249: PUSH
26250: LD_INT 32
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: LIST
26267: PPUSH
26268: CALL_OW 69
26272: ST_TO_ADDR
// if not tmp then
26273: LD_VAR 0 2
26277: NOT
26278: IFFALSE 26282
// exit ;
26280: GO 26332
// for i in tmp do
26282: LD_ADDR_VAR 0 1
26286: PUSH
26287: LD_VAR 0 2
26291: PUSH
26292: FOR_IN
26293: IFFALSE 26330
// if GetCargo ( i , mat_artifact ) = 0 then
26295: LD_VAR 0 1
26299: PPUSH
26300: LD_INT 4
26302: PPUSH
26303: CALL_OW 289
26307: PUSH
26308: LD_INT 0
26310: EQUAL
26311: IFFALSE 26328
// SetCargo ( i , mat_siberit , 100 ) ;
26313: LD_VAR 0 1
26317: PPUSH
26318: LD_INT 3
26320: PPUSH
26321: LD_INT 100
26323: PPUSH
26324: CALL_OW 290
26328: GO 26292
26330: POP
26331: POP
// end ;
26332: PPOPN 2
26334: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26335: LD_EXP 41
26339: PUSH
26340: LD_EXP 86
26344: AND
26345: IFFALSE 26528
26347: GO 26349
26349: DISABLE
26350: LD_INT 0
26352: PPUSH
26353: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26354: LD_ADDR_VAR 0 2
26358: PUSH
26359: LD_INT 22
26361: PUSH
26362: LD_OWVAR 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PPUSH
26371: CALL_OW 69
26375: ST_TO_ADDR
// if not tmp then
26376: LD_VAR 0 2
26380: NOT
26381: IFFALSE 26385
// exit ;
26383: GO 26528
// for i := 1 to 2 do
26385: LD_ADDR_VAR 0 1
26389: PUSH
26390: DOUBLE
26391: LD_INT 1
26393: DEC
26394: ST_TO_ADDR
26395: LD_INT 2
26397: PUSH
26398: FOR_TO
26399: IFFALSE 26526
// begin uc_side := your_side ;
26401: LD_ADDR_OWVAR 20
26405: PUSH
26406: LD_OWVAR 2
26410: ST_TO_ADDR
// uc_nation := nation_american ;
26411: LD_ADDR_OWVAR 21
26415: PUSH
26416: LD_INT 1
26418: ST_TO_ADDR
// vc_chassis := us_morphling ;
26419: LD_ADDR_OWVAR 37
26423: PUSH
26424: LD_INT 5
26426: ST_TO_ADDR
// vc_engine := engine_siberite ;
26427: LD_ADDR_OWVAR 39
26431: PUSH
26432: LD_INT 3
26434: ST_TO_ADDR
// vc_control := control_computer ;
26435: LD_ADDR_OWVAR 38
26439: PUSH
26440: LD_INT 3
26442: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26443: LD_ADDR_OWVAR 40
26447: PUSH
26448: LD_INT 10
26450: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26451: LD_VAR 0 2
26455: PUSH
26456: LD_INT 1
26458: ARRAY
26459: PPUSH
26460: CALL_OW 310
26464: NOT
26465: IFFALSE 26512
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26467: CALL_OW 45
26471: PPUSH
26472: LD_VAR 0 2
26476: PUSH
26477: LD_INT 1
26479: ARRAY
26480: PPUSH
26481: CALL_OW 250
26485: PPUSH
26486: LD_VAR 0 2
26490: PUSH
26491: LD_INT 1
26493: ARRAY
26494: PPUSH
26495: CALL_OW 251
26499: PPUSH
26500: LD_INT 12
26502: PPUSH
26503: LD_INT 1
26505: PPUSH
26506: CALL_OW 50
26510: GO 26524
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26512: CALL_OW 45
26516: PPUSH
26517: LD_INT 1
26519: PPUSH
26520: CALL_OW 51
// end ;
26524: GO 26398
26526: POP
26527: POP
// end ;
26528: PPOPN 2
26530: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26531: LD_EXP 41
26535: PUSH
26536: LD_EXP 87
26540: AND
26541: IFFALSE 26763
26543: GO 26545
26545: DISABLE
26546: LD_INT 0
26548: PPUSH
26549: PPUSH
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26554: LD_ADDR_VAR 0 6
26558: PUSH
26559: LD_INT 22
26561: PUSH
26562: LD_OWVAR 2
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 21
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 3
26583: PUSH
26584: LD_INT 23
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: LIST
26602: PPUSH
26603: CALL_OW 69
26607: ST_TO_ADDR
// if not tmp then
26608: LD_VAR 0 6
26612: NOT
26613: IFFALSE 26617
// exit ;
26615: GO 26763
// s1 := rand ( 1 , 4 ) ;
26617: LD_ADDR_VAR 0 2
26621: PUSH
26622: LD_INT 1
26624: PPUSH
26625: LD_INT 4
26627: PPUSH
26628: CALL_OW 12
26632: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26633: LD_ADDR_VAR 0 4
26637: PUSH
26638: LD_VAR 0 6
26642: PUSH
26643: LD_INT 1
26645: ARRAY
26646: PPUSH
26647: LD_VAR 0 2
26651: PPUSH
26652: CALL_OW 259
26656: ST_TO_ADDR
// if s1 = 1 then
26657: LD_VAR 0 2
26661: PUSH
26662: LD_INT 1
26664: EQUAL
26665: IFFALSE 26685
// s2 := rand ( 2 , 4 ) else
26667: LD_ADDR_VAR 0 3
26671: PUSH
26672: LD_INT 2
26674: PPUSH
26675: LD_INT 4
26677: PPUSH
26678: CALL_OW 12
26682: ST_TO_ADDR
26683: GO 26693
// s2 := 1 ;
26685: LD_ADDR_VAR 0 3
26689: PUSH
26690: LD_INT 1
26692: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26693: LD_ADDR_VAR 0 5
26697: PUSH
26698: LD_VAR 0 6
26702: PUSH
26703: LD_INT 1
26705: ARRAY
26706: PPUSH
26707: LD_VAR 0 3
26711: PPUSH
26712: CALL_OW 259
26716: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26717: LD_VAR 0 6
26721: PUSH
26722: LD_INT 1
26724: ARRAY
26725: PPUSH
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_VAR 0 5
26735: PPUSH
26736: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26740: LD_VAR 0 6
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PPUSH
26749: LD_VAR 0 3
26753: PPUSH
26754: LD_VAR 0 4
26758: PPUSH
26759: CALL_OW 237
// end ;
26763: PPOPN 6
26765: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26766: LD_EXP 41
26770: PUSH
26771: LD_EXP 88
26775: AND
26776: IFFALSE 26855
26778: GO 26780
26780: DISABLE
26781: LD_INT 0
26783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26784: LD_ADDR_VAR 0 1
26788: PUSH
26789: LD_INT 22
26791: PUSH
26792: LD_OWVAR 2
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: LD_INT 3
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PPUSH
26815: CALL_OW 69
26819: ST_TO_ADDR
// if not tmp then
26820: LD_VAR 0 1
26824: NOT
26825: IFFALSE 26829
// exit ;
26827: GO 26855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26829: LD_VAR 0 1
26833: PUSH
26834: LD_INT 1
26836: PPUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 12
26846: ARRAY
26847: PPUSH
26848: LD_INT 1
26850: PPUSH
26851: CALL_OW 234
// end ;
26855: PPOPN 1
26857: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26858: LD_EXP 41
26862: PUSH
26863: LD_EXP 89
26867: AND
26868: IFFALSE 26980
26870: GO 26872
26872: DISABLE
26873: LD_INT 0
26875: PPUSH
26876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26877: LD_ADDR_VAR 0 2
26881: PUSH
26882: LD_INT 22
26884: PUSH
26885: LD_OWVAR 2
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: LD_INT 30
26899: PUSH
26900: LD_INT 27
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 30
26909: PUSH
26910: LD_INT 26
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 30
26919: PUSH
26920: LD_INT 28
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 69
26941: ST_TO_ADDR
// if not tmp then
26942: LD_VAR 0 2
26946: NOT
26947: IFFALSE 26951
// exit ;
26949: GO 26980
// for i in tmp do
26951: LD_ADDR_VAR 0 1
26955: PUSH
26956: LD_VAR 0 2
26960: PUSH
26961: FOR_IN
26962: IFFALSE 26978
// SetLives ( i , 1 ) ;
26964: LD_VAR 0 1
26968: PPUSH
26969: LD_INT 1
26971: PPUSH
26972: CALL_OW 234
26976: GO 26961
26978: POP
26979: POP
// end ;
26980: PPOPN 2
26982: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26983: LD_EXP 41
26987: PUSH
26988: LD_EXP 90
26992: AND
26993: IFFALSE 27280
26995: GO 26997
26997: DISABLE
26998: LD_INT 0
27000: PPUSH
27001: PPUSH
27002: PPUSH
// begin i := rand ( 1 , 7 ) ;
27003: LD_ADDR_VAR 0 1
27007: PUSH
27008: LD_INT 1
27010: PPUSH
27011: LD_INT 7
27013: PPUSH
27014: CALL_OW 12
27018: ST_TO_ADDR
// case i of 1 :
27019: LD_VAR 0 1
27023: PUSH
27024: LD_INT 1
27026: DOUBLE
27027: EQUAL
27028: IFTRUE 27032
27030: GO 27042
27032: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27033: LD_STRING earthquake(getX(game), 0, 32)
27035: PPUSH
27036: CALL_OW 559
27040: GO 27280
27042: LD_INT 2
27044: DOUBLE
27045: EQUAL
27046: IFTRUE 27050
27048: GO 27064
27050: POP
// begin ToLua ( displayStucuk(); ) ;
27051: LD_STRING displayStucuk();
27053: PPUSH
27054: CALL_OW 559
// ResetFog ;
27058: CALL_OW 335
// end ; 3 :
27062: GO 27280
27064: LD_INT 3
27066: DOUBLE
27067: EQUAL
27068: IFTRUE 27072
27070: GO 27176
27072: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27073: LD_ADDR_VAR 0 2
27077: PUSH
27078: LD_INT 22
27080: PUSH
27081: LD_OWVAR 2
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 25
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 69
27108: ST_TO_ADDR
// if not tmp then
27109: LD_VAR 0 2
27113: NOT
27114: IFFALSE 27118
// exit ;
27116: GO 27280
// un := tmp [ rand ( 1 , tmp ) ] ;
27118: LD_ADDR_VAR 0 3
27122: PUSH
27123: LD_VAR 0 2
27127: PUSH
27128: LD_INT 1
27130: PPUSH
27131: LD_VAR 0 2
27135: PPUSH
27136: CALL_OW 12
27140: ARRAY
27141: ST_TO_ADDR
// if Crawls ( un ) then
27142: LD_VAR 0 3
27146: PPUSH
27147: CALL_OW 318
27151: IFFALSE 27162
// ComWalk ( un ) ;
27153: LD_VAR 0 3
27157: PPUSH
27158: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27162: LD_VAR 0 3
27166: PPUSH
27167: LD_INT 8
27169: PPUSH
27170: CALL_OW 336
// end ; 4 :
27174: GO 27280
27176: LD_INT 4
27178: DOUBLE
27179: EQUAL
27180: IFTRUE 27184
27182: GO 27258
27184: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27185: LD_ADDR_VAR 0 2
27189: PUSH
27190: LD_INT 22
27192: PUSH
27193: LD_OWVAR 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 30
27204: PUSH
27205: LD_INT 29
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PPUSH
27216: CALL_OW 69
27220: ST_TO_ADDR
// if not tmp then
27221: LD_VAR 0 2
27225: NOT
27226: IFFALSE 27230
// exit ;
27228: GO 27280
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27230: LD_VAR 0 2
27234: PUSH
27235: LD_INT 1
27237: ARRAY
27238: PPUSH
27239: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27243: LD_VAR 0 2
27247: PUSH
27248: LD_INT 1
27250: ARRAY
27251: PPUSH
27252: CALL_OW 65
// end ; 5 .. 7 :
27256: GO 27280
27258: LD_INT 5
27260: DOUBLE
27261: GREATEREQUAL
27262: IFFALSE 27270
27264: LD_INT 7
27266: DOUBLE
27267: LESSEQUAL
27268: IFTRUE 27272
27270: GO 27279
27272: POP
// StreamSibBomb ; end ;
27273: CALL 23517 0 0
27277: GO 27280
27279: POP
// end ;
27280: PPOPN 3
27282: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27283: LD_EXP 41
27287: PUSH
27288: LD_EXP 91
27292: AND
27293: IFFALSE 27449
27295: GO 27297
27297: DISABLE
27298: LD_INT 0
27300: PPUSH
27301: PPUSH
27302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27303: LD_ADDR_VAR 0 2
27307: PUSH
27308: LD_INT 81
27310: PUSH
27311: LD_OWVAR 2
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 2
27322: PUSH
27323: LD_INT 21
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 21
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PPUSH
27352: CALL_OW 69
27356: ST_TO_ADDR
// if not tmp then
27357: LD_VAR 0 2
27361: NOT
27362: IFFALSE 27366
// exit ;
27364: GO 27449
// p := 0 ;
27366: LD_ADDR_VAR 0 3
27370: PUSH
27371: LD_INT 0
27373: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27374: LD_INT 35
27376: PPUSH
27377: CALL_OW 67
// p := p + 1 ;
27381: LD_ADDR_VAR 0 3
27385: PUSH
27386: LD_VAR 0 3
27390: PUSH
27391: LD_INT 1
27393: PLUS
27394: ST_TO_ADDR
// for i in tmp do
27395: LD_ADDR_VAR 0 1
27399: PUSH
27400: LD_VAR 0 2
27404: PUSH
27405: FOR_IN
27406: IFFALSE 27437
// if GetLives ( i ) < 1000 then
27408: LD_VAR 0 1
27412: PPUSH
27413: CALL_OW 256
27417: PUSH
27418: LD_INT 1000
27420: LESS
27421: IFFALSE 27435
// SetLives ( i , 1000 ) ;
27423: LD_VAR 0 1
27427: PPUSH
27428: LD_INT 1000
27430: PPUSH
27431: CALL_OW 234
27435: GO 27405
27437: POP
27438: POP
// until p > 20 ;
27439: LD_VAR 0 3
27443: PUSH
27444: LD_INT 20
27446: GREATER
27447: IFFALSE 27374
// end ;
27449: PPOPN 3
27451: END
// every 0 0$1 trigger StreamModeActive and sTime do
27452: LD_EXP 41
27456: PUSH
27457: LD_EXP 92
27461: AND
27462: IFFALSE 27497
27464: GO 27466
27466: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27467: LD_INT 28
27469: PPUSH
27470: LD_OWVAR 2
27474: PPUSH
27475: LD_INT 2
27477: PPUSH
27478: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27482: LD_INT 30
27484: PPUSH
27485: LD_OWVAR 2
27489: PPUSH
27490: LD_INT 2
27492: PPUSH
27493: CALL_OW 322
// end ;
27497: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27498: LD_EXP 41
27502: PUSH
27503: LD_EXP 93
27507: AND
27508: IFFALSE 27629
27510: GO 27512
27512: DISABLE
27513: LD_INT 0
27515: PPUSH
27516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27517: LD_ADDR_VAR 0 2
27521: PUSH
27522: LD_INT 22
27524: PUSH
27525: LD_OWVAR 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 21
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 3
27546: PUSH
27547: LD_INT 23
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: PPUSH
27566: CALL_OW 69
27570: ST_TO_ADDR
// if not tmp then
27571: LD_VAR 0 2
27575: NOT
27576: IFFALSE 27580
// exit ;
27578: GO 27629
// for i in tmp do
27580: LD_ADDR_VAR 0 1
27584: PUSH
27585: LD_VAR 0 2
27589: PUSH
27590: FOR_IN
27591: IFFALSE 27627
// begin if Crawls ( i ) then
27593: LD_VAR 0 1
27597: PPUSH
27598: CALL_OW 318
27602: IFFALSE 27613
// ComWalk ( i ) ;
27604: LD_VAR 0 1
27608: PPUSH
27609: CALL_OW 138
// SetClass ( i , 2 ) ;
27613: LD_VAR 0 1
27617: PPUSH
27618: LD_INT 2
27620: PPUSH
27621: CALL_OW 336
// end ;
27625: GO 27590
27627: POP
27628: POP
// end ;
27629: PPOPN 2
27631: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27632: LD_EXP 41
27636: PUSH
27637: LD_EXP 94
27641: AND
27642: IFFALSE 27930
27644: GO 27646
27646: DISABLE
27647: LD_INT 0
27649: PPUSH
27650: PPUSH
27651: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27652: LD_OWVAR 2
27656: PPUSH
27657: LD_INT 9
27659: PPUSH
27660: LD_INT 1
27662: PPUSH
27663: LD_INT 1
27665: PPUSH
27666: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27670: LD_INT 9
27672: PPUSH
27673: LD_OWVAR 2
27677: PPUSH
27678: CALL_OW 343
// uc_side := 9 ;
27682: LD_ADDR_OWVAR 20
27686: PUSH
27687: LD_INT 9
27689: ST_TO_ADDR
// uc_nation := 2 ;
27690: LD_ADDR_OWVAR 21
27694: PUSH
27695: LD_INT 2
27697: ST_TO_ADDR
// hc_name := Dark Warrior ;
27698: LD_ADDR_OWVAR 26
27702: PUSH
27703: LD_STRING Dark Warrior
27705: ST_TO_ADDR
// hc_gallery :=  ;
27706: LD_ADDR_OWVAR 33
27710: PUSH
27711: LD_STRING 
27713: ST_TO_ADDR
// hc_noskilllimit := true ;
27714: LD_ADDR_OWVAR 76
27718: PUSH
27719: LD_INT 1
27721: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27722: LD_ADDR_OWVAR 31
27726: PUSH
27727: LD_INT 30
27729: PUSH
27730: LD_INT 30
27732: PUSH
27733: LD_INT 30
27735: PUSH
27736: LD_INT 30
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: ST_TO_ADDR
// un := CreateHuman ;
27745: LD_ADDR_VAR 0 3
27749: PUSH
27750: CALL_OW 44
27754: ST_TO_ADDR
// hc_noskilllimit := false ;
27755: LD_ADDR_OWVAR 76
27759: PUSH
27760: LD_INT 0
27762: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27763: LD_VAR 0 3
27767: PPUSH
27768: LD_INT 1
27770: PPUSH
27771: CALL_OW 51
// ToLua ( playRanger() ) ;
27775: LD_STRING playRanger()
27777: PPUSH
27778: CALL_OW 559
// p := 0 ;
27782: LD_ADDR_VAR 0 2
27786: PUSH
27787: LD_INT 0
27789: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27790: LD_INT 35
27792: PPUSH
27793: CALL_OW 67
// p := p + 1 ;
27797: LD_ADDR_VAR 0 2
27801: PUSH
27802: LD_VAR 0 2
27806: PUSH
27807: LD_INT 1
27809: PLUS
27810: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27811: LD_VAR 0 3
27815: PPUSH
27816: CALL_OW 256
27820: PUSH
27821: LD_INT 1000
27823: LESS
27824: IFFALSE 27838
// SetLives ( un , 1000 ) ;
27826: LD_VAR 0 3
27830: PPUSH
27831: LD_INT 1000
27833: PPUSH
27834: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27838: LD_VAR 0 3
27842: PPUSH
27843: LD_INT 81
27845: PUSH
27846: LD_OWVAR 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 91
27857: PUSH
27858: LD_VAR 0 3
27862: PUSH
27863: LD_INT 30
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PPUSH
27875: CALL_OW 69
27879: PPUSH
27880: LD_VAR 0 3
27884: PPUSH
27885: CALL_OW 74
27889: PPUSH
27890: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27894: LD_VAR 0 2
27898: PUSH
27899: LD_INT 80
27901: GREATER
27902: PUSH
27903: LD_VAR 0 3
27907: PPUSH
27908: CALL_OW 301
27912: OR
27913: IFFALSE 27790
// if un then
27915: LD_VAR 0 3
27919: IFFALSE 27930
// RemoveUnit ( un ) ;
27921: LD_VAR 0 3
27925: PPUSH
27926: CALL_OW 64
// end ;
27930: PPOPN 3
27932: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27933: LD_EXP 95
27937: IFFALSE 28053
27939: GO 27941
27941: DISABLE
27942: LD_INT 0
27944: PPUSH
27945: PPUSH
27946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27947: LD_ADDR_VAR 0 2
27951: PUSH
27952: LD_INT 81
27954: PUSH
27955: LD_OWVAR 2
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 21
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PPUSH
27978: CALL_OW 69
27982: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27983: LD_STRING playComputer()
27985: PPUSH
27986: CALL_OW 559
// if not tmp then
27990: LD_VAR 0 2
27994: NOT
27995: IFFALSE 27999
// exit ;
27997: GO 28053
// for i in tmp do
27999: LD_ADDR_VAR 0 1
28003: PUSH
28004: LD_VAR 0 2
28008: PUSH
28009: FOR_IN
28010: IFFALSE 28051
// for j := 1 to 4 do
28012: LD_ADDR_VAR 0 3
28016: PUSH
28017: DOUBLE
28018: LD_INT 1
28020: DEC
28021: ST_TO_ADDR
28022: LD_INT 4
28024: PUSH
28025: FOR_TO
28026: IFFALSE 28047
// SetSkill ( i , j , 10 ) ;
28028: LD_VAR 0 1
28032: PPUSH
28033: LD_VAR 0 3
28037: PPUSH
28038: LD_INT 10
28040: PPUSH
28041: CALL_OW 237
28045: GO 28025
28047: POP
28048: POP
28049: GO 28009
28051: POP
28052: POP
// end ;
28053: PPOPN 3
28055: END
// every 0 0$1 trigger s30 do var i , tmp ;
28056: LD_EXP 96
28060: IFFALSE 28129
28062: GO 28064
28064: DISABLE
28065: LD_INT 0
28067: PPUSH
28068: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28069: LD_ADDR_VAR 0 2
28073: PUSH
28074: LD_INT 22
28076: PUSH
28077: LD_OWVAR 2
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: ST_TO_ADDR
// if not tmp then
28091: LD_VAR 0 2
28095: NOT
28096: IFFALSE 28100
// exit ;
28098: GO 28129
// for i in tmp do
28100: LD_ADDR_VAR 0 1
28104: PUSH
28105: LD_VAR 0 2
28109: PUSH
28110: FOR_IN
28111: IFFALSE 28127
// SetLives ( i , 300 ) ;
28113: LD_VAR 0 1
28117: PPUSH
28118: LD_INT 300
28120: PPUSH
28121: CALL_OW 234
28125: GO 28110
28127: POP
28128: POP
// end ;
28129: PPOPN 2
28131: END
// every 0 0$1 trigger s60 do var i , tmp ;
28132: LD_EXP 97
28136: IFFALSE 28205
28138: GO 28140
28140: DISABLE
28141: LD_INT 0
28143: PPUSH
28144: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28145: LD_ADDR_VAR 0 2
28149: PUSH
28150: LD_INT 22
28152: PUSH
28153: LD_OWVAR 2
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL_OW 69
28166: ST_TO_ADDR
// if not tmp then
28167: LD_VAR 0 2
28171: NOT
28172: IFFALSE 28176
// exit ;
28174: GO 28205
// for i in tmp do
28176: LD_ADDR_VAR 0 1
28180: PUSH
28181: LD_VAR 0 2
28185: PUSH
28186: FOR_IN
28187: IFFALSE 28203
// SetLives ( i , 600 ) ;
28189: LD_VAR 0 1
28193: PPUSH
28194: LD_INT 600
28196: PPUSH
28197: CALL_OW 234
28201: GO 28186
28203: POP
28204: POP
// end ;
28205: PPOPN 2
28207: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28208: LD_INT 0
28210: PPUSH
// case cmd of 301 :
28211: LD_VAR 0 1
28215: PUSH
28216: LD_INT 301
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28256
28224: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28225: LD_VAR 0 6
28229: PPUSH
28230: LD_VAR 0 7
28234: PPUSH
28235: LD_VAR 0 8
28239: PPUSH
28240: LD_VAR 0 4
28244: PPUSH
28245: LD_VAR 0 5
28249: PPUSH
28250: CALL 29465 0 5
28254: GO 28377
28256: LD_INT 302
28258: DOUBLE
28259: EQUAL
28260: IFTRUE 28264
28262: GO 28301
28264: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28265: LD_VAR 0 6
28269: PPUSH
28270: LD_VAR 0 7
28274: PPUSH
28275: LD_VAR 0 8
28279: PPUSH
28280: LD_VAR 0 9
28284: PPUSH
28285: LD_VAR 0 4
28289: PPUSH
28290: LD_VAR 0 5
28294: PPUSH
28295: CALL 29556 0 6
28299: GO 28377
28301: LD_INT 303
28303: DOUBLE
28304: EQUAL
28305: IFTRUE 28309
28307: GO 28346
28309: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28310: LD_VAR 0 6
28314: PPUSH
28315: LD_VAR 0 7
28319: PPUSH
28320: LD_VAR 0 8
28324: PPUSH
28325: LD_VAR 0 9
28329: PPUSH
28330: LD_VAR 0 4
28334: PPUSH
28335: LD_VAR 0 5
28339: PPUSH
28340: CALL 28382 0 6
28344: GO 28377
28346: LD_INT 304
28348: DOUBLE
28349: EQUAL
28350: IFTRUE 28354
28352: GO 28376
28354: POP
// hHackTeleport ( unit , x , y ) ; end ;
28355: LD_VAR 0 2
28359: PPUSH
28360: LD_VAR 0 4
28364: PPUSH
28365: LD_VAR 0 5
28369: PPUSH
28370: CALL 30149 0 3
28374: GO 28377
28376: POP
// end ;
28377: LD_VAR 0 12
28381: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28382: LD_INT 0
28384: PPUSH
28385: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28386: LD_VAR 0 1
28390: PUSH
28391: LD_INT 1
28393: LESS
28394: PUSH
28395: LD_VAR 0 1
28399: PUSH
28400: LD_INT 3
28402: GREATER
28403: OR
28404: PUSH
28405: LD_VAR 0 5
28409: PPUSH
28410: LD_VAR 0 6
28414: PPUSH
28415: CALL_OW 428
28419: OR
28420: IFFALSE 28424
// exit ;
28422: GO 29152
// uc_side := your_side ;
28424: LD_ADDR_OWVAR 20
28428: PUSH
28429: LD_OWVAR 2
28433: ST_TO_ADDR
// uc_nation := nation ;
28434: LD_ADDR_OWVAR 21
28438: PUSH
28439: LD_VAR 0 1
28443: ST_TO_ADDR
// bc_level = 1 ;
28444: LD_ADDR_OWVAR 43
28448: PUSH
28449: LD_INT 1
28451: ST_TO_ADDR
// case btype of 1 :
28452: LD_VAR 0 2
28456: PUSH
28457: LD_INT 1
28459: DOUBLE
28460: EQUAL
28461: IFTRUE 28465
28463: GO 28476
28465: POP
// bc_type := b_depot ; 2 :
28466: LD_ADDR_OWVAR 42
28470: PUSH
28471: LD_INT 0
28473: ST_TO_ADDR
28474: GO 29096
28476: LD_INT 2
28478: DOUBLE
28479: EQUAL
28480: IFTRUE 28484
28482: GO 28495
28484: POP
// bc_type := b_warehouse ; 3 :
28485: LD_ADDR_OWVAR 42
28489: PUSH
28490: LD_INT 1
28492: ST_TO_ADDR
28493: GO 29096
28495: LD_INT 3
28497: DOUBLE
28498: EQUAL
28499: IFTRUE 28503
28501: GO 28514
28503: POP
// bc_type := b_lab ; 4 .. 9 :
28504: LD_ADDR_OWVAR 42
28508: PUSH
28509: LD_INT 6
28511: ST_TO_ADDR
28512: GO 29096
28514: LD_INT 4
28516: DOUBLE
28517: GREATEREQUAL
28518: IFFALSE 28526
28520: LD_INT 9
28522: DOUBLE
28523: LESSEQUAL
28524: IFTRUE 28528
28526: GO 28588
28528: POP
// begin bc_type := b_lab_half ;
28529: LD_ADDR_OWVAR 42
28533: PUSH
28534: LD_INT 7
28536: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28537: LD_ADDR_OWVAR 44
28541: PUSH
28542: LD_INT 10
28544: PUSH
28545: LD_INT 11
28547: PUSH
28548: LD_INT 12
28550: PUSH
28551: LD_INT 15
28553: PUSH
28554: LD_INT 14
28556: PUSH
28557: LD_INT 13
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: PUSH
28568: LD_VAR 0 2
28572: PUSH
28573: LD_INT 3
28575: MINUS
28576: ARRAY
28577: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28578: LD_ADDR_OWVAR 45
28582: PUSH
28583: LD_INT 9
28585: ST_TO_ADDR
// end ; 10 .. 13 :
28586: GO 29096
28588: LD_INT 10
28590: DOUBLE
28591: GREATEREQUAL
28592: IFFALSE 28600
28594: LD_INT 13
28596: DOUBLE
28597: LESSEQUAL
28598: IFTRUE 28602
28600: GO 28679
28602: POP
// begin bc_type := b_lab_full ;
28603: LD_ADDR_OWVAR 42
28607: PUSH
28608: LD_INT 8
28610: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28611: LD_ADDR_OWVAR 44
28615: PUSH
28616: LD_INT 10
28618: PUSH
28619: LD_INT 12
28621: PUSH
28622: LD_INT 14
28624: PUSH
28625: LD_INT 13
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: PUSH
28634: LD_VAR 0 2
28638: PUSH
28639: LD_INT 9
28641: MINUS
28642: ARRAY
28643: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28644: LD_ADDR_OWVAR 45
28648: PUSH
28649: LD_INT 11
28651: PUSH
28652: LD_INT 15
28654: PUSH
28655: LD_INT 12
28657: PUSH
28658: LD_INT 15
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: PUSH
28667: LD_VAR 0 2
28671: PUSH
28672: LD_INT 9
28674: MINUS
28675: ARRAY
28676: ST_TO_ADDR
// end ; 14 :
28677: GO 29096
28679: LD_INT 14
28681: DOUBLE
28682: EQUAL
28683: IFTRUE 28687
28685: GO 28698
28687: POP
// bc_type := b_workshop ; 15 :
28688: LD_ADDR_OWVAR 42
28692: PUSH
28693: LD_INT 2
28695: ST_TO_ADDR
28696: GO 29096
28698: LD_INT 15
28700: DOUBLE
28701: EQUAL
28702: IFTRUE 28706
28704: GO 28717
28706: POP
// bc_type := b_factory ; 16 :
28707: LD_ADDR_OWVAR 42
28711: PUSH
28712: LD_INT 3
28714: ST_TO_ADDR
28715: GO 29096
28717: LD_INT 16
28719: DOUBLE
28720: EQUAL
28721: IFTRUE 28725
28723: GO 28736
28725: POP
// bc_type := b_ext_gun ; 17 :
28726: LD_ADDR_OWVAR 42
28730: PUSH
28731: LD_INT 17
28733: ST_TO_ADDR
28734: GO 29096
28736: LD_INT 17
28738: DOUBLE
28739: EQUAL
28740: IFTRUE 28744
28742: GO 28772
28744: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28745: LD_ADDR_OWVAR 42
28749: PUSH
28750: LD_INT 19
28752: PUSH
28753: LD_INT 23
28755: PUSH
28756: LD_INT 19
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: PUSH
28764: LD_VAR 0 1
28768: ARRAY
28769: ST_TO_ADDR
28770: GO 29096
28772: LD_INT 18
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28791
28780: POP
// bc_type := b_ext_radar ; 19 :
28781: LD_ADDR_OWVAR 42
28785: PUSH
28786: LD_INT 20
28788: ST_TO_ADDR
28789: GO 29096
28791: LD_INT 19
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28810
28799: POP
// bc_type := b_ext_radio ; 20 :
28800: LD_ADDR_OWVAR 42
28804: PUSH
28805: LD_INT 22
28807: ST_TO_ADDR
28808: GO 29096
28810: LD_INT 20
28812: DOUBLE
28813: EQUAL
28814: IFTRUE 28818
28816: GO 28829
28818: POP
// bc_type := b_ext_siberium ; 21 :
28819: LD_ADDR_OWVAR 42
28823: PUSH
28824: LD_INT 21
28826: ST_TO_ADDR
28827: GO 29096
28829: LD_INT 21
28831: DOUBLE
28832: EQUAL
28833: IFTRUE 28837
28835: GO 28848
28837: POP
// bc_type := b_ext_computer ; 22 :
28838: LD_ADDR_OWVAR 42
28842: PUSH
28843: LD_INT 24
28845: ST_TO_ADDR
28846: GO 29096
28848: LD_INT 22
28850: DOUBLE
28851: EQUAL
28852: IFTRUE 28856
28854: GO 28867
28856: POP
// bc_type := b_ext_track ; 23 :
28857: LD_ADDR_OWVAR 42
28861: PUSH
28862: LD_INT 16
28864: ST_TO_ADDR
28865: GO 29096
28867: LD_INT 23
28869: DOUBLE
28870: EQUAL
28871: IFTRUE 28875
28873: GO 28886
28875: POP
// bc_type := b_ext_laser ; 24 :
28876: LD_ADDR_OWVAR 42
28880: PUSH
28881: LD_INT 25
28883: ST_TO_ADDR
28884: GO 29096
28886: LD_INT 24
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28905
28894: POP
// bc_type := b_control_tower ; 25 :
28895: LD_ADDR_OWVAR 42
28899: PUSH
28900: LD_INT 36
28902: ST_TO_ADDR
28903: GO 29096
28905: LD_INT 25
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 28924
28913: POP
// bc_type := b_breastwork ; 26 :
28914: LD_ADDR_OWVAR 42
28918: PUSH
28919: LD_INT 31
28921: ST_TO_ADDR
28922: GO 29096
28924: LD_INT 26
28926: DOUBLE
28927: EQUAL
28928: IFTRUE 28932
28930: GO 28943
28932: POP
// bc_type := b_bunker ; 27 :
28933: LD_ADDR_OWVAR 42
28937: PUSH
28938: LD_INT 32
28940: ST_TO_ADDR
28941: GO 29096
28943: LD_INT 27
28945: DOUBLE
28946: EQUAL
28947: IFTRUE 28951
28949: GO 28962
28951: POP
// bc_type := b_turret ; 28 :
28952: LD_ADDR_OWVAR 42
28956: PUSH
28957: LD_INT 33
28959: ST_TO_ADDR
28960: GO 29096
28962: LD_INT 28
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28970
28968: GO 28981
28970: POP
// bc_type := b_armoury ; 29 :
28971: LD_ADDR_OWVAR 42
28975: PUSH
28976: LD_INT 4
28978: ST_TO_ADDR
28979: GO 29096
28981: LD_INT 29
28983: DOUBLE
28984: EQUAL
28985: IFTRUE 28989
28987: GO 29000
28989: POP
// bc_type := b_barracks ; 30 :
28990: LD_ADDR_OWVAR 42
28994: PUSH
28995: LD_INT 5
28997: ST_TO_ADDR
28998: GO 29096
29000: LD_INT 30
29002: DOUBLE
29003: EQUAL
29004: IFTRUE 29008
29006: GO 29019
29008: POP
// bc_type := b_solar_power ; 31 :
29009: LD_ADDR_OWVAR 42
29013: PUSH
29014: LD_INT 27
29016: ST_TO_ADDR
29017: GO 29096
29019: LD_INT 31
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29038
29027: POP
// bc_type := b_oil_power ; 32 :
29028: LD_ADDR_OWVAR 42
29032: PUSH
29033: LD_INT 26
29035: ST_TO_ADDR
29036: GO 29096
29038: LD_INT 32
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29057
29046: POP
// bc_type := b_siberite_power ; 33 :
29047: LD_ADDR_OWVAR 42
29051: PUSH
29052: LD_INT 28
29054: ST_TO_ADDR
29055: GO 29096
29057: LD_INT 33
29059: DOUBLE
29060: EQUAL
29061: IFTRUE 29065
29063: GO 29076
29065: POP
// bc_type := b_oil_mine ; 34 :
29066: LD_ADDR_OWVAR 42
29070: PUSH
29071: LD_INT 29
29073: ST_TO_ADDR
29074: GO 29096
29076: LD_INT 34
29078: DOUBLE
29079: EQUAL
29080: IFTRUE 29084
29082: GO 29095
29084: POP
// bc_type := b_siberite_mine ; end ;
29085: LD_ADDR_OWVAR 42
29089: PUSH
29090: LD_INT 30
29092: ST_TO_ADDR
29093: GO 29096
29095: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29096: LD_ADDR_VAR 0 8
29100: PUSH
29101: LD_VAR 0 5
29105: PPUSH
29106: LD_VAR 0 6
29110: PPUSH
29111: LD_VAR 0 3
29115: PPUSH
29116: CALL_OW 47
29120: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29121: LD_OWVAR 42
29125: PUSH
29126: LD_INT 32
29128: PUSH
29129: LD_INT 33
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: IN
29136: IFFALSE 29152
// PlaceWeaponTurret ( b , weapon ) ;
29138: LD_VAR 0 8
29142: PPUSH
29143: LD_VAR 0 4
29147: PPUSH
29148: CALL_OW 431
// end ;
29152: LD_VAR 0 7
29156: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29163: LD_ADDR_VAR 0 4
29167: PUSH
29168: LD_INT 22
29170: PUSH
29171: LD_OWVAR 2
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: LD_INT 30
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 30
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PPUSH
29212: CALL_OW 69
29216: ST_TO_ADDR
// if not tmp then
29217: LD_VAR 0 4
29221: NOT
29222: IFFALSE 29226
// exit ;
29224: GO 29285
// for i in tmp do
29226: LD_ADDR_VAR 0 2
29230: PUSH
29231: LD_VAR 0 4
29235: PUSH
29236: FOR_IN
29237: IFFALSE 29283
// for j = 1 to 3 do
29239: LD_ADDR_VAR 0 3
29243: PUSH
29244: DOUBLE
29245: LD_INT 1
29247: DEC
29248: ST_TO_ADDR
29249: LD_INT 3
29251: PUSH
29252: FOR_TO
29253: IFFALSE 29279
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29255: LD_VAR 0 2
29259: PPUSH
29260: CALL_OW 274
29264: PPUSH
29265: LD_VAR 0 3
29269: PPUSH
29270: LD_INT 99999
29272: PPUSH
29273: CALL_OW 277
29277: GO 29252
29279: POP
29280: POP
29281: GO 29236
29283: POP
29284: POP
// end ;
29285: LD_VAR 0 1
29289: RET
// export function hHackSetLevel10 ; var i , j ; begin
29290: LD_INT 0
29292: PPUSH
29293: PPUSH
29294: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29295: LD_ADDR_VAR 0 2
29299: PUSH
29300: LD_INT 21
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PPUSH
29310: CALL_OW 69
29314: PUSH
29315: FOR_IN
29316: IFFALSE 29368
// if IsSelected ( i ) then
29318: LD_VAR 0 2
29322: PPUSH
29323: CALL_OW 306
29327: IFFALSE 29366
// begin for j := 1 to 4 do
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: DOUBLE
29335: LD_INT 1
29337: DEC
29338: ST_TO_ADDR
29339: LD_INT 4
29341: PUSH
29342: FOR_TO
29343: IFFALSE 29364
// SetSkill ( i , j , 10 ) ;
29345: LD_VAR 0 2
29349: PPUSH
29350: LD_VAR 0 3
29354: PPUSH
29355: LD_INT 10
29357: PPUSH
29358: CALL_OW 237
29362: GO 29342
29364: POP
29365: POP
// end ;
29366: GO 29315
29368: POP
29369: POP
// end ;
29370: LD_VAR 0 1
29374: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29375: LD_INT 0
29377: PPUSH
29378: PPUSH
29379: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29380: LD_ADDR_VAR 0 2
29384: PUSH
29385: LD_INT 22
29387: PUSH
29388: LD_OWVAR 2
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 21
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 69
29415: PUSH
29416: FOR_IN
29417: IFFALSE 29458
// begin for j := 1 to 4 do
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: DOUBLE
29425: LD_INT 1
29427: DEC
29428: ST_TO_ADDR
29429: LD_INT 4
29431: PUSH
29432: FOR_TO
29433: IFFALSE 29454
// SetSkill ( i , j , 10 ) ;
29435: LD_VAR 0 2
29439: PPUSH
29440: LD_VAR 0 3
29444: PPUSH
29445: LD_INT 10
29447: PPUSH
29448: CALL_OW 237
29452: GO 29432
29454: POP
29455: POP
// end ;
29456: GO 29416
29458: POP
29459: POP
// end ;
29460: LD_VAR 0 1
29464: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29465: LD_INT 0
29467: PPUSH
// uc_side := your_side ;
29468: LD_ADDR_OWVAR 20
29472: PUSH
29473: LD_OWVAR 2
29477: ST_TO_ADDR
// uc_nation := nation ;
29478: LD_ADDR_OWVAR 21
29482: PUSH
29483: LD_VAR 0 1
29487: ST_TO_ADDR
// InitHc ;
29488: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29492: LD_INT 0
29494: PPUSH
29495: LD_VAR 0 2
29499: PPUSH
29500: LD_VAR 0 3
29504: PPUSH
29505: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29509: LD_VAR 0 4
29513: PPUSH
29514: LD_VAR 0 5
29518: PPUSH
29519: CALL_OW 428
29523: PUSH
29524: LD_INT 0
29526: EQUAL
29527: IFFALSE 29551
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29529: CALL_OW 44
29533: PPUSH
29534: LD_VAR 0 4
29538: PPUSH
29539: LD_VAR 0 5
29543: PPUSH
29544: LD_INT 1
29546: PPUSH
29547: CALL_OW 48
// end ;
29551: LD_VAR 0 6
29555: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
// uc_side := your_side ;
29560: LD_ADDR_OWVAR 20
29564: PUSH
29565: LD_OWVAR 2
29569: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29570: LD_VAR 0 1
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 4
29586: PUSH
29587: LD_INT 5
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: IN
29597: IFFALSE 29609
// uc_nation := nation_american else
29599: LD_ADDR_OWVAR 21
29603: PUSH
29604: LD_INT 1
29606: ST_TO_ADDR
29607: GO 29652
// if chassis in [ 11 , 12 , 13 , 14 ] then
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 11
29616: PUSH
29617: LD_INT 12
29619: PUSH
29620: LD_INT 13
29622: PUSH
29623: LD_INT 14
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: IN
29632: IFFALSE 29644
// uc_nation := nation_arabian else
29634: LD_ADDR_OWVAR 21
29638: PUSH
29639: LD_INT 2
29641: ST_TO_ADDR
29642: GO 29652
// uc_nation := nation_russian ;
29644: LD_ADDR_OWVAR 21
29648: PUSH
29649: LD_INT 3
29651: ST_TO_ADDR
// vc_chassis := chassis ;
29652: LD_ADDR_OWVAR 37
29656: PUSH
29657: LD_VAR 0 1
29661: ST_TO_ADDR
// vc_engine := engine ;
29662: LD_ADDR_OWVAR 39
29666: PUSH
29667: LD_VAR 0 2
29671: ST_TO_ADDR
// vc_control := control ;
29672: LD_ADDR_OWVAR 38
29676: PUSH
29677: LD_VAR 0 3
29681: ST_TO_ADDR
// vc_weapon := weapon ;
29682: LD_ADDR_OWVAR 40
29686: PUSH
29687: LD_VAR 0 4
29691: ST_TO_ADDR
// un := CreateVehicle ;
29692: LD_ADDR_VAR 0 8
29696: PUSH
29697: CALL_OW 45
29701: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29702: LD_VAR 0 8
29706: PPUSH
29707: LD_INT 0
29709: PPUSH
29710: LD_INT 5
29712: PPUSH
29713: CALL_OW 12
29717: PPUSH
29718: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29722: LD_VAR 0 8
29726: PPUSH
29727: LD_VAR 0 5
29731: PPUSH
29732: LD_VAR 0 6
29736: PPUSH
29737: LD_INT 1
29739: PPUSH
29740: CALL_OW 48
// end ;
29744: LD_VAR 0 7
29748: RET
// export hInvincible ; every 1 do
29749: GO 29751
29751: DISABLE
// hInvincible := [ ] ;
29752: LD_ADDR_EXP 98
29756: PUSH
29757: EMPTY
29758: ST_TO_ADDR
29759: END
// every 10 do var i ;
29760: GO 29762
29762: DISABLE
29763: LD_INT 0
29765: PPUSH
// begin enable ;
29766: ENABLE
// if not hInvincible then
29767: LD_EXP 98
29771: NOT
29772: IFFALSE 29776
// exit ;
29774: GO 29820
// for i in hInvincible do
29776: LD_ADDR_VAR 0 1
29780: PUSH
29781: LD_EXP 98
29785: PUSH
29786: FOR_IN
29787: IFFALSE 29818
// if GetLives ( i ) < 1000 then
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL_OW 256
29798: PUSH
29799: LD_INT 1000
29801: LESS
29802: IFFALSE 29816
// SetLives ( i , 1000 ) ;
29804: LD_VAR 0 1
29808: PPUSH
29809: LD_INT 1000
29811: PPUSH
29812: CALL_OW 234
29816: GO 29786
29818: POP
29819: POP
// end ;
29820: PPOPN 1
29822: END
// export function hHackInvincible ; var i ; begin
29823: LD_INT 0
29825: PPUSH
29826: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29827: LD_ADDR_VAR 0 2
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 21
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 21
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: PUSH
29865: FOR_IN
29866: IFFALSE 29927
// if IsSelected ( i ) then
29868: LD_VAR 0 2
29872: PPUSH
29873: CALL_OW 306
29877: IFFALSE 29925
// begin if i in hInvincible then
29879: LD_VAR 0 2
29883: PUSH
29884: LD_EXP 98
29888: IN
29889: IFFALSE 29909
// hInvincible := hInvincible diff i else
29891: LD_ADDR_EXP 98
29895: PUSH
29896: LD_EXP 98
29900: PUSH
29901: LD_VAR 0 2
29905: DIFF
29906: ST_TO_ADDR
29907: GO 29925
// hInvincible := hInvincible union i ;
29909: LD_ADDR_EXP 98
29913: PUSH
29914: LD_EXP 98
29918: PUSH
29919: LD_VAR 0 2
29923: UNION
29924: ST_TO_ADDR
// end ;
29925: GO 29865
29927: POP
29928: POP
// end ;
29929: LD_VAR 0 1
29933: RET
// export function hHackInvisible ; var i , j ; begin
29934: LD_INT 0
29936: PPUSH
29937: PPUSH
29938: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29939: LD_ADDR_VAR 0 2
29943: PUSH
29944: LD_INT 21
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PPUSH
29954: CALL_OW 69
29958: PUSH
29959: FOR_IN
29960: IFFALSE 29984
// if IsSelected ( i ) then
29962: LD_VAR 0 2
29966: PPUSH
29967: CALL_OW 306
29971: IFFALSE 29982
// ComForceInvisible ( i ) ;
29973: LD_VAR 0 2
29977: PPUSH
29978: CALL_OW 496
29982: GO 29959
29984: POP
29985: POP
// end ;
29986: LD_VAR 0 1
29990: RET
// export function hHackChangeYourSide ; begin
29991: LD_INT 0
29993: PPUSH
// if your_side = 8 then
29994: LD_OWVAR 2
29998: PUSH
29999: LD_INT 8
30001: EQUAL
30002: IFFALSE 30014
// your_side := 0 else
30004: LD_ADDR_OWVAR 2
30008: PUSH
30009: LD_INT 0
30011: ST_TO_ADDR
30012: GO 30028
// your_side := your_side + 1 ;
30014: LD_ADDR_OWVAR 2
30018: PUSH
30019: LD_OWVAR 2
30023: PUSH
30024: LD_INT 1
30026: PLUS
30027: ST_TO_ADDR
// end ;
30028: LD_VAR 0 1
30032: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30033: LD_INT 0
30035: PPUSH
30036: PPUSH
30037: PPUSH
// for i in all_units do
30038: LD_ADDR_VAR 0 2
30042: PUSH
30043: LD_OWVAR 3
30047: PUSH
30048: FOR_IN
30049: IFFALSE 30127
// if IsSelected ( i ) then
30051: LD_VAR 0 2
30055: PPUSH
30056: CALL_OW 306
30060: IFFALSE 30125
// begin j := GetSide ( i ) ;
30062: LD_ADDR_VAR 0 3
30066: PUSH
30067: LD_VAR 0 2
30071: PPUSH
30072: CALL_OW 255
30076: ST_TO_ADDR
// if j = 8 then
30077: LD_VAR 0 3
30081: PUSH
30082: LD_INT 8
30084: EQUAL
30085: IFFALSE 30097
// j := 0 else
30087: LD_ADDR_VAR 0 3
30091: PUSH
30092: LD_INT 0
30094: ST_TO_ADDR
30095: GO 30111
// j := j + 1 ;
30097: LD_ADDR_VAR 0 3
30101: PUSH
30102: LD_VAR 0 3
30106: PUSH
30107: LD_INT 1
30109: PLUS
30110: ST_TO_ADDR
// SetSide ( i , j ) ;
30111: LD_VAR 0 2
30115: PPUSH
30116: LD_VAR 0 3
30120: PPUSH
30121: CALL_OW 235
// end ;
30125: GO 30048
30127: POP
30128: POP
// end ;
30129: LD_VAR 0 1
30133: RET
// export function hHackFog ; begin
30134: LD_INT 0
30136: PPUSH
// FogOff ( true ) ;
30137: LD_INT 1
30139: PPUSH
30140: CALL_OW 344
// end ;
30144: LD_VAR 0 1
30148: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30149: LD_INT 0
30151: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30152: LD_VAR 0 1
30156: PPUSH
30157: LD_VAR 0 2
30161: PPUSH
30162: LD_VAR 0 3
30166: PPUSH
30167: LD_INT 1
30169: PPUSH
30170: LD_INT 1
30172: PPUSH
30173: CALL_OW 483
// CenterOnXY ( x , y ) ;
30177: LD_VAR 0 2
30181: PPUSH
30182: LD_VAR 0 3
30186: PPUSH
30187: CALL_OW 84
// end ;
30191: LD_VAR 0 4
30195: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30196: LD_INT 0
30198: PPUSH
30199: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30200: LD_VAR 0 1
30204: NOT
30205: PUSH
30206: LD_VAR 0 2
30210: PPUSH
30211: LD_VAR 0 3
30215: PPUSH
30216: CALL_OW 488
30220: NOT
30221: OR
30222: PUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 266
30232: PUSH
30233: LD_INT 3
30235: NONEQUAL
30236: PUSH
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL_OW 247
30246: PUSH
30247: LD_INT 1
30249: EQUAL
30250: NOT
30251: AND
30252: OR
30253: IFFALSE 30257
// exit ;
30255: GO 30406
// if GetType ( factory ) = unit_human then
30257: LD_VAR 0 1
30261: PPUSH
30262: CALL_OW 247
30266: PUSH
30267: LD_INT 1
30269: EQUAL
30270: IFFALSE 30287
// factory := IsInUnit ( factory ) ;
30272: LD_ADDR_VAR 0 1
30276: PUSH
30277: LD_VAR 0 1
30281: PPUSH
30282: CALL_OW 310
30286: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30287: LD_VAR 0 1
30291: PPUSH
30292: CALL_OW 266
30296: PUSH
30297: LD_INT 3
30299: NONEQUAL
30300: IFFALSE 30304
// exit ;
30302: GO 30406
// if HexInfo ( x , y ) = factory then
30304: LD_VAR 0 2
30308: PPUSH
30309: LD_VAR 0 3
30313: PPUSH
30314: CALL_OW 428
30318: PUSH
30319: LD_VAR 0 1
30323: EQUAL
30324: IFFALSE 30351
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30326: LD_ADDR_EXP 99
30330: PUSH
30331: LD_EXP 99
30335: PPUSH
30336: LD_VAR 0 1
30340: PPUSH
30341: LD_INT 0
30343: PPUSH
30344: CALL_OW 1
30348: ST_TO_ADDR
30349: GO 30402
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30351: LD_ADDR_EXP 99
30355: PUSH
30356: LD_EXP 99
30360: PPUSH
30361: LD_VAR 0 1
30365: PPUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 255
30375: PUSH
30376: LD_VAR 0 1
30380: PUSH
30381: LD_VAR 0 2
30385: PUSH
30386: LD_VAR 0 3
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: PPUSH
30397: CALL_OW 1
30401: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30402: CALL 30411 0 0
// end ;
30406: LD_VAR 0 4
30410: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30411: LD_INT 0
30413: PPUSH
30414: PPUSH
30415: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30416: LD_STRING resetFactoryWaypoint();
30418: PPUSH
30419: CALL_OW 559
// if factoryWaypoints then
30423: LD_EXP 99
30427: IFFALSE 30553
// begin list := PrepareArray ( factoryWaypoints ) ;
30429: LD_ADDR_VAR 0 3
30433: PUSH
30434: LD_EXP 99
30438: PPUSH
30439: CALL 77850 0 1
30443: ST_TO_ADDR
// for i := 1 to list do
30444: LD_ADDR_VAR 0 2
30448: PUSH
30449: DOUBLE
30450: LD_INT 1
30452: DEC
30453: ST_TO_ADDR
30454: LD_VAR 0 3
30458: PUSH
30459: FOR_TO
30460: IFFALSE 30551
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30462: LD_STRING setFactoryWaypointXY(
30464: PUSH
30465: LD_VAR 0 3
30469: PUSH
30470: LD_VAR 0 2
30474: ARRAY
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: STR
30480: PUSH
30481: LD_STRING ,
30483: STR
30484: PUSH
30485: LD_VAR 0 3
30489: PUSH
30490: LD_VAR 0 2
30494: ARRAY
30495: PUSH
30496: LD_INT 2
30498: ARRAY
30499: STR
30500: PUSH
30501: LD_STRING ,
30503: STR
30504: PUSH
30505: LD_VAR 0 3
30509: PUSH
30510: LD_VAR 0 2
30514: ARRAY
30515: PUSH
30516: LD_INT 3
30518: ARRAY
30519: STR
30520: PUSH
30521: LD_STRING ,
30523: STR
30524: PUSH
30525: LD_VAR 0 3
30529: PUSH
30530: LD_VAR 0 2
30534: ARRAY
30535: PUSH
30536: LD_INT 4
30538: ARRAY
30539: STR
30540: PUSH
30541: LD_STRING )
30543: STR
30544: PPUSH
30545: CALL_OW 559
30549: GO 30459
30551: POP
30552: POP
// end ; end ;
30553: LD_VAR 0 1
30557: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30558: LD_INT 0
30560: PPUSH
// if HexInfo ( x , y ) = warehouse then
30561: LD_VAR 0 2
30565: PPUSH
30566: LD_VAR 0 3
30570: PPUSH
30571: CALL_OW 428
30575: PUSH
30576: LD_VAR 0 1
30580: EQUAL
30581: IFFALSE 30608
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30583: LD_ADDR_EXP 100
30587: PUSH
30588: LD_EXP 100
30592: PPUSH
30593: LD_VAR 0 1
30597: PPUSH
30598: LD_INT 0
30600: PPUSH
30601: CALL_OW 1
30605: ST_TO_ADDR
30606: GO 30659
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30608: LD_ADDR_EXP 100
30612: PUSH
30613: LD_EXP 100
30617: PPUSH
30618: LD_VAR 0 1
30622: PPUSH
30623: LD_VAR 0 1
30627: PPUSH
30628: CALL_OW 255
30632: PUSH
30633: LD_VAR 0 1
30637: PUSH
30638: LD_VAR 0 2
30642: PUSH
30643: LD_VAR 0 3
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: PPUSH
30654: CALL_OW 1
30658: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30659: CALL 30668 0 0
// end ;
30663: LD_VAR 0 4
30667: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30668: LD_INT 0
30670: PPUSH
30671: PPUSH
30672: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30673: LD_STRING resetWarehouseGatheringPoints();
30675: PPUSH
30676: CALL_OW 559
// if warehouseGatheringPoints then
30680: LD_EXP 100
30684: IFFALSE 30810
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30686: LD_ADDR_VAR 0 3
30690: PUSH
30691: LD_EXP 100
30695: PPUSH
30696: CALL 77850 0 1
30700: ST_TO_ADDR
// for i := 1 to list do
30701: LD_ADDR_VAR 0 2
30705: PUSH
30706: DOUBLE
30707: LD_INT 1
30709: DEC
30710: ST_TO_ADDR
30711: LD_VAR 0 3
30715: PUSH
30716: FOR_TO
30717: IFFALSE 30808
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30719: LD_STRING setWarehouseGatheringPointXY(
30721: PUSH
30722: LD_VAR 0 3
30726: PUSH
30727: LD_VAR 0 2
30731: ARRAY
30732: PUSH
30733: LD_INT 1
30735: ARRAY
30736: STR
30737: PUSH
30738: LD_STRING ,
30740: STR
30741: PUSH
30742: LD_VAR 0 3
30746: PUSH
30747: LD_VAR 0 2
30751: ARRAY
30752: PUSH
30753: LD_INT 2
30755: ARRAY
30756: STR
30757: PUSH
30758: LD_STRING ,
30760: STR
30761: PUSH
30762: LD_VAR 0 3
30766: PUSH
30767: LD_VAR 0 2
30771: ARRAY
30772: PUSH
30773: LD_INT 3
30775: ARRAY
30776: STR
30777: PUSH
30778: LD_STRING ,
30780: STR
30781: PUSH
30782: LD_VAR 0 3
30786: PUSH
30787: LD_VAR 0 2
30791: ARRAY
30792: PUSH
30793: LD_INT 4
30795: ARRAY
30796: STR
30797: PUSH
30798: LD_STRING )
30800: STR
30801: PPUSH
30802: CALL_OW 559
30806: GO 30716
30808: POP
30809: POP
// end ; end ;
30810: LD_VAR 0 1
30814: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30815: LD_EXP 100
30819: IFFALSE 31504
30821: GO 30823
30823: DISABLE
30824: LD_INT 0
30826: PPUSH
30827: PPUSH
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
// begin enable ;
30835: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30836: LD_ADDR_VAR 0 3
30840: PUSH
30841: LD_EXP 100
30845: PPUSH
30846: CALL 77850 0 1
30850: ST_TO_ADDR
// if not list then
30851: LD_VAR 0 3
30855: NOT
30856: IFFALSE 30860
// exit ;
30858: GO 31504
// for i := 1 to list do
30860: LD_ADDR_VAR 0 1
30864: PUSH
30865: DOUBLE
30866: LD_INT 1
30868: DEC
30869: ST_TO_ADDR
30870: LD_VAR 0 3
30874: PUSH
30875: FOR_TO
30876: IFFALSE 31502
// begin depot := list [ i ] [ 2 ] ;
30878: LD_ADDR_VAR 0 8
30882: PUSH
30883: LD_VAR 0 3
30887: PUSH
30888: LD_VAR 0 1
30892: ARRAY
30893: PUSH
30894: LD_INT 2
30896: ARRAY
30897: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30898: LD_ADDR_VAR 0 5
30902: PUSH
30903: LD_VAR 0 3
30907: PUSH
30908: LD_VAR 0 1
30912: ARRAY
30913: PUSH
30914: LD_INT 1
30916: ARRAY
30917: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30918: LD_VAR 0 8
30922: PPUSH
30923: CALL_OW 301
30927: PUSH
30928: LD_VAR 0 5
30932: PUSH
30933: LD_VAR 0 8
30937: PPUSH
30938: CALL_OW 255
30942: NONEQUAL
30943: OR
30944: IFFALSE 30973
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30946: LD_ADDR_EXP 100
30950: PUSH
30951: LD_EXP 100
30955: PPUSH
30956: LD_VAR 0 8
30960: PPUSH
30961: LD_INT 0
30963: PPUSH
30964: CALL_OW 1
30968: ST_TO_ADDR
// exit ;
30969: POP
30970: POP
30971: GO 31504
// end ; x := list [ i ] [ 3 ] ;
30973: LD_ADDR_VAR 0 6
30977: PUSH
30978: LD_VAR 0 3
30982: PUSH
30983: LD_VAR 0 1
30987: ARRAY
30988: PUSH
30989: LD_INT 3
30991: ARRAY
30992: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30993: LD_ADDR_VAR 0 7
30997: PUSH
30998: LD_VAR 0 3
31002: PUSH
31003: LD_VAR 0 1
31007: ARRAY
31008: PUSH
31009: LD_INT 4
31011: ARRAY
31012: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31013: LD_ADDR_VAR 0 9
31017: PUSH
31018: LD_VAR 0 6
31022: PPUSH
31023: LD_VAR 0 7
31027: PPUSH
31028: LD_INT 16
31030: PPUSH
31031: CALL 76438 0 3
31035: ST_TO_ADDR
// if not cratesNearbyPoint then
31036: LD_VAR 0 9
31040: NOT
31041: IFFALSE 31047
// exit ;
31043: POP
31044: POP
31045: GO 31504
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31047: LD_ADDR_VAR 0 4
31051: PUSH
31052: LD_INT 22
31054: PUSH
31055: LD_VAR 0 5
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 3
31066: PUSH
31067: LD_INT 60
31069: PUSH
31070: EMPTY
31071: LIST
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 91
31079: PUSH
31080: LD_VAR 0 8
31084: PUSH
31085: LD_INT 6
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 25
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 25
31108: PUSH
31109: LD_INT 16
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: PPUSH
31127: CALL_OW 69
31131: PUSH
31132: LD_VAR 0 8
31136: PPUSH
31137: CALL_OW 313
31141: PPUSH
31142: LD_INT 3
31144: PUSH
31145: LD_INT 60
31147: PUSH
31148: EMPTY
31149: LIST
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: LD_INT 25
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 25
31170: PUSH
31171: LD_INT 16
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PPUSH
31187: CALL_OW 72
31191: UNION
31192: ST_TO_ADDR
// if tmp then
31193: LD_VAR 0 4
31197: IFFALSE 31277
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31199: LD_ADDR_VAR 0 4
31203: PUSH
31204: LD_VAR 0 4
31208: PPUSH
31209: LD_INT 3
31211: PPUSH
31212: CALL 74407 0 2
31216: ST_TO_ADDR
// for j in tmp do
31217: LD_ADDR_VAR 0 2
31221: PUSH
31222: LD_VAR 0 4
31226: PUSH
31227: FOR_IN
31228: IFFALSE 31271
// begin if IsInUnit ( j ) then
31230: LD_VAR 0 2
31234: PPUSH
31235: CALL_OW 310
31239: IFFALSE 31250
// ComExit ( j ) ;
31241: LD_VAR 0 2
31245: PPUSH
31246: CALL 74490 0 1
// AddComCollect ( j , x , y ) ;
31250: LD_VAR 0 2
31254: PPUSH
31255: LD_VAR 0 6
31259: PPUSH
31260: LD_VAR 0 7
31264: PPUSH
31265: CALL_OW 177
// end ;
31269: GO 31227
31271: POP
31272: POP
// exit ;
31273: POP
31274: POP
31275: GO 31504
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31277: LD_ADDR_VAR 0 4
31281: PUSH
31282: LD_INT 22
31284: PUSH
31285: LD_VAR 0 5
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 91
31296: PUSH
31297: LD_VAR 0 8
31301: PUSH
31302: LD_INT 8
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: LD_INT 34
31315: PUSH
31316: LD_INT 12
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 34
31325: PUSH
31326: LD_INT 51
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 34
31335: PUSH
31336: LD_INT 32
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 34
31345: PUSH
31346: LD_INT 89
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: PPUSH
31365: CALL_OW 69
31369: ST_TO_ADDR
// if tmp then
31370: LD_VAR 0 4
31374: IFFALSE 31500
// begin for j in tmp do
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_VAR 0 4
31385: PUSH
31386: FOR_IN
31387: IFFALSE 31498
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31389: LD_VAR 0 2
31393: PPUSH
31394: CALL_OW 262
31398: PUSH
31399: LD_INT 3
31401: EQUAL
31402: PUSH
31403: LD_VAR 0 2
31407: PPUSH
31408: CALL_OW 261
31412: PUSH
31413: LD_INT 20
31415: GREATER
31416: OR
31417: PUSH
31418: LD_VAR 0 2
31422: PPUSH
31423: CALL_OW 314
31427: NOT
31428: AND
31429: PUSH
31430: LD_VAR 0 2
31434: PPUSH
31435: CALL_OW 263
31439: PUSH
31440: LD_INT 1
31442: NONEQUAL
31443: PUSH
31444: LD_VAR 0 2
31448: PPUSH
31449: CALL_OW 311
31453: OR
31454: AND
31455: IFFALSE 31496
// begin ComCollect ( j , x , y ) ;
31457: LD_VAR 0 2
31461: PPUSH
31462: LD_VAR 0 6
31466: PPUSH
31467: LD_VAR 0 7
31471: PPUSH
31472: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31476: LD_VAR 0 2
31480: PPUSH
31481: LD_VAR 0 8
31485: PPUSH
31486: CALL_OW 172
// exit ;
31490: POP
31491: POP
31492: POP
31493: POP
31494: GO 31504
// end ;
31496: GO 31386
31498: POP
31499: POP
// end ; end ;
31500: GO 30875
31502: POP
31503: POP
// end ; end_of_file
31504: PPOPN 9
31506: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31513: LD_VAR 0 1
31517: PPUSH
31518: CALL_OW 264
31522: PUSH
31523: LD_INT 91
31525: EQUAL
31526: IFFALSE 31598
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31528: LD_INT 68
31530: PPUSH
31531: LD_VAR 0 1
31535: PPUSH
31536: CALL_OW 255
31540: PPUSH
31541: CALL_OW 321
31545: PUSH
31546: LD_INT 2
31548: EQUAL
31549: IFFALSE 31561
// eff := 70 else
31551: LD_ADDR_VAR 0 4
31555: PUSH
31556: LD_INT 70
31558: ST_TO_ADDR
31559: GO 31569
// eff := 30 ;
31561: LD_ADDR_VAR 0 4
31565: PUSH
31566: LD_INT 30
31568: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31569: LD_VAR 0 1
31573: PPUSH
31574: CALL_OW 250
31578: PPUSH
31579: LD_VAR 0 1
31583: PPUSH
31584: CALL_OW 251
31588: PPUSH
31589: LD_VAR 0 4
31593: PPUSH
31594: CALL_OW 495
// end ; end ;
31598: LD_VAR 0 2
31602: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31603: LD_INT 0
31605: PPUSH
// end ;
31606: LD_VAR 0 4
31610: RET
// export function SOS_Command ( cmd ) ; begin
31611: LD_INT 0
31613: PPUSH
// end ;
31614: LD_VAR 0 2
31618: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31619: LD_INT 0
31621: PPUSH
// end ;
31622: LD_VAR 0 6
31626: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31627: LD_INT 0
31629: PPUSH
31630: PPUSH
// if not vehicle or not factory then
31631: LD_VAR 0 1
31635: NOT
31636: PUSH
31637: LD_VAR 0 2
31641: NOT
31642: OR
31643: IFFALSE 31647
// exit ;
31645: GO 31878
// if factoryWaypoints >= factory then
31647: LD_EXP 99
31651: PUSH
31652: LD_VAR 0 2
31656: GREATEREQUAL
31657: IFFALSE 31878
// if factoryWaypoints [ factory ] then
31659: LD_EXP 99
31663: PUSH
31664: LD_VAR 0 2
31668: ARRAY
31669: IFFALSE 31878
// begin if GetControl ( vehicle ) = control_manual then
31671: LD_VAR 0 1
31675: PPUSH
31676: CALL_OW 263
31680: PUSH
31681: LD_INT 1
31683: EQUAL
31684: IFFALSE 31765
// begin driver := IsDrivenBy ( vehicle ) ;
31686: LD_ADDR_VAR 0 4
31690: PUSH
31691: LD_VAR 0 1
31695: PPUSH
31696: CALL_OW 311
31700: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31701: LD_VAR 0 4
31705: PPUSH
31706: LD_EXP 99
31710: PUSH
31711: LD_VAR 0 2
31715: ARRAY
31716: PUSH
31717: LD_INT 3
31719: ARRAY
31720: PPUSH
31721: LD_EXP 99
31725: PUSH
31726: LD_VAR 0 2
31730: ARRAY
31731: PUSH
31732: LD_INT 4
31734: ARRAY
31735: PPUSH
31736: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31740: LD_VAR 0 4
31744: PPUSH
31745: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31749: LD_VAR 0 4
31753: PPUSH
31754: LD_VAR 0 2
31758: PPUSH
31759: CALL_OW 180
// end else
31763: GO 31878
// if GetControl ( vehicle ) = control_remote then
31765: LD_VAR 0 1
31769: PPUSH
31770: CALL_OW 263
31774: PUSH
31775: LD_INT 2
31777: EQUAL
31778: IFFALSE 31839
// begin wait ( 0 0$2 ) ;
31780: LD_INT 70
31782: PPUSH
31783: CALL_OW 67
// if Connect ( vehicle ) then
31787: LD_VAR 0 1
31791: PPUSH
31792: CALL 44709 0 1
31796: IFFALSE 31837
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31798: LD_VAR 0 1
31802: PPUSH
31803: LD_EXP 99
31807: PUSH
31808: LD_VAR 0 2
31812: ARRAY
31813: PUSH
31814: LD_INT 3
31816: ARRAY
31817: PPUSH
31818: LD_EXP 99
31822: PUSH
31823: LD_VAR 0 2
31827: ARRAY
31828: PUSH
31829: LD_INT 4
31831: ARRAY
31832: PPUSH
31833: CALL_OW 171
// end else
31837: GO 31878
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31839: LD_VAR 0 1
31843: PPUSH
31844: LD_EXP 99
31848: PUSH
31849: LD_VAR 0 2
31853: ARRAY
31854: PUSH
31855: LD_INT 3
31857: ARRAY
31858: PPUSH
31859: LD_EXP 99
31863: PUSH
31864: LD_VAR 0 2
31868: ARRAY
31869: PUSH
31870: LD_INT 4
31872: ARRAY
31873: PPUSH
31874: CALL_OW 171
// end ; end ;
31878: LD_VAR 0 3
31882: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31883: LD_INT 0
31885: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31886: LD_VAR 0 1
31890: PUSH
31891: LD_INT 250
31893: EQUAL
31894: PUSH
31895: LD_VAR 0 2
31899: PPUSH
31900: CALL_OW 264
31904: PUSH
31905: LD_INT 81
31907: EQUAL
31908: AND
31909: IFFALSE 31930
// MinerPlaceMine ( unit , x , y ) ;
31911: LD_VAR 0 2
31915: PPUSH
31916: LD_VAR 0 4
31920: PPUSH
31921: LD_VAR 0 5
31925: PPUSH
31926: CALL 34920 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31930: LD_VAR 0 1
31934: PUSH
31935: LD_INT 251
31937: EQUAL
31938: PUSH
31939: LD_VAR 0 2
31943: PPUSH
31944: CALL_OW 264
31948: PUSH
31949: LD_INT 81
31951: EQUAL
31952: AND
31953: IFFALSE 31974
// MinerDetonateMine ( unit , x , y ) ;
31955: LD_VAR 0 2
31959: PPUSH
31960: LD_VAR 0 4
31964: PPUSH
31965: LD_VAR 0 5
31969: PPUSH
31970: CALL 35195 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31974: LD_VAR 0 1
31978: PUSH
31979: LD_INT 252
31981: EQUAL
31982: PUSH
31983: LD_VAR 0 2
31987: PPUSH
31988: CALL_OW 264
31992: PUSH
31993: LD_INT 81
31995: EQUAL
31996: AND
31997: IFFALSE 32018
// MinerCreateMinefield ( unit , x , y ) ;
31999: LD_VAR 0 2
32003: PPUSH
32004: LD_VAR 0 4
32008: PPUSH
32009: LD_VAR 0 5
32013: PPUSH
32014: CALL 35612 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32018: LD_VAR 0 1
32022: PUSH
32023: LD_INT 253
32025: EQUAL
32026: PUSH
32027: LD_VAR 0 2
32031: PPUSH
32032: CALL_OW 257
32036: PUSH
32037: LD_INT 5
32039: EQUAL
32040: AND
32041: IFFALSE 32062
// ComBinocular ( unit , x , y ) ;
32043: LD_VAR 0 2
32047: PPUSH
32048: LD_VAR 0 4
32052: PPUSH
32053: LD_VAR 0 5
32057: PPUSH
32058: CALL 35981 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32062: LD_VAR 0 1
32066: PUSH
32067: LD_INT 254
32069: EQUAL
32070: PUSH
32071: LD_VAR 0 2
32075: PPUSH
32076: CALL_OW 264
32080: PUSH
32081: LD_INT 99
32083: EQUAL
32084: AND
32085: PUSH
32086: LD_VAR 0 3
32090: PPUSH
32091: CALL_OW 263
32095: PUSH
32096: LD_INT 3
32098: EQUAL
32099: AND
32100: IFFALSE 32116
// HackDestroyVehicle ( unit , selectedUnit ) ;
32102: LD_VAR 0 2
32106: PPUSH
32107: LD_VAR 0 3
32111: PPUSH
32112: CALL 34284 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32116: LD_VAR 0 1
32120: PUSH
32121: LD_INT 255
32123: EQUAL
32124: PUSH
32125: LD_VAR 0 2
32129: PPUSH
32130: CALL_OW 264
32134: PUSH
32135: LD_INT 14
32137: PUSH
32138: LD_INT 53
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: IN
32145: AND
32146: PUSH
32147: LD_VAR 0 4
32151: PPUSH
32152: LD_VAR 0 5
32156: PPUSH
32157: CALL_OW 488
32161: AND
32162: IFFALSE 32186
// CutTreeXYR ( unit , x , y , 12 ) ;
32164: LD_VAR 0 2
32168: PPUSH
32169: LD_VAR 0 4
32173: PPUSH
32174: LD_VAR 0 5
32178: PPUSH
32179: LD_INT 12
32181: PPUSH
32182: CALL 32281 0 4
// if cmd = 256 then
32186: LD_VAR 0 1
32190: PUSH
32191: LD_INT 256
32193: EQUAL
32194: IFFALSE 32215
// SetFactoryWaypoint ( unit , x , y ) ;
32196: LD_VAR 0 2
32200: PPUSH
32201: LD_VAR 0 4
32205: PPUSH
32206: LD_VAR 0 5
32210: PPUSH
32211: CALL 30196 0 3
// if cmd = 257 then
32215: LD_VAR 0 1
32219: PUSH
32220: LD_INT 257
32222: EQUAL
32223: IFFALSE 32244
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32225: LD_VAR 0 2
32229: PPUSH
32230: LD_VAR 0 4
32234: PPUSH
32235: LD_VAR 0 5
32239: PPUSH
32240: CALL 30558 0 3
// if cmd = 258 then
32244: LD_VAR 0 1
32248: PUSH
32249: LD_INT 258
32251: EQUAL
32252: IFFALSE 32276
// BurnTreeXYR ( unit , x , y , 8 ) ;
32254: LD_VAR 0 2
32258: PPUSH
32259: LD_VAR 0 4
32263: PPUSH
32264: LD_VAR 0 5
32268: PPUSH
32269: LD_INT 8
32271: PPUSH
32272: CALL 32675 0 4
// end ;
32276: LD_VAR 0 6
32280: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32281: LD_INT 0
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
32290: PPUSH
32291: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
32292: LD_VAR 0 1
32296: PPUSH
32297: CALL_OW 302
32301: NOT
32302: PUSH
32303: LD_VAR 0 2
32307: PPUSH
32308: LD_VAR 0 3
32312: PPUSH
32313: CALL_OW 488
32317: NOT
32318: OR
32319: PUSH
32320: LD_VAR 0 4
32324: NOT
32325: OR
32326: IFFALSE 32330
// exit ;
32328: GO 32670
// list := [ ] ;
32330: LD_ADDR_VAR 0 13
32334: PUSH
32335: EMPTY
32336: ST_TO_ADDR
// if x - r < 0 then
32337: LD_VAR 0 2
32341: PUSH
32342: LD_VAR 0 4
32346: MINUS
32347: PUSH
32348: LD_INT 0
32350: LESS
32351: IFFALSE 32363
// min_x := 0 else
32353: LD_ADDR_VAR 0 7
32357: PUSH
32358: LD_INT 0
32360: ST_TO_ADDR
32361: GO 32379
// min_x := x - r ;
32363: LD_ADDR_VAR 0 7
32367: PUSH
32368: LD_VAR 0 2
32372: PUSH
32373: LD_VAR 0 4
32377: MINUS
32378: ST_TO_ADDR
// if y - r < 0 then
32379: LD_VAR 0 3
32383: PUSH
32384: LD_VAR 0 4
32388: MINUS
32389: PUSH
32390: LD_INT 0
32392: LESS
32393: IFFALSE 32405
// min_y := 0 else
32395: LD_ADDR_VAR 0 8
32399: PUSH
32400: LD_INT 0
32402: ST_TO_ADDR
32403: GO 32421
// min_y := y - r ;
32405: LD_ADDR_VAR 0 8
32409: PUSH
32410: LD_VAR 0 3
32414: PUSH
32415: LD_VAR 0 4
32419: MINUS
32420: ST_TO_ADDR
// max_x := x + r ;
32421: LD_ADDR_VAR 0 9
32425: PUSH
32426: LD_VAR 0 2
32430: PUSH
32431: LD_VAR 0 4
32435: PLUS
32436: ST_TO_ADDR
// max_y := y + r ;
32437: LD_ADDR_VAR 0 10
32441: PUSH
32442: LD_VAR 0 3
32446: PUSH
32447: LD_VAR 0 4
32451: PLUS
32452: ST_TO_ADDR
// for _x = min_x to max_x do
32453: LD_ADDR_VAR 0 11
32457: PUSH
32458: DOUBLE
32459: LD_VAR 0 7
32463: DEC
32464: ST_TO_ADDR
32465: LD_VAR 0 9
32469: PUSH
32470: FOR_TO
32471: IFFALSE 32588
// for _y = min_y to max_y do
32473: LD_ADDR_VAR 0 12
32477: PUSH
32478: DOUBLE
32479: LD_VAR 0 8
32483: DEC
32484: ST_TO_ADDR
32485: LD_VAR 0 10
32489: PUSH
32490: FOR_TO
32491: IFFALSE 32584
// begin if not ValidHex ( _x , _y ) then
32493: LD_VAR 0 11
32497: PPUSH
32498: LD_VAR 0 12
32502: PPUSH
32503: CALL_OW 488
32507: NOT
32508: IFFALSE 32512
// continue ;
32510: GO 32490
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32512: LD_VAR 0 11
32516: PPUSH
32517: LD_VAR 0 12
32521: PPUSH
32522: CALL_OW 351
32526: PUSH
32527: LD_VAR 0 11
32531: PPUSH
32532: LD_VAR 0 12
32536: PPUSH
32537: CALL_OW 554
32541: AND
32542: IFFALSE 32582
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32544: LD_ADDR_VAR 0 13
32548: PUSH
32549: LD_VAR 0 13
32553: PPUSH
32554: LD_VAR 0 13
32558: PUSH
32559: LD_INT 1
32561: PLUS
32562: PPUSH
32563: LD_VAR 0 11
32567: PUSH
32568: LD_VAR 0 12
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PPUSH
32577: CALL_OW 2
32581: ST_TO_ADDR
// end ;
32582: GO 32490
32584: POP
32585: POP
32586: GO 32470
32588: POP
32589: POP
// if not list then
32590: LD_VAR 0 13
32594: NOT
32595: IFFALSE 32599
// exit ;
32597: GO 32670
// for i in list do
32599: LD_ADDR_VAR 0 6
32603: PUSH
32604: LD_VAR 0 13
32608: PUSH
32609: FOR_IN
32610: IFFALSE 32668
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32612: LD_VAR 0 1
32616: PPUSH
32617: LD_STRING M
32619: PUSH
32620: LD_VAR 0 6
32624: PUSH
32625: LD_INT 1
32627: ARRAY
32628: PUSH
32629: LD_VAR 0 6
32633: PUSH
32634: LD_INT 2
32636: ARRAY
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: PUSH
32659: EMPTY
32660: LIST
32661: PPUSH
32662: CALL_OW 447
32666: GO 32609
32668: POP
32669: POP
// end ;
32670: LD_VAR 0 5
32674: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
32675: LD_INT 0
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
32687: LD_VAR 0 1
32691: PPUSH
32692: CALL_OW 302
32696: NOT
32697: PUSH
32698: LD_VAR 0 2
32702: PPUSH
32703: LD_VAR 0 3
32707: PPUSH
32708: CALL_OW 488
32712: NOT
32713: OR
32714: PUSH
32715: LD_VAR 0 4
32719: NOT
32720: OR
32721: IFFALSE 32725
// exit ;
32723: GO 33238
// list := [ ] ;
32725: LD_ADDR_VAR 0 13
32729: PUSH
32730: EMPTY
32731: ST_TO_ADDR
// if x - r < 0 then
32732: LD_VAR 0 2
32736: PUSH
32737: LD_VAR 0 4
32741: MINUS
32742: PUSH
32743: LD_INT 0
32745: LESS
32746: IFFALSE 32758
// min_x := 0 else
32748: LD_ADDR_VAR 0 7
32752: PUSH
32753: LD_INT 0
32755: ST_TO_ADDR
32756: GO 32774
// min_x := x - r ;
32758: LD_ADDR_VAR 0 7
32762: PUSH
32763: LD_VAR 0 2
32767: PUSH
32768: LD_VAR 0 4
32772: MINUS
32773: ST_TO_ADDR
// if y - r < 0 then
32774: LD_VAR 0 3
32778: PUSH
32779: LD_VAR 0 4
32783: MINUS
32784: PUSH
32785: LD_INT 0
32787: LESS
32788: IFFALSE 32800
// min_y := 0 else
32790: LD_ADDR_VAR 0 8
32794: PUSH
32795: LD_INT 0
32797: ST_TO_ADDR
32798: GO 32816
// min_y := y - r ;
32800: LD_ADDR_VAR 0 8
32804: PUSH
32805: LD_VAR 0 3
32809: PUSH
32810: LD_VAR 0 4
32814: MINUS
32815: ST_TO_ADDR
// max_x := x + r ;
32816: LD_ADDR_VAR 0 9
32820: PUSH
32821: LD_VAR 0 2
32825: PUSH
32826: LD_VAR 0 4
32830: PLUS
32831: ST_TO_ADDR
// max_y := y + r ;
32832: LD_ADDR_VAR 0 10
32836: PUSH
32837: LD_VAR 0 3
32841: PUSH
32842: LD_VAR 0 4
32846: PLUS
32847: ST_TO_ADDR
// for _x = min_x to max_x do
32848: LD_ADDR_VAR 0 11
32852: PUSH
32853: DOUBLE
32854: LD_VAR 0 7
32858: DEC
32859: ST_TO_ADDR
32860: LD_VAR 0 9
32864: PUSH
32865: FOR_TO
32866: IFFALSE 32983
// for _y = min_y to max_y do
32868: LD_ADDR_VAR 0 12
32872: PUSH
32873: DOUBLE
32874: LD_VAR 0 8
32878: DEC
32879: ST_TO_ADDR
32880: LD_VAR 0 10
32884: PUSH
32885: FOR_TO
32886: IFFALSE 32979
// begin if not ValidHex ( _x , _y ) then
32888: LD_VAR 0 11
32892: PPUSH
32893: LD_VAR 0 12
32897: PPUSH
32898: CALL_OW 488
32902: NOT
32903: IFFALSE 32907
// continue ;
32905: GO 32885
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32907: LD_VAR 0 11
32911: PPUSH
32912: LD_VAR 0 12
32916: PPUSH
32917: CALL_OW 351
32921: PUSH
32922: LD_VAR 0 11
32926: PPUSH
32927: LD_VAR 0 12
32931: PPUSH
32932: CALL_OW 554
32936: AND
32937: IFFALSE 32977
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32939: LD_ADDR_VAR 0 13
32943: PUSH
32944: LD_VAR 0 13
32948: PPUSH
32949: LD_VAR 0 13
32953: PUSH
32954: LD_INT 1
32956: PLUS
32957: PPUSH
32958: LD_VAR 0 11
32962: PUSH
32963: LD_VAR 0 12
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PPUSH
32972: CALL_OW 2
32976: ST_TO_ADDR
// end ;
32977: GO 32885
32979: POP
32980: POP
32981: GO 32865
32983: POP
32984: POP
// if not list then
32985: LD_VAR 0 13
32989: NOT
32990: IFFALSE 32994
// exit ;
32992: GO 33238
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
32994: LD_ADDR_VAR 0 13
32998: PUSH
32999: LD_VAR 0 1
33003: PPUSH
33004: LD_VAR 0 13
33008: PPUSH
33009: LD_INT 1
33011: PPUSH
33012: LD_INT 1
33014: PPUSH
33015: CALL 41851 0 4
33019: ST_TO_ADDR
// ComStop ( flame ) ;
33020: LD_VAR 0 1
33024: PPUSH
33025: CALL_OW 141
// for i in list do
33029: LD_ADDR_VAR 0 6
33033: PUSH
33034: LD_VAR 0 13
33038: PUSH
33039: FOR_IN
33040: IFFALSE 33071
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
33042: LD_VAR 0 1
33046: PPUSH
33047: LD_VAR 0 6
33051: PUSH
33052: LD_INT 1
33054: ARRAY
33055: PPUSH
33056: LD_VAR 0 6
33060: PUSH
33061: LD_INT 2
33063: ARRAY
33064: PPUSH
33065: CALL_OW 176
33069: GO 33039
33071: POP
33072: POP
// repeat wait ( 0 0$1 ) ;
33073: LD_INT 35
33075: PPUSH
33076: CALL_OW 67
// task := GetTaskList ( flame ) ;
33080: LD_ADDR_VAR 0 14
33084: PUSH
33085: LD_VAR 0 1
33089: PPUSH
33090: CALL_OW 437
33094: ST_TO_ADDR
// if not task then
33095: LD_VAR 0 14
33099: NOT
33100: IFFALSE 33104
// exit ;
33102: GO 33238
// if task [ 1 ] [ 1 ] <> | then
33104: LD_VAR 0 14
33108: PUSH
33109: LD_INT 1
33111: ARRAY
33112: PUSH
33113: LD_INT 1
33115: ARRAY
33116: PUSH
33117: LD_STRING |
33119: NONEQUAL
33120: IFFALSE 33124
// exit ;
33122: GO 33238
// _x := task [ 1 ] [ 2 ] ;
33124: LD_ADDR_VAR 0 11
33128: PUSH
33129: LD_VAR 0 14
33133: PUSH
33134: LD_INT 1
33136: ARRAY
33137: PUSH
33138: LD_INT 2
33140: ARRAY
33141: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
33142: LD_ADDR_VAR 0 12
33146: PUSH
33147: LD_VAR 0 14
33151: PUSH
33152: LD_INT 1
33154: ARRAY
33155: PUSH
33156: LD_INT 3
33158: ARRAY
33159: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
33160: LD_VAR 0 11
33164: PPUSH
33165: LD_VAR 0 12
33169: PPUSH
33170: CALL_OW 351
33174: NOT
33175: PUSH
33176: LD_VAR 0 11
33180: PPUSH
33181: LD_VAR 0 12
33185: PPUSH
33186: CALL_OW 554
33190: NOT
33191: OR
33192: IFFALSE 33226
// begin task := Delete ( task , 1 ) ;
33194: LD_ADDR_VAR 0 14
33198: PUSH
33199: LD_VAR 0 14
33203: PPUSH
33204: LD_INT 1
33206: PPUSH
33207: CALL_OW 3
33211: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
33212: LD_VAR 0 1
33216: PPUSH
33217: LD_VAR 0 14
33221: PPUSH
33222: CALL_OW 446
// end ; until not HasTask ( flame ) ;
33226: LD_VAR 0 1
33230: PPUSH
33231: CALL_OW 314
33235: NOT
33236: IFFALSE 33073
// end ;
33238: LD_VAR 0 5
33242: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33243: LD_EXP 102
33247: NOT
33248: IFFALSE 33298
33250: GO 33252
33252: DISABLE
// begin initHack := true ;
33253: LD_ADDR_EXP 102
33257: PUSH
33258: LD_INT 1
33260: ST_TO_ADDR
// hackTanks := [ ] ;
33261: LD_ADDR_EXP 103
33265: PUSH
33266: EMPTY
33267: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33268: LD_ADDR_EXP 104
33272: PUSH
33273: EMPTY
33274: ST_TO_ADDR
// hackLimit := 3 ;
33275: LD_ADDR_EXP 105
33279: PUSH
33280: LD_INT 3
33282: ST_TO_ADDR
// hackDist := 12 ;
33283: LD_ADDR_EXP 106
33287: PUSH
33288: LD_INT 12
33290: ST_TO_ADDR
// hackCounter := [ ] ;
33291: LD_ADDR_EXP 107
33295: PUSH
33296: EMPTY
33297: ST_TO_ADDR
// end ;
33298: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33299: LD_EXP 102
33303: PUSH
33304: LD_INT 34
33306: PUSH
33307: LD_INT 99
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PPUSH
33314: CALL_OW 69
33318: AND
33319: IFFALSE 33572
33321: GO 33323
33323: DISABLE
33324: LD_INT 0
33326: PPUSH
33327: PPUSH
// begin enable ;
33328: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33329: LD_ADDR_VAR 0 1
33333: PUSH
33334: LD_INT 34
33336: PUSH
33337: LD_INT 99
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PPUSH
33344: CALL_OW 69
33348: PUSH
33349: FOR_IN
33350: IFFALSE 33570
// begin if not i in hackTanks then
33352: LD_VAR 0 1
33356: PUSH
33357: LD_EXP 103
33361: IN
33362: NOT
33363: IFFALSE 33446
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33365: LD_ADDR_EXP 103
33369: PUSH
33370: LD_EXP 103
33374: PPUSH
33375: LD_EXP 103
33379: PUSH
33380: LD_INT 1
33382: PLUS
33383: PPUSH
33384: LD_VAR 0 1
33388: PPUSH
33389: CALL_OW 1
33393: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33394: LD_ADDR_EXP 104
33398: PUSH
33399: LD_EXP 104
33403: PPUSH
33404: LD_EXP 104
33408: PUSH
33409: LD_INT 1
33411: PLUS
33412: PPUSH
33413: EMPTY
33414: PPUSH
33415: CALL_OW 1
33419: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33420: LD_ADDR_EXP 107
33424: PUSH
33425: LD_EXP 107
33429: PPUSH
33430: LD_EXP 107
33434: PUSH
33435: LD_INT 1
33437: PLUS
33438: PPUSH
33439: EMPTY
33440: PPUSH
33441: CALL_OW 1
33445: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33446: LD_VAR 0 1
33450: PPUSH
33451: CALL_OW 302
33455: NOT
33456: IFFALSE 33469
// begin HackUnlinkAll ( i ) ;
33458: LD_VAR 0 1
33462: PPUSH
33463: CALL 33575 0 1
// continue ;
33467: GO 33349
// end ; HackCheckCapturedStatus ( i ) ;
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL 34018 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33478: LD_ADDR_VAR 0 2
33482: PUSH
33483: LD_INT 81
33485: PUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: CALL_OW 255
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 33
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 91
33512: PUSH
33513: LD_VAR 0 1
33517: PUSH
33518: LD_EXP 106
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 50
33530: PUSH
33531: EMPTY
33532: LIST
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: PPUSH
33540: CALL_OW 69
33544: ST_TO_ADDR
// if not tmp then
33545: LD_VAR 0 2
33549: NOT
33550: IFFALSE 33554
// continue ;
33552: GO 33349
// HackLink ( i , tmp ) ;
33554: LD_VAR 0 1
33558: PPUSH
33559: LD_VAR 0 2
33563: PPUSH
33564: CALL 33711 0 2
// end ;
33568: GO 33349
33570: POP
33571: POP
// end ;
33572: PPOPN 2
33574: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33575: LD_INT 0
33577: PPUSH
33578: PPUSH
33579: PPUSH
// if not hack in hackTanks then
33580: LD_VAR 0 1
33584: PUSH
33585: LD_EXP 103
33589: IN
33590: NOT
33591: IFFALSE 33595
// exit ;
33593: GO 33706
// index := GetElementIndex ( hackTanks , hack ) ;
33595: LD_ADDR_VAR 0 4
33599: PUSH
33600: LD_EXP 103
33604: PPUSH
33605: LD_VAR 0 1
33609: PPUSH
33610: CALL 41148 0 2
33614: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33615: LD_EXP 104
33619: PUSH
33620: LD_VAR 0 4
33624: ARRAY
33625: IFFALSE 33706
// begin for i in hackTanksCaptured [ index ] do
33627: LD_ADDR_VAR 0 3
33631: PUSH
33632: LD_EXP 104
33636: PUSH
33637: LD_VAR 0 4
33641: ARRAY
33642: PUSH
33643: FOR_IN
33644: IFFALSE 33670
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33646: LD_VAR 0 3
33650: PUSH
33651: LD_INT 1
33653: ARRAY
33654: PPUSH
33655: LD_VAR 0 3
33659: PUSH
33660: LD_INT 2
33662: ARRAY
33663: PPUSH
33664: CALL_OW 235
33668: GO 33643
33670: POP
33671: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33672: LD_ADDR_EXP 104
33676: PUSH
33677: LD_EXP 104
33681: PPUSH
33682: LD_VAR 0 4
33686: PPUSH
33687: EMPTY
33688: PPUSH
33689: CALL_OW 1
33693: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33694: LD_VAR 0 1
33698: PPUSH
33699: LD_INT 0
33701: PPUSH
33702: CALL_OW 505
// end ; end ;
33706: LD_VAR 0 2
33710: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33711: LD_INT 0
33713: PPUSH
33714: PPUSH
33715: PPUSH
// if not hack in hackTanks or not vehicles then
33716: LD_VAR 0 1
33720: PUSH
33721: LD_EXP 103
33725: IN
33726: NOT
33727: PUSH
33728: LD_VAR 0 2
33732: NOT
33733: OR
33734: IFFALSE 33738
// exit ;
33736: GO 34013
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33738: LD_ADDR_VAR 0 2
33742: PUSH
33743: LD_VAR 0 1
33747: PPUSH
33748: LD_VAR 0 2
33752: PPUSH
33753: LD_INT 1
33755: PPUSH
33756: LD_INT 1
33758: PPUSH
33759: CALL 41798 0 4
33763: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33764: LD_ADDR_VAR 0 5
33768: PUSH
33769: LD_EXP 103
33773: PPUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL 41148 0 2
33783: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33784: LD_EXP 104
33788: PUSH
33789: LD_VAR 0 5
33793: ARRAY
33794: PUSH
33795: LD_EXP 105
33799: LESS
33800: IFFALSE 33989
// begin for i := 1 to vehicles do
33802: LD_ADDR_VAR 0 4
33806: PUSH
33807: DOUBLE
33808: LD_INT 1
33810: DEC
33811: ST_TO_ADDR
33812: LD_VAR 0 2
33816: PUSH
33817: FOR_TO
33818: IFFALSE 33987
// begin if hackTanksCaptured [ index ] = hackLimit then
33820: LD_EXP 104
33824: PUSH
33825: LD_VAR 0 5
33829: ARRAY
33830: PUSH
33831: LD_EXP 105
33835: EQUAL
33836: IFFALSE 33840
// break ;
33838: GO 33987
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33840: LD_ADDR_EXP 107
33844: PUSH
33845: LD_EXP 107
33849: PPUSH
33850: LD_VAR 0 5
33854: PPUSH
33855: LD_EXP 107
33859: PUSH
33860: LD_VAR 0 5
33864: ARRAY
33865: PUSH
33866: LD_INT 1
33868: PLUS
33869: PPUSH
33870: CALL_OW 1
33874: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33875: LD_ADDR_EXP 104
33879: PUSH
33880: LD_EXP 104
33884: PPUSH
33885: LD_VAR 0 5
33889: PUSH
33890: LD_EXP 104
33894: PUSH
33895: LD_VAR 0 5
33899: ARRAY
33900: PUSH
33901: LD_INT 1
33903: PLUS
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PPUSH
33909: LD_VAR 0 2
33913: PUSH
33914: LD_VAR 0 4
33918: ARRAY
33919: PUSH
33920: LD_VAR 0 2
33924: PUSH
33925: LD_VAR 0 4
33929: ARRAY
33930: PPUSH
33931: CALL_OW 255
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PPUSH
33940: CALL 41363 0 3
33944: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33945: LD_VAR 0 2
33949: PUSH
33950: LD_VAR 0 4
33954: ARRAY
33955: PPUSH
33956: LD_VAR 0 1
33960: PPUSH
33961: CALL_OW 255
33965: PPUSH
33966: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33970: LD_VAR 0 2
33974: PUSH
33975: LD_VAR 0 4
33979: ARRAY
33980: PPUSH
33981: CALL_OW 141
// end ;
33985: GO 33817
33987: POP
33988: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33989: LD_VAR 0 1
33993: PPUSH
33994: LD_EXP 104
33998: PUSH
33999: LD_VAR 0 5
34003: ARRAY
34004: PUSH
34005: LD_INT 0
34007: PLUS
34008: PPUSH
34009: CALL_OW 505
// end ;
34013: LD_VAR 0 3
34017: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34018: LD_INT 0
34020: PPUSH
34021: PPUSH
34022: PPUSH
34023: PPUSH
// if not hack in hackTanks then
34024: LD_VAR 0 1
34028: PUSH
34029: LD_EXP 103
34033: IN
34034: NOT
34035: IFFALSE 34039
// exit ;
34037: GO 34279
// index := GetElementIndex ( hackTanks , hack ) ;
34039: LD_ADDR_VAR 0 4
34043: PUSH
34044: LD_EXP 103
34048: PPUSH
34049: LD_VAR 0 1
34053: PPUSH
34054: CALL 41148 0 2
34058: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34059: LD_ADDR_VAR 0 3
34063: PUSH
34064: DOUBLE
34065: LD_EXP 104
34069: PUSH
34070: LD_VAR 0 4
34074: ARRAY
34075: INC
34076: ST_TO_ADDR
34077: LD_INT 1
34079: PUSH
34080: FOR_DOWNTO
34081: IFFALSE 34253
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34083: LD_ADDR_VAR 0 5
34087: PUSH
34088: LD_EXP 104
34092: PUSH
34093: LD_VAR 0 4
34097: ARRAY
34098: PUSH
34099: LD_VAR 0 3
34103: ARRAY
34104: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34105: LD_VAR 0 5
34109: PUSH
34110: LD_INT 1
34112: ARRAY
34113: PPUSH
34114: CALL_OW 302
34118: NOT
34119: PUSH
34120: LD_VAR 0 5
34124: PUSH
34125: LD_INT 1
34127: ARRAY
34128: PPUSH
34129: CALL_OW 255
34133: PUSH
34134: LD_VAR 0 1
34138: PPUSH
34139: CALL_OW 255
34143: NONEQUAL
34144: OR
34145: IFFALSE 34251
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34147: LD_VAR 0 5
34151: PUSH
34152: LD_INT 1
34154: ARRAY
34155: PPUSH
34156: CALL_OW 305
34160: PUSH
34161: LD_VAR 0 5
34165: PUSH
34166: LD_INT 1
34168: ARRAY
34169: PPUSH
34170: CALL_OW 255
34174: PUSH
34175: LD_VAR 0 1
34179: PPUSH
34180: CALL_OW 255
34184: EQUAL
34185: AND
34186: IFFALSE 34210
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34188: LD_VAR 0 5
34192: PUSH
34193: LD_INT 1
34195: ARRAY
34196: PPUSH
34197: LD_VAR 0 5
34201: PUSH
34202: LD_INT 2
34204: ARRAY
34205: PPUSH
34206: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34210: LD_ADDR_EXP 104
34214: PUSH
34215: LD_EXP 104
34219: PPUSH
34220: LD_VAR 0 4
34224: PPUSH
34225: LD_EXP 104
34229: PUSH
34230: LD_VAR 0 4
34234: ARRAY
34235: PPUSH
34236: LD_VAR 0 3
34240: PPUSH
34241: CALL_OW 3
34245: PPUSH
34246: CALL_OW 1
34250: ST_TO_ADDR
// end ; end ;
34251: GO 34080
34253: POP
34254: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34255: LD_VAR 0 1
34259: PPUSH
34260: LD_EXP 104
34264: PUSH
34265: LD_VAR 0 4
34269: ARRAY
34270: PUSH
34271: LD_INT 0
34273: PLUS
34274: PPUSH
34275: CALL_OW 505
// end ;
34279: LD_VAR 0 2
34283: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34284: LD_INT 0
34286: PPUSH
34287: PPUSH
34288: PPUSH
34289: PPUSH
// if not hack in hackTanks then
34290: LD_VAR 0 1
34294: PUSH
34295: LD_EXP 103
34299: IN
34300: NOT
34301: IFFALSE 34305
// exit ;
34303: GO 34390
// index := GetElementIndex ( hackTanks , hack ) ;
34305: LD_ADDR_VAR 0 5
34309: PUSH
34310: LD_EXP 103
34314: PPUSH
34315: LD_VAR 0 1
34319: PPUSH
34320: CALL 41148 0 2
34324: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34325: LD_ADDR_VAR 0 4
34329: PUSH
34330: DOUBLE
34331: LD_INT 1
34333: DEC
34334: ST_TO_ADDR
34335: LD_EXP 104
34339: PUSH
34340: LD_VAR 0 5
34344: ARRAY
34345: PUSH
34346: FOR_TO
34347: IFFALSE 34388
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34349: LD_EXP 104
34353: PUSH
34354: LD_VAR 0 5
34358: ARRAY
34359: PUSH
34360: LD_VAR 0 4
34364: ARRAY
34365: PUSH
34366: LD_INT 1
34368: ARRAY
34369: PUSH
34370: LD_VAR 0 2
34374: EQUAL
34375: IFFALSE 34386
// KillUnit ( vehicle ) ;
34377: LD_VAR 0 2
34381: PPUSH
34382: CALL_OW 66
34386: GO 34346
34388: POP
34389: POP
// end ;
34390: LD_VAR 0 3
34394: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34395: LD_EXP 108
34399: NOT
34400: IFFALSE 34435
34402: GO 34404
34404: DISABLE
// begin initMiner := true ;
34405: LD_ADDR_EXP 108
34409: PUSH
34410: LD_INT 1
34412: ST_TO_ADDR
// minersList := [ ] ;
34413: LD_ADDR_EXP 109
34417: PUSH
34418: EMPTY
34419: ST_TO_ADDR
// minerMinesList := [ ] ;
34420: LD_ADDR_EXP 110
34424: PUSH
34425: EMPTY
34426: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34427: LD_ADDR_EXP 111
34431: PUSH
34432: LD_INT 5
34434: ST_TO_ADDR
// end ;
34435: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34436: LD_EXP 108
34440: PUSH
34441: LD_INT 34
34443: PUSH
34444: LD_INT 81
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PPUSH
34451: CALL_OW 69
34455: AND
34456: IFFALSE 34917
34458: GO 34460
34460: DISABLE
34461: LD_INT 0
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
// begin enable ;
34467: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34468: LD_ADDR_VAR 0 1
34472: PUSH
34473: LD_INT 34
34475: PUSH
34476: LD_INT 81
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PPUSH
34483: CALL_OW 69
34487: PUSH
34488: FOR_IN
34489: IFFALSE 34561
// begin if not i in minersList then
34491: LD_VAR 0 1
34495: PUSH
34496: LD_EXP 109
34500: IN
34501: NOT
34502: IFFALSE 34559
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34504: LD_ADDR_EXP 109
34508: PUSH
34509: LD_EXP 109
34513: PPUSH
34514: LD_EXP 109
34518: PUSH
34519: LD_INT 1
34521: PLUS
34522: PPUSH
34523: LD_VAR 0 1
34527: PPUSH
34528: CALL_OW 1
34532: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34533: LD_ADDR_EXP 110
34537: PUSH
34538: LD_EXP 110
34542: PPUSH
34543: LD_EXP 110
34547: PUSH
34548: LD_INT 1
34550: PLUS
34551: PPUSH
34552: EMPTY
34553: PPUSH
34554: CALL_OW 1
34558: ST_TO_ADDR
// end end ;
34559: GO 34488
34561: POP
34562: POP
// for i := minerMinesList downto 1 do
34563: LD_ADDR_VAR 0 1
34567: PUSH
34568: DOUBLE
34569: LD_EXP 110
34573: INC
34574: ST_TO_ADDR
34575: LD_INT 1
34577: PUSH
34578: FOR_DOWNTO
34579: IFFALSE 34915
// begin if IsLive ( minersList [ i ] ) then
34581: LD_EXP 109
34585: PUSH
34586: LD_VAR 0 1
34590: ARRAY
34591: PPUSH
34592: CALL_OW 300
34596: IFFALSE 34624
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34598: LD_EXP 109
34602: PUSH
34603: LD_VAR 0 1
34607: ARRAY
34608: PPUSH
34609: LD_EXP 110
34613: PUSH
34614: LD_VAR 0 1
34618: ARRAY
34619: PPUSH
34620: CALL_OW 505
// if not minerMinesList [ i ] then
34624: LD_EXP 110
34628: PUSH
34629: LD_VAR 0 1
34633: ARRAY
34634: NOT
34635: IFFALSE 34639
// continue ;
34637: GO 34578
// for j := minerMinesList [ i ] downto 1 do
34639: LD_ADDR_VAR 0 2
34643: PUSH
34644: DOUBLE
34645: LD_EXP 110
34649: PUSH
34650: LD_VAR 0 1
34654: ARRAY
34655: INC
34656: ST_TO_ADDR
34657: LD_INT 1
34659: PUSH
34660: FOR_DOWNTO
34661: IFFALSE 34911
// begin side := GetSide ( minersList [ i ] ) ;
34663: LD_ADDR_VAR 0 3
34667: PUSH
34668: LD_EXP 109
34672: PUSH
34673: LD_VAR 0 1
34677: ARRAY
34678: PPUSH
34679: CALL_OW 255
34683: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34684: LD_ADDR_VAR 0 4
34688: PUSH
34689: LD_EXP 110
34693: PUSH
34694: LD_VAR 0 1
34698: ARRAY
34699: PUSH
34700: LD_VAR 0 2
34704: ARRAY
34705: PUSH
34706: LD_INT 1
34708: ARRAY
34709: PPUSH
34710: LD_EXP 110
34714: PUSH
34715: LD_VAR 0 1
34719: ARRAY
34720: PUSH
34721: LD_VAR 0 2
34725: ARRAY
34726: PUSH
34727: LD_INT 2
34729: ARRAY
34730: PPUSH
34731: CALL_OW 428
34735: ST_TO_ADDR
// if not tmp then
34736: LD_VAR 0 4
34740: NOT
34741: IFFALSE 34745
// continue ;
34743: GO 34660
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34745: LD_VAR 0 4
34749: PUSH
34750: LD_INT 81
34752: PUSH
34753: LD_VAR 0 3
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PPUSH
34762: CALL_OW 69
34766: IN
34767: PUSH
34768: LD_EXP 110
34772: PUSH
34773: LD_VAR 0 1
34777: ARRAY
34778: PUSH
34779: LD_VAR 0 2
34783: ARRAY
34784: PUSH
34785: LD_INT 1
34787: ARRAY
34788: PPUSH
34789: LD_EXP 110
34793: PUSH
34794: LD_VAR 0 1
34798: ARRAY
34799: PUSH
34800: LD_VAR 0 2
34804: ARRAY
34805: PUSH
34806: LD_INT 2
34808: ARRAY
34809: PPUSH
34810: CALL_OW 458
34814: AND
34815: IFFALSE 34909
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34817: LD_EXP 110
34821: PUSH
34822: LD_VAR 0 1
34826: ARRAY
34827: PUSH
34828: LD_VAR 0 2
34832: ARRAY
34833: PUSH
34834: LD_INT 1
34836: ARRAY
34837: PPUSH
34838: LD_EXP 110
34842: PUSH
34843: LD_VAR 0 1
34847: ARRAY
34848: PUSH
34849: LD_VAR 0 2
34853: ARRAY
34854: PUSH
34855: LD_INT 2
34857: ARRAY
34858: PPUSH
34859: LD_VAR 0 3
34863: PPUSH
34864: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34868: LD_ADDR_EXP 110
34872: PUSH
34873: LD_EXP 110
34877: PPUSH
34878: LD_VAR 0 1
34882: PPUSH
34883: LD_EXP 110
34887: PUSH
34888: LD_VAR 0 1
34892: ARRAY
34893: PPUSH
34894: LD_VAR 0 2
34898: PPUSH
34899: CALL_OW 3
34903: PPUSH
34904: CALL_OW 1
34908: ST_TO_ADDR
// end ; end ;
34909: GO 34660
34911: POP
34912: POP
// end ;
34913: GO 34578
34915: POP
34916: POP
// end ;
34917: PPOPN 4
34919: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34920: LD_INT 0
34922: PPUSH
34923: PPUSH
// result := false ;
34924: LD_ADDR_VAR 0 4
34928: PUSH
34929: LD_INT 0
34931: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34932: LD_VAR 0 1
34936: PPUSH
34937: CALL_OW 264
34941: PUSH
34942: LD_INT 81
34944: EQUAL
34945: NOT
34946: IFFALSE 34950
// exit ;
34948: GO 35190
// index := GetElementIndex ( minersList , unit ) ;
34950: LD_ADDR_VAR 0 5
34954: PUSH
34955: LD_EXP 109
34959: PPUSH
34960: LD_VAR 0 1
34964: PPUSH
34965: CALL 41148 0 2
34969: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34970: LD_EXP 110
34974: PUSH
34975: LD_VAR 0 5
34979: ARRAY
34980: PUSH
34981: LD_EXP 111
34985: GREATEREQUAL
34986: IFFALSE 34990
// exit ;
34988: GO 35190
// ComMoveXY ( unit , x , y ) ;
34990: LD_VAR 0 1
34994: PPUSH
34995: LD_VAR 0 2
34999: PPUSH
35000: LD_VAR 0 3
35004: PPUSH
35005: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35009: LD_INT 35
35011: PPUSH
35012: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35016: LD_VAR 0 1
35020: PPUSH
35021: LD_VAR 0 2
35025: PPUSH
35026: LD_VAR 0 3
35030: PPUSH
35031: CALL 72889 0 3
35035: NOT
35036: PUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: CALL_OW 314
35046: AND
35047: IFFALSE 35051
// exit ;
35049: GO 35190
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35051: LD_VAR 0 2
35055: PPUSH
35056: LD_VAR 0 3
35060: PPUSH
35061: CALL_OW 428
35065: PUSH
35066: LD_VAR 0 1
35070: EQUAL
35071: PUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 314
35081: NOT
35082: AND
35083: IFFALSE 35009
// PlaySoundXY ( x , y , PlantMine ) ;
35085: LD_VAR 0 2
35089: PPUSH
35090: LD_VAR 0 3
35094: PPUSH
35095: LD_STRING PlantMine
35097: PPUSH
35098: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35102: LD_VAR 0 2
35106: PPUSH
35107: LD_VAR 0 3
35111: PPUSH
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 255
35121: PPUSH
35122: LD_INT 0
35124: PPUSH
35125: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35129: LD_ADDR_EXP 110
35133: PUSH
35134: LD_EXP 110
35138: PPUSH
35139: LD_VAR 0 5
35143: PUSH
35144: LD_EXP 110
35148: PUSH
35149: LD_VAR 0 5
35153: ARRAY
35154: PUSH
35155: LD_INT 1
35157: PLUS
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PPUSH
35163: LD_VAR 0 2
35167: PUSH
35168: LD_VAR 0 3
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PPUSH
35177: CALL 41363 0 3
35181: ST_TO_ADDR
// result := true ;
35182: LD_ADDR_VAR 0 4
35186: PUSH
35187: LD_INT 1
35189: ST_TO_ADDR
// end ;
35190: LD_VAR 0 4
35194: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35195: LD_INT 0
35197: PPUSH
35198: PPUSH
35199: PPUSH
// if not unit in minersList then
35200: LD_VAR 0 1
35204: PUSH
35205: LD_EXP 109
35209: IN
35210: NOT
35211: IFFALSE 35215
// exit ;
35213: GO 35607
// index := GetElementIndex ( minersList , unit ) ;
35215: LD_ADDR_VAR 0 6
35219: PUSH
35220: LD_EXP 109
35224: PPUSH
35225: LD_VAR 0 1
35229: PPUSH
35230: CALL 41148 0 2
35234: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35235: LD_ADDR_VAR 0 5
35239: PUSH
35240: DOUBLE
35241: LD_EXP 110
35245: PUSH
35246: LD_VAR 0 6
35250: ARRAY
35251: INC
35252: ST_TO_ADDR
35253: LD_INT 1
35255: PUSH
35256: FOR_DOWNTO
35257: IFFALSE 35418
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35259: LD_EXP 110
35263: PUSH
35264: LD_VAR 0 6
35268: ARRAY
35269: PUSH
35270: LD_VAR 0 5
35274: ARRAY
35275: PUSH
35276: LD_INT 1
35278: ARRAY
35279: PUSH
35280: LD_VAR 0 2
35284: EQUAL
35285: PUSH
35286: LD_EXP 110
35290: PUSH
35291: LD_VAR 0 6
35295: ARRAY
35296: PUSH
35297: LD_VAR 0 5
35301: ARRAY
35302: PUSH
35303: LD_INT 2
35305: ARRAY
35306: PUSH
35307: LD_VAR 0 3
35311: EQUAL
35312: AND
35313: IFFALSE 35416
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35315: LD_EXP 110
35319: PUSH
35320: LD_VAR 0 6
35324: ARRAY
35325: PUSH
35326: LD_VAR 0 5
35330: ARRAY
35331: PUSH
35332: LD_INT 1
35334: ARRAY
35335: PPUSH
35336: LD_EXP 110
35340: PUSH
35341: LD_VAR 0 6
35345: ARRAY
35346: PUSH
35347: LD_VAR 0 5
35351: ARRAY
35352: PUSH
35353: LD_INT 2
35355: ARRAY
35356: PPUSH
35357: LD_VAR 0 1
35361: PPUSH
35362: CALL_OW 255
35366: PPUSH
35367: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35371: LD_ADDR_EXP 110
35375: PUSH
35376: LD_EXP 110
35380: PPUSH
35381: LD_VAR 0 6
35385: PPUSH
35386: LD_EXP 110
35390: PUSH
35391: LD_VAR 0 6
35395: ARRAY
35396: PPUSH
35397: LD_VAR 0 5
35401: PPUSH
35402: CALL_OW 3
35406: PPUSH
35407: CALL_OW 1
35411: ST_TO_ADDR
// exit ;
35412: POP
35413: POP
35414: GO 35607
// end ; end ;
35416: GO 35256
35418: POP
35419: POP
// for i := minerMinesList [ index ] downto 1 do
35420: LD_ADDR_VAR 0 5
35424: PUSH
35425: DOUBLE
35426: LD_EXP 110
35430: PUSH
35431: LD_VAR 0 6
35435: ARRAY
35436: INC
35437: ST_TO_ADDR
35438: LD_INT 1
35440: PUSH
35441: FOR_DOWNTO
35442: IFFALSE 35605
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35444: LD_EXP 110
35448: PUSH
35449: LD_VAR 0 6
35453: ARRAY
35454: PUSH
35455: LD_VAR 0 5
35459: ARRAY
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: PPUSH
35465: LD_EXP 110
35469: PUSH
35470: LD_VAR 0 6
35474: ARRAY
35475: PUSH
35476: LD_VAR 0 5
35480: ARRAY
35481: PUSH
35482: LD_INT 2
35484: ARRAY
35485: PPUSH
35486: LD_VAR 0 2
35490: PPUSH
35491: LD_VAR 0 3
35495: PPUSH
35496: CALL_OW 298
35500: PUSH
35501: LD_INT 6
35503: LESS
35504: IFFALSE 35603
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35506: LD_EXP 110
35510: PUSH
35511: LD_VAR 0 6
35515: ARRAY
35516: PUSH
35517: LD_VAR 0 5
35521: ARRAY
35522: PUSH
35523: LD_INT 1
35525: ARRAY
35526: PPUSH
35527: LD_EXP 110
35531: PUSH
35532: LD_VAR 0 6
35536: ARRAY
35537: PUSH
35538: LD_VAR 0 5
35542: ARRAY
35543: PUSH
35544: LD_INT 2
35546: ARRAY
35547: PPUSH
35548: LD_VAR 0 1
35552: PPUSH
35553: CALL_OW 255
35557: PPUSH
35558: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35562: LD_ADDR_EXP 110
35566: PUSH
35567: LD_EXP 110
35571: PPUSH
35572: LD_VAR 0 6
35576: PPUSH
35577: LD_EXP 110
35581: PUSH
35582: LD_VAR 0 6
35586: ARRAY
35587: PPUSH
35588: LD_VAR 0 5
35592: PPUSH
35593: CALL_OW 3
35597: PPUSH
35598: CALL_OW 1
35602: ST_TO_ADDR
// end ; end ;
35603: GO 35441
35605: POP
35606: POP
// end ;
35607: LD_VAR 0 4
35611: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35612: LD_INT 0
35614: PPUSH
35615: PPUSH
35616: PPUSH
35617: PPUSH
35618: PPUSH
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35623: LD_VAR 0 1
35627: PPUSH
35628: CALL_OW 264
35632: PUSH
35633: LD_INT 81
35635: EQUAL
35636: NOT
35637: PUSH
35638: LD_VAR 0 1
35642: PUSH
35643: LD_EXP 109
35647: IN
35648: NOT
35649: OR
35650: IFFALSE 35654
// exit ;
35652: GO 35976
// index := GetElementIndex ( minersList , unit ) ;
35654: LD_ADDR_VAR 0 6
35658: PUSH
35659: LD_EXP 109
35663: PPUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL 41148 0 2
35673: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35674: LD_ADDR_VAR 0 8
35678: PUSH
35679: LD_EXP 111
35683: PUSH
35684: LD_EXP 110
35688: PUSH
35689: LD_VAR 0 6
35693: ARRAY
35694: MINUS
35695: ST_TO_ADDR
// if not minesFreeAmount then
35696: LD_VAR 0 8
35700: NOT
35701: IFFALSE 35705
// exit ;
35703: GO 35976
// tmp := [ ] ;
35705: LD_ADDR_VAR 0 7
35709: PUSH
35710: EMPTY
35711: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35712: LD_ADDR_VAR 0 5
35716: PUSH
35717: DOUBLE
35718: LD_INT 1
35720: DEC
35721: ST_TO_ADDR
35722: LD_VAR 0 8
35726: PUSH
35727: FOR_TO
35728: IFFALSE 35923
// begin _d := rand ( 0 , 5 ) ;
35730: LD_ADDR_VAR 0 11
35734: PUSH
35735: LD_INT 0
35737: PPUSH
35738: LD_INT 5
35740: PPUSH
35741: CALL_OW 12
35745: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35746: LD_ADDR_VAR 0 12
35750: PUSH
35751: LD_INT 2
35753: PPUSH
35754: LD_INT 6
35756: PPUSH
35757: CALL_OW 12
35761: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35762: LD_ADDR_VAR 0 9
35766: PUSH
35767: LD_VAR 0 2
35771: PPUSH
35772: LD_VAR 0 11
35776: PPUSH
35777: LD_VAR 0 12
35781: PPUSH
35782: CALL_OW 272
35786: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35787: LD_ADDR_VAR 0 10
35791: PUSH
35792: LD_VAR 0 3
35796: PPUSH
35797: LD_VAR 0 11
35801: PPUSH
35802: LD_VAR 0 12
35806: PPUSH
35807: CALL_OW 273
35811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35812: LD_VAR 0 9
35816: PPUSH
35817: LD_VAR 0 10
35821: PPUSH
35822: CALL_OW 488
35826: PUSH
35827: LD_VAR 0 9
35831: PUSH
35832: LD_VAR 0 10
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_VAR 0 7
35845: IN
35846: NOT
35847: AND
35848: PUSH
35849: LD_VAR 0 9
35853: PPUSH
35854: LD_VAR 0 10
35858: PPUSH
35859: CALL_OW 458
35863: NOT
35864: AND
35865: IFFALSE 35907
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35867: LD_ADDR_VAR 0 7
35871: PUSH
35872: LD_VAR 0 7
35876: PPUSH
35877: LD_VAR 0 7
35881: PUSH
35882: LD_INT 1
35884: PLUS
35885: PPUSH
35886: LD_VAR 0 9
35890: PUSH
35891: LD_VAR 0 10
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PPUSH
35900: CALL_OW 1
35904: ST_TO_ADDR
35905: GO 35921
// i := i - 1 ;
35907: LD_ADDR_VAR 0 5
35911: PUSH
35912: LD_VAR 0 5
35916: PUSH
35917: LD_INT 1
35919: MINUS
35920: ST_TO_ADDR
// end ;
35921: GO 35727
35923: POP
35924: POP
// for i in tmp do
35925: LD_ADDR_VAR 0 5
35929: PUSH
35930: LD_VAR 0 7
35934: PUSH
35935: FOR_IN
35936: IFFALSE 35974
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35938: LD_VAR 0 1
35942: PPUSH
35943: LD_VAR 0 5
35947: PUSH
35948: LD_INT 1
35950: ARRAY
35951: PPUSH
35952: LD_VAR 0 5
35956: PUSH
35957: LD_INT 2
35959: ARRAY
35960: PPUSH
35961: CALL 34920 0 3
35965: NOT
35966: IFFALSE 35972
// exit ;
35968: POP
35969: POP
35970: GO 35976
35972: GO 35935
35974: POP
35975: POP
// end ;
35976: LD_VAR 0 4
35980: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35981: LD_INT 0
35983: PPUSH
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
// if not GetClass ( unit ) = class_sniper then
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL_OW 257
35999: PUSH
36000: LD_INT 5
36002: EQUAL
36003: NOT
36004: IFFALSE 36008
// exit ;
36006: GO 36396
// dist := 8 ;
36008: LD_ADDR_VAR 0 5
36012: PUSH
36013: LD_INT 8
36015: ST_TO_ADDR
// viewRange := 12 ;
36016: LD_ADDR_VAR 0 7
36020: PUSH
36021: LD_INT 12
36023: ST_TO_ADDR
// side := GetSide ( unit ) ;
36024: LD_ADDR_VAR 0 6
36028: PUSH
36029: LD_VAR 0 1
36033: PPUSH
36034: CALL_OW 255
36038: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36039: LD_INT 61
36041: PPUSH
36042: LD_VAR 0 6
36046: PPUSH
36047: CALL_OW 321
36051: PUSH
36052: LD_INT 2
36054: EQUAL
36055: IFFALSE 36065
// viewRange := 16 ;
36057: LD_ADDR_VAR 0 7
36061: PUSH
36062: LD_INT 16
36064: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36065: LD_VAR 0 1
36069: PPUSH
36070: LD_VAR 0 2
36074: PPUSH
36075: LD_VAR 0 3
36079: PPUSH
36080: CALL_OW 297
36084: PUSH
36085: LD_VAR 0 5
36089: GREATER
36090: IFFALSE 36169
// begin ComMoveXY ( unit , x , y ) ;
36092: LD_VAR 0 1
36096: PPUSH
36097: LD_VAR 0 2
36101: PPUSH
36102: LD_VAR 0 3
36106: PPUSH
36107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36111: LD_INT 35
36113: PPUSH
36114: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36118: LD_VAR 0 1
36122: PPUSH
36123: LD_VAR 0 2
36127: PPUSH
36128: LD_VAR 0 3
36132: PPUSH
36133: CALL 72889 0 3
36137: NOT
36138: IFFALSE 36142
// exit ;
36140: GO 36396
// until GetDistUnitXY ( unit , x , y ) < dist ;
36142: LD_VAR 0 1
36146: PPUSH
36147: LD_VAR 0 2
36151: PPUSH
36152: LD_VAR 0 3
36156: PPUSH
36157: CALL_OW 297
36161: PUSH
36162: LD_VAR 0 5
36166: LESS
36167: IFFALSE 36111
// end ; ComTurnXY ( unit , x , y ) ;
36169: LD_VAR 0 1
36173: PPUSH
36174: LD_VAR 0 2
36178: PPUSH
36179: LD_VAR 0 3
36183: PPUSH
36184: CALL_OW 118
// wait ( 5 ) ;
36188: LD_INT 5
36190: PPUSH
36191: CALL_OW 67
// _d := GetDir ( unit ) ;
36195: LD_ADDR_VAR 0 10
36199: PUSH
36200: LD_VAR 0 1
36204: PPUSH
36205: CALL_OW 254
36209: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36210: LD_ADDR_VAR 0 8
36214: PUSH
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 250
36224: PPUSH
36225: LD_VAR 0 10
36229: PPUSH
36230: LD_VAR 0 5
36234: PPUSH
36235: CALL_OW 272
36239: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36240: LD_ADDR_VAR 0 9
36244: PUSH
36245: LD_VAR 0 1
36249: PPUSH
36250: CALL_OW 251
36254: PPUSH
36255: LD_VAR 0 10
36259: PPUSH
36260: LD_VAR 0 5
36264: PPUSH
36265: CALL_OW 273
36269: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36270: LD_VAR 0 8
36274: PPUSH
36275: LD_VAR 0 9
36279: PPUSH
36280: CALL_OW 488
36284: NOT
36285: IFFALSE 36289
// exit ;
36287: GO 36396
// ComAnimCustom ( unit , 1 ) ;
36289: LD_VAR 0 1
36293: PPUSH
36294: LD_INT 1
36296: PPUSH
36297: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36301: LD_VAR 0 8
36305: PPUSH
36306: LD_VAR 0 9
36310: PPUSH
36311: LD_VAR 0 6
36315: PPUSH
36316: LD_VAR 0 7
36320: PPUSH
36321: CALL_OW 330
// repeat wait ( 1 ) ;
36325: LD_INT 1
36327: PPUSH
36328: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36332: LD_VAR 0 1
36336: PPUSH
36337: CALL_OW 316
36341: PUSH
36342: LD_VAR 0 1
36346: PPUSH
36347: CALL_OW 314
36351: OR
36352: PUSH
36353: LD_VAR 0 1
36357: PPUSH
36358: CALL_OW 302
36362: NOT
36363: OR
36364: PUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 301
36374: OR
36375: IFFALSE 36325
// RemoveSeeing ( _x , _y , side ) ;
36377: LD_VAR 0 8
36381: PPUSH
36382: LD_VAR 0 9
36386: PPUSH
36387: LD_VAR 0 6
36391: PPUSH
36392: CALL_OW 331
// end ; end_of_file
36396: LD_VAR 0 4
36400: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36401: LD_INT 0
36403: PPUSH
36404: PPUSH
// if exist_mode then
36405: LD_VAR 0 2
36409: IFFALSE 36434
// unit := CreateCharacter ( prefix & ident ) else
36411: LD_ADDR_VAR 0 5
36415: PUSH
36416: LD_VAR 0 3
36420: PUSH
36421: LD_VAR 0 1
36425: STR
36426: PPUSH
36427: CALL_OW 34
36431: ST_TO_ADDR
36432: GO 36449
// unit := NewCharacter ( ident ) ;
36434: LD_ADDR_VAR 0 5
36438: PUSH
36439: LD_VAR 0 1
36443: PPUSH
36444: CALL_OW 25
36448: ST_TO_ADDR
// result := unit ;
36449: LD_ADDR_VAR 0 4
36453: PUSH
36454: LD_VAR 0 5
36458: ST_TO_ADDR
// end ;
36459: LD_VAR 0 4
36463: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36464: LD_INT 0
36466: PPUSH
36467: PPUSH
// if not side or not nation then
36468: LD_VAR 0 1
36472: NOT
36473: PUSH
36474: LD_VAR 0 2
36478: NOT
36479: OR
36480: IFFALSE 36484
// exit ;
36482: GO 37252
// case nation of nation_american :
36484: LD_VAR 0 2
36488: PUSH
36489: LD_INT 1
36491: DOUBLE
36492: EQUAL
36493: IFTRUE 36497
36495: GO 36711
36497: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36498: LD_ADDR_VAR 0 4
36502: PUSH
36503: LD_INT 35
36505: PUSH
36506: LD_INT 45
36508: PUSH
36509: LD_INT 46
36511: PUSH
36512: LD_INT 47
36514: PUSH
36515: LD_INT 82
36517: PUSH
36518: LD_INT 83
36520: PUSH
36521: LD_INT 84
36523: PUSH
36524: LD_INT 85
36526: PUSH
36527: LD_INT 86
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 2
36535: PUSH
36536: LD_INT 6
36538: PUSH
36539: LD_INT 15
36541: PUSH
36542: LD_INT 16
36544: PUSH
36545: LD_INT 7
36547: PUSH
36548: LD_INT 12
36550: PUSH
36551: LD_INT 13
36553: PUSH
36554: LD_INT 10
36556: PUSH
36557: LD_INT 14
36559: PUSH
36560: LD_INT 20
36562: PUSH
36563: LD_INT 21
36565: PUSH
36566: LD_INT 22
36568: PUSH
36569: LD_INT 25
36571: PUSH
36572: LD_INT 32
36574: PUSH
36575: LD_INT 27
36577: PUSH
36578: LD_INT 36
36580: PUSH
36581: LD_INT 69
36583: PUSH
36584: LD_INT 39
36586: PUSH
36587: LD_INT 34
36589: PUSH
36590: LD_INT 40
36592: PUSH
36593: LD_INT 48
36595: PUSH
36596: LD_INT 49
36598: PUSH
36599: LD_INT 50
36601: PUSH
36602: LD_INT 51
36604: PUSH
36605: LD_INT 52
36607: PUSH
36608: LD_INT 53
36610: PUSH
36611: LD_INT 54
36613: PUSH
36614: LD_INT 55
36616: PUSH
36617: LD_INT 56
36619: PUSH
36620: LD_INT 57
36622: PUSH
36623: LD_INT 58
36625: PUSH
36626: LD_INT 59
36628: PUSH
36629: LD_INT 60
36631: PUSH
36632: LD_INT 61
36634: PUSH
36635: LD_INT 62
36637: PUSH
36638: LD_INT 80
36640: PUSH
36641: LD_INT 82
36643: PUSH
36644: LD_INT 83
36646: PUSH
36647: LD_INT 84
36649: PUSH
36650: LD_INT 85
36652: PUSH
36653: LD_INT 86
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: ST_TO_ADDR
36709: GO 37176
36711: LD_INT 2
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36719
36717: GO 36945
36719: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36720: LD_ADDR_VAR 0 4
36724: PUSH
36725: LD_INT 35
36727: PUSH
36728: LD_INT 45
36730: PUSH
36731: LD_INT 46
36733: PUSH
36734: LD_INT 47
36736: PUSH
36737: LD_INT 82
36739: PUSH
36740: LD_INT 83
36742: PUSH
36743: LD_INT 84
36745: PUSH
36746: LD_INT 85
36748: PUSH
36749: LD_INT 87
36751: PUSH
36752: LD_INT 70
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 11
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: LD_INT 4
36766: PUSH
36767: LD_INT 5
36769: PUSH
36770: LD_INT 6
36772: PUSH
36773: LD_INT 15
36775: PUSH
36776: LD_INT 18
36778: PUSH
36779: LD_INT 7
36781: PUSH
36782: LD_INT 17
36784: PUSH
36785: LD_INT 8
36787: PUSH
36788: LD_INT 20
36790: PUSH
36791: LD_INT 21
36793: PUSH
36794: LD_INT 22
36796: PUSH
36797: LD_INT 72
36799: PUSH
36800: LD_INT 26
36802: PUSH
36803: LD_INT 69
36805: PUSH
36806: LD_INT 39
36808: PUSH
36809: LD_INT 40
36811: PUSH
36812: LD_INT 41
36814: PUSH
36815: LD_INT 42
36817: PUSH
36818: LD_INT 43
36820: PUSH
36821: LD_INT 48
36823: PUSH
36824: LD_INT 49
36826: PUSH
36827: LD_INT 50
36829: PUSH
36830: LD_INT 51
36832: PUSH
36833: LD_INT 52
36835: PUSH
36836: LD_INT 53
36838: PUSH
36839: LD_INT 54
36841: PUSH
36842: LD_INT 55
36844: PUSH
36845: LD_INT 56
36847: PUSH
36848: LD_INT 60
36850: PUSH
36851: LD_INT 61
36853: PUSH
36854: LD_INT 62
36856: PUSH
36857: LD_INT 66
36859: PUSH
36860: LD_INT 67
36862: PUSH
36863: LD_INT 68
36865: PUSH
36866: LD_INT 81
36868: PUSH
36869: LD_INT 82
36871: PUSH
36872: LD_INT 83
36874: PUSH
36875: LD_INT 84
36877: PUSH
36878: LD_INT 85
36880: PUSH
36881: LD_INT 87
36883: PUSH
36884: LD_INT 88
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
36943: GO 37176
36945: LD_INT 3
36947: DOUBLE
36948: EQUAL
36949: IFTRUE 36953
36951: GO 37175
36953: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36954: LD_ADDR_VAR 0 4
36958: PUSH
36959: LD_INT 46
36961: PUSH
36962: LD_INT 47
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 82
36973: PUSH
36974: LD_INT 83
36976: PUSH
36977: LD_INT 84
36979: PUSH
36980: LD_INT 85
36982: PUSH
36983: LD_INT 86
36985: PUSH
36986: LD_INT 11
36988: PUSH
36989: LD_INT 9
36991: PUSH
36992: LD_INT 20
36994: PUSH
36995: LD_INT 19
36997: PUSH
36998: LD_INT 21
37000: PUSH
37001: LD_INT 24
37003: PUSH
37004: LD_INT 22
37006: PUSH
37007: LD_INT 25
37009: PUSH
37010: LD_INT 28
37012: PUSH
37013: LD_INT 29
37015: PUSH
37016: LD_INT 30
37018: PUSH
37019: LD_INT 31
37021: PUSH
37022: LD_INT 37
37024: PUSH
37025: LD_INT 38
37027: PUSH
37028: LD_INT 32
37030: PUSH
37031: LD_INT 27
37033: PUSH
37034: LD_INT 33
37036: PUSH
37037: LD_INT 69
37039: PUSH
37040: LD_INT 39
37042: PUSH
37043: LD_INT 34
37045: PUSH
37046: LD_INT 40
37048: PUSH
37049: LD_INT 71
37051: PUSH
37052: LD_INT 23
37054: PUSH
37055: LD_INT 44
37057: PUSH
37058: LD_INT 48
37060: PUSH
37061: LD_INT 49
37063: PUSH
37064: LD_INT 50
37066: PUSH
37067: LD_INT 51
37069: PUSH
37070: LD_INT 52
37072: PUSH
37073: LD_INT 53
37075: PUSH
37076: LD_INT 54
37078: PUSH
37079: LD_INT 55
37081: PUSH
37082: LD_INT 56
37084: PUSH
37085: LD_INT 57
37087: PUSH
37088: LD_INT 58
37090: PUSH
37091: LD_INT 59
37093: PUSH
37094: LD_INT 63
37096: PUSH
37097: LD_INT 64
37099: PUSH
37100: LD_INT 65
37102: PUSH
37103: LD_INT 82
37105: PUSH
37106: LD_INT 83
37108: PUSH
37109: LD_INT 84
37111: PUSH
37112: LD_INT 85
37114: PUSH
37115: LD_INT 86
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
37173: GO 37176
37175: POP
// if state > - 1 and state < 3 then
37176: LD_VAR 0 3
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: GREATER
37185: PUSH
37186: LD_VAR 0 3
37190: PUSH
37191: LD_INT 3
37193: LESS
37194: AND
37195: IFFALSE 37252
// for i in result do
37197: LD_ADDR_VAR 0 5
37201: PUSH
37202: LD_VAR 0 4
37206: PUSH
37207: FOR_IN
37208: IFFALSE 37250
// if GetTech ( i , side ) <> state then
37210: LD_VAR 0 5
37214: PPUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 321
37224: PUSH
37225: LD_VAR 0 3
37229: NONEQUAL
37230: IFFALSE 37248
// result := result diff i ;
37232: LD_ADDR_VAR 0 4
37236: PUSH
37237: LD_VAR 0 4
37241: PUSH
37242: LD_VAR 0 5
37246: DIFF
37247: ST_TO_ADDR
37248: GO 37207
37250: POP
37251: POP
// end ;
37252: LD_VAR 0 4
37256: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37257: LD_INT 0
37259: PPUSH
37260: PPUSH
37261: PPUSH
// result := true ;
37262: LD_ADDR_VAR 0 3
37266: PUSH
37267: LD_INT 1
37269: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37270: LD_ADDR_VAR 0 5
37274: PUSH
37275: LD_VAR 0 2
37279: PPUSH
37280: CALL_OW 480
37284: ST_TO_ADDR
// if not tmp then
37285: LD_VAR 0 5
37289: NOT
37290: IFFALSE 37294
// exit ;
37292: GO 37343
// for i in tmp do
37294: LD_ADDR_VAR 0 4
37298: PUSH
37299: LD_VAR 0 5
37303: PUSH
37304: FOR_IN
37305: IFFALSE 37341
// if GetTech ( i , side ) <> state_researched then
37307: LD_VAR 0 4
37311: PPUSH
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 321
37321: PUSH
37322: LD_INT 2
37324: NONEQUAL
37325: IFFALSE 37339
// begin result := false ;
37327: LD_ADDR_VAR 0 3
37331: PUSH
37332: LD_INT 0
37334: ST_TO_ADDR
// exit ;
37335: POP
37336: POP
37337: GO 37343
// end ;
37339: GO 37304
37341: POP
37342: POP
// end ;
37343: LD_VAR 0 3
37347: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37348: LD_INT 0
37350: PPUSH
37351: PPUSH
37352: PPUSH
37353: PPUSH
37354: PPUSH
37355: PPUSH
37356: PPUSH
37357: PPUSH
37358: PPUSH
37359: PPUSH
37360: PPUSH
37361: PPUSH
37362: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37363: LD_VAR 0 1
37367: NOT
37368: PUSH
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL_OW 257
37378: PUSH
37379: LD_INT 9
37381: NONEQUAL
37382: OR
37383: IFFALSE 37387
// exit ;
37385: GO 37960
// side := GetSide ( unit ) ;
37387: LD_ADDR_VAR 0 9
37391: PUSH
37392: LD_VAR 0 1
37396: PPUSH
37397: CALL_OW 255
37401: ST_TO_ADDR
// tech_space := tech_spacanom ;
37402: LD_ADDR_VAR 0 12
37406: PUSH
37407: LD_INT 29
37409: ST_TO_ADDR
// tech_time := tech_taurad ;
37410: LD_ADDR_VAR 0 13
37414: PUSH
37415: LD_INT 28
37417: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37418: LD_ADDR_VAR 0 11
37422: PUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 310
37432: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37433: LD_VAR 0 11
37437: PPUSH
37438: CALL_OW 247
37442: PUSH
37443: LD_INT 2
37445: EQUAL
37446: IFFALSE 37450
// exit ;
37448: GO 37960
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37450: LD_ADDR_VAR 0 8
37454: PUSH
37455: LD_INT 81
37457: PUSH
37458: LD_VAR 0 9
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: LD_INT 21
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PPUSH
37488: CALL_OW 69
37492: ST_TO_ADDR
// if not tmp then
37493: LD_VAR 0 8
37497: NOT
37498: IFFALSE 37502
// exit ;
37500: GO 37960
// if in_unit then
37502: LD_VAR 0 11
37506: IFFALSE 37530
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37508: LD_ADDR_VAR 0 10
37512: PUSH
37513: LD_VAR 0 8
37517: PPUSH
37518: LD_VAR 0 11
37522: PPUSH
37523: CALL_OW 74
37527: ST_TO_ADDR
37528: GO 37550
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37530: LD_ADDR_VAR 0 10
37534: PUSH
37535: LD_VAR 0 8
37539: PPUSH
37540: LD_VAR 0 1
37544: PPUSH
37545: CALL_OW 74
37549: ST_TO_ADDR
// if not enemy then
37550: LD_VAR 0 10
37554: NOT
37555: IFFALSE 37559
// exit ;
37557: GO 37960
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37559: LD_VAR 0 11
37563: PUSH
37564: LD_VAR 0 11
37568: PPUSH
37569: LD_VAR 0 10
37573: PPUSH
37574: CALL_OW 296
37578: PUSH
37579: LD_INT 13
37581: GREATER
37582: AND
37583: PUSH
37584: LD_VAR 0 1
37588: PPUSH
37589: LD_VAR 0 10
37593: PPUSH
37594: CALL_OW 296
37598: PUSH
37599: LD_INT 12
37601: GREATER
37602: OR
37603: IFFALSE 37607
// exit ;
37605: GO 37960
// missile := [ 1 ] ;
37607: LD_ADDR_VAR 0 14
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37618: LD_VAR 0 9
37622: PPUSH
37623: LD_VAR 0 12
37627: PPUSH
37628: CALL_OW 325
37632: IFFALSE 37661
// missile := Replace ( missile , missile + 1 , 2 ) ;
37634: LD_ADDR_VAR 0 14
37638: PUSH
37639: LD_VAR 0 14
37643: PPUSH
37644: LD_VAR 0 14
37648: PUSH
37649: LD_INT 1
37651: PLUS
37652: PPUSH
37653: LD_INT 2
37655: PPUSH
37656: CALL_OW 1
37660: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37661: LD_VAR 0 9
37665: PPUSH
37666: LD_VAR 0 13
37670: PPUSH
37671: CALL_OW 325
37675: PUSH
37676: LD_VAR 0 10
37680: PPUSH
37681: CALL_OW 255
37685: PPUSH
37686: LD_VAR 0 13
37690: PPUSH
37691: CALL_OW 325
37695: NOT
37696: AND
37697: IFFALSE 37726
// missile := Replace ( missile , missile + 1 , 3 ) ;
37699: LD_ADDR_VAR 0 14
37703: PUSH
37704: LD_VAR 0 14
37708: PPUSH
37709: LD_VAR 0 14
37713: PUSH
37714: LD_INT 1
37716: PLUS
37717: PPUSH
37718: LD_INT 3
37720: PPUSH
37721: CALL_OW 1
37725: ST_TO_ADDR
// if missile < 2 then
37726: LD_VAR 0 14
37730: PUSH
37731: LD_INT 2
37733: LESS
37734: IFFALSE 37738
// exit ;
37736: GO 37960
// x := GetX ( enemy ) ;
37738: LD_ADDR_VAR 0 4
37742: PUSH
37743: LD_VAR 0 10
37747: PPUSH
37748: CALL_OW 250
37752: ST_TO_ADDR
// y := GetY ( enemy ) ;
37753: LD_ADDR_VAR 0 5
37757: PUSH
37758: LD_VAR 0 10
37762: PPUSH
37763: CALL_OW 251
37767: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37768: LD_ADDR_VAR 0 6
37772: PUSH
37773: LD_VAR 0 4
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PPUSH
37782: LD_INT 1
37784: PPUSH
37785: CALL_OW 12
37789: PLUS
37790: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37791: LD_ADDR_VAR 0 7
37795: PUSH
37796: LD_VAR 0 5
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PPUSH
37805: LD_INT 1
37807: PPUSH
37808: CALL_OW 12
37812: PLUS
37813: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37814: LD_VAR 0 6
37818: PPUSH
37819: LD_VAR 0 7
37823: PPUSH
37824: CALL_OW 488
37828: NOT
37829: IFFALSE 37851
// begin _x := x ;
37831: LD_ADDR_VAR 0 6
37835: PUSH
37836: LD_VAR 0 4
37840: ST_TO_ADDR
// _y := y ;
37841: LD_ADDR_VAR 0 7
37845: PUSH
37846: LD_VAR 0 5
37850: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37851: LD_ADDR_VAR 0 3
37855: PUSH
37856: LD_INT 1
37858: PPUSH
37859: LD_VAR 0 14
37863: PPUSH
37864: CALL_OW 12
37868: ST_TO_ADDR
// case i of 1 :
37869: LD_VAR 0 3
37873: PUSH
37874: LD_INT 1
37876: DOUBLE
37877: EQUAL
37878: IFTRUE 37882
37880: GO 37899
37882: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37883: LD_VAR 0 1
37887: PPUSH
37888: LD_VAR 0 10
37892: PPUSH
37893: CALL_OW 115
37897: GO 37960
37899: LD_INT 2
37901: DOUBLE
37902: EQUAL
37903: IFTRUE 37907
37905: GO 37929
37907: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37908: LD_VAR 0 1
37912: PPUSH
37913: LD_VAR 0 6
37917: PPUSH
37918: LD_VAR 0 7
37922: PPUSH
37923: CALL_OW 153
37927: GO 37960
37929: LD_INT 3
37931: DOUBLE
37932: EQUAL
37933: IFTRUE 37937
37935: GO 37959
37937: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37938: LD_VAR 0 1
37942: PPUSH
37943: LD_VAR 0 6
37947: PPUSH
37948: LD_VAR 0 7
37952: PPUSH
37953: CALL_OW 154
37957: GO 37960
37959: POP
// end ;
37960: LD_VAR 0 2
37964: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37965: LD_INT 0
37967: PPUSH
37968: PPUSH
37969: PPUSH
37970: PPUSH
37971: PPUSH
37972: PPUSH
// if not unit or not building then
37973: LD_VAR 0 1
37977: NOT
37978: PUSH
37979: LD_VAR 0 2
37983: NOT
37984: OR
37985: IFFALSE 37989
// exit ;
37987: GO 38147
// x := GetX ( building ) ;
37989: LD_ADDR_VAR 0 5
37993: PUSH
37994: LD_VAR 0 2
37998: PPUSH
37999: CALL_OW 250
38003: ST_TO_ADDR
// y := GetY ( building ) ;
38004: LD_ADDR_VAR 0 6
38008: PUSH
38009: LD_VAR 0 2
38013: PPUSH
38014: CALL_OW 251
38018: ST_TO_ADDR
// for i = 0 to 5 do
38019: LD_ADDR_VAR 0 4
38023: PUSH
38024: DOUBLE
38025: LD_INT 0
38027: DEC
38028: ST_TO_ADDR
38029: LD_INT 5
38031: PUSH
38032: FOR_TO
38033: IFFALSE 38145
// begin _x := ShiftX ( x , i , 3 ) ;
38035: LD_ADDR_VAR 0 7
38039: PUSH
38040: LD_VAR 0 5
38044: PPUSH
38045: LD_VAR 0 4
38049: PPUSH
38050: LD_INT 3
38052: PPUSH
38053: CALL_OW 272
38057: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38058: LD_ADDR_VAR 0 8
38062: PUSH
38063: LD_VAR 0 6
38067: PPUSH
38068: LD_VAR 0 4
38072: PPUSH
38073: LD_INT 3
38075: PPUSH
38076: CALL_OW 273
38080: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38081: LD_VAR 0 7
38085: PPUSH
38086: LD_VAR 0 8
38090: PPUSH
38091: CALL_OW 488
38095: NOT
38096: IFFALSE 38100
// continue ;
38098: GO 38032
// if HexInfo ( _x , _y ) = 0 then
38100: LD_VAR 0 7
38104: PPUSH
38105: LD_VAR 0 8
38109: PPUSH
38110: CALL_OW 428
38114: PUSH
38115: LD_INT 0
38117: EQUAL
38118: IFFALSE 38143
// begin ComMoveXY ( unit , _x , _y ) ;
38120: LD_VAR 0 1
38124: PPUSH
38125: LD_VAR 0 7
38129: PPUSH
38130: LD_VAR 0 8
38134: PPUSH
38135: CALL_OW 111
// exit ;
38139: POP
38140: POP
38141: GO 38147
// end ; end ;
38143: GO 38032
38145: POP
38146: POP
// end ;
38147: LD_VAR 0 3
38151: RET
// export function ScanBase ( side , base_area ) ; begin
38152: LD_INT 0
38154: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38155: LD_ADDR_VAR 0 3
38159: PUSH
38160: LD_VAR 0 2
38164: PPUSH
38165: LD_INT 81
38167: PUSH
38168: LD_VAR 0 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PPUSH
38177: CALL_OW 70
38181: ST_TO_ADDR
// end ;
38182: LD_VAR 0 3
38186: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38187: LD_INT 0
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
// result := false ;
38193: LD_ADDR_VAR 0 2
38197: PUSH
38198: LD_INT 0
38200: ST_TO_ADDR
// side := GetSide ( unit ) ;
38201: LD_ADDR_VAR 0 3
38205: PUSH
38206: LD_VAR 0 1
38210: PPUSH
38211: CALL_OW 255
38215: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38216: LD_ADDR_VAR 0 4
38220: PUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: CALL_OW 248
38230: ST_TO_ADDR
// case nat of 1 :
38231: LD_VAR 0 4
38235: PUSH
38236: LD_INT 1
38238: DOUBLE
38239: EQUAL
38240: IFTRUE 38244
38242: GO 38255
38244: POP
// tech := tech_lassight ; 2 :
38245: LD_ADDR_VAR 0 5
38249: PUSH
38250: LD_INT 12
38252: ST_TO_ADDR
38253: GO 38294
38255: LD_INT 2
38257: DOUBLE
38258: EQUAL
38259: IFTRUE 38263
38261: GO 38274
38263: POP
// tech := tech_mortar ; 3 :
38264: LD_ADDR_VAR 0 5
38268: PUSH
38269: LD_INT 41
38271: ST_TO_ADDR
38272: GO 38294
38274: LD_INT 3
38276: DOUBLE
38277: EQUAL
38278: IFTRUE 38282
38280: GO 38293
38282: POP
// tech := tech_bazooka ; end ;
38283: LD_ADDR_VAR 0 5
38287: PUSH
38288: LD_INT 44
38290: ST_TO_ADDR
38291: GO 38294
38293: POP
// if Researched ( side , tech ) then
38294: LD_VAR 0 3
38298: PPUSH
38299: LD_VAR 0 5
38303: PPUSH
38304: CALL_OW 325
38308: IFFALSE 38335
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38310: LD_ADDR_VAR 0 2
38314: PUSH
38315: LD_INT 5
38317: PUSH
38318: LD_INT 8
38320: PUSH
38321: LD_INT 9
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: PUSH
38329: LD_VAR 0 4
38333: ARRAY
38334: ST_TO_ADDR
// end ;
38335: LD_VAR 0 2
38339: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38340: LD_INT 0
38342: PPUSH
38343: PPUSH
38344: PPUSH
// if not mines then
38345: LD_VAR 0 2
38349: NOT
38350: IFFALSE 38354
// exit ;
38352: GO 38498
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38354: LD_ADDR_VAR 0 5
38358: PUSH
38359: LD_INT 81
38361: PUSH
38362: LD_VAR 0 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: LD_INT 21
38376: PUSH
38377: LD_INT 3
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PPUSH
38392: CALL_OW 69
38396: ST_TO_ADDR
// for i in mines do
38397: LD_ADDR_VAR 0 4
38401: PUSH
38402: LD_VAR 0 2
38406: PUSH
38407: FOR_IN
38408: IFFALSE 38496
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38410: LD_VAR 0 4
38414: PUSH
38415: LD_INT 1
38417: ARRAY
38418: PPUSH
38419: LD_VAR 0 4
38423: PUSH
38424: LD_INT 2
38426: ARRAY
38427: PPUSH
38428: CALL_OW 458
38432: NOT
38433: IFFALSE 38437
// continue ;
38435: GO 38407
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38437: LD_VAR 0 4
38441: PUSH
38442: LD_INT 1
38444: ARRAY
38445: PPUSH
38446: LD_VAR 0 4
38450: PUSH
38451: LD_INT 2
38453: ARRAY
38454: PPUSH
38455: CALL_OW 428
38459: PUSH
38460: LD_VAR 0 5
38464: IN
38465: IFFALSE 38494
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38467: LD_VAR 0 4
38471: PUSH
38472: LD_INT 1
38474: ARRAY
38475: PPUSH
38476: LD_VAR 0 4
38480: PUSH
38481: LD_INT 2
38483: ARRAY
38484: PPUSH
38485: LD_VAR 0 1
38489: PPUSH
38490: CALL_OW 456
// end ;
38494: GO 38407
38496: POP
38497: POP
// end ;
38498: LD_VAR 0 3
38502: RET
// export function Count ( array ) ; begin
38503: LD_INT 0
38505: PPUSH
// result := array + 0 ;
38506: LD_ADDR_VAR 0 2
38510: PUSH
38511: LD_VAR 0 1
38515: PUSH
38516: LD_INT 0
38518: PLUS
38519: ST_TO_ADDR
// end ;
38520: LD_VAR 0 2
38524: RET
// export function IsEmpty ( building ) ; begin
38525: LD_INT 0
38527: PPUSH
// if not building then
38528: LD_VAR 0 1
38532: NOT
38533: IFFALSE 38537
// exit ;
38535: GO 38580
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38537: LD_ADDR_VAR 0 2
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: LD_INT 22
38549: PUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: CALL_OW 255
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 58
38566: PUSH
38567: EMPTY
38568: LIST
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PPUSH
38574: CALL_OW 69
38578: IN
38579: ST_TO_ADDR
// end ;
38580: LD_VAR 0 2
38584: RET
// export function IsNotFull ( building ) ; var places ; begin
38585: LD_INT 0
38587: PPUSH
38588: PPUSH
// if not building then
38589: LD_VAR 0 1
38593: NOT
38594: IFFALSE 38598
// exit ;
38596: GO 38626
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38598: LD_ADDR_VAR 0 2
38602: PUSH
38603: LD_VAR 0 1
38607: PPUSH
38608: LD_INT 3
38610: PUSH
38611: LD_INT 62
38613: PUSH
38614: EMPTY
38615: LIST
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PPUSH
38621: CALL_OW 72
38625: ST_TO_ADDR
// end ;
38626: LD_VAR 0 2
38630: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38631: LD_INT 0
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
// tmp := [ ] ;
38637: LD_ADDR_VAR 0 3
38641: PUSH
38642: EMPTY
38643: ST_TO_ADDR
// list := [ ] ;
38644: LD_ADDR_VAR 0 5
38648: PUSH
38649: EMPTY
38650: ST_TO_ADDR
// for i = 16 to 25 do
38651: LD_ADDR_VAR 0 4
38655: PUSH
38656: DOUBLE
38657: LD_INT 16
38659: DEC
38660: ST_TO_ADDR
38661: LD_INT 25
38663: PUSH
38664: FOR_TO
38665: IFFALSE 38738
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38667: LD_ADDR_VAR 0 3
38671: PUSH
38672: LD_VAR 0 3
38676: PUSH
38677: LD_INT 22
38679: PUSH
38680: LD_VAR 0 1
38684: PPUSH
38685: CALL_OW 255
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 91
38696: PUSH
38697: LD_VAR 0 1
38701: PUSH
38702: LD_INT 6
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 30
38712: PUSH
38713: LD_VAR 0 4
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: PPUSH
38730: CALL_OW 69
38734: ADD
38735: ST_TO_ADDR
38736: GO 38664
38738: POP
38739: POP
// for i = 1 to tmp do
38740: LD_ADDR_VAR 0 4
38744: PUSH
38745: DOUBLE
38746: LD_INT 1
38748: DEC
38749: ST_TO_ADDR
38750: LD_VAR 0 3
38754: PUSH
38755: FOR_TO
38756: IFFALSE 38844
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38758: LD_ADDR_VAR 0 5
38762: PUSH
38763: LD_VAR 0 5
38767: PUSH
38768: LD_VAR 0 3
38772: PUSH
38773: LD_VAR 0 4
38777: ARRAY
38778: PPUSH
38779: CALL_OW 266
38783: PUSH
38784: LD_VAR 0 3
38788: PUSH
38789: LD_VAR 0 4
38793: ARRAY
38794: PPUSH
38795: CALL_OW 250
38799: PUSH
38800: LD_VAR 0 3
38804: PUSH
38805: LD_VAR 0 4
38809: ARRAY
38810: PPUSH
38811: CALL_OW 251
38815: PUSH
38816: LD_VAR 0 3
38820: PUSH
38821: LD_VAR 0 4
38825: ARRAY
38826: PPUSH
38827: CALL_OW 254
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: PUSH
38838: EMPTY
38839: LIST
38840: ADD
38841: ST_TO_ADDR
38842: GO 38755
38844: POP
38845: POP
// result := list ;
38846: LD_ADDR_VAR 0 2
38850: PUSH
38851: LD_VAR 0 5
38855: ST_TO_ADDR
// end ;
38856: LD_VAR 0 2
38860: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38861: LD_INT 0
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
// if not factory then
38870: LD_VAR 0 1
38874: NOT
38875: IFFALSE 38879
// exit ;
38877: GO 39472
// if control = control_apeman then
38879: LD_VAR 0 4
38883: PUSH
38884: LD_INT 5
38886: EQUAL
38887: IFFALSE 38996
// begin tmp := UnitsInside ( factory ) ;
38889: LD_ADDR_VAR 0 8
38893: PUSH
38894: LD_VAR 0 1
38898: PPUSH
38899: CALL_OW 313
38903: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38904: LD_VAR 0 8
38908: PPUSH
38909: LD_INT 25
38911: PUSH
38912: LD_INT 12
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PPUSH
38919: CALL_OW 72
38923: NOT
38924: IFFALSE 38934
// control := control_manual ;
38926: LD_ADDR_VAR 0 4
38930: PUSH
38931: LD_INT 1
38933: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38934: LD_ADDR_VAR 0 8
38938: PUSH
38939: LD_VAR 0 1
38943: PPUSH
38944: CALL 38631 0 1
38948: ST_TO_ADDR
// if tmp then
38949: LD_VAR 0 8
38953: IFFALSE 38996
// begin for i in tmp do
38955: LD_ADDR_VAR 0 7
38959: PUSH
38960: LD_VAR 0 8
38964: PUSH
38965: FOR_IN
38966: IFFALSE 38994
// if i [ 1 ] = b_ext_radio then
38968: LD_VAR 0 7
38972: PUSH
38973: LD_INT 1
38975: ARRAY
38976: PUSH
38977: LD_INT 22
38979: EQUAL
38980: IFFALSE 38992
// begin control := control_remote ;
38982: LD_ADDR_VAR 0 4
38986: PUSH
38987: LD_INT 2
38989: ST_TO_ADDR
// break ;
38990: GO 38994
// end ;
38992: GO 38965
38994: POP
38995: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38996: LD_VAR 0 1
39000: PPUSH
39001: LD_VAR 0 2
39005: PPUSH
39006: LD_VAR 0 3
39010: PPUSH
39011: LD_VAR 0 4
39015: PPUSH
39016: LD_VAR 0 5
39020: PPUSH
39021: CALL_OW 448
39025: IFFALSE 39060
// begin result := [ chassis , engine , control , weapon ] ;
39027: LD_ADDR_VAR 0 6
39031: PUSH
39032: LD_VAR 0 2
39036: PUSH
39037: LD_VAR 0 3
39041: PUSH
39042: LD_VAR 0 4
39046: PUSH
39047: LD_VAR 0 5
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: ST_TO_ADDR
// exit ;
39058: GO 39472
// end ; _chassis := AvailableChassisList ( factory ) ;
39060: LD_ADDR_VAR 0 9
39064: PUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 475
39074: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39075: LD_ADDR_VAR 0 11
39079: PUSH
39080: LD_VAR 0 1
39084: PPUSH
39085: CALL_OW 476
39089: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39090: LD_ADDR_VAR 0 12
39094: PUSH
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 477
39104: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39105: LD_ADDR_VAR 0 10
39109: PUSH
39110: LD_VAR 0 1
39114: PPUSH
39115: CALL_OW 478
39119: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39120: LD_VAR 0 9
39124: NOT
39125: PUSH
39126: LD_VAR 0 11
39130: NOT
39131: OR
39132: PUSH
39133: LD_VAR 0 12
39137: NOT
39138: OR
39139: PUSH
39140: LD_VAR 0 10
39144: NOT
39145: OR
39146: IFFALSE 39181
// begin result := [ chassis , engine , control , weapon ] ;
39148: LD_ADDR_VAR 0 6
39152: PUSH
39153: LD_VAR 0 2
39157: PUSH
39158: LD_VAR 0 3
39162: PUSH
39163: LD_VAR 0 4
39167: PUSH
39168: LD_VAR 0 5
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: ST_TO_ADDR
// exit ;
39179: GO 39472
// end ; if not chassis in _chassis then
39181: LD_VAR 0 2
39185: PUSH
39186: LD_VAR 0 9
39190: IN
39191: NOT
39192: IFFALSE 39218
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39194: LD_ADDR_VAR 0 2
39198: PUSH
39199: LD_VAR 0 9
39203: PUSH
39204: LD_INT 1
39206: PPUSH
39207: LD_VAR 0 9
39211: PPUSH
39212: CALL_OW 12
39216: ARRAY
39217: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39218: LD_VAR 0 2
39222: PPUSH
39223: LD_VAR 0 3
39227: PPUSH
39228: CALL 39477 0 2
39232: NOT
39233: IFFALSE 39292
// repeat engine := _engine [ 1 ] ;
39235: LD_ADDR_VAR 0 3
39239: PUSH
39240: LD_VAR 0 11
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39249: LD_ADDR_VAR 0 11
39253: PUSH
39254: LD_VAR 0 11
39258: PPUSH
39259: LD_INT 1
39261: PPUSH
39262: CALL_OW 3
39266: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39267: LD_VAR 0 2
39271: PPUSH
39272: LD_VAR 0 3
39276: PPUSH
39277: CALL 39477 0 2
39281: PUSH
39282: LD_VAR 0 11
39286: PUSH
39287: EMPTY
39288: EQUAL
39289: OR
39290: IFFALSE 39235
// if not control in _control then
39292: LD_VAR 0 4
39296: PUSH
39297: LD_VAR 0 12
39301: IN
39302: NOT
39303: IFFALSE 39329
// control := _control [ rand ( 1 , _control ) ] ;
39305: LD_ADDR_VAR 0 4
39309: PUSH
39310: LD_VAR 0 12
39314: PUSH
39315: LD_INT 1
39317: PPUSH
39318: LD_VAR 0 12
39322: PPUSH
39323: CALL_OW 12
39327: ARRAY
39328: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39329: LD_VAR 0 2
39333: PPUSH
39334: LD_VAR 0 5
39338: PPUSH
39339: CALL 39697 0 2
39343: NOT
39344: IFFALSE 39403
// repeat weapon := _weapon [ 1 ] ;
39346: LD_ADDR_VAR 0 5
39350: PUSH
39351: LD_VAR 0 10
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39360: LD_ADDR_VAR 0 10
39364: PUSH
39365: LD_VAR 0 10
39369: PPUSH
39370: LD_INT 1
39372: PPUSH
39373: CALL_OW 3
39377: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39378: LD_VAR 0 2
39382: PPUSH
39383: LD_VAR 0 5
39387: PPUSH
39388: CALL 39697 0 2
39392: PUSH
39393: LD_VAR 0 10
39397: PUSH
39398: EMPTY
39399: EQUAL
39400: OR
39401: IFFALSE 39346
// result := [ ] ;
39403: LD_ADDR_VAR 0 6
39407: PUSH
39408: EMPTY
39409: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39410: LD_VAR 0 1
39414: PPUSH
39415: LD_VAR 0 2
39419: PPUSH
39420: LD_VAR 0 3
39424: PPUSH
39425: LD_VAR 0 4
39429: PPUSH
39430: LD_VAR 0 5
39434: PPUSH
39435: CALL_OW 448
39439: IFFALSE 39472
// result := [ chassis , engine , control , weapon ] ;
39441: LD_ADDR_VAR 0 6
39445: PUSH
39446: LD_VAR 0 2
39450: PUSH
39451: LD_VAR 0 3
39455: PUSH
39456: LD_VAR 0 4
39460: PUSH
39461: LD_VAR 0 5
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: ST_TO_ADDR
// end ;
39472: LD_VAR 0 6
39476: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39477: LD_INT 0
39479: PPUSH
// if not chassis or not engine then
39480: LD_VAR 0 1
39484: NOT
39485: PUSH
39486: LD_VAR 0 2
39490: NOT
39491: OR
39492: IFFALSE 39496
// exit ;
39494: GO 39692
// case engine of engine_solar :
39496: LD_VAR 0 2
39500: PUSH
39501: LD_INT 2
39503: DOUBLE
39504: EQUAL
39505: IFTRUE 39509
39507: GO 39547
39509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39510: LD_ADDR_VAR 0 3
39514: PUSH
39515: LD_INT 11
39517: PUSH
39518: LD_INT 12
39520: PUSH
39521: LD_INT 13
39523: PUSH
39524: LD_INT 14
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 3
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: ST_TO_ADDR
39545: GO 39676
39547: LD_INT 1
39549: DOUBLE
39550: EQUAL
39551: IFTRUE 39555
39553: GO 39617
39555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39556: LD_ADDR_VAR 0 3
39560: PUSH
39561: LD_INT 11
39563: PUSH
39564: LD_INT 12
39566: PUSH
39567: LD_INT 13
39569: PUSH
39570: LD_INT 14
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: LD_INT 4
39584: PUSH
39585: LD_INT 5
39587: PUSH
39588: LD_INT 21
39590: PUSH
39591: LD_INT 23
39593: PUSH
39594: LD_INT 22
39596: PUSH
39597: LD_INT 24
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: ST_TO_ADDR
39615: GO 39676
39617: LD_INT 3
39619: DOUBLE
39620: EQUAL
39621: IFTRUE 39625
39623: GO 39675
39625: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39626: LD_ADDR_VAR 0 3
39630: PUSH
39631: LD_INT 13
39633: PUSH
39634: LD_INT 14
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: LD_INT 3
39642: PUSH
39643: LD_INT 4
39645: PUSH
39646: LD_INT 5
39648: PUSH
39649: LD_INT 21
39651: PUSH
39652: LD_INT 22
39654: PUSH
39655: LD_INT 23
39657: PUSH
39658: LD_INT 24
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: ST_TO_ADDR
39673: GO 39676
39675: POP
// result := ( chassis in result ) ;
39676: LD_ADDR_VAR 0 3
39680: PUSH
39681: LD_VAR 0 1
39685: PUSH
39686: LD_VAR 0 3
39690: IN
39691: ST_TO_ADDR
// end ;
39692: LD_VAR 0 3
39696: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39697: LD_INT 0
39699: PPUSH
// if not chassis or not weapon then
39700: LD_VAR 0 1
39704: NOT
39705: PUSH
39706: LD_VAR 0 2
39710: NOT
39711: OR
39712: IFFALSE 39716
// exit ;
39714: GO 40776
// case weapon of us_machine_gun :
39716: LD_VAR 0 2
39720: PUSH
39721: LD_INT 2
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 39759
39729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39730: LD_ADDR_VAR 0 3
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 3
39743: PUSH
39744: LD_INT 4
39746: PUSH
39747: LD_INT 5
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: ST_TO_ADDR
39757: GO 40760
39759: LD_INT 3
39761: DOUBLE
39762: EQUAL
39763: IFTRUE 39767
39765: GO 39797
39767: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39768: LD_ADDR_VAR 0 3
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: LD_INT 3
39781: PUSH
39782: LD_INT 4
39784: PUSH
39785: LD_INT 5
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
39795: GO 40760
39797: LD_INT 11
39799: DOUBLE
39800: EQUAL
39801: IFTRUE 39805
39803: GO 39835
39805: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39806: LD_ADDR_VAR 0 3
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 2
39816: PUSH
39817: LD_INT 3
39819: PUSH
39820: LD_INT 4
39822: PUSH
39823: LD_INT 5
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: ST_TO_ADDR
39833: GO 40760
39835: LD_INT 4
39837: DOUBLE
39838: EQUAL
39839: IFTRUE 39843
39841: GO 39869
39843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39844: LD_ADDR_VAR 0 3
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: LD_INT 3
39854: PUSH
39855: LD_INT 4
39857: PUSH
39858: LD_INT 5
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
39867: GO 40760
39869: LD_INT 5
39871: DOUBLE
39872: EQUAL
39873: IFTRUE 39877
39875: GO 39903
39877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39878: LD_ADDR_VAR 0 3
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: LD_INT 3
39888: PUSH
39889: LD_INT 4
39891: PUSH
39892: LD_INT 5
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
39901: GO 40760
39903: LD_INT 9
39905: DOUBLE
39906: EQUAL
39907: IFTRUE 39911
39909: GO 39937
39911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39912: LD_ADDR_VAR 0 3
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 3
39922: PUSH
39923: LD_INT 4
39925: PUSH
39926: LD_INT 5
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: ST_TO_ADDR
39935: GO 40760
39937: LD_INT 7
39939: DOUBLE
39940: EQUAL
39941: IFTRUE 39945
39943: GO 39971
39945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39946: LD_ADDR_VAR 0 3
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: LD_INT 3
39956: PUSH
39957: LD_INT 4
39959: PUSH
39960: LD_INT 5
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: ST_TO_ADDR
39969: GO 40760
39971: LD_INT 12
39973: DOUBLE
39974: EQUAL
39975: IFTRUE 39979
39977: GO 40005
39979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39980: LD_ADDR_VAR 0 3
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: LD_INT 4
39993: PUSH
39994: LD_INT 5
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: ST_TO_ADDR
40003: GO 40760
40005: LD_INT 13
40007: DOUBLE
40008: EQUAL
40009: IFTRUE 40013
40011: GO 40039
40013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40014: LD_ADDR_VAR 0 3
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 3
40024: PUSH
40025: LD_INT 4
40027: PUSH
40028: LD_INT 5
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
40037: GO 40760
40039: LD_INT 14
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40047
40045: GO 40065
40047: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 4
40055: PUSH
40056: LD_INT 5
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: ST_TO_ADDR
40063: GO 40760
40065: LD_INT 6
40067: DOUBLE
40068: EQUAL
40069: IFTRUE 40073
40071: GO 40091
40073: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40074: LD_ADDR_VAR 0 3
40078: PUSH
40079: LD_INT 4
40081: PUSH
40082: LD_INT 5
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: ST_TO_ADDR
40089: GO 40760
40091: LD_INT 10
40093: DOUBLE
40094: EQUAL
40095: IFTRUE 40099
40097: GO 40117
40099: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40100: LD_ADDR_VAR 0 3
40104: PUSH
40105: LD_INT 4
40107: PUSH
40108: LD_INT 5
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: ST_TO_ADDR
40115: GO 40760
40117: LD_INT 22
40119: DOUBLE
40120: EQUAL
40121: IFTRUE 40125
40123: GO 40151
40125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40126: LD_ADDR_VAR 0 3
40130: PUSH
40131: LD_INT 11
40133: PUSH
40134: LD_INT 12
40136: PUSH
40137: LD_INT 13
40139: PUSH
40140: LD_INT 14
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: ST_TO_ADDR
40149: GO 40760
40151: LD_INT 23
40153: DOUBLE
40154: EQUAL
40155: IFTRUE 40159
40157: GO 40185
40159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40160: LD_ADDR_VAR 0 3
40164: PUSH
40165: LD_INT 11
40167: PUSH
40168: LD_INT 12
40170: PUSH
40171: LD_INT 13
40173: PUSH
40174: LD_INT 14
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
40183: GO 40760
40185: LD_INT 24
40187: DOUBLE
40188: EQUAL
40189: IFTRUE 40193
40191: GO 40219
40193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40194: LD_ADDR_VAR 0 3
40198: PUSH
40199: LD_INT 11
40201: PUSH
40202: LD_INT 12
40204: PUSH
40205: LD_INT 13
40207: PUSH
40208: LD_INT 14
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: ST_TO_ADDR
40217: GO 40760
40219: LD_INT 30
40221: DOUBLE
40222: EQUAL
40223: IFTRUE 40227
40225: GO 40253
40227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40228: LD_ADDR_VAR 0 3
40232: PUSH
40233: LD_INT 11
40235: PUSH
40236: LD_INT 12
40238: PUSH
40239: LD_INT 13
40241: PUSH
40242: LD_INT 14
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
40251: GO 40760
40253: LD_INT 25
40255: DOUBLE
40256: EQUAL
40257: IFTRUE 40261
40259: GO 40279
40261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40262: LD_ADDR_VAR 0 3
40266: PUSH
40267: LD_INT 13
40269: PUSH
40270: LD_INT 14
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: ST_TO_ADDR
40277: GO 40760
40279: LD_INT 27
40281: DOUBLE
40282: EQUAL
40283: IFTRUE 40287
40285: GO 40305
40287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40288: LD_ADDR_VAR 0 3
40292: PUSH
40293: LD_INT 13
40295: PUSH
40296: LD_INT 14
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: ST_TO_ADDR
40303: GO 40760
40305: LD_INT 92
40307: DOUBLE
40308: EQUAL
40309: IFTRUE 40313
40311: GO 40339
40313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40314: LD_ADDR_VAR 0 3
40318: PUSH
40319: LD_INT 11
40321: PUSH
40322: LD_INT 12
40324: PUSH
40325: LD_INT 13
40327: PUSH
40328: LD_INT 14
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: ST_TO_ADDR
40337: GO 40760
40339: LD_INT 28
40341: DOUBLE
40342: EQUAL
40343: IFTRUE 40347
40345: GO 40365
40347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40348: LD_ADDR_VAR 0 3
40352: PUSH
40353: LD_INT 13
40355: PUSH
40356: LD_INT 14
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: ST_TO_ADDR
40363: GO 40760
40365: LD_INT 29
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40373
40371: GO 40391
40373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40374: LD_ADDR_VAR 0 3
40378: PUSH
40379: LD_INT 13
40381: PUSH
40382: LD_INT 14
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: ST_TO_ADDR
40389: GO 40760
40391: LD_INT 31
40393: DOUBLE
40394: EQUAL
40395: IFTRUE 40399
40397: GO 40417
40399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40400: LD_ADDR_VAR 0 3
40404: PUSH
40405: LD_INT 13
40407: PUSH
40408: LD_INT 14
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: ST_TO_ADDR
40415: GO 40760
40417: LD_INT 26
40419: DOUBLE
40420: EQUAL
40421: IFTRUE 40425
40423: GO 40443
40425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40426: LD_ADDR_VAR 0 3
40430: PUSH
40431: LD_INT 13
40433: PUSH
40434: LD_INT 14
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: ST_TO_ADDR
40441: GO 40760
40443: LD_INT 42
40445: DOUBLE
40446: EQUAL
40447: IFTRUE 40451
40449: GO 40477
40451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40452: LD_ADDR_VAR 0 3
40456: PUSH
40457: LD_INT 21
40459: PUSH
40460: LD_INT 22
40462: PUSH
40463: LD_INT 23
40465: PUSH
40466: LD_INT 24
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: ST_TO_ADDR
40475: GO 40760
40477: LD_INT 43
40479: DOUBLE
40480: EQUAL
40481: IFTRUE 40485
40483: GO 40511
40485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40486: LD_ADDR_VAR 0 3
40490: PUSH
40491: LD_INT 21
40493: PUSH
40494: LD_INT 22
40496: PUSH
40497: LD_INT 23
40499: PUSH
40500: LD_INT 24
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: ST_TO_ADDR
40509: GO 40760
40511: LD_INT 44
40513: DOUBLE
40514: EQUAL
40515: IFTRUE 40519
40517: GO 40545
40519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40520: LD_ADDR_VAR 0 3
40524: PUSH
40525: LD_INT 21
40527: PUSH
40528: LD_INT 22
40530: PUSH
40531: LD_INT 23
40533: PUSH
40534: LD_INT 24
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: ST_TO_ADDR
40543: GO 40760
40545: LD_INT 45
40547: DOUBLE
40548: EQUAL
40549: IFTRUE 40553
40551: GO 40579
40553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40554: LD_ADDR_VAR 0 3
40558: PUSH
40559: LD_INT 21
40561: PUSH
40562: LD_INT 22
40564: PUSH
40565: LD_INT 23
40567: PUSH
40568: LD_INT 24
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: ST_TO_ADDR
40577: GO 40760
40579: LD_INT 49
40581: DOUBLE
40582: EQUAL
40583: IFTRUE 40587
40585: GO 40613
40587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40588: LD_ADDR_VAR 0 3
40592: PUSH
40593: LD_INT 21
40595: PUSH
40596: LD_INT 22
40598: PUSH
40599: LD_INT 23
40601: PUSH
40602: LD_INT 24
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: ST_TO_ADDR
40611: GO 40760
40613: LD_INT 51
40615: DOUBLE
40616: EQUAL
40617: IFTRUE 40621
40619: GO 40647
40621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40622: LD_ADDR_VAR 0 3
40626: PUSH
40627: LD_INT 21
40629: PUSH
40630: LD_INT 22
40632: PUSH
40633: LD_INT 23
40635: PUSH
40636: LD_INT 24
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: ST_TO_ADDR
40645: GO 40760
40647: LD_INT 52
40649: DOUBLE
40650: EQUAL
40651: IFTRUE 40655
40653: GO 40681
40655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_INT 21
40663: PUSH
40664: LD_INT 22
40666: PUSH
40667: LD_INT 23
40669: PUSH
40670: LD_INT 24
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: ST_TO_ADDR
40679: GO 40760
40681: LD_INT 53
40683: DOUBLE
40684: EQUAL
40685: IFTRUE 40689
40687: GO 40707
40689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40690: LD_ADDR_VAR 0 3
40694: PUSH
40695: LD_INT 23
40697: PUSH
40698: LD_INT 24
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: ST_TO_ADDR
40705: GO 40760
40707: LD_INT 46
40709: DOUBLE
40710: EQUAL
40711: IFTRUE 40715
40713: GO 40733
40715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40716: LD_ADDR_VAR 0 3
40720: PUSH
40721: LD_INT 23
40723: PUSH
40724: LD_INT 24
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: ST_TO_ADDR
40731: GO 40760
40733: LD_INT 47
40735: DOUBLE
40736: EQUAL
40737: IFTRUE 40741
40739: GO 40759
40741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40742: LD_ADDR_VAR 0 3
40746: PUSH
40747: LD_INT 23
40749: PUSH
40750: LD_INT 24
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: ST_TO_ADDR
40757: GO 40760
40759: POP
// result := ( chassis in result ) ;
40760: LD_ADDR_VAR 0 3
40764: PUSH
40765: LD_VAR 0 1
40769: PUSH
40770: LD_VAR 0 3
40774: IN
40775: ST_TO_ADDR
// end ;
40776: LD_VAR 0 3
40780: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40781: LD_INT 0
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
// result := array ;
40790: LD_ADDR_VAR 0 5
40794: PUSH
40795: LD_VAR 0 1
40799: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40800: LD_VAR 0 1
40804: NOT
40805: PUSH
40806: LD_VAR 0 2
40810: NOT
40811: OR
40812: PUSH
40813: LD_VAR 0 3
40817: NOT
40818: OR
40819: PUSH
40820: LD_VAR 0 2
40824: PUSH
40825: LD_VAR 0 1
40829: GREATER
40830: OR
40831: PUSH
40832: LD_VAR 0 3
40836: PUSH
40837: LD_VAR 0 1
40841: GREATER
40842: OR
40843: IFFALSE 40847
// exit ;
40845: GO 41143
// if direction then
40847: LD_VAR 0 4
40851: IFFALSE 40915
// begin d := 1 ;
40853: LD_ADDR_VAR 0 9
40857: PUSH
40858: LD_INT 1
40860: ST_TO_ADDR
// if i_from > i_to then
40861: LD_VAR 0 2
40865: PUSH
40866: LD_VAR 0 3
40870: GREATER
40871: IFFALSE 40897
// length := ( array - i_from ) + i_to else
40873: LD_ADDR_VAR 0 11
40877: PUSH
40878: LD_VAR 0 1
40882: PUSH
40883: LD_VAR 0 2
40887: MINUS
40888: PUSH
40889: LD_VAR 0 3
40893: PLUS
40894: ST_TO_ADDR
40895: GO 40913
// length := i_to - i_from ;
40897: LD_ADDR_VAR 0 11
40901: PUSH
40902: LD_VAR 0 3
40906: PUSH
40907: LD_VAR 0 2
40911: MINUS
40912: ST_TO_ADDR
// end else
40913: GO 40976
// begin d := - 1 ;
40915: LD_ADDR_VAR 0 9
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: ST_TO_ADDR
// if i_from > i_to then
40924: LD_VAR 0 2
40928: PUSH
40929: LD_VAR 0 3
40933: GREATER
40934: IFFALSE 40954
// length := i_from - i_to else
40936: LD_ADDR_VAR 0 11
40940: PUSH
40941: LD_VAR 0 2
40945: PUSH
40946: LD_VAR 0 3
40950: MINUS
40951: ST_TO_ADDR
40952: GO 40976
// length := ( array - i_to ) + i_from ;
40954: LD_ADDR_VAR 0 11
40958: PUSH
40959: LD_VAR 0 1
40963: PUSH
40964: LD_VAR 0 3
40968: MINUS
40969: PUSH
40970: LD_VAR 0 2
40974: PLUS
40975: ST_TO_ADDR
// end ; if not length then
40976: LD_VAR 0 11
40980: NOT
40981: IFFALSE 40985
// exit ;
40983: GO 41143
// tmp := array ;
40985: LD_ADDR_VAR 0 10
40989: PUSH
40990: LD_VAR 0 1
40994: ST_TO_ADDR
// for i = 1 to length do
40995: LD_ADDR_VAR 0 6
40999: PUSH
41000: DOUBLE
41001: LD_INT 1
41003: DEC
41004: ST_TO_ADDR
41005: LD_VAR 0 11
41009: PUSH
41010: FOR_TO
41011: IFFALSE 41131
// begin for j = 1 to array do
41013: LD_ADDR_VAR 0 7
41017: PUSH
41018: DOUBLE
41019: LD_INT 1
41021: DEC
41022: ST_TO_ADDR
41023: LD_VAR 0 1
41027: PUSH
41028: FOR_TO
41029: IFFALSE 41117
// begin k := j + d ;
41031: LD_ADDR_VAR 0 8
41035: PUSH
41036: LD_VAR 0 7
41040: PUSH
41041: LD_VAR 0 9
41045: PLUS
41046: ST_TO_ADDR
// if k > array then
41047: LD_VAR 0 8
41051: PUSH
41052: LD_VAR 0 1
41056: GREATER
41057: IFFALSE 41067
// k := 1 ;
41059: LD_ADDR_VAR 0 8
41063: PUSH
41064: LD_INT 1
41066: ST_TO_ADDR
// if not k then
41067: LD_VAR 0 8
41071: NOT
41072: IFFALSE 41084
// k := array ;
41074: LD_ADDR_VAR 0 8
41078: PUSH
41079: LD_VAR 0 1
41083: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41084: LD_ADDR_VAR 0 10
41088: PUSH
41089: LD_VAR 0 10
41093: PPUSH
41094: LD_VAR 0 8
41098: PPUSH
41099: LD_VAR 0 1
41103: PUSH
41104: LD_VAR 0 7
41108: ARRAY
41109: PPUSH
41110: CALL_OW 1
41114: ST_TO_ADDR
// end ;
41115: GO 41028
41117: POP
41118: POP
// array := tmp ;
41119: LD_ADDR_VAR 0 1
41123: PUSH
41124: LD_VAR 0 10
41128: ST_TO_ADDR
// end ;
41129: GO 41010
41131: POP
41132: POP
// result := array ;
41133: LD_ADDR_VAR 0 5
41137: PUSH
41138: LD_VAR 0 1
41142: ST_TO_ADDR
// end ;
41143: LD_VAR 0 5
41147: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41148: LD_INT 0
41150: PPUSH
41151: PPUSH
// result := 0 ;
41152: LD_ADDR_VAR 0 3
41156: PUSH
41157: LD_INT 0
41159: ST_TO_ADDR
// if not array or not value in array then
41160: LD_VAR 0 1
41164: NOT
41165: PUSH
41166: LD_VAR 0 2
41170: PUSH
41171: LD_VAR 0 1
41175: IN
41176: NOT
41177: OR
41178: IFFALSE 41182
// exit ;
41180: GO 41236
// for i = 1 to array do
41182: LD_ADDR_VAR 0 4
41186: PUSH
41187: DOUBLE
41188: LD_INT 1
41190: DEC
41191: ST_TO_ADDR
41192: LD_VAR 0 1
41196: PUSH
41197: FOR_TO
41198: IFFALSE 41234
// if value = array [ i ] then
41200: LD_VAR 0 2
41204: PUSH
41205: LD_VAR 0 1
41209: PUSH
41210: LD_VAR 0 4
41214: ARRAY
41215: EQUAL
41216: IFFALSE 41232
// begin result := i ;
41218: LD_ADDR_VAR 0 3
41222: PUSH
41223: LD_VAR 0 4
41227: ST_TO_ADDR
// exit ;
41228: POP
41229: POP
41230: GO 41236
// end ;
41232: GO 41197
41234: POP
41235: POP
// end ;
41236: LD_VAR 0 3
41240: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41241: LD_INT 0
41243: PPUSH
// vc_chassis := chassis ;
41244: LD_ADDR_OWVAR 37
41248: PUSH
41249: LD_VAR 0 1
41253: ST_TO_ADDR
// vc_engine := engine ;
41254: LD_ADDR_OWVAR 39
41258: PUSH
41259: LD_VAR 0 2
41263: ST_TO_ADDR
// vc_control := control ;
41264: LD_ADDR_OWVAR 38
41268: PUSH
41269: LD_VAR 0 3
41273: ST_TO_ADDR
// vc_weapon := weapon ;
41274: LD_ADDR_OWVAR 40
41278: PUSH
41279: LD_VAR 0 4
41283: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41284: LD_ADDR_OWVAR 41
41288: PUSH
41289: LD_VAR 0 5
41293: ST_TO_ADDR
// end ;
41294: LD_VAR 0 6
41298: RET
// export function WantPlant ( unit ) ; var task ; begin
41299: LD_INT 0
41301: PPUSH
41302: PPUSH
// result := false ;
41303: LD_ADDR_VAR 0 2
41307: PUSH
41308: LD_INT 0
41310: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41311: LD_ADDR_VAR 0 3
41315: PUSH
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 437
41325: ST_TO_ADDR
// if task then
41326: LD_VAR 0 3
41330: IFFALSE 41358
// if task [ 1 ] [ 1 ] = p then
41332: LD_VAR 0 3
41336: PUSH
41337: LD_INT 1
41339: ARRAY
41340: PUSH
41341: LD_INT 1
41343: ARRAY
41344: PUSH
41345: LD_STRING p
41347: EQUAL
41348: IFFALSE 41358
// result := true ;
41350: LD_ADDR_VAR 0 2
41354: PUSH
41355: LD_INT 1
41357: ST_TO_ADDR
// end ;
41358: LD_VAR 0 2
41362: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41363: LD_INT 0
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
// if pos < 1 then
41369: LD_VAR 0 2
41373: PUSH
41374: LD_INT 1
41376: LESS
41377: IFFALSE 41381
// exit ;
41379: GO 41684
// if pos = 1 then
41381: LD_VAR 0 2
41385: PUSH
41386: LD_INT 1
41388: EQUAL
41389: IFFALSE 41422
// result := Replace ( arr , pos [ 1 ] , value ) else
41391: LD_ADDR_VAR 0 4
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: LD_VAR 0 2
41405: PUSH
41406: LD_INT 1
41408: ARRAY
41409: PPUSH
41410: LD_VAR 0 3
41414: PPUSH
41415: CALL_OW 1
41419: ST_TO_ADDR
41420: GO 41684
// begin tmp := arr ;
41422: LD_ADDR_VAR 0 6
41426: PUSH
41427: LD_VAR 0 1
41431: ST_TO_ADDR
// s_arr := [ tmp ] ;
41432: LD_ADDR_VAR 0 7
41436: PUSH
41437: LD_VAR 0 6
41441: PUSH
41442: EMPTY
41443: LIST
41444: ST_TO_ADDR
// for i = 1 to pos - 1 do
41445: LD_ADDR_VAR 0 5
41449: PUSH
41450: DOUBLE
41451: LD_INT 1
41453: DEC
41454: ST_TO_ADDR
41455: LD_VAR 0 2
41459: PUSH
41460: LD_INT 1
41462: MINUS
41463: PUSH
41464: FOR_TO
41465: IFFALSE 41510
// begin tmp := tmp [ pos [ i ] ] ;
41467: LD_ADDR_VAR 0 6
41471: PUSH
41472: LD_VAR 0 6
41476: PUSH
41477: LD_VAR 0 2
41481: PUSH
41482: LD_VAR 0 5
41486: ARRAY
41487: ARRAY
41488: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41489: LD_ADDR_VAR 0 7
41493: PUSH
41494: LD_VAR 0 7
41498: PUSH
41499: LD_VAR 0 6
41503: PUSH
41504: EMPTY
41505: LIST
41506: ADD
41507: ST_TO_ADDR
// end ;
41508: GO 41464
41510: POP
41511: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41512: LD_ADDR_VAR 0 6
41516: PUSH
41517: LD_VAR 0 6
41521: PPUSH
41522: LD_VAR 0 2
41526: PUSH
41527: LD_VAR 0 2
41531: ARRAY
41532: PPUSH
41533: LD_VAR 0 3
41537: PPUSH
41538: CALL_OW 1
41542: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41543: LD_ADDR_VAR 0 7
41547: PUSH
41548: LD_VAR 0 7
41552: PPUSH
41553: LD_VAR 0 7
41557: PPUSH
41558: LD_VAR 0 6
41562: PPUSH
41563: CALL_OW 1
41567: ST_TO_ADDR
// for i = s_arr downto 2 do
41568: LD_ADDR_VAR 0 5
41572: PUSH
41573: DOUBLE
41574: LD_VAR 0 7
41578: INC
41579: ST_TO_ADDR
41580: LD_INT 2
41582: PUSH
41583: FOR_DOWNTO
41584: IFFALSE 41668
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41586: LD_ADDR_VAR 0 6
41590: PUSH
41591: LD_VAR 0 7
41595: PUSH
41596: LD_VAR 0 5
41600: PUSH
41601: LD_INT 1
41603: MINUS
41604: ARRAY
41605: PPUSH
41606: LD_VAR 0 2
41610: PUSH
41611: LD_VAR 0 5
41615: PUSH
41616: LD_INT 1
41618: MINUS
41619: ARRAY
41620: PPUSH
41621: LD_VAR 0 7
41625: PUSH
41626: LD_VAR 0 5
41630: ARRAY
41631: PPUSH
41632: CALL_OW 1
41636: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41637: LD_ADDR_VAR 0 7
41641: PUSH
41642: LD_VAR 0 7
41646: PPUSH
41647: LD_VAR 0 5
41651: PUSH
41652: LD_INT 1
41654: MINUS
41655: PPUSH
41656: LD_VAR 0 6
41660: PPUSH
41661: CALL_OW 1
41665: ST_TO_ADDR
// end ;
41666: GO 41583
41668: POP
41669: POP
// result := s_arr [ 1 ] ;
41670: LD_ADDR_VAR 0 4
41674: PUSH
41675: LD_VAR 0 7
41679: PUSH
41680: LD_INT 1
41682: ARRAY
41683: ST_TO_ADDR
// end ; end ;
41684: LD_VAR 0 4
41688: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41689: LD_INT 0
41691: PPUSH
41692: PPUSH
// if not list then
41693: LD_VAR 0 1
41697: NOT
41698: IFFALSE 41702
// exit ;
41700: GO 41793
// i := list [ pos1 ] ;
41702: LD_ADDR_VAR 0 5
41706: PUSH
41707: LD_VAR 0 1
41711: PUSH
41712: LD_VAR 0 2
41716: ARRAY
41717: ST_TO_ADDR
// if not i then
41718: LD_VAR 0 5
41722: NOT
41723: IFFALSE 41727
// exit ;
41725: GO 41793
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41727: LD_ADDR_VAR 0 1
41731: PUSH
41732: LD_VAR 0 1
41736: PPUSH
41737: LD_VAR 0 2
41741: PPUSH
41742: LD_VAR 0 1
41746: PUSH
41747: LD_VAR 0 3
41751: ARRAY
41752: PPUSH
41753: CALL_OW 1
41757: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41758: LD_ADDR_VAR 0 1
41762: PUSH
41763: LD_VAR 0 1
41767: PPUSH
41768: LD_VAR 0 3
41772: PPUSH
41773: LD_VAR 0 5
41777: PPUSH
41778: CALL_OW 1
41782: ST_TO_ADDR
// result := list ;
41783: LD_ADDR_VAR 0 4
41787: PUSH
41788: LD_VAR 0 1
41792: ST_TO_ADDR
// end ;
41793: LD_VAR 0 4
41797: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41798: LD_INT 0
41800: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41801: LD_ADDR_VAR 0 5
41805: PUSH
41806: LD_VAR 0 1
41810: PPUSH
41811: CALL_OW 250
41815: PPUSH
41816: LD_VAR 0 1
41820: PPUSH
41821: CALL_OW 251
41825: PPUSH
41826: LD_VAR 0 2
41830: PPUSH
41831: LD_VAR 0 3
41835: PPUSH
41836: LD_VAR 0 4
41840: PPUSH
41841: CALL 42219 0 5
41845: ST_TO_ADDR
// end ;
41846: LD_VAR 0 5
41850: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41851: LD_INT 0
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
// if not list or not unit then
41857: LD_VAR 0 2
41861: NOT
41862: PUSH
41863: LD_VAR 0 1
41867: NOT
41868: OR
41869: IFFALSE 41873
// exit ;
41871: GO 42214
// result := [ ] ;
41873: LD_ADDR_VAR 0 5
41877: PUSH
41878: EMPTY
41879: ST_TO_ADDR
// for i in list do
41880: LD_ADDR_VAR 0 6
41884: PUSH
41885: LD_VAR 0 2
41889: PUSH
41890: FOR_IN
41891: IFFALSE 42109
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41893: LD_ADDR_VAR 0 8
41897: PUSH
41898: LD_VAR 0 1
41902: PPUSH
41903: LD_VAR 0 6
41907: PUSH
41908: LD_INT 1
41910: ARRAY
41911: PPUSH
41912: LD_VAR 0 6
41916: PUSH
41917: LD_INT 2
41919: ARRAY
41920: PPUSH
41921: CALL_OW 297
41925: ST_TO_ADDR
// if not Count ( result ) then
41926: LD_VAR 0 5
41930: PPUSH
41931: CALL 38503 0 1
41935: NOT
41936: IFFALSE 41969
// begin result := Join ( result , [ i , tmp ] ) ;
41938: LD_ADDR_VAR 0 5
41942: PUSH
41943: LD_VAR 0 5
41947: PPUSH
41948: LD_VAR 0 6
41952: PUSH
41953: LD_VAR 0 8
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PPUSH
41962: CALL 74092 0 2
41966: ST_TO_ADDR
// continue ;
41967: GO 41890
// end ; if result [ result ] [ 2 ] <= tmp then
41969: LD_VAR 0 5
41973: PUSH
41974: LD_VAR 0 5
41978: ARRAY
41979: PUSH
41980: LD_INT 2
41982: ARRAY
41983: PUSH
41984: LD_VAR 0 8
41988: LESSEQUAL
41989: IFFALSE 42022
// result := Join ( result , [ i , tmp ] ) else
41991: LD_ADDR_VAR 0 5
41995: PUSH
41996: LD_VAR 0 5
42000: PPUSH
42001: LD_VAR 0 6
42005: PUSH
42006: LD_VAR 0 8
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PPUSH
42015: CALL 74092 0 2
42019: ST_TO_ADDR
42020: GO 42107
// begin for j := 1 to Count ( result ) do
42022: LD_ADDR_VAR 0 7
42026: PUSH
42027: DOUBLE
42028: LD_INT 1
42030: DEC
42031: ST_TO_ADDR
42032: LD_VAR 0 5
42036: PPUSH
42037: CALL 38503 0 1
42041: PUSH
42042: FOR_TO
42043: IFFALSE 42105
// begin if tmp < result [ j ] [ 2 ] then
42045: LD_VAR 0 8
42049: PUSH
42050: LD_VAR 0 5
42054: PUSH
42055: LD_VAR 0 7
42059: ARRAY
42060: PUSH
42061: LD_INT 2
42063: ARRAY
42064: LESS
42065: IFFALSE 42103
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42067: LD_ADDR_VAR 0 5
42071: PUSH
42072: LD_VAR 0 5
42076: PPUSH
42077: LD_VAR 0 7
42081: PPUSH
42082: LD_VAR 0 6
42086: PUSH
42087: LD_VAR 0 8
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PPUSH
42096: CALL_OW 2
42100: ST_TO_ADDR
// break ;
42101: GO 42105
// end ; end ;
42103: GO 42042
42105: POP
42106: POP
// end ; end ;
42107: GO 41890
42109: POP
42110: POP
// if result and not asc then
42111: LD_VAR 0 5
42115: PUSH
42116: LD_VAR 0 3
42120: NOT
42121: AND
42122: IFFALSE 42139
// result := ReverseArray ( result ) ;
42124: LD_ADDR_VAR 0 5
42128: PUSH
42129: LD_VAR 0 5
42133: PPUSH
42134: CALL 69379 0 1
42138: ST_TO_ADDR
// tmp := [ ] ;
42139: LD_ADDR_VAR 0 8
42143: PUSH
42144: EMPTY
42145: ST_TO_ADDR
// if mode then
42146: LD_VAR 0 4
42150: IFFALSE 42214
// begin for i := 1 to result do
42152: LD_ADDR_VAR 0 6
42156: PUSH
42157: DOUBLE
42158: LD_INT 1
42160: DEC
42161: ST_TO_ADDR
42162: LD_VAR 0 5
42166: PUSH
42167: FOR_TO
42168: IFFALSE 42202
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42170: LD_ADDR_VAR 0 8
42174: PUSH
42175: LD_VAR 0 8
42179: PPUSH
42180: LD_VAR 0 5
42184: PUSH
42185: LD_VAR 0 6
42189: ARRAY
42190: PUSH
42191: LD_INT 1
42193: ARRAY
42194: PPUSH
42195: CALL 74092 0 2
42199: ST_TO_ADDR
42200: GO 42167
42202: POP
42203: POP
// result := tmp ;
42204: LD_ADDR_VAR 0 5
42208: PUSH
42209: LD_VAR 0 8
42213: ST_TO_ADDR
// end ; end ;
42214: LD_VAR 0 5
42218: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42219: LD_INT 0
42221: PPUSH
42222: PPUSH
42223: PPUSH
42224: PPUSH
// if not list then
42225: LD_VAR 0 3
42229: NOT
42230: IFFALSE 42234
// exit ;
42232: GO 42622
// result := [ ] ;
42234: LD_ADDR_VAR 0 6
42238: PUSH
42239: EMPTY
42240: ST_TO_ADDR
// for i in list do
42241: LD_ADDR_VAR 0 7
42245: PUSH
42246: LD_VAR 0 3
42250: PUSH
42251: FOR_IN
42252: IFFALSE 42454
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42254: LD_ADDR_VAR 0 9
42258: PUSH
42259: LD_VAR 0 7
42263: PPUSH
42264: LD_VAR 0 1
42268: PPUSH
42269: LD_VAR 0 2
42273: PPUSH
42274: CALL_OW 297
42278: ST_TO_ADDR
// if not result then
42279: LD_VAR 0 6
42283: NOT
42284: IFFALSE 42310
// result := [ [ i , tmp ] ] else
42286: LD_ADDR_VAR 0 6
42290: PUSH
42291: LD_VAR 0 7
42295: PUSH
42296: LD_VAR 0 9
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: EMPTY
42306: LIST
42307: ST_TO_ADDR
42308: GO 42452
// begin if result [ result ] [ 2 ] < tmp then
42310: LD_VAR 0 6
42314: PUSH
42315: LD_VAR 0 6
42319: ARRAY
42320: PUSH
42321: LD_INT 2
42323: ARRAY
42324: PUSH
42325: LD_VAR 0 9
42329: LESS
42330: IFFALSE 42372
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42332: LD_ADDR_VAR 0 6
42336: PUSH
42337: LD_VAR 0 6
42341: PPUSH
42342: LD_VAR 0 6
42346: PUSH
42347: LD_INT 1
42349: PLUS
42350: PPUSH
42351: LD_VAR 0 7
42355: PUSH
42356: LD_VAR 0 9
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PPUSH
42365: CALL_OW 2
42369: ST_TO_ADDR
42370: GO 42452
// for j = 1 to result do
42372: LD_ADDR_VAR 0 8
42376: PUSH
42377: DOUBLE
42378: LD_INT 1
42380: DEC
42381: ST_TO_ADDR
42382: LD_VAR 0 6
42386: PUSH
42387: FOR_TO
42388: IFFALSE 42450
// begin if tmp < result [ j ] [ 2 ] then
42390: LD_VAR 0 9
42394: PUSH
42395: LD_VAR 0 6
42399: PUSH
42400: LD_VAR 0 8
42404: ARRAY
42405: PUSH
42406: LD_INT 2
42408: ARRAY
42409: LESS
42410: IFFALSE 42448
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42412: LD_ADDR_VAR 0 6
42416: PUSH
42417: LD_VAR 0 6
42421: PPUSH
42422: LD_VAR 0 8
42426: PPUSH
42427: LD_VAR 0 7
42431: PUSH
42432: LD_VAR 0 9
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PPUSH
42441: CALL_OW 2
42445: ST_TO_ADDR
// break ;
42446: GO 42450
// end ; end ;
42448: GO 42387
42450: POP
42451: POP
// end ; end ;
42452: GO 42251
42454: POP
42455: POP
// if result and not asc then
42456: LD_VAR 0 6
42460: PUSH
42461: LD_VAR 0 4
42465: NOT
42466: AND
42467: IFFALSE 42542
// begin tmp := result ;
42469: LD_ADDR_VAR 0 9
42473: PUSH
42474: LD_VAR 0 6
42478: ST_TO_ADDR
// for i = tmp downto 1 do
42479: LD_ADDR_VAR 0 7
42483: PUSH
42484: DOUBLE
42485: LD_VAR 0 9
42489: INC
42490: ST_TO_ADDR
42491: LD_INT 1
42493: PUSH
42494: FOR_DOWNTO
42495: IFFALSE 42540
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42497: LD_ADDR_VAR 0 6
42501: PUSH
42502: LD_VAR 0 6
42506: PPUSH
42507: LD_VAR 0 9
42511: PUSH
42512: LD_VAR 0 7
42516: MINUS
42517: PUSH
42518: LD_INT 1
42520: PLUS
42521: PPUSH
42522: LD_VAR 0 9
42526: PUSH
42527: LD_VAR 0 7
42531: ARRAY
42532: PPUSH
42533: CALL_OW 1
42537: ST_TO_ADDR
42538: GO 42494
42540: POP
42541: POP
// end ; tmp := [ ] ;
42542: LD_ADDR_VAR 0 9
42546: PUSH
42547: EMPTY
42548: ST_TO_ADDR
// if mode then
42549: LD_VAR 0 5
42553: IFFALSE 42622
// begin for i = 1 to result do
42555: LD_ADDR_VAR 0 7
42559: PUSH
42560: DOUBLE
42561: LD_INT 1
42563: DEC
42564: ST_TO_ADDR
42565: LD_VAR 0 6
42569: PUSH
42570: FOR_TO
42571: IFFALSE 42610
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42573: LD_ADDR_VAR 0 9
42577: PUSH
42578: LD_VAR 0 9
42582: PPUSH
42583: LD_VAR 0 7
42587: PPUSH
42588: LD_VAR 0 6
42592: PUSH
42593: LD_VAR 0 7
42597: ARRAY
42598: PUSH
42599: LD_INT 1
42601: ARRAY
42602: PPUSH
42603: CALL_OW 1
42607: ST_TO_ADDR
42608: GO 42570
42610: POP
42611: POP
// result := tmp ;
42612: LD_ADDR_VAR 0 6
42616: PUSH
42617: LD_VAR 0 9
42621: ST_TO_ADDR
// end ; end ;
42622: LD_VAR 0 6
42626: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42627: LD_INT 0
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42635: LD_ADDR_VAR 0 5
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
// if not x or not y then
42657: LD_VAR 0 2
42661: NOT
42662: PUSH
42663: LD_VAR 0 3
42667: NOT
42668: OR
42669: IFFALSE 42673
// exit ;
42671: GO 44323
// if not range then
42673: LD_VAR 0 4
42677: NOT
42678: IFFALSE 42688
// range := 10 ;
42680: LD_ADDR_VAR 0 4
42684: PUSH
42685: LD_INT 10
42687: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42688: LD_ADDR_VAR 0 8
42692: PUSH
42693: LD_INT 81
42695: PUSH
42696: LD_VAR 0 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 92
42707: PUSH
42708: LD_VAR 0 2
42712: PUSH
42713: LD_VAR 0 3
42717: PUSH
42718: LD_VAR 0 4
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: LD_INT 21
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: PPUSH
42751: CALL_OW 69
42755: ST_TO_ADDR
// if not tmp then
42756: LD_VAR 0 8
42760: NOT
42761: IFFALSE 42765
// exit ;
42763: GO 44323
// for i in tmp do
42765: LD_ADDR_VAR 0 6
42769: PUSH
42770: LD_VAR 0 8
42774: PUSH
42775: FOR_IN
42776: IFFALSE 44298
// begin points := [ 0 , 0 , 0 ] ;
42778: LD_ADDR_VAR 0 9
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: ST_TO_ADDR
// bpoints := 1 ;
42797: LD_ADDR_VAR 0 10
42801: PUSH
42802: LD_INT 1
42804: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42805: LD_VAR 0 6
42809: PPUSH
42810: CALL_OW 247
42814: PUSH
42815: LD_INT 1
42817: DOUBLE
42818: EQUAL
42819: IFTRUE 42823
42821: GO 43401
42823: POP
// begin if GetClass ( i ) = 1 then
42824: LD_VAR 0 6
42828: PPUSH
42829: CALL_OW 257
42833: PUSH
42834: LD_INT 1
42836: EQUAL
42837: IFFALSE 42858
// points := [ 10 , 5 , 3 ] ;
42839: LD_ADDR_VAR 0 9
42843: PUSH
42844: LD_INT 10
42846: PUSH
42847: LD_INT 5
42849: PUSH
42850: LD_INT 3
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42858: LD_VAR 0 6
42862: PPUSH
42863: CALL_OW 257
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: LD_INT 4
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: IN
42882: IFFALSE 42903
// points := [ 3 , 2 , 1 ] ;
42884: LD_ADDR_VAR 0 9
42888: PUSH
42889: LD_INT 3
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42903: LD_VAR 0 6
42907: PPUSH
42908: CALL_OW 257
42912: PUSH
42913: LD_INT 5
42915: EQUAL
42916: IFFALSE 42937
// points := [ 130 , 5 , 2 ] ;
42918: LD_ADDR_VAR 0 9
42922: PUSH
42923: LD_INT 130
42925: PUSH
42926: LD_INT 5
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42937: LD_VAR 0 6
42941: PPUSH
42942: CALL_OW 257
42946: PUSH
42947: LD_INT 8
42949: EQUAL
42950: IFFALSE 42971
// points := [ 35 , 35 , 30 ] ;
42952: LD_ADDR_VAR 0 9
42956: PUSH
42957: LD_INT 35
42959: PUSH
42960: LD_INT 35
42962: PUSH
42963: LD_INT 30
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42971: LD_VAR 0 6
42975: PPUSH
42976: CALL_OW 257
42980: PUSH
42981: LD_INT 9
42983: EQUAL
42984: IFFALSE 43005
// points := [ 20 , 55 , 40 ] ;
42986: LD_ADDR_VAR 0 9
42990: PUSH
42991: LD_INT 20
42993: PUSH
42994: LD_INT 55
42996: PUSH
42997: LD_INT 40
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43005: LD_VAR 0 6
43009: PPUSH
43010: CALL_OW 257
43014: PUSH
43015: LD_INT 12
43017: PUSH
43018: LD_INT 16
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: IN
43025: IFFALSE 43046
// points := [ 5 , 3 , 2 ] ;
43027: LD_ADDR_VAR 0 9
43031: PUSH
43032: LD_INT 5
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: LIST
43045: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43046: LD_VAR 0 6
43050: PPUSH
43051: CALL_OW 257
43055: PUSH
43056: LD_INT 17
43058: EQUAL
43059: IFFALSE 43080
// points := [ 100 , 50 , 75 ] ;
43061: LD_ADDR_VAR 0 9
43065: PUSH
43066: LD_INT 100
43068: PUSH
43069: LD_INT 50
43071: PUSH
43072: LD_INT 75
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43080: LD_VAR 0 6
43084: PPUSH
43085: CALL_OW 257
43089: PUSH
43090: LD_INT 15
43092: EQUAL
43093: IFFALSE 43114
// points := [ 10 , 5 , 3 ] ;
43095: LD_ADDR_VAR 0 9
43099: PUSH
43100: LD_INT 10
43102: PUSH
43103: LD_INT 5
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43114: LD_VAR 0 6
43118: PPUSH
43119: CALL_OW 257
43123: PUSH
43124: LD_INT 14
43126: EQUAL
43127: IFFALSE 43148
// points := [ 10 , 0 , 0 ] ;
43129: LD_ADDR_VAR 0 9
43133: PUSH
43134: LD_INT 10
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43148: LD_VAR 0 6
43152: PPUSH
43153: CALL_OW 257
43157: PUSH
43158: LD_INT 11
43160: EQUAL
43161: IFFALSE 43182
// points := [ 30 , 10 , 5 ] ;
43163: LD_ADDR_VAR 0 9
43167: PUSH
43168: LD_INT 30
43170: PUSH
43171: LD_INT 10
43173: PUSH
43174: LD_INT 5
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43182: LD_VAR 0 1
43186: PPUSH
43187: LD_INT 5
43189: PPUSH
43190: CALL_OW 321
43194: PUSH
43195: LD_INT 2
43197: EQUAL
43198: IFFALSE 43215
// bpoints := bpoints * 1.8 ;
43200: LD_ADDR_VAR 0 10
43204: PUSH
43205: LD_VAR 0 10
43209: PUSH
43210: LD_REAL  1.80000000000000E+0000
43213: MUL
43214: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43215: LD_VAR 0 6
43219: PPUSH
43220: CALL_OW 257
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: LD_INT 4
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: IN
43243: PUSH
43244: LD_VAR 0 1
43248: PPUSH
43249: LD_INT 51
43251: PPUSH
43252: CALL_OW 321
43256: PUSH
43257: LD_INT 2
43259: EQUAL
43260: AND
43261: IFFALSE 43278
// bpoints := bpoints * 1.2 ;
43263: LD_ADDR_VAR 0 10
43267: PUSH
43268: LD_VAR 0 10
43272: PUSH
43273: LD_REAL  1.20000000000000E+0000
43276: MUL
43277: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43278: LD_VAR 0 6
43282: PPUSH
43283: CALL_OW 257
43287: PUSH
43288: LD_INT 5
43290: PUSH
43291: LD_INT 7
43293: PUSH
43294: LD_INT 9
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: LIST
43301: IN
43302: PUSH
43303: LD_VAR 0 1
43307: PPUSH
43308: LD_INT 52
43310: PPUSH
43311: CALL_OW 321
43315: PUSH
43316: LD_INT 2
43318: EQUAL
43319: AND
43320: IFFALSE 43337
// bpoints := bpoints * 1.5 ;
43322: LD_ADDR_VAR 0 10
43326: PUSH
43327: LD_VAR 0 10
43331: PUSH
43332: LD_REAL  1.50000000000000E+0000
43335: MUL
43336: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43337: LD_VAR 0 1
43341: PPUSH
43342: LD_INT 66
43344: PPUSH
43345: CALL_OW 321
43349: PUSH
43350: LD_INT 2
43352: EQUAL
43353: IFFALSE 43370
// bpoints := bpoints * 1.1 ;
43355: LD_ADDR_VAR 0 10
43359: PUSH
43360: LD_VAR 0 10
43364: PUSH
43365: LD_REAL  1.10000000000000E+0000
43368: MUL
43369: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43370: LD_ADDR_VAR 0 10
43374: PUSH
43375: LD_VAR 0 10
43379: PUSH
43380: LD_VAR 0 6
43384: PPUSH
43385: LD_INT 1
43387: PPUSH
43388: CALL_OW 259
43392: PUSH
43393: LD_REAL  1.15000000000000E+0000
43396: MUL
43397: MUL
43398: ST_TO_ADDR
// end ; unit_vehicle :
43399: GO 44227
43401: LD_INT 2
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 44215
43409: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43410: LD_VAR 0 6
43414: PPUSH
43415: CALL_OW 264
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: LD_INT 42
43425: PUSH
43426: LD_INT 24
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: IN
43434: IFFALSE 43455
// points := [ 25 , 5 , 3 ] ;
43436: LD_ADDR_VAR 0 9
43440: PUSH
43441: LD_INT 25
43443: PUSH
43444: LD_INT 5
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43455: LD_VAR 0 6
43459: PPUSH
43460: CALL_OW 264
43464: PUSH
43465: LD_INT 4
43467: PUSH
43468: LD_INT 43
43470: PUSH
43471: LD_INT 25
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: IN
43479: IFFALSE 43500
// points := [ 40 , 15 , 5 ] ;
43481: LD_ADDR_VAR 0 9
43485: PUSH
43486: LD_INT 40
43488: PUSH
43489: LD_INT 15
43491: PUSH
43492: LD_INT 5
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43500: LD_VAR 0 6
43504: PPUSH
43505: CALL_OW 264
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 23
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: IN
43520: IFFALSE 43541
// points := [ 7 , 25 , 8 ] ;
43522: LD_ADDR_VAR 0 9
43526: PUSH
43527: LD_INT 7
43529: PUSH
43530: LD_INT 25
43532: PUSH
43533: LD_INT 8
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: LIST
43540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43541: LD_VAR 0 6
43545: PPUSH
43546: CALL_OW 264
43550: PUSH
43551: LD_INT 5
43553: PUSH
43554: LD_INT 27
43556: PUSH
43557: LD_INT 44
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: IN
43565: IFFALSE 43586
// points := [ 14 , 50 , 16 ] ;
43567: LD_ADDR_VAR 0 9
43571: PUSH
43572: LD_INT 14
43574: PUSH
43575: LD_INT 50
43577: PUSH
43578: LD_INT 16
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43586: LD_VAR 0 6
43590: PPUSH
43591: CALL_OW 264
43595: PUSH
43596: LD_INT 6
43598: PUSH
43599: LD_INT 46
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: IN
43606: IFFALSE 43627
// points := [ 32 , 120 , 70 ] ;
43608: LD_ADDR_VAR 0 9
43612: PUSH
43613: LD_INT 32
43615: PUSH
43616: LD_INT 120
43618: PUSH
43619: LD_INT 70
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: LIST
43626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43627: LD_VAR 0 6
43631: PPUSH
43632: CALL_OW 264
43636: PUSH
43637: LD_INT 7
43639: PUSH
43640: LD_INT 28
43642: PUSH
43643: LD_INT 45
43645: PUSH
43646: LD_INT 92
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: IN
43655: IFFALSE 43676
// points := [ 35 , 20 , 45 ] ;
43657: LD_ADDR_VAR 0 9
43661: PUSH
43662: LD_INT 35
43664: PUSH
43665: LD_INT 20
43667: PUSH
43668: LD_INT 45
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43676: LD_VAR 0 6
43680: PPUSH
43681: CALL_OW 264
43685: PUSH
43686: LD_INT 47
43688: PUSH
43689: EMPTY
43690: LIST
43691: IN
43692: IFFALSE 43713
// points := [ 67 , 45 , 75 ] ;
43694: LD_ADDR_VAR 0 9
43698: PUSH
43699: LD_INT 67
43701: PUSH
43702: LD_INT 45
43704: PUSH
43705: LD_INT 75
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43713: LD_VAR 0 6
43717: PPUSH
43718: CALL_OW 264
43722: PUSH
43723: LD_INT 26
43725: PUSH
43726: EMPTY
43727: LIST
43728: IN
43729: IFFALSE 43750
// points := [ 120 , 30 , 80 ] ;
43731: LD_ADDR_VAR 0 9
43735: PUSH
43736: LD_INT 120
43738: PUSH
43739: LD_INT 30
43741: PUSH
43742: LD_INT 80
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43750: LD_VAR 0 6
43754: PPUSH
43755: CALL_OW 264
43759: PUSH
43760: LD_INT 22
43762: PUSH
43763: EMPTY
43764: LIST
43765: IN
43766: IFFALSE 43787
// points := [ 40 , 1 , 1 ] ;
43768: LD_ADDR_VAR 0 9
43772: PUSH
43773: LD_INT 40
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43787: LD_VAR 0 6
43791: PPUSH
43792: CALL_OW 264
43796: PUSH
43797: LD_INT 29
43799: PUSH
43800: EMPTY
43801: LIST
43802: IN
43803: IFFALSE 43824
// points := [ 70 , 200 , 400 ] ;
43805: LD_ADDR_VAR 0 9
43809: PUSH
43810: LD_INT 70
43812: PUSH
43813: LD_INT 200
43815: PUSH
43816: LD_INT 400
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43824: LD_VAR 0 6
43828: PPUSH
43829: CALL_OW 264
43833: PUSH
43834: LD_INT 14
43836: PUSH
43837: LD_INT 53
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: IN
43844: IFFALSE 43865
// points := [ 40 , 10 , 20 ] ;
43846: LD_ADDR_VAR 0 9
43850: PUSH
43851: LD_INT 40
43853: PUSH
43854: LD_INT 10
43856: PUSH
43857: LD_INT 20
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43865: LD_VAR 0 6
43869: PPUSH
43870: CALL_OW 264
43874: PUSH
43875: LD_INT 9
43877: PUSH
43878: EMPTY
43879: LIST
43880: IN
43881: IFFALSE 43902
// points := [ 5 , 70 , 20 ] ;
43883: LD_ADDR_VAR 0 9
43887: PUSH
43888: LD_INT 5
43890: PUSH
43891: LD_INT 70
43893: PUSH
43894: LD_INT 20
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43902: LD_VAR 0 6
43906: PPUSH
43907: CALL_OW 264
43911: PUSH
43912: LD_INT 10
43914: PUSH
43915: EMPTY
43916: LIST
43917: IN
43918: IFFALSE 43939
// points := [ 35 , 110 , 70 ] ;
43920: LD_ADDR_VAR 0 9
43924: PUSH
43925: LD_INT 35
43927: PUSH
43928: LD_INT 110
43930: PUSH
43931: LD_INT 70
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43939: LD_VAR 0 6
43943: PPUSH
43944: CALL_OW 265
43948: PUSH
43949: LD_INT 25
43951: EQUAL
43952: IFFALSE 43973
// points := [ 80 , 65 , 100 ] ;
43954: LD_ADDR_VAR 0 9
43958: PUSH
43959: LD_INT 80
43961: PUSH
43962: LD_INT 65
43964: PUSH
43965: LD_INT 100
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43973: LD_VAR 0 6
43977: PPUSH
43978: CALL_OW 263
43982: PUSH
43983: LD_INT 1
43985: EQUAL
43986: IFFALSE 44021
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43988: LD_ADDR_VAR 0 10
43992: PUSH
43993: LD_VAR 0 10
43997: PUSH
43998: LD_VAR 0 6
44002: PPUSH
44003: CALL_OW 311
44007: PPUSH
44008: LD_INT 3
44010: PPUSH
44011: CALL_OW 259
44015: PUSH
44016: LD_INT 4
44018: MUL
44019: MUL
44020: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44021: LD_VAR 0 6
44025: PPUSH
44026: CALL_OW 263
44030: PUSH
44031: LD_INT 2
44033: EQUAL
44034: IFFALSE 44085
// begin j := IsControledBy ( i ) ;
44036: LD_ADDR_VAR 0 7
44040: PUSH
44041: LD_VAR 0 6
44045: PPUSH
44046: CALL_OW 312
44050: ST_TO_ADDR
// if j then
44051: LD_VAR 0 7
44055: IFFALSE 44085
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44057: LD_ADDR_VAR 0 10
44061: PUSH
44062: LD_VAR 0 10
44066: PUSH
44067: LD_VAR 0 7
44071: PPUSH
44072: LD_INT 3
44074: PPUSH
44075: CALL_OW 259
44079: PUSH
44080: LD_INT 3
44082: MUL
44083: MUL
44084: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44085: LD_VAR 0 6
44089: PPUSH
44090: CALL_OW 264
44094: PUSH
44095: LD_INT 5
44097: PUSH
44098: LD_INT 6
44100: PUSH
44101: LD_INT 46
44103: PUSH
44104: LD_INT 44
44106: PUSH
44107: LD_INT 47
44109: PUSH
44110: LD_INT 45
44112: PUSH
44113: LD_INT 28
44115: PUSH
44116: LD_INT 7
44118: PUSH
44119: LD_INT 27
44121: PUSH
44122: LD_INT 29
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: IN
44137: PUSH
44138: LD_VAR 0 1
44142: PPUSH
44143: LD_INT 52
44145: PPUSH
44146: CALL_OW 321
44150: PUSH
44151: LD_INT 2
44153: EQUAL
44154: AND
44155: IFFALSE 44172
// bpoints := bpoints * 1.2 ;
44157: LD_ADDR_VAR 0 10
44161: PUSH
44162: LD_VAR 0 10
44166: PUSH
44167: LD_REAL  1.20000000000000E+0000
44170: MUL
44171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44172: LD_VAR 0 6
44176: PPUSH
44177: CALL_OW 264
44181: PUSH
44182: LD_INT 6
44184: PUSH
44185: LD_INT 46
44187: PUSH
44188: LD_INT 47
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: IN
44196: IFFALSE 44213
// bpoints := bpoints * 1.2 ;
44198: LD_ADDR_VAR 0 10
44202: PUSH
44203: LD_VAR 0 10
44207: PUSH
44208: LD_REAL  1.20000000000000E+0000
44211: MUL
44212: ST_TO_ADDR
// end ; unit_building :
44213: GO 44227
44215: LD_INT 3
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44223
44221: GO 44226
44223: POP
// ; end ;
44224: GO 44227
44226: POP
// for j = 1 to 3 do
44227: LD_ADDR_VAR 0 7
44231: PUSH
44232: DOUBLE
44233: LD_INT 1
44235: DEC
44236: ST_TO_ADDR
44237: LD_INT 3
44239: PUSH
44240: FOR_TO
44241: IFFALSE 44294
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44243: LD_ADDR_VAR 0 5
44247: PUSH
44248: LD_VAR 0 5
44252: PPUSH
44253: LD_VAR 0 7
44257: PPUSH
44258: LD_VAR 0 5
44262: PUSH
44263: LD_VAR 0 7
44267: ARRAY
44268: PUSH
44269: LD_VAR 0 9
44273: PUSH
44274: LD_VAR 0 7
44278: ARRAY
44279: PUSH
44280: LD_VAR 0 10
44284: MUL
44285: PLUS
44286: PPUSH
44287: CALL_OW 1
44291: ST_TO_ADDR
44292: GO 44240
44294: POP
44295: POP
// end ;
44296: GO 42775
44298: POP
44299: POP
// result := Replace ( result , 4 , tmp ) ;
44300: LD_ADDR_VAR 0 5
44304: PUSH
44305: LD_VAR 0 5
44309: PPUSH
44310: LD_INT 4
44312: PPUSH
44313: LD_VAR 0 8
44317: PPUSH
44318: CALL_OW 1
44322: ST_TO_ADDR
// end ;
44323: LD_VAR 0 5
44327: RET
// export function DangerAtRange ( unit , range ) ; begin
44328: LD_INT 0
44330: PPUSH
// if not unit then
44331: LD_VAR 0 1
44335: NOT
44336: IFFALSE 44340
// exit ;
44338: GO 44385
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44340: LD_ADDR_VAR 0 3
44344: PUSH
44345: LD_VAR 0 1
44349: PPUSH
44350: CALL_OW 255
44354: PPUSH
44355: LD_VAR 0 1
44359: PPUSH
44360: CALL_OW 250
44364: PPUSH
44365: LD_VAR 0 1
44369: PPUSH
44370: CALL_OW 251
44374: PPUSH
44375: LD_VAR 0 2
44379: PPUSH
44380: CALL 42627 0 4
44384: ST_TO_ADDR
// end ;
44385: LD_VAR 0 3
44389: RET
// export function DangerInArea ( side , area ) ; begin
44390: LD_INT 0
44392: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_VAR 0 2
44402: PPUSH
44403: LD_INT 81
44405: PUSH
44406: LD_VAR 0 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PPUSH
44415: CALL_OW 70
44419: ST_TO_ADDR
// end ;
44420: LD_VAR 0 3
44424: RET
// export function IsExtension ( b ) ; begin
44425: LD_INT 0
44427: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44428: LD_ADDR_VAR 0 2
44432: PUSH
44433: LD_VAR 0 1
44437: PUSH
44438: LD_INT 23
44440: PUSH
44441: LD_INT 20
44443: PUSH
44444: LD_INT 22
44446: PUSH
44447: LD_INT 17
44449: PUSH
44450: LD_INT 24
44452: PUSH
44453: LD_INT 21
44455: PUSH
44456: LD_INT 19
44458: PUSH
44459: LD_INT 16
44461: PUSH
44462: LD_INT 25
44464: PUSH
44465: LD_INT 18
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: IN
44480: ST_TO_ADDR
// end ;
44481: LD_VAR 0 2
44485: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44486: LD_INT 0
44488: PPUSH
44489: PPUSH
44490: PPUSH
// result := [ ] ;
44491: LD_ADDR_VAR 0 4
44495: PUSH
44496: EMPTY
44497: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44498: LD_ADDR_VAR 0 5
44502: PUSH
44503: LD_VAR 0 2
44507: PPUSH
44508: LD_INT 21
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PPUSH
44518: CALL_OW 70
44522: ST_TO_ADDR
// if not tmp then
44523: LD_VAR 0 5
44527: NOT
44528: IFFALSE 44532
// exit ;
44530: GO 44596
// if checkLink then
44532: LD_VAR 0 3
44536: IFFALSE 44586
// begin for i in tmp do
44538: LD_ADDR_VAR 0 6
44542: PUSH
44543: LD_VAR 0 5
44547: PUSH
44548: FOR_IN
44549: IFFALSE 44584
// if GetBase ( i ) <> base then
44551: LD_VAR 0 6
44555: PPUSH
44556: CALL_OW 274
44560: PUSH
44561: LD_VAR 0 1
44565: NONEQUAL
44566: IFFALSE 44582
// ComLinkToBase ( base , i ) ;
44568: LD_VAR 0 1
44572: PPUSH
44573: LD_VAR 0 6
44577: PPUSH
44578: CALL_OW 169
44582: GO 44548
44584: POP
44585: POP
// end ; result := tmp ;
44586: LD_ADDR_VAR 0 4
44590: PUSH
44591: LD_VAR 0 5
44595: ST_TO_ADDR
// end ;
44596: LD_VAR 0 4
44600: RET
// export function ComComplete ( units , b ) ; var i ; begin
44601: LD_INT 0
44603: PPUSH
44604: PPUSH
// if not units then
44605: LD_VAR 0 1
44609: NOT
44610: IFFALSE 44614
// exit ;
44612: GO 44704
// for i in units do
44614: LD_ADDR_VAR 0 4
44618: PUSH
44619: LD_VAR 0 1
44623: PUSH
44624: FOR_IN
44625: IFFALSE 44702
// if BuildingStatus ( b ) = bs_build then
44627: LD_VAR 0 2
44631: PPUSH
44632: CALL_OW 461
44636: PUSH
44637: LD_INT 1
44639: EQUAL
44640: IFFALSE 44700
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44642: LD_VAR 0 4
44646: PPUSH
44647: LD_STRING h
44649: PUSH
44650: LD_VAR 0 2
44654: PPUSH
44655: CALL_OW 250
44659: PUSH
44660: LD_VAR 0 2
44664: PPUSH
44665: CALL_OW 251
44669: PUSH
44670: LD_VAR 0 2
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: PUSH
44693: EMPTY
44694: LIST
44695: PPUSH
44696: CALL_OW 446
44700: GO 44624
44702: POP
44703: POP
// end ;
44704: LD_VAR 0 3
44708: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44709: LD_INT 0
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
44715: PPUSH
44716: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44717: LD_VAR 0 1
44721: NOT
44722: PUSH
44723: LD_VAR 0 1
44727: PPUSH
44728: CALL_OW 263
44732: PUSH
44733: LD_INT 2
44735: NONEQUAL
44736: OR
44737: IFFALSE 44741
// exit ;
44739: GO 45057
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44741: LD_ADDR_VAR 0 6
44745: PUSH
44746: LD_INT 22
44748: PUSH
44749: LD_VAR 0 1
44753: PPUSH
44754: CALL_OW 255
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: LD_INT 30
44768: PUSH
44769: LD_INT 36
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 34
44778: PUSH
44779: LD_INT 31
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PPUSH
44795: CALL_OW 69
44799: ST_TO_ADDR
// if not tmp then
44800: LD_VAR 0 6
44804: NOT
44805: IFFALSE 44809
// exit ;
44807: GO 45057
// result := [ ] ;
44809: LD_ADDR_VAR 0 2
44813: PUSH
44814: EMPTY
44815: ST_TO_ADDR
// for i in tmp do
44816: LD_ADDR_VAR 0 3
44820: PUSH
44821: LD_VAR 0 6
44825: PUSH
44826: FOR_IN
44827: IFFALSE 44898
// begin t := UnitsInside ( i ) ;
44829: LD_ADDR_VAR 0 4
44833: PUSH
44834: LD_VAR 0 3
44838: PPUSH
44839: CALL_OW 313
44843: ST_TO_ADDR
// if t then
44844: LD_VAR 0 4
44848: IFFALSE 44896
// for j in t do
44850: LD_ADDR_VAR 0 7
44854: PUSH
44855: LD_VAR 0 4
44859: PUSH
44860: FOR_IN
44861: IFFALSE 44894
// result := Replace ( result , result + 1 , j ) ;
44863: LD_ADDR_VAR 0 2
44867: PUSH
44868: LD_VAR 0 2
44872: PPUSH
44873: LD_VAR 0 2
44877: PUSH
44878: LD_INT 1
44880: PLUS
44881: PPUSH
44882: LD_VAR 0 7
44886: PPUSH
44887: CALL_OW 1
44891: ST_TO_ADDR
44892: GO 44860
44894: POP
44895: POP
// end ;
44896: GO 44826
44898: POP
44899: POP
// if not result then
44900: LD_VAR 0 2
44904: NOT
44905: IFFALSE 44909
// exit ;
44907: GO 45057
// mech := result [ 1 ] ;
44909: LD_ADDR_VAR 0 5
44913: PUSH
44914: LD_VAR 0 2
44918: PUSH
44919: LD_INT 1
44921: ARRAY
44922: ST_TO_ADDR
// if result > 1 then
44923: LD_VAR 0 2
44927: PUSH
44928: LD_INT 1
44930: GREATER
44931: IFFALSE 45043
// begin for i = 2 to result do
44933: LD_ADDR_VAR 0 3
44937: PUSH
44938: DOUBLE
44939: LD_INT 2
44941: DEC
44942: ST_TO_ADDR
44943: LD_VAR 0 2
44947: PUSH
44948: FOR_TO
44949: IFFALSE 45041
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44951: LD_ADDR_VAR 0 4
44955: PUSH
44956: LD_VAR 0 2
44960: PUSH
44961: LD_VAR 0 3
44965: ARRAY
44966: PPUSH
44967: LD_INT 3
44969: PPUSH
44970: CALL_OW 259
44974: PUSH
44975: LD_VAR 0 2
44979: PUSH
44980: LD_VAR 0 3
44984: ARRAY
44985: PPUSH
44986: CALL_OW 432
44990: MINUS
44991: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44992: LD_VAR 0 4
44996: PUSH
44997: LD_VAR 0 5
45001: PPUSH
45002: LD_INT 3
45004: PPUSH
45005: CALL_OW 259
45009: PUSH
45010: LD_VAR 0 5
45014: PPUSH
45015: CALL_OW 432
45019: MINUS
45020: GREATEREQUAL
45021: IFFALSE 45039
// mech := result [ i ] ;
45023: LD_ADDR_VAR 0 5
45027: PUSH
45028: LD_VAR 0 2
45032: PUSH
45033: LD_VAR 0 3
45037: ARRAY
45038: ST_TO_ADDR
// end ;
45039: GO 44948
45041: POP
45042: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45043: LD_VAR 0 1
45047: PPUSH
45048: LD_VAR 0 5
45052: PPUSH
45053: CALL_OW 135
// end ;
45057: LD_VAR 0 2
45061: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45062: LD_INT 0
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
// result := [ ] ;
45077: LD_ADDR_VAR 0 7
45081: PUSH
45082: EMPTY
45083: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 266
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: IN
45104: NOT
45105: IFFALSE 45109
// exit ;
45107: GO 46743
// if name then
45109: LD_VAR 0 3
45113: IFFALSE 45129
// SetBName ( base_dep , name ) ;
45115: LD_VAR 0 1
45119: PPUSH
45120: LD_VAR 0 3
45124: PPUSH
45125: CALL_OW 500
// base := GetBase ( base_dep ) ;
45129: LD_ADDR_VAR 0 15
45133: PUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 274
45143: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45144: LD_ADDR_VAR 0 16
45148: PUSH
45149: LD_VAR 0 1
45153: PPUSH
45154: CALL_OW 255
45158: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45159: LD_ADDR_VAR 0 17
45163: PUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 248
45173: ST_TO_ADDR
// if sources then
45174: LD_VAR 0 5
45178: IFFALSE 45225
// for i = 1 to 3 do
45180: LD_ADDR_VAR 0 8
45184: PUSH
45185: DOUBLE
45186: LD_INT 1
45188: DEC
45189: ST_TO_ADDR
45190: LD_INT 3
45192: PUSH
45193: FOR_TO
45194: IFFALSE 45223
// AddResourceType ( base , i , sources [ i ] ) ;
45196: LD_VAR 0 15
45200: PPUSH
45201: LD_VAR 0 8
45205: PPUSH
45206: LD_VAR 0 5
45210: PUSH
45211: LD_VAR 0 8
45215: ARRAY
45216: PPUSH
45217: CALL_OW 276
45221: GO 45193
45223: POP
45224: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45225: LD_ADDR_VAR 0 18
45229: PUSH
45230: LD_VAR 0 15
45234: PPUSH
45235: LD_VAR 0 2
45239: PPUSH
45240: LD_INT 1
45242: PPUSH
45243: CALL 44486 0 3
45247: ST_TO_ADDR
// InitHc ;
45248: CALL_OW 19
// InitUc ;
45252: CALL_OW 18
// uc_side := side ;
45256: LD_ADDR_OWVAR 20
45260: PUSH
45261: LD_VAR 0 16
45265: ST_TO_ADDR
// uc_nation := nation ;
45266: LD_ADDR_OWVAR 21
45270: PUSH
45271: LD_VAR 0 17
45275: ST_TO_ADDR
// if buildings then
45276: LD_VAR 0 18
45280: IFFALSE 46602
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45282: LD_ADDR_VAR 0 19
45286: PUSH
45287: LD_VAR 0 18
45291: PPUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 30
45297: PUSH
45298: LD_INT 29
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 30
45307: PUSH
45308: LD_INT 30
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: PPUSH
45320: CALL_OW 72
45324: ST_TO_ADDR
// if tmp then
45325: LD_VAR 0 19
45329: IFFALSE 45377
// for i in tmp do
45331: LD_ADDR_VAR 0 8
45335: PUSH
45336: LD_VAR 0 19
45340: PUSH
45341: FOR_IN
45342: IFFALSE 45375
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45344: LD_VAR 0 8
45348: PPUSH
45349: CALL_OW 250
45353: PPUSH
45354: LD_VAR 0 8
45358: PPUSH
45359: CALL_OW 251
45363: PPUSH
45364: LD_VAR 0 16
45368: PPUSH
45369: CALL_OW 441
45373: GO 45341
45375: POP
45376: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45377: LD_VAR 0 18
45381: PPUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 30
45387: PUSH
45388: LD_INT 32
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 30
45397: PUSH
45398: LD_INT 33
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: PPUSH
45410: CALL_OW 72
45414: IFFALSE 45502
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45416: LD_ADDR_VAR 0 8
45420: PUSH
45421: LD_VAR 0 18
45425: PPUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 30
45431: PUSH
45432: LD_INT 32
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 30
45441: PUSH
45442: LD_INT 33
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: PPUSH
45454: CALL_OW 72
45458: PUSH
45459: FOR_IN
45460: IFFALSE 45500
// begin if not GetBWeapon ( i ) then
45462: LD_VAR 0 8
45466: PPUSH
45467: CALL_OW 269
45471: NOT
45472: IFFALSE 45498
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45474: LD_VAR 0 8
45478: PPUSH
45479: LD_VAR 0 8
45483: PPUSH
45484: LD_VAR 0 2
45488: PPUSH
45489: CALL 46748 0 2
45493: PPUSH
45494: CALL_OW 431
// end ;
45498: GO 45459
45500: POP
45501: POP
// end ; for i = 1 to personel do
45502: LD_ADDR_VAR 0 8
45506: PUSH
45507: DOUBLE
45508: LD_INT 1
45510: DEC
45511: ST_TO_ADDR
45512: LD_VAR 0 6
45516: PUSH
45517: FOR_TO
45518: IFFALSE 46582
// begin if i > 4 then
45520: LD_VAR 0 8
45524: PUSH
45525: LD_INT 4
45527: GREATER
45528: IFFALSE 45532
// break ;
45530: GO 46582
// case i of 1 :
45532: LD_VAR 0 8
45536: PUSH
45537: LD_INT 1
45539: DOUBLE
45540: EQUAL
45541: IFTRUE 45545
45543: GO 45625
45545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45546: LD_ADDR_VAR 0 12
45550: PUSH
45551: LD_VAR 0 18
45555: PPUSH
45556: LD_INT 22
45558: PUSH
45559: LD_VAR 0 16
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 58
45570: PUSH
45571: EMPTY
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 30
45579: PUSH
45580: LD_INT 32
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 30
45589: PUSH
45590: LD_INT 4
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 30
45599: PUSH
45600: LD_INT 5
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: PPUSH
45618: CALL_OW 72
45622: ST_TO_ADDR
45623: GO 45847
45625: LD_INT 2
45627: DOUBLE
45628: EQUAL
45629: IFTRUE 45633
45631: GO 45695
45633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45634: LD_ADDR_VAR 0 12
45638: PUSH
45639: LD_VAR 0 18
45643: PPUSH
45644: LD_INT 22
45646: PUSH
45647: LD_VAR 0 16
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 30
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 30
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PPUSH
45688: CALL_OW 72
45692: ST_TO_ADDR
45693: GO 45847
45695: LD_INT 3
45697: DOUBLE
45698: EQUAL
45699: IFTRUE 45703
45701: GO 45765
45703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45704: LD_ADDR_VAR 0 12
45708: PUSH
45709: LD_VAR 0 18
45713: PPUSH
45714: LD_INT 22
45716: PUSH
45717: LD_VAR 0 16
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: LD_INT 30
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 30
45741: PUSH
45742: LD_INT 3
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PPUSH
45758: CALL_OW 72
45762: ST_TO_ADDR
45763: GO 45847
45765: LD_INT 4
45767: DOUBLE
45768: EQUAL
45769: IFTRUE 45773
45771: GO 45846
45773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45774: LD_ADDR_VAR 0 12
45778: PUSH
45779: LD_VAR 0 18
45783: PPUSH
45784: LD_INT 22
45786: PUSH
45787: LD_VAR 0 16
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 30
45801: PUSH
45802: LD_INT 6
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 30
45811: PUSH
45812: LD_INT 7
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 30
45821: PUSH
45822: LD_INT 8
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PPUSH
45839: CALL_OW 72
45843: ST_TO_ADDR
45844: GO 45847
45846: POP
// if i = 1 then
45847: LD_VAR 0 8
45851: PUSH
45852: LD_INT 1
45854: EQUAL
45855: IFFALSE 45966
// begin tmp := [ ] ;
45857: LD_ADDR_VAR 0 19
45861: PUSH
45862: EMPTY
45863: ST_TO_ADDR
// for j in f do
45864: LD_ADDR_VAR 0 9
45868: PUSH
45869: LD_VAR 0 12
45873: PUSH
45874: FOR_IN
45875: IFFALSE 45948
// if GetBType ( j ) = b_bunker then
45877: LD_VAR 0 9
45881: PPUSH
45882: CALL_OW 266
45886: PUSH
45887: LD_INT 32
45889: EQUAL
45890: IFFALSE 45917
// tmp := Insert ( tmp , 1 , j ) else
45892: LD_ADDR_VAR 0 19
45896: PUSH
45897: LD_VAR 0 19
45901: PPUSH
45902: LD_INT 1
45904: PPUSH
45905: LD_VAR 0 9
45909: PPUSH
45910: CALL_OW 2
45914: ST_TO_ADDR
45915: GO 45946
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45917: LD_ADDR_VAR 0 19
45921: PUSH
45922: LD_VAR 0 19
45926: PPUSH
45927: LD_VAR 0 19
45931: PUSH
45932: LD_INT 1
45934: PLUS
45935: PPUSH
45936: LD_VAR 0 9
45940: PPUSH
45941: CALL_OW 2
45945: ST_TO_ADDR
45946: GO 45874
45948: POP
45949: POP
// if tmp then
45950: LD_VAR 0 19
45954: IFFALSE 45966
// f := tmp ;
45956: LD_ADDR_VAR 0 12
45960: PUSH
45961: LD_VAR 0 19
45965: ST_TO_ADDR
// end ; x := personel [ i ] ;
45966: LD_ADDR_VAR 0 13
45970: PUSH
45971: LD_VAR 0 6
45975: PUSH
45976: LD_VAR 0 8
45980: ARRAY
45981: ST_TO_ADDR
// if x = - 1 then
45982: LD_VAR 0 13
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: EQUAL
45991: IFFALSE 46200
// begin for j in f do
45993: LD_ADDR_VAR 0 9
45997: PUSH
45998: LD_VAR 0 12
46002: PUSH
46003: FOR_IN
46004: IFFALSE 46196
// repeat InitHc ;
46006: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46010: LD_VAR 0 9
46014: PPUSH
46015: CALL_OW 266
46019: PUSH
46020: LD_INT 5
46022: EQUAL
46023: IFFALSE 46093
// begin if UnitsInside ( j ) < 3 then
46025: LD_VAR 0 9
46029: PPUSH
46030: CALL_OW 313
46034: PUSH
46035: LD_INT 3
46037: LESS
46038: IFFALSE 46074
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46040: LD_INT 0
46042: PPUSH
46043: LD_INT 5
46045: PUSH
46046: LD_INT 8
46048: PUSH
46049: LD_INT 9
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: PUSH
46057: LD_VAR 0 17
46061: ARRAY
46062: PPUSH
46063: LD_VAR 0 4
46067: PPUSH
46068: CALL_OW 380
46072: GO 46091
// PrepareHuman ( false , i , skill ) ;
46074: LD_INT 0
46076: PPUSH
46077: LD_VAR 0 8
46081: PPUSH
46082: LD_VAR 0 4
46086: PPUSH
46087: CALL_OW 380
// end else
46091: GO 46110
// PrepareHuman ( false , i , skill ) ;
46093: LD_INT 0
46095: PPUSH
46096: LD_VAR 0 8
46100: PPUSH
46101: LD_VAR 0 4
46105: PPUSH
46106: CALL_OW 380
// un := CreateHuman ;
46110: LD_ADDR_VAR 0 14
46114: PUSH
46115: CALL_OW 44
46119: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46120: LD_ADDR_VAR 0 7
46124: PUSH
46125: LD_VAR 0 7
46129: PPUSH
46130: LD_INT 1
46132: PPUSH
46133: LD_VAR 0 14
46137: PPUSH
46138: CALL_OW 2
46142: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46143: LD_VAR 0 14
46147: PPUSH
46148: LD_VAR 0 9
46152: PPUSH
46153: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46157: LD_VAR 0 9
46161: PPUSH
46162: CALL_OW 313
46166: PUSH
46167: LD_INT 6
46169: EQUAL
46170: PUSH
46171: LD_VAR 0 9
46175: PPUSH
46176: CALL_OW 266
46180: PUSH
46181: LD_INT 32
46183: PUSH
46184: LD_INT 31
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: IN
46191: OR
46192: IFFALSE 46006
46194: GO 46003
46196: POP
46197: POP
// end else
46198: GO 46580
// for j = 1 to x do
46200: LD_ADDR_VAR 0 9
46204: PUSH
46205: DOUBLE
46206: LD_INT 1
46208: DEC
46209: ST_TO_ADDR
46210: LD_VAR 0 13
46214: PUSH
46215: FOR_TO
46216: IFFALSE 46578
// begin InitHc ;
46218: CALL_OW 19
// if not f then
46222: LD_VAR 0 12
46226: NOT
46227: IFFALSE 46316
// begin PrepareHuman ( false , i , skill ) ;
46229: LD_INT 0
46231: PPUSH
46232: LD_VAR 0 8
46236: PPUSH
46237: LD_VAR 0 4
46241: PPUSH
46242: CALL_OW 380
// un := CreateHuman ;
46246: LD_ADDR_VAR 0 14
46250: PUSH
46251: CALL_OW 44
46255: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46256: LD_ADDR_VAR 0 7
46260: PUSH
46261: LD_VAR 0 7
46265: PPUSH
46266: LD_INT 1
46268: PPUSH
46269: LD_VAR 0 14
46273: PPUSH
46274: CALL_OW 2
46278: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46279: LD_VAR 0 14
46283: PPUSH
46284: LD_VAR 0 1
46288: PPUSH
46289: CALL_OW 250
46293: PPUSH
46294: LD_VAR 0 1
46298: PPUSH
46299: CALL_OW 251
46303: PPUSH
46304: LD_INT 10
46306: PPUSH
46307: LD_INT 0
46309: PPUSH
46310: CALL_OW 50
// continue ;
46314: GO 46215
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46316: LD_VAR 0 12
46320: PUSH
46321: LD_INT 1
46323: ARRAY
46324: PPUSH
46325: CALL_OW 313
46329: PUSH
46330: LD_VAR 0 12
46334: PUSH
46335: LD_INT 1
46337: ARRAY
46338: PPUSH
46339: CALL_OW 266
46343: PUSH
46344: LD_INT 32
46346: PUSH
46347: LD_INT 31
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: IN
46354: AND
46355: PUSH
46356: LD_VAR 0 12
46360: PUSH
46361: LD_INT 1
46363: ARRAY
46364: PPUSH
46365: CALL_OW 313
46369: PUSH
46370: LD_INT 6
46372: EQUAL
46373: OR
46374: IFFALSE 46394
// f := Delete ( f , 1 ) ;
46376: LD_ADDR_VAR 0 12
46380: PUSH
46381: LD_VAR 0 12
46385: PPUSH
46386: LD_INT 1
46388: PPUSH
46389: CALL_OW 3
46393: ST_TO_ADDR
// if not f then
46394: LD_VAR 0 12
46398: NOT
46399: IFFALSE 46417
// begin x := x + 2 ;
46401: LD_ADDR_VAR 0 13
46405: PUSH
46406: LD_VAR 0 13
46410: PUSH
46411: LD_INT 2
46413: PLUS
46414: ST_TO_ADDR
// continue ;
46415: GO 46215
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46417: LD_VAR 0 12
46421: PUSH
46422: LD_INT 1
46424: ARRAY
46425: PPUSH
46426: CALL_OW 266
46430: PUSH
46431: LD_INT 5
46433: EQUAL
46434: IFFALSE 46508
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46436: LD_VAR 0 12
46440: PUSH
46441: LD_INT 1
46443: ARRAY
46444: PPUSH
46445: CALL_OW 313
46449: PUSH
46450: LD_INT 3
46452: LESS
46453: IFFALSE 46489
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46455: LD_INT 0
46457: PPUSH
46458: LD_INT 5
46460: PUSH
46461: LD_INT 8
46463: PUSH
46464: LD_INT 9
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: PUSH
46472: LD_VAR 0 17
46476: ARRAY
46477: PPUSH
46478: LD_VAR 0 4
46482: PPUSH
46483: CALL_OW 380
46487: GO 46506
// PrepareHuman ( false , i , skill ) ;
46489: LD_INT 0
46491: PPUSH
46492: LD_VAR 0 8
46496: PPUSH
46497: LD_VAR 0 4
46501: PPUSH
46502: CALL_OW 380
// end else
46506: GO 46525
// PrepareHuman ( false , i , skill ) ;
46508: LD_INT 0
46510: PPUSH
46511: LD_VAR 0 8
46515: PPUSH
46516: LD_VAR 0 4
46520: PPUSH
46521: CALL_OW 380
// un := CreateHuman ;
46525: LD_ADDR_VAR 0 14
46529: PUSH
46530: CALL_OW 44
46534: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46535: LD_ADDR_VAR 0 7
46539: PUSH
46540: LD_VAR 0 7
46544: PPUSH
46545: LD_INT 1
46547: PPUSH
46548: LD_VAR 0 14
46552: PPUSH
46553: CALL_OW 2
46557: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46558: LD_VAR 0 14
46562: PPUSH
46563: LD_VAR 0 12
46567: PUSH
46568: LD_INT 1
46570: ARRAY
46571: PPUSH
46572: CALL_OW 52
// end ;
46576: GO 46215
46578: POP
46579: POP
// end ;
46580: GO 45517
46582: POP
46583: POP
// result := result ^ buildings ;
46584: LD_ADDR_VAR 0 7
46588: PUSH
46589: LD_VAR 0 7
46593: PUSH
46594: LD_VAR 0 18
46598: ADD
46599: ST_TO_ADDR
// end else
46600: GO 46743
// begin for i = 1 to personel do
46602: LD_ADDR_VAR 0 8
46606: PUSH
46607: DOUBLE
46608: LD_INT 1
46610: DEC
46611: ST_TO_ADDR
46612: LD_VAR 0 6
46616: PUSH
46617: FOR_TO
46618: IFFALSE 46741
// begin if i > 4 then
46620: LD_VAR 0 8
46624: PUSH
46625: LD_INT 4
46627: GREATER
46628: IFFALSE 46632
// break ;
46630: GO 46741
// x := personel [ i ] ;
46632: LD_ADDR_VAR 0 13
46636: PUSH
46637: LD_VAR 0 6
46641: PUSH
46642: LD_VAR 0 8
46646: ARRAY
46647: ST_TO_ADDR
// if x = - 1 then
46648: LD_VAR 0 13
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: EQUAL
46657: IFFALSE 46661
// continue ;
46659: GO 46617
// PrepareHuman ( false , i , skill ) ;
46661: LD_INT 0
46663: PPUSH
46664: LD_VAR 0 8
46668: PPUSH
46669: LD_VAR 0 4
46673: PPUSH
46674: CALL_OW 380
// un := CreateHuman ;
46678: LD_ADDR_VAR 0 14
46682: PUSH
46683: CALL_OW 44
46687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46688: LD_VAR 0 14
46692: PPUSH
46693: LD_VAR 0 1
46697: PPUSH
46698: CALL_OW 250
46702: PPUSH
46703: LD_VAR 0 1
46707: PPUSH
46708: CALL_OW 251
46712: PPUSH
46713: LD_INT 10
46715: PPUSH
46716: LD_INT 0
46718: PPUSH
46719: CALL_OW 50
// result := result ^ un ;
46723: LD_ADDR_VAR 0 7
46727: PUSH
46728: LD_VAR 0 7
46732: PUSH
46733: LD_VAR 0 14
46737: ADD
46738: ST_TO_ADDR
// end ;
46739: GO 46617
46741: POP
46742: POP
// end ; end ;
46743: LD_VAR 0 7
46747: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46748: LD_INT 0
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
// result := false ;
46766: LD_ADDR_VAR 0 3
46770: PUSH
46771: LD_INT 0
46773: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46774: LD_VAR 0 1
46778: NOT
46779: PUSH
46780: LD_VAR 0 1
46784: PPUSH
46785: CALL_OW 266
46789: PUSH
46790: LD_INT 32
46792: PUSH
46793: LD_INT 33
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: IN
46800: NOT
46801: OR
46802: IFFALSE 46806
// exit ;
46804: GO 47915
// nat := GetNation ( tower ) ;
46806: LD_ADDR_VAR 0 12
46810: PUSH
46811: LD_VAR 0 1
46815: PPUSH
46816: CALL_OW 248
46820: ST_TO_ADDR
// side := GetSide ( tower ) ;
46821: LD_ADDR_VAR 0 16
46825: PUSH
46826: LD_VAR 0 1
46830: PPUSH
46831: CALL_OW 255
46835: ST_TO_ADDR
// x := GetX ( tower ) ;
46836: LD_ADDR_VAR 0 10
46840: PUSH
46841: LD_VAR 0 1
46845: PPUSH
46846: CALL_OW 250
46850: ST_TO_ADDR
// y := GetY ( tower ) ;
46851: LD_ADDR_VAR 0 11
46855: PUSH
46856: LD_VAR 0 1
46860: PPUSH
46861: CALL_OW 251
46865: ST_TO_ADDR
// if not x or not y then
46866: LD_VAR 0 10
46870: NOT
46871: PUSH
46872: LD_VAR 0 11
46876: NOT
46877: OR
46878: IFFALSE 46882
// exit ;
46880: GO 47915
// weapon := 0 ;
46882: LD_ADDR_VAR 0 18
46886: PUSH
46887: LD_INT 0
46889: ST_TO_ADDR
// fac_list := [ ] ;
46890: LD_ADDR_VAR 0 17
46894: PUSH
46895: EMPTY
46896: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46897: LD_ADDR_VAR 0 6
46901: PUSH
46902: LD_VAR 0 1
46906: PPUSH
46907: CALL_OW 274
46911: PPUSH
46912: LD_VAR 0 2
46916: PPUSH
46917: LD_INT 0
46919: PPUSH
46920: CALL 44486 0 3
46924: PPUSH
46925: LD_INT 30
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PPUSH
46935: CALL_OW 72
46939: ST_TO_ADDR
// if not factories then
46940: LD_VAR 0 6
46944: NOT
46945: IFFALSE 46949
// exit ;
46947: GO 47915
// for i in factories do
46949: LD_ADDR_VAR 0 8
46953: PUSH
46954: LD_VAR 0 6
46958: PUSH
46959: FOR_IN
46960: IFFALSE 46985
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46962: LD_ADDR_VAR 0 17
46966: PUSH
46967: LD_VAR 0 17
46971: PUSH
46972: LD_VAR 0 8
46976: PPUSH
46977: CALL_OW 478
46981: UNION
46982: ST_TO_ADDR
46983: GO 46959
46985: POP
46986: POP
// if not fac_list then
46987: LD_VAR 0 17
46991: NOT
46992: IFFALSE 46996
// exit ;
46994: GO 47915
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46996: LD_ADDR_VAR 0 5
47000: PUSH
47001: LD_INT 4
47003: PUSH
47004: LD_INT 5
47006: PUSH
47007: LD_INT 9
47009: PUSH
47010: LD_INT 10
47012: PUSH
47013: LD_INT 6
47015: PUSH
47016: LD_INT 7
47018: PUSH
47019: LD_INT 11
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 27
47033: PUSH
47034: LD_INT 28
47036: PUSH
47037: LD_INT 26
47039: PUSH
47040: LD_INT 30
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 43
47051: PUSH
47052: LD_INT 44
47054: PUSH
47055: LD_INT 46
47057: PUSH
47058: LD_INT 45
47060: PUSH
47061: LD_INT 47
47063: PUSH
47064: LD_INT 49
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: LIST
47079: PUSH
47080: LD_VAR 0 12
47084: ARRAY
47085: ST_TO_ADDR
// list := list isect fac_list ;
47086: LD_ADDR_VAR 0 5
47090: PUSH
47091: LD_VAR 0 5
47095: PUSH
47096: LD_VAR 0 17
47100: ISECT
47101: ST_TO_ADDR
// if not list then
47102: LD_VAR 0 5
47106: NOT
47107: IFFALSE 47111
// exit ;
47109: GO 47915
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47111: LD_VAR 0 12
47115: PUSH
47116: LD_INT 3
47118: EQUAL
47119: PUSH
47120: LD_INT 49
47122: PUSH
47123: LD_VAR 0 5
47127: IN
47128: AND
47129: PUSH
47130: LD_INT 31
47132: PPUSH
47133: LD_VAR 0 16
47137: PPUSH
47138: CALL_OW 321
47142: PUSH
47143: LD_INT 2
47145: EQUAL
47146: AND
47147: IFFALSE 47207
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47149: LD_INT 22
47151: PUSH
47152: LD_VAR 0 16
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 35
47163: PUSH
47164: LD_INT 49
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 91
47173: PUSH
47174: LD_VAR 0 1
47178: PUSH
47179: LD_INT 10
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: LIST
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: LIST
47191: PPUSH
47192: CALL_OW 69
47196: NOT
47197: IFFALSE 47207
// weapon := ru_time_lapser ;
47199: LD_ADDR_VAR 0 18
47203: PUSH
47204: LD_INT 49
47206: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47207: LD_VAR 0 12
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: IN
47222: PUSH
47223: LD_INT 11
47225: PUSH
47226: LD_VAR 0 5
47230: IN
47231: PUSH
47232: LD_INT 30
47234: PUSH
47235: LD_VAR 0 5
47239: IN
47240: OR
47241: AND
47242: PUSH
47243: LD_INT 6
47245: PPUSH
47246: LD_VAR 0 16
47250: PPUSH
47251: CALL_OW 321
47255: PUSH
47256: LD_INT 2
47258: EQUAL
47259: AND
47260: IFFALSE 47425
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47262: LD_INT 22
47264: PUSH
47265: LD_VAR 0 16
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 35
47279: PUSH
47280: LD_INT 11
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 35
47289: PUSH
47290: LD_INT 30
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 91
47304: PUSH
47305: LD_VAR 0 1
47309: PUSH
47310: LD_INT 18
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: PPUSH
47323: CALL_OW 69
47327: NOT
47328: PUSH
47329: LD_INT 22
47331: PUSH
47332: LD_VAR 0 16
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: LD_INT 30
47346: PUSH
47347: LD_INT 32
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 30
47356: PUSH
47357: LD_INT 33
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 91
47371: PUSH
47372: LD_VAR 0 1
47376: PUSH
47377: LD_INT 12
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: PUSH
47390: EMPTY
47391: LIST
47392: PPUSH
47393: CALL_OW 69
47397: PUSH
47398: LD_INT 2
47400: GREATER
47401: AND
47402: IFFALSE 47425
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47404: LD_ADDR_VAR 0 18
47408: PUSH
47409: LD_INT 11
47411: PUSH
47412: LD_INT 30
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_VAR 0 12
47423: ARRAY
47424: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47425: LD_VAR 0 18
47429: NOT
47430: PUSH
47431: LD_INT 40
47433: PPUSH
47434: LD_VAR 0 16
47438: PPUSH
47439: CALL_OW 321
47443: PUSH
47444: LD_INT 2
47446: EQUAL
47447: AND
47448: PUSH
47449: LD_INT 7
47451: PUSH
47452: LD_VAR 0 5
47456: IN
47457: PUSH
47458: LD_INT 28
47460: PUSH
47461: LD_VAR 0 5
47465: IN
47466: OR
47467: PUSH
47468: LD_INT 45
47470: PUSH
47471: LD_VAR 0 5
47475: IN
47476: OR
47477: AND
47478: IFFALSE 47732
// begin hex := GetHexInfo ( x , y ) ;
47480: LD_ADDR_VAR 0 4
47484: PUSH
47485: LD_VAR 0 10
47489: PPUSH
47490: LD_VAR 0 11
47494: PPUSH
47495: CALL_OW 546
47499: ST_TO_ADDR
// if hex [ 1 ] then
47500: LD_VAR 0 4
47504: PUSH
47505: LD_INT 1
47507: ARRAY
47508: IFFALSE 47512
// exit ;
47510: GO 47915
// height := hex [ 2 ] ;
47512: LD_ADDR_VAR 0 15
47516: PUSH
47517: LD_VAR 0 4
47521: PUSH
47522: LD_INT 2
47524: ARRAY
47525: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47526: LD_ADDR_VAR 0 14
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: LD_INT 5
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: ST_TO_ADDR
// for i in tmp do
47549: LD_ADDR_VAR 0 8
47553: PUSH
47554: LD_VAR 0 14
47558: PUSH
47559: FOR_IN
47560: IFFALSE 47730
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47562: LD_ADDR_VAR 0 9
47566: PUSH
47567: LD_VAR 0 10
47571: PPUSH
47572: LD_VAR 0 8
47576: PPUSH
47577: LD_INT 5
47579: PPUSH
47580: CALL_OW 272
47584: PUSH
47585: LD_VAR 0 11
47589: PPUSH
47590: LD_VAR 0 8
47594: PPUSH
47595: LD_INT 5
47597: PPUSH
47598: CALL_OW 273
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47607: LD_VAR 0 9
47611: PUSH
47612: LD_INT 1
47614: ARRAY
47615: PPUSH
47616: LD_VAR 0 9
47620: PUSH
47621: LD_INT 2
47623: ARRAY
47624: PPUSH
47625: CALL_OW 488
47629: IFFALSE 47728
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47631: LD_ADDR_VAR 0 4
47635: PUSH
47636: LD_VAR 0 9
47640: PUSH
47641: LD_INT 1
47643: ARRAY
47644: PPUSH
47645: LD_VAR 0 9
47649: PUSH
47650: LD_INT 2
47652: ARRAY
47653: PPUSH
47654: CALL_OW 546
47658: ST_TO_ADDR
// if hex [ 1 ] then
47659: LD_VAR 0 4
47663: PUSH
47664: LD_INT 1
47666: ARRAY
47667: IFFALSE 47671
// continue ;
47669: GO 47559
// h := hex [ 2 ] ;
47671: LD_ADDR_VAR 0 13
47675: PUSH
47676: LD_VAR 0 4
47680: PUSH
47681: LD_INT 2
47683: ARRAY
47684: ST_TO_ADDR
// if h + 7 < height then
47685: LD_VAR 0 13
47689: PUSH
47690: LD_INT 7
47692: PLUS
47693: PUSH
47694: LD_VAR 0 15
47698: LESS
47699: IFFALSE 47728
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47701: LD_ADDR_VAR 0 18
47705: PUSH
47706: LD_INT 7
47708: PUSH
47709: LD_INT 28
47711: PUSH
47712: LD_INT 45
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: PUSH
47720: LD_VAR 0 12
47724: ARRAY
47725: ST_TO_ADDR
// break ;
47726: GO 47730
// end ; end ; end ;
47728: GO 47559
47730: POP
47731: POP
// end ; if not weapon then
47732: LD_VAR 0 18
47736: NOT
47737: IFFALSE 47797
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47739: LD_ADDR_VAR 0 5
47743: PUSH
47744: LD_VAR 0 5
47748: PUSH
47749: LD_INT 11
47751: PUSH
47752: LD_INT 30
47754: PUSH
47755: LD_INT 49
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: LIST
47762: DIFF
47763: ST_TO_ADDR
// if not list then
47764: LD_VAR 0 5
47768: NOT
47769: IFFALSE 47773
// exit ;
47771: GO 47915
// weapon := list [ rand ( 1 , list ) ] ;
47773: LD_ADDR_VAR 0 18
47777: PUSH
47778: LD_VAR 0 5
47782: PUSH
47783: LD_INT 1
47785: PPUSH
47786: LD_VAR 0 5
47790: PPUSH
47791: CALL_OW 12
47795: ARRAY
47796: ST_TO_ADDR
// end ; if weapon then
47797: LD_VAR 0 18
47801: IFFALSE 47915
// begin tmp := CostOfWeapon ( weapon ) ;
47803: LD_ADDR_VAR 0 14
47807: PUSH
47808: LD_VAR 0 18
47812: PPUSH
47813: CALL_OW 451
47817: ST_TO_ADDR
// j := GetBase ( tower ) ;
47818: LD_ADDR_VAR 0 9
47822: PUSH
47823: LD_VAR 0 1
47827: PPUSH
47828: CALL_OW 274
47832: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47833: LD_VAR 0 9
47837: PPUSH
47838: LD_INT 1
47840: PPUSH
47841: CALL_OW 275
47845: PUSH
47846: LD_VAR 0 14
47850: PUSH
47851: LD_INT 1
47853: ARRAY
47854: GREATEREQUAL
47855: PUSH
47856: LD_VAR 0 9
47860: PPUSH
47861: LD_INT 2
47863: PPUSH
47864: CALL_OW 275
47868: PUSH
47869: LD_VAR 0 14
47873: PUSH
47874: LD_INT 2
47876: ARRAY
47877: GREATEREQUAL
47878: AND
47879: PUSH
47880: LD_VAR 0 9
47884: PPUSH
47885: LD_INT 3
47887: PPUSH
47888: CALL_OW 275
47892: PUSH
47893: LD_VAR 0 14
47897: PUSH
47898: LD_INT 3
47900: ARRAY
47901: GREATEREQUAL
47902: AND
47903: IFFALSE 47915
// result := weapon ;
47905: LD_ADDR_VAR 0 3
47909: PUSH
47910: LD_VAR 0 18
47914: ST_TO_ADDR
// end ; end ;
47915: LD_VAR 0 3
47919: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47920: LD_INT 0
47922: PPUSH
47923: PPUSH
// result := true ;
47924: LD_ADDR_VAR 0 3
47928: PUSH
47929: LD_INT 1
47931: ST_TO_ADDR
// if array1 = array2 then
47932: LD_VAR 0 1
47936: PUSH
47937: LD_VAR 0 2
47941: EQUAL
47942: IFFALSE 48002
// begin for i = 1 to array1 do
47944: LD_ADDR_VAR 0 4
47948: PUSH
47949: DOUBLE
47950: LD_INT 1
47952: DEC
47953: ST_TO_ADDR
47954: LD_VAR 0 1
47958: PUSH
47959: FOR_TO
47960: IFFALSE 47998
// if array1 [ i ] <> array2 [ i ] then
47962: LD_VAR 0 1
47966: PUSH
47967: LD_VAR 0 4
47971: ARRAY
47972: PUSH
47973: LD_VAR 0 2
47977: PUSH
47978: LD_VAR 0 4
47982: ARRAY
47983: NONEQUAL
47984: IFFALSE 47996
// begin result := false ;
47986: LD_ADDR_VAR 0 3
47990: PUSH
47991: LD_INT 0
47993: ST_TO_ADDR
// break ;
47994: GO 47998
// end ;
47996: GO 47959
47998: POP
47999: POP
// end else
48000: GO 48010
// result := false ;
48002: LD_ADDR_VAR 0 3
48006: PUSH
48007: LD_INT 0
48009: ST_TO_ADDR
// end ;
48010: LD_VAR 0 3
48014: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48015: LD_INT 0
48017: PPUSH
48018: PPUSH
// if not array1 or not array2 then
48019: LD_VAR 0 1
48023: NOT
48024: PUSH
48025: LD_VAR 0 2
48029: NOT
48030: OR
48031: IFFALSE 48035
// exit ;
48033: GO 48099
// result := true ;
48035: LD_ADDR_VAR 0 3
48039: PUSH
48040: LD_INT 1
48042: ST_TO_ADDR
// for i = 1 to array1 do
48043: LD_ADDR_VAR 0 4
48047: PUSH
48048: DOUBLE
48049: LD_INT 1
48051: DEC
48052: ST_TO_ADDR
48053: LD_VAR 0 1
48057: PUSH
48058: FOR_TO
48059: IFFALSE 48097
// if array1 [ i ] <> array2 [ i ] then
48061: LD_VAR 0 1
48065: PUSH
48066: LD_VAR 0 4
48070: ARRAY
48071: PUSH
48072: LD_VAR 0 2
48076: PUSH
48077: LD_VAR 0 4
48081: ARRAY
48082: NONEQUAL
48083: IFFALSE 48095
// begin result := false ;
48085: LD_ADDR_VAR 0 3
48089: PUSH
48090: LD_INT 0
48092: ST_TO_ADDR
// break ;
48093: GO 48097
// end ;
48095: GO 48058
48097: POP
48098: POP
// end ;
48099: LD_VAR 0 3
48103: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48104: LD_INT 0
48106: PPUSH
48107: PPUSH
48108: PPUSH
// pom := GetBase ( fac ) ;
48109: LD_ADDR_VAR 0 5
48113: PUSH
48114: LD_VAR 0 1
48118: PPUSH
48119: CALL_OW 274
48123: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48124: LD_ADDR_VAR 0 4
48128: PUSH
48129: LD_VAR 0 2
48133: PUSH
48134: LD_INT 1
48136: ARRAY
48137: PPUSH
48138: LD_VAR 0 2
48142: PUSH
48143: LD_INT 2
48145: ARRAY
48146: PPUSH
48147: LD_VAR 0 2
48151: PUSH
48152: LD_INT 3
48154: ARRAY
48155: PPUSH
48156: LD_VAR 0 2
48160: PUSH
48161: LD_INT 4
48163: ARRAY
48164: PPUSH
48165: CALL_OW 449
48169: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48170: LD_ADDR_VAR 0 3
48174: PUSH
48175: LD_VAR 0 5
48179: PPUSH
48180: LD_INT 1
48182: PPUSH
48183: CALL_OW 275
48187: PUSH
48188: LD_VAR 0 4
48192: PUSH
48193: LD_INT 1
48195: ARRAY
48196: GREATEREQUAL
48197: PUSH
48198: LD_VAR 0 5
48202: PPUSH
48203: LD_INT 2
48205: PPUSH
48206: CALL_OW 275
48210: PUSH
48211: LD_VAR 0 4
48215: PUSH
48216: LD_INT 2
48218: ARRAY
48219: GREATEREQUAL
48220: AND
48221: PUSH
48222: LD_VAR 0 5
48226: PPUSH
48227: LD_INT 3
48229: PPUSH
48230: CALL_OW 275
48234: PUSH
48235: LD_VAR 0 4
48239: PUSH
48240: LD_INT 3
48242: ARRAY
48243: GREATEREQUAL
48244: AND
48245: ST_TO_ADDR
// end ;
48246: LD_VAR 0 3
48250: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48251: LD_INT 0
48253: PPUSH
48254: PPUSH
48255: PPUSH
48256: PPUSH
// pom := GetBase ( building ) ;
48257: LD_ADDR_VAR 0 3
48261: PUSH
48262: LD_VAR 0 1
48266: PPUSH
48267: CALL_OW 274
48271: ST_TO_ADDR
// if not pom then
48272: LD_VAR 0 3
48276: NOT
48277: IFFALSE 48281
// exit ;
48279: GO 48451
// btype := GetBType ( building ) ;
48281: LD_ADDR_VAR 0 5
48285: PUSH
48286: LD_VAR 0 1
48290: PPUSH
48291: CALL_OW 266
48295: ST_TO_ADDR
// if btype = b_armoury then
48296: LD_VAR 0 5
48300: PUSH
48301: LD_INT 4
48303: EQUAL
48304: IFFALSE 48314
// btype := b_barracks ;
48306: LD_ADDR_VAR 0 5
48310: PUSH
48311: LD_INT 5
48313: ST_TO_ADDR
// if btype = b_depot then
48314: LD_VAR 0 5
48318: PUSH
48319: LD_INT 0
48321: EQUAL
48322: IFFALSE 48332
// btype := b_warehouse ;
48324: LD_ADDR_VAR 0 5
48328: PUSH
48329: LD_INT 1
48331: ST_TO_ADDR
// if btype = b_workshop then
48332: LD_VAR 0 5
48336: PUSH
48337: LD_INT 2
48339: EQUAL
48340: IFFALSE 48350
// btype := b_factory ;
48342: LD_ADDR_VAR 0 5
48346: PUSH
48347: LD_INT 3
48349: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48350: LD_ADDR_VAR 0 4
48354: PUSH
48355: LD_VAR 0 5
48359: PPUSH
48360: LD_VAR 0 1
48364: PPUSH
48365: CALL_OW 248
48369: PPUSH
48370: CALL_OW 450
48374: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48375: LD_ADDR_VAR 0 2
48379: PUSH
48380: LD_VAR 0 3
48384: PPUSH
48385: LD_INT 1
48387: PPUSH
48388: CALL_OW 275
48392: PUSH
48393: LD_VAR 0 4
48397: PUSH
48398: LD_INT 1
48400: ARRAY
48401: GREATEREQUAL
48402: PUSH
48403: LD_VAR 0 3
48407: PPUSH
48408: LD_INT 2
48410: PPUSH
48411: CALL_OW 275
48415: PUSH
48416: LD_VAR 0 4
48420: PUSH
48421: LD_INT 2
48423: ARRAY
48424: GREATEREQUAL
48425: AND
48426: PUSH
48427: LD_VAR 0 3
48431: PPUSH
48432: LD_INT 3
48434: PPUSH
48435: CALL_OW 275
48439: PUSH
48440: LD_VAR 0 4
48444: PUSH
48445: LD_INT 3
48447: ARRAY
48448: GREATEREQUAL
48449: AND
48450: ST_TO_ADDR
// end ;
48451: LD_VAR 0 2
48455: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48456: LD_INT 0
48458: PPUSH
48459: PPUSH
48460: PPUSH
// pom := GetBase ( building ) ;
48461: LD_ADDR_VAR 0 4
48465: PUSH
48466: LD_VAR 0 1
48470: PPUSH
48471: CALL_OW 274
48475: ST_TO_ADDR
// if not pom then
48476: LD_VAR 0 4
48480: NOT
48481: IFFALSE 48485
// exit ;
48483: GO 48586
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48485: LD_ADDR_VAR 0 5
48489: PUSH
48490: LD_VAR 0 2
48494: PPUSH
48495: LD_VAR 0 1
48499: PPUSH
48500: CALL_OW 248
48504: PPUSH
48505: CALL_OW 450
48509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48510: LD_ADDR_VAR 0 3
48514: PUSH
48515: LD_VAR 0 4
48519: PPUSH
48520: LD_INT 1
48522: PPUSH
48523: CALL_OW 275
48527: PUSH
48528: LD_VAR 0 5
48532: PUSH
48533: LD_INT 1
48535: ARRAY
48536: GREATEREQUAL
48537: PUSH
48538: LD_VAR 0 4
48542: PPUSH
48543: LD_INT 2
48545: PPUSH
48546: CALL_OW 275
48550: PUSH
48551: LD_VAR 0 5
48555: PUSH
48556: LD_INT 2
48558: ARRAY
48559: GREATEREQUAL
48560: AND
48561: PUSH
48562: LD_VAR 0 4
48566: PPUSH
48567: LD_INT 3
48569: PPUSH
48570: CALL_OW 275
48574: PUSH
48575: LD_VAR 0 5
48579: PUSH
48580: LD_INT 3
48582: ARRAY
48583: GREATEREQUAL
48584: AND
48585: ST_TO_ADDR
// end ;
48586: LD_VAR 0 3
48590: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48591: LD_INT 0
48593: PPUSH
48594: PPUSH
48595: PPUSH
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
48600: PPUSH
48601: PPUSH
48602: PPUSH
48603: PPUSH
// result := false ;
48604: LD_ADDR_VAR 0 8
48608: PUSH
48609: LD_INT 0
48611: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48612: LD_VAR 0 5
48616: NOT
48617: PUSH
48618: LD_VAR 0 1
48622: NOT
48623: OR
48624: PUSH
48625: LD_VAR 0 2
48629: NOT
48630: OR
48631: PUSH
48632: LD_VAR 0 3
48636: NOT
48637: OR
48638: IFFALSE 48642
// exit ;
48640: GO 49456
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48642: LD_ADDR_VAR 0 14
48646: PUSH
48647: LD_VAR 0 1
48651: PPUSH
48652: LD_VAR 0 2
48656: PPUSH
48657: LD_VAR 0 3
48661: PPUSH
48662: LD_VAR 0 4
48666: PPUSH
48667: LD_VAR 0 5
48671: PUSH
48672: LD_INT 1
48674: ARRAY
48675: PPUSH
48676: CALL_OW 248
48680: PPUSH
48681: LD_INT 0
48683: PPUSH
48684: CALL 50709 0 6
48688: ST_TO_ADDR
// if not hexes then
48689: LD_VAR 0 14
48693: NOT
48694: IFFALSE 48698
// exit ;
48696: GO 49456
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48698: LD_ADDR_VAR 0 17
48702: PUSH
48703: LD_VAR 0 5
48707: PPUSH
48708: LD_INT 22
48710: PUSH
48711: LD_VAR 0 13
48715: PPUSH
48716: CALL_OW 255
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 30
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 30
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PPUSH
48757: CALL_OW 72
48761: ST_TO_ADDR
// for i = 1 to hexes do
48762: LD_ADDR_VAR 0 9
48766: PUSH
48767: DOUBLE
48768: LD_INT 1
48770: DEC
48771: ST_TO_ADDR
48772: LD_VAR 0 14
48776: PUSH
48777: FOR_TO
48778: IFFALSE 49454
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48780: LD_ADDR_VAR 0 13
48784: PUSH
48785: LD_VAR 0 14
48789: PUSH
48790: LD_VAR 0 9
48794: ARRAY
48795: PUSH
48796: LD_INT 1
48798: ARRAY
48799: PPUSH
48800: LD_VAR 0 14
48804: PUSH
48805: LD_VAR 0 9
48809: ARRAY
48810: PUSH
48811: LD_INT 2
48813: ARRAY
48814: PPUSH
48815: CALL_OW 428
48819: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48820: LD_VAR 0 14
48824: PUSH
48825: LD_VAR 0 9
48829: ARRAY
48830: PUSH
48831: LD_INT 1
48833: ARRAY
48834: PPUSH
48835: LD_VAR 0 14
48839: PUSH
48840: LD_VAR 0 9
48844: ARRAY
48845: PUSH
48846: LD_INT 2
48848: ARRAY
48849: PPUSH
48850: CALL_OW 351
48854: PUSH
48855: LD_VAR 0 14
48859: PUSH
48860: LD_VAR 0 9
48864: ARRAY
48865: PUSH
48866: LD_INT 1
48868: ARRAY
48869: PPUSH
48870: LD_VAR 0 14
48874: PUSH
48875: LD_VAR 0 9
48879: ARRAY
48880: PUSH
48881: LD_INT 2
48883: ARRAY
48884: PPUSH
48885: CALL_OW 488
48889: NOT
48890: OR
48891: PUSH
48892: LD_VAR 0 13
48896: PPUSH
48897: CALL_OW 247
48901: PUSH
48902: LD_INT 3
48904: EQUAL
48905: OR
48906: IFFALSE 48912
// exit ;
48908: POP
48909: POP
48910: GO 49456
// if not tmp then
48912: LD_VAR 0 13
48916: NOT
48917: IFFALSE 48921
// continue ;
48919: GO 48777
// result := true ;
48921: LD_ADDR_VAR 0 8
48925: PUSH
48926: LD_INT 1
48928: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48929: LD_VAR 0 6
48933: PUSH
48934: LD_VAR 0 13
48938: PPUSH
48939: CALL_OW 247
48943: PUSH
48944: LD_INT 2
48946: EQUAL
48947: AND
48948: PUSH
48949: LD_VAR 0 13
48953: PPUSH
48954: CALL_OW 263
48958: PUSH
48959: LD_INT 1
48961: EQUAL
48962: AND
48963: IFFALSE 49127
// begin if IsDrivenBy ( tmp ) then
48965: LD_VAR 0 13
48969: PPUSH
48970: CALL_OW 311
48974: IFFALSE 48978
// continue ;
48976: GO 48777
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48978: LD_VAR 0 6
48982: PPUSH
48983: LD_INT 3
48985: PUSH
48986: LD_INT 60
48988: PUSH
48989: EMPTY
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: LD_INT 55
49001: PUSH
49002: EMPTY
49003: LIST
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PPUSH
49013: CALL_OW 72
49017: IFFALSE 49125
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49019: LD_ADDR_VAR 0 18
49023: PUSH
49024: LD_VAR 0 6
49028: PPUSH
49029: LD_INT 3
49031: PUSH
49032: LD_INT 60
49034: PUSH
49035: EMPTY
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: LD_INT 55
49047: PUSH
49048: EMPTY
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PPUSH
49059: CALL_OW 72
49063: PUSH
49064: LD_INT 1
49066: ARRAY
49067: ST_TO_ADDR
// if IsInUnit ( driver ) then
49068: LD_VAR 0 18
49072: PPUSH
49073: CALL_OW 310
49077: IFFALSE 49088
// ComExit ( driver ) ;
49079: LD_VAR 0 18
49083: PPUSH
49084: CALL 74490 0 1
// AddComEnterUnit ( driver , tmp ) ;
49088: LD_VAR 0 18
49092: PPUSH
49093: LD_VAR 0 13
49097: PPUSH
49098: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49102: LD_VAR 0 18
49106: PPUSH
49107: LD_VAR 0 7
49111: PPUSH
49112: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49116: LD_VAR 0 18
49120: PPUSH
49121: CALL_OW 181
// end ; continue ;
49125: GO 48777
// end ; if not cleaners or not tmp in cleaners then
49127: LD_VAR 0 6
49131: NOT
49132: PUSH
49133: LD_VAR 0 13
49137: PUSH
49138: LD_VAR 0 6
49142: IN
49143: NOT
49144: OR
49145: IFFALSE 49452
// begin if dep then
49147: LD_VAR 0 17
49151: IFFALSE 49287
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49153: LD_ADDR_VAR 0 16
49157: PUSH
49158: LD_VAR 0 17
49162: PUSH
49163: LD_INT 1
49165: ARRAY
49166: PPUSH
49167: CALL_OW 250
49171: PPUSH
49172: LD_VAR 0 17
49176: PUSH
49177: LD_INT 1
49179: ARRAY
49180: PPUSH
49181: CALL_OW 254
49185: PPUSH
49186: LD_INT 5
49188: PPUSH
49189: CALL_OW 272
49193: PUSH
49194: LD_VAR 0 17
49198: PUSH
49199: LD_INT 1
49201: ARRAY
49202: PPUSH
49203: CALL_OW 251
49207: PPUSH
49208: LD_VAR 0 17
49212: PUSH
49213: LD_INT 1
49215: ARRAY
49216: PPUSH
49217: CALL_OW 254
49221: PPUSH
49222: LD_INT 5
49224: PPUSH
49225: CALL_OW 273
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49234: LD_VAR 0 16
49238: PUSH
49239: LD_INT 1
49241: ARRAY
49242: PPUSH
49243: LD_VAR 0 16
49247: PUSH
49248: LD_INT 2
49250: ARRAY
49251: PPUSH
49252: CALL_OW 488
49256: IFFALSE 49287
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49258: LD_VAR 0 13
49262: PPUSH
49263: LD_VAR 0 16
49267: PUSH
49268: LD_INT 1
49270: ARRAY
49271: PPUSH
49272: LD_VAR 0 16
49276: PUSH
49277: LD_INT 2
49279: ARRAY
49280: PPUSH
49281: CALL_OW 111
// continue ;
49285: GO 48777
// end ; end ; r := GetDir ( tmp ) ;
49287: LD_ADDR_VAR 0 15
49291: PUSH
49292: LD_VAR 0 13
49296: PPUSH
49297: CALL_OW 254
49301: ST_TO_ADDR
// if r = 5 then
49302: LD_VAR 0 15
49306: PUSH
49307: LD_INT 5
49309: EQUAL
49310: IFFALSE 49320
// r := 0 ;
49312: LD_ADDR_VAR 0 15
49316: PUSH
49317: LD_INT 0
49319: ST_TO_ADDR
// for j = r to 5 do
49320: LD_ADDR_VAR 0 10
49324: PUSH
49325: DOUBLE
49326: LD_VAR 0 15
49330: DEC
49331: ST_TO_ADDR
49332: LD_INT 5
49334: PUSH
49335: FOR_TO
49336: IFFALSE 49450
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49338: LD_ADDR_VAR 0 11
49342: PUSH
49343: LD_VAR 0 13
49347: PPUSH
49348: CALL_OW 250
49352: PPUSH
49353: LD_VAR 0 10
49357: PPUSH
49358: LD_INT 2
49360: PPUSH
49361: CALL_OW 272
49365: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49366: LD_ADDR_VAR 0 12
49370: PUSH
49371: LD_VAR 0 13
49375: PPUSH
49376: CALL_OW 251
49380: PPUSH
49381: LD_VAR 0 10
49385: PPUSH
49386: LD_INT 2
49388: PPUSH
49389: CALL_OW 273
49393: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49394: LD_VAR 0 11
49398: PPUSH
49399: LD_VAR 0 12
49403: PPUSH
49404: CALL_OW 488
49408: PUSH
49409: LD_VAR 0 11
49413: PPUSH
49414: LD_VAR 0 12
49418: PPUSH
49419: CALL_OW 428
49423: NOT
49424: AND
49425: IFFALSE 49448
// begin ComMoveXY ( tmp , _x , _y ) ;
49427: LD_VAR 0 13
49431: PPUSH
49432: LD_VAR 0 11
49436: PPUSH
49437: LD_VAR 0 12
49441: PPUSH
49442: CALL_OW 111
// break ;
49446: GO 49450
// end ; end ;
49448: GO 49335
49450: POP
49451: POP
// end ; end ;
49452: GO 48777
49454: POP
49455: POP
// end ;
49456: LD_VAR 0 8
49460: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49461: LD_INT 0
49463: PPUSH
// result := true ;
49464: LD_ADDR_VAR 0 3
49468: PUSH
49469: LD_INT 1
49471: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49472: LD_VAR 0 2
49476: PUSH
49477: LD_INT 24
49479: DOUBLE
49480: EQUAL
49481: IFTRUE 49491
49483: LD_INT 33
49485: DOUBLE
49486: EQUAL
49487: IFTRUE 49491
49489: GO 49516
49491: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49492: LD_ADDR_VAR 0 3
49496: PUSH
49497: LD_INT 32
49499: PPUSH
49500: LD_VAR 0 1
49504: PPUSH
49505: CALL_OW 321
49509: PUSH
49510: LD_INT 2
49512: EQUAL
49513: ST_TO_ADDR
49514: GO 49832
49516: LD_INT 20
49518: DOUBLE
49519: EQUAL
49520: IFTRUE 49524
49522: GO 49549
49524: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49525: LD_ADDR_VAR 0 3
49529: PUSH
49530: LD_INT 6
49532: PPUSH
49533: LD_VAR 0 1
49537: PPUSH
49538: CALL_OW 321
49542: PUSH
49543: LD_INT 2
49545: EQUAL
49546: ST_TO_ADDR
49547: GO 49832
49549: LD_INT 22
49551: DOUBLE
49552: EQUAL
49553: IFTRUE 49563
49555: LD_INT 36
49557: DOUBLE
49558: EQUAL
49559: IFTRUE 49563
49561: GO 49588
49563: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49564: LD_ADDR_VAR 0 3
49568: PUSH
49569: LD_INT 15
49571: PPUSH
49572: LD_VAR 0 1
49576: PPUSH
49577: CALL_OW 321
49581: PUSH
49582: LD_INT 2
49584: EQUAL
49585: ST_TO_ADDR
49586: GO 49832
49588: LD_INT 30
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 49621
49596: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49597: LD_ADDR_VAR 0 3
49601: PUSH
49602: LD_INT 20
49604: PPUSH
49605: LD_VAR 0 1
49609: PPUSH
49610: CALL_OW 321
49614: PUSH
49615: LD_INT 2
49617: EQUAL
49618: ST_TO_ADDR
49619: GO 49832
49621: LD_INT 28
49623: DOUBLE
49624: EQUAL
49625: IFTRUE 49635
49627: LD_INT 21
49629: DOUBLE
49630: EQUAL
49631: IFTRUE 49635
49633: GO 49660
49635: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49636: LD_ADDR_VAR 0 3
49640: PUSH
49641: LD_INT 21
49643: PPUSH
49644: LD_VAR 0 1
49648: PPUSH
49649: CALL_OW 321
49653: PUSH
49654: LD_INT 2
49656: EQUAL
49657: ST_TO_ADDR
49658: GO 49832
49660: LD_INT 16
49662: DOUBLE
49663: EQUAL
49664: IFTRUE 49668
49666: GO 49693
49668: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49669: LD_ADDR_VAR 0 3
49673: PUSH
49674: LD_INT 84
49676: PPUSH
49677: LD_VAR 0 1
49681: PPUSH
49682: CALL_OW 321
49686: PUSH
49687: LD_INT 2
49689: EQUAL
49690: ST_TO_ADDR
49691: GO 49832
49693: LD_INT 19
49695: DOUBLE
49696: EQUAL
49697: IFTRUE 49707
49699: LD_INT 23
49701: DOUBLE
49702: EQUAL
49703: IFTRUE 49707
49705: GO 49732
49707: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49708: LD_ADDR_VAR 0 3
49712: PUSH
49713: LD_INT 83
49715: PPUSH
49716: LD_VAR 0 1
49720: PPUSH
49721: CALL_OW 321
49725: PUSH
49726: LD_INT 2
49728: EQUAL
49729: ST_TO_ADDR
49730: GO 49832
49732: LD_INT 17
49734: DOUBLE
49735: EQUAL
49736: IFTRUE 49740
49738: GO 49765
49740: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49741: LD_ADDR_VAR 0 3
49745: PUSH
49746: LD_INT 39
49748: PPUSH
49749: LD_VAR 0 1
49753: PPUSH
49754: CALL_OW 321
49758: PUSH
49759: LD_INT 2
49761: EQUAL
49762: ST_TO_ADDR
49763: GO 49832
49765: LD_INT 18
49767: DOUBLE
49768: EQUAL
49769: IFTRUE 49773
49771: GO 49798
49773: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49774: LD_ADDR_VAR 0 3
49778: PUSH
49779: LD_INT 40
49781: PPUSH
49782: LD_VAR 0 1
49786: PPUSH
49787: CALL_OW 321
49791: PUSH
49792: LD_INT 2
49794: EQUAL
49795: ST_TO_ADDR
49796: GO 49832
49798: LD_INT 27
49800: DOUBLE
49801: EQUAL
49802: IFTRUE 49806
49804: GO 49831
49806: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49807: LD_ADDR_VAR 0 3
49811: PUSH
49812: LD_INT 35
49814: PPUSH
49815: LD_VAR 0 1
49819: PPUSH
49820: CALL_OW 321
49824: PUSH
49825: LD_INT 2
49827: EQUAL
49828: ST_TO_ADDR
49829: GO 49832
49831: POP
// end ;
49832: LD_VAR 0 3
49836: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49837: LD_INT 0
49839: PPUSH
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
// result := false ;
49850: LD_ADDR_VAR 0 6
49854: PUSH
49855: LD_INT 0
49857: ST_TO_ADDR
// if btype = b_depot then
49858: LD_VAR 0 2
49862: PUSH
49863: LD_INT 0
49865: EQUAL
49866: IFFALSE 49878
// begin result := true ;
49868: LD_ADDR_VAR 0 6
49872: PUSH
49873: LD_INT 1
49875: ST_TO_ADDR
// exit ;
49876: GO 50704
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49878: LD_VAR 0 1
49882: NOT
49883: PUSH
49884: LD_VAR 0 1
49888: PPUSH
49889: CALL_OW 266
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: IN
49904: NOT
49905: OR
49906: PUSH
49907: LD_VAR 0 2
49911: NOT
49912: OR
49913: PUSH
49914: LD_VAR 0 5
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: LD_INT 4
49933: PUSH
49934: LD_INT 5
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: IN
49945: NOT
49946: OR
49947: PUSH
49948: LD_VAR 0 3
49952: PPUSH
49953: LD_VAR 0 4
49957: PPUSH
49958: CALL_OW 488
49962: NOT
49963: OR
49964: IFFALSE 49968
// exit ;
49966: GO 50704
// side := GetSide ( depot ) ;
49968: LD_ADDR_VAR 0 9
49972: PUSH
49973: LD_VAR 0 1
49977: PPUSH
49978: CALL_OW 255
49982: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49983: LD_VAR 0 9
49987: PPUSH
49988: LD_VAR 0 2
49992: PPUSH
49993: CALL 49461 0 2
49997: NOT
49998: IFFALSE 50002
// exit ;
50000: GO 50704
// pom := GetBase ( depot ) ;
50002: LD_ADDR_VAR 0 10
50006: PUSH
50007: LD_VAR 0 1
50011: PPUSH
50012: CALL_OW 274
50016: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50017: LD_ADDR_VAR 0 11
50021: PUSH
50022: LD_VAR 0 2
50026: PPUSH
50027: LD_VAR 0 1
50031: PPUSH
50032: CALL_OW 248
50036: PPUSH
50037: CALL_OW 450
50041: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50042: LD_VAR 0 10
50046: PPUSH
50047: LD_INT 1
50049: PPUSH
50050: CALL_OW 275
50054: PUSH
50055: LD_VAR 0 11
50059: PUSH
50060: LD_INT 1
50062: ARRAY
50063: GREATEREQUAL
50064: PUSH
50065: LD_VAR 0 10
50069: PPUSH
50070: LD_INT 2
50072: PPUSH
50073: CALL_OW 275
50077: PUSH
50078: LD_VAR 0 11
50082: PUSH
50083: LD_INT 2
50085: ARRAY
50086: GREATEREQUAL
50087: AND
50088: PUSH
50089: LD_VAR 0 10
50093: PPUSH
50094: LD_INT 3
50096: PPUSH
50097: CALL_OW 275
50101: PUSH
50102: LD_VAR 0 11
50106: PUSH
50107: LD_INT 3
50109: ARRAY
50110: GREATEREQUAL
50111: AND
50112: NOT
50113: IFFALSE 50117
// exit ;
50115: GO 50704
// if GetBType ( depot ) = b_depot then
50117: LD_VAR 0 1
50121: PPUSH
50122: CALL_OW 266
50126: PUSH
50127: LD_INT 0
50129: EQUAL
50130: IFFALSE 50142
// dist := 28 else
50132: LD_ADDR_VAR 0 14
50136: PUSH
50137: LD_INT 28
50139: ST_TO_ADDR
50140: GO 50150
// dist := 36 ;
50142: LD_ADDR_VAR 0 14
50146: PUSH
50147: LD_INT 36
50149: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50150: LD_VAR 0 1
50154: PPUSH
50155: LD_VAR 0 3
50159: PPUSH
50160: LD_VAR 0 4
50164: PPUSH
50165: CALL_OW 297
50169: PUSH
50170: LD_VAR 0 14
50174: GREATER
50175: IFFALSE 50179
// exit ;
50177: GO 50704
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50179: LD_ADDR_VAR 0 12
50183: PUSH
50184: LD_VAR 0 2
50188: PPUSH
50189: LD_VAR 0 3
50193: PPUSH
50194: LD_VAR 0 4
50198: PPUSH
50199: LD_VAR 0 5
50203: PPUSH
50204: LD_VAR 0 1
50208: PPUSH
50209: CALL_OW 248
50213: PPUSH
50214: LD_INT 0
50216: PPUSH
50217: CALL 50709 0 6
50221: ST_TO_ADDR
// if not hexes then
50222: LD_VAR 0 12
50226: NOT
50227: IFFALSE 50231
// exit ;
50229: GO 50704
// hex := GetHexInfo ( x , y ) ;
50231: LD_ADDR_VAR 0 15
50235: PUSH
50236: LD_VAR 0 3
50240: PPUSH
50241: LD_VAR 0 4
50245: PPUSH
50246: CALL_OW 546
50250: ST_TO_ADDR
// if hex [ 1 ] then
50251: LD_VAR 0 15
50255: PUSH
50256: LD_INT 1
50258: ARRAY
50259: IFFALSE 50263
// exit ;
50261: GO 50704
// height := hex [ 2 ] ;
50263: LD_ADDR_VAR 0 13
50267: PUSH
50268: LD_VAR 0 15
50272: PUSH
50273: LD_INT 2
50275: ARRAY
50276: ST_TO_ADDR
// for i = 1 to hexes do
50277: LD_ADDR_VAR 0 7
50281: PUSH
50282: DOUBLE
50283: LD_INT 1
50285: DEC
50286: ST_TO_ADDR
50287: LD_VAR 0 12
50291: PUSH
50292: FOR_TO
50293: IFFALSE 50623
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50295: LD_VAR 0 12
50299: PUSH
50300: LD_VAR 0 7
50304: ARRAY
50305: PUSH
50306: LD_INT 1
50308: ARRAY
50309: PPUSH
50310: LD_VAR 0 12
50314: PUSH
50315: LD_VAR 0 7
50319: ARRAY
50320: PUSH
50321: LD_INT 2
50323: ARRAY
50324: PPUSH
50325: CALL_OW 488
50329: NOT
50330: PUSH
50331: LD_VAR 0 12
50335: PUSH
50336: LD_VAR 0 7
50340: ARRAY
50341: PUSH
50342: LD_INT 1
50344: ARRAY
50345: PPUSH
50346: LD_VAR 0 12
50350: PUSH
50351: LD_VAR 0 7
50355: ARRAY
50356: PUSH
50357: LD_INT 2
50359: ARRAY
50360: PPUSH
50361: CALL_OW 428
50365: PUSH
50366: LD_INT 0
50368: GREATER
50369: OR
50370: PUSH
50371: LD_VAR 0 12
50375: PUSH
50376: LD_VAR 0 7
50380: ARRAY
50381: PUSH
50382: LD_INT 1
50384: ARRAY
50385: PPUSH
50386: LD_VAR 0 12
50390: PUSH
50391: LD_VAR 0 7
50395: ARRAY
50396: PUSH
50397: LD_INT 2
50399: ARRAY
50400: PPUSH
50401: CALL_OW 351
50405: OR
50406: IFFALSE 50412
// exit ;
50408: POP
50409: POP
50410: GO 50704
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50412: LD_ADDR_VAR 0 8
50416: PUSH
50417: LD_VAR 0 12
50421: PUSH
50422: LD_VAR 0 7
50426: ARRAY
50427: PUSH
50428: LD_INT 1
50430: ARRAY
50431: PPUSH
50432: LD_VAR 0 12
50436: PUSH
50437: LD_VAR 0 7
50441: ARRAY
50442: PUSH
50443: LD_INT 2
50445: ARRAY
50446: PPUSH
50447: CALL_OW 546
50451: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50452: LD_VAR 0 8
50456: PUSH
50457: LD_INT 1
50459: ARRAY
50460: PUSH
50461: LD_VAR 0 8
50465: PUSH
50466: LD_INT 2
50468: ARRAY
50469: PUSH
50470: LD_VAR 0 13
50474: PUSH
50475: LD_INT 2
50477: PLUS
50478: GREATER
50479: OR
50480: PUSH
50481: LD_VAR 0 8
50485: PUSH
50486: LD_INT 2
50488: ARRAY
50489: PUSH
50490: LD_VAR 0 13
50494: PUSH
50495: LD_INT 2
50497: MINUS
50498: LESS
50499: OR
50500: PUSH
50501: LD_VAR 0 8
50505: PUSH
50506: LD_INT 3
50508: ARRAY
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 8
50515: PUSH
50516: LD_INT 9
50518: PUSH
50519: LD_INT 10
50521: PUSH
50522: LD_INT 11
50524: PUSH
50525: LD_INT 12
50527: PUSH
50528: LD_INT 13
50530: PUSH
50531: LD_INT 16
50533: PUSH
50534: LD_INT 17
50536: PUSH
50537: LD_INT 18
50539: PUSH
50540: LD_INT 19
50542: PUSH
50543: LD_INT 20
50545: PUSH
50546: LD_INT 21
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: IN
50564: NOT
50565: OR
50566: PUSH
50567: LD_VAR 0 8
50571: PUSH
50572: LD_INT 5
50574: ARRAY
50575: NOT
50576: OR
50577: PUSH
50578: LD_VAR 0 8
50582: PUSH
50583: LD_INT 6
50585: ARRAY
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 7
50595: PUSH
50596: LD_INT 9
50598: PUSH
50599: LD_INT 10
50601: PUSH
50602: LD_INT 11
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: IN
50613: NOT
50614: OR
50615: IFFALSE 50621
// exit ;
50617: POP
50618: POP
50619: GO 50704
// end ;
50621: GO 50292
50623: POP
50624: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50625: LD_VAR 0 9
50629: PPUSH
50630: LD_VAR 0 3
50634: PPUSH
50635: LD_VAR 0 4
50639: PPUSH
50640: LD_INT 20
50642: PPUSH
50643: CALL 42627 0 4
50647: PUSH
50648: LD_INT 4
50650: ARRAY
50651: IFFALSE 50655
// exit ;
50653: GO 50704
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50655: LD_VAR 0 2
50659: PUSH
50660: LD_INT 29
50662: PUSH
50663: LD_INT 30
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: IN
50670: PUSH
50671: LD_VAR 0 3
50675: PPUSH
50676: LD_VAR 0 4
50680: PPUSH
50681: LD_VAR 0 9
50685: PPUSH
50686: CALL_OW 440
50690: NOT
50691: AND
50692: IFFALSE 50696
// exit ;
50694: GO 50704
// result := true ;
50696: LD_ADDR_VAR 0 6
50700: PUSH
50701: LD_INT 1
50703: ST_TO_ADDR
// end ;
50704: LD_VAR 0 6
50708: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50709: LD_INT 0
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
// result = [ ] ;
50769: LD_ADDR_VAR 0 7
50773: PUSH
50774: EMPTY
50775: ST_TO_ADDR
// temp_list = [ ] ;
50776: LD_ADDR_VAR 0 9
50780: PUSH
50781: EMPTY
50782: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50783: LD_VAR 0 4
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: LD_INT 4
50802: PUSH
50803: LD_INT 5
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: IN
50814: NOT
50815: PUSH
50816: LD_VAR 0 1
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: IN
50831: PUSH
50832: LD_VAR 0 5
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: IN
50851: NOT
50852: AND
50853: OR
50854: IFFALSE 50858
// exit ;
50856: GO 69249
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50858: LD_VAR 0 1
50862: PUSH
50863: LD_INT 6
50865: PUSH
50866: LD_INT 7
50868: PUSH
50869: LD_INT 8
50871: PUSH
50872: LD_INT 13
50874: PUSH
50875: LD_INT 12
50877: PUSH
50878: LD_INT 15
50880: PUSH
50881: LD_INT 11
50883: PUSH
50884: LD_INT 14
50886: PUSH
50887: LD_INT 10
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: IN
50901: IFFALSE 50911
// btype = b_lab ;
50903: LD_ADDR_VAR 0 1
50907: PUSH
50908: LD_INT 6
50910: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50911: LD_VAR 0 6
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: IN
50930: NOT
50931: PUSH
50932: LD_VAR 0 1
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: LD_INT 6
50951: PUSH
50952: LD_INT 36
50954: PUSH
50955: LD_INT 4
50957: PUSH
50958: LD_INT 5
50960: PUSH
50961: LD_INT 31
50963: PUSH
50964: LD_INT 32
50966: PUSH
50967: LD_INT 33
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: IN
50983: NOT
50984: PUSH
50985: LD_VAR 0 6
50989: PUSH
50990: LD_INT 1
50992: EQUAL
50993: AND
50994: OR
50995: PUSH
50996: LD_VAR 0 1
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: IN
51011: NOT
51012: PUSH
51013: LD_VAR 0 6
51017: PUSH
51018: LD_INT 2
51020: EQUAL
51021: AND
51022: OR
51023: IFFALSE 51033
// mode = 0 ;
51025: LD_ADDR_VAR 0 6
51029: PUSH
51030: LD_INT 0
51032: ST_TO_ADDR
// case mode of 0 :
51033: LD_VAR 0 6
51037: PUSH
51038: LD_INT 0
51040: DOUBLE
51041: EQUAL
51042: IFTRUE 51046
51044: GO 62499
51046: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51047: LD_ADDR_VAR 0 11
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51240: LD_ADDR_VAR 0 12
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51436: LD_ADDR_VAR 0 13
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 3
51607: NEG
51608: PUSH
51609: LD_INT 3
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51635: LD_ADDR_VAR 0 14
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 3
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51831: LD_ADDR_VAR 0 15
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52024: LD_ADDR_VAR 0 16
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52217: LD_ADDR_VAR 0 17
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52447: LD_ADDR_VAR 0 18
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52677: LD_ADDR_VAR 0 19
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52907: LD_ADDR_VAR 0 20
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53137: LD_ADDR_VAR 0 21
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53367: LD_ADDR_VAR 0 22
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53597: LD_ADDR_VAR 0 23
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53877: LD_ADDR_VAR 0 24
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54153: LD_ADDR_VAR 0 25
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 3
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54427: LD_ADDR_VAR 0 26
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54703: LD_ADDR_VAR 0 27
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54983: LD_ADDR_VAR 0 28
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55265: LD_ADDR_VAR 0 29
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55544: LD_ADDR_VAR 0 30
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: NEG
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55822: LD_ADDR_VAR 0 31
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56100: LD_ADDR_VAR 0 32
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 3
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56378: LD_ADDR_VAR 0 33
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56657: LD_ADDR_VAR 0 34
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 3
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 3
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56937: LD_ADDR_VAR 0 35
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57049: LD_ADDR_VAR 0 36
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57161: LD_ADDR_VAR 0 37
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57273: LD_ADDR_VAR 0 38
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57385: LD_ADDR_VAR 0 39
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57497: LD_ADDR_VAR 0 40
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57609: LD_ADDR_VAR 0 41
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: LD_INT 3
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 3
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: NEG
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57959: LD_ADDR_VAR 0 42
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 3
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 3
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58309: LD_ADDR_VAR 0 43
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 3
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 3
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58657: LD_ADDR_VAR 0 44
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 3
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: NEG
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59007: LD_ADDR_VAR 0 45
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 2
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 3
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59357: LD_ADDR_VAR 0 46
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 3
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: LD_INT 3
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 3
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59705: LD_ADDR_VAR 0 47
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 2
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59856: LD_ADDR_VAR 0 48
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60003: LD_ADDR_VAR 0 49
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60147: LD_ADDR_VAR 0 50
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60291: LD_ADDR_VAR 0 51
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60438: LD_ADDR_VAR 0 52
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60589: LD_ADDR_VAR 0 53
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60819: LD_ADDR_VAR 0 54
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61049: LD_ADDR_VAR 0 55
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 2
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61279: LD_ADDR_VAR 0 56
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: LD_INT 2
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 2
61466: NEG
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61509: LD_ADDR_VAR 0 57
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61739: LD_ADDR_VAR 0 58
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 2
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: LD_INT 2
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61969: LD_ADDR_VAR 0 59
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62057: LD_ADDR_VAR 0 60
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62145: LD_ADDR_VAR 0 61
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62233: LD_ADDR_VAR 0 62
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62321: LD_ADDR_VAR 0 63
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62409: LD_ADDR_VAR 0 64
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: ST_TO_ADDR
// end ; 1 :
62497: GO 68394
62499: LD_INT 1
62501: DOUBLE
62502: EQUAL
62503: IFTRUE 62507
62505: GO 65130
62507: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62508: LD_ADDR_VAR 0 11
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: LD_INT 3
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 3
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: LIST
62551: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62552: LD_ADDR_VAR 0 12
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62593: LD_ADDR_VAR 0 13
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62633: LD_ADDR_VAR 0 14
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 3
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: LIST
62673: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62674: LD_ADDR_VAR 0 15
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 3
62703: NEG
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: LIST
62717: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62718: LD_ADDR_VAR 0 16
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 3
62737: NEG
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 3
62749: NEG
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62764: LD_ADDR_VAR 0 17
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: LD_INT 3
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 3
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: LIST
62807: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62808: LD_ADDR_VAR 0 18
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62849: LD_ADDR_VAR 0 19
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: LD_INT 3
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62889: LD_ADDR_VAR 0 20
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 3
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 3
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 2
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62930: LD_ADDR_VAR 0 21
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 3
62948: NEG
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: NEG
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: LIST
62973: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62974: LD_ADDR_VAR 0 22
62978: PUSH
62979: LD_INT 2
62981: NEG
62982: PUSH
62983: LD_INT 3
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 3
62993: NEG
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 3
63005: NEG
63006: PUSH
63007: LD_INT 3
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: LIST
63019: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63020: LD_ADDR_VAR 0 23
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 4
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: LD_INT 3
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: LIST
63063: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63064: LD_ADDR_VAR 0 24
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 3
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 4
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: LIST
63104: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63105: LD_ADDR_VAR 0 25
63109: PUSH
63110: LD_INT 3
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 4
63122: PUSH
63123: LD_INT 3
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: LD_INT 4
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63145: LD_ADDR_VAR 0 26
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: LD_INT 4
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63186: LD_ADDR_VAR 0 27
63190: PUSH
63191: LD_INT 3
63193: NEG
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: NEG
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 4
63215: NEG
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: LIST
63229: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63230: LD_ADDR_VAR 0 28
63234: PUSH
63235: LD_INT 3
63237: NEG
63238: PUSH
63239: LD_INT 3
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 3
63249: NEG
63250: PUSH
63251: LD_INT 4
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 4
63261: NEG
63262: PUSH
63263: LD_INT 3
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: LIST
63275: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63276: LD_ADDR_VAR 0 29
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: LD_INT 3
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 3
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 2
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 4
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 4
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 3
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: LD_INT 5
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: LD_INT 5
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: LD_INT 4
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: NEG
63386: PUSH
63387: LD_INT 6
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: LD_INT 6
63400: NEG
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 5
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63431: LD_ADDR_VAR 0 30
63435: PUSH
63436: LD_INT 2
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 3
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 3
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 4
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 4
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 4
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 5
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 5
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 5
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 6
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 6
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63574: LD_ADDR_VAR 0 31
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: LD_INT 3
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 4
63611: PUSH
63612: LD_INT 3
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 4
63621: PUSH
63622: LD_INT 4
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 3
63631: PUSH
63632: LD_INT 4
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 5
63641: PUSH
63642: LD_INT 4
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 5
63651: PUSH
63652: LD_INT 5
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 4
63661: PUSH
63662: LD_INT 5
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 6
63671: PUSH
63672: LD_INT 5
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 6
63681: PUSH
63682: LD_INT 6
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 5
63691: PUSH
63692: LD_INT 6
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63713: LD_ADDR_VAR 0 32
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 3
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: LD_INT 3
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: LD_INT 4
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 4
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: LD_INT 3
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: LD_INT 5
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: LD_INT 5
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: LD_INT 4
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 6
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: LD_INT 6
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: LD_INT 5
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63856: LD_ADDR_VAR 0 33
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 3
63885: NEG
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 3
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 4
63908: NEG
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 4
63919: NEG
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 4
63931: NEG
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 5
63942: NEG
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 5
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 5
63965: NEG
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 6
63976: NEG
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 6
63987: NEG
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64011: LD_ADDR_VAR 0 34
64015: PUSH
64016: LD_INT 2
64018: NEG
64019: PUSH
64020: LD_INT 3
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 3
64030: NEG
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 3
64042: NEG
64043: PUSH
64044: LD_INT 3
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 3
64054: NEG
64055: PUSH
64056: LD_INT 4
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 4
64066: NEG
64067: PUSH
64068: LD_INT 3
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 4
64078: NEG
64079: PUSH
64080: LD_INT 4
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 4
64090: NEG
64091: PUSH
64092: LD_INT 5
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 5
64102: NEG
64103: PUSH
64104: LD_INT 4
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 5
64114: NEG
64115: PUSH
64116: LD_INT 5
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 5
64126: NEG
64127: PUSH
64128: LD_INT 6
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 6
64138: NEG
64139: PUSH
64140: LD_INT 5
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 6
64150: NEG
64151: PUSH
64152: LD_INT 6
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64174: LD_ADDR_VAR 0 41
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 2
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64218: LD_ADDR_VAR 0 42
64222: PUSH
64223: LD_INT 2
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 3
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64259: LD_ADDR_VAR 0 43
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 3
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64299: LD_ADDR_VAR 0 44
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 1
64326: NEG
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64340: LD_ADDR_VAR 0 45
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 2
64358: NEG
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 3
64369: NEG
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: LIST
64383: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64384: LD_ADDR_VAR 0 46
64388: PUSH
64389: LD_INT 2
64391: NEG
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: LD_INT 3
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 3
64415: NEG
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64430: LD_ADDR_VAR 0 47
64434: PUSH
64435: LD_INT 2
64437: NEG
64438: PUSH
64439: LD_INT 3
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: LD_INT 3
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64463: LD_ADDR_VAR 0 48
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64494: LD_ADDR_VAR 0 49
64498: PUSH
64499: LD_INT 3
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 3
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64523: LD_ADDR_VAR 0 50
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: LD_INT 3
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: LD_INT 3
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64552: LD_ADDR_VAR 0 51
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: LD_INT 2
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64583: LD_ADDR_VAR 0 52
64587: PUSH
64588: LD_INT 3
64590: NEG
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 3
64602: NEG
64603: PUSH
64604: LD_INT 2
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64616: LD_ADDR_VAR 0 53
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: LD_INT 3
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: LD_INT 3
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64660: LD_ADDR_VAR 0 54
64664: PUSH
64665: LD_INT 2
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 3
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64701: LD_ADDR_VAR 0 55
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 3
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64741: LD_ADDR_VAR 0 56
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: LD_INT 3
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: LD_INT 3
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: NEG
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: LIST
64781: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64782: LD_ADDR_VAR 0 57
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 3
64800: NEG
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 3
64811: NEG
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64826: LD_ADDR_VAR 0 58
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: LD_INT 3
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: NEG
64846: PUSH
64847: LD_INT 2
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 3
64857: NEG
64858: PUSH
64859: LD_INT 3
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64872: LD_ADDR_VAR 0 59
64876: PUSH
64877: LD_INT 1
64879: NEG
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64916: LD_ADDR_VAR 0 60
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: LD_INT 1
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 2
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 2
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64957: LD_ADDR_VAR 0 61
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64997: LD_ADDR_VAR 0 62
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 2
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65038: LD_ADDR_VAR 0 63
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: NEG
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 2
65067: NEG
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65082: LD_ADDR_VAR 0 64
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: LIST
65127: ST_TO_ADDR
// end ; 2 :
65128: GO 68394
65130: LD_INT 2
65132: DOUBLE
65133: EQUAL
65134: IFTRUE 65138
65136: GO 68393
65138: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65139: LD_ADDR_VAR 0 29
65143: PUSH
65144: LD_INT 4
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 4
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 5
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 5
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 4
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: LD_INT 0
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 3
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 5
65229: PUSH
65230: LD_INT 2
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 3
65239: PUSH
65240: LD_INT 3
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 4
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 4
65269: PUSH
65270: LD_INT 4
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 3
65279: PUSH
65280: LD_INT 4
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: LD_INT 3
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 2
65299: PUSH
65300: LD_INT 2
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 4
65309: PUSH
65310: LD_INT 2
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: LD_INT 4
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: LD_INT 4
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 3
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 4
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: LD_INT 5
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: LD_INT 5
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: LD_INT 4
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 2
65401: PUSH
65402: LD_INT 5
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: LD_INT 3
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 3
65422: NEG
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 3
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: NEG
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 4
65478: NEG
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 4
65489: NEG
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 4
65501: NEG
65502: PUSH
65503: LD_INT 2
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: NEG
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 4
65524: NEG
65525: PUSH
65526: LD_INT 4
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 4
65536: NEG
65537: PUSH
65538: LD_INT 5
65540: NEG
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 3
65548: NEG
65549: PUSH
65550: LD_INT 4
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 3
65560: NEG
65561: PUSH
65562: LD_INT 3
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 4
65572: NEG
65573: PUSH
65574: LD_INT 3
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 5
65584: NEG
65585: PUSH
65586: LD_INT 4
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 5
65596: NEG
65597: PUSH
65598: LD_INT 5
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 3
65608: NEG
65609: PUSH
65610: LD_INT 5
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 5
65620: NEG
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65677: LD_ADDR_VAR 0 30
65681: PUSH
65682: LD_INT 4
65684: PUSH
65685: LD_INT 4
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 4
65694: PUSH
65695: LD_INT 3
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 5
65704: PUSH
65705: LD_INT 4
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 5
65714: PUSH
65715: LD_INT 5
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 4
65724: PUSH
65725: LD_INT 5
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 3
65734: PUSH
65735: LD_INT 4
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 3
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 5
65754: PUSH
65755: LD_INT 3
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 3
65764: PUSH
65765: LD_INT 5
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: LD_INT 3
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: LD_INT 4
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: LD_INT 4
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: LD_INT 3
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: LD_INT 2
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: LD_INT 4
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PUSH
65858: LD_INT 2
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 4
65867: NEG
65868: PUSH
65869: LD_INT 0
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 4
65878: NEG
65879: PUSH
65880: LD_INT 1
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 3
65890: NEG
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: LD_INT 1
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 4
65912: NEG
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 5
65923: NEG
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 5
65934: NEG
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 5
65946: NEG
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 3
65958: NEG
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 3
65969: NEG
65970: PUSH
65971: LD_INT 3
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: NEG
65982: PUSH
65983: LD_INT 4
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 2
65993: NEG
65994: PUSH
65995: LD_INT 3
65997: NEG
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: NEG
66006: PUSH
66007: LD_INT 2
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 3
66017: NEG
66018: PUSH
66019: LD_INT 2
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 4
66029: NEG
66030: PUSH
66031: LD_INT 3
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 4
66041: NEG
66042: PUSH
66043: LD_INT 4
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: LD_INT 4
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 4
66065: NEG
66066: PUSH
66067: LD_INT 2
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: LD_INT 4
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: LD_INT 5
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: LD_INT 4
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: LD_INT 3
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 3
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: LD_INT 4
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: LD_INT 5
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: PUSH
66157: LD_INT 3
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 2
66167: NEG
66168: PUSH
66169: LD_INT 5
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66224: LD_ADDR_VAR 0 31
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: LD_INT 4
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: LD_INT 3
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 4
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: PUSH
66262: LD_INT 5
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: LD_INT 5
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: LD_INT 4
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: LD_INT 3
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: LD_INT 5
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: LD_INT 3
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 3
66324: NEG
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 3
66335: NEG
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 2
66358: NEG
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 3
66369: NEG
66370: PUSH
66371: LD_INT 1
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 4
66380: NEG
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 4
66391: NEG
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 4
66403: NEG
66404: PUSH
66405: LD_INT 2
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 2
66415: NEG
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 4
66426: NEG
66427: PUSH
66428: LD_INT 4
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 4
66438: NEG
66439: PUSH
66440: LD_INT 5
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 3
66450: NEG
66451: PUSH
66452: LD_INT 4
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 3
66462: NEG
66463: PUSH
66464: LD_INT 3
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 4
66474: NEG
66475: PUSH
66476: LD_INT 3
66478: NEG
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 5
66486: NEG
66487: PUSH
66488: LD_INT 4
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 5
66498: NEG
66499: PUSH
66500: LD_INT 5
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: LD_INT 5
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 5
66522: NEG
66523: PUSH
66524: LD_INT 3
66526: NEG
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 0
66534: PUSH
66535: LD_INT 3
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: LD_INT 4
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 1
66556: PUSH
66557: LD_INT 3
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 2
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: NEG
66590: PUSH
66591: LD_INT 3
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: LD_INT 4
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 2
66613: PUSH
66614: LD_INT 2
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 4
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 4
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 5
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 5
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 4
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 3
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 3
66708: PUSH
66709: LD_INT 2
66711: NEG
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 5
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66774: LD_ADDR_VAR 0 32
66778: PUSH
66779: LD_INT 4
66781: NEG
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 4
66792: NEG
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 3
66804: NEG
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 4
66826: NEG
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 5
66837: NEG
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 5
66848: NEG
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 5
66860: NEG
66861: PUSH
66862: LD_INT 2
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 3
66872: NEG
66873: PUSH
66874: LD_INT 2
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 3
66883: NEG
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: LD_INT 4
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 2
66907: NEG
66908: PUSH
66909: LD_INT 3
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: NEG
66920: PUSH
66921: LD_INT 2
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 3
66931: NEG
66932: PUSH
66933: LD_INT 2
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 4
66943: NEG
66944: PUSH
66945: LD_INT 3
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 4
66955: NEG
66956: PUSH
66957: LD_INT 4
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 2
66967: NEG
66968: PUSH
66969: LD_INT 4
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 4
66979: NEG
66980: PUSH
66981: LD_INT 2
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 4
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_INT 5
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: LD_INT 4
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: LD_INT 3
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: LD_INT 3
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 1
67046: NEG
67047: PUSH
67048: LD_INT 4
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: LD_INT 5
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 2
67070: PUSH
67071: LD_INT 3
67073: NEG
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 2
67081: NEG
67082: PUSH
67083: LD_INT 5
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 3
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 3
67103: PUSH
67104: LD_INT 1
67106: NEG
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 4
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 4
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 2
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: LD_INT 1
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: LD_INT 2
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 4
67176: PUSH
67177: LD_INT 2
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: LD_INT 4
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 4
67196: PUSH
67197: LD_INT 3
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 5
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 5
67216: PUSH
67217: LD_INT 5
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 4
67226: PUSH
67227: LD_INT 5
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 3
67236: PUSH
67237: LD_INT 4
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 3
67246: PUSH
67247: LD_INT 3
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 5
67256: PUSH
67257: LD_INT 3
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 3
67266: PUSH
67267: LD_INT 5
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67321: LD_ADDR_VAR 0 33
67325: PUSH
67326: LD_INT 4
67328: NEG
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 4
67340: NEG
67341: PUSH
67342: LD_INT 5
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 3
67352: NEG
67353: PUSH
67354: LD_INT 4
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 3
67364: NEG
67365: PUSH
67366: LD_INT 3
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 4
67376: NEG
67377: PUSH
67378: LD_INT 3
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 5
67388: NEG
67389: PUSH
67390: LD_INT 4
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 5
67400: NEG
67401: PUSH
67402: LD_INT 5
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: NEG
67413: PUSH
67414: LD_INT 5
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 5
67424: NEG
67425: PUSH
67426: LD_INT 3
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: LD_INT 3
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: LD_INT 4
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: LD_INT 3
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: LD_INT 2
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: LD_INT 2
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: LD_INT 3
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: LD_INT 4
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 2
67515: PUSH
67516: LD_INT 2
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 2
67526: NEG
67527: PUSH
67528: LD_INT 4
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 4
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 4
67548: PUSH
67549: LD_INT 1
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 5
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 5
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 4
67579: PUSH
67580: LD_INT 1
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 3
67589: PUSH
67590: LD_INT 0
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 3
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 3
67610: PUSH
67611: LD_INT 2
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 5
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 3
67631: PUSH
67632: LD_INT 3
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 3
67641: PUSH
67642: LD_INT 2
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 4
67651: PUSH
67652: LD_INT 3
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 4
67661: PUSH
67662: LD_INT 4
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: LD_INT 3
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 2
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 4
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: LD_INT 4
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 4
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: LD_INT 4
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: LD_INT 5
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: LD_INT 5
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: LD_INT 4
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 1
67782: NEG
67783: PUSH
67784: LD_INT 3
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: LD_INT 5
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 2
67803: NEG
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67859: LD_ADDR_VAR 0 34
67863: PUSH
67864: LD_INT 0
67866: PUSH
67867: LD_INT 4
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: LD_INT 5
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: LD_INT 4
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 1
67899: PUSH
67900: LD_INT 3
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 1
67921: NEG
67922: PUSH
67923: LD_INT 4
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 1
67933: NEG
67934: PUSH
67935: LD_INT 5
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: LD_INT 5
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: PUSH
67969: LD_INT 0
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 4
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 4
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 2
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: LD_INT 1
68032: NEG
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 2
68040: PUSH
68041: LD_INT 2
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 4
68051: PUSH
68052: LD_INT 2
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 4
68061: PUSH
68062: LD_INT 4
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 4
68071: PUSH
68072: LD_INT 3
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 5
68081: PUSH
68082: LD_INT 4
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 5
68091: PUSH
68092: LD_INT 5
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 4
68101: PUSH
68102: LD_INT 5
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 3
68111: PUSH
68112: LD_INT 4
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 5
68131: PUSH
68132: LD_INT 3
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 3
68141: PUSH
68142: LD_INT 5
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: LD_INT 3
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: LD_INT 3
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 1
68181: PUSH
68182: LD_INT 4
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: LD_INT 4
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 1
68201: NEG
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 2
68223: PUSH
68224: LD_INT 4
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 2
68233: NEG
68234: PUSH
68235: LD_INT 2
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 4
68244: NEG
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 4
68255: NEG
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 3
68278: NEG
68279: PUSH
68280: LD_INT 1
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 4
68289: NEG
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 5
68300: NEG
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 5
68311: NEG
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 5
68323: NEG
68324: PUSH
68325: LD_INT 2
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 3
68335: NEG
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: ST_TO_ADDR
// end ; end ;
68391: GO 68394
68393: POP
// case btype of b_depot , b_warehouse :
68394: LD_VAR 0 1
68398: PUSH
68399: LD_INT 0
68401: DOUBLE
68402: EQUAL
68403: IFTRUE 68413
68405: LD_INT 1
68407: DOUBLE
68408: EQUAL
68409: IFTRUE 68413
68411: GO 68614
68413: POP
// case nation of nation_american :
68414: LD_VAR 0 5
68418: PUSH
68419: LD_INT 1
68421: DOUBLE
68422: EQUAL
68423: IFTRUE 68427
68425: GO 68483
68427: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68428: LD_ADDR_VAR 0 9
68432: PUSH
68433: LD_VAR 0 11
68437: PUSH
68438: LD_VAR 0 12
68442: PUSH
68443: LD_VAR 0 13
68447: PUSH
68448: LD_VAR 0 14
68452: PUSH
68453: LD_VAR 0 15
68457: PUSH
68458: LD_VAR 0 16
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: PUSH
68471: LD_VAR 0 4
68475: PUSH
68476: LD_INT 1
68478: PLUS
68479: ARRAY
68480: ST_TO_ADDR
68481: GO 68612
68483: LD_INT 2
68485: DOUBLE
68486: EQUAL
68487: IFTRUE 68491
68489: GO 68547
68491: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68492: LD_ADDR_VAR 0 9
68496: PUSH
68497: LD_VAR 0 17
68501: PUSH
68502: LD_VAR 0 18
68506: PUSH
68507: LD_VAR 0 19
68511: PUSH
68512: LD_VAR 0 20
68516: PUSH
68517: LD_VAR 0 21
68521: PUSH
68522: LD_VAR 0 22
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: PUSH
68535: LD_VAR 0 4
68539: PUSH
68540: LD_INT 1
68542: PLUS
68543: ARRAY
68544: ST_TO_ADDR
68545: GO 68612
68547: LD_INT 3
68549: DOUBLE
68550: EQUAL
68551: IFTRUE 68555
68553: GO 68611
68555: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68556: LD_ADDR_VAR 0 9
68560: PUSH
68561: LD_VAR 0 23
68565: PUSH
68566: LD_VAR 0 24
68570: PUSH
68571: LD_VAR 0 25
68575: PUSH
68576: LD_VAR 0 26
68580: PUSH
68581: LD_VAR 0 27
68585: PUSH
68586: LD_VAR 0 28
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: PUSH
68599: LD_VAR 0 4
68603: PUSH
68604: LD_INT 1
68606: PLUS
68607: ARRAY
68608: ST_TO_ADDR
68609: GO 68612
68611: POP
68612: GO 69167
68614: LD_INT 2
68616: DOUBLE
68617: EQUAL
68618: IFTRUE 68628
68620: LD_INT 3
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68628
68626: GO 68684
68628: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68629: LD_ADDR_VAR 0 9
68633: PUSH
68634: LD_VAR 0 29
68638: PUSH
68639: LD_VAR 0 30
68643: PUSH
68644: LD_VAR 0 31
68648: PUSH
68649: LD_VAR 0 32
68653: PUSH
68654: LD_VAR 0 33
68658: PUSH
68659: LD_VAR 0 34
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: PUSH
68672: LD_VAR 0 4
68676: PUSH
68677: LD_INT 1
68679: PLUS
68680: ARRAY
68681: ST_TO_ADDR
68682: GO 69167
68684: LD_INT 16
68686: DOUBLE
68687: EQUAL
68688: IFTRUE 68746
68690: LD_INT 17
68692: DOUBLE
68693: EQUAL
68694: IFTRUE 68746
68696: LD_INT 18
68698: DOUBLE
68699: EQUAL
68700: IFTRUE 68746
68702: LD_INT 19
68704: DOUBLE
68705: EQUAL
68706: IFTRUE 68746
68708: LD_INT 22
68710: DOUBLE
68711: EQUAL
68712: IFTRUE 68746
68714: LD_INT 20
68716: DOUBLE
68717: EQUAL
68718: IFTRUE 68746
68720: LD_INT 21
68722: DOUBLE
68723: EQUAL
68724: IFTRUE 68746
68726: LD_INT 23
68728: DOUBLE
68729: EQUAL
68730: IFTRUE 68746
68732: LD_INT 24
68734: DOUBLE
68735: EQUAL
68736: IFTRUE 68746
68738: LD_INT 25
68740: DOUBLE
68741: EQUAL
68742: IFTRUE 68746
68744: GO 68802
68746: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68747: LD_ADDR_VAR 0 9
68751: PUSH
68752: LD_VAR 0 35
68756: PUSH
68757: LD_VAR 0 36
68761: PUSH
68762: LD_VAR 0 37
68766: PUSH
68767: LD_VAR 0 38
68771: PUSH
68772: LD_VAR 0 39
68776: PUSH
68777: LD_VAR 0 40
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: PUSH
68790: LD_VAR 0 4
68794: PUSH
68795: LD_INT 1
68797: PLUS
68798: ARRAY
68799: ST_TO_ADDR
68800: GO 69167
68802: LD_INT 6
68804: DOUBLE
68805: EQUAL
68806: IFTRUE 68858
68808: LD_INT 7
68810: DOUBLE
68811: EQUAL
68812: IFTRUE 68858
68814: LD_INT 8
68816: DOUBLE
68817: EQUAL
68818: IFTRUE 68858
68820: LD_INT 13
68822: DOUBLE
68823: EQUAL
68824: IFTRUE 68858
68826: LD_INT 12
68828: DOUBLE
68829: EQUAL
68830: IFTRUE 68858
68832: LD_INT 15
68834: DOUBLE
68835: EQUAL
68836: IFTRUE 68858
68838: LD_INT 11
68840: DOUBLE
68841: EQUAL
68842: IFTRUE 68858
68844: LD_INT 14
68846: DOUBLE
68847: EQUAL
68848: IFTRUE 68858
68850: LD_INT 10
68852: DOUBLE
68853: EQUAL
68854: IFTRUE 68858
68856: GO 68914
68858: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68859: LD_ADDR_VAR 0 9
68863: PUSH
68864: LD_VAR 0 41
68868: PUSH
68869: LD_VAR 0 42
68873: PUSH
68874: LD_VAR 0 43
68878: PUSH
68879: LD_VAR 0 44
68883: PUSH
68884: LD_VAR 0 45
68888: PUSH
68889: LD_VAR 0 46
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: PUSH
68902: LD_VAR 0 4
68906: PUSH
68907: LD_INT 1
68909: PLUS
68910: ARRAY
68911: ST_TO_ADDR
68912: GO 69167
68914: LD_INT 36
68916: DOUBLE
68917: EQUAL
68918: IFTRUE 68922
68920: GO 68978
68922: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68923: LD_ADDR_VAR 0 9
68927: PUSH
68928: LD_VAR 0 47
68932: PUSH
68933: LD_VAR 0 48
68937: PUSH
68938: LD_VAR 0 49
68942: PUSH
68943: LD_VAR 0 50
68947: PUSH
68948: LD_VAR 0 51
68952: PUSH
68953: LD_VAR 0 52
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: PUSH
68966: LD_VAR 0 4
68970: PUSH
68971: LD_INT 1
68973: PLUS
68974: ARRAY
68975: ST_TO_ADDR
68976: GO 69167
68978: LD_INT 4
68980: DOUBLE
68981: EQUAL
68982: IFTRUE 69004
68984: LD_INT 5
68986: DOUBLE
68987: EQUAL
68988: IFTRUE 69004
68990: LD_INT 34
68992: DOUBLE
68993: EQUAL
68994: IFTRUE 69004
68996: LD_INT 37
68998: DOUBLE
68999: EQUAL
69000: IFTRUE 69004
69002: GO 69060
69004: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69005: LD_ADDR_VAR 0 9
69009: PUSH
69010: LD_VAR 0 53
69014: PUSH
69015: LD_VAR 0 54
69019: PUSH
69020: LD_VAR 0 55
69024: PUSH
69025: LD_VAR 0 56
69029: PUSH
69030: LD_VAR 0 57
69034: PUSH
69035: LD_VAR 0 58
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: PUSH
69048: LD_VAR 0 4
69052: PUSH
69053: LD_INT 1
69055: PLUS
69056: ARRAY
69057: ST_TO_ADDR
69058: GO 69167
69060: LD_INT 31
69062: DOUBLE
69063: EQUAL
69064: IFTRUE 69110
69066: LD_INT 32
69068: DOUBLE
69069: EQUAL
69070: IFTRUE 69110
69072: LD_INT 33
69074: DOUBLE
69075: EQUAL
69076: IFTRUE 69110
69078: LD_INT 27
69080: DOUBLE
69081: EQUAL
69082: IFTRUE 69110
69084: LD_INT 26
69086: DOUBLE
69087: EQUAL
69088: IFTRUE 69110
69090: LD_INT 28
69092: DOUBLE
69093: EQUAL
69094: IFTRUE 69110
69096: LD_INT 29
69098: DOUBLE
69099: EQUAL
69100: IFTRUE 69110
69102: LD_INT 30
69104: DOUBLE
69105: EQUAL
69106: IFTRUE 69110
69108: GO 69166
69110: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69111: LD_ADDR_VAR 0 9
69115: PUSH
69116: LD_VAR 0 59
69120: PUSH
69121: LD_VAR 0 60
69125: PUSH
69126: LD_VAR 0 61
69130: PUSH
69131: LD_VAR 0 62
69135: PUSH
69136: LD_VAR 0 63
69140: PUSH
69141: LD_VAR 0 64
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: PUSH
69154: LD_VAR 0 4
69158: PUSH
69159: LD_INT 1
69161: PLUS
69162: ARRAY
69163: ST_TO_ADDR
69164: GO 69167
69166: POP
// temp_list2 = [ ] ;
69167: LD_ADDR_VAR 0 10
69171: PUSH
69172: EMPTY
69173: ST_TO_ADDR
// for i in temp_list do
69174: LD_ADDR_VAR 0 8
69178: PUSH
69179: LD_VAR 0 9
69183: PUSH
69184: FOR_IN
69185: IFFALSE 69237
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69187: LD_ADDR_VAR 0 10
69191: PUSH
69192: LD_VAR 0 10
69196: PUSH
69197: LD_VAR 0 8
69201: PUSH
69202: LD_INT 1
69204: ARRAY
69205: PUSH
69206: LD_VAR 0 2
69210: PLUS
69211: PUSH
69212: LD_VAR 0 8
69216: PUSH
69217: LD_INT 2
69219: ARRAY
69220: PUSH
69221: LD_VAR 0 3
69225: PLUS
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: EMPTY
69232: LIST
69233: ADD
69234: ST_TO_ADDR
69235: GO 69184
69237: POP
69238: POP
// result = temp_list2 ;
69239: LD_ADDR_VAR 0 7
69243: PUSH
69244: LD_VAR 0 10
69248: ST_TO_ADDR
// end ;
69249: LD_VAR 0 7
69253: RET
// export function EnemyInRange ( unit , dist ) ; begin
69254: LD_INT 0
69256: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69257: LD_ADDR_VAR 0 3
69261: PUSH
69262: LD_VAR 0 1
69266: PPUSH
69267: CALL_OW 255
69271: PPUSH
69272: LD_VAR 0 1
69276: PPUSH
69277: CALL_OW 250
69281: PPUSH
69282: LD_VAR 0 1
69286: PPUSH
69287: CALL_OW 251
69291: PPUSH
69292: LD_VAR 0 2
69296: PPUSH
69297: CALL 42627 0 4
69301: PUSH
69302: LD_INT 4
69304: ARRAY
69305: ST_TO_ADDR
// end ;
69306: LD_VAR 0 3
69310: RET
// export function PlayerSeeMe ( unit ) ; begin
69311: LD_INT 0
69313: PPUSH
// result := See ( your_side , unit ) ;
69314: LD_ADDR_VAR 0 2
69318: PUSH
69319: LD_OWVAR 2
69323: PPUSH
69324: LD_VAR 0 1
69328: PPUSH
69329: CALL_OW 292
69333: ST_TO_ADDR
// end ;
69334: LD_VAR 0 2
69338: RET
// export function ReverseDir ( unit ) ; begin
69339: LD_INT 0
69341: PPUSH
// if not unit then
69342: LD_VAR 0 1
69346: NOT
69347: IFFALSE 69351
// exit ;
69349: GO 69374
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69351: LD_ADDR_VAR 0 2
69355: PUSH
69356: LD_VAR 0 1
69360: PPUSH
69361: CALL_OW 254
69365: PUSH
69366: LD_INT 3
69368: PLUS
69369: PUSH
69370: LD_INT 6
69372: MOD
69373: ST_TO_ADDR
// end ;
69374: LD_VAR 0 2
69378: RET
// export function ReverseArray ( array ) ; var i ; begin
69379: LD_INT 0
69381: PPUSH
69382: PPUSH
// if not array then
69383: LD_VAR 0 1
69387: NOT
69388: IFFALSE 69392
// exit ;
69390: GO 69447
// result := [ ] ;
69392: LD_ADDR_VAR 0 2
69396: PUSH
69397: EMPTY
69398: ST_TO_ADDR
// for i := array downto 1 do
69399: LD_ADDR_VAR 0 3
69403: PUSH
69404: DOUBLE
69405: LD_VAR 0 1
69409: INC
69410: ST_TO_ADDR
69411: LD_INT 1
69413: PUSH
69414: FOR_DOWNTO
69415: IFFALSE 69445
// result := Join ( result , array [ i ] ) ;
69417: LD_ADDR_VAR 0 2
69421: PUSH
69422: LD_VAR 0 2
69426: PPUSH
69427: LD_VAR 0 1
69431: PUSH
69432: LD_VAR 0 3
69436: ARRAY
69437: PPUSH
69438: CALL 74092 0 2
69442: ST_TO_ADDR
69443: GO 69414
69445: POP
69446: POP
// end ;
69447: LD_VAR 0 2
69451: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69452: LD_INT 0
69454: PPUSH
69455: PPUSH
69456: PPUSH
69457: PPUSH
69458: PPUSH
69459: PPUSH
// if not unit or not hexes then
69460: LD_VAR 0 1
69464: NOT
69465: PUSH
69466: LD_VAR 0 2
69470: NOT
69471: OR
69472: IFFALSE 69476
// exit ;
69474: GO 69599
// dist := 9999 ;
69476: LD_ADDR_VAR 0 5
69480: PUSH
69481: LD_INT 9999
69483: ST_TO_ADDR
// for i = 1 to hexes do
69484: LD_ADDR_VAR 0 4
69488: PUSH
69489: DOUBLE
69490: LD_INT 1
69492: DEC
69493: ST_TO_ADDR
69494: LD_VAR 0 2
69498: PUSH
69499: FOR_TO
69500: IFFALSE 69587
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69502: LD_ADDR_VAR 0 6
69506: PUSH
69507: LD_VAR 0 1
69511: PPUSH
69512: LD_VAR 0 2
69516: PUSH
69517: LD_VAR 0 4
69521: ARRAY
69522: PUSH
69523: LD_INT 1
69525: ARRAY
69526: PPUSH
69527: LD_VAR 0 2
69531: PUSH
69532: LD_VAR 0 4
69536: ARRAY
69537: PUSH
69538: LD_INT 2
69540: ARRAY
69541: PPUSH
69542: CALL_OW 297
69546: ST_TO_ADDR
// if tdist < dist then
69547: LD_VAR 0 6
69551: PUSH
69552: LD_VAR 0 5
69556: LESS
69557: IFFALSE 69585
// begin hex := hexes [ i ] ;
69559: LD_ADDR_VAR 0 8
69563: PUSH
69564: LD_VAR 0 2
69568: PUSH
69569: LD_VAR 0 4
69573: ARRAY
69574: ST_TO_ADDR
// dist := tdist ;
69575: LD_ADDR_VAR 0 5
69579: PUSH
69580: LD_VAR 0 6
69584: ST_TO_ADDR
// end ; end ;
69585: GO 69499
69587: POP
69588: POP
// result := hex ;
69589: LD_ADDR_VAR 0 3
69593: PUSH
69594: LD_VAR 0 8
69598: ST_TO_ADDR
// end ;
69599: LD_VAR 0 3
69603: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69604: LD_INT 0
69606: PPUSH
69607: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69608: LD_VAR 0 1
69612: NOT
69613: PUSH
69614: LD_VAR 0 1
69618: PUSH
69619: LD_INT 21
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 23
69631: PUSH
69632: LD_INT 2
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PPUSH
69643: CALL_OW 69
69647: IN
69648: NOT
69649: OR
69650: IFFALSE 69654
// exit ;
69652: GO 69701
// for i = 1 to 3 do
69654: LD_ADDR_VAR 0 3
69658: PUSH
69659: DOUBLE
69660: LD_INT 1
69662: DEC
69663: ST_TO_ADDR
69664: LD_INT 3
69666: PUSH
69667: FOR_TO
69668: IFFALSE 69699
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69670: LD_VAR 0 1
69674: PPUSH
69675: CALL_OW 250
69679: PPUSH
69680: LD_VAR 0 1
69684: PPUSH
69685: CALL_OW 251
69689: PPUSH
69690: LD_INT 1
69692: PPUSH
69693: CALL_OW 453
69697: GO 69667
69699: POP
69700: POP
// end ;
69701: LD_VAR 0 2
69705: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69706: LD_INT 0
69708: PPUSH
69709: PPUSH
69710: PPUSH
69711: PPUSH
69712: PPUSH
69713: PPUSH
// if not unit or not enemy_unit then
69714: LD_VAR 0 1
69718: NOT
69719: PUSH
69720: LD_VAR 0 2
69724: NOT
69725: OR
69726: IFFALSE 69730
// exit ;
69728: GO 70197
// if GetLives ( i ) < 250 then
69730: LD_VAR 0 4
69734: PPUSH
69735: CALL_OW 256
69739: PUSH
69740: LD_INT 250
69742: LESS
69743: IFFALSE 69756
// begin ComAutodestruct ( i ) ;
69745: LD_VAR 0 4
69749: PPUSH
69750: CALL 69604 0 1
// exit ;
69754: GO 70197
// end ; x := GetX ( enemy_unit ) ;
69756: LD_ADDR_VAR 0 7
69760: PUSH
69761: LD_VAR 0 2
69765: PPUSH
69766: CALL_OW 250
69770: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69771: LD_ADDR_VAR 0 8
69775: PUSH
69776: LD_VAR 0 2
69780: PPUSH
69781: CALL_OW 251
69785: ST_TO_ADDR
// if not x or not y then
69786: LD_VAR 0 7
69790: NOT
69791: PUSH
69792: LD_VAR 0 8
69796: NOT
69797: OR
69798: IFFALSE 69802
// exit ;
69800: GO 70197
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69802: LD_ADDR_VAR 0 6
69806: PUSH
69807: LD_VAR 0 7
69811: PPUSH
69812: LD_INT 0
69814: PPUSH
69815: LD_INT 4
69817: PPUSH
69818: CALL_OW 272
69822: PUSH
69823: LD_VAR 0 8
69827: PPUSH
69828: LD_INT 0
69830: PPUSH
69831: LD_INT 4
69833: PPUSH
69834: CALL_OW 273
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_VAR 0 7
69847: PPUSH
69848: LD_INT 1
69850: PPUSH
69851: LD_INT 4
69853: PPUSH
69854: CALL_OW 272
69858: PUSH
69859: LD_VAR 0 8
69863: PPUSH
69864: LD_INT 1
69866: PPUSH
69867: LD_INT 4
69869: PPUSH
69870: CALL_OW 273
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_VAR 0 7
69883: PPUSH
69884: LD_INT 2
69886: PPUSH
69887: LD_INT 4
69889: PPUSH
69890: CALL_OW 272
69894: PUSH
69895: LD_VAR 0 8
69899: PPUSH
69900: LD_INT 2
69902: PPUSH
69903: LD_INT 4
69905: PPUSH
69906: CALL_OW 273
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_VAR 0 7
69919: PPUSH
69920: LD_INT 3
69922: PPUSH
69923: LD_INT 4
69925: PPUSH
69926: CALL_OW 272
69930: PUSH
69931: LD_VAR 0 8
69935: PPUSH
69936: LD_INT 3
69938: PPUSH
69939: LD_INT 4
69941: PPUSH
69942: CALL_OW 273
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_VAR 0 7
69955: PPUSH
69956: LD_INT 4
69958: PPUSH
69959: LD_INT 4
69961: PPUSH
69962: CALL_OW 272
69966: PUSH
69967: LD_VAR 0 8
69971: PPUSH
69972: LD_INT 4
69974: PPUSH
69975: LD_INT 4
69977: PPUSH
69978: CALL_OW 273
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_VAR 0 7
69991: PPUSH
69992: LD_INT 5
69994: PPUSH
69995: LD_INT 4
69997: PPUSH
69998: CALL_OW 272
70002: PUSH
70003: LD_VAR 0 8
70007: PPUSH
70008: LD_INT 5
70010: PPUSH
70011: LD_INT 4
70013: PPUSH
70014: CALL_OW 273
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: ST_TO_ADDR
// for i = tmp downto 1 do
70031: LD_ADDR_VAR 0 4
70035: PUSH
70036: DOUBLE
70037: LD_VAR 0 6
70041: INC
70042: ST_TO_ADDR
70043: LD_INT 1
70045: PUSH
70046: FOR_DOWNTO
70047: IFFALSE 70148
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70049: LD_VAR 0 6
70053: PUSH
70054: LD_VAR 0 4
70058: ARRAY
70059: PUSH
70060: LD_INT 1
70062: ARRAY
70063: PPUSH
70064: LD_VAR 0 6
70068: PUSH
70069: LD_VAR 0 4
70073: ARRAY
70074: PUSH
70075: LD_INT 2
70077: ARRAY
70078: PPUSH
70079: CALL_OW 488
70083: NOT
70084: PUSH
70085: LD_VAR 0 6
70089: PUSH
70090: LD_VAR 0 4
70094: ARRAY
70095: PUSH
70096: LD_INT 1
70098: ARRAY
70099: PPUSH
70100: LD_VAR 0 6
70104: PUSH
70105: LD_VAR 0 4
70109: ARRAY
70110: PUSH
70111: LD_INT 2
70113: ARRAY
70114: PPUSH
70115: CALL_OW 428
70119: PUSH
70120: LD_INT 0
70122: NONEQUAL
70123: OR
70124: IFFALSE 70146
// tmp := Delete ( tmp , i ) ;
70126: LD_ADDR_VAR 0 6
70130: PUSH
70131: LD_VAR 0 6
70135: PPUSH
70136: LD_VAR 0 4
70140: PPUSH
70141: CALL_OW 3
70145: ST_TO_ADDR
70146: GO 70046
70148: POP
70149: POP
// j := GetClosestHex ( unit , tmp ) ;
70150: LD_ADDR_VAR 0 5
70154: PUSH
70155: LD_VAR 0 1
70159: PPUSH
70160: LD_VAR 0 6
70164: PPUSH
70165: CALL 69452 0 2
70169: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70170: LD_VAR 0 1
70174: PPUSH
70175: LD_VAR 0 5
70179: PUSH
70180: LD_INT 1
70182: ARRAY
70183: PPUSH
70184: LD_VAR 0 5
70188: PUSH
70189: LD_INT 2
70191: ARRAY
70192: PPUSH
70193: CALL_OW 111
// end ;
70197: LD_VAR 0 3
70201: RET
// export function PrepareApemanSoldier ( ) ; begin
70202: LD_INT 0
70204: PPUSH
// uc_nation := 0 ;
70205: LD_ADDR_OWVAR 21
70209: PUSH
70210: LD_INT 0
70212: ST_TO_ADDR
// hc_sex := sex_male ;
70213: LD_ADDR_OWVAR 27
70217: PUSH
70218: LD_INT 1
70220: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70221: LD_ADDR_OWVAR 28
70225: PUSH
70226: LD_INT 15
70228: ST_TO_ADDR
// hc_gallery :=  ;
70229: LD_ADDR_OWVAR 33
70233: PUSH
70234: LD_STRING 
70236: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70237: LD_ADDR_OWVAR 31
70241: PUSH
70242: LD_INT 0
70244: PPUSH
70245: LD_INT 3
70247: PPUSH
70248: CALL_OW 12
70252: PUSH
70253: LD_INT 0
70255: PPUSH
70256: LD_INT 3
70258: PPUSH
70259: CALL_OW 12
70263: PUSH
70264: LD_INT 0
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: ST_TO_ADDR
// end ;
70276: LD_VAR 0 1
70280: RET
// export function PrepareApemanEngineer ( ) ; begin
70281: LD_INT 0
70283: PPUSH
// uc_nation := 0 ;
70284: LD_ADDR_OWVAR 21
70288: PUSH
70289: LD_INT 0
70291: ST_TO_ADDR
// hc_sex := sex_male ;
70292: LD_ADDR_OWVAR 27
70296: PUSH
70297: LD_INT 1
70299: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70300: LD_ADDR_OWVAR 28
70304: PUSH
70305: LD_INT 16
70307: ST_TO_ADDR
// hc_gallery :=  ;
70308: LD_ADDR_OWVAR 33
70312: PUSH
70313: LD_STRING 
70315: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70316: LD_ADDR_OWVAR 31
70320: PUSH
70321: LD_INT 0
70323: PPUSH
70324: LD_INT 3
70326: PPUSH
70327: CALL_OW 12
70331: PUSH
70332: LD_INT 0
70334: PPUSH
70335: LD_INT 3
70337: PPUSH
70338: CALL_OW 12
70342: PUSH
70343: LD_INT 0
70345: PUSH
70346: LD_INT 0
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: ST_TO_ADDR
// end ;
70355: LD_VAR 0 1
70359: RET
// export function PrepareApeman ( agressivity ) ; begin
70360: LD_INT 0
70362: PPUSH
// uc_side := 0 ;
70363: LD_ADDR_OWVAR 20
70367: PUSH
70368: LD_INT 0
70370: ST_TO_ADDR
// uc_nation := 0 ;
70371: LD_ADDR_OWVAR 21
70375: PUSH
70376: LD_INT 0
70378: ST_TO_ADDR
// hc_sex := sex_male ;
70379: LD_ADDR_OWVAR 27
70383: PUSH
70384: LD_INT 1
70386: ST_TO_ADDR
// hc_class := class_apeman ;
70387: LD_ADDR_OWVAR 28
70391: PUSH
70392: LD_INT 12
70394: ST_TO_ADDR
// hc_gallery :=  ;
70395: LD_ADDR_OWVAR 33
70399: PUSH
70400: LD_STRING 
70402: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70403: LD_ADDR_OWVAR 35
70407: PUSH
70408: LD_VAR 0 1
70412: NEG
70413: PPUSH
70414: LD_VAR 0 1
70418: PPUSH
70419: CALL_OW 12
70423: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70424: LD_ADDR_OWVAR 31
70428: PUSH
70429: LD_INT 0
70431: PPUSH
70432: LD_INT 3
70434: PPUSH
70435: CALL_OW 12
70439: PUSH
70440: LD_INT 0
70442: PPUSH
70443: LD_INT 3
70445: PPUSH
70446: CALL_OW 12
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: ST_TO_ADDR
// end ;
70463: LD_VAR 0 2
70467: RET
// export function PrepareTiger ( agressivity ) ; begin
70468: LD_INT 0
70470: PPUSH
// uc_side := 0 ;
70471: LD_ADDR_OWVAR 20
70475: PUSH
70476: LD_INT 0
70478: ST_TO_ADDR
// uc_nation := 0 ;
70479: LD_ADDR_OWVAR 21
70483: PUSH
70484: LD_INT 0
70486: ST_TO_ADDR
// hc_class := class_tiger ;
70487: LD_ADDR_OWVAR 28
70491: PUSH
70492: LD_INT 14
70494: ST_TO_ADDR
// hc_gallery :=  ;
70495: LD_ADDR_OWVAR 33
70499: PUSH
70500: LD_STRING 
70502: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70503: LD_ADDR_OWVAR 35
70507: PUSH
70508: LD_VAR 0 1
70512: NEG
70513: PPUSH
70514: LD_VAR 0 1
70518: PPUSH
70519: CALL_OW 12
70523: ST_TO_ADDR
// end ;
70524: LD_VAR 0 2
70528: RET
// export function PrepareEnchidna ( ) ; begin
70529: LD_INT 0
70531: PPUSH
// uc_side := 0 ;
70532: LD_ADDR_OWVAR 20
70536: PUSH
70537: LD_INT 0
70539: ST_TO_ADDR
// uc_nation := 0 ;
70540: LD_ADDR_OWVAR 21
70544: PUSH
70545: LD_INT 0
70547: ST_TO_ADDR
// hc_class := class_baggie ;
70548: LD_ADDR_OWVAR 28
70552: PUSH
70553: LD_INT 13
70555: ST_TO_ADDR
// hc_gallery :=  ;
70556: LD_ADDR_OWVAR 33
70560: PUSH
70561: LD_STRING 
70563: ST_TO_ADDR
// end ;
70564: LD_VAR 0 1
70568: RET
// export function PrepareFrog ( ) ; begin
70569: LD_INT 0
70571: PPUSH
// uc_side := 0 ;
70572: LD_ADDR_OWVAR 20
70576: PUSH
70577: LD_INT 0
70579: ST_TO_ADDR
// uc_nation := 0 ;
70580: LD_ADDR_OWVAR 21
70584: PUSH
70585: LD_INT 0
70587: ST_TO_ADDR
// hc_class := class_frog ;
70588: LD_ADDR_OWVAR 28
70592: PUSH
70593: LD_INT 19
70595: ST_TO_ADDR
// hc_gallery :=  ;
70596: LD_ADDR_OWVAR 33
70600: PUSH
70601: LD_STRING 
70603: ST_TO_ADDR
// end ;
70604: LD_VAR 0 1
70608: RET
// export function PrepareFish ( ) ; begin
70609: LD_INT 0
70611: PPUSH
// uc_side := 0 ;
70612: LD_ADDR_OWVAR 20
70616: PUSH
70617: LD_INT 0
70619: ST_TO_ADDR
// uc_nation := 0 ;
70620: LD_ADDR_OWVAR 21
70624: PUSH
70625: LD_INT 0
70627: ST_TO_ADDR
// hc_class := class_fish ;
70628: LD_ADDR_OWVAR 28
70632: PUSH
70633: LD_INT 20
70635: ST_TO_ADDR
// hc_gallery :=  ;
70636: LD_ADDR_OWVAR 33
70640: PUSH
70641: LD_STRING 
70643: ST_TO_ADDR
// end ;
70644: LD_VAR 0 1
70648: RET
// export function PrepareBird ( ) ; begin
70649: LD_INT 0
70651: PPUSH
// uc_side := 0 ;
70652: LD_ADDR_OWVAR 20
70656: PUSH
70657: LD_INT 0
70659: ST_TO_ADDR
// uc_nation := 0 ;
70660: LD_ADDR_OWVAR 21
70664: PUSH
70665: LD_INT 0
70667: ST_TO_ADDR
// hc_class := class_phororhacos ;
70668: LD_ADDR_OWVAR 28
70672: PUSH
70673: LD_INT 18
70675: ST_TO_ADDR
// hc_gallery :=  ;
70676: LD_ADDR_OWVAR 33
70680: PUSH
70681: LD_STRING 
70683: ST_TO_ADDR
// end ;
70684: LD_VAR 0 1
70688: RET
// export function PrepareHorse ( ) ; begin
70689: LD_INT 0
70691: PPUSH
// uc_side := 0 ;
70692: LD_ADDR_OWVAR 20
70696: PUSH
70697: LD_INT 0
70699: ST_TO_ADDR
// uc_nation := 0 ;
70700: LD_ADDR_OWVAR 21
70704: PUSH
70705: LD_INT 0
70707: ST_TO_ADDR
// hc_class := class_horse ;
70708: LD_ADDR_OWVAR 28
70712: PUSH
70713: LD_INT 21
70715: ST_TO_ADDR
// hc_gallery :=  ;
70716: LD_ADDR_OWVAR 33
70720: PUSH
70721: LD_STRING 
70723: ST_TO_ADDR
// end ;
70724: LD_VAR 0 1
70728: RET
// export function PrepareMastodont ( ) ; begin
70729: LD_INT 0
70731: PPUSH
// uc_side := 0 ;
70732: LD_ADDR_OWVAR 20
70736: PUSH
70737: LD_INT 0
70739: ST_TO_ADDR
// uc_nation := 0 ;
70740: LD_ADDR_OWVAR 21
70744: PUSH
70745: LD_INT 0
70747: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70748: LD_ADDR_OWVAR 37
70752: PUSH
70753: LD_INT 31
70755: ST_TO_ADDR
// vc_control := control_rider ;
70756: LD_ADDR_OWVAR 38
70760: PUSH
70761: LD_INT 4
70763: ST_TO_ADDR
// end ;
70764: LD_VAR 0 1
70768: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70769: LD_INT 0
70771: PPUSH
70772: PPUSH
70773: PPUSH
// uc_side = 0 ;
70774: LD_ADDR_OWVAR 20
70778: PUSH
70779: LD_INT 0
70781: ST_TO_ADDR
// uc_nation = 0 ;
70782: LD_ADDR_OWVAR 21
70786: PUSH
70787: LD_INT 0
70789: ST_TO_ADDR
// InitHc_All ( ) ;
70790: CALL_OW 584
// InitVc ;
70794: CALL_OW 20
// if mastodonts then
70798: LD_VAR 0 6
70802: IFFALSE 70869
// for i = 1 to mastodonts do
70804: LD_ADDR_VAR 0 11
70808: PUSH
70809: DOUBLE
70810: LD_INT 1
70812: DEC
70813: ST_TO_ADDR
70814: LD_VAR 0 6
70818: PUSH
70819: FOR_TO
70820: IFFALSE 70867
// begin vc_chassis := 31 ;
70822: LD_ADDR_OWVAR 37
70826: PUSH
70827: LD_INT 31
70829: ST_TO_ADDR
// vc_control := control_rider ;
70830: LD_ADDR_OWVAR 38
70834: PUSH
70835: LD_INT 4
70837: ST_TO_ADDR
// animal := CreateVehicle ;
70838: LD_ADDR_VAR 0 12
70842: PUSH
70843: CALL_OW 45
70847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70848: LD_VAR 0 12
70852: PPUSH
70853: LD_VAR 0 8
70857: PPUSH
70858: LD_INT 0
70860: PPUSH
70861: CALL 72997 0 3
// end ;
70865: GO 70819
70867: POP
70868: POP
// if horses then
70869: LD_VAR 0 5
70873: IFFALSE 70940
// for i = 1 to horses do
70875: LD_ADDR_VAR 0 11
70879: PUSH
70880: DOUBLE
70881: LD_INT 1
70883: DEC
70884: ST_TO_ADDR
70885: LD_VAR 0 5
70889: PUSH
70890: FOR_TO
70891: IFFALSE 70938
// begin hc_class := 21 ;
70893: LD_ADDR_OWVAR 28
70897: PUSH
70898: LD_INT 21
70900: ST_TO_ADDR
// hc_gallery :=  ;
70901: LD_ADDR_OWVAR 33
70905: PUSH
70906: LD_STRING 
70908: ST_TO_ADDR
// animal := CreateHuman ;
70909: LD_ADDR_VAR 0 12
70913: PUSH
70914: CALL_OW 44
70918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70919: LD_VAR 0 12
70923: PPUSH
70924: LD_VAR 0 8
70928: PPUSH
70929: LD_INT 0
70931: PPUSH
70932: CALL 72997 0 3
// end ;
70936: GO 70890
70938: POP
70939: POP
// if birds then
70940: LD_VAR 0 1
70944: IFFALSE 71011
// for i = 1 to birds do
70946: LD_ADDR_VAR 0 11
70950: PUSH
70951: DOUBLE
70952: LD_INT 1
70954: DEC
70955: ST_TO_ADDR
70956: LD_VAR 0 1
70960: PUSH
70961: FOR_TO
70962: IFFALSE 71009
// begin hc_class := 18 ;
70964: LD_ADDR_OWVAR 28
70968: PUSH
70969: LD_INT 18
70971: ST_TO_ADDR
// hc_gallery =  ;
70972: LD_ADDR_OWVAR 33
70976: PUSH
70977: LD_STRING 
70979: ST_TO_ADDR
// animal := CreateHuman ;
70980: LD_ADDR_VAR 0 12
70984: PUSH
70985: CALL_OW 44
70989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70990: LD_VAR 0 12
70994: PPUSH
70995: LD_VAR 0 8
70999: PPUSH
71000: LD_INT 0
71002: PPUSH
71003: CALL 72997 0 3
// end ;
71007: GO 70961
71009: POP
71010: POP
// if tigers then
71011: LD_VAR 0 2
71015: IFFALSE 71099
// for i = 1 to tigers do
71017: LD_ADDR_VAR 0 11
71021: PUSH
71022: DOUBLE
71023: LD_INT 1
71025: DEC
71026: ST_TO_ADDR
71027: LD_VAR 0 2
71031: PUSH
71032: FOR_TO
71033: IFFALSE 71097
// begin hc_class = class_tiger ;
71035: LD_ADDR_OWVAR 28
71039: PUSH
71040: LD_INT 14
71042: ST_TO_ADDR
// hc_gallery =  ;
71043: LD_ADDR_OWVAR 33
71047: PUSH
71048: LD_STRING 
71050: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71051: LD_ADDR_OWVAR 35
71055: PUSH
71056: LD_INT 7
71058: NEG
71059: PPUSH
71060: LD_INT 7
71062: PPUSH
71063: CALL_OW 12
71067: ST_TO_ADDR
// animal := CreateHuman ;
71068: LD_ADDR_VAR 0 12
71072: PUSH
71073: CALL_OW 44
71077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71078: LD_VAR 0 12
71082: PPUSH
71083: LD_VAR 0 8
71087: PPUSH
71088: LD_INT 0
71090: PPUSH
71091: CALL 72997 0 3
// end ;
71095: GO 71032
71097: POP
71098: POP
// if apemans then
71099: LD_VAR 0 3
71103: IFFALSE 71226
// for i = 1 to apemans do
71105: LD_ADDR_VAR 0 11
71109: PUSH
71110: DOUBLE
71111: LD_INT 1
71113: DEC
71114: ST_TO_ADDR
71115: LD_VAR 0 3
71119: PUSH
71120: FOR_TO
71121: IFFALSE 71224
// begin hc_class = class_apeman ;
71123: LD_ADDR_OWVAR 28
71127: PUSH
71128: LD_INT 12
71130: ST_TO_ADDR
// hc_gallery =  ;
71131: LD_ADDR_OWVAR 33
71135: PUSH
71136: LD_STRING 
71138: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71139: LD_ADDR_OWVAR 35
71143: PUSH
71144: LD_INT 2
71146: NEG
71147: PPUSH
71148: LD_INT 2
71150: PPUSH
71151: CALL_OW 12
71155: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71156: LD_ADDR_OWVAR 31
71160: PUSH
71161: LD_INT 1
71163: PPUSH
71164: LD_INT 3
71166: PPUSH
71167: CALL_OW 12
71171: PUSH
71172: LD_INT 1
71174: PPUSH
71175: LD_INT 3
71177: PPUSH
71178: CALL_OW 12
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: LD_INT 0
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: ST_TO_ADDR
// animal := CreateHuman ;
71195: LD_ADDR_VAR 0 12
71199: PUSH
71200: CALL_OW 44
71204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71205: LD_VAR 0 12
71209: PPUSH
71210: LD_VAR 0 8
71214: PPUSH
71215: LD_INT 0
71217: PPUSH
71218: CALL 72997 0 3
// end ;
71222: GO 71120
71224: POP
71225: POP
// if enchidnas then
71226: LD_VAR 0 4
71230: IFFALSE 71297
// for i = 1 to enchidnas do
71232: LD_ADDR_VAR 0 11
71236: PUSH
71237: DOUBLE
71238: LD_INT 1
71240: DEC
71241: ST_TO_ADDR
71242: LD_VAR 0 4
71246: PUSH
71247: FOR_TO
71248: IFFALSE 71295
// begin hc_class = 13 ;
71250: LD_ADDR_OWVAR 28
71254: PUSH
71255: LD_INT 13
71257: ST_TO_ADDR
// hc_gallery =  ;
71258: LD_ADDR_OWVAR 33
71262: PUSH
71263: LD_STRING 
71265: ST_TO_ADDR
// animal := CreateHuman ;
71266: LD_ADDR_VAR 0 12
71270: PUSH
71271: CALL_OW 44
71275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71276: LD_VAR 0 12
71280: PPUSH
71281: LD_VAR 0 8
71285: PPUSH
71286: LD_INT 0
71288: PPUSH
71289: CALL 72997 0 3
// end ;
71293: GO 71247
71295: POP
71296: POP
// if fishes then
71297: LD_VAR 0 7
71301: IFFALSE 71368
// for i = 1 to fishes do
71303: LD_ADDR_VAR 0 11
71307: PUSH
71308: DOUBLE
71309: LD_INT 1
71311: DEC
71312: ST_TO_ADDR
71313: LD_VAR 0 7
71317: PUSH
71318: FOR_TO
71319: IFFALSE 71366
// begin hc_class = 20 ;
71321: LD_ADDR_OWVAR 28
71325: PUSH
71326: LD_INT 20
71328: ST_TO_ADDR
// hc_gallery =  ;
71329: LD_ADDR_OWVAR 33
71333: PUSH
71334: LD_STRING 
71336: ST_TO_ADDR
// animal := CreateHuman ;
71337: LD_ADDR_VAR 0 12
71341: PUSH
71342: CALL_OW 44
71346: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71347: LD_VAR 0 12
71351: PPUSH
71352: LD_VAR 0 9
71356: PPUSH
71357: LD_INT 0
71359: PPUSH
71360: CALL 72997 0 3
// end ;
71364: GO 71318
71366: POP
71367: POP
// end ;
71368: LD_VAR 0 10
71372: RET
// export function WantHeal ( sci , unit ) ; begin
71373: LD_INT 0
71375: PPUSH
// if GetTaskList ( sci ) > 0 then
71376: LD_VAR 0 1
71380: PPUSH
71381: CALL_OW 437
71385: PUSH
71386: LD_INT 0
71388: GREATER
71389: IFFALSE 71459
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71391: LD_VAR 0 1
71395: PPUSH
71396: CALL_OW 437
71400: PUSH
71401: LD_INT 1
71403: ARRAY
71404: PUSH
71405: LD_INT 1
71407: ARRAY
71408: PUSH
71409: LD_STRING l
71411: EQUAL
71412: PUSH
71413: LD_VAR 0 1
71417: PPUSH
71418: CALL_OW 437
71422: PUSH
71423: LD_INT 1
71425: ARRAY
71426: PUSH
71427: LD_INT 4
71429: ARRAY
71430: PUSH
71431: LD_VAR 0 2
71435: EQUAL
71436: AND
71437: IFFALSE 71449
// result := true else
71439: LD_ADDR_VAR 0 3
71443: PUSH
71444: LD_INT 1
71446: ST_TO_ADDR
71447: GO 71457
// result := false ;
71449: LD_ADDR_VAR 0 3
71453: PUSH
71454: LD_INT 0
71456: ST_TO_ADDR
// end else
71457: GO 71467
// result := false ;
71459: LD_ADDR_VAR 0 3
71463: PUSH
71464: LD_INT 0
71466: ST_TO_ADDR
// end ;
71467: LD_VAR 0 3
71471: RET
// export function HealTarget ( sci ) ; begin
71472: LD_INT 0
71474: PPUSH
// if not sci then
71475: LD_VAR 0 1
71479: NOT
71480: IFFALSE 71484
// exit ;
71482: GO 71549
// result := 0 ;
71484: LD_ADDR_VAR 0 2
71488: PUSH
71489: LD_INT 0
71491: ST_TO_ADDR
// if GetTaskList ( sci ) then
71492: LD_VAR 0 1
71496: PPUSH
71497: CALL_OW 437
71501: IFFALSE 71549
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71503: LD_VAR 0 1
71507: PPUSH
71508: CALL_OW 437
71512: PUSH
71513: LD_INT 1
71515: ARRAY
71516: PUSH
71517: LD_INT 1
71519: ARRAY
71520: PUSH
71521: LD_STRING l
71523: EQUAL
71524: IFFALSE 71549
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71526: LD_ADDR_VAR 0 2
71530: PUSH
71531: LD_VAR 0 1
71535: PPUSH
71536: CALL_OW 437
71540: PUSH
71541: LD_INT 1
71543: ARRAY
71544: PUSH
71545: LD_INT 4
71547: ARRAY
71548: ST_TO_ADDR
// end ;
71549: LD_VAR 0 2
71553: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71554: LD_INT 0
71556: PPUSH
71557: PPUSH
71558: PPUSH
71559: PPUSH
// if not base_units then
71560: LD_VAR 0 1
71564: NOT
71565: IFFALSE 71569
// exit ;
71567: GO 71656
// result := false ;
71569: LD_ADDR_VAR 0 2
71573: PUSH
71574: LD_INT 0
71576: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71577: LD_ADDR_VAR 0 5
71581: PUSH
71582: LD_VAR 0 1
71586: PPUSH
71587: LD_INT 21
71589: PUSH
71590: LD_INT 3
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PPUSH
71597: CALL_OW 72
71601: ST_TO_ADDR
// if not tmp then
71602: LD_VAR 0 5
71606: NOT
71607: IFFALSE 71611
// exit ;
71609: GO 71656
// for i in tmp do
71611: LD_ADDR_VAR 0 3
71615: PUSH
71616: LD_VAR 0 5
71620: PUSH
71621: FOR_IN
71622: IFFALSE 71654
// begin result := EnemyInRange ( i , 22 ) ;
71624: LD_ADDR_VAR 0 2
71628: PUSH
71629: LD_VAR 0 3
71633: PPUSH
71634: LD_INT 22
71636: PPUSH
71637: CALL 69254 0 2
71641: ST_TO_ADDR
// if result then
71642: LD_VAR 0 2
71646: IFFALSE 71652
// exit ;
71648: POP
71649: POP
71650: GO 71656
// end ;
71652: GO 71621
71654: POP
71655: POP
// end ;
71656: LD_VAR 0 2
71660: RET
// export function FilterByTag ( units , tag ) ; begin
71661: LD_INT 0
71663: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71664: LD_ADDR_VAR 0 3
71668: PUSH
71669: LD_VAR 0 1
71673: PPUSH
71674: LD_INT 120
71676: PUSH
71677: LD_VAR 0 2
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PPUSH
71686: CALL_OW 72
71690: ST_TO_ADDR
// end ;
71691: LD_VAR 0 3
71695: RET
// export function IsDriver ( un ) ; begin
71696: LD_INT 0
71698: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71699: LD_ADDR_VAR 0 2
71703: PUSH
71704: LD_VAR 0 1
71708: PUSH
71709: LD_INT 55
71711: PUSH
71712: EMPTY
71713: LIST
71714: PPUSH
71715: CALL_OW 69
71719: IN
71720: ST_TO_ADDR
// end ;
71721: LD_VAR 0 2
71725: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71726: LD_INT 0
71728: PPUSH
71729: PPUSH
// list := [ ] ;
71730: LD_ADDR_VAR 0 5
71734: PUSH
71735: EMPTY
71736: ST_TO_ADDR
// case d of 0 :
71737: LD_VAR 0 3
71741: PUSH
71742: LD_INT 0
71744: DOUBLE
71745: EQUAL
71746: IFTRUE 71750
71748: GO 71883
71750: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71751: LD_ADDR_VAR 0 5
71755: PUSH
71756: LD_VAR 0 1
71760: PUSH
71761: LD_INT 4
71763: MINUS
71764: PUSH
71765: LD_VAR 0 2
71769: PUSH
71770: LD_INT 4
71772: MINUS
71773: PUSH
71774: LD_INT 2
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: LIST
71781: PUSH
71782: LD_VAR 0 1
71786: PUSH
71787: LD_INT 3
71789: MINUS
71790: PUSH
71791: LD_VAR 0 2
71795: PUSH
71796: LD_INT 1
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: LIST
71803: PUSH
71804: LD_VAR 0 1
71808: PUSH
71809: LD_INT 4
71811: PLUS
71812: PUSH
71813: LD_VAR 0 2
71817: PUSH
71818: LD_INT 4
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: LIST
71825: PUSH
71826: LD_VAR 0 1
71830: PUSH
71831: LD_INT 3
71833: PLUS
71834: PUSH
71835: LD_VAR 0 2
71839: PUSH
71840: LD_INT 3
71842: PLUS
71843: PUSH
71844: LD_INT 5
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: LIST
71851: PUSH
71852: LD_VAR 0 1
71856: PUSH
71857: LD_VAR 0 2
71861: PUSH
71862: LD_INT 4
71864: PLUS
71865: PUSH
71866: LD_INT 0
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: LIST
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: ST_TO_ADDR
// end ; 1 :
71881: GO 72581
71883: LD_INT 1
71885: DOUBLE
71886: EQUAL
71887: IFTRUE 71891
71889: GO 72024
71891: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71892: LD_ADDR_VAR 0 5
71896: PUSH
71897: LD_VAR 0 1
71901: PUSH
71902: LD_VAR 0 2
71906: PUSH
71907: LD_INT 4
71909: MINUS
71910: PUSH
71911: LD_INT 3
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: PUSH
71919: LD_VAR 0 1
71923: PUSH
71924: LD_INT 3
71926: MINUS
71927: PUSH
71928: LD_VAR 0 2
71932: PUSH
71933: LD_INT 3
71935: MINUS
71936: PUSH
71937: LD_INT 2
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: LIST
71944: PUSH
71945: LD_VAR 0 1
71949: PUSH
71950: LD_INT 4
71952: MINUS
71953: PUSH
71954: LD_VAR 0 2
71958: PUSH
71959: LD_INT 1
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: LIST
71966: PUSH
71967: LD_VAR 0 1
71971: PUSH
71972: LD_VAR 0 2
71976: PUSH
71977: LD_INT 3
71979: PLUS
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: LIST
71988: PUSH
71989: LD_VAR 0 1
71993: PUSH
71994: LD_INT 4
71996: PLUS
71997: PUSH
71998: LD_VAR 0 2
72002: PUSH
72003: LD_INT 4
72005: PLUS
72006: PUSH
72007: LD_INT 5
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: LIST
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: ST_TO_ADDR
// end ; 2 :
72022: GO 72581
72024: LD_INT 2
72026: DOUBLE
72027: EQUAL
72028: IFTRUE 72032
72030: GO 72161
72032: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72033: LD_ADDR_VAR 0 5
72037: PUSH
72038: LD_VAR 0 1
72042: PUSH
72043: LD_VAR 0 2
72047: PUSH
72048: LD_INT 3
72050: MINUS
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: LIST
72059: PUSH
72060: LD_VAR 0 1
72064: PUSH
72065: LD_INT 4
72067: PLUS
72068: PUSH
72069: LD_VAR 0 2
72073: PUSH
72074: LD_INT 4
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: LIST
72081: PUSH
72082: LD_VAR 0 1
72086: PUSH
72087: LD_VAR 0 2
72091: PUSH
72092: LD_INT 4
72094: PLUS
72095: PUSH
72096: LD_INT 0
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: LIST
72103: PUSH
72104: LD_VAR 0 1
72108: PUSH
72109: LD_INT 3
72111: MINUS
72112: PUSH
72113: LD_VAR 0 2
72117: PUSH
72118: LD_INT 1
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: LIST
72125: PUSH
72126: LD_VAR 0 1
72130: PUSH
72131: LD_INT 4
72133: MINUS
72134: PUSH
72135: LD_VAR 0 2
72139: PUSH
72140: LD_INT 4
72142: MINUS
72143: PUSH
72144: LD_INT 2
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: LIST
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: ST_TO_ADDR
// end ; 3 :
72159: GO 72581
72161: LD_INT 3
72163: DOUBLE
72164: EQUAL
72165: IFTRUE 72169
72167: GO 72302
72169: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72170: LD_ADDR_VAR 0 5
72174: PUSH
72175: LD_VAR 0 1
72179: PUSH
72180: LD_INT 3
72182: PLUS
72183: PUSH
72184: LD_VAR 0 2
72188: PUSH
72189: LD_INT 4
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: LIST
72196: PUSH
72197: LD_VAR 0 1
72201: PUSH
72202: LD_INT 4
72204: PLUS
72205: PUSH
72206: LD_VAR 0 2
72210: PUSH
72211: LD_INT 4
72213: PLUS
72214: PUSH
72215: LD_INT 5
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: LIST
72222: PUSH
72223: LD_VAR 0 1
72227: PUSH
72228: LD_INT 4
72230: MINUS
72231: PUSH
72232: LD_VAR 0 2
72236: PUSH
72237: LD_INT 1
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: LIST
72244: PUSH
72245: LD_VAR 0 1
72249: PUSH
72250: LD_VAR 0 2
72254: PUSH
72255: LD_INT 4
72257: MINUS
72258: PUSH
72259: LD_INT 3
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: LIST
72266: PUSH
72267: LD_VAR 0 1
72271: PUSH
72272: LD_INT 3
72274: MINUS
72275: PUSH
72276: LD_VAR 0 2
72280: PUSH
72281: LD_INT 3
72283: MINUS
72284: PUSH
72285: LD_INT 2
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: LIST
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: ST_TO_ADDR
// end ; 4 :
72300: GO 72581
72302: LD_INT 4
72304: DOUBLE
72305: EQUAL
72306: IFTRUE 72310
72308: GO 72443
72310: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72311: LD_ADDR_VAR 0 5
72315: PUSH
72316: LD_VAR 0 1
72320: PUSH
72321: LD_VAR 0 2
72325: PUSH
72326: LD_INT 4
72328: PLUS
72329: PUSH
72330: LD_INT 0
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: LIST
72337: PUSH
72338: LD_VAR 0 1
72342: PUSH
72343: LD_INT 3
72345: PLUS
72346: PUSH
72347: LD_VAR 0 2
72351: PUSH
72352: LD_INT 3
72354: PLUS
72355: PUSH
72356: LD_INT 5
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: LIST
72363: PUSH
72364: LD_VAR 0 1
72368: PUSH
72369: LD_INT 4
72371: PLUS
72372: PUSH
72373: LD_VAR 0 2
72377: PUSH
72378: LD_INT 4
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: LIST
72385: PUSH
72386: LD_VAR 0 1
72390: PUSH
72391: LD_VAR 0 2
72395: PUSH
72396: LD_INT 3
72398: MINUS
72399: PUSH
72400: LD_INT 3
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: LIST
72407: PUSH
72408: LD_VAR 0 1
72412: PUSH
72413: LD_INT 4
72415: MINUS
72416: PUSH
72417: LD_VAR 0 2
72421: PUSH
72422: LD_INT 4
72424: MINUS
72425: PUSH
72426: LD_INT 2
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: LIST
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: ST_TO_ADDR
// end ; 5 :
72441: GO 72581
72443: LD_INT 5
72445: DOUBLE
72446: EQUAL
72447: IFTRUE 72451
72449: GO 72580
72451: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72452: LD_ADDR_VAR 0 5
72456: PUSH
72457: LD_VAR 0 1
72461: PUSH
72462: LD_INT 4
72464: MINUS
72465: PUSH
72466: LD_VAR 0 2
72470: PUSH
72471: LD_INT 1
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: LIST
72478: PUSH
72479: LD_VAR 0 1
72483: PUSH
72484: LD_VAR 0 2
72488: PUSH
72489: LD_INT 4
72491: MINUS
72492: PUSH
72493: LD_INT 3
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: LIST
72500: PUSH
72501: LD_VAR 0 1
72505: PUSH
72506: LD_INT 4
72508: PLUS
72509: PUSH
72510: LD_VAR 0 2
72514: PUSH
72515: LD_INT 4
72517: PLUS
72518: PUSH
72519: LD_INT 5
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: LIST
72526: PUSH
72527: LD_VAR 0 1
72531: PUSH
72532: LD_INT 3
72534: PLUS
72535: PUSH
72536: LD_VAR 0 2
72540: PUSH
72541: LD_INT 4
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: LIST
72548: PUSH
72549: LD_VAR 0 1
72553: PUSH
72554: LD_VAR 0 2
72558: PUSH
72559: LD_INT 3
72561: PLUS
72562: PUSH
72563: LD_INT 0
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: LIST
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: ST_TO_ADDR
// end ; end ;
72578: GO 72581
72580: POP
// result := list ;
72581: LD_ADDR_VAR 0 4
72585: PUSH
72586: LD_VAR 0 5
72590: ST_TO_ADDR
// end ;
72591: LD_VAR 0 4
72595: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72596: LD_INT 0
72598: PPUSH
72599: PPUSH
72600: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72601: LD_VAR 0 1
72605: NOT
72606: PUSH
72607: LD_VAR 0 2
72611: PUSH
72612: LD_INT 1
72614: PUSH
72615: LD_INT 2
72617: PUSH
72618: LD_INT 3
72620: PUSH
72621: LD_INT 4
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: IN
72630: NOT
72631: OR
72632: IFFALSE 72636
// exit ;
72634: GO 72719
// tmp := [ ] ;
72636: LD_ADDR_VAR 0 5
72640: PUSH
72641: EMPTY
72642: ST_TO_ADDR
// for i in units do
72643: LD_ADDR_VAR 0 4
72647: PUSH
72648: LD_VAR 0 1
72652: PUSH
72653: FOR_IN
72654: IFFALSE 72688
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72656: LD_ADDR_VAR 0 5
72660: PUSH
72661: LD_VAR 0 5
72665: PPUSH
72666: LD_VAR 0 4
72670: PPUSH
72671: LD_VAR 0 2
72675: PPUSH
72676: CALL_OW 259
72680: PPUSH
72681: CALL 74092 0 2
72685: ST_TO_ADDR
72686: GO 72653
72688: POP
72689: POP
// if not tmp then
72690: LD_VAR 0 5
72694: NOT
72695: IFFALSE 72699
// exit ;
72697: GO 72719
// result := SortListByListDesc ( units , tmp ) ;
72699: LD_ADDR_VAR 0 3
72703: PUSH
72704: LD_VAR 0 1
72708: PPUSH
72709: LD_VAR 0 5
72713: PPUSH
72714: CALL_OW 77
72718: ST_TO_ADDR
// end ;
72719: LD_VAR 0 3
72723: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72724: LD_INT 0
72726: PPUSH
72727: PPUSH
72728: PPUSH
// result := false ;
72729: LD_ADDR_VAR 0 3
72733: PUSH
72734: LD_INT 0
72736: ST_TO_ADDR
// if not building then
72737: LD_VAR 0 2
72741: NOT
72742: IFFALSE 72746
// exit ;
72744: GO 72884
// x := GetX ( building ) ;
72746: LD_ADDR_VAR 0 4
72750: PUSH
72751: LD_VAR 0 2
72755: PPUSH
72756: CALL_OW 250
72760: ST_TO_ADDR
// y := GetY ( building ) ;
72761: LD_ADDR_VAR 0 5
72765: PUSH
72766: LD_VAR 0 2
72770: PPUSH
72771: CALL_OW 251
72775: ST_TO_ADDR
// if not x or not y then
72776: LD_VAR 0 4
72780: NOT
72781: PUSH
72782: LD_VAR 0 5
72786: NOT
72787: OR
72788: IFFALSE 72792
// exit ;
72790: GO 72884
// if GetTaskList ( unit ) then
72792: LD_VAR 0 1
72796: PPUSH
72797: CALL_OW 437
72801: IFFALSE 72884
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72803: LD_STRING e
72805: PUSH
72806: LD_VAR 0 1
72810: PPUSH
72811: CALL_OW 437
72815: PUSH
72816: LD_INT 1
72818: ARRAY
72819: PUSH
72820: LD_INT 1
72822: ARRAY
72823: EQUAL
72824: PUSH
72825: LD_VAR 0 4
72829: PUSH
72830: LD_VAR 0 1
72834: PPUSH
72835: CALL_OW 437
72839: PUSH
72840: LD_INT 1
72842: ARRAY
72843: PUSH
72844: LD_INT 2
72846: ARRAY
72847: EQUAL
72848: AND
72849: PUSH
72850: LD_VAR 0 5
72854: PUSH
72855: LD_VAR 0 1
72859: PPUSH
72860: CALL_OW 437
72864: PUSH
72865: LD_INT 1
72867: ARRAY
72868: PUSH
72869: LD_INT 3
72871: ARRAY
72872: EQUAL
72873: AND
72874: IFFALSE 72884
// result := true end ;
72876: LD_ADDR_VAR 0 3
72880: PUSH
72881: LD_INT 1
72883: ST_TO_ADDR
// end ;
72884: LD_VAR 0 3
72888: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72889: LD_INT 0
72891: PPUSH
// result := false ;
72892: LD_ADDR_VAR 0 4
72896: PUSH
72897: LD_INT 0
72899: ST_TO_ADDR
// if GetTaskList ( unit ) then
72900: LD_VAR 0 1
72904: PPUSH
72905: CALL_OW 437
72909: IFFALSE 72992
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72911: LD_STRING M
72913: PUSH
72914: LD_VAR 0 1
72918: PPUSH
72919: CALL_OW 437
72923: PUSH
72924: LD_INT 1
72926: ARRAY
72927: PUSH
72928: LD_INT 1
72930: ARRAY
72931: EQUAL
72932: PUSH
72933: LD_VAR 0 2
72937: PUSH
72938: LD_VAR 0 1
72942: PPUSH
72943: CALL_OW 437
72947: PUSH
72948: LD_INT 1
72950: ARRAY
72951: PUSH
72952: LD_INT 2
72954: ARRAY
72955: EQUAL
72956: AND
72957: PUSH
72958: LD_VAR 0 3
72962: PUSH
72963: LD_VAR 0 1
72967: PPUSH
72968: CALL_OW 437
72972: PUSH
72973: LD_INT 1
72975: ARRAY
72976: PUSH
72977: LD_INT 3
72979: ARRAY
72980: EQUAL
72981: AND
72982: IFFALSE 72992
// result := true ;
72984: LD_ADDR_VAR 0 4
72988: PUSH
72989: LD_INT 1
72991: ST_TO_ADDR
// end ; end ;
72992: LD_VAR 0 4
72996: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72997: LD_INT 0
72999: PPUSH
73000: PPUSH
73001: PPUSH
73002: PPUSH
// if not unit or not area then
73003: LD_VAR 0 1
73007: NOT
73008: PUSH
73009: LD_VAR 0 2
73013: NOT
73014: OR
73015: IFFALSE 73019
// exit ;
73017: GO 73195
// tmp := AreaToList ( area , i ) ;
73019: LD_ADDR_VAR 0 6
73023: PUSH
73024: LD_VAR 0 2
73028: PPUSH
73029: LD_VAR 0 5
73033: PPUSH
73034: CALL_OW 517
73038: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73039: LD_ADDR_VAR 0 5
73043: PUSH
73044: DOUBLE
73045: LD_INT 1
73047: DEC
73048: ST_TO_ADDR
73049: LD_VAR 0 6
73053: PUSH
73054: LD_INT 1
73056: ARRAY
73057: PUSH
73058: FOR_TO
73059: IFFALSE 73193
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73061: LD_ADDR_VAR 0 7
73065: PUSH
73066: LD_VAR 0 6
73070: PUSH
73071: LD_INT 1
73073: ARRAY
73074: PUSH
73075: LD_VAR 0 5
73079: ARRAY
73080: PUSH
73081: LD_VAR 0 6
73085: PUSH
73086: LD_INT 2
73088: ARRAY
73089: PUSH
73090: LD_VAR 0 5
73094: ARRAY
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73100: LD_INT 92
73102: PUSH
73103: LD_VAR 0 7
73107: PUSH
73108: LD_INT 1
73110: ARRAY
73111: PUSH
73112: LD_VAR 0 7
73116: PUSH
73117: LD_INT 2
73119: ARRAY
73120: PUSH
73121: LD_INT 2
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: PPUSH
73130: CALL_OW 69
73134: PUSH
73135: LD_INT 0
73137: EQUAL
73138: IFFALSE 73191
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73140: LD_VAR 0 1
73144: PPUSH
73145: LD_VAR 0 7
73149: PUSH
73150: LD_INT 1
73152: ARRAY
73153: PPUSH
73154: LD_VAR 0 7
73158: PUSH
73159: LD_INT 2
73161: ARRAY
73162: PPUSH
73163: LD_VAR 0 3
73167: PPUSH
73168: CALL_OW 48
// result := IsPlaced ( unit ) ;
73172: LD_ADDR_VAR 0 4
73176: PUSH
73177: LD_VAR 0 1
73181: PPUSH
73182: CALL_OW 305
73186: ST_TO_ADDR
// exit ;
73187: POP
73188: POP
73189: GO 73195
// end ; end ;
73191: GO 73058
73193: POP
73194: POP
// end ;
73195: LD_VAR 0 4
73199: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73200: LD_INT 0
73202: PPUSH
73203: PPUSH
73204: PPUSH
// if not side or side > 8 then
73205: LD_VAR 0 1
73209: NOT
73210: PUSH
73211: LD_VAR 0 1
73215: PUSH
73216: LD_INT 8
73218: GREATER
73219: OR
73220: IFFALSE 73224
// exit ;
73222: GO 73411
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73224: LD_ADDR_VAR 0 4
73228: PUSH
73229: LD_INT 22
73231: PUSH
73232: LD_VAR 0 1
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 21
73243: PUSH
73244: LD_INT 3
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PPUSH
73255: CALL_OW 69
73259: ST_TO_ADDR
// if not tmp then
73260: LD_VAR 0 4
73264: NOT
73265: IFFALSE 73269
// exit ;
73267: GO 73411
// enable_addtolog := true ;
73269: LD_ADDR_OWVAR 81
73273: PUSH
73274: LD_INT 1
73276: ST_TO_ADDR
// AddToLog ( [ ) ;
73277: LD_STRING [
73279: PPUSH
73280: CALL_OW 561
// for i in tmp do
73284: LD_ADDR_VAR 0 3
73288: PUSH
73289: LD_VAR 0 4
73293: PUSH
73294: FOR_IN
73295: IFFALSE 73402
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73297: LD_STRING [
73299: PUSH
73300: LD_VAR 0 3
73304: PPUSH
73305: CALL_OW 266
73309: STR
73310: PUSH
73311: LD_STRING , 
73313: STR
73314: PUSH
73315: LD_VAR 0 3
73319: PPUSH
73320: CALL_OW 250
73324: STR
73325: PUSH
73326: LD_STRING , 
73328: STR
73329: PUSH
73330: LD_VAR 0 3
73334: PPUSH
73335: CALL_OW 251
73339: STR
73340: PUSH
73341: LD_STRING , 
73343: STR
73344: PUSH
73345: LD_VAR 0 3
73349: PPUSH
73350: CALL_OW 254
73354: STR
73355: PUSH
73356: LD_STRING , 
73358: STR
73359: PUSH
73360: LD_VAR 0 3
73364: PPUSH
73365: LD_INT 1
73367: PPUSH
73368: CALL_OW 268
73372: STR
73373: PUSH
73374: LD_STRING , 
73376: STR
73377: PUSH
73378: LD_VAR 0 3
73382: PPUSH
73383: LD_INT 2
73385: PPUSH
73386: CALL_OW 268
73390: STR
73391: PUSH
73392: LD_STRING ],
73394: STR
73395: PPUSH
73396: CALL_OW 561
// end ;
73400: GO 73294
73402: POP
73403: POP
// AddToLog ( ]; ) ;
73404: LD_STRING ];
73406: PPUSH
73407: CALL_OW 561
// end ;
73411: LD_VAR 0 2
73415: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73416: LD_INT 0
73418: PPUSH
73419: PPUSH
73420: PPUSH
73421: PPUSH
73422: PPUSH
// if not area or not rate or not max then
73423: LD_VAR 0 1
73427: NOT
73428: PUSH
73429: LD_VAR 0 2
73433: NOT
73434: OR
73435: PUSH
73436: LD_VAR 0 4
73440: NOT
73441: OR
73442: IFFALSE 73446
// exit ;
73444: GO 73635
// while 1 do
73446: LD_INT 1
73448: IFFALSE 73635
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73450: LD_ADDR_VAR 0 9
73454: PUSH
73455: LD_VAR 0 1
73459: PPUSH
73460: LD_INT 1
73462: PPUSH
73463: CALL_OW 287
73467: PUSH
73468: LD_INT 10
73470: MUL
73471: ST_TO_ADDR
// r := rate / 10 ;
73472: LD_ADDR_VAR 0 7
73476: PUSH
73477: LD_VAR 0 2
73481: PUSH
73482: LD_INT 10
73484: DIVREAL
73485: ST_TO_ADDR
// time := 1 1$00 ;
73486: LD_ADDR_VAR 0 8
73490: PUSH
73491: LD_INT 2100
73493: ST_TO_ADDR
// if amount < min then
73494: LD_VAR 0 9
73498: PUSH
73499: LD_VAR 0 3
73503: LESS
73504: IFFALSE 73522
// r := r * 2 else
73506: LD_ADDR_VAR 0 7
73510: PUSH
73511: LD_VAR 0 7
73515: PUSH
73516: LD_INT 2
73518: MUL
73519: ST_TO_ADDR
73520: GO 73548
// if amount > max then
73522: LD_VAR 0 9
73526: PUSH
73527: LD_VAR 0 4
73531: GREATER
73532: IFFALSE 73548
// r := r / 2 ;
73534: LD_ADDR_VAR 0 7
73538: PUSH
73539: LD_VAR 0 7
73543: PUSH
73544: LD_INT 2
73546: DIVREAL
73547: ST_TO_ADDR
// time := time / r ;
73548: LD_ADDR_VAR 0 8
73552: PUSH
73553: LD_VAR 0 8
73557: PUSH
73558: LD_VAR 0 7
73562: DIVREAL
73563: ST_TO_ADDR
// if time < 0 then
73564: LD_VAR 0 8
73568: PUSH
73569: LD_INT 0
73571: LESS
73572: IFFALSE 73589
// time := time * - 1 ;
73574: LD_ADDR_VAR 0 8
73578: PUSH
73579: LD_VAR 0 8
73583: PUSH
73584: LD_INT 1
73586: NEG
73587: MUL
73588: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73589: LD_VAR 0 8
73593: PUSH
73594: LD_INT 35
73596: PPUSH
73597: LD_INT 875
73599: PPUSH
73600: CALL_OW 12
73604: PLUS
73605: PPUSH
73606: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73610: LD_INT 1
73612: PPUSH
73613: LD_INT 5
73615: PPUSH
73616: CALL_OW 12
73620: PPUSH
73621: LD_VAR 0 1
73625: PPUSH
73626: LD_INT 1
73628: PPUSH
73629: CALL_OW 55
// end ;
73633: GO 73446
// end ;
73635: LD_VAR 0 5
73639: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73640: LD_INT 0
73642: PPUSH
73643: PPUSH
73644: PPUSH
73645: PPUSH
73646: PPUSH
73647: PPUSH
73648: PPUSH
73649: PPUSH
// if not turrets or not factories then
73650: LD_VAR 0 1
73654: NOT
73655: PUSH
73656: LD_VAR 0 2
73660: NOT
73661: OR
73662: IFFALSE 73666
// exit ;
73664: GO 73973
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73666: LD_ADDR_VAR 0 10
73670: PUSH
73671: LD_INT 5
73673: PUSH
73674: LD_INT 6
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 2
73683: PUSH
73684: LD_INT 4
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: PUSH
73691: LD_INT 3
73693: PUSH
73694: LD_INT 5
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 24
73708: PUSH
73709: LD_INT 25
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 23
73718: PUSH
73719: LD_INT 27
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 42
73732: PUSH
73733: LD_INT 43
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 44
73742: PUSH
73743: LD_INT 46
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 45
73752: PUSH
73753: LD_INT 47
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: LIST
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: LIST
73769: ST_TO_ADDR
// result := [ ] ;
73770: LD_ADDR_VAR 0 3
73774: PUSH
73775: EMPTY
73776: ST_TO_ADDR
// for i in turrets do
73777: LD_ADDR_VAR 0 4
73781: PUSH
73782: LD_VAR 0 1
73786: PUSH
73787: FOR_IN
73788: IFFALSE 73971
// begin nat := GetNation ( i ) ;
73790: LD_ADDR_VAR 0 7
73794: PUSH
73795: LD_VAR 0 4
73799: PPUSH
73800: CALL_OW 248
73804: ST_TO_ADDR
// weapon := 0 ;
73805: LD_ADDR_VAR 0 8
73809: PUSH
73810: LD_INT 0
73812: ST_TO_ADDR
// if not nat then
73813: LD_VAR 0 7
73817: NOT
73818: IFFALSE 73822
// continue ;
73820: GO 73787
// for j in list [ nat ] do
73822: LD_ADDR_VAR 0 5
73826: PUSH
73827: LD_VAR 0 10
73831: PUSH
73832: LD_VAR 0 7
73836: ARRAY
73837: PUSH
73838: FOR_IN
73839: IFFALSE 73880
// if GetBWeapon ( i ) = j [ 1 ] then
73841: LD_VAR 0 4
73845: PPUSH
73846: CALL_OW 269
73850: PUSH
73851: LD_VAR 0 5
73855: PUSH
73856: LD_INT 1
73858: ARRAY
73859: EQUAL
73860: IFFALSE 73878
// begin weapon := j [ 2 ] ;
73862: LD_ADDR_VAR 0 8
73866: PUSH
73867: LD_VAR 0 5
73871: PUSH
73872: LD_INT 2
73874: ARRAY
73875: ST_TO_ADDR
// break ;
73876: GO 73880
// end ;
73878: GO 73838
73880: POP
73881: POP
// if not weapon then
73882: LD_VAR 0 8
73886: NOT
73887: IFFALSE 73891
// continue ;
73889: GO 73787
// for k in factories do
73891: LD_ADDR_VAR 0 6
73895: PUSH
73896: LD_VAR 0 2
73900: PUSH
73901: FOR_IN
73902: IFFALSE 73967
// begin weapons := AvailableWeaponList ( k ) ;
73904: LD_ADDR_VAR 0 9
73908: PUSH
73909: LD_VAR 0 6
73913: PPUSH
73914: CALL_OW 478
73918: ST_TO_ADDR
// if not weapons then
73919: LD_VAR 0 9
73923: NOT
73924: IFFALSE 73928
// continue ;
73926: GO 73901
// if weapon in weapons then
73928: LD_VAR 0 8
73932: PUSH
73933: LD_VAR 0 9
73937: IN
73938: IFFALSE 73965
// begin result := [ i , weapon ] ;
73940: LD_ADDR_VAR 0 3
73944: PUSH
73945: LD_VAR 0 4
73949: PUSH
73950: LD_VAR 0 8
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: ST_TO_ADDR
// exit ;
73959: POP
73960: POP
73961: POP
73962: POP
73963: GO 73973
// end ; end ;
73965: GO 73901
73967: POP
73968: POP
// end ;
73969: GO 73787
73971: POP
73972: POP
// end ;
73973: LD_VAR 0 3
73977: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73978: LD_INT 0
73980: PPUSH
// if not side or side > 8 then
73981: LD_VAR 0 3
73985: NOT
73986: PUSH
73987: LD_VAR 0 3
73991: PUSH
73992: LD_INT 8
73994: GREATER
73995: OR
73996: IFFALSE 74000
// exit ;
73998: GO 74059
// if not range then
74000: LD_VAR 0 4
74004: NOT
74005: IFFALSE 74016
// range := - 12 ;
74007: LD_ADDR_VAR 0 4
74011: PUSH
74012: LD_INT 12
74014: NEG
74015: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74016: LD_VAR 0 1
74020: PPUSH
74021: LD_VAR 0 2
74025: PPUSH
74026: LD_VAR 0 3
74030: PPUSH
74031: LD_VAR 0 4
74035: PPUSH
74036: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74040: LD_VAR 0 1
74044: PPUSH
74045: LD_VAR 0 2
74049: PPUSH
74050: LD_VAR 0 3
74054: PPUSH
74055: CALL_OW 331
// end ;
74059: LD_VAR 0 5
74063: RET
// export function Video ( mode ) ; begin
74064: LD_INT 0
74066: PPUSH
// ingame_video = mode ;
74067: LD_ADDR_OWVAR 52
74071: PUSH
74072: LD_VAR 0 1
74076: ST_TO_ADDR
// interface_hidden = mode ;
74077: LD_ADDR_OWVAR 54
74081: PUSH
74082: LD_VAR 0 1
74086: ST_TO_ADDR
// end ;
74087: LD_VAR 0 2
74091: RET
// export function Join ( array , element ) ; begin
74092: LD_INT 0
74094: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74095: LD_ADDR_VAR 0 3
74099: PUSH
74100: LD_VAR 0 1
74104: PPUSH
74105: LD_VAR 0 1
74109: PUSH
74110: LD_INT 1
74112: PLUS
74113: PPUSH
74114: LD_VAR 0 2
74118: PPUSH
74119: CALL_OW 1
74123: ST_TO_ADDR
// end ;
74124: LD_VAR 0 3
74128: RET
// export function JoinUnion ( array , element ) ; begin
74129: LD_INT 0
74131: PPUSH
// result := array union element ;
74132: LD_ADDR_VAR 0 3
74136: PUSH
74137: LD_VAR 0 1
74141: PUSH
74142: LD_VAR 0 2
74146: UNION
74147: ST_TO_ADDR
// end ;
74148: LD_VAR 0 3
74152: RET
// export function GetBehemoths ( side ) ; begin
74153: LD_INT 0
74155: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74156: LD_ADDR_VAR 0 2
74160: PUSH
74161: LD_INT 22
74163: PUSH
74164: LD_VAR 0 1
74168: PUSH
74169: EMPTY
74170: LIST
74171: LIST
74172: PUSH
74173: LD_INT 31
74175: PUSH
74176: LD_INT 25
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PPUSH
74187: CALL_OW 69
74191: ST_TO_ADDR
// end ;
74192: LD_VAR 0 2
74196: RET
// export function Shuffle ( array ) ; var i , index ; begin
74197: LD_INT 0
74199: PPUSH
74200: PPUSH
74201: PPUSH
// result := [ ] ;
74202: LD_ADDR_VAR 0 2
74206: PUSH
74207: EMPTY
74208: ST_TO_ADDR
// if not array then
74209: LD_VAR 0 1
74213: NOT
74214: IFFALSE 74218
// exit ;
74216: GO 74317
// Randomize ;
74218: CALL_OW 10
// for i = array downto 1 do
74222: LD_ADDR_VAR 0 3
74226: PUSH
74227: DOUBLE
74228: LD_VAR 0 1
74232: INC
74233: ST_TO_ADDR
74234: LD_INT 1
74236: PUSH
74237: FOR_DOWNTO
74238: IFFALSE 74315
// begin index := rand ( 1 , array ) ;
74240: LD_ADDR_VAR 0 4
74244: PUSH
74245: LD_INT 1
74247: PPUSH
74248: LD_VAR 0 1
74252: PPUSH
74253: CALL_OW 12
74257: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74258: LD_ADDR_VAR 0 2
74262: PUSH
74263: LD_VAR 0 2
74267: PPUSH
74268: LD_VAR 0 2
74272: PUSH
74273: LD_INT 1
74275: PLUS
74276: PPUSH
74277: LD_VAR 0 1
74281: PUSH
74282: LD_VAR 0 4
74286: ARRAY
74287: PPUSH
74288: CALL_OW 2
74292: ST_TO_ADDR
// array := Delete ( array , index ) ;
74293: LD_ADDR_VAR 0 1
74297: PUSH
74298: LD_VAR 0 1
74302: PPUSH
74303: LD_VAR 0 4
74307: PPUSH
74308: CALL_OW 3
74312: ST_TO_ADDR
// end ;
74313: GO 74237
74315: POP
74316: POP
// end ;
74317: LD_VAR 0 2
74321: RET
// export function GetBaseMaterials ( base ) ; begin
74322: LD_INT 0
74324: PPUSH
// result := [ 0 , 0 , 0 ] ;
74325: LD_ADDR_VAR 0 2
74329: PUSH
74330: LD_INT 0
74332: PUSH
74333: LD_INT 0
74335: PUSH
74336: LD_INT 0
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: LIST
74343: ST_TO_ADDR
// if not base then
74344: LD_VAR 0 1
74348: NOT
74349: IFFALSE 74353
// exit ;
74351: GO 74402
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74353: LD_ADDR_VAR 0 2
74357: PUSH
74358: LD_VAR 0 1
74362: PPUSH
74363: LD_INT 1
74365: PPUSH
74366: CALL_OW 275
74370: PUSH
74371: LD_VAR 0 1
74375: PPUSH
74376: LD_INT 2
74378: PPUSH
74379: CALL_OW 275
74383: PUSH
74384: LD_VAR 0 1
74388: PPUSH
74389: LD_INT 3
74391: PPUSH
74392: CALL_OW 275
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: LIST
74401: ST_TO_ADDR
// end ;
74402: LD_VAR 0 2
74406: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74407: LD_INT 0
74409: PPUSH
74410: PPUSH
// result := array ;
74411: LD_ADDR_VAR 0 3
74415: PUSH
74416: LD_VAR 0 1
74420: ST_TO_ADDR
// if size >= result then
74421: LD_VAR 0 2
74425: PUSH
74426: LD_VAR 0 3
74430: GREATEREQUAL
74431: IFFALSE 74435
// exit ;
74433: GO 74485
// if size then
74435: LD_VAR 0 2
74439: IFFALSE 74485
// for i := array downto size do
74441: LD_ADDR_VAR 0 4
74445: PUSH
74446: DOUBLE
74447: LD_VAR 0 1
74451: INC
74452: ST_TO_ADDR
74453: LD_VAR 0 2
74457: PUSH
74458: FOR_DOWNTO
74459: IFFALSE 74483
// result := Delete ( result , result ) ;
74461: LD_ADDR_VAR 0 3
74465: PUSH
74466: LD_VAR 0 3
74470: PPUSH
74471: LD_VAR 0 3
74475: PPUSH
74476: CALL_OW 3
74480: ST_TO_ADDR
74481: GO 74458
74483: POP
74484: POP
// end ;
74485: LD_VAR 0 3
74489: RET
// export function ComExit ( unit ) ; var tmp ; begin
74490: LD_INT 0
74492: PPUSH
74493: PPUSH
// if not IsInUnit ( unit ) then
74494: LD_VAR 0 1
74498: PPUSH
74499: CALL_OW 310
74503: NOT
74504: IFFALSE 74508
// exit ;
74506: GO 74568
// tmp := IsInUnit ( unit ) ;
74508: LD_ADDR_VAR 0 3
74512: PUSH
74513: LD_VAR 0 1
74517: PPUSH
74518: CALL_OW 310
74522: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74523: LD_VAR 0 3
74527: PPUSH
74528: CALL_OW 247
74532: PUSH
74533: LD_INT 2
74535: EQUAL
74536: IFFALSE 74549
// ComExitVehicle ( unit ) else
74538: LD_VAR 0 1
74542: PPUSH
74543: CALL_OW 121
74547: GO 74558
// ComExitBuilding ( unit ) ;
74549: LD_VAR 0 1
74553: PPUSH
74554: CALL_OW 122
// result := tmp ;
74558: LD_ADDR_VAR 0 2
74562: PUSH
74563: LD_VAR 0 3
74567: ST_TO_ADDR
// end ;
74568: LD_VAR 0 2
74572: RET
// export function ComExitAll ( units ) ; var i ; begin
74573: LD_INT 0
74575: PPUSH
74576: PPUSH
// if not units then
74577: LD_VAR 0 1
74581: NOT
74582: IFFALSE 74586
// exit ;
74584: GO 74612
// for i in units do
74586: LD_ADDR_VAR 0 3
74590: PUSH
74591: LD_VAR 0 1
74595: PUSH
74596: FOR_IN
74597: IFFALSE 74610
// ComExit ( i ) ;
74599: LD_VAR 0 3
74603: PPUSH
74604: CALL 74490 0 1
74608: GO 74596
74610: POP
74611: POP
// end ;
74612: LD_VAR 0 2
74616: RET
// export function ResetHc ; begin
74617: LD_INT 0
74619: PPUSH
// InitHc ;
74620: CALL_OW 19
// hc_importance := 0 ;
74624: LD_ADDR_OWVAR 32
74628: PUSH
74629: LD_INT 0
74631: ST_TO_ADDR
// end ;
74632: LD_VAR 0 1
74636: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74637: LD_INT 0
74639: PPUSH
74640: PPUSH
74641: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74642: LD_ADDR_VAR 0 6
74646: PUSH
74647: LD_VAR 0 1
74651: PUSH
74652: LD_VAR 0 3
74656: PLUS
74657: PUSH
74658: LD_INT 2
74660: DIV
74661: ST_TO_ADDR
// if _x < 0 then
74662: LD_VAR 0 6
74666: PUSH
74667: LD_INT 0
74669: LESS
74670: IFFALSE 74687
// _x := _x * - 1 ;
74672: LD_ADDR_VAR 0 6
74676: PUSH
74677: LD_VAR 0 6
74681: PUSH
74682: LD_INT 1
74684: NEG
74685: MUL
74686: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74687: LD_ADDR_VAR 0 7
74691: PUSH
74692: LD_VAR 0 2
74696: PUSH
74697: LD_VAR 0 4
74701: PLUS
74702: PUSH
74703: LD_INT 2
74705: DIV
74706: ST_TO_ADDR
// if _y < 0 then
74707: LD_VAR 0 7
74711: PUSH
74712: LD_INT 0
74714: LESS
74715: IFFALSE 74732
// _y := _y * - 1 ;
74717: LD_ADDR_VAR 0 7
74721: PUSH
74722: LD_VAR 0 7
74726: PUSH
74727: LD_INT 1
74729: NEG
74730: MUL
74731: ST_TO_ADDR
// result := [ _x , _y ] ;
74732: LD_ADDR_VAR 0 5
74736: PUSH
74737: LD_VAR 0 6
74741: PUSH
74742: LD_VAR 0 7
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: ST_TO_ADDR
// end ;
74751: LD_VAR 0 5
74755: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74756: LD_INT 0
74758: PPUSH
74759: PPUSH
74760: PPUSH
74761: PPUSH
// task := GetTaskList ( unit ) ;
74762: LD_ADDR_VAR 0 7
74766: PUSH
74767: LD_VAR 0 1
74771: PPUSH
74772: CALL_OW 437
74776: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74777: LD_VAR 0 7
74781: NOT
74782: PUSH
74783: LD_VAR 0 1
74787: PPUSH
74788: LD_VAR 0 2
74792: PPUSH
74793: CALL_OW 308
74797: NOT
74798: AND
74799: IFFALSE 74803
// exit ;
74801: GO 74921
// if IsInArea ( unit , area ) then
74803: LD_VAR 0 1
74807: PPUSH
74808: LD_VAR 0 2
74812: PPUSH
74813: CALL_OW 308
74817: IFFALSE 74835
// begin ComMoveToArea ( unit , goAway ) ;
74819: LD_VAR 0 1
74823: PPUSH
74824: LD_VAR 0 3
74828: PPUSH
74829: CALL_OW 113
// exit ;
74833: GO 74921
// end ; if task [ 1 ] [ 1 ] <> M then
74835: LD_VAR 0 7
74839: PUSH
74840: LD_INT 1
74842: ARRAY
74843: PUSH
74844: LD_INT 1
74846: ARRAY
74847: PUSH
74848: LD_STRING M
74850: NONEQUAL
74851: IFFALSE 74855
// exit ;
74853: GO 74921
// x := task [ 1 ] [ 2 ] ;
74855: LD_ADDR_VAR 0 5
74859: PUSH
74860: LD_VAR 0 7
74864: PUSH
74865: LD_INT 1
74867: ARRAY
74868: PUSH
74869: LD_INT 2
74871: ARRAY
74872: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74873: LD_ADDR_VAR 0 6
74877: PUSH
74878: LD_VAR 0 7
74882: PUSH
74883: LD_INT 1
74885: ARRAY
74886: PUSH
74887: LD_INT 3
74889: ARRAY
74890: ST_TO_ADDR
// if InArea ( x , y , area ) then
74891: LD_VAR 0 5
74895: PPUSH
74896: LD_VAR 0 6
74900: PPUSH
74901: LD_VAR 0 2
74905: PPUSH
74906: CALL_OW 309
74910: IFFALSE 74921
// ComStop ( unit ) ;
74912: LD_VAR 0 1
74916: PPUSH
74917: CALL_OW 141
// end ;
74921: LD_VAR 0 4
74925: RET
// export function Abs ( value ) ; begin
74926: LD_INT 0
74928: PPUSH
// result := value ;
74929: LD_ADDR_VAR 0 2
74933: PUSH
74934: LD_VAR 0 1
74938: ST_TO_ADDR
// if value < 0 then
74939: LD_VAR 0 1
74943: PUSH
74944: LD_INT 0
74946: LESS
74947: IFFALSE 74964
// result := value * - 1 ;
74949: LD_ADDR_VAR 0 2
74953: PUSH
74954: LD_VAR 0 1
74958: PUSH
74959: LD_INT 1
74961: NEG
74962: MUL
74963: ST_TO_ADDR
// end ;
74964: LD_VAR 0 2
74968: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74969: LD_INT 0
74971: PPUSH
74972: PPUSH
74973: PPUSH
74974: PPUSH
74975: PPUSH
74976: PPUSH
74977: PPUSH
74978: PPUSH
// if not unit or not building then
74979: LD_VAR 0 1
74983: NOT
74984: PUSH
74985: LD_VAR 0 2
74989: NOT
74990: OR
74991: IFFALSE 74995
// exit ;
74993: GO 75221
// x := GetX ( building ) ;
74995: LD_ADDR_VAR 0 4
74999: PUSH
75000: LD_VAR 0 2
75004: PPUSH
75005: CALL_OW 250
75009: ST_TO_ADDR
// y := GetY ( building ) ;
75010: LD_ADDR_VAR 0 6
75014: PUSH
75015: LD_VAR 0 2
75019: PPUSH
75020: CALL_OW 251
75024: ST_TO_ADDR
// d := GetDir ( building ) ;
75025: LD_ADDR_VAR 0 8
75029: PUSH
75030: LD_VAR 0 2
75034: PPUSH
75035: CALL_OW 254
75039: ST_TO_ADDR
// r := 4 ;
75040: LD_ADDR_VAR 0 9
75044: PUSH
75045: LD_INT 4
75047: ST_TO_ADDR
// for i := 1 to 5 do
75048: LD_ADDR_VAR 0 10
75052: PUSH
75053: DOUBLE
75054: LD_INT 1
75056: DEC
75057: ST_TO_ADDR
75058: LD_INT 5
75060: PUSH
75061: FOR_TO
75062: IFFALSE 75219
// begin _x := ShiftX ( x , d , r + i ) ;
75064: LD_ADDR_VAR 0 5
75068: PUSH
75069: LD_VAR 0 4
75073: PPUSH
75074: LD_VAR 0 8
75078: PPUSH
75079: LD_VAR 0 9
75083: PUSH
75084: LD_VAR 0 10
75088: PLUS
75089: PPUSH
75090: CALL_OW 272
75094: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75095: LD_ADDR_VAR 0 7
75099: PUSH
75100: LD_VAR 0 6
75104: PPUSH
75105: LD_VAR 0 8
75109: PPUSH
75110: LD_VAR 0 9
75114: PUSH
75115: LD_VAR 0 10
75119: PLUS
75120: PPUSH
75121: CALL_OW 273
75125: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75126: LD_VAR 0 5
75130: PPUSH
75131: LD_VAR 0 7
75135: PPUSH
75136: CALL_OW 488
75140: PUSH
75141: LD_VAR 0 5
75145: PPUSH
75146: LD_VAR 0 7
75150: PPUSH
75151: CALL_OW 428
75155: PPUSH
75156: CALL_OW 247
75160: PUSH
75161: LD_INT 3
75163: PUSH
75164: LD_INT 2
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: IN
75171: NOT
75172: AND
75173: IFFALSE 75217
// begin ComMoveXY ( unit , _x , _y ) ;
75175: LD_VAR 0 1
75179: PPUSH
75180: LD_VAR 0 5
75184: PPUSH
75185: LD_VAR 0 7
75189: PPUSH
75190: CALL_OW 111
// result := [ _x , _y ] ;
75194: LD_ADDR_VAR 0 3
75198: PUSH
75199: LD_VAR 0 5
75203: PUSH
75204: LD_VAR 0 7
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: ST_TO_ADDR
// exit ;
75213: POP
75214: POP
75215: GO 75221
// end ; end ;
75217: GO 75061
75219: POP
75220: POP
// end ;
75221: LD_VAR 0 3
75225: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75226: LD_INT 0
75228: PPUSH
75229: PPUSH
75230: PPUSH
// result := 0 ;
75231: LD_ADDR_VAR 0 3
75235: PUSH
75236: LD_INT 0
75238: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75239: LD_VAR 0 1
75243: PUSH
75244: LD_INT 0
75246: LESS
75247: PUSH
75248: LD_VAR 0 1
75252: PUSH
75253: LD_INT 8
75255: GREATER
75256: OR
75257: PUSH
75258: LD_VAR 0 2
75262: PUSH
75263: LD_INT 0
75265: LESS
75266: OR
75267: PUSH
75268: LD_VAR 0 2
75272: PUSH
75273: LD_INT 8
75275: GREATER
75276: OR
75277: IFFALSE 75281
// exit ;
75279: GO 75356
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75281: LD_ADDR_VAR 0 4
75285: PUSH
75286: LD_INT 22
75288: PUSH
75289: LD_VAR 0 2
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PPUSH
75298: CALL_OW 69
75302: PUSH
75303: FOR_IN
75304: IFFALSE 75354
// begin un := UnitShoot ( i ) ;
75306: LD_ADDR_VAR 0 5
75310: PUSH
75311: LD_VAR 0 4
75315: PPUSH
75316: CALL_OW 504
75320: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75321: LD_VAR 0 5
75325: PPUSH
75326: CALL_OW 255
75330: PUSH
75331: LD_VAR 0 1
75335: EQUAL
75336: IFFALSE 75352
// begin result := un ;
75338: LD_ADDR_VAR 0 3
75342: PUSH
75343: LD_VAR 0 5
75347: ST_TO_ADDR
// exit ;
75348: POP
75349: POP
75350: GO 75356
// end ; end ;
75352: GO 75303
75354: POP
75355: POP
// end ;
75356: LD_VAR 0 3
75360: RET
// export function GetCargoBay ( units ) ; begin
75361: LD_INT 0
75363: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75364: LD_ADDR_VAR 0 2
75368: PUSH
75369: LD_VAR 0 1
75373: PPUSH
75374: LD_INT 2
75376: PUSH
75377: LD_INT 34
75379: PUSH
75380: LD_INT 12
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 34
75389: PUSH
75390: LD_INT 51
75392: PUSH
75393: EMPTY
75394: LIST
75395: LIST
75396: PUSH
75397: LD_INT 34
75399: PUSH
75400: LD_INT 32
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: PUSH
75407: LD_INT 34
75409: PUSH
75410: LD_INT 89
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: PPUSH
75424: CALL_OW 72
75428: ST_TO_ADDR
// end ;
75429: LD_VAR 0 2
75433: RET
// export function Negate ( value ) ; begin
75434: LD_INT 0
75436: PPUSH
// result := not value ;
75437: LD_ADDR_VAR 0 2
75441: PUSH
75442: LD_VAR 0 1
75446: NOT
75447: ST_TO_ADDR
// end ;
75448: LD_VAR 0 2
75452: RET
// export function Inc ( value ) ; begin
75453: LD_INT 0
75455: PPUSH
// result := value + 1 ;
75456: LD_ADDR_VAR 0 2
75460: PUSH
75461: LD_VAR 0 1
75465: PUSH
75466: LD_INT 1
75468: PLUS
75469: ST_TO_ADDR
// end ;
75470: LD_VAR 0 2
75474: RET
// export function Dec ( value ) ; begin
75475: LD_INT 0
75477: PPUSH
// result := value - 1 ;
75478: LD_ADDR_VAR 0 2
75482: PUSH
75483: LD_VAR 0 1
75487: PUSH
75488: LD_INT 1
75490: MINUS
75491: ST_TO_ADDR
// end ;
75492: LD_VAR 0 2
75496: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75497: LD_INT 0
75499: PPUSH
75500: PPUSH
75501: PPUSH
75502: PPUSH
75503: PPUSH
75504: PPUSH
75505: PPUSH
75506: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75507: LD_VAR 0 1
75511: PPUSH
75512: LD_VAR 0 2
75516: PPUSH
75517: CALL_OW 488
75521: NOT
75522: PUSH
75523: LD_VAR 0 3
75527: PPUSH
75528: LD_VAR 0 4
75532: PPUSH
75533: CALL_OW 488
75537: NOT
75538: OR
75539: IFFALSE 75552
// begin result := - 1 ;
75541: LD_ADDR_VAR 0 5
75545: PUSH
75546: LD_INT 1
75548: NEG
75549: ST_TO_ADDR
// exit ;
75550: GO 75787
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75552: LD_ADDR_VAR 0 12
75556: PUSH
75557: LD_VAR 0 1
75561: PPUSH
75562: LD_VAR 0 2
75566: PPUSH
75567: LD_VAR 0 3
75571: PPUSH
75572: LD_VAR 0 4
75576: PPUSH
75577: CALL 74637 0 4
75581: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75582: LD_ADDR_VAR 0 11
75586: PUSH
75587: LD_VAR 0 1
75591: PPUSH
75592: LD_VAR 0 2
75596: PPUSH
75597: LD_VAR 0 12
75601: PUSH
75602: LD_INT 1
75604: ARRAY
75605: PPUSH
75606: LD_VAR 0 12
75610: PUSH
75611: LD_INT 2
75613: ARRAY
75614: PPUSH
75615: CALL_OW 298
75619: ST_TO_ADDR
// distance := 9999 ;
75620: LD_ADDR_VAR 0 10
75624: PUSH
75625: LD_INT 9999
75627: ST_TO_ADDR
// for i := 0 to 5 do
75628: LD_ADDR_VAR 0 6
75632: PUSH
75633: DOUBLE
75634: LD_INT 0
75636: DEC
75637: ST_TO_ADDR
75638: LD_INT 5
75640: PUSH
75641: FOR_TO
75642: IFFALSE 75785
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75644: LD_ADDR_VAR 0 7
75648: PUSH
75649: LD_VAR 0 1
75653: PPUSH
75654: LD_VAR 0 6
75658: PPUSH
75659: LD_VAR 0 11
75663: PPUSH
75664: CALL_OW 272
75668: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75669: LD_ADDR_VAR 0 8
75673: PUSH
75674: LD_VAR 0 2
75678: PPUSH
75679: LD_VAR 0 6
75683: PPUSH
75684: LD_VAR 0 11
75688: PPUSH
75689: CALL_OW 273
75693: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75694: LD_VAR 0 7
75698: PPUSH
75699: LD_VAR 0 8
75703: PPUSH
75704: CALL_OW 488
75708: NOT
75709: IFFALSE 75713
// continue ;
75711: GO 75641
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75713: LD_ADDR_VAR 0 9
75717: PUSH
75718: LD_VAR 0 12
75722: PUSH
75723: LD_INT 1
75725: ARRAY
75726: PPUSH
75727: LD_VAR 0 12
75731: PUSH
75732: LD_INT 2
75734: ARRAY
75735: PPUSH
75736: LD_VAR 0 7
75740: PPUSH
75741: LD_VAR 0 8
75745: PPUSH
75746: CALL_OW 298
75750: ST_TO_ADDR
// if tmp < distance then
75751: LD_VAR 0 9
75755: PUSH
75756: LD_VAR 0 10
75760: LESS
75761: IFFALSE 75783
// begin result := i ;
75763: LD_ADDR_VAR 0 5
75767: PUSH
75768: LD_VAR 0 6
75772: ST_TO_ADDR
// distance := tmp ;
75773: LD_ADDR_VAR 0 10
75777: PUSH
75778: LD_VAR 0 9
75782: ST_TO_ADDR
// end ; end ;
75783: GO 75641
75785: POP
75786: POP
// end ;
75787: LD_VAR 0 5
75791: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75792: LD_INT 0
75794: PPUSH
75795: PPUSH
// if not driver or not IsInUnit ( driver ) then
75796: LD_VAR 0 1
75800: NOT
75801: PUSH
75802: LD_VAR 0 1
75806: PPUSH
75807: CALL_OW 310
75811: NOT
75812: OR
75813: IFFALSE 75817
// exit ;
75815: GO 75907
// vehicle := IsInUnit ( driver ) ;
75817: LD_ADDR_VAR 0 3
75821: PUSH
75822: LD_VAR 0 1
75826: PPUSH
75827: CALL_OW 310
75831: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75832: LD_VAR 0 1
75836: PPUSH
75837: LD_STRING \
75839: PUSH
75840: LD_INT 0
75842: PUSH
75843: LD_INT 0
75845: PUSH
75846: LD_INT 0
75848: PUSH
75849: LD_INT 0
75851: PUSH
75852: LD_INT 0
75854: PUSH
75855: LD_INT 0
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: PUSH
75867: LD_STRING E
75869: PUSH
75870: LD_INT 0
75872: PUSH
75873: LD_INT 0
75875: PUSH
75876: LD_VAR 0 3
75880: PUSH
75881: LD_INT 0
75883: PUSH
75884: LD_INT 0
75886: PUSH
75887: LD_INT 0
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PPUSH
75903: CALL_OW 446
// end ;
75907: LD_VAR 0 2
75911: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75912: LD_INT 0
75914: PPUSH
75915: PPUSH
// if not driver or not IsInUnit ( driver ) then
75916: LD_VAR 0 1
75920: NOT
75921: PUSH
75922: LD_VAR 0 1
75926: PPUSH
75927: CALL_OW 310
75931: NOT
75932: OR
75933: IFFALSE 75937
// exit ;
75935: GO 76027
// vehicle := IsInUnit ( driver ) ;
75937: LD_ADDR_VAR 0 3
75941: PUSH
75942: LD_VAR 0 1
75946: PPUSH
75947: CALL_OW 310
75951: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75952: LD_VAR 0 1
75956: PPUSH
75957: LD_STRING \
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: LD_INT 0
75965: PUSH
75966: LD_INT 0
75968: PUSH
75969: LD_INT 0
75971: PUSH
75972: LD_INT 0
75974: PUSH
75975: LD_INT 0
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: PUSH
75987: LD_STRING E
75989: PUSH
75990: LD_INT 0
75992: PUSH
75993: LD_INT 0
75995: PUSH
75996: LD_VAR 0 3
76000: PUSH
76001: LD_INT 0
76003: PUSH
76004: LD_INT 0
76006: PUSH
76007: LD_INT 0
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PPUSH
76023: CALL_OW 447
// end ;
76027: LD_VAR 0 2
76031: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76032: LD_INT 0
76034: PPUSH
76035: PPUSH
76036: PPUSH
// tmp := [ ] ;
76037: LD_ADDR_VAR 0 5
76041: PUSH
76042: EMPTY
76043: ST_TO_ADDR
// for i in units do
76044: LD_ADDR_VAR 0 4
76048: PUSH
76049: LD_VAR 0 1
76053: PUSH
76054: FOR_IN
76055: IFFALSE 76093
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76057: LD_ADDR_VAR 0 5
76061: PUSH
76062: LD_VAR 0 5
76066: PPUSH
76067: LD_VAR 0 5
76071: PUSH
76072: LD_INT 1
76074: PLUS
76075: PPUSH
76076: LD_VAR 0 4
76080: PPUSH
76081: CALL_OW 256
76085: PPUSH
76086: CALL_OW 2
76090: ST_TO_ADDR
76091: GO 76054
76093: POP
76094: POP
// if not tmp then
76095: LD_VAR 0 5
76099: NOT
76100: IFFALSE 76104
// exit ;
76102: GO 76152
// if asc then
76104: LD_VAR 0 2
76108: IFFALSE 76132
// result := SortListByListAsc ( units , tmp ) else
76110: LD_ADDR_VAR 0 3
76114: PUSH
76115: LD_VAR 0 1
76119: PPUSH
76120: LD_VAR 0 5
76124: PPUSH
76125: CALL_OW 76
76129: ST_TO_ADDR
76130: GO 76152
// result := SortListByListDesc ( units , tmp ) ;
76132: LD_ADDR_VAR 0 3
76136: PUSH
76137: LD_VAR 0 1
76141: PPUSH
76142: LD_VAR 0 5
76146: PPUSH
76147: CALL_OW 77
76151: ST_TO_ADDR
// end ;
76152: LD_VAR 0 3
76156: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76157: LD_INT 0
76159: PPUSH
76160: PPUSH
// task := GetTaskList ( mech ) ;
76161: LD_ADDR_VAR 0 4
76165: PUSH
76166: LD_VAR 0 1
76170: PPUSH
76171: CALL_OW 437
76175: ST_TO_ADDR
// if not task then
76176: LD_VAR 0 4
76180: NOT
76181: IFFALSE 76185
// exit ;
76183: GO 76227
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76185: LD_ADDR_VAR 0 3
76189: PUSH
76190: LD_VAR 0 4
76194: PUSH
76195: LD_INT 1
76197: ARRAY
76198: PUSH
76199: LD_INT 1
76201: ARRAY
76202: PUSH
76203: LD_STRING r
76205: EQUAL
76206: PUSH
76207: LD_VAR 0 4
76211: PUSH
76212: LD_INT 1
76214: ARRAY
76215: PUSH
76216: LD_INT 4
76218: ARRAY
76219: PUSH
76220: LD_VAR 0 2
76224: EQUAL
76225: AND
76226: ST_TO_ADDR
// end ;
76227: LD_VAR 0 3
76231: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76232: LD_INT 0
76234: PPUSH
// SetDir ( unit , d ) ;
76235: LD_VAR 0 1
76239: PPUSH
76240: LD_VAR 0 4
76244: PPUSH
76245: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76249: LD_VAR 0 1
76253: PPUSH
76254: LD_VAR 0 2
76258: PPUSH
76259: LD_VAR 0 3
76263: PPUSH
76264: LD_VAR 0 5
76268: PPUSH
76269: CALL_OW 48
// end ;
76273: LD_VAR 0 6
76277: RET
// export function ToNaturalNumber ( number ) ; begin
76278: LD_INT 0
76280: PPUSH
// result := number div 1 ;
76281: LD_ADDR_VAR 0 2
76285: PUSH
76286: LD_VAR 0 1
76290: PUSH
76291: LD_INT 1
76293: DIV
76294: ST_TO_ADDR
// if number < 0 then
76295: LD_VAR 0 1
76299: PUSH
76300: LD_INT 0
76302: LESS
76303: IFFALSE 76313
// result := 0 ;
76305: LD_ADDR_VAR 0 2
76309: PUSH
76310: LD_INT 0
76312: ST_TO_ADDR
// end ;
76313: LD_VAR 0 2
76317: RET
// export function SortByClass ( units , class ) ; var un ; begin
76318: LD_INT 0
76320: PPUSH
76321: PPUSH
// if not units or not class then
76322: LD_VAR 0 1
76326: NOT
76327: PUSH
76328: LD_VAR 0 2
76332: NOT
76333: OR
76334: IFFALSE 76338
// exit ;
76336: GO 76433
// result := [ ] ;
76338: LD_ADDR_VAR 0 3
76342: PUSH
76343: EMPTY
76344: ST_TO_ADDR
// for un in units do
76345: LD_ADDR_VAR 0 4
76349: PUSH
76350: LD_VAR 0 1
76354: PUSH
76355: FOR_IN
76356: IFFALSE 76431
// if GetClass ( un ) = class then
76358: LD_VAR 0 4
76362: PPUSH
76363: CALL_OW 257
76367: PUSH
76368: LD_VAR 0 2
76372: EQUAL
76373: IFFALSE 76400
// result := Insert ( result , 1 , un ) else
76375: LD_ADDR_VAR 0 3
76379: PUSH
76380: LD_VAR 0 3
76384: PPUSH
76385: LD_INT 1
76387: PPUSH
76388: LD_VAR 0 4
76392: PPUSH
76393: CALL_OW 2
76397: ST_TO_ADDR
76398: GO 76429
// result := Replace ( result , result + 1 , un ) ;
76400: LD_ADDR_VAR 0 3
76404: PUSH
76405: LD_VAR 0 3
76409: PPUSH
76410: LD_VAR 0 3
76414: PUSH
76415: LD_INT 1
76417: PLUS
76418: PPUSH
76419: LD_VAR 0 4
76423: PPUSH
76424: CALL_OW 1
76428: ST_TO_ADDR
76429: GO 76355
76431: POP
76432: POP
// end ;
76433: LD_VAR 0 3
76437: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76438: LD_INT 0
76440: PPUSH
76441: PPUSH
76442: PPUSH
76443: PPUSH
76444: PPUSH
76445: PPUSH
76446: PPUSH
// result := [ ] ;
76447: LD_ADDR_VAR 0 4
76451: PUSH
76452: EMPTY
76453: ST_TO_ADDR
// if x - r < 0 then
76454: LD_VAR 0 1
76458: PUSH
76459: LD_VAR 0 3
76463: MINUS
76464: PUSH
76465: LD_INT 0
76467: LESS
76468: IFFALSE 76480
// min_x := 0 else
76470: LD_ADDR_VAR 0 8
76474: PUSH
76475: LD_INT 0
76477: ST_TO_ADDR
76478: GO 76496
// min_x := x - r ;
76480: LD_ADDR_VAR 0 8
76484: PUSH
76485: LD_VAR 0 1
76489: PUSH
76490: LD_VAR 0 3
76494: MINUS
76495: ST_TO_ADDR
// if y - r < 0 then
76496: LD_VAR 0 2
76500: PUSH
76501: LD_VAR 0 3
76505: MINUS
76506: PUSH
76507: LD_INT 0
76509: LESS
76510: IFFALSE 76522
// min_y := 0 else
76512: LD_ADDR_VAR 0 7
76516: PUSH
76517: LD_INT 0
76519: ST_TO_ADDR
76520: GO 76538
// min_y := y - r ;
76522: LD_ADDR_VAR 0 7
76526: PUSH
76527: LD_VAR 0 2
76531: PUSH
76532: LD_VAR 0 3
76536: MINUS
76537: ST_TO_ADDR
// max_x := x + r ;
76538: LD_ADDR_VAR 0 9
76542: PUSH
76543: LD_VAR 0 1
76547: PUSH
76548: LD_VAR 0 3
76552: PLUS
76553: ST_TO_ADDR
// max_y := y + r ;
76554: LD_ADDR_VAR 0 10
76558: PUSH
76559: LD_VAR 0 2
76563: PUSH
76564: LD_VAR 0 3
76568: PLUS
76569: ST_TO_ADDR
// for _x = min_x to max_x do
76570: LD_ADDR_VAR 0 5
76574: PUSH
76575: DOUBLE
76576: LD_VAR 0 8
76580: DEC
76581: ST_TO_ADDR
76582: LD_VAR 0 9
76586: PUSH
76587: FOR_TO
76588: IFFALSE 76689
// for _y = min_y to max_y do
76590: LD_ADDR_VAR 0 6
76594: PUSH
76595: DOUBLE
76596: LD_VAR 0 7
76600: DEC
76601: ST_TO_ADDR
76602: LD_VAR 0 10
76606: PUSH
76607: FOR_TO
76608: IFFALSE 76685
// begin if not ValidHex ( _x , _y ) then
76610: LD_VAR 0 5
76614: PPUSH
76615: LD_VAR 0 6
76619: PPUSH
76620: CALL_OW 488
76624: NOT
76625: IFFALSE 76629
// continue ;
76627: GO 76607
// if GetResourceTypeXY ( _x , _y ) then
76629: LD_VAR 0 5
76633: PPUSH
76634: LD_VAR 0 6
76638: PPUSH
76639: CALL_OW 283
76643: IFFALSE 76683
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76645: LD_ADDR_VAR 0 4
76649: PUSH
76650: LD_VAR 0 4
76654: PPUSH
76655: LD_VAR 0 4
76659: PUSH
76660: LD_INT 1
76662: PLUS
76663: PPUSH
76664: LD_VAR 0 5
76668: PUSH
76669: LD_VAR 0 6
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PPUSH
76678: CALL_OW 1
76682: ST_TO_ADDR
// end ;
76683: GO 76607
76685: POP
76686: POP
76687: GO 76587
76689: POP
76690: POP
// end ;
76691: LD_VAR 0 4
76695: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76696: LD_INT 0
76698: PPUSH
76699: PPUSH
76700: PPUSH
76701: PPUSH
76702: PPUSH
76703: PPUSH
76704: PPUSH
76705: PPUSH
// if not units then
76706: LD_VAR 0 1
76710: NOT
76711: IFFALSE 76715
// exit ;
76713: GO 77239
// result := UnitFilter ( units , [ f_ok ] ) ;
76715: LD_ADDR_VAR 0 3
76719: PUSH
76720: LD_VAR 0 1
76724: PPUSH
76725: LD_INT 50
76727: PUSH
76728: EMPTY
76729: LIST
76730: PPUSH
76731: CALL_OW 72
76735: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76736: LD_ADDR_VAR 0 8
76740: PUSH
76741: LD_VAR 0 1
76745: PUSH
76746: LD_INT 1
76748: ARRAY
76749: PPUSH
76750: CALL_OW 255
76754: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76755: LD_ADDR_VAR 0 10
76759: PUSH
76760: LD_INT 29
76762: PUSH
76763: LD_INT 91
76765: PUSH
76766: LD_INT 49
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: LIST
76773: ST_TO_ADDR
// if not result then
76774: LD_VAR 0 3
76778: NOT
76779: IFFALSE 76783
// exit ;
76781: GO 77239
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76783: LD_ADDR_VAR 0 5
76787: PUSH
76788: LD_INT 81
76790: PUSH
76791: LD_VAR 0 8
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PPUSH
76800: CALL_OW 69
76804: ST_TO_ADDR
// for i in result do
76805: LD_ADDR_VAR 0 4
76809: PUSH
76810: LD_VAR 0 3
76814: PUSH
76815: FOR_IN
76816: IFFALSE 77237
// begin tag := GetTag ( i ) + 1 ;
76818: LD_ADDR_VAR 0 9
76822: PUSH
76823: LD_VAR 0 4
76827: PPUSH
76828: CALL_OW 110
76832: PUSH
76833: LD_INT 1
76835: PLUS
76836: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76837: LD_ADDR_VAR 0 7
76841: PUSH
76842: LD_VAR 0 4
76846: PPUSH
76847: CALL_OW 250
76851: PPUSH
76852: LD_VAR 0 4
76856: PPUSH
76857: CALL_OW 251
76861: PPUSH
76862: LD_INT 6
76864: PPUSH
76865: CALL 76438 0 3
76869: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76870: LD_VAR 0 4
76874: PPUSH
76875: CALL_OW 247
76879: PUSH
76880: LD_INT 2
76882: EQUAL
76883: PUSH
76884: LD_VAR 0 7
76888: AND
76889: PUSH
76890: LD_VAR 0 4
76894: PPUSH
76895: CALL_OW 264
76899: PUSH
76900: LD_VAR 0 10
76904: IN
76905: NOT
76906: AND
76907: IFFALSE 76946
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76909: LD_VAR 0 4
76913: PPUSH
76914: LD_VAR 0 7
76918: PUSH
76919: LD_INT 1
76921: ARRAY
76922: PUSH
76923: LD_INT 1
76925: ARRAY
76926: PPUSH
76927: LD_VAR 0 7
76931: PUSH
76932: LD_INT 1
76934: ARRAY
76935: PUSH
76936: LD_INT 2
76938: ARRAY
76939: PPUSH
76940: CALL_OW 116
76944: GO 77235
// if path > tag then
76946: LD_VAR 0 2
76950: PUSH
76951: LD_VAR 0 9
76955: GREATER
76956: IFFALSE 77164
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76958: LD_ADDR_VAR 0 6
76962: PUSH
76963: LD_VAR 0 5
76967: PPUSH
76968: LD_INT 91
76970: PUSH
76971: LD_VAR 0 4
76975: PUSH
76976: LD_INT 8
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: LIST
76983: PPUSH
76984: CALL_OW 72
76988: ST_TO_ADDR
// if nearEnemy then
76989: LD_VAR 0 6
76993: IFFALSE 77062
// begin if GetWeapon ( i ) = ru_time_lapser then
76995: LD_VAR 0 4
76999: PPUSH
77000: CALL_OW 264
77004: PUSH
77005: LD_INT 49
77007: EQUAL
77008: IFFALSE 77036
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77010: LD_VAR 0 4
77014: PPUSH
77015: LD_VAR 0 6
77019: PPUSH
77020: LD_VAR 0 4
77024: PPUSH
77025: CALL_OW 74
77029: PPUSH
77030: CALL_OW 112
77034: GO 77060
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77036: LD_VAR 0 4
77040: PPUSH
77041: LD_VAR 0 6
77045: PPUSH
77046: LD_VAR 0 4
77050: PPUSH
77051: CALL_OW 74
77055: PPUSH
77056: CALL 78164 0 2
// end else
77060: GO 77162
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77062: LD_VAR 0 4
77066: PPUSH
77067: LD_VAR 0 2
77071: PUSH
77072: LD_VAR 0 9
77076: ARRAY
77077: PUSH
77078: LD_INT 1
77080: ARRAY
77081: PPUSH
77082: LD_VAR 0 2
77086: PUSH
77087: LD_VAR 0 9
77091: ARRAY
77092: PUSH
77093: LD_INT 2
77095: ARRAY
77096: PPUSH
77097: CALL_OW 297
77101: PUSH
77102: LD_INT 6
77104: GREATER
77105: IFFALSE 77148
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77107: LD_VAR 0 4
77111: PPUSH
77112: LD_VAR 0 2
77116: PUSH
77117: LD_VAR 0 9
77121: ARRAY
77122: PUSH
77123: LD_INT 1
77125: ARRAY
77126: PPUSH
77127: LD_VAR 0 2
77131: PUSH
77132: LD_VAR 0 9
77136: ARRAY
77137: PUSH
77138: LD_INT 2
77140: ARRAY
77141: PPUSH
77142: CALL_OW 114
77146: GO 77162
// SetTag ( i , tag ) ;
77148: LD_VAR 0 4
77152: PPUSH
77153: LD_VAR 0 9
77157: PPUSH
77158: CALL_OW 109
// end else
77162: GO 77235
// if enemy then
77164: LD_VAR 0 5
77168: IFFALSE 77235
// begin if GetWeapon ( i ) = ru_time_lapser then
77170: LD_VAR 0 4
77174: PPUSH
77175: CALL_OW 264
77179: PUSH
77180: LD_INT 49
77182: EQUAL
77183: IFFALSE 77211
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77185: LD_VAR 0 4
77189: PPUSH
77190: LD_VAR 0 5
77194: PPUSH
77195: LD_VAR 0 4
77199: PPUSH
77200: CALL_OW 74
77204: PPUSH
77205: CALL_OW 112
77209: GO 77235
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77211: LD_VAR 0 4
77215: PPUSH
77216: LD_VAR 0 5
77220: PPUSH
77221: LD_VAR 0 4
77225: PPUSH
77226: CALL_OW 74
77230: PPUSH
77231: CALL 78164 0 2
// end ; end ;
77235: GO 76815
77237: POP
77238: POP
// end ;
77239: LD_VAR 0 3
77243: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77244: LD_INT 0
77246: PPUSH
77247: PPUSH
77248: PPUSH
// if not unit or IsInUnit ( unit ) then
77249: LD_VAR 0 1
77253: NOT
77254: PUSH
77255: LD_VAR 0 1
77259: PPUSH
77260: CALL_OW 310
77264: OR
77265: IFFALSE 77269
// exit ;
77267: GO 77360
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77269: LD_ADDR_VAR 0 4
77273: PUSH
77274: LD_VAR 0 1
77278: PPUSH
77279: CALL_OW 250
77283: PPUSH
77284: LD_VAR 0 2
77288: PPUSH
77289: LD_INT 1
77291: PPUSH
77292: CALL_OW 272
77296: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77297: LD_ADDR_VAR 0 5
77301: PUSH
77302: LD_VAR 0 1
77306: PPUSH
77307: CALL_OW 251
77311: PPUSH
77312: LD_VAR 0 2
77316: PPUSH
77317: LD_INT 1
77319: PPUSH
77320: CALL_OW 273
77324: ST_TO_ADDR
// if ValidHex ( x , y ) then
77325: LD_VAR 0 4
77329: PPUSH
77330: LD_VAR 0 5
77334: PPUSH
77335: CALL_OW 488
77339: IFFALSE 77360
// ComTurnXY ( unit , x , y ) ;
77341: LD_VAR 0 1
77345: PPUSH
77346: LD_VAR 0 4
77350: PPUSH
77351: LD_VAR 0 5
77355: PPUSH
77356: CALL_OW 118
// end ;
77360: LD_VAR 0 3
77364: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77365: LD_INT 0
77367: PPUSH
77368: PPUSH
// result := false ;
77369: LD_ADDR_VAR 0 3
77373: PUSH
77374: LD_INT 0
77376: ST_TO_ADDR
// if not units then
77377: LD_VAR 0 2
77381: NOT
77382: IFFALSE 77386
// exit ;
77384: GO 77431
// for i in units do
77386: LD_ADDR_VAR 0 4
77390: PUSH
77391: LD_VAR 0 2
77395: PUSH
77396: FOR_IN
77397: IFFALSE 77429
// if See ( side , i ) then
77399: LD_VAR 0 1
77403: PPUSH
77404: LD_VAR 0 4
77408: PPUSH
77409: CALL_OW 292
77413: IFFALSE 77427
// begin result := true ;
77415: LD_ADDR_VAR 0 3
77419: PUSH
77420: LD_INT 1
77422: ST_TO_ADDR
// exit ;
77423: POP
77424: POP
77425: GO 77431
// end ;
77427: GO 77396
77429: POP
77430: POP
// end ;
77431: LD_VAR 0 3
77435: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77436: LD_INT 0
77438: PPUSH
77439: PPUSH
77440: PPUSH
77441: PPUSH
// if not unit or not points then
77442: LD_VAR 0 1
77446: NOT
77447: PUSH
77448: LD_VAR 0 2
77452: NOT
77453: OR
77454: IFFALSE 77458
// exit ;
77456: GO 77548
// dist := 99999 ;
77458: LD_ADDR_VAR 0 5
77462: PUSH
77463: LD_INT 99999
77465: ST_TO_ADDR
// for i in points do
77466: LD_ADDR_VAR 0 4
77470: PUSH
77471: LD_VAR 0 2
77475: PUSH
77476: FOR_IN
77477: IFFALSE 77546
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77479: LD_ADDR_VAR 0 6
77483: PUSH
77484: LD_VAR 0 1
77488: PPUSH
77489: LD_VAR 0 4
77493: PUSH
77494: LD_INT 1
77496: ARRAY
77497: PPUSH
77498: LD_VAR 0 4
77502: PUSH
77503: LD_INT 2
77505: ARRAY
77506: PPUSH
77507: CALL_OW 297
77511: ST_TO_ADDR
// if tmpDist < dist then
77512: LD_VAR 0 6
77516: PUSH
77517: LD_VAR 0 5
77521: LESS
77522: IFFALSE 77544
// begin result := i ;
77524: LD_ADDR_VAR 0 3
77528: PUSH
77529: LD_VAR 0 4
77533: ST_TO_ADDR
// dist := tmpDist ;
77534: LD_ADDR_VAR 0 5
77538: PUSH
77539: LD_VAR 0 6
77543: ST_TO_ADDR
// end ; end ;
77544: GO 77476
77546: POP
77547: POP
// end ;
77548: LD_VAR 0 3
77552: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77553: LD_INT 0
77555: PPUSH
// uc_side := side ;
77556: LD_ADDR_OWVAR 20
77560: PUSH
77561: LD_VAR 0 1
77565: ST_TO_ADDR
// uc_nation := 3 ;
77566: LD_ADDR_OWVAR 21
77570: PUSH
77571: LD_INT 3
77573: ST_TO_ADDR
// vc_chassis := 25 ;
77574: LD_ADDR_OWVAR 37
77578: PUSH
77579: LD_INT 25
77581: ST_TO_ADDR
// vc_engine := engine_siberite ;
77582: LD_ADDR_OWVAR 39
77586: PUSH
77587: LD_INT 3
77589: ST_TO_ADDR
// vc_control := control_computer ;
77590: LD_ADDR_OWVAR 38
77594: PUSH
77595: LD_INT 3
77597: ST_TO_ADDR
// vc_weapon := 59 ;
77598: LD_ADDR_OWVAR 40
77602: PUSH
77603: LD_INT 59
77605: ST_TO_ADDR
// result := CreateVehicle ;
77606: LD_ADDR_VAR 0 5
77610: PUSH
77611: CALL_OW 45
77615: ST_TO_ADDR
// SetDir ( result , d ) ;
77616: LD_VAR 0 5
77620: PPUSH
77621: LD_VAR 0 4
77625: PPUSH
77626: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77630: LD_VAR 0 5
77634: PPUSH
77635: LD_VAR 0 2
77639: PPUSH
77640: LD_VAR 0 3
77644: PPUSH
77645: LD_INT 0
77647: PPUSH
77648: CALL_OW 48
// end ;
77652: LD_VAR 0 5
77656: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77657: LD_INT 0
77659: PPUSH
77660: PPUSH
77661: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77662: LD_ADDR_VAR 0 2
77666: PUSH
77667: LD_INT 0
77669: PUSH
77670: LD_INT 0
77672: PUSH
77673: LD_INT 0
77675: PUSH
77676: LD_INT 0
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: LIST
77683: LIST
77684: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77685: LD_VAR 0 1
77689: NOT
77690: PUSH
77691: LD_VAR 0 1
77695: PPUSH
77696: CALL_OW 264
77700: PUSH
77701: LD_INT 12
77703: PUSH
77704: LD_INT 51
77706: PUSH
77707: LD_INT 32
77709: PUSH
77710: LD_INT 89
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: IN
77719: NOT
77720: OR
77721: IFFALSE 77725
// exit ;
77723: GO 77823
// for i := 1 to 3 do
77725: LD_ADDR_VAR 0 3
77729: PUSH
77730: DOUBLE
77731: LD_INT 1
77733: DEC
77734: ST_TO_ADDR
77735: LD_INT 3
77737: PUSH
77738: FOR_TO
77739: IFFALSE 77821
// begin tmp := GetCargo ( cargo , i ) ;
77741: LD_ADDR_VAR 0 4
77745: PUSH
77746: LD_VAR 0 1
77750: PPUSH
77751: LD_VAR 0 3
77755: PPUSH
77756: CALL_OW 289
77760: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77761: LD_ADDR_VAR 0 2
77765: PUSH
77766: LD_VAR 0 2
77770: PPUSH
77771: LD_VAR 0 3
77775: PPUSH
77776: LD_VAR 0 4
77780: PPUSH
77781: CALL_OW 1
77785: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77786: LD_ADDR_VAR 0 2
77790: PUSH
77791: LD_VAR 0 2
77795: PPUSH
77796: LD_INT 4
77798: PPUSH
77799: LD_VAR 0 2
77803: PUSH
77804: LD_INT 4
77806: ARRAY
77807: PUSH
77808: LD_VAR 0 4
77812: PLUS
77813: PPUSH
77814: CALL_OW 1
77818: ST_TO_ADDR
// end ;
77819: GO 77738
77821: POP
77822: POP
// end ;
77823: LD_VAR 0 2
77827: RET
// export function Length ( array ) ; begin
77828: LD_INT 0
77830: PPUSH
// result := array + 0 ;
77831: LD_ADDR_VAR 0 2
77835: PUSH
77836: LD_VAR 0 1
77840: PUSH
77841: LD_INT 0
77843: PLUS
77844: ST_TO_ADDR
// end ;
77845: LD_VAR 0 2
77849: RET
// export function PrepareArray ( array ) ; begin
77850: LD_INT 0
77852: PPUSH
// result := array diff 0 ;
77853: LD_ADDR_VAR 0 2
77857: PUSH
77858: LD_VAR 0 1
77862: PUSH
77863: LD_INT 0
77865: DIFF
77866: ST_TO_ADDR
// if not result [ 1 ] then
77867: LD_VAR 0 2
77871: PUSH
77872: LD_INT 1
77874: ARRAY
77875: NOT
77876: IFFALSE 77896
// result := Delete ( result , 1 ) ;
77878: LD_ADDR_VAR 0 2
77882: PUSH
77883: LD_VAR 0 2
77887: PPUSH
77888: LD_INT 1
77890: PPUSH
77891: CALL_OW 3
77895: ST_TO_ADDR
// end ;
77896: LD_VAR 0 2
77900: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77901: LD_INT 0
77903: PPUSH
77904: PPUSH
77905: PPUSH
77906: PPUSH
// sibRocketRange := 25 ;
77907: LD_ADDR_VAR 0 6
77911: PUSH
77912: LD_INT 25
77914: ST_TO_ADDR
// result := false ;
77915: LD_ADDR_VAR 0 4
77919: PUSH
77920: LD_INT 0
77922: ST_TO_ADDR
// for i := 0 to 5 do
77923: LD_ADDR_VAR 0 5
77927: PUSH
77928: DOUBLE
77929: LD_INT 0
77931: DEC
77932: ST_TO_ADDR
77933: LD_INT 5
77935: PUSH
77936: FOR_TO
77937: IFFALSE 78004
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77939: LD_VAR 0 1
77943: PPUSH
77944: LD_VAR 0 5
77948: PPUSH
77949: LD_VAR 0 6
77953: PPUSH
77954: CALL_OW 272
77958: PPUSH
77959: LD_VAR 0 2
77963: PPUSH
77964: LD_VAR 0 5
77968: PPUSH
77969: LD_VAR 0 6
77973: PPUSH
77974: CALL_OW 273
77978: PPUSH
77979: LD_VAR 0 3
77983: PPUSH
77984: CALL_OW 309
77988: IFFALSE 78002
// begin result := true ;
77990: LD_ADDR_VAR 0 4
77994: PUSH
77995: LD_INT 1
77997: ST_TO_ADDR
// exit ;
77998: POP
77999: POP
78000: GO 78006
// end ;
78002: GO 77936
78004: POP
78005: POP
// end ;
78006: LD_VAR 0 4
78010: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78011: LD_INT 0
78013: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78014: LD_VAR 0 1
78018: PPUSH
78019: LD_VAR 0 2
78023: PPUSH
78024: LD_INT 0
78026: PPUSH
78027: LD_INT 0
78029: PPUSH
78030: LD_INT 1
78032: PPUSH
78033: LD_INT 0
78035: PPUSH
78036: CALL_OW 587
// end ;
78040: LD_VAR 0 3
78044: RET
// export function CenterOnNow ( unit ) ; begin
78045: LD_INT 0
78047: PPUSH
// result := IsInUnit ( unit ) ;
78048: LD_ADDR_VAR 0 2
78052: PUSH
78053: LD_VAR 0 1
78057: PPUSH
78058: CALL_OW 310
78062: ST_TO_ADDR
// if not result then
78063: LD_VAR 0 2
78067: NOT
78068: IFFALSE 78080
// result := unit ;
78070: LD_ADDR_VAR 0 2
78074: PUSH
78075: LD_VAR 0 1
78079: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78080: LD_VAR 0 1
78084: PPUSH
78085: CALL_OW 87
// end ;
78089: LD_VAR 0 2
78093: RET
// export function ComMoveHex ( unit , hex ) ; begin
78094: LD_INT 0
78096: PPUSH
// if not hex then
78097: LD_VAR 0 2
78101: NOT
78102: IFFALSE 78106
// exit ;
78104: GO 78159
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78106: LD_VAR 0 2
78110: PUSH
78111: LD_INT 1
78113: ARRAY
78114: PPUSH
78115: LD_VAR 0 2
78119: PUSH
78120: LD_INT 2
78122: ARRAY
78123: PPUSH
78124: CALL_OW 428
78128: IFFALSE 78132
// exit ;
78130: GO 78159
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78132: LD_VAR 0 1
78136: PPUSH
78137: LD_VAR 0 2
78141: PUSH
78142: LD_INT 1
78144: ARRAY
78145: PPUSH
78146: LD_VAR 0 2
78150: PUSH
78151: LD_INT 2
78153: ARRAY
78154: PPUSH
78155: CALL_OW 111
// end ;
78159: LD_VAR 0 3
78163: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78164: LD_INT 0
78166: PPUSH
78167: PPUSH
78168: PPUSH
// if not unit or not enemy then
78169: LD_VAR 0 1
78173: NOT
78174: PUSH
78175: LD_VAR 0 2
78179: NOT
78180: OR
78181: IFFALSE 78185
// exit ;
78183: GO 78309
// x := GetX ( enemy ) ;
78185: LD_ADDR_VAR 0 4
78189: PUSH
78190: LD_VAR 0 2
78194: PPUSH
78195: CALL_OW 250
78199: ST_TO_ADDR
// y := GetY ( enemy ) ;
78200: LD_ADDR_VAR 0 5
78204: PUSH
78205: LD_VAR 0 2
78209: PPUSH
78210: CALL_OW 251
78214: ST_TO_ADDR
// if ValidHex ( x , y ) then
78215: LD_VAR 0 4
78219: PPUSH
78220: LD_VAR 0 5
78224: PPUSH
78225: CALL_OW 488
78229: IFFALSE 78309
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
78231: LD_VAR 0 2
78235: PPUSH
78236: CALL_OW 247
78240: PUSH
78241: LD_INT 3
78243: PUSH
78244: LD_INT 2
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: IN
78251: PUSH
78252: LD_VAR 0 1
78256: PPUSH
78257: CALL_OW 255
78261: PPUSH
78262: LD_VAR 0 2
78266: PPUSH
78267: CALL_OW 292
78271: OR
78272: IFFALSE 78290
// ComAttackUnit ( unit , enemy ) else
78274: LD_VAR 0 1
78278: PPUSH
78279: LD_VAR 0 2
78283: PPUSH
78284: CALL_OW 115
78288: GO 78309
// ComAgressiveMove ( unit , x , y ) ;
78290: LD_VAR 0 1
78294: PPUSH
78295: LD_VAR 0 4
78299: PPUSH
78300: LD_VAR 0 5
78304: PPUSH
78305: CALL_OW 114
// end ;
78309: LD_VAR 0 3
78313: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78314: LD_INT 0
78316: PPUSH
78317: PPUSH
78318: PPUSH
// list := AreaToList ( area , 0 ) ;
78319: LD_ADDR_VAR 0 5
78323: PUSH
78324: LD_VAR 0 1
78328: PPUSH
78329: LD_INT 0
78331: PPUSH
78332: CALL_OW 517
78336: ST_TO_ADDR
// if not list then
78337: LD_VAR 0 5
78341: NOT
78342: IFFALSE 78346
// exit ;
78344: GO 78476
// if all then
78346: LD_VAR 0 2
78350: IFFALSE 78438
// begin for i := 1 to list [ 1 ] do
78352: LD_ADDR_VAR 0 4
78356: PUSH
78357: DOUBLE
78358: LD_INT 1
78360: DEC
78361: ST_TO_ADDR
78362: LD_VAR 0 5
78366: PUSH
78367: LD_INT 1
78369: ARRAY
78370: PUSH
78371: FOR_TO
78372: IFFALSE 78434
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78374: LD_ADDR_VAR 0 3
78378: PUSH
78379: LD_VAR 0 3
78383: PPUSH
78384: LD_VAR 0 3
78388: PUSH
78389: LD_INT 1
78391: PLUS
78392: PPUSH
78393: LD_VAR 0 5
78397: PUSH
78398: LD_INT 1
78400: ARRAY
78401: PUSH
78402: LD_VAR 0 4
78406: ARRAY
78407: PUSH
78408: LD_VAR 0 5
78412: PUSH
78413: LD_INT 2
78415: ARRAY
78416: PUSH
78417: LD_VAR 0 4
78421: ARRAY
78422: PUSH
78423: EMPTY
78424: LIST
78425: LIST
78426: PPUSH
78427: CALL_OW 1
78431: ST_TO_ADDR
78432: GO 78371
78434: POP
78435: POP
// exit ;
78436: GO 78476
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78438: LD_ADDR_VAR 0 3
78442: PUSH
78443: LD_VAR 0 5
78447: PUSH
78448: LD_INT 1
78450: ARRAY
78451: PUSH
78452: LD_INT 1
78454: ARRAY
78455: PUSH
78456: LD_VAR 0 5
78460: PUSH
78461: LD_INT 2
78463: ARRAY
78464: PUSH
78465: LD_INT 1
78467: ARRAY
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: EMPTY
78474: LIST
78475: ST_TO_ADDR
// end ;
78476: LD_VAR 0 3
78480: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78481: LD_INT 0
78483: PPUSH
78484: PPUSH
// list := AreaToList ( area , 0 ) ;
78485: LD_ADDR_VAR 0 4
78489: PUSH
78490: LD_VAR 0 1
78494: PPUSH
78495: LD_INT 0
78497: PPUSH
78498: CALL_OW 517
78502: ST_TO_ADDR
// if not list then
78503: LD_VAR 0 4
78507: NOT
78508: IFFALSE 78512
// exit ;
78510: GO 78553
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78512: LD_ADDR_VAR 0 3
78516: PUSH
78517: LD_VAR 0 4
78521: PUSH
78522: LD_INT 1
78524: ARRAY
78525: PUSH
78526: LD_INT 1
78528: ARRAY
78529: PUSH
78530: LD_VAR 0 4
78534: PUSH
78535: LD_INT 2
78537: ARRAY
78538: PUSH
78539: LD_INT 1
78541: ARRAY
78542: PUSH
78543: LD_VAR 0 2
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: LIST
78552: ST_TO_ADDR
// end ;
78553: LD_VAR 0 3
78557: RET
// export function First ( array ) ; begin
78558: LD_INT 0
78560: PPUSH
// if not array then
78561: LD_VAR 0 1
78565: NOT
78566: IFFALSE 78570
// exit ;
78568: GO 78584
// result := array [ 1 ] ;
78570: LD_ADDR_VAR 0 2
78574: PUSH
78575: LD_VAR 0 1
78579: PUSH
78580: LD_INT 1
78582: ARRAY
78583: ST_TO_ADDR
// end ;
78584: LD_VAR 0 2
78588: RET
// export function Last ( array ) ; begin
78589: LD_INT 0
78591: PPUSH
// if not array then
78592: LD_VAR 0 1
78596: NOT
78597: IFFALSE 78601
// exit ;
78599: GO 78617
// result := array [ array ] ;
78601: LD_ADDR_VAR 0 2
78605: PUSH
78606: LD_VAR 0 1
78610: PUSH
78611: LD_VAR 0 1
78615: ARRAY
78616: ST_TO_ADDR
// end ;
78617: LD_VAR 0 2
78621: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78622: LD_INT 0
78624: PPUSH
78625: PPUSH
// result := [ ] ;
78626: LD_ADDR_VAR 0 5
78630: PUSH
78631: EMPTY
78632: ST_TO_ADDR
// if not array then
78633: LD_VAR 0 1
78637: NOT
78638: IFFALSE 78642
// exit ;
78640: GO 78754
// for i := 1 to array do
78642: LD_ADDR_VAR 0 6
78646: PUSH
78647: DOUBLE
78648: LD_INT 1
78650: DEC
78651: ST_TO_ADDR
78652: LD_VAR 0 1
78656: PUSH
78657: FOR_TO
78658: IFFALSE 78752
// if array [ i ] [ index ] = value then
78660: LD_VAR 0 1
78664: PUSH
78665: LD_VAR 0 6
78669: ARRAY
78670: PUSH
78671: LD_VAR 0 2
78675: ARRAY
78676: PUSH
78677: LD_VAR 0 3
78681: EQUAL
78682: IFFALSE 78750
// begin if indexColumn then
78684: LD_VAR 0 4
78688: IFFALSE 78724
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78690: LD_ADDR_VAR 0 5
78694: PUSH
78695: LD_VAR 0 5
78699: PPUSH
78700: LD_VAR 0 1
78704: PUSH
78705: LD_VAR 0 6
78709: ARRAY
78710: PUSH
78711: LD_VAR 0 4
78715: ARRAY
78716: PPUSH
78717: CALL 74092 0 2
78721: ST_TO_ADDR
78722: GO 78750
// result := Join ( result , array [ i ] ) ;
78724: LD_ADDR_VAR 0 5
78728: PUSH
78729: LD_VAR 0 5
78733: PPUSH
78734: LD_VAR 0 1
78738: PUSH
78739: LD_VAR 0 6
78743: ARRAY
78744: PPUSH
78745: CALL 74092 0 2
78749: ST_TO_ADDR
// end ;
78750: GO 78657
78752: POP
78753: POP
// end ;
78754: LD_VAR 0 5
78758: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
78759: LD_INT 0
78761: PPUSH
78762: PPUSH
78763: PPUSH
// if btype = b_depot then
78764: LD_VAR 0 2
78768: PUSH
78769: LD_INT 0
78771: EQUAL
78772: IFFALSE 78784
// begin result := true ;
78774: LD_ADDR_VAR 0 3
78778: PUSH
78779: LD_INT 1
78781: ST_TO_ADDR
// exit ;
78782: GO 78900
// end ; pom := GetBase ( depot ) ;
78784: LD_ADDR_VAR 0 4
78788: PUSH
78789: LD_VAR 0 1
78793: PPUSH
78794: CALL_OW 274
78798: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
78799: LD_ADDR_VAR 0 5
78803: PUSH
78804: LD_VAR 0 2
78808: PPUSH
78809: LD_VAR 0 1
78813: PPUSH
78814: CALL_OW 248
78818: PPUSH
78819: CALL_OW 450
78823: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
78824: LD_ADDR_VAR 0 3
78828: PUSH
78829: LD_VAR 0 4
78833: PPUSH
78834: LD_INT 1
78836: PPUSH
78837: CALL_OW 275
78841: PUSH
78842: LD_VAR 0 5
78846: PUSH
78847: LD_INT 1
78849: ARRAY
78850: GREATEREQUAL
78851: PUSH
78852: LD_VAR 0 4
78856: PPUSH
78857: LD_INT 2
78859: PPUSH
78860: CALL_OW 275
78864: PUSH
78865: LD_VAR 0 5
78869: PUSH
78870: LD_INT 2
78872: ARRAY
78873: GREATEREQUAL
78874: AND
78875: PUSH
78876: LD_VAR 0 4
78880: PPUSH
78881: LD_INT 3
78883: PPUSH
78884: CALL_OW 275
78888: PUSH
78889: LD_VAR 0 5
78893: PUSH
78894: LD_INT 3
78896: ARRAY
78897: GREATEREQUAL
78898: AND
78899: ST_TO_ADDR
// end ;
78900: LD_VAR 0 3
78904: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78905: LD_INT 0
78907: PPUSH
// if not vehicles or not parkingPoint then
78908: LD_VAR 0 1
78912: NOT
78913: PUSH
78914: LD_VAR 0 2
78918: NOT
78919: OR
78920: IFFALSE 78924
// exit ;
78922: GO 79022
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78924: LD_ADDR_VAR 0 1
78928: PUSH
78929: LD_VAR 0 1
78933: PPUSH
78934: LD_INT 50
78936: PUSH
78937: EMPTY
78938: LIST
78939: PUSH
78940: LD_INT 3
78942: PUSH
78943: LD_INT 92
78945: PUSH
78946: LD_VAR 0 2
78950: PUSH
78951: LD_INT 1
78953: ARRAY
78954: PUSH
78955: LD_VAR 0 2
78959: PUSH
78960: LD_INT 2
78962: ARRAY
78963: PUSH
78964: LD_INT 8
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: LIST
78971: LIST
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: PPUSH
78981: CALL_OW 72
78985: ST_TO_ADDR
// if not vehicles then
78986: LD_VAR 0 1
78990: NOT
78991: IFFALSE 78995
// exit ;
78993: GO 79022
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78995: LD_VAR 0 1
78999: PPUSH
79000: LD_VAR 0 2
79004: PUSH
79005: LD_INT 1
79007: ARRAY
79008: PPUSH
79009: LD_VAR 0 2
79013: PUSH
79014: LD_INT 2
79016: ARRAY
79017: PPUSH
79018: CALL_OW 111
// end ;
79022: LD_VAR 0 3
79026: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
79027: LD_INT 0
79029: PPUSH
79030: PPUSH
79031: PPUSH
// if not side or not area then
79032: LD_VAR 0 1
79036: NOT
79037: PUSH
79038: LD_VAR 0 2
79042: NOT
79043: OR
79044: IFFALSE 79048
// exit ;
79046: GO 79167
// tmp := AreaToList ( area , 0 ) ;
79048: LD_ADDR_VAR 0 5
79052: PUSH
79053: LD_VAR 0 2
79057: PPUSH
79058: LD_INT 0
79060: PPUSH
79061: CALL_OW 517
79065: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
79066: LD_ADDR_VAR 0 4
79070: PUSH
79071: DOUBLE
79072: LD_INT 1
79074: DEC
79075: ST_TO_ADDR
79076: LD_VAR 0 5
79080: PUSH
79081: LD_INT 1
79083: ARRAY
79084: PUSH
79085: FOR_TO
79086: IFFALSE 79165
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
79088: LD_VAR 0 5
79092: PUSH
79093: LD_INT 1
79095: ARRAY
79096: PUSH
79097: LD_VAR 0 4
79101: ARRAY
79102: PPUSH
79103: LD_VAR 0 5
79107: PUSH
79108: LD_INT 2
79110: ARRAY
79111: PUSH
79112: LD_VAR 0 4
79116: ARRAY
79117: PPUSH
79118: CALL_OW 351
79122: IFFALSE 79163
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
79124: LD_VAR 0 5
79128: PUSH
79129: LD_INT 1
79131: ARRAY
79132: PUSH
79133: LD_VAR 0 4
79137: ARRAY
79138: PPUSH
79139: LD_VAR 0 5
79143: PUSH
79144: LD_INT 2
79146: ARRAY
79147: PUSH
79148: LD_VAR 0 4
79152: ARRAY
79153: PPUSH
79154: LD_VAR 0 1
79158: PPUSH
79159: CALL_OW 244
// end ;
79163: GO 79085
79165: POP
79166: POP
// end ; end_of_file
79167: LD_VAR 0 3
79171: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79172: LD_VAR 0 1
79176: PUSH
79177: LD_INT 200
79179: DOUBLE
79180: GREATEREQUAL
79181: IFFALSE 79189
79183: LD_INT 299
79185: DOUBLE
79186: LESSEQUAL
79187: IFTRUE 79191
79189: GO 79223
79191: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79192: LD_VAR 0 1
79196: PPUSH
79197: LD_VAR 0 2
79201: PPUSH
79202: LD_VAR 0 3
79206: PPUSH
79207: LD_VAR 0 4
79211: PPUSH
79212: LD_VAR 0 5
79216: PPUSH
79217: CALL 31883 0 5
79221: GO 79300
79223: LD_INT 300
79225: DOUBLE
79226: GREATEREQUAL
79227: IFFALSE 79235
79229: LD_INT 399
79231: DOUBLE
79232: LESSEQUAL
79233: IFTRUE 79237
79235: GO 79299
79237: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79238: LD_VAR 0 1
79242: PPUSH
79243: LD_VAR 0 2
79247: PPUSH
79248: LD_VAR 0 3
79252: PPUSH
79253: LD_VAR 0 4
79257: PPUSH
79258: LD_VAR 0 5
79262: PPUSH
79263: LD_VAR 0 6
79267: PPUSH
79268: LD_VAR 0 7
79272: PPUSH
79273: LD_VAR 0 8
79277: PPUSH
79278: LD_VAR 0 9
79282: PPUSH
79283: LD_VAR 0 10
79287: PPUSH
79288: LD_VAR 0 11
79292: PPUSH
79293: CALL 28208 0 11
79297: GO 79300
79299: POP
// end ;
79300: PPOPN 11
79302: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79303: LD_VAR 0 1
79307: PPUSH
79308: LD_VAR 0 2
79312: PPUSH
79313: LD_VAR 0 3
79317: PPUSH
79318: LD_VAR 0 4
79322: PPUSH
79323: LD_VAR 0 5
79327: PPUSH
79328: CALL 31619 0 5
// end ; end_of_file
79332: PPOPN 5
79334: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79335: LD_VAR 0 1
79339: PPUSH
79340: LD_VAR 0 2
79344: PPUSH
79345: LD_VAR 0 3
79349: PPUSH
79350: LD_VAR 0 4
79354: PPUSH
79355: LD_VAR 0 5
79359: PPUSH
79360: LD_VAR 0 6
79364: PPUSH
79365: CALL 15860 0 6
// end ;
79369: PPOPN 6
79371: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79372: LD_INT 0
79374: PPUSH
// begin if not units then
79375: LD_VAR 0 1
79379: NOT
79380: IFFALSE 79384
// exit ;
79382: GO 79384
// end ;
79384: PPOPN 7
79386: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79387: CALL 15747 0 0
// end ;
79391: PPOPN 1
79393: END
